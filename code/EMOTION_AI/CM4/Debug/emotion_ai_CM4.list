
emotion_ai_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012520  10000000  10000000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  10012520  10012520  00032520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00008b00  10012580  10012580  00032580  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  1001b080  1001b080  00040dcc  2**0
                  CONTENTS
  5 .ARM          00000000  1001b080  1001b080  00040dcc  2**0
                  CONTENTS
  6 .preinit_array 00000000  1001b080  1001b080  00040dcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  1001b080  1001b080  0003b080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  1001b084  1001b084  0003b084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000d40  10020000  1001b088  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 0000008c  10020d40  1001bdc8  00040d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .bss          00009054  10020dcc  1001be54  00040dcc  2**2
                  ALLOC
 12 ._user_heap_stack 00001000  10029e20  10024ea8  00040dcc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00040dcc  2**0
                  CONTENTS, READONLY
 14 .comment      00000093  00000000  00000000  00040dfc  2**0
                  CONTENTS, READONLY
 15 .debug_info   00027634  00000000  00000000  00040e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005387  00000000  00000000  000684c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001ab8  00000000  00000000  0006d850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001411  00000000  00000000  0006f308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0004f80c  00000000  00000000  00070719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00024f36  00000000  00000000  000bff25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001f8f1f  00000000  00000000  000e4e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000081d0  00000000  00000000  002ddd7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000073  00000000  00000000  002e5f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	; (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	; (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	; (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	10020dcc 	.word	0x10020dcc
1000001c:	00000000 	.word	0x00000000
10000020:	10012508 	.word	0x10012508

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	; (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	; (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	; (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	10020dd0 	.word	0x10020dd0
1000003c:	10012508 	.word	0x10012508

10000040 <strcmp>:
10000040:	f810 2b01 	ldrb.w	r2, [r0], #1
10000044:	f811 3b01 	ldrb.w	r3, [r1], #1
10000048:	2a01      	cmp	r2, #1
1000004a:	bf28      	it	cs
1000004c:	429a      	cmpcs	r2, r3
1000004e:	d0f7      	beq.n	10000040 <strcmp>
10000050:	1ad0      	subs	r0, r2, r3
10000052:	4770      	bx	lr
	...

10000060 <memchr>:
10000060:	f001 01ff 	and.w	r1, r1, #255	; 0xff
10000064:	2a10      	cmp	r2, #16
10000066:	db2b      	blt.n	100000c0 <memchr+0x60>
10000068:	f010 0f07 	tst.w	r0, #7
1000006c:	d008      	beq.n	10000080 <memchr+0x20>
1000006e:	f810 3b01 	ldrb.w	r3, [r0], #1
10000072:	3a01      	subs	r2, #1
10000074:	428b      	cmp	r3, r1
10000076:	d02d      	beq.n	100000d4 <memchr+0x74>
10000078:	f010 0f07 	tst.w	r0, #7
1000007c:	b342      	cbz	r2, 100000d0 <memchr+0x70>
1000007e:	d1f6      	bne.n	1000006e <memchr+0xe>
10000080:	b4f0      	push	{r4, r5, r6, r7}
10000082:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
10000086:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1000008a:	f022 0407 	bic.w	r4, r2, #7
1000008e:	f07f 0700 	mvns.w	r7, #0
10000092:	2300      	movs	r3, #0
10000094:	e8f0 5602 	ldrd	r5, r6, [r0], #8
10000098:	3c08      	subs	r4, #8
1000009a:	ea85 0501 	eor.w	r5, r5, r1
1000009e:	ea86 0601 	eor.w	r6, r6, r1
100000a2:	fa85 f547 	uadd8	r5, r5, r7
100000a6:	faa3 f587 	sel	r5, r3, r7
100000aa:	fa86 f647 	uadd8	r6, r6, r7
100000ae:	faa5 f687 	sel	r6, r5, r7
100000b2:	b98e      	cbnz	r6, 100000d8 <memchr+0x78>
100000b4:	d1ee      	bne.n	10000094 <memchr+0x34>
100000b6:	bcf0      	pop	{r4, r5, r6, r7}
100000b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
100000bc:	f002 0207 	and.w	r2, r2, #7
100000c0:	b132      	cbz	r2, 100000d0 <memchr+0x70>
100000c2:	f810 3b01 	ldrb.w	r3, [r0], #1
100000c6:	3a01      	subs	r2, #1
100000c8:	ea83 0301 	eor.w	r3, r3, r1
100000cc:	b113      	cbz	r3, 100000d4 <memchr+0x74>
100000ce:	d1f8      	bne.n	100000c2 <memchr+0x62>
100000d0:	2000      	movs	r0, #0
100000d2:	4770      	bx	lr
100000d4:	3801      	subs	r0, #1
100000d6:	4770      	bx	lr
100000d8:	2d00      	cmp	r5, #0
100000da:	bf06      	itte	eq
100000dc:	4635      	moveq	r5, r6
100000de:	3803      	subeq	r0, #3
100000e0:	3807      	subne	r0, #7
100000e2:	f015 0f01 	tst.w	r5, #1
100000e6:	d107      	bne.n	100000f8 <memchr+0x98>
100000e8:	3001      	adds	r0, #1
100000ea:	f415 7f80 	tst.w	r5, #256	; 0x100
100000ee:	bf02      	ittt	eq
100000f0:	3001      	addeq	r0, #1
100000f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
100000f6:	3001      	addeq	r0, #1
100000f8:	bcf0      	pop	{r4, r5, r6, r7}
100000fa:	3801      	subs	r0, #1
100000fc:	4770      	bx	lr
100000fe:	bf00      	nop

10000100 <strlen>:
10000100:	4603      	mov	r3, r0
10000102:	f813 2b01 	ldrb.w	r2, [r3], #1
10000106:	2a00      	cmp	r2, #0
10000108:	d1fb      	bne.n	10000102 <strlen+0x2>
1000010a:	1a18      	subs	r0, r3, r0
1000010c:	3801      	subs	r0, #1
1000010e:	4770      	bx	lr

10000110 <__aeabi_drsub>:
10000110:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
10000114:	e002      	b.n	1000011c <__adddf3>
10000116:	bf00      	nop

10000118 <__aeabi_dsub>:
10000118:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1000011c <__adddf3>:
1000011c:	b530      	push	{r4, r5, lr}
1000011e:	ea4f 0441 	mov.w	r4, r1, lsl #1
10000122:	ea4f 0543 	mov.w	r5, r3, lsl #1
10000126:	ea94 0f05 	teq	r4, r5
1000012a:	bf08      	it	eq
1000012c:	ea90 0f02 	teqeq	r0, r2
10000130:	bf1f      	itttt	ne
10000132:	ea54 0c00 	orrsne.w	ip, r4, r0
10000136:	ea55 0c02 	orrsne.w	ip, r5, r2
1000013a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1000013e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
10000142:	f000 80e2 	beq.w	1000030a <__adddf3+0x1ee>
10000146:	ea4f 5454 	mov.w	r4, r4, lsr #21
1000014a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1000014e:	bfb8      	it	lt
10000150:	426d      	neglt	r5, r5
10000152:	dd0c      	ble.n	1000016e <__adddf3+0x52>
10000154:	442c      	add	r4, r5
10000156:	ea80 0202 	eor.w	r2, r0, r2
1000015a:	ea81 0303 	eor.w	r3, r1, r3
1000015e:	ea82 0000 	eor.w	r0, r2, r0
10000162:	ea83 0101 	eor.w	r1, r3, r1
10000166:	ea80 0202 	eor.w	r2, r0, r2
1000016a:	ea81 0303 	eor.w	r3, r1, r3
1000016e:	2d36      	cmp	r5, #54	; 0x36
10000170:	bf88      	it	hi
10000172:	bd30      	pophi	{r4, r5, pc}
10000174:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
10000178:	ea4f 3101 	mov.w	r1, r1, lsl #12
1000017c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
10000180:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
10000184:	d002      	beq.n	1000018c <__adddf3+0x70>
10000186:	4240      	negs	r0, r0
10000188:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1000018c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
10000190:	ea4f 3303 	mov.w	r3, r3, lsl #12
10000194:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
10000198:	d002      	beq.n	100001a0 <__adddf3+0x84>
1000019a:	4252      	negs	r2, r2
1000019c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
100001a0:	ea94 0f05 	teq	r4, r5
100001a4:	f000 80a7 	beq.w	100002f6 <__adddf3+0x1da>
100001a8:	f1a4 0401 	sub.w	r4, r4, #1
100001ac:	f1d5 0e20 	rsbs	lr, r5, #32
100001b0:	db0d      	blt.n	100001ce <__adddf3+0xb2>
100001b2:	fa02 fc0e 	lsl.w	ip, r2, lr
100001b6:	fa22 f205 	lsr.w	r2, r2, r5
100001ba:	1880      	adds	r0, r0, r2
100001bc:	f141 0100 	adc.w	r1, r1, #0
100001c0:	fa03 f20e 	lsl.w	r2, r3, lr
100001c4:	1880      	adds	r0, r0, r2
100001c6:	fa43 f305 	asr.w	r3, r3, r5
100001ca:	4159      	adcs	r1, r3
100001cc:	e00e      	b.n	100001ec <__adddf3+0xd0>
100001ce:	f1a5 0520 	sub.w	r5, r5, #32
100001d2:	f10e 0e20 	add.w	lr, lr, #32
100001d6:	2a01      	cmp	r2, #1
100001d8:	fa03 fc0e 	lsl.w	ip, r3, lr
100001dc:	bf28      	it	cs
100001de:	f04c 0c02 	orrcs.w	ip, ip, #2
100001e2:	fa43 f305 	asr.w	r3, r3, r5
100001e6:	18c0      	adds	r0, r0, r3
100001e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
100001ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
100001f0:	d507      	bpl.n	10000202 <__adddf3+0xe6>
100001f2:	f04f 0e00 	mov.w	lr, #0
100001f6:	f1dc 0c00 	rsbs	ip, ip, #0
100001fa:	eb7e 0000 	sbcs.w	r0, lr, r0
100001fe:	eb6e 0101 	sbc.w	r1, lr, r1
10000202:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
10000206:	d31b      	bcc.n	10000240 <__adddf3+0x124>
10000208:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1000020c:	d30c      	bcc.n	10000228 <__adddf3+0x10c>
1000020e:	0849      	lsrs	r1, r1, #1
10000210:	ea5f 0030 	movs.w	r0, r0, rrx
10000214:	ea4f 0c3c 	mov.w	ip, ip, rrx
10000218:	f104 0401 	add.w	r4, r4, #1
1000021c:	ea4f 5244 	mov.w	r2, r4, lsl #21
10000220:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
10000224:	f080 809a 	bcs.w	1000035c <__adddf3+0x240>
10000228:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1000022c:	bf08      	it	eq
1000022e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
10000232:	f150 0000 	adcs.w	r0, r0, #0
10000236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1000023a:	ea41 0105 	orr.w	r1, r1, r5
1000023e:	bd30      	pop	{r4, r5, pc}
10000240:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
10000244:	4140      	adcs	r0, r0
10000246:	eb41 0101 	adc.w	r1, r1, r1
1000024a:	3c01      	subs	r4, #1
1000024c:	bf28      	it	cs
1000024e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
10000252:	d2e9      	bcs.n	10000228 <__adddf3+0x10c>
10000254:	f091 0f00 	teq	r1, #0
10000258:	bf04      	itt	eq
1000025a:	4601      	moveq	r1, r0
1000025c:	2000      	moveq	r0, #0
1000025e:	fab1 f381 	clz	r3, r1
10000262:	bf08      	it	eq
10000264:	3320      	addeq	r3, #32
10000266:	f1a3 030b 	sub.w	r3, r3, #11
1000026a:	f1b3 0220 	subs.w	r2, r3, #32
1000026e:	da0c      	bge.n	1000028a <__adddf3+0x16e>
10000270:	320c      	adds	r2, #12
10000272:	dd08      	ble.n	10000286 <__adddf3+0x16a>
10000274:	f102 0c14 	add.w	ip, r2, #20
10000278:	f1c2 020c 	rsb	r2, r2, #12
1000027c:	fa01 f00c 	lsl.w	r0, r1, ip
10000280:	fa21 f102 	lsr.w	r1, r1, r2
10000284:	e00c      	b.n	100002a0 <__adddf3+0x184>
10000286:	f102 0214 	add.w	r2, r2, #20
1000028a:	bfd8      	it	le
1000028c:	f1c2 0c20 	rsble	ip, r2, #32
10000290:	fa01 f102 	lsl.w	r1, r1, r2
10000294:	fa20 fc0c 	lsr.w	ip, r0, ip
10000298:	bfdc      	itt	le
1000029a:	ea41 010c 	orrle.w	r1, r1, ip
1000029e:	4090      	lslle	r0, r2
100002a0:	1ae4      	subs	r4, r4, r3
100002a2:	bfa2      	ittt	ge
100002a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
100002a8:	4329      	orrge	r1, r5
100002aa:	bd30      	popge	{r4, r5, pc}
100002ac:	ea6f 0404 	mvn.w	r4, r4
100002b0:	3c1f      	subs	r4, #31
100002b2:	da1c      	bge.n	100002ee <__adddf3+0x1d2>
100002b4:	340c      	adds	r4, #12
100002b6:	dc0e      	bgt.n	100002d6 <__adddf3+0x1ba>
100002b8:	f104 0414 	add.w	r4, r4, #20
100002bc:	f1c4 0220 	rsb	r2, r4, #32
100002c0:	fa20 f004 	lsr.w	r0, r0, r4
100002c4:	fa01 f302 	lsl.w	r3, r1, r2
100002c8:	ea40 0003 	orr.w	r0, r0, r3
100002cc:	fa21 f304 	lsr.w	r3, r1, r4
100002d0:	ea45 0103 	orr.w	r1, r5, r3
100002d4:	bd30      	pop	{r4, r5, pc}
100002d6:	f1c4 040c 	rsb	r4, r4, #12
100002da:	f1c4 0220 	rsb	r2, r4, #32
100002de:	fa20 f002 	lsr.w	r0, r0, r2
100002e2:	fa01 f304 	lsl.w	r3, r1, r4
100002e6:	ea40 0003 	orr.w	r0, r0, r3
100002ea:	4629      	mov	r1, r5
100002ec:	bd30      	pop	{r4, r5, pc}
100002ee:	fa21 f004 	lsr.w	r0, r1, r4
100002f2:	4629      	mov	r1, r5
100002f4:	bd30      	pop	{r4, r5, pc}
100002f6:	f094 0f00 	teq	r4, #0
100002fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
100002fe:	bf06      	itte	eq
10000300:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
10000304:	3401      	addeq	r4, #1
10000306:	3d01      	subne	r5, #1
10000308:	e74e      	b.n	100001a8 <__adddf3+0x8c>
1000030a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1000030e:	bf18      	it	ne
10000310:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
10000314:	d029      	beq.n	1000036a <__adddf3+0x24e>
10000316:	ea94 0f05 	teq	r4, r5
1000031a:	bf08      	it	eq
1000031c:	ea90 0f02 	teqeq	r0, r2
10000320:	d005      	beq.n	1000032e <__adddf3+0x212>
10000322:	ea54 0c00 	orrs.w	ip, r4, r0
10000326:	bf04      	itt	eq
10000328:	4619      	moveq	r1, r3
1000032a:	4610      	moveq	r0, r2
1000032c:	bd30      	pop	{r4, r5, pc}
1000032e:	ea91 0f03 	teq	r1, r3
10000332:	bf1e      	ittt	ne
10000334:	2100      	movne	r1, #0
10000336:	2000      	movne	r0, #0
10000338:	bd30      	popne	{r4, r5, pc}
1000033a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1000033e:	d105      	bne.n	1000034c <__adddf3+0x230>
10000340:	0040      	lsls	r0, r0, #1
10000342:	4149      	adcs	r1, r1
10000344:	bf28      	it	cs
10000346:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1000034a:	bd30      	pop	{r4, r5, pc}
1000034c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
10000350:	bf3c      	itt	cc
10000352:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
10000356:	bd30      	popcc	{r4, r5, pc}
10000358:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1000035c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
10000360:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
10000364:	f04f 0000 	mov.w	r0, #0
10000368:	bd30      	pop	{r4, r5, pc}
1000036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1000036e:	bf1a      	itte	ne
10000370:	4619      	movne	r1, r3
10000372:	4610      	movne	r0, r2
10000374:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
10000378:	bf1c      	itt	ne
1000037a:	460b      	movne	r3, r1
1000037c:	4602      	movne	r2, r0
1000037e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
10000382:	bf06      	itte	eq
10000384:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
10000388:	ea91 0f03 	teqeq	r1, r3
1000038c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
10000390:	bd30      	pop	{r4, r5, pc}
10000392:	bf00      	nop

10000394 <__aeabi_ui2d>:
10000394:	f090 0f00 	teq	r0, #0
10000398:	bf04      	itt	eq
1000039a:	2100      	moveq	r1, #0
1000039c:	4770      	bxeq	lr
1000039e:	b530      	push	{r4, r5, lr}
100003a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
100003a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
100003a8:	f04f 0500 	mov.w	r5, #0
100003ac:	f04f 0100 	mov.w	r1, #0
100003b0:	e750      	b.n	10000254 <__adddf3+0x138>
100003b2:	bf00      	nop

100003b4 <__aeabi_i2d>:
100003b4:	f090 0f00 	teq	r0, #0
100003b8:	bf04      	itt	eq
100003ba:	2100      	moveq	r1, #0
100003bc:	4770      	bxeq	lr
100003be:	b530      	push	{r4, r5, lr}
100003c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
100003c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
100003c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
100003cc:	bf48      	it	mi
100003ce:	4240      	negmi	r0, r0
100003d0:	f04f 0100 	mov.w	r1, #0
100003d4:	e73e      	b.n	10000254 <__adddf3+0x138>
100003d6:	bf00      	nop

100003d8 <__aeabi_f2d>:
100003d8:	0042      	lsls	r2, r0, #1
100003da:	ea4f 01e2 	mov.w	r1, r2, asr #3
100003de:	ea4f 0131 	mov.w	r1, r1, rrx
100003e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
100003e6:	bf1f      	itttt	ne
100003e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
100003ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
100003f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
100003f4:	4770      	bxne	lr
100003f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
100003fa:	bf08      	it	eq
100003fc:	4770      	bxeq	lr
100003fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
10000402:	bf04      	itt	eq
10000404:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
10000408:	4770      	bxeq	lr
1000040a:	b530      	push	{r4, r5, lr}
1000040c:	f44f 7460 	mov.w	r4, #896	; 0x380
10000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
10000414:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
10000418:	e71c      	b.n	10000254 <__adddf3+0x138>
1000041a:	bf00      	nop

1000041c <__aeabi_ul2d>:
1000041c:	ea50 0201 	orrs.w	r2, r0, r1
10000420:	bf08      	it	eq
10000422:	4770      	bxeq	lr
10000424:	b530      	push	{r4, r5, lr}
10000426:	f04f 0500 	mov.w	r5, #0
1000042a:	e00a      	b.n	10000442 <__aeabi_l2d+0x16>

1000042c <__aeabi_l2d>:
1000042c:	ea50 0201 	orrs.w	r2, r0, r1
10000430:	bf08      	it	eq
10000432:	4770      	bxeq	lr
10000434:	b530      	push	{r4, r5, lr}
10000436:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1000043a:	d502      	bpl.n	10000442 <__aeabi_l2d+0x16>
1000043c:	4240      	negs	r0, r0
1000043e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10000442:	f44f 6480 	mov.w	r4, #1024	; 0x400
10000446:	f104 0432 	add.w	r4, r4, #50	; 0x32
1000044a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1000044e:	f43f aed8 	beq.w	10000202 <__adddf3+0xe6>
10000452:	f04f 0203 	mov.w	r2, #3
10000456:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1000045a:	bf18      	it	ne
1000045c:	3203      	addne	r2, #3
1000045e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
10000462:	bf18      	it	ne
10000464:	3203      	addne	r2, #3
10000466:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1000046a:	f1c2 0320 	rsb	r3, r2, #32
1000046e:	fa00 fc03 	lsl.w	ip, r0, r3
10000472:	fa20 f002 	lsr.w	r0, r0, r2
10000476:	fa01 fe03 	lsl.w	lr, r1, r3
1000047a:	ea40 000e 	orr.w	r0, r0, lr
1000047e:	fa21 f102 	lsr.w	r1, r1, r2
10000482:	4414      	add	r4, r2
10000484:	e6bd      	b.n	10000202 <__adddf3+0xe6>
10000486:	bf00      	nop

10000488 <__aeabi_dmul>:
10000488:	b570      	push	{r4, r5, r6, lr}
1000048a:	f04f 0cff 	mov.w	ip, #255	; 0xff
1000048e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
10000492:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
10000496:	bf1d      	ittte	ne
10000498:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1000049c:	ea94 0f0c 	teqne	r4, ip
100004a0:	ea95 0f0c 	teqne	r5, ip
100004a4:	f000 f8de 	bleq	10000664 <__aeabi_dmul+0x1dc>
100004a8:	442c      	add	r4, r5
100004aa:	ea81 0603 	eor.w	r6, r1, r3
100004ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
100004b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
100004b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
100004ba:	bf18      	it	ne
100004bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
100004c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
100004c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
100004c8:	d038      	beq.n	1000053c <__aeabi_dmul+0xb4>
100004ca:	fba0 ce02 	umull	ip, lr, r0, r2
100004ce:	f04f 0500 	mov.w	r5, #0
100004d2:	fbe1 e502 	umlal	lr, r5, r1, r2
100004d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
100004da:	fbe0 e503 	umlal	lr, r5, r0, r3
100004de:	f04f 0600 	mov.w	r6, #0
100004e2:	fbe1 5603 	umlal	r5, r6, r1, r3
100004e6:	f09c 0f00 	teq	ip, #0
100004ea:	bf18      	it	ne
100004ec:	f04e 0e01 	orrne.w	lr, lr, #1
100004f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
100004f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
100004f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
100004fc:	d204      	bcs.n	10000508 <__aeabi_dmul+0x80>
100004fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
10000502:	416d      	adcs	r5, r5
10000504:	eb46 0606 	adc.w	r6, r6, r6
10000508:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1000050c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
10000510:	ea4f 20c5 	mov.w	r0, r5, lsl #11
10000514:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
10000518:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1000051c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
10000520:	bf88      	it	hi
10000522:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
10000526:	d81e      	bhi.n	10000566 <__aeabi_dmul+0xde>
10000528:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1000052c:	bf08      	it	eq
1000052e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
10000532:	f150 0000 	adcs.w	r0, r0, #0
10000536:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1000053a:	bd70      	pop	{r4, r5, r6, pc}
1000053c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
10000540:	ea46 0101 	orr.w	r1, r6, r1
10000544:	ea40 0002 	orr.w	r0, r0, r2
10000548:	ea81 0103 	eor.w	r1, r1, r3
1000054c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
10000550:	bfc2      	ittt	gt
10000552:	ebd4 050c 	rsbsgt	r5, r4, ip
10000556:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1000055a:	bd70      	popgt	{r4, r5, r6, pc}
1000055c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
10000560:	f04f 0e00 	mov.w	lr, #0
10000564:	3c01      	subs	r4, #1
10000566:	f300 80ab 	bgt.w	100006c0 <__aeabi_dmul+0x238>
1000056a:	f114 0f36 	cmn.w	r4, #54	; 0x36
1000056e:	bfde      	ittt	le
10000570:	2000      	movle	r0, #0
10000572:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
10000576:	bd70      	pople	{r4, r5, r6, pc}
10000578:	f1c4 0400 	rsb	r4, r4, #0
1000057c:	3c20      	subs	r4, #32
1000057e:	da35      	bge.n	100005ec <__aeabi_dmul+0x164>
10000580:	340c      	adds	r4, #12
10000582:	dc1b      	bgt.n	100005bc <__aeabi_dmul+0x134>
10000584:	f104 0414 	add.w	r4, r4, #20
10000588:	f1c4 0520 	rsb	r5, r4, #32
1000058c:	fa00 f305 	lsl.w	r3, r0, r5
10000590:	fa20 f004 	lsr.w	r0, r0, r4
10000594:	fa01 f205 	lsl.w	r2, r1, r5
10000598:	ea40 0002 	orr.w	r0, r0, r2
1000059c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
100005a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
100005a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
100005a8:	fa21 f604 	lsr.w	r6, r1, r4
100005ac:	eb42 0106 	adc.w	r1, r2, r6
100005b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
100005b4:	bf08      	it	eq
100005b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
100005ba:	bd70      	pop	{r4, r5, r6, pc}
100005bc:	f1c4 040c 	rsb	r4, r4, #12
100005c0:	f1c4 0520 	rsb	r5, r4, #32
100005c4:	fa00 f304 	lsl.w	r3, r0, r4
100005c8:	fa20 f005 	lsr.w	r0, r0, r5
100005cc:	fa01 f204 	lsl.w	r2, r1, r4
100005d0:	ea40 0002 	orr.w	r0, r0, r2
100005d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
100005d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
100005dc:	f141 0100 	adc.w	r1, r1, #0
100005e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
100005e4:	bf08      	it	eq
100005e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
100005ea:	bd70      	pop	{r4, r5, r6, pc}
100005ec:	f1c4 0520 	rsb	r5, r4, #32
100005f0:	fa00 f205 	lsl.w	r2, r0, r5
100005f4:	ea4e 0e02 	orr.w	lr, lr, r2
100005f8:	fa20 f304 	lsr.w	r3, r0, r4
100005fc:	fa01 f205 	lsl.w	r2, r1, r5
10000600:	ea43 0302 	orr.w	r3, r3, r2
10000604:	fa21 f004 	lsr.w	r0, r1, r4
10000608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1000060c:	fa21 f204 	lsr.w	r2, r1, r4
10000610:	ea20 0002 	bic.w	r0, r0, r2
10000614:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
10000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1000061c:	bf08      	it	eq
1000061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
10000622:	bd70      	pop	{r4, r5, r6, pc}
10000624:	f094 0f00 	teq	r4, #0
10000628:	d10f      	bne.n	1000064a <__aeabi_dmul+0x1c2>
1000062a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1000062e:	0040      	lsls	r0, r0, #1
10000630:	eb41 0101 	adc.w	r1, r1, r1
10000634:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
10000638:	bf08      	it	eq
1000063a:	3c01      	subeq	r4, #1
1000063c:	d0f7      	beq.n	1000062e <__aeabi_dmul+0x1a6>
1000063e:	ea41 0106 	orr.w	r1, r1, r6
10000642:	f095 0f00 	teq	r5, #0
10000646:	bf18      	it	ne
10000648:	4770      	bxne	lr
1000064a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1000064e:	0052      	lsls	r2, r2, #1
10000650:	eb43 0303 	adc.w	r3, r3, r3
10000654:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
10000658:	bf08      	it	eq
1000065a:	3d01      	subeq	r5, #1
1000065c:	d0f7      	beq.n	1000064e <__aeabi_dmul+0x1c6>
1000065e:	ea43 0306 	orr.w	r3, r3, r6
10000662:	4770      	bx	lr
10000664:	ea94 0f0c 	teq	r4, ip
10000668:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1000066c:	bf18      	it	ne
1000066e:	ea95 0f0c 	teqne	r5, ip
10000672:	d00c      	beq.n	1000068e <__aeabi_dmul+0x206>
10000674:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
10000678:	bf18      	it	ne
1000067a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1000067e:	d1d1      	bne.n	10000624 <__aeabi_dmul+0x19c>
10000680:	ea81 0103 	eor.w	r1, r1, r3
10000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
10000688:	f04f 0000 	mov.w	r0, #0
1000068c:	bd70      	pop	{r4, r5, r6, pc}
1000068e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
10000692:	bf06      	itte	eq
10000694:	4610      	moveq	r0, r2
10000696:	4619      	moveq	r1, r3
10000698:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1000069c:	d019      	beq.n	100006d2 <__aeabi_dmul+0x24a>
1000069e:	ea94 0f0c 	teq	r4, ip
100006a2:	d102      	bne.n	100006aa <__aeabi_dmul+0x222>
100006a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
100006a8:	d113      	bne.n	100006d2 <__aeabi_dmul+0x24a>
100006aa:	ea95 0f0c 	teq	r5, ip
100006ae:	d105      	bne.n	100006bc <__aeabi_dmul+0x234>
100006b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
100006b4:	bf1c      	itt	ne
100006b6:	4610      	movne	r0, r2
100006b8:	4619      	movne	r1, r3
100006ba:	d10a      	bne.n	100006d2 <__aeabi_dmul+0x24a>
100006bc:	ea81 0103 	eor.w	r1, r1, r3
100006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
100006c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
100006c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
100006cc:	f04f 0000 	mov.w	r0, #0
100006d0:	bd70      	pop	{r4, r5, r6, pc}
100006d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
100006d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
100006da:	bd70      	pop	{r4, r5, r6, pc}

100006dc <__aeabi_ddiv>:
100006dc:	b570      	push	{r4, r5, r6, lr}
100006de:	f04f 0cff 	mov.w	ip, #255	; 0xff
100006e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
100006e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
100006ea:	bf1d      	ittte	ne
100006ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
100006f0:	ea94 0f0c 	teqne	r4, ip
100006f4:	ea95 0f0c 	teqne	r5, ip
100006f8:	f000 f8a7 	bleq	1000084a <__aeabi_ddiv+0x16e>
100006fc:	eba4 0405 	sub.w	r4, r4, r5
10000700:	ea81 0e03 	eor.w	lr, r1, r3
10000704:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
10000708:	ea4f 3101 	mov.w	r1, r1, lsl #12
1000070c:	f000 8088 	beq.w	10000820 <__aeabi_ddiv+0x144>
10000710:	ea4f 3303 	mov.w	r3, r3, lsl #12
10000714:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
10000718:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1000071c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
10000720:	ea4f 2202 	mov.w	r2, r2, lsl #8
10000724:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
10000728:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1000072c:	ea4f 2600 	mov.w	r6, r0, lsl #8
10000730:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
10000734:	429d      	cmp	r5, r3
10000736:	bf08      	it	eq
10000738:	4296      	cmpeq	r6, r2
1000073a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1000073e:	f504 7440 	add.w	r4, r4, #768	; 0x300
10000742:	d202      	bcs.n	1000074a <__aeabi_ddiv+0x6e>
10000744:	085b      	lsrs	r3, r3, #1
10000746:	ea4f 0232 	mov.w	r2, r2, rrx
1000074a:	1ab6      	subs	r6, r6, r2
1000074c:	eb65 0503 	sbc.w	r5, r5, r3
10000750:	085b      	lsrs	r3, r3, #1
10000752:	ea4f 0232 	mov.w	r2, r2, rrx
10000756:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1000075a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1000075e:	ebb6 0e02 	subs.w	lr, r6, r2
10000762:	eb75 0e03 	sbcs.w	lr, r5, r3
10000766:	bf22      	ittt	cs
10000768:	1ab6      	subcs	r6, r6, r2
1000076a:	4675      	movcs	r5, lr
1000076c:	ea40 000c 	orrcs.w	r0, r0, ip
10000770:	085b      	lsrs	r3, r3, #1
10000772:	ea4f 0232 	mov.w	r2, r2, rrx
10000776:	ebb6 0e02 	subs.w	lr, r6, r2
1000077a:	eb75 0e03 	sbcs.w	lr, r5, r3
1000077e:	bf22      	ittt	cs
10000780:	1ab6      	subcs	r6, r6, r2
10000782:	4675      	movcs	r5, lr
10000784:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
10000788:	085b      	lsrs	r3, r3, #1
1000078a:	ea4f 0232 	mov.w	r2, r2, rrx
1000078e:	ebb6 0e02 	subs.w	lr, r6, r2
10000792:	eb75 0e03 	sbcs.w	lr, r5, r3
10000796:	bf22      	ittt	cs
10000798:	1ab6      	subcs	r6, r6, r2
1000079a:	4675      	movcs	r5, lr
1000079c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
100007a0:	085b      	lsrs	r3, r3, #1
100007a2:	ea4f 0232 	mov.w	r2, r2, rrx
100007a6:	ebb6 0e02 	subs.w	lr, r6, r2
100007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
100007ae:	bf22      	ittt	cs
100007b0:	1ab6      	subcs	r6, r6, r2
100007b2:	4675      	movcs	r5, lr
100007b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
100007b8:	ea55 0e06 	orrs.w	lr, r5, r6
100007bc:	d018      	beq.n	100007f0 <__aeabi_ddiv+0x114>
100007be:	ea4f 1505 	mov.w	r5, r5, lsl #4
100007c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
100007c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
100007ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
100007ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
100007d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
100007d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
100007da:	d1c0      	bne.n	1000075e <__aeabi_ddiv+0x82>
100007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
100007e0:	d10b      	bne.n	100007fa <__aeabi_ddiv+0x11e>
100007e2:	ea41 0100 	orr.w	r1, r1, r0
100007e6:	f04f 0000 	mov.w	r0, #0
100007ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
100007ee:	e7b6      	b.n	1000075e <__aeabi_ddiv+0x82>
100007f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
100007f4:	bf04      	itt	eq
100007f6:	4301      	orreq	r1, r0
100007f8:	2000      	moveq	r0, #0
100007fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
100007fe:	bf88      	it	hi
10000800:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
10000804:	f63f aeaf 	bhi.w	10000566 <__aeabi_dmul+0xde>
10000808:	ebb5 0c03 	subs.w	ip, r5, r3
1000080c:	bf04      	itt	eq
1000080e:	ebb6 0c02 	subseq.w	ip, r6, r2
10000812:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
10000816:	f150 0000 	adcs.w	r0, r0, #0
1000081a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1000081e:	bd70      	pop	{r4, r5, r6, pc}
10000820:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
10000824:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
10000828:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1000082c:	bfc2      	ittt	gt
1000082e:	ebd4 050c 	rsbsgt	r5, r4, ip
10000832:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
10000836:	bd70      	popgt	{r4, r5, r6, pc}
10000838:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1000083c:	f04f 0e00 	mov.w	lr, #0
10000840:	3c01      	subs	r4, #1
10000842:	e690      	b.n	10000566 <__aeabi_dmul+0xde>
10000844:	ea45 0e06 	orr.w	lr, r5, r6
10000848:	e68d      	b.n	10000566 <__aeabi_dmul+0xde>
1000084a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1000084e:	ea94 0f0c 	teq	r4, ip
10000852:	bf08      	it	eq
10000854:	ea95 0f0c 	teqeq	r5, ip
10000858:	f43f af3b 	beq.w	100006d2 <__aeabi_dmul+0x24a>
1000085c:	ea94 0f0c 	teq	r4, ip
10000860:	d10a      	bne.n	10000878 <__aeabi_ddiv+0x19c>
10000862:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
10000866:	f47f af34 	bne.w	100006d2 <__aeabi_dmul+0x24a>
1000086a:	ea95 0f0c 	teq	r5, ip
1000086e:	f47f af25 	bne.w	100006bc <__aeabi_dmul+0x234>
10000872:	4610      	mov	r0, r2
10000874:	4619      	mov	r1, r3
10000876:	e72c      	b.n	100006d2 <__aeabi_dmul+0x24a>
10000878:	ea95 0f0c 	teq	r5, ip
1000087c:	d106      	bne.n	1000088c <__aeabi_ddiv+0x1b0>
1000087e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
10000882:	f43f aefd 	beq.w	10000680 <__aeabi_dmul+0x1f8>
10000886:	4610      	mov	r0, r2
10000888:	4619      	mov	r1, r3
1000088a:	e722      	b.n	100006d2 <__aeabi_dmul+0x24a>
1000088c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
10000890:	bf18      	it	ne
10000892:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
10000896:	f47f aec5 	bne.w	10000624 <__aeabi_dmul+0x19c>
1000089a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1000089e:	f47f af0d 	bne.w	100006bc <__aeabi_dmul+0x234>
100008a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
100008a6:	f47f aeeb 	bne.w	10000680 <__aeabi_dmul+0x1f8>
100008aa:	e712      	b.n	100006d2 <__aeabi_dmul+0x24a>

100008ac <__gedf2>:
100008ac:	f04f 3cff 	mov.w	ip, #4294967295
100008b0:	e006      	b.n	100008c0 <__cmpdf2+0x4>
100008b2:	bf00      	nop

100008b4 <__ledf2>:
100008b4:	f04f 0c01 	mov.w	ip, #1
100008b8:	e002      	b.n	100008c0 <__cmpdf2+0x4>
100008ba:	bf00      	nop

100008bc <__cmpdf2>:
100008bc:	f04f 0c01 	mov.w	ip, #1
100008c0:	f84d cd04 	str.w	ip, [sp, #-4]!
100008c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
100008c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
100008cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
100008d0:	bf18      	it	ne
100008d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
100008d6:	d01b      	beq.n	10000910 <__cmpdf2+0x54>
100008d8:	b001      	add	sp, #4
100008da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
100008de:	bf0c      	ite	eq
100008e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
100008e4:	ea91 0f03 	teqne	r1, r3
100008e8:	bf02      	ittt	eq
100008ea:	ea90 0f02 	teqeq	r0, r2
100008ee:	2000      	moveq	r0, #0
100008f0:	4770      	bxeq	lr
100008f2:	f110 0f00 	cmn.w	r0, #0
100008f6:	ea91 0f03 	teq	r1, r3
100008fa:	bf58      	it	pl
100008fc:	4299      	cmppl	r1, r3
100008fe:	bf08      	it	eq
10000900:	4290      	cmpeq	r0, r2
10000902:	bf2c      	ite	cs
10000904:	17d8      	asrcs	r0, r3, #31
10000906:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1000090a:	f040 0001 	orr.w	r0, r0, #1
1000090e:	4770      	bx	lr
10000910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
10000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
10000918:	d102      	bne.n	10000920 <__cmpdf2+0x64>
1000091a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1000091e:	d107      	bne.n	10000930 <__cmpdf2+0x74>
10000920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
10000924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
10000928:	d1d6      	bne.n	100008d8 <__cmpdf2+0x1c>
1000092a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1000092e:	d0d3      	beq.n	100008d8 <__cmpdf2+0x1c>
10000930:	f85d 0b04 	ldr.w	r0, [sp], #4
10000934:	4770      	bx	lr
10000936:	bf00      	nop

10000938 <__aeabi_cdrcmple>:
10000938:	4684      	mov	ip, r0
1000093a:	4610      	mov	r0, r2
1000093c:	4662      	mov	r2, ip
1000093e:	468c      	mov	ip, r1
10000940:	4619      	mov	r1, r3
10000942:	4663      	mov	r3, ip
10000944:	e000      	b.n	10000948 <__aeabi_cdcmpeq>
10000946:	bf00      	nop

10000948 <__aeabi_cdcmpeq>:
10000948:	b501      	push	{r0, lr}
1000094a:	f7ff ffb7 	bl	100008bc <__cmpdf2>
1000094e:	2800      	cmp	r0, #0
10000950:	bf48      	it	mi
10000952:	f110 0f00 	cmnmi.w	r0, #0
10000956:	bd01      	pop	{r0, pc}

10000958 <__aeabi_dcmpeq>:
10000958:	f84d ed08 	str.w	lr, [sp, #-8]!
1000095c:	f7ff fff4 	bl	10000948 <__aeabi_cdcmpeq>
10000960:	bf0c      	ite	eq
10000962:	2001      	moveq	r0, #1
10000964:	2000      	movne	r0, #0
10000966:	f85d fb08 	ldr.w	pc, [sp], #8
1000096a:	bf00      	nop

1000096c <__aeabi_dcmplt>:
1000096c:	f84d ed08 	str.w	lr, [sp, #-8]!
10000970:	f7ff ffea 	bl	10000948 <__aeabi_cdcmpeq>
10000974:	bf34      	ite	cc
10000976:	2001      	movcc	r0, #1
10000978:	2000      	movcs	r0, #0
1000097a:	f85d fb08 	ldr.w	pc, [sp], #8
1000097e:	bf00      	nop

10000980 <__aeabi_dcmple>:
10000980:	f84d ed08 	str.w	lr, [sp, #-8]!
10000984:	f7ff ffe0 	bl	10000948 <__aeabi_cdcmpeq>
10000988:	bf94      	ite	ls
1000098a:	2001      	movls	r0, #1
1000098c:	2000      	movhi	r0, #0
1000098e:	f85d fb08 	ldr.w	pc, [sp], #8
10000992:	bf00      	nop

10000994 <__aeabi_dcmpge>:
10000994:	f84d ed08 	str.w	lr, [sp, #-8]!
10000998:	f7ff ffce 	bl	10000938 <__aeabi_cdrcmple>
1000099c:	bf94      	ite	ls
1000099e:	2001      	movls	r0, #1
100009a0:	2000      	movhi	r0, #0
100009a2:	f85d fb08 	ldr.w	pc, [sp], #8
100009a6:	bf00      	nop

100009a8 <__aeabi_dcmpgt>:
100009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
100009ac:	f7ff ffc4 	bl	10000938 <__aeabi_cdrcmple>
100009b0:	bf34      	ite	cc
100009b2:	2001      	movcc	r0, #1
100009b4:	2000      	movcs	r0, #0
100009b6:	f85d fb08 	ldr.w	pc, [sp], #8
100009ba:	bf00      	nop

100009bc <__aeabi_dcmpun>:
100009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
100009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
100009c4:	d102      	bne.n	100009cc <__aeabi_dcmpun+0x10>
100009c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
100009ca:	d10a      	bne.n	100009e2 <__aeabi_dcmpun+0x26>
100009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
100009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
100009d4:	d102      	bne.n	100009dc <__aeabi_dcmpun+0x20>
100009d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
100009da:	d102      	bne.n	100009e2 <__aeabi_dcmpun+0x26>
100009dc:	f04f 0000 	mov.w	r0, #0
100009e0:	4770      	bx	lr
100009e2:	f04f 0001 	mov.w	r0, #1
100009e6:	4770      	bx	lr

100009e8 <__aeabi_d2iz>:
100009e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
100009ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
100009f0:	d215      	bcs.n	10000a1e <__aeabi_d2iz+0x36>
100009f2:	d511      	bpl.n	10000a18 <__aeabi_d2iz+0x30>
100009f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
100009f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
100009fc:	d912      	bls.n	10000a24 <__aeabi_d2iz+0x3c>
100009fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
10000a02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
10000a06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
10000a0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
10000a0e:	fa23 f002 	lsr.w	r0, r3, r2
10000a12:	bf18      	it	ne
10000a14:	4240      	negne	r0, r0
10000a16:	4770      	bx	lr
10000a18:	f04f 0000 	mov.w	r0, #0
10000a1c:	4770      	bx	lr
10000a1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
10000a22:	d105      	bne.n	10000a30 <__aeabi_d2iz+0x48>
10000a24:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
10000a28:	bf08      	it	eq
10000a2a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
10000a2e:	4770      	bx	lr
10000a30:	f04f 0000 	mov.w	r0, #0
10000a34:	4770      	bx	lr
10000a36:	bf00      	nop

10000a38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10000a38:	b480      	push	{r7}
10000a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10000a3c:	4b0f      	ldr	r3, [pc, #60]	; (10000a7c <SystemInit+0x44>)
10000a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10000a42:	4a0e      	ldr	r2, [pc, #56]	; (10000a7c <SystemInit+0x44>)
10000a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
10000a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10000a4c:	4b0c      	ldr	r3, [pc, #48]	; (10000a80 <SystemInit+0x48>)
10000a4e:	2200      	movs	r2, #0
10000a50:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
10000a52:	4b0b      	ldr	r3, [pc, #44]	; (10000a80 <SystemInit+0x48>)
10000a54:	2200      	movs	r2, #0
10000a56:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10000a58:	4b09      	ldr	r3, [pc, #36]	; (10000a80 <SystemInit+0x48>)
10000a5a:	2200      	movs	r2, #0
10000a5c:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10000a5e:	4b08      	ldr	r3, [pc, #32]	; (10000a80 <SystemInit+0x48>)
10000a60:	2200      	movs	r2, #0
10000a62:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
10000a64:	4b06      	ldr	r3, [pc, #24]	; (10000a80 <SystemInit+0x48>)
10000a66:	2200      	movs	r2, #0
10000a68:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
10000a6a:	4b05      	ldr	r3, [pc, #20]	; (10000a80 <SystemInit+0x48>)
10000a6c:	2200      	movs	r2, #0
10000a6e:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10000a70:	bf00      	nop
10000a72:	46bd      	mov	sp, r7
10000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
10000a78:	4770      	bx	lr
10000a7a:	bf00      	nop
10000a7c:	e000ed00 	.word	0xe000ed00
10000a80:	5000d0c0 	.word	0x5000d0c0

10000a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
10000a84:	b590      	push	{r4, r7, lr}
10000a86:	b095      	sub	sp, #84	; 0x54
10000a88:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	char buf[50]; // buffer for serial output string
	int buf_len = 0;
10000a8a:	2300      	movs	r3, #0
10000a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
10000a8e:	f000 feb7 	bl	10001800 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  if(IS_ENGINEERING_BOOT_MODE())
10000a92:	4b68      	ldr	r3, [pc, #416]	; (10000c34 <main+0x1b0>)
10000a94:	681b      	ldr	r3, [r3, #0]
10000a96:	f003 0307 	and.w	r3, r3, #7
10000a9a:	2b04      	cmp	r3, #4
10000a9c:	d101      	bne.n	10000aa2 <main+0x1e>
  {
    /* Configure the system clock */
    SystemClock_Config();
10000a9e:	f000 f8e1 	bl	10000c64 <SystemClock_Config>
  }

  if(IS_ENGINEERING_BOOT_MODE())
10000aa2:	4b64      	ldr	r3, [pc, #400]	; (10000c34 <main+0x1b0>)
10000aa4:	681b      	ldr	r3, [r3, #0]
10000aa6:	f003 0307 	and.w	r3, r3, #7
10000aaa:	2b04      	cmp	r3, #4
10000aac:	d102      	bne.n	10000ab4 <main+0x30>
  {
    /* Configure the peripherals common clocks */
    PeriphCommonClock_Config();
10000aae:	f000 fa4e 	bl	10000f4e <PeriphCommonClock_Config>
10000ab2:	e005      	b.n	10000ac0 <main+0x3c>
  }
  else
  {
    /* IPCC initialisation */
    MX_IPCC_Init();
10000ab4:	f000 fb18 	bl	100010e8 <MX_IPCC_Init>
    /* OpenAmp initialisation ---------------------------------*/
    MX_OPENAMP_Init(RPMSG_REMOTE, NULL);
10000ab8:	2100      	movs	r1, #0
10000aba:	2001      	movs	r0, #1
10000abc:	f00b ffa6 	bl	1000ca0c <MX_OPENAMP_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
10000ac0:	f000 fb98 	bl	100011f4 <MX_GPIO_Init>
  MX_CRC2_Init();
10000ac4:	f000 faee 	bl	100010a4 <MX_CRC2_Init>
  MX_UART4_Init();
10000ac8:	f000 fb48 	bl	1000115c <MX_UART4_Init>
  MX_ADC2_Init();
10000acc:	f000 fa6c 	bl	10000fa8 <MX_ADC2_Init>
  MX_TIM16_Init();
10000ad0:	f000 fb1e 	bl	10001110 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  AI_Init();
10000ad4:	f000 fbc6 	bl	10001264 <AI_Init>
  HAL_TIM_Base_Start(&htim16);
10000ad8:	4857      	ldr	r0, [pc, #348]	; (10000c38 <main+0x1b4>)
10000ada:	f008 fa25 	bl	10008f28 <HAL_TIM_Base_Start>
  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
10000ade:	463b      	mov	r3, r7
10000ae0:	4956      	ldr	r1, [pc, #344]	; (10000c3c <main+0x1b8>)
10000ae2:	4618      	mov	r0, r3
10000ae4:	f00f fb2c 	bl	10010140 <siprintf>
10000ae8:	63f8      	str	r0, [r7, #60]	; 0x3c
  HAL_UART_Transmit(&huart4, (uint8_t *)buf, buf_len, 100);
10000aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10000aec:	b29a      	uxth	r2, r3
10000aee:	4639      	mov	r1, r7
10000af0:	2364      	movs	r3, #100	; 0x64
10000af2:	4853      	ldr	r0, [pc, #332]	; (10000c40 <main+0x1bc>)
10000af4:	f008 fb2a 	bl	1000914c <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (int i = 0; i < AI_EMOTION_MODEL_IN_1_SIZE+1; ++i) {
10000af8:	2300      	movs	r3, #0
10000afa:	647b      	str	r3, [r7, #68]	; 0x44
10000afc:	e090      	b.n	10000c20 <main+0x19c>
	      HAL_ADC_Start(&hadc2);
10000afe:	4851      	ldr	r0, [pc, #324]	; (10000c44 <main+0x1c0>)
10000b00:	f001 fad2 	bl	100020a8 <HAL_ADC_Start>
	      HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
10000b04:	f04f 31ff 	mov.w	r1, #4294967295
10000b08:	484e      	ldr	r0, [pc, #312]	; (10000c44 <main+0x1c0>)
10000b0a:	f001 fb87 	bl	1000221c <HAL_ADC_PollForConversion>
	      aiInData[i] = HAL_ADC_GetValue(&hadc2);
10000b0e:	484d      	ldr	r0, [pc, #308]	; (10000c44 <main+0x1c0>)
10000b10:	f001 fc5c 	bl	100023cc <HAL_ADC_GetValue>
10000b14:	ee07 0a90 	vmov	s15, r0
10000b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
10000b1c:	4a4a      	ldr	r2, [pc, #296]	; (10000c48 <main+0x1c4>)
10000b1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10000b20:	009b      	lsls	r3, r3, #2
10000b22:	4413      	add	r3, r2
10000b24:	edc3 7a00 	vstr	s15, [r3]
	      HAL_Delay(1);
10000b28:	2001      	movs	r0, #1
10000b2a:	f000 fed9 	bl	100018e0 <HAL_Delay>

	      if (i == AI_EMOTION_MODEL_IN_1_SIZE) {
10000b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10000b30:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
10000b34:	d171      	bne.n	10000c1a <main+0x196>
	    	  timestamp = htim16.Instance->CNT;
10000b36:	4b40      	ldr	r3, [pc, #256]	; (10000c38 <main+0x1b4>)
10000b38:	681b      	ldr	r3, [r3, #0]
10000b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000b3c:	63bb      	str	r3, [r7, #56]	; 0x38
	      		  buf_len = sprintf(buf, "Running inference\r\n");
10000b3e:	463b      	mov	r3, r7
10000b40:	4942      	ldr	r1, [pc, #264]	; (10000c4c <main+0x1c8>)
10000b42:	4618      	mov	r0, r3
10000b44:	f00f fafc 	bl	10010140 <siprintf>
10000b48:	63f8      	str	r0, [r7, #60]	; 0x3c
	      		  HAL_UART_Transmit(&huart4, (uint8_t *)buf, buf_len, 100);
10000b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10000b4c:	b29a      	uxth	r2, r3
10000b4e:	4639      	mov	r1, r7
10000b50:	2364      	movs	r3, #100	; 0x64
10000b52:	483b      	ldr	r0, [pc, #236]	; (10000c40 <main+0x1bc>)
10000b54:	f008 fafa 	bl	1000914c <HAL_UART_Transmit>

	      		  AI_Run(aiInData, aiOutData);
10000b58:	493d      	ldr	r1, [pc, #244]	; (10000c50 <main+0x1cc>)
10000b5a:	483b      	ldr	r0, [pc, #236]	; (10000c48 <main+0x1c4>)
10000b5c:	f000 fbcc 	bl	100012f8 <AI_Run>
	      		  /* Output results */
	      		  for (uint32_t i = 0; i < AI_EMOTION_MODEL_OUT_1_SIZE; i++) {
10000b60:	2300      	movs	r3, #0
10000b62:	643b      	str	r3, [r7, #64]	; 0x40
10000b64:	e018      	b.n	10000b98 <main+0x114>
	      			  buf_len = sprintf(buf, "%8.6f ", aiOutData[i]);
10000b66:	4a3a      	ldr	r2, [pc, #232]	; (10000c50 <main+0x1cc>)
10000b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10000b6a:	009b      	lsls	r3, r3, #2
10000b6c:	4413      	add	r3, r2
10000b6e:	681b      	ldr	r3, [r3, #0]
10000b70:	4618      	mov	r0, r3
10000b72:	f7ff fc31 	bl	100003d8 <__aeabi_f2d>
10000b76:	4602      	mov	r2, r0
10000b78:	460b      	mov	r3, r1
10000b7a:	4638      	mov	r0, r7
10000b7c:	4935      	ldr	r1, [pc, #212]	; (10000c54 <main+0x1d0>)
10000b7e:	f00f fadf 	bl	10010140 <siprintf>
10000b82:	63f8      	str	r0, [r7, #60]	; 0x3c
	      			  HAL_UART_Transmit(&huart4, (uint8_t *)buf, buf_len, 100);
10000b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10000b86:	b29a      	uxth	r2, r3
10000b88:	4639      	mov	r1, r7
10000b8a:	2364      	movs	r3, #100	; 0x64
10000b8c:	482c      	ldr	r0, [pc, #176]	; (10000c40 <main+0x1bc>)
10000b8e:	f008 fadd 	bl	1000914c <HAL_UART_Transmit>
	      		  for (uint32_t i = 0; i < AI_EMOTION_MODEL_OUT_1_SIZE; i++) {
10000b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10000b94:	3301      	adds	r3, #1
10000b96:	643b      	str	r3, [r7, #64]	; 0x40
10000b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10000b9a:	2b01      	cmp	r3, #1
10000b9c:	d9e3      	bls.n	10000b66 <main+0xe2>
	      		  }
//	      		  uint32_t class = argmax(aiOutData, AI_EMOTION_MODEL_OUT_1_SIZE);
//	      		  buf_len = sprintf(buf, "Prediction : %d - %s\r\n Duration : %lu\r\n", (int) class, emotions[class], htim16.Instance->CNT - timestamp);
//	      		  HAL_UART_Transmit(&huart4, (uint8_t *)buf, buf_len, 100);
	      		if (aiOutData[0] != 0.0 || aiOutData[1] != 1.0) {
10000b9e:	4b2c      	ldr	r3, [pc, #176]	; (10000c50 <main+0x1cc>)
10000ba0:	edd3 7a00 	vldr	s15, [r3]
10000ba4:	eef5 7a40 	vcmp.f32	s15, #0.0
10000ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
10000bac:	d109      	bne.n	10000bc2 <main+0x13e>
10000bae:	4b28      	ldr	r3, [pc, #160]	; (10000c50 <main+0x1cc>)
10000bb0:	edd3 7a01 	vldr	s15, [r3, #4]
10000bb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
10000bb8:	eef4 7a47 	vcmp.f32	s15, s14
10000bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
10000bc0:	d01e      	beq.n	10000c00 <main+0x17c>
	      		                uint32_t class = argmax(aiOutData, AI_EMOTION_MODEL_OUT_1_SIZE);
10000bc2:	2102      	movs	r1, #2
10000bc4:	4822      	ldr	r0, [pc, #136]	; (10000c50 <main+0x1cc>)
10000bc6:	f000 fbdf 	bl	10001388 <argmax>
10000bca:	6378      	str	r0, [r7, #52]	; 0x34
	      		                buf_len = sprintf(buf, "Prediction : %d - %s\r\n Duration : %lu\r\n", (int)class, emotions[class], htim16.Instance->CNT - timestamp);
10000bcc:	6b79      	ldr	r1, [r7, #52]	; 0x34
10000bce:	4a22      	ldr	r2, [pc, #136]	; (10000c58 <main+0x1d4>)
10000bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10000bd2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
10000bd6:	4b18      	ldr	r3, [pc, #96]	; (10000c38 <main+0x1b4>)
10000bd8:	681b      	ldr	r3, [r3, #0]
10000bda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10000bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10000bde:	1ad3      	subs	r3, r2, r3
10000be0:	4638      	mov	r0, r7
10000be2:	9300      	str	r3, [sp, #0]
10000be4:	4623      	mov	r3, r4
10000be6:	460a      	mov	r2, r1
10000be8:	491c      	ldr	r1, [pc, #112]	; (10000c5c <main+0x1d8>)
10000bea:	f00f faa9 	bl	10010140 <siprintf>
10000bee:	63f8      	str	r0, [r7, #60]	; 0x3c
	      		                HAL_UART_Transmit(&huart4, (uint8_t *)buf, buf_len, 100);
10000bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10000bf2:	b29a      	uxth	r2, r3
10000bf4:	4639      	mov	r1, r7
10000bf6:	2364      	movs	r3, #100	; 0x64
10000bf8:	4811      	ldr	r0, [pc, #68]	; (10000c40 <main+0x1bc>)
10000bfa:	f008 faa7 	bl	1000914c <HAL_UART_Transmit>
	      		if (aiOutData[0] != 0.0 || aiOutData[1] != 1.0) {
10000bfe:	e00c      	b.n	10000c1a <main+0x196>
	      		            }
	      		            else {
	      		                buf_len = sprintf(buf, "Sensor Detached\r\n");
10000c00:	463b      	mov	r3, r7
10000c02:	4917      	ldr	r1, [pc, #92]	; (10000c60 <main+0x1dc>)
10000c04:	4618      	mov	r0, r3
10000c06:	f00f fa9b 	bl	10010140 <siprintf>
10000c0a:	63f8      	str	r0, [r7, #60]	; 0x3c
	      		                HAL_UART_Transmit(&huart4, (uint8_t *)buf, buf_len, 100);
10000c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10000c0e:	b29a      	uxth	r2, r3
10000c10:	4639      	mov	r1, r7
10000c12:	2364      	movs	r3, #100	; 0x64
10000c14:	480a      	ldr	r0, [pc, #40]	; (10000c40 <main+0x1bc>)
10000c16:	f008 fa99 	bl	1000914c <HAL_UART_Transmit>
	  for (int i = 0; i < AI_EMOTION_MODEL_IN_1_SIZE+1; ++i) {
10000c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10000c1c:	3301      	adds	r3, #1
10000c1e:	647b      	str	r3, [r7, #68]	; 0x44
10000c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10000c22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
10000c26:	f77f af6a 	ble.w	10000afe <main+0x7a>
	      		            }
	      }

	  }
	  // Wait before doing it again
	  HAL_Delay(500);
10000c2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
10000c2e:	f000 fe57 	bl	100018e0 <HAL_Delay>
	  for (int i = 0; i < AI_EMOTION_MODEL_IN_1_SIZE+1; ++i) {
10000c32:	e761      	b.n	10000af8 <main+0x74>
10000c34:	50020000 	.word	0x50020000
10000c38:	10020eac 	.word	0x10020eac
10000c3c:	10012594 	.word	0x10012594
10000c40:	10020eec 	.word	0x10020eec
10000c44:	10020de8 	.word	0x10020de8
10000c48:	10020f84 	.word	0x10020f84
10000c4c:	100125b0 	.word	0x100125b0
10000c50:	10021754 	.word	0x10021754
10000c54:	100125c4 	.word	0x100125c4
10000c58:	10020004 	.word	0x10020004
10000c5c:	100125cc 	.word	0x100125cc
10000c60:	100125f4 	.word	0x100125f4

10000c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
10000c64:	b580      	push	{r7, lr}
10000c66:	b0d2      	sub	sp, #328	; 0x148
10000c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10000c6a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000c6e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000c72:	4618      	mov	r0, r3
10000c74:	f44f 738a 	mov.w	r3, #276	; 0x114
10000c78:	461a      	mov	r2, r3
10000c7a:	2100      	movs	r1, #0
10000c7c:	f00f fac3 	bl	10010206 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10000c80:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000c84:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000c88:	4618      	mov	r0, r3
10000c8a:	2330      	movs	r3, #48	; 0x30
10000c8c:	461a      	mov	r2, r3
10000c8e:	2100      	movs	r1, #0
10000c90:	f00f fab9 	bl	10010206 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
10000c94:	f002 fe8c 	bl	100039b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
10000c98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10000ca0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
10000ca4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000ca8:	f043 0320 	orr.w	r3, r3, #32
10000cac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI
10000cb0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000cb4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000cb8:	2217      	movs	r2, #23
10000cba:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIG;
10000cbc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000cc0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000cc4:	f44f 62b0 	mov.w	r2, #1408	; 0x580
10000cc8:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
10000cca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000cce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000cd2:	2201      	movs	r2, #1
10000cd4:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
10000cd6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000cda:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000cde:	2201      	movs	r2, #1
10000ce0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
10000ce2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000ce6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000cea:	2200      	movs	r2, #0
10000cec:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
10000cee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000cf2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000cf6:	2210      	movs	r2, #16
10000cf8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
10000cfa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000cfe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d02:	2200      	movs	r2, #0
10000d04:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
10000d06:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d0a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d0e:	2202      	movs	r2, #2
10000d10:	661a      	str	r2, [r3, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLL12SOURCE_HSE;
10000d12:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d16:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d1a:	2201      	movs	r2, #1
10000d1c:	665a      	str	r2, [r3, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLLM = 3;
10000d1e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d22:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d26:	2203      	movs	r2, #3
10000d28:	669a      	str	r2, [r3, #104]	; 0x68
  RCC_OscInitStruct.PLL2.PLLN = 66;
10000d2a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d2e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d32:	2242      	movs	r2, #66	; 0x42
10000d34:	66da      	str	r2, [r3, #108]	; 0x6c
  RCC_OscInitStruct.PLL2.PLLP = 2;
10000d36:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d3a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d3e:	2202      	movs	r2, #2
10000d40:	671a      	str	r2, [r3, #112]	; 0x70
  RCC_OscInitStruct.PLL2.PLLQ = 1;
10000d42:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d46:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d4a:	2201      	movs	r2, #1
10000d4c:	675a      	str	r2, [r3, #116]	; 0x74
  RCC_OscInitStruct.PLL2.PLLR = 1;
10000d4e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d52:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d56:	2201      	movs	r2, #1
10000d58:	679a      	str	r2, [r3, #120]	; 0x78
  RCC_OscInitStruct.PLL2.PLLFRACV = 5120;
10000d5a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d5e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d62:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
10000d66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  RCC_OscInitStruct.PLL2.PLLMODE = RCC_PLL_FRACTIONAL;
10000d6a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d6e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d72:	2201      	movs	r2, #1
10000d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
10000d78:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d7c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d80:	2202      	movs	r2, #2
10000d82:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLL3SOURCE_HSI;
10000d86:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d8a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d8e:	2200      	movs	r2, #0
10000d90:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  RCC_OscInitStruct.PLL3.PLLM = 4;
10000d94:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d98:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d9c:	2204      	movs	r2, #4
10000d9e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  RCC_OscInitStruct.PLL3.PLLN = 25;
10000da2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000da6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000daa:	2219      	movs	r2, #25
10000dac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  RCC_OscInitStruct.PLL3.PLLP = 2;
10000db0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000db4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000db8:	2202      	movs	r2, #2
10000dba:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  RCC_OscInitStruct.PLL3.PLLQ = 4;
10000dbe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000dc2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000dc6:	2204      	movs	r2, #4
10000dc8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  RCC_OscInitStruct.PLL3.PLLR = 37;
10000dcc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000dd0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000dd4:	2225      	movs	r2, #37	; 0x25
10000dd6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  RCC_OscInitStruct.PLL3.PLLRGE = RCC_PLL3IFRANGE_1;
10000dda:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000dde:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000de2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
10000de6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  RCC_OscInitStruct.PLL3.PLLFRACV = 0;
10000dea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000dee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000df2:	2200      	movs	r2, #0
10000df4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  RCC_OscInitStruct.PLL3.PLLMODE = RCC_PLL_INTEGER;
10000df8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000dfc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e00:	2200      	movs	r2, #0
10000e02:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
10000e06:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e0a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e0e:	2202      	movs	r2, #2
10000e10:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLL4SOURCE_HSE;
10000e14:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e18:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e1c:	2201      	movs	r2, #1
10000e1e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  RCC_OscInitStruct.PLL4.PLLM = 4;
10000e22:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e26:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e2a:	2204      	movs	r2, #4
10000e2c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  RCC_OscInitStruct.PLL4.PLLN = 99;
10000e30:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e34:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e38:	2263      	movs	r2, #99	; 0x63
10000e3a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  RCC_OscInitStruct.PLL4.PLLP = 6;
10000e3e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e42:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e46:	2206      	movs	r2, #6
10000e48:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  RCC_OscInitStruct.PLL4.PLLQ = 8;
10000e4c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e50:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e54:	2208      	movs	r2, #8
10000e56:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  RCC_OscInitStruct.PLL4.PLLR = 8;
10000e5a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e5e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e62:	2208      	movs	r2, #8
10000e64:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  RCC_OscInitStruct.PLL4.PLLRGE = RCC_PLL4IFRANGE_0;
10000e68:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e6c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e70:	2200      	movs	r2, #0
10000e72:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  RCC_OscInitStruct.PLL4.PLLFRACV = 0;
10000e76:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e7a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e7e:	2200      	movs	r2, #0
10000e80:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  RCC_OscInitStruct.PLL4.PLLMODE = RCC_PLL_INTEGER;
10000e84:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e88:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e8c:	2200      	movs	r2, #0
10000e8e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
10000e92:	f107 0334 	add.w	r3, r7, #52	; 0x34
10000e96:	4618      	mov	r0, r3
10000e98:	f002 fd9a 	bl	100039d0 <HAL_RCC_OscConfig>
10000e9c:	4603      	mov	r3, r0
10000e9e:	2b00      	cmp	r3, #0
10000ea0:	d001      	beq.n	10000ea6 <SystemClock_Config+0x242>
  {
    Error_Handler();
10000ea2:	f000 faa1 	bl	100013e8 <Error_Handler>
  }

  /** RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
10000ea6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000eaa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000eae:	22fe      	movs	r2, #254	; 0xfe
10000eb0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                              |RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_PLL2;
10000eb2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000eb6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000eba:	2202      	movs	r2, #2
10000ebc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
10000ebe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000ec2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000ec6:	2200      	movs	r2, #0
10000ec8:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_PLL3;
10000eca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000ece:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000ed2:	2203      	movs	r2, #3
10000ed4:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
10000ed6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000eda:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000ede:	2200      	movs	r2, #0
10000ee0:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV2;
10000ee2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000ee6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000eea:	2201      	movs	r2, #1
10000eec:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV4;
10000eee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000ef2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000ef6:	2202      	movs	r2, #2
10000ef8:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV2;
10000efa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000efe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000f02:	2201      	movs	r2, #1
10000f04:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV2;
10000f06:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000f0a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000f0e:	2201      	movs	r2, #1
10000f10:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV2;
10000f12:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000f16:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000f1a:	2201      	movs	r2, #1
10000f1c:	62da      	str	r2, [r3, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
10000f1e:	1d3b      	adds	r3, r7, #4
10000f20:	4618      	mov	r0, r3
10000f22:	f003 faf3 	bl	1000450c <HAL_RCC_ClockConfig>
10000f26:	4603      	mov	r3, r0
10000f28:	2b00      	cmp	r3, #0
10000f2a:	d001      	beq.n	10000f30 <SystemClock_Config+0x2cc>
  {
    Error_Handler();
10000f2c:	f000 fa5c 	bl	100013e8 <Error_Handler>
  }

  /** Set the HSE division factor for RTC clock
  */
  __HAL_RCC_RTC_HSEDIV(24);
10000f30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10000f36:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10000f3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000f3e:	f043 0317 	orr.w	r3, r3, #23
10000f42:	6453      	str	r3, [r2, #68]	; 0x44
}
10000f44:	bf00      	nop
10000f46:	f507 77a4 	add.w	r7, r7, #328	; 0x148
10000f4a:	46bd      	mov	sp, r7
10000f4c:	bd80      	pop	{r7, pc}

10000f4e <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
10000f4e:	b580      	push	{r7, lr}
10000f50:	b0d6      	sub	sp, #344	; 0x158
10000f52:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
10000f54:	f507 73ac 	add.w	r3, r7, #344	; 0x158
10000f58:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
10000f5c:	4618      	mov	r0, r3
10000f5e:	f44f 73ac 	mov.w	r3, #344	; 0x158
10000f62:	461a      	mov	r2, r3
10000f64:	2100      	movs	r1, #0
10000f66:	f00f f94e 	bl	10010206 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
10000f6a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
10000f6e:	f5a3 71ac 	sub.w	r1, r3, #344	; 0x158
10000f72:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
10000f76:	f04f 0300 	mov.w	r3, #0
10000f7a:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInit.CkperClockSelection = RCC_CKPERCLKSOURCE_HSE;
10000f7e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
10000f82:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
10000f86:	2202      	movs	r2, #2
10000f88:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
10000f8c:	463b      	mov	r3, r7
10000f8e:	4618      	mov	r0, r3
10000f90:	f004 fe3a 	bl	10005c08 <HAL_RCCEx_PeriphCLKConfig>
10000f94:	4603      	mov	r3, r0
10000f96:	2b00      	cmp	r3, #0
10000f98:	d001      	beq.n	10000f9e <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
10000f9a:	f000 fa25 	bl	100013e8 <Error_Handler>
  }
}
10000f9e:	bf00      	nop
10000fa0:	f507 77ac 	add.w	r7, r7, #344	; 0x158
10000fa4:	46bd      	mov	sp, r7
10000fa6:	bd80      	pop	{r7, pc}

10000fa8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
10000fa8:	b580      	push	{r7, lr}
10000faa:	b088      	sub	sp, #32
10000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
10000fae:	1d3b      	adds	r3, r7, #4
10000fb0:	2200      	movs	r2, #0
10000fb2:	601a      	str	r2, [r3, #0]
10000fb4:	605a      	str	r2, [r3, #4]
10000fb6:	609a      	str	r2, [r3, #8]
10000fb8:	60da      	str	r2, [r3, #12]
10000fba:	611a      	str	r2, [r3, #16]
10000fbc:	615a      	str	r2, [r3, #20]
10000fbe:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
10000fc0:	4b35      	ldr	r3, [pc, #212]	; (10001098 <MX_ADC2_Init+0xf0>)
10000fc2:	4a36      	ldr	r2, [pc, #216]	; (1000109c <MX_ADC2_Init+0xf4>)
10000fc4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
10000fc6:	4b34      	ldr	r3, [pc, #208]	; (10001098 <MX_ADC2_Init+0xf0>)
10000fc8:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
10000fcc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
10000fce:	4b32      	ldr	r3, [pc, #200]	; (10001098 <MX_ADC2_Init+0xf0>)
10000fd0:	2200      	movs	r2, #0
10000fd2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
10000fd4:	4b30      	ldr	r3, [pc, #192]	; (10001098 <MX_ADC2_Init+0xf0>)
10000fd6:	2200      	movs	r2, #0
10000fd8:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
10000fda:	4b2f      	ldr	r3, [pc, #188]	; (10001098 <MX_ADC2_Init+0xf0>)
10000fdc:	2204      	movs	r2, #4
10000fde:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
10000fe0:	4b2d      	ldr	r3, [pc, #180]	; (10001098 <MX_ADC2_Init+0xf0>)
10000fe2:	2200      	movs	r2, #0
10000fe4:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
10000fe6:	4b2c      	ldr	r3, [pc, #176]	; (10001098 <MX_ADC2_Init+0xf0>)
10000fe8:	2200      	movs	r2, #0
10000fea:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
10000fec:	4b2a      	ldr	r3, [pc, #168]	; (10001098 <MX_ADC2_Init+0xf0>)
10000fee:	2201      	movs	r2, #1
10000ff0:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
10000ff2:	4b29      	ldr	r3, [pc, #164]	; (10001098 <MX_ADC2_Init+0xf0>)
10000ff4:	2200      	movs	r2, #0
10000ff6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
10000ff8:	4b27      	ldr	r3, [pc, #156]	; (10001098 <MX_ADC2_Init+0xf0>)
10000ffa:	2200      	movs	r2, #0
10000ffc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
10000ffe:	4b26      	ldr	r3, [pc, #152]	; (10001098 <MX_ADC2_Init+0xf0>)
10001000:	2200      	movs	r2, #0
10001002:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
10001004:	4b24      	ldr	r3, [pc, #144]	; (10001098 <MX_ADC2_Init+0xf0>)
10001006:	2200      	movs	r2, #0
10001008:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
1000100a:	4b23      	ldr	r3, [pc, #140]	; (10001098 <MX_ADC2_Init+0xf0>)
1000100c:	2200      	movs	r2, #0
1000100e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
10001010:	4b21      	ldr	r3, [pc, #132]	; (10001098 <MX_ADC2_Init+0xf0>)
10001012:	2200      	movs	r2, #0
10001014:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
10001016:	4b20      	ldr	r3, [pc, #128]	; (10001098 <MX_ADC2_Init+0xf0>)
10001018:	2200      	movs	r2, #0
1000101a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
1000101e:	481e      	ldr	r0, [pc, #120]	; (10001098 <MX_ADC2_Init+0xf0>)
10001020:	f000 fee8 	bl	10001df4 <HAL_ADC_Init>
10001024:	4603      	mov	r3, r0
10001026:	2b00      	cmp	r3, #0
10001028:	d001      	beq.n	1000102e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
1000102a:	f000 f9dd 	bl	100013e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
1000102e:	4b1c      	ldr	r3, [pc, #112]	; (100010a0 <MX_ADC2_Init+0xf8>)
10001030:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
10001032:	2306      	movs	r3, #6
10001034:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
10001036:	2300      	movs	r3, #0
10001038:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
1000103a:	f240 73ff 	movw	r3, #2047	; 0x7ff
1000103e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
10001040:	2304      	movs	r3, #4
10001042:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
10001044:	2300      	movs	r3, #0
10001046:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
10001048:	1d3b      	adds	r3, r7, #4
1000104a:	4619      	mov	r1, r3
1000104c:	4812      	ldr	r0, [pc, #72]	; (10001098 <MX_ADC2_Init+0xf0>)
1000104e:	f001 f9cb 	bl	100023e8 <HAL_ADC_ConfigChannel>
10001052:	4603      	mov	r3, r0
10001054:	2b00      	cmp	r3, #0
10001056:	d001      	beq.n	1000105c <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
10001058:	f000 f9c6 	bl	100013e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  __HAL_RCC_VREF_CLK_ENABLE(); // Enable the VREF clock
1000105c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001060:	f44f 5200 	mov.w	r2, #8192	; 0x2000
10001064:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
  	  // Disable the high impedance mode which is the default one read page 1694 of refman
      HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
10001068:	2000      	movs	r0, #0
1000106a:	f000 fc71 	bl	10001950 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
      // To set the volage to 2.5v
      HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1);
1000106e:	2000      	movs	r0, #0
10001070:	f000 fc5a 	bl	10001928 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
      HAL_SYSCFG_EnableVREFBUF(); // To enable VREFBUF
10001074:	f000 fc80 	bl	10001978 <HAL_SYSCFG_EnableVREFBUF>

      if(HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
10001078:	f240 72ff 	movw	r2, #2047	; 0x7ff
1000107c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
10001080:	4805      	ldr	r0, [pc, #20]	; (10001098 <MX_ADC2_Init+0xf0>)
10001082:	f001 fe75 	bl	10002d70 <HAL_ADCEx_Calibration_Start>
10001086:	4603      	mov	r3, r0
10001088:	2b00      	cmp	r3, #0
1000108a:	d001      	beq.n	10001090 <MX_ADC2_Init+0xe8>
      {
        /* Calibration Error */
        Error_Handler();
1000108c:	f000 f9ac 	bl	100013e8 <Error_Handler>
      }
  /* USER CODE END ADC2_Init 2 */

}
10001090:	bf00      	nop
10001092:	3720      	adds	r7, #32
10001094:	46bd      	mov	sp, r7
10001096:	bd80      	pop	{r7, pc}
10001098:	10020de8 	.word	0x10020de8
1000109c:	48003100 	.word	0x48003100
100010a0:	19200040 	.word	0x19200040

100010a4 <MX_CRC2_Init>:
  * @brief CRC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC2_Init(void)
{
100010a4:	b580      	push	{r7, lr}
100010a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC2_Init 0 */

  /* USER CODE BEGIN CRC2_Init 1 */

  /* USER CODE END CRC2_Init 1 */
  hcrc2.Instance = CRC2;
100010a8:	4b0d      	ldr	r3, [pc, #52]	; (100010e0 <MX_CRC2_Init+0x3c>)
100010aa:	4a0e      	ldr	r2, [pc, #56]	; (100010e4 <MX_CRC2_Init+0x40>)
100010ac:	601a      	str	r2, [r3, #0]
  hcrc2.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
100010ae:	4b0c      	ldr	r3, [pc, #48]	; (100010e0 <MX_CRC2_Init+0x3c>)
100010b0:	2200      	movs	r2, #0
100010b2:	711a      	strb	r2, [r3, #4]
  hcrc2.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
100010b4:	4b0a      	ldr	r3, [pc, #40]	; (100010e0 <MX_CRC2_Init+0x3c>)
100010b6:	2200      	movs	r2, #0
100010b8:	715a      	strb	r2, [r3, #5]
  hcrc2.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
100010ba:	4b09      	ldr	r3, [pc, #36]	; (100010e0 <MX_CRC2_Init+0x3c>)
100010bc:	2200      	movs	r2, #0
100010be:	615a      	str	r2, [r3, #20]
  hcrc2.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
100010c0:	4b07      	ldr	r3, [pc, #28]	; (100010e0 <MX_CRC2_Init+0x3c>)
100010c2:	2200      	movs	r2, #0
100010c4:	619a      	str	r2, [r3, #24]
  hcrc2.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
100010c6:	4b06      	ldr	r3, [pc, #24]	; (100010e0 <MX_CRC2_Init+0x3c>)
100010c8:	2201      	movs	r2, #1
100010ca:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc2) != HAL_OK)
100010cc:	4804      	ldr	r0, [pc, #16]	; (100010e0 <MX_CRC2_Init+0x3c>)
100010ce:	f001 ffc5 	bl	1000305c <HAL_CRC_Init>
100010d2:	4603      	mov	r3, r0
100010d4:	2b00      	cmp	r3, #0
100010d6:	d001      	beq.n	100010dc <MX_CRC2_Init+0x38>
  {
    Error_Handler();
100010d8:	f000 f986 	bl	100013e8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC2_Init 2 */

  /* USER CODE END CRC2_Init 2 */

}
100010dc:	bf00      	nop
100010de:	bd80      	pop	{r7, pc}
100010e0:	10020e4c 	.word	0x10020e4c
100010e4:	4c004000 	.word	0x4c004000

100010e8 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
100010e8:	b580      	push	{r7, lr}
100010ea:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
100010ec:	4b06      	ldr	r3, [pc, #24]	; (10001108 <MX_IPCC_Init+0x20>)
100010ee:	4a07      	ldr	r2, [pc, #28]	; (1000110c <MX_IPCC_Init+0x24>)
100010f0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
100010f2:	4805      	ldr	r0, [pc, #20]	; (10001108 <MX_IPCC_Init+0x20>)
100010f4:	f002 fa46 	bl	10003584 <HAL_IPCC_Init>
100010f8:	4603      	mov	r3, r0
100010fa:	2b00      	cmp	r3, #0
100010fc:	d001      	beq.n	10001102 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
100010fe:	f000 f973 	bl	100013e8 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
10001102:	bf00      	nop
10001104:	bd80      	pop	{r7, pc}
10001106:	bf00      	nop
10001108:	10020e70 	.word	0x10020e70
1000110c:	4c001000 	.word	0x4c001000

10001110 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
10001110:	b580      	push	{r7, lr}
10001112:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
10001114:	4b0f      	ldr	r3, [pc, #60]	; (10001154 <MX_TIM16_Init+0x44>)
10001116:	4a10      	ldr	r2, [pc, #64]	; (10001158 <MX_TIM16_Init+0x48>)
10001118:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 197;
1000111a:	4b0e      	ldr	r3, [pc, #56]	; (10001154 <MX_TIM16_Init+0x44>)
1000111c:	22c5      	movs	r2, #197	; 0xc5
1000111e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
10001120:	4b0c      	ldr	r3, [pc, #48]	; (10001154 <MX_TIM16_Init+0x44>)
10001122:	2200      	movs	r2, #0
10001124:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
10001126:	4b0b      	ldr	r3, [pc, #44]	; (10001154 <MX_TIM16_Init+0x44>)
10001128:	f64f 72ff 	movw	r2, #65535	; 0xffff
1000112c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
1000112e:	4b09      	ldr	r3, [pc, #36]	; (10001154 <MX_TIM16_Init+0x44>)
10001130:	2200      	movs	r2, #0
10001132:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
10001134:	4b07      	ldr	r3, [pc, #28]	; (10001154 <MX_TIM16_Init+0x44>)
10001136:	2200      	movs	r2, #0
10001138:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
1000113a:	4b06      	ldr	r3, [pc, #24]	; (10001154 <MX_TIM16_Init+0x44>)
1000113c:	2200      	movs	r2, #0
1000113e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
10001140:	4804      	ldr	r0, [pc, #16]	; (10001154 <MX_TIM16_Init+0x44>)
10001142:	f007 fec5 	bl	10008ed0 <HAL_TIM_Base_Init>
10001146:	4603      	mov	r3, r0
10001148:	2b00      	cmp	r3, #0
1000114a:	d001      	beq.n	10001150 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
1000114c:	f000 f94c 	bl	100013e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
10001150:	bf00      	nop
10001152:	bd80      	pop	{r7, pc}
10001154:	10020eac 	.word	0x10020eac
10001158:	44007000 	.word	0x44007000

1000115c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
1000115c:	b580      	push	{r7, lr}
1000115e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
10001160:	4b22      	ldr	r3, [pc, #136]	; (100011ec <MX_UART4_Init+0x90>)
10001162:	4a23      	ldr	r2, [pc, #140]	; (100011f0 <MX_UART4_Init+0x94>)
10001164:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
10001166:	4b21      	ldr	r3, [pc, #132]	; (100011ec <MX_UART4_Init+0x90>)
10001168:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1000116c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
1000116e:	4b1f      	ldr	r3, [pc, #124]	; (100011ec <MX_UART4_Init+0x90>)
10001170:	2200      	movs	r2, #0
10001172:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
10001174:	4b1d      	ldr	r3, [pc, #116]	; (100011ec <MX_UART4_Init+0x90>)
10001176:	2200      	movs	r2, #0
10001178:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
1000117a:	4b1c      	ldr	r3, [pc, #112]	; (100011ec <MX_UART4_Init+0x90>)
1000117c:	2200      	movs	r2, #0
1000117e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
10001180:	4b1a      	ldr	r3, [pc, #104]	; (100011ec <MX_UART4_Init+0x90>)
10001182:	220c      	movs	r2, #12
10001184:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
10001186:	4b19      	ldr	r3, [pc, #100]	; (100011ec <MX_UART4_Init+0x90>)
10001188:	2200      	movs	r2, #0
1000118a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
1000118c:	4b17      	ldr	r3, [pc, #92]	; (100011ec <MX_UART4_Init+0x90>)
1000118e:	2200      	movs	r2, #0
10001190:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
10001192:	4b16      	ldr	r3, [pc, #88]	; (100011ec <MX_UART4_Init+0x90>)
10001194:	2200      	movs	r2, #0
10001196:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
10001198:	4b14      	ldr	r3, [pc, #80]	; (100011ec <MX_UART4_Init+0x90>)
1000119a:	2200      	movs	r2, #0
1000119c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
1000119e:	4b13      	ldr	r3, [pc, #76]	; (100011ec <MX_UART4_Init+0x90>)
100011a0:	2200      	movs	r2, #0
100011a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
100011a4:	4811      	ldr	r0, [pc, #68]	; (100011ec <MX_UART4_Init+0x90>)
100011a6:	f007 ff81 	bl	100090ac <HAL_UART_Init>
100011aa:	4603      	mov	r3, r0
100011ac:	2b00      	cmp	r3, #0
100011ae:	d001      	beq.n	100011b4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
100011b0:	f000 f91a 	bl	100013e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
100011b4:	2100      	movs	r1, #0
100011b6:	480d      	ldr	r0, [pc, #52]	; (100011ec <MX_UART4_Init+0x90>)
100011b8:	f009 faa9 	bl	1000a70e <HAL_UARTEx_SetTxFifoThreshold>
100011bc:	4603      	mov	r3, r0
100011be:	2b00      	cmp	r3, #0
100011c0:	d001      	beq.n	100011c6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
100011c2:	f000 f911 	bl	100013e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
100011c6:	2100      	movs	r1, #0
100011c8:	4808      	ldr	r0, [pc, #32]	; (100011ec <MX_UART4_Init+0x90>)
100011ca:	f009 fade 	bl	1000a78a <HAL_UARTEx_SetRxFifoThreshold>
100011ce:	4603      	mov	r3, r0
100011d0:	2b00      	cmp	r3, #0
100011d2:	d001      	beq.n	100011d8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
100011d4:	f000 f908 	bl	100013e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
100011d8:	4804      	ldr	r0, [pc, #16]	; (100011ec <MX_UART4_Init+0x90>)
100011da:	f009 fa5f 	bl	1000a69c <HAL_UARTEx_DisableFifoMode>
100011de:	4603      	mov	r3, r0
100011e0:	2b00      	cmp	r3, #0
100011e2:	d001      	beq.n	100011e8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
100011e4:	f000 f900 	bl	100013e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
100011e8:	bf00      	nop
100011ea:	bd80      	pop	{r7, pc}
100011ec:	10020eec 	.word	0x10020eec
100011f0:	40010000 	.word	0x40010000

100011f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
100011f4:	b580      	push	{r7, lr}
100011f6:	b086      	sub	sp, #24
100011f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
100011fa:	1d3b      	adds	r3, r7, #4
100011fc:	2200      	movs	r2, #0
100011fe:	601a      	str	r2, [r3, #0]
10001200:	605a      	str	r2, [r3, #4]
10001202:	609a      	str	r2, [r3, #8]
10001204:	60da      	str	r2, [r3, #12]
10001206:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
10001208:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000120c:	2204      	movs	r2, #4
1000120e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOH_CLK_ENABLE();
10001212:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001216:	2280      	movs	r2, #128	; 0x80
10001218:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOA_CLK_ENABLE();
1000121c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001220:	2201      	movs	r2, #1
10001222:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOG_CLK_ENABLE();
10001226:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000122a:	2240      	movs	r2, #64	; 0x40
1000122c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOB_CLK_ENABLE();
10001230:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001234:	2202      	movs	r2, #2
10001236:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOF_CLK_ENABLE();
1000123a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000123e:	2220      	movs	r2, #32
10001240:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

  /*Configure GPIO pins : USB_PWR_CC2_Pin USB_PWR_CC1_Pin */
  GPIO_InitStruct.Pin = USB_PWR_CC2_Pin|USB_PWR_CC1_Pin;
10001244:	2330      	movs	r3, #48	; 0x30
10001246:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
10001248:	2303      	movs	r3, #3
1000124a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
1000124c:	1d3b      	adds	r3, r7, #4
1000124e:	4619      	mov	r1, r3
10001250:	4803      	ldr	r0, [pc, #12]	; (10001260 <MX_GPIO_Init+0x6c>)
10001252:	f001 ffed 	bl	10003230 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
10001256:	bf00      	nop
10001258:	3718      	adds	r7, #24
1000125a:	46bd      	mov	sp, r7
1000125c:	bd80      	pop	{r7, pc}
1000125e:	bf00      	nop
10001260:	50002000 	.word	0x50002000

10001264 <AI_Init>:

/* USER CODE BEGIN 4 */

static void AI_Init(void)
{
10001264:	b580      	push	{r7, lr}
10001266:	b090      	sub	sp, #64	; 0x40
10001268:	af00      	add	r7, sp, #0
  ai_error err;

  char buf[50]; // buffer for serial output string
  int buf_len = 0;
1000126a:	2300      	movs	r3, #0
1000126c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Create a local array with the addresses of the activations buffers */
  const ai_handle act_addr[] = { activations };
1000126e:	4b1c      	ldr	r3, [pc, #112]	; (100012e0 <AI_Init+0x7c>)
10001270:	603b      	str	r3, [r7, #0]
  /* Create an instance of the model */
  err = ai_emotion_model_create_and_init(&emotion_model, act_addr, NULL);
10001272:	463b      	mov	r3, r7
10001274:	2200      	movs	r2, #0
10001276:	4619      	mov	r1, r3
10001278:	481a      	ldr	r0, [pc, #104]	; (100012e4 <AI_Init+0x80>)
1000127a:	f00b fde9 	bl	1000ce50 <ai_emotion_model_create_and_init>
1000127e:	4603      	mov	r3, r0
10001280:	63bb      	str	r3, [r7, #56]	; 0x38
  if (err.type != AI_ERROR_NONE) {
10001282:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
10001286:	2b00      	cmp	r3, #0
10001288:	d013      	beq.n	100012b2 <AI_Init+0x4e>
	  buf_len = sprintf(buf, "ai_emotion_model_create error - type=%d code=%d\r\n", err.type, err.code);
1000128a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
1000128e:	461a      	mov	r2, r3
10001290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10001292:	f3c3 2317 	ubfx	r3, r3, #8, #24
10001296:	1d38      	adds	r0, r7, #4
10001298:	4913      	ldr	r1, [pc, #76]	; (100012e8 <AI_Init+0x84>)
1000129a:	f00e ff51 	bl	10010140 <siprintf>
1000129e:	63f8      	str	r0, [r7, #60]	; 0x3c
	  HAL_UART_Transmit(&huart4, (uint8_t *)buf, buf_len, 100);
100012a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
100012a2:	b29a      	uxth	r2, r3
100012a4:	1d39      	adds	r1, r7, #4
100012a6:	2364      	movs	r3, #100	; 0x64
100012a8:	4810      	ldr	r0, [pc, #64]	; (100012ec <AI_Init+0x88>)
100012aa:	f007 ff4f 	bl	1000914c <HAL_UART_Transmit>
//	  printf("ai_emotion_model_create error - type=%d code=%d\r\n", err.type, err.code);
	  Error_Handler();
100012ae:	f000 f89b 	bl	100013e8 <Error_Handler>
  }
  ai_input = ai_emotion_model_inputs_get(emotion_model, NULL);
100012b2:	4b0c      	ldr	r3, [pc, #48]	; (100012e4 <AI_Init+0x80>)
100012b4:	681b      	ldr	r3, [r3, #0]
100012b6:	2100      	movs	r1, #0
100012b8:	4618      	mov	r0, r3
100012ba:	f00b fe3d 	bl	1000cf38 <ai_emotion_model_inputs_get>
100012be:	4603      	mov	r3, r0
100012c0:	4a0b      	ldr	r2, [pc, #44]	; (100012f0 <AI_Init+0x8c>)
100012c2:	6013      	str	r3, [r2, #0]
  ai_output = ai_emotion_model_outputs_get(emotion_model, NULL);
100012c4:	4b07      	ldr	r3, [pc, #28]	; (100012e4 <AI_Init+0x80>)
100012c6:	681b      	ldr	r3, [r3, #0]
100012c8:	2100      	movs	r1, #0
100012ca:	4618      	mov	r0, r3
100012cc:	f00b fe4e 	bl	1000cf6c <ai_emotion_model_outputs_get>
100012d0:	4603      	mov	r3, r0
100012d2:	4a08      	ldr	r2, [pc, #32]	; (100012f4 <AI_Init+0x90>)
100012d4:	6013      	str	r3, [r2, #0]
}
100012d6:	bf00      	nop
100012d8:	3740      	adds	r7, #64	; 0x40
100012da:	46bd      	mov	sp, r7
100012dc:	bd80      	pop	{r7, pc}
100012de:	bf00      	nop
100012e0:	1002175c 	.word	0x1002175c
100012e4:	10020f80 	.word	0x10020f80
100012e8:	10012608 	.word	0x10012608
100012ec:	10020eec 	.word	0x10020eec
100012f0:	10029b2c 	.word	0x10029b2c
100012f4:	10029b30 	.word	0x10029b30

100012f8 <AI_Run>:

static void AI_Run(float *pIn, float *pOut)
{
100012f8:	b580      	push	{r7, lr}
100012fa:	b092      	sub	sp, #72	; 0x48
100012fc:	af00      	add	r7, sp, #0
100012fe:	6078      	str	r0, [r7, #4]
10001300:	6039      	str	r1, [r7, #0]

  ai_i32 batch;
  ai_error err;

  char buf[50]; // buffer for serial output string
  int buf_len = 0;
10001302:	2300      	movs	r3, #0
10001304:	647b      	str	r3, [r7, #68]	; 0x44

  /* Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(pIn);
10001306:	4b1b      	ldr	r3, [pc, #108]	; (10001374 <AI_Run+0x7c>)
10001308:	681b      	ldr	r3, [r3, #0]
1000130a:	687a      	ldr	r2, [r7, #4]
1000130c:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(pOut);
1000130e:	4b1a      	ldr	r3, [pc, #104]	; (10001378 <AI_Run+0x80>)
10001310:	681b      	ldr	r3, [r3, #0]
10001312:	683a      	ldr	r2, [r7, #0]
10001314:	605a      	str	r2, [r3, #4]

  batch = ai_emotion_model_run(emotion_model, ai_input, ai_output);
10001316:	4b19      	ldr	r3, [pc, #100]	; (1000137c <AI_Run+0x84>)
10001318:	681b      	ldr	r3, [r3, #0]
1000131a:	4a16      	ldr	r2, [pc, #88]	; (10001374 <AI_Run+0x7c>)
1000131c:	6811      	ldr	r1, [r2, #0]
1000131e:	4a16      	ldr	r2, [pc, #88]	; (10001378 <AI_Run+0x80>)
10001320:	6812      	ldr	r2, [r2, #0]
10001322:	4618      	mov	r0, r3
10001324:	f00b fe78 	bl	1000d018 <ai_emotion_model_run>
10001328:	6438      	str	r0, [r7, #64]	; 0x40
  if (batch != 1) {
1000132a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000132c:	2b01      	cmp	r3, #1
1000132e:	d01c      	beq.n	1000136a <AI_Run+0x72>
    err = ai_emotion_model_get_error(emotion_model);
10001330:	4b12      	ldr	r3, [pc, #72]	; (1000137c <AI_Run+0x84>)
10001332:	681b      	ldr	r3, [r3, #0]
10001334:	4618      	mov	r0, r3
10001336:	f00b fd69 	bl	1000ce0c <ai_emotion_model_get_error>
1000133a:	4603      	mov	r3, r0
1000133c:	63fb      	str	r3, [r7, #60]	; 0x3c
    buf_len = sprintf(buf, "AI ai_emotion_model_run error - type=%d code=%d\r\n", err.type, err.code);
1000133e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
10001342:	461a      	mov	r2, r3
10001344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10001346:	f3c3 2317 	ubfx	r3, r3, #8, #24
1000134a:	f107 0008 	add.w	r0, r7, #8
1000134e:	490c      	ldr	r1, [pc, #48]	; (10001380 <AI_Run+0x88>)
10001350:	f00e fef6 	bl	10010140 <siprintf>
10001354:	6478      	str	r0, [r7, #68]	; 0x44
    HAL_UART_Transmit(&huart4, (uint8_t *)buf, buf_len, 100);
10001356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10001358:	b29a      	uxth	r2, r3
1000135a:	f107 0108 	add.w	r1, r7, #8
1000135e:	2364      	movs	r3, #100	; 0x64
10001360:	4808      	ldr	r0, [pc, #32]	; (10001384 <AI_Run+0x8c>)
10001362:	f007 fef3 	bl	1000914c <HAL_UART_Transmit>
    //printf("AI ai_emotion_model_run error - type=%d code=%d\r\n", err.type, err.code);
    Error_Handler();
10001366:	f000 f83f 	bl	100013e8 <Error_Handler>
  }
}
1000136a:	bf00      	nop
1000136c:	3748      	adds	r7, #72	; 0x48
1000136e:	46bd      	mov	sp, r7
10001370:	bd80      	pop	{r7, pc}
10001372:	bf00      	nop
10001374:	10029b2c 	.word	0x10029b2c
10001378:	10029b30 	.word	0x10029b30
1000137c:	10020f80 	.word	0x10020f80
10001380:	1001263c 	.word	0x1001263c
10001384:	10020eec 	.word	0x10020eec

10001388 <argmax>:

static uint32_t argmax(const float * values, uint32_t len)
{
10001388:	b480      	push	{r7}
1000138a:	b087      	sub	sp, #28
1000138c:	af00      	add	r7, sp, #0
1000138e:	6078      	str	r0, [r7, #4]
10001390:	6039      	str	r1, [r7, #0]
  float max_value = values[0];
10001392:	687b      	ldr	r3, [r7, #4]
10001394:	681b      	ldr	r3, [r3, #0]
10001396:	617b      	str	r3, [r7, #20]
  uint32_t max_index = 0;
10001398:	2300      	movs	r3, #0
1000139a:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
1000139c:	2301      	movs	r3, #1
1000139e:	60fb      	str	r3, [r7, #12]
100013a0:	e017      	b.n	100013d2 <argmax+0x4a>
    if (values[i] > max_value) {
100013a2:	68fb      	ldr	r3, [r7, #12]
100013a4:	009b      	lsls	r3, r3, #2
100013a6:	687a      	ldr	r2, [r7, #4]
100013a8:	4413      	add	r3, r2
100013aa:	edd3 7a00 	vldr	s15, [r3]
100013ae:	ed97 7a05 	vldr	s14, [r7, #20]
100013b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
100013b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
100013ba:	d507      	bpl.n	100013cc <argmax+0x44>
      max_value = values[i];
100013bc:	68fb      	ldr	r3, [r7, #12]
100013be:	009b      	lsls	r3, r3, #2
100013c0:	687a      	ldr	r2, [r7, #4]
100013c2:	4413      	add	r3, r2
100013c4:	681b      	ldr	r3, [r3, #0]
100013c6:	617b      	str	r3, [r7, #20]
      max_index = i;
100013c8:	68fb      	ldr	r3, [r7, #12]
100013ca:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
100013cc:	68fb      	ldr	r3, [r7, #12]
100013ce:	3301      	adds	r3, #1
100013d0:	60fb      	str	r3, [r7, #12]
100013d2:	68fa      	ldr	r2, [r7, #12]
100013d4:	683b      	ldr	r3, [r7, #0]
100013d6:	429a      	cmp	r2, r3
100013d8:	d3e3      	bcc.n	100013a2 <argmax+0x1a>
    }
  }
  return max_index;
100013da:	693b      	ldr	r3, [r7, #16]
}
100013dc:	4618      	mov	r0, r3
100013de:	371c      	adds	r7, #28
100013e0:	46bd      	mov	sp, r7
100013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
100013e6:	4770      	bx	lr

100013e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
100013e8:	b480      	push	{r7}
100013ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
100013ec:	b672      	cpsid	i
}
100013ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
100013f0:	e7fe      	b.n	100013f0 <Error_Handler+0x8>

100013f2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
100013f2:	b580      	push	{r7, lr}
100013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
100013f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
100013fe:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
10001402:	2200      	movs	r2, #0
10001404:	2101      	movs	r1, #1
10001406:	f06f 000b 	mvn.w	r0, #11
1000140a:	f001 fdf0 	bl	10002fee <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
1000140e:	2200      	movs	r2, #0
10001410:	2101      	movs	r1, #1
10001412:	f06f 000a 	mvn.w	r0, #10
10001416:	f001 fdea 	bl	10002fee <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
1000141a:	2200      	movs	r2, #0
1000141c:	2101      	movs	r1, #1
1000141e:	f06f 0009 	mvn.w	r0, #9
10001422:	f001 fde4 	bl	10002fee <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
10001426:	2200      	movs	r2, #0
10001428:	2101      	movs	r1, #1
1000142a:	f06f 0004 	mvn.w	r0, #4
1000142e:	f001 fdde 	bl	10002fee <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
10001432:	2200      	movs	r2, #0
10001434:	2101      	movs	r1, #1
10001436:	f06f 0003 	mvn.w	r0, #3
1000143a:	f001 fdd8 	bl	10002fee <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
1000143e:	2200      	movs	r2, #0
10001440:	2101      	movs	r1, #1
10001442:	f06f 0001 	mvn.w	r0, #1
10001446:	f001 fdd2 	bl	10002fee <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_WAKEUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_WAKEUP_IRQn, 0, 0);
1000144a:	2200      	movs	r2, #0
1000144c:	2100      	movs	r1, #0
1000144e:	2091      	movs	r0, #145	; 0x91
10001450:	f001 fdcd 	bl	10002fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_WAKEUP_IRQn);
10001454:	2091      	movs	r0, #145	; 0x91
10001456:	f001 fde6 	bl	10003026 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
1000145a:	bf00      	nop
1000145c:	bd80      	pop	{r7, pc}
	...

10001460 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
10001460:	b580      	push	{r7, lr}
10001462:	b0de      	sub	sp, #376	; 0x178
10001464:	af00      	add	r7, sp, #0
10001466:	f507 73bc 	add.w	r3, r7, #376	; 0x178
1000146a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
1000146e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10001470:	f507 73b2 	add.w	r3, r7, #356	; 0x164
10001474:	2200      	movs	r2, #0
10001476:	601a      	str	r2, [r3, #0]
10001478:	605a      	str	r2, [r3, #4]
1000147a:	609a      	str	r2, [r3, #8]
1000147c:	60da      	str	r2, [r3, #12]
1000147e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
10001480:	f507 73bc 	add.w	r3, r7, #376	; 0x178
10001484:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
10001488:	4618      	mov	r0, r3
1000148a:	f44f 73ac 	mov.w	r3, #344	; 0x158
1000148e:	461a      	mov	r2, r3
10001490:	2100      	movs	r1, #0
10001492:	f00e feb8 	bl	10010206 <memset>
  if(hadc->Instance==ADC2)
10001496:	f507 73bc 	add.w	r3, r7, #376	; 0x178
1000149a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
1000149e:	681b      	ldr	r3, [r3, #0]
100014a0:	681b      	ldr	r3, [r3, #0]
100014a2:	4a2a      	ldr	r2, [pc, #168]	; (1000154c <HAL_ADC_MspInit+0xec>)
100014a4:	4293      	cmp	r3, r2
100014a6:	d14b      	bne.n	10001540 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
  if(IS_ENGINEERING_BOOT_MODE())
100014a8:	4b29      	ldr	r3, [pc, #164]	; (10001550 <HAL_ADC_MspInit+0xf0>)
100014aa:	681b      	ldr	r3, [r3, #0]
100014ac:	f003 0307 	and.w	r3, r3, #7
100014b0:	2b04      	cmp	r3, #4
100014b2:	d11a      	bne.n	100014ea <HAL_ADC_MspInit+0x8a>
  {

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
100014b4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
100014b8:	f5a3 71b8 	sub.w	r1, r3, #368	; 0x170
100014bc:	f04f 0208 	mov.w	r2, #8
100014c0:	f04f 0300 	mov.w	r3, #0
100014c4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PER;
100014c8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
100014cc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
100014d0:	2201      	movs	r2, #1
100014d2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
100014d6:	f107 0308 	add.w	r3, r7, #8
100014da:	4618      	mov	r0, r3
100014dc:	f004 fb94 	bl	10005c08 <HAL_RCCEx_PeriphCLKConfig>
100014e0:	4603      	mov	r3, r0
100014e2:	2b00      	cmp	r3, #0
100014e4:	d001      	beq.n	100014ea <HAL_ADC_MspInit+0x8a>
    {
      Error_Handler();
100014e6:	f7ff ff7f 	bl	100013e8 <Error_Handler>
    }

  }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
100014ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014ee:	2220      	movs	r2, #32
100014f0:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98

    __HAL_RCC_GPIOA_CLK_ENABLE();
100014f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014f8:	2201      	movs	r2, #1
100014fa:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    __HAL_RCC_GPIOF_CLK_ENABLE();
100014fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001502:	2220      	movs	r2, #32
10001504:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_INP19
    PA4     ------> ADC2_INP18
    PF14     ------> ADC2_INP6
    */
    GPIO_InitStruct.Pin = USB_PWR_CC2_Pin|USB_PWR_CC1_Pin;
10001508:	2330      	movs	r3, #48	; 0x30
1000150a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
1000150e:	2303      	movs	r3, #3
10001510:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10001514:	f507 73b2 	add.w	r3, r7, #356	; 0x164
10001518:	4619      	mov	r1, r3
1000151a:	480e      	ldr	r0, [pc, #56]	; (10001554 <HAL_ADC_MspInit+0xf4>)
1000151c:	f001 fe88 	bl	10003230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
10001520:	f44f 4380 	mov.w	r3, #16384	; 0x4000
10001524:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
10001528:	2303      	movs	r3, #3
1000152a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
1000152e:	2300      	movs	r3, #0
10001530:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
10001534:	f507 73b2 	add.w	r3, r7, #356	; 0x164
10001538:	4619      	mov	r1, r3
1000153a:	4807      	ldr	r0, [pc, #28]	; (10001558 <HAL_ADC_MspInit+0xf8>)
1000153c:	f001 fe78 	bl	10003230 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
10001540:	bf00      	nop
10001542:	f507 77bc 	add.w	r7, r7, #376	; 0x178
10001546:	46bd      	mov	sp, r7
10001548:	bd80      	pop	{r7, pc}
1000154a:	bf00      	nop
1000154c:	48003100 	.word	0x48003100
10001550:	50020000 	.word	0x50020000
10001554:	50002000 	.word	0x50002000
10001558:	50007000 	.word	0x50007000

1000155c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
1000155c:	b480      	push	{r7}
1000155e:	b083      	sub	sp, #12
10001560:	af00      	add	r7, sp, #0
10001562:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC2)
10001564:	687b      	ldr	r3, [r7, #4]
10001566:	681b      	ldr	r3, [r3, #0]
10001568:	4a06      	ldr	r2, [pc, #24]	; (10001584 <HAL_CRC_MspInit+0x28>)
1000156a:	4293      	cmp	r3, r2
1000156c:	d104      	bne.n	10001578 <HAL_CRC_MspInit+0x1c>
  {
  /* USER CODE BEGIN CRC2_MspInit 0 */

  /* USER CODE END CRC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC2_CLK_ENABLE();
1000156e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001572:	2280      	movs	r2, #128	; 0x80
10001574:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
  /* USER CODE BEGIN CRC2_MspInit 1 */

  /* USER CODE END CRC2_MspInit 1 */
  }

}
10001578:	bf00      	nop
1000157a:	370c      	adds	r7, #12
1000157c:	46bd      	mov	sp, r7
1000157e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001582:	4770      	bx	lr
10001584:	4c004000 	.word	0x4c004000

10001588 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
10001588:	b580      	push	{r7, lr}
1000158a:	b082      	sub	sp, #8
1000158c:	af00      	add	r7, sp, #0
1000158e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
10001590:	687b      	ldr	r3, [r7, #4]
10001592:	681b      	ldr	r3, [r3, #0]
10001594:	4a0e      	ldr	r2, [pc, #56]	; (100015d0 <HAL_IPCC_MspInit+0x48>)
10001596:	4293      	cmp	r3, r2
10001598:	d115      	bne.n	100015c6 <HAL_IPCC_MspInit+0x3e>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
1000159a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000159e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
100015a2:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_RX1_IRQn, 1, 0);
100015a6:	2200      	movs	r2, #0
100015a8:	2101      	movs	r1, #1
100015aa:	2067      	movs	r0, #103	; 0x67
100015ac:	f001 fd1f 	bl	10002fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_RX1_IRQn);
100015b0:	2067      	movs	r0, #103	; 0x67
100015b2:	f001 fd38 	bl	10003026 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_TX1_IRQn, 1, 0);
100015b6:	2200      	movs	r2, #0
100015b8:	2101      	movs	r1, #1
100015ba:	2068      	movs	r0, #104	; 0x68
100015bc:	f001 fd17 	bl	10002fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_TX1_IRQn);
100015c0:	2068      	movs	r0, #104	; 0x68
100015c2:	f001 fd30 	bl	10003026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
100015c6:	bf00      	nop
100015c8:	3708      	adds	r7, #8
100015ca:	46bd      	mov	sp, r7
100015cc:	bd80      	pop	{r7, pc}
100015ce:	bf00      	nop
100015d0:	4c001000 	.word	0x4c001000

100015d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
100015d4:	b480      	push	{r7}
100015d6:	b083      	sub	sp, #12
100015d8:	af00      	add	r7, sp, #0
100015da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
100015dc:	687b      	ldr	r3, [r7, #4]
100015de:	681b      	ldr	r3, [r3, #0]
100015e0:	4a06      	ldr	r2, [pc, #24]	; (100015fc <HAL_TIM_Base_MspInit+0x28>)
100015e2:	4293      	cmp	r3, r2
100015e4:	d104      	bne.n	100015f0 <HAL_TIM_Base_MspInit+0x1c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
100015e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015ea:	2208      	movs	r2, #8
100015ec:	f8c3 2a88 	str.w	r2, [r3, #2696]	; 0xa88
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
100015f0:	bf00      	nop
100015f2:	370c      	adds	r7, #12
100015f4:	46bd      	mov	sp, r7
100015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
100015fa:	4770      	bx	lr
100015fc:	44007000 	.word	0x44007000

10001600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
10001600:	b580      	push	{r7, lr}
10001602:	b0de      	sub	sp, #376	; 0x178
10001604:	af00      	add	r7, sp, #0
10001606:	f507 73bc 	add.w	r3, r7, #376	; 0x178
1000160a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
1000160e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10001610:	f507 73b2 	add.w	r3, r7, #356	; 0x164
10001614:	2200      	movs	r2, #0
10001616:	601a      	str	r2, [r3, #0]
10001618:	605a      	str	r2, [r3, #4]
1000161a:	609a      	str	r2, [r3, #8]
1000161c:	60da      	str	r2, [r3, #12]
1000161e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
10001620:	f507 73bc 	add.w	r3, r7, #376	; 0x178
10001624:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
10001628:	4618      	mov	r0, r3
1000162a:	f44f 73ac 	mov.w	r3, #344	; 0x158
1000162e:	461a      	mov	r2, r3
10001630:	2100      	movs	r1, #0
10001632:	f00e fde8 	bl	10010206 <memset>
  if(huart->Instance==UART4)
10001636:	f507 73bc 	add.w	r3, r7, #376	; 0x178
1000163a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
1000163e:	681b      	ldr	r3, [r3, #0]
10001640:	681b      	ldr	r3, [r3, #0]
10001642:	4a2d      	ldr	r2, [pc, #180]	; (100016f8 <HAL_UART_MspInit+0xf8>)
10001644:	4293      	cmp	r3, r2
10001646:	d151      	bne.n	100016ec <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  if(IS_ENGINEERING_BOOT_MODE())
10001648:	4b2c      	ldr	r3, [pc, #176]	; (100016fc <HAL_UART_MspInit+0xfc>)
1000164a:	681b      	ldr	r3, [r3, #0]
1000164c:	f003 0307 	and.w	r3, r3, #7
10001650:	2b04      	cmp	r3, #4
10001652:	d113      	bne.n	1000167c <HAL_UART_MspInit+0x7c>
  {

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART24;
10001654:	f507 73bc 	add.w	r3, r7, #376	; 0x178
10001658:	f5a3 71b8 	sub.w	r1, r3, #368	; 0x170
1000165c:	f04f 0202 	mov.w	r2, #2
10001660:	f04f 0300 	mov.w	r3, #0
10001664:	e9c1 2300 	strd	r2, r3, [r1]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
10001668:	f107 0308 	add.w	r3, r7, #8
1000166c:	4618      	mov	r0, r3
1000166e:	f004 facb 	bl	10005c08 <HAL_RCCEx_PeriphCLKConfig>
10001672:	4603      	mov	r3, r0
10001674:	2b00      	cmp	r3, #0
10001676:	d001      	beq.n	1000167c <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
10001678:	f7ff feb6 	bl	100013e8 <Error_Handler>
    }

  }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
1000167c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001680:	f44f 3280 	mov.w	r2, #65536	; 0x10000
10001684:	f8c3 2a80 	str.w	r2, [r3, #2688]	; 0xa80

    __HAL_RCC_GPIOG_CLK_ENABLE();
10001688:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000168c:	2240      	movs	r2, #64	; 0x40
1000168e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    __HAL_RCC_GPIOB_CLK_ENABLE();
10001692:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001696:	2202      	movs	r2, #2
10001698:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    /**UART4 GPIO Configuration
    PG11     ------> UART4_TX
    PB2     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin;
1000169c:	f44f 6300 	mov.w	r3, #2048	; 0x800
100016a0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
100016a4:	2302      	movs	r3, #2
100016a6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100016aa:	2300      	movs	r3, #0
100016ac:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100016b0:	2300      	movs	r3, #0
100016b2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
100016b6:	2306      	movs	r3, #6
100016b8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
100016bc:	f507 73b2 	add.w	r3, r7, #356	; 0x164
100016c0:	4619      	mov	r1, r3
100016c2:	480f      	ldr	r0, [pc, #60]	; (10001700 <HAL_UART_MspInit+0x100>)
100016c4:	f001 fdb4 	bl	10003230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLINK_TX_Pin;
100016c8:	2304      	movs	r3, #4
100016ca:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF;
100016ce:	2302      	movs	r3, #2
100016d0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100016d4:	2300      	movs	r3, #0
100016d6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
100016da:	2308      	movs	r3, #8
100016dc:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    HAL_GPIO_Init(STLINK_TX_GPIO_Port, &GPIO_InitStruct);
100016e0:	f507 73b2 	add.w	r3, r7, #356	; 0x164
100016e4:	4619      	mov	r1, r3
100016e6:	4807      	ldr	r0, [pc, #28]	; (10001704 <HAL_UART_MspInit+0x104>)
100016e8:	f001 fda2 	bl	10003230 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
100016ec:	bf00      	nop
100016ee:	f507 77bc 	add.w	r7, r7, #376	; 0x178
100016f2:	46bd      	mov	sp, r7
100016f4:	bd80      	pop	{r7, pc}
100016f6:	bf00      	nop
100016f8:	40010000 	.word	0x40010000
100016fc:	50020000 	.word	0x50020000
10001700:	50008000 	.word	0x50008000
10001704:	50003000 	.word	0x50003000

10001708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10001708:	b480      	push	{r7}
1000170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
1000170c:	e7fe      	b.n	1000170c <NMI_Handler+0x4>

1000170e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
1000170e:	b480      	push	{r7}
10001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
10001712:	e7fe      	b.n	10001712 <HardFault_Handler+0x4>

10001714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
10001714:	b480      	push	{r7}
10001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
10001718:	e7fe      	b.n	10001718 <MemManage_Handler+0x4>

1000171a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
1000171a:	b480      	push	{r7}
1000171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
1000171e:	e7fe      	b.n	1000171e <BusFault_Handler+0x4>

10001720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
10001720:	b480      	push	{r7}
10001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
10001724:	e7fe      	b.n	10001724 <UsageFault_Handler+0x4>

10001726 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10001726:	b480      	push	{r7}
10001728:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
1000172a:	bf00      	nop
1000172c:	46bd      	mov	sp, r7
1000172e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001732:	4770      	bx	lr

10001734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
10001734:	b480      	push	{r7}
10001736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
10001738:	bf00      	nop
1000173a:	46bd      	mov	sp, r7
1000173c:	f85d 7b04 	ldr.w	r7, [sp], #4
10001740:	4770      	bx	lr

10001742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
10001742:	b480      	push	{r7}
10001744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10001746:	bf00      	nop
10001748:	46bd      	mov	sp, r7
1000174a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000174e:	4770      	bx	lr

10001750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
10001750:	b580      	push	{r7, lr}
10001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10001754:	f000 f8a4 	bl	100018a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10001758:	bf00      	nop
1000175a:	bd80      	pop	{r7, pc}

1000175c <IPCC_RX1_IRQHandler>:

/**
  * @brief This function handles IPCC RX1 occupied interrupt.
  */
void IPCC_RX1_IRQHandler(void)
{
1000175c:	b580      	push	{r7, lr}
1000175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_RX1_IRQn 0 */

  /* USER CODE END IPCC_RX1_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
10001760:	4802      	ldr	r0, [pc, #8]	; (1000176c <IPCC_RX1_IRQHandler+0x10>)
10001762:	f002 f857 	bl	10003814 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_RX1_IRQn 1 */

  /* USER CODE END IPCC_RX1_IRQn 1 */
}
10001766:	bf00      	nop
10001768:	bd80      	pop	{r7, pc}
1000176a:	bf00      	nop
1000176c:	10020e70 	.word	0x10020e70

10001770 <IPCC_TX1_IRQHandler>:

/**
  * @brief This function handles IPCC TX1 free interrupt.
  */
void IPCC_TX1_IRQHandler(void)
{
10001770:	b580      	push	{r7, lr}
10001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_TX1_IRQn 0 */

  /* USER CODE END IPCC_TX1_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
10001774:	4802      	ldr	r0, [pc, #8]	; (10001780 <IPCC_TX1_IRQHandler+0x10>)
10001776:	f001 ffff 	bl	10003778 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_TX1_IRQn 1 */

  /* USER CODE END IPCC_TX1_IRQn 1 */
}
1000177a:	bf00      	nop
1000177c:	bd80      	pop	{r7, pc}
1000177e:	bf00      	nop
10001780:	10020e70 	.word	0x10020e70

10001784 <RCC_WAKEUP_IRQHandler>:

/**
  * @brief This function handles RCC wake-up interrupt.
  */
void RCC_WAKEUP_IRQHandler(void)
{
10001784:	b580      	push	{r7, lr}
10001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 0 */

  /* USER CODE END RCC_WAKEUP_IRQn 0 */
  HAL_RCC_WAKEUP_IRQHandler();
10001788:	f003 fdde 	bl	10005348 <HAL_RCC_WAKEUP_IRQHandler>
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 1 */

  /* USER CODE END RCC_WAKEUP_IRQn 1 */
}
1000178c:	bf00      	nop
1000178e:	bd80      	pop	{r7, pc}

10001790 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
10001790:	b580      	push	{r7, lr}
10001792:	b086      	sub	sp, #24
10001794:	af00      	add	r7, sp, #0
10001796:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
10001798:	4a14      	ldr	r2, [pc, #80]	; (100017ec <_sbrk+0x5c>)
1000179a:	4b15      	ldr	r3, [pc, #84]	; (100017f0 <_sbrk+0x60>)
1000179c:	1ad3      	subs	r3, r2, r3
1000179e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
100017a0:	697b      	ldr	r3, [r7, #20]
100017a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
100017a4:	4b13      	ldr	r3, [pc, #76]	; (100017f4 <_sbrk+0x64>)
100017a6:	681b      	ldr	r3, [r3, #0]
100017a8:	2b00      	cmp	r3, #0
100017aa:	d102      	bne.n	100017b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
100017ac:	4b11      	ldr	r3, [pc, #68]	; (100017f4 <_sbrk+0x64>)
100017ae:	4a12      	ldr	r2, [pc, #72]	; (100017f8 <_sbrk+0x68>)
100017b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
100017b2:	4b10      	ldr	r3, [pc, #64]	; (100017f4 <_sbrk+0x64>)
100017b4:	681a      	ldr	r2, [r3, #0]
100017b6:	687b      	ldr	r3, [r7, #4]
100017b8:	4413      	add	r3, r2
100017ba:	693a      	ldr	r2, [r7, #16]
100017bc:	429a      	cmp	r2, r3
100017be:	d207      	bcs.n	100017d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
100017c0:	f00e fda8 	bl	10010314 <__errno>
100017c4:	4603      	mov	r3, r0
100017c6:	220c      	movs	r2, #12
100017c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
100017ca:	f04f 33ff 	mov.w	r3, #4294967295
100017ce:	e009      	b.n	100017e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
100017d0:	4b08      	ldr	r3, [pc, #32]	; (100017f4 <_sbrk+0x64>)
100017d2:	681b      	ldr	r3, [r3, #0]
100017d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
100017d6:	4b07      	ldr	r3, [pc, #28]	; (100017f4 <_sbrk+0x64>)
100017d8:	681a      	ldr	r2, [r3, #0]
100017da:	687b      	ldr	r3, [r7, #4]
100017dc:	4413      	add	r3, r2
100017de:	4a05      	ldr	r2, [pc, #20]	; (100017f4 <_sbrk+0x64>)
100017e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
100017e2:	68fb      	ldr	r3, [r7, #12]
}
100017e4:	4618      	mov	r0, r3
100017e6:	3718      	adds	r7, #24
100017e8:	46bd      	mov	sp, r7
100017ea:	bd80      	pop	{r7, pc}
100017ec:	10040000 	.word	0x10040000
100017f0:	00000800 	.word	0x00000800
100017f4:	10029b34 	.word	0x10029b34
100017f8:	10029e20 	.word	0x10029e20

100017fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
100017fc:	e7fe      	b.n	100017fc <ADC1_IRQHandler>
	...

10001800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10001800:	b580      	push	{r7, lr}
10001802:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
10001804:	2003      	movs	r0, #3
10001806:	f001 fbe7 	bl	10002fd8 <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
1000180a:	f003 fd1d 	bl	10005248 <HAL_RCC_GetSystemCoreClockFreq>
1000180e:	4603      	mov	r3, r0
10001810:	4a07      	ldr	r2, [pc, #28]	; (10001830 <HAL_Init+0x30>)
10001812:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10001814:	2001      	movs	r0, #1
10001816:	f000 f80d 	bl	10001834 <HAL_InitTick>
1000181a:	4603      	mov	r3, r0
1000181c:	2b00      	cmp	r3, #0
1000181e:	d001      	beq.n	10001824 <HAL_Init+0x24>
  {
    return HAL_ERROR;
10001820:	2301      	movs	r3, #1
10001822:	e002      	b.n	1000182a <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
10001824:	f7ff fde5 	bl	100013f2 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
10001828:	2300      	movs	r3, #0
}
1000182a:	4618      	mov	r0, r3
1000182c:	bd80      	pop	{r7, pc}
1000182e:	bf00      	nop
10001830:	10020000 	.word	0x10020000

10001834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
10001834:	b580      	push	{r7, lr}
10001836:	b082      	sub	sp, #8
10001838:	af00      	add	r7, sp, #0
1000183a:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
1000183c:	4b15      	ldr	r3, [pc, #84]	; (10001894 <HAL_InitTick+0x60>)
1000183e:	781b      	ldrb	r3, [r3, #0]
10001840:	2b00      	cmp	r3, #0
10001842:	d101      	bne.n	10001848 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
10001844:	2301      	movs	r3, #1
10001846:	e021      	b.n	1000188c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
10001848:	4b13      	ldr	r3, [pc, #76]	; (10001898 <HAL_InitTick+0x64>)
1000184a:	681a      	ldr	r2, [r3, #0]
1000184c:	4b11      	ldr	r3, [pc, #68]	; (10001894 <HAL_InitTick+0x60>)
1000184e:	781b      	ldrb	r3, [r3, #0]
10001850:	4619      	mov	r1, r3
10001852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
10001856:	fbb3 f3f1 	udiv	r3, r3, r1
1000185a:	fbb2 f3f3 	udiv	r3, r2, r3
1000185e:	4618      	mov	r0, r3
10001860:	f001 fbef 	bl	10003042 <HAL_SYSTICK_Config>
10001864:	4603      	mov	r3, r0
10001866:	2b00      	cmp	r3, #0
10001868:	d001      	beq.n	1000186e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
1000186a:	2301      	movs	r3, #1
1000186c:	e00e      	b.n	1000188c <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
1000186e:	687b      	ldr	r3, [r7, #4]
10001870:	2b0f      	cmp	r3, #15
10001872:	d80a      	bhi.n	1000188a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
10001874:	2200      	movs	r2, #0
10001876:	6879      	ldr	r1, [r7, #4]
10001878:	f04f 30ff 	mov.w	r0, #4294967295
1000187c:	f001 fbb7 	bl	10002fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
10001880:	4a06      	ldr	r2, [pc, #24]	; (1000189c <HAL_InitTick+0x68>)
10001882:	687b      	ldr	r3, [r7, #4]
10001884:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
10001886:	2300      	movs	r3, #0
10001888:	e000      	b.n	1000188c <HAL_InitTick+0x58>
    return HAL_ERROR;
1000188a:	2301      	movs	r3, #1
}
1000188c:	4618      	mov	r0, r3
1000188e:	3708      	adds	r7, #8
10001890:	46bd      	mov	sp, r7
10001892:	bd80      	pop	{r7, pc}
10001894:	10020010 	.word	0x10020010
10001898:	10020000 	.word	0x10020000
1000189c:	1002000c 	.word	0x1002000c

100018a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
100018a0:	b480      	push	{r7}
100018a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
100018a4:	4b06      	ldr	r3, [pc, #24]	; (100018c0 <HAL_IncTick+0x20>)
100018a6:	781b      	ldrb	r3, [r3, #0]
100018a8:	461a      	mov	r2, r3
100018aa:	4b06      	ldr	r3, [pc, #24]	; (100018c4 <HAL_IncTick+0x24>)
100018ac:	681b      	ldr	r3, [r3, #0]
100018ae:	4413      	add	r3, r2
100018b0:	4a04      	ldr	r2, [pc, #16]	; (100018c4 <HAL_IncTick+0x24>)
100018b2:	6013      	str	r3, [r2, #0]
}
100018b4:	bf00      	nop
100018b6:	46bd      	mov	sp, r7
100018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
100018bc:	4770      	bx	lr
100018be:	bf00      	nop
100018c0:	10020010 	.word	0x10020010
100018c4:	10029b38 	.word	0x10029b38

100018c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
100018c8:	b480      	push	{r7}
100018ca:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
100018cc:	4b03      	ldr	r3, [pc, #12]	; (100018dc <HAL_GetTick+0x14>)
100018ce:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
100018d0:	4618      	mov	r0, r3
100018d2:	46bd      	mov	sp, r7
100018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
100018d8:	4770      	bx	lr
100018da:	bf00      	nop
100018dc:	10029b38 	.word	0x10029b38

100018e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
100018e0:	b580      	push	{r7, lr}
100018e2:	b084      	sub	sp, #16
100018e4:	af00      	add	r7, sp, #0
100018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
100018e8:	f7ff ffee 	bl	100018c8 <HAL_GetTick>
100018ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
100018ee:	687b      	ldr	r3, [r7, #4]
100018f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
100018f2:	68fb      	ldr	r3, [r7, #12]
100018f4:	f1b3 3fff 	cmp.w	r3, #4294967295
100018f8:	d005      	beq.n	10001906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
100018fa:	4b0a      	ldr	r3, [pc, #40]	; (10001924 <HAL_Delay+0x44>)
100018fc:	781b      	ldrb	r3, [r3, #0]
100018fe:	461a      	mov	r2, r3
10001900:	68fb      	ldr	r3, [r7, #12]
10001902:	4413      	add	r3, r2
10001904:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
10001906:	bf00      	nop
10001908:	f7ff ffde 	bl	100018c8 <HAL_GetTick>
1000190c:	4602      	mov	r2, r0
1000190e:	68bb      	ldr	r3, [r7, #8]
10001910:	1ad3      	subs	r3, r2, r3
10001912:	68fa      	ldr	r2, [r7, #12]
10001914:	429a      	cmp	r2, r3
10001916:	d8f7      	bhi.n	10001908 <HAL_Delay+0x28>
  {
  }
}
10001918:	bf00      	nop
1000191a:	bf00      	nop
1000191c:	3710      	adds	r7, #16
1000191e:	46bd      	mov	sp, r7
10001920:	bd80      	pop	{r7, pc}
10001922:	bf00      	nop
10001924:	10020010 	.word	0x10020010

10001928 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.8 V.
  *                                                This requires VDDA equal to or higher than 2.1 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
10001928:	b480      	push	{r7}
1000192a:	b083      	sub	sp, #12
1000192c:	af00      	add	r7, sp, #0
1000192e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
10001930:	4b06      	ldr	r3, [pc, #24]	; (1000194c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
10001932:	681b      	ldr	r3, [r3, #0]
10001934:	f023 0270 	bic.w	r2, r3, #112	; 0x70
10001938:	4904      	ldr	r1, [pc, #16]	; (1000194c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
1000193a:	687b      	ldr	r3, [r7, #4]
1000193c:	4313      	orrs	r3, r2
1000193e:	600b      	str	r3, [r1, #0]
}
10001940:	bf00      	nop
10001942:	370c      	adds	r7, #12
10001944:	46bd      	mov	sp, r7
10001946:	f85d 7b04 	ldr.w	r7, [sp], #4
1000194a:	4770      	bx	lr
1000194c:	50025000 	.word	0x50025000

10001950 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
10001950:	b480      	push	{r7}
10001952:	b083      	sub	sp, #12
10001954:	af00      	add	r7, sp, #0
10001956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
10001958:	4b06      	ldr	r3, [pc, #24]	; (10001974 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
1000195a:	681b      	ldr	r3, [r3, #0]
1000195c:	f023 0202 	bic.w	r2, r3, #2
10001960:	4904      	ldr	r1, [pc, #16]	; (10001974 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
10001962:	687b      	ldr	r3, [r7, #4]
10001964:	4313      	orrs	r3, r2
10001966:	600b      	str	r3, [r1, #0]
}
10001968:	bf00      	nop
1000196a:	370c      	adds	r7, #12
1000196c:	46bd      	mov	sp, r7
1000196e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001972:	4770      	bx	lr
10001974:	50025000 	.word	0x50025000

10001978 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
10001978:	b580      	push	{r7, lr}
1000197a:	b082      	sub	sp, #8
1000197c:	af00      	add	r7, sp, #0
  uint32_t  tickstart = 0;
1000197e:	2300      	movs	r3, #0
10001980:	607b      	str	r3, [r7, #4]

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
10001982:	4b0f      	ldr	r3, [pc, #60]	; (100019c0 <HAL_SYSCFG_EnableVREFBUF+0x48>)
10001984:	681b      	ldr	r3, [r3, #0]
10001986:	4a0e      	ldr	r2, [pc, #56]	; (100019c0 <HAL_SYSCFG_EnableVREFBUF+0x48>)
10001988:	f043 0301 	orr.w	r3, r3, #1
1000198c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
1000198e:	f7ff ff9b 	bl	100018c8 <HAL_GetTick>
10001992:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == RESET)
10001994:	e008      	b.n	100019a8 <HAL_SYSCFG_EnableVREFBUF+0x30>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
10001996:	f7ff ff97 	bl	100018c8 <HAL_GetTick>
1000199a:	4602      	mov	r2, r0
1000199c:	687b      	ldr	r3, [r7, #4]
1000199e:	1ad3      	subs	r3, r2, r3
100019a0:	2b0a      	cmp	r3, #10
100019a2:	d901      	bls.n	100019a8 <HAL_SYSCFG_EnableVREFBUF+0x30>
    {
      return HAL_TIMEOUT;
100019a4:	2303      	movs	r3, #3
100019a6:	e006      	b.n	100019b6 <HAL_SYSCFG_EnableVREFBUF+0x3e>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == RESET)
100019a8:	4b05      	ldr	r3, [pc, #20]	; (100019c0 <HAL_SYSCFG_EnableVREFBUF+0x48>)
100019aa:	681b      	ldr	r3, [r3, #0]
100019ac:	f003 0308 	and.w	r3, r3, #8
100019b0:	2b00      	cmp	r3, #0
100019b2:	d0f0      	beq.n	10001996 <HAL_SYSCFG_EnableVREFBUF+0x1e>
    }
  }

  return HAL_OK;
100019b4:	2300      	movs	r3, #0
}
100019b6:	4618      	mov	r0, r3
100019b8:	3708      	adds	r7, #8
100019ba:	46bd      	mov	sp, r7
100019bc:	bd80      	pop	{r7, pc}
100019be:	bf00      	nop
100019c0:	50025000 	.word	0x50025000

100019c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
100019c4:	b480      	push	{r7}
100019c6:	b083      	sub	sp, #12
100019c8:	af00      	add	r7, sp, #0
100019ca:	6078      	str	r0, [r7, #4]
100019cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
100019ce:	687b      	ldr	r3, [r7, #4]
100019d0:	689b      	ldr	r3, [r3, #8]
100019d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
100019d6:	683b      	ldr	r3, [r7, #0]
100019d8:	431a      	orrs	r2, r3
100019da:	687b      	ldr	r3, [r7, #4]
100019dc:	609a      	str	r2, [r3, #8]
}
100019de:	bf00      	nop
100019e0:	370c      	adds	r7, #12
100019e2:	46bd      	mov	sp, r7
100019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
100019e8:	4770      	bx	lr
	...

100019ec <LL_ADC_SetCommonPathInternalCh>:
  *
  *         (1) On STM32MP1, parameter available only on ADC instance: ADC2.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
100019ec:	b480      	push	{r7}
100019ee:	b083      	sub	sp, #12
100019f0:	af00      	add	r7, sp, #0
100019f2:	6078      	str	r0, [r7, #4]
100019f4:	6039      	str	r1, [r7, #0]
  if(PathInternal == LL_ADC_PATH_INTERNAL_VDDCORE)
100019f6:	683b      	ldr	r3, [r7, #0]
100019f8:	2b01      	cmp	r3, #1
100019fa:	d108      	bne.n	10001a0e <LL_ADC_SetCommonPathInternalCh+0x22>
  {
    /* Feature limited to ADC instance ADC2 */
    SET_BIT(ADC2->OR, ADC2_OR_VDDCOREEN);
100019fc:	4b0b      	ldr	r3, [pc, #44]	; (10001a2c <LL_ADC_SetCommonPathInternalCh+0x40>)
100019fe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
10001a02:	4a0a      	ldr	r2, [pc, #40]	; (10001a2c <LL_ADC_SetCommonPathInternalCh+0x40>)
10001a04:	f043 0301 	orr.w	r3, r3, #1
10001a08:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
  }
  else
  {
    MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
  }
}
10001a0c:	e007      	b.n	10001a1e <LL_ADC_SetCommonPathInternalCh+0x32>
    MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
10001a0e:	687b      	ldr	r3, [r7, #4]
10001a10:	689b      	ldr	r3, [r3, #8]
10001a12:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
10001a16:	683b      	ldr	r3, [r7, #0]
10001a18:	431a      	orrs	r2, r3
10001a1a:	687b      	ldr	r3, [r7, #4]
10001a1c:	609a      	str	r2, [r3, #8]
}
10001a1e:	bf00      	nop
10001a20:	370c      	adds	r7, #12
10001a22:	46bd      	mov	sp, r7
10001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
10001a28:	4770      	bx	lr
10001a2a:	bf00      	nop
10001a2c:	48003100 	.word	0x48003100

10001a30 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
10001a30:	b480      	push	{r7}
10001a32:	b083      	sub	sp, #12
10001a34:	af00      	add	r7, sp, #0
10001a36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
10001a38:	687b      	ldr	r3, [r7, #4]
10001a3a:	689b      	ldr	r3, [r3, #8]
10001a3c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
10001a40:	4618      	mov	r0, r3
10001a42:	370c      	adds	r7, #12
10001a44:	46bd      	mov	sp, r7
10001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
10001a4a:	4770      	bx	lr

10001a4c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
10001a4c:	b480      	push	{r7}
10001a4e:	b087      	sub	sp, #28
10001a50:	af00      	add	r7, sp, #0
10001a52:	60f8      	str	r0, [r7, #12]
10001a54:	60b9      	str	r1, [r7, #8]
10001a56:	607a      	str	r2, [r7, #4]
10001a58:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
10001a5a:	68fb      	ldr	r3, [r7, #12]
10001a5c:	3360      	adds	r3, #96	; 0x60
10001a5e:	461a      	mov	r2, r3
10001a60:	68bb      	ldr	r3, [r7, #8]
10001a62:	009b      	lsls	r3, r3, #2
10001a64:	4413      	add	r3, r2
10001a66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
10001a68:	697b      	ldr	r3, [r7, #20]
10001a6a:	681b      	ldr	r3, [r3, #0]
10001a6c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10001a70:	687b      	ldr	r3, [r7, #4]
10001a72:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
10001a76:	683b      	ldr	r3, [r7, #0]
10001a78:	430b      	orrs	r3, r1
10001a7a:	431a      	orrs	r2, r3
10001a7c:	697b      	ldr	r3, [r7, #20]
10001a7e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
10001a80:	bf00      	nop
10001a82:	371c      	adds	r7, #28
10001a84:	46bd      	mov	sp, r7
10001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
10001a8a:	4770      	bx	lr

10001a8c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
10001a8c:	b480      	push	{r7}
10001a8e:	b085      	sub	sp, #20
10001a90:	af00      	add	r7, sp, #0
10001a92:	60f8      	str	r0, [r7, #12]
10001a94:	60b9      	str	r1, [r7, #8]
10001a96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
10001a98:	68fb      	ldr	r3, [r7, #12]
10001a9a:	691b      	ldr	r3, [r3, #16]
10001a9c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
10001aa0:	68bb      	ldr	r3, [r7, #8]
10001aa2:	f003 031f 	and.w	r3, r3, #31
10001aa6:	6879      	ldr	r1, [r7, #4]
10001aa8:	fa01 f303 	lsl.w	r3, r1, r3
10001aac:	431a      	orrs	r2, r3
10001aae:	68fb      	ldr	r3, [r7, #12]
10001ab0:	611a      	str	r2, [r3, #16]
}
10001ab2:	bf00      	nop
10001ab4:	3714      	adds	r7, #20
10001ab6:	46bd      	mov	sp, r7
10001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
10001abc:	4770      	bx	lr

10001abe <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
10001abe:	b480      	push	{r7}
10001ac0:	b087      	sub	sp, #28
10001ac2:	af00      	add	r7, sp, #0
10001ac4:	60f8      	str	r0, [r7, #12]
10001ac6:	60b9      	str	r1, [r7, #8]
10001ac8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
10001aca:	68fb      	ldr	r3, [r7, #12]
10001acc:	3360      	adds	r3, #96	; 0x60
10001ace:	461a      	mov	r2, r3
10001ad0:	68bb      	ldr	r3, [r7, #8]
10001ad2:	009b      	lsls	r3, r3, #2
10001ad4:	4413      	add	r3, r2
10001ad6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
10001ad8:	697b      	ldr	r3, [r7, #20]
10001ada:	681b      	ldr	r3, [r3, #0]
10001adc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
10001ae0:	687b      	ldr	r3, [r7, #4]
10001ae2:	431a      	orrs	r2, r3
10001ae4:	697b      	ldr	r3, [r7, #20]
10001ae6:	601a      	str	r2, [r3, #0]
}
10001ae8:	bf00      	nop
10001aea:	371c      	adds	r7, #28
10001aec:	46bd      	mov	sp, r7
10001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
10001af2:	4770      	bx	lr

10001af4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
10001af4:	b480      	push	{r7}
10001af6:	b083      	sub	sp, #12
10001af8:	af00      	add	r7, sp, #0
10001afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
10001afc:	687b      	ldr	r3, [r7, #4]
10001afe:	68db      	ldr	r3, [r3, #12]
10001b00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
10001b04:	2b00      	cmp	r3, #0
10001b06:	d101      	bne.n	10001b0c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
10001b08:	2301      	movs	r3, #1
10001b0a:	e000      	b.n	10001b0e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
10001b0c:	2300      	movs	r3, #0
}
10001b0e:	4618      	mov	r0, r3
10001b10:	370c      	adds	r7, #12
10001b12:	46bd      	mov	sp, r7
10001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
10001b18:	4770      	bx	lr

10001b1a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32MP1, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
10001b1a:	b480      	push	{r7}
10001b1c:	b087      	sub	sp, #28
10001b1e:	af00      	add	r7, sp, #0
10001b20:	60f8      	str	r0, [r7, #12]
10001b22:	60b9      	str	r1, [r7, #8]
10001b24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
10001b26:	68fb      	ldr	r3, [r7, #12]
10001b28:	3330      	adds	r3, #48	; 0x30
10001b2a:	461a      	mov	r2, r3
10001b2c:	68bb      	ldr	r3, [r7, #8]
10001b2e:	0a1b      	lsrs	r3, r3, #8
10001b30:	009b      	lsls	r3, r3, #2
10001b32:	f003 030c 	and.w	r3, r3, #12
10001b36:	4413      	add	r3, r2
10001b38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
10001b3a:	697b      	ldr	r3, [r7, #20]
10001b3c:	681a      	ldr	r2, [r3, #0]
10001b3e:	68bb      	ldr	r3, [r7, #8]
10001b40:	f003 031f 	and.w	r3, r3, #31
10001b44:	211f      	movs	r1, #31
10001b46:	fa01 f303 	lsl.w	r3, r1, r3
10001b4a:	43db      	mvns	r3, r3
10001b4c:	401a      	ands	r2, r3
10001b4e:	687b      	ldr	r3, [r7, #4]
10001b50:	0e9b      	lsrs	r3, r3, #26
10001b52:	f003 011f 	and.w	r1, r3, #31
10001b56:	68bb      	ldr	r3, [r7, #8]
10001b58:	f003 031f 	and.w	r3, r3, #31
10001b5c:	fa01 f303 	lsl.w	r3, r1, r3
10001b60:	431a      	orrs	r2, r3
10001b62:	697b      	ldr	r3, [r7, #20]
10001b64:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
10001b66:	bf00      	nop
10001b68:	371c      	adds	r7, #28
10001b6a:	46bd      	mov	sp, r7
10001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
10001b70:	4770      	bx	lr

10001b72 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
10001b72:	b480      	push	{r7}
10001b74:	b087      	sub	sp, #28
10001b76:	af00      	add	r7, sp, #0
10001b78:	60f8      	str	r0, [r7, #12]
10001b7a:	60b9      	str	r1, [r7, #8]
10001b7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
10001b7e:	68fb      	ldr	r3, [r7, #12]
10001b80:	3314      	adds	r3, #20
10001b82:	461a      	mov	r2, r3
10001b84:	68bb      	ldr	r3, [r7, #8]
10001b86:	0e5b      	lsrs	r3, r3, #25
10001b88:	009b      	lsls	r3, r3, #2
10001b8a:	f003 0304 	and.w	r3, r3, #4
10001b8e:	4413      	add	r3, r2
10001b90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
10001b92:	697b      	ldr	r3, [r7, #20]
10001b94:	681a      	ldr	r2, [r3, #0]
10001b96:	68bb      	ldr	r3, [r7, #8]
10001b98:	0d1b      	lsrs	r3, r3, #20
10001b9a:	f003 031f 	and.w	r3, r3, #31
10001b9e:	2107      	movs	r1, #7
10001ba0:	fa01 f303 	lsl.w	r3, r1, r3
10001ba4:	43db      	mvns	r3, r3
10001ba6:	401a      	ands	r2, r3
10001ba8:	68bb      	ldr	r3, [r7, #8]
10001baa:	0d1b      	lsrs	r3, r3, #20
10001bac:	f003 031f 	and.w	r3, r3, #31
10001bb0:	6879      	ldr	r1, [r7, #4]
10001bb2:	fa01 f303 	lsl.w	r3, r1, r3
10001bb6:	431a      	orrs	r2, r3
10001bb8:	697b      	ldr	r3, [r7, #20]
10001bba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
10001bbc:	bf00      	nop
10001bbe:	371c      	adds	r7, #28
10001bc0:	46bd      	mov	sp, r7
10001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
10001bc6:	4770      	bx	lr

10001bc8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
10001bc8:	b480      	push	{r7}
10001bca:	b085      	sub	sp, #20
10001bcc:	af00      	add	r7, sp, #0
10001bce:	60f8      	str	r0, [r7, #12]
10001bd0:	60b9      	str	r1, [r7, #8]
10001bd2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
10001bd4:	68fb      	ldr	r3, [r7, #12]
10001bd6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
10001bda:	68bb      	ldr	r3, [r7, #8]
10001bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
10001be0:	43db      	mvns	r3, r3
10001be2:	401a      	ands	r2, r3
10001be4:	687b      	ldr	r3, [r7, #4]
10001be6:	f003 0318 	and.w	r3, r3, #24
10001bea:	4908      	ldr	r1, [pc, #32]	; (10001c0c <LL_ADC_SetChannelSingleDiff+0x44>)
10001bec:	40d9      	lsrs	r1, r3
10001bee:	68bb      	ldr	r3, [r7, #8]
10001bf0:	400b      	ands	r3, r1
10001bf2:	f3c3 0313 	ubfx	r3, r3, #0, #20
10001bf6:	431a      	orrs	r2, r3
10001bf8:	68fb      	ldr	r3, [r7, #12]
10001bfa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
10001bfe:	bf00      	nop
10001c00:	3714      	adds	r7, #20
10001c02:	46bd      	mov	sp, r7
10001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c08:	4770      	bx	lr
10001c0a:	bf00      	nop
10001c0c:	000fffff 	.word	0x000fffff

10001c10 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
10001c10:	b480      	push	{r7}
10001c12:	b083      	sub	sp, #12
10001c14:	af00      	add	r7, sp, #0
10001c16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
10001c18:	687b      	ldr	r3, [r7, #4]
10001c1a:	689b      	ldr	r3, [r3, #8]
10001c1c:	f003 031f 	and.w	r3, r3, #31
}
10001c20:	4618      	mov	r0, r3
10001c22:	370c      	adds	r7, #12
10001c24:	46bd      	mov	sp, r7
10001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c2a:	4770      	bx	lr

10001c2c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
10001c2c:	b480      	push	{r7}
10001c2e:	b083      	sub	sp, #12
10001c30:	af00      	add	r7, sp, #0
10001c32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
10001c34:	687b      	ldr	r3, [r7, #4]
10001c36:	689b      	ldr	r3, [r3, #8]
10001c38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
10001c3c:	4618      	mov	r0, r3
10001c3e:	370c      	adds	r7, #12
10001c40:	46bd      	mov	sp, r7
10001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c46:	4770      	bx	lr

10001c48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
10001c48:	b480      	push	{r7}
10001c4a:	b083      	sub	sp, #12
10001c4c:	af00      	add	r7, sp, #0
10001c4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
10001c50:	687b      	ldr	r3, [r7, #4]
10001c52:	689b      	ldr	r3, [r3, #8]
10001c54:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
10001c58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10001c5c:	687a      	ldr	r2, [r7, #4]
10001c5e:	6093      	str	r3, [r2, #8]
}
10001c60:	bf00      	nop
10001c62:	370c      	adds	r7, #12
10001c64:	46bd      	mov	sp, r7
10001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c6a:	4770      	bx	lr

10001c6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
10001c6c:	b480      	push	{r7}
10001c6e:	b083      	sub	sp, #12
10001c70:	af00      	add	r7, sp, #0
10001c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
10001c74:	687b      	ldr	r3, [r7, #4]
10001c76:	689b      	ldr	r3, [r3, #8]
10001c78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
10001c7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
10001c80:	d101      	bne.n	10001c86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
10001c82:	2301      	movs	r3, #1
10001c84:	e000      	b.n	10001c88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
10001c86:	2300      	movs	r3, #0
}
10001c88:	4618      	mov	r0, r3
10001c8a:	370c      	adds	r7, #12
10001c8c:	46bd      	mov	sp, r7
10001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c92:	4770      	bx	lr

10001c94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
10001c94:	b480      	push	{r7}
10001c96:	b083      	sub	sp, #12
10001c98:	af00      	add	r7, sp, #0
10001c9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
10001c9c:	687b      	ldr	r3, [r7, #4]
10001c9e:	689b      	ldr	r3, [r3, #8]
10001ca0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
10001ca4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10001ca8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
10001cac:	687b      	ldr	r3, [r7, #4]
10001cae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
10001cb0:	bf00      	nop
10001cb2:	370c      	adds	r7, #12
10001cb4:	46bd      	mov	sp, r7
10001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
10001cba:	4770      	bx	lr

10001cbc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
10001cbc:	b480      	push	{r7}
10001cbe:	b083      	sub	sp, #12
10001cc0:	af00      	add	r7, sp, #0
10001cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
10001cc4:	687b      	ldr	r3, [r7, #4]
10001cc6:	689b      	ldr	r3, [r3, #8]
10001cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
10001ccc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
10001cd0:	d101      	bne.n	10001cd6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
10001cd2:	2301      	movs	r3, #1
10001cd4:	e000      	b.n	10001cd8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
10001cd6:	2300      	movs	r3, #0
}
10001cd8:	4618      	mov	r0, r3
10001cda:	370c      	adds	r7, #12
10001cdc:	46bd      	mov	sp, r7
10001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
10001ce2:	4770      	bx	lr

10001ce4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
10001ce4:	b480      	push	{r7}
10001ce6:	b083      	sub	sp, #12
10001ce8:	af00      	add	r7, sp, #0
10001cea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
10001cec:	687b      	ldr	r3, [r7, #4]
10001cee:	689b      	ldr	r3, [r3, #8]
10001cf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
10001cf4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10001cf8:	f043 0201 	orr.w	r2, r3, #1
10001cfc:	687b      	ldr	r3, [r7, #4]
10001cfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
10001d00:	bf00      	nop
10001d02:	370c      	adds	r7, #12
10001d04:	46bd      	mov	sp, r7
10001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
10001d0a:	4770      	bx	lr

10001d0c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
10001d0c:	b480      	push	{r7}
10001d0e:	b083      	sub	sp, #12
10001d10:	af00      	add	r7, sp, #0
10001d12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
10001d14:	687b      	ldr	r3, [r7, #4]
10001d16:	689b      	ldr	r3, [r3, #8]
10001d18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
10001d1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10001d20:	f043 0202 	orr.w	r2, r3, #2
10001d24:	687b      	ldr	r3, [r7, #4]
10001d26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
10001d28:	bf00      	nop
10001d2a:	370c      	adds	r7, #12
10001d2c:	46bd      	mov	sp, r7
10001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001d32:	4770      	bx	lr

10001d34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
10001d34:	b480      	push	{r7}
10001d36:	b083      	sub	sp, #12
10001d38:	af00      	add	r7, sp, #0
10001d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
10001d3c:	687b      	ldr	r3, [r7, #4]
10001d3e:	689b      	ldr	r3, [r3, #8]
10001d40:	f003 0301 	and.w	r3, r3, #1
10001d44:	2b01      	cmp	r3, #1
10001d46:	d101      	bne.n	10001d4c <LL_ADC_IsEnabled+0x18>
10001d48:	2301      	movs	r3, #1
10001d4a:	e000      	b.n	10001d4e <LL_ADC_IsEnabled+0x1a>
10001d4c:	2300      	movs	r3, #0
}
10001d4e:	4618      	mov	r0, r3
10001d50:	370c      	adds	r7, #12
10001d52:	46bd      	mov	sp, r7
10001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
10001d58:	4770      	bx	lr

10001d5a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
10001d5a:	b480      	push	{r7}
10001d5c:	b083      	sub	sp, #12
10001d5e:	af00      	add	r7, sp, #0
10001d60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
10001d62:	687b      	ldr	r3, [r7, #4]
10001d64:	689b      	ldr	r3, [r3, #8]
10001d66:	f003 0302 	and.w	r3, r3, #2
10001d6a:	2b02      	cmp	r3, #2
10001d6c:	d101      	bne.n	10001d72 <LL_ADC_IsDisableOngoing+0x18>
10001d6e:	2301      	movs	r3, #1
10001d70:	e000      	b.n	10001d74 <LL_ADC_IsDisableOngoing+0x1a>
10001d72:	2300      	movs	r3, #0
}
10001d74:	4618      	mov	r0, r3
10001d76:	370c      	adds	r7, #12
10001d78:	46bd      	mov	sp, r7
10001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
10001d7e:	4770      	bx	lr

10001d80 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
10001d80:	b480      	push	{r7}
10001d82:	b083      	sub	sp, #12
10001d84:	af00      	add	r7, sp, #0
10001d86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
10001d88:	687b      	ldr	r3, [r7, #4]
10001d8a:	689b      	ldr	r3, [r3, #8]
10001d8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
10001d90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10001d94:	f043 0204 	orr.w	r2, r3, #4
10001d98:	687b      	ldr	r3, [r7, #4]
10001d9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
10001d9c:	bf00      	nop
10001d9e:	370c      	adds	r7, #12
10001da0:	46bd      	mov	sp, r7
10001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
10001da6:	4770      	bx	lr

10001da8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
10001da8:	b480      	push	{r7}
10001daa:	b083      	sub	sp, #12
10001dac:	af00      	add	r7, sp, #0
10001dae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
10001db0:	687b      	ldr	r3, [r7, #4]
10001db2:	689b      	ldr	r3, [r3, #8]
10001db4:	f003 0304 	and.w	r3, r3, #4
10001db8:	2b04      	cmp	r3, #4
10001dba:	d101      	bne.n	10001dc0 <LL_ADC_REG_IsConversionOngoing+0x18>
10001dbc:	2301      	movs	r3, #1
10001dbe:	e000      	b.n	10001dc2 <LL_ADC_REG_IsConversionOngoing+0x1a>
10001dc0:	2300      	movs	r3, #0
}
10001dc2:	4618      	mov	r0, r3
10001dc4:	370c      	adds	r7, #12
10001dc6:	46bd      	mov	sp, r7
10001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
10001dcc:	4770      	bx	lr

10001dce <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
10001dce:	b480      	push	{r7}
10001dd0:	b083      	sub	sp, #12
10001dd2:	af00      	add	r7, sp, #0
10001dd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
10001dd6:	687b      	ldr	r3, [r7, #4]
10001dd8:	689b      	ldr	r3, [r3, #8]
10001dda:	f003 0308 	and.w	r3, r3, #8
10001dde:	2b08      	cmp	r3, #8
10001de0:	d101      	bne.n	10001de6 <LL_ADC_INJ_IsConversionOngoing+0x18>
10001de2:	2301      	movs	r3, #1
10001de4:	e000      	b.n	10001de8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
10001de6:	2300      	movs	r3, #0
}
10001de8:	4618      	mov	r0, r3
10001dea:	370c      	adds	r7, #12
10001dec:	46bd      	mov	sp, r7
10001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
10001df2:	4770      	bx	lr

10001df4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
10001df4:	b590      	push	{r4, r7, lr}
10001df6:	b089      	sub	sp, #36	; 0x24
10001df8:	af00      	add	r7, sp, #0
10001dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
10001dfc:	2300      	movs	r3, #0
10001dfe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
10001e00:	2300      	movs	r3, #0
10001e02:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
10001e04:	687b      	ldr	r3, [r7, #4]
10001e06:	2b00      	cmp	r3, #0
10001e08:	d101      	bne.n	10001e0e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
10001e0a:	2301      	movs	r3, #1
10001e0c:	e13a      	b.n	10002084 <HAL_ADC_Init+0x290>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
10001e0e:	687b      	ldr	r3, [r7, #4]
10001e10:	68db      	ldr	r3, [r3, #12]
10001e12:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
10001e14:	687b      	ldr	r3, [r7, #4]
10001e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001e18:	2b00      	cmp	r3, #0
10001e1a:	d109      	bne.n	10001e30 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
10001e1c:	6878      	ldr	r0, [r7, #4]
10001e1e:	f7ff fb1f 	bl	10001460 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
10001e22:	687b      	ldr	r3, [r7, #4]
10001e24:	2200      	movs	r2, #0
10001e26:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
10001e28:	687b      	ldr	r3, [r7, #4]
10001e2a:	2200      	movs	r2, #0
10001e2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
10001e30:	687b      	ldr	r3, [r7, #4]
10001e32:	681b      	ldr	r3, [r3, #0]
10001e34:	4618      	mov	r0, r3
10001e36:	f7ff ff19 	bl	10001c6c <LL_ADC_IsDeepPowerDownEnabled>
10001e3a:	4603      	mov	r3, r0
10001e3c:	2b00      	cmp	r3, #0
10001e3e:	d004      	beq.n	10001e4a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
10001e40:	687b      	ldr	r3, [r7, #4]
10001e42:	681b      	ldr	r3, [r3, #0]
10001e44:	4618      	mov	r0, r3
10001e46:	f7ff feff 	bl	10001c48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
10001e4a:	687b      	ldr	r3, [r7, #4]
10001e4c:	681b      	ldr	r3, [r3, #0]
10001e4e:	4618      	mov	r0, r3
10001e50:	f7ff ff34 	bl	10001cbc <LL_ADC_IsInternalRegulatorEnabled>
10001e54:	4603      	mov	r3, r0
10001e56:	2b00      	cmp	r3, #0
10001e58:	d114      	bne.n	10001e84 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
10001e5a:	687b      	ldr	r3, [r7, #4]
10001e5c:	681b      	ldr	r3, [r3, #0]
10001e5e:	4618      	mov	r0, r3
10001e60:	f7ff ff18 	bl	10001c94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
10001e64:	4b89      	ldr	r3, [pc, #548]	; (1000208c <HAL_ADC_Init+0x298>)
10001e66:	681b      	ldr	r3, [r3, #0]
10001e68:	099b      	lsrs	r3, r3, #6
10001e6a:	4a89      	ldr	r2, [pc, #548]	; (10002090 <HAL_ADC_Init+0x29c>)
10001e6c:	fba2 2303 	umull	r2, r3, r2, r3
10001e70:	099b      	lsrs	r3, r3, #6
10001e72:	3301      	adds	r3, #1
10001e74:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
10001e76:	e002      	b.n	10001e7e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
10001e78:	68bb      	ldr	r3, [r7, #8]
10001e7a:	3b01      	subs	r3, #1
10001e7c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
10001e7e:	68bb      	ldr	r3, [r7, #8]
10001e80:	2b00      	cmp	r3, #0
10001e82:	d1f9      	bne.n	10001e78 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
10001e84:	687b      	ldr	r3, [r7, #4]
10001e86:	681b      	ldr	r3, [r3, #0]
10001e88:	4618      	mov	r0, r3
10001e8a:	f7ff ff17 	bl	10001cbc <LL_ADC_IsInternalRegulatorEnabled>
10001e8e:	4603      	mov	r3, r0
10001e90:	2b00      	cmp	r3, #0
10001e92:	d10d      	bne.n	10001eb0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10001e94:	687b      	ldr	r3, [r7, #4]
10001e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001e98:	f043 0210 	orr.w	r2, r3, #16
10001e9c:	687b      	ldr	r3, [r7, #4]
10001e9e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
10001ea0:	687b      	ldr	r3, [r7, #4]
10001ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10001ea4:	f043 0201 	orr.w	r2, r3, #1
10001ea8:	687b      	ldr	r3, [r7, #4]
10001eaa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
10001eac:	2301      	movs	r3, #1
10001eae:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
10001eb0:	687b      	ldr	r3, [r7, #4]
10001eb2:	681b      	ldr	r3, [r3, #0]
10001eb4:	4618      	mov	r0, r3
10001eb6:	f7ff ff77 	bl	10001da8 <LL_ADC_REG_IsConversionOngoing>
10001eba:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
10001ebc:	687b      	ldr	r3, [r7, #4]
10001ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001ec0:	f003 0310 	and.w	r3, r3, #16
10001ec4:	2b00      	cmp	r3, #0
10001ec6:	f040 80d4 	bne.w	10002072 <HAL_ADC_Init+0x27e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
10001eca:	697b      	ldr	r3, [r7, #20]
10001ecc:	2b00      	cmp	r3, #0
10001ece:	f040 80d0 	bne.w	10002072 <HAL_ADC_Init+0x27e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
10001ed2:	687b      	ldr	r3, [r7, #4]
10001ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001ed6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
10001eda:	f043 0202 	orr.w	r2, r3, #2
10001ede:	687b      	ldr	r3, [r7, #4]
10001ee0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
10001ee2:	687b      	ldr	r3, [r7, #4]
10001ee4:	681b      	ldr	r3, [r3, #0]
10001ee6:	4618      	mov	r0, r3
10001ee8:	f7ff ff24 	bl	10001d34 <LL_ADC_IsEnabled>
10001eec:	4603      	mov	r3, r0
10001eee:	2b00      	cmp	r3, #0
10001ef0:	d110      	bne.n	10001f14 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
10001ef2:	4868      	ldr	r0, [pc, #416]	; (10002094 <HAL_ADC_Init+0x2a0>)
10001ef4:	f7ff ff1e 	bl	10001d34 <LL_ADC_IsEnabled>
10001ef8:	4604      	mov	r4, r0
10001efa:	4867      	ldr	r0, [pc, #412]	; (10002098 <HAL_ADC_Init+0x2a4>)
10001efc:	f7ff ff1a 	bl	10001d34 <LL_ADC_IsEnabled>
10001f00:	4603      	mov	r3, r0
10001f02:	4323      	orrs	r3, r4
10001f04:	2b00      	cmp	r3, #0
10001f06:	d105      	bne.n	10001f14 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
10001f08:	687b      	ldr	r3, [r7, #4]
10001f0a:	685b      	ldr	r3, [r3, #4]
10001f0c:	4619      	mov	r1, r3
10001f0e:	4863      	ldr	r0, [pc, #396]	; (1000209c <HAL_ADC_Init+0x2a8>)
10001f10:	f7ff fd58 	bl	100019c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
10001f14:	687b      	ldr	r3, [r7, #4]
10001f16:	7d5b      	ldrb	r3, [r3, #21]
10001f18:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
10001f1a:	687b      	ldr	r3, [r7, #4]
10001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
10001f1e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
10001f20:	687b      	ldr	r3, [r7, #4]
10001f22:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                     |
10001f24:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
10001f26:	687b      	ldr	r3, [r7, #4]
10001f28:	7f1b      	ldrb	r3, [r3, #28]
10001f2a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
10001f2c:	4313      	orrs	r3, r2
10001f2e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
10001f30:	687b      	ldr	r3, [r7, #4]
10001f32:	7f1b      	ldrb	r3, [r3, #28]
10001f34:	2b01      	cmp	r3, #1
10001f36:	d106      	bne.n	10001f46 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
10001f38:	687b      	ldr	r3, [r7, #4]
10001f3a:	6a1b      	ldr	r3, [r3, #32]
10001f3c:	3b01      	subs	r3, #1
10001f3e:	045b      	lsls	r3, r3, #17
10001f40:	69ba      	ldr	r2, [r7, #24]
10001f42:	4313      	orrs	r3, r2
10001f44:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
10001f46:	687b      	ldr	r3, [r7, #4]
10001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001f4a:	2b00      	cmp	r3, #0
10001f4c:	d009      	beq.n	10001f62 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
10001f4e:	687b      	ldr	r3, [r7, #4]
10001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001f52:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
10001f56:	687b      	ldr	r3, [r7, #4]
10001f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001f5a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
10001f5c:	69ba      	ldr	r2, [r7, #24]
10001f5e:	4313      	orrs	r3, r2
10001f60:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
10001f62:	687b      	ldr	r3, [r7, #4]
10001f64:	681b      	ldr	r3, [r3, #0]
10001f66:	68da      	ldr	r2, [r3, #12]
10001f68:	4b4d      	ldr	r3, [pc, #308]	; (100020a0 <HAL_ADC_Init+0x2ac>)
10001f6a:	4013      	ands	r3, r2
10001f6c:	687a      	ldr	r2, [r7, #4]
10001f6e:	6812      	ldr	r2, [r2, #0]
10001f70:	69b9      	ldr	r1, [r7, #24]
10001f72:	430b      	orrs	r3, r1
10001f74:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
10001f76:	687b      	ldr	r3, [r7, #4]
10001f78:	681b      	ldr	r3, [r3, #0]
10001f7a:	4618      	mov	r0, r3
10001f7c:	f7ff ff14 	bl	10001da8 <LL_ADC_REG_IsConversionOngoing>
10001f80:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
10001f82:	687b      	ldr	r3, [r7, #4]
10001f84:	681b      	ldr	r3, [r3, #0]
10001f86:	4618      	mov	r0, r3
10001f88:	f7ff ff21 	bl	10001dce <LL_ADC_INJ_IsConversionOngoing>
10001f8c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
10001f8e:	693b      	ldr	r3, [r7, #16]
10001f90:	2b00      	cmp	r3, #0
10001f92:	d14c      	bne.n	1000202e <HAL_ADC_Init+0x23a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
10001f94:	68fb      	ldr	r3, [r7, #12]
10001f96:	2b00      	cmp	r3, #0
10001f98:	d149      	bne.n	1000202e <HAL_ADC_Init+0x23a>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
10001f9a:	687b      	ldr	r3, [r7, #4]
10001f9c:	7d1b      	ldrb	r3, [r3, #20]
10001f9e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
10001fa0:	687b      	ldr	r3, [r7, #4]
10001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
10001fa4:	4313      	orrs	r3, r2
10001fa6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
10001fa8:	687b      	ldr	r3, [r7, #4]
10001faa:	681b      	ldr	r3, [r3, #0]
10001fac:	68db      	ldr	r3, [r3, #12]
10001fae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
10001fb2:	f023 0303 	bic.w	r3, r3, #3
10001fb6:	687a      	ldr	r2, [r7, #4]
10001fb8:	6812      	ldr	r2, [r2, #0]
10001fba:	69b9      	ldr	r1, [r7, #24]
10001fbc:	430b      	orrs	r3, r1
10001fbe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
10001fc0:	687b      	ldr	r3, [r7, #4]
10001fc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
10001fc6:	2b01      	cmp	r3, #1
10001fc8:	d11b      	bne.n	10002002 <HAL_ADC_Init+0x20e>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
10001fca:	687b      	ldr	r3, [r7, #4]
10001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001fce:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
10001fd0:	687b      	ldr	r3, [r7, #4]
10001fd2:	681b      	ldr	r3, [r3, #0]
10001fd4:	691a      	ldr	r2, [r3, #16]
10001fd6:	4b33      	ldr	r3, [pc, #204]	; (100020a4 <HAL_ADC_Init+0x2b0>)
10001fd8:	4013      	ands	r3, r2
10001fda:	687a      	ldr	r2, [r7, #4]
10001fdc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
10001fde:	3a01      	subs	r2, #1
10001fe0:	0411      	lsls	r1, r2, #16
10001fe2:	687a      	ldr	r2, [r7, #4]
10001fe4:	6c12      	ldr	r2, [r2, #64]	; 0x40
10001fe6:	4311      	orrs	r1, r2
10001fe8:	687a      	ldr	r2, [r7, #4]
10001fea:	6c52      	ldr	r2, [r2, #68]	; 0x44
10001fec:	4311      	orrs	r1, r2
10001fee:	687a      	ldr	r2, [r7, #4]
10001ff0:	6c92      	ldr	r2, [r2, #72]	; 0x48
10001ff2:	430a      	orrs	r2, r1
10001ff4:	431a      	orrs	r2, r3
10001ff6:	687b      	ldr	r3, [r7, #4]
10001ff8:	681b      	ldr	r3, [r3, #0]
10001ffa:	f042 0201 	orr.w	r2, r2, #1
10001ffe:	611a      	str	r2, [r3, #16]
10002000:	e007      	b.n	10002012 <HAL_ADC_Init+0x21e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
10002002:	687b      	ldr	r3, [r7, #4]
10002004:	681b      	ldr	r3, [r3, #0]
10002006:	691a      	ldr	r2, [r3, #16]
10002008:	687b      	ldr	r3, [r7, #4]
1000200a:	681b      	ldr	r3, [r3, #0]
1000200c:	f022 0201 	bic.w	r2, r2, #1
10002010:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
10002012:	687b      	ldr	r3, [r7, #4]
10002014:	681b      	ldr	r3, [r3, #0]
10002016:	691b      	ldr	r3, [r3, #16]
10002018:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
1000201c:	687b      	ldr	r3, [r7, #4]
1000201e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10002020:	687b      	ldr	r3, [r7, #4]
10002022:	681b      	ldr	r3, [r3, #0]
10002024:	430a      	orrs	r2, r1
10002026:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
10002028:	6878      	ldr	r0, [r7, #4]
1000202a:	f000 fdb9 	bl	10002ba0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
1000202e:	687b      	ldr	r3, [r7, #4]
10002030:	68db      	ldr	r3, [r3, #12]
10002032:	2b01      	cmp	r3, #1
10002034:	d10c      	bne.n	10002050 <HAL_ADC_Init+0x25c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
10002036:	687b      	ldr	r3, [r7, #4]
10002038:	681b      	ldr	r3, [r3, #0]
1000203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000203c:	f023 010f 	bic.w	r1, r3, #15
10002040:	687b      	ldr	r3, [r7, #4]
10002042:	699b      	ldr	r3, [r3, #24]
10002044:	1e5a      	subs	r2, r3, #1
10002046:	687b      	ldr	r3, [r7, #4]
10002048:	681b      	ldr	r3, [r3, #0]
1000204a:	430a      	orrs	r2, r1
1000204c:	631a      	str	r2, [r3, #48]	; 0x30
1000204e:	e007      	b.n	10002060 <HAL_ADC_Init+0x26c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
10002050:	687b      	ldr	r3, [r7, #4]
10002052:	681b      	ldr	r3, [r3, #0]
10002054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
10002056:	687b      	ldr	r3, [r7, #4]
10002058:	681b      	ldr	r3, [r3, #0]
1000205a:	f022 020f 	bic.w	r2, r2, #15
1000205e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
10002060:	687b      	ldr	r3, [r7, #4]
10002062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002064:	f023 0303 	bic.w	r3, r3, #3
10002068:	f043 0201 	orr.w	r2, r3, #1
1000206c:	687b      	ldr	r3, [r7, #4]
1000206e:	655a      	str	r2, [r3, #84]	; 0x54
10002070:	e007      	b.n	10002082 <HAL_ADC_Init+0x28e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10002072:	687b      	ldr	r3, [r7, #4]
10002074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002076:	f043 0210 	orr.w	r2, r3, #16
1000207a:	687b      	ldr	r3, [r7, #4]
1000207c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
1000207e:	2301      	movs	r3, #1
10002080:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
10002082:	7ffb      	ldrb	r3, [r7, #31]
}
10002084:	4618      	mov	r0, r3
10002086:	3724      	adds	r7, #36	; 0x24
10002088:	46bd      	mov	sp, r7
1000208a:	bd90      	pop	{r4, r7, pc}
1000208c:	10020000 	.word	0x10020000
10002090:	053e2d63 	.word	0x053e2d63
10002094:	48003000 	.word	0x48003000
10002098:	48003100 	.word	0x48003100
1000209c:	48003300 	.word	0x48003300
100020a0:	fff0c003 	.word	0xfff0c003
100020a4:	fc00f81e 	.word	0xfc00f81e

100020a8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
100020a8:	b580      	push	{r7, lr}
100020aa:	b086      	sub	sp, #24
100020ac:	af00      	add	r7, sp, #0
100020ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
100020b0:	4857      	ldr	r0, [pc, #348]	; (10002210 <HAL_ADC_Start+0x168>)
100020b2:	f7ff fdad 	bl	10001c10 <LL_ADC_GetMultimode>
100020b6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
100020b8:	687b      	ldr	r3, [r7, #4]
100020ba:	681b      	ldr	r3, [r3, #0]
100020bc:	4618      	mov	r0, r3
100020be:	f7ff fe73 	bl	10001da8 <LL_ADC_REG_IsConversionOngoing>
100020c2:	4603      	mov	r3, r0
100020c4:	2b00      	cmp	r3, #0
100020c6:	f040 809c 	bne.w	10002202 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
100020ca:	687b      	ldr	r3, [r7, #4]
100020cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
100020d0:	2b01      	cmp	r3, #1
100020d2:	d101      	bne.n	100020d8 <HAL_ADC_Start+0x30>
100020d4:	2302      	movs	r3, #2
100020d6:	e097      	b.n	10002208 <HAL_ADC_Start+0x160>
100020d8:	687b      	ldr	r3, [r7, #4]
100020da:	2201      	movs	r2, #1
100020dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
100020e0:	6878      	ldr	r0, [r7, #4]
100020e2:	f000 fc81 	bl	100029e8 <ADC_Enable>
100020e6:	4603      	mov	r3, r0
100020e8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
100020ea:	7dfb      	ldrb	r3, [r7, #23]
100020ec:	2b00      	cmp	r3, #0
100020ee:	f040 8083 	bne.w	100021f8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
100020f2:	687b      	ldr	r3, [r7, #4]
100020f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100020f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
100020fa:	f023 0301 	bic.w	r3, r3, #1
100020fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
10002102:	687b      	ldr	r3, [r7, #4]
10002104:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
10002106:	687b      	ldr	r3, [r7, #4]
10002108:	681b      	ldr	r3, [r3, #0]
1000210a:	4a42      	ldr	r2, [pc, #264]	; (10002214 <HAL_ADC_Start+0x16c>)
1000210c:	4293      	cmp	r3, r2
1000210e:	d002      	beq.n	10002116 <HAL_ADC_Start+0x6e>
10002110:	687b      	ldr	r3, [r7, #4]
10002112:	681b      	ldr	r3, [r3, #0]
10002114:	e000      	b.n	10002118 <HAL_ADC_Start+0x70>
10002116:	4b40      	ldr	r3, [pc, #256]	; (10002218 <HAL_ADC_Start+0x170>)
10002118:	687a      	ldr	r2, [r7, #4]
1000211a:	6812      	ldr	r2, [r2, #0]
1000211c:	4293      	cmp	r3, r2
1000211e:	d002      	beq.n	10002126 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
10002120:	693b      	ldr	r3, [r7, #16]
10002122:	2b00      	cmp	r3, #0
10002124:	d105      	bne.n	10002132 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
10002126:	687b      	ldr	r3, [r7, #4]
10002128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000212a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
1000212e:	687b      	ldr	r3, [r7, #4]
10002130:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
10002132:	687b      	ldr	r3, [r7, #4]
10002134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002136:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
1000213a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
1000213e:	d106      	bne.n	1000214e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
10002140:	687b      	ldr	r3, [r7, #4]
10002142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10002144:	f023 0206 	bic.w	r2, r3, #6
10002148:	687b      	ldr	r3, [r7, #4]
1000214a:	659a      	str	r2, [r3, #88]	; 0x58
1000214c:	e002      	b.n	10002154 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
1000214e:	687b      	ldr	r3, [r7, #4]
10002150:	2200      	movs	r2, #0
10002152:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
10002154:	687b      	ldr	r3, [r7, #4]
10002156:	681b      	ldr	r3, [r3, #0]
10002158:	221c      	movs	r2, #28
1000215a:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
1000215c:	687b      	ldr	r3, [r7, #4]
1000215e:	2200      	movs	r2, #0
10002160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
10002164:	687b      	ldr	r3, [r7, #4]
10002166:	681b      	ldr	r3, [r3, #0]
10002168:	4a2a      	ldr	r2, [pc, #168]	; (10002214 <HAL_ADC_Start+0x16c>)
1000216a:	4293      	cmp	r3, r2
1000216c:	d002      	beq.n	10002174 <HAL_ADC_Start+0xcc>
1000216e:	687b      	ldr	r3, [r7, #4]
10002170:	681b      	ldr	r3, [r3, #0]
10002172:	e000      	b.n	10002176 <HAL_ADC_Start+0xce>
10002174:	4b28      	ldr	r3, [pc, #160]	; (10002218 <HAL_ADC_Start+0x170>)
10002176:	687a      	ldr	r2, [r7, #4]
10002178:	6812      	ldr	r2, [r2, #0]
1000217a:	4293      	cmp	r3, r2
1000217c:	d008      	beq.n	10002190 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
1000217e:	693b      	ldr	r3, [r7, #16]
10002180:	2b00      	cmp	r3, #0
10002182:	d005      	beq.n	10002190 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
10002184:	693b      	ldr	r3, [r7, #16]
10002186:	2b05      	cmp	r3, #5
10002188:	d002      	beq.n	10002190 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
1000218a:	693b      	ldr	r3, [r7, #16]
1000218c:	2b09      	cmp	r3, #9
1000218e:	d114      	bne.n	100021ba <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
10002190:	687b      	ldr	r3, [r7, #4]
10002192:	681b      	ldr	r3, [r3, #0]
10002194:	68db      	ldr	r3, [r3, #12]
10002196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
1000219a:	2b00      	cmp	r3, #0
1000219c:	d007      	beq.n	100021ae <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
1000219e:	687b      	ldr	r3, [r7, #4]
100021a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100021a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
100021a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
100021aa:	687b      	ldr	r3, [r7, #4]
100021ac:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
100021ae:	687b      	ldr	r3, [r7, #4]
100021b0:	681b      	ldr	r3, [r3, #0]
100021b2:	4618      	mov	r0, r3
100021b4:	f7ff fde4 	bl	10001d80 <LL_ADC_REG_StartConversion>
100021b8:	e025      	b.n	10002206 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
100021ba:	687b      	ldr	r3, [r7, #4]
100021bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100021be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
100021c2:	687b      	ldr	r3, [r7, #4]
100021c4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
100021c6:	687b      	ldr	r3, [r7, #4]
100021c8:	681b      	ldr	r3, [r3, #0]
100021ca:	4a12      	ldr	r2, [pc, #72]	; (10002214 <HAL_ADC_Start+0x16c>)
100021cc:	4293      	cmp	r3, r2
100021ce:	d002      	beq.n	100021d6 <HAL_ADC_Start+0x12e>
100021d0:	687b      	ldr	r3, [r7, #4]
100021d2:	681b      	ldr	r3, [r3, #0]
100021d4:	e000      	b.n	100021d8 <HAL_ADC_Start+0x130>
100021d6:	4b10      	ldr	r3, [pc, #64]	; (10002218 <HAL_ADC_Start+0x170>)
100021d8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
100021da:	68fb      	ldr	r3, [r7, #12]
100021dc:	68db      	ldr	r3, [r3, #12]
100021de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
100021e2:	2b00      	cmp	r3, #0
100021e4:	d00f      	beq.n	10002206 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
100021e6:	687b      	ldr	r3, [r7, #4]
100021e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100021ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
100021ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
100021f2:	687b      	ldr	r3, [r7, #4]
100021f4:	655a      	str	r2, [r3, #84]	; 0x54
100021f6:	e006      	b.n	10002206 <HAL_ADC_Start+0x15e>
      LL_ADC_REG_StartConversion(hadc->Instance);
#endif
    }
    else
    {
      __HAL_UNLOCK(hadc);
100021f8:	687b      	ldr	r3, [r7, #4]
100021fa:	2200      	movs	r2, #0
100021fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
10002200:	e001      	b.n	10002206 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
10002202:	2302      	movs	r3, #2
10002204:	75fb      	strb	r3, [r7, #23]
  }

  return tmp_hal_status;
10002206:	7dfb      	ldrb	r3, [r7, #23]
}
10002208:	4618      	mov	r0, r3
1000220a:	3718      	adds	r7, #24
1000220c:	46bd      	mov	sp, r7
1000220e:	bd80      	pop	{r7, pc}
10002210:	48003300 	.word	0x48003300
10002214:	48003100 	.word	0x48003100
10002218:	48003000 	.word	0x48003000

1000221c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
1000221c:	b580      	push	{r7, lr}
1000221e:	b088      	sub	sp, #32
10002220:	af00      	add	r7, sp, #0
10002222:	6078      	str	r0, [r7, #4]
10002224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
10002226:	4866      	ldr	r0, [pc, #408]	; (100023c0 <HAL_ADC_PollForConversion+0x1a4>)
10002228:	f7ff fcf2 	bl	10001c10 <LL_ADC_GetMultimode>
1000222c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
1000222e:	687b      	ldr	r3, [r7, #4]
10002230:	691b      	ldr	r3, [r3, #16]
10002232:	2b08      	cmp	r3, #8
10002234:	d102      	bne.n	1000223c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
10002236:	2308      	movs	r3, #8
10002238:	61fb      	str	r3, [r7, #28]
1000223a:	e02a      	b.n	10002292 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
1000223c:	697b      	ldr	r3, [r7, #20]
1000223e:	2b00      	cmp	r3, #0
10002240:	d005      	beq.n	1000224e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
10002242:	697b      	ldr	r3, [r7, #20]
10002244:	2b05      	cmp	r3, #5
10002246:	d002      	beq.n	1000224e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
10002248:	697b      	ldr	r3, [r7, #20]
1000224a:	2b09      	cmp	r3, #9
1000224c:	d111      	bne.n	10002272 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
1000224e:	687b      	ldr	r3, [r7, #4]
10002250:	681b      	ldr	r3, [r3, #0]
10002252:	68db      	ldr	r3, [r3, #12]
10002254:	f003 0301 	and.w	r3, r3, #1
10002258:	2b00      	cmp	r3, #0
1000225a:	d007      	beq.n	1000226c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1000225c:	687b      	ldr	r3, [r7, #4]
1000225e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002260:	f043 0220 	orr.w	r2, r3, #32
10002264:	687b      	ldr	r3, [r7, #4]
10002266:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
10002268:	2301      	movs	r3, #1
1000226a:	e0a4      	b.n	100023b6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
1000226c:	2304      	movs	r3, #4
1000226e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
10002270:	e00f      	b.n	10002292 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
10002272:	4853      	ldr	r0, [pc, #332]	; (100023c0 <HAL_ADC_PollForConversion+0x1a4>)
10002274:	f7ff fcda 	bl	10001c2c <LL_ADC_GetMultiDMATransfer>
10002278:	4603      	mov	r3, r0
1000227a:	2b00      	cmp	r3, #0
1000227c:	d007      	beq.n	1000228e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1000227e:	687b      	ldr	r3, [r7, #4]
10002280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002282:	f043 0220 	orr.w	r2, r3, #32
10002286:	687b      	ldr	r3, [r7, #4]
10002288:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
1000228a:	2301      	movs	r3, #1
1000228c:	e093      	b.n	100023b6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
1000228e:	2304      	movs	r3, #4
10002290:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
10002292:	f7ff fb19 	bl	100018c8 <HAL_GetTick>
10002296:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
10002298:	e021      	b.n	100022de <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
1000229a:	683b      	ldr	r3, [r7, #0]
1000229c:	f1b3 3fff 	cmp.w	r3, #4294967295
100022a0:	d01d      	beq.n	100022de <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
100022a2:	f7ff fb11 	bl	100018c8 <HAL_GetTick>
100022a6:	4602      	mov	r2, r0
100022a8:	693b      	ldr	r3, [r7, #16]
100022aa:	1ad3      	subs	r3, r2, r3
100022ac:	683a      	ldr	r2, [r7, #0]
100022ae:	429a      	cmp	r2, r3
100022b0:	d302      	bcc.n	100022b8 <HAL_ADC_PollForConversion+0x9c>
100022b2:	683b      	ldr	r3, [r7, #0]
100022b4:	2b00      	cmp	r3, #0
100022b6:	d112      	bne.n	100022de <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
100022b8:	687b      	ldr	r3, [r7, #4]
100022ba:	681b      	ldr	r3, [r3, #0]
100022bc:	681a      	ldr	r2, [r3, #0]
100022be:	69fb      	ldr	r3, [r7, #28]
100022c0:	4013      	ands	r3, r2
100022c2:	2b00      	cmp	r3, #0
100022c4:	d10b      	bne.n	100022de <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
100022c6:	687b      	ldr	r3, [r7, #4]
100022c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100022ca:	f043 0204 	orr.w	r2, r3, #4
100022ce:	687b      	ldr	r3, [r7, #4]
100022d0:	655a      	str	r2, [r3, #84]	; 0x54

          __HAL_UNLOCK(hadc);
100022d2:	687b      	ldr	r3, [r7, #4]
100022d4:	2200      	movs	r2, #0
100022d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
100022da:	2303      	movs	r3, #3
100022dc:	e06b      	b.n	100023b6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
100022de:	687b      	ldr	r3, [r7, #4]
100022e0:	681b      	ldr	r3, [r3, #0]
100022e2:	681a      	ldr	r2, [r3, #0]
100022e4:	69fb      	ldr	r3, [r7, #28]
100022e6:	4013      	ands	r3, r2
100022e8:	2b00      	cmp	r3, #0
100022ea:	d0d6      	beq.n	1000229a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
100022ec:	687b      	ldr	r3, [r7, #4]
100022ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100022f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
100022f4:	687b      	ldr	r3, [r7, #4]
100022f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
100022f8:	687b      	ldr	r3, [r7, #4]
100022fa:	681b      	ldr	r3, [r3, #0]
100022fc:	4618      	mov	r0, r3
100022fe:	f7ff fbf9 	bl	10001af4 <LL_ADC_REG_IsTriggerSourceSWStart>
10002302:	4603      	mov	r3, r0
10002304:	2b00      	cmp	r3, #0
10002306:	d01c      	beq.n	10002342 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
10002308:	687b      	ldr	r3, [r7, #4]
1000230a:	7d5b      	ldrb	r3, [r3, #21]
1000230c:	2b00      	cmp	r3, #0
1000230e:	d118      	bne.n	10002342 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
10002310:	687b      	ldr	r3, [r7, #4]
10002312:	681b      	ldr	r3, [r3, #0]
10002314:	681b      	ldr	r3, [r3, #0]
10002316:	f003 0308 	and.w	r3, r3, #8
1000231a:	2b08      	cmp	r3, #8
1000231c:	d111      	bne.n	10002342 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
1000231e:	687b      	ldr	r3, [r7, #4]
10002320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002322:	f423 7280 	bic.w	r2, r3, #256	; 0x100
10002326:	687b      	ldr	r3, [r7, #4]
10002328:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
1000232a:	687b      	ldr	r3, [r7, #4]
1000232c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000232e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
10002332:	2b00      	cmp	r3, #0
10002334:	d105      	bne.n	10002342 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
10002336:	687b      	ldr	r3, [r7, #4]
10002338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000233a:	f043 0201 	orr.w	r2, r3, #1
1000233e:	687b      	ldr	r3, [r7, #4]
10002340:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
10002342:	687b      	ldr	r3, [r7, #4]
10002344:	681b      	ldr	r3, [r3, #0]
10002346:	4a1f      	ldr	r2, [pc, #124]	; (100023c4 <HAL_ADC_PollForConversion+0x1a8>)
10002348:	4293      	cmp	r3, r2
1000234a:	d002      	beq.n	10002352 <HAL_ADC_PollForConversion+0x136>
1000234c:	687b      	ldr	r3, [r7, #4]
1000234e:	681b      	ldr	r3, [r3, #0]
10002350:	e000      	b.n	10002354 <HAL_ADC_PollForConversion+0x138>
10002352:	4b1d      	ldr	r3, [pc, #116]	; (100023c8 <HAL_ADC_PollForConversion+0x1ac>)
10002354:	687a      	ldr	r2, [r7, #4]
10002356:	6812      	ldr	r2, [r2, #0]
10002358:	4293      	cmp	r3, r2
1000235a:	d008      	beq.n	1000236e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
1000235c:	697b      	ldr	r3, [r7, #20]
1000235e:	2b00      	cmp	r3, #0
10002360:	d005      	beq.n	1000236e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
10002362:	697b      	ldr	r3, [r7, #20]
10002364:	2b05      	cmp	r3, #5
10002366:	d002      	beq.n	1000236e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
10002368:	697b      	ldr	r3, [r7, #20]
1000236a:	2b09      	cmp	r3, #9
1000236c:	d104      	bne.n	10002378 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
1000236e:	687b      	ldr	r3, [r7, #4]
10002370:	681b      	ldr	r3, [r3, #0]
10002372:	68db      	ldr	r3, [r3, #12]
10002374:	61bb      	str	r3, [r7, #24]
10002376:	e00c      	b.n	10002392 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
10002378:	687b      	ldr	r3, [r7, #4]
1000237a:	681b      	ldr	r3, [r3, #0]
1000237c:	4a11      	ldr	r2, [pc, #68]	; (100023c4 <HAL_ADC_PollForConversion+0x1a8>)
1000237e:	4293      	cmp	r3, r2
10002380:	d002      	beq.n	10002388 <HAL_ADC_PollForConversion+0x16c>
10002382:	687b      	ldr	r3, [r7, #4]
10002384:	681b      	ldr	r3, [r3, #0]
10002386:	e000      	b.n	1000238a <HAL_ADC_PollForConversion+0x16e>
10002388:	4b0f      	ldr	r3, [pc, #60]	; (100023c8 <HAL_ADC_PollForConversion+0x1ac>)
1000238a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
1000238c:	68fb      	ldr	r3, [r7, #12]
1000238e:	68db      	ldr	r3, [r3, #12]
10002390:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
10002392:	69fb      	ldr	r3, [r7, #28]
10002394:	2b08      	cmp	r3, #8
10002396:	d104      	bne.n	100023a2 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
10002398:	687b      	ldr	r3, [r7, #4]
1000239a:	681b      	ldr	r3, [r3, #0]
1000239c:	2208      	movs	r2, #8
1000239e:	601a      	str	r2, [r3, #0]
100023a0:	e008      	b.n	100023b4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
100023a2:	69bb      	ldr	r3, [r7, #24]
100023a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
100023a8:	2b00      	cmp	r3, #0
100023aa:	d103      	bne.n	100023b4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
100023ac:	687b      	ldr	r3, [r7, #4]
100023ae:	681b      	ldr	r3, [r3, #0]
100023b0:	220c      	movs	r2, #12
100023b2:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
100023b4:	2300      	movs	r3, #0
}
100023b6:	4618      	mov	r0, r3
100023b8:	3720      	adds	r7, #32
100023ba:	46bd      	mov	sp, r7
100023bc:	bd80      	pop	{r7, pc}
100023be:	bf00      	nop
100023c0:	48003300 	.word	0x48003300
100023c4:	48003100 	.word	0x48003100
100023c8:	48003000 	.word	0x48003000

100023cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
100023cc:	b480      	push	{r7}
100023ce:	b083      	sub	sp, #12
100023d0:	af00      	add	r7, sp, #0
100023d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
100023d4:	687b      	ldr	r3, [r7, #4]
100023d6:	681b      	ldr	r3, [r3, #0]
100023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
100023da:	4618      	mov	r0, r3
100023dc:	370c      	adds	r7, #12
100023de:	46bd      	mov	sp, r7
100023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
100023e4:	4770      	bx	lr
	...

100023e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
100023e8:	b590      	push	{r4, r7, lr}
100023ea:	b0a1      	sub	sp, #132	; 0x84
100023ec:	af00      	add	r7, sp, #0
100023ee:	6078      	str	r0, [r7, #4]
100023f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
100023f2:	2300      	movs	r3, #0
100023f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
100023f8:	2300      	movs	r3, #0
100023fa:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((pConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (pConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
100023fc:	683b      	ldr	r3, [r7, #0]
100023fe:	68db      	ldr	r3, [r3, #12]
10002400:	4a9a      	ldr	r2, [pc, #616]	; (1000266c <HAL_ADC_ConfigChannel+0x284>)
10002402:	4293      	cmp	r3, r2
      assert_param(IS_ADC2_DIFF_CHANNEL(pConfig->Channel));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
10002404:	687b      	ldr	r3, [r7, #4]
10002406:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
1000240a:	2b01      	cmp	r3, #1
1000240c:	d101      	bne.n	10002412 <HAL_ADC_ConfigChannel+0x2a>
1000240e:	2302      	movs	r3, #2
10002410:	e2d4      	b.n	100029bc <HAL_ADC_ConfigChannel+0x5d4>
10002412:	687b      	ldr	r3, [r7, #4]
10002414:	2201      	movs	r2, #1
10002416:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
1000241a:	687b      	ldr	r3, [r7, #4]
1000241c:	681b      	ldr	r3, [r3, #0]
1000241e:	4618      	mov	r0, r3
10002420:	f7ff fcc2 	bl	10001da8 <LL_ADC_REG_IsConversionOngoing>
10002424:	4603      	mov	r3, r0
10002426:	2b00      	cmp	r3, #0
10002428:	f040 82b9 	bne.w	1000299e <HAL_ADC_ConfigChannel+0x5b6>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
1000242c:	683b      	ldr	r3, [r7, #0]
1000242e:	681b      	ldr	r3, [r3, #0]
10002430:	f3c3 0313 	ubfx	r3, r3, #0, #20
10002434:	2b00      	cmp	r3, #0
10002436:	d108      	bne.n	1000244a <HAL_ADC_ConfigChannel+0x62>
10002438:	683b      	ldr	r3, [r7, #0]
1000243a:	681b      	ldr	r3, [r3, #0]
1000243c:	0e9b      	lsrs	r3, r3, #26
1000243e:	f003 031f 	and.w	r3, r3, #31
10002442:	2201      	movs	r2, #1
10002444:	fa02 f303 	lsl.w	r3, r2, r3
10002448:	e016      	b.n	10002478 <HAL_ADC_ConfigChannel+0x90>
1000244a:	683b      	ldr	r3, [r7, #0]
1000244c:	681b      	ldr	r3, [r3, #0]
1000244e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
10002450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
10002452:	fa93 f3a3 	rbit	r3, r3
10002456:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
10002458:	6e3b      	ldr	r3, [r7, #96]	; 0x60
1000245a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
1000245c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
1000245e:	2b00      	cmp	r3, #0
10002460:	d101      	bne.n	10002466 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
10002462:	2320      	movs	r3, #32
10002464:	e003      	b.n	1000246e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
10002466:	6ebb      	ldr	r3, [r7, #104]	; 0x68
10002468:	fab3 f383 	clz	r3, r3
1000246c:	b2db      	uxtb	r3, r3
1000246e:	f003 031f 	and.w	r3, r3, #31
10002472:	2201      	movs	r2, #1
10002474:	fa02 f303 	lsl.w	r3, r2, r3
10002478:	687a      	ldr	r2, [r7, #4]
1000247a:	6812      	ldr	r2, [r2, #0]
1000247c:	69d1      	ldr	r1, [r2, #28]
1000247e:	687a      	ldr	r2, [r7, #4]
10002480:	6812      	ldr	r2, [r2, #0]
10002482:	430b      	orrs	r3, r1
10002484:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
10002486:	687b      	ldr	r3, [r7, #4]
10002488:	6818      	ldr	r0, [r3, #0]
1000248a:	683b      	ldr	r3, [r7, #0]
1000248c:	6859      	ldr	r1, [r3, #4]
1000248e:	683b      	ldr	r3, [r7, #0]
10002490:	681b      	ldr	r3, [r3, #0]
10002492:	461a      	mov	r2, r3
10002494:	f7ff fb41 	bl	10001b1a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
10002498:	687b      	ldr	r3, [r7, #4]
1000249a:	681b      	ldr	r3, [r3, #0]
1000249c:	4618      	mov	r0, r3
1000249e:	f7ff fc83 	bl	10001da8 <LL_ADC_REG_IsConversionOngoing>
100024a2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
100024a4:	687b      	ldr	r3, [r7, #4]
100024a6:	681b      	ldr	r3, [r3, #0]
100024a8:	4618      	mov	r0, r3
100024aa:	f7ff fc90 	bl	10001dce <LL_ADC_INJ_IsConversionOngoing>
100024ae:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
100024b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
100024b2:	2b00      	cmp	r3, #0
100024b4:	f040 80a0 	bne.w	100025f8 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
100024b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
100024ba:	2b00      	cmp	r3, #0
100024bc:	f040 809c 	bne.w	100025f8 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
100024c0:	687b      	ldr	r3, [r7, #4]
100024c2:	6818      	ldr	r0, [r3, #0]
100024c4:	683b      	ldr	r3, [r7, #0]
100024c6:	6819      	ldr	r1, [r3, #0]
100024c8:	683b      	ldr	r3, [r7, #0]
100024ca:	689b      	ldr	r3, [r3, #8]
100024cc:	461a      	mov	r2, r3
100024ce:	f7ff fb50 	bl	10001b72 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
100024d2:	687b      	ldr	r3, [r7, #4]
100024d4:	681b      	ldr	r3, [r3, #0]
100024d6:	68db      	ldr	r3, [r3, #12]
100024d8:	f003 0310 	and.w	r3, r3, #16
100024dc:	2b00      	cmp	r3, #0
100024de:	d10b      	bne.n	100024f8 <HAL_ADC_ConfigChannel+0x110>
100024e0:	683b      	ldr	r3, [r7, #0]
100024e2:	695a      	ldr	r2, [r3, #20]
100024e4:	687b      	ldr	r3, [r7, #4]
100024e6:	681b      	ldr	r3, [r3, #0]
100024e8:	68db      	ldr	r3, [r3, #12]
100024ea:	089b      	lsrs	r3, r3, #2
100024ec:	f003 0307 	and.w	r3, r3, #7
100024f0:	005b      	lsls	r3, r3, #1
100024f2:	fa02 f303 	lsl.w	r3, r2, r3
100024f6:	e00a      	b.n	1000250e <HAL_ADC_ConfigChannel+0x126>
100024f8:	683b      	ldr	r3, [r7, #0]
100024fa:	695a      	ldr	r2, [r3, #20]
100024fc:	687b      	ldr	r3, [r7, #4]
100024fe:	681b      	ldr	r3, [r3, #0]
10002500:	68db      	ldr	r3, [r3, #12]
10002502:	089b      	lsrs	r3, r3, #2
10002504:	f003 0304 	and.w	r3, r3, #4
10002508:	005b      	lsls	r3, r3, #1
1000250a:	fa02 f303 	lsl.w	r3, r2, r3
1000250e:	673b      	str	r3, [r7, #112]	; 0x70

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
10002510:	683b      	ldr	r3, [r7, #0]
10002512:	691b      	ldr	r3, [r3, #16]
10002514:	2b04      	cmp	r3, #4
10002516:	d027      	beq.n	10002568 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
10002518:	687b      	ldr	r3, [r7, #4]
1000251a:	6818      	ldr	r0, [r3, #0]
1000251c:	683b      	ldr	r3, [r7, #0]
1000251e:	6919      	ldr	r1, [r3, #16]
10002520:	683b      	ldr	r3, [r7, #0]
10002522:	681a      	ldr	r2, [r3, #0]
10002524:	6f3b      	ldr	r3, [r7, #112]	; 0x70
10002526:	f7ff fa91 	bl	10001a4c <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber, (pConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
1000252a:	687b      	ldr	r3, [r7, #4]
1000252c:	6818      	ldr	r0, [r3, #0]
1000252e:	683b      	ldr	r3, [r7, #0]
10002530:	6919      	ldr	r1, [r3, #16]
10002532:	683b      	ldr	r3, [r7, #0]
10002534:	7e5b      	ldrb	r3, [r3, #25]
10002536:	2b01      	cmp	r3, #1
10002538:	d102      	bne.n	10002540 <HAL_ADC_ConfigChannel+0x158>
1000253a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
1000253e:	e000      	b.n	10002542 <HAL_ADC_ConfigChannel+0x15a>
10002540:	2300      	movs	r3, #0
10002542:	461a      	mov	r2, r3
10002544:	f7ff fabb 	bl	10001abe <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, pConfig->OffsetNumber, (pConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
10002548:	687b      	ldr	r3, [r7, #4]
1000254a:	6818      	ldr	r0, [r3, #0]
1000254c:	683b      	ldr	r3, [r7, #0]
1000254e:	6919      	ldr	r1, [r3, #16]
10002550:	683b      	ldr	r3, [r7, #0]
10002552:	7e1b      	ldrb	r3, [r3, #24]
10002554:	2b01      	cmp	r3, #1
10002556:	d102      	bne.n	1000255e <HAL_ADC_ConfigChannel+0x176>
10002558:	f44f 6300 	mov.w	r3, #2048	; 0x800
1000255c:	e000      	b.n	10002560 <HAL_ADC_ConfigChannel+0x178>
1000255e:	2300      	movs	r3, #0
10002560:	461a      	mov	r2, r3
10002562:	f7ff fa93 	bl	10001a8c <LL_ADC_SetDataRightShift>
10002566:	e047      	b.n	100025f8 <HAL_ADC_ConfigChannel+0x210>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
10002568:	687b      	ldr	r3, [r7, #4]
1000256a:	681b      	ldr	r3, [r3, #0]
1000256c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
1000256e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
10002572:	683b      	ldr	r3, [r7, #0]
10002574:	681b      	ldr	r3, [r3, #0]
10002576:	069b      	lsls	r3, r3, #26
10002578:	429a      	cmp	r2, r3
1000257a:	d107      	bne.n	1000258c <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
1000257c:	687b      	ldr	r3, [r7, #4]
1000257e:	681b      	ldr	r3, [r3, #0]
10002580:	6e1a      	ldr	r2, [r3, #96]	; 0x60
10002582:	687b      	ldr	r3, [r7, #4]
10002584:	681b      	ldr	r3, [r3, #0]
10002586:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
1000258a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
1000258c:	687b      	ldr	r3, [r7, #4]
1000258e:	681b      	ldr	r3, [r3, #0]
10002590:	6e5b      	ldr	r3, [r3, #100]	; 0x64
10002592:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
10002596:	683b      	ldr	r3, [r7, #0]
10002598:	681b      	ldr	r3, [r3, #0]
1000259a:	069b      	lsls	r3, r3, #26
1000259c:	429a      	cmp	r2, r3
1000259e:	d107      	bne.n	100025b0 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
100025a0:	687b      	ldr	r3, [r7, #4]
100025a2:	681b      	ldr	r3, [r3, #0]
100025a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
100025a6:	687b      	ldr	r3, [r7, #4]
100025a8:	681b      	ldr	r3, [r3, #0]
100025aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
100025ae:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
100025b0:	687b      	ldr	r3, [r7, #4]
100025b2:	681b      	ldr	r3, [r3, #0]
100025b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
100025b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
100025ba:	683b      	ldr	r3, [r7, #0]
100025bc:	681b      	ldr	r3, [r3, #0]
100025be:	069b      	lsls	r3, r3, #26
100025c0:	429a      	cmp	r2, r3
100025c2:	d107      	bne.n	100025d4 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
100025c4:	687b      	ldr	r3, [r7, #4]
100025c6:	681b      	ldr	r3, [r3, #0]
100025c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
100025ca:	687b      	ldr	r3, [r7, #4]
100025cc:	681b      	ldr	r3, [r3, #0]
100025ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
100025d2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
100025d4:	687b      	ldr	r3, [r7, #4]
100025d6:	681b      	ldr	r3, [r3, #0]
100025d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
100025da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
100025de:	683b      	ldr	r3, [r7, #0]
100025e0:	681b      	ldr	r3, [r3, #0]
100025e2:	069b      	lsls	r3, r3, #26
100025e4:	429a      	cmp	r2, r3
100025e6:	d107      	bne.n	100025f8 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
100025e8:	687b      	ldr	r3, [r7, #4]
100025ea:	681b      	ldr	r3, [r3, #0]
100025ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
100025ee:	687b      	ldr	r3, [r7, #4]
100025f0:	681b      	ldr	r3, [r3, #0]
100025f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
100025f6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor/VddCore        */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
100025f8:	687b      	ldr	r3, [r7, #4]
100025fa:	681b      	ldr	r3, [r3, #0]
100025fc:	4618      	mov	r0, r3
100025fe:	f7ff fb99 	bl	10001d34 <LL_ADC_IsEnabled>
10002602:	4603      	mov	r3, r0
10002604:	2b00      	cmp	r3, #0
10002606:	f040 81d3 	bne.w	100029b0 <HAL_ADC_ConfigChannel+0x5c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
1000260a:	687b      	ldr	r3, [r7, #4]
1000260c:	6818      	ldr	r0, [r3, #0]
1000260e:	683b      	ldr	r3, [r7, #0]
10002610:	6819      	ldr	r1, [r3, #0]
10002612:	683b      	ldr	r3, [r7, #0]
10002614:	68db      	ldr	r3, [r3, #12]
10002616:	461a      	mov	r2, r3
10002618:	f7ff fad6 	bl	10001bc8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
1000261c:	683b      	ldr	r3, [r7, #0]
1000261e:	68db      	ldr	r3, [r3, #12]
10002620:	4a12      	ldr	r2, [pc, #72]	; (1000266c <HAL_ADC_ConfigChannel+0x284>)
10002622:	4293      	cmp	r3, r2
10002624:	f040 8130 	bne.w	10002888 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
10002628:	687b      	ldr	r3, [r7, #4]
1000262a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) + 1UL) & 0x1FUL)),
1000262c:	683b      	ldr	r3, [r7, #0]
1000262e:	681b      	ldr	r3, [r3, #0]
10002630:	f3c3 0313 	ubfx	r3, r3, #0, #20
10002634:	2b00      	cmp	r3, #0
10002636:	d10b      	bne.n	10002650 <HAL_ADC_ConfigChannel+0x268>
10002638:	683b      	ldr	r3, [r7, #0]
1000263a:	681b      	ldr	r3, [r3, #0]
1000263c:	0e9b      	lsrs	r3, r3, #26
1000263e:	3301      	adds	r3, #1
10002640:	f003 031f 	and.w	r3, r3, #31
10002644:	2b09      	cmp	r3, #9
10002646:	bf94      	ite	ls
10002648:	2301      	movls	r3, #1
1000264a:	2300      	movhi	r3, #0
1000264c:	b2db      	uxtb	r3, r3
1000264e:	e01b      	b.n	10002688 <HAL_ADC_ConfigChannel+0x2a0>
10002650:	683b      	ldr	r3, [r7, #0]
10002652:	681b      	ldr	r3, [r3, #0]
10002654:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
10002656:	6dbb      	ldr	r3, [r7, #88]	; 0x58
10002658:	fa93 f3a3 	rbit	r3, r3
1000265c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
1000265e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10002660:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
10002662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
10002664:	2b00      	cmp	r3, #0
10002666:	d103      	bne.n	10002670 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
10002668:	2320      	movs	r3, #32
1000266a:	e005      	b.n	10002678 <HAL_ADC_ConfigChannel+0x290>
1000266c:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
10002670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
10002672:	fab3 f383 	clz	r3, r3
10002676:	b2db      	uxtb	r3, r3
10002678:	3301      	adds	r3, #1
1000267a:	f003 031f 	and.w	r3, r3, #31
1000267e:	2b09      	cmp	r3, #9
10002680:	bf94      	ite	ls
10002682:	2301      	movls	r3, #1
10002684:	2300      	movhi	r3, #0
10002686:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
10002688:	2b00      	cmp	r3, #0
1000268a:	d079      	beq.n	10002780 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) + 1UL) & 0x1FUL)),
1000268c:	683b      	ldr	r3, [r7, #0]
1000268e:	681b      	ldr	r3, [r3, #0]
10002690:	f3c3 0313 	ubfx	r3, r3, #0, #20
10002694:	2b00      	cmp	r3, #0
10002696:	d107      	bne.n	100026a8 <HAL_ADC_ConfigChannel+0x2c0>
10002698:	683b      	ldr	r3, [r7, #0]
1000269a:	681b      	ldr	r3, [r3, #0]
1000269c:	0e9b      	lsrs	r3, r3, #26
1000269e:	3301      	adds	r3, #1
100026a0:	069b      	lsls	r3, r3, #26
100026a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
100026a6:	e015      	b.n	100026d4 <HAL_ADC_ConfigChannel+0x2ec>
100026a8:	683b      	ldr	r3, [r7, #0]
100026aa:	681b      	ldr	r3, [r3, #0]
100026ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
100026ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
100026b0:	fa93 f3a3 	rbit	r3, r3
100026b4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
100026b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
100026b8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
100026ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
100026bc:	2b00      	cmp	r3, #0
100026be:	d101      	bne.n	100026c4 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
100026c0:	2320      	movs	r3, #32
100026c2:	e003      	b.n	100026cc <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
100026c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
100026c6:	fab3 f383 	clz	r3, r3
100026ca:	b2db      	uxtb	r3, r3
100026cc:	3301      	adds	r3, #1
100026ce:	069b      	lsls	r3, r3, #26
100026d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
100026d4:	683b      	ldr	r3, [r7, #0]
100026d6:	681b      	ldr	r3, [r3, #0]
100026d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
100026dc:	2b00      	cmp	r3, #0
100026de:	d109      	bne.n	100026f4 <HAL_ADC_ConfigChannel+0x30c>
100026e0:	683b      	ldr	r3, [r7, #0]
100026e2:	681b      	ldr	r3, [r3, #0]
100026e4:	0e9b      	lsrs	r3, r3, #26
100026e6:	3301      	adds	r3, #1
100026e8:	f003 031f 	and.w	r3, r3, #31
100026ec:	2101      	movs	r1, #1
100026ee:	fa01 f303 	lsl.w	r3, r1, r3
100026f2:	e017      	b.n	10002724 <HAL_ADC_ConfigChannel+0x33c>
100026f4:	683b      	ldr	r3, [r7, #0]
100026f6:	681b      	ldr	r3, [r3, #0]
100026f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
100026fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
100026fc:	fa93 f3a3 	rbit	r3, r3
10002700:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
10002702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10002704:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
10002706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10002708:	2b00      	cmp	r3, #0
1000270a:	d101      	bne.n	10002710 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
1000270c:	2320      	movs	r3, #32
1000270e:	e003      	b.n	10002718 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
10002710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10002712:	fab3 f383 	clz	r3, r3
10002716:	b2db      	uxtb	r3, r3
10002718:	3301      	adds	r3, #1
1000271a:	f003 031f 	and.w	r3, r3, #31
1000271e:	2101      	movs	r1, #1
10002720:	fa01 f303 	lsl.w	r3, r1, r3
10002724:	ea42 0103 	orr.w	r1, r2, r3
10002728:	683b      	ldr	r3, [r7, #0]
1000272a:	681b      	ldr	r3, [r3, #0]
1000272c:	f3c3 0313 	ubfx	r3, r3, #0, #20
10002730:	2b00      	cmp	r3, #0
10002732:	d10a      	bne.n	1000274a <HAL_ADC_ConfigChannel+0x362>
10002734:	683b      	ldr	r3, [r7, #0]
10002736:	681b      	ldr	r3, [r3, #0]
10002738:	0e9b      	lsrs	r3, r3, #26
1000273a:	3301      	adds	r3, #1
1000273c:	f003 021f 	and.w	r2, r3, #31
10002740:	4613      	mov	r3, r2
10002742:	005b      	lsls	r3, r3, #1
10002744:	4413      	add	r3, r2
10002746:	051b      	lsls	r3, r3, #20
10002748:	e018      	b.n	1000277c <HAL_ADC_ConfigChannel+0x394>
1000274a:	683b      	ldr	r3, [r7, #0]
1000274c:	681b      	ldr	r3, [r3, #0]
1000274e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
10002750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10002752:	fa93 f3a3 	rbit	r3, r3
10002756:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
10002758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000275a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
1000275c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000275e:	2b00      	cmp	r3, #0
10002760:	d101      	bne.n	10002766 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
10002762:	2320      	movs	r3, #32
10002764:	e003      	b.n	1000276e <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
10002766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10002768:	fab3 f383 	clz	r3, r3
1000276c:	b2db      	uxtb	r3, r3
1000276e:	3301      	adds	r3, #1
10002770:	f003 021f 	and.w	r2, r3, #31
10002774:	4613      	mov	r3, r2
10002776:	005b      	lsls	r3, r3, #1
10002778:	4413      	add	r3, r2
1000277a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
1000277c:	430b      	orrs	r3, r1
1000277e:	e07e      	b.n	1000287e <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) + 1UL) & 0x1FUL)),
10002780:	683b      	ldr	r3, [r7, #0]
10002782:	681b      	ldr	r3, [r3, #0]
10002784:	f3c3 0313 	ubfx	r3, r3, #0, #20
10002788:	2b00      	cmp	r3, #0
1000278a:	d107      	bne.n	1000279c <HAL_ADC_ConfigChannel+0x3b4>
1000278c:	683b      	ldr	r3, [r7, #0]
1000278e:	681b      	ldr	r3, [r3, #0]
10002790:	0e9b      	lsrs	r3, r3, #26
10002792:	3301      	adds	r3, #1
10002794:	069b      	lsls	r3, r3, #26
10002796:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
1000279a:	e015      	b.n	100027c8 <HAL_ADC_ConfigChannel+0x3e0>
1000279c:	683b      	ldr	r3, [r7, #0]
1000279e:	681b      	ldr	r3, [r3, #0]
100027a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
100027a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
100027a4:	fa93 f3a3 	rbit	r3, r3
100027a8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
100027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100027ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
100027ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100027b0:	2b00      	cmp	r3, #0
100027b2:	d101      	bne.n	100027b8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
100027b4:	2320      	movs	r3, #32
100027b6:	e003      	b.n	100027c0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
100027b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100027ba:	fab3 f383 	clz	r3, r3
100027be:	b2db      	uxtb	r3, r3
100027c0:	3301      	adds	r3, #1
100027c2:	069b      	lsls	r3, r3, #26
100027c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
100027c8:	683b      	ldr	r3, [r7, #0]
100027ca:	681b      	ldr	r3, [r3, #0]
100027cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
100027d0:	2b00      	cmp	r3, #0
100027d2:	d109      	bne.n	100027e8 <HAL_ADC_ConfigChannel+0x400>
100027d4:	683b      	ldr	r3, [r7, #0]
100027d6:	681b      	ldr	r3, [r3, #0]
100027d8:	0e9b      	lsrs	r3, r3, #26
100027da:	3301      	adds	r3, #1
100027dc:	f003 031f 	and.w	r3, r3, #31
100027e0:	2101      	movs	r1, #1
100027e2:	fa01 f303 	lsl.w	r3, r1, r3
100027e6:	e017      	b.n	10002818 <HAL_ADC_ConfigChannel+0x430>
100027e8:	683b      	ldr	r3, [r7, #0]
100027ea:	681b      	ldr	r3, [r3, #0]
100027ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
100027ee:	69fb      	ldr	r3, [r7, #28]
100027f0:	fa93 f3a3 	rbit	r3, r3
100027f4:	61bb      	str	r3, [r7, #24]
  return result;
100027f6:	69bb      	ldr	r3, [r7, #24]
100027f8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
100027fa:	6a3b      	ldr	r3, [r7, #32]
100027fc:	2b00      	cmp	r3, #0
100027fe:	d101      	bne.n	10002804 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
10002800:	2320      	movs	r3, #32
10002802:	e003      	b.n	1000280c <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
10002804:	6a3b      	ldr	r3, [r7, #32]
10002806:	fab3 f383 	clz	r3, r3
1000280a:	b2db      	uxtb	r3, r3
1000280c:	3301      	adds	r3, #1
1000280e:	f003 031f 	and.w	r3, r3, #31
10002812:	2101      	movs	r1, #1
10002814:	fa01 f303 	lsl.w	r3, r1, r3
10002818:	ea42 0103 	orr.w	r1, r2, r3
1000281c:	683b      	ldr	r3, [r7, #0]
1000281e:	681b      	ldr	r3, [r3, #0]
10002820:	f3c3 0313 	ubfx	r3, r3, #0, #20
10002824:	2b00      	cmp	r3, #0
10002826:	d10d      	bne.n	10002844 <HAL_ADC_ConfigChannel+0x45c>
10002828:	683b      	ldr	r3, [r7, #0]
1000282a:	681b      	ldr	r3, [r3, #0]
1000282c:	0e9b      	lsrs	r3, r3, #26
1000282e:	3301      	adds	r3, #1
10002830:	f003 021f 	and.w	r2, r3, #31
10002834:	4613      	mov	r3, r2
10002836:	005b      	lsls	r3, r3, #1
10002838:	4413      	add	r3, r2
1000283a:	3b1e      	subs	r3, #30
1000283c:	051b      	lsls	r3, r3, #20
1000283e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
10002842:	e01b      	b.n	1000287c <HAL_ADC_ConfigChannel+0x494>
10002844:	683b      	ldr	r3, [r7, #0]
10002846:	681b      	ldr	r3, [r3, #0]
10002848:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
1000284a:	693b      	ldr	r3, [r7, #16]
1000284c:	fa93 f3a3 	rbit	r3, r3
10002850:	60fb      	str	r3, [r7, #12]
  return result;
10002852:	68fb      	ldr	r3, [r7, #12]
10002854:	617b      	str	r3, [r7, #20]
  if (value == 0U)
10002856:	697b      	ldr	r3, [r7, #20]
10002858:	2b00      	cmp	r3, #0
1000285a:	d101      	bne.n	10002860 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
1000285c:	2320      	movs	r3, #32
1000285e:	e003      	b.n	10002868 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
10002860:	697b      	ldr	r3, [r7, #20]
10002862:	fab3 f383 	clz	r3, r3
10002866:	b2db      	uxtb	r3, r3
10002868:	3301      	adds	r3, #1
1000286a:	f003 021f 	and.w	r2, r3, #31
1000286e:	4613      	mov	r3, r2
10002870:	005b      	lsls	r3, r3, #1
10002872:	4413      	add	r3, r2
10002874:	3b1e      	subs	r3, #30
10002876:	051b      	lsls	r3, r3, #20
10002878:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
1000287c:	430b      	orrs	r3, r1
1000287e:	683a      	ldr	r2, [r7, #0]
10002880:	6892      	ldr	r2, [r2, #8]
10002882:	4619      	mov	r1, r3
10002884:	f7ff f975 	bl	10001b72 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
10002888:	683b      	ldr	r3, [r7, #0]
1000288a:	681b      	ldr	r3, [r3, #0]
1000288c:	2b00      	cmp	r3, #0
1000288e:	f280 808f 	bge.w	100029b0 <HAL_ADC_ConfigChannel+0x5c8>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
10002892:	484c      	ldr	r0, [pc, #304]	; (100029c4 <HAL_ADC_ConfigChannel+0x5dc>)
10002894:	f7ff f8cc 	bl	10001a30 <LL_ADC_GetCommonPathInternalCh>
10002898:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
1000289a:	484b      	ldr	r0, [pc, #300]	; (100029c8 <HAL_ADC_ConfigChannel+0x5e0>)
1000289c:	f7ff fa4a 	bl	10001d34 <LL_ADC_IsEnabled>
100028a0:	4604      	mov	r4, r0
100028a2:	484a      	ldr	r0, [pc, #296]	; (100029cc <HAL_ADC_ConfigChannel+0x5e4>)
100028a4:	f7ff fa46 	bl	10001d34 <LL_ADC_IsEnabled>
100028a8:	4603      	mov	r3, r0
100028aa:	4323      	orrs	r3, r4
100028ac:	2b00      	cmp	r3, #0
100028ae:	d16c      	bne.n	1000298a <HAL_ADC_ConfigChannel+0x5a2>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
100028b0:	683b      	ldr	r3, [r7, #0]
100028b2:	681b      	ldr	r3, [r3, #0]
100028b4:	4a46      	ldr	r2, [pc, #280]	; (100029d0 <HAL_ADC_ConfigChannel+0x5e8>)
100028b6:	4293      	cmp	r3, r2
100028b8:	d122      	bne.n	10002900 <HAL_ADC_ConfigChannel+0x518>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
100028ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
100028bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
100028c0:	2b00      	cmp	r3, #0
100028c2:	d11d      	bne.n	10002900 <HAL_ADC_ConfigChannel+0x518>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
100028c4:	687b      	ldr	r3, [r7, #4]
100028c6:	681b      	ldr	r3, [r3, #0]
100028c8:	4a40      	ldr	r2, [pc, #256]	; (100029cc <HAL_ADC_ConfigChannel+0x5e4>)
100028ca:	4293      	cmp	r3, r2
100028cc:	d170      	bne.n	100029b0 <HAL_ADC_ConfigChannel+0x5c8>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
100028ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
100028d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
100028d4:	4619      	mov	r1, r3
100028d6:	483b      	ldr	r0, [pc, #236]	; (100029c4 <HAL_ADC_ConfigChannel+0x5dc>)
100028d8:	f7ff f888 	bl	100019ec <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
100028dc:	4b3d      	ldr	r3, [pc, #244]	; (100029d4 <HAL_ADC_ConfigChannel+0x5ec>)
100028de:	681b      	ldr	r3, [r3, #0]
100028e0:	099b      	lsrs	r3, r3, #6
100028e2:	4a3d      	ldr	r2, [pc, #244]	; (100029d8 <HAL_ADC_ConfigChannel+0x5f0>)
100028e4:	fba2 2303 	umull	r2, r3, r2, r3
100028e8:	099b      	lsrs	r3, r3, #6
100028ea:	3301      	adds	r3, #1
100028ec:	005b      	lsls	r3, r3, #1
100028ee:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
100028f0:	e002      	b.n	100028f8 <HAL_ADC_ConfigChannel+0x510>
              {
                wait_loop_index--;
100028f2:	68bb      	ldr	r3, [r7, #8]
100028f4:	3b01      	subs	r3, #1
100028f6:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
100028f8:	68bb      	ldr	r3, [r7, #8]
100028fa:	2b00      	cmp	r3, #0
100028fc:	d1f9      	bne.n	100028f2 <HAL_ADC_ConfigChannel+0x50a>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
100028fe:	e057      	b.n	100029b0 <HAL_ADC_ConfigChannel+0x5c8>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
10002900:	683b      	ldr	r3, [r7, #0]
10002902:	681b      	ldr	r3, [r3, #0]
10002904:	4a35      	ldr	r2, [pc, #212]	; (100029dc <HAL_ADC_ConfigChannel+0x5f4>)
10002906:	4293      	cmp	r3, r2
10002908:	d111      	bne.n	1000292e <HAL_ADC_ConfigChannel+0x546>
1000290a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000290c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
10002910:	2b00      	cmp	r3, #0
10002912:	d10c      	bne.n	1000292e <HAL_ADC_ConfigChannel+0x546>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
10002914:	687b      	ldr	r3, [r7, #4]
10002916:	681b      	ldr	r3, [r3, #0]
10002918:	4a2c      	ldr	r2, [pc, #176]	; (100029cc <HAL_ADC_ConfigChannel+0x5e4>)
1000291a:	4293      	cmp	r3, r2
1000291c:	d148      	bne.n	100029b0 <HAL_ADC_ConfigChannel+0x5c8>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
1000291e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10002920:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
10002924:	4619      	mov	r1, r3
10002926:	4827      	ldr	r0, [pc, #156]	; (100029c4 <HAL_ADC_ConfigChannel+0x5dc>)
10002928:	f7ff f860 	bl	100019ec <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
1000292c:	e040      	b.n	100029b0 <HAL_ADC_ConfigChannel+0x5c8>
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
1000292e:	683b      	ldr	r3, [r7, #0]
10002930:	681b      	ldr	r3, [r3, #0]
10002932:	4a2b      	ldr	r2, [pc, #172]	; (100029e0 <HAL_ADC_ConfigChannel+0x5f8>)
10002934:	4293      	cmp	r3, r2
10002936:	d111      	bne.n	1000295c <HAL_ADC_ConfigChannel+0x574>
10002938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000293a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
1000293e:	2b00      	cmp	r3, #0
10002940:	d10c      	bne.n	1000295c <HAL_ADC_ConfigChannel+0x574>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
10002942:	687b      	ldr	r3, [r7, #4]
10002944:	681b      	ldr	r3, [r3, #0]
10002946:	4a21      	ldr	r2, [pc, #132]	; (100029cc <HAL_ADC_ConfigChannel+0x5e4>)
10002948:	4293      	cmp	r3, r2
1000294a:	d131      	bne.n	100029b0 <HAL_ADC_ConfigChannel+0x5c8>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
1000294c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000294e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
10002952:	4619      	mov	r1, r3
10002954:	481b      	ldr	r0, [pc, #108]	; (100029c4 <HAL_ADC_ConfigChannel+0x5dc>)
10002956:	f7ff f849 	bl	100019ec <LL_ADC_SetCommonPathInternalCh>
            if (ADC_VREFINT_INSTANCE(hadc))
1000295a:	e029      	b.n	100029b0 <HAL_ADC_ConfigChannel+0x5c8>
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VDDCORE) == 0UL))
1000295c:	683b      	ldr	r3, [r7, #0]
1000295e:	681b      	ldr	r3, [r3, #0]
10002960:	4a20      	ldr	r2, [pc, #128]	; (100029e4 <HAL_ADC_ConfigChannel+0x5fc>)
10002962:	4293      	cmp	r3, r2
10002964:	d124      	bne.n	100029b0 <HAL_ADC_ConfigChannel+0x5c8>
10002966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10002968:	f003 0301 	and.w	r3, r3, #1
1000296c:	2b00      	cmp	r3, #0
1000296e:	d11f      	bne.n	100029b0 <HAL_ADC_ConfigChannel+0x5c8>
          {
            if (ADC_VDDCORE_INSTANCE(hadc))
10002970:	687b      	ldr	r3, [r7, #4]
10002972:	681b      	ldr	r3, [r3, #0]
10002974:	4a15      	ldr	r2, [pc, #84]	; (100029cc <HAL_ADC_ConfigChannel+0x5e4>)
10002976:	4293      	cmp	r3, r2
10002978:	d11a      	bne.n	100029b0 <HAL_ADC_ConfigChannel+0x5c8>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VDDCORE | tmp_config_internal_channel);
1000297a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000297c:	f043 0301 	orr.w	r3, r3, #1
10002980:	4619      	mov	r1, r3
10002982:	4810      	ldr	r0, [pc, #64]	; (100029c4 <HAL_ADC_ConfigChannel+0x5dc>)
10002984:	f7ff f832 	bl	100019ec <LL_ADC_SetCommonPathInternalCh>
10002988:	e012      	b.n	100029b0 <HAL_ADC_ConfigChannel+0x5c8>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1000298a:	687b      	ldr	r3, [r7, #4]
1000298c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000298e:	f043 0220 	orr.w	r2, r3, #32
10002992:	687b      	ldr	r3, [r7, #4]
10002994:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
10002996:	2301      	movs	r3, #1
10002998:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
1000299c:	e008      	b.n	100029b0 <HAL_ADC_ConfigChannel+0x5c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1000299e:	687b      	ldr	r3, [r7, #4]
100029a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100029a2:	f043 0220 	orr.w	r2, r3, #32
100029a6:	687b      	ldr	r3, [r7, #4]
100029a8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
100029aa:	2301      	movs	r3, #1
100029ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  __HAL_UNLOCK(hadc);
100029b0:	687b      	ldr	r3, [r7, #4]
100029b2:	2200      	movs	r2, #0
100029b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return tmp_hal_status;
100029b8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
100029bc:	4618      	mov	r0, r3
100029be:	3784      	adds	r7, #132	; 0x84
100029c0:	46bd      	mov	sp, r7
100029c2:	bd90      	pop	{r4, r7, pc}
100029c4:	48003300 	.word	0x48003300
100029c8:	48003000 	.word	0x48003000
100029cc:	48003100 	.word	0x48003100
100029d0:	b2601000 	.word	0xb2601000
100029d4:	10020000 	.word	0x10020000
100029d8:	053e2d63 	.word	0x053e2d63
100029dc:	bef08000 	.word	0xbef08000
100029e0:	b6902000 	.word	0xb6902000
100029e4:	bac04000 	.word	0xbac04000

100029e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
100029e8:	b580      	push	{r7, lr}
100029ea:	b084      	sub	sp, #16
100029ec:	af00      	add	r7, sp, #0
100029ee:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
100029f0:	687b      	ldr	r3, [r7, #4]
100029f2:	681b      	ldr	r3, [r3, #0]
100029f4:	4618      	mov	r0, r3
100029f6:	f7ff f99d 	bl	10001d34 <LL_ADC_IsEnabled>
100029fa:	4603      	mov	r3, r0
100029fc:	2b00      	cmp	r3, #0
100029fe:	d161      	bne.n	10002ac4 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
10002a00:	687b      	ldr	r3, [r7, #4]
10002a02:	681b      	ldr	r3, [r3, #0]
10002a04:	689a      	ldr	r2, [r3, #8]
10002a06:	4b32      	ldr	r3, [pc, #200]	; (10002ad0 <ADC_Enable+0xe8>)
10002a08:	4013      	ands	r3, r2
10002a0a:	2b00      	cmp	r3, #0
10002a0c:	d00d      	beq.n	10002a2a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10002a0e:	687b      	ldr	r3, [r7, #4]
10002a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002a12:	f043 0210 	orr.w	r2, r3, #16
10002a16:	687b      	ldr	r3, [r7, #4]
10002a18:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
10002a1a:	687b      	ldr	r3, [r7, #4]
10002a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10002a1e:	f043 0201 	orr.w	r2, r3, #1
10002a22:	687b      	ldr	r3, [r7, #4]
10002a24:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
10002a26:	2301      	movs	r3, #1
10002a28:	e04d      	b.n	10002ac6 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
10002a2a:	687b      	ldr	r3, [r7, #4]
10002a2c:	681b      	ldr	r3, [r3, #0]
10002a2e:	4618      	mov	r0, r3
10002a30:	f7ff f958 	bl	10001ce4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
10002a34:	f7fe ff48 	bl	100018c8 <HAL_GetTick>
10002a38:	60f8      	str	r0, [r7, #12]

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
10002a3a:	4826      	ldr	r0, [pc, #152]	; (10002ad4 <ADC_Enable+0xec>)
10002a3c:	f7ff f8e8 	bl	10001c10 <LL_ADC_GetMultimode>
10002a40:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
10002a42:	687b      	ldr	r3, [r7, #4]
10002a44:	681b      	ldr	r3, [r3, #0]
10002a46:	4a24      	ldr	r2, [pc, #144]	; (10002ad8 <ADC_Enable+0xf0>)
10002a48:	4293      	cmp	r3, r2
10002a4a:	d002      	beq.n	10002a52 <ADC_Enable+0x6a>
10002a4c:	687b      	ldr	r3, [r7, #4]
10002a4e:	681b      	ldr	r3, [r3, #0]
10002a50:	e000      	b.n	10002a54 <ADC_Enable+0x6c>
10002a52:	4b22      	ldr	r3, [pc, #136]	; (10002adc <ADC_Enable+0xf4>)
10002a54:	687a      	ldr	r2, [r7, #4]
10002a56:	6812      	ldr	r2, [r2, #0]
10002a58:	4293      	cmp	r3, r2
10002a5a:	d02c      	beq.n	10002ab6 <ADC_Enable+0xce>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
10002a5c:	68bb      	ldr	r3, [r7, #8]
10002a5e:	2b00      	cmp	r3, #0
10002a60:	d130      	bne.n	10002ac4 <ADC_Enable+0xdc>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
10002a62:	e028      	b.n	10002ab6 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
10002a64:	687b      	ldr	r3, [r7, #4]
10002a66:	681b      	ldr	r3, [r3, #0]
10002a68:	4618      	mov	r0, r3
10002a6a:	f7ff f963 	bl	10001d34 <LL_ADC_IsEnabled>
10002a6e:	4603      	mov	r3, r0
10002a70:	2b00      	cmp	r3, #0
10002a72:	d104      	bne.n	10002a7e <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
10002a74:	687b      	ldr	r3, [r7, #4]
10002a76:	681b      	ldr	r3, [r3, #0]
10002a78:	4618      	mov	r0, r3
10002a7a:	f7ff f933 	bl	10001ce4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
10002a7e:	f7fe ff23 	bl	100018c8 <HAL_GetTick>
10002a82:	4602      	mov	r2, r0
10002a84:	68fb      	ldr	r3, [r7, #12]
10002a86:	1ad3      	subs	r3, r2, r3
10002a88:	2b02      	cmp	r3, #2
10002a8a:	d914      	bls.n	10002ab6 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
10002a8c:	687b      	ldr	r3, [r7, #4]
10002a8e:	681b      	ldr	r3, [r3, #0]
10002a90:	681b      	ldr	r3, [r3, #0]
10002a92:	f003 0301 	and.w	r3, r3, #1
10002a96:	2b01      	cmp	r3, #1
10002a98:	d00d      	beq.n	10002ab6 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10002a9a:	687b      	ldr	r3, [r7, #4]
10002a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002a9e:	f043 0210 	orr.w	r2, r3, #16
10002aa2:	687b      	ldr	r3, [r7, #4]
10002aa4:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
10002aa6:	687b      	ldr	r3, [r7, #4]
10002aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10002aaa:	f043 0201 	orr.w	r2, r3, #1
10002aae:	687b      	ldr	r3, [r7, #4]
10002ab0:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
10002ab2:	2301      	movs	r3, #1
10002ab4:	e007      	b.n	10002ac6 <ADC_Enable+0xde>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
10002ab6:	687b      	ldr	r3, [r7, #4]
10002ab8:	681b      	ldr	r3, [r3, #0]
10002aba:	681b      	ldr	r3, [r3, #0]
10002abc:	f003 0301 	and.w	r3, r3, #1
10002ac0:	2b01      	cmp	r3, #1
10002ac2:	d1cf      	bne.n	10002a64 <ADC_Enable+0x7c>
    }
#endif
  }

  /* Return HAL status */
  return HAL_OK;
10002ac4:	2300      	movs	r3, #0
}
10002ac6:	4618      	mov	r0, r3
10002ac8:	3710      	adds	r7, #16
10002aca:	46bd      	mov	sp, r7
10002acc:	bd80      	pop	{r7, pc}
10002ace:	bf00      	nop
10002ad0:	8000003f 	.word	0x8000003f
10002ad4:	48003300 	.word	0x48003300
10002ad8:	48003100 	.word	0x48003100
10002adc:	48003000 	.word	0x48003000

10002ae0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
10002ae0:	b580      	push	{r7, lr}
10002ae2:	b084      	sub	sp, #16
10002ae4:	af00      	add	r7, sp, #0
10002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
10002ae8:	687b      	ldr	r3, [r7, #4]
10002aea:	681b      	ldr	r3, [r3, #0]
10002aec:	4618      	mov	r0, r3
10002aee:	f7ff f934 	bl	10001d5a <LL_ADC_IsDisableOngoing>
10002af2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
10002af4:	687b      	ldr	r3, [r7, #4]
10002af6:	681b      	ldr	r3, [r3, #0]
10002af8:	4618      	mov	r0, r3
10002afa:	f7ff f91b 	bl	10001d34 <LL_ADC_IsEnabled>
10002afe:	4603      	mov	r3, r0
10002b00:	2b00      	cmp	r3, #0
10002b02:	d047      	beq.n	10002b94 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
10002b04:	68fb      	ldr	r3, [r7, #12]
10002b06:	2b00      	cmp	r3, #0
10002b08:	d144      	bne.n	10002b94 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
10002b0a:	687b      	ldr	r3, [r7, #4]
10002b0c:	681b      	ldr	r3, [r3, #0]
10002b0e:	689b      	ldr	r3, [r3, #8]
10002b10:	f003 030d 	and.w	r3, r3, #13
10002b14:	2b01      	cmp	r3, #1
10002b16:	d10c      	bne.n	10002b32 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
10002b18:	687b      	ldr	r3, [r7, #4]
10002b1a:	681b      	ldr	r3, [r3, #0]
10002b1c:	4618      	mov	r0, r3
10002b1e:	f7ff f8f5 	bl	10001d0c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
10002b22:	687b      	ldr	r3, [r7, #4]
10002b24:	681b      	ldr	r3, [r3, #0]
10002b26:	2203      	movs	r2, #3
10002b28:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
10002b2a:	f7fe fecd 	bl	100018c8 <HAL_GetTick>
10002b2e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
10002b30:	e029      	b.n	10002b86 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10002b32:	687b      	ldr	r3, [r7, #4]
10002b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002b36:	f043 0210 	orr.w	r2, r3, #16
10002b3a:	687b      	ldr	r3, [r7, #4]
10002b3c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
10002b3e:	687b      	ldr	r3, [r7, #4]
10002b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10002b42:	f043 0201 	orr.w	r2, r3, #1
10002b46:	687b      	ldr	r3, [r7, #4]
10002b48:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
10002b4a:	2301      	movs	r3, #1
10002b4c:	e023      	b.n	10002b96 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
10002b4e:	f7fe febb 	bl	100018c8 <HAL_GetTick>
10002b52:	4602      	mov	r2, r0
10002b54:	68bb      	ldr	r3, [r7, #8]
10002b56:	1ad3      	subs	r3, r2, r3
10002b58:	2b02      	cmp	r3, #2
10002b5a:	d914      	bls.n	10002b86 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
10002b5c:	687b      	ldr	r3, [r7, #4]
10002b5e:	681b      	ldr	r3, [r3, #0]
10002b60:	689b      	ldr	r3, [r3, #8]
10002b62:	f003 0301 	and.w	r3, r3, #1
10002b66:	2b00      	cmp	r3, #0
10002b68:	d00d      	beq.n	10002b86 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10002b6a:	687b      	ldr	r3, [r7, #4]
10002b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002b6e:	f043 0210 	orr.w	r2, r3, #16
10002b72:	687b      	ldr	r3, [r7, #4]
10002b74:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
10002b76:	687b      	ldr	r3, [r7, #4]
10002b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10002b7a:	f043 0201 	orr.w	r2, r3, #1
10002b7e:	687b      	ldr	r3, [r7, #4]
10002b80:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
10002b82:	2301      	movs	r3, #1
10002b84:	e007      	b.n	10002b96 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
10002b86:	687b      	ldr	r3, [r7, #4]
10002b88:	681b      	ldr	r3, [r3, #0]
10002b8a:	689b      	ldr	r3, [r3, #8]
10002b8c:	f003 0301 	and.w	r3, r3, #1
10002b90:	2b00      	cmp	r3, #0
10002b92:	d1dc      	bne.n	10002b4e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
10002b94:	2300      	movs	r3, #0
}
10002b96:	4618      	mov	r0, r3
10002b98:	3710      	adds	r7, #16
10002b9a:	46bd      	mov	sp, r7
10002b9c:	bd80      	pop	{r7, pc}
	...

10002ba0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
10002ba0:	b580      	push	{r7, lr}
10002ba2:	b084      	sub	sp, #16
10002ba4:	af00      	add	r7, sp, #0
10002ba6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
10002ba8:	687b      	ldr	r3, [r7, #4]
10002baa:	681b      	ldr	r3, [r3, #0]
10002bac:	4a53      	ldr	r2, [pc, #332]	; (10002cfc <ADC_ConfigureBoostMode+0x15c>)
10002bae:	4293      	cmp	r3, r2
10002bb0:	d004      	beq.n	10002bbc <ADC_ConfigureBoostMode+0x1c>
10002bb2:	687b      	ldr	r3, [r7, #4]
10002bb4:	681b      	ldr	r3, [r3, #0]
10002bb6:	4a52      	ldr	r2, [pc, #328]	; (10002d00 <ADC_ConfigureBoostMode+0x160>)
10002bb8:	4293      	cmp	r3, r2
10002bba:	d124      	bne.n	10002c06 <ADC_ConfigureBoostMode+0x66>
10002bbc:	4b51      	ldr	r3, [pc, #324]	; (10002d04 <ADC_ConfigureBoostMode+0x164>)
10002bbe:	689b      	ldr	r3, [r3, #8]
10002bc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
10002bc4:	2b00      	cmp	r3, #0
10002bc6:	d01e      	beq.n	10002c06 <ADC_ConfigureBoostMode+0x66>
  {
    freq = HAL_RCC_GetHCLK2Freq();
10002bc8:	f002 fae5 	bl	10005196 <HAL_RCC_GetHCLK2Freq>
10002bcc:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
10002bce:	687b      	ldr	r3, [r7, #4]
10002bd0:	685b      	ldr	r3, [r3, #4]
10002bd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
10002bd6:	d010      	beq.n	10002bfa <ADC_ConfigureBoostMode+0x5a>
10002bd8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
10002bdc:	d811      	bhi.n	10002c02 <ADC_ConfigureBoostMode+0x62>
10002bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
10002be2:	d002      	beq.n	10002bea <ADC_ConfigureBoostMode+0x4a>
10002be4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
10002be8:	d10b      	bne.n	10002c02 <ADC_ConfigureBoostMode+0x62>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
10002bea:	687b      	ldr	r3, [r7, #4]
10002bec:	685b      	ldr	r3, [r3, #4]
10002bee:	0c1b      	lsrs	r3, r3, #16
10002bf0:	68fa      	ldr	r2, [r7, #12]
10002bf2:	fbb2 f3f3 	udiv	r3, r2, r3
10002bf6:	60fb      	str	r3, [r7, #12]
        break;
10002bf8:	e004      	b.n	10002c04 <ADC_ConfigureBoostMode+0x64>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
10002bfa:	68fb      	ldr	r3, [r7, #12]
10002bfc:	089b      	lsrs	r3, r3, #2
10002bfe:	60fb      	str	r3, [r7, #12]
        break;
10002c00:	e000      	b.n	10002c04 <ADC_ConfigureBoostMode+0x64>
      default:
        break;
10002c02:	bf00      	nop
    switch(hadc->Init.ClockPrescaler)
10002c04:	e062      	b.n	10002ccc <ADC_ConfigureBoostMode+0x12c>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
10002c06:	f04f 0008 	mov.w	r0, #8
10002c0a:	f04f 0100 	mov.w	r1, #0
10002c0e:	f004 fe8f 	bl	10007930 <HAL_RCCEx_GetPeriphCLKFreq>
10002c12:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
10002c14:	687b      	ldr	r3, [r7, #4]
10002c16:	685b      	ldr	r3, [r3, #4]
10002c18:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
10002c1c:	d051      	beq.n	10002cc2 <ADC_ConfigureBoostMode+0x122>
10002c1e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
10002c22:	d852      	bhi.n	10002cca <ADC_ConfigureBoostMode+0x12a>
10002c24:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
10002c28:	d047      	beq.n	10002cba <ADC_ConfigureBoostMode+0x11a>
10002c2a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
10002c2e:	d84c      	bhi.n	10002cca <ADC_ConfigureBoostMode+0x12a>
10002c30:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
10002c34:	d03d      	beq.n	10002cb2 <ADC_ConfigureBoostMode+0x112>
10002c36:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
10002c3a:	d846      	bhi.n	10002cca <ADC_ConfigureBoostMode+0x12a>
10002c3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
10002c40:	d033      	beq.n	10002caa <ADC_ConfigureBoostMode+0x10a>
10002c42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
10002c46:	d840      	bhi.n	10002cca <ADC_ConfigureBoostMode+0x12a>
10002c48:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
10002c4c:	d029      	beq.n	10002ca2 <ADC_ConfigureBoostMode+0x102>
10002c4e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
10002c52:	d83a      	bhi.n	10002cca <ADC_ConfigureBoostMode+0x12a>
10002c54:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
10002c58:	d01a      	beq.n	10002c90 <ADC_ConfigureBoostMode+0xf0>
10002c5a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
10002c5e:	d834      	bhi.n	10002cca <ADC_ConfigureBoostMode+0x12a>
10002c60:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
10002c64:	d014      	beq.n	10002c90 <ADC_ConfigureBoostMode+0xf0>
10002c66:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
10002c6a:	d82e      	bhi.n	10002cca <ADC_ConfigureBoostMode+0x12a>
10002c6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
10002c70:	d00e      	beq.n	10002c90 <ADC_ConfigureBoostMode+0xf0>
10002c72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
10002c76:	d828      	bhi.n	10002cca <ADC_ConfigureBoostMode+0x12a>
10002c78:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
10002c7c:	d008      	beq.n	10002c90 <ADC_ConfigureBoostMode+0xf0>
10002c7e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
10002c82:	d822      	bhi.n	10002cca <ADC_ConfigureBoostMode+0x12a>
10002c84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
10002c88:	d002      	beq.n	10002c90 <ADC_ConfigureBoostMode+0xf0>
10002c8a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
10002c8e:	d11c      	bne.n	10002cca <ADC_ConfigureBoostMode+0x12a>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
10002c90:	687b      	ldr	r3, [r7, #4]
10002c92:	685b      	ldr	r3, [r3, #4]
10002c94:	0c9b      	lsrs	r3, r3, #18
10002c96:	005b      	lsls	r3, r3, #1
10002c98:	68fa      	ldr	r2, [r7, #12]
10002c9a:	fbb2 f3f3 	udiv	r3, r2, r3
10002c9e:	60fb      	str	r3, [r7, #12]
        break;
10002ca0:	e014      	b.n	10002ccc <ADC_ConfigureBoostMode+0x12c>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
10002ca2:	68fb      	ldr	r3, [r7, #12]
10002ca4:	091b      	lsrs	r3, r3, #4
10002ca6:	60fb      	str	r3, [r7, #12]
      break;
10002ca8:	e010      	b.n	10002ccc <ADC_ConfigureBoostMode+0x12c>
        case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
10002caa:	68fb      	ldr	r3, [r7, #12]
10002cac:	095b      	lsrs	r3, r3, #5
10002cae:	60fb      	str	r3, [r7, #12]
        break;
10002cb0:	e00c      	b.n	10002ccc <ADC_ConfigureBoostMode+0x12c>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
10002cb2:	68fb      	ldr	r3, [r7, #12]
10002cb4:	099b      	lsrs	r3, r3, #6
10002cb6:	60fb      	str	r3, [r7, #12]
        break;
10002cb8:	e008      	b.n	10002ccc <ADC_ConfigureBoostMode+0x12c>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
10002cba:	68fb      	ldr	r3, [r7, #12]
10002cbc:	09db      	lsrs	r3, r3, #7
10002cbe:	60fb      	str	r3, [r7, #12]
        break;
10002cc0:	e004      	b.n	10002ccc <ADC_ConfigureBoostMode+0x12c>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
10002cc2:	68fb      	ldr	r3, [r7, #12]
10002cc4:	0a1b      	lsrs	r3, r3, #8
10002cc6:	60fb      	str	r3, [r7, #12]
        break;
10002cc8:	e000      	b.n	10002ccc <ADC_ConfigureBoostMode+0x12c>
      default:
        break;
10002cca:	bf00      	nop
    }
  }

  if (freq > 20000000UL)
10002ccc:	68fb      	ldr	r3, [r7, #12]
10002cce:	4a0e      	ldr	r2, [pc, #56]	; (10002d08 <ADC_ConfigureBoostMode+0x168>)
10002cd0:	4293      	cmp	r3, r2
10002cd2:	d908      	bls.n	10002ce6 <ADC_ConfigureBoostMode+0x146>
  {
    SET_BIT(hadc->Instance->CR, ADC_CR_BOOST);
10002cd4:	687b      	ldr	r3, [r7, #4]
10002cd6:	681b      	ldr	r3, [r3, #0]
10002cd8:	689a      	ldr	r2, [r3, #8]
10002cda:	687b      	ldr	r3, [r7, #4]
10002cdc:	681b      	ldr	r3, [r3, #0]
10002cde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
10002ce2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    CLEAR_BIT(hadc->Instance->CR, 0);
  }
}
10002ce4:	e005      	b.n	10002cf2 <ADC_ConfigureBoostMode+0x152>
    CLEAR_BIT(hadc->Instance->CR, 0);
10002ce6:	687b      	ldr	r3, [r7, #4]
10002ce8:	681a      	ldr	r2, [r3, #0]
10002cea:	687b      	ldr	r3, [r7, #4]
10002cec:	681b      	ldr	r3, [r3, #0]
10002cee:	6892      	ldr	r2, [r2, #8]
10002cf0:	609a      	str	r2, [r3, #8]
}
10002cf2:	bf00      	nop
10002cf4:	3710      	adds	r7, #16
10002cf6:	46bd      	mov	sp, r7
10002cf8:	bd80      	pop	{r7, pc}
10002cfa:	bf00      	nop
10002cfc:	48003000 	.word	0x48003000
10002d00:	48003100 	.word	0x48003100
10002d04:	48003300 	.word	0x48003300
10002d08:	01312d00 	.word	0x01312d00

10002d0c <LL_ADC_StartCalibration>:
{
10002d0c:	b480      	push	{r7}
10002d0e:	b085      	sub	sp, #20
10002d10:	af00      	add	r7, sp, #0
10002d12:	60f8      	str	r0, [r7, #12]
10002d14:	60b9      	str	r1, [r7, #8]
10002d16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
10002d18:	68fb      	ldr	r3, [r7, #12]
10002d1a:	689a      	ldr	r2, [r3, #8]
10002d1c:	4b09      	ldr	r3, [pc, #36]	; (10002d44 <LL_ADC_StartCalibration+0x38>)
10002d1e:	4013      	ands	r3, r2
10002d20:	68ba      	ldr	r2, [r7, #8]
10002d22:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
10002d26:	687a      	ldr	r2, [r7, #4]
10002d28:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
10002d2c:	430a      	orrs	r2, r1
10002d2e:	4313      	orrs	r3, r2
10002d30:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
10002d34:	68fb      	ldr	r3, [r7, #12]
10002d36:	609a      	str	r2, [r3, #8]
}
10002d38:	bf00      	nop
10002d3a:	3714      	adds	r7, #20
10002d3c:	46bd      	mov	sp, r7
10002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
10002d42:	4770      	bx	lr
10002d44:	3ffeffc0 	.word	0x3ffeffc0

10002d48 <LL_ADC_IsCalibrationOnGoing>:
{
10002d48:	b480      	push	{r7}
10002d4a:	b083      	sub	sp, #12
10002d4c:	af00      	add	r7, sp, #0
10002d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
10002d50:	687b      	ldr	r3, [r7, #4]
10002d52:	689b      	ldr	r3, [r3, #8]
10002d54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002d58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002d5c:	d101      	bne.n	10002d62 <LL_ADC_IsCalibrationOnGoing+0x1a>
10002d5e:	2301      	movs	r3, #1
10002d60:	e000      	b.n	10002d64 <LL_ADC_IsCalibrationOnGoing+0x1c>
10002d62:	2300      	movs	r3, #0
}
10002d64:	4618      	mov	r0, r3
10002d66:	370c      	adds	r7, #12
10002d68:	46bd      	mov	sp, r7
10002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
10002d6e:	4770      	bx	lr

10002d70 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
10002d70:	b580      	push	{r7, lr}
10002d72:	b086      	sub	sp, #24
10002d74:	af00      	add	r7, sp, #0
10002d76:	60f8      	str	r0, [r7, #12]
10002d78:	60b9      	str	r1, [r7, #8]
10002d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
10002d7c:	2300      	movs	r3, #0
10002d7e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
10002d80:	68fb      	ldr	r3, [r7, #12]
10002d82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
10002d86:	2b01      	cmp	r3, #1
10002d88:	d101      	bne.n	10002d8e <HAL_ADCEx_Calibration_Start+0x1e>
10002d8a:	2302      	movs	r3, #2
10002d8c:	e04e      	b.n	10002e2c <HAL_ADCEx_Calibration_Start+0xbc>
10002d8e:	68fb      	ldr	r3, [r7, #12]
10002d90:	2201      	movs	r2, #1
10002d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
10002d96:	68f8      	ldr	r0, [r7, #12]
10002d98:	f7ff fea2 	bl	10002ae0 <ADC_Disable>
10002d9c:	4603      	mov	r3, r0
10002d9e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
10002da0:	7dfb      	ldrb	r3, [r7, #23]
10002da2:	2b00      	cmp	r3, #0
10002da4:	d137      	bne.n	10002e16 <HAL_ADCEx_Calibration_Start+0xa6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
10002da6:	68fb      	ldr	r3, [r7, #12]
10002da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002daa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
10002dae:	f023 0302 	bic.w	r3, r3, #2
10002db2:	f043 0202 	orr.w	r2, r3, #2
10002db6:	68fb      	ldr	r3, [r7, #12]
10002db8:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance , CalibrationMode, SingleDiff );
10002dba:	68fb      	ldr	r3, [r7, #12]
10002dbc:	681b      	ldr	r3, [r3, #0]
10002dbe:	687a      	ldr	r2, [r7, #4]
10002dc0:	68b9      	ldr	r1, [r7, #8]
10002dc2:	4618      	mov	r0, r3
10002dc4:	f7ff ffa2 	bl	10002d0c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
10002dc8:	e014      	b.n	10002df4 <HAL_ADCEx_Calibration_Start+0x84>
    {
      wait_loop_index++;
10002dca:	693b      	ldr	r3, [r7, #16]
10002dcc:	3301      	adds	r3, #1
10002dce:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
10002dd0:	693b      	ldr	r3, [r7, #16]
10002dd2:	4a18      	ldr	r2, [pc, #96]	; (10002e34 <HAL_ADCEx_Calibration_Start+0xc4>)
10002dd4:	4293      	cmp	r3, r2
10002dd6:	d90d      	bls.n	10002df4 <HAL_ADCEx_Calibration_Start+0x84>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
10002dd8:	68fb      	ldr	r3, [r7, #12]
10002dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002ddc:	f023 0312 	bic.w	r3, r3, #18
10002de0:	f043 0210 	orr.w	r2, r3, #16
10002de4:	68fb      	ldr	r3, [r7, #12]
10002de6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
10002de8:	68fb      	ldr	r3, [r7, #12]
10002dea:	2200      	movs	r2, #0
10002dec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
10002df0:	2301      	movs	r3, #1
10002df2:	e01b      	b.n	10002e2c <HAL_ADCEx_Calibration_Start+0xbc>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
10002df4:	68fb      	ldr	r3, [r7, #12]
10002df6:	681b      	ldr	r3, [r3, #0]
10002df8:	4618      	mov	r0, r3
10002dfa:	f7ff ffa5 	bl	10002d48 <LL_ADC_IsCalibrationOnGoing>
10002dfe:	4603      	mov	r3, r0
10002e00:	2b00      	cmp	r3, #0
10002e02:	d1e2      	bne.n	10002dca <HAL_ADCEx_Calibration_Start+0x5a>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
10002e04:	68fb      	ldr	r3, [r7, #12]
10002e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002e08:	f023 0303 	bic.w	r3, r3, #3
10002e0c:	f043 0201 	orr.w	r2, r3, #1
10002e10:	68fb      	ldr	r3, [r7, #12]
10002e12:	655a      	str	r2, [r3, #84]	; 0x54
10002e14:	e005      	b.n	10002e22 <HAL_ADCEx_Calibration_Start+0xb2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10002e16:	68fb      	ldr	r3, [r7, #12]
10002e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002e1a:	f043 0210 	orr.w	r2, r3, #16
10002e1e:	68fb      	ldr	r3, [r7, #12]
10002e20:	655a      	str	r2, [r3, #84]	; 0x54

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
10002e22:	68fb      	ldr	r3, [r7, #12]
10002e24:	2200      	movs	r2, #0
10002e26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return tmp_hal_status;
10002e2a:	7dfb      	ldrb	r3, [r7, #23]
}
10002e2c:	4618      	mov	r0, r3
10002e2e:	3718      	adds	r7, #24
10002e30:	46bd      	mov	sp, r7
10002e32:	bd80      	pop	{r7, pc}
10002e34:	32021fbf 	.word	0x32021fbf

10002e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10002e38:	b480      	push	{r7}
10002e3a:	b085      	sub	sp, #20
10002e3c:	af00      	add	r7, sp, #0
10002e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
10002e40:	687b      	ldr	r3, [r7, #4]
10002e42:	f003 0307 	and.w	r3, r3, #7
10002e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
10002e48:	4b0c      	ldr	r3, [pc, #48]	; (10002e7c <__NVIC_SetPriorityGrouping+0x44>)
10002e4a:	68db      	ldr	r3, [r3, #12]
10002e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
10002e4e:	68ba      	ldr	r2, [r7, #8]
10002e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
10002e54:	4013      	ands	r3, r2
10002e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
10002e58:	68fb      	ldr	r3, [r7, #12]
10002e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10002e5c:	68bb      	ldr	r3, [r7, #8]
10002e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
10002e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
10002e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
10002e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
10002e6a:	4a04      	ldr	r2, [pc, #16]	; (10002e7c <__NVIC_SetPriorityGrouping+0x44>)
10002e6c:	68bb      	ldr	r3, [r7, #8]
10002e6e:	60d3      	str	r3, [r2, #12]
}
10002e70:	bf00      	nop
10002e72:	3714      	adds	r7, #20
10002e74:	46bd      	mov	sp, r7
10002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
10002e7a:	4770      	bx	lr
10002e7c:	e000ed00 	.word	0xe000ed00

10002e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
10002e80:	b480      	push	{r7}
10002e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
10002e84:	4b04      	ldr	r3, [pc, #16]	; (10002e98 <__NVIC_GetPriorityGrouping+0x18>)
10002e86:	68db      	ldr	r3, [r3, #12]
10002e88:	0a1b      	lsrs	r3, r3, #8
10002e8a:	f003 0307 	and.w	r3, r3, #7
}
10002e8e:	4618      	mov	r0, r3
10002e90:	46bd      	mov	sp, r7
10002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
10002e96:	4770      	bx	lr
10002e98:	e000ed00 	.word	0xe000ed00

10002e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10002e9c:	b480      	push	{r7}
10002e9e:	b083      	sub	sp, #12
10002ea0:	af00      	add	r7, sp, #0
10002ea2:	4603      	mov	r3, r0
10002ea4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10002ea6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10002eaa:	2b00      	cmp	r3, #0
10002eac:	db0b      	blt.n	10002ec6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002eae:	88fb      	ldrh	r3, [r7, #6]
10002eb0:	f003 021f 	and.w	r2, r3, #31
10002eb4:	4907      	ldr	r1, [pc, #28]	; (10002ed4 <__NVIC_EnableIRQ+0x38>)
10002eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10002eba:	095b      	lsrs	r3, r3, #5
10002ebc:	2001      	movs	r0, #1
10002ebe:	fa00 f202 	lsl.w	r2, r0, r2
10002ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
10002ec6:	bf00      	nop
10002ec8:	370c      	adds	r7, #12
10002eca:	46bd      	mov	sp, r7
10002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
10002ed0:	4770      	bx	lr
10002ed2:	bf00      	nop
10002ed4:	e000e100 	.word	0xe000e100

10002ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10002ed8:	b480      	push	{r7}
10002eda:	b083      	sub	sp, #12
10002edc:	af00      	add	r7, sp, #0
10002ede:	4603      	mov	r3, r0
10002ee0:	6039      	str	r1, [r7, #0]
10002ee2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10002ee4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10002ee8:	2b00      	cmp	r3, #0
10002eea:	db0a      	blt.n	10002f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10002eec:	683b      	ldr	r3, [r7, #0]
10002eee:	b2da      	uxtb	r2, r3
10002ef0:	490c      	ldr	r1, [pc, #48]	; (10002f24 <__NVIC_SetPriority+0x4c>)
10002ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10002ef6:	0112      	lsls	r2, r2, #4
10002ef8:	b2d2      	uxtb	r2, r2
10002efa:	440b      	add	r3, r1
10002efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
10002f00:	e00a      	b.n	10002f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10002f02:	683b      	ldr	r3, [r7, #0]
10002f04:	b2da      	uxtb	r2, r3
10002f06:	4908      	ldr	r1, [pc, #32]	; (10002f28 <__NVIC_SetPriority+0x50>)
10002f08:	88fb      	ldrh	r3, [r7, #6]
10002f0a:	f003 030f 	and.w	r3, r3, #15
10002f0e:	3b04      	subs	r3, #4
10002f10:	0112      	lsls	r2, r2, #4
10002f12:	b2d2      	uxtb	r2, r2
10002f14:	440b      	add	r3, r1
10002f16:	761a      	strb	r2, [r3, #24]
}
10002f18:	bf00      	nop
10002f1a:	370c      	adds	r7, #12
10002f1c:	46bd      	mov	sp, r7
10002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
10002f22:	4770      	bx	lr
10002f24:	e000e100 	.word	0xe000e100
10002f28:	e000ed00 	.word	0xe000ed00

10002f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
10002f2c:	b480      	push	{r7}
10002f2e:	b089      	sub	sp, #36	; 0x24
10002f30:	af00      	add	r7, sp, #0
10002f32:	60f8      	str	r0, [r7, #12]
10002f34:	60b9      	str	r1, [r7, #8]
10002f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
10002f38:	68fb      	ldr	r3, [r7, #12]
10002f3a:	f003 0307 	and.w	r3, r3, #7
10002f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
10002f40:	69fb      	ldr	r3, [r7, #28]
10002f42:	f1c3 0307 	rsb	r3, r3, #7
10002f46:	2b04      	cmp	r3, #4
10002f48:	bf28      	it	cs
10002f4a:	2304      	movcs	r3, #4
10002f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
10002f4e:	69fb      	ldr	r3, [r7, #28]
10002f50:	3304      	adds	r3, #4
10002f52:	2b06      	cmp	r3, #6
10002f54:	d902      	bls.n	10002f5c <NVIC_EncodePriority+0x30>
10002f56:	69fb      	ldr	r3, [r7, #28]
10002f58:	3b03      	subs	r3, #3
10002f5a:	e000      	b.n	10002f5e <NVIC_EncodePriority+0x32>
10002f5c:	2300      	movs	r3, #0
10002f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10002f60:	f04f 32ff 	mov.w	r2, #4294967295
10002f64:	69bb      	ldr	r3, [r7, #24]
10002f66:	fa02 f303 	lsl.w	r3, r2, r3
10002f6a:	43da      	mvns	r2, r3
10002f6c:	68bb      	ldr	r3, [r7, #8]
10002f6e:	401a      	ands	r2, r3
10002f70:	697b      	ldr	r3, [r7, #20]
10002f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
10002f74:	f04f 31ff 	mov.w	r1, #4294967295
10002f78:	697b      	ldr	r3, [r7, #20]
10002f7a:	fa01 f303 	lsl.w	r3, r1, r3
10002f7e:	43d9      	mvns	r1, r3
10002f80:	687b      	ldr	r3, [r7, #4]
10002f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10002f84:	4313      	orrs	r3, r2
         );
}
10002f86:	4618      	mov	r0, r3
10002f88:	3724      	adds	r7, #36	; 0x24
10002f8a:	46bd      	mov	sp, r7
10002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
10002f90:	4770      	bx	lr
	...

10002f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10002f94:	b580      	push	{r7, lr}
10002f96:	b082      	sub	sp, #8
10002f98:	af00      	add	r7, sp, #0
10002f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10002f9c:	687b      	ldr	r3, [r7, #4]
10002f9e:	3b01      	subs	r3, #1
10002fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
10002fa4:	d301      	bcc.n	10002faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
10002fa6:	2301      	movs	r3, #1
10002fa8:	e00f      	b.n	10002fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10002faa:	4a0a      	ldr	r2, [pc, #40]	; (10002fd4 <SysTick_Config+0x40>)
10002fac:	687b      	ldr	r3, [r7, #4]
10002fae:	3b01      	subs	r3, #1
10002fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10002fb2:	210f      	movs	r1, #15
10002fb4:	f04f 30ff 	mov.w	r0, #4294967295
10002fb8:	f7ff ff8e 	bl	10002ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10002fbc:	4b05      	ldr	r3, [pc, #20]	; (10002fd4 <SysTick_Config+0x40>)
10002fbe:	2200      	movs	r2, #0
10002fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10002fc2:	4b04      	ldr	r3, [pc, #16]	; (10002fd4 <SysTick_Config+0x40>)
10002fc4:	2207      	movs	r2, #7
10002fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10002fc8:	2300      	movs	r3, #0
}
10002fca:	4618      	mov	r0, r3
10002fcc:	3708      	adds	r7, #8
10002fce:	46bd      	mov	sp, r7
10002fd0:	bd80      	pop	{r7, pc}
10002fd2:	bf00      	nop
10002fd4:	e000e010 	.word	0xe000e010

10002fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10002fd8:	b580      	push	{r7, lr}
10002fda:	b082      	sub	sp, #8
10002fdc:	af00      	add	r7, sp, #0
10002fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
10002fe0:	6878      	ldr	r0, [r7, #4]
10002fe2:	f7ff ff29 	bl	10002e38 <__NVIC_SetPriorityGrouping>
}
10002fe6:	bf00      	nop
10002fe8:	3708      	adds	r7, #8
10002fea:	46bd      	mov	sp, r7
10002fec:	bd80      	pop	{r7, pc}

10002fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10002fee:	b580      	push	{r7, lr}
10002ff0:	b086      	sub	sp, #24
10002ff2:	af00      	add	r7, sp, #0
10002ff4:	4603      	mov	r3, r0
10002ff6:	60b9      	str	r1, [r7, #8]
10002ff8:	607a      	str	r2, [r7, #4]
10002ffa:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
10002ffc:	2300      	movs	r3, #0
10002ffe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
10003000:	f7ff ff3e 	bl	10002e80 <__NVIC_GetPriorityGrouping>
10003004:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
10003006:	687a      	ldr	r2, [r7, #4]
10003008:	68b9      	ldr	r1, [r7, #8]
1000300a:	6978      	ldr	r0, [r7, #20]
1000300c:	f7ff ff8e 	bl	10002f2c <NVIC_EncodePriority>
10003010:	4602      	mov	r2, r0
10003012:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
10003016:	4611      	mov	r1, r2
10003018:	4618      	mov	r0, r3
1000301a:	f7ff ff5d 	bl	10002ed8 <__NVIC_SetPriority>
}
1000301e:	bf00      	nop
10003020:	3718      	adds	r7, #24
10003022:	46bd      	mov	sp, r7
10003024:	bd80      	pop	{r7, pc}

10003026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10003026:	b580      	push	{r7, lr}
10003028:	b082      	sub	sp, #8
1000302a:	af00      	add	r7, sp, #0
1000302c:	4603      	mov	r3, r0
1000302e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10003030:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10003034:	4618      	mov	r0, r3
10003036:	f7ff ff31 	bl	10002e9c <__NVIC_EnableIRQ>
}
1000303a:	bf00      	nop
1000303c:	3708      	adds	r7, #8
1000303e:	46bd      	mov	sp, r7
10003040:	bd80      	pop	{r7, pc}

10003042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10003042:	b580      	push	{r7, lr}
10003044:	b082      	sub	sp, #8
10003046:	af00      	add	r7, sp, #0
10003048:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
1000304a:	6878      	ldr	r0, [r7, #4]
1000304c:	f7ff ffa2 	bl	10002f94 <SysTick_Config>
10003050:	4603      	mov	r3, r0
}
10003052:	4618      	mov	r0, r3
10003054:	3708      	adds	r7, #8
10003056:	46bd      	mov	sp, r7
10003058:	bd80      	pop	{r7, pc}
	...

1000305c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
1000305c:	b580      	push	{r7, lr}
1000305e:	b082      	sub	sp, #8
10003060:	af00      	add	r7, sp, #0
10003062:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
10003064:	687b      	ldr	r3, [r7, #4]
10003066:	2b00      	cmp	r3, #0
10003068:	d101      	bne.n	1000306e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
1000306a:	2301      	movs	r3, #1
1000306c:	e054      	b.n	10003118 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
1000306e:	687b      	ldr	r3, [r7, #4]
10003070:	7f5b      	ldrb	r3, [r3, #29]
10003072:	b2db      	uxtb	r3, r3
10003074:	2b00      	cmp	r3, #0
10003076:	d105      	bne.n	10003084 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
10003078:	687b      	ldr	r3, [r7, #4]
1000307a:	2200      	movs	r2, #0
1000307c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
1000307e:	6878      	ldr	r0, [r7, #4]
10003080:	f7fe fa6c 	bl	1000155c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
10003084:	687b      	ldr	r3, [r7, #4]
10003086:	2202      	movs	r2, #2
10003088:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
1000308a:	687b      	ldr	r3, [r7, #4]
1000308c:	791b      	ldrb	r3, [r3, #4]
1000308e:	2b00      	cmp	r3, #0
10003090:	d10c      	bne.n	100030ac <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
10003092:	687b      	ldr	r3, [r7, #4]
10003094:	681b      	ldr	r3, [r3, #0]
10003096:	4a22      	ldr	r2, [pc, #136]	; (10003120 <HAL_CRC_Init+0xc4>)
10003098:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
1000309a:	687b      	ldr	r3, [r7, #4]
1000309c:	681b      	ldr	r3, [r3, #0]
1000309e:	689a      	ldr	r2, [r3, #8]
100030a0:	687b      	ldr	r3, [r7, #4]
100030a2:	681b      	ldr	r3, [r3, #0]
100030a4:	f022 0218 	bic.w	r2, r2, #24
100030a8:	609a      	str	r2, [r3, #8]
100030aa:	e00c      	b.n	100030c6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
100030ac:	687b      	ldr	r3, [r7, #4]
100030ae:	6899      	ldr	r1, [r3, #8]
100030b0:	687b      	ldr	r3, [r7, #4]
100030b2:	68db      	ldr	r3, [r3, #12]
100030b4:	461a      	mov	r2, r3
100030b6:	6878      	ldr	r0, [r7, #4]
100030b8:	f000 f834 	bl	10003124 <HAL_CRCEx_Polynomial_Set>
100030bc:	4603      	mov	r3, r0
100030be:	2b00      	cmp	r3, #0
100030c0:	d001      	beq.n	100030c6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
100030c2:	2301      	movs	r3, #1
100030c4:	e028      	b.n	10003118 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
100030c6:	687b      	ldr	r3, [r7, #4]
100030c8:	795b      	ldrb	r3, [r3, #5]
100030ca:	2b00      	cmp	r3, #0
100030cc:	d105      	bne.n	100030da <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
100030ce:	687b      	ldr	r3, [r7, #4]
100030d0:	681b      	ldr	r3, [r3, #0]
100030d2:	f04f 32ff 	mov.w	r2, #4294967295
100030d6:	611a      	str	r2, [r3, #16]
100030d8:	e004      	b.n	100030e4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
100030da:	687b      	ldr	r3, [r7, #4]
100030dc:	681b      	ldr	r3, [r3, #0]
100030de:	687a      	ldr	r2, [r7, #4]
100030e0:	6912      	ldr	r2, [r2, #16]
100030e2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
100030e4:	687b      	ldr	r3, [r7, #4]
100030e6:	681b      	ldr	r3, [r3, #0]
100030e8:	689b      	ldr	r3, [r3, #8]
100030ea:	f023 0160 	bic.w	r1, r3, #96	; 0x60
100030ee:	687b      	ldr	r3, [r7, #4]
100030f0:	695a      	ldr	r2, [r3, #20]
100030f2:	687b      	ldr	r3, [r7, #4]
100030f4:	681b      	ldr	r3, [r3, #0]
100030f6:	430a      	orrs	r2, r1
100030f8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
100030fa:	687b      	ldr	r3, [r7, #4]
100030fc:	681b      	ldr	r3, [r3, #0]
100030fe:	689b      	ldr	r3, [r3, #8]
10003100:	f023 0180 	bic.w	r1, r3, #128	; 0x80
10003104:	687b      	ldr	r3, [r7, #4]
10003106:	699a      	ldr	r2, [r3, #24]
10003108:	687b      	ldr	r3, [r7, #4]
1000310a:	681b      	ldr	r3, [r3, #0]
1000310c:	430a      	orrs	r2, r1
1000310e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
10003110:	687b      	ldr	r3, [r7, #4]
10003112:	2201      	movs	r2, #1
10003114:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
10003116:	2300      	movs	r3, #0
}
10003118:	4618      	mov	r0, r3
1000311a:	3708      	adds	r7, #8
1000311c:	46bd      	mov	sp, r7
1000311e:	bd80      	pop	{r7, pc}
10003120:	04c11db7 	.word	0x04c11db7

10003124 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
10003124:	b480      	push	{r7}
10003126:	b087      	sub	sp, #28
10003128:	af00      	add	r7, sp, #0
1000312a:	60f8      	str	r0, [r7, #12]
1000312c:	60b9      	str	r1, [r7, #8]
1000312e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
10003130:	2300      	movs	r3, #0
10003132:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
10003134:	231f      	movs	r3, #31
10003136:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
10003138:	bf00      	nop
1000313a:	693b      	ldr	r3, [r7, #16]
1000313c:	1e5a      	subs	r2, r3, #1
1000313e:	613a      	str	r2, [r7, #16]
10003140:	2b00      	cmp	r3, #0
10003142:	d009      	beq.n	10003158 <HAL_CRCEx_Polynomial_Set+0x34>
10003144:	693b      	ldr	r3, [r7, #16]
10003146:	f003 031f 	and.w	r3, r3, #31
1000314a:	68ba      	ldr	r2, [r7, #8]
1000314c:	fa22 f303 	lsr.w	r3, r2, r3
10003150:	f003 0301 	and.w	r3, r3, #1
10003154:	2b00      	cmp	r3, #0
10003156:	d0f0      	beq.n	1000313a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
10003158:	687b      	ldr	r3, [r7, #4]
1000315a:	2b18      	cmp	r3, #24
1000315c:	d846      	bhi.n	100031ec <HAL_CRCEx_Polynomial_Set+0xc8>
1000315e:	a201      	add	r2, pc, #4	; (adr r2, 10003164 <HAL_CRCEx_Polynomial_Set+0x40>)
10003160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10003164:	100031f3 	.word	0x100031f3
10003168:	100031ed 	.word	0x100031ed
1000316c:	100031ed 	.word	0x100031ed
10003170:	100031ed 	.word	0x100031ed
10003174:	100031ed 	.word	0x100031ed
10003178:	100031ed 	.word	0x100031ed
1000317c:	100031ed 	.word	0x100031ed
10003180:	100031ed 	.word	0x100031ed
10003184:	100031e1 	.word	0x100031e1
10003188:	100031ed 	.word	0x100031ed
1000318c:	100031ed 	.word	0x100031ed
10003190:	100031ed 	.word	0x100031ed
10003194:	100031ed 	.word	0x100031ed
10003198:	100031ed 	.word	0x100031ed
1000319c:	100031ed 	.word	0x100031ed
100031a0:	100031ed 	.word	0x100031ed
100031a4:	100031d5 	.word	0x100031d5
100031a8:	100031ed 	.word	0x100031ed
100031ac:	100031ed 	.word	0x100031ed
100031b0:	100031ed 	.word	0x100031ed
100031b4:	100031ed 	.word	0x100031ed
100031b8:	100031ed 	.word	0x100031ed
100031bc:	100031ed 	.word	0x100031ed
100031c0:	100031ed 	.word	0x100031ed
100031c4:	100031c9 	.word	0x100031c9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
100031c8:	693b      	ldr	r3, [r7, #16]
100031ca:	2b06      	cmp	r3, #6
100031cc:	d913      	bls.n	100031f6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
100031ce:	2301      	movs	r3, #1
100031d0:	75fb      	strb	r3, [r7, #23]
      }
      break;
100031d2:	e010      	b.n	100031f6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
100031d4:	693b      	ldr	r3, [r7, #16]
100031d6:	2b07      	cmp	r3, #7
100031d8:	d90f      	bls.n	100031fa <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
100031da:	2301      	movs	r3, #1
100031dc:	75fb      	strb	r3, [r7, #23]
      }
      break;
100031de:	e00c      	b.n	100031fa <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
100031e0:	693b      	ldr	r3, [r7, #16]
100031e2:	2b0f      	cmp	r3, #15
100031e4:	d90b      	bls.n	100031fe <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
100031e6:	2301      	movs	r3, #1
100031e8:	75fb      	strb	r3, [r7, #23]
      }
      break;
100031ea:	e008      	b.n	100031fe <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
100031ec:	2301      	movs	r3, #1
100031ee:	75fb      	strb	r3, [r7, #23]
      break;
100031f0:	e006      	b.n	10003200 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
100031f2:	bf00      	nop
100031f4:	e004      	b.n	10003200 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
100031f6:	bf00      	nop
100031f8:	e002      	b.n	10003200 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
100031fa:	bf00      	nop
100031fc:	e000      	b.n	10003200 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
100031fe:	bf00      	nop
  }
  if (status == HAL_OK)
10003200:	7dfb      	ldrb	r3, [r7, #23]
10003202:	2b00      	cmp	r3, #0
10003204:	d10d      	bne.n	10003222 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
10003206:	68fb      	ldr	r3, [r7, #12]
10003208:	681b      	ldr	r3, [r3, #0]
1000320a:	68ba      	ldr	r2, [r7, #8]
1000320c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
1000320e:	68fb      	ldr	r3, [r7, #12]
10003210:	681b      	ldr	r3, [r3, #0]
10003212:	689b      	ldr	r3, [r3, #8]
10003214:	f023 0118 	bic.w	r1, r3, #24
10003218:	68fb      	ldr	r3, [r7, #12]
1000321a:	681b      	ldr	r3, [r3, #0]
1000321c:	687a      	ldr	r2, [r7, #4]
1000321e:	430a      	orrs	r2, r1
10003220:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
10003222:	7dfb      	ldrb	r3, [r7, #23]
}
10003224:	4618      	mov	r0, r3
10003226:	371c      	adds	r7, #28
10003228:	46bd      	mov	sp, r7
1000322a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000322e:	4770      	bx	lr

10003230 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
10003230:	b480      	push	{r7}
10003232:	b089      	sub	sp, #36	; 0x24
10003234:	af00      	add	r7, sp, #0
10003236:	6078      	str	r0, [r7, #4]
10003238:	6039      	str	r1, [r7, #0]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef * EXTI_CurrentCPU;

#if defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_C2; /* EXTI for CM4 CPU */
1000323a:	4b8a      	ldr	r3, [pc, #552]	; (10003464 <HAL_GPIO_Init+0x234>)
1000323c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
1000323e:	2300      	movs	r3, #0
10003240:	61fb      	str	r3, [r7, #28]
10003242:	e191      	b.n	10003568 <HAL_GPIO_Init+0x338>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
10003244:	2201      	movs	r2, #1
10003246:	69fb      	ldr	r3, [r7, #28]
10003248:	fa02 f303 	lsl.w	r3, r2, r3
1000324c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
1000324e:	683b      	ldr	r3, [r7, #0]
10003250:	681b      	ldr	r3, [r3, #0]
10003252:	693a      	ldr	r2, [r7, #16]
10003254:	4013      	ands	r3, r2
10003256:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
10003258:	68fa      	ldr	r2, [r7, #12]
1000325a:	693b      	ldr	r3, [r7, #16]
1000325c:	429a      	cmp	r2, r3
1000325e:	f040 8180 	bne.w	10003562 <HAL_GPIO_Init+0x332>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10003262:	683b      	ldr	r3, [r7, #0]
10003264:	685b      	ldr	r3, [r3, #4]
10003266:	2b02      	cmp	r3, #2
10003268:	d003      	beq.n	10003272 <HAL_GPIO_Init+0x42>
1000326a:	683b      	ldr	r3, [r7, #0]
1000326c:	685b      	ldr	r3, [r3, #4]
1000326e:	2b12      	cmp	r3, #18
10003270:	d123      	bne.n	100032ba <HAL_GPIO_Init+0x8a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
10003272:	69fb      	ldr	r3, [r7, #28]
10003274:	08da      	lsrs	r2, r3, #3
10003276:	687b      	ldr	r3, [r7, #4]
10003278:	3208      	adds	r2, #8
1000327a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1000327e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
10003280:	69fb      	ldr	r3, [r7, #28]
10003282:	f003 0307 	and.w	r3, r3, #7
10003286:	009b      	lsls	r3, r3, #2
10003288:	220f      	movs	r2, #15
1000328a:	fa02 f303 	lsl.w	r3, r2, r3
1000328e:	43db      	mvns	r3, r3
10003290:	69ba      	ldr	r2, [r7, #24]
10003292:	4013      	ands	r3, r2
10003294:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
10003296:	683b      	ldr	r3, [r7, #0]
10003298:	691a      	ldr	r2, [r3, #16]
1000329a:	69fb      	ldr	r3, [r7, #28]
1000329c:	f003 0307 	and.w	r3, r3, #7
100032a0:	009b      	lsls	r3, r3, #2
100032a2:	fa02 f303 	lsl.w	r3, r2, r3
100032a6:	69ba      	ldr	r2, [r7, #24]
100032a8:	4313      	orrs	r3, r2
100032aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
100032ac:	69fb      	ldr	r3, [r7, #28]
100032ae:	08da      	lsrs	r2, r3, #3
100032b0:	687b      	ldr	r3, [r7, #4]
100032b2:	3208      	adds	r2, #8
100032b4:	69b9      	ldr	r1, [r7, #24]
100032b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
100032ba:	687b      	ldr	r3, [r7, #4]
100032bc:	681b      	ldr	r3, [r3, #0]
100032be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
100032c0:	69fb      	ldr	r3, [r7, #28]
100032c2:	005b      	lsls	r3, r3, #1
100032c4:	2203      	movs	r2, #3
100032c6:	fa02 f303 	lsl.w	r3, r2, r3
100032ca:	43db      	mvns	r3, r3
100032cc:	69ba      	ldr	r2, [r7, #24]
100032ce:	4013      	ands	r3, r2
100032d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
100032d2:	683b      	ldr	r3, [r7, #0]
100032d4:	685b      	ldr	r3, [r3, #4]
100032d6:	f003 0203 	and.w	r2, r3, #3
100032da:	69fb      	ldr	r3, [r7, #28]
100032dc:	005b      	lsls	r3, r3, #1
100032de:	fa02 f303 	lsl.w	r3, r2, r3
100032e2:	69ba      	ldr	r2, [r7, #24]
100032e4:	4313      	orrs	r3, r2
100032e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
100032e8:	687b      	ldr	r3, [r7, #4]
100032ea:	69ba      	ldr	r2, [r7, #24]
100032ec:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
100032ee:	683b      	ldr	r3, [r7, #0]
100032f0:	685b      	ldr	r3, [r3, #4]
100032f2:	2b01      	cmp	r3, #1
100032f4:	d00b      	beq.n	1000330e <HAL_GPIO_Init+0xde>
100032f6:	683b      	ldr	r3, [r7, #0]
100032f8:	685b      	ldr	r3, [r3, #4]
100032fa:	2b02      	cmp	r3, #2
100032fc:	d007      	beq.n	1000330e <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
100032fe:	683b      	ldr	r3, [r7, #0]
10003300:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10003302:	2b11      	cmp	r3, #17
10003304:	d003      	beq.n	1000330e <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10003306:	683b      	ldr	r3, [r7, #0]
10003308:	685b      	ldr	r3, [r3, #4]
1000330a:	2b12      	cmp	r3, #18
1000330c:	d130      	bne.n	10003370 <HAL_GPIO_Init+0x140>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
1000330e:	687b      	ldr	r3, [r7, #4]
10003310:	689b      	ldr	r3, [r3, #8]
10003312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
10003314:	69fb      	ldr	r3, [r7, #28]
10003316:	005b      	lsls	r3, r3, #1
10003318:	2203      	movs	r2, #3
1000331a:	fa02 f303 	lsl.w	r3, r2, r3
1000331e:	43db      	mvns	r3, r3
10003320:	69ba      	ldr	r2, [r7, #24]
10003322:	4013      	ands	r3, r2
10003324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
10003326:	683b      	ldr	r3, [r7, #0]
10003328:	68da      	ldr	r2, [r3, #12]
1000332a:	69fb      	ldr	r3, [r7, #28]
1000332c:	005b      	lsls	r3, r3, #1
1000332e:	fa02 f303 	lsl.w	r3, r2, r3
10003332:	69ba      	ldr	r2, [r7, #24]
10003334:	4313      	orrs	r3, r2
10003336:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
10003338:	687b      	ldr	r3, [r7, #4]
1000333a:	69ba      	ldr	r2, [r7, #24]
1000333c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
1000333e:	687b      	ldr	r3, [r7, #4]
10003340:	685b      	ldr	r3, [r3, #4]
10003342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10003344:	2201      	movs	r2, #1
10003346:	69fb      	ldr	r3, [r7, #28]
10003348:	fa02 f303 	lsl.w	r3, r2, r3
1000334c:	43db      	mvns	r3, r3
1000334e:	69ba      	ldr	r2, [r7, #24]
10003350:	4013      	ands	r3, r2
10003352:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
10003354:	683b      	ldr	r3, [r7, #0]
10003356:	685b      	ldr	r3, [r3, #4]
10003358:	091b      	lsrs	r3, r3, #4
1000335a:	f003 0201 	and.w	r2, r3, #1
1000335e:	69fb      	ldr	r3, [r7, #28]
10003360:	fa02 f303 	lsl.w	r3, r2, r3
10003364:	69ba      	ldr	r2, [r7, #24]
10003366:	4313      	orrs	r3, r2
10003368:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
1000336a:	687b      	ldr	r3, [r7, #4]
1000336c:	69ba      	ldr	r2, [r7, #24]
1000336e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
10003370:	687b      	ldr	r3, [r7, #4]
10003372:	68db      	ldr	r3, [r3, #12]
10003374:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
10003376:	69fb      	ldr	r3, [r7, #28]
10003378:	005b      	lsls	r3, r3, #1
1000337a:	2203      	movs	r2, #3
1000337c:	fa02 f303 	lsl.w	r3, r2, r3
10003380:	43db      	mvns	r3, r3
10003382:	69ba      	ldr	r2, [r7, #24]
10003384:	4013      	ands	r3, r2
10003386:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
10003388:	683b      	ldr	r3, [r7, #0]
1000338a:	689a      	ldr	r2, [r3, #8]
1000338c:	69fb      	ldr	r3, [r7, #28]
1000338e:	005b      	lsls	r3, r3, #1
10003390:	fa02 f303 	lsl.w	r3, r2, r3
10003394:	69ba      	ldr	r2, [r7, #24]
10003396:	4313      	orrs	r3, r2
10003398:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
1000339a:	687b      	ldr	r3, [r7, #4]
1000339c:	69ba      	ldr	r2, [r7, #24]
1000339e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
100033a0:	683b      	ldr	r3, [r7, #0]
100033a2:	685b      	ldr	r3, [r3, #4]
100033a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
100033a8:	2b00      	cmp	r3, #0
100033aa:	f000 80da 	beq.w	10003562 <HAL_GPIO_Init+0x332>
      {
        temp = EXTI->EXTICR[position >> 2U];
100033ae:	4a2e      	ldr	r2, [pc, #184]	; (10003468 <HAL_GPIO_Init+0x238>)
100033b0:	69fb      	ldr	r3, [r7, #28]
100033b2:	089b      	lsrs	r3, r3, #2
100033b4:	3318      	adds	r3, #24
100033b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
100033ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFFU << (8U * (position & 0x03U)));
100033bc:	69fb      	ldr	r3, [r7, #28]
100033be:	f003 0303 	and.w	r3, r3, #3
100033c2:	00db      	lsls	r3, r3, #3
100033c4:	22ff      	movs	r2, #255	; 0xff
100033c6:	fa02 f303 	lsl.w	r3, r2, r3
100033ca:	43db      	mvns	r3, r3
100033cc:	69ba      	ldr	r2, [r7, #24]
100033ce:	4013      	ands	r3, r2
100033d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
100033d2:	687b      	ldr	r3, [r7, #4]
100033d4:	4a25      	ldr	r2, [pc, #148]	; (1000346c <HAL_GPIO_Init+0x23c>)
100033d6:	4293      	cmp	r3, r2
100033d8:	d05e      	beq.n	10003498 <HAL_GPIO_Init+0x268>
100033da:	687b      	ldr	r3, [r7, #4]
100033dc:	4a24      	ldr	r2, [pc, #144]	; (10003470 <HAL_GPIO_Init+0x240>)
100033de:	4293      	cmp	r3, r2
100033e0:	d03d      	beq.n	1000345e <HAL_GPIO_Init+0x22e>
100033e2:	687b      	ldr	r3, [r7, #4]
100033e4:	4a23      	ldr	r2, [pc, #140]	; (10003474 <HAL_GPIO_Init+0x244>)
100033e6:	4293      	cmp	r3, r2
100033e8:	d037      	beq.n	1000345a <HAL_GPIO_Init+0x22a>
100033ea:	687b      	ldr	r3, [r7, #4]
100033ec:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
100033f0:	d031      	beq.n	10003456 <HAL_GPIO_Init+0x226>
100033f2:	687b      	ldr	r3, [r7, #4]
100033f4:	4a20      	ldr	r2, [pc, #128]	; (10003478 <HAL_GPIO_Init+0x248>)
100033f6:	4293      	cmp	r3, r2
100033f8:	d02b      	beq.n	10003452 <HAL_GPIO_Init+0x222>
100033fa:	687b      	ldr	r3, [r7, #4]
100033fc:	4a1f      	ldr	r2, [pc, #124]	; (1000347c <HAL_GPIO_Init+0x24c>)
100033fe:	4293      	cmp	r3, r2
10003400:	d025      	beq.n	1000344e <HAL_GPIO_Init+0x21e>
10003402:	687b      	ldr	r3, [r7, #4]
10003404:	4a1e      	ldr	r2, [pc, #120]	; (10003480 <HAL_GPIO_Init+0x250>)
10003406:	4293      	cmp	r3, r2
10003408:	d01f      	beq.n	1000344a <HAL_GPIO_Init+0x21a>
1000340a:	687b      	ldr	r3, [r7, #4]
1000340c:	4a1d      	ldr	r2, [pc, #116]	; (10003484 <HAL_GPIO_Init+0x254>)
1000340e:	4293      	cmp	r3, r2
10003410:	d019      	beq.n	10003446 <HAL_GPIO_Init+0x216>
10003412:	687b      	ldr	r3, [r7, #4]
10003414:	4a1c      	ldr	r2, [pc, #112]	; (10003488 <HAL_GPIO_Init+0x258>)
10003416:	4293      	cmp	r3, r2
10003418:	d013      	beq.n	10003442 <HAL_GPIO_Init+0x212>
1000341a:	687b      	ldr	r3, [r7, #4]
1000341c:	4a1b      	ldr	r2, [pc, #108]	; (1000348c <HAL_GPIO_Init+0x25c>)
1000341e:	4293      	cmp	r3, r2
10003420:	d00d      	beq.n	1000343e <HAL_GPIO_Init+0x20e>
10003422:	687b      	ldr	r3, [r7, #4]
10003424:	4a1a      	ldr	r2, [pc, #104]	; (10003490 <HAL_GPIO_Init+0x260>)
10003426:	4293      	cmp	r3, r2
10003428:	d007      	beq.n	1000343a <HAL_GPIO_Init+0x20a>
1000342a:	687b      	ldr	r3, [r7, #4]
1000342c:	4a19      	ldr	r2, [pc, #100]	; (10003494 <HAL_GPIO_Init+0x264>)
1000342e:	4293      	cmp	r3, r2
10003430:	d101      	bne.n	10003436 <HAL_GPIO_Init+0x206>
10003432:	230b      	movs	r3, #11
10003434:	e031      	b.n	1000349a <HAL_GPIO_Init+0x26a>
10003436:	2319      	movs	r3, #25
10003438:	e02f      	b.n	1000349a <HAL_GPIO_Init+0x26a>
1000343a:	230a      	movs	r3, #10
1000343c:	e02d      	b.n	1000349a <HAL_GPIO_Init+0x26a>
1000343e:	2309      	movs	r3, #9
10003440:	e02b      	b.n	1000349a <HAL_GPIO_Init+0x26a>
10003442:	2308      	movs	r3, #8
10003444:	e029      	b.n	1000349a <HAL_GPIO_Init+0x26a>
10003446:	2307      	movs	r3, #7
10003448:	e027      	b.n	1000349a <HAL_GPIO_Init+0x26a>
1000344a:	2306      	movs	r3, #6
1000344c:	e025      	b.n	1000349a <HAL_GPIO_Init+0x26a>
1000344e:	2305      	movs	r3, #5
10003450:	e023      	b.n	1000349a <HAL_GPIO_Init+0x26a>
10003452:	2304      	movs	r3, #4
10003454:	e021      	b.n	1000349a <HAL_GPIO_Init+0x26a>
10003456:	2303      	movs	r3, #3
10003458:	e01f      	b.n	1000349a <HAL_GPIO_Init+0x26a>
1000345a:	2302      	movs	r3, #2
1000345c:	e01d      	b.n	1000349a <HAL_GPIO_Init+0x26a>
1000345e:	2301      	movs	r3, #1
10003460:	e01b      	b.n	1000349a <HAL_GPIO_Init+0x26a>
10003462:	bf00      	nop
10003464:	5000d0c0 	.word	0x5000d0c0
10003468:	5000d000 	.word	0x5000d000
1000346c:	50002000 	.word	0x50002000
10003470:	50003000 	.word	0x50003000
10003474:	50004000 	.word	0x50004000
10003478:	50006000 	.word	0x50006000
1000347c:	50007000 	.word	0x50007000
10003480:	50008000 	.word	0x50008000
10003484:	50009000 	.word	0x50009000
10003488:	5000a000 	.word	0x5000a000
1000348c:	5000b000 	.word	0x5000b000
10003490:	5000c000 	.word	0x5000c000
10003494:	54004000 	.word	0x54004000
10003498:	2300      	movs	r3, #0
1000349a:	69fa      	ldr	r2, [r7, #28]
1000349c:	f002 0203 	and.w	r2, r2, #3
100034a0:	00d2      	lsls	r2, r2, #3
100034a2:	4093      	lsls	r3, r2
100034a4:	461a      	mov	r2, r3
100034a6:	69bb      	ldr	r3, [r7, #24]
100034a8:	4313      	orrs	r3, r2
100034aa:	61bb      	str	r3, [r7, #24]
        EXTI->EXTICR[position >> 2U] = temp;
100034ac:	4934      	ldr	r1, [pc, #208]	; (10003580 <HAL_GPIO_Init+0x350>)
100034ae:	69fb      	ldr	r3, [r7, #28]
100034b0:	089b      	lsrs	r3, r3, #2
100034b2:	3318      	adds	r3, #24
100034b4:	69ba      	ldr	r2, [r7, #24]
100034b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
100034ba:	697b      	ldr	r3, [r7, #20]
100034bc:	681b      	ldr	r3, [r3, #0]
100034be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
100034c0:	68fb      	ldr	r3, [r7, #12]
100034c2:	43db      	mvns	r3, r3
100034c4:	69ba      	ldr	r2, [r7, #24]
100034c6:	4013      	ands	r3, r2
100034c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
100034ca:	683b      	ldr	r3, [r7, #0]
100034cc:	685b      	ldr	r3, [r3, #4]
100034ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
100034d2:	2b00      	cmp	r3, #0
100034d4:	d003      	beq.n	100034de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
100034d6:	69ba      	ldr	r2, [r7, #24]
100034d8:	68fb      	ldr	r3, [r7, #12]
100034da:	4313      	orrs	r3, r2
100034dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
100034de:	697b      	ldr	r3, [r7, #20]
100034e0:	69ba      	ldr	r2, [r7, #24]
100034e2:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
100034e4:	697b      	ldr	r3, [r7, #20]
100034e6:	685b      	ldr	r3, [r3, #4]
100034e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
100034ea:	68fb      	ldr	r3, [r7, #12]
100034ec:	43db      	mvns	r3, r3
100034ee:	69ba      	ldr	r2, [r7, #24]
100034f0:	4013      	ands	r3, r2
100034f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
100034f4:	683b      	ldr	r3, [r7, #0]
100034f6:	685b      	ldr	r3, [r3, #4]
100034f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
100034fc:	2b00      	cmp	r3, #0
100034fe:	d003      	beq.n	10003508 <HAL_GPIO_Init+0x2d8>
        {
          temp |= iocurrent;
10003500:	69ba      	ldr	r2, [r7, #24]
10003502:	68fb      	ldr	r3, [r7, #12]
10003504:	4313      	orrs	r3, r2
10003506:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
10003508:	697b      	ldr	r3, [r7, #20]
1000350a:	69ba      	ldr	r2, [r7, #24]
1000350c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
1000350e:	4b1c      	ldr	r3, [pc, #112]	; (10003580 <HAL_GPIO_Init+0x350>)
10003510:	681b      	ldr	r3, [r3, #0]
10003512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10003514:	68fb      	ldr	r3, [r7, #12]
10003516:	43db      	mvns	r3, r3
10003518:	69ba      	ldr	r2, [r7, #24]
1000351a:	4013      	ands	r3, r2
1000351c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
1000351e:	683b      	ldr	r3, [r7, #0]
10003520:	685b      	ldr	r3, [r3, #4]
10003522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
10003526:	2b00      	cmp	r3, #0
10003528:	d003      	beq.n	10003532 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
1000352a:	69ba      	ldr	r2, [r7, #24]
1000352c:	68fb      	ldr	r3, [r7, #12]
1000352e:	4313      	orrs	r3, r2
10003530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
10003532:	4a13      	ldr	r2, [pc, #76]	; (10003580 <HAL_GPIO_Init+0x350>)
10003534:	69bb      	ldr	r3, [r7, #24]
10003536:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
10003538:	4b11      	ldr	r3, [pc, #68]	; (10003580 <HAL_GPIO_Init+0x350>)
1000353a:	685b      	ldr	r3, [r3, #4]
1000353c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
1000353e:	68fb      	ldr	r3, [r7, #12]
10003540:	43db      	mvns	r3, r3
10003542:	69ba      	ldr	r2, [r7, #24]
10003544:	4013      	ands	r3, r2
10003546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
10003548:	683b      	ldr	r3, [r7, #0]
1000354a:	685b      	ldr	r3, [r3, #4]
1000354c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
10003550:	2b00      	cmp	r3, #0
10003552:	d003      	beq.n	1000355c <HAL_GPIO_Init+0x32c>
        {
          temp |= iocurrent;
10003554:	69ba      	ldr	r2, [r7, #24]
10003556:	68fb      	ldr	r3, [r7, #12]
10003558:	4313      	orrs	r3, r2
1000355a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
1000355c:	4a08      	ldr	r2, [pc, #32]	; (10003580 <HAL_GPIO_Init+0x350>)
1000355e:	69bb      	ldr	r3, [r7, #24]
10003560:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
10003562:	69fb      	ldr	r3, [r7, #28]
10003564:	3301      	adds	r3, #1
10003566:	61fb      	str	r3, [r7, #28]
10003568:	69fb      	ldr	r3, [r7, #28]
1000356a:	2b0f      	cmp	r3, #15
1000356c:	f67f ae6a 	bls.w	10003244 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
10003570:	bf00      	nop
10003572:	bf00      	nop
10003574:	3724      	adds	r7, #36	; 0x24
10003576:	46bd      	mov	sp, r7
10003578:	f85d 7b04 	ldr.w	r7, [sp], #4
1000357c:	4770      	bx	lr
1000357e:	bf00      	nop
10003580:	5000d000 	.word	0x5000d000

10003584 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
10003584:	b580      	push	{r7, lr}
10003586:	b084      	sub	sp, #16
10003588:	af00      	add	r7, sp, #0
1000358a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
1000358c:	2300      	movs	r3, #0
1000358e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
10003590:	687b      	ldr	r3, [r7, #4]
10003592:	2b00      	cmp	r3, #0
10003594:	d01e      	beq.n	100035d4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

#if defined(CORE_CM4)
    IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10003596:	4b13      	ldr	r3, [pc, #76]	; (100035e4 <HAL_IPCC_Init+0x60>)
10003598:	60bb      	str	r3, [r7, #8]
#else
    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

    if (hipcc->State == HAL_IPCC_STATE_RESET)
1000359a:	687b      	ldr	r3, [r7, #4]
1000359c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
100035a0:	b2db      	uxtb	r3, r3
100035a2:	2b00      	cmp	r3, #0
100035a4:	d102      	bne.n	100035ac <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
100035a6:	6878      	ldr	r0, [r7, #4]
100035a8:	f7fd ffee 	bl	10001588 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
100035ac:	68b8      	ldr	r0, [r7, #8]
100035ae:	f000 f9eb 	bl	10003988 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
100035b2:	68bb      	ldr	r3, [r7, #8]
100035b4:	681b      	ldr	r3, [r3, #0]
100035b6:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
100035ba:	68bb      	ldr	r3, [r7, #8]
100035bc:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
100035be:	6878      	ldr	r0, [r7, #4]
100035c0:	f000 f9bc 	bl	1000393c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
100035c4:	687b      	ldr	r3, [r7, #4]
100035c6:	2200      	movs	r2, #0
100035c8:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
100035ca:	687b      	ldr	r3, [r7, #4]
100035cc:	2201      	movs	r2, #1
100035ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
100035d2:	e001      	b.n	100035d8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
100035d4:	2301      	movs	r3, #1
100035d6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
100035d8:	7bfb      	ldrb	r3, [r7, #15]
}
100035da:	4618      	mov	r0, r3
100035dc:	3710      	adds	r7, #16
100035de:	46bd      	mov	sp, r7
100035e0:	bd80      	pop	{r7, pc}
100035e2:	bf00      	nop
100035e4:	4c001010 	.word	0x4c001010

100035e8 <HAL_IPCC_ActivateNotification>:
  * @param  ChannelDir Channel direction
  * @param  cb Interrupt callback
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_ActivateNotification(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir, ChannelCb cb)
{
100035e8:	b580      	push	{r7, lr}
100035ea:	b086      	sub	sp, #24
100035ec:	af00      	add	r7, sp, #0
100035ee:	60f8      	str	r0, [r7, #12]
100035f0:	60b9      	str	r1, [r7, #8]
100035f2:	603b      	str	r3, [r7, #0]
100035f4:	4613      	mov	r3, r2
100035f6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
100035f8:	2300      	movs	r3, #0
100035fa:	75fb      	strb	r3, [r7, #23]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
100035fc:	68fb      	ldr	r3, [r7, #12]
100035fe:	2b00      	cmp	r3, #0
10003600:	d039      	beq.n	10003676 <HAL_IPCC_ActivateNotification+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    /* Check IPCC state */
    if (hipcc->State == HAL_IPCC_STATE_READY)
10003602:	68fb      	ldr	r3, [r7, #12]
10003604:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
10003608:	b2db      	uxtb	r3, r3
1000360a:	2b01      	cmp	r3, #1
1000360c:	d130      	bne.n	10003670 <HAL_IPCC_ActivateNotification+0x88>
    {
      /* Set callback and register masking information */
      if (ChannelDir == IPCC_CHANNEL_DIR_TX)
1000360e:	79fb      	ldrb	r3, [r7, #7]
10003610:	2b00      	cmp	r3, #0
10003612:	d113      	bne.n	1000363c <HAL_IPCC_ActivateNotification+0x54>
      {
        hipcc->ChannelCallbackTx[ChannelIndex] = cb;
10003614:	68fa      	ldr	r2, [r7, #12]
10003616:	68bb      	ldr	r3, [r7, #8]
10003618:	3306      	adds	r3, #6
1000361a:	009b      	lsls	r3, r3, #2
1000361c:	4413      	add	r3, r2
1000361e:	683a      	ldr	r2, [r7, #0]
10003620:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10003622:	68fb      	ldr	r3, [r7, #12]
10003624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10003626:	68bb      	ldr	r3, [r7, #8]
10003628:	f003 030f 	and.w	r3, r3, #15
1000362c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
10003630:	fa01 f303 	lsl.w	r3, r1, r3
10003634:	431a      	orrs	r2, r3
10003636:	68fb      	ldr	r3, [r7, #12]
10003638:	635a      	str	r2, [r3, #52]	; 0x34
1000363a:	e010      	b.n	1000365e <HAL_IPCC_ActivateNotification+0x76>
      }
      else
      {
        hipcc->ChannelCallbackRx[ChannelIndex] = cb;
1000363c:	68fa      	ldr	r2, [r7, #12]
1000363e:	68bb      	ldr	r3, [r7, #8]
10003640:	009b      	lsls	r3, r3, #2
10003642:	4413      	add	r3, r2
10003644:	683a      	ldr	r2, [r7, #0]
10003646:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10003648:	68fb      	ldr	r3, [r7, #12]
1000364a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
1000364c:	68bb      	ldr	r3, [r7, #8]
1000364e:	f003 030f 	and.w	r3, r3, #15
10003652:	2101      	movs	r1, #1
10003654:	fa01 f303 	lsl.w	r3, r1, r3
10003658:	431a      	orrs	r2, r3
1000365a:	68fb      	ldr	r3, [r7, #12]
1000365c:	635a      	str	r2, [r3, #52]	; 0x34
      }

      /* Unmask only the channels in reception (Transmission channel mask/unmask is done in HAL_IPCC_NotifyCPU) */
      if (ChannelDir == IPCC_CHANNEL_DIR_RX)
1000365e:	79fb      	ldrb	r3, [r7, #7]
10003660:	2b01      	cmp	r3, #1
10003662:	d10a      	bne.n	1000367a <HAL_IPCC_ActivateNotification+0x92>
      {
        IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
10003664:	79fb      	ldrb	r3, [r7, #7]
10003666:	4619      	mov	r1, r3
10003668:	68b8      	ldr	r0, [r7, #8]
1000366a:	f000 f939 	bl	100038e0 <IPCC_UnmaskInterrupt>
1000366e:	e004      	b.n	1000367a <HAL_IPCC_ActivateNotification+0x92>
      }
    }
    else
    {
      err = HAL_ERROR;
10003670:	2301      	movs	r3, #1
10003672:	75fb      	strb	r3, [r7, #23]
10003674:	e001      	b.n	1000367a <HAL_IPCC_ActivateNotification+0x92>
    }
  }
  else
  {
    err = HAL_ERROR;
10003676:	2301      	movs	r3, #1
10003678:	75fb      	strb	r3, [r7, #23]
  }
  return err;
1000367a:	7dfb      	ldrb	r3, [r7, #23]
}
1000367c:	4618      	mov	r0, r3
1000367e:	3718      	adds	r7, #24
10003680:	46bd      	mov	sp, r7
10003682:	bd80      	pop	{r7, pc}

10003684 <HAL_IPCC_GetChannelStatus>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval Channel status
  */
IPCC_CHANNELStatusTypeDef HAL_IPCC_GetChannelStatus(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10003684:	b480      	push	{r7}
10003686:	b089      	sub	sp, #36	; 0x24
10003688:	af00      	add	r7, sp, #0
1000368a:	60f8      	str	r0, [r7, #12]
1000368c:	60b9      	str	r1, [r7, #8]
1000368e:	4613      	mov	r3, r2
10003690:	71fb      	strb	r3, [r7, #7]
  uint32_t channel_state;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10003692:	4b14      	ldr	r3, [pc, #80]	; (100036e4 <HAL_IPCC_GetChannelStatus+0x60>)
10003694:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
10003696:	4b14      	ldr	r3, [pc, #80]	; (100036e8 <HAL_IPCC_GetChannelStatus+0x64>)
10003698:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Read corresponding channel depending of the MCU and the direction */
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
1000369a:	79fb      	ldrb	r3, [r7, #7]
1000369c:	2b00      	cmp	r3, #0
1000369e:	d10a      	bne.n	100036b6 <HAL_IPCC_GetChannelStatus+0x32>
  {
    channel_state = (currentInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
100036a0:	69bb      	ldr	r3, [r7, #24]
100036a2:	68da      	ldr	r2, [r3, #12]
100036a4:	68bb      	ldr	r3, [r7, #8]
100036a6:	f003 030f 	and.w	r3, r3, #15
100036aa:	2101      	movs	r1, #1
100036ac:	fa01 f303 	lsl.w	r3, r1, r3
100036b0:	4013      	ands	r3, r2
100036b2:	61fb      	str	r3, [r7, #28]
100036b4:	e009      	b.n	100036ca <HAL_IPCC_GetChannelStatus+0x46>
  }
  else
  {
    channel_state = (otherInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
100036b6:	697b      	ldr	r3, [r7, #20]
100036b8:	68da      	ldr	r2, [r3, #12]
100036ba:	68bb      	ldr	r3, [r7, #8]
100036bc:	f003 030f 	and.w	r3, r3, #15
100036c0:	2101      	movs	r1, #1
100036c2:	fa01 f303 	lsl.w	r3, r1, r3
100036c6:	4013      	ands	r3, r2
100036c8:	61fb      	str	r3, [r7, #28]
  }

  return (channel_state == 0UL) ? IPCC_CHANNEL_STATUS_FREE : IPCC_CHANNEL_STATUS_OCCUPIED ;
100036ca:	69fb      	ldr	r3, [r7, #28]
100036cc:	2b00      	cmp	r3, #0
100036ce:	bf14      	ite	ne
100036d0:	2301      	movne	r3, #1
100036d2:	2300      	moveq	r3, #0
100036d4:	b2db      	uxtb	r3, r3
}
100036d6:	4618      	mov	r0, r3
100036d8:	3724      	adds	r7, #36	; 0x24
100036da:	46bd      	mov	sp, r7
100036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
100036e0:	4770      	bx	lr
100036e2:	bf00      	nop
100036e4:	4c001010 	.word	0x4c001010
100036e8:	4c001000 	.word	0x4c001000

100036ec <HAL_IPCC_NotifyCPU>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_NotifyCPU(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
100036ec:	b580      	push	{r7, lr}
100036ee:	b088      	sub	sp, #32
100036f0:	af00      	add	r7, sp, #0
100036f2:	60f8      	str	r0, [r7, #12]
100036f4:	60b9      	str	r1, [r7, #8]
100036f6:	4613      	mov	r3, r2
100036f8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
100036fa:	2300      	movs	r3, #0
100036fc:	77fb      	strb	r3, [r7, #31]
  uint32_t mask;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
100036fe:	4b1d      	ldr	r3, [pc, #116]	; (10003774 <HAL_IPCC_NotifyCPU+0x88>)
10003700:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Check if IPCC is initiliased */
  if (hipcc->State == HAL_IPCC_STATE_READY)
10003702:	68fb      	ldr	r3, [r7, #12]
10003704:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
10003708:	b2db      	uxtb	r3, r3
1000370a:	2b01      	cmp	r3, #1
1000370c:	d12a      	bne.n	10003764 <HAL_IPCC_NotifyCPU+0x78>
  {
    /* For IPCC_CHANNEL_DIR_TX, set the status. For IPCC_CHANNEL_DIR_RX, clear the status */
    currentInstance->SCR |= ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_SCR_CH1S : IPCC_SCR_CH1C) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
1000370e:	69bb      	ldr	r3, [r7, #24]
10003710:	689a      	ldr	r2, [r3, #8]
10003712:	79fb      	ldrb	r3, [r7, #7]
10003714:	2b00      	cmp	r3, #0
10003716:	d102      	bne.n	1000371e <HAL_IPCC_NotifyCPU+0x32>
10003718:	f44f 3180 	mov.w	r1, #65536	; 0x10000
1000371c:	e000      	b.n	10003720 <HAL_IPCC_NotifyCPU+0x34>
1000371e:	2101      	movs	r1, #1
10003720:	68bb      	ldr	r3, [r7, #8]
10003722:	f003 030f 	and.w	r3, r3, #15
10003726:	fa01 f303 	lsl.w	r3, r1, r3
1000372a:	431a      	orrs	r2, r3
1000372c:	69bb      	ldr	r3, [r7, #24]
1000372e:	609a      	str	r2, [r3, #8]

    /* Unmask interrupt if the callback is requested */
    mask = ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_MR_CH1FM_Msk : IPCC_MR_CH1OM_Msk) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
10003730:	79fb      	ldrb	r3, [r7, #7]
10003732:	2b00      	cmp	r3, #0
10003734:	d102      	bne.n	1000373c <HAL_IPCC_NotifyCPU+0x50>
10003736:	f44f 3280 	mov.w	r2, #65536	; 0x10000
1000373a:	e000      	b.n	1000373e <HAL_IPCC_NotifyCPU+0x52>
1000373c:	2201      	movs	r2, #1
1000373e:	68bb      	ldr	r3, [r7, #8]
10003740:	f003 030f 	and.w	r3, r3, #15
10003744:	fa02 f303 	lsl.w	r3, r2, r3
10003748:	617b      	str	r3, [r7, #20]
    if ((hipcc->callbackRequest & mask) == mask)
1000374a:	68fb      	ldr	r3, [r7, #12]
1000374c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
1000374e:	697b      	ldr	r3, [r7, #20]
10003750:	4013      	ands	r3, r2
10003752:	697a      	ldr	r2, [r7, #20]
10003754:	429a      	cmp	r2, r3
10003756:	d107      	bne.n	10003768 <HAL_IPCC_NotifyCPU+0x7c>
    {
      IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
10003758:	79fb      	ldrb	r3, [r7, #7]
1000375a:	4619      	mov	r1, r3
1000375c:	68b8      	ldr	r0, [r7, #8]
1000375e:	f000 f8bf 	bl	100038e0 <IPCC_UnmaskInterrupt>
10003762:	e001      	b.n	10003768 <HAL_IPCC_NotifyCPU+0x7c>
    }
  }
  else
  {
    err = HAL_ERROR;
10003764:	2301      	movs	r3, #1
10003766:	77fb      	strb	r3, [r7, #31]
  }

  return err;
10003768:	7ffb      	ldrb	r3, [r7, #31]
}
1000376a:	4618      	mov	r0, r3
1000376c:	3720      	adds	r7, #32
1000376e:	46bd      	mov	sp, r7
10003770:	bd80      	pop	{r7, pc}
10003772:	bf00      	nop
10003774:	4c001010 	.word	0x4c001010

10003778 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
10003778:	b580      	push	{r7, lr}
1000377a:	b086      	sub	sp, #24
1000377c:	af00      	add	r7, sp, #0
1000377e:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
10003780:	2300      	movs	r3, #0
10003782:	613b      	str	r3, [r7, #16]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10003784:	4b22      	ldr	r3, [pc, #136]	; (10003810 <HAL_IPCC_TX_IRQHandler+0x98>)
10003786:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
10003788:	68fb      	ldr	r3, [r7, #12]
1000378a:	685b      	ldr	r3, [r3, #4]
1000378c:	43db      	mvns	r3, r3
1000378e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
10003792:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
10003794:	68fb      	ldr	r3, [r7, #12]
10003796:	68db      	ldr	r3, [r3, #12]
10003798:	041b      	lsls	r3, r3, #16
1000379a:	43db      	mvns	r3, r3
1000379c:	697a      	ldr	r2, [r7, #20]
1000379e:	4013      	ands	r3, r2
100037a0:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
100037a2:	e02c      	b.n	100037fe <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_Msk));
100037a4:	693b      	ldr	r3, [r7, #16]
100037a6:	f003 030f 	and.w	r3, r3, #15
100037aa:	3310      	adds	r3, #16
100037ac:	2201      	movs	r2, #1
100037ae:	fa02 f303 	lsl.w	r3, r2, r3
100037b2:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
100037b4:	697a      	ldr	r2, [r7, #20]
100037b6:	68bb      	ldr	r3, [r7, #8]
100037b8:	4013      	ands	r3, r2
100037ba:	2b00      	cmp	r3, #0
100037bc:	d01c      	beq.n	100037f8 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
100037be:	68fb      	ldr	r3, [r7, #12]
100037c0:	685a      	ldr	r2, [r3, #4]
100037c2:	68bb      	ldr	r3, [r7, #8]
100037c4:	431a      	orrs	r2, r3
100037c6:	68fb      	ldr	r3, [r7, #12]
100037c8:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
100037ca:	687a      	ldr	r2, [r7, #4]
100037cc:	693b      	ldr	r3, [r7, #16]
100037ce:	3306      	adds	r3, #6
100037d0:	009b      	lsls	r3, r3, #2
100037d2:	4413      	add	r3, r2
100037d4:	685b      	ldr	r3, [r3, #4]
100037d6:	2b00      	cmp	r3, #0
100037d8:	d009      	beq.n	100037ee <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
100037da:	687a      	ldr	r2, [r7, #4]
100037dc:	693b      	ldr	r3, [r7, #16]
100037de:	3306      	adds	r3, #6
100037e0:	009b      	lsls	r3, r3, #2
100037e2:	4413      	add	r3, r2
100037e4:	685b      	ldr	r3, [r3, #4]
100037e6:	2200      	movs	r2, #0
100037e8:	6939      	ldr	r1, [r7, #16]
100037ea:	6878      	ldr	r0, [r7, #4]
100037ec:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
100037ee:	68bb      	ldr	r3, [r7, #8]
100037f0:	43db      	mvns	r3, r3
100037f2:	697a      	ldr	r2, [r7, #20]
100037f4:	4013      	ands	r3, r2
100037f6:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
100037f8:	693b      	ldr	r3, [r7, #16]
100037fa:	3301      	adds	r3, #1
100037fc:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
100037fe:	697b      	ldr	r3, [r7, #20]
10003800:	2b00      	cmp	r3, #0
10003802:	d1cf      	bne.n	100037a4 <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
10003804:	bf00      	nop
10003806:	bf00      	nop
10003808:	3718      	adds	r7, #24
1000380a:	46bd      	mov	sp, r7
1000380c:	bd80      	pop	{r7, pc}
1000380e:	bf00      	nop
10003810:	4c001010 	.word	0x4c001010

10003814 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
10003814:	b580      	push	{r7, lr}
10003816:	b088      	sub	sp, #32
10003818:	af00      	add	r7, sp, #0
1000381a:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
1000381c:	2300      	movs	r3, #0
1000381e:	61bb      	str	r3, [r7, #24]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10003820:	4b20      	ldr	r3, [pc, #128]	; (100038a4 <HAL_IPCC_RX_IRQHandler+0x90>)
10003822:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
10003824:	4b20      	ldr	r3, [pc, #128]	; (100038a8 <HAL_IPCC_RX_IRQHandler+0x94>)
10003826:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
#endif

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
10003828:	697b      	ldr	r3, [r7, #20]
1000382a:	685b      	ldr	r3, [r3, #4]
1000382c:	43db      	mvns	r3, r3
1000382e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10003832:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
10003834:	693b      	ldr	r3, [r7, #16]
10003836:	68db      	ldr	r3, [r3, #12]
10003838:	69fa      	ldr	r2, [r7, #28]
1000383a:	4013      	ands	r3, r2
1000383c:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
1000383e:	e029      	b.n	10003894 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
10003840:	69bb      	ldr	r3, [r7, #24]
10003842:	f003 030f 	and.w	r3, r3, #15
10003846:	2201      	movs	r2, #1
10003848:	fa02 f303 	lsl.w	r3, r2, r3
1000384c:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
1000384e:	69fa      	ldr	r2, [r7, #28]
10003850:	68fb      	ldr	r3, [r7, #12]
10003852:	4013      	ands	r3, r2
10003854:	2b00      	cmp	r3, #0
10003856:	d01a      	beq.n	1000388e <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
10003858:	697b      	ldr	r3, [r7, #20]
1000385a:	685a      	ldr	r2, [r3, #4]
1000385c:	68fb      	ldr	r3, [r7, #12]
1000385e:	431a      	orrs	r2, r3
10003860:	697b      	ldr	r3, [r7, #20]
10003862:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
10003864:	687a      	ldr	r2, [r7, #4]
10003866:	69bb      	ldr	r3, [r7, #24]
10003868:	009b      	lsls	r3, r3, #2
1000386a:	4413      	add	r3, r2
1000386c:	685b      	ldr	r3, [r3, #4]
1000386e:	2b00      	cmp	r3, #0
10003870:	d008      	beq.n	10003884 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
10003872:	687a      	ldr	r2, [r7, #4]
10003874:	69bb      	ldr	r3, [r7, #24]
10003876:	009b      	lsls	r3, r3, #2
10003878:	4413      	add	r3, r2
1000387a:	685b      	ldr	r3, [r3, #4]
1000387c:	2201      	movs	r2, #1
1000387e:	69b9      	ldr	r1, [r7, #24]
10003880:	6878      	ldr	r0, [r7, #4]
10003882:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
10003884:	68fb      	ldr	r3, [r7, #12]
10003886:	43db      	mvns	r3, r3
10003888:	69fa      	ldr	r2, [r7, #28]
1000388a:	4013      	ands	r3, r2
1000388c:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
1000388e:	69bb      	ldr	r3, [r7, #24]
10003890:	3301      	adds	r3, #1
10003892:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10003894:	69fb      	ldr	r3, [r7, #28]
10003896:	2b00      	cmp	r3, #0
10003898:	d1d2      	bne.n	10003840 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
1000389a:	bf00      	nop
1000389c:	bf00      	nop
1000389e:	3720      	adds	r7, #32
100038a0:	46bd      	mov	sp, r7
100038a2:	bd80      	pop	{r7, pc}
100038a4:	4c001010 	.word	0x4c001010
100038a8:	4c001000 	.word	0x4c001000

100038ac <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
100038ac:	b480      	push	{r7}
100038ae:	b085      	sub	sp, #20
100038b0:	af00      	add	r7, sp, #0
100038b2:	60f8      	str	r0, [r7, #12]
100038b4:	60b9      	str	r1, [r7, #8]
100038b6:	4613      	mov	r3, r2
100038b8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
100038ba:	bf00      	nop
100038bc:	3714      	adds	r7, #20
100038be:	46bd      	mov	sp, r7
100038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
100038c4:	4770      	bx	lr

100038c6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
100038c6:	b480      	push	{r7}
100038c8:	b085      	sub	sp, #20
100038ca:	af00      	add	r7, sp, #0
100038cc:	60f8      	str	r0, [r7, #12]
100038ce:	60b9      	str	r1, [r7, #8]
100038d0:	4613      	mov	r3, r2
100038d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
100038d4:	bf00      	nop
100038d6:	3714      	adds	r7, #20
100038d8:	46bd      	mov	sp, r7
100038da:	f85d 7b04 	ldr.w	r7, [sp], #4
100038de:	4770      	bx	lr

100038e0 <IPCC_UnmaskInterrupt>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  */
void IPCC_UnmaskInterrupt(uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
100038e0:	b480      	push	{r7}
100038e2:	b085      	sub	sp, #20
100038e4:	af00      	add	r7, sp, #0
100038e6:	6078      	str	r0, [r7, #4]
100038e8:	460b      	mov	r3, r1
100038ea:	70fb      	strb	r3, [r7, #3]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
100038ec:	4b12      	ldr	r3, [pc, #72]	; (10003938 <IPCC_UnmaskInterrupt+0x58>)
100038ee:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
100038f0:	78fb      	ldrb	r3, [r7, #3]
100038f2:	2b00      	cmp	r3, #0
100038f4:	d10d      	bne.n	10003912 <IPCC_UnmaskInterrupt+0x32>
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
100038f6:	68fb      	ldr	r3, [r7, #12]
100038f8:	685a      	ldr	r2, [r3, #4]
100038fa:	687b      	ldr	r3, [r7, #4]
100038fc:	f003 030f 	and.w	r3, r3, #15
10003900:	f44f 3180 	mov.w	r1, #65536	; 0x10000
10003904:	fa01 f303 	lsl.w	r3, r1, r3
10003908:	43db      	mvns	r3, r3
1000390a:	401a      	ands	r2, r3
1000390c:	68fb      	ldr	r3, [r7, #12]
1000390e:	605a      	str	r2, [r3, #4]
  else
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
  }
}
10003910:	e00b      	b.n	1000392a <IPCC_UnmaskInterrupt+0x4a>
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10003912:	68fb      	ldr	r3, [r7, #12]
10003914:	685a      	ldr	r2, [r3, #4]
10003916:	687b      	ldr	r3, [r7, #4]
10003918:	f003 030f 	and.w	r3, r3, #15
1000391c:	2101      	movs	r1, #1
1000391e:	fa01 f303 	lsl.w	r3, r1, r3
10003922:	43db      	mvns	r3, r3
10003924:	401a      	ands	r2, r3
10003926:	68fb      	ldr	r3, [r7, #12]
10003928:	605a      	str	r2, [r3, #4]
}
1000392a:	bf00      	nop
1000392c:	3714      	adds	r7, #20
1000392e:	46bd      	mov	sp, r7
10003930:	f85d 7b04 	ldr.w	r7, [sp], #4
10003934:	4770      	bx	lr
10003936:	bf00      	nop
10003938:	4c001010 	.word	0x4c001010

1000393c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
1000393c:	b480      	push	{r7}
1000393e:	b085      	sub	sp, #20
10003940:	af00      	add	r7, sp, #0
10003942:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
10003944:	2300      	movs	r3, #0
10003946:	60fb      	str	r3, [r7, #12]
10003948:	e00f      	b.n	1000396a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
1000394a:	687a      	ldr	r2, [r7, #4]
1000394c:	68fb      	ldr	r3, [r7, #12]
1000394e:	009b      	lsls	r3, r3, #2
10003950:	4413      	add	r3, r2
10003952:	4a0b      	ldr	r2, [pc, #44]	; (10003980 <IPCC_SetDefaultCallbacks+0x44>)
10003954:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
10003956:	687a      	ldr	r2, [r7, #4]
10003958:	68fb      	ldr	r3, [r7, #12]
1000395a:	3306      	adds	r3, #6
1000395c:	009b      	lsls	r3, r3, #2
1000395e:	4413      	add	r3, r2
10003960:	4a08      	ldr	r2, [pc, #32]	; (10003984 <IPCC_SetDefaultCallbacks+0x48>)
10003962:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
10003964:	68fb      	ldr	r3, [r7, #12]
10003966:	3301      	adds	r3, #1
10003968:	60fb      	str	r3, [r7, #12]
1000396a:	68fb      	ldr	r3, [r7, #12]
1000396c:	2b05      	cmp	r3, #5
1000396e:	d9ec      	bls.n	1000394a <IPCC_SetDefaultCallbacks+0xe>
  }
}
10003970:	bf00      	nop
10003972:	bf00      	nop
10003974:	3714      	adds	r7, #20
10003976:	46bd      	mov	sp, r7
10003978:	f85d 7b04 	ldr.w	r7, [sp], #4
1000397c:	4770      	bx	lr
1000397e:	bf00      	nop
10003980:	100038ad 	.word	0x100038ad
10003984:	100038c7 	.word	0x100038c7

10003988 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
10003988:	b480      	push	{r7}
1000398a:	b083      	sub	sp, #12
1000398c:	af00      	add	r7, sp, #0
1000398e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
10003990:	687b      	ldr	r3, [r7, #4]
10003992:	2200      	movs	r2, #0
10003994:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
10003996:	687b      	ldr	r3, [r7, #4]
10003998:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
1000399c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
1000399e:	687b      	ldr	r3, [r7, #4]
100039a0:	223f      	movs	r2, #63	; 0x3f
100039a2:	609a      	str	r2, [r3, #8]
}
100039a4:	bf00      	nop
100039a6:	370c      	adds	r7, #12
100039a8:	46bd      	mov	sp, r7
100039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
100039ae:	4770      	bx	lr

100039b0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
100039b0:	b480      	push	{r7}
100039b2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
100039b4:	4b05      	ldr	r3, [pc, #20]	; (100039cc <HAL_PWR_EnableBkUpAccess+0x1c>)
100039b6:	681b      	ldr	r3, [r3, #0]
100039b8:	4a04      	ldr	r2, [pc, #16]	; (100039cc <HAL_PWR_EnableBkUpAccess+0x1c>)
100039ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
100039be:	6013      	str	r3, [r2, #0]
}
100039c0:	bf00      	nop
100039c2:	46bd      	mov	sp, r7
100039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
100039c8:	4770      	bx	lr
100039ca:	bf00      	nop
100039cc:	50001000 	.word	0x50001000

100039d0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
100039d0:	b580      	push	{r7, lr}
100039d2:	b084      	sub	sp, #16
100039d4:	af00      	add	r7, sp, #0
100039d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
100039d8:	2300      	movs	r3, #0
100039da:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
100039dc:	687b      	ldr	r3, [r7, #4]
100039de:	2b00      	cmp	r3, #0
100039e0:	d101      	bne.n	100039e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
100039e2:	2301      	movs	r3, #1
100039e4:	e320      	b.n	10004028 <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
100039e6:	687b      	ldr	r3, [r7, #4]
100039e8:	681b      	ldr	r3, [r3, #0]
100039ea:	f003 0301 	and.w	r3, r3, #1
100039ee:	2b00      	cmp	r3, #0
100039f0:	f000 8081 	beq.w	10003af6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
100039f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039f8:	6a1b      	ldr	r3, [r3, #32]
100039fa:	f003 0303 	and.w	r3, r3, #3
100039fe:	2b01      	cmp	r3, #1
10003a00:	d107      	bne.n	10003a12 <HAL_RCC_OscConfig+0x42>
10003a02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a06:	6a1b      	ldr	r3, [r3, #32]
10003a08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003a0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003a10:	d054      	beq.n	10003abc <HAL_RCC_OscConfig+0xec>
10003a12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003a18:	f003 0307 	and.w	r3, r3, #7
10003a1c:	2b01      	cmp	r3, #1
10003a1e:	d107      	bne.n	10003a30 <HAL_RCC_OscConfig+0x60>
10003a20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003a26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003a2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003a2e:	d045      	beq.n	10003abc <HAL_RCC_OscConfig+0xec>
10003a30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003a36:	f003 0303 	and.w	r3, r3, #3
10003a3a:	2b01      	cmp	r3, #1
10003a3c:	d107      	bne.n	10003a4e <HAL_RCC_OscConfig+0x7e>
10003a3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003a44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003a48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003a4c:	d036      	beq.n	10003abc <HAL_RCC_OscConfig+0xec>
10003a4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10003a54:	f003 0303 	and.w	r3, r3, #3
10003a58:	2b01      	cmp	r3, #1
10003a5a:	d10f      	bne.n	10003a7c <HAL_RCC_OscConfig+0xac>
10003a5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10003a64:	f003 0302 	and.w	r3, r3, #2
10003a68:	2b02      	cmp	r3, #2
10003a6a:	d027      	beq.n	10003abc <HAL_RCC_OscConfig+0xec>
10003a6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10003a74:	f003 0302 	and.w	r3, r3, #2
10003a78:	2b02      	cmp	r3, #2
10003a7a:	d01f      	beq.n	10003abc <HAL_RCC_OscConfig+0xec>
10003a7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a80:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10003a84:	f003 0303 	and.w	r3, r3, #3
10003a88:	2b01      	cmp	r3, #1
10003a8a:	d107      	bne.n	10003a9c <HAL_RCC_OscConfig+0xcc>
10003a8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a90:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003a94:	f003 0302 	and.w	r3, r3, #2
10003a98:	2b02      	cmp	r3, #2
10003a9a:	d00f      	beq.n	10003abc <HAL_RCC_OscConfig+0xec>
10003a9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003aa0:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10003aa4:	f003 0303 	and.w	r3, r3, #3
10003aa8:	2b01      	cmp	r3, #1
10003aaa:	d117      	bne.n	10003adc <HAL_RCC_OscConfig+0x10c>
10003aac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ab0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003ab4:	f003 0302 	and.w	r3, r3, #2
10003ab8:	2b02      	cmp	r3, #2
10003aba:	d10f      	bne.n	10003adc <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10003abc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ac0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
10003ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10003acc:	d112      	bne.n	10003af4 <HAL_RCC_OscConfig+0x124>
10003ace:	687b      	ldr	r3, [r7, #4]
10003ad0:	685b      	ldr	r3, [r3, #4]
10003ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10003ad6:	d00d      	beq.n	10003af4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
10003ad8:	2301      	movs	r3, #1
10003ada:	e2a5      	b.n	10004028 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
10003adc:	687b      	ldr	r3, [r7, #4]
10003ade:	685b      	ldr	r3, [r3, #4]
10003ae0:	4618      	mov	r0, r3
10003ae2:	f000 faa7 	bl	10004034 <HAL_RCC_HSEConfig>
10003ae6:	4603      	mov	r3, r0
10003ae8:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
10003aea:	7bfb      	ldrb	r3, [r7, #15]
10003aec:	2b00      	cmp	r3, #0
10003aee:	d002      	beq.n	10003af6 <HAL_RCC_OscConfig+0x126>
      {
        return result;
10003af0:	7bfb      	ldrb	r3, [r7, #15]
10003af2:	e299      	b.n	10004028 <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10003af4:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10003af6:	687b      	ldr	r3, [r7, #4]
10003af8:	681b      	ldr	r3, [r3, #0]
10003afa:	f003 0302 	and.w	r3, r3, #2
10003afe:	2b00      	cmp	r3, #0
10003b00:	f000 814e 	beq.w	10003da0 <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
10003b04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b08:	6a1b      	ldr	r3, [r3, #32]
10003b0a:	f003 0303 	and.w	r3, r3, #3
10003b0e:	2b00      	cmp	r3, #0
10003b10:	d107      	bne.n	10003b22 <HAL_RCC_OscConfig+0x152>
10003b12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b16:	6a1b      	ldr	r3, [r3, #32]
10003b18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003b1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003b20:	d055      	beq.n	10003bce <HAL_RCC_OscConfig+0x1fe>
10003b22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003b28:	f003 0307 	and.w	r3, r3, #7
10003b2c:	2b00      	cmp	r3, #0
10003b2e:	d107      	bne.n	10003b40 <HAL_RCC_OscConfig+0x170>
10003b30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003b36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003b3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003b3e:	d046      	beq.n	10003bce <HAL_RCC_OscConfig+0x1fe>
10003b40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003b46:	f003 0303 	and.w	r3, r3, #3
10003b4a:	2b00      	cmp	r3, #0
10003b4c:	d107      	bne.n	10003b5e <HAL_RCC_OscConfig+0x18e>
10003b4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003b54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003b58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003b5c:	d037      	beq.n	10003bce <HAL_RCC_OscConfig+0x1fe>
10003b5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10003b64:	f003 0303 	and.w	r3, r3, #3
10003b68:	2b00      	cmp	r3, #0
10003b6a:	d10f      	bne.n	10003b8c <HAL_RCC_OscConfig+0x1bc>
10003b6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10003b74:	f003 0302 	and.w	r3, r3, #2
10003b78:	2b02      	cmp	r3, #2
10003b7a:	d028      	beq.n	10003bce <HAL_RCC_OscConfig+0x1fe>
10003b7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10003b84:	f003 0302 	and.w	r3, r3, #2
10003b88:	2b02      	cmp	r3, #2
10003b8a:	d020      	beq.n	10003bce <HAL_RCC_OscConfig+0x1fe>
10003b8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b90:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10003b94:	f003 0303 	and.w	r3, r3, #3
10003b98:	2b00      	cmp	r3, #0
10003b9a:	d107      	bne.n	10003bac <HAL_RCC_OscConfig+0x1dc>
10003b9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ba0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003ba4:	f003 0302 	and.w	r3, r3, #2
10003ba8:	2b02      	cmp	r3, #2
10003baa:	d010      	beq.n	10003bce <HAL_RCC_OscConfig+0x1fe>
10003bac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003bb0:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10003bb4:	f003 0303 	and.w	r3, r3, #3
10003bb8:	2b00      	cmp	r3, #0
10003bba:	f040 8088 	bne.w	10003cce <HAL_RCC_OscConfig+0x2fe>
10003bbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003bc2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003bc6:	f003 0302 	and.w	r3, r3, #2
10003bca:	2b02      	cmp	r3, #2
10003bcc:	d17f      	bne.n	10003cce <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10003bce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003bd2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003bd6:	f003 0301 	and.w	r3, r3, #1
10003bda:	2b01      	cmp	r3, #1
10003bdc:	d105      	bne.n	10003bea <HAL_RCC_OscConfig+0x21a>
10003bde:	687b      	ldr	r3, [r7, #4]
10003be0:	68db      	ldr	r3, [r3, #12]
10003be2:	2b01      	cmp	r3, #1
10003be4:	d001      	beq.n	10003bea <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
10003be6:	2301      	movs	r3, #1
10003be8:	e21e      	b.n	10004028 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10003bea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003bee:	699b      	ldr	r3, [r3, #24]
10003bf0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
10003bf4:	687b      	ldr	r3, [r7, #4]
10003bf6:	691b      	ldr	r3, [r3, #16]
10003bf8:	021b      	lsls	r3, r3, #8
10003bfa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003bfe:	4313      	orrs	r3, r2
10003c00:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10003c02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10003c08:	f003 0303 	and.w	r3, r3, #3
10003c0c:	2b00      	cmp	r3, #0
10003c0e:	d10f      	bne.n	10003c30 <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10003c10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10003c18:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10003c1c:	2b02      	cmp	r3, #2
10003c1e:	d047      	beq.n	10003cb0 <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10003c20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10003c28:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10003c2c:	2b02      	cmp	r3, #2
10003c2e:	d03f      	beq.n	10003cb0 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10003c30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c34:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10003c38:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10003c3c:	2b00      	cmp	r3, #0
10003c3e:	d107      	bne.n	10003c50 <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10003c40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c44:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003c48:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10003c4c:	2b02      	cmp	r3, #2
10003c4e:	d02f      	beq.n	10003cb0 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10003c50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c54:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10003c58:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10003c5c:	2b00      	cmp	r3, #0
10003c5e:	d107      	bne.n	10003c70 <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
10003c60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c64:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003c68:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10003c6c:	2b02      	cmp	r3, #2
10003c6e:	d01f      	beq.n	10003cb0 <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10003c70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c74:	699b      	ldr	r3, [r3, #24]
10003c76:	f023 0203 	bic.w	r2, r3, #3
10003c7a:	687b      	ldr	r3, [r7, #4]
10003c7c:	695b      	ldr	r3, [r3, #20]
10003c7e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003c82:	4313      	orrs	r3, r2
10003c84:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
10003c86:	f7fd fe1f 	bl	100018c8 <HAL_GetTick>
10003c8a:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10003c8c:	e008      	b.n	10003ca0 <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10003c8e:	f7fd fe1b 	bl	100018c8 <HAL_GetTick>
10003c92:	4602      	mov	r2, r0
10003c94:	68bb      	ldr	r3, [r7, #8]
10003c96:	1ad3      	subs	r3, r2, r3
10003c98:	2b64      	cmp	r3, #100	; 0x64
10003c9a:	d901      	bls.n	10003ca0 <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
10003c9c:	2303      	movs	r3, #3
10003c9e:	e1c3      	b.n	10004028 <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10003ca0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ca4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003ca8:	f003 0304 	and.w	r3, r3, #4
10003cac:	2b04      	cmp	r3, #4
10003cae:	d1ee      	bne.n	10003c8e <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
10003cb0:	f001 faca 	bl	10005248 <HAL_RCC_GetSystemCoreClockFreq>
10003cb4:	4603      	mov	r3, r0
10003cb6:	4ab3      	ldr	r2, [pc, #716]	; (10003f84 <HAL_RCC_OscConfig+0x5b4>)
10003cb8:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
10003cba:	4bb3      	ldr	r3, [pc, #716]	; (10003f88 <HAL_RCC_OscConfig+0x5b8>)
10003cbc:	681b      	ldr	r3, [r3, #0]
10003cbe:	4618      	mov	r0, r3
10003cc0:	f7fd fdb8 	bl	10001834 <HAL_InitTick>
10003cc4:	4603      	mov	r3, r0
10003cc6:	2b00      	cmp	r3, #0
10003cc8:	d069      	beq.n	10003d9e <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
10003cca:	2301      	movs	r3, #1
10003ccc:	e1ac      	b.n	10004028 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
10003cce:	687b      	ldr	r3, [r7, #4]
10003cd0:	68db      	ldr	r3, [r3, #12]
10003cd2:	2b00      	cmp	r3, #0
10003cd4:	d049      	beq.n	10003d6a <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
10003cd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003cda:	68db      	ldr	r3, [r3, #12]
10003cdc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003ce0:	f043 0301 	orr.w	r3, r3, #1
10003ce4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003ce6:	f7fd fdef 	bl	100018c8 <HAL_GetTick>
10003cea:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10003cec:	e008      	b.n	10003d00 <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10003cee:	f7fd fdeb 	bl	100018c8 <HAL_GetTick>
10003cf2:	4602      	mov	r2, r0
10003cf4:	68bb      	ldr	r3, [r7, #8]
10003cf6:	1ad3      	subs	r3, r2, r3
10003cf8:	2b64      	cmp	r3, #100	; 0x64
10003cfa:	d901      	bls.n	10003d00 <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
10003cfc:	2303      	movs	r3, #3
10003cfe:	e193      	b.n	10004028 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10003d00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d04:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003d08:	f003 0301 	and.w	r3, r3, #1
10003d0c:	2b01      	cmp	r3, #1
10003d0e:	d1ee      	bne.n	10003cee <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10003d10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d14:	699b      	ldr	r3, [r3, #24]
10003d16:	f023 0203 	bic.w	r2, r3, #3
10003d1a:	687b      	ldr	r3, [r7, #4]
10003d1c:	695b      	ldr	r3, [r3, #20]
10003d1e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003d22:	4313      	orrs	r3, r2
10003d24:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003d26:	f7fd fdcf 	bl	100018c8 <HAL_GetTick>
10003d2a:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10003d2c:	e008      	b.n	10003d40 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10003d2e:	f7fd fdcb 	bl	100018c8 <HAL_GetTick>
10003d32:	4602      	mov	r2, r0
10003d34:	68bb      	ldr	r3, [r7, #8]
10003d36:	1ad3      	subs	r3, r2, r3
10003d38:	2b64      	cmp	r3, #100	; 0x64
10003d3a:	d901      	bls.n	10003d40 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
10003d3c:	2303      	movs	r3, #3
10003d3e:	e173      	b.n	10004028 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10003d40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d44:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003d48:	f003 0304 	and.w	r3, r3, #4
10003d4c:	2b04      	cmp	r3, #4
10003d4e:	d1ee      	bne.n	10003d2e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10003d50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d54:	699b      	ldr	r3, [r3, #24]
10003d56:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
10003d5a:	687b      	ldr	r3, [r7, #4]
10003d5c:	691b      	ldr	r3, [r3, #16]
10003d5e:	021b      	lsls	r3, r3, #8
10003d60:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003d64:	4313      	orrs	r3, r2
10003d66:	618b      	str	r3, [r1, #24]
10003d68:	e01a      	b.n	10003da0 <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
10003d6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d6e:	2201      	movs	r2, #1
10003d70:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003d72:	f7fd fda9 	bl	100018c8 <HAL_GetTick>
10003d76:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10003d78:	e008      	b.n	10003d8c <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10003d7a:	f7fd fda5 	bl	100018c8 <HAL_GetTick>
10003d7e:	4602      	mov	r2, r0
10003d80:	68bb      	ldr	r3, [r7, #8]
10003d82:	1ad3      	subs	r3, r2, r3
10003d84:	2b64      	cmp	r3, #100	; 0x64
10003d86:	d901      	bls.n	10003d8c <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
10003d88:	2303      	movs	r3, #3
10003d8a:	e14d      	b.n	10004028 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10003d8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d90:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003d94:	f003 0301 	and.w	r3, r3, #1
10003d98:	2b01      	cmp	r3, #1
10003d9a:	d0ee      	beq.n	10003d7a <HAL_RCC_OscConfig+0x3aa>
10003d9c:	e000      	b.n	10003da0 <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10003d9e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
10003da0:	687b      	ldr	r3, [r7, #4]
10003da2:	681b      	ldr	r3, [r3, #0]
10003da4:	f003 0310 	and.w	r3, r3, #16
10003da8:	2b00      	cmp	r3, #0
10003daa:	f000 8091 	beq.w	10003ed0 <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
10003dae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003db2:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10003db6:	f003 0303 	and.w	r3, r3, #3
10003dba:	2b02      	cmp	r3, #2
10003dbc:	d107      	bne.n	10003dce <HAL_RCC_OscConfig+0x3fe>
10003dbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003dc2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003dc6:	f003 0302 	and.w	r3, r3, #2
10003dca:	2b02      	cmp	r3, #2
10003dcc:	d01e      	beq.n	10003e0c <HAL_RCC_OscConfig+0x43c>
10003dce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003dd4:	f003 0303 	and.w	r3, r3, #3
10003dd8:	2b02      	cmp	r3, #2
10003dda:	d107      	bne.n	10003dec <HAL_RCC_OscConfig+0x41c>
10003ddc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003de2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003de6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003dea:	d00f      	beq.n	10003e0c <HAL_RCC_OscConfig+0x43c>
10003dec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003df0:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10003df4:	f003 0303 	and.w	r3, r3, #3
10003df8:	2b02      	cmp	r3, #2
10003dfa:	d122      	bne.n	10003e42 <HAL_RCC_OscConfig+0x472>
10003dfc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003e00:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003e04:	f003 0302 	and.w	r3, r3, #2
10003e08:	2b02      	cmp	r3, #2
10003e0a:	d11a      	bne.n	10003e42 <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10003e0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003e10:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003e14:	f003 0310 	and.w	r3, r3, #16
10003e18:	2b10      	cmp	r3, #16
10003e1a:	d105      	bne.n	10003e28 <HAL_RCC_OscConfig+0x458>
10003e1c:	687b      	ldr	r3, [r7, #4]
10003e1e:	69db      	ldr	r3, [r3, #28]
10003e20:	2b10      	cmp	r3, #16
10003e22:	d001      	beq.n	10003e28 <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
10003e24:	2301      	movs	r3, #1
10003e26:	e0ff      	b.n	10004028 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10003e28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003e2c:	69db      	ldr	r3, [r3, #28]
10003e2e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
10003e32:	687b      	ldr	r3, [r7, #4]
10003e34:	6a1b      	ldr	r3, [r3, #32]
10003e36:	021b      	lsls	r3, r3, #8
10003e38:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003e3c:	4313      	orrs	r3, r2
10003e3e:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10003e40:	e046      	b.n	10003ed0 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
10003e42:	687b      	ldr	r3, [r7, #4]
10003e44:	69db      	ldr	r3, [r3, #28]
10003e46:	2b00      	cmp	r3, #0
10003e48:	d029      	beq.n	10003e9e <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
10003e4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003e4e:	68db      	ldr	r3, [r3, #12]
10003e50:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003e54:	f043 0310 	orr.w	r3, r3, #16
10003e58:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003e5a:	f7fd fd35 	bl	100018c8 <HAL_GetTick>
10003e5e:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10003e60:	e008      	b.n	10003e74 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10003e62:	f7fd fd31 	bl	100018c8 <HAL_GetTick>
10003e66:	4602      	mov	r2, r0
10003e68:	68bb      	ldr	r3, [r7, #8]
10003e6a:	1ad3      	subs	r3, r2, r3
10003e6c:	2b64      	cmp	r3, #100	; 0x64
10003e6e:	d901      	bls.n	10003e74 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
10003e70:	2303      	movs	r3, #3
10003e72:	e0d9      	b.n	10004028 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10003e74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003e78:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003e7c:	f003 0310 	and.w	r3, r3, #16
10003e80:	2b10      	cmp	r3, #16
10003e82:	d1ee      	bne.n	10003e62 <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10003e84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003e88:	69db      	ldr	r3, [r3, #28]
10003e8a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
10003e8e:	687b      	ldr	r3, [r7, #4]
10003e90:	6a1b      	ldr	r3, [r3, #32]
10003e92:	021b      	lsls	r3, r3, #8
10003e94:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003e98:	4313      	orrs	r3, r2
10003e9a:	61cb      	str	r3, [r1, #28]
10003e9c:	e018      	b.n	10003ed0 <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
10003e9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ea2:	2210      	movs	r2, #16
10003ea4:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003ea6:	f7fd fd0f 	bl	100018c8 <HAL_GetTick>
10003eaa:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10003eac:	e008      	b.n	10003ec0 <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10003eae:	f7fd fd0b 	bl	100018c8 <HAL_GetTick>
10003eb2:	4602      	mov	r2, r0
10003eb4:	68bb      	ldr	r3, [r7, #8]
10003eb6:	1ad3      	subs	r3, r2, r3
10003eb8:	2b64      	cmp	r3, #100	; 0x64
10003eba:	d901      	bls.n	10003ec0 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
10003ebc:	2303      	movs	r3, #3
10003ebe:	e0b3      	b.n	10004028 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10003ec0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ec4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003ec8:	f003 0310 	and.w	r3, r3, #16
10003ecc:	2b10      	cmp	r3, #16
10003ece:	d0ee      	beq.n	10003eae <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
10003ed0:	687b      	ldr	r3, [r7, #4]
10003ed2:	681b      	ldr	r3, [r3, #0]
10003ed4:	f003 0308 	and.w	r3, r3, #8
10003ed8:	2b00      	cmp	r3, #0
10003eda:	d042      	beq.n	10003f62 <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
10003edc:	687b      	ldr	r3, [r7, #4]
10003ede:	699b      	ldr	r3, [r3, #24]
10003ee0:	2b00      	cmp	r3, #0
10003ee2:	d01f      	beq.n	10003f24 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
10003ee4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ee8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10003eec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003ef0:	f043 0301 	orr.w	r3, r3, #1
10003ef4:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10003ef8:	f7fd fce6 	bl	100018c8 <HAL_GetTick>
10003efc:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10003efe:	e008      	b.n	10003f12 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10003f00:	f7fd fce2 	bl	100018c8 <HAL_GetTick>
10003f04:	4602      	mov	r2, r0
10003f06:	68bb      	ldr	r3, [r7, #8]
10003f08:	1ad3      	subs	r3, r2, r3
10003f0a:	2b64      	cmp	r3, #100	; 0x64
10003f0c:	d901      	bls.n	10003f12 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
10003f0e:	2303      	movs	r3, #3
10003f10:	e08a      	b.n	10004028 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10003f12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f16:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10003f1a:	f003 0302 	and.w	r3, r3, #2
10003f1e:	2b02      	cmp	r3, #2
10003f20:	d1ee      	bne.n	10003f00 <HAL_RCC_OscConfig+0x530>
10003f22:	e01e      	b.n	10003f62 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10003f24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f28:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10003f2c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003f30:	f023 0301 	bic.w	r3, r3, #1
10003f34:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10003f38:	f7fd fcc6 	bl	100018c8 <HAL_GetTick>
10003f3c:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10003f3e:	e008      	b.n	10003f52 <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10003f40:	f7fd fcc2 	bl	100018c8 <HAL_GetTick>
10003f44:	4602      	mov	r2, r0
10003f46:	68bb      	ldr	r3, [r7, #8]
10003f48:	1ad3      	subs	r3, r2, r3
10003f4a:	2b64      	cmp	r3, #100	; 0x64
10003f4c:	d901      	bls.n	10003f52 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
10003f4e:	2303      	movs	r3, #3
10003f50:	e06a      	b.n	10004028 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10003f52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f56:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10003f5a:	f003 0302 	and.w	r3, r3, #2
10003f5e:	2b02      	cmp	r3, #2
10003f60:	d0ee      	beq.n	10003f40 <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
10003f62:	687b      	ldr	r3, [r7, #4]
10003f64:	681b      	ldr	r3, [r3, #0]
10003f66:	f003 0304 	and.w	r3, r3, #4
10003f6a:	2b00      	cmp	r3, #0
10003f6c:	d02b      	beq.n	10003fc6 <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
10003f6e:	4b07      	ldr	r3, [pc, #28]	; (10003f8c <HAL_RCC_OscConfig+0x5bc>)
10003f70:	681b      	ldr	r3, [r3, #0]
10003f72:	4a06      	ldr	r2, [pc, #24]	; (10003f8c <HAL_RCC_OscConfig+0x5bc>)
10003f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10003f78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
10003f7a:	f7fd fca5 	bl	100018c8 <HAL_GetTick>
10003f7e:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10003f80:	e00f      	b.n	10003fa2 <HAL_RCC_OscConfig+0x5d2>
10003f82:	bf00      	nop
10003f84:	10020000 	.word	0x10020000
10003f88:	1002000c 	.word	0x1002000c
10003f8c:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10003f90:	f7fd fc9a 	bl	100018c8 <HAL_GetTick>
10003f94:	4602      	mov	r2, r0
10003f96:	68bb      	ldr	r3, [r7, #8]
10003f98:	1ad3      	subs	r3, r2, r3
10003f9a:	2b64      	cmp	r3, #100	; 0x64
10003f9c:	d901      	bls.n	10003fa2 <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
10003f9e:	2303      	movs	r3, #3
10003fa0:	e042      	b.n	10004028 <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10003fa2:	4b23      	ldr	r3, [pc, #140]	; (10004030 <HAL_RCC_OscConfig+0x660>)
10003fa4:	681b      	ldr	r3, [r3, #0]
10003fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
10003faa:	2b00      	cmp	r3, #0
10003fac:	d0f0      	beq.n	10003f90 <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
10003fae:	687b      	ldr	r3, [r7, #4]
10003fb0:	689b      	ldr	r3, [r3, #8]
10003fb2:	4618      	mov	r0, r3
10003fb4:	f000 f8a9 	bl	1000410a <HAL_RCC_LSEConfig>
10003fb8:	4603      	mov	r3, r0
10003fba:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
10003fbc:	7bfb      	ldrb	r3, [r7, #15]
10003fbe:	2b00      	cmp	r3, #0
10003fc0:	d001      	beq.n	10003fc6 <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
10003fc2:	7bfb      	ldrb	r3, [r7, #15]
10003fc4:	e030      	b.n	10004028 <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
10003fc6:	687b      	ldr	r3, [r7, #4]
10003fc8:	3324      	adds	r3, #36	; 0x24
10003fca:	4618      	mov	r0, r3
10003fcc:	f000 f91a 	bl	10004204 <RCC_PLL1_Config>
10003fd0:	4603      	mov	r3, r0
10003fd2:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10003fd4:	7bfb      	ldrb	r3, [r7, #15]
10003fd6:	2b00      	cmp	r3, #0
10003fd8:	d001      	beq.n	10003fde <HAL_RCC_OscConfig+0x60e>
  {
    return result;
10003fda:	7bfb      	ldrb	r3, [r7, #15]
10003fdc:	e024      	b.n	10004028 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
10003fde:	687b      	ldr	r3, [r7, #4]
10003fe0:	3360      	adds	r3, #96	; 0x60
10003fe2:	4618      	mov	r0, r3
10003fe4:	f001 f9cc 	bl	10005380 <RCCEx_PLL2_Config>
10003fe8:	4603      	mov	r3, r0
10003fea:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10003fec:	7bfb      	ldrb	r3, [r7, #15]
10003fee:	2b00      	cmp	r3, #0
10003ff0:	d001      	beq.n	10003ff6 <HAL_RCC_OscConfig+0x626>
  {
    return result;
10003ff2:	7bfb      	ldrb	r3, [r7, #15]
10003ff4:	e018      	b.n	10004028 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
10003ff6:	687b      	ldr	r3, [r7, #4]
10003ff8:	339c      	adds	r3, #156	; 0x9c
10003ffa:	4618      	mov	r0, r3
10003ffc:	f001 fb42 	bl	10005684 <RCCEx_PLL3_Config>
10004000:	4603      	mov	r3, r0
10004002:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10004004:	7bfb      	ldrb	r3, [r7, #15]
10004006:	2b00      	cmp	r3, #0
10004008:	d001      	beq.n	1000400e <HAL_RCC_OscConfig+0x63e>
  {
    return result;
1000400a:	7bfb      	ldrb	r3, [r7, #15]
1000400c:	e00c      	b.n	10004028 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
1000400e:	687b      	ldr	r3, [r7, #4]
10004010:	33d8      	adds	r3, #216	; 0xd8
10004012:	4618      	mov	r0, r3
10004014:	f001 fca0 	bl	10005958 <RCCEx_PLL4_Config>
10004018:	4603      	mov	r3, r0
1000401a:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
1000401c:	7bfb      	ldrb	r3, [r7, #15]
1000401e:	2b00      	cmp	r3, #0
10004020:	d001      	beq.n	10004026 <HAL_RCC_OscConfig+0x656>
  {
    return result;
10004022:	7bfb      	ldrb	r3, [r7, #15]
10004024:	e000      	b.n	10004028 <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
10004026:	2300      	movs	r3, #0
}
10004028:	4618      	mov	r0, r3
1000402a:	3710      	adds	r7, #16
1000402c:	46bd      	mov	sp, r7
1000402e:	bd80      	pop	{r7, pc}
10004030:	50001000 	.word	0x50001000

10004034 <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
10004034:	b580      	push	{r7, lr}
10004036:	b084      	sub	sp, #16
10004038:	af00      	add	r7, sp, #0
1000403a:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
1000403c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004040:	f44f 7280 	mov.w	r2, #256	; 0x100
10004044:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10004046:	f7fd fc3f 	bl	100018c8 <HAL_GetTick>
1000404a:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
1000404c:	e008      	b.n	10004060 <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1000404e:	f7fd fc3b 	bl	100018c8 <HAL_GetTick>
10004052:	4602      	mov	r2, r0
10004054:	68fb      	ldr	r3, [r7, #12]
10004056:	1ad3      	subs	r3, r2, r3
10004058:	2b64      	cmp	r3, #100	; 0x64
1000405a:	d901      	bls.n	10004060 <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
1000405c:	2303      	movs	r3, #3
1000405e:	e050      	b.n	10004102 <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10004060:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004064:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004068:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000406c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10004070:	d0ed      	beq.n	1000404e <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
10004072:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004076:	f44f 6290 	mov.w	r2, #1152	; 0x480
1000407a:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
1000407c:	687b      	ldr	r3, [r7, #4]
1000407e:	2b00      	cmp	r3, #0
10004080:	d03e      	beq.n	10004100 <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
10004082:	687b      	ldr	r3, [r7, #4]
10004084:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
10004088:	d108      	bne.n	1000409c <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
1000408a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000408e:	68db      	ldr	r3, [r3, #12]
10004090:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004094:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
10004098:	60d3      	str	r3, [r2, #12]
1000409a:	e013      	b.n	100040c4 <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
1000409c:	687b      	ldr	r3, [r7, #4]
1000409e:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
100040a2:	d10f      	bne.n	100040c4 <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
100040a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100040a8:	68db      	ldr	r3, [r3, #12]
100040aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100040ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
100040b2:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
100040b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100040b8:	68db      	ldr	r3, [r3, #12]
100040ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100040be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
100040c2:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
100040c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100040c8:	68db      	ldr	r3, [r3, #12]
100040ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100040ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
100040d2:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100040d4:	f7fd fbf8 	bl	100018c8 <HAL_GetTick>
100040d8:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100040da:	e008      	b.n	100040ee <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100040dc:	f7fd fbf4 	bl	100018c8 <HAL_GetTick>
100040e0:	4602      	mov	r2, r0
100040e2:	68fb      	ldr	r3, [r7, #12]
100040e4:	1ad3      	subs	r3, r2, r3
100040e6:	2b64      	cmp	r3, #100	; 0x64
100040e8:	d901      	bls.n	100040ee <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
100040ea:	2303      	movs	r3, #3
100040ec:	e009      	b.n	10004102 <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100040ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100040f2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100040f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
100040fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100040fe:	d1ed      	bne.n	100040dc <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
10004100:	2300      	movs	r3, #0
}
10004102:	4618      	mov	r0, r3
10004104:	3710      	adds	r7, #16
10004106:	46bd      	mov	sp, r7
10004108:	bd80      	pop	{r7, pc}

1000410a <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
1000410a:	b580      	push	{r7, lr}
1000410c:	b084      	sub	sp, #16
1000410e:	af00      	add	r7, sp, #0
10004110:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10004112:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004116:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000411a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000411e:	f023 0301 	bic.w	r3, r3, #1
10004122:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10004126:	f7fd fbcf 	bl	100018c8 <HAL_GetTick>
1000412a:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
1000412c:	e00a      	b.n	10004144 <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
1000412e:	f7fd fbcb 	bl	100018c8 <HAL_GetTick>
10004132:	4602      	mov	r2, r0
10004134:	68fb      	ldr	r3, [r7, #12]
10004136:	1ad3      	subs	r3, r2, r3
10004138:	f241 3288 	movw	r2, #5000	; 0x1388
1000413c:	4293      	cmp	r3, r2
1000413e:	d901      	bls.n	10004144 <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
10004140:	2303      	movs	r3, #3
10004142:	e05b      	b.n	100041fc <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10004144:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004148:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000414c:	f003 0304 	and.w	r3, r3, #4
10004150:	2b04      	cmp	r3, #4
10004152:	d0ec      	beq.n	1000412e <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
10004154:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004158:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000415c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004160:	f023 030a 	bic.w	r3, r3, #10
10004164:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
10004168:	687b      	ldr	r3, [r7, #4]
1000416a:	2b00      	cmp	r3, #0
1000416c:	d045      	beq.n	100041fa <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
1000416e:	687b      	ldr	r3, [r7, #4]
10004170:	2b03      	cmp	r3, #3
10004172:	d10a      	bne.n	1000418a <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10004174:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004178:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000417c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004180:	f043 0302 	orr.w	r3, r3, #2
10004184:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
10004188:	e016      	b.n	100041b8 <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
1000418a:	687b      	ldr	r3, [r7, #4]
1000418c:	2b0b      	cmp	r3, #11
1000418e:	d113      	bne.n	100041b8 <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
10004190:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004194:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10004198:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000419c:	f043 0308 	orr.w	r3, r3, #8
100041a0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
100041a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100041a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100041ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100041b0:	f043 0302 	orr.w	r3, r3, #2
100041b4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
100041b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100041bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100041c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100041c4:	f043 0301 	orr.w	r3, r3, #1
100041c8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100041cc:	f7fd fb7c 	bl	100018c8 <HAL_GetTick>
100041d0:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
100041d2:	e00a      	b.n	100041ea <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
100041d4:	f7fd fb78 	bl	100018c8 <HAL_GetTick>
100041d8:	4602      	mov	r2, r0
100041da:	68fb      	ldr	r3, [r7, #12]
100041dc:	1ad3      	subs	r3, r2, r3
100041de:	f241 3288 	movw	r2, #5000	; 0x1388
100041e2:	4293      	cmp	r3, r2
100041e4:	d901      	bls.n	100041ea <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
100041e6:	2303      	movs	r3, #3
100041e8:	e008      	b.n	100041fc <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
100041ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100041ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100041f2:	f003 0304 	and.w	r3, r3, #4
100041f6:	2b04      	cmp	r3, #4
100041f8:	d1ec      	bne.n	100041d4 <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
100041fa:	2300      	movs	r3, #0
}
100041fc:	4618      	mov	r0, r3
100041fe:	3710      	adds	r7, #16
10004200:	46bd      	mov	sp, r7
10004202:	bd80      	pop	{r7, pc}

10004204 <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
10004204:	b580      	push	{r7, lr}
10004206:	b084      	sub	sp, #16
10004208:	af00      	add	r7, sp, #0
1000420a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
1000420c:	687b      	ldr	r3, [r7, #4]
1000420e:	681b      	ldr	r3, [r3, #0]
10004210:	2b00      	cmp	r3, #0
10004212:	f000 8174 	beq.w	100044fe <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
10004216:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000421a:	6a1b      	ldr	r3, [r3, #32]
1000421c:	f003 0303 	and.w	r3, r3, #3
10004220:	2b02      	cmp	r3, #2
10004222:	d108      	bne.n	10004236 <RCC_PLL1_Config+0x32>
10004224:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004228:	6a1b      	ldr	r3, [r3, #32]
1000422a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000422e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004232:	f000 8162 	beq.w	100044fa <RCC_PLL1_Config+0x2f6>
10004236:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000423a:	6a1b      	ldr	r3, [r3, #32]
1000423c:	f003 0303 	and.w	r3, r3, #3
10004240:	2b03      	cmp	r3, #3
10004242:	d108      	bne.n	10004256 <RCC_PLL1_Config+0x52>
10004244:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004248:	6a1b      	ldr	r3, [r3, #32]
1000424a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000424e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004252:	f000 8152 	beq.w	100044fa <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
10004256:	687b      	ldr	r3, [r7, #4]
10004258:	681b      	ldr	r3, [r3, #0]
1000425a:	2b02      	cmp	r3, #2
1000425c:	f040 8123 	bne.w	100044a6 <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10004260:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004268:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000426c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10004270:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
10004274:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000427c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004280:	f023 0301 	bic.w	r3, r3, #1
10004284:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10004288:	f7fd fb1e 	bl	100018c8 <HAL_GetTick>
1000428c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
1000428e:	e008      	b.n	100042a2 <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10004290:	f7fd fb1a 	bl	100018c8 <HAL_GetTick>
10004294:	4602      	mov	r2, r0
10004296:	68fb      	ldr	r3, [r7, #12]
10004298:	1ad3      	subs	r3, r2, r3
1000429a:	2b64      	cmp	r3, #100	; 0x64
1000429c:	d901      	bls.n	100042a2 <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
1000429e:	2303      	movs	r3, #3
100042a0:	e12e      	b.n	10004500 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100042a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100042a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100042aa:	f003 0302 	and.w	r3, r3, #2
100042ae:	2b02      	cmp	r3, #2
100042b0:	d0ee      	beq.n	10004290 <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
100042b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100042b8:	f003 0307 	and.w	r3, r3, #7
100042bc:	2b02      	cmp	r3, #2
100042be:	d112      	bne.n	100042e6 <RCC_PLL1_Config+0xe2>
100042c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100042c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100042ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100042ce:	d10a      	bne.n	100042e6 <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
100042d0:	687b      	ldr	r3, [r7, #4]
100042d2:	685a      	ldr	r2, [r3, #4]
100042d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100042d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100042da:	f003 0303 	and.w	r3, r3, #3
100042de:	429a      	cmp	r2, r3
100042e0:	d00c      	beq.n	100042fc <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
100042e2:	2301      	movs	r3, #1
100042e4:	e10c      	b.n	10004500 <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
100042e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100042ec:	f023 0203 	bic.w	r2, r3, #3
100042f0:	687b      	ldr	r3, [r7, #4]
100042f2:	685b      	ldr	r3, [r3, #4]
100042f4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100042f8:	4313      	orrs	r3, r2
100042fa:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
100042fc:	e008      	b.n	10004310 <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100042fe:	f7fd fae3 	bl	100018c8 <HAL_GetTick>
10004302:	4602      	mov	r2, r0
10004304:	68fb      	ldr	r3, [r7, #12]
10004306:	1ad3      	subs	r3, r2, r3
10004308:	2b64      	cmp	r3, #100	; 0x64
1000430a:	d901      	bls.n	10004310 <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
1000430c:	2303      	movs	r3, #3
1000430e:	e0f7      	b.n	10004500 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10004310:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004316:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000431a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000431e:	d1ee      	bne.n	100042fe <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
10004320:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004324:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
10004328:	4b77      	ldr	r3, [pc, #476]	; (10004508 <RCC_PLL1_Config+0x304>)
1000432a:	4013      	ands	r3, r2
1000432c:	687a      	ldr	r2, [r7, #4]
1000432e:	68d2      	ldr	r2, [r2, #12]
10004330:	1e51      	subs	r1, r2, #1
10004332:	687a      	ldr	r2, [r7, #4]
10004334:	6892      	ldr	r2, [r2, #8]
10004336:	3a01      	subs	r2, #1
10004338:	0412      	lsls	r2, r2, #16
1000433a:	430a      	orrs	r2, r1
1000433c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004340:	4313      	orrs	r3, r2
10004342:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
10004346:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000434a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
1000434e:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10004352:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10004356:	687a      	ldr	r2, [r7, #4]
10004358:	6912      	ldr	r2, [r2, #16]
1000435a:	1e51      	subs	r1, r2, #1
1000435c:	687a      	ldr	r2, [r7, #4]
1000435e:	6952      	ldr	r2, [r2, #20]
10004360:	3a01      	subs	r2, #1
10004362:	0212      	lsls	r2, r2, #8
10004364:	4311      	orrs	r1, r2
10004366:	687a      	ldr	r2, [r7, #4]
10004368:	6992      	ldr	r2, [r2, #24]
1000436a:	3a01      	subs	r2, #1
1000436c:	0412      	lsls	r2, r2, #16
1000436e:	430a      	orrs	r2, r1
10004370:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004374:	4313      	orrs	r3, r2
10004376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
1000437a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000437e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10004382:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1000438a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
1000438e:	687b      	ldr	r3, [r7, #4]
10004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004392:	2b02      	cmp	r3, #2
10004394:	d003      	beq.n	1000439e <RCC_PLL1_Config+0x19a>
10004396:	687b      	ldr	r3, [r7, #4]
10004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000439a:	2b00      	cmp	r3, #0
1000439c:	d10c      	bne.n	100043b8 <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
1000439e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100043a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
100043a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100043aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100043ae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100043b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
100043b6:	e00f      	b.n	100043d8 <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
100043b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100043bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
100043c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100043c4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100043c8:	687a      	ldr	r2, [r7, #4]
100043ca:	6a12      	ldr	r2, [r2, #32]
100043cc:	00d2      	lsls	r2, r2, #3
100043ce:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100043d2:	4313      	orrs	r3, r2
100043d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
100043d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100043dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
100043e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100043e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
100043e8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100043ec:	687b      	ldr	r3, [r7, #4]
100043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100043f0:	2b02      	cmp	r3, #2
100043f2:	d124      	bne.n	1000443e <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
100043f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100043f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
100043fc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10004400:	687b      	ldr	r3, [r7, #4]
10004402:	6a99      	ldr	r1, [r3, #40]	; 0x28
10004404:	687b      	ldr	r3, [r7, #4]
10004406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10004408:	4319      	orrs	r1, r3
1000440a:	687b      	ldr	r3, [r7, #4]
1000440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000440e:	4319      	orrs	r1, r3
10004410:	687b      	ldr	r3, [r7, #4]
10004412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10004414:	4319      	orrs	r1, r3
10004416:	687b      	ldr	r3, [r7, #4]
10004418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000441a:	041b      	lsls	r3, r3, #16
1000441c:	430b      	orrs	r3, r1
1000441e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004422:	4313      	orrs	r3, r2
10004424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
10004428:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000442c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004430:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004434:	f043 0304 	orr.w	r3, r3, #4
10004438:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
1000443c:	e009      	b.n	10004452 <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
1000443e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004446:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000444a:	f023 0304 	bic.w	r3, r3, #4
1000444e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
10004452:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000445a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000445e:	f043 0301 	orr.w	r3, r3, #1
10004462:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10004466:	f7fd fa2f 	bl	100018c8 <HAL_GetTick>
1000446a:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
1000446c:	e008      	b.n	10004480 <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000446e:	f7fd fa2b 	bl	100018c8 <HAL_GetTick>
10004472:	4602      	mov	r2, r0
10004474:	68fb      	ldr	r3, [r7, #12]
10004476:	1ad3      	subs	r3, r2, r3
10004478:	2b64      	cmp	r3, #100	; 0x64
1000447a:	d901      	bls.n	10004480 <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
1000447c:	2303      	movs	r3, #3
1000447e:	e03f      	b.n	10004500 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10004480:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004488:	f003 0302 	and.w	r3, r3, #2
1000448c:	2b02      	cmp	r3, #2
1000448e:	d1ee      	bne.n	1000446e <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10004490:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004494:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004498:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000449c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
100044a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
100044a4:	e02b      	b.n	100044fe <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100044a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100044ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100044b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100044b6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
100044ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100044c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100044c6:	f023 0301 	bic.w	r3, r3, #1
100044ca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100044ce:	f7fd f9fb 	bl	100018c8 <HAL_GetTick>
100044d2:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100044d4:	e008      	b.n	100044e8 <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100044d6:	f7fd f9f7 	bl	100018c8 <HAL_GetTick>
100044da:	4602      	mov	r2, r0
100044dc:	68fb      	ldr	r3, [r7, #12]
100044de:	1ad3      	subs	r3, r2, r3
100044e0:	2b64      	cmp	r3, #100	; 0x64
100044e2:	d901      	bls.n	100044e8 <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
100044e4:	2303      	movs	r3, #3
100044e6:	e00b      	b.n	10004500 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100044e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100044f0:	f003 0302 	and.w	r3, r3, #2
100044f4:	2b02      	cmp	r3, #2
100044f6:	d0ee      	beq.n	100044d6 <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
100044f8:	e001      	b.n	100044fe <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
100044fa:	2301      	movs	r3, #1
100044fc:	e000      	b.n	10004500 <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
100044fe:	2300      	movs	r3, #0

}
10004500:	4618      	mov	r0, r3
10004502:	3710      	adds	r7, #16
10004504:	46bd      	mov	sp, r7
10004506:	bd80      	pop	{r7, pc}
10004508:	ffc0fe00 	.word	0xffc0fe00

1000450c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
1000450c:	b580      	push	{r7, lr}
1000450e:	b084      	sub	sp, #16
10004510:	af00      	add	r7, sp, #0
10004512:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
10004514:	2300      	movs	r3, #0
10004516:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10004518:	687b      	ldr	r3, [r7, #4]
1000451a:	2b00      	cmp	r3, #0
1000451c:	d101      	bne.n	10004522 <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
1000451e:	2301      	movs	r3, #1
10004520:	e102      	b.n	10004728 <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
10004522:	687b      	ldr	r3, [r7, #4]
10004524:	681b      	ldr	r3, [r3, #0]
10004526:	f003 0301 	and.w	r3, r3, #1
1000452a:	2b00      	cmp	r3, #0
1000452c:	d00b      	beq.n	10004546 <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
1000452e:	687b      	ldr	r3, [r7, #4]
10004530:	3304      	adds	r3, #4
10004532:	4618      	mov	r0, r3
10004534:	f000 f8fc 	bl	10004730 <RCC_MPUConfig>
10004538:	4603      	mov	r3, r0
1000453a:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
1000453c:	7bfb      	ldrb	r3, [r7, #15]
1000453e:	2b00      	cmp	r3, #0
10004540:	d001      	beq.n	10004546 <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
10004542:	7bfb      	ldrb	r3, [r7, #15]
10004544:	e0f0      	b.n	10004728 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
10004546:	687b      	ldr	r3, [r7, #4]
10004548:	681b      	ldr	r3, [r3, #0]
1000454a:	f003 0302 	and.w	r3, r3, #2
1000454e:	2b00      	cmp	r3, #0
10004550:	d00b      	beq.n	1000456a <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
10004552:	687b      	ldr	r3, [r7, #4]
10004554:	330c      	adds	r3, #12
10004556:	4618      	mov	r0, r3
10004558:	f000 f960 	bl	1000481c <RCC_AXISSConfig>
1000455c:	4603      	mov	r3, r0
1000455e:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10004560:	7bfb      	ldrb	r3, [r7, #15]
10004562:	2b00      	cmp	r3, #0
10004564:	d001      	beq.n	1000456a <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
10004566:	7bfb      	ldrb	r3, [r7, #15]
10004568:	e0de      	b.n	10004728 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
1000456a:	687b      	ldr	r3, [r7, #4]
1000456c:	681b      	ldr	r3, [r3, #0]
1000456e:	f003 0304 	and.w	r3, r3, #4
10004572:	2b00      	cmp	r3, #0
10004574:	d00b      	beq.n	1000458e <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
10004576:	687b      	ldr	r3, [r7, #4]
10004578:	3314      	adds	r3, #20
1000457a:	4618      	mov	r0, r3
1000457c:	f000 f9e6 	bl	1000494c <RCC_MCUConfig>
10004580:	4603      	mov	r3, r0
10004582:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10004584:	7bfb      	ldrb	r3, [r7, #15]
10004586:	2b00      	cmp	r3, #0
10004588:	d001      	beq.n	1000458e <HAL_RCC_ClockConfig+0x82>
    {
      return status;
1000458a:	7bfb      	ldrb	r3, [r7, #15]
1000458c:	e0cc      	b.n	10004728 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
1000458e:	687b      	ldr	r3, [r7, #4]
10004590:	681b      	ldr	r3, [r3, #0]
10004592:	f003 0308 	and.w	r3, r3, #8
10004596:	2b00      	cmp	r3, #0
10004598:	d020      	beq.n	100045dc <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
1000459a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000459e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100045a0:	f023 0207 	bic.w	r2, r3, #7
100045a4:	687b      	ldr	r3, [r7, #4]
100045a6:	69db      	ldr	r3, [r3, #28]
100045a8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100045ac:	4313      	orrs	r3, r2
100045ae:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100045b0:	f7fd f98a 	bl	100018c8 <HAL_GetTick>
100045b4:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
100045b6:	e009      	b.n	100045cc <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100045b8:	f7fd f986 	bl	100018c8 <HAL_GetTick>
100045bc:	4602      	mov	r2, r0
100045be:	68bb      	ldr	r3, [r7, #8]
100045c0:	1ad3      	subs	r3, r2, r3
100045c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100045c6:	d901      	bls.n	100045cc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
100045c8:	2303      	movs	r3, #3
100045ca:	e0ad      	b.n	10004728 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
100045cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100045d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100045d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100045d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100045da:	d1ed      	bne.n	100045b8 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
100045dc:	687b      	ldr	r3, [r7, #4]
100045de:	681b      	ldr	r3, [r3, #0]
100045e0:	f003 0310 	and.w	r3, r3, #16
100045e4:	2b00      	cmp	r3, #0
100045e6:	d020      	beq.n	1000462a <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
100045e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100045ee:	f023 0207 	bic.w	r2, r3, #7
100045f2:	687b      	ldr	r3, [r7, #4]
100045f4:	6a1b      	ldr	r3, [r3, #32]
100045f6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100045fa:	4313      	orrs	r3, r2
100045fc:	640b      	str	r3, [r1, #64]	; 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100045fe:	f7fd f963 	bl	100018c8 <HAL_GetTick>
10004602:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10004604:	e009      	b.n	1000461a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004606:	f7fd f95f 	bl	100018c8 <HAL_GetTick>
1000460a:	4602      	mov	r2, r0
1000460c:	68bb      	ldr	r3, [r7, #8]
1000460e:	1ad3      	subs	r3, r2, r3
10004610:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004614:	d901      	bls.n	1000461a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
10004616:	2303      	movs	r3, #3
10004618:	e086      	b.n	10004728 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
1000461a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10004620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004628:	d1ed      	bne.n	10004606 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
1000462a:	687b      	ldr	r3, [r7, #4]
1000462c:	681b      	ldr	r3, [r3, #0]
1000462e:	f003 0320 	and.w	r3, r3, #32
10004632:	2b00      	cmp	r3, #0
10004634:	d023      	beq.n	1000467e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
10004636:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000463a:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
1000463e:	f023 0207 	bic.w	r2, r3, #7
10004642:	687b      	ldr	r3, [r7, #4]
10004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004646:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000464a:	4313      	orrs	r3, r2
1000464c:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004650:	f7fd f93a 	bl	100018c8 <HAL_GetTick>
10004654:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10004656:	e009      	b.n	1000466c <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004658:	f7fd f936 	bl	100018c8 <HAL_GetTick>
1000465c:	4602      	mov	r2, r0
1000465e:	68bb      	ldr	r3, [r7, #8]
10004660:	1ad3      	subs	r3, r2, r3
10004662:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004666:	d901      	bls.n	1000466c <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
10004668:	2303      	movs	r3, #3
1000466a:	e05d      	b.n	10004728 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
1000466c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004670:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10004674:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004678:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000467c:	d1ec      	bne.n	10004658 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
1000467e:	687b      	ldr	r3, [r7, #4]
10004680:	681b      	ldr	r3, [r3, #0]
10004682:	f003 0340 	and.w	r3, r3, #64	; 0x40
10004686:	2b00      	cmp	r3, #0
10004688:	d023      	beq.n	100046d2 <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
1000468a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000468e:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10004692:	f023 0207 	bic.w	r2, r3, #7
10004696:	687b      	ldr	r3, [r7, #4]
10004698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000469a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000469e:	4313      	orrs	r3, r2
100046a0:	f8c1 3838 	str.w	r3, [r1, #2104]	; 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100046a4:	f7fd f910 	bl	100018c8 <HAL_GetTick>
100046a8:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
100046aa:	e009      	b.n	100046c0 <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100046ac:	f7fd f90c 	bl	100018c8 <HAL_GetTick>
100046b0:	4602      	mov	r2, r0
100046b2:	68bb      	ldr	r3, [r7, #8]
100046b4:	1ad3      	subs	r3, r2, r3
100046b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100046ba:	d901      	bls.n	100046c0 <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
100046bc:	2303      	movs	r3, #3
100046be:	e033      	b.n	10004728 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
100046c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100046c4:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
100046c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100046cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100046d0:	d1ec      	bne.n	100046ac <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
100046d2:	687b      	ldr	r3, [r7, #4]
100046d4:	681b      	ldr	r3, [r3, #0]
100046d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
100046da:	2b00      	cmp	r3, #0
100046dc:	d023      	beq.n	10004726 <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
100046de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100046e2:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
100046e6:	f023 0207 	bic.w	r2, r3, #7
100046ea:	687b      	ldr	r3, [r7, #4]
100046ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100046ee:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100046f2:	4313      	orrs	r3, r2
100046f4:	f8c1 383c 	str.w	r3, [r1, #2108]	; 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100046f8:	f7fd f8e6 	bl	100018c8 <HAL_GetTick>
100046fc:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
100046fe:	e009      	b.n	10004714 <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004700:	f7fd f8e2 	bl	100018c8 <HAL_GetTick>
10004704:	4602      	mov	r2, r0
10004706:	68bb      	ldr	r3, [r7, #8]
10004708:	1ad3      	subs	r3, r2, r3
1000470a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000470e:	d901      	bls.n	10004714 <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
10004710:	2303      	movs	r3, #3
10004712:	e009      	b.n	10004728 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10004714:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004718:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
1000471c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004720:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004724:	d1ec      	bne.n	10004700 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
10004726:	2300      	movs	r3, #0
}
10004728:	4618      	mov	r0, r3
1000472a:	3710      	adds	r7, #16
1000472c:	46bd      	mov	sp, r7
1000472e:	bd80      	pop	{r7, pc}

10004730 <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
10004730:	b580      	push	{r7, lr}
10004732:	b084      	sub	sp, #16
10004734:	af00      	add	r7, sp, #0
10004736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
10004738:	687b      	ldr	r3, [r7, #4]
1000473a:	681b      	ldr	r3, [r3, #0]
1000473c:	2b03      	cmp	r3, #3
1000473e:	d840      	bhi.n	100047c2 <RCC_MPUConfig+0x92>
10004740:	a201      	add	r2, pc, #4	; (adr r2, 10004748 <RCC_MPUConfig+0x18>)
10004742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004746:	bf00      	nop
10004748:	10004759 	.word	0x10004759
1000474c:	1000476d 	.word	0x1000476d
10004750:	10004783 	.word	0x10004783
10004754:	10004797 	.word	0x10004797
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10004758:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000475c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004760:	f003 0301 	and.w	r3, r3, #1
10004764:	2b01      	cmp	r3, #1
10004766:	d02e      	beq.n	100047c6 <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
10004768:	2301      	movs	r3, #1
1000476a:	e053      	b.n	10004814 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000476c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004770:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004774:	f403 7380 	and.w	r3, r3, #256	; 0x100
10004778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
1000477c:	d025      	beq.n	100047ca <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
1000477e:	2301      	movs	r3, #1
10004780:	e048      	b.n	10004814 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10004782:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000478a:	f003 0302 	and.w	r3, r3, #2
1000478e:	2b02      	cmp	r3, #2
10004790:	d01d      	beq.n	100047ce <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
10004792:	2301      	movs	r3, #1
10004794:	e03e      	b.n	10004814 <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10004796:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000479a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000479e:	f003 0302 	and.w	r3, r3, #2
100047a2:	2b02      	cmp	r3, #2
100047a4:	d001      	beq.n	100047aa <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
100047a6:	2301      	movs	r3, #1
100047a8:	e034      	b.n	10004814 <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
100047aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100047ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100047b0:	f023 0207 	bic.w	r2, r3, #7
100047b4:	687b      	ldr	r3, [r7, #4]
100047b6:	685b      	ldr	r3, [r3, #4]
100047b8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100047bc:	4313      	orrs	r3, r2
100047be:	62cb      	str	r3, [r1, #44]	; 0x2c

      break;
100047c0:	e006      	b.n	100047d0 <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
100047c2:	2301      	movs	r3, #1
100047c4:	e026      	b.n	10004814 <RCC_MPUConfig+0xe4>
      break;
100047c6:	bf00      	nop
100047c8:	e002      	b.n	100047d0 <RCC_MPUConfig+0xa0>
      break;
100047ca:	bf00      	nop
100047cc:	e000      	b.n	100047d0 <RCC_MPUConfig+0xa0>
      break;
100047ce:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
100047d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100047d4:	6a1b      	ldr	r3, [r3, #32]
100047d6:	f023 0203 	bic.w	r2, r3, #3
100047da:	687b      	ldr	r3, [r7, #4]
100047dc:	681b      	ldr	r3, [r3, #0]
100047de:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100047e2:	4313      	orrs	r3, r2
100047e4:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100047e6:	f7fd f86f 	bl	100018c8 <HAL_GetTick>
100047ea:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
100047ec:	e009      	b.n	10004802 <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100047ee:	f7fd f86b 	bl	100018c8 <HAL_GetTick>
100047f2:	4602      	mov	r2, r0
100047f4:	68fb      	ldr	r3, [r7, #12]
100047f6:	1ad3      	subs	r3, r2, r3
100047f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100047fc:	d901      	bls.n	10004802 <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
100047fe:	2303      	movs	r3, #3
10004800:	e008      	b.n	10004814 <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10004802:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004806:	6a1b      	ldr	r3, [r3, #32]
10004808:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000480c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004810:	d1ed      	bne.n	100047ee <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
10004812:	2300      	movs	r3, #0
}
10004814:	4618      	mov	r0, r3
10004816:	3710      	adds	r7, #16
10004818:	46bd      	mov	sp, r7
1000481a:	bd80      	pop	{r7, pc}

1000481c <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
1000481c:	b580      	push	{r7, lr}
1000481e:	b084      	sub	sp, #16
10004820:	af00      	add	r7, sp, #0
10004822:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
10004824:	687b      	ldr	r3, [r7, #4]
10004826:	681b      	ldr	r3, [r3, #0]
10004828:	2b02      	cmp	r3, #2
1000482a:	d01b      	beq.n	10004864 <RCC_AXISSConfig+0x48>
1000482c:	2b02      	cmp	r3, #2
1000482e:	d823      	bhi.n	10004878 <RCC_AXISSConfig+0x5c>
10004830:	2b00      	cmp	r3, #0
10004832:	d002      	beq.n	1000483a <RCC_AXISSConfig+0x1e>
10004834:	2b01      	cmp	r3, #1
10004836:	d00a      	beq.n	1000484e <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
10004838:	e01e      	b.n	10004878 <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
1000483a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000483e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004842:	f003 0301 	and.w	r3, r3, #1
10004846:	2b01      	cmp	r3, #1
10004848:	d018      	beq.n	1000487c <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
1000484a:	2301      	movs	r3, #1
1000484c:	e079      	b.n	10004942 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000484e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004852:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004856:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000485a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
1000485e:	d00f      	beq.n	10004880 <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
10004860:	2301      	movs	r3, #1
10004862:	e06e      	b.n	10004942 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10004864:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000486c:	f003 0302 	and.w	r3, r3, #2
10004870:	2b02      	cmp	r3, #2
10004872:	d007      	beq.n	10004884 <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
10004874:	2301      	movs	r3, #1
10004876:	e064      	b.n	10004942 <RCC_AXISSConfig+0x126>
      break;
10004878:	bf00      	nop
1000487a:	e004      	b.n	10004886 <RCC_AXISSConfig+0x6a>
      break;
1000487c:	bf00      	nop
1000487e:	e002      	b.n	10004886 <RCC_AXISSConfig+0x6a>
      break;
10004880:	bf00      	nop
10004882:	e000      	b.n	10004886 <RCC_AXISSConfig+0x6a>
      break;
10004884:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
10004886:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000488c:	f023 0207 	bic.w	r2, r3, #7
10004890:	687b      	ldr	r3, [r7, #4]
10004892:	681b      	ldr	r3, [r3, #0]
10004894:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004898:	4313      	orrs	r3, r2
1000489a:	624b      	str	r3, [r1, #36]	; 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
1000489c:	687b      	ldr	r3, [r7, #4]
1000489e:	681b      	ldr	r3, [r3, #0]
100048a0:	2b03      	cmp	r3, #3
100048a2:	d016      	beq.n	100048d2 <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100048a4:	f7fd f810 	bl	100018c8 <HAL_GetTick>
100048a8:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
100048aa:	e009      	b.n	100048c0 <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100048ac:	f7fd f80c 	bl	100018c8 <HAL_GetTick>
100048b0:	4602      	mov	r2, r0
100048b2:	68fb      	ldr	r3, [r7, #12]
100048b4:	1ad3      	subs	r3, r2, r3
100048b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100048ba:	d901      	bls.n	100048c0 <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
100048bc:	2303      	movs	r3, #3
100048be:	e040      	b.n	10004942 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
100048c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100048c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100048ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100048ce:	d1ed      	bne.n	100048ac <RCC_AXISSConfig+0x90>
100048d0:	e015      	b.n	100048fe <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100048d2:	f7fc fff9 	bl	100018c8 <HAL_GetTick>
100048d6:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
100048d8:	e009      	b.n	100048ee <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100048da:	f7fc fff5 	bl	100018c8 <HAL_GetTick>
100048de:	4602      	mov	r2, r0
100048e0:	68fb      	ldr	r3, [r7, #12]
100048e2:	1ad3      	subs	r3, r2, r3
100048e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100048e8:	d901      	bls.n	100048ee <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
100048ea:	2303      	movs	r3, #3
100048ec:	e029      	b.n	10004942 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
100048ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100048f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100048f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100048fc:	d0ed      	beq.n	100048da <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
100048fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10004904:	f023 0207 	bic.w	r2, r3, #7
10004908:	687b      	ldr	r3, [r7, #4]
1000490a:	685b      	ldr	r3, [r3, #4]
1000490c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004910:	4313      	orrs	r3, r2
10004912:	630b      	str	r3, [r1, #48]	; 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10004914:	f7fc ffd8 	bl	100018c8 <HAL_GetTick>
10004918:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
1000491a:	e009      	b.n	10004930 <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000491c:	f7fc ffd4 	bl	100018c8 <HAL_GetTick>
10004920:	4602      	mov	r2, r0
10004922:	68fb      	ldr	r3, [r7, #12]
10004924:	1ad3      	subs	r3, r2, r3
10004926:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000492a:	d901      	bls.n	10004930 <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
1000492c:	2303      	movs	r3, #3
1000492e:	e008      	b.n	10004942 <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10004930:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10004936:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000493a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000493e:	d1ed      	bne.n	1000491c <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
10004940:	2300      	movs	r3, #0
}
10004942:	4618      	mov	r0, r3
10004944:	3710      	adds	r7, #16
10004946:	46bd      	mov	sp, r7
10004948:	bd80      	pop	{r7, pc}
	...

1000494c <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
1000494c:	b580      	push	{r7, lr}
1000494e:	b084      	sub	sp, #16
10004950:	af00      	add	r7, sp, #0
10004952:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
10004954:	687b      	ldr	r3, [r7, #4]
10004956:	681b      	ldr	r3, [r3, #0]
10004958:	2b03      	cmp	r3, #3
1000495a:	d834      	bhi.n	100049c6 <RCC_MCUConfig+0x7a>
1000495c:	a201      	add	r2, pc, #4	; (adr r2, 10004964 <RCC_MCUConfig+0x18>)
1000495e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004962:	bf00      	nop
10004964:	10004975 	.word	0x10004975
10004968:	10004989 	.word	0x10004989
1000496c:	1000499f 	.word	0x1000499f
10004970:	100049b3 	.word	0x100049b3
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10004974:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004978:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000497c:	f003 0301 	and.w	r3, r3, #1
10004980:	2b01      	cmp	r3, #1
10004982:	d022      	beq.n	100049ca <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
10004984:	2301      	movs	r3, #1
10004986:	e081      	b.n	10004a8c <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10004988:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000498c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004990:	f403 7380 	and.w	r3, r3, #256	; 0x100
10004994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10004998:	d019      	beq.n	100049ce <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
1000499a:	2301      	movs	r3, #1
1000499c:	e076      	b.n	10004a8c <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
1000499e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100049a2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100049a6:	f003 0310 	and.w	r3, r3, #16
100049aa:	2b10      	cmp	r3, #16
100049ac:	d011      	beq.n	100049d2 <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
100049ae:	2301      	movs	r3, #1
100049b0:	e06c      	b.n	10004a8c <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
100049b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100049b6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100049ba:	f003 0302 	and.w	r3, r3, #2
100049be:	2b02      	cmp	r3, #2
100049c0:	d009      	beq.n	100049d6 <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
100049c2:	2301      	movs	r3, #1
100049c4:	e062      	b.n	10004a8c <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
100049c6:	bf00      	nop
100049c8:	e006      	b.n	100049d8 <RCC_MCUConfig+0x8c>
      break;
100049ca:	bf00      	nop
100049cc:	e004      	b.n	100049d8 <RCC_MCUConfig+0x8c>
      break;
100049ce:	bf00      	nop
100049d0:	e002      	b.n	100049d8 <RCC_MCUConfig+0x8c>
      break;
100049d2:	bf00      	nop
100049d4:	e000      	b.n	100049d8 <RCC_MCUConfig+0x8c>
      break;
100049d6:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
100049d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100049dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100049de:	f023 0203 	bic.w	r2, r3, #3
100049e2:	687b      	ldr	r3, [r7, #4]
100049e4:	681b      	ldr	r3, [r3, #0]
100049e6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100049ea:	4313      	orrs	r3, r2
100049ec:	648b      	str	r3, [r1, #72]	; 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100049ee:	f7fc ff6b 	bl	100018c8 <HAL_GetTick>
100049f2:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
100049f4:	e009      	b.n	10004a0a <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100049f6:	f7fc ff67 	bl	100018c8 <HAL_GetTick>
100049fa:	4602      	mov	r2, r0
100049fc:	68fb      	ldr	r3, [r7, #12]
100049fe:	1ad3      	subs	r3, r2, r3
10004a00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004a04:	d901      	bls.n	10004a0a <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
10004a06:	2303      	movs	r3, #3
10004a08:	e040      	b.n	10004a8c <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10004a0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10004a10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004a14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004a18:	d1ed      	bne.n	100049f6 <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10004a1a:	f000 fc15 	bl	10005248 <HAL_RCC_GetSystemCoreClockFreq>
10004a1e:	4603      	mov	r3, r0
10004a20:	4a1c      	ldr	r2, [pc, #112]	; (10004a94 <RCC_MCUConfig+0x148>)
10004a22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10004a24:	4b1c      	ldr	r3, [pc, #112]	; (10004a98 <RCC_MCUConfig+0x14c>)
10004a26:	681b      	ldr	r3, [r3, #0]
10004a28:	4618      	mov	r0, r3
10004a2a:	f7fc ff03 	bl	10001834 <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
10004a2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a32:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10004a36:	f023 020f 	bic.w	r2, r3, #15
10004a3a:	687b      	ldr	r3, [r7, #4]
10004a3c:	685b      	ldr	r3, [r3, #4]
10004a3e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004a42:	4313      	orrs	r3, r2
10004a44:	f8c1 3830 	str.w	r3, [r1, #2096]	; 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10004a48:	f7fc ff3e 	bl	100018c8 <HAL_GetTick>
10004a4c:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10004a4e:	e009      	b.n	10004a64 <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004a50:	f7fc ff3a 	bl	100018c8 <HAL_GetTick>
10004a54:	4602      	mov	r2, r0
10004a56:	68fb      	ldr	r3, [r7, #12]
10004a58:	1ad3      	subs	r3, r2, r3
10004a5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004a5e:	d901      	bls.n	10004a64 <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
10004a60:	2303      	movs	r3, #3
10004a62:	e013      	b.n	10004a8c <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10004a64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a68:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10004a6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004a70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004a74:	d1ec      	bne.n	10004a50 <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10004a76:	f000 fbe7 	bl	10005248 <HAL_RCC_GetSystemCoreClockFreq>
10004a7a:	4603      	mov	r3, r0
10004a7c:	4a05      	ldr	r2, [pc, #20]	; (10004a94 <RCC_MCUConfig+0x148>)
10004a7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10004a80:	4b05      	ldr	r3, [pc, #20]	; (10004a98 <RCC_MCUConfig+0x14c>)
10004a82:	681b      	ldr	r3, [r3, #0]
10004a84:	4618      	mov	r0, r3
10004a86:	f7fc fed5 	bl	10001834 <HAL_InitTick>
#endif

  return HAL_OK;
10004a8a:	2300      	movs	r3, #0
}
10004a8c:	4618      	mov	r0, r3
10004a8e:	3710      	adds	r7, #16
10004a90:	46bd      	mov	sp, r7
10004a92:	bd80      	pop	{r7, pc}
10004a94:	10020000 	.word	0x10020000
10004a98:	1002000c 	.word	0x1002000c

10004a9c <HAL_RCC_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
10004a9c:	b480      	push	{r7}
10004a9e:	b089      	sub	sp, #36	; 0x24
10004aa0:	af00      	add	r7, sp, #0
10004aa2:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0U, pll2m = 1U, pll2fracen = 0U, hsivalue = 0U;
10004aa4:	2300      	movs	r3, #0
10004aa6:	61bb      	str	r3, [r7, #24]
10004aa8:	2301      	movs	r3, #1
10004aaa:	617b      	str	r3, [r7, #20]
10004aac:	2300      	movs	r3, #0
10004aae:	613b      	str	r3, [r7, #16]
10004ab0:	2300      	movs	r3, #0
10004ab2:	60fb      	str	r3, [r7, #12]
  float fracn1, pll2vco = 0;
10004ab4:	f04f 0300 	mov.w	r3, #0
10004ab8:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL12_SOURCE();
10004aba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004ac0:	f003 0303 	and.w	r3, r3, #3
10004ac4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLL2CFGR1 & RCC_PLL2CFGR1_DIVM2) >> RCC_PLL2CFGR1_DIVM2_Pos) + 1U;
10004ac6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
10004ace:	0c1b      	lsrs	r3, r3, #16
10004ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10004ad4:	3301      	adds	r3, #1
10004ad6:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLL2FRACR & RCC_PLL2FRACR_FRACLE) >> RCC_PLL2FRACR_FRACLE_Pos;
10004ad8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004adc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10004ae0:	0c1b      	lsrs	r3, r3, #16
10004ae2:	f003 0301 	and.w	r3, r3, #1
10004ae6:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACV) >> RCC_PLL2FRACR_FRACV_Pos));
10004ae8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004aec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10004af0:	08db      	lsrs	r3, r3, #3
10004af2:	f3c3 030c 	ubfx	r3, r3, #0, #13
10004af6:	693a      	ldr	r2, [r7, #16]
10004af8:	fb02 f303 	mul.w	r3, r2, r3
10004afc:	ee07 3a90 	vmov	s15, r3
10004b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004b04:	edc7 7a02 	vstr	s15, [r7, #8]
  pll2vco = (float)((float)((RCC->PLL2CFGR1 & RCC_PLL2CFGR1_DIVN) + 1U) + (fracn1 / (float)0x2000));  //Intermediary value
10004b08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
10004b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
10004b14:	3301      	adds	r3, #1
10004b16:	ee07 3a90 	vmov	s15, r3
10004b1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004b1e:	edd7 6a02 	vldr	s13, [r7, #8]
10004b22:	ed9f 6a51 	vldr	s12, [pc, #324]	; 10004c68 <HAL_RCC_GetPLL2ClockFreq+0x1cc>
10004b26:	eec6 7a86 	vdiv.f32	s15, s13, s12
10004b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
10004b2e:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10004b32:	69bb      	ldr	r3, [r7, #24]
10004b34:	2b02      	cmp	r3, #2
10004b36:	d047      	beq.n	10004bc8 <HAL_RCC_GetPLL2ClockFreq+0x12c>
10004b38:	69bb      	ldr	r3, [r7, #24]
10004b3a:	2b02      	cmp	r3, #2
10004b3c:	d848      	bhi.n	10004bd0 <HAL_RCC_GetPLL2ClockFreq+0x134>
10004b3e:	69bb      	ldr	r3, [r7, #24]
10004b40:	2b00      	cmp	r3, #0
10004b42:	d003      	beq.n	10004b4c <HAL_RCC_GetPLL2ClockFreq+0xb0>
10004b44:	69bb      	ldr	r3, [r7, #24]
10004b46:	2b01      	cmp	r3, #1
10004b48:	d02f      	beq.n	10004baa <HAL_RCC_GetPLL2ClockFreq+0x10e>
10004b4a:	e041      	b.n	10004bd0 <HAL_RCC_GetPLL2ClockFreq+0x134>
  {
    case RCC_PLL12SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10004b4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b50:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004b54:	f003 0304 	and.w	r3, r3, #4
10004b58:	2b04      	cmp	r3, #4
10004b5a:	d117      	bne.n	10004b8c <HAL_RCC_GetPLL2ClockFreq+0xf0>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10004b5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b60:	699b      	ldr	r3, [r3, #24]
10004b62:	f003 0303 	and.w	r3, r3, #3
10004b66:	4a41      	ldr	r2, [pc, #260]	; (10004c6c <HAL_RCC_GetPLL2ClockFreq+0x1d0>)
10004b68:	fa22 f303 	lsr.w	r3, r2, r3
10004b6c:	60fb      	str	r3, [r7, #12]
        pll2vco *= (float)(hsivalue / pll2m);
10004b6e:	68fa      	ldr	r2, [r7, #12]
10004b70:	697b      	ldr	r3, [r7, #20]
10004b72:	fbb2 f3f3 	udiv	r3, r2, r3
10004b76:	ee07 3a90 	vmov	s15, r3
10004b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004b7e:	ed97 7a07 	vldr	s14, [r7, #28]
10004b82:	ee67 7a27 	vmul.f32	s15, s14, s15
10004b86:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco *= (float)(HSI_VALUE / pll2m);
      }
      break;
10004b8a:	e025      	b.n	10004bd8 <HAL_RCC_GetPLL2ClockFreq+0x13c>
        pll2vco *= (float)(HSI_VALUE / pll2m);
10004b8c:	4a37      	ldr	r2, [pc, #220]	; (10004c6c <HAL_RCC_GetPLL2ClockFreq+0x1d0>)
10004b8e:	697b      	ldr	r3, [r7, #20]
10004b90:	fbb2 f3f3 	udiv	r3, r2, r3
10004b94:	ee07 3a90 	vmov	s15, r3
10004b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004b9c:	ed97 7a07 	vldr	s14, [r7, #28]
10004ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
10004ba4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004ba8:	e016      	b.n	10004bd8 <HAL_RCC_GetPLL2ClockFreq+0x13c>

    case RCC_PLL12SOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco *= (float)(HSE_VALUE / pll2m);
10004baa:	4a31      	ldr	r2, [pc, #196]	; (10004c70 <HAL_RCC_GetPLL2ClockFreq+0x1d4>)
10004bac:	697b      	ldr	r3, [r7, #20]
10004bae:	fbb2 f3f3 	udiv	r3, r2, r3
10004bb2:	ee07 3a90 	vmov	s15, r3
10004bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004bba:	ed97 7a07 	vldr	s14, [r7, #28]
10004bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
10004bc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004bc6:	e007      	b.n	10004bd8 <HAL_RCC_GetPLL2ClockFreq+0x13c>

    case RCC_PLL12SOURCE_OFF:  /* No clock source for PLL */
      pll2vco = 0;
10004bc8:	f04f 0300 	mov.w	r3, #0
10004bcc:	61fb      	str	r3, [r7, #28]
      break;
10004bce:	e003      	b.n	10004bd8 <HAL_RCC_GetPLL2ClockFreq+0x13c>

    default:
      pll2vco = 0;
10004bd0:	f04f 0300 	mov.w	r3, #0
10004bd4:	61fb      	str	r3, [r7, #28]
      break;
10004bd6:	bf00      	nop
  }

  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVP) >> RCC_PLL2CFGR2_DIVP_Pos) + 1U)));
10004bd8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004bdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10004be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004be4:	3301      	adds	r3, #1
10004be6:	ee07 3a90 	vmov	s15, r3
10004bea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004bee:	edd7 6a07 	vldr	s13, [r7, #28]
10004bf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004bf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004bfa:	ee17 2a90 	vmov	r2, s15
10004bfe:	687b      	ldr	r3, [r7, #4]
10004c00:	601a      	str	r2, [r3, #0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVQ) >> RCC_PLL2CFGR2_DIVQ_Pos) + 1U)));
10004c02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004c06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10004c0a:	0a1b      	lsrs	r3, r3, #8
10004c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004c10:	3301      	adds	r3, #1
10004c12:	ee07 3a90 	vmov	s15, r3
10004c16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004c1a:	edd7 6a07 	vldr	s13, [r7, #28]
10004c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004c26:	ee17 2a90 	vmov	r2, s15
10004c2a:	687b      	ldr	r3, [r7, #4]
10004c2c:	605a      	str	r2, [r3, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVR) >> RCC_PLL2CFGR2_DIVR_Pos) + 1U)));
10004c2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004c32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10004c36:	0c1b      	lsrs	r3, r3, #16
10004c38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004c3c:	3301      	adds	r3, #1
10004c3e:	ee07 3a90 	vmov	s15, r3
10004c42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004c46:	edd7 6a07 	vldr	s13, [r7, #28]
10004c4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004c52:	ee17 2a90 	vmov	r2, s15
10004c56:	687b      	ldr	r3, [r7, #4]
10004c58:	609a      	str	r2, [r3, #8]
}
10004c5a:	bf00      	nop
10004c5c:	3724      	adds	r7, #36	; 0x24
10004c5e:	46bd      	mov	sp, r7
10004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
10004c64:	4770      	bx	lr
10004c66:	bf00      	nop
10004c68:	46000000 	.word	0x46000000
10004c6c:	03d09000 	.word	0x03d09000
10004c70:	016e3600 	.word	0x016e3600

10004c74 <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
10004c74:	b480      	push	{r7}
10004c76:	b089      	sub	sp, #36	; 0x24
10004c78:	af00      	add	r7, sp, #0
10004c7a:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
10004c7c:	2300      	movs	r3, #0
10004c7e:	61bb      	str	r3, [r7, #24]
10004c80:	2301      	movs	r3, #1
10004c82:	617b      	str	r3, [r7, #20]
10004c84:	2300      	movs	r3, #0
10004c86:	613b      	str	r3, [r7, #16]
10004c88:	2300      	movs	r3, #0
10004c8a:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
10004c8c:	f04f 0300 	mov.w	r3, #0
10004c90:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
10004c92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004c96:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10004c9a:	f003 0303 	and.w	r3, r3, #3
10004c9e:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
10004ca0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004ca4:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10004ca8:	0c1b      	lsrs	r3, r3, #16
10004caa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10004cae:	3301      	adds	r3, #1
10004cb0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
10004cb2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004cb6:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10004cba:	0c1b      	lsrs	r3, r3, #16
10004cbc:	f003 0301 	and.w	r3, r3, #1
10004cc0:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
10004cc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004cc6:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10004cca:	08db      	lsrs	r3, r3, #3
10004ccc:	f3c3 030c 	ubfx	r3, r3, #0, #13
10004cd0:	693a      	ldr	r2, [r7, #16]
10004cd2:	fb02 f303 	mul.w	r3, r2, r3
10004cd6:	ee07 3a90 	vmov	s15, r3
10004cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004cde:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
10004ce2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004ce6:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10004cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
10004cee:	3301      	adds	r3, #1
10004cf0:	ee07 3a90 	vmov	s15, r3
10004cf4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004cf8:	edd7 6a02 	vldr	s13, [r7, #8]
10004cfc:	ed9f 6a56 	vldr	s12, [pc, #344]	; 10004e58 <HAL_RCC_GetPLL3ClockFreq+0x1e4>
10004d00:	eec6 7a86 	vdiv.f32	s15, s13, s12
10004d04:	ee77 7a27 	vadd.f32	s15, s14, s15
10004d08:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10004d0c:	69bb      	ldr	r3, [r7, #24]
10004d0e:	2b03      	cmp	r3, #3
10004d10:	d85b      	bhi.n	10004dca <HAL_RCC_GetPLL3ClockFreq+0x156>
10004d12:	a201      	add	r2, pc, #4	; (adr r2, 10004d18 <HAL_RCC_GetPLL3ClockFreq+0xa4>)
10004d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004d18:	10004d29 	.word	0x10004d29
10004d1c:	10004d87 	.word	0x10004d87
10004d20:	10004da5 	.word	0x10004da5
10004d24:	10004dc3 	.word	0x10004dc3
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10004d28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d2c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004d30:	f003 0304 	and.w	r3, r3, #4
10004d34:	2b04      	cmp	r3, #4
10004d36:	d117      	bne.n	10004d68 <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10004d38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d3c:	699b      	ldr	r3, [r3, #24]
10004d3e:	f003 0303 	and.w	r3, r3, #3
10004d42:	4a46      	ldr	r2, [pc, #280]	; (10004e5c <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10004d44:	fa22 f303 	lsr.w	r3, r2, r3
10004d48:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
10004d4a:	68fa      	ldr	r2, [r7, #12]
10004d4c:	697b      	ldr	r3, [r7, #20]
10004d4e:	fbb2 f3f3 	udiv	r3, r2, r3
10004d52:	ee07 3a90 	vmov	s15, r3
10004d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004d5a:	ed97 7a07 	vldr	s14, [r7, #28]
10004d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
10004d62:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
10004d66:	e030      	b.n	10004dca <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
10004d68:	4a3c      	ldr	r2, [pc, #240]	; (10004e5c <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10004d6a:	697b      	ldr	r3, [r7, #20]
10004d6c:	fbb2 f3f3 	udiv	r3, r2, r3
10004d70:	ee07 3a90 	vmov	s15, r3
10004d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004d78:	ed97 7a07 	vldr	s14, [r7, #28]
10004d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
10004d80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004d84:	e021      	b.n	10004dca <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
10004d86:	4a36      	ldr	r2, [pc, #216]	; (10004e60 <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
10004d88:	697b      	ldr	r3, [r7, #20]
10004d8a:	fbb2 f3f3 	udiv	r3, r2, r3
10004d8e:	ee07 3a90 	vmov	s15, r3
10004d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004d96:	ed97 7a07 	vldr	s14, [r7, #28]
10004d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
10004d9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004da2:	e012      	b.n	10004dca <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
10004da4:	4a2f      	ldr	r2, [pc, #188]	; (10004e64 <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
10004da6:	697b      	ldr	r3, [r7, #20]
10004da8:	fbb2 f3f3 	udiv	r3, r2, r3
10004dac:	ee07 3a90 	vmov	s15, r3
10004db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004db4:	ed97 7a07 	vldr	s14, [r7, #28]
10004db8:	ee67 7a27 	vmul.f32	s15, s14, s15
10004dbc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004dc0:	e003      	b.n	10004dca <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
10004dc2:	f04f 0300 	mov.w	r3, #0
10004dc6:	61fb      	str	r3, [r7, #28]
      break;
10004dc8:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
10004dca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004dce:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10004dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004dd6:	3301      	adds	r3, #1
10004dd8:	ee07 3a90 	vmov	s15, r3
10004ddc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004de0:	edd7 6a07 	vldr	s13, [r7, #28]
10004de4:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004de8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004dec:	ee17 2a90 	vmov	r2, s15
10004df0:	687b      	ldr	r3, [r7, #4]
10004df2:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
10004df4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004df8:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10004dfc:	0a1b      	lsrs	r3, r3, #8
10004dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004e02:	3301      	adds	r3, #1
10004e04:	ee07 3a90 	vmov	s15, r3
10004e08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004e0c:	edd7 6a07 	vldr	s13, [r7, #28]
10004e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004e14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004e18:	ee17 2a90 	vmov	r2, s15
10004e1c:	687b      	ldr	r3, [r7, #4]
10004e1e:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
10004e20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e24:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10004e28:	0c1b      	lsrs	r3, r3, #16
10004e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004e2e:	3301      	adds	r3, #1
10004e30:	ee07 3a90 	vmov	s15, r3
10004e34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004e38:	edd7 6a07 	vldr	s13, [r7, #28]
10004e3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004e40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004e44:	ee17 2a90 	vmov	r2, s15
10004e48:	687b      	ldr	r3, [r7, #4]
10004e4a:	609a      	str	r2, [r3, #8]
}
10004e4c:	bf00      	nop
10004e4e:	3724      	adds	r7, #36	; 0x24
10004e50:	46bd      	mov	sp, r7
10004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
10004e56:	4770      	bx	lr
10004e58:	46000000 	.word	0x46000000
10004e5c:	03d09000 	.word	0x03d09000
10004e60:	016e3600 	.word	0x016e3600
10004e64:	003d0900 	.word	0x003d0900

10004e68 <HAL_RCC_GetPLL4ClockFreq>:
  *         right PLL4CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL4_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL4ClockFreq(PLL4_ClocksTypeDef *PLL4_Clocks)
{
10004e68:	b480      	push	{r7}
10004e6a:	b089      	sub	sp, #36	; 0x24
10004e6c:	af00      	add	r7, sp, #0
10004e6e:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0U, pll4m = 1U, pll4fracen = 0U, hsivalue = 0U;
10004e70:	2300      	movs	r3, #0
10004e72:	61bb      	str	r3, [r7, #24]
10004e74:	2301      	movs	r3, #1
10004e76:	617b      	str	r3, [r7, #20]
10004e78:	2300      	movs	r3, #0
10004e7a:	613b      	str	r3, [r7, #16]
10004e7c:	2300      	movs	r3, #0
10004e7e:	60fb      	str	r3, [r7, #12]
  float fracn1, pll4vco = 0;
10004e80:	f04f 0300 	mov.w	r3, #0
10004e84:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL4_SOURCE();
10004e86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e8a:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10004e8e:	f003 0303 	and.w	r3, r3, #3
10004e92:	61bb      	str	r3, [r7, #24]
  pll4m = ((RCC->PLL4CFGR1 & RCC_PLL4CFGR1_DIVM4) >> RCC_PLL4CFGR1_DIVM4_Pos) + 1U;
10004e94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e98:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
10004e9c:	0c1b      	lsrs	r3, r3, #16
10004e9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10004ea2:	3301      	adds	r3, #1
10004ea4:	617b      	str	r3, [r7, #20]
  pll4fracen = (RCC->PLL4FRACR & RCC_PLL4FRACR_FRACLE) >> RCC_PLL4FRACR_FRACLE_Pos;
10004ea6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004eaa:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10004eae:	0c1b      	lsrs	r3, r3, #16
10004eb0:	f003 0301 	and.w	r3, r3, #1
10004eb4:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll4fracen * ((RCC->PLL4FRACR & RCC_PLL4FRACR_FRACV) >> RCC_PLL4FRACR_FRACV_Pos));
10004eb6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004eba:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10004ebe:	08db      	lsrs	r3, r3, #3
10004ec0:	f3c3 030c 	ubfx	r3, r3, #0, #13
10004ec4:	693a      	ldr	r2, [r7, #16]
10004ec6:	fb02 f303 	mul.w	r3, r2, r3
10004eca:	ee07 3a90 	vmov	s15, r3
10004ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004ed2:	edc7 7a02 	vstr	s15, [r7, #8]
  pll4vco = (float)((float)((RCC->PLL4CFGR1 & RCC_PLL4CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
10004ed6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004eda:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
10004ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
10004ee2:	3301      	adds	r3, #1
10004ee4:	ee07 3a90 	vmov	s15, r3
10004ee8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004eec:	edd7 6a02 	vldr	s13, [r7, #8]
10004ef0:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 10005064 <HAL_RCC_GetPLL4ClockFreq+0x1fc>
10004ef4:	eec6 7a86 	vdiv.f32	s15, s13, s12
10004ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
10004efc:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10004f00:	69bb      	ldr	r3, [r7, #24]
10004f02:	2b03      	cmp	r3, #3
10004f04:	d866      	bhi.n	10004fd4 <HAL_RCC_GetPLL4ClockFreq+0x16c>
10004f06:	a201      	add	r2, pc, #4	; (adr r2, 10004f0c <HAL_RCC_GetPLL4ClockFreq+0xa4>)
10004f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004f0c:	10004f1d 	.word	0x10004f1d
10004f10:	10004f7b 	.word	0x10004f7b
10004f14:	10004f99 	.word	0x10004f99
10004f18:	10004fb7 	.word	0x10004fb7
  {
    case RCC_PLL4SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10004f1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f20:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004f24:	f003 0304 	and.w	r3, r3, #4
10004f28:	2b04      	cmp	r3, #4
10004f2a:	d117      	bne.n	10004f5c <HAL_RCC_GetPLL4ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10004f2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f30:	699b      	ldr	r3, [r3, #24]
10004f32:	f003 0303 	and.w	r3, r3, #3
10004f36:	4a4c      	ldr	r2, [pc, #304]	; (10005068 <HAL_RCC_GetPLL4ClockFreq+0x200>)
10004f38:	fa22 f303 	lsr.w	r3, r2, r3
10004f3c:	60fb      	str	r3, [r7, #12]
        pll4vco *= (float)(hsivalue / pll4m);
10004f3e:	68fa      	ldr	r2, [r7, #12]
10004f40:	697b      	ldr	r3, [r7, #20]
10004f42:	fbb2 f3f3 	udiv	r3, r2, r3
10004f46:	ee07 3a90 	vmov	s15, r3
10004f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004f4e:	ed97 7a07 	vldr	s14, [r7, #28]
10004f52:	ee67 7a27 	vmul.f32	s15, s14, s15
10004f56:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll4vco *= (float)(HSI_VALUE / pll4m);
      }
      break;
10004f5a:	e03b      	b.n	10004fd4 <HAL_RCC_GetPLL4ClockFreq+0x16c>
        pll4vco *= (float)(HSI_VALUE / pll4m);
10004f5c:	4a42      	ldr	r2, [pc, #264]	; (10005068 <HAL_RCC_GetPLL4ClockFreq+0x200>)
10004f5e:	697b      	ldr	r3, [r7, #20]
10004f60:	fbb2 f3f3 	udiv	r3, r2, r3
10004f64:	ee07 3a90 	vmov	s15, r3
10004f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004f6c:	ed97 7a07 	vldr	s14, [r7, #28]
10004f70:	ee67 7a27 	vmul.f32	s15, s14, s15
10004f74:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004f78:	e02c      	b.n	10004fd4 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_HSE:  /* HSE used as PLL clock source */
      pll4vco *= (float)(HSE_VALUE / pll4m);
10004f7a:	4a3c      	ldr	r2, [pc, #240]	; (1000506c <HAL_RCC_GetPLL4ClockFreq+0x204>)
10004f7c:	697b      	ldr	r3, [r7, #20]
10004f7e:	fbb2 f3f3 	udiv	r3, r2, r3
10004f82:	ee07 3a90 	vmov	s15, r3
10004f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004f8a:	ed97 7a07 	vldr	s14, [r7, #28]
10004f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
10004f92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004f96:	e01d      	b.n	10004fd4 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_CSI:  /* CSI used as PLL clock source */
      pll4vco *= (float)(CSI_VALUE / pll4m);
10004f98:	4a35      	ldr	r2, [pc, #212]	; (10005070 <HAL_RCC_GetPLL4ClockFreq+0x208>)
10004f9a:	697b      	ldr	r3, [r7, #20]
10004f9c:	fbb2 f3f3 	udiv	r3, r2, r3
10004fa0:	ee07 3a90 	vmov	s15, r3
10004fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004fa8:	ed97 7a07 	vldr	s14, [r7, #28]
10004fac:	ee67 7a27 	vmul.f32	s15, s14, s15
10004fb0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004fb4:	e00e      	b.n	10004fd4 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_I2S_CKIN:  /* Signal I2S_CKIN used as reference clock */
      pll4vco *= (float)(EXTERNAL_CLOCK_VALUE / pll4m);
10004fb6:	4a2f      	ldr	r2, [pc, #188]	; (10005074 <HAL_RCC_GetPLL4ClockFreq+0x20c>)
10004fb8:	697b      	ldr	r3, [r7, #20]
10004fba:	fbb2 f3f3 	udiv	r3, r2, r3
10004fbe:	ee07 3a90 	vmov	s15, r3
10004fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004fc6:	ed97 7a07 	vldr	s14, [r7, #28]
10004fca:	ee67 7a27 	vmul.f32	s15, s14, s15
10004fce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004fd2:	bf00      	nop
  }

  PLL4_Clocks->PLL4_P_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVP) >> RCC_PLL4CFGR2_DIVP_Pos) + 1U)));
10004fd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004fd8:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
10004fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004fe0:	3301      	adds	r3, #1
10004fe2:	ee07 3a90 	vmov	s15, r3
10004fe6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004fea:	edd7 6a07 	vldr	s13, [r7, #28]
10004fee:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004ff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004ff6:	ee17 2a90 	vmov	r2, s15
10004ffa:	687b      	ldr	r3, [r7, #4]
10004ffc:	601a      	str	r2, [r3, #0]
  PLL4_Clocks->PLL4_Q_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVQ) >> RCC_PLL4CFGR2_DIVQ_Pos) + 1U)));
10004ffe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005002:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
10005006:	0a1b      	lsrs	r3, r3, #8
10005008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1000500c:	3301      	adds	r3, #1
1000500e:	ee07 3a90 	vmov	s15, r3
10005012:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10005016:	edd7 6a07 	vldr	s13, [r7, #28]
1000501a:	eec6 7a87 	vdiv.f32	s15, s13, s14
1000501e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10005022:	ee17 2a90 	vmov	r2, s15
10005026:	687b      	ldr	r3, [r7, #4]
10005028:	605a      	str	r2, [r3, #4]
  PLL4_Clocks->PLL4_R_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVR) >> RCC_PLL4CFGR2_DIVR_Pos) + 1U)));
1000502a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000502e:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
10005032:	0c1b      	lsrs	r3, r3, #16
10005034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10005038:	3301      	adds	r3, #1
1000503a:	ee07 3a90 	vmov	s15, r3
1000503e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10005042:	edd7 6a07 	vldr	s13, [r7, #28]
10005046:	eec6 7a87 	vdiv.f32	s15, s13, s14
1000504a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1000504e:	ee17 2a90 	vmov	r2, s15
10005052:	687b      	ldr	r3, [r7, #4]
10005054:	609a      	str	r2, [r3, #8]
}
10005056:	bf00      	nop
10005058:	3724      	adds	r7, #36	; 0x24
1000505a:	46bd      	mov	sp, r7
1000505c:	f85d 7b04 	ldr.w	r7, [sp], #4
10005060:	4770      	bx	lr
10005062:	bf00      	nop
10005064:	46000000 	.word	0x46000000
10005068:	03d09000 	.word	0x03d09000
1000506c:	016e3600 	.word	0x016e3600
10005070:	003d0900 	.word	0x003d0900
10005074:	00bb8000 	.word	0x00bb8000

10005078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
10005078:	b580      	push	{r7, lr}
1000507a:	b082      	sub	sp, #8
1000507c:	af00      	add	r7, sp, #0
  uint32_t apb1div = 0;
1000507e:	2300      	movs	r3, #0
10005080:	607b      	str	r3, [r7, #4]

  /* Compute PCLK1 frequency ---------------------------*/
  apb1div = __HAL_RCC_GET_APB1_DIV();
10005082:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005086:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
1000508a:	f003 0307 	and.w	r3, r3, #7
1000508e:	607b      	str	r3, [r7, #4]
  if (apb1div > RCC_APB1_DIV16)
10005090:	687b      	ldr	r3, [r7, #4]
10005092:	2b04      	cmp	r3, #4
10005094:	d901      	bls.n	1000509a <HAL_RCC_GetPCLK1Freq+0x22>
  {
    apb1div = RCC_APB1_DIV16;
10005096:	2304      	movs	r3, #4
10005098:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb1div);
1000509a:	f000 f88a 	bl	100051b2 <HAL_RCC_GetMCUFreq>
1000509e:	4602      	mov	r2, r0
100050a0:	687b      	ldr	r3, [r7, #4]
100050a2:	fa22 f303 	lsr.w	r3, r2, r3
}
100050a6:	4618      	mov	r0, r3
100050a8:	3708      	adds	r7, #8
100050aa:	46bd      	mov	sp, r7
100050ac:	bd80      	pop	{r7, pc}

100050ae <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
100050ae:	b580      	push	{r7, lr}
100050b0:	b082      	sub	sp, #8
100050b2:	af00      	add	r7, sp, #0
  uint32_t apb2div = 0;
100050b4:	2300      	movs	r3, #0
100050b6:	607b      	str	r3, [r7, #4]

  /* Compute PCLK2 frequency ---------------------------*/
  apb2div = __HAL_RCC_GET_APB2_DIV();
100050b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100050bc:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
100050c0:	f003 0307 	and.w	r3, r3, #7
100050c4:	607b      	str	r3, [r7, #4]
  if (apb2div > RCC_APB2_DIV16)
100050c6:	687b      	ldr	r3, [r7, #4]
100050c8:	2b04      	cmp	r3, #4
100050ca:	d901      	bls.n	100050d0 <HAL_RCC_GetPCLK2Freq+0x22>
  {
    apb2div = RCC_APB2_DIV16;
100050cc:	2304      	movs	r3, #4
100050ce:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb2div);
100050d0:	f000 f86f 	bl	100051b2 <HAL_RCC_GetMCUFreq>
100050d4:	4602      	mov	r2, r0
100050d6:	687b      	ldr	r3, [r7, #4]
100050d8:	fa22 f303 	lsr.w	r3, r2, r3
}
100050dc:	4618      	mov	r0, r3
100050de:	3708      	adds	r7, #8
100050e0:	46bd      	mov	sp, r7
100050e2:	bd80      	pop	{r7, pc}

100050e4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
100050e4:	b580      	push	{r7, lr}
100050e6:	b082      	sub	sp, #8
100050e8:	af00      	add	r7, sp, #0
  uint32_t apb3div = 0;
100050ea:	2300      	movs	r3, #0
100050ec:	607b      	str	r3, [r7, #4]

  /* Compute PCLK3 frequency ---------------------------*/
  apb3div = __HAL_RCC_GET_APB3_DIV();
100050ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100050f2:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
100050f6:	f003 0307 	and.w	r3, r3, #7
100050fa:	607b      	str	r3, [r7, #4]
  if (apb3div > RCC_APB3_DIV16)
100050fc:	687b      	ldr	r3, [r7, #4]
100050fe:	2b04      	cmp	r3, #4
10005100:	d901      	bls.n	10005106 <HAL_RCC_GetPCLK3Freq+0x22>
  {
    apb3div = RCC_APB3_DIV16;
10005102:	2304      	movs	r3, #4
10005104:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb3div);
10005106:	f000 f854 	bl	100051b2 <HAL_RCC_GetMCUFreq>
1000510a:	4602      	mov	r2, r0
1000510c:	687b      	ldr	r3, [r7, #4]
1000510e:	fa22 f303 	lsr.w	r3, r2, r3
}
10005112:	4618      	mov	r0, r3
10005114:	3708      	adds	r7, #8
10005116:	46bd      	mov	sp, r7
10005118:	bd80      	pop	{r7, pc}

1000511a <HAL_RCC_GetPCLK5Freq>:
  * @note   Each time PCLK5 changes, this function must be called to update the
  *         right PCLK5 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK5 frequency
  */
uint32_t HAL_RCC_GetPCLK5Freq(void)
{
1000511a:	b580      	push	{r7, lr}
1000511c:	b082      	sub	sp, #8
1000511e:	af00      	add	r7, sp, #0
  uint32_t apb5div = 0;
10005120:	2300      	movs	r3, #0
10005122:	607b      	str	r3, [r7, #4]

  /* Compute PCLK5 frequency ---------------------------*/
  apb5div = __HAL_RCC_GET_APB5_DIV();
10005124:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000512a:	f003 0307 	and.w	r3, r3, #7
1000512e:	607b      	str	r3, [r7, #4]
  if (apb5div > RCC_APB5_DIV16)
10005130:	687b      	ldr	r3, [r7, #4]
10005132:	2b04      	cmp	r3, #4
10005134:	d901      	bls.n	1000513a <HAL_RCC_GetPCLK5Freq+0x20>
  {
    apb5div = RCC_APB5_DIV16;
10005136:	2304      	movs	r3, #4
10005138:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetACLKFreq() >> apb5div);
1000513a:	f000 f808 	bl	1000514e <HAL_RCC_GetACLKFreq>
1000513e:	4602      	mov	r2, r0
10005140:	687b      	ldr	r3, [r7, #4]
10005142:	fa22 f303 	lsr.w	r3, r2, r3
}
10005146:	4618      	mov	r0, r3
10005148:	3708      	adds	r7, #8
1000514a:	46bd      	mov	sp, r7
1000514c:	bd80      	pop	{r7, pc}

1000514e <HAL_RCC_GetACLKFreq>:
  * @note   Each time ACLK changes, this function must be called to update the
  *         right ACLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval ACLK frequency
  */
uint32_t HAL_RCC_GetACLKFreq(void)
{
1000514e:	b580      	push	{r7, lr}
10005150:	b082      	sub	sp, #8
10005152:	af00      	add	r7, sp, #0
  uint32_t axidiv = 0;
10005154:	2300      	movs	r3, #0
10005156:	607b      	str	r3, [r7, #4]

  /* Compute ACLK frequency ---------------------------*/
  axidiv = __HAL_RCC_GET_AXI_DIV();
10005158:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000515c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000515e:	f003 0307 	and.w	r3, r3, #7
10005162:	607b      	str	r3, [r7, #4]
  if (axidiv > RCC_AXI_DIV4)
10005164:	687b      	ldr	r3, [r7, #4]
10005166:	2b03      	cmp	r3, #3
10005168:	d901      	bls.n	1000516e <HAL_RCC_GetACLKFreq+0x20>
  {
    axidiv = RCC_AXI_DIV4;
1000516a:	2303      	movs	r3, #3
1000516c:	607b      	str	r3, [r7, #4]
  }
  axidiv += 1;
1000516e:	687b      	ldr	r3, [r7, #4]
10005170:	3301      	adds	r3, #1
10005172:	607b      	str	r3, [r7, #4]

  return HAL_RCC_GetAXISSFreq() / axidiv;
10005174:	f000 f870 	bl	10005258 <HAL_RCC_GetAXISSFreq>
10005178:	4602      	mov	r2, r0
1000517a:	687b      	ldr	r3, [r7, #4]
1000517c:	fbb2 f3f3 	udiv	r3, r2, r3
}
10005180:	4618      	mov	r0, r3
10005182:	3708      	adds	r7, #8
10005184:	46bd      	mov	sp, r7
10005186:	bd80      	pop	{r7, pc}

10005188 <HAL_RCC_GetHCLK6Freq>:
  * @note   Each time HCLK6 changes, this function must be called to update the
  *         right HCLK6 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK6 frequency
  */
uint32_t HAL_RCC_GetHCLK6Freq(void)
{
10005188:	b580      	push	{r7, lr}
1000518a:	af00      	add	r7, sp, #0
  return HAL_RCC_GetACLKFreq();
1000518c:	f7ff ffdf 	bl	1000514e <HAL_RCC_GetACLKFreq>
10005190:	4603      	mov	r3, r0
}
10005192:	4618      	mov	r0, r3
10005194:	bd80      	pop	{r7, pc}

10005196 <HAL_RCC_GetHCLK2Freq>:
  * @note   Each time HCLK1 changes, this function must be called to update the
  *         right HCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK2 frequency
  */
uint32_t HAL_RCC_GetHCLK2Freq(void)
{
10005196:	b580      	push	{r7, lr}
10005198:	af00      	add	r7, sp, #0
  return HAL_RCC_GetMCUFreq();
1000519a:	f000 f80a 	bl	100051b2 <HAL_RCC_GetMCUFreq>
1000519e:	4603      	mov	r3, r0
}
100051a0:	4618      	mov	r0, r3
100051a2:	bd80      	pop	{r7, pc}

100051a4 <HAL_RCC_GetMLHCLKFreq>:
  * @note   Each time MLHCLK changes, this function must be called to update the
  *         right MLHCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK4 frequency
  */
uint32_t HAL_RCC_GetMLHCLKFreq(void)
{
100051a4:	b580      	push	{r7, lr}
100051a6:	af00      	add	r7, sp, #0
  return HAL_RCC_GetMCUFreq();
100051a8:	f000 f803 	bl	100051b2 <HAL_RCC_GetMCUFreq>
100051ac:	4603      	mov	r3, r0
}
100051ae:	4618      	mov	r0, r3
100051b0:	bd80      	pop	{r7, pc}

100051b2 <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
100051b2:	b580      	push	{r7, lr}
100051b4:	b082      	sub	sp, #8
100051b6:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
100051b8:	2300      	movs	r3, #0
100051ba:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
100051bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100051c0:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
100051c4:	f003 030f 	and.w	r3, r3, #15
100051c8:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
100051ca:	687b      	ldr	r3, [r7, #4]
100051cc:	2b09      	cmp	r3, #9
100051ce:	d901      	bls.n	100051d4 <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
100051d0:	2309      	movs	r3, #9
100051d2:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
100051d4:	f000 f87e 	bl	100052d4 <HAL_RCC_GetMCUSSFreq>
100051d8:	4602      	mov	r2, r0
100051da:	687b      	ldr	r3, [r7, #4]
100051dc:	fa22 f303 	lsr.w	r3, r2, r3
}
100051e0:	4618      	mov	r0, r3
100051e2:	3708      	adds	r7, #8
100051e4:	46bd      	mov	sp, r7
100051e6:	bd80      	pop	{r7, pc}

100051e8 <RCC_GetCKPERFreq>:
  * @note   Each time CKPER changes, this function must be called to update the
  *         right CKPER value. Otherwise, any configuration based on this function will be incorrect.
  * @retval CKPER frequency
  */
uint32_t RCC_GetCKPERFreq(void)
{
100051e8:	b480      	push	{r7}
100051ea:	b083      	sub	sp, #12
100051ec:	af00      	add	r7, sp, #0
  uint32_t ckperclocksource = 0, frequency = 0;
100051ee:	2300      	movs	r3, #0
100051f0:	603b      	str	r3, [r7, #0]
100051f2:	2300      	movs	r3, #0
100051f4:	607b      	str	r3, [r7, #4]

  ckperclocksource = __HAL_RCC_GET_CKPER_SOURCE();
100051f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100051fa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
100051fe:	f003 0303 	and.w	r3, r3, #3
10005202:	603b      	str	r3, [r7, #0]

  if (ckperclocksource == RCC_CKPERCLKSOURCE_HSI)
10005204:	683b      	ldr	r3, [r7, #0]
10005206:	2b00      	cmp	r3, #0
10005208:	d102      	bne.n	10005210 <RCC_GetCKPERFreq+0x28>
  {
    /* In Case the main PLL Source is HSI */
    frequency = HSI_VALUE;
1000520a:	4b0c      	ldr	r3, [pc, #48]	; (1000523c <RCC_GetCKPERFreq+0x54>)
1000520c:	607b      	str	r3, [r7, #4]
1000520e:	e00d      	b.n	1000522c <RCC_GetCKPERFreq+0x44>
  }

  else if (ckperclocksource == RCC_CKPERCLKSOURCE_CSI)
10005210:	683b      	ldr	r3, [r7, #0]
10005212:	2b01      	cmp	r3, #1
10005214:	d102      	bne.n	1000521c <RCC_GetCKPERFreq+0x34>
  {
    /* In Case the main PLL Source is CSI */
    frequency = CSI_VALUE;
10005216:	4b0a      	ldr	r3, [pc, #40]	; (10005240 <RCC_GetCKPERFreq+0x58>)
10005218:	607b      	str	r3, [r7, #4]
1000521a:	e007      	b.n	1000522c <RCC_GetCKPERFreq+0x44>
  }

  else if (ckperclocksource == RCC_CKPERCLKSOURCE_HSE)
1000521c:	683b      	ldr	r3, [r7, #0]
1000521e:	2b02      	cmp	r3, #2
10005220:	d102      	bne.n	10005228 <RCC_GetCKPERFreq+0x40>
  {
    /* In Case the main PLL Source is HSE */
    frequency = HSE_VALUE;
10005222:	4b08      	ldr	r3, [pc, #32]	; (10005244 <RCC_GetCKPERFreq+0x5c>)
10005224:	607b      	str	r3, [r7, #4]
10005226:	e001      	b.n	1000522c <RCC_GetCKPERFreq+0x44>
  }
  else
  {
    frequency = 0;
10005228:	2300      	movs	r3, #0
1000522a:	607b      	str	r3, [r7, #4]
  }

  return frequency;
1000522c:	687b      	ldr	r3, [r7, #4]
}
1000522e:	4618      	mov	r0, r3
10005230:	370c      	adds	r7, #12
10005232:	46bd      	mov	sp, r7
10005234:	f85d 7b04 	ldr.w	r7, [sp], #4
10005238:	4770      	bx	lr
1000523a:	bf00      	nop
1000523c:	03d09000 	.word	0x03d09000
10005240:	003d0900 	.word	0x003d0900
10005244:	016e3600 	.word	0x016e3600

10005248 <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
10005248:	b580      	push	{r7, lr}
1000524a:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
1000524c:	f7ff ffb1 	bl	100051b2 <HAL_RCC_GetMCUFreq>
10005250:	4603      	mov	r3, r0
#endif
}
10005252:	4618      	mov	r0, r3
10005254:	bd80      	pop	{r7, pc}
	...

10005258 <HAL_RCC_GetAXISSFreq>:
  return mpussfreq;
}


uint32_t HAL_RCC_GetAXISSFreq()
{
10005258:	b580      	push	{r7, lr}
1000525a:	b084      	sub	sp, #16
1000525c:	af00      	add	r7, sp, #0
  uint32_t axissfreq = 0;
1000525e:	2300      	movs	r3, #0
10005260:	60fb      	str	r3, [r7, #12]
  PLL2_ClocksTypeDef pll2_clocks;

  switch (__HAL_RCC_GET_AXIS_SOURCE())
10005262:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005268:	f003 0307 	and.w	r3, r3, #7
1000526c:	2b02      	cmp	r3, #2
1000526e:	d006      	beq.n	1000527e <HAL_RCC_GetAXISSFreq+0x26>
10005270:	2b02      	cmp	r3, #2
10005272:	d823      	bhi.n	100052bc <HAL_RCC_GetAXISSFreq+0x64>
10005274:	2b00      	cmp	r3, #0
10005276:	d009      	beq.n	1000528c <HAL_RCC_GetAXISSFreq+0x34>
10005278:	2b01      	cmp	r3, #1
1000527a:	d01c      	beq.n	100052b6 <HAL_RCC_GetAXISSFreq+0x5e>
1000527c:	e01e      	b.n	100052bc <HAL_RCC_GetAXISSFreq+0x64>
  {
    case RCC_AXISSOURCE_PLL2:
      HAL_RCC_GetPLL2ClockFreq(&pll2_clocks);
1000527e:	463b      	mov	r3, r7
10005280:	4618      	mov	r0, r3
10005282:	f7ff fc0b 	bl	10004a9c <HAL_RCC_GetPLL2ClockFreq>
      axissfreq = pll2_clocks.PLL2_P_Frequency;
10005286:	683b      	ldr	r3, [r7, #0]
10005288:	60fb      	str	r3, [r7, #12]
      break;
1000528a:	e01a      	b.n	100052c2 <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
1000528c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005290:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10005294:	f003 0304 	and.w	r3, r3, #4
10005298:	2b04      	cmp	r3, #4
1000529a:	d109      	bne.n	100052b0 <HAL_RCC_GetAXISSFreq+0x58>
      {
        axissfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
1000529c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100052a0:	699b      	ldr	r3, [r3, #24]
100052a2:	f003 0303 	and.w	r3, r3, #3
100052a6:	4a09      	ldr	r2, [pc, #36]	; (100052cc <HAL_RCC_GetAXISSFreq+0x74>)
100052a8:	fa22 f303 	lsr.w	r3, r2, r3
100052ac:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        axissfreq = HSI_VALUE;
      }
      break;
100052ae:	e008      	b.n	100052c2 <HAL_RCC_GetAXISSFreq+0x6a>
        axissfreq = HSI_VALUE;
100052b0:	4b06      	ldr	r3, [pc, #24]	; (100052cc <HAL_RCC_GetAXISSFreq+0x74>)
100052b2:	60fb      	str	r3, [r7, #12]
      break;
100052b4:	e005      	b.n	100052c2 <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_HSE:
      axissfreq = HSE_VALUE;
100052b6:	4b06      	ldr	r3, [pc, #24]	; (100052d0 <HAL_RCC_GetAXISSFreq+0x78>)
100052b8:	60fb      	str	r3, [r7, #12]
      break;
100052ba:	e002      	b.n	100052c2 <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_OFF:
    default:
      axissfreq = 0; /* ck_axiss is gated */
100052bc:	2300      	movs	r3, #0
100052be:	60fb      	str	r3, [r7, #12]
      break;
100052c0:	bf00      	nop
  }

  return axissfreq;
100052c2:	68fb      	ldr	r3, [r7, #12]
}
100052c4:	4618      	mov	r0, r3
100052c6:	3710      	adds	r7, #16
100052c8:	46bd      	mov	sp, r7
100052ca:	bd80      	pop	{r7, pc}
100052cc:	03d09000 	.word	0x03d09000
100052d0:	016e3600 	.word	0x016e3600

100052d4 <HAL_RCC_GetMCUSSFreq>:

uint32_t HAL_RCC_GetMCUSSFreq()
{
100052d4:	b580      	push	{r7, lr}
100052d6:	b084      	sub	sp, #16
100052d8:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
100052da:	2300      	movs	r3, #0
100052dc:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
100052de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100052e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100052e4:	f003 0303 	and.w	r3, r3, #3
100052e8:	2b03      	cmp	r3, #3
100052ea:	d822      	bhi.n	10005332 <HAL_RCC_GetMCUSSFreq+0x5e>
100052ec:	a201      	add	r2, pc, #4	; (adr r2, 100052f4 <HAL_RCC_GetMCUSSFreq+0x20>)
100052ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100052f2:	bf00      	nop
100052f4:	10005313 	.word	0x10005313
100052f8:	10005327 	.word	0x10005327
100052fc:	1000532d 	.word	0x1000532d
10005300:	10005305 	.word	0x10005305
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10005304:	463b      	mov	r3, r7
10005306:	4618      	mov	r0, r3
10005308:	f7ff fcb4 	bl	10004c74 <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
1000530c:	683b      	ldr	r3, [r7, #0]
1000530e:	60fb      	str	r3, [r7, #12]
      break;
10005310:	e00f      	b.n	10005332 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10005312:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005316:	699b      	ldr	r3, [r3, #24]
10005318:	f003 0303 	and.w	r3, r3, #3
1000531c:	4a07      	ldr	r2, [pc, #28]	; (1000533c <HAL_RCC_GetMCUSSFreq+0x68>)
1000531e:	fa22 f303 	lsr.w	r3, r2, r3
10005322:	60fb      	str	r3, [r7, #12]

      break;
10005324:	e005      	b.n	10005332 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
10005326:	4b06      	ldr	r3, [pc, #24]	; (10005340 <HAL_RCC_GetMCUSSFreq+0x6c>)
10005328:	60fb      	str	r3, [r7, #12]
      break;
1000532a:	e002      	b.n	10005332 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
1000532c:	4b05      	ldr	r3, [pc, #20]	; (10005344 <HAL_RCC_GetMCUSSFreq+0x70>)
1000532e:	60fb      	str	r3, [r7, #12]
      break;
10005330:	bf00      	nop
  }

  return mcussfreq;
10005332:	68fb      	ldr	r3, [r7, #12]
}
10005334:	4618      	mov	r0, r3
10005336:	3710      	adds	r7, #16
10005338:	46bd      	mov	sp, r7
1000533a:	bd80      	pop	{r7, pc}
1000533c:	03d09000 	.word	0x03d09000
10005340:	016e3600 	.word	0x016e3600
10005344:	003d0900 	.word	0x003d0900

10005348 <HAL_RCC_WAKEUP_IRQHandler>:
  * @brief This function handles the RCC Wake up interrupt (rcc_mcu_wkup_irq/rcc_mpu_wkup_irq)
  * @note This API should be called under the RCC_WAKEUP_Handler().
  * @retval None
  */
void HAL_RCC_WAKEUP_IRQHandler(void)
{
10005348:	b580      	push	{r7, lr}
1000534a:	af00      	add	r7, sp, #0
  /* Check RCC WKUP flag is set */
  if (__HAL_RCC_GET_IT(RCC_IT_WKUP) != RESET)
1000534c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005350:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
10005354:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
10005358:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
1000535c:	d107      	bne.n	1000536e <HAL_RCC_WAKEUP_IRQHandler+0x26>
  {
    /* Clear the RCC WKUP flag bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_WKUP);
1000535e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005362:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
10005366:	f8c3 2c18 	str.w	r2, [r3, #3096]	; 0xc18

    /* RCC WKUP interrupt user callback */
    HAL_RCC_WAKEUP_Callback();
1000536a:	f000 f802 	bl	10005372 <HAL_RCC_WAKEUP_Callback>
  }
}
1000536e:	bf00      	nop
10005370:	bd80      	pop	{r7, pc}

10005372 <HAL_RCC_WAKEUP_Callback>:
/**
  * @brief  RCC WAKEUP interrupt callback
  * @retval None
  */
__weak void HAL_RCC_WAKEUP_Callback(void)
{
10005372:	b480      	push	{r7}
10005374:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_WAKEUP_Callback could be implemented in the user file
  */
}
10005376:	bf00      	nop
10005378:	46bd      	mov	sp, r7
1000537a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000537e:	4770      	bx	lr

10005380 <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
10005380:	b580      	push	{r7, lr}
10005382:	b084      	sub	sp, #16
10005384:	af00      	add	r7, sp, #0
10005386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
10005388:	687b      	ldr	r3, [r7, #4]
1000538a:	681b      	ldr	r3, [r3, #0]
1000538c:	2b00      	cmp	r3, #0
1000538e:	f000 8171 	beq.w	10005674 <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
10005392:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005398:	f003 0307 	and.w	r3, r3, #7
1000539c:	2b02      	cmp	r3, #2
1000539e:	d108      	bne.n	100053b2 <RCCEx_PLL2_Config+0x32>
100053a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100053a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100053aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100053ae:	f000 815f 	beq.w	10005670 <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
100053b2:	687b      	ldr	r3, [r7, #4]
100053b4:	681b      	ldr	r3, [r3, #0]
100053b6:	2b02      	cmp	r3, #2
100053b8:	f040 8130 	bne.w	1000561c <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
100053bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100053c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100053c2:	f003 0303 	and.w	r3, r3, #3
100053c6:	2b00      	cmp	r3, #0
100053c8:	d008      	beq.n	100053dc <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
100053ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100053ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100053d0:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
100053d4:	2b01      	cmp	r3, #1
100053d6:	d001      	beq.n	100053dc <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
100053d8:	2301      	movs	r3, #1
100053da:	e14c      	b.n	10005676 <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
100053dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100053e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100053e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100053e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100053ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
100053f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100053f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100053f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100053fc:	f023 0301 	bic.w	r3, r3, #1
10005400:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10005404:	f7fc fa60 	bl	100018c8 <HAL_GetTick>
10005408:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000540a:	e008      	b.n	1000541e <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000540c:	f7fc fa5c 	bl	100018c8 <HAL_GetTick>
10005410:	4602      	mov	r2, r0
10005412:	68fb      	ldr	r3, [r7, #12]
10005414:	1ad3      	subs	r3, r2, r3
10005416:	2b64      	cmp	r3, #100	; 0x64
10005418:	d901      	bls.n	1000541e <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
1000541a:	2303      	movs	r3, #3
1000541c:	e12b      	b.n	10005676 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000541e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005426:	f003 0302 	and.w	r3, r3, #2
1000542a:	2b02      	cmp	r3, #2
1000542c:	d0ee      	beq.n	1000540c <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
1000542e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005432:	6a1b      	ldr	r3, [r3, #32]
10005434:	f003 0303 	and.w	r3, r3, #3
10005438:	2b02      	cmp	r3, #2
1000543a:	d107      	bne.n	1000544c <RCCEx_PLL2_Config+0xcc>
1000543c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005440:	6a1b      	ldr	r3, [r3, #32]
10005442:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10005446:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000544a:	d00e      	beq.n	1000546a <RCCEx_PLL2_Config+0xea>
1000544c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005450:	6a1b      	ldr	r3, [r3, #32]
10005452:	f003 0303 	and.w	r3, r3, #3
10005456:	2b03      	cmp	r3, #3
10005458:	d112      	bne.n	10005480 <RCCEx_PLL2_Config+0x100>
1000545a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000545e:	6a1b      	ldr	r3, [r3, #32]
10005460:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10005464:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10005468:	d10a      	bne.n	10005480 <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
1000546a:	687b      	ldr	r3, [r7, #4]
1000546c:	685a      	ldr	r2, [r3, #4]
1000546e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005474:	f003 0303 	and.w	r3, r3, #3
10005478:	429a      	cmp	r2, r3
1000547a:	d00c      	beq.n	10005496 <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
1000547c:	2301      	movs	r3, #1
1000547e:	e0fa      	b.n	10005676 <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
10005480:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005486:	f023 0203 	bic.w	r2, r3, #3
1000548a:	687b      	ldr	r3, [r7, #4]
1000548c:	685b      	ldr	r3, [r3, #4]
1000548e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005492:	4313      	orrs	r3, r2
10005494:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
10005496:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000549a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
1000549e:	4b78      	ldr	r3, [pc, #480]	; (10005680 <RCCEx_PLL2_Config+0x300>)
100054a0:	4013      	ands	r3, r2
100054a2:	687a      	ldr	r2, [r7, #4]
100054a4:	68d2      	ldr	r2, [r2, #12]
100054a6:	1e51      	subs	r1, r2, #1
100054a8:	687a      	ldr	r2, [r7, #4]
100054aa:	6892      	ldr	r2, [r2, #8]
100054ac:	3a01      	subs	r2, #1
100054ae:	0412      	lsls	r2, r2, #16
100054b0:	430a      	orrs	r2, r1
100054b2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100054b6:	4313      	orrs	r3, r2
100054b8:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
100054bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100054c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
100054c4:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
100054c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
100054cc:	687a      	ldr	r2, [r7, #4]
100054ce:	6912      	ldr	r2, [r2, #16]
100054d0:	1e51      	subs	r1, r2, #1
100054d2:	687a      	ldr	r2, [r7, #4]
100054d4:	6952      	ldr	r2, [r2, #20]
100054d6:	3a01      	subs	r2, #1
100054d8:	0212      	lsls	r2, r2, #8
100054da:	4311      	orrs	r1, r2
100054dc:	687a      	ldr	r2, [r7, #4]
100054de:	6992      	ldr	r2, [r2, #24]
100054e0:	3a01      	subs	r2, #1
100054e2:	0412      	lsls	r2, r2, #16
100054e4:	430a      	orrs	r2, r1
100054e6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100054ea:	4313      	orrs	r3, r2
100054ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
100054f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100054f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
100054f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100054fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10005500:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
10005504:	687b      	ldr	r3, [r7, #4]
10005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005508:	2b02      	cmp	r3, #2
1000550a:	d003      	beq.n	10005514 <RCCEx_PLL2_Config+0x194>
1000550c:	687b      	ldr	r3, [r7, #4]
1000550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005510:	2b00      	cmp	r3, #0
10005512:	d10c      	bne.n	1000552e <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
10005514:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005518:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
1000551c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005520:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10005524:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10005528:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
1000552c:	e00f      	b.n	1000554e <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
1000552e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005532:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10005536:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000553a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
1000553e:	687a      	ldr	r2, [r7, #4]
10005540:	6a12      	ldr	r2, [r2, #32]
10005542:	00d2      	lsls	r2, r2, #3
10005544:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005548:	4313      	orrs	r3, r2
1000554a:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
1000554e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005552:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10005556:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000555a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1000555e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10005562:	687b      	ldr	r3, [r7, #4]
10005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005566:	2b02      	cmp	r3, #2
10005568:	d124      	bne.n	100055b4 <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
1000556a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000556e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
10005572:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10005576:	687b      	ldr	r3, [r7, #4]
10005578:	6a99      	ldr	r1, [r3, #40]	; 0x28
1000557a:	687b      	ldr	r3, [r7, #4]
1000557c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000557e:	4319      	orrs	r1, r3
10005580:	687b      	ldr	r3, [r7, #4]
10005582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10005584:	4319      	orrs	r1, r3
10005586:	687b      	ldr	r3, [r7, #4]
10005588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000558a:	4319      	orrs	r1, r3
1000558c:	687b      	ldr	r3, [r7, #4]
1000558e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10005590:	041b      	lsls	r3, r3, #16
10005592:	430b      	orrs	r3, r1
10005594:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005598:	4313      	orrs	r3, r2
1000559a:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
1000559e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100055a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100055a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100055aa:	f043 0304 	orr.w	r3, r3, #4
100055ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
100055b2:	e009      	b.n	100055c8 <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
100055b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100055b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100055bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100055c0:	f023 0304 	bic.w	r3, r3, #4
100055c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
100055c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100055cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100055d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100055d4:	f043 0301 	orr.w	r3, r3, #1
100055d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100055dc:	f7fc f974 	bl	100018c8 <HAL_GetTick>
100055e0:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
100055e2:	e008      	b.n	100055f6 <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100055e4:	f7fc f970 	bl	100018c8 <HAL_GetTick>
100055e8:	4602      	mov	r2, r0
100055ea:	68fb      	ldr	r3, [r7, #12]
100055ec:	1ad3      	subs	r3, r2, r3
100055ee:	2b64      	cmp	r3, #100	; 0x64
100055f0:	d901      	bls.n	100055f6 <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
100055f2:	2303      	movs	r3, #3
100055f4:	e03f      	b.n	10005676 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
100055f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100055fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100055fe:	f003 0302 	and.w	r3, r3, #2
10005602:	2b02      	cmp	r3, #2
10005604:	d1ee      	bne.n	100055e4 <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10005606:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000560a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000560e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005612:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10005616:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
1000561a:	e02b      	b.n	10005674 <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
1000561c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005620:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005624:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
1000562c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
10005630:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005638:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000563c:	f023 0301 	bic.w	r3, r3, #1
10005640:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10005644:	f7fc f940 	bl	100018c8 <HAL_GetTick>
10005648:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000564a:	e008      	b.n	1000565e <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000564c:	f7fc f93c 	bl	100018c8 <HAL_GetTick>
10005650:	4602      	mov	r2, r0
10005652:	68fb      	ldr	r3, [r7, #12]
10005654:	1ad3      	subs	r3, r2, r3
10005656:	2b64      	cmp	r3, #100	; 0x64
10005658:	d901      	bls.n	1000565e <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
1000565a:	2303      	movs	r3, #3
1000565c:	e00b      	b.n	10005676 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000565e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005666:	f003 0302 	and.w	r3, r3, #2
1000566a:	2b02      	cmp	r3, #2
1000566c:	d0ee      	beq.n	1000564c <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
1000566e:	e001      	b.n	10005674 <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10005670:	2301      	movs	r3, #1
10005672:	e000      	b.n	10005676 <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
10005674:	2300      	movs	r3, #0

}
10005676:	4618      	mov	r0, r3
10005678:	3710      	adds	r7, #16
1000567a:	46bd      	mov	sp, r7
1000567c:	bd80      	pop	{r7, pc}
1000567e:	bf00      	nop
10005680:	ffc0fe00 	.word	0xffc0fe00

10005684 <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
10005684:	b580      	push	{r7, lr}
10005686:	b084      	sub	sp, #16
10005688:	af00      	add	r7, sp, #0
1000568a:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
1000568c:	687b      	ldr	r3, [r7, #4]
1000568e:	681b      	ldr	r3, [r3, #0]
10005690:	2b00      	cmp	r3, #0
10005692:	f000 815a 	beq.w	1000594a <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
10005696:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000569a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000569c:	f003 0303 	and.w	r3, r3, #3
100056a0:	2b03      	cmp	r3, #3
100056a2:	d108      	bne.n	100056b6 <RCCEx_PLL3_Config+0x32>
100056a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100056a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100056aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100056ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100056b2:	f000 8148 	beq.w	10005946 <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
100056b6:	687b      	ldr	r3, [r7, #4]
100056b8:	681b      	ldr	r3, [r3, #0]
100056ba:	2b02      	cmp	r3, #2
100056bc:	f040 8119 	bne.w	100058f2 <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100056c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100056c4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100056c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100056cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100056d0:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
100056d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100056d8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100056dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100056e0:	f023 0301 	bic.w	r3, r3, #1
100056e4:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100056e8:	f7fc f8ee 	bl	100018c8 <HAL_GetTick>
100056ec:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
100056ee:	e008      	b.n	10005702 <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100056f0:	f7fc f8ea 	bl	100018c8 <HAL_GetTick>
100056f4:	4602      	mov	r2, r0
100056f6:	68fb      	ldr	r3, [r7, #12]
100056f8:	1ad3      	subs	r3, r2, r3
100056fa:	2b64      	cmp	r3, #100	; 0x64
100056fc:	d901      	bls.n	10005702 <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
100056fe:	2303      	movs	r3, #3
10005700:	e124      	b.n	1000594c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10005702:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005706:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000570a:	f003 0302 	and.w	r3, r3, #2
1000570e:	2b02      	cmp	r3, #2
10005710:	d0ee      	beq.n	100056f0 <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
10005712:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005716:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
1000571a:	f023 0203 	bic.w	r2, r3, #3
1000571e:	687b      	ldr	r3, [r7, #4]
10005720:	685b      	ldr	r3, [r3, #4]
10005722:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005726:	4313      	orrs	r3, r2
10005728:	f8c1 3820 	str.w	r3, [r1, #2080]	; 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
1000572c:	e008      	b.n	10005740 <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000572e:	f7fc f8cb 	bl	100018c8 <HAL_GetTick>
10005732:	4602      	mov	r2, r0
10005734:	68fb      	ldr	r3, [r7, #12]
10005736:	1ad3      	subs	r3, r2, r3
10005738:	2b64      	cmp	r3, #100	; 0x64
1000573a:	d901      	bls.n	10005740 <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
1000573c:	2303      	movs	r3, #3
1000573e:	e105      	b.n	1000594c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10005740:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005744:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10005748:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000574c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10005750:	d1ed      	bne.n	1000572e <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
10005752:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005756:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
1000575a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
1000575e:	687b      	ldr	r3, [r7, #4]
10005760:	69db      	ldr	r3, [r3, #28]
10005762:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005766:	4313      	orrs	r3, r2
10005768:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
1000576c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005770:	f8d3 2884 	ldr.w	r2, [r3, #2180]	; 0x884
10005774:	4b77      	ldr	r3, [pc, #476]	; (10005954 <RCCEx_PLL3_Config+0x2d0>)
10005776:	4013      	ands	r3, r2
10005778:	687a      	ldr	r2, [r7, #4]
1000577a:	68d2      	ldr	r2, [r2, #12]
1000577c:	1e51      	subs	r1, r2, #1
1000577e:	687a      	ldr	r2, [r7, #4]
10005780:	6892      	ldr	r2, [r2, #8]
10005782:	3a01      	subs	r2, #1
10005784:	0412      	lsls	r2, r2, #16
10005786:	430a      	orrs	r2, r1
10005788:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000578c:	4313      	orrs	r3, r2
1000578e:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884
10005792:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005796:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
1000579a:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
1000579e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
100057a2:	687a      	ldr	r2, [r7, #4]
100057a4:	6912      	ldr	r2, [r2, #16]
100057a6:	1e51      	subs	r1, r2, #1
100057a8:	687a      	ldr	r2, [r7, #4]
100057aa:	6952      	ldr	r2, [r2, #20]
100057ac:	3a01      	subs	r2, #1
100057ae:	0212      	lsls	r2, r2, #8
100057b0:	4311      	orrs	r1, r2
100057b2:	687a      	ldr	r2, [r7, #4]
100057b4:	6992      	ldr	r2, [r2, #24]
100057b6:	3a01      	subs	r2, #1
100057b8:	0412      	lsls	r2, r2, #16
100057ba:	430a      	orrs	r2, r1
100057bc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100057c0:	4313      	orrs	r3, r2
100057c2:	f8c1 3888 	str.w	r3, [r1, #2184]	; 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
100057c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100057ca:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100057ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100057d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
100057d6:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
100057da:	687b      	ldr	r3, [r7, #4]
100057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100057de:	2b02      	cmp	r3, #2
100057e0:	d003      	beq.n	100057ea <RCCEx_PLL3_Config+0x166>
100057e2:	687b      	ldr	r3, [r7, #4]
100057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100057e6:	2b00      	cmp	r3, #0
100057e8:	d10c      	bne.n	10005804 <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
100057ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100057ee:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100057f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100057f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100057fa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100057fe:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
10005802:	e00f      	b.n	10005824 <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
10005804:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005808:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
1000580c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10005810:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10005814:	687a      	ldr	r2, [r7, #4]
10005816:	6a12      	ldr	r2, [r2, #32]
10005818:	00d2      	lsls	r2, r2, #3
1000581a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000581e:	4313      	orrs	r3, r2
10005820:	f8c1 388c 	str.w	r3, [r1, #2188]	; 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
10005824:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005828:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
1000582c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10005834:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10005838:	687b      	ldr	r3, [r7, #4]
1000583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000583c:	2b02      	cmp	r3, #2
1000583e:	d124      	bne.n	1000588a <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
10005840:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005844:	f8d3 3890 	ldr.w	r3, [r3, #2192]	; 0x890
10005848:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
1000584c:	687b      	ldr	r3, [r7, #4]
1000584e:	6a99      	ldr	r1, [r3, #40]	; 0x28
10005850:	687b      	ldr	r3, [r7, #4]
10005852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10005854:	4319      	orrs	r1, r3
10005856:	687b      	ldr	r3, [r7, #4]
10005858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000585a:	4319      	orrs	r1, r3
1000585c:	687b      	ldr	r3, [r7, #4]
1000585e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10005860:	4319      	orrs	r1, r3
10005862:	687b      	ldr	r3, [r7, #4]
10005864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10005866:	041b      	lsls	r3, r3, #16
10005868:	430b      	orrs	r3, r1
1000586a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000586e:	4313      	orrs	r3, r2
10005870:	f8c1 3890 	str.w	r3, [r1, #2192]	; 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
10005874:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005878:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000587c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005880:	f043 0304 	orr.w	r3, r3, #4
10005884:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
10005888:	e009      	b.n	1000589e <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
1000588a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000588e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005892:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005896:	f023 0304 	bic.w	r3, r3, #4
1000589a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
1000589e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100058a2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100058a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100058aa:	f043 0301 	orr.w	r3, r3, #1
100058ae:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100058b2:	f7fc f809 	bl	100018c8 <HAL_GetTick>
100058b6:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
100058b8:	e008      	b.n	100058cc <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100058ba:	f7fc f805 	bl	100018c8 <HAL_GetTick>
100058be:	4602      	mov	r2, r0
100058c0:	68fb      	ldr	r3, [r7, #12]
100058c2:	1ad3      	subs	r3, r2, r3
100058c4:	2b64      	cmp	r3, #100	; 0x64
100058c6:	d901      	bls.n	100058cc <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
100058c8:	2303      	movs	r3, #3
100058ca:	e03f      	b.n	1000594c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
100058cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100058d0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100058d4:	f003 0302 	and.w	r3, r3, #2
100058d8:	2b02      	cmp	r3, #2
100058da:	d1ee      	bne.n	100058ba <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100058dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100058e0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100058e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100058e8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
100058ec:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
100058f0:	e02b      	b.n	1000594a <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100058f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100058f6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100058fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100058fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10005902:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
10005906:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000590a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000590e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005912:	f023 0301 	bic.w	r3, r3, #1
10005916:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000591a:	f7fb ffd5 	bl	100018c8 <HAL_GetTick>
1000591e:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10005920:	e008      	b.n	10005934 <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005922:	f7fb ffd1 	bl	100018c8 <HAL_GetTick>
10005926:	4602      	mov	r2, r0
10005928:	68fb      	ldr	r3, [r7, #12]
1000592a:	1ad3      	subs	r3, r2, r3
1000592c:	2b64      	cmp	r3, #100	; 0x64
1000592e:	d901      	bls.n	10005934 <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
10005930:	2303      	movs	r3, #3
10005932:	e00b      	b.n	1000594c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10005934:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005938:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000593c:	f003 0302 	and.w	r3, r3, #2
10005940:	2b02      	cmp	r3, #2
10005942:	d0ee      	beq.n	10005922 <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
10005944:	e001      	b.n	1000594a <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10005946:	2301      	movs	r3, #1
10005948:	e000      	b.n	1000594c <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
1000594a:	2300      	movs	r3, #0
}
1000594c:	4618      	mov	r0, r3
1000594e:	3710      	adds	r7, #16
10005950:	46bd      	mov	sp, r7
10005952:	bd80      	pop	{r7, pc}
10005954:	ffc0fe00 	.word	0xffc0fe00

10005958 <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
10005958:	b580      	push	{r7, lr}
1000595a:	b084      	sub	sp, #16
1000595c:	af00      	add	r7, sp, #0
1000595e:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
10005960:	687b      	ldr	r3, [r7, #4]
10005962:	681b      	ldr	r3, [r3, #0]
10005964:	2b00      	cmp	r3, #0
10005966:	f000 8147 	beq.w	10005bf8 <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
1000596a:	687b      	ldr	r3, [r7, #4]
1000596c:	681b      	ldr	r3, [r3, #0]
1000596e:	2b02      	cmp	r3, #2
10005970:	f040 8119 	bne.w	10005ba6 <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10005974:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005978:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000597c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10005984:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
10005988:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000598c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005990:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005994:	f023 0301 	bic.w	r3, r3, #1
10005998:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1000599c:	f7fb ff94 	bl	100018c8 <HAL_GetTick>
100059a0:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100059a2:	e008      	b.n	100059b6 <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100059a4:	f7fb ff90 	bl	100018c8 <HAL_GetTick>
100059a8:	4602      	mov	r2, r0
100059aa:	68fb      	ldr	r3, [r7, #12]
100059ac:	1ad3      	subs	r3, r2, r3
100059ae:	2b64      	cmp	r3, #100	; 0x64
100059b0:	d901      	bls.n	100059b6 <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
100059b2:	2303      	movs	r3, #3
100059b4:	e121      	b.n	10005bfa <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100059b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100059ba:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100059be:	f003 0302 	and.w	r3, r3, #2
100059c2:	2b02      	cmp	r3, #2
100059c4:	d0ee      	beq.n	100059a4 <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
100059c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100059ca:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
100059ce:	f023 0203 	bic.w	r2, r3, #3
100059d2:	687b      	ldr	r3, [r7, #4]
100059d4:	685b      	ldr	r3, [r3, #4]
100059d6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100059da:	4313      	orrs	r3, r2
100059dc:	f8c1 3824 	str.w	r3, [r1, #2084]	; 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
100059e0:	e008      	b.n	100059f4 <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100059e2:	f7fb ff71 	bl	100018c8 <HAL_GetTick>
100059e6:	4602      	mov	r2, r0
100059e8:	68fb      	ldr	r3, [r7, #12]
100059ea:	1ad3      	subs	r3, r2, r3
100059ec:	2b64      	cmp	r3, #100	; 0x64
100059ee:	d901      	bls.n	100059f4 <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
100059f0:	2303      	movs	r3, #3
100059f2:	e102      	b.n	10005bfa <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
100059f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100059f8:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
100059fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10005a00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10005a04:	d1ed      	bne.n	100059e2 <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
10005a06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005a0a:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
10005a0e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
10005a12:	687b      	ldr	r3, [r7, #4]
10005a14:	69db      	ldr	r3, [r3, #28]
10005a16:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005a1a:	4313      	orrs	r3, r2
10005a1c:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
10005a20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005a24:	f8d3 2898 	ldr.w	r2, [r3, #2200]	; 0x898
10005a28:	4b76      	ldr	r3, [pc, #472]	; (10005c04 <RCCEx_PLL4_Config+0x2ac>)
10005a2a:	4013      	ands	r3, r2
10005a2c:	687a      	ldr	r2, [r7, #4]
10005a2e:	68d2      	ldr	r2, [r2, #12]
10005a30:	1e51      	subs	r1, r2, #1
10005a32:	687a      	ldr	r2, [r7, #4]
10005a34:	6892      	ldr	r2, [r2, #8]
10005a36:	3a01      	subs	r2, #1
10005a38:	0412      	lsls	r2, r2, #16
10005a3a:	430a      	orrs	r2, r1
10005a3c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005a40:	4313      	orrs	r3, r2
10005a42:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898
10005a46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005a4a:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
10005a4e:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10005a52:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10005a56:	687a      	ldr	r2, [r7, #4]
10005a58:	6912      	ldr	r2, [r2, #16]
10005a5a:	1e51      	subs	r1, r2, #1
10005a5c:	687a      	ldr	r2, [r7, #4]
10005a5e:	6952      	ldr	r2, [r2, #20]
10005a60:	3a01      	subs	r2, #1
10005a62:	0212      	lsls	r2, r2, #8
10005a64:	4311      	orrs	r1, r2
10005a66:	687a      	ldr	r2, [r7, #4]
10005a68:	6992      	ldr	r2, [r2, #24]
10005a6a:	3a01      	subs	r2, #1
10005a6c:	0412      	lsls	r2, r2, #16
10005a6e:	430a      	orrs	r2, r1
10005a70:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005a74:	4313      	orrs	r3, r2
10005a76:	f8c1 389c 	str.w	r3, [r1, #2204]	; 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
10005a7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005a7e:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10005a82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10005a8a:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
10005a8e:	687b      	ldr	r3, [r7, #4]
10005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005a92:	2b02      	cmp	r3, #2
10005a94:	d003      	beq.n	10005a9e <RCCEx_PLL4_Config+0x146>
10005a96:	687b      	ldr	r3, [r7, #4]
10005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005a9a:	2b00      	cmp	r3, #0
10005a9c:	d10c      	bne.n	10005ab8 <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
10005a9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005aa2:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10005aa6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005aaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10005aae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10005ab2:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
10005ab6:	e00f      	b.n	10005ad8 <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
10005ab8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005abc:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10005ac0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10005ac4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10005ac8:	687a      	ldr	r2, [r7, #4]
10005aca:	6a12      	ldr	r2, [r2, #32]
10005acc:	00d2      	lsls	r2, r2, #3
10005ace:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005ad2:	4313      	orrs	r3, r2
10005ad4:	f8c1 38a0 	str.w	r3, [r1, #2208]	; 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
10005ad8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005adc:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10005ae0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10005ae8:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10005aec:	687b      	ldr	r3, [r7, #4]
10005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005af0:	2b02      	cmp	r3, #2
10005af2:	d124      	bne.n	10005b3e <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
10005af4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005af8:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	; 0x8a4
10005afc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10005b00:	687b      	ldr	r3, [r7, #4]
10005b02:	6a99      	ldr	r1, [r3, #40]	; 0x28
10005b04:	687b      	ldr	r3, [r7, #4]
10005b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10005b08:	4319      	orrs	r1, r3
10005b0a:	687b      	ldr	r3, [r7, #4]
10005b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10005b0e:	4319      	orrs	r1, r3
10005b10:	687b      	ldr	r3, [r7, #4]
10005b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10005b14:	4319      	orrs	r1, r3
10005b16:	687b      	ldr	r3, [r7, #4]
10005b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10005b1a:	041b      	lsls	r3, r3, #16
10005b1c:	430b      	orrs	r3, r1
10005b1e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005b22:	4313      	orrs	r3, r2
10005b24:	f8c1 38a4 	str.w	r3, [r1, #2212]	; 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
10005b28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005b2c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005b30:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005b34:	f043 0304 	orr.w	r3, r3, #4
10005b38:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10005b3c:	e009      	b.n	10005b52 <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
10005b3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005b42:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005b46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005b4a:	f023 0304 	bic.w	r3, r3, #4
10005b4e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
10005b52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005b56:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005b5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005b5e:	f043 0301 	orr.w	r3, r3, #1
10005b62:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10005b66:	f7fb feaf 	bl	100018c8 <HAL_GetTick>
10005b6a:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10005b6c:	e008      	b.n	10005b80 <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005b6e:	f7fb feab 	bl	100018c8 <HAL_GetTick>
10005b72:	4602      	mov	r2, r0
10005b74:	68fb      	ldr	r3, [r7, #12]
10005b76:	1ad3      	subs	r3, r2, r3
10005b78:	2b64      	cmp	r3, #100	; 0x64
10005b7a:	d901      	bls.n	10005b80 <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
10005b7c:	2303      	movs	r3, #3
10005b7e:	e03c      	b.n	10005bfa <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10005b80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005b84:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005b88:	f003 0302 	and.w	r3, r3, #2
10005b8c:	2b02      	cmp	r3, #2
10005b8e:	d1ee      	bne.n	10005b6e <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10005b90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005b94:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005b98:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005b9c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10005ba0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10005ba4:	e028      	b.n	10005bf8 <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10005ba6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005baa:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005bae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10005bb6:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
10005bba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005bbe:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005bc2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005bc6:	f023 0301 	bic.w	r3, r3, #1
10005bca:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10005bce:	f7fb fe7b 	bl	100018c8 <HAL_GetTick>
10005bd2:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10005bd4:	e008      	b.n	10005be8 <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005bd6:	f7fb fe77 	bl	100018c8 <HAL_GetTick>
10005bda:	4602      	mov	r2, r0
10005bdc:	68fb      	ldr	r3, [r7, #12]
10005bde:	1ad3      	subs	r3, r2, r3
10005be0:	2b64      	cmp	r3, #100	; 0x64
10005be2:	d901      	bls.n	10005be8 <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
10005be4:	2303      	movs	r3, #3
10005be6:	e008      	b.n	10005bfa <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10005be8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005bec:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005bf0:	f003 0302 	and.w	r3, r3, #2
10005bf4:	2b02      	cmp	r3, #2
10005bf6:	d0ee      	beq.n	10005bd6 <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
10005bf8:	2300      	movs	r3, #0
}
10005bfa:	4618      	mov	r0, r3
10005bfc:	3710      	adds	r7, #16
10005bfe:	46bd      	mov	sp, r7
10005c00:	bd80      	pop	{r7, pc}
10005c02:	bf00      	nop
10005c04:	ffc0fe00 	.word	0xffc0fe00

10005c08 <HAL_RCCEx_PeriphCLKConfig>:
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef
                                            *PeriphClkInit)
{
10005c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
10005c0c:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
10005c10:	af00      	add	r7, sp, #0
10005c12:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005c16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005c1a:	6018      	str	r0, [r3, #0]
  uint32_t tmpreg = 0, RESERVED_BDCR_MASK = 0;
10005c1c:	2300      	movs	r3, #0
10005c1e:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
10005c22:	2300      	movs	r3, #0
10005c24:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
10005c28:	2300      	movs	r3, #0
10005c2a:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
10005c2e:	2300      	movs	r3, #0
10005c30:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- CKPER configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) ==
10005c34:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005c38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005c3c:	681b      	ldr	r3, [r3, #0]
10005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
10005c42:	f402 0400 	and.w	r4, r2, #8388608	; 0x800000
10005c46:	2500      	movs	r5, #0
10005c48:	ea54 0305 	orrs.w	r3, r4, r5
10005c4c:	d011      	beq.n	10005c72 <HAL_RCCEx_PeriphCLKConfig+0x6a>
      RCC_PERIPHCLK_CKPER)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    __HAL_RCC_CKPER_CONFIG(PeriphClkInit->CkperClockSelection);
10005c4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005c52:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
10005c56:	f023 0103 	bic.w	r1, r3, #3
10005c5a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005c5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005c62:	681b      	ldr	r3, [r3, #0]
10005c64:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
10005c68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005c6c:	430b      	orrs	r3, r1
10005c6e:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
  }

  /*------------------------------ I2C12 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C12) ==
10005c72:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005c76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005c7a:	681b      	ldr	r3, [r3, #0]
10005c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
10005c80:	f002 0810 	and.w	r8, r2, #16
10005c84:	f04f 0900 	mov.w	r9, #0
10005c88:	ea58 0309 	orrs.w	r3, r8, r9
10005c8c:	d038      	beq.n	10005d00 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      RCC_PERIPHCLK_I2C12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C12CLKSOURCE(PeriphClkInit->I2c12ClockSelection));

    if ((PeriphClkInit->I2c12ClockSelection) == RCC_I2C12CLKSOURCE_PLL4)
10005c8e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005c92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005c96:	681b      	ldr	r3, [r3, #0]
10005c98:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
10005c9c:	2b01      	cmp	r3, #1
10005c9e:	d11d      	bne.n	10005cdc <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005ca0:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005ca4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005ca8:	681b      	ldr	r3, [r3, #0]
10005caa:	3380      	adds	r3, #128	; 0x80
10005cac:	4618      	mov	r0, r3
10005cae:	f7ff fe53 	bl	10005958 <RCCEx_PLL4_Config>
10005cb2:	4603      	mov	r3, r0
10005cb4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10005cb8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005cbc:	2b00      	cmp	r3, #0
10005cbe:	d003      	beq.n	10005cc8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return status;
10005cc0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005cc4:	f001 be2a 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10005cc8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005ccc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005cd0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10005cd8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_I2C12_CONFIG(PeriphClkInit->I2c12ClockSelection);
10005cdc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005ce0:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	; 0x8c0
10005ce4:	f023 0107 	bic.w	r1, r3, #7
10005ce8:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005cec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005cf0:	681b      	ldr	r3, [r3, #0]
10005cf2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
10005cf6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005cfa:	430b      	orrs	r3, r1
10005cfc:	f8c2 38c0 	str.w	r3, [r2, #2240]	; 0x8c0
  }

  /*------------------------------ I2C35 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C35) ==
10005d00:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005d04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005d08:	681b      	ldr	r3, [r3, #0]
10005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
10005d0e:	f002 0a20 	and.w	sl, r2, #32
10005d12:	f04f 0b00 	mov.w	fp, #0
10005d16:	ea5a 030b 	orrs.w	r3, sl, fp
10005d1a:	d038      	beq.n	10005d8e <HAL_RCCEx_PeriphCLKConfig+0x186>
      RCC_PERIPHCLK_I2C35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C35CLKSOURCE(PeriphClkInit->I2c35ClockSelection));

    if ((PeriphClkInit->I2c35ClockSelection) == RCC_I2C35CLKSOURCE_PLL4)
10005d1c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005d20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005d24:	681b      	ldr	r3, [r3, #0]
10005d26:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10005d2a:	2b01      	cmp	r3, #1
10005d2c:	d11d      	bne.n	10005d6a <HAL_RCCEx_PeriphCLKConfig+0x162>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005d2e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005d32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005d36:	681b      	ldr	r3, [r3, #0]
10005d38:	3380      	adds	r3, #128	; 0x80
10005d3a:	4618      	mov	r0, r3
10005d3c:	f7ff fe0c 	bl	10005958 <RCCEx_PLL4_Config>
10005d40:	4603      	mov	r3, r0
10005d42:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10005d46:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005d4a:	2b00      	cmp	r3, #0
10005d4c:	d003      	beq.n	10005d56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        return status;
10005d4e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005d52:	f001 bde3 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10005d56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005d5a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005d5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10005d66:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_I2C35_CONFIG(PeriphClkInit->I2c35ClockSelection);
10005d6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005d6e:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	; 0x8c4
10005d72:	f023 0107 	bic.w	r1, r3, #7
10005d76:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005d7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005d7e:	681b      	ldr	r3, [r3, #0]
10005d80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10005d84:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005d88:	430b      	orrs	r3, r1
10005d8a:	f8c2 38c4 	str.w	r3, [r2, #2244]	; 0x8c4
  }

  /*------------------------------ I2C46 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C46) ==
10005d8e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005d92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005d96:	681b      	ldr	r3, [r3, #0]
10005d98:	e9d3 2300 	ldrd	r2, r3, [r3]
10005d9c:	2100      	movs	r1, #0
10005d9e:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
10005da2:	f003 0320 	and.w	r3, r3, #32
10005da6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
10005daa:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
10005dae:	460b      	mov	r3, r1
10005db0:	4313      	orrs	r3, r2
10005db2:	d038      	beq.n	10005e26 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      RCC_PERIPHCLK_I2C46)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C46CLKSOURCE(PeriphClkInit->I2c46ClockSelection));

    if ((PeriphClkInit->I2c46ClockSelection) == RCC_I2C46CLKSOURCE_PLL3)
10005db4:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005db8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005dbc:	681b      	ldr	r3, [r3, #0]
10005dbe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10005dc2:	2b01      	cmp	r3, #1
10005dc4:	d11d      	bne.n	10005e02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005dc6:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005dca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005dce:	681b      	ldr	r3, [r3, #0]
10005dd0:	3344      	adds	r3, #68	; 0x44
10005dd2:	4618      	mov	r0, r3
10005dd4:	f7ff fc56 	bl	10005684 <RCCEx_PLL3_Config>
10005dd8:	4603      	mov	r3, r0
10005dda:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10005dde:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005de2:	2b00      	cmp	r3, #0
10005de4:	d003      	beq.n	10005dee <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      {
        return status;
10005de6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005dea:	f001 bd97 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10005dee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005df2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005df6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005dfa:	f043 0320 	orr.w	r3, r3, #32
10005dfe:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
    }

    __HAL_RCC_I2C46_CONFIG(PeriphClkInit->I2c46ClockSelection);
10005e02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005e06:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10005e0a:	f023 0107 	bic.w	r1, r3, #7
10005e0e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005e12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005e16:	681b      	ldr	r3, [r3, #0]
10005e18:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10005e1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005e20:	430b      	orrs	r3, r1
10005e22:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) ==
10005e26:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005e2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005e2e:	681b      	ldr	r3, [r3, #0]
10005e30:	e9d3 2300 	ldrd	r2, r3, [r3]
10005e34:	f002 0380 	and.w	r3, r2, #128	; 0x80
10005e38:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
10005e3c:	2300      	movs	r3, #0
10005e3e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
10005e42:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
10005e46:	460b      	mov	r3, r1
10005e48:	4313      	orrs	r3, r2
10005e4a:	d07e      	beq.n	10005f4a <HAL_RCCEx_PeriphCLKConfig+0x342>
      RCC_PERIPHCLK_SAI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
10005e4c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005e50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005e54:	681b      	ldr	r3, [r3, #0]
10005e56:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10005e5a:	2b04      	cmp	r3, #4
10005e5c:	d044      	beq.n	10005ee8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
10005e5e:	2b04      	cmp	r3, #4
10005e60:	d861      	bhi.n	10005f26 <HAL_RCCEx_PeriphCLKConfig+0x31e>
10005e62:	2b00      	cmp	r3, #0
10005e64:	d002      	beq.n	10005e6c <HAL_RCCEx_PeriphCLKConfig+0x264>
10005e66:	2b01      	cmp	r3, #1
10005e68:	d01f      	beq.n	10005eaa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
10005e6a:	e05c      	b.n	10005f26 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    {
      case RCC_SAI1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI1*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005e6c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005e70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005e74:	681b      	ldr	r3, [r3, #0]
10005e76:	3380      	adds	r3, #128	; 0x80
10005e78:	4618      	mov	r0, r3
10005e7a:	f7ff fd6d 	bl	10005958 <RCCEx_PLL4_Config>
10005e7e:	4603      	mov	r3, r0
10005e80:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005e84:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005e88:	2b00      	cmp	r3, #0
10005e8a:	d003      	beq.n	10005e94 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        {
          return status;
10005e8c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005e90:	f001 bd44 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10005e94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005e98:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005e9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005ea0:	f043 0320 	orr.w	r3, r3, #32
10005ea4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10005ea8:	e03d      	b.n	10005f26 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_Q:  /* PLL3_Q is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005eaa:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005eae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005eb2:	681b      	ldr	r3, [r3, #0]
10005eb4:	3344      	adds	r3, #68	; 0x44
10005eb6:	4618      	mov	r0, r3
10005eb8:	f7ff fbe4 	bl	10005684 <RCCEx_PLL3_Config>
10005ebc:	4603      	mov	r3, r0
10005ebe:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005ec2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005ec6:	2b00      	cmp	r3, #0
10005ec8:	d003      	beq.n	10005ed2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
        {
          return status;
10005eca:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005ece:	f001 bd25 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10005ed2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005ed6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005eda:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005ede:	f043 0320 	orr.w	r3, r3, #32
10005ee2:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10005ee6:	e01e      	b.n	10005f26 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_R:  /* PLL3_R is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005ee8:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005eec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005ef0:	681b      	ldr	r3, [r3, #0]
10005ef2:	3344      	adds	r3, #68	; 0x44
10005ef4:	4618      	mov	r0, r3
10005ef6:	f7ff fbc5 	bl	10005684 <RCCEx_PLL3_Config>
10005efa:	4603      	mov	r3, r0
10005efc:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005f00:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005f04:	2b00      	cmp	r3, #0
10005f06:	d003      	beq.n	10005f10 <HAL_RCCEx_PeriphCLKConfig+0x308>
        {
          return status;
10005f08:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005f0c:	f001 bd06 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10005f10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005f14:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005f18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10005f20:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10005f24:	bf00      	nop
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
10005f26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005f2a:	f8d3 38c8 	ldr.w	r3, [r3, #2248]	; 0x8c8
10005f2e:	f023 0107 	bic.w	r1, r3, #7
10005f32:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005f36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005f3a:	681b      	ldr	r3, [r3, #0]
10005f3c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10005f40:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005f44:	430b      	orrs	r3, r1
10005f46:	f8c2 38c8 	str.w	r3, [r2, #2248]	; 0x8c8
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) ==
10005f4a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005f4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005f52:	681b      	ldr	r3, [r3, #0]
10005f54:	e9d3 2300 	ldrd	r2, r3, [r3]
10005f58:	f402 7380 	and.w	r3, r2, #256	; 0x100
10005f5c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
10005f60:	2300      	movs	r3, #0
10005f62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
10005f66:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
10005f6a:	460b      	mov	r3, r1
10005f6c:	4313      	orrs	r3, r2
10005f6e:	d07e      	beq.n	1000606e <HAL_RCCEx_PeriphCLKConfig+0x466>
      RCC_PERIPHCLK_SAI2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
10005f70:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005f74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005f78:	681b      	ldr	r3, [r3, #0]
10005f7a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
10005f7e:	2b05      	cmp	r3, #5
10005f80:	d044      	beq.n	1000600c <HAL_RCCEx_PeriphCLKConfig+0x404>
10005f82:	2b05      	cmp	r3, #5
10005f84:	d861      	bhi.n	1000604a <HAL_RCCEx_PeriphCLKConfig+0x442>
10005f86:	2b00      	cmp	r3, #0
10005f88:	d002      	beq.n	10005f90 <HAL_RCCEx_PeriphCLKConfig+0x388>
10005f8a:	2b01      	cmp	r3, #1
10005f8c:	d01f      	beq.n	10005fce <HAL_RCCEx_PeriphCLKConfig+0x3c6>
10005f8e:	e05c      	b.n	1000604a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      case RCC_SAI2CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI2*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005f90:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005f94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005f98:	681b      	ldr	r3, [r3, #0]
10005f9a:	3380      	adds	r3, #128	; 0x80
10005f9c:	4618      	mov	r0, r3
10005f9e:	f7ff fcdb 	bl	10005958 <RCCEx_PLL4_Config>
10005fa2:	4603      	mov	r3, r0
10005fa4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005fa8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005fac:	2b00      	cmp	r3, #0
10005fae:	d003      	beq.n	10005fb8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          return status;
10005fb0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005fb4:	f001 bcb2 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10005fb8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005fbc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005fc0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005fc4:	f043 0320 	orr.w	r3, r3, #32
10005fc8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10005fcc:	e03d      	b.n	1000604a <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005fce:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005fd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005fd6:	681b      	ldr	r3, [r3, #0]
10005fd8:	3344      	adds	r3, #68	; 0x44
10005fda:	4618      	mov	r0, r3
10005fdc:	f7ff fb52 	bl	10005684 <RCCEx_PLL3_Config>
10005fe0:	4603      	mov	r3, r0
10005fe2:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005fe6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005fea:	2b00      	cmp	r3, #0
10005fec:	d003      	beq.n	10005ff6 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
        {
          return status;
10005fee:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005ff2:	f001 bc93 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10005ff6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005ffa:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005ffe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006002:	f043 0320 	orr.w	r3, r3, #32
10006006:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000600a:	e01e      	b.n	1000604a <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000600c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006010:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006014:	681b      	ldr	r3, [r3, #0]
10006016:	3344      	adds	r3, #68	; 0x44
10006018:	4618      	mov	r0, r3
1000601a:	f7ff fb33 	bl	10005684 <RCCEx_PLL3_Config>
1000601e:	4603      	mov	r3, r0
10006020:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006024:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006028:	2b00      	cmp	r3, #0
1000602a:	d003      	beq.n	10006034 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        {
          return status;
1000602c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006030:	f001 bc74 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006034:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006038:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000603c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006044:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006048:	bf00      	nop
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
1000604a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000604e:	f8d3 38cc 	ldr.w	r3, [r3, #2252]	; 0x8cc
10006052:	f023 0107 	bic.w	r1, r3, #7
10006056:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000605a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000605e:	681b      	ldr	r3, [r3, #0]
10006060:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
10006064:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006068:	430b      	orrs	r3, r1
1000606a:	f8c2 38cc 	str.w	r3, [r2, #2252]	; 0x8cc
  }

  /*---------------------------- SAI3 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI3) ==
1000606e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006072:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006076:	681b      	ldr	r3, [r3, #0]
10006078:	e9d3 2300 	ldrd	r2, r3, [r3]
1000607c:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
10006080:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
10006084:	2300      	movs	r3, #0
10006086:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
1000608a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
1000608e:	460b      	mov	r3, r1
10006090:	4313      	orrs	r3, r2
10006092:	d07e      	beq.n	10006192 <HAL_RCCEx_PeriphCLKConfig+0x58a>
      RCC_PERIPHCLK_SAI3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI3CLKSOURCE(PeriphClkInit->Sai3ClockSelection));

    switch (PeriphClkInit->Sai3ClockSelection)
10006094:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006098:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000609c:	681b      	ldr	r3, [r3, #0]
1000609e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
100060a2:	2b04      	cmp	r3, #4
100060a4:	d044      	beq.n	10006130 <HAL_RCCEx_PeriphCLKConfig+0x528>
100060a6:	2b04      	cmp	r3, #4
100060a8:	d861      	bhi.n	1000616e <HAL_RCCEx_PeriphCLKConfig+0x566>
100060aa:	2b00      	cmp	r3, #0
100060ac:	d002      	beq.n	100060b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
100060ae:	2b01      	cmp	r3, #1
100060b0:	d01f      	beq.n	100060f2 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
100060b2:	e05c      	b.n	1000616e <HAL_RCCEx_PeriphCLKConfig+0x566>
    {
      case RCC_SAI3CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI3*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100060b4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100060b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100060bc:	681b      	ldr	r3, [r3, #0]
100060be:	3380      	adds	r3, #128	; 0x80
100060c0:	4618      	mov	r0, r3
100060c2:	f7ff fc49 	bl	10005958 <RCCEx_PLL4_Config>
100060c6:	4603      	mov	r3, r0
100060c8:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100060cc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100060d0:	2b00      	cmp	r3, #0
100060d2:	d003      	beq.n	100060dc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        {
          return status;
100060d4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100060d8:	f001 bc20 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100060dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100060e0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100060e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100060e8:	f043 0320 	orr.w	r3, r3, #32
100060ec:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100060f0:	e03d      	b.n	1000616e <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100060f2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100060f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100060fa:	681b      	ldr	r3, [r3, #0]
100060fc:	3344      	adds	r3, #68	; 0x44
100060fe:	4618      	mov	r0, r3
10006100:	f7ff fac0 	bl	10005684 <RCCEx_PLL3_Config>
10006104:	4603      	mov	r3, r0
10006106:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000610a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000610e:	2b00      	cmp	r3, #0
10006110:	d003      	beq.n	1000611a <HAL_RCCEx_PeriphCLKConfig+0x512>
        {
          return status;
10006112:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006116:	f001 bc01 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000611a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000611e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006122:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006126:	f043 0320 	orr.w	r3, r3, #32
1000612a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000612e:	e01e      	b.n	1000616e <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006130:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006134:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006138:	681b      	ldr	r3, [r3, #0]
1000613a:	3344      	adds	r3, #68	; 0x44
1000613c:	4618      	mov	r0, r3
1000613e:	f7ff faa1 	bl	10005684 <RCCEx_PLL3_Config>
10006142:	4603      	mov	r3, r0
10006144:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006148:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000614c:	2b00      	cmp	r3, #0
1000614e:	d003      	beq.n	10006158 <HAL_RCCEx_PeriphCLKConfig+0x550>
        {
          return status;
10006150:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006154:	f001 bbe2 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006158:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000615c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006160:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006168:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000616c:	bf00      	nop
    }

    /* Set the source of SAI3 clock*/
    __HAL_RCC_SAI3_CONFIG(PeriphClkInit->Sai3ClockSelection);
1000616e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006172:	f8d3 38d0 	ldr.w	r3, [r3, #2256]	; 0x8d0
10006176:	f023 0107 	bic.w	r1, r3, #7
1000617a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000617e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006182:	681b      	ldr	r3, [r3, #0]
10006184:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
10006188:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000618c:	430b      	orrs	r3, r1
1000618e:	f8c2 38d0 	str.w	r3, [r2, #2256]	; 0x8d0
  }

  /*---------------------------- SAI4 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4) ==
10006192:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006196:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000619a:	681b      	ldr	r3, [r3, #0]
1000619c:	e9d3 2300 	ldrd	r2, r3, [r3]
100061a0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
100061a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
100061a8:	2300      	movs	r3, #0
100061aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
100061ae:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
100061b2:	460b      	mov	r3, r1
100061b4:	4313      	orrs	r3, r2
100061b6:	d07e      	beq.n	100062b6 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      RCC_PERIPHCLK_SAI4)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI4CLKSOURCE(PeriphClkInit->Sai4ClockSelection));

    switch (PeriphClkInit->Sai4ClockSelection)
100061b8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100061bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100061c0:	681b      	ldr	r3, [r3, #0]
100061c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
100061c6:	2b04      	cmp	r3, #4
100061c8:	d044      	beq.n	10006254 <HAL_RCCEx_PeriphCLKConfig+0x64c>
100061ca:	2b04      	cmp	r3, #4
100061cc:	d861      	bhi.n	10006292 <HAL_RCCEx_PeriphCLKConfig+0x68a>
100061ce:	2b00      	cmp	r3, #0
100061d0:	d002      	beq.n	100061d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
100061d2:	2b01      	cmp	r3, #1
100061d4:	d01f      	beq.n	10006216 <HAL_RCCEx_PeriphCLKConfig+0x60e>
100061d6:	e05c      	b.n	10006292 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    {
      case RCC_SAI4CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI4 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100061d8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100061dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100061e0:	681b      	ldr	r3, [r3, #0]
100061e2:	3380      	adds	r3, #128	; 0x80
100061e4:	4618      	mov	r0, r3
100061e6:	f7ff fbb7 	bl	10005958 <RCCEx_PLL4_Config>
100061ea:	4603      	mov	r3, r0
100061ec:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100061f0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100061f4:	2b00      	cmp	r3, #0
100061f6:	d003      	beq.n	10006200 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
        {
          return status;
100061f8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100061fc:	f001 bb8e 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006200:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006204:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006208:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000620c:	f043 0320 	orr.w	r3, r3, #32
10006210:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006214:	e03d      	b.n	10006292 <HAL_RCCEx_PeriphCLKConfig+0x68a>


      case RCC_SAI4CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006216:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000621a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000621e:	681b      	ldr	r3, [r3, #0]
10006220:	3344      	adds	r3, #68	; 0x44
10006222:	4618      	mov	r0, r3
10006224:	f7ff fa2e 	bl	10005684 <RCCEx_PLL3_Config>
10006228:	4603      	mov	r3, r0
1000622a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000622e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006232:	2b00      	cmp	r3, #0
10006234:	d003      	beq.n	1000623e <HAL_RCCEx_PeriphCLKConfig+0x636>
        {
          return status;
10006236:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000623a:	f001 bb6f 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_Q */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000623e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006242:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006246:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000624a:	f043 0320 	orr.w	r3, r3, #32
1000624e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006252:	e01e      	b.n	10006292 <HAL_RCCEx_PeriphCLKConfig+0x68a>

      case RCC_SAI4CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006254:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006258:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000625c:	681b      	ldr	r3, [r3, #0]
1000625e:	3344      	adds	r3, #68	; 0x44
10006260:	4618      	mov	r0, r3
10006262:	f7ff fa0f 	bl	10005684 <RCCEx_PLL3_Config>
10006266:	4603      	mov	r3, r0
10006268:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000626c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006270:	2b00      	cmp	r3, #0
10006272:	d003      	beq.n	1000627c <HAL_RCCEx_PeriphCLKConfig+0x674>
        {
          return status;
10006274:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006278:	f001 bb50 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_R */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
1000627c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006280:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006284:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000628c:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006290:	bf00      	nop
    }

    /* Set the source of SAI4 clock*/
    __HAL_RCC_SAI4_CONFIG(PeriphClkInit->Sai4ClockSelection);
10006292:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006296:	f8d3 38d4 	ldr.w	r3, [r3, #2260]	; 0x8d4
1000629a:	f023 0107 	bic.w	r1, r3, #7
1000629e:	f507 7312 	add.w	r3, r7, #584	; 0x248
100062a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100062a6:	681b      	ldr	r3, [r3, #0]
100062a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
100062ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100062b0:	430b      	orrs	r3, r1
100062b2:	f8c2 38d4 	str.w	r3, [r2, #2260]	; 0x8d4
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) ==
100062b6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100062ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100062be:	681b      	ldr	r3, [r3, #0]
100062c0:	e9d3 2300 	ldrd	r2, r3, [r3]
100062c4:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
100062c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
100062cc:	2300      	movs	r3, #0
100062ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
100062d2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
100062d6:	460b      	mov	r3, r1
100062d8:	4313      	orrs	r3, r2
100062da:	d07e      	beq.n	100063da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      RCC_PERIPHCLK_SPI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
100062dc:	f507 7312 	add.w	r3, r7, #584	; 0x248
100062e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100062e4:	681b      	ldr	r3, [r3, #0]
100062e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
100062ea:	2b04      	cmp	r3, #4
100062ec:	d044      	beq.n	10006378 <HAL_RCCEx_PeriphCLKConfig+0x770>
100062ee:	2b04      	cmp	r3, #4
100062f0:	d861      	bhi.n	100063b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
100062f2:	2b00      	cmp	r3, #0
100062f4:	d002      	beq.n	100062fc <HAL_RCCEx_PeriphCLKConfig+0x6f4>
100062f6:	2b01      	cmp	r3, #1
100062f8:	d01f      	beq.n	1000633a <HAL_RCCEx_PeriphCLKConfig+0x732>
100062fa:	e05c      	b.n	100063b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      case RCC_SPI1CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100062fc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006300:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006304:	681b      	ldr	r3, [r3, #0]
10006306:	3380      	adds	r3, #128	; 0x80
10006308:	4618      	mov	r0, r3
1000630a:	f7ff fb25 	bl	10005958 <RCCEx_PLL4_Config>
1000630e:	4603      	mov	r3, r0
10006310:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006314:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006318:	2b00      	cmp	r3, #0
1000631a:	d003      	beq.n	10006324 <HAL_RCCEx_PeriphCLKConfig+0x71c>
        {
          return status;
1000631c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006320:	f001 bafc 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006324:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006328:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000632c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006330:	f043 0310 	orr.w	r3, r3, #16
10006334:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006338:	e03d      	b.n	100063b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000633a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000633e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006342:	681b      	ldr	r3, [r3, #0]
10006344:	3344      	adds	r3, #68	; 0x44
10006346:	4618      	mov	r0, r3
10006348:	f7ff f99c 	bl	10005684 <RCCEx_PLL3_Config>
1000634c:	4603      	mov	r3, r0
1000634e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006352:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006356:	2b00      	cmp	r3, #0
10006358:	d003      	beq.n	10006362 <HAL_RCCEx_PeriphCLKConfig+0x75a>
        {
          return status;
1000635a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000635e:	f001 badd 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006362:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006366:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000636a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000636e:	f043 0320 	orr.w	r3, r3, #32
10006372:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006376:	e01e      	b.n	100063b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006378:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000637c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006380:	681b      	ldr	r3, [r3, #0]
10006382:	3344      	adds	r3, #68	; 0x44
10006384:	4618      	mov	r0, r3
10006386:	f7ff f97d 	bl	10005684 <RCCEx_PLL3_Config>
1000638a:	4603      	mov	r3, r0
1000638c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006390:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006394:	2b00      	cmp	r3, #0
10006396:	d003      	beq.n	100063a0 <HAL_RCCEx_PeriphCLKConfig+0x798>
        {
          return status;
10006398:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000639c:	f001 babe 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100063a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100063a4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100063a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100063ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100063b0:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100063b4:	bf00      	nop

    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
100063b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100063ba:	f8d3 38d8 	ldr.w	r3, [r3, #2264]	; 0x8d8
100063be:	f023 0107 	bic.w	r1, r3, #7
100063c2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100063c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100063ca:	681b      	ldr	r3, [r3, #0]
100063cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
100063d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100063d4:	430b      	orrs	r3, r1
100063d6:	f8c2 38d8 	str.w	r3, [r2, #2264]	; 0x8d8
  }

  /*---------------------------- SPI23 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI23) ==
100063da:	f507 7312 	add.w	r3, r7, #584	; 0x248
100063de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100063e2:	681b      	ldr	r3, [r3, #0]
100063e4:	e9d3 2300 	ldrd	r2, r3, [r3]
100063e8:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
100063ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
100063f0:	2300      	movs	r3, #0
100063f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
100063f6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
100063fa:	460b      	mov	r3, r1
100063fc:	4313      	orrs	r3, r2
100063fe:	d07e      	beq.n	100064fe <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      RCC_PERIPHCLK_SPI23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
10006400:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006404:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006408:	681b      	ldr	r3, [r3, #0]
1000640a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
1000640e:	2b04      	cmp	r3, #4
10006410:	d044      	beq.n	1000649c <HAL_RCCEx_PeriphCLKConfig+0x894>
10006412:	2b04      	cmp	r3, #4
10006414:	d861      	bhi.n	100064da <HAL_RCCEx_PeriphCLKConfig+0x8d2>
10006416:	2b00      	cmp	r3, #0
10006418:	d002      	beq.n	10006420 <HAL_RCCEx_PeriphCLKConfig+0x818>
1000641a:	2b01      	cmp	r3, #1
1000641c:	d01f      	beq.n	1000645e <HAL_RCCEx_PeriphCLKConfig+0x856>
1000641e:	e05c      	b.n	100064da <HAL_RCCEx_PeriphCLKConfig+0x8d2>
    {
      case RCC_SPI23CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI23 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006420:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006424:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006428:	681b      	ldr	r3, [r3, #0]
1000642a:	3380      	adds	r3, #128	; 0x80
1000642c:	4618      	mov	r0, r3
1000642e:	f7ff fa93 	bl	10005958 <RCCEx_PLL4_Config>
10006432:	4603      	mov	r3, r0
10006434:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006438:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000643c:	2b00      	cmp	r3, #0
1000643e:	d003      	beq.n	10006448 <HAL_RCCEx_PeriphCLKConfig+0x840>
        {
          return status;
10006440:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006444:	f001 ba6a 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006448:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000644c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006450:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006454:	f043 0310 	orr.w	r3, r3, #16
10006458:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
1000645c:	e03d      	b.n	100064da <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000645e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006462:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006466:	681b      	ldr	r3, [r3, #0]
10006468:	3344      	adds	r3, #68	; 0x44
1000646a:	4618      	mov	r0, r3
1000646c:	f7ff f90a 	bl	10005684 <RCCEx_PLL3_Config>
10006470:	4603      	mov	r3, r0
10006472:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006476:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000647a:	2b00      	cmp	r3, #0
1000647c:	d003      	beq.n	10006486 <HAL_RCCEx_PeriphCLKConfig+0x87e>
        {
          return status;
1000647e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006482:	f001 ba4b 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006486:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000648a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000648e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006492:	f043 0320 	orr.w	r3, r3, #32
10006496:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000649a:	e01e      	b.n	100064da <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000649c:	f507 7312 	add.w	r3, r7, #584	; 0x248
100064a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100064a4:	681b      	ldr	r3, [r3, #0]
100064a6:	3344      	adds	r3, #68	; 0x44
100064a8:	4618      	mov	r0, r3
100064aa:	f7ff f8eb 	bl	10005684 <RCCEx_PLL3_Config>
100064ae:	4603      	mov	r3, r0
100064b0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100064b4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100064b8:	2b00      	cmp	r3, #0
100064ba:	d003      	beq.n	100064c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
        {
          return status;
100064bc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100064c0:	f001 ba2c 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100064c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100064c8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100064cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100064d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100064d4:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100064d8:	bf00      	nop
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
100064da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100064de:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	; 0x8dc
100064e2:	f023 0107 	bic.w	r1, r3, #7
100064e6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100064ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100064ee:	681b      	ldr	r3, [r3, #0]
100064f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
100064f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100064f8:	430b      	orrs	r3, r1
100064fa:	f8c2 38dc 	str.w	r3, [r2, #2268]	; 0x8dc
  }

  /*---------------------------- SPI45 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) ==
100064fe:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006502:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006506:	681b      	ldr	r3, [r3, #0]
10006508:	e9d3 2300 	ldrd	r2, r3, [r3]
1000650c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
10006510:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
10006514:	2300      	movs	r3, #0
10006516:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
1000651a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
1000651e:	460b      	mov	r3, r1
10006520:	4313      	orrs	r3, r2
10006522:	d038      	beq.n	10006596 <HAL_RCCEx_PeriphCLKConfig+0x98e>
      RCC_PERIPHCLK_SPI45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    if (PeriphClkInit->Spi45ClockSelection == RCC_SPI45CLKSOURCE_PLL4)
10006524:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006528:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000652c:	681b      	ldr	r3, [r3, #0]
1000652e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
10006532:	2b01      	cmp	r3, #1
10006534:	d11d      	bne.n	10006572 <HAL_RCCEx_PeriphCLKConfig+0x96a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006536:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000653a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000653e:	681b      	ldr	r3, [r3, #0]
10006540:	3380      	adds	r3, #128	; 0x80
10006542:	4618      	mov	r0, r3
10006544:	f7ff fa08 	bl	10005958 <RCCEx_PLL4_Config>
10006548:	4603      	mov	r3, r0
1000654a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
1000654e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006552:	2b00      	cmp	r3, #0
10006554:	d003      	beq.n	1000655e <HAL_RCCEx_PeriphCLKConfig+0x956>
      {
        return status;
10006556:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000655a:	f001 b9df 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable SPI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000655e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006562:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006566:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000656a:	f043 0320 	orr.w	r3, r3, #32
1000656e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of SPI45 clock*/
    __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
10006572:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006576:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
1000657a:	f023 0107 	bic.w	r1, r3, #7
1000657e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006582:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006586:	681b      	ldr	r3, [r3, #0]
10006588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
1000658c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006590:	430b      	orrs	r3, r1
10006592:	f8c2 38e0 	str.w	r3, [r2, #2272]	; 0x8e0
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) ==
10006596:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000659a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000659e:	681b      	ldr	r3, [r3, #0]
100065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
100065a4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
100065a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
100065ac:	2300      	movs	r3, #0
100065ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
100065b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
100065b6:	460b      	mov	r3, r1
100065b8:	4313      	orrs	r3, r2
100065ba:	d05b      	beq.n	10006674 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
      RCC_PERIPHCLK_SPI6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
100065bc:	f507 7312 	add.w	r3, r7, #584	; 0x248
100065c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100065c4:	681b      	ldr	r3, [r3, #0]
100065c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
100065ca:	2b01      	cmp	r3, #1
100065cc:	d002      	beq.n	100065d4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
100065ce:	2b05      	cmp	r3, #5
100065d0:	d01f      	beq.n	10006612 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
100065d2:	e03d      	b.n	10006650 <HAL_RCCEx_PeriphCLKConfig+0xa48>
    {
      case RCC_SPI6CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI6 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100065d4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100065d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100065dc:	681b      	ldr	r3, [r3, #0]
100065de:	3380      	adds	r3, #128	; 0x80
100065e0:	4618      	mov	r0, r3
100065e2:	f7ff f9b9 	bl	10005958 <RCCEx_PLL4_Config>
100065e6:	4603      	mov	r3, r0
100065e8:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100065ec:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100065f0:	2b00      	cmp	r3, #0
100065f2:	d003      	beq.n	100065fc <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        {
          return status;
100065f4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100065f8:	f001 b990 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100065fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006600:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006604:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006608:	f043 0320 	orr.w	r3, r3, #32
1000660c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006610:	e01e      	b.n	10006650 <HAL_RCCEx_PeriphCLKConfig+0xa48>

      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is used as clock source for SPI6 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006612:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006616:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000661a:	681b      	ldr	r3, [r3, #0]
1000661c:	3344      	adds	r3, #68	; 0x44
1000661e:	4618      	mov	r0, r3
10006620:	f7ff f830 	bl	10005684 <RCCEx_PLL3_Config>
10006624:	4603      	mov	r3, r0
10006626:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000662a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000662e:	2b00      	cmp	r3, #0
10006630:	d003      	beq.n	1000663a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        {
          return status;
10006632:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006636:	f001 b971 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000663a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000663e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006642:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006646:	f043 0320 	orr.w	r3, r3, #32
1000664a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000664e:	bf00      	nop
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
10006650:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006654:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10006658:	f023 0107 	bic.w	r1, r3, #7
1000665c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006660:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006664:	681b      	ldr	r3, [r3, #0]
10006666:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
1000666a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000666e:	430b      	orrs	r3, r1
10006670:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  /*---------------------------- USART6 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) ==
10006674:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006678:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000667c:	681b      	ldr	r3, [r3, #0]
1000667e:	e9d3 2300 	ldrd	r2, r3, [r3]
10006682:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
10006686:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
1000668a:	2300      	movs	r3, #0
1000668c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
10006690:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
10006694:	460b      	mov	r3, r1
10006696:	4313      	orrs	r3, r2
10006698:	d038      	beq.n	1000670c <HAL_RCCEx_PeriphCLKConfig+0xb04>
      RCC_PERIPHCLK_USART6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_PLL4)
1000669a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000669e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100066a2:	681b      	ldr	r3, [r3, #0]
100066a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
100066a8:	2b01      	cmp	r3, #1
100066aa:	d11d      	bne.n	100066e8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
    {
      /* PLL4 is used as clock source for USART6 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100066ac:	f507 7312 	add.w	r3, r7, #584	; 0x248
100066b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100066b4:	681b      	ldr	r3, [r3, #0]
100066b6:	3380      	adds	r3, #128	; 0x80
100066b8:	4618      	mov	r0, r3
100066ba:	f7ff f94d 	bl	10005958 <RCCEx_PLL4_Config>
100066be:	4603      	mov	r3, r0
100066c0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
100066c4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100066c8:	2b00      	cmp	r3, #0
100066ca:	d003      	beq.n	100066d4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
      {
        return status;
100066cc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100066d0:	f001 b924 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100066d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100066d8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100066dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100066e0:	f043 0320 	orr.w	r3, r3, #32
100066e4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of USART6 clock*/
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
100066e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100066ec:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
100066f0:	f023 0107 	bic.w	r1, r3, #7
100066f4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100066f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100066fc:	681b      	ldr	r3, [r3, #0]
100066fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
10006702:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006706:	430b      	orrs	r3, r1
10006708:	f8c2 38e4 	str.w	r3, [r2, #2276]	; 0x8e4
  }

  /*---------------------------- UART24 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART24) ==
1000670c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006710:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006714:	681b      	ldr	r3, [r3, #0]
10006716:	e9d3 2300 	ldrd	r2, r3, [r3]
1000671a:	f002 0302 	and.w	r3, r2, #2
1000671e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
10006722:	2300      	movs	r3, #0
10006724:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
10006728:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
1000672c:	460b      	mov	r3, r1
1000672e:	4313      	orrs	r3, r2
10006730:	d038      	beq.n	100067a4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      RCC_PERIPHCLK_UART24)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART24CLKSOURCE(PeriphClkInit->Uart24ClockSelection));

    if (PeriphClkInit->Uart24ClockSelection == RCC_UART24CLKSOURCE_PLL4)
10006732:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006736:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000673a:	681b      	ldr	r3, [r3, #0]
1000673c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
10006740:	2b01      	cmp	r3, #1
10006742:	d11d      	bne.n	10006780 <HAL_RCCEx_PeriphCLKConfig+0xb78>
    {
      /* PLL4 is used as clock source for UART24 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006744:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006748:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000674c:	681b      	ldr	r3, [r3, #0]
1000674e:	3380      	adds	r3, #128	; 0x80
10006750:	4618      	mov	r0, r3
10006752:	f7ff f901 	bl	10005958 <RCCEx_PLL4_Config>
10006756:	4603      	mov	r3, r0
10006758:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
1000675c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006760:	2b00      	cmp	r3, #0
10006762:	d003      	beq.n	1000676c <HAL_RCCEx_PeriphCLKConfig+0xb64>
      {
        return status;
10006764:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006768:	f001 b8d8 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000676c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006770:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006774:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006778:	f043 0320 	orr.w	r3, r3, #32
1000677c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART24 clock*/
    __HAL_RCC_UART24_CONFIG(PeriphClkInit->Uart24ClockSelection);
10006780:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006784:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
10006788:	f023 0107 	bic.w	r1, r3, #7
1000678c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006790:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006794:	681b      	ldr	r3, [r3, #0]
10006796:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
1000679a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000679e:	430b      	orrs	r3, r1
100067a0:	f8c2 38e8 	str.w	r3, [r2, #2280]	; 0x8e8
  }

  /*---------------------------- UART35 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART35) ==
100067a4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100067a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100067ac:	681b      	ldr	r3, [r3, #0]
100067ae:	e9d3 2300 	ldrd	r2, r3, [r3]
100067b2:	f002 0304 	and.w	r3, r2, #4
100067b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
100067ba:	2300      	movs	r3, #0
100067bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
100067c0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
100067c4:	460b      	mov	r3, r1
100067c6:	4313      	orrs	r3, r2
100067c8:	d038      	beq.n	1000683c <HAL_RCCEx_PeriphCLKConfig+0xc34>
      RCC_PERIPHCLK_UART35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART35CLKSOURCE(PeriphClkInit->Uart35ClockSelection));

    if (PeriphClkInit->Uart35ClockSelection == RCC_UART35CLKSOURCE_PLL4)
100067ca:	f507 7312 	add.w	r3, r7, #584	; 0x248
100067ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100067d2:	681b      	ldr	r3, [r3, #0]
100067d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
100067d8:	2b01      	cmp	r3, #1
100067da:	d11d      	bne.n	10006818 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      /* PLL4 is used as clock source for UART35 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100067dc:	f507 7312 	add.w	r3, r7, #584	; 0x248
100067e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100067e4:	681b      	ldr	r3, [r3, #0]
100067e6:	3380      	adds	r3, #128	; 0x80
100067e8:	4618      	mov	r0, r3
100067ea:	f7ff f8b5 	bl	10005958 <RCCEx_PLL4_Config>
100067ee:	4603      	mov	r3, r0
100067f0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
100067f4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100067f8:	2b00      	cmp	r3, #0
100067fa:	d003      	beq.n	10006804 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      {
        return status;
100067fc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006800:	f001 b88c 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006804:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006808:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000680c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006810:	f043 0320 	orr.w	r3, r3, #32
10006814:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART35 clock*/
    __HAL_RCC_UART35_CONFIG(PeriphClkInit->Uart35ClockSelection);
10006818:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000681c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
10006820:	f023 0107 	bic.w	r1, r3, #7
10006824:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006828:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000682c:	681b      	ldr	r3, [r3, #0]
1000682e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
10006832:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006836:	430b      	orrs	r3, r1
10006838:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
  }

  /*---------------------------- UAUART78 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART78) ==
1000683c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006840:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006844:	681b      	ldr	r3, [r3, #0]
10006846:	e9d3 2300 	ldrd	r2, r3, [r3]
1000684a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
1000684e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
10006852:	2300      	movs	r3, #0
10006854:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
10006858:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
1000685c:	460b      	mov	r3, r1
1000685e:	4313      	orrs	r3, r2
10006860:	d038      	beq.n	100068d4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      RCC_PERIPHCLK_UART78)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART78CLKSOURCE(PeriphClkInit->Uart78ClockSelection));

    if (PeriphClkInit->Uart78ClockSelection == RCC_UART78CLKSOURCE_PLL4)
10006862:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006866:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000686a:	681b      	ldr	r3, [r3, #0]
1000686c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
10006870:	2b01      	cmp	r3, #1
10006872:	d11d      	bne.n	100068b0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* PLL4 is used as clock source for UART78 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006874:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006878:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000687c:	681b      	ldr	r3, [r3, #0]
1000687e:	3380      	adds	r3, #128	; 0x80
10006880:	4618      	mov	r0, r3
10006882:	f7ff f869 	bl	10005958 <RCCEx_PLL4_Config>
10006886:	4603      	mov	r3, r0
10006888:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
1000688c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006890:	2b00      	cmp	r3, #0
10006892:	d003      	beq.n	1000689c <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        return status;
10006894:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006898:	f001 b840 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000689c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100068a0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100068a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100068a8:	f043 0320 	orr.w	r3, r3, #32
100068ac:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART78 clock*/
    __HAL_RCC_UART78_CONFIG(PeriphClkInit->Uart78ClockSelection);
100068b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100068b4:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
100068b8:	f023 0107 	bic.w	r1, r3, #7
100068bc:	f507 7312 	add.w	r3, r7, #584	; 0x248
100068c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100068c4:	681b      	ldr	r3, [r3, #0]
100068c6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
100068ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100068ce:	430b      	orrs	r3, r1
100068d0:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
  }

  /*---------------------------- USART1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) ==
100068d4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100068d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100068dc:	681b      	ldr	r3, [r3, #0]
100068de:	e9d3 2300 	ldrd	r2, r3, [r3]
100068e2:	f002 0301 	and.w	r3, r2, #1
100068e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
100068ea:	2300      	movs	r3, #0
100068ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
100068f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
100068f4:	460b      	mov	r3, r1
100068f6:	4313      	orrs	r3, r2
100068f8:	d05b      	beq.n	100069b2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
      RCC_PERIPHCLK_USART1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
100068fa:	f507 7312 	add.w	r3, r7, #584	; 0x248
100068fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006902:	681b      	ldr	r3, [r3, #0]
10006904:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
10006908:	2b01      	cmp	r3, #1
1000690a:	d002      	beq.n	10006912 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
1000690c:	2b04      	cmp	r3, #4
1000690e:	d01f      	beq.n	10006950 <HAL_RCCEx_PeriphCLKConfig+0xd48>
10006910:	e03d      	b.n	1000698e <HAL_RCCEx_PeriphCLKConfig+0xd86>
    {
      case RCC_USART1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for USART1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006912:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006916:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000691a:	681b      	ldr	r3, [r3, #0]
1000691c:	3344      	adds	r3, #68	; 0x44
1000691e:	4618      	mov	r0, r3
10006920:	f7fe feb0 	bl	10005684 <RCCEx_PLL3_Config>
10006924:	4603      	mov	r3, r0
10006926:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000692a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000692e:	2b00      	cmp	r3, #0
10006930:	d003      	beq.n	1000693a <HAL_RCCEx_PeriphCLKConfig+0xd32>
        {
          return status;
10006932:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006936:	f000 bff1 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable UART Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000693a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000693e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006942:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006946:	f043 0320 	orr.w	r3, r3, #32
1000694a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000694e:	e01e      	b.n	1000698e <HAL_RCCEx_PeriphCLKConfig+0xd86>

      case RCC_USART1CLKSOURCE_PLL4: /* PLL4 is used as clock source for USART1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006950:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006954:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006958:	681b      	ldr	r3, [r3, #0]
1000695a:	3380      	adds	r3, #128	; 0x80
1000695c:	4618      	mov	r0, r3
1000695e:	f7fe fffb 	bl	10005958 <RCCEx_PLL4_Config>
10006962:	4603      	mov	r3, r0
10006964:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006968:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000696c:	2b00      	cmp	r3, #0
1000696e:	d003      	beq.n	10006978 <HAL_RCCEx_PeriphCLKConfig+0xd70>
        {
          return status;
10006970:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006974:	f000 bfd2 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable USART Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006978:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000697c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006980:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006984:	f043 0320 	orr.w	r3, r3, #32
10006988:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
1000698c:	bf00      	nop
    }

    /* Set the source of USART1 clock*/
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
1000698e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006992:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10006996:	f023 0107 	bic.w	r1, r3, #7
1000699a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000699e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100069a2:	681b      	ldr	r3, [r3, #0]
100069a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
100069a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100069ac:	430b      	orrs	r3, r1
100069ae:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  /*---------------------------- SDMMC12 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC12) ==
100069b2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100069b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100069ba:	681b      	ldr	r3, [r3, #0]
100069bc:	e9d3 2300 	ldrd	r2, r3, [r3]
100069c0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
100069c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
100069c8:	2300      	movs	r3, #0
100069ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
100069ce:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
100069d2:	460b      	mov	r3, r1
100069d4:	4313      	orrs	r3, r2
100069d6:	d05b      	beq.n	10006a90 <HAL_RCCEx_PeriphCLKConfig+0xe88>
      RCC_PERIPHCLK_SDMMC12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
100069d8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100069dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100069e0:	681b      	ldr	r3, [r3, #0]
100069e2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
100069e6:	2b01      	cmp	r3, #1
100069e8:	d002      	beq.n	100069f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
100069ea:	2b02      	cmp	r3, #2
100069ec:	d01f      	beq.n	10006a2e <HAL_RCCEx_PeriphCLKConfig+0xe26>
100069ee:	e03d      	b.n	10006a6c <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      case RCC_SDMMC12CLKSOURCE_PLL3: /* PLL3 is used as clock source for SDMMC12 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100069f0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100069f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100069f8:	681b      	ldr	r3, [r3, #0]
100069fa:	3344      	adds	r3, #68	; 0x44
100069fc:	4618      	mov	r0, r3
100069fe:	f7fe fe41 	bl	10005684 <RCCEx_PLL3_Config>
10006a02:	4603      	mov	r3, r0
10006a04:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006a08:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006a0c:	2b00      	cmp	r3, #0
10006a0e:	d003      	beq.n	10006a18 <HAL_RCCEx_PeriphCLKConfig+0xe10>
        {
          return status;
10006a10:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006a14:	f000 bf82 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006a18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006a1c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006a20:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006a28:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006a2c:	e01e      	b.n	10006a6c <HAL_RCCEx_PeriphCLKConfig+0xe64>

      case RCC_SDMMC12CLKSOURCE_PLL4: /* PLL4 is used as clock source for SDMMC12 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006a2e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006a32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006a36:	681b      	ldr	r3, [r3, #0]
10006a38:	3380      	adds	r3, #128	; 0x80
10006a3a:	4618      	mov	r0, r3
10006a3c:	f7fe ff8c 	bl	10005958 <RCCEx_PLL4_Config>
10006a40:	4603      	mov	r3, r0
10006a42:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006a46:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006a4a:	2b00      	cmp	r3, #0
10006a4c:	d003      	beq.n	10006a56 <HAL_RCCEx_PeriphCLKConfig+0xe4e>
        {
          return status;
10006a4e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006a52:	f000 bf63 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006a56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006a5a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006a5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006a62:	f043 0310 	orr.w	r3, r3, #16
10006a66:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006a6a:	bf00      	nop
    }

    /* Set the source of SDMMC12 clock*/
    __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
10006a6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006a70:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
10006a74:	f023 0107 	bic.w	r1, r3, #7
10006a78:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006a7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006a80:	681b      	ldr	r3, [r3, #0]
10006a82:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
10006a86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006a8a:	430b      	orrs	r3, r1
10006a8c:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
  }

  /*---------------------------- SDMMC3 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC3) ==
10006a90:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006a94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006a98:	681b      	ldr	r3, [r3, #0]
10006a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
10006a9e:	2100      	movs	r1, #0
10006aa0:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
10006aa4:	f003 0301 	and.w	r3, r3, #1
10006aa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
10006aac:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
10006ab0:	460b      	mov	r3, r1
10006ab2:	4313      	orrs	r3, r2
10006ab4:	d05b      	beq.n	10006b6e <HAL_RCCEx_PeriphCLKConfig+0xf66>
      RCC_PERIPHCLK_SDMMC3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC3CLKSOURCE(PeriphClkInit->Sdmmc3ClockSelection));

    switch (PeriphClkInit->Sdmmc3ClockSelection)
10006ab6:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006aba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006abe:	681b      	ldr	r3, [r3, #0]
10006ac0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
10006ac4:	2b01      	cmp	r3, #1
10006ac6:	d002      	beq.n	10006ace <HAL_RCCEx_PeriphCLKConfig+0xec6>
10006ac8:	2b02      	cmp	r3, #2
10006aca:	d01f      	beq.n	10006b0c <HAL_RCCEx_PeriphCLKConfig+0xf04>
10006acc:	e03d      	b.n	10006b4a <HAL_RCCEx_PeriphCLKConfig+0xf42>
    {
      case RCC_SDMMC3CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SDMMC3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006ace:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006ad2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006ad6:	681b      	ldr	r3, [r3, #0]
10006ad8:	3344      	adds	r3, #68	; 0x44
10006ada:	4618      	mov	r0, r3
10006adc:	f7fe fdd2 	bl	10005684 <RCCEx_PLL3_Config>
10006ae0:	4603      	mov	r3, r0
10006ae2:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006ae6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006aea:	2b00      	cmp	r3, #0
10006aec:	d003      	beq.n	10006af6 <HAL_RCCEx_PeriphCLKConfig+0xeee>
        {
          return status;
10006aee:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006af2:	f000 bf13 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006af6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006afa:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006afe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006b06:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006b0a:	e01e      	b.n	10006b4a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_SDMMC3CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SDMMC3 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006b0c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006b10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006b14:	681b      	ldr	r3, [r3, #0]
10006b16:	3380      	adds	r3, #128	; 0x80
10006b18:	4618      	mov	r0, r3
10006b1a:	f7fe ff1d 	bl	10005958 <RCCEx_PLL4_Config>
10006b1e:	4603      	mov	r3, r0
10006b20:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006b24:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006b28:	2b00      	cmp	r3, #0
10006b2a:	d003      	beq.n	10006b34 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
        {
          return status;
10006b2c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006b30:	f000 bef4 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006b34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006b38:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006b3c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006b40:	f043 0310 	orr.w	r3, r3, #16
10006b44:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006b48:	bf00      	nop
    }

    /* Set the source of SDMMC3 clock*/
    __HAL_RCC_SDMMC3_CONFIG(PeriphClkInit->Sdmmc3ClockSelection);
10006b4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006b4e:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
10006b52:	f023 0107 	bic.w	r1, r3, #7
10006b56:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006b5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006b5e:	681b      	ldr	r3, [r3, #0]
10006b60:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
10006b64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006b68:	430b      	orrs	r3, r1
10006b6a:	f8c2 38f8 	str.w	r3, [r2, #2296]	; 0x8f8
  }

  /*---------------------------- ETH configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ETH) ==
10006b6e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006b72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006b76:	681b      	ldr	r3, [r3, #0]
10006b78:	e9d3 2300 	ldrd	r2, r3, [r3]
10006b7c:	2100      	movs	r1, #0
10006b7e:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
10006b82:	f003 0302 	and.w	r3, r3, #2
10006b86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
10006b8a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
10006b8e:	460b      	mov	r3, r1
10006b90:	4313      	orrs	r3, r2
10006b92:	d05b      	beq.n	10006c4c <HAL_RCCEx_PeriphCLKConfig+0x1044>
      RCC_PERIPHCLK_ETH)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETHCLKSOURCE(PeriphClkInit->EthClockSelection));

    switch (PeriphClkInit->EthClockSelection)
10006b94:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006b98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006b9c:	681b      	ldr	r3, [r3, #0]
10006b9e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
10006ba2:	2b00      	cmp	r3, #0
10006ba4:	d002      	beq.n	10006bac <HAL_RCCEx_PeriphCLKConfig+0xfa4>
10006ba6:	2b01      	cmp	r3, #1
10006ba8:	d01f      	beq.n	10006bea <HAL_RCCEx_PeriphCLKConfig+0xfe2>
10006baa:	e03d      	b.n	10006c28 <HAL_RCCEx_PeriphCLKConfig+0x1020>
    {
      case RCC_ETHCLKSOURCE_PLL4:     /* PLL4 is used as clock source for ETH */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006bac:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006bb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006bb4:	681b      	ldr	r3, [r3, #0]
10006bb6:	3380      	adds	r3, #128	; 0x80
10006bb8:	4618      	mov	r0, r3
10006bba:	f7fe fecd 	bl	10005958 <RCCEx_PLL4_Config>
10006bbe:	4603      	mov	r3, r0
10006bc0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006bc4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006bc8:	2b00      	cmp	r3, #0
10006bca:	d003      	beq.n	10006bd4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
        {
          return status;
10006bcc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006bd0:	f000 bea4 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL2 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006bd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006bd8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006bdc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006be0:	f043 0310 	orr.w	r3, r3, #16
10006be4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006be8:	e01e      	b.n	10006c28 <HAL_RCCEx_PeriphCLKConfig+0x1020>

      case RCC_ETHCLKSOURCE_PLL3:     /* PLL3 is used as clock source for ETH */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006bea:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006bee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006bf2:	681b      	ldr	r3, [r3, #0]
10006bf4:	3344      	adds	r3, #68	; 0x44
10006bf6:	4618      	mov	r0, r3
10006bf8:	f7fe fd44 	bl	10005684 <RCCEx_PLL3_Config>
10006bfc:	4603      	mov	r3, r0
10006bfe:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006c02:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006c06:	2b00      	cmp	r3, #0
10006c08:	d003      	beq.n	10006c12 <HAL_RCCEx_PeriphCLKConfig+0x100a>
        {
          return status;
10006c0a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006c0e:	f000 be85 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006c12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006c16:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006c1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006c1e:	f043 0320 	orr.w	r3, r3, #32
10006c22:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006c26:	bf00      	nop
    }

    /* Set the source of ETH clock*/
    __HAL_RCC_ETH_CONFIG(PeriphClkInit->EthClockSelection);
10006c28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006c2c:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
10006c30:	f023 0103 	bic.w	r1, r3, #3
10006c34:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006c38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006c3c:	681b      	ldr	r3, [r3, #0]
10006c3e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
10006c42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006c46:	430b      	orrs	r3, r1
10006c48:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
  }

  /*---------------------------- QSPI configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) ==
10006c4c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006c50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006c54:	681b      	ldr	r3, [r3, #0]
10006c56:	e9d3 2300 	ldrd	r2, r3, [r3]
10006c5a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
10006c5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
10006c62:	2300      	movs	r3, #0
10006c64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
10006c68:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
10006c6c:	460b      	mov	r3, r1
10006c6e:	4313      	orrs	r3, r2
10006c70:	d05b      	beq.n	10006d2a <HAL_RCCEx_PeriphCLKConfig+0x1122>
      RCC_PERIPHCLK_QSPI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    switch (PeriphClkInit->QspiClockSelection)
10006c72:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006c76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006c7a:	681b      	ldr	r3, [r3, #0]
10006c7c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
10006c80:	2b01      	cmp	r3, #1
10006c82:	d002      	beq.n	10006c8a <HAL_RCCEx_PeriphCLKConfig+0x1082>
10006c84:	2b02      	cmp	r3, #2
10006c86:	d01f      	beq.n	10006cc8 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
10006c88:	e03d      	b.n	10006d06 <HAL_RCCEx_PeriphCLKConfig+0x10fe>
    {
      case RCC_QSPICLKSOURCE_PLL3:   /* PLL3 is used as clock source for QSPI */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006c8a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006c8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006c92:	681b      	ldr	r3, [r3, #0]
10006c94:	3344      	adds	r3, #68	; 0x44
10006c96:	4618      	mov	r0, r3
10006c98:	f7fe fcf4 	bl	10005684 <RCCEx_PLL3_Config>
10006c9c:	4603      	mov	r3, r0
10006c9e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006ca2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006ca6:	2b00      	cmp	r3, #0
10006ca8:	d003      	beq.n	10006cb2 <HAL_RCCEx_PeriphCLKConfig+0x10aa>
        {
          return status;
10006caa:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006cae:	f000 be35 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006cb2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006cb6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006cba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006cc2:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006cc6:	e01e      	b.n	10006d06 <HAL_RCCEx_PeriphCLKConfig+0x10fe>

      case RCC_QSPICLKSOURCE_PLL4:   /* PLL4 is used as clock source for QSPI */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006cc8:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006ccc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006cd0:	681b      	ldr	r3, [r3, #0]
10006cd2:	3380      	adds	r3, #128	; 0x80
10006cd4:	4618      	mov	r0, r3
10006cd6:	f7fe fe3f 	bl	10005958 <RCCEx_PLL4_Config>
10006cda:	4603      	mov	r3, r0
10006cdc:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006ce0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006ce4:	2b00      	cmp	r3, #0
10006ce6:	d003      	beq.n	10006cf0 <HAL_RCCEx_PeriphCLKConfig+0x10e8>
        {
          return status;
10006ce8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006cec:	f000 be16 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006cf0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006cf4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006cf8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006cfc:	f043 0310 	orr.w	r3, r3, #16
10006d00:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006d04:	bf00      	nop
    }

    /* Set the source of QSPI clock*/
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
10006d06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006d0a:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
10006d0e:	f023 0103 	bic.w	r1, r3, #3
10006d12:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006d16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006d1a:	681b      	ldr	r3, [r3, #0]
10006d1c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
10006d20:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006d24:	430b      	orrs	r3, r1
10006d26:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
  }

  /*---------------------------- FMC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) ==
10006d2a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006d2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006d32:	681b      	ldr	r3, [r3, #0]
10006d34:	e9d3 2300 	ldrd	r2, r3, [r3]
10006d38:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
10006d3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
10006d40:	2300      	movs	r3, #0
10006d42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
10006d46:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
10006d4a:	460b      	mov	r3, r1
10006d4c:	4313      	orrs	r3, r2
10006d4e:	d05b      	beq.n	10006e08 <HAL_RCCEx_PeriphCLKConfig+0x1200>
      RCC_PERIPHCLK_FMC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
10006d50:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006d54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006d58:	681b      	ldr	r3, [r3, #0]
10006d5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
10006d5e:	2b01      	cmp	r3, #1
10006d60:	d002      	beq.n	10006d68 <HAL_RCCEx_PeriphCLKConfig+0x1160>
10006d62:	2b02      	cmp	r3, #2
10006d64:	d01f      	beq.n	10006da6 <HAL_RCCEx_PeriphCLKConfig+0x119e>
10006d66:	e03d      	b.n	10006de4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
    {
      case RCC_FMCCLKSOURCE_PLL3: /* PLL3 is used as clock source for FMC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006d68:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006d6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006d70:	681b      	ldr	r3, [r3, #0]
10006d72:	3344      	adds	r3, #68	; 0x44
10006d74:	4618      	mov	r0, r3
10006d76:	f7fe fc85 	bl	10005684 <RCCEx_PLL3_Config>
10006d7a:	4603      	mov	r3, r0
10006d7c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006d80:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006d84:	2b00      	cmp	r3, #0
10006d86:	d003      	beq.n	10006d90 <HAL_RCCEx_PeriphCLKConfig+0x1188>
        {
          return status;
10006d88:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006d8c:	f000 bdc6 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006d90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006d94:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006d98:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006da0:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006da4:	e01e      	b.n	10006de4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>

      case RCC_FMCCLKSOURCE_PLL4: /* PLL4 is used as clock source for FMC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006da6:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006daa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006dae:	681b      	ldr	r3, [r3, #0]
10006db0:	3380      	adds	r3, #128	; 0x80
10006db2:	4618      	mov	r0, r3
10006db4:	f7fe fdd0 	bl	10005958 <RCCEx_PLL4_Config>
10006db8:	4603      	mov	r3, r0
10006dba:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006dbe:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006dc2:	2b00      	cmp	r3, #0
10006dc4:	d003      	beq.n	10006dce <HAL_RCCEx_PeriphCLKConfig+0x11c6>
        {
          return status;
10006dc6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006dca:	f000 bda7 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006dce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006dd2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006dd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006dda:	f043 0310 	orr.w	r3, r3, #16
10006dde:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006de2:	bf00      	nop
    }

    /* Set the source of FMC clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
10006de4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006de8:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
10006dec:	f023 0103 	bic.w	r1, r3, #3
10006df0:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006df4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006df8:	681b      	ldr	r3, [r3, #0]
10006dfa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
10006dfe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006e02:	430b      	orrs	r3, r1
10006e04:	f8c2 3904 	str.w	r3, [r2, #2308]	; 0x904
  }

#if defined(FDCAN1)
  /*---------------------------- FDCAN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) ==
10006e08:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006e0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006e10:	681b      	ldr	r3, [r3, #0]
10006e12:	e9d3 2300 	ldrd	r2, r3, [r3]
10006e16:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
10006e1a:	67bb      	str	r3, [r7, #120]	; 0x78
10006e1c:	2300      	movs	r3, #0
10006e1e:	67fb      	str	r3, [r7, #124]	; 0x7c
10006e20:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
10006e24:	460b      	mov	r3, r1
10006e26:	4313      	orrs	r3, r2
10006e28:	d07e      	beq.n	10006f28 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      RCC_PERIPHCLK_FDCAN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
10006e2a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006e2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006e32:	681b      	ldr	r3, [r3, #0]
10006e34:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
10006e38:	2b03      	cmp	r3, #3
10006e3a:	d044      	beq.n	10006ec6 <HAL_RCCEx_PeriphCLKConfig+0x12be>
10006e3c:	2b03      	cmp	r3, #3
10006e3e:	d861      	bhi.n	10006f04 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
10006e40:	2b01      	cmp	r3, #1
10006e42:	d002      	beq.n	10006e4a <HAL_RCCEx_PeriphCLKConfig+0x1242>
10006e44:	2b02      	cmp	r3, #2
10006e46:	d01f      	beq.n	10006e88 <HAL_RCCEx_PeriphCLKConfig+0x1280>
10006e48:	e05c      	b.n	10006f04 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
    {
      case RCC_FDCANCLKSOURCE_PLL3: /* PLL3 is used as clock source for FDCAN */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006e4a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006e4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006e52:	681b      	ldr	r3, [r3, #0]
10006e54:	3344      	adds	r3, #68	; 0x44
10006e56:	4618      	mov	r0, r3
10006e58:	f7fe fc14 	bl	10005684 <RCCEx_PLL3_Config>
10006e5c:	4603      	mov	r3, r0
10006e5e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006e62:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006e66:	2b00      	cmp	r3, #0
10006e68:	d003      	beq.n	10006e72 <HAL_RCCEx_PeriphCLKConfig+0x126a>
        {
          return status;
10006e6a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006e6e:	f000 bd55 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006e72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006e76:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006e7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006e7e:	f043 0320 	orr.w	r3, r3, #32
10006e82:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006e86:	e03d      	b.n	10006f04 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_Q: /* PLL4_Q is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006e88:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006e8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006e90:	681b      	ldr	r3, [r3, #0]
10006e92:	3380      	adds	r3, #128	; 0x80
10006e94:	4618      	mov	r0, r3
10006e96:	f7fe fd5f 	bl	10005958 <RCCEx_PLL4_Config>
10006e9a:	4603      	mov	r3, r0
10006e9c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006ea0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006ea4:	2b00      	cmp	r3, #0
10006ea6:	d003      	beq.n	10006eb0 <HAL_RCCEx_PeriphCLKConfig+0x12a8>
        {
          return status;
10006ea8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006eac:	f000 bd36 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006eb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006eb4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006eb8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006ebc:	f043 0320 	orr.w	r3, r3, #32
10006ec0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006ec4:	e01e      	b.n	10006f04 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_R: /* PLL4_R is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006ec6:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006eca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006ece:	681b      	ldr	r3, [r3, #0]
10006ed0:	3380      	adds	r3, #128	; 0x80
10006ed2:	4618      	mov	r0, r3
10006ed4:	f7fe fd40 	bl	10005958 <RCCEx_PLL4_Config>
10006ed8:	4603      	mov	r3, r0
10006eda:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006ede:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006ee2:	2b00      	cmp	r3, #0
10006ee4:	d003      	beq.n	10006eee <HAL_RCCEx_PeriphCLKConfig+0x12e6>
        {
          return status;
10006ee6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006eea:	f000 bd17 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10006eee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006ef2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006ef6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006efe:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006f02:	bf00      	nop
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
10006f04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006f08:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
10006f0c:	f023 0103 	bic.w	r1, r3, #3
10006f10:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006f14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006f18:	681b      	ldr	r3, [r3, #0]
10006f1a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
10006f1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006f22:	430b      	orrs	r3, r1
10006f24:	f8c2 390c 	str.w	r3, [r2, #2316]	; 0x90c
  }
#endif /*FDCAN1*/

  /*---------------------------- SPDIFRX configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) ==
10006f28:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006f2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006f30:	681b      	ldr	r3, [r3, #0]
10006f32:	e9d3 2300 	ldrd	r2, r3, [r3]
10006f36:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
10006f3a:	673b      	str	r3, [r7, #112]	; 0x70
10006f3c:	2300      	movs	r3, #0
10006f3e:	677b      	str	r3, [r7, #116]	; 0x74
10006f40:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
10006f44:	460b      	mov	r3, r1
10006f46:	4313      	orrs	r3, r2
10006f48:	d05b      	beq.n	10007002 <HAL_RCCEx_PeriphCLKConfig+0x13fa>
      RCC_PERIPHCLK_SPDIFRX)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
10006f4a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006f4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006f52:	681b      	ldr	r3, [r3, #0]
10006f54:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
10006f58:	2b00      	cmp	r3, #0
10006f5a:	d002      	beq.n	10006f62 <HAL_RCCEx_PeriphCLKConfig+0x135a>
10006f5c:	2b01      	cmp	r3, #1
10006f5e:	d01f      	beq.n	10006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1398>
10006f60:	e03d      	b.n	10006fde <HAL_RCCEx_PeriphCLKConfig+0x13d6>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL4: /* PLL4 is used as clock source for SPDIF */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006f62:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006f66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006f6a:	681b      	ldr	r3, [r3, #0]
10006f6c:	3380      	adds	r3, #128	; 0x80
10006f6e:	4618      	mov	r0, r3
10006f70:	f7fe fcf2 	bl	10005958 <RCCEx_PLL4_Config>
10006f74:	4603      	mov	r3, r0
10006f76:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006f7a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006f7e:	2b00      	cmp	r3, #0
10006f80:	d003      	beq.n	10006f8a <HAL_RCCEx_PeriphCLKConfig+0x1382>
        {
          return status;
10006f82:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006f86:	f000 bcc9 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006f8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006f8e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006f92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006f96:	f043 0310 	orr.w	r3, r3, #16
10006f9a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006f9e:	e01e      	b.n	10006fde <HAL_RCCEx_PeriphCLKConfig+0x13d6>

      case RCC_SPDIFRXCLKSOURCE_PLL3: /* PLL3 is used as clock source for SPDIF */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006fa0:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006fa4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006fa8:	681b      	ldr	r3, [r3, #0]
10006faa:	3344      	adds	r3, #68	; 0x44
10006fac:	4618      	mov	r0, r3
10006fae:	f7fe fb69 	bl	10005684 <RCCEx_PLL3_Config>
10006fb2:	4603      	mov	r3, r0
10006fb4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006fb8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006fbc:	2b00      	cmp	r3, #0
10006fbe:	d003      	beq.n	10006fc8 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
        {
          return status;
10006fc0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006fc4:	f000 bcaa 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006fc8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006fcc:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006fd0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006fd4:	f043 0320 	orr.w	r3, r3, #32
10006fd8:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006fdc:	bf00      	nop
    }

    /* Set the source of SPDIF clock*/
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
10006fde:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006fe2:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
10006fe6:	f023 0103 	bic.w	r1, r3, #3
10006fea:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006fee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006ff2:	681b      	ldr	r3, [r3, #0]
10006ff4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
10006ff8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006ffc:	430b      	orrs	r3, r1
10006ffe:	f8c2 3914 	str.w	r3, [r2, #2324]	; 0x914
  }

  /*---------------------------- CEC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) ==
10007002:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007006:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000700a:	681b      	ldr	r3, [r3, #0]
1000700c:	e9d3 2300 	ldrd	r2, r3, [r3]
10007010:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
10007014:	66bb      	str	r3, [r7, #104]	; 0x68
10007016:	2300      	movs	r3, #0
10007018:	66fb      	str	r3, [r7, #108]	; 0x6c
1000701a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
1000701e:	460b      	mov	r3, r1
10007020:	4313      	orrs	r3, r2
10007022:	d011      	beq.n	10007048 <HAL_RCCEx_PeriphCLKConfig+0x1440>
      RCC_PERIPHCLK_CEC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
10007024:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007028:	f8d3 3918 	ldr.w	r3, [r3, #2328]	; 0x918
1000702c:	f023 0103 	bic.w	r1, r3, #3
10007030:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007034:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007038:	681b      	ldr	r3, [r3, #0]
1000703a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
1000703e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007042:	430b      	orrs	r3, r1
10007044:	f8c2 3918 	str.w	r3, [r2, #2328]	; 0x918
  }

  /*---------------------------- USBPHY configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) ==
10007048:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000704c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007050:	681b      	ldr	r3, [r3, #0]
10007052:	e9d3 2300 	ldrd	r2, r3, [r3]
10007056:	f402 7300 	and.w	r3, r2, #512	; 0x200
1000705a:	663b      	str	r3, [r7, #96]	; 0x60
1000705c:	2300      	movs	r3, #0
1000705e:	667b      	str	r3, [r7, #100]	; 0x64
10007060:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
10007064:	460b      	mov	r3, r1
10007066:	4313      	orrs	r3, r2
10007068:	d038      	beq.n	100070dc <HAL_RCCEx_PeriphCLKConfig+0x14d4>
      RCC_PERIPHCLK_USBPHY)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(PeriphClkInit->UsbphyClockSelection));

    if (PeriphClkInit->UsbphyClockSelection == RCC_USBPHYCLKSOURCE_PLL4)
1000706a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000706e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007072:	681b      	ldr	r3, [r3, #0]
10007074:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
10007078:	2b01      	cmp	r3, #1
1000707a:	d11d      	bne.n	100070b8 <HAL_RCCEx_PeriphCLKConfig+0x14b0>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000707c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007080:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007084:	681b      	ldr	r3, [r3, #0]
10007086:	3380      	adds	r3, #128	; 0x80
10007088:	4618      	mov	r0, r3
1000708a:	f7fe fc65 	bl	10005958 <RCCEx_PLL4_Config>
1000708e:	4603      	mov	r3, r0
10007090:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10007094:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007098:	2b00      	cmp	r3, #0
1000709a:	d003      	beq.n	100070a4 <HAL_RCCEx_PeriphCLKConfig+0x149c>
      {
        return status;
1000709c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100070a0:	f000 bc3c 	b.w	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB PHY Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100070a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100070a8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100070ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100070b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100070b4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_USBPHY_CONFIG(PeriphClkInit->UsbphyClockSelection);
100070b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100070bc:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
100070c0:	f023 0103 	bic.w	r1, r3, #3
100070c4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100070c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100070cc:	681b      	ldr	r3, [r3, #0]
100070ce:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
100070d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100070d6:	430b      	orrs	r3, r1
100070d8:	f8c2 391c 	str.w	r3, [r2, #2332]	; 0x91c
  }

  /*---------------------------- USBO configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBO) ==
100070dc:	f507 7312 	add.w	r3, r7, #584	; 0x248
100070e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100070e4:	681b      	ldr	r3, [r3, #0]
100070e6:	e9d3 2300 	ldrd	r2, r3, [r3]
100070ea:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
100070ee:	65bb      	str	r3, [r7, #88]	; 0x58
100070f0:	2300      	movs	r3, #0
100070f2:	65fb      	str	r3, [r7, #92]	; 0x5c
100070f4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
100070f8:	460b      	mov	r3, r1
100070fa:	4313      	orrs	r3, r2
100070fc:	d037      	beq.n	1000716e <HAL_RCCEx_PeriphCLKConfig+0x1566>
      RCC_PERIPHCLK_USBO)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOCLKSOURCE(PeriphClkInit->UsboClockSelection));

    if (PeriphClkInit->UsboClockSelection == RCC_USBOCLKSOURCE_PLL4)
100070fe:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007102:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007106:	681b      	ldr	r3, [r3, #0]
10007108:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
1000710c:	2b00      	cmp	r3, #0
1000710e:	d11c      	bne.n	1000714a <HAL_RCCEx_PeriphCLKConfig+0x1542>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007110:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007114:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007118:	681b      	ldr	r3, [r3, #0]
1000711a:	3380      	adds	r3, #128	; 0x80
1000711c:	4618      	mov	r0, r3
1000711e:	f7fe fc1b 	bl	10005958 <RCCEx_PLL4_Config>
10007122:	4603      	mov	r3, r0
10007124:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10007128:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000712c:	2b00      	cmp	r3, #0
1000712e:	d002      	beq.n	10007136 <HAL_RCCEx_PeriphCLKConfig+0x152e>
      {
        return status;
10007130:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007134:	e3f2      	b.n	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB OTG Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10007136:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000713a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000713e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10007146:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_USBO_CONFIG(PeriphClkInit->UsboClockSelection);
1000714a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000714e:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
10007152:	f023 0110 	bic.w	r1, r3, #16
10007156:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000715a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000715e:	681b      	ldr	r3, [r3, #0]
10007160:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
10007164:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007168:	430b      	orrs	r3, r1
1000716a:	f8c2 391c 	str.w	r3, [r2, #2332]	; 0x91c
  }

  /*---------------------------- RNG1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG1) ==
1000716e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007172:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007176:	681b      	ldr	r3, [r3, #0]
10007178:	e9d3 2300 	ldrd	r2, r3, [r3]
1000717c:	2100      	movs	r1, #0
1000717e:	6539      	str	r1, [r7, #80]	; 0x50
10007180:	f003 0304 	and.w	r3, r3, #4
10007184:	657b      	str	r3, [r7, #84]	; 0x54
10007186:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
1000718a:	460b      	mov	r3, r1
1000718c:	4313      	orrs	r3, r2
1000718e:	d037      	beq.n	10007200 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
      RCC_PERIPHCLK_RNG1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG1CLKSOURCE(PeriphClkInit->Rng1ClockSelection));

    if (PeriphClkInit->Rng1ClockSelection == RCC_RNG1CLKSOURCE_PLL4)
10007190:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007194:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007198:	681b      	ldr	r3, [r3, #0]
1000719a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
1000719e:	2b01      	cmp	r3, #1
100071a0:	d11c      	bne.n	100071dc <HAL_RCCEx_PeriphCLKConfig+0x15d4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100071a2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100071a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100071aa:	681b      	ldr	r3, [r3, #0]
100071ac:	3380      	adds	r3, #128	; 0x80
100071ae:	4618      	mov	r0, r3
100071b0:	f7fe fbd2 	bl	10005958 <RCCEx_PLL4_Config>
100071b4:	4603      	mov	r3, r0
100071b6:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
100071ba:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100071be:	2b00      	cmp	r3, #0
100071c0:	d002      	beq.n	100071c8 <HAL_RCCEx_PeriphCLKConfig+0x15c0>
      {
        return status;
100071c2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100071c6:	e3a9      	b.n	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG1 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100071c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100071cc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100071d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100071d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100071d8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of RNG1 clock*/
    __HAL_RCC_RNG1_CONFIG(PeriphClkInit->Rng1ClockSelection);
100071dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100071e0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
100071e4:	f023 0103 	bic.w	r1, r3, #3
100071e8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100071ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100071f0:	681b      	ldr	r3, [r3, #0]
100071f2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
100071f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100071fa:	430b      	orrs	r3, r1
100071fc:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
  }

  /*---------------------------- RNG2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG2) ==
10007200:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007204:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007208:	681b      	ldr	r3, [r3, #0]
1000720a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000720e:	2100      	movs	r1, #0
10007210:	64b9      	str	r1, [r7, #72]	; 0x48
10007212:	f003 0308 	and.w	r3, r3, #8
10007216:	64fb      	str	r3, [r7, #76]	; 0x4c
10007218:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
1000721c:	460b      	mov	r3, r1
1000721e:	4313      	orrs	r3, r2
10007220:	d037      	beq.n	10007292 <HAL_RCCEx_PeriphCLKConfig+0x168a>
      RCC_PERIPHCLK_RNG2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG2CLKSOURCE(PeriphClkInit->Rng2ClockSelection));

    if (PeriphClkInit->Rng2ClockSelection == RCC_RNG2CLKSOURCE_PLL4)
10007222:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007226:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000722a:	681b      	ldr	r3, [r3, #0]
1000722c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
10007230:	2b01      	cmp	r3, #1
10007232:	d11c      	bne.n	1000726e <HAL_RCCEx_PeriphCLKConfig+0x1666>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007234:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007238:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000723c:	681b      	ldr	r3, [r3, #0]
1000723e:	3380      	adds	r3, #128	; 0x80
10007240:	4618      	mov	r0, r3
10007242:	f7fe fb89 	bl	10005958 <RCCEx_PLL4_Config>
10007246:	4603      	mov	r3, r0
10007248:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
1000724c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007250:	2b00      	cmp	r3, #0
10007252:	d002      	beq.n	1000725a <HAL_RCCEx_PeriphCLKConfig+0x1652>
      {
        return status;
10007254:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007258:	e360      	b.n	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG2 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
1000725a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000725e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007262:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000726a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of RNG2 clock*/
    __HAL_RCC_RNG2_CONFIG(PeriphClkInit->Rng2ClockSelection);
1000726e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007272:	f8d3 3920 	ldr.w	r3, [r3, #2336]	; 0x920
10007276:	f023 0103 	bic.w	r1, r3, #3
1000727a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000727e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007282:	681b      	ldr	r3, [r3, #0]
10007284:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
10007288:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000728c:	430b      	orrs	r3, r1
1000728e:	f8c2 3920 	str.w	r3, [r2, #2336]	; 0x920
  }

  /*---------------------------- STGEN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_STGEN) ==
10007292:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007296:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000729a:	681b      	ldr	r3, [r3, #0]
1000729c:	e9d3 2300 	ldrd	r2, r3, [r3]
100072a0:	2100      	movs	r1, #0
100072a2:	6439      	str	r1, [r7, #64]	; 0x40
100072a4:	f003 0310 	and.w	r3, r3, #16
100072a8:	647b      	str	r3, [r7, #68]	; 0x44
100072aa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
100072ae:	460b      	mov	r3, r1
100072b0:	4313      	orrs	r3, r2
100072b2:	d011      	beq.n	100072d8 <HAL_RCCEx_PeriphCLKConfig+0x16d0>
      RCC_PERIPHCLK_STGEN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_STGENCLKSOURCE(PeriphClkInit->StgenClockSelection));

    __HAL_RCC_STGEN_CONFIG(PeriphClkInit->StgenClockSelection);
100072b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100072b8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
100072bc:	f023 0103 	bic.w	r1, r3, #3
100072c0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100072c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100072c8:	681b      	ldr	r3, [r3, #0]
100072ca:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
100072ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100072d2:	430b      	orrs	r3, r1
100072d4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  }

#if defined(DSI)
  /*---------------------------- DSI configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) ==
100072d8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100072dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100072e0:	681b      	ldr	r3, [r3, #0]
100072e2:	e9d3 2300 	ldrd	r2, r3, [r3]
100072e6:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
100072ea:	63bb      	str	r3, [r7, #56]	; 0x38
100072ec:	2300      	movs	r3, #0
100072ee:	63fb      	str	r3, [r7, #60]	; 0x3c
100072f0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
100072f4:	460b      	mov	r3, r1
100072f6:	4313      	orrs	r3, r2
100072f8:	d037      	beq.n	1000736a <HAL_RCCEx_PeriphCLKConfig+0x1762>
      RCC_PERIPHCLK_DSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    if (PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL4)
100072fa:	f507 7312 	add.w	r3, r7, #584	; 0x248
100072fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007302:	681b      	ldr	r3, [r3, #0]
10007304:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
10007308:	2b01      	cmp	r3, #1
1000730a:	d11c      	bne.n	10007346 <HAL_RCCEx_PeriphCLKConfig+0x173e>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000730c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007310:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007314:	681b      	ldr	r3, [r3, #0]
10007316:	3380      	adds	r3, #128	; 0x80
10007318:	4618      	mov	r0, r3
1000731a:	f7fe fb1d 	bl	10005958 <RCCEx_PLL4_Config>
1000731e:	4603      	mov	r3, r0
10007320:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10007324:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007328:	2b00      	cmp	r3, #0
1000732a:	d002      	beq.n	10007332 <HAL_RCCEx_PeriphCLKConfig+0x172a>
      {
        return status;
1000732c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007330:	e2f4      	b.n	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable DSI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10007332:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007336:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000733a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000733e:	f043 0310 	orr.w	r3, r3, #16
10007342:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
10007346:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000734a:	f8d3 3924 	ldr.w	r3, [r3, #2340]	; 0x924
1000734e:	f023 0101 	bic.w	r1, r3, #1
10007352:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007356:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000735a:	681b      	ldr	r3, [r3, #0]
1000735c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
10007360:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007364:	430b      	orrs	r3, r1
10007366:	f8c2 3924 	str.w	r3, [r2, #2340]	; 0x924
  }
#endif /*DSI*/

  /*---------------------------- ADC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) ==
1000736a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000736e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007372:	681b      	ldr	r3, [r3, #0]
10007374:	e9d3 2300 	ldrd	r2, r3, [r3]
10007378:	f002 0308 	and.w	r3, r2, #8
1000737c:	633b      	str	r3, [r7, #48]	; 0x30
1000737e:	2300      	movs	r3, #0
10007380:	637b      	str	r3, [r7, #52]	; 0x34
10007382:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
10007386:	460b      	mov	r3, r1
10007388:	4313      	orrs	r3, r2
1000738a:	d059      	beq.n	10007440 <HAL_RCCEx_PeriphCLKConfig+0x1838>
      RCC_PERIPHCLK_ADC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
1000738c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007390:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007394:	681b      	ldr	r3, [r3, #0]
10007396:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
1000739a:	2b00      	cmp	r3, #0
1000739c:	d002      	beq.n	100073a4 <HAL_RCCEx_PeriphCLKConfig+0x179c>
1000739e:	2b02      	cmp	r3, #2
100073a0:	d01e      	beq.n	100073e0 <HAL_RCCEx_PeriphCLKConfig+0x17d8>
100073a2:	e03b      	b.n	1000741c <HAL_RCCEx_PeriphCLKConfig+0x1814>
    {
      case RCC_ADCCLKSOURCE_PLL4: /* PLL4 is used as clock source for ADC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100073a4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100073a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100073ac:	681b      	ldr	r3, [r3, #0]
100073ae:	3380      	adds	r3, #128	; 0x80
100073b0:	4618      	mov	r0, r3
100073b2:	f7fe fad1 	bl	10005958 <RCCEx_PLL4_Config>
100073b6:	4603      	mov	r3, r0
100073b8:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100073bc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100073c0:	2b00      	cmp	r3, #0
100073c2:	d002      	beq.n	100073ca <HAL_RCCEx_PeriphCLKConfig+0x17c2>
        {
          return status;
100073c4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100073c8:	e2a8      	b.n	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100073ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100073ce:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100073d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100073d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100073da:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
100073de:	e01d      	b.n	1000741c <HAL_RCCEx_PeriphCLKConfig+0x1814>

      case RCC_ADCCLKSOURCE_PLL3: /* PLL3 is used as clock source for ADC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100073e0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100073e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100073e8:	681b      	ldr	r3, [r3, #0]
100073ea:	3344      	adds	r3, #68	; 0x44
100073ec:	4618      	mov	r0, r3
100073ee:	f7fe f949 	bl	10005684 <RCCEx_PLL3_Config>
100073f2:	4603      	mov	r3, r0
100073f4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100073f8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100073fc:	2b00      	cmp	r3, #0
100073fe:	d002      	beq.n	10007406 <HAL_RCCEx_PeriphCLKConfig+0x17fe>
        {
          return status;
10007400:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007404:	e28a      	b.n	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10007406:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000740a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000740e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007412:	f043 0320 	orr.w	r3, r3, #32
10007416:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000741a:	bf00      	nop
    }

    /* Set the source of ADC clock*/
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
1000741c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007420:	f8d3 3928 	ldr.w	r3, [r3, #2344]	; 0x928
10007424:	f023 0103 	bic.w	r1, r3, #3
10007428:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000742c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007430:	681b      	ldr	r3, [r3, #0]
10007432:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10007436:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000743a:	430b      	orrs	r3, r1
1000743c:	f8c2 3928 	str.w	r3, [r2, #2344]	; 0x928
  }

  /*---------------------------- LPTIM45 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM45) ==
10007440:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007444:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007448:	681b      	ldr	r3, [r3, #0]
1000744a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000744e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
10007452:	62bb      	str	r3, [r7, #40]	; 0x28
10007454:	2300      	movs	r3, #0
10007456:	62fb      	str	r3, [r7, #44]	; 0x2c
10007458:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
1000745c:	460b      	mov	r3, r1
1000745e:	4313      	orrs	r3, r2
10007460:	d058      	beq.n	10007514 <HAL_RCCEx_PeriphCLKConfig+0x190c>
      RCC_PERIPHCLK_LPTIM45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM45CLKSOURCE(PeriphClkInit->Lptim45ClockSelection));

    switch (PeriphClkInit->Lptim45ClockSelection)
10007462:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007466:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000746a:	681b      	ldr	r3, [r3, #0]
1000746c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10007470:	2b01      	cmp	r3, #1
10007472:	d01f      	beq.n	100074b4 <HAL_RCCEx_PeriphCLKConfig+0x18ac>
10007474:	2b02      	cmp	r3, #2
10007476:	d13b      	bne.n	100074f0 <HAL_RCCEx_PeriphCLKConfig+0x18e8>
    {
      case RCC_LPTIM45CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPTIM45 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10007478:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000747c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007480:	681b      	ldr	r3, [r3, #0]
10007482:	3344      	adds	r3, #68	; 0x44
10007484:	4618      	mov	r0, r3
10007486:	f7fe f8fd 	bl	10005684 <RCCEx_PLL3_Config>
1000748a:	4603      	mov	r3, r0
1000748c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007490:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007494:	2b00      	cmp	r3, #0
10007496:	d002      	beq.n	1000749e <HAL_RCCEx_PeriphCLKConfig+0x1896>
        {
          return status;
10007498:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000749c:	e23e      	b.n	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000749e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100074a2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100074a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100074aa:	f043 0320 	orr.w	r3, r3, #32
100074ae:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100074b2:	e01d      	b.n	100074f0 <HAL_RCCEx_PeriphCLKConfig+0x18e8>

      case RCC_LPTIM45CLKSOURCE_PLL4: /* PLL4 is used as clock source for LPTIM45 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100074b4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100074b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100074bc:	681b      	ldr	r3, [r3, #0]
100074be:	3380      	adds	r3, #128	; 0x80
100074c0:	4618      	mov	r0, r3
100074c2:	f7fe fa49 	bl	10005958 <RCCEx_PLL4_Config>
100074c6:	4603      	mov	r3, r0
100074c8:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100074cc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100074d0:	2b00      	cmp	r3, #0
100074d2:	d002      	beq.n	100074da <HAL_RCCEx_PeriphCLKConfig+0x18d2>
        {
          return status;
100074d4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100074d8:	e220      	b.n	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100074da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100074de:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100074e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100074e6:	f043 0310 	orr.w	r3, r3, #16
100074ea:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100074ee:	bf00      	nop
    }

    /* Set the source of LPTIM45 clock*/
    __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
100074f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100074f4:	f8d3 392c 	ldr.w	r3, [r3, #2348]	; 0x92c
100074f8:	f023 0207 	bic.w	r2, r3, #7
100074fc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007500:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007504:	681b      	ldr	r3, [r3, #0]
10007506:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000750a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000750e:	4313      	orrs	r3, r2
10007510:	f8c1 392c 	str.w	r3, [r1, #2348]	; 0x92c
  }

  /*---------------------------- LPTIM23 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM23) ==
10007514:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007518:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000751c:	681b      	ldr	r3, [r3, #0]
1000751e:	e9d3 2300 	ldrd	r2, r3, [r3]
10007522:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
10007526:	623b      	str	r3, [r7, #32]
10007528:	2300      	movs	r3, #0
1000752a:	627b      	str	r3, [r7, #36]	; 0x24
1000752c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
10007530:	460b      	mov	r3, r1
10007532:	4313      	orrs	r3, r2
10007534:	d037      	beq.n	100075a6 <HAL_RCCEx_PeriphCLKConfig+0x199e>
      RCC_PERIPHCLK_LPTIM23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM23CLKSOURCE(PeriphClkInit->Lptim23ClockSelection));

    if (PeriphClkInit->Lptim23ClockSelection == RCC_LPTIM23CLKSOURCE_PLL4)
10007536:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000753a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000753e:	681b      	ldr	r3, [r3, #0]
10007540:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
10007544:	2b01      	cmp	r3, #1
10007546:	d11c      	bne.n	10007582 <HAL_RCCEx_PeriphCLKConfig+0x197a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007548:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000754c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007550:	681b      	ldr	r3, [r3, #0]
10007552:	3380      	adds	r3, #128	; 0x80
10007554:	4618      	mov	r0, r3
10007556:	f7fe f9ff 	bl	10005958 <RCCEx_PLL4_Config>
1000755a:	4603      	mov	r3, r0
1000755c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10007560:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007564:	2b00      	cmp	r3, #0
10007566:	d002      	beq.n	1000756e <HAL_RCCEx_PeriphCLKConfig+0x1966>
      {
        return status;
10007568:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000756c:	e1d6      	b.n	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000756e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007572:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007576:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000757a:	f043 0320 	orr.w	r3, r3, #32
1000757e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of LPTIM23 clock*/
    __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
10007582:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007586:	f8d3 3930 	ldr.w	r3, [r3, #2352]	; 0x930
1000758a:	f023 0207 	bic.w	r2, r3, #7
1000758e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007592:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007596:	681b      	ldr	r3, [r3, #0]
10007598:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
1000759c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100075a0:	4313      	orrs	r3, r2
100075a2:	f8c1 3930 	str.w	r3, [r1, #2352]	; 0x930
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) ==
100075a6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100075aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100075ae:	681b      	ldr	r3, [r3, #0]
100075b0:	e9d3 2300 	ldrd	r2, r3, [r3]
100075b4:	f002 0340 	and.w	r3, r2, #64	; 0x40
100075b8:	61bb      	str	r3, [r7, #24]
100075ba:	2300      	movs	r3, #0
100075bc:	61fb      	str	r3, [r7, #28]
100075be:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
100075c2:	460b      	mov	r3, r1
100075c4:	4313      	orrs	r3, r2
100075c6:	d058      	beq.n	1000767a <HAL_RCCEx_PeriphCLKConfig+0x1a72>
      RCC_PERIPHCLK_LPTIM1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
100075c8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100075cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100075d0:	681b      	ldr	r3, [r3, #0]
100075d2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
100075d6:	2b01      	cmp	r3, #1
100075d8:	d01f      	beq.n	1000761a <HAL_RCCEx_PeriphCLKConfig+0x1a12>
100075da:	2b02      	cmp	r3, #2
100075dc:	d13b      	bne.n	10007656 <HAL_RCCEx_PeriphCLKConfig+0x1a4e>
    {
      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100075de:	f507 7312 	add.w	r3, r7, #584	; 0x248
100075e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100075e6:	681b      	ldr	r3, [r3, #0]
100075e8:	3344      	adds	r3, #68	; 0x44
100075ea:	4618      	mov	r0, r3
100075ec:	f7fe f84a 	bl	10005684 <RCCEx_PLL3_Config>
100075f0:	4603      	mov	r3, r0
100075f2:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100075f6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100075fa:	2b00      	cmp	r3, #0
100075fc:	d002      	beq.n	10007604 <HAL_RCCEx_PeriphCLKConfig+0x19fc>
        {
          return status;
100075fe:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007602:	e18b      	b.n	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10007604:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007608:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000760c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007610:	f043 0320 	orr.w	r3, r3, #32
10007614:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10007618:	e01d      	b.n	10007656 <HAL_RCCEx_PeriphCLKConfig+0x1a4e>

      case RCC_LPTIM1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for LPTIM1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000761a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000761e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007622:	681b      	ldr	r3, [r3, #0]
10007624:	3380      	adds	r3, #128	; 0x80
10007626:	4618      	mov	r0, r3
10007628:	f7fe f996 	bl	10005958 <RCCEx_PLL4_Config>
1000762c:	4603      	mov	r3, r0
1000762e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007632:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007636:	2b00      	cmp	r3, #0
10007638:	d002      	beq.n	10007640 <HAL_RCCEx_PeriphCLKConfig+0x1a38>
        {
          return status;
1000763a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000763e:	e16d      	b.n	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10007640:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007644:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007648:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000764c:	f043 0310 	orr.w	r3, r3, #16
10007650:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10007654:	bf00      	nop
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
10007656:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000765a:	f8d3 3934 	ldr.w	r3, [r3, #2356]	; 0x934
1000765e:	f023 0207 	bic.w	r2, r3, #7
10007662:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007666:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000766a:	681b      	ldr	r3, [r3, #0]
1000766c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
10007670:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10007674:	4313      	orrs	r3, r2
10007676:	f8c1 3934 	str.w	r3, [r1, #2356]	; 0x934
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) ==
1000767a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000767e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007682:	681b      	ldr	r3, [r3, #0]
10007684:	e9d3 2300 	ldrd	r2, r3, [r3]
10007688:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
1000768c:	613b      	str	r3, [r7, #16]
1000768e:	2300      	movs	r3, #0
10007690:	617b      	str	r3, [r7, #20]
10007692:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
10007696:	460b      	mov	r3, r1
10007698:	4313      	orrs	r3, r2
1000769a:	f000 80c6 	beq.w	1000782a <HAL_RCCEx_PeriphCLKConfig+0x1c22>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
1000769e:	4ba2      	ldr	r3, [pc, #648]	; (10007928 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
100076a0:	681b      	ldr	r3, [r3, #0]
100076a2:	4aa1      	ldr	r2, [pc, #644]	; (10007928 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
100076a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
100076a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
100076aa:	f7fa f90d 	bl	100018c8 <HAL_GetTick>
100076ae:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100076b2:	e00a      	b.n	100076ca <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
100076b4:	f7fa f908 	bl	100018c8 <HAL_GetTick>
100076b8:	4602      	mov	r2, r0
100076ba:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
100076be:	1ad3      	subs	r3, r2, r3
100076c0:	2b64      	cmp	r3, #100	; 0x64
100076c2:	d902      	bls.n	100076ca <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
      {
        ret = HAL_TIMEOUT;
100076c4:	2303      	movs	r3, #3
100076c6:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100076ca:	4b97      	ldr	r3, [pc, #604]	; (10007928 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
100076cc:	681b      	ldr	r3, [r3, #0]
100076ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
100076d2:	2b00      	cmp	r3, #0
100076d4:	d0ee      	beq.n	100076b4 <HAL_RCCEx_PeriphCLKConfig+0x1aac>
      }
    }

    if (ret == HAL_OK)
100076d6:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
100076da:	2b00      	cmp	r3, #0
100076dc:	f040 80a2 	bne.w	10007824 <HAL_RCCEx_PeriphCLKConfig+0x1c1c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSRC) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSRC))
100076e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100076e4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
100076e8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100076ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100076f0:	681b      	ldr	r3, [r3, #0]
100076f2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
100076f6:	4053      	eors	r3, r2
100076f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
100076fc:	2b00      	cmp	r3, #0
100076fe:	f000 8086 	beq.w	1000780e <HAL_RCCEx_PeriphCLKConfig+0x1c06>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSRC));
10007702:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007706:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000770a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
1000770e:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
10007712:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007716:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000771a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000771e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
10007722:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        __HAL_RCC_BACKUPRESET_RELEASE();
10007726:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000772a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000772e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007732:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
10007736:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

        /* Set the LSEDrive value */
        __HAL_RCC_LSEDRIVE_CONFIG(tmpreg & RCC_BDCR_LSEDRV);
1000773a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000773e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10007742:	f023 0230 	bic.w	r2, r3, #48	; 0x30
10007746:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
1000774a:	f003 0330 	and.w	r3, r3, #48	; 0x30
1000774e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10007752:	4313      	orrs	r3, r2
10007754:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

        /* RCC_BDCR_LSEON can be enabled for RTC or another IP, re-enable it */
        RCC_OscInitTypeDef RCC_OscInitStructure;
        /* Configure LSE Oscillator*/
        RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_LSE;
10007758:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000775c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
10007760:	2204      	movs	r2, #4
10007762:	601a      	str	r2, [r3, #0]
        RCC_OscInitStructure.LSEState = (tmpreg & LSE_MASK);
10007764:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
10007768:	f003 020b 	and.w	r2, r3, #11
1000776c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007770:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
10007774:	609a      	str	r2, [r3, #8]

        RCC_OscInitStructure.PLL.PLLState = RCC_PLL_NONE;
10007776:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000777a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
1000777e:	2200      	movs	r2, #0
10007780:	625a      	str	r2, [r3, #36]	; 0x24
        RCC_OscInitStructure.PLL2.PLLState = RCC_PLL_NONE;
10007782:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007786:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
1000778a:	2200      	movs	r2, #0
1000778c:	661a      	str	r2, [r3, #96]	; 0x60
        RCC_OscInitStructure.PLL3.PLLState = RCC_PLL_NONE;
1000778e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007792:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
10007796:	2200      	movs	r2, #0
10007798:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        RCC_OscInitStructure.PLL4.PLLState = RCC_PLL_NONE;
1000779c:	f507 7312 	add.w	r3, r7, #584	; 0x248
100077a0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
100077a4:	2200      	movs	r2, #0
100077a6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
        ret = HAL_RCC_OscConfig(&RCC_OscInitStructure);
100077aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
100077ae:	4618      	mov	r0, r3
100077b0:	f7fc f90e 	bl	100039d0 <HAL_RCC_OscConfig>
100077b4:	4603      	mov	r3, r0
100077b6:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
        if (ret != HAL_OK)
100077ba:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
100077be:	2b00      	cmp	r3, #0
100077c0:	d002      	beq.n	100077c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc0>
        {
          return ret;
100077c2:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
100077c6:	e0a9      	b.n	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }

        /* Write the RTCSRC */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
100077c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100077cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100077d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
100077d4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100077d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100077dc:	681b      	ldr	r3, [r3, #0]
100077de:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
100077e2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100077e6:	4313      	orrs	r3, r2
100077e8:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

        /* Fill up Reserved register mask for BDCR
         * All already filled up or what shouldn't be modified must be put on the mask */
        RESERVED_BDCR_MASK = ~(RCC_BDCR_VSWRST | RCC_BDCR_RTCCKEN | RCC_BDCR_RTCSRC |
100077ec:	4b4f      	ldr	r3, [pc, #316]	; (1000792c <HAL_RCCEx_PeriphCLKConfig+0x1d24>)
100077ee:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
                               RCC_BDCR_LSECSSD | RCC_BDCR_LSEDRV | RCC_BDCR_DIGBYP |
                               RCC_BDCR_LSERDY | RCC_BDCR_LSEBYP | RCC_BDCR_LSEON);

        /* Restore the BDCR context: RESERVED registers plus RCC_BDCR_LSECSSON */
        WRITE_REG(RCC->BDCR, (READ_REG(RCC->BDCR) | (tmpreg & RESERVED_BDCR_MASK)));
100077f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100077f6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
100077fa:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
100077fe:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
10007802:	400b      	ands	r3, r1
10007804:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10007808:	4313      	orrs	r3, r2
1000780a:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

      }/* End RTCSRC changed */

      /*Enable RTC clock   */
      __HAL_RCC_RTC_ENABLE();
1000780e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007812:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10007816:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000781a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1000781e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
10007822:	e002      	b.n	1000782a <HAL_RCCEx_PeriphCLKConfig+0x1c22>
    }
    else
    {
      // Enable write access to Backup domain failed
      /* return the error */
      return ret;
10007824:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
10007828:	e078      	b.n	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    }
  }

  /*---------------------------- TIMG1 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG1) ==
1000782a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000782e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007832:	681b      	ldr	r3, [r3, #0]
10007834:	e9d3 2300 	ldrd	r2, r3, [r3]
10007838:	f402 6380 	and.w	r3, r2, #1024	; 0x400
1000783c:	60bb      	str	r3, [r7, #8]
1000783e:	2300      	movs	r3, #0
10007840:	60fb      	str	r3, [r7, #12]
10007842:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
10007846:	460b      	mov	r3, r1
10007848:	4313      	orrs	r3, r2
1000784a:	d02a      	beq.n	100078a2 <HAL_RCCEx_PeriphCLKConfig+0x1c9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection);
1000784c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007850:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
10007854:	f023 0201 	bic.w	r2, r3, #1
10007858:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000785c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007860:	681b      	ldr	r3, [r3, #0]
10007862:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
10007866:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000786a:	4313      	orrs	r3, r2
1000786c:	f8c1 3828 	str.w	r3, [r1, #2088]	; 0x828

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10007870:	f7fa f82a 	bl	100018c8 <HAL_GetTick>
10007874:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
10007878:	e00a      	b.n	10007890 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000787a:	f7fa f825 	bl	100018c8 <HAL_GetTick>
1000787e:	4602      	mov	r2, r0
10007880:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
10007884:	1ad3      	subs	r3, r2, r3
10007886:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000788a:	d901      	bls.n	10007890 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
      {
        return HAL_TIMEOUT;
1000788c:	2303      	movs	r3, #3
1000788e:	e045      	b.n	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
10007890:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007894:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
10007898:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000789c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100078a0:	d1eb      	bne.n	1000787a <HAL_RCCEx_PeriphCLKConfig+0x1c72>
      }
    }
  }

  /*---------------------------- TIMG2 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG2) ==
100078a2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100078a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100078aa:	681b      	ldr	r3, [r3, #0]
100078ac:	e9d3 2300 	ldrd	r2, r3, [r3]
100078b0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
100078b4:	603b      	str	r3, [r7, #0]
100078b6:	2300      	movs	r3, #0
100078b8:	607b      	str	r3, [r7, #4]
100078ba:	e9d7 1200 	ldrd	r1, r2, [r7]
100078be:	460b      	mov	r3, r1
100078c0:	4313      	orrs	r3, r2
100078c2:	d02a      	beq.n	1000791a <HAL_RCCEx_PeriphCLKConfig+0x1d12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection);
100078c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100078c8:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
100078cc:	f023 0201 	bic.w	r2, r3, #1
100078d0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100078d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100078d8:	681b      	ldr	r3, [r3, #0]
100078da:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
100078de:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100078e2:	4313      	orrs	r3, r2
100078e4:	f8c1 382c 	str.w	r3, [r1, #2092]	; 0x82c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100078e8:	f7f9 ffee 	bl	100018c8 <HAL_GetTick>
100078ec:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
100078f0:	e00a      	b.n	10007908 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100078f2:	f7f9 ffe9 	bl	100018c8 <HAL_GetTick>
100078f6:	4602      	mov	r2, r0
100078f8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
100078fc:	1ad3      	subs	r3, r2, r3
100078fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10007902:	d901      	bls.n	10007908 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
      {
        return HAL_TIMEOUT;
10007904:	2303      	movs	r3, #3
10007906:	e009      	b.n	1000791c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
10007908:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000790c:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
10007910:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10007914:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10007918:	d1eb      	bne.n	100078f2 <HAL_RCCEx_PeriphCLKConfig+0x1cea>
      }
    }
  }

  return HAL_OK;
1000791a:	2300      	movs	r3, #0
}
1000791c:	4618      	mov	r0, r3
1000791e:	f507 7712 	add.w	r7, r7, #584	; 0x248
10007922:	46bd      	mov	sp, r7
10007924:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
10007928:	50001000 	.word	0x50001000
1000792c:	7fecfdc0 	.word	0x7fecfdc0

10007930 <HAL_RCCEx_GetPeriphCLKFreq>:
  *          @ref RCCEx_Periph_Clock_Selection
  *          @ref RCCEx_Periph_One_Clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
10007930:	b590      	push	{r4, r7, lr}
10007932:	b08f      	sub	sp, #60	; 0x3c
10007934:	af00      	add	r7, sp, #0
10007936:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t frequency = 0, clksource = 0;
1000793a:	2100      	movs	r1, #0
1000793c:	6379      	str	r1, [r7, #52]	; 0x34
1000793e:	2100      	movs	r1, #0
10007940:	6339      	str	r1, [r7, #48]	; 0x30
  PLL4_ClocksTypeDef pll4_clocks;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk) || IS_RCC_PERIPHONECLOCK(PeriphClk));

  switch (PeriphClk)
10007942:	e9d7 0100 	ldrd	r0, r1, [r7]
10007946:	f5a1 4480 	sub.w	r4, r1, #16384	; 0x4000
1000794a:	ea50 0104 	orrs.w	r1, r0, r4
1000794e:	f000 82cb 	beq.w	10007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
10007952:	e9d7 0100 	ldrd	r0, r1, [r7]
10007956:	2801      	cmp	r0, #1
10007958:	f571 4180 	sbcs.w	r1, r1, #16384	; 0x4000
1000795c:	f081 82af 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007960:	e9d7 0100 	ldrd	r0, r1, [r7]
10007964:	f5a1 5400 	sub.w	r4, r1, #8192	; 0x2000
10007968:	ea50 0104 	orrs.w	r1, r0, r4
1000796c:	f001 80f1 	beq.w	10008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
10007970:	e9d7 0100 	ldrd	r0, r1, [r7]
10007974:	2801      	cmp	r0, #1
10007976:	f571 5100 	sbcs.w	r1, r1, #8192	; 0x2000
1000797a:	f081 82a0 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000797e:	e9d7 0100 	ldrd	r0, r1, [r7]
10007982:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
10007986:	ea50 0104 	orrs.w	r1, r0, r4
1000798a:	f000 8738 	beq.w	100087fe <HAL_RCCEx_GetPeriphCLKFreq+0xece>
1000798e:	e9d7 0100 	ldrd	r0, r1, [r7]
10007992:	2801      	cmp	r0, #1
10007994:	f571 5180 	sbcs.w	r1, r1, #4096	; 0x1000
10007998:	f081 8291 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000799c:	e9d7 0100 	ldrd	r0, r1, [r7]
100079a0:	f5a1 6400 	sub.w	r4, r1, #2048	; 0x800
100079a4:	ea50 0104 	orrs.w	r1, r0, r4
100079a8:	f000 872d 	beq.w	10008806 <HAL_RCCEx_GetPeriphCLKFreq+0xed6>
100079ac:	e9d7 0100 	ldrd	r0, r1, [r7]
100079b0:	2801      	cmp	r0, #1
100079b2:	f571 6100 	sbcs.w	r1, r1, #2048	; 0x800
100079b6:	f081 8282 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100079ba:	e9d7 0100 	ldrd	r0, r1, [r7]
100079be:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
100079c2:	ea50 0104 	orrs.w	r1, r0, r4
100079c6:	f000 875e 	beq.w	10008886 <HAL_RCCEx_GetPeriphCLKFreq+0xf56>
100079ca:	e9d7 0100 	ldrd	r0, r1, [r7]
100079ce:	2801      	cmp	r0, #1
100079d0:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
100079d4:	f081 8273 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100079d8:	e9d7 0100 	ldrd	r0, r1, [r7]
100079dc:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
100079e0:	ea50 0104 	orrs.w	r1, r0, r4
100079e4:	f000 86bf 	beq.w	10008766 <HAL_RCCEx_GetPeriphCLKFreq+0xe36>
100079e8:	e9d7 0100 	ldrd	r0, r1, [r7]
100079ec:	2801      	cmp	r0, #1
100079ee:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
100079f2:	f081 8264 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100079f6:	e9d7 0100 	ldrd	r0, r1, [r7]
100079fa:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
100079fe:	ea50 0104 	orrs.w	r1, r0, r4
10007a02:	f000 845c 	beq.w	100082be <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
10007a06:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a0a:	2801      	cmp	r0, #1
10007a0c:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
10007a10:	f081 8255 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007a14:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a18:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
10007a1c:	ea50 0104 	orrs.w	r1, r0, r4
10007a20:	f000 86bf 	beq.w	100087a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe72>
10007a24:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a28:	2801      	cmp	r0, #1
10007a2a:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
10007a2e:	f081 8246 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007a32:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a36:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
10007a3a:	ea50 0104 	orrs.w	r1, r0, r4
10007a3e:	f000 824e 	beq.w	10007ede <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
10007a42:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a46:	2801      	cmp	r0, #1
10007a48:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
10007a4c:	f081 8237 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007a50:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a54:	f1a1 0420 	sub.w	r4, r1, #32
10007a58:	ea50 0104 	orrs.w	r1, r0, r4
10007a5c:	f000 8722 	beq.w	100088a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf74>
10007a60:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a64:	2801      	cmp	r0, #1
10007a66:	f171 0120 	sbcs.w	r1, r1, #32
10007a6a:	f081 8228 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007a6e:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a72:	f1a1 0410 	sub.w	r4, r1, #16
10007a76:	ea50 0104 	orrs.w	r1, r0, r4
10007a7a:	f000 87c9 	beq.w	10008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
10007a7e:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a82:	2801      	cmp	r0, #1
10007a84:	f171 0110 	sbcs.w	r1, r1, #16
10007a88:	f081 8219 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007a8c:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a90:	f1a1 0408 	sub.w	r4, r1, #8
10007a94:	ea50 0104 	orrs.w	r1, r0, r4
10007a98:	f001 80e8 	beq.w	10008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x133c>
10007a9c:	e9d7 0100 	ldrd	r0, r1, [r7]
10007aa0:	2801      	cmp	r0, #1
10007aa2:	f171 0108 	sbcs.w	r1, r1, #8
10007aa6:	f081 820a 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007aaa:	e9d7 0100 	ldrd	r0, r1, [r7]
10007aae:	1f0c      	subs	r4, r1, #4
10007ab0:	ea50 0104 	orrs.w	r1, r0, r4
10007ab4:	f001 8104 	beq.w	10008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1390>
10007ab8:	e9d7 0100 	ldrd	r0, r1, [r7]
10007abc:	2801      	cmp	r0, #1
10007abe:	f171 0104 	sbcs.w	r1, r1, #4
10007ac2:	f081 81fc 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007ac6:	e9d7 0100 	ldrd	r0, r1, [r7]
10007aca:	1e8c      	subs	r4, r1, #2
10007acc:	ea50 0104 	orrs.w	r1, r0, r4
10007ad0:	f000 87ee 	beq.w	10008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1180>
10007ad4:	e9d7 0100 	ldrd	r0, r1, [r7]
10007ad8:	2801      	cmp	r0, #1
10007ada:	f171 0102 	sbcs.w	r1, r1, #2
10007ade:	f081 81ee 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007ae2:	e9d7 0100 	ldrd	r0, r1, [r7]
10007ae6:	1e4c      	subs	r4, r1, #1
10007ae8:	ea50 0104 	orrs.w	r1, r0, r4
10007aec:	f001 8053 	beq.w	10008b96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
10007af0:	e9d7 0100 	ldrd	r0, r1, [r7]
10007af4:	2801      	cmp	r0, #1
10007af6:	f171 0101 	sbcs.w	r1, r1, #1
10007afa:	f081 81e0 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007afe:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b02:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
10007b06:	4321      	orrs	r1, r4
10007b08:	f001 8104 	beq.w	10008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
10007b0c:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b10:	4cbd      	ldr	r4, [pc, #756]	; (10007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>)
10007b12:	42a0      	cmp	r0, r4
10007b14:	f171 0100 	sbcs.w	r1, r1, #0
10007b18:	f081 81d1 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007b1c:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b20:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
10007b24:	4321      	orrs	r1, r4
10007b26:	f000 85e3 	beq.w	100086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc0>
10007b2a:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b2e:	4cb7      	ldr	r4, [pc, #732]	; (10007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
10007b30:	42a0      	cmp	r0, r4
10007b32:	f171 0100 	sbcs.w	r1, r1, #0
10007b36:	f081 81c2 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007b3a:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b3e:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
10007b42:	4321      	orrs	r1, r4
10007b44:	f000 86e1 	beq.w	1000890a <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
10007b48:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b4c:	4cb0      	ldr	r4, [pc, #704]	; (10007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
10007b4e:	42a0      	cmp	r0, r4
10007b50:	f171 0100 	sbcs.w	r1, r1, #0
10007b54:	f081 81b3 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007b58:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b5c:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
10007b60:	4321      	orrs	r1, r4
10007b62:	f000 84db 	beq.w	1000851c <HAL_RCCEx_GetPeriphCLKFreq+0xbec>
10007b66:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b6a:	4caa      	ldr	r4, [pc, #680]	; (10007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
10007b6c:	42a0      	cmp	r0, r4
10007b6e:	f171 0100 	sbcs.w	r1, r1, #0
10007b72:	f081 81a4 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007b76:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b7a:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
10007b7e:	4321      	orrs	r1, r4
10007b80:	f000 82b0 	beq.w	100080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
10007b84:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b88:	4ca3      	ldr	r4, [pc, #652]	; (10007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
10007b8a:	42a0      	cmp	r0, r4
10007b8c:	f171 0100 	sbcs.w	r1, r1, #0
10007b90:	f081 8195 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007b94:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b98:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
10007b9c:	4321      	orrs	r1, r4
10007b9e:	f000 8481 	beq.w	100084a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb74>
10007ba2:	e9d7 0100 	ldrd	r0, r1, [r7]
10007ba6:	4c9d      	ldr	r4, [pc, #628]	; (10007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
10007ba8:	42a0      	cmp	r0, r4
10007baa:	f171 0100 	sbcs.w	r1, r1, #0
10007bae:	f081 8186 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007bb2:	e9d7 0100 	ldrd	r0, r1, [r7]
10007bb6:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
10007bba:	4321      	orrs	r1, r4
10007bbc:	f000 8384 	beq.w	100082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
10007bc0:	e9d7 0100 	ldrd	r0, r1, [r7]
10007bc4:	4c96      	ldr	r4, [pc, #600]	; (10007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
10007bc6:	42a0      	cmp	r0, r4
10007bc8:	f171 0100 	sbcs.w	r1, r1, #0
10007bcc:	f081 8177 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007bd0:	e9d7 0100 	ldrd	r0, r1, [r7]
10007bd4:	f100 447f 	add.w	r4, r0, #4278190080	; 0xff000000
10007bd8:	4321      	orrs	r1, r4
10007bda:	f000 8250 	beq.w	1000807e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
10007bde:	e9d7 0100 	ldrd	r0, r1, [r7]
10007be2:	4c90      	ldr	r4, [pc, #576]	; (10007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
10007be4:	42a0      	cmp	r0, r4
10007be6:	f171 0100 	sbcs.w	r1, r1, #0
10007bea:	f081 8168 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007bee:	e9d7 0100 	ldrd	r0, r1, [r7]
10007bf2:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
10007bf6:	4321      	orrs	r1, r4
10007bf8:	f000 85b9 	beq.w	1000876e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
10007bfc:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c00:	4c89      	ldr	r4, [pc, #548]	; (10007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
10007c02:	42a0      	cmp	r0, r4
10007c04:	f171 0100 	sbcs.w	r1, r1, #0
10007c08:	f081 8159 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007c0c:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c10:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
10007c14:	4321      	orrs	r1, r4
10007c16:	f000 871a 	beq.w	10008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x111e>
10007c1a:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c1e:	4c83      	ldr	r4, [pc, #524]	; (10007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
10007c20:	42a0      	cmp	r0, r4
10007c22:	f171 0100 	sbcs.w	r1, r1, #0
10007c26:	f081 814a 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007c2a:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c2e:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
10007c32:	4321      	orrs	r1, r4
10007c34:	f000 875e 	beq.w	10008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
10007c38:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c3c:	4c7c      	ldr	r4, [pc, #496]	; (10007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
10007c3e:	42a0      	cmp	r0, r4
10007c40:	f171 0100 	sbcs.w	r1, r1, #0
10007c44:	f081 813b 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007c48:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c4c:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
10007c50:	4321      	orrs	r1, r4
10007c52:	f000 8786 	beq.w	10008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x1232>
10007c56:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c5a:	4c76      	ldr	r4, [pc, #472]	; (10007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
10007c5c:	42a0      	cmp	r0, r4
10007c5e:	f171 0100 	sbcs.w	r1, r1, #0
10007c62:	f081 812c 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007c66:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c6a:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
10007c6e:	4321      	orrs	r1, r4
10007c70:	f000 83dd 	beq.w	1000842e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
10007c74:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c78:	4c6f      	ldr	r4, [pc, #444]	; (10007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
10007c7a:	42a0      	cmp	r0, r4
10007c7c:	f171 0100 	sbcs.w	r1, r1, #0
10007c80:	f081 811d 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007c84:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c88:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
10007c8c:	4321      	orrs	r1, r4
10007c8e:	f000 84f2 	beq.w	10008676 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
10007c92:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c96:	4c69      	ldr	r4, [pc, #420]	; (10007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
10007c98:	42a0      	cmp	r0, r4
10007c9a:	f171 0100 	sbcs.w	r1, r1, #0
10007c9e:	f081 810e 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007ca2:	e9d7 0100 	ldrd	r0, r1, [r7]
10007ca6:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
10007caa:	4321      	orrs	r1, r4
10007cac:	f000 84af 	beq.w	1000860e <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
10007cb0:	e9d7 0100 	ldrd	r0, r1, [r7]
10007cb4:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
10007cb8:	f171 0100 	sbcs.w	r1, r1, #0
10007cbc:	f081 80ff 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007cc0:	e9d7 0100 	ldrd	r0, r1, [r7]
10007cc4:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
10007cc8:	4321      	orrs	r1, r4
10007cca:	f000 82b8 	beq.w	1000823e <HAL_RCCEx_GetPeriphCLKFreq+0x90e>
10007cce:	e9d7 0100 	ldrd	r0, r1, [r7]
10007cd2:	f248 0401 	movw	r4, #32769	; 0x8001
10007cd6:	42a0      	cmp	r0, r4
10007cd8:	f171 0100 	sbcs.w	r1, r1, #0
10007cdc:	f081 80ef 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007ce0:	e9d7 0100 	ldrd	r0, r1, [r7]
10007ce4:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
10007ce8:	4321      	orrs	r1, r4
10007cea:	f000 8458 	beq.w	1000859e <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
10007cee:	e9d7 0100 	ldrd	r0, r1, [r7]
10007cf2:	f244 0401 	movw	r4, #16385	; 0x4001
10007cf6:	42a0      	cmp	r0, r4
10007cf8:	f171 0100 	sbcs.w	r1, r1, #0
10007cfc:	f081 80df 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007d00:	e9d7 0100 	ldrd	r0, r1, [r7]
10007d04:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
10007d08:	4321      	orrs	r1, r4
10007d0a:	f000 80f2 	beq.w	10007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
10007d0e:	e9d7 0100 	ldrd	r0, r1, [r7]
10007d12:	f242 0401 	movw	r4, #8193	; 0x2001
10007d16:	42a0      	cmp	r0, r4
10007d18:	f171 0100 	sbcs.w	r1, r1, #0
10007d1c:	f081 80cf 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007d20:	e9d7 0100 	ldrd	r0, r1, [r7]
10007d24:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
10007d28:	4321      	orrs	r1, r4
10007d2a:	f000 8574 	beq.w	10008816 <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
10007d2e:	e9d7 0100 	ldrd	r0, r1, [r7]
10007d32:	f241 0401 	movw	r4, #4097	; 0x1001
10007d36:	42a0      	cmp	r0, r4
10007d38:	f171 0100 	sbcs.w	r1, r1, #0
10007d3c:	f081 80bf 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007d40:	e9d7 0100 	ldrd	r0, r1, [r7]
10007d44:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
10007d48:	4321      	orrs	r1, r4
10007d4a:	f001 8063 	beq.w	10008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x14e4>
10007d4e:	e9d7 0100 	ldrd	r0, r1, [r7]
10007d52:	f640 0401 	movw	r4, #2049	; 0x801
10007d56:	42a0      	cmp	r0, r4
10007d58:	f171 0100 	sbcs.w	r1, r1, #0
10007d5c:	f081 80af 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007d60:	e9d7 0100 	ldrd	r0, r1, [r7]
10007d64:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
10007d68:	4321      	orrs	r1, r4
10007d6a:	f001 800b 	beq.w	10008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x1454>
10007d6e:	e9d7 0100 	ldrd	r0, r1, [r7]
10007d72:	f240 4401 	movw	r4, #1025	; 0x401
10007d76:	42a0      	cmp	r0, r4
10007d78:	f171 0100 	sbcs.w	r1, r1, #0
10007d7c:	f081 809f 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007d80:	e9d7 0100 	ldrd	r0, r1, [r7]
10007d84:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
10007d88:	4321      	orrs	r1, r4
10007d8a:	f000 8512 	beq.w	100087b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe82>
10007d8e:	e9d7 0100 	ldrd	r0, r1, [r7]
10007d92:	f240 2401 	movw	r4, #513	; 0x201
10007d96:	42a0      	cmp	r0, r4
10007d98:	f171 0100 	sbcs.w	r1, r1, #0
10007d9c:	f081 808f 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007da0:	e9d7 0100 	ldrd	r0, r1, [r7]
10007da4:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
10007da8:	4321      	orrs	r1, r4
10007daa:	f000 82ff 	beq.w	100083ac <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
10007dae:	e9d7 0100 	ldrd	r0, r1, [r7]
10007db2:	f240 1401 	movw	r4, #257	; 0x101
10007db6:	42a0      	cmp	r0, r4
10007db8:	f171 0100 	sbcs.w	r1, r1, #0
10007dbc:	f081 807f 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007dc0:	e9d7 0100 	ldrd	r0, r1, [r7]
10007dc4:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
10007dc8:	4321      	orrs	r1, r4
10007dca:	f000 82b3 	beq.w	10008334 <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
10007dce:	e9d7 0100 	ldrd	r0, r1, [r7]
10007dd2:	2881      	cmp	r0, #129	; 0x81
10007dd4:	f171 0100 	sbcs.w	r1, r1, #0
10007dd8:	f081 8071 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007ddc:	e9d7 0100 	ldrd	r0, r1, [r7]
10007de0:	2821      	cmp	r0, #33	; 0x21
10007de2:	f171 0100 	sbcs.w	r1, r1, #0
10007de6:	d271      	bcs.n	10007ecc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
10007de8:	e9d7 0100 	ldrd	r0, r1, [r7]
10007dec:	4301      	orrs	r1, r0
10007dee:	f001 8066 	beq.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007df2:	e9d7 0100 	ldrd	r0, r1, [r7]
10007df6:	1e42      	subs	r2, r0, #1
10007df8:	f141 33ff 	adc.w	r3, r1, #4294967295
10007dfc:	2a20      	cmp	r2, #32
10007dfe:	f173 0100 	sbcs.w	r1, r3, #0
10007e02:	f081 805c 	bcs.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007e06:	e01b      	b.n	10007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
10007e08:	80000001 	.word	0x80000001
10007e0c:	40000001 	.word	0x40000001
10007e10:	20000001 	.word	0x20000001
10007e14:	10000001 	.word	0x10000001
10007e18:	08000001 	.word	0x08000001
10007e1c:	04000001 	.word	0x04000001
10007e20:	02000001 	.word	0x02000001
10007e24:	01000001 	.word	0x01000001
10007e28:	00400001 	.word	0x00400001
10007e2c:	00200001 	.word	0x00200001
10007e30:	00100001 	.word	0x00100001
10007e34:	00080001 	.word	0x00080001
10007e38:	00040001 	.word	0x00040001
10007e3c:	00020001 	.word	0x00020001
10007e40:	2a1f      	cmp	r2, #31
10007e42:	f201 803c 	bhi.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007e46:	a101      	add	r1, pc, #4	; (adr r1, 10007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
10007e48:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
10007e4c:	1000898d 	.word	0x1000898d
10007e50:	1000815d 	.word	0x1000815d
10007e54:	10008ebf 	.word	0x10008ebf
10007e58:	100081cf 	.word	0x100081cf
10007e5c:	10008ebf 	.word	0x10008ebf
10007e60:	10008ebf 	.word	0x10008ebf
10007e64:	10008ebf 	.word	0x10008ebf
10007e68:	10008c15 	.word	0x10008c15
10007e6c:	10008ebf 	.word	0x10008ebf
10007e70:	10008ebf 	.word	0x10008ebf
10007e74:	10008ebf 	.word	0x10008ebf
10007e78:	10008ebf 	.word	0x10008ebf
10007e7c:	10008ebf 	.word	0x10008ebf
10007e80:	10008ebf 	.word	0x10008ebf
10007e84:	10008ebf 	.word	0x10008ebf
10007e88:	10007f3d 	.word	0x10007f3d
10007e8c:	10008ebf 	.word	0x10008ebf
10007e90:	10008ebf 	.word	0x10008ebf
10007e94:	10008ebf 	.word	0x10008ebf
10007e98:	10008ebf 	.word	0x10008ebf
10007e9c:	10008ebf 	.word	0x10008ebf
10007ea0:	10008ebf 	.word	0x10008ebf
10007ea4:	10008ebf 	.word	0x10008ebf
10007ea8:	10008ebf 	.word	0x10008ebf
10007eac:	10008ebf 	.word	0x10008ebf
10007eb0:	10008ebf 	.word	0x10008ebf
10007eb4:	10008ebf 	.word	0x10008ebf
10007eb8:	10008ebf 	.word	0x10008ebf
10007ebc:	10008ebf 	.word	0x10008ebf
10007ec0:	10008ebf 	.word	0x10008ebf
10007ec4:	10008ebf 	.word	0x10008ebf
10007ec8:	10007f9f 	.word	0x10007f9f
10007ecc:	e9d7 2300 	ldrd	r2, r3, [r7]
10007ed0:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
10007ed4:	430b      	orrs	r3, r1
10007ed6:	f000 8094 	beq.w	10008002 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
10007eda:	f000 bff0 	b.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
  {

    case RCC_PERIPHCLK_DAC:
    {
      frequency = LSI_VALUE;
10007ede:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10007ee2:	637b      	str	r3, [r7, #52]	; 0x34
    }
      break; /*RCC_PERIPHCLK_DAC*/
10007ee4:	f000 bfeb 	b.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_WWDG:
    {
      frequency = HAL_RCC_GetPCLK1Freq();
10007ee8:	f7fd f8c6 	bl	10005078 <HAL_RCC_GetPCLK1Freq>
10007eec:	6378      	str	r0, [r7, #52]	; 0x34
    }
      break; /* RCC_PERIPHCLK_WWDG */
10007eee:	f000 bfe6 	b.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_CEC:
    {
      clksource = __HAL_RCC_GET_CEC_SOURCE();
10007ef2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007ef6:	f8d3 3918 	ldr.w	r3, [r3, #2328]	; 0x918
10007efa:	f003 0303 	and.w	r3, r3, #3
10007efe:	633b      	str	r3, [r7, #48]	; 0x30
10007f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007f02:	2b02      	cmp	r3, #2
10007f04:	d011      	beq.n	10007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
10007f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007f08:	2b02      	cmp	r3, #2
10007f0a:	d812      	bhi.n	10007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
10007f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007f0e:	2b00      	cmp	r3, #0
10007f10:	d003      	beq.n	10007f1a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
10007f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007f14:	2b01      	cmp	r3, #1
10007f16:	d004      	beq.n	10007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
10007f18:	e00b      	b.n	10007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x602>

      switch (clksource)
      {
        case RCC_CECCLKSOURCE_LSE:
          frequency = LSE_VALUE;
10007f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10007f1e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007f20:	e00a      	b.n	10007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x608>

        case RCC_CECCLKSOURCE_LSI:
          frequency = LSI_VALUE;
10007f22:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10007f26:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007f28:	e006      	b.n	10007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x608>

        case RCC_CECCLKSOURCE_CSI122:
          frequency = (CSI_VALUE / 122);
10007f2a:	f248 0312 	movw	r3, #32786	; 0x8012
10007f2e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007f30:	e002      	b.n	10007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x608>

        default:
          frequency = 0;
10007f32:	2300      	movs	r3, #0
10007f34:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007f36:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_CEC */
10007f38:	f000 bfc1 	b.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_I2C12:
    {
      clksource = __HAL_RCC_GET_I2C12_SOURCE();
10007f3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007f40:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	; 0x8c0
10007f44:	f003 0307 	and.w	r3, r3, #7
10007f48:	633b      	str	r3, [r7, #48]	; 0x30
10007f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007f4c:	2b03      	cmp	r3, #3
10007f4e:	f200 87a7 	bhi.w	10008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1570>
10007f52:	a201      	add	r2, pc, #4	; (adr r2, 10007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x628>)
10007f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10007f58:	10007f69 	.word	0x10007f69
10007f5c:	10007f71 	.word	0x10007f71
10007f60:	10007f81 	.word	0x10007f81
10007f64:	10007f95 	.word	0x10007f95

      switch (clksource)
      {
        case RCC_I2C12CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
10007f68:	f7fd f886 	bl	10005078 <HAL_RCC_GetPCLK1Freq>
10007f6c:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10007f6e:	e014      	b.n	10007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x66a>

        case RCC_I2C12CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007f70:	f107 030c 	add.w	r3, r7, #12
10007f74:	4618      	mov	r0, r3
10007f76:	f7fc ff77 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10007f7a:	697b      	ldr	r3, [r7, #20]
10007f7c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007f7e:	e00c      	b.n	10007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x66a>

        case RCC_I2C12CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10007f80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007f84:	699b      	ldr	r3, [r3, #24]
10007f86:	f003 0303 	and.w	r3, r3, #3
10007f8a:	4ab8      	ldr	r2, [pc, #736]	; (1000826c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
10007f8c:	fa22 f303 	lsr.w	r3, r2, r3
10007f90:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007f92:	e002      	b.n	10007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x66a>

        case RCC_I2C12CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10007f94:	4bb6      	ldr	r3, [pc, #728]	; (10008270 <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
10007f96:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007f98:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_I2C12 */
10007f9a:	f000 bf81 	b.w	10008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1570>


    case RCC_PERIPHCLK_I2C35:
    {
      clksource = __HAL_RCC_GET_I2C35_SOURCE();
10007f9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007fa2:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	; 0x8c4
10007fa6:	f003 0307 	and.w	r3, r3, #7
10007faa:	633b      	str	r3, [r7, #48]	; 0x30
10007fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007fae:	2b03      	cmp	r3, #3
10007fb0:	f200 8778 	bhi.w	10008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1574>
10007fb4:	a201      	add	r2, pc, #4	; (adr r2, 10007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
10007fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10007fba:	bf00      	nop
10007fbc:	10007fcd 	.word	0x10007fcd
10007fc0:	10007fd5 	.word	0x10007fd5
10007fc4:	10007fe5 	.word	0x10007fe5
10007fc8:	10007ff9 	.word	0x10007ff9

      switch (clksource)
      {
        case RCC_I2C35CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
10007fcc:	f7fd f854 	bl	10005078 <HAL_RCC_GetPCLK1Freq>
10007fd0:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10007fd2:	e014      	b.n	10007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>

        case RCC_I2C35CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007fd4:	f107 030c 	add.w	r3, r7, #12
10007fd8:	4618      	mov	r0, r3
10007fda:	f7fc ff45 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10007fde:	697b      	ldr	r3, [r7, #20]
10007fe0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007fe2:	e00c      	b.n	10007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>

        case RCC_I2C35CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10007fe4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007fe8:	699b      	ldr	r3, [r3, #24]
10007fea:	f003 0303 	and.w	r3, r3, #3
10007fee:	4a9f      	ldr	r2, [pc, #636]	; (1000826c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
10007ff0:	fa22 f303 	lsr.w	r3, r2, r3
10007ff4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007ff6:	e002      	b.n	10007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>

        case RCC_I2C35CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10007ff8:	4b9d      	ldr	r3, [pc, #628]	; (10008270 <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
10007ffa:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007ffc:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_I2C35 */
10007ffe:	f000 bf51 	b.w	10008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1574>


    case RCC_PERIPHCLK_LPTIM1:
    {
      clksource = __HAL_RCC_GET_LPTIM1_SOURCE();
10008002:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008006:	f8d3 3934 	ldr.w	r3, [r3, #2356]	; 0x934
1000800a:	f003 0307 	and.w	r3, r3, #7
1000800e:	633b      	str	r3, [r7, #48]	; 0x30
10008010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008012:	2b05      	cmp	r3, #5
10008014:	d82e      	bhi.n	10008074 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
10008016:	a201      	add	r2, pc, #4	; (adr r2, 1000801c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
10008018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000801c:	10008035 	.word	0x10008035
10008020:	1000803d 	.word	0x1000803d
10008024:	1000804d 	.word	0x1000804d
10008028:	1000805d 	.word	0x1000805d
1000802c:	10008065 	.word	0x10008065
10008030:	1000806d 	.word	0x1000806d

      switch (clksource)
      {
        case RCC_LPTIM1CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
10008034:	f7fd f820 	bl	10005078 <HAL_RCC_GetPCLK1Freq>
10008038:	6378      	str	r0, [r7, #52]	; 0x34
          break;
1000803a:	e01e      	b.n	1000807a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000803c:	f107 030c 	add.w	r3, r7, #12
10008040:	4618      	mov	r0, r3
10008042:	f7fc ff11 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10008046:	68fb      	ldr	r3, [r7, #12]
10008048:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000804a:	e016      	b.n	1000807a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000804c:	f107 0318 	add.w	r3, r7, #24
10008050:	4618      	mov	r0, r3
10008052:	f7fc fe0f 	bl	10004c74 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008056:	69fb      	ldr	r3, [r7, #28]
10008058:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000805a:	e00e      	b.n	1000807a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_LSE:
          frequency = LSE_VALUE;
1000805c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10008060:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008062:	e00a      	b.n	1000807a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_LSI:
          frequency = LSI_VALUE;
10008064:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10008068:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000806a:	e006      	b.n	1000807a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
1000806c:	f7fd f8bc 	bl	100051e8 <RCC_GetCKPERFreq>
10008070:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008072:	e002      	b.n	1000807a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        default:
          frequency = 0;
10008074:	2300      	movs	r3, #0
10008076:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008078:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_LPTIM1 */
1000807a:	f000 bf20 	b.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SPDIFRX:
    {
      clksource = __HAL_RCC_GET_SPDIFRX_SOURCE();
1000807e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008082:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
10008086:	f003 0303 	and.w	r3, r3, #3
1000808a:	633b      	str	r3, [r7, #48]	; 0x30
1000808c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000808e:	2b02      	cmp	r3, #2
10008090:	d019      	beq.n	100080c6 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
10008092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008094:	2b02      	cmp	r3, #2
10008096:	d820      	bhi.n	100080da <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
10008098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000809a:	2b00      	cmp	r3, #0
1000809c:	d003      	beq.n	100080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
1000809e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100080a0:	2b01      	cmp	r3, #1
100080a2:	d008      	beq.n	100080b6 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
100080a4:	e019      	b.n	100080da <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>

      switch (clksource)
      {
        case RCC_SPDIFRXCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100080a6:	f107 030c 	add.w	r3, r7, #12
100080aa:	4618      	mov	r0, r3
100080ac:	f7fc fedc 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
100080b0:	68fb      	ldr	r3, [r7, #12]
100080b2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100080b4:	e014      	b.n	100080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>

        case RCC_SPDIFRXCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100080b6:	f107 0318 	add.w	r3, r7, #24
100080ba:	4618      	mov	r0, r3
100080bc:	f7fc fdda 	bl	10004c74 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
100080c0:	69fb      	ldr	r3, [r7, #28]
100080c2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100080c4:	e00c      	b.n	100080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>

        case RCC_SPDIFRXCLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100080c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100080ca:	699b      	ldr	r3, [r3, #24]
100080cc:	f003 0303 	and.w	r3, r3, #3
100080d0:	4a66      	ldr	r2, [pc, #408]	; (1000826c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
100080d2:	fa22 f303 	lsr.w	r3, r2, r3
100080d6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100080d8:	e002      	b.n	100080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>

        default:
          frequency = 0;
100080da:	2300      	movs	r3, #0
100080dc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100080de:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_SPDIFRX */
100080e0:	f000 beed 	b.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_SPI23:
    {
      clksource = __HAL_RCC_GET_SPI23_SOURCE();
100080e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100080e8:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	; 0x8dc
100080ec:	f003 0307 	and.w	r3, r3, #7
100080f0:	633b      	str	r3, [r7, #48]	; 0x30
100080f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100080f4:	2b04      	cmp	r3, #4
100080f6:	d82c      	bhi.n	10008152 <HAL_RCCEx_GetPeriphCLKFreq+0x822>
100080f8:	a201      	add	r2, pc, #4	; (adr r2, 10008100 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>)
100080fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100080fe:	bf00      	nop
10008100:	10008115 	.word	0x10008115
10008104:	10008125 	.word	0x10008125
10008108:	10008145 	.word	0x10008145
1000810c:	1000814b 	.word	0x1000814b
10008110:	10008135 	.word	0x10008135

      switch (clksource)
      {
        case RCC_SPI23CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008114:	f107 030c 	add.w	r3, r7, #12
10008118:	4618      	mov	r0, r3
1000811a:	f7fc fea5 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
1000811e:	68fb      	ldr	r3, [r7, #12]
10008120:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008122:	e019      	b.n	10008158 <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        case RCC_SPI23CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008124:	f107 0318 	add.w	r3, r7, #24
10008128:	4618      	mov	r0, r3
1000812a:	f7fc fda3 	bl	10004c74 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
1000812e:	69fb      	ldr	r3, [r7, #28]
10008130:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008132:	e011      	b.n	10008158 <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        case RCC_SPI23CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008134:	f107 0318 	add.w	r3, r7, #24
10008138:	4618      	mov	r0, r3
1000813a:	f7fc fd9b 	bl	10004c74 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
1000813e:	6a3b      	ldr	r3, [r7, #32]
10008140:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008142:	e009      	b.n	10008158 <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        case RCC_SPI23CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10008144:	4b4b      	ldr	r3, [pc, #300]	; (10008274 <HAL_RCCEx_GetPeriphCLKFreq+0x944>)
10008146:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008148:	e006      	b.n	10008158 <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        case RCC_SPI23CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
1000814a:	f7fd f84d 	bl	100051e8 <RCC_GetCKPERFreq>
1000814e:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008150:	e002      	b.n	10008158 <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        default:
          frequency = 0;
10008152:	2300      	movs	r3, #0
10008154:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008156:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_SPI23 */
10008158:	f000 beb1 	b.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_UART24:
    {
      clksource = __HAL_RCC_GET_UART24_SOURCE();
1000815c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008160:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
10008164:	f003 0307 	and.w	r3, r3, #7
10008168:	633b      	str	r3, [r7, #48]	; 0x30
1000816a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000816c:	2b04      	cmp	r3, #4
1000816e:	d829      	bhi.n	100081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
10008170:	a201      	add	r2, pc, #4	; (adr r2, 10008178 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
10008172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008176:	bf00      	nop
10008178:	1000818d 	.word	0x1000818d
1000817c:	10008195 	.word	0x10008195
10008180:	100081a5 	.word	0x100081a5
10008184:	100081b9 	.word	0x100081b9
10008188:	100081bf 	.word	0x100081bf

      switch (clksource)
      {
        case RCC_UART24CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
1000818c:	f7fc ff74 	bl	10005078 <HAL_RCC_GetPCLK1Freq>
10008190:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008192:	e01a      	b.n	100081ca <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        case RCC_UART24CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008194:	f107 030c 	add.w	r3, r7, #12
10008198:	4618      	mov	r0, r3
1000819a:	f7fc fe65 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000819e:	693b      	ldr	r3, [r7, #16]
100081a0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100081a2:	e012      	b.n	100081ca <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        case RCC_UART24CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100081a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100081a8:	699b      	ldr	r3, [r3, #24]
100081aa:	f003 0303 	and.w	r3, r3, #3
100081ae:	4a2f      	ldr	r2, [pc, #188]	; (1000826c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
100081b0:	fa22 f303 	lsr.w	r3, r2, r3
100081b4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100081b6:	e008      	b.n	100081ca <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        case RCC_UART24CLKSOURCE_CSI:
          frequency = CSI_VALUE;
100081b8:	4b2d      	ldr	r3, [pc, #180]	; (10008270 <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
100081ba:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100081bc:	e005      	b.n	100081ca <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        case RCC_UART24CLKSOURCE_HSE:
          frequency = HSE_VALUE;
100081be:	4b2e      	ldr	r3, [pc, #184]	; (10008278 <HAL_RCCEx_GetPeriphCLKFreq+0x948>)
100081c0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100081c2:	e002      	b.n	100081ca <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        default:
          frequency = 0;
100081c4:	2300      	movs	r3, #0
100081c6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100081c8:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_UART24 */
100081ca:	f000 be78 	b.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_UART35:
    {
      clksource = __HAL_RCC_GET_UART35_SOURCE();
100081ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100081d2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
100081d6:	f003 0307 	and.w	r3, r3, #7
100081da:	633b      	str	r3, [r7, #48]	; 0x30
100081dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100081de:	2b04      	cmp	r3, #4
100081e0:	d828      	bhi.n	10008234 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
100081e2:	a201      	add	r2, pc, #4	; (adr r2, 100081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>)
100081e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100081e8:	100081fd 	.word	0x100081fd
100081ec:	10008205 	.word	0x10008205
100081f0:	10008215 	.word	0x10008215
100081f4:	10008229 	.word	0x10008229
100081f8:	1000822f 	.word	0x1000822f

      switch (clksource)
      {
        case RCC_UART35CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
100081fc:	f7fc ff3c 	bl	10005078 <HAL_RCC_GetPCLK1Freq>
10008200:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008202:	e01a      	b.n	1000823a <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        case RCC_UART35CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008204:	f107 030c 	add.w	r3, r7, #12
10008208:	4618      	mov	r0, r3
1000820a:	f7fc fe2d 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000820e:	693b      	ldr	r3, [r7, #16]
10008210:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008212:	e012      	b.n	1000823a <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        case RCC_UART35CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008214:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008218:	699b      	ldr	r3, [r3, #24]
1000821a:	f003 0303 	and.w	r3, r3, #3
1000821e:	4a13      	ldr	r2, [pc, #76]	; (1000826c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
10008220:	fa22 f303 	lsr.w	r3, r2, r3
10008224:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008226:	e008      	b.n	1000823a <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        case RCC_UART35CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008228:	4b11      	ldr	r3, [pc, #68]	; (10008270 <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
1000822a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000822c:	e005      	b.n	1000823a <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        case RCC_UART35CLKSOURCE_HSE:
          frequency = HSE_VALUE;
1000822e:	4b12      	ldr	r3, [pc, #72]	; (10008278 <HAL_RCCEx_GetPeriphCLKFreq+0x948>)
10008230:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008232:	e002      	b.n	1000823a <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        default:
          frequency = 0;
10008234:	2300      	movs	r3, #0
10008236:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008238:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_USART35 */
1000823a:	f000 be40 	b.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_UART78:
    {
      clksource = __HAL_RCC_GET_UART78_SOURCE();
1000823e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008242:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
10008246:	f003 0307 	and.w	r3, r3, #7
1000824a:	633b      	str	r3, [r7, #48]	; 0x30
1000824c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000824e:	2b04      	cmp	r3, #4
10008250:	d830      	bhi.n	100082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
10008252:	a201      	add	r2, pc, #4	; (adr r2, 10008258 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
10008254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008258:	1000827d 	.word	0x1000827d
1000825c:	10008285 	.word	0x10008285
10008260:	10008295 	.word	0x10008295
10008264:	100082a9 	.word	0x100082a9
10008268:	100082af 	.word	0x100082af
1000826c:	03d09000 	.word	0x03d09000
10008270:	003d0900 	.word	0x003d0900
10008274:	00bb8000 	.word	0x00bb8000
10008278:	016e3600 	.word	0x016e3600

      switch (clksource)
      {
        case RCC_UART78CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
1000827c:	f7fc fefc 	bl	10005078 <HAL_RCC_GetPCLK1Freq>
10008280:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008282:	e01a      	b.n	100082ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        case RCC_UART78CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008284:	f107 030c 	add.w	r3, r7, #12
10008288:	4618      	mov	r0, r3
1000828a:	f7fc fded 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000828e:	693b      	ldr	r3, [r7, #16]
10008290:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008292:	e012      	b.n	100082ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        case RCC_UART78CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008294:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008298:	699b      	ldr	r3, [r3, #24]
1000829a:	f003 0303 	and.w	r3, r3, #3
1000829e:	4ab9      	ldr	r2, [pc, #740]	; (10008584 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>)
100082a0:	fa22 f303 	lsr.w	r3, r2, r3
100082a4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100082a6:	e008      	b.n	100082ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        case RCC_UART78CLKSOURCE_CSI:
          frequency = CSI_VALUE;
100082a8:	4bb7      	ldr	r3, [pc, #732]	; (10008588 <HAL_RCCEx_GetPeriphCLKFreq+0xc58>)
100082aa:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100082ac:	e005      	b.n	100082ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        case RCC_UART78CLKSOURCE_HSE:
          frequency = HSE_VALUE;
100082ae:	4bb7      	ldr	r3, [pc, #732]	; (1000858c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
100082b0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100082b2:	e002      	b.n	100082ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        default:
          frequency = 0;
100082b4:	2300      	movs	r3, #0
100082b6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100082b8:	bf00      	nop
      }
    }
      break; /*RCC_PERIPHCLK_UART78 */
100082ba:	f000 be00 	b.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_DFSDM1:
    {
      frequency = HAL_RCC_GetMLHCLKFreq();
100082be:	f7fc ff71 	bl	100051a4 <HAL_RCC_GetMLHCLKFreq>
100082c2:	6378      	str	r0, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_DFSDM1
100082c4:	f000 bdfb 	b.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

#if defined(FDCAN1)
    case RCC_PERIPHCLK_FDCAN:
    {
      clksource = __HAL_RCC_GET_FDCAN_SOURCE();
100082c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100082cc:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
100082d0:	f003 0303 	and.w	r3, r3, #3
100082d4:	633b      	str	r3, [r7, #48]	; 0x30
100082d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100082d8:	2b03      	cmp	r3, #3
100082da:	d826      	bhi.n	1000832a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
100082dc:	a201      	add	r2, pc, #4	; (adr r2, 100082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>)
100082de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100082e2:	bf00      	nop
100082e4:	100082f5 	.word	0x100082f5
100082e8:	100082fb 	.word	0x100082fb
100082ec:	1000830b 	.word	0x1000830b
100082f0:	1000831b 	.word	0x1000831b

      switch (clksource)
      {
        case RCC_FDCANCLKSOURCE_HSE:
          frequency = HSE_VALUE;
100082f4:	4ba5      	ldr	r3, [pc, #660]	; (1000858c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
100082f6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100082f8:	e01a      	b.n	10008330 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>

        case RCC_FDCANCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100082fa:	f107 0318 	add.w	r3, r7, #24
100082fe:	4618      	mov	r0, r3
10008300:	f7fc fcb8 	bl	10004c74 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008304:	69fb      	ldr	r3, [r7, #28]
10008306:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008308:	e012      	b.n	10008330 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>

        case RCC_FDCANCLKSOURCE_PLL4_Q:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000830a:	f107 030c 	add.w	r3, r7, #12
1000830e:	4618      	mov	r0, r3
10008310:	f7fc fdaa 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008314:	693b      	ldr	r3, [r7, #16]
10008316:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008318:	e00a      	b.n	10008330 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>

        case RCC_FDCANCLKSOURCE_PLL4_R:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000831a:	f107 030c 	add.w	r3, r7, #12
1000831e:	4618      	mov	r0, r3
10008320:	f7fc fda2 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10008324:	697b      	ldr	r3, [r7, #20]
10008326:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008328:	e002      	b.n	10008330 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>

        default:
          frequency = 0;
1000832a:	2300      	movs	r3, #0
1000832c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000832e:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_FDCAN
10008330:	f000 bdc5 	b.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
#endif /*FDCAN1*/

    case RCC_PERIPHCLK_SAI1:
    {
      clksource = __HAL_RCC_GET_SAI1_SOURCE();
10008334:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008338:	f8d3 38c8 	ldr.w	r3, [r3, #2248]	; 0x8c8
1000833c:	f003 0307 	and.w	r3, r3, #7
10008340:	633b      	str	r3, [r7, #48]	; 0x30
10008342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008344:	2b04      	cmp	r3, #4
10008346:	d82c      	bhi.n	100083a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
10008348:	a201      	add	r2, pc, #4	; (adr r2, 10008350 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>)
1000834a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000834e:	bf00      	nop
10008350:	10008365 	.word	0x10008365
10008354:	10008375 	.word	0x10008375
10008358:	10008395 	.word	0x10008395
1000835c:	1000839b 	.word	0x1000839b
10008360:	10008385 	.word	0x10008385

      switch (clksource)
      {
        case RCC_SAI1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008364:	f107 030c 	add.w	r3, r7, #12
10008368:	4618      	mov	r0, r3
1000836a:	f7fc fd7d 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000836e:	693b      	ldr	r3, [r7, #16]
10008370:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008372:	e019      	b.n	100083a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        case RCC_SAI1CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008374:	f107 0318 	add.w	r3, r7, #24
10008378:	4618      	mov	r0, r3
1000837a:	f7fc fc7b 	bl	10004c74 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
1000837e:	69fb      	ldr	r3, [r7, #28]
10008380:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008382:	e011      	b.n	100083a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        case RCC_SAI1CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008384:	f107 0318 	add.w	r3, r7, #24
10008388:	4618      	mov	r0, r3
1000838a:	f7fc fc73 	bl	10004c74 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
1000838e:	6a3b      	ldr	r3, [r7, #32]
10008390:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008392:	e009      	b.n	100083a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        case RCC_SAI1CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10008394:	4b7e      	ldr	r3, [pc, #504]	; (10008590 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>)
10008396:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008398:	e006      	b.n	100083a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        case RCC_SAI1CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
1000839a:	f7fc ff25 	bl	100051e8 <RCC_GetCKPERFreq>
1000839e:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100083a0:	e002      	b.n	100083a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        default:
          frequency = 0;
100083a2:	2300      	movs	r3, #0
100083a4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100083a6:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SAI1
100083a8:	f000 bd89 	b.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SAI2:
    {
      clksource = __HAL_RCC_GET_SAI2_SOURCE();
100083ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100083b0:	f8d3 38cc 	ldr.w	r3, [r3, #2252]	; 0x8cc
100083b4:	f003 0307 	and.w	r3, r3, #7
100083b8:	633b      	str	r3, [r7, #48]	; 0x30
100083ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100083bc:	2b05      	cmp	r3, #5
100083be:	d831      	bhi.n	10008424 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
100083c0:	a201      	add	r2, pc, #4	; (adr r2, 100083c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
100083c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100083c6:	bf00      	nop
100083c8:	100083e1 	.word	0x100083e1
100083cc:	100083f1 	.word	0x100083f1
100083d0:	10008411 	.word	0x10008411
100083d4:	10008417 	.word	0x10008417
100083d8:	1000841f 	.word	0x1000841f
100083dc:	10008401 	.word	0x10008401

      switch (clksource)
      {
        case RCC_SAI2CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100083e0:	f107 030c 	add.w	r3, r7, #12
100083e4:	4618      	mov	r0, r3
100083e6:	f7fc fd3f 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
100083ea:	693b      	ldr	r3, [r7, #16]
100083ec:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100083ee:	e01c      	b.n	1000842a <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100083f0:	f107 0318 	add.w	r3, r7, #24
100083f4:	4618      	mov	r0, r3
100083f6:	f7fc fc3d 	bl	10004c74 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
100083fa:	69fb      	ldr	r3, [r7, #28]
100083fc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100083fe:	e014      	b.n	1000842a <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008400:	f107 0318 	add.w	r3, r7, #24
10008404:	4618      	mov	r0, r3
10008406:	f7fc fc35 	bl	10004c74 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
1000840a:	6a3b      	ldr	r3, [r7, #32]
1000840c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000840e:	e00c      	b.n	1000842a <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10008410:	4b5f      	ldr	r3, [pc, #380]	; (10008590 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>)
10008412:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008414:	e009      	b.n	1000842a <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008416:	f7fc fee7 	bl	100051e8 <RCC_GetCKPERFreq>
1000841a:	6378      	str	r0, [r7, #52]	; 0x34
          break;
1000841c:	e005      	b.n	1000842a <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_SPDIF:
          frequency = 0; //SAI2 manage this SPDIF_CKSYMB_VALUE
1000841e:	2300      	movs	r3, #0
10008420:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008422:	e002      	b.n	1000842a <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        default:
          frequency = 0;
10008424:	2300      	movs	r3, #0
10008426:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008428:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SAI2
1000842a:	f000 bd48 	b.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SAI3:
    {
      clksource = __HAL_RCC_GET_SAI3_SOURCE();
1000842e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008432:	f8d3 38d0 	ldr.w	r3, [r3, #2256]	; 0x8d0
10008436:	f003 0307 	and.w	r3, r3, #7
1000843a:	633b      	str	r3, [r7, #48]	; 0x30
1000843c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000843e:	2b04      	cmp	r3, #4
10008440:	d82b      	bhi.n	1000849a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
10008442:	a201      	add	r2, pc, #4	; (adr r2, 10008448 <HAL_RCCEx_GetPeriphCLKFreq+0xb18>)
10008444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008448:	1000845d 	.word	0x1000845d
1000844c:	1000846d 	.word	0x1000846d
10008450:	1000848d 	.word	0x1000848d
10008454:	10008493 	.word	0x10008493
10008458:	1000847d 	.word	0x1000847d

      switch (clksource)
      {
        case RCC_SAI3CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000845c:	f107 030c 	add.w	r3, r7, #12
10008460:	4618      	mov	r0, r3
10008462:	f7fc fd01 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008466:	693b      	ldr	r3, [r7, #16]
10008468:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000846a:	e019      	b.n	100084a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        case RCC_SAI3CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000846c:	f107 0318 	add.w	r3, r7, #24
10008470:	4618      	mov	r0, r3
10008472:	f7fc fbff 	bl	10004c74 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008476:	69fb      	ldr	r3, [r7, #28]
10008478:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000847a:	e011      	b.n	100084a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        case RCC_SAI3CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000847c:	f107 0318 	add.w	r3, r7, #24
10008480:	4618      	mov	r0, r3
10008482:	f7fc fbf7 	bl	10004c74 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10008486:	6a3b      	ldr	r3, [r7, #32]
10008488:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000848a:	e009      	b.n	100084a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        case RCC_SAI3CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
1000848c:	4b40      	ldr	r3, [pc, #256]	; (10008590 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>)
1000848e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008490:	e006      	b.n	100084a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        case RCC_SAI2CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008492:	f7fc fea9 	bl	100051e8 <RCC_GetCKPERFreq>
10008496:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008498:	e002      	b.n	100084a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        default:
          frequency = 0;
1000849a:	2300      	movs	r3, #0
1000849c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000849e:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SAI3
100084a0:	f000 bd0d 	b.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SPI1:
    {
      clksource = __HAL_RCC_GET_SPI1_SOURCE();
100084a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100084a8:	f8d3 38d8 	ldr.w	r3, [r3, #2264]	; 0x8d8
100084ac:	f003 0307 	and.w	r3, r3, #7
100084b0:	633b      	str	r3, [r7, #48]	; 0x30
100084b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100084b4:	2b04      	cmp	r3, #4
100084b6:	d82c      	bhi.n	10008512 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
100084b8:	a201      	add	r2, pc, #4	; (adr r2, 100084c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>)
100084ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100084be:	bf00      	nop
100084c0:	100084d5 	.word	0x100084d5
100084c4:	100084e5 	.word	0x100084e5
100084c8:	10008505 	.word	0x10008505
100084cc:	1000850b 	.word	0x1000850b
100084d0:	100084f5 	.word	0x100084f5

      switch (clksource)
      {
        case RCC_SPI1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100084d4:	f107 030c 	add.w	r3, r7, #12
100084d8:	4618      	mov	r0, r3
100084da:	f7fc fcc5 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
100084de:	693b      	ldr	r3, [r7, #16]
100084e0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100084e2:	e019      	b.n	10008518 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        case RCC_SPI1CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100084e4:	f107 0318 	add.w	r3, r7, #24
100084e8:	4618      	mov	r0, r3
100084ea:	f7fc fbc3 	bl	10004c74 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
100084ee:	69fb      	ldr	r3, [r7, #28]
100084f0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100084f2:	e011      	b.n	10008518 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        case RCC_SPI1CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100084f4:	f107 0318 	add.w	r3, r7, #24
100084f8:	4618      	mov	r0, r3
100084fa:	f7fc fbbb 	bl	10004c74 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
100084fe:	6a3b      	ldr	r3, [r7, #32]
10008500:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008502:	e009      	b.n	10008518 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        case RCC_SPI1CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10008504:	4b22      	ldr	r3, [pc, #136]	; (10008590 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>)
10008506:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008508:	e006      	b.n	10008518 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        case RCC_SPI1CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
1000850a:	f7fc fe6d 	bl	100051e8 <RCC_GetCKPERFreq>
1000850e:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008510:	e002      	b.n	10008518 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        default:
          frequency = 0;
10008512:	2300      	movs	r3, #0
10008514:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008516:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SPI1
10008518:	f000 bcd1 	b.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SPI45:
    {
      clksource = __HAL_RCC_GET_SPI45_SOURCE();
1000851c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008520:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
10008524:	f003 0307 	and.w	r3, r3, #7
10008528:	633b      	str	r3, [r7, #48]	; 0x30
1000852a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000852c:	2b04      	cmp	r3, #4
1000852e:	d831      	bhi.n	10008594 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
10008530:	a201      	add	r2, pc, #4	; (adr r2, 10008538 <HAL_RCCEx_GetPeriphCLKFreq+0xc08>)
10008532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008536:	bf00      	nop
10008538:	1000854d 	.word	0x1000854d
1000853c:	10008555 	.word	0x10008555
10008540:	10008565 	.word	0x10008565
10008544:	10008579 	.word	0x10008579
10008548:	1000857f 	.word	0x1000857f

      switch (clksource)
      {
        case RCC_SPI45CLKSOURCE_PCLK2:
          frequency = HAL_RCC_GetPCLK2Freq();
1000854c:	f7fc fdaf 	bl	100050ae <HAL_RCC_GetPCLK2Freq>
10008550:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008552:	e022      	b.n	1000859a <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>

        case RCC_SPI45CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008554:	f107 030c 	add.w	r3, r7, #12
10008558:	4618      	mov	r0, r3
1000855a:	f7fc fc85 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000855e:	693b      	ldr	r3, [r7, #16]
10008560:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008562:	e01a      	b.n	1000859a <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>

        case RCC_SPI45CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008564:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008568:	699b      	ldr	r3, [r3, #24]
1000856a:	f003 0303 	and.w	r3, r3, #3
1000856e:	4a05      	ldr	r2, [pc, #20]	; (10008584 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>)
10008570:	fa22 f303 	lsr.w	r3, r2, r3
10008574:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008576:	e010      	b.n	1000859a <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>

        case RCC_SPI45CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008578:	4b03      	ldr	r3, [pc, #12]	; (10008588 <HAL_RCCEx_GetPeriphCLKFreq+0xc58>)
1000857a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000857c:	e00d      	b.n	1000859a <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>

        case RCC_SPI45CLKSOURCE_HSE:
          frequency = HSE_VALUE;
1000857e:	4b03      	ldr	r3, [pc, #12]	; (1000858c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
10008580:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008582:	e00a      	b.n	1000859a <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
10008584:	03d09000 	.word	0x03d09000
10008588:	003d0900 	.word	0x003d0900
1000858c:	016e3600 	.word	0x016e3600
10008590:	00bb8000 	.word	0x00bb8000

        default:
          frequency = 0;
10008594:	2300      	movs	r3, #0
10008596:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008598:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_SPI45 */
1000859a:	f000 bc90 	b.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_USART6:
    {
      clksource = __HAL_RCC_GET_USART6_SOURCE();
1000859e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100085a2:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
100085a6:	f003 0307 	and.w	r3, r3, #7
100085aa:	633b      	str	r3, [r7, #48]	; 0x30
100085ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100085ae:	2b04      	cmp	r3, #4
100085b0:	d828      	bhi.n	10008604 <HAL_RCCEx_GetPeriphCLKFreq+0xcd4>
100085b2:	a201      	add	r2, pc, #4	; (adr r2, 100085b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc88>)
100085b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100085b8:	100085cd 	.word	0x100085cd
100085bc:	100085d5 	.word	0x100085d5
100085c0:	100085e5 	.word	0x100085e5
100085c4:	100085f9 	.word	0x100085f9
100085c8:	100085ff 	.word	0x100085ff

      switch (clksource)
      {
        case RCC_USART6CLKSOURCE_PCLK2:
          frequency = HAL_RCC_GetPCLK2Freq();
100085cc:	f7fc fd6f 	bl	100050ae <HAL_RCC_GetPCLK2Freq>
100085d0:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100085d2:	e01a      	b.n	1000860a <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        case RCC_USART6CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100085d4:	f107 030c 	add.w	r3, r7, #12
100085d8:	4618      	mov	r0, r3
100085da:	f7fc fc45 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
100085de:	693b      	ldr	r3, [r7, #16]
100085e0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100085e2:	e012      	b.n	1000860a <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        case RCC_USART6CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100085e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100085e8:	699b      	ldr	r3, [r3, #24]
100085ea:	f003 0303 	and.w	r3, r3, #3
100085ee:	4aa8      	ldr	r2, [pc, #672]	; (10008890 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
100085f0:	fa22 f303 	lsr.w	r3, r2, r3
100085f4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100085f6:	e008      	b.n	1000860a <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        case RCC_USART6CLKSOURCE_CSI:
          frequency = CSI_VALUE;
100085f8:	4ba6      	ldr	r3, [pc, #664]	; (10008894 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>)
100085fa:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100085fc:	e005      	b.n	1000860a <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        case RCC_USART6CLKSOURCE_HSE:
          frequency = HSE_VALUE;
100085fe:	4ba6      	ldr	r3, [pc, #664]	; (10008898 <HAL_RCCEx_GetPeriphCLKFreq+0xf68>)
10008600:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008602:	e002      	b.n	1000860a <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        default:
          frequency = 0;
10008604:	2300      	movs	r3, #0
10008606:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008608:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_USART6
1000860a:	f000 bc58 	b.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_LPTIM23:
    {
      clksource = __HAL_RCC_GET_LPTIM23_SOURCE();
1000860e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008612:	f8d3 3930 	ldr.w	r3, [r3, #2352]	; 0x930
10008616:	f003 0307 	and.w	r3, r3, #7
1000861a:	633b      	str	r3, [r7, #48]	; 0x30
1000861c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000861e:	2b04      	cmp	r3, #4
10008620:	d824      	bhi.n	1000866c <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>
10008622:	a201      	add	r2, pc, #4	; (adr r2, 10008628 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>)
10008624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008628:	1000863d 	.word	0x1000863d
1000862c:	10008645 	.word	0x10008645
10008630:	10008655 	.word	0x10008655
10008634:	1000865d 	.word	0x1000865d
10008638:	10008665 	.word	0x10008665

      switch (clksource)
      {
        case RCC_LPTIM23CLKSOURCE_PCLK3:
          frequency = HAL_RCC_GetPCLK3Freq();
1000863c:	f7fc fd52 	bl	100050e4 <HAL_RCC_GetPCLK3Freq>
10008640:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008642:	e016      	b.n	10008672 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        case RCC_LPTIM23CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008644:	f107 030c 	add.w	r3, r7, #12
10008648:	4618      	mov	r0, r3
1000864a:	f7fc fc0d 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000864e:	693b      	ldr	r3, [r7, #16]
10008650:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008652:	e00e      	b.n	10008672 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        case RCC_LPTIM23CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008654:	f7fc fdc8 	bl	100051e8 <RCC_GetCKPERFreq>
10008658:	6378      	str	r0, [r7, #52]	; 0x34
          break;
1000865a:	e00a      	b.n	10008672 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        case RCC_LPTIM23CLKSOURCE_LSE:
          frequency = LSE_VALUE;
1000865c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10008660:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008662:	e006      	b.n	10008672 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        case RCC_LPTIM23CLKSOURCE_LSI:
          frequency = LSI_VALUE;
10008664:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10008668:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000866a:	e002      	b.n	10008672 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        default:
          frequency = 0;
1000866c:	2300      	movs	r3, #0
1000866e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008670:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_LPTIM23 */
10008672:	f000 bc24 	b.w	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_LPTIM45:
    {
      clksource = __HAL_RCC_GET_LPTIM45_SOURCE();
10008676:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000867a:	f8d3 392c 	ldr.w	r3, [r3, #2348]	; 0x92c
1000867e:	f003 0307 	and.w	r3, r3, #7
10008682:	633b      	str	r3, [r7, #48]	; 0x30
10008684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008686:	2b05      	cmp	r3, #5
10008688:	d82e      	bhi.n	100086e8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>
1000868a:	a201      	add	r2, pc, #4	; (adr r2, 10008690 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
1000868c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008690:	100086a9 	.word	0x100086a9
10008694:	100086b1 	.word	0x100086b1
10008698:	100086c1 	.word	0x100086c1
1000869c:	100086d1 	.word	0x100086d1
100086a0:	100086d9 	.word	0x100086d9
100086a4:	100086e1 	.word	0x100086e1

      switch (clksource)
      {
        case RCC_LPTIM45CLKSOURCE_PCLK3:
          frequency = HAL_RCC_GetPCLK3Freq();
100086a8:	f7fc fd1c 	bl	100050e4 <HAL_RCC_GetPCLK3Freq>
100086ac:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100086ae:	e01e      	b.n	100086ee <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100086b0:	f107 030c 	add.w	r3, r7, #12
100086b4:	4618      	mov	r0, r3
100086b6:	f7fc fbd7 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
100086ba:	68fb      	ldr	r3, [r7, #12]
100086bc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100086be:	e016      	b.n	100086ee <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100086c0:	f107 0318 	add.w	r3, r7, #24
100086c4:	4618      	mov	r0, r3
100086c6:	f7fc fad5 	bl	10004c74 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
100086ca:	69fb      	ldr	r3, [r7, #28]
100086cc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100086ce:	e00e      	b.n	100086ee <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_LSE:
          frequency = LSE_VALUE;
100086d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
100086d4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100086d6:	e00a      	b.n	100086ee <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_LSI:
          frequency = LSI_VALUE;
100086d8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
100086dc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100086de:	e006      	b.n	100086ee <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
100086e0:	f7fc fd82 	bl	100051e8 <RCC_GetCKPERFreq>
100086e4:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100086e6:	e002      	b.n	100086ee <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        default:
          frequency = 0;
100086e8:	2300      	movs	r3, #0
100086ea:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100086ec:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_LPTIM45 */
100086ee:	e3e6      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SAI4:
    {
      clksource = __HAL_RCC_GET_SAI4_SOURCE();
100086f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100086f4:	f8d3 38d4 	ldr.w	r3, [r3, #2260]	; 0x8d4
100086f8:	f003 0307 	and.w	r3, r3, #7
100086fc:	633b      	str	r3, [r7, #48]	; 0x30
100086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008700:	2b04      	cmp	r3, #4
10008702:	d82c      	bhi.n	1000875e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
10008704:	a201      	add	r2, pc, #4	; (adr r2, 1000870c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>)
10008706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000870a:	bf00      	nop
1000870c:	10008721 	.word	0x10008721
10008710:	10008731 	.word	0x10008731
10008714:	10008751 	.word	0x10008751
10008718:	10008757 	.word	0x10008757
1000871c:	10008741 	.word	0x10008741

      switch (clksource)
      {
        case RCC_SAI4CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008720:	f107 030c 	add.w	r3, r7, #12
10008724:	4618      	mov	r0, r3
10008726:	f7fc fb9f 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000872a:	693b      	ldr	r3, [r7, #16]
1000872c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000872e:	e019      	b.n	10008764 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        case RCC_SAI4CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008730:	f107 0318 	add.w	r3, r7, #24
10008734:	4618      	mov	r0, r3
10008736:	f7fc fa9d 	bl	10004c74 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
1000873a:	69fb      	ldr	r3, [r7, #28]
1000873c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000873e:	e011      	b.n	10008764 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        case RCC_SAI4CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008740:	f107 0318 	add.w	r3, r7, #24
10008744:	4618      	mov	r0, r3
10008746:	f7fc fa95 	bl	10004c74 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
1000874a:	6a3b      	ldr	r3, [r7, #32]
1000874c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000874e:	e009      	b.n	10008764 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        case RCC_SAI4CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10008750:	4b52      	ldr	r3, [pc, #328]	; (1000889c <HAL_RCCEx_GetPeriphCLKFreq+0xf6c>)
10008752:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008754:	e006      	b.n	10008764 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        case RCC_SAI4CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008756:	f7fc fd47 	bl	100051e8 <RCC_GetCKPERFreq>
1000875a:	6378      	str	r0, [r7, #52]	; 0x34
          break;
1000875c:	e002      	b.n	10008764 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        default:
          frequency = 0;
1000875e:	2300      	movs	r3, #0
10008760:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008762:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SAI4
10008764:	e3ab      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_TEMP:
    {
      frequency = LSE_VALUE;
10008766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
1000876a:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_TEMP
1000876c:	e3a7      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


#if defined(DSI)
    case RCC_PERIPHCLK_DSI:
    {
      clksource = __HAL_RCC_GET_DSI_SOURCE();
1000876e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008772:	f8d3 3924 	ldr.w	r3, [r3, #2340]	; 0x924
10008776:	f003 0301 	and.w	r3, r3, #1
1000877a:	633b      	str	r3, [r7, #48]	; 0x30
1000877c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000877e:	2b00      	cmp	r3, #0
10008780:	d003      	beq.n	1000878a <HAL_RCCEx_GetPeriphCLKFreq+0xe5a>
10008782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008784:	2b01      	cmp	r3, #1
10008786:	d003      	beq.n	10008790 <HAL_RCCEx_GetPeriphCLKFreq+0xe60>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
          frequency = pll4_clocks.PLL4_P_Frequency;
          break;
      }
    }
    break;//RCC_PERIPHCLK_DSI
10008788:	e399      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
          frequency = 0;
1000878a:	2300      	movs	r3, #0
1000878c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000878e:	e007      	b.n	100087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008790:	f107 030c 	add.w	r3, r7, #12
10008794:	4618      	mov	r0, r3
10008796:	f7fc fb67 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
1000879a:	68fb      	ldr	r3, [r7, #12]
1000879c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000879e:	bf00      	nop
    break;//RCC_PERIPHCLK_DSI
100087a0:	e38d      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
#endif /*DSI*/

    case RCC_PERIPHCLK_LTDC:
    {
      HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100087a2:	f107 030c 	add.w	r3, r7, #12
100087a6:	4618      	mov	r0, r3
100087a8:	f7fc fb5e 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
      frequency = pll4_clocks.PLL4_Q_Frequency;
100087ac:	693b      	ldr	r3, [r7, #16]
100087ae:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_LTDC
100087b0:	e385      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_USBPHY:
    {
      clksource = __HAL_RCC_GET_USBPHY_SOURCE();
100087b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100087b6:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
100087ba:	f003 0303 	and.w	r3, r3, #3
100087be:	633b      	str	r3, [r7, #48]	; 0x30
100087c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100087c2:	2b02      	cmp	r3, #2
100087c4:	d014      	beq.n	100087f0 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
100087c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100087c8:	2b02      	cmp	r3, #2
100087ca:	d814      	bhi.n	100087f6 <HAL_RCCEx_GetPeriphCLKFreq+0xec6>
100087cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100087ce:	2b00      	cmp	r3, #0
100087d0:	d003      	beq.n	100087da <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
100087d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100087d4:	2b01      	cmp	r3, #1
100087d6:	d003      	beq.n	100087e0 <HAL_RCCEx_GetPeriphCLKFreq+0xeb0>
100087d8:	e00d      	b.n	100087f6 <HAL_RCCEx_GetPeriphCLKFreq+0xec6>

      switch (clksource)
      {
        case RCC_USBPHYCLKSOURCE_HSE:
          frequency = HSE_VALUE;
100087da:	4b2f      	ldr	r3, [pc, #188]	; (10008898 <HAL_RCCEx_GetPeriphCLKFreq+0xf68>)
100087dc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100087de:	e00d      	b.n	100087fc <HAL_RCCEx_GetPeriphCLKFreq+0xecc>

        case RCC_USBPHYCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100087e0:	f107 030c 	add.w	r3, r7, #12
100087e4:	4618      	mov	r0, r3
100087e6:	f7fc fb3f 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
100087ea:	697b      	ldr	r3, [r7, #20]
100087ec:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100087ee:	e005      	b.n	100087fc <HAL_RCCEx_GetPeriphCLKFreq+0xecc>

        case RCC_USBPHYCLKSOURCE_HSE2:
          frequency = (HSE_VALUE / 2UL);
100087f0:	4b2b      	ldr	r3, [pc, #172]	; (100088a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>)
100087f2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100087f4:	e002      	b.n	100087fc <HAL_RCCEx_GetPeriphCLKFreq+0xecc>

        default:
          frequency = 0;
100087f6:	2300      	movs	r3, #0
100087f8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100087fa:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_USBPHY
100087fc:	e35f      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_IWDG2:
    {
      frequency = LSI_VALUE;
100087fe:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10008802:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_IWDG2
10008804:	e35b      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_DDRPHYC:
    {
      HAL_RCC_GetPLL2ClockFreq(&pll2_clocks);
10008806:	f107 0324 	add.w	r3, r7, #36	; 0x24
1000880a:	4618      	mov	r0, r3
1000880c:	f7fc f946 	bl	10004a9c <HAL_RCC_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
10008810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10008812:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_DDRPHYC
10008814:	e353      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_RTC:
    {
      clksource = __HAL_RCC_GET_RTC_SOURCE();
10008816:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000881a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000881e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
10008822:	633b      	str	r3, [r7, #48]	; 0x30
10008824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008826:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
1000882a:	d020      	beq.n	1000886e <HAL_RCCEx_GetPeriphCLKFreq+0xf3e>
1000882c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000882e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
10008832:	f200 8339 	bhi.w	10008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1578>
10008836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008838:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
1000883c:	d013      	beq.n	10008866 <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
1000883e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008840:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
10008844:	f200 8330 	bhi.w	10008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1578>
10008848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000884a:	2b00      	cmp	r3, #0
1000884c:	d004      	beq.n	10008858 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
1000884e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
10008854:	d003      	beq.n	1000885e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        case RCC_RTCCLKSOURCE_HSE_DIV:
          frequency = (HSE_VALUE / __HAL_RCC_GET_RTC_HSEDIV());
          break;
      }
    }
    break;//RCC_PERIPHCLK_RTC
10008856:	e327      	b.n	10008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1578>
          frequency = 0;
10008858:	2300      	movs	r3, #0
1000885a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000885c:	e012      	b.n	10008884 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>
          frequency = LSE_VALUE;
1000885e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10008862:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008864:	e00e      	b.n	10008884 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>
          frequency = LSI_VALUE;
10008866:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
1000886a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000886c:	e00a      	b.n	10008884 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>
          frequency = (HSE_VALUE / __HAL_RCC_GET_RTC_HSEDIV());
1000886e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10008874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10008878:	3301      	adds	r3, #1
1000887a:	4a07      	ldr	r2, [pc, #28]	; (10008898 <HAL_RCCEx_GetPeriphCLKFreq+0xf68>)
1000887c:	fbb2 f3f3 	udiv	r3, r2, r3
10008880:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008882:	bf00      	nop
    break;//RCC_PERIPHCLK_RTC
10008884:	e310      	b.n	10008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1578>


    case RCC_PERIPHCLK_IWDG1:
    {
      frequency = LSI_VALUE;
10008886:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
1000888a:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_IWDG1
1000888c:	e317      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000888e:	bf00      	nop
10008890:	03d09000 	.word	0x03d09000
10008894:	003d0900 	.word	0x003d0900
10008898:	016e3600 	.word	0x016e3600
1000889c:	00bb8000 	.word	0x00bb8000
100088a0:	00b71b00 	.word	0x00b71b00


    case RCC_PERIPHCLK_I2C46:
    {
      clksource = __HAL_RCC_GET_I2C46_SOURCE();
100088a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100088a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
100088ac:	f003 0307 	and.w	r3, r3, #7
100088b0:	633b      	str	r3, [r7, #48]	; 0x30
100088b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100088b4:	2b03      	cmp	r3, #3
100088b6:	d824      	bhi.n	10008902 <HAL_RCCEx_GetPeriphCLKFreq+0xfd2>
100088b8:	a201      	add	r2, pc, #4	; (adr r2, 100088c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf90>)
100088ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100088be:	bf00      	nop
100088c0:	100088d1 	.word	0x100088d1
100088c4:	100088d9 	.word	0x100088d9
100088c8:	100088e9 	.word	0x100088e9
100088cc:	100088fd 	.word	0x100088fd

      switch (clksource)
      {
        case RCC_I2C46CLKSOURCE_PCLK5:
          frequency = HAL_RCC_GetPCLK5Freq();
100088d0:	f7fc fc23 	bl	1000511a <HAL_RCC_GetPCLK5Freq>
100088d4:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100088d6:	e017      	b.n	10008908 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>

        case RCC_I2C46CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100088d8:	f107 0318 	add.w	r3, r7, #24
100088dc:	4618      	mov	r0, r3
100088de:	f7fc f9c9 	bl	10004c74 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
100088e2:	69fb      	ldr	r3, [r7, #28]
100088e4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100088e6:	e00f      	b.n	10008908 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>

        case RCC_I2C46CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100088e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100088ec:	699b      	ldr	r3, [r3, #24]
100088ee:	f003 0303 	and.w	r3, r3, #3
100088f2:	4ab3      	ldr	r2, [pc, #716]	; (10008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1290>)
100088f4:	fa22 f303 	lsr.w	r3, r2, r3
100088f8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100088fa:	e005      	b.n	10008908 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>

        case RCC_I2C46CLKSOURCE_CSI:
          frequency = CSI_VALUE;
100088fc:	4bb1      	ldr	r3, [pc, #708]	; (10008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
100088fe:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008900:	e002      	b.n	10008908 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>

        default:
          frequency = 0;
10008902:	2300      	movs	r3, #0
10008904:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008906:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_I2C46 */
10008908:	e2d9      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SPI6:
    {
      clksource = __HAL_RCC_GET_SPI6_SOURCE();
1000890a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000890e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10008912:	f003 0307 	and.w	r3, r3, #7
10008916:	633b      	str	r3, [r7, #48]	; 0x30
10008918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000891a:	2b05      	cmp	r3, #5
1000891c:	d832      	bhi.n	10008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
1000891e:	a201      	add	r2, pc, #4	; (adr r2, 10008924 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
10008920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008924:	1000893d 	.word	0x1000893d
10008928:	10008945 	.word	0x10008945
1000892c:	10008955 	.word	0x10008955
10008930:	10008969 	.word	0x10008969
10008934:	1000896f 	.word	0x1000896f
10008938:	10008975 	.word	0x10008975

      switch (clksource)
      {
        case RCC_SPI6CLKSOURCE_PCLK5:
          frequency = HAL_RCC_GetPCLK5Freq();
1000893c:	f7fc fbed 	bl	1000511a <HAL_RCC_GetPCLK5Freq>
10008940:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008942:	e022      	b.n	1000898a <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008944:	f107 030c 	add.w	r3, r7, #12
10008948:	4618      	mov	r0, r3
1000894a:	f7fc fa8d 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000894e:	693b      	ldr	r3, [r7, #16]
10008950:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008952:	e01a      	b.n	1000898a <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008954:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008958:	699b      	ldr	r3, [r3, #24]
1000895a:	f003 0303 	and.w	r3, r3, #3
1000895e:	4a98      	ldr	r2, [pc, #608]	; (10008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1290>)
10008960:	fa22 f303 	lsr.w	r3, r2, r3
10008964:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008966:	e010      	b.n	1000898a <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008968:	4b96      	ldr	r3, [pc, #600]	; (10008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
1000896a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000896c:	e00d      	b.n	1000898a <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_HSE:
          frequency = HSE_VALUE;
1000896e:	4b96      	ldr	r3, [pc, #600]	; (10008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
10008970:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008972:	e00a      	b.n	1000898a <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008974:	f107 0318 	add.w	r3, r7, #24
10008978:	4618      	mov	r0, r3
1000897a:	f7fc f97b 	bl	10004c74 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
1000897e:	69fb      	ldr	r3, [r7, #28]
10008980:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008982:	e002      	b.n	1000898a <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        default:
          frequency = 0;
10008984:	2300      	movs	r3, #0
10008986:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008988:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SPI6
1000898a:	e298      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_USART1:
    {
      clksource = __HAL_RCC_GET_USART1_SOURCE();
1000898c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008990:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10008994:	f003 0307 	and.w	r3, r3, #7
10008998:	633b      	str	r3, [r7, #48]	; 0x30
1000899a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000899c:	2b05      	cmp	r3, #5
1000899e:	d833      	bhi.n	10008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x10d8>
100089a0:	a201      	add	r2, pc, #4	; (adr r2, 100089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1078>)
100089a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100089a6:	bf00      	nop
100089a8:	100089c1 	.word	0x100089c1
100089ac:	100089c9 	.word	0x100089c9
100089b0:	100089d9 	.word	0x100089d9
100089b4:	100089ed 	.word	0x100089ed
100089b8:	100089f3 	.word	0x100089f3
100089bc:	10008a03 	.word	0x10008a03

      switch (clksource)
      {
        case RCC_USART1CLKSOURCE_PCLK5:
          frequency = HAL_RCC_GetPCLK5Freq();
100089c0:	f7fc fbab 	bl	1000511a <HAL_RCC_GetPCLK5Freq>
100089c4:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100089c6:	e022      	b.n	10008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100089c8:	f107 0318 	add.w	r3, r7, #24
100089cc:	4618      	mov	r0, r3
100089ce:	f7fc f951 	bl	10004c74 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
100089d2:	69fb      	ldr	r3, [r7, #28]
100089d4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100089d6:	e01a      	b.n	10008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100089d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100089dc:	699b      	ldr	r3, [r3, #24]
100089de:	f003 0303 	and.w	r3, r3, #3
100089e2:	4a77      	ldr	r2, [pc, #476]	; (10008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1290>)
100089e4:	fa22 f303 	lsr.w	r3, r2, r3
100089e8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100089ea:	e010      	b.n	10008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_CSI:
          frequency = CSI_VALUE;
100089ec:	4b75      	ldr	r3, [pc, #468]	; (10008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
100089ee:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100089f0:	e00d      	b.n	10008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100089f2:	f107 030c 	add.w	r3, r7, #12
100089f6:	4618      	mov	r0, r3
100089f8:	f7fc fa36 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
100089fc:	693b      	ldr	r3, [r7, #16]
100089fe:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a00:	e005      	b.n	10008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_HSE:
          frequency = HSE_VALUE;
10008a02:	4b71      	ldr	r3, [pc, #452]	; (10008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
10008a04:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a06:	e002      	b.n	10008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        default:
          frequency = 0;
10008a08:	2300      	movs	r3, #0
10008a0a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a0c:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_USART1
10008a0e:	e256      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_STGEN:
    {
      clksource = __HAL_RCC_GET_STGEN_SOURCE();
10008a10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008a14:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
10008a18:	f003 0303 	and.w	r3, r3, #3
10008a1c:	633b      	str	r3, [r7, #48]	; 0x30
10008a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008a20:	2b00      	cmp	r3, #0
10008a22:	d003      	beq.n	10008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
10008a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008a26:	2b01      	cmp	r3, #1
10008a28:	d00a      	beq.n	10008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
10008a2a:	e00c      	b.n	10008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>

      switch (clksource)
      {
        case RCC_STGENCLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008a2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008a30:	699b      	ldr	r3, [r3, #24]
10008a32:	f003 0303 	and.w	r3, r3, #3
10008a36:	4a62      	ldr	r2, [pc, #392]	; (10008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1290>)
10008a38:	fa22 f303 	lsr.w	r3, r2, r3
10008a3c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a3e:	e005      	b.n	10008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x111c>

        case RCC_STGENCLKSOURCE_HSE:
          frequency = HSE_VALUE;
10008a40:	4b61      	ldr	r3, [pc, #388]	; (10008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
10008a42:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a44:	e002      	b.n	10008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x111c>

        default:
          frequency = 0;
10008a46:	2300      	movs	r3, #0
10008a48:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a4a:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_STGEN
10008a4c:	e237      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_QSPI:
    {
      clksource = __HAL_RCC_GET_QSPI_SOURCE();
10008a4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008a52:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
10008a56:	f003 0303 	and.w	r3, r3, #3
10008a5a:	633b      	str	r3, [r7, #48]	; 0x30
10008a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008a5e:	2b03      	cmp	r3, #3
10008a60:	d822      	bhi.n	10008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
10008a62:	a201      	add	r2, pc, #4	; (adr r2, 10008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
10008a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008a68:	10008a79 	.word	0x10008a79
10008a6c:	10008a81 	.word	0x10008a81
10008a70:	10008a91 	.word	0x10008a91
10008a74:	10008aa1 	.word	0x10008aa1

      switch (clksource)
      {
        case RCC_QSPICLKSOURCE_ACLK:
          frequency = HAL_RCC_GetACLKFreq();
10008a78:	f7fc fb69 	bl	1000514e <HAL_RCC_GetACLKFreq>
10008a7c:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008a7e:	e016      	b.n	10008aae <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

        case RCC_QSPICLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008a80:	f107 0318 	add.w	r3, r7, #24
10008a84:	4618      	mov	r0, r3
10008a86:	f7fc f8f5 	bl	10004c74 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10008a8a:	6a3b      	ldr	r3, [r7, #32]
10008a8c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a8e:	e00e      	b.n	10008aae <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

        case RCC_QSPICLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008a90:	f107 030c 	add.w	r3, r7, #12
10008a94:	4618      	mov	r0, r3
10008a96:	f7fc f9e7 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10008a9a:	68fb      	ldr	r3, [r7, #12]
10008a9c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a9e:	e006      	b.n	10008aae <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

        case RCC_QSPICLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008aa0:	f7fc fba2 	bl	100051e8 <RCC_GetCKPERFreq>
10008aa4:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008aa6:	e002      	b.n	10008aae <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

        default:
          frequency = 0;
10008aa8:	2300      	movs	r3, #0
10008aaa:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008aac:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_QSPI
10008aae:	e206      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_ETH:
    {
      clksource = __HAL_RCC_GET_ETH_SOURCE();
10008ab0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008ab4:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
10008ab8:	f003 0303 	and.w	r3, r3, #3
10008abc:	633b      	str	r3, [r7, #48]	; 0x30
10008abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008ac0:	2b00      	cmp	r3, #0
10008ac2:	d003      	beq.n	10008acc <HAL_RCCEx_GetPeriphCLKFreq+0x119c>
10008ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008ac6:	2b01      	cmp	r3, #1
10008ac8:	d008      	beq.n	10008adc <HAL_RCCEx_GetPeriphCLKFreq+0x11ac>
10008aca:	e00f      	b.n	10008aec <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>

      switch (clksource)
      {
        case RCC_ETHCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008acc:	f107 030c 	add.w	r3, r7, #12
10008ad0:	4618      	mov	r0, r3
10008ad2:	f7fc f9c9 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10008ad6:	68fb      	ldr	r3, [r7, #12]
10008ad8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008ada:	e00a      	b.n	10008af2 <HAL_RCCEx_GetPeriphCLKFreq+0x11c2>

        case RCC_ETHCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008adc:	f107 0318 	add.w	r3, r7, #24
10008ae0:	4618      	mov	r0, r3
10008ae2:	f7fc f8c7 	bl	10004c74 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008ae6:	69fb      	ldr	r3, [r7, #28]
10008ae8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008aea:	e002      	b.n	10008af2 <HAL_RCCEx_GetPeriphCLKFreq+0x11c2>

        default:
          frequency = 0;
10008aec:	2300      	movs	r3, #0
10008aee:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008af0:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_ETH
10008af2:	e1e4      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_FMC:
    {
      clksource = __HAL_RCC_GET_FMC_SOURCE();
10008af4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008af8:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
10008afc:	f003 0303 	and.w	r3, r3, #3
10008b00:	633b      	str	r3, [r7, #48]	; 0x30
10008b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008b04:	2b03      	cmp	r3, #3
10008b06:	f200 81d1 	bhi.w	10008eac <HAL_RCCEx_GetPeriphCLKFreq+0x157c>
10008b0a:	a201      	add	r2, pc, #4	; (adr r2, 10008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
10008b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008b10:	10008b21 	.word	0x10008b21
10008b14:	10008b29 	.word	0x10008b29
10008b18:	10008b39 	.word	0x10008b39
10008b1c:	10008b49 	.word	0x10008b49

      switch (clksource)
      {
        case RCC_FMCCLKSOURCE_ACLK:
          frequency = HAL_RCC_GetACLKFreq();
10008b20:	f7fc fb15 	bl	1000514e <HAL_RCC_GetACLKFreq>
10008b24:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008b26:	e013      	b.n	10008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>

        case RCC_FMCCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008b28:	f107 0318 	add.w	r3, r7, #24
10008b2c:	4618      	mov	r0, r3
10008b2e:	f7fc f8a1 	bl	10004c74 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10008b32:	6a3b      	ldr	r3, [r7, #32]
10008b34:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b36:	e00b      	b.n	10008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>

        case RCC_FMCCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008b38:	f107 030c 	add.w	r3, r7, #12
10008b3c:	4618      	mov	r0, r3
10008b3e:	f7fc f993 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10008b42:	68fb      	ldr	r3, [r7, #12]
10008b44:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b46:	e003      	b.n	10008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>

        case RCC_FMCCLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008b48:	f7fc fb4e 	bl	100051e8 <RCC_GetCKPERFreq>
10008b4c:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008b4e:	bf00      	nop

      }
    }
    break;//RCC_PERIPHCLK_FMC
10008b50:	e1ac      	b.n	10008eac <HAL_RCCEx_GetPeriphCLKFreq+0x157c>


    case RCC_PERIPHCLK_GPU:
    {
      HAL_RCC_GetPLL2ClockFreq(&pll2_clocks);
10008b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
10008b56:	4618      	mov	r0, r3
10008b58:	f7fb ffa0 	bl	10004a9c <HAL_RCC_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_Q_Frequency;
10008b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
10008b5e:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_GPU
10008b60:	e1ad      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_USBO:
    {
      clksource = __HAL_RCC_GET_USBO_SOURCE();
10008b62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008b66:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
10008b6a:	f003 0310 	and.w	r3, r3, #16
10008b6e:	633b      	str	r3, [r7, #48]	; 0x30
10008b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008b72:	2b00      	cmp	r3, #0
10008b74:	d003      	beq.n	10008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x124e>
10008b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008b78:	2b10      	cmp	r3, #16
10008b7a:	d008      	beq.n	10008b8e <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
        case RCC_USBOCLKSOURCE_PHY:
          frequency = USB_PHY_VALUE;
          break;
      }
    }
    break;//RCC_PERIPHCLK_USBO
10008b7c:	e19f      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008b7e:	f107 030c 	add.w	r3, r7, #12
10008b82:	4618      	mov	r0, r3
10008b84:	f7fc f970 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10008b88:	697b      	ldr	r3, [r7, #20]
10008b8a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b8c:	e002      	b.n	10008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>
          frequency = USB_PHY_VALUE;
10008b8e:	4b0f      	ldr	r3, [pc, #60]	; (10008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
10008b90:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b92:	bf00      	nop
    break;//RCC_PERIPHCLK_USBO
10008b94:	e193      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SDMMC3:
    {
      clksource = __HAL_RCC_GET_SDMMC3_SOURCE();
10008b96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008b9a:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
10008b9e:	f003 0307 	and.w	r3, r3, #7
10008ba2:	633b      	str	r3, [r7, #48]	; 0x30
10008ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008ba6:	2b03      	cmp	r3, #3
10008ba8:	d830      	bhi.n	10008c0c <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
10008baa:	a201      	add	r2, pc, #4	; (adr r2, 10008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
10008bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008bb0:	10008bd1 	.word	0x10008bd1
10008bb4:	10008bd9 	.word	0x10008bd9
10008bb8:	10008be9 	.word	0x10008be9
10008bbc:	10008bf9 	.word	0x10008bf9
10008bc0:	03d09000 	.word	0x03d09000
10008bc4:	003d0900 	.word	0x003d0900
10008bc8:	016e3600 	.word	0x016e3600
10008bcc:	02dc6c00 	.word	0x02dc6c00

      switch (clksource)
      {
        case RCC_SDMMC3CLKSOURCE_HCLK2:
          frequency = HAL_RCC_GetHCLK2Freq();
10008bd0:	f7fc fae1 	bl	10005196 <HAL_RCC_GetHCLK2Freq>
10008bd4:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008bd6:	e01c      	b.n	10008c12 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>

        case RCC_SDMMC3CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008bd8:	f107 0318 	add.w	r3, r7, #24
10008bdc:	4618      	mov	r0, r3
10008bde:	f7fc f849 	bl	10004c74 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10008be2:	6a3b      	ldr	r3, [r7, #32]
10008be4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008be6:	e014      	b.n	10008c12 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>

        case RCC_SDMMC3CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008be8:	f107 030c 	add.w	r3, r7, #12
10008bec:	4618      	mov	r0, r3
10008bee:	f7fc f93b 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10008bf2:	68fb      	ldr	r3, [r7, #12]
10008bf4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008bf6:	e00c      	b.n	10008c12 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>

        case RCC_SDMMC3CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008bf8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008bfc:	699b      	ldr	r3, [r3, #24]
10008bfe:	f003 0303 	and.w	r3, r3, #3
10008c02:	4ab1      	ldr	r2, [pc, #708]	; (10008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
10008c04:	fa22 f303 	lsr.w	r3, r2, r3
10008c08:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008c0a:	e002      	b.n	10008c12 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>

        default:
          frequency = 0;
10008c0c:	2300      	movs	r3, #0
10008c0e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008c10:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SDMMC3
10008c12:	e154      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_ADC:
    {
      clksource = __HAL_RCC_GET_ADC_SOURCE();
10008c14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008c18:	f8d3 3928 	ldr.w	r3, [r3, #2344]	; 0x928
10008c1c:	f003 0303 	and.w	r3, r3, #3
10008c20:	633b      	str	r3, [r7, #48]	; 0x30
10008c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008c24:	2b02      	cmp	r3, #2
10008c26:	d015      	beq.n	10008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1324>
10008c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008c2a:	2b02      	cmp	r3, #2
10008c2c:	d81a      	bhi.n	10008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
10008c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008c30:	2b00      	cmp	r3, #0
10008c32:	d003      	beq.n	10008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x130c>
10008c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008c36:	2b01      	cmp	r3, #1
10008c38:	d008      	beq.n	10008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x131c>
10008c3a:	e013      	b.n	10008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>

      switch (clksource)
      {
        case RCC_ADCCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008c3c:	f107 030c 	add.w	r3, r7, #12
10008c40:	4618      	mov	r0, r3
10008c42:	f7fc f911 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10008c46:	697b      	ldr	r3, [r7, #20]
10008c48:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008c4a:	e00e      	b.n	10008c6a <HAL_RCCEx_GetPeriphCLKFreq+0x133a>

        case RCC_ADCCLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008c4c:	f7fc facc 	bl	100051e8 <RCC_GetCKPERFreq>
10008c50:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008c52:	e00a      	b.n	10008c6a <HAL_RCCEx_GetPeriphCLKFreq+0x133a>

        case RCC_ADCCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008c54:	f107 0318 	add.w	r3, r7, #24
10008c58:	4618      	mov	r0, r3
10008c5a:	f7fc f80b 	bl	10004c74 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008c5e:	69fb      	ldr	r3, [r7, #28]
10008c60:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008c62:	e002      	b.n	10008c6a <HAL_RCCEx_GetPeriphCLKFreq+0x133a>

        default:
          frequency = 0;
10008c64:	2300      	movs	r3, #0
10008c66:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008c68:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_ADC */
10008c6a:	e128      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_RNG2:
    {
      clksource = __HAL_RCC_GET_RNG2_SOURCE();
10008c6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008c70:	f8d3 3920 	ldr.w	r3, [r3, #2336]	; 0x920
10008c74:	f003 0303 	and.w	r3, r3, #3
10008c78:	633b      	str	r3, [r7, #48]	; 0x30
10008c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008c7c:	2b03      	cmp	r3, #3
10008c7e:	f200 8117 	bhi.w	10008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
10008c82:	a201      	add	r2, pc, #4	; (adr r2, 10008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>)
10008c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008c88:	10008c99 	.word	0x10008c99
10008c8c:	10008c9f 	.word	0x10008c9f
10008c90:	10008caf 	.word	0x10008caf
10008c94:	10008cb7 	.word	0x10008cb7

      switch (clksource)
      {
        case RCC_RNG2CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008c98:	4b8c      	ldr	r3, [pc, #560]	; (10008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
10008c9a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008c9c:	e00f      	b.n	10008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x138e>

        case RCC_RNG2CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008c9e:	f107 030c 	add.w	r3, r7, #12
10008ca2:	4618      	mov	r0, r3
10008ca4:	f7fc f8e0 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10008ca8:	697b      	ldr	r3, [r7, #20]
10008caa:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008cac:	e007      	b.n	10008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x138e>

        case RCC_RNG2CLKSOURCE_LSE:
          frequency = LSE_VALUE;
10008cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10008cb2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008cb4:	e003      	b.n	10008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x138e>

        case RCC_RNG2CLKSOURCE_LSI:
          frequency = LSI_VALUE;
10008cb6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10008cba:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008cbc:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_RNG2
10008cbe:	e0f7      	b.n	10008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>


    case RCC_PERIPHCLK_RNG1:
    {
      clksource = __HAL_RCC_GET_RNG1_SOURCE();
10008cc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008cc4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
10008cc8:	f003 0303 	and.w	r3, r3, #3
10008ccc:	633b      	str	r3, [r7, #48]	; 0x30
10008cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008cd0:	2b03      	cmp	r3, #3
10008cd2:	f200 80ef 	bhi.w	10008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1584>
10008cd6:	a201      	add	r2, pc, #4	; (adr r2, 10008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
10008cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008cdc:	10008ced 	.word	0x10008ced
10008ce0:	10008cf3 	.word	0x10008cf3
10008ce4:	10008d03 	.word	0x10008d03
10008ce8:	10008d0b 	.word	0x10008d0b

      switch (clksource)
      {
        case RCC_RNG1CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008cec:	4b77      	ldr	r3, [pc, #476]	; (10008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
10008cee:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008cf0:	e00f      	b.n	10008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>

        case RCC_RNG1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008cf2:	f107 030c 	add.w	r3, r7, #12
10008cf6:	4618      	mov	r0, r3
10008cf8:	f7fc f8b6 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10008cfc:	697b      	ldr	r3, [r7, #20]
10008cfe:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008d00:	e007      	b.n	10008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>

        case RCC_RNG1CLKSOURCE_LSE:
          frequency = LSE_VALUE;
10008d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10008d06:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008d08:	e003      	b.n	10008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>

        case RCC_RNG1CLKSOURCE_LSI:
          frequency = LSI_VALUE;
10008d0a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10008d0e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008d10:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_RNG1
10008d12:	e0cf      	b.n	10008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1584>

    case RCC_PERIPHCLK_SDMMC12:
    {
      clksource = __HAL_RCC_GET_SDMMC12_SOURCE();
10008d14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008d18:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
10008d1c:	f003 0307 	and.w	r3, r3, #7
10008d20:	633b      	str	r3, [r7, #48]	; 0x30
10008d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008d24:	2b03      	cmp	r3, #3
10008d26:	d829      	bhi.n	10008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x144c>
10008d28:	a201      	add	r2, pc, #4	; (adr r2, 10008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>)
10008d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008d2e:	bf00      	nop
10008d30:	10008d41 	.word	0x10008d41
10008d34:	10008d49 	.word	0x10008d49
10008d38:	10008d59 	.word	0x10008d59
10008d3c:	10008d69 	.word	0x10008d69

      switch (clksource)
      {
        case RCC_SDMMC12CLKSOURCE_HCLK6:
          frequency = HAL_RCC_GetHCLK6Freq();
10008d40:	f7fc fa22 	bl	10005188 <HAL_RCC_GetHCLK6Freq>
10008d44:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008d46:	e01c      	b.n	10008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>

        case RCC_SDMMC12CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008d48:	f107 0318 	add.w	r3, r7, #24
10008d4c:	4618      	mov	r0, r3
10008d4e:	f7fb ff91 	bl	10004c74 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10008d52:	6a3b      	ldr	r3, [r7, #32]
10008d54:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008d56:	e014      	b.n	10008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>

        case RCC_SDMMC12CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008d58:	f107 030c 	add.w	r3, r7, #12
10008d5c:	4618      	mov	r0, r3
10008d5e:	f7fc f883 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10008d62:	68fb      	ldr	r3, [r7, #12]
10008d64:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008d66:	e00c      	b.n	10008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>

        case RCC_SDMMC12CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008d68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008d6c:	699b      	ldr	r3, [r3, #24]
10008d6e:	f003 0303 	and.w	r3, r3, #3
10008d72:	4a55      	ldr	r2, [pc, #340]	; (10008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
10008d74:	fa22 f303 	lsr.w	r3, r2, r3
10008d78:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008d7a:	e002      	b.n	10008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>

        default:
          frequency = 0;
10008d7c:	2300      	movs	r3, #0
10008d7e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008d80:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_SDMMC12 */
10008d82:	e09c      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_TIMG1:
    {
      frequency = HAL_RCC_GetMCUFreq();
10008d84:	f7fc fa15 	bl	100051b2 <HAL_RCC_GetMCUFreq>
10008d88:	6378      	str	r0, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_TIMG1PRES() == RCC_TIMG1PRES_ACTIVATED)
10008d8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008d8e:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
10008d92:	f003 0301 	and.w	r3, r3, #1
10008d96:	2b01      	cmp	r3, #1
10008d98:	d116      	bne.n	10008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
      {
        switch (__HAL_RCC_GET_APB1_DIV())
10008d9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008d9e:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10008da2:	f003 0307 	and.w	r3, r3, #7
10008da6:	2b04      	cmp	r3, #4
10008da8:	d00a      	beq.n	10008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
10008daa:	2b04      	cmp	r3, #4
10008dac:	f200 8084 	bhi.w	10008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
10008db0:	2b02      	cmp	r3, #2
10008db2:	d92b      	bls.n	10008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x14dc>
10008db4:	2b03      	cmp	r3, #3
10008db6:	d17f      	bne.n	10008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
          case RCC_APB1_DIV1:
          case RCC_APB1_DIV2:
          case RCC_APB1_DIV4:
            break;
          case RCC_APB1_DIV8:
            frequency /= 2UL;
10008db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008dba:	085b      	lsrs	r3, r3, #1
10008dbc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008dbe:	e028      	b.n	10008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
          case RCC_APB1_DIV16:
            frequency /= 4UL;
10008dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008dc2:	089b      	lsrs	r3, r3, #2
10008dc4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008dc6:	e024      	b.n	10008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
        }
      }
      else
      {
        switch (__HAL_RCC_GET_APB1_DIV())
10008dc8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008dcc:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10008dd0:	f003 0307 	and.w	r3, r3, #7
10008dd4:	2b04      	cmp	r3, #4
10008dd6:	d86f      	bhi.n	10008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
10008dd8:	a201      	add	r2, pc, #4	; (adr r2, 10008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x14b0>)
10008dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008dde:	bf00      	nop
10008de0:	10008e11 	.word	0x10008e11
10008de4:	10008e11 	.word	0x10008e11
10008de8:	10008df5 	.word	0x10008df5
10008dec:	10008dfd 	.word	0x10008dfd
10008df0:	10008e05 	.word	0x10008e05
        {
          case RCC_APB1_DIV1:
          case RCC_APB1_DIV2:
            break;
          case RCC_APB1_DIV4:
            frequency /= 2UL;
10008df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008df6:	085b      	lsrs	r3, r3, #1
10008df8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008dfa:	e00a      	b.n	10008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
          case RCC_APB1_DIV8:
            frequency /= 4UL;
10008dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008dfe:	089b      	lsrs	r3, r3, #2
10008e00:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008e02:	e006      	b.n	10008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
          case RCC_APB1_DIV16:
            frequency /= 8UL;
10008e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008e06:	08db      	lsrs	r3, r3, #3
10008e08:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008e0a:	e002      	b.n	10008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
            break;
10008e0c:	bf00      	nop
10008e0e:	e053      	b.n	10008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
            break;
10008e10:	bf00      	nop
        }
      }
    }
    break;
10008e12:	e051      	b.n	10008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>


    case RCC_PERIPHCLK_TIMG2:
    {
      frequency = HAL_RCC_GetMCUFreq();
10008e14:	f7fc f9cd 	bl	100051b2 <HAL_RCC_GetMCUFreq>
10008e18:	6378      	str	r0, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_TIMG2PRES() == RCC_TIMG2PRES_ACTIVATED)
10008e1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008e1e:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
10008e22:	f003 0301 	and.w	r3, r3, #1
10008e26:	2b01      	cmp	r3, #1
10008e28:	d115      	bne.n	10008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
      {
        switch (__HAL_RCC_GET_APB2_DIV())
10008e2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008e2e:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10008e32:	f003 0307 	and.w	r3, r3, #7
10008e36:	2b04      	cmp	r3, #4
10008e38:	d009      	beq.n	10008e4e <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
10008e3a:	2b04      	cmp	r3, #4
10008e3c:	d83e      	bhi.n	10008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
10008e3e:	2b02      	cmp	r3, #2
10008e40:	d92a      	bls.n	10008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1568>
10008e42:	2b03      	cmp	r3, #3
10008e44:	d13a      	bne.n	10008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
          case RCC_APB2_DIV1:
          case RCC_APB2_DIV2:
          case RCC_APB2_DIV4:
            break;
          case RCC_APB2_DIV8:
            frequency /= 2UL;
10008e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008e48:	085b      	lsrs	r3, r3, #1
10008e4a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008e4c:	e027      	b.n	10008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
          case RCC_APB2_DIV16:
            frequency /= 4UL;
10008e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008e50:	089b      	lsrs	r3, r3, #2
10008e52:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008e54:	e023      	b.n	10008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
        }
      }
      else
      {
        switch (__HAL_RCC_GET_APB2_DIV())
10008e56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008e5a:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10008e5e:	f003 0307 	and.w	r3, r3, #7
10008e62:	2b04      	cmp	r3, #4
10008e64:	d82a      	bhi.n	10008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
10008e66:	a201      	add	r2, pc, #4	; (adr r2, 10008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
10008e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008e6c:	10008e9d 	.word	0x10008e9d
10008e70:	10008e9d 	.word	0x10008e9d
10008e74:	10008e81 	.word	0x10008e81
10008e78:	10008e89 	.word	0x10008e89
10008e7c:	10008e91 	.word	0x10008e91
        {
          case RCC_APB2_DIV1:
          case RCC_APB2_DIV2:
            break;
          case RCC_APB2_DIV4:
            frequency /= 2UL;
10008e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008e82:	085b      	lsrs	r3, r3, #1
10008e84:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008e86:	e00a      	b.n	10008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
          case RCC_APB2_DIV8:
            frequency /= 4UL;
10008e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008e8a:	089b      	lsrs	r3, r3, #2
10008e8c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008e8e:	e006      	b.n	10008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
          case RCC_APB2_DIV16:
            frequency /= 8UL;
10008e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008e92:	08db      	lsrs	r3, r3, #3
10008e94:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008e96:	e002      	b.n	10008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
            break;
10008e98:	bf00      	nop
10008e9a:	e00f      	b.n	10008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
            break;
10008e9c:	bf00      	nop
        }
      }
    }
    break;
10008e9e:	e00d      	b.n	10008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
      break; /* RCC_PERIPHCLK_I2C12 */
10008ea0:	bf00      	nop
10008ea2:	e00c      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
      break; /* RCC_PERIPHCLK_I2C35 */
10008ea4:	bf00      	nop
10008ea6:	e00a      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;//RCC_PERIPHCLK_RTC
10008ea8:	bf00      	nop
10008eaa:	e008      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;//RCC_PERIPHCLK_FMC
10008eac:	bf00      	nop
10008eae:	e006      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;//RCC_PERIPHCLK_RNG2
10008eb0:	bf00      	nop
10008eb2:	e004      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;//RCC_PERIPHCLK_RNG1
10008eb4:	bf00      	nop
10008eb6:	e002      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;
10008eb8:	bf00      	nop
10008eba:	e000      	b.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;
10008ebc:	bf00      	nop

  }

  return (frequency);
10008ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
10008ec0:	4618      	mov	r0, r3
10008ec2:	373c      	adds	r7, #60	; 0x3c
10008ec4:	46bd      	mov	sp, r7
10008ec6:	bd90      	pop	{r4, r7, pc}
10008ec8:	03d09000 	.word	0x03d09000
10008ecc:	003d0900 	.word	0x003d0900

10008ed0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
10008ed0:	b580      	push	{r7, lr}
10008ed2:	b082      	sub	sp, #8
10008ed4:	af00      	add	r7, sp, #0
10008ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
10008ed8:	687b      	ldr	r3, [r7, #4]
10008eda:	2b00      	cmp	r3, #0
10008edc:	d101      	bne.n	10008ee2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
10008ede:	2301      	movs	r3, #1
10008ee0:	e01d      	b.n	10008f1e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
10008ee2:	687b      	ldr	r3, [r7, #4]
10008ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
10008ee8:	b2db      	uxtb	r3, r3
10008eea:	2b00      	cmp	r3, #0
10008eec:	d106      	bne.n	10008efc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
10008eee:	687b      	ldr	r3, [r7, #4]
10008ef0:	2200      	movs	r2, #0
10008ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
10008ef6:	6878      	ldr	r0, [r7, #4]
10008ef8:	f7f8 fb6c 	bl	100015d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
10008efc:	687b      	ldr	r3, [r7, #4]
10008efe:	2202      	movs	r2, #2
10008f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
10008f04:	687b      	ldr	r3, [r7, #4]
10008f06:	681a      	ldr	r2, [r3, #0]
10008f08:	687b      	ldr	r3, [r7, #4]
10008f0a:	3304      	adds	r3, #4
10008f0c:	4619      	mov	r1, r3
10008f0e:	4610      	mov	r0, r2
10008f10:	f000 f834 	bl	10008f7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
10008f14:	687b      	ldr	r3, [r7, #4]
10008f16:	2201      	movs	r2, #1
10008f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
10008f1c:	2300      	movs	r3, #0
}
10008f1e:	4618      	mov	r0, r3
10008f20:	3708      	adds	r7, #8
10008f22:	46bd      	mov	sp, r7
10008f24:	bd80      	pop	{r7, pc}
	...

10008f28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
10008f28:	b480      	push	{r7}
10008f2a:	b085      	sub	sp, #20
10008f2c:	af00      	add	r7, sp, #0
10008f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
10008f30:	687b      	ldr	r3, [r7, #4]
10008f32:	2202      	movs	r2, #2
10008f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
10008f38:	687b      	ldr	r3, [r7, #4]
10008f3a:	681b      	ldr	r3, [r3, #0]
10008f3c:	689a      	ldr	r2, [r3, #8]
10008f3e:	4b0e      	ldr	r3, [pc, #56]	; (10008f78 <HAL_TIM_Base_Start+0x50>)
10008f40:	4013      	ands	r3, r2
10008f42:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
10008f44:	68fb      	ldr	r3, [r7, #12]
10008f46:	2b06      	cmp	r3, #6
10008f48:	d00b      	beq.n	10008f62 <HAL_TIM_Base_Start+0x3a>
10008f4a:	68fb      	ldr	r3, [r7, #12]
10008f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
10008f50:	d007      	beq.n	10008f62 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
10008f52:	687b      	ldr	r3, [r7, #4]
10008f54:	681b      	ldr	r3, [r3, #0]
10008f56:	681a      	ldr	r2, [r3, #0]
10008f58:	687b      	ldr	r3, [r7, #4]
10008f5a:	681b      	ldr	r3, [r3, #0]
10008f5c:	f042 0201 	orr.w	r2, r2, #1
10008f60:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
10008f62:	687b      	ldr	r3, [r7, #4]
10008f64:	2201      	movs	r2, #1
10008f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
10008f6a:	2300      	movs	r3, #0
}
10008f6c:	4618      	mov	r0, r3
10008f6e:	3714      	adds	r7, #20
10008f70:	46bd      	mov	sp, r7
10008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
10008f76:	4770      	bx	lr
10008f78:	00010007 	.word	0x00010007

10008f7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
10008f7c:	b480      	push	{r7}
10008f7e:	b085      	sub	sp, #20
10008f80:	af00      	add	r7, sp, #0
10008f82:	6078      	str	r0, [r7, #4]
10008f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
10008f86:	687b      	ldr	r3, [r7, #4]
10008f88:	681b      	ldr	r3, [r3, #0]
10008f8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
10008f8c:	687b      	ldr	r3, [r7, #4]
10008f8e:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10008f92:	d013      	beq.n	10008fbc <TIM_Base_SetConfig+0x40>
10008f94:	687b      	ldr	r3, [r7, #4]
10008f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
10008f9a:	d00f      	beq.n	10008fbc <TIM_Base_SetConfig+0x40>
10008f9c:	687b      	ldr	r3, [r7, #4]
10008f9e:	4a3c      	ldr	r2, [pc, #240]	; (10009090 <TIM_Base_SetConfig+0x114>)
10008fa0:	4293      	cmp	r3, r2
10008fa2:	d00b      	beq.n	10008fbc <TIM_Base_SetConfig+0x40>
10008fa4:	687b      	ldr	r3, [r7, #4]
10008fa6:	4a3b      	ldr	r2, [pc, #236]	; (10009094 <TIM_Base_SetConfig+0x118>)
10008fa8:	4293      	cmp	r3, r2
10008faa:	d007      	beq.n	10008fbc <TIM_Base_SetConfig+0x40>
10008fac:	687b      	ldr	r3, [r7, #4]
10008fae:	4a3a      	ldr	r2, [pc, #232]	; (10009098 <TIM_Base_SetConfig+0x11c>)
10008fb0:	4293      	cmp	r3, r2
10008fb2:	d003      	beq.n	10008fbc <TIM_Base_SetConfig+0x40>
10008fb4:	687b      	ldr	r3, [r7, #4]
10008fb6:	4a39      	ldr	r2, [pc, #228]	; (1000909c <TIM_Base_SetConfig+0x120>)
10008fb8:	4293      	cmp	r3, r2
10008fba:	d108      	bne.n	10008fce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
10008fbc:	68fb      	ldr	r3, [r7, #12]
10008fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10008fc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
10008fc4:	683b      	ldr	r3, [r7, #0]
10008fc6:	685b      	ldr	r3, [r3, #4]
10008fc8:	68fa      	ldr	r2, [r7, #12]
10008fca:	4313      	orrs	r3, r2
10008fcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
10008fce:	687b      	ldr	r3, [r7, #4]
10008fd0:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10008fd4:	d01f      	beq.n	10009016 <TIM_Base_SetConfig+0x9a>
10008fd6:	687b      	ldr	r3, [r7, #4]
10008fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
10008fdc:	d01b      	beq.n	10009016 <TIM_Base_SetConfig+0x9a>
10008fde:	687b      	ldr	r3, [r7, #4]
10008fe0:	4a2b      	ldr	r2, [pc, #172]	; (10009090 <TIM_Base_SetConfig+0x114>)
10008fe2:	4293      	cmp	r3, r2
10008fe4:	d017      	beq.n	10009016 <TIM_Base_SetConfig+0x9a>
10008fe6:	687b      	ldr	r3, [r7, #4]
10008fe8:	4a2a      	ldr	r2, [pc, #168]	; (10009094 <TIM_Base_SetConfig+0x118>)
10008fea:	4293      	cmp	r3, r2
10008fec:	d013      	beq.n	10009016 <TIM_Base_SetConfig+0x9a>
10008fee:	687b      	ldr	r3, [r7, #4]
10008ff0:	4a29      	ldr	r2, [pc, #164]	; (10009098 <TIM_Base_SetConfig+0x11c>)
10008ff2:	4293      	cmp	r3, r2
10008ff4:	d00f      	beq.n	10009016 <TIM_Base_SetConfig+0x9a>
10008ff6:	687b      	ldr	r3, [r7, #4]
10008ff8:	4a28      	ldr	r2, [pc, #160]	; (1000909c <TIM_Base_SetConfig+0x120>)
10008ffa:	4293      	cmp	r3, r2
10008ffc:	d00b      	beq.n	10009016 <TIM_Base_SetConfig+0x9a>
10008ffe:	687b      	ldr	r3, [r7, #4]
10009000:	4a27      	ldr	r2, [pc, #156]	; (100090a0 <TIM_Base_SetConfig+0x124>)
10009002:	4293      	cmp	r3, r2
10009004:	d007      	beq.n	10009016 <TIM_Base_SetConfig+0x9a>
10009006:	687b      	ldr	r3, [r7, #4]
10009008:	4a26      	ldr	r2, [pc, #152]	; (100090a4 <TIM_Base_SetConfig+0x128>)
1000900a:	4293      	cmp	r3, r2
1000900c:	d003      	beq.n	10009016 <TIM_Base_SetConfig+0x9a>
1000900e:	687b      	ldr	r3, [r7, #4]
10009010:	4a25      	ldr	r2, [pc, #148]	; (100090a8 <TIM_Base_SetConfig+0x12c>)
10009012:	4293      	cmp	r3, r2
10009014:	d108      	bne.n	10009028 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
10009016:	68fb      	ldr	r3, [r7, #12]
10009018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
1000901c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
1000901e:	683b      	ldr	r3, [r7, #0]
10009020:	68db      	ldr	r3, [r3, #12]
10009022:	68fa      	ldr	r2, [r7, #12]
10009024:	4313      	orrs	r3, r2
10009026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
10009028:	68fb      	ldr	r3, [r7, #12]
1000902a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
1000902e:	683b      	ldr	r3, [r7, #0]
10009030:	695b      	ldr	r3, [r3, #20]
10009032:	4313      	orrs	r3, r2
10009034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
10009036:	687b      	ldr	r3, [r7, #4]
10009038:	68fa      	ldr	r2, [r7, #12]
1000903a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
1000903c:	683b      	ldr	r3, [r7, #0]
1000903e:	689a      	ldr	r2, [r3, #8]
10009040:	687b      	ldr	r3, [r7, #4]
10009042:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
10009044:	683b      	ldr	r3, [r7, #0]
10009046:	681a      	ldr	r2, [r3, #0]
10009048:	687b      	ldr	r3, [r7, #4]
1000904a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
1000904c:	687b      	ldr	r3, [r7, #4]
1000904e:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10009052:	d00f      	beq.n	10009074 <TIM_Base_SetConfig+0xf8>
10009054:	687b      	ldr	r3, [r7, #4]
10009056:	4a11      	ldr	r2, [pc, #68]	; (1000909c <TIM_Base_SetConfig+0x120>)
10009058:	4293      	cmp	r3, r2
1000905a:	d00b      	beq.n	10009074 <TIM_Base_SetConfig+0xf8>
1000905c:	687b      	ldr	r3, [r7, #4]
1000905e:	4a10      	ldr	r2, [pc, #64]	; (100090a0 <TIM_Base_SetConfig+0x124>)
10009060:	4293      	cmp	r3, r2
10009062:	d007      	beq.n	10009074 <TIM_Base_SetConfig+0xf8>
10009064:	687b      	ldr	r3, [r7, #4]
10009066:	4a0f      	ldr	r2, [pc, #60]	; (100090a4 <TIM_Base_SetConfig+0x128>)
10009068:	4293      	cmp	r3, r2
1000906a:	d003      	beq.n	10009074 <TIM_Base_SetConfig+0xf8>
1000906c:	687b      	ldr	r3, [r7, #4]
1000906e:	4a0e      	ldr	r2, [pc, #56]	; (100090a8 <TIM_Base_SetConfig+0x12c>)
10009070:	4293      	cmp	r3, r2
10009072:	d103      	bne.n	1000907c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
10009074:	683b      	ldr	r3, [r7, #0]
10009076:	691a      	ldr	r2, [r3, #16]
10009078:	687b      	ldr	r3, [r7, #4]
1000907a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
1000907c:	687b      	ldr	r3, [r7, #4]
1000907e:	2201      	movs	r2, #1
10009080:	615a      	str	r2, [r3, #20]
}
10009082:	bf00      	nop
10009084:	3714      	adds	r7, #20
10009086:	46bd      	mov	sp, r7
10009088:	f85d 7b04 	ldr.w	r7, [sp], #4
1000908c:	4770      	bx	lr
1000908e:	bf00      	nop
10009090:	40001000 	.word	0x40001000
10009094:	40002000 	.word	0x40002000
10009098:	40003000 	.word	0x40003000
1000909c:	44001000 	.word	0x44001000
100090a0:	44006000 	.word	0x44006000
100090a4:	44007000 	.word	0x44007000
100090a8:	44008000 	.word	0x44008000

100090ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
100090ac:	b580      	push	{r7, lr}
100090ae:	b082      	sub	sp, #8
100090b0:	af00      	add	r7, sp, #0
100090b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
100090b4:	687b      	ldr	r3, [r7, #4]
100090b6:	2b00      	cmp	r3, #0
100090b8:	d101      	bne.n	100090be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
100090ba:	2301      	movs	r3, #1
100090bc:	e042      	b.n	10009144 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
100090be:	687b      	ldr	r3, [r7, #4]
100090c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
100090c4:	2b00      	cmp	r3, #0
100090c6:	d106      	bne.n	100090d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
100090c8:	687b      	ldr	r3, [r7, #4]
100090ca:	2200      	movs	r2, #0
100090cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
100090d0:	6878      	ldr	r0, [r7, #4]
100090d2:	f7f8 fa95 	bl	10001600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
100090d6:	687b      	ldr	r3, [r7, #4]
100090d8:	2224      	movs	r2, #36	; 0x24
100090da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
100090de:	687b      	ldr	r3, [r7, #4]
100090e0:	681b      	ldr	r3, [r3, #0]
100090e2:	681a      	ldr	r2, [r3, #0]
100090e4:	687b      	ldr	r3, [r7, #4]
100090e6:	681b      	ldr	r3, [r3, #0]
100090e8:	f022 0201 	bic.w	r2, r2, #1
100090ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
100090ee:	6878      	ldr	r0, [r7, #4]
100090f0:	f000 f8c4 	bl	1000927c <UART_SetConfig>
100090f4:	4603      	mov	r3, r0
100090f6:	2b01      	cmp	r3, #1
100090f8:	d101      	bne.n	100090fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
100090fa:	2301      	movs	r3, #1
100090fc:	e022      	b.n	10009144 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
100090fe:	687b      	ldr	r3, [r7, #4]
10009100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10009102:	2b00      	cmp	r3, #0
10009104:	d002      	beq.n	1000910c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
10009106:	6878      	ldr	r0, [r7, #4]
10009108:	f001 f95e 	bl	1000a3c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1000910c:	687b      	ldr	r3, [r7, #4]
1000910e:	681b      	ldr	r3, [r3, #0]
10009110:	685a      	ldr	r2, [r3, #4]
10009112:	687b      	ldr	r3, [r7, #4]
10009114:	681b      	ldr	r3, [r3, #0]
10009116:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
1000911a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
1000911c:	687b      	ldr	r3, [r7, #4]
1000911e:	681b      	ldr	r3, [r3, #0]
10009120:	689a      	ldr	r2, [r3, #8]
10009122:	687b      	ldr	r3, [r7, #4]
10009124:	681b      	ldr	r3, [r3, #0]
10009126:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
1000912a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
1000912c:	687b      	ldr	r3, [r7, #4]
1000912e:	681b      	ldr	r3, [r3, #0]
10009130:	681a      	ldr	r2, [r3, #0]
10009132:	687b      	ldr	r3, [r7, #4]
10009134:	681b      	ldr	r3, [r3, #0]
10009136:	f042 0201 	orr.w	r2, r2, #1
1000913a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
1000913c:	6878      	ldr	r0, [r7, #4]
1000913e:	f001 f9e5 	bl	1000a50c <UART_CheckIdleState>
10009142:	4603      	mov	r3, r0
}
10009144:	4618      	mov	r0, r3
10009146:	3708      	adds	r7, #8
10009148:	46bd      	mov	sp, r7
1000914a:	bd80      	pop	{r7, pc}

1000914c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
1000914c:	b580      	push	{r7, lr}
1000914e:	b08a      	sub	sp, #40	; 0x28
10009150:	af02      	add	r7, sp, #8
10009152:	60f8      	str	r0, [r7, #12]
10009154:	60b9      	str	r1, [r7, #8]
10009156:	603b      	str	r3, [r7, #0]
10009158:	4613      	mov	r3, r2
1000915a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
1000915c:	68fb      	ldr	r3, [r7, #12]
1000915e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10009162:	2b20      	cmp	r3, #32
10009164:	f040 8084 	bne.w	10009270 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
10009168:	68bb      	ldr	r3, [r7, #8]
1000916a:	2b00      	cmp	r3, #0
1000916c:	d002      	beq.n	10009174 <HAL_UART_Transmit+0x28>
1000916e:	88fb      	ldrh	r3, [r7, #6]
10009170:	2b00      	cmp	r3, #0
10009172:	d101      	bne.n	10009178 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
10009174:	2301      	movs	r3, #1
10009176:	e07c      	b.n	10009272 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
10009178:	68fb      	ldr	r3, [r7, #12]
1000917a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
1000917e:	2b01      	cmp	r3, #1
10009180:	d101      	bne.n	10009186 <HAL_UART_Transmit+0x3a>
10009182:	2302      	movs	r3, #2
10009184:	e075      	b.n	10009272 <HAL_UART_Transmit+0x126>
10009186:	68fb      	ldr	r3, [r7, #12]
10009188:	2201      	movs	r2, #1
1000918a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    huart->ErrorCode = HAL_UART_ERROR_NONE;
1000918e:	68fb      	ldr	r3, [r7, #12]
10009190:	2200      	movs	r2, #0
10009192:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
10009196:	68fb      	ldr	r3, [r7, #12]
10009198:	2221      	movs	r2, #33	; 0x21
1000919a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
1000919e:	f7f8 fb93 	bl	100018c8 <HAL_GetTick>
100091a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
100091a4:	68fb      	ldr	r3, [r7, #12]
100091a6:	88fa      	ldrh	r2, [r7, #6]
100091a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
100091ac:	68fb      	ldr	r3, [r7, #12]
100091ae:	88fa      	ldrh	r2, [r7, #6]
100091b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
100091b4:	68fb      	ldr	r3, [r7, #12]
100091b6:	689b      	ldr	r3, [r3, #8]
100091b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
100091bc:	d108      	bne.n	100091d0 <HAL_UART_Transmit+0x84>
100091be:	68fb      	ldr	r3, [r7, #12]
100091c0:	691b      	ldr	r3, [r3, #16]
100091c2:	2b00      	cmp	r3, #0
100091c4:	d104      	bne.n	100091d0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
100091c6:	2300      	movs	r3, #0
100091c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
100091ca:	68bb      	ldr	r3, [r7, #8]
100091cc:	61bb      	str	r3, [r7, #24]
100091ce:	e003      	b.n	100091d8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
100091d0:	68bb      	ldr	r3, [r7, #8]
100091d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
100091d4:	2300      	movs	r3, #0
100091d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
100091d8:	68fb      	ldr	r3, [r7, #12]
100091da:	2200      	movs	r2, #0
100091dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    while (huart->TxXferCount > 0U)
100091e0:	e02d      	b.n	1000923e <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
100091e2:	683b      	ldr	r3, [r7, #0]
100091e4:	9300      	str	r3, [sp, #0]
100091e6:	697b      	ldr	r3, [r7, #20]
100091e8:	2200      	movs	r2, #0
100091ea:	2180      	movs	r1, #128	; 0x80
100091ec:	68f8      	ldr	r0, [r7, #12]
100091ee:	f001 f9d5 	bl	1000a59c <UART_WaitOnFlagUntilTimeout>
100091f2:	4603      	mov	r3, r0
100091f4:	2b00      	cmp	r3, #0
100091f6:	d001      	beq.n	100091fc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
100091f8:	2303      	movs	r3, #3
100091fa:	e03a      	b.n	10009272 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
100091fc:	69fb      	ldr	r3, [r7, #28]
100091fe:	2b00      	cmp	r3, #0
10009200:	d10b      	bne.n	1000921a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
10009202:	69bb      	ldr	r3, [r7, #24]
10009204:	881a      	ldrh	r2, [r3, #0]
10009206:	68fb      	ldr	r3, [r7, #12]
10009208:	681b      	ldr	r3, [r3, #0]
1000920a:	f3c2 0208 	ubfx	r2, r2, #0, #9
1000920e:	b292      	uxth	r2, r2
10009210:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
10009212:	69bb      	ldr	r3, [r7, #24]
10009214:	3302      	adds	r3, #2
10009216:	61bb      	str	r3, [r7, #24]
10009218:	e008      	b.n	1000922c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
1000921a:	69fb      	ldr	r3, [r7, #28]
1000921c:	781a      	ldrb	r2, [r3, #0]
1000921e:	68fb      	ldr	r3, [r7, #12]
10009220:	681b      	ldr	r3, [r3, #0]
10009222:	b292      	uxth	r2, r2
10009224:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
10009226:	69fb      	ldr	r3, [r7, #28]
10009228:	3301      	adds	r3, #1
1000922a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
1000922c:	68fb      	ldr	r3, [r7, #12]
1000922e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
10009232:	b29b      	uxth	r3, r3
10009234:	3b01      	subs	r3, #1
10009236:	b29a      	uxth	r2, r3
10009238:	68fb      	ldr	r3, [r7, #12]
1000923a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
1000923e:	68fb      	ldr	r3, [r7, #12]
10009240:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
10009244:	b29b      	uxth	r3, r3
10009246:	2b00      	cmp	r3, #0
10009248:	d1cb      	bne.n	100091e2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
1000924a:	683b      	ldr	r3, [r7, #0]
1000924c:	9300      	str	r3, [sp, #0]
1000924e:	697b      	ldr	r3, [r7, #20]
10009250:	2200      	movs	r2, #0
10009252:	2140      	movs	r1, #64	; 0x40
10009254:	68f8      	ldr	r0, [r7, #12]
10009256:	f001 f9a1 	bl	1000a59c <UART_WaitOnFlagUntilTimeout>
1000925a:	4603      	mov	r3, r0
1000925c:	2b00      	cmp	r3, #0
1000925e:	d001      	beq.n	10009264 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
10009260:	2303      	movs	r3, #3
10009262:	e006      	b.n	10009272 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
10009264:	68fb      	ldr	r3, [r7, #12]
10009266:	2220      	movs	r2, #32
10009268:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
1000926c:	2300      	movs	r3, #0
1000926e:	e000      	b.n	10009272 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
10009270:	2302      	movs	r3, #2
  }
}
10009272:	4618      	mov	r0, r3
10009274:	3720      	adds	r7, #32
10009276:	46bd      	mov	sp, r7
10009278:	bd80      	pop	{r7, pc}
	...

1000927c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
1000927c:	b580      	push	{r7, lr}
1000927e:	b08e      	sub	sp, #56	; 0x38
10009280:	af00      	add	r7, sp, #0
10009282:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
10009284:	2300      	movs	r3, #0
10009286:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_StatusTypeDef ret               = HAL_OK;
10009288:	2300      	movs	r3, #0
1000928a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
1000928e:	687b      	ldr	r3, [r7, #4]
10009290:	689a      	ldr	r2, [r3, #8]
10009292:	687b      	ldr	r3, [r7, #4]
10009294:	691b      	ldr	r3, [r3, #16]
10009296:	431a      	orrs	r2, r3
10009298:	687b      	ldr	r3, [r7, #4]
1000929a:	695b      	ldr	r3, [r3, #20]
1000929c:	431a      	orrs	r2, r3
1000929e:	687b      	ldr	r3, [r7, #4]
100092a0:	69db      	ldr	r3, [r3, #28]
100092a2:	4313      	orrs	r3, r2
100092a4:	62bb      	str	r3, [r7, #40]	; 0x28
  tmpreg |= (uint32_t)huart->FifoMode;
100092a6:	687b      	ldr	r3, [r7, #4]
100092a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
100092aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
100092ac:	4313      	orrs	r3, r2
100092ae:	62bb      	str	r3, [r7, #40]	; 0x28
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
100092b0:	687b      	ldr	r3, [r7, #4]
100092b2:	681b      	ldr	r3, [r3, #0]
100092b4:	681a      	ldr	r2, [r3, #0]
100092b6:	4bb1      	ldr	r3, [pc, #708]	; (1000957c <UART_SetConfig+0x300>)
100092b8:	4013      	ands	r3, r2
100092ba:	687a      	ldr	r2, [r7, #4]
100092bc:	6812      	ldr	r2, [r2, #0]
100092be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
100092c0:	430b      	orrs	r3, r1
100092c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
100092c4:	687b      	ldr	r3, [r7, #4]
100092c6:	681b      	ldr	r3, [r3, #0]
100092c8:	685b      	ldr	r3, [r3, #4]
100092ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
100092ce:	687b      	ldr	r3, [r7, #4]
100092d0:	68da      	ldr	r2, [r3, #12]
100092d2:	687b      	ldr	r3, [r7, #4]
100092d4:	681b      	ldr	r3, [r3, #0]
100092d6:	430a      	orrs	r2, r1
100092d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
100092da:	687b      	ldr	r3, [r7, #4]
100092dc:	699b      	ldr	r3, [r3, #24]
100092de:	62bb      	str	r3, [r7, #40]	; 0x28

  tmpreg |= huart->Init.OneBitSampling;
100092e0:	687b      	ldr	r3, [r7, #4]
100092e2:	6a1b      	ldr	r3, [r3, #32]
100092e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
100092e6:	4313      	orrs	r3, r2
100092e8:	62bb      	str	r3, [r7, #40]	; 0x28
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
100092ea:	687b      	ldr	r3, [r7, #4]
100092ec:	681b      	ldr	r3, [r3, #0]
100092ee:	689b      	ldr	r3, [r3, #8]
100092f0:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
100092f4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
100092f8:	687a      	ldr	r2, [r7, #4]
100092fa:	6812      	ldr	r2, [r2, #0]
100092fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
100092fe:	430b      	orrs	r3, r1
10009300:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
10009302:	687b      	ldr	r3, [r7, #4]
10009304:	681b      	ldr	r3, [r3, #0]
10009306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10009308:	f023 010f 	bic.w	r1, r3, #15
1000930c:	687b      	ldr	r3, [r7, #4]
1000930e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10009310:	687b      	ldr	r3, [r7, #4]
10009312:	681b      	ldr	r3, [r3, #0]
10009314:	430a      	orrs	r2, r1
10009316:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
10009318:	687b      	ldr	r3, [r7, #4]
1000931a:	681b      	ldr	r3, [r3, #0]
1000931c:	f1b3 4fb8 	cmp.w	r3, #1543503872	; 0x5c000000
10009320:	d132      	bne.n	10009388 <UART_SetConfig+0x10c>
10009322:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009326:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
1000932a:	f003 0307 	and.w	r3, r3, #7
1000932e:	2b05      	cmp	r3, #5
10009330:	d826      	bhi.n	10009380 <UART_SetConfig+0x104>
10009332:	a201      	add	r2, pc, #4	; (adr r2, 10009338 <UART_SetConfig+0xbc>)
10009334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009338:	10009351 	.word	0x10009351
1000933c:	10009359 	.word	0x10009359
10009340:	10009361 	.word	0x10009361
10009344:	10009369 	.word	0x10009369
10009348:	10009371 	.word	0x10009371
1000934c:	10009379 	.word	0x10009379
10009350:	2302      	movs	r3, #2
10009352:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009356:	e184      	b.n	10009662 <UART_SetConfig+0x3e6>
10009358:	2304      	movs	r3, #4
1000935a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000935e:	e180      	b.n	10009662 <UART_SetConfig+0x3e6>
10009360:	2310      	movs	r3, #16
10009362:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009366:	e17c      	b.n	10009662 <UART_SetConfig+0x3e6>
10009368:	2320      	movs	r3, #32
1000936a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000936e:	e178      	b.n	10009662 <UART_SetConfig+0x3e6>
10009370:	2308      	movs	r3, #8
10009372:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009376:	e174      	b.n	10009662 <UART_SetConfig+0x3e6>
10009378:	2340      	movs	r3, #64	; 0x40
1000937a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000937e:	e170      	b.n	10009662 <UART_SetConfig+0x3e6>
10009380:	2380      	movs	r3, #128	; 0x80
10009382:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009386:	e16c      	b.n	10009662 <UART_SetConfig+0x3e6>
10009388:	687b      	ldr	r3, [r7, #4]
1000938a:	681b      	ldr	r3, [r3, #0]
1000938c:	4a7c      	ldr	r2, [pc, #496]	; (10009580 <UART_SetConfig+0x304>)
1000938e:	4293      	cmp	r3, r2
10009390:	d12c      	bne.n	100093ec <UART_SetConfig+0x170>
10009392:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009396:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
1000939a:	f003 0307 	and.w	r3, r3, #7
1000939e:	2b04      	cmp	r3, #4
100093a0:	d820      	bhi.n	100093e4 <UART_SetConfig+0x168>
100093a2:	a201      	add	r2, pc, #4	; (adr r2, 100093a8 <UART_SetConfig+0x12c>)
100093a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100093a8:	100093bd 	.word	0x100093bd
100093ac:	100093c5 	.word	0x100093c5
100093b0:	100093cd 	.word	0x100093cd
100093b4:	100093d5 	.word	0x100093d5
100093b8:	100093dd 	.word	0x100093dd
100093bc:	2300      	movs	r3, #0
100093be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100093c2:	e14e      	b.n	10009662 <UART_SetConfig+0x3e6>
100093c4:	2308      	movs	r3, #8
100093c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100093ca:	e14a      	b.n	10009662 <UART_SetConfig+0x3e6>
100093cc:	2310      	movs	r3, #16
100093ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100093d2:	e146      	b.n	10009662 <UART_SetConfig+0x3e6>
100093d4:	2320      	movs	r3, #32
100093d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100093da:	e142      	b.n	10009662 <UART_SetConfig+0x3e6>
100093dc:	2340      	movs	r3, #64	; 0x40
100093de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100093e2:	e13e      	b.n	10009662 <UART_SetConfig+0x3e6>
100093e4:	2380      	movs	r3, #128	; 0x80
100093e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100093ea:	e13a      	b.n	10009662 <UART_SetConfig+0x3e6>
100093ec:	687b      	ldr	r3, [r7, #4]
100093ee:	681b      	ldr	r3, [r3, #0]
100093f0:	4a64      	ldr	r2, [pc, #400]	; (10009584 <UART_SetConfig+0x308>)
100093f2:	4293      	cmp	r3, r2
100093f4:	d12c      	bne.n	10009450 <UART_SetConfig+0x1d4>
100093f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100093fa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
100093fe:	f003 0307 	and.w	r3, r3, #7
10009402:	2b04      	cmp	r3, #4
10009404:	d820      	bhi.n	10009448 <UART_SetConfig+0x1cc>
10009406:	a201      	add	r2, pc, #4	; (adr r2, 1000940c <UART_SetConfig+0x190>)
10009408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000940c:	10009421 	.word	0x10009421
10009410:	10009429 	.word	0x10009429
10009414:	10009431 	.word	0x10009431
10009418:	10009439 	.word	0x10009439
1000941c:	10009441 	.word	0x10009441
10009420:	2300      	movs	r3, #0
10009422:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009426:	e11c      	b.n	10009662 <UART_SetConfig+0x3e6>
10009428:	2308      	movs	r3, #8
1000942a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000942e:	e118      	b.n	10009662 <UART_SetConfig+0x3e6>
10009430:	2310      	movs	r3, #16
10009432:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009436:	e114      	b.n	10009662 <UART_SetConfig+0x3e6>
10009438:	2320      	movs	r3, #32
1000943a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000943e:	e110      	b.n	10009662 <UART_SetConfig+0x3e6>
10009440:	2340      	movs	r3, #64	; 0x40
10009442:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009446:	e10c      	b.n	10009662 <UART_SetConfig+0x3e6>
10009448:	2380      	movs	r3, #128	; 0x80
1000944a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000944e:	e108      	b.n	10009662 <UART_SetConfig+0x3e6>
10009450:	687b      	ldr	r3, [r7, #4]
10009452:	681b      	ldr	r3, [r3, #0]
10009454:	4a4c      	ldr	r2, [pc, #304]	; (10009588 <UART_SetConfig+0x30c>)
10009456:	4293      	cmp	r3, r2
10009458:	d12c      	bne.n	100094b4 <UART_SetConfig+0x238>
1000945a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000945e:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
10009462:	f003 0307 	and.w	r3, r3, #7
10009466:	2b04      	cmp	r3, #4
10009468:	d820      	bhi.n	100094ac <UART_SetConfig+0x230>
1000946a:	a201      	add	r2, pc, #4	; (adr r2, 10009470 <UART_SetConfig+0x1f4>)
1000946c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009470:	10009485 	.word	0x10009485
10009474:	1000948d 	.word	0x1000948d
10009478:	10009495 	.word	0x10009495
1000947c:	1000949d 	.word	0x1000949d
10009480:	100094a5 	.word	0x100094a5
10009484:	2300      	movs	r3, #0
10009486:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000948a:	e0ea      	b.n	10009662 <UART_SetConfig+0x3e6>
1000948c:	2308      	movs	r3, #8
1000948e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009492:	e0e6      	b.n	10009662 <UART_SetConfig+0x3e6>
10009494:	2310      	movs	r3, #16
10009496:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000949a:	e0e2      	b.n	10009662 <UART_SetConfig+0x3e6>
1000949c:	2320      	movs	r3, #32
1000949e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100094a2:	e0de      	b.n	10009662 <UART_SetConfig+0x3e6>
100094a4:	2340      	movs	r3, #64	; 0x40
100094a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100094aa:	e0da      	b.n	10009662 <UART_SetConfig+0x3e6>
100094ac:	2380      	movs	r3, #128	; 0x80
100094ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100094b2:	e0d6      	b.n	10009662 <UART_SetConfig+0x3e6>
100094b4:	687b      	ldr	r3, [r7, #4]
100094b6:	681b      	ldr	r3, [r3, #0]
100094b8:	4a34      	ldr	r2, [pc, #208]	; (1000958c <UART_SetConfig+0x310>)
100094ba:	4293      	cmp	r3, r2
100094bc:	d12c      	bne.n	10009518 <UART_SetConfig+0x29c>
100094be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100094c2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
100094c6:	f003 0307 	and.w	r3, r3, #7
100094ca:	2b04      	cmp	r3, #4
100094cc:	d820      	bhi.n	10009510 <UART_SetConfig+0x294>
100094ce:	a201      	add	r2, pc, #4	; (adr r2, 100094d4 <UART_SetConfig+0x258>)
100094d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100094d4:	100094e9 	.word	0x100094e9
100094d8:	100094f1 	.word	0x100094f1
100094dc:	100094f9 	.word	0x100094f9
100094e0:	10009501 	.word	0x10009501
100094e4:	10009509 	.word	0x10009509
100094e8:	2300      	movs	r3, #0
100094ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100094ee:	e0b8      	b.n	10009662 <UART_SetConfig+0x3e6>
100094f0:	2308      	movs	r3, #8
100094f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100094f6:	e0b4      	b.n	10009662 <UART_SetConfig+0x3e6>
100094f8:	2310      	movs	r3, #16
100094fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100094fe:	e0b0      	b.n	10009662 <UART_SetConfig+0x3e6>
10009500:	2320      	movs	r3, #32
10009502:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009506:	e0ac      	b.n	10009662 <UART_SetConfig+0x3e6>
10009508:	2340      	movs	r3, #64	; 0x40
1000950a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000950e:	e0a8      	b.n	10009662 <UART_SetConfig+0x3e6>
10009510:	2380      	movs	r3, #128	; 0x80
10009512:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009516:	e0a4      	b.n	10009662 <UART_SetConfig+0x3e6>
10009518:	687b      	ldr	r3, [r7, #4]
1000951a:	681b      	ldr	r3, [r3, #0]
1000951c:	4a1c      	ldr	r2, [pc, #112]	; (10009590 <UART_SetConfig+0x314>)
1000951e:	4293      	cmp	r3, r2
10009520:	d138      	bne.n	10009594 <UART_SetConfig+0x318>
10009522:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009526:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
1000952a:	f003 0307 	and.w	r3, r3, #7
1000952e:	2b04      	cmp	r3, #4
10009530:	d820      	bhi.n	10009574 <UART_SetConfig+0x2f8>
10009532:	a201      	add	r2, pc, #4	; (adr r2, 10009538 <UART_SetConfig+0x2bc>)
10009534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009538:	1000954d 	.word	0x1000954d
1000953c:	10009555 	.word	0x10009555
10009540:	1000955d 	.word	0x1000955d
10009544:	10009565 	.word	0x10009565
10009548:	1000956d 	.word	0x1000956d
1000954c:	2301      	movs	r3, #1
1000954e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009552:	e086      	b.n	10009662 <UART_SetConfig+0x3e6>
10009554:	2308      	movs	r3, #8
10009556:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000955a:	e082      	b.n	10009662 <UART_SetConfig+0x3e6>
1000955c:	2310      	movs	r3, #16
1000955e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009562:	e07e      	b.n	10009662 <UART_SetConfig+0x3e6>
10009564:	2320      	movs	r3, #32
10009566:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000956a:	e07a      	b.n	10009662 <UART_SetConfig+0x3e6>
1000956c:	2340      	movs	r3, #64	; 0x40
1000956e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009572:	e076      	b.n	10009662 <UART_SetConfig+0x3e6>
10009574:	2380      	movs	r3, #128	; 0x80
10009576:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000957a:	e072      	b.n	10009662 <UART_SetConfig+0x3e6>
1000957c:	cfff69f3 	.word	0xcfff69f3
10009580:	4000e000 	.word	0x4000e000
10009584:	4000f000 	.word	0x4000f000
10009588:	40010000 	.word	0x40010000
1000958c:	40011000 	.word	0x40011000
10009590:	44003000 	.word	0x44003000
10009594:	687b      	ldr	r3, [r7, #4]
10009596:	681b      	ldr	r3, [r3, #0]
10009598:	4aab      	ldr	r2, [pc, #684]	; (10009848 <UART_SetConfig+0x5cc>)
1000959a:	4293      	cmp	r3, r2
1000959c:	d12c      	bne.n	100095f8 <UART_SetConfig+0x37c>
1000959e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100095a2:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
100095a6:	f003 0307 	and.w	r3, r3, #7
100095aa:	2b04      	cmp	r3, #4
100095ac:	d820      	bhi.n	100095f0 <UART_SetConfig+0x374>
100095ae:	a201      	add	r2, pc, #4	; (adr r2, 100095b4 <UART_SetConfig+0x338>)
100095b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100095b4:	100095c9 	.word	0x100095c9
100095b8:	100095d1 	.word	0x100095d1
100095bc:	100095d9 	.word	0x100095d9
100095c0:	100095e1 	.word	0x100095e1
100095c4:	100095e9 	.word	0x100095e9
100095c8:	2300      	movs	r3, #0
100095ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100095ce:	e048      	b.n	10009662 <UART_SetConfig+0x3e6>
100095d0:	2308      	movs	r3, #8
100095d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100095d6:	e044      	b.n	10009662 <UART_SetConfig+0x3e6>
100095d8:	2310      	movs	r3, #16
100095da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100095de:	e040      	b.n	10009662 <UART_SetConfig+0x3e6>
100095e0:	2320      	movs	r3, #32
100095e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100095e6:	e03c      	b.n	10009662 <UART_SetConfig+0x3e6>
100095e8:	2340      	movs	r3, #64	; 0x40
100095ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100095ee:	e038      	b.n	10009662 <UART_SetConfig+0x3e6>
100095f0:	2380      	movs	r3, #128	; 0x80
100095f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100095f6:	e034      	b.n	10009662 <UART_SetConfig+0x3e6>
100095f8:	687b      	ldr	r3, [r7, #4]
100095fa:	681b      	ldr	r3, [r3, #0]
100095fc:	4a93      	ldr	r2, [pc, #588]	; (1000984c <UART_SetConfig+0x5d0>)
100095fe:	4293      	cmp	r3, r2
10009600:	d12c      	bne.n	1000965c <UART_SetConfig+0x3e0>
10009602:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009606:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
1000960a:	f003 0307 	and.w	r3, r3, #7
1000960e:	2b04      	cmp	r3, #4
10009610:	d820      	bhi.n	10009654 <UART_SetConfig+0x3d8>
10009612:	a201      	add	r2, pc, #4	; (adr r2, 10009618 <UART_SetConfig+0x39c>)
10009614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009618:	1000962d 	.word	0x1000962d
1000961c:	10009635 	.word	0x10009635
10009620:	1000963d 	.word	0x1000963d
10009624:	10009645 	.word	0x10009645
10009628:	1000964d 	.word	0x1000964d
1000962c:	2300      	movs	r3, #0
1000962e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009632:	e016      	b.n	10009662 <UART_SetConfig+0x3e6>
10009634:	2308      	movs	r3, #8
10009636:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000963a:	e012      	b.n	10009662 <UART_SetConfig+0x3e6>
1000963c:	2310      	movs	r3, #16
1000963e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009642:	e00e      	b.n	10009662 <UART_SetConfig+0x3e6>
10009644:	2320      	movs	r3, #32
10009646:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000964a:	e00a      	b.n	10009662 <UART_SetConfig+0x3e6>
1000964c:	2340      	movs	r3, #64	; 0x40
1000964e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009652:	e006      	b.n	10009662 <UART_SetConfig+0x3e6>
10009654:	2380      	movs	r3, #128	; 0x80
10009656:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000965a:	e002      	b.n	10009662 <UART_SetConfig+0x3e6>
1000965c:	2380      	movs	r3, #128	; 0x80
1000965e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
10009662:	687b      	ldr	r3, [r7, #4]
10009664:	69db      	ldr	r3, [r3, #28]
10009666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
1000966a:	f040 8354 	bne.w	10009d16 <UART_SetConfig+0xa9a>
  {
    switch (clocksource)
1000966e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
10009672:	2b20      	cmp	r3, #32
10009674:	dc4a      	bgt.n	1000970c <UART_SetConfig+0x490>
10009676:	2b00      	cmp	r3, #0
10009678:	f2c0 832b 	blt.w	10009cd2 <UART_SetConfig+0xa56>
1000967c:	2b20      	cmp	r3, #32
1000967e:	f200 8328 	bhi.w	10009cd2 <UART_SetConfig+0xa56>
10009682:	a201      	add	r2, pc, #4	; (adr r2, 10009688 <UART_SetConfig+0x40c>)
10009684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009688:	10009715 	.word	0x10009715
1000968c:	100097cd 	.word	0x100097cd
10009690:	1000988d 	.word	0x1000988d
10009694:	10009cd3 	.word	0x10009cd3
10009698:	10009945 	.word	0x10009945
1000969c:	10009cd3 	.word	0x10009cd3
100096a0:	10009cd3 	.word	0x10009cd3
100096a4:	10009cd3 	.word	0x10009cd3
100096a8:	10009a01 	.word	0x10009a01
100096ac:	10009cd3 	.word	0x10009cd3
100096b0:	10009cd3 	.word	0x10009cd3
100096b4:	10009cd3 	.word	0x10009cd3
100096b8:	10009cd3 	.word	0x10009cd3
100096bc:	10009cd3 	.word	0x10009cd3
100096c0:	10009cd3 	.word	0x10009cd3
100096c4:	10009cd3 	.word	0x10009cd3
100096c8:	10009abd 	.word	0x10009abd
100096cc:	10009cd3 	.word	0x10009cd3
100096d0:	10009cd3 	.word	0x10009cd3
100096d4:	10009cd3 	.word	0x10009cd3
100096d8:	10009cd3 	.word	0x10009cd3
100096dc:	10009cd3 	.word	0x10009cd3
100096e0:	10009cd3 	.word	0x10009cd3
100096e4:	10009cd3 	.word	0x10009cd3
100096e8:	10009cd3 	.word	0x10009cd3
100096ec:	10009cd3 	.word	0x10009cd3
100096f0:	10009cd3 	.word	0x10009cd3
100096f4:	10009cd3 	.word	0x10009cd3
100096f8:	10009cd3 	.word	0x10009cd3
100096fc:	10009cd3 	.word	0x10009cd3
10009700:	10009cd3 	.word	0x10009cd3
10009704:	10009cd3 	.word	0x10009cd3
10009708:	10009b6f 	.word	0x10009b6f
1000970c:	2b40      	cmp	r3, #64	; 0x40
1000970e:	f000 8287 	beq.w	10009c20 <UART_SetConfig+0x9a4>
10009712:	e2de      	b.n	10009cd2 <UART_SetConfig+0xa56>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
10009714:	f7fb fcb0 	bl	10005078 <HAL_RCC_GetPCLK1Freq>
10009718:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000971a:	687b      	ldr	r3, [r7, #4]
1000971c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000971e:	2b00      	cmp	r3, #0
10009720:	d044      	beq.n	100097ac <UART_SetConfig+0x530>
10009722:	687b      	ldr	r3, [r7, #4]
10009724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009726:	2b01      	cmp	r3, #1
10009728:	d03e      	beq.n	100097a8 <UART_SetConfig+0x52c>
1000972a:	687b      	ldr	r3, [r7, #4]
1000972c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000972e:	2b02      	cmp	r3, #2
10009730:	d038      	beq.n	100097a4 <UART_SetConfig+0x528>
10009732:	687b      	ldr	r3, [r7, #4]
10009734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009736:	2b03      	cmp	r3, #3
10009738:	d032      	beq.n	100097a0 <UART_SetConfig+0x524>
1000973a:	687b      	ldr	r3, [r7, #4]
1000973c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000973e:	2b04      	cmp	r3, #4
10009740:	d02c      	beq.n	1000979c <UART_SetConfig+0x520>
10009742:	687b      	ldr	r3, [r7, #4]
10009744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009746:	2b05      	cmp	r3, #5
10009748:	d026      	beq.n	10009798 <UART_SetConfig+0x51c>
1000974a:	687b      	ldr	r3, [r7, #4]
1000974c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000974e:	2b06      	cmp	r3, #6
10009750:	d020      	beq.n	10009794 <UART_SetConfig+0x518>
10009752:	687b      	ldr	r3, [r7, #4]
10009754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009756:	2b07      	cmp	r3, #7
10009758:	d01a      	beq.n	10009790 <UART_SetConfig+0x514>
1000975a:	687b      	ldr	r3, [r7, #4]
1000975c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000975e:	2b08      	cmp	r3, #8
10009760:	d014      	beq.n	1000978c <UART_SetConfig+0x510>
10009762:	687b      	ldr	r3, [r7, #4]
10009764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009766:	2b09      	cmp	r3, #9
10009768:	d00e      	beq.n	10009788 <UART_SetConfig+0x50c>
1000976a:	687b      	ldr	r3, [r7, #4]
1000976c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000976e:	2b0a      	cmp	r3, #10
10009770:	d008      	beq.n	10009784 <UART_SetConfig+0x508>
10009772:	687b      	ldr	r3, [r7, #4]
10009774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009776:	2b0b      	cmp	r3, #11
10009778:	d102      	bne.n	10009780 <UART_SetConfig+0x504>
1000977a:	f44f 7380 	mov.w	r3, #256	; 0x100
1000977e:	e016      	b.n	100097ae <UART_SetConfig+0x532>
10009780:	2301      	movs	r3, #1
10009782:	e014      	b.n	100097ae <UART_SetConfig+0x532>
10009784:	2380      	movs	r3, #128	; 0x80
10009786:	e012      	b.n	100097ae <UART_SetConfig+0x532>
10009788:	2340      	movs	r3, #64	; 0x40
1000978a:	e010      	b.n	100097ae <UART_SetConfig+0x532>
1000978c:	2320      	movs	r3, #32
1000978e:	e00e      	b.n	100097ae <UART_SetConfig+0x532>
10009790:	2310      	movs	r3, #16
10009792:	e00c      	b.n	100097ae <UART_SetConfig+0x532>
10009794:	230c      	movs	r3, #12
10009796:	e00a      	b.n	100097ae <UART_SetConfig+0x532>
10009798:	230a      	movs	r3, #10
1000979a:	e008      	b.n	100097ae <UART_SetConfig+0x532>
1000979c:	2308      	movs	r3, #8
1000979e:	e006      	b.n	100097ae <UART_SetConfig+0x532>
100097a0:	2306      	movs	r3, #6
100097a2:	e004      	b.n	100097ae <UART_SetConfig+0x532>
100097a4:	2304      	movs	r3, #4
100097a6:	e002      	b.n	100097ae <UART_SetConfig+0x532>
100097a8:	2302      	movs	r3, #2
100097aa:	e000      	b.n	100097ae <UART_SetConfig+0x532>
100097ac:	2301      	movs	r3, #1
100097ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100097b0:	fbb2 f3f3 	udiv	r3, r2, r3
100097b4:	005a      	lsls	r2, r3, #1
100097b6:	687b      	ldr	r3, [r7, #4]
100097b8:	685b      	ldr	r3, [r3, #4]
100097ba:	085b      	lsrs	r3, r3, #1
100097bc:	441a      	add	r2, r3
100097be:	687b      	ldr	r3, [r7, #4]
100097c0:	685b      	ldr	r3, [r3, #4]
100097c2:	fbb2 f3f3 	udiv	r3, r2, r3
100097c6:	b29b      	uxth	r3, r3
100097c8:	633b      	str	r3, [r7, #48]	; 0x30
        break;
100097ca:	e286      	b.n	10009cda <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
100097cc:	f7fb fc6f 	bl	100050ae <HAL_RCC_GetPCLK2Freq>
100097d0:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100097d2:	687b      	ldr	r3, [r7, #4]
100097d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100097d6:	2b00      	cmp	r3, #0
100097d8:	d048      	beq.n	1000986c <UART_SetConfig+0x5f0>
100097da:	687b      	ldr	r3, [r7, #4]
100097dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100097de:	2b01      	cmp	r3, #1
100097e0:	d042      	beq.n	10009868 <UART_SetConfig+0x5ec>
100097e2:	687b      	ldr	r3, [r7, #4]
100097e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100097e6:	2b02      	cmp	r3, #2
100097e8:	d03c      	beq.n	10009864 <UART_SetConfig+0x5e8>
100097ea:	687b      	ldr	r3, [r7, #4]
100097ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100097ee:	2b03      	cmp	r3, #3
100097f0:	d036      	beq.n	10009860 <UART_SetConfig+0x5e4>
100097f2:	687b      	ldr	r3, [r7, #4]
100097f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100097f6:	2b04      	cmp	r3, #4
100097f8:	d030      	beq.n	1000985c <UART_SetConfig+0x5e0>
100097fa:	687b      	ldr	r3, [r7, #4]
100097fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100097fe:	2b05      	cmp	r3, #5
10009800:	d02a      	beq.n	10009858 <UART_SetConfig+0x5dc>
10009802:	687b      	ldr	r3, [r7, #4]
10009804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009806:	2b06      	cmp	r3, #6
10009808:	d024      	beq.n	10009854 <UART_SetConfig+0x5d8>
1000980a:	687b      	ldr	r3, [r7, #4]
1000980c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000980e:	2b07      	cmp	r3, #7
10009810:	d01e      	beq.n	10009850 <UART_SetConfig+0x5d4>
10009812:	687b      	ldr	r3, [r7, #4]
10009814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009816:	2b08      	cmp	r3, #8
10009818:	d014      	beq.n	10009844 <UART_SetConfig+0x5c8>
1000981a:	687b      	ldr	r3, [r7, #4]
1000981c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000981e:	2b09      	cmp	r3, #9
10009820:	d00e      	beq.n	10009840 <UART_SetConfig+0x5c4>
10009822:	687b      	ldr	r3, [r7, #4]
10009824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009826:	2b0a      	cmp	r3, #10
10009828:	d008      	beq.n	1000983c <UART_SetConfig+0x5c0>
1000982a:	687b      	ldr	r3, [r7, #4]
1000982c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000982e:	2b0b      	cmp	r3, #11
10009830:	d102      	bne.n	10009838 <UART_SetConfig+0x5bc>
10009832:	f44f 7380 	mov.w	r3, #256	; 0x100
10009836:	e01a      	b.n	1000986e <UART_SetConfig+0x5f2>
10009838:	2301      	movs	r3, #1
1000983a:	e018      	b.n	1000986e <UART_SetConfig+0x5f2>
1000983c:	2380      	movs	r3, #128	; 0x80
1000983e:	e016      	b.n	1000986e <UART_SetConfig+0x5f2>
10009840:	2340      	movs	r3, #64	; 0x40
10009842:	e014      	b.n	1000986e <UART_SetConfig+0x5f2>
10009844:	2320      	movs	r3, #32
10009846:	e012      	b.n	1000986e <UART_SetConfig+0x5f2>
10009848:	40018000 	.word	0x40018000
1000984c:	40019000 	.word	0x40019000
10009850:	2310      	movs	r3, #16
10009852:	e00c      	b.n	1000986e <UART_SetConfig+0x5f2>
10009854:	230c      	movs	r3, #12
10009856:	e00a      	b.n	1000986e <UART_SetConfig+0x5f2>
10009858:	230a      	movs	r3, #10
1000985a:	e008      	b.n	1000986e <UART_SetConfig+0x5f2>
1000985c:	2308      	movs	r3, #8
1000985e:	e006      	b.n	1000986e <UART_SetConfig+0x5f2>
10009860:	2306      	movs	r3, #6
10009862:	e004      	b.n	1000986e <UART_SetConfig+0x5f2>
10009864:	2304      	movs	r3, #4
10009866:	e002      	b.n	1000986e <UART_SetConfig+0x5f2>
10009868:	2302      	movs	r3, #2
1000986a:	e000      	b.n	1000986e <UART_SetConfig+0x5f2>
1000986c:	2301      	movs	r3, #1
1000986e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10009870:	fbb2 f3f3 	udiv	r3, r2, r3
10009874:	005a      	lsls	r2, r3, #1
10009876:	687b      	ldr	r3, [r7, #4]
10009878:	685b      	ldr	r3, [r3, #4]
1000987a:	085b      	lsrs	r3, r3, #1
1000987c:	441a      	add	r2, r3
1000987e:	687b      	ldr	r3, [r7, #4]
10009880:	685b      	ldr	r3, [r3, #4]
10009882:	fbb2 f3f3 	udiv	r3, r2, r3
10009886:	b29b      	uxth	r3, r3
10009888:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000988a:	e226      	b.n	10009cda <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PCLK5:
        pclk = HAL_RCC_GetPCLK5Freq();
1000988c:	f7fb fc45 	bl	1000511a <HAL_RCC_GetPCLK5Freq>
10009890:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009892:	687b      	ldr	r3, [r7, #4]
10009894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009896:	2b00      	cmp	r3, #0
10009898:	d044      	beq.n	10009924 <UART_SetConfig+0x6a8>
1000989a:	687b      	ldr	r3, [r7, #4]
1000989c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000989e:	2b01      	cmp	r3, #1
100098a0:	d03e      	beq.n	10009920 <UART_SetConfig+0x6a4>
100098a2:	687b      	ldr	r3, [r7, #4]
100098a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100098a6:	2b02      	cmp	r3, #2
100098a8:	d038      	beq.n	1000991c <UART_SetConfig+0x6a0>
100098aa:	687b      	ldr	r3, [r7, #4]
100098ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100098ae:	2b03      	cmp	r3, #3
100098b0:	d032      	beq.n	10009918 <UART_SetConfig+0x69c>
100098b2:	687b      	ldr	r3, [r7, #4]
100098b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100098b6:	2b04      	cmp	r3, #4
100098b8:	d02c      	beq.n	10009914 <UART_SetConfig+0x698>
100098ba:	687b      	ldr	r3, [r7, #4]
100098bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100098be:	2b05      	cmp	r3, #5
100098c0:	d026      	beq.n	10009910 <UART_SetConfig+0x694>
100098c2:	687b      	ldr	r3, [r7, #4]
100098c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100098c6:	2b06      	cmp	r3, #6
100098c8:	d020      	beq.n	1000990c <UART_SetConfig+0x690>
100098ca:	687b      	ldr	r3, [r7, #4]
100098cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100098ce:	2b07      	cmp	r3, #7
100098d0:	d01a      	beq.n	10009908 <UART_SetConfig+0x68c>
100098d2:	687b      	ldr	r3, [r7, #4]
100098d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100098d6:	2b08      	cmp	r3, #8
100098d8:	d014      	beq.n	10009904 <UART_SetConfig+0x688>
100098da:	687b      	ldr	r3, [r7, #4]
100098dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100098de:	2b09      	cmp	r3, #9
100098e0:	d00e      	beq.n	10009900 <UART_SetConfig+0x684>
100098e2:	687b      	ldr	r3, [r7, #4]
100098e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100098e6:	2b0a      	cmp	r3, #10
100098e8:	d008      	beq.n	100098fc <UART_SetConfig+0x680>
100098ea:	687b      	ldr	r3, [r7, #4]
100098ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100098ee:	2b0b      	cmp	r3, #11
100098f0:	d102      	bne.n	100098f8 <UART_SetConfig+0x67c>
100098f2:	f44f 7380 	mov.w	r3, #256	; 0x100
100098f6:	e016      	b.n	10009926 <UART_SetConfig+0x6aa>
100098f8:	2301      	movs	r3, #1
100098fa:	e014      	b.n	10009926 <UART_SetConfig+0x6aa>
100098fc:	2380      	movs	r3, #128	; 0x80
100098fe:	e012      	b.n	10009926 <UART_SetConfig+0x6aa>
10009900:	2340      	movs	r3, #64	; 0x40
10009902:	e010      	b.n	10009926 <UART_SetConfig+0x6aa>
10009904:	2320      	movs	r3, #32
10009906:	e00e      	b.n	10009926 <UART_SetConfig+0x6aa>
10009908:	2310      	movs	r3, #16
1000990a:	e00c      	b.n	10009926 <UART_SetConfig+0x6aa>
1000990c:	230c      	movs	r3, #12
1000990e:	e00a      	b.n	10009926 <UART_SetConfig+0x6aa>
10009910:	230a      	movs	r3, #10
10009912:	e008      	b.n	10009926 <UART_SetConfig+0x6aa>
10009914:	2308      	movs	r3, #8
10009916:	e006      	b.n	10009926 <UART_SetConfig+0x6aa>
10009918:	2306      	movs	r3, #6
1000991a:	e004      	b.n	10009926 <UART_SetConfig+0x6aa>
1000991c:	2304      	movs	r3, #4
1000991e:	e002      	b.n	10009926 <UART_SetConfig+0x6aa>
10009920:	2302      	movs	r3, #2
10009922:	e000      	b.n	10009926 <UART_SetConfig+0x6aa>
10009924:	2301      	movs	r3, #1
10009926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10009928:	fbb2 f3f3 	udiv	r3, r2, r3
1000992c:	005a      	lsls	r2, r3, #1
1000992e:	687b      	ldr	r3, [r7, #4]
10009930:	685b      	ldr	r3, [r3, #4]
10009932:	085b      	lsrs	r3, r3, #1
10009934:	441a      	add	r2, r3
10009936:	687b      	ldr	r3, [r7, #4]
10009938:	685b      	ldr	r3, [r3, #4]
1000993a:	fbb2 f3f3 	udiv	r3, r2, r3
1000993e:	b29b      	uxth	r3, r3
10009940:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009942:	e1ca      	b.n	10009cda <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PLL3Q:
        HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10009944:	f107 0314 	add.w	r3, r7, #20
10009948:	4618      	mov	r0, r3
1000994a:	f7fb f993 	bl	10004c74 <HAL_RCC_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000994e:	69ba      	ldr	r2, [r7, #24]
10009950:	687b      	ldr	r3, [r7, #4]
10009952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009954:	2b00      	cmp	r3, #0
10009956:	d044      	beq.n	100099e2 <UART_SetConfig+0x766>
10009958:	687b      	ldr	r3, [r7, #4]
1000995a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000995c:	2b01      	cmp	r3, #1
1000995e:	d03e      	beq.n	100099de <UART_SetConfig+0x762>
10009960:	687b      	ldr	r3, [r7, #4]
10009962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009964:	2b02      	cmp	r3, #2
10009966:	d038      	beq.n	100099da <UART_SetConfig+0x75e>
10009968:	687b      	ldr	r3, [r7, #4]
1000996a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000996c:	2b03      	cmp	r3, #3
1000996e:	d032      	beq.n	100099d6 <UART_SetConfig+0x75a>
10009970:	687b      	ldr	r3, [r7, #4]
10009972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009974:	2b04      	cmp	r3, #4
10009976:	d02c      	beq.n	100099d2 <UART_SetConfig+0x756>
10009978:	687b      	ldr	r3, [r7, #4]
1000997a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000997c:	2b05      	cmp	r3, #5
1000997e:	d026      	beq.n	100099ce <UART_SetConfig+0x752>
10009980:	687b      	ldr	r3, [r7, #4]
10009982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009984:	2b06      	cmp	r3, #6
10009986:	d020      	beq.n	100099ca <UART_SetConfig+0x74e>
10009988:	687b      	ldr	r3, [r7, #4]
1000998a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000998c:	2b07      	cmp	r3, #7
1000998e:	d01a      	beq.n	100099c6 <UART_SetConfig+0x74a>
10009990:	687b      	ldr	r3, [r7, #4]
10009992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009994:	2b08      	cmp	r3, #8
10009996:	d014      	beq.n	100099c2 <UART_SetConfig+0x746>
10009998:	687b      	ldr	r3, [r7, #4]
1000999a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000999c:	2b09      	cmp	r3, #9
1000999e:	d00e      	beq.n	100099be <UART_SetConfig+0x742>
100099a0:	687b      	ldr	r3, [r7, #4]
100099a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100099a4:	2b0a      	cmp	r3, #10
100099a6:	d008      	beq.n	100099ba <UART_SetConfig+0x73e>
100099a8:	687b      	ldr	r3, [r7, #4]
100099aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100099ac:	2b0b      	cmp	r3, #11
100099ae:	d102      	bne.n	100099b6 <UART_SetConfig+0x73a>
100099b0:	f44f 7380 	mov.w	r3, #256	; 0x100
100099b4:	e016      	b.n	100099e4 <UART_SetConfig+0x768>
100099b6:	2301      	movs	r3, #1
100099b8:	e014      	b.n	100099e4 <UART_SetConfig+0x768>
100099ba:	2380      	movs	r3, #128	; 0x80
100099bc:	e012      	b.n	100099e4 <UART_SetConfig+0x768>
100099be:	2340      	movs	r3, #64	; 0x40
100099c0:	e010      	b.n	100099e4 <UART_SetConfig+0x768>
100099c2:	2320      	movs	r3, #32
100099c4:	e00e      	b.n	100099e4 <UART_SetConfig+0x768>
100099c6:	2310      	movs	r3, #16
100099c8:	e00c      	b.n	100099e4 <UART_SetConfig+0x768>
100099ca:	230c      	movs	r3, #12
100099cc:	e00a      	b.n	100099e4 <UART_SetConfig+0x768>
100099ce:	230a      	movs	r3, #10
100099d0:	e008      	b.n	100099e4 <UART_SetConfig+0x768>
100099d2:	2308      	movs	r3, #8
100099d4:	e006      	b.n	100099e4 <UART_SetConfig+0x768>
100099d6:	2306      	movs	r3, #6
100099d8:	e004      	b.n	100099e4 <UART_SetConfig+0x768>
100099da:	2304      	movs	r3, #4
100099dc:	e002      	b.n	100099e4 <UART_SetConfig+0x768>
100099de:	2302      	movs	r3, #2
100099e0:	e000      	b.n	100099e4 <UART_SetConfig+0x768>
100099e2:	2301      	movs	r3, #1
100099e4:	fbb2 f3f3 	udiv	r3, r2, r3
100099e8:	005a      	lsls	r2, r3, #1
100099ea:	687b      	ldr	r3, [r7, #4]
100099ec:	685b      	ldr	r3, [r3, #4]
100099ee:	085b      	lsrs	r3, r3, #1
100099f0:	441a      	add	r2, r3
100099f2:	687b      	ldr	r3, [r7, #4]
100099f4:	685b      	ldr	r3, [r3, #4]
100099f6:	fbb2 f3f3 	udiv	r3, r2, r3
100099fa:	b29b      	uxth	r3, r3
100099fc:	633b      	str	r3, [r7, #48]	; 0x30
        break;
100099fe:	e16c      	b.n	10009cda <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PLL4Q:
        HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10009a00:	f107 0308 	add.w	r3, r7, #8
10009a04:	4618      	mov	r0, r3
10009a06:	f7fb fa2f 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll4_clocks.PLL4_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009a0a:	68fa      	ldr	r2, [r7, #12]
10009a0c:	687b      	ldr	r3, [r7, #4]
10009a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009a10:	2b00      	cmp	r3, #0
10009a12:	d044      	beq.n	10009a9e <UART_SetConfig+0x822>
10009a14:	687b      	ldr	r3, [r7, #4]
10009a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009a18:	2b01      	cmp	r3, #1
10009a1a:	d03e      	beq.n	10009a9a <UART_SetConfig+0x81e>
10009a1c:	687b      	ldr	r3, [r7, #4]
10009a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009a20:	2b02      	cmp	r3, #2
10009a22:	d038      	beq.n	10009a96 <UART_SetConfig+0x81a>
10009a24:	687b      	ldr	r3, [r7, #4]
10009a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009a28:	2b03      	cmp	r3, #3
10009a2a:	d032      	beq.n	10009a92 <UART_SetConfig+0x816>
10009a2c:	687b      	ldr	r3, [r7, #4]
10009a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009a30:	2b04      	cmp	r3, #4
10009a32:	d02c      	beq.n	10009a8e <UART_SetConfig+0x812>
10009a34:	687b      	ldr	r3, [r7, #4]
10009a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009a38:	2b05      	cmp	r3, #5
10009a3a:	d026      	beq.n	10009a8a <UART_SetConfig+0x80e>
10009a3c:	687b      	ldr	r3, [r7, #4]
10009a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009a40:	2b06      	cmp	r3, #6
10009a42:	d020      	beq.n	10009a86 <UART_SetConfig+0x80a>
10009a44:	687b      	ldr	r3, [r7, #4]
10009a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009a48:	2b07      	cmp	r3, #7
10009a4a:	d01a      	beq.n	10009a82 <UART_SetConfig+0x806>
10009a4c:	687b      	ldr	r3, [r7, #4]
10009a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009a50:	2b08      	cmp	r3, #8
10009a52:	d014      	beq.n	10009a7e <UART_SetConfig+0x802>
10009a54:	687b      	ldr	r3, [r7, #4]
10009a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009a58:	2b09      	cmp	r3, #9
10009a5a:	d00e      	beq.n	10009a7a <UART_SetConfig+0x7fe>
10009a5c:	687b      	ldr	r3, [r7, #4]
10009a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009a60:	2b0a      	cmp	r3, #10
10009a62:	d008      	beq.n	10009a76 <UART_SetConfig+0x7fa>
10009a64:	687b      	ldr	r3, [r7, #4]
10009a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009a68:	2b0b      	cmp	r3, #11
10009a6a:	d102      	bne.n	10009a72 <UART_SetConfig+0x7f6>
10009a6c:	f44f 7380 	mov.w	r3, #256	; 0x100
10009a70:	e016      	b.n	10009aa0 <UART_SetConfig+0x824>
10009a72:	2301      	movs	r3, #1
10009a74:	e014      	b.n	10009aa0 <UART_SetConfig+0x824>
10009a76:	2380      	movs	r3, #128	; 0x80
10009a78:	e012      	b.n	10009aa0 <UART_SetConfig+0x824>
10009a7a:	2340      	movs	r3, #64	; 0x40
10009a7c:	e010      	b.n	10009aa0 <UART_SetConfig+0x824>
10009a7e:	2320      	movs	r3, #32
10009a80:	e00e      	b.n	10009aa0 <UART_SetConfig+0x824>
10009a82:	2310      	movs	r3, #16
10009a84:	e00c      	b.n	10009aa0 <UART_SetConfig+0x824>
10009a86:	230c      	movs	r3, #12
10009a88:	e00a      	b.n	10009aa0 <UART_SetConfig+0x824>
10009a8a:	230a      	movs	r3, #10
10009a8c:	e008      	b.n	10009aa0 <UART_SetConfig+0x824>
10009a8e:	2308      	movs	r3, #8
10009a90:	e006      	b.n	10009aa0 <UART_SetConfig+0x824>
10009a92:	2306      	movs	r3, #6
10009a94:	e004      	b.n	10009aa0 <UART_SetConfig+0x824>
10009a96:	2304      	movs	r3, #4
10009a98:	e002      	b.n	10009aa0 <UART_SetConfig+0x824>
10009a9a:	2302      	movs	r3, #2
10009a9c:	e000      	b.n	10009aa0 <UART_SetConfig+0x824>
10009a9e:	2301      	movs	r3, #1
10009aa0:	fbb2 f3f3 	udiv	r3, r2, r3
10009aa4:	005a      	lsls	r2, r3, #1
10009aa6:	687b      	ldr	r3, [r7, #4]
10009aa8:	685b      	ldr	r3, [r3, #4]
10009aaa:	085b      	lsrs	r3, r3, #1
10009aac:	441a      	add	r2, r3
10009aae:	687b      	ldr	r3, [r7, #4]
10009ab0:	685b      	ldr	r3, [r3, #4]
10009ab2:	fbb2 f3f3 	udiv	r3, r2, r3
10009ab6:	b29b      	uxth	r3, r3
10009ab8:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009aba:	e10e      	b.n	10009cda <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009abc:	687b      	ldr	r3, [r7, #4]
10009abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ac0:	2b00      	cmp	r3, #0
10009ac2:	d044      	beq.n	10009b4e <UART_SetConfig+0x8d2>
10009ac4:	687b      	ldr	r3, [r7, #4]
10009ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ac8:	2b01      	cmp	r3, #1
10009aca:	d03e      	beq.n	10009b4a <UART_SetConfig+0x8ce>
10009acc:	687b      	ldr	r3, [r7, #4]
10009ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ad0:	2b02      	cmp	r3, #2
10009ad2:	d038      	beq.n	10009b46 <UART_SetConfig+0x8ca>
10009ad4:	687b      	ldr	r3, [r7, #4]
10009ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ad8:	2b03      	cmp	r3, #3
10009ada:	d032      	beq.n	10009b42 <UART_SetConfig+0x8c6>
10009adc:	687b      	ldr	r3, [r7, #4]
10009ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ae0:	2b04      	cmp	r3, #4
10009ae2:	d02c      	beq.n	10009b3e <UART_SetConfig+0x8c2>
10009ae4:	687b      	ldr	r3, [r7, #4]
10009ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ae8:	2b05      	cmp	r3, #5
10009aea:	d026      	beq.n	10009b3a <UART_SetConfig+0x8be>
10009aec:	687b      	ldr	r3, [r7, #4]
10009aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009af0:	2b06      	cmp	r3, #6
10009af2:	d020      	beq.n	10009b36 <UART_SetConfig+0x8ba>
10009af4:	687b      	ldr	r3, [r7, #4]
10009af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009af8:	2b07      	cmp	r3, #7
10009afa:	d01a      	beq.n	10009b32 <UART_SetConfig+0x8b6>
10009afc:	687b      	ldr	r3, [r7, #4]
10009afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b00:	2b08      	cmp	r3, #8
10009b02:	d014      	beq.n	10009b2e <UART_SetConfig+0x8b2>
10009b04:	687b      	ldr	r3, [r7, #4]
10009b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b08:	2b09      	cmp	r3, #9
10009b0a:	d00e      	beq.n	10009b2a <UART_SetConfig+0x8ae>
10009b0c:	687b      	ldr	r3, [r7, #4]
10009b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b10:	2b0a      	cmp	r3, #10
10009b12:	d008      	beq.n	10009b26 <UART_SetConfig+0x8aa>
10009b14:	687b      	ldr	r3, [r7, #4]
10009b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b18:	2b0b      	cmp	r3, #11
10009b1a:	d102      	bne.n	10009b22 <UART_SetConfig+0x8a6>
10009b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
10009b20:	e016      	b.n	10009b50 <UART_SetConfig+0x8d4>
10009b22:	2301      	movs	r3, #1
10009b24:	e014      	b.n	10009b50 <UART_SetConfig+0x8d4>
10009b26:	2380      	movs	r3, #128	; 0x80
10009b28:	e012      	b.n	10009b50 <UART_SetConfig+0x8d4>
10009b2a:	2340      	movs	r3, #64	; 0x40
10009b2c:	e010      	b.n	10009b50 <UART_SetConfig+0x8d4>
10009b2e:	2320      	movs	r3, #32
10009b30:	e00e      	b.n	10009b50 <UART_SetConfig+0x8d4>
10009b32:	2310      	movs	r3, #16
10009b34:	e00c      	b.n	10009b50 <UART_SetConfig+0x8d4>
10009b36:	230c      	movs	r3, #12
10009b38:	e00a      	b.n	10009b50 <UART_SetConfig+0x8d4>
10009b3a:	230a      	movs	r3, #10
10009b3c:	e008      	b.n	10009b50 <UART_SetConfig+0x8d4>
10009b3e:	2308      	movs	r3, #8
10009b40:	e006      	b.n	10009b50 <UART_SetConfig+0x8d4>
10009b42:	2306      	movs	r3, #6
10009b44:	e004      	b.n	10009b50 <UART_SetConfig+0x8d4>
10009b46:	2304      	movs	r3, #4
10009b48:	e002      	b.n	10009b50 <UART_SetConfig+0x8d4>
10009b4a:	2302      	movs	r3, #2
10009b4c:	e000      	b.n	10009b50 <UART_SetConfig+0x8d4>
10009b4e:	2301      	movs	r3, #1
10009b50:	4a9a      	ldr	r2, [pc, #616]	; (10009dbc <UART_SetConfig+0xb40>)
10009b52:	fbb2 f3f3 	udiv	r3, r2, r3
10009b56:	005a      	lsls	r2, r3, #1
10009b58:	687b      	ldr	r3, [r7, #4]
10009b5a:	685b      	ldr	r3, [r3, #4]
10009b5c:	085b      	lsrs	r3, r3, #1
10009b5e:	441a      	add	r2, r3
10009b60:	687b      	ldr	r3, [r7, #4]
10009b62:	685b      	ldr	r3, [r3, #4]
10009b64:	fbb2 f3f3 	udiv	r3, r2, r3
10009b68:	b29b      	uxth	r3, r3
10009b6a:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009b6c:	e0b5      	b.n	10009cda <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009b6e:	687b      	ldr	r3, [r7, #4]
10009b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b72:	2b00      	cmp	r3, #0
10009b74:	d044      	beq.n	10009c00 <UART_SetConfig+0x984>
10009b76:	687b      	ldr	r3, [r7, #4]
10009b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b7a:	2b01      	cmp	r3, #1
10009b7c:	d03e      	beq.n	10009bfc <UART_SetConfig+0x980>
10009b7e:	687b      	ldr	r3, [r7, #4]
10009b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b82:	2b02      	cmp	r3, #2
10009b84:	d038      	beq.n	10009bf8 <UART_SetConfig+0x97c>
10009b86:	687b      	ldr	r3, [r7, #4]
10009b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b8a:	2b03      	cmp	r3, #3
10009b8c:	d032      	beq.n	10009bf4 <UART_SetConfig+0x978>
10009b8e:	687b      	ldr	r3, [r7, #4]
10009b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b92:	2b04      	cmp	r3, #4
10009b94:	d02c      	beq.n	10009bf0 <UART_SetConfig+0x974>
10009b96:	687b      	ldr	r3, [r7, #4]
10009b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b9a:	2b05      	cmp	r3, #5
10009b9c:	d026      	beq.n	10009bec <UART_SetConfig+0x970>
10009b9e:	687b      	ldr	r3, [r7, #4]
10009ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ba2:	2b06      	cmp	r3, #6
10009ba4:	d020      	beq.n	10009be8 <UART_SetConfig+0x96c>
10009ba6:	687b      	ldr	r3, [r7, #4]
10009ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009baa:	2b07      	cmp	r3, #7
10009bac:	d01a      	beq.n	10009be4 <UART_SetConfig+0x968>
10009bae:	687b      	ldr	r3, [r7, #4]
10009bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009bb2:	2b08      	cmp	r3, #8
10009bb4:	d014      	beq.n	10009be0 <UART_SetConfig+0x964>
10009bb6:	687b      	ldr	r3, [r7, #4]
10009bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009bba:	2b09      	cmp	r3, #9
10009bbc:	d00e      	beq.n	10009bdc <UART_SetConfig+0x960>
10009bbe:	687b      	ldr	r3, [r7, #4]
10009bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009bc2:	2b0a      	cmp	r3, #10
10009bc4:	d008      	beq.n	10009bd8 <UART_SetConfig+0x95c>
10009bc6:	687b      	ldr	r3, [r7, #4]
10009bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009bca:	2b0b      	cmp	r3, #11
10009bcc:	d102      	bne.n	10009bd4 <UART_SetConfig+0x958>
10009bce:	f44f 7380 	mov.w	r3, #256	; 0x100
10009bd2:	e016      	b.n	10009c02 <UART_SetConfig+0x986>
10009bd4:	2301      	movs	r3, #1
10009bd6:	e014      	b.n	10009c02 <UART_SetConfig+0x986>
10009bd8:	2380      	movs	r3, #128	; 0x80
10009bda:	e012      	b.n	10009c02 <UART_SetConfig+0x986>
10009bdc:	2340      	movs	r3, #64	; 0x40
10009bde:	e010      	b.n	10009c02 <UART_SetConfig+0x986>
10009be0:	2320      	movs	r3, #32
10009be2:	e00e      	b.n	10009c02 <UART_SetConfig+0x986>
10009be4:	2310      	movs	r3, #16
10009be6:	e00c      	b.n	10009c02 <UART_SetConfig+0x986>
10009be8:	230c      	movs	r3, #12
10009bea:	e00a      	b.n	10009c02 <UART_SetConfig+0x986>
10009bec:	230a      	movs	r3, #10
10009bee:	e008      	b.n	10009c02 <UART_SetConfig+0x986>
10009bf0:	2308      	movs	r3, #8
10009bf2:	e006      	b.n	10009c02 <UART_SetConfig+0x986>
10009bf4:	2306      	movs	r3, #6
10009bf6:	e004      	b.n	10009c02 <UART_SetConfig+0x986>
10009bf8:	2304      	movs	r3, #4
10009bfa:	e002      	b.n	10009c02 <UART_SetConfig+0x986>
10009bfc:	2302      	movs	r3, #2
10009bfe:	e000      	b.n	10009c02 <UART_SetConfig+0x986>
10009c00:	2301      	movs	r3, #1
10009c02:	4a6f      	ldr	r2, [pc, #444]	; (10009dc0 <UART_SetConfig+0xb44>)
10009c04:	fbb2 f3f3 	udiv	r3, r2, r3
10009c08:	005a      	lsls	r2, r3, #1
10009c0a:	687b      	ldr	r3, [r7, #4]
10009c0c:	685b      	ldr	r3, [r3, #4]
10009c0e:	085b      	lsrs	r3, r3, #1
10009c10:	441a      	add	r2, r3
10009c12:	687b      	ldr	r3, [r7, #4]
10009c14:	685b      	ldr	r3, [r3, #4]
10009c16:	fbb2 f3f3 	udiv	r3, r2, r3
10009c1a:	b29b      	uxth	r3, r3
10009c1c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009c1e:	e05c      	b.n	10009cda <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_HSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009c20:	687b      	ldr	r3, [r7, #4]
10009c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c24:	2b00      	cmp	r3, #0
10009c26:	d044      	beq.n	10009cb2 <UART_SetConfig+0xa36>
10009c28:	687b      	ldr	r3, [r7, #4]
10009c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c2c:	2b01      	cmp	r3, #1
10009c2e:	d03e      	beq.n	10009cae <UART_SetConfig+0xa32>
10009c30:	687b      	ldr	r3, [r7, #4]
10009c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c34:	2b02      	cmp	r3, #2
10009c36:	d038      	beq.n	10009caa <UART_SetConfig+0xa2e>
10009c38:	687b      	ldr	r3, [r7, #4]
10009c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c3c:	2b03      	cmp	r3, #3
10009c3e:	d032      	beq.n	10009ca6 <UART_SetConfig+0xa2a>
10009c40:	687b      	ldr	r3, [r7, #4]
10009c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c44:	2b04      	cmp	r3, #4
10009c46:	d02c      	beq.n	10009ca2 <UART_SetConfig+0xa26>
10009c48:	687b      	ldr	r3, [r7, #4]
10009c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c4c:	2b05      	cmp	r3, #5
10009c4e:	d026      	beq.n	10009c9e <UART_SetConfig+0xa22>
10009c50:	687b      	ldr	r3, [r7, #4]
10009c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c54:	2b06      	cmp	r3, #6
10009c56:	d020      	beq.n	10009c9a <UART_SetConfig+0xa1e>
10009c58:	687b      	ldr	r3, [r7, #4]
10009c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c5c:	2b07      	cmp	r3, #7
10009c5e:	d01a      	beq.n	10009c96 <UART_SetConfig+0xa1a>
10009c60:	687b      	ldr	r3, [r7, #4]
10009c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c64:	2b08      	cmp	r3, #8
10009c66:	d014      	beq.n	10009c92 <UART_SetConfig+0xa16>
10009c68:	687b      	ldr	r3, [r7, #4]
10009c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c6c:	2b09      	cmp	r3, #9
10009c6e:	d00e      	beq.n	10009c8e <UART_SetConfig+0xa12>
10009c70:	687b      	ldr	r3, [r7, #4]
10009c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c74:	2b0a      	cmp	r3, #10
10009c76:	d008      	beq.n	10009c8a <UART_SetConfig+0xa0e>
10009c78:	687b      	ldr	r3, [r7, #4]
10009c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c7c:	2b0b      	cmp	r3, #11
10009c7e:	d102      	bne.n	10009c86 <UART_SetConfig+0xa0a>
10009c80:	f44f 7380 	mov.w	r3, #256	; 0x100
10009c84:	e016      	b.n	10009cb4 <UART_SetConfig+0xa38>
10009c86:	2301      	movs	r3, #1
10009c88:	e014      	b.n	10009cb4 <UART_SetConfig+0xa38>
10009c8a:	2380      	movs	r3, #128	; 0x80
10009c8c:	e012      	b.n	10009cb4 <UART_SetConfig+0xa38>
10009c8e:	2340      	movs	r3, #64	; 0x40
10009c90:	e010      	b.n	10009cb4 <UART_SetConfig+0xa38>
10009c92:	2320      	movs	r3, #32
10009c94:	e00e      	b.n	10009cb4 <UART_SetConfig+0xa38>
10009c96:	2310      	movs	r3, #16
10009c98:	e00c      	b.n	10009cb4 <UART_SetConfig+0xa38>
10009c9a:	230c      	movs	r3, #12
10009c9c:	e00a      	b.n	10009cb4 <UART_SetConfig+0xa38>
10009c9e:	230a      	movs	r3, #10
10009ca0:	e008      	b.n	10009cb4 <UART_SetConfig+0xa38>
10009ca2:	2308      	movs	r3, #8
10009ca4:	e006      	b.n	10009cb4 <UART_SetConfig+0xa38>
10009ca6:	2306      	movs	r3, #6
10009ca8:	e004      	b.n	10009cb4 <UART_SetConfig+0xa38>
10009caa:	2304      	movs	r3, #4
10009cac:	e002      	b.n	10009cb4 <UART_SetConfig+0xa38>
10009cae:	2302      	movs	r3, #2
10009cb0:	e000      	b.n	10009cb4 <UART_SetConfig+0xa38>
10009cb2:	2301      	movs	r3, #1
10009cb4:	4a43      	ldr	r2, [pc, #268]	; (10009dc4 <UART_SetConfig+0xb48>)
10009cb6:	fbb2 f3f3 	udiv	r3, r2, r3
10009cba:	005a      	lsls	r2, r3, #1
10009cbc:	687b      	ldr	r3, [r7, #4]
10009cbe:	685b      	ldr	r3, [r3, #4]
10009cc0:	085b      	lsrs	r3, r3, #1
10009cc2:	441a      	add	r2, r3
10009cc4:	687b      	ldr	r3, [r7, #4]
10009cc6:	685b      	ldr	r3, [r3, #4]
10009cc8:	fbb2 f3f3 	udiv	r3, r2, r3
10009ccc:	b29b      	uxth	r3, r3
10009cce:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009cd0:	e003      	b.n	10009cda <UART_SetConfig+0xa5e>
      default:
        ret = HAL_ERROR;
10009cd2:	2301      	movs	r3, #1
10009cd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
10009cd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10009cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009cdc:	2b0f      	cmp	r3, #15
10009cde:	d916      	bls.n	10009d0e <UART_SetConfig+0xa92>
10009ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
10009ce6:	d212      	bcs.n	10009d0e <UART_SetConfig+0xa92>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
10009ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009cea:	b29b      	uxth	r3, r3
10009cec:	f023 030f 	bic.w	r3, r3, #15
10009cf0:	847b      	strh	r3, [r7, #34]	; 0x22
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
10009cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009cf4:	085b      	lsrs	r3, r3, #1
10009cf6:	b29b      	uxth	r3, r3
10009cf8:	f003 0307 	and.w	r3, r3, #7
10009cfc:	b29a      	uxth	r2, r3
10009cfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
10009d00:	4313      	orrs	r3, r2
10009d02:	847b      	strh	r3, [r7, #34]	; 0x22
      huart->Instance->BRR = brrtemp;
10009d04:	687b      	ldr	r3, [r7, #4]
10009d06:	681b      	ldr	r3, [r3, #0]
10009d08:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
10009d0a:	60da      	str	r2, [r3, #12]
10009d0c:	e342      	b.n	1000a394 <UART_SetConfig+0x1118>
    }
    else
    {
      ret = HAL_ERROR;
10009d0e:	2301      	movs	r3, #1
10009d10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
10009d14:	e33e      	b.n	1000a394 <UART_SetConfig+0x1118>
    }
  }
  else
  {
    switch (clocksource)
10009d16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
10009d1a:	2b20      	cmp	r3, #32
10009d1c:	dc4a      	bgt.n	10009db4 <UART_SetConfig+0xb38>
10009d1e:	2b00      	cmp	r3, #0
10009d20:	f2c0 8325 	blt.w	1000a36e <UART_SetConfig+0x10f2>
10009d24:	2b20      	cmp	r3, #32
10009d26:	f200 8322 	bhi.w	1000a36e <UART_SetConfig+0x10f2>
10009d2a:	a201      	add	r2, pc, #4	; (adr r2, 10009d30 <UART_SetConfig+0xab4>)
10009d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009d30:	10009dc9 	.word	0x10009dc9
10009d34:	10009e7f 	.word	0x10009e7f
10009d38:	10009f35 	.word	0x10009f35
10009d3c:	1000a36f 	.word	0x1000a36f
10009d40:	10009feb 	.word	0x10009feb
10009d44:	1000a36f 	.word	0x1000a36f
10009d48:	1000a36f 	.word	0x1000a36f
10009d4c:	1000a36f 	.word	0x1000a36f
10009d50:	1000a0a5 	.word	0x1000a0a5
10009d54:	1000a36f 	.word	0x1000a36f
10009d58:	1000a36f 	.word	0x1000a36f
10009d5c:	1000a36f 	.word	0x1000a36f
10009d60:	1000a36f 	.word	0x1000a36f
10009d64:	1000a36f 	.word	0x1000a36f
10009d68:	1000a36f 	.word	0x1000a36f
10009d6c:	1000a36f 	.word	0x1000a36f
10009d70:	1000a15f 	.word	0x1000a15f
10009d74:	1000a36f 	.word	0x1000a36f
10009d78:	1000a36f 	.word	0x1000a36f
10009d7c:	1000a36f 	.word	0x1000a36f
10009d80:	1000a36f 	.word	0x1000a36f
10009d84:	1000a36f 	.word	0x1000a36f
10009d88:	1000a36f 	.word	0x1000a36f
10009d8c:	1000a36f 	.word	0x1000a36f
10009d90:	1000a36f 	.word	0x1000a36f
10009d94:	1000a36f 	.word	0x1000a36f
10009d98:	1000a36f 	.word	0x1000a36f
10009d9c:	1000a36f 	.word	0x1000a36f
10009da0:	1000a36f 	.word	0x1000a36f
10009da4:	1000a36f 	.word	0x1000a36f
10009da8:	1000a36f 	.word	0x1000a36f
10009dac:	1000a36f 	.word	0x1000a36f
10009db0:	1000a20f 	.word	0x1000a20f
10009db4:	2b40      	cmp	r3, #64	; 0x40
10009db6:	f000 8282 	beq.w	1000a2be <UART_SetConfig+0x1042>
10009dba:	e2d8      	b.n	1000a36e <UART_SetConfig+0x10f2>
10009dbc:	03d09000 	.word	0x03d09000
10009dc0:	003d0900 	.word	0x003d0900
10009dc4:	016e3600 	.word	0x016e3600
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
10009dc8:	f7fb f956 	bl	10005078 <HAL_RCC_GetPCLK1Freq>
10009dcc:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009dce:	687b      	ldr	r3, [r7, #4]
10009dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009dd2:	2b00      	cmp	r3, #0
10009dd4:	d044      	beq.n	10009e60 <UART_SetConfig+0xbe4>
10009dd6:	687b      	ldr	r3, [r7, #4]
10009dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009dda:	2b01      	cmp	r3, #1
10009ddc:	d03e      	beq.n	10009e5c <UART_SetConfig+0xbe0>
10009dde:	687b      	ldr	r3, [r7, #4]
10009de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009de2:	2b02      	cmp	r3, #2
10009de4:	d038      	beq.n	10009e58 <UART_SetConfig+0xbdc>
10009de6:	687b      	ldr	r3, [r7, #4]
10009de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009dea:	2b03      	cmp	r3, #3
10009dec:	d032      	beq.n	10009e54 <UART_SetConfig+0xbd8>
10009dee:	687b      	ldr	r3, [r7, #4]
10009df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009df2:	2b04      	cmp	r3, #4
10009df4:	d02c      	beq.n	10009e50 <UART_SetConfig+0xbd4>
10009df6:	687b      	ldr	r3, [r7, #4]
10009df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009dfa:	2b05      	cmp	r3, #5
10009dfc:	d026      	beq.n	10009e4c <UART_SetConfig+0xbd0>
10009dfe:	687b      	ldr	r3, [r7, #4]
10009e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e02:	2b06      	cmp	r3, #6
10009e04:	d020      	beq.n	10009e48 <UART_SetConfig+0xbcc>
10009e06:	687b      	ldr	r3, [r7, #4]
10009e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e0a:	2b07      	cmp	r3, #7
10009e0c:	d01a      	beq.n	10009e44 <UART_SetConfig+0xbc8>
10009e0e:	687b      	ldr	r3, [r7, #4]
10009e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e12:	2b08      	cmp	r3, #8
10009e14:	d014      	beq.n	10009e40 <UART_SetConfig+0xbc4>
10009e16:	687b      	ldr	r3, [r7, #4]
10009e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e1a:	2b09      	cmp	r3, #9
10009e1c:	d00e      	beq.n	10009e3c <UART_SetConfig+0xbc0>
10009e1e:	687b      	ldr	r3, [r7, #4]
10009e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e22:	2b0a      	cmp	r3, #10
10009e24:	d008      	beq.n	10009e38 <UART_SetConfig+0xbbc>
10009e26:	687b      	ldr	r3, [r7, #4]
10009e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e2a:	2b0b      	cmp	r3, #11
10009e2c:	d102      	bne.n	10009e34 <UART_SetConfig+0xbb8>
10009e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
10009e32:	e016      	b.n	10009e62 <UART_SetConfig+0xbe6>
10009e34:	2301      	movs	r3, #1
10009e36:	e014      	b.n	10009e62 <UART_SetConfig+0xbe6>
10009e38:	2380      	movs	r3, #128	; 0x80
10009e3a:	e012      	b.n	10009e62 <UART_SetConfig+0xbe6>
10009e3c:	2340      	movs	r3, #64	; 0x40
10009e3e:	e010      	b.n	10009e62 <UART_SetConfig+0xbe6>
10009e40:	2320      	movs	r3, #32
10009e42:	e00e      	b.n	10009e62 <UART_SetConfig+0xbe6>
10009e44:	2310      	movs	r3, #16
10009e46:	e00c      	b.n	10009e62 <UART_SetConfig+0xbe6>
10009e48:	230c      	movs	r3, #12
10009e4a:	e00a      	b.n	10009e62 <UART_SetConfig+0xbe6>
10009e4c:	230a      	movs	r3, #10
10009e4e:	e008      	b.n	10009e62 <UART_SetConfig+0xbe6>
10009e50:	2308      	movs	r3, #8
10009e52:	e006      	b.n	10009e62 <UART_SetConfig+0xbe6>
10009e54:	2306      	movs	r3, #6
10009e56:	e004      	b.n	10009e62 <UART_SetConfig+0xbe6>
10009e58:	2304      	movs	r3, #4
10009e5a:	e002      	b.n	10009e62 <UART_SetConfig+0xbe6>
10009e5c:	2302      	movs	r3, #2
10009e5e:	e000      	b.n	10009e62 <UART_SetConfig+0xbe6>
10009e60:	2301      	movs	r3, #1
10009e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10009e64:	fbb2 f2f3 	udiv	r2, r2, r3
10009e68:	687b      	ldr	r3, [r7, #4]
10009e6a:	685b      	ldr	r3, [r3, #4]
10009e6c:	085b      	lsrs	r3, r3, #1
10009e6e:	441a      	add	r2, r3
10009e70:	687b      	ldr	r3, [r7, #4]
10009e72:	685b      	ldr	r3, [r3, #4]
10009e74:	fbb2 f3f3 	udiv	r3, r2, r3
10009e78:	b29b      	uxth	r3, r3
10009e7a:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009e7c:	e27b      	b.n	1000a376 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
10009e7e:	f7fb f916 	bl	100050ae <HAL_RCC_GetPCLK2Freq>
10009e82:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009e84:	687b      	ldr	r3, [r7, #4]
10009e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e88:	2b00      	cmp	r3, #0
10009e8a:	d044      	beq.n	10009f16 <UART_SetConfig+0xc9a>
10009e8c:	687b      	ldr	r3, [r7, #4]
10009e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e90:	2b01      	cmp	r3, #1
10009e92:	d03e      	beq.n	10009f12 <UART_SetConfig+0xc96>
10009e94:	687b      	ldr	r3, [r7, #4]
10009e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e98:	2b02      	cmp	r3, #2
10009e9a:	d038      	beq.n	10009f0e <UART_SetConfig+0xc92>
10009e9c:	687b      	ldr	r3, [r7, #4]
10009e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ea0:	2b03      	cmp	r3, #3
10009ea2:	d032      	beq.n	10009f0a <UART_SetConfig+0xc8e>
10009ea4:	687b      	ldr	r3, [r7, #4]
10009ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ea8:	2b04      	cmp	r3, #4
10009eaa:	d02c      	beq.n	10009f06 <UART_SetConfig+0xc8a>
10009eac:	687b      	ldr	r3, [r7, #4]
10009eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009eb0:	2b05      	cmp	r3, #5
10009eb2:	d026      	beq.n	10009f02 <UART_SetConfig+0xc86>
10009eb4:	687b      	ldr	r3, [r7, #4]
10009eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009eb8:	2b06      	cmp	r3, #6
10009eba:	d020      	beq.n	10009efe <UART_SetConfig+0xc82>
10009ebc:	687b      	ldr	r3, [r7, #4]
10009ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ec0:	2b07      	cmp	r3, #7
10009ec2:	d01a      	beq.n	10009efa <UART_SetConfig+0xc7e>
10009ec4:	687b      	ldr	r3, [r7, #4]
10009ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ec8:	2b08      	cmp	r3, #8
10009eca:	d014      	beq.n	10009ef6 <UART_SetConfig+0xc7a>
10009ecc:	687b      	ldr	r3, [r7, #4]
10009ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ed0:	2b09      	cmp	r3, #9
10009ed2:	d00e      	beq.n	10009ef2 <UART_SetConfig+0xc76>
10009ed4:	687b      	ldr	r3, [r7, #4]
10009ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ed8:	2b0a      	cmp	r3, #10
10009eda:	d008      	beq.n	10009eee <UART_SetConfig+0xc72>
10009edc:	687b      	ldr	r3, [r7, #4]
10009ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ee0:	2b0b      	cmp	r3, #11
10009ee2:	d102      	bne.n	10009eea <UART_SetConfig+0xc6e>
10009ee4:	f44f 7380 	mov.w	r3, #256	; 0x100
10009ee8:	e016      	b.n	10009f18 <UART_SetConfig+0xc9c>
10009eea:	2301      	movs	r3, #1
10009eec:	e014      	b.n	10009f18 <UART_SetConfig+0xc9c>
10009eee:	2380      	movs	r3, #128	; 0x80
10009ef0:	e012      	b.n	10009f18 <UART_SetConfig+0xc9c>
10009ef2:	2340      	movs	r3, #64	; 0x40
10009ef4:	e010      	b.n	10009f18 <UART_SetConfig+0xc9c>
10009ef6:	2320      	movs	r3, #32
10009ef8:	e00e      	b.n	10009f18 <UART_SetConfig+0xc9c>
10009efa:	2310      	movs	r3, #16
10009efc:	e00c      	b.n	10009f18 <UART_SetConfig+0xc9c>
10009efe:	230c      	movs	r3, #12
10009f00:	e00a      	b.n	10009f18 <UART_SetConfig+0xc9c>
10009f02:	230a      	movs	r3, #10
10009f04:	e008      	b.n	10009f18 <UART_SetConfig+0xc9c>
10009f06:	2308      	movs	r3, #8
10009f08:	e006      	b.n	10009f18 <UART_SetConfig+0xc9c>
10009f0a:	2306      	movs	r3, #6
10009f0c:	e004      	b.n	10009f18 <UART_SetConfig+0xc9c>
10009f0e:	2304      	movs	r3, #4
10009f10:	e002      	b.n	10009f18 <UART_SetConfig+0xc9c>
10009f12:	2302      	movs	r3, #2
10009f14:	e000      	b.n	10009f18 <UART_SetConfig+0xc9c>
10009f16:	2301      	movs	r3, #1
10009f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10009f1a:	fbb2 f2f3 	udiv	r2, r2, r3
10009f1e:	687b      	ldr	r3, [r7, #4]
10009f20:	685b      	ldr	r3, [r3, #4]
10009f22:	085b      	lsrs	r3, r3, #1
10009f24:	441a      	add	r2, r3
10009f26:	687b      	ldr	r3, [r7, #4]
10009f28:	685b      	ldr	r3, [r3, #4]
10009f2a:	fbb2 f3f3 	udiv	r3, r2, r3
10009f2e:	b29b      	uxth	r3, r3
10009f30:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009f32:	e220      	b.n	1000a376 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PCLK5:
        pclk = HAL_RCC_GetPCLK5Freq();
10009f34:	f7fb f8f1 	bl	1000511a <HAL_RCC_GetPCLK5Freq>
10009f38:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009f3a:	687b      	ldr	r3, [r7, #4]
10009f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f3e:	2b00      	cmp	r3, #0
10009f40:	d044      	beq.n	10009fcc <UART_SetConfig+0xd50>
10009f42:	687b      	ldr	r3, [r7, #4]
10009f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f46:	2b01      	cmp	r3, #1
10009f48:	d03e      	beq.n	10009fc8 <UART_SetConfig+0xd4c>
10009f4a:	687b      	ldr	r3, [r7, #4]
10009f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f4e:	2b02      	cmp	r3, #2
10009f50:	d038      	beq.n	10009fc4 <UART_SetConfig+0xd48>
10009f52:	687b      	ldr	r3, [r7, #4]
10009f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f56:	2b03      	cmp	r3, #3
10009f58:	d032      	beq.n	10009fc0 <UART_SetConfig+0xd44>
10009f5a:	687b      	ldr	r3, [r7, #4]
10009f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f5e:	2b04      	cmp	r3, #4
10009f60:	d02c      	beq.n	10009fbc <UART_SetConfig+0xd40>
10009f62:	687b      	ldr	r3, [r7, #4]
10009f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f66:	2b05      	cmp	r3, #5
10009f68:	d026      	beq.n	10009fb8 <UART_SetConfig+0xd3c>
10009f6a:	687b      	ldr	r3, [r7, #4]
10009f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f6e:	2b06      	cmp	r3, #6
10009f70:	d020      	beq.n	10009fb4 <UART_SetConfig+0xd38>
10009f72:	687b      	ldr	r3, [r7, #4]
10009f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f76:	2b07      	cmp	r3, #7
10009f78:	d01a      	beq.n	10009fb0 <UART_SetConfig+0xd34>
10009f7a:	687b      	ldr	r3, [r7, #4]
10009f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f7e:	2b08      	cmp	r3, #8
10009f80:	d014      	beq.n	10009fac <UART_SetConfig+0xd30>
10009f82:	687b      	ldr	r3, [r7, #4]
10009f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f86:	2b09      	cmp	r3, #9
10009f88:	d00e      	beq.n	10009fa8 <UART_SetConfig+0xd2c>
10009f8a:	687b      	ldr	r3, [r7, #4]
10009f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f8e:	2b0a      	cmp	r3, #10
10009f90:	d008      	beq.n	10009fa4 <UART_SetConfig+0xd28>
10009f92:	687b      	ldr	r3, [r7, #4]
10009f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f96:	2b0b      	cmp	r3, #11
10009f98:	d102      	bne.n	10009fa0 <UART_SetConfig+0xd24>
10009f9a:	f44f 7380 	mov.w	r3, #256	; 0x100
10009f9e:	e016      	b.n	10009fce <UART_SetConfig+0xd52>
10009fa0:	2301      	movs	r3, #1
10009fa2:	e014      	b.n	10009fce <UART_SetConfig+0xd52>
10009fa4:	2380      	movs	r3, #128	; 0x80
10009fa6:	e012      	b.n	10009fce <UART_SetConfig+0xd52>
10009fa8:	2340      	movs	r3, #64	; 0x40
10009faa:	e010      	b.n	10009fce <UART_SetConfig+0xd52>
10009fac:	2320      	movs	r3, #32
10009fae:	e00e      	b.n	10009fce <UART_SetConfig+0xd52>
10009fb0:	2310      	movs	r3, #16
10009fb2:	e00c      	b.n	10009fce <UART_SetConfig+0xd52>
10009fb4:	230c      	movs	r3, #12
10009fb6:	e00a      	b.n	10009fce <UART_SetConfig+0xd52>
10009fb8:	230a      	movs	r3, #10
10009fba:	e008      	b.n	10009fce <UART_SetConfig+0xd52>
10009fbc:	2308      	movs	r3, #8
10009fbe:	e006      	b.n	10009fce <UART_SetConfig+0xd52>
10009fc0:	2306      	movs	r3, #6
10009fc2:	e004      	b.n	10009fce <UART_SetConfig+0xd52>
10009fc4:	2304      	movs	r3, #4
10009fc6:	e002      	b.n	10009fce <UART_SetConfig+0xd52>
10009fc8:	2302      	movs	r3, #2
10009fca:	e000      	b.n	10009fce <UART_SetConfig+0xd52>
10009fcc:	2301      	movs	r3, #1
10009fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10009fd0:	fbb2 f2f3 	udiv	r2, r2, r3
10009fd4:	687b      	ldr	r3, [r7, #4]
10009fd6:	685b      	ldr	r3, [r3, #4]
10009fd8:	085b      	lsrs	r3, r3, #1
10009fda:	441a      	add	r2, r3
10009fdc:	687b      	ldr	r3, [r7, #4]
10009fde:	685b      	ldr	r3, [r3, #4]
10009fe0:	fbb2 f3f3 	udiv	r3, r2, r3
10009fe4:	b29b      	uxth	r3, r3
10009fe6:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009fe8:	e1c5      	b.n	1000a376 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PLL3Q:
        HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10009fea:	f107 0314 	add.w	r3, r7, #20
10009fee:	4618      	mov	r0, r3
10009ff0:	f7fa fe40 	bl	10004c74 <HAL_RCC_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009ff4:	69ba      	ldr	r2, [r7, #24]
10009ff6:	687b      	ldr	r3, [r7, #4]
10009ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ffa:	2b00      	cmp	r3, #0
10009ffc:	d044      	beq.n	1000a088 <UART_SetConfig+0xe0c>
10009ffe:	687b      	ldr	r3, [r7, #4]
1000a000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a002:	2b01      	cmp	r3, #1
1000a004:	d03e      	beq.n	1000a084 <UART_SetConfig+0xe08>
1000a006:	687b      	ldr	r3, [r7, #4]
1000a008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a00a:	2b02      	cmp	r3, #2
1000a00c:	d038      	beq.n	1000a080 <UART_SetConfig+0xe04>
1000a00e:	687b      	ldr	r3, [r7, #4]
1000a010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a012:	2b03      	cmp	r3, #3
1000a014:	d032      	beq.n	1000a07c <UART_SetConfig+0xe00>
1000a016:	687b      	ldr	r3, [r7, #4]
1000a018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a01a:	2b04      	cmp	r3, #4
1000a01c:	d02c      	beq.n	1000a078 <UART_SetConfig+0xdfc>
1000a01e:	687b      	ldr	r3, [r7, #4]
1000a020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a022:	2b05      	cmp	r3, #5
1000a024:	d026      	beq.n	1000a074 <UART_SetConfig+0xdf8>
1000a026:	687b      	ldr	r3, [r7, #4]
1000a028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a02a:	2b06      	cmp	r3, #6
1000a02c:	d020      	beq.n	1000a070 <UART_SetConfig+0xdf4>
1000a02e:	687b      	ldr	r3, [r7, #4]
1000a030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a032:	2b07      	cmp	r3, #7
1000a034:	d01a      	beq.n	1000a06c <UART_SetConfig+0xdf0>
1000a036:	687b      	ldr	r3, [r7, #4]
1000a038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a03a:	2b08      	cmp	r3, #8
1000a03c:	d014      	beq.n	1000a068 <UART_SetConfig+0xdec>
1000a03e:	687b      	ldr	r3, [r7, #4]
1000a040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a042:	2b09      	cmp	r3, #9
1000a044:	d00e      	beq.n	1000a064 <UART_SetConfig+0xde8>
1000a046:	687b      	ldr	r3, [r7, #4]
1000a048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a04a:	2b0a      	cmp	r3, #10
1000a04c:	d008      	beq.n	1000a060 <UART_SetConfig+0xde4>
1000a04e:	687b      	ldr	r3, [r7, #4]
1000a050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a052:	2b0b      	cmp	r3, #11
1000a054:	d102      	bne.n	1000a05c <UART_SetConfig+0xde0>
1000a056:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a05a:	e016      	b.n	1000a08a <UART_SetConfig+0xe0e>
1000a05c:	2301      	movs	r3, #1
1000a05e:	e014      	b.n	1000a08a <UART_SetConfig+0xe0e>
1000a060:	2380      	movs	r3, #128	; 0x80
1000a062:	e012      	b.n	1000a08a <UART_SetConfig+0xe0e>
1000a064:	2340      	movs	r3, #64	; 0x40
1000a066:	e010      	b.n	1000a08a <UART_SetConfig+0xe0e>
1000a068:	2320      	movs	r3, #32
1000a06a:	e00e      	b.n	1000a08a <UART_SetConfig+0xe0e>
1000a06c:	2310      	movs	r3, #16
1000a06e:	e00c      	b.n	1000a08a <UART_SetConfig+0xe0e>
1000a070:	230c      	movs	r3, #12
1000a072:	e00a      	b.n	1000a08a <UART_SetConfig+0xe0e>
1000a074:	230a      	movs	r3, #10
1000a076:	e008      	b.n	1000a08a <UART_SetConfig+0xe0e>
1000a078:	2308      	movs	r3, #8
1000a07a:	e006      	b.n	1000a08a <UART_SetConfig+0xe0e>
1000a07c:	2306      	movs	r3, #6
1000a07e:	e004      	b.n	1000a08a <UART_SetConfig+0xe0e>
1000a080:	2304      	movs	r3, #4
1000a082:	e002      	b.n	1000a08a <UART_SetConfig+0xe0e>
1000a084:	2302      	movs	r3, #2
1000a086:	e000      	b.n	1000a08a <UART_SetConfig+0xe0e>
1000a088:	2301      	movs	r3, #1
1000a08a:	fbb2 f2f3 	udiv	r2, r2, r3
1000a08e:	687b      	ldr	r3, [r7, #4]
1000a090:	685b      	ldr	r3, [r3, #4]
1000a092:	085b      	lsrs	r3, r3, #1
1000a094:	441a      	add	r2, r3
1000a096:	687b      	ldr	r3, [r7, #4]
1000a098:	685b      	ldr	r3, [r3, #4]
1000a09a:	fbb2 f3f3 	udiv	r3, r2, r3
1000a09e:	b29b      	uxth	r3, r3
1000a0a0:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a0a2:	e168      	b.n	1000a376 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PLL4Q:
        HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000a0a4:	f107 0308 	add.w	r3, r7, #8
1000a0a8:	4618      	mov	r0, r3
1000a0aa:	f7fa fedd 	bl	10004e68 <HAL_RCC_GetPLL4ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll4_clocks.PLL4_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a0ae:	68fa      	ldr	r2, [r7, #12]
1000a0b0:	687b      	ldr	r3, [r7, #4]
1000a0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a0b4:	2b00      	cmp	r3, #0
1000a0b6:	d044      	beq.n	1000a142 <UART_SetConfig+0xec6>
1000a0b8:	687b      	ldr	r3, [r7, #4]
1000a0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a0bc:	2b01      	cmp	r3, #1
1000a0be:	d03e      	beq.n	1000a13e <UART_SetConfig+0xec2>
1000a0c0:	687b      	ldr	r3, [r7, #4]
1000a0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a0c4:	2b02      	cmp	r3, #2
1000a0c6:	d038      	beq.n	1000a13a <UART_SetConfig+0xebe>
1000a0c8:	687b      	ldr	r3, [r7, #4]
1000a0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a0cc:	2b03      	cmp	r3, #3
1000a0ce:	d032      	beq.n	1000a136 <UART_SetConfig+0xeba>
1000a0d0:	687b      	ldr	r3, [r7, #4]
1000a0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a0d4:	2b04      	cmp	r3, #4
1000a0d6:	d02c      	beq.n	1000a132 <UART_SetConfig+0xeb6>
1000a0d8:	687b      	ldr	r3, [r7, #4]
1000a0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a0dc:	2b05      	cmp	r3, #5
1000a0de:	d026      	beq.n	1000a12e <UART_SetConfig+0xeb2>
1000a0e0:	687b      	ldr	r3, [r7, #4]
1000a0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a0e4:	2b06      	cmp	r3, #6
1000a0e6:	d020      	beq.n	1000a12a <UART_SetConfig+0xeae>
1000a0e8:	687b      	ldr	r3, [r7, #4]
1000a0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a0ec:	2b07      	cmp	r3, #7
1000a0ee:	d01a      	beq.n	1000a126 <UART_SetConfig+0xeaa>
1000a0f0:	687b      	ldr	r3, [r7, #4]
1000a0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a0f4:	2b08      	cmp	r3, #8
1000a0f6:	d014      	beq.n	1000a122 <UART_SetConfig+0xea6>
1000a0f8:	687b      	ldr	r3, [r7, #4]
1000a0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a0fc:	2b09      	cmp	r3, #9
1000a0fe:	d00e      	beq.n	1000a11e <UART_SetConfig+0xea2>
1000a100:	687b      	ldr	r3, [r7, #4]
1000a102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a104:	2b0a      	cmp	r3, #10
1000a106:	d008      	beq.n	1000a11a <UART_SetConfig+0xe9e>
1000a108:	687b      	ldr	r3, [r7, #4]
1000a10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a10c:	2b0b      	cmp	r3, #11
1000a10e:	d102      	bne.n	1000a116 <UART_SetConfig+0xe9a>
1000a110:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a114:	e016      	b.n	1000a144 <UART_SetConfig+0xec8>
1000a116:	2301      	movs	r3, #1
1000a118:	e014      	b.n	1000a144 <UART_SetConfig+0xec8>
1000a11a:	2380      	movs	r3, #128	; 0x80
1000a11c:	e012      	b.n	1000a144 <UART_SetConfig+0xec8>
1000a11e:	2340      	movs	r3, #64	; 0x40
1000a120:	e010      	b.n	1000a144 <UART_SetConfig+0xec8>
1000a122:	2320      	movs	r3, #32
1000a124:	e00e      	b.n	1000a144 <UART_SetConfig+0xec8>
1000a126:	2310      	movs	r3, #16
1000a128:	e00c      	b.n	1000a144 <UART_SetConfig+0xec8>
1000a12a:	230c      	movs	r3, #12
1000a12c:	e00a      	b.n	1000a144 <UART_SetConfig+0xec8>
1000a12e:	230a      	movs	r3, #10
1000a130:	e008      	b.n	1000a144 <UART_SetConfig+0xec8>
1000a132:	2308      	movs	r3, #8
1000a134:	e006      	b.n	1000a144 <UART_SetConfig+0xec8>
1000a136:	2306      	movs	r3, #6
1000a138:	e004      	b.n	1000a144 <UART_SetConfig+0xec8>
1000a13a:	2304      	movs	r3, #4
1000a13c:	e002      	b.n	1000a144 <UART_SetConfig+0xec8>
1000a13e:	2302      	movs	r3, #2
1000a140:	e000      	b.n	1000a144 <UART_SetConfig+0xec8>
1000a142:	2301      	movs	r3, #1
1000a144:	fbb2 f2f3 	udiv	r2, r2, r3
1000a148:	687b      	ldr	r3, [r7, #4]
1000a14a:	685b      	ldr	r3, [r3, #4]
1000a14c:	085b      	lsrs	r3, r3, #1
1000a14e:	441a      	add	r2, r3
1000a150:	687b      	ldr	r3, [r7, #4]
1000a152:	685b      	ldr	r3, [r3, #4]
1000a154:	fbb2 f3f3 	udiv	r3, r2, r3
1000a158:	b29b      	uxth	r3, r3
1000a15a:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a15c:	e10b      	b.n	1000a376 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a15e:	687b      	ldr	r3, [r7, #4]
1000a160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a162:	2b00      	cmp	r3, #0
1000a164:	d044      	beq.n	1000a1f0 <UART_SetConfig+0xf74>
1000a166:	687b      	ldr	r3, [r7, #4]
1000a168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a16a:	2b01      	cmp	r3, #1
1000a16c:	d03e      	beq.n	1000a1ec <UART_SetConfig+0xf70>
1000a16e:	687b      	ldr	r3, [r7, #4]
1000a170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a172:	2b02      	cmp	r3, #2
1000a174:	d038      	beq.n	1000a1e8 <UART_SetConfig+0xf6c>
1000a176:	687b      	ldr	r3, [r7, #4]
1000a178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a17a:	2b03      	cmp	r3, #3
1000a17c:	d032      	beq.n	1000a1e4 <UART_SetConfig+0xf68>
1000a17e:	687b      	ldr	r3, [r7, #4]
1000a180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a182:	2b04      	cmp	r3, #4
1000a184:	d02c      	beq.n	1000a1e0 <UART_SetConfig+0xf64>
1000a186:	687b      	ldr	r3, [r7, #4]
1000a188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a18a:	2b05      	cmp	r3, #5
1000a18c:	d026      	beq.n	1000a1dc <UART_SetConfig+0xf60>
1000a18e:	687b      	ldr	r3, [r7, #4]
1000a190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a192:	2b06      	cmp	r3, #6
1000a194:	d020      	beq.n	1000a1d8 <UART_SetConfig+0xf5c>
1000a196:	687b      	ldr	r3, [r7, #4]
1000a198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a19a:	2b07      	cmp	r3, #7
1000a19c:	d01a      	beq.n	1000a1d4 <UART_SetConfig+0xf58>
1000a19e:	687b      	ldr	r3, [r7, #4]
1000a1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a1a2:	2b08      	cmp	r3, #8
1000a1a4:	d014      	beq.n	1000a1d0 <UART_SetConfig+0xf54>
1000a1a6:	687b      	ldr	r3, [r7, #4]
1000a1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a1aa:	2b09      	cmp	r3, #9
1000a1ac:	d00e      	beq.n	1000a1cc <UART_SetConfig+0xf50>
1000a1ae:	687b      	ldr	r3, [r7, #4]
1000a1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a1b2:	2b0a      	cmp	r3, #10
1000a1b4:	d008      	beq.n	1000a1c8 <UART_SetConfig+0xf4c>
1000a1b6:	687b      	ldr	r3, [r7, #4]
1000a1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a1ba:	2b0b      	cmp	r3, #11
1000a1bc:	d102      	bne.n	1000a1c4 <UART_SetConfig+0xf48>
1000a1be:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a1c2:	e016      	b.n	1000a1f2 <UART_SetConfig+0xf76>
1000a1c4:	2301      	movs	r3, #1
1000a1c6:	e014      	b.n	1000a1f2 <UART_SetConfig+0xf76>
1000a1c8:	2380      	movs	r3, #128	; 0x80
1000a1ca:	e012      	b.n	1000a1f2 <UART_SetConfig+0xf76>
1000a1cc:	2340      	movs	r3, #64	; 0x40
1000a1ce:	e010      	b.n	1000a1f2 <UART_SetConfig+0xf76>
1000a1d0:	2320      	movs	r3, #32
1000a1d2:	e00e      	b.n	1000a1f2 <UART_SetConfig+0xf76>
1000a1d4:	2310      	movs	r3, #16
1000a1d6:	e00c      	b.n	1000a1f2 <UART_SetConfig+0xf76>
1000a1d8:	230c      	movs	r3, #12
1000a1da:	e00a      	b.n	1000a1f2 <UART_SetConfig+0xf76>
1000a1dc:	230a      	movs	r3, #10
1000a1de:	e008      	b.n	1000a1f2 <UART_SetConfig+0xf76>
1000a1e0:	2308      	movs	r3, #8
1000a1e2:	e006      	b.n	1000a1f2 <UART_SetConfig+0xf76>
1000a1e4:	2306      	movs	r3, #6
1000a1e6:	e004      	b.n	1000a1f2 <UART_SetConfig+0xf76>
1000a1e8:	2304      	movs	r3, #4
1000a1ea:	e002      	b.n	1000a1f2 <UART_SetConfig+0xf76>
1000a1ec:	2302      	movs	r3, #2
1000a1ee:	e000      	b.n	1000a1f2 <UART_SetConfig+0xf76>
1000a1f0:	2301      	movs	r3, #1
1000a1f2:	4a72      	ldr	r2, [pc, #456]	; (1000a3bc <UART_SetConfig+0x1140>)
1000a1f4:	fbb2 f2f3 	udiv	r2, r2, r3
1000a1f8:	687b      	ldr	r3, [r7, #4]
1000a1fa:	685b      	ldr	r3, [r3, #4]
1000a1fc:	085b      	lsrs	r3, r3, #1
1000a1fe:	441a      	add	r2, r3
1000a200:	687b      	ldr	r3, [r7, #4]
1000a202:	685b      	ldr	r3, [r3, #4]
1000a204:	fbb2 f3f3 	udiv	r3, r2, r3
1000a208:	b29b      	uxth	r3, r3
1000a20a:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a20c:	e0b3      	b.n	1000a376 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a20e:	687b      	ldr	r3, [r7, #4]
1000a210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a212:	2b00      	cmp	r3, #0
1000a214:	d044      	beq.n	1000a2a0 <UART_SetConfig+0x1024>
1000a216:	687b      	ldr	r3, [r7, #4]
1000a218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a21a:	2b01      	cmp	r3, #1
1000a21c:	d03e      	beq.n	1000a29c <UART_SetConfig+0x1020>
1000a21e:	687b      	ldr	r3, [r7, #4]
1000a220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a222:	2b02      	cmp	r3, #2
1000a224:	d038      	beq.n	1000a298 <UART_SetConfig+0x101c>
1000a226:	687b      	ldr	r3, [r7, #4]
1000a228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a22a:	2b03      	cmp	r3, #3
1000a22c:	d032      	beq.n	1000a294 <UART_SetConfig+0x1018>
1000a22e:	687b      	ldr	r3, [r7, #4]
1000a230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a232:	2b04      	cmp	r3, #4
1000a234:	d02c      	beq.n	1000a290 <UART_SetConfig+0x1014>
1000a236:	687b      	ldr	r3, [r7, #4]
1000a238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a23a:	2b05      	cmp	r3, #5
1000a23c:	d026      	beq.n	1000a28c <UART_SetConfig+0x1010>
1000a23e:	687b      	ldr	r3, [r7, #4]
1000a240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a242:	2b06      	cmp	r3, #6
1000a244:	d020      	beq.n	1000a288 <UART_SetConfig+0x100c>
1000a246:	687b      	ldr	r3, [r7, #4]
1000a248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a24a:	2b07      	cmp	r3, #7
1000a24c:	d01a      	beq.n	1000a284 <UART_SetConfig+0x1008>
1000a24e:	687b      	ldr	r3, [r7, #4]
1000a250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a252:	2b08      	cmp	r3, #8
1000a254:	d014      	beq.n	1000a280 <UART_SetConfig+0x1004>
1000a256:	687b      	ldr	r3, [r7, #4]
1000a258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a25a:	2b09      	cmp	r3, #9
1000a25c:	d00e      	beq.n	1000a27c <UART_SetConfig+0x1000>
1000a25e:	687b      	ldr	r3, [r7, #4]
1000a260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a262:	2b0a      	cmp	r3, #10
1000a264:	d008      	beq.n	1000a278 <UART_SetConfig+0xffc>
1000a266:	687b      	ldr	r3, [r7, #4]
1000a268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a26a:	2b0b      	cmp	r3, #11
1000a26c:	d102      	bne.n	1000a274 <UART_SetConfig+0xff8>
1000a26e:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a272:	e016      	b.n	1000a2a2 <UART_SetConfig+0x1026>
1000a274:	2301      	movs	r3, #1
1000a276:	e014      	b.n	1000a2a2 <UART_SetConfig+0x1026>
1000a278:	2380      	movs	r3, #128	; 0x80
1000a27a:	e012      	b.n	1000a2a2 <UART_SetConfig+0x1026>
1000a27c:	2340      	movs	r3, #64	; 0x40
1000a27e:	e010      	b.n	1000a2a2 <UART_SetConfig+0x1026>
1000a280:	2320      	movs	r3, #32
1000a282:	e00e      	b.n	1000a2a2 <UART_SetConfig+0x1026>
1000a284:	2310      	movs	r3, #16
1000a286:	e00c      	b.n	1000a2a2 <UART_SetConfig+0x1026>
1000a288:	230c      	movs	r3, #12
1000a28a:	e00a      	b.n	1000a2a2 <UART_SetConfig+0x1026>
1000a28c:	230a      	movs	r3, #10
1000a28e:	e008      	b.n	1000a2a2 <UART_SetConfig+0x1026>
1000a290:	2308      	movs	r3, #8
1000a292:	e006      	b.n	1000a2a2 <UART_SetConfig+0x1026>
1000a294:	2306      	movs	r3, #6
1000a296:	e004      	b.n	1000a2a2 <UART_SetConfig+0x1026>
1000a298:	2304      	movs	r3, #4
1000a29a:	e002      	b.n	1000a2a2 <UART_SetConfig+0x1026>
1000a29c:	2302      	movs	r3, #2
1000a29e:	e000      	b.n	1000a2a2 <UART_SetConfig+0x1026>
1000a2a0:	2301      	movs	r3, #1
1000a2a2:	4a47      	ldr	r2, [pc, #284]	; (1000a3c0 <UART_SetConfig+0x1144>)
1000a2a4:	fbb2 f2f3 	udiv	r2, r2, r3
1000a2a8:	687b      	ldr	r3, [r7, #4]
1000a2aa:	685b      	ldr	r3, [r3, #4]
1000a2ac:	085b      	lsrs	r3, r3, #1
1000a2ae:	441a      	add	r2, r3
1000a2b0:	687b      	ldr	r3, [r7, #4]
1000a2b2:	685b      	ldr	r3, [r3, #4]
1000a2b4:	fbb2 f3f3 	udiv	r3, r2, r3
1000a2b8:	b29b      	uxth	r3, r3
1000a2ba:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a2bc:	e05b      	b.n	1000a376 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_HSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a2be:	687b      	ldr	r3, [r7, #4]
1000a2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a2c2:	2b00      	cmp	r3, #0
1000a2c4:	d044      	beq.n	1000a350 <UART_SetConfig+0x10d4>
1000a2c6:	687b      	ldr	r3, [r7, #4]
1000a2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a2ca:	2b01      	cmp	r3, #1
1000a2cc:	d03e      	beq.n	1000a34c <UART_SetConfig+0x10d0>
1000a2ce:	687b      	ldr	r3, [r7, #4]
1000a2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a2d2:	2b02      	cmp	r3, #2
1000a2d4:	d038      	beq.n	1000a348 <UART_SetConfig+0x10cc>
1000a2d6:	687b      	ldr	r3, [r7, #4]
1000a2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a2da:	2b03      	cmp	r3, #3
1000a2dc:	d032      	beq.n	1000a344 <UART_SetConfig+0x10c8>
1000a2de:	687b      	ldr	r3, [r7, #4]
1000a2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a2e2:	2b04      	cmp	r3, #4
1000a2e4:	d02c      	beq.n	1000a340 <UART_SetConfig+0x10c4>
1000a2e6:	687b      	ldr	r3, [r7, #4]
1000a2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a2ea:	2b05      	cmp	r3, #5
1000a2ec:	d026      	beq.n	1000a33c <UART_SetConfig+0x10c0>
1000a2ee:	687b      	ldr	r3, [r7, #4]
1000a2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a2f2:	2b06      	cmp	r3, #6
1000a2f4:	d020      	beq.n	1000a338 <UART_SetConfig+0x10bc>
1000a2f6:	687b      	ldr	r3, [r7, #4]
1000a2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a2fa:	2b07      	cmp	r3, #7
1000a2fc:	d01a      	beq.n	1000a334 <UART_SetConfig+0x10b8>
1000a2fe:	687b      	ldr	r3, [r7, #4]
1000a300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a302:	2b08      	cmp	r3, #8
1000a304:	d014      	beq.n	1000a330 <UART_SetConfig+0x10b4>
1000a306:	687b      	ldr	r3, [r7, #4]
1000a308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a30a:	2b09      	cmp	r3, #9
1000a30c:	d00e      	beq.n	1000a32c <UART_SetConfig+0x10b0>
1000a30e:	687b      	ldr	r3, [r7, #4]
1000a310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a312:	2b0a      	cmp	r3, #10
1000a314:	d008      	beq.n	1000a328 <UART_SetConfig+0x10ac>
1000a316:	687b      	ldr	r3, [r7, #4]
1000a318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a31a:	2b0b      	cmp	r3, #11
1000a31c:	d102      	bne.n	1000a324 <UART_SetConfig+0x10a8>
1000a31e:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a322:	e016      	b.n	1000a352 <UART_SetConfig+0x10d6>
1000a324:	2301      	movs	r3, #1
1000a326:	e014      	b.n	1000a352 <UART_SetConfig+0x10d6>
1000a328:	2380      	movs	r3, #128	; 0x80
1000a32a:	e012      	b.n	1000a352 <UART_SetConfig+0x10d6>
1000a32c:	2340      	movs	r3, #64	; 0x40
1000a32e:	e010      	b.n	1000a352 <UART_SetConfig+0x10d6>
1000a330:	2320      	movs	r3, #32
1000a332:	e00e      	b.n	1000a352 <UART_SetConfig+0x10d6>
1000a334:	2310      	movs	r3, #16
1000a336:	e00c      	b.n	1000a352 <UART_SetConfig+0x10d6>
1000a338:	230c      	movs	r3, #12
1000a33a:	e00a      	b.n	1000a352 <UART_SetConfig+0x10d6>
1000a33c:	230a      	movs	r3, #10
1000a33e:	e008      	b.n	1000a352 <UART_SetConfig+0x10d6>
1000a340:	2308      	movs	r3, #8
1000a342:	e006      	b.n	1000a352 <UART_SetConfig+0x10d6>
1000a344:	2306      	movs	r3, #6
1000a346:	e004      	b.n	1000a352 <UART_SetConfig+0x10d6>
1000a348:	2304      	movs	r3, #4
1000a34a:	e002      	b.n	1000a352 <UART_SetConfig+0x10d6>
1000a34c:	2302      	movs	r3, #2
1000a34e:	e000      	b.n	1000a352 <UART_SetConfig+0x10d6>
1000a350:	2301      	movs	r3, #1
1000a352:	4a1c      	ldr	r2, [pc, #112]	; (1000a3c4 <UART_SetConfig+0x1148>)
1000a354:	fbb2 f2f3 	udiv	r2, r2, r3
1000a358:	687b      	ldr	r3, [r7, #4]
1000a35a:	685b      	ldr	r3, [r3, #4]
1000a35c:	085b      	lsrs	r3, r3, #1
1000a35e:	441a      	add	r2, r3
1000a360:	687b      	ldr	r3, [r7, #4]
1000a362:	685b      	ldr	r3, [r3, #4]
1000a364:	fbb2 f3f3 	udiv	r3, r2, r3
1000a368:	b29b      	uxth	r3, r3
1000a36a:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a36c:	e003      	b.n	1000a376 <UART_SetConfig+0x10fa>
      default:
        ret = HAL_ERROR;
1000a36e:	2301      	movs	r3, #1
1000a370:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
1000a374:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
1000a376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000a378:	2b0f      	cmp	r3, #15
1000a37a:	d908      	bls.n	1000a38e <UART_SetConfig+0x1112>
1000a37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000a37e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
1000a382:	d204      	bcs.n	1000a38e <UART_SetConfig+0x1112>
    {
      huart->Instance->BRR = usartdiv;
1000a384:	687b      	ldr	r3, [r7, #4]
1000a386:	681b      	ldr	r3, [r3, #0]
1000a388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1000a38a:	60da      	str	r2, [r3, #12]
1000a38c:	e002      	b.n	1000a394 <UART_SetConfig+0x1118>
    }
    else
    {
      ret = HAL_ERROR;
1000a38e:	2301      	movs	r3, #1
1000a390:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
1000a394:	687b      	ldr	r3, [r7, #4]
1000a396:	2201      	movs	r2, #1
1000a398:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
1000a39c:	687b      	ldr	r3, [r7, #4]
1000a39e:	2201      	movs	r2, #1
1000a3a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
1000a3a4:	687b      	ldr	r3, [r7, #4]
1000a3a6:	2200      	movs	r2, #0
1000a3a8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
1000a3aa:	687b      	ldr	r3, [r7, #4]
1000a3ac:	2200      	movs	r2, #0
1000a3ae:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
1000a3b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
1000a3b4:	4618      	mov	r0, r3
1000a3b6:	3738      	adds	r7, #56	; 0x38
1000a3b8:	46bd      	mov	sp, r7
1000a3ba:	bd80      	pop	{r7, pc}
1000a3bc:	03d09000 	.word	0x03d09000
1000a3c0:	003d0900 	.word	0x003d0900
1000a3c4:	016e3600 	.word	0x016e3600

1000a3c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
1000a3c8:	b480      	push	{r7}
1000a3ca:	b083      	sub	sp, #12
1000a3cc:	af00      	add	r7, sp, #0
1000a3ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
1000a3d0:	687b      	ldr	r3, [r7, #4]
1000a3d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a3d4:	f003 0301 	and.w	r3, r3, #1
1000a3d8:	2b00      	cmp	r3, #0
1000a3da:	d00a      	beq.n	1000a3f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
1000a3dc:	687b      	ldr	r3, [r7, #4]
1000a3de:	681b      	ldr	r3, [r3, #0]
1000a3e0:	685b      	ldr	r3, [r3, #4]
1000a3e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
1000a3e6:	687b      	ldr	r3, [r7, #4]
1000a3e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1000a3ea:	687b      	ldr	r3, [r7, #4]
1000a3ec:	681b      	ldr	r3, [r3, #0]
1000a3ee:	430a      	orrs	r2, r1
1000a3f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
1000a3f2:	687b      	ldr	r3, [r7, #4]
1000a3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a3f6:	f003 0302 	and.w	r3, r3, #2
1000a3fa:	2b00      	cmp	r3, #0
1000a3fc:	d00a      	beq.n	1000a414 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
1000a3fe:	687b      	ldr	r3, [r7, #4]
1000a400:	681b      	ldr	r3, [r3, #0]
1000a402:	685b      	ldr	r3, [r3, #4]
1000a404:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
1000a408:	687b      	ldr	r3, [r7, #4]
1000a40a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
1000a40c:	687b      	ldr	r3, [r7, #4]
1000a40e:	681b      	ldr	r3, [r3, #0]
1000a410:	430a      	orrs	r2, r1
1000a412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
1000a414:	687b      	ldr	r3, [r7, #4]
1000a416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a418:	f003 0304 	and.w	r3, r3, #4
1000a41c:	2b00      	cmp	r3, #0
1000a41e:	d00a      	beq.n	1000a436 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
1000a420:	687b      	ldr	r3, [r7, #4]
1000a422:	681b      	ldr	r3, [r3, #0]
1000a424:	685b      	ldr	r3, [r3, #4]
1000a426:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
1000a42a:	687b      	ldr	r3, [r7, #4]
1000a42c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
1000a42e:	687b      	ldr	r3, [r7, #4]
1000a430:	681b      	ldr	r3, [r3, #0]
1000a432:	430a      	orrs	r2, r1
1000a434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
1000a436:	687b      	ldr	r3, [r7, #4]
1000a438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a43a:	f003 0308 	and.w	r3, r3, #8
1000a43e:	2b00      	cmp	r3, #0
1000a440:	d00a      	beq.n	1000a458 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
1000a442:	687b      	ldr	r3, [r7, #4]
1000a444:	681b      	ldr	r3, [r3, #0]
1000a446:	685b      	ldr	r3, [r3, #4]
1000a448:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
1000a44c:	687b      	ldr	r3, [r7, #4]
1000a44e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1000a450:	687b      	ldr	r3, [r7, #4]
1000a452:	681b      	ldr	r3, [r3, #0]
1000a454:	430a      	orrs	r2, r1
1000a456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
1000a458:	687b      	ldr	r3, [r7, #4]
1000a45a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a45c:	f003 0310 	and.w	r3, r3, #16
1000a460:	2b00      	cmp	r3, #0
1000a462:	d00a      	beq.n	1000a47a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
1000a464:	687b      	ldr	r3, [r7, #4]
1000a466:	681b      	ldr	r3, [r3, #0]
1000a468:	689b      	ldr	r3, [r3, #8]
1000a46a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
1000a46e:	687b      	ldr	r3, [r7, #4]
1000a470:	6bda      	ldr	r2, [r3, #60]	; 0x3c
1000a472:	687b      	ldr	r3, [r7, #4]
1000a474:	681b      	ldr	r3, [r3, #0]
1000a476:	430a      	orrs	r2, r1
1000a478:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
1000a47a:	687b      	ldr	r3, [r7, #4]
1000a47c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a47e:	f003 0320 	and.w	r3, r3, #32
1000a482:	2b00      	cmp	r3, #0
1000a484:	d00a      	beq.n	1000a49c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
1000a486:	687b      	ldr	r3, [r7, #4]
1000a488:	681b      	ldr	r3, [r3, #0]
1000a48a:	689b      	ldr	r3, [r3, #8]
1000a48c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
1000a490:	687b      	ldr	r3, [r7, #4]
1000a492:	6c1a      	ldr	r2, [r3, #64]	; 0x40
1000a494:	687b      	ldr	r3, [r7, #4]
1000a496:	681b      	ldr	r3, [r3, #0]
1000a498:	430a      	orrs	r2, r1
1000a49a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
1000a49c:	687b      	ldr	r3, [r7, #4]
1000a49e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a4a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
1000a4a4:	2b00      	cmp	r3, #0
1000a4a6:	d01a      	beq.n	1000a4de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
1000a4a8:	687b      	ldr	r3, [r7, #4]
1000a4aa:	681b      	ldr	r3, [r3, #0]
1000a4ac:	685b      	ldr	r3, [r3, #4]
1000a4ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
1000a4b2:	687b      	ldr	r3, [r7, #4]
1000a4b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
1000a4b6:	687b      	ldr	r3, [r7, #4]
1000a4b8:	681b      	ldr	r3, [r3, #0]
1000a4ba:	430a      	orrs	r2, r1
1000a4bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
1000a4be:	687b      	ldr	r3, [r7, #4]
1000a4c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1000a4c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
1000a4c6:	d10a      	bne.n	1000a4de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
1000a4c8:	687b      	ldr	r3, [r7, #4]
1000a4ca:	681b      	ldr	r3, [r3, #0]
1000a4cc:	685b      	ldr	r3, [r3, #4]
1000a4ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
1000a4d2:	687b      	ldr	r3, [r7, #4]
1000a4d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
1000a4d6:	687b      	ldr	r3, [r7, #4]
1000a4d8:	681b      	ldr	r3, [r3, #0]
1000a4da:	430a      	orrs	r2, r1
1000a4dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
1000a4de:	687b      	ldr	r3, [r7, #4]
1000a4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a4e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
1000a4e6:	2b00      	cmp	r3, #0
1000a4e8:	d00a      	beq.n	1000a500 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
1000a4ea:	687b      	ldr	r3, [r7, #4]
1000a4ec:	681b      	ldr	r3, [r3, #0]
1000a4ee:	685b      	ldr	r3, [r3, #4]
1000a4f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
1000a4f4:	687b      	ldr	r3, [r7, #4]
1000a4f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
1000a4f8:	687b      	ldr	r3, [r7, #4]
1000a4fa:	681b      	ldr	r3, [r3, #0]
1000a4fc:	430a      	orrs	r2, r1
1000a4fe:	605a      	str	r2, [r3, #4]
  }
}
1000a500:	bf00      	nop
1000a502:	370c      	adds	r7, #12
1000a504:	46bd      	mov	sp, r7
1000a506:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a50a:	4770      	bx	lr

1000a50c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
1000a50c:	b580      	push	{r7, lr}
1000a50e:	b086      	sub	sp, #24
1000a510:	af02      	add	r7, sp, #8
1000a512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
1000a514:	687b      	ldr	r3, [r7, #4]
1000a516:	2200      	movs	r2, #0
1000a518:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
1000a51c:	f7f7 f9d4 	bl	100018c8 <HAL_GetTick>
1000a520:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
1000a522:	687b      	ldr	r3, [r7, #4]
1000a524:	681b      	ldr	r3, [r3, #0]
1000a526:	681b      	ldr	r3, [r3, #0]
1000a528:	f003 0308 	and.w	r3, r3, #8
1000a52c:	2b08      	cmp	r3, #8
1000a52e:	d10e      	bne.n	1000a54e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
1000a530:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
1000a534:	9300      	str	r3, [sp, #0]
1000a536:	68fb      	ldr	r3, [r7, #12]
1000a538:	2200      	movs	r2, #0
1000a53a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
1000a53e:	6878      	ldr	r0, [r7, #4]
1000a540:	f000 f82c 	bl	1000a59c <UART_WaitOnFlagUntilTimeout>
1000a544:	4603      	mov	r3, r0
1000a546:	2b00      	cmp	r3, #0
1000a548:	d001      	beq.n	1000a54e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
1000a54a:	2303      	movs	r3, #3
1000a54c:	e022      	b.n	1000a594 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
1000a54e:	687b      	ldr	r3, [r7, #4]
1000a550:	681b      	ldr	r3, [r3, #0]
1000a552:	681b      	ldr	r3, [r3, #0]
1000a554:	f003 0304 	and.w	r3, r3, #4
1000a558:	2b04      	cmp	r3, #4
1000a55a:	d10e      	bne.n	1000a57a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
1000a55c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
1000a560:	9300      	str	r3, [sp, #0]
1000a562:	68fb      	ldr	r3, [r7, #12]
1000a564:	2200      	movs	r2, #0
1000a566:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
1000a56a:	6878      	ldr	r0, [r7, #4]
1000a56c:	f000 f816 	bl	1000a59c <UART_WaitOnFlagUntilTimeout>
1000a570:	4603      	mov	r3, r0
1000a572:	2b00      	cmp	r3, #0
1000a574:	d001      	beq.n	1000a57a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
1000a576:	2303      	movs	r3, #3
1000a578:	e00c      	b.n	1000a594 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
1000a57a:	687b      	ldr	r3, [r7, #4]
1000a57c:	2220      	movs	r2, #32
1000a57e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
1000a582:	687b      	ldr	r3, [r7, #4]
1000a584:	2220      	movs	r2, #32
1000a586:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  __HAL_UNLOCK(huart);
1000a58a:	687b      	ldr	r3, [r7, #4]
1000a58c:	2200      	movs	r2, #0
1000a58e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
1000a592:	2300      	movs	r3, #0
}
1000a594:	4618      	mov	r0, r3
1000a596:	3710      	adds	r7, #16
1000a598:	46bd      	mov	sp, r7
1000a59a:	bd80      	pop	{r7, pc}

1000a59c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
1000a59c:	b580      	push	{r7, lr}
1000a59e:	b084      	sub	sp, #16
1000a5a0:	af00      	add	r7, sp, #0
1000a5a2:	60f8      	str	r0, [r7, #12]
1000a5a4:	60b9      	str	r1, [r7, #8]
1000a5a6:	603b      	str	r3, [r7, #0]
1000a5a8:	4613      	mov	r3, r2
1000a5aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1000a5ac:	e062      	b.n	1000a674 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
1000a5ae:	69bb      	ldr	r3, [r7, #24]
1000a5b0:	f1b3 3fff 	cmp.w	r3, #4294967295
1000a5b4:	d05e      	beq.n	1000a674 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
1000a5b6:	f7f7 f987 	bl	100018c8 <HAL_GetTick>
1000a5ba:	4602      	mov	r2, r0
1000a5bc:	683b      	ldr	r3, [r7, #0]
1000a5be:	1ad3      	subs	r3, r2, r3
1000a5c0:	69ba      	ldr	r2, [r7, #24]
1000a5c2:	429a      	cmp	r2, r3
1000a5c4:	d302      	bcc.n	1000a5cc <UART_WaitOnFlagUntilTimeout+0x30>
1000a5c6:	69bb      	ldr	r3, [r7, #24]
1000a5c8:	2b00      	cmp	r3, #0
1000a5ca:	d11d      	bne.n	1000a608 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
1000a5cc:	68fb      	ldr	r3, [r7, #12]
1000a5ce:	681b      	ldr	r3, [r3, #0]
1000a5d0:	681a      	ldr	r2, [r3, #0]
1000a5d2:	68fb      	ldr	r3, [r7, #12]
1000a5d4:	681b      	ldr	r3, [r3, #0]
1000a5d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
1000a5da:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1000a5dc:	68fb      	ldr	r3, [r7, #12]
1000a5de:	681b      	ldr	r3, [r3, #0]
1000a5e0:	689a      	ldr	r2, [r3, #8]
1000a5e2:	68fb      	ldr	r3, [r7, #12]
1000a5e4:	681b      	ldr	r3, [r3, #0]
1000a5e6:	f022 0201 	bic.w	r2, r2, #1
1000a5ea:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
1000a5ec:	68fb      	ldr	r3, [r7, #12]
1000a5ee:	2220      	movs	r2, #32
1000a5f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
1000a5f4:	68fb      	ldr	r3, [r7, #12]
1000a5f6:	2220      	movs	r2, #32
1000a5f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
1000a5fc:	68fb      	ldr	r3, [r7, #12]
1000a5fe:	2200      	movs	r2, #0
1000a600:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
1000a604:	2303      	movs	r3, #3
1000a606:	e045      	b.n	1000a694 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
1000a608:	68fb      	ldr	r3, [r7, #12]
1000a60a:	681b      	ldr	r3, [r3, #0]
1000a60c:	681b      	ldr	r3, [r3, #0]
1000a60e:	f003 0304 	and.w	r3, r3, #4
1000a612:	2b00      	cmp	r3, #0
1000a614:	d02e      	beq.n	1000a674 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
1000a616:	68fb      	ldr	r3, [r7, #12]
1000a618:	681b      	ldr	r3, [r3, #0]
1000a61a:	69db      	ldr	r3, [r3, #28]
1000a61c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
1000a620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
1000a624:	d126      	bne.n	1000a674 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
1000a626:	68fb      	ldr	r3, [r7, #12]
1000a628:	681b      	ldr	r3, [r3, #0]
1000a62a:	f44f 6200 	mov.w	r2, #2048	; 0x800
1000a62e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
1000a630:	68fb      	ldr	r3, [r7, #12]
1000a632:	681b      	ldr	r3, [r3, #0]
1000a634:	681a      	ldr	r2, [r3, #0]
1000a636:	68fb      	ldr	r3, [r7, #12]
1000a638:	681b      	ldr	r3, [r3, #0]
1000a63a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
1000a63e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1000a640:	68fb      	ldr	r3, [r7, #12]
1000a642:	681b      	ldr	r3, [r3, #0]
1000a644:	689a      	ldr	r2, [r3, #8]
1000a646:	68fb      	ldr	r3, [r7, #12]
1000a648:	681b      	ldr	r3, [r3, #0]
1000a64a:	f022 0201 	bic.w	r2, r2, #1
1000a64e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
1000a650:	68fb      	ldr	r3, [r7, #12]
1000a652:	2220      	movs	r2, #32
1000a654:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
1000a658:	68fb      	ldr	r3, [r7, #12]
1000a65a:	2220      	movs	r2, #32
1000a65c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
1000a660:	68fb      	ldr	r3, [r7, #12]
1000a662:	2220      	movs	r2, #32
1000a664:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
1000a668:	68fb      	ldr	r3, [r7, #12]
1000a66a:	2200      	movs	r2, #0
1000a66c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
          
          return HAL_TIMEOUT;
1000a670:	2303      	movs	r3, #3
1000a672:	e00f      	b.n	1000a694 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1000a674:	68fb      	ldr	r3, [r7, #12]
1000a676:	681b      	ldr	r3, [r3, #0]
1000a678:	69da      	ldr	r2, [r3, #28]
1000a67a:	68bb      	ldr	r3, [r7, #8]
1000a67c:	4013      	ands	r3, r2
1000a67e:	68ba      	ldr	r2, [r7, #8]
1000a680:	429a      	cmp	r2, r3
1000a682:	bf0c      	ite	eq
1000a684:	2301      	moveq	r3, #1
1000a686:	2300      	movne	r3, #0
1000a688:	b2db      	uxtb	r3, r3
1000a68a:	461a      	mov	r2, r3
1000a68c:	79fb      	ldrb	r3, [r7, #7]
1000a68e:	429a      	cmp	r2, r3
1000a690:	d08d      	beq.n	1000a5ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
1000a692:	2300      	movs	r3, #0
}
1000a694:	4618      	mov	r0, r3
1000a696:	3710      	adds	r7, #16
1000a698:	46bd      	mov	sp, r7
1000a69a:	bd80      	pop	{r7, pc}

1000a69c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
1000a69c:	b480      	push	{r7}
1000a69e:	b085      	sub	sp, #20
1000a6a0:	af00      	add	r7, sp, #0
1000a6a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
1000a6a4:	687b      	ldr	r3, [r7, #4]
1000a6a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
1000a6aa:	2b01      	cmp	r3, #1
1000a6ac:	d101      	bne.n	1000a6b2 <HAL_UARTEx_DisableFifoMode+0x16>
1000a6ae:	2302      	movs	r3, #2
1000a6b0:	e027      	b.n	1000a702 <HAL_UARTEx_DisableFifoMode+0x66>
1000a6b2:	687b      	ldr	r3, [r7, #4]
1000a6b4:	2201      	movs	r2, #1
1000a6b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
1000a6ba:	687b      	ldr	r3, [r7, #4]
1000a6bc:	2224      	movs	r2, #36	; 0x24
1000a6be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1000a6c2:	687b      	ldr	r3, [r7, #4]
1000a6c4:	681b      	ldr	r3, [r3, #0]
1000a6c6:	681b      	ldr	r3, [r3, #0]
1000a6c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1000a6ca:	687b      	ldr	r3, [r7, #4]
1000a6cc:	681b      	ldr	r3, [r3, #0]
1000a6ce:	681a      	ldr	r2, [r3, #0]
1000a6d0:	687b      	ldr	r3, [r7, #4]
1000a6d2:	681b      	ldr	r3, [r3, #0]
1000a6d4:	f022 0201 	bic.w	r2, r2, #1
1000a6d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
1000a6da:	68fb      	ldr	r3, [r7, #12]
1000a6dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
1000a6e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
1000a6e2:	687b      	ldr	r3, [r7, #4]
1000a6e4:	2200      	movs	r2, #0
1000a6e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1000a6e8:	687b      	ldr	r3, [r7, #4]
1000a6ea:	681b      	ldr	r3, [r3, #0]
1000a6ec:	68fa      	ldr	r2, [r7, #12]
1000a6ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1000a6f0:	687b      	ldr	r3, [r7, #4]
1000a6f2:	2220      	movs	r2, #32
1000a6f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1000a6f8:	687b      	ldr	r3, [r7, #4]
1000a6fa:	2200      	movs	r2, #0
1000a6fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
1000a700:	2300      	movs	r3, #0
}
1000a702:	4618      	mov	r0, r3
1000a704:	3714      	adds	r7, #20
1000a706:	46bd      	mov	sp, r7
1000a708:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a70c:	4770      	bx	lr

1000a70e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1000a70e:	b580      	push	{r7, lr}
1000a710:	b084      	sub	sp, #16
1000a712:	af00      	add	r7, sp, #0
1000a714:	6078      	str	r0, [r7, #4]
1000a716:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1000a718:	687b      	ldr	r3, [r7, #4]
1000a71a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
1000a71e:	2b01      	cmp	r3, #1
1000a720:	d101      	bne.n	1000a726 <HAL_UARTEx_SetTxFifoThreshold+0x18>
1000a722:	2302      	movs	r3, #2
1000a724:	e02d      	b.n	1000a782 <HAL_UARTEx_SetTxFifoThreshold+0x74>
1000a726:	687b      	ldr	r3, [r7, #4]
1000a728:	2201      	movs	r2, #1
1000a72a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
1000a72e:	687b      	ldr	r3, [r7, #4]
1000a730:	2224      	movs	r2, #36	; 0x24
1000a732:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1000a736:	687b      	ldr	r3, [r7, #4]
1000a738:	681b      	ldr	r3, [r3, #0]
1000a73a:	681b      	ldr	r3, [r3, #0]
1000a73c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1000a73e:	687b      	ldr	r3, [r7, #4]
1000a740:	681b      	ldr	r3, [r3, #0]
1000a742:	681a      	ldr	r2, [r3, #0]
1000a744:	687b      	ldr	r3, [r7, #4]
1000a746:	681b      	ldr	r3, [r3, #0]
1000a748:	f022 0201 	bic.w	r2, r2, #1
1000a74c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
1000a74e:	687b      	ldr	r3, [r7, #4]
1000a750:	681b      	ldr	r3, [r3, #0]
1000a752:	689b      	ldr	r3, [r3, #8]
1000a754:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
1000a758:	687b      	ldr	r3, [r7, #4]
1000a75a:	681b      	ldr	r3, [r3, #0]
1000a75c:	683a      	ldr	r2, [r7, #0]
1000a75e:	430a      	orrs	r2, r1
1000a760:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1000a762:	6878      	ldr	r0, [r7, #4]
1000a764:	f000 f850 	bl	1000a808 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1000a768:	687b      	ldr	r3, [r7, #4]
1000a76a:	681b      	ldr	r3, [r3, #0]
1000a76c:	68fa      	ldr	r2, [r7, #12]
1000a76e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1000a770:	687b      	ldr	r3, [r7, #4]
1000a772:	2220      	movs	r2, #32
1000a774:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1000a778:	687b      	ldr	r3, [r7, #4]
1000a77a:	2200      	movs	r2, #0
1000a77c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
1000a780:	2300      	movs	r3, #0
}
1000a782:	4618      	mov	r0, r3
1000a784:	3710      	adds	r7, #16
1000a786:	46bd      	mov	sp, r7
1000a788:	bd80      	pop	{r7, pc}

1000a78a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1000a78a:	b580      	push	{r7, lr}
1000a78c:	b084      	sub	sp, #16
1000a78e:	af00      	add	r7, sp, #0
1000a790:	6078      	str	r0, [r7, #4]
1000a792:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1000a794:	687b      	ldr	r3, [r7, #4]
1000a796:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
1000a79a:	2b01      	cmp	r3, #1
1000a79c:	d101      	bne.n	1000a7a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
1000a79e:	2302      	movs	r3, #2
1000a7a0:	e02d      	b.n	1000a7fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
1000a7a2:	687b      	ldr	r3, [r7, #4]
1000a7a4:	2201      	movs	r2, #1
1000a7a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
1000a7aa:	687b      	ldr	r3, [r7, #4]
1000a7ac:	2224      	movs	r2, #36	; 0x24
1000a7ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1000a7b2:	687b      	ldr	r3, [r7, #4]
1000a7b4:	681b      	ldr	r3, [r3, #0]
1000a7b6:	681b      	ldr	r3, [r3, #0]
1000a7b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1000a7ba:	687b      	ldr	r3, [r7, #4]
1000a7bc:	681b      	ldr	r3, [r3, #0]
1000a7be:	681a      	ldr	r2, [r3, #0]
1000a7c0:	687b      	ldr	r3, [r7, #4]
1000a7c2:	681b      	ldr	r3, [r3, #0]
1000a7c4:	f022 0201 	bic.w	r2, r2, #1
1000a7c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
1000a7ca:	687b      	ldr	r3, [r7, #4]
1000a7cc:	681b      	ldr	r3, [r3, #0]
1000a7ce:	689b      	ldr	r3, [r3, #8]
1000a7d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
1000a7d4:	687b      	ldr	r3, [r7, #4]
1000a7d6:	681b      	ldr	r3, [r3, #0]
1000a7d8:	683a      	ldr	r2, [r7, #0]
1000a7da:	430a      	orrs	r2, r1
1000a7dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1000a7de:	6878      	ldr	r0, [r7, #4]
1000a7e0:	f000 f812 	bl	1000a808 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1000a7e4:	687b      	ldr	r3, [r7, #4]
1000a7e6:	681b      	ldr	r3, [r3, #0]
1000a7e8:	68fa      	ldr	r2, [r7, #12]
1000a7ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1000a7ec:	687b      	ldr	r3, [r7, #4]
1000a7ee:	2220      	movs	r2, #32
1000a7f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1000a7f4:	687b      	ldr	r3, [r7, #4]
1000a7f6:	2200      	movs	r2, #0
1000a7f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
1000a7fc:	2300      	movs	r3, #0
}
1000a7fe:	4618      	mov	r0, r3
1000a800:	3710      	adds	r7, #16
1000a802:	46bd      	mov	sp, r7
1000a804:	bd80      	pop	{r7, pc}
	...

1000a808 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
1000a808:	b480      	push	{r7}
1000a80a:	b089      	sub	sp, #36	; 0x24
1000a80c:	af00      	add	r7, sp, #0
1000a80e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
1000a810:	4a2d      	ldr	r2, [pc, #180]	; (1000a8c8 <UARTEx_SetNbDataToProcess+0xc0>)
1000a812:	f107 0314 	add.w	r3, r7, #20
1000a816:	e892 0003 	ldmia.w	r2, {r0, r1}
1000a81a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
1000a81e:	4a2b      	ldr	r2, [pc, #172]	; (1000a8cc <UARTEx_SetNbDataToProcess+0xc4>)
1000a820:	f107 030c 	add.w	r3, r7, #12
1000a824:	e892 0003 	ldmia.w	r2, {r0, r1}
1000a828:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
1000a82c:	687b      	ldr	r3, [r7, #4]
1000a82e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
1000a830:	2b00      	cmp	r3, #0
1000a832:	d108      	bne.n	1000a846 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
1000a834:	687b      	ldr	r3, [r7, #4]
1000a836:	2201      	movs	r2, #1
1000a838:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
1000a83c:	687b      	ldr	r3, [r7, #4]
1000a83e:	2201      	movs	r2, #1
1000a840:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
1000a844:	e039      	b.n	1000a8ba <UARTEx_SetNbDataToProcess+0xb2>
    rx_fifo_depth = RX_FIFO_DEPTH;
1000a846:	2308      	movs	r3, #8
1000a848:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
1000a84a:	2308      	movs	r3, #8
1000a84c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
1000a84e:	687b      	ldr	r3, [r7, #4]
1000a850:	681b      	ldr	r3, [r3, #0]
1000a852:	689b      	ldr	r3, [r3, #8]
1000a854:	0e5b      	lsrs	r3, r3, #25
1000a856:	b2db      	uxtb	r3, r3
1000a858:	f003 0307 	and.w	r3, r3, #7
1000a85c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
1000a85e:	687b      	ldr	r3, [r7, #4]
1000a860:	681b      	ldr	r3, [r3, #0]
1000a862:	689b      	ldr	r3, [r3, #8]
1000a864:	0f5b      	lsrs	r3, r3, #29
1000a866:	b2db      	uxtb	r3, r3
1000a868:	f003 0307 	and.w	r3, r3, #7
1000a86c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
1000a86e:	7fbb      	ldrb	r3, [r7, #30]
1000a870:	7f3a      	ldrb	r2, [r7, #28]
1000a872:	3220      	adds	r2, #32
1000a874:	443a      	add	r2, r7
1000a876:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
1000a87a:	fb02 f303 	mul.w	r3, r2, r3
1000a87e:	7f3a      	ldrb	r2, [r7, #28]
1000a880:	3220      	adds	r2, #32
1000a882:	443a      	add	r2, r7
1000a884:	f812 2c14 	ldrb.w	r2, [r2, #-20]
1000a888:	fb93 f3f2 	sdiv	r3, r3, r2
1000a88c:	b29a      	uxth	r2, r3
1000a88e:	687b      	ldr	r3, [r7, #4]
1000a890:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
1000a894:	7ffb      	ldrb	r3, [r7, #31]
1000a896:	7f7a      	ldrb	r2, [r7, #29]
1000a898:	3220      	adds	r2, #32
1000a89a:	443a      	add	r2, r7
1000a89c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
1000a8a0:	fb02 f303 	mul.w	r3, r2, r3
1000a8a4:	7f7a      	ldrb	r2, [r7, #29]
1000a8a6:	3220      	adds	r2, #32
1000a8a8:	443a      	add	r2, r7
1000a8aa:	f812 2c14 	ldrb.w	r2, [r2, #-20]
1000a8ae:	fb93 f3f2 	sdiv	r3, r3, r2
1000a8b2:	b29a      	uxth	r2, r3
1000a8b4:	687b      	ldr	r3, [r7, #4]
1000a8b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
1000a8ba:	bf00      	nop
1000a8bc:	3724      	adds	r7, #36	; 0x24
1000a8be:	46bd      	mov	sp, r7
1000a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a8c4:	4770      	bx	lr
1000a8c6:	bf00      	nop
1000a8c8:	10012670 	.word	0x10012670
1000a8cc:	10012678 	.word	0x10012678

1000a8d0 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
1000a8d0:	b480      	push	{r7}
1000a8d2:	b083      	sub	sp, #12
1000a8d4:	af00      	add	r7, sp, #0
1000a8d6:	6078      	str	r0, [r7, #4]
	list->prev = list;
1000a8d8:	687b      	ldr	r3, [r7, #4]
1000a8da:	687a      	ldr	r2, [r7, #4]
1000a8dc:	605a      	str	r2, [r3, #4]
	list->next = list;
1000a8de:	687b      	ldr	r3, [r7, #4]
1000a8e0:	687a      	ldr	r2, [r7, #4]
1000a8e2:	601a      	str	r2, [r3, #0]
}
1000a8e4:	bf00      	nop
1000a8e6:	370c      	adds	r7, #12
1000a8e8:	46bd      	mov	sp, r7
1000a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a8ee:	4770      	bx	lr

1000a8f0 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
1000a8f0:	b480      	push	{r7}
1000a8f2:	b083      	sub	sp, #12
1000a8f4:	af00      	add	r7, sp, #0
1000a8f6:	6078      	str	r0, [r7, #4]
1000a8f8:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
1000a8fa:	687b      	ldr	r3, [r7, #4]
1000a8fc:	685a      	ldr	r2, [r3, #4]
1000a8fe:	683b      	ldr	r3, [r7, #0]
1000a900:	605a      	str	r2, [r3, #4]
	new_node->next = node;
1000a902:	683b      	ldr	r3, [r7, #0]
1000a904:	687a      	ldr	r2, [r7, #4]
1000a906:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
1000a908:	683b      	ldr	r3, [r7, #0]
1000a90a:	681b      	ldr	r3, [r3, #0]
1000a90c:	683a      	ldr	r2, [r7, #0]
1000a90e:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
1000a910:	683b      	ldr	r3, [r7, #0]
1000a912:	685b      	ldr	r3, [r3, #4]
1000a914:	683a      	ldr	r2, [r7, #0]
1000a916:	601a      	str	r2, [r3, #0]
}
1000a918:	bf00      	nop
1000a91a:	370c      	adds	r7, #12
1000a91c:	46bd      	mov	sp, r7
1000a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a922:	4770      	bx	lr

1000a924 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
1000a924:	b580      	push	{r7, lr}
1000a926:	b082      	sub	sp, #8
1000a928:	af00      	add	r7, sp, #0
1000a92a:	6078      	str	r0, [r7, #4]
1000a92c:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
1000a92e:	6839      	ldr	r1, [r7, #0]
1000a930:	6878      	ldr	r0, [r7, #4]
1000a932:	f7ff ffdd 	bl	1000a8f0 <metal_list_add_before>
}
1000a936:	bf00      	nop
1000a938:	3708      	adds	r7, #8
1000a93a:	46bd      	mov	sp, r7
1000a93c:	bd80      	pop	{r7, pc}

1000a93e <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
1000a93e:	b580      	push	{r7, lr}
1000a940:	b082      	sub	sp, #8
1000a942:	af00      	add	r7, sp, #0
1000a944:	6078      	str	r0, [r7, #4]
1000a946:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
1000a948:	6839      	ldr	r1, [r7, #0]
1000a94a:	6878      	ldr	r0, [r7, #4]
1000a94c:	f001 fc26 	bl	1000c19c <metal_machine_cache_flush>
}
1000a950:	bf00      	nop
1000a952:	3708      	adds	r7, #8
1000a954:	46bd      	mov	sp, r7
1000a956:	bd80      	pop	{r7, pc}

1000a958 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
1000a958:	b580      	push	{r7, lr}
1000a95a:	b082      	sub	sp, #8
1000a95c:	af00      	add	r7, sp, #0
1000a95e:	6078      	str	r0, [r7, #4]
1000a960:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
1000a962:	6839      	ldr	r1, [r7, #0]
1000a964:	6878      	ldr	r0, [r7, #4]
1000a966:	f001 fc24 	bl	1000c1b2 <metal_machine_cache_invalidate>
}
1000a96a:	bf00      	nop
1000a96c:	3708      	adds	r7, #8
1000a96e:	46bd      	mov	sp, r7
1000a970:	bd80      	pop	{r7, pc}

1000a972 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
1000a972:	b580      	push	{r7, lr}
1000a974:	b082      	sub	sp, #8
1000a976:	af00      	add	r7, sp, #0
1000a978:	6078      	str	r0, [r7, #4]
1000a97a:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
1000a97c:	6839      	ldr	r1, [r7, #0]
1000a97e:	6878      	ldr	r0, [r7, #4]
1000a980:	f7ff ffdd 	bl	1000a93e <__metal_cache_flush>
}
1000a984:	bf00      	nop
1000a986:	3708      	adds	r7, #8
1000a988:	46bd      	mov	sp, r7
1000a98a:	bd80      	pop	{r7, pc}

1000a98c <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
1000a98c:	b580      	push	{r7, lr}
1000a98e:	b082      	sub	sp, #8
1000a990:	af00      	add	r7, sp, #0
1000a992:	6078      	str	r0, [r7, #4]
1000a994:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
1000a996:	6839      	ldr	r1, [r7, #0]
1000a998:	6878      	ldr	r0, [r7, #4]
1000a99a:	f7ff ffdd 	bl	1000a958 <__metal_cache_invalidate>
}
1000a99e:	bf00      	nop
1000a9a0:	3708      	adds	r7, #8
1000a9a2:	46bd      	mov	sp, r7
1000a9a4:	bd80      	pop	{r7, pc}
	...

1000a9a8 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
1000a9a8:	b580      	push	{r7, lr}
1000a9aa:	b082      	sub	sp, #8
1000a9ac:	af00      	add	r7, sp, #0
1000a9ae:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
1000a9b0:	687b      	ldr	r3, [r7, #4]
1000a9b2:	2b00      	cmp	r3, #0
1000a9b4:	d008      	beq.n	1000a9c8 <metal_bus_register+0x20>
1000a9b6:	687b      	ldr	r3, [r7, #4]
1000a9b8:	681b      	ldr	r3, [r3, #0]
1000a9ba:	2b00      	cmp	r3, #0
1000a9bc:	d004      	beq.n	1000a9c8 <metal_bus_register+0x20>
1000a9be:	687b      	ldr	r3, [r7, #4]
1000a9c0:	681b      	ldr	r3, [r3, #0]
1000a9c2:	781b      	ldrb	r3, [r3, #0]
1000a9c4:	2b00      	cmp	r3, #0
1000a9c6:	d102      	bne.n	1000a9ce <metal_bus_register+0x26>
		return -EINVAL;
1000a9c8:	f06f 0315 	mvn.w	r3, #21
1000a9cc:	e026      	b.n	1000aa1c <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
1000a9ce:	687b      	ldr	r3, [r7, #4]
1000a9d0:	681b      	ldr	r3, [r3, #0]
1000a9d2:	2100      	movs	r1, #0
1000a9d4:	4618      	mov	r0, r3
1000a9d6:	f000 f82b 	bl	1000aa30 <metal_bus_find>
1000a9da:	4603      	mov	r3, r0
1000a9dc:	2b00      	cmp	r3, #0
1000a9de:	d102      	bne.n	1000a9e6 <metal_bus_register+0x3e>
		return -EEXIST;
1000a9e0:	f06f 0310 	mvn.w	r3, #16
1000a9e4:	e01a      	b.n	1000aa1c <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
1000a9e6:	687b      	ldr	r3, [r7, #4]
1000a9e8:	331c      	adds	r3, #28
1000a9ea:	4618      	mov	r0, r3
1000a9ec:	f7ff ff70 	bl	1000a8d0 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
1000a9f0:	687b      	ldr	r3, [r7, #4]
1000a9f2:	3324      	adds	r3, #36	; 0x24
1000a9f4:	4619      	mov	r1, r3
1000a9f6:	480b      	ldr	r0, [pc, #44]	; (1000aa24 <metal_bus_register+0x7c>)
1000a9f8:	f7ff ff94 	bl	1000a924 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
1000a9fc:	4b0a      	ldr	r3, [pc, #40]	; (1000aa28 <metal_bus_register+0x80>)
1000a9fe:	781b      	ldrb	r3, [r3, #0]
1000aa00:	2b06      	cmp	r3, #6
1000aa02:	d90a      	bls.n	1000aa1a <metal_bus_register+0x72>
1000aa04:	4b08      	ldr	r3, [pc, #32]	; (1000aa28 <metal_bus_register+0x80>)
1000aa06:	685b      	ldr	r3, [r3, #4]
1000aa08:	2b00      	cmp	r3, #0
1000aa0a:	d006      	beq.n	1000aa1a <metal_bus_register+0x72>
1000aa0c:	4b06      	ldr	r3, [pc, #24]	; (1000aa28 <metal_bus_register+0x80>)
1000aa0e:	685b      	ldr	r3, [r3, #4]
1000aa10:	687a      	ldr	r2, [r7, #4]
1000aa12:	6812      	ldr	r2, [r2, #0]
1000aa14:	4905      	ldr	r1, [pc, #20]	; (1000aa2c <metal_bus_register+0x84>)
1000aa16:	2007      	movs	r0, #7
1000aa18:	4798      	blx	r3
	return 0;
1000aa1a:	2300      	movs	r3, #0
}
1000aa1c:	4618      	mov	r0, r3
1000aa1e:	3708      	adds	r7, #8
1000aa20:	46bd      	mov	sp, r7
1000aa22:	bd80      	pop	{r7, pc}
1000aa24:	10029b44 	.word	0x10029b44
1000aa28:	10029b3c 	.word	0x10029b3c
1000aa2c:	10012680 	.word	0x10012680

1000aa30 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
1000aa30:	b580      	push	{r7, lr}
1000aa32:	b084      	sub	sp, #16
1000aa34:	af00      	add	r7, sp, #0
1000aa36:	6078      	str	r0, [r7, #4]
1000aa38:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
1000aa3a:	4b12      	ldr	r3, [pc, #72]	; (1000aa84 <metal_bus_find+0x54>)
1000aa3c:	689b      	ldr	r3, [r3, #8]
1000aa3e:	60fb      	str	r3, [r7, #12]
1000aa40:	e016      	b.n	1000aa70 <metal_bus_find+0x40>
		bus = metal_container_of(node, struct metal_bus, node);
1000aa42:	68fb      	ldr	r3, [r7, #12]
1000aa44:	3b24      	subs	r3, #36	; 0x24
1000aa46:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) == 0 && result) {
1000aa48:	68bb      	ldr	r3, [r7, #8]
1000aa4a:	681b      	ldr	r3, [r3, #0]
1000aa4c:	6879      	ldr	r1, [r7, #4]
1000aa4e:	4618      	mov	r0, r3
1000aa50:	f7f5 faf6 	bl	10000040 <strcmp>
1000aa54:	4603      	mov	r3, r0
1000aa56:	2b00      	cmp	r3, #0
1000aa58:	d107      	bne.n	1000aa6a <metal_bus_find+0x3a>
1000aa5a:	683b      	ldr	r3, [r7, #0]
1000aa5c:	2b00      	cmp	r3, #0
1000aa5e:	d004      	beq.n	1000aa6a <metal_bus_find+0x3a>
			*result = bus;
1000aa60:	683b      	ldr	r3, [r7, #0]
1000aa62:	68ba      	ldr	r2, [r7, #8]
1000aa64:	601a      	str	r2, [r3, #0]
			return 0;
1000aa66:	2300      	movs	r3, #0
1000aa68:	e008      	b.n	1000aa7c <metal_bus_find+0x4c>
	metal_list_for_each(&_metal.common.bus_list, node) {
1000aa6a:	68fb      	ldr	r3, [r7, #12]
1000aa6c:	681b      	ldr	r3, [r3, #0]
1000aa6e:	60fb      	str	r3, [r7, #12]
1000aa70:	68fb      	ldr	r3, [r7, #12]
1000aa72:	4a05      	ldr	r2, [pc, #20]	; (1000aa88 <metal_bus_find+0x58>)
1000aa74:	4293      	cmp	r3, r2
1000aa76:	d1e4      	bne.n	1000aa42 <metal_bus_find+0x12>
		}
	}
	return -ENOENT;
1000aa78:	f06f 0301 	mvn.w	r3, #1
}
1000aa7c:	4618      	mov	r0, r3
1000aa7e:	3710      	adds	r7, #16
1000aa80:	46bd      	mov	sp, r7
1000aa82:	bd80      	pop	{r7, pc}
1000aa84:	10029b3c 	.word	0x10029b3c
1000aa88:	10029b44 	.word	0x10029b44

1000aa8c <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
1000aa8c:	b580      	push	{r7, lr}
1000aa8e:	b086      	sub	sp, #24
1000aa90:	af00      	add	r7, sp, #0
1000aa92:	60f8      	str	r0, [r7, #12]
1000aa94:	60b9      	str	r1, [r7, #8]
1000aa96:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
1000aa98:	68fb      	ldr	r3, [r7, #12]
1000aa9a:	2b00      	cmp	r3, #0
1000aa9c:	d00d      	beq.n	1000aaba <metal_device_open+0x2e>
1000aa9e:	68fb      	ldr	r3, [r7, #12]
1000aaa0:	781b      	ldrb	r3, [r3, #0]
1000aaa2:	2b00      	cmp	r3, #0
1000aaa4:	d009      	beq.n	1000aaba <metal_device_open+0x2e>
1000aaa6:	68bb      	ldr	r3, [r7, #8]
1000aaa8:	2b00      	cmp	r3, #0
1000aaaa:	d006      	beq.n	1000aaba <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
1000aaac:	68bb      	ldr	r3, [r7, #8]
1000aaae:	781b      	ldrb	r3, [r3, #0]
1000aab0:	2b00      	cmp	r3, #0
1000aab2:	d002      	beq.n	1000aaba <metal_device_open+0x2e>
1000aab4:	687b      	ldr	r3, [r7, #4]
1000aab6:	2b00      	cmp	r3, #0
1000aab8:	d102      	bne.n	1000aac0 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
1000aaba:	f06f 0315 	mvn.w	r3, #21
1000aabe:	e01f      	b.n	1000ab00 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
1000aac0:	f107 0310 	add.w	r3, r7, #16
1000aac4:	4619      	mov	r1, r3
1000aac6:	68f8      	ldr	r0, [r7, #12]
1000aac8:	f7ff ffb2 	bl	1000aa30 <metal_bus_find>
1000aacc:	6178      	str	r0, [r7, #20]
	if (error)
1000aace:	697b      	ldr	r3, [r7, #20]
1000aad0:	2b00      	cmp	r3, #0
1000aad2:	d001      	beq.n	1000aad8 <metal_device_open+0x4c>
		return error;
1000aad4:	697b      	ldr	r3, [r7, #20]
1000aad6:	e013      	b.n	1000ab00 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
1000aad8:	693b      	ldr	r3, [r7, #16]
1000aada:	689b      	ldr	r3, [r3, #8]
1000aadc:	2b00      	cmp	r3, #0
1000aade:	d102      	bne.n	1000aae6 <metal_device_open+0x5a>
		return -ENODEV;
1000aae0:	f06f 0312 	mvn.w	r3, #18
1000aae4:	e00c      	b.n	1000ab00 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
1000aae6:	693b      	ldr	r3, [r7, #16]
1000aae8:	689b      	ldr	r3, [r3, #8]
1000aaea:	6938      	ldr	r0, [r7, #16]
1000aaec:	687a      	ldr	r2, [r7, #4]
1000aaee:	68b9      	ldr	r1, [r7, #8]
1000aaf0:	4798      	blx	r3
1000aaf2:	6178      	str	r0, [r7, #20]
	if (error)
1000aaf4:	697b      	ldr	r3, [r7, #20]
1000aaf6:	2b00      	cmp	r3, #0
1000aaf8:	d001      	beq.n	1000aafe <metal_device_open+0x72>
		return error;
1000aafa:	697b      	ldr	r3, [r7, #20]
1000aafc:	e000      	b.n	1000ab00 <metal_device_open+0x74>

	return 0;
1000aafe:	2300      	movs	r3, #0
}
1000ab00:	4618      	mov	r0, r3
1000ab02:	3718      	adds	r7, #24
1000ab04:	46bd      	mov	sp, r7
1000ab06:	bd80      	pop	{r7, pc}

1000ab08 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
1000ab08:	b580      	push	{r7, lr}
1000ab0a:	b082      	sub	sp, #8
1000ab0c:	af00      	add	r7, sp, #0
1000ab0e:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
1000ab10:	687b      	ldr	r3, [r7, #4]
1000ab12:	681b      	ldr	r3, [r3, #0]
1000ab14:	2b00      	cmp	r3, #0
1000ab16:	d008      	beq.n	1000ab2a <metal_register_generic_device+0x22>
1000ab18:	687b      	ldr	r3, [r7, #4]
1000ab1a:	681b      	ldr	r3, [r3, #0]
1000ab1c:	781b      	ldrb	r3, [r3, #0]
1000ab1e:	2b00      	cmp	r3, #0
1000ab20:	d003      	beq.n	1000ab2a <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
1000ab22:	687b      	ldr	r3, [r7, #4]
1000ab24:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
1000ab26:	2b02      	cmp	r3, #2
1000ab28:	d902      	bls.n	1000ab30 <metal_register_generic_device+0x28>
		return -EINVAL;
1000ab2a:	f06f 0315 	mvn.w	r3, #21
1000ab2e:	e009      	b.n	1000ab44 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
1000ab30:	687b      	ldr	r3, [r7, #4]
1000ab32:	4a06      	ldr	r2, [pc, #24]	; (1000ab4c <metal_register_generic_device+0x44>)
1000ab34:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
1000ab36:	687b      	ldr	r3, [r7, #4]
1000ab38:	337c      	adds	r3, #124	; 0x7c
1000ab3a:	4619      	mov	r1, r3
1000ab3c:	4804      	ldr	r0, [pc, #16]	; (1000ab50 <metal_register_generic_device+0x48>)
1000ab3e:	f7ff fef1 	bl	1000a924 <metal_list_add_tail>
			    &device->node);
	return 0;
1000ab42:	2300      	movs	r3, #0
}
1000ab44:	4618      	mov	r0, r3
1000ab46:	3708      	adds	r7, #8
1000ab48:	46bd      	mov	sp, r7
1000ab4a:	bd80      	pop	{r7, pc}
1000ab4c:	10020014 	.word	0x10020014
1000ab50:	10029b54 	.word	0x10029b54

1000ab54 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
1000ab54:	b580      	push	{r7, lr}
1000ab56:	b086      	sub	sp, #24
1000ab58:	af00      	add	r7, sp, #0
1000ab5a:	60f8      	str	r0, [r7, #12]
1000ab5c:	60b9      	str	r1, [r7, #8]
1000ab5e:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
1000ab60:	4b12      	ldr	r3, [pc, #72]	; (1000abac <metal_generic_dev_open+0x58>)
1000ab62:	699b      	ldr	r3, [r3, #24]
1000ab64:	617b      	str	r3, [r7, #20]
1000ab66:	e016      	b.n	1000ab96 <metal_generic_dev_open+0x42>
		dev = metal_container_of(node, struct metal_device, node);
1000ab68:	697b      	ldr	r3, [r7, #20]
1000ab6a:	3b7c      	subs	r3, #124	; 0x7c
1000ab6c:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) == 0) {
1000ab6e:	693b      	ldr	r3, [r7, #16]
1000ab70:	681b      	ldr	r3, [r3, #0]
1000ab72:	68b9      	ldr	r1, [r7, #8]
1000ab74:	4618      	mov	r0, r3
1000ab76:	f7f5 fa63 	bl	10000040 <strcmp>
1000ab7a:	4603      	mov	r3, r0
1000ab7c:	2b00      	cmp	r3, #0
1000ab7e:	d107      	bne.n	1000ab90 <metal_generic_dev_open+0x3c>
			*device = dev;
1000ab80:	687b      	ldr	r3, [r7, #4]
1000ab82:	693a      	ldr	r2, [r7, #16]
1000ab84:	601a      	str	r2, [r3, #0]
			return metal_generic_dev_sys_open(dev);
1000ab86:	6938      	ldr	r0, [r7, #16]
1000ab88:	f000 f890 	bl	1000acac <metal_generic_dev_sys_open>
1000ab8c:	4603      	mov	r3, r0
1000ab8e:	e008      	b.n	1000aba2 <metal_generic_dev_open+0x4e>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
1000ab90:	697b      	ldr	r3, [r7, #20]
1000ab92:	681b      	ldr	r3, [r3, #0]
1000ab94:	617b      	str	r3, [r7, #20]
1000ab96:	697b      	ldr	r3, [r7, #20]
1000ab98:	4a05      	ldr	r2, [pc, #20]	; (1000abb0 <metal_generic_dev_open+0x5c>)
1000ab9a:	4293      	cmp	r3, r2
1000ab9c:	d1e4      	bne.n	1000ab68 <metal_generic_dev_open+0x14>
		}
	}

	return -ENODEV;
1000ab9e:	f06f 0312 	mvn.w	r3, #18
}
1000aba2:	4618      	mov	r0, r3
1000aba4:	3718      	adds	r7, #24
1000aba6:	46bd      	mov	sp, r7
1000aba8:	bd80      	pop	{r7, pc}
1000abaa:	bf00      	nop
1000abac:	10029b3c 	.word	0x10029b3c
1000abb0:	10029b54 	.word	0x10029b54

1000abb4 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
1000abb4:	b580      	push	{r7, lr}
1000abb6:	b086      	sub	sp, #24
1000abb8:	af00      	add	r7, sp, #0
1000abba:	60f8      	str	r0, [r7, #12]
1000abbc:	60b9      	str	r1, [r7, #8]
1000abbe:	607a      	str	r2, [r7, #4]
1000abc0:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;

	if (sg_out != sg_in)
1000abc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000abc4:	683b      	ldr	r3, [r7, #0]
1000abc6:	429a      	cmp	r2, r3
1000abc8:	d009      	beq.n	1000abde <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
1000abca:	6a3a      	ldr	r2, [r7, #32]
1000abcc:	4613      	mov	r3, r2
1000abce:	005b      	lsls	r3, r3, #1
1000abd0:	4413      	add	r3, r2
1000abd2:	009b      	lsls	r3, r3, #2
1000abd4:	461a      	mov	r2, r3
1000abd6:	6839      	ldr	r1, [r7, #0]
1000abd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000abda:	f005 fbc8 	bl	1001036e <memcpy>
	for (i = 0; i < nents_in; i++) {
1000abde:	2300      	movs	r3, #0
1000abe0:	617b      	str	r3, [r7, #20]
1000abe2:	e02f      	b.n	1000ac44 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
1000abe4:	687b      	ldr	r3, [r7, #4]
1000abe6:	2b02      	cmp	r3, #2
1000abe8:	d114      	bne.n	1000ac14 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
1000abea:	697a      	ldr	r2, [r7, #20]
1000abec:	4613      	mov	r3, r2
1000abee:	005b      	lsls	r3, r3, #1
1000abf0:	4413      	add	r3, r2
1000abf2:	009b      	lsls	r3, r3, #2
1000abf4:	461a      	mov	r2, r3
1000abf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000abf8:	4413      	add	r3, r2
1000abfa:	6818      	ldr	r0, [r3, #0]
1000abfc:	697a      	ldr	r2, [r7, #20]
1000abfe:	4613      	mov	r3, r2
1000ac00:	005b      	lsls	r3, r3, #1
1000ac02:	4413      	add	r3, r2
1000ac04:	009b      	lsls	r3, r3, #2
1000ac06:	461a      	mov	r2, r3
1000ac08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000ac0a:	4413      	add	r3, r2
1000ac0c:	689b      	ldr	r3, [r3, #8]
1000ac0e:	4619      	mov	r1, r3
1000ac10:	f7ff feaf 	bl	1000a972 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
1000ac14:	697a      	ldr	r2, [r7, #20]
1000ac16:	4613      	mov	r3, r2
1000ac18:	005b      	lsls	r3, r3, #1
1000ac1a:	4413      	add	r3, r2
1000ac1c:	009b      	lsls	r3, r3, #2
1000ac1e:	461a      	mov	r2, r3
1000ac20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000ac22:	4413      	add	r3, r2
1000ac24:	6818      	ldr	r0, [r3, #0]
1000ac26:	697a      	ldr	r2, [r7, #20]
1000ac28:	4613      	mov	r3, r2
1000ac2a:	005b      	lsls	r3, r3, #1
1000ac2c:	4413      	add	r3, r2
1000ac2e:	009b      	lsls	r3, r3, #2
1000ac30:	461a      	mov	r2, r3
1000ac32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000ac34:	4413      	add	r3, r2
1000ac36:	689b      	ldr	r3, [r3, #8]
1000ac38:	4619      	mov	r1, r3
1000ac3a:	f7ff fea7 	bl	1000a98c <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
1000ac3e:	697b      	ldr	r3, [r7, #20]
1000ac40:	3301      	adds	r3, #1
1000ac42:	617b      	str	r3, [r7, #20]
1000ac44:	697a      	ldr	r2, [r7, #20]
1000ac46:	6a3b      	ldr	r3, [r7, #32]
1000ac48:	429a      	cmp	r2, r3
1000ac4a:	dbcb      	blt.n	1000abe4 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
1000ac4c:	6a3b      	ldr	r3, [r7, #32]
}
1000ac4e:	4618      	mov	r0, r3
1000ac50:	3718      	adds	r7, #24
1000ac52:	46bd      	mov	sp, r7
1000ac54:	bd80      	pop	{r7, pc}

1000ac56 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
1000ac56:	b580      	push	{r7, lr}
1000ac58:	b086      	sub	sp, #24
1000ac5a:	af00      	add	r7, sp, #0
1000ac5c:	60f8      	str	r0, [r7, #12]
1000ac5e:	60b9      	str	r1, [r7, #8]
1000ac60:	607a      	str	r2, [r7, #4]
1000ac62:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;
	(void)dir;

	for (i = 0; i < nents; i++) {
1000ac64:	2300      	movs	r3, #0
1000ac66:	617b      	str	r3, [r7, #20]
1000ac68:	e017      	b.n	1000ac9a <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
1000ac6a:	697a      	ldr	r2, [r7, #20]
1000ac6c:	4613      	mov	r3, r2
1000ac6e:	005b      	lsls	r3, r3, #1
1000ac70:	4413      	add	r3, r2
1000ac72:	009b      	lsls	r3, r3, #2
1000ac74:	461a      	mov	r2, r3
1000ac76:	683b      	ldr	r3, [r7, #0]
1000ac78:	4413      	add	r3, r2
1000ac7a:	6818      	ldr	r0, [r3, #0]
1000ac7c:	697a      	ldr	r2, [r7, #20]
1000ac7e:	4613      	mov	r3, r2
1000ac80:	005b      	lsls	r3, r3, #1
1000ac82:	4413      	add	r3, r2
1000ac84:	009b      	lsls	r3, r3, #2
1000ac86:	461a      	mov	r2, r3
1000ac88:	683b      	ldr	r3, [r7, #0]
1000ac8a:	4413      	add	r3, r2
1000ac8c:	689b      	ldr	r3, [r3, #8]
1000ac8e:	4619      	mov	r1, r3
1000ac90:	f7ff fe7c 	bl	1000a98c <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
1000ac94:	697b      	ldr	r3, [r7, #20]
1000ac96:	3301      	adds	r3, #1
1000ac98:	617b      	str	r3, [r7, #20]
1000ac9a:	697a      	ldr	r2, [r7, #20]
1000ac9c:	6a3b      	ldr	r3, [r7, #32]
1000ac9e:	429a      	cmp	r2, r3
1000aca0:	dbe3      	blt.n	1000ac6a <metal_generic_dev_dma_unmap+0x14>
	}
}
1000aca2:	bf00      	nop
1000aca4:	bf00      	nop
1000aca6:	3718      	adds	r7, #24
1000aca8:	46bd      	mov	sp, r7
1000acaa:	bd80      	pop	{r7, pc}

1000acac <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
1000acac:	b580      	push	{r7, lr}
1000acae:	b084      	sub	sp, #16
1000acb0:	af00      	add	r7, sp, #0
1000acb2:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned int i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
1000acb4:	2300      	movs	r3, #0
1000acb6:	60fb      	str	r3, [r7, #12]
1000acb8:	e013      	b.n	1000ace2 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
1000acba:	68fa      	ldr	r2, [r7, #12]
1000acbc:	4613      	mov	r3, r2
1000acbe:	00db      	lsls	r3, r3, #3
1000acc0:	1a9b      	subs	r3, r3, r2
1000acc2:	00db      	lsls	r3, r3, #3
1000acc4:	3308      	adds	r3, #8
1000acc6:	687a      	ldr	r2, [r7, #4]
1000acc8:	4413      	add	r3, r2
1000acca:	3304      	adds	r3, #4
1000accc:	60bb      	str	r3, [r7, #8]
		if (!io->size)
1000acce:	68bb      	ldr	r3, [r7, #8]
1000acd0:	689b      	ldr	r3, [r3, #8]
1000acd2:	2b00      	cmp	r3, #0
1000acd4:	d00b      	beq.n	1000acee <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
1000acd6:	68b8      	ldr	r0, [r7, #8]
1000acd8:	f000 f81e 	bl	1000ad18 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
1000acdc:	68fb      	ldr	r3, [r7, #12]
1000acde:	3301      	adds	r3, #1
1000ace0:	60fb      	str	r3, [r7, #12]
1000ace2:	687b      	ldr	r3, [r7, #4]
1000ace4:	689b      	ldr	r3, [r3, #8]
1000ace6:	68fa      	ldr	r2, [r7, #12]
1000ace8:	429a      	cmp	r2, r3
1000acea:	d3e6      	bcc.n	1000acba <metal_generic_dev_sys_open+0xe>
1000acec:	e000      	b.n	1000acf0 <metal_generic_dev_sys_open+0x44>
			break;
1000acee:	bf00      	nop
	}

	return 0;
1000acf0:	2300      	movs	r3, #0
}
1000acf2:	4618      	mov	r0, r3
1000acf4:	3710      	adds	r7, #16
1000acf6:	46bd      	mov	sp, r7
1000acf8:	bd80      	pop	{r7, pc}
	...

1000acfc <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
1000acfc:	b580      	push	{r7, lr}
1000acfe:	b082      	sub	sp, #8
1000ad00:	af00      	add	r7, sp, #0
1000ad02:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
1000ad04:	4803      	ldr	r0, [pc, #12]	; (1000ad14 <metal_sys_init+0x18>)
1000ad06:	f7ff fe4f 	bl	1000a9a8 <metal_bus_register>
	return 0;
1000ad0a:	2300      	movs	r3, #0
}
1000ad0c:	4618      	mov	r0, r3
1000ad0e:	3708      	adds	r7, #8
1000ad10:	46bd      	mov	sp, r7
1000ad12:	bd80      	pop	{r7, pc}
1000ad14:	10020014 	.word	0x10020014

1000ad18 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
1000ad18:	b580      	push	{r7, lr}
1000ad1a:	b086      	sub	sp, #24
1000ad1c:	af00      	add	r7, sp, #0
1000ad1e:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = io->virt;
1000ad20:	687b      	ldr	r3, [r7, #4]
1000ad22:	681b      	ldr	r3, [r3, #0]
1000ad24:	60fb      	str	r3, [r7, #12]
	psize = (size_t)io->size;
1000ad26:	687b      	ldr	r3, [r7, #4]
1000ad28:	689b      	ldr	r3, [r3, #8]
1000ad2a:	613b      	str	r3, [r7, #16]
	if (psize) {
1000ad2c:	693b      	ldr	r3, [r7, #16]
1000ad2e:	2b00      	cmp	r3, #0
1000ad30:	d02c      	beq.n	1000ad8c <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
1000ad32:	687b      	ldr	r3, [r7, #4]
1000ad34:	68db      	ldr	r3, [r3, #12]
1000ad36:	693a      	ldr	r2, [r7, #16]
1000ad38:	fa22 f303 	lsr.w	r3, r2, r3
1000ad3c:	2b00      	cmp	r3, #0
1000ad3e:	d005      	beq.n	1000ad4c <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
1000ad40:	687b      	ldr	r3, [r7, #4]
1000ad42:	68db      	ldr	r3, [r3, #12]
1000ad44:	2201      	movs	r2, #1
1000ad46:	fa02 f303 	lsl.w	r3, r2, r3
1000ad4a:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
1000ad4c:	2300      	movs	r3, #0
1000ad4e:	617b      	str	r3, [r7, #20]
1000ad50:	e013      	b.n	1000ad7a <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
1000ad52:	687b      	ldr	r3, [r7, #4]
1000ad54:	685a      	ldr	r2, [r3, #4]
1000ad56:	697b      	ldr	r3, [r7, #20]
1000ad58:	009b      	lsls	r3, r3, #2
1000ad5a:	4413      	add	r3, r2
1000ad5c:	6819      	ldr	r1, [r3, #0]
1000ad5e:	687b      	ldr	r3, [r7, #4]
1000ad60:	695b      	ldr	r3, [r3, #20]
1000ad62:	693a      	ldr	r2, [r7, #16]
1000ad64:	68f8      	ldr	r0, [r7, #12]
1000ad66:	f001 fa2f 	bl	1000c1c8 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
1000ad6a:	693b      	ldr	r3, [r7, #16]
1000ad6c:	009b      	lsls	r3, r3, #2
1000ad6e:	68fa      	ldr	r2, [r7, #12]
1000ad70:	4413      	add	r3, r2
1000ad72:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
1000ad74:	697b      	ldr	r3, [r7, #20]
1000ad76:	3301      	adds	r3, #1
1000ad78:	617b      	str	r3, [r7, #20]
1000ad7a:	687b      	ldr	r3, [r7, #4]
1000ad7c:	689a      	ldr	r2, [r3, #8]
1000ad7e:	687b      	ldr	r3, [r7, #4]
1000ad80:	68db      	ldr	r3, [r3, #12]
1000ad82:	fa22 f303 	lsr.w	r3, r2, r3
1000ad86:	697a      	ldr	r2, [r7, #20]
1000ad88:	429a      	cmp	r2, r3
1000ad8a:	d9e2      	bls.n	1000ad52 <metal_sys_io_mem_map+0x3a>
		}
	}
}
1000ad8c:	bf00      	nop
1000ad8e:	3718      	adds	r7, #24
1000ad90:	46bd      	mov	sp, r7
1000ad92:	bd80      	pop	{r7, pc}

1000ad94 <metal_list_init>:
{
1000ad94:	b480      	push	{r7}
1000ad96:	b083      	sub	sp, #12
1000ad98:	af00      	add	r7, sp, #0
1000ad9a:	6078      	str	r0, [r7, #4]
	list->prev = list;
1000ad9c:	687b      	ldr	r3, [r7, #4]
1000ad9e:	687a      	ldr	r2, [r7, #4]
1000ada0:	605a      	str	r2, [r3, #4]
	list->next = list;
1000ada2:	687b      	ldr	r3, [r7, #4]
1000ada4:	687a      	ldr	r2, [r7, #4]
1000ada6:	601a      	str	r2, [r3, #0]
}
1000ada8:	bf00      	nop
1000adaa:	370c      	adds	r7, #12
1000adac:	46bd      	mov	sp, r7
1000adae:	f85d 7b04 	ldr.w	r7, [sp], #4
1000adb2:	4770      	bx	lr

1000adb4 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
1000adb4:	b580      	push	{r7, lr}
1000adb6:	b084      	sub	sp, #16
1000adb8:	af00      	add	r7, sp, #0
1000adba:	6078      	str	r0, [r7, #4]
	int error = 0;
1000adbc:	2300      	movs	r3, #0
1000adbe:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
1000adc0:	2220      	movs	r2, #32
1000adc2:	2100      	movs	r1, #0
1000adc4:	4810      	ldr	r0, [pc, #64]	; (1000ae08 <metal_init+0x54>)
1000adc6:	f005 fa1e 	bl	10010206 <memset>

	_metal.common.log_handler   = params->log_handler;
1000adca:	687b      	ldr	r3, [r7, #4]
1000adcc:	681b      	ldr	r3, [r3, #0]
1000adce:	4a0e      	ldr	r2, [pc, #56]	; (1000ae08 <metal_init+0x54>)
1000add0:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
1000add2:	687b      	ldr	r3, [r7, #4]
1000add4:	791a      	ldrb	r2, [r3, #4]
1000add6:	4b0c      	ldr	r3, [pc, #48]	; (1000ae08 <metal_init+0x54>)
1000add8:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
1000adda:	480c      	ldr	r0, [pc, #48]	; (1000ae0c <metal_init+0x58>)
1000addc:	f7ff ffda 	bl	1000ad94 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
1000ade0:	480b      	ldr	r0, [pc, #44]	; (1000ae10 <metal_init+0x5c>)
1000ade2:	f7ff ffd7 	bl	1000ad94 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
1000ade6:	480b      	ldr	r0, [pc, #44]	; (1000ae14 <metal_init+0x60>)
1000ade8:	f7ff ffd4 	bl	1000ad94 <metal_list_init>

	error = metal_sys_init(params);
1000adec:	6878      	ldr	r0, [r7, #4]
1000adee:	f7ff ff85 	bl	1000acfc <metal_sys_init>
1000adf2:	60f8      	str	r0, [r7, #12]
	if (error)
1000adf4:	68fb      	ldr	r3, [r7, #12]
1000adf6:	2b00      	cmp	r3, #0
1000adf8:	d001      	beq.n	1000adfe <metal_init+0x4a>
		return error;
1000adfa:	68fb      	ldr	r3, [r7, #12]
1000adfc:	e000      	b.n	1000ae00 <metal_init+0x4c>

	return error;
1000adfe:	68fb      	ldr	r3, [r7, #12]
}
1000ae00:	4618      	mov	r0, r3
1000ae02:	3710      	adds	r7, #16
1000ae04:	46bd      	mov	sp, r7
1000ae06:	bd80      	pop	{r7, pc}
1000ae08:	10029b3c 	.word	0x10029b3c
1000ae0c:	10029b44 	.word	0x10029b44
1000ae10:	10029b4c 	.word	0x10029b4c
1000ae14:	10029b54 	.word	0x10029b54

1000ae18 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
1000ae18:	b480      	push	{r7}
1000ae1a:	b083      	sub	sp, #12
1000ae1c:	af00      	add	r7, sp, #0
1000ae1e:	6078      	str	r0, [r7, #4]
1000ae20:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
1000ae22:	687b      	ldr	r3, [r7, #4]
1000ae24:	681b      	ldr	r3, [r3, #0]
		? (void *)((uintptr_t)io->virt + offset)
		: NULL);
1000ae26:	f1b3 3fff 	cmp.w	r3, #4294967295
1000ae2a:	d00a      	beq.n	1000ae42 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
1000ae2c:	687b      	ldr	r3, [r7, #4]
1000ae2e:	689b      	ldr	r3, [r3, #8]
1000ae30:	683a      	ldr	r2, [r7, #0]
1000ae32:	429a      	cmp	r2, r3
1000ae34:	d205      	bcs.n	1000ae42 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
1000ae36:	687b      	ldr	r3, [r7, #4]
1000ae38:	681b      	ldr	r3, [r3, #0]
1000ae3a:	461a      	mov	r2, r3
1000ae3c:	683b      	ldr	r3, [r7, #0]
1000ae3e:	4413      	add	r3, r2
		: NULL);
1000ae40:	e000      	b.n	1000ae44 <metal_io_virt+0x2c>
1000ae42:	2300      	movs	r3, #0
}
1000ae44:	4618      	mov	r0, r3
1000ae46:	370c      	adds	r7, #12
1000ae48:	46bd      	mov	sp, r7
1000ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000ae4e:	4770      	bx	lr

1000ae50 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
1000ae50:	b5b0      	push	{r4, r5, r7, lr}
1000ae52:	b08c      	sub	sp, #48	; 0x30
1000ae54:	af00      	add	r7, sp, #0
1000ae56:	60f8      	str	r0, [r7, #12]
1000ae58:	60b9      	str	r1, [r7, #8]
1000ae5a:	607a      	str	r2, [r7, #4]
1000ae5c:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {
1000ae5e:	f107 0310 	add.w	r3, r7, #16
1000ae62:	2220      	movs	r2, #32
1000ae64:	2100      	movs	r1, #0
1000ae66:	4618      	mov	r0, r3
1000ae68:	f005 f9cd 	bl	10010206 <memset>
		NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
	};

	io->virt = virt;
1000ae6c:	68fb      	ldr	r3, [r7, #12]
1000ae6e:	68ba      	ldr	r2, [r7, #8]
1000ae70:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
1000ae72:	68fb      	ldr	r3, [r7, #12]
1000ae74:	687a      	ldr	r2, [r7, #4]
1000ae76:	605a      	str	r2, [r3, #4]
	io->size = size;
1000ae78:	68fb      	ldr	r3, [r7, #12]
1000ae7a:	683a      	ldr	r2, [r7, #0]
1000ae7c:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
1000ae7e:	68fb      	ldr	r3, [r7, #12]
1000ae80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
1000ae82:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
1000ae84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000ae86:	2b1f      	cmp	r3, #31
1000ae88:	d904      	bls.n	1000ae94 <metal_io_init+0x44>
		/* avoid overflow */
		io->page_mask = -1UL;
1000ae8a:	68fb      	ldr	r3, [r7, #12]
1000ae8c:	f04f 32ff 	mov.w	r2, #4294967295
1000ae90:	611a      	str	r2, [r3, #16]
1000ae92:	e006      	b.n	1000aea2 <metal_io_init+0x52>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
1000ae94:	2201      	movs	r2, #1
1000ae96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000ae98:	fa02 f303 	lsl.w	r3, r2, r3
1000ae9c:	1e5a      	subs	r2, r3, #1
1000ae9e:	68fb      	ldr	r3, [r7, #12]
1000aea0:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
1000aea2:	68fb      	ldr	r3, [r7, #12]
1000aea4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
1000aea6:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
1000aea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
1000aeaa:	2b00      	cmp	r3, #0
1000aeac:	d00b      	beq.n	1000aec6 <metal_io_init+0x76>
1000aeae:	68fb      	ldr	r3, [r7, #12]
1000aeb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
1000aeb2:	f103 0418 	add.w	r4, r3, #24
1000aeb6:	4615      	mov	r5, r2
1000aeb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1000aeba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1000aebc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1000aec0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1000aec4:	e00a      	b.n	1000aedc <metal_io_init+0x8c>
1000aec6:	68fb      	ldr	r3, [r7, #12]
1000aec8:	f103 0418 	add.w	r4, r3, #24
1000aecc:	f107 0510 	add.w	r5, r7, #16
1000aed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1000aed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1000aed4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1000aed8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
1000aedc:	68f8      	ldr	r0, [r7, #12]
1000aede:	f7ff ff1b 	bl	1000ad18 <metal_sys_io_mem_map>
}
1000aee2:	bf00      	nop
1000aee4:	3730      	adds	r7, #48	; 0x30
1000aee6:	46bd      	mov	sp, r7
1000aee8:	bdb0      	pop	{r4, r5, r7, pc}

1000aeea <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
1000aeea:	b590      	push	{r4, r7, lr}
1000aeec:	b08b      	sub	sp, #44	; 0x2c
1000aeee:	af02      	add	r7, sp, #8
1000aef0:	60f8      	str	r0, [r7, #12]
1000aef2:	60b9      	str	r1, [r7, #8]
1000aef4:	607a      	str	r2, [r7, #4]
1000aef6:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
1000aef8:	68b9      	ldr	r1, [r7, #8]
1000aefa:	68f8      	ldr	r0, [r7, #12]
1000aefc:	f7ff ff8c 	bl	1000ae18 <metal_io_virt>
1000af00:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
1000af02:	687b      	ldr	r3, [r7, #4]
1000af04:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
1000af06:	69fb      	ldr	r3, [r7, #28]
1000af08:	2b00      	cmp	r3, #0
1000af0a:	d102      	bne.n	1000af12 <metal_io_block_read+0x28>
		return -ERANGE;
1000af0c:	f06f 0321 	mvn.w	r3, #33	; 0x21
1000af10:	e05c      	b.n	1000afcc <metal_io_block_read+0xe2>
	if ((offset + len) > io->size)
1000af12:	683a      	ldr	r2, [r7, #0]
1000af14:	68bb      	ldr	r3, [r7, #8]
1000af16:	441a      	add	r2, r3
1000af18:	68fb      	ldr	r3, [r7, #12]
1000af1a:	689b      	ldr	r3, [r3, #8]
1000af1c:	429a      	cmp	r2, r3
1000af1e:	d904      	bls.n	1000af2a <metal_io_block_read+0x40>
		len = io->size - offset;
1000af20:	68fb      	ldr	r3, [r7, #12]
1000af22:	689a      	ldr	r2, [r3, #8]
1000af24:	68bb      	ldr	r3, [r7, #8]
1000af26:	1ad3      	subs	r3, r2, r3
1000af28:	603b      	str	r3, [r7, #0]
	retlen = len;
1000af2a:	683b      	ldr	r3, [r7, #0]
1000af2c:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
1000af2e:	68fb      	ldr	r3, [r7, #12]
1000af30:	6a1b      	ldr	r3, [r3, #32]
1000af32:	2b00      	cmp	r3, #0
1000af34:	d00a      	beq.n	1000af4c <metal_io_block_read+0x62>
		retlen = (*io->ops.block_read)(
1000af36:	68fb      	ldr	r3, [r7, #12]
1000af38:	6a1c      	ldr	r4, [r3, #32]
1000af3a:	683b      	ldr	r3, [r7, #0]
1000af3c:	9300      	str	r3, [sp, #0]
1000af3e:	2305      	movs	r3, #5
1000af40:	687a      	ldr	r2, [r7, #4]
1000af42:	68b9      	ldr	r1, [r7, #8]
1000af44:	68f8      	ldr	r0, [r7, #12]
1000af46:	47a0      	blx	r4
1000af48:	6178      	str	r0, [r7, #20]
1000af4a:	e03e      	b.n	1000afca <metal_io_block_read+0xe0>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
1000af4c:	f3bf 8f5b 	dmb	ish
		while ( len && (
1000af50:	e00c      	b.n	1000af6c <metal_io_block_read+0x82>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
1000af52:	69fb      	ldr	r3, [r7, #28]
1000af54:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
1000af56:	69bb      	ldr	r3, [r7, #24]
1000af58:	701a      	strb	r2, [r3, #0]
			dest++;
1000af5a:	69bb      	ldr	r3, [r7, #24]
1000af5c:	3301      	adds	r3, #1
1000af5e:	61bb      	str	r3, [r7, #24]
			ptr++;
1000af60:	69fb      	ldr	r3, [r7, #28]
1000af62:	3301      	adds	r3, #1
1000af64:	61fb      	str	r3, [r7, #28]
			len--;
1000af66:	683b      	ldr	r3, [r7, #0]
1000af68:	3b01      	subs	r3, #1
1000af6a:	603b      	str	r3, [r7, #0]
		while ( len && (
1000af6c:	683b      	ldr	r3, [r7, #0]
1000af6e:	2b00      	cmp	r3, #0
1000af70:	d017      	beq.n	1000afa2 <metal_io_block_read+0xb8>
			((uintptr_t)dest % sizeof(int)) ||
1000af72:	69bb      	ldr	r3, [r7, #24]
1000af74:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
1000af78:	2b00      	cmp	r3, #0
1000af7a:	d1ea      	bne.n	1000af52 <metal_io_block_read+0x68>
			((uintptr_t)ptr % sizeof(int)))) {
1000af7c:	69fb      	ldr	r3, [r7, #28]
1000af7e:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
1000af82:	2b00      	cmp	r3, #0
1000af84:	d1e5      	bne.n	1000af52 <metal_io_block_read+0x68>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000af86:	e00c      	b.n	1000afa2 <metal_io_block_read+0xb8>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
1000af88:	69fb      	ldr	r3, [r7, #28]
1000af8a:	681a      	ldr	r2, [r3, #0]
1000af8c:	69bb      	ldr	r3, [r7, #24]
1000af8e:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000af90:	69bb      	ldr	r3, [r7, #24]
1000af92:	3304      	adds	r3, #4
1000af94:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
1000af96:	69fb      	ldr	r3, [r7, #28]
1000af98:	3304      	adds	r3, #4
1000af9a:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
1000af9c:	683b      	ldr	r3, [r7, #0]
1000af9e:	3b04      	subs	r3, #4
1000afa0:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000afa2:	683b      	ldr	r3, [r7, #0]
1000afa4:	2b03      	cmp	r3, #3
1000afa6:	dcef      	bgt.n	1000af88 <metal_io_block_read+0x9e>
		for (; len != 0; dest++, ptr++, len--)
1000afa8:	e00c      	b.n	1000afc4 <metal_io_block_read+0xda>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
1000afaa:	69fb      	ldr	r3, [r7, #28]
1000afac:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
1000afae:	69bb      	ldr	r3, [r7, #24]
1000afb0:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
1000afb2:	69bb      	ldr	r3, [r7, #24]
1000afb4:	3301      	adds	r3, #1
1000afb6:	61bb      	str	r3, [r7, #24]
1000afb8:	69fb      	ldr	r3, [r7, #28]
1000afba:	3301      	adds	r3, #1
1000afbc:	61fb      	str	r3, [r7, #28]
1000afbe:	683b      	ldr	r3, [r7, #0]
1000afc0:	3b01      	subs	r3, #1
1000afc2:	603b      	str	r3, [r7, #0]
1000afc4:	683b      	ldr	r3, [r7, #0]
1000afc6:	2b00      	cmp	r3, #0
1000afc8:	d1ef      	bne.n	1000afaa <metal_io_block_read+0xc0>
	}
	return retlen;
1000afca:	697b      	ldr	r3, [r7, #20]
}
1000afcc:	4618      	mov	r0, r3
1000afce:	3724      	adds	r7, #36	; 0x24
1000afd0:	46bd      	mov	sp, r7
1000afd2:	bd90      	pop	{r4, r7, pc}

1000afd4 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
1000afd4:	b590      	push	{r4, r7, lr}
1000afd6:	b08b      	sub	sp, #44	; 0x2c
1000afd8:	af02      	add	r7, sp, #8
1000afda:	60f8      	str	r0, [r7, #12]
1000afdc:	60b9      	str	r1, [r7, #8]
1000afde:	607a      	str	r2, [r7, #4]
1000afe0:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
1000afe2:	68b9      	ldr	r1, [r7, #8]
1000afe4:	68f8      	ldr	r0, [r7, #12]
1000afe6:	f7ff ff17 	bl	1000ae18 <metal_io_virt>
1000afea:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
1000afec:	687b      	ldr	r3, [r7, #4]
1000afee:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
1000aff0:	69fb      	ldr	r3, [r7, #28]
1000aff2:	2b00      	cmp	r3, #0
1000aff4:	d102      	bne.n	1000affc <metal_io_block_write+0x28>
		return -ERANGE;
1000aff6:	f06f 0321 	mvn.w	r3, #33	; 0x21
1000affa:	e05b      	b.n	1000b0b4 <metal_io_block_write+0xe0>
	if ((offset + len) > io->size)
1000affc:	683a      	ldr	r2, [r7, #0]
1000affe:	68bb      	ldr	r3, [r7, #8]
1000b000:	441a      	add	r2, r3
1000b002:	68fb      	ldr	r3, [r7, #12]
1000b004:	689b      	ldr	r3, [r3, #8]
1000b006:	429a      	cmp	r2, r3
1000b008:	d904      	bls.n	1000b014 <metal_io_block_write+0x40>
		len = io->size - offset;
1000b00a:	68fb      	ldr	r3, [r7, #12]
1000b00c:	689a      	ldr	r2, [r3, #8]
1000b00e:	68bb      	ldr	r3, [r7, #8]
1000b010:	1ad3      	subs	r3, r2, r3
1000b012:	603b      	str	r3, [r7, #0]
	retlen = len;
1000b014:	683b      	ldr	r3, [r7, #0]
1000b016:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
1000b018:	68fb      	ldr	r3, [r7, #12]
1000b01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000b01c:	2b00      	cmp	r3, #0
1000b01e:	d017      	beq.n	1000b050 <metal_io_block_write+0x7c>
		retlen = (*io->ops.block_write)(
1000b020:	68fb      	ldr	r3, [r7, #12]
1000b022:	6a5c      	ldr	r4, [r3, #36]	; 0x24
1000b024:	683b      	ldr	r3, [r7, #0]
1000b026:	9300      	str	r3, [sp, #0]
1000b028:	2305      	movs	r3, #5
1000b02a:	687a      	ldr	r2, [r7, #4]
1000b02c:	68b9      	ldr	r1, [r7, #8]
1000b02e:	68f8      	ldr	r0, [r7, #12]
1000b030:	47a0      	blx	r4
1000b032:	6178      	str	r0, [r7, #20]
1000b034:	e03d      	b.n	1000b0b2 <metal_io_block_write+0xde>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
1000b036:	69bb      	ldr	r3, [r7, #24]
1000b038:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
1000b03a:	69fb      	ldr	r3, [r7, #28]
1000b03c:	701a      	strb	r2, [r3, #0]
			ptr++;
1000b03e:	69fb      	ldr	r3, [r7, #28]
1000b040:	3301      	adds	r3, #1
1000b042:	61fb      	str	r3, [r7, #28]
			source++;
1000b044:	69bb      	ldr	r3, [r7, #24]
1000b046:	3301      	adds	r3, #1
1000b048:	61bb      	str	r3, [r7, #24]
			len--;
1000b04a:	683b      	ldr	r3, [r7, #0]
1000b04c:	3b01      	subs	r3, #1
1000b04e:	603b      	str	r3, [r7, #0]
		while ( len && (
1000b050:	683b      	ldr	r3, [r7, #0]
1000b052:	2b00      	cmp	r3, #0
1000b054:	d017      	beq.n	1000b086 <metal_io_block_write+0xb2>
			((uintptr_t)ptr % sizeof(int)) ||
1000b056:	69fb      	ldr	r3, [r7, #28]
1000b058:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
1000b05c:	2b00      	cmp	r3, #0
1000b05e:	d1ea      	bne.n	1000b036 <metal_io_block_write+0x62>
			((uintptr_t)source % sizeof(int)))) {
1000b060:	69bb      	ldr	r3, [r7, #24]
1000b062:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
1000b066:	2b00      	cmp	r3, #0
1000b068:	d1e5      	bne.n	1000b036 <metal_io_block_write+0x62>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
1000b06a:	e00c      	b.n	1000b086 <metal_io_block_write+0xb2>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
1000b06c:	69bb      	ldr	r3, [r7, #24]
1000b06e:	681a      	ldr	r2, [r3, #0]
1000b070:	69fb      	ldr	r3, [r7, #28]
1000b072:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
1000b074:	69fb      	ldr	r3, [r7, #28]
1000b076:	3304      	adds	r3, #4
1000b078:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
1000b07a:	69bb      	ldr	r3, [r7, #24]
1000b07c:	3304      	adds	r3, #4
1000b07e:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
1000b080:	683b      	ldr	r3, [r7, #0]
1000b082:	3b04      	subs	r3, #4
1000b084:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
1000b086:	683b      	ldr	r3, [r7, #0]
1000b088:	2b03      	cmp	r3, #3
1000b08a:	dcef      	bgt.n	1000b06c <metal_io_block_write+0x98>
		for (; len != 0; ptr++, source++, len--)
1000b08c:	e00c      	b.n	1000b0a8 <metal_io_block_write+0xd4>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
1000b08e:	69bb      	ldr	r3, [r7, #24]
1000b090:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
1000b092:	69fb      	ldr	r3, [r7, #28]
1000b094:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
1000b096:	69fb      	ldr	r3, [r7, #28]
1000b098:	3301      	adds	r3, #1
1000b09a:	61fb      	str	r3, [r7, #28]
1000b09c:	69bb      	ldr	r3, [r7, #24]
1000b09e:	3301      	adds	r3, #1
1000b0a0:	61bb      	str	r3, [r7, #24]
1000b0a2:	683b      	ldr	r3, [r7, #0]
1000b0a4:	3b01      	subs	r3, #1
1000b0a6:	603b      	str	r3, [r7, #0]
1000b0a8:	683b      	ldr	r3, [r7, #0]
1000b0aa:	2b00      	cmp	r3, #0
1000b0ac:	d1ef      	bne.n	1000b08e <metal_io_block_write+0xba>
		atomic_thread_fence(memory_order_seq_cst);
1000b0ae:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
1000b0b2:	697b      	ldr	r3, [r7, #20]
}
1000b0b4:	4618      	mov	r0, r3
1000b0b6:	3724      	adds	r7, #36	; 0x24
1000b0b8:	46bd      	mov	sp, r7
1000b0ba:	bd90      	pop	{r4, r7, pc}

1000b0bc <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
1000b0bc:	b40e      	push	{r1, r2, r3}
1000b0be:	b480      	push	{r7}
1000b0c0:	b082      	sub	sp, #8
1000b0c2:	af00      	add	r7, sp, #0
1000b0c4:	4603      	mov	r3, r0
1000b0c6:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
1000b0c8:	bf00      	nop
1000b0ca:	3708      	adds	r7, #8
1000b0cc:	46bd      	mov	sp, r7
1000b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b0d2:	b003      	add	sp, #12
1000b0d4:	4770      	bx	lr

1000b0d6 <metal_io_virt>:
{
1000b0d6:	b480      	push	{r7}
1000b0d8:	b083      	sub	sp, #12
1000b0da:	af00      	add	r7, sp, #0
1000b0dc:	6078      	str	r0, [r7, #4]
1000b0de:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
1000b0e0:	687b      	ldr	r3, [r7, #4]
1000b0e2:	681b      	ldr	r3, [r3, #0]
		: NULL);
1000b0e4:	f1b3 3fff 	cmp.w	r3, #4294967295
1000b0e8:	d00a      	beq.n	1000b100 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
1000b0ea:	687b      	ldr	r3, [r7, #4]
1000b0ec:	689b      	ldr	r3, [r3, #8]
1000b0ee:	683a      	ldr	r2, [r7, #0]
1000b0f0:	429a      	cmp	r2, r3
1000b0f2:	d205      	bcs.n	1000b100 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
1000b0f4:	687b      	ldr	r3, [r7, #4]
1000b0f6:	681b      	ldr	r3, [r3, #0]
1000b0f8:	461a      	mov	r2, r3
1000b0fa:	683b      	ldr	r3, [r7, #0]
1000b0fc:	4413      	add	r3, r2
		: NULL);
1000b0fe:	e000      	b.n	1000b102 <metal_io_virt+0x2c>
1000b100:	2300      	movs	r3, #0
}
1000b102:	4618      	mov	r0, r3
1000b104:	370c      	adds	r7, #12
1000b106:	46bd      	mov	sp, r7
1000b108:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b10c:	4770      	bx	lr

1000b10e <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
1000b10e:	b480      	push	{r7}
1000b110:	b085      	sub	sp, #20
1000b112:	af00      	add	r7, sp, #0
1000b114:	6078      	str	r0, [r7, #4]
1000b116:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
1000b118:	683b      	ldr	r3, [r7, #0]
1000b11a:	687a      	ldr	r2, [r7, #4]
1000b11c:	6812      	ldr	r2, [r2, #0]
1000b11e:	1a9b      	subs	r3, r3, r2
1000b120:	60fb      	str	r3, [r7, #12]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
1000b122:	687b      	ldr	r3, [r7, #4]
1000b124:	689b      	ldr	r3, [r3, #8]
1000b126:	68fa      	ldr	r2, [r7, #12]
1000b128:	429a      	cmp	r2, r3
1000b12a:	d201      	bcs.n	1000b130 <metal_io_virt_to_offset+0x22>
1000b12c:	68fb      	ldr	r3, [r7, #12]
1000b12e:	e001      	b.n	1000b134 <metal_io_virt_to_offset+0x26>
1000b130:	f04f 33ff 	mov.w	r3, #4294967295
}
1000b134:	4618      	mov	r0, r3
1000b136:	3714      	adds	r7, #20
1000b138:	46bd      	mov	sp, r7
1000b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b13e:	4770      	bx	lr

1000b140 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
1000b140:	b5b0      	push	{r4, r5, r7, lr}
1000b142:	b08c      	sub	sp, #48	; 0x30
1000b144:	af00      	add	r7, sp, #0
1000b146:	60f8      	str	r0, [r7, #12]
1000b148:	60b9      	str	r1, [r7, #8]
1000b14a:	603b      	str	r3, [r7, #0]
1000b14c:	4613      	mov	r3, r2
1000b14e:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
1000b150:	68b9      	ldr	r1, [r7, #8]
1000b152:	68f8      	ldr	r0, [r7, #12]
1000b154:	f7ff ffbf 	bl	1000b0d6 <metal_io_virt>
1000b158:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
1000b15a:	68fb      	ldr	r3, [r7, #12]
1000b15c:	699b      	ldr	r3, [r3, #24]
1000b15e:	2b00      	cmp	r3, #0
1000b160:	d009      	beq.n	1000b176 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
1000b162:	68fb      	ldr	r3, [r7, #12]
1000b164:	699c      	ldr	r4, [r3, #24]
1000b166:	79fa      	ldrb	r2, [r7, #7]
1000b168:	683b      	ldr	r3, [r7, #0]
1000b16a:	68b9      	ldr	r1, [r7, #8]
1000b16c:	68f8      	ldr	r0, [r7, #12]
1000b16e:	47a0      	blx	r4
1000b170:	4604      	mov	r4, r0
1000b172:	460d      	mov	r5, r1
1000b174:	e059      	b.n	1000b22a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
1000b176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000b178:	2b00      	cmp	r3, #0
1000b17a:	d012      	beq.n	1000b1a2 <metal_io_read+0x62>
1000b17c:	683b      	ldr	r3, [r7, #0]
1000b17e:	2b01      	cmp	r3, #1
1000b180:	d10f      	bne.n	1000b1a2 <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
1000b182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000b184:	62bb      	str	r3, [r7, #40]	; 0x28
1000b186:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000b188:	f3bf 8f5b 	dmb	ish
1000b18c:	781b      	ldrb	r3, [r3, #0]
1000b18e:	f3bf 8f5b 	dmb	ish
1000b192:	b2db      	uxtb	r3, r3
1000b194:	76fb      	strb	r3, [r7, #27]
1000b196:	7efb      	ldrb	r3, [r7, #27]
1000b198:	b2db      	uxtb	r3, r3
1000b19a:	2200      	movs	r2, #0
1000b19c:	461c      	mov	r4, r3
1000b19e:	4615      	mov	r5, r2
1000b1a0:	e043      	b.n	1000b22a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
1000b1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000b1a4:	2b00      	cmp	r3, #0
1000b1a6:	d012      	beq.n	1000b1ce <metal_io_read+0x8e>
1000b1a8:	683b      	ldr	r3, [r7, #0]
1000b1aa:	2b02      	cmp	r3, #2
1000b1ac:	d10f      	bne.n	1000b1ce <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
1000b1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000b1b0:	627b      	str	r3, [r7, #36]	; 0x24
1000b1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b1b4:	f3bf 8f5b 	dmb	ish
1000b1b8:	881b      	ldrh	r3, [r3, #0]
1000b1ba:	f3bf 8f5b 	dmb	ish
1000b1be:	b29b      	uxth	r3, r3
1000b1c0:	833b      	strh	r3, [r7, #24]
1000b1c2:	8b3b      	ldrh	r3, [r7, #24]
1000b1c4:	b29b      	uxth	r3, r3
1000b1c6:	2200      	movs	r2, #0
1000b1c8:	461c      	mov	r4, r3
1000b1ca:	4615      	mov	r5, r2
1000b1cc:	e02d      	b.n	1000b22a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
1000b1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000b1d0:	2b00      	cmp	r3, #0
1000b1d2:	d010      	beq.n	1000b1f6 <metal_io_read+0xb6>
1000b1d4:	683b      	ldr	r3, [r7, #0]
1000b1d6:	2b04      	cmp	r3, #4
1000b1d8:	d10d      	bne.n	1000b1f6 <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
1000b1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000b1dc:	623b      	str	r3, [r7, #32]
1000b1de:	6a3b      	ldr	r3, [r7, #32]
1000b1e0:	f3bf 8f5b 	dmb	ish
1000b1e4:	681b      	ldr	r3, [r3, #0]
1000b1e6:	f3bf 8f5b 	dmb	ish
1000b1ea:	617b      	str	r3, [r7, #20]
1000b1ec:	697b      	ldr	r3, [r7, #20]
1000b1ee:	2200      	movs	r2, #0
1000b1f0:	461c      	mov	r4, r3
1000b1f2:	4615      	mov	r5, r2
1000b1f4:	e019      	b.n	1000b22a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
1000b1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000b1f8:	2b00      	cmp	r3, #0
1000b1fa:	d010      	beq.n	1000b21e <metal_io_read+0xde>
1000b1fc:	683b      	ldr	r3, [r7, #0]
1000b1fe:	2b04      	cmp	r3, #4
1000b200:	d10d      	bne.n	1000b21e <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
1000b202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000b204:	61fb      	str	r3, [r7, #28]
1000b206:	69fb      	ldr	r3, [r7, #28]
1000b208:	f3bf 8f5b 	dmb	ish
1000b20c:	681b      	ldr	r3, [r3, #0]
1000b20e:	f3bf 8f5b 	dmb	ish
1000b212:	613b      	str	r3, [r7, #16]
1000b214:	693b      	ldr	r3, [r7, #16]
1000b216:	2200      	movs	r2, #0
1000b218:	461c      	mov	r4, r3
1000b21a:	4615      	mov	r5, r2
1000b21c:	e005      	b.n	1000b22a <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
1000b21e:	4b06      	ldr	r3, [pc, #24]	; (1000b238 <metal_io_read+0xf8>)
1000b220:	4a06      	ldr	r2, [pc, #24]	; (1000b23c <metal_io_read+0xfc>)
1000b222:	21fe      	movs	r1, #254	; 0xfe
1000b224:	4806      	ldr	r0, [pc, #24]	; (1000b240 <metal_io_read+0x100>)
1000b226:	f004 f947 	bl	1000f4b8 <__assert_func>
	return 0; /* quiet compiler */
}
1000b22a:	4622      	mov	r2, r4
1000b22c:	462b      	mov	r3, r5
1000b22e:	4610      	mov	r0, r2
1000b230:	4619      	mov	r1, r3
1000b232:	3730      	adds	r7, #48	; 0x30
1000b234:	46bd      	mov	sp, r7
1000b236:	bdb0      	pop	{r4, r5, r7, pc}
1000b238:	10012744 	.word	0x10012744
1000b23c:	100129a8 	.word	0x100129a8
1000b240:	10012748 	.word	0x10012748

1000b244 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
1000b244:	b580      	push	{r7, lr}
1000b246:	b082      	sub	sp, #8
1000b248:	af00      	add	r7, sp, #0
1000b24a:	6078      	str	r0, [r7, #4]
	return malloc(size);
1000b24c:	6878      	ldr	r0, [r7, #4]
1000b24e:	f004 f951 	bl	1000f4f4 <malloc>
1000b252:	4603      	mov	r3, r0
}
1000b254:	4618      	mov	r0, r3
1000b256:	3708      	adds	r7, #8
1000b258:	46bd      	mov	sp, r7
1000b25a:	bd80      	pop	{r7, pc}

1000b25c <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
1000b25c:	b580      	push	{r7, lr}
1000b25e:	b082      	sub	sp, #8
1000b260:	af00      	add	r7, sp, #0
1000b262:	6078      	str	r0, [r7, #4]
	free(ptr);
1000b264:	6878      	ldr	r0, [r7, #4]
1000b266:	f004 f94d 	bl	1000f504 <free>
}
1000b26a:	bf00      	nop
1000b26c:	3708      	adds	r7, #8
1000b26e:	46bd      	mov	sp, r7
1000b270:	bd80      	pop	{r7, pc}

1000b272 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
1000b272:	b580      	push	{r7, lr}
1000b274:	b084      	sub	sp, #16
1000b276:	af00      	add	r7, sp, #0
1000b278:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
1000b27a:	687b      	ldr	r3, [r7, #4]
1000b27c:	00db      	lsls	r3, r3, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
1000b27e:	3334      	adds	r3, #52	; 0x34
1000b280:	60fb      	str	r3, [r7, #12]

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
1000b282:	68f8      	ldr	r0, [r7, #12]
1000b284:	f7ff ffde 	bl	1000b244 <metal_allocate_memory>
1000b288:	60b8      	str	r0, [r7, #8]
	if (vqs) {
1000b28a:	68bb      	ldr	r3, [r7, #8]
1000b28c:	2b00      	cmp	r3, #0
1000b28e:	d004      	beq.n	1000b29a <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
1000b290:	68fa      	ldr	r2, [r7, #12]
1000b292:	2100      	movs	r1, #0
1000b294:	68b8      	ldr	r0, [r7, #8]
1000b296:	f004 ffb6 	bl	10010206 <memset>
	}

	return vqs;
1000b29a:	68bb      	ldr	r3, [r7, #8]
}
1000b29c:	4618      	mov	r0, r3
1000b29e:	3710      	adds	r7, #16
1000b2a0:	46bd      	mov	sp, r7
1000b2a2:	bd80      	pop	{r7, pc}

1000b2a4 <rproc_virtio_virtqueue_notify>:
#include <metal/cpu.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
1000b2a4:	b580      	push	{r7, lr}
1000b2a6:	b086      	sub	sp, #24
1000b2a8:	af00      	add	r7, sp, #0
1000b2aa:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
1000b2ac:	687b      	ldr	r3, [r7, #4]
1000b2ae:	891b      	ldrh	r3, [r3, #8]
1000b2b0:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
1000b2b2:	687b      	ldr	r3, [r7, #4]
1000b2b4:	681b      	ldr	r3, [r3, #0]
1000b2b6:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000b2b8:	693b      	ldr	r3, [r7, #16]
1000b2ba:	3b10      	subs	r3, #16
1000b2bc:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id < vdev->vrings_num);
1000b2be:	693b      	ldr	r3, [r7, #16]
1000b2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000b2c2:	697a      	ldr	r2, [r7, #20]
1000b2c4:	429a      	cmp	r2, r3
1000b2c6:	d305      	bcc.n	1000b2d4 <rproc_virtio_virtqueue_notify+0x30>
1000b2c8:	4b0d      	ldr	r3, [pc, #52]	; (1000b300 <rproc_virtio_virtqueue_notify+0x5c>)
1000b2ca:	4a0e      	ldr	r2, [pc, #56]	; (1000b304 <rproc_virtio_virtqueue_notify+0x60>)
1000b2cc:	211c      	movs	r1, #28
1000b2ce:	480e      	ldr	r0, [pc, #56]	; (1000b308 <rproc_virtio_virtqueue_notify+0x64>)
1000b2d0:	f004 f8f2 	bl	1000f4b8 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
1000b2d4:	693b      	ldr	r3, [r7, #16]
1000b2d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1000b2d8:	697a      	ldr	r2, [r7, #20]
1000b2da:	4613      	mov	r3, r2
1000b2dc:	005b      	lsls	r3, r3, #1
1000b2de:	4413      	add	r3, r2
1000b2e0:	00db      	lsls	r3, r3, #3
1000b2e2:	440b      	add	r3, r1
1000b2e4:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
1000b2e6:	68fb      	ldr	r3, [r7, #12]
1000b2e8:	68db      	ldr	r3, [r3, #12]
1000b2ea:	68fa      	ldr	r2, [r7, #12]
1000b2ec:	6810      	ldr	r0, [r2, #0]
1000b2ee:	68ba      	ldr	r2, [r7, #8]
1000b2f0:	6912      	ldr	r2, [r2, #16]
1000b2f2:	4611      	mov	r1, r2
1000b2f4:	4798      	blx	r3
}
1000b2f6:	bf00      	nop
1000b2f8:	3718      	adds	r7, #24
1000b2fa:	46bd      	mov	sp, r7
1000b2fc:	bd80      	pop	{r7, pc}
1000b2fe:	bf00      	nop
1000b300:	10012790 	.word	0x10012790
1000b304:	10012988 	.word	0x10012988
1000b308:	100127ac 	.word	0x100127ac

1000b30c <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
1000b30c:	b580      	push	{r7, lr}
1000b30e:	b086      	sub	sp, #24
1000b310:	af00      	add	r7, sp, #0
1000b312:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000b314:	687b      	ldr	r3, [r7, #4]
1000b316:	3b10      	subs	r3, #16
1000b318:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
1000b31a:	697b      	ldr	r3, [r7, #20]
1000b31c:	685b      	ldr	r3, [r3, #4]
1000b31e:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
1000b320:	697b      	ldr	r3, [r7, #20]
1000b322:	689b      	ldr	r3, [r3, #8]
1000b324:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
1000b326:	693b      	ldr	r3, [r7, #16]
1000b328:	3318      	adds	r3, #24
1000b32a:	4619      	mov	r1, r3
1000b32c:	68f8      	ldr	r0, [r7, #12]
1000b32e:	f7ff feee 	bl	1000b10e <metal_io_virt_to_offset>
1000b332:	4601      	mov	r1, r0
1000b334:	2301      	movs	r3, #1
1000b336:	2205      	movs	r2, #5
1000b338:	68f8      	ldr	r0, [r7, #12]
1000b33a:	f7ff ff01 	bl	1000b140 <metal_io_read>
1000b33e:	4602      	mov	r2, r0
1000b340:	460b      	mov	r3, r1
1000b342:	4613      	mov	r3, r2
1000b344:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
1000b346:	7afb      	ldrb	r3, [r7, #11]
}
1000b348:	4618      	mov	r0, r3
1000b34a:	3718      	adds	r7, #24
1000b34c:	46bd      	mov	sp, r7
1000b34e:	bd80      	pop	{r7, pc}

1000b350 <rproc_virtio_get_dfeatures>:
	rpvdev->notify(rpvdev->priv, vdev->notifyid);
}
#endif

static uint32_t rproc_virtio_get_dfeatures(struct virtio_device *vdev)
{
1000b350:	b580      	push	{r7, lr}
1000b352:	b086      	sub	sp, #24
1000b354:	af00      	add	r7, sp, #0
1000b356:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000b358:	687b      	ldr	r3, [r7, #4]
1000b35a:	3b10      	subs	r3, #16
1000b35c:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
1000b35e:	697b      	ldr	r3, [r7, #20]
1000b360:	685b      	ldr	r3, [r3, #4]
1000b362:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
1000b364:	697b      	ldr	r3, [r7, #20]
1000b366:	689b      	ldr	r3, [r3, #8]
1000b368:	60fb      	str	r3, [r7, #12]
	features = metal_io_read32(io,
1000b36a:	693b      	ldr	r3, [r7, #16]
1000b36c:	330c      	adds	r3, #12
1000b36e:	4619      	mov	r1, r3
1000b370:	68f8      	ldr	r0, [r7, #12]
1000b372:	f7ff fecc 	bl	1000b10e <metal_io_virt_to_offset>
1000b376:	4601      	mov	r1, r0
1000b378:	2304      	movs	r3, #4
1000b37a:	2205      	movs	r2, #5
1000b37c:	68f8      	ldr	r0, [r7, #12]
1000b37e:	f7ff fedf 	bl	1000b140 <metal_io_read>
1000b382:	4602      	mov	r2, r0
1000b384:	460b      	mov	r3, r1
1000b386:	4613      	mov	r3, r2
1000b388:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
1000b38a:	68bb      	ldr	r3, [r7, #8]
}
1000b38c:	4618      	mov	r0, r3
1000b38e:	3718      	adds	r7, #24
1000b390:	46bd      	mov	sp, r7
1000b392:	bd80      	pop	{r7, pc}

1000b394 <rproc_virtio_get_features>:

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
1000b394:	b580      	push	{r7, lr}
1000b396:	b088      	sub	sp, #32
1000b398:	af00      	add	r7, sp, #0
1000b39a:	6078      	str	r0, [r7, #4]
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t gfeatures;
	uint32_t dfeatures;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000b39c:	687b      	ldr	r3, [r7, #4]
1000b39e:	3b10      	subs	r3, #16
1000b3a0:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
1000b3a2:	69fb      	ldr	r3, [r7, #28]
1000b3a4:	685b      	ldr	r3, [r3, #4]
1000b3a6:	61bb      	str	r3, [r7, #24]
	io = rpvdev->vdev_rsc_io;
1000b3a8:	69fb      	ldr	r3, [r7, #28]
1000b3aa:	689b      	ldr	r3, [r3, #8]
1000b3ac:	617b      	str	r3, [r7, #20]
	gfeatures = metal_io_read32(io,
1000b3ae:	69bb      	ldr	r3, [r7, #24]
1000b3b0:	3310      	adds	r3, #16
1000b3b2:	4619      	mov	r1, r3
1000b3b4:	6978      	ldr	r0, [r7, #20]
1000b3b6:	f7ff feaa 	bl	1000b10e <metal_io_virt_to_offset>
1000b3ba:	4601      	mov	r1, r0
1000b3bc:	2304      	movs	r3, #4
1000b3be:	2205      	movs	r2, #5
1000b3c0:	6978      	ldr	r0, [r7, #20]
1000b3c2:	f7ff febd 	bl	1000b140 <metal_io_read>
1000b3c6:	4602      	mov	r2, r0
1000b3c8:	460b      	mov	r3, r1
1000b3ca:	4613      	mov	r3, r2
1000b3cc:	613b      	str	r3, [r7, #16]
			metal_io_virt_to_offset(io, &vdev_rsc->gfeatures));
	dfeatures = rproc_virtio_get_dfeatures(vdev);
1000b3ce:	6878      	ldr	r0, [r7, #4]
1000b3d0:	f7ff ffbe 	bl	1000b350 <rproc_virtio_get_dfeatures>
1000b3d4:	60f8      	str	r0, [r7, #12]

	return dfeatures & gfeatures;
1000b3d6:	68fa      	ldr	r2, [r7, #12]
1000b3d8:	693b      	ldr	r3, [r7, #16]
1000b3da:	4013      	ands	r3, r2
}
1000b3dc:	4618      	mov	r0, r3
1000b3de:	3720      	adds	r7, #32
1000b3e0:	46bd      	mov	sp, r7
1000b3e2:	bd80      	pop	{r7, pc}

1000b3e4 <rproc_virtio_read_config>:
}
#endif

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
1000b3e4:	b580      	push	{r7, lr}
1000b3e6:	b088      	sub	sp, #32
1000b3e8:	af00      	add	r7, sp, #0
1000b3ea:	60f8      	str	r0, [r7, #12]
1000b3ec:	60b9      	str	r1, [r7, #8]
1000b3ee:	607a      	str	r2, [r7, #4]
1000b3f0:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char *config;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000b3f2:	68fb      	ldr	r3, [r7, #12]
1000b3f4:	3b10      	subs	r3, #16
1000b3f6:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
1000b3f8:	69fb      	ldr	r3, [r7, #28]
1000b3fa:	685b      	ldr	r3, [r3, #4]
1000b3fc:	61bb      	str	r3, [r7, #24]
	config = (char *)(&vdev_rsc->vring[vdev->vrings_num]);
1000b3fe:	68fb      	ldr	r3, [r7, #12]
1000b400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
1000b402:	4613      	mov	r3, r2
1000b404:	009b      	lsls	r3, r3, #2
1000b406:	4413      	add	r3, r2
1000b408:	009b      	lsls	r3, r3, #2
1000b40a:	3318      	adds	r3, #24
1000b40c:	69ba      	ldr	r2, [r7, #24]
1000b40e:	4413      	add	r3, r2
1000b410:	3304      	adds	r3, #4
1000b412:	617b      	str	r3, [r7, #20]
	io = rpvdev->vdev_rsc_io;
1000b414:	69fb      	ldr	r3, [r7, #28]
1000b416:	689b      	ldr	r3, [r3, #8]
1000b418:	613b      	str	r3, [r7, #16]

	if (offset + length <= vdev_rsc->config_len)
1000b41a:	683a      	ldr	r2, [r7, #0]
1000b41c:	68bb      	ldr	r3, [r7, #8]
1000b41e:	441a      	add	r2, r3
1000b420:	69bb      	ldr	r3, [r7, #24]
1000b422:	695b      	ldr	r3, [r3, #20]
1000b424:	429a      	cmp	r2, r3
1000b426:	d80c      	bhi.n	1000b442 <rproc_virtio_read_config+0x5e>
		metal_io_block_read(io,
				metal_io_virt_to_offset(io, config + offset),
1000b428:	697a      	ldr	r2, [r7, #20]
1000b42a:	68bb      	ldr	r3, [r7, #8]
1000b42c:	4413      	add	r3, r2
		metal_io_block_read(io,
1000b42e:	4619      	mov	r1, r3
1000b430:	6938      	ldr	r0, [r7, #16]
1000b432:	f7ff fe6c 	bl	1000b10e <metal_io_virt_to_offset>
1000b436:	4601      	mov	r1, r0
1000b438:	683b      	ldr	r3, [r7, #0]
1000b43a:	687a      	ldr	r2, [r7, #4]
1000b43c:	6938      	ldr	r0, [r7, #16]
1000b43e:	f7ff fd54 	bl	1000aeea <metal_io_block_read>
				dst, length);
}
1000b442:	bf00      	nop
1000b444:	3720      	adds	r7, #32
1000b446:	46bd      	mov	sp, r7
1000b448:	bd80      	pop	{r7, pc}
	...

1000b44c <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
1000b44c:	b580      	push	{r7, lr}
1000b44e:	b08e      	sub	sp, #56	; 0x38
1000b450:	af00      	add	r7, sp, #0
1000b452:	60f8      	str	r0, [r7, #12]
1000b454:	60b9      	str	r1, [r7, #8]
1000b456:	607a      	str	r2, [r7, #4]
1000b458:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
1000b45a:	687b      	ldr	r3, [r7, #4]
1000b45c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
1000b45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000b460:	7e5b      	ldrb	r3, [r3, #25]
1000b462:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
1000b464:	2048      	movs	r0, #72	; 0x48
1000b466:	f7ff feed 	bl	1000b244 <metal_allocate_memory>
1000b46a:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
1000b46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b46e:	2b00      	cmp	r3, #0
1000b470:	d101      	bne.n	1000b476 <rproc_virtio_create_vdev+0x2a>
		return NULL;
1000b472:	2300      	movs	r3, #0
1000b474:	e092      	b.n	1000b59c <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
1000b476:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000b478:	4613      	mov	r3, r2
1000b47a:	005b      	lsls	r3, r3, #1
1000b47c:	4413      	add	r3, r2
1000b47e:	00db      	lsls	r3, r3, #3
1000b480:	4618      	mov	r0, r3
1000b482:	f7ff fedf 	bl	1000b244 <metal_allocate_memory>
1000b486:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
1000b488:	6a3b      	ldr	r3, [r7, #32]
1000b48a:	2b00      	cmp	r3, #0
1000b48c:	f000 8081 	beq.w	1000b592 <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
1000b490:	2248      	movs	r2, #72	; 0x48
1000b492:	2100      	movs	r1, #0
1000b494:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000b496:	f004 feb6 	bl	10010206 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
1000b49a:	2218      	movs	r2, #24
1000b49c:	2100      	movs	r1, #0
1000b49e:	6a38      	ldr	r0, [r7, #32]
1000b4a0:	f004 feb1 	bl	10010206 <memset>
	vdev = &rpvdev->vdev;
1000b4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b4a6:	3310      	adds	r3, #16
1000b4a8:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
1000b4aa:	2300      	movs	r3, #0
1000b4ac:	637b      	str	r3, [r7, #52]	; 0x34
1000b4ae:	e025      	b.n	1000b4fc <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
1000b4b0:	2300      	movs	r3, #0
1000b4b2:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
1000b4b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000b4b6:	4613      	mov	r3, r2
1000b4b8:	009b      	lsls	r3, r3, #2
1000b4ba:	4413      	add	r3, r2
1000b4bc:	009b      	lsls	r3, r3, #2
1000b4be:	3318      	adds	r3, #24
1000b4c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
1000b4c2:	4413      	add	r3, r2
1000b4c4:	3304      	adds	r3, #4
1000b4c6:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
1000b4c8:	68fb      	ldr	r3, [r7, #12]
1000b4ca:	2b00      	cmp	r3, #0
1000b4cc:	d102      	bne.n	1000b4d4 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
1000b4ce:	69bb      	ldr	r3, [r7, #24]
1000b4d0:	689b      	ldr	r3, [r3, #8]
1000b4d2:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
1000b4d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
1000b4d6:	f7ff fecc 	bl	1000b272 <virtqueue_allocate>
1000b4da:	6178      	str	r0, [r7, #20]
		if (!vq)
1000b4dc:	697b      	ldr	r3, [r7, #20]
1000b4de:	2b00      	cmp	r3, #0
1000b4e0:	d031      	beq.n	1000b546 <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
1000b4e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000b4e4:	4613      	mov	r3, r2
1000b4e6:	005b      	lsls	r3, r3, #1
1000b4e8:	4413      	add	r3, r2
1000b4ea:	00db      	lsls	r3, r3, #3
1000b4ec:	461a      	mov	r2, r3
1000b4ee:	6a3b      	ldr	r3, [r7, #32]
1000b4f0:	4413      	add	r3, r2
1000b4f2:	697a      	ldr	r2, [r7, #20]
1000b4f4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
1000b4f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000b4f8:	3301      	adds	r3, #1
1000b4fa:	637b      	str	r3, [r7, #52]	; 0x34
1000b4fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000b4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000b500:	429a      	cmp	r2, r3
1000b502:	d3d5      	bcc.n	1000b4b0 <rproc_virtio_create_vdev+0x64>
	}

	rpvdev->notify = notify;
1000b504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b506:	6c7a      	ldr	r2, [r7, #68]	; 0x44
1000b508:	60da      	str	r2, [r3, #12]
	rpvdev->priv = priv;
1000b50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b50c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
1000b50e:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
1000b510:	69fb      	ldr	r3, [r7, #28]
1000b512:	6a3a      	ldr	r2, [r7, #32]
1000b514:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
1000b516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
1000b51a:	605a      	str	r2, [r3, #4]
	rpvdev->vdev_rsc_io = rsc_io;
1000b51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b51e:	683a      	ldr	r2, [r7, #0]
1000b520:	609a      	str	r2, [r3, #8]

	vdev->notifyid = notifyid;
1000b522:	69fb      	ldr	r3, [r7, #28]
1000b524:	68ba      	ldr	r2, [r7, #8]
1000b526:	601a      	str	r2, [r3, #0]
	vdev->role = role;
1000b528:	69fb      	ldr	r3, [r7, #28]
1000b52a:	68fa      	ldr	r2, [r7, #12]
1000b52c:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
1000b52e:	69fb      	ldr	r3, [r7, #28]
1000b530:	6cba      	ldr	r2, [r7, #72]	; 0x48
1000b532:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
1000b534:	69fb      	ldr	r3, [r7, #28]
1000b536:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000b538:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
1000b53a:	69fb      	ldr	r3, [r7, #28]
1000b53c:	4a19      	ldr	r2, [pc, #100]	; (1000b5a4 <rproc_virtio_create_vdev+0x158>)
1000b53e:	621a      	str	r2, [r3, #32]
		/* Assume the master support all slave features */
		rproc_virtio_negotiate_features(vdev, dfeatures);
	}
#endif

	return &rpvdev->vdev;
1000b540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b542:	3310      	adds	r3, #16
1000b544:	e02a      	b.n	1000b59c <rproc_virtio_create_vdev+0x150>
			goto err1;
1000b546:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
1000b548:	2300      	movs	r3, #0
1000b54a:	637b      	str	r3, [r7, #52]	; 0x34
1000b54c:	e019      	b.n	1000b582 <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
1000b54e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000b550:	4613      	mov	r3, r2
1000b552:	005b      	lsls	r3, r3, #1
1000b554:	4413      	add	r3, r2
1000b556:	00db      	lsls	r3, r3, #3
1000b558:	461a      	mov	r2, r3
1000b55a:	6a3b      	ldr	r3, [r7, #32]
1000b55c:	4413      	add	r3, r2
1000b55e:	681b      	ldr	r3, [r3, #0]
1000b560:	2b00      	cmp	r3, #0
1000b562:	d00b      	beq.n	1000b57c <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
1000b564:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000b566:	4613      	mov	r3, r2
1000b568:	005b      	lsls	r3, r3, #1
1000b56a:	4413      	add	r3, r2
1000b56c:	00db      	lsls	r3, r3, #3
1000b56e:	461a      	mov	r2, r3
1000b570:	6a3b      	ldr	r3, [r7, #32]
1000b572:	4413      	add	r3, r2
1000b574:	681b      	ldr	r3, [r3, #0]
1000b576:	4618      	mov	r0, r3
1000b578:	f7ff fe70 	bl	1000b25c <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
1000b57c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000b57e:	3301      	adds	r3, #1
1000b580:	637b      	str	r3, [r7, #52]	; 0x34
1000b582:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000b584:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000b586:	429a      	cmp	r2, r3
1000b588:	d3e1      	bcc.n	1000b54e <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
1000b58a:	6a38      	ldr	r0, [r7, #32]
1000b58c:	f7ff fe66 	bl	1000b25c <metal_free_memory>
1000b590:	e000      	b.n	1000b594 <rproc_virtio_create_vdev+0x148>
		goto err0;
1000b592:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
1000b594:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000b596:	f7ff fe61 	bl	1000b25c <metal_free_memory>
	return NULL;
1000b59a:	2300      	movs	r3, #0
}
1000b59c:	4618      	mov	r0, r3
1000b59e:	3738      	adds	r7, #56	; 0x38
1000b5a0:	46bd      	mov	sp, r7
1000b5a2:	bd80      	pop	{r7, pc}
1000b5a4:	10012964 	.word	0x10012964

1000b5a8 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
1000b5a8:	b480      	push	{r7}
1000b5aa:	b087      	sub	sp, #28
1000b5ac:	af00      	add	r7, sp, #0
1000b5ae:	60f8      	str	r0, [r7, #12]
1000b5b0:	60b9      	str	r1, [r7, #8]
1000b5b2:	607a      	str	r2, [r7, #4]
1000b5b4:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
1000b5b6:	68fb      	ldr	r3, [r7, #12]
1000b5b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000b5ba:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
1000b5bc:	68ba      	ldr	r2, [r7, #8]
1000b5be:	697b      	ldr	r3, [r7, #20]
1000b5c0:	429a      	cmp	r2, r3
1000b5c2:	d302      	bcc.n	1000b5ca <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
1000b5c4:	f06f 0301 	mvn.w	r3, #1
1000b5c8:	e019      	b.n	1000b5fe <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
1000b5ca:	68fb      	ldr	r3, [r7, #12]
1000b5cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1000b5ce:	68ba      	ldr	r2, [r7, #8]
1000b5d0:	4613      	mov	r3, r2
1000b5d2:	005b      	lsls	r3, r3, #1
1000b5d4:	4413      	add	r3, r2
1000b5d6:	00db      	lsls	r3, r3, #3
1000b5d8:	440b      	add	r3, r1
1000b5da:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
1000b5dc:	693b      	ldr	r3, [r7, #16]
1000b5de:	6a3a      	ldr	r2, [r7, #32]
1000b5e0:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
1000b5e2:	693b      	ldr	r3, [r7, #16]
1000b5e4:	687a      	ldr	r2, [r7, #4]
1000b5e6:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
1000b5e8:	693b      	ldr	r3, [r7, #16]
1000b5ea:	683a      	ldr	r2, [r7, #0]
1000b5ec:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
1000b5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b5f0:	b29a      	uxth	r2, r3
1000b5f2:	693b      	ldr	r3, [r7, #16]
1000b5f4:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
1000b5f6:	693b      	ldr	r3, [r7, #16]
1000b5f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000b5fa:	609a      	str	r2, [r3, #8]

	return 0;
1000b5fc:	2300      	movs	r3, #0
}
1000b5fe:	4618      	mov	r0, r3
1000b600:	371c      	adds	r7, #28
1000b602:	46bd      	mov	sp, r7
1000b604:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b608:	4770      	bx	lr

1000b60a <rproc_virtio_wait_remote_ready>:
	}
	return 0;
}

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
1000b60a:	b580      	push	{r7, lr}
1000b60c:	b084      	sub	sp, #16
1000b60e:	af00      	add	r7, sp, #0
1000b610:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
1000b612:	687b      	ldr	r3, [r7, #4]
1000b614:	699b      	ldr	r3, [r3, #24]
1000b616:	2b00      	cmp	r3, #0
1000b618:	d00a      	beq.n	1000b630 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
1000b61a:	6878      	ldr	r0, [r7, #4]
1000b61c:	f7ff fe76 	bl	1000b30c <rproc_virtio_get_status>
1000b620:	4603      	mov	r3, r0
1000b622:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
1000b624:	7bfb      	ldrb	r3, [r7, #15]
1000b626:	f003 0304 	and.w	r3, r3, #4
1000b62a:	2b00      	cmp	r3, #0
1000b62c:	d102      	bne.n	1000b634 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
1000b62e:	e7f4      	b.n	1000b61a <rproc_virtio_wait_remote_ready+0x10>
		return;
1000b630:	bf00      	nop
1000b632:	e000      	b.n	1000b636 <rproc_virtio_wait_remote_ready+0x2c>
			return;
1000b634:	bf00      	nop
		metal_cpu_yield();
	}
}
1000b636:	3710      	adds	r7, #16
1000b638:	46bd      	mov	sp, r7
1000b63a:	bd80      	pop	{r7, pc}

1000b63c <metal_list_add_before>:
{
1000b63c:	b480      	push	{r7}
1000b63e:	b083      	sub	sp, #12
1000b640:	af00      	add	r7, sp, #0
1000b642:	6078      	str	r0, [r7, #4]
1000b644:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
1000b646:	687b      	ldr	r3, [r7, #4]
1000b648:	685a      	ldr	r2, [r3, #4]
1000b64a:	683b      	ldr	r3, [r7, #0]
1000b64c:	605a      	str	r2, [r3, #4]
	new_node->next = node;
1000b64e:	683b      	ldr	r3, [r7, #0]
1000b650:	687a      	ldr	r2, [r7, #4]
1000b652:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
1000b654:	683b      	ldr	r3, [r7, #0]
1000b656:	681b      	ldr	r3, [r3, #0]
1000b658:	683a      	ldr	r2, [r7, #0]
1000b65a:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
1000b65c:	683b      	ldr	r3, [r7, #0]
1000b65e:	685b      	ldr	r3, [r3, #4]
1000b660:	683a      	ldr	r2, [r7, #0]
1000b662:	601a      	str	r2, [r3, #0]
}
1000b664:	bf00      	nop
1000b666:	370c      	adds	r7, #12
1000b668:	46bd      	mov	sp, r7
1000b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b66e:	4770      	bx	lr

1000b670 <metal_list_add_tail>:
{
1000b670:	b580      	push	{r7, lr}
1000b672:	b082      	sub	sp, #8
1000b674:	af00      	add	r7, sp, #0
1000b676:	6078      	str	r0, [r7, #4]
1000b678:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
1000b67a:	6839      	ldr	r1, [r7, #0]
1000b67c:	6878      	ldr	r0, [r7, #4]
1000b67e:	f7ff ffdd 	bl	1000b63c <metal_list_add_before>
}
1000b682:	bf00      	nop
1000b684:	3708      	adds	r7, #8
1000b686:	46bd      	mov	sp, r7
1000b688:	bd80      	pop	{r7, pc}

1000b68a <rpmsg_get_endpoint>:
}

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
1000b68a:	b580      	push	{r7, lr}
1000b68c:	b088      	sub	sp, #32
1000b68e:	af00      	add	r7, sp, #0
1000b690:	60f8      	str	r0, [r7, #12]
1000b692:	60b9      	str	r1, [r7, #8]
1000b694:	607a      	str	r2, [r7, #4]
1000b696:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
1000b698:	68fb      	ldr	r3, [r7, #12]
1000b69a:	681b      	ldr	r3, [r3, #0]
1000b69c:	61fb      	str	r3, [r7, #28]
1000b69e:	e04b      	b.n	1000b738 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
1000b6a0:	2300      	movs	r3, #0
1000b6a2:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
1000b6a4:	69fb      	ldr	r3, [r7, #28]
1000b6a6:	3b34      	subs	r3, #52	; 0x34
1000b6a8:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
1000b6aa:	687b      	ldr	r3, [r7, #4]
1000b6ac:	f1b3 3fff 	cmp.w	r3, #4294967295
1000b6b0:	d006      	beq.n	1000b6c0 <rpmsg_get_endpoint+0x36>
1000b6b2:	697b      	ldr	r3, [r7, #20]
1000b6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000b6b6:	687a      	ldr	r2, [r7, #4]
1000b6b8:	429a      	cmp	r2, r3
1000b6ba:	d101      	bne.n	1000b6c0 <rpmsg_get_endpoint+0x36>
			return ept;
1000b6bc:	697b      	ldr	r3, [r7, #20]
1000b6be:	e040      	b.n	1000b742 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
1000b6c0:	697b      	ldr	r3, [r7, #20]
1000b6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000b6c4:	687a      	ldr	r2, [r7, #4]
1000b6c6:	429a      	cmp	r2, r3
1000b6c8:	d106      	bne.n	1000b6d8 <rpmsg_get_endpoint+0x4e>
1000b6ca:	697b      	ldr	r3, [r7, #20]
1000b6cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000b6ce:	683a      	ldr	r2, [r7, #0]
1000b6d0:	429a      	cmp	r2, r3
1000b6d2:	d101      	bne.n	1000b6d8 <rpmsg_get_endpoint+0x4e>
			return ept;
1000b6d4:	697b      	ldr	r3, [r7, #20]
1000b6d6:	e034      	b.n	1000b742 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
1000b6d8:	68bb      	ldr	r3, [r7, #8]
1000b6da:	2b00      	cmp	r3, #0
1000b6dc:	d00c      	beq.n	1000b6f8 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
1000b6de:	697b      	ldr	r3, [r7, #20]
1000b6e0:	2220      	movs	r2, #32
1000b6e2:	68b9      	ldr	r1, [r7, #8]
1000b6e4:	4618      	mov	r0, r3
1000b6e6:	f004 fd96 	bl	10010216 <strncmp>
1000b6ea:	4603      	mov	r3, r0
1000b6ec:	2b00      	cmp	r3, #0
1000b6ee:	bf0c      	ite	eq
1000b6f0:	2301      	moveq	r3, #1
1000b6f2:	2300      	movne	r3, #0
1000b6f4:	b2db      	uxtb	r3, r3
1000b6f6:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
1000b6f8:	68bb      	ldr	r3, [r7, #8]
1000b6fa:	2b00      	cmp	r3, #0
1000b6fc:	d018      	beq.n	1000b730 <rpmsg_get_endpoint+0xa6>
1000b6fe:	69bb      	ldr	r3, [r7, #24]
1000b700:	2b00      	cmp	r3, #0
1000b702:	d015      	beq.n	1000b730 <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address */
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
1000b704:	683b      	ldr	r3, [r7, #0]
1000b706:	f1b3 3fff 	cmp.w	r3, #4294967295
1000b70a:	d006      	beq.n	1000b71a <rpmsg_get_endpoint+0x90>
1000b70c:	697b      	ldr	r3, [r7, #20]
1000b70e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000b710:	683a      	ldr	r2, [r7, #0]
1000b712:	429a      	cmp	r2, r3
1000b714:	d101      	bne.n	1000b71a <rpmsg_get_endpoint+0x90>
			return ept;
1000b716:	697b      	ldr	r3, [r7, #20]
1000b718:	e013      	b.n	1000b742 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept */
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
1000b71a:	687b      	ldr	r3, [r7, #4]
1000b71c:	f1b3 3fff 	cmp.w	r3, #4294967295
1000b720:	d107      	bne.n	1000b732 <rpmsg_get_endpoint+0xa8>
1000b722:	697b      	ldr	r3, [r7, #20]
1000b724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000b726:	f1b3 3fff 	cmp.w	r3, #4294967295
1000b72a:	d102      	bne.n	1000b732 <rpmsg_get_endpoint+0xa8>
			return ept;
1000b72c:	697b      	ldr	r3, [r7, #20]
1000b72e:	e008      	b.n	1000b742 <rpmsg_get_endpoint+0xb8>
			continue;
1000b730:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
1000b732:	69fb      	ldr	r3, [r7, #28]
1000b734:	681b      	ldr	r3, [r3, #0]
1000b736:	61fb      	str	r3, [r7, #28]
1000b738:	68fb      	ldr	r3, [r7, #12]
1000b73a:	69fa      	ldr	r2, [r7, #28]
1000b73c:	429a      	cmp	r2, r3
1000b73e:	d1af      	bne.n	1000b6a0 <rpmsg_get_endpoint+0x16>
	}
	return NULL;
1000b740:	2300      	movs	r3, #0
}
1000b742:	4618      	mov	r0, r3
1000b744:	3720      	adds	r7, #32
1000b746:	46bd      	mov	sp, r7
1000b748:	bd80      	pop	{r7, pc}

1000b74a <rpmsg_register_endpoint>:
	metal_mutex_release(&rdev->lock);
}

void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept)
{
1000b74a:	b580      	push	{r7, lr}
1000b74c:	b082      	sub	sp, #8
1000b74e:	af00      	add	r7, sp, #0
1000b750:	6078      	str	r0, [r7, #4]
1000b752:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
1000b754:	683b      	ldr	r3, [r7, #0]
1000b756:	687a      	ldr	r2, [r7, #4]
1000b758:	621a      	str	r2, [r3, #32]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
1000b75a:	687a      	ldr	r2, [r7, #4]
1000b75c:	683b      	ldr	r3, [r7, #0]
1000b75e:	3334      	adds	r3, #52	; 0x34
1000b760:	4619      	mov	r1, r3
1000b762:	4610      	mov	r0, r2
1000b764:	f7ff ff84 	bl	1000b670 <metal_list_add_tail>
}
1000b768:	bf00      	nop
1000b76a:	3708      	adds	r7, #8
1000b76c:	46bd      	mov	sp, r7
1000b76e:	bd80      	pop	{r7, pc}

1000b770 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
1000b770:	b480      	push	{r7}
1000b772:	b083      	sub	sp, #12
1000b774:	af00      	add	r7, sp, #0
1000b776:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
1000b778:	2300      	movs	r3, #0
}
1000b77a:	4618      	mov	r0, r3
1000b77c:	370c      	adds	r7, #12
1000b77e:	46bd      	mov	sp, r7
1000b780:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b784:	4770      	bx	lr

1000b786 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
1000b786:	b580      	push	{r7, lr}
1000b788:	b082      	sub	sp, #8
1000b78a:	af00      	add	r7, sp, #0
1000b78c:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
1000b78e:	6878      	ldr	r0, [r7, #4]
1000b790:	f7ff ffee 	bl	1000b770 <__metal_sleep_usec>
1000b794:	4603      	mov	r3, r0
}
1000b796:	4618      	mov	r0, r3
1000b798:	3708      	adds	r7, #8
1000b79a:	46bd      	mov	sp, r7
1000b79c:	bd80      	pop	{r7, pc}

1000b79e <metal_list_init>:
{
1000b79e:	b480      	push	{r7}
1000b7a0:	b083      	sub	sp, #12
1000b7a2:	af00      	add	r7, sp, #0
1000b7a4:	6078      	str	r0, [r7, #4]
	list->prev = list;
1000b7a6:	687b      	ldr	r3, [r7, #4]
1000b7a8:	687a      	ldr	r2, [r7, #4]
1000b7aa:	605a      	str	r2, [r3, #4]
	list->next = list;
1000b7ac:	687b      	ldr	r3, [r7, #4]
1000b7ae:	687a      	ldr	r2, [r7, #4]
1000b7b0:	601a      	str	r2, [r3, #0]
}
1000b7b2:	bf00      	nop
1000b7b4:	370c      	adds	r7, #12
1000b7b6:	46bd      	mov	sp, r7
1000b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b7bc:	4770      	bx	lr

1000b7be <metal_io_virt_to_offset>:
{
1000b7be:	b480      	push	{r7}
1000b7c0:	b085      	sub	sp, #20
1000b7c2:	af00      	add	r7, sp, #0
1000b7c4:	6078      	str	r0, [r7, #4]
1000b7c6:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
1000b7c8:	683b      	ldr	r3, [r7, #0]
1000b7ca:	687a      	ldr	r2, [r7, #4]
1000b7cc:	6812      	ldr	r2, [r2, #0]
1000b7ce:	1a9b      	subs	r3, r3, r2
1000b7d0:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
1000b7d2:	687b      	ldr	r3, [r7, #4]
1000b7d4:	689b      	ldr	r3, [r3, #8]
1000b7d6:	68fa      	ldr	r2, [r7, #12]
1000b7d8:	429a      	cmp	r2, r3
1000b7da:	d201      	bcs.n	1000b7e0 <metal_io_virt_to_offset+0x22>
1000b7dc:	68fb      	ldr	r3, [r7, #12]
1000b7de:	e001      	b.n	1000b7e4 <metal_io_virt_to_offset+0x26>
1000b7e0:	f04f 33ff 	mov.w	r3, #4294967295
}
1000b7e4:	4618      	mov	r0, r3
1000b7e6:	3714      	adds	r7, #20
1000b7e8:	46bd      	mov	sp, r7
1000b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b7ee:	4770      	bx	lr

1000b7f0 <__metal_mutex_init>:
 * static singleton mutex
 */
#define METAL_MUTEX_DEFINE(m) metal_mutex_t m = METAL_MUTEX_INIT(m)

static inline void __metal_mutex_init(metal_mutex_t *mutex)
{
1000b7f0:	b480      	push	{r7}
1000b7f2:	b085      	sub	sp, #20
1000b7f4:	af00      	add	r7, sp, #0
1000b7f6:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
1000b7f8:	687b      	ldr	r3, [r7, #4]
1000b7fa:	60fb      	str	r3, [r7, #12]
1000b7fc:	2300      	movs	r3, #0
1000b7fe:	60bb      	str	r3, [r7, #8]
1000b800:	68bb      	ldr	r3, [r7, #8]
1000b802:	461a      	mov	r2, r3
1000b804:	68fb      	ldr	r3, [r7, #12]
1000b806:	f3bf 8f5b 	dmb	ish
1000b80a:	601a      	str	r2, [r3, #0]
1000b80c:	f3bf 8f5b 	dmb	ish
}
1000b810:	bf00      	nop
1000b812:	3714      	adds	r7, #20
1000b814:	46bd      	mov	sp, r7
1000b816:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b81a:	4770      	bx	lr

1000b81c <__metal_mutex_acquire>:
		return 0; /* not acquired */
	}
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
1000b81c:	b490      	push	{r4, r7}
1000b81e:	b086      	sub	sp, #24
1000b820:	af00      	add	r7, sp, #0
1000b822:	6078      	str	r0, [r7, #4]
	int unlocked = METAL_MUTEX_UNLOCKED;
1000b824:	2300      	movs	r3, #0
1000b826:	613b      	str	r3, [r7, #16]

	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
1000b828:	bf00      	nop
1000b82a:	687b      	ldr	r3, [r7, #4]
1000b82c:	617b      	str	r3, [r7, #20]
1000b82e:	2301      	movs	r3, #1
1000b830:	60fb      	str	r3, [r7, #12]
1000b832:	68fb      	ldr	r3, [r7, #12]
1000b834:	461c      	mov	r4, r3
1000b836:	697a      	ldr	r2, [r7, #20]
1000b838:	f107 0310 	add.w	r3, r7, #16
1000b83c:	6818      	ldr	r0, [r3, #0]
1000b83e:	f3bf 8f5b 	dmb	ish
1000b842:	e852 1f00 	ldrex	r1, [r2]
1000b846:	4281      	cmp	r1, r0
1000b848:	d103      	bne.n	1000b852 <__metal_mutex_acquire+0x36>
1000b84a:	e842 4c00 	strex	ip, r4, [r2]
1000b84e:	f1bc 0f00 	cmp.w	ip, #0
1000b852:	f3bf 8f5b 	dmb	ish
1000b856:	bf0c      	ite	eq
1000b858:	2201      	moveq	r2, #1
1000b85a:	2200      	movne	r2, #0
1000b85c:	2a00      	cmp	r2, #0
1000b85e:	d100      	bne.n	1000b862 <__metal_mutex_acquire+0x46>
1000b860:	6019      	str	r1, [r3, #0]
1000b862:	4613      	mov	r3, r2
1000b864:	f083 0301 	eor.w	r3, r3, #1
1000b868:	b2db      	uxtb	r3, r3
1000b86a:	2b00      	cmp	r3, #0
1000b86c:	d1dd      	bne.n	1000b82a <__metal_mutex_acquire+0xe>
					     METAL_MUTEX_LOCKED)) {
		;
	}
}
1000b86e:	bf00      	nop
1000b870:	bf00      	nop
1000b872:	3718      	adds	r7, #24
1000b874:	46bd      	mov	sp, r7
1000b876:	bc90      	pop	{r4, r7}
1000b878:	4770      	bx	lr

1000b87a <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
1000b87a:	b480      	push	{r7}
1000b87c:	b085      	sub	sp, #20
1000b87e:	af00      	add	r7, sp, #0
1000b880:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
1000b882:	687b      	ldr	r3, [r7, #4]
1000b884:	60fb      	str	r3, [r7, #12]
1000b886:	2300      	movs	r3, #0
1000b888:	60bb      	str	r3, [r7, #8]
1000b88a:	68bb      	ldr	r3, [r7, #8]
1000b88c:	461a      	mov	r2, r3
1000b88e:	68fb      	ldr	r3, [r7, #12]
1000b890:	f3bf 8f5b 	dmb	ish
1000b894:	601a      	str	r2, [r3, #0]
1000b896:	f3bf 8f5b 	dmb	ish
}
1000b89a:	bf00      	nop
1000b89c:	3714      	adds	r7, #20
1000b89e:	46bd      	mov	sp, r7
1000b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b8a4:	4770      	bx	lr

1000b8a6 <metal_mutex_init>:
/**
 * @brief	Initialize a libmetal mutex.
 * @param[in]	mutex	Mutex to initialize.
 */
static inline void metal_mutex_init(metal_mutex_t *mutex)
{
1000b8a6:	b580      	push	{r7, lr}
1000b8a8:	b082      	sub	sp, #8
1000b8aa:	af00      	add	r7, sp, #0
1000b8ac:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
1000b8ae:	6878      	ldr	r0, [r7, #4]
1000b8b0:	f7ff ff9e 	bl	1000b7f0 <__metal_mutex_init>
}
1000b8b4:	bf00      	nop
1000b8b6:	3708      	adds	r7, #8
1000b8b8:	46bd      	mov	sp, r7
1000b8ba:	bd80      	pop	{r7, pc}

1000b8bc <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
1000b8bc:	b580      	push	{r7, lr}
1000b8be:	b082      	sub	sp, #8
1000b8c0:	af00      	add	r7, sp, #0
1000b8c2:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
1000b8c4:	6878      	ldr	r0, [r7, #4]
1000b8c6:	f7ff ffa9 	bl	1000b81c <__metal_mutex_acquire>
}
1000b8ca:	bf00      	nop
1000b8cc:	3708      	adds	r7, #8
1000b8ce:	46bd      	mov	sp, r7
1000b8d0:	bd80      	pop	{r7, pc}

1000b8d2 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
1000b8d2:	b580      	push	{r7, lr}
1000b8d4:	b082      	sub	sp, #8
1000b8d6:	af00      	add	r7, sp, #0
1000b8d8:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
1000b8da:	6878      	ldr	r0, [r7, #4]
1000b8dc:	f7ff ffcd 	bl	1000b87a <__metal_mutex_release>
}
1000b8e0:	bf00      	nop
1000b8e2:	3708      	adds	r7, #8
1000b8e4:	46bd      	mov	sp, r7
1000b8e6:	bd80      	pop	{r7, pc}

1000b8e8 <rpmsg_virtio_get_role>:
#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
1000b8e8:	b480      	push	{r7}
1000b8ea:	b083      	sub	sp, #12
1000b8ec:	af00      	add	r7, sp, #0
1000b8ee:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
1000b8f0:	687b      	ldr	r3, [r7, #4]
1000b8f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000b8f4:	699b      	ldr	r3, [r3, #24]
}
1000b8f6:	4618      	mov	r0, r3
1000b8f8:	370c      	adds	r7, #12
1000b8fa:	46bd      	mov	sp, r7
1000b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b900:	4770      	bx	lr

1000b902 <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
1000b902:	b580      	push	{r7, lr}
1000b904:	b082      	sub	sp, #8
1000b906:	af00      	add	r7, sp, #0
1000b908:	6078      	str	r0, [r7, #4]
1000b90a:	460b      	mov	r3, r1
1000b90c:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
1000b90e:	687b      	ldr	r3, [r7, #4]
1000b910:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000b912:	6a1b      	ldr	r3, [r3, #32]
1000b914:	685b      	ldr	r3, [r3, #4]
1000b916:	687a      	ldr	r2, [r7, #4]
1000b918:	6f92      	ldr	r2, [r2, #120]	; 0x78
1000b91a:	78f9      	ldrb	r1, [r7, #3]
1000b91c:	4610      	mov	r0, r2
1000b91e:	4798      	blx	r3
}
1000b920:	bf00      	nop
1000b922:	3708      	adds	r7, #8
1000b924:	46bd      	mov	sp, r7
1000b926:	bd80      	pop	{r7, pc}

1000b928 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
1000b928:	b580      	push	{r7, lr}
1000b92a:	b082      	sub	sp, #8
1000b92c:	af00      	add	r7, sp, #0
1000b92e:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
1000b930:	687b      	ldr	r3, [r7, #4]
1000b932:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000b934:	6a1b      	ldr	r3, [r3, #32]
1000b936:	681b      	ldr	r3, [r3, #0]
1000b938:	687a      	ldr	r2, [r7, #4]
1000b93a:	6f92      	ldr	r2, [r2, #120]	; 0x78
1000b93c:	4610      	mov	r0, r2
1000b93e:	4798      	blx	r3
1000b940:	4603      	mov	r3, r0
}
1000b942:	4618      	mov	r0, r3
1000b944:	3708      	adds	r7, #8
1000b946:	46bd      	mov	sp, r7
1000b948:	bd80      	pop	{r7, pc}

1000b94a <rpmsg_virtio_get_features>:

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
1000b94a:	b580      	push	{r7, lr}
1000b94c:	b082      	sub	sp, #8
1000b94e:	af00      	add	r7, sp, #0
1000b950:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
1000b952:	687b      	ldr	r3, [r7, #4]
1000b954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000b956:	6a1b      	ldr	r3, [r3, #32]
1000b958:	689b      	ldr	r3, [r3, #8]
1000b95a:	687a      	ldr	r2, [r7, #4]
1000b95c:	6f92      	ldr	r2, [r2, #120]	; 0x78
1000b95e:	4610      	mov	r0, r2
1000b960:	4798      	blx	r3
1000b962:	4603      	mov	r3, r0
}
1000b964:	4618      	mov	r0, r3
1000b966:	3708      	adds	r7, #8
1000b968:	46bd      	mov	sp, r7
1000b96a:	bd80      	pop	{r7, pc}

1000b96c <rpmsg_virtio_create_virtqueues>:
static inline int
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
1000b96c:	b580      	push	{r7, lr}
1000b96e:	b086      	sub	sp, #24
1000b970:	af02      	add	r7, sp, #8
1000b972:	60f8      	str	r0, [r7, #12]
1000b974:	60b9      	str	r1, [r7, #8]
1000b976:	607a      	str	r2, [r7, #4]
1000b978:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
1000b97a:	68fb      	ldr	r3, [r7, #12]
1000b97c:	6f98      	ldr	r0, [r3, #120]	; 0x78
1000b97e:	68b9      	ldr	r1, [r7, #8]
1000b980:	69bb      	ldr	r3, [r7, #24]
1000b982:	9300      	str	r3, [sp, #0]
1000b984:	683b      	ldr	r3, [r7, #0]
1000b986:	687a      	ldr	r2, [r7, #4]
1000b988:	f000 fc2c 	bl	1000c1e4 <virtio_create_virtqueues>
1000b98c:	4603      	mov	r3, r0
					callbacks);
}
1000b98e:	4618      	mov	r0, r3
1000b990:	3710      	adds	r7, #16
1000b992:	46bd      	mov	sp, r7
1000b994:	bd80      	pop	{r7, pc}
	...

1000b998 <rpmsg_initialize_ept>:
static inline void rpmsg_initialize_ept(struct rpmsg_endpoint *ept,
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
1000b998:	b580      	push	{r7, lr}
1000b99a:	b084      	sub	sp, #16
1000b99c:	af00      	add	r7, sp, #0
1000b99e:	60f8      	str	r0, [r7, #12]
1000b9a0:	60b9      	str	r1, [r7, #8]
1000b9a2:	607a      	str	r2, [r7, #4]
1000b9a4:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
1000b9a6:	68f8      	ldr	r0, [r7, #12]
1000b9a8:	68bb      	ldr	r3, [r7, #8]
1000b9aa:	2b00      	cmp	r3, #0
1000b9ac:	d001      	beq.n	1000b9b2 <rpmsg_initialize_ept+0x1a>
1000b9ae:	68bb      	ldr	r3, [r7, #8]
1000b9b0:	e000      	b.n	1000b9b4 <rpmsg_initialize_ept+0x1c>
1000b9b2:	4b0a      	ldr	r3, [pc, #40]	; (1000b9dc <rpmsg_initialize_ept+0x44>)
1000b9b4:	2220      	movs	r2, #32
1000b9b6:	4619      	mov	r1, r3
1000b9b8:	f004 fc3f 	bl	1001023a <strncpy>
	ept->addr = src;
1000b9bc:	68fb      	ldr	r3, [r7, #12]
1000b9be:	687a      	ldr	r2, [r7, #4]
1000b9c0:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
1000b9c2:	68fb      	ldr	r3, [r7, #12]
1000b9c4:	683a      	ldr	r2, [r7, #0]
1000b9c6:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
1000b9c8:	68fb      	ldr	r3, [r7, #12]
1000b9ca:	69ba      	ldr	r2, [r7, #24]
1000b9cc:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
1000b9ce:	68fb      	ldr	r3, [r7, #12]
1000b9d0:	69fa      	ldr	r2, [r7, #28]
1000b9d2:	631a      	str	r2, [r3, #48]	; 0x30
}
1000b9d4:	bf00      	nop
1000b9d6:	3710      	adds	r7, #16
1000b9d8:	46bd      	mov	sp, r7
1000b9da:	bd80      	pop	{r7, pc}
1000b9dc:	10012838 	.word	0x10012838

1000b9e0 <rpmsg_get_ept_from_addr>:
void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
1000b9e0:	b580      	push	{r7, lr}
1000b9e2:	b082      	sub	sp, #8
1000b9e4:	af00      	add	r7, sp, #0
1000b9e6:	6078      	str	r0, [r7, #4]
1000b9e8:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
1000b9ea:	f04f 33ff 	mov.w	r3, #4294967295
1000b9ee:	683a      	ldr	r2, [r7, #0]
1000b9f0:	2100      	movs	r1, #0
1000b9f2:	6878      	ldr	r0, [r7, #4]
1000b9f4:	f7ff fe49 	bl	1000b68a <rpmsg_get_endpoint>
1000b9f8:	4603      	mov	r3, r0
}
1000b9fa:	4618      	mov	r0, r3
1000b9fc:	3708      	adds	r7, #8
1000b9fe:	46bd      	mov	sp, r7
1000ba00:	bd80      	pop	{r7, pc}

1000ba02 <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
1000ba02:	b480      	push	{r7}
1000ba04:	b085      	sub	sp, #20
1000ba06:	af00      	add	r7, sp, #0
1000ba08:	60f8      	str	r0, [r7, #12]
1000ba0a:	60b9      	str	r1, [r7, #8]
1000ba0c:	607a      	str	r2, [r7, #4]
	if (!shpool)
1000ba0e:	68fb      	ldr	r3, [r7, #12]
1000ba10:	2b00      	cmp	r3, #0
1000ba12:	d009      	beq.n	1000ba28 <rpmsg_virtio_init_shm_pool+0x26>
		return;
	shpool->base = shb;
1000ba14:	68fb      	ldr	r3, [r7, #12]
1000ba16:	68ba      	ldr	r2, [r7, #8]
1000ba18:	601a      	str	r2, [r3, #0]
	shpool->size = size;
1000ba1a:	68fb      	ldr	r3, [r7, #12]
1000ba1c:	687a      	ldr	r2, [r7, #4]
1000ba1e:	609a      	str	r2, [r3, #8]
	shpool->avail = size;
1000ba20:	68fb      	ldr	r3, [r7, #12]
1000ba22:	687a      	ldr	r2, [r7, #4]
1000ba24:	605a      	str	r2, [r3, #4]
1000ba26:	e000      	b.n	1000ba2a <rpmsg_virtio_init_shm_pool+0x28>
		return;
1000ba28:	bf00      	nop
}
1000ba2a:	3714      	adds	r7, #20
1000ba2c:	46bd      	mov	sp, r7
1000ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
1000ba32:	4770      	bx	lr

1000ba34 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
1000ba34:	b580      	push	{r7, lr}
1000ba36:	b086      	sub	sp, #24
1000ba38:	af00      	add	r7, sp, #0
1000ba3a:	60f8      	str	r0, [r7, #12]
1000ba3c:	60b9      	str	r1, [r7, #8]
1000ba3e:	607a      	str	r2, [r7, #4]
1000ba40:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000ba42:	68f8      	ldr	r0, [r7, #12]
1000ba44:	f7ff ff50 	bl	1000b8e8 <rpmsg_virtio_get_role>
1000ba48:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000ba4a:	697b      	ldr	r3, [r7, #20]
1000ba4c:	2b01      	cmp	r3, #1
1000ba4e:	d106      	bne.n	1000ba5e <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
1000ba50:	68fb      	ldr	r3, [r7, #12]
1000ba52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1000ba54:	8879      	ldrh	r1, [r7, #2]
1000ba56:	687a      	ldr	r2, [r7, #4]
1000ba58:	4618      	mov	r0, r3
1000ba5a:	f000 fd95 	bl	1000c588 <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
1000ba5e:	bf00      	nop
1000ba60:	3718      	adds	r7, #24
1000ba62:	46bd      	mov	sp, r7
1000ba64:	bd80      	pop	{r7, pc}

1000ba66 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
1000ba66:	b580      	push	{r7, lr}
1000ba68:	b086      	sub	sp, #24
1000ba6a:	af00      	add	r7, sp, #0
1000ba6c:	60f8      	str	r0, [r7, #12]
1000ba6e:	60b9      	str	r1, [r7, #8]
1000ba70:	607a      	str	r2, [r7, #4]
1000ba72:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000ba74:	68f8      	ldr	r0, [r7, #12]
1000ba76:	f7ff ff37 	bl	1000b8e8 <rpmsg_virtio_get_role>
1000ba7a:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000ba7c:	697b      	ldr	r3, [r7, #20]
1000ba7e:	2b01      	cmp	r3, #1
1000ba80:	d109      	bne.n	1000ba96 <rpmsg_virtio_enqueue_buffer+0x30>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
1000ba82:	68fb      	ldr	r3, [r7, #12]
1000ba84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000ba88:	8879      	ldrh	r1, [r7, #2]
1000ba8a:	687a      	ldr	r2, [r7, #4]
1000ba8c:	4618      	mov	r0, r3
1000ba8e:	f000 fd7b 	bl	1000c588 <virtqueue_add_consumed_buffer>
1000ba92:	4603      	mov	r3, r0
1000ba94:	e000      	b.n	1000ba98 <rpmsg_virtio_enqueue_buffer+0x32>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
1000ba96:	2300      	movs	r3, #0
}
1000ba98:	4618      	mov	r0, r3
1000ba9a:	3718      	adds	r7, #24
1000ba9c:	46bd      	mov	sp, r7
1000ba9e:	bd80      	pop	{r7, pc}

1000baa0 <rpmsg_virtio_get_tx_buffer>:
 *
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
1000baa0:	b580      	push	{r7, lr}
1000baa2:	b086      	sub	sp, #24
1000baa4:	af00      	add	r7, sp, #0
1000baa6:	60f8      	str	r0, [r7, #12]
1000baa8:	60b9      	str	r1, [r7, #8]
1000baaa:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000baac:	68f8      	ldr	r0, [r7, #12]
1000baae:	f7ff ff1b 	bl	1000b8e8 <rpmsg_virtio_get_role>
1000bab2:	6138      	str	r0, [r7, #16]
	void *data = NULL;
1000bab4:	2300      	movs	r3, #0
1000bab6:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000bab8:	693b      	ldr	r3, [r7, #16]
1000baba:	2b01      	cmp	r3, #1
1000babc:	d108      	bne.n	1000bad0 <rpmsg_virtio_get_tx_buffer+0x30>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
1000babe:	68fb      	ldr	r3, [r7, #12]
1000bac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000bac4:	68ba      	ldr	r2, [r7, #8]
1000bac6:	6879      	ldr	r1, [r7, #4]
1000bac8:	4618      	mov	r0, r3
1000baca:	f000 fd15 	bl	1000c4f8 <virtqueue_get_available_buffer>
1000bace:	6178      	str	r0, [r7, #20]
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
1000bad0:	697b      	ldr	r3, [r7, #20]
}
1000bad2:	4618      	mov	r0, r3
1000bad4:	3718      	adds	r7, #24
1000bad6:	46bd      	mov	sp, r7
1000bad8:	bd80      	pop	{r7, pc}

1000bada <rpmsg_virtio_get_rx_buffer>:
 * @return - pointer to received buffer
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
1000bada:	b580      	push	{r7, lr}
1000badc:	b086      	sub	sp, #24
1000bade:	af00      	add	r7, sp, #0
1000bae0:	60f8      	str	r0, [r7, #12]
1000bae2:	60b9      	str	r1, [r7, #8]
1000bae4:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000bae6:	68f8      	ldr	r0, [r7, #12]
1000bae8:	f7ff fefe 	bl	1000b8e8 <rpmsg_virtio_get_role>
1000baec:	6138      	str	r0, [r7, #16]
	void *data = NULL;
1000baee:	2300      	movs	r3, #0
1000baf0:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000baf2:	693b      	ldr	r3, [r7, #16]
1000baf4:	2b01      	cmp	r3, #1
1000baf6:	d107      	bne.n	1000bb08 <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
1000baf8:	68fb      	ldr	r3, [r7, #12]
1000bafa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1000bafc:	68ba      	ldr	r2, [r7, #8]
1000bafe:	6879      	ldr	r1, [r7, #4]
1000bb00:	4618      	mov	r0, r3
1000bb02:	f000 fcf9 	bl	1000c4f8 <virtqueue_get_available_buffer>
1000bb06:	6178      	str	r0, [r7, #20]
#ifdef VIRTIO_CACHED_BUFFERS
	/* Invalidate the buffer before returning it */
	metal_cache_invalidate(data, *len);
#endif /* VIRTIO_CACHED_BUFFERS */

	return data;
1000bb08:	697b      	ldr	r3, [r7, #20]
}
1000bb0a:	4618      	mov	r0, r3
1000bb0c:	3718      	adds	r7, #24
1000bb0e:	46bd      	mov	sp, r7
1000bb10:	bd80      	pop	{r7, pc}

1000bb12 <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
1000bb12:	b580      	push	{r7, lr}
1000bb14:	b084      	sub	sp, #16
1000bb16:	af00      	add	r7, sp, #0
1000bb18:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
1000bb1a:	6878      	ldr	r0, [r7, #4]
1000bb1c:	f7ff ff04 	bl	1000b928 <rpmsg_virtio_get_status>
1000bb20:	4603      	mov	r3, r0
1000bb22:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
1000bb24:	7bfb      	ldrb	r3, [r7, #15]
1000bb26:	f003 0340 	and.w	r3, r3, #64	; 0x40
1000bb2a:	2b00      	cmp	r3, #0
1000bb2c:	d004      	beq.n	1000bb38 <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
1000bb2e:	2100      	movs	r1, #0
1000bb30:	6878      	ldr	r0, [r7, #4]
1000bb32:	f7ff fee6 	bl	1000b902 <rpmsg_virtio_set_status>
1000bb36:	e7f0      	b.n	1000bb1a <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
1000bb38:	7bfb      	ldrb	r3, [r7, #15]
1000bb3a:	f003 0304 	and.w	r3, r3, #4
1000bb3e:	2b00      	cmp	r3, #0
1000bb40:	d0eb      	beq.n	1000bb1a <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
1000bb42:	2301      	movs	r3, #1
		}
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}
}
1000bb44:	4618      	mov	r0, r3
1000bb46:	3710      	adds	r7, #16
1000bb48:	46bd      	mov	sp, r7
1000bb4a:	bd80      	pop	{r7, pc}

1000bb4c <rpmsg_virtio_hold_rx_buffer>:

	return length;
}

static void rpmsg_virtio_hold_rx_buffer(struct rpmsg_device *rdev, void *rxbuf)
{
1000bb4c:	b480      	push	{r7}
1000bb4e:	b085      	sub	sp, #20
1000bb50:	af00      	add	r7, sp, #0
1000bb52:	6078      	str	r0, [r7, #4]
1000bb54:	6039      	str	r1, [r7, #0]
	struct rpmsg_hdr *rp_hdr;

	(void)rdev;

	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
1000bb56:	683b      	ldr	r3, [r7, #0]
1000bb58:	3b10      	subs	r3, #16
1000bb5a:	60fb      	str	r3, [r7, #12]

	/* Set held status to keep buffer */
	rp_hdr->reserved |= RPMSG_BUF_HELD;
1000bb5c:	68fb      	ldr	r3, [r7, #12]
1000bb5e:	689b      	ldr	r3, [r3, #8]
1000bb60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
1000bb64:	68fb      	ldr	r3, [r7, #12]
1000bb66:	609a      	str	r2, [r3, #8]
}
1000bb68:	bf00      	nop
1000bb6a:	3714      	adds	r7, #20
1000bb6c:	46bd      	mov	sp, r7
1000bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bb72:	4770      	bx	lr

1000bb74 <rpmsg_virtio_release_rx_buffer>:

static void rpmsg_virtio_release_rx_buffer(struct rpmsg_device *rdev,
					   void *rxbuf)
{
1000bb74:	b580      	push	{r7, lr}
1000bb76:	b086      	sub	sp, #24
1000bb78:	af00      	add	r7, sp, #0
1000bb7a:	6078      	str	r0, [r7, #4]
1000bb7c:	6039      	str	r1, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr *rp_hdr;
	uint16_t idx;
	uint32_t len;

	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000bb7e:	687b      	ldr	r3, [r7, #4]
1000bb80:	617b      	str	r3, [r7, #20]
	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
1000bb82:	683b      	ldr	r3, [r7, #0]
1000bb84:	3b10      	subs	r3, #16
1000bb86:	613b      	str	r3, [r7, #16]
	/* The reserved field contains buffer index */
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
1000bb88:	693b      	ldr	r3, [r7, #16]
1000bb8a:	689b      	ldr	r3, [r3, #8]
1000bb8c:	81fb      	strh	r3, [r7, #14]

	metal_mutex_acquire(&rdev->lock);
1000bb8e:	687b      	ldr	r3, [r7, #4]
1000bb90:	3358      	adds	r3, #88	; 0x58
1000bb92:	4618      	mov	r0, r3
1000bb94:	f7ff fe92 	bl	1000b8bc <metal_mutex_acquire>
	/* Return buffer on virtqueue. */
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
1000bb98:	697b      	ldr	r3, [r7, #20]
1000bb9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1000bb9c:	89fa      	ldrh	r2, [r7, #14]
1000bb9e:	4611      	mov	r1, r2
1000bba0:	4618      	mov	r0, r3
1000bba2:	f000 fc97 	bl	1000c4d4 <virtqueue_get_buffer_length>
1000bba6:	60b8      	str	r0, [r7, #8]
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
1000bba8:	89fb      	ldrh	r3, [r7, #14]
1000bbaa:	68ba      	ldr	r2, [r7, #8]
1000bbac:	6939      	ldr	r1, [r7, #16]
1000bbae:	6978      	ldr	r0, [r7, #20]
1000bbb0:	f7ff ff40 	bl	1000ba34 <rpmsg_virtio_return_buffer>
	metal_mutex_release(&rdev->lock);
1000bbb4:	687b      	ldr	r3, [r7, #4]
1000bbb6:	3358      	adds	r3, #88	; 0x58
1000bbb8:	4618      	mov	r0, r3
1000bbba:	f7ff fe8a 	bl	1000b8d2 <metal_mutex_release>
}
1000bbbe:	bf00      	nop
1000bbc0:	3718      	adds	r7, #24
1000bbc2:	46bd      	mov	sp, r7
1000bbc4:	bd80      	pop	{r7, pc}

1000bbc6 <rpmsg_virtio_get_tx_payload_buffer>:

static void *rpmsg_virtio_get_tx_payload_buffer(struct rpmsg_device *rdev,
						uint32_t *len, int wait)
{
1000bbc6:	b580      	push	{r7, lr}
1000bbc8:	b08a      	sub	sp, #40	; 0x28
1000bbca:	af00      	add	r7, sp, #0
1000bbcc:	60f8      	str	r0, [r7, #12]
1000bbce:	60b9      	str	r1, [r7, #8]
1000bbd0:	607a      	str	r2, [r7, #4]
	uint16_t idx;
	int tick_count;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000bbd2:	68fb      	ldr	r3, [r7, #12]
1000bbd4:	623b      	str	r3, [r7, #32]

	/* Validate device state */
	status = rpmsg_virtio_get_status(rvdev);
1000bbd6:	6a38      	ldr	r0, [r7, #32]
1000bbd8:	f7ff fea6 	bl	1000b928 <rpmsg_virtio_get_status>
1000bbdc:	4603      	mov	r3, r0
1000bbde:	61fb      	str	r3, [r7, #28]
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
1000bbe0:	69fb      	ldr	r3, [r7, #28]
1000bbe2:	f003 0304 	and.w	r3, r3, #4
1000bbe6:	2b00      	cmp	r3, #0
1000bbe8:	d101      	bne.n	1000bbee <rpmsg_virtio_get_tx_payload_buffer+0x28>
		return NULL;
1000bbea:	2300      	movs	r3, #0
1000bbec:	e039      	b.n	1000bc62 <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	if (wait)
1000bbee:	687b      	ldr	r3, [r7, #4]
1000bbf0:	2b00      	cmp	r3, #0
1000bbf2:	d003      	beq.n	1000bbfc <rpmsg_virtio_get_tx_payload_buffer+0x36>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
1000bbf4:	f643 2398 	movw	r3, #15000	; 0x3a98
1000bbf8:	627b      	str	r3, [r7, #36]	; 0x24
1000bbfa:	e001      	b.n	1000bc00 <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	else
		tick_count = 0;
1000bbfc:	2300      	movs	r3, #0
1000bbfe:	627b      	str	r3, [r7, #36]	; 0x24

	while (1) {
		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
1000bc00:	68fb      	ldr	r3, [r7, #12]
1000bc02:	3358      	adds	r3, #88	; 0x58
1000bc04:	4618      	mov	r0, r3
1000bc06:	f7ff fe59 	bl	1000b8bc <metal_mutex_acquire>
		rp_hdr = rpmsg_virtio_get_tx_buffer(rvdev, len, &idx);
1000bc0a:	f107 0316 	add.w	r3, r7, #22
1000bc0e:	461a      	mov	r2, r3
1000bc10:	68b9      	ldr	r1, [r7, #8]
1000bc12:	6a38      	ldr	r0, [r7, #32]
1000bc14:	f7ff ff44 	bl	1000baa0 <rpmsg_virtio_get_tx_buffer>
1000bc18:	61b8      	str	r0, [r7, #24]
		metal_mutex_release(&rdev->lock);
1000bc1a:	68fb      	ldr	r3, [r7, #12]
1000bc1c:	3358      	adds	r3, #88	; 0x58
1000bc1e:	4618      	mov	r0, r3
1000bc20:	f7ff fe57 	bl	1000b8d2 <metal_mutex_release>
		if (rp_hdr || !tick_count)
1000bc24:	69bb      	ldr	r3, [r7, #24]
1000bc26:	2b00      	cmp	r3, #0
1000bc28:	d10a      	bne.n	1000bc40 <rpmsg_virtio_get_tx_payload_buffer+0x7a>
1000bc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bc2c:	2b00      	cmp	r3, #0
1000bc2e:	d007      	beq.n	1000bc40 <rpmsg_virtio_get_tx_payload_buffer+0x7a>
			break;
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
1000bc30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1000bc34:	f7ff fda7 	bl	1000b786 <metal_sleep_usec>
		tick_count--;
1000bc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bc3a:	3b01      	subs	r3, #1
1000bc3c:	627b      	str	r3, [r7, #36]	; 0x24
		metal_mutex_acquire(&rdev->lock);
1000bc3e:	e7df      	b.n	1000bc00 <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	}

	if (!rp_hdr)
1000bc40:	69bb      	ldr	r3, [r7, #24]
1000bc42:	2b00      	cmp	r3, #0
1000bc44:	d101      	bne.n	1000bc4a <rpmsg_virtio_get_tx_payload_buffer+0x84>
		return NULL;
1000bc46:	2300      	movs	r3, #0
1000bc48:	e00b      	b.n	1000bc62 <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	/* Store the index into the reserved field to be used when sending */
	rp_hdr->reserved = idx;
1000bc4a:	8afb      	ldrh	r3, [r7, #22]
1000bc4c:	461a      	mov	r2, r3
1000bc4e:	69bb      	ldr	r3, [r7, #24]
1000bc50:	609a      	str	r2, [r3, #8]

	/* Actual data buffer size is vring buffer size minus header length */
	*len -= sizeof(struct rpmsg_hdr);
1000bc52:	68bb      	ldr	r3, [r7, #8]
1000bc54:	681b      	ldr	r3, [r3, #0]
1000bc56:	f1a3 0210 	sub.w	r2, r3, #16
1000bc5a:	68bb      	ldr	r3, [r7, #8]
1000bc5c:	601a      	str	r2, [r3, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
1000bc5e:	69bb      	ldr	r3, [r7, #24]
1000bc60:	3310      	adds	r3, #16
}
1000bc62:	4618      	mov	r0, r3
1000bc64:	3728      	adds	r7, #40	; 0x28
1000bc66:	46bd      	mov	sp, r7
1000bc68:	bd80      	pop	{r7, pc}
	...

1000bc6c <rpmsg_virtio_send_offchannel_nocopy>:

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
1000bc6c:	b580      	push	{r7, lr}
1000bc6e:	b08e      	sub	sp, #56	; 0x38
1000bc70:	af00      	add	r7, sp, #0
1000bc72:	60f8      	str	r0, [r7, #12]
1000bc74:	60b9      	str	r1, [r7, #8]
1000bc76:	607a      	str	r2, [r7, #4]
1000bc78:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	uint16_t idx;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000bc7a:	68fb      	ldr	r3, [r7, #12]
1000bc7c:	637b      	str	r3, [r7, #52]	; 0x34

	hdr = RPMSG_LOCATE_HDR(data);
1000bc7e:	683b      	ldr	r3, [r7, #0]
1000bc80:	3b10      	subs	r3, #16
1000bc82:	633b      	str	r3, [r7, #48]	; 0x30
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
1000bc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bc86:	689b      	ldr	r3, [r3, #8]
1000bc88:	85fb      	strh	r3, [r7, #46]	; 0x2e

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
1000bc8a:	687b      	ldr	r3, [r7, #4]
1000bc8c:	617b      	str	r3, [r7, #20]
	rp_hdr.src = src;
1000bc8e:	68bb      	ldr	r3, [r7, #8]
1000bc90:	613b      	str	r3, [r7, #16]
	rp_hdr.len = len;
1000bc92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000bc94:	b29b      	uxth	r3, r3
1000bc96:	83bb      	strh	r3, [r7, #28]
	rp_hdr.reserved = 0;
1000bc98:	2300      	movs	r3, #0
1000bc9a:	61bb      	str	r3, [r7, #24]
	rp_hdr.flags = 0;
1000bc9c:	2300      	movs	r3, #0
1000bc9e:	83fb      	strh	r3, [r7, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
1000bca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000bca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
1000bca6:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
1000bca8:	6b39      	ldr	r1, [r7, #48]	; 0x30
1000bcaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1000bcac:	f7ff fd87 	bl	1000b7be <metal_io_virt_to_offset>
1000bcb0:	4601      	mov	r1, r0
1000bcb2:	f107 0210 	add.w	r2, r7, #16
1000bcb6:	2310      	movs	r3, #16
1000bcb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1000bcba:	f7ff f98b 	bl	1000afd4 <metal_io_block_write>
1000bcbe:	6278      	str	r0, [r7, #36]	; 0x24
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
1000bcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bcc2:	2b10      	cmp	r3, #16
1000bcc4:	d006      	beq.n	1000bcd4 <rpmsg_virtio_send_offchannel_nocopy+0x68>
1000bcc6:	4b1b      	ldr	r3, [pc, #108]	; (1000bd34 <rpmsg_virtio_send_offchannel_nocopy+0xc8>)
1000bcc8:	4a1b      	ldr	r2, [pc, #108]	; (1000bd38 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
1000bcca:	f240 117d 	movw	r1, #381	; 0x17d
1000bcce:	481b      	ldr	r0, [pc, #108]	; (1000bd3c <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
1000bcd0:	f003 fbf2 	bl	1000f4b8 <__assert_func>

	metal_mutex_acquire(&rdev->lock);
1000bcd4:	68fb      	ldr	r3, [r7, #12]
1000bcd6:	3358      	adds	r3, #88	; 0x58
1000bcd8:	4618      	mov	r0, r3
1000bcda:	f7ff fdef 	bl	1000b8bc <metal_mutex_acquire>
#ifndef VIRTIO_SLAVE_ONLY
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_MASTER)
		buff_len = RPMSG_BUFFER_SIZE;
	else
#endif /*!VIRTIO_SLAVE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
1000bcde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000bce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000bce4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
1000bce6:	4611      	mov	r1, r2
1000bce8:	4618      	mov	r0, r3
1000bcea:	f000 fbf3 	bl	1000c4d4 <virtqueue_get_buffer_length>
1000bcee:	6238      	str	r0, [r7, #32]

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
1000bcf0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
1000bcf2:	6a3a      	ldr	r2, [r7, #32]
1000bcf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
1000bcf6:	6b78      	ldr	r0, [r7, #52]	; 0x34
1000bcf8:	f7ff feb5 	bl	1000ba66 <rpmsg_virtio_enqueue_buffer>
1000bcfc:	6278      	str	r0, [r7, #36]	; 0x24
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
1000bcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bd00:	2b00      	cmp	r3, #0
1000bd02:	d006      	beq.n	1000bd12 <rpmsg_virtio_send_offchannel_nocopy+0xa6>
1000bd04:	4b0e      	ldr	r3, [pc, #56]	; (1000bd40 <rpmsg_virtio_send_offchannel_nocopy+0xd4>)
1000bd06:	4a0c      	ldr	r2, [pc, #48]	; (1000bd38 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
1000bd08:	f44f 71c5 	mov.w	r1, #394	; 0x18a
1000bd0c:	480b      	ldr	r0, [pc, #44]	; (1000bd3c <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
1000bd0e:	f003 fbd3 	bl	1000f4b8 <__assert_func>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
1000bd12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000bd14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000bd18:	4618      	mov	r0, r3
1000bd1a:	f000 fcaf 	bl	1000c67c <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
1000bd1e:	68fb      	ldr	r3, [r7, #12]
1000bd20:	3358      	adds	r3, #88	; 0x58
1000bd22:	4618      	mov	r0, r3
1000bd24:	f7ff fdd5 	bl	1000b8d2 <metal_mutex_release>

	return len;
1000bd28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
1000bd2a:	4618      	mov	r0, r3
1000bd2c:	3738      	adds	r7, #56	; 0x38
1000bd2e:	46bd      	mov	sp, r7
1000bd30:	bd80      	pop	{r7, pc}
1000bd32:	bf00      	nop
1000bd34:	1001283c 	.word	0x1001283c
1000bd38:	100129b8 	.word	0x100129b8
1000bd3c:	10012858 	.word	0x10012858
1000bd40:	100128dc 	.word	0x100128dc

1000bd44 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
1000bd44:	b580      	push	{r7, lr}
1000bd46:	b08c      	sub	sp, #48	; 0x30
1000bd48:	af02      	add	r7, sp, #8
1000bd4a:	60f8      	str	r0, [r7, #12]
1000bd4c:	60b9      	str	r1, [r7, #8]
1000bd4e:	607a      	str	r2, [r7, #4]
1000bd50:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	void *buffer;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000bd52:	68fb      	ldr	r3, [r7, #12]
1000bd54:	627b      	str	r3, [r7, #36]	; 0x24

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
1000bd56:	f107 0314 	add.w	r3, r7, #20
1000bd5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000bd5c:	4619      	mov	r1, r3
1000bd5e:	68f8      	ldr	r0, [r7, #12]
1000bd60:	f7ff ff31 	bl	1000bbc6 <rpmsg_virtio_get_tx_payload_buffer>
1000bd64:	6238      	str	r0, [r7, #32]
	if (!buffer)
1000bd66:	6a3b      	ldr	r3, [r7, #32]
1000bd68:	2b00      	cmp	r3, #0
1000bd6a:	d101      	bne.n	1000bd70 <rpmsg_virtio_send_offchannel_raw+0x2c>
		return RPMSG_ERR_NO_BUFF;
1000bd6c:	4b17      	ldr	r3, [pc, #92]	; (1000bdcc <rpmsg_virtio_send_offchannel_raw+0x88>)
1000bd6e:	e029      	b.n	1000bdc4 <rpmsg_virtio_send_offchannel_raw+0x80>

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
1000bd70:	697b      	ldr	r3, [r7, #20]
1000bd72:	461a      	mov	r2, r3
1000bd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bd76:	4293      	cmp	r3, r2
1000bd78:	dd01      	ble.n	1000bd7e <rpmsg_virtio_send_offchannel_raw+0x3a>
		len = buff_len;
1000bd7a:	697b      	ldr	r3, [r7, #20]
1000bd7c:	633b      	str	r3, [r7, #48]	; 0x30
	io = rvdev->shbuf_io;
1000bd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bd80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
1000bd84:	61fb      	str	r3, [r7, #28]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
1000bd86:	6a39      	ldr	r1, [r7, #32]
1000bd88:	69f8      	ldr	r0, [r7, #28]
1000bd8a:	f7ff fd18 	bl	1000b7be <metal_io_virt_to_offset>
1000bd8e:	4601      	mov	r1, r0
1000bd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bd92:	683a      	ldr	r2, [r7, #0]
1000bd94:	69f8      	ldr	r0, [r7, #28]
1000bd96:	f7ff f91d 	bl	1000afd4 <metal_io_block_write>
1000bd9a:	61b8      	str	r0, [r7, #24]
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
1000bd9c:	69ba      	ldr	r2, [r7, #24]
1000bd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bda0:	429a      	cmp	r2, r3
1000bda2:	d006      	beq.n	1000bdb2 <rpmsg_virtio_send_offchannel_raw+0x6e>
1000bda4:	4b0a      	ldr	r3, [pc, #40]	; (1000bdd0 <rpmsg_virtio_send_offchannel_raw+0x8c>)
1000bda6:	4a0b      	ldr	r2, [pc, #44]	; (1000bdd4 <rpmsg_virtio_send_offchannel_raw+0x90>)
1000bda8:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
1000bdac:	480a      	ldr	r0, [pc, #40]	; (1000bdd8 <rpmsg_virtio_send_offchannel_raw+0x94>)
1000bdae:	f003 fb83 	bl	1000f4b8 <__assert_func>

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
1000bdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bdb4:	9300      	str	r3, [sp, #0]
1000bdb6:	6a3b      	ldr	r3, [r7, #32]
1000bdb8:	687a      	ldr	r2, [r7, #4]
1000bdba:	68b9      	ldr	r1, [r7, #8]
1000bdbc:	68f8      	ldr	r0, [r7, #12]
1000bdbe:	f7ff ff55 	bl	1000bc6c <rpmsg_virtio_send_offchannel_nocopy>
1000bdc2:	4603      	mov	r3, r0
}
1000bdc4:	4618      	mov	r0, r3
1000bdc6:	3728      	adds	r7, #40	; 0x28
1000bdc8:	46bd      	mov	sp, r7
1000bdca:	bd80      	pop	{r7, pc}
1000bdcc:	fffff82e 	.word	0xfffff82e
1000bdd0:	100128e8 	.word	0x100128e8
1000bdd4:	100129dc 	.word	0x100129dc
1000bdd8:	10012858 	.word	0x10012858

1000bddc <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
1000bddc:	b480      	push	{r7}
1000bdde:	b083      	sub	sp, #12
1000bde0:	af00      	add	r7, sp, #0
1000bde2:	6078      	str	r0, [r7, #4]
	(void)vq;
}
1000bde4:	bf00      	nop
1000bde6:	370c      	adds	r7, #12
1000bde8:	46bd      	mov	sp, r7
1000bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bdee:	4770      	bx	lr

1000bdf0 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
1000bdf0:	b590      	push	{r4, r7, lr}
1000bdf2:	b08d      	sub	sp, #52	; 0x34
1000bdf4:	af02      	add	r7, sp, #8
1000bdf6:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
1000bdf8:	687b      	ldr	r3, [r7, #4]
1000bdfa:	681b      	ldr	r3, [r3, #0]
1000bdfc:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
1000bdfe:	6a3b      	ldr	r3, [r7, #32]
1000be00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000be02:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
1000be04:	69fb      	ldr	r3, [r7, #28]
1000be06:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
1000be08:	69bb      	ldr	r3, [r7, #24]
1000be0a:	3358      	adds	r3, #88	; 0x58
1000be0c:	4618      	mov	r0, r3
1000be0e:	f7ff fd55 	bl	1000b8bc <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
1000be12:	f107 020a 	add.w	r2, r7, #10
1000be16:	f107 030c 	add.w	r3, r7, #12
1000be1a:	4619      	mov	r1, r3
1000be1c:	69f8      	ldr	r0, [r7, #28]
1000be1e:	f7ff fe5c 	bl	1000bada <rpmsg_virtio_get_rx_buffer>
1000be22:	6278      	str	r0, [r7, #36]	; 0x24

	metal_mutex_release(&rdev->lock);
1000be24:	69bb      	ldr	r3, [r7, #24]
1000be26:	3358      	adds	r3, #88	; 0x58
1000be28:	4618      	mov	r0, r3
1000be2a:	f7ff fd52 	bl	1000b8d2 <metal_mutex_release>

	while (rp_hdr) {
1000be2e:	e062      	b.n	1000bef6 <rpmsg_virtio_rx_callback+0x106>
		rp_hdr->reserved = idx;
1000be30:	897b      	ldrh	r3, [r7, #10]
1000be32:	461a      	mov	r2, r3
1000be34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000be36:	609a      	str	r2, [r3, #8]

		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
1000be38:	69bb      	ldr	r3, [r7, #24]
1000be3a:	3358      	adds	r3, #88	; 0x58
1000be3c:	4618      	mov	r0, r3
1000be3e:	f7ff fd3d 	bl	1000b8bc <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
1000be42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000be44:	685b      	ldr	r3, [r3, #4]
1000be46:	4619      	mov	r1, r3
1000be48:	69b8      	ldr	r0, [r7, #24]
1000be4a:	f7ff fdc9 	bl	1000b9e0 <rpmsg_get_ept_from_addr>
1000be4e:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
1000be50:	69bb      	ldr	r3, [r7, #24]
1000be52:	3358      	adds	r3, #88	; 0x58
1000be54:	4618      	mov	r0, r3
1000be56:	f7ff fd3c 	bl	1000b8d2 <metal_mutex_release>

		if (ept) {
1000be5a:	697b      	ldr	r3, [r7, #20]
1000be5c:	2b00      	cmp	r3, #0
1000be5e:	d025      	beq.n	1000beac <rpmsg_virtio_rx_callback+0xbc>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
1000be60:	697b      	ldr	r3, [r7, #20]
1000be62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000be64:	f1b3 3fff 	cmp.w	r3, #4294967295
1000be68:	d103      	bne.n	1000be72 <rpmsg_virtio_rx_callback+0x82>
				/*
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
1000be6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000be6c:	681a      	ldr	r2, [r3, #0]
1000be6e:	697b      	ldr	r3, [r7, #20]
1000be70:	629a      	str	r2, [r3, #40]	; 0x28
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
1000be72:	697b      	ldr	r3, [r7, #20]
1000be74:	6adc      	ldr	r4, [r3, #44]	; 0x2c
1000be76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000be78:	f103 0110 	add.w	r1, r3, #16
					 rp_hdr->len, rp_hdr->src, ept->priv);
1000be7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000be7e:	899b      	ldrh	r3, [r3, #12]
1000be80:	b29b      	uxth	r3, r3
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
1000be82:	4618      	mov	r0, r3
1000be84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000be86:	681a      	ldr	r2, [r3, #0]
1000be88:	697b      	ldr	r3, [r7, #20]
1000be8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000be8c:	9300      	str	r3, [sp, #0]
1000be8e:	4613      	mov	r3, r2
1000be90:	4602      	mov	r2, r0
1000be92:	6978      	ldr	r0, [r7, #20]
1000be94:	47a0      	blx	r4
1000be96:	6138      	str	r0, [r7, #16]

			RPMSG_ASSERT(status >= 0,
1000be98:	693b      	ldr	r3, [r7, #16]
1000be9a:	2b00      	cmp	r3, #0
1000be9c:	da06      	bge.n	1000beac <rpmsg_virtio_rx_callback+0xbc>
1000be9e:	4b1a      	ldr	r3, [pc, #104]	; (1000bf08 <rpmsg_virtio_rx_callback+0x118>)
1000bea0:	4a1a      	ldr	r2, [pc, #104]	; (1000bf0c <rpmsg_virtio_rx_callback+0x11c>)
1000bea2:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
1000bea6:	481a      	ldr	r0, [pc, #104]	; (1000bf10 <rpmsg_virtio_rx_callback+0x120>)
1000bea8:	f003 fb06 	bl	1000f4b8 <__assert_func>
				     "unexpected callback status\r\n");
		}

		metal_mutex_acquire(&rdev->lock);
1000beac:	69bb      	ldr	r3, [r7, #24]
1000beae:	3358      	adds	r3, #88	; 0x58
1000beb0:	4618      	mov	r0, r3
1000beb2:	f7ff fd03 	bl	1000b8bc <metal_mutex_acquire>

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
1000beb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000beb8:	689b      	ldr	r3, [r3, #8]
1000beba:	2b00      	cmp	r3, #0
1000bebc:	db05      	blt.n	1000beca <rpmsg_virtio_rx_callback+0xda>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
1000bebe:	68fa      	ldr	r2, [r7, #12]
1000bec0:	897b      	ldrh	r3, [r7, #10]
1000bec2:	6a79      	ldr	r1, [r7, #36]	; 0x24
1000bec4:	69f8      	ldr	r0, [r7, #28]
1000bec6:	f7ff fdb5 	bl	1000ba34 <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
1000beca:	f107 020a 	add.w	r2, r7, #10
1000bece:	f107 030c 	add.w	r3, r7, #12
1000bed2:	4619      	mov	r1, r3
1000bed4:	69f8      	ldr	r0, [r7, #28]
1000bed6:	f7ff fe00 	bl	1000bada <rpmsg_virtio_get_rx_buffer>
1000beda:	6278      	str	r0, [r7, #36]	; 0x24
		if (!rp_hdr) {
1000bedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bede:	2b00      	cmp	r3, #0
1000bee0:	d104      	bne.n	1000beec <rpmsg_virtio_rx_callback+0xfc>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
1000bee2:	69fb      	ldr	r3, [r7, #28]
1000bee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1000bee6:	4618      	mov	r0, r3
1000bee8:	f000 fbc8 	bl	1000c67c <virtqueue_kick>
		}
		metal_mutex_release(&rdev->lock);
1000beec:	69bb      	ldr	r3, [r7, #24]
1000beee:	3358      	adds	r3, #88	; 0x58
1000bef0:	4618      	mov	r0, r3
1000bef2:	f7ff fcee 	bl	1000b8d2 <metal_mutex_release>
	while (rp_hdr) {
1000bef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bef8:	2b00      	cmp	r3, #0
1000befa:	d199      	bne.n	1000be30 <rpmsg_virtio_rx_callback+0x40>
	}
}
1000befc:	bf00      	nop
1000befe:	bf00      	nop
1000bf00:	372c      	adds	r7, #44	; 0x2c
1000bf02:	46bd      	mov	sp, r7
1000bf04:	bd90      	pop	{r4, r7, pc}
1000bf06:	bf00      	nop
1000bf08:	100128f8 	.word	0x100128f8
1000bf0c:	10012a00 	.word	0x10012a00
1000bf10:	10012858 	.word	0x10012858

1000bf14 <rpmsg_virtio_ns_callback>:
 *
 * @return - rpmag endpoint callback handled
 */
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
1000bf14:	b580      	push	{r7, lr}
1000bf16:	b092      	sub	sp, #72	; 0x48
1000bf18:	af00      	add	r7, sp, #0
1000bf1a:	60f8      	str	r0, [r7, #12]
1000bf1c:	60b9      	str	r1, [r7, #8]
1000bf1e:	607a      	str	r2, [r7, #4]
1000bf20:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
1000bf22:	68fb      	ldr	r3, [r7, #12]
1000bf24:	6a1b      	ldr	r3, [r3, #32]
1000bf26:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
1000bf28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000bf2a:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
1000bf2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000bf2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
1000bf32:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = data;
1000bf34:	68bb      	ldr	r3, [r7, #8]
1000bf36:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
1000bf38:	687b      	ldr	r3, [r7, #4]
1000bf3a:	2b28      	cmp	r3, #40	; 0x28
1000bf3c:	d001      	beq.n	1000bf42 <rpmsg_virtio_ns_callback+0x2e>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
1000bf3e:	2300      	movs	r3, #0
1000bf40:	e057      	b.n	1000bff2 <rpmsg_virtio_ns_callback+0xde>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
1000bf42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
1000bf44:	4619      	mov	r1, r3
1000bf46:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
1000bf48:	f7ff fc39 	bl	1000b7be <metal_io_virt_to_offset>
1000bf4c:	4601      	mov	r1, r0
1000bf4e:	f107 0210 	add.w	r2, r7, #16
1000bf52:	2320      	movs	r3, #32
1000bf54:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
1000bf56:	f7fe ffc8 	bl	1000aeea <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
1000bf5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000bf5c:	6a1b      	ldr	r3, [r3, #32]
1000bf5e:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
1000bf60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000bf62:	3358      	adds	r3, #88	; 0x58
1000bf64:	4618      	mov	r0, r3
1000bf66:	f7ff fca9 	bl	1000b8bc <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
1000bf6a:	f107 0110 	add.w	r1, r7, #16
1000bf6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000bf70:	f04f 32ff 	mov.w	r2, #4294967295
1000bf74:	6c78      	ldr	r0, [r7, #68]	; 0x44
1000bf76:	f7ff fb88 	bl	1000b68a <rpmsg_get_endpoint>
1000bf7a:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
1000bf7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000bf7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000bf80:	f003 0301 	and.w	r3, r3, #1
1000bf84:	2b00      	cmp	r3, #0
1000bf86:	d017      	beq.n	1000bfb8 <rpmsg_virtio_ns_callback+0xa4>
		if (_ept)
1000bf88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bf8a:	2b00      	cmp	r3, #0
1000bf8c:	d003      	beq.n	1000bf96 <rpmsg_virtio_ns_callback+0x82>
			_ept->dest_addr = RPMSG_ADDR_ANY;
1000bf8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bf90:	f04f 32ff 	mov.w	r2, #4294967295
1000bf94:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
1000bf96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000bf98:	3358      	adds	r3, #88	; 0x58
1000bf9a:	4618      	mov	r0, r3
1000bf9c:	f7ff fc99 	bl	1000b8d2 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
1000bfa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bfa2:	2b00      	cmp	r3, #0
1000bfa4:	d024      	beq.n	1000bff0 <rpmsg_virtio_ns_callback+0xdc>
1000bfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bfa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000bfaa:	2b00      	cmp	r3, #0
1000bfac:	d020      	beq.n	1000bff0 <rpmsg_virtio_ns_callback+0xdc>
			_ept->ns_unbind_cb(_ept);
1000bfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bfb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000bfb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
1000bfb4:	4798      	blx	r3
1000bfb6:	e01b      	b.n	1000bff0 <rpmsg_virtio_ns_callback+0xdc>
	} else {
		if (!_ept) {
1000bfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bfba:	2b00      	cmp	r3, #0
1000bfbc:	d110      	bne.n	1000bfe0 <rpmsg_virtio_ns_callback+0xcc>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
1000bfbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000bfc0:	3358      	adds	r3, #88	; 0x58
1000bfc2:	4618      	mov	r0, r3
1000bfc4:	f7ff fc85 	bl	1000b8d2 <metal_mutex_release>
			if (rdev->ns_bind_cb)
1000bfc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000bfca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
1000bfcc:	2b00      	cmp	r3, #0
1000bfce:	d00f      	beq.n	1000bff0 <rpmsg_virtio_ns_callback+0xdc>
				rdev->ns_bind_cb(rdev, name, dest);
1000bfd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000bfd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
1000bfd4:	f107 0110 	add.w	r1, r7, #16
1000bfd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000bfda:	6c78      	ldr	r0, [r7, #68]	; 0x44
1000bfdc:	4798      	blx	r3
1000bfde:	e007      	b.n	1000bff0 <rpmsg_virtio_ns_callback+0xdc>
		} else {
			_ept->dest_addr = dest;
1000bfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bfe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000bfe4:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
1000bfe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000bfe8:	3358      	adds	r3, #88	; 0x58
1000bfea:	4618      	mov	r0, r3
1000bfec:	f7ff fc71 	bl	1000b8d2 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
1000bff0:	2300      	movs	r3, #0
}
1000bff2:	4618      	mov	r0, r3
1000bff4:	3748      	adds	r7, #72	; 0x48
1000bff6:	46bd      	mov	sp, r7
1000bff8:	bd80      	pop	{r7, pc}
	...

1000bffc <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
1000bffc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
1000c000:	b090      	sub	sp, #64	; 0x40
1000c002:	af02      	add	r7, sp, #8
1000c004:	60f8      	str	r0, [r7, #12]
1000c006:	60b9      	str	r1, [r7, #8]
1000c008:	607a      	str	r2, [r7, #4]
1000c00a:	603b      	str	r3, [r7, #0]
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
1000c00c:	68fb      	ldr	r3, [r7, #12]
1000c00e:	633b      	str	r3, [r7, #48]	; 0x30
	memset(rdev, 0, sizeof(*rdev));
1000c010:	2278      	movs	r2, #120	; 0x78
1000c012:	2100      	movs	r1, #0
1000c014:	6b38      	ldr	r0, [r7, #48]	; 0x30
1000c016:	f004 f8f6 	bl	10010206 <memset>
	metal_mutex_init(&rdev->lock);
1000c01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c01c:	3358      	adds	r3, #88	; 0x58
1000c01e:	4618      	mov	r0, r3
1000c020:	f7ff fc41 	bl	1000b8a6 <metal_mutex_init>
	rvdev->vdev = vdev;
1000c024:	68fb      	ldr	r3, [r7, #12]
1000c026:	68ba      	ldr	r2, [r7, #8]
1000c028:	679a      	str	r2, [r3, #120]	; 0x78
	rdev->ns_bind_cb = ns_bind_cb;
1000c02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c02c:	687a      	ldr	r2, [r7, #4]
1000c02e:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
1000c030:	68bb      	ldr	r3, [r7, #8]
1000c032:	68fa      	ldr	r2, [r7, #12]
1000c034:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
1000c036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c038:	4a4d      	ldr	r2, [pc, #308]	; (1000c170 <rpmsg_init_vdev+0x174>)
1000c03a:	661a      	str	r2, [r3, #96]	; 0x60
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
1000c03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c03e:	4a4d      	ldr	r2, [pc, #308]	; (1000c174 <rpmsg_init_vdev+0x178>)
1000c040:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
1000c042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c044:	4a4c      	ldr	r2, [pc, #304]	; (1000c178 <rpmsg_init_vdev+0x17c>)
1000c046:	669a      	str	r2, [r3, #104]	; 0x68
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
1000c048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c04a:	4a4c      	ldr	r2, [pc, #304]	; (1000c17c <rpmsg_init_vdev+0x180>)
1000c04c:	66da      	str	r2, [r3, #108]	; 0x6c
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
1000c04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c050:	4a4b      	ldr	r2, [pc, #300]	; (1000c180 <rpmsg_init_vdev+0x184>)
1000c052:	671a      	str	r2, [r3, #112]	; 0x70
	role = rpmsg_virtio_get_role(rvdev);
1000c054:	68f8      	ldr	r0, [r7, #12]
1000c056:	f7ff fc47 	bl	1000b8e8 <rpmsg_virtio_get_role>
1000c05a:	62f8      	str	r0, [r7, #44]	; 0x2c

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000c05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000c05e:	2b01      	cmp	r3, #1
1000c060:	d102      	bne.n	1000c068 <rpmsg_init_vdev+0x6c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
1000c062:	68f8      	ldr	r0, [r7, #12]
1000c064:	f7ff fd55 	bl	1000bb12 <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
1000c068:	68f8      	ldr	r0, [r7, #12]
1000c06a:	f7ff fc6e 	bl	1000b94a <rpmsg_virtio_get_features>
1000c06e:	4603      	mov	r3, r0
1000c070:	2200      	movs	r2, #0
1000c072:	4698      	mov	r8, r3
1000c074:	4691      	mov	r9, r2
1000c076:	68bb      	ldr	r3, [r7, #8]
1000c078:	e9c3 8904 	strd	r8, r9, [r3, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
1000c07c:	68bb      	ldr	r3, [r7, #8]
1000c07e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
1000c082:	f002 0401 	and.w	r4, r2, #1
1000c086:	2500      	movs	r5, #0
1000c088:	ea44 0305 	orr.w	r3, r4, r5
1000c08c:	2b00      	cmp	r3, #0
1000c08e:	bf14      	ite	ne
1000c090:	2301      	movne	r3, #1
1000c092:	2300      	moveq	r3, #0
1000c094:	b2da      	uxtb	r2, r3
1000c096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c098:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
1000c09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000c09e:	2b01      	cmp	r3, #1
1000c0a0:	d113      	bne.n	1000c0ca <rpmsg_init_vdev+0xce>
		vq_names[0] = "tx_vq";
1000c0a2:	4b38      	ldr	r3, [pc, #224]	; (1000c184 <rpmsg_init_vdev+0x188>)
1000c0a4:	61fb      	str	r3, [r7, #28]
		vq_names[1] = "rx_vq";
1000c0a6:	4b38      	ldr	r3, [pc, #224]	; (1000c188 <rpmsg_init_vdev+0x18c>)
1000c0a8:	623b      	str	r3, [r7, #32]
		callback[0] = rpmsg_virtio_tx_callback;
1000c0aa:	4b38      	ldr	r3, [pc, #224]	; (1000c18c <rpmsg_init_vdev+0x190>)
1000c0ac:	617b      	str	r3, [r7, #20]
		callback[1] = rpmsg_virtio_rx_callback;
1000c0ae:	4b38      	ldr	r3, [pc, #224]	; (1000c190 <rpmsg_init_vdev+0x194>)
1000c0b0:	61bb      	str	r3, [r7, #24]
		rvdev->rvq  = vdev->vrings_info[1].vq;
1000c0b2:	68bb      	ldr	r3, [r7, #8]
1000c0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000c0b6:	3318      	adds	r3, #24
1000c0b8:	681a      	ldr	r2, [r3, #0]
1000c0ba:	68fb      	ldr	r3, [r7, #12]
1000c0bc:	67da      	str	r2, [r3, #124]	; 0x7c
		rvdev->svq  = vdev->vrings_info[0].vq;
1000c0be:	68bb      	ldr	r3, [r7, #8]
1000c0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000c0c2:	681a      	ldr	r2, [r3, #0]
1000c0c4:	68fb      	ldr	r3, [r7, #12]
1000c0c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
1000c0ca:	68fb      	ldr	r3, [r7, #12]
1000c0cc:	683a      	ldr	r2, [r7, #0]
1000c0ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
1000c0d2:	f107 021c 	add.w	r2, r7, #28
1000c0d6:	f107 0314 	add.w	r3, r7, #20
1000c0da:	9300      	str	r3, [sp, #0]
1000c0dc:	4613      	mov	r3, r2
1000c0de:	2202      	movs	r2, #2
1000c0e0:	2100      	movs	r1, #0
1000c0e2:	68f8      	ldr	r0, [r7, #12]
1000c0e4:	f7ff fc42 	bl	1000b96c <rpmsg_virtio_create_virtqueues>
1000c0e8:	62b8      	str	r0, [r7, #40]	; 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
1000c0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c0ec:	2b00      	cmp	r3, #0
1000c0ee:	d001      	beq.n	1000c0f4 <rpmsg_init_vdev+0xf8>
		return status;
1000c0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c0f2:	e037      	b.n	1000c164 <rpmsg_init_vdev+0x168>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
1000c0f4:	68fb      	ldr	r3, [r7, #12]
1000c0f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000c0fa:	4618      	mov	r0, r3
1000c0fc:	f000 fa86 	bl	1000c60c <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
1000c100:	2300      	movs	r3, #0
1000c102:	637b      	str	r3, [r7, #52]	; 0x34
1000c104:	e00f      	b.n	1000c126 <rpmsg_init_vdev+0x12a>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
1000c106:	68bb      	ldr	r3, [r7, #8]
1000c108:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1000c10a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000c10c:	4613      	mov	r3, r2
1000c10e:	005b      	lsls	r3, r3, #1
1000c110:	4413      	add	r3, r2
1000c112:	00db      	lsls	r3, r3, #3
1000c114:	440b      	add	r3, r1
1000c116:	681b      	ldr	r3, [r3, #0]
1000c118:	627b      	str	r3, [r7, #36]	; 0x24
		vq->shm_io = shm_io;
1000c11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c11c:	683a      	ldr	r2, [r7, #0]
1000c11e:	629a      	str	r2, [r3, #40]	; 0x28
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
1000c120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000c122:	3301      	adds	r3, #1
1000c124:	637b      	str	r3, [r7, #52]	; 0x34
1000c126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000c128:	2b01      	cmp	r3, #1
1000c12a:	d9ec      	bls.n	1000c106 <rpmsg_init_vdev+0x10a>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
1000c12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c12e:	4618      	mov	r0, r3
1000c130:	f7ff fb35 	bl	1000b79e <metal_list_init>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
1000c134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c136:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
1000c13a:	2b00      	cmp	r3, #0
1000c13c:	d011      	beq.n	1000c162 <rpmsg_init_vdev+0x166>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
1000c13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c140:	f103 0008 	add.w	r0, r3, #8
1000c144:	2300      	movs	r3, #0
1000c146:	9301      	str	r3, [sp, #4]
1000c148:	4b12      	ldr	r3, [pc, #72]	; (1000c194 <rpmsg_init_vdev+0x198>)
1000c14a:	9300      	str	r3, [sp, #0]
1000c14c:	2335      	movs	r3, #53	; 0x35
1000c14e:	2235      	movs	r2, #53	; 0x35
1000c150:	4911      	ldr	r1, [pc, #68]	; (1000c198 <rpmsg_init_vdev+0x19c>)
1000c152:	f7ff fc21 	bl	1000b998 <rpmsg_initialize_ept>
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
1000c156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c158:	3308      	adds	r3, #8
1000c15a:	4619      	mov	r1, r3
1000c15c:	6b38      	ldr	r0, [r7, #48]	; 0x30
1000c15e:	f7ff faf4 	bl	1000b74a <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
1000c162:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
1000c164:	4618      	mov	r0, r3
1000c166:	3738      	adds	r7, #56	; 0x38
1000c168:	46bd      	mov	sp, r7
1000c16a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
1000c16e:	bf00      	nop
1000c170:	1000bd45 	.word	0x1000bd45
1000c174:	1000bb4d 	.word	0x1000bb4d
1000c178:	1000bb75 	.word	0x1000bb75
1000c17c:	1000bbc7 	.word	0x1000bbc7
1000c180:	1000bc6d 	.word	0x1000bc6d
1000c184:	10012904 	.word	0x10012904
1000c188:	1001290c 	.word	0x1001290c
1000c18c:	1000bddd 	.word	0x1000bddd
1000c190:	1000bdf1 	.word	0x1000bdf1
1000c194:	1000bf15 	.word	0x1000bf15
1000c198:	10012914 	.word	0x10012914

1000c19c <metal_machine_cache_flush>:

	/* Add implementation here */
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
1000c19c:	b480      	push	{r7}
1000c19e:	b083      	sub	sp, #12
1000c1a0:	af00      	add	r7, sp, #0
1000c1a2:	6078      	str	r0, [r7, #4]
1000c1a4:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
1000c1a6:	bf00      	nop
1000c1a8:	370c      	adds	r7, #12
1000c1aa:	46bd      	mov	sp, r7
1000c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c1b0:	4770      	bx	lr

1000c1b2 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
1000c1b2:	b480      	push	{r7}
1000c1b4:	b083      	sub	sp, #12
1000c1b6:	af00      	add	r7, sp, #0
1000c1b8:	6078      	str	r0, [r7, #4]
1000c1ba:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
1000c1bc:	bf00      	nop
1000c1be:	370c      	adds	r7, #12
1000c1c0:	46bd      	mov	sp, r7
1000c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c1c6:	4770      	bx	lr

1000c1c8 <metal_machine_io_mem_map>:
	/* Add implementation here */
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
1000c1c8:	b480      	push	{r7}
1000c1ca:	b085      	sub	sp, #20
1000c1cc:	af00      	add	r7, sp, #0
1000c1ce:	60f8      	str	r0, [r7, #12]
1000c1d0:	60b9      	str	r1, [r7, #8]
1000c1d2:	607a      	str	r2, [r7, #4]
1000c1d4:	603b      	str	r3, [r7, #0]
	metal_unused(size);
	metal_unused(flags);

	/* Add implementation here */

	return va;
1000c1d6:	68fb      	ldr	r3, [r7, #12]
}
1000c1d8:	4618      	mov	r0, r3
1000c1da:	3714      	adds	r7, #20
1000c1dc:	46bd      	mov	sp, r7
1000c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c1e2:	4770      	bx	lr

1000c1e4 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
1000c1e4:	b590      	push	{r4, r7, lr}
1000c1e6:	b08f      	sub	sp, #60	; 0x3c
1000c1e8:	af04      	add	r7, sp, #16
1000c1ea:	60f8      	str	r0, [r7, #12]
1000c1ec:	60b9      	str	r1, [r7, #8]
1000c1ee:	607a      	str	r2, [r7, #4]
1000c1f0:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
1000c1f2:	68fb      	ldr	r3, [r7, #12]
1000c1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000c1f6:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
1000c1f8:	687a      	ldr	r2, [r7, #4]
1000c1fa:	6a3b      	ldr	r3, [r7, #32]
1000c1fc:	429a      	cmp	r2, r3
1000c1fe:	d901      	bls.n	1000c204 <virtio_create_virtqueues+0x20>
		return ERROR_VQUEUE_INVLD_PARAM;
1000c200:	4b1e      	ldr	r3, [pc, #120]	; (1000c27c <virtio_create_virtqueues+0x98>)
1000c202:	e036      	b.n	1000c272 <virtio_create_virtqueues+0x8e>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
1000c204:	2300      	movs	r3, #0
1000c206:	627b      	str	r3, [r7, #36]	; 0x24
1000c208:	e02e      	b.n	1000c268 <virtio_create_virtqueues+0x84>
		vring_info = &vdev->vrings_info[i];
1000c20a:	68fb      	ldr	r3, [r7, #12]
1000c20c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1000c20e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000c210:	4613      	mov	r3, r2
1000c212:	005b      	lsls	r3, r3, #1
1000c214:	4413      	add	r3, r2
1000c216:	00db      	lsls	r3, r3, #3
1000c218:	440b      	add	r3, r1
1000c21a:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
1000c21c:	69fb      	ldr	r3, [r7, #28]
1000c21e:	3304      	adds	r3, #4
1000c220:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
1000c222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c224:	b298      	uxth	r0, r3
1000c226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c228:	009b      	lsls	r3, r3, #2
1000c22a:	683a      	ldr	r2, [r7, #0]
1000c22c:	4413      	add	r3, r2
1000c22e:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
1000c230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c232:	009b      	lsls	r3, r3, #2
1000c234:	6bba      	ldr	r2, [r7, #56]	; 0x38
1000c236:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
1000c238:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
1000c23a:	68fa      	ldr	r2, [r7, #12]
1000c23c:	6a12      	ldr	r2, [r2, #32]
1000c23e:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
1000c240:	69f9      	ldr	r1, [r7, #28]
1000c242:	6809      	ldr	r1, [r1, #0]
1000c244:	9102      	str	r1, [sp, #8]
1000c246:	9201      	str	r2, [sp, #4]
1000c248:	9300      	str	r3, [sp, #0]
1000c24a:	69bb      	ldr	r3, [r7, #24]
1000c24c:	4622      	mov	r2, r4
1000c24e:	4601      	mov	r1, r0
1000c250:	68f8      	ldr	r0, [r7, #12]
1000c252:	f000 f90e 	bl	1000c472 <virtqueue_create>
1000c256:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
1000c258:	697b      	ldr	r3, [r7, #20]
1000c25a:	2b00      	cmp	r3, #0
1000c25c:	d001      	beq.n	1000c262 <virtio_create_virtqueues+0x7e>
			return ret;
1000c25e:	697b      	ldr	r3, [r7, #20]
1000c260:	e007      	b.n	1000c272 <virtio_create_virtqueues+0x8e>
	for (i = 0; i < nvqs; i++) {
1000c262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c264:	3301      	adds	r3, #1
1000c266:	627b      	str	r3, [r7, #36]	; 0x24
1000c268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000c26a:	687b      	ldr	r3, [r7, #4]
1000c26c:	429a      	cmp	r2, r3
1000c26e:	d3cc      	bcc.n	1000c20a <virtio_create_virtqueues+0x26>
	}
	return 0;
1000c270:	2300      	movs	r3, #0
}
1000c272:	4618      	mov	r0, r3
1000c274:	372c      	adds	r7, #44	; 0x2c
1000c276:	46bd      	mov	sp, r7
1000c278:	bd90      	pop	{r4, r7, pc}
1000c27a:	bf00      	nop
1000c27c:	fffff440 	.word	0xfffff440

1000c280 <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
1000c280:	b480      	push	{r7}
1000c282:	b085      	sub	sp, #20
1000c284:	af00      	add	r7, sp, #0
1000c286:	60f8      	str	r0, [r7, #12]
1000c288:	60b9      	str	r1, [r7, #8]
1000c28a:	607a      	str	r2, [r7, #4]
1000c28c:	603b      	str	r3, [r7, #0]
	vr->num = num;
1000c28e:	68fb      	ldr	r3, [r7, #12]
1000c290:	68ba      	ldr	r2, [r7, #8]
1000c292:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
1000c294:	68fb      	ldr	r3, [r7, #12]
1000c296:	687a      	ldr	r2, [r7, #4]
1000c298:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
1000c29a:	68bb      	ldr	r3, [r7, #8]
1000c29c:	011b      	lsls	r3, r3, #4
1000c29e:	687a      	ldr	r2, [r7, #4]
1000c2a0:	441a      	add	r2, r3
1000c2a2:	68fb      	ldr	r3, [r7, #12]
1000c2a4:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
1000c2a6:	68fb      	ldr	r3, [r7, #12]
1000c2a8:	689a      	ldr	r2, [r3, #8]
1000c2aa:	68bb      	ldr	r3, [r7, #8]
1000c2ac:	005b      	lsls	r3, r3, #1
1000c2ae:	4413      	add	r3, r2
1000c2b0:	3304      	adds	r3, #4
1000c2b2:	461a      	mov	r2, r3
1000c2b4:	683b      	ldr	r3, [r7, #0]
1000c2b6:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
1000c2b8:	1c5a      	adds	r2, r3, #1
1000c2ba:	683b      	ldr	r3, [r7, #0]
1000c2bc:	425b      	negs	r3, r3
1000c2be:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
1000c2c0:	461a      	mov	r2, r3
1000c2c2:	68fb      	ldr	r3, [r7, #12]
1000c2c4:	60da      	str	r2, [r3, #12]
}
1000c2c6:	bf00      	nop
1000c2c8:	3714      	adds	r7, #20
1000c2ca:	46bd      	mov	sp, r7
1000c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c2d0:	4770      	bx	lr

1000c2d2 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
1000c2d2:	b480      	push	{r7}
1000c2d4:	b083      	sub	sp, #12
1000c2d6:	af00      	add	r7, sp, #0
1000c2d8:	4603      	mov	r3, r0
1000c2da:	80fb      	strh	r3, [r7, #6]
1000c2dc:	460b      	mov	r3, r1
1000c2de:	80bb      	strh	r3, [r7, #4]
1000c2e0:	4613      	mov	r3, r2
1000c2e2:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
1000c2e4:	88ba      	ldrh	r2, [r7, #4]
1000c2e6:	88fb      	ldrh	r3, [r7, #6]
1000c2e8:	1ad3      	subs	r3, r2, r3
1000c2ea:	b29b      	uxth	r3, r3
1000c2ec:	3b01      	subs	r3, #1
1000c2ee:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
1000c2f0:	88b9      	ldrh	r1, [r7, #4]
1000c2f2:	887b      	ldrh	r3, [r7, #2]
1000c2f4:	1acb      	subs	r3, r1, r3
1000c2f6:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
1000c2f8:	429a      	cmp	r2, r3
1000c2fa:	bf34      	ite	cc
1000c2fc:	2301      	movcc	r3, #1
1000c2fe:	2300      	movcs	r3, #0
1000c300:	b2db      	uxtb	r3, r3
}
1000c302:	4618      	mov	r0, r3
1000c304:	370c      	adds	r7, #12
1000c306:	46bd      	mov	sp, r7
1000c308:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c30c:	4770      	bx	lr

1000c30e <metal_io_virt>:
{
1000c30e:	b480      	push	{r7}
1000c310:	b083      	sub	sp, #12
1000c312:	af00      	add	r7, sp, #0
1000c314:	6078      	str	r0, [r7, #4]
1000c316:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
1000c318:	687b      	ldr	r3, [r7, #4]
1000c31a:	681b      	ldr	r3, [r3, #0]
		: NULL);
1000c31c:	f1b3 3fff 	cmp.w	r3, #4294967295
1000c320:	d00a      	beq.n	1000c338 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
1000c322:	687b      	ldr	r3, [r7, #4]
1000c324:	689b      	ldr	r3, [r3, #8]
1000c326:	683a      	ldr	r2, [r7, #0]
1000c328:	429a      	cmp	r2, r3
1000c32a:	d205      	bcs.n	1000c338 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
1000c32c:	687b      	ldr	r3, [r7, #4]
1000c32e:	681b      	ldr	r3, [r3, #0]
1000c330:	461a      	mov	r2, r3
1000c332:	683b      	ldr	r3, [r7, #0]
1000c334:	4413      	add	r3, r2
		: NULL);
1000c336:	e000      	b.n	1000c33a <metal_io_virt+0x2c>
1000c338:	2300      	movs	r3, #0
}
1000c33a:	4618      	mov	r0, r3
1000c33c:	370c      	adds	r7, #12
1000c33e:	46bd      	mov	sp, r7
1000c340:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c344:	4770      	bx	lr

1000c346 <metal_io_phys>:
{
1000c346:	b580      	push	{r7, lr}
1000c348:	b084      	sub	sp, #16
1000c34a:	af00      	add	r7, sp, #0
1000c34c:	6078      	str	r0, [r7, #4]
1000c34e:	6039      	str	r1, [r7, #0]
	if (!io->ops.offset_to_phys) {
1000c350:	687b      	ldr	r3, [r7, #4]
1000c352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000c354:	2b00      	cmp	r3, #0
1000c356:	d123      	bne.n	1000c3a0 <metal_io_phys+0x5a>
		unsigned long page = (io->page_shift >=
1000c358:	687b      	ldr	r3, [r7, #4]
1000c35a:	68db      	ldr	r3, [r3, #12]
				     0 : offset >> io->page_shift);
1000c35c:	2b1f      	cmp	r3, #31
1000c35e:	d805      	bhi.n	1000c36c <metal_io_phys+0x26>
1000c360:	687b      	ldr	r3, [r7, #4]
1000c362:	68db      	ldr	r3, [r3, #12]
1000c364:	683a      	ldr	r2, [r7, #0]
1000c366:	fa22 f303 	lsr.w	r3, r2, r3
1000c36a:	e000      	b.n	1000c36e <metal_io_phys+0x28>
1000c36c:	2300      	movs	r3, #0
		unsigned long page = (io->page_shift >=
1000c36e:	60fb      	str	r3, [r7, #12]
		return (io->physmap && offset < io->size
1000c370:	687b      	ldr	r3, [r7, #4]
1000c372:	685b      	ldr	r3, [r3, #4]
			: METAL_BAD_PHYS);
1000c374:	2b00      	cmp	r3, #0
1000c376:	d010      	beq.n	1000c39a <metal_io_phys+0x54>
		return (io->physmap && offset < io->size
1000c378:	687b      	ldr	r3, [r7, #4]
1000c37a:	689b      	ldr	r3, [r3, #8]
1000c37c:	683a      	ldr	r2, [r7, #0]
1000c37e:	429a      	cmp	r2, r3
1000c380:	d20b      	bcs.n	1000c39a <metal_io_phys+0x54>
			? io->physmap[page] + (offset & io->page_mask)
1000c382:	687b      	ldr	r3, [r7, #4]
1000c384:	685a      	ldr	r2, [r3, #4]
1000c386:	68fb      	ldr	r3, [r7, #12]
1000c388:	009b      	lsls	r3, r3, #2
1000c38a:	4413      	add	r3, r2
1000c38c:	681a      	ldr	r2, [r3, #0]
1000c38e:	687b      	ldr	r3, [r7, #4]
1000c390:	6919      	ldr	r1, [r3, #16]
1000c392:	683b      	ldr	r3, [r7, #0]
1000c394:	400b      	ands	r3, r1
			: METAL_BAD_PHYS);
1000c396:	4413      	add	r3, r2
1000c398:	e008      	b.n	1000c3ac <metal_io_phys+0x66>
1000c39a:	f04f 33ff 	mov.w	r3, #4294967295
1000c39e:	e005      	b.n	1000c3ac <metal_io_phys+0x66>
	return io->ops.offset_to_phys(io, offset);
1000c3a0:	687b      	ldr	r3, [r7, #4]
1000c3a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000c3a4:	6839      	ldr	r1, [r7, #0]
1000c3a6:	6878      	ldr	r0, [r7, #4]
1000c3a8:	4798      	blx	r3
1000c3aa:	4603      	mov	r3, r0
}
1000c3ac:	4618      	mov	r0, r3
1000c3ae:	3710      	adds	r7, #16
1000c3b0:	46bd      	mov	sp, r7
1000c3b2:	bd80      	pop	{r7, pc}

1000c3b4 <metal_io_phys_to_offset>:
{
1000c3b4:	b580      	push	{r7, lr}
1000c3b6:	b084      	sub	sp, #16
1000c3b8:	af00      	add	r7, sp, #0
1000c3ba:	6078      	str	r0, [r7, #4]
1000c3bc:	6039      	str	r1, [r7, #0]
	if (!io->ops.phys_to_offset) {
1000c3be:	687b      	ldr	r3, [r7, #4]
1000c3c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000c3c2:	2b00      	cmp	r3, #0
1000c3c4:	d127      	bne.n	1000c416 <metal_io_phys_to_offset+0x62>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
1000c3c6:	687b      	ldr	r3, [r7, #4]
1000c3c8:	691b      	ldr	r3, [r3, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
1000c3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
1000c3ce:	d105      	bne.n	1000c3dc <metal_io_phys_to_offset+0x28>
1000c3d0:	687b      	ldr	r3, [r7, #4]
1000c3d2:	685b      	ldr	r3, [r3, #4]
1000c3d4:	681b      	ldr	r3, [r3, #0]
1000c3d6:	683a      	ldr	r2, [r7, #0]
1000c3d8:	1ad3      	subs	r3, r2, r3
1000c3da:	e003      	b.n	1000c3e4 <metal_io_phys_to_offset+0x30>
1000c3dc:	687b      	ldr	r3, [r7, #4]
1000c3de:	691a      	ldr	r2, [r3, #16]
1000c3e0:	683b      	ldr	r3, [r7, #0]
1000c3e2:	4013      	ands	r3, r2
		unsigned long offset =
1000c3e4:	60fb      	str	r3, [r7, #12]
			if (metal_io_phys(io, offset) == phys)
1000c3e6:	68f9      	ldr	r1, [r7, #12]
1000c3e8:	6878      	ldr	r0, [r7, #4]
1000c3ea:	f7ff ffac 	bl	1000c346 <metal_io_phys>
1000c3ee:	4602      	mov	r2, r0
1000c3f0:	683b      	ldr	r3, [r7, #0]
1000c3f2:	4293      	cmp	r3, r2
1000c3f4:	d101      	bne.n	1000c3fa <metal_io_phys_to_offset+0x46>
				return offset;
1000c3f6:	68fb      	ldr	r3, [r7, #12]
1000c3f8:	e013      	b.n	1000c422 <metal_io_phys_to_offset+0x6e>
			offset += io->page_mask + 1;
1000c3fa:	687b      	ldr	r3, [r7, #4]
1000c3fc:	691a      	ldr	r2, [r3, #16]
1000c3fe:	68fb      	ldr	r3, [r7, #12]
1000c400:	4413      	add	r3, r2
1000c402:	3301      	adds	r3, #1
1000c404:	60fb      	str	r3, [r7, #12]
		} while (offset < io->size);
1000c406:	687b      	ldr	r3, [r7, #4]
1000c408:	689b      	ldr	r3, [r3, #8]
1000c40a:	68fa      	ldr	r2, [r7, #12]
1000c40c:	429a      	cmp	r2, r3
1000c40e:	d3ea      	bcc.n	1000c3e6 <metal_io_phys_to_offset+0x32>
		return METAL_BAD_OFFSET;
1000c410:	f04f 33ff 	mov.w	r3, #4294967295
1000c414:	e005      	b.n	1000c422 <metal_io_phys_to_offset+0x6e>
	return (*io->ops.phys_to_offset)(io, phys);
1000c416:	687b      	ldr	r3, [r7, #4]
1000c418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000c41a:	6839      	ldr	r1, [r7, #0]
1000c41c:	6878      	ldr	r0, [r7, #4]
1000c41e:	4798      	blx	r3
1000c420:	4603      	mov	r3, r0
}
1000c422:	4618      	mov	r0, r3
1000c424:	3710      	adds	r7, #16
1000c426:	46bd      	mov	sp, r7
1000c428:	bd80      	pop	{r7, pc}

1000c42a <metal_io_phys_to_virt>:
{
1000c42a:	b580      	push	{r7, lr}
1000c42c:	b082      	sub	sp, #8
1000c42e:	af00      	add	r7, sp, #0
1000c430:	6078      	str	r0, [r7, #4]
1000c432:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
1000c434:	6839      	ldr	r1, [r7, #0]
1000c436:	6878      	ldr	r0, [r7, #4]
1000c438:	f7ff ffbc 	bl	1000c3b4 <metal_io_phys_to_offset>
1000c43c:	4603      	mov	r3, r0
1000c43e:	4619      	mov	r1, r3
1000c440:	6878      	ldr	r0, [r7, #4]
1000c442:	f7ff ff64 	bl	1000c30e <metal_io_virt>
1000c446:	4603      	mov	r3, r0
}
1000c448:	4618      	mov	r0, r3
1000c44a:	3708      	adds	r7, #8
1000c44c:	46bd      	mov	sp, r7
1000c44e:	bd80      	pop	{r7, pc}

1000c450 <virtqueue_phys_to_virt>:
#endif /* VIRTIO_CACHED_VRINGS */

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
1000c450:	b580      	push	{r7, lr}
1000c452:	b084      	sub	sp, #16
1000c454:	af00      	add	r7, sp, #0
1000c456:	6078      	str	r0, [r7, #4]
1000c458:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
1000c45a:	687b      	ldr	r3, [r7, #4]
1000c45c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000c45e:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
1000c460:	6839      	ldr	r1, [r7, #0]
1000c462:	68f8      	ldr	r0, [r7, #12]
1000c464:	f7ff ffe1 	bl	1000c42a <metal_io_phys_to_virt>
1000c468:	4603      	mov	r3, r0
}
1000c46a:	4618      	mov	r0, r3
1000c46c:	3710      	adds	r7, #16
1000c46e:	46bd      	mov	sp, r7
1000c470:	bd80      	pop	{r7, pc}

1000c472 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
1000c472:	b580      	push	{r7, lr}
1000c474:	b086      	sub	sp, #24
1000c476:	af00      	add	r7, sp, #0
1000c478:	60f8      	str	r0, [r7, #12]
1000c47a:	607a      	str	r2, [r7, #4]
1000c47c:	603b      	str	r3, [r7, #0]
1000c47e:	460b      	mov	r3, r1
1000c480:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
1000c482:	2300      	movs	r3, #0
1000c484:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
1000c486:	697b      	ldr	r3, [r7, #20]
1000c488:	2b00      	cmp	r3, #0
1000c48a:	d11e      	bne.n	1000c4ca <virtqueue_create+0x58>
		vq->vq_dev = virt_dev;
1000c48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c48e:	68fa      	ldr	r2, [r7, #12]
1000c490:	601a      	str	r2, [r3, #0]
		vq->vq_name = name;
1000c492:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c494:	687a      	ldr	r2, [r7, #4]
1000c496:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
1000c498:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c49a:	897a      	ldrh	r2, [r7, #10]
1000c49c:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
1000c49e:	683b      	ldr	r3, [r7, #0]
1000c4a0:	891a      	ldrh	r2, [r3, #8]
1000c4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c4a4:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
1000c4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c4a8:	895a      	ldrh	r2, [r3, #10]
1000c4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c4ac:	849a      	strh	r2, [r3, #36]	; 0x24
		vq->callback = callback;
1000c4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c4b0:	6a3a      	ldr	r2, [r7, #32]
1000c4b2:	60da      	str	r2, [r3, #12]
		vq->notify = notify;
1000c4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c4b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000c4b8:	611a      	str	r2, [r3, #16]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, ring->vaddr, ring->align);
1000c4ba:	683b      	ldr	r3, [r7, #0]
1000c4bc:	6819      	ldr	r1, [r3, #0]
1000c4be:	683b      	ldr	r3, [r7, #0]
1000c4c0:	685b      	ldr	r3, [r3, #4]
1000c4c2:	461a      	mov	r2, r3
1000c4c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1000c4c6:	f000 f8ef 	bl	1000c6a8 <vq_ring_init>
	/*
	 * CACHE: nothing to be done here. Only desc.next is setup at this
	 * stage but that is only written by master, so no need to flush it.
	 */

	return status;
1000c4ca:	697b      	ldr	r3, [r7, #20]
}
1000c4cc:	4618      	mov	r0, r3
1000c4ce:	3718      	adds	r7, #24
1000c4d0:	46bd      	mov	sp, r7
1000c4d2:	bd80      	pop	{r7, pc}

1000c4d4 <virtqueue_get_buffer_length>:

	return cookie;
}

uint32_t virtqueue_get_buffer_length(struct virtqueue *vq, uint16_t idx)
{
1000c4d4:	b480      	push	{r7}
1000c4d6:	b083      	sub	sp, #12
1000c4d8:	af00      	add	r7, sp, #0
1000c4da:	6078      	str	r0, [r7, #4]
1000c4dc:	460b      	mov	r3, r1
1000c4de:	807b      	strh	r3, [r7, #2]
	VRING_INVALIDATE(vq->vq_ring.desc[idx].len);
	return vq->vq_ring.desc[idx].len;
1000c4e0:	687b      	ldr	r3, [r7, #4]
1000c4e2:	699a      	ldr	r2, [r3, #24]
1000c4e4:	887b      	ldrh	r3, [r7, #2]
1000c4e6:	011b      	lsls	r3, r3, #4
1000c4e8:	4413      	add	r3, r2
1000c4ea:	689b      	ldr	r3, [r3, #8]
}
1000c4ec:	4618      	mov	r0, r3
1000c4ee:	370c      	adds	r7, #12
1000c4f0:	46bd      	mov	sp, r7
1000c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c4f6:	4770      	bx	lr

1000c4f8 <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
1000c4f8:	b580      	push	{r7, lr}
1000c4fa:	b086      	sub	sp, #24
1000c4fc:	af00      	add	r7, sp, #0
1000c4fe:	60f8      	str	r0, [r7, #12]
1000c500:	60b9      	str	r1, [r7, #8]
1000c502:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
1000c504:	2300      	movs	r3, #0
1000c506:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
1000c508:	f3bf 8f5b 	dmb	ish

	/* Avail.idx is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->idx);
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
1000c50c:	68fb      	ldr	r3, [r7, #12]
1000c50e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
1000c510:	68fb      	ldr	r3, [r7, #12]
1000c512:	69db      	ldr	r3, [r3, #28]
1000c514:	885b      	ldrh	r3, [r3, #2]
1000c516:	b29b      	uxth	r3, r3
1000c518:	429a      	cmp	r2, r3
1000c51a:	d101      	bne.n	1000c520 <virtqueue_get_available_buffer+0x28>
		return NULL;
1000c51c:	2300      	movs	r3, #0
1000c51e:	e02f      	b.n	1000c580 <virtqueue_get_available_buffer+0x88>
	VQUEUE_BUSY(vq);

	/* Avail.ring is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->ring[head_idx]);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
1000c520:	68fb      	ldr	r3, [r7, #12]
1000c522:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
1000c524:	1c5a      	adds	r2, r3, #1
1000c526:	b291      	uxth	r1, r2
1000c528:	68fa      	ldr	r2, [r7, #12]
1000c52a:	8611      	strh	r1, [r2, #48]	; 0x30
1000c52c:	b21a      	sxth	r2, r3
1000c52e:	68fb      	ldr	r3, [r7, #12]
1000c530:	895b      	ldrh	r3, [r3, #10]
1000c532:	3b01      	subs	r3, #1
1000c534:	b29b      	uxth	r3, r3
1000c536:	b21b      	sxth	r3, r3
1000c538:	4013      	ands	r3, r2
1000c53a:	b21b      	sxth	r3, r3
1000c53c:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
1000c53e:	68fb      	ldr	r3, [r7, #12]
1000c540:	69da      	ldr	r2, [r3, #28]
1000c542:	8afb      	ldrh	r3, [r7, #22]
1000c544:	005b      	lsls	r3, r3, #1
1000c546:	4413      	add	r3, r2
1000c548:	889b      	ldrh	r3, [r3, #4]
1000c54a:	b29a      	uxth	r2, r3
1000c54c:	68bb      	ldr	r3, [r7, #8]
1000c54e:	801a      	strh	r2, [r3, #0]

	/* Invalidate the desc entry written by master before accessing it */
	VRING_INVALIDATE(vq->vq_ring.desc[*avail_idx]);
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
1000c550:	68fb      	ldr	r3, [r7, #12]
1000c552:	699a      	ldr	r2, [r3, #24]
1000c554:	68bb      	ldr	r3, [r7, #8]
1000c556:	881b      	ldrh	r3, [r3, #0]
1000c558:	011b      	lsls	r3, r3, #4
1000c55a:	18d1      	adds	r1, r2, r3
1000c55c:	680a      	ldr	r2, [r1, #0]
1000c55e:	684b      	ldr	r3, [r1, #4]
1000c560:	4613      	mov	r3, r2
1000c562:	4619      	mov	r1, r3
1000c564:	68f8      	ldr	r0, [r7, #12]
1000c566:	f7ff ff73 	bl	1000c450 <virtqueue_phys_to_virt>
1000c56a:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
1000c56c:	68fb      	ldr	r3, [r7, #12]
1000c56e:	699a      	ldr	r2, [r3, #24]
1000c570:	68bb      	ldr	r3, [r7, #8]
1000c572:	881b      	ldrh	r3, [r3, #0]
1000c574:	011b      	lsls	r3, r3, #4
1000c576:	4413      	add	r3, r2
1000c578:	689a      	ldr	r2, [r3, #8]
1000c57a:	687b      	ldr	r3, [r7, #4]
1000c57c:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
1000c57e:	693b      	ldr	r3, [r7, #16]
}
1000c580:	4618      	mov	r0, r3
1000c582:	3718      	adds	r7, #24
1000c584:	46bd      	mov	sp, r7
1000c586:	bd80      	pop	{r7, pc}

1000c588 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
1000c588:	b480      	push	{r7}
1000c58a:	b087      	sub	sp, #28
1000c58c:	af00      	add	r7, sp, #0
1000c58e:	60f8      	str	r0, [r7, #12]
1000c590:	460b      	mov	r3, r1
1000c592:	607a      	str	r2, [r7, #4]
1000c594:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
1000c596:	2300      	movs	r3, #0
1000c598:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
1000c59a:	68fb      	ldr	r3, [r7, #12]
1000c59c:	895b      	ldrh	r3, [r3, #10]
1000c59e:	897a      	ldrh	r2, [r7, #10]
1000c5a0:	429a      	cmp	r2, r3
1000c5a2:	d901      	bls.n	1000c5a8 <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
1000c5a4:	4b18      	ldr	r3, [pc, #96]	; (1000c608 <virtqueue_add_consumed_buffer+0x80>)
1000c5a6:	e029      	b.n	1000c5fc <virtqueue_add_consumed_buffer+0x74>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by master, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
1000c5a8:	68fb      	ldr	r3, [r7, #12]
1000c5aa:	6a1b      	ldr	r3, [r3, #32]
1000c5ac:	885b      	ldrh	r3, [r3, #2]
1000c5ae:	b29b      	uxth	r3, r3
1000c5b0:	b21a      	sxth	r2, r3
1000c5b2:	68fb      	ldr	r3, [r7, #12]
1000c5b4:	895b      	ldrh	r3, [r3, #10]
1000c5b6:	3b01      	subs	r3, #1
1000c5b8:	b29b      	uxth	r3, r3
1000c5ba:	b21b      	sxth	r3, r3
1000c5bc:	4013      	ands	r3, r2
1000c5be:	b21b      	sxth	r3, r3
1000c5c0:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
1000c5c2:	68fb      	ldr	r3, [r7, #12]
1000c5c4:	6a1a      	ldr	r2, [r3, #32]
1000c5c6:	8a7b      	ldrh	r3, [r7, #18]
1000c5c8:	00db      	lsls	r3, r3, #3
1000c5ca:	4413      	add	r3, r2
1000c5cc:	3304      	adds	r3, #4
1000c5ce:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
1000c5d0:	897a      	ldrh	r2, [r7, #10]
1000c5d2:	697b      	ldr	r3, [r7, #20]
1000c5d4:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
1000c5d6:	697b      	ldr	r3, [r7, #20]
1000c5d8:	687a      	ldr	r2, [r7, #4]
1000c5da:	605a      	str	r2, [r3, #4]

	/* We still need to flush it because this is read by master */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
1000c5dc:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
1000c5e0:	68fb      	ldr	r3, [r7, #12]
1000c5e2:	6a1b      	ldr	r3, [r3, #32]
1000c5e4:	885a      	ldrh	r2, [r3, #2]
1000c5e6:	b292      	uxth	r2, r2
1000c5e8:	3201      	adds	r2, #1
1000c5ea:	b292      	uxth	r2, r2
1000c5ec:	805a      	strh	r2, [r3, #2]

	/* Used.idx is read by master, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
1000c5ee:	68fb      	ldr	r3, [r7, #12]
1000c5f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
1000c5f2:	3301      	adds	r3, #1
1000c5f4:	b29a      	uxth	r2, r3
1000c5f6:	68fb      	ldr	r3, [r7, #12]
1000c5f8:	84da      	strh	r2, [r3, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
1000c5fa:	2300      	movs	r3, #0
}
1000c5fc:	4618      	mov	r0, r3
1000c5fe:	371c      	adds	r7, #28
1000c600:	46bd      	mov	sp, r7
1000c602:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c606:	4770      	bx	lr
1000c608:	fffff441 	.word	0xfffff441

1000c60c <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
1000c60c:	b480      	push	{r7}
1000c60e:	b083      	sub	sp, #12
1000c610:	af00      	add	r7, sp, #0
1000c612:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
1000c614:	6879      	ldr	r1, [r7, #4]
1000c616:	6809      	ldr	r1, [r1, #0]
1000c618:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
1000c61c:	f000 5200 	and.w	r2, r0, #536870912	; 0x20000000
1000c620:	2300      	movs	r3, #0
1000c622:	4313      	orrs	r3, r2
1000c624:	d015      	beq.n	1000c652 <virtqueue_disable_cb+0x46>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
			VRING_FLUSH(vring_used_event(&vq->vq_ring));
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000c626:	687b      	ldr	r3, [r7, #4]
1000c628:	681b      	ldr	r3, [r3, #0]
1000c62a:	699b      	ldr	r3, [r3, #24]
1000c62c:	2b01      	cmp	r3, #1
1000c62e:	d11f      	bne.n	1000c670 <virtqueue_disable_cb+0x64>
			vring_avail_event(&vq->vq_ring) =
			    vq->vq_available_idx - vq->vq_nentries - 1;
1000c630:	687b      	ldr	r3, [r7, #4]
1000c632:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
1000c634:	687b      	ldr	r3, [r7, #4]
1000c636:	895b      	ldrh	r3, [r3, #10]
1000c638:	1ad3      	subs	r3, r2, r3
1000c63a:	b299      	uxth	r1, r3
			vring_avail_event(&vq->vq_ring) =
1000c63c:	687b      	ldr	r3, [r7, #4]
1000c63e:	6a1a      	ldr	r2, [r3, #32]
1000c640:	687b      	ldr	r3, [r7, #4]
1000c642:	695b      	ldr	r3, [r3, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
1000c644:	3901      	subs	r1, #1
1000c646:	b289      	uxth	r1, r1
			vring_avail_event(&vq->vq_ring) =
1000c648:	00db      	lsls	r3, r3, #3
1000c64a:	4413      	add	r3, r2
1000c64c:	460a      	mov	r2, r1
1000c64e:	809a      	strh	r2, [r3, #4]
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	VQUEUE_IDLE(vq);
}
1000c650:	e00e      	b.n	1000c670 <virtqueue_disable_cb+0x64>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000c652:	687b      	ldr	r3, [r7, #4]
1000c654:	681b      	ldr	r3, [r3, #0]
1000c656:	699b      	ldr	r3, [r3, #24]
1000c658:	2b01      	cmp	r3, #1
1000c65a:	d109      	bne.n	1000c670 <virtqueue_disable_cb+0x64>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
1000c65c:	687b      	ldr	r3, [r7, #4]
1000c65e:	6a1b      	ldr	r3, [r3, #32]
1000c660:	881b      	ldrh	r3, [r3, #0]
1000c662:	b29a      	uxth	r2, r3
1000c664:	687b      	ldr	r3, [r7, #4]
1000c666:	6a1b      	ldr	r3, [r3, #32]
1000c668:	f042 0201 	orr.w	r2, r2, #1
1000c66c:	b292      	uxth	r2, r2
1000c66e:	801a      	strh	r2, [r3, #0]
}
1000c670:	bf00      	nop
1000c672:	370c      	adds	r7, #12
1000c674:	46bd      	mov	sp, r7
1000c676:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c67a:	4770      	bx	lr

1000c67c <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
1000c67c:	b580      	push	{r7, lr}
1000c67e:	b082      	sub	sp, #8
1000c680:	af00      	add	r7, sp, #0
1000c682:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
1000c684:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify(vq))
1000c688:	6878      	ldr	r0, [r7, #4]
1000c68a:	f000 f823 	bl	1000c6d4 <vq_ring_must_notify>
1000c68e:	4603      	mov	r3, r0
1000c690:	2b00      	cmp	r3, #0
1000c692:	d002      	beq.n	1000c69a <virtqueue_kick+0x1e>
		vq_ring_notify(vq);
1000c694:	6878      	ldr	r0, [r7, #4]
1000c696:	f000 f86b 	bl	1000c770 <vq_ring_notify>

	vq->vq_queued_cnt = 0;
1000c69a:	687b      	ldr	r3, [r7, #4]
1000c69c:	2200      	movs	r2, #0
1000c69e:	84da      	strh	r2, [r3, #38]	; 0x26

	VQUEUE_IDLE(vq);
}
1000c6a0:	bf00      	nop
1000c6a2:	3708      	adds	r7, #8
1000c6a4:	46bd      	mov	sp, r7
1000c6a6:	bd80      	pop	{r7, pc}

1000c6a8 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
1000c6a8:	b580      	push	{r7, lr}
1000c6aa:	b086      	sub	sp, #24
1000c6ac:	af00      	add	r7, sp, #0
1000c6ae:	60f8      	str	r0, [r7, #12]
1000c6b0:	60b9      	str	r1, [r7, #8]
1000c6b2:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int size;

	size = vq->vq_nentries;
1000c6b4:	68fb      	ldr	r3, [r7, #12]
1000c6b6:	895b      	ldrh	r3, [r3, #10]
1000c6b8:	617b      	str	r3, [r7, #20]
	vr = &vq->vq_ring;
1000c6ba:	68fb      	ldr	r3, [r7, #12]
1000c6bc:	3314      	adds	r3, #20
1000c6be:	613b      	str	r3, [r7, #16]

	vring_init(vr, size, ring_mem, alignment);
1000c6c0:	6979      	ldr	r1, [r7, #20]
1000c6c2:	687b      	ldr	r3, [r7, #4]
1000c6c4:	68ba      	ldr	r2, [r7, #8]
1000c6c6:	6938      	ldr	r0, [r7, #16]
1000c6c8:	f7ff fdda 	bl	1000c280 <vring_init>
		for (i = 0; i < size - 1; i++)
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
	}
#endif /*VIRTIO_SLAVE_ONLY*/
}
1000c6cc:	bf00      	nop
1000c6ce:	3718      	adds	r7, #24
1000c6d0:	46bd      	mov	sp, r7
1000c6d2:	bd80      	pop	{r7, pc}

1000c6d4 <vq_ring_must_notify>:
 *
 * vq_ring_must_notify
 *
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
1000c6d4:	b580      	push	{r7, lr}
1000c6d6:	b084      	sub	sp, #16
1000c6d8:	af00      	add	r7, sp, #0
1000c6da:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
1000c6dc:	6879      	ldr	r1, [r7, #4]
1000c6de:	6809      	ldr	r1, [r1, #0]
1000c6e0:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
1000c6e4:	f000 5200 	and.w	r2, r0, #536870912	; 0x20000000
1000c6e8:	2300      	movs	r3, #0
1000c6ea:	4313      	orrs	r3, r2
1000c6ec:	d02a      	beq.n	1000c744 <vq_ring_must_notify+0x70>
			return vring_need_event(event_idx, new_idx,
						prev_idx) != 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000c6ee:	687b      	ldr	r3, [r7, #4]
1000c6f0:	681b      	ldr	r3, [r3, #0]
1000c6f2:	699b      	ldr	r3, [r3, #24]
1000c6f4:	2b01      	cmp	r3, #1
1000c6f6:	d136      	bne.n	1000c766 <vq_ring_must_notify+0x92>
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
1000c6f8:	687b      	ldr	r3, [r7, #4]
1000c6fa:	6a1b      	ldr	r3, [r3, #32]
1000c6fc:	789a      	ldrb	r2, [r3, #2]
1000c6fe:	78db      	ldrb	r3, [r3, #3]
1000c700:	021b      	lsls	r3, r3, #8
1000c702:	4313      	orrs	r3, r2
1000c704:	81fb      	strh	r3, [r7, #14]
			prev_idx = new_idx - vq->vq_queued_cnt;
1000c706:	687b      	ldr	r3, [r7, #4]
1000c708:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
1000c70a:	89fa      	ldrh	r2, [r7, #14]
1000c70c:	1ad3      	subs	r3, r2, r3
1000c70e:	81bb      	strh	r3, [r7, #12]
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
1000c710:	687b      	ldr	r3, [r7, #4]
1000c712:	69da      	ldr	r2, [r3, #28]
1000c714:	687b      	ldr	r3, [r7, #4]
1000c716:	6959      	ldr	r1, [r3, #20]
1000c718:	004b      	lsls	r3, r1, #1
1000c71a:	4413      	add	r3, r2
1000c71c:	7918      	ldrb	r0, [r3, #4]
1000c71e:	004b      	lsls	r3, r1, #1
1000c720:	4413      	add	r3, r2
1000c722:	795b      	ldrb	r3, [r3, #5]
1000c724:	021b      	lsls	r3, r3, #8
1000c726:	4303      	orrs	r3, r0
1000c728:	817b      	strh	r3, [r7, #10]
			return vring_need_event(event_idx, new_idx,
1000c72a:	89ba      	ldrh	r2, [r7, #12]
1000c72c:	89f9      	ldrh	r1, [r7, #14]
1000c72e:	897b      	ldrh	r3, [r7, #10]
1000c730:	4618      	mov	r0, r3
1000c732:	f7ff fdce 	bl	1000c2d2 <vring_need_event>
1000c736:	4603      	mov	r3, r0
						prev_idx) != 0;
1000c738:	2b00      	cmp	r3, #0
1000c73a:	bf14      	ite	ne
1000c73c:	2301      	movne	r3, #1
1000c73e:	2300      	moveq	r3, #0
1000c740:	b2db      	uxtb	r3, r3
1000c742:	e011      	b.n	1000c768 <vq_ring_must_notify+0x94>
			return (vq->vq_ring.used->flags &
				VRING_USED_F_NO_NOTIFY) == 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000c744:	687b      	ldr	r3, [r7, #4]
1000c746:	681b      	ldr	r3, [r3, #0]
1000c748:	699b      	ldr	r3, [r3, #24]
1000c74a:	2b01      	cmp	r3, #1
1000c74c:	d10b      	bne.n	1000c766 <vq_ring_must_notify+0x92>
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
1000c74e:	687b      	ldr	r3, [r7, #4]
1000c750:	69db      	ldr	r3, [r3, #28]
1000c752:	881b      	ldrh	r3, [r3, #0]
1000c754:	b29b      	uxth	r3, r3
1000c756:	f003 0301 	and.w	r3, r3, #1
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
1000c75a:	2b00      	cmp	r3, #0
1000c75c:	bf0c      	ite	eq
1000c75e:	2301      	moveq	r3, #1
1000c760:	2300      	movne	r3, #0
1000c762:	b2db      	uxtb	r3, r3
1000c764:	e000      	b.n	1000c768 <vq_ring_must_notify+0x94>
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	return 0;
1000c766:	2300      	movs	r3, #0
}
1000c768:	4618      	mov	r0, r3
1000c76a:	3710      	adds	r7, #16
1000c76c:	46bd      	mov	sp, r7
1000c76e:	bd80      	pop	{r7, pc}

1000c770 <vq_ring_notify>:
 *
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
1000c770:	b580      	push	{r7, lr}
1000c772:	b082      	sub	sp, #8
1000c774:	af00      	add	r7, sp, #0
1000c776:	6078      	str	r0, [r7, #4]
	if (vq->notify)
1000c778:	687b      	ldr	r3, [r7, #4]
1000c77a:	691b      	ldr	r3, [r3, #16]
1000c77c:	2b00      	cmp	r3, #0
1000c77e:	d003      	beq.n	1000c788 <vq_ring_notify+0x18>
		vq->notify(vq);
1000c780:	687b      	ldr	r3, [r7, #4]
1000c782:	691b      	ldr	r3, [r3, #16]
1000c784:	6878      	ldr	r0, [r7, #4]
1000c786:	4798      	blx	r3
}
1000c788:	bf00      	nop
1000c78a:	3708      	adds	r7, #8
1000c78c:	46bd      	mov	sp, r7
1000c78e:	bd80      	pop	{r7, pc}

1000c790 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
1000c790:	b580      	push	{r7, lr}
1000c792:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN PRE_MAILBOX_INIT */

   /* USER CODE END  PRE_MAILBOX_INIT */

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_1, IPCC_CHANNEL_DIR_RX,
1000c794:	4b0d      	ldr	r3, [pc, #52]	; (1000c7cc <MAILBOX_Init+0x3c>)
1000c796:	2201      	movs	r2, #1
1000c798:	2100      	movs	r1, #0
1000c79a:	480d      	ldr	r0, [pc, #52]	; (1000c7d0 <MAILBOX_Init+0x40>)
1000c79c:	f7f6 ff24 	bl	100035e8 <HAL_IPCC_ActivateNotification>
1000c7a0:	4603      	mov	r3, r0
1000c7a2:	2b00      	cmp	r3, #0
1000c7a4:	d002      	beq.n	1000c7ac <MAILBOX_Init+0x1c>
          IPCC_channel1_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_1 RX fail\n", __func__);
    return -1;
1000c7a6:	f04f 33ff 	mov.w	r3, #4294967295
1000c7aa:	e00c      	b.n	1000c7c6 <MAILBOX_Init+0x36>
  }

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_2, IPCC_CHANNEL_DIR_RX,
1000c7ac:	4b09      	ldr	r3, [pc, #36]	; (1000c7d4 <MAILBOX_Init+0x44>)
1000c7ae:	2201      	movs	r2, #1
1000c7b0:	2101      	movs	r1, #1
1000c7b2:	4807      	ldr	r0, [pc, #28]	; (1000c7d0 <MAILBOX_Init+0x40>)
1000c7b4:	f7f6 ff18 	bl	100035e8 <HAL_IPCC_ActivateNotification>
1000c7b8:	4603      	mov	r3, r0
1000c7ba:	2b00      	cmp	r3, #0
1000c7bc:	d002      	beq.n	1000c7c4 <MAILBOX_Init+0x34>
          IPCC_channel2_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_2 RX fail\n", __func__);
    return -1;
1000c7be:	f04f 33ff 	mov.w	r3, #4294967295
1000c7c2:	e000      	b.n	1000c7c6 <MAILBOX_Init+0x36>
  }

  /* USER CODE BEGIN POST_MAILBOX_INIT */

  /* USER CODE END  POST_MAILBOX_INIT */
  return 0;
1000c7c4:	2300      	movs	r3, #0
}
1000c7c6:	4618      	mov	r0, r3
1000c7c8:	bd80      	pop	{r7, pc}
1000c7ca:	bf00      	nop
1000c7cc:	1000c83d 	.word	0x1000c83d
1000c7d0:	10020e70 	.word	0x10020e70
1000c7d4:	1000c869 	.word	0x1000c869

1000c7d8 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
1000c7d8:	b580      	push	{r7, lr}
1000c7da:	b084      	sub	sp, #16
1000c7dc:	af00      	add	r7, sp, #0
1000c7de:	6078      	str	r0, [r7, #4]
1000c7e0:	6039      	str	r1, [r7, #0]
   /* USER CODE BEGIN PRE_MAILBOX_NOTIFY */

   /* USER CODE END  PRE_MAILBOX_NOTIFY */

  /* Called after virtqueue processing: time to inform the remote */
  if (id == VRING0_ID) {
1000c7e2:	683b      	ldr	r3, [r7, #0]
1000c7e4:	2b00      	cmp	r3, #0
1000c7e6:	d102      	bne.n	1000c7ee <MAILBOX_Notify+0x16>
    channel = IPCC_CHANNEL_1;
1000c7e8:	2300      	movs	r3, #0
1000c7ea:	60fb      	str	r3, [r7, #12]
1000c7ec:	e008      	b.n	1000c800 <MAILBOX_Notify+0x28>
    OPENAMP_log_dbg("Send msg on ch_1\r\n");
  }
  else if (id == VRING1_ID) {
1000c7ee:	683b      	ldr	r3, [r7, #0]
1000c7f0:	2b01      	cmp	r3, #1
1000c7f2:	d102      	bne.n	1000c7fa <MAILBOX_Notify+0x22>
    /* Note: the OpenAMP framework never notifies this */
    channel = IPCC_CHANNEL_2;
1000c7f4:	2301      	movs	r3, #1
1000c7f6:	60fb      	str	r3, [r7, #12]
1000c7f8:	e002      	b.n	1000c800 <MAILBOX_Notify+0x28>
    OPENAMP_log_dbg("Send 'buff free' on ch_2\r\n");
  }
  else {
    OPENAMP_log_err("invalid vring (%d)\r\n", (int)id);
    return -1;
1000c7fa:	f04f 33ff 	mov.w	r3, #4294967295
1000c7fe:	e016      	b.n	1000c82e <MAILBOX_Notify+0x56>
  }

  /* Check that the channel is free (otherwise wait until it is) */
  if (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED) {
1000c800:	2200      	movs	r2, #0
1000c802:	68f9      	ldr	r1, [r7, #12]
1000c804:	480c      	ldr	r0, [pc, #48]	; (1000c838 <MAILBOX_Notify+0x60>)
1000c806:	f7f6 ff3d 	bl	10003684 <HAL_IPCC_GetChannelStatus>
1000c80a:	4603      	mov	r3, r0
1000c80c:	2b01      	cmp	r3, #1
1000c80e:	d108      	bne.n	1000c822 <MAILBOX_Notify+0x4a>
    OPENAMP_log_dbg("Waiting for channel to be freed\r\n");
    while (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED)
1000c810:	bf00      	nop
1000c812:	2200      	movs	r2, #0
1000c814:	68f9      	ldr	r1, [r7, #12]
1000c816:	4808      	ldr	r0, [pc, #32]	; (1000c838 <MAILBOX_Notify+0x60>)
1000c818:	f7f6 ff34 	bl	10003684 <HAL_IPCC_GetChannelStatus>
1000c81c:	4603      	mov	r3, r0
1000c81e:	2b01      	cmp	r3, #1
1000c820:	d0f7      	beq.n	1000c812 <MAILBOX_Notify+0x3a>
      ;
  }

  /* Inform A7 (either new message, or buf free) */
  HAL_IPCC_NotifyCPU(&hipcc, channel, IPCC_CHANNEL_DIR_TX);
1000c822:	2200      	movs	r2, #0
1000c824:	68f9      	ldr	r1, [r7, #12]
1000c826:	4804      	ldr	r0, [pc, #16]	; (1000c838 <MAILBOX_Notify+0x60>)
1000c828:	f7f6 ff60 	bl	100036ec <HAL_IPCC_NotifyCPU>

 /* USER CODE BEGIN POST_MAILBOX_NOTIFY */

 /* USER CODE END  POST_MAILBOX_NOTIFY */

  return 0;
1000c82c:	2300      	movs	r3, #0
}
1000c82e:	4618      	mov	r0, r3
1000c830:	3710      	adds	r7, #16
1000c832:	46bd      	mov	sp, r7
1000c834:	bd80      	pop	{r7, pc}
1000c836:	bf00      	nop
1000c838:	10020e70 	.word	0x10020e70

1000c83c <IPCC_channel1_callback>:

/* USER CODE END 0 */
/* Callback from IPCC Interrupt Handler: Master Processor informs that there are some free buffers */
void IPCC_channel1_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
1000c83c:	b580      	push	{r7, lr}
1000c83e:	b084      	sub	sp, #16
1000c840:	af00      	add	r7, sp, #0
1000c842:	60f8      	str	r0, [r7, #12]
1000c844:	60b9      	str	r1, [r7, #8]
1000c846:	4613      	mov	r3, r2
1000c848:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL1_CALLBACK */

  if (msg_received_ch1 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel1_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch1);

  msg_received_ch1 = MBOX_BUF_FREE;
1000c84a:	4b06      	ldr	r3, [pc, #24]	; (1000c864 <IPCC_channel1_callback+0x28>)
1000c84c:	2202      	movs	r2, #2
1000c84e:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the 'buff free' msg */
  OPENAMP_log_dbg("Ack 'buff free' message on ch1\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
1000c850:	2201      	movs	r2, #1
1000c852:	68b9      	ldr	r1, [r7, #8]
1000c854:	68f8      	ldr	r0, [r7, #12]
1000c856:	f7f6 ff49 	bl	100036ec <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL1_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL1_CALLBACK */
}
1000c85a:	bf00      	nop
1000c85c:	3710      	adds	r7, #16
1000c85e:	46bd      	mov	sp, r7
1000c860:	bd80      	pop	{r7, pc}
1000c862:	bf00      	nop
1000c864:	10029b5c 	.word	0x10029b5c

1000c868 <IPCC_channel2_callback>:

/* Callback from IPCC Interrupt Handler: new message received from Master Processor */
void IPCC_channel2_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
1000c868:	b580      	push	{r7, lr}
1000c86a:	b084      	sub	sp, #16
1000c86c:	af00      	add	r7, sp, #0
1000c86e:	60f8      	str	r0, [r7, #12]
1000c870:	60b9      	str	r1, [r7, #8]
1000c872:	4613      	mov	r3, r2
1000c874:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL2_CALLBACK */

  if (msg_received_ch2 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel2_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch2);

  msg_received_ch2 = MBOX_NEW_MSG;
1000c876:	4b06      	ldr	r3, [pc, #24]	; (1000c890 <IPCC_channel2_callback+0x28>)
1000c878:	2201      	movs	r2, #1
1000c87a:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the new msg */
  OPENAMP_log_dbg("Ack new message on ch2\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
1000c87c:	2201      	movs	r2, #1
1000c87e:	68b9      	ldr	r1, [r7, #8]
1000c880:	68f8      	ldr	r0, [r7, #12]
1000c882:	f7f6 ff33 	bl	100036ec <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL2_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL2_CALLBACK */
}
1000c886:	bf00      	nop
1000c888:	3710      	adds	r7, #16
1000c88a:	46bd      	mov	sp, r7
1000c88c:	bd80      	pop	{r7, pc}
1000c88e:	bf00      	nop
1000c890:	10029b60 	.word	0x10029b60

1000c894 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
1000c894:	b480      	push	{r7}
1000c896:	b083      	sub	sp, #12
1000c898:	af00      	add	r7, sp, #0
1000c89a:	6078      	str	r0, [r7, #4]
1000c89c:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
1000c89e:	687b      	ldr	r3, [r7, #4]
1000c8a0:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
1000c8a2:	683a      	ldr	r2, [r7, #0]
1000c8a4:	429a      	cmp	r2, r3
1000c8a6:	d209      	bcs.n	1000c8bc <metal_device_io_region+0x28>
1000c8a8:	683a      	ldr	r2, [r7, #0]
1000c8aa:	4613      	mov	r3, r2
1000c8ac:	00db      	lsls	r3, r3, #3
1000c8ae:	1a9b      	subs	r3, r3, r2
1000c8b0:	00db      	lsls	r3, r3, #3
1000c8b2:	3308      	adds	r3, #8
1000c8b4:	687a      	ldr	r2, [r7, #4]
1000c8b6:	4413      	add	r3, r2
1000c8b8:	3304      	adds	r3, #4
1000c8ba:	e000      	b.n	1000c8be <metal_device_io_region+0x2a>
1000c8bc:	2300      	movs	r3, #0
}
1000c8be:	4618      	mov	r0, r3
1000c8c0:	370c      	adds	r7, #12
1000c8c2:	46bd      	mov	sp, r7
1000c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c8c8:	4770      	bx	lr
	...

1000c8cc <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
1000c8cc:	b590      	push	{r4, r7, lr}
1000c8ce:	b08d      	sub	sp, #52	; 0x34
1000c8d0:	af04      	add	r7, sp, #16
1000c8d2:	6078      	str	r0, [r7, #4]
  int status = 0;
1000c8d4:	2300      	movs	r3, #0
1000c8d6:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
1000c8d8:	2300      	movs	r3, #0
1000c8da:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
1000c8dc:	4a41      	ldr	r2, [pc, #260]	; (1000c9e4 <OPENAMP_shmem_init+0x118>)
1000c8de:	f107 0310 	add.w	r3, r7, #16
1000c8e2:	e892 0003 	ldmia.w	r2, {r0, r1}
1000c8e6:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
1000c8ea:	2300      	movs	r3, #0
1000c8ec:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
1000c8ee:	2300      	movs	r3, #0
1000c8f0:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
1000c8f2:	f107 0310 	add.w	r3, r7, #16
1000c8f6:	4618      	mov	r0, r3
1000c8f8:	f7fe fa5c 	bl	1000adb4 <metal_init>

  status = metal_register_generic_device(&shm_device);
1000c8fc:	483a      	ldr	r0, [pc, #232]	; (1000c9e8 <OPENAMP_shmem_init+0x11c>)
1000c8fe:	f7fe f903 	bl	1000ab08 <metal_register_generic_device>
1000c902:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
1000c904:	69fb      	ldr	r3, [r7, #28]
1000c906:	2b00      	cmp	r3, #0
1000c908:	d001      	beq.n	1000c90e <OPENAMP_shmem_init+0x42>
    return status;
1000c90a:	69fb      	ldr	r3, [r7, #28]
1000c90c:	e066      	b.n	1000c9dc <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
1000c90e:	f107 0318 	add.w	r3, r7, #24
1000c912:	461a      	mov	r2, r3
1000c914:	4935      	ldr	r1, [pc, #212]	; (1000c9ec <OPENAMP_shmem_init+0x120>)
1000c916:	4836      	ldr	r0, [pc, #216]	; (1000c9f0 <OPENAMP_shmem_init+0x124>)
1000c918:	f7fe f8b8 	bl	1000aa8c <metal_device_open>
1000c91c:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
1000c91e:	69fb      	ldr	r3, [r7, #28]
1000c920:	2b00      	cmp	r3, #0
1000c922:	d001      	beq.n	1000c928 <OPENAMP_shmem_init+0x5c>
    return status;
1000c924:	69fb      	ldr	r3, [r7, #28]
1000c926:	e059      	b.n	1000c9dc <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
1000c928:	4a32      	ldr	r2, [pc, #200]	; (1000c9f4 <OPENAMP_shmem_init+0x128>)
1000c92a:	4b33      	ldr	r3, [pc, #204]	; (1000c9f8 <OPENAMP_shmem_init+0x12c>)
1000c92c:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
1000c92e:	69bb      	ldr	r3, [r7, #24]
1000c930:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, (unsigned int)-1, 0, NULL);
1000c934:	4a31      	ldr	r2, [pc, #196]	; (1000c9fc <OPENAMP_shmem_init+0x130>)
1000c936:	4b2f      	ldr	r3, [pc, #188]	; (1000c9f4 <OPENAMP_shmem_init+0x128>)
1000c938:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
1000c93a:	461a      	mov	r2, r3
1000c93c:	2300      	movs	r3, #0
1000c93e:	9302      	str	r3, [sp, #8]
1000c940:	2300      	movs	r3, #0
1000c942:	9301      	str	r3, [sp, #4]
1000c944:	f04f 33ff 	mov.w	r3, #4294967295
1000c948:	9300      	str	r3, [sp, #0]
1000c94a:	4613      	mov	r3, r2
1000c94c:	4a2a      	ldr	r2, [pc, #168]	; (1000c9f8 <OPENAMP_shmem_init+0x12c>)
1000c94e:	4929      	ldr	r1, [pc, #164]	; (1000c9f4 <OPENAMP_shmem_init+0x128>)
1000c950:	f7fe fa7e 	bl	1000ae50 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
1000c954:	69bb      	ldr	r3, [r7, #24]
1000c956:	2100      	movs	r1, #0
1000c958:	4618      	mov	r0, r3
1000c95a:	f7ff ff9b 	bl	1000c894 <metal_device_io_region>
1000c95e:	4603      	mov	r3, r0
1000c960:	4a27      	ldr	r2, [pc, #156]	; (1000ca00 <OPENAMP_shmem_init+0x134>)
1000c962:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
1000c964:	4b26      	ldr	r3, [pc, #152]	; (1000ca00 <OPENAMP_shmem_init+0x134>)
1000c966:	681b      	ldr	r3, [r3, #0]
1000c968:	2b00      	cmp	r3, #0
1000c96a:	d102      	bne.n	1000c972 <OPENAMP_shmem_init+0xa6>
    return -1;
1000c96c:	f04f 33ff 	mov.w	r3, #4294967295
1000c970:	e034      	b.n	1000c9dc <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
1000c972:	f107 0208 	add.w	r2, r7, #8
1000c976:	f107 030c 	add.w	r3, r7, #12
1000c97a:	4619      	mov	r1, r3
1000c97c:	6878      	ldr	r0, [r7, #4]
1000c97e:	f000 f8d9 	bl	1000cb34 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
1000c982:	68fb      	ldr	r3, [r7, #12]
1000c984:	4a1f      	ldr	r2, [pc, #124]	; (1000ca04 <OPENAMP_shmem_init+0x138>)
1000c986:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
1000c988:	4b1e      	ldr	r3, [pc, #120]	; (1000ca04 <OPENAMP_shmem_init+0x138>)
1000c98a:	681b      	ldr	r3, [r3, #0]
1000c98c:	2b00      	cmp	r3, #0
1000c98e:	d102      	bne.n	1000c996 <OPENAMP_shmem_init+0xca>
  {
    return -1;
1000c990:	f04f 33ff 	mov.w	r3, #4294967295
1000c994:	e022      	b.n	1000c9dc <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
1000c996:	69bb      	ldr	r3, [r7, #24]
1000c998:	f103 0044 	add.w	r0, r3, #68	; 0x44
1000c99c:	4b19      	ldr	r3, [pc, #100]	; (1000ca04 <OPENAMP_shmem_init+0x138>)
1000c99e:	6819      	ldr	r1, [r3, #0]
1000c9a0:	4b18      	ldr	r3, [pc, #96]	; (1000ca04 <OPENAMP_shmem_init+0x138>)
1000c9a2:	681a      	ldr	r2, [r3, #0]
1000c9a4:	68bb      	ldr	r3, [r7, #8]
1000c9a6:	461c      	mov	r4, r3
1000c9a8:	2300      	movs	r3, #0
1000c9aa:	9302      	str	r3, [sp, #8]
1000c9ac:	2300      	movs	r3, #0
1000c9ae:	9301      	str	r3, [sp, #4]
1000c9b0:	f04f 33ff 	mov.w	r3, #4294967295
1000c9b4:	9300      	str	r3, [sp, #0]
1000c9b6:	4623      	mov	r3, r4
1000c9b8:	f7fe fa4a 	bl	1000ae50 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
1000c9bc:	69bb      	ldr	r3, [r7, #24]
1000c9be:	2101      	movs	r1, #1
1000c9c0:	4618      	mov	r0, r3
1000c9c2:	f7ff ff67 	bl	1000c894 <metal_device_io_region>
1000c9c6:	4603      	mov	r3, r0
1000c9c8:	4a0f      	ldr	r2, [pc, #60]	; (1000ca08 <OPENAMP_shmem_init+0x13c>)
1000c9ca:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
1000c9cc:	4b0e      	ldr	r3, [pc, #56]	; (1000ca08 <OPENAMP_shmem_init+0x13c>)
1000c9ce:	681b      	ldr	r3, [r3, #0]
1000c9d0:	2b00      	cmp	r3, #0
1000c9d2:	d102      	bne.n	1000c9da <OPENAMP_shmem_init+0x10e>
    return -1;
1000c9d4:	f04f 33ff 	mov.w	r3, #4294967295
1000c9d8:	e000      	b.n	1000c9dc <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
1000c9da:	2300      	movs	r3, #0
}
1000c9dc:	4618      	mov	r0, r3
1000c9de:	3724      	adds	r7, #36	; 0x24
1000c9e0:	46bd      	mov	sp, r7
1000c9e2:	bd90      	pop	{r4, r7, pc}
1000c9e4:	1001292c 	.word	0x1001292c
1000c9e8:	10020040 	.word	0x10020040
1000c9ec:	10012918 	.word	0x10012918
1000c9f0:	10012924 	.word	0x10012924
1000c9f4:	10040000 	.word	0x10040000
1000c9f8:	10029c08 	.word	0x10029c08
1000c9fc:	10050000 	.word	0x10050000
1000ca00:	10029b64 	.word	0x10029b64
1000ca04:	10029b6c 	.word	0x10029b6c
1000ca08:	10029b68 	.word	0x10029b68

1000ca0c <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
1000ca0c:	b590      	push	{r4, r7, lr}
1000ca0e:	b08b      	sub	sp, #44	; 0x2c
1000ca10:	af04      	add	r7, sp, #16
1000ca12:	6078      	str	r0, [r7, #4]
1000ca14:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
1000ca16:	2300      	movs	r3, #0
1000ca18:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
1000ca1a:	2300      	movs	r3, #0
1000ca1c:	613b      	str	r3, [r7, #16]
  int status = 0;
1000ca1e:	2300      	movs	r3, #0
1000ca20:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
1000ca22:	f7ff feb5 	bl	1000c790 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
1000ca26:	6878      	ldr	r0, [r7, #4]
1000ca28:	f7ff ff50 	bl	1000c8cc <OPENAMP_shmem_init>
1000ca2c:	60f8      	str	r0, [r7, #12]
  if(status)
1000ca2e:	68fb      	ldr	r3, [r7, #12]
1000ca30:	2b00      	cmp	r3, #0
1000ca32:	d001      	beq.n	1000ca38 <MX_OPENAMP_Init+0x2c>
  {
    return status;
1000ca34:	68fb      	ldr	r3, [r7, #12]
1000ca36:	e068      	b.n	1000cb0a <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
1000ca38:	6878      	ldr	r0, [r7, #4]
1000ca3a:	4b36      	ldr	r3, [pc, #216]	; (1000cb14 <MX_OPENAMP_Init+0x108>)
1000ca3c:	681b      	ldr	r3, [r3, #0]
1000ca3e:	f103 0218 	add.w	r2, r3, #24
1000ca42:	4b35      	ldr	r3, [pc, #212]	; (1000cb18 <MX_OPENAMP_Init+0x10c>)
1000ca44:	681b      	ldr	r3, [r3, #0]
1000ca46:	2100      	movs	r1, #0
1000ca48:	9102      	str	r1, [sp, #8]
1000ca4a:	4934      	ldr	r1, [pc, #208]	; (1000cb1c <MX_OPENAMP_Init+0x110>)
1000ca4c:	9101      	str	r1, [sp, #4]
1000ca4e:	2100      	movs	r1, #0
1000ca50:	9100      	str	r1, [sp, #0]
1000ca52:	21ff      	movs	r1, #255	; 0xff
1000ca54:	f7fe fcfa 	bl	1000b44c <rproc_virtio_create_vdev>
1000ca58:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
1000ca5a:	693b      	ldr	r3, [r7, #16]
1000ca5c:	2b00      	cmp	r3, #0
1000ca5e:	d102      	bne.n	1000ca66 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
1000ca60:	f04f 33ff 	mov.w	r3, #4294967295
1000ca64:	e051      	b.n	1000cb0a <MX_OPENAMP_Init+0xfe>
  }

  rproc_virtio_wait_remote_ready(vdev);
1000ca66:	6938      	ldr	r0, [r7, #16]
1000ca68:	f7fe fdcf 	bl	1000b60a <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
1000ca6c:	4b29      	ldr	r3, [pc, #164]	; (1000cb14 <MX_OPENAMP_Init+0x108>)
1000ca6e:	681b      	ldr	r3, [r3, #0]
1000ca70:	3334      	adds	r3, #52	; 0x34
1000ca72:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
1000ca74:	697b      	ldr	r3, [r7, #20]
1000ca76:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
1000ca78:	697b      	ldr	r3, [r7, #20]
1000ca7a:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
1000ca7c:	461c      	mov	r4, r3
1000ca7e:	4b28      	ldr	r3, [pc, #160]	; (1000cb20 <MX_OPENAMP_Init+0x114>)
1000ca80:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
1000ca82:	697a      	ldr	r2, [r7, #20]
1000ca84:	6892      	ldr	r2, [r2, #8]
1000ca86:	6979      	ldr	r1, [r7, #20]
1000ca88:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
1000ca8a:	9102      	str	r1, [sp, #8]
1000ca8c:	9201      	str	r2, [sp, #4]
1000ca8e:	9300      	str	r3, [sp, #0]
1000ca90:	4623      	mov	r3, r4
1000ca92:	4602      	mov	r2, r0
1000ca94:	2100      	movs	r1, #0
1000ca96:	6938      	ldr	r0, [r7, #16]
1000ca98:	f7fe fd86 	bl	1000b5a8 <rproc_virtio_init_vring>
1000ca9c:	60f8      	str	r0, [r7, #12]
  if (status != 0)
1000ca9e:	68fb      	ldr	r3, [r7, #12]
1000caa0:	2b00      	cmp	r3, #0
1000caa2:	d001      	beq.n	1000caa8 <MX_OPENAMP_Init+0x9c>
  {
    return status;
1000caa4:	68fb      	ldr	r3, [r7, #12]
1000caa6:	e030      	b.n	1000cb0a <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
1000caa8:	4b1a      	ldr	r3, [pc, #104]	; (1000cb14 <MX_OPENAMP_Init+0x108>)
1000caaa:	681b      	ldr	r3, [r3, #0]
1000caac:	3348      	adds	r3, #72	; 0x48
1000caae:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
1000cab0:	697b      	ldr	r3, [r7, #20]
1000cab2:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
1000cab4:	697b      	ldr	r3, [r7, #20]
1000cab6:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
1000cab8:	461c      	mov	r4, r3
1000caba:	4b19      	ldr	r3, [pc, #100]	; (1000cb20 <MX_OPENAMP_Init+0x114>)
1000cabc:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
1000cabe:	697a      	ldr	r2, [r7, #20]
1000cac0:	6892      	ldr	r2, [r2, #8]
1000cac2:	6979      	ldr	r1, [r7, #20]
1000cac4:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
1000cac6:	9102      	str	r1, [sp, #8]
1000cac8:	9201      	str	r2, [sp, #4]
1000caca:	9300      	str	r3, [sp, #0]
1000cacc:	4623      	mov	r3, r4
1000cace:	4602      	mov	r2, r0
1000cad0:	2101      	movs	r1, #1
1000cad2:	6938      	ldr	r0, [r7, #16]
1000cad4:	f7fe fd68 	bl	1000b5a8 <rproc_virtio_init_vring>
1000cad8:	60f8      	str	r0, [r7, #12]
  if (status != 0)
1000cada:	68fb      	ldr	r3, [r7, #12]
1000cadc:	2b00      	cmp	r3, #0
1000cade:	d001      	beq.n	1000cae4 <MX_OPENAMP_Init+0xd8>
  {
    return status;
1000cae0:	68fb      	ldr	r3, [r7, #12]
1000cae2:	e012      	b.n	1000cb0a <MX_OPENAMP_Init+0xfe>
  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
                             (size_t)SHM_SIZE);
1000cae4:	4a0f      	ldr	r2, [pc, #60]	; (1000cb24 <MX_OPENAMP_Init+0x118>)
1000cae6:	4b10      	ldr	r3, [pc, #64]	; (1000cb28 <MX_OPENAMP_Init+0x11c>)
1000cae8:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
1000caea:	461a      	mov	r2, r3
1000caec:	f04f 31ff 	mov.w	r1, #4294967295
1000caf0:	480e      	ldr	r0, [pc, #56]	; (1000cb2c <MX_OPENAMP_Init+0x120>)
1000caf2:	f7fe ff86 	bl	1000ba02 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
1000caf6:	4b0a      	ldr	r3, [pc, #40]	; (1000cb20 <MX_OPENAMP_Init+0x114>)
1000caf8:	681b      	ldr	r3, [r3, #0]
1000cafa:	4a0c      	ldr	r2, [pc, #48]	; (1000cb2c <MX_OPENAMP_Init+0x120>)
1000cafc:	9200      	str	r2, [sp, #0]
1000cafe:	683a      	ldr	r2, [r7, #0]
1000cb00:	6939      	ldr	r1, [r7, #16]
1000cb02:	480b      	ldr	r0, [pc, #44]	; (1000cb30 <MX_OPENAMP_Init+0x124>)
1000cb04:	f7ff fa7a 	bl	1000bffc <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
1000cb08:	2300      	movs	r3, #0
}
1000cb0a:	4618      	mov	r0, r3
1000cb0c:	371c      	adds	r7, #28
1000cb0e:	46bd      	mov	sp, r7
1000cb10:	bd90      	pop	{r4, r7, pc}
1000cb12:	bf00      	nop
1000cb14:	10029b6c 	.word	0x10029b6c
1000cb18:	10029b68 	.word	0x10029b68
1000cb1c:	1000c7d9 	.word	0x1000c7d9
1000cb20:	10029b64 	.word	0x10029b64
1000cb24:	10050000 	.word	0x10050000
1000cb28:	10040000 	.word	0x10040000
1000cb2c:	10029b70 	.word	0x10029b70
1000cb30:	10029b7c 	.word	0x10029b7c

1000cb34 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
1000cb34:	b480      	push	{r7}
1000cb36:	b085      	sub	sp, #20
1000cb38:	af00      	add	r7, sp, #0
1000cb3a:	60f8      	str	r0, [r7, #12]
1000cb3c:	60b9      	str	r1, [r7, #8]
1000cb3e:	607a      	str	r2, [r7, #4]
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
1000cb40:	687b      	ldr	r3, [r7, #4]
1000cb42:	228c      	movs	r2, #140	; 0x8c
1000cb44:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
1000cb46:	68bb      	ldr	r3, [r7, #8]
1000cb48:	4a03      	ldr	r2, [pc, #12]	; (1000cb58 <resource_table_init+0x24>)
1000cb4a:	601a      	str	r2, [r3, #0]
}
1000cb4c:	bf00      	nop
1000cb4e:	3714      	adds	r7, #20
1000cb50:	46bd      	mov	sp, r7
1000cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
1000cb56:	4770      	bx	lr
1000cb58:	10020d40 	.word	0x10020d40

1000cb5c <emotion_model_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool emotion_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
1000cb5c:	b580      	push	{r7, lr}
1000cb5e:	b082      	sub	sp, #8
1000cb60:	af00      	add	r7, sp, #0
1000cb62:	6078      	str	r0, [r7, #4]
1000cb64:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_emotion_model_activations_map, 1, params)) {
1000cb66:	683a      	ldr	r2, [r7, #0]
1000cb68:	2101      	movs	r1, #1
1000cb6a:	483a      	ldr	r0, [pc, #232]	; (1000cc54 <emotion_model_configure_activations+0xf8>)
1000cb6c:	f000 fb32 	bl	1000d1d4 <ai_platform_get_activations_map>
1000cb70:	4603      	mov	r3, r0
1000cb72:	2b00      	cmp	r3, #0
1000cb74:	d063      	beq.n	1000cc3e <emotion_model_configure_activations+0xe2>
    /* Updating activations (byte) offsets */
    
    serving_default_conv1d_1_input0_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000cb76:	4b37      	ldr	r3, [pc, #220]	; (1000cc54 <emotion_model_configure_activations+0xf8>)
1000cb78:	681b      	ldr	r3, [r3, #0]
1000cb7a:	4a37      	ldr	r2, [pc, #220]	; (1000cc58 <emotion_model_configure_activations+0xfc>)
1000cb7c:	6093      	str	r3, [r2, #8]
    serving_default_conv1d_1_input0_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000cb7e:	4b35      	ldr	r3, [pc, #212]	; (1000cc54 <emotion_model_configure_activations+0xf8>)
1000cb80:	681b      	ldr	r3, [r3, #0]
1000cb82:	4a35      	ldr	r2, [pc, #212]	; (1000cc58 <emotion_model_configure_activations+0xfc>)
1000cb84:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 2000);
1000cb86:	4b33      	ldr	r3, [pc, #204]	; (1000cc54 <emotion_model_configure_activations+0xf8>)
1000cb88:	681b      	ldr	r3, [r3, #0]
1000cb8a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
1000cb8e:	4a33      	ldr	r2, [pc, #204]	; (1000cc5c <emotion_model_configure_activations+0x100>)
1000cb90:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 2000);
1000cb92:	4b30      	ldr	r3, [pc, #192]	; (1000cc54 <emotion_model_configure_activations+0xf8>)
1000cb94:	681b      	ldr	r3, [r3, #0]
1000cb96:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
1000cb9a:	4a30      	ldr	r2, [pc, #192]	; (1000cc5c <emotion_model_configure_activations+0x100>)
1000cb9c:	60d3      	str	r3, [r2, #12]
    
    nl_1_nl_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 2000);
1000cb9e:	4b2d      	ldr	r3, [pc, #180]	; (1000cc54 <emotion_model_configure_activations+0xf8>)
1000cba0:	681b      	ldr	r3, [r3, #0]
1000cba2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
1000cba6:	4a2e      	ldr	r2, [pc, #184]	; (1000cc60 <emotion_model_configure_activations+0x104>)
1000cba8:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 2000);
1000cbaa:	4b2a      	ldr	r3, [pc, #168]	; (1000cc54 <emotion_model_configure_activations+0xf8>)
1000cbac:	681b      	ldr	r3, [r3, #0]
1000cbae:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
1000cbb2:	4a2b      	ldr	r2, [pc, #172]	; (1000cc60 <emotion_model_configure_activations+0x104>)
1000cbb4:	60d3      	str	r3, [r2, #12]
    
    pool_4_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 2000);
1000cbb6:	4b27      	ldr	r3, [pc, #156]	; (1000cc54 <emotion_model_configure_activations+0xf8>)
1000cbb8:	681b      	ldr	r3, [r3, #0]
1000cbba:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
1000cbbe:	4a29      	ldr	r2, [pc, #164]	; (1000cc64 <emotion_model_configure_activations+0x108>)
1000cbc0:	6093      	str	r3, [r2, #8]
    pool_4_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 2000);
1000cbc2:	4b24      	ldr	r3, [pc, #144]	; (1000cc54 <emotion_model_configure_activations+0xf8>)
1000cbc4:	681b      	ldr	r3, [r3, #0]
1000cbc6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
1000cbca:	4a26      	ldr	r2, [pc, #152]	; (1000cc64 <emotion_model_configure_activations+0x108>)
1000cbcc:	60d3      	str	r3, [r2, #12]
    
    gemm_6_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000cbce:	4b21      	ldr	r3, [pc, #132]	; (1000cc54 <emotion_model_configure_activations+0xf8>)
1000cbd0:	681b      	ldr	r3, [r3, #0]
1000cbd2:	4a25      	ldr	r2, [pc, #148]	; (1000cc68 <emotion_model_configure_activations+0x10c>)
1000cbd4:	6093      	str	r3, [r2, #8]
    gemm_6_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000cbd6:	4b1f      	ldr	r3, [pc, #124]	; (1000cc54 <emotion_model_configure_activations+0xf8>)
1000cbd8:	681b      	ldr	r3, [r3, #0]
1000cbda:	4a23      	ldr	r2, [pc, #140]	; (1000cc68 <emotion_model_configure_activations+0x10c>)
1000cbdc:	60d3      	str	r3, [r2, #12]
    
    nl_7_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 32);
1000cbde:	4b1d      	ldr	r3, [pc, #116]	; (1000cc54 <emotion_model_configure_activations+0xf8>)
1000cbe0:	681b      	ldr	r3, [r3, #0]
1000cbe2:	3320      	adds	r3, #32
1000cbe4:	4a21      	ldr	r2, [pc, #132]	; (1000cc6c <emotion_model_configure_activations+0x110>)
1000cbe6:	6093      	str	r3, [r2, #8]
    nl_7_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 32);
1000cbe8:	4b1a      	ldr	r3, [pc, #104]	; (1000cc54 <emotion_model_configure_activations+0xf8>)
1000cbea:	681b      	ldr	r3, [r3, #0]
1000cbec:	3320      	adds	r3, #32
1000cbee:	4a1f      	ldr	r2, [pc, #124]	; (1000cc6c <emotion_model_configure_activations+0x110>)
1000cbf0:	60d3      	str	r3, [r2, #12]
    
    gemm_8_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000cbf2:	4b18      	ldr	r3, [pc, #96]	; (1000cc54 <emotion_model_configure_activations+0xf8>)
1000cbf4:	681b      	ldr	r3, [r3, #0]
1000cbf6:	4a1e      	ldr	r2, [pc, #120]	; (1000cc70 <emotion_model_configure_activations+0x114>)
1000cbf8:	6093      	str	r3, [r2, #8]
    gemm_8_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000cbfa:	4b16      	ldr	r3, [pc, #88]	; (1000cc54 <emotion_model_configure_activations+0xf8>)
1000cbfc:	681b      	ldr	r3, [r3, #0]
1000cbfe:	4a1c      	ldr	r2, [pc, #112]	; (1000cc70 <emotion_model_configure_activations+0x114>)
1000cc00:	60d3      	str	r3, [r2, #12]
    
    nl_9_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 16);
1000cc02:	4b14      	ldr	r3, [pc, #80]	; (1000cc54 <emotion_model_configure_activations+0xf8>)
1000cc04:	681b      	ldr	r3, [r3, #0]
1000cc06:	3310      	adds	r3, #16
1000cc08:	4a1a      	ldr	r2, [pc, #104]	; (1000cc74 <emotion_model_configure_activations+0x118>)
1000cc0a:	6093      	str	r3, [r2, #8]
    nl_9_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 16);
1000cc0c:	4b11      	ldr	r3, [pc, #68]	; (1000cc54 <emotion_model_configure_activations+0xf8>)
1000cc0e:	681b      	ldr	r3, [r3, #0]
1000cc10:	3310      	adds	r3, #16
1000cc12:	4a18      	ldr	r2, [pc, #96]	; (1000cc74 <emotion_model_configure_activations+0x118>)
1000cc14:	60d3      	str	r3, [r2, #12]
    
    gemm_10_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000cc16:	4b0f      	ldr	r3, [pc, #60]	; (1000cc54 <emotion_model_configure_activations+0xf8>)
1000cc18:	681b      	ldr	r3, [r3, #0]
1000cc1a:	4a17      	ldr	r2, [pc, #92]	; (1000cc78 <emotion_model_configure_activations+0x11c>)
1000cc1c:	6093      	str	r3, [r2, #8]
    gemm_10_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000cc1e:	4b0d      	ldr	r3, [pc, #52]	; (1000cc54 <emotion_model_configure_activations+0xf8>)
1000cc20:	681b      	ldr	r3, [r3, #0]
1000cc22:	4a15      	ldr	r2, [pc, #84]	; (1000cc78 <emotion_model_configure_activations+0x11c>)
1000cc24:	60d3      	str	r3, [r2, #12]
    
    nl_11_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 8);
1000cc26:	4b0b      	ldr	r3, [pc, #44]	; (1000cc54 <emotion_model_configure_activations+0xf8>)
1000cc28:	681b      	ldr	r3, [r3, #0]
1000cc2a:	3308      	adds	r3, #8
1000cc2c:	4a13      	ldr	r2, [pc, #76]	; (1000cc7c <emotion_model_configure_activations+0x120>)
1000cc2e:	6093      	str	r3, [r2, #8]
    nl_11_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 8);
1000cc30:	4b08      	ldr	r3, [pc, #32]	; (1000cc54 <emotion_model_configure_activations+0xf8>)
1000cc32:	681b      	ldr	r3, [r3, #0]
1000cc34:	3308      	adds	r3, #8
1000cc36:	4a11      	ldr	r2, [pc, #68]	; (1000cc7c <emotion_model_configure_activations+0x120>)
1000cc38:	60d3      	str	r3, [r2, #12]
    
    return true;
1000cc3a:	2301      	movs	r3, #1
1000cc3c:	e005      	b.n	1000cc4a <emotion_model_configure_activations+0xee>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
1000cc3e:	2213      	movs	r2, #19
1000cc40:	2130      	movs	r1, #48	; 0x30
1000cc42:	6878      	ldr	r0, [r7, #4]
1000cc44:	f000 fb76 	bl	1000d334 <ai_platform_network_set_error>
  return false;
1000cc48:	2300      	movs	r3, #0
}
1000cc4a:	4618      	mov	r0, r3
1000cc4c:	3708      	adds	r7, #8
1000cc4e:	46bd      	mov	sp, r7
1000cc50:	bd80      	pop	{r7, pc}
1000cc52:	bf00      	nop
1000cc54:	10029c0c 	.word	0x10029c0c
1000cc58:	100200ec 	.word	0x100200ec
1000cc5c:	1002010c 	.word	0x1002010c
1000cc60:	1002011c 	.word	0x1002011c
1000cc64:	1002013c 	.word	0x1002013c
1000cc68:	1002015c 	.word	0x1002015c
1000cc6c:	1002016c 	.word	0x1002016c
1000cc70:	1002018c 	.word	0x1002018c
1000cc74:	1002019c 	.word	0x1002019c
1000cc78:	100201ac 	.word	0x100201ac
1000cc7c:	100201bc 	.word	0x100201bc

1000cc80 <emotion_model_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool emotion_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
1000cc80:	b580      	push	{r7, lr}
1000cc82:	b082      	sub	sp, #8
1000cc84:	af00      	add	r7, sp, #0
1000cc86:	6078      	str	r0, [r7, #4]
1000cc88:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_emotion_model_weights_map, 1, params)) {
1000cc8a:	683a      	ldr	r2, [r7, #0]
1000cc8c:	2101      	movs	r1, #1
1000cc8e:	4856      	ldr	r0, [pc, #344]	; (1000cde8 <emotion_model_configure_weights+0x168>)
1000cc90:	f000 fa4c 	bl	1000d12c <ai_platform_get_weights_map>
1000cc94:	4603      	mov	r3, r0
1000cc96:	2b00      	cmp	r3, #0
1000cc98:	f000 809c 	beq.w	1000cdd4 <emotion_model_configure_weights+0x154>
    /* Updating weights (byte) offsets */
    
    gemm_6_weights_array.format |= AI_FMT_FLAG_CONST;
1000cc9c:	4b53      	ldr	r3, [pc, #332]	; (1000cdec <emotion_model_configure_weights+0x16c>)
1000cc9e:	681b      	ldr	r3, [r3, #0]
1000cca0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000cca4:	4a51      	ldr	r2, [pc, #324]	; (1000cdec <emotion_model_configure_weights+0x16c>)
1000cca6:	6013      	str	r3, [r2, #0]
    gemm_6_weights_array.data = AI_PTR(g_emotion_model_weights_map[0] + 1024);
1000cca8:	4b4f      	ldr	r3, [pc, #316]	; (1000cde8 <emotion_model_configure_weights+0x168>)
1000ccaa:	681b      	ldr	r3, [r3, #0]
1000ccac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
1000ccb0:	4a4e      	ldr	r2, [pc, #312]	; (1000cdec <emotion_model_configure_weights+0x16c>)
1000ccb2:	6093      	str	r3, [r2, #8]
    gemm_6_weights_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 0);
1000ccb4:	4b4c      	ldr	r3, [pc, #304]	; (1000cde8 <emotion_model_configure_weights+0x168>)
1000ccb6:	681b      	ldr	r3, [r3, #0]
1000ccb8:	4a4c      	ldr	r2, [pc, #304]	; (1000cdec <emotion_model_configure_weights+0x16c>)
1000ccba:	60d3      	str	r3, [r2, #12]
    
    gemm_6_bias_array.format |= AI_FMT_FLAG_CONST;
1000ccbc:	4b4c      	ldr	r3, [pc, #304]	; (1000cdf0 <emotion_model_configure_weights+0x170>)
1000ccbe:	681b      	ldr	r3, [r3, #0]
1000ccc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000ccc4:	4a4a      	ldr	r2, [pc, #296]	; (1000cdf0 <emotion_model_configure_weights+0x170>)
1000ccc6:	6013      	str	r3, [r2, #0]
    gemm_6_bias_array.data = AI_PTR(g_emotion_model_weights_map[0] + 32768);
1000ccc8:	4b47      	ldr	r3, [pc, #284]	; (1000cde8 <emotion_model_configure_weights+0x168>)
1000ccca:	681b      	ldr	r3, [r3, #0]
1000cccc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
1000ccd0:	4a47      	ldr	r2, [pc, #284]	; (1000cdf0 <emotion_model_configure_weights+0x170>)
1000ccd2:	6093      	str	r3, [r2, #8]
    gemm_6_bias_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 32768);
1000ccd4:	4b44      	ldr	r3, [pc, #272]	; (1000cde8 <emotion_model_configure_weights+0x168>)
1000ccd6:	681b      	ldr	r3, [r3, #0]
1000ccd8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
1000ccdc:	4a44      	ldr	r2, [pc, #272]	; (1000cdf0 <emotion_model_configure_weights+0x170>)
1000ccde:	60d3      	str	r3, [r2, #12]
    
    gemm_8_weights_array.format |= AI_FMT_FLAG_CONST;
1000cce0:	4b44      	ldr	r3, [pc, #272]	; (1000cdf4 <emotion_model_configure_weights+0x174>)
1000cce2:	681b      	ldr	r3, [r3, #0]
1000cce4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000cce8:	4a42      	ldr	r2, [pc, #264]	; (1000cdf4 <emotion_model_configure_weights+0x174>)
1000ccea:	6013      	str	r3, [r2, #0]
    gemm_8_weights_array.data = AI_PTR(g_emotion_model_weights_map[0] + 32800);
1000ccec:	4b3e      	ldr	r3, [pc, #248]	; (1000cde8 <emotion_model_configure_weights+0x168>)
1000ccee:	681b      	ldr	r3, [r3, #0]
1000ccf0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
1000ccf4:	3320      	adds	r3, #32
1000ccf6:	4a3f      	ldr	r2, [pc, #252]	; (1000cdf4 <emotion_model_configure_weights+0x174>)
1000ccf8:	6093      	str	r3, [r2, #8]
    gemm_8_weights_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 32800);
1000ccfa:	4b3b      	ldr	r3, [pc, #236]	; (1000cde8 <emotion_model_configure_weights+0x168>)
1000ccfc:	681b      	ldr	r3, [r3, #0]
1000ccfe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
1000cd02:	3320      	adds	r3, #32
1000cd04:	4a3b      	ldr	r2, [pc, #236]	; (1000cdf4 <emotion_model_configure_weights+0x174>)
1000cd06:	60d3      	str	r3, [r2, #12]
    
    gemm_8_bias_array.format |= AI_FMT_FLAG_CONST;
1000cd08:	4b3b      	ldr	r3, [pc, #236]	; (1000cdf8 <emotion_model_configure_weights+0x178>)
1000cd0a:	681b      	ldr	r3, [r3, #0]
1000cd0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000cd10:	4a39      	ldr	r2, [pc, #228]	; (1000cdf8 <emotion_model_configure_weights+0x178>)
1000cd12:	6013      	str	r3, [r2, #0]
    gemm_8_bias_array.data = AI_PTR(g_emotion_model_weights_map[0] + 32928);
1000cd14:	4b34      	ldr	r3, [pc, #208]	; (1000cde8 <emotion_model_configure_weights+0x168>)
1000cd16:	681b      	ldr	r3, [r3, #0]
1000cd18:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
1000cd1c:	33a0      	adds	r3, #160	; 0xa0
1000cd1e:	4a36      	ldr	r2, [pc, #216]	; (1000cdf8 <emotion_model_configure_weights+0x178>)
1000cd20:	6093      	str	r3, [r2, #8]
    gemm_8_bias_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 32928);
1000cd22:	4b31      	ldr	r3, [pc, #196]	; (1000cde8 <emotion_model_configure_weights+0x168>)
1000cd24:	681b      	ldr	r3, [r3, #0]
1000cd26:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
1000cd2a:	33a0      	adds	r3, #160	; 0xa0
1000cd2c:	4a32      	ldr	r2, [pc, #200]	; (1000cdf8 <emotion_model_configure_weights+0x178>)
1000cd2e:	60d3      	str	r3, [r2, #12]
    
    gemm_10_weights_array.format |= AI_FMT_FLAG_CONST;
1000cd30:	4b32      	ldr	r3, [pc, #200]	; (1000cdfc <emotion_model_configure_weights+0x17c>)
1000cd32:	681b      	ldr	r3, [r3, #0]
1000cd34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000cd38:	4a30      	ldr	r2, [pc, #192]	; (1000cdfc <emotion_model_configure_weights+0x17c>)
1000cd3a:	6013      	str	r3, [r2, #0]
    gemm_10_weights_array.data = AI_PTR(g_emotion_model_weights_map[0] + 32944);
1000cd3c:	4b2a      	ldr	r3, [pc, #168]	; (1000cde8 <emotion_model_configure_weights+0x168>)
1000cd3e:	681b      	ldr	r3, [r3, #0]
1000cd40:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
1000cd44:	33b0      	adds	r3, #176	; 0xb0
1000cd46:	4a2d      	ldr	r2, [pc, #180]	; (1000cdfc <emotion_model_configure_weights+0x17c>)
1000cd48:	6093      	str	r3, [r2, #8]
    gemm_10_weights_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 32944);
1000cd4a:	4b27      	ldr	r3, [pc, #156]	; (1000cde8 <emotion_model_configure_weights+0x168>)
1000cd4c:	681b      	ldr	r3, [r3, #0]
1000cd4e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
1000cd52:	33b0      	adds	r3, #176	; 0xb0
1000cd54:	4a29      	ldr	r2, [pc, #164]	; (1000cdfc <emotion_model_configure_weights+0x17c>)
1000cd56:	60d3      	str	r3, [r2, #12]
    
    gemm_10_bias_array.format |= AI_FMT_FLAG_CONST;
1000cd58:	4b29      	ldr	r3, [pc, #164]	; (1000ce00 <emotion_model_configure_weights+0x180>)
1000cd5a:	681b      	ldr	r3, [r3, #0]
1000cd5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000cd60:	4a27      	ldr	r2, [pc, #156]	; (1000ce00 <emotion_model_configure_weights+0x180>)
1000cd62:	6013      	str	r3, [r2, #0]
    gemm_10_bias_array.data = AI_PTR(g_emotion_model_weights_map[0] + 32976);
1000cd64:	4b20      	ldr	r3, [pc, #128]	; (1000cde8 <emotion_model_configure_weights+0x168>)
1000cd66:	681b      	ldr	r3, [r3, #0]
1000cd68:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
1000cd6c:	33d0      	adds	r3, #208	; 0xd0
1000cd6e:	4a24      	ldr	r2, [pc, #144]	; (1000ce00 <emotion_model_configure_weights+0x180>)
1000cd70:	6093      	str	r3, [r2, #8]
    gemm_10_bias_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 32976);
1000cd72:	4b1d      	ldr	r3, [pc, #116]	; (1000cde8 <emotion_model_configure_weights+0x168>)
1000cd74:	681b      	ldr	r3, [r3, #0]
1000cd76:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
1000cd7a:	33d0      	adds	r3, #208	; 0xd0
1000cd7c:	4a20      	ldr	r2, [pc, #128]	; (1000ce00 <emotion_model_configure_weights+0x180>)
1000cd7e:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
1000cd80:	4b20      	ldr	r3, [pc, #128]	; (1000ce04 <emotion_model_configure_weights+0x184>)
1000cd82:	681b      	ldr	r3, [r3, #0]
1000cd84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000cd88:	4a1e      	ldr	r2, [pc, #120]	; (1000ce04 <emotion_model_configure_weights+0x184>)
1000cd8a:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_emotion_model_weights_map[0] + 32984);
1000cd8c:	4b16      	ldr	r3, [pc, #88]	; (1000cde8 <emotion_model_configure_weights+0x168>)
1000cd8e:	681b      	ldr	r3, [r3, #0]
1000cd90:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
1000cd94:	33d8      	adds	r3, #216	; 0xd8
1000cd96:	4a1b      	ldr	r2, [pc, #108]	; (1000ce04 <emotion_model_configure_weights+0x184>)
1000cd98:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 32984);
1000cd9a:	4b13      	ldr	r3, [pc, #76]	; (1000cde8 <emotion_model_configure_weights+0x168>)
1000cd9c:	681b      	ldr	r3, [r3, #0]
1000cd9e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
1000cda2:	33d8      	adds	r3, #216	; 0xd8
1000cda4:	4a17      	ldr	r2, [pc, #92]	; (1000ce04 <emotion_model_configure_weights+0x184>)
1000cda6:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
1000cda8:	4b17      	ldr	r3, [pc, #92]	; (1000ce08 <emotion_model_configure_weights+0x188>)
1000cdaa:	681b      	ldr	r3, [r3, #0]
1000cdac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000cdb0:	4a15      	ldr	r2, [pc, #84]	; (1000ce08 <emotion_model_configure_weights+0x188>)
1000cdb2:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_emotion_model_weights_map[0] + 33304);
1000cdb4:	4b0c      	ldr	r3, [pc, #48]	; (1000cde8 <emotion_model_configure_weights+0x168>)
1000cdb6:	681b      	ldr	r3, [r3, #0]
1000cdb8:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
1000cdbc:	3318      	adds	r3, #24
1000cdbe:	4a12      	ldr	r2, [pc, #72]	; (1000ce08 <emotion_model_configure_weights+0x188>)
1000cdc0:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 33304);
1000cdc2:	4b09      	ldr	r3, [pc, #36]	; (1000cde8 <emotion_model_configure_weights+0x168>)
1000cdc4:	681b      	ldr	r3, [r3, #0]
1000cdc6:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
1000cdca:	3318      	adds	r3, #24
1000cdcc:	4a0e      	ldr	r2, [pc, #56]	; (1000ce08 <emotion_model_configure_weights+0x188>)
1000cdce:	60d3      	str	r3, [r2, #12]
    
    return true;
1000cdd0:	2301      	movs	r3, #1
1000cdd2:	e005      	b.n	1000cde0 <emotion_model_configure_weights+0x160>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
1000cdd4:	2212      	movs	r2, #18
1000cdd6:	2130      	movs	r1, #48	; 0x30
1000cdd8:	6878      	ldr	r0, [r7, #4]
1000cdda:	f000 faab 	bl	1000d334 <ai_platform_network_set_error>
  return false;
1000cdde:	2300      	movs	r3, #0
}
1000cde0:	4618      	mov	r0, r3
1000cde2:	3708      	adds	r7, #8
1000cde4:	46bd      	mov	sp, r7
1000cde6:	bd80      	pop	{r7, pc}
1000cde8:	10029c10 	.word	0x10029c10
1000cdec:	100200cc 	.word	0x100200cc
1000cdf0:	100200dc 	.word	0x100200dc
1000cdf4:	100200fc 	.word	0x100200fc
1000cdf8:	1002012c 	.word	0x1002012c
1000cdfc:	1002014c 	.word	0x1002014c
1000ce00:	1002017c 	.word	0x1002017c
1000ce04:	100201cc 	.word	0x100201cc
1000ce08:	100201dc 	.word	0x100201dc

1000ce0c <ai_emotion_model_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_emotion_model_get_error(ai_handle network)
{
1000ce0c:	b580      	push	{r7, lr}
1000ce0e:	b082      	sub	sp, #8
1000ce10:	af00      	add	r7, sp, #0
1000ce12:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
1000ce14:	6878      	ldr	r0, [r7, #4]
1000ce16:	f000 fa53 	bl	1000d2c0 <ai_platform_network_get_error>
1000ce1a:	4603      	mov	r3, r0
}
1000ce1c:	4618      	mov	r0, r3
1000ce1e:	3708      	adds	r7, #8
1000ce20:	46bd      	mov	sp, r7
1000ce22:	bd80      	pop	{r7, pc}

1000ce24 <ai_emotion_model_create>:

AI_API_ENTRY
ai_error ai_emotion_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
1000ce24:	b580      	push	{r7, lr}
1000ce26:	b084      	sub	sp, #16
1000ce28:	af02      	add	r7, sp, #8
1000ce2a:	6078      	str	r0, [r7, #4]
1000ce2c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
1000ce2e:	2300      	movs	r3, #0
1000ce30:	9301      	str	r3, [sp, #4]
1000ce32:	2305      	movs	r3, #5
1000ce34:	9300      	str	r3, [sp, #0]
1000ce36:	2301      	movs	r3, #1
1000ce38:	4a04      	ldr	r2, [pc, #16]	; (1000ce4c <ai_emotion_model_create+0x28>)
1000ce3a:	6839      	ldr	r1, [r7, #0]
1000ce3c:	6878      	ldr	r0, [r7, #4]
1000ce3e:	f000 fbb3 	bl	1000d5a8 <ai_platform_network_create>
1000ce42:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
1000ce44:	4618      	mov	r0, r3
1000ce46:	3708      	adds	r7, #8
1000ce48:	46bd      	mov	sp, r7
1000ce4a:	bd80      	pop	{r7, pc}
1000ce4c:	10020ad4 	.word	0x10020ad4

1000ce50 <ai_emotion_model_create_and_init>:

AI_API_ENTRY
ai_error ai_emotion_model_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
1000ce50:	b580      	push	{r7, lr}
1000ce52:	b096      	sub	sp, #88	; 0x58
1000ce54:	af00      	add	r7, sp, #0
1000ce56:	60f8      	str	r0, [r7, #12]
1000ce58:	60b9      	str	r1, [r7, #8]
1000ce5a:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_emotion_model_create(network, AI_EMOTION_MODEL_DATA_CONFIG);
1000ce5c:	2100      	movs	r1, #0
1000ce5e:	68f8      	ldr	r0, [r7, #12]
1000ce60:	f7ff ffe0 	bl	1000ce24 <ai_emotion_model_create>
1000ce64:	4603      	mov	r3, r0
1000ce66:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
1000ce68:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
1000ce6c:	2b00      	cmp	r3, #0
1000ce6e:	d001      	beq.n	1000ce74 <ai_emotion_model_create_and_init+0x24>
        return err;
1000ce70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1000ce72:	e05d      	b.n	1000cf30 <ai_emotion_model_create_and_init+0xe0>
    if (ai_emotion_model_data_params_get(&params) != true) {
1000ce74:	f107 0314 	add.w	r3, r7, #20
1000ce78:	4618      	mov	r0, r3
1000ce7a:	f000 f8dd 	bl	1000d038 <ai_emotion_model_data_params_get>
1000ce7e:	4603      	mov	r3, r0
1000ce80:	f083 0301 	eor.w	r3, r3, #1
1000ce84:	b2db      	uxtb	r3, r3
1000ce86:	2b00      	cmp	r3, #0
1000ce88:	d008      	beq.n	1000ce9c <ai_emotion_model_create_and_init+0x4c>
        err = ai_emotion_model_get_error(*network);
1000ce8a:	68fb      	ldr	r3, [r7, #12]
1000ce8c:	681b      	ldr	r3, [r3, #0]
1000ce8e:	4618      	mov	r0, r3
1000ce90:	f7ff ffbc 	bl	1000ce0c <ai_emotion_model_get_error>
1000ce94:	4603      	mov	r3, r0
1000ce96:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
1000ce98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1000ce9a:	e049      	b.n	1000cf30 <ai_emotion_model_create_and_init+0xe0>
    }
#if defined(AI_EMOTION_MODEL_DATA_ACTIVATIONS_COUNT)
    if (activations) {
1000ce9c:	68bb      	ldr	r3, [r7, #8]
1000ce9e:	2b00      	cmp	r3, #0
1000cea0:	d016      	beq.n	1000ced0 <ai_emotion_model_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
1000cea2:	2300      	movs	r3, #0
1000cea4:	657b      	str	r3, [r7, #84]	; 0x54
1000cea6:	e00e      	b.n	1000cec6 <ai_emotion_model_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
1000cea8:	6d79      	ldr	r1, [r7, #84]	; 0x54
1000ceaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1000ceac:	009b      	lsls	r3, r3, #2
1000ceae:	68ba      	ldr	r2, [r7, #8]
1000ceb0:	4413      	add	r3, r2
1000ceb2:	681a      	ldr	r2, [r3, #0]
1000ceb4:	f107 0314 	add.w	r3, r7, #20
1000ceb8:	330c      	adds	r3, #12
1000ceba:	4618      	mov	r0, r3
1000cebc:	f000 f922 	bl	1000d104 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
1000cec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1000cec2:	3301      	adds	r3, #1
1000cec4:	657b      	str	r3, [r7, #84]	; 0x54
1000cec6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
1000cec8:	461a      	mov	r2, r3
1000ceca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1000cecc:	4293      	cmp	r3, r2
1000cece:	dbeb      	blt.n	1000cea8 <ai_emotion_model_create_and_init+0x58>
    }
#endif
#if defined(AI_EMOTION_MODEL_DATA_WEIGHTS_COUNT)
    if (weights) {
1000ced0:	687b      	ldr	r3, [r7, #4]
1000ced2:	2b00      	cmp	r3, #0
1000ced4:	d016      	beq.n	1000cf04 <ai_emotion_model_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
1000ced6:	2300      	movs	r3, #0
1000ced8:	653b      	str	r3, [r7, #80]	; 0x50
1000ceda:	e00e      	b.n	1000cefa <ai_emotion_model_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
1000cedc:	6d39      	ldr	r1, [r7, #80]	; 0x50
1000cede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1000cee0:	009b      	lsls	r3, r3, #2
1000cee2:	687a      	ldr	r2, [r7, #4]
1000cee4:	4413      	add	r3, r2
1000cee6:	681a      	ldr	r2, [r3, #0]
1000cee8:	f107 0314 	add.w	r3, r7, #20
1000ceec:	3304      	adds	r3, #4
1000ceee:	4618      	mov	r0, r3
1000cef0:	f000 f908 	bl	1000d104 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
1000cef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1000cef6:	3301      	adds	r3, #1
1000cef8:	653b      	str	r3, [r7, #80]	; 0x50
1000cefa:	8b7b      	ldrh	r3, [r7, #26]
1000cefc:	461a      	mov	r2, r3
1000cefe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1000cf00:	4293      	cmp	r3, r2
1000cf02:	dbeb      	blt.n	1000cedc <ai_emotion_model_create_and_init+0x8c>
    }
#endif
    if (ai_emotion_model_init(*network, &params) != true) {
1000cf04:	68fb      	ldr	r3, [r7, #12]
1000cf06:	681b      	ldr	r3, [r3, #0]
1000cf08:	f107 0214 	add.w	r2, r7, #20
1000cf0c:	4611      	mov	r1, r2
1000cf0e:	4618      	mov	r0, r3
1000cf10:	f000 f846 	bl	1000cfa0 <ai_emotion_model_init>
1000cf14:	4603      	mov	r3, r0
1000cf16:	f083 0301 	eor.w	r3, r3, #1
1000cf1a:	b2db      	uxtb	r3, r3
1000cf1c:	2b00      	cmp	r3, #0
1000cf1e:	d006      	beq.n	1000cf2e <ai_emotion_model_create_and_init+0xde>
        err = ai_emotion_model_get_error(*network);
1000cf20:	68fb      	ldr	r3, [r7, #12]
1000cf22:	681b      	ldr	r3, [r3, #0]
1000cf24:	4618      	mov	r0, r3
1000cf26:	f7ff ff71 	bl	1000ce0c <ai_emotion_model_get_error>
1000cf2a:	4603      	mov	r3, r0
1000cf2c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
1000cf2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
1000cf30:	4618      	mov	r0, r3
1000cf32:	3758      	adds	r7, #88	; 0x58
1000cf34:	46bd      	mov	sp, r7
1000cf36:	bd80      	pop	{r7, pc}

1000cf38 <ai_emotion_model_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_emotion_model_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
1000cf38:	b580      	push	{r7, lr}
1000cf3a:	b082      	sub	sp, #8
1000cf3c:	af00      	add	r7, sp, #0
1000cf3e:	6078      	str	r0, [r7, #4]
1000cf40:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
1000cf42:	687b      	ldr	r3, [r7, #4]
1000cf44:	2b00      	cmp	r3, #0
1000cf46:	d104      	bne.n	1000cf52 <ai_emotion_model_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
1000cf48:	4b06      	ldr	r3, [pc, #24]	; (1000cf64 <ai_emotion_model_inputs_get+0x2c>)
1000cf4a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
1000cf4c:	687b      	ldr	r3, [r7, #4]
1000cf4e:	4a06      	ldr	r2, [pc, #24]	; (1000cf68 <ai_emotion_model_inputs_get+0x30>)
1000cf50:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
1000cf52:	6839      	ldr	r1, [r7, #0]
1000cf54:	6878      	ldr	r0, [r7, #4]
1000cf56:	f000 f9f3 	bl	1000d340 <ai_platform_inputs_get>
1000cf5a:	4603      	mov	r3, r0
}
1000cf5c:	4618      	mov	r0, r3
1000cf5e:	3708      	adds	r7, #8
1000cf60:	46bd      	mov	sp, r7
1000cf62:	bd80      	pop	{r7, pc}
1000cf64:	10020ad4 	.word	0x10020ad4
1000cf68:	a1c00100 	.word	0xa1c00100

1000cf6c <ai_emotion_model_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_emotion_model_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
1000cf6c:	b580      	push	{r7, lr}
1000cf6e:	b082      	sub	sp, #8
1000cf70:	af00      	add	r7, sp, #0
1000cf72:	6078      	str	r0, [r7, #4]
1000cf74:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
1000cf76:	687b      	ldr	r3, [r7, #4]
1000cf78:	2b00      	cmp	r3, #0
1000cf7a:	d104      	bne.n	1000cf86 <ai_emotion_model_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
1000cf7c:	4b06      	ldr	r3, [pc, #24]	; (1000cf98 <ai_emotion_model_outputs_get+0x2c>)
1000cf7e:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
1000cf80:	687b      	ldr	r3, [r7, #4]
1000cf82:	4a06      	ldr	r2, [pc, #24]	; (1000cf9c <ai_emotion_model_outputs_get+0x30>)
1000cf84:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
1000cf86:	6839      	ldr	r1, [r7, #0]
1000cf88:	6878      	ldr	r0, [r7, #4]
1000cf8a:	f000 fa75 	bl	1000d478 <ai_platform_outputs_get>
1000cf8e:	4603      	mov	r3, r0
}
1000cf90:	4618      	mov	r0, r3
1000cf92:	3708      	adds	r7, #8
1000cf94:	46bd      	mov	sp, r7
1000cf96:	bd80      	pop	{r7, pc}
1000cf98:	10020ad4 	.word	0x10020ad4
1000cf9c:	a1c00100 	.word	0xa1c00100

1000cfa0 <ai_emotion_model_init>:
}

AI_API_ENTRY
ai_bool ai_emotion_model_init(
  ai_handle network, const ai_network_params* params)
{
1000cfa0:	b580      	push	{r7, lr}
1000cfa2:	b084      	sub	sp, #16
1000cfa4:	af00      	add	r7, sp, #0
1000cfa6:	6078      	str	r0, [r7, #4]
1000cfa8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
1000cfaa:	6839      	ldr	r1, [r7, #0]
1000cfac:	6878      	ldr	r0, [r7, #4]
1000cfae:	f000 fb83 	bl	1000d6b8 <ai_platform_network_init>
1000cfb2:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
1000cfb4:	68fb      	ldr	r3, [r7, #12]
1000cfb6:	2b00      	cmp	r3, #0
1000cfb8:	d101      	bne.n	1000cfbe <ai_emotion_model_init+0x1e>
1000cfba:	2300      	movs	r3, #0
1000cfbc:	e028      	b.n	1000d010 <ai_emotion_model_init+0x70>

  ai_bool ok = true;
1000cfbe:	2301      	movs	r3, #1
1000cfc0:	72fb      	strb	r3, [r7, #11]
  ok &= emotion_model_configure_weights(net_ctx, params);
1000cfc2:	6839      	ldr	r1, [r7, #0]
1000cfc4:	68f8      	ldr	r0, [r7, #12]
1000cfc6:	f7ff fe5b 	bl	1000cc80 <emotion_model_configure_weights>
1000cfca:	4603      	mov	r3, r0
1000cfcc:	461a      	mov	r2, r3
1000cfce:	7afb      	ldrb	r3, [r7, #11]
1000cfd0:	4013      	ands	r3, r2
1000cfd2:	2b00      	cmp	r3, #0
1000cfd4:	bf14      	ite	ne
1000cfd6:	2301      	movne	r3, #1
1000cfd8:	2300      	moveq	r3, #0
1000cfda:	72fb      	strb	r3, [r7, #11]
  ok &= emotion_model_configure_activations(net_ctx, params);
1000cfdc:	6839      	ldr	r1, [r7, #0]
1000cfde:	68f8      	ldr	r0, [r7, #12]
1000cfe0:	f7ff fdbc 	bl	1000cb5c <emotion_model_configure_activations>
1000cfe4:	4603      	mov	r3, r0
1000cfe6:	461a      	mov	r2, r3
1000cfe8:	7afb      	ldrb	r3, [r7, #11]
1000cfea:	4013      	ands	r3, r2
1000cfec:	2b00      	cmp	r3, #0
1000cfee:	bf14      	ite	ne
1000cff0:	2301      	movne	r3, #1
1000cff2:	2300      	moveq	r3, #0
1000cff4:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
1000cff6:	6878      	ldr	r0, [r7, #4]
1000cff8:	f000 fc12 	bl	1000d820 <ai_platform_network_post_init>
1000cffc:	4603      	mov	r3, r0
1000cffe:	461a      	mov	r2, r3
1000d000:	7afb      	ldrb	r3, [r7, #11]
1000d002:	4013      	ands	r3, r2
1000d004:	2b00      	cmp	r3, #0
1000d006:	bf14      	ite	ne
1000d008:	2301      	movne	r3, #1
1000d00a:	2300      	moveq	r3, #0
1000d00c:	72fb      	strb	r3, [r7, #11]

  return ok;
1000d00e:	7afb      	ldrb	r3, [r7, #11]
}
1000d010:	4618      	mov	r0, r3
1000d012:	3710      	adds	r7, #16
1000d014:	46bd      	mov	sp, r7
1000d016:	bd80      	pop	{r7, pc}

1000d018 <ai_emotion_model_run>:


AI_API_ENTRY
ai_i32 ai_emotion_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
1000d018:	b580      	push	{r7, lr}
1000d01a:	b084      	sub	sp, #16
1000d01c:	af00      	add	r7, sp, #0
1000d01e:	60f8      	str	r0, [r7, #12]
1000d020:	60b9      	str	r1, [r7, #8]
1000d022:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
1000d024:	687a      	ldr	r2, [r7, #4]
1000d026:	68b9      	ldr	r1, [r7, #8]
1000d028:	68f8      	ldr	r0, [r7, #12]
1000d02a:	f000 fc4d 	bl	1000d8c8 <ai_platform_network_process>
1000d02e:	4603      	mov	r3, r0
}
1000d030:	4618      	mov	r0, r3
1000d032:	3710      	adds	r7, #16
1000d034:	46bd      	mov	sp, r7
1000d036:	bd80      	pop	{r7, pc}

1000d038 <ai_emotion_model_data_params_get>:
 * @ingroup emotion_model_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_emotion_model_data_params_get(ai_network_params* params)
{
1000d038:	b580      	push	{r7, lr}
1000d03a:	b086      	sub	sp, #24
1000d03c:	af00      	add	r7, sp, #0
1000d03e:	6078      	str	r0, [r7, #4]
  if (!params) return false;
1000d040:	687b      	ldr	r3, [r7, #4]
1000d042:	2b00      	cmp	r3, #0
1000d044:	d101      	bne.n	1000d04a <ai_emotion_model_data_params_get+0x12>
1000d046:	2300      	movs	r3, #0
1000d048:	e016      	b.n	1000d078 <ai_emotion_model_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
1000d04a:	4a0d      	ldr	r2, [pc, #52]	; (1000d080 <ai_emotion_model_data_params_get+0x48>)
1000d04c:	f107 0310 	add.w	r3, r7, #16
1000d050:	e892 0003 	ldmia.w	r2, {r0, r1}
1000d054:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_EMOTION_MODEL_DATA_ACTIVATIONS_COUNT, g_emotion_model_data_map_activations);
  
  const ai_buffer_array map_weights = 
1000d058:	4a0a      	ldr	r2, [pc, #40]	; (1000d084 <ai_emotion_model_data_params_get+0x4c>)
1000d05a:	f107 0308 	add.w	r3, r7, #8
1000d05e:	e892 0003 	ldmia.w	r2, {r0, r1}
1000d062:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_EMOTION_MODEL_DATA_WEIGHTS_COUNT, g_emotion_model_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
1000d066:	f107 0210 	add.w	r2, r7, #16
1000d06a:	f107 0308 	add.w	r3, r7, #8
1000d06e:	4619      	mov	r1, r3
1000d070:	6878      	ldr	r0, [r7, #4]
1000d072:	f000 f903 	bl	1000d27c <ai_platform_bind_network_params>
1000d076:	4603      	mov	r3, r0
}
1000d078:	4618      	mov	r0, r3
1000d07a:	3718      	adds	r7, #24
1000d07c:	46bd      	mov	sp, r7
1000d07e:	bd80      	pop	{r7, pc}
1000d080:	10012954 	.word	0x10012954
1000d084:	1001295c 	.word	0x1001295c

1000d088 <ai_buffer_get_size>:
1000d088:	b378      	cbz	r0, 1000d0ea <ai_buffer_get_size+0x62>
1000d08a:	b410      	push	{r4}
1000d08c:	6803      	ldr	r3, [r0, #0]
1000d08e:	4a17      	ldr	r2, [pc, #92]	; (1000d0ec <ai_buffer_get_size+0x64>)
1000d090:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
1000d094:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
1000d098:	4293      	cmp	r3, r2
1000d09a:	d01e      	beq.n	1000d0da <ai_buffer_get_size+0x52>
1000d09c:	6984      	ldr	r4, [r0, #24]
1000d09e:	6862      	ldr	r2, [r4, #4]
1000d0a0:	7d03      	ldrb	r3, [r0, #20]
1000d0a2:	6941      	ldr	r1, [r0, #20]
1000d0a4:	f1a3 0301 	sub.w	r3, r3, #1
1000d0a8:	fab3 f383 	clz	r3, r3
1000d0ac:	095b      	lsrs	r3, r3, #5
1000d0ae:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
1000d0b2:	f3c1 2017 	ubfx	r0, r1, #8, #24
1000d0b6:	da0b      	bge.n	1000d0d0 <ai_buffer_get_size+0x48>
1000d0b8:	2b01      	cmp	r3, #1
1000d0ba:	d102      	bne.n	1000d0c2 <ai_buffer_get_size+0x3a>
1000d0bc:	2802      	cmp	r0, #2
1000d0be:	d007      	beq.n	1000d0d0 <ai_buffer_get_size+0x48>
1000d0c0:	2302      	movs	r3, #2
1000d0c2:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
1000d0c6:	3301      	adds	r3, #1
1000d0c8:	4298      	cmp	r0, r3
1000d0ca:	fb01 f202 	mul.w	r2, r1, r2
1000d0ce:	d1f3      	bne.n	1000d0b8 <ai_buffer_get_size+0x30>
1000d0d0:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
1000d0d4:	f85d 4b04 	ldr.w	r4, [sp], #4
1000d0d8:	4770      	bx	lr
1000d0da:	2900      	cmp	r1, #0
1000d0dc:	d0de      	beq.n	1000d09c <ai_buffer_get_size+0x14>
1000d0de:	6984      	ldr	r4, [r0, #24]
1000d0e0:	6863      	ldr	r3, [r4, #4]
1000d0e2:	331f      	adds	r3, #31
1000d0e4:	f023 021f 	bic.w	r2, r3, #31
1000d0e8:	e7da      	b.n	1000d0a0 <ai_buffer_get_size+0x18>
1000d0ea:	4770      	bx	lr
1000d0ec:	000400c0 	.word	0x000400c0

1000d0f0 <ai_buffer_array_sane>:
1000d0f0:	b138      	cbz	r0, 1000d102 <ai_buffer_array_sane+0x12>
1000d0f2:	6843      	ldr	r3, [r0, #4]
1000d0f4:	b123      	cbz	r3, 1000d100 <ai_buffer_array_sane+0x10>
1000d0f6:	8840      	ldrh	r0, [r0, #2]
1000d0f8:	3800      	subs	r0, #0
1000d0fa:	bf18      	it	ne
1000d0fc:	2001      	movne	r0, #1
1000d0fe:	4770      	bx	lr
1000d100:	4618      	mov	r0, r3
1000d102:	4770      	bx	lr

1000d104 <ai_buffer_array_item_set_address>:
1000d104:	b150      	cbz	r0, 1000d11c <ai_buffer_array_item_set_address+0x18>
1000d106:	6843      	ldr	r3, [r0, #4]
1000d108:	b14b      	cbz	r3, 1000d11e <ai_buffer_array_item_set_address+0x1a>
1000d10a:	8840      	ldrh	r0, [r0, #2]
1000d10c:	b900      	cbnz	r0, 1000d110 <ai_buffer_array_item_set_address+0xc>
1000d10e:	4770      	bx	lr
1000d110:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
1000d114:	eb03 0181 	add.w	r1, r3, r1, lsl #2
1000d118:	2001      	movs	r0, #1
1000d11a:	604a      	str	r2, [r1, #4]
1000d11c:	4770      	bx	lr
1000d11e:	4618      	mov	r0, r3
1000d120:	4770      	bx	lr
1000d122:	bf00      	nop

1000d124 <_ai_platform_acquire_crc>:
1000d124:	2001      	movs	r0, #1
1000d126:	4770      	bx	lr

1000d128 <_ai_platform_release_crc>:
1000d128:	4770      	bx	lr
1000d12a:	bf00      	nop

1000d12c <ai_platform_get_weights_map>:
1000d12c:	2a00      	cmp	r2, #0
1000d12e:	d037      	beq.n	1000d1a0 <ai_platform_get_weights_map+0x74>
1000d130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d132:	4604      	mov	r4, r0
1000d134:	b1a0      	cbz	r0, 1000d160 <ai_platform_get_weights_map+0x34>
1000d136:	460f      	mov	r7, r1
1000d138:	b191      	cbz	r1, 1000d160 <ai_platform_get_weights_map+0x34>
1000d13a:	4b25      	ldr	r3, [pc, #148]	; (1000d1d0 <ai_platform_get_weights_map+0xa4>)
1000d13c:	6810      	ldr	r0, [r2, #0]
1000d13e:	4298      	cmp	r0, r3
1000d140:	4615      	mov	r5, r2
1000d142:	d00f      	beq.n	1000d164 <ai_platform_get_weights_map+0x38>
1000d144:	6855      	ldr	r5, [r2, #4]
1000d146:	b15d      	cbz	r5, 1000d160 <ai_platform_get_weights_map+0x34>
1000d148:	682e      	ldr	r6, [r5, #0]
1000d14a:	429e      	cmp	r6, r3
1000d14c:	d02a      	beq.n	1000d1a4 <ai_platform_get_weights_map+0x78>
1000d14e:	f1a1 0001 	sub.w	r0, r1, #1
1000d152:	6025      	str	r5, [r4, #0]
1000d154:	fab0 f080 	clz	r0, r0
1000d158:	0940      	lsrs	r0, r0, #5
1000d15a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d15c:	42a7      	cmp	r7, r4
1000d15e:	d034      	beq.n	1000d1ca <ai_platform_get_weights_map+0x9e>
1000d160:	2000      	movs	r0, #0
1000d162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d164:	1d10      	adds	r0, r2, #4
1000d166:	f7ff ffc3 	bl	1000d0f0 <ai_buffer_array_sane>
1000d16a:	2800      	cmp	r0, #0
1000d16c:	d0f8      	beq.n	1000d160 <ai_platform_get_weights_map+0x34>
1000d16e:	88eb      	ldrh	r3, [r5, #6]
1000d170:	429f      	cmp	r7, r3
1000d172:	d1f5      	bne.n	1000d160 <ai_platform_get_weights_map+0x34>
1000d174:	f04f 0e00 	mov.w	lr, #0
1000d178:	1f23      	subs	r3, r4, #4
1000d17a:	4670      	mov	r0, lr
1000d17c:	68aa      	ldr	r2, [r5, #8]
1000d17e:	eb02 0c0e 	add.w	ip, r2, lr
1000d182:	f10e 0e1c 	add.w	lr, lr, #28
1000d186:	f8dc 4004 	ldr.w	r4, [ip, #4]
1000d18a:	b124      	cbz	r4, 1000d196 <ai_platform_get_weights_map+0x6a>
1000d18c:	3001      	adds	r0, #1
1000d18e:	4287      	cmp	r7, r0
1000d190:	f843 4f04 	str.w	r4, [r3, #4]!
1000d194:	d1f2      	bne.n	1000d17c <ai_platform_get_weights_map+0x50>
1000d196:	1a38      	subs	r0, r7, r0
1000d198:	fab0 f080 	clz	r0, r0
1000d19c:	0940      	lsrs	r0, r0, #5
1000d19e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d1a0:	2000      	movs	r0, #0
1000d1a2:	4770      	bx	lr
1000d1a4:	1f23      	subs	r3, r4, #4
1000d1a6:	4628      	mov	r0, r5
1000d1a8:	2400      	movs	r4, #0
1000d1aa:	e000      	b.n	1000d1ae <ai_platform_get_weights_map+0x82>
1000d1ac:	4614      	mov	r4, r2
1000d1ae:	f850 2f04 	ldr.w	r2, [r0, #4]!
1000d1b2:	42b2      	cmp	r2, r6
1000d1b4:	d0d2      	beq.n	1000d15c <ai_platform_get_weights_map+0x30>
1000d1b6:	f843 2f04 	str.w	r2, [r3, #4]!
1000d1ba:	1c62      	adds	r2, r4, #1
1000d1bc:	4297      	cmp	r7, r2
1000d1be:	d1f5      	bne.n	1000d1ac <ai_platform_get_weights_map+0x80>
1000d1c0:	3402      	adds	r4, #2
1000d1c2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
1000d1c6:	42b3      	cmp	r3, r6
1000d1c8:	d1ca      	bne.n	1000d160 <ai_platform_get_weights_map+0x34>
1000d1ca:	2001      	movs	r0, #1
1000d1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d1ce:	bf00      	nop
1000d1d0:	a1facade 	.word	0xa1facade

1000d1d4 <ai_platform_get_activations_map>:
1000d1d4:	2a00      	cmp	r2, #0
1000d1d6:	d038      	beq.n	1000d24a <ai_platform_get_activations_map+0x76>
1000d1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d1da:	4604      	mov	r4, r0
1000d1dc:	b1a0      	cbz	r0, 1000d208 <ai_platform_get_activations_map+0x34>
1000d1de:	460f      	mov	r7, r1
1000d1e0:	b191      	cbz	r1, 1000d208 <ai_platform_get_activations_map+0x34>
1000d1e2:	4b25      	ldr	r3, [pc, #148]	; (1000d278 <ai_platform_get_activations_map+0xa4>)
1000d1e4:	6810      	ldr	r0, [r2, #0]
1000d1e6:	4298      	cmp	r0, r3
1000d1e8:	4615      	mov	r5, r2
1000d1ea:	d00f      	beq.n	1000d20c <ai_platform_get_activations_map+0x38>
1000d1ec:	6a15      	ldr	r5, [r2, #32]
1000d1ee:	b15d      	cbz	r5, 1000d208 <ai_platform_get_activations_map+0x34>
1000d1f0:	682e      	ldr	r6, [r5, #0]
1000d1f2:	429e      	cmp	r6, r3
1000d1f4:	d02b      	beq.n	1000d24e <ai_platform_get_activations_map+0x7a>
1000d1f6:	f1a1 0001 	sub.w	r0, r1, #1
1000d1fa:	6025      	str	r5, [r4, #0]
1000d1fc:	fab0 f080 	clz	r0, r0
1000d200:	0940      	lsrs	r0, r0, #5
1000d202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d204:	42a7      	cmp	r7, r4
1000d206:	d035      	beq.n	1000d274 <ai_platform_get_activations_map+0xa0>
1000d208:	2000      	movs	r0, #0
1000d20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d20c:	f102 000c 	add.w	r0, r2, #12
1000d210:	f7ff ff6e 	bl	1000d0f0 <ai_buffer_array_sane>
1000d214:	2800      	cmp	r0, #0
1000d216:	d0f7      	beq.n	1000d208 <ai_platform_get_activations_map+0x34>
1000d218:	89eb      	ldrh	r3, [r5, #14]
1000d21a:	429f      	cmp	r7, r3
1000d21c:	d1f4      	bne.n	1000d208 <ai_platform_get_activations_map+0x34>
1000d21e:	f04f 0e00 	mov.w	lr, #0
1000d222:	1f23      	subs	r3, r4, #4
1000d224:	4670      	mov	r0, lr
1000d226:	692a      	ldr	r2, [r5, #16]
1000d228:	eb02 0c0e 	add.w	ip, r2, lr
1000d22c:	f10e 0e1c 	add.w	lr, lr, #28
1000d230:	f8dc 4004 	ldr.w	r4, [ip, #4]
1000d234:	b124      	cbz	r4, 1000d240 <ai_platform_get_activations_map+0x6c>
1000d236:	3001      	adds	r0, #1
1000d238:	4287      	cmp	r7, r0
1000d23a:	f843 4f04 	str.w	r4, [r3, #4]!
1000d23e:	d1f2      	bne.n	1000d226 <ai_platform_get_activations_map+0x52>
1000d240:	1a38      	subs	r0, r7, r0
1000d242:	fab0 f080 	clz	r0, r0
1000d246:	0940      	lsrs	r0, r0, #5
1000d248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d24a:	2000      	movs	r0, #0
1000d24c:	4770      	bx	lr
1000d24e:	1f23      	subs	r3, r4, #4
1000d250:	4628      	mov	r0, r5
1000d252:	2400      	movs	r4, #0
1000d254:	e000      	b.n	1000d258 <ai_platform_get_activations_map+0x84>
1000d256:	4614      	mov	r4, r2
1000d258:	f850 2f04 	ldr.w	r2, [r0, #4]!
1000d25c:	42b2      	cmp	r2, r6
1000d25e:	d0d1      	beq.n	1000d204 <ai_platform_get_activations_map+0x30>
1000d260:	f843 2f04 	str.w	r2, [r3, #4]!
1000d264:	1c62      	adds	r2, r4, #1
1000d266:	4297      	cmp	r7, r2
1000d268:	d1f5      	bne.n	1000d256 <ai_platform_get_activations_map+0x82>
1000d26a:	3402      	adds	r4, #2
1000d26c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
1000d270:	42b3      	cmp	r3, r6
1000d272:	d1c9      	bne.n	1000d208 <ai_platform_get_activations_map+0x34>
1000d274:	2001      	movs	r0, #1
1000d276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d278:	a1facade 	.word	0xa1facade

1000d27c <ai_platform_bind_network_params>:
1000d27c:	b1a0      	cbz	r0, 1000d2a8 <ai_platform_bind_network_params+0x2c>
1000d27e:	b1b1      	cbz	r1, 1000d2ae <ai_platform_bind_network_params+0x32>
1000d280:	b1c2      	cbz	r2, 1000d2b4 <ai_platform_bind_network_params+0x38>
1000d282:	b410      	push	{r4}
1000d284:	4603      	mov	r3, r0
1000d286:	4c0d      	ldr	r4, [pc, #52]	; (1000d2bc <ai_platform_bind_network_params+0x40>)
1000d288:	f843 4b04 	str.w	r4, [r3], #4
1000d28c:	f100 0c0c 	add.w	ip, r0, #12
1000d290:	c903      	ldmia	r1, {r0, r1}
1000d292:	e883 0003 	stmia.w	r3, {r0, r1}
1000d296:	e892 0003 	ldmia.w	r2, {r0, r1}
1000d29a:	e88c 0003 	stmia.w	ip, {r0, r1}
1000d29e:	2301      	movs	r3, #1
1000d2a0:	4618      	mov	r0, r3
1000d2a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1000d2a6:	4770      	bx	lr
1000d2a8:	4603      	mov	r3, r0
1000d2aa:	4618      	mov	r0, r3
1000d2ac:	4770      	bx	lr
1000d2ae:	460b      	mov	r3, r1
1000d2b0:	4618      	mov	r0, r3
1000d2b2:	4770      	bx	lr
1000d2b4:	4613      	mov	r3, r2
1000d2b6:	4618      	mov	r0, r3
1000d2b8:	4770      	bx	lr
1000d2ba:	bf00      	nop
1000d2bc:	a1facade 	.word	0xa1facade

1000d2c0 <ai_platform_network_get_error>:
1000d2c0:	b510      	push	{r4, lr}
1000d2c2:	b198      	cbz	r0, 1000d2ec <ai_platform_network_get_error+0x2c>
1000d2c4:	4b17      	ldr	r3, [pc, #92]	; (1000d324 <ai_platform_network_get_error+0x64>)
1000d2c6:	6802      	ldr	r2, [r0, #0]
1000d2c8:	429a      	cmp	r2, r3
1000d2ca:	4604      	mov	r4, r0
1000d2cc:	d10e      	bne.n	1000d2ec <ai_platform_network_get_error+0x2c>
1000d2ce:	f7ff ff29 	bl	1000d124 <_ai_platform_acquire_crc>
1000d2d2:	4a15      	ldr	r2, [pc, #84]	; (1000d328 <ai_platform_network_get_error+0x68>)
1000d2d4:	2301      	movs	r3, #1
1000d2d6:	6093      	str	r3, [r2, #8]
1000d2d8:	6893      	ldr	r3, [r2, #8]
1000d2da:	2b00      	cmp	r3, #0
1000d2dc:	d1fc      	bne.n	1000d2d8 <ai_platform_network_get_error+0x18>
1000d2de:	4b13      	ldr	r3, [pc, #76]	; (1000d32c <ai_platform_network_get_error+0x6c>)
1000d2e0:	6013      	str	r3, [r2, #0]
1000d2e2:	6812      	ldr	r2, [r2, #0]
1000d2e4:	4b12      	ldr	r3, [pc, #72]	; (1000d330 <ai_platform_network_get_error+0x70>)
1000d2e6:	429a      	cmp	r2, r3
1000d2e8:	d014      	beq.n	1000d314 <ai_platform_network_get_error+0x54>
1000d2ea:	e7fe      	b.n	1000d2ea <ai_platform_network_get_error+0x2a>
1000d2ec:	f7ff ff1a 	bl	1000d124 <_ai_platform_acquire_crc>
1000d2f0:	4a0d      	ldr	r2, [pc, #52]	; (1000d328 <ai_platform_network_get_error+0x68>)
1000d2f2:	2301      	movs	r3, #1
1000d2f4:	6093      	str	r3, [r2, #8]
1000d2f6:	6893      	ldr	r3, [r2, #8]
1000d2f8:	2b00      	cmp	r3, #0
1000d2fa:	d1fc      	bne.n	1000d2f6 <ai_platform_network_get_error+0x36>
1000d2fc:	4b0b      	ldr	r3, [pc, #44]	; (1000d32c <ai_platform_network_get_error+0x6c>)
1000d2fe:	6013      	str	r3, [r2, #0]
1000d300:	6812      	ldr	r2, [r2, #0]
1000d302:	4b0b      	ldr	r3, [pc, #44]	; (1000d330 <ai_platform_network_get_error+0x70>)
1000d304:	429a      	cmp	r2, r3
1000d306:	d000      	beq.n	1000d30a <ai_platform_network_get_error+0x4a>
1000d308:	e7fe      	b.n	1000d308 <ai_platform_network_get_error+0x48>
1000d30a:	f7ff ff0d 	bl	1000d128 <_ai_platform_release_crc>
1000d30e:	f241 0010 	movw	r0, #4112	; 0x1010
1000d312:	bd10      	pop	{r4, pc}
1000d314:	f7ff ff08 	bl	1000d128 <_ai_platform_release_crc>
1000d318:	f104 0010 	add.w	r0, r4, #16
1000d31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000d320:	f000 bd36 	b.w	1000dd90 <core_get_error>
1000d324:	a1c00100 	.word	0xa1c00100
1000d328:	4c004000 	.word	0x4c004000
1000d32c:	f407a5c2 	.word	0xf407a5c2
1000d330:	b5e8b5cd 	.word	0xb5e8b5cd

1000d334 <ai_platform_network_set_error>:
1000d334:	b110      	cbz	r0, 1000d33c <ai_platform_network_set_error+0x8>
1000d336:	3010      	adds	r0, #16
1000d338:	f000 bd30 	b.w	1000dd9c <core_set_error>
1000d33c:	4770      	bx	lr
1000d33e:	bf00      	nop

1000d340 <ai_platform_inputs_get>:
1000d340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000d344:	b083      	sub	sp, #12
1000d346:	9100      	str	r1, [sp, #0]
1000d348:	b198      	cbz	r0, 1000d372 <ai_platform_inputs_get+0x32>
1000d34a:	4b47      	ldr	r3, [pc, #284]	; (1000d468 <ai_platform_inputs_get+0x128>)
1000d34c:	6802      	ldr	r2, [r0, #0]
1000d34e:	429a      	cmp	r2, r3
1000d350:	4607      	mov	r7, r0
1000d352:	d10e      	bne.n	1000d372 <ai_platform_inputs_get+0x32>
1000d354:	f7ff fee6 	bl	1000d124 <_ai_platform_acquire_crc>
1000d358:	4b44      	ldr	r3, [pc, #272]	; (1000d46c <ai_platform_inputs_get+0x12c>)
1000d35a:	2201      	movs	r2, #1
1000d35c:	609a      	str	r2, [r3, #8]
1000d35e:	689c      	ldr	r4, [r3, #8]
1000d360:	2c00      	cmp	r4, #0
1000d362:	d1fc      	bne.n	1000d35e <ai_platform_inputs_get+0x1e>
1000d364:	4a42      	ldr	r2, [pc, #264]	; (1000d470 <ai_platform_inputs_get+0x130>)
1000d366:	601a      	str	r2, [r3, #0]
1000d368:	681a      	ldr	r2, [r3, #0]
1000d36a:	4b42      	ldr	r3, [pc, #264]	; (1000d474 <ai_platform_inputs_get+0x134>)
1000d36c:	429a      	cmp	r2, r3
1000d36e:	d015      	beq.n	1000d39c <ai_platform_inputs_get+0x5c>
1000d370:	e7fe      	b.n	1000d370 <ai_platform_inputs_get+0x30>
1000d372:	f7ff fed7 	bl	1000d124 <_ai_platform_acquire_crc>
1000d376:	4b3d      	ldr	r3, [pc, #244]	; (1000d46c <ai_platform_inputs_get+0x12c>)
1000d378:	2201      	movs	r2, #1
1000d37a:	609a      	str	r2, [r3, #8]
1000d37c:	689c      	ldr	r4, [r3, #8]
1000d37e:	2c00      	cmp	r4, #0
1000d380:	d1fc      	bne.n	1000d37c <ai_platform_inputs_get+0x3c>
1000d382:	4a3b      	ldr	r2, [pc, #236]	; (1000d470 <ai_platform_inputs_get+0x130>)
1000d384:	601a      	str	r2, [r3, #0]
1000d386:	681a      	ldr	r2, [r3, #0]
1000d388:	4b3a      	ldr	r3, [pc, #232]	; (1000d474 <ai_platform_inputs_get+0x134>)
1000d38a:	429a      	cmp	r2, r3
1000d38c:	d000      	beq.n	1000d390 <ai_platform_inputs_get+0x50>
1000d38e:	e7fe      	b.n	1000d38e <ai_platform_inputs_get+0x4e>
1000d390:	f7ff feca 	bl	1000d128 <_ai_platform_release_crc>
1000d394:	4620      	mov	r0, r4
1000d396:	b003      	add	sp, #12
1000d398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000d39c:	f7ff fec4 	bl	1000d128 <_ai_platform_release_crc>
1000d3a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
1000d3a2:	2b00      	cmp	r3, #0
1000d3a4:	d04c      	beq.n	1000d440 <ai_platform_inputs_get+0x100>
1000d3a6:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
1000d3aa:	f1b9 0f00 	cmp.w	r9, #0
1000d3ae:	d047      	beq.n	1000d440 <ai_platform_inputs_get+0x100>
1000d3b0:	46a2      	mov	sl, r4
1000d3b2:	9701      	str	r7, [sp, #4]
1000d3b4:	e016      	b.n	1000d3e4 <ai_platform_inputs_get+0xa4>
1000d3b6:	2201      	movs	r2, #1
1000d3b8:	f847 200e 	str.w	r2, [r7, lr]
1000d3bc:	69b2      	ldr	r2, [r6, #24]
1000d3be:	6852      	ldr	r2, [r2, #4]
1000d3c0:	60ab      	str	r3, [r5, #8]
1000d3c2:	f04f 0301 	mov.w	r3, #1
1000d3c6:	752b      	strb	r3, [r5, #20]
1000d3c8:	2300      	movs	r3, #0
1000d3ca:	60eb      	str	r3, [r5, #12]
1000d3cc:	696b      	ldr	r3, [r5, #20]
1000d3ce:	612a      	str	r2, [r5, #16]
1000d3d0:	e9c5 0100 	strd	r0, r1, [r5]
1000d3d4:	f36b 231f 	bfi	r3, fp, #8, #24
1000d3d8:	f8c5 8018 	str.w	r8, [r5, #24]
1000d3dc:	3401      	adds	r4, #1
1000d3de:	f10a 0a1c 	add.w	sl, sl, #28
1000d3e2:	616b      	str	r3, [r5, #20]
1000d3e4:	f8b9 3000 	ldrh.w	r3, [r9]
1000d3e8:	42a3      	cmp	r3, r4
1000d3ea:	b2a2      	uxth	r2, r4
1000d3ec:	d935      	bls.n	1000d45a <ai_platform_inputs_get+0x11a>
1000d3ee:	f8d9 3004 	ldr.w	r3, [r9, #4]
1000d3f2:	2b00      	cmp	r3, #0
1000d3f4:	d031      	beq.n	1000d45a <ai_platform_inputs_get+0x11a>
1000d3f6:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
1000d3fa:	b376      	cbz	r6, 1000d45a <ai_platform_inputs_get+0x11a>
1000d3fc:	f8d9 3008 	ldr.w	r3, [r9, #8]
1000d400:	69b2      	ldr	r2, [r6, #24]
1000d402:	f8d6 800c 	ldr.w	r8, [r6, #12]
1000d406:	6810      	ldr	r0, [r2, #0]
1000d408:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
1000d40c:	68b3      	ldr	r3, [r6, #8]
1000d40e:	f3c3 2b17 	ubfx	fp, r3, #8, #24
1000d412:	f001 ff8d 	bl	1000f330 <ai_array_to_buffer_fmt>
1000d416:	69b2      	ldr	r2, [r6, #24]
1000d418:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
1000d41c:	6891      	ldr	r1, [r2, #8]
1000d41e:	4455      	add	r5, sl
1000d420:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
1000d424:	2b00      	cmp	r3, #0
1000d426:	d0ca      	beq.n	1000d3be <ai_platform_inputs_get+0x7e>
1000d428:	2200      	movs	r2, #0
1000d42a:	f847 2034 	str.w	r2, [r7, r4, lsl #3]
1000d42e:	6832      	ldr	r2, [r6, #0]
1000d430:	605a      	str	r2, [r3, #4]
1000d432:	b112      	cbz	r2, 1000d43a <ai_platform_inputs_get+0xfa>
1000d434:	8852      	ldrh	r2, [r2, #2]
1000d436:	2a00      	cmp	r2, #0
1000d438:	d1bd      	bne.n	1000d3b6 <ai_platform_inputs_get+0x76>
1000d43a:	69b2      	ldr	r2, [r6, #24]
1000d43c:	2300      	movs	r3, #0
1000d43e:	e7be      	b.n	1000d3be <ai_platform_inputs_get+0x7e>
1000d440:	2218      	movs	r2, #24
1000d442:	2111      	movs	r1, #17
1000d444:	f107 0010 	add.w	r0, r7, #16
1000d448:	f000 fca8 	bl	1000dd9c <core_set_error>
1000d44c:	2200      	movs	r2, #0
1000d44e:	4610      	mov	r0, r2
1000d450:	9b00      	ldr	r3, [sp, #0]
1000d452:	2b00      	cmp	r3, #0
1000d454:	d09f      	beq.n	1000d396 <ai_platform_inputs_get+0x56>
1000d456:	801a      	strh	r2, [r3, #0]
1000d458:	e79d      	b.n	1000d396 <ai_platform_inputs_get+0x56>
1000d45a:	9f01      	ldr	r7, [sp, #4]
1000d45c:	2a00      	cmp	r2, #0
1000d45e:	d0ef      	beq.n	1000d440 <ai_platform_inputs_get+0x100>
1000d460:	f8d9 3008 	ldr.w	r3, [r9, #8]
1000d464:	6858      	ldr	r0, [r3, #4]
1000d466:	e7f3      	b.n	1000d450 <ai_platform_inputs_get+0x110>
1000d468:	a1c00100 	.word	0xa1c00100
1000d46c:	4c004000 	.word	0x4c004000
1000d470:	f407a5c2 	.word	0xf407a5c2
1000d474:	b5e8b5cd 	.word	0xb5e8b5cd

1000d478 <ai_platform_outputs_get>:
1000d478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000d47c:	b083      	sub	sp, #12
1000d47e:	9100      	str	r1, [sp, #0]
1000d480:	b198      	cbz	r0, 1000d4aa <ai_platform_outputs_get+0x32>
1000d482:	4b45      	ldr	r3, [pc, #276]	; (1000d598 <ai_platform_outputs_get+0x120>)
1000d484:	6802      	ldr	r2, [r0, #0]
1000d486:	429a      	cmp	r2, r3
1000d488:	4607      	mov	r7, r0
1000d48a:	d10e      	bne.n	1000d4aa <ai_platform_outputs_get+0x32>
1000d48c:	f7ff fe4a 	bl	1000d124 <_ai_platform_acquire_crc>
1000d490:	4b42      	ldr	r3, [pc, #264]	; (1000d59c <ai_platform_outputs_get+0x124>)
1000d492:	2201      	movs	r2, #1
1000d494:	609a      	str	r2, [r3, #8]
1000d496:	689c      	ldr	r4, [r3, #8]
1000d498:	2c00      	cmp	r4, #0
1000d49a:	d1fc      	bne.n	1000d496 <ai_platform_outputs_get+0x1e>
1000d49c:	4a40      	ldr	r2, [pc, #256]	; (1000d5a0 <ai_platform_outputs_get+0x128>)
1000d49e:	601a      	str	r2, [r3, #0]
1000d4a0:	681a      	ldr	r2, [r3, #0]
1000d4a2:	4b40      	ldr	r3, [pc, #256]	; (1000d5a4 <ai_platform_outputs_get+0x12c>)
1000d4a4:	429a      	cmp	r2, r3
1000d4a6:	d015      	beq.n	1000d4d4 <ai_platform_outputs_get+0x5c>
1000d4a8:	e7fe      	b.n	1000d4a8 <ai_platform_outputs_get+0x30>
1000d4aa:	f7ff fe3b 	bl	1000d124 <_ai_platform_acquire_crc>
1000d4ae:	4b3b      	ldr	r3, [pc, #236]	; (1000d59c <ai_platform_outputs_get+0x124>)
1000d4b0:	2201      	movs	r2, #1
1000d4b2:	609a      	str	r2, [r3, #8]
1000d4b4:	689c      	ldr	r4, [r3, #8]
1000d4b6:	2c00      	cmp	r4, #0
1000d4b8:	d1fc      	bne.n	1000d4b4 <ai_platform_outputs_get+0x3c>
1000d4ba:	4a39      	ldr	r2, [pc, #228]	; (1000d5a0 <ai_platform_outputs_get+0x128>)
1000d4bc:	601a      	str	r2, [r3, #0]
1000d4be:	681a      	ldr	r2, [r3, #0]
1000d4c0:	4b38      	ldr	r3, [pc, #224]	; (1000d5a4 <ai_platform_outputs_get+0x12c>)
1000d4c2:	429a      	cmp	r2, r3
1000d4c4:	d000      	beq.n	1000d4c8 <ai_platform_outputs_get+0x50>
1000d4c6:	e7fe      	b.n	1000d4c6 <ai_platform_outputs_get+0x4e>
1000d4c8:	f7ff fe2e 	bl	1000d128 <_ai_platform_release_crc>
1000d4cc:	4620      	mov	r0, r4
1000d4ce:	b003      	add	sp, #12
1000d4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000d4d4:	f7ff fe28 	bl	1000d128 <_ai_platform_release_crc>
1000d4d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
1000d4da:	2b01      	cmp	r3, #1
1000d4dc:	d952      	bls.n	1000d584 <ai_platform_outputs_get+0x10c>
1000d4de:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
1000d4e2:	9701      	str	r7, [sp, #4]
1000d4e4:	46a2      	mov	sl, r4
1000d4e6:	e016      	b.n	1000d516 <ai_platform_outputs_get+0x9e>
1000d4e8:	2201      	movs	r2, #1
1000d4ea:	f847 200e 	str.w	r2, [r7, lr]
1000d4ee:	69b2      	ldr	r2, [r6, #24]
1000d4f0:	6852      	ldr	r2, [r2, #4]
1000d4f2:	60ab      	str	r3, [r5, #8]
1000d4f4:	f04f 0301 	mov.w	r3, #1
1000d4f8:	752b      	strb	r3, [r5, #20]
1000d4fa:	2300      	movs	r3, #0
1000d4fc:	60eb      	str	r3, [r5, #12]
1000d4fe:	696b      	ldr	r3, [r5, #20]
1000d500:	612a      	str	r2, [r5, #16]
1000d502:	e9c5 0100 	strd	r0, r1, [r5]
1000d506:	f36b 231f 	bfi	r3, fp, #8, #24
1000d50a:	f8c5 8018 	str.w	r8, [r5, #24]
1000d50e:	3401      	adds	r4, #1
1000d510:	f10a 0a1c 	add.w	sl, sl, #28
1000d514:	616b      	str	r3, [r5, #20]
1000d516:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1000d51a:	42a3      	cmp	r3, r4
1000d51c:	b2a2      	uxth	r2, r4
1000d51e:	d927      	bls.n	1000d570 <ai_platform_outputs_get+0xf8>
1000d520:	f8d9 3010 	ldr.w	r3, [r9, #16]
1000d524:	b323      	cbz	r3, 1000d570 <ai_platform_outputs_get+0xf8>
1000d526:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
1000d52a:	b30e      	cbz	r6, 1000d570 <ai_platform_outputs_get+0xf8>
1000d52c:	f8d9 3014 	ldr.w	r3, [r9, #20]
1000d530:	69b2      	ldr	r2, [r6, #24]
1000d532:	f8d6 800c 	ldr.w	r8, [r6, #12]
1000d536:	6810      	ldr	r0, [r2, #0]
1000d538:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
1000d53c:	68b3      	ldr	r3, [r6, #8]
1000d53e:	f3c3 2b17 	ubfx	fp, r3, #8, #24
1000d542:	f001 fef5 	bl	1000f330 <ai_array_to_buffer_fmt>
1000d546:	69b2      	ldr	r2, [r6, #24]
1000d548:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
1000d54c:	6891      	ldr	r1, [r2, #8]
1000d54e:	4455      	add	r5, sl
1000d550:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
1000d554:	2b00      	cmp	r3, #0
1000d556:	d0cb      	beq.n	1000d4f0 <ai_platform_outputs_get+0x78>
1000d558:	2200      	movs	r2, #0
1000d55a:	f847 2034 	str.w	r2, [r7, r4, lsl #3]
1000d55e:	6832      	ldr	r2, [r6, #0]
1000d560:	605a      	str	r2, [r3, #4]
1000d562:	b112      	cbz	r2, 1000d56a <ai_platform_outputs_get+0xf2>
1000d564:	8852      	ldrh	r2, [r2, #2]
1000d566:	2a00      	cmp	r2, #0
1000d568:	d1be      	bne.n	1000d4e8 <ai_platform_outputs_get+0x70>
1000d56a:	69b2      	ldr	r2, [r6, #24]
1000d56c:	2300      	movs	r3, #0
1000d56e:	e7bf      	b.n	1000d4f0 <ai_platform_outputs_get+0x78>
1000d570:	9f01      	ldr	r7, [sp, #4]
1000d572:	b13a      	cbz	r2, 1000d584 <ai_platform_outputs_get+0x10c>
1000d574:	f8d9 3014 	ldr.w	r3, [r9, #20]
1000d578:	6858      	ldr	r0, [r3, #4]
1000d57a:	9b00      	ldr	r3, [sp, #0]
1000d57c:	2b00      	cmp	r3, #0
1000d57e:	d0a6      	beq.n	1000d4ce <ai_platform_outputs_get+0x56>
1000d580:	801a      	strh	r2, [r3, #0]
1000d582:	e7a4      	b.n	1000d4ce <ai_platform_outputs_get+0x56>
1000d584:	2218      	movs	r2, #24
1000d586:	2111      	movs	r1, #17
1000d588:	f107 0010 	add.w	r0, r7, #16
1000d58c:	f000 fc06 	bl	1000dd9c <core_set_error>
1000d590:	2200      	movs	r2, #0
1000d592:	4610      	mov	r0, r2
1000d594:	e7f1      	b.n	1000d57a <ai_platform_outputs_get+0x102>
1000d596:	bf00      	nop
1000d598:	a1c00100 	.word	0xa1c00100
1000d59c:	4c004000 	.word	0x4c004000
1000d5a0:	f407a5c2 	.word	0xf407a5c2
1000d5a4:	b5e8b5cd 	.word	0xb5e8b5cd

1000d5a8 <ai_platform_network_create>:
1000d5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1000d5ac:	b082      	sub	sp, #8
1000d5ae:	4605      	mov	r5, r0
1000d5b0:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
1000d5b4:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
1000d5b8:	4616      	mov	r6, r2
1000d5ba:	461f      	mov	r7, r3
1000d5bc:	f7ff fdb2 	bl	1000d124 <_ai_platform_acquire_crc>
1000d5c0:	b138      	cbz	r0, 1000d5d2 <ai_platform_network_create+0x2a>
1000d5c2:	4c38      	ldr	r4, [pc, #224]	; (1000d6a4 <ai_platform_network_create+0xfc>)
1000d5c4:	2218      	movs	r2, #24
1000d5c6:	60a2      	str	r2, [r4, #8]
1000d5c8:	68a2      	ldr	r2, [r4, #8]
1000d5ca:	2a18      	cmp	r2, #24
1000d5cc:	d006      	beq.n	1000d5dc <ai_platform_network_create+0x34>
1000d5ce:	f7ff fdab 	bl	1000d128 <_ai_platform_release_crc>
1000d5d2:	f244 1033 	movw	r0, #16691	; 0x4133
1000d5d6:	b002      	add	sp, #8
1000d5d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000d5dc:	2201      	movs	r2, #1
1000d5de:	4603      	mov	r3, r0
1000d5e0:	60a2      	str	r2, [r4, #8]
1000d5e2:	68a2      	ldr	r2, [r4, #8]
1000d5e4:	2a00      	cmp	r2, #0
1000d5e6:	d1fc      	bne.n	1000d5e2 <ai_platform_network_create+0x3a>
1000d5e8:	4618      	mov	r0, r3
1000d5ea:	f7ff fd9d 	bl	1000d128 <_ai_platform_release_crc>
1000d5ee:	f7ff fd99 	bl	1000d124 <_ai_platform_acquire_crc>
1000d5f2:	2301      	movs	r3, #1
1000d5f4:	60a3      	str	r3, [r4, #8]
1000d5f6:	4c2b      	ldr	r4, [pc, #172]	; (1000d6a4 <ai_platform_network_create+0xfc>)
1000d5f8:	68a1      	ldr	r1, [r4, #8]
1000d5fa:	2900      	cmp	r1, #0
1000d5fc:	d1fc      	bne.n	1000d5f8 <ai_platform_network_create+0x50>
1000d5fe:	4b2a      	ldr	r3, [pc, #168]	; (1000d6a8 <ai_platform_network_create+0x100>)
1000d600:	6023      	str	r3, [r4, #0]
1000d602:	6822      	ldr	r2, [r4, #0]
1000d604:	4b29      	ldr	r3, [pc, #164]	; (1000d6ac <ai_platform_network_create+0x104>)
1000d606:	429a      	cmp	r2, r3
1000d608:	d000      	beq.n	1000d60c <ai_platform_network_create+0x64>
1000d60a:	e7fe      	b.n	1000d60a <ai_platform_network_create+0x62>
1000d60c:	f7ff fd8c 	bl	1000d128 <_ai_platform_release_crc>
1000d610:	2d00      	cmp	r5, #0
1000d612:	d038      	beq.n	1000d686 <ai_platform_network_create+0xde>
1000d614:	4b26      	ldr	r3, [pc, #152]	; (1000d6b0 <ai_platform_network_create+0x108>)
1000d616:	6033      	str	r3, [r6, #0]
1000d618:	602e      	str	r6, [r5, #0]
1000d61a:	f000 fbb7 	bl	1000dd8c <core_init>
1000d61e:	b988      	cbnz	r0, 1000d644 <ai_platform_network_create+0x9c>
1000d620:	f04f 0a30 	mov.w	sl, #48	; 0x30
1000d624:	2300      	movs	r3, #0
1000d626:	602b      	str	r3, [r5, #0]
1000d628:	2410      	movs	r4, #16
1000d62a:	464a      	mov	r2, r9
1000d62c:	4641      	mov	r1, r8
1000d62e:	4638      	mov	r0, r7
1000d630:	f001 ff24 	bl	1000f47c <ai_version_get>
1000d634:	4603      	mov	r3, r0
1000d636:	2000      	movs	r0, #0
1000d638:	f36a 0007 	bfi	r0, sl, #0, #8
1000d63c:	64b3      	str	r3, [r6, #72]	; 0x48
1000d63e:	f364 201f 	bfi	r0, r4, #8, #24
1000d642:	e7c8      	b.n	1000d5d6 <ai_platform_network_create+0x2e>
1000d644:	f7ff fd6e 	bl	1000d124 <_ai_platform_acquire_crc>
1000d648:	2301      	movs	r3, #1
1000d64a:	60a3      	str	r3, [r4, #8]
1000d64c:	4b15      	ldr	r3, [pc, #84]	; (1000d6a4 <ai_platform_network_create+0xfc>)
1000d64e:	689c      	ldr	r4, [r3, #8]
1000d650:	2c00      	cmp	r4, #0
1000d652:	d1fc      	bne.n	1000d64e <ai_platform_network_create+0xa6>
1000d654:	4a14      	ldr	r2, [pc, #80]	; (1000d6a8 <ai_platform_network_create+0x100>)
1000d656:	601a      	str	r2, [r3, #0]
1000d658:	681a      	ldr	r2, [r3, #0]
1000d65a:	4b14      	ldr	r3, [pc, #80]	; (1000d6ac <ai_platform_network_create+0x104>)
1000d65c:	429a      	cmp	r2, r3
1000d65e:	d000      	beq.n	1000d662 <ai_platform_network_create+0xba>
1000d660:	e7fe      	b.n	1000d660 <ai_platform_network_create+0xb8>
1000d662:	f7ff fd61 	bl	1000d128 <_ai_platform_release_crc>
1000d666:	4622      	mov	r2, r4
1000d668:	4641      	mov	r1, r8
1000d66a:	4638      	mov	r0, r7
1000d66c:	f001 ff06 	bl	1000f47c <ai_version_get>
1000d670:	4622      	mov	r2, r4
1000d672:	4682      	mov	sl, r0
1000d674:	2105      	movs	r1, #5
1000d676:	2001      	movs	r0, #1
1000d678:	f001 ff00 	bl	1000f47c <ai_version_get>
1000d67c:	4582      	cmp	sl, r0
1000d67e:	d005      	beq.n	1000d68c <ai_platform_network_create+0xe4>
1000d680:	f04f 0a01 	mov.w	sl, #1
1000d684:	e7ce      	b.n	1000d624 <ai_platform_network_create+0x7c>
1000d686:	f241 0010 	movw	r0, #4112	; 0x1010
1000d68a:	e7a4      	b.n	1000d5d6 <ai_platform_network_create+0x2e>
1000d68c:	4b09      	ldr	r3, [pc, #36]	; (1000d6b4 <ai_platform_network_create+0x10c>)
1000d68e:	9301      	str	r3, [sp, #4]
1000d690:	a801      	add	r0, sp, #4
1000d692:	f000 fb8f 	bl	1000ddb4 <ai_check_custom_types>
1000d696:	b108      	cbz	r0, 1000d69c <ai_platform_network_create+0xf4>
1000d698:	46a2      	mov	sl, r4
1000d69a:	e7c6      	b.n	1000d62a <ai_platform_network_create+0x82>
1000d69c:	f04f 0a02 	mov.w	sl, #2
1000d6a0:	e7c0      	b.n	1000d624 <ai_platform_network_create+0x7c>
1000d6a2:	bf00      	nop
1000d6a4:	4c004000 	.word	0x4c004000
1000d6a8:	f407a5c2 	.word	0xf407a5c2
1000d6ac:	b5e8b5cd 	.word	0xb5e8b5cd
1000d6b0:	a1c00100 	.word	0xa1c00100
1000d6b4:	84048403 	.word	0x84048403

1000d6b8 <ai_platform_network_init>:
1000d6b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1000d6bc:	b1a0      	cbz	r0, 1000d6e8 <ai_platform_network_init+0x30>
1000d6be:	4b53      	ldr	r3, [pc, #332]	; (1000d80c <ai_platform_network_init+0x154>)
1000d6c0:	6802      	ldr	r2, [r0, #0]
1000d6c2:	429a      	cmp	r2, r3
1000d6c4:	4605      	mov	r5, r0
1000d6c6:	d10f      	bne.n	1000d6e8 <ai_platform_network_init+0x30>
1000d6c8:	460c      	mov	r4, r1
1000d6ca:	f7ff fd2b 	bl	1000d124 <_ai_platform_acquire_crc>
1000d6ce:	4a50      	ldr	r2, [pc, #320]	; (1000d810 <ai_platform_network_init+0x158>)
1000d6d0:	2301      	movs	r3, #1
1000d6d2:	6093      	str	r3, [r2, #8]
1000d6d4:	6893      	ldr	r3, [r2, #8]
1000d6d6:	2b00      	cmp	r3, #0
1000d6d8:	d1fc      	bne.n	1000d6d4 <ai_platform_network_init+0x1c>
1000d6da:	4b4e      	ldr	r3, [pc, #312]	; (1000d814 <ai_platform_network_init+0x15c>)
1000d6dc:	6013      	str	r3, [r2, #0]
1000d6de:	6812      	ldr	r2, [r2, #0]
1000d6e0:	4b4d      	ldr	r3, [pc, #308]	; (1000d818 <ai_platform_network_init+0x160>)
1000d6e2:	429a      	cmp	r2, r3
1000d6e4:	d014      	beq.n	1000d710 <ai_platform_network_init+0x58>
1000d6e6:	e7fe      	b.n	1000d6e6 <ai_platform_network_init+0x2e>
1000d6e8:	f7ff fd1c 	bl	1000d124 <_ai_platform_acquire_crc>
1000d6ec:	4b48      	ldr	r3, [pc, #288]	; (1000d810 <ai_platform_network_init+0x158>)
1000d6ee:	2201      	movs	r2, #1
1000d6f0:	609a      	str	r2, [r3, #8]
1000d6f2:	689c      	ldr	r4, [r3, #8]
1000d6f4:	2c00      	cmp	r4, #0
1000d6f6:	d1fc      	bne.n	1000d6f2 <ai_platform_network_init+0x3a>
1000d6f8:	4a46      	ldr	r2, [pc, #280]	; (1000d814 <ai_platform_network_init+0x15c>)
1000d6fa:	601a      	str	r2, [r3, #0]
1000d6fc:	681a      	ldr	r2, [r3, #0]
1000d6fe:	4b46      	ldr	r3, [pc, #280]	; (1000d818 <ai_platform_network_init+0x160>)
1000d700:	429a      	cmp	r2, r3
1000d702:	d000      	beq.n	1000d706 <ai_platform_network_init+0x4e>
1000d704:	e7fe      	b.n	1000d704 <ai_platform_network_init+0x4c>
1000d706:	f7ff fd0f 	bl	1000d128 <_ai_platform_release_crc>
1000d70a:	4620      	mov	r0, r4
1000d70c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000d710:	f7ff fd0a 	bl	1000d128 <_ai_platform_release_crc>
1000d714:	2c00      	cmp	r4, #0
1000d716:	d06c      	beq.n	1000d7f2 <ai_platform_network_init+0x13a>
1000d718:	4b40      	ldr	r3, [pc, #256]	; (1000d81c <ai_platform_network_init+0x164>)
1000d71a:	6822      	ldr	r2, [r4, #0]
1000d71c:	429a      	cmp	r2, r3
1000d71e:	d110      	bne.n	1000d742 <ai_platform_network_init+0x8a>
1000d720:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
1000d724:	6923      	ldr	r3, [r4, #16]
1000d726:	89a6      	ldrh	r6, [r4, #12]
1000d728:	89e7      	ldrh	r7, [r4, #14]
1000d72a:	62ab      	str	r3, [r5, #40]	; 0x28
1000d72c:	e9c5 2107 	strd	r2, r1, [r5, #28]
1000d730:	2303      	movs	r3, #3
1000d732:	84ef      	strh	r7, [r5, #38]	; 0x26
1000d734:	84ae      	strh	r6, [r5, #36]	; 0x24
1000d736:	60eb      	str	r3, [r5, #12]
1000d738:	4628      	mov	r0, r5
1000d73a:	f000 fb65 	bl	1000de08 <ai_layers_init_all>
1000d73e:	462c      	mov	r4, r5
1000d740:	e7e3      	b.n	1000d70a <ai_platform_network_init+0x52>
1000d742:	2101      	movs	r1, #1
1000d744:	4620      	mov	r0, r4
1000d746:	46a1      	mov	r9, r4
1000d748:	6864      	ldr	r4, [r4, #4]
1000d74a:	f7ff fc9d 	bl	1000d088 <ai_buffer_get_size>
1000d74e:	f109 081c 	add.w	r8, r9, #28
1000d752:	4606      	mov	r6, r0
1000d754:	2101      	movs	r1, #1
1000d756:	4640      	mov	r0, r8
1000d758:	f8d9 7020 	ldr.w	r7, [r9, #32]
1000d75c:	f7ff fc94 	bl	1000d088 <ai_buffer_get_size>
1000d760:	bb5e      	cbnz	r6, 1000d7ba <ai_platform_network_init+0x102>
1000d762:	4633      	mov	r3, r6
1000d764:	46b6      	mov	lr, r6
1000d766:	46b1      	mov	r9, r6
1000d768:	bb20      	cbnz	r0, 1000d7b4 <ai_platform_network_init+0xfc>
1000d76a:	4680      	mov	r8, r0
1000d76c:	4607      	mov	r7, r0
1000d76e:	b37c      	cbz	r4, 1000d7d0 <ai_platform_network_init+0x118>
1000d770:	8bea      	ldrh	r2, [r5, #30]
1000d772:	4572      	cmp	r2, lr
1000d774:	d324      	bcc.n	1000d7c0 <ai_platform_network_init+0x108>
1000d776:	b143      	cbz	r3, 1000d78a <ai_platform_network_init+0xd2>
1000d778:	46cc      	mov	ip, r9
1000d77a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
1000d77e:	6a2c      	ldr	r4, [r5, #32]
1000d780:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1000d782:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
1000d786:	e884 0007 	stmia.w	r4, {r0, r1, r2}
1000d78a:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
1000d78c:	f8a5 e01e 	strh.w	lr, [r5, #30]
1000d790:	2400      	movs	r4, #0
1000d792:	42bb      	cmp	r3, r7
1000d794:	83ac      	strh	r4, [r5, #28]
1000d796:	d323      	bcc.n	1000d7e0 <ai_platform_network_init+0x128>
1000d798:	b34f      	cbz	r7, 1000d7ee <ai_platform_network_init+0x136>
1000d79a:	46c6      	mov	lr, r8
1000d79c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
1000d7a0:	f8d5 c028 	ldr.w	ip, [r5, #40]	; 0x28
1000d7a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
1000d7a8:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
1000d7ac:	4626      	mov	r6, r4
1000d7ae:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
1000d7b2:	e7bd      	b.n	1000d730 <ai_platform_network_init+0x78>
1000d7b4:	b31f      	cbz	r7, 1000d7fe <ai_platform_network_init+0x146>
1000d7b6:	2701      	movs	r7, #1
1000d7b8:	e7d9      	b.n	1000d76e <ai_platform_network_init+0xb6>
1000d7ba:	2301      	movs	r3, #1
1000d7bc:	469e      	mov	lr, r3
1000d7be:	e7d3      	b.n	1000d768 <ai_platform_network_init+0xb0>
1000d7c0:	2212      	movs	r2, #18
1000d7c2:	2116      	movs	r1, #22
1000d7c4:	f105 0010 	add.w	r0, r5, #16
1000d7c8:	f000 fae8 	bl	1000dd9c <core_set_error>
1000d7cc:	2400      	movs	r4, #0
1000d7ce:	e79c      	b.n	1000d70a <ai_platform_network_init+0x52>
1000d7d0:	2e00      	cmp	r6, #0
1000d7d2:	d0cd      	beq.n	1000d770 <ai_platform_network_init+0xb8>
1000d7d4:	2110      	movs	r1, #16
1000d7d6:	2212      	movs	r2, #18
1000d7d8:	1868      	adds	r0, r5, r1
1000d7da:	f000 fadf 	bl	1000dd9c <core_set_error>
1000d7de:	e794      	b.n	1000d70a <ai_platform_network_init+0x52>
1000d7e0:	2213      	movs	r2, #19
1000d7e2:	2116      	movs	r1, #22
1000d7e4:	f105 0010 	add.w	r0, r5, #16
1000d7e8:	f000 fad8 	bl	1000dd9c <core_set_error>
1000d7ec:	e78d      	b.n	1000d70a <ai_platform_network_init+0x52>
1000d7ee:	463e      	mov	r6, r7
1000d7f0:	e79e      	b.n	1000d730 <ai_platform_network_init+0x78>
1000d7f2:	2110      	movs	r1, #16
1000d7f4:	2211      	movs	r2, #17
1000d7f6:	1868      	adds	r0, r5, r1
1000d7f8:	f000 fad0 	bl	1000dd9c <core_set_error>
1000d7fc:	e785      	b.n	1000d70a <ai_platform_network_init+0x52>
1000d7fe:	2110      	movs	r1, #16
1000d800:	2213      	movs	r2, #19
1000d802:	1868      	adds	r0, r5, r1
1000d804:	f000 faca 	bl	1000dd9c <core_set_error>
1000d808:	463c      	mov	r4, r7
1000d80a:	e77e      	b.n	1000d70a <ai_platform_network_init+0x52>
1000d80c:	a1c00100 	.word	0xa1c00100
1000d810:	4c004000 	.word	0x4c004000
1000d814:	f407a5c2 	.word	0xf407a5c2
1000d818:	b5e8b5cd 	.word	0xb5e8b5cd
1000d81c:	a1facade 	.word	0xa1facade

1000d820 <ai_platform_network_post_init>:
1000d820:	b538      	push	{r3, r4, r5, lr}
1000d822:	b198      	cbz	r0, 1000d84c <ai_platform_network_post_init+0x2c>
1000d824:	4b24      	ldr	r3, [pc, #144]	; (1000d8b8 <ai_platform_network_post_init+0x98>)
1000d826:	6802      	ldr	r2, [r0, #0]
1000d828:	429a      	cmp	r2, r3
1000d82a:	4605      	mov	r5, r0
1000d82c:	d10e      	bne.n	1000d84c <ai_platform_network_post_init+0x2c>
1000d82e:	f7ff fc79 	bl	1000d124 <_ai_platform_acquire_crc>
1000d832:	4a22      	ldr	r2, [pc, #136]	; (1000d8bc <ai_platform_network_post_init+0x9c>)
1000d834:	2301      	movs	r3, #1
1000d836:	6093      	str	r3, [r2, #8]
1000d838:	6893      	ldr	r3, [r2, #8]
1000d83a:	2b00      	cmp	r3, #0
1000d83c:	d1fc      	bne.n	1000d838 <ai_platform_network_post_init+0x18>
1000d83e:	4b20      	ldr	r3, [pc, #128]	; (1000d8c0 <ai_platform_network_post_init+0xa0>)
1000d840:	6013      	str	r3, [r2, #0]
1000d842:	6812      	ldr	r2, [r2, #0]
1000d844:	4b1f      	ldr	r3, [pc, #124]	; (1000d8c4 <ai_platform_network_post_init+0xa4>)
1000d846:	429a      	cmp	r2, r3
1000d848:	d013      	beq.n	1000d872 <ai_platform_network_post_init+0x52>
1000d84a:	e7fe      	b.n	1000d84a <ai_platform_network_post_init+0x2a>
1000d84c:	f7ff fc6a 	bl	1000d124 <_ai_platform_acquire_crc>
1000d850:	4b1a      	ldr	r3, [pc, #104]	; (1000d8bc <ai_platform_network_post_init+0x9c>)
1000d852:	2201      	movs	r2, #1
1000d854:	609a      	str	r2, [r3, #8]
1000d856:	689c      	ldr	r4, [r3, #8]
1000d858:	2c00      	cmp	r4, #0
1000d85a:	d1fc      	bne.n	1000d856 <ai_platform_network_post_init+0x36>
1000d85c:	4a18      	ldr	r2, [pc, #96]	; (1000d8c0 <ai_platform_network_post_init+0xa0>)
1000d85e:	601a      	str	r2, [r3, #0]
1000d860:	681a      	ldr	r2, [r3, #0]
1000d862:	4b18      	ldr	r3, [pc, #96]	; (1000d8c4 <ai_platform_network_post_init+0xa4>)
1000d864:	429a      	cmp	r2, r3
1000d866:	d000      	beq.n	1000d86a <ai_platform_network_post_init+0x4a>
1000d868:	e7fe      	b.n	1000d868 <ai_platform_network_post_init+0x48>
1000d86a:	f7ff fc5d 	bl	1000d128 <_ai_platform_release_crc>
1000d86e:	4620      	mov	r0, r4
1000d870:	bd38      	pop	{r3, r4, r5, pc}
1000d872:	f7ff fc59 	bl	1000d128 <_ai_platform_release_crc>
1000d876:	68eb      	ldr	r3, [r5, #12]
1000d878:	f013 0402 	ands.w	r4, r3, #2
1000d87c:	d014      	beq.n	1000d8a8 <ai_platform_network_post_init+0x88>
1000d87e:	4628      	mov	r0, r5
1000d880:	f000 fad0 	bl	1000de24 <ai_layers_post_init_all>
1000d884:	6beb      	ldr	r3, [r5, #60]	; 0x3c
1000d886:	b16b      	cbz	r3, 1000d8a4 <ai_platform_network_post_init+0x84>
1000d888:	6b6c      	ldr	r4, [r5, #52]	; 0x34
1000d88a:	e007      	b.n	1000d89c <ai_platform_network_post_init+0x7c>
1000d88c:	e9d5 320f 	ldrd	r3, r2, [r5, #60]	; 0x3c
1000d890:	4798      	blx	r3
1000d892:	6923      	ldr	r3, [r4, #16]
1000d894:	42a3      	cmp	r3, r4
1000d896:	d005      	beq.n	1000d8a4 <ai_platform_network_post_init+0x84>
1000d898:	b123      	cbz	r3, 1000d8a4 <ai_platform_network_post_init+0x84>
1000d89a:	461c      	mov	r4, r3
1000d89c:	4621      	mov	r1, r4
1000d89e:	2000      	movs	r0, #0
1000d8a0:	2c00      	cmp	r4, #0
1000d8a2:	d1f3      	bne.n	1000d88c <ai_platform_network_post_init+0x6c>
1000d8a4:	2001      	movs	r0, #1
1000d8a6:	bd38      	pop	{r3, r4, r5, pc}
1000d8a8:	2210      	movs	r2, #16
1000d8aa:	2111      	movs	r1, #17
1000d8ac:	18a8      	adds	r0, r5, r2
1000d8ae:	f000 fa75 	bl	1000dd9c <core_set_error>
1000d8b2:	4620      	mov	r0, r4
1000d8b4:	bd38      	pop	{r3, r4, r5, pc}
1000d8b6:	bf00      	nop
1000d8b8:	a1c00100 	.word	0xa1c00100
1000d8bc:	4c004000 	.word	0x4c004000
1000d8c0:	f407a5c2 	.word	0xf407a5c2
1000d8c4:	b5e8b5cd 	.word	0xb5e8b5cd

1000d8c8 <ai_platform_network_process>:
1000d8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000d8cc:	460f      	mov	r7, r1
1000d8ce:	b083      	sub	sp, #12
1000d8d0:	4690      	mov	r8, r2
1000d8d2:	4605      	mov	r5, r0
1000d8d4:	b120      	cbz	r0, 1000d8e0 <ai_platform_network_process+0x18>
1000d8d6:	4bb4      	ldr	r3, [pc, #720]	; (1000dba8 <ai_platform_network_process+0x2e0>)
1000d8d8:	6802      	ldr	r2, [r0, #0]
1000d8da:	429a      	cmp	r2, r3
1000d8dc:	bf18      	it	ne
1000d8de:	2500      	movne	r5, #0
1000d8e0:	f7ff fc20 	bl	1000d124 <_ai_platform_acquire_crc>
1000d8e4:	4bb1      	ldr	r3, [pc, #708]	; (1000dbac <ai_platform_network_process+0x2e4>)
1000d8e6:	2201      	movs	r2, #1
1000d8e8:	609a      	str	r2, [r3, #8]
1000d8ea:	689c      	ldr	r4, [r3, #8]
1000d8ec:	2c00      	cmp	r4, #0
1000d8ee:	d1fc      	bne.n	1000d8ea <ai_platform_network_process+0x22>
1000d8f0:	4aaf      	ldr	r2, [pc, #700]	; (1000dbb0 <ai_platform_network_process+0x2e8>)
1000d8f2:	601a      	str	r2, [r3, #0]
1000d8f4:	681a      	ldr	r2, [r3, #0]
1000d8f6:	4baf      	ldr	r3, [pc, #700]	; (1000dbb4 <ai_platform_network_process+0x2ec>)
1000d8f8:	429a      	cmp	r2, r3
1000d8fa:	d000      	beq.n	1000d8fe <ai_platform_network_process+0x36>
1000d8fc:	e7fe      	b.n	1000d8fc <ai_platform_network_process+0x34>
1000d8fe:	f7ff fc13 	bl	1000d128 <_ai_platform_release_crc>
1000d902:	2d00      	cmp	r5, #0
1000d904:	f000 8145 	beq.w	1000db92 <ai_platform_network_process+0x2ca>
1000d908:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
1000d90a:	b98b      	cbnz	r3, 1000d930 <ai_platform_network_process+0x68>
1000d90c:	68ea      	ldr	r2, [r5, #12]
1000d90e:	616b      	str	r3, [r5, #20]
1000d910:	f002 0203 	and.w	r2, r2, #3
1000d914:	2a03      	cmp	r2, #3
1000d916:	f040 8134 	bne.w	1000db82 <ai_platform_network_process+0x2ba>
1000d91a:	2217      	movs	r2, #23
1000d91c:	2112      	movs	r1, #18
1000d91e:	f105 0010 	add.w	r0, r5, #16
1000d922:	f000 fa3b 	bl	1000dd9c <core_set_error>
1000d926:	2600      	movs	r6, #0
1000d928:	4630      	mov	r0, r6
1000d92a:	b003      	add	sp, #12
1000d92c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000d930:	68eb      	ldr	r3, [r5, #12]
1000d932:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
1000d936:	616c      	str	r4, [r5, #20]
1000d938:	f003 0303 	and.w	r3, r3, #3
1000d93c:	2b03      	cmp	r3, #3
1000d93e:	f040 8120 	bne.w	1000db82 <ai_platform_network_process+0x2ba>
1000d942:	2f00      	cmp	r7, #0
1000d944:	d0e9      	beq.n	1000d91a <ai_platform_network_process+0x52>
1000d946:	f1ba 0f00 	cmp.w	sl, #0
1000d94a:	d0e6      	beq.n	1000d91a <ai_platform_network_process+0x52>
1000d94c:	f8ba 3000 	ldrh.w	r3, [sl]
1000d950:	2b00      	cmp	r3, #0
1000d952:	d0e2      	beq.n	1000d91a <ai_platform_network_process+0x52>
1000d954:	69bb      	ldr	r3, [r7, #24]
1000d956:	681b      	ldr	r3, [r3, #0]
1000d958:	9300      	str	r3, [sp, #0]
1000d95a:	f8da 3004 	ldr.w	r3, [sl, #4]
1000d95e:	2b00      	cmp	r3, #0
1000d960:	d075      	beq.n	1000da4e <ai_platform_network_process+0x186>
1000d962:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
1000d966:	2e00      	cmp	r6, #0
1000d968:	d071      	beq.n	1000da4e <ai_platform_network_process+0x186>
1000d96a:	f8da 3008 	ldr.w	r3, [sl, #8]
1000d96e:	f8d3 b000 	ldr.w	fp, [r3]
1000d972:	0123      	lsls	r3, r4, #4
1000d974:	eb1b 1904 	adds.w	r9, fp, r4, lsl #4
1000d978:	9301      	str	r3, [sp, #4]
1000d97a:	d0ce      	beq.n	1000d91a <ai_platform_network_process+0x52>
1000d97c:	69b3      	ldr	r3, [r6, #24]
1000d97e:	2101      	movs	r1, #1
1000d980:	685b      	ldr	r3, [r3, #4]
1000d982:	9301      	str	r3, [sp, #4]
1000d984:	4638      	mov	r0, r7
1000d986:	f7ff fb7f 	bl	1000d088 <ai_buffer_get_size>
1000d98a:	9b01      	ldr	r3, [sp, #4]
1000d98c:	4283      	cmp	r3, r0
1000d98e:	f0c0 8102 	bcc.w	1000db96 <ai_platform_network_process+0x2ce>
1000d992:	68f0      	ldr	r0, [r6, #12]
1000d994:	69b9      	ldr	r1, [r7, #24]
1000d996:	68c2      	ldr	r2, [r0, #12]
1000d998:	68cb      	ldr	r3, [r1, #12]
1000d99a:	429a      	cmp	r2, r3
1000d99c:	f040 80fb 	bne.w	1000db96 <ai_platform_network_process+0x2ce>
1000d9a0:	6882      	ldr	r2, [r0, #8]
1000d9a2:	688b      	ldr	r3, [r1, #8]
1000d9a4:	429a      	cmp	r2, r3
1000d9a6:	f040 80f6 	bne.w	1000db96 <ai_platform_network_process+0x2ce>
1000d9aa:	6842      	ldr	r2, [r0, #4]
1000d9ac:	684b      	ldr	r3, [r1, #4]
1000d9ae:	429a      	cmp	r2, r3
1000d9b0:	f040 80f1 	bne.w	1000db96 <ai_platform_network_process+0x2ce>
1000d9b4:	69b3      	ldr	r3, [r6, #24]
1000d9b6:	e9d3 0100 	ldrd	r0, r1, [r3]
1000d9ba:	f001 fd4d 	bl	1000f458 <ai_array_get_data_byte_size>
1000d9be:	9001      	str	r0, [sp, #4]
1000d9c0:	4630      	mov	r0, r6
1000d9c2:	f001 fd61 	bl	1000f488 <get_tensor_byte_size>
1000d9c6:	9b01      	ldr	r3, [sp, #4]
1000d9c8:	4283      	cmp	r3, r0
1000d9ca:	f0c0 80e4 	bcc.w	1000db96 <ai_platform_network_process+0x2ce>
1000d9ce:	69b3      	ldr	r3, [r6, #24]
1000d9d0:	6818      	ldr	r0, [r3, #0]
1000d9d2:	f001 fcad 	bl	1000f330 <ai_array_to_buffer_fmt>
1000d9d6:	683b      	ldr	r3, [r7, #0]
1000d9d8:	4058      	eors	r0, r3
1000d9da:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
1000d9de:	f040 81a5 	bne.w	1000dd2c <ai_platform_network_process+0x464>
1000d9e2:	687b      	ldr	r3, [r7, #4]
1000d9e4:	2b00      	cmp	r3, #0
1000d9e6:	f000 8199 	beq.w	1000dd1c <ai_platform_network_process+0x454>
1000d9ea:	69bb      	ldr	r3, [r7, #24]
1000d9ec:	681b      	ldr	r3, [r3, #0]
1000d9ee:	2b00      	cmp	r3, #0
1000d9f0:	f000 818c 	beq.w	1000dd0c <ai_platform_network_process+0x444>
1000d9f4:	9a00      	ldr	r2, [sp, #0]
1000d9f6:	429a      	cmp	r2, r3
1000d9f8:	bf38      	it	cc
1000d9fa:	461a      	movcc	r2, r3
1000d9fc:	4630      	mov	r0, r6
1000d9fe:	9200      	str	r2, [sp, #0]
1000da00:	f001 fd42 	bl	1000f488 <get_tensor_byte_size>
1000da04:	f8c9 0008 	str.w	r0, [r9, #8]
1000da08:	69bb      	ldr	r3, [r7, #24]
1000da0a:	681b      	ldr	r3, [r3, #0]
1000da0c:	fb00 f303 	mul.w	r3, r0, r3
1000da10:	f8c9 300c 	str.w	r3, [r9, #12]
1000da14:	6879      	ldr	r1, [r7, #4]
1000da16:	f8c9 1004 	str.w	r1, [r9, #4]
1000da1a:	0122      	lsls	r2, r4, #4
1000da1c:	440b      	add	r3, r1
1000da1e:	f84b 3002 	str.w	r3, [fp, r2]
1000da22:	69b0      	ldr	r0, [r6, #24]
1000da24:	6803      	ldr	r3, [r0, #0]
1000da26:	009a      	lsls	r2, r3, #2
1000da28:	f104 0401 	add.w	r4, r4, #1
1000da2c:	f107 071c 	add.w	r7, r7, #28
1000da30:	f100 80a1 	bmi.w	1000db76 <ai_platform_network_process+0x2ae>
1000da34:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
1000da38:	1a9b      	subs	r3, r3, r2
1000da3a:	4419      	add	r1, r3
1000da3c:	6081      	str	r1, [r0, #8]
1000da3e:	69b3      	ldr	r3, [r6, #24]
1000da40:	f8d9 2004 	ldr.w	r2, [r9, #4]
1000da44:	60da      	str	r2, [r3, #12]
1000da46:	f8ba 3000 	ldrh.w	r3, [sl]
1000da4a:	42a3      	cmp	r3, r4
1000da4c:	d885      	bhi.n	1000d95a <ai_platform_network_process+0x92>
1000da4e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
1000da50:	f1b8 0f00 	cmp.w	r8, #0
1000da54:	f000 8172 	beq.w	1000dd3c <ai_platform_network_process+0x474>
1000da58:	2b01      	cmp	r3, #1
1000da5a:	f240 814f 	bls.w	1000dcfc <ai_platform_network_process+0x434>
1000da5e:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
1000da62:	f8ba 300c 	ldrh.w	r3, [sl, #12]
1000da66:	2b00      	cmp	r3, #0
1000da68:	f000 8148 	beq.w	1000dcfc <ai_platform_network_process+0x434>
1000da6c:	2400      	movs	r4, #0
1000da6e:	462e      	mov	r6, r5
1000da70:	f8da 3010 	ldr.w	r3, [sl, #16]
1000da74:	2b00      	cmp	r3, #0
1000da76:	f000 80a4 	beq.w	1000dbc2 <ai_platform_network_process+0x2fa>
1000da7a:	f853 7024 	ldr.w	r7, [r3, r4, lsl #2]
1000da7e:	2f00      	cmp	r7, #0
1000da80:	f000 809f 	beq.w	1000dbc2 <ai_platform_network_process+0x2fa>
1000da84:	f8da 3014 	ldr.w	r3, [sl, #20]
1000da88:	f8d3 b000 	ldr.w	fp, [r3]
1000da8c:	eb1b 1904 	adds.w	r9, fp, r4, lsl #4
1000da90:	ea4f 1504 	mov.w	r5, r4, lsl #4
1000da94:	f000 8172 	beq.w	1000dd7c <ai_platform_network_process+0x4b4>
1000da98:	69bb      	ldr	r3, [r7, #24]
1000da9a:	2101      	movs	r1, #1
1000da9c:	685b      	ldr	r3, [r3, #4]
1000da9e:	9301      	str	r3, [sp, #4]
1000daa0:	4640      	mov	r0, r8
1000daa2:	f7ff faf1 	bl	1000d088 <ai_buffer_get_size>
1000daa6:	9b01      	ldr	r3, [sp, #4]
1000daa8:	4283      	cmp	r3, r0
1000daaa:	f0c0 8126 	bcc.w	1000dcfa <ai_platform_network_process+0x432>
1000daae:	68f8      	ldr	r0, [r7, #12]
1000dab0:	f8d8 1018 	ldr.w	r1, [r8, #24]
1000dab4:	68c2      	ldr	r2, [r0, #12]
1000dab6:	68cb      	ldr	r3, [r1, #12]
1000dab8:	429a      	cmp	r2, r3
1000daba:	f040 811e 	bne.w	1000dcfa <ai_platform_network_process+0x432>
1000dabe:	6882      	ldr	r2, [r0, #8]
1000dac0:	688b      	ldr	r3, [r1, #8]
1000dac2:	429a      	cmp	r2, r3
1000dac4:	f040 8119 	bne.w	1000dcfa <ai_platform_network_process+0x432>
1000dac8:	6842      	ldr	r2, [r0, #4]
1000daca:	684b      	ldr	r3, [r1, #4]
1000dacc:	429a      	cmp	r2, r3
1000dace:	f040 8114 	bne.w	1000dcfa <ai_platform_network_process+0x432>
1000dad2:	69bb      	ldr	r3, [r7, #24]
1000dad4:	e9d3 0100 	ldrd	r0, r1, [r3]
1000dad8:	f001 fcbe 	bl	1000f458 <ai_array_get_data_byte_size>
1000dadc:	9001      	str	r0, [sp, #4]
1000dade:	4638      	mov	r0, r7
1000dae0:	f001 fcd2 	bl	1000f488 <get_tensor_byte_size>
1000dae4:	9b01      	ldr	r3, [sp, #4]
1000dae6:	4283      	cmp	r3, r0
1000dae8:	f0c0 8107 	bcc.w	1000dcfa <ai_platform_network_process+0x432>
1000daec:	69bb      	ldr	r3, [r7, #24]
1000daee:	6818      	ldr	r0, [r3, #0]
1000daf0:	f001 fc1e 	bl	1000f330 <ai_array_to_buffer_fmt>
1000daf4:	f8d8 3000 	ldr.w	r3, [r8]
1000daf8:	4058      	eors	r0, r3
1000dafa:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
1000dafe:	f040 812a 	bne.w	1000dd56 <ai_platform_network_process+0x48e>
1000db02:	f8d8 3004 	ldr.w	r3, [r8, #4]
1000db06:	2b00      	cmp	r3, #0
1000db08:	f000 811c 	beq.w	1000dd44 <ai_platform_network_process+0x47c>
1000db0c:	f8d8 3018 	ldr.w	r3, [r8, #24]
1000db10:	681b      	ldr	r3, [r3, #0]
1000db12:	2b00      	cmp	r3, #0
1000db14:	f000 8127 	beq.w	1000dd66 <ai_platform_network_process+0x49e>
1000db18:	9a00      	ldr	r2, [sp, #0]
1000db1a:	429a      	cmp	r2, r3
1000db1c:	bf38      	it	cc
1000db1e:	461a      	movcc	r2, r3
1000db20:	4638      	mov	r0, r7
1000db22:	9200      	str	r2, [sp, #0]
1000db24:	f001 fcb0 	bl	1000f488 <get_tensor_byte_size>
1000db28:	f8c9 0008 	str.w	r0, [r9, #8]
1000db2c:	f8d8 3018 	ldr.w	r3, [r8, #24]
1000db30:	681b      	ldr	r3, [r3, #0]
1000db32:	fb00 f303 	mul.w	r3, r0, r3
1000db36:	f8c9 300c 	str.w	r3, [r9, #12]
1000db3a:	f8d8 1004 	ldr.w	r1, [r8, #4]
1000db3e:	f8c9 1004 	str.w	r1, [r9, #4]
1000db42:	440b      	add	r3, r1
1000db44:	f84b 3005 	str.w	r3, [fp, r5]
1000db48:	69b8      	ldr	r0, [r7, #24]
1000db4a:	6803      	ldr	r3, [r0, #0]
1000db4c:	009b      	lsls	r3, r3, #2
1000db4e:	f104 0401 	add.w	r4, r4, #1
1000db52:	f108 081c 	add.w	r8, r8, #28
1000db56:	d42f      	bmi.n	1000dbb8 <ai_platform_network_process+0x2f0>
1000db58:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
1000db5c:	1a9b      	subs	r3, r3, r2
1000db5e:	4419      	add	r1, r3
1000db60:	6081      	str	r1, [r0, #8]
1000db62:	69bb      	ldr	r3, [r7, #24]
1000db64:	f8d9 2004 	ldr.w	r2, [r9, #4]
1000db68:	60da      	str	r2, [r3, #12]
1000db6a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
1000db6e:	429c      	cmp	r4, r3
1000db70:	f4ff af7e 	bcc.w	1000da70 <ai_platform_network_process+0x1a8>
1000db74:	e025      	b.n	1000dbc2 <ai_platform_network_process+0x2fa>
1000db76:	f8ba 3000 	ldrh.w	r3, [sl]
1000db7a:	429c      	cmp	r4, r3
1000db7c:	f4ff aeed 	bcc.w	1000d95a <ai_platform_network_process+0x92>
1000db80:	e765      	b.n	1000da4e <ai_platform_network_process+0x186>
1000db82:	2230      	movs	r2, #48	; 0x30
1000db84:	2111      	movs	r1, #17
1000db86:	f105 0010 	add.w	r0, r5, #16
1000db8a:	f000 f907 	bl	1000dd9c <core_set_error>
1000db8e:	2600      	movs	r6, #0
1000db90:	e6ca      	b.n	1000d928 <ai_platform_network_process+0x60>
1000db92:	462e      	mov	r6, r5
1000db94:	e6c8      	b.n	1000d928 <ai_platform_network_process+0x60>
1000db96:	2218      	movs	r2, #24
1000db98:	2112      	movs	r1, #18
1000db9a:	f105 0010 	add.w	r0, r5, #16
1000db9e:	f000 f8fd 	bl	1000dd9c <core_set_error>
1000dba2:	2600      	movs	r6, #0
1000dba4:	e6c0      	b.n	1000d928 <ai_platform_network_process+0x60>
1000dba6:	bf00      	nop
1000dba8:	a1c00100 	.word	0xa1c00100
1000dbac:	4c004000 	.word	0x4c004000
1000dbb0:	f407a5c2 	.word	0xf407a5c2
1000dbb4:	b5e8b5cd 	.word	0xb5e8b5cd
1000dbb8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
1000dbbc:	429c      	cmp	r4, r3
1000dbbe:	f4ff af57 	bcc.w	1000da70 <ai_platform_network_process+0x1a8>
1000dbc2:	f8bd 2000 	ldrh.w	r2, [sp]
1000dbc6:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
1000dbc8:	82b2      	strh	r2, [r6, #20]
1000dbca:	4635      	mov	r5, r6
1000dbcc:	2b00      	cmp	r3, #0
1000dbce:	f040 808e 	bne.w	1000dcee <ai_platform_network_process+0x426>
1000dbd2:	461f      	mov	r7, r3
1000dbd4:	461e      	mov	r6, r3
1000dbd6:	8aeb      	ldrh	r3, [r5, #22]
1000dbd8:	4293      	cmp	r3, r2
1000dbda:	bf38      	it	cc
1000dbdc:	46ab      	movcc	fp, r5
1000dbde:	d23c      	bcs.n	1000dc5a <ai_platform_network_process+0x392>
1000dbe0:	2f00      	cmp	r7, #0
1000dbe2:	d03f      	beq.n	1000dc64 <ai_platform_network_process+0x39c>
1000dbe4:	f04f 0800 	mov.w	r8, #0
1000dbe8:	e014      	b.n	1000dc14 <ai_platform_network_process+0x34c>
1000dbea:	6882      	ldr	r2, [r0, #8]
1000dbec:	68c5      	ldr	r5, [r0, #12]
1000dbee:	6863      	ldr	r3, [r4, #4]
1000dbf0:	1b52      	subs	r2, r2, r5
1000dbf2:	4413      	add	r3, r2
1000dbf4:	6083      	str	r3, [r0, #8]
1000dbf6:	698b      	ldr	r3, [r1, #24]
1000dbf8:	6862      	ldr	r2, [r4, #4]
1000dbfa:	60da      	str	r2, [r3, #12]
1000dbfc:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
1000dc00:	f859 200a 	ldr.w	r2, [r9, sl]
1000dc04:	440b      	add	r3, r1
1000dc06:	4293      	cmp	r3, r2
1000dc08:	bf24      	itt	cs
1000dc0a:	68e3      	ldrcs	r3, [r4, #12]
1000dc0c:	1ad3      	subcs	r3, r2, r3
1000dc0e:	6063      	str	r3, [r4, #4]
1000dc10:	f108 0801 	add.w	r8, r8, #1
1000dc14:	883b      	ldrh	r3, [r7, #0]
1000dc16:	4543      	cmp	r3, r8
1000dc18:	ea4f 1a08 	mov.w	sl, r8, lsl #4
1000dc1c:	d922      	bls.n	1000dc64 <ai_platform_network_process+0x39c>
1000dc1e:	687b      	ldr	r3, [r7, #4]
1000dc20:	b303      	cbz	r3, 1000dc64 <ai_platform_network_process+0x39c>
1000dc22:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
1000dc26:	b1e9      	cbz	r1, 1000dc64 <ai_platform_network_process+0x39c>
1000dc28:	6988      	ldr	r0, [r1, #24]
1000dc2a:	68ba      	ldr	r2, [r7, #8]
1000dc2c:	6803      	ldr	r3, [r0, #0]
1000dc2e:	f8d2 9000 	ldr.w	r9, [r2]
1000dc32:	009d      	lsls	r5, r3, #2
1000dc34:	eb09 1408 	add.w	r4, r9, r8, lsl #4
1000dc38:	d5d7      	bpl.n	1000dbea <ai_platform_network_process+0x322>
1000dc3a:	6881      	ldr	r1, [r0, #8]
1000dc3c:	68a2      	ldr	r2, [r4, #8]
1000dc3e:	6860      	ldr	r0, [r4, #4]
1000dc40:	f001 faf0 	bl	1000f224 <st_int8_copy>
1000dc44:	e7da      	b.n	1000dbfc <ai_platform_network_process+0x334>
1000dc46:	f8bb 3016 	ldrh.w	r3, [fp, #22]
1000dc4a:	f8bb 2014 	ldrh.w	r2, [fp, #20]
1000dc4e:	3301      	adds	r3, #1
1000dc50:	b29b      	uxth	r3, r3
1000dc52:	429a      	cmp	r2, r3
1000dc54:	f8ab 3016 	strh.w	r3, [fp, #22]
1000dc58:	d8c2      	bhi.n	1000dbe0 <ai_platform_network_process+0x318>
1000dc5a:	461e      	mov	r6, r3
1000dc5c:	4630      	mov	r0, r6
1000dc5e:	b003      	add	sp, #12
1000dc60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000dc64:	4658      	mov	r0, fp
1000dc66:	f000 f8f1 	bl	1000de4c <ai_layers_forward_all>
1000dc6a:	2e00      	cmp	r6, #0
1000dc6c:	d0eb      	beq.n	1000dc46 <ai_platform_network_process+0x37e>
1000dc6e:	2400      	movs	r4, #0
1000dc70:	e016      	b.n	1000dca0 <ai_platform_network_process+0x3d8>
1000dc72:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
1000dc76:	f859 100a 	ldr.w	r1, [r9, sl]
1000dc7a:	4413      	add	r3, r2
1000dc7c:	428b      	cmp	r3, r1
1000dc7e:	bf24      	itt	cs
1000dc80:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
1000dc84:	1acb      	subcs	r3, r1, r3
1000dc86:	f8c8 3004 	str.w	r3, [r8, #4]
1000dc8a:	6981      	ldr	r1, [r0, #24]
1000dc8c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
1000dc90:	1b52      	subs	r2, r2, r5
1000dc92:	4413      	add	r3, r2
1000dc94:	608b      	str	r3, [r1, #8]
1000dc96:	6983      	ldr	r3, [r0, #24]
1000dc98:	f8d8 2004 	ldr.w	r2, [r8, #4]
1000dc9c:	60da      	str	r2, [r3, #12]
1000dc9e:	3401      	adds	r4, #1
1000dca0:	8833      	ldrh	r3, [r6, #0]
1000dca2:	42a3      	cmp	r3, r4
1000dca4:	d9cf      	bls.n	1000dc46 <ai_platform_network_process+0x37e>
1000dca6:	6873      	ldr	r3, [r6, #4]
1000dca8:	2b00      	cmp	r3, #0
1000dcaa:	d0cc      	beq.n	1000dc46 <ai_platform_network_process+0x37e>
1000dcac:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1000dcb0:	2800      	cmp	r0, #0
1000dcb2:	d0c8      	beq.n	1000dc46 <ai_platform_network_process+0x37e>
1000dcb4:	68b2      	ldr	r2, [r6, #8]
1000dcb6:	6983      	ldr	r3, [r0, #24]
1000dcb8:	f8d2 9000 	ldr.w	r9, [r2]
1000dcbc:	681a      	ldr	r2, [r3, #0]
1000dcbe:	0092      	lsls	r2, r2, #2
1000dcc0:	ea4f 1a04 	mov.w	sl, r4, lsl #4
1000dcc4:	eb09 1804 	add.w	r8, r9, r4, lsl #4
1000dcc8:	d5d3      	bpl.n	1000dc72 <ai_platform_network_process+0x3aa>
1000dcca:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
1000dcce:	6898      	ldr	r0, [r3, #8]
1000dcd0:	f001 faa8 	bl	1000f224 <st_int8_copy>
1000dcd4:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
1000dcd8:	f859 200a 	ldr.w	r2, [r9, sl]
1000dcdc:	440b      	add	r3, r1
1000dcde:	4293      	cmp	r3, r2
1000dce0:	bf24      	itt	cs
1000dce2:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
1000dce6:	1ad3      	subcs	r3, r2, r3
1000dce8:	f8c8 3004 	str.w	r3, [r8, #4]
1000dcec:	e7d7      	b.n	1000dc9e <ai_platform_network_process+0x3d6>
1000dcee:	2b01      	cmp	r3, #1
1000dcf0:	6b2f      	ldr	r7, [r5, #48]	; 0x30
1000dcf2:	d041      	beq.n	1000dd78 <ai_platform_network_process+0x4b0>
1000dcf4:	f107 060c 	add.w	r6, r7, #12
1000dcf8:	e76d      	b.n	1000dbd6 <ai_platform_network_process+0x30e>
1000dcfa:	4635      	mov	r5, r6
1000dcfc:	2218      	movs	r2, #24
1000dcfe:	2113      	movs	r1, #19
1000dd00:	f105 0010 	add.w	r0, r5, #16
1000dd04:	f000 f84a 	bl	1000dd9c <core_set_error>
1000dd08:	2600      	movs	r6, #0
1000dd0a:	e60d      	b.n	1000d928 <ai_platform_network_process+0x60>
1000dd0c:	4606      	mov	r6, r0
1000dd0e:	2221      	movs	r2, #33	; 0x21
1000dd10:	2112      	movs	r1, #18
1000dd12:	f105 0010 	add.w	r0, r5, #16
1000dd16:	f000 f841 	bl	1000dd9c <core_set_error>
1000dd1a:	e605      	b.n	1000d928 <ai_platform_network_process+0x60>
1000dd1c:	4606      	mov	r6, r0
1000dd1e:	2217      	movs	r2, #23
1000dd20:	2112      	movs	r1, #18
1000dd22:	f105 0010 	add.w	r0, r5, #16
1000dd26:	f000 f839 	bl	1000dd9c <core_set_error>
1000dd2a:	e5fd      	b.n	1000d928 <ai_platform_network_process+0x60>
1000dd2c:	2219      	movs	r2, #25
1000dd2e:	2112      	movs	r1, #18
1000dd30:	f105 0010 	add.w	r0, r5, #16
1000dd34:	f000 f832 	bl	1000dd9c <core_set_error>
1000dd38:	2600      	movs	r6, #0
1000dd3a:	e5f5      	b.n	1000d928 <ai_platform_network_process+0x60>
1000dd3c:	f8bd 2000 	ldrh.w	r2, [sp]
1000dd40:	82aa      	strh	r2, [r5, #20]
1000dd42:	e743      	b.n	1000dbcc <ai_platform_network_process+0x304>
1000dd44:	4635      	mov	r5, r6
1000dd46:	2217      	movs	r2, #23
1000dd48:	4606      	mov	r6, r0
1000dd4a:	2113      	movs	r1, #19
1000dd4c:	f105 0010 	add.w	r0, r5, #16
1000dd50:	f000 f824 	bl	1000dd9c <core_set_error>
1000dd54:	e5e8      	b.n	1000d928 <ai_platform_network_process+0x60>
1000dd56:	f106 0010 	add.w	r0, r6, #16
1000dd5a:	2219      	movs	r2, #25
1000dd5c:	2113      	movs	r1, #19
1000dd5e:	f000 f81d 	bl	1000dd9c <core_set_error>
1000dd62:	2600      	movs	r6, #0
1000dd64:	e5e0      	b.n	1000d928 <ai_platform_network_process+0x60>
1000dd66:	4635      	mov	r5, r6
1000dd68:	2221      	movs	r2, #33	; 0x21
1000dd6a:	4606      	mov	r6, r0
1000dd6c:	2113      	movs	r1, #19
1000dd6e:	f105 0010 	add.w	r0, r5, #16
1000dd72:	f000 f813 	bl	1000dd9c <core_set_error>
1000dd76:	e5d7      	b.n	1000d928 <ai_platform_network_process+0x60>
1000dd78:	2600      	movs	r6, #0
1000dd7a:	e72c      	b.n	1000dbd6 <ai_platform_network_process+0x30e>
1000dd7c:	f106 0010 	add.w	r0, r6, #16
1000dd80:	2217      	movs	r2, #23
1000dd82:	2113      	movs	r1, #19
1000dd84:	f000 f80a 	bl	1000dd9c <core_set_error>
1000dd88:	464e      	mov	r6, r9
1000dd8a:	e5cd      	b.n	1000d928 <ai_platform_network_process+0x60>

1000dd8c <core_init>:
1000dd8c:	2001      	movs	r0, #1
1000dd8e:	4770      	bx	lr

1000dd90 <core_get_error>:
1000dd90:	4603      	mov	r3, r0
1000dd92:	2200      	movs	r2, #0
1000dd94:	6800      	ldr	r0, [r0, #0]
1000dd96:	601a      	str	r2, [r3, #0]
1000dd98:	4770      	bx	lr
1000dd9a:	bf00      	nop

1000dd9c <core_set_error>:
1000dd9c:	4603      	mov	r3, r0
1000dd9e:	7800      	ldrb	r0, [r0, #0]
1000dda0:	b108      	cbz	r0, 1000dda6 <core_set_error+0xa>
1000dda2:	2000      	movs	r0, #0
1000dda4:	4770      	bx	lr
1000dda6:	7019      	strb	r1, [r3, #0]
1000dda8:	6819      	ldr	r1, [r3, #0]
1000ddaa:	f362 211f 	bfi	r1, r2, #8, #24
1000ddae:	2001      	movs	r0, #1
1000ddb0:	6019      	str	r1, [r3, #0]
1000ddb2:	4770      	bx	lr

1000ddb4 <ai_check_custom_types>:
1000ddb4:	b082      	sub	sp, #8
1000ddb6:	4b13      	ldr	r3, [pc, #76]	; (1000de04 <ai_check_custom_types+0x50>)
1000ddb8:	9301      	str	r3, [sp, #4]
1000ddba:	b118      	cbz	r0, 1000ddc4 <ai_check_custom_types+0x10>
1000ddbc:	7803      	ldrb	r3, [r0, #0]
1000ddbe:	2b03      	cmp	r3, #3
1000ddc0:	d002      	beq.n	1000ddc8 <ai_check_custom_types+0x14>
1000ddc2:	2000      	movs	r0, #0
1000ddc4:	b002      	add	sp, #8
1000ddc6:	4770      	bx	lr
1000ddc8:	f89d 2004 	ldrb.w	r2, [sp, #4]
1000ddcc:	4293      	cmp	r3, r2
1000ddce:	d004      	beq.n	1000ddda <ai_check_custom_types+0x26>
1000ddd0:	2001      	movs	r0, #1
1000ddd2:	f080 0001 	eor.w	r0, r0, #1
1000ddd6:	b002      	add	sp, #8
1000ddd8:	4770      	bx	lr
1000ddda:	7842      	ldrb	r2, [r0, #1]
1000dddc:	f89d 3005 	ldrb.w	r3, [sp, #5]
1000dde0:	429a      	cmp	r2, r3
1000dde2:	f100 0001 	add.w	r0, r0, #1
1000dde6:	d1f3      	bne.n	1000ddd0 <ai_check_custom_types+0x1c>
1000dde8:	f810 2f01 	ldrb.w	r2, [r0, #1]!
1000ddec:	f89d 3006 	ldrb.w	r3, [sp, #6]
1000ddf0:	429a      	cmp	r2, r3
1000ddf2:	d1ed      	bne.n	1000ddd0 <ai_check_custom_types+0x1c>
1000ddf4:	7842      	ldrb	r2, [r0, #1]
1000ddf6:	f89d 3007 	ldrb.w	r3, [sp, #7]
1000ddfa:	429a      	cmp	r2, r3
1000ddfc:	d1e8      	bne.n	1000ddd0 <ai_check_custom_types+0x1c>
1000ddfe:	2000      	movs	r0, #0
1000de00:	e7e7      	b.n	1000ddd2 <ai_check_custom_types+0x1e>
1000de02:	bf00      	nop
1000de04:	84048403 	.word	0x84048403

1000de08 <ai_layers_init_all>:
1000de08:	4601      	mov	r1, r0
1000de0a:	2000      	movs	r0, #0
1000de0c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
1000de0e:	b143      	cbz	r3, 1000de22 <ai_layers_init_all+0x1a>
1000de10:	691a      	ldr	r2, [r3, #16]
1000de12:	60d9      	str	r1, [r3, #12]
1000de14:	429a      	cmp	r2, r3
1000de16:	f100 0001 	add.w	r0, r0, #1
1000de1a:	d002      	beq.n	1000de22 <ai_layers_init_all+0x1a>
1000de1c:	b10a      	cbz	r2, 1000de22 <ai_layers_init_all+0x1a>
1000de1e:	4613      	mov	r3, r2
1000de20:	e7f5      	b.n	1000de0e <ai_layers_init_all+0x6>
1000de22:	4770      	bx	lr

1000de24 <ai_layers_post_init_all>:
1000de24:	b538      	push	{r3, r4, r5, lr}
1000de26:	6b44      	ldr	r4, [r0, #52]	; 0x34
1000de28:	2500      	movs	r5, #0
1000de2a:	b16c      	cbz	r4, 1000de48 <ai_layers_post_init_all+0x24>
1000de2c:	6863      	ldr	r3, [r4, #4]
1000de2e:	07db      	lsls	r3, r3, #31
1000de30:	d504      	bpl.n	1000de3c <ai_layers_post_init_all+0x18>
1000de32:	6a23      	ldr	r3, [r4, #32]
1000de34:	4620      	mov	r0, r4
1000de36:	b10b      	cbz	r3, 1000de3c <ai_layers_post_init_all+0x18>
1000de38:	4798      	blx	r3
1000de3a:	3501      	adds	r5, #1
1000de3c:	6923      	ldr	r3, [r4, #16]
1000de3e:	42a3      	cmp	r3, r4
1000de40:	d002      	beq.n	1000de48 <ai_layers_post_init_all+0x24>
1000de42:	b10b      	cbz	r3, 1000de48 <ai_layers_post_init_all+0x24>
1000de44:	461c      	mov	r4, r3
1000de46:	e7f0      	b.n	1000de2a <ai_layers_post_init_all+0x6>
1000de48:	4628      	mov	r0, r5
1000de4a:	bd38      	pop	{r3, r4, r5, pc}

1000de4c <ai_layers_forward_all>:
1000de4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000de50:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
1000de54:	4604      	mov	r4, r0
1000de56:	f1b8 0f00 	cmp.w	r8, #0
1000de5a:	d02b      	beq.n	1000deb4 <ai_layers_forward_all+0x68>
1000de5c:	6b41      	ldr	r1, [r0, #52]	; 0x34
1000de5e:	6381      	str	r1, [r0, #56]	; 0x38
1000de60:	b321      	cbz	r1, 1000deac <ai_layers_forward_all+0x60>
1000de62:	6c02      	ldr	r2, [r0, #64]	; 0x40
1000de64:	2001      	movs	r0, #1
1000de66:	47c0      	blx	r8
1000de68:	6ba6      	ldr	r6, [r4, #56]	; 0x38
1000de6a:	b1fe      	cbz	r6, 1000deac <ai_layers_forward_all+0x60>
1000de6c:	2700      	movs	r7, #0
1000de6e:	4631      	mov	r1, r6
1000de70:	6c22      	ldr	r2, [r4, #64]	; 0x40
1000de72:	2002      	movs	r0, #2
1000de74:	47c0      	blx	r8
1000de76:	6ba5      	ldr	r5, [r4, #56]	; 0x38
1000de78:	4628      	mov	r0, r5
1000de7a:	696b      	ldr	r3, [r5, #20]
1000de7c:	4798      	blx	r3
1000de7e:	692e      	ldr	r6, [r5, #16]
1000de80:	6c22      	ldr	r2, [r4, #64]	; 0x40
1000de82:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1000de84:	42b5      	cmp	r5, r6
1000de86:	f04f 0003 	mov.w	r0, #3
1000de8a:	d007      	beq.n	1000de9c <ai_layers_forward_all+0x50>
1000de8c:	47c0      	blx	r8
1000de8e:	3701      	adds	r7, #1
1000de90:	63a6      	str	r6, [r4, #56]	; 0x38
1000de92:	2e00      	cmp	r6, #0
1000de94:	d1eb      	bne.n	1000de6e <ai_layers_forward_all+0x22>
1000de96:	4638      	mov	r0, r7
1000de98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000de9c:	2003      	movs	r0, #3
1000de9e:	47c0      	blx	r8
1000dea0:	2300      	movs	r3, #0
1000dea2:	3701      	adds	r7, #1
1000dea4:	63a3      	str	r3, [r4, #56]	; 0x38
1000dea6:	4638      	mov	r0, r7
1000dea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000deac:	2700      	movs	r7, #0
1000deae:	4638      	mov	r0, r7
1000deb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000deb4:	6b45      	ldr	r5, [r0, #52]	; 0x34
1000deb6:	6385      	str	r5, [r0, #56]	; 0x38
1000deb8:	2d00      	cmp	r5, #0
1000deba:	d0f7      	beq.n	1000deac <ai_layers_forward_all+0x60>
1000debc:	4647      	mov	r7, r8
1000debe:	696b      	ldr	r3, [r5, #20]
1000dec0:	4628      	mov	r0, r5
1000dec2:	4798      	blx	r3
1000dec4:	462b      	mov	r3, r5
1000dec6:	692d      	ldr	r5, [r5, #16]
1000dec8:	429d      	cmp	r5, r3
1000deca:	d004      	beq.n	1000ded6 <ai_layers_forward_all+0x8a>
1000decc:	63a5      	str	r5, [r4, #56]	; 0x38
1000dece:	3701      	adds	r7, #1
1000ded0:	2d00      	cmp	r5, #0
1000ded2:	d1f4      	bne.n	1000debe <ai_layers_forward_all+0x72>
1000ded4:	e7df      	b.n	1000de96 <ai_layers_forward_all+0x4a>
1000ded6:	2300      	movs	r3, #0
1000ded8:	63a3      	str	r3, [r4, #56]	; 0x38
1000deda:	3701      	adds	r7, #1
1000dedc:	e7db      	b.n	1000de96 <ai_layers_forward_all+0x4a>
1000dede:	bf00      	nop

1000dee0 <ai_dict_decompress_f32>:
1000dee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1000dee4:	9d08      	ldr	r5, [sp, #32]
1000dee6:	2b04      	cmp	r3, #4
1000dee8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
1000deec:	d00e      	beq.n	1000df0c <ai_dict_decompress_f32+0x2c>
1000deee:	2b08      	cmp	r3, #8
1000def0:	d10a      	bne.n	1000df08 <ai_dict_decompress_f32+0x28>
1000def2:	42a8      	cmp	r0, r5
1000def4:	d208      	bcs.n	1000df08 <ai_dict_decompress_f32+0x28>
1000def6:	f811 3b01 	ldrb.w	r3, [r1], #1
1000defa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
1000defe:	681b      	ldr	r3, [r3, #0]
1000df00:	f840 3b04 	str.w	r3, [r0], #4
1000df04:	4285      	cmp	r5, r0
1000df06:	d8f6      	bhi.n	1000def6 <ai_dict_decompress_f32+0x16>
1000df08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1000df0c:	9b07      	ldr	r3, [sp, #28]
1000df0e:	085e      	lsrs	r6, r3, #1
1000df10:	f003 0701 	and.w	r7, r3, #1
1000df14:	ea4f 09c6 	mov.w	r9, r6, lsl #3
1000df18:	f106 38ff 	add.w	r8, r6, #4294967295
1000df1c:	42a8      	cmp	r0, r5
1000df1e:	d2f3      	bcs.n	1000df08 <ai_dict_decompress_f32+0x28>
1000df20:	b33e      	cbz	r6, 1000df72 <ai_dict_decompress_f32+0x92>
1000df22:	f100 0e08 	add.w	lr, r0, #8
1000df26:	f101 3cff 	add.w	ip, r1, #4294967295
1000df2a:	eb01 0408 	add.w	r4, r1, r8
1000df2e:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
1000df32:	091b      	lsrs	r3, r3, #4
1000df34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
1000df38:	f10e 0e08 	add.w	lr, lr, #8
1000df3c:	681b      	ldr	r3, [r3, #0]
1000df3e:	f84e 3c10 	str.w	r3, [lr, #-16]
1000df42:	f89c 3000 	ldrb.w	r3, [ip]
1000df46:	f003 030f 	and.w	r3, r3, #15
1000df4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
1000df4e:	4564      	cmp	r4, ip
1000df50:	681b      	ldr	r3, [r3, #0]
1000df52:	f84e 3c0c 	str.w	r3, [lr, #-12]
1000df56:	d1ea      	bne.n	1000df2e <ai_dict_decompress_f32+0x4e>
1000df58:	4431      	add	r1, r6
1000df5a:	4448      	add	r0, r9
1000df5c:	2f00      	cmp	r7, #0
1000df5e:	d0dd      	beq.n	1000df1c <ai_dict_decompress_f32+0x3c>
1000df60:	f811 3b01 	ldrb.w	r3, [r1], #1
1000df64:	091b      	lsrs	r3, r3, #4
1000df66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
1000df6a:	681b      	ldr	r3, [r3, #0]
1000df6c:	f840 3b04 	str.w	r3, [r0], #4
1000df70:	e7d4      	b.n	1000df1c <ai_dict_decompress_f32+0x3c>
1000df72:	2f00      	cmp	r7, #0
1000df74:	d1f4      	bne.n	1000df60 <ai_dict_decompress_f32+0x80>
1000df76:	42a8      	cmp	r0, r5
1000df78:	d3fd      	bcc.n	1000df76 <ai_dict_decompress_f32+0x96>
1000df7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1000df7e:	bf00      	nop

1000df80 <forward_conv2d_if32of32wf32>:
1000df80:	6982      	ldr	r2, [r0, #24]
1000df82:	8813      	ldrh	r3, [r2, #0]
1000df84:	2b00      	cmp	r3, #0
1000df86:	f000 8092 	beq.w	1000e0ae <forward_conv2d_if32of32wf32+0x12e>
1000df8a:	f8d2 c004 	ldr.w	ip, [r2, #4]
1000df8e:	f8dc 2004 	ldr.w	r2, [ip, #4]
1000df92:	b102      	cbz	r2, 1000df96 <forward_conv2d_if32of32wf32+0x16>
1000df94:	6812      	ldr	r2, [r2, #0]
1000df96:	2b01      	cmp	r3, #1
1000df98:	f000 80b2 	beq.w	1000e100 <forward_conv2d_if32of32wf32+0x180>
1000df9c:	f8dc 1010 	ldr.w	r1, [ip, #16]
1000dfa0:	b101      	cbz	r1, 1000dfa4 <forward_conv2d_if32of32wf32+0x24>
1000dfa2:	6809      	ldr	r1, [r1, #0]
1000dfa4:	2b02      	cmp	r3, #2
1000dfa6:	f000 8084 	beq.w	1000e0b2 <forward_conv2d_if32of32wf32+0x132>
1000dfaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000dfae:	f8dc 601c 	ldr.w	r6, [ip, #28]
1000dfb2:	b0a1      	sub	sp, #132	; 0x84
1000dfb4:	2e00      	cmp	r6, #0
1000dfb6:	f000 809c 	beq.w	1000e0f2 <forward_conv2d_if32of32wf32+0x172>
1000dfba:	f8bc 5018 	ldrh.w	r5, [ip, #24]
1000dfbe:	6834      	ldr	r4, [r6, #0]
1000dfc0:	2d01      	cmp	r5, #1
1000dfc2:	f240 8098 	bls.w	1000e0f6 <forward_conv2d_if32of32wf32+0x176>
1000dfc6:	6876      	ldr	r6, [r6, #4]
1000dfc8:	f8d2 800c 	ldr.w	r8, [r2, #12]
1000dfcc:	f8d1 900c 	ldr.w	r9, [r1, #12]
1000dfd0:	f8d8 7004 	ldr.w	r7, [r8, #4]
1000dfd4:	9713      	str	r7, [sp, #76]	; 0x4c
1000dfd6:	f8d9 7004 	ldr.w	r7, [r9, #4]
1000dfda:	9714      	str	r7, [sp, #80]	; 0x50
1000dfdc:	f8d9 700c 	ldr.w	r7, [r9, #12]
1000dfe0:	9715      	str	r7, [sp, #84]	; 0x54
1000dfe2:	f8d9 7008 	ldr.w	r7, [r9, #8]
1000dfe6:	9716      	str	r7, [sp, #88]	; 0x58
1000dfe8:	f8d8 700c 	ldr.w	r7, [r8, #12]
1000dfec:	6992      	ldr	r2, [r2, #24]
1000dfee:	9717      	str	r7, [sp, #92]	; 0x5c
1000dff0:	f8d8 7008 	ldr.w	r7, [r8, #8]
1000dff4:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
1000dff8:	9718      	str	r7, [sp, #96]	; 0x60
1000dffa:	8d07      	ldrh	r7, [r0, #40]	; 0x28
1000dffc:	f8d2 b008 	ldr.w	fp, [r2, #8]
1000e000:	f8d4 a00c 	ldr.w	sl, [r4, #12]
1000e004:	69a2      	ldr	r2, [r4, #24]
1000e006:	9719      	str	r7, [sp, #100]	; 0x64
1000e008:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
1000e00c:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
1000e00e:	69c0      	ldr	r0, [r0, #28]
1000e010:	901f      	str	r0, [sp, #124]	; 0x7c
1000e012:	f8be 0000 	ldrh.w	r0, [lr]
1000e016:	901b      	str	r0, [sp, #108]	; 0x6c
1000e018:	f8be 0004 	ldrh.w	r0, [lr, #4]
1000e01c:	901c      	str	r0, [sp, #112]	; 0x70
1000e01e:	b2a8      	uxth	r0, r5
1000e020:	971a      	str	r7, [sp, #104]	; 0x68
1000e022:	e9da 7801 	ldrd	r7, r8, [sl, #4]
1000e026:	901d      	str	r0, [sp, #116]	; 0x74
1000e028:	b2a0      	uxth	r0, r4
1000e02a:	f8d2 9008 	ldr.w	r9, [r2, #8]
1000e02e:	901e      	str	r0, [sp, #120]	; 0x78
1000e030:	b10e      	cbz	r6, 1000e036 <forward_conv2d_if32of32wf32+0xb6>
1000e032:	69b0      	ldr	r0, [r6, #24]
1000e034:	6886      	ldr	r6, [r0, #8]
1000e036:	6989      	ldr	r1, [r1, #24]
1000e038:	b2a4      	uxth	r4, r4
1000e03a:	f108 30ff 	add.w	r0, r8, #4294967295
1000e03e:	f8d1 a008 	ldr.w	sl, [r1, #8]
1000e042:	6811      	ldr	r1, [r2, #0]
1000e044:	b2ad      	uxth	r5, r5
1000e046:	3c01      	subs	r4, #1
1000e048:	3d01      	subs	r5, #1
1000e04a:	fb00 8404 	mla	r4, r0, r4, r8
1000e04e:	1e78      	subs	r0, r7, #1
1000e050:	fb00 7505 	mla	r5, r0, r5, r7
1000e054:	f3c1 4043 	ubfx	r0, r1, #17, #4
1000e058:	2804      	cmp	r0, #4
1000e05a:	d02d      	beq.n	1000e0b8 <forward_conv2d_if32of32wf32+0x138>
1000e05c:	2808      	cmp	r0, #8
1000e05e:	d02b      	beq.n	1000e0b8 <forward_conv2d_if32of32wf32+0x138>
1000e060:	9b1d      	ldr	r3, [sp, #116]	; 0x74
1000e062:	940c      	str	r4, [sp, #48]	; 0x30
1000e064:	e9cd 530d 	strd	r5, r3, [sp, #52]	; 0x34
1000e068:	9b1a      	ldr	r3, [sp, #104]	; 0x68
1000e06a:	930b      	str	r3, [sp, #44]	; 0x2c
1000e06c:	9b19      	ldr	r3, [sp, #100]	; 0x64
1000e06e:	930a      	str	r3, [sp, #40]	; 0x28
1000e070:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1000e072:	9309      	str	r3, [sp, #36]	; 0x24
1000e074:	9b1c      	ldr	r3, [sp, #112]	; 0x70
1000e076:	9c1e      	ldr	r4, [sp, #120]	; 0x78
1000e078:	9706      	str	r7, [sp, #24]
1000e07a:	e9cd 8307 	strd	r8, r3, [sp, #28]
1000e07e:	9b15      	ldr	r3, [sp, #84]	; 0x54
1000e080:	9305      	str	r3, [sp, #20]
1000e082:	9b16      	ldr	r3, [sp, #88]	; 0x58
1000e084:	9304      	str	r3, [sp, #16]
1000e086:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1000e088:	9303      	str	r3, [sp, #12]
1000e08a:	9b18      	ldr	r3, [sp, #96]	; 0x60
1000e08c:	9302      	str	r3, [sp, #8]
1000e08e:	9b14      	ldr	r3, [sp, #80]	; 0x50
1000e090:	9301      	str	r3, [sp, #4]
1000e092:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1000e094:	9300      	str	r3, [sp, #0]
1000e096:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1000e098:	9310      	str	r3, [sp, #64]	; 0x40
1000e09a:	464a      	mov	r2, r9
1000e09c:	4633      	mov	r3, r6
1000e09e:	4651      	mov	r1, sl
1000e0a0:	4658      	mov	r0, fp
1000e0a2:	940f      	str	r4, [sp, #60]	; 0x3c
1000e0a4:	f000 fe38 	bl	1000ed18 <forward_lite_conv2d_if32of32wf32>
1000e0a8:	b021      	add	sp, #132	; 0x84
1000e0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000e0ae:	685b      	ldr	r3, [r3, #4]
1000e0b0:	deff      	udf	#255	; 0xff
1000e0b2:	2300      	movs	r3, #0
1000e0b4:	685b      	ldr	r3, [r3, #4]
1000e0b6:	deff      	udf	#255	; 0xff
1000e0b8:	68d2      	ldr	r2, [r2, #12]
1000e0ba:	2a00      	cmp	r2, #0
1000e0bc:	d0d0      	beq.n	1000e060 <forward_conv2d_if32of32wf32+0xe0>
1000e0be:	2b03      	cmp	r3, #3
1000e0c0:	d021      	beq.n	1000e106 <forward_conv2d_if32of32wf32+0x186>
1000e0c2:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
1000e0c6:	b1c3      	cbz	r3, 1000e0fa <forward_conv2d_if32of32wf32+0x17a>
1000e0c8:	681b      	ldr	r3, [r3, #0]
1000e0ca:	b1b3      	cbz	r3, 1000e0fa <forward_conv2d_if32of32wf32+0x17a>
1000e0cc:	699b      	ldr	r3, [r3, #24]
1000e0ce:	e9d3 3001 	ldrd	r3, r0, [r3, #4]
1000e0d2:	9301      	str	r3, [sp, #4]
1000e0d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1000e0d6:	9300      	str	r3, [sp, #0]
1000e0d8:	f3c1 13c6 	ubfx	r3, r1, #7, #7
1000e0dc:	f3c1 5141 	ubfx	r1, r1, #21, #2
1000e0e0:	410b      	asrs	r3, r1
1000e0e2:	b29b      	uxth	r3, r3
1000e0e4:	4649      	mov	r1, r9
1000e0e6:	2800      	cmp	r0, #0
1000e0e8:	bf18      	it	ne
1000e0ea:	4681      	movne	r9, r0
1000e0ec:	f7ff fef8 	bl	1000dee0 <ai_dict_decompress_f32>
1000e0f0:	e7b6      	b.n	1000e060 <forward_conv2d_if32of32wf32+0xe0>
1000e0f2:	4634      	mov	r4, r6
1000e0f4:	e768      	b.n	1000dfc8 <forward_conv2d_if32of32wf32+0x48>
1000e0f6:	2600      	movs	r6, #0
1000e0f8:	e766      	b.n	1000dfc8 <forward_conv2d_if32of32wf32+0x48>
1000e0fa:	2300      	movs	r3, #0
1000e0fc:	699b      	ldr	r3, [r3, #24]
1000e0fe:	deff      	udf	#255	; 0xff
1000e100:	2300      	movs	r3, #0
1000e102:	685b      	ldr	r3, [r3, #4]
1000e104:	deff      	udf	#255	; 0xff
1000e106:	2300      	movs	r3, #0
1000e108:	685b      	ldr	r3, [r3, #4]
1000e10a:	deff      	udf	#255	; 0xff

1000e10c <forward_dense>:
1000e10c:	6983      	ldr	r3, [r0, #24]
1000e10e:	881a      	ldrh	r2, [r3, #0]
1000e110:	2a00      	cmp	r2, #0
1000e112:	f000 8181 	beq.w	1000e418 <forward_dense+0x30c>
1000e116:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000e11a:	ed2d 8b02 	vpush	{d8}
1000e11e:	f8d3 c004 	ldr.w	ip, [r3, #4]
1000e122:	f8dc 5004 	ldr.w	r5, [ip, #4]
1000e126:	b095      	sub	sp, #84	; 0x54
1000e128:	b105      	cbz	r5, 1000e12c <forward_dense+0x20>
1000e12a:	682d      	ldr	r5, [r5, #0]
1000e12c:	2a01      	cmp	r2, #1
1000e12e:	f000 828f 	beq.w	1000e650 <forward_dense+0x544>
1000e132:	f8dc 6010 	ldr.w	r6, [ip, #16]
1000e136:	b106      	cbz	r6, 1000e13a <forward_dense+0x2e>
1000e138:	6836      	ldr	r6, [r6, #0]
1000e13a:	2a02      	cmp	r2, #2
1000e13c:	f000 816e 	beq.w	1000e41c <forward_dense+0x310>
1000e140:	f8dc 301c 	ldr.w	r3, [ip, #28]
1000e144:	930b      	str	r3, [sp, #44]	; 0x2c
1000e146:	2b00      	cmp	r3, #0
1000e148:	f000 8274 	beq.w	1000e634 <forward_dense+0x528>
1000e14c:	4619      	mov	r1, r3
1000e14e:	f8bc 3018 	ldrh.w	r3, [ip, #24]
1000e152:	6809      	ldr	r1, [r1, #0]
1000e154:	910d      	str	r1, [sp, #52]	; 0x34
1000e156:	2b01      	cmp	r3, #1
1000e158:	f240 826e 	bls.w	1000e638 <forward_dense+0x52c>
1000e15c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000e15e:	685b      	ldr	r3, [r3, #4]
1000e160:	930b      	str	r3, [sp, #44]	; 0x2c
1000e162:	460b      	mov	r3, r1
1000e164:	68e8      	ldr	r0, [r5, #12]
1000e166:	68f7      	ldr	r7, [r6, #12]
1000e168:	6840      	ldr	r0, [r0, #4]
1000e16a:	6999      	ldr	r1, [r3, #24]
1000e16c:	9013      	str	r0, [sp, #76]	; 0x4c
1000e16e:	6878      	ldr	r0, [r7, #4]
1000e170:	680b      	ldr	r3, [r1, #0]
1000e172:	9012      	str	r0, [sp, #72]	; 0x48
1000e174:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
1000e178:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
1000e17c:	fb00 f404 	mul.w	r4, r0, r4
1000e180:	f3c3 5041 	ubfx	r0, r3, #21, #2
1000e184:	fa4e f000 	asr.w	r0, lr, r0
1000e188:	2a03      	cmp	r2, #3
1000e18a:	9010      	str	r0, [sp, #64]	; 0x40
1000e18c:	f000 825d 	beq.w	1000e64a <forward_dense+0x53e>
1000e190:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
1000e194:	f3c3 4343 	ubfx	r3, r3, #17, #4
1000e198:	2a00      	cmp	r2, #0
1000e19a:	f000 8246 	beq.w	1000e62a <forward_dense+0x51e>
1000e19e:	6812      	ldr	r2, [r2, #0]
1000e1a0:	2a00      	cmp	r2, #0
1000e1a2:	f000 8242 	beq.w	1000e62a <forward_dense+0x51e>
1000e1a6:	2b04      	cmp	r3, #4
1000e1a8:	f8d2 9018 	ldr.w	r9, [r2, #24]
1000e1ac:	f000 822c 	beq.w	1000e608 <forward_dense+0x4fc>
1000e1b0:	2b08      	cmp	r3, #8
1000e1b2:	f000 8229 	beq.w	1000e608 <forward_dense+0x4fc>
1000e1b6:	f04f 0b00 	mov.w	fp, #0
1000e1ba:	69b2      	ldr	r2, [r6, #24]
1000e1bc:	69ab      	ldr	r3, [r5, #24]
1000e1be:	6891      	ldr	r1, [r2, #8]
1000e1c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000e1c2:	689b      	ldr	r3, [r3, #8]
1000e1c4:	6952      	ldr	r2, [r2, #20]
1000e1c6:	9106      	str	r1, [sp, #24]
1000e1c8:	fb07 f404 	mul.w	r4, r7, r4
1000e1cc:	f8d2 9004 	ldr.w	r9, [r2, #4]
1000e1d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000e1d2:	eb01 0084 	add.w	r0, r1, r4, lsl #2
1000e1d6:	4281      	cmp	r1, r0
1000e1d8:	ea4f 0482 	mov.w	r4, r2, lsl #2
1000e1dc:	900e      	str	r0, [sp, #56]	; 0x38
1000e1de:	940c      	str	r4, [sp, #48]	; 0x30
1000e1e0:	eb01 0882 	add.w	r8, r1, r2, lsl #2
1000e1e4:	f080 8113 	bcs.w	1000e40e <forward_dense+0x302>
1000e1e8:	9913      	ldr	r1, [sp, #76]	; 0x4c
1000e1ea:	ed9f 8a93 	vldr	s16, [pc, #588]	; 1000e438 <forward_dense+0x32c>
1000e1ee:	f021 0201 	bic.w	r2, r1, #1
1000e1f2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
1000e1f6:	9204      	str	r2, [sp, #16]
1000e1f8:	f001 0201 	and.w	r2, r1, #1
1000e1fc:	08c8      	lsrs	r0, r1, #3
1000e1fe:	9208      	str	r2, [sp, #32]
1000e200:	008a      	lsls	r2, r1, #2
1000e202:	f001 0a07 	and.w	sl, r1, #7
1000e206:	920f      	str	r2, [sp, #60]	; 0x3c
1000e208:	eb03 1240 	add.w	r2, r3, r0, lsl #5
1000e20c:	3320      	adds	r3, #32
1000e20e:	465c      	mov	r4, fp
1000e210:	9007      	str	r0, [sp, #28]
1000e212:	46cb      	mov	fp, r9
1000e214:	9205      	str	r2, [sp, #20]
1000e216:	9302      	str	r3, [sp, #8]
1000e218:	46c1      	mov	r9, r8
1000e21a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
1000e21e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000e220:	699b      	ldr	r3, [r3, #24]
1000e222:	689a      	ldr	r2, [r3, #8]
1000e224:	9b02      	ldr	r3, [sp, #8]
1000e226:	3b20      	subs	r3, #32
1000e228:	930a      	str	r3, [sp, #40]	; 0x28
1000e22a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000e22c:	b10b      	cbz	r3, 1000e232 <forward_dense+0x126>
1000e22e:	699b      	ldr	r3, [r3, #24]
1000e230:	689b      	ldr	r3, [r3, #8]
1000e232:	2c00      	cmp	r4, #0
1000e234:	f000 81da 	beq.w	1000e5ec <forward_dense+0x4e0>
1000e238:	9910      	ldr	r1, [sp, #64]	; 0x40
1000e23a:	2904      	cmp	r1, #4
1000e23c:	9906      	ldr	r1, [sp, #24]
1000e23e:	f000 80fd 	beq.w	1000e43c <forward_dense+0x330>
1000e242:	4549      	cmp	r1, r9
1000e244:	f080 80d2 	bcs.w	1000e3ec <forward_dense+0x2e0>
1000e248:	460f      	mov	r7, r1
1000e24a:	9907      	ldr	r1, [sp, #28]
1000e24c:	f8dd 8008 	ldr.w	r8, [sp, #8]
1000e250:	f8dd a014 	ldr.w	sl, [sp, #20]
1000e254:	1c4e      	adds	r6, r1, #1
1000e256:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
1000e25a:	4694      	mov	ip, r2
1000e25c:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000e25e:	468e      	mov	lr, r1
1000e260:	2b00      	cmp	r3, #0
1000e262:	f000 80de 	beq.w	1000e422 <forward_dense+0x316>
1000e266:	ecf3 2a01 	vldmia	r3!, {s5}
1000e26a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 1000e438 <forward_dense+0x32c>
1000e26e:	f1be 0f00 	cmp.w	lr, #0
1000e272:	f000 80de 	beq.w	1000e432 <forward_dense+0x326>
1000e276:	f10c 0108 	add.w	r1, ip, #8
1000e27a:	4640      	mov	r0, r8
1000e27c:	f811 5c07 	ldrb.w	r5, [r1, #-7]
1000e280:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
1000e284:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
1000e288:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
1000e28c:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
1000e290:	ed10 5a04 	vldr	s10, [r0, #-16]
1000e294:	ed50 5a03 	vldr	s11, [r0, #-12]
1000e298:	ed10 6a02 	vldr	s12, [r0, #-8]
1000e29c:	ed50 6a01 	vldr	s13, [r0, #-4]
1000e2a0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e2a4:	edd5 7a00 	vldr	s15, [r5]
1000e2a8:	f811 5c08 	ldrb.w	r5, [r1, #-8]
1000e2ac:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e2b0:	ee67 7a83 	vmul.f32	s15, s15, s6
1000e2b4:	ed95 3a00 	vldr	s6, [r5]
1000e2b8:	f811 5c06 	ldrb.w	r5, [r1, #-6]
1000e2bc:	eee3 7a23 	vfma.f32	s15, s6, s7
1000e2c0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e2c4:	3108      	adds	r1, #8
1000e2c6:	edd5 3a00 	vldr	s7, [r5]
1000e2ca:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
1000e2ce:	eee3 7a84 	vfma.f32	s15, s7, s8
1000e2d2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e2d6:	3020      	adds	r0, #32
1000e2d8:	ed95 4a00 	vldr	s8, [r5]
1000e2dc:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
1000e2e0:	eee4 7a24 	vfma.f32	s15, s8, s9
1000e2e4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e2e8:	edd5 4a00 	vldr	s9, [r5]
1000e2ec:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
1000e2f0:	eee4 7a85 	vfma.f32	s15, s9, s10
1000e2f4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e2f8:	ed95 5a00 	vldr	s10, [r5]
1000e2fc:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
1000e300:	eee5 7a25 	vfma.f32	s15, s10, s11
1000e304:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e308:	edd5 5a00 	vldr	s11, [r5]
1000e30c:	f811 5c09 	ldrb.w	r5, [r1, #-9]
1000e310:	eee5 7a86 	vfma.f32	s15, s11, s12
1000e314:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e318:	428e      	cmp	r6, r1
1000e31a:	ed95 6a00 	vldr	s12, [r5]
1000e31e:	eee6 7a26 	vfma.f32	s15, s12, s13
1000e322:	ee37 7a27 	vadd.f32	s14, s14, s15
1000e326:	d1a9      	bne.n	1000e27c <forward_dense+0x170>
1000e328:	f1a6 0108 	sub.w	r1, r6, #8
1000e32c:	4650      	mov	r0, sl
1000e32e:	2a00      	cmp	r2, #0
1000e330:	d04a      	beq.n	1000e3c8 <forward_dense+0x2bc>
1000e332:	780d      	ldrb	r5, [r1, #0]
1000e334:	edd0 6a00 	vldr	s13, [r0]
1000e338:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e33c:	edd5 7a00 	vldr	s15, [r5]
1000e340:	2a01      	cmp	r2, #1
1000e342:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e346:	d03f      	beq.n	1000e3c8 <forward_dense+0x2bc>
1000e348:	784d      	ldrb	r5, [r1, #1]
1000e34a:	edd0 6a01 	vldr	s13, [r0, #4]
1000e34e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e352:	edd5 7a00 	vldr	s15, [r5]
1000e356:	2a02      	cmp	r2, #2
1000e358:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e35c:	d034      	beq.n	1000e3c8 <forward_dense+0x2bc>
1000e35e:	788d      	ldrb	r5, [r1, #2]
1000e360:	edd0 6a02 	vldr	s13, [r0, #8]
1000e364:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e368:	edd5 7a00 	vldr	s15, [r5]
1000e36c:	2a03      	cmp	r2, #3
1000e36e:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e372:	d029      	beq.n	1000e3c8 <forward_dense+0x2bc>
1000e374:	78cd      	ldrb	r5, [r1, #3]
1000e376:	edd0 6a03 	vldr	s13, [r0, #12]
1000e37a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e37e:	edd5 7a00 	vldr	s15, [r5]
1000e382:	2a04      	cmp	r2, #4
1000e384:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e388:	d01e      	beq.n	1000e3c8 <forward_dense+0x2bc>
1000e38a:	790d      	ldrb	r5, [r1, #4]
1000e38c:	edd0 6a04 	vldr	s13, [r0, #16]
1000e390:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e394:	edd5 7a00 	vldr	s15, [r5]
1000e398:	2a05      	cmp	r2, #5
1000e39a:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e39e:	d013      	beq.n	1000e3c8 <forward_dense+0x2bc>
1000e3a0:	794d      	ldrb	r5, [r1, #5]
1000e3a2:	edd0 6a05 	vldr	s13, [r0, #20]
1000e3a6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e3aa:	edd5 7a00 	vldr	s15, [r5]
1000e3ae:	2a06      	cmp	r2, #6
1000e3b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e3b4:	d008      	beq.n	1000e3c8 <forward_dense+0x2bc>
1000e3b6:	7989      	ldrb	r1, [r1, #6]
1000e3b8:	edd0 7a06 	vldr	s15, [r0, #24]
1000e3bc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
1000e3c0:	edd1 6a00 	vldr	s13, [r1]
1000e3c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e3c8:	44dc      	add	ip, fp
1000e3ca:	445e      	add	r6, fp
1000e3cc:	ee32 7a87 	vadd.f32	s14, s5, s14
1000e3d0:	eca7 7a01 	vstmia	r7!, {s14}
1000e3d4:	454f      	cmp	r7, r9
1000e3d6:	f4ff af43 	bcc.w	1000e260 <forward_dense+0x154>
1000e3da:	9a06      	ldr	r2, [sp, #24]
1000e3dc:	eba9 0302 	sub.w	r3, r9, r2
1000e3e0:	3b01      	subs	r3, #1
1000e3e2:	f023 0303 	bic.w	r3, r3, #3
1000e3e6:	3304      	adds	r3, #4
1000e3e8:	18d3      	adds	r3, r2, r3
1000e3ea:	9306      	str	r3, [sp, #24]
1000e3ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000e3ee:	9a05      	ldr	r2, [sp, #20]
1000e3f0:	4499      	add	r9, r3
1000e3f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000e3f4:	441a      	add	r2, r3
1000e3f6:	9205      	str	r2, [sp, #20]
1000e3f8:	9a02      	ldr	r2, [sp, #8]
1000e3fa:	441a      	add	r2, r3
1000e3fc:	9202      	str	r2, [sp, #8]
1000e3fe:	9a04      	ldr	r2, [sp, #16]
1000e400:	441a      	add	r2, r3
1000e402:	9204      	str	r2, [sp, #16]
1000e404:	9b06      	ldr	r3, [sp, #24]
1000e406:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000e408:	4293      	cmp	r3, r2
1000e40a:	f4ff af08 	bcc.w	1000e21e <forward_dense+0x112>
1000e40e:	b015      	add	sp, #84	; 0x54
1000e410:	ecbd 8b02 	vpop	{d8}
1000e414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000e418:	6853      	ldr	r3, [r2, #4]
1000e41a:	deff      	udf	#255	; 0xff
1000e41c:	2300      	movs	r3, #0
1000e41e:	685b      	ldr	r3, [r3, #4]
1000e420:	deff      	udf	#255	; 0xff
1000e422:	ed9f 7a05 	vldr	s14, [pc, #20]	; 1000e438 <forward_dense+0x32c>
1000e426:	eef0 2a48 	vmov.f32	s5, s16
1000e42a:	f1be 0f00 	cmp.w	lr, #0
1000e42e:	f47f af22 	bne.w	1000e276 <forward_dense+0x16a>
1000e432:	980a      	ldr	r0, [sp, #40]	; 0x28
1000e434:	4661      	mov	r1, ip
1000e436:	e77a      	b.n	1000e32e <forward_dense+0x222>
1000e438:	00000000 	.word	0x00000000
1000e43c:	4549      	cmp	r1, r9
1000e43e:	d2d5      	bcs.n	1000e3ec <forward_dense+0x2e0>
1000e440:	9807      	ldr	r0, [sp, #28]
1000e442:	9103      	str	r1, [sp, #12]
1000e444:	9904      	ldr	r1, [sp, #16]
1000e446:	f100 0c01 	add.w	ip, r0, #1
1000e44a:	3901      	subs	r1, #1
1000e44c:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
1000e450:	9109      	str	r1, [sp, #36]	; 0x24
1000e452:	2b00      	cmp	r3, #0
1000e454:	f000 80b2 	beq.w	1000e5bc <forward_dense+0x4b0>
1000e458:	9907      	ldr	r1, [sp, #28]
1000e45a:	ecf3 2a01 	vldmia	r3!, {s5}
1000e45e:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 1000e438 <forward_dense+0x32c>
1000e462:	2900      	cmp	r1, #0
1000e464:	f000 80b2 	beq.w	1000e5cc <forward_dense+0x4c0>
1000e468:	9902      	ldr	r1, [sp, #8]
1000e46a:	1d10      	adds	r0, r2, #4
1000e46c:	f810 6c04 	ldrb.w	r6, [r0, #-4]
1000e470:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
1000e474:	f810 5c03 	ldrb.w	r5, [r0, #-3]
1000e478:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
1000e47c:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
1000e480:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
1000e484:	ed11 5a04 	vldr	s10, [r1, #-16]
1000e488:	ed51 5a03 	vldr	s11, [r1, #-12]
1000e48c:	ed11 6a02 	vldr	s12, [r1, #-8]
1000e490:	ed51 6a01 	vldr	s13, [r1, #-4]
1000e494:	f006 070f 	and.w	r7, r6, #15
1000e498:	eb04 0787 	add.w	r7, r4, r7, lsl #2
1000e49c:	edd7 7a00 	vldr	s15, [r7]
1000e4a0:	0936      	lsrs	r6, r6, #4
1000e4a2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
1000e4a6:	ed96 3a00 	vldr	s6, [r6]
1000e4aa:	ee67 7a82 	vmul.f32	s15, s15, s4
1000e4ae:	092e      	lsrs	r6, r5, #4
1000e4b0:	eee3 7a23 	vfma.f32	s15, s6, s7
1000e4b4:	eb04 0686 	add.w	r6, r4, r6, lsl #2
1000e4b8:	f005 050f 	and.w	r5, r5, #15
1000e4bc:	edd6 3a00 	vldr	s7, [r6]
1000e4c0:	f810 6c02 	ldrb.w	r6, [r0, #-2]
1000e4c4:	eee3 7a84 	vfma.f32	s15, s7, s8
1000e4c8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e4cc:	0937      	lsrs	r7, r6, #4
1000e4ce:	ed95 4a00 	vldr	s8, [r5]
1000e4d2:	f810 5c01 	ldrb.w	r5, [r0, #-1]
1000e4d6:	eee4 7a24 	vfma.f32	s15, s8, s9
1000e4da:	eb04 0787 	add.w	r7, r4, r7, lsl #2
1000e4de:	f006 060f 	and.w	r6, r6, #15
1000e4e2:	edd7 4a00 	vldr	s9, [r7]
1000e4e6:	eee4 7a85 	vfma.f32	s15, s9, s10
1000e4ea:	eb04 0686 	add.w	r6, r4, r6, lsl #2
1000e4ee:	3004      	adds	r0, #4
1000e4f0:	ed96 5a00 	vldr	s10, [r6]
1000e4f4:	092e      	lsrs	r6, r5, #4
1000e4f6:	eee5 7a25 	vfma.f32	s15, s10, s11
1000e4fa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
1000e4fe:	f005 050f 	and.w	r5, r5, #15
1000e502:	edd6 5a00 	vldr	s11, [r6]
1000e506:	eee5 7a86 	vfma.f32	s15, s11, s12
1000e50a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e50e:	4584      	cmp	ip, r0
1000e510:	ed95 6a00 	vldr	s12, [r5]
1000e514:	eee6 7a26 	vfma.f32	s15, s12, s13
1000e518:	f101 0120 	add.w	r1, r1, #32
1000e51c:	ee37 7a27 	vadd.f32	s14, s14, s15
1000e520:	d1a4      	bne.n	1000e46c <forward_dense+0x360>
1000e522:	f8dd e014 	ldr.w	lr, [sp, #20]
1000e526:	f1ac 0804 	sub.w	r8, ip, #4
1000e52a:	9904      	ldr	r1, [sp, #16]
1000e52c:	458e      	cmp	lr, r1
1000e52e:	d22a      	bcs.n	1000e586 <forward_dense+0x47a>
1000e530:	9909      	ldr	r1, [sp, #36]	; 0x24
1000e532:	eba1 070e 	sub.w	r7, r1, lr
1000e536:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
1000e53a:	f10e 0008 	add.w	r0, lr, #8
1000e53e:	f108 36ff 	add.w	r6, r8, #4294967295
1000e542:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
1000e546:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1000e54a:	ed50 5a01 	vldr	s11, [r0, #-4]
1000e54e:	ed50 6a02 	vldr	s13, [r0, #-8]
1000e552:	f001 050f 	and.w	r5, r1, #15
1000e556:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e55a:	edd5 7a00 	vldr	s15, [r5]
1000e55e:	0909      	lsrs	r1, r1, #4
1000e560:	eb04 0181 	add.w	r1, r4, r1, lsl #2
1000e564:	ed91 6a00 	vldr	s12, [r1]
1000e568:	ee67 7aa5 	vmul.f32	s15, s15, s11
1000e56c:	42b7      	cmp	r7, r6
1000e56e:	eee6 7a26 	vfma.f32	s15, s12, s13
1000e572:	f100 0008 	add.w	r0, r0, #8
1000e576:	ee37 7a27 	vadd.f32	s14, s14, s15
1000e57a:	d1e4      	bne.n	1000e546 <forward_dense+0x43a>
1000e57c:	f10a 0a01 	add.w	sl, sl, #1
1000e580:	44d0      	add	r8, sl
1000e582:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
1000e586:	9908      	ldr	r1, [sp, #32]
1000e588:	b321      	cbz	r1, 1000e5d4 <forward_dense+0x4c8>
1000e58a:	f898 1000 	ldrb.w	r1, [r8]
1000e58e:	edde 7a00 	vldr	s15, [lr]
1000e592:	0909      	lsrs	r1, r1, #4
1000e594:	eb04 0181 	add.w	r1, r4, r1, lsl #2
1000e598:	edd1 6a00 	vldr	s13, [r1]
1000e59c:	9903      	ldr	r1, [sp, #12]
1000e59e:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e5a2:	445a      	add	r2, fp
1000e5a4:	44dc      	add	ip, fp
1000e5a6:	ee72 2a87 	vadd.f32	s5, s5, s14
1000e5aa:	ece1 2a01 	vstmia	r1!, {s5}
1000e5ae:	4589      	cmp	r9, r1
1000e5b0:	9103      	str	r1, [sp, #12]
1000e5b2:	f67f af12 	bls.w	1000e3da <forward_dense+0x2ce>
1000e5b6:	2b00      	cmp	r3, #0
1000e5b8:	f47f af4e 	bne.w	1000e458 <forward_dense+0x34c>
1000e5bc:	9907      	ldr	r1, [sp, #28]
1000e5be:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 1000e438 <forward_dense+0x32c>
1000e5c2:	eef0 2a48 	vmov.f32	s5, s16
1000e5c6:	2900      	cmp	r1, #0
1000e5c8:	f47f af4e 	bne.w	1000e468 <forward_dense+0x35c>
1000e5cc:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
1000e5d0:	4690      	mov	r8, r2
1000e5d2:	e7aa      	b.n	1000e52a <forward_dense+0x41e>
1000e5d4:	9903      	ldr	r1, [sp, #12]
1000e5d6:	ee32 7a87 	vadd.f32	s14, s5, s14
1000e5da:	445a      	add	r2, fp
1000e5dc:	eca1 7a01 	vstmia	r1!, {s14}
1000e5e0:	4549      	cmp	r1, r9
1000e5e2:	9103      	str	r1, [sp, #12]
1000e5e4:	44dc      	add	ip, fp
1000e5e6:	f4ff af34 	bcc.w	1000e452 <forward_dense+0x346>
1000e5ea:	e6f6      	b.n	1000e3da <forward_dense+0x2ce>
1000e5ec:	9912      	ldr	r1, [sp, #72]	; 0x48
1000e5ee:	9d06      	ldr	r5, [sp, #24]
1000e5f0:	9101      	str	r1, [sp, #4]
1000e5f2:	9913      	ldr	r1, [sp, #76]	; 0x4c
1000e5f4:	9100      	str	r1, [sp, #0]
1000e5f6:	4628      	mov	r0, r5
1000e5f8:	990a      	ldr	r1, [sp, #40]	; 0x28
1000e5fa:	f000 fcef 	bl	1000efdc <forward_lite_dense_if32of32wf32>
1000e5fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000e600:	462b      	mov	r3, r5
1000e602:	4413      	add	r3, r2
1000e604:	9306      	str	r3, [sp, #24]
1000e606:	e6f1      	b.n	1000e3ec <forward_dense+0x2e0>
1000e608:	f8d1 800c 	ldr.w	r8, [r1, #12]
1000e60c:	f1b9 0f00 	cmp.w	r9, #0
1000e610:	d016      	beq.n	1000e640 <forward_dense+0x534>
1000e612:	e9d9 0100 	ldrd	r0, r1, [r9]
1000e616:	f000 fef7 	bl	1000f408 <ai_array_get_byte_size>
1000e61a:	f8d9 b00c 	ldr.w	fp, [r9, #12]
1000e61e:	4602      	mov	r2, r0
1000e620:	4659      	mov	r1, fp
1000e622:	4640      	mov	r0, r8
1000e624:	f000 fdfe 	bl	1000f224 <st_int8_copy>
1000e628:	e5c7      	b.n	1000e1ba <forward_dense+0xae>
1000e62a:	2b04      	cmp	r3, #4
1000e62c:	d00a      	beq.n	1000e644 <forward_dense+0x538>
1000e62e:	f04f 0900 	mov.w	r9, #0
1000e632:	e5bd      	b.n	1000e1b0 <forward_dense+0xa4>
1000e634:	930d      	str	r3, [sp, #52]	; 0x34
1000e636:	e595      	b.n	1000e164 <forward_dense+0x58>
1000e638:	2300      	movs	r3, #0
1000e63a:	930b      	str	r3, [sp, #44]	; 0x2c
1000e63c:	460b      	mov	r3, r1
1000e63e:	e591      	b.n	1000e164 <forward_dense+0x58>
1000e640:	46c3      	mov	fp, r8
1000e642:	e5ba      	b.n	1000e1ba <forward_dense+0xae>
1000e644:	f8d1 b00c 	ldr.w	fp, [r1, #12]
1000e648:	e5b7      	b.n	1000e1ba <forward_dense+0xae>
1000e64a:	2300      	movs	r3, #0
1000e64c:	685b      	ldr	r3, [r3, #4]
1000e64e:	deff      	udf	#255	; 0xff
1000e650:	2300      	movs	r3, #0
1000e652:	685b      	ldr	r3, [r3, #4]
1000e654:	deff      	udf	#255	; 0xff
1000e656:	bf00      	nop

1000e658 <forward_sigmoid>:
1000e658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e65a:	ed2d 8b02 	vpush	{d8}
1000e65e:	6982      	ldr	r2, [r0, #24]
1000e660:	8813      	ldrh	r3, [r2, #0]
1000e662:	2b00      	cmp	r3, #0
1000e664:	d03b      	beq.n	1000e6de <forward_sigmoid+0x86>
1000e666:	6852      	ldr	r2, [r2, #4]
1000e668:	6854      	ldr	r4, [r2, #4]
1000e66a:	b104      	cbz	r4, 1000e66e <forward_sigmoid+0x16>
1000e66c:	6824      	ldr	r4, [r4, #0]
1000e66e:	2b01      	cmp	r3, #1
1000e670:	d034      	beq.n	1000e6dc <forward_sigmoid+0x84>
1000e672:	6915      	ldr	r5, [r2, #16]
1000e674:	b105      	cbz	r5, 1000e678 <forward_sigmoid+0x20>
1000e676:	682d      	ldr	r5, [r5, #0]
1000e678:	68a3      	ldr	r3, [r4, #8]
1000e67a:	0a1b      	lsrs	r3, r3, #8
1000e67c:	d031      	beq.n	1000e6e2 <forward_sigmoid+0x8a>
1000e67e:	68e0      	ldr	r0, [r4, #12]
1000e680:	2201      	movs	r2, #1
1000e682:	eb00 0383 	add.w	r3, r0, r3, lsl #2
1000e686:	f853 1d04 	ldr.w	r1, [r3, #-4]!
1000e68a:	4298      	cmp	r0, r3
1000e68c:	fb01 f202 	mul.w	r2, r1, r2
1000e690:	d1f9      	bne.n	1000e686 <forward_sigmoid+0x2e>
1000e692:	69a7      	ldr	r7, [r4, #24]
1000e694:	69a9      	ldr	r1, [r5, #24]
1000e696:	68bb      	ldr	r3, [r7, #8]
1000e698:	688e      	ldr	r6, [r1, #8]
1000e69a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
1000e69e:	3a01      	subs	r2, #1
1000e6a0:	eb03 0582 	add.w	r5, r3, r2, lsl #2
1000e6a4:	42ab      	cmp	r3, r5
1000e6a6:	eb06 0682 	add.w	r6, r6, r2, lsl #2
1000e6aa:	d814      	bhi.n	1000e6d6 <forward_sigmoid+0x7e>
1000e6ac:	3504      	adds	r5, #4
1000e6ae:	3604      	adds	r6, #4
1000e6b0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
1000e6b4:	462c      	mov	r4, r5
1000e6b6:	ed35 0a01 	vldmdb	r5!, {s0}
1000e6ba:	eeb1 0a40 	vneg.f32	s0, s0
1000e6be:	f003 fdad 	bl	1001221c <expf>
1000e6c2:	ee30 0a08 	vadd.f32	s0, s0, s16
1000e6c6:	3c08      	subs	r4, #8
1000e6c8:	eec8 7a00 	vdiv.f32	s15, s16, s0
1000e6cc:	ed66 7a01 	vstmdb	r6!, {s15}
1000e6d0:	68bb      	ldr	r3, [r7, #8]
1000e6d2:	42a3      	cmp	r3, r4
1000e6d4:	d9ee      	bls.n	1000e6b4 <forward_sigmoid+0x5c>
1000e6d6:	ecbd 8b02 	vpop	{d8}
1000e6da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e6dc:	2300      	movs	r3, #0
1000e6de:	685b      	ldr	r3, [r3, #4]
1000e6e0:	deff      	udf	#255	; 0xff
1000e6e2:	69ab      	ldr	r3, [r5, #24]
1000e6e4:	69a7      	ldr	r7, [r4, #24]
1000e6e6:	689e      	ldr	r6, [r3, #8]
1000e6e8:	68bd      	ldr	r5, [r7, #8]
1000e6ea:	e7df      	b.n	1000e6ac <forward_sigmoid+0x54>

1000e6ec <forward_relu>:
1000e6ec:	6982      	ldr	r2, [r0, #24]
1000e6ee:	8813      	ldrh	r3, [r2, #0]
1000e6f0:	2b00      	cmp	r3, #0
1000e6f2:	d05b      	beq.n	1000e7ac <forward_relu+0xc0>
1000e6f4:	6851      	ldr	r1, [r2, #4]
1000e6f6:	684a      	ldr	r2, [r1, #4]
1000e6f8:	b102      	cbz	r2, 1000e6fc <forward_relu+0x10>
1000e6fa:	6812      	ldr	r2, [r2, #0]
1000e6fc:	2b01      	cmp	r3, #1
1000e6fe:	f000 8123 	beq.w	1000e948 <forward_relu+0x25c>
1000e702:	b470      	push	{r4, r5, r6}
1000e704:	6909      	ldr	r1, [r1, #16]
1000e706:	b101      	cbz	r1, 1000e70a <forward_relu+0x1e>
1000e708:	6809      	ldr	r1, [r1, #0]
1000e70a:	69c6      	ldr	r6, [r0, #28]
1000e70c:	2e00      	cmp	r6, #0
1000e70e:	f000 8097 	beq.w	1000e840 <forward_relu+0x154>
1000e712:	6873      	ldr	r3, [r6, #4]
1000e714:	6988      	ldr	r0, [r1, #24]
1000e716:	6991      	ldr	r1, [r2, #24]
1000e718:	2b01      	cmp	r3, #1
1000e71a:	f000 80c1 	beq.w	1000e8a0 <forward_relu+0x1b4>
1000e71e:	6893      	ldr	r3, [r2, #8]
1000e720:	6880      	ldr	r0, [r0, #8]
1000e722:	688c      	ldr	r4, [r1, #8]
1000e724:	0a1b      	lsrs	r3, r3, #8
1000e726:	f000 80f2 	beq.w	1000e90e <forward_relu+0x222>
1000e72a:	68d5      	ldr	r5, [r2, #12]
1000e72c:	2201      	movs	r2, #1
1000e72e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
1000e732:	f853 1d04 	ldr.w	r1, [r3, #-4]!
1000e736:	42ab      	cmp	r3, r5
1000e738:	fb01 f202 	mul.w	r2, r1, r2
1000e73c:	d1f9      	bne.n	1000e732 <forward_relu+0x46>
1000e73e:	68b3      	ldr	r3, [r6, #8]
1000e740:	ed93 7a02 	vldr	s14, [r3, #8]
1000e744:	edd3 6a00 	vldr	s13, [r3]
1000e748:	ed93 6a01 	vldr	s12, [r3, #4]
1000e74c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
1000e750:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
1000e754:	3a01      	subs	r2, #1
1000e756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e75a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
1000e75e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
1000e762:	d425      	bmi.n	1000e7b0 <forward_relu+0xc4>
1000e764:	429c      	cmp	r4, r3
1000e766:	d81f      	bhi.n	1000e7a8 <forward_relu+0xbc>
1000e768:	1d1a      	adds	r2, r3, #4
1000e76a:	1d01      	adds	r1, r0, #4
1000e76c:	e00d      	b.n	1000e78a <forward_relu+0x9e>
1000e76e:	eef4 6ae7 	vcmpe.f32	s13, s15
1000e772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e776:	db03      	blt.n	1000e780 <forward_relu+0x94>
1000e778:	ee77 7ae6 	vsub.f32	s15, s15, s13
1000e77c:	ee67 7a86 	vmul.f32	s15, s15, s12
1000e780:	3b08      	subs	r3, #8
1000e782:	429c      	cmp	r4, r3
1000e784:	ed61 7a01 	vstmdb	r1!, {s15}
1000e788:	d80e      	bhi.n	1000e7a8 <forward_relu+0xbc>
1000e78a:	4613      	mov	r3, r2
1000e78c:	ed72 7a01 	vldmdb	r2!, {s15}
1000e790:	eef4 7ac7 	vcmpe.f32	s15, s14
1000e794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e798:	d9e9      	bls.n	1000e76e <forward_relu+0x82>
1000e79a:	3b08      	subs	r3, #8
1000e79c:	eef0 7a47 	vmov.f32	s15, s14
1000e7a0:	429c      	cmp	r4, r3
1000e7a2:	ed61 7a01 	vstmdb	r1!, {s15}
1000e7a6:	d9f0      	bls.n	1000e78a <forward_relu+0x9e>
1000e7a8:	bc70      	pop	{r4, r5, r6}
1000e7aa:	4770      	bx	lr
1000e7ac:	685b      	ldr	r3, [r3, #4]
1000e7ae:	deff      	udf	#255	; 0xff
1000e7b0:	eeb5 6a40 	vcmp.f32	s12, #0.0
1000e7b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e7b8:	d11f      	bne.n	1000e7fa <forward_relu+0x10e>
1000e7ba:	429c      	cmp	r4, r3
1000e7bc:	d8f4      	bhi.n	1000e7a8 <forward_relu+0xbc>
1000e7be:	1b1c      	subs	r4, r3, r4
1000e7c0:	f024 0403 	bic.w	r4, r4, #3
1000e7c4:	1d1a      	adds	r2, r3, #4
1000e7c6:	2500      	movs	r5, #0
1000e7c8:	1b1b      	subs	r3, r3, r4
1000e7ca:	1d01      	adds	r1, r0, #4
1000e7cc:	ed72 7a01 	vldmdb	r2!, {s15}
1000e7d0:	eef4 7ae6 	vcmpe.f32	s15, s13
1000e7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e7d8:	dc0a      	bgt.n	1000e7f0 <forward_relu+0x104>
1000e7da:	429a      	cmp	r2, r3
1000e7dc:	f841 5d04 	str.w	r5, [r1, #-4]!
1000e7e0:	d0e2      	beq.n	1000e7a8 <forward_relu+0xbc>
1000e7e2:	ed72 7a01 	vldmdb	r2!, {s15}
1000e7e6:	eef4 7ae6 	vcmpe.f32	s15, s13
1000e7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e7ee:	ddf4      	ble.n	1000e7da <forward_relu+0xee>
1000e7f0:	429a      	cmp	r2, r3
1000e7f2:	ed61 7a01 	vstmdb	r1!, {s15}
1000e7f6:	d1e9      	bne.n	1000e7cc <forward_relu+0xe0>
1000e7f8:	e7d6      	b.n	1000e7a8 <forward_relu+0xbc>
1000e7fa:	429c      	cmp	r4, r3
1000e7fc:	d8d4      	bhi.n	1000e7a8 <forward_relu+0xbc>
1000e7fe:	1b1c      	subs	r4, r3, r4
1000e800:	f024 0403 	bic.w	r4, r4, #3
1000e804:	1d1a      	adds	r2, r3, #4
1000e806:	1d01      	adds	r1, r0, #4
1000e808:	1b1b      	subs	r3, r3, r4
1000e80a:	ed72 7a01 	vldmdb	r2!, {s15}
1000e80e:	eef4 6ae7 	vcmpe.f32	s13, s15
1000e812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e816:	db0e      	blt.n	1000e836 <forward_relu+0x14a>
1000e818:	ee77 7ae6 	vsub.f32	s15, s15, s13
1000e81c:	4293      	cmp	r3, r2
1000e81e:	ee67 7a86 	vmul.f32	s15, s15, s12
1000e822:	ed61 7a01 	vstmdb	r1!, {s15}
1000e826:	d0bf      	beq.n	1000e7a8 <forward_relu+0xbc>
1000e828:	ed72 7a01 	vldmdb	r2!, {s15}
1000e82c:	eef4 6ae7 	vcmpe.f32	s13, s15
1000e830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e834:	daf0      	bge.n	1000e818 <forward_relu+0x12c>
1000e836:	4293      	cmp	r3, r2
1000e838:	ed61 7a01 	vstmdb	r1!, {s15}
1000e83c:	d1e5      	bne.n	1000e80a <forward_relu+0x11e>
1000e83e:	e7b3      	b.n	1000e7a8 <forward_relu+0xbc>
1000e840:	6893      	ldr	r3, [r2, #8]
1000e842:	6989      	ldr	r1, [r1, #24]
1000e844:	6990      	ldr	r0, [r2, #24]
1000e846:	6889      	ldr	r1, [r1, #8]
1000e848:	6884      	ldr	r4, [r0, #8]
1000e84a:	0a1b      	lsrs	r3, r3, #8
1000e84c:	d075      	beq.n	1000e93a <forward_relu+0x24e>
1000e84e:	68d5      	ldr	r5, [r2, #12]
1000e850:	2201      	movs	r2, #1
1000e852:	eb05 0383 	add.w	r3, r5, r3, lsl #2
1000e856:	f853 0d04 	ldr.w	r0, [r3, #-4]!
1000e85a:	429d      	cmp	r5, r3
1000e85c:	fb00 f202 	mul.w	r2, r0, r2
1000e860:	d1f9      	bne.n	1000e856 <forward_relu+0x16a>
1000e862:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
1000e866:	3b01      	subs	r3, #1
1000e868:	eb04 0283 	add.w	r2, r4, r3, lsl #2
1000e86c:	4294      	cmp	r4, r2
1000e86e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
1000e872:	d899      	bhi.n	1000e7a8 <forward_relu+0xbc>
1000e874:	ed9f 7a36 	vldr	s14, [pc, #216]	; 1000e950 <forward_relu+0x264>
1000e878:	3204      	adds	r2, #4
1000e87a:	3104      	adds	r1, #4
1000e87c:	4613      	mov	r3, r2
1000e87e:	ed72 7a01 	vldmdb	r2!, {s15}
1000e882:	eef5 7ac0 	vcmpe.f32	s15, #0.0
1000e886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e88a:	f1a3 0308 	sub.w	r3, r3, #8
1000e88e:	bfb8      	it	lt
1000e890:	eef0 7a47 	vmovlt.f32	s15, s14
1000e894:	429c      	cmp	r4, r3
1000e896:	ed61 7a01 	vstmdb	r1!, {s15}
1000e89a:	d9ef      	bls.n	1000e87c <forward_relu+0x190>
1000e89c:	bc70      	pop	{r4, r5, r6}
1000e89e:	4770      	bx	lr
1000e8a0:	688c      	ldr	r4, [r1, #8]
1000e8a2:	6891      	ldr	r1, [r2, #8]
1000e8a4:	6880      	ldr	r0, [r0, #8]
1000e8a6:	0a09      	lsrs	r1, r1, #8
1000e8a8:	d049      	beq.n	1000e93e <forward_relu+0x252>
1000e8aa:	68d5      	ldr	r5, [r2, #12]
1000e8ac:	eb05 0281 	add.w	r2, r5, r1, lsl #2
1000e8b0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
1000e8b4:	42aa      	cmp	r2, r5
1000e8b6:	fb01 f303 	mul.w	r3, r1, r3
1000e8ba:	d1f9      	bne.n	1000e8b0 <forward_relu+0x1c4>
1000e8bc:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
1000e8c0:	3a01      	subs	r2, #1
1000e8c2:	68b1      	ldr	r1, [r6, #8]
1000e8c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
1000e8c8:	429c      	cmp	r4, r3
1000e8ca:	ed91 7a00 	vldr	s14, [r1]
1000e8ce:	eb00 0082 	add.w	r0, r0, r2, lsl #2
1000e8d2:	f63f af69 	bhi.w	1000e7a8 <forward_relu+0xbc>
1000e8d6:	2500      	movs	r5, #0
1000e8d8:	3304      	adds	r3, #4
1000e8da:	1d02      	adds	r2, r0, #4
1000e8dc:	ed53 7a01 	vldr	s15, [r3, #-4]
1000e8e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
1000e8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e8e8:	f1a3 0104 	sub.w	r1, r3, #4
1000e8ec:	f1a3 0308 	sub.w	r3, r3, #8
1000e8f0:	d406      	bmi.n	1000e900 <forward_relu+0x214>
1000e8f2:	429c      	cmp	r4, r3
1000e8f4:	f842 5d04 	str.w	r5, [r2, #-4]!
1000e8f8:	f63f af56 	bhi.w	1000e7a8 <forward_relu+0xbc>
1000e8fc:	460b      	mov	r3, r1
1000e8fe:	e7ed      	b.n	1000e8dc <forward_relu+0x1f0>
1000e900:	429c      	cmp	r4, r3
1000e902:	ed62 7a01 	vstmdb	r2!, {s15}
1000e906:	f63f af4f 	bhi.w	1000e7a8 <forward_relu+0xbc>
1000e90a:	460b      	mov	r3, r1
1000e90c:	e7e6      	b.n	1000e8dc <forward_relu+0x1f0>
1000e90e:	68b3      	ldr	r3, [r6, #8]
1000e910:	ed93 7a02 	vldr	s14, [r3, #8]
1000e914:	edd3 6a00 	vldr	s13, [r3]
1000e918:	ed93 6a01 	vldr	s12, [r3, #4]
1000e91c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
1000e920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e924:	d401      	bmi.n	1000e92a <forward_relu+0x23e>
1000e926:	4623      	mov	r3, r4
1000e928:	e71e      	b.n	1000e768 <forward_relu+0x7c>
1000e92a:	eeb5 6a40 	vcmp.f32	s12, #0.0
1000e92e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e932:	4623      	mov	r3, r4
1000e934:	f47f af63 	bne.w	1000e7fe <forward_relu+0x112>
1000e938:	e741      	b.n	1000e7be <forward_relu+0xd2>
1000e93a:	4622      	mov	r2, r4
1000e93c:	e79a      	b.n	1000e874 <forward_relu+0x188>
1000e93e:	68b2      	ldr	r2, [r6, #8]
1000e940:	4623      	mov	r3, r4
1000e942:	ed92 7a00 	vldr	s14, [r2]
1000e946:	e7c6      	b.n	1000e8d6 <forward_relu+0x1ea>
1000e948:	2300      	movs	r3, #0
1000e94a:	685b      	ldr	r3, [r3, #4]
1000e94c:	deff      	udf	#255	; 0xff
1000e94e:	bf00      	nop
1000e950:	00000000 	.word	0x00000000

1000e954 <forward_mp>:
1000e954:	6983      	ldr	r3, [r0, #24]
1000e956:	881a      	ldrh	r2, [r3, #0]
1000e958:	2a00      	cmp	r2, #0
1000e95a:	f000 80c6 	beq.w	1000eaea <forward_mp+0x196>
1000e95e:	6859      	ldr	r1, [r3, #4]
1000e960:	684b      	ldr	r3, [r1, #4]
1000e962:	b103      	cbz	r3, 1000e966 <forward_mp+0x12>
1000e964:	681b      	ldr	r3, [r3, #0]
1000e966:	2a01      	cmp	r2, #1
1000e968:	f000 80c1 	beq.w	1000eaee <forward_mp+0x19a>
1000e96c:	690a      	ldr	r2, [r1, #16]
1000e96e:	2a00      	cmp	r2, #0
1000e970:	f000 80c0 	beq.w	1000eaf4 <forward_mp+0x1a0>
1000e974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000e978:	6811      	ldr	r1, [r2, #0]
1000e97a:	68ca      	ldr	r2, [r1, #12]
1000e97c:	6989      	ldr	r1, [r1, #24]
1000e97e:	68d4      	ldr	r4, [r2, #12]
1000e980:	6895      	ldr	r5, [r2, #8]
1000e982:	688a      	ldr	r2, [r1, #8]
1000e984:	68d9      	ldr	r1, [r3, #12]
1000e986:	699b      	ldr	r3, [r3, #24]
1000e988:	f8d1 9004 	ldr.w	r9, [r1, #4]
1000e98c:	689b      	ldr	r3, [r3, #8]
1000e98e:	b093      	sub	sp, #76	; 0x4c
1000e990:	9200      	str	r2, [sp, #0]
1000e992:	6b02      	ldr	r2, [r0, #48]	; 0x30
1000e994:	930e      	str	r3, [sp, #56]	; 0x38
1000e996:	e9d2 3600 	ldrd	r3, r6, [r2]
1000e99a:	e9d1 7202 	ldrd	r7, r2, [r1, #8]
1000e99e:	69c1      	ldr	r1, [r0, #28]
1000e9a0:	9109      	str	r1, [sp, #36]	; 0x24
1000e9a2:	6a01      	ldr	r1, [r0, #32]
1000e9a4:	910a      	str	r1, [sp, #40]	; 0x28
1000e9a6:	6a41      	ldr	r1, [r0, #36]	; 0x24
1000e9a8:	910b      	str	r1, [sp, #44]	; 0x2c
1000e9aa:	6a81      	ldr	r1, [r0, #40]	; 0x28
1000e9ac:	9408      	str	r4, [sp, #32]
1000e9ae:	9504      	str	r5, [sp, #16]
1000e9b0:	960d      	str	r6, [sp, #52]	; 0x34
1000e9b2:	9705      	str	r7, [sp, #20]
1000e9b4:	910c      	str	r1, [sp, #48]	; 0x30
1000e9b6:	f1c3 0a00 	rsb	sl, r3, #0
1000e9ba:	2c00      	cmp	r4, #0
1000e9bc:	f000 8092 	beq.w	1000eae4 <forward_mp+0x190>
1000e9c0:	441a      	add	r2, r3
1000e9c2:	9b05      	ldr	r3, [sp, #20]
1000e9c4:	9201      	str	r2, [sp, #4]
1000e9c6:	fb09 f303 	mul.w	r3, r9, r3
1000e9ca:	ea4f 0789 	mov.w	r7, r9, lsl #2
1000e9ce:	ea4f 0883 	mov.w	r8, r3, lsl #2
1000e9d2:	4273      	negs	r3, r6
1000e9d4:	9310      	str	r3, [sp, #64]	; 0x40
1000e9d6:	fb05 f307 	mul.w	r3, r5, r7
1000e9da:	930f      	str	r3, [sp, #60]	; 0x3c
1000e9dc:	f04f 0b00 	mov.w	fp, #0
1000e9e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000e9e2:	9901      	ldr	r1, [sp, #4]
1000e9e4:	428a      	cmp	r2, r1
1000e9e6:	bf94      	ite	ls
1000e9e8:	eb0a 0e02 	addls.w	lr, sl, r2
1000e9ec:	eb0a 0e01 	addhi.w	lr, sl, r1
1000e9f0:	9a04      	ldr	r2, [sp, #16]
1000e9f2:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
1000e9f6:	9307      	str	r3, [sp, #28]
1000e9f8:	2a00      	cmp	r2, #0
1000e9fa:	d068      	beq.n	1000eace <forward_mp+0x17a>
1000e9fc:	9a05      	ldr	r2, [sp, #20]
1000e9fe:	9d00      	ldr	r5, [sp, #0]
1000ea00:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
1000ea04:	fb02 f303 	mul.w	r3, r2, r3
1000ea08:	9303      	str	r3, [sp, #12]
1000ea0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000ea0c:	18d3      	adds	r3, r2, r3
1000ea0e:	9302      	str	r3, [sp, #8]
1000ea10:	2200      	movs	r2, #0
1000ea12:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000ea14:	9206      	str	r2, [sp, #24]
1000ea16:	2b00      	cmp	r3, #0
1000ea18:	bfac      	ite	ge
1000ea1a:	9a03      	ldrge	r2, [sp, #12]
1000ea1c:	9e03      	ldrlt	r6, [sp, #12]
1000ea1e:	9902      	ldr	r1, [sp, #8]
1000ea20:	bfa8      	it	ge
1000ea22:	18d6      	addge	r6, r2, r3
1000ea24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000ea26:	fb06 2607 	mla	r6, r6, r7, r2
1000ea2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000ea2c:	469b      	mov	fp, r3
1000ea2e:	bfb8      	it	lt
1000ea30:	2300      	movlt	r3, #0
1000ea32:	428a      	cmp	r2, r1
1000ea34:	bf94      	ite	ls
1000ea36:	eb0b 0402 	addls.w	r4, fp, r2
1000ea3a:	eb0b 0401 	addhi.w	r4, fp, r1
1000ea3e:	1ae4      	subs	r4, r4, r3
1000ea40:	f1b9 0f00 	cmp.w	r9, #0
1000ea44:	d008      	beq.n	1000ea58 <forward_mp+0x104>
1000ea46:	4633      	mov	r3, r6
1000ea48:	462a      	mov	r2, r5
1000ea4a:	19b9      	adds	r1, r7, r6
1000ea4c:	f853 0b04 	ldr.w	r0, [r3], #4
1000ea50:	f842 0b04 	str.w	r0, [r2], #4
1000ea54:	4299      	cmp	r1, r3
1000ea56:	d1f9      	bne.n	1000ea4c <forward_mp+0xf8>
1000ea58:	9b07      	ldr	r3, [sp, #28]
1000ea5a:	459e      	cmp	lr, r3
1000ea5c:	dd24      	ble.n	1000eaa8 <forward_mp+0x154>
1000ea5e:	469c      	mov	ip, r3
1000ea60:	fb07 6404 	mla	r4, r7, r4, r6
1000ea64:	42a6      	cmp	r6, r4
1000ea66:	d219      	bcs.n	1000ea9c <forward_mp+0x148>
1000ea68:	f1b9 0f00 	cmp.w	r9, #0
1000ea6c:	d016      	beq.n	1000ea9c <forward_mp+0x148>
1000ea6e:	19f1      	adds	r1, r6, r7
1000ea70:	4630      	mov	r0, r6
1000ea72:	4602      	mov	r2, r0
1000ea74:	462b      	mov	r3, r5
1000ea76:	ecf2 7a01 	vldmia	r2!, {s15}
1000ea7a:	ed93 7a00 	vldr	s14, [r3]
1000ea7e:	eef4 7ac7 	vcmpe.f32	s15, s14
1000ea82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000ea86:	bfb8      	it	lt
1000ea88:	eef0 7a47 	vmovlt.f32	s15, s14
1000ea8c:	428a      	cmp	r2, r1
1000ea8e:	ece3 7a01 	vstmia	r3!, {s15}
1000ea92:	d1f0      	bne.n	1000ea76 <forward_mp+0x122>
1000ea94:	4438      	add	r0, r7
1000ea96:	42a0      	cmp	r0, r4
1000ea98:	4439      	add	r1, r7
1000ea9a:	d3ea      	bcc.n	1000ea72 <forward_mp+0x11e>
1000ea9c:	f10c 0c01 	add.w	ip, ip, #1
1000eaa0:	45e6      	cmp	lr, ip
1000eaa2:	4446      	add	r6, r8
1000eaa4:	4444      	add	r4, r8
1000eaa6:	d1dd      	bne.n	1000ea64 <forward_mp+0x110>
1000eaa8:	990b      	ldr	r1, [sp, #44]	; 0x2c
1000eaaa:	9802      	ldr	r0, [sp, #8]
1000eaac:	9a06      	ldr	r2, [sp, #24]
1000eaae:	eb01 030b 	add.w	r3, r1, fp
1000eab2:	1a41      	subs	r1, r0, r1
1000eab4:	9102      	str	r1, [sp, #8]
1000eab6:	9904      	ldr	r1, [sp, #16]
1000eab8:	3201      	adds	r2, #1
1000eaba:	4291      	cmp	r1, r2
1000eabc:	9206      	str	r2, [sp, #24]
1000eabe:	443d      	add	r5, r7
1000eac0:	d1a9      	bne.n	1000ea16 <forward_mp+0xc2>
1000eac2:	9b00      	ldr	r3, [sp, #0]
1000eac4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000eac6:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
1000eaca:	4413      	add	r3, r2
1000eacc:	9300      	str	r3, [sp, #0]
1000eace:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000ead0:	9a01      	ldr	r2, [sp, #4]
1000ead2:	449a      	add	sl, r3
1000ead4:	1ad3      	subs	r3, r2, r3
1000ead6:	9301      	str	r3, [sp, #4]
1000ead8:	9b08      	ldr	r3, [sp, #32]
1000eada:	f10b 0b01 	add.w	fp, fp, #1
1000eade:	455b      	cmp	r3, fp
1000eae0:	f47f af7e 	bne.w	1000e9e0 <forward_mp+0x8c>
1000eae4:	b013      	add	sp, #76	; 0x4c
1000eae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000eaea:	6853      	ldr	r3, [r2, #4]
1000eaec:	deff      	udf	#255	; 0xff
1000eaee:	2300      	movs	r3, #0
1000eaf0:	685b      	ldr	r3, [r3, #4]
1000eaf2:	deff      	udf	#255	; 0xff
1000eaf4:	68d3      	ldr	r3, [r2, #12]
1000eaf6:	deff      	udf	#255	; 0xff

1000eaf8 <ai_conv2d_kernel_simple_opt_f32.constprop.0>:
1000eaf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000eafc:	b08d      	sub	sp, #52	; 0x34
1000eafe:	9003      	str	r0, [sp, #12]
1000eb00:	9207      	str	r2, [sp, #28]
1000eb02:	9308      	str	r3, [sp, #32]
1000eb04:	461a      	mov	r2, r3
1000eb06:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
1000eb0a:	9d18      	ldr	r5, [sp, #96]	; 0x60
1000eb0c:	9c16      	ldr	r4, [sp, #88]	; 0x58
1000eb0e:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
1000eb12:	910b      	str	r1, [sp, #44]	; 0x2c
1000eb14:	fb00 f003 	mul.w	r0, r0, r3
1000eb18:	9004      	str	r0, [sp, #16]
1000eb1a:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
1000eb1e:	9009      	str	r0, [sp, #36]	; 0x24
1000eb20:	2d00      	cmp	r5, #0
1000eb22:	f000 80ef 	beq.w	1000ed04 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x20c>
1000eb26:	fb00 f302 	mul.w	r3, r0, r2
1000eb2a:	009b      	lsls	r3, r3, #2
1000eb2c:	9306      	str	r3, [sp, #24]
1000eb2e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
1000eb30:	fb03 f302 	mul.w	r3, r3, r2
1000eb34:	eb01 0383 	add.w	r3, r1, r3, lsl #2
1000eb38:	9301      	str	r3, [sp, #4]
1000eb3a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
1000eb3c:	425b      	negs	r3, r3
1000eb3e:	9300      	str	r3, [sp, #0]
1000eb40:	2300      	movs	r3, #0
1000eb42:	00a4      	lsls	r4, r4, #2
1000eb44:	9302      	str	r3, [sp, #8]
1000eb46:	0093      	lsls	r3, r2, #2
1000eb48:	9405      	str	r4, [sp, #20]
1000eb4a:	930a      	str	r3, [sp, #40]	; 0x28
1000eb4c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
1000eb4e:	2b00      	cmp	r3, #0
1000eb50:	f2c0 80db 	blt.w	1000ed0a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x212>
1000eb54:	9e01      	ldr	r6, [sp, #4]
1000eb56:	9d04      	ldr	r5, [sp, #16]
1000eb58:	2000      	movs	r0, #0
1000eb5a:	9b07      	ldr	r3, [sp, #28]
1000eb5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000eb5e:	9900      	ldr	r1, [sp, #0]
1000eb60:	fb05 3502 	mla	r5, r5, r2, r3
1000eb64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1000eb66:	440b      	add	r3, r1
1000eb68:	9919      	ldr	r1, [sp, #100]	; 0x64
1000eb6a:	428b      	cmp	r3, r1
1000eb6c:	bf94      	ite	ls
1000eb6e:	ebc0 0003 	rsbls	r0, r0, r3
1000eb72:	ebc0 0001 	rsbhi	r0, r0, r1
1000eb76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1000eb78:	eba3 0a00 	sub.w	sl, r3, r0
1000eb7c:	9b08      	ldr	r3, [sp, #32]
1000eb7e:	f1bb 0f00 	cmp.w	fp, #0
1000eb82:	eba1 0900 	sub.w	r9, r1, r0
1000eb86:	eeb0 7a40 	vmov.f32	s14, s0
1000eb8a:	fb03 f000 	mul.w	r0, r3, r0
1000eb8e:	f340 80a1 	ble.w	1000ecd4 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1dc>
1000eb92:	f020 040f 	bic.w	r4, r0, #15
1000eb96:	f104 38ff 	add.w	r8, r4, #4294967295
1000eb9a:	ea4f 1818 	mov.w	r8, r8, lsr #4
1000eb9e:	f108 0801 	add.w	r8, r8, #1
1000eba2:	ea4f 1e88 	mov.w	lr, r8, lsl #6
1000eba6:	fb02 fa0a 	mul.w	sl, r2, sl
1000ebaa:	fb02 f909 	mul.w	r9, r2, r9
1000ebae:	ea4f 1808 	mov.w	r8, r8, lsl #4
1000ebb2:	f04f 0c00 	mov.w	ip, #0
1000ebb6:	2c00      	cmp	r4, #0
1000ebb8:	bfd8      	it	le
1000ebba:	2700      	movle	r7, #0
1000ebbc:	dd70      	ble.n	1000eca0 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1a8>
1000ebbe:	f106 0240 	add.w	r2, r6, #64	; 0x40
1000ebc2:	f105 0340 	add.w	r3, r5, #64	; 0x40
1000ebc6:	2100      	movs	r1, #0
1000ebc8:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
1000ebcc:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
1000ebd0:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
1000ebd4:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
1000ebd8:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
1000ebdc:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
1000ebe0:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
1000ebe4:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
1000ebe8:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
1000ebec:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
1000ebf0:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
1000ebf4:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
1000ebf8:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
1000ebfc:	ee67 7aa5 	vmul.f32	s15, s15, s11
1000ec00:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
1000ec04:	eee6 7a26 	vfma.f32	s15, s12, s13
1000ec08:	3110      	adds	r1, #16
1000ec0a:	42a1      	cmp	r1, r4
1000ec0c:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
1000ec10:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
1000ec14:	eee5 7a86 	vfma.f32	s15, s11, s12
1000ec18:	f102 0240 	add.w	r2, r2, #64	; 0x40
1000ec1c:	f103 0340 	add.w	r3, r3, #64	; 0x40
1000ec20:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
1000ec24:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
1000ec28:	eee4 7aa6 	vfma.f32	s15, s9, s13
1000ec2c:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
1000ec30:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
1000ec34:	eee5 7a25 	vfma.f32	s15, s10, s11
1000ec38:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
1000ec3c:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
1000ec40:	eee6 7a26 	vfma.f32	s15, s12, s13
1000ec44:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
1000ec48:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
1000ec4c:	eee3 7a23 	vfma.f32	s15, s6, s7
1000ec50:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
1000ec54:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
1000ec58:	eee4 7a24 	vfma.f32	s15, s8, s9
1000ec5c:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
1000ec60:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
1000ec64:	eee5 7a25 	vfma.f32	s15, s10, s11
1000ec68:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
1000ec6c:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
1000ec70:	eee6 7a26 	vfma.f32	s15, s12, s13
1000ec74:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
1000ec78:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
1000ec7c:	eee1 7a21 	vfma.f32	s15, s2, s3
1000ec80:	eee2 7a22 	vfma.f32	s15, s4, s5
1000ec84:	eee3 7a23 	vfma.f32	s15, s6, s7
1000ec88:	eee4 7a24 	vfma.f32	s15, s8, s9
1000ec8c:	eee5 7a25 	vfma.f32	s15, s10, s11
1000ec90:	eee6 7a26 	vfma.f32	s15, s12, s13
1000ec94:	ee37 7a27 	vadd.f32	s14, s14, s15
1000ec98:	db96      	blt.n	1000ebc8 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xd0>
1000ec9a:	4476      	add	r6, lr
1000ec9c:	4475      	add	r5, lr
1000ec9e:	4647      	mov	r7, r8
1000eca0:	42b8      	cmp	r0, r7
1000eca2:	dd10      	ble.n	1000ecc6 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1ce>
1000eca4:	463b      	mov	r3, r7
1000eca6:	4631      	mov	r1, r6
1000eca8:	462a      	mov	r2, r5
1000ecaa:	ecf2 6a01 	vldmia	r2!, {s13}
1000ecae:	ecf1 7a01 	vldmia	r1!, {s15}
1000ecb2:	3301      	adds	r3, #1
1000ecb4:	4298      	cmp	r0, r3
1000ecb6:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000ecba:	d1f6      	bne.n	1000ecaa <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1b2>
1000ecbc:	1bc7      	subs	r7, r0, r7
1000ecbe:	eb05 0587 	add.w	r5, r5, r7, lsl #2
1000ecc2:	eb06 0687 	add.w	r6, r6, r7, lsl #2
1000ecc6:	f10c 0c01 	add.w	ip, ip, #1
1000ecca:	45dc      	cmp	ip, fp
1000eccc:	4456      	add	r6, sl
1000ecce:	444d      	add	r5, r9
1000ecd0:	f47f af71 	bne.w	1000ebb6 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xbe>
1000ecd4:	991c      	ldr	r1, [sp, #112]	; 0x70
1000ecd6:	9809      	ldr	r0, [sp, #36]	; 0x24
1000ecd8:	9a03      	ldr	r2, [sp, #12]
1000ecda:	9b02      	ldr	r3, [sp, #8]
1000ecdc:	ed82 7a00 	vstr	s14, [r2]
1000ece0:	4401      	add	r1, r0
1000ece2:	911c      	str	r1, [sp, #112]	; 0x70
1000ece4:	9905      	ldr	r1, [sp, #20]
1000ece6:	440a      	add	r2, r1
1000ece8:	9203      	str	r2, [sp, #12]
1000ecea:	9a00      	ldr	r2, [sp, #0]
1000ecec:	9906      	ldr	r1, [sp, #24]
1000ecee:	1a12      	subs	r2, r2, r0
1000ecf0:	9200      	str	r2, [sp, #0]
1000ecf2:	9a01      	ldr	r2, [sp, #4]
1000ecf4:	440a      	add	r2, r1
1000ecf6:	9201      	str	r2, [sp, #4]
1000ecf8:	9a18      	ldr	r2, [sp, #96]	; 0x60
1000ecfa:	3301      	adds	r3, #1
1000ecfc:	4293      	cmp	r3, r2
1000ecfe:	9302      	str	r3, [sp, #8]
1000ed00:	f47f af24 	bne.w	1000eb4c <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x54>
1000ed04:	b00d      	add	sp, #52	; 0x34
1000ed06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000ed0a:	9a00      	ldr	r2, [sp, #0]
1000ed0c:	9b04      	ldr	r3, [sp, #16]
1000ed0e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
1000ed10:	4610      	mov	r0, r2
1000ed12:	189d      	adds	r5, r3, r2
1000ed14:	e721      	b.n	1000eb5a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x62>
1000ed16:	bf00      	nop

1000ed18 <forward_lite_conv2d_if32of32wf32>:
1000ed18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000ed1c:	ed2d 8b02 	vpush	{d8}
1000ed20:	b09f      	sub	sp, #124	; 0x7c
1000ed22:	af08      	add	r7, sp, #32
1000ed24:	461c      	mov	r4, r3
1000ed26:	62f9      	str	r1, [r7, #44]	; 0x2c
1000ed28:	63fc      	str	r4, [r7, #60]	; 0x3c
1000ed2a:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
1000ed2e:	f8b7 40b0 	ldrh.w	r4, [r7, #176]	; 0xb0
1000ed32:	64fc      	str	r4, [r7, #76]	; 0x4c
1000ed34:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
1000ed38:	f8b7 50b4 	ldrh.w	r5, [r7, #180]	; 0xb4
1000ed3c:	6078      	str	r0, [r7, #4]
1000ed3e:	424e      	negs	r6, r1
1000ed40:	4686      	mov	lr, r0
1000ed42:	4694      	mov	ip, r2
1000ed44:	613a      	str	r2, [r7, #16]
1000ed46:	e9d7 3a22 	ldrd	r3, sl, [r7, #136]	; 0x88
1000ed4a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
1000ed4e:	f8b7 00a8 	ldrh.w	r0, [r7, #168]	; 0xa8
1000ed52:	617d      	str	r5, [r7, #20]
1000ed54:	633e      	str	r6, [r7, #48]	; 0x30
1000ed56:	2c00      	cmp	r4, #0
1000ed58:	f000 8092 	beq.w	1000ee80 <forward_lite_conv2d_if32of32wf32+0x168>
1000ed5c:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
1000ed60:	6379      	str	r1, [r7, #52]	; 0x34
1000ed62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
1000ed66:	eddf 0a9c 	vldr	s1, [pc, #624]	; 1000efd8 <forward_lite_conv2d_if32of32wf32+0x2c0>
1000ed6a:	fb04 f202 	mul.w	r2, r4, r2
1000ed6e:	fb03 f402 	mul.w	r4, r3, r2
1000ed72:	fb03 f201 	mul.w	r2, r3, r1
1000ed76:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
1000ed7a:	63bc      	str	r4, [r7, #56]	; 0x38
1000ed7c:	fb01 f10a 	mul.w	r1, r1, sl
1000ed80:	0089      	lsls	r1, r1, #2
1000ed82:	61b9      	str	r1, [r7, #24]
1000ed84:	fb05 f102 	mul.w	r1, r5, r2
1000ed88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
1000ed8c:	fb06 f202 	mul.w	r2, r6, r2
1000ed90:	0089      	lsls	r1, r1, #2
1000ed92:	61f9      	str	r1, [r7, #28]
1000ed94:	eb0e 0182 	add.w	r1, lr, r2, lsl #2
1000ed98:	f10b 0207 	add.w	r2, fp, #7
1000ed9c:	62b9      	str	r1, [r7, #40]	; 0x28
1000ed9e:	f022 0107 	bic.w	r1, r2, #7
1000eda2:	eb0c 0284 	add.w	r2, ip, r4, lsl #2
1000eda6:	4240      	negs	r0, r0
1000eda8:	60f9      	str	r1, [r7, #12]
1000edaa:	60ba      	str	r2, [r7, #8]
1000edac:	f10c 4178 	add.w	r1, ip, #4160749568	; 0xf8000000
1000edb0:	2200      	movs	r2, #0
1000edb2:	4655      	mov	r5, sl
1000edb4:	6538      	str	r0, [r7, #80]	; 0x50
1000edb6:	6239      	str	r1, [r7, #32]
1000edb8:	627a      	str	r2, [r7, #36]	; 0x24
1000edba:	46da      	mov	sl, fp
1000edbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1000edbe:	2a00      	cmp	r2, #0
1000edc0:	f2c0 80d7 	blt.w	1000ef72 <forward_lite_conv2d_if32of32wf32+0x25a>
1000edc4:	2200      	movs	r2, #0
1000edc6:	f8d7 b028 	ldr.w	fp, [r7, #40]	; 0x28
1000edca:	657a      	str	r2, [r7, #84]	; 0x54
1000edcc:	6b79      	ldr	r1, [r7, #52]	; 0x34
1000edce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
1000edd2:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
1000edd6:	440a      	add	r2, r1
1000edd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
1000edda:	4282      	cmp	r2, r0
1000eddc:	bf94      	ite	ls
1000edde:	ebc1 0102 	rsbls	r1, r1, r2
1000ede2:	ebc1 0100 	rsbhi	r1, r1, r0
1000ede6:	6a3a      	ldr	r2, [r7, #32]
1000ede8:	6439      	str	r1, [r7, #64]	; 0x40
1000edea:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
1000edee:	d24d      	bcs.n	1000ee8c <forward_lite_conv2d_if32of32wf32+0x174>
1000edf0:	b385      	cbz	r5, 1000ee54 <forward_lite_conv2d_if32of32wf32+0x13c>
1000edf2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
1000edf4:	2a00      	cmp	r2, #0
1000edf6:	f000 80c1 	beq.w	1000ef7c <forward_lite_conv2d_if32of32wf32+0x264>
1000edfa:	4659      	mov	r1, fp
1000edfc:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
1000ee00:	693e      	ldr	r6, [r7, #16]
1000ee02:	46d3      	mov	fp, sl
1000ee04:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
1000ee08:	4691      	mov	r9, r2
1000ee0a:	2400      	movs	r4, #0
1000ee0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
1000ee0e:	ecb9 0a01 	vldmia	r9!, {s0}
1000ee12:	9207      	str	r2, [sp, #28]
1000ee14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
1000ee16:	e9cd a205 	strd	sl, r2, [sp, #20]
1000ee1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
1000ee1c:	9204      	str	r2, [sp, #16]
1000ee1e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
1000ee22:	9203      	str	r2, [sp, #12]
1000ee24:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
1000ee28:	9202      	str	r2, [sp, #8]
1000ee2a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
1000ee2e:	4640      	mov	r0, r8
1000ee30:	e9cd 5200 	strd	r5, r2, [sp]
1000ee34:	3401      	adds	r4, #1
1000ee36:	4632      	mov	r2, r6
1000ee38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
1000ee3c:	64b9      	str	r1, [r7, #72]	; 0x48
1000ee3e:	f7ff fe5b 	bl	1000eaf8 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
1000ee42:	42a5      	cmp	r5, r4
1000ee44:	6cb9      	ldr	r1, [r7, #72]	; 0x48
1000ee46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
1000ee4a:	445e      	add	r6, fp
1000ee4c:	f108 0804 	add.w	r8, r8, #4
1000ee50:	d1dc      	bne.n	1000ee0c <forward_lite_conv2d_if32of32wf32+0xf4>
1000ee52:	46da      	mov	sl, fp
1000ee54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
1000ee56:	69b8      	ldr	r0, [r7, #24]
1000ee58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000ee5a:	4401      	add	r1, r0
1000ee5c:	62f9      	str	r1, [r7, #44]	; 0x2c
1000ee5e:	6978      	ldr	r0, [r7, #20]
1000ee60:	6b39      	ldr	r1, [r7, #48]	; 0x30
1000ee62:	4401      	add	r1, r0
1000ee64:	6339      	str	r1, [r7, #48]	; 0x30
1000ee66:	6b79      	ldr	r1, [r7, #52]	; 0x34
1000ee68:	1a09      	subs	r1, r1, r0
1000ee6a:	6379      	str	r1, [r7, #52]	; 0x34
1000ee6c:	69f8      	ldr	r0, [r7, #28]
1000ee6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
1000ee70:	4401      	add	r1, r0
1000ee72:	62b9      	str	r1, [r7, #40]	; 0x28
1000ee74:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
1000ee78:	3201      	adds	r2, #1
1000ee7a:	4291      	cmp	r1, r2
1000ee7c:	627a      	str	r2, [r7, #36]	; 0x24
1000ee7e:	d19d      	bne.n	1000edbc <forward_lite_conv2d_if32of32wf32+0xa4>
1000ee80:	375c      	adds	r7, #92	; 0x5c
1000ee82:	46bd      	mov	sp, r7
1000ee84:	ecbd 8b02 	vpop	{d8}
1000ee88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000ee8c:	466a      	mov	r2, sp
1000ee8e:	ee08 2a10 	vmov	s16, r2
1000ee92:	68fa      	ldr	r2, [r7, #12]
1000ee94:	ebad 0d02 	sub.w	sp, sp, r2
1000ee98:	aa08      	add	r2, sp, #32
1000ee9a:	2d00      	cmp	r5, #0
1000ee9c:	d03d      	beq.n	1000ef1a <forward_lite_conv2d_if32of32wf32+0x202>
1000ee9e:	6938      	ldr	r0, [r7, #16]
1000eea0:	68bc      	ldr	r4, [r7, #8]
1000eea2:	f8d7 902c 	ldr.w	r9, [r7, #44]	; 0x2c
1000eea6:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
1000eea8:	4659      	mov	r1, fp
1000eeaa:	f04f 0800 	mov.w	r8, #0
1000eeae:	46ab      	mov	fp, r5
1000eeb0:	4605      	mov	r5, r0
1000eeb2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
1000eeb4:	b138      	cbz	r0, 1000eec6 <forward_lite_conv2d_if32of32wf32+0x1ae>
1000eeb6:	4628      	mov	r0, r5
1000eeb8:	4694      	mov	ip, r2
1000eeba:	f850 eb04 	ldr.w	lr, [r0], #4
1000eebe:	f84c eb04 	str.w	lr, [ip], #4
1000eec2:	42a0      	cmp	r0, r4
1000eec4:	d1f9      	bne.n	1000eeba <forward_lite_conv2d_if32of32wf32+0x1a2>
1000eec6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
1000eec8:	b358      	cbz	r0, 1000ef22 <forward_lite_conv2d_if32of32wf32+0x20a>
1000eeca:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
1000eecc:	ecb6 0a01 	vldmia	r6!, {s0}
1000eed0:	9007      	str	r0, [sp, #28]
1000eed2:	6d38      	ldr	r0, [r7, #80]	; 0x50
1000eed4:	9006      	str	r0, [sp, #24]
1000eed6:	6c38      	ldr	r0, [r7, #64]	; 0x40
1000eed8:	9005      	str	r0, [sp, #20]
1000eeda:	6d78      	ldr	r0, [r7, #84]	; 0x54
1000eedc:	9004      	str	r0, [sp, #16]
1000eede:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
1000eee2:	9003      	str	r0, [sp, #12]
1000eee4:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
1000eee8:	9002      	str	r0, [sp, #8]
1000eeea:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
1000eeee:	f108 0801 	add.w	r8, r8, #1
1000eef2:	e9cd b000 	strd	fp, r0, [sp]
1000eef6:	e9c7 2111 	strd	r2, r1, [r7, #68]	; 0x44
1000eefa:	4648      	mov	r0, r9
1000eefc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
1000ef00:	f7ff fdfa 	bl	1000eaf8 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
1000ef04:	45d8      	cmp	r8, fp
1000ef06:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	; 0x44
1000ef0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
1000ef0e:	4455      	add	r5, sl
1000ef10:	4454      	add	r4, sl
1000ef12:	f109 0904 	add.w	r9, r9, #4
1000ef16:	d1cc      	bne.n	1000eeb2 <forward_lite_conv2d_if32of32wf32+0x19a>
1000ef18:	465d      	mov	r5, fp
1000ef1a:	ee18 2a10 	vmov	r2, s16
1000ef1e:	4695      	mov	sp, r2
1000ef20:	e798      	b.n	1000ee54 <forward_lite_conv2d_if32of32wf32+0x13c>
1000ef22:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
1000ef24:	9007      	str	r0, [sp, #28]
1000ef26:	6d38      	ldr	r0, [r7, #80]	; 0x50
1000ef28:	9006      	str	r0, [sp, #24]
1000ef2a:	6c38      	ldr	r0, [r7, #64]	; 0x40
1000ef2c:	9005      	str	r0, [sp, #20]
1000ef2e:	6d78      	ldr	r0, [r7, #84]	; 0x54
1000ef30:	9004      	str	r0, [sp, #16]
1000ef32:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
1000ef36:	9003      	str	r0, [sp, #12]
1000ef38:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
1000ef3c:	9002      	str	r0, [sp, #8]
1000ef3e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
1000ef42:	eeb0 0a60 	vmov.f32	s0, s1
1000ef46:	e9cd b000 	strd	fp, r0, [sp]
1000ef4a:	f108 0801 	add.w	r8, r8, #1
1000ef4e:	e9c7 2111 	strd	r2, r1, [r7, #68]	; 0x44
1000ef52:	4648      	mov	r0, r9
1000ef54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
1000ef58:	f7ff fdce 	bl	1000eaf8 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
1000ef5c:	45c3      	cmp	fp, r8
1000ef5e:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	; 0x44
1000ef62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
1000ef66:	4455      	add	r5, sl
1000ef68:	4454      	add	r4, sl
1000ef6a:	f109 0904 	add.w	r9, r9, #4
1000ef6e:	d1a0      	bne.n	1000eeb2 <forward_lite_conv2d_if32of32wf32+0x19a>
1000ef70:	e7d2      	b.n	1000ef18 <forward_lite_conv2d_if32of32wf32+0x200>
1000ef72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000ef74:	f8d7 b004 	ldr.w	fp, [r7, #4]
1000ef78:	657a      	str	r2, [r7, #84]	; 0x54
1000ef7a:	e727      	b.n	1000edcc <forward_lite_conv2d_if32of32wf32+0xb4>
1000ef7c:	4659      	mov	r1, fp
1000ef7e:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
1000ef82:	693e      	ldr	r6, [r7, #16]
1000ef84:	f8d7 9054 	ldr.w	r9, [r7, #84]	; 0x54
1000ef88:	46d3      	mov	fp, sl
1000ef8a:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
1000ef8e:	4614      	mov	r4, r2
1000ef90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
1000ef92:	9207      	str	r2, [sp, #28]
1000ef94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
1000ef96:	f8cd 9010 	str.w	r9, [sp, #16]
1000ef9a:	e9cd a205 	strd	sl, r2, [sp, #20]
1000ef9e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
1000efa2:	9203      	str	r2, [sp, #12]
1000efa4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
1000efa8:	9202      	str	r2, [sp, #8]
1000efaa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
1000efae:	4640      	mov	r0, r8
1000efb0:	e9cd 5200 	strd	r5, r2, [sp]
1000efb4:	eeb0 0a60 	vmov.f32	s0, s1
1000efb8:	4632      	mov	r2, r6
1000efba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
1000efbe:	6579      	str	r1, [r7, #84]	; 0x54
1000efc0:	3401      	adds	r4, #1
1000efc2:	f7ff fd99 	bl	1000eaf8 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
1000efc6:	42a5      	cmp	r5, r4
1000efc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
1000efca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
1000efce:	445e      	add	r6, fp
1000efd0:	f108 0804 	add.w	r8, r8, #4
1000efd4:	d1dc      	bne.n	1000ef90 <forward_lite_conv2d_if32of32wf32+0x278>
1000efd6:	e73c      	b.n	1000ee52 <forward_lite_conv2d_if32of32wf32+0x13a>
1000efd8:	00000000 	.word	0x00000000

1000efdc <forward_lite_dense_if32of32wf32>:
1000efdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000efe0:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
1000efe4:	eb00 0784 	add.w	r7, r0, r4, lsl #2
1000efe8:	4287      	cmp	r7, r0
1000efea:	f240 8106 	bls.w	1000f1fa <forward_lite_dense_if32of32wf32+0x21e>
1000efee:	f1a6 0810 	sub.w	r8, r6, #16
1000eff2:	ea4f 1818 	mov.w	r8, r8, lsr #4
1000eff6:	f108 0801 	add.w	r8, r8, #1
1000effa:	ea4f 1b88 	mov.w	fp, r8, lsl #6
1000effe:	ea4f 0986 	mov.w	r9, r6, lsl #2
1000f002:	eb01 1888 	add.w	r8, r1, r8, lsl #6
1000f006:	4605      	mov	r5, r0
1000f008:	f006 0a0f 	and.w	sl, r6, #15
1000f00c:	2e0f      	cmp	r6, #15
1000f00e:	ed9f 7a84 	vldr	s14, [pc, #528]	; 1000f220 <forward_lite_dense_if32of32wf32+0x244>
1000f012:	f240 8101 	bls.w	1000f218 <forward_lite_dense_if32of32wf32+0x23c>
1000f016:	f101 0c40 	add.w	ip, r1, #64	; 0x40
1000f01a:	f102 0440 	add.w	r4, r2, #64	; 0x40
1000f01e:	46b6      	mov	lr, r6
1000f020:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
1000f024:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
1000f028:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
1000f02c:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
1000f030:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
1000f034:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
1000f038:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
1000f03c:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
1000f040:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
1000f044:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
1000f048:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
1000f04c:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
1000f050:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
1000f054:	ee67 7aa5 	vmul.f32	s15, s15, s11
1000f058:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
1000f05c:	eee6 7a26 	vfma.f32	s15, s12, s13
1000f060:	f1ae 0e10 	sub.w	lr, lr, #16
1000f064:	f1be 0f0f 	cmp.w	lr, #15
1000f068:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
1000f06c:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
1000f070:	eee5 7a86 	vfma.f32	s15, s11, s12
1000f074:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
1000f078:	f104 0440 	add.w	r4, r4, #64	; 0x40
1000f07c:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
1000f080:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
1000f084:	eee4 7aa6 	vfma.f32	s15, s9, s13
1000f088:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
1000f08c:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
1000f090:	eee5 7a25 	vfma.f32	s15, s10, s11
1000f094:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
1000f098:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
1000f09c:	eee6 7a26 	vfma.f32	s15, s12, s13
1000f0a0:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
1000f0a4:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
1000f0a8:	eee3 7a23 	vfma.f32	s15, s6, s7
1000f0ac:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
1000f0b0:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
1000f0b4:	eee4 7a24 	vfma.f32	s15, s8, s9
1000f0b8:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
1000f0bc:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
1000f0c0:	eee5 7a25 	vfma.f32	s15, s10, s11
1000f0c4:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
1000f0c8:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
1000f0cc:	eee6 7a26 	vfma.f32	s15, s12, s13
1000f0d0:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
1000f0d4:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
1000f0d8:	eee1 7a21 	vfma.f32	s15, s2, s3
1000f0dc:	eee2 7a22 	vfma.f32	s15, s4, s5
1000f0e0:	eee3 7a23 	vfma.f32	s15, s6, s7
1000f0e4:	eee4 7a24 	vfma.f32	s15, s8, s9
1000f0e8:	eee5 7a25 	vfma.f32	s15, s10, s11
1000f0ec:	eee6 7a26 	vfma.f32	s15, s12, s13
1000f0f0:	ee37 7a27 	vadd.f32	s14, s14, s15
1000f0f4:	d894      	bhi.n	1000f020 <forward_lite_dense_if32of32wf32+0x44>
1000f0f6:	eb02 0e0b 	add.w	lr, r2, fp
1000f0fa:	4654      	mov	r4, sl
1000f0fc:	46c4      	mov	ip, r8
1000f0fe:	2c00      	cmp	r4, #0
1000f100:	d075      	beq.n	1000f1ee <forward_lite_dense_if32of32wf32+0x212>
1000f102:	eddc 6a00 	vldr	s13, [ip]
1000f106:	edde 7a00 	vldr	s15, [lr]
1000f10a:	2c01      	cmp	r4, #1
1000f10c:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000f110:	d06d      	beq.n	1000f1ee <forward_lite_dense_if32of32wf32+0x212>
1000f112:	eddc 6a01 	vldr	s13, [ip, #4]
1000f116:	edde 7a01 	vldr	s15, [lr, #4]
1000f11a:	2c02      	cmp	r4, #2
1000f11c:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000f120:	d065      	beq.n	1000f1ee <forward_lite_dense_if32of32wf32+0x212>
1000f122:	eddc 6a02 	vldr	s13, [ip, #8]
1000f126:	edde 7a02 	vldr	s15, [lr, #8]
1000f12a:	2c03      	cmp	r4, #3
1000f12c:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000f130:	d05d      	beq.n	1000f1ee <forward_lite_dense_if32of32wf32+0x212>
1000f132:	eddc 6a03 	vldr	s13, [ip, #12]
1000f136:	edde 7a03 	vldr	s15, [lr, #12]
1000f13a:	2c04      	cmp	r4, #4
1000f13c:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000f140:	d055      	beq.n	1000f1ee <forward_lite_dense_if32of32wf32+0x212>
1000f142:	eddc 6a04 	vldr	s13, [ip, #16]
1000f146:	edde 7a04 	vldr	s15, [lr, #16]
1000f14a:	2c05      	cmp	r4, #5
1000f14c:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000f150:	d04d      	beq.n	1000f1ee <forward_lite_dense_if32of32wf32+0x212>
1000f152:	eddc 6a05 	vldr	s13, [ip, #20]
1000f156:	edde 7a05 	vldr	s15, [lr, #20]
1000f15a:	2c06      	cmp	r4, #6
1000f15c:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000f160:	d045      	beq.n	1000f1ee <forward_lite_dense_if32of32wf32+0x212>
1000f162:	eddc 6a06 	vldr	s13, [ip, #24]
1000f166:	edde 7a06 	vldr	s15, [lr, #24]
1000f16a:	2c07      	cmp	r4, #7
1000f16c:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000f170:	d03d      	beq.n	1000f1ee <forward_lite_dense_if32of32wf32+0x212>
1000f172:	eddc 6a07 	vldr	s13, [ip, #28]
1000f176:	edde 7a07 	vldr	s15, [lr, #28]
1000f17a:	2c08      	cmp	r4, #8
1000f17c:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000f180:	d035      	beq.n	1000f1ee <forward_lite_dense_if32of32wf32+0x212>
1000f182:	eddc 6a08 	vldr	s13, [ip, #32]
1000f186:	edde 7a08 	vldr	s15, [lr, #32]
1000f18a:	2c09      	cmp	r4, #9
1000f18c:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000f190:	d02d      	beq.n	1000f1ee <forward_lite_dense_if32of32wf32+0x212>
1000f192:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
1000f196:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
1000f19a:	2c0a      	cmp	r4, #10
1000f19c:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000f1a0:	d025      	beq.n	1000f1ee <forward_lite_dense_if32of32wf32+0x212>
1000f1a2:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
1000f1a6:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
1000f1aa:	2c0b      	cmp	r4, #11
1000f1ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000f1b0:	d01d      	beq.n	1000f1ee <forward_lite_dense_if32of32wf32+0x212>
1000f1b2:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
1000f1b6:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
1000f1ba:	2c0c      	cmp	r4, #12
1000f1bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000f1c0:	d015      	beq.n	1000f1ee <forward_lite_dense_if32of32wf32+0x212>
1000f1c2:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
1000f1c6:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
1000f1ca:	3c0d      	subs	r4, #13
1000f1cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000f1d0:	d00d      	beq.n	1000f1ee <forward_lite_dense_if32of32wf32+0x212>
1000f1d2:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
1000f1d6:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
1000f1da:	2c01      	cmp	r4, #1
1000f1dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000f1e0:	d005      	beq.n	1000f1ee <forward_lite_dense_if32of32wf32+0x212>
1000f1e2:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
1000f1e6:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
1000f1ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000f1ee:	444a      	add	r2, r9
1000f1f0:	eca5 7a01 	vstmia	r5!, {s14}
1000f1f4:	42af      	cmp	r7, r5
1000f1f6:	f63f af09 	bhi.w	1000f00c <forward_lite_dense_if32of32wf32+0x30>
1000f1fa:	b15b      	cbz	r3, 1000f214 <forward_lite_dense_if32of32wf32+0x238>
1000f1fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000f1fe:	b14a      	cbz	r2, 1000f214 <forward_lite_dense_if32of32wf32+0x238>
1000f200:	edd0 7a00 	vldr	s15, [r0]
1000f204:	ecb3 7a01 	vldmia	r3!, {s14}
1000f208:	ee77 7a87 	vadd.f32	s15, s15, s14
1000f20c:	ece0 7a01 	vstmia	r0!, {s15}
1000f210:	4287      	cmp	r7, r0
1000f212:	d1f5      	bne.n	1000f200 <forward_lite_dense_if32of32wf32+0x224>
1000f214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000f218:	4634      	mov	r4, r6
1000f21a:	4696      	mov	lr, r2
1000f21c:	468c      	mov	ip, r1
1000f21e:	e76e      	b.n	1000f0fe <forward_lite_dense_if32of32wf32+0x122>
1000f220:	00000000 	.word	0x00000000

1000f224 <st_int8_copy>:
1000f224:	4288      	cmp	r0, r1
1000f226:	d057      	beq.n	1000f2d8 <st_int8_copy+0xb4>
1000f228:	2a00      	cmp	r2, #0
1000f22a:	d055      	beq.n	1000f2d8 <st_int8_copy+0xb4>
1000f22c:	4288      	cmp	r0, r1
1000f22e:	d354      	bcc.n	1000f2da <st_int8_copy+0xb6>
1000f230:	078b      	lsls	r3, r1, #30
1000f232:	d102      	bne.n	1000f23a <st_int8_copy+0x16>
1000f234:	e009      	b.n	1000f24a <st_int8_copy+0x26>
1000f236:	2a00      	cmp	r2, #0
1000f238:	d05c      	beq.n	1000f2f4 <st_int8_copy+0xd0>
1000f23a:	f910 3b01 	ldrsb.w	r3, [r0], #1
1000f23e:	f801 3b01 	strb.w	r3, [r1], #1
1000f242:	078b      	lsls	r3, r1, #30
1000f244:	f102 32ff 	add.w	r2, r2, #4294967295
1000f248:	d1f5      	bne.n	1000f236 <st_int8_copy+0x12>
1000f24a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000f24e:	ea5f 1e12 	movs.w	lr, r2, lsr #4
1000f252:	d069      	beq.n	1000f328 <st_int8_copy+0x104>
1000f254:	ea41 0300 	orr.w	r3, r1, r0
1000f258:	075b      	lsls	r3, r3, #29
1000f25a:	d14c      	bne.n	1000f2f6 <st_int8_copy+0xd2>
1000f25c:	f10e 33ff 	add.w	r3, lr, #4294967295
1000f260:	2b01      	cmp	r3, #1
1000f262:	d948      	bls.n	1000f2f6 <st_int8_copy+0xd2>
1000f264:	f100 0310 	add.w	r3, r0, #16
1000f268:	ea4f 140e 	mov.w	r4, lr, lsl #4
1000f26c:	f101 0c10 	add.w	ip, r1, #16
1000f270:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
1000f274:	ed13 6b04 	vldr	d6, [r3, #-16]
1000f278:	ed13 7b02 	vldr	d7, [r3, #-8]
1000f27c:	3310      	adds	r3, #16
1000f27e:	4573      	cmp	r3, lr
1000f280:	ed0c 6b04 	vstr	d6, [ip, #-16]
1000f284:	ed0c 7b02 	vstr	d7, [ip, #-8]
1000f288:	f10c 0c10 	add.w	ip, ip, #16
1000f28c:	d1f2      	bne.n	1000f274 <st_int8_copy+0x50>
1000f28e:	f3c2 0381 	ubfx	r3, r2, #2, #2
1000f292:	4421      	add	r1, r4
1000f294:	4420      	add	r0, r4
1000f296:	f002 0203 	and.w	r2, r2, #3
1000f29a:	b16b      	cbz	r3, 1000f2b8 <st_int8_copy+0x94>
1000f29c:	6804      	ldr	r4, [r0, #0]
1000f29e:	600c      	str	r4, [r1, #0]
1000f2a0:	1e5c      	subs	r4, r3, #1
1000f2a2:	d005      	beq.n	1000f2b0 <st_int8_copy+0x8c>
1000f2a4:	6845      	ldr	r5, [r0, #4]
1000f2a6:	604d      	str	r5, [r1, #4]
1000f2a8:	2c01      	cmp	r4, #1
1000f2aa:	bf1c      	itt	ne
1000f2ac:	6884      	ldrne	r4, [r0, #8]
1000f2ae:	608c      	strne	r4, [r1, #8]
1000f2b0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
1000f2b4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
1000f2b8:	b162      	cbz	r2, 1000f2d4 <st_int8_copy+0xb0>
1000f2ba:	f990 3000 	ldrsb.w	r3, [r0]
1000f2be:	700b      	strb	r3, [r1, #0]
1000f2c0:	3a01      	subs	r2, #1
1000f2c2:	d007      	beq.n	1000f2d4 <st_int8_copy+0xb0>
1000f2c4:	f990 3001 	ldrsb.w	r3, [r0, #1]
1000f2c8:	704b      	strb	r3, [r1, #1]
1000f2ca:	2a01      	cmp	r2, #1
1000f2cc:	bf1c      	itt	ne
1000f2ce:	f990 3002 	ldrsbne.w	r3, [r0, #2]
1000f2d2:	708b      	strbne	r3, [r1, #2]
1000f2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000f2d8:	4770      	bx	lr
1000f2da:	1883      	adds	r3, r0, r2
1000f2dc:	428b      	cmp	r3, r1
1000f2de:	d9a7      	bls.n	1000f230 <st_int8_copy+0xc>
1000f2e0:	4283      	cmp	r3, r0
1000f2e2:	440a      	add	r2, r1
1000f2e4:	d9f8      	bls.n	1000f2d8 <st_int8_copy+0xb4>
1000f2e6:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
1000f2ea:	f802 1d01 	strb.w	r1, [r2, #-1]!
1000f2ee:	4283      	cmp	r3, r0
1000f2f0:	d1f9      	bne.n	1000f2e6 <st_int8_copy+0xc2>
1000f2f2:	4770      	bx	lr
1000f2f4:	4770      	bx	lr
1000f2f6:	ea4f 140e 	mov.w	r4, lr, lsl #4
1000f2fa:	460b      	mov	r3, r1
1000f2fc:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
1000f300:	4684      	mov	ip, r0
1000f302:	f8dc 7000 	ldr.w	r7, [ip]
1000f306:	f8dc 6004 	ldr.w	r6, [ip, #4]
1000f30a:	f8dc 5008 	ldr.w	r5, [ip, #8]
1000f30e:	f8dc 800c 	ldr.w	r8, [ip, #12]
1000f312:	f8c3 800c 	str.w	r8, [r3, #12]
1000f316:	601f      	str	r7, [r3, #0]
1000f318:	605e      	str	r6, [r3, #4]
1000f31a:	609d      	str	r5, [r3, #8]
1000f31c:	3310      	adds	r3, #16
1000f31e:	459e      	cmp	lr, r3
1000f320:	f10c 0c10 	add.w	ip, ip, #16
1000f324:	d1ed      	bne.n	1000f302 <st_int8_copy+0xde>
1000f326:	e7b2      	b.n	1000f28e <st_int8_copy+0x6a>
1000f328:	0893      	lsrs	r3, r2, #2
1000f32a:	f002 0203 	and.w	r2, r2, #3
1000f32e:	e7b4      	b.n	1000f29a <st_int8_copy+0x76>

1000f330 <ai_array_to_buffer_fmt>:
1000f330:	f3c0 4343 	ubfx	r3, r0, #17, #4
1000f334:	2b02      	cmp	r3, #2
1000f336:	d050      	beq.n	1000f3da <ai_array_to_buffer_fmt+0xaa>
1000f338:	4b2a      	ldr	r3, [pc, #168]	; (1000f3e4 <ai_array_to_buffer_fmt+0xb4>)
1000f33a:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
1000f33e:	429a      	cmp	r2, r3
1000f340:	d00b      	beq.n	1000f35a <ai_array_to_buffer_fmt+0x2a>
1000f342:	dc1c      	bgt.n	1000f37e <ai_array_to_buffer_fmt+0x4e>
1000f344:	4b28      	ldr	r3, [pc, #160]	; (1000f3e8 <ai_array_to_buffer_fmt+0xb8>)
1000f346:	429a      	cmp	r2, r3
1000f348:	d007      	beq.n	1000f35a <ai_array_to_buffer_fmt+0x2a>
1000f34a:	dd0b      	ble.n	1000f364 <ai_array_to_buffer_fmt+0x34>
1000f34c:	4b27      	ldr	r3, [pc, #156]	; (1000f3ec <ai_array_to_buffer_fmt+0xbc>)
1000f34e:	429a      	cmp	r2, r3
1000f350:	d003      	beq.n	1000f35a <ai_array_to_buffer_fmt+0x2a>
1000f352:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
1000f356:	429a      	cmp	r2, r3
1000f358:	d131      	bne.n	1000f3be <ai_array_to_buffer_fmt+0x8e>
1000f35a:	4613      	mov	r3, r2
1000f35c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
1000f360:	4318      	orrs	r0, r3
1000f362:	4770      	bx	lr
1000f364:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
1000f368:	429a      	cmp	r2, r3
1000f36a:	d0f6      	beq.n	1000f35a <ai_array_to_buffer_fmt+0x2a>
1000f36c:	dd2c      	ble.n	1000f3c8 <ai_array_to_buffer_fmt+0x98>
1000f36e:	4b20      	ldr	r3, [pc, #128]	; (1000f3f0 <ai_array_to_buffer_fmt+0xc0>)
1000f370:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
1000f374:	429a      	cmp	r2, r3
1000f376:	bf18      	it	ne
1000f378:	2340      	movne	r3, #64	; 0x40
1000f37a:	4318      	orrs	r0, r3
1000f37c:	4770      	bx	lr
1000f37e:	4b1d      	ldr	r3, [pc, #116]	; (1000f3f4 <ai_array_to_buffer_fmt+0xc4>)
1000f380:	429a      	cmp	r2, r3
1000f382:	d0ea      	beq.n	1000f35a <ai_array_to_buffer_fmt+0x2a>
1000f384:	dd0e      	ble.n	1000f3a4 <ai_array_to_buffer_fmt+0x74>
1000f386:	4b1c      	ldr	r3, [pc, #112]	; (1000f3f8 <ai_array_to_buffer_fmt+0xc8>)
1000f388:	429a      	cmp	r2, r3
1000f38a:	d0e6      	beq.n	1000f35a <ai_array_to_buffer_fmt+0x2a>
1000f38c:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
1000f390:	429a      	cmp	r2, r3
1000f392:	d0e2      	beq.n	1000f35a <ai_array_to_buffer_fmt+0x2a>
1000f394:	4b19      	ldr	r3, [pc, #100]	; (1000f3fc <ai_array_to_buffer_fmt+0xcc>)
1000f396:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
1000f39a:	429a      	cmp	r2, r3
1000f39c:	bf18      	it	ne
1000f39e:	2340      	movne	r3, #64	; 0x40
1000f3a0:	4318      	orrs	r0, r3
1000f3a2:	4770      	bx	lr
1000f3a4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
1000f3a8:	429a      	cmp	r2, r3
1000f3aa:	d0d6      	beq.n	1000f35a <ai_array_to_buffer_fmt+0x2a>
1000f3ac:	3307      	adds	r3, #7
1000f3ae:	429a      	cmp	r2, r3
1000f3b0:	d0d3      	beq.n	1000f35a <ai_array_to_buffer_fmt+0x2a>
1000f3b2:	f2a3 3387 	subw	r3, r3, #903	; 0x387
1000f3b6:	429a      	cmp	r2, r3
1000f3b8:	bf18      	it	ne
1000f3ba:	2340      	movne	r3, #64	; 0x40
1000f3bc:	e7ce      	b.n	1000f35c <ai_array_to_buffer_fmt+0x2c>
1000f3be:	4b10      	ldr	r3, [pc, #64]	; (1000f400 <ai_array_to_buffer_fmt+0xd0>)
1000f3c0:	429a      	cmp	r2, r3
1000f3c2:	bf18      	it	ne
1000f3c4:	2340      	movne	r3, #64	; 0x40
1000f3c6:	e7c9      	b.n	1000f35c <ai_array_to_buffer_fmt+0x2c>
1000f3c8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
1000f3cc:	429a      	cmp	r2, r3
1000f3ce:	d0c4      	beq.n	1000f35a <ai_array_to_buffer_fmt+0x2a>
1000f3d0:	3380      	adds	r3, #128	; 0x80
1000f3d2:	429a      	cmp	r2, r3
1000f3d4:	bf18      	it	ne
1000f3d6:	2340      	movne	r3, #64	; 0x40
1000f3d8:	e7c0      	b.n	1000f35c <ai_array_to_buffer_fmt+0x2c>
1000f3da:	4b0a      	ldr	r3, [pc, #40]	; (1000f404 <ai_array_to_buffer_fmt+0xd4>)
1000f3dc:	4003      	ands	r3, r0
1000f3de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
1000f3e2:	e7bb      	b.n	1000f35c <ai_array_to_buffer_fmt+0x2c>
1000f3e4:	00840040 	.word	0x00840040
1000f3e8:	00040840 	.word	0x00040840
1000f3ec:	00041040 	.word	0x00041040
1000f3f0:	00040447 	.word	0x00040447
1000f3f4:	00840840 	.word	0x00840840
1000f3f8:	00841040 	.word	0x00841040
1000f3fc:	0084084f 	.word	0x0084084f
1000f400:	0004084f 	.word	0x0004084f
1000f404:	00803fff 	.word	0x00803fff

1000f408 <ai_array_get_byte_size>:
1000f408:	b319      	cbz	r1, 1000f452 <ai_array_get_byte_size+0x4a>
1000f40a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
1000f40e:	fb03 f101 	mul.w	r1, r3, r1
1000f412:	3107      	adds	r1, #7
1000f414:	f3c0 4243 	ubfx	r2, r0, #17, #4
1000f418:	f021 0307 	bic.w	r3, r1, #7
1000f41c:	2a04      	cmp	r2, #4
1000f41e:	f3c0 5141 	ubfx	r1, r0, #21, #2
1000f422:	fa23 f101 	lsr.w	r1, r3, r1
1000f426:	ea4f 10e0 	mov.w	r0, r0, asr #7
1000f42a:	d00b      	beq.n	1000f444 <ai_array_get_byte_size+0x3c>
1000f42c:	2a08      	cmp	r2, #8
1000f42e:	d002      	beq.n	1000f436 <ai_array_get_byte_size+0x2e>
1000f430:	3107      	adds	r1, #7
1000f432:	08c8      	lsrs	r0, r1, #3
1000f434:	4770      	bx	lr
1000f436:	f000 007f 	and.w	r0, r0, #127	; 0x7f
1000f43a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
1000f43e:	3107      	adds	r1, #7
1000f440:	08c8      	lsrs	r0, r1, #3
1000f442:	4770      	bx	lr
1000f444:	f000 007f 	and.w	r0, r0, #127	; 0x7f
1000f448:	eb01 1100 	add.w	r1, r1, r0, lsl #4
1000f44c:	3107      	adds	r1, #7
1000f44e:	08c8      	lsrs	r0, r1, #3
1000f450:	4770      	bx	lr
1000f452:	4608      	mov	r0, r1
1000f454:	4770      	bx	lr
1000f456:	bf00      	nop

1000f458 <ai_array_get_data_byte_size>:
1000f458:	b169      	cbz	r1, 1000f476 <ai_array_get_data_byte_size+0x1e>
1000f45a:	f3c0 12c6 	ubfx	r2, r0, #7, #7
1000f45e:	fb02 f101 	mul.w	r1, r2, r1
1000f462:	1dcb      	adds	r3, r1, #7
1000f464:	f023 0307 	bic.w	r3, r3, #7
1000f468:	f3c0 5041 	ubfx	r0, r0, #21, #2
1000f46c:	fa23 f000 	lsr.w	r0, r3, r0
1000f470:	3007      	adds	r0, #7
1000f472:	08c0      	lsrs	r0, r0, #3
1000f474:	4770      	bx	lr
1000f476:	4608      	mov	r0, r1
1000f478:	4770      	bx	lr
1000f47a:	bf00      	nop

1000f47c <ai_version_get>:
1000f47c:	0212      	lsls	r2, r2, #8
1000f47e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
1000f482:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
1000f486:	4770      	bx	lr

1000f488 <get_tensor_byte_size>:
1000f488:	b410      	push	{r4}
1000f48a:	6983      	ldr	r3, [r0, #24]
1000f48c:	68c4      	ldr	r4, [r0, #12]
1000f48e:	6941      	ldr	r1, [r0, #20]
1000f490:	681b      	ldr	r3, [r3, #0]
1000f492:	68e0      	ldr	r0, [r4, #12]
1000f494:	4a07      	ldr	r2, [pc, #28]	; (1000f4b4 <get_tensor_byte_size+0x2c>)
1000f496:	68c9      	ldr	r1, [r1, #12]
1000f498:	f85d 4b04 	ldr.w	r4, [sp], #4
1000f49c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
1000f4a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
1000f4a4:	fb01 f000 	mul.w	r0, r1, r0
1000f4a8:	4293      	cmp	r3, r2
1000f4aa:	bf04      	itt	eq
1000f4ac:	3007      	addeq	r0, #7
1000f4ae:	08c0      	lsreq	r0, r0, #3
1000f4b0:	4770      	bx	lr
1000f4b2:	bf00      	nop
1000f4b4:	000400c0 	.word	0x000400c0

1000f4b8 <__assert_func>:
1000f4b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000f4ba:	4614      	mov	r4, r2
1000f4bc:	461a      	mov	r2, r3
1000f4be:	4b09      	ldr	r3, [pc, #36]	; (1000f4e4 <__assert_func+0x2c>)
1000f4c0:	681b      	ldr	r3, [r3, #0]
1000f4c2:	4605      	mov	r5, r0
1000f4c4:	68d8      	ldr	r0, [r3, #12]
1000f4c6:	b14c      	cbz	r4, 1000f4dc <__assert_func+0x24>
1000f4c8:	4b07      	ldr	r3, [pc, #28]	; (1000f4e8 <__assert_func+0x30>)
1000f4ca:	9100      	str	r1, [sp, #0]
1000f4cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
1000f4d0:	4906      	ldr	r1, [pc, #24]	; (1000f4ec <__assert_func+0x34>)
1000f4d2:	462b      	mov	r3, r5
1000f4d4:	f000 fe04 	bl	100100e0 <fiprintf>
1000f4d8:	f000 ff57 	bl	1001038a <abort>
1000f4dc:	4b04      	ldr	r3, [pc, #16]	; (1000f4f0 <__assert_func+0x38>)
1000f4de:	461c      	mov	r4, r3
1000f4e0:	e7f3      	b.n	1000f4ca <__assert_func+0x12>
1000f4e2:	bf00      	nop
1000f4e4:	10020bd0 	.word	0x10020bd0
1000f4e8:	1001acf8 	.word	0x1001acf8
1000f4ec:	1001ad05 	.word	0x1001ad05
1000f4f0:	1001ad33 	.word	0x1001ad33

1000f4f4 <malloc>:
1000f4f4:	4b02      	ldr	r3, [pc, #8]	; (1000f500 <malloc+0xc>)
1000f4f6:	4601      	mov	r1, r0
1000f4f8:	6818      	ldr	r0, [r3, #0]
1000f4fa:	f000 b82b 	b.w	1000f554 <_malloc_r>
1000f4fe:	bf00      	nop
1000f500:	10020bd0 	.word	0x10020bd0

1000f504 <free>:
1000f504:	4b02      	ldr	r3, [pc, #8]	; (1000f510 <free+0xc>)
1000f506:	4601      	mov	r1, r0
1000f508:	6818      	ldr	r0, [r3, #0]
1000f50a:	f001 bdbf 	b.w	1001108c <_free_r>
1000f50e:	bf00      	nop
1000f510:	10020bd0 	.word	0x10020bd0

1000f514 <sbrk_aligned>:
1000f514:	b570      	push	{r4, r5, r6, lr}
1000f516:	4e0e      	ldr	r6, [pc, #56]	; (1000f550 <sbrk_aligned+0x3c>)
1000f518:	460c      	mov	r4, r1
1000f51a:	6831      	ldr	r1, [r6, #0]
1000f51c:	4605      	mov	r5, r0
1000f51e:	b911      	cbnz	r1, 1000f526 <sbrk_aligned+0x12>
1000f520:	f000 fed6 	bl	100102d0 <_sbrk_r>
1000f524:	6030      	str	r0, [r6, #0]
1000f526:	4621      	mov	r1, r4
1000f528:	4628      	mov	r0, r5
1000f52a:	f000 fed1 	bl	100102d0 <_sbrk_r>
1000f52e:	1c43      	adds	r3, r0, #1
1000f530:	d00a      	beq.n	1000f548 <sbrk_aligned+0x34>
1000f532:	1cc4      	adds	r4, r0, #3
1000f534:	f024 0403 	bic.w	r4, r4, #3
1000f538:	42a0      	cmp	r0, r4
1000f53a:	d007      	beq.n	1000f54c <sbrk_aligned+0x38>
1000f53c:	1a21      	subs	r1, r4, r0
1000f53e:	4628      	mov	r0, r5
1000f540:	f000 fec6 	bl	100102d0 <_sbrk_r>
1000f544:	3001      	adds	r0, #1
1000f546:	d101      	bne.n	1000f54c <sbrk_aligned+0x38>
1000f548:	f04f 34ff 	mov.w	r4, #4294967295
1000f54c:	4620      	mov	r0, r4
1000f54e:	bd70      	pop	{r4, r5, r6, pc}
1000f550:	10029cd8 	.word	0x10029cd8

1000f554 <_malloc_r>:
1000f554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1000f558:	1ccd      	adds	r5, r1, #3
1000f55a:	f025 0503 	bic.w	r5, r5, #3
1000f55e:	3508      	adds	r5, #8
1000f560:	2d0c      	cmp	r5, #12
1000f562:	bf38      	it	cc
1000f564:	250c      	movcc	r5, #12
1000f566:	2d00      	cmp	r5, #0
1000f568:	4607      	mov	r7, r0
1000f56a:	db01      	blt.n	1000f570 <_malloc_r+0x1c>
1000f56c:	42a9      	cmp	r1, r5
1000f56e:	d905      	bls.n	1000f57c <_malloc_r+0x28>
1000f570:	230c      	movs	r3, #12
1000f572:	603b      	str	r3, [r7, #0]
1000f574:	2600      	movs	r6, #0
1000f576:	4630      	mov	r0, r6
1000f578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000f57c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 1000f650 <_malloc_r+0xfc>
1000f580:	f000 f868 	bl	1000f654 <__malloc_lock>
1000f584:	f8d8 3000 	ldr.w	r3, [r8]
1000f588:	461c      	mov	r4, r3
1000f58a:	bb5c      	cbnz	r4, 1000f5e4 <_malloc_r+0x90>
1000f58c:	4629      	mov	r1, r5
1000f58e:	4638      	mov	r0, r7
1000f590:	f7ff ffc0 	bl	1000f514 <sbrk_aligned>
1000f594:	1c43      	adds	r3, r0, #1
1000f596:	4604      	mov	r4, r0
1000f598:	d155      	bne.n	1000f646 <_malloc_r+0xf2>
1000f59a:	f8d8 4000 	ldr.w	r4, [r8]
1000f59e:	4626      	mov	r6, r4
1000f5a0:	2e00      	cmp	r6, #0
1000f5a2:	d145      	bne.n	1000f630 <_malloc_r+0xdc>
1000f5a4:	2c00      	cmp	r4, #0
1000f5a6:	d048      	beq.n	1000f63a <_malloc_r+0xe6>
1000f5a8:	6823      	ldr	r3, [r4, #0]
1000f5aa:	4631      	mov	r1, r6
1000f5ac:	4638      	mov	r0, r7
1000f5ae:	eb04 0903 	add.w	r9, r4, r3
1000f5b2:	f000 fe8d 	bl	100102d0 <_sbrk_r>
1000f5b6:	4581      	cmp	r9, r0
1000f5b8:	d13f      	bne.n	1000f63a <_malloc_r+0xe6>
1000f5ba:	6821      	ldr	r1, [r4, #0]
1000f5bc:	1a6d      	subs	r5, r5, r1
1000f5be:	4629      	mov	r1, r5
1000f5c0:	4638      	mov	r0, r7
1000f5c2:	f7ff ffa7 	bl	1000f514 <sbrk_aligned>
1000f5c6:	3001      	adds	r0, #1
1000f5c8:	d037      	beq.n	1000f63a <_malloc_r+0xe6>
1000f5ca:	6823      	ldr	r3, [r4, #0]
1000f5cc:	442b      	add	r3, r5
1000f5ce:	6023      	str	r3, [r4, #0]
1000f5d0:	f8d8 3000 	ldr.w	r3, [r8]
1000f5d4:	2b00      	cmp	r3, #0
1000f5d6:	d038      	beq.n	1000f64a <_malloc_r+0xf6>
1000f5d8:	685a      	ldr	r2, [r3, #4]
1000f5da:	42a2      	cmp	r2, r4
1000f5dc:	d12b      	bne.n	1000f636 <_malloc_r+0xe2>
1000f5de:	2200      	movs	r2, #0
1000f5e0:	605a      	str	r2, [r3, #4]
1000f5e2:	e00f      	b.n	1000f604 <_malloc_r+0xb0>
1000f5e4:	6822      	ldr	r2, [r4, #0]
1000f5e6:	1b52      	subs	r2, r2, r5
1000f5e8:	d41f      	bmi.n	1000f62a <_malloc_r+0xd6>
1000f5ea:	2a0b      	cmp	r2, #11
1000f5ec:	d917      	bls.n	1000f61e <_malloc_r+0xca>
1000f5ee:	1961      	adds	r1, r4, r5
1000f5f0:	42a3      	cmp	r3, r4
1000f5f2:	6025      	str	r5, [r4, #0]
1000f5f4:	bf18      	it	ne
1000f5f6:	6059      	strne	r1, [r3, #4]
1000f5f8:	6863      	ldr	r3, [r4, #4]
1000f5fa:	bf08      	it	eq
1000f5fc:	f8c8 1000 	streq.w	r1, [r8]
1000f600:	5162      	str	r2, [r4, r5]
1000f602:	604b      	str	r3, [r1, #4]
1000f604:	4638      	mov	r0, r7
1000f606:	f104 060b 	add.w	r6, r4, #11
1000f60a:	f000 f829 	bl	1000f660 <__malloc_unlock>
1000f60e:	f026 0607 	bic.w	r6, r6, #7
1000f612:	1d23      	adds	r3, r4, #4
1000f614:	1af2      	subs	r2, r6, r3
1000f616:	d0ae      	beq.n	1000f576 <_malloc_r+0x22>
1000f618:	1b9b      	subs	r3, r3, r6
1000f61a:	50a3      	str	r3, [r4, r2]
1000f61c:	e7ab      	b.n	1000f576 <_malloc_r+0x22>
1000f61e:	42a3      	cmp	r3, r4
1000f620:	6862      	ldr	r2, [r4, #4]
1000f622:	d1dd      	bne.n	1000f5e0 <_malloc_r+0x8c>
1000f624:	f8c8 2000 	str.w	r2, [r8]
1000f628:	e7ec      	b.n	1000f604 <_malloc_r+0xb0>
1000f62a:	4623      	mov	r3, r4
1000f62c:	6864      	ldr	r4, [r4, #4]
1000f62e:	e7ac      	b.n	1000f58a <_malloc_r+0x36>
1000f630:	4634      	mov	r4, r6
1000f632:	6876      	ldr	r6, [r6, #4]
1000f634:	e7b4      	b.n	1000f5a0 <_malloc_r+0x4c>
1000f636:	4613      	mov	r3, r2
1000f638:	e7cc      	b.n	1000f5d4 <_malloc_r+0x80>
1000f63a:	230c      	movs	r3, #12
1000f63c:	603b      	str	r3, [r7, #0]
1000f63e:	4638      	mov	r0, r7
1000f640:	f000 f80e 	bl	1000f660 <__malloc_unlock>
1000f644:	e797      	b.n	1000f576 <_malloc_r+0x22>
1000f646:	6025      	str	r5, [r4, #0]
1000f648:	e7dc      	b.n	1000f604 <_malloc_r+0xb0>
1000f64a:	605b      	str	r3, [r3, #4]
1000f64c:	deff      	udf	#255	; 0xff
1000f64e:	bf00      	nop
1000f650:	10029cd4 	.word	0x10029cd4

1000f654 <__malloc_lock>:
1000f654:	4801      	ldr	r0, [pc, #4]	; (1000f65c <__malloc_lock+0x8>)
1000f656:	f000 be88 	b.w	1001036a <__retarget_lock_acquire_recursive>
1000f65a:	bf00      	nop
1000f65c:	10029e1c 	.word	0x10029e1c

1000f660 <__malloc_unlock>:
1000f660:	4801      	ldr	r0, [pc, #4]	; (1000f668 <__malloc_unlock+0x8>)
1000f662:	f000 be83 	b.w	1001036c <__retarget_lock_release_recursive>
1000f666:	bf00      	nop
1000f668:	10029e1c 	.word	0x10029e1c

1000f66c <_realloc_r>:
1000f66c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000f670:	4680      	mov	r8, r0
1000f672:	4614      	mov	r4, r2
1000f674:	460e      	mov	r6, r1
1000f676:	b921      	cbnz	r1, 1000f682 <_realloc_r+0x16>
1000f678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1000f67c:	4611      	mov	r1, r2
1000f67e:	f7ff bf69 	b.w	1000f554 <_malloc_r>
1000f682:	b92a      	cbnz	r2, 1000f690 <_realloc_r+0x24>
1000f684:	f001 fd02 	bl	1001108c <_free_r>
1000f688:	4625      	mov	r5, r4
1000f68a:	4628      	mov	r0, r5
1000f68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000f690:	f002 f8c4 	bl	1001181c <_malloc_usable_size_r>
1000f694:	4284      	cmp	r4, r0
1000f696:	4607      	mov	r7, r0
1000f698:	d802      	bhi.n	1000f6a0 <_realloc_r+0x34>
1000f69a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
1000f69e:	d812      	bhi.n	1000f6c6 <_realloc_r+0x5a>
1000f6a0:	4621      	mov	r1, r4
1000f6a2:	4640      	mov	r0, r8
1000f6a4:	f7ff ff56 	bl	1000f554 <_malloc_r>
1000f6a8:	4605      	mov	r5, r0
1000f6aa:	2800      	cmp	r0, #0
1000f6ac:	d0ed      	beq.n	1000f68a <_realloc_r+0x1e>
1000f6ae:	42bc      	cmp	r4, r7
1000f6b0:	4622      	mov	r2, r4
1000f6b2:	4631      	mov	r1, r6
1000f6b4:	bf28      	it	cs
1000f6b6:	463a      	movcs	r2, r7
1000f6b8:	f000 fe59 	bl	1001036e <memcpy>
1000f6bc:	4631      	mov	r1, r6
1000f6be:	4640      	mov	r0, r8
1000f6c0:	f001 fce4 	bl	1001108c <_free_r>
1000f6c4:	e7e1      	b.n	1000f68a <_realloc_r+0x1e>
1000f6c6:	4635      	mov	r5, r6
1000f6c8:	e7df      	b.n	1000f68a <_realloc_r+0x1e>

1000f6ca <__cvt>:
1000f6ca:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
1000f6ce:	ec55 4b10 	vmov	r4, r5, d0
1000f6d2:	2d00      	cmp	r5, #0
1000f6d4:	460e      	mov	r6, r1
1000f6d6:	4619      	mov	r1, r3
1000f6d8:	462b      	mov	r3, r5
1000f6da:	bfbb      	ittet	lt
1000f6dc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
1000f6e0:	461d      	movlt	r5, r3
1000f6e2:	2300      	movge	r3, #0
1000f6e4:	232d      	movlt	r3, #45	; 0x2d
1000f6e6:	700b      	strb	r3, [r1, #0]
1000f6e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000f6ea:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
1000f6ee:	4691      	mov	r9, r2
1000f6f0:	f023 0820 	bic.w	r8, r3, #32
1000f6f4:	bfbc      	itt	lt
1000f6f6:	4622      	movlt	r2, r4
1000f6f8:	4614      	movlt	r4, r2
1000f6fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
1000f6fe:	d005      	beq.n	1000f70c <__cvt+0x42>
1000f700:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
1000f704:	d100      	bne.n	1000f708 <__cvt+0x3e>
1000f706:	3601      	adds	r6, #1
1000f708:	2102      	movs	r1, #2
1000f70a:	e000      	b.n	1000f70e <__cvt+0x44>
1000f70c:	2103      	movs	r1, #3
1000f70e:	ab03      	add	r3, sp, #12
1000f710:	9301      	str	r3, [sp, #4]
1000f712:	ab02      	add	r3, sp, #8
1000f714:	9300      	str	r3, [sp, #0]
1000f716:	ec45 4b10 	vmov	d0, r4, r5
1000f71a:	4653      	mov	r3, sl
1000f71c:	4632      	mov	r2, r6
1000f71e:	f000 fec3 	bl	100104a8 <_dtoa_r>
1000f722:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
1000f726:	4607      	mov	r7, r0
1000f728:	d102      	bne.n	1000f730 <__cvt+0x66>
1000f72a:	f019 0f01 	tst.w	r9, #1
1000f72e:	d022      	beq.n	1000f776 <__cvt+0xac>
1000f730:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
1000f734:	eb07 0906 	add.w	r9, r7, r6
1000f738:	d110      	bne.n	1000f75c <__cvt+0x92>
1000f73a:	783b      	ldrb	r3, [r7, #0]
1000f73c:	2b30      	cmp	r3, #48	; 0x30
1000f73e:	d10a      	bne.n	1000f756 <__cvt+0x8c>
1000f740:	2200      	movs	r2, #0
1000f742:	2300      	movs	r3, #0
1000f744:	4620      	mov	r0, r4
1000f746:	4629      	mov	r1, r5
1000f748:	f7f1 f906 	bl	10000958 <__aeabi_dcmpeq>
1000f74c:	b918      	cbnz	r0, 1000f756 <__cvt+0x8c>
1000f74e:	f1c6 0601 	rsb	r6, r6, #1
1000f752:	f8ca 6000 	str.w	r6, [sl]
1000f756:	f8da 3000 	ldr.w	r3, [sl]
1000f75a:	4499      	add	r9, r3
1000f75c:	2200      	movs	r2, #0
1000f75e:	2300      	movs	r3, #0
1000f760:	4620      	mov	r0, r4
1000f762:	4629      	mov	r1, r5
1000f764:	f7f1 f8f8 	bl	10000958 <__aeabi_dcmpeq>
1000f768:	b108      	cbz	r0, 1000f76e <__cvt+0xa4>
1000f76a:	f8cd 900c 	str.w	r9, [sp, #12]
1000f76e:	2230      	movs	r2, #48	; 0x30
1000f770:	9b03      	ldr	r3, [sp, #12]
1000f772:	454b      	cmp	r3, r9
1000f774:	d307      	bcc.n	1000f786 <__cvt+0xbc>
1000f776:	9b03      	ldr	r3, [sp, #12]
1000f778:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000f77a:	1bdb      	subs	r3, r3, r7
1000f77c:	4638      	mov	r0, r7
1000f77e:	6013      	str	r3, [r2, #0]
1000f780:	b004      	add	sp, #16
1000f782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000f786:	1c59      	adds	r1, r3, #1
1000f788:	9103      	str	r1, [sp, #12]
1000f78a:	701a      	strb	r2, [r3, #0]
1000f78c:	e7f0      	b.n	1000f770 <__cvt+0xa6>

1000f78e <__exponent>:
1000f78e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f790:	4603      	mov	r3, r0
1000f792:	2900      	cmp	r1, #0
1000f794:	bfb8      	it	lt
1000f796:	4249      	neglt	r1, r1
1000f798:	f803 2b02 	strb.w	r2, [r3], #2
1000f79c:	bfb4      	ite	lt
1000f79e:	222d      	movlt	r2, #45	; 0x2d
1000f7a0:	222b      	movge	r2, #43	; 0x2b
1000f7a2:	2909      	cmp	r1, #9
1000f7a4:	7042      	strb	r2, [r0, #1]
1000f7a6:	dd2a      	ble.n	1000f7fe <__exponent+0x70>
1000f7a8:	f10d 0207 	add.w	r2, sp, #7
1000f7ac:	4617      	mov	r7, r2
1000f7ae:	260a      	movs	r6, #10
1000f7b0:	4694      	mov	ip, r2
1000f7b2:	fb91 f5f6 	sdiv	r5, r1, r6
1000f7b6:	fb06 1415 	mls	r4, r6, r5, r1
1000f7ba:	3430      	adds	r4, #48	; 0x30
1000f7bc:	f80c 4c01 	strb.w	r4, [ip, #-1]
1000f7c0:	460c      	mov	r4, r1
1000f7c2:	2c63      	cmp	r4, #99	; 0x63
1000f7c4:	f102 32ff 	add.w	r2, r2, #4294967295
1000f7c8:	4629      	mov	r1, r5
1000f7ca:	dcf1      	bgt.n	1000f7b0 <__exponent+0x22>
1000f7cc:	3130      	adds	r1, #48	; 0x30
1000f7ce:	f1ac 0402 	sub.w	r4, ip, #2
1000f7d2:	f802 1c01 	strb.w	r1, [r2, #-1]
1000f7d6:	1c41      	adds	r1, r0, #1
1000f7d8:	4622      	mov	r2, r4
1000f7da:	42ba      	cmp	r2, r7
1000f7dc:	d30a      	bcc.n	1000f7f4 <__exponent+0x66>
1000f7de:	f10d 0209 	add.w	r2, sp, #9
1000f7e2:	eba2 020c 	sub.w	r2, r2, ip
1000f7e6:	42bc      	cmp	r4, r7
1000f7e8:	bf88      	it	hi
1000f7ea:	2200      	movhi	r2, #0
1000f7ec:	4413      	add	r3, r2
1000f7ee:	1a18      	subs	r0, r3, r0
1000f7f0:	b003      	add	sp, #12
1000f7f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f7f4:	f812 5b01 	ldrb.w	r5, [r2], #1
1000f7f8:	f801 5f01 	strb.w	r5, [r1, #1]!
1000f7fc:	e7ed      	b.n	1000f7da <__exponent+0x4c>
1000f7fe:	2330      	movs	r3, #48	; 0x30
1000f800:	3130      	adds	r1, #48	; 0x30
1000f802:	7083      	strb	r3, [r0, #2]
1000f804:	70c1      	strb	r1, [r0, #3]
1000f806:	1d03      	adds	r3, r0, #4
1000f808:	e7f1      	b.n	1000f7ee <__exponent+0x60>
	...

1000f80c <_printf_float>:
1000f80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000f810:	ed2d 8b02 	vpush	{d8}
1000f814:	b08d      	sub	sp, #52	; 0x34
1000f816:	460c      	mov	r4, r1
1000f818:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1000f81c:	4616      	mov	r6, r2
1000f81e:	461f      	mov	r7, r3
1000f820:	4605      	mov	r5, r0
1000f822:	f000 fd1d 	bl	10010260 <_localeconv_r>
1000f826:	f8d0 a000 	ldr.w	sl, [r0]
1000f82a:	4650      	mov	r0, sl
1000f82c:	f7f0 fc68 	bl	10000100 <strlen>
1000f830:	2300      	movs	r3, #0
1000f832:	930a      	str	r3, [sp, #40]	; 0x28
1000f834:	6823      	ldr	r3, [r4, #0]
1000f836:	9305      	str	r3, [sp, #20]
1000f838:	f8d8 3000 	ldr.w	r3, [r8]
1000f83c:	f894 b018 	ldrb.w	fp, [r4, #24]
1000f840:	3307      	adds	r3, #7
1000f842:	f023 0307 	bic.w	r3, r3, #7
1000f846:	f103 0208 	add.w	r2, r3, #8
1000f84a:	f8c8 2000 	str.w	r2, [r8]
1000f84e:	e9d3 8900 	ldrd	r8, r9, [r3]
1000f852:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
1000f856:	9307      	str	r3, [sp, #28]
1000f858:	f8cd 8018 	str.w	r8, [sp, #24]
1000f85c:	ee08 0a10 	vmov	s16, r0
1000f860:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
1000f864:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1000f868:	4b9e      	ldr	r3, [pc, #632]	; (1000fae4 <_printf_float+0x2d8>)
1000f86a:	f04f 32ff 	mov.w	r2, #4294967295
1000f86e:	f7f1 f8a5 	bl	100009bc <__aeabi_dcmpun>
1000f872:	bb88      	cbnz	r0, 1000f8d8 <_printf_float+0xcc>
1000f874:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1000f878:	4b9a      	ldr	r3, [pc, #616]	; (1000fae4 <_printf_float+0x2d8>)
1000f87a:	f04f 32ff 	mov.w	r2, #4294967295
1000f87e:	f7f1 f87f 	bl	10000980 <__aeabi_dcmple>
1000f882:	bb48      	cbnz	r0, 1000f8d8 <_printf_float+0xcc>
1000f884:	2200      	movs	r2, #0
1000f886:	2300      	movs	r3, #0
1000f888:	4640      	mov	r0, r8
1000f88a:	4649      	mov	r1, r9
1000f88c:	f7f1 f86e 	bl	1000096c <__aeabi_dcmplt>
1000f890:	b110      	cbz	r0, 1000f898 <_printf_float+0x8c>
1000f892:	232d      	movs	r3, #45	; 0x2d
1000f894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1000f898:	4a93      	ldr	r2, [pc, #588]	; (1000fae8 <_printf_float+0x2dc>)
1000f89a:	4b94      	ldr	r3, [pc, #592]	; (1000faec <_printf_float+0x2e0>)
1000f89c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
1000f8a0:	bf94      	ite	ls
1000f8a2:	4690      	movls	r8, r2
1000f8a4:	4698      	movhi	r8, r3
1000f8a6:	2303      	movs	r3, #3
1000f8a8:	6123      	str	r3, [r4, #16]
1000f8aa:	9b05      	ldr	r3, [sp, #20]
1000f8ac:	f023 0304 	bic.w	r3, r3, #4
1000f8b0:	6023      	str	r3, [r4, #0]
1000f8b2:	f04f 0900 	mov.w	r9, #0
1000f8b6:	9700      	str	r7, [sp, #0]
1000f8b8:	4633      	mov	r3, r6
1000f8ba:	aa0b      	add	r2, sp, #44	; 0x2c
1000f8bc:	4621      	mov	r1, r4
1000f8be:	4628      	mov	r0, r5
1000f8c0:	f000 f9da 	bl	1000fc78 <_printf_common>
1000f8c4:	3001      	adds	r0, #1
1000f8c6:	f040 8090 	bne.w	1000f9ea <_printf_float+0x1de>
1000f8ca:	f04f 30ff 	mov.w	r0, #4294967295
1000f8ce:	b00d      	add	sp, #52	; 0x34
1000f8d0:	ecbd 8b02 	vpop	{d8}
1000f8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000f8d8:	4642      	mov	r2, r8
1000f8da:	464b      	mov	r3, r9
1000f8dc:	4640      	mov	r0, r8
1000f8de:	4649      	mov	r1, r9
1000f8e0:	f7f1 f86c 	bl	100009bc <__aeabi_dcmpun>
1000f8e4:	b140      	cbz	r0, 1000f8f8 <_printf_float+0xec>
1000f8e6:	464b      	mov	r3, r9
1000f8e8:	2b00      	cmp	r3, #0
1000f8ea:	bfbc      	itt	lt
1000f8ec:	232d      	movlt	r3, #45	; 0x2d
1000f8ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
1000f8f2:	4a7f      	ldr	r2, [pc, #508]	; (1000faf0 <_printf_float+0x2e4>)
1000f8f4:	4b7f      	ldr	r3, [pc, #508]	; (1000faf4 <_printf_float+0x2e8>)
1000f8f6:	e7d1      	b.n	1000f89c <_printf_float+0x90>
1000f8f8:	6863      	ldr	r3, [r4, #4]
1000f8fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
1000f8fe:	9206      	str	r2, [sp, #24]
1000f900:	1c5a      	adds	r2, r3, #1
1000f902:	d13f      	bne.n	1000f984 <_printf_float+0x178>
1000f904:	2306      	movs	r3, #6
1000f906:	6063      	str	r3, [r4, #4]
1000f908:	9b05      	ldr	r3, [sp, #20]
1000f90a:	6861      	ldr	r1, [r4, #4]
1000f90c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
1000f910:	2300      	movs	r3, #0
1000f912:	9303      	str	r3, [sp, #12]
1000f914:	ab0a      	add	r3, sp, #40	; 0x28
1000f916:	e9cd b301 	strd	fp, r3, [sp, #4]
1000f91a:	ab09      	add	r3, sp, #36	; 0x24
1000f91c:	ec49 8b10 	vmov	d0, r8, r9
1000f920:	9300      	str	r3, [sp, #0]
1000f922:	6022      	str	r2, [r4, #0]
1000f924:	f10d 0323 	add.w	r3, sp, #35	; 0x23
1000f928:	4628      	mov	r0, r5
1000f92a:	f7ff fece 	bl	1000f6ca <__cvt>
1000f92e:	9b06      	ldr	r3, [sp, #24]
1000f930:	9909      	ldr	r1, [sp, #36]	; 0x24
1000f932:	2b47      	cmp	r3, #71	; 0x47
1000f934:	4680      	mov	r8, r0
1000f936:	d108      	bne.n	1000f94a <_printf_float+0x13e>
1000f938:	1cc8      	adds	r0, r1, #3
1000f93a:	db02      	blt.n	1000f942 <_printf_float+0x136>
1000f93c:	6863      	ldr	r3, [r4, #4]
1000f93e:	4299      	cmp	r1, r3
1000f940:	dd41      	ble.n	1000f9c6 <_printf_float+0x1ba>
1000f942:	f1ab 0302 	sub.w	r3, fp, #2
1000f946:	fa5f fb83 	uxtb.w	fp, r3
1000f94a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
1000f94e:	d820      	bhi.n	1000f992 <_printf_float+0x186>
1000f950:	3901      	subs	r1, #1
1000f952:	465a      	mov	r2, fp
1000f954:	f104 0050 	add.w	r0, r4, #80	; 0x50
1000f958:	9109      	str	r1, [sp, #36]	; 0x24
1000f95a:	f7ff ff18 	bl	1000f78e <__exponent>
1000f95e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000f960:	1813      	adds	r3, r2, r0
1000f962:	2a01      	cmp	r2, #1
1000f964:	4681      	mov	r9, r0
1000f966:	6123      	str	r3, [r4, #16]
1000f968:	dc02      	bgt.n	1000f970 <_printf_float+0x164>
1000f96a:	6822      	ldr	r2, [r4, #0]
1000f96c:	07d2      	lsls	r2, r2, #31
1000f96e:	d501      	bpl.n	1000f974 <_printf_float+0x168>
1000f970:	3301      	adds	r3, #1
1000f972:	6123      	str	r3, [r4, #16]
1000f974:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
1000f978:	2b00      	cmp	r3, #0
1000f97a:	d09c      	beq.n	1000f8b6 <_printf_float+0xaa>
1000f97c:	232d      	movs	r3, #45	; 0x2d
1000f97e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1000f982:	e798      	b.n	1000f8b6 <_printf_float+0xaa>
1000f984:	9a06      	ldr	r2, [sp, #24]
1000f986:	2a47      	cmp	r2, #71	; 0x47
1000f988:	d1be      	bne.n	1000f908 <_printf_float+0xfc>
1000f98a:	2b00      	cmp	r3, #0
1000f98c:	d1bc      	bne.n	1000f908 <_printf_float+0xfc>
1000f98e:	2301      	movs	r3, #1
1000f990:	e7b9      	b.n	1000f906 <_printf_float+0xfa>
1000f992:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
1000f996:	d118      	bne.n	1000f9ca <_printf_float+0x1be>
1000f998:	2900      	cmp	r1, #0
1000f99a:	6863      	ldr	r3, [r4, #4]
1000f99c:	dd0b      	ble.n	1000f9b6 <_printf_float+0x1aa>
1000f99e:	6121      	str	r1, [r4, #16]
1000f9a0:	b913      	cbnz	r3, 1000f9a8 <_printf_float+0x19c>
1000f9a2:	6822      	ldr	r2, [r4, #0]
1000f9a4:	07d0      	lsls	r0, r2, #31
1000f9a6:	d502      	bpl.n	1000f9ae <_printf_float+0x1a2>
1000f9a8:	3301      	adds	r3, #1
1000f9aa:	440b      	add	r3, r1
1000f9ac:	6123      	str	r3, [r4, #16]
1000f9ae:	65a1      	str	r1, [r4, #88]	; 0x58
1000f9b0:	f04f 0900 	mov.w	r9, #0
1000f9b4:	e7de      	b.n	1000f974 <_printf_float+0x168>
1000f9b6:	b913      	cbnz	r3, 1000f9be <_printf_float+0x1b2>
1000f9b8:	6822      	ldr	r2, [r4, #0]
1000f9ba:	07d2      	lsls	r2, r2, #31
1000f9bc:	d501      	bpl.n	1000f9c2 <_printf_float+0x1b6>
1000f9be:	3302      	adds	r3, #2
1000f9c0:	e7f4      	b.n	1000f9ac <_printf_float+0x1a0>
1000f9c2:	2301      	movs	r3, #1
1000f9c4:	e7f2      	b.n	1000f9ac <_printf_float+0x1a0>
1000f9c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
1000f9ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000f9cc:	4299      	cmp	r1, r3
1000f9ce:	db05      	blt.n	1000f9dc <_printf_float+0x1d0>
1000f9d0:	6823      	ldr	r3, [r4, #0]
1000f9d2:	6121      	str	r1, [r4, #16]
1000f9d4:	07d8      	lsls	r0, r3, #31
1000f9d6:	d5ea      	bpl.n	1000f9ae <_printf_float+0x1a2>
1000f9d8:	1c4b      	adds	r3, r1, #1
1000f9da:	e7e7      	b.n	1000f9ac <_printf_float+0x1a0>
1000f9dc:	2900      	cmp	r1, #0
1000f9de:	bfd4      	ite	le
1000f9e0:	f1c1 0202 	rsble	r2, r1, #2
1000f9e4:	2201      	movgt	r2, #1
1000f9e6:	4413      	add	r3, r2
1000f9e8:	e7e0      	b.n	1000f9ac <_printf_float+0x1a0>
1000f9ea:	6823      	ldr	r3, [r4, #0]
1000f9ec:	055a      	lsls	r2, r3, #21
1000f9ee:	d407      	bmi.n	1000fa00 <_printf_float+0x1f4>
1000f9f0:	6923      	ldr	r3, [r4, #16]
1000f9f2:	4642      	mov	r2, r8
1000f9f4:	4631      	mov	r1, r6
1000f9f6:	4628      	mov	r0, r5
1000f9f8:	47b8      	blx	r7
1000f9fa:	3001      	adds	r0, #1
1000f9fc:	d12c      	bne.n	1000fa58 <_printf_float+0x24c>
1000f9fe:	e764      	b.n	1000f8ca <_printf_float+0xbe>
1000fa00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
1000fa04:	f240 80e0 	bls.w	1000fbc8 <_printf_float+0x3bc>
1000fa08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
1000fa0c:	2200      	movs	r2, #0
1000fa0e:	2300      	movs	r3, #0
1000fa10:	f7f0 ffa2 	bl	10000958 <__aeabi_dcmpeq>
1000fa14:	2800      	cmp	r0, #0
1000fa16:	d034      	beq.n	1000fa82 <_printf_float+0x276>
1000fa18:	4a37      	ldr	r2, [pc, #220]	; (1000faf8 <_printf_float+0x2ec>)
1000fa1a:	2301      	movs	r3, #1
1000fa1c:	4631      	mov	r1, r6
1000fa1e:	4628      	mov	r0, r5
1000fa20:	47b8      	blx	r7
1000fa22:	3001      	adds	r0, #1
1000fa24:	f43f af51 	beq.w	1000f8ca <_printf_float+0xbe>
1000fa28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
1000fa2c:	429a      	cmp	r2, r3
1000fa2e:	db02      	blt.n	1000fa36 <_printf_float+0x22a>
1000fa30:	6823      	ldr	r3, [r4, #0]
1000fa32:	07d8      	lsls	r0, r3, #31
1000fa34:	d510      	bpl.n	1000fa58 <_printf_float+0x24c>
1000fa36:	ee18 3a10 	vmov	r3, s16
1000fa3a:	4652      	mov	r2, sl
1000fa3c:	4631      	mov	r1, r6
1000fa3e:	4628      	mov	r0, r5
1000fa40:	47b8      	blx	r7
1000fa42:	3001      	adds	r0, #1
1000fa44:	f43f af41 	beq.w	1000f8ca <_printf_float+0xbe>
1000fa48:	f04f 0800 	mov.w	r8, #0
1000fa4c:	f104 091a 	add.w	r9, r4, #26
1000fa50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000fa52:	3b01      	subs	r3, #1
1000fa54:	4543      	cmp	r3, r8
1000fa56:	dc09      	bgt.n	1000fa6c <_printf_float+0x260>
1000fa58:	6823      	ldr	r3, [r4, #0]
1000fa5a:	079b      	lsls	r3, r3, #30
1000fa5c:	f100 8107 	bmi.w	1000fc6e <_printf_float+0x462>
1000fa60:	68e0      	ldr	r0, [r4, #12]
1000fa62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000fa64:	4298      	cmp	r0, r3
1000fa66:	bfb8      	it	lt
1000fa68:	4618      	movlt	r0, r3
1000fa6a:	e730      	b.n	1000f8ce <_printf_float+0xc2>
1000fa6c:	2301      	movs	r3, #1
1000fa6e:	464a      	mov	r2, r9
1000fa70:	4631      	mov	r1, r6
1000fa72:	4628      	mov	r0, r5
1000fa74:	47b8      	blx	r7
1000fa76:	3001      	adds	r0, #1
1000fa78:	f43f af27 	beq.w	1000f8ca <_printf_float+0xbe>
1000fa7c:	f108 0801 	add.w	r8, r8, #1
1000fa80:	e7e6      	b.n	1000fa50 <_printf_float+0x244>
1000fa82:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000fa84:	2b00      	cmp	r3, #0
1000fa86:	dc39      	bgt.n	1000fafc <_printf_float+0x2f0>
1000fa88:	4a1b      	ldr	r2, [pc, #108]	; (1000faf8 <_printf_float+0x2ec>)
1000fa8a:	2301      	movs	r3, #1
1000fa8c:	4631      	mov	r1, r6
1000fa8e:	4628      	mov	r0, r5
1000fa90:	47b8      	blx	r7
1000fa92:	3001      	adds	r0, #1
1000fa94:	f43f af19 	beq.w	1000f8ca <_printf_float+0xbe>
1000fa98:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
1000fa9c:	4313      	orrs	r3, r2
1000fa9e:	d102      	bne.n	1000faa6 <_printf_float+0x29a>
1000faa0:	6823      	ldr	r3, [r4, #0]
1000faa2:	07d9      	lsls	r1, r3, #31
1000faa4:	d5d8      	bpl.n	1000fa58 <_printf_float+0x24c>
1000faa6:	ee18 3a10 	vmov	r3, s16
1000faaa:	4652      	mov	r2, sl
1000faac:	4631      	mov	r1, r6
1000faae:	4628      	mov	r0, r5
1000fab0:	47b8      	blx	r7
1000fab2:	3001      	adds	r0, #1
1000fab4:	f43f af09 	beq.w	1000f8ca <_printf_float+0xbe>
1000fab8:	f04f 0900 	mov.w	r9, #0
1000fabc:	f104 0a1a 	add.w	sl, r4, #26
1000fac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000fac2:	425b      	negs	r3, r3
1000fac4:	454b      	cmp	r3, r9
1000fac6:	dc01      	bgt.n	1000facc <_printf_float+0x2c0>
1000fac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000faca:	e792      	b.n	1000f9f2 <_printf_float+0x1e6>
1000facc:	2301      	movs	r3, #1
1000face:	4652      	mov	r2, sl
1000fad0:	4631      	mov	r1, r6
1000fad2:	4628      	mov	r0, r5
1000fad4:	47b8      	blx	r7
1000fad6:	3001      	adds	r0, #1
1000fad8:	f43f aef7 	beq.w	1000f8ca <_printf_float+0xbe>
1000fadc:	f109 0901 	add.w	r9, r9, #1
1000fae0:	e7ee      	b.n	1000fac0 <_printf_float+0x2b4>
1000fae2:	bf00      	nop
1000fae4:	7fefffff 	.word	0x7fefffff
1000fae8:	1001ad34 	.word	0x1001ad34
1000faec:	1001ad38 	.word	0x1001ad38
1000faf0:	1001ad3c 	.word	0x1001ad3c
1000faf4:	1001ad40 	.word	0x1001ad40
1000faf8:	1001ad44 	.word	0x1001ad44
1000fafc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000fafe:	6da3      	ldr	r3, [r4, #88]	; 0x58
1000fb00:	429a      	cmp	r2, r3
1000fb02:	bfa8      	it	ge
1000fb04:	461a      	movge	r2, r3
1000fb06:	2a00      	cmp	r2, #0
1000fb08:	4691      	mov	r9, r2
1000fb0a:	dc37      	bgt.n	1000fb7c <_printf_float+0x370>
1000fb0c:	f04f 0b00 	mov.w	fp, #0
1000fb10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
1000fb14:	f104 021a 	add.w	r2, r4, #26
1000fb18:	6da3      	ldr	r3, [r4, #88]	; 0x58
1000fb1a:	9305      	str	r3, [sp, #20]
1000fb1c:	eba3 0309 	sub.w	r3, r3, r9
1000fb20:	455b      	cmp	r3, fp
1000fb22:	dc33      	bgt.n	1000fb8c <_printf_float+0x380>
1000fb24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
1000fb28:	429a      	cmp	r2, r3
1000fb2a:	db3b      	blt.n	1000fba4 <_printf_float+0x398>
1000fb2c:	6823      	ldr	r3, [r4, #0]
1000fb2e:	07da      	lsls	r2, r3, #31
1000fb30:	d438      	bmi.n	1000fba4 <_printf_float+0x398>
1000fb32:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
1000fb36:	eba2 0903 	sub.w	r9, r2, r3
1000fb3a:	9b05      	ldr	r3, [sp, #20]
1000fb3c:	1ad2      	subs	r2, r2, r3
1000fb3e:	4591      	cmp	r9, r2
1000fb40:	bfa8      	it	ge
1000fb42:	4691      	movge	r9, r2
1000fb44:	f1b9 0f00 	cmp.w	r9, #0
1000fb48:	dc35      	bgt.n	1000fbb6 <_printf_float+0x3aa>
1000fb4a:	f04f 0800 	mov.w	r8, #0
1000fb4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
1000fb52:	f104 0a1a 	add.w	sl, r4, #26
1000fb56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
1000fb5a:	1a9b      	subs	r3, r3, r2
1000fb5c:	eba3 0309 	sub.w	r3, r3, r9
1000fb60:	4543      	cmp	r3, r8
1000fb62:	f77f af79 	ble.w	1000fa58 <_printf_float+0x24c>
1000fb66:	2301      	movs	r3, #1
1000fb68:	4652      	mov	r2, sl
1000fb6a:	4631      	mov	r1, r6
1000fb6c:	4628      	mov	r0, r5
1000fb6e:	47b8      	blx	r7
1000fb70:	3001      	adds	r0, #1
1000fb72:	f43f aeaa 	beq.w	1000f8ca <_printf_float+0xbe>
1000fb76:	f108 0801 	add.w	r8, r8, #1
1000fb7a:	e7ec      	b.n	1000fb56 <_printf_float+0x34a>
1000fb7c:	4613      	mov	r3, r2
1000fb7e:	4631      	mov	r1, r6
1000fb80:	4642      	mov	r2, r8
1000fb82:	4628      	mov	r0, r5
1000fb84:	47b8      	blx	r7
1000fb86:	3001      	adds	r0, #1
1000fb88:	d1c0      	bne.n	1000fb0c <_printf_float+0x300>
1000fb8a:	e69e      	b.n	1000f8ca <_printf_float+0xbe>
1000fb8c:	2301      	movs	r3, #1
1000fb8e:	4631      	mov	r1, r6
1000fb90:	4628      	mov	r0, r5
1000fb92:	9205      	str	r2, [sp, #20]
1000fb94:	47b8      	blx	r7
1000fb96:	3001      	adds	r0, #1
1000fb98:	f43f ae97 	beq.w	1000f8ca <_printf_float+0xbe>
1000fb9c:	9a05      	ldr	r2, [sp, #20]
1000fb9e:	f10b 0b01 	add.w	fp, fp, #1
1000fba2:	e7b9      	b.n	1000fb18 <_printf_float+0x30c>
1000fba4:	ee18 3a10 	vmov	r3, s16
1000fba8:	4652      	mov	r2, sl
1000fbaa:	4631      	mov	r1, r6
1000fbac:	4628      	mov	r0, r5
1000fbae:	47b8      	blx	r7
1000fbb0:	3001      	adds	r0, #1
1000fbb2:	d1be      	bne.n	1000fb32 <_printf_float+0x326>
1000fbb4:	e689      	b.n	1000f8ca <_printf_float+0xbe>
1000fbb6:	9a05      	ldr	r2, [sp, #20]
1000fbb8:	464b      	mov	r3, r9
1000fbba:	4442      	add	r2, r8
1000fbbc:	4631      	mov	r1, r6
1000fbbe:	4628      	mov	r0, r5
1000fbc0:	47b8      	blx	r7
1000fbc2:	3001      	adds	r0, #1
1000fbc4:	d1c1      	bne.n	1000fb4a <_printf_float+0x33e>
1000fbc6:	e680      	b.n	1000f8ca <_printf_float+0xbe>
1000fbc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000fbca:	2a01      	cmp	r2, #1
1000fbcc:	dc01      	bgt.n	1000fbd2 <_printf_float+0x3c6>
1000fbce:	07db      	lsls	r3, r3, #31
1000fbd0:	d53a      	bpl.n	1000fc48 <_printf_float+0x43c>
1000fbd2:	2301      	movs	r3, #1
1000fbd4:	4642      	mov	r2, r8
1000fbd6:	4631      	mov	r1, r6
1000fbd8:	4628      	mov	r0, r5
1000fbda:	47b8      	blx	r7
1000fbdc:	3001      	adds	r0, #1
1000fbde:	f43f ae74 	beq.w	1000f8ca <_printf_float+0xbe>
1000fbe2:	ee18 3a10 	vmov	r3, s16
1000fbe6:	4652      	mov	r2, sl
1000fbe8:	4631      	mov	r1, r6
1000fbea:	4628      	mov	r0, r5
1000fbec:	47b8      	blx	r7
1000fbee:	3001      	adds	r0, #1
1000fbf0:	f43f ae6b 	beq.w	1000f8ca <_printf_float+0xbe>
1000fbf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
1000fbf8:	2200      	movs	r2, #0
1000fbfa:	2300      	movs	r3, #0
1000fbfc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
1000fc00:	f7f0 feaa 	bl	10000958 <__aeabi_dcmpeq>
1000fc04:	b9d8      	cbnz	r0, 1000fc3e <_printf_float+0x432>
1000fc06:	f10a 33ff 	add.w	r3, sl, #4294967295
1000fc0a:	f108 0201 	add.w	r2, r8, #1
1000fc0e:	4631      	mov	r1, r6
1000fc10:	4628      	mov	r0, r5
1000fc12:	47b8      	blx	r7
1000fc14:	3001      	adds	r0, #1
1000fc16:	d10e      	bne.n	1000fc36 <_printf_float+0x42a>
1000fc18:	e657      	b.n	1000f8ca <_printf_float+0xbe>
1000fc1a:	2301      	movs	r3, #1
1000fc1c:	4652      	mov	r2, sl
1000fc1e:	4631      	mov	r1, r6
1000fc20:	4628      	mov	r0, r5
1000fc22:	47b8      	blx	r7
1000fc24:	3001      	adds	r0, #1
1000fc26:	f43f ae50 	beq.w	1000f8ca <_printf_float+0xbe>
1000fc2a:	f108 0801 	add.w	r8, r8, #1
1000fc2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000fc30:	3b01      	subs	r3, #1
1000fc32:	4543      	cmp	r3, r8
1000fc34:	dcf1      	bgt.n	1000fc1a <_printf_float+0x40e>
1000fc36:	464b      	mov	r3, r9
1000fc38:	f104 0250 	add.w	r2, r4, #80	; 0x50
1000fc3c:	e6da      	b.n	1000f9f4 <_printf_float+0x1e8>
1000fc3e:	f04f 0800 	mov.w	r8, #0
1000fc42:	f104 0a1a 	add.w	sl, r4, #26
1000fc46:	e7f2      	b.n	1000fc2e <_printf_float+0x422>
1000fc48:	2301      	movs	r3, #1
1000fc4a:	4642      	mov	r2, r8
1000fc4c:	e7df      	b.n	1000fc0e <_printf_float+0x402>
1000fc4e:	2301      	movs	r3, #1
1000fc50:	464a      	mov	r2, r9
1000fc52:	4631      	mov	r1, r6
1000fc54:	4628      	mov	r0, r5
1000fc56:	47b8      	blx	r7
1000fc58:	3001      	adds	r0, #1
1000fc5a:	f43f ae36 	beq.w	1000f8ca <_printf_float+0xbe>
1000fc5e:	f108 0801 	add.w	r8, r8, #1
1000fc62:	68e3      	ldr	r3, [r4, #12]
1000fc64:	990b      	ldr	r1, [sp, #44]	; 0x2c
1000fc66:	1a5b      	subs	r3, r3, r1
1000fc68:	4543      	cmp	r3, r8
1000fc6a:	dcf0      	bgt.n	1000fc4e <_printf_float+0x442>
1000fc6c:	e6f8      	b.n	1000fa60 <_printf_float+0x254>
1000fc6e:	f04f 0800 	mov.w	r8, #0
1000fc72:	f104 0919 	add.w	r9, r4, #25
1000fc76:	e7f4      	b.n	1000fc62 <_printf_float+0x456>

1000fc78 <_printf_common>:
1000fc78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1000fc7c:	4616      	mov	r6, r2
1000fc7e:	4699      	mov	r9, r3
1000fc80:	688a      	ldr	r2, [r1, #8]
1000fc82:	690b      	ldr	r3, [r1, #16]
1000fc84:	f8dd 8020 	ldr.w	r8, [sp, #32]
1000fc88:	4293      	cmp	r3, r2
1000fc8a:	bfb8      	it	lt
1000fc8c:	4613      	movlt	r3, r2
1000fc8e:	6033      	str	r3, [r6, #0]
1000fc90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1000fc94:	4607      	mov	r7, r0
1000fc96:	460c      	mov	r4, r1
1000fc98:	b10a      	cbz	r2, 1000fc9e <_printf_common+0x26>
1000fc9a:	3301      	adds	r3, #1
1000fc9c:	6033      	str	r3, [r6, #0]
1000fc9e:	6823      	ldr	r3, [r4, #0]
1000fca0:	0699      	lsls	r1, r3, #26
1000fca2:	bf42      	ittt	mi
1000fca4:	6833      	ldrmi	r3, [r6, #0]
1000fca6:	3302      	addmi	r3, #2
1000fca8:	6033      	strmi	r3, [r6, #0]
1000fcaa:	6825      	ldr	r5, [r4, #0]
1000fcac:	f015 0506 	ands.w	r5, r5, #6
1000fcb0:	d106      	bne.n	1000fcc0 <_printf_common+0x48>
1000fcb2:	f104 0a19 	add.w	sl, r4, #25
1000fcb6:	68e3      	ldr	r3, [r4, #12]
1000fcb8:	6832      	ldr	r2, [r6, #0]
1000fcba:	1a9b      	subs	r3, r3, r2
1000fcbc:	42ab      	cmp	r3, r5
1000fcbe:	dc26      	bgt.n	1000fd0e <_printf_common+0x96>
1000fcc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
1000fcc4:	1e13      	subs	r3, r2, #0
1000fcc6:	6822      	ldr	r2, [r4, #0]
1000fcc8:	bf18      	it	ne
1000fcca:	2301      	movne	r3, #1
1000fccc:	0692      	lsls	r2, r2, #26
1000fcce:	d42b      	bmi.n	1000fd28 <_printf_common+0xb0>
1000fcd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
1000fcd4:	4649      	mov	r1, r9
1000fcd6:	4638      	mov	r0, r7
1000fcd8:	47c0      	blx	r8
1000fcda:	3001      	adds	r0, #1
1000fcdc:	d01e      	beq.n	1000fd1c <_printf_common+0xa4>
1000fcde:	6823      	ldr	r3, [r4, #0]
1000fce0:	6922      	ldr	r2, [r4, #16]
1000fce2:	f003 0306 	and.w	r3, r3, #6
1000fce6:	2b04      	cmp	r3, #4
1000fce8:	bf02      	ittt	eq
1000fcea:	68e5      	ldreq	r5, [r4, #12]
1000fcec:	6833      	ldreq	r3, [r6, #0]
1000fcee:	1aed      	subeq	r5, r5, r3
1000fcf0:	68a3      	ldr	r3, [r4, #8]
1000fcf2:	bf0c      	ite	eq
1000fcf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1000fcf8:	2500      	movne	r5, #0
1000fcfa:	4293      	cmp	r3, r2
1000fcfc:	bfc4      	itt	gt
1000fcfe:	1a9b      	subgt	r3, r3, r2
1000fd00:	18ed      	addgt	r5, r5, r3
1000fd02:	2600      	movs	r6, #0
1000fd04:	341a      	adds	r4, #26
1000fd06:	42b5      	cmp	r5, r6
1000fd08:	d11a      	bne.n	1000fd40 <_printf_common+0xc8>
1000fd0a:	2000      	movs	r0, #0
1000fd0c:	e008      	b.n	1000fd20 <_printf_common+0xa8>
1000fd0e:	2301      	movs	r3, #1
1000fd10:	4652      	mov	r2, sl
1000fd12:	4649      	mov	r1, r9
1000fd14:	4638      	mov	r0, r7
1000fd16:	47c0      	blx	r8
1000fd18:	3001      	adds	r0, #1
1000fd1a:	d103      	bne.n	1000fd24 <_printf_common+0xac>
1000fd1c:	f04f 30ff 	mov.w	r0, #4294967295
1000fd20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000fd24:	3501      	adds	r5, #1
1000fd26:	e7c6      	b.n	1000fcb6 <_printf_common+0x3e>
1000fd28:	18e1      	adds	r1, r4, r3
1000fd2a:	1c5a      	adds	r2, r3, #1
1000fd2c:	2030      	movs	r0, #48	; 0x30
1000fd2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1000fd32:	4422      	add	r2, r4
1000fd34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1000fd38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1000fd3c:	3302      	adds	r3, #2
1000fd3e:	e7c7      	b.n	1000fcd0 <_printf_common+0x58>
1000fd40:	2301      	movs	r3, #1
1000fd42:	4622      	mov	r2, r4
1000fd44:	4649      	mov	r1, r9
1000fd46:	4638      	mov	r0, r7
1000fd48:	47c0      	blx	r8
1000fd4a:	3001      	adds	r0, #1
1000fd4c:	d0e6      	beq.n	1000fd1c <_printf_common+0xa4>
1000fd4e:	3601      	adds	r6, #1
1000fd50:	e7d9      	b.n	1000fd06 <_printf_common+0x8e>
	...

1000fd54 <_printf_i>:
1000fd54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
1000fd58:	7e0f      	ldrb	r7, [r1, #24]
1000fd5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
1000fd5c:	2f78      	cmp	r7, #120	; 0x78
1000fd5e:	4691      	mov	r9, r2
1000fd60:	4680      	mov	r8, r0
1000fd62:	460c      	mov	r4, r1
1000fd64:	469a      	mov	sl, r3
1000fd66:	f101 0243 	add.w	r2, r1, #67	; 0x43
1000fd6a:	d807      	bhi.n	1000fd7c <_printf_i+0x28>
1000fd6c:	2f62      	cmp	r7, #98	; 0x62
1000fd6e:	d80a      	bhi.n	1000fd86 <_printf_i+0x32>
1000fd70:	2f00      	cmp	r7, #0
1000fd72:	f000 80d4 	beq.w	1000ff1e <_printf_i+0x1ca>
1000fd76:	2f58      	cmp	r7, #88	; 0x58
1000fd78:	f000 80c0 	beq.w	1000fefc <_printf_i+0x1a8>
1000fd7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
1000fd80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
1000fd84:	e03a      	b.n	1000fdfc <_printf_i+0xa8>
1000fd86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
1000fd8a:	2b15      	cmp	r3, #21
1000fd8c:	d8f6      	bhi.n	1000fd7c <_printf_i+0x28>
1000fd8e:	a101      	add	r1, pc, #4	; (adr r1, 1000fd94 <_printf_i+0x40>)
1000fd90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
1000fd94:	1000fded 	.word	0x1000fded
1000fd98:	1000fe01 	.word	0x1000fe01
1000fd9c:	1000fd7d 	.word	0x1000fd7d
1000fda0:	1000fd7d 	.word	0x1000fd7d
1000fda4:	1000fd7d 	.word	0x1000fd7d
1000fda8:	1000fd7d 	.word	0x1000fd7d
1000fdac:	1000fe01 	.word	0x1000fe01
1000fdb0:	1000fd7d 	.word	0x1000fd7d
1000fdb4:	1000fd7d 	.word	0x1000fd7d
1000fdb8:	1000fd7d 	.word	0x1000fd7d
1000fdbc:	1000fd7d 	.word	0x1000fd7d
1000fdc0:	1000ff05 	.word	0x1000ff05
1000fdc4:	1000fe2d 	.word	0x1000fe2d
1000fdc8:	1000febf 	.word	0x1000febf
1000fdcc:	1000fd7d 	.word	0x1000fd7d
1000fdd0:	1000fd7d 	.word	0x1000fd7d
1000fdd4:	1000ff27 	.word	0x1000ff27
1000fdd8:	1000fd7d 	.word	0x1000fd7d
1000fddc:	1000fe2d 	.word	0x1000fe2d
1000fde0:	1000fd7d 	.word	0x1000fd7d
1000fde4:	1000fd7d 	.word	0x1000fd7d
1000fde8:	1000fec7 	.word	0x1000fec7
1000fdec:	682b      	ldr	r3, [r5, #0]
1000fdee:	1d1a      	adds	r2, r3, #4
1000fdf0:	681b      	ldr	r3, [r3, #0]
1000fdf2:	602a      	str	r2, [r5, #0]
1000fdf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
1000fdf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1000fdfc:	2301      	movs	r3, #1
1000fdfe:	e09f      	b.n	1000ff40 <_printf_i+0x1ec>
1000fe00:	6820      	ldr	r0, [r4, #0]
1000fe02:	682b      	ldr	r3, [r5, #0]
1000fe04:	0607      	lsls	r7, r0, #24
1000fe06:	f103 0104 	add.w	r1, r3, #4
1000fe0a:	6029      	str	r1, [r5, #0]
1000fe0c:	d501      	bpl.n	1000fe12 <_printf_i+0xbe>
1000fe0e:	681e      	ldr	r6, [r3, #0]
1000fe10:	e003      	b.n	1000fe1a <_printf_i+0xc6>
1000fe12:	0646      	lsls	r6, r0, #25
1000fe14:	d5fb      	bpl.n	1000fe0e <_printf_i+0xba>
1000fe16:	f9b3 6000 	ldrsh.w	r6, [r3]
1000fe1a:	2e00      	cmp	r6, #0
1000fe1c:	da03      	bge.n	1000fe26 <_printf_i+0xd2>
1000fe1e:	232d      	movs	r3, #45	; 0x2d
1000fe20:	4276      	negs	r6, r6
1000fe22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1000fe26:	485a      	ldr	r0, [pc, #360]	; (1000ff90 <_printf_i+0x23c>)
1000fe28:	230a      	movs	r3, #10
1000fe2a:	e012      	b.n	1000fe52 <_printf_i+0xfe>
1000fe2c:	682b      	ldr	r3, [r5, #0]
1000fe2e:	6820      	ldr	r0, [r4, #0]
1000fe30:	1d19      	adds	r1, r3, #4
1000fe32:	6029      	str	r1, [r5, #0]
1000fe34:	0605      	lsls	r5, r0, #24
1000fe36:	d501      	bpl.n	1000fe3c <_printf_i+0xe8>
1000fe38:	681e      	ldr	r6, [r3, #0]
1000fe3a:	e002      	b.n	1000fe42 <_printf_i+0xee>
1000fe3c:	0641      	lsls	r1, r0, #25
1000fe3e:	d5fb      	bpl.n	1000fe38 <_printf_i+0xe4>
1000fe40:	881e      	ldrh	r6, [r3, #0]
1000fe42:	4853      	ldr	r0, [pc, #332]	; (1000ff90 <_printf_i+0x23c>)
1000fe44:	2f6f      	cmp	r7, #111	; 0x6f
1000fe46:	bf0c      	ite	eq
1000fe48:	2308      	moveq	r3, #8
1000fe4a:	230a      	movne	r3, #10
1000fe4c:	2100      	movs	r1, #0
1000fe4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1000fe52:	6865      	ldr	r5, [r4, #4]
1000fe54:	60a5      	str	r5, [r4, #8]
1000fe56:	2d00      	cmp	r5, #0
1000fe58:	bfa2      	ittt	ge
1000fe5a:	6821      	ldrge	r1, [r4, #0]
1000fe5c:	f021 0104 	bicge.w	r1, r1, #4
1000fe60:	6021      	strge	r1, [r4, #0]
1000fe62:	b90e      	cbnz	r6, 1000fe68 <_printf_i+0x114>
1000fe64:	2d00      	cmp	r5, #0
1000fe66:	d04b      	beq.n	1000ff00 <_printf_i+0x1ac>
1000fe68:	4615      	mov	r5, r2
1000fe6a:	fbb6 f1f3 	udiv	r1, r6, r3
1000fe6e:	fb03 6711 	mls	r7, r3, r1, r6
1000fe72:	5dc7      	ldrb	r7, [r0, r7]
1000fe74:	f805 7d01 	strb.w	r7, [r5, #-1]!
1000fe78:	4637      	mov	r7, r6
1000fe7a:	42bb      	cmp	r3, r7
1000fe7c:	460e      	mov	r6, r1
1000fe7e:	d9f4      	bls.n	1000fe6a <_printf_i+0x116>
1000fe80:	2b08      	cmp	r3, #8
1000fe82:	d10b      	bne.n	1000fe9c <_printf_i+0x148>
1000fe84:	6823      	ldr	r3, [r4, #0]
1000fe86:	07de      	lsls	r6, r3, #31
1000fe88:	d508      	bpl.n	1000fe9c <_printf_i+0x148>
1000fe8a:	6923      	ldr	r3, [r4, #16]
1000fe8c:	6861      	ldr	r1, [r4, #4]
1000fe8e:	4299      	cmp	r1, r3
1000fe90:	bfde      	ittt	le
1000fe92:	2330      	movle	r3, #48	; 0x30
1000fe94:	f805 3c01 	strble.w	r3, [r5, #-1]
1000fe98:	f105 35ff 	addle.w	r5, r5, #4294967295
1000fe9c:	1b52      	subs	r2, r2, r5
1000fe9e:	6122      	str	r2, [r4, #16]
1000fea0:	f8cd a000 	str.w	sl, [sp]
1000fea4:	464b      	mov	r3, r9
1000fea6:	aa03      	add	r2, sp, #12
1000fea8:	4621      	mov	r1, r4
1000feaa:	4640      	mov	r0, r8
1000feac:	f7ff fee4 	bl	1000fc78 <_printf_common>
1000feb0:	3001      	adds	r0, #1
1000feb2:	d14a      	bne.n	1000ff4a <_printf_i+0x1f6>
1000feb4:	f04f 30ff 	mov.w	r0, #4294967295
1000feb8:	b004      	add	sp, #16
1000feba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000febe:	6823      	ldr	r3, [r4, #0]
1000fec0:	f043 0320 	orr.w	r3, r3, #32
1000fec4:	6023      	str	r3, [r4, #0]
1000fec6:	4833      	ldr	r0, [pc, #204]	; (1000ff94 <_printf_i+0x240>)
1000fec8:	2778      	movs	r7, #120	; 0x78
1000feca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
1000fece:	6823      	ldr	r3, [r4, #0]
1000fed0:	6829      	ldr	r1, [r5, #0]
1000fed2:	061f      	lsls	r7, r3, #24
1000fed4:	f851 6b04 	ldr.w	r6, [r1], #4
1000fed8:	d402      	bmi.n	1000fee0 <_printf_i+0x18c>
1000feda:	065f      	lsls	r7, r3, #25
1000fedc:	bf48      	it	mi
1000fede:	b2b6      	uxthmi	r6, r6
1000fee0:	07df      	lsls	r7, r3, #31
1000fee2:	bf48      	it	mi
1000fee4:	f043 0320 	orrmi.w	r3, r3, #32
1000fee8:	6029      	str	r1, [r5, #0]
1000feea:	bf48      	it	mi
1000feec:	6023      	strmi	r3, [r4, #0]
1000feee:	b91e      	cbnz	r6, 1000fef8 <_printf_i+0x1a4>
1000fef0:	6823      	ldr	r3, [r4, #0]
1000fef2:	f023 0320 	bic.w	r3, r3, #32
1000fef6:	6023      	str	r3, [r4, #0]
1000fef8:	2310      	movs	r3, #16
1000fefa:	e7a7      	b.n	1000fe4c <_printf_i+0xf8>
1000fefc:	4824      	ldr	r0, [pc, #144]	; (1000ff90 <_printf_i+0x23c>)
1000fefe:	e7e4      	b.n	1000feca <_printf_i+0x176>
1000ff00:	4615      	mov	r5, r2
1000ff02:	e7bd      	b.n	1000fe80 <_printf_i+0x12c>
1000ff04:	682b      	ldr	r3, [r5, #0]
1000ff06:	6826      	ldr	r6, [r4, #0]
1000ff08:	6961      	ldr	r1, [r4, #20]
1000ff0a:	1d18      	adds	r0, r3, #4
1000ff0c:	6028      	str	r0, [r5, #0]
1000ff0e:	0635      	lsls	r5, r6, #24
1000ff10:	681b      	ldr	r3, [r3, #0]
1000ff12:	d501      	bpl.n	1000ff18 <_printf_i+0x1c4>
1000ff14:	6019      	str	r1, [r3, #0]
1000ff16:	e002      	b.n	1000ff1e <_printf_i+0x1ca>
1000ff18:	0670      	lsls	r0, r6, #25
1000ff1a:	d5fb      	bpl.n	1000ff14 <_printf_i+0x1c0>
1000ff1c:	8019      	strh	r1, [r3, #0]
1000ff1e:	2300      	movs	r3, #0
1000ff20:	6123      	str	r3, [r4, #16]
1000ff22:	4615      	mov	r5, r2
1000ff24:	e7bc      	b.n	1000fea0 <_printf_i+0x14c>
1000ff26:	682b      	ldr	r3, [r5, #0]
1000ff28:	1d1a      	adds	r2, r3, #4
1000ff2a:	602a      	str	r2, [r5, #0]
1000ff2c:	681d      	ldr	r5, [r3, #0]
1000ff2e:	6862      	ldr	r2, [r4, #4]
1000ff30:	2100      	movs	r1, #0
1000ff32:	4628      	mov	r0, r5
1000ff34:	f7f0 f894 	bl	10000060 <memchr>
1000ff38:	b108      	cbz	r0, 1000ff3e <_printf_i+0x1ea>
1000ff3a:	1b40      	subs	r0, r0, r5
1000ff3c:	6060      	str	r0, [r4, #4]
1000ff3e:	6863      	ldr	r3, [r4, #4]
1000ff40:	6123      	str	r3, [r4, #16]
1000ff42:	2300      	movs	r3, #0
1000ff44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1000ff48:	e7aa      	b.n	1000fea0 <_printf_i+0x14c>
1000ff4a:	6923      	ldr	r3, [r4, #16]
1000ff4c:	462a      	mov	r2, r5
1000ff4e:	4649      	mov	r1, r9
1000ff50:	4640      	mov	r0, r8
1000ff52:	47d0      	blx	sl
1000ff54:	3001      	adds	r0, #1
1000ff56:	d0ad      	beq.n	1000feb4 <_printf_i+0x160>
1000ff58:	6823      	ldr	r3, [r4, #0]
1000ff5a:	079b      	lsls	r3, r3, #30
1000ff5c:	d413      	bmi.n	1000ff86 <_printf_i+0x232>
1000ff5e:	68e0      	ldr	r0, [r4, #12]
1000ff60:	9b03      	ldr	r3, [sp, #12]
1000ff62:	4298      	cmp	r0, r3
1000ff64:	bfb8      	it	lt
1000ff66:	4618      	movlt	r0, r3
1000ff68:	e7a6      	b.n	1000feb8 <_printf_i+0x164>
1000ff6a:	2301      	movs	r3, #1
1000ff6c:	4632      	mov	r2, r6
1000ff6e:	4649      	mov	r1, r9
1000ff70:	4640      	mov	r0, r8
1000ff72:	47d0      	blx	sl
1000ff74:	3001      	adds	r0, #1
1000ff76:	d09d      	beq.n	1000feb4 <_printf_i+0x160>
1000ff78:	3501      	adds	r5, #1
1000ff7a:	68e3      	ldr	r3, [r4, #12]
1000ff7c:	9903      	ldr	r1, [sp, #12]
1000ff7e:	1a5b      	subs	r3, r3, r1
1000ff80:	42ab      	cmp	r3, r5
1000ff82:	dcf2      	bgt.n	1000ff6a <_printf_i+0x216>
1000ff84:	e7eb      	b.n	1000ff5e <_printf_i+0x20a>
1000ff86:	2500      	movs	r5, #0
1000ff88:	f104 0619 	add.w	r6, r4, #25
1000ff8c:	e7f5      	b.n	1000ff7a <_printf_i+0x226>
1000ff8e:	bf00      	nop
1000ff90:	1001ad46 	.word	0x1001ad46
1000ff94:	1001ad57 	.word	0x1001ad57

1000ff98 <std>:
1000ff98:	2300      	movs	r3, #0
1000ff9a:	b510      	push	{r4, lr}
1000ff9c:	4604      	mov	r4, r0
1000ff9e:	e9c0 3300 	strd	r3, r3, [r0]
1000ffa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
1000ffa6:	6083      	str	r3, [r0, #8]
1000ffa8:	8181      	strh	r1, [r0, #12]
1000ffaa:	6643      	str	r3, [r0, #100]	; 0x64
1000ffac:	81c2      	strh	r2, [r0, #14]
1000ffae:	6183      	str	r3, [r0, #24]
1000ffb0:	4619      	mov	r1, r3
1000ffb2:	2208      	movs	r2, #8
1000ffb4:	305c      	adds	r0, #92	; 0x5c
1000ffb6:	f000 f926 	bl	10010206 <memset>
1000ffba:	4b0d      	ldr	r3, [pc, #52]	; (1000fff0 <std+0x58>)
1000ffbc:	6263      	str	r3, [r4, #36]	; 0x24
1000ffbe:	4b0d      	ldr	r3, [pc, #52]	; (1000fff4 <std+0x5c>)
1000ffc0:	62a3      	str	r3, [r4, #40]	; 0x28
1000ffc2:	4b0d      	ldr	r3, [pc, #52]	; (1000fff8 <std+0x60>)
1000ffc4:	62e3      	str	r3, [r4, #44]	; 0x2c
1000ffc6:	4b0d      	ldr	r3, [pc, #52]	; (1000fffc <std+0x64>)
1000ffc8:	6323      	str	r3, [r4, #48]	; 0x30
1000ffca:	4b0d      	ldr	r3, [pc, #52]	; (10010000 <std+0x68>)
1000ffcc:	6224      	str	r4, [r4, #32]
1000ffce:	429c      	cmp	r4, r3
1000ffd0:	d006      	beq.n	1000ffe0 <std+0x48>
1000ffd2:	f103 0268 	add.w	r2, r3, #104	; 0x68
1000ffd6:	4294      	cmp	r4, r2
1000ffd8:	d002      	beq.n	1000ffe0 <std+0x48>
1000ffda:	33d0      	adds	r3, #208	; 0xd0
1000ffdc:	429c      	cmp	r4, r3
1000ffde:	d105      	bne.n	1000ffec <std+0x54>
1000ffe0:	f104 0058 	add.w	r0, r4, #88	; 0x58
1000ffe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000ffe8:	f000 b9be 	b.w	10010368 <__retarget_lock_init_recursive>
1000ffec:	bd10      	pop	{r4, pc}
1000ffee:	bf00      	nop
1000fff0:	10010181 	.word	0x10010181
1000fff4:	100101a3 	.word	0x100101a3
1000fff8:	100101db 	.word	0x100101db
1000fffc:	100101ff 	.word	0x100101ff
10010000:	10029cdc 	.word	0x10029cdc

10010004 <stdio_exit_handler>:
10010004:	4a02      	ldr	r2, [pc, #8]	; (10010010 <stdio_exit_handler+0xc>)
10010006:	4903      	ldr	r1, [pc, #12]	; (10010014 <stdio_exit_handler+0x10>)
10010008:	4803      	ldr	r0, [pc, #12]	; (10010018 <stdio_exit_handler+0x14>)
1001000a:	f000 b87b 	b.w	10010104 <_fwalk_sglue>
1001000e:	bf00      	nop
10010010:	10020b78 	.word	0x10020b78
10010014:	10011e71 	.word	0x10011e71
10010018:	10020b84 	.word	0x10020b84

1001001c <cleanup_stdio>:
1001001c:	6841      	ldr	r1, [r0, #4]
1001001e:	4b0c      	ldr	r3, [pc, #48]	; (10010050 <cleanup_stdio+0x34>)
10010020:	4299      	cmp	r1, r3
10010022:	b510      	push	{r4, lr}
10010024:	4604      	mov	r4, r0
10010026:	d001      	beq.n	1001002c <cleanup_stdio+0x10>
10010028:	f001 ff22 	bl	10011e70 <_fflush_r>
1001002c:	68a1      	ldr	r1, [r4, #8]
1001002e:	4b09      	ldr	r3, [pc, #36]	; (10010054 <cleanup_stdio+0x38>)
10010030:	4299      	cmp	r1, r3
10010032:	d002      	beq.n	1001003a <cleanup_stdio+0x1e>
10010034:	4620      	mov	r0, r4
10010036:	f001 ff1b 	bl	10011e70 <_fflush_r>
1001003a:	68e1      	ldr	r1, [r4, #12]
1001003c:	4b06      	ldr	r3, [pc, #24]	; (10010058 <cleanup_stdio+0x3c>)
1001003e:	4299      	cmp	r1, r3
10010040:	d004      	beq.n	1001004c <cleanup_stdio+0x30>
10010042:	4620      	mov	r0, r4
10010044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10010048:	f001 bf12 	b.w	10011e70 <_fflush_r>
1001004c:	bd10      	pop	{r4, pc}
1001004e:	bf00      	nop
10010050:	10029cdc 	.word	0x10029cdc
10010054:	10029d44 	.word	0x10029d44
10010058:	10029dac 	.word	0x10029dac

1001005c <global_stdio_init.part.0>:
1001005c:	b510      	push	{r4, lr}
1001005e:	4b0b      	ldr	r3, [pc, #44]	; (1001008c <global_stdio_init.part.0+0x30>)
10010060:	4c0b      	ldr	r4, [pc, #44]	; (10010090 <global_stdio_init.part.0+0x34>)
10010062:	4a0c      	ldr	r2, [pc, #48]	; (10010094 <global_stdio_init.part.0+0x38>)
10010064:	601a      	str	r2, [r3, #0]
10010066:	4620      	mov	r0, r4
10010068:	2200      	movs	r2, #0
1001006a:	2104      	movs	r1, #4
1001006c:	f7ff ff94 	bl	1000ff98 <std>
10010070:	f104 0068 	add.w	r0, r4, #104	; 0x68
10010074:	2201      	movs	r2, #1
10010076:	2109      	movs	r1, #9
10010078:	f7ff ff8e 	bl	1000ff98 <std>
1001007c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
10010080:	2202      	movs	r2, #2
10010082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10010086:	2112      	movs	r1, #18
10010088:	f7ff bf86 	b.w	1000ff98 <std>
1001008c:	10029e14 	.word	0x10029e14
10010090:	10029cdc 	.word	0x10029cdc
10010094:	10010005 	.word	0x10010005

10010098 <__sfp_lock_acquire>:
10010098:	4801      	ldr	r0, [pc, #4]	; (100100a0 <__sfp_lock_acquire+0x8>)
1001009a:	f000 b966 	b.w	1001036a <__retarget_lock_acquire_recursive>
1001009e:	bf00      	nop
100100a0:	10029e1d 	.word	0x10029e1d

100100a4 <__sfp_lock_release>:
100100a4:	4801      	ldr	r0, [pc, #4]	; (100100ac <__sfp_lock_release+0x8>)
100100a6:	f000 b961 	b.w	1001036c <__retarget_lock_release_recursive>
100100aa:	bf00      	nop
100100ac:	10029e1d 	.word	0x10029e1d

100100b0 <__sinit>:
100100b0:	b510      	push	{r4, lr}
100100b2:	4604      	mov	r4, r0
100100b4:	f7ff fff0 	bl	10010098 <__sfp_lock_acquire>
100100b8:	6a23      	ldr	r3, [r4, #32]
100100ba:	b11b      	cbz	r3, 100100c4 <__sinit+0x14>
100100bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
100100c0:	f7ff bff0 	b.w	100100a4 <__sfp_lock_release>
100100c4:	4b04      	ldr	r3, [pc, #16]	; (100100d8 <__sinit+0x28>)
100100c6:	6223      	str	r3, [r4, #32]
100100c8:	4b04      	ldr	r3, [pc, #16]	; (100100dc <__sinit+0x2c>)
100100ca:	681b      	ldr	r3, [r3, #0]
100100cc:	2b00      	cmp	r3, #0
100100ce:	d1f5      	bne.n	100100bc <__sinit+0xc>
100100d0:	f7ff ffc4 	bl	1001005c <global_stdio_init.part.0>
100100d4:	e7f2      	b.n	100100bc <__sinit+0xc>
100100d6:	bf00      	nop
100100d8:	1001001d 	.word	0x1001001d
100100dc:	10029e14 	.word	0x10029e14

100100e0 <fiprintf>:
100100e0:	b40e      	push	{r1, r2, r3}
100100e2:	b503      	push	{r0, r1, lr}
100100e4:	4601      	mov	r1, r0
100100e6:	ab03      	add	r3, sp, #12
100100e8:	4805      	ldr	r0, [pc, #20]	; (10010100 <fiprintf+0x20>)
100100ea:	f853 2b04 	ldr.w	r2, [r3], #4
100100ee:	6800      	ldr	r0, [r0, #0]
100100f0:	9301      	str	r3, [sp, #4]
100100f2:	f001 fd1d 	bl	10011b30 <_vfiprintf_r>
100100f6:	b002      	add	sp, #8
100100f8:	f85d eb04 	ldr.w	lr, [sp], #4
100100fc:	b003      	add	sp, #12
100100fe:	4770      	bx	lr
10010100:	10020bd0 	.word	0x10020bd0

10010104 <_fwalk_sglue>:
10010104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10010108:	4607      	mov	r7, r0
1001010a:	4688      	mov	r8, r1
1001010c:	4614      	mov	r4, r2
1001010e:	2600      	movs	r6, #0
10010110:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
10010114:	f1b9 0901 	subs.w	r9, r9, #1
10010118:	d505      	bpl.n	10010126 <_fwalk_sglue+0x22>
1001011a:	6824      	ldr	r4, [r4, #0]
1001011c:	2c00      	cmp	r4, #0
1001011e:	d1f7      	bne.n	10010110 <_fwalk_sglue+0xc>
10010120:	4630      	mov	r0, r6
10010122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
10010126:	89ab      	ldrh	r3, [r5, #12]
10010128:	2b01      	cmp	r3, #1
1001012a:	d907      	bls.n	1001013c <_fwalk_sglue+0x38>
1001012c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
10010130:	3301      	adds	r3, #1
10010132:	d003      	beq.n	1001013c <_fwalk_sglue+0x38>
10010134:	4629      	mov	r1, r5
10010136:	4638      	mov	r0, r7
10010138:	47c0      	blx	r8
1001013a:	4306      	orrs	r6, r0
1001013c:	3568      	adds	r5, #104	; 0x68
1001013e:	e7e9      	b.n	10010114 <_fwalk_sglue+0x10>

10010140 <siprintf>:
10010140:	b40e      	push	{r1, r2, r3}
10010142:	b500      	push	{lr}
10010144:	b09c      	sub	sp, #112	; 0x70
10010146:	ab1d      	add	r3, sp, #116	; 0x74
10010148:	9002      	str	r0, [sp, #8]
1001014a:	9006      	str	r0, [sp, #24]
1001014c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
10010150:	4809      	ldr	r0, [pc, #36]	; (10010178 <siprintf+0x38>)
10010152:	9107      	str	r1, [sp, #28]
10010154:	9104      	str	r1, [sp, #16]
10010156:	4909      	ldr	r1, [pc, #36]	; (1001017c <siprintf+0x3c>)
10010158:	f853 2b04 	ldr.w	r2, [r3], #4
1001015c:	9105      	str	r1, [sp, #20]
1001015e:	6800      	ldr	r0, [r0, #0]
10010160:	9301      	str	r3, [sp, #4]
10010162:	a902      	add	r1, sp, #8
10010164:	f001 fbbc 	bl	100118e0 <_svfiprintf_r>
10010168:	9b02      	ldr	r3, [sp, #8]
1001016a:	2200      	movs	r2, #0
1001016c:	701a      	strb	r2, [r3, #0]
1001016e:	b01c      	add	sp, #112	; 0x70
10010170:	f85d eb04 	ldr.w	lr, [sp], #4
10010174:	b003      	add	sp, #12
10010176:	4770      	bx	lr
10010178:	10020bd0 	.word	0x10020bd0
1001017c:	ffff0208 	.word	0xffff0208

10010180 <__sread>:
10010180:	b510      	push	{r4, lr}
10010182:	460c      	mov	r4, r1
10010184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10010188:	f000 f890 	bl	100102ac <_read_r>
1001018c:	2800      	cmp	r0, #0
1001018e:	bfab      	itete	ge
10010190:	6d63      	ldrge	r3, [r4, #84]	; 0x54
10010192:	89a3      	ldrhlt	r3, [r4, #12]
10010194:	181b      	addge	r3, r3, r0
10010196:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1001019a:	bfac      	ite	ge
1001019c:	6563      	strge	r3, [r4, #84]	; 0x54
1001019e:	81a3      	strhlt	r3, [r4, #12]
100101a0:	bd10      	pop	{r4, pc}

100101a2 <__swrite>:
100101a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
100101a6:	461f      	mov	r7, r3
100101a8:	898b      	ldrh	r3, [r1, #12]
100101aa:	05db      	lsls	r3, r3, #23
100101ac:	4605      	mov	r5, r0
100101ae:	460c      	mov	r4, r1
100101b0:	4616      	mov	r6, r2
100101b2:	d505      	bpl.n	100101c0 <__swrite+0x1e>
100101b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
100101b8:	2302      	movs	r3, #2
100101ba:	2200      	movs	r2, #0
100101bc:	f000 f864 	bl	10010288 <_lseek_r>
100101c0:	89a3      	ldrh	r3, [r4, #12]
100101c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
100101c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
100101ca:	81a3      	strh	r3, [r4, #12]
100101cc:	4632      	mov	r2, r6
100101ce:	463b      	mov	r3, r7
100101d0:	4628      	mov	r0, r5
100101d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
100101d6:	f000 b88b 	b.w	100102f0 <_write_r>

100101da <__sseek>:
100101da:	b510      	push	{r4, lr}
100101dc:	460c      	mov	r4, r1
100101de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
100101e2:	f000 f851 	bl	10010288 <_lseek_r>
100101e6:	1c43      	adds	r3, r0, #1
100101e8:	89a3      	ldrh	r3, [r4, #12]
100101ea:	bf15      	itete	ne
100101ec:	6560      	strne	r0, [r4, #84]	; 0x54
100101ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
100101f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
100101f6:	81a3      	strheq	r3, [r4, #12]
100101f8:	bf18      	it	ne
100101fa:	81a3      	strhne	r3, [r4, #12]
100101fc:	bd10      	pop	{r4, pc}

100101fe <__sclose>:
100101fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10010202:	f000 b831 	b.w	10010268 <_close_r>

10010206 <memset>:
10010206:	4402      	add	r2, r0
10010208:	4603      	mov	r3, r0
1001020a:	4293      	cmp	r3, r2
1001020c:	d100      	bne.n	10010210 <memset+0xa>
1001020e:	4770      	bx	lr
10010210:	f803 1b01 	strb.w	r1, [r3], #1
10010214:	e7f9      	b.n	1001020a <memset+0x4>

10010216 <strncmp>:
10010216:	b510      	push	{r4, lr}
10010218:	b16a      	cbz	r2, 10010236 <strncmp+0x20>
1001021a:	3901      	subs	r1, #1
1001021c:	1884      	adds	r4, r0, r2
1001021e:	f810 2b01 	ldrb.w	r2, [r0], #1
10010222:	f811 3f01 	ldrb.w	r3, [r1, #1]!
10010226:	429a      	cmp	r2, r3
10010228:	d103      	bne.n	10010232 <strncmp+0x1c>
1001022a:	42a0      	cmp	r0, r4
1001022c:	d001      	beq.n	10010232 <strncmp+0x1c>
1001022e:	2a00      	cmp	r2, #0
10010230:	d1f5      	bne.n	1001021e <strncmp+0x8>
10010232:	1ad0      	subs	r0, r2, r3
10010234:	bd10      	pop	{r4, pc}
10010236:	4610      	mov	r0, r2
10010238:	e7fc      	b.n	10010234 <strncmp+0x1e>

1001023a <strncpy>:
1001023a:	b510      	push	{r4, lr}
1001023c:	3901      	subs	r1, #1
1001023e:	4603      	mov	r3, r0
10010240:	b132      	cbz	r2, 10010250 <strncpy+0x16>
10010242:	f811 4f01 	ldrb.w	r4, [r1, #1]!
10010246:	f803 4b01 	strb.w	r4, [r3], #1
1001024a:	3a01      	subs	r2, #1
1001024c:	2c00      	cmp	r4, #0
1001024e:	d1f7      	bne.n	10010240 <strncpy+0x6>
10010250:	441a      	add	r2, r3
10010252:	2100      	movs	r1, #0
10010254:	4293      	cmp	r3, r2
10010256:	d100      	bne.n	1001025a <strncpy+0x20>
10010258:	bd10      	pop	{r4, pc}
1001025a:	f803 1b01 	strb.w	r1, [r3], #1
1001025e:	e7f9      	b.n	10010254 <strncpy+0x1a>

10010260 <_localeconv_r>:
10010260:	4800      	ldr	r0, [pc, #0]	; (10010264 <_localeconv_r+0x4>)
10010262:	4770      	bx	lr
10010264:	10020cc4 	.word	0x10020cc4

10010268 <_close_r>:
10010268:	b538      	push	{r3, r4, r5, lr}
1001026a:	4d06      	ldr	r5, [pc, #24]	; (10010284 <_close_r+0x1c>)
1001026c:	2300      	movs	r3, #0
1001026e:	4604      	mov	r4, r0
10010270:	4608      	mov	r0, r1
10010272:	602b      	str	r3, [r5, #0]
10010274:	f002 f906 	bl	10012484 <_close>
10010278:	1c43      	adds	r3, r0, #1
1001027a:	d102      	bne.n	10010282 <_close_r+0x1a>
1001027c:	682b      	ldr	r3, [r5, #0]
1001027e:	b103      	cbz	r3, 10010282 <_close_r+0x1a>
10010280:	6023      	str	r3, [r4, #0]
10010282:	bd38      	pop	{r3, r4, r5, pc}
10010284:	10029e18 	.word	0x10029e18

10010288 <_lseek_r>:
10010288:	b538      	push	{r3, r4, r5, lr}
1001028a:	4d07      	ldr	r5, [pc, #28]	; (100102a8 <_lseek_r+0x20>)
1001028c:	4604      	mov	r4, r0
1001028e:	4608      	mov	r0, r1
10010290:	4611      	mov	r1, r2
10010292:	2200      	movs	r2, #0
10010294:	602a      	str	r2, [r5, #0]
10010296:	461a      	mov	r2, r3
10010298:	f002 f91c 	bl	100124d4 <_lseek>
1001029c:	1c43      	adds	r3, r0, #1
1001029e:	d102      	bne.n	100102a6 <_lseek_r+0x1e>
100102a0:	682b      	ldr	r3, [r5, #0]
100102a2:	b103      	cbz	r3, 100102a6 <_lseek_r+0x1e>
100102a4:	6023      	str	r3, [r4, #0]
100102a6:	bd38      	pop	{r3, r4, r5, pc}
100102a8:	10029e18 	.word	0x10029e18

100102ac <_read_r>:
100102ac:	b538      	push	{r3, r4, r5, lr}
100102ae:	4d07      	ldr	r5, [pc, #28]	; (100102cc <_read_r+0x20>)
100102b0:	4604      	mov	r4, r0
100102b2:	4608      	mov	r0, r1
100102b4:	4611      	mov	r1, r2
100102b6:	2200      	movs	r2, #0
100102b8:	602a      	str	r2, [r5, #0]
100102ba:	461a      	mov	r2, r3
100102bc:	f002 f912 	bl	100124e4 <_read>
100102c0:	1c43      	adds	r3, r0, #1
100102c2:	d102      	bne.n	100102ca <_read_r+0x1e>
100102c4:	682b      	ldr	r3, [r5, #0]
100102c6:	b103      	cbz	r3, 100102ca <_read_r+0x1e>
100102c8:	6023      	str	r3, [r4, #0]
100102ca:	bd38      	pop	{r3, r4, r5, pc}
100102cc:	10029e18 	.word	0x10029e18

100102d0 <_sbrk_r>:
100102d0:	b538      	push	{r3, r4, r5, lr}
100102d2:	4d06      	ldr	r5, [pc, #24]	; (100102ec <_sbrk_r+0x1c>)
100102d4:	2300      	movs	r3, #0
100102d6:	4604      	mov	r4, r0
100102d8:	4608      	mov	r0, r1
100102da:	602b      	str	r3, [r5, #0]
100102dc:	f7f1 fa58 	bl	10001790 <_sbrk>
100102e0:	1c43      	adds	r3, r0, #1
100102e2:	d102      	bne.n	100102ea <_sbrk_r+0x1a>
100102e4:	682b      	ldr	r3, [r5, #0]
100102e6:	b103      	cbz	r3, 100102ea <_sbrk_r+0x1a>
100102e8:	6023      	str	r3, [r4, #0]
100102ea:	bd38      	pop	{r3, r4, r5, pc}
100102ec:	10029e18 	.word	0x10029e18

100102f0 <_write_r>:
100102f0:	b538      	push	{r3, r4, r5, lr}
100102f2:	4d07      	ldr	r5, [pc, #28]	; (10010310 <_write_r+0x20>)
100102f4:	4604      	mov	r4, r0
100102f6:	4608      	mov	r0, r1
100102f8:	4611      	mov	r1, r2
100102fa:	2200      	movs	r2, #0
100102fc:	602a      	str	r2, [r5, #0]
100102fe:	461a      	mov	r2, r3
10010300:	f002 f8f8 	bl	100124f4 <_write>
10010304:	1c43      	adds	r3, r0, #1
10010306:	d102      	bne.n	1001030e <_write_r+0x1e>
10010308:	682b      	ldr	r3, [r5, #0]
1001030a:	b103      	cbz	r3, 1001030e <_write_r+0x1e>
1001030c:	6023      	str	r3, [r4, #0]
1001030e:	bd38      	pop	{r3, r4, r5, pc}
10010310:	10029e18 	.word	0x10029e18

10010314 <__errno>:
10010314:	4b01      	ldr	r3, [pc, #4]	; (1001031c <__errno+0x8>)
10010316:	6818      	ldr	r0, [r3, #0]
10010318:	4770      	bx	lr
1001031a:	bf00      	nop
1001031c:	10020bd0 	.word	0x10020bd0

10010320 <__libc_init_array>:
10010320:	b570      	push	{r4, r5, r6, lr}
10010322:	4d0d      	ldr	r5, [pc, #52]	; (10010358 <__libc_init_array+0x38>)
10010324:	4c0d      	ldr	r4, [pc, #52]	; (1001035c <__libc_init_array+0x3c>)
10010326:	1b64      	subs	r4, r4, r5
10010328:	10a4      	asrs	r4, r4, #2
1001032a:	2600      	movs	r6, #0
1001032c:	42a6      	cmp	r6, r4
1001032e:	d109      	bne.n	10010344 <__libc_init_array+0x24>
10010330:	4d0b      	ldr	r5, [pc, #44]	; (10010360 <__libc_init_array+0x40>)
10010332:	4c0c      	ldr	r4, [pc, #48]	; (10010364 <__libc_init_array+0x44>)
10010334:	f002 f8e8 	bl	10012508 <_init>
10010338:	1b64      	subs	r4, r4, r5
1001033a:	10a4      	asrs	r4, r4, #2
1001033c:	2600      	movs	r6, #0
1001033e:	42a6      	cmp	r6, r4
10010340:	d105      	bne.n	1001034e <__libc_init_array+0x2e>
10010342:	bd70      	pop	{r4, r5, r6, pc}
10010344:	f855 3b04 	ldr.w	r3, [r5], #4
10010348:	4798      	blx	r3
1001034a:	3601      	adds	r6, #1
1001034c:	e7ee      	b.n	1001032c <__libc_init_array+0xc>
1001034e:	f855 3b04 	ldr.w	r3, [r5], #4
10010352:	4798      	blx	r3
10010354:	3601      	adds	r6, #1
10010356:	e7f2      	b.n	1001033e <__libc_init_array+0x1e>
10010358:	1001b080 	.word	0x1001b080
1001035c:	1001b080 	.word	0x1001b080
10010360:	1001b080 	.word	0x1001b080
10010364:	1001b084 	.word	0x1001b084

10010368 <__retarget_lock_init_recursive>:
10010368:	4770      	bx	lr

1001036a <__retarget_lock_acquire_recursive>:
1001036a:	4770      	bx	lr

1001036c <__retarget_lock_release_recursive>:
1001036c:	4770      	bx	lr

1001036e <memcpy>:
1001036e:	440a      	add	r2, r1
10010370:	4291      	cmp	r1, r2
10010372:	f100 33ff 	add.w	r3, r0, #4294967295
10010376:	d100      	bne.n	1001037a <memcpy+0xc>
10010378:	4770      	bx	lr
1001037a:	b510      	push	{r4, lr}
1001037c:	f811 4b01 	ldrb.w	r4, [r1], #1
10010380:	f803 4f01 	strb.w	r4, [r3, #1]!
10010384:	4291      	cmp	r1, r2
10010386:	d1f9      	bne.n	1001037c <memcpy+0xe>
10010388:	bd10      	pop	{r4, pc}

1001038a <abort>:
1001038a:	b508      	push	{r3, lr}
1001038c:	2006      	movs	r0, #6
1001038e:	f001 fe6f 	bl	10012070 <raise>
10010392:	2001      	movs	r0, #1
10010394:	f002 f8b6 	bl	10012504 <_exit>

10010398 <quorem>:
10010398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1001039c:	6903      	ldr	r3, [r0, #16]
1001039e:	690c      	ldr	r4, [r1, #16]
100103a0:	42a3      	cmp	r3, r4
100103a2:	4607      	mov	r7, r0
100103a4:	db7e      	blt.n	100104a4 <quorem+0x10c>
100103a6:	3c01      	subs	r4, #1
100103a8:	f101 0814 	add.w	r8, r1, #20
100103ac:	f100 0514 	add.w	r5, r0, #20
100103b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
100103b4:	9301      	str	r3, [sp, #4]
100103b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
100103ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
100103be:	3301      	adds	r3, #1
100103c0:	429a      	cmp	r2, r3
100103c2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
100103c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
100103ca:	fbb2 f6f3 	udiv	r6, r2, r3
100103ce:	d331      	bcc.n	10010434 <quorem+0x9c>
100103d0:	f04f 0e00 	mov.w	lr, #0
100103d4:	4640      	mov	r0, r8
100103d6:	46ac      	mov	ip, r5
100103d8:	46f2      	mov	sl, lr
100103da:	f850 2b04 	ldr.w	r2, [r0], #4
100103de:	b293      	uxth	r3, r2
100103e0:	fb06 e303 	mla	r3, r6, r3, lr
100103e4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
100103e8:	0c1a      	lsrs	r2, r3, #16
100103ea:	b29b      	uxth	r3, r3
100103ec:	ebaa 0303 	sub.w	r3, sl, r3
100103f0:	f8dc a000 	ldr.w	sl, [ip]
100103f4:	fa13 f38a 	uxtah	r3, r3, sl
100103f8:	fb06 220e 	mla	r2, r6, lr, r2
100103fc:	9300      	str	r3, [sp, #0]
100103fe:	9b00      	ldr	r3, [sp, #0]
10010400:	ea4f 4e12 	mov.w	lr, r2, lsr #16
10010404:	b292      	uxth	r2, r2
10010406:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
1001040a:	eb02 4223 	add.w	r2, r2, r3, asr #16
1001040e:	f8bd 3000 	ldrh.w	r3, [sp]
10010412:	4581      	cmp	r9, r0
10010414:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
10010418:	f84c 3b04 	str.w	r3, [ip], #4
1001041c:	ea4f 4a22 	mov.w	sl, r2, asr #16
10010420:	d2db      	bcs.n	100103da <quorem+0x42>
10010422:	f855 300b 	ldr.w	r3, [r5, fp]
10010426:	b92b      	cbnz	r3, 10010434 <quorem+0x9c>
10010428:	9b01      	ldr	r3, [sp, #4]
1001042a:	3b04      	subs	r3, #4
1001042c:	429d      	cmp	r5, r3
1001042e:	461a      	mov	r2, r3
10010430:	d32c      	bcc.n	1001048c <quorem+0xf4>
10010432:	613c      	str	r4, [r7, #16]
10010434:	4638      	mov	r0, r7
10010436:	f001 f8f1 	bl	1001161c <__mcmp>
1001043a:	2800      	cmp	r0, #0
1001043c:	db22      	blt.n	10010484 <quorem+0xec>
1001043e:	3601      	adds	r6, #1
10010440:	4629      	mov	r1, r5
10010442:	2000      	movs	r0, #0
10010444:	f858 2b04 	ldr.w	r2, [r8], #4
10010448:	f8d1 c000 	ldr.w	ip, [r1]
1001044c:	b293      	uxth	r3, r2
1001044e:	1ac3      	subs	r3, r0, r3
10010450:	0c12      	lsrs	r2, r2, #16
10010452:	fa13 f38c 	uxtah	r3, r3, ip
10010456:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
1001045a:	eb02 4223 	add.w	r2, r2, r3, asr #16
1001045e:	b29b      	uxth	r3, r3
10010460:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
10010464:	45c1      	cmp	r9, r8
10010466:	f841 3b04 	str.w	r3, [r1], #4
1001046a:	ea4f 4022 	mov.w	r0, r2, asr #16
1001046e:	d2e9      	bcs.n	10010444 <quorem+0xac>
10010470:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
10010474:	eb05 0384 	add.w	r3, r5, r4, lsl #2
10010478:	b922      	cbnz	r2, 10010484 <quorem+0xec>
1001047a:	3b04      	subs	r3, #4
1001047c:	429d      	cmp	r5, r3
1001047e:	461a      	mov	r2, r3
10010480:	d30a      	bcc.n	10010498 <quorem+0x100>
10010482:	613c      	str	r4, [r7, #16]
10010484:	4630      	mov	r0, r6
10010486:	b003      	add	sp, #12
10010488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001048c:	6812      	ldr	r2, [r2, #0]
1001048e:	3b04      	subs	r3, #4
10010490:	2a00      	cmp	r2, #0
10010492:	d1ce      	bne.n	10010432 <quorem+0x9a>
10010494:	3c01      	subs	r4, #1
10010496:	e7c9      	b.n	1001042c <quorem+0x94>
10010498:	6812      	ldr	r2, [r2, #0]
1001049a:	3b04      	subs	r3, #4
1001049c:	2a00      	cmp	r2, #0
1001049e:	d1f0      	bne.n	10010482 <quorem+0xea>
100104a0:	3c01      	subs	r4, #1
100104a2:	e7eb      	b.n	1001047c <quorem+0xe4>
100104a4:	2000      	movs	r0, #0
100104a6:	e7ee      	b.n	10010486 <quorem+0xee>

100104a8 <_dtoa_r>:
100104a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
100104ac:	ed2d 8b04 	vpush	{d8-d9}
100104b0:	69c5      	ldr	r5, [r0, #28]
100104b2:	b093      	sub	sp, #76	; 0x4c
100104b4:	ed8d 0b02 	vstr	d0, [sp, #8]
100104b8:	ec57 6b10 	vmov	r6, r7, d0
100104bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
100104c0:	9107      	str	r1, [sp, #28]
100104c2:	4604      	mov	r4, r0
100104c4:	920a      	str	r2, [sp, #40]	; 0x28
100104c6:	930d      	str	r3, [sp, #52]	; 0x34
100104c8:	b975      	cbnz	r5, 100104e8 <_dtoa_r+0x40>
100104ca:	2010      	movs	r0, #16
100104cc:	f7ff f812 	bl	1000f4f4 <malloc>
100104d0:	4602      	mov	r2, r0
100104d2:	61e0      	str	r0, [r4, #28]
100104d4:	b920      	cbnz	r0, 100104e0 <_dtoa_r+0x38>
100104d6:	4bae      	ldr	r3, [pc, #696]	; (10010790 <_dtoa_r+0x2e8>)
100104d8:	21ef      	movs	r1, #239	; 0xef
100104da:	48ae      	ldr	r0, [pc, #696]	; (10010794 <_dtoa_r+0x2ec>)
100104dc:	f7fe ffec 	bl	1000f4b8 <__assert_func>
100104e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
100104e4:	6005      	str	r5, [r0, #0]
100104e6:	60c5      	str	r5, [r0, #12]
100104e8:	69e3      	ldr	r3, [r4, #28]
100104ea:	6819      	ldr	r1, [r3, #0]
100104ec:	b151      	cbz	r1, 10010504 <_dtoa_r+0x5c>
100104ee:	685a      	ldr	r2, [r3, #4]
100104f0:	604a      	str	r2, [r1, #4]
100104f2:	2301      	movs	r3, #1
100104f4:	4093      	lsls	r3, r2
100104f6:	608b      	str	r3, [r1, #8]
100104f8:	4620      	mov	r0, r4
100104fa:	f000 fe53 	bl	100111a4 <_Bfree>
100104fe:	69e3      	ldr	r3, [r4, #28]
10010500:	2200      	movs	r2, #0
10010502:	601a      	str	r2, [r3, #0]
10010504:	1e3b      	subs	r3, r7, #0
10010506:	bfbb      	ittet	lt
10010508:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
1001050c:	9303      	strlt	r3, [sp, #12]
1001050e:	2300      	movge	r3, #0
10010510:	2201      	movlt	r2, #1
10010512:	bfac      	ite	ge
10010514:	f8c8 3000 	strge.w	r3, [r8]
10010518:	f8c8 2000 	strlt.w	r2, [r8]
1001051c:	4b9e      	ldr	r3, [pc, #632]	; (10010798 <_dtoa_r+0x2f0>)
1001051e:	f8dd 800c 	ldr.w	r8, [sp, #12]
10010522:	ea33 0308 	bics.w	r3, r3, r8
10010526:	d11b      	bne.n	10010560 <_dtoa_r+0xb8>
10010528:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1001052a:	f242 730f 	movw	r3, #9999	; 0x270f
1001052e:	6013      	str	r3, [r2, #0]
10010530:	f3c8 0313 	ubfx	r3, r8, #0, #20
10010534:	4333      	orrs	r3, r6
10010536:	f000 8593 	beq.w	10011060 <_dtoa_r+0xbb8>
1001053a:	9b21      	ldr	r3, [sp, #132]	; 0x84
1001053c:	b963      	cbnz	r3, 10010558 <_dtoa_r+0xb0>
1001053e:	4b97      	ldr	r3, [pc, #604]	; (1001079c <_dtoa_r+0x2f4>)
10010540:	e027      	b.n	10010592 <_dtoa_r+0xea>
10010542:	4b97      	ldr	r3, [pc, #604]	; (100107a0 <_dtoa_r+0x2f8>)
10010544:	9300      	str	r3, [sp, #0]
10010546:	3308      	adds	r3, #8
10010548:	9a21      	ldr	r2, [sp, #132]	; 0x84
1001054a:	6013      	str	r3, [r2, #0]
1001054c:	9800      	ldr	r0, [sp, #0]
1001054e:	b013      	add	sp, #76	; 0x4c
10010550:	ecbd 8b04 	vpop	{d8-d9}
10010554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10010558:	4b90      	ldr	r3, [pc, #576]	; (1001079c <_dtoa_r+0x2f4>)
1001055a:	9300      	str	r3, [sp, #0]
1001055c:	3303      	adds	r3, #3
1001055e:	e7f3      	b.n	10010548 <_dtoa_r+0xa0>
10010560:	ed9d 7b02 	vldr	d7, [sp, #8]
10010564:	2200      	movs	r2, #0
10010566:	ec51 0b17 	vmov	r0, r1, d7
1001056a:	eeb0 8a47 	vmov.f32	s16, s14
1001056e:	eef0 8a67 	vmov.f32	s17, s15
10010572:	2300      	movs	r3, #0
10010574:	f7f0 f9f0 	bl	10000958 <__aeabi_dcmpeq>
10010578:	4681      	mov	r9, r0
1001057a:	b160      	cbz	r0, 10010596 <_dtoa_r+0xee>
1001057c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1001057e:	2301      	movs	r3, #1
10010580:	6013      	str	r3, [r2, #0]
10010582:	9b21      	ldr	r3, [sp, #132]	; 0x84
10010584:	2b00      	cmp	r3, #0
10010586:	f000 8568 	beq.w	1001105a <_dtoa_r+0xbb2>
1001058a:	4b86      	ldr	r3, [pc, #536]	; (100107a4 <_dtoa_r+0x2fc>)
1001058c:	9a21      	ldr	r2, [sp, #132]	; 0x84
1001058e:	6013      	str	r3, [r2, #0]
10010590:	3b01      	subs	r3, #1
10010592:	9300      	str	r3, [sp, #0]
10010594:	e7da      	b.n	1001054c <_dtoa_r+0xa4>
10010596:	aa10      	add	r2, sp, #64	; 0x40
10010598:	a911      	add	r1, sp, #68	; 0x44
1001059a:	4620      	mov	r0, r4
1001059c:	eeb0 0a48 	vmov.f32	s0, s16
100105a0:	eef0 0a68 	vmov.f32	s1, s17
100105a4:	f001 f8e0 	bl	10011768 <__d2b>
100105a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
100105ac:	4682      	mov	sl, r0
100105ae:	2d00      	cmp	r5, #0
100105b0:	d07f      	beq.n	100106b2 <_dtoa_r+0x20a>
100105b2:	ee18 3a90 	vmov	r3, s17
100105b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
100105ba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
100105be:	ec51 0b18 	vmov	r0, r1, d8
100105c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
100105c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
100105ca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
100105ce:	4619      	mov	r1, r3
100105d0:	2200      	movs	r2, #0
100105d2:	4b75      	ldr	r3, [pc, #468]	; (100107a8 <_dtoa_r+0x300>)
100105d4:	f7ef fda0 	bl	10000118 <__aeabi_dsub>
100105d8:	a367      	add	r3, pc, #412	; (adr r3, 10010778 <_dtoa_r+0x2d0>)
100105da:	e9d3 2300 	ldrd	r2, r3, [r3]
100105de:	f7ef ff53 	bl	10000488 <__aeabi_dmul>
100105e2:	a367      	add	r3, pc, #412	; (adr r3, 10010780 <_dtoa_r+0x2d8>)
100105e4:	e9d3 2300 	ldrd	r2, r3, [r3]
100105e8:	f7ef fd98 	bl	1000011c <__adddf3>
100105ec:	4606      	mov	r6, r0
100105ee:	4628      	mov	r0, r5
100105f0:	460f      	mov	r7, r1
100105f2:	f7ef fedf 	bl	100003b4 <__aeabi_i2d>
100105f6:	a364      	add	r3, pc, #400	; (adr r3, 10010788 <_dtoa_r+0x2e0>)
100105f8:	e9d3 2300 	ldrd	r2, r3, [r3]
100105fc:	f7ef ff44 	bl	10000488 <__aeabi_dmul>
10010600:	4602      	mov	r2, r0
10010602:	460b      	mov	r3, r1
10010604:	4630      	mov	r0, r6
10010606:	4639      	mov	r1, r7
10010608:	f7ef fd88 	bl	1000011c <__adddf3>
1001060c:	4606      	mov	r6, r0
1001060e:	460f      	mov	r7, r1
10010610:	f7f0 f9ea 	bl	100009e8 <__aeabi_d2iz>
10010614:	2200      	movs	r2, #0
10010616:	4683      	mov	fp, r0
10010618:	2300      	movs	r3, #0
1001061a:	4630      	mov	r0, r6
1001061c:	4639      	mov	r1, r7
1001061e:	f7f0 f9a5 	bl	1000096c <__aeabi_dcmplt>
10010622:	b148      	cbz	r0, 10010638 <_dtoa_r+0x190>
10010624:	4658      	mov	r0, fp
10010626:	f7ef fec5 	bl	100003b4 <__aeabi_i2d>
1001062a:	4632      	mov	r2, r6
1001062c:	463b      	mov	r3, r7
1001062e:	f7f0 f993 	bl	10000958 <__aeabi_dcmpeq>
10010632:	b908      	cbnz	r0, 10010638 <_dtoa_r+0x190>
10010634:	f10b 3bff 	add.w	fp, fp, #4294967295
10010638:	f1bb 0f16 	cmp.w	fp, #22
1001063c:	d857      	bhi.n	100106ee <_dtoa_r+0x246>
1001063e:	4b5b      	ldr	r3, [pc, #364]	; (100107ac <_dtoa_r+0x304>)
10010640:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
10010644:	e9d3 2300 	ldrd	r2, r3, [r3]
10010648:	ec51 0b18 	vmov	r0, r1, d8
1001064c:	f7f0 f98e 	bl	1000096c <__aeabi_dcmplt>
10010650:	2800      	cmp	r0, #0
10010652:	d04e      	beq.n	100106f2 <_dtoa_r+0x24a>
10010654:	f10b 3bff 	add.w	fp, fp, #4294967295
10010658:	2300      	movs	r3, #0
1001065a:	930c      	str	r3, [sp, #48]	; 0x30
1001065c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1001065e:	1b5b      	subs	r3, r3, r5
10010660:	1e5a      	subs	r2, r3, #1
10010662:	bf45      	ittet	mi
10010664:	f1c3 0301 	rsbmi	r3, r3, #1
10010668:	9305      	strmi	r3, [sp, #20]
1001066a:	2300      	movpl	r3, #0
1001066c:	2300      	movmi	r3, #0
1001066e:	9206      	str	r2, [sp, #24]
10010670:	bf54      	ite	pl
10010672:	9305      	strpl	r3, [sp, #20]
10010674:	9306      	strmi	r3, [sp, #24]
10010676:	f1bb 0f00 	cmp.w	fp, #0
1001067a:	db3c      	blt.n	100106f6 <_dtoa_r+0x24e>
1001067c:	9b06      	ldr	r3, [sp, #24]
1001067e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
10010682:	445b      	add	r3, fp
10010684:	9306      	str	r3, [sp, #24]
10010686:	2300      	movs	r3, #0
10010688:	9308      	str	r3, [sp, #32]
1001068a:	9b07      	ldr	r3, [sp, #28]
1001068c:	2b09      	cmp	r3, #9
1001068e:	d868      	bhi.n	10010762 <_dtoa_r+0x2ba>
10010690:	2b05      	cmp	r3, #5
10010692:	bfc4      	itt	gt
10010694:	3b04      	subgt	r3, #4
10010696:	9307      	strgt	r3, [sp, #28]
10010698:	9b07      	ldr	r3, [sp, #28]
1001069a:	f1a3 0302 	sub.w	r3, r3, #2
1001069e:	bfcc      	ite	gt
100106a0:	2500      	movgt	r5, #0
100106a2:	2501      	movle	r5, #1
100106a4:	2b03      	cmp	r3, #3
100106a6:	f200 8085 	bhi.w	100107b4 <_dtoa_r+0x30c>
100106aa:	e8df f003 	tbb	[pc, r3]
100106ae:	3b2e      	.short	0x3b2e
100106b0:	5839      	.short	0x5839
100106b2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
100106b6:	441d      	add	r5, r3
100106b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
100106bc:	2b20      	cmp	r3, #32
100106be:	bfc1      	itttt	gt
100106c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
100106c4:	fa08 f803 	lslgt.w	r8, r8, r3
100106c8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
100106cc:	fa26 f303 	lsrgt.w	r3, r6, r3
100106d0:	bfd6      	itet	le
100106d2:	f1c3 0320 	rsble	r3, r3, #32
100106d6:	ea48 0003 	orrgt.w	r0, r8, r3
100106da:	fa06 f003 	lslle.w	r0, r6, r3
100106de:	f7ef fe59 	bl	10000394 <__aeabi_ui2d>
100106e2:	2201      	movs	r2, #1
100106e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
100106e8:	3d01      	subs	r5, #1
100106ea:	920e      	str	r2, [sp, #56]	; 0x38
100106ec:	e76f      	b.n	100105ce <_dtoa_r+0x126>
100106ee:	2301      	movs	r3, #1
100106f0:	e7b3      	b.n	1001065a <_dtoa_r+0x1b2>
100106f2:	900c      	str	r0, [sp, #48]	; 0x30
100106f4:	e7b2      	b.n	1001065c <_dtoa_r+0x1b4>
100106f6:	9b05      	ldr	r3, [sp, #20]
100106f8:	eba3 030b 	sub.w	r3, r3, fp
100106fc:	9305      	str	r3, [sp, #20]
100106fe:	f1cb 0300 	rsb	r3, fp, #0
10010702:	9308      	str	r3, [sp, #32]
10010704:	2300      	movs	r3, #0
10010706:	930b      	str	r3, [sp, #44]	; 0x2c
10010708:	e7bf      	b.n	1001068a <_dtoa_r+0x1e2>
1001070a:	2300      	movs	r3, #0
1001070c:	9309      	str	r3, [sp, #36]	; 0x24
1001070e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10010710:	2b00      	cmp	r3, #0
10010712:	dc52      	bgt.n	100107ba <_dtoa_r+0x312>
10010714:	2301      	movs	r3, #1
10010716:	9301      	str	r3, [sp, #4]
10010718:	9304      	str	r3, [sp, #16]
1001071a:	461a      	mov	r2, r3
1001071c:	920a      	str	r2, [sp, #40]	; 0x28
1001071e:	e00b      	b.n	10010738 <_dtoa_r+0x290>
10010720:	2301      	movs	r3, #1
10010722:	e7f3      	b.n	1001070c <_dtoa_r+0x264>
10010724:	2300      	movs	r3, #0
10010726:	9309      	str	r3, [sp, #36]	; 0x24
10010728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1001072a:	445b      	add	r3, fp
1001072c:	9301      	str	r3, [sp, #4]
1001072e:	3301      	adds	r3, #1
10010730:	2b01      	cmp	r3, #1
10010732:	9304      	str	r3, [sp, #16]
10010734:	bfb8      	it	lt
10010736:	2301      	movlt	r3, #1
10010738:	69e0      	ldr	r0, [r4, #28]
1001073a:	2100      	movs	r1, #0
1001073c:	2204      	movs	r2, #4
1001073e:	f102 0614 	add.w	r6, r2, #20
10010742:	429e      	cmp	r6, r3
10010744:	d93d      	bls.n	100107c2 <_dtoa_r+0x31a>
10010746:	6041      	str	r1, [r0, #4]
10010748:	4620      	mov	r0, r4
1001074a:	f000 fceb 	bl	10011124 <_Balloc>
1001074e:	9000      	str	r0, [sp, #0]
10010750:	2800      	cmp	r0, #0
10010752:	d139      	bne.n	100107c8 <_dtoa_r+0x320>
10010754:	4b16      	ldr	r3, [pc, #88]	; (100107b0 <_dtoa_r+0x308>)
10010756:	4602      	mov	r2, r0
10010758:	f240 11af 	movw	r1, #431	; 0x1af
1001075c:	e6bd      	b.n	100104da <_dtoa_r+0x32>
1001075e:	2301      	movs	r3, #1
10010760:	e7e1      	b.n	10010726 <_dtoa_r+0x27e>
10010762:	2501      	movs	r5, #1
10010764:	2300      	movs	r3, #0
10010766:	9307      	str	r3, [sp, #28]
10010768:	9509      	str	r5, [sp, #36]	; 0x24
1001076a:	f04f 33ff 	mov.w	r3, #4294967295
1001076e:	9301      	str	r3, [sp, #4]
10010770:	9304      	str	r3, [sp, #16]
10010772:	2200      	movs	r2, #0
10010774:	2312      	movs	r3, #18
10010776:	e7d1      	b.n	1001071c <_dtoa_r+0x274>
10010778:	636f4361 	.word	0x636f4361
1001077c:	3fd287a7 	.word	0x3fd287a7
10010780:	8b60c8b3 	.word	0x8b60c8b3
10010784:	3fc68a28 	.word	0x3fc68a28
10010788:	509f79fb 	.word	0x509f79fb
1001078c:	3fd34413 	.word	0x3fd34413
10010790:	1001ad75 	.word	0x1001ad75
10010794:	1001ad8c 	.word	0x1001ad8c
10010798:	7ff00000 	.word	0x7ff00000
1001079c:	1001ad71 	.word	0x1001ad71
100107a0:	1001ad68 	.word	0x1001ad68
100107a4:	1001ad45 	.word	0x1001ad45
100107a8:	3ff80000 	.word	0x3ff80000
100107ac:	1001ae78 	.word	0x1001ae78
100107b0:	1001ade4 	.word	0x1001ade4
100107b4:	2301      	movs	r3, #1
100107b6:	9309      	str	r3, [sp, #36]	; 0x24
100107b8:	e7d7      	b.n	1001076a <_dtoa_r+0x2c2>
100107ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100107bc:	9301      	str	r3, [sp, #4]
100107be:	9304      	str	r3, [sp, #16]
100107c0:	e7ba      	b.n	10010738 <_dtoa_r+0x290>
100107c2:	3101      	adds	r1, #1
100107c4:	0052      	lsls	r2, r2, #1
100107c6:	e7ba      	b.n	1001073e <_dtoa_r+0x296>
100107c8:	69e3      	ldr	r3, [r4, #28]
100107ca:	9a00      	ldr	r2, [sp, #0]
100107cc:	601a      	str	r2, [r3, #0]
100107ce:	9b04      	ldr	r3, [sp, #16]
100107d0:	2b0e      	cmp	r3, #14
100107d2:	f200 80a8 	bhi.w	10010926 <_dtoa_r+0x47e>
100107d6:	2d00      	cmp	r5, #0
100107d8:	f000 80a5 	beq.w	10010926 <_dtoa_r+0x47e>
100107dc:	f1bb 0f00 	cmp.w	fp, #0
100107e0:	dd38      	ble.n	10010854 <_dtoa_r+0x3ac>
100107e2:	4bc0      	ldr	r3, [pc, #768]	; (10010ae4 <_dtoa_r+0x63c>)
100107e4:	f00b 020f 	and.w	r2, fp, #15
100107e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
100107ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
100107f0:	e9d3 6700 	ldrd	r6, r7, [r3]
100107f4:	ea4f 182b 	mov.w	r8, fp, asr #4
100107f8:	d019      	beq.n	1001082e <_dtoa_r+0x386>
100107fa:	4bbb      	ldr	r3, [pc, #748]	; (10010ae8 <_dtoa_r+0x640>)
100107fc:	ec51 0b18 	vmov	r0, r1, d8
10010800:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
10010804:	f7ef ff6a 	bl	100006dc <__aeabi_ddiv>
10010808:	e9cd 0102 	strd	r0, r1, [sp, #8]
1001080c:	f008 080f 	and.w	r8, r8, #15
10010810:	2503      	movs	r5, #3
10010812:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 10010ae8 <_dtoa_r+0x640>
10010816:	f1b8 0f00 	cmp.w	r8, #0
1001081a:	d10a      	bne.n	10010832 <_dtoa_r+0x38a>
1001081c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
10010820:	4632      	mov	r2, r6
10010822:	463b      	mov	r3, r7
10010824:	f7ef ff5a 	bl	100006dc <__aeabi_ddiv>
10010828:	e9cd 0102 	strd	r0, r1, [sp, #8]
1001082c:	e02b      	b.n	10010886 <_dtoa_r+0x3de>
1001082e:	2502      	movs	r5, #2
10010830:	e7ef      	b.n	10010812 <_dtoa_r+0x36a>
10010832:	f018 0f01 	tst.w	r8, #1
10010836:	d008      	beq.n	1001084a <_dtoa_r+0x3a2>
10010838:	4630      	mov	r0, r6
1001083a:	4639      	mov	r1, r7
1001083c:	e9d9 2300 	ldrd	r2, r3, [r9]
10010840:	f7ef fe22 	bl	10000488 <__aeabi_dmul>
10010844:	3501      	adds	r5, #1
10010846:	4606      	mov	r6, r0
10010848:	460f      	mov	r7, r1
1001084a:	ea4f 0868 	mov.w	r8, r8, asr #1
1001084e:	f109 0908 	add.w	r9, r9, #8
10010852:	e7e0      	b.n	10010816 <_dtoa_r+0x36e>
10010854:	f000 809f 	beq.w	10010996 <_dtoa_r+0x4ee>
10010858:	f1cb 0600 	rsb	r6, fp, #0
1001085c:	4ba1      	ldr	r3, [pc, #644]	; (10010ae4 <_dtoa_r+0x63c>)
1001085e:	4fa2      	ldr	r7, [pc, #648]	; (10010ae8 <_dtoa_r+0x640>)
10010860:	f006 020f 	and.w	r2, r6, #15
10010864:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
10010868:	e9d3 2300 	ldrd	r2, r3, [r3]
1001086c:	ec51 0b18 	vmov	r0, r1, d8
10010870:	f7ef fe0a 	bl	10000488 <__aeabi_dmul>
10010874:	e9cd 0102 	strd	r0, r1, [sp, #8]
10010878:	1136      	asrs	r6, r6, #4
1001087a:	2300      	movs	r3, #0
1001087c:	2502      	movs	r5, #2
1001087e:	2e00      	cmp	r6, #0
10010880:	d17e      	bne.n	10010980 <_dtoa_r+0x4d8>
10010882:	2b00      	cmp	r3, #0
10010884:	d1d0      	bne.n	10010828 <_dtoa_r+0x380>
10010886:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10010888:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
1001088c:	2b00      	cmp	r3, #0
1001088e:	f000 8084 	beq.w	1001099a <_dtoa_r+0x4f2>
10010892:	4b96      	ldr	r3, [pc, #600]	; (10010aec <_dtoa_r+0x644>)
10010894:	2200      	movs	r2, #0
10010896:	4640      	mov	r0, r8
10010898:	4649      	mov	r1, r9
1001089a:	f7f0 f867 	bl	1000096c <__aeabi_dcmplt>
1001089e:	2800      	cmp	r0, #0
100108a0:	d07b      	beq.n	1001099a <_dtoa_r+0x4f2>
100108a2:	9b04      	ldr	r3, [sp, #16]
100108a4:	2b00      	cmp	r3, #0
100108a6:	d078      	beq.n	1001099a <_dtoa_r+0x4f2>
100108a8:	9b01      	ldr	r3, [sp, #4]
100108aa:	2b00      	cmp	r3, #0
100108ac:	dd39      	ble.n	10010922 <_dtoa_r+0x47a>
100108ae:	4b90      	ldr	r3, [pc, #576]	; (10010af0 <_dtoa_r+0x648>)
100108b0:	2200      	movs	r2, #0
100108b2:	4640      	mov	r0, r8
100108b4:	4649      	mov	r1, r9
100108b6:	f7ef fde7 	bl	10000488 <__aeabi_dmul>
100108ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
100108be:	9e01      	ldr	r6, [sp, #4]
100108c0:	f10b 37ff 	add.w	r7, fp, #4294967295
100108c4:	3501      	adds	r5, #1
100108c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
100108ca:	4628      	mov	r0, r5
100108cc:	f7ef fd72 	bl	100003b4 <__aeabi_i2d>
100108d0:	4642      	mov	r2, r8
100108d2:	464b      	mov	r3, r9
100108d4:	f7ef fdd8 	bl	10000488 <__aeabi_dmul>
100108d8:	4b86      	ldr	r3, [pc, #536]	; (10010af4 <_dtoa_r+0x64c>)
100108da:	2200      	movs	r2, #0
100108dc:	f7ef fc1e 	bl	1000011c <__adddf3>
100108e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
100108e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
100108e8:	9303      	str	r3, [sp, #12]
100108ea:	2e00      	cmp	r6, #0
100108ec:	d158      	bne.n	100109a0 <_dtoa_r+0x4f8>
100108ee:	4b82      	ldr	r3, [pc, #520]	; (10010af8 <_dtoa_r+0x650>)
100108f0:	2200      	movs	r2, #0
100108f2:	4640      	mov	r0, r8
100108f4:	4649      	mov	r1, r9
100108f6:	f7ef fc0f 	bl	10000118 <__aeabi_dsub>
100108fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
100108fe:	4680      	mov	r8, r0
10010900:	4689      	mov	r9, r1
10010902:	f7f0 f851 	bl	100009a8 <__aeabi_dcmpgt>
10010906:	2800      	cmp	r0, #0
10010908:	f040 8296 	bne.w	10010e38 <_dtoa_r+0x990>
1001090c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
10010910:	4640      	mov	r0, r8
10010912:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
10010916:	4649      	mov	r1, r9
10010918:	f7f0 f828 	bl	1000096c <__aeabi_dcmplt>
1001091c:	2800      	cmp	r0, #0
1001091e:	f040 8289 	bne.w	10010e34 <_dtoa_r+0x98c>
10010922:	ed8d 8b02 	vstr	d8, [sp, #8]
10010926:	9b11      	ldr	r3, [sp, #68]	; 0x44
10010928:	2b00      	cmp	r3, #0
1001092a:	f2c0 814e 	blt.w	10010bca <_dtoa_r+0x722>
1001092e:	f1bb 0f0e 	cmp.w	fp, #14
10010932:	f300 814a 	bgt.w	10010bca <_dtoa_r+0x722>
10010936:	4b6b      	ldr	r3, [pc, #428]	; (10010ae4 <_dtoa_r+0x63c>)
10010938:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
1001093c:	e9d3 8900 	ldrd	r8, r9, [r3]
10010940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10010942:	2b00      	cmp	r3, #0
10010944:	f280 80dc 	bge.w	10010b00 <_dtoa_r+0x658>
10010948:	9b04      	ldr	r3, [sp, #16]
1001094a:	2b00      	cmp	r3, #0
1001094c:	f300 80d8 	bgt.w	10010b00 <_dtoa_r+0x658>
10010950:	f040 826f 	bne.w	10010e32 <_dtoa_r+0x98a>
10010954:	4b68      	ldr	r3, [pc, #416]	; (10010af8 <_dtoa_r+0x650>)
10010956:	2200      	movs	r2, #0
10010958:	4640      	mov	r0, r8
1001095a:	4649      	mov	r1, r9
1001095c:	f7ef fd94 	bl	10000488 <__aeabi_dmul>
10010960:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
10010964:	f7f0 f816 	bl	10000994 <__aeabi_dcmpge>
10010968:	9e04      	ldr	r6, [sp, #16]
1001096a:	4637      	mov	r7, r6
1001096c:	2800      	cmp	r0, #0
1001096e:	f040 8245 	bne.w	10010dfc <_dtoa_r+0x954>
10010972:	9d00      	ldr	r5, [sp, #0]
10010974:	2331      	movs	r3, #49	; 0x31
10010976:	f805 3b01 	strb.w	r3, [r5], #1
1001097a:	f10b 0b01 	add.w	fp, fp, #1
1001097e:	e241      	b.n	10010e04 <_dtoa_r+0x95c>
10010980:	07f2      	lsls	r2, r6, #31
10010982:	d505      	bpl.n	10010990 <_dtoa_r+0x4e8>
10010984:	e9d7 2300 	ldrd	r2, r3, [r7]
10010988:	f7ef fd7e 	bl	10000488 <__aeabi_dmul>
1001098c:	3501      	adds	r5, #1
1001098e:	2301      	movs	r3, #1
10010990:	1076      	asrs	r6, r6, #1
10010992:	3708      	adds	r7, #8
10010994:	e773      	b.n	1001087e <_dtoa_r+0x3d6>
10010996:	2502      	movs	r5, #2
10010998:	e775      	b.n	10010886 <_dtoa_r+0x3de>
1001099a:	9e04      	ldr	r6, [sp, #16]
1001099c:	465f      	mov	r7, fp
1001099e:	e792      	b.n	100108c6 <_dtoa_r+0x41e>
100109a0:	9900      	ldr	r1, [sp, #0]
100109a2:	4b50      	ldr	r3, [pc, #320]	; (10010ae4 <_dtoa_r+0x63c>)
100109a4:	ed9d 7b02 	vldr	d7, [sp, #8]
100109a8:	4431      	add	r1, r6
100109aa:	9102      	str	r1, [sp, #8]
100109ac:	9909      	ldr	r1, [sp, #36]	; 0x24
100109ae:	eeb0 9a47 	vmov.f32	s18, s14
100109b2:	eef0 9a67 	vmov.f32	s19, s15
100109b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
100109ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
100109be:	2900      	cmp	r1, #0
100109c0:	d044      	beq.n	10010a4c <_dtoa_r+0x5a4>
100109c2:	494e      	ldr	r1, [pc, #312]	; (10010afc <_dtoa_r+0x654>)
100109c4:	2000      	movs	r0, #0
100109c6:	f7ef fe89 	bl	100006dc <__aeabi_ddiv>
100109ca:	ec53 2b19 	vmov	r2, r3, d9
100109ce:	f7ef fba3 	bl	10000118 <__aeabi_dsub>
100109d2:	9d00      	ldr	r5, [sp, #0]
100109d4:	ec41 0b19 	vmov	d9, r0, r1
100109d8:	4649      	mov	r1, r9
100109da:	4640      	mov	r0, r8
100109dc:	f7f0 f804 	bl	100009e8 <__aeabi_d2iz>
100109e0:	4606      	mov	r6, r0
100109e2:	f7ef fce7 	bl	100003b4 <__aeabi_i2d>
100109e6:	4602      	mov	r2, r0
100109e8:	460b      	mov	r3, r1
100109ea:	4640      	mov	r0, r8
100109ec:	4649      	mov	r1, r9
100109ee:	f7ef fb93 	bl	10000118 <__aeabi_dsub>
100109f2:	3630      	adds	r6, #48	; 0x30
100109f4:	f805 6b01 	strb.w	r6, [r5], #1
100109f8:	ec53 2b19 	vmov	r2, r3, d9
100109fc:	4680      	mov	r8, r0
100109fe:	4689      	mov	r9, r1
10010a00:	f7ef ffb4 	bl	1000096c <__aeabi_dcmplt>
10010a04:	2800      	cmp	r0, #0
10010a06:	d164      	bne.n	10010ad2 <_dtoa_r+0x62a>
10010a08:	4642      	mov	r2, r8
10010a0a:	464b      	mov	r3, r9
10010a0c:	4937      	ldr	r1, [pc, #220]	; (10010aec <_dtoa_r+0x644>)
10010a0e:	2000      	movs	r0, #0
10010a10:	f7ef fb82 	bl	10000118 <__aeabi_dsub>
10010a14:	ec53 2b19 	vmov	r2, r3, d9
10010a18:	f7ef ffa8 	bl	1000096c <__aeabi_dcmplt>
10010a1c:	2800      	cmp	r0, #0
10010a1e:	f040 80b6 	bne.w	10010b8e <_dtoa_r+0x6e6>
10010a22:	9b02      	ldr	r3, [sp, #8]
10010a24:	429d      	cmp	r5, r3
10010a26:	f43f af7c 	beq.w	10010922 <_dtoa_r+0x47a>
10010a2a:	4b31      	ldr	r3, [pc, #196]	; (10010af0 <_dtoa_r+0x648>)
10010a2c:	ec51 0b19 	vmov	r0, r1, d9
10010a30:	2200      	movs	r2, #0
10010a32:	f7ef fd29 	bl	10000488 <__aeabi_dmul>
10010a36:	4b2e      	ldr	r3, [pc, #184]	; (10010af0 <_dtoa_r+0x648>)
10010a38:	ec41 0b19 	vmov	d9, r0, r1
10010a3c:	2200      	movs	r2, #0
10010a3e:	4640      	mov	r0, r8
10010a40:	4649      	mov	r1, r9
10010a42:	f7ef fd21 	bl	10000488 <__aeabi_dmul>
10010a46:	4680      	mov	r8, r0
10010a48:	4689      	mov	r9, r1
10010a4a:	e7c5      	b.n	100109d8 <_dtoa_r+0x530>
10010a4c:	ec51 0b17 	vmov	r0, r1, d7
10010a50:	f7ef fd1a 	bl	10000488 <__aeabi_dmul>
10010a54:	9b02      	ldr	r3, [sp, #8]
10010a56:	9d00      	ldr	r5, [sp, #0]
10010a58:	930f      	str	r3, [sp, #60]	; 0x3c
10010a5a:	ec41 0b19 	vmov	d9, r0, r1
10010a5e:	4649      	mov	r1, r9
10010a60:	4640      	mov	r0, r8
10010a62:	f7ef ffc1 	bl	100009e8 <__aeabi_d2iz>
10010a66:	4606      	mov	r6, r0
10010a68:	f7ef fca4 	bl	100003b4 <__aeabi_i2d>
10010a6c:	3630      	adds	r6, #48	; 0x30
10010a6e:	4602      	mov	r2, r0
10010a70:	460b      	mov	r3, r1
10010a72:	4640      	mov	r0, r8
10010a74:	4649      	mov	r1, r9
10010a76:	f7ef fb4f 	bl	10000118 <__aeabi_dsub>
10010a7a:	f805 6b01 	strb.w	r6, [r5], #1
10010a7e:	9b02      	ldr	r3, [sp, #8]
10010a80:	429d      	cmp	r5, r3
10010a82:	4680      	mov	r8, r0
10010a84:	4689      	mov	r9, r1
10010a86:	f04f 0200 	mov.w	r2, #0
10010a8a:	d124      	bne.n	10010ad6 <_dtoa_r+0x62e>
10010a8c:	4b1b      	ldr	r3, [pc, #108]	; (10010afc <_dtoa_r+0x654>)
10010a8e:	ec51 0b19 	vmov	r0, r1, d9
10010a92:	f7ef fb43 	bl	1000011c <__adddf3>
10010a96:	4602      	mov	r2, r0
10010a98:	460b      	mov	r3, r1
10010a9a:	4640      	mov	r0, r8
10010a9c:	4649      	mov	r1, r9
10010a9e:	f7ef ff83 	bl	100009a8 <__aeabi_dcmpgt>
10010aa2:	2800      	cmp	r0, #0
10010aa4:	d173      	bne.n	10010b8e <_dtoa_r+0x6e6>
10010aa6:	ec53 2b19 	vmov	r2, r3, d9
10010aaa:	4914      	ldr	r1, [pc, #80]	; (10010afc <_dtoa_r+0x654>)
10010aac:	2000      	movs	r0, #0
10010aae:	f7ef fb33 	bl	10000118 <__aeabi_dsub>
10010ab2:	4602      	mov	r2, r0
10010ab4:	460b      	mov	r3, r1
10010ab6:	4640      	mov	r0, r8
10010ab8:	4649      	mov	r1, r9
10010aba:	f7ef ff57 	bl	1000096c <__aeabi_dcmplt>
10010abe:	2800      	cmp	r0, #0
10010ac0:	f43f af2f 	beq.w	10010922 <_dtoa_r+0x47a>
10010ac4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
10010ac6:	1e6b      	subs	r3, r5, #1
10010ac8:	930f      	str	r3, [sp, #60]	; 0x3c
10010aca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
10010ace:	2b30      	cmp	r3, #48	; 0x30
10010ad0:	d0f8      	beq.n	10010ac4 <_dtoa_r+0x61c>
10010ad2:	46bb      	mov	fp, r7
10010ad4:	e04a      	b.n	10010b6c <_dtoa_r+0x6c4>
10010ad6:	4b06      	ldr	r3, [pc, #24]	; (10010af0 <_dtoa_r+0x648>)
10010ad8:	f7ef fcd6 	bl	10000488 <__aeabi_dmul>
10010adc:	4680      	mov	r8, r0
10010ade:	4689      	mov	r9, r1
10010ae0:	e7bd      	b.n	10010a5e <_dtoa_r+0x5b6>
10010ae2:	bf00      	nop
10010ae4:	1001ae78 	.word	0x1001ae78
10010ae8:	1001ae50 	.word	0x1001ae50
10010aec:	3ff00000 	.word	0x3ff00000
10010af0:	40240000 	.word	0x40240000
10010af4:	401c0000 	.word	0x401c0000
10010af8:	40140000 	.word	0x40140000
10010afc:	3fe00000 	.word	0x3fe00000
10010b00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
10010b04:	9d00      	ldr	r5, [sp, #0]
10010b06:	4642      	mov	r2, r8
10010b08:	464b      	mov	r3, r9
10010b0a:	4630      	mov	r0, r6
10010b0c:	4639      	mov	r1, r7
10010b0e:	f7ef fde5 	bl	100006dc <__aeabi_ddiv>
10010b12:	f7ef ff69 	bl	100009e8 <__aeabi_d2iz>
10010b16:	9001      	str	r0, [sp, #4]
10010b18:	f7ef fc4c 	bl	100003b4 <__aeabi_i2d>
10010b1c:	4642      	mov	r2, r8
10010b1e:	464b      	mov	r3, r9
10010b20:	f7ef fcb2 	bl	10000488 <__aeabi_dmul>
10010b24:	4602      	mov	r2, r0
10010b26:	460b      	mov	r3, r1
10010b28:	4630      	mov	r0, r6
10010b2a:	4639      	mov	r1, r7
10010b2c:	f7ef faf4 	bl	10000118 <__aeabi_dsub>
10010b30:	9e01      	ldr	r6, [sp, #4]
10010b32:	9f04      	ldr	r7, [sp, #16]
10010b34:	3630      	adds	r6, #48	; 0x30
10010b36:	f805 6b01 	strb.w	r6, [r5], #1
10010b3a:	9e00      	ldr	r6, [sp, #0]
10010b3c:	1bae      	subs	r6, r5, r6
10010b3e:	42b7      	cmp	r7, r6
10010b40:	4602      	mov	r2, r0
10010b42:	460b      	mov	r3, r1
10010b44:	d134      	bne.n	10010bb0 <_dtoa_r+0x708>
10010b46:	f7ef fae9 	bl	1000011c <__adddf3>
10010b4a:	4642      	mov	r2, r8
10010b4c:	464b      	mov	r3, r9
10010b4e:	4606      	mov	r6, r0
10010b50:	460f      	mov	r7, r1
10010b52:	f7ef ff29 	bl	100009a8 <__aeabi_dcmpgt>
10010b56:	b9c8      	cbnz	r0, 10010b8c <_dtoa_r+0x6e4>
10010b58:	4642      	mov	r2, r8
10010b5a:	464b      	mov	r3, r9
10010b5c:	4630      	mov	r0, r6
10010b5e:	4639      	mov	r1, r7
10010b60:	f7ef fefa 	bl	10000958 <__aeabi_dcmpeq>
10010b64:	b110      	cbz	r0, 10010b6c <_dtoa_r+0x6c4>
10010b66:	9b01      	ldr	r3, [sp, #4]
10010b68:	07db      	lsls	r3, r3, #31
10010b6a:	d40f      	bmi.n	10010b8c <_dtoa_r+0x6e4>
10010b6c:	4651      	mov	r1, sl
10010b6e:	4620      	mov	r0, r4
10010b70:	f000 fb18 	bl	100111a4 <_Bfree>
10010b74:	2300      	movs	r3, #0
10010b76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10010b78:	702b      	strb	r3, [r5, #0]
10010b7a:	f10b 0301 	add.w	r3, fp, #1
10010b7e:	6013      	str	r3, [r2, #0]
10010b80:	9b21      	ldr	r3, [sp, #132]	; 0x84
10010b82:	2b00      	cmp	r3, #0
10010b84:	f43f ace2 	beq.w	1001054c <_dtoa_r+0xa4>
10010b88:	601d      	str	r5, [r3, #0]
10010b8a:	e4df      	b.n	1001054c <_dtoa_r+0xa4>
10010b8c:	465f      	mov	r7, fp
10010b8e:	462b      	mov	r3, r5
10010b90:	461d      	mov	r5, r3
10010b92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
10010b96:	2a39      	cmp	r2, #57	; 0x39
10010b98:	d106      	bne.n	10010ba8 <_dtoa_r+0x700>
10010b9a:	9a00      	ldr	r2, [sp, #0]
10010b9c:	429a      	cmp	r2, r3
10010b9e:	d1f7      	bne.n	10010b90 <_dtoa_r+0x6e8>
10010ba0:	9900      	ldr	r1, [sp, #0]
10010ba2:	2230      	movs	r2, #48	; 0x30
10010ba4:	3701      	adds	r7, #1
10010ba6:	700a      	strb	r2, [r1, #0]
10010ba8:	781a      	ldrb	r2, [r3, #0]
10010baa:	3201      	adds	r2, #1
10010bac:	701a      	strb	r2, [r3, #0]
10010bae:	e790      	b.n	10010ad2 <_dtoa_r+0x62a>
10010bb0:	4ba3      	ldr	r3, [pc, #652]	; (10010e40 <_dtoa_r+0x998>)
10010bb2:	2200      	movs	r2, #0
10010bb4:	f7ef fc68 	bl	10000488 <__aeabi_dmul>
10010bb8:	2200      	movs	r2, #0
10010bba:	2300      	movs	r3, #0
10010bbc:	4606      	mov	r6, r0
10010bbe:	460f      	mov	r7, r1
10010bc0:	f7ef feca 	bl	10000958 <__aeabi_dcmpeq>
10010bc4:	2800      	cmp	r0, #0
10010bc6:	d09e      	beq.n	10010b06 <_dtoa_r+0x65e>
10010bc8:	e7d0      	b.n	10010b6c <_dtoa_r+0x6c4>
10010bca:	9a09      	ldr	r2, [sp, #36]	; 0x24
10010bcc:	2a00      	cmp	r2, #0
10010bce:	f000 80ca 	beq.w	10010d66 <_dtoa_r+0x8be>
10010bd2:	9a07      	ldr	r2, [sp, #28]
10010bd4:	2a01      	cmp	r2, #1
10010bd6:	f300 80ad 	bgt.w	10010d34 <_dtoa_r+0x88c>
10010bda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10010bdc:	2a00      	cmp	r2, #0
10010bde:	f000 80a5 	beq.w	10010d2c <_dtoa_r+0x884>
10010be2:	f203 4333 	addw	r3, r3, #1075	; 0x433
10010be6:	9e08      	ldr	r6, [sp, #32]
10010be8:	9d05      	ldr	r5, [sp, #20]
10010bea:	9a05      	ldr	r2, [sp, #20]
10010bec:	441a      	add	r2, r3
10010bee:	9205      	str	r2, [sp, #20]
10010bf0:	9a06      	ldr	r2, [sp, #24]
10010bf2:	2101      	movs	r1, #1
10010bf4:	441a      	add	r2, r3
10010bf6:	4620      	mov	r0, r4
10010bf8:	9206      	str	r2, [sp, #24]
10010bfa:	f000 fb89 	bl	10011310 <__i2b>
10010bfe:	4607      	mov	r7, r0
10010c00:	b165      	cbz	r5, 10010c1c <_dtoa_r+0x774>
10010c02:	9b06      	ldr	r3, [sp, #24]
10010c04:	2b00      	cmp	r3, #0
10010c06:	dd09      	ble.n	10010c1c <_dtoa_r+0x774>
10010c08:	42ab      	cmp	r3, r5
10010c0a:	9a05      	ldr	r2, [sp, #20]
10010c0c:	bfa8      	it	ge
10010c0e:	462b      	movge	r3, r5
10010c10:	1ad2      	subs	r2, r2, r3
10010c12:	9205      	str	r2, [sp, #20]
10010c14:	9a06      	ldr	r2, [sp, #24]
10010c16:	1aed      	subs	r5, r5, r3
10010c18:	1ad3      	subs	r3, r2, r3
10010c1a:	9306      	str	r3, [sp, #24]
10010c1c:	9b08      	ldr	r3, [sp, #32]
10010c1e:	b1f3      	cbz	r3, 10010c5e <_dtoa_r+0x7b6>
10010c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
10010c22:	2b00      	cmp	r3, #0
10010c24:	f000 80a3 	beq.w	10010d6e <_dtoa_r+0x8c6>
10010c28:	2e00      	cmp	r6, #0
10010c2a:	dd10      	ble.n	10010c4e <_dtoa_r+0x7a6>
10010c2c:	4639      	mov	r1, r7
10010c2e:	4632      	mov	r2, r6
10010c30:	4620      	mov	r0, r4
10010c32:	f000 fc2d 	bl	10011490 <__pow5mult>
10010c36:	4652      	mov	r2, sl
10010c38:	4601      	mov	r1, r0
10010c3a:	4607      	mov	r7, r0
10010c3c:	4620      	mov	r0, r4
10010c3e:	f000 fb7d 	bl	1001133c <__multiply>
10010c42:	4651      	mov	r1, sl
10010c44:	4680      	mov	r8, r0
10010c46:	4620      	mov	r0, r4
10010c48:	f000 faac 	bl	100111a4 <_Bfree>
10010c4c:	46c2      	mov	sl, r8
10010c4e:	9b08      	ldr	r3, [sp, #32]
10010c50:	1b9a      	subs	r2, r3, r6
10010c52:	d004      	beq.n	10010c5e <_dtoa_r+0x7b6>
10010c54:	4651      	mov	r1, sl
10010c56:	4620      	mov	r0, r4
10010c58:	f000 fc1a 	bl	10011490 <__pow5mult>
10010c5c:	4682      	mov	sl, r0
10010c5e:	2101      	movs	r1, #1
10010c60:	4620      	mov	r0, r4
10010c62:	f000 fb55 	bl	10011310 <__i2b>
10010c66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10010c68:	2b00      	cmp	r3, #0
10010c6a:	4606      	mov	r6, r0
10010c6c:	f340 8081 	ble.w	10010d72 <_dtoa_r+0x8ca>
10010c70:	461a      	mov	r2, r3
10010c72:	4601      	mov	r1, r0
10010c74:	4620      	mov	r0, r4
10010c76:	f000 fc0b 	bl	10011490 <__pow5mult>
10010c7a:	9b07      	ldr	r3, [sp, #28]
10010c7c:	2b01      	cmp	r3, #1
10010c7e:	4606      	mov	r6, r0
10010c80:	dd7a      	ble.n	10010d78 <_dtoa_r+0x8d0>
10010c82:	f04f 0800 	mov.w	r8, #0
10010c86:	6933      	ldr	r3, [r6, #16]
10010c88:	eb06 0383 	add.w	r3, r6, r3, lsl #2
10010c8c:	6918      	ldr	r0, [r3, #16]
10010c8e:	f000 faf1 	bl	10011274 <__hi0bits>
10010c92:	f1c0 0020 	rsb	r0, r0, #32
10010c96:	9b06      	ldr	r3, [sp, #24]
10010c98:	4418      	add	r0, r3
10010c9a:	f010 001f 	ands.w	r0, r0, #31
10010c9e:	f000 8094 	beq.w	10010dca <_dtoa_r+0x922>
10010ca2:	f1c0 0320 	rsb	r3, r0, #32
10010ca6:	2b04      	cmp	r3, #4
10010ca8:	f340 8085 	ble.w	10010db6 <_dtoa_r+0x90e>
10010cac:	9b05      	ldr	r3, [sp, #20]
10010cae:	f1c0 001c 	rsb	r0, r0, #28
10010cb2:	4403      	add	r3, r0
10010cb4:	9305      	str	r3, [sp, #20]
10010cb6:	9b06      	ldr	r3, [sp, #24]
10010cb8:	4403      	add	r3, r0
10010cba:	4405      	add	r5, r0
10010cbc:	9306      	str	r3, [sp, #24]
10010cbe:	9b05      	ldr	r3, [sp, #20]
10010cc0:	2b00      	cmp	r3, #0
10010cc2:	dd05      	ble.n	10010cd0 <_dtoa_r+0x828>
10010cc4:	4651      	mov	r1, sl
10010cc6:	461a      	mov	r2, r3
10010cc8:	4620      	mov	r0, r4
10010cca:	f000 fc3b 	bl	10011544 <__lshift>
10010cce:	4682      	mov	sl, r0
10010cd0:	9b06      	ldr	r3, [sp, #24]
10010cd2:	2b00      	cmp	r3, #0
10010cd4:	dd05      	ble.n	10010ce2 <_dtoa_r+0x83a>
10010cd6:	4631      	mov	r1, r6
10010cd8:	461a      	mov	r2, r3
10010cda:	4620      	mov	r0, r4
10010cdc:	f000 fc32 	bl	10011544 <__lshift>
10010ce0:	4606      	mov	r6, r0
10010ce2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10010ce4:	2b00      	cmp	r3, #0
10010ce6:	d072      	beq.n	10010dce <_dtoa_r+0x926>
10010ce8:	4631      	mov	r1, r6
10010cea:	4650      	mov	r0, sl
10010cec:	f000 fc96 	bl	1001161c <__mcmp>
10010cf0:	2800      	cmp	r0, #0
10010cf2:	da6c      	bge.n	10010dce <_dtoa_r+0x926>
10010cf4:	2300      	movs	r3, #0
10010cf6:	4651      	mov	r1, sl
10010cf8:	220a      	movs	r2, #10
10010cfa:	4620      	mov	r0, r4
10010cfc:	f000 fa74 	bl	100111e8 <__multadd>
10010d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
10010d02:	f10b 3bff 	add.w	fp, fp, #4294967295
10010d06:	4682      	mov	sl, r0
10010d08:	2b00      	cmp	r3, #0
10010d0a:	f000 81b0 	beq.w	1001106e <_dtoa_r+0xbc6>
10010d0e:	2300      	movs	r3, #0
10010d10:	4639      	mov	r1, r7
10010d12:	220a      	movs	r2, #10
10010d14:	4620      	mov	r0, r4
10010d16:	f000 fa67 	bl	100111e8 <__multadd>
10010d1a:	9b01      	ldr	r3, [sp, #4]
10010d1c:	2b00      	cmp	r3, #0
10010d1e:	4607      	mov	r7, r0
10010d20:	f300 8096 	bgt.w	10010e50 <_dtoa_r+0x9a8>
10010d24:	9b07      	ldr	r3, [sp, #28]
10010d26:	2b02      	cmp	r3, #2
10010d28:	dc59      	bgt.n	10010dde <_dtoa_r+0x936>
10010d2a:	e091      	b.n	10010e50 <_dtoa_r+0x9a8>
10010d2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
10010d2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
10010d32:	e758      	b.n	10010be6 <_dtoa_r+0x73e>
10010d34:	9b04      	ldr	r3, [sp, #16]
10010d36:	1e5e      	subs	r6, r3, #1
10010d38:	9b08      	ldr	r3, [sp, #32]
10010d3a:	42b3      	cmp	r3, r6
10010d3c:	bfbf      	itttt	lt
10010d3e:	9b08      	ldrlt	r3, [sp, #32]
10010d40:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
10010d42:	9608      	strlt	r6, [sp, #32]
10010d44:	1af3      	sublt	r3, r6, r3
10010d46:	bfb4      	ite	lt
10010d48:	18d2      	addlt	r2, r2, r3
10010d4a:	1b9e      	subge	r6, r3, r6
10010d4c:	9b04      	ldr	r3, [sp, #16]
10010d4e:	bfbc      	itt	lt
10010d50:	920b      	strlt	r2, [sp, #44]	; 0x2c
10010d52:	2600      	movlt	r6, #0
10010d54:	2b00      	cmp	r3, #0
10010d56:	bfb7      	itett	lt
10010d58:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
10010d5c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
10010d60:	1a9d      	sublt	r5, r3, r2
10010d62:	2300      	movlt	r3, #0
10010d64:	e741      	b.n	10010bea <_dtoa_r+0x742>
10010d66:	9e08      	ldr	r6, [sp, #32]
10010d68:	9d05      	ldr	r5, [sp, #20]
10010d6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
10010d6c:	e748      	b.n	10010c00 <_dtoa_r+0x758>
10010d6e:	9a08      	ldr	r2, [sp, #32]
10010d70:	e770      	b.n	10010c54 <_dtoa_r+0x7ac>
10010d72:	9b07      	ldr	r3, [sp, #28]
10010d74:	2b01      	cmp	r3, #1
10010d76:	dc19      	bgt.n	10010dac <_dtoa_r+0x904>
10010d78:	9b02      	ldr	r3, [sp, #8]
10010d7a:	b9bb      	cbnz	r3, 10010dac <_dtoa_r+0x904>
10010d7c:	9b03      	ldr	r3, [sp, #12]
10010d7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
10010d82:	b99b      	cbnz	r3, 10010dac <_dtoa_r+0x904>
10010d84:	9b03      	ldr	r3, [sp, #12]
10010d86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
10010d8a:	0d1b      	lsrs	r3, r3, #20
10010d8c:	051b      	lsls	r3, r3, #20
10010d8e:	b183      	cbz	r3, 10010db2 <_dtoa_r+0x90a>
10010d90:	9b05      	ldr	r3, [sp, #20]
10010d92:	3301      	adds	r3, #1
10010d94:	9305      	str	r3, [sp, #20]
10010d96:	9b06      	ldr	r3, [sp, #24]
10010d98:	3301      	adds	r3, #1
10010d9a:	9306      	str	r3, [sp, #24]
10010d9c:	f04f 0801 	mov.w	r8, #1
10010da0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10010da2:	2b00      	cmp	r3, #0
10010da4:	f47f af6f 	bne.w	10010c86 <_dtoa_r+0x7de>
10010da8:	2001      	movs	r0, #1
10010daa:	e774      	b.n	10010c96 <_dtoa_r+0x7ee>
10010dac:	f04f 0800 	mov.w	r8, #0
10010db0:	e7f6      	b.n	10010da0 <_dtoa_r+0x8f8>
10010db2:	4698      	mov	r8, r3
10010db4:	e7f4      	b.n	10010da0 <_dtoa_r+0x8f8>
10010db6:	d082      	beq.n	10010cbe <_dtoa_r+0x816>
10010db8:	9a05      	ldr	r2, [sp, #20]
10010dba:	331c      	adds	r3, #28
10010dbc:	441a      	add	r2, r3
10010dbe:	9205      	str	r2, [sp, #20]
10010dc0:	9a06      	ldr	r2, [sp, #24]
10010dc2:	441a      	add	r2, r3
10010dc4:	441d      	add	r5, r3
10010dc6:	9206      	str	r2, [sp, #24]
10010dc8:	e779      	b.n	10010cbe <_dtoa_r+0x816>
10010dca:	4603      	mov	r3, r0
10010dcc:	e7f4      	b.n	10010db8 <_dtoa_r+0x910>
10010dce:	9b04      	ldr	r3, [sp, #16]
10010dd0:	2b00      	cmp	r3, #0
10010dd2:	dc37      	bgt.n	10010e44 <_dtoa_r+0x99c>
10010dd4:	9b07      	ldr	r3, [sp, #28]
10010dd6:	2b02      	cmp	r3, #2
10010dd8:	dd34      	ble.n	10010e44 <_dtoa_r+0x99c>
10010dda:	9b04      	ldr	r3, [sp, #16]
10010ddc:	9301      	str	r3, [sp, #4]
10010dde:	9b01      	ldr	r3, [sp, #4]
10010de0:	b963      	cbnz	r3, 10010dfc <_dtoa_r+0x954>
10010de2:	4631      	mov	r1, r6
10010de4:	2205      	movs	r2, #5
10010de6:	4620      	mov	r0, r4
10010de8:	f000 f9fe 	bl	100111e8 <__multadd>
10010dec:	4601      	mov	r1, r0
10010dee:	4606      	mov	r6, r0
10010df0:	4650      	mov	r0, sl
10010df2:	f000 fc13 	bl	1001161c <__mcmp>
10010df6:	2800      	cmp	r0, #0
10010df8:	f73f adbb 	bgt.w	10010972 <_dtoa_r+0x4ca>
10010dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10010dfe:	9d00      	ldr	r5, [sp, #0]
10010e00:	ea6f 0b03 	mvn.w	fp, r3
10010e04:	f04f 0800 	mov.w	r8, #0
10010e08:	4631      	mov	r1, r6
10010e0a:	4620      	mov	r0, r4
10010e0c:	f000 f9ca 	bl	100111a4 <_Bfree>
10010e10:	2f00      	cmp	r7, #0
10010e12:	f43f aeab 	beq.w	10010b6c <_dtoa_r+0x6c4>
10010e16:	f1b8 0f00 	cmp.w	r8, #0
10010e1a:	d005      	beq.n	10010e28 <_dtoa_r+0x980>
10010e1c:	45b8      	cmp	r8, r7
10010e1e:	d003      	beq.n	10010e28 <_dtoa_r+0x980>
10010e20:	4641      	mov	r1, r8
10010e22:	4620      	mov	r0, r4
10010e24:	f000 f9be 	bl	100111a4 <_Bfree>
10010e28:	4639      	mov	r1, r7
10010e2a:	4620      	mov	r0, r4
10010e2c:	f000 f9ba 	bl	100111a4 <_Bfree>
10010e30:	e69c      	b.n	10010b6c <_dtoa_r+0x6c4>
10010e32:	2600      	movs	r6, #0
10010e34:	4637      	mov	r7, r6
10010e36:	e7e1      	b.n	10010dfc <_dtoa_r+0x954>
10010e38:	46bb      	mov	fp, r7
10010e3a:	4637      	mov	r7, r6
10010e3c:	e599      	b.n	10010972 <_dtoa_r+0x4ca>
10010e3e:	bf00      	nop
10010e40:	40240000 	.word	0x40240000
10010e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
10010e46:	2b00      	cmp	r3, #0
10010e48:	f000 80c8 	beq.w	10010fdc <_dtoa_r+0xb34>
10010e4c:	9b04      	ldr	r3, [sp, #16]
10010e4e:	9301      	str	r3, [sp, #4]
10010e50:	2d00      	cmp	r5, #0
10010e52:	dd05      	ble.n	10010e60 <_dtoa_r+0x9b8>
10010e54:	4639      	mov	r1, r7
10010e56:	462a      	mov	r2, r5
10010e58:	4620      	mov	r0, r4
10010e5a:	f000 fb73 	bl	10011544 <__lshift>
10010e5e:	4607      	mov	r7, r0
10010e60:	f1b8 0f00 	cmp.w	r8, #0
10010e64:	d05b      	beq.n	10010f1e <_dtoa_r+0xa76>
10010e66:	6879      	ldr	r1, [r7, #4]
10010e68:	4620      	mov	r0, r4
10010e6a:	f000 f95b 	bl	10011124 <_Balloc>
10010e6e:	4605      	mov	r5, r0
10010e70:	b928      	cbnz	r0, 10010e7e <_dtoa_r+0x9d6>
10010e72:	4b83      	ldr	r3, [pc, #524]	; (10011080 <_dtoa_r+0xbd8>)
10010e74:	4602      	mov	r2, r0
10010e76:	f240 21ef 	movw	r1, #751	; 0x2ef
10010e7a:	f7ff bb2e 	b.w	100104da <_dtoa_r+0x32>
10010e7e:	693a      	ldr	r2, [r7, #16]
10010e80:	3202      	adds	r2, #2
10010e82:	0092      	lsls	r2, r2, #2
10010e84:	f107 010c 	add.w	r1, r7, #12
10010e88:	300c      	adds	r0, #12
10010e8a:	f7ff fa70 	bl	1001036e <memcpy>
10010e8e:	2201      	movs	r2, #1
10010e90:	4629      	mov	r1, r5
10010e92:	4620      	mov	r0, r4
10010e94:	f000 fb56 	bl	10011544 <__lshift>
10010e98:	9b00      	ldr	r3, [sp, #0]
10010e9a:	3301      	adds	r3, #1
10010e9c:	9304      	str	r3, [sp, #16]
10010e9e:	e9dd 2300 	ldrd	r2, r3, [sp]
10010ea2:	4413      	add	r3, r2
10010ea4:	9308      	str	r3, [sp, #32]
10010ea6:	9b02      	ldr	r3, [sp, #8]
10010ea8:	f003 0301 	and.w	r3, r3, #1
10010eac:	46b8      	mov	r8, r7
10010eae:	9306      	str	r3, [sp, #24]
10010eb0:	4607      	mov	r7, r0
10010eb2:	9b04      	ldr	r3, [sp, #16]
10010eb4:	4631      	mov	r1, r6
10010eb6:	3b01      	subs	r3, #1
10010eb8:	4650      	mov	r0, sl
10010eba:	9301      	str	r3, [sp, #4]
10010ebc:	f7ff fa6c 	bl	10010398 <quorem>
10010ec0:	4641      	mov	r1, r8
10010ec2:	9002      	str	r0, [sp, #8]
10010ec4:	f100 0930 	add.w	r9, r0, #48	; 0x30
10010ec8:	4650      	mov	r0, sl
10010eca:	f000 fba7 	bl	1001161c <__mcmp>
10010ece:	463a      	mov	r2, r7
10010ed0:	9005      	str	r0, [sp, #20]
10010ed2:	4631      	mov	r1, r6
10010ed4:	4620      	mov	r0, r4
10010ed6:	f000 fbbd 	bl	10011654 <__mdiff>
10010eda:	68c2      	ldr	r2, [r0, #12]
10010edc:	4605      	mov	r5, r0
10010ede:	bb02      	cbnz	r2, 10010f22 <_dtoa_r+0xa7a>
10010ee0:	4601      	mov	r1, r0
10010ee2:	4650      	mov	r0, sl
10010ee4:	f000 fb9a 	bl	1001161c <__mcmp>
10010ee8:	4602      	mov	r2, r0
10010eea:	4629      	mov	r1, r5
10010eec:	4620      	mov	r0, r4
10010eee:	9209      	str	r2, [sp, #36]	; 0x24
10010ef0:	f000 f958 	bl	100111a4 <_Bfree>
10010ef4:	9b07      	ldr	r3, [sp, #28]
10010ef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
10010ef8:	9d04      	ldr	r5, [sp, #16]
10010efa:	ea43 0102 	orr.w	r1, r3, r2
10010efe:	9b06      	ldr	r3, [sp, #24]
10010f00:	4319      	orrs	r1, r3
10010f02:	d110      	bne.n	10010f26 <_dtoa_r+0xa7e>
10010f04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
10010f08:	d029      	beq.n	10010f5e <_dtoa_r+0xab6>
10010f0a:	9b05      	ldr	r3, [sp, #20]
10010f0c:	2b00      	cmp	r3, #0
10010f0e:	dd02      	ble.n	10010f16 <_dtoa_r+0xa6e>
10010f10:	9b02      	ldr	r3, [sp, #8]
10010f12:	f103 0931 	add.w	r9, r3, #49	; 0x31
10010f16:	9b01      	ldr	r3, [sp, #4]
10010f18:	f883 9000 	strb.w	r9, [r3]
10010f1c:	e774      	b.n	10010e08 <_dtoa_r+0x960>
10010f1e:	4638      	mov	r0, r7
10010f20:	e7ba      	b.n	10010e98 <_dtoa_r+0x9f0>
10010f22:	2201      	movs	r2, #1
10010f24:	e7e1      	b.n	10010eea <_dtoa_r+0xa42>
10010f26:	9b05      	ldr	r3, [sp, #20]
10010f28:	2b00      	cmp	r3, #0
10010f2a:	db04      	blt.n	10010f36 <_dtoa_r+0xa8e>
10010f2c:	9907      	ldr	r1, [sp, #28]
10010f2e:	430b      	orrs	r3, r1
10010f30:	9906      	ldr	r1, [sp, #24]
10010f32:	430b      	orrs	r3, r1
10010f34:	d120      	bne.n	10010f78 <_dtoa_r+0xad0>
10010f36:	2a00      	cmp	r2, #0
10010f38:	dded      	ble.n	10010f16 <_dtoa_r+0xa6e>
10010f3a:	4651      	mov	r1, sl
10010f3c:	2201      	movs	r2, #1
10010f3e:	4620      	mov	r0, r4
10010f40:	f000 fb00 	bl	10011544 <__lshift>
10010f44:	4631      	mov	r1, r6
10010f46:	4682      	mov	sl, r0
10010f48:	f000 fb68 	bl	1001161c <__mcmp>
10010f4c:	2800      	cmp	r0, #0
10010f4e:	dc03      	bgt.n	10010f58 <_dtoa_r+0xab0>
10010f50:	d1e1      	bne.n	10010f16 <_dtoa_r+0xa6e>
10010f52:	f019 0f01 	tst.w	r9, #1
10010f56:	d0de      	beq.n	10010f16 <_dtoa_r+0xa6e>
10010f58:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
10010f5c:	d1d8      	bne.n	10010f10 <_dtoa_r+0xa68>
10010f5e:	9a01      	ldr	r2, [sp, #4]
10010f60:	2339      	movs	r3, #57	; 0x39
10010f62:	7013      	strb	r3, [r2, #0]
10010f64:	462b      	mov	r3, r5
10010f66:	461d      	mov	r5, r3
10010f68:	3b01      	subs	r3, #1
10010f6a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
10010f6e:	2a39      	cmp	r2, #57	; 0x39
10010f70:	d06c      	beq.n	1001104c <_dtoa_r+0xba4>
10010f72:	3201      	adds	r2, #1
10010f74:	701a      	strb	r2, [r3, #0]
10010f76:	e747      	b.n	10010e08 <_dtoa_r+0x960>
10010f78:	2a00      	cmp	r2, #0
10010f7a:	dd07      	ble.n	10010f8c <_dtoa_r+0xae4>
10010f7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
10010f80:	d0ed      	beq.n	10010f5e <_dtoa_r+0xab6>
10010f82:	9a01      	ldr	r2, [sp, #4]
10010f84:	f109 0301 	add.w	r3, r9, #1
10010f88:	7013      	strb	r3, [r2, #0]
10010f8a:	e73d      	b.n	10010e08 <_dtoa_r+0x960>
10010f8c:	9b04      	ldr	r3, [sp, #16]
10010f8e:	9a08      	ldr	r2, [sp, #32]
10010f90:	f803 9c01 	strb.w	r9, [r3, #-1]
10010f94:	4293      	cmp	r3, r2
10010f96:	d043      	beq.n	10011020 <_dtoa_r+0xb78>
10010f98:	4651      	mov	r1, sl
10010f9a:	2300      	movs	r3, #0
10010f9c:	220a      	movs	r2, #10
10010f9e:	4620      	mov	r0, r4
10010fa0:	f000 f922 	bl	100111e8 <__multadd>
10010fa4:	45b8      	cmp	r8, r7
10010fa6:	4682      	mov	sl, r0
10010fa8:	f04f 0300 	mov.w	r3, #0
10010fac:	f04f 020a 	mov.w	r2, #10
10010fb0:	4641      	mov	r1, r8
10010fb2:	4620      	mov	r0, r4
10010fb4:	d107      	bne.n	10010fc6 <_dtoa_r+0xb1e>
10010fb6:	f000 f917 	bl	100111e8 <__multadd>
10010fba:	4680      	mov	r8, r0
10010fbc:	4607      	mov	r7, r0
10010fbe:	9b04      	ldr	r3, [sp, #16]
10010fc0:	3301      	adds	r3, #1
10010fc2:	9304      	str	r3, [sp, #16]
10010fc4:	e775      	b.n	10010eb2 <_dtoa_r+0xa0a>
10010fc6:	f000 f90f 	bl	100111e8 <__multadd>
10010fca:	4639      	mov	r1, r7
10010fcc:	4680      	mov	r8, r0
10010fce:	2300      	movs	r3, #0
10010fd0:	220a      	movs	r2, #10
10010fd2:	4620      	mov	r0, r4
10010fd4:	f000 f908 	bl	100111e8 <__multadd>
10010fd8:	4607      	mov	r7, r0
10010fda:	e7f0      	b.n	10010fbe <_dtoa_r+0xb16>
10010fdc:	9b04      	ldr	r3, [sp, #16]
10010fde:	9301      	str	r3, [sp, #4]
10010fe0:	9d00      	ldr	r5, [sp, #0]
10010fe2:	4631      	mov	r1, r6
10010fe4:	4650      	mov	r0, sl
10010fe6:	f7ff f9d7 	bl	10010398 <quorem>
10010fea:	f100 0930 	add.w	r9, r0, #48	; 0x30
10010fee:	9b00      	ldr	r3, [sp, #0]
10010ff0:	f805 9b01 	strb.w	r9, [r5], #1
10010ff4:	1aea      	subs	r2, r5, r3
10010ff6:	9b01      	ldr	r3, [sp, #4]
10010ff8:	4293      	cmp	r3, r2
10010ffa:	dd07      	ble.n	1001100c <_dtoa_r+0xb64>
10010ffc:	4651      	mov	r1, sl
10010ffe:	2300      	movs	r3, #0
10011000:	220a      	movs	r2, #10
10011002:	4620      	mov	r0, r4
10011004:	f000 f8f0 	bl	100111e8 <__multadd>
10011008:	4682      	mov	sl, r0
1001100a:	e7ea      	b.n	10010fe2 <_dtoa_r+0xb3a>
1001100c:	9b01      	ldr	r3, [sp, #4]
1001100e:	2b00      	cmp	r3, #0
10011010:	bfc8      	it	gt
10011012:	461d      	movgt	r5, r3
10011014:	9b00      	ldr	r3, [sp, #0]
10011016:	bfd8      	it	le
10011018:	2501      	movle	r5, #1
1001101a:	441d      	add	r5, r3
1001101c:	f04f 0800 	mov.w	r8, #0
10011020:	4651      	mov	r1, sl
10011022:	2201      	movs	r2, #1
10011024:	4620      	mov	r0, r4
10011026:	f000 fa8d 	bl	10011544 <__lshift>
1001102a:	4631      	mov	r1, r6
1001102c:	4682      	mov	sl, r0
1001102e:	f000 faf5 	bl	1001161c <__mcmp>
10011032:	2800      	cmp	r0, #0
10011034:	dc96      	bgt.n	10010f64 <_dtoa_r+0xabc>
10011036:	d102      	bne.n	1001103e <_dtoa_r+0xb96>
10011038:	f019 0f01 	tst.w	r9, #1
1001103c:	d192      	bne.n	10010f64 <_dtoa_r+0xabc>
1001103e:	462b      	mov	r3, r5
10011040:	461d      	mov	r5, r3
10011042:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
10011046:	2a30      	cmp	r2, #48	; 0x30
10011048:	d0fa      	beq.n	10011040 <_dtoa_r+0xb98>
1001104a:	e6dd      	b.n	10010e08 <_dtoa_r+0x960>
1001104c:	9a00      	ldr	r2, [sp, #0]
1001104e:	429a      	cmp	r2, r3
10011050:	d189      	bne.n	10010f66 <_dtoa_r+0xabe>
10011052:	f10b 0b01 	add.w	fp, fp, #1
10011056:	2331      	movs	r3, #49	; 0x31
10011058:	e796      	b.n	10010f88 <_dtoa_r+0xae0>
1001105a:	4b0a      	ldr	r3, [pc, #40]	; (10011084 <_dtoa_r+0xbdc>)
1001105c:	f7ff ba99 	b.w	10010592 <_dtoa_r+0xea>
10011060:	9b21      	ldr	r3, [sp, #132]	; 0x84
10011062:	2b00      	cmp	r3, #0
10011064:	f47f aa6d 	bne.w	10010542 <_dtoa_r+0x9a>
10011068:	4b07      	ldr	r3, [pc, #28]	; (10011088 <_dtoa_r+0xbe0>)
1001106a:	f7ff ba92 	b.w	10010592 <_dtoa_r+0xea>
1001106e:	9b01      	ldr	r3, [sp, #4]
10011070:	2b00      	cmp	r3, #0
10011072:	dcb5      	bgt.n	10010fe0 <_dtoa_r+0xb38>
10011074:	9b07      	ldr	r3, [sp, #28]
10011076:	2b02      	cmp	r3, #2
10011078:	f73f aeb1 	bgt.w	10010dde <_dtoa_r+0x936>
1001107c:	e7b0      	b.n	10010fe0 <_dtoa_r+0xb38>
1001107e:	bf00      	nop
10011080:	1001ade4 	.word	0x1001ade4
10011084:	1001ad44 	.word	0x1001ad44
10011088:	1001ad68 	.word	0x1001ad68

1001108c <_free_r>:
1001108c:	b537      	push	{r0, r1, r2, r4, r5, lr}
1001108e:	2900      	cmp	r1, #0
10011090:	d044      	beq.n	1001111c <_free_r+0x90>
10011092:	f851 3c04 	ldr.w	r3, [r1, #-4]
10011096:	9001      	str	r0, [sp, #4]
10011098:	2b00      	cmp	r3, #0
1001109a:	f1a1 0404 	sub.w	r4, r1, #4
1001109e:	bfb8      	it	lt
100110a0:	18e4      	addlt	r4, r4, r3
100110a2:	f7fe fad7 	bl	1000f654 <__malloc_lock>
100110a6:	4a1e      	ldr	r2, [pc, #120]	; (10011120 <_free_r+0x94>)
100110a8:	9801      	ldr	r0, [sp, #4]
100110aa:	6813      	ldr	r3, [r2, #0]
100110ac:	b933      	cbnz	r3, 100110bc <_free_r+0x30>
100110ae:	6063      	str	r3, [r4, #4]
100110b0:	6014      	str	r4, [r2, #0]
100110b2:	b003      	add	sp, #12
100110b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
100110b8:	f7fe bad2 	b.w	1000f660 <__malloc_unlock>
100110bc:	42a3      	cmp	r3, r4
100110be:	d908      	bls.n	100110d2 <_free_r+0x46>
100110c0:	6825      	ldr	r5, [r4, #0]
100110c2:	1961      	adds	r1, r4, r5
100110c4:	428b      	cmp	r3, r1
100110c6:	bf01      	itttt	eq
100110c8:	6819      	ldreq	r1, [r3, #0]
100110ca:	685b      	ldreq	r3, [r3, #4]
100110cc:	1949      	addeq	r1, r1, r5
100110ce:	6021      	streq	r1, [r4, #0]
100110d0:	e7ed      	b.n	100110ae <_free_r+0x22>
100110d2:	461a      	mov	r2, r3
100110d4:	685b      	ldr	r3, [r3, #4]
100110d6:	b10b      	cbz	r3, 100110dc <_free_r+0x50>
100110d8:	42a3      	cmp	r3, r4
100110da:	d9fa      	bls.n	100110d2 <_free_r+0x46>
100110dc:	6811      	ldr	r1, [r2, #0]
100110de:	1855      	adds	r5, r2, r1
100110e0:	42a5      	cmp	r5, r4
100110e2:	d10b      	bne.n	100110fc <_free_r+0x70>
100110e4:	6824      	ldr	r4, [r4, #0]
100110e6:	4421      	add	r1, r4
100110e8:	1854      	adds	r4, r2, r1
100110ea:	42a3      	cmp	r3, r4
100110ec:	6011      	str	r1, [r2, #0]
100110ee:	d1e0      	bne.n	100110b2 <_free_r+0x26>
100110f0:	681c      	ldr	r4, [r3, #0]
100110f2:	685b      	ldr	r3, [r3, #4]
100110f4:	6053      	str	r3, [r2, #4]
100110f6:	440c      	add	r4, r1
100110f8:	6014      	str	r4, [r2, #0]
100110fa:	e7da      	b.n	100110b2 <_free_r+0x26>
100110fc:	d902      	bls.n	10011104 <_free_r+0x78>
100110fe:	230c      	movs	r3, #12
10011100:	6003      	str	r3, [r0, #0]
10011102:	e7d6      	b.n	100110b2 <_free_r+0x26>
10011104:	6825      	ldr	r5, [r4, #0]
10011106:	1961      	adds	r1, r4, r5
10011108:	428b      	cmp	r3, r1
1001110a:	bf04      	itt	eq
1001110c:	6819      	ldreq	r1, [r3, #0]
1001110e:	685b      	ldreq	r3, [r3, #4]
10011110:	6063      	str	r3, [r4, #4]
10011112:	bf04      	itt	eq
10011114:	1949      	addeq	r1, r1, r5
10011116:	6021      	streq	r1, [r4, #0]
10011118:	6054      	str	r4, [r2, #4]
1001111a:	e7ca      	b.n	100110b2 <_free_r+0x26>
1001111c:	b003      	add	sp, #12
1001111e:	bd30      	pop	{r4, r5, pc}
10011120:	10029cd4 	.word	0x10029cd4

10011124 <_Balloc>:
10011124:	b570      	push	{r4, r5, r6, lr}
10011126:	69c6      	ldr	r6, [r0, #28]
10011128:	4604      	mov	r4, r0
1001112a:	460d      	mov	r5, r1
1001112c:	b976      	cbnz	r6, 1001114c <_Balloc+0x28>
1001112e:	2010      	movs	r0, #16
10011130:	f7fe f9e0 	bl	1000f4f4 <malloc>
10011134:	4602      	mov	r2, r0
10011136:	61e0      	str	r0, [r4, #28]
10011138:	b920      	cbnz	r0, 10011144 <_Balloc+0x20>
1001113a:	4b18      	ldr	r3, [pc, #96]	; (1001119c <_Balloc+0x78>)
1001113c:	4818      	ldr	r0, [pc, #96]	; (100111a0 <_Balloc+0x7c>)
1001113e:	216b      	movs	r1, #107	; 0x6b
10011140:	f7fe f9ba 	bl	1000f4b8 <__assert_func>
10011144:	e9c0 6601 	strd	r6, r6, [r0, #4]
10011148:	6006      	str	r6, [r0, #0]
1001114a:	60c6      	str	r6, [r0, #12]
1001114c:	69e6      	ldr	r6, [r4, #28]
1001114e:	68f3      	ldr	r3, [r6, #12]
10011150:	b183      	cbz	r3, 10011174 <_Balloc+0x50>
10011152:	69e3      	ldr	r3, [r4, #28]
10011154:	68db      	ldr	r3, [r3, #12]
10011156:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
1001115a:	b9b8      	cbnz	r0, 1001118c <_Balloc+0x68>
1001115c:	2101      	movs	r1, #1
1001115e:	fa01 f605 	lsl.w	r6, r1, r5
10011162:	1d72      	adds	r2, r6, #5
10011164:	0092      	lsls	r2, r2, #2
10011166:	4620      	mov	r0, r4
10011168:	f000 ff9e 	bl	100120a8 <_calloc_r>
1001116c:	b160      	cbz	r0, 10011188 <_Balloc+0x64>
1001116e:	e9c0 5601 	strd	r5, r6, [r0, #4]
10011172:	e00e      	b.n	10011192 <_Balloc+0x6e>
10011174:	2221      	movs	r2, #33	; 0x21
10011176:	2104      	movs	r1, #4
10011178:	4620      	mov	r0, r4
1001117a:	f000 ff95 	bl	100120a8 <_calloc_r>
1001117e:	69e3      	ldr	r3, [r4, #28]
10011180:	60f0      	str	r0, [r6, #12]
10011182:	68db      	ldr	r3, [r3, #12]
10011184:	2b00      	cmp	r3, #0
10011186:	d1e4      	bne.n	10011152 <_Balloc+0x2e>
10011188:	2000      	movs	r0, #0
1001118a:	bd70      	pop	{r4, r5, r6, pc}
1001118c:	6802      	ldr	r2, [r0, #0]
1001118e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
10011192:	2300      	movs	r3, #0
10011194:	e9c0 3303 	strd	r3, r3, [r0, #12]
10011198:	e7f7      	b.n	1001118a <_Balloc+0x66>
1001119a:	bf00      	nop
1001119c:	1001ad75 	.word	0x1001ad75
100111a0:	1001adf5 	.word	0x1001adf5

100111a4 <_Bfree>:
100111a4:	b570      	push	{r4, r5, r6, lr}
100111a6:	69c6      	ldr	r6, [r0, #28]
100111a8:	4605      	mov	r5, r0
100111aa:	460c      	mov	r4, r1
100111ac:	b976      	cbnz	r6, 100111cc <_Bfree+0x28>
100111ae:	2010      	movs	r0, #16
100111b0:	f7fe f9a0 	bl	1000f4f4 <malloc>
100111b4:	4602      	mov	r2, r0
100111b6:	61e8      	str	r0, [r5, #28]
100111b8:	b920      	cbnz	r0, 100111c4 <_Bfree+0x20>
100111ba:	4b09      	ldr	r3, [pc, #36]	; (100111e0 <_Bfree+0x3c>)
100111bc:	4809      	ldr	r0, [pc, #36]	; (100111e4 <_Bfree+0x40>)
100111be:	218f      	movs	r1, #143	; 0x8f
100111c0:	f7fe f97a 	bl	1000f4b8 <__assert_func>
100111c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
100111c8:	6006      	str	r6, [r0, #0]
100111ca:	60c6      	str	r6, [r0, #12]
100111cc:	b13c      	cbz	r4, 100111de <_Bfree+0x3a>
100111ce:	69eb      	ldr	r3, [r5, #28]
100111d0:	6862      	ldr	r2, [r4, #4]
100111d2:	68db      	ldr	r3, [r3, #12]
100111d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
100111d8:	6021      	str	r1, [r4, #0]
100111da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
100111de:	bd70      	pop	{r4, r5, r6, pc}
100111e0:	1001ad75 	.word	0x1001ad75
100111e4:	1001adf5 	.word	0x1001adf5

100111e8 <__multadd>:
100111e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
100111ec:	690d      	ldr	r5, [r1, #16]
100111ee:	4607      	mov	r7, r0
100111f0:	460c      	mov	r4, r1
100111f2:	461e      	mov	r6, r3
100111f4:	f101 0c14 	add.w	ip, r1, #20
100111f8:	2000      	movs	r0, #0
100111fa:	f8dc 3000 	ldr.w	r3, [ip]
100111fe:	b299      	uxth	r1, r3
10011200:	fb02 6101 	mla	r1, r2, r1, r6
10011204:	0c1e      	lsrs	r6, r3, #16
10011206:	0c0b      	lsrs	r3, r1, #16
10011208:	fb02 3306 	mla	r3, r2, r6, r3
1001120c:	b289      	uxth	r1, r1
1001120e:	3001      	adds	r0, #1
10011210:	eb01 4103 	add.w	r1, r1, r3, lsl #16
10011214:	4285      	cmp	r5, r0
10011216:	f84c 1b04 	str.w	r1, [ip], #4
1001121a:	ea4f 4613 	mov.w	r6, r3, lsr #16
1001121e:	dcec      	bgt.n	100111fa <__multadd+0x12>
10011220:	b30e      	cbz	r6, 10011266 <__multadd+0x7e>
10011222:	68a3      	ldr	r3, [r4, #8]
10011224:	42ab      	cmp	r3, r5
10011226:	dc19      	bgt.n	1001125c <__multadd+0x74>
10011228:	6861      	ldr	r1, [r4, #4]
1001122a:	4638      	mov	r0, r7
1001122c:	3101      	adds	r1, #1
1001122e:	f7ff ff79 	bl	10011124 <_Balloc>
10011232:	4680      	mov	r8, r0
10011234:	b928      	cbnz	r0, 10011242 <__multadd+0x5a>
10011236:	4602      	mov	r2, r0
10011238:	4b0c      	ldr	r3, [pc, #48]	; (1001126c <__multadd+0x84>)
1001123a:	480d      	ldr	r0, [pc, #52]	; (10011270 <__multadd+0x88>)
1001123c:	21ba      	movs	r1, #186	; 0xba
1001123e:	f7fe f93b 	bl	1000f4b8 <__assert_func>
10011242:	6922      	ldr	r2, [r4, #16]
10011244:	3202      	adds	r2, #2
10011246:	f104 010c 	add.w	r1, r4, #12
1001124a:	0092      	lsls	r2, r2, #2
1001124c:	300c      	adds	r0, #12
1001124e:	f7ff f88e 	bl	1001036e <memcpy>
10011252:	4621      	mov	r1, r4
10011254:	4638      	mov	r0, r7
10011256:	f7ff ffa5 	bl	100111a4 <_Bfree>
1001125a:	4644      	mov	r4, r8
1001125c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
10011260:	3501      	adds	r5, #1
10011262:	615e      	str	r6, [r3, #20]
10011264:	6125      	str	r5, [r4, #16]
10011266:	4620      	mov	r0, r4
10011268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1001126c:	1001ade4 	.word	0x1001ade4
10011270:	1001adf5 	.word	0x1001adf5

10011274 <__hi0bits>:
10011274:	0c03      	lsrs	r3, r0, #16
10011276:	041b      	lsls	r3, r3, #16
10011278:	b9d3      	cbnz	r3, 100112b0 <__hi0bits+0x3c>
1001127a:	0400      	lsls	r0, r0, #16
1001127c:	2310      	movs	r3, #16
1001127e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
10011282:	bf04      	itt	eq
10011284:	0200      	lsleq	r0, r0, #8
10011286:	3308      	addeq	r3, #8
10011288:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
1001128c:	bf04      	itt	eq
1001128e:	0100      	lsleq	r0, r0, #4
10011290:	3304      	addeq	r3, #4
10011292:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
10011296:	bf04      	itt	eq
10011298:	0080      	lsleq	r0, r0, #2
1001129a:	3302      	addeq	r3, #2
1001129c:	2800      	cmp	r0, #0
1001129e:	db05      	blt.n	100112ac <__hi0bits+0x38>
100112a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
100112a4:	f103 0301 	add.w	r3, r3, #1
100112a8:	bf08      	it	eq
100112aa:	2320      	moveq	r3, #32
100112ac:	4618      	mov	r0, r3
100112ae:	4770      	bx	lr
100112b0:	2300      	movs	r3, #0
100112b2:	e7e4      	b.n	1001127e <__hi0bits+0xa>

100112b4 <__lo0bits>:
100112b4:	6803      	ldr	r3, [r0, #0]
100112b6:	f013 0207 	ands.w	r2, r3, #7
100112ba:	d00c      	beq.n	100112d6 <__lo0bits+0x22>
100112bc:	07d9      	lsls	r1, r3, #31
100112be:	d422      	bmi.n	10011306 <__lo0bits+0x52>
100112c0:	079a      	lsls	r2, r3, #30
100112c2:	bf49      	itett	mi
100112c4:	085b      	lsrmi	r3, r3, #1
100112c6:	089b      	lsrpl	r3, r3, #2
100112c8:	6003      	strmi	r3, [r0, #0]
100112ca:	2201      	movmi	r2, #1
100112cc:	bf5c      	itt	pl
100112ce:	6003      	strpl	r3, [r0, #0]
100112d0:	2202      	movpl	r2, #2
100112d2:	4610      	mov	r0, r2
100112d4:	4770      	bx	lr
100112d6:	b299      	uxth	r1, r3
100112d8:	b909      	cbnz	r1, 100112de <__lo0bits+0x2a>
100112da:	0c1b      	lsrs	r3, r3, #16
100112dc:	2210      	movs	r2, #16
100112de:	b2d9      	uxtb	r1, r3
100112e0:	b909      	cbnz	r1, 100112e6 <__lo0bits+0x32>
100112e2:	3208      	adds	r2, #8
100112e4:	0a1b      	lsrs	r3, r3, #8
100112e6:	0719      	lsls	r1, r3, #28
100112e8:	bf04      	itt	eq
100112ea:	091b      	lsreq	r3, r3, #4
100112ec:	3204      	addeq	r2, #4
100112ee:	0799      	lsls	r1, r3, #30
100112f0:	bf04      	itt	eq
100112f2:	089b      	lsreq	r3, r3, #2
100112f4:	3202      	addeq	r2, #2
100112f6:	07d9      	lsls	r1, r3, #31
100112f8:	d403      	bmi.n	10011302 <__lo0bits+0x4e>
100112fa:	085b      	lsrs	r3, r3, #1
100112fc:	f102 0201 	add.w	r2, r2, #1
10011300:	d003      	beq.n	1001130a <__lo0bits+0x56>
10011302:	6003      	str	r3, [r0, #0]
10011304:	e7e5      	b.n	100112d2 <__lo0bits+0x1e>
10011306:	2200      	movs	r2, #0
10011308:	e7e3      	b.n	100112d2 <__lo0bits+0x1e>
1001130a:	2220      	movs	r2, #32
1001130c:	e7e1      	b.n	100112d2 <__lo0bits+0x1e>
	...

10011310 <__i2b>:
10011310:	b510      	push	{r4, lr}
10011312:	460c      	mov	r4, r1
10011314:	2101      	movs	r1, #1
10011316:	f7ff ff05 	bl	10011124 <_Balloc>
1001131a:	4602      	mov	r2, r0
1001131c:	b928      	cbnz	r0, 1001132a <__i2b+0x1a>
1001131e:	4b05      	ldr	r3, [pc, #20]	; (10011334 <__i2b+0x24>)
10011320:	4805      	ldr	r0, [pc, #20]	; (10011338 <__i2b+0x28>)
10011322:	f240 1145 	movw	r1, #325	; 0x145
10011326:	f7fe f8c7 	bl	1000f4b8 <__assert_func>
1001132a:	2301      	movs	r3, #1
1001132c:	6144      	str	r4, [r0, #20]
1001132e:	6103      	str	r3, [r0, #16]
10011330:	bd10      	pop	{r4, pc}
10011332:	bf00      	nop
10011334:	1001ade4 	.word	0x1001ade4
10011338:	1001adf5 	.word	0x1001adf5

1001133c <__multiply>:
1001133c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10011340:	4691      	mov	r9, r2
10011342:	690a      	ldr	r2, [r1, #16]
10011344:	f8d9 3010 	ldr.w	r3, [r9, #16]
10011348:	429a      	cmp	r2, r3
1001134a:	bfb8      	it	lt
1001134c:	460b      	movlt	r3, r1
1001134e:	460c      	mov	r4, r1
10011350:	bfbc      	itt	lt
10011352:	464c      	movlt	r4, r9
10011354:	4699      	movlt	r9, r3
10011356:	6927      	ldr	r7, [r4, #16]
10011358:	f8d9 a010 	ldr.w	sl, [r9, #16]
1001135c:	68a3      	ldr	r3, [r4, #8]
1001135e:	6861      	ldr	r1, [r4, #4]
10011360:	eb07 060a 	add.w	r6, r7, sl
10011364:	42b3      	cmp	r3, r6
10011366:	b085      	sub	sp, #20
10011368:	bfb8      	it	lt
1001136a:	3101      	addlt	r1, #1
1001136c:	f7ff feda 	bl	10011124 <_Balloc>
10011370:	b930      	cbnz	r0, 10011380 <__multiply+0x44>
10011372:	4602      	mov	r2, r0
10011374:	4b44      	ldr	r3, [pc, #272]	; (10011488 <__multiply+0x14c>)
10011376:	4845      	ldr	r0, [pc, #276]	; (1001148c <__multiply+0x150>)
10011378:	f44f 71b1 	mov.w	r1, #354	; 0x162
1001137c:	f7fe f89c 	bl	1000f4b8 <__assert_func>
10011380:	f100 0514 	add.w	r5, r0, #20
10011384:	eb05 0886 	add.w	r8, r5, r6, lsl #2
10011388:	462b      	mov	r3, r5
1001138a:	2200      	movs	r2, #0
1001138c:	4543      	cmp	r3, r8
1001138e:	d321      	bcc.n	100113d4 <__multiply+0x98>
10011390:	f104 0314 	add.w	r3, r4, #20
10011394:	eb03 0787 	add.w	r7, r3, r7, lsl #2
10011398:	f109 0314 	add.w	r3, r9, #20
1001139c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
100113a0:	9202      	str	r2, [sp, #8]
100113a2:	1b3a      	subs	r2, r7, r4
100113a4:	3a15      	subs	r2, #21
100113a6:	f022 0203 	bic.w	r2, r2, #3
100113aa:	3204      	adds	r2, #4
100113ac:	f104 0115 	add.w	r1, r4, #21
100113b0:	428f      	cmp	r7, r1
100113b2:	bf38      	it	cc
100113b4:	2204      	movcc	r2, #4
100113b6:	9201      	str	r2, [sp, #4]
100113b8:	9a02      	ldr	r2, [sp, #8]
100113ba:	9303      	str	r3, [sp, #12]
100113bc:	429a      	cmp	r2, r3
100113be:	d80c      	bhi.n	100113da <__multiply+0x9e>
100113c0:	2e00      	cmp	r6, #0
100113c2:	dd03      	ble.n	100113cc <__multiply+0x90>
100113c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
100113c8:	2b00      	cmp	r3, #0
100113ca:	d05b      	beq.n	10011484 <__multiply+0x148>
100113cc:	6106      	str	r6, [r0, #16]
100113ce:	b005      	add	sp, #20
100113d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
100113d4:	f843 2b04 	str.w	r2, [r3], #4
100113d8:	e7d8      	b.n	1001138c <__multiply+0x50>
100113da:	f8b3 a000 	ldrh.w	sl, [r3]
100113de:	f1ba 0f00 	cmp.w	sl, #0
100113e2:	d024      	beq.n	1001142e <__multiply+0xf2>
100113e4:	f104 0e14 	add.w	lr, r4, #20
100113e8:	46a9      	mov	r9, r5
100113ea:	f04f 0c00 	mov.w	ip, #0
100113ee:	f85e 2b04 	ldr.w	r2, [lr], #4
100113f2:	f8d9 1000 	ldr.w	r1, [r9]
100113f6:	fa1f fb82 	uxth.w	fp, r2
100113fa:	b289      	uxth	r1, r1
100113fc:	fb0a 110b 	mla	r1, sl, fp, r1
10011400:	ea4f 4b12 	mov.w	fp, r2, lsr #16
10011404:	f8d9 2000 	ldr.w	r2, [r9]
10011408:	4461      	add	r1, ip
1001140a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
1001140e:	fb0a c20b 	mla	r2, sl, fp, ip
10011412:	eb02 4211 	add.w	r2, r2, r1, lsr #16
10011416:	b289      	uxth	r1, r1
10011418:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
1001141c:	4577      	cmp	r7, lr
1001141e:	f849 1b04 	str.w	r1, [r9], #4
10011422:	ea4f 4c12 	mov.w	ip, r2, lsr #16
10011426:	d8e2      	bhi.n	100113ee <__multiply+0xb2>
10011428:	9a01      	ldr	r2, [sp, #4]
1001142a:	f845 c002 	str.w	ip, [r5, r2]
1001142e:	9a03      	ldr	r2, [sp, #12]
10011430:	f8b2 9002 	ldrh.w	r9, [r2, #2]
10011434:	3304      	adds	r3, #4
10011436:	f1b9 0f00 	cmp.w	r9, #0
1001143a:	d021      	beq.n	10011480 <__multiply+0x144>
1001143c:	6829      	ldr	r1, [r5, #0]
1001143e:	f104 0c14 	add.w	ip, r4, #20
10011442:	46ae      	mov	lr, r5
10011444:	f04f 0a00 	mov.w	sl, #0
10011448:	f8bc b000 	ldrh.w	fp, [ip]
1001144c:	f8be 2002 	ldrh.w	r2, [lr, #2]
10011450:	fb09 220b 	mla	r2, r9, fp, r2
10011454:	4452      	add	r2, sl
10011456:	b289      	uxth	r1, r1
10011458:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
1001145c:	f84e 1b04 	str.w	r1, [lr], #4
10011460:	f85c 1b04 	ldr.w	r1, [ip], #4
10011464:	ea4f 4a11 	mov.w	sl, r1, lsr #16
10011468:	f8be 1000 	ldrh.w	r1, [lr]
1001146c:	fb09 110a 	mla	r1, r9, sl, r1
10011470:	eb01 4112 	add.w	r1, r1, r2, lsr #16
10011474:	4567      	cmp	r7, ip
10011476:	ea4f 4a11 	mov.w	sl, r1, lsr #16
1001147a:	d8e5      	bhi.n	10011448 <__multiply+0x10c>
1001147c:	9a01      	ldr	r2, [sp, #4]
1001147e:	50a9      	str	r1, [r5, r2]
10011480:	3504      	adds	r5, #4
10011482:	e799      	b.n	100113b8 <__multiply+0x7c>
10011484:	3e01      	subs	r6, #1
10011486:	e79b      	b.n	100113c0 <__multiply+0x84>
10011488:	1001ade4 	.word	0x1001ade4
1001148c:	1001adf5 	.word	0x1001adf5

10011490 <__pow5mult>:
10011490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10011494:	4615      	mov	r5, r2
10011496:	f012 0203 	ands.w	r2, r2, #3
1001149a:	4606      	mov	r6, r0
1001149c:	460f      	mov	r7, r1
1001149e:	d007      	beq.n	100114b0 <__pow5mult+0x20>
100114a0:	4c25      	ldr	r4, [pc, #148]	; (10011538 <__pow5mult+0xa8>)
100114a2:	3a01      	subs	r2, #1
100114a4:	2300      	movs	r3, #0
100114a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
100114aa:	f7ff fe9d 	bl	100111e8 <__multadd>
100114ae:	4607      	mov	r7, r0
100114b0:	10ad      	asrs	r5, r5, #2
100114b2:	d03d      	beq.n	10011530 <__pow5mult+0xa0>
100114b4:	69f4      	ldr	r4, [r6, #28]
100114b6:	b97c      	cbnz	r4, 100114d8 <__pow5mult+0x48>
100114b8:	2010      	movs	r0, #16
100114ba:	f7fe f81b 	bl	1000f4f4 <malloc>
100114be:	4602      	mov	r2, r0
100114c0:	61f0      	str	r0, [r6, #28]
100114c2:	b928      	cbnz	r0, 100114d0 <__pow5mult+0x40>
100114c4:	4b1d      	ldr	r3, [pc, #116]	; (1001153c <__pow5mult+0xac>)
100114c6:	481e      	ldr	r0, [pc, #120]	; (10011540 <__pow5mult+0xb0>)
100114c8:	f240 11b3 	movw	r1, #435	; 0x1b3
100114cc:	f7fd fff4 	bl	1000f4b8 <__assert_func>
100114d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
100114d4:	6004      	str	r4, [r0, #0]
100114d6:	60c4      	str	r4, [r0, #12]
100114d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
100114dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
100114e0:	b94c      	cbnz	r4, 100114f6 <__pow5mult+0x66>
100114e2:	f240 2171 	movw	r1, #625	; 0x271
100114e6:	4630      	mov	r0, r6
100114e8:	f7ff ff12 	bl	10011310 <__i2b>
100114ec:	2300      	movs	r3, #0
100114ee:	f8c8 0008 	str.w	r0, [r8, #8]
100114f2:	4604      	mov	r4, r0
100114f4:	6003      	str	r3, [r0, #0]
100114f6:	f04f 0900 	mov.w	r9, #0
100114fa:	07eb      	lsls	r3, r5, #31
100114fc:	d50a      	bpl.n	10011514 <__pow5mult+0x84>
100114fe:	4639      	mov	r1, r7
10011500:	4622      	mov	r2, r4
10011502:	4630      	mov	r0, r6
10011504:	f7ff ff1a 	bl	1001133c <__multiply>
10011508:	4639      	mov	r1, r7
1001150a:	4680      	mov	r8, r0
1001150c:	4630      	mov	r0, r6
1001150e:	f7ff fe49 	bl	100111a4 <_Bfree>
10011512:	4647      	mov	r7, r8
10011514:	106d      	asrs	r5, r5, #1
10011516:	d00b      	beq.n	10011530 <__pow5mult+0xa0>
10011518:	6820      	ldr	r0, [r4, #0]
1001151a:	b938      	cbnz	r0, 1001152c <__pow5mult+0x9c>
1001151c:	4622      	mov	r2, r4
1001151e:	4621      	mov	r1, r4
10011520:	4630      	mov	r0, r6
10011522:	f7ff ff0b 	bl	1001133c <__multiply>
10011526:	6020      	str	r0, [r4, #0]
10011528:	f8c0 9000 	str.w	r9, [r0]
1001152c:	4604      	mov	r4, r0
1001152e:	e7e4      	b.n	100114fa <__pow5mult+0x6a>
10011530:	4638      	mov	r0, r7
10011532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
10011536:	bf00      	nop
10011538:	1001af40 	.word	0x1001af40
1001153c:	1001ad75 	.word	0x1001ad75
10011540:	1001adf5 	.word	0x1001adf5

10011544 <__lshift>:
10011544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10011548:	460c      	mov	r4, r1
1001154a:	6849      	ldr	r1, [r1, #4]
1001154c:	6923      	ldr	r3, [r4, #16]
1001154e:	eb03 1862 	add.w	r8, r3, r2, asr #5
10011552:	68a3      	ldr	r3, [r4, #8]
10011554:	4607      	mov	r7, r0
10011556:	4691      	mov	r9, r2
10011558:	ea4f 1a62 	mov.w	sl, r2, asr #5
1001155c:	f108 0601 	add.w	r6, r8, #1
10011560:	42b3      	cmp	r3, r6
10011562:	db0b      	blt.n	1001157c <__lshift+0x38>
10011564:	4638      	mov	r0, r7
10011566:	f7ff fddd 	bl	10011124 <_Balloc>
1001156a:	4605      	mov	r5, r0
1001156c:	b948      	cbnz	r0, 10011582 <__lshift+0x3e>
1001156e:	4602      	mov	r2, r0
10011570:	4b28      	ldr	r3, [pc, #160]	; (10011614 <__lshift+0xd0>)
10011572:	4829      	ldr	r0, [pc, #164]	; (10011618 <__lshift+0xd4>)
10011574:	f44f 71ef 	mov.w	r1, #478	; 0x1de
10011578:	f7fd ff9e 	bl	1000f4b8 <__assert_func>
1001157c:	3101      	adds	r1, #1
1001157e:	005b      	lsls	r3, r3, #1
10011580:	e7ee      	b.n	10011560 <__lshift+0x1c>
10011582:	2300      	movs	r3, #0
10011584:	f100 0114 	add.w	r1, r0, #20
10011588:	f100 0210 	add.w	r2, r0, #16
1001158c:	4618      	mov	r0, r3
1001158e:	4553      	cmp	r3, sl
10011590:	db33      	blt.n	100115fa <__lshift+0xb6>
10011592:	6920      	ldr	r0, [r4, #16]
10011594:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
10011598:	f104 0314 	add.w	r3, r4, #20
1001159c:	f019 091f 	ands.w	r9, r9, #31
100115a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
100115a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
100115a8:	d02b      	beq.n	10011602 <__lshift+0xbe>
100115aa:	f1c9 0e20 	rsb	lr, r9, #32
100115ae:	468a      	mov	sl, r1
100115b0:	2200      	movs	r2, #0
100115b2:	6818      	ldr	r0, [r3, #0]
100115b4:	fa00 f009 	lsl.w	r0, r0, r9
100115b8:	4310      	orrs	r0, r2
100115ba:	f84a 0b04 	str.w	r0, [sl], #4
100115be:	f853 2b04 	ldr.w	r2, [r3], #4
100115c2:	459c      	cmp	ip, r3
100115c4:	fa22 f20e 	lsr.w	r2, r2, lr
100115c8:	d8f3      	bhi.n	100115b2 <__lshift+0x6e>
100115ca:	ebac 0304 	sub.w	r3, ip, r4
100115ce:	3b15      	subs	r3, #21
100115d0:	f023 0303 	bic.w	r3, r3, #3
100115d4:	3304      	adds	r3, #4
100115d6:	f104 0015 	add.w	r0, r4, #21
100115da:	4584      	cmp	ip, r0
100115dc:	bf38      	it	cc
100115de:	2304      	movcc	r3, #4
100115e0:	50ca      	str	r2, [r1, r3]
100115e2:	b10a      	cbz	r2, 100115e8 <__lshift+0xa4>
100115e4:	f108 0602 	add.w	r6, r8, #2
100115e8:	3e01      	subs	r6, #1
100115ea:	4638      	mov	r0, r7
100115ec:	612e      	str	r6, [r5, #16]
100115ee:	4621      	mov	r1, r4
100115f0:	f7ff fdd8 	bl	100111a4 <_Bfree>
100115f4:	4628      	mov	r0, r5
100115f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
100115fa:	f842 0f04 	str.w	r0, [r2, #4]!
100115fe:	3301      	adds	r3, #1
10011600:	e7c5      	b.n	1001158e <__lshift+0x4a>
10011602:	3904      	subs	r1, #4
10011604:	f853 2b04 	ldr.w	r2, [r3], #4
10011608:	f841 2f04 	str.w	r2, [r1, #4]!
1001160c:	459c      	cmp	ip, r3
1001160e:	d8f9      	bhi.n	10011604 <__lshift+0xc0>
10011610:	e7ea      	b.n	100115e8 <__lshift+0xa4>
10011612:	bf00      	nop
10011614:	1001ade4 	.word	0x1001ade4
10011618:	1001adf5 	.word	0x1001adf5

1001161c <__mcmp>:
1001161c:	b530      	push	{r4, r5, lr}
1001161e:	6902      	ldr	r2, [r0, #16]
10011620:	690c      	ldr	r4, [r1, #16]
10011622:	1b12      	subs	r2, r2, r4
10011624:	d10e      	bne.n	10011644 <__mcmp+0x28>
10011626:	f100 0314 	add.w	r3, r0, #20
1001162a:	3114      	adds	r1, #20
1001162c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
10011630:	eb01 0184 	add.w	r1, r1, r4, lsl #2
10011634:	f850 5d04 	ldr.w	r5, [r0, #-4]!
10011638:	f851 4d04 	ldr.w	r4, [r1, #-4]!
1001163c:	42a5      	cmp	r5, r4
1001163e:	d003      	beq.n	10011648 <__mcmp+0x2c>
10011640:	d305      	bcc.n	1001164e <__mcmp+0x32>
10011642:	2201      	movs	r2, #1
10011644:	4610      	mov	r0, r2
10011646:	bd30      	pop	{r4, r5, pc}
10011648:	4283      	cmp	r3, r0
1001164a:	d3f3      	bcc.n	10011634 <__mcmp+0x18>
1001164c:	e7fa      	b.n	10011644 <__mcmp+0x28>
1001164e:	f04f 32ff 	mov.w	r2, #4294967295
10011652:	e7f7      	b.n	10011644 <__mcmp+0x28>

10011654 <__mdiff>:
10011654:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
10011658:	460c      	mov	r4, r1
1001165a:	4606      	mov	r6, r0
1001165c:	4611      	mov	r1, r2
1001165e:	4620      	mov	r0, r4
10011660:	4690      	mov	r8, r2
10011662:	f7ff ffdb 	bl	1001161c <__mcmp>
10011666:	1e05      	subs	r5, r0, #0
10011668:	d110      	bne.n	1001168c <__mdiff+0x38>
1001166a:	4629      	mov	r1, r5
1001166c:	4630      	mov	r0, r6
1001166e:	f7ff fd59 	bl	10011124 <_Balloc>
10011672:	b930      	cbnz	r0, 10011682 <__mdiff+0x2e>
10011674:	4b3a      	ldr	r3, [pc, #232]	; (10011760 <__mdiff+0x10c>)
10011676:	4602      	mov	r2, r0
10011678:	f240 2137 	movw	r1, #567	; 0x237
1001167c:	4839      	ldr	r0, [pc, #228]	; (10011764 <__mdiff+0x110>)
1001167e:	f7fd ff1b 	bl	1000f4b8 <__assert_func>
10011682:	2301      	movs	r3, #1
10011684:	e9c0 3504 	strd	r3, r5, [r0, #16]
10011688:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001168c:	bfa4      	itt	ge
1001168e:	4643      	movge	r3, r8
10011690:	46a0      	movge	r8, r4
10011692:	4630      	mov	r0, r6
10011694:	f8d8 1004 	ldr.w	r1, [r8, #4]
10011698:	bfa6      	itte	ge
1001169a:	461c      	movge	r4, r3
1001169c:	2500      	movge	r5, #0
1001169e:	2501      	movlt	r5, #1
100116a0:	f7ff fd40 	bl	10011124 <_Balloc>
100116a4:	b920      	cbnz	r0, 100116b0 <__mdiff+0x5c>
100116a6:	4b2e      	ldr	r3, [pc, #184]	; (10011760 <__mdiff+0x10c>)
100116a8:	4602      	mov	r2, r0
100116aa:	f240 2145 	movw	r1, #581	; 0x245
100116ae:	e7e5      	b.n	1001167c <__mdiff+0x28>
100116b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
100116b4:	6926      	ldr	r6, [r4, #16]
100116b6:	60c5      	str	r5, [r0, #12]
100116b8:	f104 0914 	add.w	r9, r4, #20
100116bc:	f108 0514 	add.w	r5, r8, #20
100116c0:	f100 0e14 	add.w	lr, r0, #20
100116c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
100116c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
100116cc:	f108 0210 	add.w	r2, r8, #16
100116d0:	46f2      	mov	sl, lr
100116d2:	2100      	movs	r1, #0
100116d4:	f859 3b04 	ldr.w	r3, [r9], #4
100116d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
100116dc:	fa11 f88b 	uxtah	r8, r1, fp
100116e0:	b299      	uxth	r1, r3
100116e2:	0c1b      	lsrs	r3, r3, #16
100116e4:	eba8 0801 	sub.w	r8, r8, r1
100116e8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
100116ec:	eb03 4328 	add.w	r3, r3, r8, asr #16
100116f0:	fa1f f888 	uxth.w	r8, r8
100116f4:	1419      	asrs	r1, r3, #16
100116f6:	454e      	cmp	r6, r9
100116f8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
100116fc:	f84a 3b04 	str.w	r3, [sl], #4
10011700:	d8e8      	bhi.n	100116d4 <__mdiff+0x80>
10011702:	1b33      	subs	r3, r6, r4
10011704:	3b15      	subs	r3, #21
10011706:	f023 0303 	bic.w	r3, r3, #3
1001170a:	3304      	adds	r3, #4
1001170c:	3415      	adds	r4, #21
1001170e:	42a6      	cmp	r6, r4
10011710:	bf38      	it	cc
10011712:	2304      	movcc	r3, #4
10011714:	441d      	add	r5, r3
10011716:	4473      	add	r3, lr
10011718:	469e      	mov	lr, r3
1001171a:	462e      	mov	r6, r5
1001171c:	4566      	cmp	r6, ip
1001171e:	d30e      	bcc.n	1001173e <__mdiff+0xea>
10011720:	f10c 0203 	add.w	r2, ip, #3
10011724:	1b52      	subs	r2, r2, r5
10011726:	f022 0203 	bic.w	r2, r2, #3
1001172a:	3d03      	subs	r5, #3
1001172c:	45ac      	cmp	ip, r5
1001172e:	bf38      	it	cc
10011730:	2200      	movcc	r2, #0
10011732:	4413      	add	r3, r2
10011734:	f853 2d04 	ldr.w	r2, [r3, #-4]!
10011738:	b17a      	cbz	r2, 1001175a <__mdiff+0x106>
1001173a:	6107      	str	r7, [r0, #16]
1001173c:	e7a4      	b.n	10011688 <__mdiff+0x34>
1001173e:	f856 8b04 	ldr.w	r8, [r6], #4
10011742:	fa11 f288 	uxtah	r2, r1, r8
10011746:	1414      	asrs	r4, r2, #16
10011748:	eb04 4418 	add.w	r4, r4, r8, lsr #16
1001174c:	b292      	uxth	r2, r2
1001174e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
10011752:	f84e 2b04 	str.w	r2, [lr], #4
10011756:	1421      	asrs	r1, r4, #16
10011758:	e7e0      	b.n	1001171c <__mdiff+0xc8>
1001175a:	3f01      	subs	r7, #1
1001175c:	e7ea      	b.n	10011734 <__mdiff+0xe0>
1001175e:	bf00      	nop
10011760:	1001ade4 	.word	0x1001ade4
10011764:	1001adf5 	.word	0x1001adf5

10011768 <__d2b>:
10011768:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
1001176c:	460f      	mov	r7, r1
1001176e:	2101      	movs	r1, #1
10011770:	ec59 8b10 	vmov	r8, r9, d0
10011774:	4616      	mov	r6, r2
10011776:	f7ff fcd5 	bl	10011124 <_Balloc>
1001177a:	4604      	mov	r4, r0
1001177c:	b930      	cbnz	r0, 1001178c <__d2b+0x24>
1001177e:	4602      	mov	r2, r0
10011780:	4b24      	ldr	r3, [pc, #144]	; (10011814 <__d2b+0xac>)
10011782:	4825      	ldr	r0, [pc, #148]	; (10011818 <__d2b+0xb0>)
10011784:	f240 310f 	movw	r1, #783	; 0x30f
10011788:	f7fd fe96 	bl	1000f4b8 <__assert_func>
1001178c:	f3c9 550a 	ubfx	r5, r9, #20, #11
10011790:	f3c9 0313 	ubfx	r3, r9, #0, #20
10011794:	bb2d      	cbnz	r5, 100117e2 <__d2b+0x7a>
10011796:	9301      	str	r3, [sp, #4]
10011798:	f1b8 0300 	subs.w	r3, r8, #0
1001179c:	d026      	beq.n	100117ec <__d2b+0x84>
1001179e:	4668      	mov	r0, sp
100117a0:	9300      	str	r3, [sp, #0]
100117a2:	f7ff fd87 	bl	100112b4 <__lo0bits>
100117a6:	e9dd 1200 	ldrd	r1, r2, [sp]
100117aa:	b1e8      	cbz	r0, 100117e8 <__d2b+0x80>
100117ac:	f1c0 0320 	rsb	r3, r0, #32
100117b0:	fa02 f303 	lsl.w	r3, r2, r3
100117b4:	430b      	orrs	r3, r1
100117b6:	40c2      	lsrs	r2, r0
100117b8:	6163      	str	r3, [r4, #20]
100117ba:	9201      	str	r2, [sp, #4]
100117bc:	9b01      	ldr	r3, [sp, #4]
100117be:	61a3      	str	r3, [r4, #24]
100117c0:	2b00      	cmp	r3, #0
100117c2:	bf14      	ite	ne
100117c4:	2202      	movne	r2, #2
100117c6:	2201      	moveq	r2, #1
100117c8:	6122      	str	r2, [r4, #16]
100117ca:	b1bd      	cbz	r5, 100117fc <__d2b+0x94>
100117cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
100117d0:	4405      	add	r5, r0
100117d2:	603d      	str	r5, [r7, #0]
100117d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
100117d8:	6030      	str	r0, [r6, #0]
100117da:	4620      	mov	r0, r4
100117dc:	b003      	add	sp, #12
100117de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
100117e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
100117e6:	e7d6      	b.n	10011796 <__d2b+0x2e>
100117e8:	6161      	str	r1, [r4, #20]
100117ea:	e7e7      	b.n	100117bc <__d2b+0x54>
100117ec:	a801      	add	r0, sp, #4
100117ee:	f7ff fd61 	bl	100112b4 <__lo0bits>
100117f2:	9b01      	ldr	r3, [sp, #4]
100117f4:	6163      	str	r3, [r4, #20]
100117f6:	3020      	adds	r0, #32
100117f8:	2201      	movs	r2, #1
100117fa:	e7e5      	b.n	100117c8 <__d2b+0x60>
100117fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
10011800:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
10011804:	6038      	str	r0, [r7, #0]
10011806:	6918      	ldr	r0, [r3, #16]
10011808:	f7ff fd34 	bl	10011274 <__hi0bits>
1001180c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
10011810:	e7e2      	b.n	100117d8 <__d2b+0x70>
10011812:	bf00      	nop
10011814:	1001ade4 	.word	0x1001ade4
10011818:	1001adf5 	.word	0x1001adf5

1001181c <_malloc_usable_size_r>:
1001181c:	f851 3c04 	ldr.w	r3, [r1, #-4]
10011820:	1f18      	subs	r0, r3, #4
10011822:	2b00      	cmp	r3, #0
10011824:	bfbc      	itt	lt
10011826:	580b      	ldrlt	r3, [r1, r0]
10011828:	18c0      	addlt	r0, r0, r3
1001182a:	4770      	bx	lr

1001182c <__ssputs_r>:
1001182c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10011830:	688e      	ldr	r6, [r1, #8]
10011832:	461f      	mov	r7, r3
10011834:	42be      	cmp	r6, r7
10011836:	680b      	ldr	r3, [r1, #0]
10011838:	4682      	mov	sl, r0
1001183a:	460c      	mov	r4, r1
1001183c:	4690      	mov	r8, r2
1001183e:	d82c      	bhi.n	1001189a <__ssputs_r+0x6e>
10011840:	898a      	ldrh	r2, [r1, #12]
10011842:	f412 6f90 	tst.w	r2, #1152	; 0x480
10011846:	d026      	beq.n	10011896 <__ssputs_r+0x6a>
10011848:	6965      	ldr	r5, [r4, #20]
1001184a:	6909      	ldr	r1, [r1, #16]
1001184c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
10011850:	eba3 0901 	sub.w	r9, r3, r1
10011854:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
10011858:	1c7b      	adds	r3, r7, #1
1001185a:	444b      	add	r3, r9
1001185c:	106d      	asrs	r5, r5, #1
1001185e:	429d      	cmp	r5, r3
10011860:	bf38      	it	cc
10011862:	461d      	movcc	r5, r3
10011864:	0553      	lsls	r3, r2, #21
10011866:	d527      	bpl.n	100118b8 <__ssputs_r+0x8c>
10011868:	4629      	mov	r1, r5
1001186a:	f7fd fe73 	bl	1000f554 <_malloc_r>
1001186e:	4606      	mov	r6, r0
10011870:	b360      	cbz	r0, 100118cc <__ssputs_r+0xa0>
10011872:	6921      	ldr	r1, [r4, #16]
10011874:	464a      	mov	r2, r9
10011876:	f7fe fd7a 	bl	1001036e <memcpy>
1001187a:	89a3      	ldrh	r3, [r4, #12]
1001187c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
10011880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
10011884:	81a3      	strh	r3, [r4, #12]
10011886:	6126      	str	r6, [r4, #16]
10011888:	6165      	str	r5, [r4, #20]
1001188a:	444e      	add	r6, r9
1001188c:	eba5 0509 	sub.w	r5, r5, r9
10011890:	6026      	str	r6, [r4, #0]
10011892:	60a5      	str	r5, [r4, #8]
10011894:	463e      	mov	r6, r7
10011896:	42be      	cmp	r6, r7
10011898:	d900      	bls.n	1001189c <__ssputs_r+0x70>
1001189a:	463e      	mov	r6, r7
1001189c:	6820      	ldr	r0, [r4, #0]
1001189e:	4632      	mov	r2, r6
100118a0:	4641      	mov	r1, r8
100118a2:	f000 fba3 	bl	10011fec <memmove>
100118a6:	68a3      	ldr	r3, [r4, #8]
100118a8:	1b9b      	subs	r3, r3, r6
100118aa:	60a3      	str	r3, [r4, #8]
100118ac:	6823      	ldr	r3, [r4, #0]
100118ae:	4433      	add	r3, r6
100118b0:	6023      	str	r3, [r4, #0]
100118b2:	2000      	movs	r0, #0
100118b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
100118b8:	462a      	mov	r2, r5
100118ba:	f7fd fed7 	bl	1000f66c <_realloc_r>
100118be:	4606      	mov	r6, r0
100118c0:	2800      	cmp	r0, #0
100118c2:	d1e0      	bne.n	10011886 <__ssputs_r+0x5a>
100118c4:	6921      	ldr	r1, [r4, #16]
100118c6:	4650      	mov	r0, sl
100118c8:	f7ff fbe0 	bl	1001108c <_free_r>
100118cc:	230c      	movs	r3, #12
100118ce:	f8ca 3000 	str.w	r3, [sl]
100118d2:	89a3      	ldrh	r3, [r4, #12]
100118d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100118d8:	81a3      	strh	r3, [r4, #12]
100118da:	f04f 30ff 	mov.w	r0, #4294967295
100118de:	e7e9      	b.n	100118b4 <__ssputs_r+0x88>

100118e0 <_svfiprintf_r>:
100118e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
100118e4:	4698      	mov	r8, r3
100118e6:	898b      	ldrh	r3, [r1, #12]
100118e8:	061b      	lsls	r3, r3, #24
100118ea:	b09d      	sub	sp, #116	; 0x74
100118ec:	4607      	mov	r7, r0
100118ee:	460d      	mov	r5, r1
100118f0:	4614      	mov	r4, r2
100118f2:	d50e      	bpl.n	10011912 <_svfiprintf_r+0x32>
100118f4:	690b      	ldr	r3, [r1, #16]
100118f6:	b963      	cbnz	r3, 10011912 <_svfiprintf_r+0x32>
100118f8:	2140      	movs	r1, #64	; 0x40
100118fa:	f7fd fe2b 	bl	1000f554 <_malloc_r>
100118fe:	6028      	str	r0, [r5, #0]
10011900:	6128      	str	r0, [r5, #16]
10011902:	b920      	cbnz	r0, 1001190e <_svfiprintf_r+0x2e>
10011904:	230c      	movs	r3, #12
10011906:	603b      	str	r3, [r7, #0]
10011908:	f04f 30ff 	mov.w	r0, #4294967295
1001190c:	e0d0      	b.n	10011ab0 <_svfiprintf_r+0x1d0>
1001190e:	2340      	movs	r3, #64	; 0x40
10011910:	616b      	str	r3, [r5, #20]
10011912:	2300      	movs	r3, #0
10011914:	9309      	str	r3, [sp, #36]	; 0x24
10011916:	2320      	movs	r3, #32
10011918:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1001191c:	f8cd 800c 	str.w	r8, [sp, #12]
10011920:	2330      	movs	r3, #48	; 0x30
10011922:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 10011ac8 <_svfiprintf_r+0x1e8>
10011926:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1001192a:	f04f 0901 	mov.w	r9, #1
1001192e:	4623      	mov	r3, r4
10011930:	469a      	mov	sl, r3
10011932:	f813 2b01 	ldrb.w	r2, [r3], #1
10011936:	b10a      	cbz	r2, 1001193c <_svfiprintf_r+0x5c>
10011938:	2a25      	cmp	r2, #37	; 0x25
1001193a:	d1f9      	bne.n	10011930 <_svfiprintf_r+0x50>
1001193c:	ebba 0b04 	subs.w	fp, sl, r4
10011940:	d00b      	beq.n	1001195a <_svfiprintf_r+0x7a>
10011942:	465b      	mov	r3, fp
10011944:	4622      	mov	r2, r4
10011946:	4629      	mov	r1, r5
10011948:	4638      	mov	r0, r7
1001194a:	f7ff ff6f 	bl	1001182c <__ssputs_r>
1001194e:	3001      	adds	r0, #1
10011950:	f000 80a9 	beq.w	10011aa6 <_svfiprintf_r+0x1c6>
10011954:	9a09      	ldr	r2, [sp, #36]	; 0x24
10011956:	445a      	add	r2, fp
10011958:	9209      	str	r2, [sp, #36]	; 0x24
1001195a:	f89a 3000 	ldrb.w	r3, [sl]
1001195e:	2b00      	cmp	r3, #0
10011960:	f000 80a1 	beq.w	10011aa6 <_svfiprintf_r+0x1c6>
10011964:	2300      	movs	r3, #0
10011966:	f04f 32ff 	mov.w	r2, #4294967295
1001196a:	e9cd 2305 	strd	r2, r3, [sp, #20]
1001196e:	f10a 0a01 	add.w	sl, sl, #1
10011972:	9304      	str	r3, [sp, #16]
10011974:	9307      	str	r3, [sp, #28]
10011976:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1001197a:	931a      	str	r3, [sp, #104]	; 0x68
1001197c:	4654      	mov	r4, sl
1001197e:	2205      	movs	r2, #5
10011980:	f814 1b01 	ldrb.w	r1, [r4], #1
10011984:	4850      	ldr	r0, [pc, #320]	; (10011ac8 <_svfiprintf_r+0x1e8>)
10011986:	f7ee fb6b 	bl	10000060 <memchr>
1001198a:	9a04      	ldr	r2, [sp, #16]
1001198c:	b9d8      	cbnz	r0, 100119c6 <_svfiprintf_r+0xe6>
1001198e:	06d0      	lsls	r0, r2, #27
10011990:	bf44      	itt	mi
10011992:	2320      	movmi	r3, #32
10011994:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
10011998:	0711      	lsls	r1, r2, #28
1001199a:	bf44      	itt	mi
1001199c:	232b      	movmi	r3, #43	; 0x2b
1001199e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
100119a2:	f89a 3000 	ldrb.w	r3, [sl]
100119a6:	2b2a      	cmp	r3, #42	; 0x2a
100119a8:	d015      	beq.n	100119d6 <_svfiprintf_r+0xf6>
100119aa:	9a07      	ldr	r2, [sp, #28]
100119ac:	4654      	mov	r4, sl
100119ae:	2000      	movs	r0, #0
100119b0:	f04f 0c0a 	mov.w	ip, #10
100119b4:	4621      	mov	r1, r4
100119b6:	f811 3b01 	ldrb.w	r3, [r1], #1
100119ba:	3b30      	subs	r3, #48	; 0x30
100119bc:	2b09      	cmp	r3, #9
100119be:	d94d      	bls.n	10011a5c <_svfiprintf_r+0x17c>
100119c0:	b1b0      	cbz	r0, 100119f0 <_svfiprintf_r+0x110>
100119c2:	9207      	str	r2, [sp, #28]
100119c4:	e014      	b.n	100119f0 <_svfiprintf_r+0x110>
100119c6:	eba0 0308 	sub.w	r3, r0, r8
100119ca:	fa09 f303 	lsl.w	r3, r9, r3
100119ce:	4313      	orrs	r3, r2
100119d0:	9304      	str	r3, [sp, #16]
100119d2:	46a2      	mov	sl, r4
100119d4:	e7d2      	b.n	1001197c <_svfiprintf_r+0x9c>
100119d6:	9b03      	ldr	r3, [sp, #12]
100119d8:	1d19      	adds	r1, r3, #4
100119da:	681b      	ldr	r3, [r3, #0]
100119dc:	9103      	str	r1, [sp, #12]
100119de:	2b00      	cmp	r3, #0
100119e0:	bfbb      	ittet	lt
100119e2:	425b      	neglt	r3, r3
100119e4:	f042 0202 	orrlt.w	r2, r2, #2
100119e8:	9307      	strge	r3, [sp, #28]
100119ea:	9307      	strlt	r3, [sp, #28]
100119ec:	bfb8      	it	lt
100119ee:	9204      	strlt	r2, [sp, #16]
100119f0:	7823      	ldrb	r3, [r4, #0]
100119f2:	2b2e      	cmp	r3, #46	; 0x2e
100119f4:	d10c      	bne.n	10011a10 <_svfiprintf_r+0x130>
100119f6:	7863      	ldrb	r3, [r4, #1]
100119f8:	2b2a      	cmp	r3, #42	; 0x2a
100119fa:	d134      	bne.n	10011a66 <_svfiprintf_r+0x186>
100119fc:	9b03      	ldr	r3, [sp, #12]
100119fe:	1d1a      	adds	r2, r3, #4
10011a00:	681b      	ldr	r3, [r3, #0]
10011a02:	9203      	str	r2, [sp, #12]
10011a04:	2b00      	cmp	r3, #0
10011a06:	bfb8      	it	lt
10011a08:	f04f 33ff 	movlt.w	r3, #4294967295
10011a0c:	3402      	adds	r4, #2
10011a0e:	9305      	str	r3, [sp, #20]
10011a10:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 10011ad8 <_svfiprintf_r+0x1f8>
10011a14:	7821      	ldrb	r1, [r4, #0]
10011a16:	2203      	movs	r2, #3
10011a18:	4650      	mov	r0, sl
10011a1a:	f7ee fb21 	bl	10000060 <memchr>
10011a1e:	b138      	cbz	r0, 10011a30 <_svfiprintf_r+0x150>
10011a20:	9b04      	ldr	r3, [sp, #16]
10011a22:	eba0 000a 	sub.w	r0, r0, sl
10011a26:	2240      	movs	r2, #64	; 0x40
10011a28:	4082      	lsls	r2, r0
10011a2a:	4313      	orrs	r3, r2
10011a2c:	3401      	adds	r4, #1
10011a2e:	9304      	str	r3, [sp, #16]
10011a30:	f814 1b01 	ldrb.w	r1, [r4], #1
10011a34:	4825      	ldr	r0, [pc, #148]	; (10011acc <_svfiprintf_r+0x1ec>)
10011a36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
10011a3a:	2206      	movs	r2, #6
10011a3c:	f7ee fb10 	bl	10000060 <memchr>
10011a40:	2800      	cmp	r0, #0
10011a42:	d038      	beq.n	10011ab6 <_svfiprintf_r+0x1d6>
10011a44:	4b22      	ldr	r3, [pc, #136]	; (10011ad0 <_svfiprintf_r+0x1f0>)
10011a46:	bb1b      	cbnz	r3, 10011a90 <_svfiprintf_r+0x1b0>
10011a48:	9b03      	ldr	r3, [sp, #12]
10011a4a:	3307      	adds	r3, #7
10011a4c:	f023 0307 	bic.w	r3, r3, #7
10011a50:	3308      	adds	r3, #8
10011a52:	9303      	str	r3, [sp, #12]
10011a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011a56:	4433      	add	r3, r6
10011a58:	9309      	str	r3, [sp, #36]	; 0x24
10011a5a:	e768      	b.n	1001192e <_svfiprintf_r+0x4e>
10011a5c:	fb0c 3202 	mla	r2, ip, r2, r3
10011a60:	460c      	mov	r4, r1
10011a62:	2001      	movs	r0, #1
10011a64:	e7a6      	b.n	100119b4 <_svfiprintf_r+0xd4>
10011a66:	2300      	movs	r3, #0
10011a68:	3401      	adds	r4, #1
10011a6a:	9305      	str	r3, [sp, #20]
10011a6c:	4619      	mov	r1, r3
10011a6e:	f04f 0c0a 	mov.w	ip, #10
10011a72:	4620      	mov	r0, r4
10011a74:	f810 2b01 	ldrb.w	r2, [r0], #1
10011a78:	3a30      	subs	r2, #48	; 0x30
10011a7a:	2a09      	cmp	r2, #9
10011a7c:	d903      	bls.n	10011a86 <_svfiprintf_r+0x1a6>
10011a7e:	2b00      	cmp	r3, #0
10011a80:	d0c6      	beq.n	10011a10 <_svfiprintf_r+0x130>
10011a82:	9105      	str	r1, [sp, #20]
10011a84:	e7c4      	b.n	10011a10 <_svfiprintf_r+0x130>
10011a86:	fb0c 2101 	mla	r1, ip, r1, r2
10011a8a:	4604      	mov	r4, r0
10011a8c:	2301      	movs	r3, #1
10011a8e:	e7f0      	b.n	10011a72 <_svfiprintf_r+0x192>
10011a90:	ab03      	add	r3, sp, #12
10011a92:	9300      	str	r3, [sp, #0]
10011a94:	462a      	mov	r2, r5
10011a96:	4b0f      	ldr	r3, [pc, #60]	; (10011ad4 <_svfiprintf_r+0x1f4>)
10011a98:	a904      	add	r1, sp, #16
10011a9a:	4638      	mov	r0, r7
10011a9c:	f7fd feb6 	bl	1000f80c <_printf_float>
10011aa0:	1c42      	adds	r2, r0, #1
10011aa2:	4606      	mov	r6, r0
10011aa4:	d1d6      	bne.n	10011a54 <_svfiprintf_r+0x174>
10011aa6:	89ab      	ldrh	r3, [r5, #12]
10011aa8:	065b      	lsls	r3, r3, #25
10011aaa:	f53f af2d 	bmi.w	10011908 <_svfiprintf_r+0x28>
10011aae:	9809      	ldr	r0, [sp, #36]	; 0x24
10011ab0:	b01d      	add	sp, #116	; 0x74
10011ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10011ab6:	ab03      	add	r3, sp, #12
10011ab8:	9300      	str	r3, [sp, #0]
10011aba:	462a      	mov	r2, r5
10011abc:	4b05      	ldr	r3, [pc, #20]	; (10011ad4 <_svfiprintf_r+0x1f4>)
10011abe:	a904      	add	r1, sp, #16
10011ac0:	4638      	mov	r0, r7
10011ac2:	f7fe f947 	bl	1000fd54 <_printf_i>
10011ac6:	e7eb      	b.n	10011aa0 <_svfiprintf_r+0x1c0>
10011ac8:	1001af4c 	.word	0x1001af4c
10011acc:	1001af56 	.word	0x1001af56
10011ad0:	1000f80d 	.word	0x1000f80d
10011ad4:	1001182d 	.word	0x1001182d
10011ad8:	1001af52 	.word	0x1001af52

10011adc <__sfputc_r>:
10011adc:	6893      	ldr	r3, [r2, #8]
10011ade:	3b01      	subs	r3, #1
10011ae0:	2b00      	cmp	r3, #0
10011ae2:	b410      	push	{r4}
10011ae4:	6093      	str	r3, [r2, #8]
10011ae6:	da08      	bge.n	10011afa <__sfputc_r+0x1e>
10011ae8:	6994      	ldr	r4, [r2, #24]
10011aea:	42a3      	cmp	r3, r4
10011aec:	db01      	blt.n	10011af2 <__sfputc_r+0x16>
10011aee:	290a      	cmp	r1, #10
10011af0:	d103      	bne.n	10011afa <__sfputc_r+0x1e>
10011af2:	f85d 4b04 	ldr.w	r4, [sp], #4
10011af6:	f000 b9e3 	b.w	10011ec0 <__swbuf_r>
10011afa:	6813      	ldr	r3, [r2, #0]
10011afc:	1c58      	adds	r0, r3, #1
10011afe:	6010      	str	r0, [r2, #0]
10011b00:	7019      	strb	r1, [r3, #0]
10011b02:	4608      	mov	r0, r1
10011b04:	f85d 4b04 	ldr.w	r4, [sp], #4
10011b08:	4770      	bx	lr

10011b0a <__sfputs_r>:
10011b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011b0c:	4606      	mov	r6, r0
10011b0e:	460f      	mov	r7, r1
10011b10:	4614      	mov	r4, r2
10011b12:	18d5      	adds	r5, r2, r3
10011b14:	42ac      	cmp	r4, r5
10011b16:	d101      	bne.n	10011b1c <__sfputs_r+0x12>
10011b18:	2000      	movs	r0, #0
10011b1a:	e007      	b.n	10011b2c <__sfputs_r+0x22>
10011b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
10011b20:	463a      	mov	r2, r7
10011b22:	4630      	mov	r0, r6
10011b24:	f7ff ffda 	bl	10011adc <__sfputc_r>
10011b28:	1c43      	adds	r3, r0, #1
10011b2a:	d1f3      	bne.n	10011b14 <__sfputs_r+0xa>
10011b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10011b30 <_vfiprintf_r>:
10011b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10011b34:	460d      	mov	r5, r1
10011b36:	b09d      	sub	sp, #116	; 0x74
10011b38:	4614      	mov	r4, r2
10011b3a:	4698      	mov	r8, r3
10011b3c:	4606      	mov	r6, r0
10011b3e:	b118      	cbz	r0, 10011b48 <_vfiprintf_r+0x18>
10011b40:	6a03      	ldr	r3, [r0, #32]
10011b42:	b90b      	cbnz	r3, 10011b48 <_vfiprintf_r+0x18>
10011b44:	f7fe fab4 	bl	100100b0 <__sinit>
10011b48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
10011b4a:	07d9      	lsls	r1, r3, #31
10011b4c:	d405      	bmi.n	10011b5a <_vfiprintf_r+0x2a>
10011b4e:	89ab      	ldrh	r3, [r5, #12]
10011b50:	059a      	lsls	r2, r3, #22
10011b52:	d402      	bmi.n	10011b5a <_vfiprintf_r+0x2a>
10011b54:	6da8      	ldr	r0, [r5, #88]	; 0x58
10011b56:	f7fe fc08 	bl	1001036a <__retarget_lock_acquire_recursive>
10011b5a:	89ab      	ldrh	r3, [r5, #12]
10011b5c:	071b      	lsls	r3, r3, #28
10011b5e:	d501      	bpl.n	10011b64 <_vfiprintf_r+0x34>
10011b60:	692b      	ldr	r3, [r5, #16]
10011b62:	b99b      	cbnz	r3, 10011b8c <_vfiprintf_r+0x5c>
10011b64:	4629      	mov	r1, r5
10011b66:	4630      	mov	r0, r6
10011b68:	f000 f9e8 	bl	10011f3c <__swsetup_r>
10011b6c:	b170      	cbz	r0, 10011b8c <_vfiprintf_r+0x5c>
10011b6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
10011b70:	07dc      	lsls	r4, r3, #31
10011b72:	d504      	bpl.n	10011b7e <_vfiprintf_r+0x4e>
10011b74:	f04f 30ff 	mov.w	r0, #4294967295
10011b78:	b01d      	add	sp, #116	; 0x74
10011b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10011b7e:	89ab      	ldrh	r3, [r5, #12]
10011b80:	0598      	lsls	r0, r3, #22
10011b82:	d4f7      	bmi.n	10011b74 <_vfiprintf_r+0x44>
10011b84:	6da8      	ldr	r0, [r5, #88]	; 0x58
10011b86:	f7fe fbf1 	bl	1001036c <__retarget_lock_release_recursive>
10011b8a:	e7f3      	b.n	10011b74 <_vfiprintf_r+0x44>
10011b8c:	2300      	movs	r3, #0
10011b8e:	9309      	str	r3, [sp, #36]	; 0x24
10011b90:	2320      	movs	r3, #32
10011b92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
10011b96:	f8cd 800c 	str.w	r8, [sp, #12]
10011b9a:	2330      	movs	r3, #48	; 0x30
10011b9c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 10011d50 <_vfiprintf_r+0x220>
10011ba0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
10011ba4:	f04f 0901 	mov.w	r9, #1
10011ba8:	4623      	mov	r3, r4
10011baa:	469a      	mov	sl, r3
10011bac:	f813 2b01 	ldrb.w	r2, [r3], #1
10011bb0:	b10a      	cbz	r2, 10011bb6 <_vfiprintf_r+0x86>
10011bb2:	2a25      	cmp	r2, #37	; 0x25
10011bb4:	d1f9      	bne.n	10011baa <_vfiprintf_r+0x7a>
10011bb6:	ebba 0b04 	subs.w	fp, sl, r4
10011bba:	d00b      	beq.n	10011bd4 <_vfiprintf_r+0xa4>
10011bbc:	465b      	mov	r3, fp
10011bbe:	4622      	mov	r2, r4
10011bc0:	4629      	mov	r1, r5
10011bc2:	4630      	mov	r0, r6
10011bc4:	f7ff ffa1 	bl	10011b0a <__sfputs_r>
10011bc8:	3001      	adds	r0, #1
10011bca:	f000 80a9 	beq.w	10011d20 <_vfiprintf_r+0x1f0>
10011bce:	9a09      	ldr	r2, [sp, #36]	; 0x24
10011bd0:	445a      	add	r2, fp
10011bd2:	9209      	str	r2, [sp, #36]	; 0x24
10011bd4:	f89a 3000 	ldrb.w	r3, [sl]
10011bd8:	2b00      	cmp	r3, #0
10011bda:	f000 80a1 	beq.w	10011d20 <_vfiprintf_r+0x1f0>
10011bde:	2300      	movs	r3, #0
10011be0:	f04f 32ff 	mov.w	r2, #4294967295
10011be4:	e9cd 2305 	strd	r2, r3, [sp, #20]
10011be8:	f10a 0a01 	add.w	sl, sl, #1
10011bec:	9304      	str	r3, [sp, #16]
10011bee:	9307      	str	r3, [sp, #28]
10011bf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
10011bf4:	931a      	str	r3, [sp, #104]	; 0x68
10011bf6:	4654      	mov	r4, sl
10011bf8:	2205      	movs	r2, #5
10011bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
10011bfe:	4854      	ldr	r0, [pc, #336]	; (10011d50 <_vfiprintf_r+0x220>)
10011c00:	f7ee fa2e 	bl	10000060 <memchr>
10011c04:	9a04      	ldr	r2, [sp, #16]
10011c06:	b9d8      	cbnz	r0, 10011c40 <_vfiprintf_r+0x110>
10011c08:	06d1      	lsls	r1, r2, #27
10011c0a:	bf44      	itt	mi
10011c0c:	2320      	movmi	r3, #32
10011c0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
10011c12:	0713      	lsls	r3, r2, #28
10011c14:	bf44      	itt	mi
10011c16:	232b      	movmi	r3, #43	; 0x2b
10011c18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
10011c1c:	f89a 3000 	ldrb.w	r3, [sl]
10011c20:	2b2a      	cmp	r3, #42	; 0x2a
10011c22:	d015      	beq.n	10011c50 <_vfiprintf_r+0x120>
10011c24:	9a07      	ldr	r2, [sp, #28]
10011c26:	4654      	mov	r4, sl
10011c28:	2000      	movs	r0, #0
10011c2a:	f04f 0c0a 	mov.w	ip, #10
10011c2e:	4621      	mov	r1, r4
10011c30:	f811 3b01 	ldrb.w	r3, [r1], #1
10011c34:	3b30      	subs	r3, #48	; 0x30
10011c36:	2b09      	cmp	r3, #9
10011c38:	d94d      	bls.n	10011cd6 <_vfiprintf_r+0x1a6>
10011c3a:	b1b0      	cbz	r0, 10011c6a <_vfiprintf_r+0x13a>
10011c3c:	9207      	str	r2, [sp, #28]
10011c3e:	e014      	b.n	10011c6a <_vfiprintf_r+0x13a>
10011c40:	eba0 0308 	sub.w	r3, r0, r8
10011c44:	fa09 f303 	lsl.w	r3, r9, r3
10011c48:	4313      	orrs	r3, r2
10011c4a:	9304      	str	r3, [sp, #16]
10011c4c:	46a2      	mov	sl, r4
10011c4e:	e7d2      	b.n	10011bf6 <_vfiprintf_r+0xc6>
10011c50:	9b03      	ldr	r3, [sp, #12]
10011c52:	1d19      	adds	r1, r3, #4
10011c54:	681b      	ldr	r3, [r3, #0]
10011c56:	9103      	str	r1, [sp, #12]
10011c58:	2b00      	cmp	r3, #0
10011c5a:	bfbb      	ittet	lt
10011c5c:	425b      	neglt	r3, r3
10011c5e:	f042 0202 	orrlt.w	r2, r2, #2
10011c62:	9307      	strge	r3, [sp, #28]
10011c64:	9307      	strlt	r3, [sp, #28]
10011c66:	bfb8      	it	lt
10011c68:	9204      	strlt	r2, [sp, #16]
10011c6a:	7823      	ldrb	r3, [r4, #0]
10011c6c:	2b2e      	cmp	r3, #46	; 0x2e
10011c6e:	d10c      	bne.n	10011c8a <_vfiprintf_r+0x15a>
10011c70:	7863      	ldrb	r3, [r4, #1]
10011c72:	2b2a      	cmp	r3, #42	; 0x2a
10011c74:	d134      	bne.n	10011ce0 <_vfiprintf_r+0x1b0>
10011c76:	9b03      	ldr	r3, [sp, #12]
10011c78:	1d1a      	adds	r2, r3, #4
10011c7a:	681b      	ldr	r3, [r3, #0]
10011c7c:	9203      	str	r2, [sp, #12]
10011c7e:	2b00      	cmp	r3, #0
10011c80:	bfb8      	it	lt
10011c82:	f04f 33ff 	movlt.w	r3, #4294967295
10011c86:	3402      	adds	r4, #2
10011c88:	9305      	str	r3, [sp, #20]
10011c8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 10011d60 <_vfiprintf_r+0x230>
10011c8e:	7821      	ldrb	r1, [r4, #0]
10011c90:	2203      	movs	r2, #3
10011c92:	4650      	mov	r0, sl
10011c94:	f7ee f9e4 	bl	10000060 <memchr>
10011c98:	b138      	cbz	r0, 10011caa <_vfiprintf_r+0x17a>
10011c9a:	9b04      	ldr	r3, [sp, #16]
10011c9c:	eba0 000a 	sub.w	r0, r0, sl
10011ca0:	2240      	movs	r2, #64	; 0x40
10011ca2:	4082      	lsls	r2, r0
10011ca4:	4313      	orrs	r3, r2
10011ca6:	3401      	adds	r4, #1
10011ca8:	9304      	str	r3, [sp, #16]
10011caa:	f814 1b01 	ldrb.w	r1, [r4], #1
10011cae:	4829      	ldr	r0, [pc, #164]	; (10011d54 <_vfiprintf_r+0x224>)
10011cb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
10011cb4:	2206      	movs	r2, #6
10011cb6:	f7ee f9d3 	bl	10000060 <memchr>
10011cba:	2800      	cmp	r0, #0
10011cbc:	d03f      	beq.n	10011d3e <_vfiprintf_r+0x20e>
10011cbe:	4b26      	ldr	r3, [pc, #152]	; (10011d58 <_vfiprintf_r+0x228>)
10011cc0:	bb1b      	cbnz	r3, 10011d0a <_vfiprintf_r+0x1da>
10011cc2:	9b03      	ldr	r3, [sp, #12]
10011cc4:	3307      	adds	r3, #7
10011cc6:	f023 0307 	bic.w	r3, r3, #7
10011cca:	3308      	adds	r3, #8
10011ccc:	9303      	str	r3, [sp, #12]
10011cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011cd0:	443b      	add	r3, r7
10011cd2:	9309      	str	r3, [sp, #36]	; 0x24
10011cd4:	e768      	b.n	10011ba8 <_vfiprintf_r+0x78>
10011cd6:	fb0c 3202 	mla	r2, ip, r2, r3
10011cda:	460c      	mov	r4, r1
10011cdc:	2001      	movs	r0, #1
10011cde:	e7a6      	b.n	10011c2e <_vfiprintf_r+0xfe>
10011ce0:	2300      	movs	r3, #0
10011ce2:	3401      	adds	r4, #1
10011ce4:	9305      	str	r3, [sp, #20]
10011ce6:	4619      	mov	r1, r3
10011ce8:	f04f 0c0a 	mov.w	ip, #10
10011cec:	4620      	mov	r0, r4
10011cee:	f810 2b01 	ldrb.w	r2, [r0], #1
10011cf2:	3a30      	subs	r2, #48	; 0x30
10011cf4:	2a09      	cmp	r2, #9
10011cf6:	d903      	bls.n	10011d00 <_vfiprintf_r+0x1d0>
10011cf8:	2b00      	cmp	r3, #0
10011cfa:	d0c6      	beq.n	10011c8a <_vfiprintf_r+0x15a>
10011cfc:	9105      	str	r1, [sp, #20]
10011cfe:	e7c4      	b.n	10011c8a <_vfiprintf_r+0x15a>
10011d00:	fb0c 2101 	mla	r1, ip, r1, r2
10011d04:	4604      	mov	r4, r0
10011d06:	2301      	movs	r3, #1
10011d08:	e7f0      	b.n	10011cec <_vfiprintf_r+0x1bc>
10011d0a:	ab03      	add	r3, sp, #12
10011d0c:	9300      	str	r3, [sp, #0]
10011d0e:	462a      	mov	r2, r5
10011d10:	4b12      	ldr	r3, [pc, #72]	; (10011d5c <_vfiprintf_r+0x22c>)
10011d12:	a904      	add	r1, sp, #16
10011d14:	4630      	mov	r0, r6
10011d16:	f7fd fd79 	bl	1000f80c <_printf_float>
10011d1a:	4607      	mov	r7, r0
10011d1c:	1c78      	adds	r0, r7, #1
10011d1e:	d1d6      	bne.n	10011cce <_vfiprintf_r+0x19e>
10011d20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
10011d22:	07d9      	lsls	r1, r3, #31
10011d24:	d405      	bmi.n	10011d32 <_vfiprintf_r+0x202>
10011d26:	89ab      	ldrh	r3, [r5, #12]
10011d28:	059a      	lsls	r2, r3, #22
10011d2a:	d402      	bmi.n	10011d32 <_vfiprintf_r+0x202>
10011d2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
10011d2e:	f7fe fb1d 	bl	1001036c <__retarget_lock_release_recursive>
10011d32:	89ab      	ldrh	r3, [r5, #12]
10011d34:	065b      	lsls	r3, r3, #25
10011d36:	f53f af1d 	bmi.w	10011b74 <_vfiprintf_r+0x44>
10011d3a:	9809      	ldr	r0, [sp, #36]	; 0x24
10011d3c:	e71c      	b.n	10011b78 <_vfiprintf_r+0x48>
10011d3e:	ab03      	add	r3, sp, #12
10011d40:	9300      	str	r3, [sp, #0]
10011d42:	462a      	mov	r2, r5
10011d44:	4b05      	ldr	r3, [pc, #20]	; (10011d5c <_vfiprintf_r+0x22c>)
10011d46:	a904      	add	r1, sp, #16
10011d48:	4630      	mov	r0, r6
10011d4a:	f7fe f803 	bl	1000fd54 <_printf_i>
10011d4e:	e7e4      	b.n	10011d1a <_vfiprintf_r+0x1ea>
10011d50:	1001af4c 	.word	0x1001af4c
10011d54:	1001af56 	.word	0x1001af56
10011d58:	1000f80d 	.word	0x1000f80d
10011d5c:	10011b0b 	.word	0x10011b0b
10011d60:	1001af52 	.word	0x1001af52

10011d64 <__sflush_r>:
10011d64:	898a      	ldrh	r2, [r1, #12]
10011d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10011d6a:	4605      	mov	r5, r0
10011d6c:	0710      	lsls	r0, r2, #28
10011d6e:	460c      	mov	r4, r1
10011d70:	d458      	bmi.n	10011e24 <__sflush_r+0xc0>
10011d72:	684b      	ldr	r3, [r1, #4]
10011d74:	2b00      	cmp	r3, #0
10011d76:	dc05      	bgt.n	10011d84 <__sflush_r+0x20>
10011d78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10011d7a:	2b00      	cmp	r3, #0
10011d7c:	dc02      	bgt.n	10011d84 <__sflush_r+0x20>
10011d7e:	2000      	movs	r0, #0
10011d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10011d84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
10011d86:	2e00      	cmp	r6, #0
10011d88:	d0f9      	beq.n	10011d7e <__sflush_r+0x1a>
10011d8a:	2300      	movs	r3, #0
10011d8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
10011d90:	682f      	ldr	r7, [r5, #0]
10011d92:	6a21      	ldr	r1, [r4, #32]
10011d94:	602b      	str	r3, [r5, #0]
10011d96:	d032      	beq.n	10011dfe <__sflush_r+0x9a>
10011d98:	6d60      	ldr	r0, [r4, #84]	; 0x54
10011d9a:	89a3      	ldrh	r3, [r4, #12]
10011d9c:	075a      	lsls	r2, r3, #29
10011d9e:	d505      	bpl.n	10011dac <__sflush_r+0x48>
10011da0:	6863      	ldr	r3, [r4, #4]
10011da2:	1ac0      	subs	r0, r0, r3
10011da4:	6b63      	ldr	r3, [r4, #52]	; 0x34
10011da6:	b10b      	cbz	r3, 10011dac <__sflush_r+0x48>
10011da8:	6c23      	ldr	r3, [r4, #64]	; 0x40
10011daa:	1ac0      	subs	r0, r0, r3
10011dac:	2300      	movs	r3, #0
10011dae:	4602      	mov	r2, r0
10011db0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
10011db2:	6a21      	ldr	r1, [r4, #32]
10011db4:	4628      	mov	r0, r5
10011db6:	47b0      	blx	r6
10011db8:	1c43      	adds	r3, r0, #1
10011dba:	89a3      	ldrh	r3, [r4, #12]
10011dbc:	d106      	bne.n	10011dcc <__sflush_r+0x68>
10011dbe:	6829      	ldr	r1, [r5, #0]
10011dc0:	291d      	cmp	r1, #29
10011dc2:	d82b      	bhi.n	10011e1c <__sflush_r+0xb8>
10011dc4:	4a29      	ldr	r2, [pc, #164]	; (10011e6c <__sflush_r+0x108>)
10011dc6:	410a      	asrs	r2, r1
10011dc8:	07d6      	lsls	r6, r2, #31
10011dca:	d427      	bmi.n	10011e1c <__sflush_r+0xb8>
10011dcc:	2200      	movs	r2, #0
10011dce:	6062      	str	r2, [r4, #4]
10011dd0:	04d9      	lsls	r1, r3, #19
10011dd2:	6922      	ldr	r2, [r4, #16]
10011dd4:	6022      	str	r2, [r4, #0]
10011dd6:	d504      	bpl.n	10011de2 <__sflush_r+0x7e>
10011dd8:	1c42      	adds	r2, r0, #1
10011dda:	d101      	bne.n	10011de0 <__sflush_r+0x7c>
10011ddc:	682b      	ldr	r3, [r5, #0]
10011dde:	b903      	cbnz	r3, 10011de2 <__sflush_r+0x7e>
10011de0:	6560      	str	r0, [r4, #84]	; 0x54
10011de2:	6b61      	ldr	r1, [r4, #52]	; 0x34
10011de4:	602f      	str	r7, [r5, #0]
10011de6:	2900      	cmp	r1, #0
10011de8:	d0c9      	beq.n	10011d7e <__sflush_r+0x1a>
10011dea:	f104 0344 	add.w	r3, r4, #68	; 0x44
10011dee:	4299      	cmp	r1, r3
10011df0:	d002      	beq.n	10011df8 <__sflush_r+0x94>
10011df2:	4628      	mov	r0, r5
10011df4:	f7ff f94a 	bl	1001108c <_free_r>
10011df8:	2000      	movs	r0, #0
10011dfa:	6360      	str	r0, [r4, #52]	; 0x34
10011dfc:	e7c0      	b.n	10011d80 <__sflush_r+0x1c>
10011dfe:	2301      	movs	r3, #1
10011e00:	4628      	mov	r0, r5
10011e02:	47b0      	blx	r6
10011e04:	1c41      	adds	r1, r0, #1
10011e06:	d1c8      	bne.n	10011d9a <__sflush_r+0x36>
10011e08:	682b      	ldr	r3, [r5, #0]
10011e0a:	2b00      	cmp	r3, #0
10011e0c:	d0c5      	beq.n	10011d9a <__sflush_r+0x36>
10011e0e:	2b1d      	cmp	r3, #29
10011e10:	d001      	beq.n	10011e16 <__sflush_r+0xb2>
10011e12:	2b16      	cmp	r3, #22
10011e14:	d101      	bne.n	10011e1a <__sflush_r+0xb6>
10011e16:	602f      	str	r7, [r5, #0]
10011e18:	e7b1      	b.n	10011d7e <__sflush_r+0x1a>
10011e1a:	89a3      	ldrh	r3, [r4, #12]
10011e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10011e20:	81a3      	strh	r3, [r4, #12]
10011e22:	e7ad      	b.n	10011d80 <__sflush_r+0x1c>
10011e24:	690f      	ldr	r7, [r1, #16]
10011e26:	2f00      	cmp	r7, #0
10011e28:	d0a9      	beq.n	10011d7e <__sflush_r+0x1a>
10011e2a:	0793      	lsls	r3, r2, #30
10011e2c:	680e      	ldr	r6, [r1, #0]
10011e2e:	bf08      	it	eq
10011e30:	694b      	ldreq	r3, [r1, #20]
10011e32:	600f      	str	r7, [r1, #0]
10011e34:	bf18      	it	ne
10011e36:	2300      	movne	r3, #0
10011e38:	eba6 0807 	sub.w	r8, r6, r7
10011e3c:	608b      	str	r3, [r1, #8]
10011e3e:	f1b8 0f00 	cmp.w	r8, #0
10011e42:	dd9c      	ble.n	10011d7e <__sflush_r+0x1a>
10011e44:	6a21      	ldr	r1, [r4, #32]
10011e46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10011e48:	4643      	mov	r3, r8
10011e4a:	463a      	mov	r2, r7
10011e4c:	4628      	mov	r0, r5
10011e4e:	47b0      	blx	r6
10011e50:	2800      	cmp	r0, #0
10011e52:	dc06      	bgt.n	10011e62 <__sflush_r+0xfe>
10011e54:	89a3      	ldrh	r3, [r4, #12]
10011e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10011e5a:	81a3      	strh	r3, [r4, #12]
10011e5c:	f04f 30ff 	mov.w	r0, #4294967295
10011e60:	e78e      	b.n	10011d80 <__sflush_r+0x1c>
10011e62:	4407      	add	r7, r0
10011e64:	eba8 0800 	sub.w	r8, r8, r0
10011e68:	e7e9      	b.n	10011e3e <__sflush_r+0xda>
10011e6a:	bf00      	nop
10011e6c:	dfbffffe 	.word	0xdfbffffe

10011e70 <_fflush_r>:
10011e70:	b538      	push	{r3, r4, r5, lr}
10011e72:	690b      	ldr	r3, [r1, #16]
10011e74:	4605      	mov	r5, r0
10011e76:	460c      	mov	r4, r1
10011e78:	b913      	cbnz	r3, 10011e80 <_fflush_r+0x10>
10011e7a:	2500      	movs	r5, #0
10011e7c:	4628      	mov	r0, r5
10011e7e:	bd38      	pop	{r3, r4, r5, pc}
10011e80:	b118      	cbz	r0, 10011e8a <_fflush_r+0x1a>
10011e82:	6a03      	ldr	r3, [r0, #32]
10011e84:	b90b      	cbnz	r3, 10011e8a <_fflush_r+0x1a>
10011e86:	f7fe f913 	bl	100100b0 <__sinit>
10011e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10011e8e:	2b00      	cmp	r3, #0
10011e90:	d0f3      	beq.n	10011e7a <_fflush_r+0xa>
10011e92:	6e62      	ldr	r2, [r4, #100]	; 0x64
10011e94:	07d0      	lsls	r0, r2, #31
10011e96:	d404      	bmi.n	10011ea2 <_fflush_r+0x32>
10011e98:	0599      	lsls	r1, r3, #22
10011e9a:	d402      	bmi.n	10011ea2 <_fflush_r+0x32>
10011e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
10011e9e:	f7fe fa64 	bl	1001036a <__retarget_lock_acquire_recursive>
10011ea2:	4628      	mov	r0, r5
10011ea4:	4621      	mov	r1, r4
10011ea6:	f7ff ff5d 	bl	10011d64 <__sflush_r>
10011eaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
10011eac:	07da      	lsls	r2, r3, #31
10011eae:	4605      	mov	r5, r0
10011eb0:	d4e4      	bmi.n	10011e7c <_fflush_r+0xc>
10011eb2:	89a3      	ldrh	r3, [r4, #12]
10011eb4:	059b      	lsls	r3, r3, #22
10011eb6:	d4e1      	bmi.n	10011e7c <_fflush_r+0xc>
10011eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
10011eba:	f7fe fa57 	bl	1001036c <__retarget_lock_release_recursive>
10011ebe:	e7dd      	b.n	10011e7c <_fflush_r+0xc>

10011ec0 <__swbuf_r>:
10011ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011ec2:	460e      	mov	r6, r1
10011ec4:	4614      	mov	r4, r2
10011ec6:	4605      	mov	r5, r0
10011ec8:	b118      	cbz	r0, 10011ed2 <__swbuf_r+0x12>
10011eca:	6a03      	ldr	r3, [r0, #32]
10011ecc:	b90b      	cbnz	r3, 10011ed2 <__swbuf_r+0x12>
10011ece:	f7fe f8ef 	bl	100100b0 <__sinit>
10011ed2:	69a3      	ldr	r3, [r4, #24]
10011ed4:	60a3      	str	r3, [r4, #8]
10011ed6:	89a3      	ldrh	r3, [r4, #12]
10011ed8:	071a      	lsls	r2, r3, #28
10011eda:	d525      	bpl.n	10011f28 <__swbuf_r+0x68>
10011edc:	6923      	ldr	r3, [r4, #16]
10011ede:	b31b      	cbz	r3, 10011f28 <__swbuf_r+0x68>
10011ee0:	6823      	ldr	r3, [r4, #0]
10011ee2:	6922      	ldr	r2, [r4, #16]
10011ee4:	1a98      	subs	r0, r3, r2
10011ee6:	6963      	ldr	r3, [r4, #20]
10011ee8:	b2f6      	uxtb	r6, r6
10011eea:	4283      	cmp	r3, r0
10011eec:	4637      	mov	r7, r6
10011eee:	dc04      	bgt.n	10011efa <__swbuf_r+0x3a>
10011ef0:	4621      	mov	r1, r4
10011ef2:	4628      	mov	r0, r5
10011ef4:	f7ff ffbc 	bl	10011e70 <_fflush_r>
10011ef8:	b9e0      	cbnz	r0, 10011f34 <__swbuf_r+0x74>
10011efa:	68a3      	ldr	r3, [r4, #8]
10011efc:	3b01      	subs	r3, #1
10011efe:	60a3      	str	r3, [r4, #8]
10011f00:	6823      	ldr	r3, [r4, #0]
10011f02:	1c5a      	adds	r2, r3, #1
10011f04:	6022      	str	r2, [r4, #0]
10011f06:	701e      	strb	r6, [r3, #0]
10011f08:	6962      	ldr	r2, [r4, #20]
10011f0a:	1c43      	adds	r3, r0, #1
10011f0c:	429a      	cmp	r2, r3
10011f0e:	d004      	beq.n	10011f1a <__swbuf_r+0x5a>
10011f10:	89a3      	ldrh	r3, [r4, #12]
10011f12:	07db      	lsls	r3, r3, #31
10011f14:	d506      	bpl.n	10011f24 <__swbuf_r+0x64>
10011f16:	2e0a      	cmp	r6, #10
10011f18:	d104      	bne.n	10011f24 <__swbuf_r+0x64>
10011f1a:	4621      	mov	r1, r4
10011f1c:	4628      	mov	r0, r5
10011f1e:	f7ff ffa7 	bl	10011e70 <_fflush_r>
10011f22:	b938      	cbnz	r0, 10011f34 <__swbuf_r+0x74>
10011f24:	4638      	mov	r0, r7
10011f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011f28:	4621      	mov	r1, r4
10011f2a:	4628      	mov	r0, r5
10011f2c:	f000 f806 	bl	10011f3c <__swsetup_r>
10011f30:	2800      	cmp	r0, #0
10011f32:	d0d5      	beq.n	10011ee0 <__swbuf_r+0x20>
10011f34:	f04f 37ff 	mov.w	r7, #4294967295
10011f38:	e7f4      	b.n	10011f24 <__swbuf_r+0x64>
	...

10011f3c <__swsetup_r>:
10011f3c:	b538      	push	{r3, r4, r5, lr}
10011f3e:	4b2a      	ldr	r3, [pc, #168]	; (10011fe8 <__swsetup_r+0xac>)
10011f40:	4605      	mov	r5, r0
10011f42:	6818      	ldr	r0, [r3, #0]
10011f44:	460c      	mov	r4, r1
10011f46:	b118      	cbz	r0, 10011f50 <__swsetup_r+0x14>
10011f48:	6a03      	ldr	r3, [r0, #32]
10011f4a:	b90b      	cbnz	r3, 10011f50 <__swsetup_r+0x14>
10011f4c:	f7fe f8b0 	bl	100100b0 <__sinit>
10011f50:	89a3      	ldrh	r3, [r4, #12]
10011f52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
10011f56:	0718      	lsls	r0, r3, #28
10011f58:	d422      	bmi.n	10011fa0 <__swsetup_r+0x64>
10011f5a:	06d9      	lsls	r1, r3, #27
10011f5c:	d407      	bmi.n	10011f6e <__swsetup_r+0x32>
10011f5e:	2309      	movs	r3, #9
10011f60:	602b      	str	r3, [r5, #0]
10011f62:	f042 0340 	orr.w	r3, r2, #64	; 0x40
10011f66:	81a3      	strh	r3, [r4, #12]
10011f68:	f04f 30ff 	mov.w	r0, #4294967295
10011f6c:	e034      	b.n	10011fd8 <__swsetup_r+0x9c>
10011f6e:	0758      	lsls	r0, r3, #29
10011f70:	d512      	bpl.n	10011f98 <__swsetup_r+0x5c>
10011f72:	6b61      	ldr	r1, [r4, #52]	; 0x34
10011f74:	b141      	cbz	r1, 10011f88 <__swsetup_r+0x4c>
10011f76:	f104 0344 	add.w	r3, r4, #68	; 0x44
10011f7a:	4299      	cmp	r1, r3
10011f7c:	d002      	beq.n	10011f84 <__swsetup_r+0x48>
10011f7e:	4628      	mov	r0, r5
10011f80:	f7ff f884 	bl	1001108c <_free_r>
10011f84:	2300      	movs	r3, #0
10011f86:	6363      	str	r3, [r4, #52]	; 0x34
10011f88:	89a3      	ldrh	r3, [r4, #12]
10011f8a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
10011f8e:	81a3      	strh	r3, [r4, #12]
10011f90:	2300      	movs	r3, #0
10011f92:	6063      	str	r3, [r4, #4]
10011f94:	6923      	ldr	r3, [r4, #16]
10011f96:	6023      	str	r3, [r4, #0]
10011f98:	89a3      	ldrh	r3, [r4, #12]
10011f9a:	f043 0308 	orr.w	r3, r3, #8
10011f9e:	81a3      	strh	r3, [r4, #12]
10011fa0:	6923      	ldr	r3, [r4, #16]
10011fa2:	b94b      	cbnz	r3, 10011fb8 <__swsetup_r+0x7c>
10011fa4:	89a3      	ldrh	r3, [r4, #12]
10011fa6:	f403 7320 	and.w	r3, r3, #640	; 0x280
10011faa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
10011fae:	d003      	beq.n	10011fb8 <__swsetup_r+0x7c>
10011fb0:	4621      	mov	r1, r4
10011fb2:	4628      	mov	r0, r5
10011fb4:	f000 f8d3 	bl	1001215e <__smakebuf_r>
10011fb8:	89a0      	ldrh	r0, [r4, #12]
10011fba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
10011fbe:	f010 0301 	ands.w	r3, r0, #1
10011fc2:	d00a      	beq.n	10011fda <__swsetup_r+0x9e>
10011fc4:	2300      	movs	r3, #0
10011fc6:	60a3      	str	r3, [r4, #8]
10011fc8:	6963      	ldr	r3, [r4, #20]
10011fca:	425b      	negs	r3, r3
10011fcc:	61a3      	str	r3, [r4, #24]
10011fce:	6923      	ldr	r3, [r4, #16]
10011fd0:	b943      	cbnz	r3, 10011fe4 <__swsetup_r+0xa8>
10011fd2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
10011fd6:	d1c4      	bne.n	10011f62 <__swsetup_r+0x26>
10011fd8:	bd38      	pop	{r3, r4, r5, pc}
10011fda:	0781      	lsls	r1, r0, #30
10011fdc:	bf58      	it	pl
10011fde:	6963      	ldrpl	r3, [r4, #20]
10011fe0:	60a3      	str	r3, [r4, #8]
10011fe2:	e7f4      	b.n	10011fce <__swsetup_r+0x92>
10011fe4:	2000      	movs	r0, #0
10011fe6:	e7f7      	b.n	10011fd8 <__swsetup_r+0x9c>
10011fe8:	10020bd0 	.word	0x10020bd0

10011fec <memmove>:
10011fec:	4288      	cmp	r0, r1
10011fee:	b510      	push	{r4, lr}
10011ff0:	eb01 0402 	add.w	r4, r1, r2
10011ff4:	d902      	bls.n	10011ffc <memmove+0x10>
10011ff6:	4284      	cmp	r4, r0
10011ff8:	4623      	mov	r3, r4
10011ffa:	d807      	bhi.n	1001200c <memmove+0x20>
10011ffc:	1e43      	subs	r3, r0, #1
10011ffe:	42a1      	cmp	r1, r4
10012000:	d008      	beq.n	10012014 <memmove+0x28>
10012002:	f811 2b01 	ldrb.w	r2, [r1], #1
10012006:	f803 2f01 	strb.w	r2, [r3, #1]!
1001200a:	e7f8      	b.n	10011ffe <memmove+0x12>
1001200c:	4402      	add	r2, r0
1001200e:	4601      	mov	r1, r0
10012010:	428a      	cmp	r2, r1
10012012:	d100      	bne.n	10012016 <memmove+0x2a>
10012014:	bd10      	pop	{r4, pc}
10012016:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1001201a:	f802 4d01 	strb.w	r4, [r2, #-1]!
1001201e:	e7f7      	b.n	10012010 <memmove+0x24>

10012020 <_raise_r>:
10012020:	291f      	cmp	r1, #31
10012022:	b538      	push	{r3, r4, r5, lr}
10012024:	4604      	mov	r4, r0
10012026:	460d      	mov	r5, r1
10012028:	d904      	bls.n	10012034 <_raise_r+0x14>
1001202a:	2316      	movs	r3, #22
1001202c:	6003      	str	r3, [r0, #0]
1001202e:	f04f 30ff 	mov.w	r0, #4294967295
10012032:	bd38      	pop	{r3, r4, r5, pc}
10012034:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
10012036:	b112      	cbz	r2, 1001203e <_raise_r+0x1e>
10012038:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
1001203c:	b94b      	cbnz	r3, 10012052 <_raise_r+0x32>
1001203e:	4620      	mov	r0, r4
10012040:	f000 f830 	bl	100120a4 <_getpid_r>
10012044:	462a      	mov	r2, r5
10012046:	4601      	mov	r1, r0
10012048:	4620      	mov	r0, r4
1001204a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1001204e:	f000 b817 	b.w	10012080 <_kill_r>
10012052:	2b01      	cmp	r3, #1
10012054:	d00a      	beq.n	1001206c <_raise_r+0x4c>
10012056:	1c59      	adds	r1, r3, #1
10012058:	d103      	bne.n	10012062 <_raise_r+0x42>
1001205a:	2316      	movs	r3, #22
1001205c:	6003      	str	r3, [r0, #0]
1001205e:	2001      	movs	r0, #1
10012060:	e7e7      	b.n	10012032 <_raise_r+0x12>
10012062:	2400      	movs	r4, #0
10012064:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
10012068:	4628      	mov	r0, r5
1001206a:	4798      	blx	r3
1001206c:	2000      	movs	r0, #0
1001206e:	e7e0      	b.n	10012032 <_raise_r+0x12>

10012070 <raise>:
10012070:	4b02      	ldr	r3, [pc, #8]	; (1001207c <raise+0xc>)
10012072:	4601      	mov	r1, r0
10012074:	6818      	ldr	r0, [r3, #0]
10012076:	f7ff bfd3 	b.w	10012020 <_raise_r>
1001207a:	bf00      	nop
1001207c:	10020bd0 	.word	0x10020bd0

10012080 <_kill_r>:
10012080:	b538      	push	{r3, r4, r5, lr}
10012082:	4d07      	ldr	r5, [pc, #28]	; (100120a0 <_kill_r+0x20>)
10012084:	2300      	movs	r3, #0
10012086:	4604      	mov	r4, r0
10012088:	4608      	mov	r0, r1
1001208a:	4611      	mov	r1, r2
1001208c:	602b      	str	r3, [r5, #0]
1001208e:	f000 fa19 	bl	100124c4 <_kill>
10012092:	1c43      	adds	r3, r0, #1
10012094:	d102      	bne.n	1001209c <_kill_r+0x1c>
10012096:	682b      	ldr	r3, [r5, #0]
10012098:	b103      	cbz	r3, 1001209c <_kill_r+0x1c>
1001209a:	6023      	str	r3, [r4, #0]
1001209c:	bd38      	pop	{r3, r4, r5, pc}
1001209e:	bf00      	nop
100120a0:	10029e18 	.word	0x10029e18

100120a4 <_getpid_r>:
100120a4:	f000 b9fe 	b.w	100124a4 <_getpid>

100120a8 <_calloc_r>:
100120a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
100120aa:	fba1 2402 	umull	r2, r4, r1, r2
100120ae:	b94c      	cbnz	r4, 100120c4 <_calloc_r+0x1c>
100120b0:	4611      	mov	r1, r2
100120b2:	9201      	str	r2, [sp, #4]
100120b4:	f7fd fa4e 	bl	1000f554 <_malloc_r>
100120b8:	9a01      	ldr	r2, [sp, #4]
100120ba:	4605      	mov	r5, r0
100120bc:	b930      	cbnz	r0, 100120cc <_calloc_r+0x24>
100120be:	4628      	mov	r0, r5
100120c0:	b003      	add	sp, #12
100120c2:	bd30      	pop	{r4, r5, pc}
100120c4:	220c      	movs	r2, #12
100120c6:	6002      	str	r2, [r0, #0]
100120c8:	2500      	movs	r5, #0
100120ca:	e7f8      	b.n	100120be <_calloc_r+0x16>
100120cc:	4621      	mov	r1, r4
100120ce:	f7fe f89a 	bl	10010206 <memset>
100120d2:	e7f4      	b.n	100120be <_calloc_r+0x16>

100120d4 <__ascii_mbtowc>:
100120d4:	b082      	sub	sp, #8
100120d6:	b901      	cbnz	r1, 100120da <__ascii_mbtowc+0x6>
100120d8:	a901      	add	r1, sp, #4
100120da:	b142      	cbz	r2, 100120ee <__ascii_mbtowc+0x1a>
100120dc:	b14b      	cbz	r3, 100120f2 <__ascii_mbtowc+0x1e>
100120de:	7813      	ldrb	r3, [r2, #0]
100120e0:	600b      	str	r3, [r1, #0]
100120e2:	7812      	ldrb	r2, [r2, #0]
100120e4:	1e10      	subs	r0, r2, #0
100120e6:	bf18      	it	ne
100120e8:	2001      	movne	r0, #1
100120ea:	b002      	add	sp, #8
100120ec:	4770      	bx	lr
100120ee:	4610      	mov	r0, r2
100120f0:	e7fb      	b.n	100120ea <__ascii_mbtowc+0x16>
100120f2:	f06f 0001 	mvn.w	r0, #1
100120f6:	e7f8      	b.n	100120ea <__ascii_mbtowc+0x16>

100120f8 <__ascii_wctomb>:
100120f8:	b149      	cbz	r1, 1001210e <__ascii_wctomb+0x16>
100120fa:	2aff      	cmp	r2, #255	; 0xff
100120fc:	bf85      	ittet	hi
100120fe:	238a      	movhi	r3, #138	; 0x8a
10012100:	6003      	strhi	r3, [r0, #0]
10012102:	700a      	strbls	r2, [r1, #0]
10012104:	f04f 30ff 	movhi.w	r0, #4294967295
10012108:	bf98      	it	ls
1001210a:	2001      	movls	r0, #1
1001210c:	4770      	bx	lr
1001210e:	4608      	mov	r0, r1
10012110:	4770      	bx	lr

10012112 <__swhatbuf_r>:
10012112:	b570      	push	{r4, r5, r6, lr}
10012114:	460c      	mov	r4, r1
10012116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1001211a:	2900      	cmp	r1, #0
1001211c:	b096      	sub	sp, #88	; 0x58
1001211e:	4615      	mov	r5, r2
10012120:	461e      	mov	r6, r3
10012122:	da0d      	bge.n	10012140 <__swhatbuf_r+0x2e>
10012124:	89a3      	ldrh	r3, [r4, #12]
10012126:	f013 0f80 	tst.w	r3, #128	; 0x80
1001212a:	f04f 0100 	mov.w	r1, #0
1001212e:	bf0c      	ite	eq
10012130:	f44f 6380 	moveq.w	r3, #1024	; 0x400
10012134:	2340      	movne	r3, #64	; 0x40
10012136:	2000      	movs	r0, #0
10012138:	6031      	str	r1, [r6, #0]
1001213a:	602b      	str	r3, [r5, #0]
1001213c:	b016      	add	sp, #88	; 0x58
1001213e:	bd70      	pop	{r4, r5, r6, pc}
10012140:	466a      	mov	r2, sp
10012142:	f000 f849 	bl	100121d8 <_fstat_r>
10012146:	2800      	cmp	r0, #0
10012148:	dbec      	blt.n	10012124 <__swhatbuf_r+0x12>
1001214a:	9901      	ldr	r1, [sp, #4]
1001214c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
10012150:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
10012154:	4259      	negs	r1, r3
10012156:	4159      	adcs	r1, r3
10012158:	f44f 6380 	mov.w	r3, #1024	; 0x400
1001215c:	e7eb      	b.n	10012136 <__swhatbuf_r+0x24>

1001215e <__smakebuf_r>:
1001215e:	898b      	ldrh	r3, [r1, #12]
10012160:	b573      	push	{r0, r1, r4, r5, r6, lr}
10012162:	079d      	lsls	r5, r3, #30
10012164:	4606      	mov	r6, r0
10012166:	460c      	mov	r4, r1
10012168:	d507      	bpl.n	1001217a <__smakebuf_r+0x1c>
1001216a:	f104 0347 	add.w	r3, r4, #71	; 0x47
1001216e:	6023      	str	r3, [r4, #0]
10012170:	6123      	str	r3, [r4, #16]
10012172:	2301      	movs	r3, #1
10012174:	6163      	str	r3, [r4, #20]
10012176:	b002      	add	sp, #8
10012178:	bd70      	pop	{r4, r5, r6, pc}
1001217a:	ab01      	add	r3, sp, #4
1001217c:	466a      	mov	r2, sp
1001217e:	f7ff ffc8 	bl	10012112 <__swhatbuf_r>
10012182:	9900      	ldr	r1, [sp, #0]
10012184:	4605      	mov	r5, r0
10012186:	4630      	mov	r0, r6
10012188:	f7fd f9e4 	bl	1000f554 <_malloc_r>
1001218c:	b948      	cbnz	r0, 100121a2 <__smakebuf_r+0x44>
1001218e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10012192:	059a      	lsls	r2, r3, #22
10012194:	d4ef      	bmi.n	10012176 <__smakebuf_r+0x18>
10012196:	f023 0303 	bic.w	r3, r3, #3
1001219a:	f043 0302 	orr.w	r3, r3, #2
1001219e:	81a3      	strh	r3, [r4, #12]
100121a0:	e7e3      	b.n	1001216a <__smakebuf_r+0xc>
100121a2:	89a3      	ldrh	r3, [r4, #12]
100121a4:	6020      	str	r0, [r4, #0]
100121a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
100121aa:	81a3      	strh	r3, [r4, #12]
100121ac:	9b00      	ldr	r3, [sp, #0]
100121ae:	6163      	str	r3, [r4, #20]
100121b0:	9b01      	ldr	r3, [sp, #4]
100121b2:	6120      	str	r0, [r4, #16]
100121b4:	b15b      	cbz	r3, 100121ce <__smakebuf_r+0x70>
100121b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
100121ba:	4630      	mov	r0, r6
100121bc:	f000 f81e 	bl	100121fc <_isatty_r>
100121c0:	b128      	cbz	r0, 100121ce <__smakebuf_r+0x70>
100121c2:	89a3      	ldrh	r3, [r4, #12]
100121c4:	f023 0303 	bic.w	r3, r3, #3
100121c8:	f043 0301 	orr.w	r3, r3, #1
100121cc:	81a3      	strh	r3, [r4, #12]
100121ce:	89a3      	ldrh	r3, [r4, #12]
100121d0:	431d      	orrs	r5, r3
100121d2:	81a5      	strh	r5, [r4, #12]
100121d4:	e7cf      	b.n	10012176 <__smakebuf_r+0x18>
	...

100121d8 <_fstat_r>:
100121d8:	b538      	push	{r3, r4, r5, lr}
100121da:	4d07      	ldr	r5, [pc, #28]	; (100121f8 <_fstat_r+0x20>)
100121dc:	2300      	movs	r3, #0
100121de:	4604      	mov	r4, r0
100121e0:	4608      	mov	r0, r1
100121e2:	4611      	mov	r1, r2
100121e4:	602b      	str	r3, [r5, #0]
100121e6:	f000 f955 	bl	10012494 <_fstat>
100121ea:	1c43      	adds	r3, r0, #1
100121ec:	d102      	bne.n	100121f4 <_fstat_r+0x1c>
100121ee:	682b      	ldr	r3, [r5, #0]
100121f0:	b103      	cbz	r3, 100121f4 <_fstat_r+0x1c>
100121f2:	6023      	str	r3, [r4, #0]
100121f4:	bd38      	pop	{r3, r4, r5, pc}
100121f6:	bf00      	nop
100121f8:	10029e18 	.word	0x10029e18

100121fc <_isatty_r>:
100121fc:	b538      	push	{r3, r4, r5, lr}
100121fe:	4d06      	ldr	r5, [pc, #24]	; (10012218 <_isatty_r+0x1c>)
10012200:	2300      	movs	r3, #0
10012202:	4604      	mov	r4, r0
10012204:	4608      	mov	r0, r1
10012206:	602b      	str	r3, [r5, #0]
10012208:	f000 f954 	bl	100124b4 <_isatty>
1001220c:	1c43      	adds	r3, r0, #1
1001220e:	d102      	bne.n	10012216 <_isatty_r+0x1a>
10012210:	682b      	ldr	r3, [r5, #0]
10012212:	b103      	cbz	r3, 10012216 <_isatty_r+0x1a>
10012214:	6023      	str	r3, [r4, #0]
10012216:	bd38      	pop	{r3, r4, r5, pc}
10012218:	10029e18 	.word	0x10029e18

1001221c <expf>:
1001221c:	b508      	push	{r3, lr}
1001221e:	ed2d 8b02 	vpush	{d8}
10012222:	eef0 8a40 	vmov.f32	s17, s0
10012226:	f000 f85f 	bl	100122e8 <__ieee754_expf>
1001222a:	eeb0 8a40 	vmov.f32	s16, s0
1001222e:	eeb0 0a68 	vmov.f32	s0, s17
10012232:	f000 f829 	bl	10012288 <finitef>
10012236:	b160      	cbz	r0, 10012252 <expf+0x36>
10012238:	eddf 7a0f 	vldr	s15, [pc, #60]	; 10012278 <expf+0x5c>
1001223c:	eef4 8ae7 	vcmpe.f32	s17, s15
10012240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
10012244:	dd0a      	ble.n	1001225c <expf+0x40>
10012246:	f7fe f865 	bl	10010314 <__errno>
1001224a:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 1001227c <expf+0x60>
1001224e:	2322      	movs	r3, #34	; 0x22
10012250:	6003      	str	r3, [r0, #0]
10012252:	eeb0 0a48 	vmov.f32	s0, s16
10012256:	ecbd 8b02 	vpop	{d8}
1001225a:	bd08      	pop	{r3, pc}
1001225c:	eddf 7a08 	vldr	s15, [pc, #32]	; 10012280 <expf+0x64>
10012260:	eef4 8ae7 	vcmpe.f32	s17, s15
10012264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
10012268:	d5f3      	bpl.n	10012252 <expf+0x36>
1001226a:	f7fe f853 	bl	10010314 <__errno>
1001226e:	2322      	movs	r3, #34	; 0x22
10012270:	ed9f 8a04 	vldr	s16, [pc, #16]	; 10012284 <expf+0x68>
10012274:	6003      	str	r3, [r0, #0]
10012276:	e7ec      	b.n	10012252 <expf+0x36>
10012278:	42b17217 	.word	0x42b17217
1001227c:	7f800000 	.word	0x7f800000
10012280:	c2cff1b5 	.word	0xc2cff1b5
10012284:	00000000 	.word	0x00000000

10012288 <finitef>:
10012288:	b082      	sub	sp, #8
1001228a:	ed8d 0a01 	vstr	s0, [sp, #4]
1001228e:	9801      	ldr	r0, [sp, #4]
10012290:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
10012294:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
10012298:	bfac      	ite	ge
1001229a:	2000      	movge	r0, #0
1001229c:	2001      	movlt	r0, #1
1001229e:	b002      	add	sp, #8
100122a0:	4770      	bx	lr

100122a2 <with_errnof>:
100122a2:	b513      	push	{r0, r1, r4, lr}
100122a4:	4604      	mov	r4, r0
100122a6:	ed8d 0a01 	vstr	s0, [sp, #4]
100122aa:	f7fe f833 	bl	10010314 <__errno>
100122ae:	ed9d 0a01 	vldr	s0, [sp, #4]
100122b2:	6004      	str	r4, [r0, #0]
100122b4:	b002      	add	sp, #8
100122b6:	bd10      	pop	{r4, pc}

100122b8 <xflowf>:
100122b8:	b130      	cbz	r0, 100122c8 <xflowf+0x10>
100122ba:	eef1 7a40 	vneg.f32	s15, s0
100122be:	ee27 0a80 	vmul.f32	s0, s15, s0
100122c2:	2022      	movs	r0, #34	; 0x22
100122c4:	f7ff bfed 	b.w	100122a2 <with_errnof>
100122c8:	eef0 7a40 	vmov.f32	s15, s0
100122cc:	e7f7      	b.n	100122be <xflowf+0x6>
	...

100122d0 <__math_uflowf>:
100122d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 100122d8 <__math_uflowf+0x8>
100122d4:	f7ff bff0 	b.w	100122b8 <xflowf>
100122d8:	10000000 	.word	0x10000000

100122dc <__math_oflowf>:
100122dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 100122e4 <__math_oflowf+0x8>
100122e0:	f7ff bfea 	b.w	100122b8 <xflowf>
100122e4:	70000000 	.word	0x70000000

100122e8 <__ieee754_expf>:
100122e8:	ee10 2a10 	vmov	r2, s0
100122ec:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
100122f0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
100122f4:	d902      	bls.n	100122fc <__ieee754_expf+0x14>
100122f6:	ee30 0a00 	vadd.f32	s0, s0, s0
100122fa:	4770      	bx	lr
100122fc:	ea4f 71d2 	mov.w	r1, r2, lsr #31
10012300:	d106      	bne.n	10012310 <__ieee754_expf+0x28>
10012302:	eddf 7a4e 	vldr	s15, [pc, #312]	; 1001243c <__ieee754_expf+0x154>
10012306:	2900      	cmp	r1, #0
10012308:	bf18      	it	ne
1001230a:	eeb0 0a67 	vmovne.f32	s0, s15
1001230e:	4770      	bx	lr
10012310:	484b      	ldr	r0, [pc, #300]	; (10012440 <__ieee754_expf+0x158>)
10012312:	4282      	cmp	r2, r0
10012314:	dd02      	ble.n	1001231c <__ieee754_expf+0x34>
10012316:	2000      	movs	r0, #0
10012318:	f7ff bfe0 	b.w	100122dc <__math_oflowf>
1001231c:	2a00      	cmp	r2, #0
1001231e:	da05      	bge.n	1001232c <__ieee754_expf+0x44>
10012320:	4a48      	ldr	r2, [pc, #288]	; (10012444 <__ieee754_expf+0x15c>)
10012322:	4293      	cmp	r3, r2
10012324:	d902      	bls.n	1001232c <__ieee754_expf+0x44>
10012326:	2000      	movs	r0, #0
10012328:	f7ff bfd2 	b.w	100122d0 <__math_uflowf>
1001232c:	4a46      	ldr	r2, [pc, #280]	; (10012448 <__ieee754_expf+0x160>)
1001232e:	4293      	cmp	r3, r2
10012330:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
10012334:	d952      	bls.n	100123dc <__ieee754_expf+0xf4>
10012336:	4a45      	ldr	r2, [pc, #276]	; (1001244c <__ieee754_expf+0x164>)
10012338:	4293      	cmp	r3, r2
1001233a:	ea4f 0281 	mov.w	r2, r1, lsl #2
1001233e:	d834      	bhi.n	100123aa <__ieee754_expf+0xc2>
10012340:	4b43      	ldr	r3, [pc, #268]	; (10012450 <__ieee754_expf+0x168>)
10012342:	4413      	add	r3, r2
10012344:	ed93 7a00 	vldr	s14, [r3]
10012348:	4b42      	ldr	r3, [pc, #264]	; (10012454 <__ieee754_expf+0x16c>)
1001234a:	4413      	add	r3, r2
1001234c:	ee30 7a47 	vsub.f32	s14, s0, s14
10012350:	f1c1 0201 	rsb	r2, r1, #1
10012354:	edd3 7a00 	vldr	s15, [r3]
10012358:	1a52      	subs	r2, r2, r1
1001235a:	ee37 0a67 	vsub.f32	s0, s14, s15
1001235e:	ee20 6a00 	vmul.f32	s12, s0, s0
10012362:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 10012458 <__ieee754_expf+0x170>
10012366:	eddf 6a3d 	vldr	s13, [pc, #244]	; 1001245c <__ieee754_expf+0x174>
1001236a:	eee6 6a05 	vfma.f32	s13, s12, s10
1001236e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 10012460 <__ieee754_expf+0x178>
10012372:	eea6 5a86 	vfma.f32	s10, s13, s12
10012376:	eddf 6a3b 	vldr	s13, [pc, #236]	; 10012464 <__ieee754_expf+0x17c>
1001237a:	eee5 6a06 	vfma.f32	s13, s10, s12
1001237e:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 10012468 <__ieee754_expf+0x180>
10012382:	eea6 5a86 	vfma.f32	s10, s13, s12
10012386:	eef0 6a40 	vmov.f32	s13, s0
1001238a:	eee5 6a46 	vfms.f32	s13, s10, s12
1001238e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
10012392:	ee20 5a26 	vmul.f32	s10, s0, s13
10012396:	bb92      	cbnz	r2, 100123fe <__ieee754_expf+0x116>
10012398:	ee76 6ac6 	vsub.f32	s13, s13, s12
1001239c:	eec5 7a26 	vdiv.f32	s15, s10, s13
100123a0:	ee37 0ac0 	vsub.f32	s0, s15, s0
100123a4:	ee35 0ac0 	vsub.f32	s0, s11, s0
100123a8:	4770      	bx	lr
100123aa:	4b30      	ldr	r3, [pc, #192]	; (1001246c <__ieee754_expf+0x184>)
100123ac:	ed9f 7a30 	vldr	s14, [pc, #192]	; 10012470 <__ieee754_expf+0x188>
100123b0:	eddf 6a30 	vldr	s13, [pc, #192]	; 10012474 <__ieee754_expf+0x18c>
100123b4:	4413      	add	r3, r2
100123b6:	edd3 7a00 	vldr	s15, [r3]
100123ba:	eee0 7a07 	vfma.f32	s15, s0, s14
100123be:	eeb0 7a40 	vmov.f32	s14, s0
100123c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
100123c6:	ee17 2a90 	vmov	r2, s15
100123ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
100123ce:	eea7 7ae6 	vfms.f32	s14, s15, s13
100123d2:	eddf 6a29 	vldr	s13, [pc, #164]	; 10012478 <__ieee754_expf+0x190>
100123d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
100123da:	e7be      	b.n	1001235a <__ieee754_expf+0x72>
100123dc:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
100123e0:	d20b      	bcs.n	100123fa <__ieee754_expf+0x112>
100123e2:	eddf 6a26 	vldr	s13, [pc, #152]	; 1001247c <__ieee754_expf+0x194>
100123e6:	ee70 6a26 	vadd.f32	s13, s0, s13
100123ea:	eef4 6ae5 	vcmpe.f32	s13, s11
100123ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
100123f2:	dd02      	ble.n	100123fa <__ieee754_expf+0x112>
100123f4:	ee30 0a25 	vadd.f32	s0, s0, s11
100123f8:	4770      	bx	lr
100123fa:	2200      	movs	r2, #0
100123fc:	e7af      	b.n	1001235e <__ieee754_expf+0x76>
100123fe:	ee36 6a66 	vsub.f32	s12, s12, s13
10012402:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
10012406:	eec5 6a06 	vdiv.f32	s13, s10, s12
1001240a:	bfb8      	it	lt
1001240c:	3264      	addlt	r2, #100	; 0x64
1001240e:	ee77 7ae6 	vsub.f32	s15, s15, s13
10012412:	ee77 7ac7 	vsub.f32	s15, s15, s14
10012416:	ee75 7ae7 	vsub.f32	s15, s11, s15
1001241a:	ee17 3a90 	vmov	r3, s15
1001241e:	bfab      	itete	ge
10012420:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
10012424:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
10012428:	ee00 3a10 	vmovge	s0, r3
1001242c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 10012480 <__ieee754_expf+0x198>
10012430:	bfbc      	itt	lt
10012432:	ee00 3a10 	vmovlt	s0, r3
10012436:	ee20 0a27 	vmullt.f32	s0, s0, s15
1001243a:	4770      	bx	lr
1001243c:	00000000 	.word	0x00000000
10012440:	42b17217 	.word	0x42b17217
10012444:	42cff1b5 	.word	0x42cff1b5
10012448:	3eb17218 	.word	0x3eb17218
1001244c:	3f851591 	.word	0x3f851591
10012450:	1001b070 	.word	0x1001b070
10012454:	1001b078 	.word	0x1001b078
10012458:	3331bb4c 	.word	0x3331bb4c
1001245c:	b5ddea0e 	.word	0xb5ddea0e
10012460:	388ab355 	.word	0x388ab355
10012464:	bb360b61 	.word	0xbb360b61
10012468:	3e2aaaab 	.word	0x3e2aaaab
1001246c:	1001b068 	.word	0x1001b068
10012470:	3fb8aa3b 	.word	0x3fb8aa3b
10012474:	3f317180 	.word	0x3f317180
10012478:	3717f7d1 	.word	0x3717f7d1
1001247c:	7149f2ca 	.word	0x7149f2ca
10012480:	0d800000 	.word	0x0d800000

10012484 <_close>:
10012484:	4b02      	ldr	r3, [pc, #8]	; (10012490 <_close+0xc>)
10012486:	2258      	movs	r2, #88	; 0x58
10012488:	601a      	str	r2, [r3, #0]
1001248a:	f04f 30ff 	mov.w	r0, #4294967295
1001248e:	4770      	bx	lr
10012490:	10029e18 	.word	0x10029e18

10012494 <_fstat>:
10012494:	4b02      	ldr	r3, [pc, #8]	; (100124a0 <_fstat+0xc>)
10012496:	2258      	movs	r2, #88	; 0x58
10012498:	601a      	str	r2, [r3, #0]
1001249a:	f04f 30ff 	mov.w	r0, #4294967295
1001249e:	4770      	bx	lr
100124a0:	10029e18 	.word	0x10029e18

100124a4 <_getpid>:
100124a4:	4b02      	ldr	r3, [pc, #8]	; (100124b0 <_getpid+0xc>)
100124a6:	2258      	movs	r2, #88	; 0x58
100124a8:	601a      	str	r2, [r3, #0]
100124aa:	f04f 30ff 	mov.w	r0, #4294967295
100124ae:	4770      	bx	lr
100124b0:	10029e18 	.word	0x10029e18

100124b4 <_isatty>:
100124b4:	4b02      	ldr	r3, [pc, #8]	; (100124c0 <_isatty+0xc>)
100124b6:	2258      	movs	r2, #88	; 0x58
100124b8:	601a      	str	r2, [r3, #0]
100124ba:	2000      	movs	r0, #0
100124bc:	4770      	bx	lr
100124be:	bf00      	nop
100124c0:	10029e18 	.word	0x10029e18

100124c4 <_kill>:
100124c4:	4b02      	ldr	r3, [pc, #8]	; (100124d0 <_kill+0xc>)
100124c6:	2258      	movs	r2, #88	; 0x58
100124c8:	601a      	str	r2, [r3, #0]
100124ca:	f04f 30ff 	mov.w	r0, #4294967295
100124ce:	4770      	bx	lr
100124d0:	10029e18 	.word	0x10029e18

100124d4 <_lseek>:
100124d4:	4b02      	ldr	r3, [pc, #8]	; (100124e0 <_lseek+0xc>)
100124d6:	2258      	movs	r2, #88	; 0x58
100124d8:	601a      	str	r2, [r3, #0]
100124da:	f04f 30ff 	mov.w	r0, #4294967295
100124de:	4770      	bx	lr
100124e0:	10029e18 	.word	0x10029e18

100124e4 <_read>:
100124e4:	4b02      	ldr	r3, [pc, #8]	; (100124f0 <_read+0xc>)
100124e6:	2258      	movs	r2, #88	; 0x58
100124e8:	601a      	str	r2, [r3, #0]
100124ea:	f04f 30ff 	mov.w	r0, #4294967295
100124ee:	4770      	bx	lr
100124f0:	10029e18 	.word	0x10029e18

100124f4 <_write>:
100124f4:	4b02      	ldr	r3, [pc, #8]	; (10012500 <_write+0xc>)
100124f6:	2258      	movs	r2, #88	; 0x58
100124f8:	601a      	str	r2, [r3, #0]
100124fa:	f04f 30ff 	mov.w	r0, #4294967295
100124fe:	4770      	bx	lr
10012500:	10029e18 	.word	0x10029e18

10012504 <_exit>:
10012504:	e7fe      	b.n	10012504 <_exit>
	...

10012508 <_init>:
10012508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001250a:	bf00      	nop
1001250c:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001250e:	bc08      	pop	{r3}
10012510:	469e      	mov	lr, r3
10012512:	4770      	bx	lr

10012514 <_fini>:
10012514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012516:	bf00      	nop
10012518:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001251a:	bc08      	pop	{r3}
1001251c:	469e      	mov	lr, r3
1001251e:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

10012520 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
10012520:	f8df d034 	ldr.w	sp, [pc, #52]	; 10012558 <LoopForever+0x2>
  movs  r1, #0
10012524:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10012526:	e003      	b.n	10012530 <LoopCopyDataInit>

10012528 <CopyDataInit>:
  ldr  r3, =_sidata
10012528:	4b0c      	ldr	r3, [pc, #48]	; (1001255c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
1001252a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
1001252c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
1001252e:	3104      	adds	r1, #4

10012530 <LoopCopyDataInit>:
  ldr  r0, =_sdata
10012530:	480b      	ldr	r0, [pc, #44]	; (10012560 <LoopForever+0xa>)
  ldr  r3, =_edata
10012532:	4b0c      	ldr	r3, [pc, #48]	; (10012564 <LoopForever+0xe>)
  adds  r2, r0, r1
10012534:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10012536:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10012538:	d3f6      	bcc.n	10012528 <CopyDataInit>
  ldr  r2, =_sbss
1001253a:	4a0b      	ldr	r2, [pc, #44]	; (10012568 <LoopForever+0x12>)
  b  LoopFillZerobss
1001253c:	e002      	b.n	10012544 <LoopFillZerobss>

1001253e <FillZerobss>:
  movs  r3, #0
1001253e:	2300      	movs	r3, #0
  str  r3, [r2], #4
10012540:	f842 3b04 	str.w	r3, [r2], #4

10012544 <LoopFillZerobss>:
  ldr  r3, = _ebss
10012544:	4b09      	ldr	r3, [pc, #36]	; (1001256c <LoopForever+0x16>)
  cmp  r2, r3
10012546:	429a      	cmp	r2, r3
  bcc  FillZerobss
10012548:	d3f9      	bcc.n	1001253e <FillZerobss>
  bl  SystemInit
1001254a:	f7ee fa75 	bl	10000a38 <SystemInit>
 bl __libc_init_array
1001254e:	f7fd fee7 	bl	10010320 <__libc_init_array>
  bl main
10012552:	f7ee fa97 	bl	10000a84 <main>

10012556 <LoopForever>:
    b LoopForever
10012556:	e7fe      	b.n	10012556 <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
10012558:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
1001255c:	1001b088 	.word	0x1001b088
  ldr  r0, =_sdata
10012560:	10020000 	.word	0x10020000
  ldr  r3, =_edata
10012564:	10020d40 	.word	0x10020d40
  ldr  r2, =_sbss
10012568:	10020dcc 	.word	0x10020dcc
  ldr  r3, = _ebss
1001256c:	10029e20 	.word	0x10029e20

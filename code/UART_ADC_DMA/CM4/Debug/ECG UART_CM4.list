
ECG UART_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4c4  10000000  10000000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  1000e4c4  1000e4c4  0002e4c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000418  1000e514  1000e514  0002e514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  1000e92c  1000e92c  000301ac  2**0
                  CONTENTS
  5 .ARM          00000000  1000e92c  1000e92c  000301ac  2**0
                  CONTENTS
  6 .preinit_array 00000000  1000e92c  1000e92c  000301ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  1000e92c  1000e92c  0002e92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  1000e930  1000e930  0002e930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000120  10020000  1000e934  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 0000008c  10020120  1000ea54  00030120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .bss          00000454  100201ac  1000eae0  000301ac  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  10020600  1000ef34  000301ac  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301ac  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 15 .debug_info   00022b3d  00000000  00000000  0003021f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00004b21  00000000  00000000  00052d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000016b8  00000000  00000000  00057880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001101  00000000  00000000  00058f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0004cbdb  00000000  00000000  0005a039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002034c  00000000  00000000  000a6c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001e48cd  00000000  00000000  000c6f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000068fc  00000000  00000000  002ab830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000075  00000000  00000000  002b212c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	; (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	; (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	; (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	100201ac 	.word	0x100201ac
1000001c:	00000000 	.word	0x00000000
10000020:	1000e4ac 	.word	0x1000e4ac

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	; (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	; (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	; (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	100201b0 	.word	0x100201b0
1000003c:	1000e4ac 	.word	0x1000e4ac

10000040 <strcmp>:
10000040:	f810 2b01 	ldrb.w	r2, [r0], #1
10000044:	f811 3b01 	ldrb.w	r3, [r1], #1
10000048:	2a01      	cmp	r2, #1
1000004a:	bf28      	it	cs
1000004c:	429a      	cmpcs	r2, r3
1000004e:	d0f7      	beq.n	10000040 <strcmp>
10000050:	1ad0      	subs	r0, r2, r3
10000052:	4770      	bx	lr

10000054 <strlen>:
10000054:	4603      	mov	r3, r0
10000056:	f813 2b01 	ldrb.w	r2, [r3], #1
1000005a:	2a00      	cmp	r2, #0
1000005c:	d1fb      	bne.n	10000056 <strlen+0x2>
1000005e:	1a18      	subs	r0, r3, r0
10000060:	3801      	subs	r0, #1
10000062:	4770      	bx	lr
	...

10000070 <memchr>:
10000070:	f001 01ff 	and.w	r1, r1, #255	; 0xff
10000074:	2a10      	cmp	r2, #16
10000076:	db2b      	blt.n	100000d0 <memchr+0x60>
10000078:	f010 0f07 	tst.w	r0, #7
1000007c:	d008      	beq.n	10000090 <memchr+0x20>
1000007e:	f810 3b01 	ldrb.w	r3, [r0], #1
10000082:	3a01      	subs	r2, #1
10000084:	428b      	cmp	r3, r1
10000086:	d02d      	beq.n	100000e4 <memchr+0x74>
10000088:	f010 0f07 	tst.w	r0, #7
1000008c:	b342      	cbz	r2, 100000e0 <memchr+0x70>
1000008e:	d1f6      	bne.n	1000007e <memchr+0xe>
10000090:	b4f0      	push	{r4, r5, r6, r7}
10000092:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
10000096:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1000009a:	f022 0407 	bic.w	r4, r2, #7
1000009e:	f07f 0700 	mvns.w	r7, #0
100000a2:	2300      	movs	r3, #0
100000a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
100000a8:	3c08      	subs	r4, #8
100000aa:	ea85 0501 	eor.w	r5, r5, r1
100000ae:	ea86 0601 	eor.w	r6, r6, r1
100000b2:	fa85 f547 	uadd8	r5, r5, r7
100000b6:	faa3 f587 	sel	r5, r3, r7
100000ba:	fa86 f647 	uadd8	r6, r6, r7
100000be:	faa5 f687 	sel	r6, r5, r7
100000c2:	b98e      	cbnz	r6, 100000e8 <memchr+0x78>
100000c4:	d1ee      	bne.n	100000a4 <memchr+0x34>
100000c6:	bcf0      	pop	{r4, r5, r6, r7}
100000c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
100000cc:	f002 0207 	and.w	r2, r2, #7
100000d0:	b132      	cbz	r2, 100000e0 <memchr+0x70>
100000d2:	f810 3b01 	ldrb.w	r3, [r0], #1
100000d6:	3a01      	subs	r2, #1
100000d8:	ea83 0301 	eor.w	r3, r3, r1
100000dc:	b113      	cbz	r3, 100000e4 <memchr+0x74>
100000de:	d1f8      	bne.n	100000d2 <memchr+0x62>
100000e0:	2000      	movs	r0, #0
100000e2:	4770      	bx	lr
100000e4:	3801      	subs	r0, #1
100000e6:	4770      	bx	lr
100000e8:	2d00      	cmp	r5, #0
100000ea:	bf06      	itte	eq
100000ec:	4635      	moveq	r5, r6
100000ee:	3803      	subeq	r0, #3
100000f0:	3807      	subne	r0, #7
100000f2:	f015 0f01 	tst.w	r5, #1
100000f6:	d107      	bne.n	10000108 <memchr+0x98>
100000f8:	3001      	adds	r0, #1
100000fa:	f415 7f80 	tst.w	r5, #256	; 0x100
100000fe:	bf02      	ittt	eq
10000100:	3001      	addeq	r0, #1
10000102:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
10000106:	3001      	addeq	r0, #1
10000108:	bcf0      	pop	{r4, r5, r6, r7}
1000010a:	3801      	subs	r0, #1
1000010c:	4770      	bx	lr
1000010e:	bf00      	nop

10000110 <__aeabi_drsub>:
10000110:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
10000114:	e002      	b.n	1000011c <__adddf3>
10000116:	bf00      	nop

10000118 <__aeabi_dsub>:
10000118:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1000011c <__adddf3>:
1000011c:	b530      	push	{r4, r5, lr}
1000011e:	ea4f 0441 	mov.w	r4, r1, lsl #1
10000122:	ea4f 0543 	mov.w	r5, r3, lsl #1
10000126:	ea94 0f05 	teq	r4, r5
1000012a:	bf08      	it	eq
1000012c:	ea90 0f02 	teqeq	r0, r2
10000130:	bf1f      	itttt	ne
10000132:	ea54 0c00 	orrsne.w	ip, r4, r0
10000136:	ea55 0c02 	orrsne.w	ip, r5, r2
1000013a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1000013e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
10000142:	f000 80e2 	beq.w	1000030a <__adddf3+0x1ee>
10000146:	ea4f 5454 	mov.w	r4, r4, lsr #21
1000014a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1000014e:	bfb8      	it	lt
10000150:	426d      	neglt	r5, r5
10000152:	dd0c      	ble.n	1000016e <__adddf3+0x52>
10000154:	442c      	add	r4, r5
10000156:	ea80 0202 	eor.w	r2, r0, r2
1000015a:	ea81 0303 	eor.w	r3, r1, r3
1000015e:	ea82 0000 	eor.w	r0, r2, r0
10000162:	ea83 0101 	eor.w	r1, r3, r1
10000166:	ea80 0202 	eor.w	r2, r0, r2
1000016a:	ea81 0303 	eor.w	r3, r1, r3
1000016e:	2d36      	cmp	r5, #54	; 0x36
10000170:	bf88      	it	hi
10000172:	bd30      	pophi	{r4, r5, pc}
10000174:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
10000178:	ea4f 3101 	mov.w	r1, r1, lsl #12
1000017c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
10000180:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
10000184:	d002      	beq.n	1000018c <__adddf3+0x70>
10000186:	4240      	negs	r0, r0
10000188:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1000018c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
10000190:	ea4f 3303 	mov.w	r3, r3, lsl #12
10000194:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
10000198:	d002      	beq.n	100001a0 <__adddf3+0x84>
1000019a:	4252      	negs	r2, r2
1000019c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
100001a0:	ea94 0f05 	teq	r4, r5
100001a4:	f000 80a7 	beq.w	100002f6 <__adddf3+0x1da>
100001a8:	f1a4 0401 	sub.w	r4, r4, #1
100001ac:	f1d5 0e20 	rsbs	lr, r5, #32
100001b0:	db0d      	blt.n	100001ce <__adddf3+0xb2>
100001b2:	fa02 fc0e 	lsl.w	ip, r2, lr
100001b6:	fa22 f205 	lsr.w	r2, r2, r5
100001ba:	1880      	adds	r0, r0, r2
100001bc:	f141 0100 	adc.w	r1, r1, #0
100001c0:	fa03 f20e 	lsl.w	r2, r3, lr
100001c4:	1880      	adds	r0, r0, r2
100001c6:	fa43 f305 	asr.w	r3, r3, r5
100001ca:	4159      	adcs	r1, r3
100001cc:	e00e      	b.n	100001ec <__adddf3+0xd0>
100001ce:	f1a5 0520 	sub.w	r5, r5, #32
100001d2:	f10e 0e20 	add.w	lr, lr, #32
100001d6:	2a01      	cmp	r2, #1
100001d8:	fa03 fc0e 	lsl.w	ip, r3, lr
100001dc:	bf28      	it	cs
100001de:	f04c 0c02 	orrcs.w	ip, ip, #2
100001e2:	fa43 f305 	asr.w	r3, r3, r5
100001e6:	18c0      	adds	r0, r0, r3
100001e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
100001ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
100001f0:	d507      	bpl.n	10000202 <__adddf3+0xe6>
100001f2:	f04f 0e00 	mov.w	lr, #0
100001f6:	f1dc 0c00 	rsbs	ip, ip, #0
100001fa:	eb7e 0000 	sbcs.w	r0, lr, r0
100001fe:	eb6e 0101 	sbc.w	r1, lr, r1
10000202:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
10000206:	d31b      	bcc.n	10000240 <__adddf3+0x124>
10000208:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1000020c:	d30c      	bcc.n	10000228 <__adddf3+0x10c>
1000020e:	0849      	lsrs	r1, r1, #1
10000210:	ea5f 0030 	movs.w	r0, r0, rrx
10000214:	ea4f 0c3c 	mov.w	ip, ip, rrx
10000218:	f104 0401 	add.w	r4, r4, #1
1000021c:	ea4f 5244 	mov.w	r2, r4, lsl #21
10000220:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
10000224:	f080 809a 	bcs.w	1000035c <__adddf3+0x240>
10000228:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1000022c:	bf08      	it	eq
1000022e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
10000232:	f150 0000 	adcs.w	r0, r0, #0
10000236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1000023a:	ea41 0105 	orr.w	r1, r1, r5
1000023e:	bd30      	pop	{r4, r5, pc}
10000240:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
10000244:	4140      	adcs	r0, r0
10000246:	eb41 0101 	adc.w	r1, r1, r1
1000024a:	3c01      	subs	r4, #1
1000024c:	bf28      	it	cs
1000024e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
10000252:	d2e9      	bcs.n	10000228 <__adddf3+0x10c>
10000254:	f091 0f00 	teq	r1, #0
10000258:	bf04      	itt	eq
1000025a:	4601      	moveq	r1, r0
1000025c:	2000      	moveq	r0, #0
1000025e:	fab1 f381 	clz	r3, r1
10000262:	bf08      	it	eq
10000264:	3320      	addeq	r3, #32
10000266:	f1a3 030b 	sub.w	r3, r3, #11
1000026a:	f1b3 0220 	subs.w	r2, r3, #32
1000026e:	da0c      	bge.n	1000028a <__adddf3+0x16e>
10000270:	320c      	adds	r2, #12
10000272:	dd08      	ble.n	10000286 <__adddf3+0x16a>
10000274:	f102 0c14 	add.w	ip, r2, #20
10000278:	f1c2 020c 	rsb	r2, r2, #12
1000027c:	fa01 f00c 	lsl.w	r0, r1, ip
10000280:	fa21 f102 	lsr.w	r1, r1, r2
10000284:	e00c      	b.n	100002a0 <__adddf3+0x184>
10000286:	f102 0214 	add.w	r2, r2, #20
1000028a:	bfd8      	it	le
1000028c:	f1c2 0c20 	rsble	ip, r2, #32
10000290:	fa01 f102 	lsl.w	r1, r1, r2
10000294:	fa20 fc0c 	lsr.w	ip, r0, ip
10000298:	bfdc      	itt	le
1000029a:	ea41 010c 	orrle.w	r1, r1, ip
1000029e:	4090      	lslle	r0, r2
100002a0:	1ae4      	subs	r4, r4, r3
100002a2:	bfa2      	ittt	ge
100002a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
100002a8:	4329      	orrge	r1, r5
100002aa:	bd30      	popge	{r4, r5, pc}
100002ac:	ea6f 0404 	mvn.w	r4, r4
100002b0:	3c1f      	subs	r4, #31
100002b2:	da1c      	bge.n	100002ee <__adddf3+0x1d2>
100002b4:	340c      	adds	r4, #12
100002b6:	dc0e      	bgt.n	100002d6 <__adddf3+0x1ba>
100002b8:	f104 0414 	add.w	r4, r4, #20
100002bc:	f1c4 0220 	rsb	r2, r4, #32
100002c0:	fa20 f004 	lsr.w	r0, r0, r4
100002c4:	fa01 f302 	lsl.w	r3, r1, r2
100002c8:	ea40 0003 	orr.w	r0, r0, r3
100002cc:	fa21 f304 	lsr.w	r3, r1, r4
100002d0:	ea45 0103 	orr.w	r1, r5, r3
100002d4:	bd30      	pop	{r4, r5, pc}
100002d6:	f1c4 040c 	rsb	r4, r4, #12
100002da:	f1c4 0220 	rsb	r2, r4, #32
100002de:	fa20 f002 	lsr.w	r0, r0, r2
100002e2:	fa01 f304 	lsl.w	r3, r1, r4
100002e6:	ea40 0003 	orr.w	r0, r0, r3
100002ea:	4629      	mov	r1, r5
100002ec:	bd30      	pop	{r4, r5, pc}
100002ee:	fa21 f004 	lsr.w	r0, r1, r4
100002f2:	4629      	mov	r1, r5
100002f4:	bd30      	pop	{r4, r5, pc}
100002f6:	f094 0f00 	teq	r4, #0
100002fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
100002fe:	bf06      	itte	eq
10000300:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
10000304:	3401      	addeq	r4, #1
10000306:	3d01      	subne	r5, #1
10000308:	e74e      	b.n	100001a8 <__adddf3+0x8c>
1000030a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1000030e:	bf18      	it	ne
10000310:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
10000314:	d029      	beq.n	1000036a <__adddf3+0x24e>
10000316:	ea94 0f05 	teq	r4, r5
1000031a:	bf08      	it	eq
1000031c:	ea90 0f02 	teqeq	r0, r2
10000320:	d005      	beq.n	1000032e <__adddf3+0x212>
10000322:	ea54 0c00 	orrs.w	ip, r4, r0
10000326:	bf04      	itt	eq
10000328:	4619      	moveq	r1, r3
1000032a:	4610      	moveq	r0, r2
1000032c:	bd30      	pop	{r4, r5, pc}
1000032e:	ea91 0f03 	teq	r1, r3
10000332:	bf1e      	ittt	ne
10000334:	2100      	movne	r1, #0
10000336:	2000      	movne	r0, #0
10000338:	bd30      	popne	{r4, r5, pc}
1000033a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1000033e:	d105      	bne.n	1000034c <__adddf3+0x230>
10000340:	0040      	lsls	r0, r0, #1
10000342:	4149      	adcs	r1, r1
10000344:	bf28      	it	cs
10000346:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1000034a:	bd30      	pop	{r4, r5, pc}
1000034c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
10000350:	bf3c      	itt	cc
10000352:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
10000356:	bd30      	popcc	{r4, r5, pc}
10000358:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1000035c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
10000360:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
10000364:	f04f 0000 	mov.w	r0, #0
10000368:	bd30      	pop	{r4, r5, pc}
1000036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1000036e:	bf1a      	itte	ne
10000370:	4619      	movne	r1, r3
10000372:	4610      	movne	r0, r2
10000374:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
10000378:	bf1c      	itt	ne
1000037a:	460b      	movne	r3, r1
1000037c:	4602      	movne	r2, r0
1000037e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
10000382:	bf06      	itte	eq
10000384:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
10000388:	ea91 0f03 	teqeq	r1, r3
1000038c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
10000390:	bd30      	pop	{r4, r5, pc}
10000392:	bf00      	nop

10000394 <__aeabi_ui2d>:
10000394:	f090 0f00 	teq	r0, #0
10000398:	bf04      	itt	eq
1000039a:	2100      	moveq	r1, #0
1000039c:	4770      	bxeq	lr
1000039e:	b530      	push	{r4, r5, lr}
100003a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
100003a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
100003a8:	f04f 0500 	mov.w	r5, #0
100003ac:	f04f 0100 	mov.w	r1, #0
100003b0:	e750      	b.n	10000254 <__adddf3+0x138>
100003b2:	bf00      	nop

100003b4 <__aeabi_i2d>:
100003b4:	f090 0f00 	teq	r0, #0
100003b8:	bf04      	itt	eq
100003ba:	2100      	moveq	r1, #0
100003bc:	4770      	bxeq	lr
100003be:	b530      	push	{r4, r5, lr}
100003c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
100003c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
100003c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
100003cc:	bf48      	it	mi
100003ce:	4240      	negmi	r0, r0
100003d0:	f04f 0100 	mov.w	r1, #0
100003d4:	e73e      	b.n	10000254 <__adddf3+0x138>
100003d6:	bf00      	nop

100003d8 <__aeabi_f2d>:
100003d8:	0042      	lsls	r2, r0, #1
100003da:	ea4f 01e2 	mov.w	r1, r2, asr #3
100003de:	ea4f 0131 	mov.w	r1, r1, rrx
100003e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
100003e6:	bf1f      	itttt	ne
100003e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
100003ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
100003f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
100003f4:	4770      	bxne	lr
100003f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
100003fa:	bf08      	it	eq
100003fc:	4770      	bxeq	lr
100003fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
10000402:	bf04      	itt	eq
10000404:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
10000408:	4770      	bxeq	lr
1000040a:	b530      	push	{r4, r5, lr}
1000040c:	f44f 7460 	mov.w	r4, #896	; 0x380
10000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
10000414:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
10000418:	e71c      	b.n	10000254 <__adddf3+0x138>
1000041a:	bf00      	nop

1000041c <__aeabi_ul2d>:
1000041c:	ea50 0201 	orrs.w	r2, r0, r1
10000420:	bf08      	it	eq
10000422:	4770      	bxeq	lr
10000424:	b530      	push	{r4, r5, lr}
10000426:	f04f 0500 	mov.w	r5, #0
1000042a:	e00a      	b.n	10000442 <__aeabi_l2d+0x16>

1000042c <__aeabi_l2d>:
1000042c:	ea50 0201 	orrs.w	r2, r0, r1
10000430:	bf08      	it	eq
10000432:	4770      	bxeq	lr
10000434:	b530      	push	{r4, r5, lr}
10000436:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1000043a:	d502      	bpl.n	10000442 <__aeabi_l2d+0x16>
1000043c:	4240      	negs	r0, r0
1000043e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10000442:	f44f 6480 	mov.w	r4, #1024	; 0x400
10000446:	f104 0432 	add.w	r4, r4, #50	; 0x32
1000044a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1000044e:	f43f aed8 	beq.w	10000202 <__adddf3+0xe6>
10000452:	f04f 0203 	mov.w	r2, #3
10000456:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1000045a:	bf18      	it	ne
1000045c:	3203      	addne	r2, #3
1000045e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
10000462:	bf18      	it	ne
10000464:	3203      	addne	r2, #3
10000466:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1000046a:	f1c2 0320 	rsb	r3, r2, #32
1000046e:	fa00 fc03 	lsl.w	ip, r0, r3
10000472:	fa20 f002 	lsr.w	r0, r0, r2
10000476:	fa01 fe03 	lsl.w	lr, r1, r3
1000047a:	ea40 000e 	orr.w	r0, r0, lr
1000047e:	fa21 f102 	lsr.w	r1, r1, r2
10000482:	4414      	add	r4, r2
10000484:	e6bd      	b.n	10000202 <__adddf3+0xe6>
10000486:	bf00      	nop

10000488 <__aeabi_dmul>:
10000488:	b570      	push	{r4, r5, r6, lr}
1000048a:	f04f 0cff 	mov.w	ip, #255	; 0xff
1000048e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
10000492:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
10000496:	bf1d      	ittte	ne
10000498:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1000049c:	ea94 0f0c 	teqne	r4, ip
100004a0:	ea95 0f0c 	teqne	r5, ip
100004a4:	f000 f8de 	bleq	10000664 <__aeabi_dmul+0x1dc>
100004a8:	442c      	add	r4, r5
100004aa:	ea81 0603 	eor.w	r6, r1, r3
100004ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
100004b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
100004b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
100004ba:	bf18      	it	ne
100004bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
100004c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
100004c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
100004c8:	d038      	beq.n	1000053c <__aeabi_dmul+0xb4>
100004ca:	fba0 ce02 	umull	ip, lr, r0, r2
100004ce:	f04f 0500 	mov.w	r5, #0
100004d2:	fbe1 e502 	umlal	lr, r5, r1, r2
100004d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
100004da:	fbe0 e503 	umlal	lr, r5, r0, r3
100004de:	f04f 0600 	mov.w	r6, #0
100004e2:	fbe1 5603 	umlal	r5, r6, r1, r3
100004e6:	f09c 0f00 	teq	ip, #0
100004ea:	bf18      	it	ne
100004ec:	f04e 0e01 	orrne.w	lr, lr, #1
100004f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
100004f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
100004f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
100004fc:	d204      	bcs.n	10000508 <__aeabi_dmul+0x80>
100004fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
10000502:	416d      	adcs	r5, r5
10000504:	eb46 0606 	adc.w	r6, r6, r6
10000508:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1000050c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
10000510:	ea4f 20c5 	mov.w	r0, r5, lsl #11
10000514:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
10000518:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1000051c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
10000520:	bf88      	it	hi
10000522:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
10000526:	d81e      	bhi.n	10000566 <__aeabi_dmul+0xde>
10000528:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1000052c:	bf08      	it	eq
1000052e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
10000532:	f150 0000 	adcs.w	r0, r0, #0
10000536:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1000053a:	bd70      	pop	{r4, r5, r6, pc}
1000053c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
10000540:	ea46 0101 	orr.w	r1, r6, r1
10000544:	ea40 0002 	orr.w	r0, r0, r2
10000548:	ea81 0103 	eor.w	r1, r1, r3
1000054c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
10000550:	bfc2      	ittt	gt
10000552:	ebd4 050c 	rsbsgt	r5, r4, ip
10000556:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1000055a:	bd70      	popgt	{r4, r5, r6, pc}
1000055c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
10000560:	f04f 0e00 	mov.w	lr, #0
10000564:	3c01      	subs	r4, #1
10000566:	f300 80ab 	bgt.w	100006c0 <__aeabi_dmul+0x238>
1000056a:	f114 0f36 	cmn.w	r4, #54	; 0x36
1000056e:	bfde      	ittt	le
10000570:	2000      	movle	r0, #0
10000572:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
10000576:	bd70      	pople	{r4, r5, r6, pc}
10000578:	f1c4 0400 	rsb	r4, r4, #0
1000057c:	3c20      	subs	r4, #32
1000057e:	da35      	bge.n	100005ec <__aeabi_dmul+0x164>
10000580:	340c      	adds	r4, #12
10000582:	dc1b      	bgt.n	100005bc <__aeabi_dmul+0x134>
10000584:	f104 0414 	add.w	r4, r4, #20
10000588:	f1c4 0520 	rsb	r5, r4, #32
1000058c:	fa00 f305 	lsl.w	r3, r0, r5
10000590:	fa20 f004 	lsr.w	r0, r0, r4
10000594:	fa01 f205 	lsl.w	r2, r1, r5
10000598:	ea40 0002 	orr.w	r0, r0, r2
1000059c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
100005a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
100005a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
100005a8:	fa21 f604 	lsr.w	r6, r1, r4
100005ac:	eb42 0106 	adc.w	r1, r2, r6
100005b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
100005b4:	bf08      	it	eq
100005b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
100005ba:	bd70      	pop	{r4, r5, r6, pc}
100005bc:	f1c4 040c 	rsb	r4, r4, #12
100005c0:	f1c4 0520 	rsb	r5, r4, #32
100005c4:	fa00 f304 	lsl.w	r3, r0, r4
100005c8:	fa20 f005 	lsr.w	r0, r0, r5
100005cc:	fa01 f204 	lsl.w	r2, r1, r4
100005d0:	ea40 0002 	orr.w	r0, r0, r2
100005d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
100005d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
100005dc:	f141 0100 	adc.w	r1, r1, #0
100005e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
100005e4:	bf08      	it	eq
100005e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
100005ea:	bd70      	pop	{r4, r5, r6, pc}
100005ec:	f1c4 0520 	rsb	r5, r4, #32
100005f0:	fa00 f205 	lsl.w	r2, r0, r5
100005f4:	ea4e 0e02 	orr.w	lr, lr, r2
100005f8:	fa20 f304 	lsr.w	r3, r0, r4
100005fc:	fa01 f205 	lsl.w	r2, r1, r5
10000600:	ea43 0302 	orr.w	r3, r3, r2
10000604:	fa21 f004 	lsr.w	r0, r1, r4
10000608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1000060c:	fa21 f204 	lsr.w	r2, r1, r4
10000610:	ea20 0002 	bic.w	r0, r0, r2
10000614:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
10000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1000061c:	bf08      	it	eq
1000061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
10000622:	bd70      	pop	{r4, r5, r6, pc}
10000624:	f094 0f00 	teq	r4, #0
10000628:	d10f      	bne.n	1000064a <__aeabi_dmul+0x1c2>
1000062a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1000062e:	0040      	lsls	r0, r0, #1
10000630:	eb41 0101 	adc.w	r1, r1, r1
10000634:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
10000638:	bf08      	it	eq
1000063a:	3c01      	subeq	r4, #1
1000063c:	d0f7      	beq.n	1000062e <__aeabi_dmul+0x1a6>
1000063e:	ea41 0106 	orr.w	r1, r1, r6
10000642:	f095 0f00 	teq	r5, #0
10000646:	bf18      	it	ne
10000648:	4770      	bxne	lr
1000064a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1000064e:	0052      	lsls	r2, r2, #1
10000650:	eb43 0303 	adc.w	r3, r3, r3
10000654:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
10000658:	bf08      	it	eq
1000065a:	3d01      	subeq	r5, #1
1000065c:	d0f7      	beq.n	1000064e <__aeabi_dmul+0x1c6>
1000065e:	ea43 0306 	orr.w	r3, r3, r6
10000662:	4770      	bx	lr
10000664:	ea94 0f0c 	teq	r4, ip
10000668:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1000066c:	bf18      	it	ne
1000066e:	ea95 0f0c 	teqne	r5, ip
10000672:	d00c      	beq.n	1000068e <__aeabi_dmul+0x206>
10000674:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
10000678:	bf18      	it	ne
1000067a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1000067e:	d1d1      	bne.n	10000624 <__aeabi_dmul+0x19c>
10000680:	ea81 0103 	eor.w	r1, r1, r3
10000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
10000688:	f04f 0000 	mov.w	r0, #0
1000068c:	bd70      	pop	{r4, r5, r6, pc}
1000068e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
10000692:	bf06      	itte	eq
10000694:	4610      	moveq	r0, r2
10000696:	4619      	moveq	r1, r3
10000698:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1000069c:	d019      	beq.n	100006d2 <__aeabi_dmul+0x24a>
1000069e:	ea94 0f0c 	teq	r4, ip
100006a2:	d102      	bne.n	100006aa <__aeabi_dmul+0x222>
100006a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
100006a8:	d113      	bne.n	100006d2 <__aeabi_dmul+0x24a>
100006aa:	ea95 0f0c 	teq	r5, ip
100006ae:	d105      	bne.n	100006bc <__aeabi_dmul+0x234>
100006b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
100006b4:	bf1c      	itt	ne
100006b6:	4610      	movne	r0, r2
100006b8:	4619      	movne	r1, r3
100006ba:	d10a      	bne.n	100006d2 <__aeabi_dmul+0x24a>
100006bc:	ea81 0103 	eor.w	r1, r1, r3
100006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
100006c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
100006c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
100006cc:	f04f 0000 	mov.w	r0, #0
100006d0:	bd70      	pop	{r4, r5, r6, pc}
100006d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
100006d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
100006da:	bd70      	pop	{r4, r5, r6, pc}

100006dc <__aeabi_ddiv>:
100006dc:	b570      	push	{r4, r5, r6, lr}
100006de:	f04f 0cff 	mov.w	ip, #255	; 0xff
100006e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
100006e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
100006ea:	bf1d      	ittte	ne
100006ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
100006f0:	ea94 0f0c 	teqne	r4, ip
100006f4:	ea95 0f0c 	teqne	r5, ip
100006f8:	f000 f8a7 	bleq	1000084a <__aeabi_ddiv+0x16e>
100006fc:	eba4 0405 	sub.w	r4, r4, r5
10000700:	ea81 0e03 	eor.w	lr, r1, r3
10000704:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
10000708:	ea4f 3101 	mov.w	r1, r1, lsl #12
1000070c:	f000 8088 	beq.w	10000820 <__aeabi_ddiv+0x144>
10000710:	ea4f 3303 	mov.w	r3, r3, lsl #12
10000714:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
10000718:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1000071c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
10000720:	ea4f 2202 	mov.w	r2, r2, lsl #8
10000724:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
10000728:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1000072c:	ea4f 2600 	mov.w	r6, r0, lsl #8
10000730:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
10000734:	429d      	cmp	r5, r3
10000736:	bf08      	it	eq
10000738:	4296      	cmpeq	r6, r2
1000073a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1000073e:	f504 7440 	add.w	r4, r4, #768	; 0x300
10000742:	d202      	bcs.n	1000074a <__aeabi_ddiv+0x6e>
10000744:	085b      	lsrs	r3, r3, #1
10000746:	ea4f 0232 	mov.w	r2, r2, rrx
1000074a:	1ab6      	subs	r6, r6, r2
1000074c:	eb65 0503 	sbc.w	r5, r5, r3
10000750:	085b      	lsrs	r3, r3, #1
10000752:	ea4f 0232 	mov.w	r2, r2, rrx
10000756:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1000075a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1000075e:	ebb6 0e02 	subs.w	lr, r6, r2
10000762:	eb75 0e03 	sbcs.w	lr, r5, r3
10000766:	bf22      	ittt	cs
10000768:	1ab6      	subcs	r6, r6, r2
1000076a:	4675      	movcs	r5, lr
1000076c:	ea40 000c 	orrcs.w	r0, r0, ip
10000770:	085b      	lsrs	r3, r3, #1
10000772:	ea4f 0232 	mov.w	r2, r2, rrx
10000776:	ebb6 0e02 	subs.w	lr, r6, r2
1000077a:	eb75 0e03 	sbcs.w	lr, r5, r3
1000077e:	bf22      	ittt	cs
10000780:	1ab6      	subcs	r6, r6, r2
10000782:	4675      	movcs	r5, lr
10000784:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
10000788:	085b      	lsrs	r3, r3, #1
1000078a:	ea4f 0232 	mov.w	r2, r2, rrx
1000078e:	ebb6 0e02 	subs.w	lr, r6, r2
10000792:	eb75 0e03 	sbcs.w	lr, r5, r3
10000796:	bf22      	ittt	cs
10000798:	1ab6      	subcs	r6, r6, r2
1000079a:	4675      	movcs	r5, lr
1000079c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
100007a0:	085b      	lsrs	r3, r3, #1
100007a2:	ea4f 0232 	mov.w	r2, r2, rrx
100007a6:	ebb6 0e02 	subs.w	lr, r6, r2
100007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
100007ae:	bf22      	ittt	cs
100007b0:	1ab6      	subcs	r6, r6, r2
100007b2:	4675      	movcs	r5, lr
100007b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
100007b8:	ea55 0e06 	orrs.w	lr, r5, r6
100007bc:	d018      	beq.n	100007f0 <__aeabi_ddiv+0x114>
100007be:	ea4f 1505 	mov.w	r5, r5, lsl #4
100007c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
100007c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
100007ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
100007ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
100007d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
100007d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
100007da:	d1c0      	bne.n	1000075e <__aeabi_ddiv+0x82>
100007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
100007e0:	d10b      	bne.n	100007fa <__aeabi_ddiv+0x11e>
100007e2:	ea41 0100 	orr.w	r1, r1, r0
100007e6:	f04f 0000 	mov.w	r0, #0
100007ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
100007ee:	e7b6      	b.n	1000075e <__aeabi_ddiv+0x82>
100007f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
100007f4:	bf04      	itt	eq
100007f6:	4301      	orreq	r1, r0
100007f8:	2000      	moveq	r0, #0
100007fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
100007fe:	bf88      	it	hi
10000800:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
10000804:	f63f aeaf 	bhi.w	10000566 <__aeabi_dmul+0xde>
10000808:	ebb5 0c03 	subs.w	ip, r5, r3
1000080c:	bf04      	itt	eq
1000080e:	ebb6 0c02 	subseq.w	ip, r6, r2
10000812:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
10000816:	f150 0000 	adcs.w	r0, r0, #0
1000081a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1000081e:	bd70      	pop	{r4, r5, r6, pc}
10000820:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
10000824:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
10000828:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1000082c:	bfc2      	ittt	gt
1000082e:	ebd4 050c 	rsbsgt	r5, r4, ip
10000832:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
10000836:	bd70      	popgt	{r4, r5, r6, pc}
10000838:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1000083c:	f04f 0e00 	mov.w	lr, #0
10000840:	3c01      	subs	r4, #1
10000842:	e690      	b.n	10000566 <__aeabi_dmul+0xde>
10000844:	ea45 0e06 	orr.w	lr, r5, r6
10000848:	e68d      	b.n	10000566 <__aeabi_dmul+0xde>
1000084a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1000084e:	ea94 0f0c 	teq	r4, ip
10000852:	bf08      	it	eq
10000854:	ea95 0f0c 	teqeq	r5, ip
10000858:	f43f af3b 	beq.w	100006d2 <__aeabi_dmul+0x24a>
1000085c:	ea94 0f0c 	teq	r4, ip
10000860:	d10a      	bne.n	10000878 <__aeabi_ddiv+0x19c>
10000862:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
10000866:	f47f af34 	bne.w	100006d2 <__aeabi_dmul+0x24a>
1000086a:	ea95 0f0c 	teq	r5, ip
1000086e:	f47f af25 	bne.w	100006bc <__aeabi_dmul+0x234>
10000872:	4610      	mov	r0, r2
10000874:	4619      	mov	r1, r3
10000876:	e72c      	b.n	100006d2 <__aeabi_dmul+0x24a>
10000878:	ea95 0f0c 	teq	r5, ip
1000087c:	d106      	bne.n	1000088c <__aeabi_ddiv+0x1b0>
1000087e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
10000882:	f43f aefd 	beq.w	10000680 <__aeabi_dmul+0x1f8>
10000886:	4610      	mov	r0, r2
10000888:	4619      	mov	r1, r3
1000088a:	e722      	b.n	100006d2 <__aeabi_dmul+0x24a>
1000088c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
10000890:	bf18      	it	ne
10000892:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
10000896:	f47f aec5 	bne.w	10000624 <__aeabi_dmul+0x19c>
1000089a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1000089e:	f47f af0d 	bne.w	100006bc <__aeabi_dmul+0x234>
100008a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
100008a6:	f47f aeeb 	bne.w	10000680 <__aeabi_dmul+0x1f8>
100008aa:	e712      	b.n	100006d2 <__aeabi_dmul+0x24a>

100008ac <__aeabi_d2iz>:
100008ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
100008b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
100008b4:	d215      	bcs.n	100008e2 <__aeabi_d2iz+0x36>
100008b6:	d511      	bpl.n	100008dc <__aeabi_d2iz+0x30>
100008b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
100008bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
100008c0:	d912      	bls.n	100008e8 <__aeabi_d2iz+0x3c>
100008c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
100008c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
100008ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
100008ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
100008d2:	fa23 f002 	lsr.w	r0, r3, r2
100008d6:	bf18      	it	ne
100008d8:	4240      	negne	r0, r0
100008da:	4770      	bx	lr
100008dc:	f04f 0000 	mov.w	r0, #0
100008e0:	4770      	bx	lr
100008e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
100008e6:	d105      	bne.n	100008f4 <__aeabi_d2iz+0x48>
100008e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
100008ec:	bf08      	it	eq
100008ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
100008f2:	4770      	bx	lr
100008f4:	f04f 0000 	mov.w	r0, #0
100008f8:	4770      	bx	lr
100008fa:	bf00      	nop

100008fc <__aeabi_d2f>:
100008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
10000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
10000904:	bf24      	itt	cs
10000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1000090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1000090e:	d90d      	bls.n	1000092c <__aeabi_d2f+0x30>
10000910:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
10000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
10000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1000091c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
10000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
10000924:	bf08      	it	eq
10000926:	f020 0001 	biceq.w	r0, r0, #1
1000092a:	4770      	bx	lr
1000092c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
10000930:	d121      	bne.n	10000976 <__aeabi_d2f+0x7a>
10000932:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
10000936:	bfbc      	itt	lt
10000938:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1000093c:	4770      	bxlt	lr
1000093e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
10000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
10000946:	f1c2 0218 	rsb	r2, r2, #24
1000094a:	f1c2 0c20 	rsb	ip, r2, #32
1000094e:	fa10 f30c 	lsls.w	r3, r0, ip
10000952:	fa20 f002 	lsr.w	r0, r0, r2
10000956:	bf18      	it	ne
10000958:	f040 0001 	orrne.w	r0, r0, #1
1000095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
10000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
10000964:	fa03 fc0c 	lsl.w	ip, r3, ip
10000968:	ea40 000c 	orr.w	r0, r0, ip
1000096c:	fa23 f302 	lsr.w	r3, r3, r2
10000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
10000974:	e7cc      	b.n	10000910 <__aeabi_d2f+0x14>
10000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
1000097a:	d107      	bne.n	1000098c <__aeabi_d2f+0x90>
1000097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
10000980:	bf1e      	ittt	ne
10000982:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
10000986:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1000098a:	4770      	bxne	lr
1000098c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
10000990:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
10000994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
10000998:	4770      	bx	lr
1000099a:	bf00      	nop

1000099c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
1000099c:	b480      	push	{r7}
1000099e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
100009a0:	4b0f      	ldr	r3, [pc, #60]	; (100009e0 <SystemInit+0x44>)
100009a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
100009a6:	4a0e      	ldr	r2, [pc, #56]	; (100009e0 <SystemInit+0x44>)
100009a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
100009ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
100009b0:	4b0c      	ldr	r3, [pc, #48]	; (100009e4 <SystemInit+0x48>)
100009b2:	2200      	movs	r2, #0
100009b4:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
100009b6:	4b0b      	ldr	r3, [pc, #44]	; (100009e4 <SystemInit+0x48>)
100009b8:	2200      	movs	r2, #0
100009ba:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
100009bc:	4b09      	ldr	r3, [pc, #36]	; (100009e4 <SystemInit+0x48>)
100009be:	2200      	movs	r2, #0
100009c0:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
100009c2:	4b08      	ldr	r3, [pc, #32]	; (100009e4 <SystemInit+0x48>)
100009c4:	2200      	movs	r2, #0
100009c6:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
100009c8:	4b06      	ldr	r3, [pc, #24]	; (100009e4 <SystemInit+0x48>)
100009ca:	2200      	movs	r2, #0
100009cc:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
100009ce:	4b05      	ldr	r3, [pc, #20]	; (100009e4 <SystemInit+0x48>)
100009d0:	2200      	movs	r2, #0
100009d2:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
100009d4:	bf00      	nop
100009d6:	46bd      	mov	sp, r7
100009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
100009dc:	4770      	bx	lr
100009de:	bf00      	nop
100009e0:	e000ed00 	.word	0xe000ed00
100009e4:	5000d0c0 	.word	0x5000d0c0

100009e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
100009e8:	b580      	push	{r7, lr}
100009ea:	f5ad 5dc4 	sub.w	sp, sp, #6272	; 0x1880
100009ee:	b084      	sub	sp, #16
100009f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
100009f2:	f000 ffbb 	bl	1000196c <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  if(IS_ENGINEERING_BOOT_MODE())
100009f6:	4bb6      	ldr	r3, [pc, #728]	; (10000cd0 <main+0x2e8>)
100009f8:	681b      	ldr	r3, [r3, #0]
100009fa:	f003 0307 	and.w	r3, r3, #7
100009fe:	2b04      	cmp	r3, #4
10000a00:	d101      	bne.n	10000a06 <main+0x1e>
  {
    /* Configure the system clock */
    SystemClock_Config();
10000a02:	f000 f979 	bl	10000cf8 <SystemClock_Config>
  }

  if(IS_ENGINEERING_BOOT_MODE())
10000a06:	4bb2      	ldr	r3, [pc, #712]	; (10000cd0 <main+0x2e8>)
10000a08:	681b      	ldr	r3, [r3, #0]
10000a0a:	f003 0307 	and.w	r3, r3, #7
10000a0e:	2b04      	cmp	r3, #4
10000a10:	d102      	bne.n	10000a18 <main+0x30>
  {
    /* Configure the peripherals common clocks */
    PeriphCommonClock_Config();
10000a12:	f000 fae7 	bl	10000fe4 <PeriphCommonClock_Config>
10000a16:	e005      	b.n	10000a24 <main+0x3c>
  }
  else
  {
    /* IPCC initialisation */
    MX_IPCC_Init();
10000a18:	f000 fbea 	bl	100011f0 <MX_IPCC_Init>
    /* OpenAmp initialisation ---------------------------------*/
    MX_OPENAMP_Init(RPMSG_REMOTE, NULL);
10000a1c:	2100      	movs	r1, #0
10000a1e:	2001      	movs	r0, #1
10000a20:	f00c fab6 	bl	1000cf90 <MX_OPENAMP_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
10000a24:	f000 fc5a 	bl	100012dc <MX_GPIO_Init>
  MX_DMA_Init();
10000a28:	f000 fc42 	bl	100012b0 <MX_DMA_Init>
  MX_ADC1_Init();
10000a2c:	f000 fb08 	bl	10001040 <MX_ADC1_Init>
  MX_ADC2_Init();
10000a30:	f000 fb7a 	bl	10001128 <MX_ADC2_Init>
  MX_UART4_Init();
10000a34:	f000 fbf0 	bl	10001218 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  /////////////////////////////////store in adc in dma////////////////////////////////
    HAL_ADC_Start_DMA(&hadc2, (uint32_t *)buf, 1024);
10000a38:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
10000a3c:	f103 0308 	add.w	r3, r3, #8
10000a40:	f44f 6280 	mov.w	r2, #1024	; 0x400
10000a44:	4619      	mov	r1, r3
10000a46:	48a3      	ldr	r0, [pc, #652]	; (10000cd4 <main+0x2ec>)
10000a48:	f001 fb8a 	bl	10002160 <HAL_ADC_Start_DMA>
    HAL_Delay(50);
10000a4c:	2032      	movs	r0, #50	; 0x32
10000a4e:	f000 fffd 	bl	10001a4c <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /////////////////////////////////read adc voltage////////////////////////////////

	    		  for (int i = 0; i<1024; i++) {
10000a52:	2300      	movs	r3, #0
10000a54:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
10000a58:	f102 0204 	add.w	r2, r2, #4
10000a5c:	6013      	str	r3, [r2, #0]
10000a5e:	e126      	b.n	10000cae <main+0x2c6>
	    			  buf_Value[i] = (float)(buf[i])*3.3/4096;
10000a60:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
10000a64:	f103 0308 	add.w	r3, r3, #8
10000a68:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
10000a6c:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
10000a70:	f102 0204 	add.w	r2, r2, #4
10000a74:	6812      	ldr	r2, [r2, #0]
10000a76:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
10000a7a:	ee07 3a90 	vmov	s15, r3
10000a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
10000a82:	ee17 0a90 	vmov	r0, s15
10000a86:	f7ff fca7 	bl	100003d8 <__aeabi_f2d>
10000a8a:	a38f      	add	r3, pc, #572	; (adr r3, 10000cc8 <main+0x2e0>)
10000a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
10000a90:	f7ff fcfa 	bl	10000488 <__aeabi_dmul>
10000a94:	4602      	mov	r2, r0
10000a96:	460b      	mov	r3, r1
10000a98:	4610      	mov	r0, r2
10000a9a:	4619      	mov	r1, r3
10000a9c:	f04f 0200 	mov.w	r2, #0
10000aa0:	4b8d      	ldr	r3, [pc, #564]	; (10000cd8 <main+0x2f0>)
10000aa2:	f7ff fe1b 	bl	100006dc <__aeabi_ddiv>
10000aa6:	4602      	mov	r2, r0
10000aa8:	460b      	mov	r3, r1
10000aaa:	4610      	mov	r0, r2
10000aac:	4619      	mov	r1, r3
10000aae:	f7ff ff25 	bl	100008fc <__aeabi_d2f>
10000ab2:	4601      	mov	r1, r0
10000ab4:	f607 0388 	addw	r3, r7, #2184	; 0x888
10000ab8:	f5a3 6202 	sub.w	r2, r3, #2080	; 0x820
10000abc:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
10000ac0:	f103 0304 	add.w	r3, r3, #4
10000ac4:	681b      	ldr	r3, [r3, #0]
10000ac6:	009b      	lsls	r3, r3, #2
10000ac8:	4413      	add	r3, r2
10000aca:	6019      	str	r1, [r3, #0]

	    	/////////////////////////////////print adc voltage////////////////////////////////

	    			  int lo_plus = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11);
10000acc:	f44f 6100 	mov.w	r1, #2048	; 0x800
10000ad0:	4882      	ldr	r0, [pc, #520]	; (10000cdc <main+0x2f4>)
10000ad2:	f003 f8ef 	bl	10003cb4 <HAL_GPIO_ReadPin>
10000ad6:	4603      	mov	r3, r0
10000ad8:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
10000adc:	6013      	str	r3, [r2, #0]
	    			  int lo_min =  HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_14);
10000ade:	f44f 4180 	mov.w	r1, #16384	; 0x4000
10000ae2:	487e      	ldr	r0, [pc, #504]	; (10000cdc <main+0x2f4>)
10000ae4:	f003 f8e6 	bl	10003cb4 <HAL_GPIO_ReadPin>
10000ae8:	4603      	mov	r3, r0
10000aea:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
10000aee:	f102 021c 	add.w	r2, r2, #28
10000af2:	6013      	str	r3, [r2, #0]

	  				  char *tmpSign = (buf_Value[i] < 0) ? "-" : "";
10000af4:	f607 0388 	addw	r3, r7, #2184	; 0x888
10000af8:	f5a3 6202 	sub.w	r2, r3, #2080	; 0x820
10000afc:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
10000b00:	f103 0304 	add.w	r3, r3, #4
10000b04:	681b      	ldr	r3, [r3, #0]
10000b06:	009b      	lsls	r3, r3, #2
10000b08:	4413      	add	r3, r2
10000b0a:	edd3 7a00 	vldr	s15, [r3]
10000b0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
10000b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
10000b16:	d501      	bpl.n	10000b1c <main+0x134>
10000b18:	4b71      	ldr	r3, [pc, #452]	; (10000ce0 <main+0x2f8>)
10000b1a:	e000      	b.n	10000b1e <main+0x136>
10000b1c:	4b71      	ldr	r3, [pc, #452]	; (10000ce4 <main+0x2fc>)
10000b1e:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
10000b22:	f102 0218 	add.w	r2, r2, #24
10000b26:	6013      	str	r3, [r2, #0]
	  				  float tmpVal = (buf_Value[i] < 0) ? -buf_Value[i] : buf_Value[i];
10000b28:	f607 0388 	addw	r3, r7, #2184	; 0x888
10000b2c:	f5a3 6202 	sub.w	r2, r3, #2080	; 0x820
10000b30:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
10000b34:	f103 0304 	add.w	r3, r3, #4
10000b38:	681b      	ldr	r3, [r3, #0]
10000b3a:	009b      	lsls	r3, r3, #2
10000b3c:	4413      	add	r3, r2
10000b3e:	edd3 7a00 	vldr	s15, [r3]
10000b42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
10000b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
10000b4a:	d50f      	bpl.n	10000b6c <main+0x184>
10000b4c:	f607 0388 	addw	r3, r7, #2184	; 0x888
10000b50:	f5a3 6202 	sub.w	r2, r3, #2080	; 0x820
10000b54:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
10000b58:	f103 0304 	add.w	r3, r3, #4
10000b5c:	681b      	ldr	r3, [r3, #0]
10000b5e:	009b      	lsls	r3, r3, #2
10000b60:	4413      	add	r3, r2
10000b62:	edd3 7a00 	vldr	s15, [r3]
10000b66:	eef1 7a67 	vneg.f32	s15, s15
10000b6a:	e00c      	b.n	10000b86 <main+0x19e>
10000b6c:	f607 0388 	addw	r3, r7, #2184	; 0x888
10000b70:	f5a3 6202 	sub.w	r2, r3, #2080	; 0x820
10000b74:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
10000b78:	f103 0304 	add.w	r3, r3, #4
10000b7c:	681b      	ldr	r3, [r3, #0]
10000b7e:	009b      	lsls	r3, r3, #2
10000b80:	4413      	add	r3, r2
10000b82:	edd3 7a00 	vldr	s15, [r3]
10000b86:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
10000b8a:	f103 0314 	add.w	r3, r3, #20
10000b8e:	edc3 7a00 	vstr	s15, [r3]

	  				  int tmpInt1 = tmpVal;                  // Get the integer (678).
10000b92:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
10000b96:	f103 0314 	add.w	r3, r3, #20
10000b9a:	edd3 7a00 	vldr	s15, [r3]
10000b9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
10000ba2:	ee17 3a90 	vmov	r3, s15
10000ba6:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
10000baa:	f102 0210 	add.w	r2, r2, #16
10000bae:	6013      	str	r3, [r2, #0]
	  				  float tmpFrac = tmpVal - tmpInt1;      // Get fraction (0.0123).
10000bb0:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
10000bb4:	f103 0310 	add.w	r3, r3, #16
10000bb8:	681b      	ldr	r3, [r3, #0]
10000bba:	ee07 3a90 	vmov	s15, r3
10000bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
10000bc2:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
10000bc6:	f103 0314 	add.w	r3, r3, #20
10000bca:	ed93 7a00 	vldr	s14, [r3]
10000bce:	ee77 7a67 	vsub.f32	s15, s14, s15
10000bd2:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
10000bd6:	f103 030c 	add.w	r3, r3, #12
10000bda:	edc3 7a00 	vstr	s15, [r3]
	  				  int tmpInt2 = trunc(tmpFrac * 10000);  // Turn into integer (123).
10000bde:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
10000be2:	f103 030c 	add.w	r3, r3, #12
10000be6:	edd3 7a00 	vldr	s15, [r3]
10000bea:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 10000ce8 <main+0x300>
10000bee:	ee67 7a87 	vmul.f32	s15, s15, s14
10000bf2:	ee17 0a90 	vmov	r0, s15
10000bf6:	f7ff fbef 	bl	100003d8 <__aeabi_f2d>
10000bfa:	4602      	mov	r2, r0
10000bfc:	460b      	mov	r3, r1
10000bfe:	ec43 2b10 	vmov	d0, r2, r3
10000c02:	f00d fc19 	bl	1000e438 <trunc>
10000c06:	ec53 2b10 	vmov	r2, r3, d0
10000c0a:	4610      	mov	r0, r2
10000c0c:	4619      	mov	r1, r3
10000c0e:	f7ff fe4d 	bl	100008ac <__aeabi_d2iz>
10000c12:	4603      	mov	r3, r0
10000c14:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
10000c18:	f102 0208 	add.w	r2, r2, #8
10000c1c:	6013      	str	r3, [r2, #0]

	    			  if ((lo_plus == 1) || (lo_min ==1 )) {
10000c1e:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
10000c22:	681b      	ldr	r3, [r3, #0]
10000c24:	2b01      	cmp	r3, #1
10000c26:	d006      	beq.n	10000c36 <main+0x24e>
10000c28:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
10000c2c:	f103 031c 	add.w	r3, r3, #28
10000c30:	681b      	ldr	r3, [r3, #0]
10000c32:	2b01      	cmp	r3, #1
10000c34:	d107      	bne.n	10000c46 <main+0x25e>
	    				  sprintf(arr, "!\n");
10000c36:	f107 0308 	add.w	r3, r7, #8
10000c3a:	3b04      	subs	r3, #4
10000c3c:	492b      	ldr	r1, [pc, #172]	; (10000cec <main+0x304>)
10000c3e:	4618      	mov	r0, r3
10000c40:	f00c fbfc 	bl	1000d43c <siprintf>
10000c44:	e015      	b.n	10000c72 <main+0x28a>
	    			  }
	    			  else {
	    				  // Print as parts, note that you need 0-padding for fractional bit.
	    				  sprintf (arr, "adc_read = %s%d.%04d\r\n", tmpSign, tmpInt1, tmpInt2);
10000c46:	f107 0008 	add.w	r0, r7, #8
10000c4a:	3804      	subs	r0, #4
10000c4c:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
10000c50:	f103 0308 	add.w	r3, r3, #8
10000c54:	681b      	ldr	r3, [r3, #0]
10000c56:	9300      	str	r3, [sp, #0]
10000c58:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
10000c5c:	f103 0310 	add.w	r3, r3, #16
10000c60:	681b      	ldr	r3, [r3, #0]
10000c62:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
10000c66:	f102 0218 	add.w	r2, r2, #24
10000c6a:	6812      	ldr	r2, [r2, #0]
10000c6c:	4920      	ldr	r1, [pc, #128]	; (10000cf0 <main+0x308>)
10000c6e:	f00c fbe5 	bl	1000d43c <siprintf>
	    				  }


	    			  //	    		  sprintf(arr, "%g\r\n", buf_Value[i]);
	    			  HAL_UART_Transmit(&huart4, (uint8_t*)arr, strlen(arr), HAL_MAX_DELAY);
10000c72:	f107 0308 	add.w	r3, r7, #8
10000c76:	3b04      	subs	r3, #4
10000c78:	4618      	mov	r0, r3
10000c7a:	f7ff f9eb 	bl	10000054 <strlen>
10000c7e:	4603      	mov	r3, r0
10000c80:	b29a      	uxth	r2, r3
10000c82:	f107 0108 	add.w	r1, r7, #8
10000c86:	3904      	subs	r1, #4
10000c88:	f04f 33ff 	mov.w	r3, #4294967295
10000c8c:	4819      	ldr	r0, [pc, #100]	; (10000cf4 <main+0x30c>)
10000c8e:	f008 fd1f 	bl	100096d0 <HAL_UART_Transmit>
	    			  HAL_Delay(1);
10000c92:	2001      	movs	r0, #1
10000c94:	f000 feda 	bl	10001a4c <HAL_Delay>
	    		  for (int i = 0; i<1024; i++) {
10000c98:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
10000c9c:	f103 0304 	add.w	r3, r3, #4
10000ca0:	681b      	ldr	r3, [r3, #0]
10000ca2:	3301      	adds	r3, #1
10000ca4:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
10000ca8:	f102 0204 	add.w	r2, r2, #4
10000cac:	6013      	str	r3, [r2, #0]
10000cae:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
10000cb2:	f103 0304 	add.w	r3, r3, #4
10000cb6:	681b      	ldr	r3, [r3, #0]
10000cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
10000cbc:	f6ff aed0 	blt.w	10000a60 <main+0x78>
10000cc0:	e6c7      	b.n	10000a52 <main+0x6a>
10000cc2:	bf00      	nop
10000cc4:	f3af 8000 	nop.w
10000cc8:	66666666 	.word	0x66666666
10000ccc:	400a6666 	.word	0x400a6666
10000cd0:	50020000 	.word	0x50020000
10000cd4:	1002022c 	.word	0x1002022c
10000cd8:	40b00000 	.word	0x40b00000
10000cdc:	50006000 	.word	0x50006000
10000ce0:	1000e514 	.word	0x1000e514
10000ce4:	1000e518 	.word	0x1000e518
10000ce8:	461c4000 	.word	0x461c4000
10000cec:	1000e51c 	.word	0x1000e51c
10000cf0:	1000e520 	.word	0x1000e520
10000cf4:	10020344 	.word	0x10020344

10000cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
10000cf8:	b580      	push	{r7, lr}
10000cfa:	b0d2      	sub	sp, #328	; 0x148
10000cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10000cfe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d02:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d06:	4618      	mov	r0, r3
10000d08:	f44f 738a 	mov.w	r3, #276	; 0x114
10000d0c:	461a      	mov	r2, r3
10000d0e:	2100      	movs	r1, #0
10000d10:	f00c fbf7 	bl	1000d502 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10000d14:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d18:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000d1c:	4618      	mov	r0, r3
10000d1e:	2330      	movs	r3, #48	; 0x30
10000d20:	461a      	mov	r2, r3
10000d22:	2100      	movs	r1, #0
10000d24:	f00c fbed 	bl	1000d502 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
10000d28:	f003 f9f2 	bl	10004110 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
10000d2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d30:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10000d34:	f023 0330 	bic.w	r3, r3, #48	; 0x30
10000d38:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000d3c:	f043 0320 	orr.w	r3, r3, #32
10000d40:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI
10000d44:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d48:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d4c:	2217      	movs	r2, #23
10000d4e:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIG;
10000d50:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d54:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d58:	f44f 62b0 	mov.w	r2, #1408	; 0x580
10000d5c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
10000d5e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d62:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d66:	2201      	movs	r2, #1
10000d68:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
10000d6a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d6e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d72:	2201      	movs	r2, #1
10000d74:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
10000d76:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d7a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d7e:	2200      	movs	r2, #0
10000d80:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
10000d82:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d86:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d8a:	2210      	movs	r2, #16
10000d8c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
10000d8e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d92:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d96:	2200      	movs	r2, #0
10000d98:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
10000d9a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d9e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000da2:	2202      	movs	r2, #2
10000da4:	661a      	str	r2, [r3, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLL12SOURCE_HSE;
10000da6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000daa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000dae:	2201      	movs	r2, #1
10000db0:	665a      	str	r2, [r3, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLLM = 3;
10000db2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000db6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000dba:	2203      	movs	r2, #3
10000dbc:	669a      	str	r2, [r3, #104]	; 0x68
  RCC_OscInitStruct.PLL2.PLLN = 66;
10000dbe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000dc2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000dc6:	2242      	movs	r2, #66	; 0x42
10000dc8:	66da      	str	r2, [r3, #108]	; 0x6c
  RCC_OscInitStruct.PLL2.PLLP = 2;
10000dca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000dce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000dd2:	2202      	movs	r2, #2
10000dd4:	671a      	str	r2, [r3, #112]	; 0x70
  RCC_OscInitStruct.PLL2.PLLQ = 1;
10000dd6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000dda:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000dde:	2201      	movs	r2, #1
10000de0:	675a      	str	r2, [r3, #116]	; 0x74
  RCC_OscInitStruct.PLL2.PLLR = 1;
10000de2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000de6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000dea:	2201      	movs	r2, #1
10000dec:	679a      	str	r2, [r3, #120]	; 0x78
  RCC_OscInitStruct.PLL2.PLLFRACV = 0x1400;
10000dee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000df2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000df6:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
10000dfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  RCC_OscInitStruct.PLL2.PLLMODE = RCC_PLL_FRACTIONAL;
10000dfe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e02:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e06:	2201      	movs	r2, #1
10000e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
10000e0c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e10:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e14:	2202      	movs	r2, #2
10000e16:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLL3SOURCE_HSE;
10000e1a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e1e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e22:	2201      	movs	r2, #1
10000e24:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  RCC_OscInitStruct.PLL3.PLLM = 2;
10000e28:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e2c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e30:	2202      	movs	r2, #2
10000e32:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  RCC_OscInitStruct.PLL3.PLLN = 34;
10000e36:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e3a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e3e:	2222      	movs	r2, #34	; 0x22
10000e40:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  RCC_OscInitStruct.PLL3.PLLP = 2;
10000e44:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e48:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e4c:	2202      	movs	r2, #2
10000e4e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  RCC_OscInitStruct.PLL3.PLLQ = 17;
10000e52:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e56:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e5a:	2211      	movs	r2, #17
10000e5c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  RCC_OscInitStruct.PLL3.PLLR = 37;
10000e60:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e64:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e68:	2225      	movs	r2, #37	; 0x25
10000e6a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  RCC_OscInitStruct.PLL3.PLLRGE = RCC_PLL3IFRANGE_1;
10000e6e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e72:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e76:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
10000e7a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  RCC_OscInitStruct.PLL3.PLLFRACV = 6660;
10000e7e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e82:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e86:	f641 2204 	movw	r2, #6660	; 0x1a04
10000e8a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  RCC_OscInitStruct.PLL3.PLLMODE = RCC_PLL_FRACTIONAL;
10000e8e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e92:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e96:	2201      	movs	r2, #1
10000e98:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
10000e9c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000ea0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000ea4:	2202      	movs	r2, #2
10000ea6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLL4SOURCE_HSE;
10000eaa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000eae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000eb2:	2201      	movs	r2, #1
10000eb4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  RCC_OscInitStruct.PLL4.PLLM = 4;
10000eb8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000ebc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000ec0:	2204      	movs	r2, #4
10000ec2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  RCC_OscInitStruct.PLL4.PLLN = 99;
10000ec6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000eca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000ece:	2263      	movs	r2, #99	; 0x63
10000ed0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  RCC_OscInitStruct.PLL4.PLLP = 6;
10000ed4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000ed8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000edc:	2206      	movs	r2, #6
10000ede:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  RCC_OscInitStruct.PLL4.PLLQ = 8;
10000ee2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000ee6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000eea:	2208      	movs	r2, #8
10000eec:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  RCC_OscInitStruct.PLL4.PLLR = 8;
10000ef0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000ef4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000ef8:	2208      	movs	r2, #8
10000efa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  RCC_OscInitStruct.PLL4.PLLRGE = RCC_PLL4IFRANGE_0;
10000efe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000f02:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000f06:	2200      	movs	r2, #0
10000f08:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  RCC_OscInitStruct.PLL4.PLLFRACV = 0;
10000f0c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000f10:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000f14:	2200      	movs	r2, #0
10000f16:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  RCC_OscInitStruct.PLL4.PLLMODE = RCC_PLL_INTEGER;
10000f1a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000f1e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000f22:	2200      	movs	r2, #0
10000f24:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
10000f28:	f107 0334 	add.w	r3, r7, #52	; 0x34
10000f2c:	4618      	mov	r0, r3
10000f2e:	f003 f8ff 	bl	10004130 <HAL_RCC_OscConfig>
10000f32:	4603      	mov	r3, r0
10000f34:	2b00      	cmp	r3, #0
10000f36:	d001      	beq.n	10000f3c <SystemClock_Config+0x244>
  {
    Error_Handler();
10000f38:	f000 fa09 	bl	1000134e <Error_Handler>
  }

  /** RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
10000f3c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000f40:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000f44:	22fe      	movs	r2, #254	; 0xfe
10000f46:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                              |RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_PLL2;
10000f48:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000f4c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000f50:	2202      	movs	r2, #2
10000f52:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
10000f54:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000f58:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000f5c:	2200      	movs	r2, #0
10000f5e:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_PLL3;
10000f60:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000f64:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000f68:	2203      	movs	r2, #3
10000f6a:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
10000f6c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000f70:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000f74:	2200      	movs	r2, #0
10000f76:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV2;
10000f78:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000f7c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000f80:	2201      	movs	r2, #1
10000f82:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV4;
10000f84:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000f88:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000f8c:	2202      	movs	r2, #2
10000f8e:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV2;
10000f90:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000f94:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000f98:	2201      	movs	r2, #1
10000f9a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV2;
10000f9c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000fa0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000fa4:	2201      	movs	r2, #1
10000fa6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV2;
10000fa8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000fac:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000fb0:	2201      	movs	r2, #1
10000fb2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
10000fb4:	1d3b      	adds	r3, r7, #4
10000fb6:	4618      	mov	r0, r3
10000fb8:	f003 fe58 	bl	10004c6c <HAL_RCC_ClockConfig>
10000fbc:	4603      	mov	r3, r0
10000fbe:	2b00      	cmp	r3, #0
10000fc0:	d001      	beq.n	10000fc6 <SystemClock_Config+0x2ce>
  {
    Error_Handler();
10000fc2:	f000 f9c4 	bl	1000134e <Error_Handler>
  }

  /** Set the HSE division factor for RTC clock
  */
  __HAL_RCC_RTC_HSEDIV(24);
10000fc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10000fcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10000fd0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000fd4:	f043 0317 	orr.w	r3, r3, #23
10000fd8:	6453      	str	r3, [r2, #68]	; 0x44
}
10000fda:	bf00      	nop
10000fdc:	f507 77a4 	add.w	r7, r7, #328	; 0x148
10000fe0:	46bd      	mov	sp, r7
10000fe2:	bd80      	pop	{r7, pc}

10000fe4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
10000fe4:	b580      	push	{r7, lr}
10000fe6:	b0d6      	sub	sp, #344	; 0x158
10000fe8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
10000fea:	f507 73ac 	add.w	r3, r7, #344	; 0x158
10000fee:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
10000ff2:	4618      	mov	r0, r3
10000ff4:	f44f 73ac 	mov.w	r3, #344	; 0x158
10000ff8:	461a      	mov	r2, r3
10000ffa:	2100      	movs	r1, #0
10000ffc:	f00c fa81 	bl	1000d502 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
10001000:	f507 73ac 	add.w	r3, r7, #344	; 0x158
10001004:	f5a3 71ac 	sub.w	r1, r3, #344	; 0x158
10001008:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
1000100c:	f04f 0300 	mov.w	r3, #0
10001010:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInit.CkperClockSelection = RCC_CKPERCLKSOURCE_HSE;
10001014:	f507 73ac 	add.w	r3, r7, #344	; 0x158
10001018:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
1000101c:	2202      	movs	r2, #2
1000101e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
10001022:	463b      	mov	r3, r7
10001024:	4618      	mov	r0, r3
10001026:	f005 f99f 	bl	10006368 <HAL_RCCEx_PeriphCLKConfig>
1000102a:	4603      	mov	r3, r0
1000102c:	2b00      	cmp	r3, #0
1000102e:	d001      	beq.n	10001034 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
10001030:	f000 f98d 	bl	1000134e <Error_Handler>
  }
}
10001034:	bf00      	nop
10001036:	f507 77ac 	add.w	r7, r7, #344	; 0x158
1000103a:	46bd      	mov	sp, r7
1000103c:	bd80      	pop	{r7, pc}
	...

10001040 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
10001040:	b580      	push	{r7, lr}
10001042:	b08a      	sub	sp, #40	; 0x28
10001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
10001046:	f107 031c 	add.w	r3, r7, #28
1000104a:	2200      	movs	r2, #0
1000104c:	601a      	str	r2, [r3, #0]
1000104e:	605a      	str	r2, [r3, #4]
10001050:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
10001052:	463b      	mov	r3, r7
10001054:	2200      	movs	r2, #0
10001056:	601a      	str	r2, [r3, #0]
10001058:	605a      	str	r2, [r3, #4]
1000105a:	609a      	str	r2, [r3, #8]
1000105c:	60da      	str	r2, [r3, #12]
1000105e:	611a      	str	r2, [r3, #16]
10001060:	615a      	str	r2, [r3, #20]
10001062:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
10001064:	4b2e      	ldr	r3, [pc, #184]	; (10001120 <MX_ADC1_Init+0xe0>)
10001066:	4a2f      	ldr	r2, [pc, #188]	; (10001124 <MX_ADC1_Init+0xe4>)
10001068:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
1000106a:	4b2d      	ldr	r3, [pc, #180]	; (10001120 <MX_ADC1_Init+0xe0>)
1000106c:	2200      	movs	r2, #0
1000106e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
10001070:	4b2b      	ldr	r3, [pc, #172]	; (10001120 <MX_ADC1_Init+0xe0>)
10001072:	2200      	movs	r2, #0
10001074:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
10001076:	4b2a      	ldr	r3, [pc, #168]	; (10001120 <MX_ADC1_Init+0xe0>)
10001078:	2200      	movs	r2, #0
1000107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
1000107c:	4b28      	ldr	r3, [pc, #160]	; (10001120 <MX_ADC1_Init+0xe0>)
1000107e:	2204      	movs	r2, #4
10001080:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
10001082:	4b27      	ldr	r3, [pc, #156]	; (10001120 <MX_ADC1_Init+0xe0>)
10001084:	2200      	movs	r2, #0
10001086:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
10001088:	4b25      	ldr	r3, [pc, #148]	; (10001120 <MX_ADC1_Init+0xe0>)
1000108a:	2201      	movs	r2, #1
1000108c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
1000108e:	4b24      	ldr	r3, [pc, #144]	; (10001120 <MX_ADC1_Init+0xe0>)
10001090:	2201      	movs	r2, #1
10001092:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
10001094:	4b22      	ldr	r3, [pc, #136]	; (10001120 <MX_ADC1_Init+0xe0>)
10001096:	2200      	movs	r2, #0
10001098:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
1000109a:	4b21      	ldr	r3, [pc, #132]	; (10001120 <MX_ADC1_Init+0xe0>)
1000109c:	2200      	movs	r2, #0
1000109e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
100010a0:	4b1f      	ldr	r3, [pc, #124]	; (10001120 <MX_ADC1_Init+0xe0>)
100010a2:	2200      	movs	r2, #0
100010a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
100010a6:	4b1e      	ldr	r3, [pc, #120]	; (10001120 <MX_ADC1_Init+0xe0>)
100010a8:	2200      	movs	r2, #0
100010aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
100010ac:	4b1c      	ldr	r3, [pc, #112]	; (10001120 <MX_ADC1_Init+0xe0>)
100010ae:	2200      	movs	r2, #0
100010b0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
100010b2:	4b1b      	ldr	r3, [pc, #108]	; (10001120 <MX_ADC1_Init+0xe0>)
100010b4:	2200      	movs	r2, #0
100010b6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
100010b8:	4b19      	ldr	r3, [pc, #100]	; (10001120 <MX_ADC1_Init+0xe0>)
100010ba:	2200      	movs	r2, #0
100010bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
100010c0:	4817      	ldr	r0, [pc, #92]	; (10001120 <MX_ADC1_Init+0xe0>)
100010c2:	f000 fef3 	bl	10001eac <HAL_ADC_Init>
100010c6:	4603      	mov	r3, r0
100010c8:	2b00      	cmp	r3, #0
100010ca:	d001      	beq.n	100010d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
100010cc:	f000 f93f 	bl	1000134e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
100010d0:	2300      	movs	r3, #0
100010d2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
100010d4:	f107 031c 	add.w	r3, r7, #28
100010d8:	4619      	mov	r1, r3
100010da:	4811      	ldr	r0, [pc, #68]	; (10001120 <MX_ADC1_Init+0xe0>)
100010dc:	f001 fdea 	bl	10002cb4 <HAL_ADCEx_MultiModeConfigChannel>
100010e0:	4603      	mov	r3, r0
100010e2:	2b00      	cmp	r3, #0
100010e4:	d001      	beq.n	100010ea <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
100010e6:	f000 f932 	bl	1000134e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
100010ea:	2301      	movs	r3, #1
100010ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
100010ee:	2306      	movs	r3, #6
100010f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
100010f2:	2300      	movs	r3, #0
100010f4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
100010f6:	f240 73ff 	movw	r3, #2047	; 0x7ff
100010fa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
100010fc:	2304      	movs	r3, #4
100010fe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
10001100:	2300      	movs	r3, #0
10001102:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
10001104:	463b      	mov	r3, r7
10001106:	4619      	mov	r1, r3
10001108:	4805      	ldr	r0, [pc, #20]	; (10001120 <MX_ADC1_Init+0xe0>)
1000110a:	f001 f8e7 	bl	100022dc <HAL_ADC_ConfigChannel>
1000110e:	4603      	mov	r3, r0
10001110:	2b00      	cmp	r3, #0
10001112:	d001      	beq.n	10001118 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
10001114:	f000 f91b 	bl	1000134e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
10001118:	bf00      	nop
1000111a:	3728      	adds	r7, #40	; 0x28
1000111c:	46bd      	mov	sp, r7
1000111e:	bd80      	pop	{r7, pc}
10001120:	100201c8 	.word	0x100201c8
10001124:	48003000 	.word	0x48003000

10001128 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
10001128:	b580      	push	{r7, lr}
1000112a:	b088      	sub	sp, #32
1000112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
1000112e:	1d3b      	adds	r3, r7, #4
10001130:	2200      	movs	r2, #0
10001132:	601a      	str	r2, [r3, #0]
10001134:	605a      	str	r2, [r3, #4]
10001136:	609a      	str	r2, [r3, #8]
10001138:	60da      	str	r2, [r3, #12]
1000113a:	611a      	str	r2, [r3, #16]
1000113c:	615a      	str	r2, [r3, #20]
1000113e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
10001140:	4b28      	ldr	r3, [pc, #160]	; (100011e4 <MX_ADC2_Init+0xbc>)
10001142:	4a29      	ldr	r2, [pc, #164]	; (100011e8 <MX_ADC2_Init+0xc0>)
10001144:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
10001146:	4b27      	ldr	r3, [pc, #156]	; (100011e4 <MX_ADC2_Init+0xbc>)
10001148:	2200      	movs	r2, #0
1000114a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
1000114c:	4b25      	ldr	r3, [pc, #148]	; (100011e4 <MX_ADC2_Init+0xbc>)
1000114e:	2200      	movs	r2, #0
10001150:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
10001152:	4b24      	ldr	r3, [pc, #144]	; (100011e4 <MX_ADC2_Init+0xbc>)
10001154:	2200      	movs	r2, #0
10001156:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
10001158:	4b22      	ldr	r3, [pc, #136]	; (100011e4 <MX_ADC2_Init+0xbc>)
1000115a:	2204      	movs	r2, #4
1000115c:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
1000115e:	4b21      	ldr	r3, [pc, #132]	; (100011e4 <MX_ADC2_Init+0xbc>)
10001160:	2200      	movs	r2, #0
10001162:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
10001164:	4b1f      	ldr	r3, [pc, #124]	; (100011e4 <MX_ADC2_Init+0xbc>)
10001166:	2201      	movs	r2, #1
10001168:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
1000116a:	4b1e      	ldr	r3, [pc, #120]	; (100011e4 <MX_ADC2_Init+0xbc>)
1000116c:	2201      	movs	r2, #1
1000116e:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
10001170:	4b1c      	ldr	r3, [pc, #112]	; (100011e4 <MX_ADC2_Init+0xbc>)
10001172:	2200      	movs	r2, #0
10001174:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
10001176:	4b1b      	ldr	r3, [pc, #108]	; (100011e4 <MX_ADC2_Init+0xbc>)
10001178:	2200      	movs	r2, #0
1000117a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
1000117c:	4b19      	ldr	r3, [pc, #100]	; (100011e4 <MX_ADC2_Init+0xbc>)
1000117e:	2200      	movs	r2, #0
10001180:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
10001182:	4b18      	ldr	r3, [pc, #96]	; (100011e4 <MX_ADC2_Init+0xbc>)
10001184:	2203      	movs	r2, #3
10001186:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
10001188:	4b16      	ldr	r3, [pc, #88]	; (100011e4 <MX_ADC2_Init+0xbc>)
1000118a:	2200      	movs	r2, #0
1000118c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
1000118e:	4b15      	ldr	r3, [pc, #84]	; (100011e4 <MX_ADC2_Init+0xbc>)
10001190:	2200      	movs	r2, #0
10001192:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
10001194:	4b13      	ldr	r3, [pc, #76]	; (100011e4 <MX_ADC2_Init+0xbc>)
10001196:	2200      	movs	r2, #0
10001198:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
1000119c:	4811      	ldr	r0, [pc, #68]	; (100011e4 <MX_ADC2_Init+0xbc>)
1000119e:	f000 fe85 	bl	10001eac <HAL_ADC_Init>
100011a2:	4603      	mov	r3, r0
100011a4:	2b00      	cmp	r3, #0
100011a6:	d001      	beq.n	100011ac <MX_ADC2_Init+0x84>
  {
    Error_Handler();
100011a8:	f000 f8d1 	bl	1000134e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
100011ac:	4b0f      	ldr	r3, [pc, #60]	; (100011ec <MX_ADC2_Init+0xc4>)
100011ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
100011b0:	2306      	movs	r3, #6
100011b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
100011b4:	2300      	movs	r3, #0
100011b6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
100011b8:	f240 73ff 	movw	r3, #2047	; 0x7ff
100011bc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
100011be:	2304      	movs	r3, #4
100011c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
100011c2:	2300      	movs	r3, #0
100011c4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
100011c6:	1d3b      	adds	r3, r7, #4
100011c8:	4619      	mov	r1, r3
100011ca:	4806      	ldr	r0, [pc, #24]	; (100011e4 <MX_ADC2_Init+0xbc>)
100011cc:	f001 f886 	bl	100022dc <HAL_ADC_ConfigChannel>
100011d0:	4603      	mov	r3, r0
100011d2:	2b00      	cmp	r3, #0
100011d4:	d001      	beq.n	100011da <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
100011d6:	f000 f8ba 	bl	1000134e <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
100011da:	bf00      	nop
100011dc:	3720      	adds	r7, #32
100011de:	46bd      	mov	sp, r7
100011e0:	bd80      	pop	{r7, pc}
100011e2:	bf00      	nop
100011e4:	1002022c 	.word	0x1002022c
100011e8:	48003100 	.word	0x48003100
100011ec:	19200040 	.word	0x19200040

100011f0 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
100011f0:	b580      	push	{r7, lr}
100011f2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
100011f4:	4b06      	ldr	r3, [pc, #24]	; (10001210 <MX_IPCC_Init+0x20>)
100011f6:	4a07      	ldr	r2, [pc, #28]	; (10001214 <MX_IPCC_Init+0x24>)
100011f8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
100011fa:	4805      	ldr	r0, [pc, #20]	; (10001210 <MX_IPCC_Init+0x20>)
100011fc:	f002 fd72 	bl	10003ce4 <HAL_IPCC_Init>
10001200:	4603      	mov	r3, r0
10001202:	2b00      	cmp	r3, #0
10001204:	d001      	beq.n	1000120a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
10001206:	f000 f8a2 	bl	1000134e <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
1000120a:	bf00      	nop
1000120c:	bd80      	pop	{r7, pc}
1000120e:	bf00      	nop
10001210:	10020308 	.word	0x10020308
10001214:	4c001000 	.word	0x4c001000

10001218 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
10001218:	b580      	push	{r7, lr}
1000121a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
1000121c:	4b22      	ldr	r3, [pc, #136]	; (100012a8 <MX_UART4_Init+0x90>)
1000121e:	4a23      	ldr	r2, [pc, #140]	; (100012ac <MX_UART4_Init+0x94>)
10001220:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
10001222:	4b21      	ldr	r3, [pc, #132]	; (100012a8 <MX_UART4_Init+0x90>)
10001224:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
10001228:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
1000122a:	4b1f      	ldr	r3, [pc, #124]	; (100012a8 <MX_UART4_Init+0x90>)
1000122c:	2200      	movs	r2, #0
1000122e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
10001230:	4b1d      	ldr	r3, [pc, #116]	; (100012a8 <MX_UART4_Init+0x90>)
10001232:	2200      	movs	r2, #0
10001234:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
10001236:	4b1c      	ldr	r3, [pc, #112]	; (100012a8 <MX_UART4_Init+0x90>)
10001238:	2200      	movs	r2, #0
1000123a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
1000123c:	4b1a      	ldr	r3, [pc, #104]	; (100012a8 <MX_UART4_Init+0x90>)
1000123e:	220c      	movs	r2, #12
10001240:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
10001242:	4b19      	ldr	r3, [pc, #100]	; (100012a8 <MX_UART4_Init+0x90>)
10001244:	2200      	movs	r2, #0
10001246:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
10001248:	4b17      	ldr	r3, [pc, #92]	; (100012a8 <MX_UART4_Init+0x90>)
1000124a:	2200      	movs	r2, #0
1000124c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
1000124e:	4b16      	ldr	r3, [pc, #88]	; (100012a8 <MX_UART4_Init+0x90>)
10001250:	2200      	movs	r2, #0
10001252:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
10001254:	4b14      	ldr	r3, [pc, #80]	; (100012a8 <MX_UART4_Init+0x90>)
10001256:	2200      	movs	r2, #0
10001258:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
1000125a:	4b13      	ldr	r3, [pc, #76]	; (100012a8 <MX_UART4_Init+0x90>)
1000125c:	2200      	movs	r2, #0
1000125e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
10001260:	4811      	ldr	r0, [pc, #68]	; (100012a8 <MX_UART4_Init+0x90>)
10001262:	f008 f9e5 	bl	10009630 <HAL_UART_Init>
10001266:	4603      	mov	r3, r0
10001268:	2b00      	cmp	r3, #0
1000126a:	d001      	beq.n	10001270 <MX_UART4_Init+0x58>
  {
    Error_Handler();
1000126c:	f000 f86f 	bl	1000134e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
10001270:	2100      	movs	r1, #0
10001272:	480d      	ldr	r0, [pc, #52]	; (100012a8 <MX_UART4_Init+0x90>)
10001274:	f009 fd0d 	bl	1000ac92 <HAL_UARTEx_SetTxFifoThreshold>
10001278:	4603      	mov	r3, r0
1000127a:	2b00      	cmp	r3, #0
1000127c:	d001      	beq.n	10001282 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
1000127e:	f000 f866 	bl	1000134e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
10001282:	2100      	movs	r1, #0
10001284:	4808      	ldr	r0, [pc, #32]	; (100012a8 <MX_UART4_Init+0x90>)
10001286:	f009 fd42 	bl	1000ad0e <HAL_UARTEx_SetRxFifoThreshold>
1000128a:	4603      	mov	r3, r0
1000128c:	2b00      	cmp	r3, #0
1000128e:	d001      	beq.n	10001294 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
10001290:	f000 f85d 	bl	1000134e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
10001294:	4804      	ldr	r0, [pc, #16]	; (100012a8 <MX_UART4_Init+0x90>)
10001296:	f009 fcc3 	bl	1000ac20 <HAL_UARTEx_DisableFifoMode>
1000129a:	4603      	mov	r3, r0
1000129c:	2b00      	cmp	r3, #0
1000129e:	d001      	beq.n	100012a4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
100012a0:	f000 f855 	bl	1000134e <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
100012a4:	bf00      	nop
100012a6:	bd80      	pop	{r7, pc}
100012a8:	10020344 	.word	0x10020344
100012ac:	40010000 	.word	0x40010000

100012b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
100012b0:	b580      	push	{r7, lr}
100012b2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX_CLK_ENABLE();
100012b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012b8:	2204      	movs	r2, #4
100012ba:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
  __HAL_RCC_DMA2_CLK_ENABLE();
100012be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012c2:	2202      	movs	r2, #2
100012c4:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
100012c8:	2200      	movs	r2, #0
100012ca:	2101      	movs	r1, #1
100012cc:	2038      	movs	r0, #56	; 0x38
100012ce:	f001 fe72 	bl	10002fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
100012d2:	2038      	movs	r0, #56	; 0x38
100012d4:	f001 fe8b 	bl	10002fee <HAL_NVIC_EnableIRQ>

}
100012d8:	bf00      	nop
100012da:	bd80      	pop	{r7, pc}

100012dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
100012dc:	b480      	push	{r7}
100012de:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
100012e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012e4:	2204      	movs	r2, #4
100012e6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOH_CLK_ENABLE();
100012ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012ee:	2280      	movs	r2, #128	; 0x80
100012f0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOA_CLK_ENABLE();
100012f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012f8:	2201      	movs	r2, #1
100012fa:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOG_CLK_ENABLE();
100012fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001302:	2240      	movs	r2, #64	; 0x40
10001304:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOB_CLK_ENABLE();
10001308:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000130c:	2202      	movs	r2, #2
1000130e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOF_CLK_ENABLE();
10001312:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001316:	2220      	movs	r2, #32
10001318:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
1000131c:	bf00      	nop
1000131e:	46bd      	mov	sp, r7
10001320:	f85d 7b04 	ldr.w	r7, [sp], #4
10001324:	4770      	bx	lr

10001326 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
10001326:	b480      	push	{r7}
10001328:	b083      	sub	sp, #12
1000132a:	af00      	add	r7, sp, #0
1000132c:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
}
1000132e:	bf00      	nop
10001330:	370c      	adds	r7, #12
10001332:	46bd      	mov	sp, r7
10001334:	f85d 7b04 	ldr.w	r7, [sp], #4
10001338:	4770      	bx	lr

1000133a <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
1000133a:	b480      	push	{r7}
1000133c:	b083      	sub	sp, #12
1000133e:	af00      	add	r7, sp, #0
10001340:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
}
10001342:	bf00      	nop
10001344:	370c      	adds	r7, #12
10001346:	46bd      	mov	sp, r7
10001348:	f85d 7b04 	ldr.w	r7, [sp], #4
1000134c:	4770      	bx	lr

1000134e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
1000134e:	b480      	push	{r7}
10001350:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10001352:	b672      	cpsid	i
}
10001354:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
10001356:	e7fe      	b.n	10001356 <Error_Handler+0x8>

10001358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10001358:	b580      	push	{r7, lr}
1000135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
1000135c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001360:	f44f 6200 	mov.w	r2, #2048	; 0x800
10001364:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
10001368:	2200      	movs	r2, #0
1000136a:	2101      	movs	r1, #1
1000136c:	f06f 000b 	mvn.w	r0, #11
10001370:	f001 fe21 	bl	10002fb6 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
10001374:	2200      	movs	r2, #0
10001376:	2101      	movs	r1, #1
10001378:	f06f 000a 	mvn.w	r0, #10
1000137c:	f001 fe1b 	bl	10002fb6 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
10001380:	2200      	movs	r2, #0
10001382:	2101      	movs	r1, #1
10001384:	f06f 0009 	mvn.w	r0, #9
10001388:	f001 fe15 	bl	10002fb6 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
1000138c:	2200      	movs	r2, #0
1000138e:	2101      	movs	r1, #1
10001390:	f06f 0004 	mvn.w	r0, #4
10001394:	f001 fe0f 	bl	10002fb6 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
10001398:	2200      	movs	r2, #0
1000139a:	2101      	movs	r1, #1
1000139c:	f06f 0003 	mvn.w	r0, #3
100013a0:	f001 fe09 	bl	10002fb6 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
100013a4:	2200      	movs	r2, #0
100013a6:	2101      	movs	r1, #1
100013a8:	f06f 0001 	mvn.w	r0, #1
100013ac:	f001 fe03 	bl	10002fb6 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_WAKEUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_WAKEUP_IRQn, 0, 0);
100013b0:	2200      	movs	r2, #0
100013b2:	2100      	movs	r1, #0
100013b4:	2091      	movs	r0, #145	; 0x91
100013b6:	f001 fdfe 	bl	10002fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_WAKEUP_IRQn);
100013ba:	2091      	movs	r0, #145	; 0x91
100013bc:	f001 fe17 	bl	10002fee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
100013c0:	bf00      	nop
100013c2:	bd80      	pop	{r7, pc}

100013c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
100013c4:	b580      	push	{r7, lr}
100013c6:	b0de      	sub	sp, #376	; 0x178
100013c8:	af00      	add	r7, sp, #0
100013ca:	f507 73bc 	add.w	r3, r7, #376	; 0x178
100013ce:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
100013d2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
100013d4:	f507 73b2 	add.w	r3, r7, #356	; 0x164
100013d8:	2200      	movs	r2, #0
100013da:	601a      	str	r2, [r3, #0]
100013dc:	605a      	str	r2, [r3, #4]
100013de:	609a      	str	r2, [r3, #8]
100013e0:	60da      	str	r2, [r3, #12]
100013e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
100013e4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
100013e8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
100013ec:	4618      	mov	r0, r3
100013ee:	f44f 73ac 	mov.w	r3, #344	; 0x158
100013f2:	461a      	mov	r2, r3
100013f4:	2100      	movs	r1, #0
100013f6:	f00c f884 	bl	1000d502 <memset>
  if(hadc->Instance==ADC1)
100013fa:	f507 73bc 	add.w	r3, r7, #376	; 0x178
100013fe:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
10001402:	681b      	ldr	r3, [r3, #0]
10001404:	681b      	ldr	r3, [r3, #0]
10001406:	4a71      	ldr	r2, [pc, #452]	; (100015cc <HAL_ADC_MspInit+0x208>)
10001408:	4293      	cmp	r3, r2
1000140a:	d146      	bne.n	1000149a <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  if(IS_ENGINEERING_BOOT_MODE())
1000140c:	4b70      	ldr	r3, [pc, #448]	; (100015d0 <HAL_ADC_MspInit+0x20c>)
1000140e:	681b      	ldr	r3, [r3, #0]
10001410:	f003 0307 	and.w	r3, r3, #7
10001414:	2b04      	cmp	r3, #4
10001416:	d11a      	bne.n	1000144e <HAL_ADC_MspInit+0x8a>
  {

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
10001418:	f507 73bc 	add.w	r3, r7, #376	; 0x178
1000141c:	f5a3 71b8 	sub.w	r1, r3, #368	; 0x170
10001420:	f04f 0208 	mov.w	r2, #8
10001424:	f04f 0300 	mov.w	r3, #0
10001428:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PER;
1000142c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
10001430:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
10001434:	2201      	movs	r2, #1
10001436:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
1000143a:	f107 0308 	add.w	r3, r7, #8
1000143e:	4618      	mov	r0, r3
10001440:	f004 ff92 	bl	10006368 <HAL_RCCEx_PeriphCLKConfig>
10001444:	4603      	mov	r3, r0
10001446:	2b00      	cmp	r3, #0
10001448:	d001      	beq.n	1000144e <HAL_ADC_MspInit+0x8a>
    {
      Error_Handler();
1000144a:	f7ff ff80 	bl	1000134e <Error_Handler>
    }

  }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
1000144e:	4b61      	ldr	r3, [pc, #388]	; (100015d4 <HAL_ADC_MspInit+0x210>)
10001450:	681b      	ldr	r3, [r3, #0]
10001452:	3301      	adds	r3, #1
10001454:	4a5f      	ldr	r2, [pc, #380]	; (100015d4 <HAL_ADC_MspInit+0x210>)
10001456:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
10001458:	4b5e      	ldr	r3, [pc, #376]	; (100015d4 <HAL_ADC_MspInit+0x210>)
1000145a:	681b      	ldr	r3, [r3, #0]
1000145c:	2b01      	cmp	r3, #1
1000145e:	d104      	bne.n	1000146a <HAL_ADC_MspInit+0xa6>
      __HAL_RCC_ADC12_CLK_ENABLE();
10001460:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001464:	2220      	movs	r2, #32
10001466:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
1000146a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000146e:	2201      	movs	r2, #1
10001470:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    /**ADC1 GPIO Configuration
    ANA0     ------> ADC1_INP0
    PA5     ------> ADC1_INP19
    PA4     ------> ADC1_INP18
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
10001474:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
10001478:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
1000147c:	f000 fb0a 	bl	10001a94 <HAL_SYSCFG_AnalogSwitchConfig>

    GPIO_InitStruct.Pin = USB_PWR_CC2_Pin|USB_PWR_CC1_Pin;
10001480:	2330      	movs	r3, #48	; 0x30
10001482:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
10001486:	2303      	movs	r3, #3
10001488:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
1000148c:	f507 73b2 	add.w	r3, r7, #356	; 0x164
10001490:	4619      	mov	r1, r3
10001492:	4851      	ldr	r0, [pc, #324]	; (100015d8 <HAL_ADC_MspInit+0x214>)
10001494:	f002 fa64 	bl	10003960 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
10001498:	e093      	b.n	100015c2 <HAL_ADC_MspInit+0x1fe>
  else if(hadc->Instance==ADC2)
1000149a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
1000149e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
100014a2:	681b      	ldr	r3, [r3, #0]
100014a4:	681b      	ldr	r3, [r3, #0]
100014a6:	4a4d      	ldr	r2, [pc, #308]	; (100015dc <HAL_ADC_MspInit+0x218>)
100014a8:	4293      	cmp	r3, r2
100014aa:	f040 808a 	bne.w	100015c2 <HAL_ADC_MspInit+0x1fe>
  if(IS_ENGINEERING_BOOT_MODE())
100014ae:	4b48      	ldr	r3, [pc, #288]	; (100015d0 <HAL_ADC_MspInit+0x20c>)
100014b0:	681b      	ldr	r3, [r3, #0]
100014b2:	f003 0307 	and.w	r3, r3, #7
100014b6:	2b04      	cmp	r3, #4
100014b8:	d11a      	bne.n	100014f0 <HAL_ADC_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
100014ba:	f507 73bc 	add.w	r3, r7, #376	; 0x178
100014be:	f5a3 71b8 	sub.w	r1, r3, #368	; 0x170
100014c2:	f04f 0208 	mov.w	r2, #8
100014c6:	f04f 0300 	mov.w	r3, #0
100014ca:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PER;
100014ce:	f507 73bc 	add.w	r3, r7, #376	; 0x178
100014d2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
100014d6:	2201      	movs	r2, #1
100014d8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
100014dc:	f107 0308 	add.w	r3, r7, #8
100014e0:	4618      	mov	r0, r3
100014e2:	f004 ff41 	bl	10006368 <HAL_RCCEx_PeriphCLKConfig>
100014e6:	4603      	mov	r3, r0
100014e8:	2b00      	cmp	r3, #0
100014ea:	d001      	beq.n	100014f0 <HAL_ADC_MspInit+0x12c>
      Error_Handler();
100014ec:	f7ff ff2f 	bl	1000134e <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
100014f0:	4b38      	ldr	r3, [pc, #224]	; (100015d4 <HAL_ADC_MspInit+0x210>)
100014f2:	681b      	ldr	r3, [r3, #0]
100014f4:	3301      	adds	r3, #1
100014f6:	4a37      	ldr	r2, [pc, #220]	; (100015d4 <HAL_ADC_MspInit+0x210>)
100014f8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
100014fa:	4b36      	ldr	r3, [pc, #216]	; (100015d4 <HAL_ADC_MspInit+0x210>)
100014fc:	681b      	ldr	r3, [r3, #0]
100014fe:	2b01      	cmp	r3, #1
10001500:	d104      	bne.n	1000150c <HAL_ADC_MspInit+0x148>
      __HAL_RCC_ADC12_CLK_ENABLE();
10001502:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001506:	2220      	movs	r2, #32
10001508:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
    __HAL_RCC_GPIOA_CLK_ENABLE();
1000150c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001510:	2201      	movs	r2, #1
10001512:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    __HAL_RCC_GPIOF_CLK_ENABLE();
10001516:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000151a:	2220      	movs	r2, #32
1000151c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    GPIO_InitStruct.Pin = USB_PWR_CC2_Pin|USB_PWR_CC1_Pin;
10001520:	2330      	movs	r3, #48	; 0x30
10001522:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
10001526:	2303      	movs	r3, #3
10001528:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
1000152c:	f507 73b2 	add.w	r3, r7, #356	; 0x164
10001530:	4619      	mov	r1, r3
10001532:	4829      	ldr	r0, [pc, #164]	; (100015d8 <HAL_ADC_MspInit+0x214>)
10001534:	f002 fa14 	bl	10003960 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
10001538:	f44f 4380 	mov.w	r3, #16384	; 0x4000
1000153c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
10001540:	2303      	movs	r3, #3
10001542:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
10001546:	f507 73b2 	add.w	r3, r7, #356	; 0x164
1000154a:	4619      	mov	r1, r3
1000154c:	4824      	ldr	r0, [pc, #144]	; (100015e0 <HAL_ADC_MspInit+0x21c>)
1000154e:	f002 fa07 	bl	10003960 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream0;
10001552:	4b24      	ldr	r3, [pc, #144]	; (100015e4 <HAL_ADC_MspInit+0x220>)
10001554:	4a24      	ldr	r2, [pc, #144]	; (100015e8 <HAL_ADC_MspInit+0x224>)
10001556:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
10001558:	4b22      	ldr	r3, [pc, #136]	; (100015e4 <HAL_ADC_MspInit+0x220>)
1000155a:	220a      	movs	r2, #10
1000155c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
1000155e:	4b21      	ldr	r3, [pc, #132]	; (100015e4 <HAL_ADC_MspInit+0x220>)
10001560:	2200      	movs	r2, #0
10001562:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
10001564:	4b1f      	ldr	r3, [pc, #124]	; (100015e4 <HAL_ADC_MspInit+0x220>)
10001566:	2200      	movs	r2, #0
10001568:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
1000156a:	4b1e      	ldr	r3, [pc, #120]	; (100015e4 <HAL_ADC_MspInit+0x220>)
1000156c:	f44f 6280 	mov.w	r2, #1024	; 0x400
10001570:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
10001572:	4b1c      	ldr	r3, [pc, #112]	; (100015e4 <HAL_ADC_MspInit+0x220>)
10001574:	f44f 6200 	mov.w	r2, #2048	; 0x800
10001578:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
1000157a:	4b1a      	ldr	r3, [pc, #104]	; (100015e4 <HAL_ADC_MspInit+0x220>)
1000157c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
10001580:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
10001582:	4b18      	ldr	r3, [pc, #96]	; (100015e4 <HAL_ADC_MspInit+0x220>)
10001584:	f44f 7280 	mov.w	r2, #256	; 0x100
10001588:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
1000158a:	4b16      	ldr	r3, [pc, #88]	; (100015e4 <HAL_ADC_MspInit+0x220>)
1000158c:	2200      	movs	r2, #0
1000158e:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
10001590:	4b14      	ldr	r3, [pc, #80]	; (100015e4 <HAL_ADC_MspInit+0x220>)
10001592:	2200      	movs	r2, #0
10001594:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
10001596:	4813      	ldr	r0, [pc, #76]	; (100015e4 <HAL_ADC_MspInit+0x220>)
10001598:	f001 fd44 	bl	10003024 <HAL_DMA_Init>
1000159c:	4603      	mov	r3, r0
1000159e:	2b00      	cmp	r3, #0
100015a0:	d001      	beq.n	100015a6 <HAL_ADC_MspInit+0x1e2>
      Error_Handler();
100015a2:	f7ff fed4 	bl	1000134e <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
100015a6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
100015aa:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
100015ae:	681b      	ldr	r3, [r3, #0]
100015b0:	4a0c      	ldr	r2, [pc, #48]	; (100015e4 <HAL_ADC_MspInit+0x220>)
100015b2:	64da      	str	r2, [r3, #76]	; 0x4c
100015b4:	4a0b      	ldr	r2, [pc, #44]	; (100015e4 <HAL_ADC_MspInit+0x220>)
100015b6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
100015ba:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
100015be:	681b      	ldr	r3, [r3, #0]
100015c0:	6393      	str	r3, [r2, #56]	; 0x38
}
100015c2:	bf00      	nop
100015c4:	f507 77bc 	add.w	r7, r7, #376	; 0x178
100015c8:	46bd      	mov	sp, r7
100015ca:	bd80      	pop	{r7, pc}
100015cc:	48003000 	.word	0x48003000
100015d0:	50020000 	.word	0x50020000
100015d4:	100203d8 	.word	0x100203d8
100015d8:	50002000 	.word	0x50002000
100015dc:	48003100 	.word	0x48003100
100015e0:	50007000 	.word	0x50007000
100015e4:	10020290 	.word	0x10020290
100015e8:	48001010 	.word	0x48001010

100015ec <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
100015ec:	b580      	push	{r7, lr}
100015ee:	b082      	sub	sp, #8
100015f0:	af00      	add	r7, sp, #0
100015f2:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
100015f4:	687b      	ldr	r3, [r7, #4]
100015f6:	681b      	ldr	r3, [r3, #0]
100015f8:	4a0e      	ldr	r2, [pc, #56]	; (10001634 <HAL_IPCC_MspInit+0x48>)
100015fa:	4293      	cmp	r3, r2
100015fc:	d115      	bne.n	1000162a <HAL_IPCC_MspInit+0x3e>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
100015fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001602:	f44f 5280 	mov.w	r2, #4096	; 0x1000
10001606:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_RX1_IRQn, 1, 0);
1000160a:	2200      	movs	r2, #0
1000160c:	2101      	movs	r1, #1
1000160e:	2067      	movs	r0, #103	; 0x67
10001610:	f001 fcd1 	bl	10002fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_RX1_IRQn);
10001614:	2067      	movs	r0, #103	; 0x67
10001616:	f001 fcea 	bl	10002fee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_TX1_IRQn, 1, 0);
1000161a:	2200      	movs	r2, #0
1000161c:	2101      	movs	r1, #1
1000161e:	2068      	movs	r0, #104	; 0x68
10001620:	f001 fcc9 	bl	10002fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_TX1_IRQn);
10001624:	2068      	movs	r0, #104	; 0x68
10001626:	f001 fce2 	bl	10002fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
1000162a:	bf00      	nop
1000162c:	3708      	adds	r7, #8
1000162e:	46bd      	mov	sp, r7
10001630:	bd80      	pop	{r7, pc}
10001632:	bf00      	nop
10001634:	4c001000 	.word	0x4c001000

10001638 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
10001638:	b580      	push	{r7, lr}
1000163a:	b0de      	sub	sp, #376	; 0x178
1000163c:	af00      	add	r7, sp, #0
1000163e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
10001642:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
10001646:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10001648:	f507 73b2 	add.w	r3, r7, #356	; 0x164
1000164c:	2200      	movs	r2, #0
1000164e:	601a      	str	r2, [r3, #0]
10001650:	605a      	str	r2, [r3, #4]
10001652:	609a      	str	r2, [r3, #8]
10001654:	60da      	str	r2, [r3, #12]
10001656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
10001658:	f507 73bc 	add.w	r3, r7, #376	; 0x178
1000165c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
10001660:	4618      	mov	r0, r3
10001662:	f44f 73ac 	mov.w	r3, #344	; 0x158
10001666:	461a      	mov	r2, r3
10001668:	2100      	movs	r1, #0
1000166a:	f00b ff4a 	bl	1000d502 <memset>
  if(huart->Instance==UART4)
1000166e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
10001672:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
10001676:	681b      	ldr	r3, [r3, #0]
10001678:	681b      	ldr	r3, [r3, #0]
1000167a:	4a2d      	ldr	r2, [pc, #180]	; (10001730 <HAL_UART_MspInit+0xf8>)
1000167c:	4293      	cmp	r3, r2
1000167e:	d151      	bne.n	10001724 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  if(IS_ENGINEERING_BOOT_MODE())
10001680:	4b2c      	ldr	r3, [pc, #176]	; (10001734 <HAL_UART_MspInit+0xfc>)
10001682:	681b      	ldr	r3, [r3, #0]
10001684:	f003 0307 	and.w	r3, r3, #7
10001688:	2b04      	cmp	r3, #4
1000168a:	d113      	bne.n	100016b4 <HAL_UART_MspInit+0x7c>
  {

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART24;
1000168c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
10001690:	f5a3 71b8 	sub.w	r1, r3, #368	; 0x170
10001694:	f04f 0202 	mov.w	r2, #2
10001698:	f04f 0300 	mov.w	r3, #0
1000169c:	e9c1 2300 	strd	r2, r3, [r1]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
100016a0:	f107 0308 	add.w	r3, r7, #8
100016a4:	4618      	mov	r0, r3
100016a6:	f004 fe5f 	bl	10006368 <HAL_RCCEx_PeriphCLKConfig>
100016aa:	4603      	mov	r3, r0
100016ac:	2b00      	cmp	r3, #0
100016ae:	d001      	beq.n	100016b4 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
100016b0:	f7ff fe4d 	bl	1000134e <Error_Handler>
    }

  }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
100016b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
100016bc:	f8c3 2a80 	str.w	r2, [r3, #2688]	; 0xa80

    __HAL_RCC_GPIOG_CLK_ENABLE();
100016c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016c4:	2240      	movs	r2, #64	; 0x40
100016c6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    __HAL_RCC_GPIOB_CLK_ENABLE();
100016ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016ce:	2202      	movs	r2, #2
100016d0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    /**UART4 GPIO Configuration
    PG11     ------> UART4_TX
    PB2     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin;
100016d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
100016d8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
100016dc:	2302      	movs	r3, #2
100016de:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100016e2:	2300      	movs	r3, #0
100016e4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100016e8:	2300      	movs	r3, #0
100016ea:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
100016ee:	2306      	movs	r3, #6
100016f0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
100016f4:	f507 73b2 	add.w	r3, r7, #356	; 0x164
100016f8:	4619      	mov	r1, r3
100016fa:	480f      	ldr	r0, [pc, #60]	; (10001738 <HAL_UART_MspInit+0x100>)
100016fc:	f002 f930 	bl	10003960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLINK_TX_Pin;
10001700:	2304      	movs	r3, #4
10001702:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF;
10001706:	2302      	movs	r3, #2
10001708:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
1000170c:	2300      	movs	r3, #0
1000170e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
10001712:	2308      	movs	r3, #8
10001714:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    HAL_GPIO_Init(STLINK_TX_GPIO_Port, &GPIO_InitStruct);
10001718:	f507 73b2 	add.w	r3, r7, #356	; 0x164
1000171c:	4619      	mov	r1, r3
1000171e:	4807      	ldr	r0, [pc, #28]	; (1000173c <HAL_UART_MspInit+0x104>)
10001720:	f002 f91e 	bl	10003960 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
10001724:	bf00      	nop
10001726:	f507 77bc 	add.w	r7, r7, #376	; 0x178
1000172a:	46bd      	mov	sp, r7
1000172c:	bd80      	pop	{r7, pc}
1000172e:	bf00      	nop
10001730:	40010000 	.word	0x40010000
10001734:	50020000 	.word	0x50020000
10001738:	50008000 	.word	0x50008000
1000173c:	50003000 	.word	0x50003000

10001740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10001740:	b480      	push	{r7}
10001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
10001744:	e7fe      	b.n	10001744 <NMI_Handler+0x4>

10001746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10001746:	b480      	push	{r7}
10001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
1000174a:	e7fe      	b.n	1000174a <HardFault_Handler+0x4>

1000174c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
1000174c:	b480      	push	{r7}
1000174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
10001750:	e7fe      	b.n	10001750 <MemManage_Handler+0x4>

10001752 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
10001752:	b480      	push	{r7}
10001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
10001756:	e7fe      	b.n	10001756 <BusFault_Handler+0x4>

10001758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
10001758:	b480      	push	{r7}
1000175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
1000175c:	e7fe      	b.n	1000175c <UsageFault_Handler+0x4>

1000175e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
1000175e:	b480      	push	{r7}
10001760:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
10001762:	bf00      	nop
10001764:	46bd      	mov	sp, r7
10001766:	f85d 7b04 	ldr.w	r7, [sp], #4
1000176a:	4770      	bx	lr

1000176c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
1000176c:	b480      	push	{r7}
1000176e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
10001770:	bf00      	nop
10001772:	46bd      	mov	sp, r7
10001774:	f85d 7b04 	ldr.w	r7, [sp], #4
10001778:	4770      	bx	lr

1000177a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
1000177a:	b480      	push	{r7}
1000177c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
1000177e:	bf00      	nop
10001780:	46bd      	mov	sp, r7
10001782:	f85d 7b04 	ldr.w	r7, [sp], #4
10001786:	4770      	bx	lr

10001788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
10001788:	b580      	push	{r7, lr}
1000178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
1000178c:	f000 f93e 	bl	10001a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10001790:	bf00      	nop
10001792:	bd80      	pop	{r7, pc}

10001794 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
10001794:	b580      	push	{r7, lr}
10001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
10001798:	4802      	ldr	r0, [pc, #8]	; (100017a4 <DMA2_Stream0_IRQHandler+0x10>)
1000179a:	f001 fdbf 	bl	1000331c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
1000179e:	bf00      	nop
100017a0:	bd80      	pop	{r7, pc}
100017a2:	bf00      	nop
100017a4:	10020290 	.word	0x10020290

100017a8 <IPCC_RX1_IRQHandler>:

/**
  * @brief This function handles IPCC RX1 occupied interrupt.
  */
void IPCC_RX1_IRQHandler(void)
{
100017a8:	b580      	push	{r7, lr}
100017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_RX1_IRQn 0 */

  /* USER CODE END IPCC_RX1_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
100017ac:	4802      	ldr	r0, [pc, #8]	; (100017b8 <IPCC_RX1_IRQHandler+0x10>)
100017ae:	f002 fbe1 	bl	10003f74 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_RX1_IRQn 1 */

  /* USER CODE END IPCC_RX1_IRQn 1 */
}
100017b2:	bf00      	nop
100017b4:	bd80      	pop	{r7, pc}
100017b6:	bf00      	nop
100017b8:	10020308 	.word	0x10020308

100017bc <IPCC_TX1_IRQHandler>:

/**
  * @brief This function handles IPCC TX1 free interrupt.
  */
void IPCC_TX1_IRQHandler(void)
{
100017bc:	b580      	push	{r7, lr}
100017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_TX1_IRQn 0 */

  /* USER CODE END IPCC_TX1_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
100017c0:	4802      	ldr	r0, [pc, #8]	; (100017cc <IPCC_TX1_IRQHandler+0x10>)
100017c2:	f002 fb89 	bl	10003ed8 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_TX1_IRQn 1 */

  /* USER CODE END IPCC_TX1_IRQn 1 */
}
100017c6:	bf00      	nop
100017c8:	bd80      	pop	{r7, pc}
100017ca:	bf00      	nop
100017cc:	10020308 	.word	0x10020308

100017d0 <RCC_WAKEUP_IRQHandler>:

/**
  * @brief This function handles RCC wake-up interrupt.
  */
void RCC_WAKEUP_IRQHandler(void)
{
100017d0:	b580      	push	{r7, lr}
100017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 0 */

  /* USER CODE END RCC_WAKEUP_IRQn 0 */
  HAL_RCC_WAKEUP_IRQHandler();
100017d4:	f004 f968 	bl	10005aa8 <HAL_RCC_WAKEUP_IRQHandler>
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 1 */

  /* USER CODE END RCC_WAKEUP_IRQn 1 */
}
100017d8:	bf00      	nop
100017da:	bd80      	pop	{r7, pc}

100017dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
100017dc:	b480      	push	{r7}
100017de:	af00      	add	r7, sp, #0
  return 1;
100017e0:	2301      	movs	r3, #1
}
100017e2:	4618      	mov	r0, r3
100017e4:	46bd      	mov	sp, r7
100017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
100017ea:	4770      	bx	lr

100017ec <_kill>:

int _kill(int pid, int sig)
{
100017ec:	b580      	push	{r7, lr}
100017ee:	b082      	sub	sp, #8
100017f0:	af00      	add	r7, sp, #0
100017f2:	6078      	str	r0, [r7, #4]
100017f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
100017f6:	f00b ff07 	bl	1000d608 <__errno>
100017fa:	4603      	mov	r3, r0
100017fc:	2216      	movs	r2, #22
100017fe:	601a      	str	r2, [r3, #0]
  return -1;
10001800:	f04f 33ff 	mov.w	r3, #4294967295
}
10001804:	4618      	mov	r0, r3
10001806:	3708      	adds	r7, #8
10001808:	46bd      	mov	sp, r7
1000180a:	bd80      	pop	{r7, pc}

1000180c <_exit>:

void _exit (int status)
{
1000180c:	b580      	push	{r7, lr}
1000180e:	b082      	sub	sp, #8
10001810:	af00      	add	r7, sp, #0
10001812:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
10001814:	f04f 31ff 	mov.w	r1, #4294967295
10001818:	6878      	ldr	r0, [r7, #4]
1000181a:	f7ff ffe7 	bl	100017ec <_kill>
  while (1) {}    /* Make sure we hang here */
1000181e:	e7fe      	b.n	1000181e <_exit+0x12>

10001820 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
10001820:	b580      	push	{r7, lr}
10001822:	b086      	sub	sp, #24
10001824:	af00      	add	r7, sp, #0
10001826:	60f8      	str	r0, [r7, #12]
10001828:	60b9      	str	r1, [r7, #8]
1000182a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
1000182c:	2300      	movs	r3, #0
1000182e:	617b      	str	r3, [r7, #20]
10001830:	e00a      	b.n	10001848 <_read+0x28>
  {
    *ptr++ = __io_getchar();
10001832:	f3af 8000 	nop.w
10001836:	4601      	mov	r1, r0
10001838:	68bb      	ldr	r3, [r7, #8]
1000183a:	1c5a      	adds	r2, r3, #1
1000183c:	60ba      	str	r2, [r7, #8]
1000183e:	b2ca      	uxtb	r2, r1
10001840:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
10001842:	697b      	ldr	r3, [r7, #20]
10001844:	3301      	adds	r3, #1
10001846:	617b      	str	r3, [r7, #20]
10001848:	697a      	ldr	r2, [r7, #20]
1000184a:	687b      	ldr	r3, [r7, #4]
1000184c:	429a      	cmp	r2, r3
1000184e:	dbf0      	blt.n	10001832 <_read+0x12>
  }

  return len;
10001850:	687b      	ldr	r3, [r7, #4]
}
10001852:	4618      	mov	r0, r3
10001854:	3718      	adds	r7, #24
10001856:	46bd      	mov	sp, r7
10001858:	bd80      	pop	{r7, pc}

1000185a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
1000185a:	b580      	push	{r7, lr}
1000185c:	b086      	sub	sp, #24
1000185e:	af00      	add	r7, sp, #0
10001860:	60f8      	str	r0, [r7, #12]
10001862:	60b9      	str	r1, [r7, #8]
10001864:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
10001866:	2300      	movs	r3, #0
10001868:	617b      	str	r3, [r7, #20]
1000186a:	e009      	b.n	10001880 <_write+0x26>
  {
    __io_putchar(*ptr++);
1000186c:	68bb      	ldr	r3, [r7, #8]
1000186e:	1c5a      	adds	r2, r3, #1
10001870:	60ba      	str	r2, [r7, #8]
10001872:	781b      	ldrb	r3, [r3, #0]
10001874:	4618      	mov	r0, r3
10001876:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
1000187a:	697b      	ldr	r3, [r7, #20]
1000187c:	3301      	adds	r3, #1
1000187e:	617b      	str	r3, [r7, #20]
10001880:	697a      	ldr	r2, [r7, #20]
10001882:	687b      	ldr	r3, [r7, #4]
10001884:	429a      	cmp	r2, r3
10001886:	dbf1      	blt.n	1000186c <_write+0x12>
  }
  return len;
10001888:	687b      	ldr	r3, [r7, #4]
}
1000188a:	4618      	mov	r0, r3
1000188c:	3718      	adds	r7, #24
1000188e:	46bd      	mov	sp, r7
10001890:	bd80      	pop	{r7, pc}

10001892 <_close>:

int _close(int file)
{
10001892:	b480      	push	{r7}
10001894:	b083      	sub	sp, #12
10001896:	af00      	add	r7, sp, #0
10001898:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
1000189a:	f04f 33ff 	mov.w	r3, #4294967295
}
1000189e:	4618      	mov	r0, r3
100018a0:	370c      	adds	r7, #12
100018a2:	46bd      	mov	sp, r7
100018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
100018a8:	4770      	bx	lr

100018aa <_fstat>:


int _fstat(int file, struct stat *st)
{
100018aa:	b480      	push	{r7}
100018ac:	b083      	sub	sp, #12
100018ae:	af00      	add	r7, sp, #0
100018b0:	6078      	str	r0, [r7, #4]
100018b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
100018b4:	683b      	ldr	r3, [r7, #0]
100018b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
100018ba:	605a      	str	r2, [r3, #4]
  return 0;
100018bc:	2300      	movs	r3, #0
}
100018be:	4618      	mov	r0, r3
100018c0:	370c      	adds	r7, #12
100018c2:	46bd      	mov	sp, r7
100018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
100018c8:	4770      	bx	lr

100018ca <_isatty>:

int _isatty(int file)
{
100018ca:	b480      	push	{r7}
100018cc:	b083      	sub	sp, #12
100018ce:	af00      	add	r7, sp, #0
100018d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
100018d2:	2301      	movs	r3, #1
}
100018d4:	4618      	mov	r0, r3
100018d6:	370c      	adds	r7, #12
100018d8:	46bd      	mov	sp, r7
100018da:	f85d 7b04 	ldr.w	r7, [sp], #4
100018de:	4770      	bx	lr

100018e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
100018e0:	b480      	push	{r7}
100018e2:	b085      	sub	sp, #20
100018e4:	af00      	add	r7, sp, #0
100018e6:	60f8      	str	r0, [r7, #12]
100018e8:	60b9      	str	r1, [r7, #8]
100018ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
100018ec:	2300      	movs	r3, #0
}
100018ee:	4618      	mov	r0, r3
100018f0:	3714      	adds	r7, #20
100018f2:	46bd      	mov	sp, r7
100018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
100018f8:	4770      	bx	lr
	...

100018fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
100018fc:	b580      	push	{r7, lr}
100018fe:	b086      	sub	sp, #24
10001900:	af00      	add	r7, sp, #0
10001902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
10001904:	4a14      	ldr	r2, [pc, #80]	; (10001958 <_sbrk+0x5c>)
10001906:	4b15      	ldr	r3, [pc, #84]	; (1000195c <_sbrk+0x60>)
10001908:	1ad3      	subs	r3, r2, r3
1000190a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
1000190c:	697b      	ldr	r3, [r7, #20]
1000190e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
10001910:	4b13      	ldr	r3, [pc, #76]	; (10001960 <_sbrk+0x64>)
10001912:	681b      	ldr	r3, [r3, #0]
10001914:	2b00      	cmp	r3, #0
10001916:	d102      	bne.n	1000191e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
10001918:	4b11      	ldr	r3, [pc, #68]	; (10001960 <_sbrk+0x64>)
1000191a:	4a12      	ldr	r2, [pc, #72]	; (10001964 <_sbrk+0x68>)
1000191c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
1000191e:	4b10      	ldr	r3, [pc, #64]	; (10001960 <_sbrk+0x64>)
10001920:	681a      	ldr	r2, [r3, #0]
10001922:	687b      	ldr	r3, [r7, #4]
10001924:	4413      	add	r3, r2
10001926:	693a      	ldr	r2, [r7, #16]
10001928:	429a      	cmp	r2, r3
1000192a:	d207      	bcs.n	1000193c <_sbrk+0x40>
  {
    errno = ENOMEM;
1000192c:	f00b fe6c 	bl	1000d608 <__errno>
10001930:	4603      	mov	r3, r0
10001932:	220c      	movs	r2, #12
10001934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
10001936:	f04f 33ff 	mov.w	r3, #4294967295
1000193a:	e009      	b.n	10001950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
1000193c:	4b08      	ldr	r3, [pc, #32]	; (10001960 <_sbrk+0x64>)
1000193e:	681b      	ldr	r3, [r3, #0]
10001940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
10001942:	4b07      	ldr	r3, [pc, #28]	; (10001960 <_sbrk+0x64>)
10001944:	681a      	ldr	r2, [r3, #0]
10001946:	687b      	ldr	r3, [r7, #4]
10001948:	4413      	add	r3, r2
1000194a:	4a05      	ldr	r2, [pc, #20]	; (10001960 <_sbrk+0x64>)
1000194c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
1000194e:	68fb      	ldr	r3, [r7, #12]
}
10001950:	4618      	mov	r0, r3
10001952:	3718      	adds	r7, #24
10001954:	46bd      	mov	sp, r7
10001956:	bd80      	pop	{r7, pc}
10001958:	10040000 	.word	0x10040000
1000195c:	00000400 	.word	0x00000400
10001960:	100203dc 	.word	0x100203dc
10001964:	10020600 	.word	0x10020600

10001968 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
10001968:	e7fe      	b.n	10001968 <ADC1_IRQHandler>
	...

1000196c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
1000196c:	b580      	push	{r7, lr}
1000196e:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
10001970:	2003      	movs	r0, #3
10001972:	f001 fb15 	bl	10002fa0 <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001976:	f004 f817 	bl	100059a8 <HAL_RCC_GetSystemCoreClockFreq>
1000197a:	4603      	mov	r3, r0
1000197c:	4a07      	ldr	r2, [pc, #28]	; (1000199c <HAL_Init+0x30>)
1000197e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10001980:	2001      	movs	r0, #1
10001982:	f000 f80d 	bl	100019a0 <HAL_InitTick>
10001986:	4603      	mov	r3, r0
10001988:	2b00      	cmp	r3, #0
1000198a:	d001      	beq.n	10001990 <HAL_Init+0x24>
  {
    return HAL_ERROR;
1000198c:	2301      	movs	r3, #1
1000198e:	e002      	b.n	10001996 <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
10001990:	f7ff fce2 	bl	10001358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
10001994:	2300      	movs	r3, #0
}
10001996:	4618      	mov	r0, r3
10001998:	bd80      	pop	{r7, pc}
1000199a:	bf00      	nop
1000199c:	10020000 	.word	0x10020000

100019a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
100019a0:	b580      	push	{r7, lr}
100019a2:	b082      	sub	sp, #8
100019a4:	af00      	add	r7, sp, #0
100019a6:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
100019a8:	4b15      	ldr	r3, [pc, #84]	; (10001a00 <HAL_InitTick+0x60>)
100019aa:	781b      	ldrb	r3, [r3, #0]
100019ac:	2b00      	cmp	r3, #0
100019ae:	d101      	bne.n	100019b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
100019b0:	2301      	movs	r3, #1
100019b2:	e021      	b.n	100019f8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
100019b4:	4b13      	ldr	r3, [pc, #76]	; (10001a04 <HAL_InitTick+0x64>)
100019b6:	681a      	ldr	r2, [r3, #0]
100019b8:	4b11      	ldr	r3, [pc, #68]	; (10001a00 <HAL_InitTick+0x60>)
100019ba:	781b      	ldrb	r3, [r3, #0]
100019bc:	4619      	mov	r1, r3
100019be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
100019c2:	fbb3 f3f1 	udiv	r3, r3, r1
100019c6:	fbb2 f3f3 	udiv	r3, r2, r3
100019ca:	4618      	mov	r0, r3
100019cc:	f001 fb1d 	bl	1000300a <HAL_SYSTICK_Config>
100019d0:	4603      	mov	r3, r0
100019d2:	2b00      	cmp	r3, #0
100019d4:	d001      	beq.n	100019da <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
100019d6:	2301      	movs	r3, #1
100019d8:	e00e      	b.n	100019f8 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
100019da:	687b      	ldr	r3, [r7, #4]
100019dc:	2b0f      	cmp	r3, #15
100019de:	d80a      	bhi.n	100019f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
100019e0:	2200      	movs	r2, #0
100019e2:	6879      	ldr	r1, [r7, #4]
100019e4:	f04f 30ff 	mov.w	r0, #4294967295
100019e8:	f001 fae5 	bl	10002fb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
100019ec:	4a06      	ldr	r2, [pc, #24]	; (10001a08 <HAL_InitTick+0x68>)
100019ee:	687b      	ldr	r3, [r7, #4]
100019f0:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
100019f2:	2300      	movs	r3, #0
100019f4:	e000      	b.n	100019f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
100019f6:	2301      	movs	r3, #1
}
100019f8:	4618      	mov	r0, r3
100019fa:	3708      	adds	r7, #8
100019fc:	46bd      	mov	sp, r7
100019fe:	bd80      	pop	{r7, pc}
10001a00:	10020008 	.word	0x10020008
10001a04:	10020000 	.word	0x10020000
10001a08:	10020004 	.word	0x10020004

10001a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10001a0c:	b480      	push	{r7}
10001a0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10001a10:	4b06      	ldr	r3, [pc, #24]	; (10001a2c <HAL_IncTick+0x20>)
10001a12:	781b      	ldrb	r3, [r3, #0]
10001a14:	461a      	mov	r2, r3
10001a16:	4b06      	ldr	r3, [pc, #24]	; (10001a30 <HAL_IncTick+0x24>)
10001a18:	681b      	ldr	r3, [r3, #0]
10001a1a:	4413      	add	r3, r2
10001a1c:	4a04      	ldr	r2, [pc, #16]	; (10001a30 <HAL_IncTick+0x24>)
10001a1e:	6013      	str	r3, [r2, #0]
}
10001a20:	bf00      	nop
10001a22:	46bd      	mov	sp, r7
10001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
10001a28:	4770      	bx	lr
10001a2a:	bf00      	nop
10001a2c:	10020008 	.word	0x10020008
10001a30:	100203e0 	.word	0x100203e0

10001a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10001a34:	b480      	push	{r7}
10001a36:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
10001a38:	4b03      	ldr	r3, [pc, #12]	; (10001a48 <HAL_GetTick+0x14>)
10001a3a:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
10001a3c:	4618      	mov	r0, r3
10001a3e:	46bd      	mov	sp, r7
10001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
10001a44:	4770      	bx	lr
10001a46:	bf00      	nop
10001a48:	100203e0 	.word	0x100203e0

10001a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
10001a4c:	b580      	push	{r7, lr}
10001a4e:	b084      	sub	sp, #16
10001a50:	af00      	add	r7, sp, #0
10001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
10001a54:	f7ff ffee 	bl	10001a34 <HAL_GetTick>
10001a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
10001a5a:	687b      	ldr	r3, [r7, #4]
10001a5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
10001a5e:	68fb      	ldr	r3, [r7, #12]
10001a60:	f1b3 3fff 	cmp.w	r3, #4294967295
10001a64:	d005      	beq.n	10001a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
10001a66:	4b0a      	ldr	r3, [pc, #40]	; (10001a90 <HAL_Delay+0x44>)
10001a68:	781b      	ldrb	r3, [r3, #0]
10001a6a:	461a      	mov	r2, r3
10001a6c:	68fb      	ldr	r3, [r7, #12]
10001a6e:	4413      	add	r3, r2
10001a70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
10001a72:	bf00      	nop
10001a74:	f7ff ffde 	bl	10001a34 <HAL_GetTick>
10001a78:	4602      	mov	r2, r0
10001a7a:	68bb      	ldr	r3, [r7, #8]
10001a7c:	1ad3      	subs	r3, r2, r3
10001a7e:	68fa      	ldr	r2, [r7, #12]
10001a80:	429a      	cmp	r2, r3
10001a82:	d8f7      	bhi.n	10001a74 <HAL_Delay+0x28>
  {
  }
}
10001a84:	bf00      	nop
10001a86:	bf00      	nop
10001a88:	3710      	adds	r7, #16
10001a8a:	46bd      	mov	sp, r7
10001a8c:	bd80      	pop	{r7, pc}
10001a8e:	bf00      	nop
10001a90:	10020008 	.word	0x10020008

10001a94 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PA1_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
10001a94:	b480      	push	{r7}
10001a96:	b083      	sub	sp, #12
10001a98:	af00      	add	r7, sp, #0
10001a9a:	6078      	str	r0, [r7, #4]
10001a9c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));
  SYSCFG->PMCCLRR = SYSCFG_AnalogSwitch;
10001a9e:	4a06      	ldr	r2, [pc, #24]	; (10001ab8 <HAL_SYSCFG_AnalogSwitchConfig+0x24>)
10001aa0:	687b      	ldr	r3, [r7, #4]
10001aa2:	6453      	str	r3, [r2, #68]	; 0x44
  SYSCFG->PMCSETR = (uint32_t)(SYSCFG_SwitchState);
10001aa4:	4a04      	ldr	r2, [pc, #16]	; (10001ab8 <HAL_SYSCFG_AnalogSwitchConfig+0x24>)
10001aa6:	683b      	ldr	r3, [r7, #0]
10001aa8:	6053      	str	r3, [r2, #4]

}
10001aaa:	bf00      	nop
10001aac:	370c      	adds	r7, #12
10001aae:	46bd      	mov	sp, r7
10001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
10001ab4:	4770      	bx	lr
10001ab6:	bf00      	nop
10001ab8:	50020000 	.word	0x50020000

10001abc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
10001abc:	b480      	push	{r7}
10001abe:	b083      	sub	sp, #12
10001ac0:	af00      	add	r7, sp, #0
10001ac2:	6078      	str	r0, [r7, #4]
10001ac4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
10001ac6:	687b      	ldr	r3, [r7, #4]
10001ac8:	689b      	ldr	r3, [r3, #8]
10001aca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
10001ace:	683b      	ldr	r3, [r7, #0]
10001ad0:	431a      	orrs	r2, r3
10001ad2:	687b      	ldr	r3, [r7, #4]
10001ad4:	609a      	str	r2, [r3, #8]
}
10001ad6:	bf00      	nop
10001ad8:	370c      	adds	r7, #12
10001ada:	46bd      	mov	sp, r7
10001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
10001ae0:	4770      	bx	lr
	...

10001ae4 <LL_ADC_SetCommonPathInternalCh>:
  *
  *         (1) On STM32MP1, parameter available only on ADC instance: ADC2.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
10001ae4:	b480      	push	{r7}
10001ae6:	b083      	sub	sp, #12
10001ae8:	af00      	add	r7, sp, #0
10001aea:	6078      	str	r0, [r7, #4]
10001aec:	6039      	str	r1, [r7, #0]
  if(PathInternal == LL_ADC_PATH_INTERNAL_VDDCORE)
10001aee:	683b      	ldr	r3, [r7, #0]
10001af0:	2b01      	cmp	r3, #1
10001af2:	d108      	bne.n	10001b06 <LL_ADC_SetCommonPathInternalCh+0x22>
  {
    /* Feature limited to ADC instance ADC2 */
    SET_BIT(ADC2->OR, ADC2_OR_VDDCOREEN);
10001af4:	4b0b      	ldr	r3, [pc, #44]	; (10001b24 <LL_ADC_SetCommonPathInternalCh+0x40>)
10001af6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
10001afa:	4a0a      	ldr	r2, [pc, #40]	; (10001b24 <LL_ADC_SetCommonPathInternalCh+0x40>)
10001afc:	f043 0301 	orr.w	r3, r3, #1
10001b00:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
  }
  else
  {
    MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
  }
}
10001b04:	e007      	b.n	10001b16 <LL_ADC_SetCommonPathInternalCh+0x32>
    MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
10001b06:	687b      	ldr	r3, [r7, #4]
10001b08:	689b      	ldr	r3, [r3, #8]
10001b0a:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
10001b0e:	683b      	ldr	r3, [r7, #0]
10001b10:	431a      	orrs	r2, r3
10001b12:	687b      	ldr	r3, [r7, #4]
10001b14:	609a      	str	r2, [r3, #8]
}
10001b16:	bf00      	nop
10001b18:	370c      	adds	r7, #12
10001b1a:	46bd      	mov	sp, r7
10001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
10001b20:	4770      	bx	lr
10001b22:	bf00      	nop
10001b24:	48003100 	.word	0x48003100

10001b28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
10001b28:	b480      	push	{r7}
10001b2a:	b083      	sub	sp, #12
10001b2c:	af00      	add	r7, sp, #0
10001b2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
10001b30:	687b      	ldr	r3, [r7, #4]
10001b32:	689b      	ldr	r3, [r3, #8]
10001b34:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
10001b38:	4618      	mov	r0, r3
10001b3a:	370c      	adds	r7, #12
10001b3c:	46bd      	mov	sp, r7
10001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001b42:	4770      	bx	lr

10001b44 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
10001b44:	b480      	push	{r7}
10001b46:	b087      	sub	sp, #28
10001b48:	af00      	add	r7, sp, #0
10001b4a:	60f8      	str	r0, [r7, #12]
10001b4c:	60b9      	str	r1, [r7, #8]
10001b4e:	607a      	str	r2, [r7, #4]
10001b50:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
10001b52:	68fb      	ldr	r3, [r7, #12]
10001b54:	3360      	adds	r3, #96	; 0x60
10001b56:	461a      	mov	r2, r3
10001b58:	68bb      	ldr	r3, [r7, #8]
10001b5a:	009b      	lsls	r3, r3, #2
10001b5c:	4413      	add	r3, r2
10001b5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
10001b60:	697b      	ldr	r3, [r7, #20]
10001b62:	681b      	ldr	r3, [r3, #0]
10001b64:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10001b68:	687b      	ldr	r3, [r7, #4]
10001b6a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
10001b6e:	683b      	ldr	r3, [r7, #0]
10001b70:	430b      	orrs	r3, r1
10001b72:	431a      	orrs	r2, r3
10001b74:	697b      	ldr	r3, [r7, #20]
10001b76:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
10001b78:	bf00      	nop
10001b7a:	371c      	adds	r7, #28
10001b7c:	46bd      	mov	sp, r7
10001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001b82:	4770      	bx	lr

10001b84 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
10001b84:	b480      	push	{r7}
10001b86:	b085      	sub	sp, #20
10001b88:	af00      	add	r7, sp, #0
10001b8a:	60f8      	str	r0, [r7, #12]
10001b8c:	60b9      	str	r1, [r7, #8]
10001b8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
10001b90:	68fb      	ldr	r3, [r7, #12]
10001b92:	691b      	ldr	r3, [r3, #16]
10001b94:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
10001b98:	68bb      	ldr	r3, [r7, #8]
10001b9a:	f003 031f 	and.w	r3, r3, #31
10001b9e:	6879      	ldr	r1, [r7, #4]
10001ba0:	fa01 f303 	lsl.w	r3, r1, r3
10001ba4:	431a      	orrs	r2, r3
10001ba6:	68fb      	ldr	r3, [r7, #12]
10001ba8:	611a      	str	r2, [r3, #16]
}
10001baa:	bf00      	nop
10001bac:	3714      	adds	r7, #20
10001bae:	46bd      	mov	sp, r7
10001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
10001bb4:	4770      	bx	lr

10001bb6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
10001bb6:	b480      	push	{r7}
10001bb8:	b087      	sub	sp, #28
10001bba:	af00      	add	r7, sp, #0
10001bbc:	60f8      	str	r0, [r7, #12]
10001bbe:	60b9      	str	r1, [r7, #8]
10001bc0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
10001bc2:	68fb      	ldr	r3, [r7, #12]
10001bc4:	3360      	adds	r3, #96	; 0x60
10001bc6:	461a      	mov	r2, r3
10001bc8:	68bb      	ldr	r3, [r7, #8]
10001bca:	009b      	lsls	r3, r3, #2
10001bcc:	4413      	add	r3, r2
10001bce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
10001bd0:	697b      	ldr	r3, [r7, #20]
10001bd2:	681b      	ldr	r3, [r3, #0]
10001bd4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
10001bd8:	687b      	ldr	r3, [r7, #4]
10001bda:	431a      	orrs	r2, r3
10001bdc:	697b      	ldr	r3, [r7, #20]
10001bde:	601a      	str	r2, [r3, #0]
}
10001be0:	bf00      	nop
10001be2:	371c      	adds	r7, #28
10001be4:	46bd      	mov	sp, r7
10001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
10001bea:	4770      	bx	lr

10001bec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
10001bec:	b480      	push	{r7}
10001bee:	b083      	sub	sp, #12
10001bf0:	af00      	add	r7, sp, #0
10001bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
10001bf4:	687b      	ldr	r3, [r7, #4]
10001bf6:	68db      	ldr	r3, [r3, #12]
10001bf8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
10001bfc:	2b00      	cmp	r3, #0
10001bfe:	d101      	bne.n	10001c04 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
10001c00:	2301      	movs	r3, #1
10001c02:	e000      	b.n	10001c06 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
10001c04:	2300      	movs	r3, #0
}
10001c06:	4618      	mov	r0, r3
10001c08:	370c      	adds	r7, #12
10001c0a:	46bd      	mov	sp, r7
10001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c10:	4770      	bx	lr

10001c12 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32MP1, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
10001c12:	b480      	push	{r7}
10001c14:	b087      	sub	sp, #28
10001c16:	af00      	add	r7, sp, #0
10001c18:	60f8      	str	r0, [r7, #12]
10001c1a:	60b9      	str	r1, [r7, #8]
10001c1c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
10001c1e:	68fb      	ldr	r3, [r7, #12]
10001c20:	3330      	adds	r3, #48	; 0x30
10001c22:	461a      	mov	r2, r3
10001c24:	68bb      	ldr	r3, [r7, #8]
10001c26:	0a1b      	lsrs	r3, r3, #8
10001c28:	009b      	lsls	r3, r3, #2
10001c2a:	f003 030c 	and.w	r3, r3, #12
10001c2e:	4413      	add	r3, r2
10001c30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
10001c32:	697b      	ldr	r3, [r7, #20]
10001c34:	681a      	ldr	r2, [r3, #0]
10001c36:	68bb      	ldr	r3, [r7, #8]
10001c38:	f003 031f 	and.w	r3, r3, #31
10001c3c:	211f      	movs	r1, #31
10001c3e:	fa01 f303 	lsl.w	r3, r1, r3
10001c42:	43db      	mvns	r3, r3
10001c44:	401a      	ands	r2, r3
10001c46:	687b      	ldr	r3, [r7, #4]
10001c48:	0e9b      	lsrs	r3, r3, #26
10001c4a:	f003 011f 	and.w	r1, r3, #31
10001c4e:	68bb      	ldr	r3, [r7, #8]
10001c50:	f003 031f 	and.w	r3, r3, #31
10001c54:	fa01 f303 	lsl.w	r3, r1, r3
10001c58:	431a      	orrs	r2, r3
10001c5a:	697b      	ldr	r3, [r7, #20]
10001c5c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
10001c5e:	bf00      	nop
10001c60:	371c      	adds	r7, #28
10001c62:	46bd      	mov	sp, r7
10001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c68:	4770      	bx	lr

10001c6a <LL_ADC_REG_SetDataTransferMode>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  *         @arg @ref LL_ADC_REG_DFSDM_TRANSFER
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
10001c6a:	b480      	push	{r7}
10001c6c:	b083      	sub	sp, #12
10001c6e:	af00      	add	r7, sp, #0
10001c70:	6078      	str	r0, [r7, #4]
10001c72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
10001c74:	687b      	ldr	r3, [r7, #4]
10001c76:	68db      	ldr	r3, [r3, #12]
10001c78:	f023 0203 	bic.w	r2, r3, #3
10001c7c:	683b      	ldr	r3, [r7, #0]
10001c7e:	431a      	orrs	r2, r3
10001c80:	687b      	ldr	r3, [r7, #4]
10001c82:	60da      	str	r2, [r3, #12]
}
10001c84:	bf00      	nop
10001c86:	370c      	adds	r7, #12
10001c88:	46bd      	mov	sp, r7
10001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c8e:	4770      	bx	lr

10001c90 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
10001c90:	b480      	push	{r7}
10001c92:	b087      	sub	sp, #28
10001c94:	af00      	add	r7, sp, #0
10001c96:	60f8      	str	r0, [r7, #12]
10001c98:	60b9      	str	r1, [r7, #8]
10001c9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
10001c9c:	68fb      	ldr	r3, [r7, #12]
10001c9e:	3314      	adds	r3, #20
10001ca0:	461a      	mov	r2, r3
10001ca2:	68bb      	ldr	r3, [r7, #8]
10001ca4:	0e5b      	lsrs	r3, r3, #25
10001ca6:	009b      	lsls	r3, r3, #2
10001ca8:	f003 0304 	and.w	r3, r3, #4
10001cac:	4413      	add	r3, r2
10001cae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
10001cb0:	697b      	ldr	r3, [r7, #20]
10001cb2:	681a      	ldr	r2, [r3, #0]
10001cb4:	68bb      	ldr	r3, [r7, #8]
10001cb6:	0d1b      	lsrs	r3, r3, #20
10001cb8:	f003 031f 	and.w	r3, r3, #31
10001cbc:	2107      	movs	r1, #7
10001cbe:	fa01 f303 	lsl.w	r3, r1, r3
10001cc2:	43db      	mvns	r3, r3
10001cc4:	401a      	ands	r2, r3
10001cc6:	68bb      	ldr	r3, [r7, #8]
10001cc8:	0d1b      	lsrs	r3, r3, #20
10001cca:	f003 031f 	and.w	r3, r3, #31
10001cce:	6879      	ldr	r1, [r7, #4]
10001cd0:	fa01 f303 	lsl.w	r3, r1, r3
10001cd4:	431a      	orrs	r2, r3
10001cd6:	697b      	ldr	r3, [r7, #20]
10001cd8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
10001cda:	bf00      	nop
10001cdc:	371c      	adds	r7, #28
10001cde:	46bd      	mov	sp, r7
10001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
10001ce4:	4770      	bx	lr
	...

10001ce8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
10001ce8:	b480      	push	{r7}
10001cea:	b085      	sub	sp, #20
10001cec:	af00      	add	r7, sp, #0
10001cee:	60f8      	str	r0, [r7, #12]
10001cf0:	60b9      	str	r1, [r7, #8]
10001cf2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
10001cf4:	68fb      	ldr	r3, [r7, #12]
10001cf6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
10001cfa:	68bb      	ldr	r3, [r7, #8]
10001cfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
10001d00:	43db      	mvns	r3, r3
10001d02:	401a      	ands	r2, r3
10001d04:	687b      	ldr	r3, [r7, #4]
10001d06:	f003 0318 	and.w	r3, r3, #24
10001d0a:	4908      	ldr	r1, [pc, #32]	; (10001d2c <LL_ADC_SetChannelSingleDiff+0x44>)
10001d0c:	40d9      	lsrs	r1, r3
10001d0e:	68bb      	ldr	r3, [r7, #8]
10001d10:	400b      	ands	r3, r1
10001d12:	f3c3 0313 	ubfx	r3, r3, #0, #20
10001d16:	431a      	orrs	r2, r3
10001d18:	68fb      	ldr	r3, [r7, #12]
10001d1a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
10001d1e:	bf00      	nop
10001d20:	3714      	adds	r7, #20
10001d22:	46bd      	mov	sp, r7
10001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
10001d28:	4770      	bx	lr
10001d2a:	bf00      	nop
10001d2c:	000fffff 	.word	0x000fffff

10001d30 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
10001d30:	b480      	push	{r7}
10001d32:	b083      	sub	sp, #12
10001d34:	af00      	add	r7, sp, #0
10001d36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
10001d38:	687b      	ldr	r3, [r7, #4]
10001d3a:	689b      	ldr	r3, [r3, #8]
10001d3c:	f003 031f 	and.w	r3, r3, #31
}
10001d40:	4618      	mov	r0, r3
10001d42:	370c      	adds	r7, #12
10001d44:	46bd      	mov	sp, r7
10001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
10001d4a:	4770      	bx	lr

10001d4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
10001d4c:	b480      	push	{r7}
10001d4e:	b083      	sub	sp, #12
10001d50:	af00      	add	r7, sp, #0
10001d52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
10001d54:	687b      	ldr	r3, [r7, #4]
10001d56:	689b      	ldr	r3, [r3, #8]
10001d58:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
10001d5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10001d60:	687a      	ldr	r2, [r7, #4]
10001d62:	6093      	str	r3, [r2, #8]
}
10001d64:	bf00      	nop
10001d66:	370c      	adds	r7, #12
10001d68:	46bd      	mov	sp, r7
10001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
10001d6e:	4770      	bx	lr

10001d70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
10001d70:	b480      	push	{r7}
10001d72:	b083      	sub	sp, #12
10001d74:	af00      	add	r7, sp, #0
10001d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
10001d78:	687b      	ldr	r3, [r7, #4]
10001d7a:	689b      	ldr	r3, [r3, #8]
10001d7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
10001d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
10001d84:	d101      	bne.n	10001d8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
10001d86:	2301      	movs	r3, #1
10001d88:	e000      	b.n	10001d8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
10001d8a:	2300      	movs	r3, #0
}
10001d8c:	4618      	mov	r0, r3
10001d8e:	370c      	adds	r7, #12
10001d90:	46bd      	mov	sp, r7
10001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
10001d96:	4770      	bx	lr

10001d98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
10001d98:	b480      	push	{r7}
10001d9a:	b083      	sub	sp, #12
10001d9c:	af00      	add	r7, sp, #0
10001d9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
10001da0:	687b      	ldr	r3, [r7, #4]
10001da2:	689b      	ldr	r3, [r3, #8]
10001da4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
10001da8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10001dac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
10001db0:	687b      	ldr	r3, [r7, #4]
10001db2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
10001db4:	bf00      	nop
10001db6:	370c      	adds	r7, #12
10001db8:	46bd      	mov	sp, r7
10001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
10001dbe:	4770      	bx	lr

10001dc0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
10001dc0:	b480      	push	{r7}
10001dc2:	b083      	sub	sp, #12
10001dc4:	af00      	add	r7, sp, #0
10001dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
10001dc8:	687b      	ldr	r3, [r7, #4]
10001dca:	689b      	ldr	r3, [r3, #8]
10001dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
10001dd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
10001dd4:	d101      	bne.n	10001dda <LL_ADC_IsInternalRegulatorEnabled+0x1a>
10001dd6:	2301      	movs	r3, #1
10001dd8:	e000      	b.n	10001ddc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
10001dda:	2300      	movs	r3, #0
}
10001ddc:	4618      	mov	r0, r3
10001dde:	370c      	adds	r7, #12
10001de0:	46bd      	mov	sp, r7
10001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
10001de6:	4770      	bx	lr

10001de8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
10001de8:	b480      	push	{r7}
10001dea:	b083      	sub	sp, #12
10001dec:	af00      	add	r7, sp, #0
10001dee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
10001df0:	687b      	ldr	r3, [r7, #4]
10001df2:	689b      	ldr	r3, [r3, #8]
10001df4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
10001df8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10001dfc:	f043 0201 	orr.w	r2, r3, #1
10001e00:	687b      	ldr	r3, [r7, #4]
10001e02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
10001e04:	bf00      	nop
10001e06:	370c      	adds	r7, #12
10001e08:	46bd      	mov	sp, r7
10001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
10001e0e:	4770      	bx	lr

10001e10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
10001e10:	b480      	push	{r7}
10001e12:	b083      	sub	sp, #12
10001e14:	af00      	add	r7, sp, #0
10001e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
10001e18:	687b      	ldr	r3, [r7, #4]
10001e1a:	689b      	ldr	r3, [r3, #8]
10001e1c:	f003 0301 	and.w	r3, r3, #1
10001e20:	2b01      	cmp	r3, #1
10001e22:	d101      	bne.n	10001e28 <LL_ADC_IsEnabled+0x18>
10001e24:	2301      	movs	r3, #1
10001e26:	e000      	b.n	10001e2a <LL_ADC_IsEnabled+0x1a>
10001e28:	2300      	movs	r3, #0
}
10001e2a:	4618      	mov	r0, r3
10001e2c:	370c      	adds	r7, #12
10001e2e:	46bd      	mov	sp, r7
10001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
10001e34:	4770      	bx	lr

10001e36 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
10001e36:	b480      	push	{r7}
10001e38:	b083      	sub	sp, #12
10001e3a:	af00      	add	r7, sp, #0
10001e3c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
10001e3e:	687b      	ldr	r3, [r7, #4]
10001e40:	689b      	ldr	r3, [r3, #8]
10001e42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
10001e46:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10001e4a:	f043 0204 	orr.w	r2, r3, #4
10001e4e:	687b      	ldr	r3, [r7, #4]
10001e50:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
10001e52:	bf00      	nop
10001e54:	370c      	adds	r7, #12
10001e56:	46bd      	mov	sp, r7
10001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
10001e5c:	4770      	bx	lr

10001e5e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
10001e5e:	b480      	push	{r7}
10001e60:	b083      	sub	sp, #12
10001e62:	af00      	add	r7, sp, #0
10001e64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
10001e66:	687b      	ldr	r3, [r7, #4]
10001e68:	689b      	ldr	r3, [r3, #8]
10001e6a:	f003 0304 	and.w	r3, r3, #4
10001e6e:	2b04      	cmp	r3, #4
10001e70:	d101      	bne.n	10001e76 <LL_ADC_REG_IsConversionOngoing+0x18>
10001e72:	2301      	movs	r3, #1
10001e74:	e000      	b.n	10001e78 <LL_ADC_REG_IsConversionOngoing+0x1a>
10001e76:	2300      	movs	r3, #0
}
10001e78:	4618      	mov	r0, r3
10001e7a:	370c      	adds	r7, #12
10001e7c:	46bd      	mov	sp, r7
10001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001e82:	4770      	bx	lr

10001e84 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
10001e84:	b480      	push	{r7}
10001e86:	b083      	sub	sp, #12
10001e88:	af00      	add	r7, sp, #0
10001e8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
10001e8c:	687b      	ldr	r3, [r7, #4]
10001e8e:	689b      	ldr	r3, [r3, #8]
10001e90:	f003 0308 	and.w	r3, r3, #8
10001e94:	2b08      	cmp	r3, #8
10001e96:	d101      	bne.n	10001e9c <LL_ADC_INJ_IsConversionOngoing+0x18>
10001e98:	2301      	movs	r3, #1
10001e9a:	e000      	b.n	10001e9e <LL_ADC_INJ_IsConversionOngoing+0x1a>
10001e9c:	2300      	movs	r3, #0
}
10001e9e:	4618      	mov	r0, r3
10001ea0:	370c      	adds	r7, #12
10001ea2:	46bd      	mov	sp, r7
10001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
10001ea8:	4770      	bx	lr
	...

10001eac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
10001eac:	b590      	push	{r4, r7, lr}
10001eae:	b089      	sub	sp, #36	; 0x24
10001eb0:	af00      	add	r7, sp, #0
10001eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
10001eb4:	2300      	movs	r3, #0
10001eb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
10001eb8:	2300      	movs	r3, #0
10001eba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
10001ebc:	687b      	ldr	r3, [r7, #4]
10001ebe:	2b00      	cmp	r3, #0
10001ec0:	d101      	bne.n	10001ec6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
10001ec2:	2301      	movs	r3, #1
10001ec4:	e13a      	b.n	1000213c <HAL_ADC_Init+0x290>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
10001ec6:	687b      	ldr	r3, [r7, #4]
10001ec8:	68db      	ldr	r3, [r3, #12]
10001eca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
10001ecc:	687b      	ldr	r3, [r7, #4]
10001ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001ed0:	2b00      	cmp	r3, #0
10001ed2:	d109      	bne.n	10001ee8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
10001ed4:	6878      	ldr	r0, [r7, #4]
10001ed6:	f7ff fa75 	bl	100013c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
10001eda:	687b      	ldr	r3, [r7, #4]
10001edc:	2200      	movs	r2, #0
10001ede:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
10001ee0:	687b      	ldr	r3, [r7, #4]
10001ee2:	2200      	movs	r2, #0
10001ee4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
10001ee8:	687b      	ldr	r3, [r7, #4]
10001eea:	681b      	ldr	r3, [r3, #0]
10001eec:	4618      	mov	r0, r3
10001eee:	f7ff ff3f 	bl	10001d70 <LL_ADC_IsDeepPowerDownEnabled>
10001ef2:	4603      	mov	r3, r0
10001ef4:	2b00      	cmp	r3, #0
10001ef6:	d004      	beq.n	10001f02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
10001ef8:	687b      	ldr	r3, [r7, #4]
10001efa:	681b      	ldr	r3, [r3, #0]
10001efc:	4618      	mov	r0, r3
10001efe:	f7ff ff25 	bl	10001d4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
10001f02:	687b      	ldr	r3, [r7, #4]
10001f04:	681b      	ldr	r3, [r3, #0]
10001f06:	4618      	mov	r0, r3
10001f08:	f7ff ff5a 	bl	10001dc0 <LL_ADC_IsInternalRegulatorEnabled>
10001f0c:	4603      	mov	r3, r0
10001f0e:	2b00      	cmp	r3, #0
10001f10:	d114      	bne.n	10001f3c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
10001f12:	687b      	ldr	r3, [r7, #4]
10001f14:	681b      	ldr	r3, [r3, #0]
10001f16:	4618      	mov	r0, r3
10001f18:	f7ff ff3e 	bl	10001d98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
10001f1c:	4b89      	ldr	r3, [pc, #548]	; (10002144 <HAL_ADC_Init+0x298>)
10001f1e:	681b      	ldr	r3, [r3, #0]
10001f20:	099b      	lsrs	r3, r3, #6
10001f22:	4a89      	ldr	r2, [pc, #548]	; (10002148 <HAL_ADC_Init+0x29c>)
10001f24:	fba2 2303 	umull	r2, r3, r2, r3
10001f28:	099b      	lsrs	r3, r3, #6
10001f2a:	3301      	adds	r3, #1
10001f2c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
10001f2e:	e002      	b.n	10001f36 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
10001f30:	68bb      	ldr	r3, [r7, #8]
10001f32:	3b01      	subs	r3, #1
10001f34:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
10001f36:	68bb      	ldr	r3, [r7, #8]
10001f38:	2b00      	cmp	r3, #0
10001f3a:	d1f9      	bne.n	10001f30 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
10001f3c:	687b      	ldr	r3, [r7, #4]
10001f3e:	681b      	ldr	r3, [r3, #0]
10001f40:	4618      	mov	r0, r3
10001f42:	f7ff ff3d 	bl	10001dc0 <LL_ADC_IsInternalRegulatorEnabled>
10001f46:	4603      	mov	r3, r0
10001f48:	2b00      	cmp	r3, #0
10001f4a:	d10d      	bne.n	10001f68 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10001f4c:	687b      	ldr	r3, [r7, #4]
10001f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001f50:	f043 0210 	orr.w	r2, r3, #16
10001f54:	687b      	ldr	r3, [r7, #4]
10001f56:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
10001f58:	687b      	ldr	r3, [r7, #4]
10001f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10001f5c:	f043 0201 	orr.w	r2, r3, #1
10001f60:	687b      	ldr	r3, [r7, #4]
10001f62:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
10001f64:	2301      	movs	r3, #1
10001f66:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
10001f68:	687b      	ldr	r3, [r7, #4]
10001f6a:	681b      	ldr	r3, [r3, #0]
10001f6c:	4618      	mov	r0, r3
10001f6e:	f7ff ff76 	bl	10001e5e <LL_ADC_REG_IsConversionOngoing>
10001f72:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
10001f74:	687b      	ldr	r3, [r7, #4]
10001f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001f78:	f003 0310 	and.w	r3, r3, #16
10001f7c:	2b00      	cmp	r3, #0
10001f7e:	f040 80d4 	bne.w	1000212a <HAL_ADC_Init+0x27e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
10001f82:	697b      	ldr	r3, [r7, #20]
10001f84:	2b00      	cmp	r3, #0
10001f86:	f040 80d0 	bne.w	1000212a <HAL_ADC_Init+0x27e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
10001f8a:	687b      	ldr	r3, [r7, #4]
10001f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001f8e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
10001f92:	f043 0202 	orr.w	r2, r3, #2
10001f96:	687b      	ldr	r3, [r7, #4]
10001f98:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
10001f9a:	687b      	ldr	r3, [r7, #4]
10001f9c:	681b      	ldr	r3, [r3, #0]
10001f9e:	4618      	mov	r0, r3
10001fa0:	f7ff ff36 	bl	10001e10 <LL_ADC_IsEnabled>
10001fa4:	4603      	mov	r3, r0
10001fa6:	2b00      	cmp	r3, #0
10001fa8:	d110      	bne.n	10001fcc <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
10001faa:	4868      	ldr	r0, [pc, #416]	; (1000214c <HAL_ADC_Init+0x2a0>)
10001fac:	f7ff ff30 	bl	10001e10 <LL_ADC_IsEnabled>
10001fb0:	4604      	mov	r4, r0
10001fb2:	4867      	ldr	r0, [pc, #412]	; (10002150 <HAL_ADC_Init+0x2a4>)
10001fb4:	f7ff ff2c 	bl	10001e10 <LL_ADC_IsEnabled>
10001fb8:	4603      	mov	r3, r0
10001fba:	4323      	orrs	r3, r4
10001fbc:	2b00      	cmp	r3, #0
10001fbe:	d105      	bne.n	10001fcc <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
10001fc0:	687b      	ldr	r3, [r7, #4]
10001fc2:	685b      	ldr	r3, [r3, #4]
10001fc4:	4619      	mov	r1, r3
10001fc6:	4863      	ldr	r0, [pc, #396]	; (10002154 <HAL_ADC_Init+0x2a8>)
10001fc8:	f7ff fd78 	bl	10001abc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
10001fcc:	687b      	ldr	r3, [r7, #4]
10001fce:	7d5b      	ldrb	r3, [r3, #21]
10001fd0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
10001fd2:	687b      	ldr	r3, [r7, #4]
10001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
10001fd6:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
10001fd8:	687b      	ldr	r3, [r7, #4]
10001fda:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                     |
10001fdc:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
10001fde:	687b      	ldr	r3, [r7, #4]
10001fe0:	7f1b      	ldrb	r3, [r3, #28]
10001fe2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
10001fe4:	4313      	orrs	r3, r2
10001fe6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
10001fe8:	687b      	ldr	r3, [r7, #4]
10001fea:	7f1b      	ldrb	r3, [r3, #28]
10001fec:	2b01      	cmp	r3, #1
10001fee:	d106      	bne.n	10001ffe <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
10001ff0:	687b      	ldr	r3, [r7, #4]
10001ff2:	6a1b      	ldr	r3, [r3, #32]
10001ff4:	3b01      	subs	r3, #1
10001ff6:	045b      	lsls	r3, r3, #17
10001ff8:	69ba      	ldr	r2, [r7, #24]
10001ffa:	4313      	orrs	r3, r2
10001ffc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
10001ffe:	687b      	ldr	r3, [r7, #4]
10002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002002:	2b00      	cmp	r3, #0
10002004:	d009      	beq.n	1000201a <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
10002006:	687b      	ldr	r3, [r7, #4]
10002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000200a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
1000200e:	687b      	ldr	r3, [r7, #4]
10002010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002012:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
10002014:	69ba      	ldr	r2, [r7, #24]
10002016:	4313      	orrs	r3, r2
10002018:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
1000201a:	687b      	ldr	r3, [r7, #4]
1000201c:	681b      	ldr	r3, [r3, #0]
1000201e:	68da      	ldr	r2, [r3, #12]
10002020:	4b4d      	ldr	r3, [pc, #308]	; (10002158 <HAL_ADC_Init+0x2ac>)
10002022:	4013      	ands	r3, r2
10002024:	687a      	ldr	r2, [r7, #4]
10002026:	6812      	ldr	r2, [r2, #0]
10002028:	69b9      	ldr	r1, [r7, #24]
1000202a:	430b      	orrs	r3, r1
1000202c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
1000202e:	687b      	ldr	r3, [r7, #4]
10002030:	681b      	ldr	r3, [r3, #0]
10002032:	4618      	mov	r0, r3
10002034:	f7ff ff13 	bl	10001e5e <LL_ADC_REG_IsConversionOngoing>
10002038:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
1000203a:	687b      	ldr	r3, [r7, #4]
1000203c:	681b      	ldr	r3, [r3, #0]
1000203e:	4618      	mov	r0, r3
10002040:	f7ff ff20 	bl	10001e84 <LL_ADC_INJ_IsConversionOngoing>
10002044:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
10002046:	693b      	ldr	r3, [r7, #16]
10002048:	2b00      	cmp	r3, #0
1000204a:	d14c      	bne.n	100020e6 <HAL_ADC_Init+0x23a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
1000204c:	68fb      	ldr	r3, [r7, #12]
1000204e:	2b00      	cmp	r3, #0
10002050:	d149      	bne.n	100020e6 <HAL_ADC_Init+0x23a>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
10002052:	687b      	ldr	r3, [r7, #4]
10002054:	7d1b      	ldrb	r3, [r3, #20]
10002056:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
10002058:	687b      	ldr	r3, [r7, #4]
1000205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
1000205c:	4313      	orrs	r3, r2
1000205e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
10002060:	687b      	ldr	r3, [r7, #4]
10002062:	681b      	ldr	r3, [r3, #0]
10002064:	68db      	ldr	r3, [r3, #12]
10002066:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
1000206a:	f023 0303 	bic.w	r3, r3, #3
1000206e:	687a      	ldr	r2, [r7, #4]
10002070:	6812      	ldr	r2, [r2, #0]
10002072:	69b9      	ldr	r1, [r7, #24]
10002074:	430b      	orrs	r3, r1
10002076:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
10002078:	687b      	ldr	r3, [r7, #4]
1000207a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
1000207e:	2b01      	cmp	r3, #1
10002080:	d11b      	bne.n	100020ba <HAL_ADC_Init+0x20e>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
10002082:	687b      	ldr	r3, [r7, #4]
10002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002086:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
10002088:	687b      	ldr	r3, [r7, #4]
1000208a:	681b      	ldr	r3, [r3, #0]
1000208c:	691a      	ldr	r2, [r3, #16]
1000208e:	4b33      	ldr	r3, [pc, #204]	; (1000215c <HAL_ADC_Init+0x2b0>)
10002090:	4013      	ands	r3, r2
10002092:	687a      	ldr	r2, [r7, #4]
10002094:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
10002096:	3a01      	subs	r2, #1
10002098:	0411      	lsls	r1, r2, #16
1000209a:	687a      	ldr	r2, [r7, #4]
1000209c:	6c12      	ldr	r2, [r2, #64]	; 0x40
1000209e:	4311      	orrs	r1, r2
100020a0:	687a      	ldr	r2, [r7, #4]
100020a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
100020a4:	4311      	orrs	r1, r2
100020a6:	687a      	ldr	r2, [r7, #4]
100020a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
100020aa:	430a      	orrs	r2, r1
100020ac:	431a      	orrs	r2, r3
100020ae:	687b      	ldr	r3, [r7, #4]
100020b0:	681b      	ldr	r3, [r3, #0]
100020b2:	f042 0201 	orr.w	r2, r2, #1
100020b6:	611a      	str	r2, [r3, #16]
100020b8:	e007      	b.n	100020ca <HAL_ADC_Init+0x21e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
100020ba:	687b      	ldr	r3, [r7, #4]
100020bc:	681b      	ldr	r3, [r3, #0]
100020be:	691a      	ldr	r2, [r3, #16]
100020c0:	687b      	ldr	r3, [r7, #4]
100020c2:	681b      	ldr	r3, [r3, #0]
100020c4:	f022 0201 	bic.w	r2, r2, #1
100020c8:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
100020ca:	687b      	ldr	r3, [r7, #4]
100020cc:	681b      	ldr	r3, [r3, #0]
100020ce:	691b      	ldr	r3, [r3, #16]
100020d0:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
100020d4:	687b      	ldr	r3, [r7, #4]
100020d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
100020d8:	687b      	ldr	r3, [r7, #4]
100020da:	681b      	ldr	r3, [r3, #0]
100020dc:	430a      	orrs	r2, r1
100020de:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
100020e0:	6878      	ldr	r0, [r7, #4]
100020e2:	f000 fd0b 	bl	10002afc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
100020e6:	687b      	ldr	r3, [r7, #4]
100020e8:	68db      	ldr	r3, [r3, #12]
100020ea:	2b01      	cmp	r3, #1
100020ec:	d10c      	bne.n	10002108 <HAL_ADC_Init+0x25c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
100020ee:	687b      	ldr	r3, [r7, #4]
100020f0:	681b      	ldr	r3, [r3, #0]
100020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100020f4:	f023 010f 	bic.w	r1, r3, #15
100020f8:	687b      	ldr	r3, [r7, #4]
100020fa:	699b      	ldr	r3, [r3, #24]
100020fc:	1e5a      	subs	r2, r3, #1
100020fe:	687b      	ldr	r3, [r7, #4]
10002100:	681b      	ldr	r3, [r3, #0]
10002102:	430a      	orrs	r2, r1
10002104:	631a      	str	r2, [r3, #48]	; 0x30
10002106:	e007      	b.n	10002118 <HAL_ADC_Init+0x26c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
10002108:	687b      	ldr	r3, [r7, #4]
1000210a:	681b      	ldr	r3, [r3, #0]
1000210c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
1000210e:	687b      	ldr	r3, [r7, #4]
10002110:	681b      	ldr	r3, [r3, #0]
10002112:	f022 020f 	bic.w	r2, r2, #15
10002116:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
10002118:	687b      	ldr	r3, [r7, #4]
1000211a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000211c:	f023 0303 	bic.w	r3, r3, #3
10002120:	f043 0201 	orr.w	r2, r3, #1
10002124:	687b      	ldr	r3, [r7, #4]
10002126:	655a      	str	r2, [r3, #84]	; 0x54
10002128:	e007      	b.n	1000213a <HAL_ADC_Init+0x28e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1000212a:	687b      	ldr	r3, [r7, #4]
1000212c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000212e:	f043 0210 	orr.w	r2, r3, #16
10002132:	687b      	ldr	r3, [r7, #4]
10002134:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
10002136:	2301      	movs	r3, #1
10002138:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
1000213a:	7ffb      	ldrb	r3, [r7, #31]
}
1000213c:	4618      	mov	r0, r3
1000213e:	3724      	adds	r7, #36	; 0x24
10002140:	46bd      	mov	sp, r7
10002142:	bd90      	pop	{r4, r7, pc}
10002144:	10020000 	.word	0x10020000
10002148:	053e2d63 	.word	0x053e2d63
1000214c:	48003000 	.word	0x48003000
10002150:	48003100 	.word	0x48003100
10002154:	48003300 	.word	0x48003300
10002158:	fff0c003 	.word	0xfff0c003
1000215c:	fc00f81e 	.word	0xfc00f81e

10002160 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
10002160:	b580      	push	{r7, lr}
10002162:	b086      	sub	sp, #24
10002164:	af00      	add	r7, sp, #0
10002166:	60f8      	str	r0, [r7, #12]
10002168:	60b9      	str	r1, [r7, #8]
1000216a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
1000216c:	4850      	ldr	r0, [pc, #320]	; (100022b0 <HAL_ADC_Start_DMA+0x150>)
1000216e:	f7ff fddf 	bl	10001d30 <LL_ADC_GetMultimode>
10002172:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
10002174:	68fb      	ldr	r3, [r7, #12]
10002176:	681b      	ldr	r3, [r3, #0]
10002178:	4618      	mov	r0, r3
1000217a:	f7ff fe70 	bl	10001e5e <LL_ADC_REG_IsConversionOngoing>
1000217e:	4603      	mov	r3, r0
10002180:	2b00      	cmp	r3, #0
10002182:	f040 808e 	bne.w	100022a2 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
10002186:	68fb      	ldr	r3, [r7, #12]
10002188:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
1000218c:	2b01      	cmp	r3, #1
1000218e:	d101      	bne.n	10002194 <HAL_ADC_Start_DMA+0x34>
10002190:	2302      	movs	r3, #2
10002192:	e089      	b.n	100022a8 <HAL_ADC_Start_DMA+0x148>
10002194:	68fb      	ldr	r3, [r7, #12]
10002196:	2201      	movs	r2, #1
10002198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
1000219c:	693b      	ldr	r3, [r7, #16]
1000219e:	2b00      	cmp	r3, #0
100021a0:	d005      	beq.n	100021ae <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
100021a2:	693b      	ldr	r3, [r7, #16]
100021a4:	2b05      	cmp	r3, #5
100021a6:	d002      	beq.n	100021ae <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
100021a8:	693b      	ldr	r3, [r7, #16]
100021aa:	2b09      	cmp	r3, #9
100021ac:	d172      	bne.n	10002294 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
100021ae:	68f8      	ldr	r0, [r7, #12]
100021b0:	f000 fb94 	bl	100028dc <ADC_Enable>
100021b4:	4603      	mov	r3, r0
100021b6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
100021b8:	7dfb      	ldrb	r3, [r7, #23]
100021ba:	2b00      	cmp	r3, #0
100021bc:	d165      	bne.n	1000228a <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
100021be:	68fb      	ldr	r3, [r7, #12]
100021c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100021c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
100021c6:	f023 0301 	bic.w	r3, r3, #1
100021ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
100021ce:	68fb      	ldr	r3, [r7, #12]
100021d0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
100021d2:	68fb      	ldr	r3, [r7, #12]
100021d4:	681b      	ldr	r3, [r3, #0]
100021d6:	4a37      	ldr	r2, [pc, #220]	; (100022b4 <HAL_ADC_Start_DMA+0x154>)
100021d8:	4293      	cmp	r3, r2
100021da:	d002      	beq.n	100021e2 <HAL_ADC_Start_DMA+0x82>
100021dc:	68fb      	ldr	r3, [r7, #12]
100021de:	681b      	ldr	r3, [r3, #0]
100021e0:	e000      	b.n	100021e4 <HAL_ADC_Start_DMA+0x84>
100021e2:	4b35      	ldr	r3, [pc, #212]	; (100022b8 <HAL_ADC_Start_DMA+0x158>)
100021e4:	68fa      	ldr	r2, [r7, #12]
100021e6:	6812      	ldr	r2, [r2, #0]
100021e8:	4293      	cmp	r3, r2
100021ea:	d002      	beq.n	100021f2 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
100021ec:	693b      	ldr	r3, [r7, #16]
100021ee:	2b00      	cmp	r3, #0
100021f0:	d105      	bne.n	100021fe <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
100021f2:	68fb      	ldr	r3, [r7, #12]
100021f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100021f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
100021fa:	68fb      	ldr	r3, [r7, #12]
100021fc:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
100021fe:	68fb      	ldr	r3, [r7, #12]
10002200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002202:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
10002206:	2b00      	cmp	r3, #0
10002208:	d006      	beq.n	10002218 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
1000220a:	68fb      	ldr	r3, [r7, #12]
1000220c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
1000220e:	f023 0206 	bic.w	r2, r3, #6
10002212:	68fb      	ldr	r3, [r7, #12]
10002214:	659a      	str	r2, [r3, #88]	; 0x58
10002216:	e002      	b.n	1000221e <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
10002218:	68fb      	ldr	r3, [r7, #12]
1000221a:	2200      	movs	r2, #0
1000221c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
1000221e:	68fb      	ldr	r3, [r7, #12]
10002220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10002222:	4a26      	ldr	r2, [pc, #152]	; (100022bc <HAL_ADC_Start_DMA+0x15c>)
10002224:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
10002226:	68fb      	ldr	r3, [r7, #12]
10002228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
1000222a:	4a25      	ldr	r2, [pc, #148]	; (100022c0 <HAL_ADC_Start_DMA+0x160>)
1000222c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
1000222e:	68fb      	ldr	r3, [r7, #12]
10002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10002232:	4a24      	ldr	r2, [pc, #144]	; (100022c4 <HAL_ADC_Start_DMA+0x164>)
10002234:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
10002236:	68fb      	ldr	r3, [r7, #12]
10002238:	681b      	ldr	r3, [r3, #0]
1000223a:	221c      	movs	r2, #28
1000223c:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
1000223e:	68fb      	ldr	r3, [r7, #12]
10002240:	2200      	movs	r2, #0
10002242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
10002246:	68fb      	ldr	r3, [r7, #12]
10002248:	681b      	ldr	r3, [r3, #0]
1000224a:	685a      	ldr	r2, [r3, #4]
1000224c:	68fb      	ldr	r3, [r7, #12]
1000224e:	681b      	ldr	r3, [r3, #0]
10002250:	f042 0210 	orr.w	r2, r2, #16
10002254:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
10002256:	68fb      	ldr	r3, [r7, #12]
10002258:	681a      	ldr	r2, [r3, #0]
1000225a:	68fb      	ldr	r3, [r7, #12]
1000225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000225e:	4619      	mov	r1, r3
10002260:	4610      	mov	r0, r2
10002262:	f7ff fd02 	bl	10001c6a <LL_ADC_REG_SetDataTransferMode>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
10002266:	68fb      	ldr	r3, [r7, #12]
10002268:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
1000226a:	68fb      	ldr	r3, [r7, #12]
1000226c:	681b      	ldr	r3, [r3, #0]
1000226e:	3340      	adds	r3, #64	; 0x40
10002270:	4619      	mov	r1, r3
10002272:	68ba      	ldr	r2, [r7, #8]
10002274:	687b      	ldr	r3, [r7, #4]
10002276:	f000 ffd3 	bl	10003220 <HAL_DMA_Start_IT>
1000227a:	4603      	mov	r3, r0
1000227c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
1000227e:	68fb      	ldr	r3, [r7, #12]
10002280:	681b      	ldr	r3, [r3, #0]
10002282:	4618      	mov	r0, r3
10002284:	f7ff fdd7 	bl	10001e36 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
10002288:	e00d      	b.n	100022a6 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        __HAL_UNLOCK(hadc);
1000228a:	68fb      	ldr	r3, [r7, #12]
1000228c:	2200      	movs	r2, #0
1000228e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
10002292:	e008      	b.n	100022a6 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
10002294:	2301      	movs	r3, #1
10002296:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hadc);
10002298:	68fb      	ldr	r3, [r7, #12]
1000229a:	2200      	movs	r2, #0
1000229c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
100022a0:	e001      	b.n	100022a6 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
100022a2:	2302      	movs	r3, #2
100022a4:	75fb      	strb	r3, [r7, #23]
  }

  return tmp_hal_status;
100022a6:	7dfb      	ldrb	r3, [r7, #23]
}
100022a8:	4618      	mov	r0, r3
100022aa:	3718      	adds	r7, #24
100022ac:	46bd      	mov	sp, r7
100022ae:	bd80      	pop	{r7, pc}
100022b0:	48003300 	.word	0x48003300
100022b4:	48003100 	.word	0x48003100
100022b8:	48003000 	.word	0x48003000
100022bc:	100029d5 	.word	0x100029d5
100022c0:	10002aad 	.word	0x10002aad
100022c4:	10002ac9 	.word	0x10002ac9

100022c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
100022c8:	b480      	push	{r7}
100022ca:	b083      	sub	sp, #12
100022cc:	af00      	add	r7, sp, #0
100022ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
100022d0:	bf00      	nop
100022d2:	370c      	adds	r7, #12
100022d4:	46bd      	mov	sp, r7
100022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
100022da:	4770      	bx	lr

100022dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
100022dc:	b590      	push	{r4, r7, lr}
100022de:	b0a1      	sub	sp, #132	; 0x84
100022e0:	af00      	add	r7, sp, #0
100022e2:	6078      	str	r0, [r7, #4]
100022e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
100022e6:	2300      	movs	r3, #0
100022e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
100022ec:	2300      	movs	r3, #0
100022ee:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((pConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (pConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
100022f0:	683b      	ldr	r3, [r7, #0]
100022f2:	68db      	ldr	r3, [r3, #12]
100022f4:	4a9a      	ldr	r2, [pc, #616]	; (10002560 <HAL_ADC_ConfigChannel+0x284>)
100022f6:	4293      	cmp	r3, r2
      assert_param(IS_ADC2_DIFF_CHANNEL(pConfig->Channel));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
100022f8:	687b      	ldr	r3, [r7, #4]
100022fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
100022fe:	2b01      	cmp	r3, #1
10002300:	d101      	bne.n	10002306 <HAL_ADC_ConfigChannel+0x2a>
10002302:	2302      	movs	r3, #2
10002304:	e2d4      	b.n	100028b0 <HAL_ADC_ConfigChannel+0x5d4>
10002306:	687b      	ldr	r3, [r7, #4]
10002308:	2201      	movs	r2, #1
1000230a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
1000230e:	687b      	ldr	r3, [r7, #4]
10002310:	681b      	ldr	r3, [r3, #0]
10002312:	4618      	mov	r0, r3
10002314:	f7ff fda3 	bl	10001e5e <LL_ADC_REG_IsConversionOngoing>
10002318:	4603      	mov	r3, r0
1000231a:	2b00      	cmp	r3, #0
1000231c:	f040 82b9 	bne.w	10002892 <HAL_ADC_ConfigChannel+0x5b6>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
10002320:	683b      	ldr	r3, [r7, #0]
10002322:	681b      	ldr	r3, [r3, #0]
10002324:	f3c3 0313 	ubfx	r3, r3, #0, #20
10002328:	2b00      	cmp	r3, #0
1000232a:	d108      	bne.n	1000233e <HAL_ADC_ConfigChannel+0x62>
1000232c:	683b      	ldr	r3, [r7, #0]
1000232e:	681b      	ldr	r3, [r3, #0]
10002330:	0e9b      	lsrs	r3, r3, #26
10002332:	f003 031f 	and.w	r3, r3, #31
10002336:	2201      	movs	r2, #1
10002338:	fa02 f303 	lsl.w	r3, r2, r3
1000233c:	e016      	b.n	1000236c <HAL_ADC_ConfigChannel+0x90>
1000233e:	683b      	ldr	r3, [r7, #0]
10002340:	681b      	ldr	r3, [r3, #0]
10002342:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
10002344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
10002346:	fa93 f3a3 	rbit	r3, r3
1000234a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
1000234c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
1000234e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
10002350:	6ebb      	ldr	r3, [r7, #104]	; 0x68
10002352:	2b00      	cmp	r3, #0
10002354:	d101      	bne.n	1000235a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
10002356:	2320      	movs	r3, #32
10002358:	e003      	b.n	10002362 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
1000235a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
1000235c:	fab3 f383 	clz	r3, r3
10002360:	b2db      	uxtb	r3, r3
10002362:	f003 031f 	and.w	r3, r3, #31
10002366:	2201      	movs	r2, #1
10002368:	fa02 f303 	lsl.w	r3, r2, r3
1000236c:	687a      	ldr	r2, [r7, #4]
1000236e:	6812      	ldr	r2, [r2, #0]
10002370:	69d1      	ldr	r1, [r2, #28]
10002372:	687a      	ldr	r2, [r7, #4]
10002374:	6812      	ldr	r2, [r2, #0]
10002376:	430b      	orrs	r3, r1
10002378:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
1000237a:	687b      	ldr	r3, [r7, #4]
1000237c:	6818      	ldr	r0, [r3, #0]
1000237e:	683b      	ldr	r3, [r7, #0]
10002380:	6859      	ldr	r1, [r3, #4]
10002382:	683b      	ldr	r3, [r7, #0]
10002384:	681b      	ldr	r3, [r3, #0]
10002386:	461a      	mov	r2, r3
10002388:	f7ff fc43 	bl	10001c12 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
1000238c:	687b      	ldr	r3, [r7, #4]
1000238e:	681b      	ldr	r3, [r3, #0]
10002390:	4618      	mov	r0, r3
10002392:	f7ff fd64 	bl	10001e5e <LL_ADC_REG_IsConversionOngoing>
10002396:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
10002398:	687b      	ldr	r3, [r7, #4]
1000239a:	681b      	ldr	r3, [r3, #0]
1000239c:	4618      	mov	r0, r3
1000239e:	f7ff fd71 	bl	10001e84 <LL_ADC_INJ_IsConversionOngoing>
100023a2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
100023a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
100023a6:	2b00      	cmp	r3, #0
100023a8:	f040 80a0 	bne.w	100024ec <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
100023ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
100023ae:	2b00      	cmp	r3, #0
100023b0:	f040 809c 	bne.w	100024ec <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
100023b4:	687b      	ldr	r3, [r7, #4]
100023b6:	6818      	ldr	r0, [r3, #0]
100023b8:	683b      	ldr	r3, [r7, #0]
100023ba:	6819      	ldr	r1, [r3, #0]
100023bc:	683b      	ldr	r3, [r7, #0]
100023be:	689b      	ldr	r3, [r3, #8]
100023c0:	461a      	mov	r2, r3
100023c2:	f7ff fc65 	bl	10001c90 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
100023c6:	687b      	ldr	r3, [r7, #4]
100023c8:	681b      	ldr	r3, [r3, #0]
100023ca:	68db      	ldr	r3, [r3, #12]
100023cc:	f003 0310 	and.w	r3, r3, #16
100023d0:	2b00      	cmp	r3, #0
100023d2:	d10b      	bne.n	100023ec <HAL_ADC_ConfigChannel+0x110>
100023d4:	683b      	ldr	r3, [r7, #0]
100023d6:	695a      	ldr	r2, [r3, #20]
100023d8:	687b      	ldr	r3, [r7, #4]
100023da:	681b      	ldr	r3, [r3, #0]
100023dc:	68db      	ldr	r3, [r3, #12]
100023de:	089b      	lsrs	r3, r3, #2
100023e0:	f003 0307 	and.w	r3, r3, #7
100023e4:	005b      	lsls	r3, r3, #1
100023e6:	fa02 f303 	lsl.w	r3, r2, r3
100023ea:	e00a      	b.n	10002402 <HAL_ADC_ConfigChannel+0x126>
100023ec:	683b      	ldr	r3, [r7, #0]
100023ee:	695a      	ldr	r2, [r3, #20]
100023f0:	687b      	ldr	r3, [r7, #4]
100023f2:	681b      	ldr	r3, [r3, #0]
100023f4:	68db      	ldr	r3, [r3, #12]
100023f6:	089b      	lsrs	r3, r3, #2
100023f8:	f003 0304 	and.w	r3, r3, #4
100023fc:	005b      	lsls	r3, r3, #1
100023fe:	fa02 f303 	lsl.w	r3, r2, r3
10002402:	673b      	str	r3, [r7, #112]	; 0x70

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
10002404:	683b      	ldr	r3, [r7, #0]
10002406:	691b      	ldr	r3, [r3, #16]
10002408:	2b04      	cmp	r3, #4
1000240a:	d027      	beq.n	1000245c <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
1000240c:	687b      	ldr	r3, [r7, #4]
1000240e:	6818      	ldr	r0, [r3, #0]
10002410:	683b      	ldr	r3, [r7, #0]
10002412:	6919      	ldr	r1, [r3, #16]
10002414:	683b      	ldr	r3, [r7, #0]
10002416:	681a      	ldr	r2, [r3, #0]
10002418:	6f3b      	ldr	r3, [r7, #112]	; 0x70
1000241a:	f7ff fb93 	bl	10001b44 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber, (pConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
1000241e:	687b      	ldr	r3, [r7, #4]
10002420:	6818      	ldr	r0, [r3, #0]
10002422:	683b      	ldr	r3, [r7, #0]
10002424:	6919      	ldr	r1, [r3, #16]
10002426:	683b      	ldr	r3, [r7, #0]
10002428:	7e5b      	ldrb	r3, [r3, #25]
1000242a:	2b01      	cmp	r3, #1
1000242c:	d102      	bne.n	10002434 <HAL_ADC_ConfigChannel+0x158>
1000242e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
10002432:	e000      	b.n	10002436 <HAL_ADC_ConfigChannel+0x15a>
10002434:	2300      	movs	r3, #0
10002436:	461a      	mov	r2, r3
10002438:	f7ff fbbd 	bl	10001bb6 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, pConfig->OffsetNumber, (pConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
1000243c:	687b      	ldr	r3, [r7, #4]
1000243e:	6818      	ldr	r0, [r3, #0]
10002440:	683b      	ldr	r3, [r7, #0]
10002442:	6919      	ldr	r1, [r3, #16]
10002444:	683b      	ldr	r3, [r7, #0]
10002446:	7e1b      	ldrb	r3, [r3, #24]
10002448:	2b01      	cmp	r3, #1
1000244a:	d102      	bne.n	10002452 <HAL_ADC_ConfigChannel+0x176>
1000244c:	f44f 6300 	mov.w	r3, #2048	; 0x800
10002450:	e000      	b.n	10002454 <HAL_ADC_ConfigChannel+0x178>
10002452:	2300      	movs	r3, #0
10002454:	461a      	mov	r2, r3
10002456:	f7ff fb95 	bl	10001b84 <LL_ADC_SetDataRightShift>
1000245a:	e047      	b.n	100024ec <HAL_ADC_ConfigChannel+0x210>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
1000245c:	687b      	ldr	r3, [r7, #4]
1000245e:	681b      	ldr	r3, [r3, #0]
10002460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
10002462:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
10002466:	683b      	ldr	r3, [r7, #0]
10002468:	681b      	ldr	r3, [r3, #0]
1000246a:	069b      	lsls	r3, r3, #26
1000246c:	429a      	cmp	r2, r3
1000246e:	d107      	bne.n	10002480 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
10002470:	687b      	ldr	r3, [r7, #4]
10002472:	681b      	ldr	r3, [r3, #0]
10002474:	6e1a      	ldr	r2, [r3, #96]	; 0x60
10002476:	687b      	ldr	r3, [r7, #4]
10002478:	681b      	ldr	r3, [r3, #0]
1000247a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
1000247e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
10002480:	687b      	ldr	r3, [r7, #4]
10002482:	681b      	ldr	r3, [r3, #0]
10002484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
10002486:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
1000248a:	683b      	ldr	r3, [r7, #0]
1000248c:	681b      	ldr	r3, [r3, #0]
1000248e:	069b      	lsls	r3, r3, #26
10002490:	429a      	cmp	r2, r3
10002492:	d107      	bne.n	100024a4 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
10002494:	687b      	ldr	r3, [r7, #4]
10002496:	681b      	ldr	r3, [r3, #0]
10002498:	6e5a      	ldr	r2, [r3, #100]	; 0x64
1000249a:	687b      	ldr	r3, [r7, #4]
1000249c:	681b      	ldr	r3, [r3, #0]
1000249e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
100024a2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
100024a4:	687b      	ldr	r3, [r7, #4]
100024a6:	681b      	ldr	r3, [r3, #0]
100024a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
100024aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
100024ae:	683b      	ldr	r3, [r7, #0]
100024b0:	681b      	ldr	r3, [r3, #0]
100024b2:	069b      	lsls	r3, r3, #26
100024b4:	429a      	cmp	r2, r3
100024b6:	d107      	bne.n	100024c8 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
100024b8:	687b      	ldr	r3, [r7, #4]
100024ba:	681b      	ldr	r3, [r3, #0]
100024bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
100024be:	687b      	ldr	r3, [r7, #4]
100024c0:	681b      	ldr	r3, [r3, #0]
100024c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
100024c6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
100024c8:	687b      	ldr	r3, [r7, #4]
100024ca:	681b      	ldr	r3, [r3, #0]
100024cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
100024ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
100024d2:	683b      	ldr	r3, [r7, #0]
100024d4:	681b      	ldr	r3, [r3, #0]
100024d6:	069b      	lsls	r3, r3, #26
100024d8:	429a      	cmp	r2, r3
100024da:	d107      	bne.n	100024ec <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
100024dc:	687b      	ldr	r3, [r7, #4]
100024de:	681b      	ldr	r3, [r3, #0]
100024e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
100024e2:	687b      	ldr	r3, [r7, #4]
100024e4:	681b      	ldr	r3, [r3, #0]
100024e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
100024ea:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor/VddCore        */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
100024ec:	687b      	ldr	r3, [r7, #4]
100024ee:	681b      	ldr	r3, [r3, #0]
100024f0:	4618      	mov	r0, r3
100024f2:	f7ff fc8d 	bl	10001e10 <LL_ADC_IsEnabled>
100024f6:	4603      	mov	r3, r0
100024f8:	2b00      	cmp	r3, #0
100024fa:	f040 81d3 	bne.w	100028a4 <HAL_ADC_ConfigChannel+0x5c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
100024fe:	687b      	ldr	r3, [r7, #4]
10002500:	6818      	ldr	r0, [r3, #0]
10002502:	683b      	ldr	r3, [r7, #0]
10002504:	6819      	ldr	r1, [r3, #0]
10002506:	683b      	ldr	r3, [r7, #0]
10002508:	68db      	ldr	r3, [r3, #12]
1000250a:	461a      	mov	r2, r3
1000250c:	f7ff fbec 	bl	10001ce8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
10002510:	683b      	ldr	r3, [r7, #0]
10002512:	68db      	ldr	r3, [r3, #12]
10002514:	4a12      	ldr	r2, [pc, #72]	; (10002560 <HAL_ADC_ConfigChannel+0x284>)
10002516:	4293      	cmp	r3, r2
10002518:	f040 8130 	bne.w	1000277c <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
1000251c:	687b      	ldr	r3, [r7, #4]
1000251e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) + 1UL) & 0x1FUL)),
10002520:	683b      	ldr	r3, [r7, #0]
10002522:	681b      	ldr	r3, [r3, #0]
10002524:	f3c3 0313 	ubfx	r3, r3, #0, #20
10002528:	2b00      	cmp	r3, #0
1000252a:	d10b      	bne.n	10002544 <HAL_ADC_ConfigChannel+0x268>
1000252c:	683b      	ldr	r3, [r7, #0]
1000252e:	681b      	ldr	r3, [r3, #0]
10002530:	0e9b      	lsrs	r3, r3, #26
10002532:	3301      	adds	r3, #1
10002534:	f003 031f 	and.w	r3, r3, #31
10002538:	2b09      	cmp	r3, #9
1000253a:	bf94      	ite	ls
1000253c:	2301      	movls	r3, #1
1000253e:	2300      	movhi	r3, #0
10002540:	b2db      	uxtb	r3, r3
10002542:	e01b      	b.n	1000257c <HAL_ADC_ConfigChannel+0x2a0>
10002544:	683b      	ldr	r3, [r7, #0]
10002546:	681b      	ldr	r3, [r3, #0]
10002548:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
1000254a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
1000254c:	fa93 f3a3 	rbit	r3, r3
10002550:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
10002552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10002554:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
10002556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
10002558:	2b00      	cmp	r3, #0
1000255a:	d103      	bne.n	10002564 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
1000255c:	2320      	movs	r3, #32
1000255e:	e005      	b.n	1000256c <HAL_ADC_ConfigChannel+0x290>
10002560:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
10002564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
10002566:	fab3 f383 	clz	r3, r3
1000256a:	b2db      	uxtb	r3, r3
1000256c:	3301      	adds	r3, #1
1000256e:	f003 031f 	and.w	r3, r3, #31
10002572:	2b09      	cmp	r3, #9
10002574:	bf94      	ite	ls
10002576:	2301      	movls	r3, #1
10002578:	2300      	movhi	r3, #0
1000257a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
1000257c:	2b00      	cmp	r3, #0
1000257e:	d079      	beq.n	10002674 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) + 1UL) & 0x1FUL)),
10002580:	683b      	ldr	r3, [r7, #0]
10002582:	681b      	ldr	r3, [r3, #0]
10002584:	f3c3 0313 	ubfx	r3, r3, #0, #20
10002588:	2b00      	cmp	r3, #0
1000258a:	d107      	bne.n	1000259c <HAL_ADC_ConfigChannel+0x2c0>
1000258c:	683b      	ldr	r3, [r7, #0]
1000258e:	681b      	ldr	r3, [r3, #0]
10002590:	0e9b      	lsrs	r3, r3, #26
10002592:	3301      	adds	r3, #1
10002594:	069b      	lsls	r3, r3, #26
10002596:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
1000259a:	e015      	b.n	100025c8 <HAL_ADC_ConfigChannel+0x2ec>
1000259c:	683b      	ldr	r3, [r7, #0]
1000259e:	681b      	ldr	r3, [r3, #0]
100025a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
100025a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
100025a4:	fa93 f3a3 	rbit	r3, r3
100025a8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
100025aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
100025ac:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
100025ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
100025b0:	2b00      	cmp	r3, #0
100025b2:	d101      	bne.n	100025b8 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
100025b4:	2320      	movs	r3, #32
100025b6:	e003      	b.n	100025c0 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
100025b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
100025ba:	fab3 f383 	clz	r3, r3
100025be:	b2db      	uxtb	r3, r3
100025c0:	3301      	adds	r3, #1
100025c2:	069b      	lsls	r3, r3, #26
100025c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
100025c8:	683b      	ldr	r3, [r7, #0]
100025ca:	681b      	ldr	r3, [r3, #0]
100025cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
100025d0:	2b00      	cmp	r3, #0
100025d2:	d109      	bne.n	100025e8 <HAL_ADC_ConfigChannel+0x30c>
100025d4:	683b      	ldr	r3, [r7, #0]
100025d6:	681b      	ldr	r3, [r3, #0]
100025d8:	0e9b      	lsrs	r3, r3, #26
100025da:	3301      	adds	r3, #1
100025dc:	f003 031f 	and.w	r3, r3, #31
100025e0:	2101      	movs	r1, #1
100025e2:	fa01 f303 	lsl.w	r3, r1, r3
100025e6:	e017      	b.n	10002618 <HAL_ADC_ConfigChannel+0x33c>
100025e8:	683b      	ldr	r3, [r7, #0]
100025ea:	681b      	ldr	r3, [r3, #0]
100025ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
100025ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
100025f0:	fa93 f3a3 	rbit	r3, r3
100025f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
100025f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
100025f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
100025fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
100025fc:	2b00      	cmp	r3, #0
100025fe:	d101      	bne.n	10002604 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
10002600:	2320      	movs	r3, #32
10002602:	e003      	b.n	1000260c <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
10002604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10002606:	fab3 f383 	clz	r3, r3
1000260a:	b2db      	uxtb	r3, r3
1000260c:	3301      	adds	r3, #1
1000260e:	f003 031f 	and.w	r3, r3, #31
10002612:	2101      	movs	r1, #1
10002614:	fa01 f303 	lsl.w	r3, r1, r3
10002618:	ea42 0103 	orr.w	r1, r2, r3
1000261c:	683b      	ldr	r3, [r7, #0]
1000261e:	681b      	ldr	r3, [r3, #0]
10002620:	f3c3 0313 	ubfx	r3, r3, #0, #20
10002624:	2b00      	cmp	r3, #0
10002626:	d10a      	bne.n	1000263e <HAL_ADC_ConfigChannel+0x362>
10002628:	683b      	ldr	r3, [r7, #0]
1000262a:	681b      	ldr	r3, [r3, #0]
1000262c:	0e9b      	lsrs	r3, r3, #26
1000262e:	3301      	adds	r3, #1
10002630:	f003 021f 	and.w	r2, r3, #31
10002634:	4613      	mov	r3, r2
10002636:	005b      	lsls	r3, r3, #1
10002638:	4413      	add	r3, r2
1000263a:	051b      	lsls	r3, r3, #20
1000263c:	e018      	b.n	10002670 <HAL_ADC_ConfigChannel+0x394>
1000263e:	683b      	ldr	r3, [r7, #0]
10002640:	681b      	ldr	r3, [r3, #0]
10002642:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
10002644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10002646:	fa93 f3a3 	rbit	r3, r3
1000264a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
1000264c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000264e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
10002650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10002652:	2b00      	cmp	r3, #0
10002654:	d101      	bne.n	1000265a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
10002656:	2320      	movs	r3, #32
10002658:	e003      	b.n	10002662 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
1000265a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000265c:	fab3 f383 	clz	r3, r3
10002660:	b2db      	uxtb	r3, r3
10002662:	3301      	adds	r3, #1
10002664:	f003 021f 	and.w	r2, r3, #31
10002668:	4613      	mov	r3, r2
1000266a:	005b      	lsls	r3, r3, #1
1000266c:	4413      	add	r3, r2
1000266e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
10002670:	430b      	orrs	r3, r1
10002672:	e07e      	b.n	10002772 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) + 1UL) & 0x1FUL)),
10002674:	683b      	ldr	r3, [r7, #0]
10002676:	681b      	ldr	r3, [r3, #0]
10002678:	f3c3 0313 	ubfx	r3, r3, #0, #20
1000267c:	2b00      	cmp	r3, #0
1000267e:	d107      	bne.n	10002690 <HAL_ADC_ConfigChannel+0x3b4>
10002680:	683b      	ldr	r3, [r7, #0]
10002682:	681b      	ldr	r3, [r3, #0]
10002684:	0e9b      	lsrs	r3, r3, #26
10002686:	3301      	adds	r3, #1
10002688:	069b      	lsls	r3, r3, #26
1000268a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
1000268e:	e015      	b.n	100026bc <HAL_ADC_ConfigChannel+0x3e0>
10002690:	683b      	ldr	r3, [r7, #0]
10002692:	681b      	ldr	r3, [r3, #0]
10002694:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
10002696:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002698:	fa93 f3a3 	rbit	r3, r3
1000269c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
1000269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100026a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
100026a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100026a4:	2b00      	cmp	r3, #0
100026a6:	d101      	bne.n	100026ac <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
100026a8:	2320      	movs	r3, #32
100026aa:	e003      	b.n	100026b4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
100026ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100026ae:	fab3 f383 	clz	r3, r3
100026b2:	b2db      	uxtb	r3, r3
100026b4:	3301      	adds	r3, #1
100026b6:	069b      	lsls	r3, r3, #26
100026b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
100026bc:	683b      	ldr	r3, [r7, #0]
100026be:	681b      	ldr	r3, [r3, #0]
100026c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
100026c4:	2b00      	cmp	r3, #0
100026c6:	d109      	bne.n	100026dc <HAL_ADC_ConfigChannel+0x400>
100026c8:	683b      	ldr	r3, [r7, #0]
100026ca:	681b      	ldr	r3, [r3, #0]
100026cc:	0e9b      	lsrs	r3, r3, #26
100026ce:	3301      	adds	r3, #1
100026d0:	f003 031f 	and.w	r3, r3, #31
100026d4:	2101      	movs	r1, #1
100026d6:	fa01 f303 	lsl.w	r3, r1, r3
100026da:	e017      	b.n	1000270c <HAL_ADC_ConfigChannel+0x430>
100026dc:	683b      	ldr	r3, [r7, #0]
100026de:	681b      	ldr	r3, [r3, #0]
100026e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
100026e2:	69fb      	ldr	r3, [r7, #28]
100026e4:	fa93 f3a3 	rbit	r3, r3
100026e8:	61bb      	str	r3, [r7, #24]
  return result;
100026ea:	69bb      	ldr	r3, [r7, #24]
100026ec:	623b      	str	r3, [r7, #32]
  if (value == 0U)
100026ee:	6a3b      	ldr	r3, [r7, #32]
100026f0:	2b00      	cmp	r3, #0
100026f2:	d101      	bne.n	100026f8 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
100026f4:	2320      	movs	r3, #32
100026f6:	e003      	b.n	10002700 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
100026f8:	6a3b      	ldr	r3, [r7, #32]
100026fa:	fab3 f383 	clz	r3, r3
100026fe:	b2db      	uxtb	r3, r3
10002700:	3301      	adds	r3, #1
10002702:	f003 031f 	and.w	r3, r3, #31
10002706:	2101      	movs	r1, #1
10002708:	fa01 f303 	lsl.w	r3, r1, r3
1000270c:	ea42 0103 	orr.w	r1, r2, r3
10002710:	683b      	ldr	r3, [r7, #0]
10002712:	681b      	ldr	r3, [r3, #0]
10002714:	f3c3 0313 	ubfx	r3, r3, #0, #20
10002718:	2b00      	cmp	r3, #0
1000271a:	d10d      	bne.n	10002738 <HAL_ADC_ConfigChannel+0x45c>
1000271c:	683b      	ldr	r3, [r7, #0]
1000271e:	681b      	ldr	r3, [r3, #0]
10002720:	0e9b      	lsrs	r3, r3, #26
10002722:	3301      	adds	r3, #1
10002724:	f003 021f 	and.w	r2, r3, #31
10002728:	4613      	mov	r3, r2
1000272a:	005b      	lsls	r3, r3, #1
1000272c:	4413      	add	r3, r2
1000272e:	3b1e      	subs	r3, #30
10002730:	051b      	lsls	r3, r3, #20
10002732:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
10002736:	e01b      	b.n	10002770 <HAL_ADC_ConfigChannel+0x494>
10002738:	683b      	ldr	r3, [r7, #0]
1000273a:	681b      	ldr	r3, [r3, #0]
1000273c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
1000273e:	693b      	ldr	r3, [r7, #16]
10002740:	fa93 f3a3 	rbit	r3, r3
10002744:	60fb      	str	r3, [r7, #12]
  return result;
10002746:	68fb      	ldr	r3, [r7, #12]
10002748:	617b      	str	r3, [r7, #20]
  if (value == 0U)
1000274a:	697b      	ldr	r3, [r7, #20]
1000274c:	2b00      	cmp	r3, #0
1000274e:	d101      	bne.n	10002754 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
10002750:	2320      	movs	r3, #32
10002752:	e003      	b.n	1000275c <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
10002754:	697b      	ldr	r3, [r7, #20]
10002756:	fab3 f383 	clz	r3, r3
1000275a:	b2db      	uxtb	r3, r3
1000275c:	3301      	adds	r3, #1
1000275e:	f003 021f 	and.w	r2, r3, #31
10002762:	4613      	mov	r3, r2
10002764:	005b      	lsls	r3, r3, #1
10002766:	4413      	add	r3, r2
10002768:	3b1e      	subs	r3, #30
1000276a:	051b      	lsls	r3, r3, #20
1000276c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
10002770:	430b      	orrs	r3, r1
10002772:	683a      	ldr	r2, [r7, #0]
10002774:	6892      	ldr	r2, [r2, #8]
10002776:	4619      	mov	r1, r3
10002778:	f7ff fa8a 	bl	10001c90 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
1000277c:	683b      	ldr	r3, [r7, #0]
1000277e:	681b      	ldr	r3, [r3, #0]
10002780:	2b00      	cmp	r3, #0
10002782:	f280 808f 	bge.w	100028a4 <HAL_ADC_ConfigChannel+0x5c8>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
10002786:	484c      	ldr	r0, [pc, #304]	; (100028b8 <HAL_ADC_ConfigChannel+0x5dc>)
10002788:	f7ff f9ce 	bl	10001b28 <LL_ADC_GetCommonPathInternalCh>
1000278c:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
1000278e:	484b      	ldr	r0, [pc, #300]	; (100028bc <HAL_ADC_ConfigChannel+0x5e0>)
10002790:	f7ff fb3e 	bl	10001e10 <LL_ADC_IsEnabled>
10002794:	4604      	mov	r4, r0
10002796:	484a      	ldr	r0, [pc, #296]	; (100028c0 <HAL_ADC_ConfigChannel+0x5e4>)
10002798:	f7ff fb3a 	bl	10001e10 <LL_ADC_IsEnabled>
1000279c:	4603      	mov	r3, r0
1000279e:	4323      	orrs	r3, r4
100027a0:	2b00      	cmp	r3, #0
100027a2:	d16c      	bne.n	1000287e <HAL_ADC_ConfigChannel+0x5a2>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
100027a4:	683b      	ldr	r3, [r7, #0]
100027a6:	681b      	ldr	r3, [r3, #0]
100027a8:	4a46      	ldr	r2, [pc, #280]	; (100028c4 <HAL_ADC_ConfigChannel+0x5e8>)
100027aa:	4293      	cmp	r3, r2
100027ac:	d122      	bne.n	100027f4 <HAL_ADC_ConfigChannel+0x518>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
100027ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
100027b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
100027b4:	2b00      	cmp	r3, #0
100027b6:	d11d      	bne.n	100027f4 <HAL_ADC_ConfigChannel+0x518>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
100027b8:	687b      	ldr	r3, [r7, #4]
100027ba:	681b      	ldr	r3, [r3, #0]
100027bc:	4a40      	ldr	r2, [pc, #256]	; (100028c0 <HAL_ADC_ConfigChannel+0x5e4>)
100027be:	4293      	cmp	r3, r2
100027c0:	d170      	bne.n	100028a4 <HAL_ADC_ConfigChannel+0x5c8>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
100027c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
100027c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
100027c8:	4619      	mov	r1, r3
100027ca:	483b      	ldr	r0, [pc, #236]	; (100028b8 <HAL_ADC_ConfigChannel+0x5dc>)
100027cc:	f7ff f98a 	bl	10001ae4 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
100027d0:	4b3d      	ldr	r3, [pc, #244]	; (100028c8 <HAL_ADC_ConfigChannel+0x5ec>)
100027d2:	681b      	ldr	r3, [r3, #0]
100027d4:	099b      	lsrs	r3, r3, #6
100027d6:	4a3d      	ldr	r2, [pc, #244]	; (100028cc <HAL_ADC_ConfigChannel+0x5f0>)
100027d8:	fba2 2303 	umull	r2, r3, r2, r3
100027dc:	099b      	lsrs	r3, r3, #6
100027de:	3301      	adds	r3, #1
100027e0:	005b      	lsls	r3, r3, #1
100027e2:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
100027e4:	e002      	b.n	100027ec <HAL_ADC_ConfigChannel+0x510>
              {
                wait_loop_index--;
100027e6:	68bb      	ldr	r3, [r7, #8]
100027e8:	3b01      	subs	r3, #1
100027ea:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
100027ec:	68bb      	ldr	r3, [r7, #8]
100027ee:	2b00      	cmp	r3, #0
100027f0:	d1f9      	bne.n	100027e6 <HAL_ADC_ConfigChannel+0x50a>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
100027f2:	e057      	b.n	100028a4 <HAL_ADC_ConfigChannel+0x5c8>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
100027f4:	683b      	ldr	r3, [r7, #0]
100027f6:	681b      	ldr	r3, [r3, #0]
100027f8:	4a35      	ldr	r2, [pc, #212]	; (100028d0 <HAL_ADC_ConfigChannel+0x5f4>)
100027fa:	4293      	cmp	r3, r2
100027fc:	d111      	bne.n	10002822 <HAL_ADC_ConfigChannel+0x546>
100027fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10002800:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
10002804:	2b00      	cmp	r3, #0
10002806:	d10c      	bne.n	10002822 <HAL_ADC_ConfigChannel+0x546>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
10002808:	687b      	ldr	r3, [r7, #4]
1000280a:	681b      	ldr	r3, [r3, #0]
1000280c:	4a2c      	ldr	r2, [pc, #176]	; (100028c0 <HAL_ADC_ConfigChannel+0x5e4>)
1000280e:	4293      	cmp	r3, r2
10002810:	d148      	bne.n	100028a4 <HAL_ADC_ConfigChannel+0x5c8>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
10002812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10002814:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
10002818:	4619      	mov	r1, r3
1000281a:	4827      	ldr	r0, [pc, #156]	; (100028b8 <HAL_ADC_ConfigChannel+0x5dc>)
1000281c:	f7ff f962 	bl	10001ae4 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
10002820:	e040      	b.n	100028a4 <HAL_ADC_ConfigChannel+0x5c8>
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
10002822:	683b      	ldr	r3, [r7, #0]
10002824:	681b      	ldr	r3, [r3, #0]
10002826:	4a2b      	ldr	r2, [pc, #172]	; (100028d4 <HAL_ADC_ConfigChannel+0x5f8>)
10002828:	4293      	cmp	r3, r2
1000282a:	d111      	bne.n	10002850 <HAL_ADC_ConfigChannel+0x574>
1000282c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000282e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
10002832:	2b00      	cmp	r3, #0
10002834:	d10c      	bne.n	10002850 <HAL_ADC_ConfigChannel+0x574>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
10002836:	687b      	ldr	r3, [r7, #4]
10002838:	681b      	ldr	r3, [r3, #0]
1000283a:	4a21      	ldr	r2, [pc, #132]	; (100028c0 <HAL_ADC_ConfigChannel+0x5e4>)
1000283c:	4293      	cmp	r3, r2
1000283e:	d131      	bne.n	100028a4 <HAL_ADC_ConfigChannel+0x5c8>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
10002840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10002842:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
10002846:	4619      	mov	r1, r3
10002848:	481b      	ldr	r0, [pc, #108]	; (100028b8 <HAL_ADC_ConfigChannel+0x5dc>)
1000284a:	f7ff f94b 	bl	10001ae4 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_VREFINT_INSTANCE(hadc))
1000284e:	e029      	b.n	100028a4 <HAL_ADC_ConfigChannel+0x5c8>
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VDDCORE) == 0UL))
10002850:	683b      	ldr	r3, [r7, #0]
10002852:	681b      	ldr	r3, [r3, #0]
10002854:	4a20      	ldr	r2, [pc, #128]	; (100028d8 <HAL_ADC_ConfigChannel+0x5fc>)
10002856:	4293      	cmp	r3, r2
10002858:	d124      	bne.n	100028a4 <HAL_ADC_ConfigChannel+0x5c8>
1000285a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000285c:	f003 0301 	and.w	r3, r3, #1
10002860:	2b00      	cmp	r3, #0
10002862:	d11f      	bne.n	100028a4 <HAL_ADC_ConfigChannel+0x5c8>
          {
            if (ADC_VDDCORE_INSTANCE(hadc))
10002864:	687b      	ldr	r3, [r7, #4]
10002866:	681b      	ldr	r3, [r3, #0]
10002868:	4a15      	ldr	r2, [pc, #84]	; (100028c0 <HAL_ADC_ConfigChannel+0x5e4>)
1000286a:	4293      	cmp	r3, r2
1000286c:	d11a      	bne.n	100028a4 <HAL_ADC_ConfigChannel+0x5c8>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VDDCORE | tmp_config_internal_channel);
1000286e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10002870:	f043 0301 	orr.w	r3, r3, #1
10002874:	4619      	mov	r1, r3
10002876:	4810      	ldr	r0, [pc, #64]	; (100028b8 <HAL_ADC_ConfigChannel+0x5dc>)
10002878:	f7ff f934 	bl	10001ae4 <LL_ADC_SetCommonPathInternalCh>
1000287c:	e012      	b.n	100028a4 <HAL_ADC_ConfigChannel+0x5c8>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1000287e:	687b      	ldr	r3, [r7, #4]
10002880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002882:	f043 0220 	orr.w	r2, r3, #32
10002886:	687b      	ldr	r3, [r7, #4]
10002888:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
1000288a:	2301      	movs	r3, #1
1000288c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
10002890:	e008      	b.n	100028a4 <HAL_ADC_ConfigChannel+0x5c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
10002892:	687b      	ldr	r3, [r7, #4]
10002894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002896:	f043 0220 	orr.w	r2, r3, #32
1000289a:	687b      	ldr	r3, [r7, #4]
1000289c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
1000289e:	2301      	movs	r3, #1
100028a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  __HAL_UNLOCK(hadc);
100028a4:	687b      	ldr	r3, [r7, #4]
100028a6:	2200      	movs	r2, #0
100028a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return tmp_hal_status;
100028ac:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
100028b0:	4618      	mov	r0, r3
100028b2:	3784      	adds	r7, #132	; 0x84
100028b4:	46bd      	mov	sp, r7
100028b6:	bd90      	pop	{r4, r7, pc}
100028b8:	48003300 	.word	0x48003300
100028bc:	48003000 	.word	0x48003000
100028c0:	48003100 	.word	0x48003100
100028c4:	b2601000 	.word	0xb2601000
100028c8:	10020000 	.word	0x10020000
100028cc:	053e2d63 	.word	0x053e2d63
100028d0:	bef08000 	.word	0xbef08000
100028d4:	b6902000 	.word	0xb6902000
100028d8:	bac04000 	.word	0xbac04000

100028dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
100028dc:	b580      	push	{r7, lr}
100028de:	b084      	sub	sp, #16
100028e0:	af00      	add	r7, sp, #0
100028e2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
100028e4:	687b      	ldr	r3, [r7, #4]
100028e6:	681b      	ldr	r3, [r3, #0]
100028e8:	4618      	mov	r0, r3
100028ea:	f7ff fa91 	bl	10001e10 <LL_ADC_IsEnabled>
100028ee:	4603      	mov	r3, r0
100028f0:	2b00      	cmp	r3, #0
100028f2:	d161      	bne.n	100029b8 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
100028f4:	687b      	ldr	r3, [r7, #4]
100028f6:	681b      	ldr	r3, [r3, #0]
100028f8:	689a      	ldr	r2, [r3, #8]
100028fa:	4b32      	ldr	r3, [pc, #200]	; (100029c4 <ADC_Enable+0xe8>)
100028fc:	4013      	ands	r3, r2
100028fe:	2b00      	cmp	r3, #0
10002900:	d00d      	beq.n	1000291e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10002902:	687b      	ldr	r3, [r7, #4]
10002904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002906:	f043 0210 	orr.w	r2, r3, #16
1000290a:	687b      	ldr	r3, [r7, #4]
1000290c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1000290e:	687b      	ldr	r3, [r7, #4]
10002910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10002912:	f043 0201 	orr.w	r2, r3, #1
10002916:	687b      	ldr	r3, [r7, #4]
10002918:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
1000291a:	2301      	movs	r3, #1
1000291c:	e04d      	b.n	100029ba <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
1000291e:	687b      	ldr	r3, [r7, #4]
10002920:	681b      	ldr	r3, [r3, #0]
10002922:	4618      	mov	r0, r3
10002924:	f7ff fa60 	bl	10001de8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
10002928:	f7ff f884 	bl	10001a34 <HAL_GetTick>
1000292c:	60f8      	str	r0, [r7, #12]

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
1000292e:	4826      	ldr	r0, [pc, #152]	; (100029c8 <ADC_Enable+0xec>)
10002930:	f7ff f9fe 	bl	10001d30 <LL_ADC_GetMultimode>
10002934:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
10002936:	687b      	ldr	r3, [r7, #4]
10002938:	681b      	ldr	r3, [r3, #0]
1000293a:	4a24      	ldr	r2, [pc, #144]	; (100029cc <ADC_Enable+0xf0>)
1000293c:	4293      	cmp	r3, r2
1000293e:	d002      	beq.n	10002946 <ADC_Enable+0x6a>
10002940:	687b      	ldr	r3, [r7, #4]
10002942:	681b      	ldr	r3, [r3, #0]
10002944:	e000      	b.n	10002948 <ADC_Enable+0x6c>
10002946:	4b22      	ldr	r3, [pc, #136]	; (100029d0 <ADC_Enable+0xf4>)
10002948:	687a      	ldr	r2, [r7, #4]
1000294a:	6812      	ldr	r2, [r2, #0]
1000294c:	4293      	cmp	r3, r2
1000294e:	d02c      	beq.n	100029aa <ADC_Enable+0xce>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
10002950:	68bb      	ldr	r3, [r7, #8]
10002952:	2b00      	cmp	r3, #0
10002954:	d130      	bne.n	100029b8 <ADC_Enable+0xdc>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
10002956:	e028      	b.n	100029aa <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
10002958:	687b      	ldr	r3, [r7, #4]
1000295a:	681b      	ldr	r3, [r3, #0]
1000295c:	4618      	mov	r0, r3
1000295e:	f7ff fa57 	bl	10001e10 <LL_ADC_IsEnabled>
10002962:	4603      	mov	r3, r0
10002964:	2b00      	cmp	r3, #0
10002966:	d104      	bne.n	10002972 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
10002968:	687b      	ldr	r3, [r7, #4]
1000296a:	681b      	ldr	r3, [r3, #0]
1000296c:	4618      	mov	r0, r3
1000296e:	f7ff fa3b 	bl	10001de8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
10002972:	f7ff f85f 	bl	10001a34 <HAL_GetTick>
10002976:	4602      	mov	r2, r0
10002978:	68fb      	ldr	r3, [r7, #12]
1000297a:	1ad3      	subs	r3, r2, r3
1000297c:	2b02      	cmp	r3, #2
1000297e:	d914      	bls.n	100029aa <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
10002980:	687b      	ldr	r3, [r7, #4]
10002982:	681b      	ldr	r3, [r3, #0]
10002984:	681b      	ldr	r3, [r3, #0]
10002986:	f003 0301 	and.w	r3, r3, #1
1000298a:	2b01      	cmp	r3, #1
1000298c:	d00d      	beq.n	100029aa <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1000298e:	687b      	ldr	r3, [r7, #4]
10002990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002992:	f043 0210 	orr.w	r2, r3, #16
10002996:	687b      	ldr	r3, [r7, #4]
10002998:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1000299a:	687b      	ldr	r3, [r7, #4]
1000299c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
1000299e:	f043 0201 	orr.w	r2, r3, #1
100029a2:	687b      	ldr	r3, [r7, #4]
100029a4:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
100029a6:	2301      	movs	r3, #1
100029a8:	e007      	b.n	100029ba <ADC_Enable+0xde>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
100029aa:	687b      	ldr	r3, [r7, #4]
100029ac:	681b      	ldr	r3, [r3, #0]
100029ae:	681b      	ldr	r3, [r3, #0]
100029b0:	f003 0301 	and.w	r3, r3, #1
100029b4:	2b01      	cmp	r3, #1
100029b6:	d1cf      	bne.n	10002958 <ADC_Enable+0x7c>
    }
#endif
  }

  /* Return HAL status */
  return HAL_OK;
100029b8:	2300      	movs	r3, #0
}
100029ba:	4618      	mov	r0, r3
100029bc:	3710      	adds	r7, #16
100029be:	46bd      	mov	sp, r7
100029c0:	bd80      	pop	{r7, pc}
100029c2:	bf00      	nop
100029c4:	8000003f 	.word	0x8000003f
100029c8:	48003300 	.word	0x48003300
100029cc:	48003100 	.word	0x48003100
100029d0:	48003000 	.word	0x48003000

100029d4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
100029d4:	b580      	push	{r7, lr}
100029d6:	b084      	sub	sp, #16
100029d8:	af00      	add	r7, sp, #0
100029da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
100029dc:	687b      	ldr	r3, [r7, #4]
100029de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100029e0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
100029e2:	68fb      	ldr	r3, [r7, #12]
100029e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100029e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
100029ea:	2b00      	cmp	r3, #0
100029ec:	d14b      	bne.n	10002a86 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
100029ee:	68fb      	ldr	r3, [r7, #12]
100029f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100029f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
100029f6:	68fb      	ldr	r3, [r7, #12]
100029f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
100029fa:	68fb      	ldr	r3, [r7, #12]
100029fc:	681b      	ldr	r3, [r3, #0]
100029fe:	681b      	ldr	r3, [r3, #0]
10002a00:	f003 0308 	and.w	r3, r3, #8
10002a04:	2b00      	cmp	r3, #0
10002a06:	d021      	beq.n	10002a4c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
10002a08:	68fb      	ldr	r3, [r7, #12]
10002a0a:	681b      	ldr	r3, [r3, #0]
10002a0c:	4618      	mov	r0, r3
10002a0e:	f7ff f8ed 	bl	10001bec <LL_ADC_REG_IsTriggerSourceSWStart>
10002a12:	4603      	mov	r3, r0
10002a14:	2b00      	cmp	r3, #0
10002a16:	d032      	beq.n	10002a7e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
10002a18:	68fb      	ldr	r3, [r7, #12]
10002a1a:	681b      	ldr	r3, [r3, #0]
10002a1c:	68db      	ldr	r3, [r3, #12]
10002a1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
10002a22:	2b00      	cmp	r3, #0
10002a24:	d12b      	bne.n	10002a7e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
10002a26:	68fb      	ldr	r3, [r7, #12]
10002a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002a2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
10002a2e:	68fb      	ldr	r3, [r7, #12]
10002a30:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
10002a32:	68fb      	ldr	r3, [r7, #12]
10002a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002a36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
10002a3a:	2b00      	cmp	r3, #0
10002a3c:	d11f      	bne.n	10002a7e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
10002a3e:	68fb      	ldr	r3, [r7, #12]
10002a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002a42:	f043 0201 	orr.w	r2, r3, #1
10002a46:	68fb      	ldr	r3, [r7, #12]
10002a48:	655a      	str	r2, [r3, #84]	; 0x54
10002a4a:	e018      	b.n	10002a7e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
10002a4c:	68fb      	ldr	r3, [r7, #12]
10002a4e:	681b      	ldr	r3, [r3, #0]
10002a50:	68db      	ldr	r3, [r3, #12]
10002a52:	f003 0303 	and.w	r3, r3, #3
10002a56:	2b00      	cmp	r3, #0
10002a58:	d111      	bne.n	10002a7e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
10002a5a:	68fb      	ldr	r3, [r7, #12]
10002a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002a5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
10002a62:	68fb      	ldr	r3, [r7, #12]
10002a64:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
10002a66:	68fb      	ldr	r3, [r7, #12]
10002a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002a6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
10002a6e:	2b00      	cmp	r3, #0
10002a70:	d105      	bne.n	10002a7e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
10002a72:	68fb      	ldr	r3, [r7, #12]
10002a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002a76:	f043 0201 	orr.w	r2, r3, #1
10002a7a:	68fb      	ldr	r3, [r7, #12]
10002a7c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
10002a7e:	68f8      	ldr	r0, [r7, #12]
10002a80:	f7fe fc5b 	bl	1000133a <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
10002a84:	e00e      	b.n	10002aa4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
10002a86:	68fb      	ldr	r3, [r7, #12]
10002a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002a8a:	f003 0310 	and.w	r3, r3, #16
10002a8e:	2b00      	cmp	r3, #0
10002a90:	d003      	beq.n	10002a9a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
10002a92:	68f8      	ldr	r0, [r7, #12]
10002a94:	f7ff fc18 	bl	100022c8 <HAL_ADC_ErrorCallback>
}
10002a98:	e004      	b.n	10002aa4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
10002a9a:	68fb      	ldr	r3, [r7, #12]
10002a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10002a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10002aa0:	6878      	ldr	r0, [r7, #4]
10002aa2:	4798      	blx	r3
}
10002aa4:	bf00      	nop
10002aa6:	3710      	adds	r7, #16
10002aa8:	46bd      	mov	sp, r7
10002aaa:	bd80      	pop	{r7, pc}

10002aac <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
10002aac:	b580      	push	{r7, lr}
10002aae:	b084      	sub	sp, #16
10002ab0:	af00      	add	r7, sp, #0
10002ab2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
10002ab4:	687b      	ldr	r3, [r7, #4]
10002ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10002ab8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
10002aba:	68f8      	ldr	r0, [r7, #12]
10002abc:	f7fe fc33 	bl	10001326 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
10002ac0:	bf00      	nop
10002ac2:	3710      	adds	r7, #16
10002ac4:	46bd      	mov	sp, r7
10002ac6:	bd80      	pop	{r7, pc}

10002ac8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
10002ac8:	b580      	push	{r7, lr}
10002aca:	b084      	sub	sp, #16
10002acc:	af00      	add	r7, sp, #0
10002ace:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
10002ad0:	687b      	ldr	r3, [r7, #4]
10002ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10002ad4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
10002ad6:	68fb      	ldr	r3, [r7, #12]
10002ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002ada:	f043 0240 	orr.w	r2, r3, #64	; 0x40
10002ade:	68fb      	ldr	r3, [r7, #12]
10002ae0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
10002ae2:	68fb      	ldr	r3, [r7, #12]
10002ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10002ae6:	f043 0204 	orr.w	r2, r3, #4
10002aea:	68fb      	ldr	r3, [r7, #12]
10002aec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
10002aee:	68f8      	ldr	r0, [r7, #12]
10002af0:	f7ff fbea 	bl	100022c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
10002af4:	bf00      	nop
10002af6:	3710      	adds	r7, #16
10002af8:	46bd      	mov	sp, r7
10002afa:	bd80      	pop	{r7, pc}

10002afc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
10002afc:	b580      	push	{r7, lr}
10002afe:	b084      	sub	sp, #16
10002b00:	af00      	add	r7, sp, #0
10002b02:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
10002b04:	687b      	ldr	r3, [r7, #4]
10002b06:	681b      	ldr	r3, [r3, #0]
10002b08:	4a53      	ldr	r2, [pc, #332]	; (10002c58 <ADC_ConfigureBoostMode+0x15c>)
10002b0a:	4293      	cmp	r3, r2
10002b0c:	d004      	beq.n	10002b18 <ADC_ConfigureBoostMode+0x1c>
10002b0e:	687b      	ldr	r3, [r7, #4]
10002b10:	681b      	ldr	r3, [r3, #0]
10002b12:	4a52      	ldr	r2, [pc, #328]	; (10002c5c <ADC_ConfigureBoostMode+0x160>)
10002b14:	4293      	cmp	r3, r2
10002b16:	d124      	bne.n	10002b62 <ADC_ConfigureBoostMode+0x66>
10002b18:	4b51      	ldr	r3, [pc, #324]	; (10002c60 <ADC_ConfigureBoostMode+0x164>)
10002b1a:	689b      	ldr	r3, [r3, #8]
10002b1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
10002b20:	2b00      	cmp	r3, #0
10002b22:	d01e      	beq.n	10002b62 <ADC_ConfigureBoostMode+0x66>
  {
    freq = HAL_RCC_GetHCLK2Freq();
10002b24:	f002 fee7 	bl	100058f6 <HAL_RCC_GetHCLK2Freq>
10002b28:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
10002b2a:	687b      	ldr	r3, [r7, #4]
10002b2c:	685b      	ldr	r3, [r3, #4]
10002b2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
10002b32:	d010      	beq.n	10002b56 <ADC_ConfigureBoostMode+0x5a>
10002b34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
10002b38:	d811      	bhi.n	10002b5e <ADC_ConfigureBoostMode+0x62>
10002b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
10002b3e:	d002      	beq.n	10002b46 <ADC_ConfigureBoostMode+0x4a>
10002b40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
10002b44:	d10b      	bne.n	10002b5e <ADC_ConfigureBoostMode+0x62>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
10002b46:	687b      	ldr	r3, [r7, #4]
10002b48:	685b      	ldr	r3, [r3, #4]
10002b4a:	0c1b      	lsrs	r3, r3, #16
10002b4c:	68fa      	ldr	r2, [r7, #12]
10002b4e:	fbb2 f3f3 	udiv	r3, r2, r3
10002b52:	60fb      	str	r3, [r7, #12]
        break;
10002b54:	e004      	b.n	10002b60 <ADC_ConfigureBoostMode+0x64>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
10002b56:	68fb      	ldr	r3, [r7, #12]
10002b58:	089b      	lsrs	r3, r3, #2
10002b5a:	60fb      	str	r3, [r7, #12]
        break;
10002b5c:	e000      	b.n	10002b60 <ADC_ConfigureBoostMode+0x64>
      default:
        break;
10002b5e:	bf00      	nop
    switch(hadc->Init.ClockPrescaler)
10002b60:	e062      	b.n	10002c28 <ADC_ConfigureBoostMode+0x12c>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
10002b62:	f04f 0008 	mov.w	r0, #8
10002b66:	f04f 0100 	mov.w	r1, #0
10002b6a:	f005 fa91 	bl	10008090 <HAL_RCCEx_GetPeriphCLKFreq>
10002b6e:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
10002b70:	687b      	ldr	r3, [r7, #4]
10002b72:	685b      	ldr	r3, [r3, #4]
10002b74:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
10002b78:	d051      	beq.n	10002c1e <ADC_ConfigureBoostMode+0x122>
10002b7a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
10002b7e:	d852      	bhi.n	10002c26 <ADC_ConfigureBoostMode+0x12a>
10002b80:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
10002b84:	d047      	beq.n	10002c16 <ADC_ConfigureBoostMode+0x11a>
10002b86:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
10002b8a:	d84c      	bhi.n	10002c26 <ADC_ConfigureBoostMode+0x12a>
10002b8c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
10002b90:	d03d      	beq.n	10002c0e <ADC_ConfigureBoostMode+0x112>
10002b92:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
10002b96:	d846      	bhi.n	10002c26 <ADC_ConfigureBoostMode+0x12a>
10002b98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
10002b9c:	d033      	beq.n	10002c06 <ADC_ConfigureBoostMode+0x10a>
10002b9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
10002ba2:	d840      	bhi.n	10002c26 <ADC_ConfigureBoostMode+0x12a>
10002ba4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
10002ba8:	d029      	beq.n	10002bfe <ADC_ConfigureBoostMode+0x102>
10002baa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
10002bae:	d83a      	bhi.n	10002c26 <ADC_ConfigureBoostMode+0x12a>
10002bb0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
10002bb4:	d01a      	beq.n	10002bec <ADC_ConfigureBoostMode+0xf0>
10002bb6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
10002bba:	d834      	bhi.n	10002c26 <ADC_ConfigureBoostMode+0x12a>
10002bbc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
10002bc0:	d014      	beq.n	10002bec <ADC_ConfigureBoostMode+0xf0>
10002bc2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
10002bc6:	d82e      	bhi.n	10002c26 <ADC_ConfigureBoostMode+0x12a>
10002bc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
10002bcc:	d00e      	beq.n	10002bec <ADC_ConfigureBoostMode+0xf0>
10002bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
10002bd2:	d828      	bhi.n	10002c26 <ADC_ConfigureBoostMode+0x12a>
10002bd4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
10002bd8:	d008      	beq.n	10002bec <ADC_ConfigureBoostMode+0xf0>
10002bda:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
10002bde:	d822      	bhi.n	10002c26 <ADC_ConfigureBoostMode+0x12a>
10002be0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
10002be4:	d002      	beq.n	10002bec <ADC_ConfigureBoostMode+0xf0>
10002be6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
10002bea:	d11c      	bne.n	10002c26 <ADC_ConfigureBoostMode+0x12a>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
10002bec:	687b      	ldr	r3, [r7, #4]
10002bee:	685b      	ldr	r3, [r3, #4]
10002bf0:	0c9b      	lsrs	r3, r3, #18
10002bf2:	005b      	lsls	r3, r3, #1
10002bf4:	68fa      	ldr	r2, [r7, #12]
10002bf6:	fbb2 f3f3 	udiv	r3, r2, r3
10002bfa:	60fb      	str	r3, [r7, #12]
        break;
10002bfc:	e014      	b.n	10002c28 <ADC_ConfigureBoostMode+0x12c>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
10002bfe:	68fb      	ldr	r3, [r7, #12]
10002c00:	091b      	lsrs	r3, r3, #4
10002c02:	60fb      	str	r3, [r7, #12]
      break;
10002c04:	e010      	b.n	10002c28 <ADC_ConfigureBoostMode+0x12c>
        case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
10002c06:	68fb      	ldr	r3, [r7, #12]
10002c08:	095b      	lsrs	r3, r3, #5
10002c0a:	60fb      	str	r3, [r7, #12]
        break;
10002c0c:	e00c      	b.n	10002c28 <ADC_ConfigureBoostMode+0x12c>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
10002c0e:	68fb      	ldr	r3, [r7, #12]
10002c10:	099b      	lsrs	r3, r3, #6
10002c12:	60fb      	str	r3, [r7, #12]
        break;
10002c14:	e008      	b.n	10002c28 <ADC_ConfigureBoostMode+0x12c>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
10002c16:	68fb      	ldr	r3, [r7, #12]
10002c18:	09db      	lsrs	r3, r3, #7
10002c1a:	60fb      	str	r3, [r7, #12]
        break;
10002c1c:	e004      	b.n	10002c28 <ADC_ConfigureBoostMode+0x12c>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
10002c1e:	68fb      	ldr	r3, [r7, #12]
10002c20:	0a1b      	lsrs	r3, r3, #8
10002c22:	60fb      	str	r3, [r7, #12]
        break;
10002c24:	e000      	b.n	10002c28 <ADC_ConfigureBoostMode+0x12c>
      default:
        break;
10002c26:	bf00      	nop
    }
  }

  if (freq > 20000000UL)
10002c28:	68fb      	ldr	r3, [r7, #12]
10002c2a:	4a0e      	ldr	r2, [pc, #56]	; (10002c64 <ADC_ConfigureBoostMode+0x168>)
10002c2c:	4293      	cmp	r3, r2
10002c2e:	d908      	bls.n	10002c42 <ADC_ConfigureBoostMode+0x146>
  {
    SET_BIT(hadc->Instance->CR, ADC_CR_BOOST);
10002c30:	687b      	ldr	r3, [r7, #4]
10002c32:	681b      	ldr	r3, [r3, #0]
10002c34:	689a      	ldr	r2, [r3, #8]
10002c36:	687b      	ldr	r3, [r7, #4]
10002c38:	681b      	ldr	r3, [r3, #0]
10002c3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
10002c3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    CLEAR_BIT(hadc->Instance->CR, 0);
  }
}
10002c40:	e005      	b.n	10002c4e <ADC_ConfigureBoostMode+0x152>
    CLEAR_BIT(hadc->Instance->CR, 0);
10002c42:	687b      	ldr	r3, [r7, #4]
10002c44:	681a      	ldr	r2, [r3, #0]
10002c46:	687b      	ldr	r3, [r7, #4]
10002c48:	681b      	ldr	r3, [r3, #0]
10002c4a:	6892      	ldr	r2, [r2, #8]
10002c4c:	609a      	str	r2, [r3, #8]
}
10002c4e:	bf00      	nop
10002c50:	3710      	adds	r7, #16
10002c52:	46bd      	mov	sp, r7
10002c54:	bd80      	pop	{r7, pc}
10002c56:	bf00      	nop
10002c58:	48003000 	.word	0x48003000
10002c5c:	48003100 	.word	0x48003100
10002c60:	48003300 	.word	0x48003300
10002c64:	01312d00 	.word	0x01312d00

10002c68 <LL_ADC_IsEnabled>:
{
10002c68:	b480      	push	{r7}
10002c6a:	b083      	sub	sp, #12
10002c6c:	af00      	add	r7, sp, #0
10002c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
10002c70:	687b      	ldr	r3, [r7, #4]
10002c72:	689b      	ldr	r3, [r3, #8]
10002c74:	f003 0301 	and.w	r3, r3, #1
10002c78:	2b01      	cmp	r3, #1
10002c7a:	d101      	bne.n	10002c80 <LL_ADC_IsEnabled+0x18>
10002c7c:	2301      	movs	r3, #1
10002c7e:	e000      	b.n	10002c82 <LL_ADC_IsEnabled+0x1a>
10002c80:	2300      	movs	r3, #0
}
10002c82:	4618      	mov	r0, r3
10002c84:	370c      	adds	r7, #12
10002c86:	46bd      	mov	sp, r7
10002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
10002c8c:	4770      	bx	lr

10002c8e <LL_ADC_REG_IsConversionOngoing>:
{
10002c8e:	b480      	push	{r7}
10002c90:	b083      	sub	sp, #12
10002c92:	af00      	add	r7, sp, #0
10002c94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
10002c96:	687b      	ldr	r3, [r7, #4]
10002c98:	689b      	ldr	r3, [r3, #8]
10002c9a:	f003 0304 	and.w	r3, r3, #4
10002c9e:	2b04      	cmp	r3, #4
10002ca0:	d101      	bne.n	10002ca6 <LL_ADC_REG_IsConversionOngoing+0x18>
10002ca2:	2301      	movs	r3, #1
10002ca4:	e000      	b.n	10002ca8 <LL_ADC_REG_IsConversionOngoing+0x1a>
10002ca6:	2300      	movs	r3, #0
}
10002ca8:	4618      	mov	r0, r3
10002caa:	370c      	adds	r7, #12
10002cac:	46bd      	mov	sp, r7
10002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
10002cb2:	4770      	bx	lr

10002cb4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pmultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *pmultimode)
{
10002cb4:	b590      	push	{r4, r7, lr}
10002cb6:	b09f      	sub	sp, #124	; 0x7c
10002cb8:	af00      	add	r7, sp, #0
10002cba:	6078      	str	r0, [r7, #4]
10002cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
10002cbe:	2300      	movs	r3, #0
10002cc0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef  tmphadcSlave={0};
10002cc4:	f107 0308 	add.w	r3, r7, #8
10002cc8:	2264      	movs	r2, #100	; 0x64
10002cca:	2100      	movs	r1, #0
10002ccc:	4618      	mov	r0, r3
10002cce:	f00a fc18 	bl	1000d502 <memset>
    assert_param(IS_ADC_DUAL_DATA_MODE(pmultimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(pmultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
10002cd2:	687b      	ldr	r3, [r7, #4]
10002cd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
10002cd8:	2b01      	cmp	r3, #1
10002cda:	d101      	bne.n	10002ce0 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
10002cdc:	2302      	movs	r3, #2
10002cde:	e084      	b.n	10002dea <HAL_ADCEx_MultiModeConfigChannel+0x136>
10002ce0:	687b      	ldr	r3, [r7, #4]
10002ce2:	2201      	movs	r2, #1
10002ce4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
10002ce8:	2300      	movs	r3, #0
10002cea:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
10002cec:	2300      	movs	r3, #0
10002cee:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
10002cf0:	687b      	ldr	r3, [r7, #4]
10002cf2:	681b      	ldr	r3, [r3, #0]
10002cf4:	4a3f      	ldr	r2, [pc, #252]	; (10002df4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
10002cf6:	4293      	cmp	r3, r2
10002cf8:	d102      	bne.n	10002d00 <HAL_ADCEx_MultiModeConfigChannel+0x4c>
10002cfa:	4b3f      	ldr	r3, [pc, #252]	; (10002df8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
10002cfc:	60bb      	str	r3, [r7, #8]
10002cfe:	e001      	b.n	10002d04 <HAL_ADCEx_MultiModeConfigChannel+0x50>
10002d00:	2300      	movs	r3, #0
10002d02:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
10002d04:	68bb      	ldr	r3, [r7, #8]
10002d06:	2b00      	cmp	r3, #0
10002d08:	d10b      	bne.n	10002d22 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
10002d0a:	687b      	ldr	r3, [r7, #4]
10002d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002d0e:	f043 0220 	orr.w	r2, r3, #32
10002d12:	687b      	ldr	r3, [r7, #4]
10002d14:	655a      	str	r2, [r3, #84]	; 0x54

    __HAL_UNLOCK(hadc);
10002d16:	687b      	ldr	r3, [r7, #4]
10002d18:	2200      	movs	r2, #0
10002d1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
10002d1e:	2301      	movs	r3, #1
10002d20:	e063      	b.n	10002dea <HAL_ADCEx_MultiModeConfigChannel+0x136>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
10002d22:	68bb      	ldr	r3, [r7, #8]
10002d24:	4618      	mov	r0, r3
10002d26:	f7ff ffb2 	bl	10002c8e <LL_ADC_REG_IsConversionOngoing>
10002d2a:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
10002d2c:	687b      	ldr	r3, [r7, #4]
10002d2e:	681b      	ldr	r3, [r3, #0]
10002d30:	4618      	mov	r0, r3
10002d32:	f7ff ffac 	bl	10002c8e <LL_ADC_REG_IsConversionOngoing>
10002d36:	4603      	mov	r3, r0
10002d38:	2b00      	cmp	r3, #0
10002d3a:	d145      	bne.n	10002dc8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
10002d3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
10002d3e:	2b00      	cmp	r3, #0
10002d40:	d142      	bne.n	10002dc8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
10002d42:	4b2e      	ldr	r3, [pc, #184]	; (10002dfc <HAL_ADCEx_MultiModeConfigChannel+0x148>)
10002d44:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pmultimode->Mode != ADC_MODE_INDEPENDENT)
10002d46:	683b      	ldr	r3, [r7, #0]
10002d48:	681b      	ldr	r3, [r3, #0]
10002d4a:	2b00      	cmp	r3, #0
10002d4c:	d022      	beq.n	10002d94 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, pmultimode->DualModeData);
10002d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10002d50:	689b      	ldr	r3, [r3, #8]
10002d52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
10002d56:	683b      	ldr	r3, [r7, #0]
10002d58:	685b      	ldr	r3, [r3, #4]
10002d5a:	431a      	orrs	r2, r3
10002d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10002d5e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
10002d60:	4824      	ldr	r0, [pc, #144]	; (10002df4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
10002d62:	f7ff ff81 	bl	10002c68 <LL_ADC_IsEnabled>
10002d66:	4604      	mov	r4, r0
10002d68:	4823      	ldr	r0, [pc, #140]	; (10002df8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
10002d6a:	f7ff ff7d 	bl	10002c68 <LL_ADC_IsEnabled>
10002d6e:	4603      	mov	r3, r0
10002d70:	4323      	orrs	r3, r4
10002d72:	2b00      	cmp	r3, #0
10002d74:	d132      	bne.n	10002ddc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
10002d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10002d78:	689b      	ldr	r3, [r3, #8]
10002d7a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
10002d7e:	f023 030f 	bic.w	r3, r3, #15
10002d82:	683a      	ldr	r2, [r7, #0]
10002d84:	6811      	ldr	r1, [r2, #0]
10002d86:	683a      	ldr	r2, [r7, #0]
10002d88:	6892      	ldr	r2, [r2, #8]
10002d8a:	430a      	orrs	r2, r1
10002d8c:	431a      	orrs	r2, r3
10002d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10002d90:	609a      	str	r2, [r3, #8]
    if (pmultimode->Mode != ADC_MODE_INDEPENDENT)
10002d92:	e023      	b.n	10002ddc <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
10002d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10002d96:	689b      	ldr	r3, [r3, #8]
10002d98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
10002d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10002d9e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
10002da0:	4814      	ldr	r0, [pc, #80]	; (10002df4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
10002da2:	f7ff ff61 	bl	10002c68 <LL_ADC_IsEnabled>
10002da6:	4604      	mov	r4, r0
10002da8:	4813      	ldr	r0, [pc, #76]	; (10002df8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
10002daa:	f7ff ff5d 	bl	10002c68 <LL_ADC_IsEnabled>
10002dae:	4603      	mov	r3, r0
10002db0:	4323      	orrs	r3, r4
10002db2:	2b00      	cmp	r3, #0
10002db4:	d112      	bne.n	10002ddc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
10002db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10002db8:	689b      	ldr	r3, [r3, #8]
10002dba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
10002dbe:	f023 030f 	bic.w	r3, r3, #15
10002dc2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
10002dc4:	6093      	str	r3, [r2, #8]
    if (pmultimode->Mode != ADC_MODE_INDEPENDENT)
10002dc6:	e009      	b.n	10002ddc <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
10002dc8:	687b      	ldr	r3, [r7, #4]
10002dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002dcc:	f043 0220 	orr.w	r2, r3, #32
10002dd0:	687b      	ldr	r3, [r7, #4]
10002dd2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
10002dd4:	2301      	movs	r3, #1
10002dd6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
10002dda:	e000      	b.n	10002dde <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pmultimode->Mode != ADC_MODE_INDEPENDENT)
10002ddc:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
10002dde:	687b      	ldr	r3, [r7, #4]
10002de0:	2200      	movs	r2, #0
10002de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return tmp_hal_status;
10002de6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
10002dea:	4618      	mov	r0, r3
10002dec:	377c      	adds	r7, #124	; 0x7c
10002dee:	46bd      	mov	sp, r7
10002df0:	bd90      	pop	{r4, r7, pc}
10002df2:	bf00      	nop
10002df4:	48003000 	.word	0x48003000
10002df8:	48003100 	.word	0x48003100
10002dfc:	48003300 	.word	0x48003300

10002e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10002e00:	b480      	push	{r7}
10002e02:	b085      	sub	sp, #20
10002e04:	af00      	add	r7, sp, #0
10002e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
10002e08:	687b      	ldr	r3, [r7, #4]
10002e0a:	f003 0307 	and.w	r3, r3, #7
10002e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
10002e10:	4b0c      	ldr	r3, [pc, #48]	; (10002e44 <__NVIC_SetPriorityGrouping+0x44>)
10002e12:	68db      	ldr	r3, [r3, #12]
10002e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
10002e16:	68ba      	ldr	r2, [r7, #8]
10002e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
10002e1c:	4013      	ands	r3, r2
10002e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
10002e20:	68fb      	ldr	r3, [r7, #12]
10002e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10002e24:	68bb      	ldr	r3, [r7, #8]
10002e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
10002e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
10002e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
10002e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
10002e32:	4a04      	ldr	r2, [pc, #16]	; (10002e44 <__NVIC_SetPriorityGrouping+0x44>)
10002e34:	68bb      	ldr	r3, [r7, #8]
10002e36:	60d3      	str	r3, [r2, #12]
}
10002e38:	bf00      	nop
10002e3a:	3714      	adds	r7, #20
10002e3c:	46bd      	mov	sp, r7
10002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
10002e42:	4770      	bx	lr
10002e44:	e000ed00 	.word	0xe000ed00

10002e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
10002e48:	b480      	push	{r7}
10002e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
10002e4c:	4b04      	ldr	r3, [pc, #16]	; (10002e60 <__NVIC_GetPriorityGrouping+0x18>)
10002e4e:	68db      	ldr	r3, [r3, #12]
10002e50:	0a1b      	lsrs	r3, r3, #8
10002e52:	f003 0307 	and.w	r3, r3, #7
}
10002e56:	4618      	mov	r0, r3
10002e58:	46bd      	mov	sp, r7
10002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
10002e5e:	4770      	bx	lr
10002e60:	e000ed00 	.word	0xe000ed00

10002e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10002e64:	b480      	push	{r7}
10002e66:	b083      	sub	sp, #12
10002e68:	af00      	add	r7, sp, #0
10002e6a:	4603      	mov	r3, r0
10002e6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10002e6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10002e72:	2b00      	cmp	r3, #0
10002e74:	db0b      	blt.n	10002e8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002e76:	88fb      	ldrh	r3, [r7, #6]
10002e78:	f003 021f 	and.w	r2, r3, #31
10002e7c:	4907      	ldr	r1, [pc, #28]	; (10002e9c <__NVIC_EnableIRQ+0x38>)
10002e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10002e82:	095b      	lsrs	r3, r3, #5
10002e84:	2001      	movs	r0, #1
10002e86:	fa00 f202 	lsl.w	r2, r0, r2
10002e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
10002e8e:	bf00      	nop
10002e90:	370c      	adds	r7, #12
10002e92:	46bd      	mov	sp, r7
10002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
10002e98:	4770      	bx	lr
10002e9a:	bf00      	nop
10002e9c:	e000e100 	.word	0xe000e100

10002ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10002ea0:	b480      	push	{r7}
10002ea2:	b083      	sub	sp, #12
10002ea4:	af00      	add	r7, sp, #0
10002ea6:	4603      	mov	r3, r0
10002ea8:	6039      	str	r1, [r7, #0]
10002eaa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10002eac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10002eb0:	2b00      	cmp	r3, #0
10002eb2:	db0a      	blt.n	10002eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10002eb4:	683b      	ldr	r3, [r7, #0]
10002eb6:	b2da      	uxtb	r2, r3
10002eb8:	490c      	ldr	r1, [pc, #48]	; (10002eec <__NVIC_SetPriority+0x4c>)
10002eba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10002ebe:	0112      	lsls	r2, r2, #4
10002ec0:	b2d2      	uxtb	r2, r2
10002ec2:	440b      	add	r3, r1
10002ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
10002ec8:	e00a      	b.n	10002ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10002eca:	683b      	ldr	r3, [r7, #0]
10002ecc:	b2da      	uxtb	r2, r3
10002ece:	4908      	ldr	r1, [pc, #32]	; (10002ef0 <__NVIC_SetPriority+0x50>)
10002ed0:	88fb      	ldrh	r3, [r7, #6]
10002ed2:	f003 030f 	and.w	r3, r3, #15
10002ed6:	3b04      	subs	r3, #4
10002ed8:	0112      	lsls	r2, r2, #4
10002eda:	b2d2      	uxtb	r2, r2
10002edc:	440b      	add	r3, r1
10002ede:	761a      	strb	r2, [r3, #24]
}
10002ee0:	bf00      	nop
10002ee2:	370c      	adds	r7, #12
10002ee4:	46bd      	mov	sp, r7
10002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
10002eea:	4770      	bx	lr
10002eec:	e000e100 	.word	0xe000e100
10002ef0:	e000ed00 	.word	0xe000ed00

10002ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
10002ef4:	b480      	push	{r7}
10002ef6:	b089      	sub	sp, #36	; 0x24
10002ef8:	af00      	add	r7, sp, #0
10002efa:	60f8      	str	r0, [r7, #12]
10002efc:	60b9      	str	r1, [r7, #8]
10002efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
10002f00:	68fb      	ldr	r3, [r7, #12]
10002f02:	f003 0307 	and.w	r3, r3, #7
10002f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
10002f08:	69fb      	ldr	r3, [r7, #28]
10002f0a:	f1c3 0307 	rsb	r3, r3, #7
10002f0e:	2b04      	cmp	r3, #4
10002f10:	bf28      	it	cs
10002f12:	2304      	movcs	r3, #4
10002f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
10002f16:	69fb      	ldr	r3, [r7, #28]
10002f18:	3304      	adds	r3, #4
10002f1a:	2b06      	cmp	r3, #6
10002f1c:	d902      	bls.n	10002f24 <NVIC_EncodePriority+0x30>
10002f1e:	69fb      	ldr	r3, [r7, #28]
10002f20:	3b03      	subs	r3, #3
10002f22:	e000      	b.n	10002f26 <NVIC_EncodePriority+0x32>
10002f24:	2300      	movs	r3, #0
10002f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10002f28:	f04f 32ff 	mov.w	r2, #4294967295
10002f2c:	69bb      	ldr	r3, [r7, #24]
10002f2e:	fa02 f303 	lsl.w	r3, r2, r3
10002f32:	43da      	mvns	r2, r3
10002f34:	68bb      	ldr	r3, [r7, #8]
10002f36:	401a      	ands	r2, r3
10002f38:	697b      	ldr	r3, [r7, #20]
10002f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
10002f3c:	f04f 31ff 	mov.w	r1, #4294967295
10002f40:	697b      	ldr	r3, [r7, #20]
10002f42:	fa01 f303 	lsl.w	r3, r1, r3
10002f46:	43d9      	mvns	r1, r3
10002f48:	687b      	ldr	r3, [r7, #4]
10002f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10002f4c:	4313      	orrs	r3, r2
         );
}
10002f4e:	4618      	mov	r0, r3
10002f50:	3724      	adds	r7, #36	; 0x24
10002f52:	46bd      	mov	sp, r7
10002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
10002f58:	4770      	bx	lr
	...

10002f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10002f5c:	b580      	push	{r7, lr}
10002f5e:	b082      	sub	sp, #8
10002f60:	af00      	add	r7, sp, #0
10002f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10002f64:	687b      	ldr	r3, [r7, #4]
10002f66:	3b01      	subs	r3, #1
10002f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
10002f6c:	d301      	bcc.n	10002f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
10002f6e:	2301      	movs	r3, #1
10002f70:	e00f      	b.n	10002f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10002f72:	4a0a      	ldr	r2, [pc, #40]	; (10002f9c <SysTick_Config+0x40>)
10002f74:	687b      	ldr	r3, [r7, #4]
10002f76:	3b01      	subs	r3, #1
10002f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10002f7a:	210f      	movs	r1, #15
10002f7c:	f04f 30ff 	mov.w	r0, #4294967295
10002f80:	f7ff ff8e 	bl	10002ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10002f84:	4b05      	ldr	r3, [pc, #20]	; (10002f9c <SysTick_Config+0x40>)
10002f86:	2200      	movs	r2, #0
10002f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10002f8a:	4b04      	ldr	r3, [pc, #16]	; (10002f9c <SysTick_Config+0x40>)
10002f8c:	2207      	movs	r2, #7
10002f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10002f90:	2300      	movs	r3, #0
}
10002f92:	4618      	mov	r0, r3
10002f94:	3708      	adds	r7, #8
10002f96:	46bd      	mov	sp, r7
10002f98:	bd80      	pop	{r7, pc}
10002f9a:	bf00      	nop
10002f9c:	e000e010 	.word	0xe000e010

10002fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10002fa0:	b580      	push	{r7, lr}
10002fa2:	b082      	sub	sp, #8
10002fa4:	af00      	add	r7, sp, #0
10002fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
10002fa8:	6878      	ldr	r0, [r7, #4]
10002faa:	f7ff ff29 	bl	10002e00 <__NVIC_SetPriorityGrouping>
}
10002fae:	bf00      	nop
10002fb0:	3708      	adds	r7, #8
10002fb2:	46bd      	mov	sp, r7
10002fb4:	bd80      	pop	{r7, pc}

10002fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10002fb6:	b580      	push	{r7, lr}
10002fb8:	b086      	sub	sp, #24
10002fba:	af00      	add	r7, sp, #0
10002fbc:	4603      	mov	r3, r0
10002fbe:	60b9      	str	r1, [r7, #8]
10002fc0:	607a      	str	r2, [r7, #4]
10002fc2:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
10002fc4:	2300      	movs	r3, #0
10002fc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
10002fc8:	f7ff ff3e 	bl	10002e48 <__NVIC_GetPriorityGrouping>
10002fcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
10002fce:	687a      	ldr	r2, [r7, #4]
10002fd0:	68b9      	ldr	r1, [r7, #8]
10002fd2:	6978      	ldr	r0, [r7, #20]
10002fd4:	f7ff ff8e 	bl	10002ef4 <NVIC_EncodePriority>
10002fd8:	4602      	mov	r2, r0
10002fda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
10002fde:	4611      	mov	r1, r2
10002fe0:	4618      	mov	r0, r3
10002fe2:	f7ff ff5d 	bl	10002ea0 <__NVIC_SetPriority>
}
10002fe6:	bf00      	nop
10002fe8:	3718      	adds	r7, #24
10002fea:	46bd      	mov	sp, r7
10002fec:	bd80      	pop	{r7, pc}

10002fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10002fee:	b580      	push	{r7, lr}
10002ff0:	b082      	sub	sp, #8
10002ff2:	af00      	add	r7, sp, #0
10002ff4:	4603      	mov	r3, r0
10002ff6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10002ff8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10002ffc:	4618      	mov	r0, r3
10002ffe:	f7ff ff31 	bl	10002e64 <__NVIC_EnableIRQ>
}
10003002:	bf00      	nop
10003004:	3708      	adds	r7, #8
10003006:	46bd      	mov	sp, r7
10003008:	bd80      	pop	{r7, pc}

1000300a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
1000300a:	b580      	push	{r7, lr}
1000300c:	b082      	sub	sp, #8
1000300e:	af00      	add	r7, sp, #0
10003010:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10003012:	6878      	ldr	r0, [r7, #4]
10003014:	f7ff ffa2 	bl	10002f5c <SysTick_Config>
10003018:	4603      	mov	r3, r0
}
1000301a:	4618      	mov	r0, r3
1000301c:	3708      	adds	r7, #8
1000301e:	46bd      	mov	sp, r7
10003020:	bd80      	pop	{r7, pc}
	...

10003024 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
10003024:	b580      	push	{r7, lr}
10003026:	b086      	sub	sp, #24
10003028:	af00      	add	r7, sp, #0
1000302a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
1000302c:	f7fe fd02 	bl	10001a34 <HAL_GetTick>
10003030:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
10003032:	687b      	ldr	r3, [r7, #4]
10003034:	2b00      	cmp	r3, #0
10003036:	d101      	bne.n	1000303c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
10003038:	2301      	movs	r3, #1
1000303a:	e0e7      	b.n	1000320c <HAL_DMA_Init+0x1e8>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_INSTANCE(hdma) != 0U) /* DMA1 or DMA2 instance */
1000303c:	687b      	ldr	r3, [r7, #4]
1000303e:	681b      	ldr	r3, [r3, #0]
10003040:	461a      	mov	r2, r3
10003042:	4b74      	ldr	r3, [pc, #464]	; (10003214 <HAL_DMA_Init+0x1f0>)
10003044:	429a      	cmp	r2, r3
10003046:	d907      	bls.n	10003058 <HAL_DMA_Init+0x34>
10003048:	687b      	ldr	r3, [r7, #4]
1000304a:	681b      	ldr	r3, [r3, #0]
1000304c:	461a      	mov	r2, r3
1000304e:	4b72      	ldr	r3, [pc, #456]	; (10003218 <HAL_DMA_Init+0x1f4>)
10003050:	429a      	cmp	r2, r3
10003052:	d801      	bhi.n	10003058 <HAL_DMA_Init+0x34>
10003054:	2301      	movs	r3, #1
10003056:	e000      	b.n	1000305a <HAL_DMA_Init+0x36>
10003058:	2300      	movs	r3, #0
1000305a:	2b00      	cmp	r3, #0
1000305c:	f000 8099 	beq.w	10003192 <HAL_DMA_Init+0x16e>
    }



    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
10003060:	687b      	ldr	r3, [r7, #4]
10003062:	2202      	movs	r2, #2
10003064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
10003068:	687b      	ldr	r3, [r7, #4]
1000306a:	2200      	movs	r2, #0
1000306c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
10003070:	687b      	ldr	r3, [r7, #4]
10003072:	681b      	ldr	r3, [r3, #0]
10003074:	681a      	ldr	r2, [r3, #0]
10003076:	687b      	ldr	r3, [r7, #4]
10003078:	681b      	ldr	r3, [r3, #0]
1000307a:	f022 0201 	bic.w	r2, r2, #1
1000307e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
10003080:	e00f      	b.n	100030a2 <HAL_DMA_Init+0x7e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
10003082:	f7fe fcd7 	bl	10001a34 <HAL_GetTick>
10003086:	4602      	mov	r2, r0
10003088:	693b      	ldr	r3, [r7, #16]
1000308a:	1ad3      	subs	r3, r2, r3
1000308c:	2b05      	cmp	r3, #5
1000308e:	d908      	bls.n	100030a2 <HAL_DMA_Init+0x7e>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
10003090:	687b      	ldr	r3, [r7, #4]
10003092:	2220      	movs	r2, #32
10003094:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
10003096:	687b      	ldr	r3, [r7, #4]
10003098:	2203      	movs	r2, #3
1000309a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
1000309e:	2301      	movs	r3, #1
100030a0:	e0b4      	b.n	1000320c <HAL_DMA_Init+0x1e8>
    while ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
100030a2:	687b      	ldr	r3, [r7, #4]
100030a4:	681b      	ldr	r3, [r3, #0]
100030a6:	681b      	ldr	r3, [r3, #0]
100030a8:	f003 0301 	and.w	r3, r3, #1
100030ac:	2b00      	cmp	r3, #0
100030ae:	d1e8      	bne.n	10003082 <HAL_DMA_Init+0x5e>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef *)hdma->Instance)->CR;
100030b0:	687b      	ldr	r3, [r7, #4]
100030b2:	681b      	ldr	r3, [r3, #0]
100030b4:	681b      	ldr	r3, [r3, #0]
100030b6:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
100030b8:	697a      	ldr	r2, [r7, #20]
100030ba:	4b58      	ldr	r3, [pc, #352]	; (1000321c <HAL_DMA_Init+0x1f8>)
100030bc:	4013      	ands	r3, r2
100030be:	617b      	str	r3, [r7, #20]
                                  DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                                  DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                                  DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
100030c0:	687b      	ldr	r3, [r7, #4]
100030c2:	689a      	ldr	r2, [r3, #8]
                      hdma->Init.PeriphInc           | hdma->Init.MemInc           |
100030c4:	687b      	ldr	r3, [r7, #4]
100030c6:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
100030c8:	431a      	orrs	r2, r3
                      hdma->Init.PeriphInc           | hdma->Init.MemInc           |
100030ca:	687b      	ldr	r3, [r7, #4]
100030cc:	691b      	ldr	r3, [r3, #16]
100030ce:	431a      	orrs	r2, r3
                      hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
100030d0:	687b      	ldr	r3, [r7, #4]
100030d2:	695b      	ldr	r3, [r3, #20]
                      hdma->Init.PeriphInc           | hdma->Init.MemInc           |
100030d4:	431a      	orrs	r2, r3
                      hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
100030d6:	687b      	ldr	r3, [r7, #4]
100030d8:	699b      	ldr	r3, [r3, #24]
100030da:	431a      	orrs	r2, r3
                      hdma->Init.Mode                | hdma->Init.Priority;
100030dc:	687b      	ldr	r3, [r7, #4]
100030de:	69db      	ldr	r3, [r3, #28]
                      hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
100030e0:	431a      	orrs	r2, r3
                      hdma->Init.Mode                | hdma->Init.Priority;
100030e2:	687b      	ldr	r3, [r7, #4]
100030e4:	6a1b      	ldr	r3, [r3, #32]
100030e6:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
100030e8:	697a      	ldr	r2, [r7, #20]
100030ea:	4313      	orrs	r3, r2
100030ec:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
100030ee:	687b      	ldr	r3, [r7, #4]
100030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100030f2:	2b04      	cmp	r3, #4
100030f4:	d107      	bne.n	10003106 <HAL_DMA_Init+0xe2>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
100030f6:	687b      	ldr	r3, [r7, #4]
100030f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
100030fa:	687b      	ldr	r3, [r7, #4]
100030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100030fe:	4313      	orrs	r3, r2
10003100:	697a      	ldr	r2, [r7, #20]
10003102:	4313      	orrs	r3, r2
10003104:	617b      	str	r3, [r7, #20]
    }

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR = registerValue;
10003106:	687b      	ldr	r3, [r7, #4]
10003108:	681b      	ldr	r3, [r3, #0]
1000310a:	697a      	ldr	r2, [r7, #20]
1000310c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef *)hdma->Instance)->FCR;
1000310e:	687b      	ldr	r3, [r7, #4]
10003110:	681b      	ldr	r3, [r3, #0]
10003112:	695b      	ldr	r3, [r3, #20]
10003114:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
10003116:	697b      	ldr	r3, [r7, #20]
10003118:	f023 0307 	bic.w	r3, r3, #7
1000311c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
1000311e:	687b      	ldr	r3, [r7, #4]
10003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003122:	697a      	ldr	r2, [r7, #20]
10003124:	4313      	orrs	r3, r2
10003126:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
10003128:	687b      	ldr	r3, [r7, #4]
1000312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000312c:	2b04      	cmp	r3, #4
1000312e:	d117      	bne.n	10003160 <HAL_DMA_Init+0x13c>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
10003130:	687b      	ldr	r3, [r7, #4]
10003132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10003134:	697a      	ldr	r2, [r7, #20]
10003136:	4313      	orrs	r3, r2
10003138:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
1000313a:	687b      	ldr	r3, [r7, #4]
1000313c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000313e:	2b00      	cmp	r3, #0
10003140:	d00e      	beq.n	10003160 <HAL_DMA_Init+0x13c>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
10003142:	6878      	ldr	r0, [r7, #4]
10003144:	f000 fb2c 	bl	100037a0 <DMA_CheckFifoParam>
10003148:	4603      	mov	r3, r0
1000314a:	2b00      	cmp	r3, #0
1000314c:	d008      	beq.n	10003160 <HAL_DMA_Init+0x13c>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
1000314e:	687b      	ldr	r3, [r7, #4]
10003150:	2240      	movs	r2, #64	; 0x40
10003152:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
10003154:	687b      	ldr	r3, [r7, #4]
10003156:	2201      	movs	r2, #1
10003158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
1000315c:	2301      	movs	r3, #1
1000315e:	e055      	b.n	1000320c <HAL_DMA_Init+0x1e8>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef *)hdma->Instance)->FCR = registerValue;
10003160:	687b      	ldr	r3, [r7, #4]
10003162:	681b      	ldr	r3, [r3, #0]
10003164:	697a      	ldr	r2, [r7, #20]
10003166:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
10003168:	6878      	ldr	r0, [r7, #4]
1000316a:	f000 fae3 	bl	10003734 <DMA_CalcBaseAndBitshift>
1000316e:	4603      	mov	r3, r0
10003170:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
     regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
10003172:	687b      	ldr	r3, [r7, #4]
10003174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
10003176:	f003 031f 	and.w	r3, r3, #31
1000317a:	223f      	movs	r2, #63	; 0x3f
1000317c:	409a      	lsls	r2, r3
1000317e:	68fb      	ldr	r3, [r7, #12]
10003180:	609a      	str	r2, [r3, #8]
  }

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
10003182:	6878      	ldr	r0, [r7, #4]
10003184:	f000 fb88 	bl	10003898 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
10003188:	687b      	ldr	r3, [r7, #4]
1000318a:	689b      	ldr	r3, [r3, #8]
1000318c:	2b80      	cmp	r3, #128	; 0x80
1000318e:	d10c      	bne.n	100031aa <HAL_DMA_Init+0x186>
10003190:	e008      	b.n	100031a4 <HAL_DMA_Init+0x180>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
10003192:	687b      	ldr	r3, [r7, #4]
10003194:	2240      	movs	r2, #64	; 0x40
10003196:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
10003198:	687b      	ldr	r3, [r7, #4]
1000319a:	2203      	movs	r2, #3
1000319c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    return HAL_ERROR;
100031a0:	2301      	movs	r3, #1
100031a2:	e033      	b.n	1000320c <HAL_DMA_Init+0x1e8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
100031a4:	687b      	ldr	r3, [r7, #4]
100031a6:	2200      	movs	r2, #0
100031a8:	605a      	str	r2, [r3, #4]
  }


  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
100031aa:	687b      	ldr	r3, [r7, #4]
100031ac:	685a      	ldr	r2, [r3, #4]
100031ae:	687b      	ldr	r3, [r7, #4]
100031b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
100031b2:	b2d2      	uxtb	r2, r2
100031b4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
100031b6:	687b      	ldr	r3, [r7, #4]
100031b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
100031ba:	687a      	ldr	r2, [r7, #4]
100031bc:	6e92      	ldr	r2, [r2, #104]	; 0x68
100031be:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX request generator :
     if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
  */

  if ((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
100031c0:	687b      	ldr	r3, [r7, #4]
100031c2:	685b      	ldr	r3, [r3, #4]
100031c4:	2b00      	cmp	r3, #0
100031c6:	d010      	beq.n	100031ea <HAL_DMA_Init+0x1c6>
100031c8:	687b      	ldr	r3, [r7, #4]
100031ca:	685b      	ldr	r3, [r3, #4]
100031cc:	2b08      	cmp	r3, #8
100031ce:	d80c      	bhi.n	100031ea <HAL_DMA_Init+0x1c6>
  {
    /* Initialize parameters for DMAMUX request generator :
    DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
100031d0:	6878      	ldr	r0, [r7, #4]
100031d2:	f000 fb9d 	bl	10003910 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
100031d6:	687b      	ldr	r3, [r7, #4]
100031d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
100031da:	2200      	movs	r2, #0
100031dc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
100031de:	687b      	ldr	r3, [r7, #4]
100031e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
100031e2:	687a      	ldr	r2, [r7, #4]
100031e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
100031e6:	605a      	str	r2, [r3, #4]
100031e8:	e008      	b.n	100031fc <HAL_DMA_Init+0x1d8>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
100031ea:	687b      	ldr	r3, [r7, #4]
100031ec:	2200      	movs	r2, #0
100031ee:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
100031f0:	687b      	ldr	r3, [r7, #4]
100031f2:	2200      	movs	r2, #0
100031f4:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
100031f6:	687b      	ldr	r3, [r7, #4]
100031f8:	2200      	movs	r2, #0
100031fa:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
100031fc:	687b      	ldr	r3, [r7, #4]
100031fe:	2200      	movs	r2, #0
10003200:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
10003202:	687b      	ldr	r3, [r7, #4]
10003204:	2201      	movs	r2, #1
10003206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
1000320a:	2300      	movs	r3, #0
}
1000320c:	4618      	mov	r0, r3
1000320e:	3718      	adds	r7, #24
10003210:	46bd      	mov	sp, r7
10003212:	bd80      	pop	{r7, pc}
10003214:	4800000f 	.word	0x4800000f
10003218:	480010b8 	.word	0x480010b8
1000321c:	fe10803f 	.word	0xfe10803f

10003220 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
10003220:	b580      	push	{r7, lr}
10003222:	b086      	sub	sp, #24
10003224:	af00      	add	r7, sp, #0
10003226:	60f8      	str	r0, [r7, #12]
10003228:	60b9      	str	r1, [r7, #8]
1000322a:	607a      	str	r2, [r7, #4]
1000322c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
1000322e:	2300      	movs	r3, #0
10003230:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
10003232:	68fb      	ldr	r3, [r7, #12]
10003234:	2b00      	cmp	r3, #0
10003236:	d101      	bne.n	1000323c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
10003238:	2301      	movs	r3, #1
1000323a:	e06a      	b.n	10003312 <HAL_DMA_Start_IT+0xf2>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
1000323c:	68fb      	ldr	r3, [r7, #12]
1000323e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
10003242:	2b01      	cmp	r3, #1
10003244:	d101      	bne.n	1000324a <HAL_DMA_Start_IT+0x2a>
10003246:	2302      	movs	r3, #2
10003248:	e063      	b.n	10003312 <HAL_DMA_Start_IT+0xf2>
1000324a:	68fb      	ldr	r3, [r7, #12]
1000324c:	2201      	movs	r2, #1
1000324e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (HAL_DMA_STATE_READY == hdma->State)
10003252:	68fb      	ldr	r3, [r7, #12]
10003254:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
10003258:	b2db      	uxtb	r3, r3
1000325a:	2b01      	cmp	r3, #1
1000325c:	d14e      	bne.n	100032fc <HAL_DMA_Start_IT+0xdc>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
1000325e:	68fb      	ldr	r3, [r7, #12]
10003260:	2202      	movs	r2, #2
10003262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
10003266:	68fb      	ldr	r3, [r7, #12]
10003268:	2200      	movs	r2, #0
1000326a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
1000326c:	68fb      	ldr	r3, [r7, #12]
1000326e:	681b      	ldr	r3, [r3, #0]
10003270:	681a      	ldr	r2, [r3, #0]
10003272:	68fb      	ldr	r3, [r7, #12]
10003274:	681b      	ldr	r3, [r3, #0]
10003276:	f022 0201 	bic.w	r2, r2, #1
1000327a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
1000327c:	683b      	ldr	r3, [r7, #0]
1000327e:	687a      	ldr	r2, [r7, #4]
10003280:	68b9      	ldr	r1, [r7, #8]
10003282:	68f8      	ldr	r0, [r7, #12]
10003284:	f000 fa0e 	bl	100036a4 <DMA_SetConfig>

    /* Enable Common interrupts*/
    MODIFY_REG(((DMA_Stream_TypeDef *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
10003288:	68fb      	ldr	r3, [r7, #12]
1000328a:	681b      	ldr	r3, [r3, #0]
1000328c:	681b      	ldr	r3, [r3, #0]
1000328e:	f023 021e 	bic.w	r2, r3, #30
10003292:	68fb      	ldr	r3, [r7, #12]
10003294:	681b      	ldr	r3, [r3, #0]
10003296:	f042 0216 	orr.w	r2, r2, #22
1000329a:	601a      	str	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
1000329c:	68fb      	ldr	r3, [r7, #12]
1000329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100032a0:	2b00      	cmp	r3, #0
100032a2:	d007      	beq.n	100032b4 <HAL_DMA_Start_IT+0x94>
    {
      /*Enable Half Transfer IT if corresponding Callback is set*/
      ((DMA_Stream_TypeDef *)hdma->Instance)->CR  |= DMA_IT_HT;
100032a4:	68fb      	ldr	r3, [r7, #12]
100032a6:	681b      	ldr	r3, [r3, #0]
100032a8:	681a      	ldr	r2, [r3, #0]
100032aa:	68fb      	ldr	r3, [r7, #12]
100032ac:	681b      	ldr	r3, [r3, #0]
100032ae:	f042 0208 	orr.w	r2, r2, #8
100032b2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
100032b4:	68fb      	ldr	r3, [r7, #12]
100032b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
100032b8:	681b      	ldr	r3, [r3, #0]
100032ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
100032be:	2b00      	cmp	r3, #0
100032c0:	d007      	beq.n	100032d2 <HAL_DMA_Start_IT+0xb2>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
100032c2:	68fb      	ldr	r3, [r7, #12]
100032c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
100032c6:	681a      	ldr	r2, [r3, #0]
100032c8:	68fb      	ldr	r3, [r7, #12]
100032ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
100032cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
100032d0:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
100032d2:	68fb      	ldr	r3, [r7, #12]
100032d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
100032d6:	2b00      	cmp	r3, #0
100032d8:	d007      	beq.n	100032ea <HAL_DMA_Start_IT+0xca>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
100032da:	68fb      	ldr	r3, [r7, #12]
100032dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
100032de:	681a      	ldr	r2, [r3, #0]
100032e0:	68fb      	ldr	r3, [r7, #12]
100032e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
100032e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
100032e8:	601a      	str	r2, [r3, #0]

    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
100032ea:	68fb      	ldr	r3, [r7, #12]
100032ec:	681b      	ldr	r3, [r3, #0]
100032ee:	681a      	ldr	r2, [r3, #0]
100032f0:	68fb      	ldr	r3, [r7, #12]
100032f2:	681b      	ldr	r3, [r3, #0]
100032f4:	f042 0201 	orr.w	r2, r2, #1
100032f8:	601a      	str	r2, [r3, #0]
100032fa:	e009      	b.n	10003310 <HAL_DMA_Start_IT+0xf0>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
100032fc:	68fb      	ldr	r3, [r7, #12]
100032fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
10003302:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
10003304:	68fb      	ldr	r3, [r7, #12]
10003306:	2200      	movs	r2, #0
10003308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
1000330c:	2301      	movs	r3, #1
1000330e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
10003310:	7dfb      	ldrb	r3, [r7, #23]
}
10003312:	4618      	mov	r0, r3
10003314:	3718      	adds	r7, #24
10003316:	46bd      	mov	sp, r7
10003318:	bd80      	pop	{r7, pc}
	...

1000331c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
1000331c:	b580      	push	{r7, lr}
1000331e:	b086      	sub	sp, #24
10003320:	af00      	add	r7, sp, #0
10003322:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma;
  __IO uint32_t count = 0U;
10003324:	2300      	movs	r3, #0
10003326:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
10003328:	4b97      	ldr	r3, [pc, #604]	; (10003588 <HAL_DMA_IRQHandler+0x26c>)
1000332a:	681b      	ldr	r3, [r3, #0]
1000332c:	4a97      	ldr	r2, [pc, #604]	; (1000358c <HAL_DMA_IRQHandler+0x270>)
1000332e:	fba2 2303 	umull	r2, r3, r2, r3
10003332:	0a9b      	lsrs	r3, r3, #10
10003334:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
10003336:	687b      	ldr	r3, [r7, #4]
10003338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
1000333a:	613b      	str	r3, [r7, #16]

  tmpisr_dma = regs_dma->ISR;
1000333c:	693b      	ldr	r3, [r7, #16]
1000333e:	681b      	ldr	r3, [r3, #0]
10003340:	60fb      	str	r3, [r7, #12]

  if(IS_DMA_INSTANCE(hdma) != 0U)  /* DMA1 or DMA2 instance */
10003342:	687b      	ldr	r3, [r7, #4]
10003344:	681b      	ldr	r3, [r3, #0]
10003346:	461a      	mov	r2, r3
10003348:	4b91      	ldr	r3, [pc, #580]	; (10003590 <HAL_DMA_IRQHandler+0x274>)
1000334a:	429a      	cmp	r2, r3
1000334c:	d907      	bls.n	1000335e <HAL_DMA_IRQHandler+0x42>
1000334e:	687b      	ldr	r3, [r7, #4]
10003350:	681b      	ldr	r3, [r3, #0]
10003352:	461a      	mov	r2, r3
10003354:	4b8f      	ldr	r3, [pc, #572]	; (10003594 <HAL_DMA_IRQHandler+0x278>)
10003356:	429a      	cmp	r2, r3
10003358:	d801      	bhi.n	1000335e <HAL_DMA_IRQHandler+0x42>
1000335a:	2301      	movs	r3, #1
1000335c:	e000      	b.n	10003360 <HAL_DMA_IRQHandler+0x44>
1000335e:	2300      	movs	r3, #0
10003360:	2b00      	cmp	r3, #0
10003362:	f000 819b 	beq.w	1000369c <HAL_DMA_IRQHandler+0x380>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
10003366:	687b      	ldr	r3, [r7, #4]
10003368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
1000336a:	f003 031f 	and.w	r3, r3, #31
1000336e:	2208      	movs	r2, #8
10003370:	409a      	lsls	r2, r3
10003372:	68fb      	ldr	r3, [r7, #12]
10003374:	4013      	ands	r3, r2
10003376:	2b00      	cmp	r3, #0
10003378:	d01c      	beq.n	100033b4 <HAL_DMA_IRQHandler+0x98>
    {
      if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
1000337a:	687b      	ldr	r3, [r7, #4]
1000337c:	681b      	ldr	r3, [r3, #0]
1000337e:	681b      	ldr	r3, [r3, #0]
10003380:	f003 0304 	and.w	r3, r3, #4
10003384:	2b00      	cmp	r3, #0
10003386:	d015      	beq.n	100033b4 <HAL_DMA_IRQHandler+0x98>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
10003388:	687b      	ldr	r3, [r7, #4]
1000338a:	681b      	ldr	r3, [r3, #0]
1000338c:	681a      	ldr	r2, [r3, #0]
1000338e:	687b      	ldr	r3, [r7, #4]
10003390:	681b      	ldr	r3, [r3, #0]
10003392:	f022 0204 	bic.w	r2, r2, #4
10003396:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
10003398:	687b      	ldr	r3, [r7, #4]
1000339a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
1000339c:	f003 031f 	and.w	r3, r3, #31
100033a0:	2208      	movs	r2, #8
100033a2:	409a      	lsls	r2, r3
100033a4:	693b      	ldr	r3, [r7, #16]
100033a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
100033a8:	687b      	ldr	r3, [r7, #4]
100033aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100033ac:	f043 0201 	orr.w	r2, r3, #1
100033b0:	687b      	ldr	r3, [r7, #4]
100033b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
100033b4:	687b      	ldr	r3, [r7, #4]
100033b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
100033b8:	f003 031f 	and.w	r3, r3, #31
100033bc:	68fa      	ldr	r2, [r7, #12]
100033be:	fa22 f303 	lsr.w	r3, r2, r3
100033c2:	f003 0301 	and.w	r3, r3, #1
100033c6:	2b00      	cmp	r3, #0
100033c8:	d014      	beq.n	100033f4 <HAL_DMA_IRQHandler+0xd8>
    {
      if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
100033ca:	687b      	ldr	r3, [r7, #4]
100033cc:	681b      	ldr	r3, [r3, #0]
100033ce:	695b      	ldr	r3, [r3, #20]
100033d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
100033d4:	2b00      	cmp	r3, #0
100033d6:	d00d      	beq.n	100033f4 <HAL_DMA_IRQHandler+0xd8>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
100033d8:	687b      	ldr	r3, [r7, #4]
100033da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
100033dc:	f003 031f 	and.w	r3, r3, #31
100033e0:	2201      	movs	r2, #1
100033e2:	409a      	lsls	r2, r3
100033e4:	693b      	ldr	r3, [r7, #16]
100033e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
100033e8:	687b      	ldr	r3, [r7, #4]
100033ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100033ec:	f043 0202 	orr.w	r2, r3, #2
100033f0:	687b      	ldr	r3, [r7, #4]
100033f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
100033f4:	687b      	ldr	r3, [r7, #4]
100033f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
100033f8:	f003 031f 	and.w	r3, r3, #31
100033fc:	2204      	movs	r2, #4
100033fe:	409a      	lsls	r2, r3
10003400:	68fb      	ldr	r3, [r7, #12]
10003402:	4013      	ands	r3, r2
10003404:	2b00      	cmp	r3, #0
10003406:	d014      	beq.n	10003432 <HAL_DMA_IRQHandler+0x116>
    {
      if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
10003408:	687b      	ldr	r3, [r7, #4]
1000340a:	681b      	ldr	r3, [r3, #0]
1000340c:	681b      	ldr	r3, [r3, #0]
1000340e:	f003 0302 	and.w	r3, r3, #2
10003412:	2b00      	cmp	r3, #0
10003414:	d00d      	beq.n	10003432 <HAL_DMA_IRQHandler+0x116>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
10003416:	687b      	ldr	r3, [r7, #4]
10003418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
1000341a:	f003 031f 	and.w	r3, r3, #31
1000341e:	2204      	movs	r2, #4
10003420:	409a      	lsls	r2, r3
10003422:	693b      	ldr	r3, [r7, #16]
10003424:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
10003426:	687b      	ldr	r3, [r7, #4]
10003428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000342a:	f043 0204 	orr.w	r2, r3, #4
1000342e:	687b      	ldr	r3, [r7, #4]
10003430:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
10003432:	687b      	ldr	r3, [r7, #4]
10003434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
10003436:	f003 031f 	and.w	r3, r3, #31
1000343a:	2210      	movs	r2, #16
1000343c:	409a      	lsls	r2, r3
1000343e:	68fb      	ldr	r3, [r7, #12]
10003440:	4013      	ands	r3, r2
10003442:	2b00      	cmp	r3, #0
10003444:	d045      	beq.n	100034d2 <HAL_DMA_IRQHandler+0x1b6>
    {
      if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
10003446:	687b      	ldr	r3, [r7, #4]
10003448:	681b      	ldr	r3, [r3, #0]
1000344a:	681b      	ldr	r3, [r3, #0]
1000344c:	f003 0308 	and.w	r3, r3, #8
10003450:	2b00      	cmp	r3, #0
10003452:	d03e      	beq.n	100034d2 <HAL_DMA_IRQHandler+0x1b6>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
10003454:	687b      	ldr	r3, [r7, #4]
10003456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
10003458:	f003 031f 	and.w	r3, r3, #31
1000345c:	2210      	movs	r2, #16
1000345e:	409a      	lsls	r2, r3
10003460:	693b      	ldr	r3, [r7, #16]
10003462:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if (((((DMA_Stream_TypeDef *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
10003464:	687b      	ldr	r3, [r7, #4]
10003466:	681b      	ldr	r3, [r3, #0]
10003468:	681b      	ldr	r3, [r3, #0]
1000346a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
1000346e:	2b00      	cmp	r3, #0
10003470:	d018      	beq.n	100034a4 <HAL_DMA_IRQHandler+0x188>
        {
          /* Current memory buffer used is Memory 0 */
          if ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
10003472:	687b      	ldr	r3, [r7, #4]
10003474:	681b      	ldr	r3, [r3, #0]
10003476:	681b      	ldr	r3, [r3, #0]
10003478:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
1000347c:	2b00      	cmp	r3, #0
1000347e:	d108      	bne.n	10003492 <HAL_DMA_IRQHandler+0x176>
          {
            if (hdma->XferHalfCpltCallback != NULL)
10003480:	687b      	ldr	r3, [r7, #4]
10003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10003484:	2b00      	cmp	r3, #0
10003486:	d024      	beq.n	100034d2 <HAL_DMA_IRQHandler+0x1b6>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
10003488:	687b      	ldr	r3, [r7, #4]
1000348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000348c:	6878      	ldr	r0, [r7, #4]
1000348e:	4798      	blx	r3
10003490:	e01f      	b.n	100034d2 <HAL_DMA_IRQHandler+0x1b6>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if (hdma->XferM1HalfCpltCallback != NULL)
10003492:	687b      	ldr	r3, [r7, #4]
10003494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003496:	2b00      	cmp	r3, #0
10003498:	d01b      	beq.n	100034d2 <HAL_DMA_IRQHandler+0x1b6>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
1000349a:	687b      	ldr	r3, [r7, #4]
1000349c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000349e:	6878      	ldr	r0, [r7, #4]
100034a0:	4798      	blx	r3
100034a2:	e016      	b.n	100034d2 <HAL_DMA_IRQHandler+0x1b6>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
100034a4:	687b      	ldr	r3, [r7, #4]
100034a6:	681b      	ldr	r3, [r3, #0]
100034a8:	681b      	ldr	r3, [r3, #0]
100034aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
100034ae:	2b00      	cmp	r3, #0
100034b0:	d107      	bne.n	100034c2 <HAL_DMA_IRQHandler+0x1a6>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
100034b2:	687b      	ldr	r3, [r7, #4]
100034b4:	681b      	ldr	r3, [r3, #0]
100034b6:	681a      	ldr	r2, [r3, #0]
100034b8:	687b      	ldr	r3, [r7, #4]
100034ba:	681b      	ldr	r3, [r3, #0]
100034bc:	f022 0208 	bic.w	r2, r2, #8
100034c0:	601a      	str	r2, [r3, #0]
          }

          if (hdma->XferHalfCpltCallback != NULL)
100034c2:	687b      	ldr	r3, [r7, #4]
100034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100034c6:	2b00      	cmp	r3, #0
100034c8:	d003      	beq.n	100034d2 <HAL_DMA_IRQHandler+0x1b6>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
100034ca:	687b      	ldr	r3, [r7, #4]
100034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100034ce:	6878      	ldr	r0, [r7, #4]
100034d0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
100034d2:	687b      	ldr	r3, [r7, #4]
100034d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
100034d6:	f003 031f 	and.w	r3, r3, #31
100034da:	2220      	movs	r2, #32
100034dc:	409a      	lsls	r2, r3
100034de:	68fb      	ldr	r3, [r7, #12]
100034e0:	4013      	ands	r3, r2
100034e2:	2b00      	cmp	r3, #0
100034e4:	f000 8097 	beq.w	10003616 <HAL_DMA_IRQHandler+0x2fa>
    {
      if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
100034e8:	687b      	ldr	r3, [r7, #4]
100034ea:	681b      	ldr	r3, [r3, #0]
100034ec:	681b      	ldr	r3, [r3, #0]
100034ee:	f003 0310 	and.w	r3, r3, #16
100034f2:	2b00      	cmp	r3, #0
100034f4:	f000 808f 	beq.w	10003616 <HAL_DMA_IRQHandler+0x2fa>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
100034f8:	687b      	ldr	r3, [r7, #4]
100034fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
100034fc:	f003 031f 	and.w	r3, r3, #31
10003500:	2220      	movs	r2, #32
10003502:	409a      	lsls	r2, r3
10003504:	693b      	ldr	r3, [r7, #16]
10003506:	609a      	str	r2, [r3, #8]

        if (HAL_DMA_STATE_ABORT == hdma->State)
10003508:	687b      	ldr	r3, [r7, #4]
1000350a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
1000350e:	b2db      	uxtb	r3, r3
10003510:	2b04      	cmp	r3, #4
10003512:	d141      	bne.n	10003598 <HAL_DMA_IRQHandler+0x27c>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
10003514:	687b      	ldr	r3, [r7, #4]
10003516:	681b      	ldr	r3, [r3, #0]
10003518:	681a      	ldr	r2, [r3, #0]
1000351a:	687b      	ldr	r3, [r7, #4]
1000351c:	681b      	ldr	r3, [r3, #0]
1000351e:	f022 0216 	bic.w	r2, r2, #22
10003522:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
10003524:	687b      	ldr	r3, [r7, #4]
10003526:	681b      	ldr	r3, [r3, #0]
10003528:	695a      	ldr	r2, [r3, #20]
1000352a:	687b      	ldr	r3, [r7, #4]
1000352c:	681b      	ldr	r3, [r3, #0]
1000352e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
10003532:	615a      	str	r2, [r3, #20]

          if ((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
10003534:	687b      	ldr	r3, [r7, #4]
10003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10003538:	2b00      	cmp	r3, #0
1000353a:	d103      	bne.n	10003544 <HAL_DMA_IRQHandler+0x228>
1000353c:	687b      	ldr	r3, [r7, #4]
1000353e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003540:	2b00      	cmp	r3, #0
10003542:	d007      	beq.n	10003554 <HAL_DMA_IRQHandler+0x238>
          {
            ((DMA_Stream_TypeDef *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
10003544:	687b      	ldr	r3, [r7, #4]
10003546:	681b      	ldr	r3, [r3, #0]
10003548:	681a      	ldr	r2, [r3, #0]
1000354a:	687b      	ldr	r3, [r7, #4]
1000354c:	681b      	ldr	r3, [r3, #0]
1000354e:	f022 0208 	bic.w	r2, r2, #8
10003552:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
10003554:	687b      	ldr	r3, [r7, #4]
10003556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
10003558:	f003 031f 	and.w	r3, r3, #31
1000355c:	223f      	movs	r2, #63	; 0x3f
1000355e:	409a      	lsls	r2, r3
10003560:	693b      	ldr	r3, [r7, #16]
10003562:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
10003564:	687b      	ldr	r3, [r7, #4]
10003566:	2201      	movs	r2, #1
10003568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
1000356c:	687b      	ldr	r3, [r7, #4]
1000356e:	2200      	movs	r2, #0
10003570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if (hdma->XferAbortCallback != NULL)
10003574:	687b      	ldr	r3, [r7, #4]
10003576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
10003578:	2b00      	cmp	r3, #0
1000357a:	f000 808e 	beq.w	1000369a <HAL_DMA_IRQHandler+0x37e>
          {
            hdma->XferAbortCallback(hdma);
1000357e:	687b      	ldr	r3, [r7, #4]
10003580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
10003582:	6878      	ldr	r0, [r7, #4]
10003584:	4798      	blx	r3
          }
          return;
10003586:	e088      	b.n	1000369a <HAL_DMA_IRQHandler+0x37e>
10003588:	10020000 	.word	0x10020000
1000358c:	1b4e81b5 	.word	0x1b4e81b5
10003590:	4800000f 	.word	0x4800000f
10003594:	480010b8 	.word	0x480010b8
        }

        if (((((DMA_Stream_TypeDef *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
10003598:	687b      	ldr	r3, [r7, #4]
1000359a:	681b      	ldr	r3, [r3, #0]
1000359c:	681b      	ldr	r3, [r3, #0]
1000359e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
100035a2:	2b00      	cmp	r3, #0
100035a4:	d018      	beq.n	100035d8 <HAL_DMA_IRQHandler+0x2bc>
        {
          /* Current memory buffer used is Memory 0 */
          if ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
100035a6:	687b      	ldr	r3, [r7, #4]
100035a8:	681b      	ldr	r3, [r3, #0]
100035aa:	681b      	ldr	r3, [r3, #0]
100035ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
100035b0:	2b00      	cmp	r3, #0
100035b2:	d108      	bne.n	100035c6 <HAL_DMA_IRQHandler+0x2aa>
          {
            if (hdma->XferM1CpltCallback != NULL)
100035b4:	687b      	ldr	r3, [r7, #4]
100035b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
100035b8:	2b00      	cmp	r3, #0
100035ba:	d02c      	beq.n	10003616 <HAL_DMA_IRQHandler+0x2fa>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
100035bc:	687b      	ldr	r3, [r7, #4]
100035be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
100035c0:	6878      	ldr	r0, [r7, #4]
100035c2:	4798      	blx	r3
100035c4:	e027      	b.n	10003616 <HAL_DMA_IRQHandler+0x2fa>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if (hdma->XferCpltCallback != NULL)
100035c6:	687b      	ldr	r3, [r7, #4]
100035c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100035ca:	2b00      	cmp	r3, #0
100035cc:	d023      	beq.n	10003616 <HAL_DMA_IRQHandler+0x2fa>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
100035ce:	687b      	ldr	r3, [r7, #4]
100035d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100035d2:	6878      	ldr	r0, [r7, #4]
100035d4:	4798      	blx	r3
100035d6:	e01e      	b.n	10003616 <HAL_DMA_IRQHandler+0x2fa>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
100035d8:	687b      	ldr	r3, [r7, #4]
100035da:	681b      	ldr	r3, [r3, #0]
100035dc:	681b      	ldr	r3, [r3, #0]
100035de:	f403 7380 	and.w	r3, r3, #256	; 0x100
100035e2:	2b00      	cmp	r3, #0
100035e4:	d10f      	bne.n	10003606 <HAL_DMA_IRQHandler+0x2ea>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
100035e6:	687b      	ldr	r3, [r7, #4]
100035e8:	681b      	ldr	r3, [r3, #0]
100035ea:	681a      	ldr	r2, [r3, #0]
100035ec:	687b      	ldr	r3, [r7, #4]
100035ee:	681b      	ldr	r3, [r3, #0]
100035f0:	f022 0210 	bic.w	r2, r2, #16
100035f4:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
100035f6:	687b      	ldr	r3, [r7, #4]
100035f8:	2201      	movs	r2, #1
100035fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
100035fe:	687b      	ldr	r3, [r7, #4]
10003600:	2200      	movs	r2, #0
10003602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if (hdma->XferCpltCallback != NULL)
10003606:	687b      	ldr	r3, [r7, #4]
10003608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000360a:	2b00      	cmp	r3, #0
1000360c:	d003      	beq.n	10003616 <HAL_DMA_IRQHandler+0x2fa>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
1000360e:	687b      	ldr	r3, [r7, #4]
10003610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10003612:	6878      	ldr	r0, [r7, #4]
10003614:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
10003616:	687b      	ldr	r3, [r7, #4]
10003618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000361a:	2b00      	cmp	r3, #0
1000361c:	d03e      	beq.n	1000369c <HAL_DMA_IRQHandler+0x380>
    {
      if ((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
1000361e:	687b      	ldr	r3, [r7, #4]
10003620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10003622:	f003 0301 	and.w	r3, r3, #1
10003626:	2b00      	cmp	r3, #0
10003628:	d02e      	beq.n	10003688 <HAL_DMA_IRQHandler+0x36c>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
1000362a:	687b      	ldr	r3, [r7, #4]
1000362c:	2204      	movs	r2, #4
1000362e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
10003632:	687b      	ldr	r3, [r7, #4]
10003634:	681b      	ldr	r3, [r3, #0]
10003636:	681a      	ldr	r2, [r3, #0]
10003638:	687b      	ldr	r3, [r7, #4]
1000363a:	681b      	ldr	r3, [r3, #0]
1000363c:	f022 0201 	bic.w	r2, r2, #1
10003640:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
10003642:	68bb      	ldr	r3, [r7, #8]
10003644:	3301      	adds	r3, #1
10003646:	60bb      	str	r3, [r7, #8]
10003648:	697a      	ldr	r2, [r7, #20]
1000364a:	429a      	cmp	r2, r3
1000364c:	d307      	bcc.n	1000365e <HAL_DMA_IRQHandler+0x342>
          {
            break;
          }
        }
        while ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
1000364e:	687b      	ldr	r3, [r7, #4]
10003650:	681b      	ldr	r3, [r3, #0]
10003652:	681b      	ldr	r3, [r3, #0]
10003654:	f003 0301 	and.w	r3, r3, #1
10003658:	2b00      	cmp	r3, #0
1000365a:	d1f2      	bne.n	10003642 <HAL_DMA_IRQHandler+0x326>
1000365c:	e000      	b.n	10003660 <HAL_DMA_IRQHandler+0x344>
            break;
1000365e:	bf00      	nop

        if ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
10003660:	687b      	ldr	r3, [r7, #4]
10003662:	681b      	ldr	r3, [r3, #0]
10003664:	681b      	ldr	r3, [r3, #0]
10003666:	f003 0301 	and.w	r3, r3, #1
1000366a:	2b00      	cmp	r3, #0
1000366c:	d004      	beq.n	10003678 <HAL_DMA_IRQHandler+0x35c>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
1000366e:	687b      	ldr	r3, [r7, #4]
10003670:	2203      	movs	r2, #3
10003672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
10003676:	e003      	b.n	10003680 <HAL_DMA_IRQHandler+0x364>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
10003678:	687b      	ldr	r3, [r7, #4]
1000367a:	2201      	movs	r2, #1
1000367c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
10003680:	687b      	ldr	r3, [r7, #4]
10003682:	2200      	movs	r2, #0
10003684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if (hdma->XferErrorCallback != NULL)
10003688:	687b      	ldr	r3, [r7, #4]
1000368a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
1000368c:	2b00      	cmp	r3, #0
1000368e:	d005      	beq.n	1000369c <HAL_DMA_IRQHandler+0x380>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
10003690:	687b      	ldr	r3, [r7, #4]
10003692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10003694:	6878      	ldr	r0, [r7, #4]
10003696:	4798      	blx	r3
10003698:	e000      	b.n	1000369c <HAL_DMA_IRQHandler+0x380>
          return;
1000369a:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
1000369c:	3718      	adds	r7, #24
1000369e:	46bd      	mov	sp, r7
100036a0:	bd80      	pop	{r7, pc}
100036a2:	bf00      	nop

100036a4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
100036a4:	b480      	push	{r7}
100036a6:	b087      	sub	sp, #28
100036a8:	af00      	add	r7, sp, #0
100036aa:	60f8      	str	r0, [r7, #12]
100036ac:	60b9      	str	r1, [r7, #8]
100036ae:	607a      	str	r2, [r7, #4]
100036b0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
100036b2:	68fb      	ldr	r3, [r7, #12]
100036b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
100036b6:	617b      	str	r3, [r7, #20]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
100036b8:	68fb      	ldr	r3, [r7, #12]
100036ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
100036bc:	68fa      	ldr	r2, [r7, #12]
100036be:	6e92      	ldr	r2, [r2, #104]	; 0x68
100036c0:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
100036c2:	68fb      	ldr	r3, [r7, #12]
100036c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
100036c6:	2b00      	cmp	r3, #0
100036c8:	d004      	beq.n	100036d4 <DMA_SetConfig+0x30>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
100036ca:	68fb      	ldr	r3, [r7, #12]
100036cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
100036ce:	68fa      	ldr	r2, [r7, #12]
100036d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
100036d2:	605a      	str	r2, [r3, #4]
  }
  /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
100036d4:	68fb      	ldr	r3, [r7, #12]
100036d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
100036d8:	f003 031f 	and.w	r3, r3, #31
100036dc:	223f      	movs	r2, #63	; 0x3f
100036de:	409a      	lsls	r2, r3
100036e0:	697b      	ldr	r3, [r7, #20]
100036e2:	609a      	str	r2, [r3, #8]

  /* Clear DBM bit */
  ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
100036e4:	68fb      	ldr	r3, [r7, #12]
100036e6:	681b      	ldr	r3, [r3, #0]
100036e8:	681a      	ldr	r2, [r3, #0]
100036ea:	68fb      	ldr	r3, [r7, #12]
100036ec:	681b      	ldr	r3, [r3, #0]
100036ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
100036f2:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
100036f4:	68fb      	ldr	r3, [r7, #12]
100036f6:	681b      	ldr	r3, [r3, #0]
100036f8:	683a      	ldr	r2, [r7, #0]
100036fa:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
100036fc:	68fb      	ldr	r3, [r7, #12]
100036fe:	689b      	ldr	r3, [r3, #8]
10003700:	2b40      	cmp	r3, #64	; 0x40
10003702:	d108      	bne.n	10003716 <DMA_SetConfig+0x72>
  {
    /* Configure DMA Stream destination address */
    ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
10003704:	68fb      	ldr	r3, [r7, #12]
10003706:	681b      	ldr	r3, [r3, #0]
10003708:	687a      	ldr	r2, [r7, #4]
1000370a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
1000370c:	68fb      	ldr	r3, [r7, #12]
1000370e:	681b      	ldr	r3, [r3, #0]
10003710:	68ba      	ldr	r2, [r7, #8]
10003712:	60da      	str	r2, [r3, #12]
    ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
  }
}
10003714:	e007      	b.n	10003726 <DMA_SetConfig+0x82>
    ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
10003716:	68fb      	ldr	r3, [r7, #12]
10003718:	681b      	ldr	r3, [r3, #0]
1000371a:	68ba      	ldr	r2, [r7, #8]
1000371c:	609a      	str	r2, [r3, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
1000371e:	68fb      	ldr	r3, [r7, #12]
10003720:	681b      	ldr	r3, [r3, #0]
10003722:	687a      	ldr	r2, [r7, #4]
10003724:	60da      	str	r2, [r3, #12]
}
10003726:	bf00      	nop
10003728:	371c      	adds	r7, #28
1000372a:	46bd      	mov	sp, r7
1000372c:	f85d 7b04 	ldr.w	r7, [sp], #4
10003730:	4770      	bx	lr
	...

10003734 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
10003734:	b480      	push	{r7}
10003736:	b085      	sub	sp, #20
10003738:	af00      	add	r7, sp, #0
1000373a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)((uint32_t *)hdma->Instance) & 0xFFU) - 16U) / 24U;
1000373c:	687b      	ldr	r3, [r7, #4]
1000373e:	681b      	ldr	r3, [r3, #0]
10003740:	b2db      	uxtb	r3, r3
10003742:	3b10      	subs	r3, #16
10003744:	4a14      	ldr	r2, [pc, #80]	; (10003798 <DMA_CalcBaseAndBitshift+0x64>)
10003746:	fba2 2303 	umull	r2, r3, r2, r3
1000374a:	091b      	lsrs	r3, r3, #4
1000374c:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
1000374e:	68fb      	ldr	r3, [r7, #12]
10003750:	f003 0307 	and.w	r3, r3, #7
10003754:	4a11      	ldr	r2, [pc, #68]	; (1000379c <DMA_CalcBaseAndBitshift+0x68>)
10003756:	5cd3      	ldrb	r3, [r2, r3]
10003758:	461a      	mov	r2, r3
1000375a:	687b      	ldr	r3, [r7, #4]
1000375c:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
1000375e:	68fb      	ldr	r3, [r7, #12]
10003760:	2b03      	cmp	r3, #3
10003762:	d909      	bls.n	10003778 <DMA_CalcBaseAndBitshift+0x44>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)((uint32_t *)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
10003764:	687b      	ldr	r3, [r7, #4]
10003766:	681b      	ldr	r3, [r3, #0]
10003768:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
1000376c:	f023 0303 	bic.w	r3, r3, #3
10003770:	1d1a      	adds	r2, r3, #4
10003772:	687b      	ldr	r3, [r7, #4]
10003774:	659a      	str	r2, [r3, #88]	; 0x58
10003776:	e007      	b.n	10003788 <DMA_CalcBaseAndBitshift+0x54>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t *)hdma->Instance) & (uint32_t)(~0x3FFU));
10003778:	687b      	ldr	r3, [r7, #4]
1000377a:	681b      	ldr	r3, [r3, #0]
1000377c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
10003780:	f023 0303 	bic.w	r3, r3, #3
10003784:	687a      	ldr	r2, [r7, #4]
10003786:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
10003788:	687b      	ldr	r3, [r7, #4]
1000378a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
1000378c:	4618      	mov	r0, r3
1000378e:	3714      	adds	r7, #20
10003790:	46bd      	mov	sp, r7
10003792:	f85d 7b04 	ldr.w	r7, [sp], #4
10003796:	4770      	bx	lr
10003798:	aaaaaaab 	.word	0xaaaaaaab
1000379c:	1000e800 	.word	0x1000e800

100037a0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
100037a0:	b480      	push	{r7}
100037a2:	b085      	sub	sp, #20
100037a4:	af00      	add	r7, sp, #0
100037a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
100037a8:	2300      	movs	r3, #0
100037aa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
100037ac:	687b      	ldr	r3, [r7, #4]
100037ae:	699b      	ldr	r3, [r3, #24]
100037b0:	2b00      	cmp	r3, #0
100037b2:	d120      	bne.n	100037f6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
100037b4:	687b      	ldr	r3, [r7, #4]
100037b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100037b8:	2b03      	cmp	r3, #3
100037ba:	d858      	bhi.n	1000386e <DMA_CheckFifoParam+0xce>
100037bc:	a201      	add	r2, pc, #4	; (adr r2, 100037c4 <DMA_CheckFifoParam+0x24>)
100037be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100037c2:	bf00      	nop
100037c4:	100037d5 	.word	0x100037d5
100037c8:	100037e7 	.word	0x100037e7
100037cc:	100037d5 	.word	0x100037d5
100037d0:	1000386f 	.word	0x1000386f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
100037d4:	687b      	ldr	r3, [r7, #4]
100037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100037d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
100037dc:	2b00      	cmp	r3, #0
100037de:	d048      	beq.n	10003872 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
100037e0:	2301      	movs	r3, #1
100037e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
100037e4:	e045      	b.n	10003872 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
100037e6:	687b      	ldr	r3, [r7, #4]
100037e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100037ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
100037ee:	d142      	bne.n	10003876 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
100037f0:	2301      	movs	r3, #1
100037f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
100037f4:	e03f      	b.n	10003876 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
100037f6:	687b      	ldr	r3, [r7, #4]
100037f8:	699b      	ldr	r3, [r3, #24]
100037fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
100037fe:	d123      	bne.n	10003848 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
10003800:	687b      	ldr	r3, [r7, #4]
10003802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10003804:	2b03      	cmp	r3, #3
10003806:	d838      	bhi.n	1000387a <DMA_CheckFifoParam+0xda>
10003808:	a201      	add	r2, pc, #4	; (adr r2, 10003810 <DMA_CheckFifoParam+0x70>)
1000380a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000380e:	bf00      	nop
10003810:	10003821 	.word	0x10003821
10003814:	10003827 	.word	0x10003827
10003818:	10003821 	.word	0x10003821
1000381c:	10003839 	.word	0x10003839
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
10003820:	2301      	movs	r3, #1
10003822:	73fb      	strb	r3, [r7, #15]
        break;
10003824:	e030      	b.n	10003888 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
10003826:	687b      	ldr	r3, [r7, #4]
10003828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000382a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
1000382e:	2b00      	cmp	r3, #0
10003830:	d025      	beq.n	1000387e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
10003832:	2301      	movs	r3, #1
10003834:	73fb      	strb	r3, [r7, #15]
        }
        break;
10003836:	e022      	b.n	1000387e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
10003838:	687b      	ldr	r3, [r7, #4]
1000383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000383c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
10003840:	d11f      	bne.n	10003882 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
10003842:	2301      	movs	r3, #1
10003844:	73fb      	strb	r3, [r7, #15]
        }
        break;
10003846:	e01c      	b.n	10003882 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
10003848:	687b      	ldr	r3, [r7, #4]
1000384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000384c:	2b02      	cmp	r3, #2
1000384e:	d902      	bls.n	10003856 <DMA_CheckFifoParam+0xb6>
10003850:	2b03      	cmp	r3, #3
10003852:	d003      	beq.n	1000385c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
        break;

      default:
        break;
10003854:	e018      	b.n	10003888 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
10003856:	2301      	movs	r3, #1
10003858:	73fb      	strb	r3, [r7, #15]
        break;
1000385a:	e015      	b.n	10003888 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
1000385c:	687b      	ldr	r3, [r7, #4]
1000385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10003860:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
10003864:	2b00      	cmp	r3, #0
10003866:	d00e      	beq.n	10003886 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
10003868:	2301      	movs	r3, #1
1000386a:	73fb      	strb	r3, [r7, #15]
        break;
1000386c:	e00b      	b.n	10003886 <DMA_CheckFifoParam+0xe6>
        break;
1000386e:	bf00      	nop
10003870:	e00a      	b.n	10003888 <DMA_CheckFifoParam+0xe8>
        break;
10003872:	bf00      	nop
10003874:	e008      	b.n	10003888 <DMA_CheckFifoParam+0xe8>
        break;
10003876:	bf00      	nop
10003878:	e006      	b.n	10003888 <DMA_CheckFifoParam+0xe8>
        break;
1000387a:	bf00      	nop
1000387c:	e004      	b.n	10003888 <DMA_CheckFifoParam+0xe8>
        break;
1000387e:	bf00      	nop
10003880:	e002      	b.n	10003888 <DMA_CheckFifoParam+0xe8>
        break;
10003882:	bf00      	nop
10003884:	e000      	b.n	10003888 <DMA_CheckFifoParam+0xe8>
        break;
10003886:	bf00      	nop
    }
  }

  return status;
10003888:	7bfb      	ldrb	r3, [r7, #15]
}
1000388a:	4618      	mov	r0, r3
1000388c:	3714      	adds	r7, #20
1000388e:	46bd      	mov	sp, r7
10003890:	f85d 7b04 	ldr.w	r7, [sp], #4
10003894:	4770      	bx	lr
10003896:	bf00      	nop

10003898 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
10003898:	b480      	push	{r7}
1000389a:	b085      	sub	sp, #20
1000389c:	af00      	add	r7, sp, #0
1000389e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t *)hdma->Instance);
100038a0:	687b      	ldr	r3, [r7, #4]
100038a2:	681b      	ldr	r3, [r3, #0]
100038a4:	60bb      	str	r3, [r7, #8]
  /*DMA1/DMA2 Streams are connected to DMAMUX1 channels*/
  stream_number = (((uint32_t)((uint32_t *)hdma->Instance) & 0xFFU) - 16U) / 24U;
100038a6:	687b      	ldr	r3, [r7, #4]
100038a8:	681b      	ldr	r3, [r3, #0]
100038aa:	b2db      	uxtb	r3, r3
100038ac:	3b10      	subs	r3, #16
100038ae:	4a14      	ldr	r2, [pc, #80]	; (10003900 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
100038b0:	fba2 2303 	umull	r2, r3, r2, r3
100038b4:	091b      	lsrs	r3, r3, #4
100038b6:	60fb      	str	r3, [r7, #12]

  if ((stream_baseaddress <= ((uint32_t)DMA2_Stream7)) && \
100038b8:	68bb      	ldr	r3, [r7, #8]
100038ba:	4a12      	ldr	r2, [pc, #72]	; (10003904 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
100038bc:	4293      	cmp	r3, r2
100038be:	d806      	bhi.n	100038ce <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
100038c0:	68bb      	ldr	r3, [r7, #8]
100038c2:	4a11      	ldr	r2, [pc, #68]	; (10003908 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
100038c4:	4293      	cmp	r3, r2
100038c6:	d902      	bls.n	100038ce <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
      (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
  {
    stream_number += 8U;
100038c8:	68fb      	ldr	r3, [r7, #12]
100038ca:	3308      	adds	r3, #8
100038cc:	60fb      	str	r3, [r7, #12]
  }

  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
100038ce:	68fb      	ldr	r3, [r7, #12]
100038d0:	f103 5390 	add.w	r3, r3, #301989888	; 0x12000000
100038d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
100038d8:	009b      	lsls	r3, r3, #2
100038da:	461a      	mov	r2, r3
100038dc:	687b      	ldr	r3, [r7, #4]
100038de:	661a      	str	r2, [r3, #96]	; 0x60
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
100038e0:	687b      	ldr	r3, [r7, #4]
100038e2:	4a0a      	ldr	r2, [pc, #40]	; (1000390c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
100038e4:	665a      	str	r2, [r3, #100]	; 0x64
  hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
100038e6:	68fb      	ldr	r3, [r7, #12]
100038e8:	f003 031f 	and.w	r3, r3, #31
100038ec:	2201      	movs	r2, #1
100038ee:	409a      	lsls	r2, r3
100038f0:	687b      	ldr	r3, [r7, #4]
100038f2:	669a      	str	r2, [r3, #104]	; 0x68

}
100038f4:	bf00      	nop
100038f6:	3714      	adds	r7, #20
100038f8:	46bd      	mov	sp, r7
100038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
100038fe:	4770      	bx	lr
10003900:	aaaaaaab 	.word	0xaaaaaaab
10003904:	480010b8 	.word	0x480010b8
10003908:	4800100f 	.word	0x4800100f
1000390c:	48002080 	.word	0x48002080

10003910 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
10003910:	b480      	push	{r7}
10003912:	b085      	sub	sp, #20
10003914:	af00      	add	r7, sp, #0
10003916:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
10003918:	687b      	ldr	r3, [r7, #4]
1000391a:	685b      	ldr	r3, [r3, #4]
1000391c:	b2db      	uxtb	r3, r3
1000391e:	60fb      	str	r3, [r7, #12]

  if ((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
10003920:	68fb      	ldr	r3, [r7, #12]
10003922:	2b00      	cmp	r3, #0
10003924:	d014      	beq.n	10003950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>
10003926:	68fb      	ldr	r3, [r7, #12]
10003928:	2b08      	cmp	r3, #8
1000392a:	d811      	bhi.n	10003950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>
  {
    /*DMA1 and DMA2 Streams use DMAMUX1 request generator blocks*/
    hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
1000392c:	68fb      	ldr	r3, [r7, #12]
1000392e:	f103 5390 	add.w	r3, r3, #301989888	; 0x12000000
10003932:	f603 033f 	addw	r3, r3, #2111	; 0x83f
10003936:	009b      	lsls	r3, r3, #2
10003938:	461a      	mov	r2, r3
1000393a:	687b      	ldr	r3, [r7, #4]
1000393c:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
1000393e:	687b      	ldr	r3, [r7, #4]
10003940:	4a06      	ldr	r2, [pc, #24]	; (1000395c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4c>)
10003942:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
10003944:	68fb      	ldr	r3, [r7, #12]
10003946:	3b01      	subs	r3, #1
10003948:	2201      	movs	r2, #1
1000394a:	409a      	lsls	r2, r3
1000394c:	687b      	ldr	r3, [r7, #4]
1000394e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
10003950:	bf00      	nop
10003952:	3714      	adds	r7, #20
10003954:	46bd      	mov	sp, r7
10003956:	f85d 7b04 	ldr.w	r7, [sp], #4
1000395a:	4770      	bx	lr
1000395c:	48002140 	.word	0x48002140

10003960 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
10003960:	b480      	push	{r7}
10003962:	b089      	sub	sp, #36	; 0x24
10003964:	af00      	add	r7, sp, #0
10003966:	6078      	str	r0, [r7, #4]
10003968:	6039      	str	r1, [r7, #0]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef * EXTI_CurrentCPU;

#if defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_C2; /* EXTI for CM4 CPU */
1000396a:	4b8a      	ldr	r3, [pc, #552]	; (10003b94 <HAL_GPIO_Init+0x234>)
1000396c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
1000396e:	2300      	movs	r3, #0
10003970:	61fb      	str	r3, [r7, #28]
10003972:	e191      	b.n	10003c98 <HAL_GPIO_Init+0x338>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
10003974:	2201      	movs	r2, #1
10003976:	69fb      	ldr	r3, [r7, #28]
10003978:	fa02 f303 	lsl.w	r3, r2, r3
1000397c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
1000397e:	683b      	ldr	r3, [r7, #0]
10003980:	681b      	ldr	r3, [r3, #0]
10003982:	693a      	ldr	r2, [r7, #16]
10003984:	4013      	ands	r3, r2
10003986:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
10003988:	68fa      	ldr	r2, [r7, #12]
1000398a:	693b      	ldr	r3, [r7, #16]
1000398c:	429a      	cmp	r2, r3
1000398e:	f040 8180 	bne.w	10003c92 <HAL_GPIO_Init+0x332>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10003992:	683b      	ldr	r3, [r7, #0]
10003994:	685b      	ldr	r3, [r3, #4]
10003996:	2b02      	cmp	r3, #2
10003998:	d003      	beq.n	100039a2 <HAL_GPIO_Init+0x42>
1000399a:	683b      	ldr	r3, [r7, #0]
1000399c:	685b      	ldr	r3, [r3, #4]
1000399e:	2b12      	cmp	r3, #18
100039a0:	d123      	bne.n	100039ea <HAL_GPIO_Init+0x8a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
100039a2:	69fb      	ldr	r3, [r7, #28]
100039a4:	08da      	lsrs	r2, r3, #3
100039a6:	687b      	ldr	r3, [r7, #4]
100039a8:	3208      	adds	r2, #8
100039aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
100039ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
100039b0:	69fb      	ldr	r3, [r7, #28]
100039b2:	f003 0307 	and.w	r3, r3, #7
100039b6:	009b      	lsls	r3, r3, #2
100039b8:	220f      	movs	r2, #15
100039ba:	fa02 f303 	lsl.w	r3, r2, r3
100039be:	43db      	mvns	r3, r3
100039c0:	69ba      	ldr	r2, [r7, #24]
100039c2:	4013      	ands	r3, r2
100039c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
100039c6:	683b      	ldr	r3, [r7, #0]
100039c8:	691a      	ldr	r2, [r3, #16]
100039ca:	69fb      	ldr	r3, [r7, #28]
100039cc:	f003 0307 	and.w	r3, r3, #7
100039d0:	009b      	lsls	r3, r3, #2
100039d2:	fa02 f303 	lsl.w	r3, r2, r3
100039d6:	69ba      	ldr	r2, [r7, #24]
100039d8:	4313      	orrs	r3, r2
100039da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
100039dc:	69fb      	ldr	r3, [r7, #28]
100039de:	08da      	lsrs	r2, r3, #3
100039e0:	687b      	ldr	r3, [r7, #4]
100039e2:	3208      	adds	r2, #8
100039e4:	69b9      	ldr	r1, [r7, #24]
100039e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
100039ea:	687b      	ldr	r3, [r7, #4]
100039ec:	681b      	ldr	r3, [r3, #0]
100039ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
100039f0:	69fb      	ldr	r3, [r7, #28]
100039f2:	005b      	lsls	r3, r3, #1
100039f4:	2203      	movs	r2, #3
100039f6:	fa02 f303 	lsl.w	r3, r2, r3
100039fa:	43db      	mvns	r3, r3
100039fc:	69ba      	ldr	r2, [r7, #24]
100039fe:	4013      	ands	r3, r2
10003a00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
10003a02:	683b      	ldr	r3, [r7, #0]
10003a04:	685b      	ldr	r3, [r3, #4]
10003a06:	f003 0203 	and.w	r2, r3, #3
10003a0a:	69fb      	ldr	r3, [r7, #28]
10003a0c:	005b      	lsls	r3, r3, #1
10003a0e:	fa02 f303 	lsl.w	r3, r2, r3
10003a12:	69ba      	ldr	r2, [r7, #24]
10003a14:	4313      	orrs	r3, r2
10003a16:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
10003a18:	687b      	ldr	r3, [r7, #4]
10003a1a:	69ba      	ldr	r2, [r7, #24]
10003a1c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10003a1e:	683b      	ldr	r3, [r7, #0]
10003a20:	685b      	ldr	r3, [r3, #4]
10003a22:	2b01      	cmp	r3, #1
10003a24:	d00b      	beq.n	10003a3e <HAL_GPIO_Init+0xde>
10003a26:	683b      	ldr	r3, [r7, #0]
10003a28:	685b      	ldr	r3, [r3, #4]
10003a2a:	2b02      	cmp	r3, #2
10003a2c:	d007      	beq.n	10003a3e <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10003a2e:	683b      	ldr	r3, [r7, #0]
10003a30:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10003a32:	2b11      	cmp	r3, #17
10003a34:	d003      	beq.n	10003a3e <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10003a36:	683b      	ldr	r3, [r7, #0]
10003a38:	685b      	ldr	r3, [r3, #4]
10003a3a:	2b12      	cmp	r3, #18
10003a3c:	d130      	bne.n	10003aa0 <HAL_GPIO_Init+0x140>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10003a3e:	687b      	ldr	r3, [r7, #4]
10003a40:	689b      	ldr	r3, [r3, #8]
10003a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
10003a44:	69fb      	ldr	r3, [r7, #28]
10003a46:	005b      	lsls	r3, r3, #1
10003a48:	2203      	movs	r2, #3
10003a4a:	fa02 f303 	lsl.w	r3, r2, r3
10003a4e:	43db      	mvns	r3, r3
10003a50:	69ba      	ldr	r2, [r7, #24]
10003a52:	4013      	ands	r3, r2
10003a54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
10003a56:	683b      	ldr	r3, [r7, #0]
10003a58:	68da      	ldr	r2, [r3, #12]
10003a5a:	69fb      	ldr	r3, [r7, #28]
10003a5c:	005b      	lsls	r3, r3, #1
10003a5e:	fa02 f303 	lsl.w	r3, r2, r3
10003a62:	69ba      	ldr	r2, [r7, #24]
10003a64:	4313      	orrs	r3, r2
10003a66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
10003a68:	687b      	ldr	r3, [r7, #4]
10003a6a:	69ba      	ldr	r2, [r7, #24]
10003a6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
10003a6e:	687b      	ldr	r3, [r7, #4]
10003a70:	685b      	ldr	r3, [r3, #4]
10003a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10003a74:	2201      	movs	r2, #1
10003a76:	69fb      	ldr	r3, [r7, #28]
10003a78:	fa02 f303 	lsl.w	r3, r2, r3
10003a7c:	43db      	mvns	r3, r3
10003a7e:	69ba      	ldr	r2, [r7, #24]
10003a80:	4013      	ands	r3, r2
10003a82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
10003a84:	683b      	ldr	r3, [r7, #0]
10003a86:	685b      	ldr	r3, [r3, #4]
10003a88:	091b      	lsrs	r3, r3, #4
10003a8a:	f003 0201 	and.w	r2, r3, #1
10003a8e:	69fb      	ldr	r3, [r7, #28]
10003a90:	fa02 f303 	lsl.w	r3, r2, r3
10003a94:	69ba      	ldr	r2, [r7, #24]
10003a96:	4313      	orrs	r3, r2
10003a98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
10003a9a:	687b      	ldr	r3, [r7, #4]
10003a9c:	69ba      	ldr	r2, [r7, #24]
10003a9e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
10003aa0:	687b      	ldr	r3, [r7, #4]
10003aa2:	68db      	ldr	r3, [r3, #12]
10003aa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
10003aa6:	69fb      	ldr	r3, [r7, #28]
10003aa8:	005b      	lsls	r3, r3, #1
10003aaa:	2203      	movs	r2, #3
10003aac:	fa02 f303 	lsl.w	r3, r2, r3
10003ab0:	43db      	mvns	r3, r3
10003ab2:	69ba      	ldr	r2, [r7, #24]
10003ab4:	4013      	ands	r3, r2
10003ab6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
10003ab8:	683b      	ldr	r3, [r7, #0]
10003aba:	689a      	ldr	r2, [r3, #8]
10003abc:	69fb      	ldr	r3, [r7, #28]
10003abe:	005b      	lsls	r3, r3, #1
10003ac0:	fa02 f303 	lsl.w	r3, r2, r3
10003ac4:	69ba      	ldr	r2, [r7, #24]
10003ac6:	4313      	orrs	r3, r2
10003ac8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
10003aca:	687b      	ldr	r3, [r7, #4]
10003acc:	69ba      	ldr	r2, [r7, #24]
10003ace:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
10003ad0:	683b      	ldr	r3, [r7, #0]
10003ad2:	685b      	ldr	r3, [r3, #4]
10003ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
10003ad8:	2b00      	cmp	r3, #0
10003ada:	f000 80da 	beq.w	10003c92 <HAL_GPIO_Init+0x332>
      {
        temp = EXTI->EXTICR[position >> 2U];
10003ade:	4a2e      	ldr	r2, [pc, #184]	; (10003b98 <HAL_GPIO_Init+0x238>)
10003ae0:	69fb      	ldr	r3, [r7, #28]
10003ae2:	089b      	lsrs	r3, r3, #2
10003ae4:	3318      	adds	r3, #24
10003ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10003aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFFU << (8U * (position & 0x03U)));
10003aec:	69fb      	ldr	r3, [r7, #28]
10003aee:	f003 0303 	and.w	r3, r3, #3
10003af2:	00db      	lsls	r3, r3, #3
10003af4:	22ff      	movs	r2, #255	; 0xff
10003af6:	fa02 f303 	lsl.w	r3, r2, r3
10003afa:	43db      	mvns	r3, r3
10003afc:	69ba      	ldr	r2, [r7, #24]
10003afe:	4013      	ands	r3, r2
10003b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
10003b02:	687b      	ldr	r3, [r7, #4]
10003b04:	4a25      	ldr	r2, [pc, #148]	; (10003b9c <HAL_GPIO_Init+0x23c>)
10003b06:	4293      	cmp	r3, r2
10003b08:	d05e      	beq.n	10003bc8 <HAL_GPIO_Init+0x268>
10003b0a:	687b      	ldr	r3, [r7, #4]
10003b0c:	4a24      	ldr	r2, [pc, #144]	; (10003ba0 <HAL_GPIO_Init+0x240>)
10003b0e:	4293      	cmp	r3, r2
10003b10:	d03d      	beq.n	10003b8e <HAL_GPIO_Init+0x22e>
10003b12:	687b      	ldr	r3, [r7, #4]
10003b14:	4a23      	ldr	r2, [pc, #140]	; (10003ba4 <HAL_GPIO_Init+0x244>)
10003b16:	4293      	cmp	r3, r2
10003b18:	d037      	beq.n	10003b8a <HAL_GPIO_Init+0x22a>
10003b1a:	687b      	ldr	r3, [r7, #4]
10003b1c:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
10003b20:	d031      	beq.n	10003b86 <HAL_GPIO_Init+0x226>
10003b22:	687b      	ldr	r3, [r7, #4]
10003b24:	4a20      	ldr	r2, [pc, #128]	; (10003ba8 <HAL_GPIO_Init+0x248>)
10003b26:	4293      	cmp	r3, r2
10003b28:	d02b      	beq.n	10003b82 <HAL_GPIO_Init+0x222>
10003b2a:	687b      	ldr	r3, [r7, #4]
10003b2c:	4a1f      	ldr	r2, [pc, #124]	; (10003bac <HAL_GPIO_Init+0x24c>)
10003b2e:	4293      	cmp	r3, r2
10003b30:	d025      	beq.n	10003b7e <HAL_GPIO_Init+0x21e>
10003b32:	687b      	ldr	r3, [r7, #4]
10003b34:	4a1e      	ldr	r2, [pc, #120]	; (10003bb0 <HAL_GPIO_Init+0x250>)
10003b36:	4293      	cmp	r3, r2
10003b38:	d01f      	beq.n	10003b7a <HAL_GPIO_Init+0x21a>
10003b3a:	687b      	ldr	r3, [r7, #4]
10003b3c:	4a1d      	ldr	r2, [pc, #116]	; (10003bb4 <HAL_GPIO_Init+0x254>)
10003b3e:	4293      	cmp	r3, r2
10003b40:	d019      	beq.n	10003b76 <HAL_GPIO_Init+0x216>
10003b42:	687b      	ldr	r3, [r7, #4]
10003b44:	4a1c      	ldr	r2, [pc, #112]	; (10003bb8 <HAL_GPIO_Init+0x258>)
10003b46:	4293      	cmp	r3, r2
10003b48:	d013      	beq.n	10003b72 <HAL_GPIO_Init+0x212>
10003b4a:	687b      	ldr	r3, [r7, #4]
10003b4c:	4a1b      	ldr	r2, [pc, #108]	; (10003bbc <HAL_GPIO_Init+0x25c>)
10003b4e:	4293      	cmp	r3, r2
10003b50:	d00d      	beq.n	10003b6e <HAL_GPIO_Init+0x20e>
10003b52:	687b      	ldr	r3, [r7, #4]
10003b54:	4a1a      	ldr	r2, [pc, #104]	; (10003bc0 <HAL_GPIO_Init+0x260>)
10003b56:	4293      	cmp	r3, r2
10003b58:	d007      	beq.n	10003b6a <HAL_GPIO_Init+0x20a>
10003b5a:	687b      	ldr	r3, [r7, #4]
10003b5c:	4a19      	ldr	r2, [pc, #100]	; (10003bc4 <HAL_GPIO_Init+0x264>)
10003b5e:	4293      	cmp	r3, r2
10003b60:	d101      	bne.n	10003b66 <HAL_GPIO_Init+0x206>
10003b62:	230b      	movs	r3, #11
10003b64:	e031      	b.n	10003bca <HAL_GPIO_Init+0x26a>
10003b66:	2319      	movs	r3, #25
10003b68:	e02f      	b.n	10003bca <HAL_GPIO_Init+0x26a>
10003b6a:	230a      	movs	r3, #10
10003b6c:	e02d      	b.n	10003bca <HAL_GPIO_Init+0x26a>
10003b6e:	2309      	movs	r3, #9
10003b70:	e02b      	b.n	10003bca <HAL_GPIO_Init+0x26a>
10003b72:	2308      	movs	r3, #8
10003b74:	e029      	b.n	10003bca <HAL_GPIO_Init+0x26a>
10003b76:	2307      	movs	r3, #7
10003b78:	e027      	b.n	10003bca <HAL_GPIO_Init+0x26a>
10003b7a:	2306      	movs	r3, #6
10003b7c:	e025      	b.n	10003bca <HAL_GPIO_Init+0x26a>
10003b7e:	2305      	movs	r3, #5
10003b80:	e023      	b.n	10003bca <HAL_GPIO_Init+0x26a>
10003b82:	2304      	movs	r3, #4
10003b84:	e021      	b.n	10003bca <HAL_GPIO_Init+0x26a>
10003b86:	2303      	movs	r3, #3
10003b88:	e01f      	b.n	10003bca <HAL_GPIO_Init+0x26a>
10003b8a:	2302      	movs	r3, #2
10003b8c:	e01d      	b.n	10003bca <HAL_GPIO_Init+0x26a>
10003b8e:	2301      	movs	r3, #1
10003b90:	e01b      	b.n	10003bca <HAL_GPIO_Init+0x26a>
10003b92:	bf00      	nop
10003b94:	5000d0c0 	.word	0x5000d0c0
10003b98:	5000d000 	.word	0x5000d000
10003b9c:	50002000 	.word	0x50002000
10003ba0:	50003000 	.word	0x50003000
10003ba4:	50004000 	.word	0x50004000
10003ba8:	50006000 	.word	0x50006000
10003bac:	50007000 	.word	0x50007000
10003bb0:	50008000 	.word	0x50008000
10003bb4:	50009000 	.word	0x50009000
10003bb8:	5000a000 	.word	0x5000a000
10003bbc:	5000b000 	.word	0x5000b000
10003bc0:	5000c000 	.word	0x5000c000
10003bc4:	54004000 	.word	0x54004000
10003bc8:	2300      	movs	r3, #0
10003bca:	69fa      	ldr	r2, [r7, #28]
10003bcc:	f002 0203 	and.w	r2, r2, #3
10003bd0:	00d2      	lsls	r2, r2, #3
10003bd2:	4093      	lsls	r3, r2
10003bd4:	461a      	mov	r2, r3
10003bd6:	69bb      	ldr	r3, [r7, #24]
10003bd8:	4313      	orrs	r3, r2
10003bda:	61bb      	str	r3, [r7, #24]
        EXTI->EXTICR[position >> 2U] = temp;
10003bdc:	4934      	ldr	r1, [pc, #208]	; (10003cb0 <HAL_GPIO_Init+0x350>)
10003bde:	69fb      	ldr	r3, [r7, #28]
10003be0:	089b      	lsrs	r3, r3, #2
10003be2:	3318      	adds	r3, #24
10003be4:	69ba      	ldr	r2, [r7, #24]
10003be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
10003bea:	697b      	ldr	r3, [r7, #20]
10003bec:	681b      	ldr	r3, [r3, #0]
10003bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10003bf0:	68fb      	ldr	r3, [r7, #12]
10003bf2:	43db      	mvns	r3, r3
10003bf4:	69ba      	ldr	r2, [r7, #24]
10003bf6:	4013      	ands	r3, r2
10003bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
10003bfa:	683b      	ldr	r3, [r7, #0]
10003bfc:	685b      	ldr	r3, [r3, #4]
10003bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
10003c02:	2b00      	cmp	r3, #0
10003c04:	d003      	beq.n	10003c0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
10003c06:	69ba      	ldr	r2, [r7, #24]
10003c08:	68fb      	ldr	r3, [r7, #12]
10003c0a:	4313      	orrs	r3, r2
10003c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
10003c0e:	697b      	ldr	r3, [r7, #20]
10003c10:	69ba      	ldr	r2, [r7, #24]
10003c12:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
10003c14:	697b      	ldr	r3, [r7, #20]
10003c16:	685b      	ldr	r3, [r3, #4]
10003c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10003c1a:	68fb      	ldr	r3, [r7, #12]
10003c1c:	43db      	mvns	r3, r3
10003c1e:	69ba      	ldr	r2, [r7, #24]
10003c20:	4013      	ands	r3, r2
10003c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
10003c24:	683b      	ldr	r3, [r7, #0]
10003c26:	685b      	ldr	r3, [r3, #4]
10003c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
10003c2c:	2b00      	cmp	r3, #0
10003c2e:	d003      	beq.n	10003c38 <HAL_GPIO_Init+0x2d8>
        {
          temp |= iocurrent;
10003c30:	69ba      	ldr	r2, [r7, #24]
10003c32:	68fb      	ldr	r3, [r7, #12]
10003c34:	4313      	orrs	r3, r2
10003c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
10003c38:	697b      	ldr	r3, [r7, #20]
10003c3a:	69ba      	ldr	r2, [r7, #24]
10003c3c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
10003c3e:	4b1c      	ldr	r3, [pc, #112]	; (10003cb0 <HAL_GPIO_Init+0x350>)
10003c40:	681b      	ldr	r3, [r3, #0]
10003c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10003c44:	68fb      	ldr	r3, [r7, #12]
10003c46:	43db      	mvns	r3, r3
10003c48:	69ba      	ldr	r2, [r7, #24]
10003c4a:	4013      	ands	r3, r2
10003c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
10003c4e:	683b      	ldr	r3, [r7, #0]
10003c50:	685b      	ldr	r3, [r3, #4]
10003c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
10003c56:	2b00      	cmp	r3, #0
10003c58:	d003      	beq.n	10003c62 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
10003c5a:	69ba      	ldr	r2, [r7, #24]
10003c5c:	68fb      	ldr	r3, [r7, #12]
10003c5e:	4313      	orrs	r3, r2
10003c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
10003c62:	4a13      	ldr	r2, [pc, #76]	; (10003cb0 <HAL_GPIO_Init+0x350>)
10003c64:	69bb      	ldr	r3, [r7, #24]
10003c66:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
10003c68:	4b11      	ldr	r3, [pc, #68]	; (10003cb0 <HAL_GPIO_Init+0x350>)
10003c6a:	685b      	ldr	r3, [r3, #4]
10003c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10003c6e:	68fb      	ldr	r3, [r7, #12]
10003c70:	43db      	mvns	r3, r3
10003c72:	69ba      	ldr	r2, [r7, #24]
10003c74:	4013      	ands	r3, r2
10003c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
10003c78:	683b      	ldr	r3, [r7, #0]
10003c7a:	685b      	ldr	r3, [r3, #4]
10003c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
10003c80:	2b00      	cmp	r3, #0
10003c82:	d003      	beq.n	10003c8c <HAL_GPIO_Init+0x32c>
        {
          temp |= iocurrent;
10003c84:	69ba      	ldr	r2, [r7, #24]
10003c86:	68fb      	ldr	r3, [r7, #12]
10003c88:	4313      	orrs	r3, r2
10003c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
10003c8c:	4a08      	ldr	r2, [pc, #32]	; (10003cb0 <HAL_GPIO_Init+0x350>)
10003c8e:	69bb      	ldr	r3, [r7, #24]
10003c90:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
10003c92:	69fb      	ldr	r3, [r7, #28]
10003c94:	3301      	adds	r3, #1
10003c96:	61fb      	str	r3, [r7, #28]
10003c98:	69fb      	ldr	r3, [r7, #28]
10003c9a:	2b0f      	cmp	r3, #15
10003c9c:	f67f ae6a 	bls.w	10003974 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
10003ca0:	bf00      	nop
10003ca2:	bf00      	nop
10003ca4:	3724      	adds	r7, #36	; 0x24
10003ca6:	46bd      	mov	sp, r7
10003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
10003cac:	4770      	bx	lr
10003cae:	bf00      	nop
10003cb0:	5000d000 	.word	0x5000d000

10003cb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
10003cb4:	b480      	push	{r7}
10003cb6:	b085      	sub	sp, #20
10003cb8:	af00      	add	r7, sp, #0
10003cba:	6078      	str	r0, [r7, #4]
10003cbc:	460b      	mov	r3, r1
10003cbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
10003cc0:	687b      	ldr	r3, [r7, #4]
10003cc2:	691a      	ldr	r2, [r3, #16]
10003cc4:	887b      	ldrh	r3, [r7, #2]
10003cc6:	4013      	ands	r3, r2
10003cc8:	2b00      	cmp	r3, #0
10003cca:	d002      	beq.n	10003cd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
10003ccc:	2301      	movs	r3, #1
10003cce:	73fb      	strb	r3, [r7, #15]
10003cd0:	e001      	b.n	10003cd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
10003cd2:	2300      	movs	r3, #0
10003cd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
10003cd6:	7bfb      	ldrb	r3, [r7, #15]
}
10003cd8:	4618      	mov	r0, r3
10003cda:	3714      	adds	r7, #20
10003cdc:	46bd      	mov	sp, r7
10003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
10003ce2:	4770      	bx	lr

10003ce4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
10003ce4:	b580      	push	{r7, lr}
10003ce6:	b084      	sub	sp, #16
10003ce8:	af00      	add	r7, sp, #0
10003cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
10003cec:	2300      	movs	r3, #0
10003cee:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
10003cf0:	687b      	ldr	r3, [r7, #4]
10003cf2:	2b00      	cmp	r3, #0
10003cf4:	d01e      	beq.n	10003d34 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

#if defined(CORE_CM4)
    IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10003cf6:	4b13      	ldr	r3, [pc, #76]	; (10003d44 <HAL_IPCC_Init+0x60>)
10003cf8:	60bb      	str	r3, [r7, #8]
#else
    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

    if (hipcc->State == HAL_IPCC_STATE_RESET)
10003cfa:	687b      	ldr	r3, [r7, #4]
10003cfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
10003d00:	b2db      	uxtb	r3, r3
10003d02:	2b00      	cmp	r3, #0
10003d04:	d102      	bne.n	10003d0c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
10003d06:	6878      	ldr	r0, [r7, #4]
10003d08:	f7fd fc70 	bl	100015ec <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
10003d0c:	68b8      	ldr	r0, [r7, #8]
10003d0e:	f000 f9eb 	bl	100040e8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
10003d12:	68bb      	ldr	r3, [r7, #8]
10003d14:	681b      	ldr	r3, [r3, #0]
10003d16:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
10003d1a:	68bb      	ldr	r3, [r7, #8]
10003d1c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
10003d1e:	6878      	ldr	r0, [r7, #4]
10003d20:	f000 f9bc 	bl	1000409c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
10003d24:	687b      	ldr	r3, [r7, #4]
10003d26:	2200      	movs	r2, #0
10003d28:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
10003d2a:	687b      	ldr	r3, [r7, #4]
10003d2c:	2201      	movs	r2, #1
10003d2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
10003d32:	e001      	b.n	10003d38 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
10003d34:	2301      	movs	r3, #1
10003d36:	73fb      	strb	r3, [r7, #15]
  }

  return err;
10003d38:	7bfb      	ldrb	r3, [r7, #15]
}
10003d3a:	4618      	mov	r0, r3
10003d3c:	3710      	adds	r7, #16
10003d3e:	46bd      	mov	sp, r7
10003d40:	bd80      	pop	{r7, pc}
10003d42:	bf00      	nop
10003d44:	4c001010 	.word	0x4c001010

10003d48 <HAL_IPCC_ActivateNotification>:
  * @param  ChannelDir Channel direction
  * @param  cb Interrupt callback
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_ActivateNotification(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir, ChannelCb cb)
{
10003d48:	b580      	push	{r7, lr}
10003d4a:	b086      	sub	sp, #24
10003d4c:	af00      	add	r7, sp, #0
10003d4e:	60f8      	str	r0, [r7, #12]
10003d50:	60b9      	str	r1, [r7, #8]
10003d52:	603b      	str	r3, [r7, #0]
10003d54:	4613      	mov	r3, r2
10003d56:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
10003d58:	2300      	movs	r3, #0
10003d5a:	75fb      	strb	r3, [r7, #23]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
10003d5c:	68fb      	ldr	r3, [r7, #12]
10003d5e:	2b00      	cmp	r3, #0
10003d60:	d039      	beq.n	10003dd6 <HAL_IPCC_ActivateNotification+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    /* Check IPCC state */
    if (hipcc->State == HAL_IPCC_STATE_READY)
10003d62:	68fb      	ldr	r3, [r7, #12]
10003d64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
10003d68:	b2db      	uxtb	r3, r3
10003d6a:	2b01      	cmp	r3, #1
10003d6c:	d130      	bne.n	10003dd0 <HAL_IPCC_ActivateNotification+0x88>
    {
      /* Set callback and register masking information */
      if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10003d6e:	79fb      	ldrb	r3, [r7, #7]
10003d70:	2b00      	cmp	r3, #0
10003d72:	d113      	bne.n	10003d9c <HAL_IPCC_ActivateNotification+0x54>
      {
        hipcc->ChannelCallbackTx[ChannelIndex] = cb;
10003d74:	68fa      	ldr	r2, [r7, #12]
10003d76:	68bb      	ldr	r3, [r7, #8]
10003d78:	3306      	adds	r3, #6
10003d7a:	009b      	lsls	r3, r3, #2
10003d7c:	4413      	add	r3, r2
10003d7e:	683a      	ldr	r2, [r7, #0]
10003d80:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10003d82:	68fb      	ldr	r3, [r7, #12]
10003d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10003d86:	68bb      	ldr	r3, [r7, #8]
10003d88:	f003 030f 	and.w	r3, r3, #15
10003d8c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
10003d90:	fa01 f303 	lsl.w	r3, r1, r3
10003d94:	431a      	orrs	r2, r3
10003d96:	68fb      	ldr	r3, [r7, #12]
10003d98:	635a      	str	r2, [r3, #52]	; 0x34
10003d9a:	e010      	b.n	10003dbe <HAL_IPCC_ActivateNotification+0x76>
      }
      else
      {
        hipcc->ChannelCallbackRx[ChannelIndex] = cb;
10003d9c:	68fa      	ldr	r2, [r7, #12]
10003d9e:	68bb      	ldr	r3, [r7, #8]
10003da0:	009b      	lsls	r3, r3, #2
10003da2:	4413      	add	r3, r2
10003da4:	683a      	ldr	r2, [r7, #0]
10003da6:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10003da8:	68fb      	ldr	r3, [r7, #12]
10003daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10003dac:	68bb      	ldr	r3, [r7, #8]
10003dae:	f003 030f 	and.w	r3, r3, #15
10003db2:	2101      	movs	r1, #1
10003db4:	fa01 f303 	lsl.w	r3, r1, r3
10003db8:	431a      	orrs	r2, r3
10003dba:	68fb      	ldr	r3, [r7, #12]
10003dbc:	635a      	str	r2, [r3, #52]	; 0x34
      }

      /* Unmask only the channels in reception (Transmission channel mask/unmask is done in HAL_IPCC_NotifyCPU) */
      if (ChannelDir == IPCC_CHANNEL_DIR_RX)
10003dbe:	79fb      	ldrb	r3, [r7, #7]
10003dc0:	2b01      	cmp	r3, #1
10003dc2:	d10a      	bne.n	10003dda <HAL_IPCC_ActivateNotification+0x92>
      {
        IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
10003dc4:	79fb      	ldrb	r3, [r7, #7]
10003dc6:	4619      	mov	r1, r3
10003dc8:	68b8      	ldr	r0, [r7, #8]
10003dca:	f000 f939 	bl	10004040 <IPCC_UnmaskInterrupt>
10003dce:	e004      	b.n	10003dda <HAL_IPCC_ActivateNotification+0x92>
      }
    }
    else
    {
      err = HAL_ERROR;
10003dd0:	2301      	movs	r3, #1
10003dd2:	75fb      	strb	r3, [r7, #23]
10003dd4:	e001      	b.n	10003dda <HAL_IPCC_ActivateNotification+0x92>
    }
  }
  else
  {
    err = HAL_ERROR;
10003dd6:	2301      	movs	r3, #1
10003dd8:	75fb      	strb	r3, [r7, #23]
  }
  return err;
10003dda:	7dfb      	ldrb	r3, [r7, #23]
}
10003ddc:	4618      	mov	r0, r3
10003dde:	3718      	adds	r7, #24
10003de0:	46bd      	mov	sp, r7
10003de2:	bd80      	pop	{r7, pc}

10003de4 <HAL_IPCC_GetChannelStatus>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval Channel status
  */
IPCC_CHANNELStatusTypeDef HAL_IPCC_GetChannelStatus(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10003de4:	b480      	push	{r7}
10003de6:	b089      	sub	sp, #36	; 0x24
10003de8:	af00      	add	r7, sp, #0
10003dea:	60f8      	str	r0, [r7, #12]
10003dec:	60b9      	str	r1, [r7, #8]
10003dee:	4613      	mov	r3, r2
10003df0:	71fb      	strb	r3, [r7, #7]
  uint32_t channel_state;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10003df2:	4b14      	ldr	r3, [pc, #80]	; (10003e44 <HAL_IPCC_GetChannelStatus+0x60>)
10003df4:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
10003df6:	4b14      	ldr	r3, [pc, #80]	; (10003e48 <HAL_IPCC_GetChannelStatus+0x64>)
10003df8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Read corresponding channel depending of the MCU and the direction */
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10003dfa:	79fb      	ldrb	r3, [r7, #7]
10003dfc:	2b00      	cmp	r3, #0
10003dfe:	d10a      	bne.n	10003e16 <HAL_IPCC_GetChannelStatus+0x32>
  {
    channel_state = (currentInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10003e00:	69bb      	ldr	r3, [r7, #24]
10003e02:	68da      	ldr	r2, [r3, #12]
10003e04:	68bb      	ldr	r3, [r7, #8]
10003e06:	f003 030f 	and.w	r3, r3, #15
10003e0a:	2101      	movs	r1, #1
10003e0c:	fa01 f303 	lsl.w	r3, r1, r3
10003e10:	4013      	ands	r3, r2
10003e12:	61fb      	str	r3, [r7, #28]
10003e14:	e009      	b.n	10003e2a <HAL_IPCC_GetChannelStatus+0x46>
  }
  else
  {
    channel_state = (otherInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10003e16:	697b      	ldr	r3, [r7, #20]
10003e18:	68da      	ldr	r2, [r3, #12]
10003e1a:	68bb      	ldr	r3, [r7, #8]
10003e1c:	f003 030f 	and.w	r3, r3, #15
10003e20:	2101      	movs	r1, #1
10003e22:	fa01 f303 	lsl.w	r3, r1, r3
10003e26:	4013      	ands	r3, r2
10003e28:	61fb      	str	r3, [r7, #28]
  }

  return (channel_state == 0UL) ? IPCC_CHANNEL_STATUS_FREE : IPCC_CHANNEL_STATUS_OCCUPIED ;
10003e2a:	69fb      	ldr	r3, [r7, #28]
10003e2c:	2b00      	cmp	r3, #0
10003e2e:	bf14      	ite	ne
10003e30:	2301      	movne	r3, #1
10003e32:	2300      	moveq	r3, #0
10003e34:	b2db      	uxtb	r3, r3
}
10003e36:	4618      	mov	r0, r3
10003e38:	3724      	adds	r7, #36	; 0x24
10003e3a:	46bd      	mov	sp, r7
10003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
10003e40:	4770      	bx	lr
10003e42:	bf00      	nop
10003e44:	4c001010 	.word	0x4c001010
10003e48:	4c001000 	.word	0x4c001000

10003e4c <HAL_IPCC_NotifyCPU>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_NotifyCPU(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10003e4c:	b580      	push	{r7, lr}
10003e4e:	b088      	sub	sp, #32
10003e50:	af00      	add	r7, sp, #0
10003e52:	60f8      	str	r0, [r7, #12]
10003e54:	60b9      	str	r1, [r7, #8]
10003e56:	4613      	mov	r3, r2
10003e58:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
10003e5a:	2300      	movs	r3, #0
10003e5c:	77fb      	strb	r3, [r7, #31]
  uint32_t mask;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10003e5e:	4b1d      	ldr	r3, [pc, #116]	; (10003ed4 <HAL_IPCC_NotifyCPU+0x88>)
10003e60:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Check if IPCC is initiliased */
  if (hipcc->State == HAL_IPCC_STATE_READY)
10003e62:	68fb      	ldr	r3, [r7, #12]
10003e64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
10003e68:	b2db      	uxtb	r3, r3
10003e6a:	2b01      	cmp	r3, #1
10003e6c:	d12a      	bne.n	10003ec4 <HAL_IPCC_NotifyCPU+0x78>
  {
    /* For IPCC_CHANNEL_DIR_TX, set the status. For IPCC_CHANNEL_DIR_RX, clear the status */
    currentInstance->SCR |= ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_SCR_CH1S : IPCC_SCR_CH1C) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
10003e6e:	69bb      	ldr	r3, [r7, #24]
10003e70:	689a      	ldr	r2, [r3, #8]
10003e72:	79fb      	ldrb	r3, [r7, #7]
10003e74:	2b00      	cmp	r3, #0
10003e76:	d102      	bne.n	10003e7e <HAL_IPCC_NotifyCPU+0x32>
10003e78:	f44f 3180 	mov.w	r1, #65536	; 0x10000
10003e7c:	e000      	b.n	10003e80 <HAL_IPCC_NotifyCPU+0x34>
10003e7e:	2101      	movs	r1, #1
10003e80:	68bb      	ldr	r3, [r7, #8]
10003e82:	f003 030f 	and.w	r3, r3, #15
10003e86:	fa01 f303 	lsl.w	r3, r1, r3
10003e8a:	431a      	orrs	r2, r3
10003e8c:	69bb      	ldr	r3, [r7, #24]
10003e8e:	609a      	str	r2, [r3, #8]

    /* Unmask interrupt if the callback is requested */
    mask = ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_MR_CH1FM_Msk : IPCC_MR_CH1OM_Msk) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
10003e90:	79fb      	ldrb	r3, [r7, #7]
10003e92:	2b00      	cmp	r3, #0
10003e94:	d102      	bne.n	10003e9c <HAL_IPCC_NotifyCPU+0x50>
10003e96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
10003e9a:	e000      	b.n	10003e9e <HAL_IPCC_NotifyCPU+0x52>
10003e9c:	2201      	movs	r2, #1
10003e9e:	68bb      	ldr	r3, [r7, #8]
10003ea0:	f003 030f 	and.w	r3, r3, #15
10003ea4:	fa02 f303 	lsl.w	r3, r2, r3
10003ea8:	617b      	str	r3, [r7, #20]
    if ((hipcc->callbackRequest & mask) == mask)
10003eaa:	68fb      	ldr	r3, [r7, #12]
10003eac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10003eae:	697b      	ldr	r3, [r7, #20]
10003eb0:	4013      	ands	r3, r2
10003eb2:	697a      	ldr	r2, [r7, #20]
10003eb4:	429a      	cmp	r2, r3
10003eb6:	d107      	bne.n	10003ec8 <HAL_IPCC_NotifyCPU+0x7c>
    {
      IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
10003eb8:	79fb      	ldrb	r3, [r7, #7]
10003eba:	4619      	mov	r1, r3
10003ebc:	68b8      	ldr	r0, [r7, #8]
10003ebe:	f000 f8bf 	bl	10004040 <IPCC_UnmaskInterrupt>
10003ec2:	e001      	b.n	10003ec8 <HAL_IPCC_NotifyCPU+0x7c>
    }
  }
  else
  {
    err = HAL_ERROR;
10003ec4:	2301      	movs	r3, #1
10003ec6:	77fb      	strb	r3, [r7, #31]
  }

  return err;
10003ec8:	7ffb      	ldrb	r3, [r7, #31]
}
10003eca:	4618      	mov	r0, r3
10003ecc:	3720      	adds	r7, #32
10003ece:	46bd      	mov	sp, r7
10003ed0:	bd80      	pop	{r7, pc}
10003ed2:	bf00      	nop
10003ed4:	4c001010 	.word	0x4c001010

10003ed8 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
10003ed8:	b580      	push	{r7, lr}
10003eda:	b086      	sub	sp, #24
10003edc:	af00      	add	r7, sp, #0
10003ede:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
10003ee0:	2300      	movs	r3, #0
10003ee2:	613b      	str	r3, [r7, #16]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10003ee4:	4b22      	ldr	r3, [pc, #136]	; (10003f70 <HAL_IPCC_TX_IRQHandler+0x98>)
10003ee6:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
10003ee8:	68fb      	ldr	r3, [r7, #12]
10003eea:	685b      	ldr	r3, [r3, #4]
10003eec:	43db      	mvns	r3, r3
10003eee:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
10003ef2:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
10003ef4:	68fb      	ldr	r3, [r7, #12]
10003ef6:	68db      	ldr	r3, [r3, #12]
10003ef8:	041b      	lsls	r3, r3, #16
10003efa:	43db      	mvns	r3, r3
10003efc:	697a      	ldr	r2, [r7, #20]
10003efe:	4013      	ands	r3, r2
10003f00:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10003f02:	e02c      	b.n	10003f5e <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_Msk));
10003f04:	693b      	ldr	r3, [r7, #16]
10003f06:	f003 030f 	and.w	r3, r3, #15
10003f0a:	3310      	adds	r3, #16
10003f0c:	2201      	movs	r2, #1
10003f0e:	fa02 f303 	lsl.w	r3, r2, r3
10003f12:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
10003f14:	697a      	ldr	r2, [r7, #20]
10003f16:	68bb      	ldr	r3, [r7, #8]
10003f18:	4013      	ands	r3, r2
10003f1a:	2b00      	cmp	r3, #0
10003f1c:	d01c      	beq.n	10003f58 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
10003f1e:	68fb      	ldr	r3, [r7, #12]
10003f20:	685a      	ldr	r2, [r3, #4]
10003f22:	68bb      	ldr	r3, [r7, #8]
10003f24:	431a      	orrs	r2, r3
10003f26:	68fb      	ldr	r3, [r7, #12]
10003f28:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
10003f2a:	687a      	ldr	r2, [r7, #4]
10003f2c:	693b      	ldr	r3, [r7, #16]
10003f2e:	3306      	adds	r3, #6
10003f30:	009b      	lsls	r3, r3, #2
10003f32:	4413      	add	r3, r2
10003f34:	685b      	ldr	r3, [r3, #4]
10003f36:	2b00      	cmp	r3, #0
10003f38:	d009      	beq.n	10003f4e <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
10003f3a:	687a      	ldr	r2, [r7, #4]
10003f3c:	693b      	ldr	r3, [r7, #16]
10003f3e:	3306      	adds	r3, #6
10003f40:	009b      	lsls	r3, r3, #2
10003f42:	4413      	add	r3, r2
10003f44:	685b      	ldr	r3, [r3, #4]
10003f46:	2200      	movs	r2, #0
10003f48:	6939      	ldr	r1, [r7, #16]
10003f4a:	6878      	ldr	r0, [r7, #4]
10003f4c:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
10003f4e:	68bb      	ldr	r3, [r7, #8]
10003f50:	43db      	mvns	r3, r3
10003f52:	697a      	ldr	r2, [r7, #20]
10003f54:	4013      	ands	r3, r2
10003f56:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
10003f58:	693b      	ldr	r3, [r7, #16]
10003f5a:	3301      	adds	r3, #1
10003f5c:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10003f5e:	697b      	ldr	r3, [r7, #20]
10003f60:	2b00      	cmp	r3, #0
10003f62:	d1cf      	bne.n	10003f04 <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
10003f64:	bf00      	nop
10003f66:	bf00      	nop
10003f68:	3718      	adds	r7, #24
10003f6a:	46bd      	mov	sp, r7
10003f6c:	bd80      	pop	{r7, pc}
10003f6e:	bf00      	nop
10003f70:	4c001010 	.word	0x4c001010

10003f74 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
10003f74:	b580      	push	{r7, lr}
10003f76:	b088      	sub	sp, #32
10003f78:	af00      	add	r7, sp, #0
10003f7a:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
10003f7c:	2300      	movs	r3, #0
10003f7e:	61bb      	str	r3, [r7, #24]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10003f80:	4b20      	ldr	r3, [pc, #128]	; (10004004 <HAL_IPCC_RX_IRQHandler+0x90>)
10003f82:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
10003f84:	4b20      	ldr	r3, [pc, #128]	; (10004008 <HAL_IPCC_RX_IRQHandler+0x94>)
10003f86:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
#endif

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
10003f88:	697b      	ldr	r3, [r7, #20]
10003f8a:	685b      	ldr	r3, [r3, #4]
10003f8c:	43db      	mvns	r3, r3
10003f8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10003f92:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
10003f94:	693b      	ldr	r3, [r7, #16]
10003f96:	68db      	ldr	r3, [r3, #12]
10003f98:	69fa      	ldr	r2, [r7, #28]
10003f9a:	4013      	ands	r3, r2
10003f9c:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10003f9e:	e029      	b.n	10003ff4 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
10003fa0:	69bb      	ldr	r3, [r7, #24]
10003fa2:	f003 030f 	and.w	r3, r3, #15
10003fa6:	2201      	movs	r2, #1
10003fa8:	fa02 f303 	lsl.w	r3, r2, r3
10003fac:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
10003fae:	69fa      	ldr	r2, [r7, #28]
10003fb0:	68fb      	ldr	r3, [r7, #12]
10003fb2:	4013      	ands	r3, r2
10003fb4:	2b00      	cmp	r3, #0
10003fb6:	d01a      	beq.n	10003fee <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
10003fb8:	697b      	ldr	r3, [r7, #20]
10003fba:	685a      	ldr	r2, [r3, #4]
10003fbc:	68fb      	ldr	r3, [r7, #12]
10003fbe:	431a      	orrs	r2, r3
10003fc0:	697b      	ldr	r3, [r7, #20]
10003fc2:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
10003fc4:	687a      	ldr	r2, [r7, #4]
10003fc6:	69bb      	ldr	r3, [r7, #24]
10003fc8:	009b      	lsls	r3, r3, #2
10003fca:	4413      	add	r3, r2
10003fcc:	685b      	ldr	r3, [r3, #4]
10003fce:	2b00      	cmp	r3, #0
10003fd0:	d008      	beq.n	10003fe4 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
10003fd2:	687a      	ldr	r2, [r7, #4]
10003fd4:	69bb      	ldr	r3, [r7, #24]
10003fd6:	009b      	lsls	r3, r3, #2
10003fd8:	4413      	add	r3, r2
10003fda:	685b      	ldr	r3, [r3, #4]
10003fdc:	2201      	movs	r2, #1
10003fde:	69b9      	ldr	r1, [r7, #24]
10003fe0:	6878      	ldr	r0, [r7, #4]
10003fe2:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
10003fe4:	68fb      	ldr	r3, [r7, #12]
10003fe6:	43db      	mvns	r3, r3
10003fe8:	69fa      	ldr	r2, [r7, #28]
10003fea:	4013      	ands	r3, r2
10003fec:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
10003fee:	69bb      	ldr	r3, [r7, #24]
10003ff0:	3301      	adds	r3, #1
10003ff2:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10003ff4:	69fb      	ldr	r3, [r7, #28]
10003ff6:	2b00      	cmp	r3, #0
10003ff8:	d1d2      	bne.n	10003fa0 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
10003ffa:	bf00      	nop
10003ffc:	bf00      	nop
10003ffe:	3720      	adds	r7, #32
10004000:	46bd      	mov	sp, r7
10004002:	bd80      	pop	{r7, pc}
10004004:	4c001010 	.word	0x4c001010
10004008:	4c001000 	.word	0x4c001000

1000400c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
1000400c:	b480      	push	{r7}
1000400e:	b085      	sub	sp, #20
10004010:	af00      	add	r7, sp, #0
10004012:	60f8      	str	r0, [r7, #12]
10004014:	60b9      	str	r1, [r7, #8]
10004016:	4613      	mov	r3, r2
10004018:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
1000401a:	bf00      	nop
1000401c:	3714      	adds	r7, #20
1000401e:	46bd      	mov	sp, r7
10004020:	f85d 7b04 	ldr.w	r7, [sp], #4
10004024:	4770      	bx	lr

10004026 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10004026:	b480      	push	{r7}
10004028:	b085      	sub	sp, #20
1000402a:	af00      	add	r7, sp, #0
1000402c:	60f8      	str	r0, [r7, #12]
1000402e:	60b9      	str	r1, [r7, #8]
10004030:	4613      	mov	r3, r2
10004032:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
10004034:	bf00      	nop
10004036:	3714      	adds	r7, #20
10004038:	46bd      	mov	sp, r7
1000403a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000403e:	4770      	bx	lr

10004040 <IPCC_UnmaskInterrupt>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  */
void IPCC_UnmaskInterrupt(uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10004040:	b480      	push	{r7}
10004042:	b085      	sub	sp, #20
10004044:	af00      	add	r7, sp, #0
10004046:	6078      	str	r0, [r7, #4]
10004048:	460b      	mov	r3, r1
1000404a:	70fb      	strb	r3, [r7, #3]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
1000404c:	4b12      	ldr	r3, [pc, #72]	; (10004098 <IPCC_UnmaskInterrupt+0x58>)
1000404e:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10004050:	78fb      	ldrb	r3, [r7, #3]
10004052:	2b00      	cmp	r3, #0
10004054:	d10d      	bne.n	10004072 <IPCC_UnmaskInterrupt+0x32>
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10004056:	68fb      	ldr	r3, [r7, #12]
10004058:	685a      	ldr	r2, [r3, #4]
1000405a:	687b      	ldr	r3, [r7, #4]
1000405c:	f003 030f 	and.w	r3, r3, #15
10004060:	f44f 3180 	mov.w	r1, #65536	; 0x10000
10004064:	fa01 f303 	lsl.w	r3, r1, r3
10004068:	43db      	mvns	r3, r3
1000406a:	401a      	ands	r2, r3
1000406c:	68fb      	ldr	r3, [r7, #12]
1000406e:	605a      	str	r2, [r3, #4]
  else
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
  }
}
10004070:	e00b      	b.n	1000408a <IPCC_UnmaskInterrupt+0x4a>
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10004072:	68fb      	ldr	r3, [r7, #12]
10004074:	685a      	ldr	r2, [r3, #4]
10004076:	687b      	ldr	r3, [r7, #4]
10004078:	f003 030f 	and.w	r3, r3, #15
1000407c:	2101      	movs	r1, #1
1000407e:	fa01 f303 	lsl.w	r3, r1, r3
10004082:	43db      	mvns	r3, r3
10004084:	401a      	ands	r2, r3
10004086:	68fb      	ldr	r3, [r7, #12]
10004088:	605a      	str	r2, [r3, #4]
}
1000408a:	bf00      	nop
1000408c:	3714      	adds	r7, #20
1000408e:	46bd      	mov	sp, r7
10004090:	f85d 7b04 	ldr.w	r7, [sp], #4
10004094:	4770      	bx	lr
10004096:	bf00      	nop
10004098:	4c001010 	.word	0x4c001010

1000409c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
1000409c:	b480      	push	{r7}
1000409e:	b085      	sub	sp, #20
100040a0:	af00      	add	r7, sp, #0
100040a2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
100040a4:	2300      	movs	r3, #0
100040a6:	60fb      	str	r3, [r7, #12]
100040a8:	e00f      	b.n	100040ca <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
100040aa:	687a      	ldr	r2, [r7, #4]
100040ac:	68fb      	ldr	r3, [r7, #12]
100040ae:	009b      	lsls	r3, r3, #2
100040b0:	4413      	add	r3, r2
100040b2:	4a0b      	ldr	r2, [pc, #44]	; (100040e0 <IPCC_SetDefaultCallbacks+0x44>)
100040b4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
100040b6:	687a      	ldr	r2, [r7, #4]
100040b8:	68fb      	ldr	r3, [r7, #12]
100040ba:	3306      	adds	r3, #6
100040bc:	009b      	lsls	r3, r3, #2
100040be:	4413      	add	r3, r2
100040c0:	4a08      	ldr	r2, [pc, #32]	; (100040e4 <IPCC_SetDefaultCallbacks+0x48>)
100040c2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
100040c4:	68fb      	ldr	r3, [r7, #12]
100040c6:	3301      	adds	r3, #1
100040c8:	60fb      	str	r3, [r7, #12]
100040ca:	68fb      	ldr	r3, [r7, #12]
100040cc:	2b05      	cmp	r3, #5
100040ce:	d9ec      	bls.n	100040aa <IPCC_SetDefaultCallbacks+0xe>
  }
}
100040d0:	bf00      	nop
100040d2:	bf00      	nop
100040d4:	3714      	adds	r7, #20
100040d6:	46bd      	mov	sp, r7
100040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
100040dc:	4770      	bx	lr
100040de:	bf00      	nop
100040e0:	1000400d 	.word	0x1000400d
100040e4:	10004027 	.word	0x10004027

100040e8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
100040e8:	b480      	push	{r7}
100040ea:	b083      	sub	sp, #12
100040ec:	af00      	add	r7, sp, #0
100040ee:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
100040f0:	687b      	ldr	r3, [r7, #4]
100040f2:	2200      	movs	r2, #0
100040f4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
100040f6:	687b      	ldr	r3, [r7, #4]
100040f8:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
100040fc:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
100040fe:	687b      	ldr	r3, [r7, #4]
10004100:	223f      	movs	r2, #63	; 0x3f
10004102:	609a      	str	r2, [r3, #8]
}
10004104:	bf00      	nop
10004106:	370c      	adds	r7, #12
10004108:	46bd      	mov	sp, r7
1000410a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000410e:	4770      	bx	lr

10004110 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
10004110:	b480      	push	{r7}
10004112:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
10004114:	4b05      	ldr	r3, [pc, #20]	; (1000412c <HAL_PWR_EnableBkUpAccess+0x1c>)
10004116:	681b      	ldr	r3, [r3, #0]
10004118:	4a04      	ldr	r2, [pc, #16]	; (1000412c <HAL_PWR_EnableBkUpAccess+0x1c>)
1000411a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1000411e:	6013      	str	r3, [r2, #0]
}
10004120:	bf00      	nop
10004122:	46bd      	mov	sp, r7
10004124:	f85d 7b04 	ldr.w	r7, [sp], #4
10004128:	4770      	bx	lr
1000412a:	bf00      	nop
1000412c:	50001000 	.word	0x50001000

10004130 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10004130:	b580      	push	{r7, lr}
10004132:	b084      	sub	sp, #16
10004134:	af00      	add	r7, sp, #0
10004136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
10004138:	2300      	movs	r3, #0
1000413a:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
1000413c:	687b      	ldr	r3, [r7, #4]
1000413e:	2b00      	cmp	r3, #0
10004140:	d101      	bne.n	10004146 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
10004142:	2301      	movs	r3, #1
10004144:	e320      	b.n	10004788 <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10004146:	687b      	ldr	r3, [r7, #4]
10004148:	681b      	ldr	r3, [r3, #0]
1000414a:	f003 0301 	and.w	r3, r3, #1
1000414e:	2b00      	cmp	r3, #0
10004150:	f000 8081 	beq.w	10004256 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
10004154:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004158:	6a1b      	ldr	r3, [r3, #32]
1000415a:	f003 0303 	and.w	r3, r3, #3
1000415e:	2b01      	cmp	r3, #1
10004160:	d107      	bne.n	10004172 <HAL_RCC_OscConfig+0x42>
10004162:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004166:	6a1b      	ldr	r3, [r3, #32]
10004168:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000416c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004170:	d054      	beq.n	1000421c <HAL_RCC_OscConfig+0xec>
10004172:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004178:	f003 0307 	and.w	r3, r3, #7
1000417c:	2b01      	cmp	r3, #1
1000417e:	d107      	bne.n	10004190 <HAL_RCC_OscConfig+0x60>
10004180:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004186:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000418a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000418e:	d045      	beq.n	1000421c <HAL_RCC_OscConfig+0xec>
10004190:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10004196:	f003 0303 	and.w	r3, r3, #3
1000419a:	2b01      	cmp	r3, #1
1000419c:	d107      	bne.n	100041ae <HAL_RCC_OscConfig+0x7e>
1000419e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100041a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100041a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100041a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100041ac:	d036      	beq.n	1000421c <HAL_RCC_OscConfig+0xec>
100041ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100041b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100041b4:	f003 0303 	and.w	r3, r3, #3
100041b8:	2b01      	cmp	r3, #1
100041ba:	d10f      	bne.n	100041dc <HAL_RCC_OscConfig+0xac>
100041bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100041c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100041c4:	f003 0302 	and.w	r3, r3, #2
100041c8:	2b02      	cmp	r3, #2
100041ca:	d027      	beq.n	1000421c <HAL_RCC_OscConfig+0xec>
100041cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100041d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100041d4:	f003 0302 	and.w	r3, r3, #2
100041d8:	2b02      	cmp	r3, #2
100041da:	d01f      	beq.n	1000421c <HAL_RCC_OscConfig+0xec>
100041dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100041e0:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
100041e4:	f003 0303 	and.w	r3, r3, #3
100041e8:	2b01      	cmp	r3, #1
100041ea:	d107      	bne.n	100041fc <HAL_RCC_OscConfig+0xcc>
100041ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100041f0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100041f4:	f003 0302 	and.w	r3, r3, #2
100041f8:	2b02      	cmp	r3, #2
100041fa:	d00f      	beq.n	1000421c <HAL_RCC_OscConfig+0xec>
100041fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004200:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10004204:	f003 0303 	and.w	r3, r3, #3
10004208:	2b01      	cmp	r3, #1
1000420a:	d117      	bne.n	1000423c <HAL_RCC_OscConfig+0x10c>
1000420c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004210:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004214:	f003 0302 	and.w	r3, r3, #2
10004218:	2b02      	cmp	r3, #2
1000421a:	d10f      	bne.n	1000423c <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
1000421c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004220:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004224:	f403 7380 	and.w	r3, r3, #256	; 0x100
10004228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
1000422c:	d112      	bne.n	10004254 <HAL_RCC_OscConfig+0x124>
1000422e:	687b      	ldr	r3, [r7, #4]
10004230:	685b      	ldr	r3, [r3, #4]
10004232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10004236:	d00d      	beq.n	10004254 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
10004238:	2301      	movs	r3, #1
1000423a:	e2a5      	b.n	10004788 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
1000423c:	687b      	ldr	r3, [r7, #4]
1000423e:	685b      	ldr	r3, [r3, #4]
10004240:	4618      	mov	r0, r3
10004242:	f000 faa7 	bl	10004794 <HAL_RCC_HSEConfig>
10004246:	4603      	mov	r3, r0
10004248:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
1000424a:	7bfb      	ldrb	r3, [r7, #15]
1000424c:	2b00      	cmp	r3, #0
1000424e:	d002      	beq.n	10004256 <HAL_RCC_OscConfig+0x126>
      {
        return result;
10004250:	7bfb      	ldrb	r3, [r7, #15]
10004252:	e299      	b.n	10004788 <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10004254:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10004256:	687b      	ldr	r3, [r7, #4]
10004258:	681b      	ldr	r3, [r3, #0]
1000425a:	f003 0302 	and.w	r3, r3, #2
1000425e:	2b00      	cmp	r3, #0
10004260:	f000 814e 	beq.w	10004500 <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
10004264:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004268:	6a1b      	ldr	r3, [r3, #32]
1000426a:	f003 0303 	and.w	r3, r3, #3
1000426e:	2b00      	cmp	r3, #0
10004270:	d107      	bne.n	10004282 <HAL_RCC_OscConfig+0x152>
10004272:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004276:	6a1b      	ldr	r3, [r3, #32]
10004278:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000427c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004280:	d055      	beq.n	1000432e <HAL_RCC_OscConfig+0x1fe>
10004282:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004288:	f003 0307 	and.w	r3, r3, #7
1000428c:	2b00      	cmp	r3, #0
1000428e:	d107      	bne.n	100042a0 <HAL_RCC_OscConfig+0x170>
10004290:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004296:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000429a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000429e:	d046      	beq.n	1000432e <HAL_RCC_OscConfig+0x1fe>
100042a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100042a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100042a6:	f003 0303 	and.w	r3, r3, #3
100042aa:	2b00      	cmp	r3, #0
100042ac:	d107      	bne.n	100042be <HAL_RCC_OscConfig+0x18e>
100042ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100042b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100042b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100042b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100042bc:	d037      	beq.n	1000432e <HAL_RCC_OscConfig+0x1fe>
100042be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100042c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100042c4:	f003 0303 	and.w	r3, r3, #3
100042c8:	2b00      	cmp	r3, #0
100042ca:	d10f      	bne.n	100042ec <HAL_RCC_OscConfig+0x1bc>
100042cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100042d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100042d4:	f003 0302 	and.w	r3, r3, #2
100042d8:	2b02      	cmp	r3, #2
100042da:	d028      	beq.n	1000432e <HAL_RCC_OscConfig+0x1fe>
100042dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100042e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100042e4:	f003 0302 	and.w	r3, r3, #2
100042e8:	2b02      	cmp	r3, #2
100042ea:	d020      	beq.n	1000432e <HAL_RCC_OscConfig+0x1fe>
100042ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100042f0:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
100042f4:	f003 0303 	and.w	r3, r3, #3
100042f8:	2b00      	cmp	r3, #0
100042fa:	d107      	bne.n	1000430c <HAL_RCC_OscConfig+0x1dc>
100042fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004300:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004304:	f003 0302 	and.w	r3, r3, #2
10004308:	2b02      	cmp	r3, #2
1000430a:	d010      	beq.n	1000432e <HAL_RCC_OscConfig+0x1fe>
1000430c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004310:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10004314:	f003 0303 	and.w	r3, r3, #3
10004318:	2b00      	cmp	r3, #0
1000431a:	f040 8088 	bne.w	1000442e <HAL_RCC_OscConfig+0x2fe>
1000431e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004322:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004326:	f003 0302 	and.w	r3, r3, #2
1000432a:	2b02      	cmp	r3, #2
1000432c:	d17f      	bne.n	1000442e <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
1000432e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004332:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004336:	f003 0301 	and.w	r3, r3, #1
1000433a:	2b01      	cmp	r3, #1
1000433c:	d105      	bne.n	1000434a <HAL_RCC_OscConfig+0x21a>
1000433e:	687b      	ldr	r3, [r7, #4]
10004340:	68db      	ldr	r3, [r3, #12]
10004342:	2b01      	cmp	r3, #1
10004344:	d001      	beq.n	1000434a <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
10004346:	2301      	movs	r3, #1
10004348:	e21e      	b.n	10004788 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
1000434a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000434e:	699b      	ldr	r3, [r3, #24]
10004350:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
10004354:	687b      	ldr	r3, [r7, #4]
10004356:	691b      	ldr	r3, [r3, #16]
10004358:	021b      	lsls	r3, r3, #8
1000435a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000435e:	4313      	orrs	r3, r2
10004360:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10004362:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004368:	f003 0303 	and.w	r3, r3, #3
1000436c:	2b00      	cmp	r3, #0
1000436e:	d10f      	bne.n	10004390 <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10004370:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004378:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
1000437c:	2b02      	cmp	r3, #2
1000437e:	d047      	beq.n	10004410 <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10004380:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004384:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10004388:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
1000438c:	2b02      	cmp	r3, #2
1000438e:	d03f      	beq.n	10004410 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10004390:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004394:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10004398:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
1000439c:	2b00      	cmp	r3, #0
1000439e:	d107      	bne.n	100043b0 <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
100043a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100043a4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100043a8:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
100043ac:	2b02      	cmp	r3, #2
100043ae:	d02f      	beq.n	10004410 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
100043b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100043b4:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
100043b8:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
100043bc:	2b00      	cmp	r3, #0
100043be:	d107      	bne.n	100043d0 <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
100043c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100043c4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100043c8:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
100043cc:	2b02      	cmp	r3, #2
100043ce:	d01f      	beq.n	10004410 <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
100043d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100043d4:	699b      	ldr	r3, [r3, #24]
100043d6:	f023 0203 	bic.w	r2, r3, #3
100043da:	687b      	ldr	r3, [r7, #4]
100043dc:	695b      	ldr	r3, [r3, #20]
100043de:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100043e2:	4313      	orrs	r3, r2
100043e4:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
100043e6:	f7fd fb25 	bl	10001a34 <HAL_GetTick>
100043ea:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
100043ec:	e008      	b.n	10004400 <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
100043ee:	f7fd fb21 	bl	10001a34 <HAL_GetTick>
100043f2:	4602      	mov	r2, r0
100043f4:	68bb      	ldr	r3, [r7, #8]
100043f6:	1ad3      	subs	r3, r2, r3
100043f8:	2b64      	cmp	r3, #100	; 0x64
100043fa:	d901      	bls.n	10004400 <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
100043fc:	2303      	movs	r3, #3
100043fe:	e1c3      	b.n	10004788 <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10004400:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004404:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004408:	f003 0304 	and.w	r3, r3, #4
1000440c:	2b04      	cmp	r3, #4
1000440e:	d1ee      	bne.n	100043ee <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
10004410:	f001 faca 	bl	100059a8 <HAL_RCC_GetSystemCoreClockFreq>
10004414:	4603      	mov	r3, r0
10004416:	4ab3      	ldr	r2, [pc, #716]	; (100046e4 <HAL_RCC_OscConfig+0x5b4>)
10004418:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
1000441a:	4bb3      	ldr	r3, [pc, #716]	; (100046e8 <HAL_RCC_OscConfig+0x5b8>)
1000441c:	681b      	ldr	r3, [r3, #0]
1000441e:	4618      	mov	r0, r3
10004420:	f7fd fabe 	bl	100019a0 <HAL_InitTick>
10004424:	4603      	mov	r3, r0
10004426:	2b00      	cmp	r3, #0
10004428:	d069      	beq.n	100044fe <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
1000442a:	2301      	movs	r3, #1
1000442c:	e1ac      	b.n	10004788 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
1000442e:	687b      	ldr	r3, [r7, #4]
10004430:	68db      	ldr	r3, [r3, #12]
10004432:	2b00      	cmp	r3, #0
10004434:	d049      	beq.n	100044ca <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
10004436:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000443a:	68db      	ldr	r3, [r3, #12]
1000443c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004440:	f043 0301 	orr.w	r3, r3, #1
10004444:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10004446:	f7fd faf5 	bl	10001a34 <HAL_GetTick>
1000444a:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
1000444c:	e008      	b.n	10004460 <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000444e:	f7fd faf1 	bl	10001a34 <HAL_GetTick>
10004452:	4602      	mov	r2, r0
10004454:	68bb      	ldr	r3, [r7, #8]
10004456:	1ad3      	subs	r3, r2, r3
10004458:	2b64      	cmp	r3, #100	; 0x64
1000445a:	d901      	bls.n	10004460 <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
1000445c:	2303      	movs	r3, #3
1000445e:	e193      	b.n	10004788 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10004460:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004464:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004468:	f003 0301 	and.w	r3, r3, #1
1000446c:	2b01      	cmp	r3, #1
1000446e:	d1ee      	bne.n	1000444e <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10004470:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004474:	699b      	ldr	r3, [r3, #24]
10004476:	f023 0203 	bic.w	r2, r3, #3
1000447a:	687b      	ldr	r3, [r7, #4]
1000447c:	695b      	ldr	r3, [r3, #20]
1000447e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004482:	4313      	orrs	r3, r2
10004484:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10004486:	f7fd fad5 	bl	10001a34 <HAL_GetTick>
1000448a:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
1000448c:	e008      	b.n	100044a0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000448e:	f7fd fad1 	bl	10001a34 <HAL_GetTick>
10004492:	4602      	mov	r2, r0
10004494:	68bb      	ldr	r3, [r7, #8]
10004496:	1ad3      	subs	r3, r2, r3
10004498:	2b64      	cmp	r3, #100	; 0x64
1000449a:	d901      	bls.n	100044a0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
1000449c:	2303      	movs	r3, #3
1000449e:	e173      	b.n	10004788 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
100044a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044a4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100044a8:	f003 0304 	and.w	r3, r3, #4
100044ac:	2b04      	cmp	r3, #4
100044ae:	d1ee      	bne.n	1000448e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
100044b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044b4:	699b      	ldr	r3, [r3, #24]
100044b6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
100044ba:	687b      	ldr	r3, [r7, #4]
100044bc:	691b      	ldr	r3, [r3, #16]
100044be:	021b      	lsls	r3, r3, #8
100044c0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100044c4:	4313      	orrs	r3, r2
100044c6:	618b      	str	r3, [r1, #24]
100044c8:	e01a      	b.n	10004500 <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
100044ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044ce:	2201      	movs	r2, #1
100044d0:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100044d2:	f7fd faaf 	bl	10001a34 <HAL_GetTick>
100044d6:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
100044d8:	e008      	b.n	100044ec <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
100044da:	f7fd faab 	bl	10001a34 <HAL_GetTick>
100044de:	4602      	mov	r2, r0
100044e0:	68bb      	ldr	r3, [r7, #8]
100044e2:	1ad3      	subs	r3, r2, r3
100044e4:	2b64      	cmp	r3, #100	; 0x64
100044e6:	d901      	bls.n	100044ec <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
100044e8:	2303      	movs	r3, #3
100044ea:	e14d      	b.n	10004788 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
100044ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044f0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100044f4:	f003 0301 	and.w	r3, r3, #1
100044f8:	2b01      	cmp	r3, #1
100044fa:	d0ee      	beq.n	100044da <HAL_RCC_OscConfig+0x3aa>
100044fc:	e000      	b.n	10004500 <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
100044fe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
10004500:	687b      	ldr	r3, [r7, #4]
10004502:	681b      	ldr	r3, [r3, #0]
10004504:	f003 0310 	and.w	r3, r3, #16
10004508:	2b00      	cmp	r3, #0
1000450a:	f000 8091 	beq.w	10004630 <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
1000450e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004512:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10004516:	f003 0303 	and.w	r3, r3, #3
1000451a:	2b02      	cmp	r3, #2
1000451c:	d107      	bne.n	1000452e <HAL_RCC_OscConfig+0x3fe>
1000451e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004522:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004526:	f003 0302 	and.w	r3, r3, #2
1000452a:	2b02      	cmp	r3, #2
1000452c:	d01e      	beq.n	1000456c <HAL_RCC_OscConfig+0x43c>
1000452e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10004534:	f003 0303 	and.w	r3, r3, #3
10004538:	2b02      	cmp	r3, #2
1000453a:	d107      	bne.n	1000454c <HAL_RCC_OscConfig+0x41c>
1000453c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10004542:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004546:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000454a:	d00f      	beq.n	1000456c <HAL_RCC_OscConfig+0x43c>
1000454c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004550:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10004554:	f003 0303 	and.w	r3, r3, #3
10004558:	2b02      	cmp	r3, #2
1000455a:	d122      	bne.n	100045a2 <HAL_RCC_OscConfig+0x472>
1000455c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004560:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004564:	f003 0302 	and.w	r3, r3, #2
10004568:	2b02      	cmp	r3, #2
1000456a:	d11a      	bne.n	100045a2 <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
1000456c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004570:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004574:	f003 0310 	and.w	r3, r3, #16
10004578:	2b10      	cmp	r3, #16
1000457a:	d105      	bne.n	10004588 <HAL_RCC_OscConfig+0x458>
1000457c:	687b      	ldr	r3, [r7, #4]
1000457e:	69db      	ldr	r3, [r3, #28]
10004580:	2b10      	cmp	r3, #16
10004582:	d001      	beq.n	10004588 <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
10004584:	2301      	movs	r3, #1
10004586:	e0ff      	b.n	10004788 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10004588:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000458c:	69db      	ldr	r3, [r3, #28]
1000458e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
10004592:	687b      	ldr	r3, [r7, #4]
10004594:	6a1b      	ldr	r3, [r3, #32]
10004596:	021b      	lsls	r3, r3, #8
10004598:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000459c:	4313      	orrs	r3, r2
1000459e:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
100045a0:	e046      	b.n	10004630 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
100045a2:	687b      	ldr	r3, [r7, #4]
100045a4:	69db      	ldr	r3, [r3, #28]
100045a6:	2b00      	cmp	r3, #0
100045a8:	d029      	beq.n	100045fe <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
100045aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100045ae:	68db      	ldr	r3, [r3, #12]
100045b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100045b4:	f043 0310 	orr.w	r3, r3, #16
100045b8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100045ba:	f7fd fa3b 	bl	10001a34 <HAL_GetTick>
100045be:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
100045c0:	e008      	b.n	100045d4 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
100045c2:	f7fd fa37 	bl	10001a34 <HAL_GetTick>
100045c6:	4602      	mov	r2, r0
100045c8:	68bb      	ldr	r3, [r7, #8]
100045ca:	1ad3      	subs	r3, r2, r3
100045cc:	2b64      	cmp	r3, #100	; 0x64
100045ce:	d901      	bls.n	100045d4 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
100045d0:	2303      	movs	r3, #3
100045d2:	e0d9      	b.n	10004788 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
100045d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100045d8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100045dc:	f003 0310 	and.w	r3, r3, #16
100045e0:	2b10      	cmp	r3, #16
100045e2:	d1ee      	bne.n	100045c2 <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
100045e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100045e8:	69db      	ldr	r3, [r3, #28]
100045ea:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
100045ee:	687b      	ldr	r3, [r7, #4]
100045f0:	6a1b      	ldr	r3, [r3, #32]
100045f2:	021b      	lsls	r3, r3, #8
100045f4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100045f8:	4313      	orrs	r3, r2
100045fa:	61cb      	str	r3, [r1, #28]
100045fc:	e018      	b.n	10004630 <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
100045fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004602:	2210      	movs	r2, #16
10004604:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10004606:	f7fd fa15 	bl	10001a34 <HAL_GetTick>
1000460a:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
1000460c:	e008      	b.n	10004620 <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
1000460e:	f7fd fa11 	bl	10001a34 <HAL_GetTick>
10004612:	4602      	mov	r2, r0
10004614:	68bb      	ldr	r3, [r7, #8]
10004616:	1ad3      	subs	r3, r2, r3
10004618:	2b64      	cmp	r3, #100	; 0x64
1000461a:	d901      	bls.n	10004620 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
1000461c:	2303      	movs	r3, #3
1000461e:	e0b3      	b.n	10004788 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10004620:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004624:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004628:	f003 0310 	and.w	r3, r3, #16
1000462c:	2b10      	cmp	r3, #16
1000462e:	d0ee      	beq.n	1000460e <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
10004630:	687b      	ldr	r3, [r7, #4]
10004632:	681b      	ldr	r3, [r3, #0]
10004634:	f003 0308 	and.w	r3, r3, #8
10004638:	2b00      	cmp	r3, #0
1000463a:	d042      	beq.n	100046c2 <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
1000463c:	687b      	ldr	r3, [r7, #4]
1000463e:	699b      	ldr	r3, [r3, #24]
10004640:	2b00      	cmp	r3, #0
10004642:	d01f      	beq.n	10004684 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
10004644:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004648:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
1000464c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004650:	f043 0301 	orr.w	r3, r3, #1
10004654:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10004658:	f7fd f9ec 	bl	10001a34 <HAL_GetTick>
1000465c:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
1000465e:	e008      	b.n	10004672 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10004660:	f7fd f9e8 	bl	10001a34 <HAL_GetTick>
10004664:	4602      	mov	r2, r0
10004666:	68bb      	ldr	r3, [r7, #8]
10004668:	1ad3      	subs	r3, r2, r3
1000466a:	2b64      	cmp	r3, #100	; 0x64
1000466c:	d901      	bls.n	10004672 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
1000466e:	2303      	movs	r3, #3
10004670:	e08a      	b.n	10004788 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10004672:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004676:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
1000467a:	f003 0302 	and.w	r3, r3, #2
1000467e:	2b02      	cmp	r3, #2
10004680:	d1ee      	bne.n	10004660 <HAL_RCC_OscConfig+0x530>
10004682:	e01e      	b.n	100046c2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10004684:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004688:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
1000468c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004690:	f023 0301 	bic.w	r3, r3, #1
10004694:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10004698:	f7fd f9cc 	bl	10001a34 <HAL_GetTick>
1000469c:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
1000469e:	e008      	b.n	100046b2 <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
100046a0:	f7fd f9c8 	bl	10001a34 <HAL_GetTick>
100046a4:	4602      	mov	r2, r0
100046a6:	68bb      	ldr	r3, [r7, #8]
100046a8:	1ad3      	subs	r3, r2, r3
100046aa:	2b64      	cmp	r3, #100	; 0x64
100046ac:	d901      	bls.n	100046b2 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
100046ae:	2303      	movs	r3, #3
100046b0:	e06a      	b.n	10004788 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
100046b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100046b6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
100046ba:	f003 0302 	and.w	r3, r3, #2
100046be:	2b02      	cmp	r3, #2
100046c0:	d0ee      	beq.n	100046a0 <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
100046c2:	687b      	ldr	r3, [r7, #4]
100046c4:	681b      	ldr	r3, [r3, #0]
100046c6:	f003 0304 	and.w	r3, r3, #4
100046ca:	2b00      	cmp	r3, #0
100046cc:	d02b      	beq.n	10004726 <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
100046ce:	4b07      	ldr	r3, [pc, #28]	; (100046ec <HAL_RCC_OscConfig+0x5bc>)
100046d0:	681b      	ldr	r3, [r3, #0]
100046d2:	4a06      	ldr	r2, [pc, #24]	; (100046ec <HAL_RCC_OscConfig+0x5bc>)
100046d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
100046d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
100046da:	f7fd f9ab 	bl	10001a34 <HAL_GetTick>
100046de:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100046e0:	e00f      	b.n	10004702 <HAL_RCC_OscConfig+0x5d2>
100046e2:	bf00      	nop
100046e4:	10020000 	.word	0x10020000
100046e8:	10020004 	.word	0x10020004
100046ec:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
100046f0:	f7fd f9a0 	bl	10001a34 <HAL_GetTick>
100046f4:	4602      	mov	r2, r0
100046f6:	68bb      	ldr	r3, [r7, #8]
100046f8:	1ad3      	subs	r3, r2, r3
100046fa:	2b64      	cmp	r3, #100	; 0x64
100046fc:	d901      	bls.n	10004702 <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
100046fe:	2303      	movs	r3, #3
10004700:	e042      	b.n	10004788 <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10004702:	4b23      	ldr	r3, [pc, #140]	; (10004790 <HAL_RCC_OscConfig+0x660>)
10004704:	681b      	ldr	r3, [r3, #0]
10004706:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000470a:	2b00      	cmp	r3, #0
1000470c:	d0f0      	beq.n	100046f0 <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
1000470e:	687b      	ldr	r3, [r7, #4]
10004710:	689b      	ldr	r3, [r3, #8]
10004712:	4618      	mov	r0, r3
10004714:	f000 f8a9 	bl	1000486a <HAL_RCC_LSEConfig>
10004718:	4603      	mov	r3, r0
1000471a:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
1000471c:	7bfb      	ldrb	r3, [r7, #15]
1000471e:	2b00      	cmp	r3, #0
10004720:	d001      	beq.n	10004726 <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
10004722:	7bfb      	ldrb	r3, [r7, #15]
10004724:	e030      	b.n	10004788 <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
10004726:	687b      	ldr	r3, [r7, #4]
10004728:	3324      	adds	r3, #36	; 0x24
1000472a:	4618      	mov	r0, r3
1000472c:	f000 f91a 	bl	10004964 <RCC_PLL1_Config>
10004730:	4603      	mov	r3, r0
10004732:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10004734:	7bfb      	ldrb	r3, [r7, #15]
10004736:	2b00      	cmp	r3, #0
10004738:	d001      	beq.n	1000473e <HAL_RCC_OscConfig+0x60e>
  {
    return result;
1000473a:	7bfb      	ldrb	r3, [r7, #15]
1000473c:	e024      	b.n	10004788 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
1000473e:	687b      	ldr	r3, [r7, #4]
10004740:	3360      	adds	r3, #96	; 0x60
10004742:	4618      	mov	r0, r3
10004744:	f001 f9cc 	bl	10005ae0 <RCCEx_PLL2_Config>
10004748:	4603      	mov	r3, r0
1000474a:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
1000474c:	7bfb      	ldrb	r3, [r7, #15]
1000474e:	2b00      	cmp	r3, #0
10004750:	d001      	beq.n	10004756 <HAL_RCC_OscConfig+0x626>
  {
    return result;
10004752:	7bfb      	ldrb	r3, [r7, #15]
10004754:	e018      	b.n	10004788 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
10004756:	687b      	ldr	r3, [r7, #4]
10004758:	339c      	adds	r3, #156	; 0x9c
1000475a:	4618      	mov	r0, r3
1000475c:	f001 fb42 	bl	10005de4 <RCCEx_PLL3_Config>
10004760:	4603      	mov	r3, r0
10004762:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10004764:	7bfb      	ldrb	r3, [r7, #15]
10004766:	2b00      	cmp	r3, #0
10004768:	d001      	beq.n	1000476e <HAL_RCC_OscConfig+0x63e>
  {
    return result;
1000476a:	7bfb      	ldrb	r3, [r7, #15]
1000476c:	e00c      	b.n	10004788 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
1000476e:	687b      	ldr	r3, [r7, #4]
10004770:	33d8      	adds	r3, #216	; 0xd8
10004772:	4618      	mov	r0, r3
10004774:	f001 fca0 	bl	100060b8 <RCCEx_PLL4_Config>
10004778:	4603      	mov	r3, r0
1000477a:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
1000477c:	7bfb      	ldrb	r3, [r7, #15]
1000477e:	2b00      	cmp	r3, #0
10004780:	d001      	beq.n	10004786 <HAL_RCC_OscConfig+0x656>
  {
    return result;
10004782:	7bfb      	ldrb	r3, [r7, #15]
10004784:	e000      	b.n	10004788 <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
10004786:	2300      	movs	r3, #0
}
10004788:	4618      	mov	r0, r3
1000478a:	3710      	adds	r7, #16
1000478c:	46bd      	mov	sp, r7
1000478e:	bd80      	pop	{r7, pc}
10004790:	50001000 	.word	0x50001000

10004794 <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
10004794:	b580      	push	{r7, lr}
10004796:	b084      	sub	sp, #16
10004798:	af00      	add	r7, sp, #0
1000479a:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
1000479c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100047a0:	f44f 7280 	mov.w	r2, #256	; 0x100
100047a4:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100047a6:	f7fd f945 	bl	10001a34 <HAL_GetTick>
100047aa:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
100047ac:	e008      	b.n	100047c0 <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100047ae:	f7fd f941 	bl	10001a34 <HAL_GetTick>
100047b2:	4602      	mov	r2, r0
100047b4:	68fb      	ldr	r3, [r7, #12]
100047b6:	1ad3      	subs	r3, r2, r3
100047b8:	2b64      	cmp	r3, #100	; 0x64
100047ba:	d901      	bls.n	100047c0 <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
100047bc:	2303      	movs	r3, #3
100047be:	e050      	b.n	10004862 <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
100047c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100047c4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100047c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
100047cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100047d0:	d0ed      	beq.n	100047ae <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
100047d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100047d6:	f44f 6290 	mov.w	r2, #1152	; 0x480
100047da:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
100047dc:	687b      	ldr	r3, [r7, #4]
100047de:	2b00      	cmp	r3, #0
100047e0:	d03e      	beq.n	10004860 <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
100047e2:	687b      	ldr	r3, [r7, #4]
100047e4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
100047e8:	d108      	bne.n	100047fc <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
100047ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100047ee:	68db      	ldr	r3, [r3, #12]
100047f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100047f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
100047f8:	60d3      	str	r3, [r2, #12]
100047fa:	e013      	b.n	10004824 <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
100047fc:	687b      	ldr	r3, [r7, #4]
100047fe:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
10004802:	d10f      	bne.n	10004824 <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
10004804:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004808:	68db      	ldr	r3, [r3, #12]
1000480a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000480e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
10004812:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10004814:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004818:	68db      	ldr	r3, [r3, #12]
1000481a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000481e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
10004822:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
10004824:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004828:	68db      	ldr	r3, [r3, #12]
1000482a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000482e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10004832:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004834:	f7fd f8fe 	bl	10001a34 <HAL_GetTick>
10004838:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000483a:	e008      	b.n	1000484e <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1000483c:	f7fd f8fa 	bl	10001a34 <HAL_GetTick>
10004840:	4602      	mov	r2, r0
10004842:	68fb      	ldr	r3, [r7, #12]
10004844:	1ad3      	subs	r3, r2, r3
10004846:	2b64      	cmp	r3, #100	; 0x64
10004848:	d901      	bls.n	1000484e <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
1000484a:	2303      	movs	r3, #3
1000484c:	e009      	b.n	10004862 <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000484e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004852:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004856:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000485a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
1000485e:	d1ed      	bne.n	1000483c <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
10004860:	2300      	movs	r3, #0
}
10004862:	4618      	mov	r0, r3
10004864:	3710      	adds	r7, #16
10004866:	46bd      	mov	sp, r7
10004868:	bd80      	pop	{r7, pc}

1000486a <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
1000486a:	b580      	push	{r7, lr}
1000486c:	b084      	sub	sp, #16
1000486e:	af00      	add	r7, sp, #0
10004870:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10004872:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004876:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000487a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000487e:	f023 0301 	bic.w	r3, r3, #1
10004882:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10004886:	f7fd f8d5 	bl	10001a34 <HAL_GetTick>
1000488a:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
1000488c:	e00a      	b.n	100048a4 <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
1000488e:	f7fd f8d1 	bl	10001a34 <HAL_GetTick>
10004892:	4602      	mov	r2, r0
10004894:	68fb      	ldr	r3, [r7, #12]
10004896:	1ad3      	subs	r3, r2, r3
10004898:	f241 3288 	movw	r2, #5000	; 0x1388
1000489c:	4293      	cmp	r3, r2
1000489e:	d901      	bls.n	100048a4 <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
100048a0:	2303      	movs	r3, #3
100048a2:	e05b      	b.n	1000495c <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
100048a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100048a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100048ac:	f003 0304 	and.w	r3, r3, #4
100048b0:	2b04      	cmp	r3, #4
100048b2:	d0ec      	beq.n	1000488e <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
100048b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100048b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100048bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100048c0:	f023 030a 	bic.w	r3, r3, #10
100048c4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
100048c8:	687b      	ldr	r3, [r7, #4]
100048ca:	2b00      	cmp	r3, #0
100048cc:	d045      	beq.n	1000495a <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
100048ce:	687b      	ldr	r3, [r7, #4]
100048d0:	2b03      	cmp	r3, #3
100048d2:	d10a      	bne.n	100048ea <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
100048d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100048d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100048dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100048e0:	f043 0302 	orr.w	r3, r3, #2
100048e4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
100048e8:	e016      	b.n	10004918 <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
100048ea:	687b      	ldr	r3, [r7, #4]
100048ec:	2b0b      	cmp	r3, #11
100048ee:	d113      	bne.n	10004918 <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
100048f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100048f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100048f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100048fc:	f043 0308 	orr.w	r3, r3, #8
10004900:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10004904:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004908:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000490c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004910:	f043 0302 	orr.w	r3, r3, #2
10004914:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10004918:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000491c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10004920:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004924:	f043 0301 	orr.w	r3, r3, #1
10004928:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000492c:	f7fd f882 	bl	10001a34 <HAL_GetTick>
10004930:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10004932:	e00a      	b.n	1000494a <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10004934:	f7fd f87e 	bl	10001a34 <HAL_GetTick>
10004938:	4602      	mov	r2, r0
1000493a:	68fb      	ldr	r3, [r7, #12]
1000493c:	1ad3      	subs	r3, r2, r3
1000493e:	f241 3288 	movw	r2, #5000	; 0x1388
10004942:	4293      	cmp	r3, r2
10004944:	d901      	bls.n	1000494a <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
10004946:	2303      	movs	r3, #3
10004948:	e008      	b.n	1000495c <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
1000494a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000494e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10004952:	f003 0304 	and.w	r3, r3, #4
10004956:	2b04      	cmp	r3, #4
10004958:	d1ec      	bne.n	10004934 <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
1000495a:	2300      	movs	r3, #0
}
1000495c:	4618      	mov	r0, r3
1000495e:	3710      	adds	r7, #16
10004960:	46bd      	mov	sp, r7
10004962:	bd80      	pop	{r7, pc}

10004964 <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
10004964:	b580      	push	{r7, lr}
10004966:	b084      	sub	sp, #16
10004968:	af00      	add	r7, sp, #0
1000496a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
1000496c:	687b      	ldr	r3, [r7, #4]
1000496e:	681b      	ldr	r3, [r3, #0]
10004970:	2b00      	cmp	r3, #0
10004972:	f000 8174 	beq.w	10004c5e <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
10004976:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000497a:	6a1b      	ldr	r3, [r3, #32]
1000497c:	f003 0303 	and.w	r3, r3, #3
10004980:	2b02      	cmp	r3, #2
10004982:	d108      	bne.n	10004996 <RCC_PLL1_Config+0x32>
10004984:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004988:	6a1b      	ldr	r3, [r3, #32]
1000498a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000498e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004992:	f000 8162 	beq.w	10004c5a <RCC_PLL1_Config+0x2f6>
10004996:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000499a:	6a1b      	ldr	r3, [r3, #32]
1000499c:	f003 0303 	and.w	r3, r3, #3
100049a0:	2b03      	cmp	r3, #3
100049a2:	d108      	bne.n	100049b6 <RCC_PLL1_Config+0x52>
100049a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100049a8:	6a1b      	ldr	r3, [r3, #32]
100049aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100049ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100049b2:	f000 8152 	beq.w	10004c5a <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
100049b6:	687b      	ldr	r3, [r7, #4]
100049b8:	681b      	ldr	r3, [r3, #0]
100049ba:	2b02      	cmp	r3, #2
100049bc:	f040 8123 	bne.w	10004c06 <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100049c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100049c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100049c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100049cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100049d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
100049d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100049d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100049dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100049e0:	f023 0301 	bic.w	r3, r3, #1
100049e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100049e8:	f7fd f824 	bl	10001a34 <HAL_GetTick>
100049ec:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100049ee:	e008      	b.n	10004a02 <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100049f0:	f7fd f820 	bl	10001a34 <HAL_GetTick>
100049f4:	4602      	mov	r2, r0
100049f6:	68fb      	ldr	r3, [r7, #12]
100049f8:	1ad3      	subs	r3, r2, r3
100049fa:	2b64      	cmp	r3, #100	; 0x64
100049fc:	d901      	bls.n	10004a02 <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
100049fe:	2303      	movs	r3, #3
10004a00:	e12e      	b.n	10004c60 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10004a02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004a0a:	f003 0302 	and.w	r3, r3, #2
10004a0e:	2b02      	cmp	r3, #2
10004a10:	d0ee      	beq.n	100049f0 <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
10004a12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004a18:	f003 0307 	and.w	r3, r3, #7
10004a1c:	2b02      	cmp	r3, #2
10004a1e:	d112      	bne.n	10004a46 <RCC_PLL1_Config+0xe2>
10004a20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004a26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004a2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004a2e:	d10a      	bne.n	10004a46 <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10004a30:	687b      	ldr	r3, [r7, #4]
10004a32:	685a      	ldr	r2, [r3, #4]
10004a34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004a3a:	f003 0303 	and.w	r3, r3, #3
10004a3e:	429a      	cmp	r2, r3
10004a40:	d00c      	beq.n	10004a5c <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
10004a42:	2301      	movs	r3, #1
10004a44:	e10c      	b.n	10004c60 <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
10004a46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004a4c:	f023 0203 	bic.w	r2, r3, #3
10004a50:	687b      	ldr	r3, [r7, #4]
10004a52:	685b      	ldr	r3, [r3, #4]
10004a54:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004a58:	4313      	orrs	r3, r2
10004a5a:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10004a5c:	e008      	b.n	10004a70 <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10004a5e:	f7fc ffe9 	bl	10001a34 <HAL_GetTick>
10004a62:	4602      	mov	r2, r0
10004a64:	68fb      	ldr	r3, [r7, #12]
10004a66:	1ad3      	subs	r3, r2, r3
10004a68:	2b64      	cmp	r3, #100	; 0x64
10004a6a:	d901      	bls.n	10004a70 <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
10004a6c:	2303      	movs	r3, #3
10004a6e:	e0f7      	b.n	10004c60 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10004a70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004a76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004a7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004a7e:	d1ee      	bne.n	10004a5e <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
10004a80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a84:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
10004a88:	4b77      	ldr	r3, [pc, #476]	; (10004c68 <RCC_PLL1_Config+0x304>)
10004a8a:	4013      	ands	r3, r2
10004a8c:	687a      	ldr	r2, [r7, #4]
10004a8e:	68d2      	ldr	r2, [r2, #12]
10004a90:	1e51      	subs	r1, r2, #1
10004a92:	687a      	ldr	r2, [r7, #4]
10004a94:	6892      	ldr	r2, [r2, #8]
10004a96:	3a01      	subs	r2, #1
10004a98:	0412      	lsls	r2, r2, #16
10004a9a:	430a      	orrs	r2, r1
10004a9c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004aa0:	4313      	orrs	r3, r2
10004aa2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
10004aa6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10004aae:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10004ab2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10004ab6:	687a      	ldr	r2, [r7, #4]
10004ab8:	6912      	ldr	r2, [r2, #16]
10004aba:	1e51      	subs	r1, r2, #1
10004abc:	687a      	ldr	r2, [r7, #4]
10004abe:	6952      	ldr	r2, [r2, #20]
10004ac0:	3a01      	subs	r2, #1
10004ac2:	0212      	lsls	r2, r2, #8
10004ac4:	4311      	orrs	r1, r2
10004ac6:	687a      	ldr	r2, [r7, #4]
10004ac8:	6992      	ldr	r2, [r2, #24]
10004aca:	3a01      	subs	r2, #1
10004acc:	0412      	lsls	r2, r2, #16
10004ace:	430a      	orrs	r2, r1
10004ad0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004ad4:	4313      	orrs	r3, r2
10004ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
10004ada:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004ade:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10004ae2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10004aea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
10004aee:	687b      	ldr	r3, [r7, #4]
10004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004af2:	2b02      	cmp	r3, #2
10004af4:	d003      	beq.n	10004afe <RCC_PLL1_Config+0x19a>
10004af6:	687b      	ldr	r3, [r7, #4]
10004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004afa:	2b00      	cmp	r3, #0
10004afc:	d10c      	bne.n	10004b18 <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
10004afe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10004b06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10004b0e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10004b12:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
10004b16:	e00f      	b.n	10004b38 <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
10004b18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10004b20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10004b24:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10004b28:	687a      	ldr	r2, [r7, #4]
10004b2a:	6a12      	ldr	r2, [r2, #32]
10004b2c:	00d2      	lsls	r2, r2, #3
10004b2e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004b32:	4313      	orrs	r3, r2
10004b34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
10004b38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10004b40:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10004b48:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10004b4c:	687b      	ldr	r3, [r7, #4]
10004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004b50:	2b02      	cmp	r3, #2
10004b52:	d124      	bne.n	10004b9e <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
10004b54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
10004b5c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10004b60:	687b      	ldr	r3, [r7, #4]
10004b62:	6a99      	ldr	r1, [r3, #40]	; 0x28
10004b64:	687b      	ldr	r3, [r7, #4]
10004b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10004b68:	4319      	orrs	r1, r3
10004b6a:	687b      	ldr	r3, [r7, #4]
10004b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10004b6e:	4319      	orrs	r1, r3
10004b70:	687b      	ldr	r3, [r7, #4]
10004b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10004b74:	4319      	orrs	r1, r3
10004b76:	687b      	ldr	r3, [r7, #4]
10004b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10004b7a:	041b      	lsls	r3, r3, #16
10004b7c:	430b      	orrs	r3, r1
10004b7e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004b82:	4313      	orrs	r3, r2
10004b84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
10004b88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004b90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004b94:	f043 0304 	orr.w	r3, r3, #4
10004b98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
10004b9c:	e009      	b.n	10004bb2 <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
10004b9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004ba6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004baa:	f023 0304 	bic.w	r3, r3, #4
10004bae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
10004bb2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004bba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004bbe:	f043 0301 	orr.w	r3, r3, #1
10004bc2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10004bc6:	f7fc ff35 	bl	10001a34 <HAL_GetTick>
10004bca:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10004bcc:	e008      	b.n	10004be0 <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10004bce:	f7fc ff31 	bl	10001a34 <HAL_GetTick>
10004bd2:	4602      	mov	r2, r0
10004bd4:	68fb      	ldr	r3, [r7, #12]
10004bd6:	1ad3      	subs	r3, r2, r3
10004bd8:	2b64      	cmp	r3, #100	; 0x64
10004bda:	d901      	bls.n	10004be0 <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
10004bdc:	2303      	movs	r3, #3
10004bde:	e03f      	b.n	10004c60 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10004be0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004be8:	f003 0302 	and.w	r3, r3, #2
10004bec:	2b02      	cmp	r3, #2
10004bee:	d1ee      	bne.n	10004bce <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10004bf0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004bf8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004bfc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10004c00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
10004c04:	e02b      	b.n	10004c5e <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10004c06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004c0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10004c16:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
10004c1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004c22:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004c26:	f023 0301 	bic.w	r3, r3, #1
10004c2a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10004c2e:	f7fc ff01 	bl	10001a34 <HAL_GetTick>
10004c32:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10004c34:	e008      	b.n	10004c48 <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10004c36:	f7fc fefd 	bl	10001a34 <HAL_GetTick>
10004c3a:	4602      	mov	r2, r0
10004c3c:	68fb      	ldr	r3, [r7, #12]
10004c3e:	1ad3      	subs	r3, r2, r3
10004c40:	2b64      	cmp	r3, #100	; 0x64
10004c42:	d901      	bls.n	10004c48 <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
10004c44:	2303      	movs	r3, #3
10004c46:	e00b      	b.n	10004c60 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10004c48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004c50:	f003 0302 	and.w	r3, r3, #2
10004c54:	2b02      	cmp	r3, #2
10004c56:	d0ee      	beq.n	10004c36 <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
10004c58:	e001      	b.n	10004c5e <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10004c5a:	2301      	movs	r3, #1
10004c5c:	e000      	b.n	10004c60 <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
10004c5e:	2300      	movs	r3, #0

}
10004c60:	4618      	mov	r0, r3
10004c62:	3710      	adds	r7, #16
10004c64:	46bd      	mov	sp, r7
10004c66:	bd80      	pop	{r7, pc}
10004c68:	ffc0fe00 	.word	0xffc0fe00

10004c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
10004c6c:	b580      	push	{r7, lr}
10004c6e:	b084      	sub	sp, #16
10004c70:	af00      	add	r7, sp, #0
10004c72:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
10004c74:	2300      	movs	r3, #0
10004c76:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10004c78:	687b      	ldr	r3, [r7, #4]
10004c7a:	2b00      	cmp	r3, #0
10004c7c:	d101      	bne.n	10004c82 <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
10004c7e:	2301      	movs	r3, #1
10004c80:	e102      	b.n	10004e88 <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
10004c82:	687b      	ldr	r3, [r7, #4]
10004c84:	681b      	ldr	r3, [r3, #0]
10004c86:	f003 0301 	and.w	r3, r3, #1
10004c8a:	2b00      	cmp	r3, #0
10004c8c:	d00b      	beq.n	10004ca6 <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
10004c8e:	687b      	ldr	r3, [r7, #4]
10004c90:	3304      	adds	r3, #4
10004c92:	4618      	mov	r0, r3
10004c94:	f000 f8fc 	bl	10004e90 <RCC_MPUConfig>
10004c98:	4603      	mov	r3, r0
10004c9a:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10004c9c:	7bfb      	ldrb	r3, [r7, #15]
10004c9e:	2b00      	cmp	r3, #0
10004ca0:	d001      	beq.n	10004ca6 <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
10004ca2:	7bfb      	ldrb	r3, [r7, #15]
10004ca4:	e0f0      	b.n	10004e88 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
10004ca6:	687b      	ldr	r3, [r7, #4]
10004ca8:	681b      	ldr	r3, [r3, #0]
10004caa:	f003 0302 	and.w	r3, r3, #2
10004cae:	2b00      	cmp	r3, #0
10004cb0:	d00b      	beq.n	10004cca <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
10004cb2:	687b      	ldr	r3, [r7, #4]
10004cb4:	330c      	adds	r3, #12
10004cb6:	4618      	mov	r0, r3
10004cb8:	f000 f960 	bl	10004f7c <RCC_AXISSConfig>
10004cbc:	4603      	mov	r3, r0
10004cbe:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10004cc0:	7bfb      	ldrb	r3, [r7, #15]
10004cc2:	2b00      	cmp	r3, #0
10004cc4:	d001      	beq.n	10004cca <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
10004cc6:	7bfb      	ldrb	r3, [r7, #15]
10004cc8:	e0de      	b.n	10004e88 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
10004cca:	687b      	ldr	r3, [r7, #4]
10004ccc:	681b      	ldr	r3, [r3, #0]
10004cce:	f003 0304 	and.w	r3, r3, #4
10004cd2:	2b00      	cmp	r3, #0
10004cd4:	d00b      	beq.n	10004cee <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
10004cd6:	687b      	ldr	r3, [r7, #4]
10004cd8:	3314      	adds	r3, #20
10004cda:	4618      	mov	r0, r3
10004cdc:	f000 f9e6 	bl	100050ac <RCC_MCUConfig>
10004ce0:	4603      	mov	r3, r0
10004ce2:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10004ce4:	7bfb      	ldrb	r3, [r7, #15]
10004ce6:	2b00      	cmp	r3, #0
10004ce8:	d001      	beq.n	10004cee <HAL_RCC_ClockConfig+0x82>
    {
      return status;
10004cea:	7bfb      	ldrb	r3, [r7, #15]
10004cec:	e0cc      	b.n	10004e88 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
10004cee:	687b      	ldr	r3, [r7, #4]
10004cf0:	681b      	ldr	r3, [r3, #0]
10004cf2:	f003 0308 	and.w	r3, r3, #8
10004cf6:	2b00      	cmp	r3, #0
10004cf8:	d020      	beq.n	10004d3c <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
10004cfa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10004d00:	f023 0207 	bic.w	r2, r3, #7
10004d04:	687b      	ldr	r3, [r7, #4]
10004d06:	69db      	ldr	r3, [r3, #28]
10004d08:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004d0c:	4313      	orrs	r3, r2
10004d0e:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004d10:	f7fc fe90 	bl	10001a34 <HAL_GetTick>
10004d14:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10004d16:	e009      	b.n	10004d2c <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004d18:	f7fc fe8c 	bl	10001a34 <HAL_GetTick>
10004d1c:	4602      	mov	r2, r0
10004d1e:	68bb      	ldr	r3, [r7, #8]
10004d20:	1ad3      	subs	r3, r2, r3
10004d22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004d26:	d901      	bls.n	10004d2c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
10004d28:	2303      	movs	r3, #3
10004d2a:	e0ad      	b.n	10004e88 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10004d2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10004d32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004d36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004d3a:	d1ed      	bne.n	10004d18 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
10004d3c:	687b      	ldr	r3, [r7, #4]
10004d3e:	681b      	ldr	r3, [r3, #0]
10004d40:	f003 0310 	and.w	r3, r3, #16
10004d44:	2b00      	cmp	r3, #0
10004d46:	d020      	beq.n	10004d8a <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
10004d48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10004d4e:	f023 0207 	bic.w	r2, r3, #7
10004d52:	687b      	ldr	r3, [r7, #4]
10004d54:	6a1b      	ldr	r3, [r3, #32]
10004d56:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004d5a:	4313      	orrs	r3, r2
10004d5c:	640b      	str	r3, [r1, #64]	; 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004d5e:	f7fc fe69 	bl	10001a34 <HAL_GetTick>
10004d62:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10004d64:	e009      	b.n	10004d7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004d66:	f7fc fe65 	bl	10001a34 <HAL_GetTick>
10004d6a:	4602      	mov	r2, r0
10004d6c:	68bb      	ldr	r3, [r7, #8]
10004d6e:	1ad3      	subs	r3, r2, r3
10004d70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004d74:	d901      	bls.n	10004d7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
10004d76:	2303      	movs	r3, #3
10004d78:	e086      	b.n	10004e88 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10004d7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10004d80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004d84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004d88:	d1ed      	bne.n	10004d66 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
10004d8a:	687b      	ldr	r3, [r7, #4]
10004d8c:	681b      	ldr	r3, [r3, #0]
10004d8e:	f003 0320 	and.w	r3, r3, #32
10004d92:	2b00      	cmp	r3, #0
10004d94:	d023      	beq.n	10004dde <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
10004d96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d9a:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10004d9e:	f023 0207 	bic.w	r2, r3, #7
10004da2:	687b      	ldr	r3, [r7, #4]
10004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004da6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004daa:	4313      	orrs	r3, r2
10004dac:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004db0:	f7fc fe40 	bl	10001a34 <HAL_GetTick>
10004db4:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10004db6:	e009      	b.n	10004dcc <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004db8:	f7fc fe3c 	bl	10001a34 <HAL_GetTick>
10004dbc:	4602      	mov	r2, r0
10004dbe:	68bb      	ldr	r3, [r7, #8]
10004dc0:	1ad3      	subs	r3, r2, r3
10004dc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004dc6:	d901      	bls.n	10004dcc <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
10004dc8:	2303      	movs	r3, #3
10004dca:	e05d      	b.n	10004e88 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10004dcc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004dd0:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10004dd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004ddc:	d1ec      	bne.n	10004db8 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
10004dde:	687b      	ldr	r3, [r7, #4]
10004de0:	681b      	ldr	r3, [r3, #0]
10004de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
10004de6:	2b00      	cmp	r3, #0
10004de8:	d023      	beq.n	10004e32 <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
10004dea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004dee:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10004df2:	f023 0207 	bic.w	r2, r3, #7
10004df6:	687b      	ldr	r3, [r7, #4]
10004df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004dfa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004dfe:	4313      	orrs	r3, r2
10004e00:	f8c1 3838 	str.w	r3, [r1, #2104]	; 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004e04:	f7fc fe16 	bl	10001a34 <HAL_GetTick>
10004e08:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10004e0a:	e009      	b.n	10004e20 <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004e0c:	f7fc fe12 	bl	10001a34 <HAL_GetTick>
10004e10:	4602      	mov	r2, r0
10004e12:	68bb      	ldr	r3, [r7, #8]
10004e14:	1ad3      	subs	r3, r2, r3
10004e16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004e1a:	d901      	bls.n	10004e20 <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
10004e1c:	2303      	movs	r3, #3
10004e1e:	e033      	b.n	10004e88 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10004e20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e24:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10004e28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004e2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004e30:	d1ec      	bne.n	10004e0c <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
10004e32:	687b      	ldr	r3, [r7, #4]
10004e34:	681b      	ldr	r3, [r3, #0]
10004e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
10004e3a:	2b00      	cmp	r3, #0
10004e3c:	d023      	beq.n	10004e86 <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
10004e3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e42:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
10004e46:	f023 0207 	bic.w	r2, r3, #7
10004e4a:	687b      	ldr	r3, [r7, #4]
10004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10004e4e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004e52:	4313      	orrs	r3, r2
10004e54:	f8c1 383c 	str.w	r3, [r1, #2108]	; 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004e58:	f7fc fdec 	bl	10001a34 <HAL_GetTick>
10004e5c:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10004e5e:	e009      	b.n	10004e74 <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004e60:	f7fc fde8 	bl	10001a34 <HAL_GetTick>
10004e64:	4602      	mov	r2, r0
10004e66:	68bb      	ldr	r3, [r7, #8]
10004e68:	1ad3      	subs	r3, r2, r3
10004e6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004e6e:	d901      	bls.n	10004e74 <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
10004e70:	2303      	movs	r3, #3
10004e72:	e009      	b.n	10004e88 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10004e74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e78:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
10004e7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004e80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004e84:	d1ec      	bne.n	10004e60 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
10004e86:	2300      	movs	r3, #0
}
10004e88:	4618      	mov	r0, r3
10004e8a:	3710      	adds	r7, #16
10004e8c:	46bd      	mov	sp, r7
10004e8e:	bd80      	pop	{r7, pc}

10004e90 <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
10004e90:	b580      	push	{r7, lr}
10004e92:	b084      	sub	sp, #16
10004e94:	af00      	add	r7, sp, #0
10004e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
10004e98:	687b      	ldr	r3, [r7, #4]
10004e9a:	681b      	ldr	r3, [r3, #0]
10004e9c:	2b03      	cmp	r3, #3
10004e9e:	d840      	bhi.n	10004f22 <RCC_MPUConfig+0x92>
10004ea0:	a201      	add	r2, pc, #4	; (adr r2, 10004ea8 <RCC_MPUConfig+0x18>)
10004ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004ea6:	bf00      	nop
10004ea8:	10004eb9 	.word	0x10004eb9
10004eac:	10004ecd 	.word	0x10004ecd
10004eb0:	10004ee3 	.word	0x10004ee3
10004eb4:	10004ef7 	.word	0x10004ef7
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10004eb8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004ebc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004ec0:	f003 0301 	and.w	r3, r3, #1
10004ec4:	2b01      	cmp	r3, #1
10004ec6:	d02e      	beq.n	10004f26 <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
10004ec8:	2301      	movs	r3, #1
10004eca:	e053      	b.n	10004f74 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10004ecc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004ed0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
10004ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10004edc:	d025      	beq.n	10004f2a <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
10004ede:	2301      	movs	r3, #1
10004ee0:	e048      	b.n	10004f74 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10004ee2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004eea:	f003 0302 	and.w	r3, r3, #2
10004eee:	2b02      	cmp	r3, #2
10004ef0:	d01d      	beq.n	10004f2e <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
10004ef2:	2301      	movs	r3, #1
10004ef4:	e03e      	b.n	10004f74 <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10004ef6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004efe:	f003 0302 	and.w	r3, r3, #2
10004f02:	2b02      	cmp	r3, #2
10004f04:	d001      	beq.n	10004f0a <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
10004f06:	2301      	movs	r3, #1
10004f08:	e034      	b.n	10004f74 <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
10004f0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10004f10:	f023 0207 	bic.w	r2, r3, #7
10004f14:	687b      	ldr	r3, [r7, #4]
10004f16:	685b      	ldr	r3, [r3, #4]
10004f18:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004f1c:	4313      	orrs	r3, r2
10004f1e:	62cb      	str	r3, [r1, #44]	; 0x2c

      break;
10004f20:	e006      	b.n	10004f30 <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
10004f22:	2301      	movs	r3, #1
10004f24:	e026      	b.n	10004f74 <RCC_MPUConfig+0xe4>
      break;
10004f26:	bf00      	nop
10004f28:	e002      	b.n	10004f30 <RCC_MPUConfig+0xa0>
      break;
10004f2a:	bf00      	nop
10004f2c:	e000      	b.n	10004f30 <RCC_MPUConfig+0xa0>
      break;
10004f2e:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
10004f30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f34:	6a1b      	ldr	r3, [r3, #32]
10004f36:	f023 0203 	bic.w	r2, r3, #3
10004f3a:	687b      	ldr	r3, [r7, #4]
10004f3c:	681b      	ldr	r3, [r3, #0]
10004f3e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004f42:	4313      	orrs	r3, r2
10004f44:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10004f46:	f7fc fd75 	bl	10001a34 <HAL_GetTick>
10004f4a:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10004f4c:	e009      	b.n	10004f62 <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004f4e:	f7fc fd71 	bl	10001a34 <HAL_GetTick>
10004f52:	4602      	mov	r2, r0
10004f54:	68fb      	ldr	r3, [r7, #12]
10004f56:	1ad3      	subs	r3, r2, r3
10004f58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004f5c:	d901      	bls.n	10004f62 <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
10004f5e:	2303      	movs	r3, #3
10004f60:	e008      	b.n	10004f74 <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10004f62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f66:	6a1b      	ldr	r3, [r3, #32]
10004f68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004f70:	d1ed      	bne.n	10004f4e <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
10004f72:	2300      	movs	r3, #0
}
10004f74:	4618      	mov	r0, r3
10004f76:	3710      	adds	r7, #16
10004f78:	46bd      	mov	sp, r7
10004f7a:	bd80      	pop	{r7, pc}

10004f7c <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
10004f7c:	b580      	push	{r7, lr}
10004f7e:	b084      	sub	sp, #16
10004f80:	af00      	add	r7, sp, #0
10004f82:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
10004f84:	687b      	ldr	r3, [r7, #4]
10004f86:	681b      	ldr	r3, [r3, #0]
10004f88:	2b02      	cmp	r3, #2
10004f8a:	d01b      	beq.n	10004fc4 <RCC_AXISSConfig+0x48>
10004f8c:	2b02      	cmp	r3, #2
10004f8e:	d823      	bhi.n	10004fd8 <RCC_AXISSConfig+0x5c>
10004f90:	2b00      	cmp	r3, #0
10004f92:	d002      	beq.n	10004f9a <RCC_AXISSConfig+0x1e>
10004f94:	2b01      	cmp	r3, #1
10004f96:	d00a      	beq.n	10004fae <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
10004f98:	e01e      	b.n	10004fd8 <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10004f9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f9e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004fa2:	f003 0301 	and.w	r3, r3, #1
10004fa6:	2b01      	cmp	r3, #1
10004fa8:	d018      	beq.n	10004fdc <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
10004faa:	2301      	movs	r3, #1
10004fac:	e079      	b.n	100050a2 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10004fae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004fb2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
10004fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10004fbe:	d00f      	beq.n	10004fe0 <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
10004fc0:	2301      	movs	r3, #1
10004fc2:	e06e      	b.n	100050a2 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10004fc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10004fcc:	f003 0302 	and.w	r3, r3, #2
10004fd0:	2b02      	cmp	r3, #2
10004fd2:	d007      	beq.n	10004fe4 <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
10004fd4:	2301      	movs	r3, #1
10004fd6:	e064      	b.n	100050a2 <RCC_AXISSConfig+0x126>
      break;
10004fd8:	bf00      	nop
10004fda:	e004      	b.n	10004fe6 <RCC_AXISSConfig+0x6a>
      break;
10004fdc:	bf00      	nop
10004fde:	e002      	b.n	10004fe6 <RCC_AXISSConfig+0x6a>
      break;
10004fe0:	bf00      	nop
10004fe2:	e000      	b.n	10004fe6 <RCC_AXISSConfig+0x6a>
      break;
10004fe4:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
10004fe6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004fec:	f023 0207 	bic.w	r2, r3, #7
10004ff0:	687b      	ldr	r3, [r7, #4]
10004ff2:	681b      	ldr	r3, [r3, #0]
10004ff4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004ff8:	4313      	orrs	r3, r2
10004ffa:	624b      	str	r3, [r1, #36]	; 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
10004ffc:	687b      	ldr	r3, [r7, #4]
10004ffe:	681b      	ldr	r3, [r3, #0]
10005000:	2b03      	cmp	r3, #3
10005002:	d016      	beq.n	10005032 <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10005004:	f7fc fd16 	bl	10001a34 <HAL_GetTick>
10005008:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
1000500a:	e009      	b.n	10005020 <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000500c:	f7fc fd12 	bl	10001a34 <HAL_GetTick>
10005010:	4602      	mov	r2, r0
10005012:	68fb      	ldr	r3, [r7, #12]
10005014:	1ad3      	subs	r3, r2, r3
10005016:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000501a:	d901      	bls.n	10005020 <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
1000501c:	2303      	movs	r3, #3
1000501e:	e040      	b.n	100050a2 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10005020:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005026:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000502a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000502e:	d1ed      	bne.n	1000500c <RCC_AXISSConfig+0x90>
10005030:	e015      	b.n	1000505e <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10005032:	f7fc fcff 	bl	10001a34 <HAL_GetTick>
10005036:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10005038:	e009      	b.n	1000504e <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000503a:	f7fc fcfb 	bl	10001a34 <HAL_GetTick>
1000503e:	4602      	mov	r2, r0
10005040:	68fb      	ldr	r3, [r7, #12]
10005042:	1ad3      	subs	r3, r2, r3
10005044:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10005048:	d901      	bls.n	1000504e <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
1000504a:	2303      	movs	r3, #3
1000504c:	e029      	b.n	100050a2 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
1000504e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005054:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10005058:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000505c:	d0ed      	beq.n	1000503a <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
1000505e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10005064:	f023 0207 	bic.w	r2, r3, #7
10005068:	687b      	ldr	r3, [r7, #4]
1000506a:	685b      	ldr	r3, [r3, #4]
1000506c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005070:	4313      	orrs	r3, r2
10005072:	630b      	str	r3, [r1, #48]	; 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10005074:	f7fc fcde 	bl	10001a34 <HAL_GetTick>
10005078:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
1000507a:	e009      	b.n	10005090 <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000507c:	f7fc fcda 	bl	10001a34 <HAL_GetTick>
10005080:	4602      	mov	r2, r0
10005082:	68fb      	ldr	r3, [r7, #12]
10005084:	1ad3      	subs	r3, r2, r3
10005086:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000508a:	d901      	bls.n	10005090 <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
1000508c:	2303      	movs	r3, #3
1000508e:	e008      	b.n	100050a2 <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10005090:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10005096:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000509a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000509e:	d1ed      	bne.n	1000507c <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
100050a0:	2300      	movs	r3, #0
}
100050a2:	4618      	mov	r0, r3
100050a4:	3710      	adds	r7, #16
100050a6:	46bd      	mov	sp, r7
100050a8:	bd80      	pop	{r7, pc}
	...

100050ac <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
100050ac:	b580      	push	{r7, lr}
100050ae:	b084      	sub	sp, #16
100050b0:	af00      	add	r7, sp, #0
100050b2:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
100050b4:	687b      	ldr	r3, [r7, #4]
100050b6:	681b      	ldr	r3, [r3, #0]
100050b8:	2b03      	cmp	r3, #3
100050ba:	d834      	bhi.n	10005126 <RCC_MCUConfig+0x7a>
100050bc:	a201      	add	r2, pc, #4	; (adr r2, 100050c4 <RCC_MCUConfig+0x18>)
100050be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100050c2:	bf00      	nop
100050c4:	100050d5 	.word	0x100050d5
100050c8:	100050e9 	.word	0x100050e9
100050cc:	100050ff 	.word	0x100050ff
100050d0:	10005113 	.word	0x10005113
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100050d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100050d8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100050dc:	f003 0301 	and.w	r3, r3, #1
100050e0:	2b01      	cmp	r3, #1
100050e2:	d022      	beq.n	1000512a <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
100050e4:	2301      	movs	r3, #1
100050e6:	e081      	b.n	100051ec <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100050e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100050ec:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100050f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
100050f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100050f8:	d019      	beq.n	1000512e <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
100050fa:	2301      	movs	r3, #1
100050fc:	e076      	b.n	100051ec <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
100050fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005102:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10005106:	f003 0310 	and.w	r3, r3, #16
1000510a:	2b10      	cmp	r3, #16
1000510c:	d011      	beq.n	10005132 <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
1000510e:	2301      	movs	r3, #1
10005110:	e06c      	b.n	100051ec <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10005112:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005116:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000511a:	f003 0302 	and.w	r3, r3, #2
1000511e:	2b02      	cmp	r3, #2
10005120:	d009      	beq.n	10005136 <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
10005122:	2301      	movs	r3, #1
10005124:	e062      	b.n	100051ec <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
10005126:	bf00      	nop
10005128:	e006      	b.n	10005138 <RCC_MCUConfig+0x8c>
      break;
1000512a:	bf00      	nop
1000512c:	e004      	b.n	10005138 <RCC_MCUConfig+0x8c>
      break;
1000512e:	bf00      	nop
10005130:	e002      	b.n	10005138 <RCC_MCUConfig+0x8c>
      break;
10005132:	bf00      	nop
10005134:	e000      	b.n	10005138 <RCC_MCUConfig+0x8c>
      break;
10005136:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
10005138:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000513c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000513e:	f023 0203 	bic.w	r2, r3, #3
10005142:	687b      	ldr	r3, [r7, #4]
10005144:	681b      	ldr	r3, [r3, #0]
10005146:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000514a:	4313      	orrs	r3, r2
1000514c:	648b      	str	r3, [r1, #72]	; 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
1000514e:	f7fc fc71 	bl	10001a34 <HAL_GetTick>
10005152:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10005154:	e009      	b.n	1000516a <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10005156:	f7fc fc6d 	bl	10001a34 <HAL_GetTick>
1000515a:	4602      	mov	r2, r0
1000515c:	68fb      	ldr	r3, [r7, #12]
1000515e:	1ad3      	subs	r3, r2, r3
10005160:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10005164:	d901      	bls.n	1000516a <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
10005166:	2303      	movs	r3, #3
10005168:	e040      	b.n	100051ec <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
1000516a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000516e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10005170:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10005174:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10005178:	d1ed      	bne.n	10005156 <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
1000517a:	f000 fc15 	bl	100059a8 <HAL_RCC_GetSystemCoreClockFreq>
1000517e:	4603      	mov	r3, r0
10005180:	4a1c      	ldr	r2, [pc, #112]	; (100051f4 <RCC_MCUConfig+0x148>)
10005182:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10005184:	4b1c      	ldr	r3, [pc, #112]	; (100051f8 <RCC_MCUConfig+0x14c>)
10005186:	681b      	ldr	r3, [r3, #0]
10005188:	4618      	mov	r0, r3
1000518a:	f7fc fc09 	bl	100019a0 <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
1000518e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005192:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10005196:	f023 020f 	bic.w	r2, r3, #15
1000519a:	687b      	ldr	r3, [r7, #4]
1000519c:	685b      	ldr	r3, [r3, #4]
1000519e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100051a2:	4313      	orrs	r3, r2
100051a4:	f8c1 3830 	str.w	r3, [r1, #2096]	; 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100051a8:	f7fc fc44 	bl	10001a34 <HAL_GetTick>
100051ac:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
100051ae:	e009      	b.n	100051c4 <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100051b0:	f7fc fc40 	bl	10001a34 <HAL_GetTick>
100051b4:	4602      	mov	r2, r0
100051b6:	68fb      	ldr	r3, [r7, #12]
100051b8:	1ad3      	subs	r3, r2, r3
100051ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100051be:	d901      	bls.n	100051c4 <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
100051c0:	2303      	movs	r3, #3
100051c2:	e013      	b.n	100051ec <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
100051c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100051c8:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
100051cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100051d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100051d4:	d1ec      	bne.n	100051b0 <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
100051d6:	f000 fbe7 	bl	100059a8 <HAL_RCC_GetSystemCoreClockFreq>
100051da:	4603      	mov	r3, r0
100051dc:	4a05      	ldr	r2, [pc, #20]	; (100051f4 <RCC_MCUConfig+0x148>)
100051de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
100051e0:	4b05      	ldr	r3, [pc, #20]	; (100051f8 <RCC_MCUConfig+0x14c>)
100051e2:	681b      	ldr	r3, [r3, #0]
100051e4:	4618      	mov	r0, r3
100051e6:	f7fc fbdb 	bl	100019a0 <HAL_InitTick>
#endif

  return HAL_OK;
100051ea:	2300      	movs	r3, #0
}
100051ec:	4618      	mov	r0, r3
100051ee:	3710      	adds	r7, #16
100051f0:	46bd      	mov	sp, r7
100051f2:	bd80      	pop	{r7, pc}
100051f4:	10020000 	.word	0x10020000
100051f8:	10020004 	.word	0x10020004

100051fc <HAL_RCC_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
100051fc:	b480      	push	{r7}
100051fe:	b089      	sub	sp, #36	; 0x24
10005200:	af00      	add	r7, sp, #0
10005202:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0U, pll2m = 1U, pll2fracen = 0U, hsivalue = 0U;
10005204:	2300      	movs	r3, #0
10005206:	61bb      	str	r3, [r7, #24]
10005208:	2301      	movs	r3, #1
1000520a:	617b      	str	r3, [r7, #20]
1000520c:	2300      	movs	r3, #0
1000520e:	613b      	str	r3, [r7, #16]
10005210:	2300      	movs	r3, #0
10005212:	60fb      	str	r3, [r7, #12]
  float fracn1, pll2vco = 0;
10005214:	f04f 0300 	mov.w	r3, #0
10005218:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL12_SOURCE();
1000521a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000521e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005220:	f003 0303 	and.w	r3, r3, #3
10005224:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLL2CFGR1 & RCC_PLL2CFGR1_DIVM2) >> RCC_PLL2CFGR1_DIVM2_Pos) + 1U;
10005226:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000522a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
1000522e:	0c1b      	lsrs	r3, r3, #16
10005230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10005234:	3301      	adds	r3, #1
10005236:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLL2FRACR & RCC_PLL2FRACR_FRACLE) >> RCC_PLL2FRACR_FRACLE_Pos;
10005238:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000523c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10005240:	0c1b      	lsrs	r3, r3, #16
10005242:	f003 0301 	and.w	r3, r3, #1
10005246:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACV) >> RCC_PLL2FRACR_FRACV_Pos));
10005248:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000524c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10005250:	08db      	lsrs	r3, r3, #3
10005252:	f3c3 030c 	ubfx	r3, r3, #0, #13
10005256:	693a      	ldr	r2, [r7, #16]
10005258:	fb02 f303 	mul.w	r3, r2, r3
1000525c:	ee07 3a90 	vmov	s15, r3
10005260:	eef8 7a67 	vcvt.f32.u32	s15, s15
10005264:	edc7 7a02 	vstr	s15, [r7, #8]
  pll2vco = (float)((float)((RCC->PLL2CFGR1 & RCC_PLL2CFGR1_DIVN) + 1U) + (fracn1 / (float)0x2000));  //Intermediary value
10005268:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000526c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
10005270:	f3c3 0308 	ubfx	r3, r3, #0, #9
10005274:	3301      	adds	r3, #1
10005276:	ee07 3a90 	vmov	s15, r3
1000527a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
1000527e:	edd7 6a02 	vldr	s13, [r7, #8]
10005282:	ed9f 6a51 	vldr	s12, [pc, #324]	; 100053c8 <HAL_RCC_GetPLL2ClockFreq+0x1cc>
10005286:	eec6 7a86 	vdiv.f32	s15, s13, s12
1000528a:	ee77 7a27 	vadd.f32	s15, s14, s15
1000528e:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10005292:	69bb      	ldr	r3, [r7, #24]
10005294:	2b02      	cmp	r3, #2
10005296:	d047      	beq.n	10005328 <HAL_RCC_GetPLL2ClockFreq+0x12c>
10005298:	69bb      	ldr	r3, [r7, #24]
1000529a:	2b02      	cmp	r3, #2
1000529c:	d848      	bhi.n	10005330 <HAL_RCC_GetPLL2ClockFreq+0x134>
1000529e:	69bb      	ldr	r3, [r7, #24]
100052a0:	2b00      	cmp	r3, #0
100052a2:	d003      	beq.n	100052ac <HAL_RCC_GetPLL2ClockFreq+0xb0>
100052a4:	69bb      	ldr	r3, [r7, #24]
100052a6:	2b01      	cmp	r3, #1
100052a8:	d02f      	beq.n	1000530a <HAL_RCC_GetPLL2ClockFreq+0x10e>
100052aa:	e041      	b.n	10005330 <HAL_RCC_GetPLL2ClockFreq+0x134>
  {
    case RCC_PLL12SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
100052ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100052b0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100052b4:	f003 0304 	and.w	r3, r3, #4
100052b8:	2b04      	cmp	r3, #4
100052ba:	d117      	bne.n	100052ec <HAL_RCC_GetPLL2ClockFreq+0xf0>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100052bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100052c0:	699b      	ldr	r3, [r3, #24]
100052c2:	f003 0303 	and.w	r3, r3, #3
100052c6:	4a41      	ldr	r2, [pc, #260]	; (100053cc <HAL_RCC_GetPLL2ClockFreq+0x1d0>)
100052c8:	fa22 f303 	lsr.w	r3, r2, r3
100052cc:	60fb      	str	r3, [r7, #12]
        pll2vco *= (float)(hsivalue / pll2m);
100052ce:	68fa      	ldr	r2, [r7, #12]
100052d0:	697b      	ldr	r3, [r7, #20]
100052d2:	fbb2 f3f3 	udiv	r3, r2, r3
100052d6:	ee07 3a90 	vmov	s15, r3
100052da:	eef8 7a67 	vcvt.f32.u32	s15, s15
100052de:	ed97 7a07 	vldr	s14, [r7, #28]
100052e2:	ee67 7a27 	vmul.f32	s15, s14, s15
100052e6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco *= (float)(HSI_VALUE / pll2m);
      }
      break;
100052ea:	e025      	b.n	10005338 <HAL_RCC_GetPLL2ClockFreq+0x13c>
        pll2vco *= (float)(HSI_VALUE / pll2m);
100052ec:	4a37      	ldr	r2, [pc, #220]	; (100053cc <HAL_RCC_GetPLL2ClockFreq+0x1d0>)
100052ee:	697b      	ldr	r3, [r7, #20]
100052f0:	fbb2 f3f3 	udiv	r3, r2, r3
100052f4:	ee07 3a90 	vmov	s15, r3
100052f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
100052fc:	ed97 7a07 	vldr	s14, [r7, #28]
10005300:	ee67 7a27 	vmul.f32	s15, s14, s15
10005304:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10005308:	e016      	b.n	10005338 <HAL_RCC_GetPLL2ClockFreq+0x13c>

    case RCC_PLL12SOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco *= (float)(HSE_VALUE / pll2m);
1000530a:	4a31      	ldr	r2, [pc, #196]	; (100053d0 <HAL_RCC_GetPLL2ClockFreq+0x1d4>)
1000530c:	697b      	ldr	r3, [r7, #20]
1000530e:	fbb2 f3f3 	udiv	r3, r2, r3
10005312:	ee07 3a90 	vmov	s15, r3
10005316:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000531a:	ed97 7a07 	vldr	s14, [r7, #28]
1000531e:	ee67 7a27 	vmul.f32	s15, s14, s15
10005322:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10005326:	e007      	b.n	10005338 <HAL_RCC_GetPLL2ClockFreq+0x13c>

    case RCC_PLL12SOURCE_OFF:  /* No clock source for PLL */
      pll2vco = 0;
10005328:	f04f 0300 	mov.w	r3, #0
1000532c:	61fb      	str	r3, [r7, #28]
      break;
1000532e:	e003      	b.n	10005338 <HAL_RCC_GetPLL2ClockFreq+0x13c>

    default:
      pll2vco = 0;
10005330:	f04f 0300 	mov.w	r3, #0
10005334:	61fb      	str	r3, [r7, #28]
      break;
10005336:	bf00      	nop
  }

  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVP) >> RCC_PLL2CFGR2_DIVP_Pos) + 1U)));
10005338:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000533c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10005340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10005344:	3301      	adds	r3, #1
10005346:	ee07 3a90 	vmov	s15, r3
1000534a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
1000534e:	edd7 6a07 	vldr	s13, [r7, #28]
10005352:	eec6 7a87 	vdiv.f32	s15, s13, s14
10005356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1000535a:	ee17 2a90 	vmov	r2, s15
1000535e:	687b      	ldr	r3, [r7, #4]
10005360:	601a      	str	r2, [r3, #0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVQ) >> RCC_PLL2CFGR2_DIVQ_Pos) + 1U)));
10005362:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005366:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
1000536a:	0a1b      	lsrs	r3, r3, #8
1000536c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10005370:	3301      	adds	r3, #1
10005372:	ee07 3a90 	vmov	s15, r3
10005376:	eeb8 7a67 	vcvt.f32.u32	s14, s15
1000537a:	edd7 6a07 	vldr	s13, [r7, #28]
1000537e:	eec6 7a87 	vdiv.f32	s15, s13, s14
10005382:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10005386:	ee17 2a90 	vmov	r2, s15
1000538a:	687b      	ldr	r3, [r7, #4]
1000538c:	605a      	str	r2, [r3, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVR) >> RCC_PLL2CFGR2_DIVR_Pos) + 1U)));
1000538e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005392:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10005396:	0c1b      	lsrs	r3, r3, #16
10005398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1000539c:	3301      	adds	r3, #1
1000539e:	ee07 3a90 	vmov	s15, r3
100053a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100053a6:	edd7 6a07 	vldr	s13, [r7, #28]
100053aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
100053ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100053b2:	ee17 2a90 	vmov	r2, s15
100053b6:	687b      	ldr	r3, [r7, #4]
100053b8:	609a      	str	r2, [r3, #8]
}
100053ba:	bf00      	nop
100053bc:	3724      	adds	r7, #36	; 0x24
100053be:	46bd      	mov	sp, r7
100053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
100053c4:	4770      	bx	lr
100053c6:	bf00      	nop
100053c8:	46000000 	.word	0x46000000
100053cc:	03d09000 	.word	0x03d09000
100053d0:	016e3600 	.word	0x016e3600

100053d4 <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
100053d4:	b480      	push	{r7}
100053d6:	b089      	sub	sp, #36	; 0x24
100053d8:	af00      	add	r7, sp, #0
100053da:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
100053dc:	2300      	movs	r3, #0
100053de:	61bb      	str	r3, [r7, #24]
100053e0:	2301      	movs	r3, #1
100053e2:	617b      	str	r3, [r7, #20]
100053e4:	2300      	movs	r3, #0
100053e6:	613b      	str	r3, [r7, #16]
100053e8:	2300      	movs	r3, #0
100053ea:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
100053ec:	f04f 0300 	mov.w	r3, #0
100053f0:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
100053f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100053f6:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
100053fa:	f003 0303 	and.w	r3, r3, #3
100053fe:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
10005400:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005404:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10005408:	0c1b      	lsrs	r3, r3, #16
1000540a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1000540e:	3301      	adds	r3, #1
10005410:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
10005412:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005416:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
1000541a:	0c1b      	lsrs	r3, r3, #16
1000541c:	f003 0301 	and.w	r3, r3, #1
10005420:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
10005422:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005426:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
1000542a:	08db      	lsrs	r3, r3, #3
1000542c:	f3c3 030c 	ubfx	r3, r3, #0, #13
10005430:	693a      	ldr	r2, [r7, #16]
10005432:	fb02 f303 	mul.w	r3, r2, r3
10005436:	ee07 3a90 	vmov	s15, r3
1000543a:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000543e:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
10005442:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005446:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
1000544a:	f3c3 0308 	ubfx	r3, r3, #0, #9
1000544e:	3301      	adds	r3, #1
10005450:	ee07 3a90 	vmov	s15, r3
10005454:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10005458:	edd7 6a02 	vldr	s13, [r7, #8]
1000545c:	ed9f 6a56 	vldr	s12, [pc, #344]	; 100055b8 <HAL_RCC_GetPLL3ClockFreq+0x1e4>
10005460:	eec6 7a86 	vdiv.f32	s15, s13, s12
10005464:	ee77 7a27 	vadd.f32	s15, s14, s15
10005468:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
1000546c:	69bb      	ldr	r3, [r7, #24]
1000546e:	2b03      	cmp	r3, #3
10005470:	d85b      	bhi.n	1000552a <HAL_RCC_GetPLL3ClockFreq+0x156>
10005472:	a201      	add	r2, pc, #4	; (adr r2, 10005478 <HAL_RCC_GetPLL3ClockFreq+0xa4>)
10005474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005478:	10005489 	.word	0x10005489
1000547c:	100054e7 	.word	0x100054e7
10005480:	10005505 	.word	0x10005505
10005484:	10005523 	.word	0x10005523
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10005488:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000548c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10005490:	f003 0304 	and.w	r3, r3, #4
10005494:	2b04      	cmp	r3, #4
10005496:	d117      	bne.n	100054c8 <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10005498:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000549c:	699b      	ldr	r3, [r3, #24]
1000549e:	f003 0303 	and.w	r3, r3, #3
100054a2:	4a46      	ldr	r2, [pc, #280]	; (100055bc <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
100054a4:	fa22 f303 	lsr.w	r3, r2, r3
100054a8:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
100054aa:	68fa      	ldr	r2, [r7, #12]
100054ac:	697b      	ldr	r3, [r7, #20]
100054ae:	fbb2 f3f3 	udiv	r3, r2, r3
100054b2:	ee07 3a90 	vmov	s15, r3
100054b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
100054ba:	ed97 7a07 	vldr	s14, [r7, #28]
100054be:	ee67 7a27 	vmul.f32	s15, s14, s15
100054c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
100054c6:	e030      	b.n	1000552a <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
100054c8:	4a3c      	ldr	r2, [pc, #240]	; (100055bc <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
100054ca:	697b      	ldr	r3, [r7, #20]
100054cc:	fbb2 f3f3 	udiv	r3, r2, r3
100054d0:	ee07 3a90 	vmov	s15, r3
100054d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
100054d8:	ed97 7a07 	vldr	s14, [r7, #28]
100054dc:	ee67 7a27 	vmul.f32	s15, s14, s15
100054e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100054e4:	e021      	b.n	1000552a <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
100054e6:	4a36      	ldr	r2, [pc, #216]	; (100055c0 <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
100054e8:	697b      	ldr	r3, [r7, #20]
100054ea:	fbb2 f3f3 	udiv	r3, r2, r3
100054ee:	ee07 3a90 	vmov	s15, r3
100054f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
100054f6:	ed97 7a07 	vldr	s14, [r7, #28]
100054fa:	ee67 7a27 	vmul.f32	s15, s14, s15
100054fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10005502:	e012      	b.n	1000552a <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
10005504:	4a2f      	ldr	r2, [pc, #188]	; (100055c4 <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
10005506:	697b      	ldr	r3, [r7, #20]
10005508:	fbb2 f3f3 	udiv	r3, r2, r3
1000550c:	ee07 3a90 	vmov	s15, r3
10005510:	eef8 7a67 	vcvt.f32.u32	s15, s15
10005514:	ed97 7a07 	vldr	s14, [r7, #28]
10005518:	ee67 7a27 	vmul.f32	s15, s14, s15
1000551c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10005520:	e003      	b.n	1000552a <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
10005522:	f04f 0300 	mov.w	r3, #0
10005526:	61fb      	str	r3, [r7, #28]
      break;
10005528:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
1000552a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000552e:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10005532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10005536:	3301      	adds	r3, #1
10005538:	ee07 3a90 	vmov	s15, r3
1000553c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10005540:	edd7 6a07 	vldr	s13, [r7, #28]
10005544:	eec6 7a87 	vdiv.f32	s15, s13, s14
10005548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1000554c:	ee17 2a90 	vmov	r2, s15
10005550:	687b      	ldr	r3, [r7, #4]
10005552:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
10005554:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005558:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
1000555c:	0a1b      	lsrs	r3, r3, #8
1000555e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10005562:	3301      	adds	r3, #1
10005564:	ee07 3a90 	vmov	s15, r3
10005568:	eeb8 7a67 	vcvt.f32.u32	s14, s15
1000556c:	edd7 6a07 	vldr	s13, [r7, #28]
10005570:	eec6 7a87 	vdiv.f32	s15, s13, s14
10005574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10005578:	ee17 2a90 	vmov	r2, s15
1000557c:	687b      	ldr	r3, [r7, #4]
1000557e:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
10005580:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005584:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10005588:	0c1b      	lsrs	r3, r3, #16
1000558a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1000558e:	3301      	adds	r3, #1
10005590:	ee07 3a90 	vmov	s15, r3
10005594:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10005598:	edd7 6a07 	vldr	s13, [r7, #28]
1000559c:	eec6 7a87 	vdiv.f32	s15, s13, s14
100055a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100055a4:	ee17 2a90 	vmov	r2, s15
100055a8:	687b      	ldr	r3, [r7, #4]
100055aa:	609a      	str	r2, [r3, #8]
}
100055ac:	bf00      	nop
100055ae:	3724      	adds	r7, #36	; 0x24
100055b0:	46bd      	mov	sp, r7
100055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
100055b6:	4770      	bx	lr
100055b8:	46000000 	.word	0x46000000
100055bc:	03d09000 	.word	0x03d09000
100055c0:	016e3600 	.word	0x016e3600
100055c4:	003d0900 	.word	0x003d0900

100055c8 <HAL_RCC_GetPLL4ClockFreq>:
  *         right PLL4CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL4_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL4ClockFreq(PLL4_ClocksTypeDef *PLL4_Clocks)
{
100055c8:	b480      	push	{r7}
100055ca:	b089      	sub	sp, #36	; 0x24
100055cc:	af00      	add	r7, sp, #0
100055ce:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0U, pll4m = 1U, pll4fracen = 0U, hsivalue = 0U;
100055d0:	2300      	movs	r3, #0
100055d2:	61bb      	str	r3, [r7, #24]
100055d4:	2301      	movs	r3, #1
100055d6:	617b      	str	r3, [r7, #20]
100055d8:	2300      	movs	r3, #0
100055da:	613b      	str	r3, [r7, #16]
100055dc:	2300      	movs	r3, #0
100055de:	60fb      	str	r3, [r7, #12]
  float fracn1, pll4vco = 0;
100055e0:	f04f 0300 	mov.w	r3, #0
100055e4:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL4_SOURCE();
100055e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100055ea:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
100055ee:	f003 0303 	and.w	r3, r3, #3
100055f2:	61bb      	str	r3, [r7, #24]
  pll4m = ((RCC->PLL4CFGR1 & RCC_PLL4CFGR1_DIVM4) >> RCC_PLL4CFGR1_DIVM4_Pos) + 1U;
100055f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100055f8:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
100055fc:	0c1b      	lsrs	r3, r3, #16
100055fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10005602:	3301      	adds	r3, #1
10005604:	617b      	str	r3, [r7, #20]
  pll4fracen = (RCC->PLL4FRACR & RCC_PLL4FRACR_FRACLE) >> RCC_PLL4FRACR_FRACLE_Pos;
10005606:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000560a:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
1000560e:	0c1b      	lsrs	r3, r3, #16
10005610:	f003 0301 	and.w	r3, r3, #1
10005614:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll4fracen * ((RCC->PLL4FRACR & RCC_PLL4FRACR_FRACV) >> RCC_PLL4FRACR_FRACV_Pos));
10005616:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000561a:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
1000561e:	08db      	lsrs	r3, r3, #3
10005620:	f3c3 030c 	ubfx	r3, r3, #0, #13
10005624:	693a      	ldr	r2, [r7, #16]
10005626:	fb02 f303 	mul.w	r3, r2, r3
1000562a:	ee07 3a90 	vmov	s15, r3
1000562e:	eef8 7a67 	vcvt.f32.u32	s15, s15
10005632:	edc7 7a02 	vstr	s15, [r7, #8]
  pll4vco = (float)((float)((RCC->PLL4CFGR1 & RCC_PLL4CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
10005636:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000563a:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
1000563e:	f3c3 0308 	ubfx	r3, r3, #0, #9
10005642:	3301      	adds	r3, #1
10005644:	ee07 3a90 	vmov	s15, r3
10005648:	eeb8 7a67 	vcvt.f32.u32	s14, s15
1000564c:	edd7 6a02 	vldr	s13, [r7, #8]
10005650:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 100057c4 <HAL_RCC_GetPLL4ClockFreq+0x1fc>
10005654:	eec6 7a86 	vdiv.f32	s15, s13, s12
10005658:	ee77 7a27 	vadd.f32	s15, s14, s15
1000565c:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10005660:	69bb      	ldr	r3, [r7, #24]
10005662:	2b03      	cmp	r3, #3
10005664:	d866      	bhi.n	10005734 <HAL_RCC_GetPLL4ClockFreq+0x16c>
10005666:	a201      	add	r2, pc, #4	; (adr r2, 1000566c <HAL_RCC_GetPLL4ClockFreq+0xa4>)
10005668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000566c:	1000567d 	.word	0x1000567d
10005670:	100056db 	.word	0x100056db
10005674:	100056f9 	.word	0x100056f9
10005678:	10005717 	.word	0x10005717
  {
    case RCC_PLL4SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
1000567c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005680:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10005684:	f003 0304 	and.w	r3, r3, #4
10005688:	2b04      	cmp	r3, #4
1000568a:	d117      	bne.n	100056bc <HAL_RCC_GetPLL4ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
1000568c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005690:	699b      	ldr	r3, [r3, #24]
10005692:	f003 0303 	and.w	r3, r3, #3
10005696:	4a4c      	ldr	r2, [pc, #304]	; (100057c8 <HAL_RCC_GetPLL4ClockFreq+0x200>)
10005698:	fa22 f303 	lsr.w	r3, r2, r3
1000569c:	60fb      	str	r3, [r7, #12]
        pll4vco *= (float)(hsivalue / pll4m);
1000569e:	68fa      	ldr	r2, [r7, #12]
100056a0:	697b      	ldr	r3, [r7, #20]
100056a2:	fbb2 f3f3 	udiv	r3, r2, r3
100056a6:	ee07 3a90 	vmov	s15, r3
100056aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
100056ae:	ed97 7a07 	vldr	s14, [r7, #28]
100056b2:	ee67 7a27 	vmul.f32	s15, s14, s15
100056b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll4vco *= (float)(HSI_VALUE / pll4m);
      }
      break;
100056ba:	e03b      	b.n	10005734 <HAL_RCC_GetPLL4ClockFreq+0x16c>
        pll4vco *= (float)(HSI_VALUE / pll4m);
100056bc:	4a42      	ldr	r2, [pc, #264]	; (100057c8 <HAL_RCC_GetPLL4ClockFreq+0x200>)
100056be:	697b      	ldr	r3, [r7, #20]
100056c0:	fbb2 f3f3 	udiv	r3, r2, r3
100056c4:	ee07 3a90 	vmov	s15, r3
100056c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
100056cc:	ed97 7a07 	vldr	s14, [r7, #28]
100056d0:	ee67 7a27 	vmul.f32	s15, s14, s15
100056d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100056d8:	e02c      	b.n	10005734 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_HSE:  /* HSE used as PLL clock source */
      pll4vco *= (float)(HSE_VALUE / pll4m);
100056da:	4a3c      	ldr	r2, [pc, #240]	; (100057cc <HAL_RCC_GetPLL4ClockFreq+0x204>)
100056dc:	697b      	ldr	r3, [r7, #20]
100056de:	fbb2 f3f3 	udiv	r3, r2, r3
100056e2:	ee07 3a90 	vmov	s15, r3
100056e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
100056ea:	ed97 7a07 	vldr	s14, [r7, #28]
100056ee:	ee67 7a27 	vmul.f32	s15, s14, s15
100056f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100056f6:	e01d      	b.n	10005734 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_CSI:  /* CSI used as PLL clock source */
      pll4vco *= (float)(CSI_VALUE / pll4m);
100056f8:	4a35      	ldr	r2, [pc, #212]	; (100057d0 <HAL_RCC_GetPLL4ClockFreq+0x208>)
100056fa:	697b      	ldr	r3, [r7, #20]
100056fc:	fbb2 f3f3 	udiv	r3, r2, r3
10005700:	ee07 3a90 	vmov	s15, r3
10005704:	eef8 7a67 	vcvt.f32.u32	s15, s15
10005708:	ed97 7a07 	vldr	s14, [r7, #28]
1000570c:	ee67 7a27 	vmul.f32	s15, s14, s15
10005710:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10005714:	e00e      	b.n	10005734 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_I2S_CKIN:  /* Signal I2S_CKIN used as reference clock */
      pll4vco *= (float)(EXTERNAL_CLOCK_VALUE / pll4m);
10005716:	4a2f      	ldr	r2, [pc, #188]	; (100057d4 <HAL_RCC_GetPLL4ClockFreq+0x20c>)
10005718:	697b      	ldr	r3, [r7, #20]
1000571a:	fbb2 f3f3 	udiv	r3, r2, r3
1000571e:	ee07 3a90 	vmov	s15, r3
10005722:	eef8 7a67 	vcvt.f32.u32	s15, s15
10005726:	ed97 7a07 	vldr	s14, [r7, #28]
1000572a:	ee67 7a27 	vmul.f32	s15, s14, s15
1000572e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10005732:	bf00      	nop
  }

  PLL4_Clocks->PLL4_P_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVP) >> RCC_PLL4CFGR2_DIVP_Pos) + 1U)));
10005734:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005738:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
1000573c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10005740:	3301      	adds	r3, #1
10005742:	ee07 3a90 	vmov	s15, r3
10005746:	eeb8 7a67 	vcvt.f32.u32	s14, s15
1000574a:	edd7 6a07 	vldr	s13, [r7, #28]
1000574e:	eec6 7a87 	vdiv.f32	s15, s13, s14
10005752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10005756:	ee17 2a90 	vmov	r2, s15
1000575a:	687b      	ldr	r3, [r7, #4]
1000575c:	601a      	str	r2, [r3, #0]
  PLL4_Clocks->PLL4_Q_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVQ) >> RCC_PLL4CFGR2_DIVQ_Pos) + 1U)));
1000575e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005762:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
10005766:	0a1b      	lsrs	r3, r3, #8
10005768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1000576c:	3301      	adds	r3, #1
1000576e:	ee07 3a90 	vmov	s15, r3
10005772:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10005776:	edd7 6a07 	vldr	s13, [r7, #28]
1000577a:	eec6 7a87 	vdiv.f32	s15, s13, s14
1000577e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10005782:	ee17 2a90 	vmov	r2, s15
10005786:	687b      	ldr	r3, [r7, #4]
10005788:	605a      	str	r2, [r3, #4]
  PLL4_Clocks->PLL4_R_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVR) >> RCC_PLL4CFGR2_DIVR_Pos) + 1U)));
1000578a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000578e:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
10005792:	0c1b      	lsrs	r3, r3, #16
10005794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10005798:	3301      	adds	r3, #1
1000579a:	ee07 3a90 	vmov	s15, r3
1000579e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100057a2:	edd7 6a07 	vldr	s13, [r7, #28]
100057a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
100057aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100057ae:	ee17 2a90 	vmov	r2, s15
100057b2:	687b      	ldr	r3, [r7, #4]
100057b4:	609a      	str	r2, [r3, #8]
}
100057b6:	bf00      	nop
100057b8:	3724      	adds	r7, #36	; 0x24
100057ba:	46bd      	mov	sp, r7
100057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
100057c0:	4770      	bx	lr
100057c2:	bf00      	nop
100057c4:	46000000 	.word	0x46000000
100057c8:	03d09000 	.word	0x03d09000
100057cc:	016e3600 	.word	0x016e3600
100057d0:	003d0900 	.word	0x003d0900
100057d4:	00bb8000 	.word	0x00bb8000

100057d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
100057d8:	b580      	push	{r7, lr}
100057da:	b082      	sub	sp, #8
100057dc:	af00      	add	r7, sp, #0
  uint32_t apb1div = 0;
100057de:	2300      	movs	r3, #0
100057e0:	607b      	str	r3, [r7, #4]

  /* Compute PCLK1 frequency ---------------------------*/
  apb1div = __HAL_RCC_GET_APB1_DIV();
100057e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100057e6:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
100057ea:	f003 0307 	and.w	r3, r3, #7
100057ee:	607b      	str	r3, [r7, #4]
  if (apb1div > RCC_APB1_DIV16)
100057f0:	687b      	ldr	r3, [r7, #4]
100057f2:	2b04      	cmp	r3, #4
100057f4:	d901      	bls.n	100057fa <HAL_RCC_GetPCLK1Freq+0x22>
  {
    apb1div = RCC_APB1_DIV16;
100057f6:	2304      	movs	r3, #4
100057f8:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb1div);
100057fa:	f000 f88a 	bl	10005912 <HAL_RCC_GetMCUFreq>
100057fe:	4602      	mov	r2, r0
10005800:	687b      	ldr	r3, [r7, #4]
10005802:	fa22 f303 	lsr.w	r3, r2, r3
}
10005806:	4618      	mov	r0, r3
10005808:	3708      	adds	r7, #8
1000580a:	46bd      	mov	sp, r7
1000580c:	bd80      	pop	{r7, pc}

1000580e <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
1000580e:	b580      	push	{r7, lr}
10005810:	b082      	sub	sp, #8
10005812:	af00      	add	r7, sp, #0
  uint32_t apb2div = 0;
10005814:	2300      	movs	r3, #0
10005816:	607b      	str	r3, [r7, #4]

  /* Compute PCLK2 frequency ---------------------------*/
  apb2div = __HAL_RCC_GET_APB2_DIV();
10005818:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000581c:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10005820:	f003 0307 	and.w	r3, r3, #7
10005824:	607b      	str	r3, [r7, #4]
  if (apb2div > RCC_APB2_DIV16)
10005826:	687b      	ldr	r3, [r7, #4]
10005828:	2b04      	cmp	r3, #4
1000582a:	d901      	bls.n	10005830 <HAL_RCC_GetPCLK2Freq+0x22>
  {
    apb2div = RCC_APB2_DIV16;
1000582c:	2304      	movs	r3, #4
1000582e:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb2div);
10005830:	f000 f86f 	bl	10005912 <HAL_RCC_GetMCUFreq>
10005834:	4602      	mov	r2, r0
10005836:	687b      	ldr	r3, [r7, #4]
10005838:	fa22 f303 	lsr.w	r3, r2, r3
}
1000583c:	4618      	mov	r0, r3
1000583e:	3708      	adds	r7, #8
10005840:	46bd      	mov	sp, r7
10005842:	bd80      	pop	{r7, pc}

10005844 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
10005844:	b580      	push	{r7, lr}
10005846:	b082      	sub	sp, #8
10005848:	af00      	add	r7, sp, #0
  uint32_t apb3div = 0;
1000584a:	2300      	movs	r3, #0
1000584c:	607b      	str	r3, [r7, #4]

  /* Compute PCLK3 frequency ---------------------------*/
  apb3div = __HAL_RCC_GET_APB3_DIV();
1000584e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005852:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
10005856:	f003 0307 	and.w	r3, r3, #7
1000585a:	607b      	str	r3, [r7, #4]
  if (apb3div > RCC_APB3_DIV16)
1000585c:	687b      	ldr	r3, [r7, #4]
1000585e:	2b04      	cmp	r3, #4
10005860:	d901      	bls.n	10005866 <HAL_RCC_GetPCLK3Freq+0x22>
  {
    apb3div = RCC_APB3_DIV16;
10005862:	2304      	movs	r3, #4
10005864:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb3div);
10005866:	f000 f854 	bl	10005912 <HAL_RCC_GetMCUFreq>
1000586a:	4602      	mov	r2, r0
1000586c:	687b      	ldr	r3, [r7, #4]
1000586e:	fa22 f303 	lsr.w	r3, r2, r3
}
10005872:	4618      	mov	r0, r3
10005874:	3708      	adds	r7, #8
10005876:	46bd      	mov	sp, r7
10005878:	bd80      	pop	{r7, pc}

1000587a <HAL_RCC_GetPCLK5Freq>:
  * @note   Each time PCLK5 changes, this function must be called to update the
  *         right PCLK5 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK5 frequency
  */
uint32_t HAL_RCC_GetPCLK5Freq(void)
{
1000587a:	b580      	push	{r7, lr}
1000587c:	b082      	sub	sp, #8
1000587e:	af00      	add	r7, sp, #0
  uint32_t apb5div = 0;
10005880:	2300      	movs	r3, #0
10005882:	607b      	str	r3, [r7, #4]

  /* Compute PCLK5 frequency ---------------------------*/
  apb5div = __HAL_RCC_GET_APB5_DIV();
10005884:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000588a:	f003 0307 	and.w	r3, r3, #7
1000588e:	607b      	str	r3, [r7, #4]
  if (apb5div > RCC_APB5_DIV16)
10005890:	687b      	ldr	r3, [r7, #4]
10005892:	2b04      	cmp	r3, #4
10005894:	d901      	bls.n	1000589a <HAL_RCC_GetPCLK5Freq+0x20>
  {
    apb5div = RCC_APB5_DIV16;
10005896:	2304      	movs	r3, #4
10005898:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetACLKFreq() >> apb5div);
1000589a:	f000 f808 	bl	100058ae <HAL_RCC_GetACLKFreq>
1000589e:	4602      	mov	r2, r0
100058a0:	687b      	ldr	r3, [r7, #4]
100058a2:	fa22 f303 	lsr.w	r3, r2, r3
}
100058a6:	4618      	mov	r0, r3
100058a8:	3708      	adds	r7, #8
100058aa:	46bd      	mov	sp, r7
100058ac:	bd80      	pop	{r7, pc}

100058ae <HAL_RCC_GetACLKFreq>:
  * @note   Each time ACLK changes, this function must be called to update the
  *         right ACLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval ACLK frequency
  */
uint32_t HAL_RCC_GetACLKFreq(void)
{
100058ae:	b580      	push	{r7, lr}
100058b0:	b082      	sub	sp, #8
100058b2:	af00      	add	r7, sp, #0
  uint32_t axidiv = 0;
100058b4:	2300      	movs	r3, #0
100058b6:	607b      	str	r3, [r7, #4]

  /* Compute ACLK frequency ---------------------------*/
  axidiv = __HAL_RCC_GET_AXI_DIV();
100058b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100058bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100058be:	f003 0307 	and.w	r3, r3, #7
100058c2:	607b      	str	r3, [r7, #4]
  if (axidiv > RCC_AXI_DIV4)
100058c4:	687b      	ldr	r3, [r7, #4]
100058c6:	2b03      	cmp	r3, #3
100058c8:	d901      	bls.n	100058ce <HAL_RCC_GetACLKFreq+0x20>
  {
    axidiv = RCC_AXI_DIV4;
100058ca:	2303      	movs	r3, #3
100058cc:	607b      	str	r3, [r7, #4]
  }
  axidiv += 1;
100058ce:	687b      	ldr	r3, [r7, #4]
100058d0:	3301      	adds	r3, #1
100058d2:	607b      	str	r3, [r7, #4]

  return HAL_RCC_GetAXISSFreq() / axidiv;
100058d4:	f000 f870 	bl	100059b8 <HAL_RCC_GetAXISSFreq>
100058d8:	4602      	mov	r2, r0
100058da:	687b      	ldr	r3, [r7, #4]
100058dc:	fbb2 f3f3 	udiv	r3, r2, r3
}
100058e0:	4618      	mov	r0, r3
100058e2:	3708      	adds	r7, #8
100058e4:	46bd      	mov	sp, r7
100058e6:	bd80      	pop	{r7, pc}

100058e8 <HAL_RCC_GetHCLK6Freq>:
  * @note   Each time HCLK6 changes, this function must be called to update the
  *         right HCLK6 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK6 frequency
  */
uint32_t HAL_RCC_GetHCLK6Freq(void)
{
100058e8:	b580      	push	{r7, lr}
100058ea:	af00      	add	r7, sp, #0
  return HAL_RCC_GetACLKFreq();
100058ec:	f7ff ffdf 	bl	100058ae <HAL_RCC_GetACLKFreq>
100058f0:	4603      	mov	r3, r0
}
100058f2:	4618      	mov	r0, r3
100058f4:	bd80      	pop	{r7, pc}

100058f6 <HAL_RCC_GetHCLK2Freq>:
  * @note   Each time HCLK1 changes, this function must be called to update the
  *         right HCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK2 frequency
  */
uint32_t HAL_RCC_GetHCLK2Freq(void)
{
100058f6:	b580      	push	{r7, lr}
100058f8:	af00      	add	r7, sp, #0
  return HAL_RCC_GetMCUFreq();
100058fa:	f000 f80a 	bl	10005912 <HAL_RCC_GetMCUFreq>
100058fe:	4603      	mov	r3, r0
}
10005900:	4618      	mov	r0, r3
10005902:	bd80      	pop	{r7, pc}

10005904 <HAL_RCC_GetMLHCLKFreq>:
  * @note   Each time MLHCLK changes, this function must be called to update the
  *         right MLHCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK4 frequency
  */
uint32_t HAL_RCC_GetMLHCLKFreq(void)
{
10005904:	b580      	push	{r7, lr}
10005906:	af00      	add	r7, sp, #0
  return HAL_RCC_GetMCUFreq();
10005908:	f000 f803 	bl	10005912 <HAL_RCC_GetMCUFreq>
1000590c:	4603      	mov	r3, r0
}
1000590e:	4618      	mov	r0, r3
10005910:	bd80      	pop	{r7, pc}

10005912 <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
10005912:	b580      	push	{r7, lr}
10005914:	b082      	sub	sp, #8
10005916:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
10005918:	2300      	movs	r3, #0
1000591a:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
1000591c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005920:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10005924:	f003 030f 	and.w	r3, r3, #15
10005928:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
1000592a:	687b      	ldr	r3, [r7, #4]
1000592c:	2b09      	cmp	r3, #9
1000592e:	d901      	bls.n	10005934 <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
10005930:	2309      	movs	r3, #9
10005932:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
10005934:	f000 f87e 	bl	10005a34 <HAL_RCC_GetMCUSSFreq>
10005938:	4602      	mov	r2, r0
1000593a:	687b      	ldr	r3, [r7, #4]
1000593c:	fa22 f303 	lsr.w	r3, r2, r3
}
10005940:	4618      	mov	r0, r3
10005942:	3708      	adds	r7, #8
10005944:	46bd      	mov	sp, r7
10005946:	bd80      	pop	{r7, pc}

10005948 <RCC_GetCKPERFreq>:
  * @note   Each time CKPER changes, this function must be called to update the
  *         right CKPER value. Otherwise, any configuration based on this function will be incorrect.
  * @retval CKPER frequency
  */
uint32_t RCC_GetCKPERFreq(void)
{
10005948:	b480      	push	{r7}
1000594a:	b083      	sub	sp, #12
1000594c:	af00      	add	r7, sp, #0
  uint32_t ckperclocksource = 0, frequency = 0;
1000594e:	2300      	movs	r3, #0
10005950:	603b      	str	r3, [r7, #0]
10005952:	2300      	movs	r3, #0
10005954:	607b      	str	r3, [r7, #4]

  ckperclocksource = __HAL_RCC_GET_CKPER_SOURCE();
10005956:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000595a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
1000595e:	f003 0303 	and.w	r3, r3, #3
10005962:	603b      	str	r3, [r7, #0]

  if (ckperclocksource == RCC_CKPERCLKSOURCE_HSI)
10005964:	683b      	ldr	r3, [r7, #0]
10005966:	2b00      	cmp	r3, #0
10005968:	d102      	bne.n	10005970 <RCC_GetCKPERFreq+0x28>
  {
    /* In Case the main PLL Source is HSI */
    frequency = HSI_VALUE;
1000596a:	4b0c      	ldr	r3, [pc, #48]	; (1000599c <RCC_GetCKPERFreq+0x54>)
1000596c:	607b      	str	r3, [r7, #4]
1000596e:	e00d      	b.n	1000598c <RCC_GetCKPERFreq+0x44>
  }

  else if (ckperclocksource == RCC_CKPERCLKSOURCE_CSI)
10005970:	683b      	ldr	r3, [r7, #0]
10005972:	2b01      	cmp	r3, #1
10005974:	d102      	bne.n	1000597c <RCC_GetCKPERFreq+0x34>
  {
    /* In Case the main PLL Source is CSI */
    frequency = CSI_VALUE;
10005976:	4b0a      	ldr	r3, [pc, #40]	; (100059a0 <RCC_GetCKPERFreq+0x58>)
10005978:	607b      	str	r3, [r7, #4]
1000597a:	e007      	b.n	1000598c <RCC_GetCKPERFreq+0x44>
  }

  else if (ckperclocksource == RCC_CKPERCLKSOURCE_HSE)
1000597c:	683b      	ldr	r3, [r7, #0]
1000597e:	2b02      	cmp	r3, #2
10005980:	d102      	bne.n	10005988 <RCC_GetCKPERFreq+0x40>
  {
    /* In Case the main PLL Source is HSE */
    frequency = HSE_VALUE;
10005982:	4b08      	ldr	r3, [pc, #32]	; (100059a4 <RCC_GetCKPERFreq+0x5c>)
10005984:	607b      	str	r3, [r7, #4]
10005986:	e001      	b.n	1000598c <RCC_GetCKPERFreq+0x44>
  }
  else
  {
    frequency = 0;
10005988:	2300      	movs	r3, #0
1000598a:	607b      	str	r3, [r7, #4]
  }

  return frequency;
1000598c:	687b      	ldr	r3, [r7, #4]
}
1000598e:	4618      	mov	r0, r3
10005990:	370c      	adds	r7, #12
10005992:	46bd      	mov	sp, r7
10005994:	f85d 7b04 	ldr.w	r7, [sp], #4
10005998:	4770      	bx	lr
1000599a:	bf00      	nop
1000599c:	03d09000 	.word	0x03d09000
100059a0:	003d0900 	.word	0x003d0900
100059a4:	016e3600 	.word	0x016e3600

100059a8 <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
100059a8:	b580      	push	{r7, lr}
100059aa:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
100059ac:	f7ff ffb1 	bl	10005912 <HAL_RCC_GetMCUFreq>
100059b0:	4603      	mov	r3, r0
#endif
}
100059b2:	4618      	mov	r0, r3
100059b4:	bd80      	pop	{r7, pc}
	...

100059b8 <HAL_RCC_GetAXISSFreq>:
  return mpussfreq;
}


uint32_t HAL_RCC_GetAXISSFreq()
{
100059b8:	b580      	push	{r7, lr}
100059ba:	b084      	sub	sp, #16
100059bc:	af00      	add	r7, sp, #0
  uint32_t axissfreq = 0;
100059be:	2300      	movs	r3, #0
100059c0:	60fb      	str	r3, [r7, #12]
  PLL2_ClocksTypeDef pll2_clocks;

  switch (__HAL_RCC_GET_AXIS_SOURCE())
100059c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100059c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100059c8:	f003 0307 	and.w	r3, r3, #7
100059cc:	2b02      	cmp	r3, #2
100059ce:	d006      	beq.n	100059de <HAL_RCC_GetAXISSFreq+0x26>
100059d0:	2b02      	cmp	r3, #2
100059d2:	d823      	bhi.n	10005a1c <HAL_RCC_GetAXISSFreq+0x64>
100059d4:	2b00      	cmp	r3, #0
100059d6:	d009      	beq.n	100059ec <HAL_RCC_GetAXISSFreq+0x34>
100059d8:	2b01      	cmp	r3, #1
100059da:	d01c      	beq.n	10005a16 <HAL_RCC_GetAXISSFreq+0x5e>
100059dc:	e01e      	b.n	10005a1c <HAL_RCC_GetAXISSFreq+0x64>
  {
    case RCC_AXISSOURCE_PLL2:
      HAL_RCC_GetPLL2ClockFreq(&pll2_clocks);
100059de:	463b      	mov	r3, r7
100059e0:	4618      	mov	r0, r3
100059e2:	f7ff fc0b 	bl	100051fc <HAL_RCC_GetPLL2ClockFreq>
      axissfreq = pll2_clocks.PLL2_P_Frequency;
100059e6:	683b      	ldr	r3, [r7, #0]
100059e8:	60fb      	str	r3, [r7, #12]
      break;
100059ea:	e01a      	b.n	10005a22 <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
100059ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100059f0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100059f4:	f003 0304 	and.w	r3, r3, #4
100059f8:	2b04      	cmp	r3, #4
100059fa:	d109      	bne.n	10005a10 <HAL_RCC_GetAXISSFreq+0x58>
      {
        axissfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100059fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005a00:	699b      	ldr	r3, [r3, #24]
10005a02:	f003 0303 	and.w	r3, r3, #3
10005a06:	4a09      	ldr	r2, [pc, #36]	; (10005a2c <HAL_RCC_GetAXISSFreq+0x74>)
10005a08:	fa22 f303 	lsr.w	r3, r2, r3
10005a0c:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        axissfreq = HSI_VALUE;
      }
      break;
10005a0e:	e008      	b.n	10005a22 <HAL_RCC_GetAXISSFreq+0x6a>
        axissfreq = HSI_VALUE;
10005a10:	4b06      	ldr	r3, [pc, #24]	; (10005a2c <HAL_RCC_GetAXISSFreq+0x74>)
10005a12:	60fb      	str	r3, [r7, #12]
      break;
10005a14:	e005      	b.n	10005a22 <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_HSE:
      axissfreq = HSE_VALUE;
10005a16:	4b06      	ldr	r3, [pc, #24]	; (10005a30 <HAL_RCC_GetAXISSFreq+0x78>)
10005a18:	60fb      	str	r3, [r7, #12]
      break;
10005a1a:	e002      	b.n	10005a22 <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_OFF:
    default:
      axissfreq = 0; /* ck_axiss is gated */
10005a1c:	2300      	movs	r3, #0
10005a1e:	60fb      	str	r3, [r7, #12]
      break;
10005a20:	bf00      	nop
  }

  return axissfreq;
10005a22:	68fb      	ldr	r3, [r7, #12]
}
10005a24:	4618      	mov	r0, r3
10005a26:	3710      	adds	r7, #16
10005a28:	46bd      	mov	sp, r7
10005a2a:	bd80      	pop	{r7, pc}
10005a2c:	03d09000 	.word	0x03d09000
10005a30:	016e3600 	.word	0x016e3600

10005a34 <HAL_RCC_GetMCUSSFreq>:

uint32_t HAL_RCC_GetMCUSSFreq()
{
10005a34:	b580      	push	{r7, lr}
10005a36:	b084      	sub	sp, #16
10005a38:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
10005a3a:	2300      	movs	r3, #0
10005a3c:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
10005a3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10005a44:	f003 0303 	and.w	r3, r3, #3
10005a48:	2b03      	cmp	r3, #3
10005a4a:	d822      	bhi.n	10005a92 <HAL_RCC_GetMCUSSFreq+0x5e>
10005a4c:	a201      	add	r2, pc, #4	; (adr r2, 10005a54 <HAL_RCC_GetMCUSSFreq+0x20>)
10005a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005a52:	bf00      	nop
10005a54:	10005a73 	.word	0x10005a73
10005a58:	10005a87 	.word	0x10005a87
10005a5c:	10005a8d 	.word	0x10005a8d
10005a60:	10005a65 	.word	0x10005a65
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10005a64:	463b      	mov	r3, r7
10005a66:	4618      	mov	r0, r3
10005a68:	f7ff fcb4 	bl	100053d4 <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
10005a6c:	683b      	ldr	r3, [r7, #0]
10005a6e:	60fb      	str	r3, [r7, #12]
      break;
10005a70:	e00f      	b.n	10005a92 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10005a72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005a76:	699b      	ldr	r3, [r3, #24]
10005a78:	f003 0303 	and.w	r3, r3, #3
10005a7c:	4a07      	ldr	r2, [pc, #28]	; (10005a9c <HAL_RCC_GetMCUSSFreq+0x68>)
10005a7e:	fa22 f303 	lsr.w	r3, r2, r3
10005a82:	60fb      	str	r3, [r7, #12]

      break;
10005a84:	e005      	b.n	10005a92 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
10005a86:	4b06      	ldr	r3, [pc, #24]	; (10005aa0 <HAL_RCC_GetMCUSSFreq+0x6c>)
10005a88:	60fb      	str	r3, [r7, #12]
      break;
10005a8a:	e002      	b.n	10005a92 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
10005a8c:	4b05      	ldr	r3, [pc, #20]	; (10005aa4 <HAL_RCC_GetMCUSSFreq+0x70>)
10005a8e:	60fb      	str	r3, [r7, #12]
      break;
10005a90:	bf00      	nop
  }

  return mcussfreq;
10005a92:	68fb      	ldr	r3, [r7, #12]
}
10005a94:	4618      	mov	r0, r3
10005a96:	3710      	adds	r7, #16
10005a98:	46bd      	mov	sp, r7
10005a9a:	bd80      	pop	{r7, pc}
10005a9c:	03d09000 	.word	0x03d09000
10005aa0:	016e3600 	.word	0x016e3600
10005aa4:	003d0900 	.word	0x003d0900

10005aa8 <HAL_RCC_WAKEUP_IRQHandler>:
  * @brief This function handles the RCC Wake up interrupt (rcc_mcu_wkup_irq/rcc_mpu_wkup_irq)
  * @note This API should be called under the RCC_WAKEUP_Handler().
  * @retval None
  */
void HAL_RCC_WAKEUP_IRQHandler(void)
{
10005aa8:	b580      	push	{r7, lr}
10005aaa:	af00      	add	r7, sp, #0
  /* Check RCC WKUP flag is set */
  if (__HAL_RCC_GET_IT(RCC_IT_WKUP) != RESET)
10005aac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005ab0:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
10005ab4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
10005ab8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
10005abc:	d107      	bne.n	10005ace <HAL_RCC_WAKEUP_IRQHandler+0x26>
  {
    /* Clear the RCC WKUP flag bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_WKUP);
10005abe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005ac2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
10005ac6:	f8c3 2c18 	str.w	r2, [r3, #3096]	; 0xc18

    /* RCC WKUP interrupt user callback */
    HAL_RCC_WAKEUP_Callback();
10005aca:	f000 f802 	bl	10005ad2 <HAL_RCC_WAKEUP_Callback>
  }
}
10005ace:	bf00      	nop
10005ad0:	bd80      	pop	{r7, pc}

10005ad2 <HAL_RCC_WAKEUP_Callback>:
/**
  * @brief  RCC WAKEUP interrupt callback
  * @retval None
  */
__weak void HAL_RCC_WAKEUP_Callback(void)
{
10005ad2:	b480      	push	{r7}
10005ad4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_WAKEUP_Callback could be implemented in the user file
  */
}
10005ad6:	bf00      	nop
10005ad8:	46bd      	mov	sp, r7
10005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
10005ade:	4770      	bx	lr

10005ae0 <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
10005ae0:	b580      	push	{r7, lr}
10005ae2:	b084      	sub	sp, #16
10005ae4:	af00      	add	r7, sp, #0
10005ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
10005ae8:	687b      	ldr	r3, [r7, #4]
10005aea:	681b      	ldr	r3, [r3, #0]
10005aec:	2b00      	cmp	r3, #0
10005aee:	f000 8171 	beq.w	10005dd4 <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
10005af2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005af8:	f003 0307 	and.w	r3, r3, #7
10005afc:	2b02      	cmp	r3, #2
10005afe:	d108      	bne.n	10005b12 <RCCEx_PLL2_Config+0x32>
10005b00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005b06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10005b0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10005b0e:	f000 815f 	beq.w	10005dd0 <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
10005b12:	687b      	ldr	r3, [r7, #4]
10005b14:	681b      	ldr	r3, [r3, #0]
10005b16:	2b02      	cmp	r3, #2
10005b18:	f040 8130 	bne.w	10005d7c <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10005b1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005b22:	f003 0303 	and.w	r3, r3, #3
10005b26:	2b00      	cmp	r3, #0
10005b28:	d008      	beq.n	10005b3c <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
10005b2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005b30:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10005b34:	2b01      	cmp	r3, #1
10005b36:	d001      	beq.n	10005b3c <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
10005b38:	2301      	movs	r3, #1
10005b3a:	e14c      	b.n	10005dd6 <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10005b3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005b44:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10005b4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
10005b50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005b58:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005b5c:	f023 0301 	bic.w	r3, r3, #1
10005b60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10005b64:	f7fb ff66 	bl	10001a34 <HAL_GetTick>
10005b68:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10005b6a:	e008      	b.n	10005b7e <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005b6c:	f7fb ff62 	bl	10001a34 <HAL_GetTick>
10005b70:	4602      	mov	r2, r0
10005b72:	68fb      	ldr	r3, [r7, #12]
10005b74:	1ad3      	subs	r3, r2, r3
10005b76:	2b64      	cmp	r3, #100	; 0x64
10005b78:	d901      	bls.n	10005b7e <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
10005b7a:	2303      	movs	r3, #3
10005b7c:	e12b      	b.n	10005dd6 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10005b7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005b86:	f003 0302 	and.w	r3, r3, #2
10005b8a:	2b02      	cmp	r3, #2
10005b8c:	d0ee      	beq.n	10005b6c <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
10005b8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005b92:	6a1b      	ldr	r3, [r3, #32]
10005b94:	f003 0303 	and.w	r3, r3, #3
10005b98:	2b02      	cmp	r3, #2
10005b9a:	d107      	bne.n	10005bac <RCCEx_PLL2_Config+0xcc>
10005b9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005ba0:	6a1b      	ldr	r3, [r3, #32]
10005ba2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10005ba6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10005baa:	d00e      	beq.n	10005bca <RCCEx_PLL2_Config+0xea>
10005bac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005bb0:	6a1b      	ldr	r3, [r3, #32]
10005bb2:	f003 0303 	and.w	r3, r3, #3
10005bb6:	2b03      	cmp	r3, #3
10005bb8:	d112      	bne.n	10005be0 <RCCEx_PLL2_Config+0x100>
10005bba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005bbe:	6a1b      	ldr	r3, [r3, #32]
10005bc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10005bc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10005bc8:	d10a      	bne.n	10005be0 <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10005bca:	687b      	ldr	r3, [r7, #4]
10005bcc:	685a      	ldr	r2, [r3, #4]
10005bce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005bd4:	f003 0303 	and.w	r3, r3, #3
10005bd8:	429a      	cmp	r2, r3
10005bda:	d00c      	beq.n	10005bf6 <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
10005bdc:	2301      	movs	r3, #1
10005bde:	e0fa      	b.n	10005dd6 <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
10005be0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005be6:	f023 0203 	bic.w	r2, r3, #3
10005bea:	687b      	ldr	r3, [r7, #4]
10005bec:	685b      	ldr	r3, [r3, #4]
10005bee:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005bf2:	4313      	orrs	r3, r2
10005bf4:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
10005bf6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005bfa:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
10005bfe:	4b78      	ldr	r3, [pc, #480]	; (10005de0 <RCCEx_PLL2_Config+0x300>)
10005c00:	4013      	ands	r3, r2
10005c02:	687a      	ldr	r2, [r7, #4]
10005c04:	68d2      	ldr	r2, [r2, #12]
10005c06:	1e51      	subs	r1, r2, #1
10005c08:	687a      	ldr	r2, [r7, #4]
10005c0a:	6892      	ldr	r2, [r2, #8]
10005c0c:	3a01      	subs	r2, #1
10005c0e:	0412      	lsls	r2, r2, #16
10005c10:	430a      	orrs	r2, r1
10005c12:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005c16:	4313      	orrs	r3, r2
10005c18:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
10005c1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005c20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10005c24:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10005c28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10005c2c:	687a      	ldr	r2, [r7, #4]
10005c2e:	6912      	ldr	r2, [r2, #16]
10005c30:	1e51      	subs	r1, r2, #1
10005c32:	687a      	ldr	r2, [r7, #4]
10005c34:	6952      	ldr	r2, [r2, #20]
10005c36:	3a01      	subs	r2, #1
10005c38:	0212      	lsls	r2, r2, #8
10005c3a:	4311      	orrs	r1, r2
10005c3c:	687a      	ldr	r2, [r7, #4]
10005c3e:	6992      	ldr	r2, [r2, #24]
10005c40:	3a01      	subs	r2, #1
10005c42:	0412      	lsls	r2, r2, #16
10005c44:	430a      	orrs	r2, r1
10005c46:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005c4a:	4313      	orrs	r3, r2
10005c4c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
10005c50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005c54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10005c58:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10005c60:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
10005c64:	687b      	ldr	r3, [r7, #4]
10005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005c68:	2b02      	cmp	r3, #2
10005c6a:	d003      	beq.n	10005c74 <RCCEx_PLL2_Config+0x194>
10005c6c:	687b      	ldr	r3, [r7, #4]
10005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005c70:	2b00      	cmp	r3, #0
10005c72:	d10c      	bne.n	10005c8e <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
10005c74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005c78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10005c7c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005c80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10005c84:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10005c88:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
10005c8c:	e00f      	b.n	10005cae <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
10005c8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005c92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10005c96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10005c9a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10005c9e:	687a      	ldr	r2, [r7, #4]
10005ca0:	6a12      	ldr	r2, [r2, #32]
10005ca2:	00d2      	lsls	r2, r2, #3
10005ca4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005ca8:	4313      	orrs	r3, r2
10005caa:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
10005cae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005cb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10005cb6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10005cbe:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10005cc2:	687b      	ldr	r3, [r7, #4]
10005cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005cc6:	2b02      	cmp	r3, #2
10005cc8:	d124      	bne.n	10005d14 <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
10005cca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005cce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
10005cd2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10005cd6:	687b      	ldr	r3, [r7, #4]
10005cd8:	6a99      	ldr	r1, [r3, #40]	; 0x28
10005cda:	687b      	ldr	r3, [r7, #4]
10005cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10005cde:	4319      	orrs	r1, r3
10005ce0:	687b      	ldr	r3, [r7, #4]
10005ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10005ce4:	4319      	orrs	r1, r3
10005ce6:	687b      	ldr	r3, [r7, #4]
10005ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10005cea:	4319      	orrs	r1, r3
10005cec:	687b      	ldr	r3, [r7, #4]
10005cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10005cf0:	041b      	lsls	r3, r3, #16
10005cf2:	430b      	orrs	r3, r1
10005cf4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005cf8:	4313      	orrs	r3, r2
10005cfa:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
10005cfe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005d06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005d0a:	f043 0304 	orr.w	r3, r3, #4
10005d0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
10005d12:	e009      	b.n	10005d28 <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
10005d14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005d1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005d20:	f023 0304 	bic.w	r3, r3, #4
10005d24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
10005d28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005d30:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005d34:	f043 0301 	orr.w	r3, r3, #1
10005d38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10005d3c:	f7fb fe7a 	bl	10001a34 <HAL_GetTick>
10005d40:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10005d42:	e008      	b.n	10005d56 <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005d44:	f7fb fe76 	bl	10001a34 <HAL_GetTick>
10005d48:	4602      	mov	r2, r0
10005d4a:	68fb      	ldr	r3, [r7, #12]
10005d4c:	1ad3      	subs	r3, r2, r3
10005d4e:	2b64      	cmp	r3, #100	; 0x64
10005d50:	d901      	bls.n	10005d56 <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
10005d52:	2303      	movs	r3, #3
10005d54:	e03f      	b.n	10005dd6 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10005d56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005d5e:	f003 0302 	and.w	r3, r3, #2
10005d62:	2b02      	cmp	r3, #2
10005d64:	d1ee      	bne.n	10005d44 <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10005d66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005d6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005d72:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10005d76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
10005d7a:	e02b      	b.n	10005dd4 <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10005d7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005d84:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10005d8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
10005d90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005d98:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005d9c:	f023 0301 	bic.w	r3, r3, #1
10005da0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10005da4:	f7fb fe46 	bl	10001a34 <HAL_GetTick>
10005da8:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10005daa:	e008      	b.n	10005dbe <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005dac:	f7fb fe42 	bl	10001a34 <HAL_GetTick>
10005db0:	4602      	mov	r2, r0
10005db2:	68fb      	ldr	r3, [r7, #12]
10005db4:	1ad3      	subs	r3, r2, r3
10005db6:	2b64      	cmp	r3, #100	; 0x64
10005db8:	d901      	bls.n	10005dbe <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
10005dba:	2303      	movs	r3, #3
10005dbc:	e00b      	b.n	10005dd6 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10005dbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005dc6:	f003 0302 	and.w	r3, r3, #2
10005dca:	2b02      	cmp	r3, #2
10005dcc:	d0ee      	beq.n	10005dac <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
10005dce:	e001      	b.n	10005dd4 <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10005dd0:	2301      	movs	r3, #1
10005dd2:	e000      	b.n	10005dd6 <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
10005dd4:	2300      	movs	r3, #0

}
10005dd6:	4618      	mov	r0, r3
10005dd8:	3710      	adds	r7, #16
10005dda:	46bd      	mov	sp, r7
10005ddc:	bd80      	pop	{r7, pc}
10005dde:	bf00      	nop
10005de0:	ffc0fe00 	.word	0xffc0fe00

10005de4 <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
10005de4:	b580      	push	{r7, lr}
10005de6:	b084      	sub	sp, #16
10005de8:	af00      	add	r7, sp, #0
10005dea:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
10005dec:	687b      	ldr	r3, [r7, #4]
10005dee:	681b      	ldr	r3, [r3, #0]
10005df0:	2b00      	cmp	r3, #0
10005df2:	f000 815a 	beq.w	100060aa <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
10005df6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10005dfc:	f003 0303 	and.w	r3, r3, #3
10005e00:	2b03      	cmp	r3, #3
10005e02:	d108      	bne.n	10005e16 <RCCEx_PLL3_Config+0x32>
10005e04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10005e0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10005e0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10005e12:	f000 8148 	beq.w	100060a6 <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
10005e16:	687b      	ldr	r3, [r7, #4]
10005e18:	681b      	ldr	r3, [r3, #0]
10005e1a:	2b02      	cmp	r3, #2
10005e1c:	f040 8119 	bne.w	10006052 <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10005e20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005e24:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005e28:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10005e30:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
10005e34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005e38:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005e3c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005e40:	f023 0301 	bic.w	r3, r3, #1
10005e44:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10005e48:	f7fb fdf4 	bl	10001a34 <HAL_GetTick>
10005e4c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10005e4e:	e008      	b.n	10005e62 <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005e50:	f7fb fdf0 	bl	10001a34 <HAL_GetTick>
10005e54:	4602      	mov	r2, r0
10005e56:	68fb      	ldr	r3, [r7, #12]
10005e58:	1ad3      	subs	r3, r2, r3
10005e5a:	2b64      	cmp	r3, #100	; 0x64
10005e5c:	d901      	bls.n	10005e62 <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
10005e5e:	2303      	movs	r3, #3
10005e60:	e124      	b.n	100060ac <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10005e62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005e66:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005e6a:	f003 0302 	and.w	r3, r3, #2
10005e6e:	2b02      	cmp	r3, #2
10005e70:	d0ee      	beq.n	10005e50 <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
10005e72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005e76:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10005e7a:	f023 0203 	bic.w	r2, r3, #3
10005e7e:	687b      	ldr	r3, [r7, #4]
10005e80:	685b      	ldr	r3, [r3, #4]
10005e82:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005e86:	4313      	orrs	r3, r2
10005e88:	f8c1 3820 	str.w	r3, [r1, #2080]	; 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10005e8c:	e008      	b.n	10005ea0 <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005e8e:	f7fb fdd1 	bl	10001a34 <HAL_GetTick>
10005e92:	4602      	mov	r2, r0
10005e94:	68fb      	ldr	r3, [r7, #12]
10005e96:	1ad3      	subs	r3, r2, r3
10005e98:	2b64      	cmp	r3, #100	; 0x64
10005e9a:	d901      	bls.n	10005ea0 <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
10005e9c:	2303      	movs	r3, #3
10005e9e:	e105      	b.n	100060ac <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10005ea0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005ea4:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10005ea8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10005eac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10005eb0:	d1ed      	bne.n	10005e8e <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
10005eb2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005eb6:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10005eba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
10005ebe:	687b      	ldr	r3, [r7, #4]
10005ec0:	69db      	ldr	r3, [r3, #28]
10005ec2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005ec6:	4313      	orrs	r3, r2
10005ec8:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
10005ecc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005ed0:	f8d3 2884 	ldr.w	r2, [r3, #2180]	; 0x884
10005ed4:	4b77      	ldr	r3, [pc, #476]	; (100060b4 <RCCEx_PLL3_Config+0x2d0>)
10005ed6:	4013      	ands	r3, r2
10005ed8:	687a      	ldr	r2, [r7, #4]
10005eda:	68d2      	ldr	r2, [r2, #12]
10005edc:	1e51      	subs	r1, r2, #1
10005ede:	687a      	ldr	r2, [r7, #4]
10005ee0:	6892      	ldr	r2, [r2, #8]
10005ee2:	3a01      	subs	r2, #1
10005ee4:	0412      	lsls	r2, r2, #16
10005ee6:	430a      	orrs	r2, r1
10005ee8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005eec:	4313      	orrs	r3, r2
10005eee:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884
10005ef2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005ef6:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10005efa:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10005efe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10005f02:	687a      	ldr	r2, [r7, #4]
10005f04:	6912      	ldr	r2, [r2, #16]
10005f06:	1e51      	subs	r1, r2, #1
10005f08:	687a      	ldr	r2, [r7, #4]
10005f0a:	6952      	ldr	r2, [r2, #20]
10005f0c:	3a01      	subs	r2, #1
10005f0e:	0212      	lsls	r2, r2, #8
10005f10:	4311      	orrs	r1, r2
10005f12:	687a      	ldr	r2, [r7, #4]
10005f14:	6992      	ldr	r2, [r2, #24]
10005f16:	3a01      	subs	r2, #1
10005f18:	0412      	lsls	r2, r2, #16
10005f1a:	430a      	orrs	r2, r1
10005f1c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005f20:	4313      	orrs	r3, r2
10005f22:	f8c1 3888 	str.w	r3, [r1, #2184]	; 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
10005f26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005f2a:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10005f2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10005f36:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
10005f3a:	687b      	ldr	r3, [r7, #4]
10005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005f3e:	2b02      	cmp	r3, #2
10005f40:	d003      	beq.n	10005f4a <RCCEx_PLL3_Config+0x166>
10005f42:	687b      	ldr	r3, [r7, #4]
10005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005f46:	2b00      	cmp	r3, #0
10005f48:	d10c      	bne.n	10005f64 <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
10005f4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005f4e:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10005f52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005f56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10005f5a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10005f5e:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
10005f62:	e00f      	b.n	10005f84 <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
10005f64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005f68:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10005f6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10005f70:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10005f74:	687a      	ldr	r2, [r7, #4]
10005f76:	6a12      	ldr	r2, [r2, #32]
10005f78:	00d2      	lsls	r2, r2, #3
10005f7a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005f7e:	4313      	orrs	r3, r2
10005f80:	f8c1 388c 	str.w	r3, [r1, #2188]	; 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
10005f84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005f88:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10005f8c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10005f94:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10005f98:	687b      	ldr	r3, [r7, #4]
10005f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005f9c:	2b02      	cmp	r3, #2
10005f9e:	d124      	bne.n	10005fea <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
10005fa0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005fa4:	f8d3 3890 	ldr.w	r3, [r3, #2192]	; 0x890
10005fa8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10005fac:	687b      	ldr	r3, [r7, #4]
10005fae:	6a99      	ldr	r1, [r3, #40]	; 0x28
10005fb0:	687b      	ldr	r3, [r7, #4]
10005fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10005fb4:	4319      	orrs	r1, r3
10005fb6:	687b      	ldr	r3, [r7, #4]
10005fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10005fba:	4319      	orrs	r1, r3
10005fbc:	687b      	ldr	r3, [r7, #4]
10005fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10005fc0:	4319      	orrs	r1, r3
10005fc2:	687b      	ldr	r3, [r7, #4]
10005fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10005fc6:	041b      	lsls	r3, r3, #16
10005fc8:	430b      	orrs	r3, r1
10005fca:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005fce:	4313      	orrs	r3, r2
10005fd0:	f8c1 3890 	str.w	r3, [r1, #2192]	; 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
10005fd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005fd8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005fdc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005fe0:	f043 0304 	orr.w	r3, r3, #4
10005fe4:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
10005fe8:	e009      	b.n	10005ffe <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
10005fea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005fee:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005ff2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005ff6:	f023 0304 	bic.w	r3, r3, #4
10005ffa:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
10005ffe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006002:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006006:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000600a:	f043 0301 	orr.w	r3, r3, #1
1000600e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10006012:	f7fb fd0f 	bl	10001a34 <HAL_GetTick>
10006016:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10006018:	e008      	b.n	1000602c <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000601a:	f7fb fd0b 	bl	10001a34 <HAL_GetTick>
1000601e:	4602      	mov	r2, r0
10006020:	68fb      	ldr	r3, [r7, #12]
10006022:	1ad3      	subs	r3, r2, r3
10006024:	2b64      	cmp	r3, #100	; 0x64
10006026:	d901      	bls.n	1000602c <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
10006028:	2303      	movs	r3, #3
1000602a:	e03f      	b.n	100060ac <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
1000602c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006030:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006034:	f003 0302 	and.w	r3, r3, #2
10006038:	2b02      	cmp	r3, #2
1000603a:	d1ee      	bne.n	1000601a <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
1000603c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006040:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006044:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006048:	f043 0370 	orr.w	r3, r3, #112	; 0x70
1000604c:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
10006050:	e02b      	b.n	100060aa <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10006052:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006056:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000605a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000605e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10006062:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
10006066:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000606a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000606e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006072:	f023 0301 	bic.w	r3, r3, #1
10006076:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000607a:	f7fb fcdb 	bl	10001a34 <HAL_GetTick>
1000607e:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10006080:	e008      	b.n	10006094 <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10006082:	f7fb fcd7 	bl	10001a34 <HAL_GetTick>
10006086:	4602      	mov	r2, r0
10006088:	68fb      	ldr	r3, [r7, #12]
1000608a:	1ad3      	subs	r3, r2, r3
1000608c:	2b64      	cmp	r3, #100	; 0x64
1000608e:	d901      	bls.n	10006094 <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
10006090:	2303      	movs	r3, #3
10006092:	e00b      	b.n	100060ac <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10006094:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006098:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000609c:	f003 0302 	and.w	r3, r3, #2
100060a0:	2b02      	cmp	r3, #2
100060a2:	d0ee      	beq.n	10006082 <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
100060a4:	e001      	b.n	100060aa <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
100060a6:	2301      	movs	r3, #1
100060a8:	e000      	b.n	100060ac <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
100060aa:	2300      	movs	r3, #0
}
100060ac:	4618      	mov	r0, r3
100060ae:	3710      	adds	r7, #16
100060b0:	46bd      	mov	sp, r7
100060b2:	bd80      	pop	{r7, pc}
100060b4:	ffc0fe00 	.word	0xffc0fe00

100060b8 <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
100060b8:	b580      	push	{r7, lr}
100060ba:	b084      	sub	sp, #16
100060bc:	af00      	add	r7, sp, #0
100060be:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
100060c0:	687b      	ldr	r3, [r7, #4]
100060c2:	681b      	ldr	r3, [r3, #0]
100060c4:	2b00      	cmp	r3, #0
100060c6:	f000 8147 	beq.w	10006358 <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
100060ca:	687b      	ldr	r3, [r7, #4]
100060cc:	681b      	ldr	r3, [r3, #0]
100060ce:	2b02      	cmp	r3, #2
100060d0:	f040 8119 	bne.w	10006306 <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
100060d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100060d8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100060dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100060e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100060e4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
100060e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100060ec:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100060f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100060f4:	f023 0301 	bic.w	r3, r3, #1
100060f8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100060fc:	f7fb fc9a 	bl	10001a34 <HAL_GetTick>
10006100:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10006102:	e008      	b.n	10006116 <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10006104:	f7fb fc96 	bl	10001a34 <HAL_GetTick>
10006108:	4602      	mov	r2, r0
1000610a:	68fb      	ldr	r3, [r7, #12]
1000610c:	1ad3      	subs	r3, r2, r3
1000610e:	2b64      	cmp	r3, #100	; 0x64
10006110:	d901      	bls.n	10006116 <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
10006112:	2303      	movs	r3, #3
10006114:	e121      	b.n	1000635a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10006116:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000611a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000611e:	f003 0302 	and.w	r3, r3, #2
10006122:	2b02      	cmp	r3, #2
10006124:	d0ee      	beq.n	10006104 <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
10006126:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000612a:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
1000612e:	f023 0203 	bic.w	r2, r3, #3
10006132:	687b      	ldr	r3, [r7, #4]
10006134:	685b      	ldr	r3, [r3, #4]
10006136:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000613a:	4313      	orrs	r3, r2
1000613c:	f8c1 3824 	str.w	r3, [r1, #2084]	; 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10006140:	e008      	b.n	10006154 <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10006142:	f7fb fc77 	bl	10001a34 <HAL_GetTick>
10006146:	4602      	mov	r2, r0
10006148:	68fb      	ldr	r3, [r7, #12]
1000614a:	1ad3      	subs	r3, r2, r3
1000614c:	2b64      	cmp	r3, #100	; 0x64
1000614e:	d901      	bls.n	10006154 <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
10006150:	2303      	movs	r3, #3
10006152:	e102      	b.n	1000635a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10006154:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006158:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
1000615c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10006160:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10006164:	d1ed      	bne.n	10006142 <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
10006166:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000616a:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
1000616e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
10006172:	687b      	ldr	r3, [r7, #4]
10006174:	69db      	ldr	r3, [r3, #28]
10006176:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000617a:	4313      	orrs	r3, r2
1000617c:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
10006180:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006184:	f8d3 2898 	ldr.w	r2, [r3, #2200]	; 0x898
10006188:	4b76      	ldr	r3, [pc, #472]	; (10006364 <RCCEx_PLL4_Config+0x2ac>)
1000618a:	4013      	ands	r3, r2
1000618c:	687a      	ldr	r2, [r7, #4]
1000618e:	68d2      	ldr	r2, [r2, #12]
10006190:	1e51      	subs	r1, r2, #1
10006192:	687a      	ldr	r2, [r7, #4]
10006194:	6892      	ldr	r2, [r2, #8]
10006196:	3a01      	subs	r2, #1
10006198:	0412      	lsls	r2, r2, #16
1000619a:	430a      	orrs	r2, r1
1000619c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100061a0:	4313      	orrs	r3, r2
100061a2:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898
100061a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100061aa:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
100061ae:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
100061b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
100061b6:	687a      	ldr	r2, [r7, #4]
100061b8:	6912      	ldr	r2, [r2, #16]
100061ba:	1e51      	subs	r1, r2, #1
100061bc:	687a      	ldr	r2, [r7, #4]
100061be:	6952      	ldr	r2, [r2, #20]
100061c0:	3a01      	subs	r2, #1
100061c2:	0212      	lsls	r2, r2, #8
100061c4:	4311      	orrs	r1, r2
100061c6:	687a      	ldr	r2, [r7, #4]
100061c8:	6992      	ldr	r2, [r2, #24]
100061ca:	3a01      	subs	r2, #1
100061cc:	0412      	lsls	r2, r2, #16
100061ce:	430a      	orrs	r2, r1
100061d0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100061d4:	4313      	orrs	r3, r2
100061d6:	f8c1 389c 	str.w	r3, [r1, #2204]	; 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
100061da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100061de:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100061e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100061e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
100061ea:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
100061ee:	687b      	ldr	r3, [r7, #4]
100061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100061f2:	2b02      	cmp	r3, #2
100061f4:	d003      	beq.n	100061fe <RCCEx_PLL4_Config+0x146>
100061f6:	687b      	ldr	r3, [r7, #4]
100061f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100061fa:	2b00      	cmp	r3, #0
100061fc:	d10c      	bne.n	10006218 <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
100061fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006202:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10006206:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000620a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000620e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10006212:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
10006216:	e00f      	b.n	10006238 <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
10006218:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000621c:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10006220:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10006224:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10006228:	687a      	ldr	r2, [r7, #4]
1000622a:	6a12      	ldr	r2, [r2, #32]
1000622c:	00d2      	lsls	r2, r2, #3
1000622e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10006232:	4313      	orrs	r3, r2
10006234:	f8c1 38a0 	str.w	r3, [r1, #2208]	; 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
10006238:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000623c:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10006240:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10006248:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
1000624c:	687b      	ldr	r3, [r7, #4]
1000624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006250:	2b02      	cmp	r3, #2
10006252:	d124      	bne.n	1000629e <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
10006254:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006258:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	; 0x8a4
1000625c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10006260:	687b      	ldr	r3, [r7, #4]
10006262:	6a99      	ldr	r1, [r3, #40]	; 0x28
10006264:	687b      	ldr	r3, [r7, #4]
10006266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10006268:	4319      	orrs	r1, r3
1000626a:	687b      	ldr	r3, [r7, #4]
1000626c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000626e:	4319      	orrs	r1, r3
10006270:	687b      	ldr	r3, [r7, #4]
10006272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10006274:	4319      	orrs	r1, r3
10006276:	687b      	ldr	r3, [r7, #4]
10006278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000627a:	041b      	lsls	r3, r3, #16
1000627c:	430b      	orrs	r3, r1
1000627e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10006282:	4313      	orrs	r3, r2
10006284:	f8c1 38a4 	str.w	r3, [r1, #2212]	; 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
10006288:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000628c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006290:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006294:	f043 0304 	orr.w	r3, r3, #4
10006298:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
1000629c:	e009      	b.n	100062b2 <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
1000629e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100062a2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100062a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100062aa:	f023 0304 	bic.w	r3, r3, #4
100062ae:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
100062b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100062b6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100062ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100062be:	f043 0301 	orr.w	r3, r3, #1
100062c2:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100062c6:	f7fb fbb5 	bl	10001a34 <HAL_GetTick>
100062ca:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
100062cc:	e008      	b.n	100062e0 <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100062ce:	f7fb fbb1 	bl	10001a34 <HAL_GetTick>
100062d2:	4602      	mov	r2, r0
100062d4:	68fb      	ldr	r3, [r7, #12]
100062d6:	1ad3      	subs	r3, r2, r3
100062d8:	2b64      	cmp	r3, #100	; 0x64
100062da:	d901      	bls.n	100062e0 <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
100062dc:	2303      	movs	r3, #3
100062de:	e03c      	b.n	1000635a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
100062e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100062e4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100062e8:	f003 0302 	and.w	r3, r3, #2
100062ec:	2b02      	cmp	r3, #2
100062ee:	d1ee      	bne.n	100062ce <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
100062f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100062f4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100062f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100062fc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10006300:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10006304:	e028      	b.n	10006358 <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10006306:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000630a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000630e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10006316:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
1000631a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000631e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006322:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006326:	f023 0301 	bic.w	r3, r3, #1
1000632a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1000632e:	f7fb fb81 	bl	10001a34 <HAL_GetTick>
10006332:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10006334:	e008      	b.n	10006348 <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10006336:	f7fb fb7d 	bl	10001a34 <HAL_GetTick>
1000633a:	4602      	mov	r2, r0
1000633c:	68fb      	ldr	r3, [r7, #12]
1000633e:	1ad3      	subs	r3, r2, r3
10006340:	2b64      	cmp	r3, #100	; 0x64
10006342:	d901      	bls.n	10006348 <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
10006344:	2303      	movs	r3, #3
10006346:	e008      	b.n	1000635a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10006348:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000634c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006350:	f003 0302 	and.w	r3, r3, #2
10006354:	2b02      	cmp	r3, #2
10006356:	d0ee      	beq.n	10006336 <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
10006358:	2300      	movs	r3, #0
}
1000635a:	4618      	mov	r0, r3
1000635c:	3710      	adds	r7, #16
1000635e:	46bd      	mov	sp, r7
10006360:	bd80      	pop	{r7, pc}
10006362:	bf00      	nop
10006364:	ffc0fe00 	.word	0xffc0fe00

10006368 <HAL_RCCEx_PeriphCLKConfig>:
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef
                                            *PeriphClkInit)
{
10006368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
1000636c:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
10006370:	af00      	add	r7, sp, #0
10006372:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006376:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000637a:	6018      	str	r0, [r3, #0]
  uint32_t tmpreg = 0, RESERVED_BDCR_MASK = 0;
1000637c:	2300      	movs	r3, #0
1000637e:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
10006382:	2300      	movs	r3, #0
10006384:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
10006388:	2300      	movs	r3, #0
1000638a:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
1000638e:	2300      	movs	r3, #0
10006390:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- CKPER configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) ==
10006394:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006398:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000639c:	681b      	ldr	r3, [r3, #0]
1000639e:	e9d3 2300 	ldrd	r2, r3, [r3]
100063a2:	f402 0400 	and.w	r4, r2, #8388608	; 0x800000
100063a6:	2500      	movs	r5, #0
100063a8:	ea54 0305 	orrs.w	r3, r4, r5
100063ac:	d011      	beq.n	100063d2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
      RCC_PERIPHCLK_CKPER)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    __HAL_RCC_CKPER_CONFIG(PeriphClkInit->CkperClockSelection);
100063ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100063b2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
100063b6:	f023 0103 	bic.w	r1, r3, #3
100063ba:	f507 7312 	add.w	r3, r7, #584	; 0x248
100063be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100063c2:	681b      	ldr	r3, [r3, #0]
100063c4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
100063c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100063cc:	430b      	orrs	r3, r1
100063ce:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
  }

  /*------------------------------ I2C12 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C12) ==
100063d2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100063d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100063da:	681b      	ldr	r3, [r3, #0]
100063dc:	e9d3 2300 	ldrd	r2, r3, [r3]
100063e0:	f002 0810 	and.w	r8, r2, #16
100063e4:	f04f 0900 	mov.w	r9, #0
100063e8:	ea58 0309 	orrs.w	r3, r8, r9
100063ec:	d038      	beq.n	10006460 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      RCC_PERIPHCLK_I2C12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C12CLKSOURCE(PeriphClkInit->I2c12ClockSelection));

    if ((PeriphClkInit->I2c12ClockSelection) == RCC_I2C12CLKSOURCE_PLL4)
100063ee:	f507 7312 	add.w	r3, r7, #584	; 0x248
100063f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100063f6:	681b      	ldr	r3, [r3, #0]
100063f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
100063fc:	2b01      	cmp	r3, #1
100063fe:	d11d      	bne.n	1000643c <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006400:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006404:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006408:	681b      	ldr	r3, [r3, #0]
1000640a:	3380      	adds	r3, #128	; 0x80
1000640c:	4618      	mov	r0, r3
1000640e:	f7ff fe53 	bl	100060b8 <RCCEx_PLL4_Config>
10006412:	4603      	mov	r3, r0
10006414:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10006418:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000641c:	2b00      	cmp	r3, #0
1000641e:	d003      	beq.n	10006428 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return status;
10006420:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006424:	f001 be2a 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10006428:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000642c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006430:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006438:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_I2C12_CONFIG(PeriphClkInit->I2c12ClockSelection);
1000643c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006440:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	; 0x8c0
10006444:	f023 0107 	bic.w	r1, r3, #7
10006448:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000644c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006450:	681b      	ldr	r3, [r3, #0]
10006452:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
10006456:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000645a:	430b      	orrs	r3, r1
1000645c:	f8c2 38c0 	str.w	r3, [r2, #2240]	; 0x8c0
  }

  /*------------------------------ I2C35 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C35) ==
10006460:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006464:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006468:	681b      	ldr	r3, [r3, #0]
1000646a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000646e:	f002 0a20 	and.w	sl, r2, #32
10006472:	f04f 0b00 	mov.w	fp, #0
10006476:	ea5a 030b 	orrs.w	r3, sl, fp
1000647a:	d038      	beq.n	100064ee <HAL_RCCEx_PeriphCLKConfig+0x186>
      RCC_PERIPHCLK_I2C35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C35CLKSOURCE(PeriphClkInit->I2c35ClockSelection));

    if ((PeriphClkInit->I2c35ClockSelection) == RCC_I2C35CLKSOURCE_PLL4)
1000647c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006480:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006484:	681b      	ldr	r3, [r3, #0]
10006486:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
1000648a:	2b01      	cmp	r3, #1
1000648c:	d11d      	bne.n	100064ca <HAL_RCCEx_PeriphCLKConfig+0x162>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000648e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006492:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006496:	681b      	ldr	r3, [r3, #0]
10006498:	3380      	adds	r3, #128	; 0x80
1000649a:	4618      	mov	r0, r3
1000649c:	f7ff fe0c 	bl	100060b8 <RCCEx_PLL4_Config>
100064a0:	4603      	mov	r3, r0
100064a2:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
100064a6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100064aa:	2b00      	cmp	r3, #0
100064ac:	d003      	beq.n	100064b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        return status;
100064ae:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100064b2:	f001 bde3 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100064b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100064ba:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100064be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100064c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100064c6:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_I2C35_CONFIG(PeriphClkInit->I2c35ClockSelection);
100064ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100064ce:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	; 0x8c4
100064d2:	f023 0107 	bic.w	r1, r3, #7
100064d6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100064da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100064de:	681b      	ldr	r3, [r3, #0]
100064e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
100064e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100064e8:	430b      	orrs	r3, r1
100064ea:	f8c2 38c4 	str.w	r3, [r2, #2244]	; 0x8c4
  }

  /*------------------------------ I2C46 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C46) ==
100064ee:	f507 7312 	add.w	r3, r7, #584	; 0x248
100064f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100064f6:	681b      	ldr	r3, [r3, #0]
100064f8:	e9d3 2300 	ldrd	r2, r3, [r3]
100064fc:	2100      	movs	r1, #0
100064fe:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
10006502:	f003 0320 	and.w	r3, r3, #32
10006506:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
1000650a:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
1000650e:	460b      	mov	r3, r1
10006510:	4313      	orrs	r3, r2
10006512:	d038      	beq.n	10006586 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      RCC_PERIPHCLK_I2C46)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C46CLKSOURCE(PeriphClkInit->I2c46ClockSelection));

    if ((PeriphClkInit->I2c46ClockSelection) == RCC_I2C46CLKSOURCE_PLL3)
10006514:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006518:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000651c:	681b      	ldr	r3, [r3, #0]
1000651e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10006522:	2b01      	cmp	r3, #1
10006524:	d11d      	bne.n	10006562 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006526:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000652a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000652e:	681b      	ldr	r3, [r3, #0]
10006530:	3344      	adds	r3, #68	; 0x44
10006532:	4618      	mov	r0, r3
10006534:	f7ff fc56 	bl	10005de4 <RCCEx_PLL3_Config>
10006538:	4603      	mov	r3, r0
1000653a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
1000653e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006542:	2b00      	cmp	r3, #0
10006544:	d003      	beq.n	1000654e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      {
        return status;
10006546:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000654a:	f001 bd97 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000654e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006552:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006556:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000655a:	f043 0320 	orr.w	r3, r3, #32
1000655e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
    }

    __HAL_RCC_I2C46_CONFIG(PeriphClkInit->I2c46ClockSelection);
10006562:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006566:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
1000656a:	f023 0107 	bic.w	r1, r3, #7
1000656e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006572:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006576:	681b      	ldr	r3, [r3, #0]
10006578:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
1000657c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006580:	430b      	orrs	r3, r1
10006582:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) ==
10006586:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000658a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000658e:	681b      	ldr	r3, [r3, #0]
10006590:	e9d3 2300 	ldrd	r2, r3, [r3]
10006594:	f002 0380 	and.w	r3, r2, #128	; 0x80
10006598:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
1000659c:	2300      	movs	r3, #0
1000659e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
100065a2:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
100065a6:	460b      	mov	r3, r1
100065a8:	4313      	orrs	r3, r2
100065aa:	d07e      	beq.n	100066aa <HAL_RCCEx_PeriphCLKConfig+0x342>
      RCC_PERIPHCLK_SAI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
100065ac:	f507 7312 	add.w	r3, r7, #584	; 0x248
100065b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100065b4:	681b      	ldr	r3, [r3, #0]
100065b6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
100065ba:	2b04      	cmp	r3, #4
100065bc:	d044      	beq.n	10006648 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
100065be:	2b04      	cmp	r3, #4
100065c0:	d861      	bhi.n	10006686 <HAL_RCCEx_PeriphCLKConfig+0x31e>
100065c2:	2b00      	cmp	r3, #0
100065c4:	d002      	beq.n	100065cc <HAL_RCCEx_PeriphCLKConfig+0x264>
100065c6:	2b01      	cmp	r3, #1
100065c8:	d01f      	beq.n	1000660a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
100065ca:	e05c      	b.n	10006686 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    {
      case RCC_SAI1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI1*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100065cc:	f507 7312 	add.w	r3, r7, #584	; 0x248
100065d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100065d4:	681b      	ldr	r3, [r3, #0]
100065d6:	3380      	adds	r3, #128	; 0x80
100065d8:	4618      	mov	r0, r3
100065da:	f7ff fd6d 	bl	100060b8 <RCCEx_PLL4_Config>
100065de:	4603      	mov	r3, r0
100065e0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100065e4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100065e8:	2b00      	cmp	r3, #0
100065ea:	d003      	beq.n	100065f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        {
          return status;
100065ec:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100065f0:	f001 bd44 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100065f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100065f8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100065fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006600:	f043 0320 	orr.w	r3, r3, #32
10006604:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006608:	e03d      	b.n	10006686 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_Q:  /* PLL3_Q is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000660a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000660e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006612:	681b      	ldr	r3, [r3, #0]
10006614:	3344      	adds	r3, #68	; 0x44
10006616:	4618      	mov	r0, r3
10006618:	f7ff fbe4 	bl	10005de4 <RCCEx_PLL3_Config>
1000661c:	4603      	mov	r3, r0
1000661e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006622:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006626:	2b00      	cmp	r3, #0
10006628:	d003      	beq.n	10006632 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
        {
          return status;
1000662a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000662e:	f001 bd25 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006632:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006636:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000663a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000663e:	f043 0320 	orr.w	r3, r3, #32
10006642:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006646:	e01e      	b.n	10006686 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_R:  /* PLL3_R is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006648:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000664c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006650:	681b      	ldr	r3, [r3, #0]
10006652:	3344      	adds	r3, #68	; 0x44
10006654:	4618      	mov	r0, r3
10006656:	f7ff fbc5 	bl	10005de4 <RCCEx_PLL3_Config>
1000665a:	4603      	mov	r3, r0
1000665c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006660:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006664:	2b00      	cmp	r3, #0
10006666:	d003      	beq.n	10006670 <HAL_RCCEx_PeriphCLKConfig+0x308>
        {
          return status;
10006668:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000666c:	f001 bd06 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006670:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006674:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006678:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000667c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006680:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006684:	bf00      	nop
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
10006686:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000668a:	f8d3 38c8 	ldr.w	r3, [r3, #2248]	; 0x8c8
1000668e:	f023 0107 	bic.w	r1, r3, #7
10006692:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006696:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000669a:	681b      	ldr	r3, [r3, #0]
1000669c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
100066a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100066a4:	430b      	orrs	r3, r1
100066a6:	f8c2 38c8 	str.w	r3, [r2, #2248]	; 0x8c8
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) ==
100066aa:	f507 7312 	add.w	r3, r7, #584	; 0x248
100066ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100066b2:	681b      	ldr	r3, [r3, #0]
100066b4:	e9d3 2300 	ldrd	r2, r3, [r3]
100066b8:	f402 7380 	and.w	r3, r2, #256	; 0x100
100066bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
100066c0:	2300      	movs	r3, #0
100066c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
100066c6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
100066ca:	460b      	mov	r3, r1
100066cc:	4313      	orrs	r3, r2
100066ce:	d07e      	beq.n	100067ce <HAL_RCCEx_PeriphCLKConfig+0x466>
      RCC_PERIPHCLK_SAI2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
100066d0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100066d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100066d8:	681b      	ldr	r3, [r3, #0]
100066da:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
100066de:	2b05      	cmp	r3, #5
100066e0:	d044      	beq.n	1000676c <HAL_RCCEx_PeriphCLKConfig+0x404>
100066e2:	2b05      	cmp	r3, #5
100066e4:	d861      	bhi.n	100067aa <HAL_RCCEx_PeriphCLKConfig+0x442>
100066e6:	2b00      	cmp	r3, #0
100066e8:	d002      	beq.n	100066f0 <HAL_RCCEx_PeriphCLKConfig+0x388>
100066ea:	2b01      	cmp	r3, #1
100066ec:	d01f      	beq.n	1000672e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
100066ee:	e05c      	b.n	100067aa <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      case RCC_SAI2CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI2*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100066f0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100066f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100066f8:	681b      	ldr	r3, [r3, #0]
100066fa:	3380      	adds	r3, #128	; 0x80
100066fc:	4618      	mov	r0, r3
100066fe:	f7ff fcdb 	bl	100060b8 <RCCEx_PLL4_Config>
10006702:	4603      	mov	r3, r0
10006704:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006708:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000670c:	2b00      	cmp	r3, #0
1000670e:	d003      	beq.n	10006718 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          return status;
10006710:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006714:	f001 bcb2 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006718:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000671c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006720:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006724:	f043 0320 	orr.w	r3, r3, #32
10006728:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
1000672c:	e03d      	b.n	100067aa <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000672e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006732:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006736:	681b      	ldr	r3, [r3, #0]
10006738:	3344      	adds	r3, #68	; 0x44
1000673a:	4618      	mov	r0, r3
1000673c:	f7ff fb52 	bl	10005de4 <RCCEx_PLL3_Config>
10006740:	4603      	mov	r3, r0
10006742:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006746:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000674a:	2b00      	cmp	r3, #0
1000674c:	d003      	beq.n	10006756 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
        {
          return status;
1000674e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006752:	f001 bc93 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006756:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000675a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000675e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006762:	f043 0320 	orr.w	r3, r3, #32
10006766:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000676a:	e01e      	b.n	100067aa <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000676c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006770:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006774:	681b      	ldr	r3, [r3, #0]
10006776:	3344      	adds	r3, #68	; 0x44
10006778:	4618      	mov	r0, r3
1000677a:	f7ff fb33 	bl	10005de4 <RCCEx_PLL3_Config>
1000677e:	4603      	mov	r3, r0
10006780:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006784:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006788:	2b00      	cmp	r3, #0
1000678a:	d003      	beq.n	10006794 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        {
          return status;
1000678c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006790:	f001 bc74 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006794:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006798:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000679c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100067a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100067a4:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100067a8:	bf00      	nop
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
100067aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100067ae:	f8d3 38cc 	ldr.w	r3, [r3, #2252]	; 0x8cc
100067b2:	f023 0107 	bic.w	r1, r3, #7
100067b6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100067ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100067be:	681b      	ldr	r3, [r3, #0]
100067c0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
100067c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100067c8:	430b      	orrs	r3, r1
100067ca:	f8c2 38cc 	str.w	r3, [r2, #2252]	; 0x8cc
  }

  /*---------------------------- SAI3 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI3) ==
100067ce:	f507 7312 	add.w	r3, r7, #584	; 0x248
100067d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100067d6:	681b      	ldr	r3, [r3, #0]
100067d8:	e9d3 2300 	ldrd	r2, r3, [r3]
100067dc:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
100067e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
100067e4:	2300      	movs	r3, #0
100067e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
100067ea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
100067ee:	460b      	mov	r3, r1
100067f0:	4313      	orrs	r3, r2
100067f2:	d07e      	beq.n	100068f2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
      RCC_PERIPHCLK_SAI3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI3CLKSOURCE(PeriphClkInit->Sai3ClockSelection));

    switch (PeriphClkInit->Sai3ClockSelection)
100067f4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100067f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100067fc:	681b      	ldr	r3, [r3, #0]
100067fe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
10006802:	2b04      	cmp	r3, #4
10006804:	d044      	beq.n	10006890 <HAL_RCCEx_PeriphCLKConfig+0x528>
10006806:	2b04      	cmp	r3, #4
10006808:	d861      	bhi.n	100068ce <HAL_RCCEx_PeriphCLKConfig+0x566>
1000680a:	2b00      	cmp	r3, #0
1000680c:	d002      	beq.n	10006814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
1000680e:	2b01      	cmp	r3, #1
10006810:	d01f      	beq.n	10006852 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
10006812:	e05c      	b.n	100068ce <HAL_RCCEx_PeriphCLKConfig+0x566>
    {
      case RCC_SAI3CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI3*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006814:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006818:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000681c:	681b      	ldr	r3, [r3, #0]
1000681e:	3380      	adds	r3, #128	; 0x80
10006820:	4618      	mov	r0, r3
10006822:	f7ff fc49 	bl	100060b8 <RCCEx_PLL4_Config>
10006826:	4603      	mov	r3, r0
10006828:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000682c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006830:	2b00      	cmp	r3, #0
10006832:	d003      	beq.n	1000683c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        {
          return status;
10006834:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006838:	f001 bc20 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000683c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006840:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006844:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006848:	f043 0320 	orr.w	r3, r3, #32
1000684c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006850:	e03d      	b.n	100068ce <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006852:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006856:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000685a:	681b      	ldr	r3, [r3, #0]
1000685c:	3344      	adds	r3, #68	; 0x44
1000685e:	4618      	mov	r0, r3
10006860:	f7ff fac0 	bl	10005de4 <RCCEx_PLL3_Config>
10006864:	4603      	mov	r3, r0
10006866:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000686a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000686e:	2b00      	cmp	r3, #0
10006870:	d003      	beq.n	1000687a <HAL_RCCEx_PeriphCLKConfig+0x512>
        {
          return status;
10006872:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006876:	f001 bc01 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000687a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000687e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006882:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006886:	f043 0320 	orr.w	r3, r3, #32
1000688a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000688e:	e01e      	b.n	100068ce <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006890:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006894:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006898:	681b      	ldr	r3, [r3, #0]
1000689a:	3344      	adds	r3, #68	; 0x44
1000689c:	4618      	mov	r0, r3
1000689e:	f7ff faa1 	bl	10005de4 <RCCEx_PLL3_Config>
100068a2:	4603      	mov	r3, r0
100068a4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100068a8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100068ac:	2b00      	cmp	r3, #0
100068ae:	d003      	beq.n	100068b8 <HAL_RCCEx_PeriphCLKConfig+0x550>
        {
          return status;
100068b0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100068b4:	f001 bbe2 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100068b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100068bc:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100068c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100068c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100068c8:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100068cc:	bf00      	nop
    }

    /* Set the source of SAI3 clock*/
    __HAL_RCC_SAI3_CONFIG(PeriphClkInit->Sai3ClockSelection);
100068ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100068d2:	f8d3 38d0 	ldr.w	r3, [r3, #2256]	; 0x8d0
100068d6:	f023 0107 	bic.w	r1, r3, #7
100068da:	f507 7312 	add.w	r3, r7, #584	; 0x248
100068de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100068e2:	681b      	ldr	r3, [r3, #0]
100068e4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
100068e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100068ec:	430b      	orrs	r3, r1
100068ee:	f8c2 38d0 	str.w	r3, [r2, #2256]	; 0x8d0
  }

  /*---------------------------- SAI4 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4) ==
100068f2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100068f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100068fa:	681b      	ldr	r3, [r3, #0]
100068fc:	e9d3 2300 	ldrd	r2, r3, [r3]
10006900:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
10006904:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
10006908:	2300      	movs	r3, #0
1000690a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
1000690e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
10006912:	460b      	mov	r3, r1
10006914:	4313      	orrs	r3, r2
10006916:	d07e      	beq.n	10006a16 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      RCC_PERIPHCLK_SAI4)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI4CLKSOURCE(PeriphClkInit->Sai4ClockSelection));

    switch (PeriphClkInit->Sai4ClockSelection)
10006918:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000691c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006920:	681b      	ldr	r3, [r3, #0]
10006922:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
10006926:	2b04      	cmp	r3, #4
10006928:	d044      	beq.n	100069b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
1000692a:	2b04      	cmp	r3, #4
1000692c:	d861      	bhi.n	100069f2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
1000692e:	2b00      	cmp	r3, #0
10006930:	d002      	beq.n	10006938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
10006932:	2b01      	cmp	r3, #1
10006934:	d01f      	beq.n	10006976 <HAL_RCCEx_PeriphCLKConfig+0x60e>
10006936:	e05c      	b.n	100069f2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    {
      case RCC_SAI4CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI4 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006938:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000693c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006940:	681b      	ldr	r3, [r3, #0]
10006942:	3380      	adds	r3, #128	; 0x80
10006944:	4618      	mov	r0, r3
10006946:	f7ff fbb7 	bl	100060b8 <RCCEx_PLL4_Config>
1000694a:	4603      	mov	r3, r0
1000694c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006950:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006954:	2b00      	cmp	r3, #0
10006956:	d003      	beq.n	10006960 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
        {
          return status;
10006958:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000695c:	f001 bb8e 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006960:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006964:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006968:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000696c:	f043 0320 	orr.w	r3, r3, #32
10006970:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006974:	e03d      	b.n	100069f2 <HAL_RCCEx_PeriphCLKConfig+0x68a>


      case RCC_SAI4CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006976:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000697a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000697e:	681b      	ldr	r3, [r3, #0]
10006980:	3344      	adds	r3, #68	; 0x44
10006982:	4618      	mov	r0, r3
10006984:	f7ff fa2e 	bl	10005de4 <RCCEx_PLL3_Config>
10006988:	4603      	mov	r3, r0
1000698a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000698e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006992:	2b00      	cmp	r3, #0
10006994:	d003      	beq.n	1000699e <HAL_RCCEx_PeriphCLKConfig+0x636>
        {
          return status;
10006996:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000699a:	f001 bb6f 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_Q */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000699e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100069a2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100069a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100069aa:	f043 0320 	orr.w	r3, r3, #32
100069ae:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100069b2:	e01e      	b.n	100069f2 <HAL_RCCEx_PeriphCLKConfig+0x68a>

      case RCC_SAI4CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100069b4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100069b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100069bc:	681b      	ldr	r3, [r3, #0]
100069be:	3344      	adds	r3, #68	; 0x44
100069c0:	4618      	mov	r0, r3
100069c2:	f7ff fa0f 	bl	10005de4 <RCCEx_PLL3_Config>
100069c6:	4603      	mov	r3, r0
100069c8:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100069cc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100069d0:	2b00      	cmp	r3, #0
100069d2:	d003      	beq.n	100069dc <HAL_RCCEx_PeriphCLKConfig+0x674>
        {
          return status;
100069d4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100069d8:	f001 bb50 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_R */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100069dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100069e0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100069e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100069e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100069ec:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100069f0:	bf00      	nop
    }

    /* Set the source of SAI4 clock*/
    __HAL_RCC_SAI4_CONFIG(PeriphClkInit->Sai4ClockSelection);
100069f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100069f6:	f8d3 38d4 	ldr.w	r3, [r3, #2260]	; 0x8d4
100069fa:	f023 0107 	bic.w	r1, r3, #7
100069fe:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006a02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006a06:	681b      	ldr	r3, [r3, #0]
10006a08:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
10006a0c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006a10:	430b      	orrs	r3, r1
10006a12:	f8c2 38d4 	str.w	r3, [r2, #2260]	; 0x8d4
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) ==
10006a16:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006a1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006a1e:	681b      	ldr	r3, [r3, #0]
10006a20:	e9d3 2300 	ldrd	r2, r3, [r3]
10006a24:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
10006a28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
10006a2c:	2300      	movs	r3, #0
10006a2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
10006a32:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
10006a36:	460b      	mov	r3, r1
10006a38:	4313      	orrs	r3, r2
10006a3a:	d07e      	beq.n	10006b3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      RCC_PERIPHCLK_SPI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
10006a3c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006a40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006a44:	681b      	ldr	r3, [r3, #0]
10006a46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
10006a4a:	2b04      	cmp	r3, #4
10006a4c:	d044      	beq.n	10006ad8 <HAL_RCCEx_PeriphCLKConfig+0x770>
10006a4e:	2b04      	cmp	r3, #4
10006a50:	d861      	bhi.n	10006b16 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
10006a52:	2b00      	cmp	r3, #0
10006a54:	d002      	beq.n	10006a5c <HAL_RCCEx_PeriphCLKConfig+0x6f4>
10006a56:	2b01      	cmp	r3, #1
10006a58:	d01f      	beq.n	10006a9a <HAL_RCCEx_PeriphCLKConfig+0x732>
10006a5a:	e05c      	b.n	10006b16 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      case RCC_SPI1CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006a5c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006a60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006a64:	681b      	ldr	r3, [r3, #0]
10006a66:	3380      	adds	r3, #128	; 0x80
10006a68:	4618      	mov	r0, r3
10006a6a:	f7ff fb25 	bl	100060b8 <RCCEx_PLL4_Config>
10006a6e:	4603      	mov	r3, r0
10006a70:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006a74:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006a78:	2b00      	cmp	r3, #0
10006a7a:	d003      	beq.n	10006a84 <HAL_RCCEx_PeriphCLKConfig+0x71c>
        {
          return status;
10006a7c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006a80:	f001 bafc 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006a84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006a88:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006a8c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006a90:	f043 0310 	orr.w	r3, r3, #16
10006a94:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006a98:	e03d      	b.n	10006b16 <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006a9a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006a9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006aa2:	681b      	ldr	r3, [r3, #0]
10006aa4:	3344      	adds	r3, #68	; 0x44
10006aa6:	4618      	mov	r0, r3
10006aa8:	f7ff f99c 	bl	10005de4 <RCCEx_PLL3_Config>
10006aac:	4603      	mov	r3, r0
10006aae:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006ab2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006ab6:	2b00      	cmp	r3, #0
10006ab8:	d003      	beq.n	10006ac2 <HAL_RCCEx_PeriphCLKConfig+0x75a>
        {
          return status;
10006aba:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006abe:	f001 badd 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006ac2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006ac6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006aca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006ace:	f043 0320 	orr.w	r3, r3, #32
10006ad2:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006ad6:	e01e      	b.n	10006b16 <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006ad8:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006adc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006ae0:	681b      	ldr	r3, [r3, #0]
10006ae2:	3344      	adds	r3, #68	; 0x44
10006ae4:	4618      	mov	r0, r3
10006ae6:	f7ff f97d 	bl	10005de4 <RCCEx_PLL3_Config>
10006aea:	4603      	mov	r3, r0
10006aec:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006af0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006af4:	2b00      	cmp	r3, #0
10006af6:	d003      	beq.n	10006b00 <HAL_RCCEx_PeriphCLKConfig+0x798>
        {
          return status;
10006af8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006afc:	f001 babe 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006b00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006b04:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006b08:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006b10:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006b14:	bf00      	nop

    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
10006b16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006b1a:	f8d3 38d8 	ldr.w	r3, [r3, #2264]	; 0x8d8
10006b1e:	f023 0107 	bic.w	r1, r3, #7
10006b22:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006b26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006b2a:	681b      	ldr	r3, [r3, #0]
10006b2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
10006b30:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006b34:	430b      	orrs	r3, r1
10006b36:	f8c2 38d8 	str.w	r3, [r2, #2264]	; 0x8d8
  }

  /*---------------------------- SPI23 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI23) ==
10006b3a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006b3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006b42:	681b      	ldr	r3, [r3, #0]
10006b44:	e9d3 2300 	ldrd	r2, r3, [r3]
10006b48:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
10006b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
10006b50:	2300      	movs	r3, #0
10006b52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
10006b56:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
10006b5a:	460b      	mov	r3, r1
10006b5c:	4313      	orrs	r3, r2
10006b5e:	d07e      	beq.n	10006c5e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      RCC_PERIPHCLK_SPI23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
10006b60:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006b64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006b68:	681b      	ldr	r3, [r3, #0]
10006b6a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
10006b6e:	2b04      	cmp	r3, #4
10006b70:	d044      	beq.n	10006bfc <HAL_RCCEx_PeriphCLKConfig+0x894>
10006b72:	2b04      	cmp	r3, #4
10006b74:	d861      	bhi.n	10006c3a <HAL_RCCEx_PeriphCLKConfig+0x8d2>
10006b76:	2b00      	cmp	r3, #0
10006b78:	d002      	beq.n	10006b80 <HAL_RCCEx_PeriphCLKConfig+0x818>
10006b7a:	2b01      	cmp	r3, #1
10006b7c:	d01f      	beq.n	10006bbe <HAL_RCCEx_PeriphCLKConfig+0x856>
10006b7e:	e05c      	b.n	10006c3a <HAL_RCCEx_PeriphCLKConfig+0x8d2>
    {
      case RCC_SPI23CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI23 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006b80:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006b84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006b88:	681b      	ldr	r3, [r3, #0]
10006b8a:	3380      	adds	r3, #128	; 0x80
10006b8c:	4618      	mov	r0, r3
10006b8e:	f7ff fa93 	bl	100060b8 <RCCEx_PLL4_Config>
10006b92:	4603      	mov	r3, r0
10006b94:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006b98:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006b9c:	2b00      	cmp	r3, #0
10006b9e:	d003      	beq.n	10006ba8 <HAL_RCCEx_PeriphCLKConfig+0x840>
        {
          return status;
10006ba0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006ba4:	f001 ba6a 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006ba8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006bac:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006bb0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006bb4:	f043 0310 	orr.w	r3, r3, #16
10006bb8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006bbc:	e03d      	b.n	10006c3a <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006bbe:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006bc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006bc6:	681b      	ldr	r3, [r3, #0]
10006bc8:	3344      	adds	r3, #68	; 0x44
10006bca:	4618      	mov	r0, r3
10006bcc:	f7ff f90a 	bl	10005de4 <RCCEx_PLL3_Config>
10006bd0:	4603      	mov	r3, r0
10006bd2:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006bd6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006bda:	2b00      	cmp	r3, #0
10006bdc:	d003      	beq.n	10006be6 <HAL_RCCEx_PeriphCLKConfig+0x87e>
        {
          return status;
10006bde:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006be2:	f001 ba4b 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006be6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006bea:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006bee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006bf2:	f043 0320 	orr.w	r3, r3, #32
10006bf6:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006bfa:	e01e      	b.n	10006c3a <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006bfc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006c00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006c04:	681b      	ldr	r3, [r3, #0]
10006c06:	3344      	adds	r3, #68	; 0x44
10006c08:	4618      	mov	r0, r3
10006c0a:	f7ff f8eb 	bl	10005de4 <RCCEx_PLL3_Config>
10006c0e:	4603      	mov	r3, r0
10006c10:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006c14:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006c18:	2b00      	cmp	r3, #0
10006c1a:	d003      	beq.n	10006c24 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
        {
          return status;
10006c1c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006c20:	f001 ba2c 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006c24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006c28:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006c2c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006c34:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006c38:	bf00      	nop
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
10006c3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006c3e:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	; 0x8dc
10006c42:	f023 0107 	bic.w	r1, r3, #7
10006c46:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006c4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006c4e:	681b      	ldr	r3, [r3, #0]
10006c50:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
10006c54:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006c58:	430b      	orrs	r3, r1
10006c5a:	f8c2 38dc 	str.w	r3, [r2, #2268]	; 0x8dc
  }

  /*---------------------------- SPI45 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) ==
10006c5e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006c62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006c66:	681b      	ldr	r3, [r3, #0]
10006c68:	e9d3 2300 	ldrd	r2, r3, [r3]
10006c6c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
10006c70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
10006c74:	2300      	movs	r3, #0
10006c76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
10006c7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
10006c7e:	460b      	mov	r3, r1
10006c80:	4313      	orrs	r3, r2
10006c82:	d038      	beq.n	10006cf6 <HAL_RCCEx_PeriphCLKConfig+0x98e>
      RCC_PERIPHCLK_SPI45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    if (PeriphClkInit->Spi45ClockSelection == RCC_SPI45CLKSOURCE_PLL4)
10006c84:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006c88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006c8c:	681b      	ldr	r3, [r3, #0]
10006c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
10006c92:	2b01      	cmp	r3, #1
10006c94:	d11d      	bne.n	10006cd2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006c96:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006c9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006c9e:	681b      	ldr	r3, [r3, #0]
10006ca0:	3380      	adds	r3, #128	; 0x80
10006ca2:	4618      	mov	r0, r3
10006ca4:	f7ff fa08 	bl	100060b8 <RCCEx_PLL4_Config>
10006ca8:	4603      	mov	r3, r0
10006caa:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10006cae:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006cb2:	2b00      	cmp	r3, #0
10006cb4:	d003      	beq.n	10006cbe <HAL_RCCEx_PeriphCLKConfig+0x956>
      {
        return status;
10006cb6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006cba:	f001 b9df 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable SPI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006cbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006cc2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006cc6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006cca:	f043 0320 	orr.w	r3, r3, #32
10006cce:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of SPI45 clock*/
    __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
10006cd2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006cd6:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
10006cda:	f023 0107 	bic.w	r1, r3, #7
10006cde:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006ce2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006ce6:	681b      	ldr	r3, [r3, #0]
10006ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
10006cec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006cf0:	430b      	orrs	r3, r1
10006cf2:	f8c2 38e0 	str.w	r3, [r2, #2272]	; 0x8e0
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) ==
10006cf6:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006cfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006cfe:	681b      	ldr	r3, [r3, #0]
10006d00:	e9d3 2300 	ldrd	r2, r3, [r3]
10006d04:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
10006d08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
10006d0c:	2300      	movs	r3, #0
10006d0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
10006d12:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
10006d16:	460b      	mov	r3, r1
10006d18:	4313      	orrs	r3, r2
10006d1a:	d05b      	beq.n	10006dd4 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
      RCC_PERIPHCLK_SPI6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
10006d1c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006d20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006d24:	681b      	ldr	r3, [r3, #0]
10006d26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
10006d2a:	2b01      	cmp	r3, #1
10006d2c:	d002      	beq.n	10006d34 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
10006d2e:	2b05      	cmp	r3, #5
10006d30:	d01f      	beq.n	10006d72 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
10006d32:	e03d      	b.n	10006db0 <HAL_RCCEx_PeriphCLKConfig+0xa48>
    {
      case RCC_SPI6CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI6 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006d34:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006d38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006d3c:	681b      	ldr	r3, [r3, #0]
10006d3e:	3380      	adds	r3, #128	; 0x80
10006d40:	4618      	mov	r0, r3
10006d42:	f7ff f9b9 	bl	100060b8 <RCCEx_PLL4_Config>
10006d46:	4603      	mov	r3, r0
10006d48:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006d4c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006d50:	2b00      	cmp	r3, #0
10006d52:	d003      	beq.n	10006d5c <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        {
          return status;
10006d54:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006d58:	f001 b990 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006d5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006d60:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006d64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006d68:	f043 0320 	orr.w	r3, r3, #32
10006d6c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006d70:	e01e      	b.n	10006db0 <HAL_RCCEx_PeriphCLKConfig+0xa48>

      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is used as clock source for SPI6 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006d72:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006d76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006d7a:	681b      	ldr	r3, [r3, #0]
10006d7c:	3344      	adds	r3, #68	; 0x44
10006d7e:	4618      	mov	r0, r3
10006d80:	f7ff f830 	bl	10005de4 <RCCEx_PLL3_Config>
10006d84:	4603      	mov	r3, r0
10006d86:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006d8a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006d8e:	2b00      	cmp	r3, #0
10006d90:	d003      	beq.n	10006d9a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        {
          return status;
10006d92:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006d96:	f001 b971 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006d9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006d9e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006da2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006da6:	f043 0320 	orr.w	r3, r3, #32
10006daa:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006dae:	bf00      	nop
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
10006db0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006db4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10006db8:	f023 0107 	bic.w	r1, r3, #7
10006dbc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006dc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006dc4:	681b      	ldr	r3, [r3, #0]
10006dc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
10006dca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006dce:	430b      	orrs	r3, r1
10006dd0:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  /*---------------------------- USART6 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) ==
10006dd4:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006dd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006ddc:	681b      	ldr	r3, [r3, #0]
10006dde:	e9d3 2300 	ldrd	r2, r3, [r3]
10006de2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
10006de6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
10006dea:	2300      	movs	r3, #0
10006dec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
10006df0:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
10006df4:	460b      	mov	r3, r1
10006df6:	4313      	orrs	r3, r2
10006df8:	d038      	beq.n	10006e6c <HAL_RCCEx_PeriphCLKConfig+0xb04>
      RCC_PERIPHCLK_USART6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_PLL4)
10006dfa:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006dfe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006e02:	681b      	ldr	r3, [r3, #0]
10006e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
10006e08:	2b01      	cmp	r3, #1
10006e0a:	d11d      	bne.n	10006e48 <HAL_RCCEx_PeriphCLKConfig+0xae0>
    {
      /* PLL4 is used as clock source for USART6 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006e0c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006e10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006e14:	681b      	ldr	r3, [r3, #0]
10006e16:	3380      	adds	r3, #128	; 0x80
10006e18:	4618      	mov	r0, r3
10006e1a:	f7ff f94d 	bl	100060b8 <RCCEx_PLL4_Config>
10006e1e:	4603      	mov	r3, r0
10006e20:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10006e24:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006e28:	2b00      	cmp	r3, #0
10006e2a:	d003      	beq.n	10006e34 <HAL_RCCEx_PeriphCLKConfig+0xacc>
      {
        return status;
10006e2c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006e30:	f001 b924 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006e34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006e38:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006e3c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006e40:	f043 0320 	orr.w	r3, r3, #32
10006e44:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of USART6 clock*/
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
10006e48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006e4c:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
10006e50:	f023 0107 	bic.w	r1, r3, #7
10006e54:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006e58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006e5c:	681b      	ldr	r3, [r3, #0]
10006e5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
10006e62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006e66:	430b      	orrs	r3, r1
10006e68:	f8c2 38e4 	str.w	r3, [r2, #2276]	; 0x8e4
  }

  /*---------------------------- UART24 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART24) ==
10006e6c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006e70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006e74:	681b      	ldr	r3, [r3, #0]
10006e76:	e9d3 2300 	ldrd	r2, r3, [r3]
10006e7a:	f002 0302 	and.w	r3, r2, #2
10006e7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
10006e82:	2300      	movs	r3, #0
10006e84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
10006e88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
10006e8c:	460b      	mov	r3, r1
10006e8e:	4313      	orrs	r3, r2
10006e90:	d038      	beq.n	10006f04 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      RCC_PERIPHCLK_UART24)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART24CLKSOURCE(PeriphClkInit->Uart24ClockSelection));

    if (PeriphClkInit->Uart24ClockSelection == RCC_UART24CLKSOURCE_PLL4)
10006e92:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006e96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006e9a:	681b      	ldr	r3, [r3, #0]
10006e9c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
10006ea0:	2b01      	cmp	r3, #1
10006ea2:	d11d      	bne.n	10006ee0 <HAL_RCCEx_PeriphCLKConfig+0xb78>
    {
      /* PLL4 is used as clock source for UART24 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006ea4:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006ea8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006eac:	681b      	ldr	r3, [r3, #0]
10006eae:	3380      	adds	r3, #128	; 0x80
10006eb0:	4618      	mov	r0, r3
10006eb2:	f7ff f901 	bl	100060b8 <RCCEx_PLL4_Config>
10006eb6:	4603      	mov	r3, r0
10006eb8:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10006ebc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006ec0:	2b00      	cmp	r3, #0
10006ec2:	d003      	beq.n	10006ecc <HAL_RCCEx_PeriphCLKConfig+0xb64>
      {
        return status;
10006ec4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006ec8:	f001 b8d8 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006ecc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006ed0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006ed4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006ed8:	f043 0320 	orr.w	r3, r3, #32
10006edc:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART24 clock*/
    __HAL_RCC_UART24_CONFIG(PeriphClkInit->Uart24ClockSelection);
10006ee0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006ee4:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
10006ee8:	f023 0107 	bic.w	r1, r3, #7
10006eec:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006ef0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006ef4:	681b      	ldr	r3, [r3, #0]
10006ef6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
10006efa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006efe:	430b      	orrs	r3, r1
10006f00:	f8c2 38e8 	str.w	r3, [r2, #2280]	; 0x8e8
  }

  /*---------------------------- UART35 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART35) ==
10006f04:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006f08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006f0c:	681b      	ldr	r3, [r3, #0]
10006f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
10006f12:	f002 0304 	and.w	r3, r2, #4
10006f16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
10006f1a:	2300      	movs	r3, #0
10006f1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
10006f20:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
10006f24:	460b      	mov	r3, r1
10006f26:	4313      	orrs	r3, r2
10006f28:	d038      	beq.n	10006f9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
      RCC_PERIPHCLK_UART35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART35CLKSOURCE(PeriphClkInit->Uart35ClockSelection));

    if (PeriphClkInit->Uart35ClockSelection == RCC_UART35CLKSOURCE_PLL4)
10006f2a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006f2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006f32:	681b      	ldr	r3, [r3, #0]
10006f34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
10006f38:	2b01      	cmp	r3, #1
10006f3a:	d11d      	bne.n	10006f78 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      /* PLL4 is used as clock source for UART35 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006f3c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006f40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006f44:	681b      	ldr	r3, [r3, #0]
10006f46:	3380      	adds	r3, #128	; 0x80
10006f48:	4618      	mov	r0, r3
10006f4a:	f7ff f8b5 	bl	100060b8 <RCCEx_PLL4_Config>
10006f4e:	4603      	mov	r3, r0
10006f50:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10006f54:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006f58:	2b00      	cmp	r3, #0
10006f5a:	d003      	beq.n	10006f64 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      {
        return status;
10006f5c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006f60:	f001 b88c 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006f64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006f68:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006f6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006f70:	f043 0320 	orr.w	r3, r3, #32
10006f74:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART35 clock*/
    __HAL_RCC_UART35_CONFIG(PeriphClkInit->Uart35ClockSelection);
10006f78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006f7c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
10006f80:	f023 0107 	bic.w	r1, r3, #7
10006f84:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006f88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006f8c:	681b      	ldr	r3, [r3, #0]
10006f8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
10006f92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006f96:	430b      	orrs	r3, r1
10006f98:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
  }

  /*---------------------------- UAUART78 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART78) ==
10006f9c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006fa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006fa4:	681b      	ldr	r3, [r3, #0]
10006fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
10006faa:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
10006fae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
10006fb2:	2300      	movs	r3, #0
10006fb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
10006fb8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
10006fbc:	460b      	mov	r3, r1
10006fbe:	4313      	orrs	r3, r2
10006fc0:	d038      	beq.n	10007034 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      RCC_PERIPHCLK_UART78)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART78CLKSOURCE(PeriphClkInit->Uart78ClockSelection));

    if (PeriphClkInit->Uart78ClockSelection == RCC_UART78CLKSOURCE_PLL4)
10006fc2:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006fc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006fca:	681b      	ldr	r3, [r3, #0]
10006fcc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
10006fd0:	2b01      	cmp	r3, #1
10006fd2:	d11d      	bne.n	10007010 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* PLL4 is used as clock source for UART78 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006fd4:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006fd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006fdc:	681b      	ldr	r3, [r3, #0]
10006fde:	3380      	adds	r3, #128	; 0x80
10006fe0:	4618      	mov	r0, r3
10006fe2:	f7ff f869 	bl	100060b8 <RCCEx_PLL4_Config>
10006fe6:	4603      	mov	r3, r0
10006fe8:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10006fec:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006ff0:	2b00      	cmp	r3, #0
10006ff2:	d003      	beq.n	10006ffc <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        return status;
10006ff4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006ff8:	f001 b840 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006ffc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007000:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007004:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007008:	f043 0320 	orr.w	r3, r3, #32
1000700c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART78 clock*/
    __HAL_RCC_UART78_CONFIG(PeriphClkInit->Uart78ClockSelection);
10007010:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007014:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
10007018:	f023 0107 	bic.w	r1, r3, #7
1000701c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007020:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007024:	681b      	ldr	r3, [r3, #0]
10007026:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
1000702a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000702e:	430b      	orrs	r3, r1
10007030:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
  }

  /*---------------------------- USART1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) ==
10007034:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007038:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000703c:	681b      	ldr	r3, [r3, #0]
1000703e:	e9d3 2300 	ldrd	r2, r3, [r3]
10007042:	f002 0301 	and.w	r3, r2, #1
10007046:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
1000704a:	2300      	movs	r3, #0
1000704c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
10007050:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
10007054:	460b      	mov	r3, r1
10007056:	4313      	orrs	r3, r2
10007058:	d05b      	beq.n	10007112 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
      RCC_PERIPHCLK_USART1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
1000705a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000705e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007062:	681b      	ldr	r3, [r3, #0]
10007064:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
10007068:	2b01      	cmp	r3, #1
1000706a:	d002      	beq.n	10007072 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
1000706c:	2b04      	cmp	r3, #4
1000706e:	d01f      	beq.n	100070b0 <HAL_RCCEx_PeriphCLKConfig+0xd48>
10007070:	e03d      	b.n	100070ee <HAL_RCCEx_PeriphCLKConfig+0xd86>
    {
      case RCC_USART1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for USART1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10007072:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007076:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000707a:	681b      	ldr	r3, [r3, #0]
1000707c:	3344      	adds	r3, #68	; 0x44
1000707e:	4618      	mov	r0, r3
10007080:	f7fe feb0 	bl	10005de4 <RCCEx_PLL3_Config>
10007084:	4603      	mov	r3, r0
10007086:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000708a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000708e:	2b00      	cmp	r3, #0
10007090:	d003      	beq.n	1000709a <HAL_RCCEx_PeriphCLKConfig+0xd32>
        {
          return status;
10007092:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007096:	f000 bff1 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable UART Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000709a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000709e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100070a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100070a6:	f043 0320 	orr.w	r3, r3, #32
100070aa:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100070ae:	e01e      	b.n	100070ee <HAL_RCCEx_PeriphCLKConfig+0xd86>

      case RCC_USART1CLKSOURCE_PLL4: /* PLL4 is used as clock source for USART1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100070b0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100070b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100070b8:	681b      	ldr	r3, [r3, #0]
100070ba:	3380      	adds	r3, #128	; 0x80
100070bc:	4618      	mov	r0, r3
100070be:	f7fe fffb 	bl	100060b8 <RCCEx_PLL4_Config>
100070c2:	4603      	mov	r3, r0
100070c4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100070c8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100070cc:	2b00      	cmp	r3, #0
100070ce:	d003      	beq.n	100070d8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
        {
          return status;
100070d0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100070d4:	f000 bfd2 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable USART Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100070d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100070dc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100070e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100070e4:	f043 0320 	orr.w	r3, r3, #32
100070e8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100070ec:	bf00      	nop
    }

    /* Set the source of USART1 clock*/
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
100070ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100070f2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
100070f6:	f023 0107 	bic.w	r1, r3, #7
100070fa:	f507 7312 	add.w	r3, r7, #584	; 0x248
100070fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007102:	681b      	ldr	r3, [r3, #0]
10007104:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
10007108:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000710c:	430b      	orrs	r3, r1
1000710e:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  /*---------------------------- SDMMC12 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC12) ==
10007112:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007116:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000711a:	681b      	ldr	r3, [r3, #0]
1000711c:	e9d3 2300 	ldrd	r2, r3, [r3]
10007120:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
10007124:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
10007128:	2300      	movs	r3, #0
1000712a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
1000712e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
10007132:	460b      	mov	r3, r1
10007134:	4313      	orrs	r3, r2
10007136:	d05b      	beq.n	100071f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>
      RCC_PERIPHCLK_SDMMC12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
10007138:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000713c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007140:	681b      	ldr	r3, [r3, #0]
10007142:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
10007146:	2b01      	cmp	r3, #1
10007148:	d002      	beq.n	10007150 <HAL_RCCEx_PeriphCLKConfig+0xde8>
1000714a:	2b02      	cmp	r3, #2
1000714c:	d01f      	beq.n	1000718e <HAL_RCCEx_PeriphCLKConfig+0xe26>
1000714e:	e03d      	b.n	100071cc <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      case RCC_SDMMC12CLKSOURCE_PLL3: /* PLL3 is used as clock source for SDMMC12 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10007150:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007154:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007158:	681b      	ldr	r3, [r3, #0]
1000715a:	3344      	adds	r3, #68	; 0x44
1000715c:	4618      	mov	r0, r3
1000715e:	f7fe fe41 	bl	10005de4 <RCCEx_PLL3_Config>
10007162:	4603      	mov	r3, r0
10007164:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007168:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000716c:	2b00      	cmp	r3, #0
1000716e:	d003      	beq.n	10007178 <HAL_RCCEx_PeriphCLKConfig+0xe10>
        {
          return status;
10007170:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007174:	f000 bf82 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10007178:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000717c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10007180:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10007188:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000718c:	e01e      	b.n	100071cc <HAL_RCCEx_PeriphCLKConfig+0xe64>

      case RCC_SDMMC12CLKSOURCE_PLL4: /* PLL4 is used as clock source for SDMMC12 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000718e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007192:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007196:	681b      	ldr	r3, [r3, #0]
10007198:	3380      	adds	r3, #128	; 0x80
1000719a:	4618      	mov	r0, r3
1000719c:	f7fe ff8c 	bl	100060b8 <RCCEx_PLL4_Config>
100071a0:	4603      	mov	r3, r0
100071a2:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100071a6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100071aa:	2b00      	cmp	r3, #0
100071ac:	d003      	beq.n	100071b6 <HAL_RCCEx_PeriphCLKConfig+0xe4e>
        {
          return status;
100071ae:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100071b2:	f000 bf63 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100071b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100071ba:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100071be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100071c2:	f043 0310 	orr.w	r3, r3, #16
100071c6:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100071ca:	bf00      	nop
    }

    /* Set the source of SDMMC12 clock*/
    __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
100071cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100071d0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
100071d4:	f023 0107 	bic.w	r1, r3, #7
100071d8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100071dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100071e0:	681b      	ldr	r3, [r3, #0]
100071e2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
100071e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100071ea:	430b      	orrs	r3, r1
100071ec:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
  }

  /*---------------------------- SDMMC3 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC3) ==
100071f0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100071f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100071f8:	681b      	ldr	r3, [r3, #0]
100071fa:	e9d3 2300 	ldrd	r2, r3, [r3]
100071fe:	2100      	movs	r1, #0
10007200:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
10007204:	f003 0301 	and.w	r3, r3, #1
10007208:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
1000720c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
10007210:	460b      	mov	r3, r1
10007212:	4313      	orrs	r3, r2
10007214:	d05b      	beq.n	100072ce <HAL_RCCEx_PeriphCLKConfig+0xf66>
      RCC_PERIPHCLK_SDMMC3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC3CLKSOURCE(PeriphClkInit->Sdmmc3ClockSelection));

    switch (PeriphClkInit->Sdmmc3ClockSelection)
10007216:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000721a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000721e:	681b      	ldr	r3, [r3, #0]
10007220:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
10007224:	2b01      	cmp	r3, #1
10007226:	d002      	beq.n	1000722e <HAL_RCCEx_PeriphCLKConfig+0xec6>
10007228:	2b02      	cmp	r3, #2
1000722a:	d01f      	beq.n	1000726c <HAL_RCCEx_PeriphCLKConfig+0xf04>
1000722c:	e03d      	b.n	100072aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
    {
      case RCC_SDMMC3CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SDMMC3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000722e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007232:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007236:	681b      	ldr	r3, [r3, #0]
10007238:	3344      	adds	r3, #68	; 0x44
1000723a:	4618      	mov	r0, r3
1000723c:	f7fe fdd2 	bl	10005de4 <RCCEx_PLL3_Config>
10007240:	4603      	mov	r3, r0
10007242:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007246:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000724a:	2b00      	cmp	r3, #0
1000724c:	d003      	beq.n	10007256 <HAL_RCCEx_PeriphCLKConfig+0xeee>
        {
          return status;
1000724e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007252:	f000 bf13 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10007256:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000725a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000725e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10007266:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000726a:	e01e      	b.n	100072aa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_SDMMC3CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SDMMC3 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000726c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007270:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007274:	681b      	ldr	r3, [r3, #0]
10007276:	3380      	adds	r3, #128	; 0x80
10007278:	4618      	mov	r0, r3
1000727a:	f7fe ff1d 	bl	100060b8 <RCCEx_PLL4_Config>
1000727e:	4603      	mov	r3, r0
10007280:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007284:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007288:	2b00      	cmp	r3, #0
1000728a:	d003      	beq.n	10007294 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
        {
          return status;
1000728c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007290:	f000 bef4 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10007294:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007298:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000729c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100072a0:	f043 0310 	orr.w	r3, r3, #16
100072a4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100072a8:	bf00      	nop
    }

    /* Set the source of SDMMC3 clock*/
    __HAL_RCC_SDMMC3_CONFIG(PeriphClkInit->Sdmmc3ClockSelection);
100072aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100072ae:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
100072b2:	f023 0107 	bic.w	r1, r3, #7
100072b6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100072ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100072be:	681b      	ldr	r3, [r3, #0]
100072c0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
100072c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100072c8:	430b      	orrs	r3, r1
100072ca:	f8c2 38f8 	str.w	r3, [r2, #2296]	; 0x8f8
  }

  /*---------------------------- ETH configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ETH) ==
100072ce:	f507 7312 	add.w	r3, r7, #584	; 0x248
100072d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100072d6:	681b      	ldr	r3, [r3, #0]
100072d8:	e9d3 2300 	ldrd	r2, r3, [r3]
100072dc:	2100      	movs	r1, #0
100072de:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
100072e2:	f003 0302 	and.w	r3, r3, #2
100072e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
100072ea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
100072ee:	460b      	mov	r3, r1
100072f0:	4313      	orrs	r3, r2
100072f2:	d05b      	beq.n	100073ac <HAL_RCCEx_PeriphCLKConfig+0x1044>
      RCC_PERIPHCLK_ETH)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETHCLKSOURCE(PeriphClkInit->EthClockSelection));

    switch (PeriphClkInit->EthClockSelection)
100072f4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100072f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100072fc:	681b      	ldr	r3, [r3, #0]
100072fe:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
10007302:	2b00      	cmp	r3, #0
10007304:	d002      	beq.n	1000730c <HAL_RCCEx_PeriphCLKConfig+0xfa4>
10007306:	2b01      	cmp	r3, #1
10007308:	d01f      	beq.n	1000734a <HAL_RCCEx_PeriphCLKConfig+0xfe2>
1000730a:	e03d      	b.n	10007388 <HAL_RCCEx_PeriphCLKConfig+0x1020>
    {
      case RCC_ETHCLKSOURCE_PLL4:     /* PLL4 is used as clock source for ETH */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000730c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007310:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007314:	681b      	ldr	r3, [r3, #0]
10007316:	3380      	adds	r3, #128	; 0x80
10007318:	4618      	mov	r0, r3
1000731a:	f7fe fecd 	bl	100060b8 <RCCEx_PLL4_Config>
1000731e:	4603      	mov	r3, r0
10007320:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007324:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007328:	2b00      	cmp	r3, #0
1000732a:	d003      	beq.n	10007334 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
        {
          return status;
1000732c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007330:	f000 bea4 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL2 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10007334:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007338:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000733c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007340:	f043 0310 	orr.w	r3, r3, #16
10007344:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10007348:	e01e      	b.n	10007388 <HAL_RCCEx_PeriphCLKConfig+0x1020>

      case RCC_ETHCLKSOURCE_PLL3:     /* PLL3 is used as clock source for ETH */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000734a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000734e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007352:	681b      	ldr	r3, [r3, #0]
10007354:	3344      	adds	r3, #68	; 0x44
10007356:	4618      	mov	r0, r3
10007358:	f7fe fd44 	bl	10005de4 <RCCEx_PLL3_Config>
1000735c:	4603      	mov	r3, r0
1000735e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007362:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007366:	2b00      	cmp	r3, #0
10007368:	d003      	beq.n	10007372 <HAL_RCCEx_PeriphCLKConfig+0x100a>
        {
          return status;
1000736a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000736e:	f000 be85 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10007372:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007376:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000737a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000737e:	f043 0320 	orr.w	r3, r3, #32
10007382:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10007386:	bf00      	nop
    }

    /* Set the source of ETH clock*/
    __HAL_RCC_ETH_CONFIG(PeriphClkInit->EthClockSelection);
10007388:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000738c:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
10007390:	f023 0103 	bic.w	r1, r3, #3
10007394:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007398:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000739c:	681b      	ldr	r3, [r3, #0]
1000739e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
100073a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100073a6:	430b      	orrs	r3, r1
100073a8:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
  }

  /*---------------------------- QSPI configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) ==
100073ac:	f507 7312 	add.w	r3, r7, #584	; 0x248
100073b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100073b4:	681b      	ldr	r3, [r3, #0]
100073b6:	e9d3 2300 	ldrd	r2, r3, [r3]
100073ba:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
100073be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
100073c2:	2300      	movs	r3, #0
100073c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
100073c8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
100073cc:	460b      	mov	r3, r1
100073ce:	4313      	orrs	r3, r2
100073d0:	d05b      	beq.n	1000748a <HAL_RCCEx_PeriphCLKConfig+0x1122>
      RCC_PERIPHCLK_QSPI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    switch (PeriphClkInit->QspiClockSelection)
100073d2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100073d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100073da:	681b      	ldr	r3, [r3, #0]
100073dc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
100073e0:	2b01      	cmp	r3, #1
100073e2:	d002      	beq.n	100073ea <HAL_RCCEx_PeriphCLKConfig+0x1082>
100073e4:	2b02      	cmp	r3, #2
100073e6:	d01f      	beq.n	10007428 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
100073e8:	e03d      	b.n	10007466 <HAL_RCCEx_PeriphCLKConfig+0x10fe>
    {
      case RCC_QSPICLKSOURCE_PLL3:   /* PLL3 is used as clock source for QSPI */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100073ea:	f507 7312 	add.w	r3, r7, #584	; 0x248
100073ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100073f2:	681b      	ldr	r3, [r3, #0]
100073f4:	3344      	adds	r3, #68	; 0x44
100073f6:	4618      	mov	r0, r3
100073f8:	f7fe fcf4 	bl	10005de4 <RCCEx_PLL3_Config>
100073fc:	4603      	mov	r3, r0
100073fe:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007402:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007406:	2b00      	cmp	r3, #0
10007408:	d003      	beq.n	10007412 <HAL_RCCEx_PeriphCLKConfig+0x10aa>
        {
          return status;
1000740a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000740e:	f000 be35 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10007412:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007416:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000741a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000741e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10007422:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10007426:	e01e      	b.n	10007466 <HAL_RCCEx_PeriphCLKConfig+0x10fe>

      case RCC_QSPICLKSOURCE_PLL4:   /* PLL4 is used as clock source for QSPI */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007428:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000742c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007430:	681b      	ldr	r3, [r3, #0]
10007432:	3380      	adds	r3, #128	; 0x80
10007434:	4618      	mov	r0, r3
10007436:	f7fe fe3f 	bl	100060b8 <RCCEx_PLL4_Config>
1000743a:	4603      	mov	r3, r0
1000743c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007440:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007444:	2b00      	cmp	r3, #0
10007446:	d003      	beq.n	10007450 <HAL_RCCEx_PeriphCLKConfig+0x10e8>
        {
          return status;
10007448:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000744c:	f000 be16 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10007450:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007454:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007458:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000745c:	f043 0310 	orr.w	r3, r3, #16
10007460:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10007464:	bf00      	nop
    }

    /* Set the source of QSPI clock*/
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
10007466:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000746a:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
1000746e:	f023 0103 	bic.w	r1, r3, #3
10007472:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007476:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000747a:	681b      	ldr	r3, [r3, #0]
1000747c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
10007480:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007484:	430b      	orrs	r3, r1
10007486:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
  }

  /*---------------------------- FMC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) ==
1000748a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000748e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007492:	681b      	ldr	r3, [r3, #0]
10007494:	e9d3 2300 	ldrd	r2, r3, [r3]
10007498:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
1000749c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
100074a0:	2300      	movs	r3, #0
100074a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
100074a6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
100074aa:	460b      	mov	r3, r1
100074ac:	4313      	orrs	r3, r2
100074ae:	d05b      	beq.n	10007568 <HAL_RCCEx_PeriphCLKConfig+0x1200>
      RCC_PERIPHCLK_FMC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
100074b0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100074b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100074b8:	681b      	ldr	r3, [r3, #0]
100074ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
100074be:	2b01      	cmp	r3, #1
100074c0:	d002      	beq.n	100074c8 <HAL_RCCEx_PeriphCLKConfig+0x1160>
100074c2:	2b02      	cmp	r3, #2
100074c4:	d01f      	beq.n	10007506 <HAL_RCCEx_PeriphCLKConfig+0x119e>
100074c6:	e03d      	b.n	10007544 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
    {
      case RCC_FMCCLKSOURCE_PLL3: /* PLL3 is used as clock source for FMC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100074c8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100074cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100074d0:	681b      	ldr	r3, [r3, #0]
100074d2:	3344      	adds	r3, #68	; 0x44
100074d4:	4618      	mov	r0, r3
100074d6:	f7fe fc85 	bl	10005de4 <RCCEx_PLL3_Config>
100074da:	4603      	mov	r3, r0
100074dc:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100074e0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100074e4:	2b00      	cmp	r3, #0
100074e6:	d003      	beq.n	100074f0 <HAL_RCCEx_PeriphCLKConfig+0x1188>
        {
          return status;
100074e8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100074ec:	f000 bdc6 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100074f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100074f4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100074f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100074fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10007500:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10007504:	e01e      	b.n	10007544 <HAL_RCCEx_PeriphCLKConfig+0x11dc>

      case RCC_FMCCLKSOURCE_PLL4: /* PLL4 is used as clock source for FMC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007506:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000750a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000750e:	681b      	ldr	r3, [r3, #0]
10007510:	3380      	adds	r3, #128	; 0x80
10007512:	4618      	mov	r0, r3
10007514:	f7fe fdd0 	bl	100060b8 <RCCEx_PLL4_Config>
10007518:	4603      	mov	r3, r0
1000751a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000751e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007522:	2b00      	cmp	r3, #0
10007524:	d003      	beq.n	1000752e <HAL_RCCEx_PeriphCLKConfig+0x11c6>
        {
          return status;
10007526:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000752a:	f000 bda7 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
1000752e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007532:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007536:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000753a:	f043 0310 	orr.w	r3, r3, #16
1000753e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10007542:	bf00      	nop
    }

    /* Set the source of FMC clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
10007544:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007548:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
1000754c:	f023 0103 	bic.w	r1, r3, #3
10007550:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007554:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007558:	681b      	ldr	r3, [r3, #0]
1000755a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
1000755e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007562:	430b      	orrs	r3, r1
10007564:	f8c2 3904 	str.w	r3, [r2, #2308]	; 0x904
  }

#if defined(FDCAN1)
  /*---------------------------- FDCAN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) ==
10007568:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000756c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007570:	681b      	ldr	r3, [r3, #0]
10007572:	e9d3 2300 	ldrd	r2, r3, [r3]
10007576:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
1000757a:	67bb      	str	r3, [r7, #120]	; 0x78
1000757c:	2300      	movs	r3, #0
1000757e:	67fb      	str	r3, [r7, #124]	; 0x7c
10007580:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
10007584:	460b      	mov	r3, r1
10007586:	4313      	orrs	r3, r2
10007588:	d07e      	beq.n	10007688 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      RCC_PERIPHCLK_FDCAN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
1000758a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000758e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007592:	681b      	ldr	r3, [r3, #0]
10007594:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
10007598:	2b03      	cmp	r3, #3
1000759a:	d044      	beq.n	10007626 <HAL_RCCEx_PeriphCLKConfig+0x12be>
1000759c:	2b03      	cmp	r3, #3
1000759e:	d861      	bhi.n	10007664 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
100075a0:	2b01      	cmp	r3, #1
100075a2:	d002      	beq.n	100075aa <HAL_RCCEx_PeriphCLKConfig+0x1242>
100075a4:	2b02      	cmp	r3, #2
100075a6:	d01f      	beq.n	100075e8 <HAL_RCCEx_PeriphCLKConfig+0x1280>
100075a8:	e05c      	b.n	10007664 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
    {
      case RCC_FDCANCLKSOURCE_PLL3: /* PLL3 is used as clock source for FDCAN */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100075aa:	f507 7312 	add.w	r3, r7, #584	; 0x248
100075ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100075b2:	681b      	ldr	r3, [r3, #0]
100075b4:	3344      	adds	r3, #68	; 0x44
100075b6:	4618      	mov	r0, r3
100075b8:	f7fe fc14 	bl	10005de4 <RCCEx_PLL3_Config>
100075bc:	4603      	mov	r3, r0
100075be:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100075c2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100075c6:	2b00      	cmp	r3, #0
100075c8:	d003      	beq.n	100075d2 <HAL_RCCEx_PeriphCLKConfig+0x126a>
        {
          return status;
100075ca:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100075ce:	f000 bd55 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100075d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100075d6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100075da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100075de:	f043 0320 	orr.w	r3, r3, #32
100075e2:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100075e6:	e03d      	b.n	10007664 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_Q: /* PLL4_Q is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100075e8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100075ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100075f0:	681b      	ldr	r3, [r3, #0]
100075f2:	3380      	adds	r3, #128	; 0x80
100075f4:	4618      	mov	r0, r3
100075f6:	f7fe fd5f 	bl	100060b8 <RCCEx_PLL4_Config>
100075fa:	4603      	mov	r3, r0
100075fc:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007600:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007604:	2b00      	cmp	r3, #0
10007606:	d003      	beq.n	10007610 <HAL_RCCEx_PeriphCLKConfig+0x12a8>
        {
          return status;
10007608:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000760c:	f000 bd36 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10007610:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007614:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007618:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000761c:	f043 0320 	orr.w	r3, r3, #32
10007620:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10007624:	e01e      	b.n	10007664 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_R: /* PLL4_R is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007626:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000762a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000762e:	681b      	ldr	r3, [r3, #0]
10007630:	3380      	adds	r3, #128	; 0x80
10007632:	4618      	mov	r0, r3
10007634:	f7fe fd40 	bl	100060b8 <RCCEx_PLL4_Config>
10007638:	4603      	mov	r3, r0
1000763a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000763e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007642:	2b00      	cmp	r3, #0
10007644:	d003      	beq.n	1000764e <HAL_RCCEx_PeriphCLKConfig+0x12e6>
        {
          return status;
10007646:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000764a:	f000 bd17 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
1000764e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007652:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007656:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000765a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000765e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10007662:	bf00      	nop
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
10007664:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007668:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
1000766c:	f023 0103 	bic.w	r1, r3, #3
10007670:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007674:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007678:	681b      	ldr	r3, [r3, #0]
1000767a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
1000767e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007682:	430b      	orrs	r3, r1
10007684:	f8c2 390c 	str.w	r3, [r2, #2316]	; 0x90c
  }
#endif /*FDCAN1*/

  /*---------------------------- SPDIFRX configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) ==
10007688:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000768c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007690:	681b      	ldr	r3, [r3, #0]
10007692:	e9d3 2300 	ldrd	r2, r3, [r3]
10007696:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
1000769a:	673b      	str	r3, [r7, #112]	; 0x70
1000769c:	2300      	movs	r3, #0
1000769e:	677b      	str	r3, [r7, #116]	; 0x74
100076a0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
100076a4:	460b      	mov	r3, r1
100076a6:	4313      	orrs	r3, r2
100076a8:	d05b      	beq.n	10007762 <HAL_RCCEx_PeriphCLKConfig+0x13fa>
      RCC_PERIPHCLK_SPDIFRX)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
100076aa:	f507 7312 	add.w	r3, r7, #584	; 0x248
100076ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100076b2:	681b      	ldr	r3, [r3, #0]
100076b4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
100076b8:	2b00      	cmp	r3, #0
100076ba:	d002      	beq.n	100076c2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
100076bc:	2b01      	cmp	r3, #1
100076be:	d01f      	beq.n	10007700 <HAL_RCCEx_PeriphCLKConfig+0x1398>
100076c0:	e03d      	b.n	1000773e <HAL_RCCEx_PeriphCLKConfig+0x13d6>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL4: /* PLL4 is used as clock source for SPDIF */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100076c2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100076c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100076ca:	681b      	ldr	r3, [r3, #0]
100076cc:	3380      	adds	r3, #128	; 0x80
100076ce:	4618      	mov	r0, r3
100076d0:	f7fe fcf2 	bl	100060b8 <RCCEx_PLL4_Config>
100076d4:	4603      	mov	r3, r0
100076d6:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100076da:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100076de:	2b00      	cmp	r3, #0
100076e0:	d003      	beq.n	100076ea <HAL_RCCEx_PeriphCLKConfig+0x1382>
        {
          return status;
100076e2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100076e6:	f000 bcc9 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100076ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100076ee:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100076f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100076f6:	f043 0310 	orr.w	r3, r3, #16
100076fa:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100076fe:	e01e      	b.n	1000773e <HAL_RCCEx_PeriphCLKConfig+0x13d6>

      case RCC_SPDIFRXCLKSOURCE_PLL3: /* PLL3 is used as clock source for SPDIF */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10007700:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007704:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007708:	681b      	ldr	r3, [r3, #0]
1000770a:	3344      	adds	r3, #68	; 0x44
1000770c:	4618      	mov	r0, r3
1000770e:	f7fe fb69 	bl	10005de4 <RCCEx_PLL3_Config>
10007712:	4603      	mov	r3, r0
10007714:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007718:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000771c:	2b00      	cmp	r3, #0
1000771e:	d003      	beq.n	10007728 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
        {
          return status;
10007720:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007724:	f000 bcaa 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10007728:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000772c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10007730:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007734:	f043 0320 	orr.w	r3, r3, #32
10007738:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000773c:	bf00      	nop
    }

    /* Set the source of SPDIF clock*/
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
1000773e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007742:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
10007746:	f023 0103 	bic.w	r1, r3, #3
1000774a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000774e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007752:	681b      	ldr	r3, [r3, #0]
10007754:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
10007758:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000775c:	430b      	orrs	r3, r1
1000775e:	f8c2 3914 	str.w	r3, [r2, #2324]	; 0x914
  }

  /*---------------------------- CEC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) ==
10007762:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007766:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000776a:	681b      	ldr	r3, [r3, #0]
1000776c:	e9d3 2300 	ldrd	r2, r3, [r3]
10007770:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
10007774:	66bb      	str	r3, [r7, #104]	; 0x68
10007776:	2300      	movs	r3, #0
10007778:	66fb      	str	r3, [r7, #108]	; 0x6c
1000777a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
1000777e:	460b      	mov	r3, r1
10007780:	4313      	orrs	r3, r2
10007782:	d011      	beq.n	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1440>
      RCC_PERIPHCLK_CEC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
10007784:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007788:	f8d3 3918 	ldr.w	r3, [r3, #2328]	; 0x918
1000778c:	f023 0103 	bic.w	r1, r3, #3
10007790:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007794:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007798:	681b      	ldr	r3, [r3, #0]
1000779a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
1000779e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100077a2:	430b      	orrs	r3, r1
100077a4:	f8c2 3918 	str.w	r3, [r2, #2328]	; 0x918
  }

  /*---------------------------- USBPHY configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) ==
100077a8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100077ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100077b0:	681b      	ldr	r3, [r3, #0]
100077b2:	e9d3 2300 	ldrd	r2, r3, [r3]
100077b6:	f402 7300 	and.w	r3, r2, #512	; 0x200
100077ba:	663b      	str	r3, [r7, #96]	; 0x60
100077bc:	2300      	movs	r3, #0
100077be:	667b      	str	r3, [r7, #100]	; 0x64
100077c0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
100077c4:	460b      	mov	r3, r1
100077c6:	4313      	orrs	r3, r2
100077c8:	d038      	beq.n	1000783c <HAL_RCCEx_PeriphCLKConfig+0x14d4>
      RCC_PERIPHCLK_USBPHY)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(PeriphClkInit->UsbphyClockSelection));

    if (PeriphClkInit->UsbphyClockSelection == RCC_USBPHYCLKSOURCE_PLL4)
100077ca:	f507 7312 	add.w	r3, r7, #584	; 0x248
100077ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100077d2:	681b      	ldr	r3, [r3, #0]
100077d4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
100077d8:	2b01      	cmp	r3, #1
100077da:	d11d      	bne.n	10007818 <HAL_RCCEx_PeriphCLKConfig+0x14b0>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100077dc:	f507 7312 	add.w	r3, r7, #584	; 0x248
100077e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100077e4:	681b      	ldr	r3, [r3, #0]
100077e6:	3380      	adds	r3, #128	; 0x80
100077e8:	4618      	mov	r0, r3
100077ea:	f7fe fc65 	bl	100060b8 <RCCEx_PLL4_Config>
100077ee:	4603      	mov	r3, r0
100077f0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
100077f4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100077f8:	2b00      	cmp	r3, #0
100077fa:	d003      	beq.n	10007804 <HAL_RCCEx_PeriphCLKConfig+0x149c>
      {
        return status;
100077fc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007800:	f000 bc3c 	b.w	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB PHY Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10007804:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007808:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000780c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10007814:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_USBPHY_CONFIG(PeriphClkInit->UsbphyClockSelection);
10007818:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000781c:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
10007820:	f023 0103 	bic.w	r1, r3, #3
10007824:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007828:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000782c:	681b      	ldr	r3, [r3, #0]
1000782e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
10007832:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007836:	430b      	orrs	r3, r1
10007838:	f8c2 391c 	str.w	r3, [r2, #2332]	; 0x91c
  }

  /*---------------------------- USBO configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBO) ==
1000783c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007840:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007844:	681b      	ldr	r3, [r3, #0]
10007846:	e9d3 2300 	ldrd	r2, r3, [r3]
1000784a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
1000784e:	65bb      	str	r3, [r7, #88]	; 0x58
10007850:	2300      	movs	r3, #0
10007852:	65fb      	str	r3, [r7, #92]	; 0x5c
10007854:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
10007858:	460b      	mov	r3, r1
1000785a:	4313      	orrs	r3, r2
1000785c:	d037      	beq.n	100078ce <HAL_RCCEx_PeriphCLKConfig+0x1566>
      RCC_PERIPHCLK_USBO)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOCLKSOURCE(PeriphClkInit->UsboClockSelection));

    if (PeriphClkInit->UsboClockSelection == RCC_USBOCLKSOURCE_PLL4)
1000785e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007862:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007866:	681b      	ldr	r3, [r3, #0]
10007868:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
1000786c:	2b00      	cmp	r3, #0
1000786e:	d11c      	bne.n	100078aa <HAL_RCCEx_PeriphCLKConfig+0x1542>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007870:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007874:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007878:	681b      	ldr	r3, [r3, #0]
1000787a:	3380      	adds	r3, #128	; 0x80
1000787c:	4618      	mov	r0, r3
1000787e:	f7fe fc1b 	bl	100060b8 <RCCEx_PLL4_Config>
10007882:	4603      	mov	r3, r0
10007884:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10007888:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000788c:	2b00      	cmp	r3, #0
1000788e:	d002      	beq.n	10007896 <HAL_RCCEx_PeriphCLKConfig+0x152e>
      {
        return status;
10007890:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007894:	e3f2      	b.n	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB OTG Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10007896:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000789a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000789e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100078a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100078a6:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_USBO_CONFIG(PeriphClkInit->UsboClockSelection);
100078aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100078ae:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
100078b2:	f023 0110 	bic.w	r1, r3, #16
100078b6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100078ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100078be:	681b      	ldr	r3, [r3, #0]
100078c0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
100078c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100078c8:	430b      	orrs	r3, r1
100078ca:	f8c2 391c 	str.w	r3, [r2, #2332]	; 0x91c
  }

  /*---------------------------- RNG1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG1) ==
100078ce:	f507 7312 	add.w	r3, r7, #584	; 0x248
100078d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100078d6:	681b      	ldr	r3, [r3, #0]
100078d8:	e9d3 2300 	ldrd	r2, r3, [r3]
100078dc:	2100      	movs	r1, #0
100078de:	6539      	str	r1, [r7, #80]	; 0x50
100078e0:	f003 0304 	and.w	r3, r3, #4
100078e4:	657b      	str	r3, [r7, #84]	; 0x54
100078e6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
100078ea:	460b      	mov	r3, r1
100078ec:	4313      	orrs	r3, r2
100078ee:	d037      	beq.n	10007960 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
      RCC_PERIPHCLK_RNG1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG1CLKSOURCE(PeriphClkInit->Rng1ClockSelection));

    if (PeriphClkInit->Rng1ClockSelection == RCC_RNG1CLKSOURCE_PLL4)
100078f0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100078f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100078f8:	681b      	ldr	r3, [r3, #0]
100078fa:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
100078fe:	2b01      	cmp	r3, #1
10007900:	d11c      	bne.n	1000793c <HAL_RCCEx_PeriphCLKConfig+0x15d4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007902:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007906:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000790a:	681b      	ldr	r3, [r3, #0]
1000790c:	3380      	adds	r3, #128	; 0x80
1000790e:	4618      	mov	r0, r3
10007910:	f7fe fbd2 	bl	100060b8 <RCCEx_PLL4_Config>
10007914:	4603      	mov	r3, r0
10007916:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
1000791a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000791e:	2b00      	cmp	r3, #0
10007920:	d002      	beq.n	10007928 <HAL_RCCEx_PeriphCLKConfig+0x15c0>
      {
        return status;
10007922:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007926:	e3a9      	b.n	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG1 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10007928:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000792c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007930:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10007938:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of RNG1 clock*/
    __HAL_RCC_RNG1_CONFIG(PeriphClkInit->Rng1ClockSelection);
1000793c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007940:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
10007944:	f023 0103 	bic.w	r1, r3, #3
10007948:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000794c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007950:	681b      	ldr	r3, [r3, #0]
10007952:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
10007956:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000795a:	430b      	orrs	r3, r1
1000795c:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
  }

  /*---------------------------- RNG2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG2) ==
10007960:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007964:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007968:	681b      	ldr	r3, [r3, #0]
1000796a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000796e:	2100      	movs	r1, #0
10007970:	64b9      	str	r1, [r7, #72]	; 0x48
10007972:	f003 0308 	and.w	r3, r3, #8
10007976:	64fb      	str	r3, [r7, #76]	; 0x4c
10007978:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
1000797c:	460b      	mov	r3, r1
1000797e:	4313      	orrs	r3, r2
10007980:	d037      	beq.n	100079f2 <HAL_RCCEx_PeriphCLKConfig+0x168a>
      RCC_PERIPHCLK_RNG2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG2CLKSOURCE(PeriphClkInit->Rng2ClockSelection));

    if (PeriphClkInit->Rng2ClockSelection == RCC_RNG2CLKSOURCE_PLL4)
10007982:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007986:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000798a:	681b      	ldr	r3, [r3, #0]
1000798c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
10007990:	2b01      	cmp	r3, #1
10007992:	d11c      	bne.n	100079ce <HAL_RCCEx_PeriphCLKConfig+0x1666>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007994:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007998:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000799c:	681b      	ldr	r3, [r3, #0]
1000799e:	3380      	adds	r3, #128	; 0x80
100079a0:	4618      	mov	r0, r3
100079a2:	f7fe fb89 	bl	100060b8 <RCCEx_PLL4_Config>
100079a6:	4603      	mov	r3, r0
100079a8:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
100079ac:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100079b0:	2b00      	cmp	r3, #0
100079b2:	d002      	beq.n	100079ba <HAL_RCCEx_PeriphCLKConfig+0x1652>
      {
        return status;
100079b4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100079b8:	e360      	b.n	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG2 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100079ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100079be:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100079c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100079c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100079ca:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of RNG2 clock*/
    __HAL_RCC_RNG2_CONFIG(PeriphClkInit->Rng2ClockSelection);
100079ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100079d2:	f8d3 3920 	ldr.w	r3, [r3, #2336]	; 0x920
100079d6:	f023 0103 	bic.w	r1, r3, #3
100079da:	f507 7312 	add.w	r3, r7, #584	; 0x248
100079de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100079e2:	681b      	ldr	r3, [r3, #0]
100079e4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
100079e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100079ec:	430b      	orrs	r3, r1
100079ee:	f8c2 3920 	str.w	r3, [r2, #2336]	; 0x920
  }

  /*---------------------------- STGEN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_STGEN) ==
100079f2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100079f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100079fa:	681b      	ldr	r3, [r3, #0]
100079fc:	e9d3 2300 	ldrd	r2, r3, [r3]
10007a00:	2100      	movs	r1, #0
10007a02:	6439      	str	r1, [r7, #64]	; 0x40
10007a04:	f003 0310 	and.w	r3, r3, #16
10007a08:	647b      	str	r3, [r7, #68]	; 0x44
10007a0a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
10007a0e:	460b      	mov	r3, r1
10007a10:	4313      	orrs	r3, r2
10007a12:	d011      	beq.n	10007a38 <HAL_RCCEx_PeriphCLKConfig+0x16d0>
      RCC_PERIPHCLK_STGEN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_STGENCLKSOURCE(PeriphClkInit->StgenClockSelection));

    __HAL_RCC_STGEN_CONFIG(PeriphClkInit->StgenClockSelection);
10007a14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007a18:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
10007a1c:	f023 0103 	bic.w	r1, r3, #3
10007a20:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007a24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007a28:	681b      	ldr	r3, [r3, #0]
10007a2a:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
10007a2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007a32:	430b      	orrs	r3, r1
10007a34:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  }

#if defined(DSI)
  /*---------------------------- DSI configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) ==
10007a38:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007a3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007a40:	681b      	ldr	r3, [r3, #0]
10007a42:	e9d3 2300 	ldrd	r2, r3, [r3]
10007a46:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
10007a4a:	63bb      	str	r3, [r7, #56]	; 0x38
10007a4c:	2300      	movs	r3, #0
10007a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
10007a50:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
10007a54:	460b      	mov	r3, r1
10007a56:	4313      	orrs	r3, r2
10007a58:	d037      	beq.n	10007aca <HAL_RCCEx_PeriphCLKConfig+0x1762>
      RCC_PERIPHCLK_DSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    if (PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL4)
10007a5a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007a5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007a62:	681b      	ldr	r3, [r3, #0]
10007a64:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
10007a68:	2b01      	cmp	r3, #1
10007a6a:	d11c      	bne.n	10007aa6 <HAL_RCCEx_PeriphCLKConfig+0x173e>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007a6c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007a70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007a74:	681b      	ldr	r3, [r3, #0]
10007a76:	3380      	adds	r3, #128	; 0x80
10007a78:	4618      	mov	r0, r3
10007a7a:	f7fe fb1d 	bl	100060b8 <RCCEx_PLL4_Config>
10007a7e:	4603      	mov	r3, r0
10007a80:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10007a84:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007a88:	2b00      	cmp	r3, #0
10007a8a:	d002      	beq.n	10007a92 <HAL_RCCEx_PeriphCLKConfig+0x172a>
      {
        return status;
10007a8c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007a90:	e2f4      	b.n	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable DSI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10007a92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007a96:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007a9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007a9e:	f043 0310 	orr.w	r3, r3, #16
10007aa2:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
10007aa6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007aaa:	f8d3 3924 	ldr.w	r3, [r3, #2340]	; 0x924
10007aae:	f023 0101 	bic.w	r1, r3, #1
10007ab2:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007ab6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007aba:	681b      	ldr	r3, [r3, #0]
10007abc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
10007ac0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007ac4:	430b      	orrs	r3, r1
10007ac6:	f8c2 3924 	str.w	r3, [r2, #2340]	; 0x924
  }
#endif /*DSI*/

  /*---------------------------- ADC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) ==
10007aca:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007ace:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007ad2:	681b      	ldr	r3, [r3, #0]
10007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
10007ad8:	f002 0308 	and.w	r3, r2, #8
10007adc:	633b      	str	r3, [r7, #48]	; 0x30
10007ade:	2300      	movs	r3, #0
10007ae0:	637b      	str	r3, [r7, #52]	; 0x34
10007ae2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
10007ae6:	460b      	mov	r3, r1
10007ae8:	4313      	orrs	r3, r2
10007aea:	d059      	beq.n	10007ba0 <HAL_RCCEx_PeriphCLKConfig+0x1838>
      RCC_PERIPHCLK_ADC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
10007aec:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007af0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007af4:	681b      	ldr	r3, [r3, #0]
10007af6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10007afa:	2b00      	cmp	r3, #0
10007afc:	d002      	beq.n	10007b04 <HAL_RCCEx_PeriphCLKConfig+0x179c>
10007afe:	2b02      	cmp	r3, #2
10007b00:	d01e      	beq.n	10007b40 <HAL_RCCEx_PeriphCLKConfig+0x17d8>
10007b02:	e03b      	b.n	10007b7c <HAL_RCCEx_PeriphCLKConfig+0x1814>
    {
      case RCC_ADCCLKSOURCE_PLL4: /* PLL4 is used as clock source for ADC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007b04:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007b08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007b0c:	681b      	ldr	r3, [r3, #0]
10007b0e:	3380      	adds	r3, #128	; 0x80
10007b10:	4618      	mov	r0, r3
10007b12:	f7fe fad1 	bl	100060b8 <RCCEx_PLL4_Config>
10007b16:	4603      	mov	r3, r0
10007b18:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007b1c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007b20:	2b00      	cmp	r3, #0
10007b22:	d002      	beq.n	10007b2a <HAL_RCCEx_PeriphCLKConfig+0x17c2>
        {
          return status;
10007b24:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007b28:	e2a8      	b.n	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10007b2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007b2e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007b32:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10007b3a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
10007b3e:	e01d      	b.n	10007b7c <HAL_RCCEx_PeriphCLKConfig+0x1814>

      case RCC_ADCCLKSOURCE_PLL3: /* PLL3 is used as clock source for ADC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10007b40:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007b44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007b48:	681b      	ldr	r3, [r3, #0]
10007b4a:	3344      	adds	r3, #68	; 0x44
10007b4c:	4618      	mov	r0, r3
10007b4e:	f7fe f949 	bl	10005de4 <RCCEx_PLL3_Config>
10007b52:	4603      	mov	r3, r0
10007b54:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007b58:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007b5c:	2b00      	cmp	r3, #0
10007b5e:	d002      	beq.n	10007b66 <HAL_RCCEx_PeriphCLKConfig+0x17fe>
        {
          return status;
10007b60:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007b64:	e28a      	b.n	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10007b66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007b6a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10007b6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007b72:	f043 0320 	orr.w	r3, r3, #32
10007b76:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10007b7a:	bf00      	nop
    }

    /* Set the source of ADC clock*/
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
10007b7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007b80:	f8d3 3928 	ldr.w	r3, [r3, #2344]	; 0x928
10007b84:	f023 0103 	bic.w	r1, r3, #3
10007b88:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007b8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007b90:	681b      	ldr	r3, [r3, #0]
10007b92:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10007b96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007b9a:	430b      	orrs	r3, r1
10007b9c:	f8c2 3928 	str.w	r3, [r2, #2344]	; 0x928
  }

  /*---------------------------- LPTIM45 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM45) ==
10007ba0:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007ba4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007ba8:	681b      	ldr	r3, [r3, #0]
10007baa:	e9d3 2300 	ldrd	r2, r3, [r3]
10007bae:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
10007bb2:	62bb      	str	r3, [r7, #40]	; 0x28
10007bb4:	2300      	movs	r3, #0
10007bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
10007bb8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
10007bbc:	460b      	mov	r3, r1
10007bbe:	4313      	orrs	r3, r2
10007bc0:	d058      	beq.n	10007c74 <HAL_RCCEx_PeriphCLKConfig+0x190c>
      RCC_PERIPHCLK_LPTIM45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM45CLKSOURCE(PeriphClkInit->Lptim45ClockSelection));

    switch (PeriphClkInit->Lptim45ClockSelection)
10007bc2:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007bc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007bca:	681b      	ldr	r3, [r3, #0]
10007bcc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10007bd0:	2b01      	cmp	r3, #1
10007bd2:	d01f      	beq.n	10007c14 <HAL_RCCEx_PeriphCLKConfig+0x18ac>
10007bd4:	2b02      	cmp	r3, #2
10007bd6:	d13b      	bne.n	10007c50 <HAL_RCCEx_PeriphCLKConfig+0x18e8>
    {
      case RCC_LPTIM45CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPTIM45 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10007bd8:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007bdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007be0:	681b      	ldr	r3, [r3, #0]
10007be2:	3344      	adds	r3, #68	; 0x44
10007be4:	4618      	mov	r0, r3
10007be6:	f7fe f8fd 	bl	10005de4 <RCCEx_PLL3_Config>
10007bea:	4603      	mov	r3, r0
10007bec:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007bf0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007bf4:	2b00      	cmp	r3, #0
10007bf6:	d002      	beq.n	10007bfe <HAL_RCCEx_PeriphCLKConfig+0x1896>
        {
          return status;
10007bf8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007bfc:	e23e      	b.n	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10007bfe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007c02:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10007c06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007c0a:	f043 0320 	orr.w	r3, r3, #32
10007c0e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10007c12:	e01d      	b.n	10007c50 <HAL_RCCEx_PeriphCLKConfig+0x18e8>

      case RCC_LPTIM45CLKSOURCE_PLL4: /* PLL4 is used as clock source for LPTIM45 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007c14:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007c18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007c1c:	681b      	ldr	r3, [r3, #0]
10007c1e:	3380      	adds	r3, #128	; 0x80
10007c20:	4618      	mov	r0, r3
10007c22:	f7fe fa49 	bl	100060b8 <RCCEx_PLL4_Config>
10007c26:	4603      	mov	r3, r0
10007c28:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007c2c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007c30:	2b00      	cmp	r3, #0
10007c32:	d002      	beq.n	10007c3a <HAL_RCCEx_PeriphCLKConfig+0x18d2>
        {
          return status;
10007c34:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007c38:	e220      	b.n	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10007c3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007c3e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007c42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007c46:	f043 0310 	orr.w	r3, r3, #16
10007c4a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10007c4e:	bf00      	nop
    }

    /* Set the source of LPTIM45 clock*/
    __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
10007c50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007c54:	f8d3 392c 	ldr.w	r3, [r3, #2348]	; 0x92c
10007c58:	f023 0207 	bic.w	r2, r3, #7
10007c5c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007c60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007c64:	681b      	ldr	r3, [r3, #0]
10007c66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10007c6a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10007c6e:	4313      	orrs	r3, r2
10007c70:	f8c1 392c 	str.w	r3, [r1, #2348]	; 0x92c
  }

  /*---------------------------- LPTIM23 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM23) ==
10007c74:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007c78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007c7c:	681b      	ldr	r3, [r3, #0]
10007c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
10007c82:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
10007c86:	623b      	str	r3, [r7, #32]
10007c88:	2300      	movs	r3, #0
10007c8a:	627b      	str	r3, [r7, #36]	; 0x24
10007c8c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
10007c90:	460b      	mov	r3, r1
10007c92:	4313      	orrs	r3, r2
10007c94:	d037      	beq.n	10007d06 <HAL_RCCEx_PeriphCLKConfig+0x199e>
      RCC_PERIPHCLK_LPTIM23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM23CLKSOURCE(PeriphClkInit->Lptim23ClockSelection));

    if (PeriphClkInit->Lptim23ClockSelection == RCC_LPTIM23CLKSOURCE_PLL4)
10007c96:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007c9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007c9e:	681b      	ldr	r3, [r3, #0]
10007ca0:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
10007ca4:	2b01      	cmp	r3, #1
10007ca6:	d11c      	bne.n	10007ce2 <HAL_RCCEx_PeriphCLKConfig+0x197a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007ca8:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007cac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007cb0:	681b      	ldr	r3, [r3, #0]
10007cb2:	3380      	adds	r3, #128	; 0x80
10007cb4:	4618      	mov	r0, r3
10007cb6:	f7fe f9ff 	bl	100060b8 <RCCEx_PLL4_Config>
10007cba:	4603      	mov	r3, r0
10007cbc:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10007cc0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007cc4:	2b00      	cmp	r3, #0
10007cc6:	d002      	beq.n	10007cce <HAL_RCCEx_PeriphCLKConfig+0x1966>
      {
        return status;
10007cc8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007ccc:	e1d6      	b.n	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10007cce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007cd2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007cd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007cda:	f043 0320 	orr.w	r3, r3, #32
10007cde:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of LPTIM23 clock*/
    __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
10007ce2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007ce6:	f8d3 3930 	ldr.w	r3, [r3, #2352]	; 0x930
10007cea:	f023 0207 	bic.w	r2, r3, #7
10007cee:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007cf2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007cf6:	681b      	ldr	r3, [r3, #0]
10007cf8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
10007cfc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10007d00:	4313      	orrs	r3, r2
10007d02:	f8c1 3930 	str.w	r3, [r1, #2352]	; 0x930
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) ==
10007d06:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007d0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007d0e:	681b      	ldr	r3, [r3, #0]
10007d10:	e9d3 2300 	ldrd	r2, r3, [r3]
10007d14:	f002 0340 	and.w	r3, r2, #64	; 0x40
10007d18:	61bb      	str	r3, [r7, #24]
10007d1a:	2300      	movs	r3, #0
10007d1c:	61fb      	str	r3, [r7, #28]
10007d1e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
10007d22:	460b      	mov	r3, r1
10007d24:	4313      	orrs	r3, r2
10007d26:	d058      	beq.n	10007dda <HAL_RCCEx_PeriphCLKConfig+0x1a72>
      RCC_PERIPHCLK_LPTIM1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
10007d28:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007d2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007d30:	681b      	ldr	r3, [r3, #0]
10007d32:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
10007d36:	2b01      	cmp	r3, #1
10007d38:	d01f      	beq.n	10007d7a <HAL_RCCEx_PeriphCLKConfig+0x1a12>
10007d3a:	2b02      	cmp	r3, #2
10007d3c:	d13b      	bne.n	10007db6 <HAL_RCCEx_PeriphCLKConfig+0x1a4e>
    {
      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10007d3e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007d42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007d46:	681b      	ldr	r3, [r3, #0]
10007d48:	3344      	adds	r3, #68	; 0x44
10007d4a:	4618      	mov	r0, r3
10007d4c:	f7fe f84a 	bl	10005de4 <RCCEx_PLL3_Config>
10007d50:	4603      	mov	r3, r0
10007d52:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007d56:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007d5a:	2b00      	cmp	r3, #0
10007d5c:	d002      	beq.n	10007d64 <HAL_RCCEx_PeriphCLKConfig+0x19fc>
        {
          return status;
10007d5e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007d62:	e18b      	b.n	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10007d64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007d68:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10007d6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007d70:	f043 0320 	orr.w	r3, r3, #32
10007d74:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10007d78:	e01d      	b.n	10007db6 <HAL_RCCEx_PeriphCLKConfig+0x1a4e>

      case RCC_LPTIM1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for LPTIM1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007d7a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007d7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007d82:	681b      	ldr	r3, [r3, #0]
10007d84:	3380      	adds	r3, #128	; 0x80
10007d86:	4618      	mov	r0, r3
10007d88:	f7fe f996 	bl	100060b8 <RCCEx_PLL4_Config>
10007d8c:	4603      	mov	r3, r0
10007d8e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007d92:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007d96:	2b00      	cmp	r3, #0
10007d98:	d002      	beq.n	10007da0 <HAL_RCCEx_PeriphCLKConfig+0x1a38>
        {
          return status;
10007d9a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007d9e:	e16d      	b.n	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10007da0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007da4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007da8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007dac:	f043 0310 	orr.w	r3, r3, #16
10007db0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10007db4:	bf00      	nop
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
10007db6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007dba:	f8d3 3934 	ldr.w	r3, [r3, #2356]	; 0x934
10007dbe:	f023 0207 	bic.w	r2, r3, #7
10007dc2:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007dc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007dca:	681b      	ldr	r3, [r3, #0]
10007dcc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
10007dd0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10007dd4:	4313      	orrs	r3, r2
10007dd6:	f8c1 3934 	str.w	r3, [r1, #2356]	; 0x934
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) ==
10007dda:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007dde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007de2:	681b      	ldr	r3, [r3, #0]
10007de4:	e9d3 2300 	ldrd	r2, r3, [r3]
10007de8:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
10007dec:	613b      	str	r3, [r7, #16]
10007dee:	2300      	movs	r3, #0
10007df0:	617b      	str	r3, [r7, #20]
10007df2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
10007df6:	460b      	mov	r3, r1
10007df8:	4313      	orrs	r3, r2
10007dfa:	f000 80c6 	beq.w	10007f8a <HAL_RCCEx_PeriphCLKConfig+0x1c22>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
10007dfe:	4ba2      	ldr	r3, [pc, #648]	; (10008088 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
10007e00:	681b      	ldr	r3, [r3, #0]
10007e02:	4aa1      	ldr	r2, [pc, #644]	; (10008088 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
10007e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10007e08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
10007e0a:	f7f9 fe13 	bl	10001a34 <HAL_GetTick>
10007e0e:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10007e12:	e00a      	b.n	10007e2a <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10007e14:	f7f9 fe0e 	bl	10001a34 <HAL_GetTick>
10007e18:	4602      	mov	r2, r0
10007e1a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
10007e1e:	1ad3      	subs	r3, r2, r3
10007e20:	2b64      	cmp	r3, #100	; 0x64
10007e22:	d902      	bls.n	10007e2a <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
      {
        ret = HAL_TIMEOUT;
10007e24:	2303      	movs	r3, #3
10007e26:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10007e2a:	4b97      	ldr	r3, [pc, #604]	; (10008088 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
10007e2c:	681b      	ldr	r3, [r3, #0]
10007e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
10007e32:	2b00      	cmp	r3, #0
10007e34:	d0ee      	beq.n	10007e14 <HAL_RCCEx_PeriphCLKConfig+0x1aac>
      }
    }

    if (ret == HAL_OK)
10007e36:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
10007e3a:	2b00      	cmp	r3, #0
10007e3c:	f040 80a2 	bne.w	10007f84 <HAL_RCCEx_PeriphCLKConfig+0x1c1c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSRC) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSRC))
10007e40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007e44:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
10007e48:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007e4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007e50:	681b      	ldr	r3, [r3, #0]
10007e52:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
10007e56:	4053      	eors	r3, r2
10007e58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
10007e5c:	2b00      	cmp	r3, #0
10007e5e:	f000 8086 	beq.w	10007f6e <HAL_RCCEx_PeriphCLKConfig+0x1c06>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSRC));
10007e62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007e66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10007e6a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
10007e6e:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
10007e72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007e76:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10007e7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007e7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
10007e82:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        __HAL_RCC_BACKUPRESET_RELEASE();
10007e86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007e8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10007e8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007e92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
10007e96:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

        /* Set the LSEDrive value */
        __HAL_RCC_LSEDRIVE_CONFIG(tmpreg & RCC_BDCR_LSEDRV);
10007e9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007e9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10007ea2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
10007ea6:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
10007eaa:	f003 0330 	and.w	r3, r3, #48	; 0x30
10007eae:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10007eb2:	4313      	orrs	r3, r2
10007eb4:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

        /* RCC_BDCR_LSEON can be enabled for RTC or another IP, re-enable it */
        RCC_OscInitTypeDef RCC_OscInitStructure;
        /* Configure LSE Oscillator*/
        RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_LSE;
10007eb8:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007ebc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
10007ec0:	2204      	movs	r2, #4
10007ec2:	601a      	str	r2, [r3, #0]
        RCC_OscInitStructure.LSEState = (tmpreg & LSE_MASK);
10007ec4:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
10007ec8:	f003 020b 	and.w	r2, r3, #11
10007ecc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007ed0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
10007ed4:	609a      	str	r2, [r3, #8]

        RCC_OscInitStructure.PLL.PLLState = RCC_PLL_NONE;
10007ed6:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007eda:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
10007ede:	2200      	movs	r2, #0
10007ee0:	625a      	str	r2, [r3, #36]	; 0x24
        RCC_OscInitStructure.PLL2.PLLState = RCC_PLL_NONE;
10007ee2:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007ee6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
10007eea:	2200      	movs	r2, #0
10007eec:	661a      	str	r2, [r3, #96]	; 0x60
        RCC_OscInitStructure.PLL3.PLLState = RCC_PLL_NONE;
10007eee:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007ef2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
10007ef6:	2200      	movs	r2, #0
10007ef8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        RCC_OscInitStructure.PLL4.PLLState = RCC_PLL_NONE;
10007efc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007f00:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
10007f04:	2200      	movs	r2, #0
10007f06:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
        ret = HAL_RCC_OscConfig(&RCC_OscInitStructure);
10007f0a:	f507 7390 	add.w	r3, r7, #288	; 0x120
10007f0e:	4618      	mov	r0, r3
10007f10:	f7fc f90e 	bl	10004130 <HAL_RCC_OscConfig>
10007f14:	4603      	mov	r3, r0
10007f16:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
        if (ret != HAL_OK)
10007f1a:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
10007f1e:	2b00      	cmp	r3, #0
10007f20:	d002      	beq.n	10007f28 <HAL_RCCEx_PeriphCLKConfig+0x1bc0>
        {
          return ret;
10007f22:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
10007f26:	e0a9      	b.n	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }

        /* Write the RTCSRC */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
10007f28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007f2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10007f30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
10007f34:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007f38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007f3c:	681b      	ldr	r3, [r3, #0]
10007f3e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
10007f42:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10007f46:	4313      	orrs	r3, r2
10007f48:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

        /* Fill up Reserved register mask for BDCR
         * All already filled up or what shouldn't be modified must be put on the mask */
        RESERVED_BDCR_MASK = ~(RCC_BDCR_VSWRST | RCC_BDCR_RTCCKEN | RCC_BDCR_RTCSRC |
10007f4c:	4b4f      	ldr	r3, [pc, #316]	; (1000808c <HAL_RCCEx_PeriphCLKConfig+0x1d24>)
10007f4e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
                               RCC_BDCR_LSECSSD | RCC_BDCR_LSEDRV | RCC_BDCR_DIGBYP |
                               RCC_BDCR_LSERDY | RCC_BDCR_LSEBYP | RCC_BDCR_LSEON);

        /* Restore the BDCR context: RESERVED registers plus RCC_BDCR_LSECSSON */
        WRITE_REG(RCC->BDCR, (READ_REG(RCC->BDCR) | (tmpreg & RESERVED_BDCR_MASK)));
10007f52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007f56:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
10007f5a:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
10007f5e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
10007f62:	400b      	ands	r3, r1
10007f64:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10007f68:	4313      	orrs	r3, r2
10007f6a:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

      }/* End RTCSRC changed */

      /*Enable RTC clock   */
      __HAL_RCC_RTC_ENABLE();
10007f6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007f72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10007f76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007f7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
10007f7e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
10007f82:	e002      	b.n	10007f8a <HAL_RCCEx_PeriphCLKConfig+0x1c22>
    }
    else
    {
      // Enable write access to Backup domain failed
      /* return the error */
      return ret;
10007f84:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
10007f88:	e078      	b.n	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    }
  }

  /*---------------------------- TIMG1 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG1) ==
10007f8a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007f8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007f92:	681b      	ldr	r3, [r3, #0]
10007f94:	e9d3 2300 	ldrd	r2, r3, [r3]
10007f98:	f402 6380 	and.w	r3, r2, #1024	; 0x400
10007f9c:	60bb      	str	r3, [r7, #8]
10007f9e:	2300      	movs	r3, #0
10007fa0:	60fb      	str	r3, [r7, #12]
10007fa2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
10007fa6:	460b      	mov	r3, r1
10007fa8:	4313      	orrs	r3, r2
10007faa:	d02a      	beq.n	10008002 <HAL_RCCEx_PeriphCLKConfig+0x1c9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection);
10007fac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007fb0:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
10007fb4:	f023 0201 	bic.w	r2, r3, #1
10007fb8:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007fbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007fc0:	681b      	ldr	r3, [r3, #0]
10007fc2:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
10007fc6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10007fca:	4313      	orrs	r3, r2
10007fcc:	f8c1 3828 	str.w	r3, [r1, #2088]	; 0x828

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10007fd0:	f7f9 fd30 	bl	10001a34 <HAL_GetTick>
10007fd4:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
10007fd8:	e00a      	b.n	10007ff0 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10007fda:	f7f9 fd2b 	bl	10001a34 <HAL_GetTick>
10007fde:	4602      	mov	r2, r0
10007fe0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
10007fe4:	1ad3      	subs	r3, r2, r3
10007fe6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10007fea:	d901      	bls.n	10007ff0 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
      {
        return HAL_TIMEOUT;
10007fec:	2303      	movs	r3, #3
10007fee:	e045      	b.n	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
10007ff0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007ff4:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
10007ff8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10007ffc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10008000:	d1eb      	bne.n	10007fda <HAL_RCCEx_PeriphCLKConfig+0x1c72>
      }
    }
  }

  /*---------------------------- TIMG2 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG2) ==
10008002:	f507 7312 	add.w	r3, r7, #584	; 0x248
10008006:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000800a:	681b      	ldr	r3, [r3, #0]
1000800c:	e9d3 2300 	ldrd	r2, r3, [r3]
10008010:	f402 6300 	and.w	r3, r2, #2048	; 0x800
10008014:	603b      	str	r3, [r7, #0]
10008016:	2300      	movs	r3, #0
10008018:	607b      	str	r3, [r7, #4]
1000801a:	e9d7 1200 	ldrd	r1, r2, [r7]
1000801e:	460b      	mov	r3, r1
10008020:	4313      	orrs	r3, r2
10008022:	d02a      	beq.n	1000807a <HAL_RCCEx_PeriphCLKConfig+0x1d12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection);
10008024:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008028:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
1000802c:	f023 0201 	bic.w	r2, r3, #1
10008030:	f507 7312 	add.w	r3, r7, #584	; 0x248
10008034:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10008038:	681b      	ldr	r3, [r3, #0]
1000803a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
1000803e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10008042:	4313      	orrs	r3, r2
10008044:	f8c1 382c 	str.w	r3, [r1, #2092]	; 0x82c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10008048:	f7f9 fcf4 	bl	10001a34 <HAL_GetTick>
1000804c:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
10008050:	e00a      	b.n	10008068 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10008052:	f7f9 fcef 	bl	10001a34 <HAL_GetTick>
10008056:	4602      	mov	r2, r0
10008058:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
1000805c:	1ad3      	subs	r3, r2, r3
1000805e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10008062:	d901      	bls.n	10008068 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
      {
        return HAL_TIMEOUT;
10008064:	2303      	movs	r3, #3
10008066:	e009      	b.n	1000807c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
10008068:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000806c:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
10008070:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10008074:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10008078:	d1eb      	bne.n	10008052 <HAL_RCCEx_PeriphCLKConfig+0x1cea>
      }
    }
  }

  return HAL_OK;
1000807a:	2300      	movs	r3, #0
}
1000807c:	4618      	mov	r0, r3
1000807e:	f507 7712 	add.w	r7, r7, #584	; 0x248
10008082:	46bd      	mov	sp, r7
10008084:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
10008088:	50001000 	.word	0x50001000
1000808c:	7fecfdc0 	.word	0x7fecfdc0

10008090 <HAL_RCCEx_GetPeriphCLKFreq>:
  *          @ref RCCEx_Periph_Clock_Selection
  *          @ref RCCEx_Periph_One_Clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
10008090:	b590      	push	{r4, r7, lr}
10008092:	b08f      	sub	sp, #60	; 0x3c
10008094:	af00      	add	r7, sp, #0
10008096:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t frequency = 0, clksource = 0;
1000809a:	2100      	movs	r1, #0
1000809c:	6379      	str	r1, [r7, #52]	; 0x34
1000809e:	2100      	movs	r1, #0
100080a0:	6339      	str	r1, [r7, #48]	; 0x30
  PLL4_ClocksTypeDef pll4_clocks;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk) || IS_RCC_PERIPHONECLOCK(PeriphClk));

  switch (PeriphClk)
100080a2:	e9d7 0100 	ldrd	r0, r1, [r7]
100080a6:	f5a1 4480 	sub.w	r4, r1, #16384	; 0x4000
100080aa:	ea50 0104 	orrs.w	r1, r0, r4
100080ae:	f000 82cb 	beq.w	10008648 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
100080b2:	e9d7 0100 	ldrd	r0, r1, [r7]
100080b6:	2801      	cmp	r0, #1
100080b8:	f571 4180 	sbcs.w	r1, r1, #16384	; 0x4000
100080bc:	f081 82af 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100080c0:	e9d7 0100 	ldrd	r0, r1, [r7]
100080c4:	f5a1 5400 	sub.w	r4, r1, #8192	; 0x2000
100080c8:	ea50 0104 	orrs.w	r1, r0, r4
100080cc:	f001 80f1 	beq.w	100092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
100080d0:	e9d7 0100 	ldrd	r0, r1, [r7]
100080d4:	2801      	cmp	r0, #1
100080d6:	f571 5100 	sbcs.w	r1, r1, #8192	; 0x2000
100080da:	f081 82a0 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100080de:	e9d7 0100 	ldrd	r0, r1, [r7]
100080e2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
100080e6:	ea50 0104 	orrs.w	r1, r0, r4
100080ea:	f000 8738 	beq.w	10008f5e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
100080ee:	e9d7 0100 	ldrd	r0, r1, [r7]
100080f2:	2801      	cmp	r0, #1
100080f4:	f571 5180 	sbcs.w	r1, r1, #4096	; 0x1000
100080f8:	f081 8291 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100080fc:	e9d7 0100 	ldrd	r0, r1, [r7]
10008100:	f5a1 6400 	sub.w	r4, r1, #2048	; 0x800
10008104:	ea50 0104 	orrs.w	r1, r0, r4
10008108:	f000 872d 	beq.w	10008f66 <HAL_RCCEx_GetPeriphCLKFreq+0xed6>
1000810c:	e9d7 0100 	ldrd	r0, r1, [r7]
10008110:	2801      	cmp	r0, #1
10008112:	f571 6100 	sbcs.w	r1, r1, #2048	; 0x800
10008116:	f081 8282 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000811a:	e9d7 0100 	ldrd	r0, r1, [r7]
1000811e:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
10008122:	ea50 0104 	orrs.w	r1, r0, r4
10008126:	f000 875e 	beq.w	10008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xf56>
1000812a:	e9d7 0100 	ldrd	r0, r1, [r7]
1000812e:	2801      	cmp	r0, #1
10008130:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
10008134:	f081 8273 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008138:	e9d7 0100 	ldrd	r0, r1, [r7]
1000813c:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
10008140:	ea50 0104 	orrs.w	r1, r0, r4
10008144:	f000 86bf 	beq.w	10008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xe36>
10008148:	e9d7 0100 	ldrd	r0, r1, [r7]
1000814c:	2801      	cmp	r0, #1
1000814e:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
10008152:	f081 8264 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008156:	e9d7 0100 	ldrd	r0, r1, [r7]
1000815a:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
1000815e:	ea50 0104 	orrs.w	r1, r0, r4
10008162:	f000 845c 	beq.w	10008a1e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
10008166:	e9d7 0100 	ldrd	r0, r1, [r7]
1000816a:	2801      	cmp	r0, #1
1000816c:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
10008170:	f081 8255 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008174:	e9d7 0100 	ldrd	r0, r1, [r7]
10008178:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
1000817c:	ea50 0104 	orrs.w	r1, r0, r4
10008180:	f000 86bf 	beq.w	10008f02 <HAL_RCCEx_GetPeriphCLKFreq+0xe72>
10008184:	e9d7 0100 	ldrd	r0, r1, [r7]
10008188:	2801      	cmp	r0, #1
1000818a:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
1000818e:	f081 8246 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008192:	e9d7 0100 	ldrd	r0, r1, [r7]
10008196:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
1000819a:	ea50 0104 	orrs.w	r1, r0, r4
1000819e:	f000 824e 	beq.w	1000863e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
100081a2:	e9d7 0100 	ldrd	r0, r1, [r7]
100081a6:	2801      	cmp	r0, #1
100081a8:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
100081ac:	f081 8237 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100081b0:	e9d7 0100 	ldrd	r0, r1, [r7]
100081b4:	f1a1 0420 	sub.w	r4, r1, #32
100081b8:	ea50 0104 	orrs.w	r1, r0, r4
100081bc:	f000 8722 	beq.w	10009004 <HAL_RCCEx_GetPeriphCLKFreq+0xf74>
100081c0:	e9d7 0100 	ldrd	r0, r1, [r7]
100081c4:	2801      	cmp	r0, #1
100081c6:	f171 0120 	sbcs.w	r1, r1, #32
100081ca:	f081 8228 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100081ce:	e9d7 0100 	ldrd	r0, r1, [r7]
100081d2:	f1a1 0410 	sub.w	r4, r1, #16
100081d6:	ea50 0104 	orrs.w	r1, r0, r4
100081da:	f000 87c9 	beq.w	10009170 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
100081de:	e9d7 0100 	ldrd	r0, r1, [r7]
100081e2:	2801      	cmp	r0, #1
100081e4:	f171 0110 	sbcs.w	r1, r1, #16
100081e8:	f081 8219 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100081ec:	e9d7 0100 	ldrd	r0, r1, [r7]
100081f0:	f1a1 0408 	sub.w	r4, r1, #8
100081f4:	ea50 0104 	orrs.w	r1, r0, r4
100081f8:	f001 80e8 	beq.w	100093cc <HAL_RCCEx_GetPeriphCLKFreq+0x133c>
100081fc:	e9d7 0100 	ldrd	r0, r1, [r7]
10008200:	2801      	cmp	r0, #1
10008202:	f171 0108 	sbcs.w	r1, r1, #8
10008206:	f081 820a 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000820a:	e9d7 0100 	ldrd	r0, r1, [r7]
1000820e:	1f0c      	subs	r4, r1, #4
10008210:	ea50 0104 	orrs.w	r1, r0, r4
10008214:	f001 8104 	beq.w	10009420 <HAL_RCCEx_GetPeriphCLKFreq+0x1390>
10008218:	e9d7 0100 	ldrd	r0, r1, [r7]
1000821c:	2801      	cmp	r0, #1
1000821e:	f171 0104 	sbcs.w	r1, r1, #4
10008222:	f081 81fc 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008226:	e9d7 0100 	ldrd	r0, r1, [r7]
1000822a:	1e8c      	subs	r4, r1, #2
1000822c:	ea50 0104 	orrs.w	r1, r0, r4
10008230:	f000 87ee 	beq.w	10009210 <HAL_RCCEx_GetPeriphCLKFreq+0x1180>
10008234:	e9d7 0100 	ldrd	r0, r1, [r7]
10008238:	2801      	cmp	r0, #1
1000823a:	f171 0102 	sbcs.w	r1, r1, #2
1000823e:	f081 81ee 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008242:	e9d7 0100 	ldrd	r0, r1, [r7]
10008246:	1e4c      	subs	r4, r1, #1
10008248:	ea50 0104 	orrs.w	r1, r0, r4
1000824c:	f001 8053 	beq.w	100092f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
10008250:	e9d7 0100 	ldrd	r0, r1, [r7]
10008254:	2801      	cmp	r0, #1
10008256:	f171 0101 	sbcs.w	r1, r1, #1
1000825a:	f081 81e0 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000825e:	e9d7 0100 	ldrd	r0, r1, [r7]
10008262:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
10008266:	4321      	orrs	r1, r4
10008268:	f001 8104 	beq.w	10009474 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
1000826c:	e9d7 0100 	ldrd	r0, r1, [r7]
10008270:	4cbd      	ldr	r4, [pc, #756]	; (10008568 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>)
10008272:	42a0      	cmp	r0, r4
10008274:	f171 0100 	sbcs.w	r1, r1, #0
10008278:	f081 81d1 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000827c:	e9d7 0100 	ldrd	r0, r1, [r7]
10008280:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
10008284:	4321      	orrs	r1, r4
10008286:	f000 85e3 	beq.w	10008e50 <HAL_RCCEx_GetPeriphCLKFreq+0xdc0>
1000828a:	e9d7 0100 	ldrd	r0, r1, [r7]
1000828e:	4cb7      	ldr	r4, [pc, #732]	; (1000856c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
10008290:	42a0      	cmp	r0, r4
10008292:	f171 0100 	sbcs.w	r1, r1, #0
10008296:	f081 81c2 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000829a:	e9d7 0100 	ldrd	r0, r1, [r7]
1000829e:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
100082a2:	4321      	orrs	r1, r4
100082a4:	f000 86e1 	beq.w	1000906a <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
100082a8:	e9d7 0100 	ldrd	r0, r1, [r7]
100082ac:	4cb0      	ldr	r4, [pc, #704]	; (10008570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
100082ae:	42a0      	cmp	r0, r4
100082b0:	f171 0100 	sbcs.w	r1, r1, #0
100082b4:	f081 81b3 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100082b8:	e9d7 0100 	ldrd	r0, r1, [r7]
100082bc:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
100082c0:	4321      	orrs	r1, r4
100082c2:	f000 84db 	beq.w	10008c7c <HAL_RCCEx_GetPeriphCLKFreq+0xbec>
100082c6:	e9d7 0100 	ldrd	r0, r1, [r7]
100082ca:	4caa      	ldr	r4, [pc, #680]	; (10008574 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
100082cc:	42a0      	cmp	r0, r4
100082ce:	f171 0100 	sbcs.w	r1, r1, #0
100082d2:	f081 81a4 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100082d6:	e9d7 0100 	ldrd	r0, r1, [r7]
100082da:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
100082de:	4321      	orrs	r1, r4
100082e0:	f000 82b0 	beq.w	10008844 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
100082e4:	e9d7 0100 	ldrd	r0, r1, [r7]
100082e8:	4ca3      	ldr	r4, [pc, #652]	; (10008578 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
100082ea:	42a0      	cmp	r0, r4
100082ec:	f171 0100 	sbcs.w	r1, r1, #0
100082f0:	f081 8195 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100082f4:	e9d7 0100 	ldrd	r0, r1, [r7]
100082f8:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
100082fc:	4321      	orrs	r1, r4
100082fe:	f000 8481 	beq.w	10008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xb74>
10008302:	e9d7 0100 	ldrd	r0, r1, [r7]
10008306:	4c9d      	ldr	r4, [pc, #628]	; (1000857c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
10008308:	42a0      	cmp	r0, r4
1000830a:	f171 0100 	sbcs.w	r1, r1, #0
1000830e:	f081 8186 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008312:	e9d7 0100 	ldrd	r0, r1, [r7]
10008316:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
1000831a:	4321      	orrs	r1, r4
1000831c:	f000 8384 	beq.w	10008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
10008320:	e9d7 0100 	ldrd	r0, r1, [r7]
10008324:	4c96      	ldr	r4, [pc, #600]	; (10008580 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
10008326:	42a0      	cmp	r0, r4
10008328:	f171 0100 	sbcs.w	r1, r1, #0
1000832c:	f081 8177 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008330:	e9d7 0100 	ldrd	r0, r1, [r7]
10008334:	f100 447f 	add.w	r4, r0, #4278190080	; 0xff000000
10008338:	4321      	orrs	r1, r4
1000833a:	f000 8250 	beq.w	100087de <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
1000833e:	e9d7 0100 	ldrd	r0, r1, [r7]
10008342:	4c90      	ldr	r4, [pc, #576]	; (10008584 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
10008344:	42a0      	cmp	r0, r4
10008346:	f171 0100 	sbcs.w	r1, r1, #0
1000834a:	f081 8168 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000834e:	e9d7 0100 	ldrd	r0, r1, [r7]
10008352:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
10008356:	4321      	orrs	r1, r4
10008358:	f000 85b9 	beq.w	10008ece <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
1000835c:	e9d7 0100 	ldrd	r0, r1, [r7]
10008360:	4c89      	ldr	r4, [pc, #548]	; (10008588 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
10008362:	42a0      	cmp	r0, r4
10008364:	f171 0100 	sbcs.w	r1, r1, #0
10008368:	f081 8159 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000836c:	e9d7 0100 	ldrd	r0, r1, [r7]
10008370:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
10008374:	4321      	orrs	r1, r4
10008376:	f000 871a 	beq.w	100091ae <HAL_RCCEx_GetPeriphCLKFreq+0x111e>
1000837a:	e9d7 0100 	ldrd	r0, r1, [r7]
1000837e:	4c83      	ldr	r4, [pc, #524]	; (1000858c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
10008380:	42a0      	cmp	r0, r4
10008382:	f171 0100 	sbcs.w	r1, r1, #0
10008386:	f081 814a 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000838a:	e9d7 0100 	ldrd	r0, r1, [r7]
1000838e:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
10008392:	4321      	orrs	r1, r4
10008394:	f000 875e 	beq.w	10009254 <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
10008398:	e9d7 0100 	ldrd	r0, r1, [r7]
1000839c:	4c7c      	ldr	r4, [pc, #496]	; (10008590 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
1000839e:	42a0      	cmp	r0, r4
100083a0:	f171 0100 	sbcs.w	r1, r1, #0
100083a4:	f081 813b 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100083a8:	e9d7 0100 	ldrd	r0, r1, [r7]
100083ac:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
100083b0:	4321      	orrs	r1, r4
100083b2:	f000 8786 	beq.w	100092c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1232>
100083b6:	e9d7 0100 	ldrd	r0, r1, [r7]
100083ba:	4c76      	ldr	r4, [pc, #472]	; (10008594 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
100083bc:	42a0      	cmp	r0, r4
100083be:	f171 0100 	sbcs.w	r1, r1, #0
100083c2:	f081 812c 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100083c6:	e9d7 0100 	ldrd	r0, r1, [r7]
100083ca:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
100083ce:	4321      	orrs	r1, r4
100083d0:	f000 83dd 	beq.w	10008b8e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
100083d4:	e9d7 0100 	ldrd	r0, r1, [r7]
100083d8:	4c6f      	ldr	r4, [pc, #444]	; (10008598 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
100083da:	42a0      	cmp	r0, r4
100083dc:	f171 0100 	sbcs.w	r1, r1, #0
100083e0:	f081 811d 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100083e4:	e9d7 0100 	ldrd	r0, r1, [r7]
100083e8:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
100083ec:	4321      	orrs	r1, r4
100083ee:	f000 84f2 	beq.w	10008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
100083f2:	e9d7 0100 	ldrd	r0, r1, [r7]
100083f6:	4c69      	ldr	r4, [pc, #420]	; (1000859c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
100083f8:	42a0      	cmp	r0, r4
100083fa:	f171 0100 	sbcs.w	r1, r1, #0
100083fe:	f081 810e 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008402:	e9d7 0100 	ldrd	r0, r1, [r7]
10008406:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
1000840a:	4321      	orrs	r1, r4
1000840c:	f000 84af 	beq.w	10008d6e <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
10008410:	e9d7 0100 	ldrd	r0, r1, [r7]
10008414:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
10008418:	f171 0100 	sbcs.w	r1, r1, #0
1000841c:	f081 80ff 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008420:	e9d7 0100 	ldrd	r0, r1, [r7]
10008424:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
10008428:	4321      	orrs	r1, r4
1000842a:	f000 82b8 	beq.w	1000899e <HAL_RCCEx_GetPeriphCLKFreq+0x90e>
1000842e:	e9d7 0100 	ldrd	r0, r1, [r7]
10008432:	f248 0401 	movw	r4, #32769	; 0x8001
10008436:	42a0      	cmp	r0, r4
10008438:	f171 0100 	sbcs.w	r1, r1, #0
1000843c:	f081 80ef 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008440:	e9d7 0100 	ldrd	r0, r1, [r7]
10008444:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
10008448:	4321      	orrs	r1, r4
1000844a:	f000 8458 	beq.w	10008cfe <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
1000844e:	e9d7 0100 	ldrd	r0, r1, [r7]
10008452:	f244 0401 	movw	r4, #16385	; 0x4001
10008456:	42a0      	cmp	r0, r4
10008458:	f171 0100 	sbcs.w	r1, r1, #0
1000845c:	f081 80df 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008460:	e9d7 0100 	ldrd	r0, r1, [r7]
10008464:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
10008468:	4321      	orrs	r1, r4
1000846a:	f000 80f2 	beq.w	10008652 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
1000846e:	e9d7 0100 	ldrd	r0, r1, [r7]
10008472:	f242 0401 	movw	r4, #8193	; 0x2001
10008476:	42a0      	cmp	r0, r4
10008478:	f171 0100 	sbcs.w	r1, r1, #0
1000847c:	f081 80cf 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008480:	e9d7 0100 	ldrd	r0, r1, [r7]
10008484:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
10008488:	4321      	orrs	r1, r4
1000848a:	f000 8574 	beq.w	10008f76 <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
1000848e:	e9d7 0100 	ldrd	r0, r1, [r7]
10008492:	f241 0401 	movw	r4, #4097	; 0x1001
10008496:	42a0      	cmp	r0, r4
10008498:	f171 0100 	sbcs.w	r1, r1, #0
1000849c:	f081 80bf 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100084a0:	e9d7 0100 	ldrd	r0, r1, [r7]
100084a4:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
100084a8:	4321      	orrs	r1, r4
100084aa:	f001 8063 	beq.w	10009574 <HAL_RCCEx_GetPeriphCLKFreq+0x14e4>
100084ae:	e9d7 0100 	ldrd	r0, r1, [r7]
100084b2:	f640 0401 	movw	r4, #2049	; 0x801
100084b6:	42a0      	cmp	r0, r4
100084b8:	f171 0100 	sbcs.w	r1, r1, #0
100084bc:	f081 80af 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100084c0:	e9d7 0100 	ldrd	r0, r1, [r7]
100084c4:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
100084c8:	4321      	orrs	r1, r4
100084ca:	f001 800b 	beq.w	100094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1454>
100084ce:	e9d7 0100 	ldrd	r0, r1, [r7]
100084d2:	f240 4401 	movw	r4, #1025	; 0x401
100084d6:	42a0      	cmp	r0, r4
100084d8:	f171 0100 	sbcs.w	r1, r1, #0
100084dc:	f081 809f 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100084e0:	e9d7 0100 	ldrd	r0, r1, [r7]
100084e4:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
100084e8:	4321      	orrs	r1, r4
100084ea:	f000 8512 	beq.w	10008f12 <HAL_RCCEx_GetPeriphCLKFreq+0xe82>
100084ee:	e9d7 0100 	ldrd	r0, r1, [r7]
100084f2:	f240 2401 	movw	r4, #513	; 0x201
100084f6:	42a0      	cmp	r0, r4
100084f8:	f171 0100 	sbcs.w	r1, r1, #0
100084fc:	f081 808f 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008500:	e9d7 0100 	ldrd	r0, r1, [r7]
10008504:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
10008508:	4321      	orrs	r1, r4
1000850a:	f000 82ff 	beq.w	10008b0c <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
1000850e:	e9d7 0100 	ldrd	r0, r1, [r7]
10008512:	f240 1401 	movw	r4, #257	; 0x101
10008516:	42a0      	cmp	r0, r4
10008518:	f171 0100 	sbcs.w	r1, r1, #0
1000851c:	f081 807f 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008520:	e9d7 0100 	ldrd	r0, r1, [r7]
10008524:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
10008528:	4321      	orrs	r1, r4
1000852a:	f000 82b3 	beq.w	10008a94 <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
1000852e:	e9d7 0100 	ldrd	r0, r1, [r7]
10008532:	2881      	cmp	r0, #129	; 0x81
10008534:	f171 0100 	sbcs.w	r1, r1, #0
10008538:	f081 8071 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000853c:	e9d7 0100 	ldrd	r0, r1, [r7]
10008540:	2821      	cmp	r0, #33	; 0x21
10008542:	f171 0100 	sbcs.w	r1, r1, #0
10008546:	d271      	bcs.n	1000862c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
10008548:	e9d7 0100 	ldrd	r0, r1, [r7]
1000854c:	4301      	orrs	r1, r0
1000854e:	f001 8066 	beq.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008552:	e9d7 0100 	ldrd	r0, r1, [r7]
10008556:	1e42      	subs	r2, r0, #1
10008558:	f141 33ff 	adc.w	r3, r1, #4294967295
1000855c:	2a20      	cmp	r2, #32
1000855e:	f173 0100 	sbcs.w	r1, r3, #0
10008562:	f081 805c 	bcs.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008566:	e01b      	b.n	100085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
10008568:	80000001 	.word	0x80000001
1000856c:	40000001 	.word	0x40000001
10008570:	20000001 	.word	0x20000001
10008574:	10000001 	.word	0x10000001
10008578:	08000001 	.word	0x08000001
1000857c:	04000001 	.word	0x04000001
10008580:	02000001 	.word	0x02000001
10008584:	01000001 	.word	0x01000001
10008588:	00400001 	.word	0x00400001
1000858c:	00200001 	.word	0x00200001
10008590:	00100001 	.word	0x00100001
10008594:	00080001 	.word	0x00080001
10008598:	00040001 	.word	0x00040001
1000859c:	00020001 	.word	0x00020001
100085a0:	2a1f      	cmp	r2, #31
100085a2:	f201 803c 	bhi.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100085a6:	a101      	add	r1, pc, #4	; (adr r1, 100085ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
100085a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
100085ac:	100090ed 	.word	0x100090ed
100085b0:	100088bd 	.word	0x100088bd
100085b4:	1000961f 	.word	0x1000961f
100085b8:	1000892f 	.word	0x1000892f
100085bc:	1000961f 	.word	0x1000961f
100085c0:	1000961f 	.word	0x1000961f
100085c4:	1000961f 	.word	0x1000961f
100085c8:	10009375 	.word	0x10009375
100085cc:	1000961f 	.word	0x1000961f
100085d0:	1000961f 	.word	0x1000961f
100085d4:	1000961f 	.word	0x1000961f
100085d8:	1000961f 	.word	0x1000961f
100085dc:	1000961f 	.word	0x1000961f
100085e0:	1000961f 	.word	0x1000961f
100085e4:	1000961f 	.word	0x1000961f
100085e8:	1000869d 	.word	0x1000869d
100085ec:	1000961f 	.word	0x1000961f
100085f0:	1000961f 	.word	0x1000961f
100085f4:	1000961f 	.word	0x1000961f
100085f8:	1000961f 	.word	0x1000961f
100085fc:	1000961f 	.word	0x1000961f
10008600:	1000961f 	.word	0x1000961f
10008604:	1000961f 	.word	0x1000961f
10008608:	1000961f 	.word	0x1000961f
1000860c:	1000961f 	.word	0x1000961f
10008610:	1000961f 	.word	0x1000961f
10008614:	1000961f 	.word	0x1000961f
10008618:	1000961f 	.word	0x1000961f
1000861c:	1000961f 	.word	0x1000961f
10008620:	1000961f 	.word	0x1000961f
10008624:	1000961f 	.word	0x1000961f
10008628:	100086ff 	.word	0x100086ff
1000862c:	e9d7 2300 	ldrd	r2, r3, [r7]
10008630:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
10008634:	430b      	orrs	r3, r1
10008636:	f000 8094 	beq.w	10008762 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
1000863a:	f000 bff0 	b.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
  {

    case RCC_PERIPHCLK_DAC:
    {
      frequency = LSI_VALUE;
1000863e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10008642:	637b      	str	r3, [r7, #52]	; 0x34
    }
      break; /*RCC_PERIPHCLK_DAC*/
10008644:	f000 bfeb 	b.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_WWDG:
    {
      frequency = HAL_RCC_GetPCLK1Freq();
10008648:	f7fd f8c6 	bl	100057d8 <HAL_RCC_GetPCLK1Freq>
1000864c:	6378      	str	r0, [r7, #52]	; 0x34
    }
      break; /* RCC_PERIPHCLK_WWDG */
1000864e:	f000 bfe6 	b.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_CEC:
    {
      clksource = __HAL_RCC_GET_CEC_SOURCE();
10008652:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008656:	f8d3 3918 	ldr.w	r3, [r3, #2328]	; 0x918
1000865a:	f003 0303 	and.w	r3, r3, #3
1000865e:	633b      	str	r3, [r7, #48]	; 0x30
10008660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008662:	2b02      	cmp	r3, #2
10008664:	d011      	beq.n	1000868a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
10008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008668:	2b02      	cmp	r3, #2
1000866a:	d812      	bhi.n	10008692 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
1000866c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000866e:	2b00      	cmp	r3, #0
10008670:	d003      	beq.n	1000867a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
10008672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008674:	2b01      	cmp	r3, #1
10008676:	d004      	beq.n	10008682 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
10008678:	e00b      	b.n	10008692 <HAL_RCCEx_GetPeriphCLKFreq+0x602>

      switch (clksource)
      {
        case RCC_CECCLKSOURCE_LSE:
          frequency = LSE_VALUE;
1000867a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
1000867e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008680:	e00a      	b.n	10008698 <HAL_RCCEx_GetPeriphCLKFreq+0x608>

        case RCC_CECCLKSOURCE_LSI:
          frequency = LSI_VALUE;
10008682:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10008686:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008688:	e006      	b.n	10008698 <HAL_RCCEx_GetPeriphCLKFreq+0x608>

        case RCC_CECCLKSOURCE_CSI122:
          frequency = (CSI_VALUE / 122);
1000868a:	f248 0312 	movw	r3, #32786	; 0x8012
1000868e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008690:	e002      	b.n	10008698 <HAL_RCCEx_GetPeriphCLKFreq+0x608>

        default:
          frequency = 0;
10008692:	2300      	movs	r3, #0
10008694:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008696:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_CEC */
10008698:	f000 bfc1 	b.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_I2C12:
    {
      clksource = __HAL_RCC_GET_I2C12_SOURCE();
1000869c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100086a0:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	; 0x8c0
100086a4:	f003 0307 	and.w	r3, r3, #7
100086a8:	633b      	str	r3, [r7, #48]	; 0x30
100086aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100086ac:	2b03      	cmp	r3, #3
100086ae:	f200 87a7 	bhi.w	10009600 <HAL_RCCEx_GetPeriphCLKFreq+0x1570>
100086b2:	a201      	add	r2, pc, #4	; (adr r2, 100086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x628>)
100086b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100086b8:	100086c9 	.word	0x100086c9
100086bc:	100086d1 	.word	0x100086d1
100086c0:	100086e1 	.word	0x100086e1
100086c4:	100086f5 	.word	0x100086f5

      switch (clksource)
      {
        case RCC_I2C12CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
100086c8:	f7fd f886 	bl	100057d8 <HAL_RCC_GetPCLK1Freq>
100086cc:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100086ce:	e014      	b.n	100086fa <HAL_RCCEx_GetPeriphCLKFreq+0x66a>

        case RCC_I2C12CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100086d0:	f107 030c 	add.w	r3, r7, #12
100086d4:	4618      	mov	r0, r3
100086d6:	f7fc ff77 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
100086da:	697b      	ldr	r3, [r7, #20]
100086dc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100086de:	e00c      	b.n	100086fa <HAL_RCCEx_GetPeriphCLKFreq+0x66a>

        case RCC_I2C12CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100086e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100086e4:	699b      	ldr	r3, [r3, #24]
100086e6:	f003 0303 	and.w	r3, r3, #3
100086ea:	4ab8      	ldr	r2, [pc, #736]	; (100089cc <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
100086ec:	fa22 f303 	lsr.w	r3, r2, r3
100086f0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100086f2:	e002      	b.n	100086fa <HAL_RCCEx_GetPeriphCLKFreq+0x66a>

        case RCC_I2C12CLKSOURCE_CSI:
          frequency = CSI_VALUE;
100086f4:	4bb6      	ldr	r3, [pc, #728]	; (100089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
100086f6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100086f8:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_I2C12 */
100086fa:	f000 bf81 	b.w	10009600 <HAL_RCCEx_GetPeriphCLKFreq+0x1570>


    case RCC_PERIPHCLK_I2C35:
    {
      clksource = __HAL_RCC_GET_I2C35_SOURCE();
100086fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008702:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	; 0x8c4
10008706:	f003 0307 	and.w	r3, r3, #7
1000870a:	633b      	str	r3, [r7, #48]	; 0x30
1000870c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000870e:	2b03      	cmp	r3, #3
10008710:	f200 8778 	bhi.w	10009604 <HAL_RCCEx_GetPeriphCLKFreq+0x1574>
10008714:	a201      	add	r2, pc, #4	; (adr r2, 1000871c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
10008716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000871a:	bf00      	nop
1000871c:	1000872d 	.word	0x1000872d
10008720:	10008735 	.word	0x10008735
10008724:	10008745 	.word	0x10008745
10008728:	10008759 	.word	0x10008759

      switch (clksource)
      {
        case RCC_I2C35CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
1000872c:	f7fd f854 	bl	100057d8 <HAL_RCC_GetPCLK1Freq>
10008730:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008732:	e014      	b.n	1000875e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>

        case RCC_I2C35CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008734:	f107 030c 	add.w	r3, r7, #12
10008738:	4618      	mov	r0, r3
1000873a:	f7fc ff45 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
1000873e:	697b      	ldr	r3, [r7, #20]
10008740:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008742:	e00c      	b.n	1000875e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>

        case RCC_I2C35CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008744:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008748:	699b      	ldr	r3, [r3, #24]
1000874a:	f003 0303 	and.w	r3, r3, #3
1000874e:	4a9f      	ldr	r2, [pc, #636]	; (100089cc <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
10008750:	fa22 f303 	lsr.w	r3, r2, r3
10008754:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008756:	e002      	b.n	1000875e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>

        case RCC_I2C35CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008758:	4b9d      	ldr	r3, [pc, #628]	; (100089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
1000875a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000875c:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_I2C35 */
1000875e:	f000 bf51 	b.w	10009604 <HAL_RCCEx_GetPeriphCLKFreq+0x1574>


    case RCC_PERIPHCLK_LPTIM1:
    {
      clksource = __HAL_RCC_GET_LPTIM1_SOURCE();
10008762:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008766:	f8d3 3934 	ldr.w	r3, [r3, #2356]	; 0x934
1000876a:	f003 0307 	and.w	r3, r3, #7
1000876e:	633b      	str	r3, [r7, #48]	; 0x30
10008770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008772:	2b05      	cmp	r3, #5
10008774:	d82e      	bhi.n	100087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
10008776:	a201      	add	r2, pc, #4	; (adr r2, 1000877c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
10008778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000877c:	10008795 	.word	0x10008795
10008780:	1000879d 	.word	0x1000879d
10008784:	100087ad 	.word	0x100087ad
10008788:	100087bd 	.word	0x100087bd
1000878c:	100087c5 	.word	0x100087c5
10008790:	100087cd 	.word	0x100087cd

      switch (clksource)
      {
        case RCC_LPTIM1CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
10008794:	f7fd f820 	bl	100057d8 <HAL_RCC_GetPCLK1Freq>
10008798:	6378      	str	r0, [r7, #52]	; 0x34
          break;
1000879a:	e01e      	b.n	100087da <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000879c:	f107 030c 	add.w	r3, r7, #12
100087a0:	4618      	mov	r0, r3
100087a2:	f7fc ff11 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
100087a6:	68fb      	ldr	r3, [r7, #12]
100087a8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100087aa:	e016      	b.n	100087da <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100087ac:	f107 0318 	add.w	r3, r7, #24
100087b0:	4618      	mov	r0, r3
100087b2:	f7fc fe0f 	bl	100053d4 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
100087b6:	69fb      	ldr	r3, [r7, #28]
100087b8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100087ba:	e00e      	b.n	100087da <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_LSE:
          frequency = LSE_VALUE;
100087bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
100087c0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100087c2:	e00a      	b.n	100087da <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_LSI:
          frequency = LSI_VALUE;
100087c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
100087c8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100087ca:	e006      	b.n	100087da <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
100087cc:	f7fd f8bc 	bl	10005948 <RCC_GetCKPERFreq>
100087d0:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100087d2:	e002      	b.n	100087da <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        default:
          frequency = 0;
100087d4:	2300      	movs	r3, #0
100087d6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100087d8:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_LPTIM1 */
100087da:	f000 bf20 	b.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SPDIFRX:
    {
      clksource = __HAL_RCC_GET_SPDIFRX_SOURCE();
100087de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100087e2:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
100087e6:	f003 0303 	and.w	r3, r3, #3
100087ea:	633b      	str	r3, [r7, #48]	; 0x30
100087ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100087ee:	2b02      	cmp	r3, #2
100087f0:	d019      	beq.n	10008826 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
100087f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100087f4:	2b02      	cmp	r3, #2
100087f6:	d820      	bhi.n	1000883a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
100087f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100087fa:	2b00      	cmp	r3, #0
100087fc:	d003      	beq.n	10008806 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
100087fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008800:	2b01      	cmp	r3, #1
10008802:	d008      	beq.n	10008816 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
10008804:	e019      	b.n	1000883a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>

      switch (clksource)
      {
        case RCC_SPDIFRXCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008806:	f107 030c 	add.w	r3, r7, #12
1000880a:	4618      	mov	r0, r3
1000880c:	f7fc fedc 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10008810:	68fb      	ldr	r3, [r7, #12]
10008812:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008814:	e014      	b.n	10008840 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>

        case RCC_SPDIFRXCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008816:	f107 0318 	add.w	r3, r7, #24
1000881a:	4618      	mov	r0, r3
1000881c:	f7fc fdda 	bl	100053d4 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008820:	69fb      	ldr	r3, [r7, #28]
10008822:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008824:	e00c      	b.n	10008840 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>

        case RCC_SPDIFRXCLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008826:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000882a:	699b      	ldr	r3, [r3, #24]
1000882c:	f003 0303 	and.w	r3, r3, #3
10008830:	4a66      	ldr	r2, [pc, #408]	; (100089cc <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
10008832:	fa22 f303 	lsr.w	r3, r2, r3
10008836:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008838:	e002      	b.n	10008840 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>

        default:
          frequency = 0;
1000883a:	2300      	movs	r3, #0
1000883c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000883e:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_SPDIFRX */
10008840:	f000 beed 	b.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_SPI23:
    {
      clksource = __HAL_RCC_GET_SPI23_SOURCE();
10008844:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008848:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	; 0x8dc
1000884c:	f003 0307 	and.w	r3, r3, #7
10008850:	633b      	str	r3, [r7, #48]	; 0x30
10008852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008854:	2b04      	cmp	r3, #4
10008856:	d82c      	bhi.n	100088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x822>
10008858:	a201      	add	r2, pc, #4	; (adr r2, 10008860 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>)
1000885a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000885e:	bf00      	nop
10008860:	10008875 	.word	0x10008875
10008864:	10008885 	.word	0x10008885
10008868:	100088a5 	.word	0x100088a5
1000886c:	100088ab 	.word	0x100088ab
10008870:	10008895 	.word	0x10008895

      switch (clksource)
      {
        case RCC_SPI23CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008874:	f107 030c 	add.w	r3, r7, #12
10008878:	4618      	mov	r0, r3
1000887a:	f7fc fea5 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
1000887e:	68fb      	ldr	r3, [r7, #12]
10008880:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008882:	e019      	b.n	100088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        case RCC_SPI23CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008884:	f107 0318 	add.w	r3, r7, #24
10008888:	4618      	mov	r0, r3
1000888a:	f7fc fda3 	bl	100053d4 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
1000888e:	69fb      	ldr	r3, [r7, #28]
10008890:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008892:	e011      	b.n	100088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        case RCC_SPI23CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008894:	f107 0318 	add.w	r3, r7, #24
10008898:	4618      	mov	r0, r3
1000889a:	f7fc fd9b 	bl	100053d4 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
1000889e:	6a3b      	ldr	r3, [r7, #32]
100088a0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100088a2:	e009      	b.n	100088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        case RCC_SPI23CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
100088a4:	4b4b      	ldr	r3, [pc, #300]	; (100089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x944>)
100088a6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100088a8:	e006      	b.n	100088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        case RCC_SPI23CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
100088aa:	f7fd f84d 	bl	10005948 <RCC_GetCKPERFreq>
100088ae:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100088b0:	e002      	b.n	100088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        default:
          frequency = 0;
100088b2:	2300      	movs	r3, #0
100088b4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100088b6:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_SPI23 */
100088b8:	f000 beb1 	b.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_UART24:
    {
      clksource = __HAL_RCC_GET_UART24_SOURCE();
100088bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100088c0:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
100088c4:	f003 0307 	and.w	r3, r3, #7
100088c8:	633b      	str	r3, [r7, #48]	; 0x30
100088ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100088cc:	2b04      	cmp	r3, #4
100088ce:	d829      	bhi.n	10008924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
100088d0:	a201      	add	r2, pc, #4	; (adr r2, 100088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
100088d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100088d6:	bf00      	nop
100088d8:	100088ed 	.word	0x100088ed
100088dc:	100088f5 	.word	0x100088f5
100088e0:	10008905 	.word	0x10008905
100088e4:	10008919 	.word	0x10008919
100088e8:	1000891f 	.word	0x1000891f

      switch (clksource)
      {
        case RCC_UART24CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
100088ec:	f7fc ff74 	bl	100057d8 <HAL_RCC_GetPCLK1Freq>
100088f0:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100088f2:	e01a      	b.n	1000892a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        case RCC_UART24CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100088f4:	f107 030c 	add.w	r3, r7, #12
100088f8:	4618      	mov	r0, r3
100088fa:	f7fc fe65 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
100088fe:	693b      	ldr	r3, [r7, #16]
10008900:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008902:	e012      	b.n	1000892a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        case RCC_UART24CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008904:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008908:	699b      	ldr	r3, [r3, #24]
1000890a:	f003 0303 	and.w	r3, r3, #3
1000890e:	4a2f      	ldr	r2, [pc, #188]	; (100089cc <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
10008910:	fa22 f303 	lsr.w	r3, r2, r3
10008914:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008916:	e008      	b.n	1000892a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        case RCC_UART24CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008918:	4b2d      	ldr	r3, [pc, #180]	; (100089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
1000891a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000891c:	e005      	b.n	1000892a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        case RCC_UART24CLKSOURCE_HSE:
          frequency = HSE_VALUE;
1000891e:	4b2e      	ldr	r3, [pc, #184]	; (100089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>)
10008920:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008922:	e002      	b.n	1000892a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        default:
          frequency = 0;
10008924:	2300      	movs	r3, #0
10008926:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008928:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_UART24 */
1000892a:	f000 be78 	b.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_UART35:
    {
      clksource = __HAL_RCC_GET_UART35_SOURCE();
1000892e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008932:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
10008936:	f003 0307 	and.w	r3, r3, #7
1000893a:	633b      	str	r3, [r7, #48]	; 0x30
1000893c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000893e:	2b04      	cmp	r3, #4
10008940:	d828      	bhi.n	10008994 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
10008942:	a201      	add	r2, pc, #4	; (adr r2, 10008948 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>)
10008944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008948:	1000895d 	.word	0x1000895d
1000894c:	10008965 	.word	0x10008965
10008950:	10008975 	.word	0x10008975
10008954:	10008989 	.word	0x10008989
10008958:	1000898f 	.word	0x1000898f

      switch (clksource)
      {
        case RCC_UART35CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
1000895c:	f7fc ff3c 	bl	100057d8 <HAL_RCC_GetPCLK1Freq>
10008960:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008962:	e01a      	b.n	1000899a <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        case RCC_UART35CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008964:	f107 030c 	add.w	r3, r7, #12
10008968:	4618      	mov	r0, r3
1000896a:	f7fc fe2d 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000896e:	693b      	ldr	r3, [r7, #16]
10008970:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008972:	e012      	b.n	1000899a <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        case RCC_UART35CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008974:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008978:	699b      	ldr	r3, [r3, #24]
1000897a:	f003 0303 	and.w	r3, r3, #3
1000897e:	4a13      	ldr	r2, [pc, #76]	; (100089cc <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
10008980:	fa22 f303 	lsr.w	r3, r2, r3
10008984:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008986:	e008      	b.n	1000899a <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        case RCC_UART35CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008988:	4b11      	ldr	r3, [pc, #68]	; (100089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
1000898a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000898c:	e005      	b.n	1000899a <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        case RCC_UART35CLKSOURCE_HSE:
          frequency = HSE_VALUE;
1000898e:	4b12      	ldr	r3, [pc, #72]	; (100089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>)
10008990:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008992:	e002      	b.n	1000899a <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        default:
          frequency = 0;
10008994:	2300      	movs	r3, #0
10008996:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008998:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_USART35 */
1000899a:	f000 be40 	b.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_UART78:
    {
      clksource = __HAL_RCC_GET_UART78_SOURCE();
1000899e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100089a2:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
100089a6:	f003 0307 	and.w	r3, r3, #7
100089aa:	633b      	str	r3, [r7, #48]	; 0x30
100089ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100089ae:	2b04      	cmp	r3, #4
100089b0:	d830      	bhi.n	10008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
100089b2:	a201      	add	r2, pc, #4	; (adr r2, 100089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
100089b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100089b8:	100089dd 	.word	0x100089dd
100089bc:	100089e5 	.word	0x100089e5
100089c0:	100089f5 	.word	0x100089f5
100089c4:	10008a09 	.word	0x10008a09
100089c8:	10008a0f 	.word	0x10008a0f
100089cc:	03d09000 	.word	0x03d09000
100089d0:	003d0900 	.word	0x003d0900
100089d4:	00bb8000 	.word	0x00bb8000
100089d8:	016e3600 	.word	0x016e3600

      switch (clksource)
      {
        case RCC_UART78CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
100089dc:	f7fc fefc 	bl	100057d8 <HAL_RCC_GetPCLK1Freq>
100089e0:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100089e2:	e01a      	b.n	10008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        case RCC_UART78CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100089e4:	f107 030c 	add.w	r3, r7, #12
100089e8:	4618      	mov	r0, r3
100089ea:	f7fc fded 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
100089ee:	693b      	ldr	r3, [r7, #16]
100089f0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100089f2:	e012      	b.n	10008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        case RCC_UART78CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100089f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100089f8:	699b      	ldr	r3, [r3, #24]
100089fa:	f003 0303 	and.w	r3, r3, #3
100089fe:	4ab9      	ldr	r2, [pc, #740]	; (10008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>)
10008a00:	fa22 f303 	lsr.w	r3, r2, r3
10008a04:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a06:	e008      	b.n	10008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        case RCC_UART78CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008a08:	4bb7      	ldr	r3, [pc, #732]	; (10008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xc58>)
10008a0a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a0c:	e005      	b.n	10008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        case RCC_UART78CLKSOURCE_HSE:
          frequency = HSE_VALUE;
10008a0e:	4bb7      	ldr	r3, [pc, #732]	; (10008cec <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
10008a10:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a12:	e002      	b.n	10008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        default:
          frequency = 0;
10008a14:	2300      	movs	r3, #0
10008a16:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a18:	bf00      	nop
      }
    }
      break; /*RCC_PERIPHCLK_UART78 */
10008a1a:	f000 be00 	b.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_DFSDM1:
    {
      frequency = HAL_RCC_GetMLHCLKFreq();
10008a1e:	f7fc ff71 	bl	10005904 <HAL_RCC_GetMLHCLKFreq>
10008a22:	6378      	str	r0, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_DFSDM1
10008a24:	f000 bdfb 	b.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

#if defined(FDCAN1)
    case RCC_PERIPHCLK_FDCAN:
    {
      clksource = __HAL_RCC_GET_FDCAN_SOURCE();
10008a28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008a2c:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
10008a30:	f003 0303 	and.w	r3, r3, #3
10008a34:	633b      	str	r3, [r7, #48]	; 0x30
10008a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008a38:	2b03      	cmp	r3, #3
10008a3a:	d826      	bhi.n	10008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
10008a3c:	a201      	add	r2, pc, #4	; (adr r2, 10008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>)
10008a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008a42:	bf00      	nop
10008a44:	10008a55 	.word	0x10008a55
10008a48:	10008a5b 	.word	0x10008a5b
10008a4c:	10008a6b 	.word	0x10008a6b
10008a50:	10008a7b 	.word	0x10008a7b

      switch (clksource)
      {
        case RCC_FDCANCLKSOURCE_HSE:
          frequency = HSE_VALUE;
10008a54:	4ba5      	ldr	r3, [pc, #660]	; (10008cec <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
10008a56:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a58:	e01a      	b.n	10008a90 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>

        case RCC_FDCANCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008a5a:	f107 0318 	add.w	r3, r7, #24
10008a5e:	4618      	mov	r0, r3
10008a60:	f7fc fcb8 	bl	100053d4 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008a64:	69fb      	ldr	r3, [r7, #28]
10008a66:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a68:	e012      	b.n	10008a90 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>

        case RCC_FDCANCLKSOURCE_PLL4_Q:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008a6a:	f107 030c 	add.w	r3, r7, #12
10008a6e:	4618      	mov	r0, r3
10008a70:	f7fc fdaa 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008a74:	693b      	ldr	r3, [r7, #16]
10008a76:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a78:	e00a      	b.n	10008a90 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>

        case RCC_FDCANCLKSOURCE_PLL4_R:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008a7a:	f107 030c 	add.w	r3, r7, #12
10008a7e:	4618      	mov	r0, r3
10008a80:	f7fc fda2 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10008a84:	697b      	ldr	r3, [r7, #20]
10008a86:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a88:	e002      	b.n	10008a90 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>

        default:
          frequency = 0;
10008a8a:	2300      	movs	r3, #0
10008a8c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a8e:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_FDCAN
10008a90:	f000 bdc5 	b.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
#endif /*FDCAN1*/

    case RCC_PERIPHCLK_SAI1:
    {
      clksource = __HAL_RCC_GET_SAI1_SOURCE();
10008a94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008a98:	f8d3 38c8 	ldr.w	r3, [r3, #2248]	; 0x8c8
10008a9c:	f003 0307 	and.w	r3, r3, #7
10008aa0:	633b      	str	r3, [r7, #48]	; 0x30
10008aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008aa4:	2b04      	cmp	r3, #4
10008aa6:	d82c      	bhi.n	10008b02 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
10008aa8:	a201      	add	r2, pc, #4	; (adr r2, 10008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>)
10008aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008aae:	bf00      	nop
10008ab0:	10008ac5 	.word	0x10008ac5
10008ab4:	10008ad5 	.word	0x10008ad5
10008ab8:	10008af5 	.word	0x10008af5
10008abc:	10008afb 	.word	0x10008afb
10008ac0:	10008ae5 	.word	0x10008ae5

      switch (clksource)
      {
        case RCC_SAI1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008ac4:	f107 030c 	add.w	r3, r7, #12
10008ac8:	4618      	mov	r0, r3
10008aca:	f7fc fd7d 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008ace:	693b      	ldr	r3, [r7, #16]
10008ad0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008ad2:	e019      	b.n	10008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        case RCC_SAI1CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008ad4:	f107 0318 	add.w	r3, r7, #24
10008ad8:	4618      	mov	r0, r3
10008ada:	f7fc fc7b 	bl	100053d4 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008ade:	69fb      	ldr	r3, [r7, #28]
10008ae0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008ae2:	e011      	b.n	10008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        case RCC_SAI1CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008ae4:	f107 0318 	add.w	r3, r7, #24
10008ae8:	4618      	mov	r0, r3
10008aea:	f7fc fc73 	bl	100053d4 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10008aee:	6a3b      	ldr	r3, [r7, #32]
10008af0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008af2:	e009      	b.n	10008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        case RCC_SAI1CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10008af4:	4b7e      	ldr	r3, [pc, #504]	; (10008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>)
10008af6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008af8:	e006      	b.n	10008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        case RCC_SAI1CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008afa:	f7fc ff25 	bl	10005948 <RCC_GetCKPERFreq>
10008afe:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008b00:	e002      	b.n	10008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        default:
          frequency = 0;
10008b02:	2300      	movs	r3, #0
10008b04:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b06:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SAI1
10008b08:	f000 bd89 	b.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SAI2:
    {
      clksource = __HAL_RCC_GET_SAI2_SOURCE();
10008b0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008b10:	f8d3 38cc 	ldr.w	r3, [r3, #2252]	; 0x8cc
10008b14:	f003 0307 	and.w	r3, r3, #7
10008b18:	633b      	str	r3, [r7, #48]	; 0x30
10008b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008b1c:	2b05      	cmp	r3, #5
10008b1e:	d831      	bhi.n	10008b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
10008b20:	a201      	add	r2, pc, #4	; (adr r2, 10008b28 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
10008b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008b26:	bf00      	nop
10008b28:	10008b41 	.word	0x10008b41
10008b2c:	10008b51 	.word	0x10008b51
10008b30:	10008b71 	.word	0x10008b71
10008b34:	10008b77 	.word	0x10008b77
10008b38:	10008b7f 	.word	0x10008b7f
10008b3c:	10008b61 	.word	0x10008b61

      switch (clksource)
      {
        case RCC_SAI2CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008b40:	f107 030c 	add.w	r3, r7, #12
10008b44:	4618      	mov	r0, r3
10008b46:	f7fc fd3f 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008b4a:	693b      	ldr	r3, [r7, #16]
10008b4c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b4e:	e01c      	b.n	10008b8a <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008b50:	f107 0318 	add.w	r3, r7, #24
10008b54:	4618      	mov	r0, r3
10008b56:	f7fc fc3d 	bl	100053d4 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008b5a:	69fb      	ldr	r3, [r7, #28]
10008b5c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b5e:	e014      	b.n	10008b8a <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008b60:	f107 0318 	add.w	r3, r7, #24
10008b64:	4618      	mov	r0, r3
10008b66:	f7fc fc35 	bl	100053d4 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10008b6a:	6a3b      	ldr	r3, [r7, #32]
10008b6c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b6e:	e00c      	b.n	10008b8a <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10008b70:	4b5f      	ldr	r3, [pc, #380]	; (10008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>)
10008b72:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b74:	e009      	b.n	10008b8a <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008b76:	f7fc fee7 	bl	10005948 <RCC_GetCKPERFreq>
10008b7a:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008b7c:	e005      	b.n	10008b8a <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_SPDIF:
          frequency = 0; //SAI2 manage this SPDIF_CKSYMB_VALUE
10008b7e:	2300      	movs	r3, #0
10008b80:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b82:	e002      	b.n	10008b8a <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        default:
          frequency = 0;
10008b84:	2300      	movs	r3, #0
10008b86:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b88:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SAI2
10008b8a:	f000 bd48 	b.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SAI3:
    {
      clksource = __HAL_RCC_GET_SAI3_SOURCE();
10008b8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008b92:	f8d3 38d0 	ldr.w	r3, [r3, #2256]	; 0x8d0
10008b96:	f003 0307 	and.w	r3, r3, #7
10008b9a:	633b      	str	r3, [r7, #48]	; 0x30
10008b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008b9e:	2b04      	cmp	r3, #4
10008ba0:	d82b      	bhi.n	10008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
10008ba2:	a201      	add	r2, pc, #4	; (adr r2, 10008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xb18>)
10008ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008ba8:	10008bbd 	.word	0x10008bbd
10008bac:	10008bcd 	.word	0x10008bcd
10008bb0:	10008bed 	.word	0x10008bed
10008bb4:	10008bf3 	.word	0x10008bf3
10008bb8:	10008bdd 	.word	0x10008bdd

      switch (clksource)
      {
        case RCC_SAI3CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008bbc:	f107 030c 	add.w	r3, r7, #12
10008bc0:	4618      	mov	r0, r3
10008bc2:	f7fc fd01 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008bc6:	693b      	ldr	r3, [r7, #16]
10008bc8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008bca:	e019      	b.n	10008c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        case RCC_SAI3CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008bcc:	f107 0318 	add.w	r3, r7, #24
10008bd0:	4618      	mov	r0, r3
10008bd2:	f7fc fbff 	bl	100053d4 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008bd6:	69fb      	ldr	r3, [r7, #28]
10008bd8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008bda:	e011      	b.n	10008c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        case RCC_SAI3CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008bdc:	f107 0318 	add.w	r3, r7, #24
10008be0:	4618      	mov	r0, r3
10008be2:	f7fc fbf7 	bl	100053d4 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10008be6:	6a3b      	ldr	r3, [r7, #32]
10008be8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008bea:	e009      	b.n	10008c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        case RCC_SAI3CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10008bec:	4b40      	ldr	r3, [pc, #256]	; (10008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>)
10008bee:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008bf0:	e006      	b.n	10008c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        case RCC_SAI2CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008bf2:	f7fc fea9 	bl	10005948 <RCC_GetCKPERFreq>
10008bf6:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008bf8:	e002      	b.n	10008c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        default:
          frequency = 0;
10008bfa:	2300      	movs	r3, #0
10008bfc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008bfe:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SAI3
10008c00:	f000 bd0d 	b.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SPI1:
    {
      clksource = __HAL_RCC_GET_SPI1_SOURCE();
10008c04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008c08:	f8d3 38d8 	ldr.w	r3, [r3, #2264]	; 0x8d8
10008c0c:	f003 0307 	and.w	r3, r3, #7
10008c10:	633b      	str	r3, [r7, #48]	; 0x30
10008c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008c14:	2b04      	cmp	r3, #4
10008c16:	d82c      	bhi.n	10008c72 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
10008c18:	a201      	add	r2, pc, #4	; (adr r2, 10008c20 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>)
10008c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008c1e:	bf00      	nop
10008c20:	10008c35 	.word	0x10008c35
10008c24:	10008c45 	.word	0x10008c45
10008c28:	10008c65 	.word	0x10008c65
10008c2c:	10008c6b 	.word	0x10008c6b
10008c30:	10008c55 	.word	0x10008c55

      switch (clksource)
      {
        case RCC_SPI1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008c34:	f107 030c 	add.w	r3, r7, #12
10008c38:	4618      	mov	r0, r3
10008c3a:	f7fc fcc5 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008c3e:	693b      	ldr	r3, [r7, #16]
10008c40:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008c42:	e019      	b.n	10008c78 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        case RCC_SPI1CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008c44:	f107 0318 	add.w	r3, r7, #24
10008c48:	4618      	mov	r0, r3
10008c4a:	f7fc fbc3 	bl	100053d4 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008c4e:	69fb      	ldr	r3, [r7, #28]
10008c50:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008c52:	e011      	b.n	10008c78 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        case RCC_SPI1CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008c54:	f107 0318 	add.w	r3, r7, #24
10008c58:	4618      	mov	r0, r3
10008c5a:	f7fc fbbb 	bl	100053d4 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10008c5e:	6a3b      	ldr	r3, [r7, #32]
10008c60:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008c62:	e009      	b.n	10008c78 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        case RCC_SPI1CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10008c64:	4b22      	ldr	r3, [pc, #136]	; (10008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>)
10008c66:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008c68:	e006      	b.n	10008c78 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        case RCC_SPI1CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008c6a:	f7fc fe6d 	bl	10005948 <RCC_GetCKPERFreq>
10008c6e:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008c70:	e002      	b.n	10008c78 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        default:
          frequency = 0;
10008c72:	2300      	movs	r3, #0
10008c74:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008c76:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SPI1
10008c78:	f000 bcd1 	b.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SPI45:
    {
      clksource = __HAL_RCC_GET_SPI45_SOURCE();
10008c7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008c80:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
10008c84:	f003 0307 	and.w	r3, r3, #7
10008c88:	633b      	str	r3, [r7, #48]	; 0x30
10008c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008c8c:	2b04      	cmp	r3, #4
10008c8e:	d831      	bhi.n	10008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
10008c90:	a201      	add	r2, pc, #4	; (adr r2, 10008c98 <HAL_RCCEx_GetPeriphCLKFreq+0xc08>)
10008c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008c96:	bf00      	nop
10008c98:	10008cad 	.word	0x10008cad
10008c9c:	10008cb5 	.word	0x10008cb5
10008ca0:	10008cc5 	.word	0x10008cc5
10008ca4:	10008cd9 	.word	0x10008cd9
10008ca8:	10008cdf 	.word	0x10008cdf

      switch (clksource)
      {
        case RCC_SPI45CLKSOURCE_PCLK2:
          frequency = HAL_RCC_GetPCLK2Freq();
10008cac:	f7fc fdaf 	bl	1000580e <HAL_RCC_GetPCLK2Freq>
10008cb0:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008cb2:	e022      	b.n	10008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>

        case RCC_SPI45CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008cb4:	f107 030c 	add.w	r3, r7, #12
10008cb8:	4618      	mov	r0, r3
10008cba:	f7fc fc85 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008cbe:	693b      	ldr	r3, [r7, #16]
10008cc0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008cc2:	e01a      	b.n	10008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>

        case RCC_SPI45CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008cc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008cc8:	699b      	ldr	r3, [r3, #24]
10008cca:	f003 0303 	and.w	r3, r3, #3
10008cce:	4a05      	ldr	r2, [pc, #20]	; (10008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>)
10008cd0:	fa22 f303 	lsr.w	r3, r2, r3
10008cd4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008cd6:	e010      	b.n	10008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>

        case RCC_SPI45CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008cd8:	4b03      	ldr	r3, [pc, #12]	; (10008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xc58>)
10008cda:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008cdc:	e00d      	b.n	10008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>

        case RCC_SPI45CLKSOURCE_HSE:
          frequency = HSE_VALUE;
10008cde:	4b03      	ldr	r3, [pc, #12]	; (10008cec <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
10008ce0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008ce2:	e00a      	b.n	10008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
10008ce4:	03d09000 	.word	0x03d09000
10008ce8:	003d0900 	.word	0x003d0900
10008cec:	016e3600 	.word	0x016e3600
10008cf0:	00bb8000 	.word	0x00bb8000

        default:
          frequency = 0;
10008cf4:	2300      	movs	r3, #0
10008cf6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008cf8:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_SPI45 */
10008cfa:	f000 bc90 	b.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_USART6:
    {
      clksource = __HAL_RCC_GET_USART6_SOURCE();
10008cfe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008d02:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
10008d06:	f003 0307 	and.w	r3, r3, #7
10008d0a:	633b      	str	r3, [r7, #48]	; 0x30
10008d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008d0e:	2b04      	cmp	r3, #4
10008d10:	d828      	bhi.n	10008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xcd4>
10008d12:	a201      	add	r2, pc, #4	; (adr r2, 10008d18 <HAL_RCCEx_GetPeriphCLKFreq+0xc88>)
10008d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008d18:	10008d2d 	.word	0x10008d2d
10008d1c:	10008d35 	.word	0x10008d35
10008d20:	10008d45 	.word	0x10008d45
10008d24:	10008d59 	.word	0x10008d59
10008d28:	10008d5f 	.word	0x10008d5f

      switch (clksource)
      {
        case RCC_USART6CLKSOURCE_PCLK2:
          frequency = HAL_RCC_GetPCLK2Freq();
10008d2c:	f7fc fd6f 	bl	1000580e <HAL_RCC_GetPCLK2Freq>
10008d30:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008d32:	e01a      	b.n	10008d6a <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        case RCC_USART6CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008d34:	f107 030c 	add.w	r3, r7, #12
10008d38:	4618      	mov	r0, r3
10008d3a:	f7fc fc45 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008d3e:	693b      	ldr	r3, [r7, #16]
10008d40:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008d42:	e012      	b.n	10008d6a <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        case RCC_USART6CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008d44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008d48:	699b      	ldr	r3, [r3, #24]
10008d4a:	f003 0303 	and.w	r3, r3, #3
10008d4e:	4aa8      	ldr	r2, [pc, #672]	; (10008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
10008d50:	fa22 f303 	lsr.w	r3, r2, r3
10008d54:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008d56:	e008      	b.n	10008d6a <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        case RCC_USART6CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008d58:	4ba6      	ldr	r3, [pc, #664]	; (10008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>)
10008d5a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008d5c:	e005      	b.n	10008d6a <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        case RCC_USART6CLKSOURCE_HSE:
          frequency = HSE_VALUE;
10008d5e:	4ba6      	ldr	r3, [pc, #664]	; (10008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xf68>)
10008d60:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008d62:	e002      	b.n	10008d6a <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        default:
          frequency = 0;
10008d64:	2300      	movs	r3, #0
10008d66:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008d68:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_USART6
10008d6a:	f000 bc58 	b.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_LPTIM23:
    {
      clksource = __HAL_RCC_GET_LPTIM23_SOURCE();
10008d6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008d72:	f8d3 3930 	ldr.w	r3, [r3, #2352]	; 0x930
10008d76:	f003 0307 	and.w	r3, r3, #7
10008d7a:	633b      	str	r3, [r7, #48]	; 0x30
10008d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008d7e:	2b04      	cmp	r3, #4
10008d80:	d824      	bhi.n	10008dcc <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>
10008d82:	a201      	add	r2, pc, #4	; (adr r2, 10008d88 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>)
10008d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008d88:	10008d9d 	.word	0x10008d9d
10008d8c:	10008da5 	.word	0x10008da5
10008d90:	10008db5 	.word	0x10008db5
10008d94:	10008dbd 	.word	0x10008dbd
10008d98:	10008dc5 	.word	0x10008dc5

      switch (clksource)
      {
        case RCC_LPTIM23CLKSOURCE_PCLK3:
          frequency = HAL_RCC_GetPCLK3Freq();
10008d9c:	f7fc fd52 	bl	10005844 <HAL_RCC_GetPCLK3Freq>
10008da0:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008da2:	e016      	b.n	10008dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        case RCC_LPTIM23CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008da4:	f107 030c 	add.w	r3, r7, #12
10008da8:	4618      	mov	r0, r3
10008daa:	f7fc fc0d 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008dae:	693b      	ldr	r3, [r7, #16]
10008db0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008db2:	e00e      	b.n	10008dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        case RCC_LPTIM23CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008db4:	f7fc fdc8 	bl	10005948 <RCC_GetCKPERFreq>
10008db8:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008dba:	e00a      	b.n	10008dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        case RCC_LPTIM23CLKSOURCE_LSE:
          frequency = LSE_VALUE;
10008dbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10008dc0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008dc2:	e006      	b.n	10008dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        case RCC_LPTIM23CLKSOURCE_LSI:
          frequency = LSI_VALUE;
10008dc4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10008dc8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008dca:	e002      	b.n	10008dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        default:
          frequency = 0;
10008dcc:	2300      	movs	r3, #0
10008dce:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008dd0:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_LPTIM23 */
10008dd2:	f000 bc24 	b.w	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_LPTIM45:
    {
      clksource = __HAL_RCC_GET_LPTIM45_SOURCE();
10008dd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008dda:	f8d3 392c 	ldr.w	r3, [r3, #2348]	; 0x92c
10008dde:	f003 0307 	and.w	r3, r3, #7
10008de2:	633b      	str	r3, [r7, #48]	; 0x30
10008de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008de6:	2b05      	cmp	r3, #5
10008de8:	d82e      	bhi.n	10008e48 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>
10008dea:	a201      	add	r2, pc, #4	; (adr r2, 10008df0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
10008dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008df0:	10008e09 	.word	0x10008e09
10008df4:	10008e11 	.word	0x10008e11
10008df8:	10008e21 	.word	0x10008e21
10008dfc:	10008e31 	.word	0x10008e31
10008e00:	10008e39 	.word	0x10008e39
10008e04:	10008e41 	.word	0x10008e41

      switch (clksource)
      {
        case RCC_LPTIM45CLKSOURCE_PCLK3:
          frequency = HAL_RCC_GetPCLK3Freq();
10008e08:	f7fc fd1c 	bl	10005844 <HAL_RCC_GetPCLK3Freq>
10008e0c:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008e0e:	e01e      	b.n	10008e4e <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008e10:	f107 030c 	add.w	r3, r7, #12
10008e14:	4618      	mov	r0, r3
10008e16:	f7fc fbd7 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10008e1a:	68fb      	ldr	r3, [r7, #12]
10008e1c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008e1e:	e016      	b.n	10008e4e <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008e20:	f107 0318 	add.w	r3, r7, #24
10008e24:	4618      	mov	r0, r3
10008e26:	f7fc fad5 	bl	100053d4 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008e2a:	69fb      	ldr	r3, [r7, #28]
10008e2c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008e2e:	e00e      	b.n	10008e4e <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_LSE:
          frequency = LSE_VALUE;
10008e30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10008e34:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008e36:	e00a      	b.n	10008e4e <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_LSI:
          frequency = LSI_VALUE;
10008e38:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10008e3c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008e3e:	e006      	b.n	10008e4e <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008e40:	f7fc fd82 	bl	10005948 <RCC_GetCKPERFreq>
10008e44:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008e46:	e002      	b.n	10008e4e <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        default:
          frequency = 0;
10008e48:	2300      	movs	r3, #0
10008e4a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008e4c:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_LPTIM45 */
10008e4e:	e3e6      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SAI4:
    {
      clksource = __HAL_RCC_GET_SAI4_SOURCE();
10008e50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008e54:	f8d3 38d4 	ldr.w	r3, [r3, #2260]	; 0x8d4
10008e58:	f003 0307 	and.w	r3, r3, #7
10008e5c:	633b      	str	r3, [r7, #48]	; 0x30
10008e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008e60:	2b04      	cmp	r3, #4
10008e62:	d82c      	bhi.n	10008ebe <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
10008e64:	a201      	add	r2, pc, #4	; (adr r2, 10008e6c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>)
10008e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008e6a:	bf00      	nop
10008e6c:	10008e81 	.word	0x10008e81
10008e70:	10008e91 	.word	0x10008e91
10008e74:	10008eb1 	.word	0x10008eb1
10008e78:	10008eb7 	.word	0x10008eb7
10008e7c:	10008ea1 	.word	0x10008ea1

      switch (clksource)
      {
        case RCC_SAI4CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008e80:	f107 030c 	add.w	r3, r7, #12
10008e84:	4618      	mov	r0, r3
10008e86:	f7fc fb9f 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008e8a:	693b      	ldr	r3, [r7, #16]
10008e8c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008e8e:	e019      	b.n	10008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        case RCC_SAI4CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008e90:	f107 0318 	add.w	r3, r7, #24
10008e94:	4618      	mov	r0, r3
10008e96:	f7fc fa9d 	bl	100053d4 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008e9a:	69fb      	ldr	r3, [r7, #28]
10008e9c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008e9e:	e011      	b.n	10008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        case RCC_SAI4CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008ea0:	f107 0318 	add.w	r3, r7, #24
10008ea4:	4618      	mov	r0, r3
10008ea6:	f7fc fa95 	bl	100053d4 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10008eaa:	6a3b      	ldr	r3, [r7, #32]
10008eac:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008eae:	e009      	b.n	10008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        case RCC_SAI4CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10008eb0:	4b52      	ldr	r3, [pc, #328]	; (10008ffc <HAL_RCCEx_GetPeriphCLKFreq+0xf6c>)
10008eb2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008eb4:	e006      	b.n	10008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        case RCC_SAI4CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008eb6:	f7fc fd47 	bl	10005948 <RCC_GetCKPERFreq>
10008eba:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008ebc:	e002      	b.n	10008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        default:
          frequency = 0;
10008ebe:	2300      	movs	r3, #0
10008ec0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008ec2:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SAI4
10008ec4:	e3ab      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_TEMP:
    {
      frequency = LSE_VALUE;
10008ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10008eca:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_TEMP
10008ecc:	e3a7      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


#if defined(DSI)
    case RCC_PERIPHCLK_DSI:
    {
      clksource = __HAL_RCC_GET_DSI_SOURCE();
10008ece:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008ed2:	f8d3 3924 	ldr.w	r3, [r3, #2340]	; 0x924
10008ed6:	f003 0301 	and.w	r3, r3, #1
10008eda:	633b      	str	r3, [r7, #48]	; 0x30
10008edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008ede:	2b00      	cmp	r3, #0
10008ee0:	d003      	beq.n	10008eea <HAL_RCCEx_GetPeriphCLKFreq+0xe5a>
10008ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008ee4:	2b01      	cmp	r3, #1
10008ee6:	d003      	beq.n	10008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xe60>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
          frequency = pll4_clocks.PLL4_P_Frequency;
          break;
      }
    }
    break;//RCC_PERIPHCLK_DSI
10008ee8:	e399      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
          frequency = 0;
10008eea:	2300      	movs	r3, #0
10008eec:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008eee:	e007      	b.n	10008f00 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008ef0:	f107 030c 	add.w	r3, r7, #12
10008ef4:	4618      	mov	r0, r3
10008ef6:	f7fc fb67 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10008efa:	68fb      	ldr	r3, [r7, #12]
10008efc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008efe:	bf00      	nop
    break;//RCC_PERIPHCLK_DSI
10008f00:	e38d      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
#endif /*DSI*/

    case RCC_PERIPHCLK_LTDC:
    {
      HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008f02:	f107 030c 	add.w	r3, r7, #12
10008f06:	4618      	mov	r0, r3
10008f08:	f7fc fb5e 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
      frequency = pll4_clocks.PLL4_Q_Frequency;
10008f0c:	693b      	ldr	r3, [r7, #16]
10008f0e:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_LTDC
10008f10:	e385      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_USBPHY:
    {
      clksource = __HAL_RCC_GET_USBPHY_SOURCE();
10008f12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008f16:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
10008f1a:	f003 0303 	and.w	r3, r3, #3
10008f1e:	633b      	str	r3, [r7, #48]	; 0x30
10008f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008f22:	2b02      	cmp	r3, #2
10008f24:	d014      	beq.n	10008f50 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
10008f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008f28:	2b02      	cmp	r3, #2
10008f2a:	d814      	bhi.n	10008f56 <HAL_RCCEx_GetPeriphCLKFreq+0xec6>
10008f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008f2e:	2b00      	cmp	r3, #0
10008f30:	d003      	beq.n	10008f3a <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
10008f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008f34:	2b01      	cmp	r3, #1
10008f36:	d003      	beq.n	10008f40 <HAL_RCCEx_GetPeriphCLKFreq+0xeb0>
10008f38:	e00d      	b.n	10008f56 <HAL_RCCEx_GetPeriphCLKFreq+0xec6>

      switch (clksource)
      {
        case RCC_USBPHYCLKSOURCE_HSE:
          frequency = HSE_VALUE;
10008f3a:	4b2f      	ldr	r3, [pc, #188]	; (10008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xf68>)
10008f3c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008f3e:	e00d      	b.n	10008f5c <HAL_RCCEx_GetPeriphCLKFreq+0xecc>

        case RCC_USBPHYCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008f40:	f107 030c 	add.w	r3, r7, #12
10008f44:	4618      	mov	r0, r3
10008f46:	f7fc fb3f 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10008f4a:	697b      	ldr	r3, [r7, #20]
10008f4c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008f4e:	e005      	b.n	10008f5c <HAL_RCCEx_GetPeriphCLKFreq+0xecc>

        case RCC_USBPHYCLKSOURCE_HSE2:
          frequency = (HSE_VALUE / 2UL);
10008f50:	4b2b      	ldr	r3, [pc, #172]	; (10009000 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>)
10008f52:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008f54:	e002      	b.n	10008f5c <HAL_RCCEx_GetPeriphCLKFreq+0xecc>

        default:
          frequency = 0;
10008f56:	2300      	movs	r3, #0
10008f58:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008f5a:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_USBPHY
10008f5c:	e35f      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_IWDG2:
    {
      frequency = LSI_VALUE;
10008f5e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10008f62:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_IWDG2
10008f64:	e35b      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_DDRPHYC:
    {
      HAL_RCC_GetPLL2ClockFreq(&pll2_clocks);
10008f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
10008f6a:	4618      	mov	r0, r3
10008f6c:	f7fc f946 	bl	100051fc <HAL_RCC_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
10008f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10008f72:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_DDRPHYC
10008f74:	e353      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_RTC:
    {
      clksource = __HAL_RCC_GET_RTC_SOURCE();
10008f76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008f7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10008f7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
10008f82:	633b      	str	r3, [r7, #48]	; 0x30
10008f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008f86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
10008f8a:	d020      	beq.n	10008fce <HAL_RCCEx_GetPeriphCLKFreq+0xf3e>
10008f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008f8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
10008f92:	f200 8339 	bhi.w	10009608 <HAL_RCCEx_GetPeriphCLKFreq+0x1578>
10008f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008f98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
10008f9c:	d013      	beq.n	10008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
10008f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008fa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
10008fa4:	f200 8330 	bhi.w	10009608 <HAL_RCCEx_GetPeriphCLKFreq+0x1578>
10008fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008faa:	2b00      	cmp	r3, #0
10008fac:	d004      	beq.n	10008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
10008fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
10008fb4:	d003      	beq.n	10008fbe <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        case RCC_RTCCLKSOURCE_HSE_DIV:
          frequency = (HSE_VALUE / __HAL_RCC_GET_RTC_HSEDIV());
          break;
      }
    }
    break;//RCC_PERIPHCLK_RTC
10008fb6:	e327      	b.n	10009608 <HAL_RCCEx_GetPeriphCLKFreq+0x1578>
          frequency = 0;
10008fb8:	2300      	movs	r3, #0
10008fba:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008fbc:	e012      	b.n	10008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>
          frequency = LSE_VALUE;
10008fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10008fc2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008fc4:	e00e      	b.n	10008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>
          frequency = LSI_VALUE;
10008fc6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10008fca:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008fcc:	e00a      	b.n	10008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>
          frequency = (HSE_VALUE / __HAL_RCC_GET_RTC_HSEDIV());
10008fce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10008fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10008fd8:	3301      	adds	r3, #1
10008fda:	4a07      	ldr	r2, [pc, #28]	; (10008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xf68>)
10008fdc:	fbb2 f3f3 	udiv	r3, r2, r3
10008fe0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008fe2:	bf00      	nop
    break;//RCC_PERIPHCLK_RTC
10008fe4:	e310      	b.n	10009608 <HAL_RCCEx_GetPeriphCLKFreq+0x1578>


    case RCC_PERIPHCLK_IWDG1:
    {
      frequency = LSI_VALUE;
10008fe6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10008fea:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_IWDG1
10008fec:	e317      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008fee:	bf00      	nop
10008ff0:	03d09000 	.word	0x03d09000
10008ff4:	003d0900 	.word	0x003d0900
10008ff8:	016e3600 	.word	0x016e3600
10008ffc:	00bb8000 	.word	0x00bb8000
10009000:	00b71b00 	.word	0x00b71b00


    case RCC_PERIPHCLK_I2C46:
    {
      clksource = __HAL_RCC_GET_I2C46_SOURCE();
10009004:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009008:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
1000900c:	f003 0307 	and.w	r3, r3, #7
10009010:	633b      	str	r3, [r7, #48]	; 0x30
10009012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009014:	2b03      	cmp	r3, #3
10009016:	d824      	bhi.n	10009062 <HAL_RCCEx_GetPeriphCLKFreq+0xfd2>
10009018:	a201      	add	r2, pc, #4	; (adr r2, 10009020 <HAL_RCCEx_GetPeriphCLKFreq+0xf90>)
1000901a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000901e:	bf00      	nop
10009020:	10009031 	.word	0x10009031
10009024:	10009039 	.word	0x10009039
10009028:	10009049 	.word	0x10009049
1000902c:	1000905d 	.word	0x1000905d

      switch (clksource)
      {
        case RCC_I2C46CLKSOURCE_PCLK5:
          frequency = HAL_RCC_GetPCLK5Freq();
10009030:	f7fc fc23 	bl	1000587a <HAL_RCC_GetPCLK5Freq>
10009034:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10009036:	e017      	b.n	10009068 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>

        case RCC_I2C46CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10009038:	f107 0318 	add.w	r3, r7, #24
1000903c:	4618      	mov	r0, r3
1000903e:	f7fc f9c9 	bl	100053d4 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10009042:	69fb      	ldr	r3, [r7, #28]
10009044:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009046:	e00f      	b.n	10009068 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>

        case RCC_I2C46CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10009048:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000904c:	699b      	ldr	r3, [r3, #24]
1000904e:	f003 0303 	and.w	r3, r3, #3
10009052:	4ab3      	ldr	r2, [pc, #716]	; (10009320 <HAL_RCCEx_GetPeriphCLKFreq+0x1290>)
10009054:	fa22 f303 	lsr.w	r3, r2, r3
10009058:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000905a:	e005      	b.n	10009068 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>

        case RCC_I2C46CLKSOURCE_CSI:
          frequency = CSI_VALUE;
1000905c:	4bb1      	ldr	r3, [pc, #708]	; (10009324 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
1000905e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009060:	e002      	b.n	10009068 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>

        default:
          frequency = 0;
10009062:	2300      	movs	r3, #0
10009064:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009066:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_I2C46 */
10009068:	e2d9      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SPI6:
    {
      clksource = __HAL_RCC_GET_SPI6_SOURCE();
1000906a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000906e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10009072:	f003 0307 	and.w	r3, r3, #7
10009076:	633b      	str	r3, [r7, #48]	; 0x30
10009078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000907a:	2b05      	cmp	r3, #5
1000907c:	d832      	bhi.n	100090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
1000907e:	a201      	add	r2, pc, #4	; (adr r2, 10009084 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
10009080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009084:	1000909d 	.word	0x1000909d
10009088:	100090a5 	.word	0x100090a5
1000908c:	100090b5 	.word	0x100090b5
10009090:	100090c9 	.word	0x100090c9
10009094:	100090cf 	.word	0x100090cf
10009098:	100090d5 	.word	0x100090d5

      switch (clksource)
      {
        case RCC_SPI6CLKSOURCE_PCLK5:
          frequency = HAL_RCC_GetPCLK5Freq();
1000909c:	f7fc fbed 	bl	1000587a <HAL_RCC_GetPCLK5Freq>
100090a0:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100090a2:	e022      	b.n	100090ea <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100090a4:	f107 030c 	add.w	r3, r7, #12
100090a8:	4618      	mov	r0, r3
100090aa:	f7fc fa8d 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
100090ae:	693b      	ldr	r3, [r7, #16]
100090b0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100090b2:	e01a      	b.n	100090ea <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100090b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100090b8:	699b      	ldr	r3, [r3, #24]
100090ba:	f003 0303 	and.w	r3, r3, #3
100090be:	4a98      	ldr	r2, [pc, #608]	; (10009320 <HAL_RCCEx_GetPeriphCLKFreq+0x1290>)
100090c0:	fa22 f303 	lsr.w	r3, r2, r3
100090c4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100090c6:	e010      	b.n	100090ea <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_CSI:
          frequency = CSI_VALUE;
100090c8:	4b96      	ldr	r3, [pc, #600]	; (10009324 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
100090ca:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100090cc:	e00d      	b.n	100090ea <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_HSE:
          frequency = HSE_VALUE;
100090ce:	4b96      	ldr	r3, [pc, #600]	; (10009328 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
100090d0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100090d2:	e00a      	b.n	100090ea <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100090d4:	f107 0318 	add.w	r3, r7, #24
100090d8:	4618      	mov	r0, r3
100090da:	f7fc f97b 	bl	100053d4 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
100090de:	69fb      	ldr	r3, [r7, #28]
100090e0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100090e2:	e002      	b.n	100090ea <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        default:
          frequency = 0;
100090e4:	2300      	movs	r3, #0
100090e6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100090e8:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SPI6
100090ea:	e298      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_USART1:
    {
      clksource = __HAL_RCC_GET_USART1_SOURCE();
100090ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100090f0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
100090f4:	f003 0307 	and.w	r3, r3, #7
100090f8:	633b      	str	r3, [r7, #48]	; 0x30
100090fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100090fc:	2b05      	cmp	r3, #5
100090fe:	d833      	bhi.n	10009168 <HAL_RCCEx_GetPeriphCLKFreq+0x10d8>
10009100:	a201      	add	r2, pc, #4	; (adr r2, 10009108 <HAL_RCCEx_GetPeriphCLKFreq+0x1078>)
10009102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009106:	bf00      	nop
10009108:	10009121 	.word	0x10009121
1000910c:	10009129 	.word	0x10009129
10009110:	10009139 	.word	0x10009139
10009114:	1000914d 	.word	0x1000914d
10009118:	10009153 	.word	0x10009153
1000911c:	10009163 	.word	0x10009163

      switch (clksource)
      {
        case RCC_USART1CLKSOURCE_PCLK5:
          frequency = HAL_RCC_GetPCLK5Freq();
10009120:	f7fc fbab 	bl	1000587a <HAL_RCC_GetPCLK5Freq>
10009124:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10009126:	e022      	b.n	1000916e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10009128:	f107 0318 	add.w	r3, r7, #24
1000912c:	4618      	mov	r0, r3
1000912e:	f7fc f951 	bl	100053d4 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10009132:	69fb      	ldr	r3, [r7, #28]
10009134:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009136:	e01a      	b.n	1000916e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10009138:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000913c:	699b      	ldr	r3, [r3, #24]
1000913e:	f003 0303 	and.w	r3, r3, #3
10009142:	4a77      	ldr	r2, [pc, #476]	; (10009320 <HAL_RCCEx_GetPeriphCLKFreq+0x1290>)
10009144:	fa22 f303 	lsr.w	r3, r2, r3
10009148:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000914a:	e010      	b.n	1000916e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_CSI:
          frequency = CSI_VALUE;
1000914c:	4b75      	ldr	r3, [pc, #468]	; (10009324 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
1000914e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009150:	e00d      	b.n	1000916e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10009152:	f107 030c 	add.w	r3, r7, #12
10009156:	4618      	mov	r0, r3
10009158:	f7fc fa36 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000915c:	693b      	ldr	r3, [r7, #16]
1000915e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009160:	e005      	b.n	1000916e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_HSE:
          frequency = HSE_VALUE;
10009162:	4b71      	ldr	r3, [pc, #452]	; (10009328 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
10009164:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009166:	e002      	b.n	1000916e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        default:
          frequency = 0;
10009168:	2300      	movs	r3, #0
1000916a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000916c:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_USART1
1000916e:	e256      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_STGEN:
    {
      clksource = __HAL_RCC_GET_STGEN_SOURCE();
10009170:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009174:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
10009178:	f003 0303 	and.w	r3, r3, #3
1000917c:	633b      	str	r3, [r7, #48]	; 0x30
1000917e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009180:	2b00      	cmp	r3, #0
10009182:	d003      	beq.n	1000918c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
10009184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009186:	2b01      	cmp	r3, #1
10009188:	d00a      	beq.n	100091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
1000918a:	e00c      	b.n	100091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>

      switch (clksource)
      {
        case RCC_STGENCLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
1000918c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009190:	699b      	ldr	r3, [r3, #24]
10009192:	f003 0303 	and.w	r3, r3, #3
10009196:	4a62      	ldr	r2, [pc, #392]	; (10009320 <HAL_RCCEx_GetPeriphCLKFreq+0x1290>)
10009198:	fa22 f303 	lsr.w	r3, r2, r3
1000919c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000919e:	e005      	b.n	100091ac <HAL_RCCEx_GetPeriphCLKFreq+0x111c>

        case RCC_STGENCLKSOURCE_HSE:
          frequency = HSE_VALUE;
100091a0:	4b61      	ldr	r3, [pc, #388]	; (10009328 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
100091a2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100091a4:	e002      	b.n	100091ac <HAL_RCCEx_GetPeriphCLKFreq+0x111c>

        default:
          frequency = 0;
100091a6:	2300      	movs	r3, #0
100091a8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100091aa:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_STGEN
100091ac:	e237      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_QSPI:
    {
      clksource = __HAL_RCC_GET_QSPI_SOURCE();
100091ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100091b2:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
100091b6:	f003 0303 	and.w	r3, r3, #3
100091ba:	633b      	str	r3, [r7, #48]	; 0x30
100091bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100091be:	2b03      	cmp	r3, #3
100091c0:	d822      	bhi.n	10009208 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
100091c2:	a201      	add	r2, pc, #4	; (adr r2, 100091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
100091c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100091c8:	100091d9 	.word	0x100091d9
100091cc:	100091e1 	.word	0x100091e1
100091d0:	100091f1 	.word	0x100091f1
100091d4:	10009201 	.word	0x10009201

      switch (clksource)
      {
        case RCC_QSPICLKSOURCE_ACLK:
          frequency = HAL_RCC_GetACLKFreq();
100091d8:	f7fc fb69 	bl	100058ae <HAL_RCC_GetACLKFreq>
100091dc:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100091de:	e016      	b.n	1000920e <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

        case RCC_QSPICLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100091e0:	f107 0318 	add.w	r3, r7, #24
100091e4:	4618      	mov	r0, r3
100091e6:	f7fc f8f5 	bl	100053d4 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
100091ea:	6a3b      	ldr	r3, [r7, #32]
100091ec:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100091ee:	e00e      	b.n	1000920e <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

        case RCC_QSPICLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100091f0:	f107 030c 	add.w	r3, r7, #12
100091f4:	4618      	mov	r0, r3
100091f6:	f7fc f9e7 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
100091fa:	68fb      	ldr	r3, [r7, #12]
100091fc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100091fe:	e006      	b.n	1000920e <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

        case RCC_QSPICLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10009200:	f7fc fba2 	bl	10005948 <RCC_GetCKPERFreq>
10009204:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10009206:	e002      	b.n	1000920e <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

        default:
          frequency = 0;
10009208:	2300      	movs	r3, #0
1000920a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000920c:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_QSPI
1000920e:	e206      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_ETH:
    {
      clksource = __HAL_RCC_GET_ETH_SOURCE();
10009210:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009214:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
10009218:	f003 0303 	and.w	r3, r3, #3
1000921c:	633b      	str	r3, [r7, #48]	; 0x30
1000921e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009220:	2b00      	cmp	r3, #0
10009222:	d003      	beq.n	1000922c <HAL_RCCEx_GetPeriphCLKFreq+0x119c>
10009224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009226:	2b01      	cmp	r3, #1
10009228:	d008      	beq.n	1000923c <HAL_RCCEx_GetPeriphCLKFreq+0x11ac>
1000922a:	e00f      	b.n	1000924c <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>

      switch (clksource)
      {
        case RCC_ETHCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000922c:	f107 030c 	add.w	r3, r7, #12
10009230:	4618      	mov	r0, r3
10009232:	f7fc f9c9 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10009236:	68fb      	ldr	r3, [r7, #12]
10009238:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000923a:	e00a      	b.n	10009252 <HAL_RCCEx_GetPeriphCLKFreq+0x11c2>

        case RCC_ETHCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000923c:	f107 0318 	add.w	r3, r7, #24
10009240:	4618      	mov	r0, r3
10009242:	f7fc f8c7 	bl	100053d4 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10009246:	69fb      	ldr	r3, [r7, #28]
10009248:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000924a:	e002      	b.n	10009252 <HAL_RCCEx_GetPeriphCLKFreq+0x11c2>

        default:
          frequency = 0;
1000924c:	2300      	movs	r3, #0
1000924e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009250:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_ETH
10009252:	e1e4      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_FMC:
    {
      clksource = __HAL_RCC_GET_FMC_SOURCE();
10009254:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009258:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
1000925c:	f003 0303 	and.w	r3, r3, #3
10009260:	633b      	str	r3, [r7, #48]	; 0x30
10009262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009264:	2b03      	cmp	r3, #3
10009266:	f200 81d1 	bhi.w	1000960c <HAL_RCCEx_GetPeriphCLKFreq+0x157c>
1000926a:	a201      	add	r2, pc, #4	; (adr r2, 10009270 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
1000926c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009270:	10009281 	.word	0x10009281
10009274:	10009289 	.word	0x10009289
10009278:	10009299 	.word	0x10009299
1000927c:	100092a9 	.word	0x100092a9

      switch (clksource)
      {
        case RCC_FMCCLKSOURCE_ACLK:
          frequency = HAL_RCC_GetACLKFreq();
10009280:	f7fc fb15 	bl	100058ae <HAL_RCC_GetACLKFreq>
10009284:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10009286:	e013      	b.n	100092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>

        case RCC_FMCCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10009288:	f107 0318 	add.w	r3, r7, #24
1000928c:	4618      	mov	r0, r3
1000928e:	f7fc f8a1 	bl	100053d4 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10009292:	6a3b      	ldr	r3, [r7, #32]
10009294:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009296:	e00b      	b.n	100092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>

        case RCC_FMCCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10009298:	f107 030c 	add.w	r3, r7, #12
1000929c:	4618      	mov	r0, r3
1000929e:	f7fc f993 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
100092a2:	68fb      	ldr	r3, [r7, #12]
100092a4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100092a6:	e003      	b.n	100092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>

        case RCC_FMCCLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
100092a8:	f7fc fb4e 	bl	10005948 <RCC_GetCKPERFreq>
100092ac:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100092ae:	bf00      	nop

      }
    }
    break;//RCC_PERIPHCLK_FMC
100092b0:	e1ac      	b.n	1000960c <HAL_RCCEx_GetPeriphCLKFreq+0x157c>


    case RCC_PERIPHCLK_GPU:
    {
      HAL_RCC_GetPLL2ClockFreq(&pll2_clocks);
100092b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
100092b6:	4618      	mov	r0, r3
100092b8:	f7fb ffa0 	bl	100051fc <HAL_RCC_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_Q_Frequency;
100092bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
100092be:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_GPU
100092c0:	e1ad      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_USBO:
    {
      clksource = __HAL_RCC_GET_USBO_SOURCE();
100092c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100092c6:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
100092ca:	f003 0310 	and.w	r3, r3, #16
100092ce:	633b      	str	r3, [r7, #48]	; 0x30
100092d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100092d2:	2b00      	cmp	r3, #0
100092d4:	d003      	beq.n	100092de <HAL_RCCEx_GetPeriphCLKFreq+0x124e>
100092d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100092d8:	2b10      	cmp	r3, #16
100092da:	d008      	beq.n	100092ee <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
        case RCC_USBOCLKSOURCE_PHY:
          frequency = USB_PHY_VALUE;
          break;
      }
    }
    break;//RCC_PERIPHCLK_USBO
100092dc:	e19f      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100092de:	f107 030c 	add.w	r3, r7, #12
100092e2:	4618      	mov	r0, r3
100092e4:	f7fc f970 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
100092e8:	697b      	ldr	r3, [r7, #20]
100092ea:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100092ec:	e002      	b.n	100092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>
          frequency = USB_PHY_VALUE;
100092ee:	4b0f      	ldr	r3, [pc, #60]	; (1000932c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
100092f0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100092f2:	bf00      	nop
    break;//RCC_PERIPHCLK_USBO
100092f4:	e193      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SDMMC3:
    {
      clksource = __HAL_RCC_GET_SDMMC3_SOURCE();
100092f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100092fa:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
100092fe:	f003 0307 	and.w	r3, r3, #7
10009302:	633b      	str	r3, [r7, #48]	; 0x30
10009304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009306:	2b03      	cmp	r3, #3
10009308:	d830      	bhi.n	1000936c <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
1000930a:	a201      	add	r2, pc, #4	; (adr r2, 10009310 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
1000930c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009310:	10009331 	.word	0x10009331
10009314:	10009339 	.word	0x10009339
10009318:	10009349 	.word	0x10009349
1000931c:	10009359 	.word	0x10009359
10009320:	03d09000 	.word	0x03d09000
10009324:	003d0900 	.word	0x003d0900
10009328:	016e3600 	.word	0x016e3600
1000932c:	02dc6c00 	.word	0x02dc6c00

      switch (clksource)
      {
        case RCC_SDMMC3CLKSOURCE_HCLK2:
          frequency = HAL_RCC_GetHCLK2Freq();
10009330:	f7fc fae1 	bl	100058f6 <HAL_RCC_GetHCLK2Freq>
10009334:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10009336:	e01c      	b.n	10009372 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>

        case RCC_SDMMC3CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10009338:	f107 0318 	add.w	r3, r7, #24
1000933c:	4618      	mov	r0, r3
1000933e:	f7fc f849 	bl	100053d4 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10009342:	6a3b      	ldr	r3, [r7, #32]
10009344:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009346:	e014      	b.n	10009372 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>

        case RCC_SDMMC3CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10009348:	f107 030c 	add.w	r3, r7, #12
1000934c:	4618      	mov	r0, r3
1000934e:	f7fc f93b 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10009352:	68fb      	ldr	r3, [r7, #12]
10009354:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009356:	e00c      	b.n	10009372 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>

        case RCC_SDMMC3CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10009358:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000935c:	699b      	ldr	r3, [r3, #24]
1000935e:	f003 0303 	and.w	r3, r3, #3
10009362:	4ab1      	ldr	r2, [pc, #708]	; (10009628 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
10009364:	fa22 f303 	lsr.w	r3, r2, r3
10009368:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000936a:	e002      	b.n	10009372 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>

        default:
          frequency = 0;
1000936c:	2300      	movs	r3, #0
1000936e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009370:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SDMMC3
10009372:	e154      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_ADC:
    {
      clksource = __HAL_RCC_GET_ADC_SOURCE();
10009374:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009378:	f8d3 3928 	ldr.w	r3, [r3, #2344]	; 0x928
1000937c:	f003 0303 	and.w	r3, r3, #3
10009380:	633b      	str	r3, [r7, #48]	; 0x30
10009382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009384:	2b02      	cmp	r3, #2
10009386:	d015      	beq.n	100093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1324>
10009388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000938a:	2b02      	cmp	r3, #2
1000938c:	d81a      	bhi.n	100093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
1000938e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009390:	2b00      	cmp	r3, #0
10009392:	d003      	beq.n	1000939c <HAL_RCCEx_GetPeriphCLKFreq+0x130c>
10009394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009396:	2b01      	cmp	r3, #1
10009398:	d008      	beq.n	100093ac <HAL_RCCEx_GetPeriphCLKFreq+0x131c>
1000939a:	e013      	b.n	100093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>

      switch (clksource)
      {
        case RCC_ADCCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000939c:	f107 030c 	add.w	r3, r7, #12
100093a0:	4618      	mov	r0, r3
100093a2:	f7fc f911 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
100093a6:	697b      	ldr	r3, [r7, #20]
100093a8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100093aa:	e00e      	b.n	100093ca <HAL_RCCEx_GetPeriphCLKFreq+0x133a>

        case RCC_ADCCLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
100093ac:	f7fc facc 	bl	10005948 <RCC_GetCKPERFreq>
100093b0:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100093b2:	e00a      	b.n	100093ca <HAL_RCCEx_GetPeriphCLKFreq+0x133a>

        case RCC_ADCCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100093b4:	f107 0318 	add.w	r3, r7, #24
100093b8:	4618      	mov	r0, r3
100093ba:	f7fc f80b 	bl	100053d4 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
100093be:	69fb      	ldr	r3, [r7, #28]
100093c0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100093c2:	e002      	b.n	100093ca <HAL_RCCEx_GetPeriphCLKFreq+0x133a>

        default:
          frequency = 0;
100093c4:	2300      	movs	r3, #0
100093c6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100093c8:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_ADC */
100093ca:	e128      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_RNG2:
    {
      clksource = __HAL_RCC_GET_RNG2_SOURCE();
100093cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100093d0:	f8d3 3920 	ldr.w	r3, [r3, #2336]	; 0x920
100093d4:	f003 0303 	and.w	r3, r3, #3
100093d8:	633b      	str	r3, [r7, #48]	; 0x30
100093da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100093dc:	2b03      	cmp	r3, #3
100093de:	f200 8117 	bhi.w	10009610 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
100093e2:	a201      	add	r2, pc, #4	; (adr r2, 100093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>)
100093e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100093e8:	100093f9 	.word	0x100093f9
100093ec:	100093ff 	.word	0x100093ff
100093f0:	1000940f 	.word	0x1000940f
100093f4:	10009417 	.word	0x10009417

      switch (clksource)
      {
        case RCC_RNG2CLKSOURCE_CSI:
          frequency = CSI_VALUE;
100093f8:	4b8c      	ldr	r3, [pc, #560]	; (1000962c <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
100093fa:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100093fc:	e00f      	b.n	1000941e <HAL_RCCEx_GetPeriphCLKFreq+0x138e>

        case RCC_RNG2CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100093fe:	f107 030c 	add.w	r3, r7, #12
10009402:	4618      	mov	r0, r3
10009404:	f7fc f8e0 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10009408:	697b      	ldr	r3, [r7, #20]
1000940a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000940c:	e007      	b.n	1000941e <HAL_RCCEx_GetPeriphCLKFreq+0x138e>

        case RCC_RNG2CLKSOURCE_LSE:
          frequency = LSE_VALUE;
1000940e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10009412:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009414:	e003      	b.n	1000941e <HAL_RCCEx_GetPeriphCLKFreq+0x138e>

        case RCC_RNG2CLKSOURCE_LSI:
          frequency = LSI_VALUE;
10009416:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
1000941a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000941c:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_RNG2
1000941e:	e0f7      	b.n	10009610 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>


    case RCC_PERIPHCLK_RNG1:
    {
      clksource = __HAL_RCC_GET_RNG1_SOURCE();
10009420:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009424:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
10009428:	f003 0303 	and.w	r3, r3, #3
1000942c:	633b      	str	r3, [r7, #48]	; 0x30
1000942e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009430:	2b03      	cmp	r3, #3
10009432:	f200 80ef 	bhi.w	10009614 <HAL_RCCEx_GetPeriphCLKFreq+0x1584>
10009436:	a201      	add	r2, pc, #4	; (adr r2, 1000943c <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
10009438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000943c:	1000944d 	.word	0x1000944d
10009440:	10009453 	.word	0x10009453
10009444:	10009463 	.word	0x10009463
10009448:	1000946b 	.word	0x1000946b

      switch (clksource)
      {
        case RCC_RNG1CLKSOURCE_CSI:
          frequency = CSI_VALUE;
1000944c:	4b77      	ldr	r3, [pc, #476]	; (1000962c <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
1000944e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009450:	e00f      	b.n	10009472 <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>

        case RCC_RNG1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10009452:	f107 030c 	add.w	r3, r7, #12
10009456:	4618      	mov	r0, r3
10009458:	f7fc f8b6 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
1000945c:	697b      	ldr	r3, [r7, #20]
1000945e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009460:	e007      	b.n	10009472 <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>

        case RCC_RNG1CLKSOURCE_LSE:
          frequency = LSE_VALUE;
10009462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10009466:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009468:	e003      	b.n	10009472 <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>

        case RCC_RNG1CLKSOURCE_LSI:
          frequency = LSI_VALUE;
1000946a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
1000946e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009470:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_RNG1
10009472:	e0cf      	b.n	10009614 <HAL_RCCEx_GetPeriphCLKFreq+0x1584>

    case RCC_PERIPHCLK_SDMMC12:
    {
      clksource = __HAL_RCC_GET_SDMMC12_SOURCE();
10009474:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009478:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
1000947c:	f003 0307 	and.w	r3, r3, #7
10009480:	633b      	str	r3, [r7, #48]	; 0x30
10009482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009484:	2b03      	cmp	r3, #3
10009486:	d829      	bhi.n	100094dc <HAL_RCCEx_GetPeriphCLKFreq+0x144c>
10009488:	a201      	add	r2, pc, #4	; (adr r2, 10009490 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>)
1000948a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000948e:	bf00      	nop
10009490:	100094a1 	.word	0x100094a1
10009494:	100094a9 	.word	0x100094a9
10009498:	100094b9 	.word	0x100094b9
1000949c:	100094c9 	.word	0x100094c9

      switch (clksource)
      {
        case RCC_SDMMC12CLKSOURCE_HCLK6:
          frequency = HAL_RCC_GetHCLK6Freq();
100094a0:	f7fc fa22 	bl	100058e8 <HAL_RCC_GetHCLK6Freq>
100094a4:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100094a6:	e01c      	b.n	100094e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>

        case RCC_SDMMC12CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100094a8:	f107 0318 	add.w	r3, r7, #24
100094ac:	4618      	mov	r0, r3
100094ae:	f7fb ff91 	bl	100053d4 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
100094b2:	6a3b      	ldr	r3, [r7, #32]
100094b4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100094b6:	e014      	b.n	100094e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>

        case RCC_SDMMC12CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100094b8:	f107 030c 	add.w	r3, r7, #12
100094bc:	4618      	mov	r0, r3
100094be:	f7fc f883 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
100094c2:	68fb      	ldr	r3, [r7, #12]
100094c4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100094c6:	e00c      	b.n	100094e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>

        case RCC_SDMMC12CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100094c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100094cc:	699b      	ldr	r3, [r3, #24]
100094ce:	f003 0303 	and.w	r3, r3, #3
100094d2:	4a55      	ldr	r2, [pc, #340]	; (10009628 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
100094d4:	fa22 f303 	lsr.w	r3, r2, r3
100094d8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100094da:	e002      	b.n	100094e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>

        default:
          frequency = 0;
100094dc:	2300      	movs	r3, #0
100094de:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100094e0:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_SDMMC12 */
100094e2:	e09c      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_TIMG1:
    {
      frequency = HAL_RCC_GetMCUFreq();
100094e4:	f7fc fa15 	bl	10005912 <HAL_RCC_GetMCUFreq>
100094e8:	6378      	str	r0, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_TIMG1PRES() == RCC_TIMG1PRES_ACTIVATED)
100094ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100094ee:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
100094f2:	f003 0301 	and.w	r3, r3, #1
100094f6:	2b01      	cmp	r3, #1
100094f8:	d116      	bne.n	10009528 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
      {
        switch (__HAL_RCC_GET_APB1_DIV())
100094fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100094fe:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10009502:	f003 0307 	and.w	r3, r3, #7
10009506:	2b04      	cmp	r3, #4
10009508:	d00a      	beq.n	10009520 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
1000950a:	2b04      	cmp	r3, #4
1000950c:	f200 8084 	bhi.w	10009618 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
10009510:	2b02      	cmp	r3, #2
10009512:	d92b      	bls.n	1000956c <HAL_RCCEx_GetPeriphCLKFreq+0x14dc>
10009514:	2b03      	cmp	r3, #3
10009516:	d17f      	bne.n	10009618 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
          case RCC_APB1_DIV1:
          case RCC_APB1_DIV2:
          case RCC_APB1_DIV4:
            break;
          case RCC_APB1_DIV8:
            frequency /= 2UL;
10009518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000951a:	085b      	lsrs	r3, r3, #1
1000951c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
1000951e:	e028      	b.n	10009572 <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
          case RCC_APB1_DIV16:
            frequency /= 4UL;
10009520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10009522:	089b      	lsrs	r3, r3, #2
10009524:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10009526:	e024      	b.n	10009572 <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
        }
      }
      else
      {
        switch (__HAL_RCC_GET_APB1_DIV())
10009528:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000952c:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10009530:	f003 0307 	and.w	r3, r3, #7
10009534:	2b04      	cmp	r3, #4
10009536:	d86f      	bhi.n	10009618 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
10009538:	a201      	add	r2, pc, #4	; (adr r2, 10009540 <HAL_RCCEx_GetPeriphCLKFreq+0x14b0>)
1000953a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000953e:	bf00      	nop
10009540:	10009571 	.word	0x10009571
10009544:	10009571 	.word	0x10009571
10009548:	10009555 	.word	0x10009555
1000954c:	1000955d 	.word	0x1000955d
10009550:	10009565 	.word	0x10009565
        {
          case RCC_APB1_DIV1:
          case RCC_APB1_DIV2:
            break;
          case RCC_APB1_DIV4:
            frequency /= 2UL;
10009554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10009556:	085b      	lsrs	r3, r3, #1
10009558:	637b      	str	r3, [r7, #52]	; 0x34
            break;
1000955a:	e00a      	b.n	10009572 <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
          case RCC_APB1_DIV8:
            frequency /= 4UL;
1000955c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000955e:	089b      	lsrs	r3, r3, #2
10009560:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10009562:	e006      	b.n	10009572 <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
          case RCC_APB1_DIV16:
            frequency /= 8UL;
10009564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10009566:	08db      	lsrs	r3, r3, #3
10009568:	637b      	str	r3, [r7, #52]	; 0x34
            break;
1000956a:	e002      	b.n	10009572 <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
            break;
1000956c:	bf00      	nop
1000956e:	e053      	b.n	10009618 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
            break;
10009570:	bf00      	nop
        }
      }
    }
    break;
10009572:	e051      	b.n	10009618 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>


    case RCC_PERIPHCLK_TIMG2:
    {
      frequency = HAL_RCC_GetMCUFreq();
10009574:	f7fc f9cd 	bl	10005912 <HAL_RCC_GetMCUFreq>
10009578:	6378      	str	r0, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_TIMG2PRES() == RCC_TIMG2PRES_ACTIVATED)
1000957a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000957e:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
10009582:	f003 0301 	and.w	r3, r3, #1
10009586:	2b01      	cmp	r3, #1
10009588:	d115      	bne.n	100095b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
      {
        switch (__HAL_RCC_GET_APB2_DIV())
1000958a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000958e:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10009592:	f003 0307 	and.w	r3, r3, #7
10009596:	2b04      	cmp	r3, #4
10009598:	d009      	beq.n	100095ae <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
1000959a:	2b04      	cmp	r3, #4
1000959c:	d83e      	bhi.n	1000961c <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
1000959e:	2b02      	cmp	r3, #2
100095a0:	d92a      	bls.n	100095f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1568>
100095a2:	2b03      	cmp	r3, #3
100095a4:	d13a      	bne.n	1000961c <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
          case RCC_APB2_DIV1:
          case RCC_APB2_DIV2:
          case RCC_APB2_DIV4:
            break;
          case RCC_APB2_DIV8:
            frequency /= 2UL;
100095a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100095a8:	085b      	lsrs	r3, r3, #1
100095aa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
100095ac:	e027      	b.n	100095fe <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
          case RCC_APB2_DIV16:
            frequency /= 4UL;
100095ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100095b0:	089b      	lsrs	r3, r3, #2
100095b2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
100095b4:	e023      	b.n	100095fe <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
        }
      }
      else
      {
        switch (__HAL_RCC_GET_APB2_DIV())
100095b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100095ba:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
100095be:	f003 0307 	and.w	r3, r3, #7
100095c2:	2b04      	cmp	r3, #4
100095c4:	d82a      	bhi.n	1000961c <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
100095c6:	a201      	add	r2, pc, #4	; (adr r2, 100095cc <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
100095c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100095cc:	100095fd 	.word	0x100095fd
100095d0:	100095fd 	.word	0x100095fd
100095d4:	100095e1 	.word	0x100095e1
100095d8:	100095e9 	.word	0x100095e9
100095dc:	100095f1 	.word	0x100095f1
        {
          case RCC_APB2_DIV1:
          case RCC_APB2_DIV2:
            break;
          case RCC_APB2_DIV4:
            frequency /= 2UL;
100095e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100095e2:	085b      	lsrs	r3, r3, #1
100095e4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
100095e6:	e00a      	b.n	100095fe <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
          case RCC_APB2_DIV8:
            frequency /= 4UL;
100095e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100095ea:	089b      	lsrs	r3, r3, #2
100095ec:	637b      	str	r3, [r7, #52]	; 0x34
            break;
100095ee:	e006      	b.n	100095fe <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
          case RCC_APB2_DIV16:
            frequency /= 8UL;
100095f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100095f2:	08db      	lsrs	r3, r3, #3
100095f4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
100095f6:	e002      	b.n	100095fe <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
            break;
100095f8:	bf00      	nop
100095fa:	e00f      	b.n	1000961c <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
            break;
100095fc:	bf00      	nop
        }
      }
    }
    break;
100095fe:	e00d      	b.n	1000961c <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
      break; /* RCC_PERIPHCLK_I2C12 */
10009600:	bf00      	nop
10009602:	e00c      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
      break; /* RCC_PERIPHCLK_I2C35 */
10009604:	bf00      	nop
10009606:	e00a      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;//RCC_PERIPHCLK_RTC
10009608:	bf00      	nop
1000960a:	e008      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;//RCC_PERIPHCLK_FMC
1000960c:	bf00      	nop
1000960e:	e006      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;//RCC_PERIPHCLK_RNG2
10009610:	bf00      	nop
10009612:	e004      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;//RCC_PERIPHCLK_RNG1
10009614:	bf00      	nop
10009616:	e002      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;
10009618:	bf00      	nop
1000961a:	e000      	b.n	1000961e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;
1000961c:	bf00      	nop

  }

  return (frequency);
1000961e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
10009620:	4618      	mov	r0, r3
10009622:	373c      	adds	r7, #60	; 0x3c
10009624:	46bd      	mov	sp, r7
10009626:	bd90      	pop	{r4, r7, pc}
10009628:	03d09000 	.word	0x03d09000
1000962c:	003d0900 	.word	0x003d0900

10009630 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
10009630:	b580      	push	{r7, lr}
10009632:	b082      	sub	sp, #8
10009634:	af00      	add	r7, sp, #0
10009636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
10009638:	687b      	ldr	r3, [r7, #4]
1000963a:	2b00      	cmp	r3, #0
1000963c:	d101      	bne.n	10009642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
1000963e:	2301      	movs	r3, #1
10009640:	e042      	b.n	100096c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
10009642:	687b      	ldr	r3, [r7, #4]
10009644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10009648:	2b00      	cmp	r3, #0
1000964a:	d106      	bne.n	1000965a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
1000964c:	687b      	ldr	r3, [r7, #4]
1000964e:	2200      	movs	r2, #0
10009650:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
10009654:	6878      	ldr	r0, [r7, #4]
10009656:	f7f7 ffef 	bl	10001638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
1000965a:	687b      	ldr	r3, [r7, #4]
1000965c:	2224      	movs	r2, #36	; 0x24
1000965e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
10009662:	687b      	ldr	r3, [r7, #4]
10009664:	681b      	ldr	r3, [r3, #0]
10009666:	681a      	ldr	r2, [r3, #0]
10009668:	687b      	ldr	r3, [r7, #4]
1000966a:	681b      	ldr	r3, [r3, #0]
1000966c:	f022 0201 	bic.w	r2, r2, #1
10009670:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
10009672:	6878      	ldr	r0, [r7, #4]
10009674:	f000 f8c4 	bl	10009800 <UART_SetConfig>
10009678:	4603      	mov	r3, r0
1000967a:	2b01      	cmp	r3, #1
1000967c:	d101      	bne.n	10009682 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
1000967e:	2301      	movs	r3, #1
10009680:	e022      	b.n	100096c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
10009682:	687b      	ldr	r3, [r7, #4]
10009684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10009686:	2b00      	cmp	r3, #0
10009688:	d002      	beq.n	10009690 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
1000968a:	6878      	ldr	r0, [r7, #4]
1000968c:	f001 f95e 	bl	1000a94c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
10009690:	687b      	ldr	r3, [r7, #4]
10009692:	681b      	ldr	r3, [r3, #0]
10009694:	685a      	ldr	r2, [r3, #4]
10009696:	687b      	ldr	r3, [r7, #4]
10009698:	681b      	ldr	r3, [r3, #0]
1000969a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
1000969e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
100096a0:	687b      	ldr	r3, [r7, #4]
100096a2:	681b      	ldr	r3, [r3, #0]
100096a4:	689a      	ldr	r2, [r3, #8]
100096a6:	687b      	ldr	r3, [r7, #4]
100096a8:	681b      	ldr	r3, [r3, #0]
100096aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
100096ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
100096b0:	687b      	ldr	r3, [r7, #4]
100096b2:	681b      	ldr	r3, [r3, #0]
100096b4:	681a      	ldr	r2, [r3, #0]
100096b6:	687b      	ldr	r3, [r7, #4]
100096b8:	681b      	ldr	r3, [r3, #0]
100096ba:	f042 0201 	orr.w	r2, r2, #1
100096be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
100096c0:	6878      	ldr	r0, [r7, #4]
100096c2:	f001 f9e5 	bl	1000aa90 <UART_CheckIdleState>
100096c6:	4603      	mov	r3, r0
}
100096c8:	4618      	mov	r0, r3
100096ca:	3708      	adds	r7, #8
100096cc:	46bd      	mov	sp, r7
100096ce:	bd80      	pop	{r7, pc}

100096d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
100096d0:	b580      	push	{r7, lr}
100096d2:	b08a      	sub	sp, #40	; 0x28
100096d4:	af02      	add	r7, sp, #8
100096d6:	60f8      	str	r0, [r7, #12]
100096d8:	60b9      	str	r1, [r7, #8]
100096da:	603b      	str	r3, [r7, #0]
100096dc:	4613      	mov	r3, r2
100096de:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
100096e0:	68fb      	ldr	r3, [r7, #12]
100096e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
100096e6:	2b20      	cmp	r3, #32
100096e8:	f040 8084 	bne.w	100097f4 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
100096ec:	68bb      	ldr	r3, [r7, #8]
100096ee:	2b00      	cmp	r3, #0
100096f0:	d002      	beq.n	100096f8 <HAL_UART_Transmit+0x28>
100096f2:	88fb      	ldrh	r3, [r7, #6]
100096f4:	2b00      	cmp	r3, #0
100096f6:	d101      	bne.n	100096fc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
100096f8:	2301      	movs	r3, #1
100096fa:	e07c      	b.n	100097f6 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
100096fc:	68fb      	ldr	r3, [r7, #12]
100096fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
10009702:	2b01      	cmp	r3, #1
10009704:	d101      	bne.n	1000970a <HAL_UART_Transmit+0x3a>
10009706:	2302      	movs	r3, #2
10009708:	e075      	b.n	100097f6 <HAL_UART_Transmit+0x126>
1000970a:	68fb      	ldr	r3, [r7, #12]
1000970c:	2201      	movs	r2, #1
1000970e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    huart->ErrorCode = HAL_UART_ERROR_NONE;
10009712:	68fb      	ldr	r3, [r7, #12]
10009714:	2200      	movs	r2, #0
10009716:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
1000971a:	68fb      	ldr	r3, [r7, #12]
1000971c:	2221      	movs	r2, #33	; 0x21
1000971e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
10009722:	f7f8 f987 	bl	10001a34 <HAL_GetTick>
10009726:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
10009728:	68fb      	ldr	r3, [r7, #12]
1000972a:	88fa      	ldrh	r2, [r7, #6]
1000972c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
10009730:	68fb      	ldr	r3, [r7, #12]
10009732:	88fa      	ldrh	r2, [r7, #6]
10009734:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
10009738:	68fb      	ldr	r3, [r7, #12]
1000973a:	689b      	ldr	r3, [r3, #8]
1000973c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
10009740:	d108      	bne.n	10009754 <HAL_UART_Transmit+0x84>
10009742:	68fb      	ldr	r3, [r7, #12]
10009744:	691b      	ldr	r3, [r3, #16]
10009746:	2b00      	cmp	r3, #0
10009748:	d104      	bne.n	10009754 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
1000974a:	2300      	movs	r3, #0
1000974c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
1000974e:	68bb      	ldr	r3, [r7, #8]
10009750:	61bb      	str	r3, [r7, #24]
10009752:	e003      	b.n	1000975c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
10009754:	68bb      	ldr	r3, [r7, #8]
10009756:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
10009758:	2300      	movs	r3, #0
1000975a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
1000975c:	68fb      	ldr	r3, [r7, #12]
1000975e:	2200      	movs	r2, #0
10009760:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    while (huart->TxXferCount > 0U)
10009764:	e02d      	b.n	100097c2 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
10009766:	683b      	ldr	r3, [r7, #0]
10009768:	9300      	str	r3, [sp, #0]
1000976a:	697b      	ldr	r3, [r7, #20]
1000976c:	2200      	movs	r2, #0
1000976e:	2180      	movs	r1, #128	; 0x80
10009770:	68f8      	ldr	r0, [r7, #12]
10009772:	f001 f9d5 	bl	1000ab20 <UART_WaitOnFlagUntilTimeout>
10009776:	4603      	mov	r3, r0
10009778:	2b00      	cmp	r3, #0
1000977a:	d001      	beq.n	10009780 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
1000977c:	2303      	movs	r3, #3
1000977e:	e03a      	b.n	100097f6 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
10009780:	69fb      	ldr	r3, [r7, #28]
10009782:	2b00      	cmp	r3, #0
10009784:	d10b      	bne.n	1000979e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
10009786:	69bb      	ldr	r3, [r7, #24]
10009788:	881a      	ldrh	r2, [r3, #0]
1000978a:	68fb      	ldr	r3, [r7, #12]
1000978c:	681b      	ldr	r3, [r3, #0]
1000978e:	f3c2 0208 	ubfx	r2, r2, #0, #9
10009792:	b292      	uxth	r2, r2
10009794:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
10009796:	69bb      	ldr	r3, [r7, #24]
10009798:	3302      	adds	r3, #2
1000979a:	61bb      	str	r3, [r7, #24]
1000979c:	e008      	b.n	100097b0 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
1000979e:	69fb      	ldr	r3, [r7, #28]
100097a0:	781a      	ldrb	r2, [r3, #0]
100097a2:	68fb      	ldr	r3, [r7, #12]
100097a4:	681b      	ldr	r3, [r3, #0]
100097a6:	b292      	uxth	r2, r2
100097a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
100097aa:	69fb      	ldr	r3, [r7, #28]
100097ac:	3301      	adds	r3, #1
100097ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
100097b0:	68fb      	ldr	r3, [r7, #12]
100097b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
100097b6:	b29b      	uxth	r3, r3
100097b8:	3b01      	subs	r3, #1
100097ba:	b29a      	uxth	r2, r3
100097bc:	68fb      	ldr	r3, [r7, #12]
100097be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
100097c2:	68fb      	ldr	r3, [r7, #12]
100097c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
100097c8:	b29b      	uxth	r3, r3
100097ca:	2b00      	cmp	r3, #0
100097cc:	d1cb      	bne.n	10009766 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
100097ce:	683b      	ldr	r3, [r7, #0]
100097d0:	9300      	str	r3, [sp, #0]
100097d2:	697b      	ldr	r3, [r7, #20]
100097d4:	2200      	movs	r2, #0
100097d6:	2140      	movs	r1, #64	; 0x40
100097d8:	68f8      	ldr	r0, [r7, #12]
100097da:	f001 f9a1 	bl	1000ab20 <UART_WaitOnFlagUntilTimeout>
100097de:	4603      	mov	r3, r0
100097e0:	2b00      	cmp	r3, #0
100097e2:	d001      	beq.n	100097e8 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
100097e4:	2303      	movs	r3, #3
100097e6:	e006      	b.n	100097f6 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
100097e8:	68fb      	ldr	r3, [r7, #12]
100097ea:	2220      	movs	r2, #32
100097ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
100097f0:	2300      	movs	r3, #0
100097f2:	e000      	b.n	100097f6 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
100097f4:	2302      	movs	r3, #2
  }
}
100097f6:	4618      	mov	r0, r3
100097f8:	3720      	adds	r7, #32
100097fa:	46bd      	mov	sp, r7
100097fc:	bd80      	pop	{r7, pc}
	...

10009800 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
10009800:	b580      	push	{r7, lr}
10009802:	b08e      	sub	sp, #56	; 0x38
10009804:	af00      	add	r7, sp, #0
10009806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
10009808:	2300      	movs	r3, #0
1000980a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_StatusTypeDef ret               = HAL_OK;
1000980c:	2300      	movs	r3, #0
1000980e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
10009812:	687b      	ldr	r3, [r7, #4]
10009814:	689a      	ldr	r2, [r3, #8]
10009816:	687b      	ldr	r3, [r7, #4]
10009818:	691b      	ldr	r3, [r3, #16]
1000981a:	431a      	orrs	r2, r3
1000981c:	687b      	ldr	r3, [r7, #4]
1000981e:	695b      	ldr	r3, [r3, #20]
10009820:	431a      	orrs	r2, r3
10009822:	687b      	ldr	r3, [r7, #4]
10009824:	69db      	ldr	r3, [r3, #28]
10009826:	4313      	orrs	r3, r2
10009828:	62bb      	str	r3, [r7, #40]	; 0x28
  tmpreg |= (uint32_t)huart->FifoMode;
1000982a:	687b      	ldr	r3, [r7, #4]
1000982c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
1000982e:	6aba      	ldr	r2, [r7, #40]	; 0x28
10009830:	4313      	orrs	r3, r2
10009832:	62bb      	str	r3, [r7, #40]	; 0x28
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
10009834:	687b      	ldr	r3, [r7, #4]
10009836:	681b      	ldr	r3, [r3, #0]
10009838:	681a      	ldr	r2, [r3, #0]
1000983a:	4bb1      	ldr	r3, [pc, #708]	; (10009b00 <UART_SetConfig+0x300>)
1000983c:	4013      	ands	r3, r2
1000983e:	687a      	ldr	r2, [r7, #4]
10009840:	6812      	ldr	r2, [r2, #0]
10009842:	6ab9      	ldr	r1, [r7, #40]	; 0x28
10009844:	430b      	orrs	r3, r1
10009846:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
10009848:	687b      	ldr	r3, [r7, #4]
1000984a:	681b      	ldr	r3, [r3, #0]
1000984c:	685b      	ldr	r3, [r3, #4]
1000984e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
10009852:	687b      	ldr	r3, [r7, #4]
10009854:	68da      	ldr	r2, [r3, #12]
10009856:	687b      	ldr	r3, [r7, #4]
10009858:	681b      	ldr	r3, [r3, #0]
1000985a:	430a      	orrs	r2, r1
1000985c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
1000985e:	687b      	ldr	r3, [r7, #4]
10009860:	699b      	ldr	r3, [r3, #24]
10009862:	62bb      	str	r3, [r7, #40]	; 0x28

  tmpreg |= huart->Init.OneBitSampling;
10009864:	687b      	ldr	r3, [r7, #4]
10009866:	6a1b      	ldr	r3, [r3, #32]
10009868:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000986a:	4313      	orrs	r3, r2
1000986c:	62bb      	str	r3, [r7, #40]	; 0x28
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
1000986e:	687b      	ldr	r3, [r7, #4]
10009870:	681b      	ldr	r3, [r3, #0]
10009872:	689b      	ldr	r3, [r3, #8]
10009874:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
10009878:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
1000987c:	687a      	ldr	r2, [r7, #4]
1000987e:	6812      	ldr	r2, [r2, #0]
10009880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
10009882:	430b      	orrs	r3, r1
10009884:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
10009886:	687b      	ldr	r3, [r7, #4]
10009888:	681b      	ldr	r3, [r3, #0]
1000988a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000988c:	f023 010f 	bic.w	r1, r3, #15
10009890:	687b      	ldr	r3, [r7, #4]
10009892:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10009894:	687b      	ldr	r3, [r7, #4]
10009896:	681b      	ldr	r3, [r3, #0]
10009898:	430a      	orrs	r2, r1
1000989a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
1000989c:	687b      	ldr	r3, [r7, #4]
1000989e:	681b      	ldr	r3, [r3, #0]
100098a0:	f1b3 4fb8 	cmp.w	r3, #1543503872	; 0x5c000000
100098a4:	d132      	bne.n	1000990c <UART_SetConfig+0x10c>
100098a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100098aa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
100098ae:	f003 0307 	and.w	r3, r3, #7
100098b2:	2b05      	cmp	r3, #5
100098b4:	d826      	bhi.n	10009904 <UART_SetConfig+0x104>
100098b6:	a201      	add	r2, pc, #4	; (adr r2, 100098bc <UART_SetConfig+0xbc>)
100098b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100098bc:	100098d5 	.word	0x100098d5
100098c0:	100098dd 	.word	0x100098dd
100098c4:	100098e5 	.word	0x100098e5
100098c8:	100098ed 	.word	0x100098ed
100098cc:	100098f5 	.word	0x100098f5
100098d0:	100098fd 	.word	0x100098fd
100098d4:	2302      	movs	r3, #2
100098d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100098da:	e184      	b.n	10009be6 <UART_SetConfig+0x3e6>
100098dc:	2304      	movs	r3, #4
100098de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100098e2:	e180      	b.n	10009be6 <UART_SetConfig+0x3e6>
100098e4:	2310      	movs	r3, #16
100098e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100098ea:	e17c      	b.n	10009be6 <UART_SetConfig+0x3e6>
100098ec:	2320      	movs	r3, #32
100098ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100098f2:	e178      	b.n	10009be6 <UART_SetConfig+0x3e6>
100098f4:	2308      	movs	r3, #8
100098f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100098fa:	e174      	b.n	10009be6 <UART_SetConfig+0x3e6>
100098fc:	2340      	movs	r3, #64	; 0x40
100098fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009902:	e170      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009904:	2380      	movs	r3, #128	; 0x80
10009906:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000990a:	e16c      	b.n	10009be6 <UART_SetConfig+0x3e6>
1000990c:	687b      	ldr	r3, [r7, #4]
1000990e:	681b      	ldr	r3, [r3, #0]
10009910:	4a7c      	ldr	r2, [pc, #496]	; (10009b04 <UART_SetConfig+0x304>)
10009912:	4293      	cmp	r3, r2
10009914:	d12c      	bne.n	10009970 <UART_SetConfig+0x170>
10009916:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000991a:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
1000991e:	f003 0307 	and.w	r3, r3, #7
10009922:	2b04      	cmp	r3, #4
10009924:	d820      	bhi.n	10009968 <UART_SetConfig+0x168>
10009926:	a201      	add	r2, pc, #4	; (adr r2, 1000992c <UART_SetConfig+0x12c>)
10009928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000992c:	10009941 	.word	0x10009941
10009930:	10009949 	.word	0x10009949
10009934:	10009951 	.word	0x10009951
10009938:	10009959 	.word	0x10009959
1000993c:	10009961 	.word	0x10009961
10009940:	2300      	movs	r3, #0
10009942:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009946:	e14e      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009948:	2308      	movs	r3, #8
1000994a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000994e:	e14a      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009950:	2310      	movs	r3, #16
10009952:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009956:	e146      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009958:	2320      	movs	r3, #32
1000995a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000995e:	e142      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009960:	2340      	movs	r3, #64	; 0x40
10009962:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009966:	e13e      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009968:	2380      	movs	r3, #128	; 0x80
1000996a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000996e:	e13a      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009970:	687b      	ldr	r3, [r7, #4]
10009972:	681b      	ldr	r3, [r3, #0]
10009974:	4a64      	ldr	r2, [pc, #400]	; (10009b08 <UART_SetConfig+0x308>)
10009976:	4293      	cmp	r3, r2
10009978:	d12c      	bne.n	100099d4 <UART_SetConfig+0x1d4>
1000997a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000997e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
10009982:	f003 0307 	and.w	r3, r3, #7
10009986:	2b04      	cmp	r3, #4
10009988:	d820      	bhi.n	100099cc <UART_SetConfig+0x1cc>
1000998a:	a201      	add	r2, pc, #4	; (adr r2, 10009990 <UART_SetConfig+0x190>)
1000998c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009990:	100099a5 	.word	0x100099a5
10009994:	100099ad 	.word	0x100099ad
10009998:	100099b5 	.word	0x100099b5
1000999c:	100099bd 	.word	0x100099bd
100099a0:	100099c5 	.word	0x100099c5
100099a4:	2300      	movs	r3, #0
100099a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100099aa:	e11c      	b.n	10009be6 <UART_SetConfig+0x3e6>
100099ac:	2308      	movs	r3, #8
100099ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100099b2:	e118      	b.n	10009be6 <UART_SetConfig+0x3e6>
100099b4:	2310      	movs	r3, #16
100099b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100099ba:	e114      	b.n	10009be6 <UART_SetConfig+0x3e6>
100099bc:	2320      	movs	r3, #32
100099be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100099c2:	e110      	b.n	10009be6 <UART_SetConfig+0x3e6>
100099c4:	2340      	movs	r3, #64	; 0x40
100099c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100099ca:	e10c      	b.n	10009be6 <UART_SetConfig+0x3e6>
100099cc:	2380      	movs	r3, #128	; 0x80
100099ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100099d2:	e108      	b.n	10009be6 <UART_SetConfig+0x3e6>
100099d4:	687b      	ldr	r3, [r7, #4]
100099d6:	681b      	ldr	r3, [r3, #0]
100099d8:	4a4c      	ldr	r2, [pc, #304]	; (10009b0c <UART_SetConfig+0x30c>)
100099da:	4293      	cmp	r3, r2
100099dc:	d12c      	bne.n	10009a38 <UART_SetConfig+0x238>
100099de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100099e2:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
100099e6:	f003 0307 	and.w	r3, r3, #7
100099ea:	2b04      	cmp	r3, #4
100099ec:	d820      	bhi.n	10009a30 <UART_SetConfig+0x230>
100099ee:	a201      	add	r2, pc, #4	; (adr r2, 100099f4 <UART_SetConfig+0x1f4>)
100099f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100099f4:	10009a09 	.word	0x10009a09
100099f8:	10009a11 	.word	0x10009a11
100099fc:	10009a19 	.word	0x10009a19
10009a00:	10009a21 	.word	0x10009a21
10009a04:	10009a29 	.word	0x10009a29
10009a08:	2300      	movs	r3, #0
10009a0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009a0e:	e0ea      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009a10:	2308      	movs	r3, #8
10009a12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009a16:	e0e6      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009a18:	2310      	movs	r3, #16
10009a1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009a1e:	e0e2      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009a20:	2320      	movs	r3, #32
10009a22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009a26:	e0de      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009a28:	2340      	movs	r3, #64	; 0x40
10009a2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009a2e:	e0da      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009a30:	2380      	movs	r3, #128	; 0x80
10009a32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009a36:	e0d6      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009a38:	687b      	ldr	r3, [r7, #4]
10009a3a:	681b      	ldr	r3, [r3, #0]
10009a3c:	4a34      	ldr	r2, [pc, #208]	; (10009b10 <UART_SetConfig+0x310>)
10009a3e:	4293      	cmp	r3, r2
10009a40:	d12c      	bne.n	10009a9c <UART_SetConfig+0x29c>
10009a42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009a46:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
10009a4a:	f003 0307 	and.w	r3, r3, #7
10009a4e:	2b04      	cmp	r3, #4
10009a50:	d820      	bhi.n	10009a94 <UART_SetConfig+0x294>
10009a52:	a201      	add	r2, pc, #4	; (adr r2, 10009a58 <UART_SetConfig+0x258>)
10009a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009a58:	10009a6d 	.word	0x10009a6d
10009a5c:	10009a75 	.word	0x10009a75
10009a60:	10009a7d 	.word	0x10009a7d
10009a64:	10009a85 	.word	0x10009a85
10009a68:	10009a8d 	.word	0x10009a8d
10009a6c:	2300      	movs	r3, #0
10009a6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009a72:	e0b8      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009a74:	2308      	movs	r3, #8
10009a76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009a7a:	e0b4      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009a7c:	2310      	movs	r3, #16
10009a7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009a82:	e0b0      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009a84:	2320      	movs	r3, #32
10009a86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009a8a:	e0ac      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009a8c:	2340      	movs	r3, #64	; 0x40
10009a8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009a92:	e0a8      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009a94:	2380      	movs	r3, #128	; 0x80
10009a96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009a9a:	e0a4      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009a9c:	687b      	ldr	r3, [r7, #4]
10009a9e:	681b      	ldr	r3, [r3, #0]
10009aa0:	4a1c      	ldr	r2, [pc, #112]	; (10009b14 <UART_SetConfig+0x314>)
10009aa2:	4293      	cmp	r3, r2
10009aa4:	d138      	bne.n	10009b18 <UART_SetConfig+0x318>
10009aa6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009aaa:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
10009aae:	f003 0307 	and.w	r3, r3, #7
10009ab2:	2b04      	cmp	r3, #4
10009ab4:	d820      	bhi.n	10009af8 <UART_SetConfig+0x2f8>
10009ab6:	a201      	add	r2, pc, #4	; (adr r2, 10009abc <UART_SetConfig+0x2bc>)
10009ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009abc:	10009ad1 	.word	0x10009ad1
10009ac0:	10009ad9 	.word	0x10009ad9
10009ac4:	10009ae1 	.word	0x10009ae1
10009ac8:	10009ae9 	.word	0x10009ae9
10009acc:	10009af1 	.word	0x10009af1
10009ad0:	2301      	movs	r3, #1
10009ad2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009ad6:	e086      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009ad8:	2308      	movs	r3, #8
10009ada:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009ade:	e082      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009ae0:	2310      	movs	r3, #16
10009ae2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009ae6:	e07e      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009ae8:	2320      	movs	r3, #32
10009aea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009aee:	e07a      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009af0:	2340      	movs	r3, #64	; 0x40
10009af2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009af6:	e076      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009af8:	2380      	movs	r3, #128	; 0x80
10009afa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009afe:	e072      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009b00:	cfff69f3 	.word	0xcfff69f3
10009b04:	4000e000 	.word	0x4000e000
10009b08:	4000f000 	.word	0x4000f000
10009b0c:	40010000 	.word	0x40010000
10009b10:	40011000 	.word	0x40011000
10009b14:	44003000 	.word	0x44003000
10009b18:	687b      	ldr	r3, [r7, #4]
10009b1a:	681b      	ldr	r3, [r3, #0]
10009b1c:	4aab      	ldr	r2, [pc, #684]	; (10009dcc <UART_SetConfig+0x5cc>)
10009b1e:	4293      	cmp	r3, r2
10009b20:	d12c      	bne.n	10009b7c <UART_SetConfig+0x37c>
10009b22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009b26:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
10009b2a:	f003 0307 	and.w	r3, r3, #7
10009b2e:	2b04      	cmp	r3, #4
10009b30:	d820      	bhi.n	10009b74 <UART_SetConfig+0x374>
10009b32:	a201      	add	r2, pc, #4	; (adr r2, 10009b38 <UART_SetConfig+0x338>)
10009b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009b38:	10009b4d 	.word	0x10009b4d
10009b3c:	10009b55 	.word	0x10009b55
10009b40:	10009b5d 	.word	0x10009b5d
10009b44:	10009b65 	.word	0x10009b65
10009b48:	10009b6d 	.word	0x10009b6d
10009b4c:	2300      	movs	r3, #0
10009b4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009b52:	e048      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009b54:	2308      	movs	r3, #8
10009b56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009b5a:	e044      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009b5c:	2310      	movs	r3, #16
10009b5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009b62:	e040      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009b64:	2320      	movs	r3, #32
10009b66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009b6a:	e03c      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009b6c:	2340      	movs	r3, #64	; 0x40
10009b6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009b72:	e038      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009b74:	2380      	movs	r3, #128	; 0x80
10009b76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009b7a:	e034      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009b7c:	687b      	ldr	r3, [r7, #4]
10009b7e:	681b      	ldr	r3, [r3, #0]
10009b80:	4a93      	ldr	r2, [pc, #588]	; (10009dd0 <UART_SetConfig+0x5d0>)
10009b82:	4293      	cmp	r3, r2
10009b84:	d12c      	bne.n	10009be0 <UART_SetConfig+0x3e0>
10009b86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009b8a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
10009b8e:	f003 0307 	and.w	r3, r3, #7
10009b92:	2b04      	cmp	r3, #4
10009b94:	d820      	bhi.n	10009bd8 <UART_SetConfig+0x3d8>
10009b96:	a201      	add	r2, pc, #4	; (adr r2, 10009b9c <UART_SetConfig+0x39c>)
10009b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009b9c:	10009bb1 	.word	0x10009bb1
10009ba0:	10009bb9 	.word	0x10009bb9
10009ba4:	10009bc1 	.word	0x10009bc1
10009ba8:	10009bc9 	.word	0x10009bc9
10009bac:	10009bd1 	.word	0x10009bd1
10009bb0:	2300      	movs	r3, #0
10009bb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009bb6:	e016      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009bb8:	2308      	movs	r3, #8
10009bba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009bbe:	e012      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009bc0:	2310      	movs	r3, #16
10009bc2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009bc6:	e00e      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009bc8:	2320      	movs	r3, #32
10009bca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009bce:	e00a      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009bd0:	2340      	movs	r3, #64	; 0x40
10009bd2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009bd6:	e006      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009bd8:	2380      	movs	r3, #128	; 0x80
10009bda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009bde:	e002      	b.n	10009be6 <UART_SetConfig+0x3e6>
10009be0:	2380      	movs	r3, #128	; 0x80
10009be2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
10009be6:	687b      	ldr	r3, [r7, #4]
10009be8:	69db      	ldr	r3, [r3, #28]
10009bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
10009bee:	f040 8354 	bne.w	1000a29a <UART_SetConfig+0xa9a>
  {
    switch (clocksource)
10009bf2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
10009bf6:	2b20      	cmp	r3, #32
10009bf8:	dc4a      	bgt.n	10009c90 <UART_SetConfig+0x490>
10009bfa:	2b00      	cmp	r3, #0
10009bfc:	f2c0 832b 	blt.w	1000a256 <UART_SetConfig+0xa56>
10009c00:	2b20      	cmp	r3, #32
10009c02:	f200 8328 	bhi.w	1000a256 <UART_SetConfig+0xa56>
10009c06:	a201      	add	r2, pc, #4	; (adr r2, 10009c0c <UART_SetConfig+0x40c>)
10009c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009c0c:	10009c99 	.word	0x10009c99
10009c10:	10009d51 	.word	0x10009d51
10009c14:	10009e11 	.word	0x10009e11
10009c18:	1000a257 	.word	0x1000a257
10009c1c:	10009ec9 	.word	0x10009ec9
10009c20:	1000a257 	.word	0x1000a257
10009c24:	1000a257 	.word	0x1000a257
10009c28:	1000a257 	.word	0x1000a257
10009c2c:	10009f85 	.word	0x10009f85
10009c30:	1000a257 	.word	0x1000a257
10009c34:	1000a257 	.word	0x1000a257
10009c38:	1000a257 	.word	0x1000a257
10009c3c:	1000a257 	.word	0x1000a257
10009c40:	1000a257 	.word	0x1000a257
10009c44:	1000a257 	.word	0x1000a257
10009c48:	1000a257 	.word	0x1000a257
10009c4c:	1000a041 	.word	0x1000a041
10009c50:	1000a257 	.word	0x1000a257
10009c54:	1000a257 	.word	0x1000a257
10009c58:	1000a257 	.word	0x1000a257
10009c5c:	1000a257 	.word	0x1000a257
10009c60:	1000a257 	.word	0x1000a257
10009c64:	1000a257 	.word	0x1000a257
10009c68:	1000a257 	.word	0x1000a257
10009c6c:	1000a257 	.word	0x1000a257
10009c70:	1000a257 	.word	0x1000a257
10009c74:	1000a257 	.word	0x1000a257
10009c78:	1000a257 	.word	0x1000a257
10009c7c:	1000a257 	.word	0x1000a257
10009c80:	1000a257 	.word	0x1000a257
10009c84:	1000a257 	.word	0x1000a257
10009c88:	1000a257 	.word	0x1000a257
10009c8c:	1000a0f3 	.word	0x1000a0f3
10009c90:	2b40      	cmp	r3, #64	; 0x40
10009c92:	f000 8287 	beq.w	1000a1a4 <UART_SetConfig+0x9a4>
10009c96:	e2de      	b.n	1000a256 <UART_SetConfig+0xa56>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
10009c98:	f7fb fd9e 	bl	100057d8 <HAL_RCC_GetPCLK1Freq>
10009c9c:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009c9e:	687b      	ldr	r3, [r7, #4]
10009ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ca2:	2b00      	cmp	r3, #0
10009ca4:	d044      	beq.n	10009d30 <UART_SetConfig+0x530>
10009ca6:	687b      	ldr	r3, [r7, #4]
10009ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009caa:	2b01      	cmp	r3, #1
10009cac:	d03e      	beq.n	10009d2c <UART_SetConfig+0x52c>
10009cae:	687b      	ldr	r3, [r7, #4]
10009cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009cb2:	2b02      	cmp	r3, #2
10009cb4:	d038      	beq.n	10009d28 <UART_SetConfig+0x528>
10009cb6:	687b      	ldr	r3, [r7, #4]
10009cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009cba:	2b03      	cmp	r3, #3
10009cbc:	d032      	beq.n	10009d24 <UART_SetConfig+0x524>
10009cbe:	687b      	ldr	r3, [r7, #4]
10009cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009cc2:	2b04      	cmp	r3, #4
10009cc4:	d02c      	beq.n	10009d20 <UART_SetConfig+0x520>
10009cc6:	687b      	ldr	r3, [r7, #4]
10009cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009cca:	2b05      	cmp	r3, #5
10009ccc:	d026      	beq.n	10009d1c <UART_SetConfig+0x51c>
10009cce:	687b      	ldr	r3, [r7, #4]
10009cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009cd2:	2b06      	cmp	r3, #6
10009cd4:	d020      	beq.n	10009d18 <UART_SetConfig+0x518>
10009cd6:	687b      	ldr	r3, [r7, #4]
10009cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009cda:	2b07      	cmp	r3, #7
10009cdc:	d01a      	beq.n	10009d14 <UART_SetConfig+0x514>
10009cde:	687b      	ldr	r3, [r7, #4]
10009ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ce2:	2b08      	cmp	r3, #8
10009ce4:	d014      	beq.n	10009d10 <UART_SetConfig+0x510>
10009ce6:	687b      	ldr	r3, [r7, #4]
10009ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009cea:	2b09      	cmp	r3, #9
10009cec:	d00e      	beq.n	10009d0c <UART_SetConfig+0x50c>
10009cee:	687b      	ldr	r3, [r7, #4]
10009cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009cf2:	2b0a      	cmp	r3, #10
10009cf4:	d008      	beq.n	10009d08 <UART_SetConfig+0x508>
10009cf6:	687b      	ldr	r3, [r7, #4]
10009cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009cfa:	2b0b      	cmp	r3, #11
10009cfc:	d102      	bne.n	10009d04 <UART_SetConfig+0x504>
10009cfe:	f44f 7380 	mov.w	r3, #256	; 0x100
10009d02:	e016      	b.n	10009d32 <UART_SetConfig+0x532>
10009d04:	2301      	movs	r3, #1
10009d06:	e014      	b.n	10009d32 <UART_SetConfig+0x532>
10009d08:	2380      	movs	r3, #128	; 0x80
10009d0a:	e012      	b.n	10009d32 <UART_SetConfig+0x532>
10009d0c:	2340      	movs	r3, #64	; 0x40
10009d0e:	e010      	b.n	10009d32 <UART_SetConfig+0x532>
10009d10:	2320      	movs	r3, #32
10009d12:	e00e      	b.n	10009d32 <UART_SetConfig+0x532>
10009d14:	2310      	movs	r3, #16
10009d16:	e00c      	b.n	10009d32 <UART_SetConfig+0x532>
10009d18:	230c      	movs	r3, #12
10009d1a:	e00a      	b.n	10009d32 <UART_SetConfig+0x532>
10009d1c:	230a      	movs	r3, #10
10009d1e:	e008      	b.n	10009d32 <UART_SetConfig+0x532>
10009d20:	2308      	movs	r3, #8
10009d22:	e006      	b.n	10009d32 <UART_SetConfig+0x532>
10009d24:	2306      	movs	r3, #6
10009d26:	e004      	b.n	10009d32 <UART_SetConfig+0x532>
10009d28:	2304      	movs	r3, #4
10009d2a:	e002      	b.n	10009d32 <UART_SetConfig+0x532>
10009d2c:	2302      	movs	r3, #2
10009d2e:	e000      	b.n	10009d32 <UART_SetConfig+0x532>
10009d30:	2301      	movs	r3, #1
10009d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10009d34:	fbb2 f3f3 	udiv	r3, r2, r3
10009d38:	005a      	lsls	r2, r3, #1
10009d3a:	687b      	ldr	r3, [r7, #4]
10009d3c:	685b      	ldr	r3, [r3, #4]
10009d3e:	085b      	lsrs	r3, r3, #1
10009d40:	441a      	add	r2, r3
10009d42:	687b      	ldr	r3, [r7, #4]
10009d44:	685b      	ldr	r3, [r3, #4]
10009d46:	fbb2 f3f3 	udiv	r3, r2, r3
10009d4a:	b29b      	uxth	r3, r3
10009d4c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009d4e:	e286      	b.n	1000a25e <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
10009d50:	f7fb fd5d 	bl	1000580e <HAL_RCC_GetPCLK2Freq>
10009d54:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009d56:	687b      	ldr	r3, [r7, #4]
10009d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d5a:	2b00      	cmp	r3, #0
10009d5c:	d048      	beq.n	10009df0 <UART_SetConfig+0x5f0>
10009d5e:	687b      	ldr	r3, [r7, #4]
10009d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d62:	2b01      	cmp	r3, #1
10009d64:	d042      	beq.n	10009dec <UART_SetConfig+0x5ec>
10009d66:	687b      	ldr	r3, [r7, #4]
10009d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d6a:	2b02      	cmp	r3, #2
10009d6c:	d03c      	beq.n	10009de8 <UART_SetConfig+0x5e8>
10009d6e:	687b      	ldr	r3, [r7, #4]
10009d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d72:	2b03      	cmp	r3, #3
10009d74:	d036      	beq.n	10009de4 <UART_SetConfig+0x5e4>
10009d76:	687b      	ldr	r3, [r7, #4]
10009d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d7a:	2b04      	cmp	r3, #4
10009d7c:	d030      	beq.n	10009de0 <UART_SetConfig+0x5e0>
10009d7e:	687b      	ldr	r3, [r7, #4]
10009d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d82:	2b05      	cmp	r3, #5
10009d84:	d02a      	beq.n	10009ddc <UART_SetConfig+0x5dc>
10009d86:	687b      	ldr	r3, [r7, #4]
10009d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d8a:	2b06      	cmp	r3, #6
10009d8c:	d024      	beq.n	10009dd8 <UART_SetConfig+0x5d8>
10009d8e:	687b      	ldr	r3, [r7, #4]
10009d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d92:	2b07      	cmp	r3, #7
10009d94:	d01e      	beq.n	10009dd4 <UART_SetConfig+0x5d4>
10009d96:	687b      	ldr	r3, [r7, #4]
10009d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d9a:	2b08      	cmp	r3, #8
10009d9c:	d014      	beq.n	10009dc8 <UART_SetConfig+0x5c8>
10009d9e:	687b      	ldr	r3, [r7, #4]
10009da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009da2:	2b09      	cmp	r3, #9
10009da4:	d00e      	beq.n	10009dc4 <UART_SetConfig+0x5c4>
10009da6:	687b      	ldr	r3, [r7, #4]
10009da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009daa:	2b0a      	cmp	r3, #10
10009dac:	d008      	beq.n	10009dc0 <UART_SetConfig+0x5c0>
10009dae:	687b      	ldr	r3, [r7, #4]
10009db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009db2:	2b0b      	cmp	r3, #11
10009db4:	d102      	bne.n	10009dbc <UART_SetConfig+0x5bc>
10009db6:	f44f 7380 	mov.w	r3, #256	; 0x100
10009dba:	e01a      	b.n	10009df2 <UART_SetConfig+0x5f2>
10009dbc:	2301      	movs	r3, #1
10009dbe:	e018      	b.n	10009df2 <UART_SetConfig+0x5f2>
10009dc0:	2380      	movs	r3, #128	; 0x80
10009dc2:	e016      	b.n	10009df2 <UART_SetConfig+0x5f2>
10009dc4:	2340      	movs	r3, #64	; 0x40
10009dc6:	e014      	b.n	10009df2 <UART_SetConfig+0x5f2>
10009dc8:	2320      	movs	r3, #32
10009dca:	e012      	b.n	10009df2 <UART_SetConfig+0x5f2>
10009dcc:	40018000 	.word	0x40018000
10009dd0:	40019000 	.word	0x40019000
10009dd4:	2310      	movs	r3, #16
10009dd6:	e00c      	b.n	10009df2 <UART_SetConfig+0x5f2>
10009dd8:	230c      	movs	r3, #12
10009dda:	e00a      	b.n	10009df2 <UART_SetConfig+0x5f2>
10009ddc:	230a      	movs	r3, #10
10009dde:	e008      	b.n	10009df2 <UART_SetConfig+0x5f2>
10009de0:	2308      	movs	r3, #8
10009de2:	e006      	b.n	10009df2 <UART_SetConfig+0x5f2>
10009de4:	2306      	movs	r3, #6
10009de6:	e004      	b.n	10009df2 <UART_SetConfig+0x5f2>
10009de8:	2304      	movs	r3, #4
10009dea:	e002      	b.n	10009df2 <UART_SetConfig+0x5f2>
10009dec:	2302      	movs	r3, #2
10009dee:	e000      	b.n	10009df2 <UART_SetConfig+0x5f2>
10009df0:	2301      	movs	r3, #1
10009df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10009df4:	fbb2 f3f3 	udiv	r3, r2, r3
10009df8:	005a      	lsls	r2, r3, #1
10009dfa:	687b      	ldr	r3, [r7, #4]
10009dfc:	685b      	ldr	r3, [r3, #4]
10009dfe:	085b      	lsrs	r3, r3, #1
10009e00:	441a      	add	r2, r3
10009e02:	687b      	ldr	r3, [r7, #4]
10009e04:	685b      	ldr	r3, [r3, #4]
10009e06:	fbb2 f3f3 	udiv	r3, r2, r3
10009e0a:	b29b      	uxth	r3, r3
10009e0c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009e0e:	e226      	b.n	1000a25e <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PCLK5:
        pclk = HAL_RCC_GetPCLK5Freq();
10009e10:	f7fb fd33 	bl	1000587a <HAL_RCC_GetPCLK5Freq>
10009e14:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009e16:	687b      	ldr	r3, [r7, #4]
10009e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e1a:	2b00      	cmp	r3, #0
10009e1c:	d044      	beq.n	10009ea8 <UART_SetConfig+0x6a8>
10009e1e:	687b      	ldr	r3, [r7, #4]
10009e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e22:	2b01      	cmp	r3, #1
10009e24:	d03e      	beq.n	10009ea4 <UART_SetConfig+0x6a4>
10009e26:	687b      	ldr	r3, [r7, #4]
10009e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e2a:	2b02      	cmp	r3, #2
10009e2c:	d038      	beq.n	10009ea0 <UART_SetConfig+0x6a0>
10009e2e:	687b      	ldr	r3, [r7, #4]
10009e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e32:	2b03      	cmp	r3, #3
10009e34:	d032      	beq.n	10009e9c <UART_SetConfig+0x69c>
10009e36:	687b      	ldr	r3, [r7, #4]
10009e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e3a:	2b04      	cmp	r3, #4
10009e3c:	d02c      	beq.n	10009e98 <UART_SetConfig+0x698>
10009e3e:	687b      	ldr	r3, [r7, #4]
10009e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e42:	2b05      	cmp	r3, #5
10009e44:	d026      	beq.n	10009e94 <UART_SetConfig+0x694>
10009e46:	687b      	ldr	r3, [r7, #4]
10009e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e4a:	2b06      	cmp	r3, #6
10009e4c:	d020      	beq.n	10009e90 <UART_SetConfig+0x690>
10009e4e:	687b      	ldr	r3, [r7, #4]
10009e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e52:	2b07      	cmp	r3, #7
10009e54:	d01a      	beq.n	10009e8c <UART_SetConfig+0x68c>
10009e56:	687b      	ldr	r3, [r7, #4]
10009e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e5a:	2b08      	cmp	r3, #8
10009e5c:	d014      	beq.n	10009e88 <UART_SetConfig+0x688>
10009e5e:	687b      	ldr	r3, [r7, #4]
10009e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e62:	2b09      	cmp	r3, #9
10009e64:	d00e      	beq.n	10009e84 <UART_SetConfig+0x684>
10009e66:	687b      	ldr	r3, [r7, #4]
10009e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e6a:	2b0a      	cmp	r3, #10
10009e6c:	d008      	beq.n	10009e80 <UART_SetConfig+0x680>
10009e6e:	687b      	ldr	r3, [r7, #4]
10009e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e72:	2b0b      	cmp	r3, #11
10009e74:	d102      	bne.n	10009e7c <UART_SetConfig+0x67c>
10009e76:	f44f 7380 	mov.w	r3, #256	; 0x100
10009e7a:	e016      	b.n	10009eaa <UART_SetConfig+0x6aa>
10009e7c:	2301      	movs	r3, #1
10009e7e:	e014      	b.n	10009eaa <UART_SetConfig+0x6aa>
10009e80:	2380      	movs	r3, #128	; 0x80
10009e82:	e012      	b.n	10009eaa <UART_SetConfig+0x6aa>
10009e84:	2340      	movs	r3, #64	; 0x40
10009e86:	e010      	b.n	10009eaa <UART_SetConfig+0x6aa>
10009e88:	2320      	movs	r3, #32
10009e8a:	e00e      	b.n	10009eaa <UART_SetConfig+0x6aa>
10009e8c:	2310      	movs	r3, #16
10009e8e:	e00c      	b.n	10009eaa <UART_SetConfig+0x6aa>
10009e90:	230c      	movs	r3, #12
10009e92:	e00a      	b.n	10009eaa <UART_SetConfig+0x6aa>
10009e94:	230a      	movs	r3, #10
10009e96:	e008      	b.n	10009eaa <UART_SetConfig+0x6aa>
10009e98:	2308      	movs	r3, #8
10009e9a:	e006      	b.n	10009eaa <UART_SetConfig+0x6aa>
10009e9c:	2306      	movs	r3, #6
10009e9e:	e004      	b.n	10009eaa <UART_SetConfig+0x6aa>
10009ea0:	2304      	movs	r3, #4
10009ea2:	e002      	b.n	10009eaa <UART_SetConfig+0x6aa>
10009ea4:	2302      	movs	r3, #2
10009ea6:	e000      	b.n	10009eaa <UART_SetConfig+0x6aa>
10009ea8:	2301      	movs	r3, #1
10009eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10009eac:	fbb2 f3f3 	udiv	r3, r2, r3
10009eb0:	005a      	lsls	r2, r3, #1
10009eb2:	687b      	ldr	r3, [r7, #4]
10009eb4:	685b      	ldr	r3, [r3, #4]
10009eb6:	085b      	lsrs	r3, r3, #1
10009eb8:	441a      	add	r2, r3
10009eba:	687b      	ldr	r3, [r7, #4]
10009ebc:	685b      	ldr	r3, [r3, #4]
10009ebe:	fbb2 f3f3 	udiv	r3, r2, r3
10009ec2:	b29b      	uxth	r3, r3
10009ec4:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009ec6:	e1ca      	b.n	1000a25e <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PLL3Q:
        HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10009ec8:	f107 0314 	add.w	r3, r7, #20
10009ecc:	4618      	mov	r0, r3
10009ece:	f7fb fa81 	bl	100053d4 <HAL_RCC_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009ed2:	69ba      	ldr	r2, [r7, #24]
10009ed4:	687b      	ldr	r3, [r7, #4]
10009ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ed8:	2b00      	cmp	r3, #0
10009eda:	d044      	beq.n	10009f66 <UART_SetConfig+0x766>
10009edc:	687b      	ldr	r3, [r7, #4]
10009ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ee0:	2b01      	cmp	r3, #1
10009ee2:	d03e      	beq.n	10009f62 <UART_SetConfig+0x762>
10009ee4:	687b      	ldr	r3, [r7, #4]
10009ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ee8:	2b02      	cmp	r3, #2
10009eea:	d038      	beq.n	10009f5e <UART_SetConfig+0x75e>
10009eec:	687b      	ldr	r3, [r7, #4]
10009eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ef0:	2b03      	cmp	r3, #3
10009ef2:	d032      	beq.n	10009f5a <UART_SetConfig+0x75a>
10009ef4:	687b      	ldr	r3, [r7, #4]
10009ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ef8:	2b04      	cmp	r3, #4
10009efa:	d02c      	beq.n	10009f56 <UART_SetConfig+0x756>
10009efc:	687b      	ldr	r3, [r7, #4]
10009efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f00:	2b05      	cmp	r3, #5
10009f02:	d026      	beq.n	10009f52 <UART_SetConfig+0x752>
10009f04:	687b      	ldr	r3, [r7, #4]
10009f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f08:	2b06      	cmp	r3, #6
10009f0a:	d020      	beq.n	10009f4e <UART_SetConfig+0x74e>
10009f0c:	687b      	ldr	r3, [r7, #4]
10009f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f10:	2b07      	cmp	r3, #7
10009f12:	d01a      	beq.n	10009f4a <UART_SetConfig+0x74a>
10009f14:	687b      	ldr	r3, [r7, #4]
10009f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f18:	2b08      	cmp	r3, #8
10009f1a:	d014      	beq.n	10009f46 <UART_SetConfig+0x746>
10009f1c:	687b      	ldr	r3, [r7, #4]
10009f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f20:	2b09      	cmp	r3, #9
10009f22:	d00e      	beq.n	10009f42 <UART_SetConfig+0x742>
10009f24:	687b      	ldr	r3, [r7, #4]
10009f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f28:	2b0a      	cmp	r3, #10
10009f2a:	d008      	beq.n	10009f3e <UART_SetConfig+0x73e>
10009f2c:	687b      	ldr	r3, [r7, #4]
10009f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f30:	2b0b      	cmp	r3, #11
10009f32:	d102      	bne.n	10009f3a <UART_SetConfig+0x73a>
10009f34:	f44f 7380 	mov.w	r3, #256	; 0x100
10009f38:	e016      	b.n	10009f68 <UART_SetConfig+0x768>
10009f3a:	2301      	movs	r3, #1
10009f3c:	e014      	b.n	10009f68 <UART_SetConfig+0x768>
10009f3e:	2380      	movs	r3, #128	; 0x80
10009f40:	e012      	b.n	10009f68 <UART_SetConfig+0x768>
10009f42:	2340      	movs	r3, #64	; 0x40
10009f44:	e010      	b.n	10009f68 <UART_SetConfig+0x768>
10009f46:	2320      	movs	r3, #32
10009f48:	e00e      	b.n	10009f68 <UART_SetConfig+0x768>
10009f4a:	2310      	movs	r3, #16
10009f4c:	e00c      	b.n	10009f68 <UART_SetConfig+0x768>
10009f4e:	230c      	movs	r3, #12
10009f50:	e00a      	b.n	10009f68 <UART_SetConfig+0x768>
10009f52:	230a      	movs	r3, #10
10009f54:	e008      	b.n	10009f68 <UART_SetConfig+0x768>
10009f56:	2308      	movs	r3, #8
10009f58:	e006      	b.n	10009f68 <UART_SetConfig+0x768>
10009f5a:	2306      	movs	r3, #6
10009f5c:	e004      	b.n	10009f68 <UART_SetConfig+0x768>
10009f5e:	2304      	movs	r3, #4
10009f60:	e002      	b.n	10009f68 <UART_SetConfig+0x768>
10009f62:	2302      	movs	r3, #2
10009f64:	e000      	b.n	10009f68 <UART_SetConfig+0x768>
10009f66:	2301      	movs	r3, #1
10009f68:	fbb2 f3f3 	udiv	r3, r2, r3
10009f6c:	005a      	lsls	r2, r3, #1
10009f6e:	687b      	ldr	r3, [r7, #4]
10009f70:	685b      	ldr	r3, [r3, #4]
10009f72:	085b      	lsrs	r3, r3, #1
10009f74:	441a      	add	r2, r3
10009f76:	687b      	ldr	r3, [r7, #4]
10009f78:	685b      	ldr	r3, [r3, #4]
10009f7a:	fbb2 f3f3 	udiv	r3, r2, r3
10009f7e:	b29b      	uxth	r3, r3
10009f80:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009f82:	e16c      	b.n	1000a25e <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PLL4Q:
        HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10009f84:	f107 0308 	add.w	r3, r7, #8
10009f88:	4618      	mov	r0, r3
10009f8a:	f7fb fb1d 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll4_clocks.PLL4_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009f8e:	68fa      	ldr	r2, [r7, #12]
10009f90:	687b      	ldr	r3, [r7, #4]
10009f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f94:	2b00      	cmp	r3, #0
10009f96:	d044      	beq.n	1000a022 <UART_SetConfig+0x822>
10009f98:	687b      	ldr	r3, [r7, #4]
10009f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f9c:	2b01      	cmp	r3, #1
10009f9e:	d03e      	beq.n	1000a01e <UART_SetConfig+0x81e>
10009fa0:	687b      	ldr	r3, [r7, #4]
10009fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009fa4:	2b02      	cmp	r3, #2
10009fa6:	d038      	beq.n	1000a01a <UART_SetConfig+0x81a>
10009fa8:	687b      	ldr	r3, [r7, #4]
10009faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009fac:	2b03      	cmp	r3, #3
10009fae:	d032      	beq.n	1000a016 <UART_SetConfig+0x816>
10009fb0:	687b      	ldr	r3, [r7, #4]
10009fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009fb4:	2b04      	cmp	r3, #4
10009fb6:	d02c      	beq.n	1000a012 <UART_SetConfig+0x812>
10009fb8:	687b      	ldr	r3, [r7, #4]
10009fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009fbc:	2b05      	cmp	r3, #5
10009fbe:	d026      	beq.n	1000a00e <UART_SetConfig+0x80e>
10009fc0:	687b      	ldr	r3, [r7, #4]
10009fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009fc4:	2b06      	cmp	r3, #6
10009fc6:	d020      	beq.n	1000a00a <UART_SetConfig+0x80a>
10009fc8:	687b      	ldr	r3, [r7, #4]
10009fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009fcc:	2b07      	cmp	r3, #7
10009fce:	d01a      	beq.n	1000a006 <UART_SetConfig+0x806>
10009fd0:	687b      	ldr	r3, [r7, #4]
10009fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009fd4:	2b08      	cmp	r3, #8
10009fd6:	d014      	beq.n	1000a002 <UART_SetConfig+0x802>
10009fd8:	687b      	ldr	r3, [r7, #4]
10009fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009fdc:	2b09      	cmp	r3, #9
10009fde:	d00e      	beq.n	10009ffe <UART_SetConfig+0x7fe>
10009fe0:	687b      	ldr	r3, [r7, #4]
10009fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009fe4:	2b0a      	cmp	r3, #10
10009fe6:	d008      	beq.n	10009ffa <UART_SetConfig+0x7fa>
10009fe8:	687b      	ldr	r3, [r7, #4]
10009fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009fec:	2b0b      	cmp	r3, #11
10009fee:	d102      	bne.n	10009ff6 <UART_SetConfig+0x7f6>
10009ff0:	f44f 7380 	mov.w	r3, #256	; 0x100
10009ff4:	e016      	b.n	1000a024 <UART_SetConfig+0x824>
10009ff6:	2301      	movs	r3, #1
10009ff8:	e014      	b.n	1000a024 <UART_SetConfig+0x824>
10009ffa:	2380      	movs	r3, #128	; 0x80
10009ffc:	e012      	b.n	1000a024 <UART_SetConfig+0x824>
10009ffe:	2340      	movs	r3, #64	; 0x40
1000a000:	e010      	b.n	1000a024 <UART_SetConfig+0x824>
1000a002:	2320      	movs	r3, #32
1000a004:	e00e      	b.n	1000a024 <UART_SetConfig+0x824>
1000a006:	2310      	movs	r3, #16
1000a008:	e00c      	b.n	1000a024 <UART_SetConfig+0x824>
1000a00a:	230c      	movs	r3, #12
1000a00c:	e00a      	b.n	1000a024 <UART_SetConfig+0x824>
1000a00e:	230a      	movs	r3, #10
1000a010:	e008      	b.n	1000a024 <UART_SetConfig+0x824>
1000a012:	2308      	movs	r3, #8
1000a014:	e006      	b.n	1000a024 <UART_SetConfig+0x824>
1000a016:	2306      	movs	r3, #6
1000a018:	e004      	b.n	1000a024 <UART_SetConfig+0x824>
1000a01a:	2304      	movs	r3, #4
1000a01c:	e002      	b.n	1000a024 <UART_SetConfig+0x824>
1000a01e:	2302      	movs	r3, #2
1000a020:	e000      	b.n	1000a024 <UART_SetConfig+0x824>
1000a022:	2301      	movs	r3, #1
1000a024:	fbb2 f3f3 	udiv	r3, r2, r3
1000a028:	005a      	lsls	r2, r3, #1
1000a02a:	687b      	ldr	r3, [r7, #4]
1000a02c:	685b      	ldr	r3, [r3, #4]
1000a02e:	085b      	lsrs	r3, r3, #1
1000a030:	441a      	add	r2, r3
1000a032:	687b      	ldr	r3, [r7, #4]
1000a034:	685b      	ldr	r3, [r3, #4]
1000a036:	fbb2 f3f3 	udiv	r3, r2, r3
1000a03a:	b29b      	uxth	r3, r3
1000a03c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a03e:	e10e      	b.n	1000a25e <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a040:	687b      	ldr	r3, [r7, #4]
1000a042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a044:	2b00      	cmp	r3, #0
1000a046:	d044      	beq.n	1000a0d2 <UART_SetConfig+0x8d2>
1000a048:	687b      	ldr	r3, [r7, #4]
1000a04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a04c:	2b01      	cmp	r3, #1
1000a04e:	d03e      	beq.n	1000a0ce <UART_SetConfig+0x8ce>
1000a050:	687b      	ldr	r3, [r7, #4]
1000a052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a054:	2b02      	cmp	r3, #2
1000a056:	d038      	beq.n	1000a0ca <UART_SetConfig+0x8ca>
1000a058:	687b      	ldr	r3, [r7, #4]
1000a05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a05c:	2b03      	cmp	r3, #3
1000a05e:	d032      	beq.n	1000a0c6 <UART_SetConfig+0x8c6>
1000a060:	687b      	ldr	r3, [r7, #4]
1000a062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a064:	2b04      	cmp	r3, #4
1000a066:	d02c      	beq.n	1000a0c2 <UART_SetConfig+0x8c2>
1000a068:	687b      	ldr	r3, [r7, #4]
1000a06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a06c:	2b05      	cmp	r3, #5
1000a06e:	d026      	beq.n	1000a0be <UART_SetConfig+0x8be>
1000a070:	687b      	ldr	r3, [r7, #4]
1000a072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a074:	2b06      	cmp	r3, #6
1000a076:	d020      	beq.n	1000a0ba <UART_SetConfig+0x8ba>
1000a078:	687b      	ldr	r3, [r7, #4]
1000a07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a07c:	2b07      	cmp	r3, #7
1000a07e:	d01a      	beq.n	1000a0b6 <UART_SetConfig+0x8b6>
1000a080:	687b      	ldr	r3, [r7, #4]
1000a082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a084:	2b08      	cmp	r3, #8
1000a086:	d014      	beq.n	1000a0b2 <UART_SetConfig+0x8b2>
1000a088:	687b      	ldr	r3, [r7, #4]
1000a08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a08c:	2b09      	cmp	r3, #9
1000a08e:	d00e      	beq.n	1000a0ae <UART_SetConfig+0x8ae>
1000a090:	687b      	ldr	r3, [r7, #4]
1000a092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a094:	2b0a      	cmp	r3, #10
1000a096:	d008      	beq.n	1000a0aa <UART_SetConfig+0x8aa>
1000a098:	687b      	ldr	r3, [r7, #4]
1000a09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a09c:	2b0b      	cmp	r3, #11
1000a09e:	d102      	bne.n	1000a0a6 <UART_SetConfig+0x8a6>
1000a0a0:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a0a4:	e016      	b.n	1000a0d4 <UART_SetConfig+0x8d4>
1000a0a6:	2301      	movs	r3, #1
1000a0a8:	e014      	b.n	1000a0d4 <UART_SetConfig+0x8d4>
1000a0aa:	2380      	movs	r3, #128	; 0x80
1000a0ac:	e012      	b.n	1000a0d4 <UART_SetConfig+0x8d4>
1000a0ae:	2340      	movs	r3, #64	; 0x40
1000a0b0:	e010      	b.n	1000a0d4 <UART_SetConfig+0x8d4>
1000a0b2:	2320      	movs	r3, #32
1000a0b4:	e00e      	b.n	1000a0d4 <UART_SetConfig+0x8d4>
1000a0b6:	2310      	movs	r3, #16
1000a0b8:	e00c      	b.n	1000a0d4 <UART_SetConfig+0x8d4>
1000a0ba:	230c      	movs	r3, #12
1000a0bc:	e00a      	b.n	1000a0d4 <UART_SetConfig+0x8d4>
1000a0be:	230a      	movs	r3, #10
1000a0c0:	e008      	b.n	1000a0d4 <UART_SetConfig+0x8d4>
1000a0c2:	2308      	movs	r3, #8
1000a0c4:	e006      	b.n	1000a0d4 <UART_SetConfig+0x8d4>
1000a0c6:	2306      	movs	r3, #6
1000a0c8:	e004      	b.n	1000a0d4 <UART_SetConfig+0x8d4>
1000a0ca:	2304      	movs	r3, #4
1000a0cc:	e002      	b.n	1000a0d4 <UART_SetConfig+0x8d4>
1000a0ce:	2302      	movs	r3, #2
1000a0d0:	e000      	b.n	1000a0d4 <UART_SetConfig+0x8d4>
1000a0d2:	2301      	movs	r3, #1
1000a0d4:	4a9a      	ldr	r2, [pc, #616]	; (1000a340 <UART_SetConfig+0xb40>)
1000a0d6:	fbb2 f3f3 	udiv	r3, r2, r3
1000a0da:	005a      	lsls	r2, r3, #1
1000a0dc:	687b      	ldr	r3, [r7, #4]
1000a0de:	685b      	ldr	r3, [r3, #4]
1000a0e0:	085b      	lsrs	r3, r3, #1
1000a0e2:	441a      	add	r2, r3
1000a0e4:	687b      	ldr	r3, [r7, #4]
1000a0e6:	685b      	ldr	r3, [r3, #4]
1000a0e8:	fbb2 f3f3 	udiv	r3, r2, r3
1000a0ec:	b29b      	uxth	r3, r3
1000a0ee:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a0f0:	e0b5      	b.n	1000a25e <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a0f2:	687b      	ldr	r3, [r7, #4]
1000a0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a0f6:	2b00      	cmp	r3, #0
1000a0f8:	d044      	beq.n	1000a184 <UART_SetConfig+0x984>
1000a0fa:	687b      	ldr	r3, [r7, #4]
1000a0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a0fe:	2b01      	cmp	r3, #1
1000a100:	d03e      	beq.n	1000a180 <UART_SetConfig+0x980>
1000a102:	687b      	ldr	r3, [r7, #4]
1000a104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a106:	2b02      	cmp	r3, #2
1000a108:	d038      	beq.n	1000a17c <UART_SetConfig+0x97c>
1000a10a:	687b      	ldr	r3, [r7, #4]
1000a10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a10e:	2b03      	cmp	r3, #3
1000a110:	d032      	beq.n	1000a178 <UART_SetConfig+0x978>
1000a112:	687b      	ldr	r3, [r7, #4]
1000a114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a116:	2b04      	cmp	r3, #4
1000a118:	d02c      	beq.n	1000a174 <UART_SetConfig+0x974>
1000a11a:	687b      	ldr	r3, [r7, #4]
1000a11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a11e:	2b05      	cmp	r3, #5
1000a120:	d026      	beq.n	1000a170 <UART_SetConfig+0x970>
1000a122:	687b      	ldr	r3, [r7, #4]
1000a124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a126:	2b06      	cmp	r3, #6
1000a128:	d020      	beq.n	1000a16c <UART_SetConfig+0x96c>
1000a12a:	687b      	ldr	r3, [r7, #4]
1000a12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a12e:	2b07      	cmp	r3, #7
1000a130:	d01a      	beq.n	1000a168 <UART_SetConfig+0x968>
1000a132:	687b      	ldr	r3, [r7, #4]
1000a134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a136:	2b08      	cmp	r3, #8
1000a138:	d014      	beq.n	1000a164 <UART_SetConfig+0x964>
1000a13a:	687b      	ldr	r3, [r7, #4]
1000a13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a13e:	2b09      	cmp	r3, #9
1000a140:	d00e      	beq.n	1000a160 <UART_SetConfig+0x960>
1000a142:	687b      	ldr	r3, [r7, #4]
1000a144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a146:	2b0a      	cmp	r3, #10
1000a148:	d008      	beq.n	1000a15c <UART_SetConfig+0x95c>
1000a14a:	687b      	ldr	r3, [r7, #4]
1000a14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a14e:	2b0b      	cmp	r3, #11
1000a150:	d102      	bne.n	1000a158 <UART_SetConfig+0x958>
1000a152:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a156:	e016      	b.n	1000a186 <UART_SetConfig+0x986>
1000a158:	2301      	movs	r3, #1
1000a15a:	e014      	b.n	1000a186 <UART_SetConfig+0x986>
1000a15c:	2380      	movs	r3, #128	; 0x80
1000a15e:	e012      	b.n	1000a186 <UART_SetConfig+0x986>
1000a160:	2340      	movs	r3, #64	; 0x40
1000a162:	e010      	b.n	1000a186 <UART_SetConfig+0x986>
1000a164:	2320      	movs	r3, #32
1000a166:	e00e      	b.n	1000a186 <UART_SetConfig+0x986>
1000a168:	2310      	movs	r3, #16
1000a16a:	e00c      	b.n	1000a186 <UART_SetConfig+0x986>
1000a16c:	230c      	movs	r3, #12
1000a16e:	e00a      	b.n	1000a186 <UART_SetConfig+0x986>
1000a170:	230a      	movs	r3, #10
1000a172:	e008      	b.n	1000a186 <UART_SetConfig+0x986>
1000a174:	2308      	movs	r3, #8
1000a176:	e006      	b.n	1000a186 <UART_SetConfig+0x986>
1000a178:	2306      	movs	r3, #6
1000a17a:	e004      	b.n	1000a186 <UART_SetConfig+0x986>
1000a17c:	2304      	movs	r3, #4
1000a17e:	e002      	b.n	1000a186 <UART_SetConfig+0x986>
1000a180:	2302      	movs	r3, #2
1000a182:	e000      	b.n	1000a186 <UART_SetConfig+0x986>
1000a184:	2301      	movs	r3, #1
1000a186:	4a6f      	ldr	r2, [pc, #444]	; (1000a344 <UART_SetConfig+0xb44>)
1000a188:	fbb2 f3f3 	udiv	r3, r2, r3
1000a18c:	005a      	lsls	r2, r3, #1
1000a18e:	687b      	ldr	r3, [r7, #4]
1000a190:	685b      	ldr	r3, [r3, #4]
1000a192:	085b      	lsrs	r3, r3, #1
1000a194:	441a      	add	r2, r3
1000a196:	687b      	ldr	r3, [r7, #4]
1000a198:	685b      	ldr	r3, [r3, #4]
1000a19a:	fbb2 f3f3 	udiv	r3, r2, r3
1000a19e:	b29b      	uxth	r3, r3
1000a1a0:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a1a2:	e05c      	b.n	1000a25e <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_HSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a1a4:	687b      	ldr	r3, [r7, #4]
1000a1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a1a8:	2b00      	cmp	r3, #0
1000a1aa:	d044      	beq.n	1000a236 <UART_SetConfig+0xa36>
1000a1ac:	687b      	ldr	r3, [r7, #4]
1000a1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a1b0:	2b01      	cmp	r3, #1
1000a1b2:	d03e      	beq.n	1000a232 <UART_SetConfig+0xa32>
1000a1b4:	687b      	ldr	r3, [r7, #4]
1000a1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a1b8:	2b02      	cmp	r3, #2
1000a1ba:	d038      	beq.n	1000a22e <UART_SetConfig+0xa2e>
1000a1bc:	687b      	ldr	r3, [r7, #4]
1000a1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a1c0:	2b03      	cmp	r3, #3
1000a1c2:	d032      	beq.n	1000a22a <UART_SetConfig+0xa2a>
1000a1c4:	687b      	ldr	r3, [r7, #4]
1000a1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a1c8:	2b04      	cmp	r3, #4
1000a1ca:	d02c      	beq.n	1000a226 <UART_SetConfig+0xa26>
1000a1cc:	687b      	ldr	r3, [r7, #4]
1000a1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a1d0:	2b05      	cmp	r3, #5
1000a1d2:	d026      	beq.n	1000a222 <UART_SetConfig+0xa22>
1000a1d4:	687b      	ldr	r3, [r7, #4]
1000a1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a1d8:	2b06      	cmp	r3, #6
1000a1da:	d020      	beq.n	1000a21e <UART_SetConfig+0xa1e>
1000a1dc:	687b      	ldr	r3, [r7, #4]
1000a1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a1e0:	2b07      	cmp	r3, #7
1000a1e2:	d01a      	beq.n	1000a21a <UART_SetConfig+0xa1a>
1000a1e4:	687b      	ldr	r3, [r7, #4]
1000a1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a1e8:	2b08      	cmp	r3, #8
1000a1ea:	d014      	beq.n	1000a216 <UART_SetConfig+0xa16>
1000a1ec:	687b      	ldr	r3, [r7, #4]
1000a1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a1f0:	2b09      	cmp	r3, #9
1000a1f2:	d00e      	beq.n	1000a212 <UART_SetConfig+0xa12>
1000a1f4:	687b      	ldr	r3, [r7, #4]
1000a1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a1f8:	2b0a      	cmp	r3, #10
1000a1fa:	d008      	beq.n	1000a20e <UART_SetConfig+0xa0e>
1000a1fc:	687b      	ldr	r3, [r7, #4]
1000a1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a200:	2b0b      	cmp	r3, #11
1000a202:	d102      	bne.n	1000a20a <UART_SetConfig+0xa0a>
1000a204:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a208:	e016      	b.n	1000a238 <UART_SetConfig+0xa38>
1000a20a:	2301      	movs	r3, #1
1000a20c:	e014      	b.n	1000a238 <UART_SetConfig+0xa38>
1000a20e:	2380      	movs	r3, #128	; 0x80
1000a210:	e012      	b.n	1000a238 <UART_SetConfig+0xa38>
1000a212:	2340      	movs	r3, #64	; 0x40
1000a214:	e010      	b.n	1000a238 <UART_SetConfig+0xa38>
1000a216:	2320      	movs	r3, #32
1000a218:	e00e      	b.n	1000a238 <UART_SetConfig+0xa38>
1000a21a:	2310      	movs	r3, #16
1000a21c:	e00c      	b.n	1000a238 <UART_SetConfig+0xa38>
1000a21e:	230c      	movs	r3, #12
1000a220:	e00a      	b.n	1000a238 <UART_SetConfig+0xa38>
1000a222:	230a      	movs	r3, #10
1000a224:	e008      	b.n	1000a238 <UART_SetConfig+0xa38>
1000a226:	2308      	movs	r3, #8
1000a228:	e006      	b.n	1000a238 <UART_SetConfig+0xa38>
1000a22a:	2306      	movs	r3, #6
1000a22c:	e004      	b.n	1000a238 <UART_SetConfig+0xa38>
1000a22e:	2304      	movs	r3, #4
1000a230:	e002      	b.n	1000a238 <UART_SetConfig+0xa38>
1000a232:	2302      	movs	r3, #2
1000a234:	e000      	b.n	1000a238 <UART_SetConfig+0xa38>
1000a236:	2301      	movs	r3, #1
1000a238:	4a43      	ldr	r2, [pc, #268]	; (1000a348 <UART_SetConfig+0xb48>)
1000a23a:	fbb2 f3f3 	udiv	r3, r2, r3
1000a23e:	005a      	lsls	r2, r3, #1
1000a240:	687b      	ldr	r3, [r7, #4]
1000a242:	685b      	ldr	r3, [r3, #4]
1000a244:	085b      	lsrs	r3, r3, #1
1000a246:	441a      	add	r2, r3
1000a248:	687b      	ldr	r3, [r7, #4]
1000a24a:	685b      	ldr	r3, [r3, #4]
1000a24c:	fbb2 f3f3 	udiv	r3, r2, r3
1000a250:	b29b      	uxth	r3, r3
1000a252:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a254:	e003      	b.n	1000a25e <UART_SetConfig+0xa5e>
      default:
        ret = HAL_ERROR;
1000a256:	2301      	movs	r3, #1
1000a258:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
1000a25c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
1000a25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000a260:	2b0f      	cmp	r3, #15
1000a262:	d916      	bls.n	1000a292 <UART_SetConfig+0xa92>
1000a264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000a266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
1000a26a:	d212      	bcs.n	1000a292 <UART_SetConfig+0xa92>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
1000a26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000a26e:	b29b      	uxth	r3, r3
1000a270:	f023 030f 	bic.w	r3, r3, #15
1000a274:	847b      	strh	r3, [r7, #34]	; 0x22
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
1000a276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000a278:	085b      	lsrs	r3, r3, #1
1000a27a:	b29b      	uxth	r3, r3
1000a27c:	f003 0307 	and.w	r3, r3, #7
1000a280:	b29a      	uxth	r2, r3
1000a282:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
1000a284:	4313      	orrs	r3, r2
1000a286:	847b      	strh	r3, [r7, #34]	; 0x22
      huart->Instance->BRR = brrtemp;
1000a288:	687b      	ldr	r3, [r7, #4]
1000a28a:	681b      	ldr	r3, [r3, #0]
1000a28c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
1000a28e:	60da      	str	r2, [r3, #12]
1000a290:	e342      	b.n	1000a918 <UART_SetConfig+0x1118>
    }
    else
    {
      ret = HAL_ERROR;
1000a292:	2301      	movs	r3, #1
1000a294:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
1000a298:	e33e      	b.n	1000a918 <UART_SetConfig+0x1118>
    }
  }
  else
  {
    switch (clocksource)
1000a29a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
1000a29e:	2b20      	cmp	r3, #32
1000a2a0:	dc4a      	bgt.n	1000a338 <UART_SetConfig+0xb38>
1000a2a2:	2b00      	cmp	r3, #0
1000a2a4:	f2c0 8325 	blt.w	1000a8f2 <UART_SetConfig+0x10f2>
1000a2a8:	2b20      	cmp	r3, #32
1000a2aa:	f200 8322 	bhi.w	1000a8f2 <UART_SetConfig+0x10f2>
1000a2ae:	a201      	add	r2, pc, #4	; (adr r2, 1000a2b4 <UART_SetConfig+0xab4>)
1000a2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000a2b4:	1000a34d 	.word	0x1000a34d
1000a2b8:	1000a403 	.word	0x1000a403
1000a2bc:	1000a4b9 	.word	0x1000a4b9
1000a2c0:	1000a8f3 	.word	0x1000a8f3
1000a2c4:	1000a56f 	.word	0x1000a56f
1000a2c8:	1000a8f3 	.word	0x1000a8f3
1000a2cc:	1000a8f3 	.word	0x1000a8f3
1000a2d0:	1000a8f3 	.word	0x1000a8f3
1000a2d4:	1000a629 	.word	0x1000a629
1000a2d8:	1000a8f3 	.word	0x1000a8f3
1000a2dc:	1000a8f3 	.word	0x1000a8f3
1000a2e0:	1000a8f3 	.word	0x1000a8f3
1000a2e4:	1000a8f3 	.word	0x1000a8f3
1000a2e8:	1000a8f3 	.word	0x1000a8f3
1000a2ec:	1000a8f3 	.word	0x1000a8f3
1000a2f0:	1000a8f3 	.word	0x1000a8f3
1000a2f4:	1000a6e3 	.word	0x1000a6e3
1000a2f8:	1000a8f3 	.word	0x1000a8f3
1000a2fc:	1000a8f3 	.word	0x1000a8f3
1000a300:	1000a8f3 	.word	0x1000a8f3
1000a304:	1000a8f3 	.word	0x1000a8f3
1000a308:	1000a8f3 	.word	0x1000a8f3
1000a30c:	1000a8f3 	.word	0x1000a8f3
1000a310:	1000a8f3 	.word	0x1000a8f3
1000a314:	1000a8f3 	.word	0x1000a8f3
1000a318:	1000a8f3 	.word	0x1000a8f3
1000a31c:	1000a8f3 	.word	0x1000a8f3
1000a320:	1000a8f3 	.word	0x1000a8f3
1000a324:	1000a8f3 	.word	0x1000a8f3
1000a328:	1000a8f3 	.word	0x1000a8f3
1000a32c:	1000a8f3 	.word	0x1000a8f3
1000a330:	1000a8f3 	.word	0x1000a8f3
1000a334:	1000a793 	.word	0x1000a793
1000a338:	2b40      	cmp	r3, #64	; 0x40
1000a33a:	f000 8282 	beq.w	1000a842 <UART_SetConfig+0x1042>
1000a33e:	e2d8      	b.n	1000a8f2 <UART_SetConfig+0x10f2>
1000a340:	03d09000 	.word	0x03d09000
1000a344:	003d0900 	.word	0x003d0900
1000a348:	016e3600 	.word	0x016e3600
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
1000a34c:	f7fb fa44 	bl	100057d8 <HAL_RCC_GetPCLK1Freq>
1000a350:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a352:	687b      	ldr	r3, [r7, #4]
1000a354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a356:	2b00      	cmp	r3, #0
1000a358:	d044      	beq.n	1000a3e4 <UART_SetConfig+0xbe4>
1000a35a:	687b      	ldr	r3, [r7, #4]
1000a35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a35e:	2b01      	cmp	r3, #1
1000a360:	d03e      	beq.n	1000a3e0 <UART_SetConfig+0xbe0>
1000a362:	687b      	ldr	r3, [r7, #4]
1000a364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a366:	2b02      	cmp	r3, #2
1000a368:	d038      	beq.n	1000a3dc <UART_SetConfig+0xbdc>
1000a36a:	687b      	ldr	r3, [r7, #4]
1000a36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a36e:	2b03      	cmp	r3, #3
1000a370:	d032      	beq.n	1000a3d8 <UART_SetConfig+0xbd8>
1000a372:	687b      	ldr	r3, [r7, #4]
1000a374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a376:	2b04      	cmp	r3, #4
1000a378:	d02c      	beq.n	1000a3d4 <UART_SetConfig+0xbd4>
1000a37a:	687b      	ldr	r3, [r7, #4]
1000a37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a37e:	2b05      	cmp	r3, #5
1000a380:	d026      	beq.n	1000a3d0 <UART_SetConfig+0xbd0>
1000a382:	687b      	ldr	r3, [r7, #4]
1000a384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a386:	2b06      	cmp	r3, #6
1000a388:	d020      	beq.n	1000a3cc <UART_SetConfig+0xbcc>
1000a38a:	687b      	ldr	r3, [r7, #4]
1000a38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a38e:	2b07      	cmp	r3, #7
1000a390:	d01a      	beq.n	1000a3c8 <UART_SetConfig+0xbc8>
1000a392:	687b      	ldr	r3, [r7, #4]
1000a394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a396:	2b08      	cmp	r3, #8
1000a398:	d014      	beq.n	1000a3c4 <UART_SetConfig+0xbc4>
1000a39a:	687b      	ldr	r3, [r7, #4]
1000a39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a39e:	2b09      	cmp	r3, #9
1000a3a0:	d00e      	beq.n	1000a3c0 <UART_SetConfig+0xbc0>
1000a3a2:	687b      	ldr	r3, [r7, #4]
1000a3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a3a6:	2b0a      	cmp	r3, #10
1000a3a8:	d008      	beq.n	1000a3bc <UART_SetConfig+0xbbc>
1000a3aa:	687b      	ldr	r3, [r7, #4]
1000a3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a3ae:	2b0b      	cmp	r3, #11
1000a3b0:	d102      	bne.n	1000a3b8 <UART_SetConfig+0xbb8>
1000a3b2:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a3b6:	e016      	b.n	1000a3e6 <UART_SetConfig+0xbe6>
1000a3b8:	2301      	movs	r3, #1
1000a3ba:	e014      	b.n	1000a3e6 <UART_SetConfig+0xbe6>
1000a3bc:	2380      	movs	r3, #128	; 0x80
1000a3be:	e012      	b.n	1000a3e6 <UART_SetConfig+0xbe6>
1000a3c0:	2340      	movs	r3, #64	; 0x40
1000a3c2:	e010      	b.n	1000a3e6 <UART_SetConfig+0xbe6>
1000a3c4:	2320      	movs	r3, #32
1000a3c6:	e00e      	b.n	1000a3e6 <UART_SetConfig+0xbe6>
1000a3c8:	2310      	movs	r3, #16
1000a3ca:	e00c      	b.n	1000a3e6 <UART_SetConfig+0xbe6>
1000a3cc:	230c      	movs	r3, #12
1000a3ce:	e00a      	b.n	1000a3e6 <UART_SetConfig+0xbe6>
1000a3d0:	230a      	movs	r3, #10
1000a3d2:	e008      	b.n	1000a3e6 <UART_SetConfig+0xbe6>
1000a3d4:	2308      	movs	r3, #8
1000a3d6:	e006      	b.n	1000a3e6 <UART_SetConfig+0xbe6>
1000a3d8:	2306      	movs	r3, #6
1000a3da:	e004      	b.n	1000a3e6 <UART_SetConfig+0xbe6>
1000a3dc:	2304      	movs	r3, #4
1000a3de:	e002      	b.n	1000a3e6 <UART_SetConfig+0xbe6>
1000a3e0:	2302      	movs	r3, #2
1000a3e2:	e000      	b.n	1000a3e6 <UART_SetConfig+0xbe6>
1000a3e4:	2301      	movs	r3, #1
1000a3e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000a3e8:	fbb2 f2f3 	udiv	r2, r2, r3
1000a3ec:	687b      	ldr	r3, [r7, #4]
1000a3ee:	685b      	ldr	r3, [r3, #4]
1000a3f0:	085b      	lsrs	r3, r3, #1
1000a3f2:	441a      	add	r2, r3
1000a3f4:	687b      	ldr	r3, [r7, #4]
1000a3f6:	685b      	ldr	r3, [r3, #4]
1000a3f8:	fbb2 f3f3 	udiv	r3, r2, r3
1000a3fc:	b29b      	uxth	r3, r3
1000a3fe:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a400:	e27b      	b.n	1000a8fa <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
1000a402:	f7fb fa04 	bl	1000580e <HAL_RCC_GetPCLK2Freq>
1000a406:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a408:	687b      	ldr	r3, [r7, #4]
1000a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a40c:	2b00      	cmp	r3, #0
1000a40e:	d044      	beq.n	1000a49a <UART_SetConfig+0xc9a>
1000a410:	687b      	ldr	r3, [r7, #4]
1000a412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a414:	2b01      	cmp	r3, #1
1000a416:	d03e      	beq.n	1000a496 <UART_SetConfig+0xc96>
1000a418:	687b      	ldr	r3, [r7, #4]
1000a41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a41c:	2b02      	cmp	r3, #2
1000a41e:	d038      	beq.n	1000a492 <UART_SetConfig+0xc92>
1000a420:	687b      	ldr	r3, [r7, #4]
1000a422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a424:	2b03      	cmp	r3, #3
1000a426:	d032      	beq.n	1000a48e <UART_SetConfig+0xc8e>
1000a428:	687b      	ldr	r3, [r7, #4]
1000a42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a42c:	2b04      	cmp	r3, #4
1000a42e:	d02c      	beq.n	1000a48a <UART_SetConfig+0xc8a>
1000a430:	687b      	ldr	r3, [r7, #4]
1000a432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a434:	2b05      	cmp	r3, #5
1000a436:	d026      	beq.n	1000a486 <UART_SetConfig+0xc86>
1000a438:	687b      	ldr	r3, [r7, #4]
1000a43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a43c:	2b06      	cmp	r3, #6
1000a43e:	d020      	beq.n	1000a482 <UART_SetConfig+0xc82>
1000a440:	687b      	ldr	r3, [r7, #4]
1000a442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a444:	2b07      	cmp	r3, #7
1000a446:	d01a      	beq.n	1000a47e <UART_SetConfig+0xc7e>
1000a448:	687b      	ldr	r3, [r7, #4]
1000a44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a44c:	2b08      	cmp	r3, #8
1000a44e:	d014      	beq.n	1000a47a <UART_SetConfig+0xc7a>
1000a450:	687b      	ldr	r3, [r7, #4]
1000a452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a454:	2b09      	cmp	r3, #9
1000a456:	d00e      	beq.n	1000a476 <UART_SetConfig+0xc76>
1000a458:	687b      	ldr	r3, [r7, #4]
1000a45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a45c:	2b0a      	cmp	r3, #10
1000a45e:	d008      	beq.n	1000a472 <UART_SetConfig+0xc72>
1000a460:	687b      	ldr	r3, [r7, #4]
1000a462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a464:	2b0b      	cmp	r3, #11
1000a466:	d102      	bne.n	1000a46e <UART_SetConfig+0xc6e>
1000a468:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a46c:	e016      	b.n	1000a49c <UART_SetConfig+0xc9c>
1000a46e:	2301      	movs	r3, #1
1000a470:	e014      	b.n	1000a49c <UART_SetConfig+0xc9c>
1000a472:	2380      	movs	r3, #128	; 0x80
1000a474:	e012      	b.n	1000a49c <UART_SetConfig+0xc9c>
1000a476:	2340      	movs	r3, #64	; 0x40
1000a478:	e010      	b.n	1000a49c <UART_SetConfig+0xc9c>
1000a47a:	2320      	movs	r3, #32
1000a47c:	e00e      	b.n	1000a49c <UART_SetConfig+0xc9c>
1000a47e:	2310      	movs	r3, #16
1000a480:	e00c      	b.n	1000a49c <UART_SetConfig+0xc9c>
1000a482:	230c      	movs	r3, #12
1000a484:	e00a      	b.n	1000a49c <UART_SetConfig+0xc9c>
1000a486:	230a      	movs	r3, #10
1000a488:	e008      	b.n	1000a49c <UART_SetConfig+0xc9c>
1000a48a:	2308      	movs	r3, #8
1000a48c:	e006      	b.n	1000a49c <UART_SetConfig+0xc9c>
1000a48e:	2306      	movs	r3, #6
1000a490:	e004      	b.n	1000a49c <UART_SetConfig+0xc9c>
1000a492:	2304      	movs	r3, #4
1000a494:	e002      	b.n	1000a49c <UART_SetConfig+0xc9c>
1000a496:	2302      	movs	r3, #2
1000a498:	e000      	b.n	1000a49c <UART_SetConfig+0xc9c>
1000a49a:	2301      	movs	r3, #1
1000a49c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000a49e:	fbb2 f2f3 	udiv	r2, r2, r3
1000a4a2:	687b      	ldr	r3, [r7, #4]
1000a4a4:	685b      	ldr	r3, [r3, #4]
1000a4a6:	085b      	lsrs	r3, r3, #1
1000a4a8:	441a      	add	r2, r3
1000a4aa:	687b      	ldr	r3, [r7, #4]
1000a4ac:	685b      	ldr	r3, [r3, #4]
1000a4ae:	fbb2 f3f3 	udiv	r3, r2, r3
1000a4b2:	b29b      	uxth	r3, r3
1000a4b4:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a4b6:	e220      	b.n	1000a8fa <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PCLK5:
        pclk = HAL_RCC_GetPCLK5Freq();
1000a4b8:	f7fb f9df 	bl	1000587a <HAL_RCC_GetPCLK5Freq>
1000a4bc:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a4be:	687b      	ldr	r3, [r7, #4]
1000a4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a4c2:	2b00      	cmp	r3, #0
1000a4c4:	d044      	beq.n	1000a550 <UART_SetConfig+0xd50>
1000a4c6:	687b      	ldr	r3, [r7, #4]
1000a4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a4ca:	2b01      	cmp	r3, #1
1000a4cc:	d03e      	beq.n	1000a54c <UART_SetConfig+0xd4c>
1000a4ce:	687b      	ldr	r3, [r7, #4]
1000a4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a4d2:	2b02      	cmp	r3, #2
1000a4d4:	d038      	beq.n	1000a548 <UART_SetConfig+0xd48>
1000a4d6:	687b      	ldr	r3, [r7, #4]
1000a4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a4da:	2b03      	cmp	r3, #3
1000a4dc:	d032      	beq.n	1000a544 <UART_SetConfig+0xd44>
1000a4de:	687b      	ldr	r3, [r7, #4]
1000a4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a4e2:	2b04      	cmp	r3, #4
1000a4e4:	d02c      	beq.n	1000a540 <UART_SetConfig+0xd40>
1000a4e6:	687b      	ldr	r3, [r7, #4]
1000a4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a4ea:	2b05      	cmp	r3, #5
1000a4ec:	d026      	beq.n	1000a53c <UART_SetConfig+0xd3c>
1000a4ee:	687b      	ldr	r3, [r7, #4]
1000a4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a4f2:	2b06      	cmp	r3, #6
1000a4f4:	d020      	beq.n	1000a538 <UART_SetConfig+0xd38>
1000a4f6:	687b      	ldr	r3, [r7, #4]
1000a4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a4fa:	2b07      	cmp	r3, #7
1000a4fc:	d01a      	beq.n	1000a534 <UART_SetConfig+0xd34>
1000a4fe:	687b      	ldr	r3, [r7, #4]
1000a500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a502:	2b08      	cmp	r3, #8
1000a504:	d014      	beq.n	1000a530 <UART_SetConfig+0xd30>
1000a506:	687b      	ldr	r3, [r7, #4]
1000a508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a50a:	2b09      	cmp	r3, #9
1000a50c:	d00e      	beq.n	1000a52c <UART_SetConfig+0xd2c>
1000a50e:	687b      	ldr	r3, [r7, #4]
1000a510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a512:	2b0a      	cmp	r3, #10
1000a514:	d008      	beq.n	1000a528 <UART_SetConfig+0xd28>
1000a516:	687b      	ldr	r3, [r7, #4]
1000a518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a51a:	2b0b      	cmp	r3, #11
1000a51c:	d102      	bne.n	1000a524 <UART_SetConfig+0xd24>
1000a51e:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a522:	e016      	b.n	1000a552 <UART_SetConfig+0xd52>
1000a524:	2301      	movs	r3, #1
1000a526:	e014      	b.n	1000a552 <UART_SetConfig+0xd52>
1000a528:	2380      	movs	r3, #128	; 0x80
1000a52a:	e012      	b.n	1000a552 <UART_SetConfig+0xd52>
1000a52c:	2340      	movs	r3, #64	; 0x40
1000a52e:	e010      	b.n	1000a552 <UART_SetConfig+0xd52>
1000a530:	2320      	movs	r3, #32
1000a532:	e00e      	b.n	1000a552 <UART_SetConfig+0xd52>
1000a534:	2310      	movs	r3, #16
1000a536:	e00c      	b.n	1000a552 <UART_SetConfig+0xd52>
1000a538:	230c      	movs	r3, #12
1000a53a:	e00a      	b.n	1000a552 <UART_SetConfig+0xd52>
1000a53c:	230a      	movs	r3, #10
1000a53e:	e008      	b.n	1000a552 <UART_SetConfig+0xd52>
1000a540:	2308      	movs	r3, #8
1000a542:	e006      	b.n	1000a552 <UART_SetConfig+0xd52>
1000a544:	2306      	movs	r3, #6
1000a546:	e004      	b.n	1000a552 <UART_SetConfig+0xd52>
1000a548:	2304      	movs	r3, #4
1000a54a:	e002      	b.n	1000a552 <UART_SetConfig+0xd52>
1000a54c:	2302      	movs	r3, #2
1000a54e:	e000      	b.n	1000a552 <UART_SetConfig+0xd52>
1000a550:	2301      	movs	r3, #1
1000a552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000a554:	fbb2 f2f3 	udiv	r2, r2, r3
1000a558:	687b      	ldr	r3, [r7, #4]
1000a55a:	685b      	ldr	r3, [r3, #4]
1000a55c:	085b      	lsrs	r3, r3, #1
1000a55e:	441a      	add	r2, r3
1000a560:	687b      	ldr	r3, [r7, #4]
1000a562:	685b      	ldr	r3, [r3, #4]
1000a564:	fbb2 f3f3 	udiv	r3, r2, r3
1000a568:	b29b      	uxth	r3, r3
1000a56a:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a56c:	e1c5      	b.n	1000a8fa <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PLL3Q:
        HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000a56e:	f107 0314 	add.w	r3, r7, #20
1000a572:	4618      	mov	r0, r3
1000a574:	f7fa ff2e 	bl	100053d4 <HAL_RCC_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a578:	69ba      	ldr	r2, [r7, #24]
1000a57a:	687b      	ldr	r3, [r7, #4]
1000a57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a57e:	2b00      	cmp	r3, #0
1000a580:	d044      	beq.n	1000a60c <UART_SetConfig+0xe0c>
1000a582:	687b      	ldr	r3, [r7, #4]
1000a584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a586:	2b01      	cmp	r3, #1
1000a588:	d03e      	beq.n	1000a608 <UART_SetConfig+0xe08>
1000a58a:	687b      	ldr	r3, [r7, #4]
1000a58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a58e:	2b02      	cmp	r3, #2
1000a590:	d038      	beq.n	1000a604 <UART_SetConfig+0xe04>
1000a592:	687b      	ldr	r3, [r7, #4]
1000a594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a596:	2b03      	cmp	r3, #3
1000a598:	d032      	beq.n	1000a600 <UART_SetConfig+0xe00>
1000a59a:	687b      	ldr	r3, [r7, #4]
1000a59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a59e:	2b04      	cmp	r3, #4
1000a5a0:	d02c      	beq.n	1000a5fc <UART_SetConfig+0xdfc>
1000a5a2:	687b      	ldr	r3, [r7, #4]
1000a5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a5a6:	2b05      	cmp	r3, #5
1000a5a8:	d026      	beq.n	1000a5f8 <UART_SetConfig+0xdf8>
1000a5aa:	687b      	ldr	r3, [r7, #4]
1000a5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a5ae:	2b06      	cmp	r3, #6
1000a5b0:	d020      	beq.n	1000a5f4 <UART_SetConfig+0xdf4>
1000a5b2:	687b      	ldr	r3, [r7, #4]
1000a5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a5b6:	2b07      	cmp	r3, #7
1000a5b8:	d01a      	beq.n	1000a5f0 <UART_SetConfig+0xdf0>
1000a5ba:	687b      	ldr	r3, [r7, #4]
1000a5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a5be:	2b08      	cmp	r3, #8
1000a5c0:	d014      	beq.n	1000a5ec <UART_SetConfig+0xdec>
1000a5c2:	687b      	ldr	r3, [r7, #4]
1000a5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a5c6:	2b09      	cmp	r3, #9
1000a5c8:	d00e      	beq.n	1000a5e8 <UART_SetConfig+0xde8>
1000a5ca:	687b      	ldr	r3, [r7, #4]
1000a5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a5ce:	2b0a      	cmp	r3, #10
1000a5d0:	d008      	beq.n	1000a5e4 <UART_SetConfig+0xde4>
1000a5d2:	687b      	ldr	r3, [r7, #4]
1000a5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a5d6:	2b0b      	cmp	r3, #11
1000a5d8:	d102      	bne.n	1000a5e0 <UART_SetConfig+0xde0>
1000a5da:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a5de:	e016      	b.n	1000a60e <UART_SetConfig+0xe0e>
1000a5e0:	2301      	movs	r3, #1
1000a5e2:	e014      	b.n	1000a60e <UART_SetConfig+0xe0e>
1000a5e4:	2380      	movs	r3, #128	; 0x80
1000a5e6:	e012      	b.n	1000a60e <UART_SetConfig+0xe0e>
1000a5e8:	2340      	movs	r3, #64	; 0x40
1000a5ea:	e010      	b.n	1000a60e <UART_SetConfig+0xe0e>
1000a5ec:	2320      	movs	r3, #32
1000a5ee:	e00e      	b.n	1000a60e <UART_SetConfig+0xe0e>
1000a5f0:	2310      	movs	r3, #16
1000a5f2:	e00c      	b.n	1000a60e <UART_SetConfig+0xe0e>
1000a5f4:	230c      	movs	r3, #12
1000a5f6:	e00a      	b.n	1000a60e <UART_SetConfig+0xe0e>
1000a5f8:	230a      	movs	r3, #10
1000a5fa:	e008      	b.n	1000a60e <UART_SetConfig+0xe0e>
1000a5fc:	2308      	movs	r3, #8
1000a5fe:	e006      	b.n	1000a60e <UART_SetConfig+0xe0e>
1000a600:	2306      	movs	r3, #6
1000a602:	e004      	b.n	1000a60e <UART_SetConfig+0xe0e>
1000a604:	2304      	movs	r3, #4
1000a606:	e002      	b.n	1000a60e <UART_SetConfig+0xe0e>
1000a608:	2302      	movs	r3, #2
1000a60a:	e000      	b.n	1000a60e <UART_SetConfig+0xe0e>
1000a60c:	2301      	movs	r3, #1
1000a60e:	fbb2 f2f3 	udiv	r2, r2, r3
1000a612:	687b      	ldr	r3, [r7, #4]
1000a614:	685b      	ldr	r3, [r3, #4]
1000a616:	085b      	lsrs	r3, r3, #1
1000a618:	441a      	add	r2, r3
1000a61a:	687b      	ldr	r3, [r7, #4]
1000a61c:	685b      	ldr	r3, [r3, #4]
1000a61e:	fbb2 f3f3 	udiv	r3, r2, r3
1000a622:	b29b      	uxth	r3, r3
1000a624:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a626:	e168      	b.n	1000a8fa <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PLL4Q:
        HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000a628:	f107 0308 	add.w	r3, r7, #8
1000a62c:	4618      	mov	r0, r3
1000a62e:	f7fa ffcb 	bl	100055c8 <HAL_RCC_GetPLL4ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll4_clocks.PLL4_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a632:	68fa      	ldr	r2, [r7, #12]
1000a634:	687b      	ldr	r3, [r7, #4]
1000a636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a638:	2b00      	cmp	r3, #0
1000a63a:	d044      	beq.n	1000a6c6 <UART_SetConfig+0xec6>
1000a63c:	687b      	ldr	r3, [r7, #4]
1000a63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a640:	2b01      	cmp	r3, #1
1000a642:	d03e      	beq.n	1000a6c2 <UART_SetConfig+0xec2>
1000a644:	687b      	ldr	r3, [r7, #4]
1000a646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a648:	2b02      	cmp	r3, #2
1000a64a:	d038      	beq.n	1000a6be <UART_SetConfig+0xebe>
1000a64c:	687b      	ldr	r3, [r7, #4]
1000a64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a650:	2b03      	cmp	r3, #3
1000a652:	d032      	beq.n	1000a6ba <UART_SetConfig+0xeba>
1000a654:	687b      	ldr	r3, [r7, #4]
1000a656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a658:	2b04      	cmp	r3, #4
1000a65a:	d02c      	beq.n	1000a6b6 <UART_SetConfig+0xeb6>
1000a65c:	687b      	ldr	r3, [r7, #4]
1000a65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a660:	2b05      	cmp	r3, #5
1000a662:	d026      	beq.n	1000a6b2 <UART_SetConfig+0xeb2>
1000a664:	687b      	ldr	r3, [r7, #4]
1000a666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a668:	2b06      	cmp	r3, #6
1000a66a:	d020      	beq.n	1000a6ae <UART_SetConfig+0xeae>
1000a66c:	687b      	ldr	r3, [r7, #4]
1000a66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a670:	2b07      	cmp	r3, #7
1000a672:	d01a      	beq.n	1000a6aa <UART_SetConfig+0xeaa>
1000a674:	687b      	ldr	r3, [r7, #4]
1000a676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a678:	2b08      	cmp	r3, #8
1000a67a:	d014      	beq.n	1000a6a6 <UART_SetConfig+0xea6>
1000a67c:	687b      	ldr	r3, [r7, #4]
1000a67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a680:	2b09      	cmp	r3, #9
1000a682:	d00e      	beq.n	1000a6a2 <UART_SetConfig+0xea2>
1000a684:	687b      	ldr	r3, [r7, #4]
1000a686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a688:	2b0a      	cmp	r3, #10
1000a68a:	d008      	beq.n	1000a69e <UART_SetConfig+0xe9e>
1000a68c:	687b      	ldr	r3, [r7, #4]
1000a68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a690:	2b0b      	cmp	r3, #11
1000a692:	d102      	bne.n	1000a69a <UART_SetConfig+0xe9a>
1000a694:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a698:	e016      	b.n	1000a6c8 <UART_SetConfig+0xec8>
1000a69a:	2301      	movs	r3, #1
1000a69c:	e014      	b.n	1000a6c8 <UART_SetConfig+0xec8>
1000a69e:	2380      	movs	r3, #128	; 0x80
1000a6a0:	e012      	b.n	1000a6c8 <UART_SetConfig+0xec8>
1000a6a2:	2340      	movs	r3, #64	; 0x40
1000a6a4:	e010      	b.n	1000a6c8 <UART_SetConfig+0xec8>
1000a6a6:	2320      	movs	r3, #32
1000a6a8:	e00e      	b.n	1000a6c8 <UART_SetConfig+0xec8>
1000a6aa:	2310      	movs	r3, #16
1000a6ac:	e00c      	b.n	1000a6c8 <UART_SetConfig+0xec8>
1000a6ae:	230c      	movs	r3, #12
1000a6b0:	e00a      	b.n	1000a6c8 <UART_SetConfig+0xec8>
1000a6b2:	230a      	movs	r3, #10
1000a6b4:	e008      	b.n	1000a6c8 <UART_SetConfig+0xec8>
1000a6b6:	2308      	movs	r3, #8
1000a6b8:	e006      	b.n	1000a6c8 <UART_SetConfig+0xec8>
1000a6ba:	2306      	movs	r3, #6
1000a6bc:	e004      	b.n	1000a6c8 <UART_SetConfig+0xec8>
1000a6be:	2304      	movs	r3, #4
1000a6c0:	e002      	b.n	1000a6c8 <UART_SetConfig+0xec8>
1000a6c2:	2302      	movs	r3, #2
1000a6c4:	e000      	b.n	1000a6c8 <UART_SetConfig+0xec8>
1000a6c6:	2301      	movs	r3, #1
1000a6c8:	fbb2 f2f3 	udiv	r2, r2, r3
1000a6cc:	687b      	ldr	r3, [r7, #4]
1000a6ce:	685b      	ldr	r3, [r3, #4]
1000a6d0:	085b      	lsrs	r3, r3, #1
1000a6d2:	441a      	add	r2, r3
1000a6d4:	687b      	ldr	r3, [r7, #4]
1000a6d6:	685b      	ldr	r3, [r3, #4]
1000a6d8:	fbb2 f3f3 	udiv	r3, r2, r3
1000a6dc:	b29b      	uxth	r3, r3
1000a6de:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a6e0:	e10b      	b.n	1000a8fa <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a6e2:	687b      	ldr	r3, [r7, #4]
1000a6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a6e6:	2b00      	cmp	r3, #0
1000a6e8:	d044      	beq.n	1000a774 <UART_SetConfig+0xf74>
1000a6ea:	687b      	ldr	r3, [r7, #4]
1000a6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a6ee:	2b01      	cmp	r3, #1
1000a6f0:	d03e      	beq.n	1000a770 <UART_SetConfig+0xf70>
1000a6f2:	687b      	ldr	r3, [r7, #4]
1000a6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a6f6:	2b02      	cmp	r3, #2
1000a6f8:	d038      	beq.n	1000a76c <UART_SetConfig+0xf6c>
1000a6fa:	687b      	ldr	r3, [r7, #4]
1000a6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a6fe:	2b03      	cmp	r3, #3
1000a700:	d032      	beq.n	1000a768 <UART_SetConfig+0xf68>
1000a702:	687b      	ldr	r3, [r7, #4]
1000a704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a706:	2b04      	cmp	r3, #4
1000a708:	d02c      	beq.n	1000a764 <UART_SetConfig+0xf64>
1000a70a:	687b      	ldr	r3, [r7, #4]
1000a70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a70e:	2b05      	cmp	r3, #5
1000a710:	d026      	beq.n	1000a760 <UART_SetConfig+0xf60>
1000a712:	687b      	ldr	r3, [r7, #4]
1000a714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a716:	2b06      	cmp	r3, #6
1000a718:	d020      	beq.n	1000a75c <UART_SetConfig+0xf5c>
1000a71a:	687b      	ldr	r3, [r7, #4]
1000a71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a71e:	2b07      	cmp	r3, #7
1000a720:	d01a      	beq.n	1000a758 <UART_SetConfig+0xf58>
1000a722:	687b      	ldr	r3, [r7, #4]
1000a724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a726:	2b08      	cmp	r3, #8
1000a728:	d014      	beq.n	1000a754 <UART_SetConfig+0xf54>
1000a72a:	687b      	ldr	r3, [r7, #4]
1000a72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a72e:	2b09      	cmp	r3, #9
1000a730:	d00e      	beq.n	1000a750 <UART_SetConfig+0xf50>
1000a732:	687b      	ldr	r3, [r7, #4]
1000a734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a736:	2b0a      	cmp	r3, #10
1000a738:	d008      	beq.n	1000a74c <UART_SetConfig+0xf4c>
1000a73a:	687b      	ldr	r3, [r7, #4]
1000a73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a73e:	2b0b      	cmp	r3, #11
1000a740:	d102      	bne.n	1000a748 <UART_SetConfig+0xf48>
1000a742:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a746:	e016      	b.n	1000a776 <UART_SetConfig+0xf76>
1000a748:	2301      	movs	r3, #1
1000a74a:	e014      	b.n	1000a776 <UART_SetConfig+0xf76>
1000a74c:	2380      	movs	r3, #128	; 0x80
1000a74e:	e012      	b.n	1000a776 <UART_SetConfig+0xf76>
1000a750:	2340      	movs	r3, #64	; 0x40
1000a752:	e010      	b.n	1000a776 <UART_SetConfig+0xf76>
1000a754:	2320      	movs	r3, #32
1000a756:	e00e      	b.n	1000a776 <UART_SetConfig+0xf76>
1000a758:	2310      	movs	r3, #16
1000a75a:	e00c      	b.n	1000a776 <UART_SetConfig+0xf76>
1000a75c:	230c      	movs	r3, #12
1000a75e:	e00a      	b.n	1000a776 <UART_SetConfig+0xf76>
1000a760:	230a      	movs	r3, #10
1000a762:	e008      	b.n	1000a776 <UART_SetConfig+0xf76>
1000a764:	2308      	movs	r3, #8
1000a766:	e006      	b.n	1000a776 <UART_SetConfig+0xf76>
1000a768:	2306      	movs	r3, #6
1000a76a:	e004      	b.n	1000a776 <UART_SetConfig+0xf76>
1000a76c:	2304      	movs	r3, #4
1000a76e:	e002      	b.n	1000a776 <UART_SetConfig+0xf76>
1000a770:	2302      	movs	r3, #2
1000a772:	e000      	b.n	1000a776 <UART_SetConfig+0xf76>
1000a774:	2301      	movs	r3, #1
1000a776:	4a72      	ldr	r2, [pc, #456]	; (1000a940 <UART_SetConfig+0x1140>)
1000a778:	fbb2 f2f3 	udiv	r2, r2, r3
1000a77c:	687b      	ldr	r3, [r7, #4]
1000a77e:	685b      	ldr	r3, [r3, #4]
1000a780:	085b      	lsrs	r3, r3, #1
1000a782:	441a      	add	r2, r3
1000a784:	687b      	ldr	r3, [r7, #4]
1000a786:	685b      	ldr	r3, [r3, #4]
1000a788:	fbb2 f3f3 	udiv	r3, r2, r3
1000a78c:	b29b      	uxth	r3, r3
1000a78e:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a790:	e0b3      	b.n	1000a8fa <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a792:	687b      	ldr	r3, [r7, #4]
1000a794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a796:	2b00      	cmp	r3, #0
1000a798:	d044      	beq.n	1000a824 <UART_SetConfig+0x1024>
1000a79a:	687b      	ldr	r3, [r7, #4]
1000a79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a79e:	2b01      	cmp	r3, #1
1000a7a0:	d03e      	beq.n	1000a820 <UART_SetConfig+0x1020>
1000a7a2:	687b      	ldr	r3, [r7, #4]
1000a7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a7a6:	2b02      	cmp	r3, #2
1000a7a8:	d038      	beq.n	1000a81c <UART_SetConfig+0x101c>
1000a7aa:	687b      	ldr	r3, [r7, #4]
1000a7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a7ae:	2b03      	cmp	r3, #3
1000a7b0:	d032      	beq.n	1000a818 <UART_SetConfig+0x1018>
1000a7b2:	687b      	ldr	r3, [r7, #4]
1000a7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a7b6:	2b04      	cmp	r3, #4
1000a7b8:	d02c      	beq.n	1000a814 <UART_SetConfig+0x1014>
1000a7ba:	687b      	ldr	r3, [r7, #4]
1000a7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a7be:	2b05      	cmp	r3, #5
1000a7c0:	d026      	beq.n	1000a810 <UART_SetConfig+0x1010>
1000a7c2:	687b      	ldr	r3, [r7, #4]
1000a7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a7c6:	2b06      	cmp	r3, #6
1000a7c8:	d020      	beq.n	1000a80c <UART_SetConfig+0x100c>
1000a7ca:	687b      	ldr	r3, [r7, #4]
1000a7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a7ce:	2b07      	cmp	r3, #7
1000a7d0:	d01a      	beq.n	1000a808 <UART_SetConfig+0x1008>
1000a7d2:	687b      	ldr	r3, [r7, #4]
1000a7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a7d6:	2b08      	cmp	r3, #8
1000a7d8:	d014      	beq.n	1000a804 <UART_SetConfig+0x1004>
1000a7da:	687b      	ldr	r3, [r7, #4]
1000a7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a7de:	2b09      	cmp	r3, #9
1000a7e0:	d00e      	beq.n	1000a800 <UART_SetConfig+0x1000>
1000a7e2:	687b      	ldr	r3, [r7, #4]
1000a7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a7e6:	2b0a      	cmp	r3, #10
1000a7e8:	d008      	beq.n	1000a7fc <UART_SetConfig+0xffc>
1000a7ea:	687b      	ldr	r3, [r7, #4]
1000a7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a7ee:	2b0b      	cmp	r3, #11
1000a7f0:	d102      	bne.n	1000a7f8 <UART_SetConfig+0xff8>
1000a7f2:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a7f6:	e016      	b.n	1000a826 <UART_SetConfig+0x1026>
1000a7f8:	2301      	movs	r3, #1
1000a7fa:	e014      	b.n	1000a826 <UART_SetConfig+0x1026>
1000a7fc:	2380      	movs	r3, #128	; 0x80
1000a7fe:	e012      	b.n	1000a826 <UART_SetConfig+0x1026>
1000a800:	2340      	movs	r3, #64	; 0x40
1000a802:	e010      	b.n	1000a826 <UART_SetConfig+0x1026>
1000a804:	2320      	movs	r3, #32
1000a806:	e00e      	b.n	1000a826 <UART_SetConfig+0x1026>
1000a808:	2310      	movs	r3, #16
1000a80a:	e00c      	b.n	1000a826 <UART_SetConfig+0x1026>
1000a80c:	230c      	movs	r3, #12
1000a80e:	e00a      	b.n	1000a826 <UART_SetConfig+0x1026>
1000a810:	230a      	movs	r3, #10
1000a812:	e008      	b.n	1000a826 <UART_SetConfig+0x1026>
1000a814:	2308      	movs	r3, #8
1000a816:	e006      	b.n	1000a826 <UART_SetConfig+0x1026>
1000a818:	2306      	movs	r3, #6
1000a81a:	e004      	b.n	1000a826 <UART_SetConfig+0x1026>
1000a81c:	2304      	movs	r3, #4
1000a81e:	e002      	b.n	1000a826 <UART_SetConfig+0x1026>
1000a820:	2302      	movs	r3, #2
1000a822:	e000      	b.n	1000a826 <UART_SetConfig+0x1026>
1000a824:	2301      	movs	r3, #1
1000a826:	4a47      	ldr	r2, [pc, #284]	; (1000a944 <UART_SetConfig+0x1144>)
1000a828:	fbb2 f2f3 	udiv	r2, r2, r3
1000a82c:	687b      	ldr	r3, [r7, #4]
1000a82e:	685b      	ldr	r3, [r3, #4]
1000a830:	085b      	lsrs	r3, r3, #1
1000a832:	441a      	add	r2, r3
1000a834:	687b      	ldr	r3, [r7, #4]
1000a836:	685b      	ldr	r3, [r3, #4]
1000a838:	fbb2 f3f3 	udiv	r3, r2, r3
1000a83c:	b29b      	uxth	r3, r3
1000a83e:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a840:	e05b      	b.n	1000a8fa <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_HSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a842:	687b      	ldr	r3, [r7, #4]
1000a844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a846:	2b00      	cmp	r3, #0
1000a848:	d044      	beq.n	1000a8d4 <UART_SetConfig+0x10d4>
1000a84a:	687b      	ldr	r3, [r7, #4]
1000a84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a84e:	2b01      	cmp	r3, #1
1000a850:	d03e      	beq.n	1000a8d0 <UART_SetConfig+0x10d0>
1000a852:	687b      	ldr	r3, [r7, #4]
1000a854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a856:	2b02      	cmp	r3, #2
1000a858:	d038      	beq.n	1000a8cc <UART_SetConfig+0x10cc>
1000a85a:	687b      	ldr	r3, [r7, #4]
1000a85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a85e:	2b03      	cmp	r3, #3
1000a860:	d032      	beq.n	1000a8c8 <UART_SetConfig+0x10c8>
1000a862:	687b      	ldr	r3, [r7, #4]
1000a864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a866:	2b04      	cmp	r3, #4
1000a868:	d02c      	beq.n	1000a8c4 <UART_SetConfig+0x10c4>
1000a86a:	687b      	ldr	r3, [r7, #4]
1000a86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a86e:	2b05      	cmp	r3, #5
1000a870:	d026      	beq.n	1000a8c0 <UART_SetConfig+0x10c0>
1000a872:	687b      	ldr	r3, [r7, #4]
1000a874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a876:	2b06      	cmp	r3, #6
1000a878:	d020      	beq.n	1000a8bc <UART_SetConfig+0x10bc>
1000a87a:	687b      	ldr	r3, [r7, #4]
1000a87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a87e:	2b07      	cmp	r3, #7
1000a880:	d01a      	beq.n	1000a8b8 <UART_SetConfig+0x10b8>
1000a882:	687b      	ldr	r3, [r7, #4]
1000a884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a886:	2b08      	cmp	r3, #8
1000a888:	d014      	beq.n	1000a8b4 <UART_SetConfig+0x10b4>
1000a88a:	687b      	ldr	r3, [r7, #4]
1000a88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a88e:	2b09      	cmp	r3, #9
1000a890:	d00e      	beq.n	1000a8b0 <UART_SetConfig+0x10b0>
1000a892:	687b      	ldr	r3, [r7, #4]
1000a894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a896:	2b0a      	cmp	r3, #10
1000a898:	d008      	beq.n	1000a8ac <UART_SetConfig+0x10ac>
1000a89a:	687b      	ldr	r3, [r7, #4]
1000a89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a89e:	2b0b      	cmp	r3, #11
1000a8a0:	d102      	bne.n	1000a8a8 <UART_SetConfig+0x10a8>
1000a8a2:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a8a6:	e016      	b.n	1000a8d6 <UART_SetConfig+0x10d6>
1000a8a8:	2301      	movs	r3, #1
1000a8aa:	e014      	b.n	1000a8d6 <UART_SetConfig+0x10d6>
1000a8ac:	2380      	movs	r3, #128	; 0x80
1000a8ae:	e012      	b.n	1000a8d6 <UART_SetConfig+0x10d6>
1000a8b0:	2340      	movs	r3, #64	; 0x40
1000a8b2:	e010      	b.n	1000a8d6 <UART_SetConfig+0x10d6>
1000a8b4:	2320      	movs	r3, #32
1000a8b6:	e00e      	b.n	1000a8d6 <UART_SetConfig+0x10d6>
1000a8b8:	2310      	movs	r3, #16
1000a8ba:	e00c      	b.n	1000a8d6 <UART_SetConfig+0x10d6>
1000a8bc:	230c      	movs	r3, #12
1000a8be:	e00a      	b.n	1000a8d6 <UART_SetConfig+0x10d6>
1000a8c0:	230a      	movs	r3, #10
1000a8c2:	e008      	b.n	1000a8d6 <UART_SetConfig+0x10d6>
1000a8c4:	2308      	movs	r3, #8
1000a8c6:	e006      	b.n	1000a8d6 <UART_SetConfig+0x10d6>
1000a8c8:	2306      	movs	r3, #6
1000a8ca:	e004      	b.n	1000a8d6 <UART_SetConfig+0x10d6>
1000a8cc:	2304      	movs	r3, #4
1000a8ce:	e002      	b.n	1000a8d6 <UART_SetConfig+0x10d6>
1000a8d0:	2302      	movs	r3, #2
1000a8d2:	e000      	b.n	1000a8d6 <UART_SetConfig+0x10d6>
1000a8d4:	2301      	movs	r3, #1
1000a8d6:	4a1c      	ldr	r2, [pc, #112]	; (1000a948 <UART_SetConfig+0x1148>)
1000a8d8:	fbb2 f2f3 	udiv	r2, r2, r3
1000a8dc:	687b      	ldr	r3, [r7, #4]
1000a8de:	685b      	ldr	r3, [r3, #4]
1000a8e0:	085b      	lsrs	r3, r3, #1
1000a8e2:	441a      	add	r2, r3
1000a8e4:	687b      	ldr	r3, [r7, #4]
1000a8e6:	685b      	ldr	r3, [r3, #4]
1000a8e8:	fbb2 f3f3 	udiv	r3, r2, r3
1000a8ec:	b29b      	uxth	r3, r3
1000a8ee:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a8f0:	e003      	b.n	1000a8fa <UART_SetConfig+0x10fa>
      default:
        ret = HAL_ERROR;
1000a8f2:	2301      	movs	r3, #1
1000a8f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
1000a8f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
1000a8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000a8fc:	2b0f      	cmp	r3, #15
1000a8fe:	d908      	bls.n	1000a912 <UART_SetConfig+0x1112>
1000a900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000a902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
1000a906:	d204      	bcs.n	1000a912 <UART_SetConfig+0x1112>
    {
      huart->Instance->BRR = usartdiv;
1000a908:	687b      	ldr	r3, [r7, #4]
1000a90a:	681b      	ldr	r3, [r3, #0]
1000a90c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1000a90e:	60da      	str	r2, [r3, #12]
1000a910:	e002      	b.n	1000a918 <UART_SetConfig+0x1118>
    }
    else
    {
      ret = HAL_ERROR;
1000a912:	2301      	movs	r3, #1
1000a914:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
1000a918:	687b      	ldr	r3, [r7, #4]
1000a91a:	2201      	movs	r2, #1
1000a91c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
1000a920:	687b      	ldr	r3, [r7, #4]
1000a922:	2201      	movs	r2, #1
1000a924:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
1000a928:	687b      	ldr	r3, [r7, #4]
1000a92a:	2200      	movs	r2, #0
1000a92c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
1000a92e:	687b      	ldr	r3, [r7, #4]
1000a930:	2200      	movs	r2, #0
1000a932:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
1000a934:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
1000a938:	4618      	mov	r0, r3
1000a93a:	3738      	adds	r7, #56	; 0x38
1000a93c:	46bd      	mov	sp, r7
1000a93e:	bd80      	pop	{r7, pc}
1000a940:	03d09000 	.word	0x03d09000
1000a944:	003d0900 	.word	0x003d0900
1000a948:	016e3600 	.word	0x016e3600

1000a94c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
1000a94c:	b480      	push	{r7}
1000a94e:	b083      	sub	sp, #12
1000a950:	af00      	add	r7, sp, #0
1000a952:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
1000a954:	687b      	ldr	r3, [r7, #4]
1000a956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a958:	f003 0301 	and.w	r3, r3, #1
1000a95c:	2b00      	cmp	r3, #0
1000a95e:	d00a      	beq.n	1000a976 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
1000a960:	687b      	ldr	r3, [r7, #4]
1000a962:	681b      	ldr	r3, [r3, #0]
1000a964:	685b      	ldr	r3, [r3, #4]
1000a966:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
1000a96a:	687b      	ldr	r3, [r7, #4]
1000a96c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1000a96e:	687b      	ldr	r3, [r7, #4]
1000a970:	681b      	ldr	r3, [r3, #0]
1000a972:	430a      	orrs	r2, r1
1000a974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
1000a976:	687b      	ldr	r3, [r7, #4]
1000a978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a97a:	f003 0302 	and.w	r3, r3, #2
1000a97e:	2b00      	cmp	r3, #0
1000a980:	d00a      	beq.n	1000a998 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
1000a982:	687b      	ldr	r3, [r7, #4]
1000a984:	681b      	ldr	r3, [r3, #0]
1000a986:	685b      	ldr	r3, [r3, #4]
1000a988:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
1000a98c:	687b      	ldr	r3, [r7, #4]
1000a98e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
1000a990:	687b      	ldr	r3, [r7, #4]
1000a992:	681b      	ldr	r3, [r3, #0]
1000a994:	430a      	orrs	r2, r1
1000a996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
1000a998:	687b      	ldr	r3, [r7, #4]
1000a99a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a99c:	f003 0304 	and.w	r3, r3, #4
1000a9a0:	2b00      	cmp	r3, #0
1000a9a2:	d00a      	beq.n	1000a9ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
1000a9a4:	687b      	ldr	r3, [r7, #4]
1000a9a6:	681b      	ldr	r3, [r3, #0]
1000a9a8:	685b      	ldr	r3, [r3, #4]
1000a9aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
1000a9ae:	687b      	ldr	r3, [r7, #4]
1000a9b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
1000a9b2:	687b      	ldr	r3, [r7, #4]
1000a9b4:	681b      	ldr	r3, [r3, #0]
1000a9b6:	430a      	orrs	r2, r1
1000a9b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
1000a9ba:	687b      	ldr	r3, [r7, #4]
1000a9bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a9be:	f003 0308 	and.w	r3, r3, #8
1000a9c2:	2b00      	cmp	r3, #0
1000a9c4:	d00a      	beq.n	1000a9dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
1000a9c6:	687b      	ldr	r3, [r7, #4]
1000a9c8:	681b      	ldr	r3, [r3, #0]
1000a9ca:	685b      	ldr	r3, [r3, #4]
1000a9cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
1000a9d0:	687b      	ldr	r3, [r7, #4]
1000a9d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1000a9d4:	687b      	ldr	r3, [r7, #4]
1000a9d6:	681b      	ldr	r3, [r3, #0]
1000a9d8:	430a      	orrs	r2, r1
1000a9da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
1000a9dc:	687b      	ldr	r3, [r7, #4]
1000a9de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a9e0:	f003 0310 	and.w	r3, r3, #16
1000a9e4:	2b00      	cmp	r3, #0
1000a9e6:	d00a      	beq.n	1000a9fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
1000a9e8:	687b      	ldr	r3, [r7, #4]
1000a9ea:	681b      	ldr	r3, [r3, #0]
1000a9ec:	689b      	ldr	r3, [r3, #8]
1000a9ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
1000a9f2:	687b      	ldr	r3, [r7, #4]
1000a9f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
1000a9f6:	687b      	ldr	r3, [r7, #4]
1000a9f8:	681b      	ldr	r3, [r3, #0]
1000a9fa:	430a      	orrs	r2, r1
1000a9fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
1000a9fe:	687b      	ldr	r3, [r7, #4]
1000aa00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000aa02:	f003 0320 	and.w	r3, r3, #32
1000aa06:	2b00      	cmp	r3, #0
1000aa08:	d00a      	beq.n	1000aa20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
1000aa0a:	687b      	ldr	r3, [r7, #4]
1000aa0c:	681b      	ldr	r3, [r3, #0]
1000aa0e:	689b      	ldr	r3, [r3, #8]
1000aa10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
1000aa14:	687b      	ldr	r3, [r7, #4]
1000aa16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
1000aa18:	687b      	ldr	r3, [r7, #4]
1000aa1a:	681b      	ldr	r3, [r3, #0]
1000aa1c:	430a      	orrs	r2, r1
1000aa1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
1000aa20:	687b      	ldr	r3, [r7, #4]
1000aa22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000aa24:	f003 0340 	and.w	r3, r3, #64	; 0x40
1000aa28:	2b00      	cmp	r3, #0
1000aa2a:	d01a      	beq.n	1000aa62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
1000aa2c:	687b      	ldr	r3, [r7, #4]
1000aa2e:	681b      	ldr	r3, [r3, #0]
1000aa30:	685b      	ldr	r3, [r3, #4]
1000aa32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
1000aa36:	687b      	ldr	r3, [r7, #4]
1000aa38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
1000aa3a:	687b      	ldr	r3, [r7, #4]
1000aa3c:	681b      	ldr	r3, [r3, #0]
1000aa3e:	430a      	orrs	r2, r1
1000aa40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
1000aa42:	687b      	ldr	r3, [r7, #4]
1000aa44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1000aa46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
1000aa4a:	d10a      	bne.n	1000aa62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
1000aa4c:	687b      	ldr	r3, [r7, #4]
1000aa4e:	681b      	ldr	r3, [r3, #0]
1000aa50:	685b      	ldr	r3, [r3, #4]
1000aa52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
1000aa56:	687b      	ldr	r3, [r7, #4]
1000aa58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
1000aa5a:	687b      	ldr	r3, [r7, #4]
1000aa5c:	681b      	ldr	r3, [r3, #0]
1000aa5e:	430a      	orrs	r2, r1
1000aa60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
1000aa62:	687b      	ldr	r3, [r7, #4]
1000aa64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000aa66:	f003 0380 	and.w	r3, r3, #128	; 0x80
1000aa6a:	2b00      	cmp	r3, #0
1000aa6c:	d00a      	beq.n	1000aa84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
1000aa6e:	687b      	ldr	r3, [r7, #4]
1000aa70:	681b      	ldr	r3, [r3, #0]
1000aa72:	685b      	ldr	r3, [r3, #4]
1000aa74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
1000aa78:	687b      	ldr	r3, [r7, #4]
1000aa7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
1000aa7c:	687b      	ldr	r3, [r7, #4]
1000aa7e:	681b      	ldr	r3, [r3, #0]
1000aa80:	430a      	orrs	r2, r1
1000aa82:	605a      	str	r2, [r3, #4]
  }
}
1000aa84:	bf00      	nop
1000aa86:	370c      	adds	r7, #12
1000aa88:	46bd      	mov	sp, r7
1000aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000aa8e:	4770      	bx	lr

1000aa90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
1000aa90:	b580      	push	{r7, lr}
1000aa92:	b086      	sub	sp, #24
1000aa94:	af02      	add	r7, sp, #8
1000aa96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
1000aa98:	687b      	ldr	r3, [r7, #4]
1000aa9a:	2200      	movs	r2, #0
1000aa9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
1000aaa0:	f7f6 ffc8 	bl	10001a34 <HAL_GetTick>
1000aaa4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
1000aaa6:	687b      	ldr	r3, [r7, #4]
1000aaa8:	681b      	ldr	r3, [r3, #0]
1000aaaa:	681b      	ldr	r3, [r3, #0]
1000aaac:	f003 0308 	and.w	r3, r3, #8
1000aab0:	2b08      	cmp	r3, #8
1000aab2:	d10e      	bne.n	1000aad2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
1000aab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
1000aab8:	9300      	str	r3, [sp, #0]
1000aaba:	68fb      	ldr	r3, [r7, #12]
1000aabc:	2200      	movs	r2, #0
1000aabe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
1000aac2:	6878      	ldr	r0, [r7, #4]
1000aac4:	f000 f82c 	bl	1000ab20 <UART_WaitOnFlagUntilTimeout>
1000aac8:	4603      	mov	r3, r0
1000aaca:	2b00      	cmp	r3, #0
1000aacc:	d001      	beq.n	1000aad2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
1000aace:	2303      	movs	r3, #3
1000aad0:	e022      	b.n	1000ab18 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
1000aad2:	687b      	ldr	r3, [r7, #4]
1000aad4:	681b      	ldr	r3, [r3, #0]
1000aad6:	681b      	ldr	r3, [r3, #0]
1000aad8:	f003 0304 	and.w	r3, r3, #4
1000aadc:	2b04      	cmp	r3, #4
1000aade:	d10e      	bne.n	1000aafe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
1000aae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
1000aae4:	9300      	str	r3, [sp, #0]
1000aae6:	68fb      	ldr	r3, [r7, #12]
1000aae8:	2200      	movs	r2, #0
1000aaea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
1000aaee:	6878      	ldr	r0, [r7, #4]
1000aaf0:	f000 f816 	bl	1000ab20 <UART_WaitOnFlagUntilTimeout>
1000aaf4:	4603      	mov	r3, r0
1000aaf6:	2b00      	cmp	r3, #0
1000aaf8:	d001      	beq.n	1000aafe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
1000aafa:	2303      	movs	r3, #3
1000aafc:	e00c      	b.n	1000ab18 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
1000aafe:	687b      	ldr	r3, [r7, #4]
1000ab00:	2220      	movs	r2, #32
1000ab02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
1000ab06:	687b      	ldr	r3, [r7, #4]
1000ab08:	2220      	movs	r2, #32
1000ab0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  __HAL_UNLOCK(huart);
1000ab0e:	687b      	ldr	r3, [r7, #4]
1000ab10:	2200      	movs	r2, #0
1000ab12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
1000ab16:	2300      	movs	r3, #0
}
1000ab18:	4618      	mov	r0, r3
1000ab1a:	3710      	adds	r7, #16
1000ab1c:	46bd      	mov	sp, r7
1000ab1e:	bd80      	pop	{r7, pc}

1000ab20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
1000ab20:	b580      	push	{r7, lr}
1000ab22:	b084      	sub	sp, #16
1000ab24:	af00      	add	r7, sp, #0
1000ab26:	60f8      	str	r0, [r7, #12]
1000ab28:	60b9      	str	r1, [r7, #8]
1000ab2a:	603b      	str	r3, [r7, #0]
1000ab2c:	4613      	mov	r3, r2
1000ab2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1000ab30:	e062      	b.n	1000abf8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
1000ab32:	69bb      	ldr	r3, [r7, #24]
1000ab34:	f1b3 3fff 	cmp.w	r3, #4294967295
1000ab38:	d05e      	beq.n	1000abf8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
1000ab3a:	f7f6 ff7b 	bl	10001a34 <HAL_GetTick>
1000ab3e:	4602      	mov	r2, r0
1000ab40:	683b      	ldr	r3, [r7, #0]
1000ab42:	1ad3      	subs	r3, r2, r3
1000ab44:	69ba      	ldr	r2, [r7, #24]
1000ab46:	429a      	cmp	r2, r3
1000ab48:	d302      	bcc.n	1000ab50 <UART_WaitOnFlagUntilTimeout+0x30>
1000ab4a:	69bb      	ldr	r3, [r7, #24]
1000ab4c:	2b00      	cmp	r3, #0
1000ab4e:	d11d      	bne.n	1000ab8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
1000ab50:	68fb      	ldr	r3, [r7, #12]
1000ab52:	681b      	ldr	r3, [r3, #0]
1000ab54:	681a      	ldr	r2, [r3, #0]
1000ab56:	68fb      	ldr	r3, [r7, #12]
1000ab58:	681b      	ldr	r3, [r3, #0]
1000ab5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
1000ab5e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1000ab60:	68fb      	ldr	r3, [r7, #12]
1000ab62:	681b      	ldr	r3, [r3, #0]
1000ab64:	689a      	ldr	r2, [r3, #8]
1000ab66:	68fb      	ldr	r3, [r7, #12]
1000ab68:	681b      	ldr	r3, [r3, #0]
1000ab6a:	f022 0201 	bic.w	r2, r2, #1
1000ab6e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
1000ab70:	68fb      	ldr	r3, [r7, #12]
1000ab72:	2220      	movs	r2, #32
1000ab74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
1000ab78:	68fb      	ldr	r3, [r7, #12]
1000ab7a:	2220      	movs	r2, #32
1000ab7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
1000ab80:	68fb      	ldr	r3, [r7, #12]
1000ab82:	2200      	movs	r2, #0
1000ab84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
1000ab88:	2303      	movs	r3, #3
1000ab8a:	e045      	b.n	1000ac18 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
1000ab8c:	68fb      	ldr	r3, [r7, #12]
1000ab8e:	681b      	ldr	r3, [r3, #0]
1000ab90:	681b      	ldr	r3, [r3, #0]
1000ab92:	f003 0304 	and.w	r3, r3, #4
1000ab96:	2b00      	cmp	r3, #0
1000ab98:	d02e      	beq.n	1000abf8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
1000ab9a:	68fb      	ldr	r3, [r7, #12]
1000ab9c:	681b      	ldr	r3, [r3, #0]
1000ab9e:	69db      	ldr	r3, [r3, #28]
1000aba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
1000aba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
1000aba8:	d126      	bne.n	1000abf8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
1000abaa:	68fb      	ldr	r3, [r7, #12]
1000abac:	681b      	ldr	r3, [r3, #0]
1000abae:	f44f 6200 	mov.w	r2, #2048	; 0x800
1000abb2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
1000abb4:	68fb      	ldr	r3, [r7, #12]
1000abb6:	681b      	ldr	r3, [r3, #0]
1000abb8:	681a      	ldr	r2, [r3, #0]
1000abba:	68fb      	ldr	r3, [r7, #12]
1000abbc:	681b      	ldr	r3, [r3, #0]
1000abbe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
1000abc2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1000abc4:	68fb      	ldr	r3, [r7, #12]
1000abc6:	681b      	ldr	r3, [r3, #0]
1000abc8:	689a      	ldr	r2, [r3, #8]
1000abca:	68fb      	ldr	r3, [r7, #12]
1000abcc:	681b      	ldr	r3, [r3, #0]
1000abce:	f022 0201 	bic.w	r2, r2, #1
1000abd2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
1000abd4:	68fb      	ldr	r3, [r7, #12]
1000abd6:	2220      	movs	r2, #32
1000abd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
1000abdc:	68fb      	ldr	r3, [r7, #12]
1000abde:	2220      	movs	r2, #32
1000abe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
1000abe4:	68fb      	ldr	r3, [r7, #12]
1000abe6:	2220      	movs	r2, #32
1000abe8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
1000abec:	68fb      	ldr	r3, [r7, #12]
1000abee:	2200      	movs	r2, #0
1000abf0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
          
          return HAL_TIMEOUT;
1000abf4:	2303      	movs	r3, #3
1000abf6:	e00f      	b.n	1000ac18 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1000abf8:	68fb      	ldr	r3, [r7, #12]
1000abfa:	681b      	ldr	r3, [r3, #0]
1000abfc:	69da      	ldr	r2, [r3, #28]
1000abfe:	68bb      	ldr	r3, [r7, #8]
1000ac00:	4013      	ands	r3, r2
1000ac02:	68ba      	ldr	r2, [r7, #8]
1000ac04:	429a      	cmp	r2, r3
1000ac06:	bf0c      	ite	eq
1000ac08:	2301      	moveq	r3, #1
1000ac0a:	2300      	movne	r3, #0
1000ac0c:	b2db      	uxtb	r3, r3
1000ac0e:	461a      	mov	r2, r3
1000ac10:	79fb      	ldrb	r3, [r7, #7]
1000ac12:	429a      	cmp	r2, r3
1000ac14:	d08d      	beq.n	1000ab32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
1000ac16:	2300      	movs	r3, #0
}
1000ac18:	4618      	mov	r0, r3
1000ac1a:	3710      	adds	r7, #16
1000ac1c:	46bd      	mov	sp, r7
1000ac1e:	bd80      	pop	{r7, pc}

1000ac20 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
1000ac20:	b480      	push	{r7}
1000ac22:	b085      	sub	sp, #20
1000ac24:	af00      	add	r7, sp, #0
1000ac26:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
1000ac28:	687b      	ldr	r3, [r7, #4]
1000ac2a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
1000ac2e:	2b01      	cmp	r3, #1
1000ac30:	d101      	bne.n	1000ac36 <HAL_UARTEx_DisableFifoMode+0x16>
1000ac32:	2302      	movs	r3, #2
1000ac34:	e027      	b.n	1000ac86 <HAL_UARTEx_DisableFifoMode+0x66>
1000ac36:	687b      	ldr	r3, [r7, #4]
1000ac38:	2201      	movs	r2, #1
1000ac3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
1000ac3e:	687b      	ldr	r3, [r7, #4]
1000ac40:	2224      	movs	r2, #36	; 0x24
1000ac42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1000ac46:	687b      	ldr	r3, [r7, #4]
1000ac48:	681b      	ldr	r3, [r3, #0]
1000ac4a:	681b      	ldr	r3, [r3, #0]
1000ac4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1000ac4e:	687b      	ldr	r3, [r7, #4]
1000ac50:	681b      	ldr	r3, [r3, #0]
1000ac52:	681a      	ldr	r2, [r3, #0]
1000ac54:	687b      	ldr	r3, [r7, #4]
1000ac56:	681b      	ldr	r3, [r3, #0]
1000ac58:	f022 0201 	bic.w	r2, r2, #1
1000ac5c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
1000ac5e:	68fb      	ldr	r3, [r7, #12]
1000ac60:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
1000ac64:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
1000ac66:	687b      	ldr	r3, [r7, #4]
1000ac68:	2200      	movs	r2, #0
1000ac6a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1000ac6c:	687b      	ldr	r3, [r7, #4]
1000ac6e:	681b      	ldr	r3, [r3, #0]
1000ac70:	68fa      	ldr	r2, [r7, #12]
1000ac72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1000ac74:	687b      	ldr	r3, [r7, #4]
1000ac76:	2220      	movs	r2, #32
1000ac78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1000ac7c:	687b      	ldr	r3, [r7, #4]
1000ac7e:	2200      	movs	r2, #0
1000ac80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
1000ac84:	2300      	movs	r3, #0
}
1000ac86:	4618      	mov	r0, r3
1000ac88:	3714      	adds	r7, #20
1000ac8a:	46bd      	mov	sp, r7
1000ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
1000ac90:	4770      	bx	lr

1000ac92 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1000ac92:	b580      	push	{r7, lr}
1000ac94:	b084      	sub	sp, #16
1000ac96:	af00      	add	r7, sp, #0
1000ac98:	6078      	str	r0, [r7, #4]
1000ac9a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1000ac9c:	687b      	ldr	r3, [r7, #4]
1000ac9e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
1000aca2:	2b01      	cmp	r3, #1
1000aca4:	d101      	bne.n	1000acaa <HAL_UARTEx_SetTxFifoThreshold+0x18>
1000aca6:	2302      	movs	r3, #2
1000aca8:	e02d      	b.n	1000ad06 <HAL_UARTEx_SetTxFifoThreshold+0x74>
1000acaa:	687b      	ldr	r3, [r7, #4]
1000acac:	2201      	movs	r2, #1
1000acae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
1000acb2:	687b      	ldr	r3, [r7, #4]
1000acb4:	2224      	movs	r2, #36	; 0x24
1000acb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1000acba:	687b      	ldr	r3, [r7, #4]
1000acbc:	681b      	ldr	r3, [r3, #0]
1000acbe:	681b      	ldr	r3, [r3, #0]
1000acc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1000acc2:	687b      	ldr	r3, [r7, #4]
1000acc4:	681b      	ldr	r3, [r3, #0]
1000acc6:	681a      	ldr	r2, [r3, #0]
1000acc8:	687b      	ldr	r3, [r7, #4]
1000acca:	681b      	ldr	r3, [r3, #0]
1000accc:	f022 0201 	bic.w	r2, r2, #1
1000acd0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
1000acd2:	687b      	ldr	r3, [r7, #4]
1000acd4:	681b      	ldr	r3, [r3, #0]
1000acd6:	689b      	ldr	r3, [r3, #8]
1000acd8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
1000acdc:	687b      	ldr	r3, [r7, #4]
1000acde:	681b      	ldr	r3, [r3, #0]
1000ace0:	683a      	ldr	r2, [r7, #0]
1000ace2:	430a      	orrs	r2, r1
1000ace4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1000ace6:	6878      	ldr	r0, [r7, #4]
1000ace8:	f000 f850 	bl	1000ad8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1000acec:	687b      	ldr	r3, [r7, #4]
1000acee:	681b      	ldr	r3, [r3, #0]
1000acf0:	68fa      	ldr	r2, [r7, #12]
1000acf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1000acf4:	687b      	ldr	r3, [r7, #4]
1000acf6:	2220      	movs	r2, #32
1000acf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1000acfc:	687b      	ldr	r3, [r7, #4]
1000acfe:	2200      	movs	r2, #0
1000ad00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
1000ad04:	2300      	movs	r3, #0
}
1000ad06:	4618      	mov	r0, r3
1000ad08:	3710      	adds	r7, #16
1000ad0a:	46bd      	mov	sp, r7
1000ad0c:	bd80      	pop	{r7, pc}

1000ad0e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1000ad0e:	b580      	push	{r7, lr}
1000ad10:	b084      	sub	sp, #16
1000ad12:	af00      	add	r7, sp, #0
1000ad14:	6078      	str	r0, [r7, #4]
1000ad16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1000ad18:	687b      	ldr	r3, [r7, #4]
1000ad1a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
1000ad1e:	2b01      	cmp	r3, #1
1000ad20:	d101      	bne.n	1000ad26 <HAL_UARTEx_SetRxFifoThreshold+0x18>
1000ad22:	2302      	movs	r3, #2
1000ad24:	e02d      	b.n	1000ad82 <HAL_UARTEx_SetRxFifoThreshold+0x74>
1000ad26:	687b      	ldr	r3, [r7, #4]
1000ad28:	2201      	movs	r2, #1
1000ad2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
1000ad2e:	687b      	ldr	r3, [r7, #4]
1000ad30:	2224      	movs	r2, #36	; 0x24
1000ad32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1000ad36:	687b      	ldr	r3, [r7, #4]
1000ad38:	681b      	ldr	r3, [r3, #0]
1000ad3a:	681b      	ldr	r3, [r3, #0]
1000ad3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1000ad3e:	687b      	ldr	r3, [r7, #4]
1000ad40:	681b      	ldr	r3, [r3, #0]
1000ad42:	681a      	ldr	r2, [r3, #0]
1000ad44:	687b      	ldr	r3, [r7, #4]
1000ad46:	681b      	ldr	r3, [r3, #0]
1000ad48:	f022 0201 	bic.w	r2, r2, #1
1000ad4c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
1000ad4e:	687b      	ldr	r3, [r7, #4]
1000ad50:	681b      	ldr	r3, [r3, #0]
1000ad52:	689b      	ldr	r3, [r3, #8]
1000ad54:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
1000ad58:	687b      	ldr	r3, [r7, #4]
1000ad5a:	681b      	ldr	r3, [r3, #0]
1000ad5c:	683a      	ldr	r2, [r7, #0]
1000ad5e:	430a      	orrs	r2, r1
1000ad60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1000ad62:	6878      	ldr	r0, [r7, #4]
1000ad64:	f000 f812 	bl	1000ad8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1000ad68:	687b      	ldr	r3, [r7, #4]
1000ad6a:	681b      	ldr	r3, [r3, #0]
1000ad6c:	68fa      	ldr	r2, [r7, #12]
1000ad6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1000ad70:	687b      	ldr	r3, [r7, #4]
1000ad72:	2220      	movs	r2, #32
1000ad74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1000ad78:	687b      	ldr	r3, [r7, #4]
1000ad7a:	2200      	movs	r2, #0
1000ad7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
1000ad80:	2300      	movs	r3, #0
}
1000ad82:	4618      	mov	r0, r3
1000ad84:	3710      	adds	r7, #16
1000ad86:	46bd      	mov	sp, r7
1000ad88:	bd80      	pop	{r7, pc}
	...

1000ad8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
1000ad8c:	b480      	push	{r7}
1000ad8e:	b089      	sub	sp, #36	; 0x24
1000ad90:	af00      	add	r7, sp, #0
1000ad92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
1000ad94:	4a2d      	ldr	r2, [pc, #180]	; (1000ae4c <UARTEx_SetNbDataToProcess+0xc0>)
1000ad96:	f107 0314 	add.w	r3, r7, #20
1000ad9a:	e892 0003 	ldmia.w	r2, {r0, r1}
1000ad9e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
1000ada2:	4a2b      	ldr	r2, [pc, #172]	; (1000ae50 <UARTEx_SetNbDataToProcess+0xc4>)
1000ada4:	f107 030c 	add.w	r3, r7, #12
1000ada8:	e892 0003 	ldmia.w	r2, {r0, r1}
1000adac:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
1000adb0:	687b      	ldr	r3, [r7, #4]
1000adb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
1000adb4:	2b00      	cmp	r3, #0
1000adb6:	d108      	bne.n	1000adca <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
1000adb8:	687b      	ldr	r3, [r7, #4]
1000adba:	2201      	movs	r2, #1
1000adbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
1000adc0:	687b      	ldr	r3, [r7, #4]
1000adc2:	2201      	movs	r2, #1
1000adc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
1000adc8:	e039      	b.n	1000ae3e <UARTEx_SetNbDataToProcess+0xb2>
    rx_fifo_depth = RX_FIFO_DEPTH;
1000adca:	2308      	movs	r3, #8
1000adcc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
1000adce:	2308      	movs	r3, #8
1000add0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
1000add2:	687b      	ldr	r3, [r7, #4]
1000add4:	681b      	ldr	r3, [r3, #0]
1000add6:	689b      	ldr	r3, [r3, #8]
1000add8:	0e5b      	lsrs	r3, r3, #25
1000adda:	b2db      	uxtb	r3, r3
1000addc:	f003 0307 	and.w	r3, r3, #7
1000ade0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
1000ade2:	687b      	ldr	r3, [r7, #4]
1000ade4:	681b      	ldr	r3, [r3, #0]
1000ade6:	689b      	ldr	r3, [r3, #8]
1000ade8:	0f5b      	lsrs	r3, r3, #29
1000adea:	b2db      	uxtb	r3, r3
1000adec:	f003 0307 	and.w	r3, r3, #7
1000adf0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
1000adf2:	7fbb      	ldrb	r3, [r7, #30]
1000adf4:	7f3a      	ldrb	r2, [r7, #28]
1000adf6:	3220      	adds	r2, #32
1000adf8:	443a      	add	r2, r7
1000adfa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
1000adfe:	fb02 f303 	mul.w	r3, r2, r3
1000ae02:	7f3a      	ldrb	r2, [r7, #28]
1000ae04:	3220      	adds	r2, #32
1000ae06:	443a      	add	r2, r7
1000ae08:	f812 2c14 	ldrb.w	r2, [r2, #-20]
1000ae0c:	fb93 f3f2 	sdiv	r3, r3, r2
1000ae10:	b29a      	uxth	r2, r3
1000ae12:	687b      	ldr	r3, [r7, #4]
1000ae14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
1000ae18:	7ffb      	ldrb	r3, [r7, #31]
1000ae1a:	7f7a      	ldrb	r2, [r7, #29]
1000ae1c:	3220      	adds	r2, #32
1000ae1e:	443a      	add	r2, r7
1000ae20:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
1000ae24:	fb02 f303 	mul.w	r3, r2, r3
1000ae28:	7f7a      	ldrb	r2, [r7, #29]
1000ae2a:	3220      	adds	r2, #32
1000ae2c:	443a      	add	r2, r7
1000ae2e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
1000ae32:	fb93 f3f2 	sdiv	r3, r3, r2
1000ae36:	b29a      	uxth	r2, r3
1000ae38:	687b      	ldr	r3, [r7, #4]
1000ae3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
1000ae3e:	bf00      	nop
1000ae40:	3724      	adds	r7, #36	; 0x24
1000ae42:	46bd      	mov	sp, r7
1000ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
1000ae48:	4770      	bx	lr
1000ae4a:	bf00      	nop
1000ae4c:	1000e538 	.word	0x1000e538
1000ae50:	1000e540 	.word	0x1000e540

1000ae54 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
1000ae54:	b480      	push	{r7}
1000ae56:	b083      	sub	sp, #12
1000ae58:	af00      	add	r7, sp, #0
1000ae5a:	6078      	str	r0, [r7, #4]
	list->prev = list;
1000ae5c:	687b      	ldr	r3, [r7, #4]
1000ae5e:	687a      	ldr	r2, [r7, #4]
1000ae60:	605a      	str	r2, [r3, #4]
	list->next = list;
1000ae62:	687b      	ldr	r3, [r7, #4]
1000ae64:	687a      	ldr	r2, [r7, #4]
1000ae66:	601a      	str	r2, [r3, #0]
}
1000ae68:	bf00      	nop
1000ae6a:	370c      	adds	r7, #12
1000ae6c:	46bd      	mov	sp, r7
1000ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
1000ae72:	4770      	bx	lr

1000ae74 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
1000ae74:	b480      	push	{r7}
1000ae76:	b083      	sub	sp, #12
1000ae78:	af00      	add	r7, sp, #0
1000ae7a:	6078      	str	r0, [r7, #4]
1000ae7c:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
1000ae7e:	687b      	ldr	r3, [r7, #4]
1000ae80:	685a      	ldr	r2, [r3, #4]
1000ae82:	683b      	ldr	r3, [r7, #0]
1000ae84:	605a      	str	r2, [r3, #4]
	new_node->next = node;
1000ae86:	683b      	ldr	r3, [r7, #0]
1000ae88:	687a      	ldr	r2, [r7, #4]
1000ae8a:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
1000ae8c:	683b      	ldr	r3, [r7, #0]
1000ae8e:	681b      	ldr	r3, [r3, #0]
1000ae90:	683a      	ldr	r2, [r7, #0]
1000ae92:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
1000ae94:	683b      	ldr	r3, [r7, #0]
1000ae96:	685b      	ldr	r3, [r3, #4]
1000ae98:	683a      	ldr	r2, [r7, #0]
1000ae9a:	601a      	str	r2, [r3, #0]
}
1000ae9c:	bf00      	nop
1000ae9e:	370c      	adds	r7, #12
1000aea0:	46bd      	mov	sp, r7
1000aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
1000aea6:	4770      	bx	lr

1000aea8 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
1000aea8:	b580      	push	{r7, lr}
1000aeaa:	b082      	sub	sp, #8
1000aeac:	af00      	add	r7, sp, #0
1000aeae:	6078      	str	r0, [r7, #4]
1000aeb0:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
1000aeb2:	6839      	ldr	r1, [r7, #0]
1000aeb4:	6878      	ldr	r0, [r7, #4]
1000aeb6:	f7ff ffdd 	bl	1000ae74 <metal_list_add_before>
}
1000aeba:	bf00      	nop
1000aebc:	3708      	adds	r7, #8
1000aebe:	46bd      	mov	sp, r7
1000aec0:	bd80      	pop	{r7, pc}

1000aec2 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
1000aec2:	b580      	push	{r7, lr}
1000aec4:	b082      	sub	sp, #8
1000aec6:	af00      	add	r7, sp, #0
1000aec8:	6078      	str	r0, [r7, #4]
1000aeca:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
1000aecc:	6839      	ldr	r1, [r7, #0]
1000aece:	6878      	ldr	r0, [r7, #4]
1000aed0:	f001 fc26 	bl	1000c720 <metal_machine_cache_flush>
}
1000aed4:	bf00      	nop
1000aed6:	3708      	adds	r7, #8
1000aed8:	46bd      	mov	sp, r7
1000aeda:	bd80      	pop	{r7, pc}

1000aedc <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
1000aedc:	b580      	push	{r7, lr}
1000aede:	b082      	sub	sp, #8
1000aee0:	af00      	add	r7, sp, #0
1000aee2:	6078      	str	r0, [r7, #4]
1000aee4:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
1000aee6:	6839      	ldr	r1, [r7, #0]
1000aee8:	6878      	ldr	r0, [r7, #4]
1000aeea:	f001 fc24 	bl	1000c736 <metal_machine_cache_invalidate>
}
1000aeee:	bf00      	nop
1000aef0:	3708      	adds	r7, #8
1000aef2:	46bd      	mov	sp, r7
1000aef4:	bd80      	pop	{r7, pc}

1000aef6 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
1000aef6:	b580      	push	{r7, lr}
1000aef8:	b082      	sub	sp, #8
1000aefa:	af00      	add	r7, sp, #0
1000aefc:	6078      	str	r0, [r7, #4]
1000aefe:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
1000af00:	6839      	ldr	r1, [r7, #0]
1000af02:	6878      	ldr	r0, [r7, #4]
1000af04:	f7ff ffdd 	bl	1000aec2 <__metal_cache_flush>
}
1000af08:	bf00      	nop
1000af0a:	3708      	adds	r7, #8
1000af0c:	46bd      	mov	sp, r7
1000af0e:	bd80      	pop	{r7, pc}

1000af10 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
1000af10:	b580      	push	{r7, lr}
1000af12:	b082      	sub	sp, #8
1000af14:	af00      	add	r7, sp, #0
1000af16:	6078      	str	r0, [r7, #4]
1000af18:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
1000af1a:	6839      	ldr	r1, [r7, #0]
1000af1c:	6878      	ldr	r0, [r7, #4]
1000af1e:	f7ff ffdd 	bl	1000aedc <__metal_cache_invalidate>
}
1000af22:	bf00      	nop
1000af24:	3708      	adds	r7, #8
1000af26:	46bd      	mov	sp, r7
1000af28:	bd80      	pop	{r7, pc}
	...

1000af2c <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
1000af2c:	b580      	push	{r7, lr}
1000af2e:	b082      	sub	sp, #8
1000af30:	af00      	add	r7, sp, #0
1000af32:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
1000af34:	687b      	ldr	r3, [r7, #4]
1000af36:	2b00      	cmp	r3, #0
1000af38:	d008      	beq.n	1000af4c <metal_bus_register+0x20>
1000af3a:	687b      	ldr	r3, [r7, #4]
1000af3c:	681b      	ldr	r3, [r3, #0]
1000af3e:	2b00      	cmp	r3, #0
1000af40:	d004      	beq.n	1000af4c <metal_bus_register+0x20>
1000af42:	687b      	ldr	r3, [r7, #4]
1000af44:	681b      	ldr	r3, [r3, #0]
1000af46:	781b      	ldrb	r3, [r3, #0]
1000af48:	2b00      	cmp	r3, #0
1000af4a:	d102      	bne.n	1000af52 <metal_bus_register+0x26>
		return -EINVAL;
1000af4c:	f06f 0315 	mvn.w	r3, #21
1000af50:	e026      	b.n	1000afa0 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
1000af52:	687b      	ldr	r3, [r7, #4]
1000af54:	681b      	ldr	r3, [r3, #0]
1000af56:	2100      	movs	r1, #0
1000af58:	4618      	mov	r0, r3
1000af5a:	f000 f82b 	bl	1000afb4 <metal_bus_find>
1000af5e:	4603      	mov	r3, r0
1000af60:	2b00      	cmp	r3, #0
1000af62:	d102      	bne.n	1000af6a <metal_bus_register+0x3e>
		return -EEXIST;
1000af64:	f06f 0310 	mvn.w	r3, #16
1000af68:	e01a      	b.n	1000afa0 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
1000af6a:	687b      	ldr	r3, [r7, #4]
1000af6c:	331c      	adds	r3, #28
1000af6e:	4618      	mov	r0, r3
1000af70:	f7ff ff70 	bl	1000ae54 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
1000af74:	687b      	ldr	r3, [r7, #4]
1000af76:	3324      	adds	r3, #36	; 0x24
1000af78:	4619      	mov	r1, r3
1000af7a:	480b      	ldr	r0, [pc, #44]	; (1000afa8 <metal_bus_register+0x7c>)
1000af7c:	f7ff ff94 	bl	1000aea8 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
1000af80:	4b0a      	ldr	r3, [pc, #40]	; (1000afac <metal_bus_register+0x80>)
1000af82:	781b      	ldrb	r3, [r3, #0]
1000af84:	2b06      	cmp	r3, #6
1000af86:	d90a      	bls.n	1000af9e <metal_bus_register+0x72>
1000af88:	4b08      	ldr	r3, [pc, #32]	; (1000afac <metal_bus_register+0x80>)
1000af8a:	685b      	ldr	r3, [r3, #4]
1000af8c:	2b00      	cmp	r3, #0
1000af8e:	d006      	beq.n	1000af9e <metal_bus_register+0x72>
1000af90:	4b06      	ldr	r3, [pc, #24]	; (1000afac <metal_bus_register+0x80>)
1000af92:	685b      	ldr	r3, [r3, #4]
1000af94:	687a      	ldr	r2, [r7, #4]
1000af96:	6812      	ldr	r2, [r2, #0]
1000af98:	4905      	ldr	r1, [pc, #20]	; (1000afb0 <metal_bus_register+0x84>)
1000af9a:	2007      	movs	r0, #7
1000af9c:	4798      	blx	r3
	return 0;
1000af9e:	2300      	movs	r3, #0
}
1000afa0:	4618      	mov	r0, r3
1000afa2:	3708      	adds	r7, #8
1000afa4:	46bd      	mov	sp, r7
1000afa6:	bd80      	pop	{r7, pc}
1000afa8:	100203ec 	.word	0x100203ec
1000afac:	100203e4 	.word	0x100203e4
1000afb0:	1000e548 	.word	0x1000e548

1000afb4 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
1000afb4:	b580      	push	{r7, lr}
1000afb6:	b084      	sub	sp, #16
1000afb8:	af00      	add	r7, sp, #0
1000afba:	6078      	str	r0, [r7, #4]
1000afbc:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
1000afbe:	4b12      	ldr	r3, [pc, #72]	; (1000b008 <metal_bus_find+0x54>)
1000afc0:	689b      	ldr	r3, [r3, #8]
1000afc2:	60fb      	str	r3, [r7, #12]
1000afc4:	e016      	b.n	1000aff4 <metal_bus_find+0x40>
		bus = metal_container_of(node, struct metal_bus, node);
1000afc6:	68fb      	ldr	r3, [r7, #12]
1000afc8:	3b24      	subs	r3, #36	; 0x24
1000afca:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) == 0 && result) {
1000afcc:	68bb      	ldr	r3, [r7, #8]
1000afce:	681b      	ldr	r3, [r3, #0]
1000afd0:	6879      	ldr	r1, [r7, #4]
1000afd2:	4618      	mov	r0, r3
1000afd4:	f7f5 f834 	bl	10000040 <strcmp>
1000afd8:	4603      	mov	r3, r0
1000afda:	2b00      	cmp	r3, #0
1000afdc:	d107      	bne.n	1000afee <metal_bus_find+0x3a>
1000afde:	683b      	ldr	r3, [r7, #0]
1000afe0:	2b00      	cmp	r3, #0
1000afe2:	d004      	beq.n	1000afee <metal_bus_find+0x3a>
			*result = bus;
1000afe4:	683b      	ldr	r3, [r7, #0]
1000afe6:	68ba      	ldr	r2, [r7, #8]
1000afe8:	601a      	str	r2, [r3, #0]
			return 0;
1000afea:	2300      	movs	r3, #0
1000afec:	e008      	b.n	1000b000 <metal_bus_find+0x4c>
	metal_list_for_each(&_metal.common.bus_list, node) {
1000afee:	68fb      	ldr	r3, [r7, #12]
1000aff0:	681b      	ldr	r3, [r3, #0]
1000aff2:	60fb      	str	r3, [r7, #12]
1000aff4:	68fb      	ldr	r3, [r7, #12]
1000aff6:	4a05      	ldr	r2, [pc, #20]	; (1000b00c <metal_bus_find+0x58>)
1000aff8:	4293      	cmp	r3, r2
1000affa:	d1e4      	bne.n	1000afc6 <metal_bus_find+0x12>
		}
	}
	return -ENOENT;
1000affc:	f06f 0301 	mvn.w	r3, #1
}
1000b000:	4618      	mov	r0, r3
1000b002:	3710      	adds	r7, #16
1000b004:	46bd      	mov	sp, r7
1000b006:	bd80      	pop	{r7, pc}
1000b008:	100203e4 	.word	0x100203e4
1000b00c:	100203ec 	.word	0x100203ec

1000b010 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
1000b010:	b580      	push	{r7, lr}
1000b012:	b086      	sub	sp, #24
1000b014:	af00      	add	r7, sp, #0
1000b016:	60f8      	str	r0, [r7, #12]
1000b018:	60b9      	str	r1, [r7, #8]
1000b01a:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
1000b01c:	68fb      	ldr	r3, [r7, #12]
1000b01e:	2b00      	cmp	r3, #0
1000b020:	d00d      	beq.n	1000b03e <metal_device_open+0x2e>
1000b022:	68fb      	ldr	r3, [r7, #12]
1000b024:	781b      	ldrb	r3, [r3, #0]
1000b026:	2b00      	cmp	r3, #0
1000b028:	d009      	beq.n	1000b03e <metal_device_open+0x2e>
1000b02a:	68bb      	ldr	r3, [r7, #8]
1000b02c:	2b00      	cmp	r3, #0
1000b02e:	d006      	beq.n	1000b03e <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
1000b030:	68bb      	ldr	r3, [r7, #8]
1000b032:	781b      	ldrb	r3, [r3, #0]
1000b034:	2b00      	cmp	r3, #0
1000b036:	d002      	beq.n	1000b03e <metal_device_open+0x2e>
1000b038:	687b      	ldr	r3, [r7, #4]
1000b03a:	2b00      	cmp	r3, #0
1000b03c:	d102      	bne.n	1000b044 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
1000b03e:	f06f 0315 	mvn.w	r3, #21
1000b042:	e01f      	b.n	1000b084 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
1000b044:	f107 0310 	add.w	r3, r7, #16
1000b048:	4619      	mov	r1, r3
1000b04a:	68f8      	ldr	r0, [r7, #12]
1000b04c:	f7ff ffb2 	bl	1000afb4 <metal_bus_find>
1000b050:	6178      	str	r0, [r7, #20]
	if (error)
1000b052:	697b      	ldr	r3, [r7, #20]
1000b054:	2b00      	cmp	r3, #0
1000b056:	d001      	beq.n	1000b05c <metal_device_open+0x4c>
		return error;
1000b058:	697b      	ldr	r3, [r7, #20]
1000b05a:	e013      	b.n	1000b084 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
1000b05c:	693b      	ldr	r3, [r7, #16]
1000b05e:	689b      	ldr	r3, [r3, #8]
1000b060:	2b00      	cmp	r3, #0
1000b062:	d102      	bne.n	1000b06a <metal_device_open+0x5a>
		return -ENODEV;
1000b064:	f06f 0312 	mvn.w	r3, #18
1000b068:	e00c      	b.n	1000b084 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
1000b06a:	693b      	ldr	r3, [r7, #16]
1000b06c:	689b      	ldr	r3, [r3, #8]
1000b06e:	6938      	ldr	r0, [r7, #16]
1000b070:	687a      	ldr	r2, [r7, #4]
1000b072:	68b9      	ldr	r1, [r7, #8]
1000b074:	4798      	blx	r3
1000b076:	6178      	str	r0, [r7, #20]
	if (error)
1000b078:	697b      	ldr	r3, [r7, #20]
1000b07a:	2b00      	cmp	r3, #0
1000b07c:	d001      	beq.n	1000b082 <metal_device_open+0x72>
		return error;
1000b07e:	697b      	ldr	r3, [r7, #20]
1000b080:	e000      	b.n	1000b084 <metal_device_open+0x74>

	return 0;
1000b082:	2300      	movs	r3, #0
}
1000b084:	4618      	mov	r0, r3
1000b086:	3718      	adds	r7, #24
1000b088:	46bd      	mov	sp, r7
1000b08a:	bd80      	pop	{r7, pc}

1000b08c <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
1000b08c:	b580      	push	{r7, lr}
1000b08e:	b082      	sub	sp, #8
1000b090:	af00      	add	r7, sp, #0
1000b092:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
1000b094:	687b      	ldr	r3, [r7, #4]
1000b096:	681b      	ldr	r3, [r3, #0]
1000b098:	2b00      	cmp	r3, #0
1000b09a:	d008      	beq.n	1000b0ae <metal_register_generic_device+0x22>
1000b09c:	687b      	ldr	r3, [r7, #4]
1000b09e:	681b      	ldr	r3, [r3, #0]
1000b0a0:	781b      	ldrb	r3, [r3, #0]
1000b0a2:	2b00      	cmp	r3, #0
1000b0a4:	d003      	beq.n	1000b0ae <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
1000b0a6:	687b      	ldr	r3, [r7, #4]
1000b0a8:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
1000b0aa:	2b02      	cmp	r3, #2
1000b0ac:	d902      	bls.n	1000b0b4 <metal_register_generic_device+0x28>
		return -EINVAL;
1000b0ae:	f06f 0315 	mvn.w	r3, #21
1000b0b2:	e009      	b.n	1000b0c8 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
1000b0b4:	687b      	ldr	r3, [r7, #4]
1000b0b6:	4a06      	ldr	r2, [pc, #24]	; (1000b0d0 <metal_register_generic_device+0x44>)
1000b0b8:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
1000b0ba:	687b      	ldr	r3, [r7, #4]
1000b0bc:	337c      	adds	r3, #124	; 0x7c
1000b0be:	4619      	mov	r1, r3
1000b0c0:	4804      	ldr	r0, [pc, #16]	; (1000b0d4 <metal_register_generic_device+0x48>)
1000b0c2:	f7ff fef1 	bl	1000aea8 <metal_list_add_tail>
			    &device->node);
	return 0;
1000b0c6:	2300      	movs	r3, #0
}
1000b0c8:	4618      	mov	r0, r3
1000b0ca:	3708      	adds	r7, #8
1000b0cc:	46bd      	mov	sp, r7
1000b0ce:	bd80      	pop	{r7, pc}
1000b0d0:	1002000c 	.word	0x1002000c
1000b0d4:	100203fc 	.word	0x100203fc

1000b0d8 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
1000b0d8:	b580      	push	{r7, lr}
1000b0da:	b086      	sub	sp, #24
1000b0dc:	af00      	add	r7, sp, #0
1000b0de:	60f8      	str	r0, [r7, #12]
1000b0e0:	60b9      	str	r1, [r7, #8]
1000b0e2:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
1000b0e4:	4b12      	ldr	r3, [pc, #72]	; (1000b130 <metal_generic_dev_open+0x58>)
1000b0e6:	699b      	ldr	r3, [r3, #24]
1000b0e8:	617b      	str	r3, [r7, #20]
1000b0ea:	e016      	b.n	1000b11a <metal_generic_dev_open+0x42>
		dev = metal_container_of(node, struct metal_device, node);
1000b0ec:	697b      	ldr	r3, [r7, #20]
1000b0ee:	3b7c      	subs	r3, #124	; 0x7c
1000b0f0:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) == 0) {
1000b0f2:	693b      	ldr	r3, [r7, #16]
1000b0f4:	681b      	ldr	r3, [r3, #0]
1000b0f6:	68b9      	ldr	r1, [r7, #8]
1000b0f8:	4618      	mov	r0, r3
1000b0fa:	f7f4 ffa1 	bl	10000040 <strcmp>
1000b0fe:	4603      	mov	r3, r0
1000b100:	2b00      	cmp	r3, #0
1000b102:	d107      	bne.n	1000b114 <metal_generic_dev_open+0x3c>
			*device = dev;
1000b104:	687b      	ldr	r3, [r7, #4]
1000b106:	693a      	ldr	r2, [r7, #16]
1000b108:	601a      	str	r2, [r3, #0]
			return metal_generic_dev_sys_open(dev);
1000b10a:	6938      	ldr	r0, [r7, #16]
1000b10c:	f000 f890 	bl	1000b230 <metal_generic_dev_sys_open>
1000b110:	4603      	mov	r3, r0
1000b112:	e008      	b.n	1000b126 <metal_generic_dev_open+0x4e>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
1000b114:	697b      	ldr	r3, [r7, #20]
1000b116:	681b      	ldr	r3, [r3, #0]
1000b118:	617b      	str	r3, [r7, #20]
1000b11a:	697b      	ldr	r3, [r7, #20]
1000b11c:	4a05      	ldr	r2, [pc, #20]	; (1000b134 <metal_generic_dev_open+0x5c>)
1000b11e:	4293      	cmp	r3, r2
1000b120:	d1e4      	bne.n	1000b0ec <metal_generic_dev_open+0x14>
		}
	}

	return -ENODEV;
1000b122:	f06f 0312 	mvn.w	r3, #18
}
1000b126:	4618      	mov	r0, r3
1000b128:	3718      	adds	r7, #24
1000b12a:	46bd      	mov	sp, r7
1000b12c:	bd80      	pop	{r7, pc}
1000b12e:	bf00      	nop
1000b130:	100203e4 	.word	0x100203e4
1000b134:	100203fc 	.word	0x100203fc

1000b138 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
1000b138:	b580      	push	{r7, lr}
1000b13a:	b086      	sub	sp, #24
1000b13c:	af00      	add	r7, sp, #0
1000b13e:	60f8      	str	r0, [r7, #12]
1000b140:	60b9      	str	r1, [r7, #8]
1000b142:	607a      	str	r2, [r7, #4]
1000b144:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;

	if (sg_out != sg_in)
1000b146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000b148:	683b      	ldr	r3, [r7, #0]
1000b14a:	429a      	cmp	r2, r3
1000b14c:	d009      	beq.n	1000b162 <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
1000b14e:	6a3a      	ldr	r2, [r7, #32]
1000b150:	4613      	mov	r3, r2
1000b152:	005b      	lsls	r3, r3, #1
1000b154:	4413      	add	r3, r2
1000b156:	009b      	lsls	r3, r3, #2
1000b158:	461a      	mov	r2, r3
1000b15a:	6839      	ldr	r1, [r7, #0]
1000b15c:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000b15e:	f002 fa80 	bl	1000d662 <memcpy>
	for (i = 0; i < nents_in; i++) {
1000b162:	2300      	movs	r3, #0
1000b164:	617b      	str	r3, [r7, #20]
1000b166:	e02f      	b.n	1000b1c8 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
1000b168:	687b      	ldr	r3, [r7, #4]
1000b16a:	2b02      	cmp	r3, #2
1000b16c:	d114      	bne.n	1000b198 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
1000b16e:	697a      	ldr	r2, [r7, #20]
1000b170:	4613      	mov	r3, r2
1000b172:	005b      	lsls	r3, r3, #1
1000b174:	4413      	add	r3, r2
1000b176:	009b      	lsls	r3, r3, #2
1000b178:	461a      	mov	r2, r3
1000b17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b17c:	4413      	add	r3, r2
1000b17e:	6818      	ldr	r0, [r3, #0]
1000b180:	697a      	ldr	r2, [r7, #20]
1000b182:	4613      	mov	r3, r2
1000b184:	005b      	lsls	r3, r3, #1
1000b186:	4413      	add	r3, r2
1000b188:	009b      	lsls	r3, r3, #2
1000b18a:	461a      	mov	r2, r3
1000b18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b18e:	4413      	add	r3, r2
1000b190:	689b      	ldr	r3, [r3, #8]
1000b192:	4619      	mov	r1, r3
1000b194:	f7ff feaf 	bl	1000aef6 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
1000b198:	697a      	ldr	r2, [r7, #20]
1000b19a:	4613      	mov	r3, r2
1000b19c:	005b      	lsls	r3, r3, #1
1000b19e:	4413      	add	r3, r2
1000b1a0:	009b      	lsls	r3, r3, #2
1000b1a2:	461a      	mov	r2, r3
1000b1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b1a6:	4413      	add	r3, r2
1000b1a8:	6818      	ldr	r0, [r3, #0]
1000b1aa:	697a      	ldr	r2, [r7, #20]
1000b1ac:	4613      	mov	r3, r2
1000b1ae:	005b      	lsls	r3, r3, #1
1000b1b0:	4413      	add	r3, r2
1000b1b2:	009b      	lsls	r3, r3, #2
1000b1b4:	461a      	mov	r2, r3
1000b1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b1b8:	4413      	add	r3, r2
1000b1ba:	689b      	ldr	r3, [r3, #8]
1000b1bc:	4619      	mov	r1, r3
1000b1be:	f7ff fea7 	bl	1000af10 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
1000b1c2:	697b      	ldr	r3, [r7, #20]
1000b1c4:	3301      	adds	r3, #1
1000b1c6:	617b      	str	r3, [r7, #20]
1000b1c8:	697a      	ldr	r2, [r7, #20]
1000b1ca:	6a3b      	ldr	r3, [r7, #32]
1000b1cc:	429a      	cmp	r2, r3
1000b1ce:	dbcb      	blt.n	1000b168 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
1000b1d0:	6a3b      	ldr	r3, [r7, #32]
}
1000b1d2:	4618      	mov	r0, r3
1000b1d4:	3718      	adds	r7, #24
1000b1d6:	46bd      	mov	sp, r7
1000b1d8:	bd80      	pop	{r7, pc}

1000b1da <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
1000b1da:	b580      	push	{r7, lr}
1000b1dc:	b086      	sub	sp, #24
1000b1de:	af00      	add	r7, sp, #0
1000b1e0:	60f8      	str	r0, [r7, #12]
1000b1e2:	60b9      	str	r1, [r7, #8]
1000b1e4:	607a      	str	r2, [r7, #4]
1000b1e6:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;
	(void)dir;

	for (i = 0; i < nents; i++) {
1000b1e8:	2300      	movs	r3, #0
1000b1ea:	617b      	str	r3, [r7, #20]
1000b1ec:	e017      	b.n	1000b21e <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
1000b1ee:	697a      	ldr	r2, [r7, #20]
1000b1f0:	4613      	mov	r3, r2
1000b1f2:	005b      	lsls	r3, r3, #1
1000b1f4:	4413      	add	r3, r2
1000b1f6:	009b      	lsls	r3, r3, #2
1000b1f8:	461a      	mov	r2, r3
1000b1fa:	683b      	ldr	r3, [r7, #0]
1000b1fc:	4413      	add	r3, r2
1000b1fe:	6818      	ldr	r0, [r3, #0]
1000b200:	697a      	ldr	r2, [r7, #20]
1000b202:	4613      	mov	r3, r2
1000b204:	005b      	lsls	r3, r3, #1
1000b206:	4413      	add	r3, r2
1000b208:	009b      	lsls	r3, r3, #2
1000b20a:	461a      	mov	r2, r3
1000b20c:	683b      	ldr	r3, [r7, #0]
1000b20e:	4413      	add	r3, r2
1000b210:	689b      	ldr	r3, [r3, #8]
1000b212:	4619      	mov	r1, r3
1000b214:	f7ff fe7c 	bl	1000af10 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
1000b218:	697b      	ldr	r3, [r7, #20]
1000b21a:	3301      	adds	r3, #1
1000b21c:	617b      	str	r3, [r7, #20]
1000b21e:	697a      	ldr	r2, [r7, #20]
1000b220:	6a3b      	ldr	r3, [r7, #32]
1000b222:	429a      	cmp	r2, r3
1000b224:	dbe3      	blt.n	1000b1ee <metal_generic_dev_dma_unmap+0x14>
	}
}
1000b226:	bf00      	nop
1000b228:	bf00      	nop
1000b22a:	3718      	adds	r7, #24
1000b22c:	46bd      	mov	sp, r7
1000b22e:	bd80      	pop	{r7, pc}

1000b230 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
1000b230:	b580      	push	{r7, lr}
1000b232:	b084      	sub	sp, #16
1000b234:	af00      	add	r7, sp, #0
1000b236:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned int i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
1000b238:	2300      	movs	r3, #0
1000b23a:	60fb      	str	r3, [r7, #12]
1000b23c:	e013      	b.n	1000b266 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
1000b23e:	68fa      	ldr	r2, [r7, #12]
1000b240:	4613      	mov	r3, r2
1000b242:	00db      	lsls	r3, r3, #3
1000b244:	1a9b      	subs	r3, r3, r2
1000b246:	00db      	lsls	r3, r3, #3
1000b248:	3308      	adds	r3, #8
1000b24a:	687a      	ldr	r2, [r7, #4]
1000b24c:	4413      	add	r3, r2
1000b24e:	3304      	adds	r3, #4
1000b250:	60bb      	str	r3, [r7, #8]
		if (!io->size)
1000b252:	68bb      	ldr	r3, [r7, #8]
1000b254:	689b      	ldr	r3, [r3, #8]
1000b256:	2b00      	cmp	r3, #0
1000b258:	d00b      	beq.n	1000b272 <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
1000b25a:	68b8      	ldr	r0, [r7, #8]
1000b25c:	f000 f81e 	bl	1000b29c <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
1000b260:	68fb      	ldr	r3, [r7, #12]
1000b262:	3301      	adds	r3, #1
1000b264:	60fb      	str	r3, [r7, #12]
1000b266:	687b      	ldr	r3, [r7, #4]
1000b268:	689b      	ldr	r3, [r3, #8]
1000b26a:	68fa      	ldr	r2, [r7, #12]
1000b26c:	429a      	cmp	r2, r3
1000b26e:	d3e6      	bcc.n	1000b23e <metal_generic_dev_sys_open+0xe>
1000b270:	e000      	b.n	1000b274 <metal_generic_dev_sys_open+0x44>
			break;
1000b272:	bf00      	nop
	}

	return 0;
1000b274:	2300      	movs	r3, #0
}
1000b276:	4618      	mov	r0, r3
1000b278:	3710      	adds	r7, #16
1000b27a:	46bd      	mov	sp, r7
1000b27c:	bd80      	pop	{r7, pc}
	...

1000b280 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
1000b280:	b580      	push	{r7, lr}
1000b282:	b082      	sub	sp, #8
1000b284:	af00      	add	r7, sp, #0
1000b286:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
1000b288:	4803      	ldr	r0, [pc, #12]	; (1000b298 <metal_sys_init+0x18>)
1000b28a:	f7ff fe4f 	bl	1000af2c <metal_bus_register>
	return 0;
1000b28e:	2300      	movs	r3, #0
}
1000b290:	4618      	mov	r0, r3
1000b292:	3708      	adds	r7, #8
1000b294:	46bd      	mov	sp, r7
1000b296:	bd80      	pop	{r7, pc}
1000b298:	1002000c 	.word	0x1002000c

1000b29c <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
1000b29c:	b580      	push	{r7, lr}
1000b29e:	b086      	sub	sp, #24
1000b2a0:	af00      	add	r7, sp, #0
1000b2a2:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = io->virt;
1000b2a4:	687b      	ldr	r3, [r7, #4]
1000b2a6:	681b      	ldr	r3, [r3, #0]
1000b2a8:	60fb      	str	r3, [r7, #12]
	psize = (size_t)io->size;
1000b2aa:	687b      	ldr	r3, [r7, #4]
1000b2ac:	689b      	ldr	r3, [r3, #8]
1000b2ae:	613b      	str	r3, [r7, #16]
	if (psize) {
1000b2b0:	693b      	ldr	r3, [r7, #16]
1000b2b2:	2b00      	cmp	r3, #0
1000b2b4:	d02c      	beq.n	1000b310 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
1000b2b6:	687b      	ldr	r3, [r7, #4]
1000b2b8:	68db      	ldr	r3, [r3, #12]
1000b2ba:	693a      	ldr	r2, [r7, #16]
1000b2bc:	fa22 f303 	lsr.w	r3, r2, r3
1000b2c0:	2b00      	cmp	r3, #0
1000b2c2:	d005      	beq.n	1000b2d0 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
1000b2c4:	687b      	ldr	r3, [r7, #4]
1000b2c6:	68db      	ldr	r3, [r3, #12]
1000b2c8:	2201      	movs	r2, #1
1000b2ca:	fa02 f303 	lsl.w	r3, r2, r3
1000b2ce:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
1000b2d0:	2300      	movs	r3, #0
1000b2d2:	617b      	str	r3, [r7, #20]
1000b2d4:	e013      	b.n	1000b2fe <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
1000b2d6:	687b      	ldr	r3, [r7, #4]
1000b2d8:	685a      	ldr	r2, [r3, #4]
1000b2da:	697b      	ldr	r3, [r7, #20]
1000b2dc:	009b      	lsls	r3, r3, #2
1000b2de:	4413      	add	r3, r2
1000b2e0:	6819      	ldr	r1, [r3, #0]
1000b2e2:	687b      	ldr	r3, [r7, #4]
1000b2e4:	695b      	ldr	r3, [r3, #20]
1000b2e6:	693a      	ldr	r2, [r7, #16]
1000b2e8:	68f8      	ldr	r0, [r7, #12]
1000b2ea:	f001 fa2f 	bl	1000c74c <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
1000b2ee:	693b      	ldr	r3, [r7, #16]
1000b2f0:	009b      	lsls	r3, r3, #2
1000b2f2:	68fa      	ldr	r2, [r7, #12]
1000b2f4:	4413      	add	r3, r2
1000b2f6:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
1000b2f8:	697b      	ldr	r3, [r7, #20]
1000b2fa:	3301      	adds	r3, #1
1000b2fc:	617b      	str	r3, [r7, #20]
1000b2fe:	687b      	ldr	r3, [r7, #4]
1000b300:	689a      	ldr	r2, [r3, #8]
1000b302:	687b      	ldr	r3, [r7, #4]
1000b304:	68db      	ldr	r3, [r3, #12]
1000b306:	fa22 f303 	lsr.w	r3, r2, r3
1000b30a:	697a      	ldr	r2, [r7, #20]
1000b30c:	429a      	cmp	r2, r3
1000b30e:	d9e2      	bls.n	1000b2d6 <metal_sys_io_mem_map+0x3a>
		}
	}
}
1000b310:	bf00      	nop
1000b312:	3718      	adds	r7, #24
1000b314:	46bd      	mov	sp, r7
1000b316:	bd80      	pop	{r7, pc}

1000b318 <metal_list_init>:
{
1000b318:	b480      	push	{r7}
1000b31a:	b083      	sub	sp, #12
1000b31c:	af00      	add	r7, sp, #0
1000b31e:	6078      	str	r0, [r7, #4]
	list->prev = list;
1000b320:	687b      	ldr	r3, [r7, #4]
1000b322:	687a      	ldr	r2, [r7, #4]
1000b324:	605a      	str	r2, [r3, #4]
	list->next = list;
1000b326:	687b      	ldr	r3, [r7, #4]
1000b328:	687a      	ldr	r2, [r7, #4]
1000b32a:	601a      	str	r2, [r3, #0]
}
1000b32c:	bf00      	nop
1000b32e:	370c      	adds	r7, #12
1000b330:	46bd      	mov	sp, r7
1000b332:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b336:	4770      	bx	lr

1000b338 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
1000b338:	b580      	push	{r7, lr}
1000b33a:	b084      	sub	sp, #16
1000b33c:	af00      	add	r7, sp, #0
1000b33e:	6078      	str	r0, [r7, #4]
	int error = 0;
1000b340:	2300      	movs	r3, #0
1000b342:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
1000b344:	2220      	movs	r2, #32
1000b346:	2100      	movs	r1, #0
1000b348:	4810      	ldr	r0, [pc, #64]	; (1000b38c <metal_init+0x54>)
1000b34a:	f002 f8da 	bl	1000d502 <memset>

	_metal.common.log_handler   = params->log_handler;
1000b34e:	687b      	ldr	r3, [r7, #4]
1000b350:	681b      	ldr	r3, [r3, #0]
1000b352:	4a0e      	ldr	r2, [pc, #56]	; (1000b38c <metal_init+0x54>)
1000b354:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
1000b356:	687b      	ldr	r3, [r7, #4]
1000b358:	791a      	ldrb	r2, [r3, #4]
1000b35a:	4b0c      	ldr	r3, [pc, #48]	; (1000b38c <metal_init+0x54>)
1000b35c:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
1000b35e:	480c      	ldr	r0, [pc, #48]	; (1000b390 <metal_init+0x58>)
1000b360:	f7ff ffda 	bl	1000b318 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
1000b364:	480b      	ldr	r0, [pc, #44]	; (1000b394 <metal_init+0x5c>)
1000b366:	f7ff ffd7 	bl	1000b318 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
1000b36a:	480b      	ldr	r0, [pc, #44]	; (1000b398 <metal_init+0x60>)
1000b36c:	f7ff ffd4 	bl	1000b318 <metal_list_init>

	error = metal_sys_init(params);
1000b370:	6878      	ldr	r0, [r7, #4]
1000b372:	f7ff ff85 	bl	1000b280 <metal_sys_init>
1000b376:	60f8      	str	r0, [r7, #12]
	if (error)
1000b378:	68fb      	ldr	r3, [r7, #12]
1000b37a:	2b00      	cmp	r3, #0
1000b37c:	d001      	beq.n	1000b382 <metal_init+0x4a>
		return error;
1000b37e:	68fb      	ldr	r3, [r7, #12]
1000b380:	e000      	b.n	1000b384 <metal_init+0x4c>

	return error;
1000b382:	68fb      	ldr	r3, [r7, #12]
}
1000b384:	4618      	mov	r0, r3
1000b386:	3710      	adds	r7, #16
1000b388:	46bd      	mov	sp, r7
1000b38a:	bd80      	pop	{r7, pc}
1000b38c:	100203e4 	.word	0x100203e4
1000b390:	100203ec 	.word	0x100203ec
1000b394:	100203f4 	.word	0x100203f4
1000b398:	100203fc 	.word	0x100203fc

1000b39c <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
1000b39c:	b480      	push	{r7}
1000b39e:	b083      	sub	sp, #12
1000b3a0:	af00      	add	r7, sp, #0
1000b3a2:	6078      	str	r0, [r7, #4]
1000b3a4:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
1000b3a6:	687b      	ldr	r3, [r7, #4]
1000b3a8:	681b      	ldr	r3, [r3, #0]
		? (void *)((uintptr_t)io->virt + offset)
		: NULL);
1000b3aa:	f1b3 3fff 	cmp.w	r3, #4294967295
1000b3ae:	d00a      	beq.n	1000b3c6 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
1000b3b0:	687b      	ldr	r3, [r7, #4]
1000b3b2:	689b      	ldr	r3, [r3, #8]
1000b3b4:	683a      	ldr	r2, [r7, #0]
1000b3b6:	429a      	cmp	r2, r3
1000b3b8:	d205      	bcs.n	1000b3c6 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
1000b3ba:	687b      	ldr	r3, [r7, #4]
1000b3bc:	681b      	ldr	r3, [r3, #0]
1000b3be:	461a      	mov	r2, r3
1000b3c0:	683b      	ldr	r3, [r7, #0]
1000b3c2:	4413      	add	r3, r2
		: NULL);
1000b3c4:	e000      	b.n	1000b3c8 <metal_io_virt+0x2c>
1000b3c6:	2300      	movs	r3, #0
}
1000b3c8:	4618      	mov	r0, r3
1000b3ca:	370c      	adds	r7, #12
1000b3cc:	46bd      	mov	sp, r7
1000b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b3d2:	4770      	bx	lr

1000b3d4 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
1000b3d4:	b5b0      	push	{r4, r5, r7, lr}
1000b3d6:	b08c      	sub	sp, #48	; 0x30
1000b3d8:	af00      	add	r7, sp, #0
1000b3da:	60f8      	str	r0, [r7, #12]
1000b3dc:	60b9      	str	r1, [r7, #8]
1000b3de:	607a      	str	r2, [r7, #4]
1000b3e0:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {
1000b3e2:	f107 0310 	add.w	r3, r7, #16
1000b3e6:	2220      	movs	r2, #32
1000b3e8:	2100      	movs	r1, #0
1000b3ea:	4618      	mov	r0, r3
1000b3ec:	f002 f889 	bl	1000d502 <memset>
		NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
	};

	io->virt = virt;
1000b3f0:	68fb      	ldr	r3, [r7, #12]
1000b3f2:	68ba      	ldr	r2, [r7, #8]
1000b3f4:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
1000b3f6:	68fb      	ldr	r3, [r7, #12]
1000b3f8:	687a      	ldr	r2, [r7, #4]
1000b3fa:	605a      	str	r2, [r3, #4]
	io->size = size;
1000b3fc:	68fb      	ldr	r3, [r7, #12]
1000b3fe:	683a      	ldr	r2, [r7, #0]
1000b400:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
1000b402:	68fb      	ldr	r3, [r7, #12]
1000b404:	6c3a      	ldr	r2, [r7, #64]	; 0x40
1000b406:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
1000b408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000b40a:	2b1f      	cmp	r3, #31
1000b40c:	d904      	bls.n	1000b418 <metal_io_init+0x44>
		/* avoid overflow */
		io->page_mask = -1UL;
1000b40e:	68fb      	ldr	r3, [r7, #12]
1000b410:	f04f 32ff 	mov.w	r2, #4294967295
1000b414:	611a      	str	r2, [r3, #16]
1000b416:	e006      	b.n	1000b426 <metal_io_init+0x52>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
1000b418:	2201      	movs	r2, #1
1000b41a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000b41c:	fa02 f303 	lsl.w	r3, r2, r3
1000b420:	1e5a      	subs	r2, r3, #1
1000b422:	68fb      	ldr	r3, [r7, #12]
1000b424:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
1000b426:	68fb      	ldr	r3, [r7, #12]
1000b428:	6c7a      	ldr	r2, [r7, #68]	; 0x44
1000b42a:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
1000b42c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
1000b42e:	2b00      	cmp	r3, #0
1000b430:	d00b      	beq.n	1000b44a <metal_io_init+0x76>
1000b432:	68fb      	ldr	r3, [r7, #12]
1000b434:	6cba      	ldr	r2, [r7, #72]	; 0x48
1000b436:	f103 0418 	add.w	r4, r3, #24
1000b43a:	4615      	mov	r5, r2
1000b43c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1000b43e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1000b440:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1000b444:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1000b448:	e00a      	b.n	1000b460 <metal_io_init+0x8c>
1000b44a:	68fb      	ldr	r3, [r7, #12]
1000b44c:	f103 0418 	add.w	r4, r3, #24
1000b450:	f107 0510 	add.w	r5, r7, #16
1000b454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1000b456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1000b458:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1000b45c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
1000b460:	68f8      	ldr	r0, [r7, #12]
1000b462:	f7ff ff1b 	bl	1000b29c <metal_sys_io_mem_map>
}
1000b466:	bf00      	nop
1000b468:	3730      	adds	r7, #48	; 0x30
1000b46a:	46bd      	mov	sp, r7
1000b46c:	bdb0      	pop	{r4, r5, r7, pc}

1000b46e <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
1000b46e:	b590      	push	{r4, r7, lr}
1000b470:	b08b      	sub	sp, #44	; 0x2c
1000b472:	af02      	add	r7, sp, #8
1000b474:	60f8      	str	r0, [r7, #12]
1000b476:	60b9      	str	r1, [r7, #8]
1000b478:	607a      	str	r2, [r7, #4]
1000b47a:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
1000b47c:	68b9      	ldr	r1, [r7, #8]
1000b47e:	68f8      	ldr	r0, [r7, #12]
1000b480:	f7ff ff8c 	bl	1000b39c <metal_io_virt>
1000b484:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
1000b486:	687b      	ldr	r3, [r7, #4]
1000b488:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
1000b48a:	69fb      	ldr	r3, [r7, #28]
1000b48c:	2b00      	cmp	r3, #0
1000b48e:	d102      	bne.n	1000b496 <metal_io_block_read+0x28>
		return -ERANGE;
1000b490:	f06f 0321 	mvn.w	r3, #33	; 0x21
1000b494:	e05c      	b.n	1000b550 <metal_io_block_read+0xe2>
	if ((offset + len) > io->size)
1000b496:	683a      	ldr	r2, [r7, #0]
1000b498:	68bb      	ldr	r3, [r7, #8]
1000b49a:	441a      	add	r2, r3
1000b49c:	68fb      	ldr	r3, [r7, #12]
1000b49e:	689b      	ldr	r3, [r3, #8]
1000b4a0:	429a      	cmp	r2, r3
1000b4a2:	d904      	bls.n	1000b4ae <metal_io_block_read+0x40>
		len = io->size - offset;
1000b4a4:	68fb      	ldr	r3, [r7, #12]
1000b4a6:	689a      	ldr	r2, [r3, #8]
1000b4a8:	68bb      	ldr	r3, [r7, #8]
1000b4aa:	1ad3      	subs	r3, r2, r3
1000b4ac:	603b      	str	r3, [r7, #0]
	retlen = len;
1000b4ae:	683b      	ldr	r3, [r7, #0]
1000b4b0:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
1000b4b2:	68fb      	ldr	r3, [r7, #12]
1000b4b4:	6a1b      	ldr	r3, [r3, #32]
1000b4b6:	2b00      	cmp	r3, #0
1000b4b8:	d00a      	beq.n	1000b4d0 <metal_io_block_read+0x62>
		retlen = (*io->ops.block_read)(
1000b4ba:	68fb      	ldr	r3, [r7, #12]
1000b4bc:	6a1c      	ldr	r4, [r3, #32]
1000b4be:	683b      	ldr	r3, [r7, #0]
1000b4c0:	9300      	str	r3, [sp, #0]
1000b4c2:	2305      	movs	r3, #5
1000b4c4:	687a      	ldr	r2, [r7, #4]
1000b4c6:	68b9      	ldr	r1, [r7, #8]
1000b4c8:	68f8      	ldr	r0, [r7, #12]
1000b4ca:	47a0      	blx	r4
1000b4cc:	6178      	str	r0, [r7, #20]
1000b4ce:	e03e      	b.n	1000b54e <metal_io_block_read+0xe0>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
1000b4d0:	f3bf 8f5b 	dmb	ish
		while ( len && (
1000b4d4:	e00c      	b.n	1000b4f0 <metal_io_block_read+0x82>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
1000b4d6:	69fb      	ldr	r3, [r7, #28]
1000b4d8:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
1000b4da:	69bb      	ldr	r3, [r7, #24]
1000b4dc:	701a      	strb	r2, [r3, #0]
			dest++;
1000b4de:	69bb      	ldr	r3, [r7, #24]
1000b4e0:	3301      	adds	r3, #1
1000b4e2:	61bb      	str	r3, [r7, #24]
			ptr++;
1000b4e4:	69fb      	ldr	r3, [r7, #28]
1000b4e6:	3301      	adds	r3, #1
1000b4e8:	61fb      	str	r3, [r7, #28]
			len--;
1000b4ea:	683b      	ldr	r3, [r7, #0]
1000b4ec:	3b01      	subs	r3, #1
1000b4ee:	603b      	str	r3, [r7, #0]
		while ( len && (
1000b4f0:	683b      	ldr	r3, [r7, #0]
1000b4f2:	2b00      	cmp	r3, #0
1000b4f4:	d017      	beq.n	1000b526 <metal_io_block_read+0xb8>
			((uintptr_t)dest % sizeof(int)) ||
1000b4f6:	69bb      	ldr	r3, [r7, #24]
1000b4f8:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
1000b4fc:	2b00      	cmp	r3, #0
1000b4fe:	d1ea      	bne.n	1000b4d6 <metal_io_block_read+0x68>
			((uintptr_t)ptr % sizeof(int)))) {
1000b500:	69fb      	ldr	r3, [r7, #28]
1000b502:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
1000b506:	2b00      	cmp	r3, #0
1000b508:	d1e5      	bne.n	1000b4d6 <metal_io_block_read+0x68>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000b50a:	e00c      	b.n	1000b526 <metal_io_block_read+0xb8>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
1000b50c:	69fb      	ldr	r3, [r7, #28]
1000b50e:	681a      	ldr	r2, [r3, #0]
1000b510:	69bb      	ldr	r3, [r7, #24]
1000b512:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000b514:	69bb      	ldr	r3, [r7, #24]
1000b516:	3304      	adds	r3, #4
1000b518:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
1000b51a:	69fb      	ldr	r3, [r7, #28]
1000b51c:	3304      	adds	r3, #4
1000b51e:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
1000b520:	683b      	ldr	r3, [r7, #0]
1000b522:	3b04      	subs	r3, #4
1000b524:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000b526:	683b      	ldr	r3, [r7, #0]
1000b528:	2b03      	cmp	r3, #3
1000b52a:	dcef      	bgt.n	1000b50c <metal_io_block_read+0x9e>
		for (; len != 0; dest++, ptr++, len--)
1000b52c:	e00c      	b.n	1000b548 <metal_io_block_read+0xda>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
1000b52e:	69fb      	ldr	r3, [r7, #28]
1000b530:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
1000b532:	69bb      	ldr	r3, [r7, #24]
1000b534:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
1000b536:	69bb      	ldr	r3, [r7, #24]
1000b538:	3301      	adds	r3, #1
1000b53a:	61bb      	str	r3, [r7, #24]
1000b53c:	69fb      	ldr	r3, [r7, #28]
1000b53e:	3301      	adds	r3, #1
1000b540:	61fb      	str	r3, [r7, #28]
1000b542:	683b      	ldr	r3, [r7, #0]
1000b544:	3b01      	subs	r3, #1
1000b546:	603b      	str	r3, [r7, #0]
1000b548:	683b      	ldr	r3, [r7, #0]
1000b54a:	2b00      	cmp	r3, #0
1000b54c:	d1ef      	bne.n	1000b52e <metal_io_block_read+0xc0>
	}
	return retlen;
1000b54e:	697b      	ldr	r3, [r7, #20]
}
1000b550:	4618      	mov	r0, r3
1000b552:	3724      	adds	r7, #36	; 0x24
1000b554:	46bd      	mov	sp, r7
1000b556:	bd90      	pop	{r4, r7, pc}

1000b558 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
1000b558:	b590      	push	{r4, r7, lr}
1000b55a:	b08b      	sub	sp, #44	; 0x2c
1000b55c:	af02      	add	r7, sp, #8
1000b55e:	60f8      	str	r0, [r7, #12]
1000b560:	60b9      	str	r1, [r7, #8]
1000b562:	607a      	str	r2, [r7, #4]
1000b564:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
1000b566:	68b9      	ldr	r1, [r7, #8]
1000b568:	68f8      	ldr	r0, [r7, #12]
1000b56a:	f7ff ff17 	bl	1000b39c <metal_io_virt>
1000b56e:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
1000b570:	687b      	ldr	r3, [r7, #4]
1000b572:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
1000b574:	69fb      	ldr	r3, [r7, #28]
1000b576:	2b00      	cmp	r3, #0
1000b578:	d102      	bne.n	1000b580 <metal_io_block_write+0x28>
		return -ERANGE;
1000b57a:	f06f 0321 	mvn.w	r3, #33	; 0x21
1000b57e:	e05b      	b.n	1000b638 <metal_io_block_write+0xe0>
	if ((offset + len) > io->size)
1000b580:	683a      	ldr	r2, [r7, #0]
1000b582:	68bb      	ldr	r3, [r7, #8]
1000b584:	441a      	add	r2, r3
1000b586:	68fb      	ldr	r3, [r7, #12]
1000b588:	689b      	ldr	r3, [r3, #8]
1000b58a:	429a      	cmp	r2, r3
1000b58c:	d904      	bls.n	1000b598 <metal_io_block_write+0x40>
		len = io->size - offset;
1000b58e:	68fb      	ldr	r3, [r7, #12]
1000b590:	689a      	ldr	r2, [r3, #8]
1000b592:	68bb      	ldr	r3, [r7, #8]
1000b594:	1ad3      	subs	r3, r2, r3
1000b596:	603b      	str	r3, [r7, #0]
	retlen = len;
1000b598:	683b      	ldr	r3, [r7, #0]
1000b59a:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
1000b59c:	68fb      	ldr	r3, [r7, #12]
1000b59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000b5a0:	2b00      	cmp	r3, #0
1000b5a2:	d017      	beq.n	1000b5d4 <metal_io_block_write+0x7c>
		retlen = (*io->ops.block_write)(
1000b5a4:	68fb      	ldr	r3, [r7, #12]
1000b5a6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
1000b5a8:	683b      	ldr	r3, [r7, #0]
1000b5aa:	9300      	str	r3, [sp, #0]
1000b5ac:	2305      	movs	r3, #5
1000b5ae:	687a      	ldr	r2, [r7, #4]
1000b5b0:	68b9      	ldr	r1, [r7, #8]
1000b5b2:	68f8      	ldr	r0, [r7, #12]
1000b5b4:	47a0      	blx	r4
1000b5b6:	6178      	str	r0, [r7, #20]
1000b5b8:	e03d      	b.n	1000b636 <metal_io_block_write+0xde>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
1000b5ba:	69bb      	ldr	r3, [r7, #24]
1000b5bc:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
1000b5be:	69fb      	ldr	r3, [r7, #28]
1000b5c0:	701a      	strb	r2, [r3, #0]
			ptr++;
1000b5c2:	69fb      	ldr	r3, [r7, #28]
1000b5c4:	3301      	adds	r3, #1
1000b5c6:	61fb      	str	r3, [r7, #28]
			source++;
1000b5c8:	69bb      	ldr	r3, [r7, #24]
1000b5ca:	3301      	adds	r3, #1
1000b5cc:	61bb      	str	r3, [r7, #24]
			len--;
1000b5ce:	683b      	ldr	r3, [r7, #0]
1000b5d0:	3b01      	subs	r3, #1
1000b5d2:	603b      	str	r3, [r7, #0]
		while ( len && (
1000b5d4:	683b      	ldr	r3, [r7, #0]
1000b5d6:	2b00      	cmp	r3, #0
1000b5d8:	d017      	beq.n	1000b60a <metal_io_block_write+0xb2>
			((uintptr_t)ptr % sizeof(int)) ||
1000b5da:	69fb      	ldr	r3, [r7, #28]
1000b5dc:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
1000b5e0:	2b00      	cmp	r3, #0
1000b5e2:	d1ea      	bne.n	1000b5ba <metal_io_block_write+0x62>
			((uintptr_t)source % sizeof(int)))) {
1000b5e4:	69bb      	ldr	r3, [r7, #24]
1000b5e6:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
1000b5ea:	2b00      	cmp	r3, #0
1000b5ec:	d1e5      	bne.n	1000b5ba <metal_io_block_write+0x62>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
1000b5ee:	e00c      	b.n	1000b60a <metal_io_block_write+0xb2>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
1000b5f0:	69bb      	ldr	r3, [r7, #24]
1000b5f2:	681a      	ldr	r2, [r3, #0]
1000b5f4:	69fb      	ldr	r3, [r7, #28]
1000b5f6:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
1000b5f8:	69fb      	ldr	r3, [r7, #28]
1000b5fa:	3304      	adds	r3, #4
1000b5fc:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
1000b5fe:	69bb      	ldr	r3, [r7, #24]
1000b600:	3304      	adds	r3, #4
1000b602:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
1000b604:	683b      	ldr	r3, [r7, #0]
1000b606:	3b04      	subs	r3, #4
1000b608:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
1000b60a:	683b      	ldr	r3, [r7, #0]
1000b60c:	2b03      	cmp	r3, #3
1000b60e:	dcef      	bgt.n	1000b5f0 <metal_io_block_write+0x98>
		for (; len != 0; ptr++, source++, len--)
1000b610:	e00c      	b.n	1000b62c <metal_io_block_write+0xd4>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
1000b612:	69bb      	ldr	r3, [r7, #24]
1000b614:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
1000b616:	69fb      	ldr	r3, [r7, #28]
1000b618:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
1000b61a:	69fb      	ldr	r3, [r7, #28]
1000b61c:	3301      	adds	r3, #1
1000b61e:	61fb      	str	r3, [r7, #28]
1000b620:	69bb      	ldr	r3, [r7, #24]
1000b622:	3301      	adds	r3, #1
1000b624:	61bb      	str	r3, [r7, #24]
1000b626:	683b      	ldr	r3, [r7, #0]
1000b628:	3b01      	subs	r3, #1
1000b62a:	603b      	str	r3, [r7, #0]
1000b62c:	683b      	ldr	r3, [r7, #0]
1000b62e:	2b00      	cmp	r3, #0
1000b630:	d1ef      	bne.n	1000b612 <metal_io_block_write+0xba>
		atomic_thread_fence(memory_order_seq_cst);
1000b632:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
1000b636:	697b      	ldr	r3, [r7, #20]
}
1000b638:	4618      	mov	r0, r3
1000b63a:	3724      	adds	r7, #36	; 0x24
1000b63c:	46bd      	mov	sp, r7
1000b63e:	bd90      	pop	{r4, r7, pc}

1000b640 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
1000b640:	b40e      	push	{r1, r2, r3}
1000b642:	b480      	push	{r7}
1000b644:	b082      	sub	sp, #8
1000b646:	af00      	add	r7, sp, #0
1000b648:	4603      	mov	r3, r0
1000b64a:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
1000b64c:	bf00      	nop
1000b64e:	3708      	adds	r7, #8
1000b650:	46bd      	mov	sp, r7
1000b652:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b656:	b003      	add	sp, #12
1000b658:	4770      	bx	lr

1000b65a <metal_io_virt>:
{
1000b65a:	b480      	push	{r7}
1000b65c:	b083      	sub	sp, #12
1000b65e:	af00      	add	r7, sp, #0
1000b660:	6078      	str	r0, [r7, #4]
1000b662:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
1000b664:	687b      	ldr	r3, [r7, #4]
1000b666:	681b      	ldr	r3, [r3, #0]
		: NULL);
1000b668:	f1b3 3fff 	cmp.w	r3, #4294967295
1000b66c:	d00a      	beq.n	1000b684 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
1000b66e:	687b      	ldr	r3, [r7, #4]
1000b670:	689b      	ldr	r3, [r3, #8]
1000b672:	683a      	ldr	r2, [r7, #0]
1000b674:	429a      	cmp	r2, r3
1000b676:	d205      	bcs.n	1000b684 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
1000b678:	687b      	ldr	r3, [r7, #4]
1000b67a:	681b      	ldr	r3, [r3, #0]
1000b67c:	461a      	mov	r2, r3
1000b67e:	683b      	ldr	r3, [r7, #0]
1000b680:	4413      	add	r3, r2
		: NULL);
1000b682:	e000      	b.n	1000b686 <metal_io_virt+0x2c>
1000b684:	2300      	movs	r3, #0
}
1000b686:	4618      	mov	r0, r3
1000b688:	370c      	adds	r7, #12
1000b68a:	46bd      	mov	sp, r7
1000b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b690:	4770      	bx	lr

1000b692 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
1000b692:	b480      	push	{r7}
1000b694:	b085      	sub	sp, #20
1000b696:	af00      	add	r7, sp, #0
1000b698:	6078      	str	r0, [r7, #4]
1000b69a:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
1000b69c:	683b      	ldr	r3, [r7, #0]
1000b69e:	687a      	ldr	r2, [r7, #4]
1000b6a0:	6812      	ldr	r2, [r2, #0]
1000b6a2:	1a9b      	subs	r3, r3, r2
1000b6a4:	60fb      	str	r3, [r7, #12]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
1000b6a6:	687b      	ldr	r3, [r7, #4]
1000b6a8:	689b      	ldr	r3, [r3, #8]
1000b6aa:	68fa      	ldr	r2, [r7, #12]
1000b6ac:	429a      	cmp	r2, r3
1000b6ae:	d201      	bcs.n	1000b6b4 <metal_io_virt_to_offset+0x22>
1000b6b0:	68fb      	ldr	r3, [r7, #12]
1000b6b2:	e001      	b.n	1000b6b8 <metal_io_virt_to_offset+0x26>
1000b6b4:	f04f 33ff 	mov.w	r3, #4294967295
}
1000b6b8:	4618      	mov	r0, r3
1000b6ba:	3714      	adds	r7, #20
1000b6bc:	46bd      	mov	sp, r7
1000b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b6c2:	4770      	bx	lr

1000b6c4 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
1000b6c4:	b5b0      	push	{r4, r5, r7, lr}
1000b6c6:	b08c      	sub	sp, #48	; 0x30
1000b6c8:	af00      	add	r7, sp, #0
1000b6ca:	60f8      	str	r0, [r7, #12]
1000b6cc:	60b9      	str	r1, [r7, #8]
1000b6ce:	603b      	str	r3, [r7, #0]
1000b6d0:	4613      	mov	r3, r2
1000b6d2:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
1000b6d4:	68b9      	ldr	r1, [r7, #8]
1000b6d6:	68f8      	ldr	r0, [r7, #12]
1000b6d8:	f7ff ffbf 	bl	1000b65a <metal_io_virt>
1000b6dc:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
1000b6de:	68fb      	ldr	r3, [r7, #12]
1000b6e0:	699b      	ldr	r3, [r3, #24]
1000b6e2:	2b00      	cmp	r3, #0
1000b6e4:	d009      	beq.n	1000b6fa <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
1000b6e6:	68fb      	ldr	r3, [r7, #12]
1000b6e8:	699c      	ldr	r4, [r3, #24]
1000b6ea:	79fa      	ldrb	r2, [r7, #7]
1000b6ec:	683b      	ldr	r3, [r7, #0]
1000b6ee:	68b9      	ldr	r1, [r7, #8]
1000b6f0:	68f8      	ldr	r0, [r7, #12]
1000b6f2:	47a0      	blx	r4
1000b6f4:	4604      	mov	r4, r0
1000b6f6:	460d      	mov	r5, r1
1000b6f8:	e059      	b.n	1000b7ae <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
1000b6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000b6fc:	2b00      	cmp	r3, #0
1000b6fe:	d012      	beq.n	1000b726 <metal_io_read+0x62>
1000b700:	683b      	ldr	r3, [r7, #0]
1000b702:	2b01      	cmp	r3, #1
1000b704:	d10f      	bne.n	1000b726 <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
1000b706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000b708:	62bb      	str	r3, [r7, #40]	; 0x28
1000b70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000b70c:	f3bf 8f5b 	dmb	ish
1000b710:	781b      	ldrb	r3, [r3, #0]
1000b712:	f3bf 8f5b 	dmb	ish
1000b716:	b2db      	uxtb	r3, r3
1000b718:	76fb      	strb	r3, [r7, #27]
1000b71a:	7efb      	ldrb	r3, [r7, #27]
1000b71c:	b2db      	uxtb	r3, r3
1000b71e:	2200      	movs	r2, #0
1000b720:	461c      	mov	r4, r3
1000b722:	4615      	mov	r5, r2
1000b724:	e043      	b.n	1000b7ae <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
1000b726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000b728:	2b00      	cmp	r3, #0
1000b72a:	d012      	beq.n	1000b752 <metal_io_read+0x8e>
1000b72c:	683b      	ldr	r3, [r7, #0]
1000b72e:	2b02      	cmp	r3, #2
1000b730:	d10f      	bne.n	1000b752 <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
1000b732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000b734:	627b      	str	r3, [r7, #36]	; 0x24
1000b736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b738:	f3bf 8f5b 	dmb	ish
1000b73c:	881b      	ldrh	r3, [r3, #0]
1000b73e:	f3bf 8f5b 	dmb	ish
1000b742:	b29b      	uxth	r3, r3
1000b744:	833b      	strh	r3, [r7, #24]
1000b746:	8b3b      	ldrh	r3, [r7, #24]
1000b748:	b29b      	uxth	r3, r3
1000b74a:	2200      	movs	r2, #0
1000b74c:	461c      	mov	r4, r3
1000b74e:	4615      	mov	r5, r2
1000b750:	e02d      	b.n	1000b7ae <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
1000b752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000b754:	2b00      	cmp	r3, #0
1000b756:	d010      	beq.n	1000b77a <metal_io_read+0xb6>
1000b758:	683b      	ldr	r3, [r7, #0]
1000b75a:	2b04      	cmp	r3, #4
1000b75c:	d10d      	bne.n	1000b77a <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
1000b75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000b760:	623b      	str	r3, [r7, #32]
1000b762:	6a3b      	ldr	r3, [r7, #32]
1000b764:	f3bf 8f5b 	dmb	ish
1000b768:	681b      	ldr	r3, [r3, #0]
1000b76a:	f3bf 8f5b 	dmb	ish
1000b76e:	617b      	str	r3, [r7, #20]
1000b770:	697b      	ldr	r3, [r7, #20]
1000b772:	2200      	movs	r2, #0
1000b774:	461c      	mov	r4, r3
1000b776:	4615      	mov	r5, r2
1000b778:	e019      	b.n	1000b7ae <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
1000b77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000b77c:	2b00      	cmp	r3, #0
1000b77e:	d010      	beq.n	1000b7a2 <metal_io_read+0xde>
1000b780:	683b      	ldr	r3, [r7, #0]
1000b782:	2b04      	cmp	r3, #4
1000b784:	d10d      	bne.n	1000b7a2 <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
1000b786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000b788:	61fb      	str	r3, [r7, #28]
1000b78a:	69fb      	ldr	r3, [r7, #28]
1000b78c:	f3bf 8f5b 	dmb	ish
1000b790:	681b      	ldr	r3, [r3, #0]
1000b792:	f3bf 8f5b 	dmb	ish
1000b796:	613b      	str	r3, [r7, #16]
1000b798:	693b      	ldr	r3, [r7, #16]
1000b79a:	2200      	movs	r2, #0
1000b79c:	461c      	mov	r4, r3
1000b79e:	4615      	mov	r5, r2
1000b7a0:	e005      	b.n	1000b7ae <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
1000b7a2:	4b06      	ldr	r3, [pc, #24]	; (1000b7bc <metal_io_read+0xf8>)
1000b7a4:	4a06      	ldr	r2, [pc, #24]	; (1000b7c0 <metal_io_read+0xfc>)
1000b7a6:	21fe      	movs	r1, #254	; 0xfe
1000b7a8:	4806      	ldr	r0, [pc, #24]	; (1000b7c4 <metal_io_read+0x100>)
1000b7aa:	f001 fc99 	bl	1000d0e0 <__assert_func>
	return 0; /* quiet compiler */
}
1000b7ae:	4622      	mov	r2, r4
1000b7b0:	462b      	mov	r3, r5
1000b7b2:	4610      	mov	r0, r2
1000b7b4:	4619      	mov	r1, r3
1000b7b6:	3730      	adds	r7, #48	; 0x30
1000b7b8:	46bd      	mov	sp, r7
1000b7ba:	bdb0      	pop	{r4, r5, r7, pc}
1000b7bc:	1000e60c 	.word	0x1000e60c
1000b7c0:	1000e84c 	.word	0x1000e84c
1000b7c4:	1000e610 	.word	0x1000e610

1000b7c8 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
1000b7c8:	b580      	push	{r7, lr}
1000b7ca:	b082      	sub	sp, #8
1000b7cc:	af00      	add	r7, sp, #0
1000b7ce:	6078      	str	r0, [r7, #4]
	return malloc(size);
1000b7d0:	6878      	ldr	r0, [r7, #4]
1000b7d2:	f001 fca3 	bl	1000d11c <malloc>
1000b7d6:	4603      	mov	r3, r0
}
1000b7d8:	4618      	mov	r0, r3
1000b7da:	3708      	adds	r7, #8
1000b7dc:	46bd      	mov	sp, r7
1000b7de:	bd80      	pop	{r7, pc}

1000b7e0 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
1000b7e0:	b580      	push	{r7, lr}
1000b7e2:	b082      	sub	sp, #8
1000b7e4:	af00      	add	r7, sp, #0
1000b7e6:	6078      	str	r0, [r7, #4]
	free(ptr);
1000b7e8:	6878      	ldr	r0, [r7, #4]
1000b7ea:	f001 fc9f 	bl	1000d12c <free>
}
1000b7ee:	bf00      	nop
1000b7f0:	3708      	adds	r7, #8
1000b7f2:	46bd      	mov	sp, r7
1000b7f4:	bd80      	pop	{r7, pc}

1000b7f6 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
1000b7f6:	b580      	push	{r7, lr}
1000b7f8:	b084      	sub	sp, #16
1000b7fa:	af00      	add	r7, sp, #0
1000b7fc:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
1000b7fe:	687b      	ldr	r3, [r7, #4]
1000b800:	00db      	lsls	r3, r3, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
1000b802:	3334      	adds	r3, #52	; 0x34
1000b804:	60fb      	str	r3, [r7, #12]

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
1000b806:	68f8      	ldr	r0, [r7, #12]
1000b808:	f7ff ffde 	bl	1000b7c8 <metal_allocate_memory>
1000b80c:	60b8      	str	r0, [r7, #8]
	if (vqs) {
1000b80e:	68bb      	ldr	r3, [r7, #8]
1000b810:	2b00      	cmp	r3, #0
1000b812:	d004      	beq.n	1000b81e <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
1000b814:	68fa      	ldr	r2, [r7, #12]
1000b816:	2100      	movs	r1, #0
1000b818:	68b8      	ldr	r0, [r7, #8]
1000b81a:	f001 fe72 	bl	1000d502 <memset>
	}

	return vqs;
1000b81e:	68bb      	ldr	r3, [r7, #8]
}
1000b820:	4618      	mov	r0, r3
1000b822:	3710      	adds	r7, #16
1000b824:	46bd      	mov	sp, r7
1000b826:	bd80      	pop	{r7, pc}

1000b828 <rproc_virtio_virtqueue_notify>:
#include <metal/cpu.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
1000b828:	b580      	push	{r7, lr}
1000b82a:	b086      	sub	sp, #24
1000b82c:	af00      	add	r7, sp, #0
1000b82e:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
1000b830:	687b      	ldr	r3, [r7, #4]
1000b832:	891b      	ldrh	r3, [r3, #8]
1000b834:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
1000b836:	687b      	ldr	r3, [r7, #4]
1000b838:	681b      	ldr	r3, [r3, #0]
1000b83a:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000b83c:	693b      	ldr	r3, [r7, #16]
1000b83e:	3b10      	subs	r3, #16
1000b840:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id < vdev->vrings_num);
1000b842:	693b      	ldr	r3, [r7, #16]
1000b844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000b846:	697a      	ldr	r2, [r7, #20]
1000b848:	429a      	cmp	r2, r3
1000b84a:	d305      	bcc.n	1000b858 <rproc_virtio_virtqueue_notify+0x30>
1000b84c:	4b0d      	ldr	r3, [pc, #52]	; (1000b884 <rproc_virtio_virtqueue_notify+0x5c>)
1000b84e:	4a0e      	ldr	r2, [pc, #56]	; (1000b888 <rproc_virtio_virtqueue_notify+0x60>)
1000b850:	211c      	movs	r1, #28
1000b852:	480e      	ldr	r0, [pc, #56]	; (1000b88c <rproc_virtio_virtqueue_notify+0x64>)
1000b854:	f001 fc44 	bl	1000d0e0 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
1000b858:	693b      	ldr	r3, [r7, #16]
1000b85a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1000b85c:	697a      	ldr	r2, [r7, #20]
1000b85e:	4613      	mov	r3, r2
1000b860:	005b      	lsls	r3, r3, #1
1000b862:	4413      	add	r3, r2
1000b864:	00db      	lsls	r3, r3, #3
1000b866:	440b      	add	r3, r1
1000b868:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
1000b86a:	68fb      	ldr	r3, [r7, #12]
1000b86c:	68db      	ldr	r3, [r3, #12]
1000b86e:	68fa      	ldr	r2, [r7, #12]
1000b870:	6810      	ldr	r0, [r2, #0]
1000b872:	68ba      	ldr	r2, [r7, #8]
1000b874:	6912      	ldr	r2, [r2, #16]
1000b876:	4611      	mov	r1, r2
1000b878:	4798      	blx	r3
}
1000b87a:	bf00      	nop
1000b87c:	3718      	adds	r7, #24
1000b87e:	46bd      	mov	sp, r7
1000b880:	bd80      	pop	{r7, pc}
1000b882:	bf00      	nop
1000b884:	1000e658 	.word	0x1000e658
1000b888:	1000e82c 	.word	0x1000e82c
1000b88c:	1000e674 	.word	0x1000e674

1000b890 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
1000b890:	b580      	push	{r7, lr}
1000b892:	b086      	sub	sp, #24
1000b894:	af00      	add	r7, sp, #0
1000b896:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000b898:	687b      	ldr	r3, [r7, #4]
1000b89a:	3b10      	subs	r3, #16
1000b89c:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
1000b89e:	697b      	ldr	r3, [r7, #20]
1000b8a0:	685b      	ldr	r3, [r3, #4]
1000b8a2:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
1000b8a4:	697b      	ldr	r3, [r7, #20]
1000b8a6:	689b      	ldr	r3, [r3, #8]
1000b8a8:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
1000b8aa:	693b      	ldr	r3, [r7, #16]
1000b8ac:	3318      	adds	r3, #24
1000b8ae:	4619      	mov	r1, r3
1000b8b0:	68f8      	ldr	r0, [r7, #12]
1000b8b2:	f7ff feee 	bl	1000b692 <metal_io_virt_to_offset>
1000b8b6:	4601      	mov	r1, r0
1000b8b8:	2301      	movs	r3, #1
1000b8ba:	2205      	movs	r2, #5
1000b8bc:	68f8      	ldr	r0, [r7, #12]
1000b8be:	f7ff ff01 	bl	1000b6c4 <metal_io_read>
1000b8c2:	4602      	mov	r2, r0
1000b8c4:	460b      	mov	r3, r1
1000b8c6:	4613      	mov	r3, r2
1000b8c8:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
1000b8ca:	7afb      	ldrb	r3, [r7, #11]
}
1000b8cc:	4618      	mov	r0, r3
1000b8ce:	3718      	adds	r7, #24
1000b8d0:	46bd      	mov	sp, r7
1000b8d2:	bd80      	pop	{r7, pc}

1000b8d4 <rproc_virtio_get_dfeatures>:
	rpvdev->notify(rpvdev->priv, vdev->notifyid);
}
#endif

static uint32_t rproc_virtio_get_dfeatures(struct virtio_device *vdev)
{
1000b8d4:	b580      	push	{r7, lr}
1000b8d6:	b086      	sub	sp, #24
1000b8d8:	af00      	add	r7, sp, #0
1000b8da:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000b8dc:	687b      	ldr	r3, [r7, #4]
1000b8de:	3b10      	subs	r3, #16
1000b8e0:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
1000b8e2:	697b      	ldr	r3, [r7, #20]
1000b8e4:	685b      	ldr	r3, [r3, #4]
1000b8e6:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
1000b8e8:	697b      	ldr	r3, [r7, #20]
1000b8ea:	689b      	ldr	r3, [r3, #8]
1000b8ec:	60fb      	str	r3, [r7, #12]
	features = metal_io_read32(io,
1000b8ee:	693b      	ldr	r3, [r7, #16]
1000b8f0:	330c      	adds	r3, #12
1000b8f2:	4619      	mov	r1, r3
1000b8f4:	68f8      	ldr	r0, [r7, #12]
1000b8f6:	f7ff fecc 	bl	1000b692 <metal_io_virt_to_offset>
1000b8fa:	4601      	mov	r1, r0
1000b8fc:	2304      	movs	r3, #4
1000b8fe:	2205      	movs	r2, #5
1000b900:	68f8      	ldr	r0, [r7, #12]
1000b902:	f7ff fedf 	bl	1000b6c4 <metal_io_read>
1000b906:	4602      	mov	r2, r0
1000b908:	460b      	mov	r3, r1
1000b90a:	4613      	mov	r3, r2
1000b90c:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
1000b90e:	68bb      	ldr	r3, [r7, #8]
}
1000b910:	4618      	mov	r0, r3
1000b912:	3718      	adds	r7, #24
1000b914:	46bd      	mov	sp, r7
1000b916:	bd80      	pop	{r7, pc}

1000b918 <rproc_virtio_get_features>:

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
1000b918:	b580      	push	{r7, lr}
1000b91a:	b088      	sub	sp, #32
1000b91c:	af00      	add	r7, sp, #0
1000b91e:	6078      	str	r0, [r7, #4]
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t gfeatures;
	uint32_t dfeatures;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000b920:	687b      	ldr	r3, [r7, #4]
1000b922:	3b10      	subs	r3, #16
1000b924:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
1000b926:	69fb      	ldr	r3, [r7, #28]
1000b928:	685b      	ldr	r3, [r3, #4]
1000b92a:	61bb      	str	r3, [r7, #24]
	io = rpvdev->vdev_rsc_io;
1000b92c:	69fb      	ldr	r3, [r7, #28]
1000b92e:	689b      	ldr	r3, [r3, #8]
1000b930:	617b      	str	r3, [r7, #20]
	gfeatures = metal_io_read32(io,
1000b932:	69bb      	ldr	r3, [r7, #24]
1000b934:	3310      	adds	r3, #16
1000b936:	4619      	mov	r1, r3
1000b938:	6978      	ldr	r0, [r7, #20]
1000b93a:	f7ff feaa 	bl	1000b692 <metal_io_virt_to_offset>
1000b93e:	4601      	mov	r1, r0
1000b940:	2304      	movs	r3, #4
1000b942:	2205      	movs	r2, #5
1000b944:	6978      	ldr	r0, [r7, #20]
1000b946:	f7ff febd 	bl	1000b6c4 <metal_io_read>
1000b94a:	4602      	mov	r2, r0
1000b94c:	460b      	mov	r3, r1
1000b94e:	4613      	mov	r3, r2
1000b950:	613b      	str	r3, [r7, #16]
			metal_io_virt_to_offset(io, &vdev_rsc->gfeatures));
	dfeatures = rproc_virtio_get_dfeatures(vdev);
1000b952:	6878      	ldr	r0, [r7, #4]
1000b954:	f7ff ffbe 	bl	1000b8d4 <rproc_virtio_get_dfeatures>
1000b958:	60f8      	str	r0, [r7, #12]

	return dfeatures & gfeatures;
1000b95a:	68fa      	ldr	r2, [r7, #12]
1000b95c:	693b      	ldr	r3, [r7, #16]
1000b95e:	4013      	ands	r3, r2
}
1000b960:	4618      	mov	r0, r3
1000b962:	3720      	adds	r7, #32
1000b964:	46bd      	mov	sp, r7
1000b966:	bd80      	pop	{r7, pc}

1000b968 <rproc_virtio_read_config>:
}
#endif

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
1000b968:	b580      	push	{r7, lr}
1000b96a:	b088      	sub	sp, #32
1000b96c:	af00      	add	r7, sp, #0
1000b96e:	60f8      	str	r0, [r7, #12]
1000b970:	60b9      	str	r1, [r7, #8]
1000b972:	607a      	str	r2, [r7, #4]
1000b974:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char *config;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000b976:	68fb      	ldr	r3, [r7, #12]
1000b978:	3b10      	subs	r3, #16
1000b97a:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
1000b97c:	69fb      	ldr	r3, [r7, #28]
1000b97e:	685b      	ldr	r3, [r3, #4]
1000b980:	61bb      	str	r3, [r7, #24]
	config = (char *)(&vdev_rsc->vring[vdev->vrings_num]);
1000b982:	68fb      	ldr	r3, [r7, #12]
1000b984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
1000b986:	4613      	mov	r3, r2
1000b988:	009b      	lsls	r3, r3, #2
1000b98a:	4413      	add	r3, r2
1000b98c:	009b      	lsls	r3, r3, #2
1000b98e:	3318      	adds	r3, #24
1000b990:	69ba      	ldr	r2, [r7, #24]
1000b992:	4413      	add	r3, r2
1000b994:	3304      	adds	r3, #4
1000b996:	617b      	str	r3, [r7, #20]
	io = rpvdev->vdev_rsc_io;
1000b998:	69fb      	ldr	r3, [r7, #28]
1000b99a:	689b      	ldr	r3, [r3, #8]
1000b99c:	613b      	str	r3, [r7, #16]

	if (offset + length <= vdev_rsc->config_len)
1000b99e:	683a      	ldr	r2, [r7, #0]
1000b9a0:	68bb      	ldr	r3, [r7, #8]
1000b9a2:	441a      	add	r2, r3
1000b9a4:	69bb      	ldr	r3, [r7, #24]
1000b9a6:	695b      	ldr	r3, [r3, #20]
1000b9a8:	429a      	cmp	r2, r3
1000b9aa:	d80c      	bhi.n	1000b9c6 <rproc_virtio_read_config+0x5e>
		metal_io_block_read(io,
				metal_io_virt_to_offset(io, config + offset),
1000b9ac:	697a      	ldr	r2, [r7, #20]
1000b9ae:	68bb      	ldr	r3, [r7, #8]
1000b9b0:	4413      	add	r3, r2
		metal_io_block_read(io,
1000b9b2:	4619      	mov	r1, r3
1000b9b4:	6938      	ldr	r0, [r7, #16]
1000b9b6:	f7ff fe6c 	bl	1000b692 <metal_io_virt_to_offset>
1000b9ba:	4601      	mov	r1, r0
1000b9bc:	683b      	ldr	r3, [r7, #0]
1000b9be:	687a      	ldr	r2, [r7, #4]
1000b9c0:	6938      	ldr	r0, [r7, #16]
1000b9c2:	f7ff fd54 	bl	1000b46e <metal_io_block_read>
				dst, length);
}
1000b9c6:	bf00      	nop
1000b9c8:	3720      	adds	r7, #32
1000b9ca:	46bd      	mov	sp, r7
1000b9cc:	bd80      	pop	{r7, pc}
	...

1000b9d0 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
1000b9d0:	b580      	push	{r7, lr}
1000b9d2:	b08e      	sub	sp, #56	; 0x38
1000b9d4:	af00      	add	r7, sp, #0
1000b9d6:	60f8      	str	r0, [r7, #12]
1000b9d8:	60b9      	str	r1, [r7, #8]
1000b9da:	607a      	str	r2, [r7, #4]
1000b9dc:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
1000b9de:	687b      	ldr	r3, [r7, #4]
1000b9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
1000b9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000b9e4:	7e5b      	ldrb	r3, [r3, #25]
1000b9e6:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
1000b9e8:	2048      	movs	r0, #72	; 0x48
1000b9ea:	f7ff feed 	bl	1000b7c8 <metal_allocate_memory>
1000b9ee:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
1000b9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b9f2:	2b00      	cmp	r3, #0
1000b9f4:	d101      	bne.n	1000b9fa <rproc_virtio_create_vdev+0x2a>
		return NULL;
1000b9f6:	2300      	movs	r3, #0
1000b9f8:	e092      	b.n	1000bb20 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
1000b9fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000b9fc:	4613      	mov	r3, r2
1000b9fe:	005b      	lsls	r3, r3, #1
1000ba00:	4413      	add	r3, r2
1000ba02:	00db      	lsls	r3, r3, #3
1000ba04:	4618      	mov	r0, r3
1000ba06:	f7ff fedf 	bl	1000b7c8 <metal_allocate_memory>
1000ba0a:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
1000ba0c:	6a3b      	ldr	r3, [r7, #32]
1000ba0e:	2b00      	cmp	r3, #0
1000ba10:	f000 8081 	beq.w	1000bb16 <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
1000ba14:	2248      	movs	r2, #72	; 0x48
1000ba16:	2100      	movs	r1, #0
1000ba18:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000ba1a:	f001 fd72 	bl	1000d502 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
1000ba1e:	2218      	movs	r2, #24
1000ba20:	2100      	movs	r1, #0
1000ba22:	6a38      	ldr	r0, [r7, #32]
1000ba24:	f001 fd6d 	bl	1000d502 <memset>
	vdev = &rpvdev->vdev;
1000ba28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000ba2a:	3310      	adds	r3, #16
1000ba2c:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
1000ba2e:	2300      	movs	r3, #0
1000ba30:	637b      	str	r3, [r7, #52]	; 0x34
1000ba32:	e025      	b.n	1000ba80 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
1000ba34:	2300      	movs	r3, #0
1000ba36:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
1000ba38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000ba3a:	4613      	mov	r3, r2
1000ba3c:	009b      	lsls	r3, r3, #2
1000ba3e:	4413      	add	r3, r2
1000ba40:	009b      	lsls	r3, r3, #2
1000ba42:	3318      	adds	r3, #24
1000ba44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
1000ba46:	4413      	add	r3, r2
1000ba48:	3304      	adds	r3, #4
1000ba4a:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
1000ba4c:	68fb      	ldr	r3, [r7, #12]
1000ba4e:	2b00      	cmp	r3, #0
1000ba50:	d102      	bne.n	1000ba58 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
1000ba52:	69bb      	ldr	r3, [r7, #24]
1000ba54:	689b      	ldr	r3, [r3, #8]
1000ba56:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
1000ba58:	6b38      	ldr	r0, [r7, #48]	; 0x30
1000ba5a:	f7ff fecc 	bl	1000b7f6 <virtqueue_allocate>
1000ba5e:	6178      	str	r0, [r7, #20]
		if (!vq)
1000ba60:	697b      	ldr	r3, [r7, #20]
1000ba62:	2b00      	cmp	r3, #0
1000ba64:	d031      	beq.n	1000baca <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
1000ba66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000ba68:	4613      	mov	r3, r2
1000ba6a:	005b      	lsls	r3, r3, #1
1000ba6c:	4413      	add	r3, r2
1000ba6e:	00db      	lsls	r3, r3, #3
1000ba70:	461a      	mov	r2, r3
1000ba72:	6a3b      	ldr	r3, [r7, #32]
1000ba74:	4413      	add	r3, r2
1000ba76:	697a      	ldr	r2, [r7, #20]
1000ba78:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
1000ba7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000ba7c:	3301      	adds	r3, #1
1000ba7e:	637b      	str	r3, [r7, #52]	; 0x34
1000ba80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000ba82:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000ba84:	429a      	cmp	r2, r3
1000ba86:	d3d5      	bcc.n	1000ba34 <rproc_virtio_create_vdev+0x64>
	}

	rpvdev->notify = notify;
1000ba88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000ba8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
1000ba8c:	60da      	str	r2, [r3, #12]
	rpvdev->priv = priv;
1000ba8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000ba90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
1000ba92:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
1000ba94:	69fb      	ldr	r3, [r7, #28]
1000ba96:	6a3a      	ldr	r2, [r7, #32]
1000ba98:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
1000ba9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000ba9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
1000ba9e:	605a      	str	r2, [r3, #4]
	rpvdev->vdev_rsc_io = rsc_io;
1000baa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000baa2:	683a      	ldr	r2, [r7, #0]
1000baa4:	609a      	str	r2, [r3, #8]

	vdev->notifyid = notifyid;
1000baa6:	69fb      	ldr	r3, [r7, #28]
1000baa8:	68ba      	ldr	r2, [r7, #8]
1000baaa:	601a      	str	r2, [r3, #0]
	vdev->role = role;
1000baac:	69fb      	ldr	r3, [r7, #28]
1000baae:	68fa      	ldr	r2, [r7, #12]
1000bab0:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
1000bab2:	69fb      	ldr	r3, [r7, #28]
1000bab4:	6cba      	ldr	r2, [r7, #72]	; 0x48
1000bab6:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
1000bab8:	69fb      	ldr	r3, [r7, #28]
1000baba:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000babc:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
1000babe:	69fb      	ldr	r3, [r7, #28]
1000bac0:	4a19      	ldr	r2, [pc, #100]	; (1000bb28 <rproc_virtio_create_vdev+0x158>)
1000bac2:	621a      	str	r2, [r3, #32]
		/* Assume the master support all slave features */
		rproc_virtio_negotiate_features(vdev, dfeatures);
	}
#endif

	return &rpvdev->vdev;
1000bac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bac6:	3310      	adds	r3, #16
1000bac8:	e02a      	b.n	1000bb20 <rproc_virtio_create_vdev+0x150>
			goto err1;
1000baca:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
1000bacc:	2300      	movs	r3, #0
1000bace:	637b      	str	r3, [r7, #52]	; 0x34
1000bad0:	e019      	b.n	1000bb06 <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
1000bad2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000bad4:	4613      	mov	r3, r2
1000bad6:	005b      	lsls	r3, r3, #1
1000bad8:	4413      	add	r3, r2
1000bada:	00db      	lsls	r3, r3, #3
1000badc:	461a      	mov	r2, r3
1000bade:	6a3b      	ldr	r3, [r7, #32]
1000bae0:	4413      	add	r3, r2
1000bae2:	681b      	ldr	r3, [r3, #0]
1000bae4:	2b00      	cmp	r3, #0
1000bae6:	d00b      	beq.n	1000bb00 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
1000bae8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000baea:	4613      	mov	r3, r2
1000baec:	005b      	lsls	r3, r3, #1
1000baee:	4413      	add	r3, r2
1000baf0:	00db      	lsls	r3, r3, #3
1000baf2:	461a      	mov	r2, r3
1000baf4:	6a3b      	ldr	r3, [r7, #32]
1000baf6:	4413      	add	r3, r2
1000baf8:	681b      	ldr	r3, [r3, #0]
1000bafa:	4618      	mov	r0, r3
1000bafc:	f7ff fe70 	bl	1000b7e0 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
1000bb00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000bb02:	3301      	adds	r3, #1
1000bb04:	637b      	str	r3, [r7, #52]	; 0x34
1000bb06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000bb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000bb0a:	429a      	cmp	r2, r3
1000bb0c:	d3e1      	bcc.n	1000bad2 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
1000bb0e:	6a38      	ldr	r0, [r7, #32]
1000bb10:	f7ff fe66 	bl	1000b7e0 <metal_free_memory>
1000bb14:	e000      	b.n	1000bb18 <rproc_virtio_create_vdev+0x148>
		goto err0;
1000bb16:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
1000bb18:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000bb1a:	f7ff fe61 	bl	1000b7e0 <metal_free_memory>
	return NULL;
1000bb1e:	2300      	movs	r3, #0
}
1000bb20:	4618      	mov	r0, r3
1000bb22:	3738      	adds	r7, #56	; 0x38
1000bb24:	46bd      	mov	sp, r7
1000bb26:	bd80      	pop	{r7, pc}
1000bb28:	1000e808 	.word	0x1000e808

1000bb2c <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
1000bb2c:	b480      	push	{r7}
1000bb2e:	b087      	sub	sp, #28
1000bb30:	af00      	add	r7, sp, #0
1000bb32:	60f8      	str	r0, [r7, #12]
1000bb34:	60b9      	str	r1, [r7, #8]
1000bb36:	607a      	str	r2, [r7, #4]
1000bb38:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
1000bb3a:	68fb      	ldr	r3, [r7, #12]
1000bb3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000bb3e:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
1000bb40:	68ba      	ldr	r2, [r7, #8]
1000bb42:	697b      	ldr	r3, [r7, #20]
1000bb44:	429a      	cmp	r2, r3
1000bb46:	d302      	bcc.n	1000bb4e <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
1000bb48:	f06f 0301 	mvn.w	r3, #1
1000bb4c:	e019      	b.n	1000bb82 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
1000bb4e:	68fb      	ldr	r3, [r7, #12]
1000bb50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1000bb52:	68ba      	ldr	r2, [r7, #8]
1000bb54:	4613      	mov	r3, r2
1000bb56:	005b      	lsls	r3, r3, #1
1000bb58:	4413      	add	r3, r2
1000bb5a:	00db      	lsls	r3, r3, #3
1000bb5c:	440b      	add	r3, r1
1000bb5e:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
1000bb60:	693b      	ldr	r3, [r7, #16]
1000bb62:	6a3a      	ldr	r2, [r7, #32]
1000bb64:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
1000bb66:	693b      	ldr	r3, [r7, #16]
1000bb68:	687a      	ldr	r2, [r7, #4]
1000bb6a:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
1000bb6c:	693b      	ldr	r3, [r7, #16]
1000bb6e:	683a      	ldr	r2, [r7, #0]
1000bb70:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
1000bb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bb74:	b29a      	uxth	r2, r3
1000bb76:	693b      	ldr	r3, [r7, #16]
1000bb78:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
1000bb7a:	693b      	ldr	r3, [r7, #16]
1000bb7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000bb7e:	609a      	str	r2, [r3, #8]

	return 0;
1000bb80:	2300      	movs	r3, #0
}
1000bb82:	4618      	mov	r0, r3
1000bb84:	371c      	adds	r7, #28
1000bb86:	46bd      	mov	sp, r7
1000bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bb8c:	4770      	bx	lr

1000bb8e <rproc_virtio_wait_remote_ready>:
	}
	return 0;
}

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
1000bb8e:	b580      	push	{r7, lr}
1000bb90:	b084      	sub	sp, #16
1000bb92:	af00      	add	r7, sp, #0
1000bb94:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
1000bb96:	687b      	ldr	r3, [r7, #4]
1000bb98:	699b      	ldr	r3, [r3, #24]
1000bb9a:	2b00      	cmp	r3, #0
1000bb9c:	d00a      	beq.n	1000bbb4 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
1000bb9e:	6878      	ldr	r0, [r7, #4]
1000bba0:	f7ff fe76 	bl	1000b890 <rproc_virtio_get_status>
1000bba4:	4603      	mov	r3, r0
1000bba6:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
1000bba8:	7bfb      	ldrb	r3, [r7, #15]
1000bbaa:	f003 0304 	and.w	r3, r3, #4
1000bbae:	2b00      	cmp	r3, #0
1000bbb0:	d102      	bne.n	1000bbb8 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
1000bbb2:	e7f4      	b.n	1000bb9e <rproc_virtio_wait_remote_ready+0x10>
		return;
1000bbb4:	bf00      	nop
1000bbb6:	e000      	b.n	1000bbba <rproc_virtio_wait_remote_ready+0x2c>
			return;
1000bbb8:	bf00      	nop
		metal_cpu_yield();
	}
}
1000bbba:	3710      	adds	r7, #16
1000bbbc:	46bd      	mov	sp, r7
1000bbbe:	bd80      	pop	{r7, pc}

1000bbc0 <metal_list_add_before>:
{
1000bbc0:	b480      	push	{r7}
1000bbc2:	b083      	sub	sp, #12
1000bbc4:	af00      	add	r7, sp, #0
1000bbc6:	6078      	str	r0, [r7, #4]
1000bbc8:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
1000bbca:	687b      	ldr	r3, [r7, #4]
1000bbcc:	685a      	ldr	r2, [r3, #4]
1000bbce:	683b      	ldr	r3, [r7, #0]
1000bbd0:	605a      	str	r2, [r3, #4]
	new_node->next = node;
1000bbd2:	683b      	ldr	r3, [r7, #0]
1000bbd4:	687a      	ldr	r2, [r7, #4]
1000bbd6:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
1000bbd8:	683b      	ldr	r3, [r7, #0]
1000bbda:	681b      	ldr	r3, [r3, #0]
1000bbdc:	683a      	ldr	r2, [r7, #0]
1000bbde:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
1000bbe0:	683b      	ldr	r3, [r7, #0]
1000bbe2:	685b      	ldr	r3, [r3, #4]
1000bbe4:	683a      	ldr	r2, [r7, #0]
1000bbe6:	601a      	str	r2, [r3, #0]
}
1000bbe8:	bf00      	nop
1000bbea:	370c      	adds	r7, #12
1000bbec:	46bd      	mov	sp, r7
1000bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bbf2:	4770      	bx	lr

1000bbf4 <metal_list_add_tail>:
{
1000bbf4:	b580      	push	{r7, lr}
1000bbf6:	b082      	sub	sp, #8
1000bbf8:	af00      	add	r7, sp, #0
1000bbfa:	6078      	str	r0, [r7, #4]
1000bbfc:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
1000bbfe:	6839      	ldr	r1, [r7, #0]
1000bc00:	6878      	ldr	r0, [r7, #4]
1000bc02:	f7ff ffdd 	bl	1000bbc0 <metal_list_add_before>
}
1000bc06:	bf00      	nop
1000bc08:	3708      	adds	r7, #8
1000bc0a:	46bd      	mov	sp, r7
1000bc0c:	bd80      	pop	{r7, pc}

1000bc0e <rpmsg_get_endpoint>:
}

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
1000bc0e:	b580      	push	{r7, lr}
1000bc10:	b088      	sub	sp, #32
1000bc12:	af00      	add	r7, sp, #0
1000bc14:	60f8      	str	r0, [r7, #12]
1000bc16:	60b9      	str	r1, [r7, #8]
1000bc18:	607a      	str	r2, [r7, #4]
1000bc1a:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
1000bc1c:	68fb      	ldr	r3, [r7, #12]
1000bc1e:	681b      	ldr	r3, [r3, #0]
1000bc20:	61fb      	str	r3, [r7, #28]
1000bc22:	e04b      	b.n	1000bcbc <rpmsg_get_endpoint+0xae>
		int name_match = 0;
1000bc24:	2300      	movs	r3, #0
1000bc26:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
1000bc28:	69fb      	ldr	r3, [r7, #28]
1000bc2a:	3b34      	subs	r3, #52	; 0x34
1000bc2c:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
1000bc2e:	687b      	ldr	r3, [r7, #4]
1000bc30:	f1b3 3fff 	cmp.w	r3, #4294967295
1000bc34:	d006      	beq.n	1000bc44 <rpmsg_get_endpoint+0x36>
1000bc36:	697b      	ldr	r3, [r7, #20]
1000bc38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000bc3a:	687a      	ldr	r2, [r7, #4]
1000bc3c:	429a      	cmp	r2, r3
1000bc3e:	d101      	bne.n	1000bc44 <rpmsg_get_endpoint+0x36>
			return ept;
1000bc40:	697b      	ldr	r3, [r7, #20]
1000bc42:	e040      	b.n	1000bcc6 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
1000bc44:	697b      	ldr	r3, [r7, #20]
1000bc46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000bc48:	687a      	ldr	r2, [r7, #4]
1000bc4a:	429a      	cmp	r2, r3
1000bc4c:	d106      	bne.n	1000bc5c <rpmsg_get_endpoint+0x4e>
1000bc4e:	697b      	ldr	r3, [r7, #20]
1000bc50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000bc52:	683a      	ldr	r2, [r7, #0]
1000bc54:	429a      	cmp	r2, r3
1000bc56:	d101      	bne.n	1000bc5c <rpmsg_get_endpoint+0x4e>
			return ept;
1000bc58:	697b      	ldr	r3, [r7, #20]
1000bc5a:	e034      	b.n	1000bcc6 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
1000bc5c:	68bb      	ldr	r3, [r7, #8]
1000bc5e:	2b00      	cmp	r3, #0
1000bc60:	d00c      	beq.n	1000bc7c <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
1000bc62:	697b      	ldr	r3, [r7, #20]
1000bc64:	2220      	movs	r2, #32
1000bc66:	68b9      	ldr	r1, [r7, #8]
1000bc68:	4618      	mov	r0, r3
1000bc6a:	f001 fc52 	bl	1000d512 <strncmp>
1000bc6e:	4603      	mov	r3, r0
1000bc70:	2b00      	cmp	r3, #0
1000bc72:	bf0c      	ite	eq
1000bc74:	2301      	moveq	r3, #1
1000bc76:	2300      	movne	r3, #0
1000bc78:	b2db      	uxtb	r3, r3
1000bc7a:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
1000bc7c:	68bb      	ldr	r3, [r7, #8]
1000bc7e:	2b00      	cmp	r3, #0
1000bc80:	d018      	beq.n	1000bcb4 <rpmsg_get_endpoint+0xa6>
1000bc82:	69bb      	ldr	r3, [r7, #24]
1000bc84:	2b00      	cmp	r3, #0
1000bc86:	d015      	beq.n	1000bcb4 <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address */
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
1000bc88:	683b      	ldr	r3, [r7, #0]
1000bc8a:	f1b3 3fff 	cmp.w	r3, #4294967295
1000bc8e:	d006      	beq.n	1000bc9e <rpmsg_get_endpoint+0x90>
1000bc90:	697b      	ldr	r3, [r7, #20]
1000bc92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000bc94:	683a      	ldr	r2, [r7, #0]
1000bc96:	429a      	cmp	r2, r3
1000bc98:	d101      	bne.n	1000bc9e <rpmsg_get_endpoint+0x90>
			return ept;
1000bc9a:	697b      	ldr	r3, [r7, #20]
1000bc9c:	e013      	b.n	1000bcc6 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept */
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
1000bc9e:	687b      	ldr	r3, [r7, #4]
1000bca0:	f1b3 3fff 	cmp.w	r3, #4294967295
1000bca4:	d107      	bne.n	1000bcb6 <rpmsg_get_endpoint+0xa8>
1000bca6:	697b      	ldr	r3, [r7, #20]
1000bca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000bcaa:	f1b3 3fff 	cmp.w	r3, #4294967295
1000bcae:	d102      	bne.n	1000bcb6 <rpmsg_get_endpoint+0xa8>
			return ept;
1000bcb0:	697b      	ldr	r3, [r7, #20]
1000bcb2:	e008      	b.n	1000bcc6 <rpmsg_get_endpoint+0xb8>
			continue;
1000bcb4:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
1000bcb6:	69fb      	ldr	r3, [r7, #28]
1000bcb8:	681b      	ldr	r3, [r3, #0]
1000bcba:	61fb      	str	r3, [r7, #28]
1000bcbc:	68fb      	ldr	r3, [r7, #12]
1000bcbe:	69fa      	ldr	r2, [r7, #28]
1000bcc0:	429a      	cmp	r2, r3
1000bcc2:	d1af      	bne.n	1000bc24 <rpmsg_get_endpoint+0x16>
	}
	return NULL;
1000bcc4:	2300      	movs	r3, #0
}
1000bcc6:	4618      	mov	r0, r3
1000bcc8:	3720      	adds	r7, #32
1000bcca:	46bd      	mov	sp, r7
1000bccc:	bd80      	pop	{r7, pc}

1000bcce <rpmsg_register_endpoint>:
	metal_mutex_release(&rdev->lock);
}

void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept)
{
1000bcce:	b580      	push	{r7, lr}
1000bcd0:	b082      	sub	sp, #8
1000bcd2:	af00      	add	r7, sp, #0
1000bcd4:	6078      	str	r0, [r7, #4]
1000bcd6:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
1000bcd8:	683b      	ldr	r3, [r7, #0]
1000bcda:	687a      	ldr	r2, [r7, #4]
1000bcdc:	621a      	str	r2, [r3, #32]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
1000bcde:	687a      	ldr	r2, [r7, #4]
1000bce0:	683b      	ldr	r3, [r7, #0]
1000bce2:	3334      	adds	r3, #52	; 0x34
1000bce4:	4619      	mov	r1, r3
1000bce6:	4610      	mov	r0, r2
1000bce8:	f7ff ff84 	bl	1000bbf4 <metal_list_add_tail>
}
1000bcec:	bf00      	nop
1000bcee:	3708      	adds	r7, #8
1000bcf0:	46bd      	mov	sp, r7
1000bcf2:	bd80      	pop	{r7, pc}

1000bcf4 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
1000bcf4:	b480      	push	{r7}
1000bcf6:	b083      	sub	sp, #12
1000bcf8:	af00      	add	r7, sp, #0
1000bcfa:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
1000bcfc:	2300      	movs	r3, #0
}
1000bcfe:	4618      	mov	r0, r3
1000bd00:	370c      	adds	r7, #12
1000bd02:	46bd      	mov	sp, r7
1000bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bd08:	4770      	bx	lr

1000bd0a <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
1000bd0a:	b580      	push	{r7, lr}
1000bd0c:	b082      	sub	sp, #8
1000bd0e:	af00      	add	r7, sp, #0
1000bd10:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
1000bd12:	6878      	ldr	r0, [r7, #4]
1000bd14:	f7ff ffee 	bl	1000bcf4 <__metal_sleep_usec>
1000bd18:	4603      	mov	r3, r0
}
1000bd1a:	4618      	mov	r0, r3
1000bd1c:	3708      	adds	r7, #8
1000bd1e:	46bd      	mov	sp, r7
1000bd20:	bd80      	pop	{r7, pc}

1000bd22 <metal_list_init>:
{
1000bd22:	b480      	push	{r7}
1000bd24:	b083      	sub	sp, #12
1000bd26:	af00      	add	r7, sp, #0
1000bd28:	6078      	str	r0, [r7, #4]
	list->prev = list;
1000bd2a:	687b      	ldr	r3, [r7, #4]
1000bd2c:	687a      	ldr	r2, [r7, #4]
1000bd2e:	605a      	str	r2, [r3, #4]
	list->next = list;
1000bd30:	687b      	ldr	r3, [r7, #4]
1000bd32:	687a      	ldr	r2, [r7, #4]
1000bd34:	601a      	str	r2, [r3, #0]
}
1000bd36:	bf00      	nop
1000bd38:	370c      	adds	r7, #12
1000bd3a:	46bd      	mov	sp, r7
1000bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bd40:	4770      	bx	lr

1000bd42 <metal_io_virt_to_offset>:
{
1000bd42:	b480      	push	{r7}
1000bd44:	b085      	sub	sp, #20
1000bd46:	af00      	add	r7, sp, #0
1000bd48:	6078      	str	r0, [r7, #4]
1000bd4a:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
1000bd4c:	683b      	ldr	r3, [r7, #0]
1000bd4e:	687a      	ldr	r2, [r7, #4]
1000bd50:	6812      	ldr	r2, [r2, #0]
1000bd52:	1a9b      	subs	r3, r3, r2
1000bd54:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
1000bd56:	687b      	ldr	r3, [r7, #4]
1000bd58:	689b      	ldr	r3, [r3, #8]
1000bd5a:	68fa      	ldr	r2, [r7, #12]
1000bd5c:	429a      	cmp	r2, r3
1000bd5e:	d201      	bcs.n	1000bd64 <metal_io_virt_to_offset+0x22>
1000bd60:	68fb      	ldr	r3, [r7, #12]
1000bd62:	e001      	b.n	1000bd68 <metal_io_virt_to_offset+0x26>
1000bd64:	f04f 33ff 	mov.w	r3, #4294967295
}
1000bd68:	4618      	mov	r0, r3
1000bd6a:	3714      	adds	r7, #20
1000bd6c:	46bd      	mov	sp, r7
1000bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bd72:	4770      	bx	lr

1000bd74 <__metal_mutex_init>:
 * static singleton mutex
 */
#define METAL_MUTEX_DEFINE(m) metal_mutex_t m = METAL_MUTEX_INIT(m)

static inline void __metal_mutex_init(metal_mutex_t *mutex)
{
1000bd74:	b480      	push	{r7}
1000bd76:	b085      	sub	sp, #20
1000bd78:	af00      	add	r7, sp, #0
1000bd7a:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
1000bd7c:	687b      	ldr	r3, [r7, #4]
1000bd7e:	60fb      	str	r3, [r7, #12]
1000bd80:	2300      	movs	r3, #0
1000bd82:	60bb      	str	r3, [r7, #8]
1000bd84:	68bb      	ldr	r3, [r7, #8]
1000bd86:	461a      	mov	r2, r3
1000bd88:	68fb      	ldr	r3, [r7, #12]
1000bd8a:	f3bf 8f5b 	dmb	ish
1000bd8e:	601a      	str	r2, [r3, #0]
1000bd90:	f3bf 8f5b 	dmb	ish
}
1000bd94:	bf00      	nop
1000bd96:	3714      	adds	r7, #20
1000bd98:	46bd      	mov	sp, r7
1000bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bd9e:	4770      	bx	lr

1000bda0 <__metal_mutex_acquire>:
		return 0; /* not acquired */
	}
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
1000bda0:	b490      	push	{r4, r7}
1000bda2:	b086      	sub	sp, #24
1000bda4:	af00      	add	r7, sp, #0
1000bda6:	6078      	str	r0, [r7, #4]
	int unlocked = METAL_MUTEX_UNLOCKED;
1000bda8:	2300      	movs	r3, #0
1000bdaa:	613b      	str	r3, [r7, #16]

	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
1000bdac:	bf00      	nop
1000bdae:	687b      	ldr	r3, [r7, #4]
1000bdb0:	617b      	str	r3, [r7, #20]
1000bdb2:	2301      	movs	r3, #1
1000bdb4:	60fb      	str	r3, [r7, #12]
1000bdb6:	68fb      	ldr	r3, [r7, #12]
1000bdb8:	461c      	mov	r4, r3
1000bdba:	697a      	ldr	r2, [r7, #20]
1000bdbc:	f107 0310 	add.w	r3, r7, #16
1000bdc0:	6818      	ldr	r0, [r3, #0]
1000bdc2:	f3bf 8f5b 	dmb	ish
1000bdc6:	e852 1f00 	ldrex	r1, [r2]
1000bdca:	4281      	cmp	r1, r0
1000bdcc:	d103      	bne.n	1000bdd6 <__metal_mutex_acquire+0x36>
1000bdce:	e842 4c00 	strex	ip, r4, [r2]
1000bdd2:	f1bc 0f00 	cmp.w	ip, #0
1000bdd6:	f3bf 8f5b 	dmb	ish
1000bdda:	bf0c      	ite	eq
1000bddc:	2201      	moveq	r2, #1
1000bdde:	2200      	movne	r2, #0
1000bde0:	2a00      	cmp	r2, #0
1000bde2:	d100      	bne.n	1000bde6 <__metal_mutex_acquire+0x46>
1000bde4:	6019      	str	r1, [r3, #0]
1000bde6:	4613      	mov	r3, r2
1000bde8:	f083 0301 	eor.w	r3, r3, #1
1000bdec:	b2db      	uxtb	r3, r3
1000bdee:	2b00      	cmp	r3, #0
1000bdf0:	d1dd      	bne.n	1000bdae <__metal_mutex_acquire+0xe>
					     METAL_MUTEX_LOCKED)) {
		;
	}
}
1000bdf2:	bf00      	nop
1000bdf4:	bf00      	nop
1000bdf6:	3718      	adds	r7, #24
1000bdf8:	46bd      	mov	sp, r7
1000bdfa:	bc90      	pop	{r4, r7}
1000bdfc:	4770      	bx	lr

1000bdfe <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
1000bdfe:	b480      	push	{r7}
1000be00:	b085      	sub	sp, #20
1000be02:	af00      	add	r7, sp, #0
1000be04:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
1000be06:	687b      	ldr	r3, [r7, #4]
1000be08:	60fb      	str	r3, [r7, #12]
1000be0a:	2300      	movs	r3, #0
1000be0c:	60bb      	str	r3, [r7, #8]
1000be0e:	68bb      	ldr	r3, [r7, #8]
1000be10:	461a      	mov	r2, r3
1000be12:	68fb      	ldr	r3, [r7, #12]
1000be14:	f3bf 8f5b 	dmb	ish
1000be18:	601a      	str	r2, [r3, #0]
1000be1a:	f3bf 8f5b 	dmb	ish
}
1000be1e:	bf00      	nop
1000be20:	3714      	adds	r7, #20
1000be22:	46bd      	mov	sp, r7
1000be24:	f85d 7b04 	ldr.w	r7, [sp], #4
1000be28:	4770      	bx	lr

1000be2a <metal_mutex_init>:
/**
 * @brief	Initialize a libmetal mutex.
 * @param[in]	mutex	Mutex to initialize.
 */
static inline void metal_mutex_init(metal_mutex_t *mutex)
{
1000be2a:	b580      	push	{r7, lr}
1000be2c:	b082      	sub	sp, #8
1000be2e:	af00      	add	r7, sp, #0
1000be30:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
1000be32:	6878      	ldr	r0, [r7, #4]
1000be34:	f7ff ff9e 	bl	1000bd74 <__metal_mutex_init>
}
1000be38:	bf00      	nop
1000be3a:	3708      	adds	r7, #8
1000be3c:	46bd      	mov	sp, r7
1000be3e:	bd80      	pop	{r7, pc}

1000be40 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
1000be40:	b580      	push	{r7, lr}
1000be42:	b082      	sub	sp, #8
1000be44:	af00      	add	r7, sp, #0
1000be46:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
1000be48:	6878      	ldr	r0, [r7, #4]
1000be4a:	f7ff ffa9 	bl	1000bda0 <__metal_mutex_acquire>
}
1000be4e:	bf00      	nop
1000be50:	3708      	adds	r7, #8
1000be52:	46bd      	mov	sp, r7
1000be54:	bd80      	pop	{r7, pc}

1000be56 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
1000be56:	b580      	push	{r7, lr}
1000be58:	b082      	sub	sp, #8
1000be5a:	af00      	add	r7, sp, #0
1000be5c:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
1000be5e:	6878      	ldr	r0, [r7, #4]
1000be60:	f7ff ffcd 	bl	1000bdfe <__metal_mutex_release>
}
1000be64:	bf00      	nop
1000be66:	3708      	adds	r7, #8
1000be68:	46bd      	mov	sp, r7
1000be6a:	bd80      	pop	{r7, pc}

1000be6c <rpmsg_virtio_get_role>:
#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
1000be6c:	b480      	push	{r7}
1000be6e:	b083      	sub	sp, #12
1000be70:	af00      	add	r7, sp, #0
1000be72:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
1000be74:	687b      	ldr	r3, [r7, #4]
1000be76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000be78:	699b      	ldr	r3, [r3, #24]
}
1000be7a:	4618      	mov	r0, r3
1000be7c:	370c      	adds	r7, #12
1000be7e:	46bd      	mov	sp, r7
1000be80:	f85d 7b04 	ldr.w	r7, [sp], #4
1000be84:	4770      	bx	lr

1000be86 <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
1000be86:	b580      	push	{r7, lr}
1000be88:	b082      	sub	sp, #8
1000be8a:	af00      	add	r7, sp, #0
1000be8c:	6078      	str	r0, [r7, #4]
1000be8e:	460b      	mov	r3, r1
1000be90:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
1000be92:	687b      	ldr	r3, [r7, #4]
1000be94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000be96:	6a1b      	ldr	r3, [r3, #32]
1000be98:	685b      	ldr	r3, [r3, #4]
1000be9a:	687a      	ldr	r2, [r7, #4]
1000be9c:	6f92      	ldr	r2, [r2, #120]	; 0x78
1000be9e:	78f9      	ldrb	r1, [r7, #3]
1000bea0:	4610      	mov	r0, r2
1000bea2:	4798      	blx	r3
}
1000bea4:	bf00      	nop
1000bea6:	3708      	adds	r7, #8
1000bea8:	46bd      	mov	sp, r7
1000beaa:	bd80      	pop	{r7, pc}

1000beac <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
1000beac:	b580      	push	{r7, lr}
1000beae:	b082      	sub	sp, #8
1000beb0:	af00      	add	r7, sp, #0
1000beb2:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
1000beb4:	687b      	ldr	r3, [r7, #4]
1000beb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000beb8:	6a1b      	ldr	r3, [r3, #32]
1000beba:	681b      	ldr	r3, [r3, #0]
1000bebc:	687a      	ldr	r2, [r7, #4]
1000bebe:	6f92      	ldr	r2, [r2, #120]	; 0x78
1000bec0:	4610      	mov	r0, r2
1000bec2:	4798      	blx	r3
1000bec4:	4603      	mov	r3, r0
}
1000bec6:	4618      	mov	r0, r3
1000bec8:	3708      	adds	r7, #8
1000beca:	46bd      	mov	sp, r7
1000becc:	bd80      	pop	{r7, pc}

1000bece <rpmsg_virtio_get_features>:

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
1000bece:	b580      	push	{r7, lr}
1000bed0:	b082      	sub	sp, #8
1000bed2:	af00      	add	r7, sp, #0
1000bed4:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
1000bed6:	687b      	ldr	r3, [r7, #4]
1000bed8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000beda:	6a1b      	ldr	r3, [r3, #32]
1000bedc:	689b      	ldr	r3, [r3, #8]
1000bede:	687a      	ldr	r2, [r7, #4]
1000bee0:	6f92      	ldr	r2, [r2, #120]	; 0x78
1000bee2:	4610      	mov	r0, r2
1000bee4:	4798      	blx	r3
1000bee6:	4603      	mov	r3, r0
}
1000bee8:	4618      	mov	r0, r3
1000beea:	3708      	adds	r7, #8
1000beec:	46bd      	mov	sp, r7
1000beee:	bd80      	pop	{r7, pc}

1000bef0 <rpmsg_virtio_create_virtqueues>:
static inline int
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
1000bef0:	b580      	push	{r7, lr}
1000bef2:	b086      	sub	sp, #24
1000bef4:	af02      	add	r7, sp, #8
1000bef6:	60f8      	str	r0, [r7, #12]
1000bef8:	60b9      	str	r1, [r7, #8]
1000befa:	607a      	str	r2, [r7, #4]
1000befc:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
1000befe:	68fb      	ldr	r3, [r7, #12]
1000bf00:	6f98      	ldr	r0, [r3, #120]	; 0x78
1000bf02:	68b9      	ldr	r1, [r7, #8]
1000bf04:	69bb      	ldr	r3, [r7, #24]
1000bf06:	9300      	str	r3, [sp, #0]
1000bf08:	683b      	ldr	r3, [r7, #0]
1000bf0a:	687a      	ldr	r2, [r7, #4]
1000bf0c:	f000 fc2c 	bl	1000c768 <virtio_create_virtqueues>
1000bf10:	4603      	mov	r3, r0
					callbacks);
}
1000bf12:	4618      	mov	r0, r3
1000bf14:	3710      	adds	r7, #16
1000bf16:	46bd      	mov	sp, r7
1000bf18:	bd80      	pop	{r7, pc}
	...

1000bf1c <rpmsg_initialize_ept>:
static inline void rpmsg_initialize_ept(struct rpmsg_endpoint *ept,
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
1000bf1c:	b580      	push	{r7, lr}
1000bf1e:	b084      	sub	sp, #16
1000bf20:	af00      	add	r7, sp, #0
1000bf22:	60f8      	str	r0, [r7, #12]
1000bf24:	60b9      	str	r1, [r7, #8]
1000bf26:	607a      	str	r2, [r7, #4]
1000bf28:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
1000bf2a:	68f8      	ldr	r0, [r7, #12]
1000bf2c:	68bb      	ldr	r3, [r7, #8]
1000bf2e:	2b00      	cmp	r3, #0
1000bf30:	d001      	beq.n	1000bf36 <rpmsg_initialize_ept+0x1a>
1000bf32:	68bb      	ldr	r3, [r7, #8]
1000bf34:	e000      	b.n	1000bf38 <rpmsg_initialize_ept+0x1c>
1000bf36:	4b0a      	ldr	r3, [pc, #40]	; (1000bf60 <rpmsg_initialize_ept+0x44>)
1000bf38:	2220      	movs	r2, #32
1000bf3a:	4619      	mov	r1, r3
1000bf3c:	f001 fafb 	bl	1000d536 <strncpy>
	ept->addr = src;
1000bf40:	68fb      	ldr	r3, [r7, #12]
1000bf42:	687a      	ldr	r2, [r7, #4]
1000bf44:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
1000bf46:	68fb      	ldr	r3, [r7, #12]
1000bf48:	683a      	ldr	r2, [r7, #0]
1000bf4a:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
1000bf4c:	68fb      	ldr	r3, [r7, #12]
1000bf4e:	69ba      	ldr	r2, [r7, #24]
1000bf50:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
1000bf52:	68fb      	ldr	r3, [r7, #12]
1000bf54:	69fa      	ldr	r2, [r7, #28]
1000bf56:	631a      	str	r2, [r3, #48]	; 0x30
}
1000bf58:	bf00      	nop
1000bf5a:	3710      	adds	r7, #16
1000bf5c:	46bd      	mov	sp, r7
1000bf5e:	bd80      	pop	{r7, pc}
1000bf60:	1000e704 	.word	0x1000e704

1000bf64 <rpmsg_get_ept_from_addr>:
void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
1000bf64:	b580      	push	{r7, lr}
1000bf66:	b082      	sub	sp, #8
1000bf68:	af00      	add	r7, sp, #0
1000bf6a:	6078      	str	r0, [r7, #4]
1000bf6c:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
1000bf6e:	f04f 33ff 	mov.w	r3, #4294967295
1000bf72:	683a      	ldr	r2, [r7, #0]
1000bf74:	2100      	movs	r1, #0
1000bf76:	6878      	ldr	r0, [r7, #4]
1000bf78:	f7ff fe49 	bl	1000bc0e <rpmsg_get_endpoint>
1000bf7c:	4603      	mov	r3, r0
}
1000bf7e:	4618      	mov	r0, r3
1000bf80:	3708      	adds	r7, #8
1000bf82:	46bd      	mov	sp, r7
1000bf84:	bd80      	pop	{r7, pc}

1000bf86 <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
1000bf86:	b480      	push	{r7}
1000bf88:	b085      	sub	sp, #20
1000bf8a:	af00      	add	r7, sp, #0
1000bf8c:	60f8      	str	r0, [r7, #12]
1000bf8e:	60b9      	str	r1, [r7, #8]
1000bf90:	607a      	str	r2, [r7, #4]
	if (!shpool)
1000bf92:	68fb      	ldr	r3, [r7, #12]
1000bf94:	2b00      	cmp	r3, #0
1000bf96:	d009      	beq.n	1000bfac <rpmsg_virtio_init_shm_pool+0x26>
		return;
	shpool->base = shb;
1000bf98:	68fb      	ldr	r3, [r7, #12]
1000bf9a:	68ba      	ldr	r2, [r7, #8]
1000bf9c:	601a      	str	r2, [r3, #0]
	shpool->size = size;
1000bf9e:	68fb      	ldr	r3, [r7, #12]
1000bfa0:	687a      	ldr	r2, [r7, #4]
1000bfa2:	609a      	str	r2, [r3, #8]
	shpool->avail = size;
1000bfa4:	68fb      	ldr	r3, [r7, #12]
1000bfa6:	687a      	ldr	r2, [r7, #4]
1000bfa8:	605a      	str	r2, [r3, #4]
1000bfaa:	e000      	b.n	1000bfae <rpmsg_virtio_init_shm_pool+0x28>
		return;
1000bfac:	bf00      	nop
}
1000bfae:	3714      	adds	r7, #20
1000bfb0:	46bd      	mov	sp, r7
1000bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bfb6:	4770      	bx	lr

1000bfb8 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
1000bfb8:	b580      	push	{r7, lr}
1000bfba:	b086      	sub	sp, #24
1000bfbc:	af00      	add	r7, sp, #0
1000bfbe:	60f8      	str	r0, [r7, #12]
1000bfc0:	60b9      	str	r1, [r7, #8]
1000bfc2:	607a      	str	r2, [r7, #4]
1000bfc4:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000bfc6:	68f8      	ldr	r0, [r7, #12]
1000bfc8:	f7ff ff50 	bl	1000be6c <rpmsg_virtio_get_role>
1000bfcc:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000bfce:	697b      	ldr	r3, [r7, #20]
1000bfd0:	2b01      	cmp	r3, #1
1000bfd2:	d106      	bne.n	1000bfe2 <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
1000bfd4:	68fb      	ldr	r3, [r7, #12]
1000bfd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1000bfd8:	8879      	ldrh	r1, [r7, #2]
1000bfda:	687a      	ldr	r2, [r7, #4]
1000bfdc:	4618      	mov	r0, r3
1000bfde:	f000 fd95 	bl	1000cb0c <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
1000bfe2:	bf00      	nop
1000bfe4:	3718      	adds	r7, #24
1000bfe6:	46bd      	mov	sp, r7
1000bfe8:	bd80      	pop	{r7, pc}

1000bfea <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
1000bfea:	b580      	push	{r7, lr}
1000bfec:	b086      	sub	sp, #24
1000bfee:	af00      	add	r7, sp, #0
1000bff0:	60f8      	str	r0, [r7, #12]
1000bff2:	60b9      	str	r1, [r7, #8]
1000bff4:	607a      	str	r2, [r7, #4]
1000bff6:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000bff8:	68f8      	ldr	r0, [r7, #12]
1000bffa:	f7ff ff37 	bl	1000be6c <rpmsg_virtio_get_role>
1000bffe:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000c000:	697b      	ldr	r3, [r7, #20]
1000c002:	2b01      	cmp	r3, #1
1000c004:	d109      	bne.n	1000c01a <rpmsg_virtio_enqueue_buffer+0x30>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
1000c006:	68fb      	ldr	r3, [r7, #12]
1000c008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000c00c:	8879      	ldrh	r1, [r7, #2]
1000c00e:	687a      	ldr	r2, [r7, #4]
1000c010:	4618      	mov	r0, r3
1000c012:	f000 fd7b 	bl	1000cb0c <virtqueue_add_consumed_buffer>
1000c016:	4603      	mov	r3, r0
1000c018:	e000      	b.n	1000c01c <rpmsg_virtio_enqueue_buffer+0x32>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
1000c01a:	2300      	movs	r3, #0
}
1000c01c:	4618      	mov	r0, r3
1000c01e:	3718      	adds	r7, #24
1000c020:	46bd      	mov	sp, r7
1000c022:	bd80      	pop	{r7, pc}

1000c024 <rpmsg_virtio_get_tx_buffer>:
 *
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
1000c024:	b580      	push	{r7, lr}
1000c026:	b086      	sub	sp, #24
1000c028:	af00      	add	r7, sp, #0
1000c02a:	60f8      	str	r0, [r7, #12]
1000c02c:	60b9      	str	r1, [r7, #8]
1000c02e:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000c030:	68f8      	ldr	r0, [r7, #12]
1000c032:	f7ff ff1b 	bl	1000be6c <rpmsg_virtio_get_role>
1000c036:	6138      	str	r0, [r7, #16]
	void *data = NULL;
1000c038:	2300      	movs	r3, #0
1000c03a:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000c03c:	693b      	ldr	r3, [r7, #16]
1000c03e:	2b01      	cmp	r3, #1
1000c040:	d108      	bne.n	1000c054 <rpmsg_virtio_get_tx_buffer+0x30>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
1000c042:	68fb      	ldr	r3, [r7, #12]
1000c044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000c048:	68ba      	ldr	r2, [r7, #8]
1000c04a:	6879      	ldr	r1, [r7, #4]
1000c04c:	4618      	mov	r0, r3
1000c04e:	f000 fd15 	bl	1000ca7c <virtqueue_get_available_buffer>
1000c052:	6178      	str	r0, [r7, #20]
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
1000c054:	697b      	ldr	r3, [r7, #20]
}
1000c056:	4618      	mov	r0, r3
1000c058:	3718      	adds	r7, #24
1000c05a:	46bd      	mov	sp, r7
1000c05c:	bd80      	pop	{r7, pc}

1000c05e <rpmsg_virtio_get_rx_buffer>:
 * @return - pointer to received buffer
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
1000c05e:	b580      	push	{r7, lr}
1000c060:	b086      	sub	sp, #24
1000c062:	af00      	add	r7, sp, #0
1000c064:	60f8      	str	r0, [r7, #12]
1000c066:	60b9      	str	r1, [r7, #8]
1000c068:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000c06a:	68f8      	ldr	r0, [r7, #12]
1000c06c:	f7ff fefe 	bl	1000be6c <rpmsg_virtio_get_role>
1000c070:	6138      	str	r0, [r7, #16]
	void *data = NULL;
1000c072:	2300      	movs	r3, #0
1000c074:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000c076:	693b      	ldr	r3, [r7, #16]
1000c078:	2b01      	cmp	r3, #1
1000c07a:	d107      	bne.n	1000c08c <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
1000c07c:	68fb      	ldr	r3, [r7, #12]
1000c07e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1000c080:	68ba      	ldr	r2, [r7, #8]
1000c082:	6879      	ldr	r1, [r7, #4]
1000c084:	4618      	mov	r0, r3
1000c086:	f000 fcf9 	bl	1000ca7c <virtqueue_get_available_buffer>
1000c08a:	6178      	str	r0, [r7, #20]
#ifdef VIRTIO_CACHED_BUFFERS
	/* Invalidate the buffer before returning it */
	metal_cache_invalidate(data, *len);
#endif /* VIRTIO_CACHED_BUFFERS */

	return data;
1000c08c:	697b      	ldr	r3, [r7, #20]
}
1000c08e:	4618      	mov	r0, r3
1000c090:	3718      	adds	r7, #24
1000c092:	46bd      	mov	sp, r7
1000c094:	bd80      	pop	{r7, pc}

1000c096 <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
1000c096:	b580      	push	{r7, lr}
1000c098:	b084      	sub	sp, #16
1000c09a:	af00      	add	r7, sp, #0
1000c09c:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
1000c09e:	6878      	ldr	r0, [r7, #4]
1000c0a0:	f7ff ff04 	bl	1000beac <rpmsg_virtio_get_status>
1000c0a4:	4603      	mov	r3, r0
1000c0a6:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
1000c0a8:	7bfb      	ldrb	r3, [r7, #15]
1000c0aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
1000c0ae:	2b00      	cmp	r3, #0
1000c0b0:	d004      	beq.n	1000c0bc <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
1000c0b2:	2100      	movs	r1, #0
1000c0b4:	6878      	ldr	r0, [r7, #4]
1000c0b6:	f7ff fee6 	bl	1000be86 <rpmsg_virtio_set_status>
1000c0ba:	e7f0      	b.n	1000c09e <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
1000c0bc:	7bfb      	ldrb	r3, [r7, #15]
1000c0be:	f003 0304 	and.w	r3, r3, #4
1000c0c2:	2b00      	cmp	r3, #0
1000c0c4:	d0eb      	beq.n	1000c09e <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
1000c0c6:	2301      	movs	r3, #1
		}
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}
}
1000c0c8:	4618      	mov	r0, r3
1000c0ca:	3710      	adds	r7, #16
1000c0cc:	46bd      	mov	sp, r7
1000c0ce:	bd80      	pop	{r7, pc}

1000c0d0 <rpmsg_virtio_hold_rx_buffer>:

	return length;
}

static void rpmsg_virtio_hold_rx_buffer(struct rpmsg_device *rdev, void *rxbuf)
{
1000c0d0:	b480      	push	{r7}
1000c0d2:	b085      	sub	sp, #20
1000c0d4:	af00      	add	r7, sp, #0
1000c0d6:	6078      	str	r0, [r7, #4]
1000c0d8:	6039      	str	r1, [r7, #0]
	struct rpmsg_hdr *rp_hdr;

	(void)rdev;

	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
1000c0da:	683b      	ldr	r3, [r7, #0]
1000c0dc:	3b10      	subs	r3, #16
1000c0de:	60fb      	str	r3, [r7, #12]

	/* Set held status to keep buffer */
	rp_hdr->reserved |= RPMSG_BUF_HELD;
1000c0e0:	68fb      	ldr	r3, [r7, #12]
1000c0e2:	689b      	ldr	r3, [r3, #8]
1000c0e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
1000c0e8:	68fb      	ldr	r3, [r7, #12]
1000c0ea:	609a      	str	r2, [r3, #8]
}
1000c0ec:	bf00      	nop
1000c0ee:	3714      	adds	r7, #20
1000c0f0:	46bd      	mov	sp, r7
1000c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c0f6:	4770      	bx	lr

1000c0f8 <rpmsg_virtio_release_rx_buffer>:

static void rpmsg_virtio_release_rx_buffer(struct rpmsg_device *rdev,
					   void *rxbuf)
{
1000c0f8:	b580      	push	{r7, lr}
1000c0fa:	b086      	sub	sp, #24
1000c0fc:	af00      	add	r7, sp, #0
1000c0fe:	6078      	str	r0, [r7, #4]
1000c100:	6039      	str	r1, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr *rp_hdr;
	uint16_t idx;
	uint32_t len;

	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000c102:	687b      	ldr	r3, [r7, #4]
1000c104:	617b      	str	r3, [r7, #20]
	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
1000c106:	683b      	ldr	r3, [r7, #0]
1000c108:	3b10      	subs	r3, #16
1000c10a:	613b      	str	r3, [r7, #16]
	/* The reserved field contains buffer index */
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
1000c10c:	693b      	ldr	r3, [r7, #16]
1000c10e:	689b      	ldr	r3, [r3, #8]
1000c110:	81fb      	strh	r3, [r7, #14]

	metal_mutex_acquire(&rdev->lock);
1000c112:	687b      	ldr	r3, [r7, #4]
1000c114:	3358      	adds	r3, #88	; 0x58
1000c116:	4618      	mov	r0, r3
1000c118:	f7ff fe92 	bl	1000be40 <metal_mutex_acquire>
	/* Return buffer on virtqueue. */
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
1000c11c:	697b      	ldr	r3, [r7, #20]
1000c11e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1000c120:	89fa      	ldrh	r2, [r7, #14]
1000c122:	4611      	mov	r1, r2
1000c124:	4618      	mov	r0, r3
1000c126:	f000 fc97 	bl	1000ca58 <virtqueue_get_buffer_length>
1000c12a:	60b8      	str	r0, [r7, #8]
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
1000c12c:	89fb      	ldrh	r3, [r7, #14]
1000c12e:	68ba      	ldr	r2, [r7, #8]
1000c130:	6939      	ldr	r1, [r7, #16]
1000c132:	6978      	ldr	r0, [r7, #20]
1000c134:	f7ff ff40 	bl	1000bfb8 <rpmsg_virtio_return_buffer>
	metal_mutex_release(&rdev->lock);
1000c138:	687b      	ldr	r3, [r7, #4]
1000c13a:	3358      	adds	r3, #88	; 0x58
1000c13c:	4618      	mov	r0, r3
1000c13e:	f7ff fe8a 	bl	1000be56 <metal_mutex_release>
}
1000c142:	bf00      	nop
1000c144:	3718      	adds	r7, #24
1000c146:	46bd      	mov	sp, r7
1000c148:	bd80      	pop	{r7, pc}

1000c14a <rpmsg_virtio_get_tx_payload_buffer>:

static void *rpmsg_virtio_get_tx_payload_buffer(struct rpmsg_device *rdev,
						uint32_t *len, int wait)
{
1000c14a:	b580      	push	{r7, lr}
1000c14c:	b08a      	sub	sp, #40	; 0x28
1000c14e:	af00      	add	r7, sp, #0
1000c150:	60f8      	str	r0, [r7, #12]
1000c152:	60b9      	str	r1, [r7, #8]
1000c154:	607a      	str	r2, [r7, #4]
	uint16_t idx;
	int tick_count;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000c156:	68fb      	ldr	r3, [r7, #12]
1000c158:	623b      	str	r3, [r7, #32]

	/* Validate device state */
	status = rpmsg_virtio_get_status(rvdev);
1000c15a:	6a38      	ldr	r0, [r7, #32]
1000c15c:	f7ff fea6 	bl	1000beac <rpmsg_virtio_get_status>
1000c160:	4603      	mov	r3, r0
1000c162:	61fb      	str	r3, [r7, #28]
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
1000c164:	69fb      	ldr	r3, [r7, #28]
1000c166:	f003 0304 	and.w	r3, r3, #4
1000c16a:	2b00      	cmp	r3, #0
1000c16c:	d101      	bne.n	1000c172 <rpmsg_virtio_get_tx_payload_buffer+0x28>
		return NULL;
1000c16e:	2300      	movs	r3, #0
1000c170:	e039      	b.n	1000c1e6 <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	if (wait)
1000c172:	687b      	ldr	r3, [r7, #4]
1000c174:	2b00      	cmp	r3, #0
1000c176:	d003      	beq.n	1000c180 <rpmsg_virtio_get_tx_payload_buffer+0x36>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
1000c178:	f643 2398 	movw	r3, #15000	; 0x3a98
1000c17c:	627b      	str	r3, [r7, #36]	; 0x24
1000c17e:	e001      	b.n	1000c184 <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	else
		tick_count = 0;
1000c180:	2300      	movs	r3, #0
1000c182:	627b      	str	r3, [r7, #36]	; 0x24

	while (1) {
		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
1000c184:	68fb      	ldr	r3, [r7, #12]
1000c186:	3358      	adds	r3, #88	; 0x58
1000c188:	4618      	mov	r0, r3
1000c18a:	f7ff fe59 	bl	1000be40 <metal_mutex_acquire>
		rp_hdr = rpmsg_virtio_get_tx_buffer(rvdev, len, &idx);
1000c18e:	f107 0316 	add.w	r3, r7, #22
1000c192:	461a      	mov	r2, r3
1000c194:	68b9      	ldr	r1, [r7, #8]
1000c196:	6a38      	ldr	r0, [r7, #32]
1000c198:	f7ff ff44 	bl	1000c024 <rpmsg_virtio_get_tx_buffer>
1000c19c:	61b8      	str	r0, [r7, #24]
		metal_mutex_release(&rdev->lock);
1000c19e:	68fb      	ldr	r3, [r7, #12]
1000c1a0:	3358      	adds	r3, #88	; 0x58
1000c1a2:	4618      	mov	r0, r3
1000c1a4:	f7ff fe57 	bl	1000be56 <metal_mutex_release>
		if (rp_hdr || !tick_count)
1000c1a8:	69bb      	ldr	r3, [r7, #24]
1000c1aa:	2b00      	cmp	r3, #0
1000c1ac:	d10a      	bne.n	1000c1c4 <rpmsg_virtio_get_tx_payload_buffer+0x7a>
1000c1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c1b0:	2b00      	cmp	r3, #0
1000c1b2:	d007      	beq.n	1000c1c4 <rpmsg_virtio_get_tx_payload_buffer+0x7a>
			break;
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
1000c1b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1000c1b8:	f7ff fda7 	bl	1000bd0a <metal_sleep_usec>
		tick_count--;
1000c1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c1be:	3b01      	subs	r3, #1
1000c1c0:	627b      	str	r3, [r7, #36]	; 0x24
		metal_mutex_acquire(&rdev->lock);
1000c1c2:	e7df      	b.n	1000c184 <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	}

	if (!rp_hdr)
1000c1c4:	69bb      	ldr	r3, [r7, #24]
1000c1c6:	2b00      	cmp	r3, #0
1000c1c8:	d101      	bne.n	1000c1ce <rpmsg_virtio_get_tx_payload_buffer+0x84>
		return NULL;
1000c1ca:	2300      	movs	r3, #0
1000c1cc:	e00b      	b.n	1000c1e6 <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	/* Store the index into the reserved field to be used when sending */
	rp_hdr->reserved = idx;
1000c1ce:	8afb      	ldrh	r3, [r7, #22]
1000c1d0:	461a      	mov	r2, r3
1000c1d2:	69bb      	ldr	r3, [r7, #24]
1000c1d4:	609a      	str	r2, [r3, #8]

	/* Actual data buffer size is vring buffer size minus header length */
	*len -= sizeof(struct rpmsg_hdr);
1000c1d6:	68bb      	ldr	r3, [r7, #8]
1000c1d8:	681b      	ldr	r3, [r3, #0]
1000c1da:	f1a3 0210 	sub.w	r2, r3, #16
1000c1de:	68bb      	ldr	r3, [r7, #8]
1000c1e0:	601a      	str	r2, [r3, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
1000c1e2:	69bb      	ldr	r3, [r7, #24]
1000c1e4:	3310      	adds	r3, #16
}
1000c1e6:	4618      	mov	r0, r3
1000c1e8:	3728      	adds	r7, #40	; 0x28
1000c1ea:	46bd      	mov	sp, r7
1000c1ec:	bd80      	pop	{r7, pc}
	...

1000c1f0 <rpmsg_virtio_send_offchannel_nocopy>:

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
1000c1f0:	b580      	push	{r7, lr}
1000c1f2:	b08e      	sub	sp, #56	; 0x38
1000c1f4:	af00      	add	r7, sp, #0
1000c1f6:	60f8      	str	r0, [r7, #12]
1000c1f8:	60b9      	str	r1, [r7, #8]
1000c1fa:	607a      	str	r2, [r7, #4]
1000c1fc:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	uint16_t idx;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000c1fe:	68fb      	ldr	r3, [r7, #12]
1000c200:	637b      	str	r3, [r7, #52]	; 0x34

	hdr = RPMSG_LOCATE_HDR(data);
1000c202:	683b      	ldr	r3, [r7, #0]
1000c204:	3b10      	subs	r3, #16
1000c206:	633b      	str	r3, [r7, #48]	; 0x30
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
1000c208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c20a:	689b      	ldr	r3, [r3, #8]
1000c20c:	85fb      	strh	r3, [r7, #46]	; 0x2e

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
1000c20e:	687b      	ldr	r3, [r7, #4]
1000c210:	617b      	str	r3, [r7, #20]
	rp_hdr.src = src;
1000c212:	68bb      	ldr	r3, [r7, #8]
1000c214:	613b      	str	r3, [r7, #16]
	rp_hdr.len = len;
1000c216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000c218:	b29b      	uxth	r3, r3
1000c21a:	83bb      	strh	r3, [r7, #28]
	rp_hdr.reserved = 0;
1000c21c:	2300      	movs	r3, #0
1000c21e:	61bb      	str	r3, [r7, #24]
	rp_hdr.flags = 0;
1000c220:	2300      	movs	r3, #0
1000c222:	83fb      	strh	r3, [r7, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
1000c224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000c226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
1000c22a:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
1000c22c:	6b39      	ldr	r1, [r7, #48]	; 0x30
1000c22e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1000c230:	f7ff fd87 	bl	1000bd42 <metal_io_virt_to_offset>
1000c234:	4601      	mov	r1, r0
1000c236:	f107 0210 	add.w	r2, r7, #16
1000c23a:	2310      	movs	r3, #16
1000c23c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1000c23e:	f7ff f98b 	bl	1000b558 <metal_io_block_write>
1000c242:	6278      	str	r0, [r7, #36]	; 0x24
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
1000c244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c246:	2b10      	cmp	r3, #16
1000c248:	d006      	beq.n	1000c258 <rpmsg_virtio_send_offchannel_nocopy+0x68>
1000c24a:	4b1b      	ldr	r3, [pc, #108]	; (1000c2b8 <rpmsg_virtio_send_offchannel_nocopy+0xc8>)
1000c24c:	4a1b      	ldr	r2, [pc, #108]	; (1000c2bc <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
1000c24e:	f240 117d 	movw	r1, #381	; 0x17d
1000c252:	481b      	ldr	r0, [pc, #108]	; (1000c2c0 <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
1000c254:	f000 ff44 	bl	1000d0e0 <__assert_func>

	metal_mutex_acquire(&rdev->lock);
1000c258:	68fb      	ldr	r3, [r7, #12]
1000c25a:	3358      	adds	r3, #88	; 0x58
1000c25c:	4618      	mov	r0, r3
1000c25e:	f7ff fdef 	bl	1000be40 <metal_mutex_acquire>
#ifndef VIRTIO_SLAVE_ONLY
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_MASTER)
		buff_len = RPMSG_BUFFER_SIZE;
	else
#endif /*!VIRTIO_SLAVE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
1000c262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000c264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000c268:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
1000c26a:	4611      	mov	r1, r2
1000c26c:	4618      	mov	r0, r3
1000c26e:	f000 fbf3 	bl	1000ca58 <virtqueue_get_buffer_length>
1000c272:	6238      	str	r0, [r7, #32]

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
1000c274:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
1000c276:	6a3a      	ldr	r2, [r7, #32]
1000c278:	6b39      	ldr	r1, [r7, #48]	; 0x30
1000c27a:	6b78      	ldr	r0, [r7, #52]	; 0x34
1000c27c:	f7ff feb5 	bl	1000bfea <rpmsg_virtio_enqueue_buffer>
1000c280:	6278      	str	r0, [r7, #36]	; 0x24
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
1000c282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c284:	2b00      	cmp	r3, #0
1000c286:	d006      	beq.n	1000c296 <rpmsg_virtio_send_offchannel_nocopy+0xa6>
1000c288:	4b0e      	ldr	r3, [pc, #56]	; (1000c2c4 <rpmsg_virtio_send_offchannel_nocopy+0xd4>)
1000c28a:	4a0c      	ldr	r2, [pc, #48]	; (1000c2bc <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
1000c28c:	f44f 71c5 	mov.w	r1, #394	; 0x18a
1000c290:	480b      	ldr	r0, [pc, #44]	; (1000c2c0 <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
1000c292:	f000 ff25 	bl	1000d0e0 <__assert_func>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
1000c296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000c298:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000c29c:	4618      	mov	r0, r3
1000c29e:	f000 fcaf 	bl	1000cc00 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
1000c2a2:	68fb      	ldr	r3, [r7, #12]
1000c2a4:	3358      	adds	r3, #88	; 0x58
1000c2a6:	4618      	mov	r0, r3
1000c2a8:	f7ff fdd5 	bl	1000be56 <metal_mutex_release>

	return len;
1000c2ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
1000c2ae:	4618      	mov	r0, r3
1000c2b0:	3738      	adds	r7, #56	; 0x38
1000c2b2:	46bd      	mov	sp, r7
1000c2b4:	bd80      	pop	{r7, pc}
1000c2b6:	bf00      	nop
1000c2b8:	1000e708 	.word	0x1000e708
1000c2bc:	1000e85c 	.word	0x1000e85c
1000c2c0:	1000e724 	.word	0x1000e724
1000c2c4:	1000e7a8 	.word	0x1000e7a8

1000c2c8 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
1000c2c8:	b580      	push	{r7, lr}
1000c2ca:	b08c      	sub	sp, #48	; 0x30
1000c2cc:	af02      	add	r7, sp, #8
1000c2ce:	60f8      	str	r0, [r7, #12]
1000c2d0:	60b9      	str	r1, [r7, #8]
1000c2d2:	607a      	str	r2, [r7, #4]
1000c2d4:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	void *buffer;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000c2d6:	68fb      	ldr	r3, [r7, #12]
1000c2d8:	627b      	str	r3, [r7, #36]	; 0x24

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
1000c2da:	f107 0314 	add.w	r3, r7, #20
1000c2de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000c2e0:	4619      	mov	r1, r3
1000c2e2:	68f8      	ldr	r0, [r7, #12]
1000c2e4:	f7ff ff31 	bl	1000c14a <rpmsg_virtio_get_tx_payload_buffer>
1000c2e8:	6238      	str	r0, [r7, #32]
	if (!buffer)
1000c2ea:	6a3b      	ldr	r3, [r7, #32]
1000c2ec:	2b00      	cmp	r3, #0
1000c2ee:	d101      	bne.n	1000c2f4 <rpmsg_virtio_send_offchannel_raw+0x2c>
		return RPMSG_ERR_NO_BUFF;
1000c2f0:	4b17      	ldr	r3, [pc, #92]	; (1000c350 <rpmsg_virtio_send_offchannel_raw+0x88>)
1000c2f2:	e029      	b.n	1000c348 <rpmsg_virtio_send_offchannel_raw+0x80>

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
1000c2f4:	697b      	ldr	r3, [r7, #20]
1000c2f6:	461a      	mov	r2, r3
1000c2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c2fa:	4293      	cmp	r3, r2
1000c2fc:	dd01      	ble.n	1000c302 <rpmsg_virtio_send_offchannel_raw+0x3a>
		len = buff_len;
1000c2fe:	697b      	ldr	r3, [r7, #20]
1000c300:	633b      	str	r3, [r7, #48]	; 0x30
	io = rvdev->shbuf_io;
1000c302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
1000c308:	61fb      	str	r3, [r7, #28]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
1000c30a:	6a39      	ldr	r1, [r7, #32]
1000c30c:	69f8      	ldr	r0, [r7, #28]
1000c30e:	f7ff fd18 	bl	1000bd42 <metal_io_virt_to_offset>
1000c312:	4601      	mov	r1, r0
1000c314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c316:	683a      	ldr	r2, [r7, #0]
1000c318:	69f8      	ldr	r0, [r7, #28]
1000c31a:	f7ff f91d 	bl	1000b558 <metal_io_block_write>
1000c31e:	61b8      	str	r0, [r7, #24]
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
1000c320:	69ba      	ldr	r2, [r7, #24]
1000c322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c324:	429a      	cmp	r2, r3
1000c326:	d006      	beq.n	1000c336 <rpmsg_virtio_send_offchannel_raw+0x6e>
1000c328:	4b0a      	ldr	r3, [pc, #40]	; (1000c354 <rpmsg_virtio_send_offchannel_raw+0x8c>)
1000c32a:	4a0b      	ldr	r2, [pc, #44]	; (1000c358 <rpmsg_virtio_send_offchannel_raw+0x90>)
1000c32c:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
1000c330:	480a      	ldr	r0, [pc, #40]	; (1000c35c <rpmsg_virtio_send_offchannel_raw+0x94>)
1000c332:	f000 fed5 	bl	1000d0e0 <__assert_func>

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
1000c336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c338:	9300      	str	r3, [sp, #0]
1000c33a:	6a3b      	ldr	r3, [r7, #32]
1000c33c:	687a      	ldr	r2, [r7, #4]
1000c33e:	68b9      	ldr	r1, [r7, #8]
1000c340:	68f8      	ldr	r0, [r7, #12]
1000c342:	f7ff ff55 	bl	1000c1f0 <rpmsg_virtio_send_offchannel_nocopy>
1000c346:	4603      	mov	r3, r0
}
1000c348:	4618      	mov	r0, r3
1000c34a:	3728      	adds	r7, #40	; 0x28
1000c34c:	46bd      	mov	sp, r7
1000c34e:	bd80      	pop	{r7, pc}
1000c350:	fffff82e 	.word	0xfffff82e
1000c354:	1000e7b4 	.word	0x1000e7b4
1000c358:	1000e880 	.word	0x1000e880
1000c35c:	1000e724 	.word	0x1000e724

1000c360 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
1000c360:	b480      	push	{r7}
1000c362:	b083      	sub	sp, #12
1000c364:	af00      	add	r7, sp, #0
1000c366:	6078      	str	r0, [r7, #4]
	(void)vq;
}
1000c368:	bf00      	nop
1000c36a:	370c      	adds	r7, #12
1000c36c:	46bd      	mov	sp, r7
1000c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c372:	4770      	bx	lr

1000c374 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
1000c374:	b590      	push	{r4, r7, lr}
1000c376:	b08d      	sub	sp, #52	; 0x34
1000c378:	af02      	add	r7, sp, #8
1000c37a:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
1000c37c:	687b      	ldr	r3, [r7, #4]
1000c37e:	681b      	ldr	r3, [r3, #0]
1000c380:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
1000c382:	6a3b      	ldr	r3, [r7, #32]
1000c384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000c386:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
1000c388:	69fb      	ldr	r3, [r7, #28]
1000c38a:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
1000c38c:	69bb      	ldr	r3, [r7, #24]
1000c38e:	3358      	adds	r3, #88	; 0x58
1000c390:	4618      	mov	r0, r3
1000c392:	f7ff fd55 	bl	1000be40 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
1000c396:	f107 020a 	add.w	r2, r7, #10
1000c39a:	f107 030c 	add.w	r3, r7, #12
1000c39e:	4619      	mov	r1, r3
1000c3a0:	69f8      	ldr	r0, [r7, #28]
1000c3a2:	f7ff fe5c 	bl	1000c05e <rpmsg_virtio_get_rx_buffer>
1000c3a6:	6278      	str	r0, [r7, #36]	; 0x24

	metal_mutex_release(&rdev->lock);
1000c3a8:	69bb      	ldr	r3, [r7, #24]
1000c3aa:	3358      	adds	r3, #88	; 0x58
1000c3ac:	4618      	mov	r0, r3
1000c3ae:	f7ff fd52 	bl	1000be56 <metal_mutex_release>

	while (rp_hdr) {
1000c3b2:	e062      	b.n	1000c47a <rpmsg_virtio_rx_callback+0x106>
		rp_hdr->reserved = idx;
1000c3b4:	897b      	ldrh	r3, [r7, #10]
1000c3b6:	461a      	mov	r2, r3
1000c3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c3ba:	609a      	str	r2, [r3, #8]

		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
1000c3bc:	69bb      	ldr	r3, [r7, #24]
1000c3be:	3358      	adds	r3, #88	; 0x58
1000c3c0:	4618      	mov	r0, r3
1000c3c2:	f7ff fd3d 	bl	1000be40 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
1000c3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c3c8:	685b      	ldr	r3, [r3, #4]
1000c3ca:	4619      	mov	r1, r3
1000c3cc:	69b8      	ldr	r0, [r7, #24]
1000c3ce:	f7ff fdc9 	bl	1000bf64 <rpmsg_get_ept_from_addr>
1000c3d2:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
1000c3d4:	69bb      	ldr	r3, [r7, #24]
1000c3d6:	3358      	adds	r3, #88	; 0x58
1000c3d8:	4618      	mov	r0, r3
1000c3da:	f7ff fd3c 	bl	1000be56 <metal_mutex_release>

		if (ept) {
1000c3de:	697b      	ldr	r3, [r7, #20]
1000c3e0:	2b00      	cmp	r3, #0
1000c3e2:	d025      	beq.n	1000c430 <rpmsg_virtio_rx_callback+0xbc>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
1000c3e4:	697b      	ldr	r3, [r7, #20]
1000c3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000c3e8:	f1b3 3fff 	cmp.w	r3, #4294967295
1000c3ec:	d103      	bne.n	1000c3f6 <rpmsg_virtio_rx_callback+0x82>
				/*
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
1000c3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c3f0:	681a      	ldr	r2, [r3, #0]
1000c3f2:	697b      	ldr	r3, [r7, #20]
1000c3f4:	629a      	str	r2, [r3, #40]	; 0x28
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
1000c3f6:	697b      	ldr	r3, [r7, #20]
1000c3f8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
1000c3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c3fc:	f103 0110 	add.w	r1, r3, #16
					 rp_hdr->len, rp_hdr->src, ept->priv);
1000c400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c402:	899b      	ldrh	r3, [r3, #12]
1000c404:	b29b      	uxth	r3, r3
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
1000c406:	4618      	mov	r0, r3
1000c408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c40a:	681a      	ldr	r2, [r3, #0]
1000c40c:	697b      	ldr	r3, [r7, #20]
1000c40e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000c410:	9300      	str	r3, [sp, #0]
1000c412:	4613      	mov	r3, r2
1000c414:	4602      	mov	r2, r0
1000c416:	6978      	ldr	r0, [r7, #20]
1000c418:	47a0      	blx	r4
1000c41a:	6138      	str	r0, [r7, #16]

			RPMSG_ASSERT(status >= 0,
1000c41c:	693b      	ldr	r3, [r7, #16]
1000c41e:	2b00      	cmp	r3, #0
1000c420:	da06      	bge.n	1000c430 <rpmsg_virtio_rx_callback+0xbc>
1000c422:	4b1a      	ldr	r3, [pc, #104]	; (1000c48c <rpmsg_virtio_rx_callback+0x118>)
1000c424:	4a1a      	ldr	r2, [pc, #104]	; (1000c490 <rpmsg_virtio_rx_callback+0x11c>)
1000c426:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
1000c42a:	481a      	ldr	r0, [pc, #104]	; (1000c494 <rpmsg_virtio_rx_callback+0x120>)
1000c42c:	f000 fe58 	bl	1000d0e0 <__assert_func>
				     "unexpected callback status\r\n");
		}

		metal_mutex_acquire(&rdev->lock);
1000c430:	69bb      	ldr	r3, [r7, #24]
1000c432:	3358      	adds	r3, #88	; 0x58
1000c434:	4618      	mov	r0, r3
1000c436:	f7ff fd03 	bl	1000be40 <metal_mutex_acquire>

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
1000c43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c43c:	689b      	ldr	r3, [r3, #8]
1000c43e:	2b00      	cmp	r3, #0
1000c440:	db05      	blt.n	1000c44e <rpmsg_virtio_rx_callback+0xda>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
1000c442:	68fa      	ldr	r2, [r7, #12]
1000c444:	897b      	ldrh	r3, [r7, #10]
1000c446:	6a79      	ldr	r1, [r7, #36]	; 0x24
1000c448:	69f8      	ldr	r0, [r7, #28]
1000c44a:	f7ff fdb5 	bl	1000bfb8 <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
1000c44e:	f107 020a 	add.w	r2, r7, #10
1000c452:	f107 030c 	add.w	r3, r7, #12
1000c456:	4619      	mov	r1, r3
1000c458:	69f8      	ldr	r0, [r7, #28]
1000c45a:	f7ff fe00 	bl	1000c05e <rpmsg_virtio_get_rx_buffer>
1000c45e:	6278      	str	r0, [r7, #36]	; 0x24
		if (!rp_hdr) {
1000c460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c462:	2b00      	cmp	r3, #0
1000c464:	d104      	bne.n	1000c470 <rpmsg_virtio_rx_callback+0xfc>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
1000c466:	69fb      	ldr	r3, [r7, #28]
1000c468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1000c46a:	4618      	mov	r0, r3
1000c46c:	f000 fbc8 	bl	1000cc00 <virtqueue_kick>
		}
		metal_mutex_release(&rdev->lock);
1000c470:	69bb      	ldr	r3, [r7, #24]
1000c472:	3358      	adds	r3, #88	; 0x58
1000c474:	4618      	mov	r0, r3
1000c476:	f7ff fcee 	bl	1000be56 <metal_mutex_release>
	while (rp_hdr) {
1000c47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c47c:	2b00      	cmp	r3, #0
1000c47e:	d199      	bne.n	1000c3b4 <rpmsg_virtio_rx_callback+0x40>
	}
}
1000c480:	bf00      	nop
1000c482:	bf00      	nop
1000c484:	372c      	adds	r7, #44	; 0x2c
1000c486:	46bd      	mov	sp, r7
1000c488:	bd90      	pop	{r4, r7, pc}
1000c48a:	bf00      	nop
1000c48c:	1000e7c4 	.word	0x1000e7c4
1000c490:	1000e8a4 	.word	0x1000e8a4
1000c494:	1000e724 	.word	0x1000e724

1000c498 <rpmsg_virtio_ns_callback>:
 *
 * @return - rpmag endpoint callback handled
 */
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
1000c498:	b580      	push	{r7, lr}
1000c49a:	b092      	sub	sp, #72	; 0x48
1000c49c:	af00      	add	r7, sp, #0
1000c49e:	60f8      	str	r0, [r7, #12]
1000c4a0:	60b9      	str	r1, [r7, #8]
1000c4a2:	607a      	str	r2, [r7, #4]
1000c4a4:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
1000c4a6:	68fb      	ldr	r3, [r7, #12]
1000c4a8:	6a1b      	ldr	r3, [r3, #32]
1000c4aa:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
1000c4ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000c4ae:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
1000c4b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000c4b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
1000c4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = data;
1000c4b8:	68bb      	ldr	r3, [r7, #8]
1000c4ba:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
1000c4bc:	687b      	ldr	r3, [r7, #4]
1000c4be:	2b28      	cmp	r3, #40	; 0x28
1000c4c0:	d001      	beq.n	1000c4c6 <rpmsg_virtio_ns_callback+0x2e>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
1000c4c2:	2300      	movs	r3, #0
1000c4c4:	e057      	b.n	1000c576 <rpmsg_virtio_ns_callback+0xde>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
1000c4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
1000c4c8:	4619      	mov	r1, r3
1000c4ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
1000c4cc:	f7ff fc39 	bl	1000bd42 <metal_io_virt_to_offset>
1000c4d0:	4601      	mov	r1, r0
1000c4d2:	f107 0210 	add.w	r2, r7, #16
1000c4d6:	2320      	movs	r3, #32
1000c4d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
1000c4da:	f7fe ffc8 	bl	1000b46e <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
1000c4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000c4e0:	6a1b      	ldr	r3, [r3, #32]
1000c4e2:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
1000c4e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000c4e6:	3358      	adds	r3, #88	; 0x58
1000c4e8:	4618      	mov	r0, r3
1000c4ea:	f7ff fca9 	bl	1000be40 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
1000c4ee:	f107 0110 	add.w	r1, r7, #16
1000c4f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000c4f4:	f04f 32ff 	mov.w	r2, #4294967295
1000c4f8:	6c78      	ldr	r0, [r7, #68]	; 0x44
1000c4fa:	f7ff fb88 	bl	1000bc0e <rpmsg_get_endpoint>
1000c4fe:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
1000c500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000c502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000c504:	f003 0301 	and.w	r3, r3, #1
1000c508:	2b00      	cmp	r3, #0
1000c50a:	d017      	beq.n	1000c53c <rpmsg_virtio_ns_callback+0xa4>
		if (_ept)
1000c50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c50e:	2b00      	cmp	r3, #0
1000c510:	d003      	beq.n	1000c51a <rpmsg_virtio_ns_callback+0x82>
			_ept->dest_addr = RPMSG_ADDR_ANY;
1000c512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c514:	f04f 32ff 	mov.w	r2, #4294967295
1000c518:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
1000c51a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000c51c:	3358      	adds	r3, #88	; 0x58
1000c51e:	4618      	mov	r0, r3
1000c520:	f7ff fc99 	bl	1000be56 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
1000c524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c526:	2b00      	cmp	r3, #0
1000c528:	d024      	beq.n	1000c574 <rpmsg_virtio_ns_callback+0xdc>
1000c52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c52c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000c52e:	2b00      	cmp	r3, #0
1000c530:	d020      	beq.n	1000c574 <rpmsg_virtio_ns_callback+0xdc>
			_ept->ns_unbind_cb(_ept);
1000c532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000c536:	6b38      	ldr	r0, [r7, #48]	; 0x30
1000c538:	4798      	blx	r3
1000c53a:	e01b      	b.n	1000c574 <rpmsg_virtio_ns_callback+0xdc>
	} else {
		if (!_ept) {
1000c53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c53e:	2b00      	cmp	r3, #0
1000c540:	d110      	bne.n	1000c564 <rpmsg_virtio_ns_callback+0xcc>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
1000c542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000c544:	3358      	adds	r3, #88	; 0x58
1000c546:	4618      	mov	r0, r3
1000c548:	f7ff fc85 	bl	1000be56 <metal_mutex_release>
			if (rdev->ns_bind_cb)
1000c54c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000c54e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
1000c550:	2b00      	cmp	r3, #0
1000c552:	d00f      	beq.n	1000c574 <rpmsg_virtio_ns_callback+0xdc>
				rdev->ns_bind_cb(rdev, name, dest);
1000c554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000c556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
1000c558:	f107 0110 	add.w	r1, r7, #16
1000c55c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000c55e:	6c78      	ldr	r0, [r7, #68]	; 0x44
1000c560:	4798      	blx	r3
1000c562:	e007      	b.n	1000c574 <rpmsg_virtio_ns_callback+0xdc>
		} else {
			_ept->dest_addr = dest;
1000c564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000c568:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
1000c56a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000c56c:	3358      	adds	r3, #88	; 0x58
1000c56e:	4618      	mov	r0, r3
1000c570:	f7ff fc71 	bl	1000be56 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
1000c574:	2300      	movs	r3, #0
}
1000c576:	4618      	mov	r0, r3
1000c578:	3748      	adds	r7, #72	; 0x48
1000c57a:	46bd      	mov	sp, r7
1000c57c:	bd80      	pop	{r7, pc}
	...

1000c580 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
1000c580:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
1000c584:	b090      	sub	sp, #64	; 0x40
1000c586:	af02      	add	r7, sp, #8
1000c588:	60f8      	str	r0, [r7, #12]
1000c58a:	60b9      	str	r1, [r7, #8]
1000c58c:	607a      	str	r2, [r7, #4]
1000c58e:	603b      	str	r3, [r7, #0]
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
1000c590:	68fb      	ldr	r3, [r7, #12]
1000c592:	633b      	str	r3, [r7, #48]	; 0x30
	memset(rdev, 0, sizeof(*rdev));
1000c594:	2278      	movs	r2, #120	; 0x78
1000c596:	2100      	movs	r1, #0
1000c598:	6b38      	ldr	r0, [r7, #48]	; 0x30
1000c59a:	f000 ffb2 	bl	1000d502 <memset>
	metal_mutex_init(&rdev->lock);
1000c59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c5a0:	3358      	adds	r3, #88	; 0x58
1000c5a2:	4618      	mov	r0, r3
1000c5a4:	f7ff fc41 	bl	1000be2a <metal_mutex_init>
	rvdev->vdev = vdev;
1000c5a8:	68fb      	ldr	r3, [r7, #12]
1000c5aa:	68ba      	ldr	r2, [r7, #8]
1000c5ac:	679a      	str	r2, [r3, #120]	; 0x78
	rdev->ns_bind_cb = ns_bind_cb;
1000c5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c5b0:	687a      	ldr	r2, [r7, #4]
1000c5b2:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
1000c5b4:	68bb      	ldr	r3, [r7, #8]
1000c5b6:	68fa      	ldr	r2, [r7, #12]
1000c5b8:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
1000c5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c5bc:	4a4d      	ldr	r2, [pc, #308]	; (1000c6f4 <rpmsg_init_vdev+0x174>)
1000c5be:	661a      	str	r2, [r3, #96]	; 0x60
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
1000c5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c5c2:	4a4d      	ldr	r2, [pc, #308]	; (1000c6f8 <rpmsg_init_vdev+0x178>)
1000c5c4:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
1000c5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c5c8:	4a4c      	ldr	r2, [pc, #304]	; (1000c6fc <rpmsg_init_vdev+0x17c>)
1000c5ca:	669a      	str	r2, [r3, #104]	; 0x68
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
1000c5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c5ce:	4a4c      	ldr	r2, [pc, #304]	; (1000c700 <rpmsg_init_vdev+0x180>)
1000c5d0:	66da      	str	r2, [r3, #108]	; 0x6c
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
1000c5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c5d4:	4a4b      	ldr	r2, [pc, #300]	; (1000c704 <rpmsg_init_vdev+0x184>)
1000c5d6:	671a      	str	r2, [r3, #112]	; 0x70
	role = rpmsg_virtio_get_role(rvdev);
1000c5d8:	68f8      	ldr	r0, [r7, #12]
1000c5da:	f7ff fc47 	bl	1000be6c <rpmsg_virtio_get_role>
1000c5de:	62f8      	str	r0, [r7, #44]	; 0x2c

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000c5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000c5e2:	2b01      	cmp	r3, #1
1000c5e4:	d102      	bne.n	1000c5ec <rpmsg_init_vdev+0x6c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
1000c5e6:	68f8      	ldr	r0, [r7, #12]
1000c5e8:	f7ff fd55 	bl	1000c096 <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
1000c5ec:	68f8      	ldr	r0, [r7, #12]
1000c5ee:	f7ff fc6e 	bl	1000bece <rpmsg_virtio_get_features>
1000c5f2:	4603      	mov	r3, r0
1000c5f4:	2200      	movs	r2, #0
1000c5f6:	4698      	mov	r8, r3
1000c5f8:	4691      	mov	r9, r2
1000c5fa:	68bb      	ldr	r3, [r7, #8]
1000c5fc:	e9c3 8904 	strd	r8, r9, [r3, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
1000c600:	68bb      	ldr	r3, [r7, #8]
1000c602:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
1000c606:	f002 0401 	and.w	r4, r2, #1
1000c60a:	2500      	movs	r5, #0
1000c60c:	ea44 0305 	orr.w	r3, r4, r5
1000c610:	2b00      	cmp	r3, #0
1000c612:	bf14      	ite	ne
1000c614:	2301      	movne	r3, #1
1000c616:	2300      	moveq	r3, #0
1000c618:	b2da      	uxtb	r2, r3
1000c61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c61c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
1000c620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000c622:	2b01      	cmp	r3, #1
1000c624:	d113      	bne.n	1000c64e <rpmsg_init_vdev+0xce>
		vq_names[0] = "tx_vq";
1000c626:	4b38      	ldr	r3, [pc, #224]	; (1000c708 <rpmsg_init_vdev+0x188>)
1000c628:	61fb      	str	r3, [r7, #28]
		vq_names[1] = "rx_vq";
1000c62a:	4b38      	ldr	r3, [pc, #224]	; (1000c70c <rpmsg_init_vdev+0x18c>)
1000c62c:	623b      	str	r3, [r7, #32]
		callback[0] = rpmsg_virtio_tx_callback;
1000c62e:	4b38      	ldr	r3, [pc, #224]	; (1000c710 <rpmsg_init_vdev+0x190>)
1000c630:	617b      	str	r3, [r7, #20]
		callback[1] = rpmsg_virtio_rx_callback;
1000c632:	4b38      	ldr	r3, [pc, #224]	; (1000c714 <rpmsg_init_vdev+0x194>)
1000c634:	61bb      	str	r3, [r7, #24]
		rvdev->rvq  = vdev->vrings_info[1].vq;
1000c636:	68bb      	ldr	r3, [r7, #8]
1000c638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000c63a:	3318      	adds	r3, #24
1000c63c:	681a      	ldr	r2, [r3, #0]
1000c63e:	68fb      	ldr	r3, [r7, #12]
1000c640:	67da      	str	r2, [r3, #124]	; 0x7c
		rvdev->svq  = vdev->vrings_info[0].vq;
1000c642:	68bb      	ldr	r3, [r7, #8]
1000c644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000c646:	681a      	ldr	r2, [r3, #0]
1000c648:	68fb      	ldr	r3, [r7, #12]
1000c64a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
1000c64e:	68fb      	ldr	r3, [r7, #12]
1000c650:	683a      	ldr	r2, [r7, #0]
1000c652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
1000c656:	f107 021c 	add.w	r2, r7, #28
1000c65a:	f107 0314 	add.w	r3, r7, #20
1000c65e:	9300      	str	r3, [sp, #0]
1000c660:	4613      	mov	r3, r2
1000c662:	2202      	movs	r2, #2
1000c664:	2100      	movs	r1, #0
1000c666:	68f8      	ldr	r0, [r7, #12]
1000c668:	f7ff fc42 	bl	1000bef0 <rpmsg_virtio_create_virtqueues>
1000c66c:	62b8      	str	r0, [r7, #40]	; 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
1000c66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c670:	2b00      	cmp	r3, #0
1000c672:	d001      	beq.n	1000c678 <rpmsg_init_vdev+0xf8>
		return status;
1000c674:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c676:	e037      	b.n	1000c6e8 <rpmsg_init_vdev+0x168>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
1000c678:	68fb      	ldr	r3, [r7, #12]
1000c67a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000c67e:	4618      	mov	r0, r3
1000c680:	f000 fa86 	bl	1000cb90 <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
1000c684:	2300      	movs	r3, #0
1000c686:	637b      	str	r3, [r7, #52]	; 0x34
1000c688:	e00f      	b.n	1000c6aa <rpmsg_init_vdev+0x12a>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
1000c68a:	68bb      	ldr	r3, [r7, #8]
1000c68c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1000c68e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000c690:	4613      	mov	r3, r2
1000c692:	005b      	lsls	r3, r3, #1
1000c694:	4413      	add	r3, r2
1000c696:	00db      	lsls	r3, r3, #3
1000c698:	440b      	add	r3, r1
1000c69a:	681b      	ldr	r3, [r3, #0]
1000c69c:	627b      	str	r3, [r7, #36]	; 0x24
		vq->shm_io = shm_io;
1000c69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c6a0:	683a      	ldr	r2, [r7, #0]
1000c6a2:	629a      	str	r2, [r3, #40]	; 0x28
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
1000c6a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000c6a6:	3301      	adds	r3, #1
1000c6a8:	637b      	str	r3, [r7, #52]	; 0x34
1000c6aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000c6ac:	2b01      	cmp	r3, #1
1000c6ae:	d9ec      	bls.n	1000c68a <rpmsg_init_vdev+0x10a>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
1000c6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c6b2:	4618      	mov	r0, r3
1000c6b4:	f7ff fb35 	bl	1000bd22 <metal_list_init>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
1000c6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c6ba:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
1000c6be:	2b00      	cmp	r3, #0
1000c6c0:	d011      	beq.n	1000c6e6 <rpmsg_init_vdev+0x166>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
1000c6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c6c4:	f103 0008 	add.w	r0, r3, #8
1000c6c8:	2300      	movs	r3, #0
1000c6ca:	9301      	str	r3, [sp, #4]
1000c6cc:	4b12      	ldr	r3, [pc, #72]	; (1000c718 <rpmsg_init_vdev+0x198>)
1000c6ce:	9300      	str	r3, [sp, #0]
1000c6d0:	2335      	movs	r3, #53	; 0x35
1000c6d2:	2235      	movs	r2, #53	; 0x35
1000c6d4:	4911      	ldr	r1, [pc, #68]	; (1000c71c <rpmsg_init_vdev+0x19c>)
1000c6d6:	f7ff fc21 	bl	1000bf1c <rpmsg_initialize_ept>
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
1000c6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c6dc:	3308      	adds	r3, #8
1000c6de:	4619      	mov	r1, r3
1000c6e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
1000c6e2:	f7ff faf4 	bl	1000bcce <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
1000c6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
1000c6e8:	4618      	mov	r0, r3
1000c6ea:	3738      	adds	r7, #56	; 0x38
1000c6ec:	46bd      	mov	sp, r7
1000c6ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
1000c6f2:	bf00      	nop
1000c6f4:	1000c2c9 	.word	0x1000c2c9
1000c6f8:	1000c0d1 	.word	0x1000c0d1
1000c6fc:	1000c0f9 	.word	0x1000c0f9
1000c700:	1000c14b 	.word	0x1000c14b
1000c704:	1000c1f1 	.word	0x1000c1f1
1000c708:	1000e7d0 	.word	0x1000e7d0
1000c70c:	1000e7d8 	.word	0x1000e7d8
1000c710:	1000c361 	.word	0x1000c361
1000c714:	1000c375 	.word	0x1000c375
1000c718:	1000c499 	.word	0x1000c499
1000c71c:	1000e7e0 	.word	0x1000e7e0

1000c720 <metal_machine_cache_flush>:

	/* Add implementation here */
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
1000c720:	b480      	push	{r7}
1000c722:	b083      	sub	sp, #12
1000c724:	af00      	add	r7, sp, #0
1000c726:	6078      	str	r0, [r7, #4]
1000c728:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
1000c72a:	bf00      	nop
1000c72c:	370c      	adds	r7, #12
1000c72e:	46bd      	mov	sp, r7
1000c730:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c734:	4770      	bx	lr

1000c736 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
1000c736:	b480      	push	{r7}
1000c738:	b083      	sub	sp, #12
1000c73a:	af00      	add	r7, sp, #0
1000c73c:	6078      	str	r0, [r7, #4]
1000c73e:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
1000c740:	bf00      	nop
1000c742:	370c      	adds	r7, #12
1000c744:	46bd      	mov	sp, r7
1000c746:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c74a:	4770      	bx	lr

1000c74c <metal_machine_io_mem_map>:
	/* Add implementation here */
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
1000c74c:	b480      	push	{r7}
1000c74e:	b085      	sub	sp, #20
1000c750:	af00      	add	r7, sp, #0
1000c752:	60f8      	str	r0, [r7, #12]
1000c754:	60b9      	str	r1, [r7, #8]
1000c756:	607a      	str	r2, [r7, #4]
1000c758:	603b      	str	r3, [r7, #0]
	metal_unused(size);
	metal_unused(flags);

	/* Add implementation here */

	return va;
1000c75a:	68fb      	ldr	r3, [r7, #12]
}
1000c75c:	4618      	mov	r0, r3
1000c75e:	3714      	adds	r7, #20
1000c760:	46bd      	mov	sp, r7
1000c762:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c766:	4770      	bx	lr

1000c768 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
1000c768:	b590      	push	{r4, r7, lr}
1000c76a:	b08f      	sub	sp, #60	; 0x3c
1000c76c:	af04      	add	r7, sp, #16
1000c76e:	60f8      	str	r0, [r7, #12]
1000c770:	60b9      	str	r1, [r7, #8]
1000c772:	607a      	str	r2, [r7, #4]
1000c774:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
1000c776:	68fb      	ldr	r3, [r7, #12]
1000c778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000c77a:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
1000c77c:	687a      	ldr	r2, [r7, #4]
1000c77e:	6a3b      	ldr	r3, [r7, #32]
1000c780:	429a      	cmp	r2, r3
1000c782:	d901      	bls.n	1000c788 <virtio_create_virtqueues+0x20>
		return ERROR_VQUEUE_INVLD_PARAM;
1000c784:	4b1e      	ldr	r3, [pc, #120]	; (1000c800 <virtio_create_virtqueues+0x98>)
1000c786:	e036      	b.n	1000c7f6 <virtio_create_virtqueues+0x8e>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
1000c788:	2300      	movs	r3, #0
1000c78a:	627b      	str	r3, [r7, #36]	; 0x24
1000c78c:	e02e      	b.n	1000c7ec <virtio_create_virtqueues+0x84>
		vring_info = &vdev->vrings_info[i];
1000c78e:	68fb      	ldr	r3, [r7, #12]
1000c790:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1000c792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000c794:	4613      	mov	r3, r2
1000c796:	005b      	lsls	r3, r3, #1
1000c798:	4413      	add	r3, r2
1000c79a:	00db      	lsls	r3, r3, #3
1000c79c:	440b      	add	r3, r1
1000c79e:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
1000c7a0:	69fb      	ldr	r3, [r7, #28]
1000c7a2:	3304      	adds	r3, #4
1000c7a4:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
1000c7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c7a8:	b298      	uxth	r0, r3
1000c7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c7ac:	009b      	lsls	r3, r3, #2
1000c7ae:	683a      	ldr	r2, [r7, #0]
1000c7b0:	4413      	add	r3, r2
1000c7b2:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
1000c7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c7b6:	009b      	lsls	r3, r3, #2
1000c7b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
1000c7ba:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
1000c7bc:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
1000c7be:	68fa      	ldr	r2, [r7, #12]
1000c7c0:	6a12      	ldr	r2, [r2, #32]
1000c7c2:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
1000c7c4:	69f9      	ldr	r1, [r7, #28]
1000c7c6:	6809      	ldr	r1, [r1, #0]
1000c7c8:	9102      	str	r1, [sp, #8]
1000c7ca:	9201      	str	r2, [sp, #4]
1000c7cc:	9300      	str	r3, [sp, #0]
1000c7ce:	69bb      	ldr	r3, [r7, #24]
1000c7d0:	4622      	mov	r2, r4
1000c7d2:	4601      	mov	r1, r0
1000c7d4:	68f8      	ldr	r0, [r7, #12]
1000c7d6:	f000 f90e 	bl	1000c9f6 <virtqueue_create>
1000c7da:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
1000c7dc:	697b      	ldr	r3, [r7, #20]
1000c7de:	2b00      	cmp	r3, #0
1000c7e0:	d001      	beq.n	1000c7e6 <virtio_create_virtqueues+0x7e>
			return ret;
1000c7e2:	697b      	ldr	r3, [r7, #20]
1000c7e4:	e007      	b.n	1000c7f6 <virtio_create_virtqueues+0x8e>
	for (i = 0; i < nvqs; i++) {
1000c7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c7e8:	3301      	adds	r3, #1
1000c7ea:	627b      	str	r3, [r7, #36]	; 0x24
1000c7ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000c7ee:	687b      	ldr	r3, [r7, #4]
1000c7f0:	429a      	cmp	r2, r3
1000c7f2:	d3cc      	bcc.n	1000c78e <virtio_create_virtqueues+0x26>
	}
	return 0;
1000c7f4:	2300      	movs	r3, #0
}
1000c7f6:	4618      	mov	r0, r3
1000c7f8:	372c      	adds	r7, #44	; 0x2c
1000c7fa:	46bd      	mov	sp, r7
1000c7fc:	bd90      	pop	{r4, r7, pc}
1000c7fe:	bf00      	nop
1000c800:	fffff440 	.word	0xfffff440

1000c804 <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
1000c804:	b480      	push	{r7}
1000c806:	b085      	sub	sp, #20
1000c808:	af00      	add	r7, sp, #0
1000c80a:	60f8      	str	r0, [r7, #12]
1000c80c:	60b9      	str	r1, [r7, #8]
1000c80e:	607a      	str	r2, [r7, #4]
1000c810:	603b      	str	r3, [r7, #0]
	vr->num = num;
1000c812:	68fb      	ldr	r3, [r7, #12]
1000c814:	68ba      	ldr	r2, [r7, #8]
1000c816:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
1000c818:	68fb      	ldr	r3, [r7, #12]
1000c81a:	687a      	ldr	r2, [r7, #4]
1000c81c:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
1000c81e:	68bb      	ldr	r3, [r7, #8]
1000c820:	011b      	lsls	r3, r3, #4
1000c822:	687a      	ldr	r2, [r7, #4]
1000c824:	441a      	add	r2, r3
1000c826:	68fb      	ldr	r3, [r7, #12]
1000c828:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
1000c82a:	68fb      	ldr	r3, [r7, #12]
1000c82c:	689a      	ldr	r2, [r3, #8]
1000c82e:	68bb      	ldr	r3, [r7, #8]
1000c830:	005b      	lsls	r3, r3, #1
1000c832:	4413      	add	r3, r2
1000c834:	3304      	adds	r3, #4
1000c836:	461a      	mov	r2, r3
1000c838:	683b      	ldr	r3, [r7, #0]
1000c83a:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
1000c83c:	1c5a      	adds	r2, r3, #1
1000c83e:	683b      	ldr	r3, [r7, #0]
1000c840:	425b      	negs	r3, r3
1000c842:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
1000c844:	461a      	mov	r2, r3
1000c846:	68fb      	ldr	r3, [r7, #12]
1000c848:	60da      	str	r2, [r3, #12]
}
1000c84a:	bf00      	nop
1000c84c:	3714      	adds	r7, #20
1000c84e:	46bd      	mov	sp, r7
1000c850:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c854:	4770      	bx	lr

1000c856 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
1000c856:	b480      	push	{r7}
1000c858:	b083      	sub	sp, #12
1000c85a:	af00      	add	r7, sp, #0
1000c85c:	4603      	mov	r3, r0
1000c85e:	80fb      	strh	r3, [r7, #6]
1000c860:	460b      	mov	r3, r1
1000c862:	80bb      	strh	r3, [r7, #4]
1000c864:	4613      	mov	r3, r2
1000c866:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
1000c868:	88ba      	ldrh	r2, [r7, #4]
1000c86a:	88fb      	ldrh	r3, [r7, #6]
1000c86c:	1ad3      	subs	r3, r2, r3
1000c86e:	b29b      	uxth	r3, r3
1000c870:	3b01      	subs	r3, #1
1000c872:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
1000c874:	88b9      	ldrh	r1, [r7, #4]
1000c876:	887b      	ldrh	r3, [r7, #2]
1000c878:	1acb      	subs	r3, r1, r3
1000c87a:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
1000c87c:	429a      	cmp	r2, r3
1000c87e:	bf34      	ite	cc
1000c880:	2301      	movcc	r3, #1
1000c882:	2300      	movcs	r3, #0
1000c884:	b2db      	uxtb	r3, r3
}
1000c886:	4618      	mov	r0, r3
1000c888:	370c      	adds	r7, #12
1000c88a:	46bd      	mov	sp, r7
1000c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c890:	4770      	bx	lr

1000c892 <metal_io_virt>:
{
1000c892:	b480      	push	{r7}
1000c894:	b083      	sub	sp, #12
1000c896:	af00      	add	r7, sp, #0
1000c898:	6078      	str	r0, [r7, #4]
1000c89a:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
1000c89c:	687b      	ldr	r3, [r7, #4]
1000c89e:	681b      	ldr	r3, [r3, #0]
		: NULL);
1000c8a0:	f1b3 3fff 	cmp.w	r3, #4294967295
1000c8a4:	d00a      	beq.n	1000c8bc <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
1000c8a6:	687b      	ldr	r3, [r7, #4]
1000c8a8:	689b      	ldr	r3, [r3, #8]
1000c8aa:	683a      	ldr	r2, [r7, #0]
1000c8ac:	429a      	cmp	r2, r3
1000c8ae:	d205      	bcs.n	1000c8bc <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
1000c8b0:	687b      	ldr	r3, [r7, #4]
1000c8b2:	681b      	ldr	r3, [r3, #0]
1000c8b4:	461a      	mov	r2, r3
1000c8b6:	683b      	ldr	r3, [r7, #0]
1000c8b8:	4413      	add	r3, r2
		: NULL);
1000c8ba:	e000      	b.n	1000c8be <metal_io_virt+0x2c>
1000c8bc:	2300      	movs	r3, #0
}
1000c8be:	4618      	mov	r0, r3
1000c8c0:	370c      	adds	r7, #12
1000c8c2:	46bd      	mov	sp, r7
1000c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c8c8:	4770      	bx	lr

1000c8ca <metal_io_phys>:
{
1000c8ca:	b580      	push	{r7, lr}
1000c8cc:	b084      	sub	sp, #16
1000c8ce:	af00      	add	r7, sp, #0
1000c8d0:	6078      	str	r0, [r7, #4]
1000c8d2:	6039      	str	r1, [r7, #0]
	if (!io->ops.offset_to_phys) {
1000c8d4:	687b      	ldr	r3, [r7, #4]
1000c8d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000c8d8:	2b00      	cmp	r3, #0
1000c8da:	d123      	bne.n	1000c924 <metal_io_phys+0x5a>
		unsigned long page = (io->page_shift >=
1000c8dc:	687b      	ldr	r3, [r7, #4]
1000c8de:	68db      	ldr	r3, [r3, #12]
				     0 : offset >> io->page_shift);
1000c8e0:	2b1f      	cmp	r3, #31
1000c8e2:	d805      	bhi.n	1000c8f0 <metal_io_phys+0x26>
1000c8e4:	687b      	ldr	r3, [r7, #4]
1000c8e6:	68db      	ldr	r3, [r3, #12]
1000c8e8:	683a      	ldr	r2, [r7, #0]
1000c8ea:	fa22 f303 	lsr.w	r3, r2, r3
1000c8ee:	e000      	b.n	1000c8f2 <metal_io_phys+0x28>
1000c8f0:	2300      	movs	r3, #0
		unsigned long page = (io->page_shift >=
1000c8f2:	60fb      	str	r3, [r7, #12]
		return (io->physmap && offset < io->size
1000c8f4:	687b      	ldr	r3, [r7, #4]
1000c8f6:	685b      	ldr	r3, [r3, #4]
			: METAL_BAD_PHYS);
1000c8f8:	2b00      	cmp	r3, #0
1000c8fa:	d010      	beq.n	1000c91e <metal_io_phys+0x54>
		return (io->physmap && offset < io->size
1000c8fc:	687b      	ldr	r3, [r7, #4]
1000c8fe:	689b      	ldr	r3, [r3, #8]
1000c900:	683a      	ldr	r2, [r7, #0]
1000c902:	429a      	cmp	r2, r3
1000c904:	d20b      	bcs.n	1000c91e <metal_io_phys+0x54>
			? io->physmap[page] + (offset & io->page_mask)
1000c906:	687b      	ldr	r3, [r7, #4]
1000c908:	685a      	ldr	r2, [r3, #4]
1000c90a:	68fb      	ldr	r3, [r7, #12]
1000c90c:	009b      	lsls	r3, r3, #2
1000c90e:	4413      	add	r3, r2
1000c910:	681a      	ldr	r2, [r3, #0]
1000c912:	687b      	ldr	r3, [r7, #4]
1000c914:	6919      	ldr	r1, [r3, #16]
1000c916:	683b      	ldr	r3, [r7, #0]
1000c918:	400b      	ands	r3, r1
			: METAL_BAD_PHYS);
1000c91a:	4413      	add	r3, r2
1000c91c:	e008      	b.n	1000c930 <metal_io_phys+0x66>
1000c91e:	f04f 33ff 	mov.w	r3, #4294967295
1000c922:	e005      	b.n	1000c930 <metal_io_phys+0x66>
	return io->ops.offset_to_phys(io, offset);
1000c924:	687b      	ldr	r3, [r7, #4]
1000c926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000c928:	6839      	ldr	r1, [r7, #0]
1000c92a:	6878      	ldr	r0, [r7, #4]
1000c92c:	4798      	blx	r3
1000c92e:	4603      	mov	r3, r0
}
1000c930:	4618      	mov	r0, r3
1000c932:	3710      	adds	r7, #16
1000c934:	46bd      	mov	sp, r7
1000c936:	bd80      	pop	{r7, pc}

1000c938 <metal_io_phys_to_offset>:
{
1000c938:	b580      	push	{r7, lr}
1000c93a:	b084      	sub	sp, #16
1000c93c:	af00      	add	r7, sp, #0
1000c93e:	6078      	str	r0, [r7, #4]
1000c940:	6039      	str	r1, [r7, #0]
	if (!io->ops.phys_to_offset) {
1000c942:	687b      	ldr	r3, [r7, #4]
1000c944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000c946:	2b00      	cmp	r3, #0
1000c948:	d127      	bne.n	1000c99a <metal_io_phys_to_offset+0x62>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
1000c94a:	687b      	ldr	r3, [r7, #4]
1000c94c:	691b      	ldr	r3, [r3, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
1000c94e:	f1b3 3fff 	cmp.w	r3, #4294967295
1000c952:	d105      	bne.n	1000c960 <metal_io_phys_to_offset+0x28>
1000c954:	687b      	ldr	r3, [r7, #4]
1000c956:	685b      	ldr	r3, [r3, #4]
1000c958:	681b      	ldr	r3, [r3, #0]
1000c95a:	683a      	ldr	r2, [r7, #0]
1000c95c:	1ad3      	subs	r3, r2, r3
1000c95e:	e003      	b.n	1000c968 <metal_io_phys_to_offset+0x30>
1000c960:	687b      	ldr	r3, [r7, #4]
1000c962:	691a      	ldr	r2, [r3, #16]
1000c964:	683b      	ldr	r3, [r7, #0]
1000c966:	4013      	ands	r3, r2
		unsigned long offset =
1000c968:	60fb      	str	r3, [r7, #12]
			if (metal_io_phys(io, offset) == phys)
1000c96a:	68f9      	ldr	r1, [r7, #12]
1000c96c:	6878      	ldr	r0, [r7, #4]
1000c96e:	f7ff ffac 	bl	1000c8ca <metal_io_phys>
1000c972:	4602      	mov	r2, r0
1000c974:	683b      	ldr	r3, [r7, #0]
1000c976:	4293      	cmp	r3, r2
1000c978:	d101      	bne.n	1000c97e <metal_io_phys_to_offset+0x46>
				return offset;
1000c97a:	68fb      	ldr	r3, [r7, #12]
1000c97c:	e013      	b.n	1000c9a6 <metal_io_phys_to_offset+0x6e>
			offset += io->page_mask + 1;
1000c97e:	687b      	ldr	r3, [r7, #4]
1000c980:	691a      	ldr	r2, [r3, #16]
1000c982:	68fb      	ldr	r3, [r7, #12]
1000c984:	4413      	add	r3, r2
1000c986:	3301      	adds	r3, #1
1000c988:	60fb      	str	r3, [r7, #12]
		} while (offset < io->size);
1000c98a:	687b      	ldr	r3, [r7, #4]
1000c98c:	689b      	ldr	r3, [r3, #8]
1000c98e:	68fa      	ldr	r2, [r7, #12]
1000c990:	429a      	cmp	r2, r3
1000c992:	d3ea      	bcc.n	1000c96a <metal_io_phys_to_offset+0x32>
		return METAL_BAD_OFFSET;
1000c994:	f04f 33ff 	mov.w	r3, #4294967295
1000c998:	e005      	b.n	1000c9a6 <metal_io_phys_to_offset+0x6e>
	return (*io->ops.phys_to_offset)(io, phys);
1000c99a:	687b      	ldr	r3, [r7, #4]
1000c99c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000c99e:	6839      	ldr	r1, [r7, #0]
1000c9a0:	6878      	ldr	r0, [r7, #4]
1000c9a2:	4798      	blx	r3
1000c9a4:	4603      	mov	r3, r0
}
1000c9a6:	4618      	mov	r0, r3
1000c9a8:	3710      	adds	r7, #16
1000c9aa:	46bd      	mov	sp, r7
1000c9ac:	bd80      	pop	{r7, pc}

1000c9ae <metal_io_phys_to_virt>:
{
1000c9ae:	b580      	push	{r7, lr}
1000c9b0:	b082      	sub	sp, #8
1000c9b2:	af00      	add	r7, sp, #0
1000c9b4:	6078      	str	r0, [r7, #4]
1000c9b6:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
1000c9b8:	6839      	ldr	r1, [r7, #0]
1000c9ba:	6878      	ldr	r0, [r7, #4]
1000c9bc:	f7ff ffbc 	bl	1000c938 <metal_io_phys_to_offset>
1000c9c0:	4603      	mov	r3, r0
1000c9c2:	4619      	mov	r1, r3
1000c9c4:	6878      	ldr	r0, [r7, #4]
1000c9c6:	f7ff ff64 	bl	1000c892 <metal_io_virt>
1000c9ca:	4603      	mov	r3, r0
}
1000c9cc:	4618      	mov	r0, r3
1000c9ce:	3708      	adds	r7, #8
1000c9d0:	46bd      	mov	sp, r7
1000c9d2:	bd80      	pop	{r7, pc}

1000c9d4 <virtqueue_phys_to_virt>:
#endif /* VIRTIO_CACHED_VRINGS */

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
1000c9d4:	b580      	push	{r7, lr}
1000c9d6:	b084      	sub	sp, #16
1000c9d8:	af00      	add	r7, sp, #0
1000c9da:	6078      	str	r0, [r7, #4]
1000c9dc:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
1000c9de:	687b      	ldr	r3, [r7, #4]
1000c9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000c9e2:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
1000c9e4:	6839      	ldr	r1, [r7, #0]
1000c9e6:	68f8      	ldr	r0, [r7, #12]
1000c9e8:	f7ff ffe1 	bl	1000c9ae <metal_io_phys_to_virt>
1000c9ec:	4603      	mov	r3, r0
}
1000c9ee:	4618      	mov	r0, r3
1000c9f0:	3710      	adds	r7, #16
1000c9f2:	46bd      	mov	sp, r7
1000c9f4:	bd80      	pop	{r7, pc}

1000c9f6 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
1000c9f6:	b580      	push	{r7, lr}
1000c9f8:	b086      	sub	sp, #24
1000c9fa:	af00      	add	r7, sp, #0
1000c9fc:	60f8      	str	r0, [r7, #12]
1000c9fe:	607a      	str	r2, [r7, #4]
1000ca00:	603b      	str	r3, [r7, #0]
1000ca02:	460b      	mov	r3, r1
1000ca04:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
1000ca06:	2300      	movs	r3, #0
1000ca08:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
1000ca0a:	697b      	ldr	r3, [r7, #20]
1000ca0c:	2b00      	cmp	r3, #0
1000ca0e:	d11e      	bne.n	1000ca4e <virtqueue_create+0x58>
		vq->vq_dev = virt_dev;
1000ca10:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000ca12:	68fa      	ldr	r2, [r7, #12]
1000ca14:	601a      	str	r2, [r3, #0]
		vq->vq_name = name;
1000ca16:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000ca18:	687a      	ldr	r2, [r7, #4]
1000ca1a:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
1000ca1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000ca1e:	897a      	ldrh	r2, [r7, #10]
1000ca20:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
1000ca22:	683b      	ldr	r3, [r7, #0]
1000ca24:	891a      	ldrh	r2, [r3, #8]
1000ca26:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000ca28:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
1000ca2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000ca2c:	895a      	ldrh	r2, [r3, #10]
1000ca2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000ca30:	849a      	strh	r2, [r3, #36]	; 0x24
		vq->callback = callback;
1000ca32:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000ca34:	6a3a      	ldr	r2, [r7, #32]
1000ca36:	60da      	str	r2, [r3, #12]
		vq->notify = notify;
1000ca38:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000ca3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000ca3c:	611a      	str	r2, [r3, #16]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, ring->vaddr, ring->align);
1000ca3e:	683b      	ldr	r3, [r7, #0]
1000ca40:	6819      	ldr	r1, [r3, #0]
1000ca42:	683b      	ldr	r3, [r7, #0]
1000ca44:	685b      	ldr	r3, [r3, #4]
1000ca46:	461a      	mov	r2, r3
1000ca48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1000ca4a:	f000 f8ef 	bl	1000cc2c <vq_ring_init>
	/*
	 * CACHE: nothing to be done here. Only desc.next is setup at this
	 * stage but that is only written by master, so no need to flush it.
	 */

	return status;
1000ca4e:	697b      	ldr	r3, [r7, #20]
}
1000ca50:	4618      	mov	r0, r3
1000ca52:	3718      	adds	r7, #24
1000ca54:	46bd      	mov	sp, r7
1000ca56:	bd80      	pop	{r7, pc}

1000ca58 <virtqueue_get_buffer_length>:

	return cookie;
}

uint32_t virtqueue_get_buffer_length(struct virtqueue *vq, uint16_t idx)
{
1000ca58:	b480      	push	{r7}
1000ca5a:	b083      	sub	sp, #12
1000ca5c:	af00      	add	r7, sp, #0
1000ca5e:	6078      	str	r0, [r7, #4]
1000ca60:	460b      	mov	r3, r1
1000ca62:	807b      	strh	r3, [r7, #2]
	VRING_INVALIDATE(vq->vq_ring.desc[idx].len);
	return vq->vq_ring.desc[idx].len;
1000ca64:	687b      	ldr	r3, [r7, #4]
1000ca66:	699a      	ldr	r2, [r3, #24]
1000ca68:	887b      	ldrh	r3, [r7, #2]
1000ca6a:	011b      	lsls	r3, r3, #4
1000ca6c:	4413      	add	r3, r2
1000ca6e:	689b      	ldr	r3, [r3, #8]
}
1000ca70:	4618      	mov	r0, r3
1000ca72:	370c      	adds	r7, #12
1000ca74:	46bd      	mov	sp, r7
1000ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
1000ca7a:	4770      	bx	lr

1000ca7c <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
1000ca7c:	b580      	push	{r7, lr}
1000ca7e:	b086      	sub	sp, #24
1000ca80:	af00      	add	r7, sp, #0
1000ca82:	60f8      	str	r0, [r7, #12]
1000ca84:	60b9      	str	r1, [r7, #8]
1000ca86:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
1000ca88:	2300      	movs	r3, #0
1000ca8a:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
1000ca8c:	f3bf 8f5b 	dmb	ish

	/* Avail.idx is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->idx);
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
1000ca90:	68fb      	ldr	r3, [r7, #12]
1000ca92:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
1000ca94:	68fb      	ldr	r3, [r7, #12]
1000ca96:	69db      	ldr	r3, [r3, #28]
1000ca98:	885b      	ldrh	r3, [r3, #2]
1000ca9a:	b29b      	uxth	r3, r3
1000ca9c:	429a      	cmp	r2, r3
1000ca9e:	d101      	bne.n	1000caa4 <virtqueue_get_available_buffer+0x28>
		return NULL;
1000caa0:	2300      	movs	r3, #0
1000caa2:	e02f      	b.n	1000cb04 <virtqueue_get_available_buffer+0x88>
	VQUEUE_BUSY(vq);

	/* Avail.ring is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->ring[head_idx]);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
1000caa4:	68fb      	ldr	r3, [r7, #12]
1000caa6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
1000caa8:	1c5a      	adds	r2, r3, #1
1000caaa:	b291      	uxth	r1, r2
1000caac:	68fa      	ldr	r2, [r7, #12]
1000caae:	8611      	strh	r1, [r2, #48]	; 0x30
1000cab0:	b21a      	sxth	r2, r3
1000cab2:	68fb      	ldr	r3, [r7, #12]
1000cab4:	895b      	ldrh	r3, [r3, #10]
1000cab6:	3b01      	subs	r3, #1
1000cab8:	b29b      	uxth	r3, r3
1000caba:	b21b      	sxth	r3, r3
1000cabc:	4013      	ands	r3, r2
1000cabe:	b21b      	sxth	r3, r3
1000cac0:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
1000cac2:	68fb      	ldr	r3, [r7, #12]
1000cac4:	69da      	ldr	r2, [r3, #28]
1000cac6:	8afb      	ldrh	r3, [r7, #22]
1000cac8:	005b      	lsls	r3, r3, #1
1000caca:	4413      	add	r3, r2
1000cacc:	889b      	ldrh	r3, [r3, #4]
1000cace:	b29a      	uxth	r2, r3
1000cad0:	68bb      	ldr	r3, [r7, #8]
1000cad2:	801a      	strh	r2, [r3, #0]

	/* Invalidate the desc entry written by master before accessing it */
	VRING_INVALIDATE(vq->vq_ring.desc[*avail_idx]);
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
1000cad4:	68fb      	ldr	r3, [r7, #12]
1000cad6:	699a      	ldr	r2, [r3, #24]
1000cad8:	68bb      	ldr	r3, [r7, #8]
1000cada:	881b      	ldrh	r3, [r3, #0]
1000cadc:	011b      	lsls	r3, r3, #4
1000cade:	18d1      	adds	r1, r2, r3
1000cae0:	680a      	ldr	r2, [r1, #0]
1000cae2:	684b      	ldr	r3, [r1, #4]
1000cae4:	4613      	mov	r3, r2
1000cae6:	4619      	mov	r1, r3
1000cae8:	68f8      	ldr	r0, [r7, #12]
1000caea:	f7ff ff73 	bl	1000c9d4 <virtqueue_phys_to_virt>
1000caee:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
1000caf0:	68fb      	ldr	r3, [r7, #12]
1000caf2:	699a      	ldr	r2, [r3, #24]
1000caf4:	68bb      	ldr	r3, [r7, #8]
1000caf6:	881b      	ldrh	r3, [r3, #0]
1000caf8:	011b      	lsls	r3, r3, #4
1000cafa:	4413      	add	r3, r2
1000cafc:	689a      	ldr	r2, [r3, #8]
1000cafe:	687b      	ldr	r3, [r7, #4]
1000cb00:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
1000cb02:	693b      	ldr	r3, [r7, #16]
}
1000cb04:	4618      	mov	r0, r3
1000cb06:	3718      	adds	r7, #24
1000cb08:	46bd      	mov	sp, r7
1000cb0a:	bd80      	pop	{r7, pc}

1000cb0c <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
1000cb0c:	b480      	push	{r7}
1000cb0e:	b087      	sub	sp, #28
1000cb10:	af00      	add	r7, sp, #0
1000cb12:	60f8      	str	r0, [r7, #12]
1000cb14:	460b      	mov	r3, r1
1000cb16:	607a      	str	r2, [r7, #4]
1000cb18:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
1000cb1a:	2300      	movs	r3, #0
1000cb1c:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
1000cb1e:	68fb      	ldr	r3, [r7, #12]
1000cb20:	895b      	ldrh	r3, [r3, #10]
1000cb22:	897a      	ldrh	r2, [r7, #10]
1000cb24:	429a      	cmp	r2, r3
1000cb26:	d901      	bls.n	1000cb2c <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
1000cb28:	4b18      	ldr	r3, [pc, #96]	; (1000cb8c <virtqueue_add_consumed_buffer+0x80>)
1000cb2a:	e029      	b.n	1000cb80 <virtqueue_add_consumed_buffer+0x74>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by master, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
1000cb2c:	68fb      	ldr	r3, [r7, #12]
1000cb2e:	6a1b      	ldr	r3, [r3, #32]
1000cb30:	885b      	ldrh	r3, [r3, #2]
1000cb32:	b29b      	uxth	r3, r3
1000cb34:	b21a      	sxth	r2, r3
1000cb36:	68fb      	ldr	r3, [r7, #12]
1000cb38:	895b      	ldrh	r3, [r3, #10]
1000cb3a:	3b01      	subs	r3, #1
1000cb3c:	b29b      	uxth	r3, r3
1000cb3e:	b21b      	sxth	r3, r3
1000cb40:	4013      	ands	r3, r2
1000cb42:	b21b      	sxth	r3, r3
1000cb44:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
1000cb46:	68fb      	ldr	r3, [r7, #12]
1000cb48:	6a1a      	ldr	r2, [r3, #32]
1000cb4a:	8a7b      	ldrh	r3, [r7, #18]
1000cb4c:	00db      	lsls	r3, r3, #3
1000cb4e:	4413      	add	r3, r2
1000cb50:	3304      	adds	r3, #4
1000cb52:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
1000cb54:	897a      	ldrh	r2, [r7, #10]
1000cb56:	697b      	ldr	r3, [r7, #20]
1000cb58:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
1000cb5a:	697b      	ldr	r3, [r7, #20]
1000cb5c:	687a      	ldr	r2, [r7, #4]
1000cb5e:	605a      	str	r2, [r3, #4]

	/* We still need to flush it because this is read by master */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
1000cb60:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
1000cb64:	68fb      	ldr	r3, [r7, #12]
1000cb66:	6a1b      	ldr	r3, [r3, #32]
1000cb68:	885a      	ldrh	r2, [r3, #2]
1000cb6a:	b292      	uxth	r2, r2
1000cb6c:	3201      	adds	r2, #1
1000cb6e:	b292      	uxth	r2, r2
1000cb70:	805a      	strh	r2, [r3, #2]

	/* Used.idx is read by master, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
1000cb72:	68fb      	ldr	r3, [r7, #12]
1000cb74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
1000cb76:	3301      	adds	r3, #1
1000cb78:	b29a      	uxth	r2, r3
1000cb7a:	68fb      	ldr	r3, [r7, #12]
1000cb7c:	84da      	strh	r2, [r3, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
1000cb7e:	2300      	movs	r3, #0
}
1000cb80:	4618      	mov	r0, r3
1000cb82:	371c      	adds	r7, #28
1000cb84:	46bd      	mov	sp, r7
1000cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
1000cb8a:	4770      	bx	lr
1000cb8c:	fffff441 	.word	0xfffff441

1000cb90 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
1000cb90:	b480      	push	{r7}
1000cb92:	b083      	sub	sp, #12
1000cb94:	af00      	add	r7, sp, #0
1000cb96:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
1000cb98:	6879      	ldr	r1, [r7, #4]
1000cb9a:	6809      	ldr	r1, [r1, #0]
1000cb9c:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
1000cba0:	f000 5200 	and.w	r2, r0, #536870912	; 0x20000000
1000cba4:	2300      	movs	r3, #0
1000cba6:	4313      	orrs	r3, r2
1000cba8:	d015      	beq.n	1000cbd6 <virtqueue_disable_cb+0x46>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
			VRING_FLUSH(vring_used_event(&vq->vq_ring));
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000cbaa:	687b      	ldr	r3, [r7, #4]
1000cbac:	681b      	ldr	r3, [r3, #0]
1000cbae:	699b      	ldr	r3, [r3, #24]
1000cbb0:	2b01      	cmp	r3, #1
1000cbb2:	d11f      	bne.n	1000cbf4 <virtqueue_disable_cb+0x64>
			vring_avail_event(&vq->vq_ring) =
			    vq->vq_available_idx - vq->vq_nentries - 1;
1000cbb4:	687b      	ldr	r3, [r7, #4]
1000cbb6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
1000cbb8:	687b      	ldr	r3, [r7, #4]
1000cbba:	895b      	ldrh	r3, [r3, #10]
1000cbbc:	1ad3      	subs	r3, r2, r3
1000cbbe:	b299      	uxth	r1, r3
			vring_avail_event(&vq->vq_ring) =
1000cbc0:	687b      	ldr	r3, [r7, #4]
1000cbc2:	6a1a      	ldr	r2, [r3, #32]
1000cbc4:	687b      	ldr	r3, [r7, #4]
1000cbc6:	695b      	ldr	r3, [r3, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
1000cbc8:	3901      	subs	r1, #1
1000cbca:	b289      	uxth	r1, r1
			vring_avail_event(&vq->vq_ring) =
1000cbcc:	00db      	lsls	r3, r3, #3
1000cbce:	4413      	add	r3, r2
1000cbd0:	460a      	mov	r2, r1
1000cbd2:	809a      	strh	r2, [r3, #4]
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	VQUEUE_IDLE(vq);
}
1000cbd4:	e00e      	b.n	1000cbf4 <virtqueue_disable_cb+0x64>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000cbd6:	687b      	ldr	r3, [r7, #4]
1000cbd8:	681b      	ldr	r3, [r3, #0]
1000cbda:	699b      	ldr	r3, [r3, #24]
1000cbdc:	2b01      	cmp	r3, #1
1000cbde:	d109      	bne.n	1000cbf4 <virtqueue_disable_cb+0x64>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
1000cbe0:	687b      	ldr	r3, [r7, #4]
1000cbe2:	6a1b      	ldr	r3, [r3, #32]
1000cbe4:	881b      	ldrh	r3, [r3, #0]
1000cbe6:	b29a      	uxth	r2, r3
1000cbe8:	687b      	ldr	r3, [r7, #4]
1000cbea:	6a1b      	ldr	r3, [r3, #32]
1000cbec:	f042 0201 	orr.w	r2, r2, #1
1000cbf0:	b292      	uxth	r2, r2
1000cbf2:	801a      	strh	r2, [r3, #0]
}
1000cbf4:	bf00      	nop
1000cbf6:	370c      	adds	r7, #12
1000cbf8:	46bd      	mov	sp, r7
1000cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
1000cbfe:	4770      	bx	lr

1000cc00 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
1000cc00:	b580      	push	{r7, lr}
1000cc02:	b082      	sub	sp, #8
1000cc04:	af00      	add	r7, sp, #0
1000cc06:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
1000cc08:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify(vq))
1000cc0c:	6878      	ldr	r0, [r7, #4]
1000cc0e:	f000 f823 	bl	1000cc58 <vq_ring_must_notify>
1000cc12:	4603      	mov	r3, r0
1000cc14:	2b00      	cmp	r3, #0
1000cc16:	d002      	beq.n	1000cc1e <virtqueue_kick+0x1e>
		vq_ring_notify(vq);
1000cc18:	6878      	ldr	r0, [r7, #4]
1000cc1a:	f000 f86b 	bl	1000ccf4 <vq_ring_notify>

	vq->vq_queued_cnt = 0;
1000cc1e:	687b      	ldr	r3, [r7, #4]
1000cc20:	2200      	movs	r2, #0
1000cc22:	84da      	strh	r2, [r3, #38]	; 0x26

	VQUEUE_IDLE(vq);
}
1000cc24:	bf00      	nop
1000cc26:	3708      	adds	r7, #8
1000cc28:	46bd      	mov	sp, r7
1000cc2a:	bd80      	pop	{r7, pc}

1000cc2c <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
1000cc2c:	b580      	push	{r7, lr}
1000cc2e:	b086      	sub	sp, #24
1000cc30:	af00      	add	r7, sp, #0
1000cc32:	60f8      	str	r0, [r7, #12]
1000cc34:	60b9      	str	r1, [r7, #8]
1000cc36:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int size;

	size = vq->vq_nentries;
1000cc38:	68fb      	ldr	r3, [r7, #12]
1000cc3a:	895b      	ldrh	r3, [r3, #10]
1000cc3c:	617b      	str	r3, [r7, #20]
	vr = &vq->vq_ring;
1000cc3e:	68fb      	ldr	r3, [r7, #12]
1000cc40:	3314      	adds	r3, #20
1000cc42:	613b      	str	r3, [r7, #16]

	vring_init(vr, size, ring_mem, alignment);
1000cc44:	6979      	ldr	r1, [r7, #20]
1000cc46:	687b      	ldr	r3, [r7, #4]
1000cc48:	68ba      	ldr	r2, [r7, #8]
1000cc4a:	6938      	ldr	r0, [r7, #16]
1000cc4c:	f7ff fdda 	bl	1000c804 <vring_init>
		for (i = 0; i < size - 1; i++)
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
	}
#endif /*VIRTIO_SLAVE_ONLY*/
}
1000cc50:	bf00      	nop
1000cc52:	3718      	adds	r7, #24
1000cc54:	46bd      	mov	sp, r7
1000cc56:	bd80      	pop	{r7, pc}

1000cc58 <vq_ring_must_notify>:
 *
 * vq_ring_must_notify
 *
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
1000cc58:	b580      	push	{r7, lr}
1000cc5a:	b084      	sub	sp, #16
1000cc5c:	af00      	add	r7, sp, #0
1000cc5e:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
1000cc60:	6879      	ldr	r1, [r7, #4]
1000cc62:	6809      	ldr	r1, [r1, #0]
1000cc64:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
1000cc68:	f000 5200 	and.w	r2, r0, #536870912	; 0x20000000
1000cc6c:	2300      	movs	r3, #0
1000cc6e:	4313      	orrs	r3, r2
1000cc70:	d02a      	beq.n	1000ccc8 <vq_ring_must_notify+0x70>
			return vring_need_event(event_idx, new_idx,
						prev_idx) != 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000cc72:	687b      	ldr	r3, [r7, #4]
1000cc74:	681b      	ldr	r3, [r3, #0]
1000cc76:	699b      	ldr	r3, [r3, #24]
1000cc78:	2b01      	cmp	r3, #1
1000cc7a:	d136      	bne.n	1000ccea <vq_ring_must_notify+0x92>
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
1000cc7c:	687b      	ldr	r3, [r7, #4]
1000cc7e:	6a1b      	ldr	r3, [r3, #32]
1000cc80:	789a      	ldrb	r2, [r3, #2]
1000cc82:	78db      	ldrb	r3, [r3, #3]
1000cc84:	021b      	lsls	r3, r3, #8
1000cc86:	4313      	orrs	r3, r2
1000cc88:	81fb      	strh	r3, [r7, #14]
			prev_idx = new_idx - vq->vq_queued_cnt;
1000cc8a:	687b      	ldr	r3, [r7, #4]
1000cc8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
1000cc8e:	89fa      	ldrh	r2, [r7, #14]
1000cc90:	1ad3      	subs	r3, r2, r3
1000cc92:	81bb      	strh	r3, [r7, #12]
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
1000cc94:	687b      	ldr	r3, [r7, #4]
1000cc96:	69da      	ldr	r2, [r3, #28]
1000cc98:	687b      	ldr	r3, [r7, #4]
1000cc9a:	6959      	ldr	r1, [r3, #20]
1000cc9c:	004b      	lsls	r3, r1, #1
1000cc9e:	4413      	add	r3, r2
1000cca0:	7918      	ldrb	r0, [r3, #4]
1000cca2:	004b      	lsls	r3, r1, #1
1000cca4:	4413      	add	r3, r2
1000cca6:	795b      	ldrb	r3, [r3, #5]
1000cca8:	021b      	lsls	r3, r3, #8
1000ccaa:	4303      	orrs	r3, r0
1000ccac:	817b      	strh	r3, [r7, #10]
			return vring_need_event(event_idx, new_idx,
1000ccae:	89ba      	ldrh	r2, [r7, #12]
1000ccb0:	89f9      	ldrh	r1, [r7, #14]
1000ccb2:	897b      	ldrh	r3, [r7, #10]
1000ccb4:	4618      	mov	r0, r3
1000ccb6:	f7ff fdce 	bl	1000c856 <vring_need_event>
1000ccba:	4603      	mov	r3, r0
						prev_idx) != 0;
1000ccbc:	2b00      	cmp	r3, #0
1000ccbe:	bf14      	ite	ne
1000ccc0:	2301      	movne	r3, #1
1000ccc2:	2300      	moveq	r3, #0
1000ccc4:	b2db      	uxtb	r3, r3
1000ccc6:	e011      	b.n	1000ccec <vq_ring_must_notify+0x94>
			return (vq->vq_ring.used->flags &
				VRING_USED_F_NO_NOTIFY) == 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000ccc8:	687b      	ldr	r3, [r7, #4]
1000ccca:	681b      	ldr	r3, [r3, #0]
1000cccc:	699b      	ldr	r3, [r3, #24]
1000ccce:	2b01      	cmp	r3, #1
1000ccd0:	d10b      	bne.n	1000ccea <vq_ring_must_notify+0x92>
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
1000ccd2:	687b      	ldr	r3, [r7, #4]
1000ccd4:	69db      	ldr	r3, [r3, #28]
1000ccd6:	881b      	ldrh	r3, [r3, #0]
1000ccd8:	b29b      	uxth	r3, r3
1000ccda:	f003 0301 	and.w	r3, r3, #1
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
1000ccde:	2b00      	cmp	r3, #0
1000cce0:	bf0c      	ite	eq
1000cce2:	2301      	moveq	r3, #1
1000cce4:	2300      	movne	r3, #0
1000cce6:	b2db      	uxtb	r3, r3
1000cce8:	e000      	b.n	1000ccec <vq_ring_must_notify+0x94>
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	return 0;
1000ccea:	2300      	movs	r3, #0
}
1000ccec:	4618      	mov	r0, r3
1000ccee:	3710      	adds	r7, #16
1000ccf0:	46bd      	mov	sp, r7
1000ccf2:	bd80      	pop	{r7, pc}

1000ccf4 <vq_ring_notify>:
 *
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
1000ccf4:	b580      	push	{r7, lr}
1000ccf6:	b082      	sub	sp, #8
1000ccf8:	af00      	add	r7, sp, #0
1000ccfa:	6078      	str	r0, [r7, #4]
	if (vq->notify)
1000ccfc:	687b      	ldr	r3, [r7, #4]
1000ccfe:	691b      	ldr	r3, [r3, #16]
1000cd00:	2b00      	cmp	r3, #0
1000cd02:	d003      	beq.n	1000cd0c <vq_ring_notify+0x18>
		vq->notify(vq);
1000cd04:	687b      	ldr	r3, [r7, #4]
1000cd06:	691b      	ldr	r3, [r3, #16]
1000cd08:	6878      	ldr	r0, [r7, #4]
1000cd0a:	4798      	blx	r3
}
1000cd0c:	bf00      	nop
1000cd0e:	3708      	adds	r7, #8
1000cd10:	46bd      	mov	sp, r7
1000cd12:	bd80      	pop	{r7, pc}

1000cd14 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
1000cd14:	b580      	push	{r7, lr}
1000cd16:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN PRE_MAILBOX_INIT */

   /* USER CODE END  PRE_MAILBOX_INIT */

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_1, IPCC_CHANNEL_DIR_RX,
1000cd18:	4b0d      	ldr	r3, [pc, #52]	; (1000cd50 <MAILBOX_Init+0x3c>)
1000cd1a:	2201      	movs	r2, #1
1000cd1c:	2100      	movs	r1, #0
1000cd1e:	480d      	ldr	r0, [pc, #52]	; (1000cd54 <MAILBOX_Init+0x40>)
1000cd20:	f7f7 f812 	bl	10003d48 <HAL_IPCC_ActivateNotification>
1000cd24:	4603      	mov	r3, r0
1000cd26:	2b00      	cmp	r3, #0
1000cd28:	d002      	beq.n	1000cd30 <MAILBOX_Init+0x1c>
          IPCC_channel1_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_1 RX fail\n", __func__);
    return -1;
1000cd2a:	f04f 33ff 	mov.w	r3, #4294967295
1000cd2e:	e00c      	b.n	1000cd4a <MAILBOX_Init+0x36>
  }

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_2, IPCC_CHANNEL_DIR_RX,
1000cd30:	4b09      	ldr	r3, [pc, #36]	; (1000cd58 <MAILBOX_Init+0x44>)
1000cd32:	2201      	movs	r2, #1
1000cd34:	2101      	movs	r1, #1
1000cd36:	4807      	ldr	r0, [pc, #28]	; (1000cd54 <MAILBOX_Init+0x40>)
1000cd38:	f7f7 f806 	bl	10003d48 <HAL_IPCC_ActivateNotification>
1000cd3c:	4603      	mov	r3, r0
1000cd3e:	2b00      	cmp	r3, #0
1000cd40:	d002      	beq.n	1000cd48 <MAILBOX_Init+0x34>
          IPCC_channel2_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_2 RX fail\n", __func__);
    return -1;
1000cd42:	f04f 33ff 	mov.w	r3, #4294967295
1000cd46:	e000      	b.n	1000cd4a <MAILBOX_Init+0x36>
  }

  /* USER CODE BEGIN POST_MAILBOX_INIT */

  /* USER CODE END  POST_MAILBOX_INIT */
  return 0;
1000cd48:	2300      	movs	r3, #0
}
1000cd4a:	4618      	mov	r0, r3
1000cd4c:	bd80      	pop	{r7, pc}
1000cd4e:	bf00      	nop
1000cd50:	1000cdc1 	.word	0x1000cdc1
1000cd54:	10020308 	.word	0x10020308
1000cd58:	1000cded 	.word	0x1000cded

1000cd5c <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
1000cd5c:	b580      	push	{r7, lr}
1000cd5e:	b084      	sub	sp, #16
1000cd60:	af00      	add	r7, sp, #0
1000cd62:	6078      	str	r0, [r7, #4]
1000cd64:	6039      	str	r1, [r7, #0]
   /* USER CODE BEGIN PRE_MAILBOX_NOTIFY */

   /* USER CODE END  PRE_MAILBOX_NOTIFY */

  /* Called after virtqueue processing: time to inform the remote */
  if (id == VRING0_ID) {
1000cd66:	683b      	ldr	r3, [r7, #0]
1000cd68:	2b00      	cmp	r3, #0
1000cd6a:	d102      	bne.n	1000cd72 <MAILBOX_Notify+0x16>
    channel = IPCC_CHANNEL_1;
1000cd6c:	2300      	movs	r3, #0
1000cd6e:	60fb      	str	r3, [r7, #12]
1000cd70:	e008      	b.n	1000cd84 <MAILBOX_Notify+0x28>
    OPENAMP_log_dbg("Send msg on ch_1\r\n");
  }
  else if (id == VRING1_ID) {
1000cd72:	683b      	ldr	r3, [r7, #0]
1000cd74:	2b01      	cmp	r3, #1
1000cd76:	d102      	bne.n	1000cd7e <MAILBOX_Notify+0x22>
    /* Note: the OpenAMP framework never notifies this */
    channel = IPCC_CHANNEL_2;
1000cd78:	2301      	movs	r3, #1
1000cd7a:	60fb      	str	r3, [r7, #12]
1000cd7c:	e002      	b.n	1000cd84 <MAILBOX_Notify+0x28>
    OPENAMP_log_dbg("Send 'buff free' on ch_2\r\n");
  }
  else {
    OPENAMP_log_err("invalid vring (%d)\r\n", (int)id);
    return -1;
1000cd7e:	f04f 33ff 	mov.w	r3, #4294967295
1000cd82:	e016      	b.n	1000cdb2 <MAILBOX_Notify+0x56>
  }

  /* Check that the channel is free (otherwise wait until it is) */
  if (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED) {
1000cd84:	2200      	movs	r2, #0
1000cd86:	68f9      	ldr	r1, [r7, #12]
1000cd88:	480c      	ldr	r0, [pc, #48]	; (1000cdbc <MAILBOX_Notify+0x60>)
1000cd8a:	f7f7 f82b 	bl	10003de4 <HAL_IPCC_GetChannelStatus>
1000cd8e:	4603      	mov	r3, r0
1000cd90:	2b01      	cmp	r3, #1
1000cd92:	d108      	bne.n	1000cda6 <MAILBOX_Notify+0x4a>
    OPENAMP_log_dbg("Waiting for channel to be freed\r\n");
    while (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED)
1000cd94:	bf00      	nop
1000cd96:	2200      	movs	r2, #0
1000cd98:	68f9      	ldr	r1, [r7, #12]
1000cd9a:	4808      	ldr	r0, [pc, #32]	; (1000cdbc <MAILBOX_Notify+0x60>)
1000cd9c:	f7f7 f822 	bl	10003de4 <HAL_IPCC_GetChannelStatus>
1000cda0:	4603      	mov	r3, r0
1000cda2:	2b01      	cmp	r3, #1
1000cda4:	d0f7      	beq.n	1000cd96 <MAILBOX_Notify+0x3a>
      ;
  }

  /* Inform A7 (either new message, or buf free) */
  HAL_IPCC_NotifyCPU(&hipcc, channel, IPCC_CHANNEL_DIR_TX);
1000cda6:	2200      	movs	r2, #0
1000cda8:	68f9      	ldr	r1, [r7, #12]
1000cdaa:	4804      	ldr	r0, [pc, #16]	; (1000cdbc <MAILBOX_Notify+0x60>)
1000cdac:	f7f7 f84e 	bl	10003e4c <HAL_IPCC_NotifyCPU>

 /* USER CODE BEGIN POST_MAILBOX_NOTIFY */

 /* USER CODE END  POST_MAILBOX_NOTIFY */

  return 0;
1000cdb0:	2300      	movs	r3, #0
}
1000cdb2:	4618      	mov	r0, r3
1000cdb4:	3710      	adds	r7, #16
1000cdb6:	46bd      	mov	sp, r7
1000cdb8:	bd80      	pop	{r7, pc}
1000cdba:	bf00      	nop
1000cdbc:	10020308 	.word	0x10020308

1000cdc0 <IPCC_channel1_callback>:

/* USER CODE END 0 */
/* Callback from IPCC Interrupt Handler: Master Processor informs that there are some free buffers */
void IPCC_channel1_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
1000cdc0:	b580      	push	{r7, lr}
1000cdc2:	b084      	sub	sp, #16
1000cdc4:	af00      	add	r7, sp, #0
1000cdc6:	60f8      	str	r0, [r7, #12]
1000cdc8:	60b9      	str	r1, [r7, #8]
1000cdca:	4613      	mov	r3, r2
1000cdcc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL1_CALLBACK */

  if (msg_received_ch1 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel1_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch1);

  msg_received_ch1 = MBOX_BUF_FREE;
1000cdce:	4b06      	ldr	r3, [pc, #24]	; (1000cde8 <IPCC_channel1_callback+0x28>)
1000cdd0:	2202      	movs	r2, #2
1000cdd2:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the 'buff free' msg */
  OPENAMP_log_dbg("Ack 'buff free' message on ch1\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
1000cdd4:	2201      	movs	r2, #1
1000cdd6:	68b9      	ldr	r1, [r7, #8]
1000cdd8:	68f8      	ldr	r0, [r7, #12]
1000cdda:	f7f7 f837 	bl	10003e4c <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL1_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL1_CALLBACK */
}
1000cdde:	bf00      	nop
1000cde0:	3710      	adds	r7, #16
1000cde2:	46bd      	mov	sp, r7
1000cde4:	bd80      	pop	{r7, pc}
1000cde6:	bf00      	nop
1000cde8:	10020404 	.word	0x10020404

1000cdec <IPCC_channel2_callback>:

/* Callback from IPCC Interrupt Handler: new message received from Master Processor */
void IPCC_channel2_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
1000cdec:	b580      	push	{r7, lr}
1000cdee:	b084      	sub	sp, #16
1000cdf0:	af00      	add	r7, sp, #0
1000cdf2:	60f8      	str	r0, [r7, #12]
1000cdf4:	60b9      	str	r1, [r7, #8]
1000cdf6:	4613      	mov	r3, r2
1000cdf8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL2_CALLBACK */

  if (msg_received_ch2 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel2_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch2);

  msg_received_ch2 = MBOX_NEW_MSG;
1000cdfa:	4b06      	ldr	r3, [pc, #24]	; (1000ce14 <IPCC_channel2_callback+0x28>)
1000cdfc:	2201      	movs	r2, #1
1000cdfe:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the new msg */
  OPENAMP_log_dbg("Ack new message on ch2\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
1000ce00:	2201      	movs	r2, #1
1000ce02:	68b9      	ldr	r1, [r7, #8]
1000ce04:	68f8      	ldr	r0, [r7, #12]
1000ce06:	f7f7 f821 	bl	10003e4c <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL2_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL2_CALLBACK */
}
1000ce0a:	bf00      	nop
1000ce0c:	3710      	adds	r7, #16
1000ce0e:	46bd      	mov	sp, r7
1000ce10:	bd80      	pop	{r7, pc}
1000ce12:	bf00      	nop
1000ce14:	10020408 	.word	0x10020408

1000ce18 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
1000ce18:	b480      	push	{r7}
1000ce1a:	b083      	sub	sp, #12
1000ce1c:	af00      	add	r7, sp, #0
1000ce1e:	6078      	str	r0, [r7, #4]
1000ce20:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
1000ce22:	687b      	ldr	r3, [r7, #4]
1000ce24:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
1000ce26:	683a      	ldr	r2, [r7, #0]
1000ce28:	429a      	cmp	r2, r3
1000ce2a:	d209      	bcs.n	1000ce40 <metal_device_io_region+0x28>
1000ce2c:	683a      	ldr	r2, [r7, #0]
1000ce2e:	4613      	mov	r3, r2
1000ce30:	00db      	lsls	r3, r3, #3
1000ce32:	1a9b      	subs	r3, r3, r2
1000ce34:	00db      	lsls	r3, r3, #3
1000ce36:	3308      	adds	r3, #8
1000ce38:	687a      	ldr	r2, [r7, #4]
1000ce3a:	4413      	add	r3, r2
1000ce3c:	3304      	adds	r3, #4
1000ce3e:	e000      	b.n	1000ce42 <metal_device_io_region+0x2a>
1000ce40:	2300      	movs	r3, #0
}
1000ce42:	4618      	mov	r0, r3
1000ce44:	370c      	adds	r7, #12
1000ce46:	46bd      	mov	sp, r7
1000ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
1000ce4c:	4770      	bx	lr
	...

1000ce50 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
1000ce50:	b590      	push	{r4, r7, lr}
1000ce52:	b08d      	sub	sp, #52	; 0x34
1000ce54:	af04      	add	r7, sp, #16
1000ce56:	6078      	str	r0, [r7, #4]
  int status = 0;
1000ce58:	2300      	movs	r3, #0
1000ce5a:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
1000ce5c:	2300      	movs	r3, #0
1000ce5e:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
1000ce60:	4a41      	ldr	r2, [pc, #260]	; (1000cf68 <OPENAMP_shmem_init+0x118>)
1000ce62:	f107 0310 	add.w	r3, r7, #16
1000ce66:	e892 0003 	ldmia.w	r2, {r0, r1}
1000ce6a:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
1000ce6e:	2300      	movs	r3, #0
1000ce70:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
1000ce72:	2300      	movs	r3, #0
1000ce74:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
1000ce76:	f107 0310 	add.w	r3, r7, #16
1000ce7a:	4618      	mov	r0, r3
1000ce7c:	f7fe fa5c 	bl	1000b338 <metal_init>

  status = metal_register_generic_device(&shm_device);
1000ce80:	483a      	ldr	r0, [pc, #232]	; (1000cf6c <OPENAMP_shmem_init+0x11c>)
1000ce82:	f7fe f903 	bl	1000b08c <metal_register_generic_device>
1000ce86:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
1000ce88:	69fb      	ldr	r3, [r7, #28]
1000ce8a:	2b00      	cmp	r3, #0
1000ce8c:	d001      	beq.n	1000ce92 <OPENAMP_shmem_init+0x42>
    return status;
1000ce8e:	69fb      	ldr	r3, [r7, #28]
1000ce90:	e066      	b.n	1000cf60 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
1000ce92:	f107 0318 	add.w	r3, r7, #24
1000ce96:	461a      	mov	r2, r3
1000ce98:	4935      	ldr	r1, [pc, #212]	; (1000cf70 <OPENAMP_shmem_init+0x120>)
1000ce9a:	4836      	ldr	r0, [pc, #216]	; (1000cf74 <OPENAMP_shmem_init+0x124>)
1000ce9c:	f7fe f8b8 	bl	1000b010 <metal_device_open>
1000cea0:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
1000cea2:	69fb      	ldr	r3, [r7, #28]
1000cea4:	2b00      	cmp	r3, #0
1000cea6:	d001      	beq.n	1000ceac <OPENAMP_shmem_init+0x5c>
    return status;
1000cea8:	69fb      	ldr	r3, [r7, #28]
1000ceaa:	e059      	b.n	1000cf60 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
1000ceac:	4a32      	ldr	r2, [pc, #200]	; (1000cf78 <OPENAMP_shmem_init+0x128>)
1000ceae:	4b33      	ldr	r3, [pc, #204]	; (1000cf7c <OPENAMP_shmem_init+0x12c>)
1000ceb0:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
1000ceb2:	69bb      	ldr	r3, [r7, #24]
1000ceb4:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, (unsigned int)-1, 0, NULL);
1000ceb8:	4a31      	ldr	r2, [pc, #196]	; (1000cf80 <OPENAMP_shmem_init+0x130>)
1000ceba:	4b2f      	ldr	r3, [pc, #188]	; (1000cf78 <OPENAMP_shmem_init+0x128>)
1000cebc:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
1000cebe:	461a      	mov	r2, r3
1000cec0:	2300      	movs	r3, #0
1000cec2:	9302      	str	r3, [sp, #8]
1000cec4:	2300      	movs	r3, #0
1000cec6:	9301      	str	r3, [sp, #4]
1000cec8:	f04f 33ff 	mov.w	r3, #4294967295
1000cecc:	9300      	str	r3, [sp, #0]
1000cece:	4613      	mov	r3, r2
1000ced0:	4a2a      	ldr	r2, [pc, #168]	; (1000cf7c <OPENAMP_shmem_init+0x12c>)
1000ced2:	4929      	ldr	r1, [pc, #164]	; (1000cf78 <OPENAMP_shmem_init+0x128>)
1000ced4:	f7fe fa7e 	bl	1000b3d4 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
1000ced8:	69bb      	ldr	r3, [r7, #24]
1000ceda:	2100      	movs	r1, #0
1000cedc:	4618      	mov	r0, r3
1000cede:	f7ff ff9b 	bl	1000ce18 <metal_device_io_region>
1000cee2:	4603      	mov	r3, r0
1000cee4:	4a27      	ldr	r2, [pc, #156]	; (1000cf84 <OPENAMP_shmem_init+0x134>)
1000cee6:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
1000cee8:	4b26      	ldr	r3, [pc, #152]	; (1000cf84 <OPENAMP_shmem_init+0x134>)
1000ceea:	681b      	ldr	r3, [r3, #0]
1000ceec:	2b00      	cmp	r3, #0
1000ceee:	d102      	bne.n	1000cef6 <OPENAMP_shmem_init+0xa6>
    return -1;
1000cef0:	f04f 33ff 	mov.w	r3, #4294967295
1000cef4:	e034      	b.n	1000cf60 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
1000cef6:	f107 0208 	add.w	r2, r7, #8
1000cefa:	f107 030c 	add.w	r3, r7, #12
1000cefe:	4619      	mov	r1, r3
1000cf00:	6878      	ldr	r0, [r7, #4]
1000cf02:	f000 f8d9 	bl	1000d0b8 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
1000cf06:	68fb      	ldr	r3, [r7, #12]
1000cf08:	4a1f      	ldr	r2, [pc, #124]	; (1000cf88 <OPENAMP_shmem_init+0x138>)
1000cf0a:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
1000cf0c:	4b1e      	ldr	r3, [pc, #120]	; (1000cf88 <OPENAMP_shmem_init+0x138>)
1000cf0e:	681b      	ldr	r3, [r3, #0]
1000cf10:	2b00      	cmp	r3, #0
1000cf12:	d102      	bne.n	1000cf1a <OPENAMP_shmem_init+0xca>
  {
    return -1;
1000cf14:	f04f 33ff 	mov.w	r3, #4294967295
1000cf18:	e022      	b.n	1000cf60 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
1000cf1a:	69bb      	ldr	r3, [r7, #24]
1000cf1c:	f103 0044 	add.w	r0, r3, #68	; 0x44
1000cf20:	4b19      	ldr	r3, [pc, #100]	; (1000cf88 <OPENAMP_shmem_init+0x138>)
1000cf22:	6819      	ldr	r1, [r3, #0]
1000cf24:	4b18      	ldr	r3, [pc, #96]	; (1000cf88 <OPENAMP_shmem_init+0x138>)
1000cf26:	681a      	ldr	r2, [r3, #0]
1000cf28:	68bb      	ldr	r3, [r7, #8]
1000cf2a:	461c      	mov	r4, r3
1000cf2c:	2300      	movs	r3, #0
1000cf2e:	9302      	str	r3, [sp, #8]
1000cf30:	2300      	movs	r3, #0
1000cf32:	9301      	str	r3, [sp, #4]
1000cf34:	f04f 33ff 	mov.w	r3, #4294967295
1000cf38:	9300      	str	r3, [sp, #0]
1000cf3a:	4623      	mov	r3, r4
1000cf3c:	f7fe fa4a 	bl	1000b3d4 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
1000cf40:	69bb      	ldr	r3, [r7, #24]
1000cf42:	2101      	movs	r1, #1
1000cf44:	4618      	mov	r0, r3
1000cf46:	f7ff ff67 	bl	1000ce18 <metal_device_io_region>
1000cf4a:	4603      	mov	r3, r0
1000cf4c:	4a0f      	ldr	r2, [pc, #60]	; (1000cf8c <OPENAMP_shmem_init+0x13c>)
1000cf4e:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
1000cf50:	4b0e      	ldr	r3, [pc, #56]	; (1000cf8c <OPENAMP_shmem_init+0x13c>)
1000cf52:	681b      	ldr	r3, [r3, #0]
1000cf54:	2b00      	cmp	r3, #0
1000cf56:	d102      	bne.n	1000cf5e <OPENAMP_shmem_init+0x10e>
    return -1;
1000cf58:	f04f 33ff 	mov.w	r3, #4294967295
1000cf5c:	e000      	b.n	1000cf60 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
1000cf5e:	2300      	movs	r3, #0
}
1000cf60:	4618      	mov	r0, r3
1000cf62:	3724      	adds	r7, #36	; 0x24
1000cf64:	46bd      	mov	sp, r7
1000cf66:	bd90      	pop	{r4, r7, pc}
1000cf68:	1000e7f8 	.word	0x1000e7f8
1000cf6c:	10020038 	.word	0x10020038
1000cf70:	1000e7e4 	.word	0x1000e7e4
1000cf74:	1000e7f0 	.word	0x1000e7f0
1000cf78:	10040000 	.word	0x10040000
1000cf7c:	100204b0 	.word	0x100204b0
1000cf80:	10050000 	.word	0x10050000
1000cf84:	1002040c 	.word	0x1002040c
1000cf88:	10020414 	.word	0x10020414
1000cf8c:	10020410 	.word	0x10020410

1000cf90 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
1000cf90:	b590      	push	{r4, r7, lr}
1000cf92:	b08b      	sub	sp, #44	; 0x2c
1000cf94:	af04      	add	r7, sp, #16
1000cf96:	6078      	str	r0, [r7, #4]
1000cf98:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
1000cf9a:	2300      	movs	r3, #0
1000cf9c:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
1000cf9e:	2300      	movs	r3, #0
1000cfa0:	613b      	str	r3, [r7, #16]
  int status = 0;
1000cfa2:	2300      	movs	r3, #0
1000cfa4:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
1000cfa6:	f7ff feb5 	bl	1000cd14 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
1000cfaa:	6878      	ldr	r0, [r7, #4]
1000cfac:	f7ff ff50 	bl	1000ce50 <OPENAMP_shmem_init>
1000cfb0:	60f8      	str	r0, [r7, #12]
  if(status)
1000cfb2:	68fb      	ldr	r3, [r7, #12]
1000cfb4:	2b00      	cmp	r3, #0
1000cfb6:	d001      	beq.n	1000cfbc <MX_OPENAMP_Init+0x2c>
  {
    return status;
1000cfb8:	68fb      	ldr	r3, [r7, #12]
1000cfba:	e068      	b.n	1000d08e <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
1000cfbc:	6878      	ldr	r0, [r7, #4]
1000cfbe:	4b36      	ldr	r3, [pc, #216]	; (1000d098 <MX_OPENAMP_Init+0x108>)
1000cfc0:	681b      	ldr	r3, [r3, #0]
1000cfc2:	f103 0218 	add.w	r2, r3, #24
1000cfc6:	4b35      	ldr	r3, [pc, #212]	; (1000d09c <MX_OPENAMP_Init+0x10c>)
1000cfc8:	681b      	ldr	r3, [r3, #0]
1000cfca:	2100      	movs	r1, #0
1000cfcc:	9102      	str	r1, [sp, #8]
1000cfce:	4934      	ldr	r1, [pc, #208]	; (1000d0a0 <MX_OPENAMP_Init+0x110>)
1000cfd0:	9101      	str	r1, [sp, #4]
1000cfd2:	2100      	movs	r1, #0
1000cfd4:	9100      	str	r1, [sp, #0]
1000cfd6:	21ff      	movs	r1, #255	; 0xff
1000cfd8:	f7fe fcfa 	bl	1000b9d0 <rproc_virtio_create_vdev>
1000cfdc:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
1000cfde:	693b      	ldr	r3, [r7, #16]
1000cfe0:	2b00      	cmp	r3, #0
1000cfe2:	d102      	bne.n	1000cfea <MX_OPENAMP_Init+0x5a>
  {
    return -1;
1000cfe4:	f04f 33ff 	mov.w	r3, #4294967295
1000cfe8:	e051      	b.n	1000d08e <MX_OPENAMP_Init+0xfe>
  }

  rproc_virtio_wait_remote_ready(vdev);
1000cfea:	6938      	ldr	r0, [r7, #16]
1000cfec:	f7fe fdcf 	bl	1000bb8e <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
1000cff0:	4b29      	ldr	r3, [pc, #164]	; (1000d098 <MX_OPENAMP_Init+0x108>)
1000cff2:	681b      	ldr	r3, [r3, #0]
1000cff4:	3334      	adds	r3, #52	; 0x34
1000cff6:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
1000cff8:	697b      	ldr	r3, [r7, #20]
1000cffa:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
1000cffc:	697b      	ldr	r3, [r7, #20]
1000cffe:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
1000d000:	461c      	mov	r4, r3
1000d002:	4b28      	ldr	r3, [pc, #160]	; (1000d0a4 <MX_OPENAMP_Init+0x114>)
1000d004:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
1000d006:	697a      	ldr	r2, [r7, #20]
1000d008:	6892      	ldr	r2, [r2, #8]
1000d00a:	6979      	ldr	r1, [r7, #20]
1000d00c:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
1000d00e:	9102      	str	r1, [sp, #8]
1000d010:	9201      	str	r2, [sp, #4]
1000d012:	9300      	str	r3, [sp, #0]
1000d014:	4623      	mov	r3, r4
1000d016:	4602      	mov	r2, r0
1000d018:	2100      	movs	r1, #0
1000d01a:	6938      	ldr	r0, [r7, #16]
1000d01c:	f7fe fd86 	bl	1000bb2c <rproc_virtio_init_vring>
1000d020:	60f8      	str	r0, [r7, #12]
  if (status != 0)
1000d022:	68fb      	ldr	r3, [r7, #12]
1000d024:	2b00      	cmp	r3, #0
1000d026:	d001      	beq.n	1000d02c <MX_OPENAMP_Init+0x9c>
  {
    return status;
1000d028:	68fb      	ldr	r3, [r7, #12]
1000d02a:	e030      	b.n	1000d08e <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
1000d02c:	4b1a      	ldr	r3, [pc, #104]	; (1000d098 <MX_OPENAMP_Init+0x108>)
1000d02e:	681b      	ldr	r3, [r3, #0]
1000d030:	3348      	adds	r3, #72	; 0x48
1000d032:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
1000d034:	697b      	ldr	r3, [r7, #20]
1000d036:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
1000d038:	697b      	ldr	r3, [r7, #20]
1000d03a:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
1000d03c:	461c      	mov	r4, r3
1000d03e:	4b19      	ldr	r3, [pc, #100]	; (1000d0a4 <MX_OPENAMP_Init+0x114>)
1000d040:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
1000d042:	697a      	ldr	r2, [r7, #20]
1000d044:	6892      	ldr	r2, [r2, #8]
1000d046:	6979      	ldr	r1, [r7, #20]
1000d048:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
1000d04a:	9102      	str	r1, [sp, #8]
1000d04c:	9201      	str	r2, [sp, #4]
1000d04e:	9300      	str	r3, [sp, #0]
1000d050:	4623      	mov	r3, r4
1000d052:	4602      	mov	r2, r0
1000d054:	2101      	movs	r1, #1
1000d056:	6938      	ldr	r0, [r7, #16]
1000d058:	f7fe fd68 	bl	1000bb2c <rproc_virtio_init_vring>
1000d05c:	60f8      	str	r0, [r7, #12]
  if (status != 0)
1000d05e:	68fb      	ldr	r3, [r7, #12]
1000d060:	2b00      	cmp	r3, #0
1000d062:	d001      	beq.n	1000d068 <MX_OPENAMP_Init+0xd8>
  {
    return status;
1000d064:	68fb      	ldr	r3, [r7, #12]
1000d066:	e012      	b.n	1000d08e <MX_OPENAMP_Init+0xfe>
  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
                             (size_t)SHM_SIZE);
1000d068:	4a0f      	ldr	r2, [pc, #60]	; (1000d0a8 <MX_OPENAMP_Init+0x118>)
1000d06a:	4b10      	ldr	r3, [pc, #64]	; (1000d0ac <MX_OPENAMP_Init+0x11c>)
1000d06c:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
1000d06e:	461a      	mov	r2, r3
1000d070:	f04f 31ff 	mov.w	r1, #4294967295
1000d074:	480e      	ldr	r0, [pc, #56]	; (1000d0b0 <MX_OPENAMP_Init+0x120>)
1000d076:	f7fe ff86 	bl	1000bf86 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
1000d07a:	4b0a      	ldr	r3, [pc, #40]	; (1000d0a4 <MX_OPENAMP_Init+0x114>)
1000d07c:	681b      	ldr	r3, [r3, #0]
1000d07e:	4a0c      	ldr	r2, [pc, #48]	; (1000d0b0 <MX_OPENAMP_Init+0x120>)
1000d080:	9200      	str	r2, [sp, #0]
1000d082:	683a      	ldr	r2, [r7, #0]
1000d084:	6939      	ldr	r1, [r7, #16]
1000d086:	480b      	ldr	r0, [pc, #44]	; (1000d0b4 <MX_OPENAMP_Init+0x124>)
1000d088:	f7ff fa7a 	bl	1000c580 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
1000d08c:	2300      	movs	r3, #0
}
1000d08e:	4618      	mov	r0, r3
1000d090:	371c      	adds	r7, #28
1000d092:	46bd      	mov	sp, r7
1000d094:	bd90      	pop	{r4, r7, pc}
1000d096:	bf00      	nop
1000d098:	10020414 	.word	0x10020414
1000d09c:	10020410 	.word	0x10020410
1000d0a0:	1000cd5d 	.word	0x1000cd5d
1000d0a4:	1002040c 	.word	0x1002040c
1000d0a8:	10050000 	.word	0x10050000
1000d0ac:	10040000 	.word	0x10040000
1000d0b0:	10020418 	.word	0x10020418
1000d0b4:	10020424 	.word	0x10020424

1000d0b8 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
1000d0b8:	b480      	push	{r7}
1000d0ba:	b085      	sub	sp, #20
1000d0bc:	af00      	add	r7, sp, #0
1000d0be:	60f8      	str	r0, [r7, #12]
1000d0c0:	60b9      	str	r1, [r7, #8]
1000d0c2:	607a      	str	r2, [r7, #4]
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
1000d0c4:	687b      	ldr	r3, [r7, #4]
1000d0c6:	228c      	movs	r2, #140	; 0x8c
1000d0c8:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
1000d0ca:	68bb      	ldr	r3, [r7, #8]
1000d0cc:	4a03      	ldr	r2, [pc, #12]	; (1000d0dc <resource_table_init+0x24>)
1000d0ce:	601a      	str	r2, [r3, #0]
}
1000d0d0:	bf00      	nop
1000d0d2:	3714      	adds	r7, #20
1000d0d4:	46bd      	mov	sp, r7
1000d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
1000d0da:	4770      	bx	lr
1000d0dc:	10020120 	.word	0x10020120

1000d0e0 <__assert_func>:
1000d0e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000d0e2:	4614      	mov	r4, r2
1000d0e4:	461a      	mov	r2, r3
1000d0e6:	4b09      	ldr	r3, [pc, #36]	; (1000d10c <__assert_func+0x2c>)
1000d0e8:	681b      	ldr	r3, [r3, #0]
1000d0ea:	4605      	mov	r5, r0
1000d0ec:	68d8      	ldr	r0, [r3, #12]
1000d0ee:	b14c      	cbz	r4, 1000d104 <__assert_func+0x24>
1000d0f0:	4b07      	ldr	r3, [pc, #28]	; (1000d110 <__assert_func+0x30>)
1000d0f2:	9100      	str	r1, [sp, #0]
1000d0f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
1000d0f8:	4906      	ldr	r1, [pc, #24]	; (1000d114 <__assert_func+0x34>)
1000d0fa:	462b      	mov	r3, r5
1000d0fc:	f000 f96e 	bl	1000d3dc <fiprintf>
1000d100:	f000 fabd 	bl	1000d67e <abort>
1000d104:	4b04      	ldr	r3, [pc, #16]	; (1000d118 <__assert_func+0x38>)
1000d106:	461c      	mov	r4, r3
1000d108:	e7f3      	b.n	1000d0f2 <__assert_func+0x12>
1000d10a:	bf00      	nop
1000d10c:	1002011c 	.word	0x1002011c
1000d110:	1000e8bd 	.word	0x1000e8bd
1000d114:	1000e8ca 	.word	0x1000e8ca
1000d118:	1000e8f8 	.word	0x1000e8f8

1000d11c <malloc>:
1000d11c:	4b02      	ldr	r3, [pc, #8]	; (1000d128 <malloc+0xc>)
1000d11e:	4601      	mov	r1, r0
1000d120:	6818      	ldr	r0, [r3, #0]
1000d122:	f000 b82b 	b.w	1000d17c <_malloc_r>
1000d126:	bf00      	nop
1000d128:	1002011c 	.word	0x1002011c

1000d12c <free>:
1000d12c:	4b02      	ldr	r3, [pc, #8]	; (1000d138 <free+0xc>)
1000d12e:	4601      	mov	r1, r0
1000d130:	6818      	ldr	r0, [r3, #0]
1000d132:	f000 baab 	b.w	1000d68c <_free_r>
1000d136:	bf00      	nop
1000d138:	1002011c 	.word	0x1002011c

1000d13c <sbrk_aligned>:
1000d13c:	b570      	push	{r4, r5, r6, lr}
1000d13e:	4e0e      	ldr	r6, [pc, #56]	; (1000d178 <sbrk_aligned+0x3c>)
1000d140:	460c      	mov	r4, r1
1000d142:	6831      	ldr	r1, [r6, #0]
1000d144:	4605      	mov	r5, r0
1000d146:	b911      	cbnz	r1, 1000d14e <sbrk_aligned+0x12>
1000d148:	f000 fa3c 	bl	1000d5c4 <_sbrk_r>
1000d14c:	6030      	str	r0, [r6, #0]
1000d14e:	4621      	mov	r1, r4
1000d150:	4628      	mov	r0, r5
1000d152:	f000 fa37 	bl	1000d5c4 <_sbrk_r>
1000d156:	1c43      	adds	r3, r0, #1
1000d158:	d00a      	beq.n	1000d170 <sbrk_aligned+0x34>
1000d15a:	1cc4      	adds	r4, r0, #3
1000d15c:	f024 0403 	bic.w	r4, r4, #3
1000d160:	42a0      	cmp	r0, r4
1000d162:	d007      	beq.n	1000d174 <sbrk_aligned+0x38>
1000d164:	1a21      	subs	r1, r4, r0
1000d166:	4628      	mov	r0, r5
1000d168:	f000 fa2c 	bl	1000d5c4 <_sbrk_r>
1000d16c:	3001      	adds	r0, #1
1000d16e:	d101      	bne.n	1000d174 <sbrk_aligned+0x38>
1000d170:	f04f 34ff 	mov.w	r4, #4294967295
1000d174:	4620      	mov	r0, r4
1000d176:	bd70      	pop	{r4, r5, r6, pc}
1000d178:	100204b8 	.word	0x100204b8

1000d17c <_malloc_r>:
1000d17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1000d180:	1ccd      	adds	r5, r1, #3
1000d182:	f025 0503 	bic.w	r5, r5, #3
1000d186:	3508      	adds	r5, #8
1000d188:	2d0c      	cmp	r5, #12
1000d18a:	bf38      	it	cc
1000d18c:	250c      	movcc	r5, #12
1000d18e:	2d00      	cmp	r5, #0
1000d190:	4607      	mov	r7, r0
1000d192:	db01      	blt.n	1000d198 <_malloc_r+0x1c>
1000d194:	42a9      	cmp	r1, r5
1000d196:	d905      	bls.n	1000d1a4 <_malloc_r+0x28>
1000d198:	230c      	movs	r3, #12
1000d19a:	603b      	str	r3, [r7, #0]
1000d19c:	2600      	movs	r6, #0
1000d19e:	4630      	mov	r0, r6
1000d1a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000d1a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 1000d278 <_malloc_r+0xfc>
1000d1a8:	f000 f868 	bl	1000d27c <__malloc_lock>
1000d1ac:	f8d8 3000 	ldr.w	r3, [r8]
1000d1b0:	461c      	mov	r4, r3
1000d1b2:	bb5c      	cbnz	r4, 1000d20c <_malloc_r+0x90>
1000d1b4:	4629      	mov	r1, r5
1000d1b6:	4638      	mov	r0, r7
1000d1b8:	f7ff ffc0 	bl	1000d13c <sbrk_aligned>
1000d1bc:	1c43      	adds	r3, r0, #1
1000d1be:	4604      	mov	r4, r0
1000d1c0:	d155      	bne.n	1000d26e <_malloc_r+0xf2>
1000d1c2:	f8d8 4000 	ldr.w	r4, [r8]
1000d1c6:	4626      	mov	r6, r4
1000d1c8:	2e00      	cmp	r6, #0
1000d1ca:	d145      	bne.n	1000d258 <_malloc_r+0xdc>
1000d1cc:	2c00      	cmp	r4, #0
1000d1ce:	d048      	beq.n	1000d262 <_malloc_r+0xe6>
1000d1d0:	6823      	ldr	r3, [r4, #0]
1000d1d2:	4631      	mov	r1, r6
1000d1d4:	4638      	mov	r0, r7
1000d1d6:	eb04 0903 	add.w	r9, r4, r3
1000d1da:	f000 f9f3 	bl	1000d5c4 <_sbrk_r>
1000d1de:	4581      	cmp	r9, r0
1000d1e0:	d13f      	bne.n	1000d262 <_malloc_r+0xe6>
1000d1e2:	6821      	ldr	r1, [r4, #0]
1000d1e4:	1a6d      	subs	r5, r5, r1
1000d1e6:	4629      	mov	r1, r5
1000d1e8:	4638      	mov	r0, r7
1000d1ea:	f7ff ffa7 	bl	1000d13c <sbrk_aligned>
1000d1ee:	3001      	adds	r0, #1
1000d1f0:	d037      	beq.n	1000d262 <_malloc_r+0xe6>
1000d1f2:	6823      	ldr	r3, [r4, #0]
1000d1f4:	442b      	add	r3, r5
1000d1f6:	6023      	str	r3, [r4, #0]
1000d1f8:	f8d8 3000 	ldr.w	r3, [r8]
1000d1fc:	2b00      	cmp	r3, #0
1000d1fe:	d038      	beq.n	1000d272 <_malloc_r+0xf6>
1000d200:	685a      	ldr	r2, [r3, #4]
1000d202:	42a2      	cmp	r2, r4
1000d204:	d12b      	bne.n	1000d25e <_malloc_r+0xe2>
1000d206:	2200      	movs	r2, #0
1000d208:	605a      	str	r2, [r3, #4]
1000d20a:	e00f      	b.n	1000d22c <_malloc_r+0xb0>
1000d20c:	6822      	ldr	r2, [r4, #0]
1000d20e:	1b52      	subs	r2, r2, r5
1000d210:	d41f      	bmi.n	1000d252 <_malloc_r+0xd6>
1000d212:	2a0b      	cmp	r2, #11
1000d214:	d917      	bls.n	1000d246 <_malloc_r+0xca>
1000d216:	1961      	adds	r1, r4, r5
1000d218:	42a3      	cmp	r3, r4
1000d21a:	6025      	str	r5, [r4, #0]
1000d21c:	bf18      	it	ne
1000d21e:	6059      	strne	r1, [r3, #4]
1000d220:	6863      	ldr	r3, [r4, #4]
1000d222:	bf08      	it	eq
1000d224:	f8c8 1000 	streq.w	r1, [r8]
1000d228:	5162      	str	r2, [r4, r5]
1000d22a:	604b      	str	r3, [r1, #4]
1000d22c:	4638      	mov	r0, r7
1000d22e:	f104 060b 	add.w	r6, r4, #11
1000d232:	f000 f829 	bl	1000d288 <__malloc_unlock>
1000d236:	f026 0607 	bic.w	r6, r6, #7
1000d23a:	1d23      	adds	r3, r4, #4
1000d23c:	1af2      	subs	r2, r6, r3
1000d23e:	d0ae      	beq.n	1000d19e <_malloc_r+0x22>
1000d240:	1b9b      	subs	r3, r3, r6
1000d242:	50a3      	str	r3, [r4, r2]
1000d244:	e7ab      	b.n	1000d19e <_malloc_r+0x22>
1000d246:	42a3      	cmp	r3, r4
1000d248:	6862      	ldr	r2, [r4, #4]
1000d24a:	d1dd      	bne.n	1000d208 <_malloc_r+0x8c>
1000d24c:	f8c8 2000 	str.w	r2, [r8]
1000d250:	e7ec      	b.n	1000d22c <_malloc_r+0xb0>
1000d252:	4623      	mov	r3, r4
1000d254:	6864      	ldr	r4, [r4, #4]
1000d256:	e7ac      	b.n	1000d1b2 <_malloc_r+0x36>
1000d258:	4634      	mov	r4, r6
1000d25a:	6876      	ldr	r6, [r6, #4]
1000d25c:	e7b4      	b.n	1000d1c8 <_malloc_r+0x4c>
1000d25e:	4613      	mov	r3, r2
1000d260:	e7cc      	b.n	1000d1fc <_malloc_r+0x80>
1000d262:	230c      	movs	r3, #12
1000d264:	603b      	str	r3, [r7, #0]
1000d266:	4638      	mov	r0, r7
1000d268:	f000 f80e 	bl	1000d288 <__malloc_unlock>
1000d26c:	e797      	b.n	1000d19e <_malloc_r+0x22>
1000d26e:	6025      	str	r5, [r4, #0]
1000d270:	e7dc      	b.n	1000d22c <_malloc_r+0xb0>
1000d272:	605b      	str	r3, [r3, #4]
1000d274:	deff      	udf	#255	; 0xff
1000d276:	bf00      	nop
1000d278:	100204b4 	.word	0x100204b4

1000d27c <__malloc_lock>:
1000d27c:	4801      	ldr	r0, [pc, #4]	; (1000d284 <__malloc_lock+0x8>)
1000d27e:	f000 b9ee 	b.w	1000d65e <__retarget_lock_acquire_recursive>
1000d282:	bf00      	nop
1000d284:	100205fc 	.word	0x100205fc

1000d288 <__malloc_unlock>:
1000d288:	4801      	ldr	r0, [pc, #4]	; (1000d290 <__malloc_unlock+0x8>)
1000d28a:	f000 b9e9 	b.w	1000d660 <__retarget_lock_release_recursive>
1000d28e:	bf00      	nop
1000d290:	100205fc 	.word	0x100205fc

1000d294 <std>:
1000d294:	2300      	movs	r3, #0
1000d296:	b510      	push	{r4, lr}
1000d298:	4604      	mov	r4, r0
1000d29a:	e9c0 3300 	strd	r3, r3, [r0]
1000d29e:	e9c0 3304 	strd	r3, r3, [r0, #16]
1000d2a2:	6083      	str	r3, [r0, #8]
1000d2a4:	8181      	strh	r1, [r0, #12]
1000d2a6:	6643      	str	r3, [r0, #100]	; 0x64
1000d2a8:	81c2      	strh	r2, [r0, #14]
1000d2aa:	6183      	str	r3, [r0, #24]
1000d2ac:	4619      	mov	r1, r3
1000d2ae:	2208      	movs	r2, #8
1000d2b0:	305c      	adds	r0, #92	; 0x5c
1000d2b2:	f000 f926 	bl	1000d502 <memset>
1000d2b6:	4b0d      	ldr	r3, [pc, #52]	; (1000d2ec <std+0x58>)
1000d2b8:	6263      	str	r3, [r4, #36]	; 0x24
1000d2ba:	4b0d      	ldr	r3, [pc, #52]	; (1000d2f0 <std+0x5c>)
1000d2bc:	62a3      	str	r3, [r4, #40]	; 0x28
1000d2be:	4b0d      	ldr	r3, [pc, #52]	; (1000d2f4 <std+0x60>)
1000d2c0:	62e3      	str	r3, [r4, #44]	; 0x2c
1000d2c2:	4b0d      	ldr	r3, [pc, #52]	; (1000d2f8 <std+0x64>)
1000d2c4:	6323      	str	r3, [r4, #48]	; 0x30
1000d2c6:	4b0d      	ldr	r3, [pc, #52]	; (1000d2fc <std+0x68>)
1000d2c8:	6224      	str	r4, [r4, #32]
1000d2ca:	429c      	cmp	r4, r3
1000d2cc:	d006      	beq.n	1000d2dc <std+0x48>
1000d2ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
1000d2d2:	4294      	cmp	r4, r2
1000d2d4:	d002      	beq.n	1000d2dc <std+0x48>
1000d2d6:	33d0      	adds	r3, #208	; 0xd0
1000d2d8:	429c      	cmp	r4, r3
1000d2da:	d105      	bne.n	1000d2e8 <std+0x54>
1000d2dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
1000d2e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000d2e4:	f000 b9ba 	b.w	1000d65c <__retarget_lock_init_recursive>
1000d2e8:	bd10      	pop	{r4, pc}
1000d2ea:	bf00      	nop
1000d2ec:	1000d47d 	.word	0x1000d47d
1000d2f0:	1000d49f 	.word	0x1000d49f
1000d2f4:	1000d4d7 	.word	0x1000d4d7
1000d2f8:	1000d4fb 	.word	0x1000d4fb
1000d2fc:	100204bc 	.word	0x100204bc

1000d300 <stdio_exit_handler>:
1000d300:	4a02      	ldr	r2, [pc, #8]	; (1000d30c <stdio_exit_handler+0xc>)
1000d302:	4903      	ldr	r1, [pc, #12]	; (1000d310 <stdio_exit_handler+0x10>)
1000d304:	4803      	ldr	r0, [pc, #12]	; (1000d314 <stdio_exit_handler+0x14>)
1000d306:	f000 b87b 	b.w	1000d400 <_fwalk_sglue>
1000d30a:	bf00      	nop
1000d30c:	100200c4 	.word	0x100200c4
1000d310:	1000e089 	.word	0x1000e089
1000d314:	100200d0 	.word	0x100200d0

1000d318 <cleanup_stdio>:
1000d318:	6841      	ldr	r1, [r0, #4]
1000d31a:	4b0c      	ldr	r3, [pc, #48]	; (1000d34c <cleanup_stdio+0x34>)
1000d31c:	4299      	cmp	r1, r3
1000d31e:	b510      	push	{r4, lr}
1000d320:	4604      	mov	r4, r0
1000d322:	d001      	beq.n	1000d328 <cleanup_stdio+0x10>
1000d324:	f000 feb0 	bl	1000e088 <_fflush_r>
1000d328:	68a1      	ldr	r1, [r4, #8]
1000d32a:	4b09      	ldr	r3, [pc, #36]	; (1000d350 <cleanup_stdio+0x38>)
1000d32c:	4299      	cmp	r1, r3
1000d32e:	d002      	beq.n	1000d336 <cleanup_stdio+0x1e>
1000d330:	4620      	mov	r0, r4
1000d332:	f000 fea9 	bl	1000e088 <_fflush_r>
1000d336:	68e1      	ldr	r1, [r4, #12]
1000d338:	4b06      	ldr	r3, [pc, #24]	; (1000d354 <cleanup_stdio+0x3c>)
1000d33a:	4299      	cmp	r1, r3
1000d33c:	d004      	beq.n	1000d348 <cleanup_stdio+0x30>
1000d33e:	4620      	mov	r0, r4
1000d340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000d344:	f000 bea0 	b.w	1000e088 <_fflush_r>
1000d348:	bd10      	pop	{r4, pc}
1000d34a:	bf00      	nop
1000d34c:	100204bc 	.word	0x100204bc
1000d350:	10020524 	.word	0x10020524
1000d354:	1002058c 	.word	0x1002058c

1000d358 <global_stdio_init.part.0>:
1000d358:	b510      	push	{r4, lr}
1000d35a:	4b0b      	ldr	r3, [pc, #44]	; (1000d388 <global_stdio_init.part.0+0x30>)
1000d35c:	4c0b      	ldr	r4, [pc, #44]	; (1000d38c <global_stdio_init.part.0+0x34>)
1000d35e:	4a0c      	ldr	r2, [pc, #48]	; (1000d390 <global_stdio_init.part.0+0x38>)
1000d360:	601a      	str	r2, [r3, #0]
1000d362:	4620      	mov	r0, r4
1000d364:	2200      	movs	r2, #0
1000d366:	2104      	movs	r1, #4
1000d368:	f7ff ff94 	bl	1000d294 <std>
1000d36c:	f104 0068 	add.w	r0, r4, #104	; 0x68
1000d370:	2201      	movs	r2, #1
1000d372:	2109      	movs	r1, #9
1000d374:	f7ff ff8e 	bl	1000d294 <std>
1000d378:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
1000d37c:	2202      	movs	r2, #2
1000d37e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000d382:	2112      	movs	r1, #18
1000d384:	f7ff bf86 	b.w	1000d294 <std>
1000d388:	100205f4 	.word	0x100205f4
1000d38c:	100204bc 	.word	0x100204bc
1000d390:	1000d301 	.word	0x1000d301

1000d394 <__sfp_lock_acquire>:
1000d394:	4801      	ldr	r0, [pc, #4]	; (1000d39c <__sfp_lock_acquire+0x8>)
1000d396:	f000 b962 	b.w	1000d65e <__retarget_lock_acquire_recursive>
1000d39a:	bf00      	nop
1000d39c:	100205fd 	.word	0x100205fd

1000d3a0 <__sfp_lock_release>:
1000d3a0:	4801      	ldr	r0, [pc, #4]	; (1000d3a8 <__sfp_lock_release+0x8>)
1000d3a2:	f000 b95d 	b.w	1000d660 <__retarget_lock_release_recursive>
1000d3a6:	bf00      	nop
1000d3a8:	100205fd 	.word	0x100205fd

1000d3ac <__sinit>:
1000d3ac:	b510      	push	{r4, lr}
1000d3ae:	4604      	mov	r4, r0
1000d3b0:	f7ff fff0 	bl	1000d394 <__sfp_lock_acquire>
1000d3b4:	6a23      	ldr	r3, [r4, #32]
1000d3b6:	b11b      	cbz	r3, 1000d3c0 <__sinit+0x14>
1000d3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000d3bc:	f7ff bff0 	b.w	1000d3a0 <__sfp_lock_release>
1000d3c0:	4b04      	ldr	r3, [pc, #16]	; (1000d3d4 <__sinit+0x28>)
1000d3c2:	6223      	str	r3, [r4, #32]
1000d3c4:	4b04      	ldr	r3, [pc, #16]	; (1000d3d8 <__sinit+0x2c>)
1000d3c6:	681b      	ldr	r3, [r3, #0]
1000d3c8:	2b00      	cmp	r3, #0
1000d3ca:	d1f5      	bne.n	1000d3b8 <__sinit+0xc>
1000d3cc:	f7ff ffc4 	bl	1000d358 <global_stdio_init.part.0>
1000d3d0:	e7f2      	b.n	1000d3b8 <__sinit+0xc>
1000d3d2:	bf00      	nop
1000d3d4:	1000d319 	.word	0x1000d319
1000d3d8:	100205f4 	.word	0x100205f4

1000d3dc <fiprintf>:
1000d3dc:	b40e      	push	{r1, r2, r3}
1000d3de:	b503      	push	{r0, r1, lr}
1000d3e0:	4601      	mov	r1, r0
1000d3e2:	ab03      	add	r3, sp, #12
1000d3e4:	4805      	ldr	r0, [pc, #20]	; (1000d3fc <fiprintf+0x20>)
1000d3e6:	f853 2b04 	ldr.w	r2, [r3], #4
1000d3ea:	6800      	ldr	r0, [r0, #0]
1000d3ec:	9301      	str	r3, [sp, #4]
1000d3ee:	f000 fb1b 	bl	1000da28 <_vfiprintf_r>
1000d3f2:	b002      	add	sp, #8
1000d3f4:	f85d eb04 	ldr.w	lr, [sp], #4
1000d3f8:	b003      	add	sp, #12
1000d3fa:	4770      	bx	lr
1000d3fc:	1002011c 	.word	0x1002011c

1000d400 <_fwalk_sglue>:
1000d400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1000d404:	4607      	mov	r7, r0
1000d406:	4688      	mov	r8, r1
1000d408:	4614      	mov	r4, r2
1000d40a:	2600      	movs	r6, #0
1000d40c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
1000d410:	f1b9 0901 	subs.w	r9, r9, #1
1000d414:	d505      	bpl.n	1000d422 <_fwalk_sglue+0x22>
1000d416:	6824      	ldr	r4, [r4, #0]
1000d418:	2c00      	cmp	r4, #0
1000d41a:	d1f7      	bne.n	1000d40c <_fwalk_sglue+0xc>
1000d41c:	4630      	mov	r0, r6
1000d41e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000d422:	89ab      	ldrh	r3, [r5, #12]
1000d424:	2b01      	cmp	r3, #1
1000d426:	d907      	bls.n	1000d438 <_fwalk_sglue+0x38>
1000d428:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1000d42c:	3301      	adds	r3, #1
1000d42e:	d003      	beq.n	1000d438 <_fwalk_sglue+0x38>
1000d430:	4629      	mov	r1, r5
1000d432:	4638      	mov	r0, r7
1000d434:	47c0      	blx	r8
1000d436:	4306      	orrs	r6, r0
1000d438:	3568      	adds	r5, #104	; 0x68
1000d43a:	e7e9      	b.n	1000d410 <_fwalk_sglue+0x10>

1000d43c <siprintf>:
1000d43c:	b40e      	push	{r1, r2, r3}
1000d43e:	b500      	push	{lr}
1000d440:	b09c      	sub	sp, #112	; 0x70
1000d442:	ab1d      	add	r3, sp, #116	; 0x74
1000d444:	9002      	str	r0, [sp, #8]
1000d446:	9006      	str	r0, [sp, #24]
1000d448:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
1000d44c:	4809      	ldr	r0, [pc, #36]	; (1000d474 <siprintf+0x38>)
1000d44e:	9107      	str	r1, [sp, #28]
1000d450:	9104      	str	r1, [sp, #16]
1000d452:	4909      	ldr	r1, [pc, #36]	; (1000d478 <siprintf+0x3c>)
1000d454:	f853 2b04 	ldr.w	r2, [r3], #4
1000d458:	9105      	str	r1, [sp, #20]
1000d45a:	6800      	ldr	r0, [r0, #0]
1000d45c:	9301      	str	r3, [sp, #4]
1000d45e:	a902      	add	r1, sp, #8
1000d460:	f000 f9ba 	bl	1000d7d8 <_svfiprintf_r>
1000d464:	9b02      	ldr	r3, [sp, #8]
1000d466:	2200      	movs	r2, #0
1000d468:	701a      	strb	r2, [r3, #0]
1000d46a:	b01c      	add	sp, #112	; 0x70
1000d46c:	f85d eb04 	ldr.w	lr, [sp], #4
1000d470:	b003      	add	sp, #12
1000d472:	4770      	bx	lr
1000d474:	1002011c 	.word	0x1002011c
1000d478:	ffff0208 	.word	0xffff0208

1000d47c <__sread>:
1000d47c:	b510      	push	{r4, lr}
1000d47e:	460c      	mov	r4, r1
1000d480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000d484:	f000 f88c 	bl	1000d5a0 <_read_r>
1000d488:	2800      	cmp	r0, #0
1000d48a:	bfab      	itete	ge
1000d48c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1000d48e:	89a3      	ldrhlt	r3, [r4, #12]
1000d490:	181b      	addge	r3, r3, r0
1000d492:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1000d496:	bfac      	ite	ge
1000d498:	6563      	strge	r3, [r4, #84]	; 0x54
1000d49a:	81a3      	strhlt	r3, [r4, #12]
1000d49c:	bd10      	pop	{r4, pc}

1000d49e <__swrite>:
1000d49e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000d4a2:	461f      	mov	r7, r3
1000d4a4:	898b      	ldrh	r3, [r1, #12]
1000d4a6:	05db      	lsls	r3, r3, #23
1000d4a8:	4605      	mov	r5, r0
1000d4aa:	460c      	mov	r4, r1
1000d4ac:	4616      	mov	r6, r2
1000d4ae:	d505      	bpl.n	1000d4bc <__swrite+0x1e>
1000d4b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000d4b4:	2302      	movs	r3, #2
1000d4b6:	2200      	movs	r2, #0
1000d4b8:	f000 f860 	bl	1000d57c <_lseek_r>
1000d4bc:	89a3      	ldrh	r3, [r4, #12]
1000d4be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1000d4c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1000d4c6:	81a3      	strh	r3, [r4, #12]
1000d4c8:	4632      	mov	r2, r6
1000d4ca:	463b      	mov	r3, r7
1000d4cc:	4628      	mov	r0, r5
1000d4ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1000d4d2:	f000 b887 	b.w	1000d5e4 <_write_r>

1000d4d6 <__sseek>:
1000d4d6:	b510      	push	{r4, lr}
1000d4d8:	460c      	mov	r4, r1
1000d4da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000d4de:	f000 f84d 	bl	1000d57c <_lseek_r>
1000d4e2:	1c43      	adds	r3, r0, #1
1000d4e4:	89a3      	ldrh	r3, [r4, #12]
1000d4e6:	bf15      	itete	ne
1000d4e8:	6560      	strne	r0, [r4, #84]	; 0x54
1000d4ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1000d4ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1000d4f2:	81a3      	strheq	r3, [r4, #12]
1000d4f4:	bf18      	it	ne
1000d4f6:	81a3      	strhne	r3, [r4, #12]
1000d4f8:	bd10      	pop	{r4, pc}

1000d4fa <__sclose>:
1000d4fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000d4fe:	f000 b82d 	b.w	1000d55c <_close_r>

1000d502 <memset>:
1000d502:	4402      	add	r2, r0
1000d504:	4603      	mov	r3, r0
1000d506:	4293      	cmp	r3, r2
1000d508:	d100      	bne.n	1000d50c <memset+0xa>
1000d50a:	4770      	bx	lr
1000d50c:	f803 1b01 	strb.w	r1, [r3], #1
1000d510:	e7f9      	b.n	1000d506 <memset+0x4>

1000d512 <strncmp>:
1000d512:	b510      	push	{r4, lr}
1000d514:	b16a      	cbz	r2, 1000d532 <strncmp+0x20>
1000d516:	3901      	subs	r1, #1
1000d518:	1884      	adds	r4, r0, r2
1000d51a:	f810 2b01 	ldrb.w	r2, [r0], #1
1000d51e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
1000d522:	429a      	cmp	r2, r3
1000d524:	d103      	bne.n	1000d52e <strncmp+0x1c>
1000d526:	42a0      	cmp	r0, r4
1000d528:	d001      	beq.n	1000d52e <strncmp+0x1c>
1000d52a:	2a00      	cmp	r2, #0
1000d52c:	d1f5      	bne.n	1000d51a <strncmp+0x8>
1000d52e:	1ad0      	subs	r0, r2, r3
1000d530:	bd10      	pop	{r4, pc}
1000d532:	4610      	mov	r0, r2
1000d534:	e7fc      	b.n	1000d530 <strncmp+0x1e>

1000d536 <strncpy>:
1000d536:	b510      	push	{r4, lr}
1000d538:	3901      	subs	r1, #1
1000d53a:	4603      	mov	r3, r0
1000d53c:	b132      	cbz	r2, 1000d54c <strncpy+0x16>
1000d53e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1000d542:	f803 4b01 	strb.w	r4, [r3], #1
1000d546:	3a01      	subs	r2, #1
1000d548:	2c00      	cmp	r4, #0
1000d54a:	d1f7      	bne.n	1000d53c <strncpy+0x6>
1000d54c:	441a      	add	r2, r3
1000d54e:	2100      	movs	r1, #0
1000d550:	4293      	cmp	r3, r2
1000d552:	d100      	bne.n	1000d556 <strncpy+0x20>
1000d554:	bd10      	pop	{r4, pc}
1000d556:	f803 1b01 	strb.w	r1, [r3], #1
1000d55a:	e7f9      	b.n	1000d550 <strncpy+0x1a>

1000d55c <_close_r>:
1000d55c:	b538      	push	{r3, r4, r5, lr}
1000d55e:	4d06      	ldr	r5, [pc, #24]	; (1000d578 <_close_r+0x1c>)
1000d560:	2300      	movs	r3, #0
1000d562:	4604      	mov	r4, r0
1000d564:	4608      	mov	r0, r1
1000d566:	602b      	str	r3, [r5, #0]
1000d568:	f7f4 f993 	bl	10001892 <_close>
1000d56c:	1c43      	adds	r3, r0, #1
1000d56e:	d102      	bne.n	1000d576 <_close_r+0x1a>
1000d570:	682b      	ldr	r3, [r5, #0]
1000d572:	b103      	cbz	r3, 1000d576 <_close_r+0x1a>
1000d574:	6023      	str	r3, [r4, #0]
1000d576:	bd38      	pop	{r3, r4, r5, pc}
1000d578:	100205f8 	.word	0x100205f8

1000d57c <_lseek_r>:
1000d57c:	b538      	push	{r3, r4, r5, lr}
1000d57e:	4d07      	ldr	r5, [pc, #28]	; (1000d59c <_lseek_r+0x20>)
1000d580:	4604      	mov	r4, r0
1000d582:	4608      	mov	r0, r1
1000d584:	4611      	mov	r1, r2
1000d586:	2200      	movs	r2, #0
1000d588:	602a      	str	r2, [r5, #0]
1000d58a:	461a      	mov	r2, r3
1000d58c:	f7f4 f9a8 	bl	100018e0 <_lseek>
1000d590:	1c43      	adds	r3, r0, #1
1000d592:	d102      	bne.n	1000d59a <_lseek_r+0x1e>
1000d594:	682b      	ldr	r3, [r5, #0]
1000d596:	b103      	cbz	r3, 1000d59a <_lseek_r+0x1e>
1000d598:	6023      	str	r3, [r4, #0]
1000d59a:	bd38      	pop	{r3, r4, r5, pc}
1000d59c:	100205f8 	.word	0x100205f8

1000d5a0 <_read_r>:
1000d5a0:	b538      	push	{r3, r4, r5, lr}
1000d5a2:	4d07      	ldr	r5, [pc, #28]	; (1000d5c0 <_read_r+0x20>)
1000d5a4:	4604      	mov	r4, r0
1000d5a6:	4608      	mov	r0, r1
1000d5a8:	4611      	mov	r1, r2
1000d5aa:	2200      	movs	r2, #0
1000d5ac:	602a      	str	r2, [r5, #0]
1000d5ae:	461a      	mov	r2, r3
1000d5b0:	f7f4 f936 	bl	10001820 <_read>
1000d5b4:	1c43      	adds	r3, r0, #1
1000d5b6:	d102      	bne.n	1000d5be <_read_r+0x1e>
1000d5b8:	682b      	ldr	r3, [r5, #0]
1000d5ba:	b103      	cbz	r3, 1000d5be <_read_r+0x1e>
1000d5bc:	6023      	str	r3, [r4, #0]
1000d5be:	bd38      	pop	{r3, r4, r5, pc}
1000d5c0:	100205f8 	.word	0x100205f8

1000d5c4 <_sbrk_r>:
1000d5c4:	b538      	push	{r3, r4, r5, lr}
1000d5c6:	4d06      	ldr	r5, [pc, #24]	; (1000d5e0 <_sbrk_r+0x1c>)
1000d5c8:	2300      	movs	r3, #0
1000d5ca:	4604      	mov	r4, r0
1000d5cc:	4608      	mov	r0, r1
1000d5ce:	602b      	str	r3, [r5, #0]
1000d5d0:	f7f4 f994 	bl	100018fc <_sbrk>
1000d5d4:	1c43      	adds	r3, r0, #1
1000d5d6:	d102      	bne.n	1000d5de <_sbrk_r+0x1a>
1000d5d8:	682b      	ldr	r3, [r5, #0]
1000d5da:	b103      	cbz	r3, 1000d5de <_sbrk_r+0x1a>
1000d5dc:	6023      	str	r3, [r4, #0]
1000d5de:	bd38      	pop	{r3, r4, r5, pc}
1000d5e0:	100205f8 	.word	0x100205f8

1000d5e4 <_write_r>:
1000d5e4:	b538      	push	{r3, r4, r5, lr}
1000d5e6:	4d07      	ldr	r5, [pc, #28]	; (1000d604 <_write_r+0x20>)
1000d5e8:	4604      	mov	r4, r0
1000d5ea:	4608      	mov	r0, r1
1000d5ec:	4611      	mov	r1, r2
1000d5ee:	2200      	movs	r2, #0
1000d5f0:	602a      	str	r2, [r5, #0]
1000d5f2:	461a      	mov	r2, r3
1000d5f4:	f7f4 f931 	bl	1000185a <_write>
1000d5f8:	1c43      	adds	r3, r0, #1
1000d5fa:	d102      	bne.n	1000d602 <_write_r+0x1e>
1000d5fc:	682b      	ldr	r3, [r5, #0]
1000d5fe:	b103      	cbz	r3, 1000d602 <_write_r+0x1e>
1000d600:	6023      	str	r3, [r4, #0]
1000d602:	bd38      	pop	{r3, r4, r5, pc}
1000d604:	100205f8 	.word	0x100205f8

1000d608 <__errno>:
1000d608:	4b01      	ldr	r3, [pc, #4]	; (1000d610 <__errno+0x8>)
1000d60a:	6818      	ldr	r0, [r3, #0]
1000d60c:	4770      	bx	lr
1000d60e:	bf00      	nop
1000d610:	1002011c 	.word	0x1002011c

1000d614 <__libc_init_array>:
1000d614:	b570      	push	{r4, r5, r6, lr}
1000d616:	4d0d      	ldr	r5, [pc, #52]	; (1000d64c <__libc_init_array+0x38>)
1000d618:	4c0d      	ldr	r4, [pc, #52]	; (1000d650 <__libc_init_array+0x3c>)
1000d61a:	1b64      	subs	r4, r4, r5
1000d61c:	10a4      	asrs	r4, r4, #2
1000d61e:	2600      	movs	r6, #0
1000d620:	42a6      	cmp	r6, r4
1000d622:	d109      	bne.n	1000d638 <__libc_init_array+0x24>
1000d624:	4d0b      	ldr	r5, [pc, #44]	; (1000d654 <__libc_init_array+0x40>)
1000d626:	4c0c      	ldr	r4, [pc, #48]	; (1000d658 <__libc_init_array+0x44>)
1000d628:	f000 ff40 	bl	1000e4ac <_init>
1000d62c:	1b64      	subs	r4, r4, r5
1000d62e:	10a4      	asrs	r4, r4, #2
1000d630:	2600      	movs	r6, #0
1000d632:	42a6      	cmp	r6, r4
1000d634:	d105      	bne.n	1000d642 <__libc_init_array+0x2e>
1000d636:	bd70      	pop	{r4, r5, r6, pc}
1000d638:	f855 3b04 	ldr.w	r3, [r5], #4
1000d63c:	4798      	blx	r3
1000d63e:	3601      	adds	r6, #1
1000d640:	e7ee      	b.n	1000d620 <__libc_init_array+0xc>
1000d642:	f855 3b04 	ldr.w	r3, [r5], #4
1000d646:	4798      	blx	r3
1000d648:	3601      	adds	r6, #1
1000d64a:	e7f2      	b.n	1000d632 <__libc_init_array+0x1e>
1000d64c:	1000e92c 	.word	0x1000e92c
1000d650:	1000e92c 	.word	0x1000e92c
1000d654:	1000e92c 	.word	0x1000e92c
1000d658:	1000e930 	.word	0x1000e930

1000d65c <__retarget_lock_init_recursive>:
1000d65c:	4770      	bx	lr

1000d65e <__retarget_lock_acquire_recursive>:
1000d65e:	4770      	bx	lr

1000d660 <__retarget_lock_release_recursive>:
1000d660:	4770      	bx	lr

1000d662 <memcpy>:
1000d662:	440a      	add	r2, r1
1000d664:	4291      	cmp	r1, r2
1000d666:	f100 33ff 	add.w	r3, r0, #4294967295
1000d66a:	d100      	bne.n	1000d66e <memcpy+0xc>
1000d66c:	4770      	bx	lr
1000d66e:	b510      	push	{r4, lr}
1000d670:	f811 4b01 	ldrb.w	r4, [r1], #1
1000d674:	f803 4f01 	strb.w	r4, [r3, #1]!
1000d678:	4291      	cmp	r1, r2
1000d67a:	d1f9      	bne.n	1000d670 <memcpy+0xe>
1000d67c:	bd10      	pop	{r4, pc}

1000d67e <abort>:
1000d67e:	b508      	push	{r3, lr}
1000d680:	2006      	movs	r0, #6
1000d682:	f000 fe01 	bl	1000e288 <raise>
1000d686:	2001      	movs	r0, #1
1000d688:	f7f4 f8c0 	bl	1000180c <_exit>

1000d68c <_free_r>:
1000d68c:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000d68e:	2900      	cmp	r1, #0
1000d690:	d044      	beq.n	1000d71c <_free_r+0x90>
1000d692:	f851 3c04 	ldr.w	r3, [r1, #-4]
1000d696:	9001      	str	r0, [sp, #4]
1000d698:	2b00      	cmp	r3, #0
1000d69a:	f1a1 0404 	sub.w	r4, r1, #4
1000d69e:	bfb8      	it	lt
1000d6a0:	18e4      	addlt	r4, r4, r3
1000d6a2:	f7ff fdeb 	bl	1000d27c <__malloc_lock>
1000d6a6:	4a1e      	ldr	r2, [pc, #120]	; (1000d720 <_free_r+0x94>)
1000d6a8:	9801      	ldr	r0, [sp, #4]
1000d6aa:	6813      	ldr	r3, [r2, #0]
1000d6ac:	b933      	cbnz	r3, 1000d6bc <_free_r+0x30>
1000d6ae:	6063      	str	r3, [r4, #4]
1000d6b0:	6014      	str	r4, [r2, #0]
1000d6b2:	b003      	add	sp, #12
1000d6b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
1000d6b8:	f7ff bde6 	b.w	1000d288 <__malloc_unlock>
1000d6bc:	42a3      	cmp	r3, r4
1000d6be:	d908      	bls.n	1000d6d2 <_free_r+0x46>
1000d6c0:	6825      	ldr	r5, [r4, #0]
1000d6c2:	1961      	adds	r1, r4, r5
1000d6c4:	428b      	cmp	r3, r1
1000d6c6:	bf01      	itttt	eq
1000d6c8:	6819      	ldreq	r1, [r3, #0]
1000d6ca:	685b      	ldreq	r3, [r3, #4]
1000d6cc:	1949      	addeq	r1, r1, r5
1000d6ce:	6021      	streq	r1, [r4, #0]
1000d6d0:	e7ed      	b.n	1000d6ae <_free_r+0x22>
1000d6d2:	461a      	mov	r2, r3
1000d6d4:	685b      	ldr	r3, [r3, #4]
1000d6d6:	b10b      	cbz	r3, 1000d6dc <_free_r+0x50>
1000d6d8:	42a3      	cmp	r3, r4
1000d6da:	d9fa      	bls.n	1000d6d2 <_free_r+0x46>
1000d6dc:	6811      	ldr	r1, [r2, #0]
1000d6de:	1855      	adds	r5, r2, r1
1000d6e0:	42a5      	cmp	r5, r4
1000d6e2:	d10b      	bne.n	1000d6fc <_free_r+0x70>
1000d6e4:	6824      	ldr	r4, [r4, #0]
1000d6e6:	4421      	add	r1, r4
1000d6e8:	1854      	adds	r4, r2, r1
1000d6ea:	42a3      	cmp	r3, r4
1000d6ec:	6011      	str	r1, [r2, #0]
1000d6ee:	d1e0      	bne.n	1000d6b2 <_free_r+0x26>
1000d6f0:	681c      	ldr	r4, [r3, #0]
1000d6f2:	685b      	ldr	r3, [r3, #4]
1000d6f4:	6053      	str	r3, [r2, #4]
1000d6f6:	440c      	add	r4, r1
1000d6f8:	6014      	str	r4, [r2, #0]
1000d6fa:	e7da      	b.n	1000d6b2 <_free_r+0x26>
1000d6fc:	d902      	bls.n	1000d704 <_free_r+0x78>
1000d6fe:	230c      	movs	r3, #12
1000d700:	6003      	str	r3, [r0, #0]
1000d702:	e7d6      	b.n	1000d6b2 <_free_r+0x26>
1000d704:	6825      	ldr	r5, [r4, #0]
1000d706:	1961      	adds	r1, r4, r5
1000d708:	428b      	cmp	r3, r1
1000d70a:	bf04      	itt	eq
1000d70c:	6819      	ldreq	r1, [r3, #0]
1000d70e:	685b      	ldreq	r3, [r3, #4]
1000d710:	6063      	str	r3, [r4, #4]
1000d712:	bf04      	itt	eq
1000d714:	1949      	addeq	r1, r1, r5
1000d716:	6021      	streq	r1, [r4, #0]
1000d718:	6054      	str	r4, [r2, #4]
1000d71a:	e7ca      	b.n	1000d6b2 <_free_r+0x26>
1000d71c:	b003      	add	sp, #12
1000d71e:	bd30      	pop	{r4, r5, pc}
1000d720:	100204b4 	.word	0x100204b4

1000d724 <__ssputs_r>:
1000d724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1000d728:	688e      	ldr	r6, [r1, #8]
1000d72a:	461f      	mov	r7, r3
1000d72c:	42be      	cmp	r6, r7
1000d72e:	680b      	ldr	r3, [r1, #0]
1000d730:	4682      	mov	sl, r0
1000d732:	460c      	mov	r4, r1
1000d734:	4690      	mov	r8, r2
1000d736:	d82c      	bhi.n	1000d792 <__ssputs_r+0x6e>
1000d738:	898a      	ldrh	r2, [r1, #12]
1000d73a:	f412 6f90 	tst.w	r2, #1152	; 0x480
1000d73e:	d026      	beq.n	1000d78e <__ssputs_r+0x6a>
1000d740:	6965      	ldr	r5, [r4, #20]
1000d742:	6909      	ldr	r1, [r1, #16]
1000d744:	eb05 0545 	add.w	r5, r5, r5, lsl #1
1000d748:	eba3 0901 	sub.w	r9, r3, r1
1000d74c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
1000d750:	1c7b      	adds	r3, r7, #1
1000d752:	444b      	add	r3, r9
1000d754:	106d      	asrs	r5, r5, #1
1000d756:	429d      	cmp	r5, r3
1000d758:	bf38      	it	cc
1000d75a:	461d      	movcc	r5, r3
1000d75c:	0553      	lsls	r3, r2, #21
1000d75e:	d527      	bpl.n	1000d7b0 <__ssputs_r+0x8c>
1000d760:	4629      	mov	r1, r5
1000d762:	f7ff fd0b 	bl	1000d17c <_malloc_r>
1000d766:	4606      	mov	r6, r0
1000d768:	b360      	cbz	r0, 1000d7c4 <__ssputs_r+0xa0>
1000d76a:	6921      	ldr	r1, [r4, #16]
1000d76c:	464a      	mov	r2, r9
1000d76e:	f7ff ff78 	bl	1000d662 <memcpy>
1000d772:	89a3      	ldrh	r3, [r4, #12]
1000d774:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
1000d778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1000d77c:	81a3      	strh	r3, [r4, #12]
1000d77e:	6126      	str	r6, [r4, #16]
1000d780:	6165      	str	r5, [r4, #20]
1000d782:	444e      	add	r6, r9
1000d784:	eba5 0509 	sub.w	r5, r5, r9
1000d788:	6026      	str	r6, [r4, #0]
1000d78a:	60a5      	str	r5, [r4, #8]
1000d78c:	463e      	mov	r6, r7
1000d78e:	42be      	cmp	r6, r7
1000d790:	d900      	bls.n	1000d794 <__ssputs_r+0x70>
1000d792:	463e      	mov	r6, r7
1000d794:	6820      	ldr	r0, [r4, #0]
1000d796:	4632      	mov	r2, r6
1000d798:	4641      	mov	r1, r8
1000d79a:	f000 fd33 	bl	1000e204 <memmove>
1000d79e:	68a3      	ldr	r3, [r4, #8]
1000d7a0:	1b9b      	subs	r3, r3, r6
1000d7a2:	60a3      	str	r3, [r4, #8]
1000d7a4:	6823      	ldr	r3, [r4, #0]
1000d7a6:	4433      	add	r3, r6
1000d7a8:	6023      	str	r3, [r4, #0]
1000d7aa:	2000      	movs	r0, #0
1000d7ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000d7b0:	462a      	mov	r2, r5
1000d7b2:	f000 fd85 	bl	1000e2c0 <_realloc_r>
1000d7b6:	4606      	mov	r6, r0
1000d7b8:	2800      	cmp	r0, #0
1000d7ba:	d1e0      	bne.n	1000d77e <__ssputs_r+0x5a>
1000d7bc:	6921      	ldr	r1, [r4, #16]
1000d7be:	4650      	mov	r0, sl
1000d7c0:	f7ff ff64 	bl	1000d68c <_free_r>
1000d7c4:	230c      	movs	r3, #12
1000d7c6:	f8ca 3000 	str.w	r3, [sl]
1000d7ca:	89a3      	ldrh	r3, [r4, #12]
1000d7cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000d7d0:	81a3      	strh	r3, [r4, #12]
1000d7d2:	f04f 30ff 	mov.w	r0, #4294967295
1000d7d6:	e7e9      	b.n	1000d7ac <__ssputs_r+0x88>

1000d7d8 <_svfiprintf_r>:
1000d7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000d7dc:	4698      	mov	r8, r3
1000d7de:	898b      	ldrh	r3, [r1, #12]
1000d7e0:	061b      	lsls	r3, r3, #24
1000d7e2:	b09d      	sub	sp, #116	; 0x74
1000d7e4:	4607      	mov	r7, r0
1000d7e6:	460d      	mov	r5, r1
1000d7e8:	4614      	mov	r4, r2
1000d7ea:	d50e      	bpl.n	1000d80a <_svfiprintf_r+0x32>
1000d7ec:	690b      	ldr	r3, [r1, #16]
1000d7ee:	b963      	cbnz	r3, 1000d80a <_svfiprintf_r+0x32>
1000d7f0:	2140      	movs	r1, #64	; 0x40
1000d7f2:	f7ff fcc3 	bl	1000d17c <_malloc_r>
1000d7f6:	6028      	str	r0, [r5, #0]
1000d7f8:	6128      	str	r0, [r5, #16]
1000d7fa:	b920      	cbnz	r0, 1000d806 <_svfiprintf_r+0x2e>
1000d7fc:	230c      	movs	r3, #12
1000d7fe:	603b      	str	r3, [r7, #0]
1000d800:	f04f 30ff 	mov.w	r0, #4294967295
1000d804:	e0d0      	b.n	1000d9a8 <_svfiprintf_r+0x1d0>
1000d806:	2340      	movs	r3, #64	; 0x40
1000d808:	616b      	str	r3, [r5, #20]
1000d80a:	2300      	movs	r3, #0
1000d80c:	9309      	str	r3, [sp, #36]	; 0x24
1000d80e:	2320      	movs	r3, #32
1000d810:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1000d814:	f8cd 800c 	str.w	r8, [sp, #12]
1000d818:	2330      	movs	r3, #48	; 0x30
1000d81a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 1000d9c0 <_svfiprintf_r+0x1e8>
1000d81e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1000d822:	f04f 0901 	mov.w	r9, #1
1000d826:	4623      	mov	r3, r4
1000d828:	469a      	mov	sl, r3
1000d82a:	f813 2b01 	ldrb.w	r2, [r3], #1
1000d82e:	b10a      	cbz	r2, 1000d834 <_svfiprintf_r+0x5c>
1000d830:	2a25      	cmp	r2, #37	; 0x25
1000d832:	d1f9      	bne.n	1000d828 <_svfiprintf_r+0x50>
1000d834:	ebba 0b04 	subs.w	fp, sl, r4
1000d838:	d00b      	beq.n	1000d852 <_svfiprintf_r+0x7a>
1000d83a:	465b      	mov	r3, fp
1000d83c:	4622      	mov	r2, r4
1000d83e:	4629      	mov	r1, r5
1000d840:	4638      	mov	r0, r7
1000d842:	f7ff ff6f 	bl	1000d724 <__ssputs_r>
1000d846:	3001      	adds	r0, #1
1000d848:	f000 80a9 	beq.w	1000d99e <_svfiprintf_r+0x1c6>
1000d84c:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000d84e:	445a      	add	r2, fp
1000d850:	9209      	str	r2, [sp, #36]	; 0x24
1000d852:	f89a 3000 	ldrb.w	r3, [sl]
1000d856:	2b00      	cmp	r3, #0
1000d858:	f000 80a1 	beq.w	1000d99e <_svfiprintf_r+0x1c6>
1000d85c:	2300      	movs	r3, #0
1000d85e:	f04f 32ff 	mov.w	r2, #4294967295
1000d862:	e9cd 2305 	strd	r2, r3, [sp, #20]
1000d866:	f10a 0a01 	add.w	sl, sl, #1
1000d86a:	9304      	str	r3, [sp, #16]
1000d86c:	9307      	str	r3, [sp, #28]
1000d86e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1000d872:	931a      	str	r3, [sp, #104]	; 0x68
1000d874:	4654      	mov	r4, sl
1000d876:	2205      	movs	r2, #5
1000d878:	f814 1b01 	ldrb.w	r1, [r4], #1
1000d87c:	4850      	ldr	r0, [pc, #320]	; (1000d9c0 <_svfiprintf_r+0x1e8>)
1000d87e:	f7f2 fbf7 	bl	10000070 <memchr>
1000d882:	9a04      	ldr	r2, [sp, #16]
1000d884:	b9d8      	cbnz	r0, 1000d8be <_svfiprintf_r+0xe6>
1000d886:	06d0      	lsls	r0, r2, #27
1000d888:	bf44      	itt	mi
1000d88a:	2320      	movmi	r3, #32
1000d88c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
1000d890:	0711      	lsls	r1, r2, #28
1000d892:	bf44      	itt	mi
1000d894:	232b      	movmi	r3, #43	; 0x2b
1000d896:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
1000d89a:	f89a 3000 	ldrb.w	r3, [sl]
1000d89e:	2b2a      	cmp	r3, #42	; 0x2a
1000d8a0:	d015      	beq.n	1000d8ce <_svfiprintf_r+0xf6>
1000d8a2:	9a07      	ldr	r2, [sp, #28]
1000d8a4:	4654      	mov	r4, sl
1000d8a6:	2000      	movs	r0, #0
1000d8a8:	f04f 0c0a 	mov.w	ip, #10
1000d8ac:	4621      	mov	r1, r4
1000d8ae:	f811 3b01 	ldrb.w	r3, [r1], #1
1000d8b2:	3b30      	subs	r3, #48	; 0x30
1000d8b4:	2b09      	cmp	r3, #9
1000d8b6:	d94d      	bls.n	1000d954 <_svfiprintf_r+0x17c>
1000d8b8:	b1b0      	cbz	r0, 1000d8e8 <_svfiprintf_r+0x110>
1000d8ba:	9207      	str	r2, [sp, #28]
1000d8bc:	e014      	b.n	1000d8e8 <_svfiprintf_r+0x110>
1000d8be:	eba0 0308 	sub.w	r3, r0, r8
1000d8c2:	fa09 f303 	lsl.w	r3, r9, r3
1000d8c6:	4313      	orrs	r3, r2
1000d8c8:	9304      	str	r3, [sp, #16]
1000d8ca:	46a2      	mov	sl, r4
1000d8cc:	e7d2      	b.n	1000d874 <_svfiprintf_r+0x9c>
1000d8ce:	9b03      	ldr	r3, [sp, #12]
1000d8d0:	1d19      	adds	r1, r3, #4
1000d8d2:	681b      	ldr	r3, [r3, #0]
1000d8d4:	9103      	str	r1, [sp, #12]
1000d8d6:	2b00      	cmp	r3, #0
1000d8d8:	bfbb      	ittet	lt
1000d8da:	425b      	neglt	r3, r3
1000d8dc:	f042 0202 	orrlt.w	r2, r2, #2
1000d8e0:	9307      	strge	r3, [sp, #28]
1000d8e2:	9307      	strlt	r3, [sp, #28]
1000d8e4:	bfb8      	it	lt
1000d8e6:	9204      	strlt	r2, [sp, #16]
1000d8e8:	7823      	ldrb	r3, [r4, #0]
1000d8ea:	2b2e      	cmp	r3, #46	; 0x2e
1000d8ec:	d10c      	bne.n	1000d908 <_svfiprintf_r+0x130>
1000d8ee:	7863      	ldrb	r3, [r4, #1]
1000d8f0:	2b2a      	cmp	r3, #42	; 0x2a
1000d8f2:	d134      	bne.n	1000d95e <_svfiprintf_r+0x186>
1000d8f4:	9b03      	ldr	r3, [sp, #12]
1000d8f6:	1d1a      	adds	r2, r3, #4
1000d8f8:	681b      	ldr	r3, [r3, #0]
1000d8fa:	9203      	str	r2, [sp, #12]
1000d8fc:	2b00      	cmp	r3, #0
1000d8fe:	bfb8      	it	lt
1000d900:	f04f 33ff 	movlt.w	r3, #4294967295
1000d904:	3402      	adds	r4, #2
1000d906:	9305      	str	r3, [sp, #20]
1000d908:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 1000d9d0 <_svfiprintf_r+0x1f8>
1000d90c:	7821      	ldrb	r1, [r4, #0]
1000d90e:	2203      	movs	r2, #3
1000d910:	4650      	mov	r0, sl
1000d912:	f7f2 fbad 	bl	10000070 <memchr>
1000d916:	b138      	cbz	r0, 1000d928 <_svfiprintf_r+0x150>
1000d918:	9b04      	ldr	r3, [sp, #16]
1000d91a:	eba0 000a 	sub.w	r0, r0, sl
1000d91e:	2240      	movs	r2, #64	; 0x40
1000d920:	4082      	lsls	r2, r0
1000d922:	4313      	orrs	r3, r2
1000d924:	3401      	adds	r4, #1
1000d926:	9304      	str	r3, [sp, #16]
1000d928:	f814 1b01 	ldrb.w	r1, [r4], #1
1000d92c:	4825      	ldr	r0, [pc, #148]	; (1000d9c4 <_svfiprintf_r+0x1ec>)
1000d92e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1000d932:	2206      	movs	r2, #6
1000d934:	f7f2 fb9c 	bl	10000070 <memchr>
1000d938:	2800      	cmp	r0, #0
1000d93a:	d038      	beq.n	1000d9ae <_svfiprintf_r+0x1d6>
1000d93c:	4b22      	ldr	r3, [pc, #136]	; (1000d9c8 <_svfiprintf_r+0x1f0>)
1000d93e:	bb1b      	cbnz	r3, 1000d988 <_svfiprintf_r+0x1b0>
1000d940:	9b03      	ldr	r3, [sp, #12]
1000d942:	3307      	adds	r3, #7
1000d944:	f023 0307 	bic.w	r3, r3, #7
1000d948:	3308      	adds	r3, #8
1000d94a:	9303      	str	r3, [sp, #12]
1000d94c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000d94e:	4433      	add	r3, r6
1000d950:	9309      	str	r3, [sp, #36]	; 0x24
1000d952:	e768      	b.n	1000d826 <_svfiprintf_r+0x4e>
1000d954:	fb0c 3202 	mla	r2, ip, r2, r3
1000d958:	460c      	mov	r4, r1
1000d95a:	2001      	movs	r0, #1
1000d95c:	e7a6      	b.n	1000d8ac <_svfiprintf_r+0xd4>
1000d95e:	2300      	movs	r3, #0
1000d960:	3401      	adds	r4, #1
1000d962:	9305      	str	r3, [sp, #20]
1000d964:	4619      	mov	r1, r3
1000d966:	f04f 0c0a 	mov.w	ip, #10
1000d96a:	4620      	mov	r0, r4
1000d96c:	f810 2b01 	ldrb.w	r2, [r0], #1
1000d970:	3a30      	subs	r2, #48	; 0x30
1000d972:	2a09      	cmp	r2, #9
1000d974:	d903      	bls.n	1000d97e <_svfiprintf_r+0x1a6>
1000d976:	2b00      	cmp	r3, #0
1000d978:	d0c6      	beq.n	1000d908 <_svfiprintf_r+0x130>
1000d97a:	9105      	str	r1, [sp, #20]
1000d97c:	e7c4      	b.n	1000d908 <_svfiprintf_r+0x130>
1000d97e:	fb0c 2101 	mla	r1, ip, r1, r2
1000d982:	4604      	mov	r4, r0
1000d984:	2301      	movs	r3, #1
1000d986:	e7f0      	b.n	1000d96a <_svfiprintf_r+0x192>
1000d988:	ab03      	add	r3, sp, #12
1000d98a:	9300      	str	r3, [sp, #0]
1000d98c:	462a      	mov	r2, r5
1000d98e:	4b0f      	ldr	r3, [pc, #60]	; (1000d9cc <_svfiprintf_r+0x1f4>)
1000d990:	a904      	add	r1, sp, #16
1000d992:	4638      	mov	r0, r7
1000d994:	f3af 8000 	nop.w
1000d998:	1c42      	adds	r2, r0, #1
1000d99a:	4606      	mov	r6, r0
1000d99c:	d1d6      	bne.n	1000d94c <_svfiprintf_r+0x174>
1000d99e:	89ab      	ldrh	r3, [r5, #12]
1000d9a0:	065b      	lsls	r3, r3, #25
1000d9a2:	f53f af2d 	bmi.w	1000d800 <_svfiprintf_r+0x28>
1000d9a6:	9809      	ldr	r0, [sp, #36]	; 0x24
1000d9a8:	b01d      	add	sp, #116	; 0x74
1000d9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000d9ae:	ab03      	add	r3, sp, #12
1000d9b0:	9300      	str	r3, [sp, #0]
1000d9b2:	462a      	mov	r2, r5
1000d9b4:	4b05      	ldr	r3, [pc, #20]	; (1000d9cc <_svfiprintf_r+0x1f4>)
1000d9b6:	a904      	add	r1, sp, #16
1000d9b8:	4638      	mov	r0, r7
1000d9ba:	f000 f9bd 	bl	1000dd38 <_printf_i>
1000d9be:	e7eb      	b.n	1000d998 <_svfiprintf_r+0x1c0>
1000d9c0:	1000e8f9 	.word	0x1000e8f9
1000d9c4:	1000e903 	.word	0x1000e903
1000d9c8:	00000000 	.word	0x00000000
1000d9cc:	1000d725 	.word	0x1000d725
1000d9d0:	1000e8ff 	.word	0x1000e8ff

1000d9d4 <__sfputc_r>:
1000d9d4:	6893      	ldr	r3, [r2, #8]
1000d9d6:	3b01      	subs	r3, #1
1000d9d8:	2b00      	cmp	r3, #0
1000d9da:	b410      	push	{r4}
1000d9dc:	6093      	str	r3, [r2, #8]
1000d9de:	da08      	bge.n	1000d9f2 <__sfputc_r+0x1e>
1000d9e0:	6994      	ldr	r4, [r2, #24]
1000d9e2:	42a3      	cmp	r3, r4
1000d9e4:	db01      	blt.n	1000d9ea <__sfputc_r+0x16>
1000d9e6:	290a      	cmp	r1, #10
1000d9e8:	d103      	bne.n	1000d9f2 <__sfputc_r+0x1e>
1000d9ea:	f85d 4b04 	ldr.w	r4, [sp], #4
1000d9ee:	f000 bb73 	b.w	1000e0d8 <__swbuf_r>
1000d9f2:	6813      	ldr	r3, [r2, #0]
1000d9f4:	1c58      	adds	r0, r3, #1
1000d9f6:	6010      	str	r0, [r2, #0]
1000d9f8:	7019      	strb	r1, [r3, #0]
1000d9fa:	4608      	mov	r0, r1
1000d9fc:	f85d 4b04 	ldr.w	r4, [sp], #4
1000da00:	4770      	bx	lr

1000da02 <__sfputs_r>:
1000da02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000da04:	4606      	mov	r6, r0
1000da06:	460f      	mov	r7, r1
1000da08:	4614      	mov	r4, r2
1000da0a:	18d5      	adds	r5, r2, r3
1000da0c:	42ac      	cmp	r4, r5
1000da0e:	d101      	bne.n	1000da14 <__sfputs_r+0x12>
1000da10:	2000      	movs	r0, #0
1000da12:	e007      	b.n	1000da24 <__sfputs_r+0x22>
1000da14:	f814 1b01 	ldrb.w	r1, [r4], #1
1000da18:	463a      	mov	r2, r7
1000da1a:	4630      	mov	r0, r6
1000da1c:	f7ff ffda 	bl	1000d9d4 <__sfputc_r>
1000da20:	1c43      	adds	r3, r0, #1
1000da22:	d1f3      	bne.n	1000da0c <__sfputs_r+0xa>
1000da24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1000da28 <_vfiprintf_r>:
1000da28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000da2c:	460d      	mov	r5, r1
1000da2e:	b09d      	sub	sp, #116	; 0x74
1000da30:	4614      	mov	r4, r2
1000da32:	4698      	mov	r8, r3
1000da34:	4606      	mov	r6, r0
1000da36:	b118      	cbz	r0, 1000da40 <_vfiprintf_r+0x18>
1000da38:	6a03      	ldr	r3, [r0, #32]
1000da3a:	b90b      	cbnz	r3, 1000da40 <_vfiprintf_r+0x18>
1000da3c:	f7ff fcb6 	bl	1000d3ac <__sinit>
1000da40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1000da42:	07d9      	lsls	r1, r3, #31
1000da44:	d405      	bmi.n	1000da52 <_vfiprintf_r+0x2a>
1000da46:	89ab      	ldrh	r3, [r5, #12]
1000da48:	059a      	lsls	r2, r3, #22
1000da4a:	d402      	bmi.n	1000da52 <_vfiprintf_r+0x2a>
1000da4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
1000da4e:	f7ff fe06 	bl	1000d65e <__retarget_lock_acquire_recursive>
1000da52:	89ab      	ldrh	r3, [r5, #12]
1000da54:	071b      	lsls	r3, r3, #28
1000da56:	d501      	bpl.n	1000da5c <_vfiprintf_r+0x34>
1000da58:	692b      	ldr	r3, [r5, #16]
1000da5a:	b99b      	cbnz	r3, 1000da84 <_vfiprintf_r+0x5c>
1000da5c:	4629      	mov	r1, r5
1000da5e:	4630      	mov	r0, r6
1000da60:	f000 fb78 	bl	1000e154 <__swsetup_r>
1000da64:	b170      	cbz	r0, 1000da84 <_vfiprintf_r+0x5c>
1000da66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1000da68:	07dc      	lsls	r4, r3, #31
1000da6a:	d504      	bpl.n	1000da76 <_vfiprintf_r+0x4e>
1000da6c:	f04f 30ff 	mov.w	r0, #4294967295
1000da70:	b01d      	add	sp, #116	; 0x74
1000da72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000da76:	89ab      	ldrh	r3, [r5, #12]
1000da78:	0598      	lsls	r0, r3, #22
1000da7a:	d4f7      	bmi.n	1000da6c <_vfiprintf_r+0x44>
1000da7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
1000da7e:	f7ff fdef 	bl	1000d660 <__retarget_lock_release_recursive>
1000da82:	e7f3      	b.n	1000da6c <_vfiprintf_r+0x44>
1000da84:	2300      	movs	r3, #0
1000da86:	9309      	str	r3, [sp, #36]	; 0x24
1000da88:	2320      	movs	r3, #32
1000da8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1000da8e:	f8cd 800c 	str.w	r8, [sp, #12]
1000da92:	2330      	movs	r3, #48	; 0x30
1000da94:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 1000dc48 <_vfiprintf_r+0x220>
1000da98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1000da9c:	f04f 0901 	mov.w	r9, #1
1000daa0:	4623      	mov	r3, r4
1000daa2:	469a      	mov	sl, r3
1000daa4:	f813 2b01 	ldrb.w	r2, [r3], #1
1000daa8:	b10a      	cbz	r2, 1000daae <_vfiprintf_r+0x86>
1000daaa:	2a25      	cmp	r2, #37	; 0x25
1000daac:	d1f9      	bne.n	1000daa2 <_vfiprintf_r+0x7a>
1000daae:	ebba 0b04 	subs.w	fp, sl, r4
1000dab2:	d00b      	beq.n	1000dacc <_vfiprintf_r+0xa4>
1000dab4:	465b      	mov	r3, fp
1000dab6:	4622      	mov	r2, r4
1000dab8:	4629      	mov	r1, r5
1000daba:	4630      	mov	r0, r6
1000dabc:	f7ff ffa1 	bl	1000da02 <__sfputs_r>
1000dac0:	3001      	adds	r0, #1
1000dac2:	f000 80a9 	beq.w	1000dc18 <_vfiprintf_r+0x1f0>
1000dac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000dac8:	445a      	add	r2, fp
1000daca:	9209      	str	r2, [sp, #36]	; 0x24
1000dacc:	f89a 3000 	ldrb.w	r3, [sl]
1000dad0:	2b00      	cmp	r3, #0
1000dad2:	f000 80a1 	beq.w	1000dc18 <_vfiprintf_r+0x1f0>
1000dad6:	2300      	movs	r3, #0
1000dad8:	f04f 32ff 	mov.w	r2, #4294967295
1000dadc:	e9cd 2305 	strd	r2, r3, [sp, #20]
1000dae0:	f10a 0a01 	add.w	sl, sl, #1
1000dae4:	9304      	str	r3, [sp, #16]
1000dae6:	9307      	str	r3, [sp, #28]
1000dae8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1000daec:	931a      	str	r3, [sp, #104]	; 0x68
1000daee:	4654      	mov	r4, sl
1000daf0:	2205      	movs	r2, #5
1000daf2:	f814 1b01 	ldrb.w	r1, [r4], #1
1000daf6:	4854      	ldr	r0, [pc, #336]	; (1000dc48 <_vfiprintf_r+0x220>)
1000daf8:	f7f2 faba 	bl	10000070 <memchr>
1000dafc:	9a04      	ldr	r2, [sp, #16]
1000dafe:	b9d8      	cbnz	r0, 1000db38 <_vfiprintf_r+0x110>
1000db00:	06d1      	lsls	r1, r2, #27
1000db02:	bf44      	itt	mi
1000db04:	2320      	movmi	r3, #32
1000db06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
1000db0a:	0713      	lsls	r3, r2, #28
1000db0c:	bf44      	itt	mi
1000db0e:	232b      	movmi	r3, #43	; 0x2b
1000db10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
1000db14:	f89a 3000 	ldrb.w	r3, [sl]
1000db18:	2b2a      	cmp	r3, #42	; 0x2a
1000db1a:	d015      	beq.n	1000db48 <_vfiprintf_r+0x120>
1000db1c:	9a07      	ldr	r2, [sp, #28]
1000db1e:	4654      	mov	r4, sl
1000db20:	2000      	movs	r0, #0
1000db22:	f04f 0c0a 	mov.w	ip, #10
1000db26:	4621      	mov	r1, r4
1000db28:	f811 3b01 	ldrb.w	r3, [r1], #1
1000db2c:	3b30      	subs	r3, #48	; 0x30
1000db2e:	2b09      	cmp	r3, #9
1000db30:	d94d      	bls.n	1000dbce <_vfiprintf_r+0x1a6>
1000db32:	b1b0      	cbz	r0, 1000db62 <_vfiprintf_r+0x13a>
1000db34:	9207      	str	r2, [sp, #28]
1000db36:	e014      	b.n	1000db62 <_vfiprintf_r+0x13a>
1000db38:	eba0 0308 	sub.w	r3, r0, r8
1000db3c:	fa09 f303 	lsl.w	r3, r9, r3
1000db40:	4313      	orrs	r3, r2
1000db42:	9304      	str	r3, [sp, #16]
1000db44:	46a2      	mov	sl, r4
1000db46:	e7d2      	b.n	1000daee <_vfiprintf_r+0xc6>
1000db48:	9b03      	ldr	r3, [sp, #12]
1000db4a:	1d19      	adds	r1, r3, #4
1000db4c:	681b      	ldr	r3, [r3, #0]
1000db4e:	9103      	str	r1, [sp, #12]
1000db50:	2b00      	cmp	r3, #0
1000db52:	bfbb      	ittet	lt
1000db54:	425b      	neglt	r3, r3
1000db56:	f042 0202 	orrlt.w	r2, r2, #2
1000db5a:	9307      	strge	r3, [sp, #28]
1000db5c:	9307      	strlt	r3, [sp, #28]
1000db5e:	bfb8      	it	lt
1000db60:	9204      	strlt	r2, [sp, #16]
1000db62:	7823      	ldrb	r3, [r4, #0]
1000db64:	2b2e      	cmp	r3, #46	; 0x2e
1000db66:	d10c      	bne.n	1000db82 <_vfiprintf_r+0x15a>
1000db68:	7863      	ldrb	r3, [r4, #1]
1000db6a:	2b2a      	cmp	r3, #42	; 0x2a
1000db6c:	d134      	bne.n	1000dbd8 <_vfiprintf_r+0x1b0>
1000db6e:	9b03      	ldr	r3, [sp, #12]
1000db70:	1d1a      	adds	r2, r3, #4
1000db72:	681b      	ldr	r3, [r3, #0]
1000db74:	9203      	str	r2, [sp, #12]
1000db76:	2b00      	cmp	r3, #0
1000db78:	bfb8      	it	lt
1000db7a:	f04f 33ff 	movlt.w	r3, #4294967295
1000db7e:	3402      	adds	r4, #2
1000db80:	9305      	str	r3, [sp, #20]
1000db82:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 1000dc58 <_vfiprintf_r+0x230>
1000db86:	7821      	ldrb	r1, [r4, #0]
1000db88:	2203      	movs	r2, #3
1000db8a:	4650      	mov	r0, sl
1000db8c:	f7f2 fa70 	bl	10000070 <memchr>
1000db90:	b138      	cbz	r0, 1000dba2 <_vfiprintf_r+0x17a>
1000db92:	9b04      	ldr	r3, [sp, #16]
1000db94:	eba0 000a 	sub.w	r0, r0, sl
1000db98:	2240      	movs	r2, #64	; 0x40
1000db9a:	4082      	lsls	r2, r0
1000db9c:	4313      	orrs	r3, r2
1000db9e:	3401      	adds	r4, #1
1000dba0:	9304      	str	r3, [sp, #16]
1000dba2:	f814 1b01 	ldrb.w	r1, [r4], #1
1000dba6:	4829      	ldr	r0, [pc, #164]	; (1000dc4c <_vfiprintf_r+0x224>)
1000dba8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1000dbac:	2206      	movs	r2, #6
1000dbae:	f7f2 fa5f 	bl	10000070 <memchr>
1000dbb2:	2800      	cmp	r0, #0
1000dbb4:	d03f      	beq.n	1000dc36 <_vfiprintf_r+0x20e>
1000dbb6:	4b26      	ldr	r3, [pc, #152]	; (1000dc50 <_vfiprintf_r+0x228>)
1000dbb8:	bb1b      	cbnz	r3, 1000dc02 <_vfiprintf_r+0x1da>
1000dbba:	9b03      	ldr	r3, [sp, #12]
1000dbbc:	3307      	adds	r3, #7
1000dbbe:	f023 0307 	bic.w	r3, r3, #7
1000dbc2:	3308      	adds	r3, #8
1000dbc4:	9303      	str	r3, [sp, #12]
1000dbc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000dbc8:	443b      	add	r3, r7
1000dbca:	9309      	str	r3, [sp, #36]	; 0x24
1000dbcc:	e768      	b.n	1000daa0 <_vfiprintf_r+0x78>
1000dbce:	fb0c 3202 	mla	r2, ip, r2, r3
1000dbd2:	460c      	mov	r4, r1
1000dbd4:	2001      	movs	r0, #1
1000dbd6:	e7a6      	b.n	1000db26 <_vfiprintf_r+0xfe>
1000dbd8:	2300      	movs	r3, #0
1000dbda:	3401      	adds	r4, #1
1000dbdc:	9305      	str	r3, [sp, #20]
1000dbde:	4619      	mov	r1, r3
1000dbe0:	f04f 0c0a 	mov.w	ip, #10
1000dbe4:	4620      	mov	r0, r4
1000dbe6:	f810 2b01 	ldrb.w	r2, [r0], #1
1000dbea:	3a30      	subs	r2, #48	; 0x30
1000dbec:	2a09      	cmp	r2, #9
1000dbee:	d903      	bls.n	1000dbf8 <_vfiprintf_r+0x1d0>
1000dbf0:	2b00      	cmp	r3, #0
1000dbf2:	d0c6      	beq.n	1000db82 <_vfiprintf_r+0x15a>
1000dbf4:	9105      	str	r1, [sp, #20]
1000dbf6:	e7c4      	b.n	1000db82 <_vfiprintf_r+0x15a>
1000dbf8:	fb0c 2101 	mla	r1, ip, r1, r2
1000dbfc:	4604      	mov	r4, r0
1000dbfe:	2301      	movs	r3, #1
1000dc00:	e7f0      	b.n	1000dbe4 <_vfiprintf_r+0x1bc>
1000dc02:	ab03      	add	r3, sp, #12
1000dc04:	9300      	str	r3, [sp, #0]
1000dc06:	462a      	mov	r2, r5
1000dc08:	4b12      	ldr	r3, [pc, #72]	; (1000dc54 <_vfiprintf_r+0x22c>)
1000dc0a:	a904      	add	r1, sp, #16
1000dc0c:	4630      	mov	r0, r6
1000dc0e:	f3af 8000 	nop.w
1000dc12:	4607      	mov	r7, r0
1000dc14:	1c78      	adds	r0, r7, #1
1000dc16:	d1d6      	bne.n	1000dbc6 <_vfiprintf_r+0x19e>
1000dc18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1000dc1a:	07d9      	lsls	r1, r3, #31
1000dc1c:	d405      	bmi.n	1000dc2a <_vfiprintf_r+0x202>
1000dc1e:	89ab      	ldrh	r3, [r5, #12]
1000dc20:	059a      	lsls	r2, r3, #22
1000dc22:	d402      	bmi.n	1000dc2a <_vfiprintf_r+0x202>
1000dc24:	6da8      	ldr	r0, [r5, #88]	; 0x58
1000dc26:	f7ff fd1b 	bl	1000d660 <__retarget_lock_release_recursive>
1000dc2a:	89ab      	ldrh	r3, [r5, #12]
1000dc2c:	065b      	lsls	r3, r3, #25
1000dc2e:	f53f af1d 	bmi.w	1000da6c <_vfiprintf_r+0x44>
1000dc32:	9809      	ldr	r0, [sp, #36]	; 0x24
1000dc34:	e71c      	b.n	1000da70 <_vfiprintf_r+0x48>
1000dc36:	ab03      	add	r3, sp, #12
1000dc38:	9300      	str	r3, [sp, #0]
1000dc3a:	462a      	mov	r2, r5
1000dc3c:	4b05      	ldr	r3, [pc, #20]	; (1000dc54 <_vfiprintf_r+0x22c>)
1000dc3e:	a904      	add	r1, sp, #16
1000dc40:	4630      	mov	r0, r6
1000dc42:	f000 f879 	bl	1000dd38 <_printf_i>
1000dc46:	e7e4      	b.n	1000dc12 <_vfiprintf_r+0x1ea>
1000dc48:	1000e8f9 	.word	0x1000e8f9
1000dc4c:	1000e903 	.word	0x1000e903
1000dc50:	00000000 	.word	0x00000000
1000dc54:	1000da03 	.word	0x1000da03
1000dc58:	1000e8ff 	.word	0x1000e8ff

1000dc5c <_printf_common>:
1000dc5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1000dc60:	4616      	mov	r6, r2
1000dc62:	4699      	mov	r9, r3
1000dc64:	688a      	ldr	r2, [r1, #8]
1000dc66:	690b      	ldr	r3, [r1, #16]
1000dc68:	f8dd 8020 	ldr.w	r8, [sp, #32]
1000dc6c:	4293      	cmp	r3, r2
1000dc6e:	bfb8      	it	lt
1000dc70:	4613      	movlt	r3, r2
1000dc72:	6033      	str	r3, [r6, #0]
1000dc74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1000dc78:	4607      	mov	r7, r0
1000dc7a:	460c      	mov	r4, r1
1000dc7c:	b10a      	cbz	r2, 1000dc82 <_printf_common+0x26>
1000dc7e:	3301      	adds	r3, #1
1000dc80:	6033      	str	r3, [r6, #0]
1000dc82:	6823      	ldr	r3, [r4, #0]
1000dc84:	0699      	lsls	r1, r3, #26
1000dc86:	bf42      	ittt	mi
1000dc88:	6833      	ldrmi	r3, [r6, #0]
1000dc8a:	3302      	addmi	r3, #2
1000dc8c:	6033      	strmi	r3, [r6, #0]
1000dc8e:	6825      	ldr	r5, [r4, #0]
1000dc90:	f015 0506 	ands.w	r5, r5, #6
1000dc94:	d106      	bne.n	1000dca4 <_printf_common+0x48>
1000dc96:	f104 0a19 	add.w	sl, r4, #25
1000dc9a:	68e3      	ldr	r3, [r4, #12]
1000dc9c:	6832      	ldr	r2, [r6, #0]
1000dc9e:	1a9b      	subs	r3, r3, r2
1000dca0:	42ab      	cmp	r3, r5
1000dca2:	dc26      	bgt.n	1000dcf2 <_printf_common+0x96>
1000dca4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
1000dca8:	1e13      	subs	r3, r2, #0
1000dcaa:	6822      	ldr	r2, [r4, #0]
1000dcac:	bf18      	it	ne
1000dcae:	2301      	movne	r3, #1
1000dcb0:	0692      	lsls	r2, r2, #26
1000dcb2:	d42b      	bmi.n	1000dd0c <_printf_common+0xb0>
1000dcb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
1000dcb8:	4649      	mov	r1, r9
1000dcba:	4638      	mov	r0, r7
1000dcbc:	47c0      	blx	r8
1000dcbe:	3001      	adds	r0, #1
1000dcc0:	d01e      	beq.n	1000dd00 <_printf_common+0xa4>
1000dcc2:	6823      	ldr	r3, [r4, #0]
1000dcc4:	6922      	ldr	r2, [r4, #16]
1000dcc6:	f003 0306 	and.w	r3, r3, #6
1000dcca:	2b04      	cmp	r3, #4
1000dccc:	bf02      	ittt	eq
1000dcce:	68e5      	ldreq	r5, [r4, #12]
1000dcd0:	6833      	ldreq	r3, [r6, #0]
1000dcd2:	1aed      	subeq	r5, r5, r3
1000dcd4:	68a3      	ldr	r3, [r4, #8]
1000dcd6:	bf0c      	ite	eq
1000dcd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1000dcdc:	2500      	movne	r5, #0
1000dcde:	4293      	cmp	r3, r2
1000dce0:	bfc4      	itt	gt
1000dce2:	1a9b      	subgt	r3, r3, r2
1000dce4:	18ed      	addgt	r5, r5, r3
1000dce6:	2600      	movs	r6, #0
1000dce8:	341a      	adds	r4, #26
1000dcea:	42b5      	cmp	r5, r6
1000dcec:	d11a      	bne.n	1000dd24 <_printf_common+0xc8>
1000dcee:	2000      	movs	r0, #0
1000dcf0:	e008      	b.n	1000dd04 <_printf_common+0xa8>
1000dcf2:	2301      	movs	r3, #1
1000dcf4:	4652      	mov	r2, sl
1000dcf6:	4649      	mov	r1, r9
1000dcf8:	4638      	mov	r0, r7
1000dcfa:	47c0      	blx	r8
1000dcfc:	3001      	adds	r0, #1
1000dcfe:	d103      	bne.n	1000dd08 <_printf_common+0xac>
1000dd00:	f04f 30ff 	mov.w	r0, #4294967295
1000dd04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000dd08:	3501      	adds	r5, #1
1000dd0a:	e7c6      	b.n	1000dc9a <_printf_common+0x3e>
1000dd0c:	18e1      	adds	r1, r4, r3
1000dd0e:	1c5a      	adds	r2, r3, #1
1000dd10:	2030      	movs	r0, #48	; 0x30
1000dd12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1000dd16:	4422      	add	r2, r4
1000dd18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1000dd1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1000dd20:	3302      	adds	r3, #2
1000dd22:	e7c7      	b.n	1000dcb4 <_printf_common+0x58>
1000dd24:	2301      	movs	r3, #1
1000dd26:	4622      	mov	r2, r4
1000dd28:	4649      	mov	r1, r9
1000dd2a:	4638      	mov	r0, r7
1000dd2c:	47c0      	blx	r8
1000dd2e:	3001      	adds	r0, #1
1000dd30:	d0e6      	beq.n	1000dd00 <_printf_common+0xa4>
1000dd32:	3601      	adds	r6, #1
1000dd34:	e7d9      	b.n	1000dcea <_printf_common+0x8e>
	...

1000dd38 <_printf_i>:
1000dd38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
1000dd3c:	7e0f      	ldrb	r7, [r1, #24]
1000dd3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
1000dd40:	2f78      	cmp	r7, #120	; 0x78
1000dd42:	4691      	mov	r9, r2
1000dd44:	4680      	mov	r8, r0
1000dd46:	460c      	mov	r4, r1
1000dd48:	469a      	mov	sl, r3
1000dd4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
1000dd4e:	d807      	bhi.n	1000dd60 <_printf_i+0x28>
1000dd50:	2f62      	cmp	r7, #98	; 0x62
1000dd52:	d80a      	bhi.n	1000dd6a <_printf_i+0x32>
1000dd54:	2f00      	cmp	r7, #0
1000dd56:	f000 80d4 	beq.w	1000df02 <_printf_i+0x1ca>
1000dd5a:	2f58      	cmp	r7, #88	; 0x58
1000dd5c:	f000 80c0 	beq.w	1000dee0 <_printf_i+0x1a8>
1000dd60:	f104 0542 	add.w	r5, r4, #66	; 0x42
1000dd64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
1000dd68:	e03a      	b.n	1000dde0 <_printf_i+0xa8>
1000dd6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
1000dd6e:	2b15      	cmp	r3, #21
1000dd70:	d8f6      	bhi.n	1000dd60 <_printf_i+0x28>
1000dd72:	a101      	add	r1, pc, #4	; (adr r1, 1000dd78 <_printf_i+0x40>)
1000dd74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
1000dd78:	1000ddd1 	.word	0x1000ddd1
1000dd7c:	1000dde5 	.word	0x1000dde5
1000dd80:	1000dd61 	.word	0x1000dd61
1000dd84:	1000dd61 	.word	0x1000dd61
1000dd88:	1000dd61 	.word	0x1000dd61
1000dd8c:	1000dd61 	.word	0x1000dd61
1000dd90:	1000dde5 	.word	0x1000dde5
1000dd94:	1000dd61 	.word	0x1000dd61
1000dd98:	1000dd61 	.word	0x1000dd61
1000dd9c:	1000dd61 	.word	0x1000dd61
1000dda0:	1000dd61 	.word	0x1000dd61
1000dda4:	1000dee9 	.word	0x1000dee9
1000dda8:	1000de11 	.word	0x1000de11
1000ddac:	1000dea3 	.word	0x1000dea3
1000ddb0:	1000dd61 	.word	0x1000dd61
1000ddb4:	1000dd61 	.word	0x1000dd61
1000ddb8:	1000df0b 	.word	0x1000df0b
1000ddbc:	1000dd61 	.word	0x1000dd61
1000ddc0:	1000de11 	.word	0x1000de11
1000ddc4:	1000dd61 	.word	0x1000dd61
1000ddc8:	1000dd61 	.word	0x1000dd61
1000ddcc:	1000deab 	.word	0x1000deab
1000ddd0:	682b      	ldr	r3, [r5, #0]
1000ddd2:	1d1a      	adds	r2, r3, #4
1000ddd4:	681b      	ldr	r3, [r3, #0]
1000ddd6:	602a      	str	r2, [r5, #0]
1000ddd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
1000dddc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1000dde0:	2301      	movs	r3, #1
1000dde2:	e09f      	b.n	1000df24 <_printf_i+0x1ec>
1000dde4:	6820      	ldr	r0, [r4, #0]
1000dde6:	682b      	ldr	r3, [r5, #0]
1000dde8:	0607      	lsls	r7, r0, #24
1000ddea:	f103 0104 	add.w	r1, r3, #4
1000ddee:	6029      	str	r1, [r5, #0]
1000ddf0:	d501      	bpl.n	1000ddf6 <_printf_i+0xbe>
1000ddf2:	681e      	ldr	r6, [r3, #0]
1000ddf4:	e003      	b.n	1000ddfe <_printf_i+0xc6>
1000ddf6:	0646      	lsls	r6, r0, #25
1000ddf8:	d5fb      	bpl.n	1000ddf2 <_printf_i+0xba>
1000ddfa:	f9b3 6000 	ldrsh.w	r6, [r3]
1000ddfe:	2e00      	cmp	r6, #0
1000de00:	da03      	bge.n	1000de0a <_printf_i+0xd2>
1000de02:	232d      	movs	r3, #45	; 0x2d
1000de04:	4276      	negs	r6, r6
1000de06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1000de0a:	485a      	ldr	r0, [pc, #360]	; (1000df74 <_printf_i+0x23c>)
1000de0c:	230a      	movs	r3, #10
1000de0e:	e012      	b.n	1000de36 <_printf_i+0xfe>
1000de10:	682b      	ldr	r3, [r5, #0]
1000de12:	6820      	ldr	r0, [r4, #0]
1000de14:	1d19      	adds	r1, r3, #4
1000de16:	6029      	str	r1, [r5, #0]
1000de18:	0605      	lsls	r5, r0, #24
1000de1a:	d501      	bpl.n	1000de20 <_printf_i+0xe8>
1000de1c:	681e      	ldr	r6, [r3, #0]
1000de1e:	e002      	b.n	1000de26 <_printf_i+0xee>
1000de20:	0641      	lsls	r1, r0, #25
1000de22:	d5fb      	bpl.n	1000de1c <_printf_i+0xe4>
1000de24:	881e      	ldrh	r6, [r3, #0]
1000de26:	4853      	ldr	r0, [pc, #332]	; (1000df74 <_printf_i+0x23c>)
1000de28:	2f6f      	cmp	r7, #111	; 0x6f
1000de2a:	bf0c      	ite	eq
1000de2c:	2308      	moveq	r3, #8
1000de2e:	230a      	movne	r3, #10
1000de30:	2100      	movs	r1, #0
1000de32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1000de36:	6865      	ldr	r5, [r4, #4]
1000de38:	60a5      	str	r5, [r4, #8]
1000de3a:	2d00      	cmp	r5, #0
1000de3c:	bfa2      	ittt	ge
1000de3e:	6821      	ldrge	r1, [r4, #0]
1000de40:	f021 0104 	bicge.w	r1, r1, #4
1000de44:	6021      	strge	r1, [r4, #0]
1000de46:	b90e      	cbnz	r6, 1000de4c <_printf_i+0x114>
1000de48:	2d00      	cmp	r5, #0
1000de4a:	d04b      	beq.n	1000dee4 <_printf_i+0x1ac>
1000de4c:	4615      	mov	r5, r2
1000de4e:	fbb6 f1f3 	udiv	r1, r6, r3
1000de52:	fb03 6711 	mls	r7, r3, r1, r6
1000de56:	5dc7      	ldrb	r7, [r0, r7]
1000de58:	f805 7d01 	strb.w	r7, [r5, #-1]!
1000de5c:	4637      	mov	r7, r6
1000de5e:	42bb      	cmp	r3, r7
1000de60:	460e      	mov	r6, r1
1000de62:	d9f4      	bls.n	1000de4e <_printf_i+0x116>
1000de64:	2b08      	cmp	r3, #8
1000de66:	d10b      	bne.n	1000de80 <_printf_i+0x148>
1000de68:	6823      	ldr	r3, [r4, #0]
1000de6a:	07de      	lsls	r6, r3, #31
1000de6c:	d508      	bpl.n	1000de80 <_printf_i+0x148>
1000de6e:	6923      	ldr	r3, [r4, #16]
1000de70:	6861      	ldr	r1, [r4, #4]
1000de72:	4299      	cmp	r1, r3
1000de74:	bfde      	ittt	le
1000de76:	2330      	movle	r3, #48	; 0x30
1000de78:	f805 3c01 	strble.w	r3, [r5, #-1]
1000de7c:	f105 35ff 	addle.w	r5, r5, #4294967295
1000de80:	1b52      	subs	r2, r2, r5
1000de82:	6122      	str	r2, [r4, #16]
1000de84:	f8cd a000 	str.w	sl, [sp]
1000de88:	464b      	mov	r3, r9
1000de8a:	aa03      	add	r2, sp, #12
1000de8c:	4621      	mov	r1, r4
1000de8e:	4640      	mov	r0, r8
1000de90:	f7ff fee4 	bl	1000dc5c <_printf_common>
1000de94:	3001      	adds	r0, #1
1000de96:	d14a      	bne.n	1000df2e <_printf_i+0x1f6>
1000de98:	f04f 30ff 	mov.w	r0, #4294967295
1000de9c:	b004      	add	sp, #16
1000de9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000dea2:	6823      	ldr	r3, [r4, #0]
1000dea4:	f043 0320 	orr.w	r3, r3, #32
1000dea8:	6023      	str	r3, [r4, #0]
1000deaa:	4833      	ldr	r0, [pc, #204]	; (1000df78 <_printf_i+0x240>)
1000deac:	2778      	movs	r7, #120	; 0x78
1000deae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
1000deb2:	6823      	ldr	r3, [r4, #0]
1000deb4:	6829      	ldr	r1, [r5, #0]
1000deb6:	061f      	lsls	r7, r3, #24
1000deb8:	f851 6b04 	ldr.w	r6, [r1], #4
1000debc:	d402      	bmi.n	1000dec4 <_printf_i+0x18c>
1000debe:	065f      	lsls	r7, r3, #25
1000dec0:	bf48      	it	mi
1000dec2:	b2b6      	uxthmi	r6, r6
1000dec4:	07df      	lsls	r7, r3, #31
1000dec6:	bf48      	it	mi
1000dec8:	f043 0320 	orrmi.w	r3, r3, #32
1000decc:	6029      	str	r1, [r5, #0]
1000dece:	bf48      	it	mi
1000ded0:	6023      	strmi	r3, [r4, #0]
1000ded2:	b91e      	cbnz	r6, 1000dedc <_printf_i+0x1a4>
1000ded4:	6823      	ldr	r3, [r4, #0]
1000ded6:	f023 0320 	bic.w	r3, r3, #32
1000deda:	6023      	str	r3, [r4, #0]
1000dedc:	2310      	movs	r3, #16
1000dede:	e7a7      	b.n	1000de30 <_printf_i+0xf8>
1000dee0:	4824      	ldr	r0, [pc, #144]	; (1000df74 <_printf_i+0x23c>)
1000dee2:	e7e4      	b.n	1000deae <_printf_i+0x176>
1000dee4:	4615      	mov	r5, r2
1000dee6:	e7bd      	b.n	1000de64 <_printf_i+0x12c>
1000dee8:	682b      	ldr	r3, [r5, #0]
1000deea:	6826      	ldr	r6, [r4, #0]
1000deec:	6961      	ldr	r1, [r4, #20]
1000deee:	1d18      	adds	r0, r3, #4
1000def0:	6028      	str	r0, [r5, #0]
1000def2:	0635      	lsls	r5, r6, #24
1000def4:	681b      	ldr	r3, [r3, #0]
1000def6:	d501      	bpl.n	1000defc <_printf_i+0x1c4>
1000def8:	6019      	str	r1, [r3, #0]
1000defa:	e002      	b.n	1000df02 <_printf_i+0x1ca>
1000defc:	0670      	lsls	r0, r6, #25
1000defe:	d5fb      	bpl.n	1000def8 <_printf_i+0x1c0>
1000df00:	8019      	strh	r1, [r3, #0]
1000df02:	2300      	movs	r3, #0
1000df04:	6123      	str	r3, [r4, #16]
1000df06:	4615      	mov	r5, r2
1000df08:	e7bc      	b.n	1000de84 <_printf_i+0x14c>
1000df0a:	682b      	ldr	r3, [r5, #0]
1000df0c:	1d1a      	adds	r2, r3, #4
1000df0e:	602a      	str	r2, [r5, #0]
1000df10:	681d      	ldr	r5, [r3, #0]
1000df12:	6862      	ldr	r2, [r4, #4]
1000df14:	2100      	movs	r1, #0
1000df16:	4628      	mov	r0, r5
1000df18:	f7f2 f8aa 	bl	10000070 <memchr>
1000df1c:	b108      	cbz	r0, 1000df22 <_printf_i+0x1ea>
1000df1e:	1b40      	subs	r0, r0, r5
1000df20:	6060      	str	r0, [r4, #4]
1000df22:	6863      	ldr	r3, [r4, #4]
1000df24:	6123      	str	r3, [r4, #16]
1000df26:	2300      	movs	r3, #0
1000df28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1000df2c:	e7aa      	b.n	1000de84 <_printf_i+0x14c>
1000df2e:	6923      	ldr	r3, [r4, #16]
1000df30:	462a      	mov	r2, r5
1000df32:	4649      	mov	r1, r9
1000df34:	4640      	mov	r0, r8
1000df36:	47d0      	blx	sl
1000df38:	3001      	adds	r0, #1
1000df3a:	d0ad      	beq.n	1000de98 <_printf_i+0x160>
1000df3c:	6823      	ldr	r3, [r4, #0]
1000df3e:	079b      	lsls	r3, r3, #30
1000df40:	d413      	bmi.n	1000df6a <_printf_i+0x232>
1000df42:	68e0      	ldr	r0, [r4, #12]
1000df44:	9b03      	ldr	r3, [sp, #12]
1000df46:	4298      	cmp	r0, r3
1000df48:	bfb8      	it	lt
1000df4a:	4618      	movlt	r0, r3
1000df4c:	e7a6      	b.n	1000de9c <_printf_i+0x164>
1000df4e:	2301      	movs	r3, #1
1000df50:	4632      	mov	r2, r6
1000df52:	4649      	mov	r1, r9
1000df54:	4640      	mov	r0, r8
1000df56:	47d0      	blx	sl
1000df58:	3001      	adds	r0, #1
1000df5a:	d09d      	beq.n	1000de98 <_printf_i+0x160>
1000df5c:	3501      	adds	r5, #1
1000df5e:	68e3      	ldr	r3, [r4, #12]
1000df60:	9903      	ldr	r1, [sp, #12]
1000df62:	1a5b      	subs	r3, r3, r1
1000df64:	42ab      	cmp	r3, r5
1000df66:	dcf2      	bgt.n	1000df4e <_printf_i+0x216>
1000df68:	e7eb      	b.n	1000df42 <_printf_i+0x20a>
1000df6a:	2500      	movs	r5, #0
1000df6c:	f104 0619 	add.w	r6, r4, #25
1000df70:	e7f5      	b.n	1000df5e <_printf_i+0x226>
1000df72:	bf00      	nop
1000df74:	1000e90a 	.word	0x1000e90a
1000df78:	1000e91b 	.word	0x1000e91b

1000df7c <__sflush_r>:
1000df7c:	898a      	ldrh	r2, [r1, #12]
1000df7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000df82:	4605      	mov	r5, r0
1000df84:	0710      	lsls	r0, r2, #28
1000df86:	460c      	mov	r4, r1
1000df88:	d458      	bmi.n	1000e03c <__sflush_r+0xc0>
1000df8a:	684b      	ldr	r3, [r1, #4]
1000df8c:	2b00      	cmp	r3, #0
1000df8e:	dc05      	bgt.n	1000df9c <__sflush_r+0x20>
1000df90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1000df92:	2b00      	cmp	r3, #0
1000df94:	dc02      	bgt.n	1000df9c <__sflush_r+0x20>
1000df96:	2000      	movs	r0, #0
1000df98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000df9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1000df9e:	2e00      	cmp	r6, #0
1000dfa0:	d0f9      	beq.n	1000df96 <__sflush_r+0x1a>
1000dfa2:	2300      	movs	r3, #0
1000dfa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1000dfa8:	682f      	ldr	r7, [r5, #0]
1000dfaa:	6a21      	ldr	r1, [r4, #32]
1000dfac:	602b      	str	r3, [r5, #0]
1000dfae:	d032      	beq.n	1000e016 <__sflush_r+0x9a>
1000dfb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
1000dfb2:	89a3      	ldrh	r3, [r4, #12]
1000dfb4:	075a      	lsls	r2, r3, #29
1000dfb6:	d505      	bpl.n	1000dfc4 <__sflush_r+0x48>
1000dfb8:	6863      	ldr	r3, [r4, #4]
1000dfba:	1ac0      	subs	r0, r0, r3
1000dfbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
1000dfbe:	b10b      	cbz	r3, 1000dfc4 <__sflush_r+0x48>
1000dfc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
1000dfc2:	1ac0      	subs	r0, r0, r3
1000dfc4:	2300      	movs	r3, #0
1000dfc6:	4602      	mov	r2, r0
1000dfc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1000dfca:	6a21      	ldr	r1, [r4, #32]
1000dfcc:	4628      	mov	r0, r5
1000dfce:	47b0      	blx	r6
1000dfd0:	1c43      	adds	r3, r0, #1
1000dfd2:	89a3      	ldrh	r3, [r4, #12]
1000dfd4:	d106      	bne.n	1000dfe4 <__sflush_r+0x68>
1000dfd6:	6829      	ldr	r1, [r5, #0]
1000dfd8:	291d      	cmp	r1, #29
1000dfda:	d82b      	bhi.n	1000e034 <__sflush_r+0xb8>
1000dfdc:	4a29      	ldr	r2, [pc, #164]	; (1000e084 <__sflush_r+0x108>)
1000dfde:	410a      	asrs	r2, r1
1000dfe0:	07d6      	lsls	r6, r2, #31
1000dfe2:	d427      	bmi.n	1000e034 <__sflush_r+0xb8>
1000dfe4:	2200      	movs	r2, #0
1000dfe6:	6062      	str	r2, [r4, #4]
1000dfe8:	04d9      	lsls	r1, r3, #19
1000dfea:	6922      	ldr	r2, [r4, #16]
1000dfec:	6022      	str	r2, [r4, #0]
1000dfee:	d504      	bpl.n	1000dffa <__sflush_r+0x7e>
1000dff0:	1c42      	adds	r2, r0, #1
1000dff2:	d101      	bne.n	1000dff8 <__sflush_r+0x7c>
1000dff4:	682b      	ldr	r3, [r5, #0]
1000dff6:	b903      	cbnz	r3, 1000dffa <__sflush_r+0x7e>
1000dff8:	6560      	str	r0, [r4, #84]	; 0x54
1000dffa:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000dffc:	602f      	str	r7, [r5, #0]
1000dffe:	2900      	cmp	r1, #0
1000e000:	d0c9      	beq.n	1000df96 <__sflush_r+0x1a>
1000e002:	f104 0344 	add.w	r3, r4, #68	; 0x44
1000e006:	4299      	cmp	r1, r3
1000e008:	d002      	beq.n	1000e010 <__sflush_r+0x94>
1000e00a:	4628      	mov	r0, r5
1000e00c:	f7ff fb3e 	bl	1000d68c <_free_r>
1000e010:	2000      	movs	r0, #0
1000e012:	6360      	str	r0, [r4, #52]	; 0x34
1000e014:	e7c0      	b.n	1000df98 <__sflush_r+0x1c>
1000e016:	2301      	movs	r3, #1
1000e018:	4628      	mov	r0, r5
1000e01a:	47b0      	blx	r6
1000e01c:	1c41      	adds	r1, r0, #1
1000e01e:	d1c8      	bne.n	1000dfb2 <__sflush_r+0x36>
1000e020:	682b      	ldr	r3, [r5, #0]
1000e022:	2b00      	cmp	r3, #0
1000e024:	d0c5      	beq.n	1000dfb2 <__sflush_r+0x36>
1000e026:	2b1d      	cmp	r3, #29
1000e028:	d001      	beq.n	1000e02e <__sflush_r+0xb2>
1000e02a:	2b16      	cmp	r3, #22
1000e02c:	d101      	bne.n	1000e032 <__sflush_r+0xb6>
1000e02e:	602f      	str	r7, [r5, #0]
1000e030:	e7b1      	b.n	1000df96 <__sflush_r+0x1a>
1000e032:	89a3      	ldrh	r3, [r4, #12]
1000e034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000e038:	81a3      	strh	r3, [r4, #12]
1000e03a:	e7ad      	b.n	1000df98 <__sflush_r+0x1c>
1000e03c:	690f      	ldr	r7, [r1, #16]
1000e03e:	2f00      	cmp	r7, #0
1000e040:	d0a9      	beq.n	1000df96 <__sflush_r+0x1a>
1000e042:	0793      	lsls	r3, r2, #30
1000e044:	680e      	ldr	r6, [r1, #0]
1000e046:	bf08      	it	eq
1000e048:	694b      	ldreq	r3, [r1, #20]
1000e04a:	600f      	str	r7, [r1, #0]
1000e04c:	bf18      	it	ne
1000e04e:	2300      	movne	r3, #0
1000e050:	eba6 0807 	sub.w	r8, r6, r7
1000e054:	608b      	str	r3, [r1, #8]
1000e056:	f1b8 0f00 	cmp.w	r8, #0
1000e05a:	dd9c      	ble.n	1000df96 <__sflush_r+0x1a>
1000e05c:	6a21      	ldr	r1, [r4, #32]
1000e05e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1000e060:	4643      	mov	r3, r8
1000e062:	463a      	mov	r2, r7
1000e064:	4628      	mov	r0, r5
1000e066:	47b0      	blx	r6
1000e068:	2800      	cmp	r0, #0
1000e06a:	dc06      	bgt.n	1000e07a <__sflush_r+0xfe>
1000e06c:	89a3      	ldrh	r3, [r4, #12]
1000e06e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000e072:	81a3      	strh	r3, [r4, #12]
1000e074:	f04f 30ff 	mov.w	r0, #4294967295
1000e078:	e78e      	b.n	1000df98 <__sflush_r+0x1c>
1000e07a:	4407      	add	r7, r0
1000e07c:	eba8 0800 	sub.w	r8, r8, r0
1000e080:	e7e9      	b.n	1000e056 <__sflush_r+0xda>
1000e082:	bf00      	nop
1000e084:	dfbffffe 	.word	0xdfbffffe

1000e088 <_fflush_r>:
1000e088:	b538      	push	{r3, r4, r5, lr}
1000e08a:	690b      	ldr	r3, [r1, #16]
1000e08c:	4605      	mov	r5, r0
1000e08e:	460c      	mov	r4, r1
1000e090:	b913      	cbnz	r3, 1000e098 <_fflush_r+0x10>
1000e092:	2500      	movs	r5, #0
1000e094:	4628      	mov	r0, r5
1000e096:	bd38      	pop	{r3, r4, r5, pc}
1000e098:	b118      	cbz	r0, 1000e0a2 <_fflush_r+0x1a>
1000e09a:	6a03      	ldr	r3, [r0, #32]
1000e09c:	b90b      	cbnz	r3, 1000e0a2 <_fflush_r+0x1a>
1000e09e:	f7ff f985 	bl	1000d3ac <__sinit>
1000e0a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000e0a6:	2b00      	cmp	r3, #0
1000e0a8:	d0f3      	beq.n	1000e092 <_fflush_r+0xa>
1000e0aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
1000e0ac:	07d0      	lsls	r0, r2, #31
1000e0ae:	d404      	bmi.n	1000e0ba <_fflush_r+0x32>
1000e0b0:	0599      	lsls	r1, r3, #22
1000e0b2:	d402      	bmi.n	1000e0ba <_fflush_r+0x32>
1000e0b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
1000e0b6:	f7ff fad2 	bl	1000d65e <__retarget_lock_acquire_recursive>
1000e0ba:	4628      	mov	r0, r5
1000e0bc:	4621      	mov	r1, r4
1000e0be:	f7ff ff5d 	bl	1000df7c <__sflush_r>
1000e0c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
1000e0c4:	07da      	lsls	r2, r3, #31
1000e0c6:	4605      	mov	r5, r0
1000e0c8:	d4e4      	bmi.n	1000e094 <_fflush_r+0xc>
1000e0ca:	89a3      	ldrh	r3, [r4, #12]
1000e0cc:	059b      	lsls	r3, r3, #22
1000e0ce:	d4e1      	bmi.n	1000e094 <_fflush_r+0xc>
1000e0d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
1000e0d2:	f7ff fac5 	bl	1000d660 <__retarget_lock_release_recursive>
1000e0d6:	e7dd      	b.n	1000e094 <_fflush_r+0xc>

1000e0d8 <__swbuf_r>:
1000e0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e0da:	460e      	mov	r6, r1
1000e0dc:	4614      	mov	r4, r2
1000e0de:	4605      	mov	r5, r0
1000e0e0:	b118      	cbz	r0, 1000e0ea <__swbuf_r+0x12>
1000e0e2:	6a03      	ldr	r3, [r0, #32]
1000e0e4:	b90b      	cbnz	r3, 1000e0ea <__swbuf_r+0x12>
1000e0e6:	f7ff f961 	bl	1000d3ac <__sinit>
1000e0ea:	69a3      	ldr	r3, [r4, #24]
1000e0ec:	60a3      	str	r3, [r4, #8]
1000e0ee:	89a3      	ldrh	r3, [r4, #12]
1000e0f0:	071a      	lsls	r2, r3, #28
1000e0f2:	d525      	bpl.n	1000e140 <__swbuf_r+0x68>
1000e0f4:	6923      	ldr	r3, [r4, #16]
1000e0f6:	b31b      	cbz	r3, 1000e140 <__swbuf_r+0x68>
1000e0f8:	6823      	ldr	r3, [r4, #0]
1000e0fa:	6922      	ldr	r2, [r4, #16]
1000e0fc:	1a98      	subs	r0, r3, r2
1000e0fe:	6963      	ldr	r3, [r4, #20]
1000e100:	b2f6      	uxtb	r6, r6
1000e102:	4283      	cmp	r3, r0
1000e104:	4637      	mov	r7, r6
1000e106:	dc04      	bgt.n	1000e112 <__swbuf_r+0x3a>
1000e108:	4621      	mov	r1, r4
1000e10a:	4628      	mov	r0, r5
1000e10c:	f7ff ffbc 	bl	1000e088 <_fflush_r>
1000e110:	b9e0      	cbnz	r0, 1000e14c <__swbuf_r+0x74>
1000e112:	68a3      	ldr	r3, [r4, #8]
1000e114:	3b01      	subs	r3, #1
1000e116:	60a3      	str	r3, [r4, #8]
1000e118:	6823      	ldr	r3, [r4, #0]
1000e11a:	1c5a      	adds	r2, r3, #1
1000e11c:	6022      	str	r2, [r4, #0]
1000e11e:	701e      	strb	r6, [r3, #0]
1000e120:	6962      	ldr	r2, [r4, #20]
1000e122:	1c43      	adds	r3, r0, #1
1000e124:	429a      	cmp	r2, r3
1000e126:	d004      	beq.n	1000e132 <__swbuf_r+0x5a>
1000e128:	89a3      	ldrh	r3, [r4, #12]
1000e12a:	07db      	lsls	r3, r3, #31
1000e12c:	d506      	bpl.n	1000e13c <__swbuf_r+0x64>
1000e12e:	2e0a      	cmp	r6, #10
1000e130:	d104      	bne.n	1000e13c <__swbuf_r+0x64>
1000e132:	4621      	mov	r1, r4
1000e134:	4628      	mov	r0, r5
1000e136:	f7ff ffa7 	bl	1000e088 <_fflush_r>
1000e13a:	b938      	cbnz	r0, 1000e14c <__swbuf_r+0x74>
1000e13c:	4638      	mov	r0, r7
1000e13e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e140:	4621      	mov	r1, r4
1000e142:	4628      	mov	r0, r5
1000e144:	f000 f806 	bl	1000e154 <__swsetup_r>
1000e148:	2800      	cmp	r0, #0
1000e14a:	d0d5      	beq.n	1000e0f8 <__swbuf_r+0x20>
1000e14c:	f04f 37ff 	mov.w	r7, #4294967295
1000e150:	e7f4      	b.n	1000e13c <__swbuf_r+0x64>
	...

1000e154 <__swsetup_r>:
1000e154:	b538      	push	{r3, r4, r5, lr}
1000e156:	4b2a      	ldr	r3, [pc, #168]	; (1000e200 <__swsetup_r+0xac>)
1000e158:	4605      	mov	r5, r0
1000e15a:	6818      	ldr	r0, [r3, #0]
1000e15c:	460c      	mov	r4, r1
1000e15e:	b118      	cbz	r0, 1000e168 <__swsetup_r+0x14>
1000e160:	6a03      	ldr	r3, [r0, #32]
1000e162:	b90b      	cbnz	r3, 1000e168 <__swsetup_r+0x14>
1000e164:	f7ff f922 	bl	1000d3ac <__sinit>
1000e168:	89a3      	ldrh	r3, [r4, #12]
1000e16a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1000e16e:	0718      	lsls	r0, r3, #28
1000e170:	d422      	bmi.n	1000e1b8 <__swsetup_r+0x64>
1000e172:	06d9      	lsls	r1, r3, #27
1000e174:	d407      	bmi.n	1000e186 <__swsetup_r+0x32>
1000e176:	2309      	movs	r3, #9
1000e178:	602b      	str	r3, [r5, #0]
1000e17a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
1000e17e:	81a3      	strh	r3, [r4, #12]
1000e180:	f04f 30ff 	mov.w	r0, #4294967295
1000e184:	e034      	b.n	1000e1f0 <__swsetup_r+0x9c>
1000e186:	0758      	lsls	r0, r3, #29
1000e188:	d512      	bpl.n	1000e1b0 <__swsetup_r+0x5c>
1000e18a:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000e18c:	b141      	cbz	r1, 1000e1a0 <__swsetup_r+0x4c>
1000e18e:	f104 0344 	add.w	r3, r4, #68	; 0x44
1000e192:	4299      	cmp	r1, r3
1000e194:	d002      	beq.n	1000e19c <__swsetup_r+0x48>
1000e196:	4628      	mov	r0, r5
1000e198:	f7ff fa78 	bl	1000d68c <_free_r>
1000e19c:	2300      	movs	r3, #0
1000e19e:	6363      	str	r3, [r4, #52]	; 0x34
1000e1a0:	89a3      	ldrh	r3, [r4, #12]
1000e1a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1000e1a6:	81a3      	strh	r3, [r4, #12]
1000e1a8:	2300      	movs	r3, #0
1000e1aa:	6063      	str	r3, [r4, #4]
1000e1ac:	6923      	ldr	r3, [r4, #16]
1000e1ae:	6023      	str	r3, [r4, #0]
1000e1b0:	89a3      	ldrh	r3, [r4, #12]
1000e1b2:	f043 0308 	orr.w	r3, r3, #8
1000e1b6:	81a3      	strh	r3, [r4, #12]
1000e1b8:	6923      	ldr	r3, [r4, #16]
1000e1ba:	b94b      	cbnz	r3, 1000e1d0 <__swsetup_r+0x7c>
1000e1bc:	89a3      	ldrh	r3, [r4, #12]
1000e1be:	f403 7320 	and.w	r3, r3, #640	; 0x280
1000e1c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1000e1c6:	d003      	beq.n	1000e1d0 <__swsetup_r+0x7c>
1000e1c8:	4621      	mov	r1, r4
1000e1ca:	4628      	mov	r0, r5
1000e1cc:	f000 f8cd 	bl	1000e36a <__smakebuf_r>
1000e1d0:	89a0      	ldrh	r0, [r4, #12]
1000e1d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1000e1d6:	f010 0301 	ands.w	r3, r0, #1
1000e1da:	d00a      	beq.n	1000e1f2 <__swsetup_r+0x9e>
1000e1dc:	2300      	movs	r3, #0
1000e1de:	60a3      	str	r3, [r4, #8]
1000e1e0:	6963      	ldr	r3, [r4, #20]
1000e1e2:	425b      	negs	r3, r3
1000e1e4:	61a3      	str	r3, [r4, #24]
1000e1e6:	6923      	ldr	r3, [r4, #16]
1000e1e8:	b943      	cbnz	r3, 1000e1fc <__swsetup_r+0xa8>
1000e1ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
1000e1ee:	d1c4      	bne.n	1000e17a <__swsetup_r+0x26>
1000e1f0:	bd38      	pop	{r3, r4, r5, pc}
1000e1f2:	0781      	lsls	r1, r0, #30
1000e1f4:	bf58      	it	pl
1000e1f6:	6963      	ldrpl	r3, [r4, #20]
1000e1f8:	60a3      	str	r3, [r4, #8]
1000e1fa:	e7f4      	b.n	1000e1e6 <__swsetup_r+0x92>
1000e1fc:	2000      	movs	r0, #0
1000e1fe:	e7f7      	b.n	1000e1f0 <__swsetup_r+0x9c>
1000e200:	1002011c 	.word	0x1002011c

1000e204 <memmove>:
1000e204:	4288      	cmp	r0, r1
1000e206:	b510      	push	{r4, lr}
1000e208:	eb01 0402 	add.w	r4, r1, r2
1000e20c:	d902      	bls.n	1000e214 <memmove+0x10>
1000e20e:	4284      	cmp	r4, r0
1000e210:	4623      	mov	r3, r4
1000e212:	d807      	bhi.n	1000e224 <memmove+0x20>
1000e214:	1e43      	subs	r3, r0, #1
1000e216:	42a1      	cmp	r1, r4
1000e218:	d008      	beq.n	1000e22c <memmove+0x28>
1000e21a:	f811 2b01 	ldrb.w	r2, [r1], #1
1000e21e:	f803 2f01 	strb.w	r2, [r3, #1]!
1000e222:	e7f8      	b.n	1000e216 <memmove+0x12>
1000e224:	4402      	add	r2, r0
1000e226:	4601      	mov	r1, r0
1000e228:	428a      	cmp	r2, r1
1000e22a:	d100      	bne.n	1000e22e <memmove+0x2a>
1000e22c:	bd10      	pop	{r4, pc}
1000e22e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1000e232:	f802 4d01 	strb.w	r4, [r2, #-1]!
1000e236:	e7f7      	b.n	1000e228 <memmove+0x24>

1000e238 <_raise_r>:
1000e238:	291f      	cmp	r1, #31
1000e23a:	b538      	push	{r3, r4, r5, lr}
1000e23c:	4604      	mov	r4, r0
1000e23e:	460d      	mov	r5, r1
1000e240:	d904      	bls.n	1000e24c <_raise_r+0x14>
1000e242:	2316      	movs	r3, #22
1000e244:	6003      	str	r3, [r0, #0]
1000e246:	f04f 30ff 	mov.w	r0, #4294967295
1000e24a:	bd38      	pop	{r3, r4, r5, pc}
1000e24c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
1000e24e:	b112      	cbz	r2, 1000e256 <_raise_r+0x1e>
1000e250:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
1000e254:	b94b      	cbnz	r3, 1000e26a <_raise_r+0x32>
1000e256:	4620      	mov	r0, r4
1000e258:	f000 f830 	bl	1000e2bc <_getpid_r>
1000e25c:	462a      	mov	r2, r5
1000e25e:	4601      	mov	r1, r0
1000e260:	4620      	mov	r0, r4
1000e262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1000e266:	f000 b817 	b.w	1000e298 <_kill_r>
1000e26a:	2b01      	cmp	r3, #1
1000e26c:	d00a      	beq.n	1000e284 <_raise_r+0x4c>
1000e26e:	1c59      	adds	r1, r3, #1
1000e270:	d103      	bne.n	1000e27a <_raise_r+0x42>
1000e272:	2316      	movs	r3, #22
1000e274:	6003      	str	r3, [r0, #0]
1000e276:	2001      	movs	r0, #1
1000e278:	e7e7      	b.n	1000e24a <_raise_r+0x12>
1000e27a:	2400      	movs	r4, #0
1000e27c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
1000e280:	4628      	mov	r0, r5
1000e282:	4798      	blx	r3
1000e284:	2000      	movs	r0, #0
1000e286:	e7e0      	b.n	1000e24a <_raise_r+0x12>

1000e288 <raise>:
1000e288:	4b02      	ldr	r3, [pc, #8]	; (1000e294 <raise+0xc>)
1000e28a:	4601      	mov	r1, r0
1000e28c:	6818      	ldr	r0, [r3, #0]
1000e28e:	f7ff bfd3 	b.w	1000e238 <_raise_r>
1000e292:	bf00      	nop
1000e294:	1002011c 	.word	0x1002011c

1000e298 <_kill_r>:
1000e298:	b538      	push	{r3, r4, r5, lr}
1000e29a:	4d07      	ldr	r5, [pc, #28]	; (1000e2b8 <_kill_r+0x20>)
1000e29c:	2300      	movs	r3, #0
1000e29e:	4604      	mov	r4, r0
1000e2a0:	4608      	mov	r0, r1
1000e2a2:	4611      	mov	r1, r2
1000e2a4:	602b      	str	r3, [r5, #0]
1000e2a6:	f7f3 faa1 	bl	100017ec <_kill>
1000e2aa:	1c43      	adds	r3, r0, #1
1000e2ac:	d102      	bne.n	1000e2b4 <_kill_r+0x1c>
1000e2ae:	682b      	ldr	r3, [r5, #0]
1000e2b0:	b103      	cbz	r3, 1000e2b4 <_kill_r+0x1c>
1000e2b2:	6023      	str	r3, [r4, #0]
1000e2b4:	bd38      	pop	{r3, r4, r5, pc}
1000e2b6:	bf00      	nop
1000e2b8:	100205f8 	.word	0x100205f8

1000e2bc <_getpid_r>:
1000e2bc:	f7f3 ba8e 	b.w	100017dc <_getpid>

1000e2c0 <_realloc_r>:
1000e2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000e2c4:	4680      	mov	r8, r0
1000e2c6:	4614      	mov	r4, r2
1000e2c8:	460e      	mov	r6, r1
1000e2ca:	b921      	cbnz	r1, 1000e2d6 <_realloc_r+0x16>
1000e2cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1000e2d0:	4611      	mov	r1, r2
1000e2d2:	f7fe bf53 	b.w	1000d17c <_malloc_r>
1000e2d6:	b92a      	cbnz	r2, 1000e2e4 <_realloc_r+0x24>
1000e2d8:	f7ff f9d8 	bl	1000d68c <_free_r>
1000e2dc:	4625      	mov	r5, r4
1000e2de:	4628      	mov	r0, r5
1000e2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000e2e4:	f000 f8a0 	bl	1000e428 <_malloc_usable_size_r>
1000e2e8:	4284      	cmp	r4, r0
1000e2ea:	4607      	mov	r7, r0
1000e2ec:	d802      	bhi.n	1000e2f4 <_realloc_r+0x34>
1000e2ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
1000e2f2:	d812      	bhi.n	1000e31a <_realloc_r+0x5a>
1000e2f4:	4621      	mov	r1, r4
1000e2f6:	4640      	mov	r0, r8
1000e2f8:	f7fe ff40 	bl	1000d17c <_malloc_r>
1000e2fc:	4605      	mov	r5, r0
1000e2fe:	2800      	cmp	r0, #0
1000e300:	d0ed      	beq.n	1000e2de <_realloc_r+0x1e>
1000e302:	42bc      	cmp	r4, r7
1000e304:	4622      	mov	r2, r4
1000e306:	4631      	mov	r1, r6
1000e308:	bf28      	it	cs
1000e30a:	463a      	movcs	r2, r7
1000e30c:	f7ff f9a9 	bl	1000d662 <memcpy>
1000e310:	4631      	mov	r1, r6
1000e312:	4640      	mov	r0, r8
1000e314:	f7ff f9ba 	bl	1000d68c <_free_r>
1000e318:	e7e1      	b.n	1000e2de <_realloc_r+0x1e>
1000e31a:	4635      	mov	r5, r6
1000e31c:	e7df      	b.n	1000e2de <_realloc_r+0x1e>

1000e31e <__swhatbuf_r>:
1000e31e:	b570      	push	{r4, r5, r6, lr}
1000e320:	460c      	mov	r4, r1
1000e322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000e326:	2900      	cmp	r1, #0
1000e328:	b096      	sub	sp, #88	; 0x58
1000e32a:	4615      	mov	r5, r2
1000e32c:	461e      	mov	r6, r3
1000e32e:	da0d      	bge.n	1000e34c <__swhatbuf_r+0x2e>
1000e330:	89a3      	ldrh	r3, [r4, #12]
1000e332:	f013 0f80 	tst.w	r3, #128	; 0x80
1000e336:	f04f 0100 	mov.w	r1, #0
1000e33a:	bf0c      	ite	eq
1000e33c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
1000e340:	2340      	movne	r3, #64	; 0x40
1000e342:	2000      	movs	r0, #0
1000e344:	6031      	str	r1, [r6, #0]
1000e346:	602b      	str	r3, [r5, #0]
1000e348:	b016      	add	sp, #88	; 0x58
1000e34a:	bd70      	pop	{r4, r5, r6, pc}
1000e34c:	466a      	mov	r2, sp
1000e34e:	f000 f849 	bl	1000e3e4 <_fstat_r>
1000e352:	2800      	cmp	r0, #0
1000e354:	dbec      	blt.n	1000e330 <__swhatbuf_r+0x12>
1000e356:	9901      	ldr	r1, [sp, #4]
1000e358:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
1000e35c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
1000e360:	4259      	negs	r1, r3
1000e362:	4159      	adcs	r1, r3
1000e364:	f44f 6380 	mov.w	r3, #1024	; 0x400
1000e368:	e7eb      	b.n	1000e342 <__swhatbuf_r+0x24>

1000e36a <__smakebuf_r>:
1000e36a:	898b      	ldrh	r3, [r1, #12]
1000e36c:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000e36e:	079d      	lsls	r5, r3, #30
1000e370:	4606      	mov	r6, r0
1000e372:	460c      	mov	r4, r1
1000e374:	d507      	bpl.n	1000e386 <__smakebuf_r+0x1c>
1000e376:	f104 0347 	add.w	r3, r4, #71	; 0x47
1000e37a:	6023      	str	r3, [r4, #0]
1000e37c:	6123      	str	r3, [r4, #16]
1000e37e:	2301      	movs	r3, #1
1000e380:	6163      	str	r3, [r4, #20]
1000e382:	b002      	add	sp, #8
1000e384:	bd70      	pop	{r4, r5, r6, pc}
1000e386:	ab01      	add	r3, sp, #4
1000e388:	466a      	mov	r2, sp
1000e38a:	f7ff ffc8 	bl	1000e31e <__swhatbuf_r>
1000e38e:	9900      	ldr	r1, [sp, #0]
1000e390:	4605      	mov	r5, r0
1000e392:	4630      	mov	r0, r6
1000e394:	f7fe fef2 	bl	1000d17c <_malloc_r>
1000e398:	b948      	cbnz	r0, 1000e3ae <__smakebuf_r+0x44>
1000e39a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000e39e:	059a      	lsls	r2, r3, #22
1000e3a0:	d4ef      	bmi.n	1000e382 <__smakebuf_r+0x18>
1000e3a2:	f023 0303 	bic.w	r3, r3, #3
1000e3a6:	f043 0302 	orr.w	r3, r3, #2
1000e3aa:	81a3      	strh	r3, [r4, #12]
1000e3ac:	e7e3      	b.n	1000e376 <__smakebuf_r+0xc>
1000e3ae:	89a3      	ldrh	r3, [r4, #12]
1000e3b0:	6020      	str	r0, [r4, #0]
1000e3b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1000e3b6:	81a3      	strh	r3, [r4, #12]
1000e3b8:	9b00      	ldr	r3, [sp, #0]
1000e3ba:	6163      	str	r3, [r4, #20]
1000e3bc:	9b01      	ldr	r3, [sp, #4]
1000e3be:	6120      	str	r0, [r4, #16]
1000e3c0:	b15b      	cbz	r3, 1000e3da <__smakebuf_r+0x70>
1000e3c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1000e3c6:	4630      	mov	r0, r6
1000e3c8:	f000 f81e 	bl	1000e408 <_isatty_r>
1000e3cc:	b128      	cbz	r0, 1000e3da <__smakebuf_r+0x70>
1000e3ce:	89a3      	ldrh	r3, [r4, #12]
1000e3d0:	f023 0303 	bic.w	r3, r3, #3
1000e3d4:	f043 0301 	orr.w	r3, r3, #1
1000e3d8:	81a3      	strh	r3, [r4, #12]
1000e3da:	89a3      	ldrh	r3, [r4, #12]
1000e3dc:	431d      	orrs	r5, r3
1000e3de:	81a5      	strh	r5, [r4, #12]
1000e3e0:	e7cf      	b.n	1000e382 <__smakebuf_r+0x18>
	...

1000e3e4 <_fstat_r>:
1000e3e4:	b538      	push	{r3, r4, r5, lr}
1000e3e6:	4d07      	ldr	r5, [pc, #28]	; (1000e404 <_fstat_r+0x20>)
1000e3e8:	2300      	movs	r3, #0
1000e3ea:	4604      	mov	r4, r0
1000e3ec:	4608      	mov	r0, r1
1000e3ee:	4611      	mov	r1, r2
1000e3f0:	602b      	str	r3, [r5, #0]
1000e3f2:	f7f3 fa5a 	bl	100018aa <_fstat>
1000e3f6:	1c43      	adds	r3, r0, #1
1000e3f8:	d102      	bne.n	1000e400 <_fstat_r+0x1c>
1000e3fa:	682b      	ldr	r3, [r5, #0]
1000e3fc:	b103      	cbz	r3, 1000e400 <_fstat_r+0x1c>
1000e3fe:	6023      	str	r3, [r4, #0]
1000e400:	bd38      	pop	{r3, r4, r5, pc}
1000e402:	bf00      	nop
1000e404:	100205f8 	.word	0x100205f8

1000e408 <_isatty_r>:
1000e408:	b538      	push	{r3, r4, r5, lr}
1000e40a:	4d06      	ldr	r5, [pc, #24]	; (1000e424 <_isatty_r+0x1c>)
1000e40c:	2300      	movs	r3, #0
1000e40e:	4604      	mov	r4, r0
1000e410:	4608      	mov	r0, r1
1000e412:	602b      	str	r3, [r5, #0]
1000e414:	f7f3 fa59 	bl	100018ca <_isatty>
1000e418:	1c43      	adds	r3, r0, #1
1000e41a:	d102      	bne.n	1000e422 <_isatty_r+0x1a>
1000e41c:	682b      	ldr	r3, [r5, #0]
1000e41e:	b103      	cbz	r3, 1000e422 <_isatty_r+0x1a>
1000e420:	6023      	str	r3, [r4, #0]
1000e422:	bd38      	pop	{r3, r4, r5, pc}
1000e424:	100205f8 	.word	0x100205f8

1000e428 <_malloc_usable_size_r>:
1000e428:	f851 3c04 	ldr.w	r3, [r1, #-4]
1000e42c:	1f18      	subs	r0, r3, #4
1000e42e:	2b00      	cmp	r3, #0
1000e430:	bfbc      	itt	lt
1000e432:	580b      	ldrlt	r3, [r1, r0]
1000e434:	18c0      	addlt	r0, r0, r3
1000e436:	4770      	bx	lr

1000e438 <trunc>:
1000e438:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
1000e43c:	ec5c bb10 	vmov	fp, ip, d0
1000e440:	f3cc 500a 	ubfx	r0, ip, #20, #11
1000e444:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
1000e448:	2913      	cmp	r1, #19
1000e44a:	4664      	mov	r4, ip
1000e44c:	dc11      	bgt.n	1000e472 <trunc+0x3a>
1000e44e:	2900      	cmp	r1, #0
1000e450:	bfa7      	ittee	ge
1000e452:	4b15      	ldrge	r3, [pc, #84]	; (1000e4a8 <trunc+0x70>)
1000e454:	fa43 f101 	asrge.w	r1, r3, r1
1000e458:	2200      	movlt	r2, #0
1000e45a:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
1000e45e:	bfa4      	itt	ge
1000e460:	2200      	movge	r2, #0
1000e462:	ea01 030c 	andge.w	r3, r1, ip
1000e466:	4693      	mov	fp, r2
1000e468:	469c      	mov	ip, r3
1000e46a:	ec4c bb10 	vmov	d0, fp, ip
1000e46e:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
1000e472:	2933      	cmp	r1, #51	; 0x33
1000e474:	dd0d      	ble.n	1000e492 <trunc+0x5a>
1000e476:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
1000e47a:	d1f6      	bne.n	1000e46a <trunc+0x32>
1000e47c:	4663      	mov	r3, ip
1000e47e:	ee10 2a10 	vmov	r2, s0
1000e482:	ee10 0a10 	vmov	r0, s0
1000e486:	4621      	mov	r1, r4
1000e488:	f7f1 fe48 	bl	1000011c <__adddf3>
1000e48c:	4683      	mov	fp, r0
1000e48e:	468c      	mov	ip, r1
1000e490:	e7eb      	b.n	1000e46a <trunc+0x32>
1000e492:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
1000e496:	f04f 33ff 	mov.w	r3, #4294967295
1000e49a:	40c3      	lsrs	r3, r0
1000e49c:	ea2b 0603 	bic.w	r6, fp, r3
1000e4a0:	46b3      	mov	fp, r6
1000e4a2:	46a4      	mov	ip, r4
1000e4a4:	e7e1      	b.n	1000e46a <trunc+0x32>
1000e4a6:	bf00      	nop
1000e4a8:	fff00000 	.word	0xfff00000

1000e4ac <_init>:
1000e4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e4ae:	bf00      	nop
1000e4b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000e4b2:	bc08      	pop	{r3}
1000e4b4:	469e      	mov	lr, r3
1000e4b6:	4770      	bx	lr

1000e4b8 <_fini>:
1000e4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e4ba:	bf00      	nop
1000e4bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000e4be:	bc08      	pop	{r3}
1000e4c0:	469e      	mov	lr, r3
1000e4c2:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

1000e4c4 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
1000e4c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 1000e4fc <LoopForever+0x2>
  movs  r1, #0
1000e4c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
1000e4ca:	e003      	b.n	1000e4d4 <LoopCopyDataInit>

1000e4cc <CopyDataInit>:
  ldr  r3, =_sidata
1000e4cc:	4b0c      	ldr	r3, [pc, #48]	; (1000e500 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
1000e4ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
1000e4d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
1000e4d2:	3104      	adds	r1, #4

1000e4d4 <LoopCopyDataInit>:
  ldr  r0, =_sdata
1000e4d4:	480b      	ldr	r0, [pc, #44]	; (1000e504 <LoopForever+0xa>)
  ldr  r3, =_edata
1000e4d6:	4b0c      	ldr	r3, [pc, #48]	; (1000e508 <LoopForever+0xe>)
  adds  r2, r0, r1
1000e4d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
1000e4da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
1000e4dc:	d3f6      	bcc.n	1000e4cc <CopyDataInit>
  ldr  r2, =_sbss
1000e4de:	4a0b      	ldr	r2, [pc, #44]	; (1000e50c <LoopForever+0x12>)
  b  LoopFillZerobss
1000e4e0:	e002      	b.n	1000e4e8 <LoopFillZerobss>

1000e4e2 <FillZerobss>:
  movs  r3, #0
1000e4e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
1000e4e4:	f842 3b04 	str.w	r3, [r2], #4

1000e4e8 <LoopFillZerobss>:
  ldr  r3, = _ebss
1000e4e8:	4b09      	ldr	r3, [pc, #36]	; (1000e510 <LoopForever+0x16>)
  cmp  r2, r3
1000e4ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
1000e4ec:	d3f9      	bcc.n	1000e4e2 <FillZerobss>
  bl  SystemInit
1000e4ee:	f7f2 fa55 	bl	1000099c <SystemInit>
 bl __libc_init_array
1000e4f2:	f7ff f88f 	bl	1000d614 <__libc_init_array>
  bl main
1000e4f6:	f7f2 fa77 	bl	100009e8 <main>

1000e4fa <LoopForever>:
    b LoopForever
1000e4fa:	e7fe      	b.n	1000e4fa <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
1000e4fc:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
1000e500:	1000e934 	.word	0x1000e934
  ldr  r0, =_sdata
1000e504:	10020000 	.word	0x10020000
  ldr  r3, =_edata
1000e508:	10020120 	.word	0x10020120
  ldr  r2, =_sbss
1000e50c:	100201ac 	.word	0x100201ac
  ldr  r3, = _ebss
1000e510:	10020600 	.word	0x10020600

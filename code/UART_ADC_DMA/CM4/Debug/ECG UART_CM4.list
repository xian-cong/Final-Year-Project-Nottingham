
ECG UART_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7d4  10000000  10000000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  1000d7d4  1000d7d4  0002d7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003fc  1000d824  1000d824  0002d824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  1000dc20  1000dc20  000301ac  2**0
                  CONTENTS
  5 .ARM          00000000  1000dc20  1000dc20  000301ac  2**0
                  CONTENTS
  6 .preinit_array 00000000  1000dc20  1000dc20  000301ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  1000dc20  1000dc20  0002dc20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  1000dc24  1000dc24  0002dc24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000120  10020000  1000dc28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 0000008c  10020120  1000dd48  00030120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .bss          000003ec  100201ac  1000ddd4  000301ac  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  10020598  1000e1c0  000301ac  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301ac  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 15 .debug_info   00022a5f  00000000  00000000  0003021f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00004afb  00000000  00000000  00052c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000016b0  00000000  00000000  00057780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000010f9  00000000  00000000  00058e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0004cbc3  00000000  00000000  00059f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000201f1  00000000  00000000  000a6aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001e47ec  00000000  00000000  000c6cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006764  00000000  00000000  002ab4cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000075  00000000  00000000  002b1c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	; (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	; (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	; (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	100201ac 	.word	0x100201ac
1000001c:	00000000 	.word	0x00000000
10000020:	1000d7bc 	.word	0x1000d7bc

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	; (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	; (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	; (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	100201b0 	.word	0x100201b0
1000003c:	1000d7bc 	.word	0x1000d7bc

10000040 <strcmp>:
10000040:	f810 2b01 	ldrb.w	r2, [r0], #1
10000044:	f811 3b01 	ldrb.w	r3, [r1], #1
10000048:	2a01      	cmp	r2, #1
1000004a:	bf28      	it	cs
1000004c:	429a      	cmpcs	r2, r3
1000004e:	d0f7      	beq.n	10000040 <strcmp>
10000050:	1ad0      	subs	r0, r2, r3
10000052:	4770      	bx	lr

10000054 <strlen>:
10000054:	4603      	mov	r3, r0
10000056:	f813 2b01 	ldrb.w	r2, [r3], #1
1000005a:	2a00      	cmp	r2, #0
1000005c:	d1fb      	bne.n	10000056 <strlen+0x2>
1000005e:	1a18      	subs	r0, r3, r0
10000060:	3801      	subs	r0, #1
10000062:	4770      	bx	lr
	...

10000070 <memchr>:
10000070:	f001 01ff 	and.w	r1, r1, #255	; 0xff
10000074:	2a10      	cmp	r2, #16
10000076:	db2b      	blt.n	100000d0 <memchr+0x60>
10000078:	f010 0f07 	tst.w	r0, #7
1000007c:	d008      	beq.n	10000090 <memchr+0x20>
1000007e:	f810 3b01 	ldrb.w	r3, [r0], #1
10000082:	3a01      	subs	r2, #1
10000084:	428b      	cmp	r3, r1
10000086:	d02d      	beq.n	100000e4 <memchr+0x74>
10000088:	f010 0f07 	tst.w	r0, #7
1000008c:	b342      	cbz	r2, 100000e0 <memchr+0x70>
1000008e:	d1f6      	bne.n	1000007e <memchr+0xe>
10000090:	b4f0      	push	{r4, r5, r6, r7}
10000092:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
10000096:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1000009a:	f022 0407 	bic.w	r4, r2, #7
1000009e:	f07f 0700 	mvns.w	r7, #0
100000a2:	2300      	movs	r3, #0
100000a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
100000a8:	3c08      	subs	r4, #8
100000aa:	ea85 0501 	eor.w	r5, r5, r1
100000ae:	ea86 0601 	eor.w	r6, r6, r1
100000b2:	fa85 f547 	uadd8	r5, r5, r7
100000b6:	faa3 f587 	sel	r5, r3, r7
100000ba:	fa86 f647 	uadd8	r6, r6, r7
100000be:	faa5 f687 	sel	r6, r5, r7
100000c2:	b98e      	cbnz	r6, 100000e8 <memchr+0x78>
100000c4:	d1ee      	bne.n	100000a4 <memchr+0x34>
100000c6:	bcf0      	pop	{r4, r5, r6, r7}
100000c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
100000cc:	f002 0207 	and.w	r2, r2, #7
100000d0:	b132      	cbz	r2, 100000e0 <memchr+0x70>
100000d2:	f810 3b01 	ldrb.w	r3, [r0], #1
100000d6:	3a01      	subs	r2, #1
100000d8:	ea83 0301 	eor.w	r3, r3, r1
100000dc:	b113      	cbz	r3, 100000e4 <memchr+0x74>
100000de:	d1f8      	bne.n	100000d2 <memchr+0x62>
100000e0:	2000      	movs	r0, #0
100000e2:	4770      	bx	lr
100000e4:	3801      	subs	r0, #1
100000e6:	4770      	bx	lr
100000e8:	2d00      	cmp	r5, #0
100000ea:	bf06      	itte	eq
100000ec:	4635      	moveq	r5, r6
100000ee:	3803      	subeq	r0, #3
100000f0:	3807      	subne	r0, #7
100000f2:	f015 0f01 	tst.w	r5, #1
100000f6:	d107      	bne.n	10000108 <memchr+0x98>
100000f8:	3001      	adds	r0, #1
100000fa:	f415 7f80 	tst.w	r5, #256	; 0x100
100000fe:	bf02      	ittt	eq
10000100:	3001      	addeq	r0, #1
10000102:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
10000106:	3001      	addeq	r0, #1
10000108:	bcf0      	pop	{r4, r5, r6, r7}
1000010a:	3801      	subs	r0, #1
1000010c:	4770      	bx	lr
1000010e:	bf00      	nop

10000110 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10000110:	b480      	push	{r7}
10000112:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10000114:	4b0f      	ldr	r3, [pc, #60]	; (10000154 <SystemInit+0x44>)
10000116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
1000011a:	4a0e      	ldr	r2, [pc, #56]	; (10000154 <SystemInit+0x44>)
1000011c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
10000120:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10000124:	4b0c      	ldr	r3, [pc, #48]	; (10000158 <SystemInit+0x48>)
10000126:	2200      	movs	r2, #0
10000128:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
1000012a:	4b0b      	ldr	r3, [pc, #44]	; (10000158 <SystemInit+0x48>)
1000012c:	2200      	movs	r2, #0
1000012e:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10000130:	4b09      	ldr	r3, [pc, #36]	; (10000158 <SystemInit+0x48>)
10000132:	2200      	movs	r2, #0
10000134:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10000136:	4b08      	ldr	r3, [pc, #32]	; (10000158 <SystemInit+0x48>)
10000138:	2200      	movs	r2, #0
1000013a:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
1000013c:	4b06      	ldr	r3, [pc, #24]	; (10000158 <SystemInit+0x48>)
1000013e:	2200      	movs	r2, #0
10000140:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
10000142:	4b05      	ldr	r3, [pc, #20]	; (10000158 <SystemInit+0x48>)
10000144:	2200      	movs	r2, #0
10000146:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10000148:	bf00      	nop
1000014a:	46bd      	mov	sp, r7
1000014c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000150:	4770      	bx	lr
10000152:	bf00      	nop
10000154:	e000ed00 	.word	0xe000ed00
10000158:	5000d0c0 	.word	0x5000d0c0

1000015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
1000015c:	b580      	push	{r7, lr}
1000015e:	b09a      	sub	sp, #104	; 0x68
10000160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
//	uint16_t buf[1024]; //array to store dma levels
//	float buf_Value[1024]; //array to store voltage value
//	char arr[100]; //array for dma sprintf
	  uint32_t raw = 0;
10000162:	2300      	movs	r3, #0
10000164:	667b      	str	r3, [r7, #100]	; 0x64
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
10000166:	f000 fdcf 	bl	10000d08 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  if(IS_ENGINEERING_BOOT_MODE())
1000016a:	4b20      	ldr	r3, [pc, #128]	; (100001ec <main+0x90>)
1000016c:	681b      	ldr	r3, [r3, #0]
1000016e:	f003 0307 	and.w	r3, r3, #7
10000172:	2b04      	cmp	r3, #4
10000174:	d101      	bne.n	1000017a <main+0x1e>
  {
    /* Configure the system clock */
    SystemClock_Config();
10000176:	f000 f841 	bl	100001fc <SystemClock_Config>
  }

  if(IS_ENGINEERING_BOOT_MODE())
1000017a:	4b1c      	ldr	r3, [pc, #112]	; (100001ec <main+0x90>)
1000017c:	681b      	ldr	r3, [r3, #0]
1000017e:	f003 0307 	and.w	r3, r3, #7
10000182:	2b04      	cmp	r3, #4
10000184:	d102      	bne.n	1000018c <main+0x30>
  {
    /* Configure the peripherals common clocks */
    PeriphCommonClock_Config();
10000186:	f000 f9af 	bl	100004e8 <PeriphCommonClock_Config>
1000018a:	e005      	b.n	10000198 <main+0x3c>
  }
  else
  {
    /* IPCC initialisation */
    MX_IPCC_Init();
1000018c:	f000 fa58 	bl	10000640 <MX_IPCC_Init>
    /* OpenAmp initialisation ---------------------------------*/
    MX_OPENAMP_Init(RPMSG_REMOTE, NULL);
10000190:	2100      	movs	r1, #0
10000192:	2001      	movs	r0, #1
10000194:	f00c f8be 	bl	1000c314 <MX_OPENAMP_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
10000198:	f000 fac8 	bl	1000072c <MX_GPIO_Init>
  MX_DMA_Init();
1000019c:	f000 fab0 	bl	10000700 <MX_DMA_Init>
  MX_ADC2_Init();
100001a0:	f000 f9d0 	bl	10000544 <MX_ADC2_Init>
  MX_UART4_Init();
100001a4:	f000 fa60 	bl	10000668 <MX_UART4_Init>
//	    			  HAL_Delay(1);
//	    		  }
//	    	//////////////////////////////////////////////////////////////////////////////////////


	  HAL_ADC_Start(&hadc2);
100001a8:	4811      	ldr	r0, [pc, #68]	; (100001f0 <main+0x94>)
100001aa:	f001 fa01 	bl	100015b0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
100001ae:	f04f 31ff 	mov.w	r1, #4294967295
100001b2:	480f      	ldr	r0, [pc, #60]	; (100001f0 <main+0x94>)
100001b4:	f001 fab6 	bl	10001724 <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc2);
100001b8:	480d      	ldr	r0, [pc, #52]	; (100001f0 <main+0x94>)
100001ba:	f001 fb8b 	bl	100018d4 <HAL_ADC_GetValue>
100001be:	6678      	str	r0, [r7, #100]	; 0x64
	  HAL_Delay(1);
100001c0:	2001      	movs	r0, #1
100001c2:	f000 fe11 	bl	10000de8 <HAL_Delay>
	  sprintf(msg, "%d\r\n", raw);
100001c6:	463b      	mov	r3, r7
100001c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
100001ca:	490a      	ldr	r1, [pc, #40]	; (100001f4 <main+0x98>)
100001cc:	4618      	mov	r0, r3
100001ce:	f00c faf7 	bl	1000c7c0 <siprintf>
	  HAL_UART_Transmit(&huart4, msg, strlen(msg), HAL_MAX_DELAY);
100001d2:	463b      	mov	r3, r7
100001d4:	4618      	mov	r0, r3
100001d6:	f7ff ff3d 	bl	10000054 <strlen>
100001da:	4603      	mov	r3, r0
100001dc:	b29a      	uxth	r2, r3
100001de:	4639      	mov	r1, r7
100001e0:	f04f 33ff 	mov.w	r3, #4294967295
100001e4:	4804      	ldr	r0, [pc, #16]	; (100001f8 <main+0x9c>)
100001e6:	f008 fc35 	bl	10008a54 <HAL_UART_Transmit>
	  HAL_ADC_Start(&hadc2);
100001ea:	e7dd      	b.n	100001a8 <main+0x4c>
100001ec:	50020000 	.word	0x50020000
100001f0:	100201c8 	.word	0x100201c8
100001f4:	1000d824 	.word	0x1000d824
100001f8:	100202e0 	.word	0x100202e0

100001fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
100001fc:	b580      	push	{r7, lr}
100001fe:	b0d2      	sub	sp, #328	; 0x148
10000200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10000202:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000206:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000020a:	4618      	mov	r0, r3
1000020c:	f44f 738a 	mov.w	r3, #276	; 0x114
10000210:	461a      	mov	r2, r3
10000212:	2100      	movs	r1, #0
10000214:	f00c fb37 	bl	1000c886 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10000218:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000021c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000220:	4618      	mov	r0, r3
10000222:	2330      	movs	r3, #48	; 0x30
10000224:	461a      	mov	r2, r3
10000226:	2100      	movs	r1, #0
10000228:	f00c fb2d 	bl	1000c886 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
1000022c:	f003 f932 	bl	10003494 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
10000230:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000234:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10000238:	f023 0330 	bic.w	r3, r3, #48	; 0x30
1000023c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000240:	f043 0320 	orr.w	r3, r3, #32
10000244:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI
10000248:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000024c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000250:	2217      	movs	r2, #23
10000252:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIG;
10000254:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000258:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000025c:	f44f 62b0 	mov.w	r2, #1408	; 0x580
10000260:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
10000262:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000266:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000026a:	2201      	movs	r2, #1
1000026c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
1000026e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000272:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000276:	2201      	movs	r2, #1
10000278:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
1000027a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000027e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000282:	2200      	movs	r2, #0
10000284:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
10000286:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000028a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000028e:	2210      	movs	r2, #16
10000290:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
10000292:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000296:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000029a:	2200      	movs	r2, #0
1000029c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
1000029e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100002a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100002a6:	2202      	movs	r2, #2
100002a8:	661a      	str	r2, [r3, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLL12SOURCE_HSE;
100002aa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100002ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100002b2:	2201      	movs	r2, #1
100002b4:	665a      	str	r2, [r3, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLLM = 3;
100002b6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100002ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100002be:	2203      	movs	r2, #3
100002c0:	669a      	str	r2, [r3, #104]	; 0x68
  RCC_OscInitStruct.PLL2.PLLN = 66;
100002c2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100002c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100002ca:	2242      	movs	r2, #66	; 0x42
100002cc:	66da      	str	r2, [r3, #108]	; 0x6c
  RCC_OscInitStruct.PLL2.PLLP = 2;
100002ce:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100002d2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100002d6:	2202      	movs	r2, #2
100002d8:	671a      	str	r2, [r3, #112]	; 0x70
  RCC_OscInitStruct.PLL2.PLLQ = 1;
100002da:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100002de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100002e2:	2201      	movs	r2, #1
100002e4:	675a      	str	r2, [r3, #116]	; 0x74
  RCC_OscInitStruct.PLL2.PLLR = 1;
100002e6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100002ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100002ee:	2201      	movs	r2, #1
100002f0:	679a      	str	r2, [r3, #120]	; 0x78
  RCC_OscInitStruct.PLL2.PLLFRACV = 5120;
100002f2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100002f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100002fa:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
100002fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  RCC_OscInitStruct.PLL2.PLLMODE = RCC_PLL_FRACTIONAL;
10000302:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000306:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000030a:	2201      	movs	r2, #1
1000030c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
10000310:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000314:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000318:	2202      	movs	r2, #2
1000031a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLL3SOURCE_HSE;
1000031e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000322:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000326:	2201      	movs	r2, #1
10000328:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  RCC_OscInitStruct.PLL3.PLLM = 2;
1000032c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000330:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000334:	2202      	movs	r2, #2
10000336:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  RCC_OscInitStruct.PLL3.PLLN = 34;
1000033a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000033e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000342:	2222      	movs	r2, #34	; 0x22
10000344:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  RCC_OscInitStruct.PLL3.PLLP = 2;
10000348:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000034c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000350:	2202      	movs	r2, #2
10000352:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  RCC_OscInitStruct.PLL3.PLLQ = 17;
10000356:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000035a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000035e:	2211      	movs	r2, #17
10000360:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  RCC_OscInitStruct.PLL3.PLLR = 37;
10000364:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000368:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000036c:	2225      	movs	r2, #37	; 0x25
1000036e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  RCC_OscInitStruct.PLL3.PLLRGE = RCC_PLL3IFRANGE_1;
10000372:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000376:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000037a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
1000037e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  RCC_OscInitStruct.PLL3.PLLFRACV = 6660;
10000382:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000386:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000038a:	f641 2204 	movw	r2, #6660	; 0x1a04
1000038e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  RCC_OscInitStruct.PLL3.PLLMODE = RCC_PLL_FRACTIONAL;
10000392:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000396:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000039a:	2201      	movs	r2, #1
1000039c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
100003a0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100003a4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100003a8:	2202      	movs	r2, #2
100003aa:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLL4SOURCE_HSE;
100003ae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100003b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100003b6:	2201      	movs	r2, #1
100003b8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  RCC_OscInitStruct.PLL4.PLLM = 4;
100003bc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100003c0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100003c4:	2204      	movs	r2, #4
100003c6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  RCC_OscInitStruct.PLL4.PLLN = 99;
100003ca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100003ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100003d2:	2263      	movs	r2, #99	; 0x63
100003d4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  RCC_OscInitStruct.PLL4.PLLP = 6;
100003d8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100003dc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100003e0:	2206      	movs	r2, #6
100003e2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  RCC_OscInitStruct.PLL4.PLLQ = 8;
100003e6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100003ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100003ee:	2208      	movs	r2, #8
100003f0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  RCC_OscInitStruct.PLL4.PLLR = 8;
100003f4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100003f8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100003fc:	2208      	movs	r2, #8
100003fe:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  RCC_OscInitStruct.PLL4.PLLRGE = RCC_PLL4IFRANGE_0;
10000402:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000406:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000040a:	2200      	movs	r2, #0
1000040c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  RCC_OscInitStruct.PLL4.PLLFRACV = 0;
10000410:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000414:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000418:	2200      	movs	r2, #0
1000041a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  RCC_OscInitStruct.PLL4.PLLMODE = RCC_PLL_INTEGER;
1000041e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000422:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000426:	2200      	movs	r2, #0
10000428:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
1000042c:	f107 0334 	add.w	r3, r7, #52	; 0x34
10000430:	4618      	mov	r0, r3
10000432:	f003 f83f 	bl	100034b4 <HAL_RCC_OscConfig>
10000436:	4603      	mov	r3, r0
10000438:	2b00      	cmp	r3, #0
1000043a:	d001      	beq.n	10000440 <SystemClock_Config+0x244>
  {
    Error_Handler();
1000043c:	f000 f9ae 	bl	1000079c <Error_Handler>
  }

  /** RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
10000440:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000444:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000448:	22fe      	movs	r2, #254	; 0xfe
1000044a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                              |RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_PLL2;
1000044c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000450:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000454:	2202      	movs	r2, #2
10000456:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
10000458:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000045c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000460:	2200      	movs	r2, #0
10000462:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_PLL3;
10000464:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000468:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000046c:	2203      	movs	r2, #3
1000046e:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
10000470:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000474:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000478:	2200      	movs	r2, #0
1000047a:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV2;
1000047c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000480:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000484:	2201      	movs	r2, #1
10000486:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV4;
10000488:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000048c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000490:	2202      	movs	r2, #2
10000492:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV2;
10000494:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000498:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000049c:	2201      	movs	r2, #1
1000049e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV2;
100004a0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100004a4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100004a8:	2201      	movs	r2, #1
100004aa:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV2;
100004ac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100004b0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100004b4:	2201      	movs	r2, #1
100004b6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
100004b8:	1d3b      	adds	r3, r7, #4
100004ba:	4618      	mov	r0, r3
100004bc:	f003 fd98 	bl	10003ff0 <HAL_RCC_ClockConfig>
100004c0:	4603      	mov	r3, r0
100004c2:	2b00      	cmp	r3, #0
100004c4:	d001      	beq.n	100004ca <SystemClock_Config+0x2ce>
  {
    Error_Handler();
100004c6:	f000 f969 	bl	1000079c <Error_Handler>
  }

  /** Set the HSE division factor for RTC clock
  */
  __HAL_RCC_RTC_HSEDIV(24);
100004ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100004ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
100004d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
100004d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100004d8:	f043 0317 	orr.w	r3, r3, #23
100004dc:	6453      	str	r3, [r2, #68]	; 0x44
}
100004de:	bf00      	nop
100004e0:	f507 77a4 	add.w	r7, r7, #328	; 0x148
100004e4:	46bd      	mov	sp, r7
100004e6:	bd80      	pop	{r7, pc}

100004e8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
100004e8:	b580      	push	{r7, lr}
100004ea:	b0d6      	sub	sp, #344	; 0x158
100004ec:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
100004ee:	f507 73ac 	add.w	r3, r7, #344	; 0x158
100004f2:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
100004f6:	4618      	mov	r0, r3
100004f8:	f44f 73ac 	mov.w	r3, #344	; 0x158
100004fc:	461a      	mov	r2, r3
100004fe:	2100      	movs	r1, #0
10000500:	f00c f9c1 	bl	1000c886 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
10000504:	f507 73ac 	add.w	r3, r7, #344	; 0x158
10000508:	f5a3 71ac 	sub.w	r1, r3, #344	; 0x158
1000050c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
10000510:	f04f 0300 	mov.w	r3, #0
10000514:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInit.CkperClockSelection = RCC_CKPERCLKSOURCE_HSE;
10000518:	f507 73ac 	add.w	r3, r7, #344	; 0x158
1000051c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
10000520:	2202      	movs	r2, #2
10000522:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
10000526:	463b      	mov	r3, r7
10000528:	4618      	mov	r0, r3
1000052a:	f005 f8df 	bl	100056ec <HAL_RCCEx_PeriphCLKConfig>
1000052e:	4603      	mov	r3, r0
10000530:	2b00      	cmp	r3, #0
10000532:	d001      	beq.n	10000538 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
10000534:	f000 f932 	bl	1000079c <Error_Handler>
  }
}
10000538:	bf00      	nop
1000053a:	f507 77ac 	add.w	r7, r7, #344	; 0x158
1000053e:	46bd      	mov	sp, r7
10000540:	bd80      	pop	{r7, pc}
	...

10000544 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
10000544:	b580      	push	{r7, lr}
10000546:	b088      	sub	sp, #32
10000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
1000054a:	1d3b      	adds	r3, r7, #4
1000054c:	2200      	movs	r2, #0
1000054e:	601a      	str	r2, [r3, #0]
10000550:	605a      	str	r2, [r3, #4]
10000552:	609a      	str	r2, [r3, #8]
10000554:	60da      	str	r2, [r3, #12]
10000556:	611a      	str	r2, [r3, #16]
10000558:	615a      	str	r2, [r3, #20]
1000055a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
1000055c:	4b35      	ldr	r3, [pc, #212]	; (10000634 <MX_ADC2_Init+0xf0>)
1000055e:	4a36      	ldr	r2, [pc, #216]	; (10000638 <MX_ADC2_Init+0xf4>)
10000560:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
10000562:	4b34      	ldr	r3, [pc, #208]	; (10000634 <MX_ADC2_Init+0xf0>)
10000564:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
10000568:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
1000056a:	4b32      	ldr	r3, [pc, #200]	; (10000634 <MX_ADC2_Init+0xf0>)
1000056c:	2200      	movs	r2, #0
1000056e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
10000570:	4b30      	ldr	r3, [pc, #192]	; (10000634 <MX_ADC2_Init+0xf0>)
10000572:	2200      	movs	r2, #0
10000574:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
10000576:	4b2f      	ldr	r3, [pc, #188]	; (10000634 <MX_ADC2_Init+0xf0>)
10000578:	2204      	movs	r2, #4
1000057a:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
1000057c:	4b2d      	ldr	r3, [pc, #180]	; (10000634 <MX_ADC2_Init+0xf0>)
1000057e:	2200      	movs	r2, #0
10000580:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
10000582:	4b2c      	ldr	r3, [pc, #176]	; (10000634 <MX_ADC2_Init+0xf0>)
10000584:	2200      	movs	r2, #0
10000586:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
10000588:	4b2a      	ldr	r3, [pc, #168]	; (10000634 <MX_ADC2_Init+0xf0>)
1000058a:	2201      	movs	r2, #1
1000058c:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
1000058e:	4b29      	ldr	r3, [pc, #164]	; (10000634 <MX_ADC2_Init+0xf0>)
10000590:	2200      	movs	r2, #0
10000592:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
10000594:	4b27      	ldr	r3, [pc, #156]	; (10000634 <MX_ADC2_Init+0xf0>)
10000596:	2200      	movs	r2, #0
10000598:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
1000059a:	4b26      	ldr	r3, [pc, #152]	; (10000634 <MX_ADC2_Init+0xf0>)
1000059c:	2200      	movs	r2, #0
1000059e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
100005a0:	4b24      	ldr	r3, [pc, #144]	; (10000634 <MX_ADC2_Init+0xf0>)
100005a2:	2200      	movs	r2, #0
100005a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
100005a6:	4b23      	ldr	r3, [pc, #140]	; (10000634 <MX_ADC2_Init+0xf0>)
100005a8:	2200      	movs	r2, #0
100005aa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
100005ac:	4b21      	ldr	r3, [pc, #132]	; (10000634 <MX_ADC2_Init+0xf0>)
100005ae:	2200      	movs	r2, #0
100005b0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
100005b2:	4b20      	ldr	r3, [pc, #128]	; (10000634 <MX_ADC2_Init+0xf0>)
100005b4:	2200      	movs	r2, #0
100005b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
100005ba:	481e      	ldr	r0, [pc, #120]	; (10000634 <MX_ADC2_Init+0xf0>)
100005bc:	f000 fe9e 	bl	100012fc <HAL_ADC_Init>
100005c0:	4603      	mov	r3, r0
100005c2:	2b00      	cmp	r3, #0
100005c4:	d001      	beq.n	100005ca <MX_ADC2_Init+0x86>
  {
    Error_Handler();
100005c6:	f000 f8e9 	bl	1000079c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
100005ca:	4b1c      	ldr	r3, [pc, #112]	; (1000063c <MX_ADC2_Init+0xf8>)
100005cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
100005ce:	2306      	movs	r3, #6
100005d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
100005d2:	2300      	movs	r3, #0
100005d4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
100005d6:	f240 73ff 	movw	r3, #2047	; 0x7ff
100005da:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
100005dc:	2304      	movs	r3, #4
100005de:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
100005e0:	2300      	movs	r3, #0
100005e2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
100005e4:	1d3b      	adds	r3, r7, #4
100005e6:	4619      	mov	r1, r3
100005e8:	4812      	ldr	r0, [pc, #72]	; (10000634 <MX_ADC2_Init+0xf0>)
100005ea:	f001 f981 	bl	100018f0 <HAL_ADC_ConfigChannel>
100005ee:	4603      	mov	r3, r0
100005f0:	2b00      	cmp	r3, #0
100005f2:	d001      	beq.n	100005f8 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
100005f4:	f000 f8d2 	bl	1000079c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  __HAL_RCC_VREF_CLK_ENABLE(); // Enable the VREF clock
100005f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100005fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
10000600:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
    HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE); // Disable the high impedance mode which is the default one read page 1694 of refman
10000604:	2000      	movs	r0, #0
10000606:	f000 fc27 	bl	10000e58 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
    HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1); // To set the volage to 2.5v
1000060a:	2000      	movs	r0, #0
1000060c:	f000 fc10 	bl	10000e30 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
    HAL_SYSCFG_EnableVREFBUF(); // To enable VREFBUF
10000610:	f000 fc36 	bl	10000e80 <HAL_SYSCFG_EnableVREFBUF>

    if(HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
10000614:	f240 72ff 	movw	r2, #2047	; 0x7ff
10000618:	f04f 1101 	mov.w	r1, #65537	; 0x10001
1000061c:	4805      	ldr	r0, [pc, #20]	; (10000634 <MX_ADC2_Init+0xf0>)
1000061e:	f001 fe2b 	bl	10002278 <HAL_ADCEx_Calibration_Start>
10000622:	4603      	mov	r3, r0
10000624:	2b00      	cmp	r3, #0
10000626:	d001      	beq.n	1000062c <MX_ADC2_Init+0xe8>
    {
      /* Calibration Error */
      Error_Handler();
10000628:	f000 f8b8 	bl	1000079c <Error_Handler>
    }
  /* USER CODE END ADC2_Init 2 */

}
1000062c:	bf00      	nop
1000062e:	3720      	adds	r7, #32
10000630:	46bd      	mov	sp, r7
10000632:	bd80      	pop	{r7, pc}
10000634:	100201c8 	.word	0x100201c8
10000638:	48003100 	.word	0x48003100
1000063c:	19200040 	.word	0x19200040

10000640 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
10000640:	b580      	push	{r7, lr}
10000642:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
10000644:	4b06      	ldr	r3, [pc, #24]	; (10000660 <MX_IPCC_Init+0x20>)
10000646:	4a07      	ldr	r2, [pc, #28]	; (10000664 <MX_IPCC_Init+0x24>)
10000648:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
1000064a:	4805      	ldr	r0, [pc, #20]	; (10000660 <MX_IPCC_Init+0x20>)
1000064c:	f002 fd0c 	bl	10003068 <HAL_IPCC_Init>
10000650:	4603      	mov	r3, r0
10000652:	2b00      	cmp	r3, #0
10000654:	d001      	beq.n	1000065a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
10000656:	f000 f8a1 	bl	1000079c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
1000065a:	bf00      	nop
1000065c:	bd80      	pop	{r7, pc}
1000065e:	bf00      	nop
10000660:	100202a4 	.word	0x100202a4
10000664:	4c001000 	.word	0x4c001000

10000668 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
10000668:	b580      	push	{r7, lr}
1000066a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
1000066c:	4b22      	ldr	r3, [pc, #136]	; (100006f8 <MX_UART4_Init+0x90>)
1000066e:	4a23      	ldr	r2, [pc, #140]	; (100006fc <MX_UART4_Init+0x94>)
10000670:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
10000672:	4b21      	ldr	r3, [pc, #132]	; (100006f8 <MX_UART4_Init+0x90>)
10000674:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
10000678:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
1000067a:	4b1f      	ldr	r3, [pc, #124]	; (100006f8 <MX_UART4_Init+0x90>)
1000067c:	2200      	movs	r2, #0
1000067e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
10000680:	4b1d      	ldr	r3, [pc, #116]	; (100006f8 <MX_UART4_Init+0x90>)
10000682:	2200      	movs	r2, #0
10000684:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
10000686:	4b1c      	ldr	r3, [pc, #112]	; (100006f8 <MX_UART4_Init+0x90>)
10000688:	2200      	movs	r2, #0
1000068a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
1000068c:	4b1a      	ldr	r3, [pc, #104]	; (100006f8 <MX_UART4_Init+0x90>)
1000068e:	220c      	movs	r2, #12
10000690:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
10000692:	4b19      	ldr	r3, [pc, #100]	; (100006f8 <MX_UART4_Init+0x90>)
10000694:	2200      	movs	r2, #0
10000696:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
10000698:	4b17      	ldr	r3, [pc, #92]	; (100006f8 <MX_UART4_Init+0x90>)
1000069a:	2200      	movs	r2, #0
1000069c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
1000069e:	4b16      	ldr	r3, [pc, #88]	; (100006f8 <MX_UART4_Init+0x90>)
100006a0:	2200      	movs	r2, #0
100006a2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
100006a4:	4b14      	ldr	r3, [pc, #80]	; (100006f8 <MX_UART4_Init+0x90>)
100006a6:	2200      	movs	r2, #0
100006a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
100006aa:	4b13      	ldr	r3, [pc, #76]	; (100006f8 <MX_UART4_Init+0x90>)
100006ac:	2200      	movs	r2, #0
100006ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
100006b0:	4811      	ldr	r0, [pc, #68]	; (100006f8 <MX_UART4_Init+0x90>)
100006b2:	f008 f97f 	bl	100089b4 <HAL_UART_Init>
100006b6:	4603      	mov	r3, r0
100006b8:	2b00      	cmp	r3, #0
100006ba:	d001      	beq.n	100006c0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
100006bc:	f000 f86e 	bl	1000079c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
100006c0:	2100      	movs	r1, #0
100006c2:	480d      	ldr	r0, [pc, #52]	; (100006f8 <MX_UART4_Init+0x90>)
100006c4:	f009 fca7 	bl	1000a016 <HAL_UARTEx_SetTxFifoThreshold>
100006c8:	4603      	mov	r3, r0
100006ca:	2b00      	cmp	r3, #0
100006cc:	d001      	beq.n	100006d2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
100006ce:	f000 f865 	bl	1000079c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
100006d2:	2100      	movs	r1, #0
100006d4:	4808      	ldr	r0, [pc, #32]	; (100006f8 <MX_UART4_Init+0x90>)
100006d6:	f009 fcdc 	bl	1000a092 <HAL_UARTEx_SetRxFifoThreshold>
100006da:	4603      	mov	r3, r0
100006dc:	2b00      	cmp	r3, #0
100006de:	d001      	beq.n	100006e4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
100006e0:	f000 f85c 	bl	1000079c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
100006e4:	4804      	ldr	r0, [pc, #16]	; (100006f8 <MX_UART4_Init+0x90>)
100006e6:	f009 fc5d 	bl	10009fa4 <HAL_UARTEx_DisableFifoMode>
100006ea:	4603      	mov	r3, r0
100006ec:	2b00      	cmp	r3, #0
100006ee:	d001      	beq.n	100006f4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
100006f0:	f000 f854 	bl	1000079c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
100006f4:	bf00      	nop
100006f6:	bd80      	pop	{r7, pc}
100006f8:	100202e0 	.word	0x100202e0
100006fc:	40010000 	.word	0x40010000

10000700 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
10000700:	b580      	push	{r7, lr}
10000702:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX_CLK_ENABLE();
10000704:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000708:	2204      	movs	r2, #4
1000070a:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
  __HAL_RCC_DMA2_CLK_ENABLE();
1000070e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000712:	2202      	movs	r2, #2
10000714:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
10000718:	2200      	movs	r2, #0
1000071a:	2101      	movs	r1, #1
1000071c:	2038      	movs	r0, #56	; 0x38
1000071e:	f001 feea 	bl	100024f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
10000722:	2038      	movs	r0, #56	; 0x38
10000724:	f001 ff03 	bl	1000252e <HAL_NVIC_EnableIRQ>

}
10000728:	bf00      	nop
1000072a:	bd80      	pop	{r7, pc}

1000072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
1000072c:	b580      	push	{r7, lr}
1000072e:	b086      	sub	sp, #24
10000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10000732:	1d3b      	adds	r3, r7, #4
10000734:	2200      	movs	r2, #0
10000736:	601a      	str	r2, [r3, #0]
10000738:	605a      	str	r2, [r3, #4]
1000073a:	609a      	str	r2, [r3, #8]
1000073c:	60da      	str	r2, [r3, #12]
1000073e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
10000740:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000744:	2204      	movs	r2, #4
10000746:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOH_CLK_ENABLE();
1000074a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000074e:	2280      	movs	r2, #128	; 0x80
10000750:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOA_CLK_ENABLE();
10000754:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000758:	2201      	movs	r2, #1
1000075a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOG_CLK_ENABLE();
1000075e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000762:	2240      	movs	r2, #64	; 0x40
10000764:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOB_CLK_ENABLE();
10000768:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000076c:	2202      	movs	r2, #2
1000076e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOF_CLK_ENABLE();
10000772:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000776:	2220      	movs	r2, #32
10000778:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

  /*Configure GPIO pins : PA5 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
1000077c:	2330      	movs	r3, #48	; 0x30
1000077e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
10000780:	2303      	movs	r3, #3
10000782:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10000784:	1d3b      	adds	r3, r7, #4
10000786:	4619      	mov	r1, r3
10000788:	4803      	ldr	r0, [pc, #12]	; (10000798 <MX_GPIO_Init+0x6c>)
1000078a:	f002 fac3 	bl	10002d14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
1000078e:	bf00      	nop
10000790:	3718      	adds	r7, #24
10000792:	46bd      	mov	sp, r7
10000794:	bd80      	pop	{r7, pc}
10000796:	bf00      	nop
10000798:	50002000 	.word	0x50002000

1000079c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
1000079c:	b480      	push	{r7}
1000079e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
100007a0:	b672      	cpsid	i
}
100007a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
100007a4:	e7fe      	b.n	100007a4 <Error_Handler+0x8>

100007a6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
100007a6:	b580      	push	{r7, lr}
100007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
100007aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100007ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
100007b2:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
100007b6:	2200      	movs	r2, #0
100007b8:	2101      	movs	r1, #1
100007ba:	f06f 000b 	mvn.w	r0, #11
100007be:	f001 fe9a 	bl	100024f6 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
100007c2:	2200      	movs	r2, #0
100007c4:	2101      	movs	r1, #1
100007c6:	f06f 000a 	mvn.w	r0, #10
100007ca:	f001 fe94 	bl	100024f6 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
100007ce:	2200      	movs	r2, #0
100007d0:	2101      	movs	r1, #1
100007d2:	f06f 0009 	mvn.w	r0, #9
100007d6:	f001 fe8e 	bl	100024f6 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
100007da:	2200      	movs	r2, #0
100007dc:	2101      	movs	r1, #1
100007de:	f06f 0004 	mvn.w	r0, #4
100007e2:	f001 fe88 	bl	100024f6 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
100007e6:	2200      	movs	r2, #0
100007e8:	2101      	movs	r1, #1
100007ea:	f06f 0003 	mvn.w	r0, #3
100007ee:	f001 fe82 	bl	100024f6 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
100007f2:	2200      	movs	r2, #0
100007f4:	2101      	movs	r1, #1
100007f6:	f06f 0001 	mvn.w	r0, #1
100007fa:	f001 fe7c 	bl	100024f6 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_WAKEUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_WAKEUP_IRQn, 0, 0);
100007fe:	2200      	movs	r2, #0
10000800:	2100      	movs	r1, #0
10000802:	2091      	movs	r0, #145	; 0x91
10000804:	f001 fe77 	bl	100024f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_WAKEUP_IRQn);
10000808:	2091      	movs	r0, #145	; 0x91
1000080a:	f001 fe90 	bl	1000252e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
1000080e:	bf00      	nop
10000810:	bd80      	pop	{r7, pc}
	...

10000814 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
10000814:	b580      	push	{r7, lr}
10000816:	b0de      	sub	sp, #376	; 0x178
10000818:	af00      	add	r7, sp, #0
1000081a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
1000081e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
10000822:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10000824:	f507 73b2 	add.w	r3, r7, #356	; 0x164
10000828:	2200      	movs	r2, #0
1000082a:	601a      	str	r2, [r3, #0]
1000082c:	605a      	str	r2, [r3, #4]
1000082e:	609a      	str	r2, [r3, #8]
10000830:	60da      	str	r2, [r3, #12]
10000832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
10000834:	f507 73bc 	add.w	r3, r7, #376	; 0x178
10000838:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
1000083c:	4618      	mov	r0, r3
1000083e:	f44f 73ac 	mov.w	r3, #344	; 0x158
10000842:	461a      	mov	r2, r3
10000844:	2100      	movs	r1, #0
10000846:	f00c f81e 	bl	1000c886 <memset>
  if(hadc->Instance==ADC2)
1000084a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
1000084e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
10000852:	681b      	ldr	r3, [r3, #0]
10000854:	681b      	ldr	r3, [r3, #0]
10000856:	4a46      	ldr	r2, [pc, #280]	; (10000970 <HAL_ADC_MspInit+0x15c>)
10000858:	4293      	cmp	r3, r2
1000085a:	f040 8084 	bne.w	10000966 <HAL_ADC_MspInit+0x152>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
  if(IS_ENGINEERING_BOOT_MODE())
1000085e:	4b45      	ldr	r3, [pc, #276]	; (10000974 <HAL_ADC_MspInit+0x160>)
10000860:	681b      	ldr	r3, [r3, #0]
10000862:	f003 0307 	and.w	r3, r3, #7
10000866:	2b04      	cmp	r3, #4
10000868:	d11a      	bne.n	100008a0 <HAL_ADC_MspInit+0x8c>
  {

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
1000086a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
1000086e:	f5a3 71b8 	sub.w	r1, r3, #368	; 0x170
10000872:	f04f 0208 	mov.w	r2, #8
10000876:	f04f 0300 	mov.w	r3, #0
1000087a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PER;
1000087e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
10000882:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
10000886:	2201      	movs	r2, #1
10000888:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
1000088c:	f107 0308 	add.w	r3, r7, #8
10000890:	4618      	mov	r0, r3
10000892:	f004 ff2b 	bl	100056ec <HAL_RCCEx_PeriphCLKConfig>
10000896:	4603      	mov	r3, r0
10000898:	2b00      	cmp	r3, #0
1000089a:	d001      	beq.n	100008a0 <HAL_ADC_MspInit+0x8c>
    {
      Error_Handler();
1000089c:	f7ff ff7e 	bl	1000079c <Error_Handler>
    }

  }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
100008a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100008a4:	2220      	movs	r2, #32
100008a6:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98

    __HAL_RCC_GPIOA_CLK_ENABLE();
100008aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100008ae:	2201      	movs	r2, #1
100008b0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    __HAL_RCC_GPIOF_CLK_ENABLE();
100008b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100008b8:	2220      	movs	r2, #32
100008ba:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_INP19
    PA4     ------> ADC2_INP18
    PF14     ------> ADC2_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
100008be:	2330      	movs	r3, #48	; 0x30
100008c0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
100008c4:	2303      	movs	r3, #3
100008c6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
100008ca:	f507 73b2 	add.w	r3, r7, #356	; 0x164
100008ce:	4619      	mov	r1, r3
100008d0:	4829      	ldr	r0, [pc, #164]	; (10000978 <HAL_ADC_MspInit+0x164>)
100008d2:	f002 fa1f 	bl	10002d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
100008d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
100008da:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
100008de:	2303      	movs	r3, #3
100008e0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100008e4:	2300      	movs	r3, #0
100008e6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
100008ea:	f507 73b2 	add.w	r3, r7, #356	; 0x164
100008ee:	4619      	mov	r1, r3
100008f0:	4822      	ldr	r0, [pc, #136]	; (1000097c <HAL_ADC_MspInit+0x168>)
100008f2:	f002 fa0f 	bl	10002d14 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream0;
100008f6:	4b22      	ldr	r3, [pc, #136]	; (10000980 <HAL_ADC_MspInit+0x16c>)
100008f8:	4a22      	ldr	r2, [pc, #136]	; (10000984 <HAL_ADC_MspInit+0x170>)
100008fa:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
100008fc:	4b20      	ldr	r3, [pc, #128]	; (10000980 <HAL_ADC_MspInit+0x16c>)
100008fe:	220a      	movs	r2, #10
10000900:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
10000902:	4b1f      	ldr	r3, [pc, #124]	; (10000980 <HAL_ADC_MspInit+0x16c>)
10000904:	2200      	movs	r2, #0
10000906:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
10000908:	4b1d      	ldr	r3, [pc, #116]	; (10000980 <HAL_ADC_MspInit+0x16c>)
1000090a:	2200      	movs	r2, #0
1000090c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
1000090e:	4b1c      	ldr	r3, [pc, #112]	; (10000980 <HAL_ADC_MspInit+0x16c>)
10000910:	f44f 6280 	mov.w	r2, #1024	; 0x400
10000914:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
10000916:	4b1a      	ldr	r3, [pc, #104]	; (10000980 <HAL_ADC_MspInit+0x16c>)
10000918:	f44f 6200 	mov.w	r2, #2048	; 0x800
1000091c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
1000091e:	4b18      	ldr	r3, [pc, #96]	; (10000980 <HAL_ADC_MspInit+0x16c>)
10000920:	f44f 5200 	mov.w	r2, #8192	; 0x2000
10000924:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
10000926:	4b16      	ldr	r3, [pc, #88]	; (10000980 <HAL_ADC_MspInit+0x16c>)
10000928:	f44f 7280 	mov.w	r2, #256	; 0x100
1000092c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
1000092e:	4b14      	ldr	r3, [pc, #80]	; (10000980 <HAL_ADC_MspInit+0x16c>)
10000930:	2200      	movs	r2, #0
10000932:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
10000934:	4b12      	ldr	r3, [pc, #72]	; (10000980 <HAL_ADC_MspInit+0x16c>)
10000936:	2200      	movs	r2, #0
10000938:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
1000093a:	4811      	ldr	r0, [pc, #68]	; (10000980 <HAL_ADC_MspInit+0x16c>)
1000093c:	f001 fe12 	bl	10002564 <HAL_DMA_Init>
10000940:	4603      	mov	r3, r0
10000942:	2b00      	cmp	r3, #0
10000944:	d001      	beq.n	1000094a <HAL_ADC_MspInit+0x136>
    {
      Error_Handler();
10000946:	f7ff ff29 	bl	1000079c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
1000094a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
1000094e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
10000952:	681b      	ldr	r3, [r3, #0]
10000954:	4a0a      	ldr	r2, [pc, #40]	; (10000980 <HAL_ADC_MspInit+0x16c>)
10000956:	64da      	str	r2, [r3, #76]	; 0x4c
10000958:	4a09      	ldr	r2, [pc, #36]	; (10000980 <HAL_ADC_MspInit+0x16c>)
1000095a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
1000095e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
10000962:	681b      	ldr	r3, [r3, #0]
10000964:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
10000966:	bf00      	nop
10000968:	f507 77bc 	add.w	r7, r7, #376	; 0x178
1000096c:	46bd      	mov	sp, r7
1000096e:	bd80      	pop	{r7, pc}
10000970:	48003100 	.word	0x48003100
10000974:	50020000 	.word	0x50020000
10000978:	50002000 	.word	0x50002000
1000097c:	50007000 	.word	0x50007000
10000980:	1002022c 	.word	0x1002022c
10000984:	48001010 	.word	0x48001010

10000988 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
10000988:	b580      	push	{r7, lr}
1000098a:	b082      	sub	sp, #8
1000098c:	af00      	add	r7, sp, #0
1000098e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
10000990:	687b      	ldr	r3, [r7, #4]
10000992:	681b      	ldr	r3, [r3, #0]
10000994:	4a0e      	ldr	r2, [pc, #56]	; (100009d0 <HAL_IPCC_MspInit+0x48>)
10000996:	4293      	cmp	r3, r2
10000998:	d115      	bne.n	100009c6 <HAL_IPCC_MspInit+0x3e>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
1000099a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000099e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
100009a2:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_RX1_IRQn, 1, 0);
100009a6:	2200      	movs	r2, #0
100009a8:	2101      	movs	r1, #1
100009aa:	2067      	movs	r0, #103	; 0x67
100009ac:	f001 fda3 	bl	100024f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_RX1_IRQn);
100009b0:	2067      	movs	r0, #103	; 0x67
100009b2:	f001 fdbc 	bl	1000252e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_TX1_IRQn, 1, 0);
100009b6:	2200      	movs	r2, #0
100009b8:	2101      	movs	r1, #1
100009ba:	2068      	movs	r0, #104	; 0x68
100009bc:	f001 fd9b 	bl	100024f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_TX1_IRQn);
100009c0:	2068      	movs	r0, #104	; 0x68
100009c2:	f001 fdb4 	bl	1000252e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
100009c6:	bf00      	nop
100009c8:	3708      	adds	r7, #8
100009ca:	46bd      	mov	sp, r7
100009cc:	bd80      	pop	{r7, pc}
100009ce:	bf00      	nop
100009d0:	4c001000 	.word	0x4c001000

100009d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
100009d4:	b580      	push	{r7, lr}
100009d6:	b0de      	sub	sp, #376	; 0x178
100009d8:	af00      	add	r7, sp, #0
100009da:	f507 73bc 	add.w	r3, r7, #376	; 0x178
100009de:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
100009e2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
100009e4:	f507 73b2 	add.w	r3, r7, #356	; 0x164
100009e8:	2200      	movs	r2, #0
100009ea:	601a      	str	r2, [r3, #0]
100009ec:	605a      	str	r2, [r3, #4]
100009ee:	609a      	str	r2, [r3, #8]
100009f0:	60da      	str	r2, [r3, #12]
100009f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
100009f4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
100009f8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
100009fc:	4618      	mov	r0, r3
100009fe:	f44f 73ac 	mov.w	r3, #344	; 0x158
10000a02:	461a      	mov	r2, r3
10000a04:	2100      	movs	r1, #0
10000a06:	f00b ff3e 	bl	1000c886 <memset>
  if(huart->Instance==UART4)
10000a0a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
10000a0e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
10000a12:	681b      	ldr	r3, [r3, #0]
10000a14:	681b      	ldr	r3, [r3, #0]
10000a16:	4a2d      	ldr	r2, [pc, #180]	; (10000acc <HAL_UART_MspInit+0xf8>)
10000a18:	4293      	cmp	r3, r2
10000a1a:	d151      	bne.n	10000ac0 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  if(IS_ENGINEERING_BOOT_MODE())
10000a1c:	4b2c      	ldr	r3, [pc, #176]	; (10000ad0 <HAL_UART_MspInit+0xfc>)
10000a1e:	681b      	ldr	r3, [r3, #0]
10000a20:	f003 0307 	and.w	r3, r3, #7
10000a24:	2b04      	cmp	r3, #4
10000a26:	d113      	bne.n	10000a50 <HAL_UART_MspInit+0x7c>
  {

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART24;
10000a28:	f507 73bc 	add.w	r3, r7, #376	; 0x178
10000a2c:	f5a3 71b8 	sub.w	r1, r3, #368	; 0x170
10000a30:	f04f 0202 	mov.w	r2, #2
10000a34:	f04f 0300 	mov.w	r3, #0
10000a38:	e9c1 2300 	strd	r2, r3, [r1]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
10000a3c:	f107 0308 	add.w	r3, r7, #8
10000a40:	4618      	mov	r0, r3
10000a42:	f004 fe53 	bl	100056ec <HAL_RCCEx_PeriphCLKConfig>
10000a46:	4603      	mov	r3, r0
10000a48:	2b00      	cmp	r3, #0
10000a4a:	d001      	beq.n	10000a50 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
10000a4c:	f7ff fea6 	bl	1000079c <Error_Handler>
    }

  }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
10000a50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000a54:	f44f 3280 	mov.w	r2, #65536	; 0x10000
10000a58:	f8c3 2a80 	str.w	r2, [r3, #2688]	; 0xa80

    __HAL_RCC_GPIOG_CLK_ENABLE();
10000a5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000a60:	2240      	movs	r2, #64	; 0x40
10000a62:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    __HAL_RCC_GPIOB_CLK_ENABLE();
10000a66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000a6a:	2202      	movs	r2, #2
10000a6c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    /**UART4 GPIO Configuration
    PG11     ------> UART4_TX
    PB2     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin;
10000a70:	f44f 6300 	mov.w	r3, #2048	; 0x800
10000a74:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10000a78:	2302      	movs	r3, #2
10000a7a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10000a7e:	2300      	movs	r3, #0
10000a80:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10000a84:	2300      	movs	r3, #0
10000a86:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
10000a8a:	2306      	movs	r3, #6
10000a8c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
10000a90:	f507 73b2 	add.w	r3, r7, #356	; 0x164
10000a94:	4619      	mov	r1, r3
10000a96:	480f      	ldr	r0, [pc, #60]	; (10000ad4 <HAL_UART_MspInit+0x100>)
10000a98:	f002 f93c 	bl	10002d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLINK_TX_Pin;
10000a9c:	2304      	movs	r3, #4
10000a9e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF;
10000aa2:	2302      	movs	r3, #2
10000aa4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10000aa8:	2300      	movs	r3, #0
10000aaa:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
10000aae:	2308      	movs	r3, #8
10000ab0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    HAL_GPIO_Init(STLINK_TX_GPIO_Port, &GPIO_InitStruct);
10000ab4:	f507 73b2 	add.w	r3, r7, #356	; 0x164
10000ab8:	4619      	mov	r1, r3
10000aba:	4807      	ldr	r0, [pc, #28]	; (10000ad8 <HAL_UART_MspInit+0x104>)
10000abc:	f002 f92a 	bl	10002d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
10000ac0:	bf00      	nop
10000ac2:	f507 77bc 	add.w	r7, r7, #376	; 0x178
10000ac6:	46bd      	mov	sp, r7
10000ac8:	bd80      	pop	{r7, pc}
10000aca:	bf00      	nop
10000acc:	40010000 	.word	0x40010000
10000ad0:	50020000 	.word	0x50020000
10000ad4:	50008000 	.word	0x50008000
10000ad8:	50003000 	.word	0x50003000

10000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10000adc:	b480      	push	{r7}
10000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
10000ae0:	e7fe      	b.n	10000ae0 <NMI_Handler+0x4>

10000ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10000ae2:	b480      	push	{r7}
10000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
10000ae6:	e7fe      	b.n	10000ae6 <HardFault_Handler+0x4>

10000ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
10000ae8:	b480      	push	{r7}
10000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
10000aec:	e7fe      	b.n	10000aec <MemManage_Handler+0x4>

10000aee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
10000aee:	b480      	push	{r7}
10000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
10000af2:	e7fe      	b.n	10000af2 <BusFault_Handler+0x4>

10000af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
10000af4:	b480      	push	{r7}
10000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
10000af8:	e7fe      	b.n	10000af8 <UsageFault_Handler+0x4>

10000afa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10000afa:	b480      	push	{r7}
10000afc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
10000afe:	bf00      	nop
10000b00:	46bd      	mov	sp, r7
10000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
10000b06:	4770      	bx	lr

10000b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
10000b08:	b480      	push	{r7}
10000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
10000b0c:	bf00      	nop
10000b0e:	46bd      	mov	sp, r7
10000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
10000b14:	4770      	bx	lr

10000b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
10000b16:	b480      	push	{r7}
10000b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10000b1a:	bf00      	nop
10000b1c:	46bd      	mov	sp, r7
10000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
10000b22:	4770      	bx	lr

10000b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
10000b24:	b580      	push	{r7, lr}
10000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10000b28:	f000 f93e 	bl	10000da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10000b2c:	bf00      	nop
10000b2e:	bd80      	pop	{r7, pc}

10000b30 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
10000b30:	b580      	push	{r7, lr}
10000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
10000b34:	4802      	ldr	r0, [pc, #8]	; (10000b40 <DMA2_Stream0_IRQHandler+0x10>)
10000b36:	f001 fe13 	bl	10002760 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
10000b3a:	bf00      	nop
10000b3c:	bd80      	pop	{r7, pc}
10000b3e:	bf00      	nop
10000b40:	1002022c 	.word	0x1002022c

10000b44 <IPCC_RX1_IRQHandler>:

/**
  * @brief This function handles IPCC RX1 occupied interrupt.
  */
void IPCC_RX1_IRQHandler(void)
{
10000b44:	b580      	push	{r7, lr}
10000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_RX1_IRQn 0 */

  /* USER CODE END IPCC_RX1_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
10000b48:	4802      	ldr	r0, [pc, #8]	; (10000b54 <IPCC_RX1_IRQHandler+0x10>)
10000b4a:	f002 fbd5 	bl	100032f8 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_RX1_IRQn 1 */

  /* USER CODE END IPCC_RX1_IRQn 1 */
}
10000b4e:	bf00      	nop
10000b50:	bd80      	pop	{r7, pc}
10000b52:	bf00      	nop
10000b54:	100202a4 	.word	0x100202a4

10000b58 <IPCC_TX1_IRQHandler>:

/**
  * @brief This function handles IPCC TX1 free interrupt.
  */
void IPCC_TX1_IRQHandler(void)
{
10000b58:	b580      	push	{r7, lr}
10000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_TX1_IRQn 0 */

  /* USER CODE END IPCC_TX1_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
10000b5c:	4802      	ldr	r0, [pc, #8]	; (10000b68 <IPCC_TX1_IRQHandler+0x10>)
10000b5e:	f002 fb7d 	bl	1000325c <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_TX1_IRQn 1 */

  /* USER CODE END IPCC_TX1_IRQn 1 */
}
10000b62:	bf00      	nop
10000b64:	bd80      	pop	{r7, pc}
10000b66:	bf00      	nop
10000b68:	100202a4 	.word	0x100202a4

10000b6c <RCC_WAKEUP_IRQHandler>:

/**
  * @brief This function handles RCC wake-up interrupt.
  */
void RCC_WAKEUP_IRQHandler(void)
{
10000b6c:	b580      	push	{r7, lr}
10000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 0 */

  /* USER CODE END RCC_WAKEUP_IRQn 0 */
  HAL_RCC_WAKEUP_IRQHandler();
10000b70:	f004 f95c 	bl	10004e2c <HAL_RCC_WAKEUP_IRQHandler>
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 1 */

  /* USER CODE END RCC_WAKEUP_IRQn 1 */
}
10000b74:	bf00      	nop
10000b76:	bd80      	pop	{r7, pc}

10000b78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
10000b78:	b480      	push	{r7}
10000b7a:	af00      	add	r7, sp, #0
  return 1;
10000b7c:	2301      	movs	r3, #1
}
10000b7e:	4618      	mov	r0, r3
10000b80:	46bd      	mov	sp, r7
10000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
10000b86:	4770      	bx	lr

10000b88 <_kill>:

int _kill(int pid, int sig)
{
10000b88:	b580      	push	{r7, lr}
10000b8a:	b082      	sub	sp, #8
10000b8c:	af00      	add	r7, sp, #0
10000b8e:	6078      	str	r0, [r7, #4]
10000b90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
10000b92:	f00b fefb 	bl	1000c98c <__errno>
10000b96:	4603      	mov	r3, r0
10000b98:	2216      	movs	r2, #22
10000b9a:	601a      	str	r2, [r3, #0]
  return -1;
10000b9c:	f04f 33ff 	mov.w	r3, #4294967295
}
10000ba0:	4618      	mov	r0, r3
10000ba2:	3708      	adds	r7, #8
10000ba4:	46bd      	mov	sp, r7
10000ba6:	bd80      	pop	{r7, pc}

10000ba8 <_exit>:

void _exit (int status)
{
10000ba8:	b580      	push	{r7, lr}
10000baa:	b082      	sub	sp, #8
10000bac:	af00      	add	r7, sp, #0
10000bae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
10000bb0:	f04f 31ff 	mov.w	r1, #4294967295
10000bb4:	6878      	ldr	r0, [r7, #4]
10000bb6:	f7ff ffe7 	bl	10000b88 <_kill>
  while (1) {}    /* Make sure we hang here */
10000bba:	e7fe      	b.n	10000bba <_exit+0x12>

10000bbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
10000bbc:	b580      	push	{r7, lr}
10000bbe:	b086      	sub	sp, #24
10000bc0:	af00      	add	r7, sp, #0
10000bc2:	60f8      	str	r0, [r7, #12]
10000bc4:	60b9      	str	r1, [r7, #8]
10000bc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
10000bc8:	2300      	movs	r3, #0
10000bca:	617b      	str	r3, [r7, #20]
10000bcc:	e00a      	b.n	10000be4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
10000bce:	f3af 8000 	nop.w
10000bd2:	4601      	mov	r1, r0
10000bd4:	68bb      	ldr	r3, [r7, #8]
10000bd6:	1c5a      	adds	r2, r3, #1
10000bd8:	60ba      	str	r2, [r7, #8]
10000bda:	b2ca      	uxtb	r2, r1
10000bdc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
10000bde:	697b      	ldr	r3, [r7, #20]
10000be0:	3301      	adds	r3, #1
10000be2:	617b      	str	r3, [r7, #20]
10000be4:	697a      	ldr	r2, [r7, #20]
10000be6:	687b      	ldr	r3, [r7, #4]
10000be8:	429a      	cmp	r2, r3
10000bea:	dbf0      	blt.n	10000bce <_read+0x12>
  }

  return len;
10000bec:	687b      	ldr	r3, [r7, #4]
}
10000bee:	4618      	mov	r0, r3
10000bf0:	3718      	adds	r7, #24
10000bf2:	46bd      	mov	sp, r7
10000bf4:	bd80      	pop	{r7, pc}

10000bf6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
10000bf6:	b580      	push	{r7, lr}
10000bf8:	b086      	sub	sp, #24
10000bfa:	af00      	add	r7, sp, #0
10000bfc:	60f8      	str	r0, [r7, #12]
10000bfe:	60b9      	str	r1, [r7, #8]
10000c00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
10000c02:	2300      	movs	r3, #0
10000c04:	617b      	str	r3, [r7, #20]
10000c06:	e009      	b.n	10000c1c <_write+0x26>
  {
    __io_putchar(*ptr++);
10000c08:	68bb      	ldr	r3, [r7, #8]
10000c0a:	1c5a      	adds	r2, r3, #1
10000c0c:	60ba      	str	r2, [r7, #8]
10000c0e:	781b      	ldrb	r3, [r3, #0]
10000c10:	4618      	mov	r0, r3
10000c12:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
10000c16:	697b      	ldr	r3, [r7, #20]
10000c18:	3301      	adds	r3, #1
10000c1a:	617b      	str	r3, [r7, #20]
10000c1c:	697a      	ldr	r2, [r7, #20]
10000c1e:	687b      	ldr	r3, [r7, #4]
10000c20:	429a      	cmp	r2, r3
10000c22:	dbf1      	blt.n	10000c08 <_write+0x12>
  }
  return len;
10000c24:	687b      	ldr	r3, [r7, #4]
}
10000c26:	4618      	mov	r0, r3
10000c28:	3718      	adds	r7, #24
10000c2a:	46bd      	mov	sp, r7
10000c2c:	bd80      	pop	{r7, pc}

10000c2e <_close>:

int _close(int file)
{
10000c2e:	b480      	push	{r7}
10000c30:	b083      	sub	sp, #12
10000c32:	af00      	add	r7, sp, #0
10000c34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
10000c36:	f04f 33ff 	mov.w	r3, #4294967295
}
10000c3a:	4618      	mov	r0, r3
10000c3c:	370c      	adds	r7, #12
10000c3e:	46bd      	mov	sp, r7
10000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
10000c44:	4770      	bx	lr

10000c46 <_fstat>:


int _fstat(int file, struct stat *st)
{
10000c46:	b480      	push	{r7}
10000c48:	b083      	sub	sp, #12
10000c4a:	af00      	add	r7, sp, #0
10000c4c:	6078      	str	r0, [r7, #4]
10000c4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
10000c50:	683b      	ldr	r3, [r7, #0]
10000c52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
10000c56:	605a      	str	r2, [r3, #4]
  return 0;
10000c58:	2300      	movs	r3, #0
}
10000c5a:	4618      	mov	r0, r3
10000c5c:	370c      	adds	r7, #12
10000c5e:	46bd      	mov	sp, r7
10000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
10000c64:	4770      	bx	lr

10000c66 <_isatty>:

int _isatty(int file)
{
10000c66:	b480      	push	{r7}
10000c68:	b083      	sub	sp, #12
10000c6a:	af00      	add	r7, sp, #0
10000c6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
10000c6e:	2301      	movs	r3, #1
}
10000c70:	4618      	mov	r0, r3
10000c72:	370c      	adds	r7, #12
10000c74:	46bd      	mov	sp, r7
10000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
10000c7a:	4770      	bx	lr

10000c7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
10000c7c:	b480      	push	{r7}
10000c7e:	b085      	sub	sp, #20
10000c80:	af00      	add	r7, sp, #0
10000c82:	60f8      	str	r0, [r7, #12]
10000c84:	60b9      	str	r1, [r7, #8]
10000c86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
10000c88:	2300      	movs	r3, #0
}
10000c8a:	4618      	mov	r0, r3
10000c8c:	3714      	adds	r7, #20
10000c8e:	46bd      	mov	sp, r7
10000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
10000c94:	4770      	bx	lr
	...

10000c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
10000c98:	b580      	push	{r7, lr}
10000c9a:	b086      	sub	sp, #24
10000c9c:	af00      	add	r7, sp, #0
10000c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
10000ca0:	4a14      	ldr	r2, [pc, #80]	; (10000cf4 <_sbrk+0x5c>)
10000ca2:	4b15      	ldr	r3, [pc, #84]	; (10000cf8 <_sbrk+0x60>)
10000ca4:	1ad3      	subs	r3, r2, r3
10000ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
10000ca8:	697b      	ldr	r3, [r7, #20]
10000caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
10000cac:	4b13      	ldr	r3, [pc, #76]	; (10000cfc <_sbrk+0x64>)
10000cae:	681b      	ldr	r3, [r3, #0]
10000cb0:	2b00      	cmp	r3, #0
10000cb2:	d102      	bne.n	10000cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
10000cb4:	4b11      	ldr	r3, [pc, #68]	; (10000cfc <_sbrk+0x64>)
10000cb6:	4a12      	ldr	r2, [pc, #72]	; (10000d00 <_sbrk+0x68>)
10000cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
10000cba:	4b10      	ldr	r3, [pc, #64]	; (10000cfc <_sbrk+0x64>)
10000cbc:	681a      	ldr	r2, [r3, #0]
10000cbe:	687b      	ldr	r3, [r7, #4]
10000cc0:	4413      	add	r3, r2
10000cc2:	693a      	ldr	r2, [r7, #16]
10000cc4:	429a      	cmp	r2, r3
10000cc6:	d207      	bcs.n	10000cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
10000cc8:	f00b fe60 	bl	1000c98c <__errno>
10000ccc:	4603      	mov	r3, r0
10000cce:	220c      	movs	r2, #12
10000cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
10000cd2:	f04f 33ff 	mov.w	r3, #4294967295
10000cd6:	e009      	b.n	10000cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
10000cd8:	4b08      	ldr	r3, [pc, #32]	; (10000cfc <_sbrk+0x64>)
10000cda:	681b      	ldr	r3, [r3, #0]
10000cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
10000cde:	4b07      	ldr	r3, [pc, #28]	; (10000cfc <_sbrk+0x64>)
10000ce0:	681a      	ldr	r2, [r3, #0]
10000ce2:	687b      	ldr	r3, [r7, #4]
10000ce4:	4413      	add	r3, r2
10000ce6:	4a05      	ldr	r2, [pc, #20]	; (10000cfc <_sbrk+0x64>)
10000ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
10000cea:	68fb      	ldr	r3, [r7, #12]
}
10000cec:	4618      	mov	r0, r3
10000cee:	3718      	adds	r7, #24
10000cf0:	46bd      	mov	sp, r7
10000cf2:	bd80      	pop	{r7, pc}
10000cf4:	10040000 	.word	0x10040000
10000cf8:	00000400 	.word	0x00000400
10000cfc:	10020374 	.word	0x10020374
10000d00:	10020598 	.word	0x10020598

10000d04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
10000d04:	e7fe      	b.n	10000d04 <ADC1_IRQHandler>
	...

10000d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10000d08:	b580      	push	{r7, lr}
10000d0a:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
10000d0c:	2003      	movs	r0, #3
10000d0e:	f001 fbe7 	bl	100024e0 <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10000d12:	f004 f80b 	bl	10004d2c <HAL_RCC_GetSystemCoreClockFreq>
10000d16:	4603      	mov	r3, r0
10000d18:	4a07      	ldr	r2, [pc, #28]	; (10000d38 <HAL_Init+0x30>)
10000d1a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10000d1c:	2001      	movs	r0, #1
10000d1e:	f000 f80d 	bl	10000d3c <HAL_InitTick>
10000d22:	4603      	mov	r3, r0
10000d24:	2b00      	cmp	r3, #0
10000d26:	d001      	beq.n	10000d2c <HAL_Init+0x24>
  {
    return HAL_ERROR;
10000d28:	2301      	movs	r3, #1
10000d2a:	e002      	b.n	10000d32 <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
10000d2c:	f7ff fd3b 	bl	100007a6 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
10000d30:	2300      	movs	r3, #0
}
10000d32:	4618      	mov	r0, r3
10000d34:	bd80      	pop	{r7, pc}
10000d36:	bf00      	nop
10000d38:	10020000 	.word	0x10020000

10000d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
10000d3c:	b580      	push	{r7, lr}
10000d3e:	b082      	sub	sp, #8
10000d40:	af00      	add	r7, sp, #0
10000d42:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
10000d44:	4b15      	ldr	r3, [pc, #84]	; (10000d9c <HAL_InitTick+0x60>)
10000d46:	781b      	ldrb	r3, [r3, #0]
10000d48:	2b00      	cmp	r3, #0
10000d4a:	d101      	bne.n	10000d50 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
10000d4c:	2301      	movs	r3, #1
10000d4e:	e021      	b.n	10000d94 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
10000d50:	4b13      	ldr	r3, [pc, #76]	; (10000da0 <HAL_InitTick+0x64>)
10000d52:	681a      	ldr	r2, [r3, #0]
10000d54:	4b11      	ldr	r3, [pc, #68]	; (10000d9c <HAL_InitTick+0x60>)
10000d56:	781b      	ldrb	r3, [r3, #0]
10000d58:	4619      	mov	r1, r3
10000d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
10000d5e:	fbb3 f3f1 	udiv	r3, r3, r1
10000d62:	fbb2 f3f3 	udiv	r3, r2, r3
10000d66:	4618      	mov	r0, r3
10000d68:	f001 fbef 	bl	1000254a <HAL_SYSTICK_Config>
10000d6c:	4603      	mov	r3, r0
10000d6e:	2b00      	cmp	r3, #0
10000d70:	d001      	beq.n	10000d76 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
10000d72:	2301      	movs	r3, #1
10000d74:	e00e      	b.n	10000d94 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10000d76:	687b      	ldr	r3, [r7, #4]
10000d78:	2b0f      	cmp	r3, #15
10000d7a:	d80a      	bhi.n	10000d92 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
10000d7c:	2200      	movs	r2, #0
10000d7e:	6879      	ldr	r1, [r7, #4]
10000d80:	f04f 30ff 	mov.w	r0, #4294967295
10000d84:	f001 fbb7 	bl	100024f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
10000d88:	4a06      	ldr	r2, [pc, #24]	; (10000da4 <HAL_InitTick+0x68>)
10000d8a:	687b      	ldr	r3, [r7, #4]
10000d8c:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
10000d8e:	2300      	movs	r3, #0
10000d90:	e000      	b.n	10000d94 <HAL_InitTick+0x58>
    return HAL_ERROR;
10000d92:	2301      	movs	r3, #1
}
10000d94:	4618      	mov	r0, r3
10000d96:	3708      	adds	r7, #8
10000d98:	46bd      	mov	sp, r7
10000d9a:	bd80      	pop	{r7, pc}
10000d9c:	10020008 	.word	0x10020008
10000da0:	10020000 	.word	0x10020000
10000da4:	10020004 	.word	0x10020004

10000da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10000da8:	b480      	push	{r7}
10000daa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10000dac:	4b06      	ldr	r3, [pc, #24]	; (10000dc8 <HAL_IncTick+0x20>)
10000dae:	781b      	ldrb	r3, [r3, #0]
10000db0:	461a      	mov	r2, r3
10000db2:	4b06      	ldr	r3, [pc, #24]	; (10000dcc <HAL_IncTick+0x24>)
10000db4:	681b      	ldr	r3, [r3, #0]
10000db6:	4413      	add	r3, r2
10000db8:	4a04      	ldr	r2, [pc, #16]	; (10000dcc <HAL_IncTick+0x24>)
10000dba:	6013      	str	r3, [r2, #0]
}
10000dbc:	bf00      	nop
10000dbe:	46bd      	mov	sp, r7
10000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
10000dc4:	4770      	bx	lr
10000dc6:	bf00      	nop
10000dc8:	10020008 	.word	0x10020008
10000dcc:	10020378 	.word	0x10020378

10000dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10000dd0:	b480      	push	{r7}
10000dd2:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
10000dd4:	4b03      	ldr	r3, [pc, #12]	; (10000de4 <HAL_GetTick+0x14>)
10000dd6:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
10000dd8:	4618      	mov	r0, r3
10000dda:	46bd      	mov	sp, r7
10000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
10000de0:	4770      	bx	lr
10000de2:	bf00      	nop
10000de4:	10020378 	.word	0x10020378

10000de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
10000de8:	b580      	push	{r7, lr}
10000dea:	b084      	sub	sp, #16
10000dec:	af00      	add	r7, sp, #0
10000dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
10000df0:	f7ff ffee 	bl	10000dd0 <HAL_GetTick>
10000df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
10000df6:	687b      	ldr	r3, [r7, #4]
10000df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
10000dfa:	68fb      	ldr	r3, [r7, #12]
10000dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
10000e00:	d005      	beq.n	10000e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
10000e02:	4b0a      	ldr	r3, [pc, #40]	; (10000e2c <HAL_Delay+0x44>)
10000e04:	781b      	ldrb	r3, [r3, #0]
10000e06:	461a      	mov	r2, r3
10000e08:	68fb      	ldr	r3, [r7, #12]
10000e0a:	4413      	add	r3, r2
10000e0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
10000e0e:	bf00      	nop
10000e10:	f7ff ffde 	bl	10000dd0 <HAL_GetTick>
10000e14:	4602      	mov	r2, r0
10000e16:	68bb      	ldr	r3, [r7, #8]
10000e18:	1ad3      	subs	r3, r2, r3
10000e1a:	68fa      	ldr	r2, [r7, #12]
10000e1c:	429a      	cmp	r2, r3
10000e1e:	d8f7      	bhi.n	10000e10 <HAL_Delay+0x28>
  {
  }
}
10000e20:	bf00      	nop
10000e22:	bf00      	nop
10000e24:	3710      	adds	r7, #16
10000e26:	46bd      	mov	sp, r7
10000e28:	bd80      	pop	{r7, pc}
10000e2a:	bf00      	nop
10000e2c:	10020008 	.word	0x10020008

10000e30 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.8 V.
  *                                                This requires VDDA equal to or higher than 2.1 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
10000e30:	b480      	push	{r7}
10000e32:	b083      	sub	sp, #12
10000e34:	af00      	add	r7, sp, #0
10000e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
10000e38:	4b06      	ldr	r3, [pc, #24]	; (10000e54 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
10000e3a:	681b      	ldr	r3, [r3, #0]
10000e3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
10000e40:	4904      	ldr	r1, [pc, #16]	; (10000e54 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
10000e42:	687b      	ldr	r3, [r7, #4]
10000e44:	4313      	orrs	r3, r2
10000e46:	600b      	str	r3, [r1, #0]
}
10000e48:	bf00      	nop
10000e4a:	370c      	adds	r7, #12
10000e4c:	46bd      	mov	sp, r7
10000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
10000e52:	4770      	bx	lr
10000e54:	50025000 	.word	0x50025000

10000e58 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
10000e58:	b480      	push	{r7}
10000e5a:	b083      	sub	sp, #12
10000e5c:	af00      	add	r7, sp, #0
10000e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
10000e60:	4b06      	ldr	r3, [pc, #24]	; (10000e7c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
10000e62:	681b      	ldr	r3, [r3, #0]
10000e64:	f023 0202 	bic.w	r2, r3, #2
10000e68:	4904      	ldr	r1, [pc, #16]	; (10000e7c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
10000e6a:	687b      	ldr	r3, [r7, #4]
10000e6c:	4313      	orrs	r3, r2
10000e6e:	600b      	str	r3, [r1, #0]
}
10000e70:	bf00      	nop
10000e72:	370c      	adds	r7, #12
10000e74:	46bd      	mov	sp, r7
10000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
10000e7a:	4770      	bx	lr
10000e7c:	50025000 	.word	0x50025000

10000e80 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
10000e80:	b580      	push	{r7, lr}
10000e82:	b082      	sub	sp, #8
10000e84:	af00      	add	r7, sp, #0
  uint32_t  tickstart = 0;
10000e86:	2300      	movs	r3, #0
10000e88:	607b      	str	r3, [r7, #4]

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
10000e8a:	4b0f      	ldr	r3, [pc, #60]	; (10000ec8 <HAL_SYSCFG_EnableVREFBUF+0x48>)
10000e8c:	681b      	ldr	r3, [r3, #0]
10000e8e:	4a0e      	ldr	r2, [pc, #56]	; (10000ec8 <HAL_SYSCFG_EnableVREFBUF+0x48>)
10000e90:	f043 0301 	orr.w	r3, r3, #1
10000e94:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10000e96:	f7ff ff9b 	bl	10000dd0 <HAL_GetTick>
10000e9a:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == RESET)
10000e9c:	e008      	b.n	10000eb0 <HAL_SYSCFG_EnableVREFBUF+0x30>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
10000e9e:	f7ff ff97 	bl	10000dd0 <HAL_GetTick>
10000ea2:	4602      	mov	r2, r0
10000ea4:	687b      	ldr	r3, [r7, #4]
10000ea6:	1ad3      	subs	r3, r2, r3
10000ea8:	2b0a      	cmp	r3, #10
10000eaa:	d901      	bls.n	10000eb0 <HAL_SYSCFG_EnableVREFBUF+0x30>
    {
      return HAL_TIMEOUT;
10000eac:	2303      	movs	r3, #3
10000eae:	e006      	b.n	10000ebe <HAL_SYSCFG_EnableVREFBUF+0x3e>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == RESET)
10000eb0:	4b05      	ldr	r3, [pc, #20]	; (10000ec8 <HAL_SYSCFG_EnableVREFBUF+0x48>)
10000eb2:	681b      	ldr	r3, [r3, #0]
10000eb4:	f003 0308 	and.w	r3, r3, #8
10000eb8:	2b00      	cmp	r3, #0
10000eba:	d0f0      	beq.n	10000e9e <HAL_SYSCFG_EnableVREFBUF+0x1e>
    }
  }

  return HAL_OK;
10000ebc:	2300      	movs	r3, #0
}
10000ebe:	4618      	mov	r0, r3
10000ec0:	3708      	adds	r7, #8
10000ec2:	46bd      	mov	sp, r7
10000ec4:	bd80      	pop	{r7, pc}
10000ec6:	bf00      	nop
10000ec8:	50025000 	.word	0x50025000

10000ecc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
10000ecc:	b480      	push	{r7}
10000ece:	b083      	sub	sp, #12
10000ed0:	af00      	add	r7, sp, #0
10000ed2:	6078      	str	r0, [r7, #4]
10000ed4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
10000ed6:	687b      	ldr	r3, [r7, #4]
10000ed8:	689b      	ldr	r3, [r3, #8]
10000eda:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
10000ede:	683b      	ldr	r3, [r7, #0]
10000ee0:	431a      	orrs	r2, r3
10000ee2:	687b      	ldr	r3, [r7, #4]
10000ee4:	609a      	str	r2, [r3, #8]
}
10000ee6:	bf00      	nop
10000ee8:	370c      	adds	r7, #12
10000eea:	46bd      	mov	sp, r7
10000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
10000ef0:	4770      	bx	lr
	...

10000ef4 <LL_ADC_SetCommonPathInternalCh>:
  *
  *         (1) On STM32MP1, parameter available only on ADC instance: ADC2.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
10000ef4:	b480      	push	{r7}
10000ef6:	b083      	sub	sp, #12
10000ef8:	af00      	add	r7, sp, #0
10000efa:	6078      	str	r0, [r7, #4]
10000efc:	6039      	str	r1, [r7, #0]
  if(PathInternal == LL_ADC_PATH_INTERNAL_VDDCORE)
10000efe:	683b      	ldr	r3, [r7, #0]
10000f00:	2b01      	cmp	r3, #1
10000f02:	d108      	bne.n	10000f16 <LL_ADC_SetCommonPathInternalCh+0x22>
  {
    /* Feature limited to ADC instance ADC2 */
    SET_BIT(ADC2->OR, ADC2_OR_VDDCOREEN);
10000f04:	4b0b      	ldr	r3, [pc, #44]	; (10000f34 <LL_ADC_SetCommonPathInternalCh+0x40>)
10000f06:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
10000f0a:	4a0a      	ldr	r2, [pc, #40]	; (10000f34 <LL_ADC_SetCommonPathInternalCh+0x40>)
10000f0c:	f043 0301 	orr.w	r3, r3, #1
10000f10:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
  }
  else
  {
    MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
  }
}
10000f14:	e007      	b.n	10000f26 <LL_ADC_SetCommonPathInternalCh+0x32>
    MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
10000f16:	687b      	ldr	r3, [r7, #4]
10000f18:	689b      	ldr	r3, [r3, #8]
10000f1a:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
10000f1e:	683b      	ldr	r3, [r7, #0]
10000f20:	431a      	orrs	r2, r3
10000f22:	687b      	ldr	r3, [r7, #4]
10000f24:	609a      	str	r2, [r3, #8]
}
10000f26:	bf00      	nop
10000f28:	370c      	adds	r7, #12
10000f2a:	46bd      	mov	sp, r7
10000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000f30:	4770      	bx	lr
10000f32:	bf00      	nop
10000f34:	48003100 	.word	0x48003100

10000f38 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
10000f38:	b480      	push	{r7}
10000f3a:	b083      	sub	sp, #12
10000f3c:	af00      	add	r7, sp, #0
10000f3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
10000f40:	687b      	ldr	r3, [r7, #4]
10000f42:	689b      	ldr	r3, [r3, #8]
10000f44:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
10000f48:	4618      	mov	r0, r3
10000f4a:	370c      	adds	r7, #12
10000f4c:	46bd      	mov	sp, r7
10000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
10000f52:	4770      	bx	lr

10000f54 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
10000f54:	b480      	push	{r7}
10000f56:	b087      	sub	sp, #28
10000f58:	af00      	add	r7, sp, #0
10000f5a:	60f8      	str	r0, [r7, #12]
10000f5c:	60b9      	str	r1, [r7, #8]
10000f5e:	607a      	str	r2, [r7, #4]
10000f60:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
10000f62:	68fb      	ldr	r3, [r7, #12]
10000f64:	3360      	adds	r3, #96	; 0x60
10000f66:	461a      	mov	r2, r3
10000f68:	68bb      	ldr	r3, [r7, #8]
10000f6a:	009b      	lsls	r3, r3, #2
10000f6c:	4413      	add	r3, r2
10000f6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
10000f70:	697b      	ldr	r3, [r7, #20]
10000f72:	681b      	ldr	r3, [r3, #0]
10000f74:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10000f78:	687b      	ldr	r3, [r7, #4]
10000f7a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
10000f7e:	683b      	ldr	r3, [r7, #0]
10000f80:	430b      	orrs	r3, r1
10000f82:	431a      	orrs	r2, r3
10000f84:	697b      	ldr	r3, [r7, #20]
10000f86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
10000f88:	bf00      	nop
10000f8a:	371c      	adds	r7, #28
10000f8c:	46bd      	mov	sp, r7
10000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
10000f92:	4770      	bx	lr

10000f94 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
10000f94:	b480      	push	{r7}
10000f96:	b085      	sub	sp, #20
10000f98:	af00      	add	r7, sp, #0
10000f9a:	60f8      	str	r0, [r7, #12]
10000f9c:	60b9      	str	r1, [r7, #8]
10000f9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
10000fa0:	68fb      	ldr	r3, [r7, #12]
10000fa2:	691b      	ldr	r3, [r3, #16]
10000fa4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
10000fa8:	68bb      	ldr	r3, [r7, #8]
10000faa:	f003 031f 	and.w	r3, r3, #31
10000fae:	6879      	ldr	r1, [r7, #4]
10000fb0:	fa01 f303 	lsl.w	r3, r1, r3
10000fb4:	431a      	orrs	r2, r3
10000fb6:	68fb      	ldr	r3, [r7, #12]
10000fb8:	611a      	str	r2, [r3, #16]
}
10000fba:	bf00      	nop
10000fbc:	3714      	adds	r7, #20
10000fbe:	46bd      	mov	sp, r7
10000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
10000fc4:	4770      	bx	lr

10000fc6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
10000fc6:	b480      	push	{r7}
10000fc8:	b087      	sub	sp, #28
10000fca:	af00      	add	r7, sp, #0
10000fcc:	60f8      	str	r0, [r7, #12]
10000fce:	60b9      	str	r1, [r7, #8]
10000fd0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
10000fd2:	68fb      	ldr	r3, [r7, #12]
10000fd4:	3360      	adds	r3, #96	; 0x60
10000fd6:	461a      	mov	r2, r3
10000fd8:	68bb      	ldr	r3, [r7, #8]
10000fda:	009b      	lsls	r3, r3, #2
10000fdc:	4413      	add	r3, r2
10000fde:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
10000fe0:	697b      	ldr	r3, [r7, #20]
10000fe2:	681b      	ldr	r3, [r3, #0]
10000fe4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
10000fe8:	687b      	ldr	r3, [r7, #4]
10000fea:	431a      	orrs	r2, r3
10000fec:	697b      	ldr	r3, [r7, #20]
10000fee:	601a      	str	r2, [r3, #0]
}
10000ff0:	bf00      	nop
10000ff2:	371c      	adds	r7, #28
10000ff4:	46bd      	mov	sp, r7
10000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
10000ffa:	4770      	bx	lr

10000ffc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
10000ffc:	b480      	push	{r7}
10000ffe:	b083      	sub	sp, #12
10001000:	af00      	add	r7, sp, #0
10001002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
10001004:	687b      	ldr	r3, [r7, #4]
10001006:	68db      	ldr	r3, [r3, #12]
10001008:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
1000100c:	2b00      	cmp	r3, #0
1000100e:	d101      	bne.n	10001014 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
10001010:	2301      	movs	r3, #1
10001012:	e000      	b.n	10001016 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
10001014:	2300      	movs	r3, #0
}
10001016:	4618      	mov	r0, r3
10001018:	370c      	adds	r7, #12
1000101a:	46bd      	mov	sp, r7
1000101c:	f85d 7b04 	ldr.w	r7, [sp], #4
10001020:	4770      	bx	lr

10001022 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32MP1, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
10001022:	b480      	push	{r7}
10001024:	b087      	sub	sp, #28
10001026:	af00      	add	r7, sp, #0
10001028:	60f8      	str	r0, [r7, #12]
1000102a:	60b9      	str	r1, [r7, #8]
1000102c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
1000102e:	68fb      	ldr	r3, [r7, #12]
10001030:	3330      	adds	r3, #48	; 0x30
10001032:	461a      	mov	r2, r3
10001034:	68bb      	ldr	r3, [r7, #8]
10001036:	0a1b      	lsrs	r3, r3, #8
10001038:	009b      	lsls	r3, r3, #2
1000103a:	f003 030c 	and.w	r3, r3, #12
1000103e:	4413      	add	r3, r2
10001040:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
10001042:	697b      	ldr	r3, [r7, #20]
10001044:	681a      	ldr	r2, [r3, #0]
10001046:	68bb      	ldr	r3, [r7, #8]
10001048:	f003 031f 	and.w	r3, r3, #31
1000104c:	211f      	movs	r1, #31
1000104e:	fa01 f303 	lsl.w	r3, r1, r3
10001052:	43db      	mvns	r3, r3
10001054:	401a      	ands	r2, r3
10001056:	687b      	ldr	r3, [r7, #4]
10001058:	0e9b      	lsrs	r3, r3, #26
1000105a:	f003 011f 	and.w	r1, r3, #31
1000105e:	68bb      	ldr	r3, [r7, #8]
10001060:	f003 031f 	and.w	r3, r3, #31
10001064:	fa01 f303 	lsl.w	r3, r1, r3
10001068:	431a      	orrs	r2, r3
1000106a:	697b      	ldr	r3, [r7, #20]
1000106c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
1000106e:	bf00      	nop
10001070:	371c      	adds	r7, #28
10001072:	46bd      	mov	sp, r7
10001074:	f85d 7b04 	ldr.w	r7, [sp], #4
10001078:	4770      	bx	lr

1000107a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
1000107a:	b480      	push	{r7}
1000107c:	b087      	sub	sp, #28
1000107e:	af00      	add	r7, sp, #0
10001080:	60f8      	str	r0, [r7, #12]
10001082:	60b9      	str	r1, [r7, #8]
10001084:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
10001086:	68fb      	ldr	r3, [r7, #12]
10001088:	3314      	adds	r3, #20
1000108a:	461a      	mov	r2, r3
1000108c:	68bb      	ldr	r3, [r7, #8]
1000108e:	0e5b      	lsrs	r3, r3, #25
10001090:	009b      	lsls	r3, r3, #2
10001092:	f003 0304 	and.w	r3, r3, #4
10001096:	4413      	add	r3, r2
10001098:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
1000109a:	697b      	ldr	r3, [r7, #20]
1000109c:	681a      	ldr	r2, [r3, #0]
1000109e:	68bb      	ldr	r3, [r7, #8]
100010a0:	0d1b      	lsrs	r3, r3, #20
100010a2:	f003 031f 	and.w	r3, r3, #31
100010a6:	2107      	movs	r1, #7
100010a8:	fa01 f303 	lsl.w	r3, r1, r3
100010ac:	43db      	mvns	r3, r3
100010ae:	401a      	ands	r2, r3
100010b0:	68bb      	ldr	r3, [r7, #8]
100010b2:	0d1b      	lsrs	r3, r3, #20
100010b4:	f003 031f 	and.w	r3, r3, #31
100010b8:	6879      	ldr	r1, [r7, #4]
100010ba:	fa01 f303 	lsl.w	r3, r1, r3
100010be:	431a      	orrs	r2, r3
100010c0:	697b      	ldr	r3, [r7, #20]
100010c2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
100010c4:	bf00      	nop
100010c6:	371c      	adds	r7, #28
100010c8:	46bd      	mov	sp, r7
100010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
100010ce:	4770      	bx	lr

100010d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
100010d0:	b480      	push	{r7}
100010d2:	b085      	sub	sp, #20
100010d4:	af00      	add	r7, sp, #0
100010d6:	60f8      	str	r0, [r7, #12]
100010d8:	60b9      	str	r1, [r7, #8]
100010da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
100010dc:	68fb      	ldr	r3, [r7, #12]
100010de:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
100010e2:	68bb      	ldr	r3, [r7, #8]
100010e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
100010e8:	43db      	mvns	r3, r3
100010ea:	401a      	ands	r2, r3
100010ec:	687b      	ldr	r3, [r7, #4]
100010ee:	f003 0318 	and.w	r3, r3, #24
100010f2:	4908      	ldr	r1, [pc, #32]	; (10001114 <LL_ADC_SetChannelSingleDiff+0x44>)
100010f4:	40d9      	lsrs	r1, r3
100010f6:	68bb      	ldr	r3, [r7, #8]
100010f8:	400b      	ands	r3, r1
100010fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
100010fe:	431a      	orrs	r2, r3
10001100:	68fb      	ldr	r3, [r7, #12]
10001102:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
10001106:	bf00      	nop
10001108:	3714      	adds	r7, #20
1000110a:	46bd      	mov	sp, r7
1000110c:	f85d 7b04 	ldr.w	r7, [sp], #4
10001110:	4770      	bx	lr
10001112:	bf00      	nop
10001114:	000fffff 	.word	0x000fffff

10001118 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
10001118:	b480      	push	{r7}
1000111a:	b083      	sub	sp, #12
1000111c:	af00      	add	r7, sp, #0
1000111e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
10001120:	687b      	ldr	r3, [r7, #4]
10001122:	689b      	ldr	r3, [r3, #8]
10001124:	f003 031f 	and.w	r3, r3, #31
}
10001128:	4618      	mov	r0, r3
1000112a:	370c      	adds	r7, #12
1000112c:	46bd      	mov	sp, r7
1000112e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001132:	4770      	bx	lr

10001134 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
10001134:	b480      	push	{r7}
10001136:	b083      	sub	sp, #12
10001138:	af00      	add	r7, sp, #0
1000113a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
1000113c:	687b      	ldr	r3, [r7, #4]
1000113e:	689b      	ldr	r3, [r3, #8]
10001140:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
10001144:	4618      	mov	r0, r3
10001146:	370c      	adds	r7, #12
10001148:	46bd      	mov	sp, r7
1000114a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000114e:	4770      	bx	lr

10001150 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
10001150:	b480      	push	{r7}
10001152:	b083      	sub	sp, #12
10001154:	af00      	add	r7, sp, #0
10001156:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
10001158:	687b      	ldr	r3, [r7, #4]
1000115a:	689b      	ldr	r3, [r3, #8]
1000115c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
10001160:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10001164:	687a      	ldr	r2, [r7, #4]
10001166:	6093      	str	r3, [r2, #8]
}
10001168:	bf00      	nop
1000116a:	370c      	adds	r7, #12
1000116c:	46bd      	mov	sp, r7
1000116e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001172:	4770      	bx	lr

10001174 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
10001174:	b480      	push	{r7}
10001176:	b083      	sub	sp, #12
10001178:	af00      	add	r7, sp, #0
1000117a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
1000117c:	687b      	ldr	r3, [r7, #4]
1000117e:	689b      	ldr	r3, [r3, #8]
10001180:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
10001184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
10001188:	d101      	bne.n	1000118e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
1000118a:	2301      	movs	r3, #1
1000118c:	e000      	b.n	10001190 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
1000118e:	2300      	movs	r3, #0
}
10001190:	4618      	mov	r0, r3
10001192:	370c      	adds	r7, #12
10001194:	46bd      	mov	sp, r7
10001196:	f85d 7b04 	ldr.w	r7, [sp], #4
1000119a:	4770      	bx	lr

1000119c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
1000119c:	b480      	push	{r7}
1000119e:	b083      	sub	sp, #12
100011a0:	af00      	add	r7, sp, #0
100011a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
100011a4:	687b      	ldr	r3, [r7, #4]
100011a6:	689b      	ldr	r3, [r3, #8]
100011a8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
100011ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
100011b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
100011b4:	687b      	ldr	r3, [r7, #4]
100011b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
100011b8:	bf00      	nop
100011ba:	370c      	adds	r7, #12
100011bc:	46bd      	mov	sp, r7
100011be:	f85d 7b04 	ldr.w	r7, [sp], #4
100011c2:	4770      	bx	lr

100011c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
100011c4:	b480      	push	{r7}
100011c6:	b083      	sub	sp, #12
100011c8:	af00      	add	r7, sp, #0
100011ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
100011cc:	687b      	ldr	r3, [r7, #4]
100011ce:	689b      	ldr	r3, [r3, #8]
100011d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
100011d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
100011d8:	d101      	bne.n	100011de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
100011da:	2301      	movs	r3, #1
100011dc:	e000      	b.n	100011e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
100011de:	2300      	movs	r3, #0
}
100011e0:	4618      	mov	r0, r3
100011e2:	370c      	adds	r7, #12
100011e4:	46bd      	mov	sp, r7
100011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
100011ea:	4770      	bx	lr

100011ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
100011ec:	b480      	push	{r7}
100011ee:	b083      	sub	sp, #12
100011f0:	af00      	add	r7, sp, #0
100011f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
100011f4:	687b      	ldr	r3, [r7, #4]
100011f6:	689b      	ldr	r3, [r3, #8]
100011f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
100011fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10001200:	f043 0201 	orr.w	r2, r3, #1
10001204:	687b      	ldr	r3, [r7, #4]
10001206:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
10001208:	bf00      	nop
1000120a:	370c      	adds	r7, #12
1000120c:	46bd      	mov	sp, r7
1000120e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001212:	4770      	bx	lr

10001214 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
10001214:	b480      	push	{r7}
10001216:	b083      	sub	sp, #12
10001218:	af00      	add	r7, sp, #0
1000121a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
1000121c:	687b      	ldr	r3, [r7, #4]
1000121e:	689b      	ldr	r3, [r3, #8]
10001220:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
10001224:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10001228:	f043 0202 	orr.w	r2, r3, #2
1000122c:	687b      	ldr	r3, [r7, #4]
1000122e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
10001230:	bf00      	nop
10001232:	370c      	adds	r7, #12
10001234:	46bd      	mov	sp, r7
10001236:	f85d 7b04 	ldr.w	r7, [sp], #4
1000123a:	4770      	bx	lr

1000123c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
1000123c:	b480      	push	{r7}
1000123e:	b083      	sub	sp, #12
10001240:	af00      	add	r7, sp, #0
10001242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
10001244:	687b      	ldr	r3, [r7, #4]
10001246:	689b      	ldr	r3, [r3, #8]
10001248:	f003 0301 	and.w	r3, r3, #1
1000124c:	2b01      	cmp	r3, #1
1000124e:	d101      	bne.n	10001254 <LL_ADC_IsEnabled+0x18>
10001250:	2301      	movs	r3, #1
10001252:	e000      	b.n	10001256 <LL_ADC_IsEnabled+0x1a>
10001254:	2300      	movs	r3, #0
}
10001256:	4618      	mov	r0, r3
10001258:	370c      	adds	r7, #12
1000125a:	46bd      	mov	sp, r7
1000125c:	f85d 7b04 	ldr.w	r7, [sp], #4
10001260:	4770      	bx	lr

10001262 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
10001262:	b480      	push	{r7}
10001264:	b083      	sub	sp, #12
10001266:	af00      	add	r7, sp, #0
10001268:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
1000126a:	687b      	ldr	r3, [r7, #4]
1000126c:	689b      	ldr	r3, [r3, #8]
1000126e:	f003 0302 	and.w	r3, r3, #2
10001272:	2b02      	cmp	r3, #2
10001274:	d101      	bne.n	1000127a <LL_ADC_IsDisableOngoing+0x18>
10001276:	2301      	movs	r3, #1
10001278:	e000      	b.n	1000127c <LL_ADC_IsDisableOngoing+0x1a>
1000127a:	2300      	movs	r3, #0
}
1000127c:	4618      	mov	r0, r3
1000127e:	370c      	adds	r7, #12
10001280:	46bd      	mov	sp, r7
10001282:	f85d 7b04 	ldr.w	r7, [sp], #4
10001286:	4770      	bx	lr

10001288 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
10001288:	b480      	push	{r7}
1000128a:	b083      	sub	sp, #12
1000128c:	af00      	add	r7, sp, #0
1000128e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
10001290:	687b      	ldr	r3, [r7, #4]
10001292:	689b      	ldr	r3, [r3, #8]
10001294:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
10001298:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
1000129c:	f043 0204 	orr.w	r2, r3, #4
100012a0:	687b      	ldr	r3, [r7, #4]
100012a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
100012a4:	bf00      	nop
100012a6:	370c      	adds	r7, #12
100012a8:	46bd      	mov	sp, r7
100012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
100012ae:	4770      	bx	lr

100012b0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
100012b0:	b480      	push	{r7}
100012b2:	b083      	sub	sp, #12
100012b4:	af00      	add	r7, sp, #0
100012b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
100012b8:	687b      	ldr	r3, [r7, #4]
100012ba:	689b      	ldr	r3, [r3, #8]
100012bc:	f003 0304 	and.w	r3, r3, #4
100012c0:	2b04      	cmp	r3, #4
100012c2:	d101      	bne.n	100012c8 <LL_ADC_REG_IsConversionOngoing+0x18>
100012c4:	2301      	movs	r3, #1
100012c6:	e000      	b.n	100012ca <LL_ADC_REG_IsConversionOngoing+0x1a>
100012c8:	2300      	movs	r3, #0
}
100012ca:	4618      	mov	r0, r3
100012cc:	370c      	adds	r7, #12
100012ce:	46bd      	mov	sp, r7
100012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
100012d4:	4770      	bx	lr

100012d6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
100012d6:	b480      	push	{r7}
100012d8:	b083      	sub	sp, #12
100012da:	af00      	add	r7, sp, #0
100012dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
100012de:	687b      	ldr	r3, [r7, #4]
100012e0:	689b      	ldr	r3, [r3, #8]
100012e2:	f003 0308 	and.w	r3, r3, #8
100012e6:	2b08      	cmp	r3, #8
100012e8:	d101      	bne.n	100012ee <LL_ADC_INJ_IsConversionOngoing+0x18>
100012ea:	2301      	movs	r3, #1
100012ec:	e000      	b.n	100012f0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
100012ee:	2300      	movs	r3, #0
}
100012f0:	4618      	mov	r0, r3
100012f2:	370c      	adds	r7, #12
100012f4:	46bd      	mov	sp, r7
100012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
100012fa:	4770      	bx	lr

100012fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
100012fc:	b590      	push	{r4, r7, lr}
100012fe:	b089      	sub	sp, #36	; 0x24
10001300:	af00      	add	r7, sp, #0
10001302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
10001304:	2300      	movs	r3, #0
10001306:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
10001308:	2300      	movs	r3, #0
1000130a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
1000130c:	687b      	ldr	r3, [r7, #4]
1000130e:	2b00      	cmp	r3, #0
10001310:	d101      	bne.n	10001316 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
10001312:	2301      	movs	r3, #1
10001314:	e13a      	b.n	1000158c <HAL_ADC_Init+0x290>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
10001316:	687b      	ldr	r3, [r7, #4]
10001318:	68db      	ldr	r3, [r3, #12]
1000131a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
1000131c:	687b      	ldr	r3, [r7, #4]
1000131e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001320:	2b00      	cmp	r3, #0
10001322:	d109      	bne.n	10001338 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
10001324:	6878      	ldr	r0, [r7, #4]
10001326:	f7ff fa75 	bl	10000814 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
1000132a:	687b      	ldr	r3, [r7, #4]
1000132c:	2200      	movs	r2, #0
1000132e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
10001330:	687b      	ldr	r3, [r7, #4]
10001332:	2200      	movs	r2, #0
10001334:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
10001338:	687b      	ldr	r3, [r7, #4]
1000133a:	681b      	ldr	r3, [r3, #0]
1000133c:	4618      	mov	r0, r3
1000133e:	f7ff ff19 	bl	10001174 <LL_ADC_IsDeepPowerDownEnabled>
10001342:	4603      	mov	r3, r0
10001344:	2b00      	cmp	r3, #0
10001346:	d004      	beq.n	10001352 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
10001348:	687b      	ldr	r3, [r7, #4]
1000134a:	681b      	ldr	r3, [r3, #0]
1000134c:	4618      	mov	r0, r3
1000134e:	f7ff feff 	bl	10001150 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
10001352:	687b      	ldr	r3, [r7, #4]
10001354:	681b      	ldr	r3, [r3, #0]
10001356:	4618      	mov	r0, r3
10001358:	f7ff ff34 	bl	100011c4 <LL_ADC_IsInternalRegulatorEnabled>
1000135c:	4603      	mov	r3, r0
1000135e:	2b00      	cmp	r3, #0
10001360:	d114      	bne.n	1000138c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
10001362:	687b      	ldr	r3, [r7, #4]
10001364:	681b      	ldr	r3, [r3, #0]
10001366:	4618      	mov	r0, r3
10001368:	f7ff ff18 	bl	1000119c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
1000136c:	4b89      	ldr	r3, [pc, #548]	; (10001594 <HAL_ADC_Init+0x298>)
1000136e:	681b      	ldr	r3, [r3, #0]
10001370:	099b      	lsrs	r3, r3, #6
10001372:	4a89      	ldr	r2, [pc, #548]	; (10001598 <HAL_ADC_Init+0x29c>)
10001374:	fba2 2303 	umull	r2, r3, r2, r3
10001378:	099b      	lsrs	r3, r3, #6
1000137a:	3301      	adds	r3, #1
1000137c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
1000137e:	e002      	b.n	10001386 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
10001380:	68bb      	ldr	r3, [r7, #8]
10001382:	3b01      	subs	r3, #1
10001384:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
10001386:	68bb      	ldr	r3, [r7, #8]
10001388:	2b00      	cmp	r3, #0
1000138a:	d1f9      	bne.n	10001380 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
1000138c:	687b      	ldr	r3, [r7, #4]
1000138e:	681b      	ldr	r3, [r3, #0]
10001390:	4618      	mov	r0, r3
10001392:	f7ff ff17 	bl	100011c4 <LL_ADC_IsInternalRegulatorEnabled>
10001396:	4603      	mov	r3, r0
10001398:	2b00      	cmp	r3, #0
1000139a:	d10d      	bne.n	100013b8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1000139c:	687b      	ldr	r3, [r7, #4]
1000139e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100013a0:	f043 0210 	orr.w	r2, r3, #16
100013a4:	687b      	ldr	r3, [r7, #4]
100013a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
100013a8:	687b      	ldr	r3, [r7, #4]
100013aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
100013ac:	f043 0201 	orr.w	r2, r3, #1
100013b0:	687b      	ldr	r3, [r7, #4]
100013b2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
100013b4:	2301      	movs	r3, #1
100013b6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
100013b8:	687b      	ldr	r3, [r7, #4]
100013ba:	681b      	ldr	r3, [r3, #0]
100013bc:	4618      	mov	r0, r3
100013be:	f7ff ff77 	bl	100012b0 <LL_ADC_REG_IsConversionOngoing>
100013c2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
100013c4:	687b      	ldr	r3, [r7, #4]
100013c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100013c8:	f003 0310 	and.w	r3, r3, #16
100013cc:	2b00      	cmp	r3, #0
100013ce:	f040 80d4 	bne.w	1000157a <HAL_ADC_Init+0x27e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
100013d2:	697b      	ldr	r3, [r7, #20]
100013d4:	2b00      	cmp	r3, #0
100013d6:	f040 80d0 	bne.w	1000157a <HAL_ADC_Init+0x27e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
100013da:	687b      	ldr	r3, [r7, #4]
100013dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100013de:	f423 7381 	bic.w	r3, r3, #258	; 0x102
100013e2:	f043 0202 	orr.w	r2, r3, #2
100013e6:	687b      	ldr	r3, [r7, #4]
100013e8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
100013ea:	687b      	ldr	r3, [r7, #4]
100013ec:	681b      	ldr	r3, [r3, #0]
100013ee:	4618      	mov	r0, r3
100013f0:	f7ff ff24 	bl	1000123c <LL_ADC_IsEnabled>
100013f4:	4603      	mov	r3, r0
100013f6:	2b00      	cmp	r3, #0
100013f8:	d110      	bne.n	1000141c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
100013fa:	4868      	ldr	r0, [pc, #416]	; (1000159c <HAL_ADC_Init+0x2a0>)
100013fc:	f7ff ff1e 	bl	1000123c <LL_ADC_IsEnabled>
10001400:	4604      	mov	r4, r0
10001402:	4867      	ldr	r0, [pc, #412]	; (100015a0 <HAL_ADC_Init+0x2a4>)
10001404:	f7ff ff1a 	bl	1000123c <LL_ADC_IsEnabled>
10001408:	4603      	mov	r3, r0
1000140a:	4323      	orrs	r3, r4
1000140c:	2b00      	cmp	r3, #0
1000140e:	d105      	bne.n	1000141c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
10001410:	687b      	ldr	r3, [r7, #4]
10001412:	685b      	ldr	r3, [r3, #4]
10001414:	4619      	mov	r1, r3
10001416:	4863      	ldr	r0, [pc, #396]	; (100015a4 <HAL_ADC_Init+0x2a8>)
10001418:	f7ff fd58 	bl	10000ecc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
1000141c:	687b      	ldr	r3, [r7, #4]
1000141e:	7d5b      	ldrb	r3, [r3, #21]
10001420:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
10001422:	687b      	ldr	r3, [r7, #4]
10001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
10001426:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
10001428:	687b      	ldr	r3, [r7, #4]
1000142a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                     |
1000142c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
1000142e:	687b      	ldr	r3, [r7, #4]
10001430:	7f1b      	ldrb	r3, [r3, #28]
10001432:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
10001434:	4313      	orrs	r3, r2
10001436:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
10001438:	687b      	ldr	r3, [r7, #4]
1000143a:	7f1b      	ldrb	r3, [r3, #28]
1000143c:	2b01      	cmp	r3, #1
1000143e:	d106      	bne.n	1000144e <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
10001440:	687b      	ldr	r3, [r7, #4]
10001442:	6a1b      	ldr	r3, [r3, #32]
10001444:	3b01      	subs	r3, #1
10001446:	045b      	lsls	r3, r3, #17
10001448:	69ba      	ldr	r2, [r7, #24]
1000144a:	4313      	orrs	r3, r2
1000144c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
1000144e:	687b      	ldr	r3, [r7, #4]
10001450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001452:	2b00      	cmp	r3, #0
10001454:	d009      	beq.n	1000146a <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
10001456:	687b      	ldr	r3, [r7, #4]
10001458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000145a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
1000145e:	687b      	ldr	r3, [r7, #4]
10001460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001462:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
10001464:	69ba      	ldr	r2, [r7, #24]
10001466:	4313      	orrs	r3, r2
10001468:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
1000146a:	687b      	ldr	r3, [r7, #4]
1000146c:	681b      	ldr	r3, [r3, #0]
1000146e:	68da      	ldr	r2, [r3, #12]
10001470:	4b4d      	ldr	r3, [pc, #308]	; (100015a8 <HAL_ADC_Init+0x2ac>)
10001472:	4013      	ands	r3, r2
10001474:	687a      	ldr	r2, [r7, #4]
10001476:	6812      	ldr	r2, [r2, #0]
10001478:	69b9      	ldr	r1, [r7, #24]
1000147a:	430b      	orrs	r3, r1
1000147c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
1000147e:	687b      	ldr	r3, [r7, #4]
10001480:	681b      	ldr	r3, [r3, #0]
10001482:	4618      	mov	r0, r3
10001484:	f7ff ff14 	bl	100012b0 <LL_ADC_REG_IsConversionOngoing>
10001488:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
1000148a:	687b      	ldr	r3, [r7, #4]
1000148c:	681b      	ldr	r3, [r3, #0]
1000148e:	4618      	mov	r0, r3
10001490:	f7ff ff21 	bl	100012d6 <LL_ADC_INJ_IsConversionOngoing>
10001494:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
10001496:	693b      	ldr	r3, [r7, #16]
10001498:	2b00      	cmp	r3, #0
1000149a:	d14c      	bne.n	10001536 <HAL_ADC_Init+0x23a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
1000149c:	68fb      	ldr	r3, [r7, #12]
1000149e:	2b00      	cmp	r3, #0
100014a0:	d149      	bne.n	10001536 <HAL_ADC_Init+0x23a>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
100014a2:	687b      	ldr	r3, [r7, #4]
100014a4:	7d1b      	ldrb	r3, [r3, #20]
100014a6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
100014a8:	687b      	ldr	r3, [r7, #4]
100014aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
100014ac:	4313      	orrs	r3, r2
100014ae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
100014b0:	687b      	ldr	r3, [r7, #4]
100014b2:	681b      	ldr	r3, [r3, #0]
100014b4:	68db      	ldr	r3, [r3, #12]
100014b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
100014ba:	f023 0303 	bic.w	r3, r3, #3
100014be:	687a      	ldr	r2, [r7, #4]
100014c0:	6812      	ldr	r2, [r2, #0]
100014c2:	69b9      	ldr	r1, [r7, #24]
100014c4:	430b      	orrs	r3, r1
100014c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
100014c8:	687b      	ldr	r3, [r7, #4]
100014ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
100014ce:	2b01      	cmp	r3, #1
100014d0:	d11b      	bne.n	1000150a <HAL_ADC_Init+0x20e>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
100014d2:	687b      	ldr	r3, [r7, #4]
100014d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100014d6:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
100014d8:	687b      	ldr	r3, [r7, #4]
100014da:	681b      	ldr	r3, [r3, #0]
100014dc:	691a      	ldr	r2, [r3, #16]
100014de:	4b33      	ldr	r3, [pc, #204]	; (100015ac <HAL_ADC_Init+0x2b0>)
100014e0:	4013      	ands	r3, r2
100014e2:	687a      	ldr	r2, [r7, #4]
100014e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
100014e6:	3a01      	subs	r2, #1
100014e8:	0411      	lsls	r1, r2, #16
100014ea:	687a      	ldr	r2, [r7, #4]
100014ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
100014ee:	4311      	orrs	r1, r2
100014f0:	687a      	ldr	r2, [r7, #4]
100014f2:	6c52      	ldr	r2, [r2, #68]	; 0x44
100014f4:	4311      	orrs	r1, r2
100014f6:	687a      	ldr	r2, [r7, #4]
100014f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
100014fa:	430a      	orrs	r2, r1
100014fc:	431a      	orrs	r2, r3
100014fe:	687b      	ldr	r3, [r7, #4]
10001500:	681b      	ldr	r3, [r3, #0]
10001502:	f042 0201 	orr.w	r2, r2, #1
10001506:	611a      	str	r2, [r3, #16]
10001508:	e007      	b.n	1000151a <HAL_ADC_Init+0x21e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
1000150a:	687b      	ldr	r3, [r7, #4]
1000150c:	681b      	ldr	r3, [r3, #0]
1000150e:	691a      	ldr	r2, [r3, #16]
10001510:	687b      	ldr	r3, [r7, #4]
10001512:	681b      	ldr	r3, [r3, #0]
10001514:	f022 0201 	bic.w	r2, r2, #1
10001518:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
1000151a:	687b      	ldr	r3, [r7, #4]
1000151c:	681b      	ldr	r3, [r3, #0]
1000151e:	691b      	ldr	r3, [r3, #16]
10001520:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
10001524:	687b      	ldr	r3, [r7, #4]
10001526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10001528:	687b      	ldr	r3, [r7, #4]
1000152a:	681b      	ldr	r3, [r3, #0]
1000152c:	430a      	orrs	r2, r1
1000152e:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
10001530:	6878      	ldr	r0, [r7, #4]
10001532:	f000 fdb9 	bl	100020a8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
10001536:	687b      	ldr	r3, [r7, #4]
10001538:	68db      	ldr	r3, [r3, #12]
1000153a:	2b01      	cmp	r3, #1
1000153c:	d10c      	bne.n	10001558 <HAL_ADC_Init+0x25c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
1000153e:	687b      	ldr	r3, [r7, #4]
10001540:	681b      	ldr	r3, [r3, #0]
10001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001544:	f023 010f 	bic.w	r1, r3, #15
10001548:	687b      	ldr	r3, [r7, #4]
1000154a:	699b      	ldr	r3, [r3, #24]
1000154c:	1e5a      	subs	r2, r3, #1
1000154e:	687b      	ldr	r3, [r7, #4]
10001550:	681b      	ldr	r3, [r3, #0]
10001552:	430a      	orrs	r2, r1
10001554:	631a      	str	r2, [r3, #48]	; 0x30
10001556:	e007      	b.n	10001568 <HAL_ADC_Init+0x26c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
10001558:	687b      	ldr	r3, [r7, #4]
1000155a:	681b      	ldr	r3, [r3, #0]
1000155c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
1000155e:	687b      	ldr	r3, [r7, #4]
10001560:	681b      	ldr	r3, [r3, #0]
10001562:	f022 020f 	bic.w	r2, r2, #15
10001566:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
10001568:	687b      	ldr	r3, [r7, #4]
1000156a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000156c:	f023 0303 	bic.w	r3, r3, #3
10001570:	f043 0201 	orr.w	r2, r3, #1
10001574:	687b      	ldr	r3, [r7, #4]
10001576:	655a      	str	r2, [r3, #84]	; 0x54
10001578:	e007      	b.n	1000158a <HAL_ADC_Init+0x28e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1000157a:	687b      	ldr	r3, [r7, #4]
1000157c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000157e:	f043 0210 	orr.w	r2, r3, #16
10001582:	687b      	ldr	r3, [r7, #4]
10001584:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
10001586:	2301      	movs	r3, #1
10001588:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
1000158a:	7ffb      	ldrb	r3, [r7, #31]
}
1000158c:	4618      	mov	r0, r3
1000158e:	3724      	adds	r7, #36	; 0x24
10001590:	46bd      	mov	sp, r7
10001592:	bd90      	pop	{r4, r7, pc}
10001594:	10020000 	.word	0x10020000
10001598:	053e2d63 	.word	0x053e2d63
1000159c:	48003000 	.word	0x48003000
100015a0:	48003100 	.word	0x48003100
100015a4:	48003300 	.word	0x48003300
100015a8:	fff0c003 	.word	0xfff0c003
100015ac:	fc00f81e 	.word	0xfc00f81e

100015b0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
100015b0:	b580      	push	{r7, lr}
100015b2:	b086      	sub	sp, #24
100015b4:	af00      	add	r7, sp, #0
100015b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
100015b8:	4857      	ldr	r0, [pc, #348]	; (10001718 <HAL_ADC_Start+0x168>)
100015ba:	f7ff fdad 	bl	10001118 <LL_ADC_GetMultimode>
100015be:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
100015c0:	687b      	ldr	r3, [r7, #4]
100015c2:	681b      	ldr	r3, [r3, #0]
100015c4:	4618      	mov	r0, r3
100015c6:	f7ff fe73 	bl	100012b0 <LL_ADC_REG_IsConversionOngoing>
100015ca:	4603      	mov	r3, r0
100015cc:	2b00      	cmp	r3, #0
100015ce:	f040 809c 	bne.w	1000170a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
100015d2:	687b      	ldr	r3, [r7, #4]
100015d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
100015d8:	2b01      	cmp	r3, #1
100015da:	d101      	bne.n	100015e0 <HAL_ADC_Start+0x30>
100015dc:	2302      	movs	r3, #2
100015de:	e097      	b.n	10001710 <HAL_ADC_Start+0x160>
100015e0:	687b      	ldr	r3, [r7, #4]
100015e2:	2201      	movs	r2, #1
100015e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
100015e8:	6878      	ldr	r0, [r7, #4]
100015ea:	f000 fc81 	bl	10001ef0 <ADC_Enable>
100015ee:	4603      	mov	r3, r0
100015f0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
100015f2:	7dfb      	ldrb	r3, [r7, #23]
100015f4:	2b00      	cmp	r3, #0
100015f6:	f040 8083 	bne.w	10001700 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
100015fa:	687b      	ldr	r3, [r7, #4]
100015fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100015fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
10001602:	f023 0301 	bic.w	r3, r3, #1
10001606:	f443 7280 	orr.w	r2, r3, #256	; 0x100
1000160a:	687b      	ldr	r3, [r7, #4]
1000160c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
1000160e:	687b      	ldr	r3, [r7, #4]
10001610:	681b      	ldr	r3, [r3, #0]
10001612:	4a42      	ldr	r2, [pc, #264]	; (1000171c <HAL_ADC_Start+0x16c>)
10001614:	4293      	cmp	r3, r2
10001616:	d002      	beq.n	1000161e <HAL_ADC_Start+0x6e>
10001618:	687b      	ldr	r3, [r7, #4]
1000161a:	681b      	ldr	r3, [r3, #0]
1000161c:	e000      	b.n	10001620 <HAL_ADC_Start+0x70>
1000161e:	4b40      	ldr	r3, [pc, #256]	; (10001720 <HAL_ADC_Start+0x170>)
10001620:	687a      	ldr	r2, [r7, #4]
10001622:	6812      	ldr	r2, [r2, #0]
10001624:	4293      	cmp	r3, r2
10001626:	d002      	beq.n	1000162e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
10001628:	693b      	ldr	r3, [r7, #16]
1000162a:	2b00      	cmp	r3, #0
1000162c:	d105      	bne.n	1000163a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
1000162e:	687b      	ldr	r3, [r7, #4]
10001630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001632:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
10001636:	687b      	ldr	r3, [r7, #4]
10001638:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1000163a:	687b      	ldr	r3, [r7, #4]
1000163c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000163e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
10001642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
10001646:	d106      	bne.n	10001656 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
10001648:	687b      	ldr	r3, [r7, #4]
1000164a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
1000164c:	f023 0206 	bic.w	r2, r3, #6
10001650:	687b      	ldr	r3, [r7, #4]
10001652:	659a      	str	r2, [r3, #88]	; 0x58
10001654:	e002      	b.n	1000165c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
10001656:	687b      	ldr	r3, [r7, #4]
10001658:	2200      	movs	r2, #0
1000165a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
1000165c:	687b      	ldr	r3, [r7, #4]
1000165e:	681b      	ldr	r3, [r3, #0]
10001660:	221c      	movs	r2, #28
10001662:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
10001664:	687b      	ldr	r3, [r7, #4]
10001666:	2200      	movs	r2, #0
10001668:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
1000166c:	687b      	ldr	r3, [r7, #4]
1000166e:	681b      	ldr	r3, [r3, #0]
10001670:	4a2a      	ldr	r2, [pc, #168]	; (1000171c <HAL_ADC_Start+0x16c>)
10001672:	4293      	cmp	r3, r2
10001674:	d002      	beq.n	1000167c <HAL_ADC_Start+0xcc>
10001676:	687b      	ldr	r3, [r7, #4]
10001678:	681b      	ldr	r3, [r3, #0]
1000167a:	e000      	b.n	1000167e <HAL_ADC_Start+0xce>
1000167c:	4b28      	ldr	r3, [pc, #160]	; (10001720 <HAL_ADC_Start+0x170>)
1000167e:	687a      	ldr	r2, [r7, #4]
10001680:	6812      	ldr	r2, [r2, #0]
10001682:	4293      	cmp	r3, r2
10001684:	d008      	beq.n	10001698 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
10001686:	693b      	ldr	r3, [r7, #16]
10001688:	2b00      	cmp	r3, #0
1000168a:	d005      	beq.n	10001698 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
1000168c:	693b      	ldr	r3, [r7, #16]
1000168e:	2b05      	cmp	r3, #5
10001690:	d002      	beq.n	10001698 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
10001692:	693b      	ldr	r3, [r7, #16]
10001694:	2b09      	cmp	r3, #9
10001696:	d114      	bne.n	100016c2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
10001698:	687b      	ldr	r3, [r7, #4]
1000169a:	681b      	ldr	r3, [r3, #0]
1000169c:	68db      	ldr	r3, [r3, #12]
1000169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
100016a2:	2b00      	cmp	r3, #0
100016a4:	d007      	beq.n	100016b6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
100016a6:	687b      	ldr	r3, [r7, #4]
100016a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100016aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
100016ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
100016b2:	687b      	ldr	r3, [r7, #4]
100016b4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
100016b6:	687b      	ldr	r3, [r7, #4]
100016b8:	681b      	ldr	r3, [r3, #0]
100016ba:	4618      	mov	r0, r3
100016bc:	f7ff fde4 	bl	10001288 <LL_ADC_REG_StartConversion>
100016c0:	e025      	b.n	1000170e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
100016c2:	687b      	ldr	r3, [r7, #4]
100016c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100016c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
100016ca:	687b      	ldr	r3, [r7, #4]
100016cc:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
100016ce:	687b      	ldr	r3, [r7, #4]
100016d0:	681b      	ldr	r3, [r3, #0]
100016d2:	4a12      	ldr	r2, [pc, #72]	; (1000171c <HAL_ADC_Start+0x16c>)
100016d4:	4293      	cmp	r3, r2
100016d6:	d002      	beq.n	100016de <HAL_ADC_Start+0x12e>
100016d8:	687b      	ldr	r3, [r7, #4]
100016da:	681b      	ldr	r3, [r3, #0]
100016dc:	e000      	b.n	100016e0 <HAL_ADC_Start+0x130>
100016de:	4b10      	ldr	r3, [pc, #64]	; (10001720 <HAL_ADC_Start+0x170>)
100016e0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
100016e2:	68fb      	ldr	r3, [r7, #12]
100016e4:	68db      	ldr	r3, [r3, #12]
100016e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
100016ea:	2b00      	cmp	r3, #0
100016ec:	d00f      	beq.n	1000170e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
100016ee:	687b      	ldr	r3, [r7, #4]
100016f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100016f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
100016f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
100016fa:	687b      	ldr	r3, [r7, #4]
100016fc:	655a      	str	r2, [r3, #84]	; 0x54
100016fe:	e006      	b.n	1000170e <HAL_ADC_Start+0x15e>
      LL_ADC_REG_StartConversion(hadc->Instance);
#endif
    }
    else
    {
      __HAL_UNLOCK(hadc);
10001700:	687b      	ldr	r3, [r7, #4]
10001702:	2200      	movs	r2, #0
10001704:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
10001708:	e001      	b.n	1000170e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
1000170a:	2302      	movs	r3, #2
1000170c:	75fb      	strb	r3, [r7, #23]
  }

  return tmp_hal_status;
1000170e:	7dfb      	ldrb	r3, [r7, #23]
}
10001710:	4618      	mov	r0, r3
10001712:	3718      	adds	r7, #24
10001714:	46bd      	mov	sp, r7
10001716:	bd80      	pop	{r7, pc}
10001718:	48003300 	.word	0x48003300
1000171c:	48003100 	.word	0x48003100
10001720:	48003000 	.word	0x48003000

10001724 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
10001724:	b580      	push	{r7, lr}
10001726:	b088      	sub	sp, #32
10001728:	af00      	add	r7, sp, #0
1000172a:	6078      	str	r0, [r7, #4]
1000172c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
1000172e:	4866      	ldr	r0, [pc, #408]	; (100018c8 <HAL_ADC_PollForConversion+0x1a4>)
10001730:	f7ff fcf2 	bl	10001118 <LL_ADC_GetMultimode>
10001734:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
10001736:	687b      	ldr	r3, [r7, #4]
10001738:	691b      	ldr	r3, [r3, #16]
1000173a:	2b08      	cmp	r3, #8
1000173c:	d102      	bne.n	10001744 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
1000173e:	2308      	movs	r3, #8
10001740:	61fb      	str	r3, [r7, #28]
10001742:	e02a      	b.n	1000179a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
10001744:	697b      	ldr	r3, [r7, #20]
10001746:	2b00      	cmp	r3, #0
10001748:	d005      	beq.n	10001756 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
1000174a:	697b      	ldr	r3, [r7, #20]
1000174c:	2b05      	cmp	r3, #5
1000174e:	d002      	beq.n	10001756 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
10001750:	697b      	ldr	r3, [r7, #20]
10001752:	2b09      	cmp	r3, #9
10001754:	d111      	bne.n	1000177a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
10001756:	687b      	ldr	r3, [r7, #4]
10001758:	681b      	ldr	r3, [r3, #0]
1000175a:	68db      	ldr	r3, [r3, #12]
1000175c:	f003 0301 	and.w	r3, r3, #1
10001760:	2b00      	cmp	r3, #0
10001762:	d007      	beq.n	10001774 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
10001764:	687b      	ldr	r3, [r7, #4]
10001766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001768:	f043 0220 	orr.w	r2, r3, #32
1000176c:	687b      	ldr	r3, [r7, #4]
1000176e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
10001770:	2301      	movs	r3, #1
10001772:	e0a4      	b.n	100018be <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
10001774:	2304      	movs	r3, #4
10001776:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
10001778:	e00f      	b.n	1000179a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
1000177a:	4853      	ldr	r0, [pc, #332]	; (100018c8 <HAL_ADC_PollForConversion+0x1a4>)
1000177c:	f7ff fcda 	bl	10001134 <LL_ADC_GetMultiDMATransfer>
10001780:	4603      	mov	r3, r0
10001782:	2b00      	cmp	r3, #0
10001784:	d007      	beq.n	10001796 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
10001786:	687b      	ldr	r3, [r7, #4]
10001788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000178a:	f043 0220 	orr.w	r2, r3, #32
1000178e:	687b      	ldr	r3, [r7, #4]
10001790:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
10001792:	2301      	movs	r3, #1
10001794:	e093      	b.n	100018be <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
10001796:	2304      	movs	r3, #4
10001798:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
1000179a:	f7ff fb19 	bl	10000dd0 <HAL_GetTick>
1000179e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
100017a0:	e021      	b.n	100017e6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
100017a2:	683b      	ldr	r3, [r7, #0]
100017a4:	f1b3 3fff 	cmp.w	r3, #4294967295
100017a8:	d01d      	beq.n	100017e6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
100017aa:	f7ff fb11 	bl	10000dd0 <HAL_GetTick>
100017ae:	4602      	mov	r2, r0
100017b0:	693b      	ldr	r3, [r7, #16]
100017b2:	1ad3      	subs	r3, r2, r3
100017b4:	683a      	ldr	r2, [r7, #0]
100017b6:	429a      	cmp	r2, r3
100017b8:	d302      	bcc.n	100017c0 <HAL_ADC_PollForConversion+0x9c>
100017ba:	683b      	ldr	r3, [r7, #0]
100017bc:	2b00      	cmp	r3, #0
100017be:	d112      	bne.n	100017e6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
100017c0:	687b      	ldr	r3, [r7, #4]
100017c2:	681b      	ldr	r3, [r3, #0]
100017c4:	681a      	ldr	r2, [r3, #0]
100017c6:	69fb      	ldr	r3, [r7, #28]
100017c8:	4013      	ands	r3, r2
100017ca:	2b00      	cmp	r3, #0
100017cc:	d10b      	bne.n	100017e6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
100017ce:	687b      	ldr	r3, [r7, #4]
100017d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100017d2:	f043 0204 	orr.w	r2, r3, #4
100017d6:	687b      	ldr	r3, [r7, #4]
100017d8:	655a      	str	r2, [r3, #84]	; 0x54

          __HAL_UNLOCK(hadc);
100017da:	687b      	ldr	r3, [r7, #4]
100017dc:	2200      	movs	r2, #0
100017de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
100017e2:	2303      	movs	r3, #3
100017e4:	e06b      	b.n	100018be <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
100017e6:	687b      	ldr	r3, [r7, #4]
100017e8:	681b      	ldr	r3, [r3, #0]
100017ea:	681a      	ldr	r2, [r3, #0]
100017ec:	69fb      	ldr	r3, [r7, #28]
100017ee:	4013      	ands	r3, r2
100017f0:	2b00      	cmp	r3, #0
100017f2:	d0d6      	beq.n	100017a2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
100017f4:	687b      	ldr	r3, [r7, #4]
100017f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100017f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
100017fc:	687b      	ldr	r3, [r7, #4]
100017fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
10001800:	687b      	ldr	r3, [r7, #4]
10001802:	681b      	ldr	r3, [r3, #0]
10001804:	4618      	mov	r0, r3
10001806:	f7ff fbf9 	bl	10000ffc <LL_ADC_REG_IsTriggerSourceSWStart>
1000180a:	4603      	mov	r3, r0
1000180c:	2b00      	cmp	r3, #0
1000180e:	d01c      	beq.n	1000184a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
10001810:	687b      	ldr	r3, [r7, #4]
10001812:	7d5b      	ldrb	r3, [r3, #21]
10001814:	2b00      	cmp	r3, #0
10001816:	d118      	bne.n	1000184a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
10001818:	687b      	ldr	r3, [r7, #4]
1000181a:	681b      	ldr	r3, [r3, #0]
1000181c:	681b      	ldr	r3, [r3, #0]
1000181e:	f003 0308 	and.w	r3, r3, #8
10001822:	2b08      	cmp	r3, #8
10001824:	d111      	bne.n	1000184a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
10001826:	687b      	ldr	r3, [r7, #4]
10001828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000182a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
1000182e:	687b      	ldr	r3, [r7, #4]
10001830:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
10001832:	687b      	ldr	r3, [r7, #4]
10001834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001836:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
1000183a:	2b00      	cmp	r3, #0
1000183c:	d105      	bne.n	1000184a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
1000183e:	687b      	ldr	r3, [r7, #4]
10001840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001842:	f043 0201 	orr.w	r2, r3, #1
10001846:	687b      	ldr	r3, [r7, #4]
10001848:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
1000184a:	687b      	ldr	r3, [r7, #4]
1000184c:	681b      	ldr	r3, [r3, #0]
1000184e:	4a1f      	ldr	r2, [pc, #124]	; (100018cc <HAL_ADC_PollForConversion+0x1a8>)
10001850:	4293      	cmp	r3, r2
10001852:	d002      	beq.n	1000185a <HAL_ADC_PollForConversion+0x136>
10001854:	687b      	ldr	r3, [r7, #4]
10001856:	681b      	ldr	r3, [r3, #0]
10001858:	e000      	b.n	1000185c <HAL_ADC_PollForConversion+0x138>
1000185a:	4b1d      	ldr	r3, [pc, #116]	; (100018d0 <HAL_ADC_PollForConversion+0x1ac>)
1000185c:	687a      	ldr	r2, [r7, #4]
1000185e:	6812      	ldr	r2, [r2, #0]
10001860:	4293      	cmp	r3, r2
10001862:	d008      	beq.n	10001876 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
10001864:	697b      	ldr	r3, [r7, #20]
10001866:	2b00      	cmp	r3, #0
10001868:	d005      	beq.n	10001876 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
1000186a:	697b      	ldr	r3, [r7, #20]
1000186c:	2b05      	cmp	r3, #5
1000186e:	d002      	beq.n	10001876 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
10001870:	697b      	ldr	r3, [r7, #20]
10001872:	2b09      	cmp	r3, #9
10001874:	d104      	bne.n	10001880 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
10001876:	687b      	ldr	r3, [r7, #4]
10001878:	681b      	ldr	r3, [r3, #0]
1000187a:	68db      	ldr	r3, [r3, #12]
1000187c:	61bb      	str	r3, [r7, #24]
1000187e:	e00c      	b.n	1000189a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
10001880:	687b      	ldr	r3, [r7, #4]
10001882:	681b      	ldr	r3, [r3, #0]
10001884:	4a11      	ldr	r2, [pc, #68]	; (100018cc <HAL_ADC_PollForConversion+0x1a8>)
10001886:	4293      	cmp	r3, r2
10001888:	d002      	beq.n	10001890 <HAL_ADC_PollForConversion+0x16c>
1000188a:	687b      	ldr	r3, [r7, #4]
1000188c:	681b      	ldr	r3, [r3, #0]
1000188e:	e000      	b.n	10001892 <HAL_ADC_PollForConversion+0x16e>
10001890:	4b0f      	ldr	r3, [pc, #60]	; (100018d0 <HAL_ADC_PollForConversion+0x1ac>)
10001892:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
10001894:	68fb      	ldr	r3, [r7, #12]
10001896:	68db      	ldr	r3, [r3, #12]
10001898:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
1000189a:	69fb      	ldr	r3, [r7, #28]
1000189c:	2b08      	cmp	r3, #8
1000189e:	d104      	bne.n	100018aa <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
100018a0:	687b      	ldr	r3, [r7, #4]
100018a2:	681b      	ldr	r3, [r3, #0]
100018a4:	2208      	movs	r2, #8
100018a6:	601a      	str	r2, [r3, #0]
100018a8:	e008      	b.n	100018bc <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
100018aa:	69bb      	ldr	r3, [r7, #24]
100018ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
100018b0:	2b00      	cmp	r3, #0
100018b2:	d103      	bne.n	100018bc <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
100018b4:	687b      	ldr	r3, [r7, #4]
100018b6:	681b      	ldr	r3, [r3, #0]
100018b8:	220c      	movs	r2, #12
100018ba:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
100018bc:	2300      	movs	r3, #0
}
100018be:	4618      	mov	r0, r3
100018c0:	3720      	adds	r7, #32
100018c2:	46bd      	mov	sp, r7
100018c4:	bd80      	pop	{r7, pc}
100018c6:	bf00      	nop
100018c8:	48003300 	.word	0x48003300
100018cc:	48003100 	.word	0x48003100
100018d0:	48003000 	.word	0x48003000

100018d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
100018d4:	b480      	push	{r7}
100018d6:	b083      	sub	sp, #12
100018d8:	af00      	add	r7, sp, #0
100018da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
100018dc:	687b      	ldr	r3, [r7, #4]
100018de:	681b      	ldr	r3, [r3, #0]
100018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
100018e2:	4618      	mov	r0, r3
100018e4:	370c      	adds	r7, #12
100018e6:	46bd      	mov	sp, r7
100018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
100018ec:	4770      	bx	lr
	...

100018f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
100018f0:	b590      	push	{r4, r7, lr}
100018f2:	b0a1      	sub	sp, #132	; 0x84
100018f4:	af00      	add	r7, sp, #0
100018f6:	6078      	str	r0, [r7, #4]
100018f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
100018fa:	2300      	movs	r3, #0
100018fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
10001900:	2300      	movs	r3, #0
10001902:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((pConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (pConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
10001904:	683b      	ldr	r3, [r7, #0]
10001906:	68db      	ldr	r3, [r3, #12]
10001908:	4a9a      	ldr	r2, [pc, #616]	; (10001b74 <HAL_ADC_ConfigChannel+0x284>)
1000190a:	4293      	cmp	r3, r2
      assert_param(IS_ADC2_DIFF_CHANNEL(pConfig->Channel));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
1000190c:	687b      	ldr	r3, [r7, #4]
1000190e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
10001912:	2b01      	cmp	r3, #1
10001914:	d101      	bne.n	1000191a <HAL_ADC_ConfigChannel+0x2a>
10001916:	2302      	movs	r3, #2
10001918:	e2d4      	b.n	10001ec4 <HAL_ADC_ConfigChannel+0x5d4>
1000191a:	687b      	ldr	r3, [r7, #4]
1000191c:	2201      	movs	r2, #1
1000191e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
10001922:	687b      	ldr	r3, [r7, #4]
10001924:	681b      	ldr	r3, [r3, #0]
10001926:	4618      	mov	r0, r3
10001928:	f7ff fcc2 	bl	100012b0 <LL_ADC_REG_IsConversionOngoing>
1000192c:	4603      	mov	r3, r0
1000192e:	2b00      	cmp	r3, #0
10001930:	f040 82b9 	bne.w	10001ea6 <HAL_ADC_ConfigChannel+0x5b6>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
10001934:	683b      	ldr	r3, [r7, #0]
10001936:	681b      	ldr	r3, [r3, #0]
10001938:	f3c3 0313 	ubfx	r3, r3, #0, #20
1000193c:	2b00      	cmp	r3, #0
1000193e:	d108      	bne.n	10001952 <HAL_ADC_ConfigChannel+0x62>
10001940:	683b      	ldr	r3, [r7, #0]
10001942:	681b      	ldr	r3, [r3, #0]
10001944:	0e9b      	lsrs	r3, r3, #26
10001946:	f003 031f 	and.w	r3, r3, #31
1000194a:	2201      	movs	r2, #1
1000194c:	fa02 f303 	lsl.w	r3, r2, r3
10001950:	e016      	b.n	10001980 <HAL_ADC_ConfigChannel+0x90>
10001952:	683b      	ldr	r3, [r7, #0]
10001954:	681b      	ldr	r3, [r3, #0]
10001956:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
10001958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
1000195a:	fa93 f3a3 	rbit	r3, r3
1000195e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
10001960:	6e3b      	ldr	r3, [r7, #96]	; 0x60
10001962:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
10001964:	6ebb      	ldr	r3, [r7, #104]	; 0x68
10001966:	2b00      	cmp	r3, #0
10001968:	d101      	bne.n	1000196e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
1000196a:	2320      	movs	r3, #32
1000196c:	e003      	b.n	10001976 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
1000196e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
10001970:	fab3 f383 	clz	r3, r3
10001974:	b2db      	uxtb	r3, r3
10001976:	f003 031f 	and.w	r3, r3, #31
1000197a:	2201      	movs	r2, #1
1000197c:	fa02 f303 	lsl.w	r3, r2, r3
10001980:	687a      	ldr	r2, [r7, #4]
10001982:	6812      	ldr	r2, [r2, #0]
10001984:	69d1      	ldr	r1, [r2, #28]
10001986:	687a      	ldr	r2, [r7, #4]
10001988:	6812      	ldr	r2, [r2, #0]
1000198a:	430b      	orrs	r3, r1
1000198c:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
1000198e:	687b      	ldr	r3, [r7, #4]
10001990:	6818      	ldr	r0, [r3, #0]
10001992:	683b      	ldr	r3, [r7, #0]
10001994:	6859      	ldr	r1, [r3, #4]
10001996:	683b      	ldr	r3, [r7, #0]
10001998:	681b      	ldr	r3, [r3, #0]
1000199a:	461a      	mov	r2, r3
1000199c:	f7ff fb41 	bl	10001022 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
100019a0:	687b      	ldr	r3, [r7, #4]
100019a2:	681b      	ldr	r3, [r3, #0]
100019a4:	4618      	mov	r0, r3
100019a6:	f7ff fc83 	bl	100012b0 <LL_ADC_REG_IsConversionOngoing>
100019aa:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
100019ac:	687b      	ldr	r3, [r7, #4]
100019ae:	681b      	ldr	r3, [r3, #0]
100019b0:	4618      	mov	r0, r3
100019b2:	f7ff fc90 	bl	100012d6 <LL_ADC_INJ_IsConversionOngoing>
100019b6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
100019b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
100019ba:	2b00      	cmp	r3, #0
100019bc:	f040 80a0 	bne.w	10001b00 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
100019c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
100019c2:	2b00      	cmp	r3, #0
100019c4:	f040 809c 	bne.w	10001b00 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
100019c8:	687b      	ldr	r3, [r7, #4]
100019ca:	6818      	ldr	r0, [r3, #0]
100019cc:	683b      	ldr	r3, [r7, #0]
100019ce:	6819      	ldr	r1, [r3, #0]
100019d0:	683b      	ldr	r3, [r7, #0]
100019d2:	689b      	ldr	r3, [r3, #8]
100019d4:	461a      	mov	r2, r3
100019d6:	f7ff fb50 	bl	1000107a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
100019da:	687b      	ldr	r3, [r7, #4]
100019dc:	681b      	ldr	r3, [r3, #0]
100019de:	68db      	ldr	r3, [r3, #12]
100019e0:	f003 0310 	and.w	r3, r3, #16
100019e4:	2b00      	cmp	r3, #0
100019e6:	d10b      	bne.n	10001a00 <HAL_ADC_ConfigChannel+0x110>
100019e8:	683b      	ldr	r3, [r7, #0]
100019ea:	695a      	ldr	r2, [r3, #20]
100019ec:	687b      	ldr	r3, [r7, #4]
100019ee:	681b      	ldr	r3, [r3, #0]
100019f0:	68db      	ldr	r3, [r3, #12]
100019f2:	089b      	lsrs	r3, r3, #2
100019f4:	f003 0307 	and.w	r3, r3, #7
100019f8:	005b      	lsls	r3, r3, #1
100019fa:	fa02 f303 	lsl.w	r3, r2, r3
100019fe:	e00a      	b.n	10001a16 <HAL_ADC_ConfigChannel+0x126>
10001a00:	683b      	ldr	r3, [r7, #0]
10001a02:	695a      	ldr	r2, [r3, #20]
10001a04:	687b      	ldr	r3, [r7, #4]
10001a06:	681b      	ldr	r3, [r3, #0]
10001a08:	68db      	ldr	r3, [r3, #12]
10001a0a:	089b      	lsrs	r3, r3, #2
10001a0c:	f003 0304 	and.w	r3, r3, #4
10001a10:	005b      	lsls	r3, r3, #1
10001a12:	fa02 f303 	lsl.w	r3, r2, r3
10001a16:	673b      	str	r3, [r7, #112]	; 0x70

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
10001a18:	683b      	ldr	r3, [r7, #0]
10001a1a:	691b      	ldr	r3, [r3, #16]
10001a1c:	2b04      	cmp	r3, #4
10001a1e:	d027      	beq.n	10001a70 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
10001a20:	687b      	ldr	r3, [r7, #4]
10001a22:	6818      	ldr	r0, [r3, #0]
10001a24:	683b      	ldr	r3, [r7, #0]
10001a26:	6919      	ldr	r1, [r3, #16]
10001a28:	683b      	ldr	r3, [r7, #0]
10001a2a:	681a      	ldr	r2, [r3, #0]
10001a2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
10001a2e:	f7ff fa91 	bl	10000f54 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber, (pConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
10001a32:	687b      	ldr	r3, [r7, #4]
10001a34:	6818      	ldr	r0, [r3, #0]
10001a36:	683b      	ldr	r3, [r7, #0]
10001a38:	6919      	ldr	r1, [r3, #16]
10001a3a:	683b      	ldr	r3, [r7, #0]
10001a3c:	7e5b      	ldrb	r3, [r3, #25]
10001a3e:	2b01      	cmp	r3, #1
10001a40:	d102      	bne.n	10001a48 <HAL_ADC_ConfigChannel+0x158>
10001a42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
10001a46:	e000      	b.n	10001a4a <HAL_ADC_ConfigChannel+0x15a>
10001a48:	2300      	movs	r3, #0
10001a4a:	461a      	mov	r2, r3
10001a4c:	f7ff fabb 	bl	10000fc6 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, pConfig->OffsetNumber, (pConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
10001a50:	687b      	ldr	r3, [r7, #4]
10001a52:	6818      	ldr	r0, [r3, #0]
10001a54:	683b      	ldr	r3, [r7, #0]
10001a56:	6919      	ldr	r1, [r3, #16]
10001a58:	683b      	ldr	r3, [r7, #0]
10001a5a:	7e1b      	ldrb	r3, [r3, #24]
10001a5c:	2b01      	cmp	r3, #1
10001a5e:	d102      	bne.n	10001a66 <HAL_ADC_ConfigChannel+0x176>
10001a60:	f44f 6300 	mov.w	r3, #2048	; 0x800
10001a64:	e000      	b.n	10001a68 <HAL_ADC_ConfigChannel+0x178>
10001a66:	2300      	movs	r3, #0
10001a68:	461a      	mov	r2, r3
10001a6a:	f7ff fa93 	bl	10000f94 <LL_ADC_SetDataRightShift>
10001a6e:	e047      	b.n	10001b00 <HAL_ADC_ConfigChannel+0x210>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
10001a70:	687b      	ldr	r3, [r7, #4]
10001a72:	681b      	ldr	r3, [r3, #0]
10001a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
10001a76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
10001a7a:	683b      	ldr	r3, [r7, #0]
10001a7c:	681b      	ldr	r3, [r3, #0]
10001a7e:	069b      	lsls	r3, r3, #26
10001a80:	429a      	cmp	r2, r3
10001a82:	d107      	bne.n	10001a94 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
10001a84:	687b      	ldr	r3, [r7, #4]
10001a86:	681b      	ldr	r3, [r3, #0]
10001a88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
10001a8a:	687b      	ldr	r3, [r7, #4]
10001a8c:	681b      	ldr	r3, [r3, #0]
10001a8e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
10001a92:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
10001a94:	687b      	ldr	r3, [r7, #4]
10001a96:	681b      	ldr	r3, [r3, #0]
10001a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
10001a9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
10001a9e:	683b      	ldr	r3, [r7, #0]
10001aa0:	681b      	ldr	r3, [r3, #0]
10001aa2:	069b      	lsls	r3, r3, #26
10001aa4:	429a      	cmp	r2, r3
10001aa6:	d107      	bne.n	10001ab8 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
10001aa8:	687b      	ldr	r3, [r7, #4]
10001aaa:	681b      	ldr	r3, [r3, #0]
10001aac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
10001aae:	687b      	ldr	r3, [r7, #4]
10001ab0:	681b      	ldr	r3, [r3, #0]
10001ab2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
10001ab6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
10001ab8:	687b      	ldr	r3, [r7, #4]
10001aba:	681b      	ldr	r3, [r3, #0]
10001abc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
10001abe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
10001ac2:	683b      	ldr	r3, [r7, #0]
10001ac4:	681b      	ldr	r3, [r3, #0]
10001ac6:	069b      	lsls	r3, r3, #26
10001ac8:	429a      	cmp	r2, r3
10001aca:	d107      	bne.n	10001adc <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
10001acc:	687b      	ldr	r3, [r7, #4]
10001ace:	681b      	ldr	r3, [r3, #0]
10001ad0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
10001ad2:	687b      	ldr	r3, [r7, #4]
10001ad4:	681b      	ldr	r3, [r3, #0]
10001ad6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
10001ada:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
10001adc:	687b      	ldr	r3, [r7, #4]
10001ade:	681b      	ldr	r3, [r3, #0]
10001ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
10001ae2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
10001ae6:	683b      	ldr	r3, [r7, #0]
10001ae8:	681b      	ldr	r3, [r3, #0]
10001aea:	069b      	lsls	r3, r3, #26
10001aec:	429a      	cmp	r2, r3
10001aee:	d107      	bne.n	10001b00 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
10001af0:	687b      	ldr	r3, [r7, #4]
10001af2:	681b      	ldr	r3, [r3, #0]
10001af4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
10001af6:	687b      	ldr	r3, [r7, #4]
10001af8:	681b      	ldr	r3, [r3, #0]
10001afa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
10001afe:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor/VddCore        */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
10001b00:	687b      	ldr	r3, [r7, #4]
10001b02:	681b      	ldr	r3, [r3, #0]
10001b04:	4618      	mov	r0, r3
10001b06:	f7ff fb99 	bl	1000123c <LL_ADC_IsEnabled>
10001b0a:	4603      	mov	r3, r0
10001b0c:	2b00      	cmp	r3, #0
10001b0e:	f040 81d3 	bne.w	10001eb8 <HAL_ADC_ConfigChannel+0x5c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
10001b12:	687b      	ldr	r3, [r7, #4]
10001b14:	6818      	ldr	r0, [r3, #0]
10001b16:	683b      	ldr	r3, [r7, #0]
10001b18:	6819      	ldr	r1, [r3, #0]
10001b1a:	683b      	ldr	r3, [r7, #0]
10001b1c:	68db      	ldr	r3, [r3, #12]
10001b1e:	461a      	mov	r2, r3
10001b20:	f7ff fad6 	bl	100010d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
10001b24:	683b      	ldr	r3, [r7, #0]
10001b26:	68db      	ldr	r3, [r3, #12]
10001b28:	4a12      	ldr	r2, [pc, #72]	; (10001b74 <HAL_ADC_ConfigChannel+0x284>)
10001b2a:	4293      	cmp	r3, r2
10001b2c:	f040 8130 	bne.w	10001d90 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
10001b30:	687b      	ldr	r3, [r7, #4]
10001b32:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) + 1UL) & 0x1FUL)),
10001b34:	683b      	ldr	r3, [r7, #0]
10001b36:	681b      	ldr	r3, [r3, #0]
10001b38:	f3c3 0313 	ubfx	r3, r3, #0, #20
10001b3c:	2b00      	cmp	r3, #0
10001b3e:	d10b      	bne.n	10001b58 <HAL_ADC_ConfigChannel+0x268>
10001b40:	683b      	ldr	r3, [r7, #0]
10001b42:	681b      	ldr	r3, [r3, #0]
10001b44:	0e9b      	lsrs	r3, r3, #26
10001b46:	3301      	adds	r3, #1
10001b48:	f003 031f 	and.w	r3, r3, #31
10001b4c:	2b09      	cmp	r3, #9
10001b4e:	bf94      	ite	ls
10001b50:	2301      	movls	r3, #1
10001b52:	2300      	movhi	r3, #0
10001b54:	b2db      	uxtb	r3, r3
10001b56:	e01b      	b.n	10001b90 <HAL_ADC_ConfigChannel+0x2a0>
10001b58:	683b      	ldr	r3, [r7, #0]
10001b5a:	681b      	ldr	r3, [r3, #0]
10001b5c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
10001b5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
10001b60:	fa93 f3a3 	rbit	r3, r3
10001b64:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
10001b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10001b68:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
10001b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
10001b6c:	2b00      	cmp	r3, #0
10001b6e:	d103      	bne.n	10001b78 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
10001b70:	2320      	movs	r3, #32
10001b72:	e005      	b.n	10001b80 <HAL_ADC_ConfigChannel+0x290>
10001b74:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
10001b78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
10001b7a:	fab3 f383 	clz	r3, r3
10001b7e:	b2db      	uxtb	r3, r3
10001b80:	3301      	adds	r3, #1
10001b82:	f003 031f 	and.w	r3, r3, #31
10001b86:	2b09      	cmp	r3, #9
10001b88:	bf94      	ite	ls
10001b8a:	2301      	movls	r3, #1
10001b8c:	2300      	movhi	r3, #0
10001b8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
10001b90:	2b00      	cmp	r3, #0
10001b92:	d079      	beq.n	10001c88 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) + 1UL) & 0x1FUL)),
10001b94:	683b      	ldr	r3, [r7, #0]
10001b96:	681b      	ldr	r3, [r3, #0]
10001b98:	f3c3 0313 	ubfx	r3, r3, #0, #20
10001b9c:	2b00      	cmp	r3, #0
10001b9e:	d107      	bne.n	10001bb0 <HAL_ADC_ConfigChannel+0x2c0>
10001ba0:	683b      	ldr	r3, [r7, #0]
10001ba2:	681b      	ldr	r3, [r3, #0]
10001ba4:	0e9b      	lsrs	r3, r3, #26
10001ba6:	3301      	adds	r3, #1
10001ba8:	069b      	lsls	r3, r3, #26
10001baa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
10001bae:	e015      	b.n	10001bdc <HAL_ADC_ConfigChannel+0x2ec>
10001bb0:	683b      	ldr	r3, [r7, #0]
10001bb2:	681b      	ldr	r3, [r3, #0]
10001bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
10001bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10001bb8:	fa93 f3a3 	rbit	r3, r3
10001bbc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
10001bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10001bc0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
10001bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
10001bc4:	2b00      	cmp	r3, #0
10001bc6:	d101      	bne.n	10001bcc <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
10001bc8:	2320      	movs	r3, #32
10001bca:	e003      	b.n	10001bd4 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
10001bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
10001bce:	fab3 f383 	clz	r3, r3
10001bd2:	b2db      	uxtb	r3, r3
10001bd4:	3301      	adds	r3, #1
10001bd6:	069b      	lsls	r3, r3, #26
10001bd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
10001bdc:	683b      	ldr	r3, [r7, #0]
10001bde:	681b      	ldr	r3, [r3, #0]
10001be0:	f3c3 0313 	ubfx	r3, r3, #0, #20
10001be4:	2b00      	cmp	r3, #0
10001be6:	d109      	bne.n	10001bfc <HAL_ADC_ConfigChannel+0x30c>
10001be8:	683b      	ldr	r3, [r7, #0]
10001bea:	681b      	ldr	r3, [r3, #0]
10001bec:	0e9b      	lsrs	r3, r3, #26
10001bee:	3301      	adds	r3, #1
10001bf0:	f003 031f 	and.w	r3, r3, #31
10001bf4:	2101      	movs	r1, #1
10001bf6:	fa01 f303 	lsl.w	r3, r1, r3
10001bfa:	e017      	b.n	10001c2c <HAL_ADC_ConfigChannel+0x33c>
10001bfc:	683b      	ldr	r3, [r7, #0]
10001bfe:	681b      	ldr	r3, [r3, #0]
10001c00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
10001c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10001c04:	fa93 f3a3 	rbit	r3, r3
10001c08:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
10001c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10001c0c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
10001c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10001c10:	2b00      	cmp	r3, #0
10001c12:	d101      	bne.n	10001c18 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
10001c14:	2320      	movs	r3, #32
10001c16:	e003      	b.n	10001c20 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
10001c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10001c1a:	fab3 f383 	clz	r3, r3
10001c1e:	b2db      	uxtb	r3, r3
10001c20:	3301      	adds	r3, #1
10001c22:	f003 031f 	and.w	r3, r3, #31
10001c26:	2101      	movs	r1, #1
10001c28:	fa01 f303 	lsl.w	r3, r1, r3
10001c2c:	ea42 0103 	orr.w	r1, r2, r3
10001c30:	683b      	ldr	r3, [r7, #0]
10001c32:	681b      	ldr	r3, [r3, #0]
10001c34:	f3c3 0313 	ubfx	r3, r3, #0, #20
10001c38:	2b00      	cmp	r3, #0
10001c3a:	d10a      	bne.n	10001c52 <HAL_ADC_ConfigChannel+0x362>
10001c3c:	683b      	ldr	r3, [r7, #0]
10001c3e:	681b      	ldr	r3, [r3, #0]
10001c40:	0e9b      	lsrs	r3, r3, #26
10001c42:	3301      	adds	r3, #1
10001c44:	f003 021f 	and.w	r2, r3, #31
10001c48:	4613      	mov	r3, r2
10001c4a:	005b      	lsls	r3, r3, #1
10001c4c:	4413      	add	r3, r2
10001c4e:	051b      	lsls	r3, r3, #20
10001c50:	e018      	b.n	10001c84 <HAL_ADC_ConfigChannel+0x394>
10001c52:	683b      	ldr	r3, [r7, #0]
10001c54:	681b      	ldr	r3, [r3, #0]
10001c56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
10001c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10001c5a:	fa93 f3a3 	rbit	r3, r3
10001c5e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
10001c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10001c62:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
10001c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10001c66:	2b00      	cmp	r3, #0
10001c68:	d101      	bne.n	10001c6e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
10001c6a:	2320      	movs	r3, #32
10001c6c:	e003      	b.n	10001c76 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
10001c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10001c70:	fab3 f383 	clz	r3, r3
10001c74:	b2db      	uxtb	r3, r3
10001c76:	3301      	adds	r3, #1
10001c78:	f003 021f 	and.w	r2, r3, #31
10001c7c:	4613      	mov	r3, r2
10001c7e:	005b      	lsls	r3, r3, #1
10001c80:	4413      	add	r3, r2
10001c82:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
10001c84:	430b      	orrs	r3, r1
10001c86:	e07e      	b.n	10001d86 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) + 1UL) & 0x1FUL)),
10001c88:	683b      	ldr	r3, [r7, #0]
10001c8a:	681b      	ldr	r3, [r3, #0]
10001c8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
10001c90:	2b00      	cmp	r3, #0
10001c92:	d107      	bne.n	10001ca4 <HAL_ADC_ConfigChannel+0x3b4>
10001c94:	683b      	ldr	r3, [r7, #0]
10001c96:	681b      	ldr	r3, [r3, #0]
10001c98:	0e9b      	lsrs	r3, r3, #26
10001c9a:	3301      	adds	r3, #1
10001c9c:	069b      	lsls	r3, r3, #26
10001c9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
10001ca2:	e015      	b.n	10001cd0 <HAL_ADC_ConfigChannel+0x3e0>
10001ca4:	683b      	ldr	r3, [r7, #0]
10001ca6:	681b      	ldr	r3, [r3, #0]
10001ca8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
10001caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
10001cac:	fa93 f3a3 	rbit	r3, r3
10001cb0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
10001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
10001cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10001cb8:	2b00      	cmp	r3, #0
10001cba:	d101      	bne.n	10001cc0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
10001cbc:	2320      	movs	r3, #32
10001cbe:	e003      	b.n	10001cc8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
10001cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10001cc2:	fab3 f383 	clz	r3, r3
10001cc6:	b2db      	uxtb	r3, r3
10001cc8:	3301      	adds	r3, #1
10001cca:	069b      	lsls	r3, r3, #26
10001ccc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
10001cd0:	683b      	ldr	r3, [r7, #0]
10001cd2:	681b      	ldr	r3, [r3, #0]
10001cd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
10001cd8:	2b00      	cmp	r3, #0
10001cda:	d109      	bne.n	10001cf0 <HAL_ADC_ConfigChannel+0x400>
10001cdc:	683b      	ldr	r3, [r7, #0]
10001cde:	681b      	ldr	r3, [r3, #0]
10001ce0:	0e9b      	lsrs	r3, r3, #26
10001ce2:	3301      	adds	r3, #1
10001ce4:	f003 031f 	and.w	r3, r3, #31
10001ce8:	2101      	movs	r1, #1
10001cea:	fa01 f303 	lsl.w	r3, r1, r3
10001cee:	e017      	b.n	10001d20 <HAL_ADC_ConfigChannel+0x430>
10001cf0:	683b      	ldr	r3, [r7, #0]
10001cf2:	681b      	ldr	r3, [r3, #0]
10001cf4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
10001cf6:	69fb      	ldr	r3, [r7, #28]
10001cf8:	fa93 f3a3 	rbit	r3, r3
10001cfc:	61bb      	str	r3, [r7, #24]
  return result;
10001cfe:	69bb      	ldr	r3, [r7, #24]
10001d00:	623b      	str	r3, [r7, #32]
  if (value == 0U)
10001d02:	6a3b      	ldr	r3, [r7, #32]
10001d04:	2b00      	cmp	r3, #0
10001d06:	d101      	bne.n	10001d0c <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
10001d08:	2320      	movs	r3, #32
10001d0a:	e003      	b.n	10001d14 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
10001d0c:	6a3b      	ldr	r3, [r7, #32]
10001d0e:	fab3 f383 	clz	r3, r3
10001d12:	b2db      	uxtb	r3, r3
10001d14:	3301      	adds	r3, #1
10001d16:	f003 031f 	and.w	r3, r3, #31
10001d1a:	2101      	movs	r1, #1
10001d1c:	fa01 f303 	lsl.w	r3, r1, r3
10001d20:	ea42 0103 	orr.w	r1, r2, r3
10001d24:	683b      	ldr	r3, [r7, #0]
10001d26:	681b      	ldr	r3, [r3, #0]
10001d28:	f3c3 0313 	ubfx	r3, r3, #0, #20
10001d2c:	2b00      	cmp	r3, #0
10001d2e:	d10d      	bne.n	10001d4c <HAL_ADC_ConfigChannel+0x45c>
10001d30:	683b      	ldr	r3, [r7, #0]
10001d32:	681b      	ldr	r3, [r3, #0]
10001d34:	0e9b      	lsrs	r3, r3, #26
10001d36:	3301      	adds	r3, #1
10001d38:	f003 021f 	and.w	r2, r3, #31
10001d3c:	4613      	mov	r3, r2
10001d3e:	005b      	lsls	r3, r3, #1
10001d40:	4413      	add	r3, r2
10001d42:	3b1e      	subs	r3, #30
10001d44:	051b      	lsls	r3, r3, #20
10001d46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
10001d4a:	e01b      	b.n	10001d84 <HAL_ADC_ConfigChannel+0x494>
10001d4c:	683b      	ldr	r3, [r7, #0]
10001d4e:	681b      	ldr	r3, [r3, #0]
10001d50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
10001d52:	693b      	ldr	r3, [r7, #16]
10001d54:	fa93 f3a3 	rbit	r3, r3
10001d58:	60fb      	str	r3, [r7, #12]
  return result;
10001d5a:	68fb      	ldr	r3, [r7, #12]
10001d5c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
10001d5e:	697b      	ldr	r3, [r7, #20]
10001d60:	2b00      	cmp	r3, #0
10001d62:	d101      	bne.n	10001d68 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
10001d64:	2320      	movs	r3, #32
10001d66:	e003      	b.n	10001d70 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
10001d68:	697b      	ldr	r3, [r7, #20]
10001d6a:	fab3 f383 	clz	r3, r3
10001d6e:	b2db      	uxtb	r3, r3
10001d70:	3301      	adds	r3, #1
10001d72:	f003 021f 	and.w	r2, r3, #31
10001d76:	4613      	mov	r3, r2
10001d78:	005b      	lsls	r3, r3, #1
10001d7a:	4413      	add	r3, r2
10001d7c:	3b1e      	subs	r3, #30
10001d7e:	051b      	lsls	r3, r3, #20
10001d80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
10001d84:	430b      	orrs	r3, r1
10001d86:	683a      	ldr	r2, [r7, #0]
10001d88:	6892      	ldr	r2, [r2, #8]
10001d8a:	4619      	mov	r1, r3
10001d8c:	f7ff f975 	bl	1000107a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
10001d90:	683b      	ldr	r3, [r7, #0]
10001d92:	681b      	ldr	r3, [r3, #0]
10001d94:	2b00      	cmp	r3, #0
10001d96:	f280 808f 	bge.w	10001eb8 <HAL_ADC_ConfigChannel+0x5c8>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
10001d9a:	484c      	ldr	r0, [pc, #304]	; (10001ecc <HAL_ADC_ConfigChannel+0x5dc>)
10001d9c:	f7ff f8cc 	bl	10000f38 <LL_ADC_GetCommonPathInternalCh>
10001da0:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
10001da2:	484b      	ldr	r0, [pc, #300]	; (10001ed0 <HAL_ADC_ConfigChannel+0x5e0>)
10001da4:	f7ff fa4a 	bl	1000123c <LL_ADC_IsEnabled>
10001da8:	4604      	mov	r4, r0
10001daa:	484a      	ldr	r0, [pc, #296]	; (10001ed4 <HAL_ADC_ConfigChannel+0x5e4>)
10001dac:	f7ff fa46 	bl	1000123c <LL_ADC_IsEnabled>
10001db0:	4603      	mov	r3, r0
10001db2:	4323      	orrs	r3, r4
10001db4:	2b00      	cmp	r3, #0
10001db6:	d16c      	bne.n	10001e92 <HAL_ADC_ConfigChannel+0x5a2>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
10001db8:	683b      	ldr	r3, [r7, #0]
10001dba:	681b      	ldr	r3, [r3, #0]
10001dbc:	4a46      	ldr	r2, [pc, #280]	; (10001ed8 <HAL_ADC_ConfigChannel+0x5e8>)
10001dbe:	4293      	cmp	r3, r2
10001dc0:	d122      	bne.n	10001e08 <HAL_ADC_ConfigChannel+0x518>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
10001dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10001dc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
10001dc8:	2b00      	cmp	r3, #0
10001dca:	d11d      	bne.n	10001e08 <HAL_ADC_ConfigChannel+0x518>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
10001dcc:	687b      	ldr	r3, [r7, #4]
10001dce:	681b      	ldr	r3, [r3, #0]
10001dd0:	4a40      	ldr	r2, [pc, #256]	; (10001ed4 <HAL_ADC_ConfigChannel+0x5e4>)
10001dd2:	4293      	cmp	r3, r2
10001dd4:	d170      	bne.n	10001eb8 <HAL_ADC_ConfigChannel+0x5c8>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
10001dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10001dd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
10001ddc:	4619      	mov	r1, r3
10001dde:	483b      	ldr	r0, [pc, #236]	; (10001ecc <HAL_ADC_ConfigChannel+0x5dc>)
10001de0:	f7ff f888 	bl	10000ef4 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
10001de4:	4b3d      	ldr	r3, [pc, #244]	; (10001edc <HAL_ADC_ConfigChannel+0x5ec>)
10001de6:	681b      	ldr	r3, [r3, #0]
10001de8:	099b      	lsrs	r3, r3, #6
10001dea:	4a3d      	ldr	r2, [pc, #244]	; (10001ee0 <HAL_ADC_ConfigChannel+0x5f0>)
10001dec:	fba2 2303 	umull	r2, r3, r2, r3
10001df0:	099b      	lsrs	r3, r3, #6
10001df2:	3301      	adds	r3, #1
10001df4:	005b      	lsls	r3, r3, #1
10001df6:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
10001df8:	e002      	b.n	10001e00 <HAL_ADC_ConfigChannel+0x510>
              {
                wait_loop_index--;
10001dfa:	68bb      	ldr	r3, [r7, #8]
10001dfc:	3b01      	subs	r3, #1
10001dfe:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
10001e00:	68bb      	ldr	r3, [r7, #8]
10001e02:	2b00      	cmp	r3, #0
10001e04:	d1f9      	bne.n	10001dfa <HAL_ADC_ConfigChannel+0x50a>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
10001e06:	e057      	b.n	10001eb8 <HAL_ADC_ConfigChannel+0x5c8>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
10001e08:	683b      	ldr	r3, [r7, #0]
10001e0a:	681b      	ldr	r3, [r3, #0]
10001e0c:	4a35      	ldr	r2, [pc, #212]	; (10001ee4 <HAL_ADC_ConfigChannel+0x5f4>)
10001e0e:	4293      	cmp	r3, r2
10001e10:	d111      	bne.n	10001e36 <HAL_ADC_ConfigChannel+0x546>
10001e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10001e14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
10001e18:	2b00      	cmp	r3, #0
10001e1a:	d10c      	bne.n	10001e36 <HAL_ADC_ConfigChannel+0x546>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
10001e1c:	687b      	ldr	r3, [r7, #4]
10001e1e:	681b      	ldr	r3, [r3, #0]
10001e20:	4a2c      	ldr	r2, [pc, #176]	; (10001ed4 <HAL_ADC_ConfigChannel+0x5e4>)
10001e22:	4293      	cmp	r3, r2
10001e24:	d148      	bne.n	10001eb8 <HAL_ADC_ConfigChannel+0x5c8>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
10001e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10001e28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
10001e2c:	4619      	mov	r1, r3
10001e2e:	4827      	ldr	r0, [pc, #156]	; (10001ecc <HAL_ADC_ConfigChannel+0x5dc>)
10001e30:	f7ff f860 	bl	10000ef4 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
10001e34:	e040      	b.n	10001eb8 <HAL_ADC_ConfigChannel+0x5c8>
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
10001e36:	683b      	ldr	r3, [r7, #0]
10001e38:	681b      	ldr	r3, [r3, #0]
10001e3a:	4a2b      	ldr	r2, [pc, #172]	; (10001ee8 <HAL_ADC_ConfigChannel+0x5f8>)
10001e3c:	4293      	cmp	r3, r2
10001e3e:	d111      	bne.n	10001e64 <HAL_ADC_ConfigChannel+0x574>
10001e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10001e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
10001e46:	2b00      	cmp	r3, #0
10001e48:	d10c      	bne.n	10001e64 <HAL_ADC_ConfigChannel+0x574>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
10001e4a:	687b      	ldr	r3, [r7, #4]
10001e4c:	681b      	ldr	r3, [r3, #0]
10001e4e:	4a21      	ldr	r2, [pc, #132]	; (10001ed4 <HAL_ADC_ConfigChannel+0x5e4>)
10001e50:	4293      	cmp	r3, r2
10001e52:	d131      	bne.n	10001eb8 <HAL_ADC_ConfigChannel+0x5c8>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
10001e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10001e56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
10001e5a:	4619      	mov	r1, r3
10001e5c:	481b      	ldr	r0, [pc, #108]	; (10001ecc <HAL_ADC_ConfigChannel+0x5dc>)
10001e5e:	f7ff f849 	bl	10000ef4 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_VREFINT_INSTANCE(hadc))
10001e62:	e029      	b.n	10001eb8 <HAL_ADC_ConfigChannel+0x5c8>
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VDDCORE) == 0UL))
10001e64:	683b      	ldr	r3, [r7, #0]
10001e66:	681b      	ldr	r3, [r3, #0]
10001e68:	4a20      	ldr	r2, [pc, #128]	; (10001eec <HAL_ADC_ConfigChannel+0x5fc>)
10001e6a:	4293      	cmp	r3, r2
10001e6c:	d124      	bne.n	10001eb8 <HAL_ADC_ConfigChannel+0x5c8>
10001e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10001e70:	f003 0301 	and.w	r3, r3, #1
10001e74:	2b00      	cmp	r3, #0
10001e76:	d11f      	bne.n	10001eb8 <HAL_ADC_ConfigChannel+0x5c8>
          {
            if (ADC_VDDCORE_INSTANCE(hadc))
10001e78:	687b      	ldr	r3, [r7, #4]
10001e7a:	681b      	ldr	r3, [r3, #0]
10001e7c:	4a15      	ldr	r2, [pc, #84]	; (10001ed4 <HAL_ADC_ConfigChannel+0x5e4>)
10001e7e:	4293      	cmp	r3, r2
10001e80:	d11a      	bne.n	10001eb8 <HAL_ADC_ConfigChannel+0x5c8>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VDDCORE | tmp_config_internal_channel);
10001e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10001e84:	f043 0301 	orr.w	r3, r3, #1
10001e88:	4619      	mov	r1, r3
10001e8a:	4810      	ldr	r0, [pc, #64]	; (10001ecc <HAL_ADC_ConfigChannel+0x5dc>)
10001e8c:	f7ff f832 	bl	10000ef4 <LL_ADC_SetCommonPathInternalCh>
10001e90:	e012      	b.n	10001eb8 <HAL_ADC_ConfigChannel+0x5c8>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
10001e92:	687b      	ldr	r3, [r7, #4]
10001e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001e96:	f043 0220 	orr.w	r2, r3, #32
10001e9a:	687b      	ldr	r3, [r7, #4]
10001e9c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
10001e9e:	2301      	movs	r3, #1
10001ea0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
10001ea4:	e008      	b.n	10001eb8 <HAL_ADC_ConfigChannel+0x5c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
10001ea6:	687b      	ldr	r3, [r7, #4]
10001ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001eaa:	f043 0220 	orr.w	r2, r3, #32
10001eae:	687b      	ldr	r3, [r7, #4]
10001eb0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
10001eb2:	2301      	movs	r3, #1
10001eb4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  __HAL_UNLOCK(hadc);
10001eb8:	687b      	ldr	r3, [r7, #4]
10001eba:	2200      	movs	r2, #0
10001ebc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return tmp_hal_status;
10001ec0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
10001ec4:	4618      	mov	r0, r3
10001ec6:	3784      	adds	r7, #132	; 0x84
10001ec8:	46bd      	mov	sp, r7
10001eca:	bd90      	pop	{r4, r7, pc}
10001ecc:	48003300 	.word	0x48003300
10001ed0:	48003000 	.word	0x48003000
10001ed4:	48003100 	.word	0x48003100
10001ed8:	b2601000 	.word	0xb2601000
10001edc:	10020000 	.word	0x10020000
10001ee0:	053e2d63 	.word	0x053e2d63
10001ee4:	bef08000 	.word	0xbef08000
10001ee8:	b6902000 	.word	0xb6902000
10001eec:	bac04000 	.word	0xbac04000

10001ef0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
10001ef0:	b580      	push	{r7, lr}
10001ef2:	b084      	sub	sp, #16
10001ef4:	af00      	add	r7, sp, #0
10001ef6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
10001ef8:	687b      	ldr	r3, [r7, #4]
10001efa:	681b      	ldr	r3, [r3, #0]
10001efc:	4618      	mov	r0, r3
10001efe:	f7ff f99d 	bl	1000123c <LL_ADC_IsEnabled>
10001f02:	4603      	mov	r3, r0
10001f04:	2b00      	cmp	r3, #0
10001f06:	d161      	bne.n	10001fcc <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
10001f08:	687b      	ldr	r3, [r7, #4]
10001f0a:	681b      	ldr	r3, [r3, #0]
10001f0c:	689a      	ldr	r2, [r3, #8]
10001f0e:	4b32      	ldr	r3, [pc, #200]	; (10001fd8 <ADC_Enable+0xe8>)
10001f10:	4013      	ands	r3, r2
10001f12:	2b00      	cmp	r3, #0
10001f14:	d00d      	beq.n	10001f32 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10001f16:	687b      	ldr	r3, [r7, #4]
10001f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001f1a:	f043 0210 	orr.w	r2, r3, #16
10001f1e:	687b      	ldr	r3, [r7, #4]
10001f20:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
10001f22:	687b      	ldr	r3, [r7, #4]
10001f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10001f26:	f043 0201 	orr.w	r2, r3, #1
10001f2a:	687b      	ldr	r3, [r7, #4]
10001f2c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
10001f2e:	2301      	movs	r3, #1
10001f30:	e04d      	b.n	10001fce <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
10001f32:	687b      	ldr	r3, [r7, #4]
10001f34:	681b      	ldr	r3, [r3, #0]
10001f36:	4618      	mov	r0, r3
10001f38:	f7ff f958 	bl	100011ec <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
10001f3c:	f7fe ff48 	bl	10000dd0 <HAL_GetTick>
10001f40:	60f8      	str	r0, [r7, #12]

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
10001f42:	4826      	ldr	r0, [pc, #152]	; (10001fdc <ADC_Enable+0xec>)
10001f44:	f7ff f8e8 	bl	10001118 <LL_ADC_GetMultimode>
10001f48:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
10001f4a:	687b      	ldr	r3, [r7, #4]
10001f4c:	681b      	ldr	r3, [r3, #0]
10001f4e:	4a24      	ldr	r2, [pc, #144]	; (10001fe0 <ADC_Enable+0xf0>)
10001f50:	4293      	cmp	r3, r2
10001f52:	d002      	beq.n	10001f5a <ADC_Enable+0x6a>
10001f54:	687b      	ldr	r3, [r7, #4]
10001f56:	681b      	ldr	r3, [r3, #0]
10001f58:	e000      	b.n	10001f5c <ADC_Enable+0x6c>
10001f5a:	4b22      	ldr	r3, [pc, #136]	; (10001fe4 <ADC_Enable+0xf4>)
10001f5c:	687a      	ldr	r2, [r7, #4]
10001f5e:	6812      	ldr	r2, [r2, #0]
10001f60:	4293      	cmp	r3, r2
10001f62:	d02c      	beq.n	10001fbe <ADC_Enable+0xce>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
10001f64:	68bb      	ldr	r3, [r7, #8]
10001f66:	2b00      	cmp	r3, #0
10001f68:	d130      	bne.n	10001fcc <ADC_Enable+0xdc>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
10001f6a:	e028      	b.n	10001fbe <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
10001f6c:	687b      	ldr	r3, [r7, #4]
10001f6e:	681b      	ldr	r3, [r3, #0]
10001f70:	4618      	mov	r0, r3
10001f72:	f7ff f963 	bl	1000123c <LL_ADC_IsEnabled>
10001f76:	4603      	mov	r3, r0
10001f78:	2b00      	cmp	r3, #0
10001f7a:	d104      	bne.n	10001f86 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
10001f7c:	687b      	ldr	r3, [r7, #4]
10001f7e:	681b      	ldr	r3, [r3, #0]
10001f80:	4618      	mov	r0, r3
10001f82:	f7ff f933 	bl	100011ec <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
10001f86:	f7fe ff23 	bl	10000dd0 <HAL_GetTick>
10001f8a:	4602      	mov	r2, r0
10001f8c:	68fb      	ldr	r3, [r7, #12]
10001f8e:	1ad3      	subs	r3, r2, r3
10001f90:	2b02      	cmp	r3, #2
10001f92:	d914      	bls.n	10001fbe <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
10001f94:	687b      	ldr	r3, [r7, #4]
10001f96:	681b      	ldr	r3, [r3, #0]
10001f98:	681b      	ldr	r3, [r3, #0]
10001f9a:	f003 0301 	and.w	r3, r3, #1
10001f9e:	2b01      	cmp	r3, #1
10001fa0:	d00d      	beq.n	10001fbe <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10001fa2:	687b      	ldr	r3, [r7, #4]
10001fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001fa6:	f043 0210 	orr.w	r2, r3, #16
10001faa:	687b      	ldr	r3, [r7, #4]
10001fac:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
10001fae:	687b      	ldr	r3, [r7, #4]
10001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10001fb2:	f043 0201 	orr.w	r2, r3, #1
10001fb6:	687b      	ldr	r3, [r7, #4]
10001fb8:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
10001fba:	2301      	movs	r3, #1
10001fbc:	e007      	b.n	10001fce <ADC_Enable+0xde>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
10001fbe:	687b      	ldr	r3, [r7, #4]
10001fc0:	681b      	ldr	r3, [r3, #0]
10001fc2:	681b      	ldr	r3, [r3, #0]
10001fc4:	f003 0301 	and.w	r3, r3, #1
10001fc8:	2b01      	cmp	r3, #1
10001fca:	d1cf      	bne.n	10001f6c <ADC_Enable+0x7c>
    }
#endif
  }

  /* Return HAL status */
  return HAL_OK;
10001fcc:	2300      	movs	r3, #0
}
10001fce:	4618      	mov	r0, r3
10001fd0:	3710      	adds	r7, #16
10001fd2:	46bd      	mov	sp, r7
10001fd4:	bd80      	pop	{r7, pc}
10001fd6:	bf00      	nop
10001fd8:	8000003f 	.word	0x8000003f
10001fdc:	48003300 	.word	0x48003300
10001fe0:	48003100 	.word	0x48003100
10001fe4:	48003000 	.word	0x48003000

10001fe8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
10001fe8:	b580      	push	{r7, lr}
10001fea:	b084      	sub	sp, #16
10001fec:	af00      	add	r7, sp, #0
10001fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
10001ff0:	687b      	ldr	r3, [r7, #4]
10001ff2:	681b      	ldr	r3, [r3, #0]
10001ff4:	4618      	mov	r0, r3
10001ff6:	f7ff f934 	bl	10001262 <LL_ADC_IsDisableOngoing>
10001ffa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
10001ffc:	687b      	ldr	r3, [r7, #4]
10001ffe:	681b      	ldr	r3, [r3, #0]
10002000:	4618      	mov	r0, r3
10002002:	f7ff f91b 	bl	1000123c <LL_ADC_IsEnabled>
10002006:	4603      	mov	r3, r0
10002008:	2b00      	cmp	r3, #0
1000200a:	d047      	beq.n	1000209c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
1000200c:	68fb      	ldr	r3, [r7, #12]
1000200e:	2b00      	cmp	r3, #0
10002010:	d144      	bne.n	1000209c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
10002012:	687b      	ldr	r3, [r7, #4]
10002014:	681b      	ldr	r3, [r3, #0]
10002016:	689b      	ldr	r3, [r3, #8]
10002018:	f003 030d 	and.w	r3, r3, #13
1000201c:	2b01      	cmp	r3, #1
1000201e:	d10c      	bne.n	1000203a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
10002020:	687b      	ldr	r3, [r7, #4]
10002022:	681b      	ldr	r3, [r3, #0]
10002024:	4618      	mov	r0, r3
10002026:	f7ff f8f5 	bl	10001214 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
1000202a:	687b      	ldr	r3, [r7, #4]
1000202c:	681b      	ldr	r3, [r3, #0]
1000202e:	2203      	movs	r2, #3
10002030:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
10002032:	f7fe fecd 	bl	10000dd0 <HAL_GetTick>
10002036:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
10002038:	e029      	b.n	1000208e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1000203a:	687b      	ldr	r3, [r7, #4]
1000203c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000203e:	f043 0210 	orr.w	r2, r3, #16
10002042:	687b      	ldr	r3, [r7, #4]
10002044:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
10002046:	687b      	ldr	r3, [r7, #4]
10002048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
1000204a:	f043 0201 	orr.w	r2, r3, #1
1000204e:	687b      	ldr	r3, [r7, #4]
10002050:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
10002052:	2301      	movs	r3, #1
10002054:	e023      	b.n	1000209e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
10002056:	f7fe febb 	bl	10000dd0 <HAL_GetTick>
1000205a:	4602      	mov	r2, r0
1000205c:	68bb      	ldr	r3, [r7, #8]
1000205e:	1ad3      	subs	r3, r2, r3
10002060:	2b02      	cmp	r3, #2
10002062:	d914      	bls.n	1000208e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
10002064:	687b      	ldr	r3, [r7, #4]
10002066:	681b      	ldr	r3, [r3, #0]
10002068:	689b      	ldr	r3, [r3, #8]
1000206a:	f003 0301 	and.w	r3, r3, #1
1000206e:	2b00      	cmp	r3, #0
10002070:	d00d      	beq.n	1000208e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10002072:	687b      	ldr	r3, [r7, #4]
10002074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002076:	f043 0210 	orr.w	r2, r3, #16
1000207a:	687b      	ldr	r3, [r7, #4]
1000207c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1000207e:	687b      	ldr	r3, [r7, #4]
10002080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10002082:	f043 0201 	orr.w	r2, r3, #1
10002086:	687b      	ldr	r3, [r7, #4]
10002088:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
1000208a:	2301      	movs	r3, #1
1000208c:	e007      	b.n	1000209e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
1000208e:	687b      	ldr	r3, [r7, #4]
10002090:	681b      	ldr	r3, [r3, #0]
10002092:	689b      	ldr	r3, [r3, #8]
10002094:	f003 0301 	and.w	r3, r3, #1
10002098:	2b00      	cmp	r3, #0
1000209a:	d1dc      	bne.n	10002056 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
1000209c:	2300      	movs	r3, #0
}
1000209e:	4618      	mov	r0, r3
100020a0:	3710      	adds	r7, #16
100020a2:	46bd      	mov	sp, r7
100020a4:	bd80      	pop	{r7, pc}
	...

100020a8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
100020a8:	b580      	push	{r7, lr}
100020aa:	b084      	sub	sp, #16
100020ac:	af00      	add	r7, sp, #0
100020ae:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
100020b0:	687b      	ldr	r3, [r7, #4]
100020b2:	681b      	ldr	r3, [r3, #0]
100020b4:	4a53      	ldr	r2, [pc, #332]	; (10002204 <ADC_ConfigureBoostMode+0x15c>)
100020b6:	4293      	cmp	r3, r2
100020b8:	d004      	beq.n	100020c4 <ADC_ConfigureBoostMode+0x1c>
100020ba:	687b      	ldr	r3, [r7, #4]
100020bc:	681b      	ldr	r3, [r3, #0]
100020be:	4a52      	ldr	r2, [pc, #328]	; (10002208 <ADC_ConfigureBoostMode+0x160>)
100020c0:	4293      	cmp	r3, r2
100020c2:	d124      	bne.n	1000210e <ADC_ConfigureBoostMode+0x66>
100020c4:	4b51      	ldr	r3, [pc, #324]	; (1000220c <ADC_ConfigureBoostMode+0x164>)
100020c6:	689b      	ldr	r3, [r3, #8]
100020c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
100020cc:	2b00      	cmp	r3, #0
100020ce:	d01e      	beq.n	1000210e <ADC_ConfigureBoostMode+0x66>
  {
    freq = HAL_RCC_GetHCLK2Freq();
100020d0:	f002 fdd3 	bl	10004c7a <HAL_RCC_GetHCLK2Freq>
100020d4:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
100020d6:	687b      	ldr	r3, [r7, #4]
100020d8:	685b      	ldr	r3, [r3, #4]
100020da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
100020de:	d010      	beq.n	10002102 <ADC_ConfigureBoostMode+0x5a>
100020e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
100020e4:	d811      	bhi.n	1000210a <ADC_ConfigureBoostMode+0x62>
100020e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
100020ea:	d002      	beq.n	100020f2 <ADC_ConfigureBoostMode+0x4a>
100020ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
100020f0:	d10b      	bne.n	1000210a <ADC_ConfigureBoostMode+0x62>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
100020f2:	687b      	ldr	r3, [r7, #4]
100020f4:	685b      	ldr	r3, [r3, #4]
100020f6:	0c1b      	lsrs	r3, r3, #16
100020f8:	68fa      	ldr	r2, [r7, #12]
100020fa:	fbb2 f3f3 	udiv	r3, r2, r3
100020fe:	60fb      	str	r3, [r7, #12]
        break;
10002100:	e004      	b.n	1000210c <ADC_ConfigureBoostMode+0x64>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
10002102:	68fb      	ldr	r3, [r7, #12]
10002104:	089b      	lsrs	r3, r3, #2
10002106:	60fb      	str	r3, [r7, #12]
        break;
10002108:	e000      	b.n	1000210c <ADC_ConfigureBoostMode+0x64>
      default:
        break;
1000210a:	bf00      	nop
    switch(hadc->Init.ClockPrescaler)
1000210c:	e062      	b.n	100021d4 <ADC_ConfigureBoostMode+0x12c>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
1000210e:	f04f 0008 	mov.w	r0, #8
10002112:	f04f 0100 	mov.w	r1, #0
10002116:	f005 f97d 	bl	10007414 <HAL_RCCEx_GetPeriphCLKFreq>
1000211a:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
1000211c:	687b      	ldr	r3, [r7, #4]
1000211e:	685b      	ldr	r3, [r3, #4]
10002120:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
10002124:	d051      	beq.n	100021ca <ADC_ConfigureBoostMode+0x122>
10002126:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
1000212a:	d852      	bhi.n	100021d2 <ADC_ConfigureBoostMode+0x12a>
1000212c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
10002130:	d047      	beq.n	100021c2 <ADC_ConfigureBoostMode+0x11a>
10002132:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
10002136:	d84c      	bhi.n	100021d2 <ADC_ConfigureBoostMode+0x12a>
10002138:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
1000213c:	d03d      	beq.n	100021ba <ADC_ConfigureBoostMode+0x112>
1000213e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
10002142:	d846      	bhi.n	100021d2 <ADC_ConfigureBoostMode+0x12a>
10002144:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
10002148:	d033      	beq.n	100021b2 <ADC_ConfigureBoostMode+0x10a>
1000214a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
1000214e:	d840      	bhi.n	100021d2 <ADC_ConfigureBoostMode+0x12a>
10002150:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
10002154:	d029      	beq.n	100021aa <ADC_ConfigureBoostMode+0x102>
10002156:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
1000215a:	d83a      	bhi.n	100021d2 <ADC_ConfigureBoostMode+0x12a>
1000215c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
10002160:	d01a      	beq.n	10002198 <ADC_ConfigureBoostMode+0xf0>
10002162:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
10002166:	d834      	bhi.n	100021d2 <ADC_ConfigureBoostMode+0x12a>
10002168:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
1000216c:	d014      	beq.n	10002198 <ADC_ConfigureBoostMode+0xf0>
1000216e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
10002172:	d82e      	bhi.n	100021d2 <ADC_ConfigureBoostMode+0x12a>
10002174:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
10002178:	d00e      	beq.n	10002198 <ADC_ConfigureBoostMode+0xf0>
1000217a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
1000217e:	d828      	bhi.n	100021d2 <ADC_ConfigureBoostMode+0x12a>
10002180:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
10002184:	d008      	beq.n	10002198 <ADC_ConfigureBoostMode+0xf0>
10002186:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
1000218a:	d822      	bhi.n	100021d2 <ADC_ConfigureBoostMode+0x12a>
1000218c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
10002190:	d002      	beq.n	10002198 <ADC_ConfigureBoostMode+0xf0>
10002192:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
10002196:	d11c      	bne.n	100021d2 <ADC_ConfigureBoostMode+0x12a>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
10002198:	687b      	ldr	r3, [r7, #4]
1000219a:	685b      	ldr	r3, [r3, #4]
1000219c:	0c9b      	lsrs	r3, r3, #18
1000219e:	005b      	lsls	r3, r3, #1
100021a0:	68fa      	ldr	r2, [r7, #12]
100021a2:	fbb2 f3f3 	udiv	r3, r2, r3
100021a6:	60fb      	str	r3, [r7, #12]
        break;
100021a8:	e014      	b.n	100021d4 <ADC_ConfigureBoostMode+0x12c>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
100021aa:	68fb      	ldr	r3, [r7, #12]
100021ac:	091b      	lsrs	r3, r3, #4
100021ae:	60fb      	str	r3, [r7, #12]
      break;
100021b0:	e010      	b.n	100021d4 <ADC_ConfigureBoostMode+0x12c>
        case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
100021b2:	68fb      	ldr	r3, [r7, #12]
100021b4:	095b      	lsrs	r3, r3, #5
100021b6:	60fb      	str	r3, [r7, #12]
        break;
100021b8:	e00c      	b.n	100021d4 <ADC_ConfigureBoostMode+0x12c>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
100021ba:	68fb      	ldr	r3, [r7, #12]
100021bc:	099b      	lsrs	r3, r3, #6
100021be:	60fb      	str	r3, [r7, #12]
        break;
100021c0:	e008      	b.n	100021d4 <ADC_ConfigureBoostMode+0x12c>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
100021c2:	68fb      	ldr	r3, [r7, #12]
100021c4:	09db      	lsrs	r3, r3, #7
100021c6:	60fb      	str	r3, [r7, #12]
        break;
100021c8:	e004      	b.n	100021d4 <ADC_ConfigureBoostMode+0x12c>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
100021ca:	68fb      	ldr	r3, [r7, #12]
100021cc:	0a1b      	lsrs	r3, r3, #8
100021ce:	60fb      	str	r3, [r7, #12]
        break;
100021d0:	e000      	b.n	100021d4 <ADC_ConfigureBoostMode+0x12c>
      default:
        break;
100021d2:	bf00      	nop
    }
  }

  if (freq > 20000000UL)
100021d4:	68fb      	ldr	r3, [r7, #12]
100021d6:	4a0e      	ldr	r2, [pc, #56]	; (10002210 <ADC_ConfigureBoostMode+0x168>)
100021d8:	4293      	cmp	r3, r2
100021da:	d908      	bls.n	100021ee <ADC_ConfigureBoostMode+0x146>
  {
    SET_BIT(hadc->Instance->CR, ADC_CR_BOOST);
100021dc:	687b      	ldr	r3, [r7, #4]
100021de:	681b      	ldr	r3, [r3, #0]
100021e0:	689a      	ldr	r2, [r3, #8]
100021e2:	687b      	ldr	r3, [r7, #4]
100021e4:	681b      	ldr	r3, [r3, #0]
100021e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
100021ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    CLEAR_BIT(hadc->Instance->CR, 0);
  }
}
100021ec:	e005      	b.n	100021fa <ADC_ConfigureBoostMode+0x152>
    CLEAR_BIT(hadc->Instance->CR, 0);
100021ee:	687b      	ldr	r3, [r7, #4]
100021f0:	681a      	ldr	r2, [r3, #0]
100021f2:	687b      	ldr	r3, [r7, #4]
100021f4:	681b      	ldr	r3, [r3, #0]
100021f6:	6892      	ldr	r2, [r2, #8]
100021f8:	609a      	str	r2, [r3, #8]
}
100021fa:	bf00      	nop
100021fc:	3710      	adds	r7, #16
100021fe:	46bd      	mov	sp, r7
10002200:	bd80      	pop	{r7, pc}
10002202:	bf00      	nop
10002204:	48003000 	.word	0x48003000
10002208:	48003100 	.word	0x48003100
1000220c:	48003300 	.word	0x48003300
10002210:	01312d00 	.word	0x01312d00

10002214 <LL_ADC_StartCalibration>:
{
10002214:	b480      	push	{r7}
10002216:	b085      	sub	sp, #20
10002218:	af00      	add	r7, sp, #0
1000221a:	60f8      	str	r0, [r7, #12]
1000221c:	60b9      	str	r1, [r7, #8]
1000221e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
10002220:	68fb      	ldr	r3, [r7, #12]
10002222:	689a      	ldr	r2, [r3, #8]
10002224:	4b09      	ldr	r3, [pc, #36]	; (1000224c <LL_ADC_StartCalibration+0x38>)
10002226:	4013      	ands	r3, r2
10002228:	68ba      	ldr	r2, [r7, #8]
1000222a:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
1000222e:	687a      	ldr	r2, [r7, #4]
10002230:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
10002234:	430a      	orrs	r2, r1
10002236:	4313      	orrs	r3, r2
10002238:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
1000223c:	68fb      	ldr	r3, [r7, #12]
1000223e:	609a      	str	r2, [r3, #8]
}
10002240:	bf00      	nop
10002242:	3714      	adds	r7, #20
10002244:	46bd      	mov	sp, r7
10002246:	f85d 7b04 	ldr.w	r7, [sp], #4
1000224a:	4770      	bx	lr
1000224c:	3ffeffc0 	.word	0x3ffeffc0

10002250 <LL_ADC_IsCalibrationOnGoing>:
{
10002250:	b480      	push	{r7}
10002252:	b083      	sub	sp, #12
10002254:	af00      	add	r7, sp, #0
10002256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
10002258:	687b      	ldr	r3, [r7, #4]
1000225a:	689b      	ldr	r3, [r3, #8]
1000225c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002260:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002264:	d101      	bne.n	1000226a <LL_ADC_IsCalibrationOnGoing+0x1a>
10002266:	2301      	movs	r3, #1
10002268:	e000      	b.n	1000226c <LL_ADC_IsCalibrationOnGoing+0x1c>
1000226a:	2300      	movs	r3, #0
}
1000226c:	4618      	mov	r0, r3
1000226e:	370c      	adds	r7, #12
10002270:	46bd      	mov	sp, r7
10002272:	f85d 7b04 	ldr.w	r7, [sp], #4
10002276:	4770      	bx	lr

10002278 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
10002278:	b580      	push	{r7, lr}
1000227a:	b086      	sub	sp, #24
1000227c:	af00      	add	r7, sp, #0
1000227e:	60f8      	str	r0, [r7, #12]
10002280:	60b9      	str	r1, [r7, #8]
10002282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
10002284:	2300      	movs	r3, #0
10002286:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
10002288:	68fb      	ldr	r3, [r7, #12]
1000228a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
1000228e:	2b01      	cmp	r3, #1
10002290:	d101      	bne.n	10002296 <HAL_ADCEx_Calibration_Start+0x1e>
10002292:	2302      	movs	r3, #2
10002294:	e04e      	b.n	10002334 <HAL_ADCEx_Calibration_Start+0xbc>
10002296:	68fb      	ldr	r3, [r7, #12]
10002298:	2201      	movs	r2, #1
1000229a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
1000229e:	68f8      	ldr	r0, [r7, #12]
100022a0:	f7ff fea2 	bl	10001fe8 <ADC_Disable>
100022a4:	4603      	mov	r3, r0
100022a6:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
100022a8:	7dfb      	ldrb	r3, [r7, #23]
100022aa:	2b00      	cmp	r3, #0
100022ac:	d137      	bne.n	1000231e <HAL_ADCEx_Calibration_Start+0xa6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
100022ae:	68fb      	ldr	r3, [r7, #12]
100022b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100022b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
100022b6:	f023 0302 	bic.w	r3, r3, #2
100022ba:	f043 0202 	orr.w	r2, r3, #2
100022be:	68fb      	ldr	r3, [r7, #12]
100022c0:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance , CalibrationMode, SingleDiff );
100022c2:	68fb      	ldr	r3, [r7, #12]
100022c4:	681b      	ldr	r3, [r3, #0]
100022c6:	687a      	ldr	r2, [r7, #4]
100022c8:	68b9      	ldr	r1, [r7, #8]
100022ca:	4618      	mov	r0, r3
100022cc:	f7ff ffa2 	bl	10002214 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
100022d0:	e014      	b.n	100022fc <HAL_ADCEx_Calibration_Start+0x84>
    {
      wait_loop_index++;
100022d2:	693b      	ldr	r3, [r7, #16]
100022d4:	3301      	adds	r3, #1
100022d6:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
100022d8:	693b      	ldr	r3, [r7, #16]
100022da:	4a18      	ldr	r2, [pc, #96]	; (1000233c <HAL_ADCEx_Calibration_Start+0xc4>)
100022dc:	4293      	cmp	r3, r2
100022de:	d90d      	bls.n	100022fc <HAL_ADCEx_Calibration_Start+0x84>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
100022e0:	68fb      	ldr	r3, [r7, #12]
100022e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100022e4:	f023 0312 	bic.w	r3, r3, #18
100022e8:	f043 0210 	orr.w	r2, r3, #16
100022ec:	68fb      	ldr	r3, [r7, #12]
100022ee:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
100022f0:	68fb      	ldr	r3, [r7, #12]
100022f2:	2200      	movs	r2, #0
100022f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
100022f8:	2301      	movs	r3, #1
100022fa:	e01b      	b.n	10002334 <HAL_ADCEx_Calibration_Start+0xbc>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
100022fc:	68fb      	ldr	r3, [r7, #12]
100022fe:	681b      	ldr	r3, [r3, #0]
10002300:	4618      	mov	r0, r3
10002302:	f7ff ffa5 	bl	10002250 <LL_ADC_IsCalibrationOnGoing>
10002306:	4603      	mov	r3, r0
10002308:	2b00      	cmp	r3, #0
1000230a:	d1e2      	bne.n	100022d2 <HAL_ADCEx_Calibration_Start+0x5a>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
1000230c:	68fb      	ldr	r3, [r7, #12]
1000230e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002310:	f023 0303 	bic.w	r3, r3, #3
10002314:	f043 0201 	orr.w	r2, r3, #1
10002318:	68fb      	ldr	r3, [r7, #12]
1000231a:	655a      	str	r2, [r3, #84]	; 0x54
1000231c:	e005      	b.n	1000232a <HAL_ADCEx_Calibration_Start+0xb2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1000231e:	68fb      	ldr	r3, [r7, #12]
10002320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002322:	f043 0210 	orr.w	r2, r3, #16
10002326:	68fb      	ldr	r3, [r7, #12]
10002328:	655a      	str	r2, [r3, #84]	; 0x54

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
1000232a:	68fb      	ldr	r3, [r7, #12]
1000232c:	2200      	movs	r2, #0
1000232e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return tmp_hal_status;
10002332:	7dfb      	ldrb	r3, [r7, #23]
}
10002334:	4618      	mov	r0, r3
10002336:	3718      	adds	r7, #24
10002338:	46bd      	mov	sp, r7
1000233a:	bd80      	pop	{r7, pc}
1000233c:	32021fbf 	.word	0x32021fbf

10002340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10002340:	b480      	push	{r7}
10002342:	b085      	sub	sp, #20
10002344:	af00      	add	r7, sp, #0
10002346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
10002348:	687b      	ldr	r3, [r7, #4]
1000234a:	f003 0307 	and.w	r3, r3, #7
1000234e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
10002350:	4b0c      	ldr	r3, [pc, #48]	; (10002384 <__NVIC_SetPriorityGrouping+0x44>)
10002352:	68db      	ldr	r3, [r3, #12]
10002354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
10002356:	68ba      	ldr	r2, [r7, #8]
10002358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
1000235c:	4013      	ands	r3, r2
1000235e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
10002360:	68fb      	ldr	r3, [r7, #12]
10002362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10002364:	68bb      	ldr	r3, [r7, #8]
10002366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
10002368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
1000236c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
10002370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
10002372:	4a04      	ldr	r2, [pc, #16]	; (10002384 <__NVIC_SetPriorityGrouping+0x44>)
10002374:	68bb      	ldr	r3, [r7, #8]
10002376:	60d3      	str	r3, [r2, #12]
}
10002378:	bf00      	nop
1000237a:	3714      	adds	r7, #20
1000237c:	46bd      	mov	sp, r7
1000237e:	f85d 7b04 	ldr.w	r7, [sp], #4
10002382:	4770      	bx	lr
10002384:	e000ed00 	.word	0xe000ed00

10002388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
10002388:	b480      	push	{r7}
1000238a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1000238c:	4b04      	ldr	r3, [pc, #16]	; (100023a0 <__NVIC_GetPriorityGrouping+0x18>)
1000238e:	68db      	ldr	r3, [r3, #12]
10002390:	0a1b      	lsrs	r3, r3, #8
10002392:	f003 0307 	and.w	r3, r3, #7
}
10002396:	4618      	mov	r0, r3
10002398:	46bd      	mov	sp, r7
1000239a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000239e:	4770      	bx	lr
100023a0:	e000ed00 	.word	0xe000ed00

100023a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
100023a4:	b480      	push	{r7}
100023a6:	b083      	sub	sp, #12
100023a8:	af00      	add	r7, sp, #0
100023aa:	4603      	mov	r3, r0
100023ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
100023ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100023b2:	2b00      	cmp	r3, #0
100023b4:	db0b      	blt.n	100023ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100023b6:	88fb      	ldrh	r3, [r7, #6]
100023b8:	f003 021f 	and.w	r2, r3, #31
100023bc:	4907      	ldr	r1, [pc, #28]	; (100023dc <__NVIC_EnableIRQ+0x38>)
100023be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100023c2:	095b      	lsrs	r3, r3, #5
100023c4:	2001      	movs	r0, #1
100023c6:	fa00 f202 	lsl.w	r2, r0, r2
100023ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
100023ce:	bf00      	nop
100023d0:	370c      	adds	r7, #12
100023d2:	46bd      	mov	sp, r7
100023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
100023d8:	4770      	bx	lr
100023da:	bf00      	nop
100023dc:	e000e100 	.word	0xe000e100

100023e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100023e0:	b480      	push	{r7}
100023e2:	b083      	sub	sp, #12
100023e4:	af00      	add	r7, sp, #0
100023e6:	4603      	mov	r3, r0
100023e8:	6039      	str	r1, [r7, #0]
100023ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
100023ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100023f0:	2b00      	cmp	r3, #0
100023f2:	db0a      	blt.n	1000240a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
100023f4:	683b      	ldr	r3, [r7, #0]
100023f6:	b2da      	uxtb	r2, r3
100023f8:	490c      	ldr	r1, [pc, #48]	; (1000242c <__NVIC_SetPriority+0x4c>)
100023fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100023fe:	0112      	lsls	r2, r2, #4
10002400:	b2d2      	uxtb	r2, r2
10002402:	440b      	add	r3, r1
10002404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
10002408:	e00a      	b.n	10002420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1000240a:	683b      	ldr	r3, [r7, #0]
1000240c:	b2da      	uxtb	r2, r3
1000240e:	4908      	ldr	r1, [pc, #32]	; (10002430 <__NVIC_SetPriority+0x50>)
10002410:	88fb      	ldrh	r3, [r7, #6]
10002412:	f003 030f 	and.w	r3, r3, #15
10002416:	3b04      	subs	r3, #4
10002418:	0112      	lsls	r2, r2, #4
1000241a:	b2d2      	uxtb	r2, r2
1000241c:	440b      	add	r3, r1
1000241e:	761a      	strb	r2, [r3, #24]
}
10002420:	bf00      	nop
10002422:	370c      	adds	r7, #12
10002424:	46bd      	mov	sp, r7
10002426:	f85d 7b04 	ldr.w	r7, [sp], #4
1000242a:	4770      	bx	lr
1000242c:	e000e100 	.word	0xe000e100
10002430:	e000ed00 	.word	0xe000ed00

10002434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
10002434:	b480      	push	{r7}
10002436:	b089      	sub	sp, #36	; 0x24
10002438:	af00      	add	r7, sp, #0
1000243a:	60f8      	str	r0, [r7, #12]
1000243c:	60b9      	str	r1, [r7, #8]
1000243e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
10002440:	68fb      	ldr	r3, [r7, #12]
10002442:	f003 0307 	and.w	r3, r3, #7
10002446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
10002448:	69fb      	ldr	r3, [r7, #28]
1000244a:	f1c3 0307 	rsb	r3, r3, #7
1000244e:	2b04      	cmp	r3, #4
10002450:	bf28      	it	cs
10002452:	2304      	movcs	r3, #4
10002454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
10002456:	69fb      	ldr	r3, [r7, #28]
10002458:	3304      	adds	r3, #4
1000245a:	2b06      	cmp	r3, #6
1000245c:	d902      	bls.n	10002464 <NVIC_EncodePriority+0x30>
1000245e:	69fb      	ldr	r3, [r7, #28]
10002460:	3b03      	subs	r3, #3
10002462:	e000      	b.n	10002466 <NVIC_EncodePriority+0x32>
10002464:	2300      	movs	r3, #0
10002466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10002468:	f04f 32ff 	mov.w	r2, #4294967295
1000246c:	69bb      	ldr	r3, [r7, #24]
1000246e:	fa02 f303 	lsl.w	r3, r2, r3
10002472:	43da      	mvns	r2, r3
10002474:	68bb      	ldr	r3, [r7, #8]
10002476:	401a      	ands	r2, r3
10002478:	697b      	ldr	r3, [r7, #20]
1000247a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
1000247c:	f04f 31ff 	mov.w	r1, #4294967295
10002480:	697b      	ldr	r3, [r7, #20]
10002482:	fa01 f303 	lsl.w	r3, r1, r3
10002486:	43d9      	mvns	r1, r3
10002488:	687b      	ldr	r3, [r7, #4]
1000248a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
1000248c:	4313      	orrs	r3, r2
         );
}
1000248e:	4618      	mov	r0, r3
10002490:	3724      	adds	r7, #36	; 0x24
10002492:	46bd      	mov	sp, r7
10002494:	f85d 7b04 	ldr.w	r7, [sp], #4
10002498:	4770      	bx	lr
	...

1000249c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
1000249c:	b580      	push	{r7, lr}
1000249e:	b082      	sub	sp, #8
100024a0:	af00      	add	r7, sp, #0
100024a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
100024a4:	687b      	ldr	r3, [r7, #4]
100024a6:	3b01      	subs	r3, #1
100024a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
100024ac:	d301      	bcc.n	100024b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
100024ae:	2301      	movs	r3, #1
100024b0:	e00f      	b.n	100024d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
100024b2:	4a0a      	ldr	r2, [pc, #40]	; (100024dc <SysTick_Config+0x40>)
100024b4:	687b      	ldr	r3, [r7, #4]
100024b6:	3b01      	subs	r3, #1
100024b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
100024ba:	210f      	movs	r1, #15
100024bc:	f04f 30ff 	mov.w	r0, #4294967295
100024c0:	f7ff ff8e 	bl	100023e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
100024c4:	4b05      	ldr	r3, [pc, #20]	; (100024dc <SysTick_Config+0x40>)
100024c6:	2200      	movs	r2, #0
100024c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
100024ca:	4b04      	ldr	r3, [pc, #16]	; (100024dc <SysTick_Config+0x40>)
100024cc:	2207      	movs	r2, #7
100024ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
100024d0:	2300      	movs	r3, #0
}
100024d2:	4618      	mov	r0, r3
100024d4:	3708      	adds	r7, #8
100024d6:	46bd      	mov	sp, r7
100024d8:	bd80      	pop	{r7, pc}
100024da:	bf00      	nop
100024dc:	e000e010 	.word	0xe000e010

100024e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
100024e0:	b580      	push	{r7, lr}
100024e2:	b082      	sub	sp, #8
100024e4:	af00      	add	r7, sp, #0
100024e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
100024e8:	6878      	ldr	r0, [r7, #4]
100024ea:	f7ff ff29 	bl	10002340 <__NVIC_SetPriorityGrouping>
}
100024ee:	bf00      	nop
100024f0:	3708      	adds	r7, #8
100024f2:	46bd      	mov	sp, r7
100024f4:	bd80      	pop	{r7, pc}

100024f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
100024f6:	b580      	push	{r7, lr}
100024f8:	b086      	sub	sp, #24
100024fa:	af00      	add	r7, sp, #0
100024fc:	4603      	mov	r3, r0
100024fe:	60b9      	str	r1, [r7, #8]
10002500:	607a      	str	r2, [r7, #4]
10002502:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
10002504:	2300      	movs	r3, #0
10002506:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
10002508:	f7ff ff3e 	bl	10002388 <__NVIC_GetPriorityGrouping>
1000250c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
1000250e:	687a      	ldr	r2, [r7, #4]
10002510:	68b9      	ldr	r1, [r7, #8]
10002512:	6978      	ldr	r0, [r7, #20]
10002514:	f7ff ff8e 	bl	10002434 <NVIC_EncodePriority>
10002518:	4602      	mov	r2, r0
1000251a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
1000251e:	4611      	mov	r1, r2
10002520:	4618      	mov	r0, r3
10002522:	f7ff ff5d 	bl	100023e0 <__NVIC_SetPriority>
}
10002526:	bf00      	nop
10002528:	3718      	adds	r7, #24
1000252a:	46bd      	mov	sp, r7
1000252c:	bd80      	pop	{r7, pc}

1000252e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
1000252e:	b580      	push	{r7, lr}
10002530:	b082      	sub	sp, #8
10002532:	af00      	add	r7, sp, #0
10002534:	4603      	mov	r3, r0
10002536:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10002538:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
1000253c:	4618      	mov	r0, r3
1000253e:	f7ff ff31 	bl	100023a4 <__NVIC_EnableIRQ>
}
10002542:	bf00      	nop
10002544:	3708      	adds	r7, #8
10002546:	46bd      	mov	sp, r7
10002548:	bd80      	pop	{r7, pc}

1000254a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
1000254a:	b580      	push	{r7, lr}
1000254c:	b082      	sub	sp, #8
1000254e:	af00      	add	r7, sp, #0
10002550:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10002552:	6878      	ldr	r0, [r7, #4]
10002554:	f7ff ffa2 	bl	1000249c <SysTick_Config>
10002558:	4603      	mov	r3, r0
}
1000255a:	4618      	mov	r0, r3
1000255c:	3708      	adds	r7, #8
1000255e:	46bd      	mov	sp, r7
10002560:	bd80      	pop	{r7, pc}
	...

10002564 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
10002564:	b580      	push	{r7, lr}
10002566:	b086      	sub	sp, #24
10002568:	af00      	add	r7, sp, #0
1000256a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
1000256c:	f7fe fc30 	bl	10000dd0 <HAL_GetTick>
10002570:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
10002572:	687b      	ldr	r3, [r7, #4]
10002574:	2b00      	cmp	r3, #0
10002576:	d101      	bne.n	1000257c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
10002578:	2301      	movs	r3, #1
1000257a:	e0e7      	b.n	1000274c <HAL_DMA_Init+0x1e8>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_INSTANCE(hdma) != 0U) /* DMA1 or DMA2 instance */
1000257c:	687b      	ldr	r3, [r7, #4]
1000257e:	681b      	ldr	r3, [r3, #0]
10002580:	461a      	mov	r2, r3
10002582:	4b74      	ldr	r3, [pc, #464]	; (10002754 <HAL_DMA_Init+0x1f0>)
10002584:	429a      	cmp	r2, r3
10002586:	d907      	bls.n	10002598 <HAL_DMA_Init+0x34>
10002588:	687b      	ldr	r3, [r7, #4]
1000258a:	681b      	ldr	r3, [r3, #0]
1000258c:	461a      	mov	r2, r3
1000258e:	4b72      	ldr	r3, [pc, #456]	; (10002758 <HAL_DMA_Init+0x1f4>)
10002590:	429a      	cmp	r2, r3
10002592:	d801      	bhi.n	10002598 <HAL_DMA_Init+0x34>
10002594:	2301      	movs	r3, #1
10002596:	e000      	b.n	1000259a <HAL_DMA_Init+0x36>
10002598:	2300      	movs	r3, #0
1000259a:	2b00      	cmp	r3, #0
1000259c:	f000 8099 	beq.w	100026d2 <HAL_DMA_Init+0x16e>
    }



    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
100025a0:	687b      	ldr	r3, [r7, #4]
100025a2:	2202      	movs	r2, #2
100025a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
100025a8:	687b      	ldr	r3, [r7, #4]
100025aa:	2200      	movs	r2, #0
100025ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
100025b0:	687b      	ldr	r3, [r7, #4]
100025b2:	681b      	ldr	r3, [r3, #0]
100025b4:	681a      	ldr	r2, [r3, #0]
100025b6:	687b      	ldr	r3, [r7, #4]
100025b8:	681b      	ldr	r3, [r3, #0]
100025ba:	f022 0201 	bic.w	r2, r2, #1
100025be:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
100025c0:	e00f      	b.n	100025e2 <HAL_DMA_Init+0x7e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
100025c2:	f7fe fc05 	bl	10000dd0 <HAL_GetTick>
100025c6:	4602      	mov	r2, r0
100025c8:	693b      	ldr	r3, [r7, #16]
100025ca:	1ad3      	subs	r3, r2, r3
100025cc:	2b05      	cmp	r3, #5
100025ce:	d908      	bls.n	100025e2 <HAL_DMA_Init+0x7e>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
100025d0:	687b      	ldr	r3, [r7, #4]
100025d2:	2220      	movs	r2, #32
100025d4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
100025d6:	687b      	ldr	r3, [r7, #4]
100025d8:	2203      	movs	r2, #3
100025da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
100025de:	2301      	movs	r3, #1
100025e0:	e0b4      	b.n	1000274c <HAL_DMA_Init+0x1e8>
    while ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
100025e2:	687b      	ldr	r3, [r7, #4]
100025e4:	681b      	ldr	r3, [r3, #0]
100025e6:	681b      	ldr	r3, [r3, #0]
100025e8:	f003 0301 	and.w	r3, r3, #1
100025ec:	2b00      	cmp	r3, #0
100025ee:	d1e8      	bne.n	100025c2 <HAL_DMA_Init+0x5e>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef *)hdma->Instance)->CR;
100025f0:	687b      	ldr	r3, [r7, #4]
100025f2:	681b      	ldr	r3, [r3, #0]
100025f4:	681b      	ldr	r3, [r3, #0]
100025f6:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
100025f8:	697a      	ldr	r2, [r7, #20]
100025fa:	4b58      	ldr	r3, [pc, #352]	; (1000275c <HAL_DMA_Init+0x1f8>)
100025fc:	4013      	ands	r3, r2
100025fe:	617b      	str	r3, [r7, #20]
                                  DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                                  DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                                  DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
10002600:	687b      	ldr	r3, [r7, #4]
10002602:	689a      	ldr	r2, [r3, #8]
                      hdma->Init.PeriphInc           | hdma->Init.MemInc           |
10002604:	687b      	ldr	r3, [r7, #4]
10002606:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
10002608:	431a      	orrs	r2, r3
                      hdma->Init.PeriphInc           | hdma->Init.MemInc           |
1000260a:	687b      	ldr	r3, [r7, #4]
1000260c:	691b      	ldr	r3, [r3, #16]
1000260e:	431a      	orrs	r2, r3
                      hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
10002610:	687b      	ldr	r3, [r7, #4]
10002612:	695b      	ldr	r3, [r3, #20]
                      hdma->Init.PeriphInc           | hdma->Init.MemInc           |
10002614:	431a      	orrs	r2, r3
                      hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
10002616:	687b      	ldr	r3, [r7, #4]
10002618:	699b      	ldr	r3, [r3, #24]
1000261a:	431a      	orrs	r2, r3
                      hdma->Init.Mode                | hdma->Init.Priority;
1000261c:	687b      	ldr	r3, [r7, #4]
1000261e:	69db      	ldr	r3, [r3, #28]
                      hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
10002620:	431a      	orrs	r2, r3
                      hdma->Init.Mode                | hdma->Init.Priority;
10002622:	687b      	ldr	r3, [r7, #4]
10002624:	6a1b      	ldr	r3, [r3, #32]
10002626:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
10002628:	697a      	ldr	r2, [r7, #20]
1000262a:	4313      	orrs	r3, r2
1000262c:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
1000262e:	687b      	ldr	r3, [r7, #4]
10002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002632:	2b04      	cmp	r3, #4
10002634:	d107      	bne.n	10002646 <HAL_DMA_Init+0xe2>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
10002636:	687b      	ldr	r3, [r7, #4]
10002638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1000263a:	687b      	ldr	r3, [r7, #4]
1000263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000263e:	4313      	orrs	r3, r2
10002640:	697a      	ldr	r2, [r7, #20]
10002642:	4313      	orrs	r3, r2
10002644:	617b      	str	r3, [r7, #20]
    }

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR = registerValue;
10002646:	687b      	ldr	r3, [r7, #4]
10002648:	681b      	ldr	r3, [r3, #0]
1000264a:	697a      	ldr	r2, [r7, #20]
1000264c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef *)hdma->Instance)->FCR;
1000264e:	687b      	ldr	r3, [r7, #4]
10002650:	681b      	ldr	r3, [r3, #0]
10002652:	695b      	ldr	r3, [r3, #20]
10002654:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
10002656:	697b      	ldr	r3, [r7, #20]
10002658:	f023 0307 	bic.w	r3, r3, #7
1000265c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
1000265e:	687b      	ldr	r3, [r7, #4]
10002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002662:	697a      	ldr	r2, [r7, #20]
10002664:	4313      	orrs	r3, r2
10002666:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
10002668:	687b      	ldr	r3, [r7, #4]
1000266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000266c:	2b04      	cmp	r3, #4
1000266e:	d117      	bne.n	100026a0 <HAL_DMA_Init+0x13c>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
10002670:	687b      	ldr	r3, [r7, #4]
10002672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002674:	697a      	ldr	r2, [r7, #20]
10002676:	4313      	orrs	r3, r2
10002678:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
1000267a:	687b      	ldr	r3, [r7, #4]
1000267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000267e:	2b00      	cmp	r3, #0
10002680:	d00e      	beq.n	100026a0 <HAL_DMA_Init+0x13c>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
10002682:	6878      	ldr	r0, [r7, #4]
10002684:	f000 fa66 	bl	10002b54 <DMA_CheckFifoParam>
10002688:	4603      	mov	r3, r0
1000268a:	2b00      	cmp	r3, #0
1000268c:	d008      	beq.n	100026a0 <HAL_DMA_Init+0x13c>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
1000268e:	687b      	ldr	r3, [r7, #4]
10002690:	2240      	movs	r2, #64	; 0x40
10002692:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
10002694:	687b      	ldr	r3, [r7, #4]
10002696:	2201      	movs	r2, #1
10002698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
1000269c:	2301      	movs	r3, #1
1000269e:	e055      	b.n	1000274c <HAL_DMA_Init+0x1e8>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef *)hdma->Instance)->FCR = registerValue;
100026a0:	687b      	ldr	r3, [r7, #4]
100026a2:	681b      	ldr	r3, [r3, #0]
100026a4:	697a      	ldr	r2, [r7, #20]
100026a6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
100026a8:	6878      	ldr	r0, [r7, #4]
100026aa:	f000 fa1d 	bl	10002ae8 <DMA_CalcBaseAndBitshift>
100026ae:	4603      	mov	r3, r0
100026b0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
     regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
100026b2:	687b      	ldr	r3, [r7, #4]
100026b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
100026b6:	f003 031f 	and.w	r3, r3, #31
100026ba:	223f      	movs	r2, #63	; 0x3f
100026bc:	409a      	lsls	r2, r3
100026be:	68fb      	ldr	r3, [r7, #12]
100026c0:	609a      	str	r2, [r3, #8]
  }

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
100026c2:	6878      	ldr	r0, [r7, #4]
100026c4:	f000 fac2 	bl	10002c4c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
100026c8:	687b      	ldr	r3, [r7, #4]
100026ca:	689b      	ldr	r3, [r3, #8]
100026cc:	2b80      	cmp	r3, #128	; 0x80
100026ce:	d10c      	bne.n	100026ea <HAL_DMA_Init+0x186>
100026d0:	e008      	b.n	100026e4 <HAL_DMA_Init+0x180>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
100026d2:	687b      	ldr	r3, [r7, #4]
100026d4:	2240      	movs	r2, #64	; 0x40
100026d6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
100026d8:	687b      	ldr	r3, [r7, #4]
100026da:	2203      	movs	r2, #3
100026dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    return HAL_ERROR;
100026e0:	2301      	movs	r3, #1
100026e2:	e033      	b.n	1000274c <HAL_DMA_Init+0x1e8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
100026e4:	687b      	ldr	r3, [r7, #4]
100026e6:	2200      	movs	r2, #0
100026e8:	605a      	str	r2, [r3, #4]
  }


  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
100026ea:	687b      	ldr	r3, [r7, #4]
100026ec:	685a      	ldr	r2, [r3, #4]
100026ee:	687b      	ldr	r3, [r7, #4]
100026f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
100026f2:	b2d2      	uxtb	r2, r2
100026f4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
100026f6:	687b      	ldr	r3, [r7, #4]
100026f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
100026fa:	687a      	ldr	r2, [r7, #4]
100026fc:	6e92      	ldr	r2, [r2, #104]	; 0x68
100026fe:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX request generator :
     if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
  */

  if ((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
10002700:	687b      	ldr	r3, [r7, #4]
10002702:	685b      	ldr	r3, [r3, #4]
10002704:	2b00      	cmp	r3, #0
10002706:	d010      	beq.n	1000272a <HAL_DMA_Init+0x1c6>
10002708:	687b      	ldr	r3, [r7, #4]
1000270a:	685b      	ldr	r3, [r3, #4]
1000270c:	2b08      	cmp	r3, #8
1000270e:	d80c      	bhi.n	1000272a <HAL_DMA_Init+0x1c6>
  {
    /* Initialize parameters for DMAMUX request generator :
    DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
10002710:	6878      	ldr	r0, [r7, #4]
10002712:	f000 fad7 	bl	10002cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
10002716:	687b      	ldr	r3, [r7, #4]
10002718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
1000271a:	2200      	movs	r2, #0
1000271c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
1000271e:	687b      	ldr	r3, [r7, #4]
10002720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10002722:	687a      	ldr	r2, [r7, #4]
10002724:	6f52      	ldr	r2, [r2, #116]	; 0x74
10002726:	605a      	str	r2, [r3, #4]
10002728:	e008      	b.n	1000273c <HAL_DMA_Init+0x1d8>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
1000272a:	687b      	ldr	r3, [r7, #4]
1000272c:	2200      	movs	r2, #0
1000272e:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
10002730:	687b      	ldr	r3, [r7, #4]
10002732:	2200      	movs	r2, #0
10002734:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
10002736:	687b      	ldr	r3, [r7, #4]
10002738:	2200      	movs	r2, #0
1000273a:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
1000273c:	687b      	ldr	r3, [r7, #4]
1000273e:	2200      	movs	r2, #0
10002740:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
10002742:	687b      	ldr	r3, [r7, #4]
10002744:	2201      	movs	r2, #1
10002746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
1000274a:	2300      	movs	r3, #0
}
1000274c:	4618      	mov	r0, r3
1000274e:	3718      	adds	r7, #24
10002750:	46bd      	mov	sp, r7
10002752:	bd80      	pop	{r7, pc}
10002754:	4800000f 	.word	0x4800000f
10002758:	480010b8 	.word	0x480010b8
1000275c:	fe10803f 	.word	0xfe10803f

10002760 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
10002760:	b580      	push	{r7, lr}
10002762:	b086      	sub	sp, #24
10002764:	af00      	add	r7, sp, #0
10002766:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma;
  __IO uint32_t count = 0U;
10002768:	2300      	movs	r3, #0
1000276a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
1000276c:	4b97      	ldr	r3, [pc, #604]	; (100029cc <HAL_DMA_IRQHandler+0x26c>)
1000276e:	681b      	ldr	r3, [r3, #0]
10002770:	4a97      	ldr	r2, [pc, #604]	; (100029d0 <HAL_DMA_IRQHandler+0x270>)
10002772:	fba2 2303 	umull	r2, r3, r2, r3
10002776:	0a9b      	lsrs	r3, r3, #10
10002778:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
1000277a:	687b      	ldr	r3, [r7, #4]
1000277c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
1000277e:	613b      	str	r3, [r7, #16]

  tmpisr_dma = regs_dma->ISR;
10002780:	693b      	ldr	r3, [r7, #16]
10002782:	681b      	ldr	r3, [r3, #0]
10002784:	60fb      	str	r3, [r7, #12]

  if(IS_DMA_INSTANCE(hdma) != 0U)  /* DMA1 or DMA2 instance */
10002786:	687b      	ldr	r3, [r7, #4]
10002788:	681b      	ldr	r3, [r3, #0]
1000278a:	461a      	mov	r2, r3
1000278c:	4b91      	ldr	r3, [pc, #580]	; (100029d4 <HAL_DMA_IRQHandler+0x274>)
1000278e:	429a      	cmp	r2, r3
10002790:	d907      	bls.n	100027a2 <HAL_DMA_IRQHandler+0x42>
10002792:	687b      	ldr	r3, [r7, #4]
10002794:	681b      	ldr	r3, [r3, #0]
10002796:	461a      	mov	r2, r3
10002798:	4b8f      	ldr	r3, [pc, #572]	; (100029d8 <HAL_DMA_IRQHandler+0x278>)
1000279a:	429a      	cmp	r2, r3
1000279c:	d801      	bhi.n	100027a2 <HAL_DMA_IRQHandler+0x42>
1000279e:	2301      	movs	r3, #1
100027a0:	e000      	b.n	100027a4 <HAL_DMA_IRQHandler+0x44>
100027a2:	2300      	movs	r3, #0
100027a4:	2b00      	cmp	r3, #0
100027a6:	f000 819b 	beq.w	10002ae0 <HAL_DMA_IRQHandler+0x380>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
100027aa:	687b      	ldr	r3, [r7, #4]
100027ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
100027ae:	f003 031f 	and.w	r3, r3, #31
100027b2:	2208      	movs	r2, #8
100027b4:	409a      	lsls	r2, r3
100027b6:	68fb      	ldr	r3, [r7, #12]
100027b8:	4013      	ands	r3, r2
100027ba:	2b00      	cmp	r3, #0
100027bc:	d01c      	beq.n	100027f8 <HAL_DMA_IRQHandler+0x98>
    {
      if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
100027be:	687b      	ldr	r3, [r7, #4]
100027c0:	681b      	ldr	r3, [r3, #0]
100027c2:	681b      	ldr	r3, [r3, #0]
100027c4:	f003 0304 	and.w	r3, r3, #4
100027c8:	2b00      	cmp	r3, #0
100027ca:	d015      	beq.n	100027f8 <HAL_DMA_IRQHandler+0x98>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
100027cc:	687b      	ldr	r3, [r7, #4]
100027ce:	681b      	ldr	r3, [r3, #0]
100027d0:	681a      	ldr	r2, [r3, #0]
100027d2:	687b      	ldr	r3, [r7, #4]
100027d4:	681b      	ldr	r3, [r3, #0]
100027d6:	f022 0204 	bic.w	r2, r2, #4
100027da:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
100027dc:	687b      	ldr	r3, [r7, #4]
100027de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
100027e0:	f003 031f 	and.w	r3, r3, #31
100027e4:	2208      	movs	r2, #8
100027e6:	409a      	lsls	r2, r3
100027e8:	693b      	ldr	r3, [r7, #16]
100027ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
100027ec:	687b      	ldr	r3, [r7, #4]
100027ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100027f0:	f043 0201 	orr.w	r2, r3, #1
100027f4:	687b      	ldr	r3, [r7, #4]
100027f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
100027f8:	687b      	ldr	r3, [r7, #4]
100027fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
100027fc:	f003 031f 	and.w	r3, r3, #31
10002800:	68fa      	ldr	r2, [r7, #12]
10002802:	fa22 f303 	lsr.w	r3, r2, r3
10002806:	f003 0301 	and.w	r3, r3, #1
1000280a:	2b00      	cmp	r3, #0
1000280c:	d014      	beq.n	10002838 <HAL_DMA_IRQHandler+0xd8>
    {
      if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
1000280e:	687b      	ldr	r3, [r7, #4]
10002810:	681b      	ldr	r3, [r3, #0]
10002812:	695b      	ldr	r3, [r3, #20]
10002814:	f003 0380 	and.w	r3, r3, #128	; 0x80
10002818:	2b00      	cmp	r3, #0
1000281a:	d00d      	beq.n	10002838 <HAL_DMA_IRQHandler+0xd8>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
1000281c:	687b      	ldr	r3, [r7, #4]
1000281e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
10002820:	f003 031f 	and.w	r3, r3, #31
10002824:	2201      	movs	r2, #1
10002826:	409a      	lsls	r2, r3
10002828:	693b      	ldr	r3, [r7, #16]
1000282a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
1000282c:	687b      	ldr	r3, [r7, #4]
1000282e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002830:	f043 0202 	orr.w	r2, r3, #2
10002834:	687b      	ldr	r3, [r7, #4]
10002836:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
10002838:	687b      	ldr	r3, [r7, #4]
1000283a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
1000283c:	f003 031f 	and.w	r3, r3, #31
10002840:	2204      	movs	r2, #4
10002842:	409a      	lsls	r2, r3
10002844:	68fb      	ldr	r3, [r7, #12]
10002846:	4013      	ands	r3, r2
10002848:	2b00      	cmp	r3, #0
1000284a:	d014      	beq.n	10002876 <HAL_DMA_IRQHandler+0x116>
    {
      if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
1000284c:	687b      	ldr	r3, [r7, #4]
1000284e:	681b      	ldr	r3, [r3, #0]
10002850:	681b      	ldr	r3, [r3, #0]
10002852:	f003 0302 	and.w	r3, r3, #2
10002856:	2b00      	cmp	r3, #0
10002858:	d00d      	beq.n	10002876 <HAL_DMA_IRQHandler+0x116>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
1000285a:	687b      	ldr	r3, [r7, #4]
1000285c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
1000285e:	f003 031f 	and.w	r3, r3, #31
10002862:	2204      	movs	r2, #4
10002864:	409a      	lsls	r2, r3
10002866:	693b      	ldr	r3, [r7, #16]
10002868:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
1000286a:	687b      	ldr	r3, [r7, #4]
1000286c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000286e:	f043 0204 	orr.w	r2, r3, #4
10002872:	687b      	ldr	r3, [r7, #4]
10002874:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
10002876:	687b      	ldr	r3, [r7, #4]
10002878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
1000287a:	f003 031f 	and.w	r3, r3, #31
1000287e:	2210      	movs	r2, #16
10002880:	409a      	lsls	r2, r3
10002882:	68fb      	ldr	r3, [r7, #12]
10002884:	4013      	ands	r3, r2
10002886:	2b00      	cmp	r3, #0
10002888:	d045      	beq.n	10002916 <HAL_DMA_IRQHandler+0x1b6>
    {
      if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
1000288a:	687b      	ldr	r3, [r7, #4]
1000288c:	681b      	ldr	r3, [r3, #0]
1000288e:	681b      	ldr	r3, [r3, #0]
10002890:	f003 0308 	and.w	r3, r3, #8
10002894:	2b00      	cmp	r3, #0
10002896:	d03e      	beq.n	10002916 <HAL_DMA_IRQHandler+0x1b6>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
10002898:	687b      	ldr	r3, [r7, #4]
1000289a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
1000289c:	f003 031f 	and.w	r3, r3, #31
100028a0:	2210      	movs	r2, #16
100028a2:	409a      	lsls	r2, r3
100028a4:	693b      	ldr	r3, [r7, #16]
100028a6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if (((((DMA_Stream_TypeDef *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
100028a8:	687b      	ldr	r3, [r7, #4]
100028aa:	681b      	ldr	r3, [r3, #0]
100028ac:	681b      	ldr	r3, [r3, #0]
100028ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
100028b2:	2b00      	cmp	r3, #0
100028b4:	d018      	beq.n	100028e8 <HAL_DMA_IRQHandler+0x188>
        {
          /* Current memory buffer used is Memory 0 */
          if ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
100028b6:	687b      	ldr	r3, [r7, #4]
100028b8:	681b      	ldr	r3, [r3, #0]
100028ba:	681b      	ldr	r3, [r3, #0]
100028bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
100028c0:	2b00      	cmp	r3, #0
100028c2:	d108      	bne.n	100028d6 <HAL_DMA_IRQHandler+0x176>
          {
            if (hdma->XferHalfCpltCallback != NULL)
100028c4:	687b      	ldr	r3, [r7, #4]
100028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100028c8:	2b00      	cmp	r3, #0
100028ca:	d024      	beq.n	10002916 <HAL_DMA_IRQHandler+0x1b6>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
100028cc:	687b      	ldr	r3, [r7, #4]
100028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100028d0:	6878      	ldr	r0, [r7, #4]
100028d2:	4798      	blx	r3
100028d4:	e01f      	b.n	10002916 <HAL_DMA_IRQHandler+0x1b6>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if (hdma->XferM1HalfCpltCallback != NULL)
100028d6:	687b      	ldr	r3, [r7, #4]
100028d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100028da:	2b00      	cmp	r3, #0
100028dc:	d01b      	beq.n	10002916 <HAL_DMA_IRQHandler+0x1b6>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
100028de:	687b      	ldr	r3, [r7, #4]
100028e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100028e2:	6878      	ldr	r0, [r7, #4]
100028e4:	4798      	blx	r3
100028e6:	e016      	b.n	10002916 <HAL_DMA_IRQHandler+0x1b6>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
100028e8:	687b      	ldr	r3, [r7, #4]
100028ea:	681b      	ldr	r3, [r3, #0]
100028ec:	681b      	ldr	r3, [r3, #0]
100028ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
100028f2:	2b00      	cmp	r3, #0
100028f4:	d107      	bne.n	10002906 <HAL_DMA_IRQHandler+0x1a6>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
100028f6:	687b      	ldr	r3, [r7, #4]
100028f8:	681b      	ldr	r3, [r3, #0]
100028fa:	681a      	ldr	r2, [r3, #0]
100028fc:	687b      	ldr	r3, [r7, #4]
100028fe:	681b      	ldr	r3, [r3, #0]
10002900:	f022 0208 	bic.w	r2, r2, #8
10002904:	601a      	str	r2, [r3, #0]
          }

          if (hdma->XferHalfCpltCallback != NULL)
10002906:	687b      	ldr	r3, [r7, #4]
10002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000290a:	2b00      	cmp	r3, #0
1000290c:	d003      	beq.n	10002916 <HAL_DMA_IRQHandler+0x1b6>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
1000290e:	687b      	ldr	r3, [r7, #4]
10002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10002912:	6878      	ldr	r0, [r7, #4]
10002914:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
10002916:	687b      	ldr	r3, [r7, #4]
10002918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
1000291a:	f003 031f 	and.w	r3, r3, #31
1000291e:	2220      	movs	r2, #32
10002920:	409a      	lsls	r2, r3
10002922:	68fb      	ldr	r3, [r7, #12]
10002924:	4013      	ands	r3, r2
10002926:	2b00      	cmp	r3, #0
10002928:	f000 8097 	beq.w	10002a5a <HAL_DMA_IRQHandler+0x2fa>
    {
      if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
1000292c:	687b      	ldr	r3, [r7, #4]
1000292e:	681b      	ldr	r3, [r3, #0]
10002930:	681b      	ldr	r3, [r3, #0]
10002932:	f003 0310 	and.w	r3, r3, #16
10002936:	2b00      	cmp	r3, #0
10002938:	f000 808f 	beq.w	10002a5a <HAL_DMA_IRQHandler+0x2fa>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
1000293c:	687b      	ldr	r3, [r7, #4]
1000293e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
10002940:	f003 031f 	and.w	r3, r3, #31
10002944:	2220      	movs	r2, #32
10002946:	409a      	lsls	r2, r3
10002948:	693b      	ldr	r3, [r7, #16]
1000294a:	609a      	str	r2, [r3, #8]

        if (HAL_DMA_STATE_ABORT == hdma->State)
1000294c:	687b      	ldr	r3, [r7, #4]
1000294e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
10002952:	b2db      	uxtb	r3, r3
10002954:	2b04      	cmp	r3, #4
10002956:	d141      	bne.n	100029dc <HAL_DMA_IRQHandler+0x27c>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
10002958:	687b      	ldr	r3, [r7, #4]
1000295a:	681b      	ldr	r3, [r3, #0]
1000295c:	681a      	ldr	r2, [r3, #0]
1000295e:	687b      	ldr	r3, [r7, #4]
10002960:	681b      	ldr	r3, [r3, #0]
10002962:	f022 0216 	bic.w	r2, r2, #22
10002966:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
10002968:	687b      	ldr	r3, [r7, #4]
1000296a:	681b      	ldr	r3, [r3, #0]
1000296c:	695a      	ldr	r2, [r3, #20]
1000296e:	687b      	ldr	r3, [r7, #4]
10002970:	681b      	ldr	r3, [r3, #0]
10002972:	f022 0280 	bic.w	r2, r2, #128	; 0x80
10002976:	615a      	str	r2, [r3, #20]

          if ((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
10002978:	687b      	ldr	r3, [r7, #4]
1000297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000297c:	2b00      	cmp	r3, #0
1000297e:	d103      	bne.n	10002988 <HAL_DMA_IRQHandler+0x228>
10002980:	687b      	ldr	r3, [r7, #4]
10002982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10002984:	2b00      	cmp	r3, #0
10002986:	d007      	beq.n	10002998 <HAL_DMA_IRQHandler+0x238>
          {
            ((DMA_Stream_TypeDef *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
10002988:	687b      	ldr	r3, [r7, #4]
1000298a:	681b      	ldr	r3, [r3, #0]
1000298c:	681a      	ldr	r2, [r3, #0]
1000298e:	687b      	ldr	r3, [r7, #4]
10002990:	681b      	ldr	r3, [r3, #0]
10002992:	f022 0208 	bic.w	r2, r2, #8
10002996:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
10002998:	687b      	ldr	r3, [r7, #4]
1000299a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
1000299c:	f003 031f 	and.w	r3, r3, #31
100029a0:	223f      	movs	r2, #63	; 0x3f
100029a2:	409a      	lsls	r2, r3
100029a4:	693b      	ldr	r3, [r7, #16]
100029a6:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
100029a8:	687b      	ldr	r3, [r7, #4]
100029aa:	2201      	movs	r2, #1
100029ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
100029b0:	687b      	ldr	r3, [r7, #4]
100029b2:	2200      	movs	r2, #0
100029b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if (hdma->XferAbortCallback != NULL)
100029b8:	687b      	ldr	r3, [r7, #4]
100029ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
100029bc:	2b00      	cmp	r3, #0
100029be:	f000 808e 	beq.w	10002ade <HAL_DMA_IRQHandler+0x37e>
          {
            hdma->XferAbortCallback(hdma);
100029c2:	687b      	ldr	r3, [r7, #4]
100029c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
100029c6:	6878      	ldr	r0, [r7, #4]
100029c8:	4798      	blx	r3
          }
          return;
100029ca:	e088      	b.n	10002ade <HAL_DMA_IRQHandler+0x37e>
100029cc:	10020000 	.word	0x10020000
100029d0:	1b4e81b5 	.word	0x1b4e81b5
100029d4:	4800000f 	.word	0x4800000f
100029d8:	480010b8 	.word	0x480010b8
        }

        if (((((DMA_Stream_TypeDef *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
100029dc:	687b      	ldr	r3, [r7, #4]
100029de:	681b      	ldr	r3, [r3, #0]
100029e0:	681b      	ldr	r3, [r3, #0]
100029e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
100029e6:	2b00      	cmp	r3, #0
100029e8:	d018      	beq.n	10002a1c <HAL_DMA_IRQHandler+0x2bc>
        {
          /* Current memory buffer used is Memory 0 */
          if ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
100029ea:	687b      	ldr	r3, [r7, #4]
100029ec:	681b      	ldr	r3, [r3, #0]
100029ee:	681b      	ldr	r3, [r3, #0]
100029f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
100029f4:	2b00      	cmp	r3, #0
100029f6:	d108      	bne.n	10002a0a <HAL_DMA_IRQHandler+0x2aa>
          {
            if (hdma->XferM1CpltCallback != NULL)
100029f8:	687b      	ldr	r3, [r7, #4]
100029fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
100029fc:	2b00      	cmp	r3, #0
100029fe:	d02c      	beq.n	10002a5a <HAL_DMA_IRQHandler+0x2fa>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
10002a00:	687b      	ldr	r3, [r7, #4]
10002a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10002a04:	6878      	ldr	r0, [r7, #4]
10002a06:	4798      	blx	r3
10002a08:	e027      	b.n	10002a5a <HAL_DMA_IRQHandler+0x2fa>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if (hdma->XferCpltCallback != NULL)
10002a0a:	687b      	ldr	r3, [r7, #4]
10002a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10002a0e:	2b00      	cmp	r3, #0
10002a10:	d023      	beq.n	10002a5a <HAL_DMA_IRQHandler+0x2fa>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
10002a12:	687b      	ldr	r3, [r7, #4]
10002a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10002a16:	6878      	ldr	r0, [r7, #4]
10002a18:	4798      	blx	r3
10002a1a:	e01e      	b.n	10002a5a <HAL_DMA_IRQHandler+0x2fa>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
10002a1c:	687b      	ldr	r3, [r7, #4]
10002a1e:	681b      	ldr	r3, [r3, #0]
10002a20:	681b      	ldr	r3, [r3, #0]
10002a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
10002a26:	2b00      	cmp	r3, #0
10002a28:	d10f      	bne.n	10002a4a <HAL_DMA_IRQHandler+0x2ea>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
10002a2a:	687b      	ldr	r3, [r7, #4]
10002a2c:	681b      	ldr	r3, [r3, #0]
10002a2e:	681a      	ldr	r2, [r3, #0]
10002a30:	687b      	ldr	r3, [r7, #4]
10002a32:	681b      	ldr	r3, [r3, #0]
10002a34:	f022 0210 	bic.w	r2, r2, #16
10002a38:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
10002a3a:	687b      	ldr	r3, [r7, #4]
10002a3c:	2201      	movs	r2, #1
10002a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
10002a42:	687b      	ldr	r3, [r7, #4]
10002a44:	2200      	movs	r2, #0
10002a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if (hdma->XferCpltCallback != NULL)
10002a4a:	687b      	ldr	r3, [r7, #4]
10002a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10002a4e:	2b00      	cmp	r3, #0
10002a50:	d003      	beq.n	10002a5a <HAL_DMA_IRQHandler+0x2fa>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
10002a52:	687b      	ldr	r3, [r7, #4]
10002a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10002a56:	6878      	ldr	r0, [r7, #4]
10002a58:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
10002a5a:	687b      	ldr	r3, [r7, #4]
10002a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002a5e:	2b00      	cmp	r3, #0
10002a60:	d03e      	beq.n	10002ae0 <HAL_DMA_IRQHandler+0x380>
    {
      if ((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
10002a62:	687b      	ldr	r3, [r7, #4]
10002a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002a66:	f003 0301 	and.w	r3, r3, #1
10002a6a:	2b00      	cmp	r3, #0
10002a6c:	d02e      	beq.n	10002acc <HAL_DMA_IRQHandler+0x36c>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
10002a6e:	687b      	ldr	r3, [r7, #4]
10002a70:	2204      	movs	r2, #4
10002a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
10002a76:	687b      	ldr	r3, [r7, #4]
10002a78:	681b      	ldr	r3, [r3, #0]
10002a7a:	681a      	ldr	r2, [r3, #0]
10002a7c:	687b      	ldr	r3, [r7, #4]
10002a7e:	681b      	ldr	r3, [r3, #0]
10002a80:	f022 0201 	bic.w	r2, r2, #1
10002a84:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
10002a86:	68bb      	ldr	r3, [r7, #8]
10002a88:	3301      	adds	r3, #1
10002a8a:	60bb      	str	r3, [r7, #8]
10002a8c:	697a      	ldr	r2, [r7, #20]
10002a8e:	429a      	cmp	r2, r3
10002a90:	d307      	bcc.n	10002aa2 <HAL_DMA_IRQHandler+0x342>
          {
            break;
          }
        }
        while ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
10002a92:	687b      	ldr	r3, [r7, #4]
10002a94:	681b      	ldr	r3, [r3, #0]
10002a96:	681b      	ldr	r3, [r3, #0]
10002a98:	f003 0301 	and.w	r3, r3, #1
10002a9c:	2b00      	cmp	r3, #0
10002a9e:	d1f2      	bne.n	10002a86 <HAL_DMA_IRQHandler+0x326>
10002aa0:	e000      	b.n	10002aa4 <HAL_DMA_IRQHandler+0x344>
            break;
10002aa2:	bf00      	nop

        if ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
10002aa4:	687b      	ldr	r3, [r7, #4]
10002aa6:	681b      	ldr	r3, [r3, #0]
10002aa8:	681b      	ldr	r3, [r3, #0]
10002aaa:	f003 0301 	and.w	r3, r3, #1
10002aae:	2b00      	cmp	r3, #0
10002ab0:	d004      	beq.n	10002abc <HAL_DMA_IRQHandler+0x35c>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
10002ab2:	687b      	ldr	r3, [r7, #4]
10002ab4:	2203      	movs	r2, #3
10002ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
10002aba:	e003      	b.n	10002ac4 <HAL_DMA_IRQHandler+0x364>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
10002abc:	687b      	ldr	r3, [r7, #4]
10002abe:	2201      	movs	r2, #1
10002ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
10002ac4:	687b      	ldr	r3, [r7, #4]
10002ac6:	2200      	movs	r2, #0
10002ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if (hdma->XferErrorCallback != NULL)
10002acc:	687b      	ldr	r3, [r7, #4]
10002ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10002ad0:	2b00      	cmp	r3, #0
10002ad2:	d005      	beq.n	10002ae0 <HAL_DMA_IRQHandler+0x380>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
10002ad4:	687b      	ldr	r3, [r7, #4]
10002ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10002ad8:	6878      	ldr	r0, [r7, #4]
10002ada:	4798      	blx	r3
10002adc:	e000      	b.n	10002ae0 <HAL_DMA_IRQHandler+0x380>
          return;
10002ade:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
10002ae0:	3718      	adds	r7, #24
10002ae2:	46bd      	mov	sp, r7
10002ae4:	bd80      	pop	{r7, pc}
10002ae6:	bf00      	nop

10002ae8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
10002ae8:	b480      	push	{r7}
10002aea:	b085      	sub	sp, #20
10002aec:	af00      	add	r7, sp, #0
10002aee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)((uint32_t *)hdma->Instance) & 0xFFU) - 16U) / 24U;
10002af0:	687b      	ldr	r3, [r7, #4]
10002af2:	681b      	ldr	r3, [r3, #0]
10002af4:	b2db      	uxtb	r3, r3
10002af6:	3b10      	subs	r3, #16
10002af8:	4a14      	ldr	r2, [pc, #80]	; (10002b4c <DMA_CalcBaseAndBitshift+0x64>)
10002afa:	fba2 2303 	umull	r2, r3, r2, r3
10002afe:	091b      	lsrs	r3, r3, #4
10002b00:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
10002b02:	68fb      	ldr	r3, [r7, #12]
10002b04:	f003 0307 	and.w	r3, r3, #7
10002b08:	4a11      	ldr	r2, [pc, #68]	; (10002b50 <DMA_CalcBaseAndBitshift+0x68>)
10002b0a:	5cd3      	ldrb	r3, [r2, r3]
10002b0c:	461a      	mov	r2, r3
10002b0e:	687b      	ldr	r3, [r7, #4]
10002b10:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
10002b12:	68fb      	ldr	r3, [r7, #12]
10002b14:	2b03      	cmp	r3, #3
10002b16:	d909      	bls.n	10002b2c <DMA_CalcBaseAndBitshift+0x44>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)((uint32_t *)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
10002b18:	687b      	ldr	r3, [r7, #4]
10002b1a:	681b      	ldr	r3, [r3, #0]
10002b1c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
10002b20:	f023 0303 	bic.w	r3, r3, #3
10002b24:	1d1a      	adds	r2, r3, #4
10002b26:	687b      	ldr	r3, [r7, #4]
10002b28:	659a      	str	r2, [r3, #88]	; 0x58
10002b2a:	e007      	b.n	10002b3c <DMA_CalcBaseAndBitshift+0x54>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t *)hdma->Instance) & (uint32_t)(~0x3FFU));
10002b2c:	687b      	ldr	r3, [r7, #4]
10002b2e:	681b      	ldr	r3, [r3, #0]
10002b30:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
10002b34:	f023 0303 	bic.w	r3, r3, #3
10002b38:	687a      	ldr	r2, [r7, #4]
10002b3a:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
10002b3c:	687b      	ldr	r3, [r7, #4]
10002b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
10002b40:	4618      	mov	r0, r3
10002b42:	3714      	adds	r7, #20
10002b44:	46bd      	mov	sp, r7
10002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
10002b4a:	4770      	bx	lr
10002b4c:	aaaaaaab 	.word	0xaaaaaaab
10002b50:	1000daf4 	.word	0x1000daf4

10002b54 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
10002b54:	b480      	push	{r7}
10002b56:	b085      	sub	sp, #20
10002b58:	af00      	add	r7, sp, #0
10002b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
10002b5c:	2300      	movs	r3, #0
10002b5e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
10002b60:	687b      	ldr	r3, [r7, #4]
10002b62:	699b      	ldr	r3, [r3, #24]
10002b64:	2b00      	cmp	r3, #0
10002b66:	d120      	bne.n	10002baa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
10002b68:	687b      	ldr	r3, [r7, #4]
10002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002b6c:	2b03      	cmp	r3, #3
10002b6e:	d858      	bhi.n	10002c22 <DMA_CheckFifoParam+0xce>
10002b70:	a201      	add	r2, pc, #4	; (adr r2, 10002b78 <DMA_CheckFifoParam+0x24>)
10002b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10002b76:	bf00      	nop
10002b78:	10002b89 	.word	0x10002b89
10002b7c:	10002b9b 	.word	0x10002b9b
10002b80:	10002b89 	.word	0x10002b89
10002b84:	10002c23 	.word	0x10002c23
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
10002b88:	687b      	ldr	r3, [r7, #4]
10002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10002b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
10002b90:	2b00      	cmp	r3, #0
10002b92:	d048      	beq.n	10002c26 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
10002b94:	2301      	movs	r3, #1
10002b96:	73fb      	strb	r3, [r7, #15]
        }
        break;
10002b98:	e045      	b.n	10002c26 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
10002b9a:	687b      	ldr	r3, [r7, #4]
10002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10002b9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
10002ba2:	d142      	bne.n	10002c2a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
10002ba4:	2301      	movs	r3, #1
10002ba6:	73fb      	strb	r3, [r7, #15]
        }
        break;
10002ba8:	e03f      	b.n	10002c2a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
10002baa:	687b      	ldr	r3, [r7, #4]
10002bac:	699b      	ldr	r3, [r3, #24]
10002bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
10002bb2:	d123      	bne.n	10002bfc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
10002bb4:	687b      	ldr	r3, [r7, #4]
10002bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002bb8:	2b03      	cmp	r3, #3
10002bba:	d838      	bhi.n	10002c2e <DMA_CheckFifoParam+0xda>
10002bbc:	a201      	add	r2, pc, #4	; (adr r2, 10002bc4 <DMA_CheckFifoParam+0x70>)
10002bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10002bc2:	bf00      	nop
10002bc4:	10002bd5 	.word	0x10002bd5
10002bc8:	10002bdb 	.word	0x10002bdb
10002bcc:	10002bd5 	.word	0x10002bd5
10002bd0:	10002bed 	.word	0x10002bed
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
10002bd4:	2301      	movs	r3, #1
10002bd6:	73fb      	strb	r3, [r7, #15]
        break;
10002bd8:	e030      	b.n	10002c3c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
10002bda:	687b      	ldr	r3, [r7, #4]
10002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10002bde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
10002be2:	2b00      	cmp	r3, #0
10002be4:	d025      	beq.n	10002c32 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
10002be6:	2301      	movs	r3, #1
10002be8:	73fb      	strb	r3, [r7, #15]
        }
        break;
10002bea:	e022      	b.n	10002c32 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
10002bec:	687b      	ldr	r3, [r7, #4]
10002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10002bf0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
10002bf4:	d11f      	bne.n	10002c36 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
10002bf6:	2301      	movs	r3, #1
10002bf8:	73fb      	strb	r3, [r7, #15]
        }
        break;
10002bfa:	e01c      	b.n	10002c36 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
10002bfc:	687b      	ldr	r3, [r7, #4]
10002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002c00:	2b02      	cmp	r3, #2
10002c02:	d902      	bls.n	10002c0a <DMA_CheckFifoParam+0xb6>
10002c04:	2b03      	cmp	r3, #3
10002c06:	d003      	beq.n	10002c10 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
        break;

      default:
        break;
10002c08:	e018      	b.n	10002c3c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
10002c0a:	2301      	movs	r3, #1
10002c0c:	73fb      	strb	r3, [r7, #15]
        break;
10002c0e:	e015      	b.n	10002c3c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
10002c10:	687b      	ldr	r3, [r7, #4]
10002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10002c14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
10002c18:	2b00      	cmp	r3, #0
10002c1a:	d00e      	beq.n	10002c3a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
10002c1c:	2301      	movs	r3, #1
10002c1e:	73fb      	strb	r3, [r7, #15]
        break;
10002c20:	e00b      	b.n	10002c3a <DMA_CheckFifoParam+0xe6>
        break;
10002c22:	bf00      	nop
10002c24:	e00a      	b.n	10002c3c <DMA_CheckFifoParam+0xe8>
        break;
10002c26:	bf00      	nop
10002c28:	e008      	b.n	10002c3c <DMA_CheckFifoParam+0xe8>
        break;
10002c2a:	bf00      	nop
10002c2c:	e006      	b.n	10002c3c <DMA_CheckFifoParam+0xe8>
        break;
10002c2e:	bf00      	nop
10002c30:	e004      	b.n	10002c3c <DMA_CheckFifoParam+0xe8>
        break;
10002c32:	bf00      	nop
10002c34:	e002      	b.n	10002c3c <DMA_CheckFifoParam+0xe8>
        break;
10002c36:	bf00      	nop
10002c38:	e000      	b.n	10002c3c <DMA_CheckFifoParam+0xe8>
        break;
10002c3a:	bf00      	nop
    }
  }

  return status;
10002c3c:	7bfb      	ldrb	r3, [r7, #15]
}
10002c3e:	4618      	mov	r0, r3
10002c40:	3714      	adds	r7, #20
10002c42:	46bd      	mov	sp, r7
10002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
10002c48:	4770      	bx	lr
10002c4a:	bf00      	nop

10002c4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
10002c4c:	b480      	push	{r7}
10002c4e:	b085      	sub	sp, #20
10002c50:	af00      	add	r7, sp, #0
10002c52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t *)hdma->Instance);
10002c54:	687b      	ldr	r3, [r7, #4]
10002c56:	681b      	ldr	r3, [r3, #0]
10002c58:	60bb      	str	r3, [r7, #8]
  /*DMA1/DMA2 Streams are connected to DMAMUX1 channels*/
  stream_number = (((uint32_t)((uint32_t *)hdma->Instance) & 0xFFU) - 16U) / 24U;
10002c5a:	687b      	ldr	r3, [r7, #4]
10002c5c:	681b      	ldr	r3, [r3, #0]
10002c5e:	b2db      	uxtb	r3, r3
10002c60:	3b10      	subs	r3, #16
10002c62:	4a14      	ldr	r2, [pc, #80]	; (10002cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
10002c64:	fba2 2303 	umull	r2, r3, r2, r3
10002c68:	091b      	lsrs	r3, r3, #4
10002c6a:	60fb      	str	r3, [r7, #12]

  if ((stream_baseaddress <= ((uint32_t)DMA2_Stream7)) && \
10002c6c:	68bb      	ldr	r3, [r7, #8]
10002c6e:	4a12      	ldr	r2, [pc, #72]	; (10002cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
10002c70:	4293      	cmp	r3, r2
10002c72:	d806      	bhi.n	10002c82 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
10002c74:	68bb      	ldr	r3, [r7, #8]
10002c76:	4a11      	ldr	r2, [pc, #68]	; (10002cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
10002c78:	4293      	cmp	r3, r2
10002c7a:	d902      	bls.n	10002c82 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
      (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
  {
    stream_number += 8U;
10002c7c:	68fb      	ldr	r3, [r7, #12]
10002c7e:	3308      	adds	r3, #8
10002c80:	60fb      	str	r3, [r7, #12]
  }

  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
10002c82:	68fb      	ldr	r3, [r7, #12]
10002c84:	f103 5390 	add.w	r3, r3, #301989888	; 0x12000000
10002c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
10002c8c:	009b      	lsls	r3, r3, #2
10002c8e:	461a      	mov	r2, r3
10002c90:	687b      	ldr	r3, [r7, #4]
10002c92:	661a      	str	r2, [r3, #96]	; 0x60
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
10002c94:	687b      	ldr	r3, [r7, #4]
10002c96:	4a0a      	ldr	r2, [pc, #40]	; (10002cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
10002c98:	665a      	str	r2, [r3, #100]	; 0x64
  hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
10002c9a:	68fb      	ldr	r3, [r7, #12]
10002c9c:	f003 031f 	and.w	r3, r3, #31
10002ca0:	2201      	movs	r2, #1
10002ca2:	409a      	lsls	r2, r3
10002ca4:	687b      	ldr	r3, [r7, #4]
10002ca6:	669a      	str	r2, [r3, #104]	; 0x68

}
10002ca8:	bf00      	nop
10002caa:	3714      	adds	r7, #20
10002cac:	46bd      	mov	sp, r7
10002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
10002cb2:	4770      	bx	lr
10002cb4:	aaaaaaab 	.word	0xaaaaaaab
10002cb8:	480010b8 	.word	0x480010b8
10002cbc:	4800100f 	.word	0x4800100f
10002cc0:	48002080 	.word	0x48002080

10002cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
10002cc4:	b480      	push	{r7}
10002cc6:	b085      	sub	sp, #20
10002cc8:	af00      	add	r7, sp, #0
10002cca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
10002ccc:	687b      	ldr	r3, [r7, #4]
10002cce:	685b      	ldr	r3, [r3, #4]
10002cd0:	b2db      	uxtb	r3, r3
10002cd2:	60fb      	str	r3, [r7, #12]

  if ((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
10002cd4:	68fb      	ldr	r3, [r7, #12]
10002cd6:	2b00      	cmp	r3, #0
10002cd8:	d014      	beq.n	10002d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>
10002cda:	68fb      	ldr	r3, [r7, #12]
10002cdc:	2b08      	cmp	r3, #8
10002cde:	d811      	bhi.n	10002d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>
  {
    /*DMA1 and DMA2 Streams use DMAMUX1 request generator blocks*/
    hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
10002ce0:	68fb      	ldr	r3, [r7, #12]
10002ce2:	f103 5390 	add.w	r3, r3, #301989888	; 0x12000000
10002ce6:	f603 033f 	addw	r3, r3, #2111	; 0x83f
10002cea:	009b      	lsls	r3, r3, #2
10002cec:	461a      	mov	r2, r3
10002cee:	687b      	ldr	r3, [r7, #4]
10002cf0:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
10002cf2:	687b      	ldr	r3, [r7, #4]
10002cf4:	4a06      	ldr	r2, [pc, #24]	; (10002d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4c>)
10002cf6:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
10002cf8:	68fb      	ldr	r3, [r7, #12]
10002cfa:	3b01      	subs	r3, #1
10002cfc:	2201      	movs	r2, #1
10002cfe:	409a      	lsls	r2, r3
10002d00:	687b      	ldr	r3, [r7, #4]
10002d02:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
10002d04:	bf00      	nop
10002d06:	3714      	adds	r7, #20
10002d08:	46bd      	mov	sp, r7
10002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
10002d0e:	4770      	bx	lr
10002d10:	48002140 	.word	0x48002140

10002d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
10002d14:	b480      	push	{r7}
10002d16:	b089      	sub	sp, #36	; 0x24
10002d18:	af00      	add	r7, sp, #0
10002d1a:	6078      	str	r0, [r7, #4]
10002d1c:	6039      	str	r1, [r7, #0]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef * EXTI_CurrentCPU;

#if defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_C2; /* EXTI for CM4 CPU */
10002d1e:	4b8a      	ldr	r3, [pc, #552]	; (10002f48 <HAL_GPIO_Init+0x234>)
10002d20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
10002d22:	2300      	movs	r3, #0
10002d24:	61fb      	str	r3, [r7, #28]
10002d26:	e191      	b.n	1000304c <HAL_GPIO_Init+0x338>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
10002d28:	2201      	movs	r2, #1
10002d2a:	69fb      	ldr	r3, [r7, #28]
10002d2c:	fa02 f303 	lsl.w	r3, r2, r3
10002d30:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
10002d32:	683b      	ldr	r3, [r7, #0]
10002d34:	681b      	ldr	r3, [r3, #0]
10002d36:	693a      	ldr	r2, [r7, #16]
10002d38:	4013      	ands	r3, r2
10002d3a:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
10002d3c:	68fa      	ldr	r2, [r7, #12]
10002d3e:	693b      	ldr	r3, [r7, #16]
10002d40:	429a      	cmp	r2, r3
10002d42:	f040 8180 	bne.w	10003046 <HAL_GPIO_Init+0x332>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10002d46:	683b      	ldr	r3, [r7, #0]
10002d48:	685b      	ldr	r3, [r3, #4]
10002d4a:	2b02      	cmp	r3, #2
10002d4c:	d003      	beq.n	10002d56 <HAL_GPIO_Init+0x42>
10002d4e:	683b      	ldr	r3, [r7, #0]
10002d50:	685b      	ldr	r3, [r3, #4]
10002d52:	2b12      	cmp	r3, #18
10002d54:	d123      	bne.n	10002d9e <HAL_GPIO_Init+0x8a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
10002d56:	69fb      	ldr	r3, [r7, #28]
10002d58:	08da      	lsrs	r2, r3, #3
10002d5a:	687b      	ldr	r3, [r7, #4]
10002d5c:	3208      	adds	r2, #8
10002d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
10002d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
10002d64:	69fb      	ldr	r3, [r7, #28]
10002d66:	f003 0307 	and.w	r3, r3, #7
10002d6a:	009b      	lsls	r3, r3, #2
10002d6c:	220f      	movs	r2, #15
10002d6e:	fa02 f303 	lsl.w	r3, r2, r3
10002d72:	43db      	mvns	r3, r3
10002d74:	69ba      	ldr	r2, [r7, #24]
10002d76:	4013      	ands	r3, r2
10002d78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
10002d7a:	683b      	ldr	r3, [r7, #0]
10002d7c:	691a      	ldr	r2, [r3, #16]
10002d7e:	69fb      	ldr	r3, [r7, #28]
10002d80:	f003 0307 	and.w	r3, r3, #7
10002d84:	009b      	lsls	r3, r3, #2
10002d86:	fa02 f303 	lsl.w	r3, r2, r3
10002d8a:	69ba      	ldr	r2, [r7, #24]
10002d8c:	4313      	orrs	r3, r2
10002d8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
10002d90:	69fb      	ldr	r3, [r7, #28]
10002d92:	08da      	lsrs	r2, r3, #3
10002d94:	687b      	ldr	r3, [r7, #4]
10002d96:	3208      	adds	r2, #8
10002d98:	69b9      	ldr	r1, [r7, #24]
10002d9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
10002d9e:	687b      	ldr	r3, [r7, #4]
10002da0:	681b      	ldr	r3, [r3, #0]
10002da2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
10002da4:	69fb      	ldr	r3, [r7, #28]
10002da6:	005b      	lsls	r3, r3, #1
10002da8:	2203      	movs	r2, #3
10002daa:	fa02 f303 	lsl.w	r3, r2, r3
10002dae:	43db      	mvns	r3, r3
10002db0:	69ba      	ldr	r2, [r7, #24]
10002db2:	4013      	ands	r3, r2
10002db4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
10002db6:	683b      	ldr	r3, [r7, #0]
10002db8:	685b      	ldr	r3, [r3, #4]
10002dba:	f003 0203 	and.w	r2, r3, #3
10002dbe:	69fb      	ldr	r3, [r7, #28]
10002dc0:	005b      	lsls	r3, r3, #1
10002dc2:	fa02 f303 	lsl.w	r3, r2, r3
10002dc6:	69ba      	ldr	r2, [r7, #24]
10002dc8:	4313      	orrs	r3, r2
10002dca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
10002dcc:	687b      	ldr	r3, [r7, #4]
10002dce:	69ba      	ldr	r2, [r7, #24]
10002dd0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10002dd2:	683b      	ldr	r3, [r7, #0]
10002dd4:	685b      	ldr	r3, [r3, #4]
10002dd6:	2b01      	cmp	r3, #1
10002dd8:	d00b      	beq.n	10002df2 <HAL_GPIO_Init+0xde>
10002dda:	683b      	ldr	r3, [r7, #0]
10002ddc:	685b      	ldr	r3, [r3, #4]
10002dde:	2b02      	cmp	r3, #2
10002de0:	d007      	beq.n	10002df2 <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10002de2:	683b      	ldr	r3, [r7, #0]
10002de4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10002de6:	2b11      	cmp	r3, #17
10002de8:	d003      	beq.n	10002df2 <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10002dea:	683b      	ldr	r3, [r7, #0]
10002dec:	685b      	ldr	r3, [r3, #4]
10002dee:	2b12      	cmp	r3, #18
10002df0:	d130      	bne.n	10002e54 <HAL_GPIO_Init+0x140>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10002df2:	687b      	ldr	r3, [r7, #4]
10002df4:	689b      	ldr	r3, [r3, #8]
10002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
10002df8:	69fb      	ldr	r3, [r7, #28]
10002dfa:	005b      	lsls	r3, r3, #1
10002dfc:	2203      	movs	r2, #3
10002dfe:	fa02 f303 	lsl.w	r3, r2, r3
10002e02:	43db      	mvns	r3, r3
10002e04:	69ba      	ldr	r2, [r7, #24]
10002e06:	4013      	ands	r3, r2
10002e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
10002e0a:	683b      	ldr	r3, [r7, #0]
10002e0c:	68da      	ldr	r2, [r3, #12]
10002e0e:	69fb      	ldr	r3, [r7, #28]
10002e10:	005b      	lsls	r3, r3, #1
10002e12:	fa02 f303 	lsl.w	r3, r2, r3
10002e16:	69ba      	ldr	r2, [r7, #24]
10002e18:	4313      	orrs	r3, r2
10002e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
10002e1c:	687b      	ldr	r3, [r7, #4]
10002e1e:	69ba      	ldr	r2, [r7, #24]
10002e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
10002e22:	687b      	ldr	r3, [r7, #4]
10002e24:	685b      	ldr	r3, [r3, #4]
10002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10002e28:	2201      	movs	r2, #1
10002e2a:	69fb      	ldr	r3, [r7, #28]
10002e2c:	fa02 f303 	lsl.w	r3, r2, r3
10002e30:	43db      	mvns	r3, r3
10002e32:	69ba      	ldr	r2, [r7, #24]
10002e34:	4013      	ands	r3, r2
10002e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
10002e38:	683b      	ldr	r3, [r7, #0]
10002e3a:	685b      	ldr	r3, [r3, #4]
10002e3c:	091b      	lsrs	r3, r3, #4
10002e3e:	f003 0201 	and.w	r2, r3, #1
10002e42:	69fb      	ldr	r3, [r7, #28]
10002e44:	fa02 f303 	lsl.w	r3, r2, r3
10002e48:	69ba      	ldr	r2, [r7, #24]
10002e4a:	4313      	orrs	r3, r2
10002e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
10002e4e:	687b      	ldr	r3, [r7, #4]
10002e50:	69ba      	ldr	r2, [r7, #24]
10002e52:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
10002e54:	687b      	ldr	r3, [r7, #4]
10002e56:	68db      	ldr	r3, [r3, #12]
10002e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
10002e5a:	69fb      	ldr	r3, [r7, #28]
10002e5c:	005b      	lsls	r3, r3, #1
10002e5e:	2203      	movs	r2, #3
10002e60:	fa02 f303 	lsl.w	r3, r2, r3
10002e64:	43db      	mvns	r3, r3
10002e66:	69ba      	ldr	r2, [r7, #24]
10002e68:	4013      	ands	r3, r2
10002e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
10002e6c:	683b      	ldr	r3, [r7, #0]
10002e6e:	689a      	ldr	r2, [r3, #8]
10002e70:	69fb      	ldr	r3, [r7, #28]
10002e72:	005b      	lsls	r3, r3, #1
10002e74:	fa02 f303 	lsl.w	r3, r2, r3
10002e78:	69ba      	ldr	r2, [r7, #24]
10002e7a:	4313      	orrs	r3, r2
10002e7c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
10002e7e:	687b      	ldr	r3, [r7, #4]
10002e80:	69ba      	ldr	r2, [r7, #24]
10002e82:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
10002e84:	683b      	ldr	r3, [r7, #0]
10002e86:	685b      	ldr	r3, [r3, #4]
10002e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
10002e8c:	2b00      	cmp	r3, #0
10002e8e:	f000 80da 	beq.w	10003046 <HAL_GPIO_Init+0x332>
      {
        temp = EXTI->EXTICR[position >> 2U];
10002e92:	4a2e      	ldr	r2, [pc, #184]	; (10002f4c <HAL_GPIO_Init+0x238>)
10002e94:	69fb      	ldr	r3, [r7, #28]
10002e96:	089b      	lsrs	r3, r3, #2
10002e98:	3318      	adds	r3, #24
10002e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10002e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFFU << (8U * (position & 0x03U)));
10002ea0:	69fb      	ldr	r3, [r7, #28]
10002ea2:	f003 0303 	and.w	r3, r3, #3
10002ea6:	00db      	lsls	r3, r3, #3
10002ea8:	22ff      	movs	r2, #255	; 0xff
10002eaa:	fa02 f303 	lsl.w	r3, r2, r3
10002eae:	43db      	mvns	r3, r3
10002eb0:	69ba      	ldr	r2, [r7, #24]
10002eb2:	4013      	ands	r3, r2
10002eb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
10002eb6:	687b      	ldr	r3, [r7, #4]
10002eb8:	4a25      	ldr	r2, [pc, #148]	; (10002f50 <HAL_GPIO_Init+0x23c>)
10002eba:	4293      	cmp	r3, r2
10002ebc:	d05e      	beq.n	10002f7c <HAL_GPIO_Init+0x268>
10002ebe:	687b      	ldr	r3, [r7, #4]
10002ec0:	4a24      	ldr	r2, [pc, #144]	; (10002f54 <HAL_GPIO_Init+0x240>)
10002ec2:	4293      	cmp	r3, r2
10002ec4:	d03d      	beq.n	10002f42 <HAL_GPIO_Init+0x22e>
10002ec6:	687b      	ldr	r3, [r7, #4]
10002ec8:	4a23      	ldr	r2, [pc, #140]	; (10002f58 <HAL_GPIO_Init+0x244>)
10002eca:	4293      	cmp	r3, r2
10002ecc:	d037      	beq.n	10002f3e <HAL_GPIO_Init+0x22a>
10002ece:	687b      	ldr	r3, [r7, #4]
10002ed0:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
10002ed4:	d031      	beq.n	10002f3a <HAL_GPIO_Init+0x226>
10002ed6:	687b      	ldr	r3, [r7, #4]
10002ed8:	4a20      	ldr	r2, [pc, #128]	; (10002f5c <HAL_GPIO_Init+0x248>)
10002eda:	4293      	cmp	r3, r2
10002edc:	d02b      	beq.n	10002f36 <HAL_GPIO_Init+0x222>
10002ede:	687b      	ldr	r3, [r7, #4]
10002ee0:	4a1f      	ldr	r2, [pc, #124]	; (10002f60 <HAL_GPIO_Init+0x24c>)
10002ee2:	4293      	cmp	r3, r2
10002ee4:	d025      	beq.n	10002f32 <HAL_GPIO_Init+0x21e>
10002ee6:	687b      	ldr	r3, [r7, #4]
10002ee8:	4a1e      	ldr	r2, [pc, #120]	; (10002f64 <HAL_GPIO_Init+0x250>)
10002eea:	4293      	cmp	r3, r2
10002eec:	d01f      	beq.n	10002f2e <HAL_GPIO_Init+0x21a>
10002eee:	687b      	ldr	r3, [r7, #4]
10002ef0:	4a1d      	ldr	r2, [pc, #116]	; (10002f68 <HAL_GPIO_Init+0x254>)
10002ef2:	4293      	cmp	r3, r2
10002ef4:	d019      	beq.n	10002f2a <HAL_GPIO_Init+0x216>
10002ef6:	687b      	ldr	r3, [r7, #4]
10002ef8:	4a1c      	ldr	r2, [pc, #112]	; (10002f6c <HAL_GPIO_Init+0x258>)
10002efa:	4293      	cmp	r3, r2
10002efc:	d013      	beq.n	10002f26 <HAL_GPIO_Init+0x212>
10002efe:	687b      	ldr	r3, [r7, #4]
10002f00:	4a1b      	ldr	r2, [pc, #108]	; (10002f70 <HAL_GPIO_Init+0x25c>)
10002f02:	4293      	cmp	r3, r2
10002f04:	d00d      	beq.n	10002f22 <HAL_GPIO_Init+0x20e>
10002f06:	687b      	ldr	r3, [r7, #4]
10002f08:	4a1a      	ldr	r2, [pc, #104]	; (10002f74 <HAL_GPIO_Init+0x260>)
10002f0a:	4293      	cmp	r3, r2
10002f0c:	d007      	beq.n	10002f1e <HAL_GPIO_Init+0x20a>
10002f0e:	687b      	ldr	r3, [r7, #4]
10002f10:	4a19      	ldr	r2, [pc, #100]	; (10002f78 <HAL_GPIO_Init+0x264>)
10002f12:	4293      	cmp	r3, r2
10002f14:	d101      	bne.n	10002f1a <HAL_GPIO_Init+0x206>
10002f16:	230b      	movs	r3, #11
10002f18:	e031      	b.n	10002f7e <HAL_GPIO_Init+0x26a>
10002f1a:	2319      	movs	r3, #25
10002f1c:	e02f      	b.n	10002f7e <HAL_GPIO_Init+0x26a>
10002f1e:	230a      	movs	r3, #10
10002f20:	e02d      	b.n	10002f7e <HAL_GPIO_Init+0x26a>
10002f22:	2309      	movs	r3, #9
10002f24:	e02b      	b.n	10002f7e <HAL_GPIO_Init+0x26a>
10002f26:	2308      	movs	r3, #8
10002f28:	e029      	b.n	10002f7e <HAL_GPIO_Init+0x26a>
10002f2a:	2307      	movs	r3, #7
10002f2c:	e027      	b.n	10002f7e <HAL_GPIO_Init+0x26a>
10002f2e:	2306      	movs	r3, #6
10002f30:	e025      	b.n	10002f7e <HAL_GPIO_Init+0x26a>
10002f32:	2305      	movs	r3, #5
10002f34:	e023      	b.n	10002f7e <HAL_GPIO_Init+0x26a>
10002f36:	2304      	movs	r3, #4
10002f38:	e021      	b.n	10002f7e <HAL_GPIO_Init+0x26a>
10002f3a:	2303      	movs	r3, #3
10002f3c:	e01f      	b.n	10002f7e <HAL_GPIO_Init+0x26a>
10002f3e:	2302      	movs	r3, #2
10002f40:	e01d      	b.n	10002f7e <HAL_GPIO_Init+0x26a>
10002f42:	2301      	movs	r3, #1
10002f44:	e01b      	b.n	10002f7e <HAL_GPIO_Init+0x26a>
10002f46:	bf00      	nop
10002f48:	5000d0c0 	.word	0x5000d0c0
10002f4c:	5000d000 	.word	0x5000d000
10002f50:	50002000 	.word	0x50002000
10002f54:	50003000 	.word	0x50003000
10002f58:	50004000 	.word	0x50004000
10002f5c:	50006000 	.word	0x50006000
10002f60:	50007000 	.word	0x50007000
10002f64:	50008000 	.word	0x50008000
10002f68:	50009000 	.word	0x50009000
10002f6c:	5000a000 	.word	0x5000a000
10002f70:	5000b000 	.word	0x5000b000
10002f74:	5000c000 	.word	0x5000c000
10002f78:	54004000 	.word	0x54004000
10002f7c:	2300      	movs	r3, #0
10002f7e:	69fa      	ldr	r2, [r7, #28]
10002f80:	f002 0203 	and.w	r2, r2, #3
10002f84:	00d2      	lsls	r2, r2, #3
10002f86:	4093      	lsls	r3, r2
10002f88:	461a      	mov	r2, r3
10002f8a:	69bb      	ldr	r3, [r7, #24]
10002f8c:	4313      	orrs	r3, r2
10002f8e:	61bb      	str	r3, [r7, #24]
        EXTI->EXTICR[position >> 2U] = temp;
10002f90:	4934      	ldr	r1, [pc, #208]	; (10003064 <HAL_GPIO_Init+0x350>)
10002f92:	69fb      	ldr	r3, [r7, #28]
10002f94:	089b      	lsrs	r3, r3, #2
10002f96:	3318      	adds	r3, #24
10002f98:	69ba      	ldr	r2, [r7, #24]
10002f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
10002f9e:	697b      	ldr	r3, [r7, #20]
10002fa0:	681b      	ldr	r3, [r3, #0]
10002fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10002fa4:	68fb      	ldr	r3, [r7, #12]
10002fa6:	43db      	mvns	r3, r3
10002fa8:	69ba      	ldr	r2, [r7, #24]
10002faa:	4013      	ands	r3, r2
10002fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
10002fae:	683b      	ldr	r3, [r7, #0]
10002fb0:	685b      	ldr	r3, [r3, #4]
10002fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
10002fb6:	2b00      	cmp	r3, #0
10002fb8:	d003      	beq.n	10002fc2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
10002fba:	69ba      	ldr	r2, [r7, #24]
10002fbc:	68fb      	ldr	r3, [r7, #12]
10002fbe:	4313      	orrs	r3, r2
10002fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
10002fc2:	697b      	ldr	r3, [r7, #20]
10002fc4:	69ba      	ldr	r2, [r7, #24]
10002fc6:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
10002fc8:	697b      	ldr	r3, [r7, #20]
10002fca:	685b      	ldr	r3, [r3, #4]
10002fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10002fce:	68fb      	ldr	r3, [r7, #12]
10002fd0:	43db      	mvns	r3, r3
10002fd2:	69ba      	ldr	r2, [r7, #24]
10002fd4:	4013      	ands	r3, r2
10002fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
10002fd8:	683b      	ldr	r3, [r7, #0]
10002fda:	685b      	ldr	r3, [r3, #4]
10002fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
10002fe0:	2b00      	cmp	r3, #0
10002fe2:	d003      	beq.n	10002fec <HAL_GPIO_Init+0x2d8>
        {
          temp |= iocurrent;
10002fe4:	69ba      	ldr	r2, [r7, #24]
10002fe6:	68fb      	ldr	r3, [r7, #12]
10002fe8:	4313      	orrs	r3, r2
10002fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
10002fec:	697b      	ldr	r3, [r7, #20]
10002fee:	69ba      	ldr	r2, [r7, #24]
10002ff0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
10002ff2:	4b1c      	ldr	r3, [pc, #112]	; (10003064 <HAL_GPIO_Init+0x350>)
10002ff4:	681b      	ldr	r3, [r3, #0]
10002ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10002ff8:	68fb      	ldr	r3, [r7, #12]
10002ffa:	43db      	mvns	r3, r3
10002ffc:	69ba      	ldr	r2, [r7, #24]
10002ffe:	4013      	ands	r3, r2
10003000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
10003002:	683b      	ldr	r3, [r7, #0]
10003004:	685b      	ldr	r3, [r3, #4]
10003006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
1000300a:	2b00      	cmp	r3, #0
1000300c:	d003      	beq.n	10003016 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
1000300e:	69ba      	ldr	r2, [r7, #24]
10003010:	68fb      	ldr	r3, [r7, #12]
10003012:	4313      	orrs	r3, r2
10003014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
10003016:	4a13      	ldr	r2, [pc, #76]	; (10003064 <HAL_GPIO_Init+0x350>)
10003018:	69bb      	ldr	r3, [r7, #24]
1000301a:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
1000301c:	4b11      	ldr	r3, [pc, #68]	; (10003064 <HAL_GPIO_Init+0x350>)
1000301e:	685b      	ldr	r3, [r3, #4]
10003020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10003022:	68fb      	ldr	r3, [r7, #12]
10003024:	43db      	mvns	r3, r3
10003026:	69ba      	ldr	r2, [r7, #24]
10003028:	4013      	ands	r3, r2
1000302a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
1000302c:	683b      	ldr	r3, [r7, #0]
1000302e:	685b      	ldr	r3, [r3, #4]
10003030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
10003034:	2b00      	cmp	r3, #0
10003036:	d003      	beq.n	10003040 <HAL_GPIO_Init+0x32c>
        {
          temp |= iocurrent;
10003038:	69ba      	ldr	r2, [r7, #24]
1000303a:	68fb      	ldr	r3, [r7, #12]
1000303c:	4313      	orrs	r3, r2
1000303e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
10003040:	4a08      	ldr	r2, [pc, #32]	; (10003064 <HAL_GPIO_Init+0x350>)
10003042:	69bb      	ldr	r3, [r7, #24]
10003044:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
10003046:	69fb      	ldr	r3, [r7, #28]
10003048:	3301      	adds	r3, #1
1000304a:	61fb      	str	r3, [r7, #28]
1000304c:	69fb      	ldr	r3, [r7, #28]
1000304e:	2b0f      	cmp	r3, #15
10003050:	f67f ae6a 	bls.w	10002d28 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
10003054:	bf00      	nop
10003056:	bf00      	nop
10003058:	3724      	adds	r7, #36	; 0x24
1000305a:	46bd      	mov	sp, r7
1000305c:	f85d 7b04 	ldr.w	r7, [sp], #4
10003060:	4770      	bx	lr
10003062:	bf00      	nop
10003064:	5000d000 	.word	0x5000d000

10003068 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
10003068:	b580      	push	{r7, lr}
1000306a:	b084      	sub	sp, #16
1000306c:	af00      	add	r7, sp, #0
1000306e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
10003070:	2300      	movs	r3, #0
10003072:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
10003074:	687b      	ldr	r3, [r7, #4]
10003076:	2b00      	cmp	r3, #0
10003078:	d01e      	beq.n	100030b8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

#if defined(CORE_CM4)
    IPCC_CommonTypeDef *currentInstance = IPCC_C2;
1000307a:	4b13      	ldr	r3, [pc, #76]	; (100030c8 <HAL_IPCC_Init+0x60>)
1000307c:	60bb      	str	r3, [r7, #8]
#else
    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

    if (hipcc->State == HAL_IPCC_STATE_RESET)
1000307e:	687b      	ldr	r3, [r7, #4]
10003080:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
10003084:	b2db      	uxtb	r3, r3
10003086:	2b00      	cmp	r3, #0
10003088:	d102      	bne.n	10003090 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
1000308a:	6878      	ldr	r0, [r7, #4]
1000308c:	f7fd fc7c 	bl	10000988 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
10003090:	68b8      	ldr	r0, [r7, #8]
10003092:	f000 f9eb 	bl	1000346c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
10003096:	68bb      	ldr	r3, [r7, #8]
10003098:	681b      	ldr	r3, [r3, #0]
1000309a:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
1000309e:	68bb      	ldr	r3, [r7, #8]
100030a0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
100030a2:	6878      	ldr	r0, [r7, #4]
100030a4:	f000 f9bc 	bl	10003420 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
100030a8:	687b      	ldr	r3, [r7, #4]
100030aa:	2200      	movs	r2, #0
100030ac:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
100030ae:	687b      	ldr	r3, [r7, #4]
100030b0:	2201      	movs	r2, #1
100030b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
100030b6:	e001      	b.n	100030bc <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
100030b8:	2301      	movs	r3, #1
100030ba:	73fb      	strb	r3, [r7, #15]
  }

  return err;
100030bc:	7bfb      	ldrb	r3, [r7, #15]
}
100030be:	4618      	mov	r0, r3
100030c0:	3710      	adds	r7, #16
100030c2:	46bd      	mov	sp, r7
100030c4:	bd80      	pop	{r7, pc}
100030c6:	bf00      	nop
100030c8:	4c001010 	.word	0x4c001010

100030cc <HAL_IPCC_ActivateNotification>:
  * @param  ChannelDir Channel direction
  * @param  cb Interrupt callback
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_ActivateNotification(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir, ChannelCb cb)
{
100030cc:	b580      	push	{r7, lr}
100030ce:	b086      	sub	sp, #24
100030d0:	af00      	add	r7, sp, #0
100030d2:	60f8      	str	r0, [r7, #12]
100030d4:	60b9      	str	r1, [r7, #8]
100030d6:	603b      	str	r3, [r7, #0]
100030d8:	4613      	mov	r3, r2
100030da:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
100030dc:	2300      	movs	r3, #0
100030de:	75fb      	strb	r3, [r7, #23]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
100030e0:	68fb      	ldr	r3, [r7, #12]
100030e2:	2b00      	cmp	r3, #0
100030e4:	d039      	beq.n	1000315a <HAL_IPCC_ActivateNotification+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    /* Check IPCC state */
    if (hipcc->State == HAL_IPCC_STATE_READY)
100030e6:	68fb      	ldr	r3, [r7, #12]
100030e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
100030ec:	b2db      	uxtb	r3, r3
100030ee:	2b01      	cmp	r3, #1
100030f0:	d130      	bne.n	10003154 <HAL_IPCC_ActivateNotification+0x88>
    {
      /* Set callback and register masking information */
      if (ChannelDir == IPCC_CHANNEL_DIR_TX)
100030f2:	79fb      	ldrb	r3, [r7, #7]
100030f4:	2b00      	cmp	r3, #0
100030f6:	d113      	bne.n	10003120 <HAL_IPCC_ActivateNotification+0x54>
      {
        hipcc->ChannelCallbackTx[ChannelIndex] = cb;
100030f8:	68fa      	ldr	r2, [r7, #12]
100030fa:	68bb      	ldr	r3, [r7, #8]
100030fc:	3306      	adds	r3, #6
100030fe:	009b      	lsls	r3, r3, #2
10003100:	4413      	add	r3, r2
10003102:	683a      	ldr	r2, [r7, #0]
10003104:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10003106:	68fb      	ldr	r3, [r7, #12]
10003108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
1000310a:	68bb      	ldr	r3, [r7, #8]
1000310c:	f003 030f 	and.w	r3, r3, #15
10003110:	f44f 3180 	mov.w	r1, #65536	; 0x10000
10003114:	fa01 f303 	lsl.w	r3, r1, r3
10003118:	431a      	orrs	r2, r3
1000311a:	68fb      	ldr	r3, [r7, #12]
1000311c:	635a      	str	r2, [r3, #52]	; 0x34
1000311e:	e010      	b.n	10003142 <HAL_IPCC_ActivateNotification+0x76>
      }
      else
      {
        hipcc->ChannelCallbackRx[ChannelIndex] = cb;
10003120:	68fa      	ldr	r2, [r7, #12]
10003122:	68bb      	ldr	r3, [r7, #8]
10003124:	009b      	lsls	r3, r3, #2
10003126:	4413      	add	r3, r2
10003128:	683a      	ldr	r2, [r7, #0]
1000312a:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
1000312c:	68fb      	ldr	r3, [r7, #12]
1000312e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10003130:	68bb      	ldr	r3, [r7, #8]
10003132:	f003 030f 	and.w	r3, r3, #15
10003136:	2101      	movs	r1, #1
10003138:	fa01 f303 	lsl.w	r3, r1, r3
1000313c:	431a      	orrs	r2, r3
1000313e:	68fb      	ldr	r3, [r7, #12]
10003140:	635a      	str	r2, [r3, #52]	; 0x34
      }

      /* Unmask only the channels in reception (Transmission channel mask/unmask is done in HAL_IPCC_NotifyCPU) */
      if (ChannelDir == IPCC_CHANNEL_DIR_RX)
10003142:	79fb      	ldrb	r3, [r7, #7]
10003144:	2b01      	cmp	r3, #1
10003146:	d10a      	bne.n	1000315e <HAL_IPCC_ActivateNotification+0x92>
      {
        IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
10003148:	79fb      	ldrb	r3, [r7, #7]
1000314a:	4619      	mov	r1, r3
1000314c:	68b8      	ldr	r0, [r7, #8]
1000314e:	f000 f939 	bl	100033c4 <IPCC_UnmaskInterrupt>
10003152:	e004      	b.n	1000315e <HAL_IPCC_ActivateNotification+0x92>
      }
    }
    else
    {
      err = HAL_ERROR;
10003154:	2301      	movs	r3, #1
10003156:	75fb      	strb	r3, [r7, #23]
10003158:	e001      	b.n	1000315e <HAL_IPCC_ActivateNotification+0x92>
    }
  }
  else
  {
    err = HAL_ERROR;
1000315a:	2301      	movs	r3, #1
1000315c:	75fb      	strb	r3, [r7, #23]
  }
  return err;
1000315e:	7dfb      	ldrb	r3, [r7, #23]
}
10003160:	4618      	mov	r0, r3
10003162:	3718      	adds	r7, #24
10003164:	46bd      	mov	sp, r7
10003166:	bd80      	pop	{r7, pc}

10003168 <HAL_IPCC_GetChannelStatus>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval Channel status
  */
IPCC_CHANNELStatusTypeDef HAL_IPCC_GetChannelStatus(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10003168:	b480      	push	{r7}
1000316a:	b089      	sub	sp, #36	; 0x24
1000316c:	af00      	add	r7, sp, #0
1000316e:	60f8      	str	r0, [r7, #12]
10003170:	60b9      	str	r1, [r7, #8]
10003172:	4613      	mov	r3, r2
10003174:	71fb      	strb	r3, [r7, #7]
  uint32_t channel_state;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10003176:	4b14      	ldr	r3, [pc, #80]	; (100031c8 <HAL_IPCC_GetChannelStatus+0x60>)
10003178:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
1000317a:	4b14      	ldr	r3, [pc, #80]	; (100031cc <HAL_IPCC_GetChannelStatus+0x64>)
1000317c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Read corresponding channel depending of the MCU and the direction */
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
1000317e:	79fb      	ldrb	r3, [r7, #7]
10003180:	2b00      	cmp	r3, #0
10003182:	d10a      	bne.n	1000319a <HAL_IPCC_GetChannelStatus+0x32>
  {
    channel_state = (currentInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10003184:	69bb      	ldr	r3, [r7, #24]
10003186:	68da      	ldr	r2, [r3, #12]
10003188:	68bb      	ldr	r3, [r7, #8]
1000318a:	f003 030f 	and.w	r3, r3, #15
1000318e:	2101      	movs	r1, #1
10003190:	fa01 f303 	lsl.w	r3, r1, r3
10003194:	4013      	ands	r3, r2
10003196:	61fb      	str	r3, [r7, #28]
10003198:	e009      	b.n	100031ae <HAL_IPCC_GetChannelStatus+0x46>
  }
  else
  {
    channel_state = (otherInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
1000319a:	697b      	ldr	r3, [r7, #20]
1000319c:	68da      	ldr	r2, [r3, #12]
1000319e:	68bb      	ldr	r3, [r7, #8]
100031a0:	f003 030f 	and.w	r3, r3, #15
100031a4:	2101      	movs	r1, #1
100031a6:	fa01 f303 	lsl.w	r3, r1, r3
100031aa:	4013      	ands	r3, r2
100031ac:	61fb      	str	r3, [r7, #28]
  }

  return (channel_state == 0UL) ? IPCC_CHANNEL_STATUS_FREE : IPCC_CHANNEL_STATUS_OCCUPIED ;
100031ae:	69fb      	ldr	r3, [r7, #28]
100031b0:	2b00      	cmp	r3, #0
100031b2:	bf14      	ite	ne
100031b4:	2301      	movne	r3, #1
100031b6:	2300      	moveq	r3, #0
100031b8:	b2db      	uxtb	r3, r3
}
100031ba:	4618      	mov	r0, r3
100031bc:	3724      	adds	r7, #36	; 0x24
100031be:	46bd      	mov	sp, r7
100031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
100031c4:	4770      	bx	lr
100031c6:	bf00      	nop
100031c8:	4c001010 	.word	0x4c001010
100031cc:	4c001000 	.word	0x4c001000

100031d0 <HAL_IPCC_NotifyCPU>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_NotifyCPU(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
100031d0:	b580      	push	{r7, lr}
100031d2:	b088      	sub	sp, #32
100031d4:	af00      	add	r7, sp, #0
100031d6:	60f8      	str	r0, [r7, #12]
100031d8:	60b9      	str	r1, [r7, #8]
100031da:	4613      	mov	r3, r2
100031dc:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
100031de:	2300      	movs	r3, #0
100031e0:	77fb      	strb	r3, [r7, #31]
  uint32_t mask;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
100031e2:	4b1d      	ldr	r3, [pc, #116]	; (10003258 <HAL_IPCC_NotifyCPU+0x88>)
100031e4:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Check if IPCC is initiliased */
  if (hipcc->State == HAL_IPCC_STATE_READY)
100031e6:	68fb      	ldr	r3, [r7, #12]
100031e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
100031ec:	b2db      	uxtb	r3, r3
100031ee:	2b01      	cmp	r3, #1
100031f0:	d12a      	bne.n	10003248 <HAL_IPCC_NotifyCPU+0x78>
  {
    /* For IPCC_CHANNEL_DIR_TX, set the status. For IPCC_CHANNEL_DIR_RX, clear the status */
    currentInstance->SCR |= ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_SCR_CH1S : IPCC_SCR_CH1C) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
100031f2:	69bb      	ldr	r3, [r7, #24]
100031f4:	689a      	ldr	r2, [r3, #8]
100031f6:	79fb      	ldrb	r3, [r7, #7]
100031f8:	2b00      	cmp	r3, #0
100031fa:	d102      	bne.n	10003202 <HAL_IPCC_NotifyCPU+0x32>
100031fc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
10003200:	e000      	b.n	10003204 <HAL_IPCC_NotifyCPU+0x34>
10003202:	2101      	movs	r1, #1
10003204:	68bb      	ldr	r3, [r7, #8]
10003206:	f003 030f 	and.w	r3, r3, #15
1000320a:	fa01 f303 	lsl.w	r3, r1, r3
1000320e:	431a      	orrs	r2, r3
10003210:	69bb      	ldr	r3, [r7, #24]
10003212:	609a      	str	r2, [r3, #8]

    /* Unmask interrupt if the callback is requested */
    mask = ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_MR_CH1FM_Msk : IPCC_MR_CH1OM_Msk) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
10003214:	79fb      	ldrb	r3, [r7, #7]
10003216:	2b00      	cmp	r3, #0
10003218:	d102      	bne.n	10003220 <HAL_IPCC_NotifyCPU+0x50>
1000321a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
1000321e:	e000      	b.n	10003222 <HAL_IPCC_NotifyCPU+0x52>
10003220:	2201      	movs	r2, #1
10003222:	68bb      	ldr	r3, [r7, #8]
10003224:	f003 030f 	and.w	r3, r3, #15
10003228:	fa02 f303 	lsl.w	r3, r2, r3
1000322c:	617b      	str	r3, [r7, #20]
    if ((hipcc->callbackRequest & mask) == mask)
1000322e:	68fb      	ldr	r3, [r7, #12]
10003230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10003232:	697b      	ldr	r3, [r7, #20]
10003234:	4013      	ands	r3, r2
10003236:	697a      	ldr	r2, [r7, #20]
10003238:	429a      	cmp	r2, r3
1000323a:	d107      	bne.n	1000324c <HAL_IPCC_NotifyCPU+0x7c>
    {
      IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
1000323c:	79fb      	ldrb	r3, [r7, #7]
1000323e:	4619      	mov	r1, r3
10003240:	68b8      	ldr	r0, [r7, #8]
10003242:	f000 f8bf 	bl	100033c4 <IPCC_UnmaskInterrupt>
10003246:	e001      	b.n	1000324c <HAL_IPCC_NotifyCPU+0x7c>
    }
  }
  else
  {
    err = HAL_ERROR;
10003248:	2301      	movs	r3, #1
1000324a:	77fb      	strb	r3, [r7, #31]
  }

  return err;
1000324c:	7ffb      	ldrb	r3, [r7, #31]
}
1000324e:	4618      	mov	r0, r3
10003250:	3720      	adds	r7, #32
10003252:	46bd      	mov	sp, r7
10003254:	bd80      	pop	{r7, pc}
10003256:	bf00      	nop
10003258:	4c001010 	.word	0x4c001010

1000325c <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
1000325c:	b580      	push	{r7, lr}
1000325e:	b086      	sub	sp, #24
10003260:	af00      	add	r7, sp, #0
10003262:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
10003264:	2300      	movs	r3, #0
10003266:	613b      	str	r3, [r7, #16]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10003268:	4b22      	ldr	r3, [pc, #136]	; (100032f4 <HAL_IPCC_TX_IRQHandler+0x98>)
1000326a:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
1000326c:	68fb      	ldr	r3, [r7, #12]
1000326e:	685b      	ldr	r3, [r3, #4]
10003270:	43db      	mvns	r3, r3
10003272:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
10003276:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
10003278:	68fb      	ldr	r3, [r7, #12]
1000327a:	68db      	ldr	r3, [r3, #12]
1000327c:	041b      	lsls	r3, r3, #16
1000327e:	43db      	mvns	r3, r3
10003280:	697a      	ldr	r2, [r7, #20]
10003282:	4013      	ands	r3, r2
10003284:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10003286:	e02c      	b.n	100032e2 <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_Msk));
10003288:	693b      	ldr	r3, [r7, #16]
1000328a:	f003 030f 	and.w	r3, r3, #15
1000328e:	3310      	adds	r3, #16
10003290:	2201      	movs	r2, #1
10003292:	fa02 f303 	lsl.w	r3, r2, r3
10003296:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
10003298:	697a      	ldr	r2, [r7, #20]
1000329a:	68bb      	ldr	r3, [r7, #8]
1000329c:	4013      	ands	r3, r2
1000329e:	2b00      	cmp	r3, #0
100032a0:	d01c      	beq.n	100032dc <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
100032a2:	68fb      	ldr	r3, [r7, #12]
100032a4:	685a      	ldr	r2, [r3, #4]
100032a6:	68bb      	ldr	r3, [r7, #8]
100032a8:	431a      	orrs	r2, r3
100032aa:	68fb      	ldr	r3, [r7, #12]
100032ac:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
100032ae:	687a      	ldr	r2, [r7, #4]
100032b0:	693b      	ldr	r3, [r7, #16]
100032b2:	3306      	adds	r3, #6
100032b4:	009b      	lsls	r3, r3, #2
100032b6:	4413      	add	r3, r2
100032b8:	685b      	ldr	r3, [r3, #4]
100032ba:	2b00      	cmp	r3, #0
100032bc:	d009      	beq.n	100032d2 <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
100032be:	687a      	ldr	r2, [r7, #4]
100032c0:	693b      	ldr	r3, [r7, #16]
100032c2:	3306      	adds	r3, #6
100032c4:	009b      	lsls	r3, r3, #2
100032c6:	4413      	add	r3, r2
100032c8:	685b      	ldr	r3, [r3, #4]
100032ca:	2200      	movs	r2, #0
100032cc:	6939      	ldr	r1, [r7, #16]
100032ce:	6878      	ldr	r0, [r7, #4]
100032d0:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
100032d2:	68bb      	ldr	r3, [r7, #8]
100032d4:	43db      	mvns	r3, r3
100032d6:	697a      	ldr	r2, [r7, #20]
100032d8:	4013      	ands	r3, r2
100032da:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
100032dc:	693b      	ldr	r3, [r7, #16]
100032de:	3301      	adds	r3, #1
100032e0:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
100032e2:	697b      	ldr	r3, [r7, #20]
100032e4:	2b00      	cmp	r3, #0
100032e6:	d1cf      	bne.n	10003288 <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
100032e8:	bf00      	nop
100032ea:	bf00      	nop
100032ec:	3718      	adds	r7, #24
100032ee:	46bd      	mov	sp, r7
100032f0:	bd80      	pop	{r7, pc}
100032f2:	bf00      	nop
100032f4:	4c001010 	.word	0x4c001010

100032f8 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
100032f8:	b580      	push	{r7, lr}
100032fa:	b088      	sub	sp, #32
100032fc:	af00      	add	r7, sp, #0
100032fe:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
10003300:	2300      	movs	r3, #0
10003302:	61bb      	str	r3, [r7, #24]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10003304:	4b20      	ldr	r3, [pc, #128]	; (10003388 <HAL_IPCC_RX_IRQHandler+0x90>)
10003306:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
10003308:	4b20      	ldr	r3, [pc, #128]	; (1000338c <HAL_IPCC_RX_IRQHandler+0x94>)
1000330a:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
#endif

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
1000330c:	697b      	ldr	r3, [r7, #20]
1000330e:	685b      	ldr	r3, [r3, #4]
10003310:	43db      	mvns	r3, r3
10003312:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10003316:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
10003318:	693b      	ldr	r3, [r7, #16]
1000331a:	68db      	ldr	r3, [r3, #12]
1000331c:	69fa      	ldr	r2, [r7, #28]
1000331e:	4013      	ands	r3, r2
10003320:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10003322:	e029      	b.n	10003378 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
10003324:	69bb      	ldr	r3, [r7, #24]
10003326:	f003 030f 	and.w	r3, r3, #15
1000332a:	2201      	movs	r2, #1
1000332c:	fa02 f303 	lsl.w	r3, r2, r3
10003330:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
10003332:	69fa      	ldr	r2, [r7, #28]
10003334:	68fb      	ldr	r3, [r7, #12]
10003336:	4013      	ands	r3, r2
10003338:	2b00      	cmp	r3, #0
1000333a:	d01a      	beq.n	10003372 <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
1000333c:	697b      	ldr	r3, [r7, #20]
1000333e:	685a      	ldr	r2, [r3, #4]
10003340:	68fb      	ldr	r3, [r7, #12]
10003342:	431a      	orrs	r2, r3
10003344:	697b      	ldr	r3, [r7, #20]
10003346:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
10003348:	687a      	ldr	r2, [r7, #4]
1000334a:	69bb      	ldr	r3, [r7, #24]
1000334c:	009b      	lsls	r3, r3, #2
1000334e:	4413      	add	r3, r2
10003350:	685b      	ldr	r3, [r3, #4]
10003352:	2b00      	cmp	r3, #0
10003354:	d008      	beq.n	10003368 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
10003356:	687a      	ldr	r2, [r7, #4]
10003358:	69bb      	ldr	r3, [r7, #24]
1000335a:	009b      	lsls	r3, r3, #2
1000335c:	4413      	add	r3, r2
1000335e:	685b      	ldr	r3, [r3, #4]
10003360:	2201      	movs	r2, #1
10003362:	69b9      	ldr	r1, [r7, #24]
10003364:	6878      	ldr	r0, [r7, #4]
10003366:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
10003368:	68fb      	ldr	r3, [r7, #12]
1000336a:	43db      	mvns	r3, r3
1000336c:	69fa      	ldr	r2, [r7, #28]
1000336e:	4013      	ands	r3, r2
10003370:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
10003372:	69bb      	ldr	r3, [r7, #24]
10003374:	3301      	adds	r3, #1
10003376:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10003378:	69fb      	ldr	r3, [r7, #28]
1000337a:	2b00      	cmp	r3, #0
1000337c:	d1d2      	bne.n	10003324 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
1000337e:	bf00      	nop
10003380:	bf00      	nop
10003382:	3720      	adds	r7, #32
10003384:	46bd      	mov	sp, r7
10003386:	bd80      	pop	{r7, pc}
10003388:	4c001010 	.word	0x4c001010
1000338c:	4c001000 	.word	0x4c001000

10003390 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10003390:	b480      	push	{r7}
10003392:	b085      	sub	sp, #20
10003394:	af00      	add	r7, sp, #0
10003396:	60f8      	str	r0, [r7, #12]
10003398:	60b9      	str	r1, [r7, #8]
1000339a:	4613      	mov	r3, r2
1000339c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
1000339e:	bf00      	nop
100033a0:	3714      	adds	r7, #20
100033a2:	46bd      	mov	sp, r7
100033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
100033a8:	4770      	bx	lr

100033aa <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
100033aa:	b480      	push	{r7}
100033ac:	b085      	sub	sp, #20
100033ae:	af00      	add	r7, sp, #0
100033b0:	60f8      	str	r0, [r7, #12]
100033b2:	60b9      	str	r1, [r7, #8]
100033b4:	4613      	mov	r3, r2
100033b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
100033b8:	bf00      	nop
100033ba:	3714      	adds	r7, #20
100033bc:	46bd      	mov	sp, r7
100033be:	f85d 7b04 	ldr.w	r7, [sp], #4
100033c2:	4770      	bx	lr

100033c4 <IPCC_UnmaskInterrupt>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  */
void IPCC_UnmaskInterrupt(uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
100033c4:	b480      	push	{r7}
100033c6:	b085      	sub	sp, #20
100033c8:	af00      	add	r7, sp, #0
100033ca:	6078      	str	r0, [r7, #4]
100033cc:	460b      	mov	r3, r1
100033ce:	70fb      	strb	r3, [r7, #3]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
100033d0:	4b12      	ldr	r3, [pc, #72]	; (1000341c <IPCC_UnmaskInterrupt+0x58>)
100033d2:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
100033d4:	78fb      	ldrb	r3, [r7, #3]
100033d6:	2b00      	cmp	r3, #0
100033d8:	d10d      	bne.n	100033f6 <IPCC_UnmaskInterrupt+0x32>
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
100033da:	68fb      	ldr	r3, [r7, #12]
100033dc:	685a      	ldr	r2, [r3, #4]
100033de:	687b      	ldr	r3, [r7, #4]
100033e0:	f003 030f 	and.w	r3, r3, #15
100033e4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
100033e8:	fa01 f303 	lsl.w	r3, r1, r3
100033ec:	43db      	mvns	r3, r3
100033ee:	401a      	ands	r2, r3
100033f0:	68fb      	ldr	r3, [r7, #12]
100033f2:	605a      	str	r2, [r3, #4]
  else
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
  }
}
100033f4:	e00b      	b.n	1000340e <IPCC_UnmaskInterrupt+0x4a>
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
100033f6:	68fb      	ldr	r3, [r7, #12]
100033f8:	685a      	ldr	r2, [r3, #4]
100033fa:	687b      	ldr	r3, [r7, #4]
100033fc:	f003 030f 	and.w	r3, r3, #15
10003400:	2101      	movs	r1, #1
10003402:	fa01 f303 	lsl.w	r3, r1, r3
10003406:	43db      	mvns	r3, r3
10003408:	401a      	ands	r2, r3
1000340a:	68fb      	ldr	r3, [r7, #12]
1000340c:	605a      	str	r2, [r3, #4]
}
1000340e:	bf00      	nop
10003410:	3714      	adds	r7, #20
10003412:	46bd      	mov	sp, r7
10003414:	f85d 7b04 	ldr.w	r7, [sp], #4
10003418:	4770      	bx	lr
1000341a:	bf00      	nop
1000341c:	4c001010 	.word	0x4c001010

10003420 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
10003420:	b480      	push	{r7}
10003422:	b085      	sub	sp, #20
10003424:	af00      	add	r7, sp, #0
10003426:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
10003428:	2300      	movs	r3, #0
1000342a:	60fb      	str	r3, [r7, #12]
1000342c:	e00f      	b.n	1000344e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
1000342e:	687a      	ldr	r2, [r7, #4]
10003430:	68fb      	ldr	r3, [r7, #12]
10003432:	009b      	lsls	r3, r3, #2
10003434:	4413      	add	r3, r2
10003436:	4a0b      	ldr	r2, [pc, #44]	; (10003464 <IPCC_SetDefaultCallbacks+0x44>)
10003438:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
1000343a:	687a      	ldr	r2, [r7, #4]
1000343c:	68fb      	ldr	r3, [r7, #12]
1000343e:	3306      	adds	r3, #6
10003440:	009b      	lsls	r3, r3, #2
10003442:	4413      	add	r3, r2
10003444:	4a08      	ldr	r2, [pc, #32]	; (10003468 <IPCC_SetDefaultCallbacks+0x48>)
10003446:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
10003448:	68fb      	ldr	r3, [r7, #12]
1000344a:	3301      	adds	r3, #1
1000344c:	60fb      	str	r3, [r7, #12]
1000344e:	68fb      	ldr	r3, [r7, #12]
10003450:	2b05      	cmp	r3, #5
10003452:	d9ec      	bls.n	1000342e <IPCC_SetDefaultCallbacks+0xe>
  }
}
10003454:	bf00      	nop
10003456:	bf00      	nop
10003458:	3714      	adds	r7, #20
1000345a:	46bd      	mov	sp, r7
1000345c:	f85d 7b04 	ldr.w	r7, [sp], #4
10003460:	4770      	bx	lr
10003462:	bf00      	nop
10003464:	10003391 	.word	0x10003391
10003468:	100033ab 	.word	0x100033ab

1000346c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
1000346c:	b480      	push	{r7}
1000346e:	b083      	sub	sp, #12
10003470:	af00      	add	r7, sp, #0
10003472:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
10003474:	687b      	ldr	r3, [r7, #4]
10003476:	2200      	movs	r2, #0
10003478:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
1000347a:	687b      	ldr	r3, [r7, #4]
1000347c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
10003480:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
10003482:	687b      	ldr	r3, [r7, #4]
10003484:	223f      	movs	r2, #63	; 0x3f
10003486:	609a      	str	r2, [r3, #8]
}
10003488:	bf00      	nop
1000348a:	370c      	adds	r7, #12
1000348c:	46bd      	mov	sp, r7
1000348e:	f85d 7b04 	ldr.w	r7, [sp], #4
10003492:	4770      	bx	lr

10003494 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
10003494:	b480      	push	{r7}
10003496:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
10003498:	4b05      	ldr	r3, [pc, #20]	; (100034b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
1000349a:	681b      	ldr	r3, [r3, #0]
1000349c:	4a04      	ldr	r2, [pc, #16]	; (100034b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
1000349e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
100034a2:	6013      	str	r3, [r2, #0]
}
100034a4:	bf00      	nop
100034a6:	46bd      	mov	sp, r7
100034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
100034ac:	4770      	bx	lr
100034ae:	bf00      	nop
100034b0:	50001000 	.word	0x50001000

100034b4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
100034b4:	b580      	push	{r7, lr}
100034b6:	b084      	sub	sp, #16
100034b8:	af00      	add	r7, sp, #0
100034ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
100034bc:	2300      	movs	r3, #0
100034be:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
100034c0:	687b      	ldr	r3, [r7, #4]
100034c2:	2b00      	cmp	r3, #0
100034c4:	d101      	bne.n	100034ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
100034c6:	2301      	movs	r3, #1
100034c8:	e320      	b.n	10003b0c <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
100034ca:	687b      	ldr	r3, [r7, #4]
100034cc:	681b      	ldr	r3, [r3, #0]
100034ce:	f003 0301 	and.w	r3, r3, #1
100034d2:	2b00      	cmp	r3, #0
100034d4:	f000 8081 	beq.w	100035da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
100034d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100034dc:	6a1b      	ldr	r3, [r3, #32]
100034de:	f003 0303 	and.w	r3, r3, #3
100034e2:	2b01      	cmp	r3, #1
100034e4:	d107      	bne.n	100034f6 <HAL_RCC_OscConfig+0x42>
100034e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100034ea:	6a1b      	ldr	r3, [r3, #32]
100034ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100034f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100034f4:	d054      	beq.n	100035a0 <HAL_RCC_OscConfig+0xec>
100034f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100034fc:	f003 0307 	and.w	r3, r3, #7
10003500:	2b01      	cmp	r3, #1
10003502:	d107      	bne.n	10003514 <HAL_RCC_OscConfig+0x60>
10003504:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000350a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000350e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003512:	d045      	beq.n	100035a0 <HAL_RCC_OscConfig+0xec>
10003514:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000351a:	f003 0303 	and.w	r3, r3, #3
1000351e:	2b01      	cmp	r3, #1
10003520:	d107      	bne.n	10003532 <HAL_RCC_OscConfig+0x7e>
10003522:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003528:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000352c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003530:	d036      	beq.n	100035a0 <HAL_RCC_OscConfig+0xec>
10003532:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10003538:	f003 0303 	and.w	r3, r3, #3
1000353c:	2b01      	cmp	r3, #1
1000353e:	d10f      	bne.n	10003560 <HAL_RCC_OscConfig+0xac>
10003540:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10003548:	f003 0302 	and.w	r3, r3, #2
1000354c:	2b02      	cmp	r3, #2
1000354e:	d027      	beq.n	100035a0 <HAL_RCC_OscConfig+0xec>
10003550:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003554:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10003558:	f003 0302 	and.w	r3, r3, #2
1000355c:	2b02      	cmp	r3, #2
1000355e:	d01f      	beq.n	100035a0 <HAL_RCC_OscConfig+0xec>
10003560:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003564:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10003568:	f003 0303 	and.w	r3, r3, #3
1000356c:	2b01      	cmp	r3, #1
1000356e:	d107      	bne.n	10003580 <HAL_RCC_OscConfig+0xcc>
10003570:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003574:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003578:	f003 0302 	and.w	r3, r3, #2
1000357c:	2b02      	cmp	r3, #2
1000357e:	d00f      	beq.n	100035a0 <HAL_RCC_OscConfig+0xec>
10003580:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003584:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10003588:	f003 0303 	and.w	r3, r3, #3
1000358c:	2b01      	cmp	r3, #1
1000358e:	d117      	bne.n	100035c0 <HAL_RCC_OscConfig+0x10c>
10003590:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003594:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003598:	f003 0302 	and.w	r3, r3, #2
1000359c:	2b02      	cmp	r3, #2
1000359e:	d10f      	bne.n	100035c0 <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
100035a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100035a4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100035a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
100035ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100035b0:	d112      	bne.n	100035d8 <HAL_RCC_OscConfig+0x124>
100035b2:	687b      	ldr	r3, [r7, #4]
100035b4:	685b      	ldr	r3, [r3, #4]
100035b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100035ba:	d00d      	beq.n	100035d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
100035bc:	2301      	movs	r3, #1
100035be:	e2a5      	b.n	10003b0c <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
100035c0:	687b      	ldr	r3, [r7, #4]
100035c2:	685b      	ldr	r3, [r3, #4]
100035c4:	4618      	mov	r0, r3
100035c6:	f000 faa7 	bl	10003b18 <HAL_RCC_HSEConfig>
100035ca:	4603      	mov	r3, r0
100035cc:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
100035ce:	7bfb      	ldrb	r3, [r7, #15]
100035d0:	2b00      	cmp	r3, #0
100035d2:	d002      	beq.n	100035da <HAL_RCC_OscConfig+0x126>
      {
        return result;
100035d4:	7bfb      	ldrb	r3, [r7, #15]
100035d6:	e299      	b.n	10003b0c <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
100035d8:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
100035da:	687b      	ldr	r3, [r7, #4]
100035dc:	681b      	ldr	r3, [r3, #0]
100035de:	f003 0302 	and.w	r3, r3, #2
100035e2:	2b00      	cmp	r3, #0
100035e4:	f000 814e 	beq.w	10003884 <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
100035e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100035ec:	6a1b      	ldr	r3, [r3, #32]
100035ee:	f003 0303 	and.w	r3, r3, #3
100035f2:	2b00      	cmp	r3, #0
100035f4:	d107      	bne.n	10003606 <HAL_RCC_OscConfig+0x152>
100035f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100035fa:	6a1b      	ldr	r3, [r3, #32]
100035fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003600:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003604:	d055      	beq.n	100036b2 <HAL_RCC_OscConfig+0x1fe>
10003606:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000360c:	f003 0307 	and.w	r3, r3, #7
10003610:	2b00      	cmp	r3, #0
10003612:	d107      	bne.n	10003624 <HAL_RCC_OscConfig+0x170>
10003614:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000361a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000361e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003622:	d046      	beq.n	100036b2 <HAL_RCC_OscConfig+0x1fe>
10003624:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000362a:	f003 0303 	and.w	r3, r3, #3
1000362e:	2b00      	cmp	r3, #0
10003630:	d107      	bne.n	10003642 <HAL_RCC_OscConfig+0x18e>
10003632:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003638:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000363c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003640:	d037      	beq.n	100036b2 <HAL_RCC_OscConfig+0x1fe>
10003642:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10003648:	f003 0303 	and.w	r3, r3, #3
1000364c:	2b00      	cmp	r3, #0
1000364e:	d10f      	bne.n	10003670 <HAL_RCC_OscConfig+0x1bc>
10003650:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003654:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10003658:	f003 0302 	and.w	r3, r3, #2
1000365c:	2b02      	cmp	r3, #2
1000365e:	d028      	beq.n	100036b2 <HAL_RCC_OscConfig+0x1fe>
10003660:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10003668:	f003 0302 	and.w	r3, r3, #2
1000366c:	2b02      	cmp	r3, #2
1000366e:	d020      	beq.n	100036b2 <HAL_RCC_OscConfig+0x1fe>
10003670:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003674:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10003678:	f003 0303 	and.w	r3, r3, #3
1000367c:	2b00      	cmp	r3, #0
1000367e:	d107      	bne.n	10003690 <HAL_RCC_OscConfig+0x1dc>
10003680:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003684:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003688:	f003 0302 	and.w	r3, r3, #2
1000368c:	2b02      	cmp	r3, #2
1000368e:	d010      	beq.n	100036b2 <HAL_RCC_OscConfig+0x1fe>
10003690:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003694:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10003698:	f003 0303 	and.w	r3, r3, #3
1000369c:	2b00      	cmp	r3, #0
1000369e:	f040 8088 	bne.w	100037b2 <HAL_RCC_OscConfig+0x2fe>
100036a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100036a6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100036aa:	f003 0302 	and.w	r3, r3, #2
100036ae:	2b02      	cmp	r3, #2
100036b0:	d17f      	bne.n	100037b2 <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
100036b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100036b6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100036ba:	f003 0301 	and.w	r3, r3, #1
100036be:	2b01      	cmp	r3, #1
100036c0:	d105      	bne.n	100036ce <HAL_RCC_OscConfig+0x21a>
100036c2:	687b      	ldr	r3, [r7, #4]
100036c4:	68db      	ldr	r3, [r3, #12]
100036c6:	2b01      	cmp	r3, #1
100036c8:	d001      	beq.n	100036ce <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
100036ca:	2301      	movs	r3, #1
100036cc:	e21e      	b.n	10003b0c <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
100036ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100036d2:	699b      	ldr	r3, [r3, #24]
100036d4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
100036d8:	687b      	ldr	r3, [r7, #4]
100036da:	691b      	ldr	r3, [r3, #16]
100036dc:	021b      	lsls	r3, r3, #8
100036de:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100036e2:	4313      	orrs	r3, r2
100036e4:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
100036e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100036ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100036ec:	f003 0303 	and.w	r3, r3, #3
100036f0:	2b00      	cmp	r3, #0
100036f2:	d10f      	bne.n	10003714 <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
100036f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100036f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100036fc:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10003700:	2b02      	cmp	r3, #2
10003702:	d047      	beq.n	10003794 <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10003704:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000370c:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10003710:	2b02      	cmp	r3, #2
10003712:	d03f      	beq.n	10003794 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10003714:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003718:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
1000371c:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10003720:	2b00      	cmp	r3, #0
10003722:	d107      	bne.n	10003734 <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10003724:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003728:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000372c:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10003730:	2b02      	cmp	r3, #2
10003732:	d02f      	beq.n	10003794 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10003734:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003738:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
1000373c:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10003740:	2b00      	cmp	r3, #0
10003742:	d107      	bne.n	10003754 <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
10003744:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003748:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000374c:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10003750:	2b02      	cmp	r3, #2
10003752:	d01f      	beq.n	10003794 <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10003754:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003758:	699b      	ldr	r3, [r3, #24]
1000375a:	f023 0203 	bic.w	r2, r3, #3
1000375e:	687b      	ldr	r3, [r7, #4]
10003760:	695b      	ldr	r3, [r3, #20]
10003762:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003766:	4313      	orrs	r3, r2
10003768:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
1000376a:	f7fd fb31 	bl	10000dd0 <HAL_GetTick>
1000376e:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10003770:	e008      	b.n	10003784 <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10003772:	f7fd fb2d 	bl	10000dd0 <HAL_GetTick>
10003776:	4602      	mov	r2, r0
10003778:	68bb      	ldr	r3, [r7, #8]
1000377a:	1ad3      	subs	r3, r2, r3
1000377c:	2b64      	cmp	r3, #100	; 0x64
1000377e:	d901      	bls.n	10003784 <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
10003780:	2303      	movs	r3, #3
10003782:	e1c3      	b.n	10003b0c <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10003784:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003788:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000378c:	f003 0304 	and.w	r3, r3, #4
10003790:	2b04      	cmp	r3, #4
10003792:	d1ee      	bne.n	10003772 <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
10003794:	f001 faca 	bl	10004d2c <HAL_RCC_GetSystemCoreClockFreq>
10003798:	4603      	mov	r3, r0
1000379a:	4ab3      	ldr	r2, [pc, #716]	; (10003a68 <HAL_RCC_OscConfig+0x5b4>)
1000379c:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
1000379e:	4bb3      	ldr	r3, [pc, #716]	; (10003a6c <HAL_RCC_OscConfig+0x5b8>)
100037a0:	681b      	ldr	r3, [r3, #0]
100037a2:	4618      	mov	r0, r3
100037a4:	f7fd faca 	bl	10000d3c <HAL_InitTick>
100037a8:	4603      	mov	r3, r0
100037aa:	2b00      	cmp	r3, #0
100037ac:	d069      	beq.n	10003882 <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
100037ae:	2301      	movs	r3, #1
100037b0:	e1ac      	b.n	10003b0c <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
100037b2:	687b      	ldr	r3, [r7, #4]
100037b4:	68db      	ldr	r3, [r3, #12]
100037b6:	2b00      	cmp	r3, #0
100037b8:	d049      	beq.n	1000384e <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
100037ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100037be:	68db      	ldr	r3, [r3, #12]
100037c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100037c4:	f043 0301 	orr.w	r3, r3, #1
100037c8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100037ca:	f7fd fb01 	bl	10000dd0 <HAL_GetTick>
100037ce:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100037d0:	e008      	b.n	100037e4 <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
100037d2:	f7fd fafd 	bl	10000dd0 <HAL_GetTick>
100037d6:	4602      	mov	r2, r0
100037d8:	68bb      	ldr	r3, [r7, #8]
100037da:	1ad3      	subs	r3, r2, r3
100037dc:	2b64      	cmp	r3, #100	; 0x64
100037de:	d901      	bls.n	100037e4 <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
100037e0:	2303      	movs	r3, #3
100037e2:	e193      	b.n	10003b0c <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100037e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100037e8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100037ec:	f003 0301 	and.w	r3, r3, #1
100037f0:	2b01      	cmp	r3, #1
100037f2:	d1ee      	bne.n	100037d2 <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
100037f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100037f8:	699b      	ldr	r3, [r3, #24]
100037fa:	f023 0203 	bic.w	r2, r3, #3
100037fe:	687b      	ldr	r3, [r7, #4]
10003800:	695b      	ldr	r3, [r3, #20]
10003802:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003806:	4313      	orrs	r3, r2
10003808:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000380a:	f7fd fae1 	bl	10000dd0 <HAL_GetTick>
1000380e:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10003810:	e008      	b.n	10003824 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10003812:	f7fd fadd 	bl	10000dd0 <HAL_GetTick>
10003816:	4602      	mov	r2, r0
10003818:	68bb      	ldr	r3, [r7, #8]
1000381a:	1ad3      	subs	r3, r2, r3
1000381c:	2b64      	cmp	r3, #100	; 0x64
1000381e:	d901      	bls.n	10003824 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
10003820:	2303      	movs	r3, #3
10003822:	e173      	b.n	10003b0c <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10003824:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003828:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000382c:	f003 0304 	and.w	r3, r3, #4
10003830:	2b04      	cmp	r3, #4
10003832:	d1ee      	bne.n	10003812 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10003834:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003838:	699b      	ldr	r3, [r3, #24]
1000383a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
1000383e:	687b      	ldr	r3, [r7, #4]
10003840:	691b      	ldr	r3, [r3, #16]
10003842:	021b      	lsls	r3, r3, #8
10003844:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003848:	4313      	orrs	r3, r2
1000384a:	618b      	str	r3, [r1, #24]
1000384c:	e01a      	b.n	10003884 <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
1000384e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003852:	2201      	movs	r2, #1
10003854:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003856:	f7fd fabb 	bl	10000dd0 <HAL_GetTick>
1000385a:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
1000385c:	e008      	b.n	10003870 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000385e:	f7fd fab7 	bl	10000dd0 <HAL_GetTick>
10003862:	4602      	mov	r2, r0
10003864:	68bb      	ldr	r3, [r7, #8]
10003866:	1ad3      	subs	r3, r2, r3
10003868:	2b64      	cmp	r3, #100	; 0x64
1000386a:	d901      	bls.n	10003870 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
1000386c:	2303      	movs	r3, #3
1000386e:	e14d      	b.n	10003b0c <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10003870:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003874:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003878:	f003 0301 	and.w	r3, r3, #1
1000387c:	2b01      	cmp	r3, #1
1000387e:	d0ee      	beq.n	1000385e <HAL_RCC_OscConfig+0x3aa>
10003880:	e000      	b.n	10003884 <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10003882:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
10003884:	687b      	ldr	r3, [r7, #4]
10003886:	681b      	ldr	r3, [r3, #0]
10003888:	f003 0310 	and.w	r3, r3, #16
1000388c:	2b00      	cmp	r3, #0
1000388e:	f000 8091 	beq.w	100039b4 <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
10003892:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003896:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
1000389a:	f003 0303 	and.w	r3, r3, #3
1000389e:	2b02      	cmp	r3, #2
100038a0:	d107      	bne.n	100038b2 <HAL_RCC_OscConfig+0x3fe>
100038a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100038a6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100038aa:	f003 0302 	and.w	r3, r3, #2
100038ae:	2b02      	cmp	r3, #2
100038b0:	d01e      	beq.n	100038f0 <HAL_RCC_OscConfig+0x43c>
100038b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100038b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100038b8:	f003 0303 	and.w	r3, r3, #3
100038bc:	2b02      	cmp	r3, #2
100038be:	d107      	bne.n	100038d0 <HAL_RCC_OscConfig+0x41c>
100038c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100038c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100038c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100038ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100038ce:	d00f      	beq.n	100038f0 <HAL_RCC_OscConfig+0x43c>
100038d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100038d4:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
100038d8:	f003 0303 	and.w	r3, r3, #3
100038dc:	2b02      	cmp	r3, #2
100038de:	d122      	bne.n	10003926 <HAL_RCC_OscConfig+0x472>
100038e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100038e4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100038e8:	f003 0302 	and.w	r3, r3, #2
100038ec:	2b02      	cmp	r3, #2
100038ee:	d11a      	bne.n	10003926 <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
100038f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100038f4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100038f8:	f003 0310 	and.w	r3, r3, #16
100038fc:	2b10      	cmp	r3, #16
100038fe:	d105      	bne.n	1000390c <HAL_RCC_OscConfig+0x458>
10003900:	687b      	ldr	r3, [r7, #4]
10003902:	69db      	ldr	r3, [r3, #28]
10003904:	2b10      	cmp	r3, #16
10003906:	d001      	beq.n	1000390c <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
10003908:	2301      	movs	r3, #1
1000390a:	e0ff      	b.n	10003b0c <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
1000390c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003910:	69db      	ldr	r3, [r3, #28]
10003912:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
10003916:	687b      	ldr	r3, [r7, #4]
10003918:	6a1b      	ldr	r3, [r3, #32]
1000391a:	021b      	lsls	r3, r3, #8
1000391c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003920:	4313      	orrs	r3, r2
10003922:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10003924:	e046      	b.n	100039b4 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
10003926:	687b      	ldr	r3, [r7, #4]
10003928:	69db      	ldr	r3, [r3, #28]
1000392a:	2b00      	cmp	r3, #0
1000392c:	d029      	beq.n	10003982 <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
1000392e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003932:	68db      	ldr	r3, [r3, #12]
10003934:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003938:	f043 0310 	orr.w	r3, r3, #16
1000393c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000393e:	f7fd fa47 	bl	10000dd0 <HAL_GetTick>
10003942:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10003944:	e008      	b.n	10003958 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10003946:	f7fd fa43 	bl	10000dd0 <HAL_GetTick>
1000394a:	4602      	mov	r2, r0
1000394c:	68bb      	ldr	r3, [r7, #8]
1000394e:	1ad3      	subs	r3, r2, r3
10003950:	2b64      	cmp	r3, #100	; 0x64
10003952:	d901      	bls.n	10003958 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
10003954:	2303      	movs	r3, #3
10003956:	e0d9      	b.n	10003b0c <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10003958:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000395c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003960:	f003 0310 	and.w	r3, r3, #16
10003964:	2b10      	cmp	r3, #16
10003966:	d1ee      	bne.n	10003946 <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10003968:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000396c:	69db      	ldr	r3, [r3, #28]
1000396e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
10003972:	687b      	ldr	r3, [r7, #4]
10003974:	6a1b      	ldr	r3, [r3, #32]
10003976:	021b      	lsls	r3, r3, #8
10003978:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000397c:	4313      	orrs	r3, r2
1000397e:	61cb      	str	r3, [r1, #28]
10003980:	e018      	b.n	100039b4 <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
10003982:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003986:	2210      	movs	r2, #16
10003988:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000398a:	f7fd fa21 	bl	10000dd0 <HAL_GetTick>
1000398e:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10003990:	e008      	b.n	100039a4 <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10003992:	f7fd fa1d 	bl	10000dd0 <HAL_GetTick>
10003996:	4602      	mov	r2, r0
10003998:	68bb      	ldr	r3, [r7, #8]
1000399a:	1ad3      	subs	r3, r2, r3
1000399c:	2b64      	cmp	r3, #100	; 0x64
1000399e:	d901      	bls.n	100039a4 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
100039a0:	2303      	movs	r3, #3
100039a2:	e0b3      	b.n	10003b0c <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
100039a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039a8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100039ac:	f003 0310 	and.w	r3, r3, #16
100039b0:	2b10      	cmp	r3, #16
100039b2:	d0ee      	beq.n	10003992 <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
100039b4:	687b      	ldr	r3, [r7, #4]
100039b6:	681b      	ldr	r3, [r3, #0]
100039b8:	f003 0308 	and.w	r3, r3, #8
100039bc:	2b00      	cmp	r3, #0
100039be:	d042      	beq.n	10003a46 <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
100039c0:	687b      	ldr	r3, [r7, #4]
100039c2:	699b      	ldr	r3, [r3, #24]
100039c4:	2b00      	cmp	r3, #0
100039c6:	d01f      	beq.n	10003a08 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
100039c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039cc:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
100039d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100039d4:	f043 0301 	orr.w	r3, r3, #1
100039d8:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100039dc:	f7fd f9f8 	bl	10000dd0 <HAL_GetTick>
100039e0:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
100039e2:	e008      	b.n	100039f6 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
100039e4:	f7fd f9f4 	bl	10000dd0 <HAL_GetTick>
100039e8:	4602      	mov	r2, r0
100039ea:	68bb      	ldr	r3, [r7, #8]
100039ec:	1ad3      	subs	r3, r2, r3
100039ee:	2b64      	cmp	r3, #100	; 0x64
100039f0:	d901      	bls.n	100039f6 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
100039f2:	2303      	movs	r3, #3
100039f4:	e08a      	b.n	10003b0c <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
100039f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039fa:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
100039fe:	f003 0302 	and.w	r3, r3, #2
10003a02:	2b02      	cmp	r3, #2
10003a04:	d1ee      	bne.n	100039e4 <HAL_RCC_OscConfig+0x530>
10003a06:	e01e      	b.n	10003a46 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10003a08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a0c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10003a10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003a14:	f023 0301 	bic.w	r3, r3, #1
10003a18:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10003a1c:	f7fd f9d8 	bl	10000dd0 <HAL_GetTick>
10003a20:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10003a22:	e008      	b.n	10003a36 <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10003a24:	f7fd f9d4 	bl	10000dd0 <HAL_GetTick>
10003a28:	4602      	mov	r2, r0
10003a2a:	68bb      	ldr	r3, [r7, #8]
10003a2c:	1ad3      	subs	r3, r2, r3
10003a2e:	2b64      	cmp	r3, #100	; 0x64
10003a30:	d901      	bls.n	10003a36 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
10003a32:	2303      	movs	r3, #3
10003a34:	e06a      	b.n	10003b0c <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10003a36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a3a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10003a3e:	f003 0302 	and.w	r3, r3, #2
10003a42:	2b02      	cmp	r3, #2
10003a44:	d0ee      	beq.n	10003a24 <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
10003a46:	687b      	ldr	r3, [r7, #4]
10003a48:	681b      	ldr	r3, [r3, #0]
10003a4a:	f003 0304 	and.w	r3, r3, #4
10003a4e:	2b00      	cmp	r3, #0
10003a50:	d02b      	beq.n	10003aaa <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
10003a52:	4b07      	ldr	r3, [pc, #28]	; (10003a70 <HAL_RCC_OscConfig+0x5bc>)
10003a54:	681b      	ldr	r3, [r3, #0]
10003a56:	4a06      	ldr	r2, [pc, #24]	; (10003a70 <HAL_RCC_OscConfig+0x5bc>)
10003a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10003a5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
10003a5e:	f7fd f9b7 	bl	10000dd0 <HAL_GetTick>
10003a62:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10003a64:	e00f      	b.n	10003a86 <HAL_RCC_OscConfig+0x5d2>
10003a66:	bf00      	nop
10003a68:	10020000 	.word	0x10020000
10003a6c:	10020004 	.word	0x10020004
10003a70:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10003a74:	f7fd f9ac 	bl	10000dd0 <HAL_GetTick>
10003a78:	4602      	mov	r2, r0
10003a7a:	68bb      	ldr	r3, [r7, #8]
10003a7c:	1ad3      	subs	r3, r2, r3
10003a7e:	2b64      	cmp	r3, #100	; 0x64
10003a80:	d901      	bls.n	10003a86 <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
10003a82:	2303      	movs	r3, #3
10003a84:	e042      	b.n	10003b0c <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10003a86:	4b23      	ldr	r3, [pc, #140]	; (10003b14 <HAL_RCC_OscConfig+0x660>)
10003a88:	681b      	ldr	r3, [r3, #0]
10003a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
10003a8e:	2b00      	cmp	r3, #0
10003a90:	d0f0      	beq.n	10003a74 <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
10003a92:	687b      	ldr	r3, [r7, #4]
10003a94:	689b      	ldr	r3, [r3, #8]
10003a96:	4618      	mov	r0, r3
10003a98:	f000 f8a9 	bl	10003bee <HAL_RCC_LSEConfig>
10003a9c:	4603      	mov	r3, r0
10003a9e:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
10003aa0:	7bfb      	ldrb	r3, [r7, #15]
10003aa2:	2b00      	cmp	r3, #0
10003aa4:	d001      	beq.n	10003aaa <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
10003aa6:	7bfb      	ldrb	r3, [r7, #15]
10003aa8:	e030      	b.n	10003b0c <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
10003aaa:	687b      	ldr	r3, [r7, #4]
10003aac:	3324      	adds	r3, #36	; 0x24
10003aae:	4618      	mov	r0, r3
10003ab0:	f000 f91a 	bl	10003ce8 <RCC_PLL1_Config>
10003ab4:	4603      	mov	r3, r0
10003ab6:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10003ab8:	7bfb      	ldrb	r3, [r7, #15]
10003aba:	2b00      	cmp	r3, #0
10003abc:	d001      	beq.n	10003ac2 <HAL_RCC_OscConfig+0x60e>
  {
    return result;
10003abe:	7bfb      	ldrb	r3, [r7, #15]
10003ac0:	e024      	b.n	10003b0c <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
10003ac2:	687b      	ldr	r3, [r7, #4]
10003ac4:	3360      	adds	r3, #96	; 0x60
10003ac6:	4618      	mov	r0, r3
10003ac8:	f001 f9cc 	bl	10004e64 <RCCEx_PLL2_Config>
10003acc:	4603      	mov	r3, r0
10003ace:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10003ad0:	7bfb      	ldrb	r3, [r7, #15]
10003ad2:	2b00      	cmp	r3, #0
10003ad4:	d001      	beq.n	10003ada <HAL_RCC_OscConfig+0x626>
  {
    return result;
10003ad6:	7bfb      	ldrb	r3, [r7, #15]
10003ad8:	e018      	b.n	10003b0c <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
10003ada:	687b      	ldr	r3, [r7, #4]
10003adc:	339c      	adds	r3, #156	; 0x9c
10003ade:	4618      	mov	r0, r3
10003ae0:	f001 fb42 	bl	10005168 <RCCEx_PLL3_Config>
10003ae4:	4603      	mov	r3, r0
10003ae6:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10003ae8:	7bfb      	ldrb	r3, [r7, #15]
10003aea:	2b00      	cmp	r3, #0
10003aec:	d001      	beq.n	10003af2 <HAL_RCC_OscConfig+0x63e>
  {
    return result;
10003aee:	7bfb      	ldrb	r3, [r7, #15]
10003af0:	e00c      	b.n	10003b0c <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
10003af2:	687b      	ldr	r3, [r7, #4]
10003af4:	33d8      	adds	r3, #216	; 0xd8
10003af6:	4618      	mov	r0, r3
10003af8:	f001 fca0 	bl	1000543c <RCCEx_PLL4_Config>
10003afc:	4603      	mov	r3, r0
10003afe:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10003b00:	7bfb      	ldrb	r3, [r7, #15]
10003b02:	2b00      	cmp	r3, #0
10003b04:	d001      	beq.n	10003b0a <HAL_RCC_OscConfig+0x656>
  {
    return result;
10003b06:	7bfb      	ldrb	r3, [r7, #15]
10003b08:	e000      	b.n	10003b0c <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
10003b0a:	2300      	movs	r3, #0
}
10003b0c:	4618      	mov	r0, r3
10003b0e:	3710      	adds	r7, #16
10003b10:	46bd      	mov	sp, r7
10003b12:	bd80      	pop	{r7, pc}
10003b14:	50001000 	.word	0x50001000

10003b18 <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
10003b18:	b580      	push	{r7, lr}
10003b1a:	b084      	sub	sp, #16
10003b1c:	af00      	add	r7, sp, #0
10003b1e:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
10003b20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b24:	f44f 7280 	mov.w	r2, #256	; 0x100
10003b28:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10003b2a:	f7fd f951 	bl	10000dd0 <HAL_GetTick>
10003b2e:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10003b30:	e008      	b.n	10003b44 <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10003b32:	f7fd f94d 	bl	10000dd0 <HAL_GetTick>
10003b36:	4602      	mov	r2, r0
10003b38:	68fb      	ldr	r3, [r7, #12]
10003b3a:	1ad3      	subs	r3, r2, r3
10003b3c:	2b64      	cmp	r3, #100	; 0x64
10003b3e:	d901      	bls.n	10003b44 <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
10003b40:	2303      	movs	r3, #3
10003b42:	e050      	b.n	10003be6 <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10003b44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b48:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
10003b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10003b54:	d0ed      	beq.n	10003b32 <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
10003b56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b5a:	f44f 6290 	mov.w	r2, #1152	; 0x480
10003b5e:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
10003b60:	687b      	ldr	r3, [r7, #4]
10003b62:	2b00      	cmp	r3, #0
10003b64:	d03e      	beq.n	10003be4 <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
10003b66:	687b      	ldr	r3, [r7, #4]
10003b68:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
10003b6c:	d108      	bne.n	10003b80 <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10003b6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b72:	68db      	ldr	r3, [r3, #12]
10003b74:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003b78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
10003b7c:	60d3      	str	r3, [r2, #12]
10003b7e:	e013      	b.n	10003ba8 <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
10003b80:	687b      	ldr	r3, [r7, #4]
10003b82:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
10003b86:	d10f      	bne.n	10003ba8 <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
10003b88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b8c:	68db      	ldr	r3, [r3, #12]
10003b8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
10003b96:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10003b98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b9c:	68db      	ldr	r3, [r3, #12]
10003b9e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003ba2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
10003ba6:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
10003ba8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003bac:	68db      	ldr	r3, [r3, #12]
10003bae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10003bb6:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10003bb8:	f7fd f90a 	bl	10000dd0 <HAL_GetTick>
10003bbc:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10003bbe:	e008      	b.n	10003bd2 <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10003bc0:	f7fd f906 	bl	10000dd0 <HAL_GetTick>
10003bc4:	4602      	mov	r2, r0
10003bc6:	68fb      	ldr	r3, [r7, #12]
10003bc8:	1ad3      	subs	r3, r2, r3
10003bca:	2b64      	cmp	r3, #100	; 0x64
10003bcc:	d901      	bls.n	10003bd2 <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
10003bce:	2303      	movs	r3, #3
10003bd0:	e009      	b.n	10003be6 <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10003bd2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003bd6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
10003bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10003be2:	d1ed      	bne.n	10003bc0 <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
10003be4:	2300      	movs	r3, #0
}
10003be6:	4618      	mov	r0, r3
10003be8:	3710      	adds	r7, #16
10003bea:	46bd      	mov	sp, r7
10003bec:	bd80      	pop	{r7, pc}

10003bee <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
10003bee:	b580      	push	{r7, lr}
10003bf0:	b084      	sub	sp, #16
10003bf2:	af00      	add	r7, sp, #0
10003bf4:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10003bf6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003bfa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10003bfe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003c02:	f023 0301 	bic.w	r3, r3, #1
10003c06:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10003c0a:	f7fd f8e1 	bl	10000dd0 <HAL_GetTick>
10003c0e:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10003c10:	e00a      	b.n	10003c28 <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10003c12:	f7fd f8dd 	bl	10000dd0 <HAL_GetTick>
10003c16:	4602      	mov	r2, r0
10003c18:	68fb      	ldr	r3, [r7, #12]
10003c1a:	1ad3      	subs	r3, r2, r3
10003c1c:	f241 3288 	movw	r2, #5000	; 0x1388
10003c20:	4293      	cmp	r3, r2
10003c22:	d901      	bls.n	10003c28 <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
10003c24:	2303      	movs	r3, #3
10003c26:	e05b      	b.n	10003ce0 <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10003c28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10003c30:	f003 0304 	and.w	r3, r3, #4
10003c34:	2b04      	cmp	r3, #4
10003c36:	d0ec      	beq.n	10003c12 <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
10003c38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10003c40:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003c44:	f023 030a 	bic.w	r3, r3, #10
10003c48:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
10003c4c:	687b      	ldr	r3, [r7, #4]
10003c4e:	2b00      	cmp	r3, #0
10003c50:	d045      	beq.n	10003cde <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
10003c52:	687b      	ldr	r3, [r7, #4]
10003c54:	2b03      	cmp	r3, #3
10003c56:	d10a      	bne.n	10003c6e <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10003c58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10003c60:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003c64:	f043 0302 	orr.w	r3, r3, #2
10003c68:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
10003c6c:	e016      	b.n	10003c9c <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
10003c6e:	687b      	ldr	r3, [r7, #4]
10003c70:	2b0b      	cmp	r3, #11
10003c72:	d113      	bne.n	10003c9c <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
10003c74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c78:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10003c7c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003c80:	f043 0308 	orr.w	r3, r3, #8
10003c84:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10003c88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10003c90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003c94:	f043 0302 	orr.w	r3, r3, #2
10003c98:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10003c9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ca0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10003ca4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003ca8:	f043 0301 	orr.w	r3, r3, #1
10003cac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10003cb0:	f7fd f88e 	bl	10000dd0 <HAL_GetTick>
10003cb4:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10003cb6:	e00a      	b.n	10003cce <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10003cb8:	f7fd f88a 	bl	10000dd0 <HAL_GetTick>
10003cbc:	4602      	mov	r2, r0
10003cbe:	68fb      	ldr	r3, [r7, #12]
10003cc0:	1ad3      	subs	r3, r2, r3
10003cc2:	f241 3288 	movw	r2, #5000	; 0x1388
10003cc6:	4293      	cmp	r3, r2
10003cc8:	d901      	bls.n	10003cce <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
10003cca:	2303      	movs	r3, #3
10003ccc:	e008      	b.n	10003ce0 <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10003cce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003cd2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10003cd6:	f003 0304 	and.w	r3, r3, #4
10003cda:	2b04      	cmp	r3, #4
10003cdc:	d1ec      	bne.n	10003cb8 <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
10003cde:	2300      	movs	r3, #0
}
10003ce0:	4618      	mov	r0, r3
10003ce2:	3710      	adds	r7, #16
10003ce4:	46bd      	mov	sp, r7
10003ce6:	bd80      	pop	{r7, pc}

10003ce8 <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
10003ce8:	b580      	push	{r7, lr}
10003cea:	b084      	sub	sp, #16
10003cec:	af00      	add	r7, sp, #0
10003cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
10003cf0:	687b      	ldr	r3, [r7, #4]
10003cf2:	681b      	ldr	r3, [r3, #0]
10003cf4:	2b00      	cmp	r3, #0
10003cf6:	f000 8174 	beq.w	10003fe2 <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
10003cfa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003cfe:	6a1b      	ldr	r3, [r3, #32]
10003d00:	f003 0303 	and.w	r3, r3, #3
10003d04:	2b02      	cmp	r3, #2
10003d06:	d108      	bne.n	10003d1a <RCC_PLL1_Config+0x32>
10003d08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d0c:	6a1b      	ldr	r3, [r3, #32]
10003d0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003d12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003d16:	f000 8162 	beq.w	10003fde <RCC_PLL1_Config+0x2f6>
10003d1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d1e:	6a1b      	ldr	r3, [r3, #32]
10003d20:	f003 0303 	and.w	r3, r3, #3
10003d24:	2b03      	cmp	r3, #3
10003d26:	d108      	bne.n	10003d3a <RCC_PLL1_Config+0x52>
10003d28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d2c:	6a1b      	ldr	r3, [r3, #32]
10003d2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003d32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003d36:	f000 8152 	beq.w	10003fde <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
10003d3a:	687b      	ldr	r3, [r7, #4]
10003d3c:	681b      	ldr	r3, [r3, #0]
10003d3e:	2b02      	cmp	r3, #2
10003d40:	f040 8123 	bne.w	10003f8a <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10003d44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10003d4c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10003d54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
10003d58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10003d60:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003d64:	f023 0301 	bic.w	r3, r3, #1
10003d68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003d6c:	f7fd f830 	bl	10000dd0 <HAL_GetTick>
10003d70:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10003d72:	e008      	b.n	10003d86 <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003d74:	f7fd f82c 	bl	10000dd0 <HAL_GetTick>
10003d78:	4602      	mov	r2, r0
10003d7a:	68fb      	ldr	r3, [r7, #12]
10003d7c:	1ad3      	subs	r3, r2, r3
10003d7e:	2b64      	cmp	r3, #100	; 0x64
10003d80:	d901      	bls.n	10003d86 <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
10003d82:	2303      	movs	r3, #3
10003d84:	e12e      	b.n	10003fe4 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10003d86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10003d8e:	f003 0302 	and.w	r3, r3, #2
10003d92:	2b02      	cmp	r3, #2
10003d94:	d0ee      	beq.n	10003d74 <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
10003d96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003d9c:	f003 0307 	and.w	r3, r3, #7
10003da0:	2b02      	cmp	r3, #2
10003da2:	d112      	bne.n	10003dca <RCC_PLL1_Config+0xe2>
10003da4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003daa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003db2:	d10a      	bne.n	10003dca <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10003db4:	687b      	ldr	r3, [r7, #4]
10003db6:	685a      	ldr	r2, [r3, #4]
10003db8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10003dbe:	f003 0303 	and.w	r3, r3, #3
10003dc2:	429a      	cmp	r2, r3
10003dc4:	d00c      	beq.n	10003de0 <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
10003dc6:	2301      	movs	r3, #1
10003dc8:	e10c      	b.n	10003fe4 <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
10003dca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10003dd0:	f023 0203 	bic.w	r2, r3, #3
10003dd4:	687b      	ldr	r3, [r7, #4]
10003dd6:	685b      	ldr	r3, [r3, #4]
10003dd8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003ddc:	4313      	orrs	r3, r2
10003dde:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10003de0:	e008      	b.n	10003df4 <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003de2:	f7fc fff5 	bl	10000dd0 <HAL_GetTick>
10003de6:	4602      	mov	r2, r0
10003de8:	68fb      	ldr	r3, [r7, #12]
10003dea:	1ad3      	subs	r3, r2, r3
10003dec:	2b64      	cmp	r3, #100	; 0x64
10003dee:	d901      	bls.n	10003df4 <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
10003df0:	2303      	movs	r3, #3
10003df2:	e0f7      	b.n	10003fe4 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10003df4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10003dfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003e02:	d1ee      	bne.n	10003de2 <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
10003e04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003e08:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
10003e0c:	4b77      	ldr	r3, [pc, #476]	; (10003fec <RCC_PLL1_Config+0x304>)
10003e0e:	4013      	ands	r3, r2
10003e10:	687a      	ldr	r2, [r7, #4]
10003e12:	68d2      	ldr	r2, [r2, #12]
10003e14:	1e51      	subs	r1, r2, #1
10003e16:	687a      	ldr	r2, [r7, #4]
10003e18:	6892      	ldr	r2, [r2, #8]
10003e1a:	3a01      	subs	r2, #1
10003e1c:	0412      	lsls	r2, r2, #16
10003e1e:	430a      	orrs	r2, r1
10003e20:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003e24:	4313      	orrs	r3, r2
10003e26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
10003e2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10003e32:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10003e36:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10003e3a:	687a      	ldr	r2, [r7, #4]
10003e3c:	6912      	ldr	r2, [r2, #16]
10003e3e:	1e51      	subs	r1, r2, #1
10003e40:	687a      	ldr	r2, [r7, #4]
10003e42:	6952      	ldr	r2, [r2, #20]
10003e44:	3a01      	subs	r2, #1
10003e46:	0212      	lsls	r2, r2, #8
10003e48:	4311      	orrs	r1, r2
10003e4a:	687a      	ldr	r2, [r7, #4]
10003e4c:	6992      	ldr	r2, [r2, #24]
10003e4e:	3a01      	subs	r2, #1
10003e50:	0412      	lsls	r2, r2, #16
10003e52:	430a      	orrs	r2, r1
10003e54:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003e58:	4313      	orrs	r3, r2
10003e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
10003e5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10003e66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10003e6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
10003e72:	687b      	ldr	r3, [r7, #4]
10003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003e76:	2b02      	cmp	r3, #2
10003e78:	d003      	beq.n	10003e82 <RCC_PLL1_Config+0x19a>
10003e7a:	687b      	ldr	r3, [r7, #4]
10003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003e7e:	2b00      	cmp	r3, #0
10003e80:	d10c      	bne.n	10003e9c <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
10003e82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10003e8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003e8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10003e92:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10003e96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
10003e9a:	e00f      	b.n	10003ebc <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
10003e9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10003ea4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10003ea8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10003eac:	687a      	ldr	r2, [r7, #4]
10003eae:	6a12      	ldr	r2, [r2, #32]
10003eb0:	00d2      	lsls	r2, r2, #3
10003eb2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003eb6:	4313      	orrs	r3, r2
10003eb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
10003ebc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10003ec4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10003ecc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10003ed0:	687b      	ldr	r3, [r7, #4]
10003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003ed4:	2b02      	cmp	r3, #2
10003ed6:	d124      	bne.n	10003f22 <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
10003ed8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
10003ee0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10003ee4:	687b      	ldr	r3, [r7, #4]
10003ee6:	6a99      	ldr	r1, [r3, #40]	; 0x28
10003ee8:	687b      	ldr	r3, [r7, #4]
10003eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10003eec:	4319      	orrs	r1, r3
10003eee:	687b      	ldr	r3, [r7, #4]
10003ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10003ef2:	4319      	orrs	r1, r3
10003ef4:	687b      	ldr	r3, [r7, #4]
10003ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10003ef8:	4319      	orrs	r1, r3
10003efa:	687b      	ldr	r3, [r7, #4]
10003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10003efe:	041b      	lsls	r3, r3, #16
10003f00:	430b      	orrs	r3, r1
10003f02:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003f06:	4313      	orrs	r3, r2
10003f08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
10003f0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10003f14:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003f18:	f043 0304 	orr.w	r3, r3, #4
10003f1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
10003f20:	e009      	b.n	10003f36 <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
10003f22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10003f2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003f2e:	f023 0304 	bic.w	r3, r3, #4
10003f32:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
10003f36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10003f3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003f42:	f043 0301 	orr.w	r3, r3, #1
10003f46:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003f4a:	f7fc ff41 	bl	10000dd0 <HAL_GetTick>
10003f4e:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10003f50:	e008      	b.n	10003f64 <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003f52:	f7fc ff3d 	bl	10000dd0 <HAL_GetTick>
10003f56:	4602      	mov	r2, r0
10003f58:	68fb      	ldr	r3, [r7, #12]
10003f5a:	1ad3      	subs	r3, r2, r3
10003f5c:	2b64      	cmp	r3, #100	; 0x64
10003f5e:	d901      	bls.n	10003f64 <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
10003f60:	2303      	movs	r3, #3
10003f62:	e03f      	b.n	10003fe4 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10003f64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10003f6c:	f003 0302 	and.w	r3, r3, #2
10003f70:	2b02      	cmp	r3, #2
10003f72:	d1ee      	bne.n	10003f52 <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10003f74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10003f7c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003f80:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10003f84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
10003f88:	e02b      	b.n	10003fe2 <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10003f8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10003f92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10003f9a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
10003f9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10003fa6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003faa:	f023 0301 	bic.w	r3, r3, #1
10003fae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003fb2:	f7fc ff0d 	bl	10000dd0 <HAL_GetTick>
10003fb6:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10003fb8:	e008      	b.n	10003fcc <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003fba:	f7fc ff09 	bl	10000dd0 <HAL_GetTick>
10003fbe:	4602      	mov	r2, r0
10003fc0:	68fb      	ldr	r3, [r7, #12]
10003fc2:	1ad3      	subs	r3, r2, r3
10003fc4:	2b64      	cmp	r3, #100	; 0x64
10003fc6:	d901      	bls.n	10003fcc <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
10003fc8:	2303      	movs	r3, #3
10003fca:	e00b      	b.n	10003fe4 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10003fcc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10003fd4:	f003 0302 	and.w	r3, r3, #2
10003fd8:	2b02      	cmp	r3, #2
10003fda:	d0ee      	beq.n	10003fba <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
10003fdc:	e001      	b.n	10003fe2 <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10003fde:	2301      	movs	r3, #1
10003fe0:	e000      	b.n	10003fe4 <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
10003fe2:	2300      	movs	r3, #0

}
10003fe4:	4618      	mov	r0, r3
10003fe6:	3710      	adds	r7, #16
10003fe8:	46bd      	mov	sp, r7
10003fea:	bd80      	pop	{r7, pc}
10003fec:	ffc0fe00 	.word	0xffc0fe00

10003ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
10003ff0:	b580      	push	{r7, lr}
10003ff2:	b084      	sub	sp, #16
10003ff4:	af00      	add	r7, sp, #0
10003ff6:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
10003ff8:	2300      	movs	r3, #0
10003ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10003ffc:	687b      	ldr	r3, [r7, #4]
10003ffe:	2b00      	cmp	r3, #0
10004000:	d101      	bne.n	10004006 <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
10004002:	2301      	movs	r3, #1
10004004:	e102      	b.n	1000420c <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
10004006:	687b      	ldr	r3, [r7, #4]
10004008:	681b      	ldr	r3, [r3, #0]
1000400a:	f003 0301 	and.w	r3, r3, #1
1000400e:	2b00      	cmp	r3, #0
10004010:	d00b      	beq.n	1000402a <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
10004012:	687b      	ldr	r3, [r7, #4]
10004014:	3304      	adds	r3, #4
10004016:	4618      	mov	r0, r3
10004018:	f000 f8fc 	bl	10004214 <RCC_MPUConfig>
1000401c:	4603      	mov	r3, r0
1000401e:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10004020:	7bfb      	ldrb	r3, [r7, #15]
10004022:	2b00      	cmp	r3, #0
10004024:	d001      	beq.n	1000402a <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
10004026:	7bfb      	ldrb	r3, [r7, #15]
10004028:	e0f0      	b.n	1000420c <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
1000402a:	687b      	ldr	r3, [r7, #4]
1000402c:	681b      	ldr	r3, [r3, #0]
1000402e:	f003 0302 	and.w	r3, r3, #2
10004032:	2b00      	cmp	r3, #0
10004034:	d00b      	beq.n	1000404e <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
10004036:	687b      	ldr	r3, [r7, #4]
10004038:	330c      	adds	r3, #12
1000403a:	4618      	mov	r0, r3
1000403c:	f000 f960 	bl	10004300 <RCC_AXISSConfig>
10004040:	4603      	mov	r3, r0
10004042:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10004044:	7bfb      	ldrb	r3, [r7, #15]
10004046:	2b00      	cmp	r3, #0
10004048:	d001      	beq.n	1000404e <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
1000404a:	7bfb      	ldrb	r3, [r7, #15]
1000404c:	e0de      	b.n	1000420c <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
1000404e:	687b      	ldr	r3, [r7, #4]
10004050:	681b      	ldr	r3, [r3, #0]
10004052:	f003 0304 	and.w	r3, r3, #4
10004056:	2b00      	cmp	r3, #0
10004058:	d00b      	beq.n	10004072 <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
1000405a:	687b      	ldr	r3, [r7, #4]
1000405c:	3314      	adds	r3, #20
1000405e:	4618      	mov	r0, r3
10004060:	f000 f9e6 	bl	10004430 <RCC_MCUConfig>
10004064:	4603      	mov	r3, r0
10004066:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10004068:	7bfb      	ldrb	r3, [r7, #15]
1000406a:	2b00      	cmp	r3, #0
1000406c:	d001      	beq.n	10004072 <HAL_RCC_ClockConfig+0x82>
    {
      return status;
1000406e:	7bfb      	ldrb	r3, [r7, #15]
10004070:	e0cc      	b.n	1000420c <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
10004072:	687b      	ldr	r3, [r7, #4]
10004074:	681b      	ldr	r3, [r3, #0]
10004076:	f003 0308 	and.w	r3, r3, #8
1000407a:	2b00      	cmp	r3, #0
1000407c:	d020      	beq.n	100040c0 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
1000407e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10004084:	f023 0207 	bic.w	r2, r3, #7
10004088:	687b      	ldr	r3, [r7, #4]
1000408a:	69db      	ldr	r3, [r3, #28]
1000408c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004090:	4313      	orrs	r3, r2
10004092:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004094:	f7fc fe9c 	bl	10000dd0 <HAL_GetTick>
10004098:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
1000409a:	e009      	b.n	100040b0 <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000409c:	f7fc fe98 	bl	10000dd0 <HAL_GetTick>
100040a0:	4602      	mov	r2, r0
100040a2:	68bb      	ldr	r3, [r7, #8]
100040a4:	1ad3      	subs	r3, r2, r3
100040a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100040aa:	d901      	bls.n	100040b0 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
100040ac:	2303      	movs	r3, #3
100040ae:	e0ad      	b.n	1000420c <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
100040b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100040b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100040b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100040ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100040be:	d1ed      	bne.n	1000409c <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
100040c0:	687b      	ldr	r3, [r7, #4]
100040c2:	681b      	ldr	r3, [r3, #0]
100040c4:	f003 0310 	and.w	r3, r3, #16
100040c8:	2b00      	cmp	r3, #0
100040ca:	d020      	beq.n	1000410e <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
100040cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100040d2:	f023 0207 	bic.w	r2, r3, #7
100040d6:	687b      	ldr	r3, [r7, #4]
100040d8:	6a1b      	ldr	r3, [r3, #32]
100040da:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100040de:	4313      	orrs	r3, r2
100040e0:	640b      	str	r3, [r1, #64]	; 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100040e2:	f7fc fe75 	bl	10000dd0 <HAL_GetTick>
100040e6:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
100040e8:	e009      	b.n	100040fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100040ea:	f7fc fe71 	bl	10000dd0 <HAL_GetTick>
100040ee:	4602      	mov	r2, r0
100040f0:	68bb      	ldr	r3, [r7, #8]
100040f2:	1ad3      	subs	r3, r2, r3
100040f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100040f8:	d901      	bls.n	100040fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
100040fa:	2303      	movs	r3, #3
100040fc:	e086      	b.n	1000420c <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
100040fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10004104:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004108:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000410c:	d1ed      	bne.n	100040ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
1000410e:	687b      	ldr	r3, [r7, #4]
10004110:	681b      	ldr	r3, [r3, #0]
10004112:	f003 0320 	and.w	r3, r3, #32
10004116:	2b00      	cmp	r3, #0
10004118:	d023      	beq.n	10004162 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
1000411a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000411e:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10004122:	f023 0207 	bic.w	r2, r3, #7
10004126:	687b      	ldr	r3, [r7, #4]
10004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000412a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000412e:	4313      	orrs	r3, r2
10004130:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004134:	f7fc fe4c 	bl	10000dd0 <HAL_GetTick>
10004138:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
1000413a:	e009      	b.n	10004150 <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000413c:	f7fc fe48 	bl	10000dd0 <HAL_GetTick>
10004140:	4602      	mov	r2, r0
10004142:	68bb      	ldr	r3, [r7, #8]
10004144:	1ad3      	subs	r3, r2, r3
10004146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000414a:	d901      	bls.n	10004150 <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
1000414c:	2303      	movs	r3, #3
1000414e:	e05d      	b.n	1000420c <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10004150:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004154:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10004158:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000415c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004160:	d1ec      	bne.n	1000413c <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
10004162:	687b      	ldr	r3, [r7, #4]
10004164:	681b      	ldr	r3, [r3, #0]
10004166:	f003 0340 	and.w	r3, r3, #64	; 0x40
1000416a:	2b00      	cmp	r3, #0
1000416c:	d023      	beq.n	100041b6 <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
1000416e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004172:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10004176:	f023 0207 	bic.w	r2, r3, #7
1000417a:	687b      	ldr	r3, [r7, #4]
1000417c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000417e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004182:	4313      	orrs	r3, r2
10004184:	f8c1 3838 	str.w	r3, [r1, #2104]	; 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004188:	f7fc fe22 	bl	10000dd0 <HAL_GetTick>
1000418c:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
1000418e:	e009      	b.n	100041a4 <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004190:	f7fc fe1e 	bl	10000dd0 <HAL_GetTick>
10004194:	4602      	mov	r2, r0
10004196:	68bb      	ldr	r3, [r7, #8]
10004198:	1ad3      	subs	r3, r2, r3
1000419a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000419e:	d901      	bls.n	100041a4 <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
100041a0:	2303      	movs	r3, #3
100041a2:	e033      	b.n	1000420c <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
100041a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100041a8:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
100041ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100041b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100041b4:	d1ec      	bne.n	10004190 <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
100041b6:	687b      	ldr	r3, [r7, #4]
100041b8:	681b      	ldr	r3, [r3, #0]
100041ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
100041be:	2b00      	cmp	r3, #0
100041c0:	d023      	beq.n	1000420a <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
100041c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100041c6:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
100041ca:	f023 0207 	bic.w	r2, r3, #7
100041ce:	687b      	ldr	r3, [r7, #4]
100041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100041d2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100041d6:	4313      	orrs	r3, r2
100041d8:	f8c1 383c 	str.w	r3, [r1, #2108]	; 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100041dc:	f7fc fdf8 	bl	10000dd0 <HAL_GetTick>
100041e0:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
100041e2:	e009      	b.n	100041f8 <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100041e4:	f7fc fdf4 	bl	10000dd0 <HAL_GetTick>
100041e8:	4602      	mov	r2, r0
100041ea:	68bb      	ldr	r3, [r7, #8]
100041ec:	1ad3      	subs	r3, r2, r3
100041ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100041f2:	d901      	bls.n	100041f8 <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
100041f4:	2303      	movs	r3, #3
100041f6:	e009      	b.n	1000420c <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
100041f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100041fc:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
10004200:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004204:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004208:	d1ec      	bne.n	100041e4 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
1000420a:	2300      	movs	r3, #0
}
1000420c:	4618      	mov	r0, r3
1000420e:	3710      	adds	r7, #16
10004210:	46bd      	mov	sp, r7
10004212:	bd80      	pop	{r7, pc}

10004214 <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
10004214:	b580      	push	{r7, lr}
10004216:	b084      	sub	sp, #16
10004218:	af00      	add	r7, sp, #0
1000421a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
1000421c:	687b      	ldr	r3, [r7, #4]
1000421e:	681b      	ldr	r3, [r3, #0]
10004220:	2b03      	cmp	r3, #3
10004222:	d840      	bhi.n	100042a6 <RCC_MPUConfig+0x92>
10004224:	a201      	add	r2, pc, #4	; (adr r2, 1000422c <RCC_MPUConfig+0x18>)
10004226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000422a:	bf00      	nop
1000422c:	1000423d 	.word	0x1000423d
10004230:	10004251 	.word	0x10004251
10004234:	10004267 	.word	0x10004267
10004238:	1000427b 	.word	0x1000427b
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
1000423c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004240:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004244:	f003 0301 	and.w	r3, r3, #1
10004248:	2b01      	cmp	r3, #1
1000424a:	d02e      	beq.n	100042aa <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
1000424c:	2301      	movs	r3, #1
1000424e:	e053      	b.n	100042f8 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10004250:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004254:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004258:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000425c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10004260:	d025      	beq.n	100042ae <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
10004262:	2301      	movs	r3, #1
10004264:	e048      	b.n	100042f8 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10004266:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000426a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000426e:	f003 0302 	and.w	r3, r3, #2
10004272:	2b02      	cmp	r3, #2
10004274:	d01d      	beq.n	100042b2 <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
10004276:	2301      	movs	r3, #1
10004278:	e03e      	b.n	100042f8 <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
1000427a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000427e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004282:	f003 0302 	and.w	r3, r3, #2
10004286:	2b02      	cmp	r3, #2
10004288:	d001      	beq.n	1000428e <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
1000428a:	2301      	movs	r3, #1
1000428c:	e034      	b.n	100042f8 <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
1000428e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10004294:	f023 0207 	bic.w	r2, r3, #7
10004298:	687b      	ldr	r3, [r7, #4]
1000429a:	685b      	ldr	r3, [r3, #4]
1000429c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100042a0:	4313      	orrs	r3, r2
100042a2:	62cb      	str	r3, [r1, #44]	; 0x2c

      break;
100042a4:	e006      	b.n	100042b4 <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
100042a6:	2301      	movs	r3, #1
100042a8:	e026      	b.n	100042f8 <RCC_MPUConfig+0xe4>
      break;
100042aa:	bf00      	nop
100042ac:	e002      	b.n	100042b4 <RCC_MPUConfig+0xa0>
      break;
100042ae:	bf00      	nop
100042b0:	e000      	b.n	100042b4 <RCC_MPUConfig+0xa0>
      break;
100042b2:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
100042b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100042b8:	6a1b      	ldr	r3, [r3, #32]
100042ba:	f023 0203 	bic.w	r2, r3, #3
100042be:	687b      	ldr	r3, [r7, #4]
100042c0:	681b      	ldr	r3, [r3, #0]
100042c2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100042c6:	4313      	orrs	r3, r2
100042c8:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100042ca:	f7fc fd81 	bl	10000dd0 <HAL_GetTick>
100042ce:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
100042d0:	e009      	b.n	100042e6 <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100042d2:	f7fc fd7d 	bl	10000dd0 <HAL_GetTick>
100042d6:	4602      	mov	r2, r0
100042d8:	68fb      	ldr	r3, [r7, #12]
100042da:	1ad3      	subs	r3, r2, r3
100042dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100042e0:	d901      	bls.n	100042e6 <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
100042e2:	2303      	movs	r3, #3
100042e4:	e008      	b.n	100042f8 <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
100042e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100042ea:	6a1b      	ldr	r3, [r3, #32]
100042ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100042f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100042f4:	d1ed      	bne.n	100042d2 <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
100042f6:	2300      	movs	r3, #0
}
100042f8:	4618      	mov	r0, r3
100042fa:	3710      	adds	r7, #16
100042fc:	46bd      	mov	sp, r7
100042fe:	bd80      	pop	{r7, pc}

10004300 <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
10004300:	b580      	push	{r7, lr}
10004302:	b084      	sub	sp, #16
10004304:	af00      	add	r7, sp, #0
10004306:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
10004308:	687b      	ldr	r3, [r7, #4]
1000430a:	681b      	ldr	r3, [r3, #0]
1000430c:	2b02      	cmp	r3, #2
1000430e:	d01b      	beq.n	10004348 <RCC_AXISSConfig+0x48>
10004310:	2b02      	cmp	r3, #2
10004312:	d823      	bhi.n	1000435c <RCC_AXISSConfig+0x5c>
10004314:	2b00      	cmp	r3, #0
10004316:	d002      	beq.n	1000431e <RCC_AXISSConfig+0x1e>
10004318:	2b01      	cmp	r3, #1
1000431a:	d00a      	beq.n	10004332 <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
1000431c:	e01e      	b.n	1000435c <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
1000431e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004322:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004326:	f003 0301 	and.w	r3, r3, #1
1000432a:	2b01      	cmp	r3, #1
1000432c:	d018      	beq.n	10004360 <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
1000432e:	2301      	movs	r3, #1
10004330:	e079      	b.n	10004426 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10004332:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004336:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000433a:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000433e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10004342:	d00f      	beq.n	10004364 <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
10004344:	2301      	movs	r3, #1
10004346:	e06e      	b.n	10004426 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10004348:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000434c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10004350:	f003 0302 	and.w	r3, r3, #2
10004354:	2b02      	cmp	r3, #2
10004356:	d007      	beq.n	10004368 <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
10004358:	2301      	movs	r3, #1
1000435a:	e064      	b.n	10004426 <RCC_AXISSConfig+0x126>
      break;
1000435c:	bf00      	nop
1000435e:	e004      	b.n	1000436a <RCC_AXISSConfig+0x6a>
      break;
10004360:	bf00      	nop
10004362:	e002      	b.n	1000436a <RCC_AXISSConfig+0x6a>
      break;
10004364:	bf00      	nop
10004366:	e000      	b.n	1000436a <RCC_AXISSConfig+0x6a>
      break;
10004368:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
1000436a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004370:	f023 0207 	bic.w	r2, r3, #7
10004374:	687b      	ldr	r3, [r7, #4]
10004376:	681b      	ldr	r3, [r3, #0]
10004378:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000437c:	4313      	orrs	r3, r2
1000437e:	624b      	str	r3, [r1, #36]	; 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
10004380:	687b      	ldr	r3, [r7, #4]
10004382:	681b      	ldr	r3, [r3, #0]
10004384:	2b03      	cmp	r3, #3
10004386:	d016      	beq.n	100043b6 <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004388:	f7fc fd22 	bl	10000dd0 <HAL_GetTick>
1000438c:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
1000438e:	e009      	b.n	100043a4 <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004390:	f7fc fd1e 	bl	10000dd0 <HAL_GetTick>
10004394:	4602      	mov	r2, r0
10004396:	68fb      	ldr	r3, [r7, #12]
10004398:	1ad3      	subs	r3, r2, r3
1000439a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000439e:	d901      	bls.n	100043a4 <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
100043a0:	2303      	movs	r3, #3
100043a2:	e040      	b.n	10004426 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
100043a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100043aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100043ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100043b2:	d1ed      	bne.n	10004390 <RCC_AXISSConfig+0x90>
100043b4:	e015      	b.n	100043e2 <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100043b6:	f7fc fd0b 	bl	10000dd0 <HAL_GetTick>
100043ba:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
100043bc:	e009      	b.n	100043d2 <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100043be:	f7fc fd07 	bl	10000dd0 <HAL_GetTick>
100043c2:	4602      	mov	r2, r0
100043c4:	68fb      	ldr	r3, [r7, #12]
100043c6:	1ad3      	subs	r3, r2, r3
100043c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100043cc:	d901      	bls.n	100043d2 <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
100043ce:	2303      	movs	r3, #3
100043d0:	e029      	b.n	10004426 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
100043d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100043d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100043dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100043e0:	d0ed      	beq.n	100043be <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
100043e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100043e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100043e8:	f023 0207 	bic.w	r2, r3, #7
100043ec:	687b      	ldr	r3, [r7, #4]
100043ee:	685b      	ldr	r3, [r3, #4]
100043f0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100043f4:	4313      	orrs	r3, r2
100043f6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100043f8:	f7fc fcea 	bl	10000dd0 <HAL_GetTick>
100043fc:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
100043fe:	e009      	b.n	10004414 <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004400:	f7fc fce6 	bl	10000dd0 <HAL_GetTick>
10004404:	4602      	mov	r2, r0
10004406:	68fb      	ldr	r3, [r7, #12]
10004408:	1ad3      	subs	r3, r2, r3
1000440a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000440e:	d901      	bls.n	10004414 <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
10004410:	2303      	movs	r3, #3
10004412:	e008      	b.n	10004426 <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10004414:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000441a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000441e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004422:	d1ed      	bne.n	10004400 <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
10004424:	2300      	movs	r3, #0
}
10004426:	4618      	mov	r0, r3
10004428:	3710      	adds	r7, #16
1000442a:	46bd      	mov	sp, r7
1000442c:	bd80      	pop	{r7, pc}
	...

10004430 <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
10004430:	b580      	push	{r7, lr}
10004432:	b084      	sub	sp, #16
10004434:	af00      	add	r7, sp, #0
10004436:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
10004438:	687b      	ldr	r3, [r7, #4]
1000443a:	681b      	ldr	r3, [r3, #0]
1000443c:	2b03      	cmp	r3, #3
1000443e:	d834      	bhi.n	100044aa <RCC_MCUConfig+0x7a>
10004440:	a201      	add	r2, pc, #4	; (adr r2, 10004448 <RCC_MCUConfig+0x18>)
10004442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004446:	bf00      	nop
10004448:	10004459 	.word	0x10004459
1000444c:	1000446d 	.word	0x1000446d
10004450:	10004483 	.word	0x10004483
10004454:	10004497 	.word	0x10004497
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10004458:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000445c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004460:	f003 0301 	and.w	r3, r3, #1
10004464:	2b01      	cmp	r3, #1
10004466:	d022      	beq.n	100044ae <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
10004468:	2301      	movs	r3, #1
1000446a:	e081      	b.n	10004570 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000446c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004470:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004474:	f403 7380 	and.w	r3, r3, #256	; 0x100
10004478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
1000447c:	d019      	beq.n	100044b2 <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
1000447e:	2301      	movs	r3, #1
10004480:	e076      	b.n	10004570 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10004482:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004486:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000448a:	f003 0310 	and.w	r3, r3, #16
1000448e:	2b10      	cmp	r3, #16
10004490:	d011      	beq.n	100044b6 <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
10004492:	2301      	movs	r3, #1
10004494:	e06c      	b.n	10004570 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10004496:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000449a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000449e:	f003 0302 	and.w	r3, r3, #2
100044a2:	2b02      	cmp	r3, #2
100044a4:	d009      	beq.n	100044ba <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
100044a6:	2301      	movs	r3, #1
100044a8:	e062      	b.n	10004570 <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
100044aa:	bf00      	nop
100044ac:	e006      	b.n	100044bc <RCC_MCUConfig+0x8c>
      break;
100044ae:	bf00      	nop
100044b0:	e004      	b.n	100044bc <RCC_MCUConfig+0x8c>
      break;
100044b2:	bf00      	nop
100044b4:	e002      	b.n	100044bc <RCC_MCUConfig+0x8c>
      break;
100044b6:	bf00      	nop
100044b8:	e000      	b.n	100044bc <RCC_MCUConfig+0x8c>
      break;
100044ba:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
100044bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100044c2:	f023 0203 	bic.w	r2, r3, #3
100044c6:	687b      	ldr	r3, [r7, #4]
100044c8:	681b      	ldr	r3, [r3, #0]
100044ca:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100044ce:	4313      	orrs	r3, r2
100044d0:	648b      	str	r3, [r1, #72]	; 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100044d2:	f7fc fc7d 	bl	10000dd0 <HAL_GetTick>
100044d6:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
100044d8:	e009      	b.n	100044ee <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100044da:	f7fc fc79 	bl	10000dd0 <HAL_GetTick>
100044de:	4602      	mov	r2, r0
100044e0:	68fb      	ldr	r3, [r7, #12]
100044e2:	1ad3      	subs	r3, r2, r3
100044e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100044e8:	d901      	bls.n	100044ee <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
100044ea:	2303      	movs	r3, #3
100044ec:	e040      	b.n	10004570 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
100044ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100044f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100044f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100044fc:	d1ed      	bne.n	100044da <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
100044fe:	f000 fc15 	bl	10004d2c <HAL_RCC_GetSystemCoreClockFreq>
10004502:	4603      	mov	r3, r0
10004504:	4a1c      	ldr	r2, [pc, #112]	; (10004578 <RCC_MCUConfig+0x148>)
10004506:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10004508:	4b1c      	ldr	r3, [pc, #112]	; (1000457c <RCC_MCUConfig+0x14c>)
1000450a:	681b      	ldr	r3, [r3, #0]
1000450c:	4618      	mov	r0, r3
1000450e:	f7fc fc15 	bl	10000d3c <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
10004512:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004516:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
1000451a:	f023 020f 	bic.w	r2, r3, #15
1000451e:	687b      	ldr	r3, [r7, #4]
10004520:	685b      	ldr	r3, [r3, #4]
10004522:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004526:	4313      	orrs	r3, r2
10004528:	f8c1 3830 	str.w	r3, [r1, #2096]	; 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
1000452c:	f7fc fc50 	bl	10000dd0 <HAL_GetTick>
10004530:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10004532:	e009      	b.n	10004548 <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004534:	f7fc fc4c 	bl	10000dd0 <HAL_GetTick>
10004538:	4602      	mov	r2, r0
1000453a:	68fb      	ldr	r3, [r7, #12]
1000453c:	1ad3      	subs	r3, r2, r3
1000453e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004542:	d901      	bls.n	10004548 <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
10004544:	2303      	movs	r3, #3
10004546:	e013      	b.n	10004570 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10004548:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000454c:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10004550:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004554:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004558:	d1ec      	bne.n	10004534 <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
1000455a:	f000 fbe7 	bl	10004d2c <HAL_RCC_GetSystemCoreClockFreq>
1000455e:	4603      	mov	r3, r0
10004560:	4a05      	ldr	r2, [pc, #20]	; (10004578 <RCC_MCUConfig+0x148>)
10004562:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10004564:	4b05      	ldr	r3, [pc, #20]	; (1000457c <RCC_MCUConfig+0x14c>)
10004566:	681b      	ldr	r3, [r3, #0]
10004568:	4618      	mov	r0, r3
1000456a:	f7fc fbe7 	bl	10000d3c <HAL_InitTick>
#endif

  return HAL_OK;
1000456e:	2300      	movs	r3, #0
}
10004570:	4618      	mov	r0, r3
10004572:	3710      	adds	r7, #16
10004574:	46bd      	mov	sp, r7
10004576:	bd80      	pop	{r7, pc}
10004578:	10020000 	.word	0x10020000
1000457c:	10020004 	.word	0x10020004

10004580 <HAL_RCC_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
10004580:	b480      	push	{r7}
10004582:	b089      	sub	sp, #36	; 0x24
10004584:	af00      	add	r7, sp, #0
10004586:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0U, pll2m = 1U, pll2fracen = 0U, hsivalue = 0U;
10004588:	2300      	movs	r3, #0
1000458a:	61bb      	str	r3, [r7, #24]
1000458c:	2301      	movs	r3, #1
1000458e:	617b      	str	r3, [r7, #20]
10004590:	2300      	movs	r3, #0
10004592:	613b      	str	r3, [r7, #16]
10004594:	2300      	movs	r3, #0
10004596:	60fb      	str	r3, [r7, #12]
  float fracn1, pll2vco = 0;
10004598:	f04f 0300 	mov.w	r3, #0
1000459c:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL12_SOURCE();
1000459e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100045a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100045a4:	f003 0303 	and.w	r3, r3, #3
100045a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLL2CFGR1 & RCC_PLL2CFGR1_DIVM2) >> RCC_PLL2CFGR1_DIVM2_Pos) + 1U;
100045aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100045ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
100045b2:	0c1b      	lsrs	r3, r3, #16
100045b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
100045b8:	3301      	adds	r3, #1
100045ba:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLL2FRACR & RCC_PLL2FRACR_FRACLE) >> RCC_PLL2FRACR_FRACLE_Pos;
100045bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100045c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
100045c4:	0c1b      	lsrs	r3, r3, #16
100045c6:	f003 0301 	and.w	r3, r3, #1
100045ca:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACV) >> RCC_PLL2FRACR_FRACV_Pos));
100045cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100045d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
100045d4:	08db      	lsrs	r3, r3, #3
100045d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
100045da:	693a      	ldr	r2, [r7, #16]
100045dc:	fb02 f303 	mul.w	r3, r2, r3
100045e0:	ee07 3a90 	vmov	s15, r3
100045e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
100045e8:	edc7 7a02 	vstr	s15, [r7, #8]
  pll2vco = (float)((float)((RCC->PLL2CFGR1 & RCC_PLL2CFGR1_DIVN) + 1U) + (fracn1 / (float)0x2000));  //Intermediary value
100045ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100045f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
100045f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
100045f8:	3301      	adds	r3, #1
100045fa:	ee07 3a90 	vmov	s15, r3
100045fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004602:	edd7 6a02 	vldr	s13, [r7, #8]
10004606:	ed9f 6a51 	vldr	s12, [pc, #324]	; 1000474c <HAL_RCC_GetPLL2ClockFreq+0x1cc>
1000460a:	eec6 7a86 	vdiv.f32	s15, s13, s12
1000460e:	ee77 7a27 	vadd.f32	s15, s14, s15
10004612:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10004616:	69bb      	ldr	r3, [r7, #24]
10004618:	2b02      	cmp	r3, #2
1000461a:	d047      	beq.n	100046ac <HAL_RCC_GetPLL2ClockFreq+0x12c>
1000461c:	69bb      	ldr	r3, [r7, #24]
1000461e:	2b02      	cmp	r3, #2
10004620:	d848      	bhi.n	100046b4 <HAL_RCC_GetPLL2ClockFreq+0x134>
10004622:	69bb      	ldr	r3, [r7, #24]
10004624:	2b00      	cmp	r3, #0
10004626:	d003      	beq.n	10004630 <HAL_RCC_GetPLL2ClockFreq+0xb0>
10004628:	69bb      	ldr	r3, [r7, #24]
1000462a:	2b01      	cmp	r3, #1
1000462c:	d02f      	beq.n	1000468e <HAL_RCC_GetPLL2ClockFreq+0x10e>
1000462e:	e041      	b.n	100046b4 <HAL_RCC_GetPLL2ClockFreq+0x134>
  {
    case RCC_PLL12SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10004630:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004634:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004638:	f003 0304 	and.w	r3, r3, #4
1000463c:	2b04      	cmp	r3, #4
1000463e:	d117      	bne.n	10004670 <HAL_RCC_GetPLL2ClockFreq+0xf0>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10004640:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004644:	699b      	ldr	r3, [r3, #24]
10004646:	f003 0303 	and.w	r3, r3, #3
1000464a:	4a41      	ldr	r2, [pc, #260]	; (10004750 <HAL_RCC_GetPLL2ClockFreq+0x1d0>)
1000464c:	fa22 f303 	lsr.w	r3, r2, r3
10004650:	60fb      	str	r3, [r7, #12]
        pll2vco *= (float)(hsivalue / pll2m);
10004652:	68fa      	ldr	r2, [r7, #12]
10004654:	697b      	ldr	r3, [r7, #20]
10004656:	fbb2 f3f3 	udiv	r3, r2, r3
1000465a:	ee07 3a90 	vmov	s15, r3
1000465e:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004662:	ed97 7a07 	vldr	s14, [r7, #28]
10004666:	ee67 7a27 	vmul.f32	s15, s14, s15
1000466a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco *= (float)(HSI_VALUE / pll2m);
      }
      break;
1000466e:	e025      	b.n	100046bc <HAL_RCC_GetPLL2ClockFreq+0x13c>
        pll2vco *= (float)(HSI_VALUE / pll2m);
10004670:	4a37      	ldr	r2, [pc, #220]	; (10004750 <HAL_RCC_GetPLL2ClockFreq+0x1d0>)
10004672:	697b      	ldr	r3, [r7, #20]
10004674:	fbb2 f3f3 	udiv	r3, r2, r3
10004678:	ee07 3a90 	vmov	s15, r3
1000467c:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004680:	ed97 7a07 	vldr	s14, [r7, #28]
10004684:	ee67 7a27 	vmul.f32	s15, s14, s15
10004688:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
1000468c:	e016      	b.n	100046bc <HAL_RCC_GetPLL2ClockFreq+0x13c>

    case RCC_PLL12SOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco *= (float)(HSE_VALUE / pll2m);
1000468e:	4a31      	ldr	r2, [pc, #196]	; (10004754 <HAL_RCC_GetPLL2ClockFreq+0x1d4>)
10004690:	697b      	ldr	r3, [r7, #20]
10004692:	fbb2 f3f3 	udiv	r3, r2, r3
10004696:	ee07 3a90 	vmov	s15, r3
1000469a:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000469e:	ed97 7a07 	vldr	s14, [r7, #28]
100046a2:	ee67 7a27 	vmul.f32	s15, s14, s15
100046a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100046aa:	e007      	b.n	100046bc <HAL_RCC_GetPLL2ClockFreq+0x13c>

    case RCC_PLL12SOURCE_OFF:  /* No clock source for PLL */
      pll2vco = 0;
100046ac:	f04f 0300 	mov.w	r3, #0
100046b0:	61fb      	str	r3, [r7, #28]
      break;
100046b2:	e003      	b.n	100046bc <HAL_RCC_GetPLL2ClockFreq+0x13c>

    default:
      pll2vco = 0;
100046b4:	f04f 0300 	mov.w	r3, #0
100046b8:	61fb      	str	r3, [r7, #28]
      break;
100046ba:	bf00      	nop
  }

  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVP) >> RCC_PLL2CFGR2_DIVP_Pos) + 1U)));
100046bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100046c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
100046c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
100046c8:	3301      	adds	r3, #1
100046ca:	ee07 3a90 	vmov	s15, r3
100046ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100046d2:	edd7 6a07 	vldr	s13, [r7, #28]
100046d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
100046da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100046de:	ee17 2a90 	vmov	r2, s15
100046e2:	687b      	ldr	r3, [r7, #4]
100046e4:	601a      	str	r2, [r3, #0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVQ) >> RCC_PLL2CFGR2_DIVQ_Pos) + 1U)));
100046e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100046ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
100046ee:	0a1b      	lsrs	r3, r3, #8
100046f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
100046f4:	3301      	adds	r3, #1
100046f6:	ee07 3a90 	vmov	s15, r3
100046fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100046fe:	edd7 6a07 	vldr	s13, [r7, #28]
10004702:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004706:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1000470a:	ee17 2a90 	vmov	r2, s15
1000470e:	687b      	ldr	r3, [r7, #4]
10004710:	605a      	str	r2, [r3, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVR) >> RCC_PLL2CFGR2_DIVR_Pos) + 1U)));
10004712:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004716:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
1000471a:	0c1b      	lsrs	r3, r3, #16
1000471c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004720:	3301      	adds	r3, #1
10004722:	ee07 3a90 	vmov	s15, r3
10004726:	eeb8 7a67 	vcvt.f32.u32	s14, s15
1000472a:	edd7 6a07 	vldr	s13, [r7, #28]
1000472e:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004736:	ee17 2a90 	vmov	r2, s15
1000473a:	687b      	ldr	r3, [r7, #4]
1000473c:	609a      	str	r2, [r3, #8]
}
1000473e:	bf00      	nop
10004740:	3724      	adds	r7, #36	; 0x24
10004742:	46bd      	mov	sp, r7
10004744:	f85d 7b04 	ldr.w	r7, [sp], #4
10004748:	4770      	bx	lr
1000474a:	bf00      	nop
1000474c:	46000000 	.word	0x46000000
10004750:	03d09000 	.word	0x03d09000
10004754:	016e3600 	.word	0x016e3600

10004758 <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
10004758:	b480      	push	{r7}
1000475a:	b089      	sub	sp, #36	; 0x24
1000475c:	af00      	add	r7, sp, #0
1000475e:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
10004760:	2300      	movs	r3, #0
10004762:	61bb      	str	r3, [r7, #24]
10004764:	2301      	movs	r3, #1
10004766:	617b      	str	r3, [r7, #20]
10004768:	2300      	movs	r3, #0
1000476a:	613b      	str	r3, [r7, #16]
1000476c:	2300      	movs	r3, #0
1000476e:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
10004770:	f04f 0300 	mov.w	r3, #0
10004774:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
10004776:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000477a:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
1000477e:	f003 0303 	and.w	r3, r3, #3
10004782:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
10004784:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004788:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
1000478c:	0c1b      	lsrs	r3, r3, #16
1000478e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10004792:	3301      	adds	r3, #1
10004794:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
10004796:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000479a:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
1000479e:	0c1b      	lsrs	r3, r3, #16
100047a0:	f003 0301 	and.w	r3, r3, #1
100047a4:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
100047a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100047aa:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100047ae:	08db      	lsrs	r3, r3, #3
100047b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
100047b4:	693a      	ldr	r2, [r7, #16]
100047b6:	fb02 f303 	mul.w	r3, r2, r3
100047ba:	ee07 3a90 	vmov	s15, r3
100047be:	eef8 7a67 	vcvt.f32.u32	s15, s15
100047c2:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
100047c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100047ca:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
100047ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
100047d2:	3301      	adds	r3, #1
100047d4:	ee07 3a90 	vmov	s15, r3
100047d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100047dc:	edd7 6a02 	vldr	s13, [r7, #8]
100047e0:	ed9f 6a56 	vldr	s12, [pc, #344]	; 1000493c <HAL_RCC_GetPLL3ClockFreq+0x1e4>
100047e4:	eec6 7a86 	vdiv.f32	s15, s13, s12
100047e8:	ee77 7a27 	vadd.f32	s15, s14, s15
100047ec:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
100047f0:	69bb      	ldr	r3, [r7, #24]
100047f2:	2b03      	cmp	r3, #3
100047f4:	d85b      	bhi.n	100048ae <HAL_RCC_GetPLL3ClockFreq+0x156>
100047f6:	a201      	add	r2, pc, #4	; (adr r2, 100047fc <HAL_RCC_GetPLL3ClockFreq+0xa4>)
100047f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100047fc:	1000480d 	.word	0x1000480d
10004800:	1000486b 	.word	0x1000486b
10004804:	10004889 	.word	0x10004889
10004808:	100048a7 	.word	0x100048a7
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
1000480c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004810:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004814:	f003 0304 	and.w	r3, r3, #4
10004818:	2b04      	cmp	r3, #4
1000481a:	d117      	bne.n	1000484c <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
1000481c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004820:	699b      	ldr	r3, [r3, #24]
10004822:	f003 0303 	and.w	r3, r3, #3
10004826:	4a46      	ldr	r2, [pc, #280]	; (10004940 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10004828:	fa22 f303 	lsr.w	r3, r2, r3
1000482c:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
1000482e:	68fa      	ldr	r2, [r7, #12]
10004830:	697b      	ldr	r3, [r7, #20]
10004832:	fbb2 f3f3 	udiv	r3, r2, r3
10004836:	ee07 3a90 	vmov	s15, r3
1000483a:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000483e:	ed97 7a07 	vldr	s14, [r7, #28]
10004842:	ee67 7a27 	vmul.f32	s15, s14, s15
10004846:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
1000484a:	e030      	b.n	100048ae <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
1000484c:	4a3c      	ldr	r2, [pc, #240]	; (10004940 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
1000484e:	697b      	ldr	r3, [r7, #20]
10004850:	fbb2 f3f3 	udiv	r3, r2, r3
10004854:	ee07 3a90 	vmov	s15, r3
10004858:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000485c:	ed97 7a07 	vldr	s14, [r7, #28]
10004860:	ee67 7a27 	vmul.f32	s15, s14, s15
10004864:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004868:	e021      	b.n	100048ae <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
1000486a:	4a36      	ldr	r2, [pc, #216]	; (10004944 <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
1000486c:	697b      	ldr	r3, [r7, #20]
1000486e:	fbb2 f3f3 	udiv	r3, r2, r3
10004872:	ee07 3a90 	vmov	s15, r3
10004876:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000487a:	ed97 7a07 	vldr	s14, [r7, #28]
1000487e:	ee67 7a27 	vmul.f32	s15, s14, s15
10004882:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004886:	e012      	b.n	100048ae <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
10004888:	4a2f      	ldr	r2, [pc, #188]	; (10004948 <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
1000488a:	697b      	ldr	r3, [r7, #20]
1000488c:	fbb2 f3f3 	udiv	r3, r2, r3
10004890:	ee07 3a90 	vmov	s15, r3
10004894:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004898:	ed97 7a07 	vldr	s14, [r7, #28]
1000489c:	ee67 7a27 	vmul.f32	s15, s14, s15
100048a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100048a4:	e003      	b.n	100048ae <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
100048a6:	f04f 0300 	mov.w	r3, #0
100048aa:	61fb      	str	r3, [r7, #28]
      break;
100048ac:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
100048ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100048b2:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
100048b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
100048ba:	3301      	adds	r3, #1
100048bc:	ee07 3a90 	vmov	s15, r3
100048c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100048c4:	edd7 6a07 	vldr	s13, [r7, #28]
100048c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
100048cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100048d0:	ee17 2a90 	vmov	r2, s15
100048d4:	687b      	ldr	r3, [r7, #4]
100048d6:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
100048d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100048dc:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
100048e0:	0a1b      	lsrs	r3, r3, #8
100048e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
100048e6:	3301      	adds	r3, #1
100048e8:	ee07 3a90 	vmov	s15, r3
100048ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100048f0:	edd7 6a07 	vldr	s13, [r7, #28]
100048f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
100048f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100048fc:	ee17 2a90 	vmov	r2, s15
10004900:	687b      	ldr	r3, [r7, #4]
10004902:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
10004904:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004908:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
1000490c:	0c1b      	lsrs	r3, r3, #16
1000490e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004912:	3301      	adds	r3, #1
10004914:	ee07 3a90 	vmov	s15, r3
10004918:	eeb8 7a67 	vcvt.f32.u32	s14, s15
1000491c:	edd7 6a07 	vldr	s13, [r7, #28]
10004920:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004924:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004928:	ee17 2a90 	vmov	r2, s15
1000492c:	687b      	ldr	r3, [r7, #4]
1000492e:	609a      	str	r2, [r3, #8]
}
10004930:	bf00      	nop
10004932:	3724      	adds	r7, #36	; 0x24
10004934:	46bd      	mov	sp, r7
10004936:	f85d 7b04 	ldr.w	r7, [sp], #4
1000493a:	4770      	bx	lr
1000493c:	46000000 	.word	0x46000000
10004940:	03d09000 	.word	0x03d09000
10004944:	016e3600 	.word	0x016e3600
10004948:	003d0900 	.word	0x003d0900

1000494c <HAL_RCC_GetPLL4ClockFreq>:
  *         right PLL4CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL4_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL4ClockFreq(PLL4_ClocksTypeDef *PLL4_Clocks)
{
1000494c:	b480      	push	{r7}
1000494e:	b089      	sub	sp, #36	; 0x24
10004950:	af00      	add	r7, sp, #0
10004952:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0U, pll4m = 1U, pll4fracen = 0U, hsivalue = 0U;
10004954:	2300      	movs	r3, #0
10004956:	61bb      	str	r3, [r7, #24]
10004958:	2301      	movs	r3, #1
1000495a:	617b      	str	r3, [r7, #20]
1000495c:	2300      	movs	r3, #0
1000495e:	613b      	str	r3, [r7, #16]
10004960:	2300      	movs	r3, #0
10004962:	60fb      	str	r3, [r7, #12]
  float fracn1, pll4vco = 0;
10004964:	f04f 0300 	mov.w	r3, #0
10004968:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL4_SOURCE();
1000496a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000496e:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10004972:	f003 0303 	and.w	r3, r3, #3
10004976:	61bb      	str	r3, [r7, #24]
  pll4m = ((RCC->PLL4CFGR1 & RCC_PLL4CFGR1_DIVM4) >> RCC_PLL4CFGR1_DIVM4_Pos) + 1U;
10004978:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000497c:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
10004980:	0c1b      	lsrs	r3, r3, #16
10004982:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10004986:	3301      	adds	r3, #1
10004988:	617b      	str	r3, [r7, #20]
  pll4fracen = (RCC->PLL4FRACR & RCC_PLL4FRACR_FRACLE) >> RCC_PLL4FRACR_FRACLE_Pos;
1000498a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000498e:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10004992:	0c1b      	lsrs	r3, r3, #16
10004994:	f003 0301 	and.w	r3, r3, #1
10004998:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll4fracen * ((RCC->PLL4FRACR & RCC_PLL4FRACR_FRACV) >> RCC_PLL4FRACR_FRACV_Pos));
1000499a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000499e:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100049a2:	08db      	lsrs	r3, r3, #3
100049a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
100049a8:	693a      	ldr	r2, [r7, #16]
100049aa:	fb02 f303 	mul.w	r3, r2, r3
100049ae:	ee07 3a90 	vmov	s15, r3
100049b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
100049b6:	edc7 7a02 	vstr	s15, [r7, #8]
  pll4vco = (float)((float)((RCC->PLL4CFGR1 & RCC_PLL4CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
100049ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100049be:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
100049c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
100049c6:	3301      	adds	r3, #1
100049c8:	ee07 3a90 	vmov	s15, r3
100049cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100049d0:	edd7 6a02 	vldr	s13, [r7, #8]
100049d4:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 10004b48 <HAL_RCC_GetPLL4ClockFreq+0x1fc>
100049d8:	eec6 7a86 	vdiv.f32	s15, s13, s12
100049dc:	ee77 7a27 	vadd.f32	s15, s14, s15
100049e0:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
100049e4:	69bb      	ldr	r3, [r7, #24]
100049e6:	2b03      	cmp	r3, #3
100049e8:	d866      	bhi.n	10004ab8 <HAL_RCC_GetPLL4ClockFreq+0x16c>
100049ea:	a201      	add	r2, pc, #4	; (adr r2, 100049f0 <HAL_RCC_GetPLL4ClockFreq+0xa4>)
100049ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100049f0:	10004a01 	.word	0x10004a01
100049f4:	10004a5f 	.word	0x10004a5f
100049f8:	10004a7d 	.word	0x10004a7d
100049fc:	10004a9b 	.word	0x10004a9b
  {
    case RCC_PLL4SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10004a00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a04:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004a08:	f003 0304 	and.w	r3, r3, #4
10004a0c:	2b04      	cmp	r3, #4
10004a0e:	d117      	bne.n	10004a40 <HAL_RCC_GetPLL4ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10004a10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a14:	699b      	ldr	r3, [r3, #24]
10004a16:	f003 0303 	and.w	r3, r3, #3
10004a1a:	4a4c      	ldr	r2, [pc, #304]	; (10004b4c <HAL_RCC_GetPLL4ClockFreq+0x200>)
10004a1c:	fa22 f303 	lsr.w	r3, r2, r3
10004a20:	60fb      	str	r3, [r7, #12]
        pll4vco *= (float)(hsivalue / pll4m);
10004a22:	68fa      	ldr	r2, [r7, #12]
10004a24:	697b      	ldr	r3, [r7, #20]
10004a26:	fbb2 f3f3 	udiv	r3, r2, r3
10004a2a:	ee07 3a90 	vmov	s15, r3
10004a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004a32:	ed97 7a07 	vldr	s14, [r7, #28]
10004a36:	ee67 7a27 	vmul.f32	s15, s14, s15
10004a3a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll4vco *= (float)(HSI_VALUE / pll4m);
      }
      break;
10004a3e:	e03b      	b.n	10004ab8 <HAL_RCC_GetPLL4ClockFreq+0x16c>
        pll4vco *= (float)(HSI_VALUE / pll4m);
10004a40:	4a42      	ldr	r2, [pc, #264]	; (10004b4c <HAL_RCC_GetPLL4ClockFreq+0x200>)
10004a42:	697b      	ldr	r3, [r7, #20]
10004a44:	fbb2 f3f3 	udiv	r3, r2, r3
10004a48:	ee07 3a90 	vmov	s15, r3
10004a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004a50:	ed97 7a07 	vldr	s14, [r7, #28]
10004a54:	ee67 7a27 	vmul.f32	s15, s14, s15
10004a58:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004a5c:	e02c      	b.n	10004ab8 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_HSE:  /* HSE used as PLL clock source */
      pll4vco *= (float)(HSE_VALUE / pll4m);
10004a5e:	4a3c      	ldr	r2, [pc, #240]	; (10004b50 <HAL_RCC_GetPLL4ClockFreq+0x204>)
10004a60:	697b      	ldr	r3, [r7, #20]
10004a62:	fbb2 f3f3 	udiv	r3, r2, r3
10004a66:	ee07 3a90 	vmov	s15, r3
10004a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004a6e:	ed97 7a07 	vldr	s14, [r7, #28]
10004a72:	ee67 7a27 	vmul.f32	s15, s14, s15
10004a76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004a7a:	e01d      	b.n	10004ab8 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_CSI:  /* CSI used as PLL clock source */
      pll4vco *= (float)(CSI_VALUE / pll4m);
10004a7c:	4a35      	ldr	r2, [pc, #212]	; (10004b54 <HAL_RCC_GetPLL4ClockFreq+0x208>)
10004a7e:	697b      	ldr	r3, [r7, #20]
10004a80:	fbb2 f3f3 	udiv	r3, r2, r3
10004a84:	ee07 3a90 	vmov	s15, r3
10004a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004a8c:	ed97 7a07 	vldr	s14, [r7, #28]
10004a90:	ee67 7a27 	vmul.f32	s15, s14, s15
10004a94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004a98:	e00e      	b.n	10004ab8 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_I2S_CKIN:  /* Signal I2S_CKIN used as reference clock */
      pll4vco *= (float)(EXTERNAL_CLOCK_VALUE / pll4m);
10004a9a:	4a2f      	ldr	r2, [pc, #188]	; (10004b58 <HAL_RCC_GetPLL4ClockFreq+0x20c>)
10004a9c:	697b      	ldr	r3, [r7, #20]
10004a9e:	fbb2 f3f3 	udiv	r3, r2, r3
10004aa2:	ee07 3a90 	vmov	s15, r3
10004aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004aaa:	ed97 7a07 	vldr	s14, [r7, #28]
10004aae:	ee67 7a27 	vmul.f32	s15, s14, s15
10004ab2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004ab6:	bf00      	nop
  }

  PLL4_Clocks->PLL4_P_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVP) >> RCC_PLL4CFGR2_DIVP_Pos) + 1U)));
10004ab8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004abc:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
10004ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004ac4:	3301      	adds	r3, #1
10004ac6:	ee07 3a90 	vmov	s15, r3
10004aca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004ace:	edd7 6a07 	vldr	s13, [r7, #28]
10004ad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004ad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004ada:	ee17 2a90 	vmov	r2, s15
10004ade:	687b      	ldr	r3, [r7, #4]
10004ae0:	601a      	str	r2, [r3, #0]
  PLL4_Clocks->PLL4_Q_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVQ) >> RCC_PLL4CFGR2_DIVQ_Pos) + 1U)));
10004ae2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004ae6:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
10004aea:	0a1b      	lsrs	r3, r3, #8
10004aec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004af0:	3301      	adds	r3, #1
10004af2:	ee07 3a90 	vmov	s15, r3
10004af6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004afa:	edd7 6a07 	vldr	s13, [r7, #28]
10004afe:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004b06:	ee17 2a90 	vmov	r2, s15
10004b0a:	687b      	ldr	r3, [r7, #4]
10004b0c:	605a      	str	r2, [r3, #4]
  PLL4_Clocks->PLL4_R_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVR) >> RCC_PLL4CFGR2_DIVR_Pos) + 1U)));
10004b0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b12:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
10004b16:	0c1b      	lsrs	r3, r3, #16
10004b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004b1c:	3301      	adds	r3, #1
10004b1e:	ee07 3a90 	vmov	s15, r3
10004b22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004b26:	edd7 6a07 	vldr	s13, [r7, #28]
10004b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004b2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004b32:	ee17 2a90 	vmov	r2, s15
10004b36:	687b      	ldr	r3, [r7, #4]
10004b38:	609a      	str	r2, [r3, #8]
}
10004b3a:	bf00      	nop
10004b3c:	3724      	adds	r7, #36	; 0x24
10004b3e:	46bd      	mov	sp, r7
10004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
10004b44:	4770      	bx	lr
10004b46:	bf00      	nop
10004b48:	46000000 	.word	0x46000000
10004b4c:	03d09000 	.word	0x03d09000
10004b50:	016e3600 	.word	0x016e3600
10004b54:	003d0900 	.word	0x003d0900
10004b58:	00bb8000 	.word	0x00bb8000

10004b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
10004b5c:	b580      	push	{r7, lr}
10004b5e:	b082      	sub	sp, #8
10004b60:	af00      	add	r7, sp, #0
  uint32_t apb1div = 0;
10004b62:	2300      	movs	r3, #0
10004b64:	607b      	str	r3, [r7, #4]

  /* Compute PCLK1 frequency ---------------------------*/
  apb1div = __HAL_RCC_GET_APB1_DIV();
10004b66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b6a:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10004b6e:	f003 0307 	and.w	r3, r3, #7
10004b72:	607b      	str	r3, [r7, #4]
  if (apb1div > RCC_APB1_DIV16)
10004b74:	687b      	ldr	r3, [r7, #4]
10004b76:	2b04      	cmp	r3, #4
10004b78:	d901      	bls.n	10004b7e <HAL_RCC_GetPCLK1Freq+0x22>
  {
    apb1div = RCC_APB1_DIV16;
10004b7a:	2304      	movs	r3, #4
10004b7c:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb1div);
10004b7e:	f000 f88a 	bl	10004c96 <HAL_RCC_GetMCUFreq>
10004b82:	4602      	mov	r2, r0
10004b84:	687b      	ldr	r3, [r7, #4]
10004b86:	fa22 f303 	lsr.w	r3, r2, r3
}
10004b8a:	4618      	mov	r0, r3
10004b8c:	3708      	adds	r7, #8
10004b8e:	46bd      	mov	sp, r7
10004b90:	bd80      	pop	{r7, pc}

10004b92 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
10004b92:	b580      	push	{r7, lr}
10004b94:	b082      	sub	sp, #8
10004b96:	af00      	add	r7, sp, #0
  uint32_t apb2div = 0;
10004b98:	2300      	movs	r3, #0
10004b9a:	607b      	str	r3, [r7, #4]

  /* Compute PCLK2 frequency ---------------------------*/
  apb2div = __HAL_RCC_GET_APB2_DIV();
10004b9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004ba0:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10004ba4:	f003 0307 	and.w	r3, r3, #7
10004ba8:	607b      	str	r3, [r7, #4]
  if (apb2div > RCC_APB2_DIV16)
10004baa:	687b      	ldr	r3, [r7, #4]
10004bac:	2b04      	cmp	r3, #4
10004bae:	d901      	bls.n	10004bb4 <HAL_RCC_GetPCLK2Freq+0x22>
  {
    apb2div = RCC_APB2_DIV16;
10004bb0:	2304      	movs	r3, #4
10004bb2:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb2div);
10004bb4:	f000 f86f 	bl	10004c96 <HAL_RCC_GetMCUFreq>
10004bb8:	4602      	mov	r2, r0
10004bba:	687b      	ldr	r3, [r7, #4]
10004bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
10004bc0:	4618      	mov	r0, r3
10004bc2:	3708      	adds	r7, #8
10004bc4:	46bd      	mov	sp, r7
10004bc6:	bd80      	pop	{r7, pc}

10004bc8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
10004bc8:	b580      	push	{r7, lr}
10004bca:	b082      	sub	sp, #8
10004bcc:	af00      	add	r7, sp, #0
  uint32_t apb3div = 0;
10004bce:	2300      	movs	r3, #0
10004bd0:	607b      	str	r3, [r7, #4]

  /* Compute PCLK3 frequency ---------------------------*/
  apb3div = __HAL_RCC_GET_APB3_DIV();
10004bd2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004bd6:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
10004bda:	f003 0307 	and.w	r3, r3, #7
10004bde:	607b      	str	r3, [r7, #4]
  if (apb3div > RCC_APB3_DIV16)
10004be0:	687b      	ldr	r3, [r7, #4]
10004be2:	2b04      	cmp	r3, #4
10004be4:	d901      	bls.n	10004bea <HAL_RCC_GetPCLK3Freq+0x22>
  {
    apb3div = RCC_APB3_DIV16;
10004be6:	2304      	movs	r3, #4
10004be8:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb3div);
10004bea:	f000 f854 	bl	10004c96 <HAL_RCC_GetMCUFreq>
10004bee:	4602      	mov	r2, r0
10004bf0:	687b      	ldr	r3, [r7, #4]
10004bf2:	fa22 f303 	lsr.w	r3, r2, r3
}
10004bf6:	4618      	mov	r0, r3
10004bf8:	3708      	adds	r7, #8
10004bfa:	46bd      	mov	sp, r7
10004bfc:	bd80      	pop	{r7, pc}

10004bfe <HAL_RCC_GetPCLK5Freq>:
  * @note   Each time PCLK5 changes, this function must be called to update the
  *         right PCLK5 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK5 frequency
  */
uint32_t HAL_RCC_GetPCLK5Freq(void)
{
10004bfe:	b580      	push	{r7, lr}
10004c00:	b082      	sub	sp, #8
10004c02:	af00      	add	r7, sp, #0
  uint32_t apb5div = 0;
10004c04:	2300      	movs	r3, #0
10004c06:	607b      	str	r3, [r7, #4]

  /* Compute PCLK5 frequency ---------------------------*/
  apb5div = __HAL_RCC_GET_APB5_DIV();
10004c08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10004c0e:	f003 0307 	and.w	r3, r3, #7
10004c12:	607b      	str	r3, [r7, #4]
  if (apb5div > RCC_APB5_DIV16)
10004c14:	687b      	ldr	r3, [r7, #4]
10004c16:	2b04      	cmp	r3, #4
10004c18:	d901      	bls.n	10004c1e <HAL_RCC_GetPCLK5Freq+0x20>
  {
    apb5div = RCC_APB5_DIV16;
10004c1a:	2304      	movs	r3, #4
10004c1c:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetACLKFreq() >> apb5div);
10004c1e:	f000 f808 	bl	10004c32 <HAL_RCC_GetACLKFreq>
10004c22:	4602      	mov	r2, r0
10004c24:	687b      	ldr	r3, [r7, #4]
10004c26:	fa22 f303 	lsr.w	r3, r2, r3
}
10004c2a:	4618      	mov	r0, r3
10004c2c:	3708      	adds	r7, #8
10004c2e:	46bd      	mov	sp, r7
10004c30:	bd80      	pop	{r7, pc}

10004c32 <HAL_RCC_GetACLKFreq>:
  * @note   Each time ACLK changes, this function must be called to update the
  *         right ACLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval ACLK frequency
  */
uint32_t HAL_RCC_GetACLKFreq(void)
{
10004c32:	b580      	push	{r7, lr}
10004c34:	b082      	sub	sp, #8
10004c36:	af00      	add	r7, sp, #0
  uint32_t axidiv = 0;
10004c38:	2300      	movs	r3, #0
10004c3a:	607b      	str	r3, [r7, #4]

  /* Compute ACLK frequency ---------------------------*/
  axidiv = __HAL_RCC_GET_AXI_DIV();
10004c3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10004c42:	f003 0307 	and.w	r3, r3, #7
10004c46:	607b      	str	r3, [r7, #4]
  if (axidiv > RCC_AXI_DIV4)
10004c48:	687b      	ldr	r3, [r7, #4]
10004c4a:	2b03      	cmp	r3, #3
10004c4c:	d901      	bls.n	10004c52 <HAL_RCC_GetACLKFreq+0x20>
  {
    axidiv = RCC_AXI_DIV4;
10004c4e:	2303      	movs	r3, #3
10004c50:	607b      	str	r3, [r7, #4]
  }
  axidiv += 1;
10004c52:	687b      	ldr	r3, [r7, #4]
10004c54:	3301      	adds	r3, #1
10004c56:	607b      	str	r3, [r7, #4]

  return HAL_RCC_GetAXISSFreq() / axidiv;
10004c58:	f000 f870 	bl	10004d3c <HAL_RCC_GetAXISSFreq>
10004c5c:	4602      	mov	r2, r0
10004c5e:	687b      	ldr	r3, [r7, #4]
10004c60:	fbb2 f3f3 	udiv	r3, r2, r3
}
10004c64:	4618      	mov	r0, r3
10004c66:	3708      	adds	r7, #8
10004c68:	46bd      	mov	sp, r7
10004c6a:	bd80      	pop	{r7, pc}

10004c6c <HAL_RCC_GetHCLK6Freq>:
  * @note   Each time HCLK6 changes, this function must be called to update the
  *         right HCLK6 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK6 frequency
  */
uint32_t HAL_RCC_GetHCLK6Freq(void)
{
10004c6c:	b580      	push	{r7, lr}
10004c6e:	af00      	add	r7, sp, #0
  return HAL_RCC_GetACLKFreq();
10004c70:	f7ff ffdf 	bl	10004c32 <HAL_RCC_GetACLKFreq>
10004c74:	4603      	mov	r3, r0
}
10004c76:	4618      	mov	r0, r3
10004c78:	bd80      	pop	{r7, pc}

10004c7a <HAL_RCC_GetHCLK2Freq>:
  * @note   Each time HCLK1 changes, this function must be called to update the
  *         right HCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK2 frequency
  */
uint32_t HAL_RCC_GetHCLK2Freq(void)
{
10004c7a:	b580      	push	{r7, lr}
10004c7c:	af00      	add	r7, sp, #0
  return HAL_RCC_GetMCUFreq();
10004c7e:	f000 f80a 	bl	10004c96 <HAL_RCC_GetMCUFreq>
10004c82:	4603      	mov	r3, r0
}
10004c84:	4618      	mov	r0, r3
10004c86:	bd80      	pop	{r7, pc}

10004c88 <HAL_RCC_GetMLHCLKFreq>:
  * @note   Each time MLHCLK changes, this function must be called to update the
  *         right MLHCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK4 frequency
  */
uint32_t HAL_RCC_GetMLHCLKFreq(void)
{
10004c88:	b580      	push	{r7, lr}
10004c8a:	af00      	add	r7, sp, #0
  return HAL_RCC_GetMCUFreq();
10004c8c:	f000 f803 	bl	10004c96 <HAL_RCC_GetMCUFreq>
10004c90:	4603      	mov	r3, r0
}
10004c92:	4618      	mov	r0, r3
10004c94:	bd80      	pop	{r7, pc}

10004c96 <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
10004c96:	b580      	push	{r7, lr}
10004c98:	b082      	sub	sp, #8
10004c9a:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
10004c9c:	2300      	movs	r3, #0
10004c9e:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
10004ca0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004ca4:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10004ca8:	f003 030f 	and.w	r3, r3, #15
10004cac:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
10004cae:	687b      	ldr	r3, [r7, #4]
10004cb0:	2b09      	cmp	r3, #9
10004cb2:	d901      	bls.n	10004cb8 <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
10004cb4:	2309      	movs	r3, #9
10004cb6:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
10004cb8:	f000 f87e 	bl	10004db8 <HAL_RCC_GetMCUSSFreq>
10004cbc:	4602      	mov	r2, r0
10004cbe:	687b      	ldr	r3, [r7, #4]
10004cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
10004cc4:	4618      	mov	r0, r3
10004cc6:	3708      	adds	r7, #8
10004cc8:	46bd      	mov	sp, r7
10004cca:	bd80      	pop	{r7, pc}

10004ccc <RCC_GetCKPERFreq>:
  * @note   Each time CKPER changes, this function must be called to update the
  *         right CKPER value. Otherwise, any configuration based on this function will be incorrect.
  * @retval CKPER frequency
  */
uint32_t RCC_GetCKPERFreq(void)
{
10004ccc:	b480      	push	{r7}
10004cce:	b083      	sub	sp, #12
10004cd0:	af00      	add	r7, sp, #0
  uint32_t ckperclocksource = 0, frequency = 0;
10004cd2:	2300      	movs	r3, #0
10004cd4:	603b      	str	r3, [r7, #0]
10004cd6:	2300      	movs	r3, #0
10004cd8:	607b      	str	r3, [r7, #4]

  ckperclocksource = __HAL_RCC_GET_CKPER_SOURCE();
10004cda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004cde:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
10004ce2:	f003 0303 	and.w	r3, r3, #3
10004ce6:	603b      	str	r3, [r7, #0]

  if (ckperclocksource == RCC_CKPERCLKSOURCE_HSI)
10004ce8:	683b      	ldr	r3, [r7, #0]
10004cea:	2b00      	cmp	r3, #0
10004cec:	d102      	bne.n	10004cf4 <RCC_GetCKPERFreq+0x28>
  {
    /* In Case the main PLL Source is HSI */
    frequency = HSI_VALUE;
10004cee:	4b0c      	ldr	r3, [pc, #48]	; (10004d20 <RCC_GetCKPERFreq+0x54>)
10004cf0:	607b      	str	r3, [r7, #4]
10004cf2:	e00d      	b.n	10004d10 <RCC_GetCKPERFreq+0x44>
  }

  else if (ckperclocksource == RCC_CKPERCLKSOURCE_CSI)
10004cf4:	683b      	ldr	r3, [r7, #0]
10004cf6:	2b01      	cmp	r3, #1
10004cf8:	d102      	bne.n	10004d00 <RCC_GetCKPERFreq+0x34>
  {
    /* In Case the main PLL Source is CSI */
    frequency = CSI_VALUE;
10004cfa:	4b0a      	ldr	r3, [pc, #40]	; (10004d24 <RCC_GetCKPERFreq+0x58>)
10004cfc:	607b      	str	r3, [r7, #4]
10004cfe:	e007      	b.n	10004d10 <RCC_GetCKPERFreq+0x44>
  }

  else if (ckperclocksource == RCC_CKPERCLKSOURCE_HSE)
10004d00:	683b      	ldr	r3, [r7, #0]
10004d02:	2b02      	cmp	r3, #2
10004d04:	d102      	bne.n	10004d0c <RCC_GetCKPERFreq+0x40>
  {
    /* In Case the main PLL Source is HSE */
    frequency = HSE_VALUE;
10004d06:	4b08      	ldr	r3, [pc, #32]	; (10004d28 <RCC_GetCKPERFreq+0x5c>)
10004d08:	607b      	str	r3, [r7, #4]
10004d0a:	e001      	b.n	10004d10 <RCC_GetCKPERFreq+0x44>
  }
  else
  {
    frequency = 0;
10004d0c:	2300      	movs	r3, #0
10004d0e:	607b      	str	r3, [r7, #4]
  }

  return frequency;
10004d10:	687b      	ldr	r3, [r7, #4]
}
10004d12:	4618      	mov	r0, r3
10004d14:	370c      	adds	r7, #12
10004d16:	46bd      	mov	sp, r7
10004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
10004d1c:	4770      	bx	lr
10004d1e:	bf00      	nop
10004d20:	03d09000 	.word	0x03d09000
10004d24:	003d0900 	.word	0x003d0900
10004d28:	016e3600 	.word	0x016e3600

10004d2c <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
10004d2c:	b580      	push	{r7, lr}
10004d2e:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
10004d30:	f7ff ffb1 	bl	10004c96 <HAL_RCC_GetMCUFreq>
10004d34:	4603      	mov	r3, r0
#endif
}
10004d36:	4618      	mov	r0, r3
10004d38:	bd80      	pop	{r7, pc}
	...

10004d3c <HAL_RCC_GetAXISSFreq>:
  return mpussfreq;
}


uint32_t HAL_RCC_GetAXISSFreq()
{
10004d3c:	b580      	push	{r7, lr}
10004d3e:	b084      	sub	sp, #16
10004d40:	af00      	add	r7, sp, #0
  uint32_t axissfreq = 0;
10004d42:	2300      	movs	r3, #0
10004d44:	60fb      	str	r3, [r7, #12]
  PLL2_ClocksTypeDef pll2_clocks;

  switch (__HAL_RCC_GET_AXIS_SOURCE())
10004d46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004d4c:	f003 0307 	and.w	r3, r3, #7
10004d50:	2b02      	cmp	r3, #2
10004d52:	d006      	beq.n	10004d62 <HAL_RCC_GetAXISSFreq+0x26>
10004d54:	2b02      	cmp	r3, #2
10004d56:	d823      	bhi.n	10004da0 <HAL_RCC_GetAXISSFreq+0x64>
10004d58:	2b00      	cmp	r3, #0
10004d5a:	d009      	beq.n	10004d70 <HAL_RCC_GetAXISSFreq+0x34>
10004d5c:	2b01      	cmp	r3, #1
10004d5e:	d01c      	beq.n	10004d9a <HAL_RCC_GetAXISSFreq+0x5e>
10004d60:	e01e      	b.n	10004da0 <HAL_RCC_GetAXISSFreq+0x64>
  {
    case RCC_AXISSOURCE_PLL2:
      HAL_RCC_GetPLL2ClockFreq(&pll2_clocks);
10004d62:	463b      	mov	r3, r7
10004d64:	4618      	mov	r0, r3
10004d66:	f7ff fc0b 	bl	10004580 <HAL_RCC_GetPLL2ClockFreq>
      axissfreq = pll2_clocks.PLL2_P_Frequency;
10004d6a:	683b      	ldr	r3, [r7, #0]
10004d6c:	60fb      	str	r3, [r7, #12]
      break;
10004d6e:	e01a      	b.n	10004da6 <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10004d70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d74:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004d78:	f003 0304 	and.w	r3, r3, #4
10004d7c:	2b04      	cmp	r3, #4
10004d7e:	d109      	bne.n	10004d94 <HAL_RCC_GetAXISSFreq+0x58>
      {
        axissfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10004d80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d84:	699b      	ldr	r3, [r3, #24]
10004d86:	f003 0303 	and.w	r3, r3, #3
10004d8a:	4a09      	ldr	r2, [pc, #36]	; (10004db0 <HAL_RCC_GetAXISSFreq+0x74>)
10004d8c:	fa22 f303 	lsr.w	r3, r2, r3
10004d90:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        axissfreq = HSI_VALUE;
      }
      break;
10004d92:	e008      	b.n	10004da6 <HAL_RCC_GetAXISSFreq+0x6a>
        axissfreq = HSI_VALUE;
10004d94:	4b06      	ldr	r3, [pc, #24]	; (10004db0 <HAL_RCC_GetAXISSFreq+0x74>)
10004d96:	60fb      	str	r3, [r7, #12]
      break;
10004d98:	e005      	b.n	10004da6 <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_HSE:
      axissfreq = HSE_VALUE;
10004d9a:	4b06      	ldr	r3, [pc, #24]	; (10004db4 <HAL_RCC_GetAXISSFreq+0x78>)
10004d9c:	60fb      	str	r3, [r7, #12]
      break;
10004d9e:	e002      	b.n	10004da6 <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_OFF:
    default:
      axissfreq = 0; /* ck_axiss is gated */
10004da0:	2300      	movs	r3, #0
10004da2:	60fb      	str	r3, [r7, #12]
      break;
10004da4:	bf00      	nop
  }

  return axissfreq;
10004da6:	68fb      	ldr	r3, [r7, #12]
}
10004da8:	4618      	mov	r0, r3
10004daa:	3710      	adds	r7, #16
10004dac:	46bd      	mov	sp, r7
10004dae:	bd80      	pop	{r7, pc}
10004db0:	03d09000 	.word	0x03d09000
10004db4:	016e3600 	.word	0x016e3600

10004db8 <HAL_RCC_GetMCUSSFreq>:

uint32_t HAL_RCC_GetMCUSSFreq()
{
10004db8:	b580      	push	{r7, lr}
10004dba:	b084      	sub	sp, #16
10004dbc:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
10004dbe:	2300      	movs	r3, #0
10004dc0:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
10004dc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10004dc8:	f003 0303 	and.w	r3, r3, #3
10004dcc:	2b03      	cmp	r3, #3
10004dce:	d822      	bhi.n	10004e16 <HAL_RCC_GetMCUSSFreq+0x5e>
10004dd0:	a201      	add	r2, pc, #4	; (adr r2, 10004dd8 <HAL_RCC_GetMCUSSFreq+0x20>)
10004dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004dd6:	bf00      	nop
10004dd8:	10004df7 	.word	0x10004df7
10004ddc:	10004e0b 	.word	0x10004e0b
10004de0:	10004e11 	.word	0x10004e11
10004de4:	10004de9 	.word	0x10004de9
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10004de8:	463b      	mov	r3, r7
10004dea:	4618      	mov	r0, r3
10004dec:	f7ff fcb4 	bl	10004758 <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
10004df0:	683b      	ldr	r3, [r7, #0]
10004df2:	60fb      	str	r3, [r7, #12]
      break;
10004df4:	e00f      	b.n	10004e16 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10004df6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004dfa:	699b      	ldr	r3, [r3, #24]
10004dfc:	f003 0303 	and.w	r3, r3, #3
10004e00:	4a07      	ldr	r2, [pc, #28]	; (10004e20 <HAL_RCC_GetMCUSSFreq+0x68>)
10004e02:	fa22 f303 	lsr.w	r3, r2, r3
10004e06:	60fb      	str	r3, [r7, #12]

      break;
10004e08:	e005      	b.n	10004e16 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
10004e0a:	4b06      	ldr	r3, [pc, #24]	; (10004e24 <HAL_RCC_GetMCUSSFreq+0x6c>)
10004e0c:	60fb      	str	r3, [r7, #12]
      break;
10004e0e:	e002      	b.n	10004e16 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
10004e10:	4b05      	ldr	r3, [pc, #20]	; (10004e28 <HAL_RCC_GetMCUSSFreq+0x70>)
10004e12:	60fb      	str	r3, [r7, #12]
      break;
10004e14:	bf00      	nop
  }

  return mcussfreq;
10004e16:	68fb      	ldr	r3, [r7, #12]
}
10004e18:	4618      	mov	r0, r3
10004e1a:	3710      	adds	r7, #16
10004e1c:	46bd      	mov	sp, r7
10004e1e:	bd80      	pop	{r7, pc}
10004e20:	03d09000 	.word	0x03d09000
10004e24:	016e3600 	.word	0x016e3600
10004e28:	003d0900 	.word	0x003d0900

10004e2c <HAL_RCC_WAKEUP_IRQHandler>:
  * @brief This function handles the RCC Wake up interrupt (rcc_mcu_wkup_irq/rcc_mpu_wkup_irq)
  * @note This API should be called under the RCC_WAKEUP_Handler().
  * @retval None
  */
void HAL_RCC_WAKEUP_IRQHandler(void)
{
10004e2c:	b580      	push	{r7, lr}
10004e2e:	af00      	add	r7, sp, #0
  /* Check RCC WKUP flag is set */
  if (__HAL_RCC_GET_IT(RCC_IT_WKUP) != RESET)
10004e30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e34:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
10004e38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
10004e3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
10004e40:	d107      	bne.n	10004e52 <HAL_RCC_WAKEUP_IRQHandler+0x26>
  {
    /* Clear the RCC WKUP flag bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_WKUP);
10004e42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
10004e4a:	f8c3 2c18 	str.w	r2, [r3, #3096]	; 0xc18

    /* RCC WKUP interrupt user callback */
    HAL_RCC_WAKEUP_Callback();
10004e4e:	f000 f802 	bl	10004e56 <HAL_RCC_WAKEUP_Callback>
  }
}
10004e52:	bf00      	nop
10004e54:	bd80      	pop	{r7, pc}

10004e56 <HAL_RCC_WAKEUP_Callback>:
/**
  * @brief  RCC WAKEUP interrupt callback
  * @retval None
  */
__weak void HAL_RCC_WAKEUP_Callback(void)
{
10004e56:	b480      	push	{r7}
10004e58:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_WAKEUP_Callback could be implemented in the user file
  */
}
10004e5a:	bf00      	nop
10004e5c:	46bd      	mov	sp, r7
10004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
10004e62:	4770      	bx	lr

10004e64 <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
10004e64:	b580      	push	{r7, lr}
10004e66:	b084      	sub	sp, #16
10004e68:	af00      	add	r7, sp, #0
10004e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
10004e6c:	687b      	ldr	r3, [r7, #4]
10004e6e:	681b      	ldr	r3, [r3, #0]
10004e70:	2b00      	cmp	r3, #0
10004e72:	f000 8171 	beq.w	10005158 <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
10004e76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004e7c:	f003 0307 	and.w	r3, r3, #7
10004e80:	2b02      	cmp	r3, #2
10004e82:	d108      	bne.n	10004e96 <RCCEx_PLL2_Config+0x32>
10004e84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004e8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004e8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004e92:	f000 815f 	beq.w	10005154 <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
10004e96:	687b      	ldr	r3, [r7, #4]
10004e98:	681b      	ldr	r3, [r3, #0]
10004e9a:	2b02      	cmp	r3, #2
10004e9c:	f040 8130 	bne.w	10005100 <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10004ea0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004ea6:	f003 0303 	and.w	r3, r3, #3
10004eaa:	2b00      	cmp	r3, #0
10004eac:	d008      	beq.n	10004ec0 <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
10004eae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004eb4:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10004eb8:	2b01      	cmp	r3, #1
10004eba:	d001      	beq.n	10004ec0 <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
10004ebc:	2301      	movs	r3, #1
10004ebe:	e14c      	b.n	1000515a <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10004ec0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10004ec8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10004ed0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
10004ed4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10004edc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004ee0:	f023 0301 	bic.w	r3, r3, #1
10004ee4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10004ee8:	f7fb ff72 	bl	10000dd0 <HAL_GetTick>
10004eec:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10004eee:	e008      	b.n	10004f02 <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10004ef0:	f7fb ff6e 	bl	10000dd0 <HAL_GetTick>
10004ef4:	4602      	mov	r2, r0
10004ef6:	68fb      	ldr	r3, [r7, #12]
10004ef8:	1ad3      	subs	r3, r2, r3
10004efa:	2b64      	cmp	r3, #100	; 0x64
10004efc:	d901      	bls.n	10004f02 <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
10004efe:	2303      	movs	r3, #3
10004f00:	e12b      	b.n	1000515a <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10004f02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10004f0a:	f003 0302 	and.w	r3, r3, #2
10004f0e:	2b02      	cmp	r3, #2
10004f10:	d0ee      	beq.n	10004ef0 <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
10004f12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f16:	6a1b      	ldr	r3, [r3, #32]
10004f18:	f003 0303 	and.w	r3, r3, #3
10004f1c:	2b02      	cmp	r3, #2
10004f1e:	d107      	bne.n	10004f30 <RCCEx_PLL2_Config+0xcc>
10004f20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f24:	6a1b      	ldr	r3, [r3, #32]
10004f26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004f2e:	d00e      	beq.n	10004f4e <RCCEx_PLL2_Config+0xea>
10004f30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f34:	6a1b      	ldr	r3, [r3, #32]
10004f36:	f003 0303 	and.w	r3, r3, #3
10004f3a:	2b03      	cmp	r3, #3
10004f3c:	d112      	bne.n	10004f64 <RCCEx_PLL2_Config+0x100>
10004f3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f42:	6a1b      	ldr	r3, [r3, #32]
10004f44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004f48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004f4c:	d10a      	bne.n	10004f64 <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10004f4e:	687b      	ldr	r3, [r7, #4]
10004f50:	685a      	ldr	r2, [r3, #4]
10004f52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004f58:	f003 0303 	and.w	r3, r3, #3
10004f5c:	429a      	cmp	r2, r3
10004f5e:	d00c      	beq.n	10004f7a <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
10004f60:	2301      	movs	r3, #1
10004f62:	e0fa      	b.n	1000515a <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
10004f64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004f6a:	f023 0203 	bic.w	r2, r3, #3
10004f6e:	687b      	ldr	r3, [r7, #4]
10004f70:	685b      	ldr	r3, [r3, #4]
10004f72:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004f76:	4313      	orrs	r3, r2
10004f78:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
10004f7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f7e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
10004f82:	4b78      	ldr	r3, [pc, #480]	; (10005164 <RCCEx_PLL2_Config+0x300>)
10004f84:	4013      	ands	r3, r2
10004f86:	687a      	ldr	r2, [r7, #4]
10004f88:	68d2      	ldr	r2, [r2, #12]
10004f8a:	1e51      	subs	r1, r2, #1
10004f8c:	687a      	ldr	r2, [r7, #4]
10004f8e:	6892      	ldr	r2, [r2, #8]
10004f90:	3a01      	subs	r2, #1
10004f92:	0412      	lsls	r2, r2, #16
10004f94:	430a      	orrs	r2, r1
10004f96:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004f9a:	4313      	orrs	r3, r2
10004f9c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
10004fa0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004fa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10004fa8:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10004fac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10004fb0:	687a      	ldr	r2, [r7, #4]
10004fb2:	6912      	ldr	r2, [r2, #16]
10004fb4:	1e51      	subs	r1, r2, #1
10004fb6:	687a      	ldr	r2, [r7, #4]
10004fb8:	6952      	ldr	r2, [r2, #20]
10004fba:	3a01      	subs	r2, #1
10004fbc:	0212      	lsls	r2, r2, #8
10004fbe:	4311      	orrs	r1, r2
10004fc0:	687a      	ldr	r2, [r7, #4]
10004fc2:	6992      	ldr	r2, [r2, #24]
10004fc4:	3a01      	subs	r2, #1
10004fc6:	0412      	lsls	r2, r2, #16
10004fc8:	430a      	orrs	r2, r1
10004fca:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004fce:	4313      	orrs	r3, r2
10004fd0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
10004fd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004fd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10004fdc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10004fe4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
10004fe8:	687b      	ldr	r3, [r7, #4]
10004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004fec:	2b02      	cmp	r3, #2
10004fee:	d003      	beq.n	10004ff8 <RCCEx_PLL2_Config+0x194>
10004ff0:	687b      	ldr	r3, [r7, #4]
10004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004ff4:	2b00      	cmp	r3, #0
10004ff6:	d10c      	bne.n	10005012 <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
10004ff8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004ffc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10005000:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005004:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10005008:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
1000500c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
10005010:	e00f      	b.n	10005032 <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
10005012:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005016:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
1000501a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000501e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10005022:	687a      	ldr	r2, [r7, #4]
10005024:	6a12      	ldr	r2, [r2, #32]
10005026:	00d2      	lsls	r2, r2, #3
10005028:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000502c:	4313      	orrs	r3, r2
1000502e:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
10005032:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005036:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
1000503a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000503e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10005042:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10005046:	687b      	ldr	r3, [r7, #4]
10005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000504a:	2b02      	cmp	r3, #2
1000504c:	d124      	bne.n	10005098 <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
1000504e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005052:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
10005056:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
1000505a:	687b      	ldr	r3, [r7, #4]
1000505c:	6a99      	ldr	r1, [r3, #40]	; 0x28
1000505e:	687b      	ldr	r3, [r7, #4]
10005060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10005062:	4319      	orrs	r1, r3
10005064:	687b      	ldr	r3, [r7, #4]
10005066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10005068:	4319      	orrs	r1, r3
1000506a:	687b      	ldr	r3, [r7, #4]
1000506c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000506e:	4319      	orrs	r1, r3
10005070:	687b      	ldr	r3, [r7, #4]
10005072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10005074:	041b      	lsls	r3, r3, #16
10005076:	430b      	orrs	r3, r1
10005078:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000507c:	4313      	orrs	r3, r2
1000507e:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
10005082:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000508a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000508e:	f043 0304 	orr.w	r3, r3, #4
10005092:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
10005096:	e009      	b.n	100050ac <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
10005098:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000509c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100050a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100050a4:	f023 0304 	bic.w	r3, r3, #4
100050a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
100050ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100050b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100050b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100050b8:	f043 0301 	orr.w	r3, r3, #1
100050bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100050c0:	f7fb fe86 	bl	10000dd0 <HAL_GetTick>
100050c4:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
100050c6:	e008      	b.n	100050da <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100050c8:	f7fb fe82 	bl	10000dd0 <HAL_GetTick>
100050cc:	4602      	mov	r2, r0
100050ce:	68fb      	ldr	r3, [r7, #12]
100050d0:	1ad3      	subs	r3, r2, r3
100050d2:	2b64      	cmp	r3, #100	; 0x64
100050d4:	d901      	bls.n	100050da <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
100050d6:	2303      	movs	r3, #3
100050d8:	e03f      	b.n	1000515a <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
100050da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100050de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100050e2:	f003 0302 	and.w	r3, r3, #2
100050e6:	2b02      	cmp	r3, #2
100050e8:	d1ee      	bne.n	100050c8 <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
100050ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100050ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100050f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100050f6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
100050fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
100050fe:	e02b      	b.n	10005158 <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10005100:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005104:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005108:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000510c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10005110:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
10005114:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000511c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005120:	f023 0301 	bic.w	r3, r3, #1
10005124:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10005128:	f7fb fe52 	bl	10000dd0 <HAL_GetTick>
1000512c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000512e:	e008      	b.n	10005142 <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005130:	f7fb fe4e 	bl	10000dd0 <HAL_GetTick>
10005134:	4602      	mov	r2, r0
10005136:	68fb      	ldr	r3, [r7, #12]
10005138:	1ad3      	subs	r3, r2, r3
1000513a:	2b64      	cmp	r3, #100	; 0x64
1000513c:	d901      	bls.n	10005142 <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
1000513e:	2303      	movs	r3, #3
10005140:	e00b      	b.n	1000515a <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10005142:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000514a:	f003 0302 	and.w	r3, r3, #2
1000514e:	2b02      	cmp	r3, #2
10005150:	d0ee      	beq.n	10005130 <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
10005152:	e001      	b.n	10005158 <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10005154:	2301      	movs	r3, #1
10005156:	e000      	b.n	1000515a <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
10005158:	2300      	movs	r3, #0

}
1000515a:	4618      	mov	r0, r3
1000515c:	3710      	adds	r7, #16
1000515e:	46bd      	mov	sp, r7
10005160:	bd80      	pop	{r7, pc}
10005162:	bf00      	nop
10005164:	ffc0fe00 	.word	0xffc0fe00

10005168 <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
10005168:	b580      	push	{r7, lr}
1000516a:	b084      	sub	sp, #16
1000516c:	af00      	add	r7, sp, #0
1000516e:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
10005170:	687b      	ldr	r3, [r7, #4]
10005172:	681b      	ldr	r3, [r3, #0]
10005174:	2b00      	cmp	r3, #0
10005176:	f000 815a 	beq.w	1000542e <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
1000517a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000517e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10005180:	f003 0303 	and.w	r3, r3, #3
10005184:	2b03      	cmp	r3, #3
10005186:	d108      	bne.n	1000519a <RCCEx_PLL3_Config+0x32>
10005188:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000518c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000518e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10005192:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10005196:	f000 8148 	beq.w	1000542a <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
1000519a:	687b      	ldr	r3, [r7, #4]
1000519c:	681b      	ldr	r3, [r3, #0]
1000519e:	2b02      	cmp	r3, #2
100051a0:	f040 8119 	bne.w	100053d6 <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100051a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100051a8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100051ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100051b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100051b4:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
100051b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100051bc:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100051c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100051c4:	f023 0301 	bic.w	r3, r3, #1
100051c8:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100051cc:	f7fb fe00 	bl	10000dd0 <HAL_GetTick>
100051d0:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
100051d2:	e008      	b.n	100051e6 <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100051d4:	f7fb fdfc 	bl	10000dd0 <HAL_GetTick>
100051d8:	4602      	mov	r2, r0
100051da:	68fb      	ldr	r3, [r7, #12]
100051dc:	1ad3      	subs	r3, r2, r3
100051de:	2b64      	cmp	r3, #100	; 0x64
100051e0:	d901      	bls.n	100051e6 <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
100051e2:	2303      	movs	r3, #3
100051e4:	e124      	b.n	10005430 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
100051e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100051ea:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100051ee:	f003 0302 	and.w	r3, r3, #2
100051f2:	2b02      	cmp	r3, #2
100051f4:	d0ee      	beq.n	100051d4 <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
100051f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100051fa:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
100051fe:	f023 0203 	bic.w	r2, r3, #3
10005202:	687b      	ldr	r3, [r7, #4]
10005204:	685b      	ldr	r3, [r3, #4]
10005206:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000520a:	4313      	orrs	r3, r2
1000520c:	f8c1 3820 	str.w	r3, [r1, #2080]	; 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10005210:	e008      	b.n	10005224 <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005212:	f7fb fddd 	bl	10000dd0 <HAL_GetTick>
10005216:	4602      	mov	r2, r0
10005218:	68fb      	ldr	r3, [r7, #12]
1000521a:	1ad3      	subs	r3, r2, r3
1000521c:	2b64      	cmp	r3, #100	; 0x64
1000521e:	d901      	bls.n	10005224 <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
10005220:	2303      	movs	r3, #3
10005222:	e105      	b.n	10005430 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10005224:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005228:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
1000522c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10005230:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10005234:	d1ed      	bne.n	10005212 <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
10005236:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000523a:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
1000523e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
10005242:	687b      	ldr	r3, [r7, #4]
10005244:	69db      	ldr	r3, [r3, #28]
10005246:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000524a:	4313      	orrs	r3, r2
1000524c:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
10005250:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005254:	f8d3 2884 	ldr.w	r2, [r3, #2180]	; 0x884
10005258:	4b77      	ldr	r3, [pc, #476]	; (10005438 <RCCEx_PLL3_Config+0x2d0>)
1000525a:	4013      	ands	r3, r2
1000525c:	687a      	ldr	r2, [r7, #4]
1000525e:	68d2      	ldr	r2, [r2, #12]
10005260:	1e51      	subs	r1, r2, #1
10005262:	687a      	ldr	r2, [r7, #4]
10005264:	6892      	ldr	r2, [r2, #8]
10005266:	3a01      	subs	r2, #1
10005268:	0412      	lsls	r2, r2, #16
1000526a:	430a      	orrs	r2, r1
1000526c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005270:	4313      	orrs	r3, r2
10005272:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884
10005276:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000527a:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
1000527e:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10005282:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10005286:	687a      	ldr	r2, [r7, #4]
10005288:	6912      	ldr	r2, [r2, #16]
1000528a:	1e51      	subs	r1, r2, #1
1000528c:	687a      	ldr	r2, [r7, #4]
1000528e:	6952      	ldr	r2, [r2, #20]
10005290:	3a01      	subs	r2, #1
10005292:	0212      	lsls	r2, r2, #8
10005294:	4311      	orrs	r1, r2
10005296:	687a      	ldr	r2, [r7, #4]
10005298:	6992      	ldr	r2, [r2, #24]
1000529a:	3a01      	subs	r2, #1
1000529c:	0412      	lsls	r2, r2, #16
1000529e:	430a      	orrs	r2, r1
100052a0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100052a4:	4313      	orrs	r3, r2
100052a6:	f8c1 3888 	str.w	r3, [r1, #2184]	; 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
100052aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100052ae:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100052b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100052b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
100052ba:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
100052be:	687b      	ldr	r3, [r7, #4]
100052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100052c2:	2b02      	cmp	r3, #2
100052c4:	d003      	beq.n	100052ce <RCCEx_PLL3_Config+0x166>
100052c6:	687b      	ldr	r3, [r7, #4]
100052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100052ca:	2b00      	cmp	r3, #0
100052cc:	d10c      	bne.n	100052e8 <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
100052ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100052d2:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100052d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100052da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100052de:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100052e2:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
100052e6:	e00f      	b.n	10005308 <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
100052e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100052ec:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100052f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100052f4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100052f8:	687a      	ldr	r2, [r7, #4]
100052fa:	6a12      	ldr	r2, [r2, #32]
100052fc:	00d2      	lsls	r2, r2, #3
100052fe:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005302:	4313      	orrs	r3, r2
10005304:	f8c1 388c 	str.w	r3, [r1, #2188]	; 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
10005308:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000530c:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10005310:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10005318:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
1000531c:	687b      	ldr	r3, [r7, #4]
1000531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005320:	2b02      	cmp	r3, #2
10005322:	d124      	bne.n	1000536e <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
10005324:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005328:	f8d3 3890 	ldr.w	r3, [r3, #2192]	; 0x890
1000532c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10005330:	687b      	ldr	r3, [r7, #4]
10005332:	6a99      	ldr	r1, [r3, #40]	; 0x28
10005334:	687b      	ldr	r3, [r7, #4]
10005336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10005338:	4319      	orrs	r1, r3
1000533a:	687b      	ldr	r3, [r7, #4]
1000533c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000533e:	4319      	orrs	r1, r3
10005340:	687b      	ldr	r3, [r7, #4]
10005342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10005344:	4319      	orrs	r1, r3
10005346:	687b      	ldr	r3, [r7, #4]
10005348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000534a:	041b      	lsls	r3, r3, #16
1000534c:	430b      	orrs	r3, r1
1000534e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005352:	4313      	orrs	r3, r2
10005354:	f8c1 3890 	str.w	r3, [r1, #2192]	; 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
10005358:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000535c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005360:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005364:	f043 0304 	orr.w	r3, r3, #4
10005368:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
1000536c:	e009      	b.n	10005382 <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
1000536e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005372:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005376:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000537a:	f023 0304 	bic.w	r3, r3, #4
1000537e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
10005382:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005386:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000538a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000538e:	f043 0301 	orr.w	r3, r3, #1
10005392:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10005396:	f7fb fd1b 	bl	10000dd0 <HAL_GetTick>
1000539a:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
1000539c:	e008      	b.n	100053b0 <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000539e:	f7fb fd17 	bl	10000dd0 <HAL_GetTick>
100053a2:	4602      	mov	r2, r0
100053a4:	68fb      	ldr	r3, [r7, #12]
100053a6:	1ad3      	subs	r3, r2, r3
100053a8:	2b64      	cmp	r3, #100	; 0x64
100053aa:	d901      	bls.n	100053b0 <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
100053ac:	2303      	movs	r3, #3
100053ae:	e03f      	b.n	10005430 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
100053b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100053b4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100053b8:	f003 0302 	and.w	r3, r3, #2
100053bc:	2b02      	cmp	r3, #2
100053be:	d1ee      	bne.n	1000539e <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100053c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100053c4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100053c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100053cc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
100053d0:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
100053d4:	e02b      	b.n	1000542e <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100053d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100053da:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100053de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100053e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100053e6:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
100053ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100053ee:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100053f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100053f6:	f023 0301 	bic.w	r3, r3, #1
100053fa:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100053fe:	f7fb fce7 	bl	10000dd0 <HAL_GetTick>
10005402:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10005404:	e008      	b.n	10005418 <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005406:	f7fb fce3 	bl	10000dd0 <HAL_GetTick>
1000540a:	4602      	mov	r2, r0
1000540c:	68fb      	ldr	r3, [r7, #12]
1000540e:	1ad3      	subs	r3, r2, r3
10005410:	2b64      	cmp	r3, #100	; 0x64
10005412:	d901      	bls.n	10005418 <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
10005414:	2303      	movs	r3, #3
10005416:	e00b      	b.n	10005430 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10005418:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000541c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005420:	f003 0302 	and.w	r3, r3, #2
10005424:	2b02      	cmp	r3, #2
10005426:	d0ee      	beq.n	10005406 <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
10005428:	e001      	b.n	1000542e <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
1000542a:	2301      	movs	r3, #1
1000542c:	e000      	b.n	10005430 <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
1000542e:	2300      	movs	r3, #0
}
10005430:	4618      	mov	r0, r3
10005432:	3710      	adds	r7, #16
10005434:	46bd      	mov	sp, r7
10005436:	bd80      	pop	{r7, pc}
10005438:	ffc0fe00 	.word	0xffc0fe00

1000543c <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
1000543c:	b580      	push	{r7, lr}
1000543e:	b084      	sub	sp, #16
10005440:	af00      	add	r7, sp, #0
10005442:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
10005444:	687b      	ldr	r3, [r7, #4]
10005446:	681b      	ldr	r3, [r3, #0]
10005448:	2b00      	cmp	r3, #0
1000544a:	f000 8147 	beq.w	100056dc <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
1000544e:	687b      	ldr	r3, [r7, #4]
10005450:	681b      	ldr	r3, [r3, #0]
10005452:	2b02      	cmp	r3, #2
10005454:	f040 8119 	bne.w	1000568a <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10005458:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000545c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005460:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10005468:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
1000546c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005470:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005474:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005478:	f023 0301 	bic.w	r3, r3, #1
1000547c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10005480:	f7fb fca6 	bl	10000dd0 <HAL_GetTick>
10005484:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10005486:	e008      	b.n	1000549a <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005488:	f7fb fca2 	bl	10000dd0 <HAL_GetTick>
1000548c:	4602      	mov	r2, r0
1000548e:	68fb      	ldr	r3, [r7, #12]
10005490:	1ad3      	subs	r3, r2, r3
10005492:	2b64      	cmp	r3, #100	; 0x64
10005494:	d901      	bls.n	1000549a <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
10005496:	2303      	movs	r3, #3
10005498:	e121      	b.n	100056de <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
1000549a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000549e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100054a2:	f003 0302 	and.w	r3, r3, #2
100054a6:	2b02      	cmp	r3, #2
100054a8:	d0ee      	beq.n	10005488 <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
100054aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100054ae:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
100054b2:	f023 0203 	bic.w	r2, r3, #3
100054b6:	687b      	ldr	r3, [r7, #4]
100054b8:	685b      	ldr	r3, [r3, #4]
100054ba:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100054be:	4313      	orrs	r3, r2
100054c0:	f8c1 3824 	str.w	r3, [r1, #2084]	; 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
100054c4:	e008      	b.n	100054d8 <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100054c6:	f7fb fc83 	bl	10000dd0 <HAL_GetTick>
100054ca:	4602      	mov	r2, r0
100054cc:	68fb      	ldr	r3, [r7, #12]
100054ce:	1ad3      	subs	r3, r2, r3
100054d0:	2b64      	cmp	r3, #100	; 0x64
100054d2:	d901      	bls.n	100054d8 <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
100054d4:	2303      	movs	r3, #3
100054d6:	e102      	b.n	100056de <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
100054d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100054dc:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
100054e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100054e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100054e8:	d1ed      	bne.n	100054c6 <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
100054ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100054ee:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
100054f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
100054f6:	687b      	ldr	r3, [r7, #4]
100054f8:	69db      	ldr	r3, [r3, #28]
100054fa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100054fe:	4313      	orrs	r3, r2
10005500:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
10005504:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005508:	f8d3 2898 	ldr.w	r2, [r3, #2200]	; 0x898
1000550c:	4b76      	ldr	r3, [pc, #472]	; (100056e8 <RCCEx_PLL4_Config+0x2ac>)
1000550e:	4013      	ands	r3, r2
10005510:	687a      	ldr	r2, [r7, #4]
10005512:	68d2      	ldr	r2, [r2, #12]
10005514:	1e51      	subs	r1, r2, #1
10005516:	687a      	ldr	r2, [r7, #4]
10005518:	6892      	ldr	r2, [r2, #8]
1000551a:	3a01      	subs	r2, #1
1000551c:	0412      	lsls	r2, r2, #16
1000551e:	430a      	orrs	r2, r1
10005520:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005524:	4313      	orrs	r3, r2
10005526:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898
1000552a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000552e:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
10005532:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10005536:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
1000553a:	687a      	ldr	r2, [r7, #4]
1000553c:	6912      	ldr	r2, [r2, #16]
1000553e:	1e51      	subs	r1, r2, #1
10005540:	687a      	ldr	r2, [r7, #4]
10005542:	6952      	ldr	r2, [r2, #20]
10005544:	3a01      	subs	r2, #1
10005546:	0212      	lsls	r2, r2, #8
10005548:	4311      	orrs	r1, r2
1000554a:	687a      	ldr	r2, [r7, #4]
1000554c:	6992      	ldr	r2, [r2, #24]
1000554e:	3a01      	subs	r2, #1
10005550:	0412      	lsls	r2, r2, #16
10005552:	430a      	orrs	r2, r1
10005554:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005558:	4313      	orrs	r3, r2
1000555a:	f8c1 389c 	str.w	r3, [r1, #2204]	; 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
1000555e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005562:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10005566:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000556a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1000556e:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
10005572:	687b      	ldr	r3, [r7, #4]
10005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005576:	2b02      	cmp	r3, #2
10005578:	d003      	beq.n	10005582 <RCCEx_PLL4_Config+0x146>
1000557a:	687b      	ldr	r3, [r7, #4]
1000557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000557e:	2b00      	cmp	r3, #0
10005580:	d10c      	bne.n	1000559c <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
10005582:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005586:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
1000558a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000558e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10005592:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10005596:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
1000559a:	e00f      	b.n	100055bc <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
1000559c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100055a0:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100055a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100055a8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100055ac:	687a      	ldr	r2, [r7, #4]
100055ae:	6a12      	ldr	r2, [r2, #32]
100055b0:	00d2      	lsls	r2, r2, #3
100055b2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100055b6:	4313      	orrs	r3, r2
100055b8:	f8c1 38a0 	str.w	r3, [r1, #2208]	; 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
100055bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100055c0:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100055c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100055c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
100055cc:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100055d0:	687b      	ldr	r3, [r7, #4]
100055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100055d4:	2b02      	cmp	r3, #2
100055d6:	d124      	bne.n	10005622 <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
100055d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100055dc:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	; 0x8a4
100055e0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
100055e4:	687b      	ldr	r3, [r7, #4]
100055e6:	6a99      	ldr	r1, [r3, #40]	; 0x28
100055e8:	687b      	ldr	r3, [r7, #4]
100055ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100055ec:	4319      	orrs	r1, r3
100055ee:	687b      	ldr	r3, [r7, #4]
100055f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100055f2:	4319      	orrs	r1, r3
100055f4:	687b      	ldr	r3, [r7, #4]
100055f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100055f8:	4319      	orrs	r1, r3
100055fa:	687b      	ldr	r3, [r7, #4]
100055fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100055fe:	041b      	lsls	r3, r3, #16
10005600:	430b      	orrs	r3, r1
10005602:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005606:	4313      	orrs	r3, r2
10005608:	f8c1 38a4 	str.w	r3, [r1, #2212]	; 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
1000560c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005610:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005614:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005618:	f043 0304 	orr.w	r3, r3, #4
1000561c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10005620:	e009      	b.n	10005636 <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
10005622:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005626:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000562a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000562e:	f023 0304 	bic.w	r3, r3, #4
10005632:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
10005636:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000563a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000563e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005642:	f043 0301 	orr.w	r3, r3, #1
10005646:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1000564a:	f7fb fbc1 	bl	10000dd0 <HAL_GetTick>
1000564e:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10005650:	e008      	b.n	10005664 <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005652:	f7fb fbbd 	bl	10000dd0 <HAL_GetTick>
10005656:	4602      	mov	r2, r0
10005658:	68fb      	ldr	r3, [r7, #12]
1000565a:	1ad3      	subs	r3, r2, r3
1000565c:	2b64      	cmp	r3, #100	; 0x64
1000565e:	d901      	bls.n	10005664 <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
10005660:	2303      	movs	r3, #3
10005662:	e03c      	b.n	100056de <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10005664:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005668:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000566c:	f003 0302 	and.w	r3, r3, #2
10005670:	2b02      	cmp	r3, #2
10005672:	d1ee      	bne.n	10005652 <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10005674:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005678:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000567c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005680:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10005684:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10005688:	e028      	b.n	100056dc <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
1000568a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000568e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005692:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
1000569a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
1000569e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100056a2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100056a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100056aa:	f023 0301 	bic.w	r3, r3, #1
100056ae:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100056b2:	f7fb fb8d 	bl	10000dd0 <HAL_GetTick>
100056b6:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100056b8:	e008      	b.n	100056cc <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100056ba:	f7fb fb89 	bl	10000dd0 <HAL_GetTick>
100056be:	4602      	mov	r2, r0
100056c0:	68fb      	ldr	r3, [r7, #12]
100056c2:	1ad3      	subs	r3, r2, r3
100056c4:	2b64      	cmp	r3, #100	; 0x64
100056c6:	d901      	bls.n	100056cc <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
100056c8:	2303      	movs	r3, #3
100056ca:	e008      	b.n	100056de <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100056cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100056d0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100056d4:	f003 0302 	and.w	r3, r3, #2
100056d8:	2b02      	cmp	r3, #2
100056da:	d0ee      	beq.n	100056ba <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
100056dc:	2300      	movs	r3, #0
}
100056de:	4618      	mov	r0, r3
100056e0:	3710      	adds	r7, #16
100056e2:	46bd      	mov	sp, r7
100056e4:	bd80      	pop	{r7, pc}
100056e6:	bf00      	nop
100056e8:	ffc0fe00 	.word	0xffc0fe00

100056ec <HAL_RCCEx_PeriphCLKConfig>:
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef
                                            *PeriphClkInit)
{
100056ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
100056f0:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
100056f4:	af00      	add	r7, sp, #0
100056f6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100056fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100056fe:	6018      	str	r0, [r3, #0]
  uint32_t tmpreg = 0, RESERVED_BDCR_MASK = 0;
10005700:	2300      	movs	r3, #0
10005702:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
10005706:	2300      	movs	r3, #0
10005708:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
1000570c:	2300      	movs	r3, #0
1000570e:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
10005712:	2300      	movs	r3, #0
10005714:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- CKPER configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) ==
10005718:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000571c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005720:	681b      	ldr	r3, [r3, #0]
10005722:	e9d3 2300 	ldrd	r2, r3, [r3]
10005726:	f402 0400 	and.w	r4, r2, #8388608	; 0x800000
1000572a:	2500      	movs	r5, #0
1000572c:	ea54 0305 	orrs.w	r3, r4, r5
10005730:	d011      	beq.n	10005756 <HAL_RCCEx_PeriphCLKConfig+0x6a>
      RCC_PERIPHCLK_CKPER)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    __HAL_RCC_CKPER_CONFIG(PeriphClkInit->CkperClockSelection);
10005732:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005736:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
1000573a:	f023 0103 	bic.w	r1, r3, #3
1000573e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005742:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005746:	681b      	ldr	r3, [r3, #0]
10005748:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
1000574c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005750:	430b      	orrs	r3, r1
10005752:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
  }

  /*------------------------------ I2C12 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C12) ==
10005756:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000575a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000575e:	681b      	ldr	r3, [r3, #0]
10005760:	e9d3 2300 	ldrd	r2, r3, [r3]
10005764:	f002 0810 	and.w	r8, r2, #16
10005768:	f04f 0900 	mov.w	r9, #0
1000576c:	ea58 0309 	orrs.w	r3, r8, r9
10005770:	d038      	beq.n	100057e4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      RCC_PERIPHCLK_I2C12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C12CLKSOURCE(PeriphClkInit->I2c12ClockSelection));

    if ((PeriphClkInit->I2c12ClockSelection) == RCC_I2C12CLKSOURCE_PLL4)
10005772:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005776:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000577a:	681b      	ldr	r3, [r3, #0]
1000577c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
10005780:	2b01      	cmp	r3, #1
10005782:	d11d      	bne.n	100057c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005784:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005788:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000578c:	681b      	ldr	r3, [r3, #0]
1000578e:	3380      	adds	r3, #128	; 0x80
10005790:	4618      	mov	r0, r3
10005792:	f7ff fe53 	bl	1000543c <RCCEx_PLL4_Config>
10005796:	4603      	mov	r3, r0
10005798:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
1000579c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100057a0:	2b00      	cmp	r3, #0
100057a2:	d003      	beq.n	100057ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return status;
100057a4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100057a8:	f001 be2a 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100057ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100057b0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100057b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100057b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100057bc:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_I2C12_CONFIG(PeriphClkInit->I2c12ClockSelection);
100057c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100057c4:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	; 0x8c0
100057c8:	f023 0107 	bic.w	r1, r3, #7
100057cc:	f507 7312 	add.w	r3, r7, #584	; 0x248
100057d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100057d4:	681b      	ldr	r3, [r3, #0]
100057d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
100057da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100057de:	430b      	orrs	r3, r1
100057e0:	f8c2 38c0 	str.w	r3, [r2, #2240]	; 0x8c0
  }

  /*------------------------------ I2C35 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C35) ==
100057e4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100057e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100057ec:	681b      	ldr	r3, [r3, #0]
100057ee:	e9d3 2300 	ldrd	r2, r3, [r3]
100057f2:	f002 0a20 	and.w	sl, r2, #32
100057f6:	f04f 0b00 	mov.w	fp, #0
100057fa:	ea5a 030b 	orrs.w	r3, sl, fp
100057fe:	d038      	beq.n	10005872 <HAL_RCCEx_PeriphCLKConfig+0x186>
      RCC_PERIPHCLK_I2C35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C35CLKSOURCE(PeriphClkInit->I2c35ClockSelection));

    if ((PeriphClkInit->I2c35ClockSelection) == RCC_I2C35CLKSOURCE_PLL4)
10005800:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005804:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005808:	681b      	ldr	r3, [r3, #0]
1000580a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
1000580e:	2b01      	cmp	r3, #1
10005810:	d11d      	bne.n	1000584e <HAL_RCCEx_PeriphCLKConfig+0x162>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005812:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005816:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000581a:	681b      	ldr	r3, [r3, #0]
1000581c:	3380      	adds	r3, #128	; 0x80
1000581e:	4618      	mov	r0, r3
10005820:	f7ff fe0c 	bl	1000543c <RCCEx_PLL4_Config>
10005824:	4603      	mov	r3, r0
10005826:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
1000582a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000582e:	2b00      	cmp	r3, #0
10005830:	d003      	beq.n	1000583a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        return status;
10005832:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005836:	f001 bde3 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
1000583a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000583e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005842:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000584a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_I2C35_CONFIG(PeriphClkInit->I2c35ClockSelection);
1000584e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005852:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	; 0x8c4
10005856:	f023 0107 	bic.w	r1, r3, #7
1000585a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000585e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005862:	681b      	ldr	r3, [r3, #0]
10005864:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10005868:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000586c:	430b      	orrs	r3, r1
1000586e:	f8c2 38c4 	str.w	r3, [r2, #2244]	; 0x8c4
  }

  /*------------------------------ I2C46 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C46) ==
10005872:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005876:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000587a:	681b      	ldr	r3, [r3, #0]
1000587c:	e9d3 2300 	ldrd	r2, r3, [r3]
10005880:	2100      	movs	r1, #0
10005882:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
10005886:	f003 0320 	and.w	r3, r3, #32
1000588a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
1000588e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
10005892:	460b      	mov	r3, r1
10005894:	4313      	orrs	r3, r2
10005896:	d038      	beq.n	1000590a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      RCC_PERIPHCLK_I2C46)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C46CLKSOURCE(PeriphClkInit->I2c46ClockSelection));

    if ((PeriphClkInit->I2c46ClockSelection) == RCC_I2C46CLKSOURCE_PLL3)
10005898:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000589c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100058a0:	681b      	ldr	r3, [r3, #0]
100058a2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
100058a6:	2b01      	cmp	r3, #1
100058a8:	d11d      	bne.n	100058e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100058aa:	f507 7312 	add.w	r3, r7, #584	; 0x248
100058ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100058b2:	681b      	ldr	r3, [r3, #0]
100058b4:	3344      	adds	r3, #68	; 0x44
100058b6:	4618      	mov	r0, r3
100058b8:	f7ff fc56 	bl	10005168 <RCCEx_PLL3_Config>
100058bc:	4603      	mov	r3, r0
100058be:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
100058c2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100058c6:	2b00      	cmp	r3, #0
100058c8:	d003      	beq.n	100058d2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      {
        return status;
100058ca:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100058ce:	f001 bd97 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100058d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100058d6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100058da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100058de:	f043 0320 	orr.w	r3, r3, #32
100058e2:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
    }

    __HAL_RCC_I2C46_CONFIG(PeriphClkInit->I2c46ClockSelection);
100058e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100058ea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
100058ee:	f023 0107 	bic.w	r1, r3, #7
100058f2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100058f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100058fa:	681b      	ldr	r3, [r3, #0]
100058fc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10005900:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005904:	430b      	orrs	r3, r1
10005906:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) ==
1000590a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000590e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005912:	681b      	ldr	r3, [r3, #0]
10005914:	e9d3 2300 	ldrd	r2, r3, [r3]
10005918:	f002 0380 	and.w	r3, r2, #128	; 0x80
1000591c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
10005920:	2300      	movs	r3, #0
10005922:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
10005926:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
1000592a:	460b      	mov	r3, r1
1000592c:	4313      	orrs	r3, r2
1000592e:	d07e      	beq.n	10005a2e <HAL_RCCEx_PeriphCLKConfig+0x342>
      RCC_PERIPHCLK_SAI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
10005930:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005934:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005938:	681b      	ldr	r3, [r3, #0]
1000593a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
1000593e:	2b04      	cmp	r3, #4
10005940:	d044      	beq.n	100059cc <HAL_RCCEx_PeriphCLKConfig+0x2e0>
10005942:	2b04      	cmp	r3, #4
10005944:	d861      	bhi.n	10005a0a <HAL_RCCEx_PeriphCLKConfig+0x31e>
10005946:	2b00      	cmp	r3, #0
10005948:	d002      	beq.n	10005950 <HAL_RCCEx_PeriphCLKConfig+0x264>
1000594a:	2b01      	cmp	r3, #1
1000594c:	d01f      	beq.n	1000598e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
1000594e:	e05c      	b.n	10005a0a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    {
      case RCC_SAI1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI1*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005950:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005954:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005958:	681b      	ldr	r3, [r3, #0]
1000595a:	3380      	adds	r3, #128	; 0x80
1000595c:	4618      	mov	r0, r3
1000595e:	f7ff fd6d 	bl	1000543c <RCCEx_PLL4_Config>
10005962:	4603      	mov	r3, r0
10005964:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005968:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000596c:	2b00      	cmp	r3, #0
1000596e:	d003      	beq.n	10005978 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        {
          return status;
10005970:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005974:	f001 bd44 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10005978:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000597c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005980:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005984:	f043 0320 	orr.w	r3, r3, #32
10005988:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
1000598c:	e03d      	b.n	10005a0a <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_Q:  /* PLL3_Q is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000598e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005992:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005996:	681b      	ldr	r3, [r3, #0]
10005998:	3344      	adds	r3, #68	; 0x44
1000599a:	4618      	mov	r0, r3
1000599c:	f7ff fbe4 	bl	10005168 <RCCEx_PLL3_Config>
100059a0:	4603      	mov	r3, r0
100059a2:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100059a6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100059aa:	2b00      	cmp	r3, #0
100059ac:	d003      	beq.n	100059b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
        {
          return status;
100059ae:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100059b2:	f001 bd25 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100059b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100059ba:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100059be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100059c2:	f043 0320 	orr.w	r3, r3, #32
100059c6:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100059ca:	e01e      	b.n	10005a0a <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_R:  /* PLL3_R is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100059cc:	f507 7312 	add.w	r3, r7, #584	; 0x248
100059d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100059d4:	681b      	ldr	r3, [r3, #0]
100059d6:	3344      	adds	r3, #68	; 0x44
100059d8:	4618      	mov	r0, r3
100059da:	f7ff fbc5 	bl	10005168 <RCCEx_PLL3_Config>
100059de:	4603      	mov	r3, r0
100059e0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100059e4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100059e8:	2b00      	cmp	r3, #0
100059ea:	d003      	beq.n	100059f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
        {
          return status;
100059ec:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100059f0:	f001 bd06 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100059f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100059f8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100059fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10005a04:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10005a08:	bf00      	nop
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
10005a0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005a0e:	f8d3 38c8 	ldr.w	r3, [r3, #2248]	; 0x8c8
10005a12:	f023 0107 	bic.w	r1, r3, #7
10005a16:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005a1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005a1e:	681b      	ldr	r3, [r3, #0]
10005a20:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10005a24:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005a28:	430b      	orrs	r3, r1
10005a2a:	f8c2 38c8 	str.w	r3, [r2, #2248]	; 0x8c8
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) ==
10005a2e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005a32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005a36:	681b      	ldr	r3, [r3, #0]
10005a38:	e9d3 2300 	ldrd	r2, r3, [r3]
10005a3c:	f402 7380 	and.w	r3, r2, #256	; 0x100
10005a40:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
10005a44:	2300      	movs	r3, #0
10005a46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
10005a4a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
10005a4e:	460b      	mov	r3, r1
10005a50:	4313      	orrs	r3, r2
10005a52:	d07e      	beq.n	10005b52 <HAL_RCCEx_PeriphCLKConfig+0x466>
      RCC_PERIPHCLK_SAI2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
10005a54:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005a58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005a5c:	681b      	ldr	r3, [r3, #0]
10005a5e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
10005a62:	2b05      	cmp	r3, #5
10005a64:	d044      	beq.n	10005af0 <HAL_RCCEx_PeriphCLKConfig+0x404>
10005a66:	2b05      	cmp	r3, #5
10005a68:	d861      	bhi.n	10005b2e <HAL_RCCEx_PeriphCLKConfig+0x442>
10005a6a:	2b00      	cmp	r3, #0
10005a6c:	d002      	beq.n	10005a74 <HAL_RCCEx_PeriphCLKConfig+0x388>
10005a6e:	2b01      	cmp	r3, #1
10005a70:	d01f      	beq.n	10005ab2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
10005a72:	e05c      	b.n	10005b2e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      case RCC_SAI2CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI2*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005a74:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005a78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005a7c:	681b      	ldr	r3, [r3, #0]
10005a7e:	3380      	adds	r3, #128	; 0x80
10005a80:	4618      	mov	r0, r3
10005a82:	f7ff fcdb 	bl	1000543c <RCCEx_PLL4_Config>
10005a86:	4603      	mov	r3, r0
10005a88:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005a8c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005a90:	2b00      	cmp	r3, #0
10005a92:	d003      	beq.n	10005a9c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          return status;
10005a94:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005a98:	f001 bcb2 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10005a9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005aa0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005aa4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005aa8:	f043 0320 	orr.w	r3, r3, #32
10005aac:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10005ab0:	e03d      	b.n	10005b2e <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005ab2:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005ab6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005aba:	681b      	ldr	r3, [r3, #0]
10005abc:	3344      	adds	r3, #68	; 0x44
10005abe:	4618      	mov	r0, r3
10005ac0:	f7ff fb52 	bl	10005168 <RCCEx_PLL3_Config>
10005ac4:	4603      	mov	r3, r0
10005ac6:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005aca:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005ace:	2b00      	cmp	r3, #0
10005ad0:	d003      	beq.n	10005ada <HAL_RCCEx_PeriphCLKConfig+0x3ee>
        {
          return status;
10005ad2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005ad6:	f001 bc93 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10005ada:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005ade:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005ae2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005ae6:	f043 0320 	orr.w	r3, r3, #32
10005aea:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10005aee:	e01e      	b.n	10005b2e <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005af0:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005af4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005af8:	681b      	ldr	r3, [r3, #0]
10005afa:	3344      	adds	r3, #68	; 0x44
10005afc:	4618      	mov	r0, r3
10005afe:	f7ff fb33 	bl	10005168 <RCCEx_PLL3_Config>
10005b02:	4603      	mov	r3, r0
10005b04:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005b08:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005b0c:	2b00      	cmp	r3, #0
10005b0e:	d003      	beq.n	10005b18 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        {
          return status;
10005b10:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005b14:	f001 bc74 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10005b18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005b1c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005b20:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10005b28:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10005b2c:	bf00      	nop
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
10005b2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005b32:	f8d3 38cc 	ldr.w	r3, [r3, #2252]	; 0x8cc
10005b36:	f023 0107 	bic.w	r1, r3, #7
10005b3a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005b3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005b42:	681b      	ldr	r3, [r3, #0]
10005b44:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
10005b48:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005b4c:	430b      	orrs	r3, r1
10005b4e:	f8c2 38cc 	str.w	r3, [r2, #2252]	; 0x8cc
  }

  /*---------------------------- SAI3 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI3) ==
10005b52:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005b56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005b5a:	681b      	ldr	r3, [r3, #0]
10005b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
10005b60:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
10005b64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
10005b68:	2300      	movs	r3, #0
10005b6a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
10005b6e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
10005b72:	460b      	mov	r3, r1
10005b74:	4313      	orrs	r3, r2
10005b76:	d07e      	beq.n	10005c76 <HAL_RCCEx_PeriphCLKConfig+0x58a>
      RCC_PERIPHCLK_SAI3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI3CLKSOURCE(PeriphClkInit->Sai3ClockSelection));

    switch (PeriphClkInit->Sai3ClockSelection)
10005b78:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005b7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005b80:	681b      	ldr	r3, [r3, #0]
10005b82:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
10005b86:	2b04      	cmp	r3, #4
10005b88:	d044      	beq.n	10005c14 <HAL_RCCEx_PeriphCLKConfig+0x528>
10005b8a:	2b04      	cmp	r3, #4
10005b8c:	d861      	bhi.n	10005c52 <HAL_RCCEx_PeriphCLKConfig+0x566>
10005b8e:	2b00      	cmp	r3, #0
10005b90:	d002      	beq.n	10005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
10005b92:	2b01      	cmp	r3, #1
10005b94:	d01f      	beq.n	10005bd6 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
10005b96:	e05c      	b.n	10005c52 <HAL_RCCEx_PeriphCLKConfig+0x566>
    {
      case RCC_SAI3CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI3*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005b98:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005b9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005ba0:	681b      	ldr	r3, [r3, #0]
10005ba2:	3380      	adds	r3, #128	; 0x80
10005ba4:	4618      	mov	r0, r3
10005ba6:	f7ff fc49 	bl	1000543c <RCCEx_PLL4_Config>
10005baa:	4603      	mov	r3, r0
10005bac:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005bb0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005bb4:	2b00      	cmp	r3, #0
10005bb6:	d003      	beq.n	10005bc0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        {
          return status;
10005bb8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005bbc:	f001 bc20 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10005bc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005bc4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005bc8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005bcc:	f043 0320 	orr.w	r3, r3, #32
10005bd0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10005bd4:	e03d      	b.n	10005c52 <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005bd6:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005bda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005bde:	681b      	ldr	r3, [r3, #0]
10005be0:	3344      	adds	r3, #68	; 0x44
10005be2:	4618      	mov	r0, r3
10005be4:	f7ff fac0 	bl	10005168 <RCCEx_PLL3_Config>
10005be8:	4603      	mov	r3, r0
10005bea:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005bee:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005bf2:	2b00      	cmp	r3, #0
10005bf4:	d003      	beq.n	10005bfe <HAL_RCCEx_PeriphCLKConfig+0x512>
        {
          return status;
10005bf6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005bfa:	f001 bc01 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10005bfe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005c02:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005c06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005c0a:	f043 0320 	orr.w	r3, r3, #32
10005c0e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10005c12:	e01e      	b.n	10005c52 <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005c14:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005c18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005c1c:	681b      	ldr	r3, [r3, #0]
10005c1e:	3344      	adds	r3, #68	; 0x44
10005c20:	4618      	mov	r0, r3
10005c22:	f7ff faa1 	bl	10005168 <RCCEx_PLL3_Config>
10005c26:	4603      	mov	r3, r0
10005c28:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005c2c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005c30:	2b00      	cmp	r3, #0
10005c32:	d003      	beq.n	10005c3c <HAL_RCCEx_PeriphCLKConfig+0x550>
        {
          return status;
10005c34:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005c38:	f001 bbe2 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10005c3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005c40:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005c44:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10005c4c:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10005c50:	bf00      	nop
    }

    /* Set the source of SAI3 clock*/
    __HAL_RCC_SAI3_CONFIG(PeriphClkInit->Sai3ClockSelection);
10005c52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005c56:	f8d3 38d0 	ldr.w	r3, [r3, #2256]	; 0x8d0
10005c5a:	f023 0107 	bic.w	r1, r3, #7
10005c5e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005c62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005c66:	681b      	ldr	r3, [r3, #0]
10005c68:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
10005c6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005c70:	430b      	orrs	r3, r1
10005c72:	f8c2 38d0 	str.w	r3, [r2, #2256]	; 0x8d0
  }

  /*---------------------------- SAI4 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4) ==
10005c76:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005c7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005c7e:	681b      	ldr	r3, [r3, #0]
10005c80:	e9d3 2300 	ldrd	r2, r3, [r3]
10005c84:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
10005c88:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
10005c8c:	2300      	movs	r3, #0
10005c8e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
10005c92:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
10005c96:	460b      	mov	r3, r1
10005c98:	4313      	orrs	r3, r2
10005c9a:	d07e      	beq.n	10005d9a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      RCC_PERIPHCLK_SAI4)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI4CLKSOURCE(PeriphClkInit->Sai4ClockSelection));

    switch (PeriphClkInit->Sai4ClockSelection)
10005c9c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005ca0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005ca4:	681b      	ldr	r3, [r3, #0]
10005ca6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
10005caa:	2b04      	cmp	r3, #4
10005cac:	d044      	beq.n	10005d38 <HAL_RCCEx_PeriphCLKConfig+0x64c>
10005cae:	2b04      	cmp	r3, #4
10005cb0:	d861      	bhi.n	10005d76 <HAL_RCCEx_PeriphCLKConfig+0x68a>
10005cb2:	2b00      	cmp	r3, #0
10005cb4:	d002      	beq.n	10005cbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
10005cb6:	2b01      	cmp	r3, #1
10005cb8:	d01f      	beq.n	10005cfa <HAL_RCCEx_PeriphCLKConfig+0x60e>
10005cba:	e05c      	b.n	10005d76 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    {
      case RCC_SAI4CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI4 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005cbc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005cc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005cc4:	681b      	ldr	r3, [r3, #0]
10005cc6:	3380      	adds	r3, #128	; 0x80
10005cc8:	4618      	mov	r0, r3
10005cca:	f7ff fbb7 	bl	1000543c <RCCEx_PLL4_Config>
10005cce:	4603      	mov	r3, r0
10005cd0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005cd4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005cd8:	2b00      	cmp	r3, #0
10005cda:	d003      	beq.n	10005ce4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
        {
          return status;
10005cdc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005ce0:	f001 bb8e 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10005ce4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005ce8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005cec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005cf0:	f043 0320 	orr.w	r3, r3, #32
10005cf4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10005cf8:	e03d      	b.n	10005d76 <HAL_RCCEx_PeriphCLKConfig+0x68a>


      case RCC_SAI4CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005cfa:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005cfe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005d02:	681b      	ldr	r3, [r3, #0]
10005d04:	3344      	adds	r3, #68	; 0x44
10005d06:	4618      	mov	r0, r3
10005d08:	f7ff fa2e 	bl	10005168 <RCCEx_PLL3_Config>
10005d0c:	4603      	mov	r3, r0
10005d0e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005d12:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005d16:	2b00      	cmp	r3, #0
10005d18:	d003      	beq.n	10005d22 <HAL_RCCEx_PeriphCLKConfig+0x636>
        {
          return status;
10005d1a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005d1e:	f001 bb6f 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_Q */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10005d22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005d26:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005d2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005d2e:	f043 0320 	orr.w	r3, r3, #32
10005d32:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10005d36:	e01e      	b.n	10005d76 <HAL_RCCEx_PeriphCLKConfig+0x68a>

      case RCC_SAI4CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005d38:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005d3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005d40:	681b      	ldr	r3, [r3, #0]
10005d42:	3344      	adds	r3, #68	; 0x44
10005d44:	4618      	mov	r0, r3
10005d46:	f7ff fa0f 	bl	10005168 <RCCEx_PLL3_Config>
10005d4a:	4603      	mov	r3, r0
10005d4c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005d50:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005d54:	2b00      	cmp	r3, #0
10005d56:	d003      	beq.n	10005d60 <HAL_RCCEx_PeriphCLKConfig+0x674>
        {
          return status;
10005d58:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005d5c:	f001 bb50 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_R */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10005d60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005d64:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005d68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10005d70:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10005d74:	bf00      	nop
    }

    /* Set the source of SAI4 clock*/
    __HAL_RCC_SAI4_CONFIG(PeriphClkInit->Sai4ClockSelection);
10005d76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005d7a:	f8d3 38d4 	ldr.w	r3, [r3, #2260]	; 0x8d4
10005d7e:	f023 0107 	bic.w	r1, r3, #7
10005d82:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005d86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005d8a:	681b      	ldr	r3, [r3, #0]
10005d8c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
10005d90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005d94:	430b      	orrs	r3, r1
10005d96:	f8c2 38d4 	str.w	r3, [r2, #2260]	; 0x8d4
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) ==
10005d9a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005d9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005da2:	681b      	ldr	r3, [r3, #0]
10005da4:	e9d3 2300 	ldrd	r2, r3, [r3]
10005da8:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
10005dac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
10005db0:	2300      	movs	r3, #0
10005db2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
10005db6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
10005dba:	460b      	mov	r3, r1
10005dbc:	4313      	orrs	r3, r2
10005dbe:	d07e      	beq.n	10005ebe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      RCC_PERIPHCLK_SPI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
10005dc0:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005dc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005dc8:	681b      	ldr	r3, [r3, #0]
10005dca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
10005dce:	2b04      	cmp	r3, #4
10005dd0:	d044      	beq.n	10005e5c <HAL_RCCEx_PeriphCLKConfig+0x770>
10005dd2:	2b04      	cmp	r3, #4
10005dd4:	d861      	bhi.n	10005e9a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
10005dd6:	2b00      	cmp	r3, #0
10005dd8:	d002      	beq.n	10005de0 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
10005dda:	2b01      	cmp	r3, #1
10005ddc:	d01f      	beq.n	10005e1e <HAL_RCCEx_PeriphCLKConfig+0x732>
10005dde:	e05c      	b.n	10005e9a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      case RCC_SPI1CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005de0:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005de4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005de8:	681b      	ldr	r3, [r3, #0]
10005dea:	3380      	adds	r3, #128	; 0x80
10005dec:	4618      	mov	r0, r3
10005dee:	f7ff fb25 	bl	1000543c <RCCEx_PLL4_Config>
10005df2:	4603      	mov	r3, r0
10005df4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005df8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005dfc:	2b00      	cmp	r3, #0
10005dfe:	d003      	beq.n	10005e08 <HAL_RCCEx_PeriphCLKConfig+0x71c>
        {
          return status;
10005e00:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005e04:	f001 bafc 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10005e08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005e0c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005e10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005e14:	f043 0310 	orr.w	r3, r3, #16
10005e18:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10005e1c:	e03d      	b.n	10005e9a <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005e1e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005e22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005e26:	681b      	ldr	r3, [r3, #0]
10005e28:	3344      	adds	r3, #68	; 0x44
10005e2a:	4618      	mov	r0, r3
10005e2c:	f7ff f99c 	bl	10005168 <RCCEx_PLL3_Config>
10005e30:	4603      	mov	r3, r0
10005e32:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005e36:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005e3a:	2b00      	cmp	r3, #0
10005e3c:	d003      	beq.n	10005e46 <HAL_RCCEx_PeriphCLKConfig+0x75a>
        {
          return status;
10005e3e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005e42:	f001 badd 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10005e46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005e4a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005e4e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005e52:	f043 0320 	orr.w	r3, r3, #32
10005e56:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10005e5a:	e01e      	b.n	10005e9a <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005e5c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005e60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005e64:	681b      	ldr	r3, [r3, #0]
10005e66:	3344      	adds	r3, #68	; 0x44
10005e68:	4618      	mov	r0, r3
10005e6a:	f7ff f97d 	bl	10005168 <RCCEx_PLL3_Config>
10005e6e:	4603      	mov	r3, r0
10005e70:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005e74:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005e78:	2b00      	cmp	r3, #0
10005e7a:	d003      	beq.n	10005e84 <HAL_RCCEx_PeriphCLKConfig+0x798>
        {
          return status;
10005e7c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005e80:	f001 babe 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10005e84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005e88:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005e8c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10005e94:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10005e98:	bf00      	nop

    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
10005e9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005e9e:	f8d3 38d8 	ldr.w	r3, [r3, #2264]	; 0x8d8
10005ea2:	f023 0107 	bic.w	r1, r3, #7
10005ea6:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005eaa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005eae:	681b      	ldr	r3, [r3, #0]
10005eb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
10005eb4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005eb8:	430b      	orrs	r3, r1
10005eba:	f8c2 38d8 	str.w	r3, [r2, #2264]	; 0x8d8
  }

  /*---------------------------- SPI23 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI23) ==
10005ebe:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005ec2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005ec6:	681b      	ldr	r3, [r3, #0]
10005ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
10005ecc:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
10005ed0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
10005ed4:	2300      	movs	r3, #0
10005ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
10005eda:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
10005ede:	460b      	mov	r3, r1
10005ee0:	4313      	orrs	r3, r2
10005ee2:	d07e      	beq.n	10005fe2 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      RCC_PERIPHCLK_SPI23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
10005ee4:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005ee8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005eec:	681b      	ldr	r3, [r3, #0]
10005eee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
10005ef2:	2b04      	cmp	r3, #4
10005ef4:	d044      	beq.n	10005f80 <HAL_RCCEx_PeriphCLKConfig+0x894>
10005ef6:	2b04      	cmp	r3, #4
10005ef8:	d861      	bhi.n	10005fbe <HAL_RCCEx_PeriphCLKConfig+0x8d2>
10005efa:	2b00      	cmp	r3, #0
10005efc:	d002      	beq.n	10005f04 <HAL_RCCEx_PeriphCLKConfig+0x818>
10005efe:	2b01      	cmp	r3, #1
10005f00:	d01f      	beq.n	10005f42 <HAL_RCCEx_PeriphCLKConfig+0x856>
10005f02:	e05c      	b.n	10005fbe <HAL_RCCEx_PeriphCLKConfig+0x8d2>
    {
      case RCC_SPI23CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI23 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005f04:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005f08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005f0c:	681b      	ldr	r3, [r3, #0]
10005f0e:	3380      	adds	r3, #128	; 0x80
10005f10:	4618      	mov	r0, r3
10005f12:	f7ff fa93 	bl	1000543c <RCCEx_PLL4_Config>
10005f16:	4603      	mov	r3, r0
10005f18:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005f1c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005f20:	2b00      	cmp	r3, #0
10005f22:	d003      	beq.n	10005f2c <HAL_RCCEx_PeriphCLKConfig+0x840>
        {
          return status;
10005f24:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005f28:	f001 ba6a 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10005f2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005f30:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005f34:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005f38:	f043 0310 	orr.w	r3, r3, #16
10005f3c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10005f40:	e03d      	b.n	10005fbe <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005f42:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005f46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005f4a:	681b      	ldr	r3, [r3, #0]
10005f4c:	3344      	adds	r3, #68	; 0x44
10005f4e:	4618      	mov	r0, r3
10005f50:	f7ff f90a 	bl	10005168 <RCCEx_PLL3_Config>
10005f54:	4603      	mov	r3, r0
10005f56:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005f5a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005f5e:	2b00      	cmp	r3, #0
10005f60:	d003      	beq.n	10005f6a <HAL_RCCEx_PeriphCLKConfig+0x87e>
        {
          return status;
10005f62:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005f66:	f001 ba4b 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10005f6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005f6e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005f72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005f76:	f043 0320 	orr.w	r3, r3, #32
10005f7a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10005f7e:	e01e      	b.n	10005fbe <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005f80:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005f84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005f88:	681b      	ldr	r3, [r3, #0]
10005f8a:	3344      	adds	r3, #68	; 0x44
10005f8c:	4618      	mov	r0, r3
10005f8e:	f7ff f8eb 	bl	10005168 <RCCEx_PLL3_Config>
10005f92:	4603      	mov	r3, r0
10005f94:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005f98:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005f9c:	2b00      	cmp	r3, #0
10005f9e:	d003      	beq.n	10005fa8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
        {
          return status;
10005fa0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005fa4:	f001 ba2c 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10005fa8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005fac:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005fb0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10005fb8:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10005fbc:	bf00      	nop
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
10005fbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005fc2:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	; 0x8dc
10005fc6:	f023 0107 	bic.w	r1, r3, #7
10005fca:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005fce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005fd2:	681b      	ldr	r3, [r3, #0]
10005fd4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
10005fd8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005fdc:	430b      	orrs	r3, r1
10005fde:	f8c2 38dc 	str.w	r3, [r2, #2268]	; 0x8dc
  }

  /*---------------------------- SPI45 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) ==
10005fe2:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005fe6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005fea:	681b      	ldr	r3, [r3, #0]
10005fec:	e9d3 2300 	ldrd	r2, r3, [r3]
10005ff0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
10005ff4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
10005ff8:	2300      	movs	r3, #0
10005ffa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
10005ffe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
10006002:	460b      	mov	r3, r1
10006004:	4313      	orrs	r3, r2
10006006:	d038      	beq.n	1000607a <HAL_RCCEx_PeriphCLKConfig+0x98e>
      RCC_PERIPHCLK_SPI45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    if (PeriphClkInit->Spi45ClockSelection == RCC_SPI45CLKSOURCE_PLL4)
10006008:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000600c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006010:	681b      	ldr	r3, [r3, #0]
10006012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
10006016:	2b01      	cmp	r3, #1
10006018:	d11d      	bne.n	10006056 <HAL_RCCEx_PeriphCLKConfig+0x96a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000601a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000601e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006022:	681b      	ldr	r3, [r3, #0]
10006024:	3380      	adds	r3, #128	; 0x80
10006026:	4618      	mov	r0, r3
10006028:	f7ff fa08 	bl	1000543c <RCCEx_PLL4_Config>
1000602c:	4603      	mov	r3, r0
1000602e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10006032:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006036:	2b00      	cmp	r3, #0
10006038:	d003      	beq.n	10006042 <HAL_RCCEx_PeriphCLKConfig+0x956>
      {
        return status;
1000603a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000603e:	f001 b9df 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable SPI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006042:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006046:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000604a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000604e:	f043 0320 	orr.w	r3, r3, #32
10006052:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of SPI45 clock*/
    __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
10006056:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000605a:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
1000605e:	f023 0107 	bic.w	r1, r3, #7
10006062:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006066:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000606a:	681b      	ldr	r3, [r3, #0]
1000606c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
10006070:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006074:	430b      	orrs	r3, r1
10006076:	f8c2 38e0 	str.w	r3, [r2, #2272]	; 0x8e0
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) ==
1000607a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000607e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006082:	681b      	ldr	r3, [r3, #0]
10006084:	e9d3 2300 	ldrd	r2, r3, [r3]
10006088:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
1000608c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
10006090:	2300      	movs	r3, #0
10006092:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
10006096:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
1000609a:	460b      	mov	r3, r1
1000609c:	4313      	orrs	r3, r2
1000609e:	d05b      	beq.n	10006158 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
      RCC_PERIPHCLK_SPI6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
100060a0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100060a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100060a8:	681b      	ldr	r3, [r3, #0]
100060aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
100060ae:	2b01      	cmp	r3, #1
100060b0:	d002      	beq.n	100060b8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
100060b2:	2b05      	cmp	r3, #5
100060b4:	d01f      	beq.n	100060f6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
100060b6:	e03d      	b.n	10006134 <HAL_RCCEx_PeriphCLKConfig+0xa48>
    {
      case RCC_SPI6CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI6 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100060b8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100060bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100060c0:	681b      	ldr	r3, [r3, #0]
100060c2:	3380      	adds	r3, #128	; 0x80
100060c4:	4618      	mov	r0, r3
100060c6:	f7ff f9b9 	bl	1000543c <RCCEx_PLL4_Config>
100060ca:	4603      	mov	r3, r0
100060cc:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100060d0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100060d4:	2b00      	cmp	r3, #0
100060d6:	d003      	beq.n	100060e0 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        {
          return status;
100060d8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100060dc:	f001 b990 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100060e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100060e4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100060e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100060ec:	f043 0320 	orr.w	r3, r3, #32
100060f0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100060f4:	e01e      	b.n	10006134 <HAL_RCCEx_PeriphCLKConfig+0xa48>

      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is used as clock source for SPI6 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100060f6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100060fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100060fe:	681b      	ldr	r3, [r3, #0]
10006100:	3344      	adds	r3, #68	; 0x44
10006102:	4618      	mov	r0, r3
10006104:	f7ff f830 	bl	10005168 <RCCEx_PLL3_Config>
10006108:	4603      	mov	r3, r0
1000610a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000610e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006112:	2b00      	cmp	r3, #0
10006114:	d003      	beq.n	1000611e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        {
          return status;
10006116:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000611a:	f001 b971 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000611e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006122:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006126:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000612a:	f043 0320 	orr.w	r3, r3, #32
1000612e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006132:	bf00      	nop
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
10006134:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006138:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
1000613c:	f023 0107 	bic.w	r1, r3, #7
10006140:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006144:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006148:	681b      	ldr	r3, [r3, #0]
1000614a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
1000614e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006152:	430b      	orrs	r3, r1
10006154:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  /*---------------------------- USART6 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) ==
10006158:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000615c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006160:	681b      	ldr	r3, [r3, #0]
10006162:	e9d3 2300 	ldrd	r2, r3, [r3]
10006166:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
1000616a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
1000616e:	2300      	movs	r3, #0
10006170:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
10006174:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
10006178:	460b      	mov	r3, r1
1000617a:	4313      	orrs	r3, r2
1000617c:	d038      	beq.n	100061f0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
      RCC_PERIPHCLK_USART6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_PLL4)
1000617e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006182:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006186:	681b      	ldr	r3, [r3, #0]
10006188:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
1000618c:	2b01      	cmp	r3, #1
1000618e:	d11d      	bne.n	100061cc <HAL_RCCEx_PeriphCLKConfig+0xae0>
    {
      /* PLL4 is used as clock source for USART6 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006190:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006194:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006198:	681b      	ldr	r3, [r3, #0]
1000619a:	3380      	adds	r3, #128	; 0x80
1000619c:	4618      	mov	r0, r3
1000619e:	f7ff f94d 	bl	1000543c <RCCEx_PLL4_Config>
100061a2:	4603      	mov	r3, r0
100061a4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
100061a8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100061ac:	2b00      	cmp	r3, #0
100061ae:	d003      	beq.n	100061b8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
      {
        return status;
100061b0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100061b4:	f001 b924 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100061b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100061bc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100061c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100061c4:	f043 0320 	orr.w	r3, r3, #32
100061c8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of USART6 clock*/
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
100061cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100061d0:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
100061d4:	f023 0107 	bic.w	r1, r3, #7
100061d8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100061dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100061e0:	681b      	ldr	r3, [r3, #0]
100061e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
100061e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100061ea:	430b      	orrs	r3, r1
100061ec:	f8c2 38e4 	str.w	r3, [r2, #2276]	; 0x8e4
  }

  /*---------------------------- UART24 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART24) ==
100061f0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100061f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100061f8:	681b      	ldr	r3, [r3, #0]
100061fa:	e9d3 2300 	ldrd	r2, r3, [r3]
100061fe:	f002 0302 	and.w	r3, r2, #2
10006202:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
10006206:	2300      	movs	r3, #0
10006208:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
1000620c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
10006210:	460b      	mov	r3, r1
10006212:	4313      	orrs	r3, r2
10006214:	d038      	beq.n	10006288 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      RCC_PERIPHCLK_UART24)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART24CLKSOURCE(PeriphClkInit->Uart24ClockSelection));

    if (PeriphClkInit->Uart24ClockSelection == RCC_UART24CLKSOURCE_PLL4)
10006216:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000621a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000621e:	681b      	ldr	r3, [r3, #0]
10006220:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
10006224:	2b01      	cmp	r3, #1
10006226:	d11d      	bne.n	10006264 <HAL_RCCEx_PeriphCLKConfig+0xb78>
    {
      /* PLL4 is used as clock source for UART24 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006228:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000622c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006230:	681b      	ldr	r3, [r3, #0]
10006232:	3380      	adds	r3, #128	; 0x80
10006234:	4618      	mov	r0, r3
10006236:	f7ff f901 	bl	1000543c <RCCEx_PLL4_Config>
1000623a:	4603      	mov	r3, r0
1000623c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10006240:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006244:	2b00      	cmp	r3, #0
10006246:	d003      	beq.n	10006250 <HAL_RCCEx_PeriphCLKConfig+0xb64>
      {
        return status;
10006248:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000624c:	f001 b8d8 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006250:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006254:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006258:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000625c:	f043 0320 	orr.w	r3, r3, #32
10006260:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART24 clock*/
    __HAL_RCC_UART24_CONFIG(PeriphClkInit->Uart24ClockSelection);
10006264:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006268:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
1000626c:	f023 0107 	bic.w	r1, r3, #7
10006270:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006274:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006278:	681b      	ldr	r3, [r3, #0]
1000627a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
1000627e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006282:	430b      	orrs	r3, r1
10006284:	f8c2 38e8 	str.w	r3, [r2, #2280]	; 0x8e8
  }

  /*---------------------------- UART35 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART35) ==
10006288:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000628c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006290:	681b      	ldr	r3, [r3, #0]
10006292:	e9d3 2300 	ldrd	r2, r3, [r3]
10006296:	f002 0304 	and.w	r3, r2, #4
1000629a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
1000629e:	2300      	movs	r3, #0
100062a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
100062a4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
100062a8:	460b      	mov	r3, r1
100062aa:	4313      	orrs	r3, r2
100062ac:	d038      	beq.n	10006320 <HAL_RCCEx_PeriphCLKConfig+0xc34>
      RCC_PERIPHCLK_UART35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART35CLKSOURCE(PeriphClkInit->Uart35ClockSelection));

    if (PeriphClkInit->Uart35ClockSelection == RCC_UART35CLKSOURCE_PLL4)
100062ae:	f507 7312 	add.w	r3, r7, #584	; 0x248
100062b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100062b6:	681b      	ldr	r3, [r3, #0]
100062b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
100062bc:	2b01      	cmp	r3, #1
100062be:	d11d      	bne.n	100062fc <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      /* PLL4 is used as clock source for UART35 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100062c0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100062c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100062c8:	681b      	ldr	r3, [r3, #0]
100062ca:	3380      	adds	r3, #128	; 0x80
100062cc:	4618      	mov	r0, r3
100062ce:	f7ff f8b5 	bl	1000543c <RCCEx_PLL4_Config>
100062d2:	4603      	mov	r3, r0
100062d4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
100062d8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100062dc:	2b00      	cmp	r3, #0
100062de:	d003      	beq.n	100062e8 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      {
        return status;
100062e0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100062e4:	f001 b88c 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100062e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100062ec:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100062f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100062f4:	f043 0320 	orr.w	r3, r3, #32
100062f8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART35 clock*/
    __HAL_RCC_UART35_CONFIG(PeriphClkInit->Uart35ClockSelection);
100062fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006300:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
10006304:	f023 0107 	bic.w	r1, r3, #7
10006308:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000630c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006310:	681b      	ldr	r3, [r3, #0]
10006312:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
10006316:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000631a:	430b      	orrs	r3, r1
1000631c:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
  }

  /*---------------------------- UAUART78 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART78) ==
10006320:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006324:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006328:	681b      	ldr	r3, [r3, #0]
1000632a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000632e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
10006332:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
10006336:	2300      	movs	r3, #0
10006338:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
1000633c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
10006340:	460b      	mov	r3, r1
10006342:	4313      	orrs	r3, r2
10006344:	d038      	beq.n	100063b8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      RCC_PERIPHCLK_UART78)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART78CLKSOURCE(PeriphClkInit->Uart78ClockSelection));

    if (PeriphClkInit->Uart78ClockSelection == RCC_UART78CLKSOURCE_PLL4)
10006346:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000634a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000634e:	681b      	ldr	r3, [r3, #0]
10006350:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
10006354:	2b01      	cmp	r3, #1
10006356:	d11d      	bne.n	10006394 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* PLL4 is used as clock source for UART78 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006358:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000635c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006360:	681b      	ldr	r3, [r3, #0]
10006362:	3380      	adds	r3, #128	; 0x80
10006364:	4618      	mov	r0, r3
10006366:	f7ff f869 	bl	1000543c <RCCEx_PLL4_Config>
1000636a:	4603      	mov	r3, r0
1000636c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10006370:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006374:	2b00      	cmp	r3, #0
10006376:	d003      	beq.n	10006380 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        return status;
10006378:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000637c:	f001 b840 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006380:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006384:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006388:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000638c:	f043 0320 	orr.w	r3, r3, #32
10006390:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART78 clock*/
    __HAL_RCC_UART78_CONFIG(PeriphClkInit->Uart78ClockSelection);
10006394:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006398:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
1000639c:	f023 0107 	bic.w	r1, r3, #7
100063a0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100063a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100063a8:	681b      	ldr	r3, [r3, #0]
100063aa:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
100063ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100063b2:	430b      	orrs	r3, r1
100063b4:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
  }

  /*---------------------------- USART1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) ==
100063b8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100063bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100063c0:	681b      	ldr	r3, [r3, #0]
100063c2:	e9d3 2300 	ldrd	r2, r3, [r3]
100063c6:	f002 0301 	and.w	r3, r2, #1
100063ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
100063ce:	2300      	movs	r3, #0
100063d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
100063d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
100063d8:	460b      	mov	r3, r1
100063da:	4313      	orrs	r3, r2
100063dc:	d05b      	beq.n	10006496 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
      RCC_PERIPHCLK_USART1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
100063de:	f507 7312 	add.w	r3, r7, #584	; 0x248
100063e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100063e6:	681b      	ldr	r3, [r3, #0]
100063e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
100063ec:	2b01      	cmp	r3, #1
100063ee:	d002      	beq.n	100063f6 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
100063f0:	2b04      	cmp	r3, #4
100063f2:	d01f      	beq.n	10006434 <HAL_RCCEx_PeriphCLKConfig+0xd48>
100063f4:	e03d      	b.n	10006472 <HAL_RCCEx_PeriphCLKConfig+0xd86>
    {
      case RCC_USART1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for USART1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100063f6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100063fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100063fe:	681b      	ldr	r3, [r3, #0]
10006400:	3344      	adds	r3, #68	; 0x44
10006402:	4618      	mov	r0, r3
10006404:	f7fe feb0 	bl	10005168 <RCCEx_PLL3_Config>
10006408:	4603      	mov	r3, r0
1000640a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000640e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006412:	2b00      	cmp	r3, #0
10006414:	d003      	beq.n	1000641e <HAL_RCCEx_PeriphCLKConfig+0xd32>
        {
          return status;
10006416:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000641a:	f000 bff1 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable UART Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000641e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006422:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006426:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000642a:	f043 0320 	orr.w	r3, r3, #32
1000642e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006432:	e01e      	b.n	10006472 <HAL_RCCEx_PeriphCLKConfig+0xd86>

      case RCC_USART1CLKSOURCE_PLL4: /* PLL4 is used as clock source for USART1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006434:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006438:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000643c:	681b      	ldr	r3, [r3, #0]
1000643e:	3380      	adds	r3, #128	; 0x80
10006440:	4618      	mov	r0, r3
10006442:	f7fe fffb 	bl	1000543c <RCCEx_PLL4_Config>
10006446:	4603      	mov	r3, r0
10006448:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000644c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006450:	2b00      	cmp	r3, #0
10006452:	d003      	beq.n	1000645c <HAL_RCCEx_PeriphCLKConfig+0xd70>
        {
          return status;
10006454:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006458:	f000 bfd2 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable USART Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000645c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006460:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006464:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006468:	f043 0320 	orr.w	r3, r3, #32
1000646c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006470:	bf00      	nop
    }

    /* Set the source of USART1 clock*/
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
10006472:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006476:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
1000647a:	f023 0107 	bic.w	r1, r3, #7
1000647e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006482:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006486:	681b      	ldr	r3, [r3, #0]
10006488:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
1000648c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006490:	430b      	orrs	r3, r1
10006492:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  /*---------------------------- SDMMC12 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC12) ==
10006496:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000649a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000649e:	681b      	ldr	r3, [r3, #0]
100064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
100064a4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
100064a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
100064ac:	2300      	movs	r3, #0
100064ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
100064b2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
100064b6:	460b      	mov	r3, r1
100064b8:	4313      	orrs	r3, r2
100064ba:	d05b      	beq.n	10006574 <HAL_RCCEx_PeriphCLKConfig+0xe88>
      RCC_PERIPHCLK_SDMMC12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
100064bc:	f507 7312 	add.w	r3, r7, #584	; 0x248
100064c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100064c4:	681b      	ldr	r3, [r3, #0]
100064c6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
100064ca:	2b01      	cmp	r3, #1
100064cc:	d002      	beq.n	100064d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
100064ce:	2b02      	cmp	r3, #2
100064d0:	d01f      	beq.n	10006512 <HAL_RCCEx_PeriphCLKConfig+0xe26>
100064d2:	e03d      	b.n	10006550 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      case RCC_SDMMC12CLKSOURCE_PLL3: /* PLL3 is used as clock source for SDMMC12 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100064d4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100064d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100064dc:	681b      	ldr	r3, [r3, #0]
100064de:	3344      	adds	r3, #68	; 0x44
100064e0:	4618      	mov	r0, r3
100064e2:	f7fe fe41 	bl	10005168 <RCCEx_PLL3_Config>
100064e6:	4603      	mov	r3, r0
100064e8:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100064ec:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100064f0:	2b00      	cmp	r3, #0
100064f2:	d003      	beq.n	100064fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
        {
          return status;
100064f4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100064f8:	f000 bf82 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100064fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006500:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006504:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000650c:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006510:	e01e      	b.n	10006550 <HAL_RCCEx_PeriphCLKConfig+0xe64>

      case RCC_SDMMC12CLKSOURCE_PLL4: /* PLL4 is used as clock source for SDMMC12 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006512:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006516:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000651a:	681b      	ldr	r3, [r3, #0]
1000651c:	3380      	adds	r3, #128	; 0x80
1000651e:	4618      	mov	r0, r3
10006520:	f7fe ff8c 	bl	1000543c <RCCEx_PLL4_Config>
10006524:	4603      	mov	r3, r0
10006526:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000652a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000652e:	2b00      	cmp	r3, #0
10006530:	d003      	beq.n	1000653a <HAL_RCCEx_PeriphCLKConfig+0xe4e>
        {
          return status;
10006532:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006536:	f000 bf63 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
1000653a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000653e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006542:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006546:	f043 0310 	orr.w	r3, r3, #16
1000654a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
1000654e:	bf00      	nop
    }

    /* Set the source of SDMMC12 clock*/
    __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
10006550:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006554:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
10006558:	f023 0107 	bic.w	r1, r3, #7
1000655c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006560:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006564:	681b      	ldr	r3, [r3, #0]
10006566:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
1000656a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000656e:	430b      	orrs	r3, r1
10006570:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
  }

  /*---------------------------- SDMMC3 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC3) ==
10006574:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006578:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000657c:	681b      	ldr	r3, [r3, #0]
1000657e:	e9d3 2300 	ldrd	r2, r3, [r3]
10006582:	2100      	movs	r1, #0
10006584:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
10006588:	f003 0301 	and.w	r3, r3, #1
1000658c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
10006590:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
10006594:	460b      	mov	r3, r1
10006596:	4313      	orrs	r3, r2
10006598:	d05b      	beq.n	10006652 <HAL_RCCEx_PeriphCLKConfig+0xf66>
      RCC_PERIPHCLK_SDMMC3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC3CLKSOURCE(PeriphClkInit->Sdmmc3ClockSelection));

    switch (PeriphClkInit->Sdmmc3ClockSelection)
1000659a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000659e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100065a2:	681b      	ldr	r3, [r3, #0]
100065a4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
100065a8:	2b01      	cmp	r3, #1
100065aa:	d002      	beq.n	100065b2 <HAL_RCCEx_PeriphCLKConfig+0xec6>
100065ac:	2b02      	cmp	r3, #2
100065ae:	d01f      	beq.n	100065f0 <HAL_RCCEx_PeriphCLKConfig+0xf04>
100065b0:	e03d      	b.n	1000662e <HAL_RCCEx_PeriphCLKConfig+0xf42>
    {
      case RCC_SDMMC3CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SDMMC3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100065b2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100065b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100065ba:	681b      	ldr	r3, [r3, #0]
100065bc:	3344      	adds	r3, #68	; 0x44
100065be:	4618      	mov	r0, r3
100065c0:	f7fe fdd2 	bl	10005168 <RCCEx_PLL3_Config>
100065c4:	4603      	mov	r3, r0
100065c6:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100065ca:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100065ce:	2b00      	cmp	r3, #0
100065d0:	d003      	beq.n	100065da <HAL_RCCEx_PeriphCLKConfig+0xeee>
        {
          return status;
100065d2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100065d6:	f000 bf13 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100065da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100065de:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100065e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100065e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100065ea:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100065ee:	e01e      	b.n	1000662e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_SDMMC3CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SDMMC3 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100065f0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100065f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100065f8:	681b      	ldr	r3, [r3, #0]
100065fa:	3380      	adds	r3, #128	; 0x80
100065fc:	4618      	mov	r0, r3
100065fe:	f7fe ff1d 	bl	1000543c <RCCEx_PLL4_Config>
10006602:	4603      	mov	r3, r0
10006604:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006608:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000660c:	2b00      	cmp	r3, #0
1000660e:	d003      	beq.n	10006618 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
        {
          return status;
10006610:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006614:	f000 bef4 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006618:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000661c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006620:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006624:	f043 0310 	orr.w	r3, r3, #16
10006628:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
1000662c:	bf00      	nop
    }

    /* Set the source of SDMMC3 clock*/
    __HAL_RCC_SDMMC3_CONFIG(PeriphClkInit->Sdmmc3ClockSelection);
1000662e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006632:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
10006636:	f023 0107 	bic.w	r1, r3, #7
1000663a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000663e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006642:	681b      	ldr	r3, [r3, #0]
10006644:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
10006648:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000664c:	430b      	orrs	r3, r1
1000664e:	f8c2 38f8 	str.w	r3, [r2, #2296]	; 0x8f8
  }

  /*---------------------------- ETH configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ETH) ==
10006652:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006656:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000665a:	681b      	ldr	r3, [r3, #0]
1000665c:	e9d3 2300 	ldrd	r2, r3, [r3]
10006660:	2100      	movs	r1, #0
10006662:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
10006666:	f003 0302 	and.w	r3, r3, #2
1000666a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
1000666e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
10006672:	460b      	mov	r3, r1
10006674:	4313      	orrs	r3, r2
10006676:	d05b      	beq.n	10006730 <HAL_RCCEx_PeriphCLKConfig+0x1044>
      RCC_PERIPHCLK_ETH)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETHCLKSOURCE(PeriphClkInit->EthClockSelection));

    switch (PeriphClkInit->EthClockSelection)
10006678:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000667c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006680:	681b      	ldr	r3, [r3, #0]
10006682:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
10006686:	2b00      	cmp	r3, #0
10006688:	d002      	beq.n	10006690 <HAL_RCCEx_PeriphCLKConfig+0xfa4>
1000668a:	2b01      	cmp	r3, #1
1000668c:	d01f      	beq.n	100066ce <HAL_RCCEx_PeriphCLKConfig+0xfe2>
1000668e:	e03d      	b.n	1000670c <HAL_RCCEx_PeriphCLKConfig+0x1020>
    {
      case RCC_ETHCLKSOURCE_PLL4:     /* PLL4 is used as clock source for ETH */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006690:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006694:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006698:	681b      	ldr	r3, [r3, #0]
1000669a:	3380      	adds	r3, #128	; 0x80
1000669c:	4618      	mov	r0, r3
1000669e:	f7fe fecd 	bl	1000543c <RCCEx_PLL4_Config>
100066a2:	4603      	mov	r3, r0
100066a4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100066a8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100066ac:	2b00      	cmp	r3, #0
100066ae:	d003      	beq.n	100066b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
        {
          return status;
100066b0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100066b4:	f000 bea4 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL2 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100066b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100066bc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100066c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100066c4:	f043 0310 	orr.w	r3, r3, #16
100066c8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100066cc:	e01e      	b.n	1000670c <HAL_RCCEx_PeriphCLKConfig+0x1020>

      case RCC_ETHCLKSOURCE_PLL3:     /* PLL3 is used as clock source for ETH */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100066ce:	f507 7312 	add.w	r3, r7, #584	; 0x248
100066d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100066d6:	681b      	ldr	r3, [r3, #0]
100066d8:	3344      	adds	r3, #68	; 0x44
100066da:	4618      	mov	r0, r3
100066dc:	f7fe fd44 	bl	10005168 <RCCEx_PLL3_Config>
100066e0:	4603      	mov	r3, r0
100066e2:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100066e6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100066ea:	2b00      	cmp	r3, #0
100066ec:	d003      	beq.n	100066f6 <HAL_RCCEx_PeriphCLKConfig+0x100a>
        {
          return status;
100066ee:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100066f2:	f000 be85 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100066f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100066fa:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100066fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006702:	f043 0320 	orr.w	r3, r3, #32
10006706:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000670a:	bf00      	nop
    }

    /* Set the source of ETH clock*/
    __HAL_RCC_ETH_CONFIG(PeriphClkInit->EthClockSelection);
1000670c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006710:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
10006714:	f023 0103 	bic.w	r1, r3, #3
10006718:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000671c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006720:	681b      	ldr	r3, [r3, #0]
10006722:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
10006726:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000672a:	430b      	orrs	r3, r1
1000672c:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
  }

  /*---------------------------- QSPI configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) ==
10006730:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006734:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006738:	681b      	ldr	r3, [r3, #0]
1000673a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000673e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
10006742:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
10006746:	2300      	movs	r3, #0
10006748:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
1000674c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
10006750:	460b      	mov	r3, r1
10006752:	4313      	orrs	r3, r2
10006754:	d05b      	beq.n	1000680e <HAL_RCCEx_PeriphCLKConfig+0x1122>
      RCC_PERIPHCLK_QSPI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    switch (PeriphClkInit->QspiClockSelection)
10006756:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000675a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000675e:	681b      	ldr	r3, [r3, #0]
10006760:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
10006764:	2b01      	cmp	r3, #1
10006766:	d002      	beq.n	1000676e <HAL_RCCEx_PeriphCLKConfig+0x1082>
10006768:	2b02      	cmp	r3, #2
1000676a:	d01f      	beq.n	100067ac <HAL_RCCEx_PeriphCLKConfig+0x10c0>
1000676c:	e03d      	b.n	100067ea <HAL_RCCEx_PeriphCLKConfig+0x10fe>
    {
      case RCC_QSPICLKSOURCE_PLL3:   /* PLL3 is used as clock source for QSPI */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000676e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006772:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006776:	681b      	ldr	r3, [r3, #0]
10006778:	3344      	adds	r3, #68	; 0x44
1000677a:	4618      	mov	r0, r3
1000677c:	f7fe fcf4 	bl	10005168 <RCCEx_PLL3_Config>
10006780:	4603      	mov	r3, r0
10006782:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006786:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000678a:	2b00      	cmp	r3, #0
1000678c:	d003      	beq.n	10006796 <HAL_RCCEx_PeriphCLKConfig+0x10aa>
        {
          return status;
1000678e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006792:	f000 be35 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006796:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000679a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000679e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100067a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100067a6:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100067aa:	e01e      	b.n	100067ea <HAL_RCCEx_PeriphCLKConfig+0x10fe>

      case RCC_QSPICLKSOURCE_PLL4:   /* PLL4 is used as clock source for QSPI */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100067ac:	f507 7312 	add.w	r3, r7, #584	; 0x248
100067b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100067b4:	681b      	ldr	r3, [r3, #0]
100067b6:	3380      	adds	r3, #128	; 0x80
100067b8:	4618      	mov	r0, r3
100067ba:	f7fe fe3f 	bl	1000543c <RCCEx_PLL4_Config>
100067be:	4603      	mov	r3, r0
100067c0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100067c4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100067c8:	2b00      	cmp	r3, #0
100067ca:	d003      	beq.n	100067d4 <HAL_RCCEx_PeriphCLKConfig+0x10e8>
        {
          return status;
100067cc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100067d0:	f000 be16 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100067d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100067d8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100067dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100067e0:	f043 0310 	orr.w	r3, r3, #16
100067e4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100067e8:	bf00      	nop
    }

    /* Set the source of QSPI clock*/
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
100067ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100067ee:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
100067f2:	f023 0103 	bic.w	r1, r3, #3
100067f6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100067fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100067fe:	681b      	ldr	r3, [r3, #0]
10006800:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
10006804:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006808:	430b      	orrs	r3, r1
1000680a:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
  }

  /*---------------------------- FMC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) ==
1000680e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006812:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006816:	681b      	ldr	r3, [r3, #0]
10006818:	e9d3 2300 	ldrd	r2, r3, [r3]
1000681c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
10006820:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
10006824:	2300      	movs	r3, #0
10006826:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
1000682a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
1000682e:	460b      	mov	r3, r1
10006830:	4313      	orrs	r3, r2
10006832:	d05b      	beq.n	100068ec <HAL_RCCEx_PeriphCLKConfig+0x1200>
      RCC_PERIPHCLK_FMC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
10006834:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006838:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000683c:	681b      	ldr	r3, [r3, #0]
1000683e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
10006842:	2b01      	cmp	r3, #1
10006844:	d002      	beq.n	1000684c <HAL_RCCEx_PeriphCLKConfig+0x1160>
10006846:	2b02      	cmp	r3, #2
10006848:	d01f      	beq.n	1000688a <HAL_RCCEx_PeriphCLKConfig+0x119e>
1000684a:	e03d      	b.n	100068c8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
    {
      case RCC_FMCCLKSOURCE_PLL3: /* PLL3 is used as clock source for FMC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000684c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006850:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006854:	681b      	ldr	r3, [r3, #0]
10006856:	3344      	adds	r3, #68	; 0x44
10006858:	4618      	mov	r0, r3
1000685a:	f7fe fc85 	bl	10005168 <RCCEx_PLL3_Config>
1000685e:	4603      	mov	r3, r0
10006860:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006864:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006868:	2b00      	cmp	r3, #0
1000686a:	d003      	beq.n	10006874 <HAL_RCCEx_PeriphCLKConfig+0x1188>
        {
          return status;
1000686c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006870:	f000 bdc6 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006874:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006878:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000687c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006884:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006888:	e01e      	b.n	100068c8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>

      case RCC_FMCCLKSOURCE_PLL4: /* PLL4 is used as clock source for FMC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000688a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000688e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006892:	681b      	ldr	r3, [r3, #0]
10006894:	3380      	adds	r3, #128	; 0x80
10006896:	4618      	mov	r0, r3
10006898:	f7fe fdd0 	bl	1000543c <RCCEx_PLL4_Config>
1000689c:	4603      	mov	r3, r0
1000689e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100068a2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100068a6:	2b00      	cmp	r3, #0
100068a8:	d003      	beq.n	100068b2 <HAL_RCCEx_PeriphCLKConfig+0x11c6>
        {
          return status;
100068aa:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100068ae:	f000 bda7 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100068b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100068b6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100068ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100068be:	f043 0310 	orr.w	r3, r3, #16
100068c2:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100068c6:	bf00      	nop
    }

    /* Set the source of FMC clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
100068c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100068cc:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
100068d0:	f023 0103 	bic.w	r1, r3, #3
100068d4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100068d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100068dc:	681b      	ldr	r3, [r3, #0]
100068de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
100068e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100068e6:	430b      	orrs	r3, r1
100068e8:	f8c2 3904 	str.w	r3, [r2, #2308]	; 0x904
  }

#if defined(FDCAN1)
  /*---------------------------- FDCAN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) ==
100068ec:	f507 7312 	add.w	r3, r7, #584	; 0x248
100068f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100068f4:	681b      	ldr	r3, [r3, #0]
100068f6:	e9d3 2300 	ldrd	r2, r3, [r3]
100068fa:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
100068fe:	67bb      	str	r3, [r7, #120]	; 0x78
10006900:	2300      	movs	r3, #0
10006902:	67fb      	str	r3, [r7, #124]	; 0x7c
10006904:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
10006908:	460b      	mov	r3, r1
1000690a:	4313      	orrs	r3, r2
1000690c:	d07e      	beq.n	10006a0c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      RCC_PERIPHCLK_FDCAN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
1000690e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006912:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006916:	681b      	ldr	r3, [r3, #0]
10006918:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
1000691c:	2b03      	cmp	r3, #3
1000691e:	d044      	beq.n	100069aa <HAL_RCCEx_PeriphCLKConfig+0x12be>
10006920:	2b03      	cmp	r3, #3
10006922:	d861      	bhi.n	100069e8 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
10006924:	2b01      	cmp	r3, #1
10006926:	d002      	beq.n	1000692e <HAL_RCCEx_PeriphCLKConfig+0x1242>
10006928:	2b02      	cmp	r3, #2
1000692a:	d01f      	beq.n	1000696c <HAL_RCCEx_PeriphCLKConfig+0x1280>
1000692c:	e05c      	b.n	100069e8 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
    {
      case RCC_FDCANCLKSOURCE_PLL3: /* PLL3 is used as clock source for FDCAN */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000692e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006932:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006936:	681b      	ldr	r3, [r3, #0]
10006938:	3344      	adds	r3, #68	; 0x44
1000693a:	4618      	mov	r0, r3
1000693c:	f7fe fc14 	bl	10005168 <RCCEx_PLL3_Config>
10006940:	4603      	mov	r3, r0
10006942:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006946:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000694a:	2b00      	cmp	r3, #0
1000694c:	d003      	beq.n	10006956 <HAL_RCCEx_PeriphCLKConfig+0x126a>
        {
          return status;
1000694e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006952:	f000 bd55 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006956:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000695a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000695e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006962:	f043 0320 	orr.w	r3, r3, #32
10006966:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000696a:	e03d      	b.n	100069e8 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_Q: /* PLL4_Q is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000696c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006970:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006974:	681b      	ldr	r3, [r3, #0]
10006976:	3380      	adds	r3, #128	; 0x80
10006978:	4618      	mov	r0, r3
1000697a:	f7fe fd5f 	bl	1000543c <RCCEx_PLL4_Config>
1000697e:	4603      	mov	r3, r0
10006980:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006984:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006988:	2b00      	cmp	r3, #0
1000698a:	d003      	beq.n	10006994 <HAL_RCCEx_PeriphCLKConfig+0x12a8>
        {
          return status;
1000698c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006990:	f000 bd36 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006994:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006998:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000699c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100069a0:	f043 0320 	orr.w	r3, r3, #32
100069a4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100069a8:	e01e      	b.n	100069e8 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_R: /* PLL4_R is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100069aa:	f507 7312 	add.w	r3, r7, #584	; 0x248
100069ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100069b2:	681b      	ldr	r3, [r3, #0]
100069b4:	3380      	adds	r3, #128	; 0x80
100069b6:	4618      	mov	r0, r3
100069b8:	f7fe fd40 	bl	1000543c <RCCEx_PLL4_Config>
100069bc:	4603      	mov	r3, r0
100069be:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100069c2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100069c6:	2b00      	cmp	r3, #0
100069c8:	d003      	beq.n	100069d2 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
        {
          return status;
100069ca:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100069ce:	f000 bd17 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100069d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100069d6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100069da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100069de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100069e2:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100069e6:	bf00      	nop
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
100069e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100069ec:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
100069f0:	f023 0103 	bic.w	r1, r3, #3
100069f4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100069f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100069fc:	681b      	ldr	r3, [r3, #0]
100069fe:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
10006a02:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006a06:	430b      	orrs	r3, r1
10006a08:	f8c2 390c 	str.w	r3, [r2, #2316]	; 0x90c
  }
#endif /*FDCAN1*/

  /*---------------------------- SPDIFRX configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) ==
10006a0c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006a10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006a14:	681b      	ldr	r3, [r3, #0]
10006a16:	e9d3 2300 	ldrd	r2, r3, [r3]
10006a1a:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
10006a1e:	673b      	str	r3, [r7, #112]	; 0x70
10006a20:	2300      	movs	r3, #0
10006a22:	677b      	str	r3, [r7, #116]	; 0x74
10006a24:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
10006a28:	460b      	mov	r3, r1
10006a2a:	4313      	orrs	r3, r2
10006a2c:	d05b      	beq.n	10006ae6 <HAL_RCCEx_PeriphCLKConfig+0x13fa>
      RCC_PERIPHCLK_SPDIFRX)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
10006a2e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006a32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006a36:	681b      	ldr	r3, [r3, #0]
10006a38:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
10006a3c:	2b00      	cmp	r3, #0
10006a3e:	d002      	beq.n	10006a46 <HAL_RCCEx_PeriphCLKConfig+0x135a>
10006a40:	2b01      	cmp	r3, #1
10006a42:	d01f      	beq.n	10006a84 <HAL_RCCEx_PeriphCLKConfig+0x1398>
10006a44:	e03d      	b.n	10006ac2 <HAL_RCCEx_PeriphCLKConfig+0x13d6>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL4: /* PLL4 is used as clock source for SPDIF */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006a46:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006a4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006a4e:	681b      	ldr	r3, [r3, #0]
10006a50:	3380      	adds	r3, #128	; 0x80
10006a52:	4618      	mov	r0, r3
10006a54:	f7fe fcf2 	bl	1000543c <RCCEx_PLL4_Config>
10006a58:	4603      	mov	r3, r0
10006a5a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006a5e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006a62:	2b00      	cmp	r3, #0
10006a64:	d003      	beq.n	10006a6e <HAL_RCCEx_PeriphCLKConfig+0x1382>
        {
          return status;
10006a66:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006a6a:	f000 bcc9 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006a6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006a72:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006a76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006a7a:	f043 0310 	orr.w	r3, r3, #16
10006a7e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006a82:	e01e      	b.n	10006ac2 <HAL_RCCEx_PeriphCLKConfig+0x13d6>

      case RCC_SPDIFRXCLKSOURCE_PLL3: /* PLL3 is used as clock source for SPDIF */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006a84:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006a88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006a8c:	681b      	ldr	r3, [r3, #0]
10006a8e:	3344      	adds	r3, #68	; 0x44
10006a90:	4618      	mov	r0, r3
10006a92:	f7fe fb69 	bl	10005168 <RCCEx_PLL3_Config>
10006a96:	4603      	mov	r3, r0
10006a98:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006a9c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006aa0:	2b00      	cmp	r3, #0
10006aa2:	d003      	beq.n	10006aac <HAL_RCCEx_PeriphCLKConfig+0x13c0>
        {
          return status;
10006aa4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006aa8:	f000 bcaa 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006aac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006ab0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006ab4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006ab8:	f043 0320 	orr.w	r3, r3, #32
10006abc:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006ac0:	bf00      	nop
    }

    /* Set the source of SPDIF clock*/
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
10006ac2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006ac6:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
10006aca:	f023 0103 	bic.w	r1, r3, #3
10006ace:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006ad2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006ad6:	681b      	ldr	r3, [r3, #0]
10006ad8:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
10006adc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006ae0:	430b      	orrs	r3, r1
10006ae2:	f8c2 3914 	str.w	r3, [r2, #2324]	; 0x914
  }

  /*---------------------------- CEC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) ==
10006ae6:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006aea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006aee:	681b      	ldr	r3, [r3, #0]
10006af0:	e9d3 2300 	ldrd	r2, r3, [r3]
10006af4:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
10006af8:	66bb      	str	r3, [r7, #104]	; 0x68
10006afa:	2300      	movs	r3, #0
10006afc:	66fb      	str	r3, [r7, #108]	; 0x6c
10006afe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
10006b02:	460b      	mov	r3, r1
10006b04:	4313      	orrs	r3, r2
10006b06:	d011      	beq.n	10006b2c <HAL_RCCEx_PeriphCLKConfig+0x1440>
      RCC_PERIPHCLK_CEC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
10006b08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006b0c:	f8d3 3918 	ldr.w	r3, [r3, #2328]	; 0x918
10006b10:	f023 0103 	bic.w	r1, r3, #3
10006b14:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006b18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006b1c:	681b      	ldr	r3, [r3, #0]
10006b1e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
10006b22:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006b26:	430b      	orrs	r3, r1
10006b28:	f8c2 3918 	str.w	r3, [r2, #2328]	; 0x918
  }

  /*---------------------------- USBPHY configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) ==
10006b2c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006b30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006b34:	681b      	ldr	r3, [r3, #0]
10006b36:	e9d3 2300 	ldrd	r2, r3, [r3]
10006b3a:	f402 7300 	and.w	r3, r2, #512	; 0x200
10006b3e:	663b      	str	r3, [r7, #96]	; 0x60
10006b40:	2300      	movs	r3, #0
10006b42:	667b      	str	r3, [r7, #100]	; 0x64
10006b44:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
10006b48:	460b      	mov	r3, r1
10006b4a:	4313      	orrs	r3, r2
10006b4c:	d038      	beq.n	10006bc0 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
      RCC_PERIPHCLK_USBPHY)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(PeriphClkInit->UsbphyClockSelection));

    if (PeriphClkInit->UsbphyClockSelection == RCC_USBPHYCLKSOURCE_PLL4)
10006b4e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006b52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006b56:	681b      	ldr	r3, [r3, #0]
10006b58:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
10006b5c:	2b01      	cmp	r3, #1
10006b5e:	d11d      	bne.n	10006b9c <HAL_RCCEx_PeriphCLKConfig+0x14b0>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006b60:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006b64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006b68:	681b      	ldr	r3, [r3, #0]
10006b6a:	3380      	adds	r3, #128	; 0x80
10006b6c:	4618      	mov	r0, r3
10006b6e:	f7fe fc65 	bl	1000543c <RCCEx_PLL4_Config>
10006b72:	4603      	mov	r3, r0
10006b74:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10006b78:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006b7c:	2b00      	cmp	r3, #0
10006b7e:	d003      	beq.n	10006b88 <HAL_RCCEx_PeriphCLKConfig+0x149c>
      {
        return status;
10006b80:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006b84:	f000 bc3c 	b.w	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB PHY Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10006b88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006b8c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006b90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006b98:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_USBPHY_CONFIG(PeriphClkInit->UsbphyClockSelection);
10006b9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006ba0:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
10006ba4:	f023 0103 	bic.w	r1, r3, #3
10006ba8:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006bac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006bb0:	681b      	ldr	r3, [r3, #0]
10006bb2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
10006bb6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006bba:	430b      	orrs	r3, r1
10006bbc:	f8c2 391c 	str.w	r3, [r2, #2332]	; 0x91c
  }

  /*---------------------------- USBO configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBO) ==
10006bc0:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006bc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006bc8:	681b      	ldr	r3, [r3, #0]
10006bca:	e9d3 2300 	ldrd	r2, r3, [r3]
10006bce:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
10006bd2:	65bb      	str	r3, [r7, #88]	; 0x58
10006bd4:	2300      	movs	r3, #0
10006bd6:	65fb      	str	r3, [r7, #92]	; 0x5c
10006bd8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
10006bdc:	460b      	mov	r3, r1
10006bde:	4313      	orrs	r3, r2
10006be0:	d037      	beq.n	10006c52 <HAL_RCCEx_PeriphCLKConfig+0x1566>
      RCC_PERIPHCLK_USBO)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOCLKSOURCE(PeriphClkInit->UsboClockSelection));

    if (PeriphClkInit->UsboClockSelection == RCC_USBOCLKSOURCE_PLL4)
10006be2:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006be6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006bea:	681b      	ldr	r3, [r3, #0]
10006bec:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
10006bf0:	2b00      	cmp	r3, #0
10006bf2:	d11c      	bne.n	10006c2e <HAL_RCCEx_PeriphCLKConfig+0x1542>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006bf4:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006bf8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006bfc:	681b      	ldr	r3, [r3, #0]
10006bfe:	3380      	adds	r3, #128	; 0x80
10006c00:	4618      	mov	r0, r3
10006c02:	f7fe fc1b 	bl	1000543c <RCCEx_PLL4_Config>
10006c06:	4603      	mov	r3, r0
10006c08:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10006c0c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006c10:	2b00      	cmp	r3, #0
10006c12:	d002      	beq.n	10006c1a <HAL_RCCEx_PeriphCLKConfig+0x152e>
      {
        return status;
10006c14:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006c18:	e3f2      	b.n	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB OTG Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10006c1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006c1e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006c22:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006c2a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_USBO_CONFIG(PeriphClkInit->UsboClockSelection);
10006c2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006c32:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
10006c36:	f023 0110 	bic.w	r1, r3, #16
10006c3a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006c3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006c42:	681b      	ldr	r3, [r3, #0]
10006c44:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
10006c48:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006c4c:	430b      	orrs	r3, r1
10006c4e:	f8c2 391c 	str.w	r3, [r2, #2332]	; 0x91c
  }

  /*---------------------------- RNG1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG1) ==
10006c52:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006c56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006c5a:	681b      	ldr	r3, [r3, #0]
10006c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
10006c60:	2100      	movs	r1, #0
10006c62:	6539      	str	r1, [r7, #80]	; 0x50
10006c64:	f003 0304 	and.w	r3, r3, #4
10006c68:	657b      	str	r3, [r7, #84]	; 0x54
10006c6a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
10006c6e:	460b      	mov	r3, r1
10006c70:	4313      	orrs	r3, r2
10006c72:	d037      	beq.n	10006ce4 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
      RCC_PERIPHCLK_RNG1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG1CLKSOURCE(PeriphClkInit->Rng1ClockSelection));

    if (PeriphClkInit->Rng1ClockSelection == RCC_RNG1CLKSOURCE_PLL4)
10006c74:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006c78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006c7c:	681b      	ldr	r3, [r3, #0]
10006c7e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
10006c82:	2b01      	cmp	r3, #1
10006c84:	d11c      	bne.n	10006cc0 <HAL_RCCEx_PeriphCLKConfig+0x15d4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006c86:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006c8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006c8e:	681b      	ldr	r3, [r3, #0]
10006c90:	3380      	adds	r3, #128	; 0x80
10006c92:	4618      	mov	r0, r3
10006c94:	f7fe fbd2 	bl	1000543c <RCCEx_PLL4_Config>
10006c98:	4603      	mov	r3, r0
10006c9a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10006c9e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006ca2:	2b00      	cmp	r3, #0
10006ca4:	d002      	beq.n	10006cac <HAL_RCCEx_PeriphCLKConfig+0x15c0>
      {
        return status;
10006ca6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006caa:	e3a9      	b.n	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG1 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10006cac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006cb0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006cb4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006cbc:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of RNG1 clock*/
    __HAL_RCC_RNG1_CONFIG(PeriphClkInit->Rng1ClockSelection);
10006cc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006cc4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
10006cc8:	f023 0103 	bic.w	r1, r3, #3
10006ccc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006cd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006cd4:	681b      	ldr	r3, [r3, #0]
10006cd6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
10006cda:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006cde:	430b      	orrs	r3, r1
10006ce0:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
  }

  /*---------------------------- RNG2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG2) ==
10006ce4:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006ce8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006cec:	681b      	ldr	r3, [r3, #0]
10006cee:	e9d3 2300 	ldrd	r2, r3, [r3]
10006cf2:	2100      	movs	r1, #0
10006cf4:	64b9      	str	r1, [r7, #72]	; 0x48
10006cf6:	f003 0308 	and.w	r3, r3, #8
10006cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
10006cfc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
10006d00:	460b      	mov	r3, r1
10006d02:	4313      	orrs	r3, r2
10006d04:	d037      	beq.n	10006d76 <HAL_RCCEx_PeriphCLKConfig+0x168a>
      RCC_PERIPHCLK_RNG2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG2CLKSOURCE(PeriphClkInit->Rng2ClockSelection));

    if (PeriphClkInit->Rng2ClockSelection == RCC_RNG2CLKSOURCE_PLL4)
10006d06:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006d0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006d0e:	681b      	ldr	r3, [r3, #0]
10006d10:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
10006d14:	2b01      	cmp	r3, #1
10006d16:	d11c      	bne.n	10006d52 <HAL_RCCEx_PeriphCLKConfig+0x1666>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006d18:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006d1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006d20:	681b      	ldr	r3, [r3, #0]
10006d22:	3380      	adds	r3, #128	; 0x80
10006d24:	4618      	mov	r0, r3
10006d26:	f7fe fb89 	bl	1000543c <RCCEx_PLL4_Config>
10006d2a:	4603      	mov	r3, r0
10006d2c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10006d30:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006d34:	2b00      	cmp	r3, #0
10006d36:	d002      	beq.n	10006d3e <HAL_RCCEx_PeriphCLKConfig+0x1652>
      {
        return status;
10006d38:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006d3c:	e360      	b.n	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG2 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10006d3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006d42:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006d46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006d4e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of RNG2 clock*/
    __HAL_RCC_RNG2_CONFIG(PeriphClkInit->Rng2ClockSelection);
10006d52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006d56:	f8d3 3920 	ldr.w	r3, [r3, #2336]	; 0x920
10006d5a:	f023 0103 	bic.w	r1, r3, #3
10006d5e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006d62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006d66:	681b      	ldr	r3, [r3, #0]
10006d68:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
10006d6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006d70:	430b      	orrs	r3, r1
10006d72:	f8c2 3920 	str.w	r3, [r2, #2336]	; 0x920
  }

  /*---------------------------- STGEN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_STGEN) ==
10006d76:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006d7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006d7e:	681b      	ldr	r3, [r3, #0]
10006d80:	e9d3 2300 	ldrd	r2, r3, [r3]
10006d84:	2100      	movs	r1, #0
10006d86:	6439      	str	r1, [r7, #64]	; 0x40
10006d88:	f003 0310 	and.w	r3, r3, #16
10006d8c:	647b      	str	r3, [r7, #68]	; 0x44
10006d8e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
10006d92:	460b      	mov	r3, r1
10006d94:	4313      	orrs	r3, r2
10006d96:	d011      	beq.n	10006dbc <HAL_RCCEx_PeriphCLKConfig+0x16d0>
      RCC_PERIPHCLK_STGEN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_STGENCLKSOURCE(PeriphClkInit->StgenClockSelection));

    __HAL_RCC_STGEN_CONFIG(PeriphClkInit->StgenClockSelection);
10006d98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006d9c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
10006da0:	f023 0103 	bic.w	r1, r3, #3
10006da4:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006da8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006dac:	681b      	ldr	r3, [r3, #0]
10006dae:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
10006db2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006db6:	430b      	orrs	r3, r1
10006db8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  }

#if defined(DSI)
  /*---------------------------- DSI configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) ==
10006dbc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006dc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006dc4:	681b      	ldr	r3, [r3, #0]
10006dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
10006dca:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
10006dce:	63bb      	str	r3, [r7, #56]	; 0x38
10006dd0:	2300      	movs	r3, #0
10006dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
10006dd4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
10006dd8:	460b      	mov	r3, r1
10006dda:	4313      	orrs	r3, r2
10006ddc:	d037      	beq.n	10006e4e <HAL_RCCEx_PeriphCLKConfig+0x1762>
      RCC_PERIPHCLK_DSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    if (PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL4)
10006dde:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006de2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006de6:	681b      	ldr	r3, [r3, #0]
10006de8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
10006dec:	2b01      	cmp	r3, #1
10006dee:	d11c      	bne.n	10006e2a <HAL_RCCEx_PeriphCLKConfig+0x173e>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006df0:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006df4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006df8:	681b      	ldr	r3, [r3, #0]
10006dfa:	3380      	adds	r3, #128	; 0x80
10006dfc:	4618      	mov	r0, r3
10006dfe:	f7fe fb1d 	bl	1000543c <RCCEx_PLL4_Config>
10006e02:	4603      	mov	r3, r0
10006e04:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10006e08:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006e0c:	2b00      	cmp	r3, #0
10006e0e:	d002      	beq.n	10006e16 <HAL_RCCEx_PeriphCLKConfig+0x172a>
      {
        return status;
10006e10:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006e14:	e2f4      	b.n	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable DSI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006e16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006e1a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006e1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006e22:	f043 0310 	orr.w	r3, r3, #16
10006e26:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
10006e2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006e2e:	f8d3 3924 	ldr.w	r3, [r3, #2340]	; 0x924
10006e32:	f023 0101 	bic.w	r1, r3, #1
10006e36:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006e3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006e3e:	681b      	ldr	r3, [r3, #0]
10006e40:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
10006e44:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006e48:	430b      	orrs	r3, r1
10006e4a:	f8c2 3924 	str.w	r3, [r2, #2340]	; 0x924
  }
#endif /*DSI*/

  /*---------------------------- ADC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) ==
10006e4e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006e52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006e56:	681b      	ldr	r3, [r3, #0]
10006e58:	e9d3 2300 	ldrd	r2, r3, [r3]
10006e5c:	f002 0308 	and.w	r3, r2, #8
10006e60:	633b      	str	r3, [r7, #48]	; 0x30
10006e62:	2300      	movs	r3, #0
10006e64:	637b      	str	r3, [r7, #52]	; 0x34
10006e66:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
10006e6a:	460b      	mov	r3, r1
10006e6c:	4313      	orrs	r3, r2
10006e6e:	d059      	beq.n	10006f24 <HAL_RCCEx_PeriphCLKConfig+0x1838>
      RCC_PERIPHCLK_ADC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
10006e70:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006e74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006e78:	681b      	ldr	r3, [r3, #0]
10006e7a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10006e7e:	2b00      	cmp	r3, #0
10006e80:	d002      	beq.n	10006e88 <HAL_RCCEx_PeriphCLKConfig+0x179c>
10006e82:	2b02      	cmp	r3, #2
10006e84:	d01e      	beq.n	10006ec4 <HAL_RCCEx_PeriphCLKConfig+0x17d8>
10006e86:	e03b      	b.n	10006f00 <HAL_RCCEx_PeriphCLKConfig+0x1814>
    {
      case RCC_ADCCLKSOURCE_PLL4: /* PLL4 is used as clock source for ADC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006e88:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006e8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006e90:	681b      	ldr	r3, [r3, #0]
10006e92:	3380      	adds	r3, #128	; 0x80
10006e94:	4618      	mov	r0, r3
10006e96:	f7fe fad1 	bl	1000543c <RCCEx_PLL4_Config>
10006e9a:	4603      	mov	r3, r0
10006e9c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006ea0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006ea4:	2b00      	cmp	r3, #0
10006ea6:	d002      	beq.n	10006eae <HAL_RCCEx_PeriphCLKConfig+0x17c2>
        {
          return status;
10006ea8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006eac:	e2a8      	b.n	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10006eae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006eb2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006eb6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006ebe:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
10006ec2:	e01d      	b.n	10006f00 <HAL_RCCEx_PeriphCLKConfig+0x1814>

      case RCC_ADCCLKSOURCE_PLL3: /* PLL3 is used as clock source for ADC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006ec4:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006ec8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006ecc:	681b      	ldr	r3, [r3, #0]
10006ece:	3344      	adds	r3, #68	; 0x44
10006ed0:	4618      	mov	r0, r3
10006ed2:	f7fe f949 	bl	10005168 <RCCEx_PLL3_Config>
10006ed6:	4603      	mov	r3, r0
10006ed8:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006edc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006ee0:	2b00      	cmp	r3, #0
10006ee2:	d002      	beq.n	10006eea <HAL_RCCEx_PeriphCLKConfig+0x17fe>
        {
          return status;
10006ee4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006ee8:	e28a      	b.n	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006eea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006eee:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006ef2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006ef6:	f043 0320 	orr.w	r3, r3, #32
10006efa:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006efe:	bf00      	nop
    }

    /* Set the source of ADC clock*/
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
10006f00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006f04:	f8d3 3928 	ldr.w	r3, [r3, #2344]	; 0x928
10006f08:	f023 0103 	bic.w	r1, r3, #3
10006f0c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006f10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006f14:	681b      	ldr	r3, [r3, #0]
10006f16:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10006f1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006f1e:	430b      	orrs	r3, r1
10006f20:	f8c2 3928 	str.w	r3, [r2, #2344]	; 0x928
  }

  /*---------------------------- LPTIM45 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM45) ==
10006f24:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006f28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006f2c:	681b      	ldr	r3, [r3, #0]
10006f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
10006f32:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
10006f36:	62bb      	str	r3, [r7, #40]	; 0x28
10006f38:	2300      	movs	r3, #0
10006f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
10006f3c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
10006f40:	460b      	mov	r3, r1
10006f42:	4313      	orrs	r3, r2
10006f44:	d058      	beq.n	10006ff8 <HAL_RCCEx_PeriphCLKConfig+0x190c>
      RCC_PERIPHCLK_LPTIM45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM45CLKSOURCE(PeriphClkInit->Lptim45ClockSelection));

    switch (PeriphClkInit->Lptim45ClockSelection)
10006f46:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006f4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006f4e:	681b      	ldr	r3, [r3, #0]
10006f50:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10006f54:	2b01      	cmp	r3, #1
10006f56:	d01f      	beq.n	10006f98 <HAL_RCCEx_PeriphCLKConfig+0x18ac>
10006f58:	2b02      	cmp	r3, #2
10006f5a:	d13b      	bne.n	10006fd4 <HAL_RCCEx_PeriphCLKConfig+0x18e8>
    {
      case RCC_LPTIM45CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPTIM45 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006f5c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006f60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006f64:	681b      	ldr	r3, [r3, #0]
10006f66:	3344      	adds	r3, #68	; 0x44
10006f68:	4618      	mov	r0, r3
10006f6a:	f7fe f8fd 	bl	10005168 <RCCEx_PLL3_Config>
10006f6e:	4603      	mov	r3, r0
10006f70:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006f74:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006f78:	2b00      	cmp	r3, #0
10006f7a:	d002      	beq.n	10006f82 <HAL_RCCEx_PeriphCLKConfig+0x1896>
        {
          return status;
10006f7c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006f80:	e23e      	b.n	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006f82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006f86:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006f8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006f8e:	f043 0320 	orr.w	r3, r3, #32
10006f92:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006f96:	e01d      	b.n	10006fd4 <HAL_RCCEx_PeriphCLKConfig+0x18e8>

      case RCC_LPTIM45CLKSOURCE_PLL4: /* PLL4 is used as clock source for LPTIM45 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006f98:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006f9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006fa0:	681b      	ldr	r3, [r3, #0]
10006fa2:	3380      	adds	r3, #128	; 0x80
10006fa4:	4618      	mov	r0, r3
10006fa6:	f7fe fa49 	bl	1000543c <RCCEx_PLL4_Config>
10006faa:	4603      	mov	r3, r0
10006fac:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006fb0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006fb4:	2b00      	cmp	r3, #0
10006fb6:	d002      	beq.n	10006fbe <HAL_RCCEx_PeriphCLKConfig+0x18d2>
        {
          return status;
10006fb8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006fbc:	e220      	b.n	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006fbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006fc2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006fc6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006fca:	f043 0310 	orr.w	r3, r3, #16
10006fce:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006fd2:	bf00      	nop
    }

    /* Set the source of LPTIM45 clock*/
    __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
10006fd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006fd8:	f8d3 392c 	ldr.w	r3, [r3, #2348]	; 0x92c
10006fdc:	f023 0207 	bic.w	r2, r3, #7
10006fe0:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006fe4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006fe8:	681b      	ldr	r3, [r3, #0]
10006fea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10006fee:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10006ff2:	4313      	orrs	r3, r2
10006ff4:	f8c1 392c 	str.w	r3, [r1, #2348]	; 0x92c
  }

  /*---------------------------- LPTIM23 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM23) ==
10006ff8:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006ffc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007000:	681b      	ldr	r3, [r3, #0]
10007002:	e9d3 2300 	ldrd	r2, r3, [r3]
10007006:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
1000700a:	623b      	str	r3, [r7, #32]
1000700c:	2300      	movs	r3, #0
1000700e:	627b      	str	r3, [r7, #36]	; 0x24
10007010:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
10007014:	460b      	mov	r3, r1
10007016:	4313      	orrs	r3, r2
10007018:	d037      	beq.n	1000708a <HAL_RCCEx_PeriphCLKConfig+0x199e>
      RCC_PERIPHCLK_LPTIM23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM23CLKSOURCE(PeriphClkInit->Lptim23ClockSelection));

    if (PeriphClkInit->Lptim23ClockSelection == RCC_LPTIM23CLKSOURCE_PLL4)
1000701a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000701e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007022:	681b      	ldr	r3, [r3, #0]
10007024:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
10007028:	2b01      	cmp	r3, #1
1000702a:	d11c      	bne.n	10007066 <HAL_RCCEx_PeriphCLKConfig+0x197a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000702c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007030:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007034:	681b      	ldr	r3, [r3, #0]
10007036:	3380      	adds	r3, #128	; 0x80
10007038:	4618      	mov	r0, r3
1000703a:	f7fe f9ff 	bl	1000543c <RCCEx_PLL4_Config>
1000703e:	4603      	mov	r3, r0
10007040:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10007044:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007048:	2b00      	cmp	r3, #0
1000704a:	d002      	beq.n	10007052 <HAL_RCCEx_PeriphCLKConfig+0x1966>
      {
        return status;
1000704c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007050:	e1d6      	b.n	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10007052:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007056:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000705a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000705e:	f043 0320 	orr.w	r3, r3, #32
10007062:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of LPTIM23 clock*/
    __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
10007066:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000706a:	f8d3 3930 	ldr.w	r3, [r3, #2352]	; 0x930
1000706e:	f023 0207 	bic.w	r2, r3, #7
10007072:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007076:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000707a:	681b      	ldr	r3, [r3, #0]
1000707c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
10007080:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10007084:	4313      	orrs	r3, r2
10007086:	f8c1 3930 	str.w	r3, [r1, #2352]	; 0x930
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) ==
1000708a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000708e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007092:	681b      	ldr	r3, [r3, #0]
10007094:	e9d3 2300 	ldrd	r2, r3, [r3]
10007098:	f002 0340 	and.w	r3, r2, #64	; 0x40
1000709c:	61bb      	str	r3, [r7, #24]
1000709e:	2300      	movs	r3, #0
100070a0:	61fb      	str	r3, [r7, #28]
100070a2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
100070a6:	460b      	mov	r3, r1
100070a8:	4313      	orrs	r3, r2
100070aa:	d058      	beq.n	1000715e <HAL_RCCEx_PeriphCLKConfig+0x1a72>
      RCC_PERIPHCLK_LPTIM1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
100070ac:	f507 7312 	add.w	r3, r7, #584	; 0x248
100070b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100070b4:	681b      	ldr	r3, [r3, #0]
100070b6:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
100070ba:	2b01      	cmp	r3, #1
100070bc:	d01f      	beq.n	100070fe <HAL_RCCEx_PeriphCLKConfig+0x1a12>
100070be:	2b02      	cmp	r3, #2
100070c0:	d13b      	bne.n	1000713a <HAL_RCCEx_PeriphCLKConfig+0x1a4e>
    {
      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100070c2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100070c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100070ca:	681b      	ldr	r3, [r3, #0]
100070cc:	3344      	adds	r3, #68	; 0x44
100070ce:	4618      	mov	r0, r3
100070d0:	f7fe f84a 	bl	10005168 <RCCEx_PLL3_Config>
100070d4:	4603      	mov	r3, r0
100070d6:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100070da:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100070de:	2b00      	cmp	r3, #0
100070e0:	d002      	beq.n	100070e8 <HAL_RCCEx_PeriphCLKConfig+0x19fc>
        {
          return status;
100070e2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100070e6:	e18b      	b.n	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100070e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100070ec:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100070f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100070f4:	f043 0320 	orr.w	r3, r3, #32
100070f8:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100070fc:	e01d      	b.n	1000713a <HAL_RCCEx_PeriphCLKConfig+0x1a4e>

      case RCC_LPTIM1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for LPTIM1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100070fe:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007102:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007106:	681b      	ldr	r3, [r3, #0]
10007108:	3380      	adds	r3, #128	; 0x80
1000710a:	4618      	mov	r0, r3
1000710c:	f7fe f996 	bl	1000543c <RCCEx_PLL4_Config>
10007110:	4603      	mov	r3, r0
10007112:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007116:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000711a:	2b00      	cmp	r3, #0
1000711c:	d002      	beq.n	10007124 <HAL_RCCEx_PeriphCLKConfig+0x1a38>
        {
          return status;
1000711e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007122:	e16d      	b.n	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10007124:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007128:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000712c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007130:	f043 0310 	orr.w	r3, r3, #16
10007134:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10007138:	bf00      	nop
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
1000713a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000713e:	f8d3 3934 	ldr.w	r3, [r3, #2356]	; 0x934
10007142:	f023 0207 	bic.w	r2, r3, #7
10007146:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000714a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000714e:	681b      	ldr	r3, [r3, #0]
10007150:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
10007154:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10007158:	4313      	orrs	r3, r2
1000715a:	f8c1 3934 	str.w	r3, [r1, #2356]	; 0x934
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) ==
1000715e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007162:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007166:	681b      	ldr	r3, [r3, #0]
10007168:	e9d3 2300 	ldrd	r2, r3, [r3]
1000716c:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
10007170:	613b      	str	r3, [r7, #16]
10007172:	2300      	movs	r3, #0
10007174:	617b      	str	r3, [r7, #20]
10007176:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
1000717a:	460b      	mov	r3, r1
1000717c:	4313      	orrs	r3, r2
1000717e:	f000 80c6 	beq.w	1000730e <HAL_RCCEx_PeriphCLKConfig+0x1c22>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
10007182:	4ba2      	ldr	r3, [pc, #648]	; (1000740c <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
10007184:	681b      	ldr	r3, [r3, #0]
10007186:	4aa1      	ldr	r2, [pc, #644]	; (1000740c <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
10007188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1000718c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
1000718e:	f7f9 fe1f 	bl	10000dd0 <HAL_GetTick>
10007192:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10007196:	e00a      	b.n	100071ae <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10007198:	f7f9 fe1a 	bl	10000dd0 <HAL_GetTick>
1000719c:	4602      	mov	r2, r0
1000719e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
100071a2:	1ad3      	subs	r3, r2, r3
100071a4:	2b64      	cmp	r3, #100	; 0x64
100071a6:	d902      	bls.n	100071ae <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
      {
        ret = HAL_TIMEOUT;
100071a8:	2303      	movs	r3, #3
100071aa:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100071ae:	4b97      	ldr	r3, [pc, #604]	; (1000740c <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
100071b0:	681b      	ldr	r3, [r3, #0]
100071b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
100071b6:	2b00      	cmp	r3, #0
100071b8:	d0ee      	beq.n	10007198 <HAL_RCCEx_PeriphCLKConfig+0x1aac>
      }
    }

    if (ret == HAL_OK)
100071ba:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
100071be:	2b00      	cmp	r3, #0
100071c0:	f040 80a2 	bne.w	10007308 <HAL_RCCEx_PeriphCLKConfig+0x1c1c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSRC) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSRC))
100071c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100071c8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
100071cc:	f507 7312 	add.w	r3, r7, #584	; 0x248
100071d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100071d4:	681b      	ldr	r3, [r3, #0]
100071d6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
100071da:	4053      	eors	r3, r2
100071dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
100071e0:	2b00      	cmp	r3, #0
100071e2:	f000 8086 	beq.w	100072f2 <HAL_RCCEx_PeriphCLKConfig+0x1c06>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSRC));
100071e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100071ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100071ee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
100071f2:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
100071f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100071fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100071fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007202:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
10007206:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        __HAL_RCC_BACKUPRESET_RELEASE();
1000720a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000720e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10007212:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007216:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
1000721a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

        /* Set the LSEDrive value */
        __HAL_RCC_LSEDRIVE_CONFIG(tmpreg & RCC_BDCR_LSEDRV);
1000721e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007222:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10007226:	f023 0230 	bic.w	r2, r3, #48	; 0x30
1000722a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
1000722e:	f003 0330 	and.w	r3, r3, #48	; 0x30
10007232:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10007236:	4313      	orrs	r3, r2
10007238:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

        /* RCC_BDCR_LSEON can be enabled for RTC or another IP, re-enable it */
        RCC_OscInitTypeDef RCC_OscInitStructure;
        /* Configure LSE Oscillator*/
        RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_LSE;
1000723c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007240:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
10007244:	2204      	movs	r2, #4
10007246:	601a      	str	r2, [r3, #0]
        RCC_OscInitStructure.LSEState = (tmpreg & LSE_MASK);
10007248:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
1000724c:	f003 020b 	and.w	r2, r3, #11
10007250:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007254:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
10007258:	609a      	str	r2, [r3, #8]

        RCC_OscInitStructure.PLL.PLLState = RCC_PLL_NONE;
1000725a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000725e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
10007262:	2200      	movs	r2, #0
10007264:	625a      	str	r2, [r3, #36]	; 0x24
        RCC_OscInitStructure.PLL2.PLLState = RCC_PLL_NONE;
10007266:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000726a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
1000726e:	2200      	movs	r2, #0
10007270:	661a      	str	r2, [r3, #96]	; 0x60
        RCC_OscInitStructure.PLL3.PLLState = RCC_PLL_NONE;
10007272:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007276:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
1000727a:	2200      	movs	r2, #0
1000727c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        RCC_OscInitStructure.PLL4.PLLState = RCC_PLL_NONE;
10007280:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007284:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
10007288:	2200      	movs	r2, #0
1000728a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
        ret = HAL_RCC_OscConfig(&RCC_OscInitStructure);
1000728e:	f507 7390 	add.w	r3, r7, #288	; 0x120
10007292:	4618      	mov	r0, r3
10007294:	f7fc f90e 	bl	100034b4 <HAL_RCC_OscConfig>
10007298:	4603      	mov	r3, r0
1000729a:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
        if (ret != HAL_OK)
1000729e:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
100072a2:	2b00      	cmp	r3, #0
100072a4:	d002      	beq.n	100072ac <HAL_RCCEx_PeriphCLKConfig+0x1bc0>
        {
          return ret;
100072a6:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
100072aa:	e0a9      	b.n	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }

        /* Write the RTCSRC */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
100072ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100072b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100072b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
100072b8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100072bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100072c0:	681b      	ldr	r3, [r3, #0]
100072c2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
100072c6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100072ca:	4313      	orrs	r3, r2
100072cc:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

        /* Fill up Reserved register mask for BDCR
         * All already filled up or what shouldn't be modified must be put on the mask */
        RESERVED_BDCR_MASK = ~(RCC_BDCR_VSWRST | RCC_BDCR_RTCCKEN | RCC_BDCR_RTCSRC |
100072d0:	4b4f      	ldr	r3, [pc, #316]	; (10007410 <HAL_RCCEx_PeriphCLKConfig+0x1d24>)
100072d2:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
                               RCC_BDCR_LSECSSD | RCC_BDCR_LSEDRV | RCC_BDCR_DIGBYP |
                               RCC_BDCR_LSERDY | RCC_BDCR_LSEBYP | RCC_BDCR_LSEON);

        /* Restore the BDCR context: RESERVED registers plus RCC_BDCR_LSECSSON */
        WRITE_REG(RCC->BDCR, (READ_REG(RCC->BDCR) | (tmpreg & RESERVED_BDCR_MASK)));
100072d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100072da:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
100072de:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
100072e2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
100072e6:	400b      	ands	r3, r1
100072e8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100072ec:	4313      	orrs	r3, r2
100072ee:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

      }/* End RTCSRC changed */

      /*Enable RTC clock   */
      __HAL_RCC_RTC_ENABLE();
100072f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100072f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100072fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100072fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
10007302:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
10007306:	e002      	b.n	1000730e <HAL_RCCEx_PeriphCLKConfig+0x1c22>
    }
    else
    {
      // Enable write access to Backup domain failed
      /* return the error */
      return ret;
10007308:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
1000730c:	e078      	b.n	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    }
  }

  /*---------------------------- TIMG1 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG1) ==
1000730e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007312:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007316:	681b      	ldr	r3, [r3, #0]
10007318:	e9d3 2300 	ldrd	r2, r3, [r3]
1000731c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
10007320:	60bb      	str	r3, [r7, #8]
10007322:	2300      	movs	r3, #0
10007324:	60fb      	str	r3, [r7, #12]
10007326:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
1000732a:	460b      	mov	r3, r1
1000732c:	4313      	orrs	r3, r2
1000732e:	d02a      	beq.n	10007386 <HAL_RCCEx_PeriphCLKConfig+0x1c9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection);
10007330:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007334:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
10007338:	f023 0201 	bic.w	r2, r3, #1
1000733c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007340:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007344:	681b      	ldr	r3, [r3, #0]
10007346:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
1000734a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000734e:	4313      	orrs	r3, r2
10007350:	f8c1 3828 	str.w	r3, [r1, #2088]	; 0x828

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10007354:	f7f9 fd3c 	bl	10000dd0 <HAL_GetTick>
10007358:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
1000735c:	e00a      	b.n	10007374 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000735e:	f7f9 fd37 	bl	10000dd0 <HAL_GetTick>
10007362:	4602      	mov	r2, r0
10007364:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
10007368:	1ad3      	subs	r3, r2, r3
1000736a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000736e:	d901      	bls.n	10007374 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
      {
        return HAL_TIMEOUT;
10007370:	2303      	movs	r3, #3
10007372:	e045      	b.n	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
10007374:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007378:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
1000737c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10007380:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10007384:	d1eb      	bne.n	1000735e <HAL_RCCEx_PeriphCLKConfig+0x1c72>
      }
    }
  }

  /*---------------------------- TIMG2 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG2) ==
10007386:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000738a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000738e:	681b      	ldr	r3, [r3, #0]
10007390:	e9d3 2300 	ldrd	r2, r3, [r3]
10007394:	f402 6300 	and.w	r3, r2, #2048	; 0x800
10007398:	603b      	str	r3, [r7, #0]
1000739a:	2300      	movs	r3, #0
1000739c:	607b      	str	r3, [r7, #4]
1000739e:	e9d7 1200 	ldrd	r1, r2, [r7]
100073a2:	460b      	mov	r3, r1
100073a4:	4313      	orrs	r3, r2
100073a6:	d02a      	beq.n	100073fe <HAL_RCCEx_PeriphCLKConfig+0x1d12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection);
100073a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100073ac:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
100073b0:	f023 0201 	bic.w	r2, r3, #1
100073b4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100073b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100073bc:	681b      	ldr	r3, [r3, #0]
100073be:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
100073c2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100073c6:	4313      	orrs	r3, r2
100073c8:	f8c1 382c 	str.w	r3, [r1, #2092]	; 0x82c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100073cc:	f7f9 fd00 	bl	10000dd0 <HAL_GetTick>
100073d0:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
100073d4:	e00a      	b.n	100073ec <HAL_RCCEx_PeriphCLKConfig+0x1d00>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100073d6:	f7f9 fcfb 	bl	10000dd0 <HAL_GetTick>
100073da:	4602      	mov	r2, r0
100073dc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
100073e0:	1ad3      	subs	r3, r2, r3
100073e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100073e6:	d901      	bls.n	100073ec <HAL_RCCEx_PeriphCLKConfig+0x1d00>
      {
        return HAL_TIMEOUT;
100073e8:	2303      	movs	r3, #3
100073ea:	e009      	b.n	10007400 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
100073ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100073f0:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
100073f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100073f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100073fc:	d1eb      	bne.n	100073d6 <HAL_RCCEx_PeriphCLKConfig+0x1cea>
      }
    }
  }

  return HAL_OK;
100073fe:	2300      	movs	r3, #0
}
10007400:	4618      	mov	r0, r3
10007402:	f507 7712 	add.w	r7, r7, #584	; 0x248
10007406:	46bd      	mov	sp, r7
10007408:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
1000740c:	50001000 	.word	0x50001000
10007410:	7fecfdc0 	.word	0x7fecfdc0

10007414 <HAL_RCCEx_GetPeriphCLKFreq>:
  *          @ref RCCEx_Periph_Clock_Selection
  *          @ref RCCEx_Periph_One_Clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
10007414:	b590      	push	{r4, r7, lr}
10007416:	b08f      	sub	sp, #60	; 0x3c
10007418:	af00      	add	r7, sp, #0
1000741a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t frequency = 0, clksource = 0;
1000741e:	2100      	movs	r1, #0
10007420:	6379      	str	r1, [r7, #52]	; 0x34
10007422:	2100      	movs	r1, #0
10007424:	6339      	str	r1, [r7, #48]	; 0x30
  PLL4_ClocksTypeDef pll4_clocks;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk) || IS_RCC_PERIPHONECLOCK(PeriphClk));

  switch (PeriphClk)
10007426:	e9d7 0100 	ldrd	r0, r1, [r7]
1000742a:	f5a1 4480 	sub.w	r4, r1, #16384	; 0x4000
1000742e:	ea50 0104 	orrs.w	r1, r0, r4
10007432:	f000 82cb 	beq.w	100079cc <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
10007436:	e9d7 0100 	ldrd	r0, r1, [r7]
1000743a:	2801      	cmp	r0, #1
1000743c:	f571 4180 	sbcs.w	r1, r1, #16384	; 0x4000
10007440:	f081 82af 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007444:	e9d7 0100 	ldrd	r0, r1, [r7]
10007448:	f5a1 5400 	sub.w	r4, r1, #8192	; 0x2000
1000744c:	ea50 0104 	orrs.w	r1, r0, r4
10007450:	f001 80f1 	beq.w	10008636 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
10007454:	e9d7 0100 	ldrd	r0, r1, [r7]
10007458:	2801      	cmp	r0, #1
1000745a:	f571 5100 	sbcs.w	r1, r1, #8192	; 0x2000
1000745e:	f081 82a0 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007462:	e9d7 0100 	ldrd	r0, r1, [r7]
10007466:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
1000746a:	ea50 0104 	orrs.w	r1, r0, r4
1000746e:	f000 8738 	beq.w	100082e2 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
10007472:	e9d7 0100 	ldrd	r0, r1, [r7]
10007476:	2801      	cmp	r0, #1
10007478:	f571 5180 	sbcs.w	r1, r1, #4096	; 0x1000
1000747c:	f081 8291 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007480:	e9d7 0100 	ldrd	r0, r1, [r7]
10007484:	f5a1 6400 	sub.w	r4, r1, #2048	; 0x800
10007488:	ea50 0104 	orrs.w	r1, r0, r4
1000748c:	f000 872d 	beq.w	100082ea <HAL_RCCEx_GetPeriphCLKFreq+0xed6>
10007490:	e9d7 0100 	ldrd	r0, r1, [r7]
10007494:	2801      	cmp	r0, #1
10007496:	f571 6100 	sbcs.w	r1, r1, #2048	; 0x800
1000749a:	f081 8282 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000749e:	e9d7 0100 	ldrd	r0, r1, [r7]
100074a2:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
100074a6:	ea50 0104 	orrs.w	r1, r0, r4
100074aa:	f000 875e 	beq.w	1000836a <HAL_RCCEx_GetPeriphCLKFreq+0xf56>
100074ae:	e9d7 0100 	ldrd	r0, r1, [r7]
100074b2:	2801      	cmp	r0, #1
100074b4:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
100074b8:	f081 8273 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100074bc:	e9d7 0100 	ldrd	r0, r1, [r7]
100074c0:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
100074c4:	ea50 0104 	orrs.w	r1, r0, r4
100074c8:	f000 86bf 	beq.w	1000824a <HAL_RCCEx_GetPeriphCLKFreq+0xe36>
100074cc:	e9d7 0100 	ldrd	r0, r1, [r7]
100074d0:	2801      	cmp	r0, #1
100074d2:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
100074d6:	f081 8264 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100074da:	e9d7 0100 	ldrd	r0, r1, [r7]
100074de:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
100074e2:	ea50 0104 	orrs.w	r1, r0, r4
100074e6:	f000 845c 	beq.w	10007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
100074ea:	e9d7 0100 	ldrd	r0, r1, [r7]
100074ee:	2801      	cmp	r0, #1
100074f0:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
100074f4:	f081 8255 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100074f8:	e9d7 0100 	ldrd	r0, r1, [r7]
100074fc:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
10007500:	ea50 0104 	orrs.w	r1, r0, r4
10007504:	f000 86bf 	beq.w	10008286 <HAL_RCCEx_GetPeriphCLKFreq+0xe72>
10007508:	e9d7 0100 	ldrd	r0, r1, [r7]
1000750c:	2801      	cmp	r0, #1
1000750e:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
10007512:	f081 8246 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007516:	e9d7 0100 	ldrd	r0, r1, [r7]
1000751a:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
1000751e:	ea50 0104 	orrs.w	r1, r0, r4
10007522:	f000 824e 	beq.w	100079c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
10007526:	e9d7 0100 	ldrd	r0, r1, [r7]
1000752a:	2801      	cmp	r0, #1
1000752c:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
10007530:	f081 8237 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007534:	e9d7 0100 	ldrd	r0, r1, [r7]
10007538:	f1a1 0420 	sub.w	r4, r1, #32
1000753c:	ea50 0104 	orrs.w	r1, r0, r4
10007540:	f000 8722 	beq.w	10008388 <HAL_RCCEx_GetPeriphCLKFreq+0xf74>
10007544:	e9d7 0100 	ldrd	r0, r1, [r7]
10007548:	2801      	cmp	r0, #1
1000754a:	f171 0120 	sbcs.w	r1, r1, #32
1000754e:	f081 8228 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007552:	e9d7 0100 	ldrd	r0, r1, [r7]
10007556:	f1a1 0410 	sub.w	r4, r1, #16
1000755a:	ea50 0104 	orrs.w	r1, r0, r4
1000755e:	f000 87c9 	beq.w	100084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
10007562:	e9d7 0100 	ldrd	r0, r1, [r7]
10007566:	2801      	cmp	r0, #1
10007568:	f171 0110 	sbcs.w	r1, r1, #16
1000756c:	f081 8219 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007570:	e9d7 0100 	ldrd	r0, r1, [r7]
10007574:	f1a1 0408 	sub.w	r4, r1, #8
10007578:	ea50 0104 	orrs.w	r1, r0, r4
1000757c:	f001 80e8 	beq.w	10008750 <HAL_RCCEx_GetPeriphCLKFreq+0x133c>
10007580:	e9d7 0100 	ldrd	r0, r1, [r7]
10007584:	2801      	cmp	r0, #1
10007586:	f171 0108 	sbcs.w	r1, r1, #8
1000758a:	f081 820a 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000758e:	e9d7 0100 	ldrd	r0, r1, [r7]
10007592:	1f0c      	subs	r4, r1, #4
10007594:	ea50 0104 	orrs.w	r1, r0, r4
10007598:	f001 8104 	beq.w	100087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1390>
1000759c:	e9d7 0100 	ldrd	r0, r1, [r7]
100075a0:	2801      	cmp	r0, #1
100075a2:	f171 0104 	sbcs.w	r1, r1, #4
100075a6:	f081 81fc 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100075aa:	e9d7 0100 	ldrd	r0, r1, [r7]
100075ae:	1e8c      	subs	r4, r1, #2
100075b0:	ea50 0104 	orrs.w	r1, r0, r4
100075b4:	f000 87ee 	beq.w	10008594 <HAL_RCCEx_GetPeriphCLKFreq+0x1180>
100075b8:	e9d7 0100 	ldrd	r0, r1, [r7]
100075bc:	2801      	cmp	r0, #1
100075be:	f171 0102 	sbcs.w	r1, r1, #2
100075c2:	f081 81ee 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100075c6:	e9d7 0100 	ldrd	r0, r1, [r7]
100075ca:	1e4c      	subs	r4, r1, #1
100075cc:	ea50 0104 	orrs.w	r1, r0, r4
100075d0:	f001 8053 	beq.w	1000867a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
100075d4:	e9d7 0100 	ldrd	r0, r1, [r7]
100075d8:	2801      	cmp	r0, #1
100075da:	f171 0101 	sbcs.w	r1, r1, #1
100075de:	f081 81e0 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100075e2:	e9d7 0100 	ldrd	r0, r1, [r7]
100075e6:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
100075ea:	4321      	orrs	r1, r4
100075ec:	f001 8104 	beq.w	100087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
100075f0:	e9d7 0100 	ldrd	r0, r1, [r7]
100075f4:	4cbd      	ldr	r4, [pc, #756]	; (100078ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>)
100075f6:	42a0      	cmp	r0, r4
100075f8:	f171 0100 	sbcs.w	r1, r1, #0
100075fc:	f081 81d1 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007600:	e9d7 0100 	ldrd	r0, r1, [r7]
10007604:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
10007608:	4321      	orrs	r1, r4
1000760a:	f000 85e3 	beq.w	100081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc0>
1000760e:	e9d7 0100 	ldrd	r0, r1, [r7]
10007612:	4cb7      	ldr	r4, [pc, #732]	; (100078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
10007614:	42a0      	cmp	r0, r4
10007616:	f171 0100 	sbcs.w	r1, r1, #0
1000761a:	f081 81c2 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000761e:	e9d7 0100 	ldrd	r0, r1, [r7]
10007622:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
10007626:	4321      	orrs	r1, r4
10007628:	f000 86e1 	beq.w	100083ee <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
1000762c:	e9d7 0100 	ldrd	r0, r1, [r7]
10007630:	4cb0      	ldr	r4, [pc, #704]	; (100078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
10007632:	42a0      	cmp	r0, r4
10007634:	f171 0100 	sbcs.w	r1, r1, #0
10007638:	f081 81b3 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000763c:	e9d7 0100 	ldrd	r0, r1, [r7]
10007640:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
10007644:	4321      	orrs	r1, r4
10007646:	f000 84db 	beq.w	10008000 <HAL_RCCEx_GetPeriphCLKFreq+0xbec>
1000764a:	e9d7 0100 	ldrd	r0, r1, [r7]
1000764e:	4caa      	ldr	r4, [pc, #680]	; (100078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
10007650:	42a0      	cmp	r0, r4
10007652:	f171 0100 	sbcs.w	r1, r1, #0
10007656:	f081 81a4 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000765a:	e9d7 0100 	ldrd	r0, r1, [r7]
1000765e:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
10007662:	4321      	orrs	r1, r4
10007664:	f000 82b0 	beq.w	10007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
10007668:	e9d7 0100 	ldrd	r0, r1, [r7]
1000766c:	4ca3      	ldr	r4, [pc, #652]	; (100078fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
1000766e:	42a0      	cmp	r0, r4
10007670:	f171 0100 	sbcs.w	r1, r1, #0
10007674:	f081 8195 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007678:	e9d7 0100 	ldrd	r0, r1, [r7]
1000767c:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
10007680:	4321      	orrs	r1, r4
10007682:	f000 8481 	beq.w	10007f88 <HAL_RCCEx_GetPeriphCLKFreq+0xb74>
10007686:	e9d7 0100 	ldrd	r0, r1, [r7]
1000768a:	4c9d      	ldr	r4, [pc, #628]	; (10007900 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
1000768c:	42a0      	cmp	r0, r4
1000768e:	f171 0100 	sbcs.w	r1, r1, #0
10007692:	f081 8186 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007696:	e9d7 0100 	ldrd	r0, r1, [r7]
1000769a:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
1000769e:	4321      	orrs	r1, r4
100076a0:	f000 8384 	beq.w	10007dac <HAL_RCCEx_GetPeriphCLKFreq+0x998>
100076a4:	e9d7 0100 	ldrd	r0, r1, [r7]
100076a8:	4c96      	ldr	r4, [pc, #600]	; (10007904 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
100076aa:	42a0      	cmp	r0, r4
100076ac:	f171 0100 	sbcs.w	r1, r1, #0
100076b0:	f081 8177 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100076b4:	e9d7 0100 	ldrd	r0, r1, [r7]
100076b8:	f100 447f 	add.w	r4, r0, #4278190080	; 0xff000000
100076bc:	4321      	orrs	r1, r4
100076be:	f000 8250 	beq.w	10007b62 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
100076c2:	e9d7 0100 	ldrd	r0, r1, [r7]
100076c6:	4c90      	ldr	r4, [pc, #576]	; (10007908 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
100076c8:	42a0      	cmp	r0, r4
100076ca:	f171 0100 	sbcs.w	r1, r1, #0
100076ce:	f081 8168 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100076d2:	e9d7 0100 	ldrd	r0, r1, [r7]
100076d6:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
100076da:	4321      	orrs	r1, r4
100076dc:	f000 85b9 	beq.w	10008252 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
100076e0:	e9d7 0100 	ldrd	r0, r1, [r7]
100076e4:	4c89      	ldr	r4, [pc, #548]	; (1000790c <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
100076e6:	42a0      	cmp	r0, r4
100076e8:	f171 0100 	sbcs.w	r1, r1, #0
100076ec:	f081 8159 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100076f0:	e9d7 0100 	ldrd	r0, r1, [r7]
100076f4:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
100076f8:	4321      	orrs	r1, r4
100076fa:	f000 871a 	beq.w	10008532 <HAL_RCCEx_GetPeriphCLKFreq+0x111e>
100076fe:	e9d7 0100 	ldrd	r0, r1, [r7]
10007702:	4c83      	ldr	r4, [pc, #524]	; (10007910 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
10007704:	42a0      	cmp	r0, r4
10007706:	f171 0100 	sbcs.w	r1, r1, #0
1000770a:	f081 814a 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000770e:	e9d7 0100 	ldrd	r0, r1, [r7]
10007712:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
10007716:	4321      	orrs	r1, r4
10007718:	f000 875e 	beq.w	100085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
1000771c:	e9d7 0100 	ldrd	r0, r1, [r7]
10007720:	4c7c      	ldr	r4, [pc, #496]	; (10007914 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
10007722:	42a0      	cmp	r0, r4
10007724:	f171 0100 	sbcs.w	r1, r1, #0
10007728:	f081 813b 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000772c:	e9d7 0100 	ldrd	r0, r1, [r7]
10007730:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
10007734:	4321      	orrs	r1, r4
10007736:	f000 8786 	beq.w	10008646 <HAL_RCCEx_GetPeriphCLKFreq+0x1232>
1000773a:	e9d7 0100 	ldrd	r0, r1, [r7]
1000773e:	4c76      	ldr	r4, [pc, #472]	; (10007918 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
10007740:	42a0      	cmp	r0, r4
10007742:	f171 0100 	sbcs.w	r1, r1, #0
10007746:	f081 812c 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000774a:	e9d7 0100 	ldrd	r0, r1, [r7]
1000774e:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
10007752:	4321      	orrs	r1, r4
10007754:	f000 83dd 	beq.w	10007f12 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
10007758:	e9d7 0100 	ldrd	r0, r1, [r7]
1000775c:	4c6f      	ldr	r4, [pc, #444]	; (1000791c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
1000775e:	42a0      	cmp	r0, r4
10007760:	f171 0100 	sbcs.w	r1, r1, #0
10007764:	f081 811d 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007768:	e9d7 0100 	ldrd	r0, r1, [r7]
1000776c:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
10007770:	4321      	orrs	r1, r4
10007772:	f000 84f2 	beq.w	1000815a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
10007776:	e9d7 0100 	ldrd	r0, r1, [r7]
1000777a:	4c69      	ldr	r4, [pc, #420]	; (10007920 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
1000777c:	42a0      	cmp	r0, r4
1000777e:	f171 0100 	sbcs.w	r1, r1, #0
10007782:	f081 810e 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007786:	e9d7 0100 	ldrd	r0, r1, [r7]
1000778a:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
1000778e:	4321      	orrs	r1, r4
10007790:	f000 84af 	beq.w	100080f2 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
10007794:	e9d7 0100 	ldrd	r0, r1, [r7]
10007798:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
1000779c:	f171 0100 	sbcs.w	r1, r1, #0
100077a0:	f081 80ff 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100077a4:	e9d7 0100 	ldrd	r0, r1, [r7]
100077a8:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
100077ac:	4321      	orrs	r1, r4
100077ae:	f000 82b8 	beq.w	10007d22 <HAL_RCCEx_GetPeriphCLKFreq+0x90e>
100077b2:	e9d7 0100 	ldrd	r0, r1, [r7]
100077b6:	f248 0401 	movw	r4, #32769	; 0x8001
100077ba:	42a0      	cmp	r0, r4
100077bc:	f171 0100 	sbcs.w	r1, r1, #0
100077c0:	f081 80ef 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100077c4:	e9d7 0100 	ldrd	r0, r1, [r7]
100077c8:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
100077cc:	4321      	orrs	r1, r4
100077ce:	f000 8458 	beq.w	10008082 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
100077d2:	e9d7 0100 	ldrd	r0, r1, [r7]
100077d6:	f244 0401 	movw	r4, #16385	; 0x4001
100077da:	42a0      	cmp	r0, r4
100077dc:	f171 0100 	sbcs.w	r1, r1, #0
100077e0:	f081 80df 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100077e4:	e9d7 0100 	ldrd	r0, r1, [r7]
100077e8:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
100077ec:	4321      	orrs	r1, r4
100077ee:	f000 80f2 	beq.w	100079d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
100077f2:	e9d7 0100 	ldrd	r0, r1, [r7]
100077f6:	f242 0401 	movw	r4, #8193	; 0x2001
100077fa:	42a0      	cmp	r0, r4
100077fc:	f171 0100 	sbcs.w	r1, r1, #0
10007800:	f081 80cf 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007804:	e9d7 0100 	ldrd	r0, r1, [r7]
10007808:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
1000780c:	4321      	orrs	r1, r4
1000780e:	f000 8574 	beq.w	100082fa <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
10007812:	e9d7 0100 	ldrd	r0, r1, [r7]
10007816:	f241 0401 	movw	r4, #4097	; 0x1001
1000781a:	42a0      	cmp	r0, r4
1000781c:	f171 0100 	sbcs.w	r1, r1, #0
10007820:	f081 80bf 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007824:	e9d7 0100 	ldrd	r0, r1, [r7]
10007828:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
1000782c:	4321      	orrs	r1, r4
1000782e:	f001 8063 	beq.w	100088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x14e4>
10007832:	e9d7 0100 	ldrd	r0, r1, [r7]
10007836:	f640 0401 	movw	r4, #2049	; 0x801
1000783a:	42a0      	cmp	r0, r4
1000783c:	f171 0100 	sbcs.w	r1, r1, #0
10007840:	f081 80af 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007844:	e9d7 0100 	ldrd	r0, r1, [r7]
10007848:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
1000784c:	4321      	orrs	r1, r4
1000784e:	f001 800b 	beq.w	10008868 <HAL_RCCEx_GetPeriphCLKFreq+0x1454>
10007852:	e9d7 0100 	ldrd	r0, r1, [r7]
10007856:	f240 4401 	movw	r4, #1025	; 0x401
1000785a:	42a0      	cmp	r0, r4
1000785c:	f171 0100 	sbcs.w	r1, r1, #0
10007860:	f081 809f 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007864:	e9d7 0100 	ldrd	r0, r1, [r7]
10007868:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
1000786c:	4321      	orrs	r1, r4
1000786e:	f000 8512 	beq.w	10008296 <HAL_RCCEx_GetPeriphCLKFreq+0xe82>
10007872:	e9d7 0100 	ldrd	r0, r1, [r7]
10007876:	f240 2401 	movw	r4, #513	; 0x201
1000787a:	42a0      	cmp	r0, r4
1000787c:	f171 0100 	sbcs.w	r1, r1, #0
10007880:	f081 808f 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007884:	e9d7 0100 	ldrd	r0, r1, [r7]
10007888:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
1000788c:	4321      	orrs	r1, r4
1000788e:	f000 82ff 	beq.w	10007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
10007892:	e9d7 0100 	ldrd	r0, r1, [r7]
10007896:	f240 1401 	movw	r4, #257	; 0x101
1000789a:	42a0      	cmp	r0, r4
1000789c:	f171 0100 	sbcs.w	r1, r1, #0
100078a0:	f081 807f 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100078a4:	e9d7 0100 	ldrd	r0, r1, [r7]
100078a8:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
100078ac:	4321      	orrs	r1, r4
100078ae:	f000 82b3 	beq.w	10007e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
100078b2:	e9d7 0100 	ldrd	r0, r1, [r7]
100078b6:	2881      	cmp	r0, #129	; 0x81
100078b8:	f171 0100 	sbcs.w	r1, r1, #0
100078bc:	f081 8071 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100078c0:	e9d7 0100 	ldrd	r0, r1, [r7]
100078c4:	2821      	cmp	r0, #33	; 0x21
100078c6:	f171 0100 	sbcs.w	r1, r1, #0
100078ca:	d271      	bcs.n	100079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
100078cc:	e9d7 0100 	ldrd	r0, r1, [r7]
100078d0:	4301      	orrs	r1, r0
100078d2:	f001 8066 	beq.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100078d6:	e9d7 0100 	ldrd	r0, r1, [r7]
100078da:	1e42      	subs	r2, r0, #1
100078dc:	f141 33ff 	adc.w	r3, r1, #4294967295
100078e0:	2a20      	cmp	r2, #32
100078e2:	f173 0100 	sbcs.w	r1, r3, #0
100078e6:	f081 805c 	bcs.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100078ea:	e01b      	b.n	10007924 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
100078ec:	80000001 	.word	0x80000001
100078f0:	40000001 	.word	0x40000001
100078f4:	20000001 	.word	0x20000001
100078f8:	10000001 	.word	0x10000001
100078fc:	08000001 	.word	0x08000001
10007900:	04000001 	.word	0x04000001
10007904:	02000001 	.word	0x02000001
10007908:	01000001 	.word	0x01000001
1000790c:	00400001 	.word	0x00400001
10007910:	00200001 	.word	0x00200001
10007914:	00100001 	.word	0x00100001
10007918:	00080001 	.word	0x00080001
1000791c:	00040001 	.word	0x00040001
10007920:	00020001 	.word	0x00020001
10007924:	2a1f      	cmp	r2, #31
10007926:	f201 803c 	bhi.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000792a:	a101      	add	r1, pc, #4	; (adr r1, 10007930 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
1000792c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
10007930:	10008471 	.word	0x10008471
10007934:	10007c41 	.word	0x10007c41
10007938:	100089a3 	.word	0x100089a3
1000793c:	10007cb3 	.word	0x10007cb3
10007940:	100089a3 	.word	0x100089a3
10007944:	100089a3 	.word	0x100089a3
10007948:	100089a3 	.word	0x100089a3
1000794c:	100086f9 	.word	0x100086f9
10007950:	100089a3 	.word	0x100089a3
10007954:	100089a3 	.word	0x100089a3
10007958:	100089a3 	.word	0x100089a3
1000795c:	100089a3 	.word	0x100089a3
10007960:	100089a3 	.word	0x100089a3
10007964:	100089a3 	.word	0x100089a3
10007968:	100089a3 	.word	0x100089a3
1000796c:	10007a21 	.word	0x10007a21
10007970:	100089a3 	.word	0x100089a3
10007974:	100089a3 	.word	0x100089a3
10007978:	100089a3 	.word	0x100089a3
1000797c:	100089a3 	.word	0x100089a3
10007980:	100089a3 	.word	0x100089a3
10007984:	100089a3 	.word	0x100089a3
10007988:	100089a3 	.word	0x100089a3
1000798c:	100089a3 	.word	0x100089a3
10007990:	100089a3 	.word	0x100089a3
10007994:	100089a3 	.word	0x100089a3
10007998:	100089a3 	.word	0x100089a3
1000799c:	100089a3 	.word	0x100089a3
100079a0:	100089a3 	.word	0x100089a3
100079a4:	100089a3 	.word	0x100089a3
100079a8:	100089a3 	.word	0x100089a3
100079ac:	10007a83 	.word	0x10007a83
100079b0:	e9d7 2300 	ldrd	r2, r3, [r7]
100079b4:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
100079b8:	430b      	orrs	r3, r1
100079ba:	f000 8094 	beq.w	10007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
100079be:	f000 bff0 	b.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
  {

    case RCC_PERIPHCLK_DAC:
    {
      frequency = LSI_VALUE;
100079c2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
100079c6:	637b      	str	r3, [r7, #52]	; 0x34
    }
      break; /*RCC_PERIPHCLK_DAC*/
100079c8:	f000 bfeb 	b.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_WWDG:
    {
      frequency = HAL_RCC_GetPCLK1Freq();
100079cc:	f7fd f8c6 	bl	10004b5c <HAL_RCC_GetPCLK1Freq>
100079d0:	6378      	str	r0, [r7, #52]	; 0x34
    }
      break; /* RCC_PERIPHCLK_WWDG */
100079d2:	f000 bfe6 	b.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_CEC:
    {
      clksource = __HAL_RCC_GET_CEC_SOURCE();
100079d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100079da:	f8d3 3918 	ldr.w	r3, [r3, #2328]	; 0x918
100079de:	f003 0303 	and.w	r3, r3, #3
100079e2:	633b      	str	r3, [r7, #48]	; 0x30
100079e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100079e6:	2b02      	cmp	r3, #2
100079e8:	d011      	beq.n	10007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
100079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100079ec:	2b02      	cmp	r3, #2
100079ee:	d812      	bhi.n	10007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
100079f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100079f2:	2b00      	cmp	r3, #0
100079f4:	d003      	beq.n	100079fe <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
100079f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100079f8:	2b01      	cmp	r3, #1
100079fa:	d004      	beq.n	10007a06 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
100079fc:	e00b      	b.n	10007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x602>

      switch (clksource)
      {
        case RCC_CECCLKSOURCE_LSE:
          frequency = LSE_VALUE;
100079fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10007a02:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007a04:	e00a      	b.n	10007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x608>

        case RCC_CECCLKSOURCE_LSI:
          frequency = LSI_VALUE;
10007a06:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10007a0a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007a0c:	e006      	b.n	10007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x608>

        case RCC_CECCLKSOURCE_CSI122:
          frequency = (CSI_VALUE / 122);
10007a0e:	f248 0312 	movw	r3, #32786	; 0x8012
10007a12:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007a14:	e002      	b.n	10007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x608>

        default:
          frequency = 0;
10007a16:	2300      	movs	r3, #0
10007a18:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007a1a:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_CEC */
10007a1c:	f000 bfc1 	b.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_I2C12:
    {
      clksource = __HAL_RCC_GET_I2C12_SOURCE();
10007a20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007a24:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	; 0x8c0
10007a28:	f003 0307 	and.w	r3, r3, #7
10007a2c:	633b      	str	r3, [r7, #48]	; 0x30
10007a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007a30:	2b03      	cmp	r3, #3
10007a32:	f200 87a7 	bhi.w	10008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1570>
10007a36:	a201      	add	r2, pc, #4	; (adr r2, 10007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x628>)
10007a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10007a3c:	10007a4d 	.word	0x10007a4d
10007a40:	10007a55 	.word	0x10007a55
10007a44:	10007a65 	.word	0x10007a65
10007a48:	10007a79 	.word	0x10007a79

      switch (clksource)
      {
        case RCC_I2C12CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
10007a4c:	f7fd f886 	bl	10004b5c <HAL_RCC_GetPCLK1Freq>
10007a50:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10007a52:	e014      	b.n	10007a7e <HAL_RCCEx_GetPeriphCLKFreq+0x66a>

        case RCC_I2C12CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007a54:	f107 030c 	add.w	r3, r7, #12
10007a58:	4618      	mov	r0, r3
10007a5a:	f7fc ff77 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10007a5e:	697b      	ldr	r3, [r7, #20]
10007a60:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007a62:	e00c      	b.n	10007a7e <HAL_RCCEx_GetPeriphCLKFreq+0x66a>

        case RCC_I2C12CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10007a64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007a68:	699b      	ldr	r3, [r3, #24]
10007a6a:	f003 0303 	and.w	r3, r3, #3
10007a6e:	4ab8      	ldr	r2, [pc, #736]	; (10007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
10007a70:	fa22 f303 	lsr.w	r3, r2, r3
10007a74:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007a76:	e002      	b.n	10007a7e <HAL_RCCEx_GetPeriphCLKFreq+0x66a>

        case RCC_I2C12CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10007a78:	4bb6      	ldr	r3, [pc, #728]	; (10007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
10007a7a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007a7c:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_I2C12 */
10007a7e:	f000 bf81 	b.w	10008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1570>


    case RCC_PERIPHCLK_I2C35:
    {
      clksource = __HAL_RCC_GET_I2C35_SOURCE();
10007a82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007a86:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	; 0x8c4
10007a8a:	f003 0307 	and.w	r3, r3, #7
10007a8e:	633b      	str	r3, [r7, #48]	; 0x30
10007a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007a92:	2b03      	cmp	r3, #3
10007a94:	f200 8778 	bhi.w	10008988 <HAL_RCCEx_GetPeriphCLKFreq+0x1574>
10007a98:	a201      	add	r2, pc, #4	; (adr r2, 10007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
10007a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10007a9e:	bf00      	nop
10007aa0:	10007ab1 	.word	0x10007ab1
10007aa4:	10007ab9 	.word	0x10007ab9
10007aa8:	10007ac9 	.word	0x10007ac9
10007aac:	10007add 	.word	0x10007add

      switch (clksource)
      {
        case RCC_I2C35CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
10007ab0:	f7fd f854 	bl	10004b5c <HAL_RCC_GetPCLK1Freq>
10007ab4:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10007ab6:	e014      	b.n	10007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>

        case RCC_I2C35CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007ab8:	f107 030c 	add.w	r3, r7, #12
10007abc:	4618      	mov	r0, r3
10007abe:	f7fc ff45 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10007ac2:	697b      	ldr	r3, [r7, #20]
10007ac4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007ac6:	e00c      	b.n	10007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>

        case RCC_I2C35CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10007ac8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007acc:	699b      	ldr	r3, [r3, #24]
10007ace:	f003 0303 	and.w	r3, r3, #3
10007ad2:	4a9f      	ldr	r2, [pc, #636]	; (10007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
10007ad4:	fa22 f303 	lsr.w	r3, r2, r3
10007ad8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007ada:	e002      	b.n	10007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>

        case RCC_I2C35CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10007adc:	4b9d      	ldr	r3, [pc, #628]	; (10007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
10007ade:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007ae0:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_I2C35 */
10007ae2:	f000 bf51 	b.w	10008988 <HAL_RCCEx_GetPeriphCLKFreq+0x1574>


    case RCC_PERIPHCLK_LPTIM1:
    {
      clksource = __HAL_RCC_GET_LPTIM1_SOURCE();
10007ae6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007aea:	f8d3 3934 	ldr.w	r3, [r3, #2356]	; 0x934
10007aee:	f003 0307 	and.w	r3, r3, #7
10007af2:	633b      	str	r3, [r7, #48]	; 0x30
10007af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007af6:	2b05      	cmp	r3, #5
10007af8:	d82e      	bhi.n	10007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
10007afa:	a201      	add	r2, pc, #4	; (adr r2, 10007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
10007afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10007b00:	10007b19 	.word	0x10007b19
10007b04:	10007b21 	.word	0x10007b21
10007b08:	10007b31 	.word	0x10007b31
10007b0c:	10007b41 	.word	0x10007b41
10007b10:	10007b49 	.word	0x10007b49
10007b14:	10007b51 	.word	0x10007b51

      switch (clksource)
      {
        case RCC_LPTIM1CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
10007b18:	f7fd f820 	bl	10004b5c <HAL_RCC_GetPCLK1Freq>
10007b1c:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10007b1e:	e01e      	b.n	10007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007b20:	f107 030c 	add.w	r3, r7, #12
10007b24:	4618      	mov	r0, r3
10007b26:	f7fc ff11 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10007b2a:	68fb      	ldr	r3, [r7, #12]
10007b2c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007b2e:	e016      	b.n	10007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10007b30:	f107 0318 	add.w	r3, r7, #24
10007b34:	4618      	mov	r0, r3
10007b36:	f7fc fe0f 	bl	10004758 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10007b3a:	69fb      	ldr	r3, [r7, #28]
10007b3c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007b3e:	e00e      	b.n	10007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_LSE:
          frequency = LSE_VALUE;
10007b40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10007b44:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007b46:	e00a      	b.n	10007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_LSI:
          frequency = LSI_VALUE;
10007b48:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10007b4c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007b4e:	e006      	b.n	10007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10007b50:	f7fd f8bc 	bl	10004ccc <RCC_GetCKPERFreq>
10007b54:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10007b56:	e002      	b.n	10007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        default:
          frequency = 0;
10007b58:	2300      	movs	r3, #0
10007b5a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007b5c:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_LPTIM1 */
10007b5e:	f000 bf20 	b.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SPDIFRX:
    {
      clksource = __HAL_RCC_GET_SPDIFRX_SOURCE();
10007b62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007b66:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
10007b6a:	f003 0303 	and.w	r3, r3, #3
10007b6e:	633b      	str	r3, [r7, #48]	; 0x30
10007b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007b72:	2b02      	cmp	r3, #2
10007b74:	d019      	beq.n	10007baa <HAL_RCCEx_GetPeriphCLKFreq+0x796>
10007b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007b78:	2b02      	cmp	r3, #2
10007b7a:	d820      	bhi.n	10007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
10007b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007b7e:	2b00      	cmp	r3, #0
10007b80:	d003      	beq.n	10007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
10007b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007b84:	2b01      	cmp	r3, #1
10007b86:	d008      	beq.n	10007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x786>
10007b88:	e019      	b.n	10007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>

      switch (clksource)
      {
        case RCC_SPDIFRXCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007b8a:	f107 030c 	add.w	r3, r7, #12
10007b8e:	4618      	mov	r0, r3
10007b90:	f7fc fedc 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10007b94:	68fb      	ldr	r3, [r7, #12]
10007b96:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007b98:	e014      	b.n	10007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>

        case RCC_SPDIFRXCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10007b9a:	f107 0318 	add.w	r3, r7, #24
10007b9e:	4618      	mov	r0, r3
10007ba0:	f7fc fdda 	bl	10004758 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10007ba4:	69fb      	ldr	r3, [r7, #28]
10007ba6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007ba8:	e00c      	b.n	10007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>

        case RCC_SPDIFRXCLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10007baa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007bae:	699b      	ldr	r3, [r3, #24]
10007bb0:	f003 0303 	and.w	r3, r3, #3
10007bb4:	4a66      	ldr	r2, [pc, #408]	; (10007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
10007bb6:	fa22 f303 	lsr.w	r3, r2, r3
10007bba:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007bbc:	e002      	b.n	10007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>

        default:
          frequency = 0;
10007bbe:	2300      	movs	r3, #0
10007bc0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007bc2:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_SPDIFRX */
10007bc4:	f000 beed 	b.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_SPI23:
    {
      clksource = __HAL_RCC_GET_SPI23_SOURCE();
10007bc8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007bcc:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	; 0x8dc
10007bd0:	f003 0307 	and.w	r3, r3, #7
10007bd4:	633b      	str	r3, [r7, #48]	; 0x30
10007bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007bd8:	2b04      	cmp	r3, #4
10007bda:	d82c      	bhi.n	10007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x822>
10007bdc:	a201      	add	r2, pc, #4	; (adr r2, 10007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>)
10007bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10007be2:	bf00      	nop
10007be4:	10007bf9 	.word	0x10007bf9
10007be8:	10007c09 	.word	0x10007c09
10007bec:	10007c29 	.word	0x10007c29
10007bf0:	10007c2f 	.word	0x10007c2f
10007bf4:	10007c19 	.word	0x10007c19

      switch (clksource)
      {
        case RCC_SPI23CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007bf8:	f107 030c 	add.w	r3, r7, #12
10007bfc:	4618      	mov	r0, r3
10007bfe:	f7fc fea5 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10007c02:	68fb      	ldr	r3, [r7, #12]
10007c04:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007c06:	e019      	b.n	10007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        case RCC_SPI23CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10007c08:	f107 0318 	add.w	r3, r7, #24
10007c0c:	4618      	mov	r0, r3
10007c0e:	f7fc fda3 	bl	10004758 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10007c12:	69fb      	ldr	r3, [r7, #28]
10007c14:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007c16:	e011      	b.n	10007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        case RCC_SPI23CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10007c18:	f107 0318 	add.w	r3, r7, #24
10007c1c:	4618      	mov	r0, r3
10007c1e:	f7fc fd9b 	bl	10004758 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10007c22:	6a3b      	ldr	r3, [r7, #32]
10007c24:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007c26:	e009      	b.n	10007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        case RCC_SPI23CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10007c28:	4b4b      	ldr	r3, [pc, #300]	; (10007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x944>)
10007c2a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007c2c:	e006      	b.n	10007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        case RCC_SPI23CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10007c2e:	f7fd f84d 	bl	10004ccc <RCC_GetCKPERFreq>
10007c32:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10007c34:	e002      	b.n	10007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        default:
          frequency = 0;
10007c36:	2300      	movs	r3, #0
10007c38:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007c3a:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_SPI23 */
10007c3c:	f000 beb1 	b.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_UART24:
    {
      clksource = __HAL_RCC_GET_UART24_SOURCE();
10007c40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007c44:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
10007c48:	f003 0307 	and.w	r3, r3, #7
10007c4c:	633b      	str	r3, [r7, #48]	; 0x30
10007c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007c50:	2b04      	cmp	r3, #4
10007c52:	d829      	bhi.n	10007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
10007c54:	a201      	add	r2, pc, #4	; (adr r2, 10007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
10007c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10007c5a:	bf00      	nop
10007c5c:	10007c71 	.word	0x10007c71
10007c60:	10007c79 	.word	0x10007c79
10007c64:	10007c89 	.word	0x10007c89
10007c68:	10007c9d 	.word	0x10007c9d
10007c6c:	10007ca3 	.word	0x10007ca3

      switch (clksource)
      {
        case RCC_UART24CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
10007c70:	f7fc ff74 	bl	10004b5c <HAL_RCC_GetPCLK1Freq>
10007c74:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10007c76:	e01a      	b.n	10007cae <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        case RCC_UART24CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007c78:	f107 030c 	add.w	r3, r7, #12
10007c7c:	4618      	mov	r0, r3
10007c7e:	f7fc fe65 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10007c82:	693b      	ldr	r3, [r7, #16]
10007c84:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007c86:	e012      	b.n	10007cae <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        case RCC_UART24CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10007c88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007c8c:	699b      	ldr	r3, [r3, #24]
10007c8e:	f003 0303 	and.w	r3, r3, #3
10007c92:	4a2f      	ldr	r2, [pc, #188]	; (10007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
10007c94:	fa22 f303 	lsr.w	r3, r2, r3
10007c98:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007c9a:	e008      	b.n	10007cae <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        case RCC_UART24CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10007c9c:	4b2d      	ldr	r3, [pc, #180]	; (10007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
10007c9e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007ca0:	e005      	b.n	10007cae <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        case RCC_UART24CLKSOURCE_HSE:
          frequency = HSE_VALUE;
10007ca2:	4b2e      	ldr	r3, [pc, #184]	; (10007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x948>)
10007ca4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007ca6:	e002      	b.n	10007cae <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        default:
          frequency = 0;
10007ca8:	2300      	movs	r3, #0
10007caa:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007cac:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_UART24 */
10007cae:	f000 be78 	b.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_UART35:
    {
      clksource = __HAL_RCC_GET_UART35_SOURCE();
10007cb2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007cb6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
10007cba:	f003 0307 	and.w	r3, r3, #7
10007cbe:	633b      	str	r3, [r7, #48]	; 0x30
10007cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007cc2:	2b04      	cmp	r3, #4
10007cc4:	d828      	bhi.n	10007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
10007cc6:	a201      	add	r2, pc, #4	; (adr r2, 10007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>)
10007cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10007ccc:	10007ce1 	.word	0x10007ce1
10007cd0:	10007ce9 	.word	0x10007ce9
10007cd4:	10007cf9 	.word	0x10007cf9
10007cd8:	10007d0d 	.word	0x10007d0d
10007cdc:	10007d13 	.word	0x10007d13

      switch (clksource)
      {
        case RCC_UART35CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
10007ce0:	f7fc ff3c 	bl	10004b5c <HAL_RCC_GetPCLK1Freq>
10007ce4:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10007ce6:	e01a      	b.n	10007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        case RCC_UART35CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007ce8:	f107 030c 	add.w	r3, r7, #12
10007cec:	4618      	mov	r0, r3
10007cee:	f7fc fe2d 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10007cf2:	693b      	ldr	r3, [r7, #16]
10007cf4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007cf6:	e012      	b.n	10007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        case RCC_UART35CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10007cf8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007cfc:	699b      	ldr	r3, [r3, #24]
10007cfe:	f003 0303 	and.w	r3, r3, #3
10007d02:	4a13      	ldr	r2, [pc, #76]	; (10007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
10007d04:	fa22 f303 	lsr.w	r3, r2, r3
10007d08:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007d0a:	e008      	b.n	10007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        case RCC_UART35CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10007d0c:	4b11      	ldr	r3, [pc, #68]	; (10007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
10007d0e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007d10:	e005      	b.n	10007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        case RCC_UART35CLKSOURCE_HSE:
          frequency = HSE_VALUE;
10007d12:	4b12      	ldr	r3, [pc, #72]	; (10007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x948>)
10007d14:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007d16:	e002      	b.n	10007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        default:
          frequency = 0;
10007d18:	2300      	movs	r3, #0
10007d1a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007d1c:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_USART35 */
10007d1e:	f000 be40 	b.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_UART78:
    {
      clksource = __HAL_RCC_GET_UART78_SOURCE();
10007d22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007d26:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
10007d2a:	f003 0307 	and.w	r3, r3, #7
10007d2e:	633b      	str	r3, [r7, #48]	; 0x30
10007d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007d32:	2b04      	cmp	r3, #4
10007d34:	d830      	bhi.n	10007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
10007d36:	a201      	add	r2, pc, #4	; (adr r2, 10007d3c <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
10007d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10007d3c:	10007d61 	.word	0x10007d61
10007d40:	10007d69 	.word	0x10007d69
10007d44:	10007d79 	.word	0x10007d79
10007d48:	10007d8d 	.word	0x10007d8d
10007d4c:	10007d93 	.word	0x10007d93
10007d50:	03d09000 	.word	0x03d09000
10007d54:	003d0900 	.word	0x003d0900
10007d58:	00bb8000 	.word	0x00bb8000
10007d5c:	016e3600 	.word	0x016e3600

      switch (clksource)
      {
        case RCC_UART78CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
10007d60:	f7fc fefc 	bl	10004b5c <HAL_RCC_GetPCLK1Freq>
10007d64:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10007d66:	e01a      	b.n	10007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        case RCC_UART78CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007d68:	f107 030c 	add.w	r3, r7, #12
10007d6c:	4618      	mov	r0, r3
10007d6e:	f7fc fded 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10007d72:	693b      	ldr	r3, [r7, #16]
10007d74:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007d76:	e012      	b.n	10007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        case RCC_UART78CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10007d78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007d7c:	699b      	ldr	r3, [r3, #24]
10007d7e:	f003 0303 	and.w	r3, r3, #3
10007d82:	4ab9      	ldr	r2, [pc, #740]	; (10008068 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>)
10007d84:	fa22 f303 	lsr.w	r3, r2, r3
10007d88:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007d8a:	e008      	b.n	10007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        case RCC_UART78CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10007d8c:	4bb7      	ldr	r3, [pc, #732]	; (1000806c <HAL_RCCEx_GetPeriphCLKFreq+0xc58>)
10007d8e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007d90:	e005      	b.n	10007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        case RCC_UART78CLKSOURCE_HSE:
          frequency = HSE_VALUE;
10007d92:	4bb7      	ldr	r3, [pc, #732]	; (10008070 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
10007d94:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007d96:	e002      	b.n	10007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        default:
          frequency = 0;
10007d98:	2300      	movs	r3, #0
10007d9a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007d9c:	bf00      	nop
      }
    }
      break; /*RCC_PERIPHCLK_UART78 */
10007d9e:	f000 be00 	b.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_DFSDM1:
    {
      frequency = HAL_RCC_GetMLHCLKFreq();
10007da2:	f7fc ff71 	bl	10004c88 <HAL_RCC_GetMLHCLKFreq>
10007da6:	6378      	str	r0, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_DFSDM1
10007da8:	f000 bdfb 	b.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

#if defined(FDCAN1)
    case RCC_PERIPHCLK_FDCAN:
    {
      clksource = __HAL_RCC_GET_FDCAN_SOURCE();
10007dac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007db0:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
10007db4:	f003 0303 	and.w	r3, r3, #3
10007db8:	633b      	str	r3, [r7, #48]	; 0x30
10007dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007dbc:	2b03      	cmp	r3, #3
10007dbe:	d826      	bhi.n	10007e0e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
10007dc0:	a201      	add	r2, pc, #4	; (adr r2, 10007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>)
10007dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10007dc6:	bf00      	nop
10007dc8:	10007dd9 	.word	0x10007dd9
10007dcc:	10007ddf 	.word	0x10007ddf
10007dd0:	10007def 	.word	0x10007def
10007dd4:	10007dff 	.word	0x10007dff

      switch (clksource)
      {
        case RCC_FDCANCLKSOURCE_HSE:
          frequency = HSE_VALUE;
10007dd8:	4ba5      	ldr	r3, [pc, #660]	; (10008070 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
10007dda:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007ddc:	e01a      	b.n	10007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>

        case RCC_FDCANCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10007dde:	f107 0318 	add.w	r3, r7, #24
10007de2:	4618      	mov	r0, r3
10007de4:	f7fc fcb8 	bl	10004758 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10007de8:	69fb      	ldr	r3, [r7, #28]
10007dea:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007dec:	e012      	b.n	10007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>

        case RCC_FDCANCLKSOURCE_PLL4_Q:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007dee:	f107 030c 	add.w	r3, r7, #12
10007df2:	4618      	mov	r0, r3
10007df4:	f7fc fdaa 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10007df8:	693b      	ldr	r3, [r7, #16]
10007dfa:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007dfc:	e00a      	b.n	10007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>

        case RCC_FDCANCLKSOURCE_PLL4_R:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007dfe:	f107 030c 	add.w	r3, r7, #12
10007e02:	4618      	mov	r0, r3
10007e04:	f7fc fda2 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10007e08:	697b      	ldr	r3, [r7, #20]
10007e0a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007e0c:	e002      	b.n	10007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>

        default:
          frequency = 0;
10007e0e:	2300      	movs	r3, #0
10007e10:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007e12:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_FDCAN
10007e14:	f000 bdc5 	b.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
#endif /*FDCAN1*/

    case RCC_PERIPHCLK_SAI1:
    {
      clksource = __HAL_RCC_GET_SAI1_SOURCE();
10007e18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007e1c:	f8d3 38c8 	ldr.w	r3, [r3, #2248]	; 0x8c8
10007e20:	f003 0307 	and.w	r3, r3, #7
10007e24:	633b      	str	r3, [r7, #48]	; 0x30
10007e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007e28:	2b04      	cmp	r3, #4
10007e2a:	d82c      	bhi.n	10007e86 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
10007e2c:	a201      	add	r2, pc, #4	; (adr r2, 10007e34 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>)
10007e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10007e32:	bf00      	nop
10007e34:	10007e49 	.word	0x10007e49
10007e38:	10007e59 	.word	0x10007e59
10007e3c:	10007e79 	.word	0x10007e79
10007e40:	10007e7f 	.word	0x10007e7f
10007e44:	10007e69 	.word	0x10007e69

      switch (clksource)
      {
        case RCC_SAI1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007e48:	f107 030c 	add.w	r3, r7, #12
10007e4c:	4618      	mov	r0, r3
10007e4e:	f7fc fd7d 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10007e52:	693b      	ldr	r3, [r7, #16]
10007e54:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007e56:	e019      	b.n	10007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        case RCC_SAI1CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10007e58:	f107 0318 	add.w	r3, r7, #24
10007e5c:	4618      	mov	r0, r3
10007e5e:	f7fc fc7b 	bl	10004758 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10007e62:	69fb      	ldr	r3, [r7, #28]
10007e64:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007e66:	e011      	b.n	10007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        case RCC_SAI1CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10007e68:	f107 0318 	add.w	r3, r7, #24
10007e6c:	4618      	mov	r0, r3
10007e6e:	f7fc fc73 	bl	10004758 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10007e72:	6a3b      	ldr	r3, [r7, #32]
10007e74:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007e76:	e009      	b.n	10007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        case RCC_SAI1CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10007e78:	4b7e      	ldr	r3, [pc, #504]	; (10008074 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>)
10007e7a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007e7c:	e006      	b.n	10007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        case RCC_SAI1CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10007e7e:	f7fc ff25 	bl	10004ccc <RCC_GetCKPERFreq>
10007e82:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10007e84:	e002      	b.n	10007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        default:
          frequency = 0;
10007e86:	2300      	movs	r3, #0
10007e88:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007e8a:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SAI1
10007e8c:	f000 bd89 	b.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SAI2:
    {
      clksource = __HAL_RCC_GET_SAI2_SOURCE();
10007e90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007e94:	f8d3 38cc 	ldr.w	r3, [r3, #2252]	; 0x8cc
10007e98:	f003 0307 	and.w	r3, r3, #7
10007e9c:	633b      	str	r3, [r7, #48]	; 0x30
10007e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007ea0:	2b05      	cmp	r3, #5
10007ea2:	d831      	bhi.n	10007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
10007ea4:	a201      	add	r2, pc, #4	; (adr r2, 10007eac <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
10007ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10007eaa:	bf00      	nop
10007eac:	10007ec5 	.word	0x10007ec5
10007eb0:	10007ed5 	.word	0x10007ed5
10007eb4:	10007ef5 	.word	0x10007ef5
10007eb8:	10007efb 	.word	0x10007efb
10007ebc:	10007f03 	.word	0x10007f03
10007ec0:	10007ee5 	.word	0x10007ee5

      switch (clksource)
      {
        case RCC_SAI2CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007ec4:	f107 030c 	add.w	r3, r7, #12
10007ec8:	4618      	mov	r0, r3
10007eca:	f7fc fd3f 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10007ece:	693b      	ldr	r3, [r7, #16]
10007ed0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007ed2:	e01c      	b.n	10007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10007ed4:	f107 0318 	add.w	r3, r7, #24
10007ed8:	4618      	mov	r0, r3
10007eda:	f7fc fc3d 	bl	10004758 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10007ede:	69fb      	ldr	r3, [r7, #28]
10007ee0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007ee2:	e014      	b.n	10007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10007ee4:	f107 0318 	add.w	r3, r7, #24
10007ee8:	4618      	mov	r0, r3
10007eea:	f7fc fc35 	bl	10004758 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10007eee:	6a3b      	ldr	r3, [r7, #32]
10007ef0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007ef2:	e00c      	b.n	10007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10007ef4:	4b5f      	ldr	r3, [pc, #380]	; (10008074 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>)
10007ef6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007ef8:	e009      	b.n	10007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10007efa:	f7fc fee7 	bl	10004ccc <RCC_GetCKPERFreq>
10007efe:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10007f00:	e005      	b.n	10007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_SPDIF:
          frequency = 0; //SAI2 manage this SPDIF_CKSYMB_VALUE
10007f02:	2300      	movs	r3, #0
10007f04:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007f06:	e002      	b.n	10007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        default:
          frequency = 0;
10007f08:	2300      	movs	r3, #0
10007f0a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007f0c:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SAI2
10007f0e:	f000 bd48 	b.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SAI3:
    {
      clksource = __HAL_RCC_GET_SAI3_SOURCE();
10007f12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007f16:	f8d3 38d0 	ldr.w	r3, [r3, #2256]	; 0x8d0
10007f1a:	f003 0307 	and.w	r3, r3, #7
10007f1e:	633b      	str	r3, [r7, #48]	; 0x30
10007f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007f22:	2b04      	cmp	r3, #4
10007f24:	d82b      	bhi.n	10007f7e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
10007f26:	a201      	add	r2, pc, #4	; (adr r2, 10007f2c <HAL_RCCEx_GetPeriphCLKFreq+0xb18>)
10007f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10007f2c:	10007f41 	.word	0x10007f41
10007f30:	10007f51 	.word	0x10007f51
10007f34:	10007f71 	.word	0x10007f71
10007f38:	10007f77 	.word	0x10007f77
10007f3c:	10007f61 	.word	0x10007f61

      switch (clksource)
      {
        case RCC_SAI3CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007f40:	f107 030c 	add.w	r3, r7, #12
10007f44:	4618      	mov	r0, r3
10007f46:	f7fc fd01 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10007f4a:	693b      	ldr	r3, [r7, #16]
10007f4c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007f4e:	e019      	b.n	10007f84 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        case RCC_SAI3CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10007f50:	f107 0318 	add.w	r3, r7, #24
10007f54:	4618      	mov	r0, r3
10007f56:	f7fc fbff 	bl	10004758 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10007f5a:	69fb      	ldr	r3, [r7, #28]
10007f5c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007f5e:	e011      	b.n	10007f84 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        case RCC_SAI3CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10007f60:	f107 0318 	add.w	r3, r7, #24
10007f64:	4618      	mov	r0, r3
10007f66:	f7fc fbf7 	bl	10004758 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10007f6a:	6a3b      	ldr	r3, [r7, #32]
10007f6c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007f6e:	e009      	b.n	10007f84 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        case RCC_SAI3CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10007f70:	4b40      	ldr	r3, [pc, #256]	; (10008074 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>)
10007f72:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007f74:	e006      	b.n	10007f84 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        case RCC_SAI2CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10007f76:	f7fc fea9 	bl	10004ccc <RCC_GetCKPERFreq>
10007f7a:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10007f7c:	e002      	b.n	10007f84 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        default:
          frequency = 0;
10007f7e:	2300      	movs	r3, #0
10007f80:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007f82:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SAI3
10007f84:	f000 bd0d 	b.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SPI1:
    {
      clksource = __HAL_RCC_GET_SPI1_SOURCE();
10007f88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007f8c:	f8d3 38d8 	ldr.w	r3, [r3, #2264]	; 0x8d8
10007f90:	f003 0307 	and.w	r3, r3, #7
10007f94:	633b      	str	r3, [r7, #48]	; 0x30
10007f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007f98:	2b04      	cmp	r3, #4
10007f9a:	d82c      	bhi.n	10007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
10007f9c:	a201      	add	r2, pc, #4	; (adr r2, 10007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>)
10007f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10007fa2:	bf00      	nop
10007fa4:	10007fb9 	.word	0x10007fb9
10007fa8:	10007fc9 	.word	0x10007fc9
10007fac:	10007fe9 	.word	0x10007fe9
10007fb0:	10007fef 	.word	0x10007fef
10007fb4:	10007fd9 	.word	0x10007fd9

      switch (clksource)
      {
        case RCC_SPI1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007fb8:	f107 030c 	add.w	r3, r7, #12
10007fbc:	4618      	mov	r0, r3
10007fbe:	f7fc fcc5 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10007fc2:	693b      	ldr	r3, [r7, #16]
10007fc4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007fc6:	e019      	b.n	10007ffc <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        case RCC_SPI1CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10007fc8:	f107 0318 	add.w	r3, r7, #24
10007fcc:	4618      	mov	r0, r3
10007fce:	f7fc fbc3 	bl	10004758 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10007fd2:	69fb      	ldr	r3, [r7, #28]
10007fd4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007fd6:	e011      	b.n	10007ffc <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        case RCC_SPI1CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10007fd8:	f107 0318 	add.w	r3, r7, #24
10007fdc:	4618      	mov	r0, r3
10007fde:	f7fc fbbb 	bl	10004758 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10007fe2:	6a3b      	ldr	r3, [r7, #32]
10007fe4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007fe6:	e009      	b.n	10007ffc <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        case RCC_SPI1CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10007fe8:	4b22      	ldr	r3, [pc, #136]	; (10008074 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>)
10007fea:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007fec:	e006      	b.n	10007ffc <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        case RCC_SPI1CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10007fee:	f7fc fe6d 	bl	10004ccc <RCC_GetCKPERFreq>
10007ff2:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10007ff4:	e002      	b.n	10007ffc <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        default:
          frequency = 0;
10007ff6:	2300      	movs	r3, #0
10007ff8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007ffa:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SPI1
10007ffc:	f000 bcd1 	b.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SPI45:
    {
      clksource = __HAL_RCC_GET_SPI45_SOURCE();
10008000:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008004:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
10008008:	f003 0307 	and.w	r3, r3, #7
1000800c:	633b      	str	r3, [r7, #48]	; 0x30
1000800e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008010:	2b04      	cmp	r3, #4
10008012:	d831      	bhi.n	10008078 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
10008014:	a201      	add	r2, pc, #4	; (adr r2, 1000801c <HAL_RCCEx_GetPeriphCLKFreq+0xc08>)
10008016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000801a:	bf00      	nop
1000801c:	10008031 	.word	0x10008031
10008020:	10008039 	.word	0x10008039
10008024:	10008049 	.word	0x10008049
10008028:	1000805d 	.word	0x1000805d
1000802c:	10008063 	.word	0x10008063

      switch (clksource)
      {
        case RCC_SPI45CLKSOURCE_PCLK2:
          frequency = HAL_RCC_GetPCLK2Freq();
10008030:	f7fc fdaf 	bl	10004b92 <HAL_RCC_GetPCLK2Freq>
10008034:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008036:	e022      	b.n	1000807e <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>

        case RCC_SPI45CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008038:	f107 030c 	add.w	r3, r7, #12
1000803c:	4618      	mov	r0, r3
1000803e:	f7fc fc85 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008042:	693b      	ldr	r3, [r7, #16]
10008044:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008046:	e01a      	b.n	1000807e <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>

        case RCC_SPI45CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008048:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000804c:	699b      	ldr	r3, [r3, #24]
1000804e:	f003 0303 	and.w	r3, r3, #3
10008052:	4a05      	ldr	r2, [pc, #20]	; (10008068 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>)
10008054:	fa22 f303 	lsr.w	r3, r2, r3
10008058:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000805a:	e010      	b.n	1000807e <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>

        case RCC_SPI45CLKSOURCE_CSI:
          frequency = CSI_VALUE;
1000805c:	4b03      	ldr	r3, [pc, #12]	; (1000806c <HAL_RCCEx_GetPeriphCLKFreq+0xc58>)
1000805e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008060:	e00d      	b.n	1000807e <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>

        case RCC_SPI45CLKSOURCE_HSE:
          frequency = HSE_VALUE;
10008062:	4b03      	ldr	r3, [pc, #12]	; (10008070 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
10008064:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008066:	e00a      	b.n	1000807e <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
10008068:	03d09000 	.word	0x03d09000
1000806c:	003d0900 	.word	0x003d0900
10008070:	016e3600 	.word	0x016e3600
10008074:	00bb8000 	.word	0x00bb8000

        default:
          frequency = 0;
10008078:	2300      	movs	r3, #0
1000807a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000807c:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_SPI45 */
1000807e:	f000 bc90 	b.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_USART6:
    {
      clksource = __HAL_RCC_GET_USART6_SOURCE();
10008082:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008086:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
1000808a:	f003 0307 	and.w	r3, r3, #7
1000808e:	633b      	str	r3, [r7, #48]	; 0x30
10008090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008092:	2b04      	cmp	r3, #4
10008094:	d828      	bhi.n	100080e8 <HAL_RCCEx_GetPeriphCLKFreq+0xcd4>
10008096:	a201      	add	r2, pc, #4	; (adr r2, 1000809c <HAL_RCCEx_GetPeriphCLKFreq+0xc88>)
10008098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000809c:	100080b1 	.word	0x100080b1
100080a0:	100080b9 	.word	0x100080b9
100080a4:	100080c9 	.word	0x100080c9
100080a8:	100080dd 	.word	0x100080dd
100080ac:	100080e3 	.word	0x100080e3

      switch (clksource)
      {
        case RCC_USART6CLKSOURCE_PCLK2:
          frequency = HAL_RCC_GetPCLK2Freq();
100080b0:	f7fc fd6f 	bl	10004b92 <HAL_RCC_GetPCLK2Freq>
100080b4:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100080b6:	e01a      	b.n	100080ee <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        case RCC_USART6CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100080b8:	f107 030c 	add.w	r3, r7, #12
100080bc:	4618      	mov	r0, r3
100080be:	f7fc fc45 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
100080c2:	693b      	ldr	r3, [r7, #16]
100080c4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100080c6:	e012      	b.n	100080ee <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        case RCC_USART6CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100080c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100080cc:	699b      	ldr	r3, [r3, #24]
100080ce:	f003 0303 	and.w	r3, r3, #3
100080d2:	4aa8      	ldr	r2, [pc, #672]	; (10008374 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
100080d4:	fa22 f303 	lsr.w	r3, r2, r3
100080d8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100080da:	e008      	b.n	100080ee <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        case RCC_USART6CLKSOURCE_CSI:
          frequency = CSI_VALUE;
100080dc:	4ba6      	ldr	r3, [pc, #664]	; (10008378 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>)
100080de:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100080e0:	e005      	b.n	100080ee <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        case RCC_USART6CLKSOURCE_HSE:
          frequency = HSE_VALUE;
100080e2:	4ba6      	ldr	r3, [pc, #664]	; (1000837c <HAL_RCCEx_GetPeriphCLKFreq+0xf68>)
100080e4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100080e6:	e002      	b.n	100080ee <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        default:
          frequency = 0;
100080e8:	2300      	movs	r3, #0
100080ea:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100080ec:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_USART6
100080ee:	f000 bc58 	b.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_LPTIM23:
    {
      clksource = __HAL_RCC_GET_LPTIM23_SOURCE();
100080f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100080f6:	f8d3 3930 	ldr.w	r3, [r3, #2352]	; 0x930
100080fa:	f003 0307 	and.w	r3, r3, #7
100080fe:	633b      	str	r3, [r7, #48]	; 0x30
10008100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008102:	2b04      	cmp	r3, #4
10008104:	d824      	bhi.n	10008150 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>
10008106:	a201      	add	r2, pc, #4	; (adr r2, 1000810c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>)
10008108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000810c:	10008121 	.word	0x10008121
10008110:	10008129 	.word	0x10008129
10008114:	10008139 	.word	0x10008139
10008118:	10008141 	.word	0x10008141
1000811c:	10008149 	.word	0x10008149

      switch (clksource)
      {
        case RCC_LPTIM23CLKSOURCE_PCLK3:
          frequency = HAL_RCC_GetPCLK3Freq();
10008120:	f7fc fd52 	bl	10004bc8 <HAL_RCC_GetPCLK3Freq>
10008124:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008126:	e016      	b.n	10008156 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        case RCC_LPTIM23CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008128:	f107 030c 	add.w	r3, r7, #12
1000812c:	4618      	mov	r0, r3
1000812e:	f7fc fc0d 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008132:	693b      	ldr	r3, [r7, #16]
10008134:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008136:	e00e      	b.n	10008156 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        case RCC_LPTIM23CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008138:	f7fc fdc8 	bl	10004ccc <RCC_GetCKPERFreq>
1000813c:	6378      	str	r0, [r7, #52]	; 0x34
          break;
1000813e:	e00a      	b.n	10008156 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        case RCC_LPTIM23CLKSOURCE_LSE:
          frequency = LSE_VALUE;
10008140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10008144:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008146:	e006      	b.n	10008156 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        case RCC_LPTIM23CLKSOURCE_LSI:
          frequency = LSI_VALUE;
10008148:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
1000814c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000814e:	e002      	b.n	10008156 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        default:
          frequency = 0;
10008150:	2300      	movs	r3, #0
10008152:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008154:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_LPTIM23 */
10008156:	f000 bc24 	b.w	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_LPTIM45:
    {
      clksource = __HAL_RCC_GET_LPTIM45_SOURCE();
1000815a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000815e:	f8d3 392c 	ldr.w	r3, [r3, #2348]	; 0x92c
10008162:	f003 0307 	and.w	r3, r3, #7
10008166:	633b      	str	r3, [r7, #48]	; 0x30
10008168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000816a:	2b05      	cmp	r3, #5
1000816c:	d82e      	bhi.n	100081cc <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>
1000816e:	a201      	add	r2, pc, #4	; (adr r2, 10008174 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
10008170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008174:	1000818d 	.word	0x1000818d
10008178:	10008195 	.word	0x10008195
1000817c:	100081a5 	.word	0x100081a5
10008180:	100081b5 	.word	0x100081b5
10008184:	100081bd 	.word	0x100081bd
10008188:	100081c5 	.word	0x100081c5

      switch (clksource)
      {
        case RCC_LPTIM45CLKSOURCE_PCLK3:
          frequency = HAL_RCC_GetPCLK3Freq();
1000818c:	f7fc fd1c 	bl	10004bc8 <HAL_RCC_GetPCLK3Freq>
10008190:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008192:	e01e      	b.n	100081d2 <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008194:	f107 030c 	add.w	r3, r7, #12
10008198:	4618      	mov	r0, r3
1000819a:	f7fc fbd7 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
1000819e:	68fb      	ldr	r3, [r7, #12]
100081a0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100081a2:	e016      	b.n	100081d2 <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100081a4:	f107 0318 	add.w	r3, r7, #24
100081a8:	4618      	mov	r0, r3
100081aa:	f7fc fad5 	bl	10004758 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
100081ae:	69fb      	ldr	r3, [r7, #28]
100081b0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100081b2:	e00e      	b.n	100081d2 <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_LSE:
          frequency = LSE_VALUE;
100081b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
100081b8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100081ba:	e00a      	b.n	100081d2 <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_LSI:
          frequency = LSI_VALUE;
100081bc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
100081c0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100081c2:	e006      	b.n	100081d2 <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
100081c4:	f7fc fd82 	bl	10004ccc <RCC_GetCKPERFreq>
100081c8:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100081ca:	e002      	b.n	100081d2 <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        default:
          frequency = 0;
100081cc:	2300      	movs	r3, #0
100081ce:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100081d0:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_LPTIM45 */
100081d2:	e3e6      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SAI4:
    {
      clksource = __HAL_RCC_GET_SAI4_SOURCE();
100081d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100081d8:	f8d3 38d4 	ldr.w	r3, [r3, #2260]	; 0x8d4
100081dc:	f003 0307 	and.w	r3, r3, #7
100081e0:	633b      	str	r3, [r7, #48]	; 0x30
100081e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100081e4:	2b04      	cmp	r3, #4
100081e6:	d82c      	bhi.n	10008242 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
100081e8:	a201      	add	r2, pc, #4	; (adr r2, 100081f0 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>)
100081ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100081ee:	bf00      	nop
100081f0:	10008205 	.word	0x10008205
100081f4:	10008215 	.word	0x10008215
100081f8:	10008235 	.word	0x10008235
100081fc:	1000823b 	.word	0x1000823b
10008200:	10008225 	.word	0x10008225

      switch (clksource)
      {
        case RCC_SAI4CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008204:	f107 030c 	add.w	r3, r7, #12
10008208:	4618      	mov	r0, r3
1000820a:	f7fc fb9f 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000820e:	693b      	ldr	r3, [r7, #16]
10008210:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008212:	e019      	b.n	10008248 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        case RCC_SAI4CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008214:	f107 0318 	add.w	r3, r7, #24
10008218:	4618      	mov	r0, r3
1000821a:	f7fc fa9d 	bl	10004758 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
1000821e:	69fb      	ldr	r3, [r7, #28]
10008220:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008222:	e011      	b.n	10008248 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        case RCC_SAI4CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008224:	f107 0318 	add.w	r3, r7, #24
10008228:	4618      	mov	r0, r3
1000822a:	f7fc fa95 	bl	10004758 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
1000822e:	6a3b      	ldr	r3, [r7, #32]
10008230:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008232:	e009      	b.n	10008248 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        case RCC_SAI4CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10008234:	4b52      	ldr	r3, [pc, #328]	; (10008380 <HAL_RCCEx_GetPeriphCLKFreq+0xf6c>)
10008236:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008238:	e006      	b.n	10008248 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        case RCC_SAI4CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
1000823a:	f7fc fd47 	bl	10004ccc <RCC_GetCKPERFreq>
1000823e:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008240:	e002      	b.n	10008248 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        default:
          frequency = 0;
10008242:	2300      	movs	r3, #0
10008244:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008246:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SAI4
10008248:	e3ab      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_TEMP:
    {
      frequency = LSE_VALUE;
1000824a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
1000824e:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_TEMP
10008250:	e3a7      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


#if defined(DSI)
    case RCC_PERIPHCLK_DSI:
    {
      clksource = __HAL_RCC_GET_DSI_SOURCE();
10008252:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008256:	f8d3 3924 	ldr.w	r3, [r3, #2340]	; 0x924
1000825a:	f003 0301 	and.w	r3, r3, #1
1000825e:	633b      	str	r3, [r7, #48]	; 0x30
10008260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008262:	2b00      	cmp	r3, #0
10008264:	d003      	beq.n	1000826e <HAL_RCCEx_GetPeriphCLKFreq+0xe5a>
10008266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008268:	2b01      	cmp	r3, #1
1000826a:	d003      	beq.n	10008274 <HAL_RCCEx_GetPeriphCLKFreq+0xe60>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
          frequency = pll4_clocks.PLL4_P_Frequency;
          break;
      }
    }
    break;//RCC_PERIPHCLK_DSI
1000826c:	e399      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
          frequency = 0;
1000826e:	2300      	movs	r3, #0
10008270:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008272:	e007      	b.n	10008284 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008274:	f107 030c 	add.w	r3, r7, #12
10008278:	4618      	mov	r0, r3
1000827a:	f7fc fb67 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
1000827e:	68fb      	ldr	r3, [r7, #12]
10008280:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008282:	bf00      	nop
    break;//RCC_PERIPHCLK_DSI
10008284:	e38d      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
#endif /*DSI*/

    case RCC_PERIPHCLK_LTDC:
    {
      HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008286:	f107 030c 	add.w	r3, r7, #12
1000828a:	4618      	mov	r0, r3
1000828c:	f7fc fb5e 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
      frequency = pll4_clocks.PLL4_Q_Frequency;
10008290:	693b      	ldr	r3, [r7, #16]
10008292:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_LTDC
10008294:	e385      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_USBPHY:
    {
      clksource = __HAL_RCC_GET_USBPHY_SOURCE();
10008296:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000829a:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
1000829e:	f003 0303 	and.w	r3, r3, #3
100082a2:	633b      	str	r3, [r7, #48]	; 0x30
100082a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100082a6:	2b02      	cmp	r3, #2
100082a8:	d014      	beq.n	100082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
100082aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100082ac:	2b02      	cmp	r3, #2
100082ae:	d814      	bhi.n	100082da <HAL_RCCEx_GetPeriphCLKFreq+0xec6>
100082b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100082b2:	2b00      	cmp	r3, #0
100082b4:	d003      	beq.n	100082be <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
100082b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100082b8:	2b01      	cmp	r3, #1
100082ba:	d003      	beq.n	100082c4 <HAL_RCCEx_GetPeriphCLKFreq+0xeb0>
100082bc:	e00d      	b.n	100082da <HAL_RCCEx_GetPeriphCLKFreq+0xec6>

      switch (clksource)
      {
        case RCC_USBPHYCLKSOURCE_HSE:
          frequency = HSE_VALUE;
100082be:	4b2f      	ldr	r3, [pc, #188]	; (1000837c <HAL_RCCEx_GetPeriphCLKFreq+0xf68>)
100082c0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100082c2:	e00d      	b.n	100082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xecc>

        case RCC_USBPHYCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100082c4:	f107 030c 	add.w	r3, r7, #12
100082c8:	4618      	mov	r0, r3
100082ca:	f7fc fb3f 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
100082ce:	697b      	ldr	r3, [r7, #20]
100082d0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100082d2:	e005      	b.n	100082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xecc>

        case RCC_USBPHYCLKSOURCE_HSE2:
          frequency = (HSE_VALUE / 2UL);
100082d4:	4b2b      	ldr	r3, [pc, #172]	; (10008384 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>)
100082d6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100082d8:	e002      	b.n	100082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xecc>

        default:
          frequency = 0;
100082da:	2300      	movs	r3, #0
100082dc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100082de:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_USBPHY
100082e0:	e35f      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_IWDG2:
    {
      frequency = LSI_VALUE;
100082e2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
100082e6:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_IWDG2
100082e8:	e35b      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_DDRPHYC:
    {
      HAL_RCC_GetPLL2ClockFreq(&pll2_clocks);
100082ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
100082ee:	4618      	mov	r0, r3
100082f0:	f7fc f946 	bl	10004580 <HAL_RCC_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
100082f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100082f6:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_DDRPHYC
100082f8:	e353      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_RTC:
    {
      clksource = __HAL_RCC_GET_RTC_SOURCE();
100082fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100082fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10008302:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
10008306:	633b      	str	r3, [r7, #48]	; 0x30
10008308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000830a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
1000830e:	d020      	beq.n	10008352 <HAL_RCCEx_GetPeriphCLKFreq+0xf3e>
10008310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008312:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
10008316:	f200 8339 	bhi.w	1000898c <HAL_RCCEx_GetPeriphCLKFreq+0x1578>
1000831a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000831c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
10008320:	d013      	beq.n	1000834a <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
10008322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008324:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
10008328:	f200 8330 	bhi.w	1000898c <HAL_RCCEx_GetPeriphCLKFreq+0x1578>
1000832c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000832e:	2b00      	cmp	r3, #0
10008330:	d004      	beq.n	1000833c <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
10008332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
10008338:	d003      	beq.n	10008342 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        case RCC_RTCCLKSOURCE_HSE_DIV:
          frequency = (HSE_VALUE / __HAL_RCC_GET_RTC_HSEDIV());
          break;
      }
    }
    break;//RCC_PERIPHCLK_RTC
1000833a:	e327      	b.n	1000898c <HAL_RCCEx_GetPeriphCLKFreq+0x1578>
          frequency = 0;
1000833c:	2300      	movs	r3, #0
1000833e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008340:	e012      	b.n	10008368 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>
          frequency = LSE_VALUE;
10008342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10008346:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008348:	e00e      	b.n	10008368 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>
          frequency = LSI_VALUE;
1000834a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
1000834e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008350:	e00a      	b.n	10008368 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>
          frequency = (HSE_VALUE / __HAL_RCC_GET_RTC_HSEDIV());
10008352:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10008358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1000835c:	3301      	adds	r3, #1
1000835e:	4a07      	ldr	r2, [pc, #28]	; (1000837c <HAL_RCCEx_GetPeriphCLKFreq+0xf68>)
10008360:	fbb2 f3f3 	udiv	r3, r2, r3
10008364:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008366:	bf00      	nop
    break;//RCC_PERIPHCLK_RTC
10008368:	e310      	b.n	1000898c <HAL_RCCEx_GetPeriphCLKFreq+0x1578>


    case RCC_PERIPHCLK_IWDG1:
    {
      frequency = LSI_VALUE;
1000836a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
1000836e:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_IWDG1
10008370:	e317      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008372:	bf00      	nop
10008374:	03d09000 	.word	0x03d09000
10008378:	003d0900 	.word	0x003d0900
1000837c:	016e3600 	.word	0x016e3600
10008380:	00bb8000 	.word	0x00bb8000
10008384:	00b71b00 	.word	0x00b71b00


    case RCC_PERIPHCLK_I2C46:
    {
      clksource = __HAL_RCC_GET_I2C46_SOURCE();
10008388:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000838c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10008390:	f003 0307 	and.w	r3, r3, #7
10008394:	633b      	str	r3, [r7, #48]	; 0x30
10008396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008398:	2b03      	cmp	r3, #3
1000839a:	d824      	bhi.n	100083e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfd2>
1000839c:	a201      	add	r2, pc, #4	; (adr r2, 100083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf90>)
1000839e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100083a2:	bf00      	nop
100083a4:	100083b5 	.word	0x100083b5
100083a8:	100083bd 	.word	0x100083bd
100083ac:	100083cd 	.word	0x100083cd
100083b0:	100083e1 	.word	0x100083e1

      switch (clksource)
      {
        case RCC_I2C46CLKSOURCE_PCLK5:
          frequency = HAL_RCC_GetPCLK5Freq();
100083b4:	f7fc fc23 	bl	10004bfe <HAL_RCC_GetPCLK5Freq>
100083b8:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100083ba:	e017      	b.n	100083ec <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>

        case RCC_I2C46CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100083bc:	f107 0318 	add.w	r3, r7, #24
100083c0:	4618      	mov	r0, r3
100083c2:	f7fc f9c9 	bl	10004758 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
100083c6:	69fb      	ldr	r3, [r7, #28]
100083c8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100083ca:	e00f      	b.n	100083ec <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>

        case RCC_I2C46CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100083cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100083d0:	699b      	ldr	r3, [r3, #24]
100083d2:	f003 0303 	and.w	r3, r3, #3
100083d6:	4ab3      	ldr	r2, [pc, #716]	; (100086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1290>)
100083d8:	fa22 f303 	lsr.w	r3, r2, r3
100083dc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100083de:	e005      	b.n	100083ec <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>

        case RCC_I2C46CLKSOURCE_CSI:
          frequency = CSI_VALUE;
100083e0:	4bb1      	ldr	r3, [pc, #708]	; (100086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
100083e2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100083e4:	e002      	b.n	100083ec <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>

        default:
          frequency = 0;
100083e6:	2300      	movs	r3, #0
100083e8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100083ea:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_I2C46 */
100083ec:	e2d9      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SPI6:
    {
      clksource = __HAL_RCC_GET_SPI6_SOURCE();
100083ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100083f2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
100083f6:	f003 0307 	and.w	r3, r3, #7
100083fa:	633b      	str	r3, [r7, #48]	; 0x30
100083fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100083fe:	2b05      	cmp	r3, #5
10008400:	d832      	bhi.n	10008468 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
10008402:	a201      	add	r2, pc, #4	; (adr r2, 10008408 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
10008404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008408:	10008421 	.word	0x10008421
1000840c:	10008429 	.word	0x10008429
10008410:	10008439 	.word	0x10008439
10008414:	1000844d 	.word	0x1000844d
10008418:	10008453 	.word	0x10008453
1000841c:	10008459 	.word	0x10008459

      switch (clksource)
      {
        case RCC_SPI6CLKSOURCE_PCLK5:
          frequency = HAL_RCC_GetPCLK5Freq();
10008420:	f7fc fbed 	bl	10004bfe <HAL_RCC_GetPCLK5Freq>
10008424:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008426:	e022      	b.n	1000846e <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008428:	f107 030c 	add.w	r3, r7, #12
1000842c:	4618      	mov	r0, r3
1000842e:	f7fc fa8d 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008432:	693b      	ldr	r3, [r7, #16]
10008434:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008436:	e01a      	b.n	1000846e <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008438:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000843c:	699b      	ldr	r3, [r3, #24]
1000843e:	f003 0303 	and.w	r3, r3, #3
10008442:	4a98      	ldr	r2, [pc, #608]	; (100086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1290>)
10008444:	fa22 f303 	lsr.w	r3, r2, r3
10008448:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000844a:	e010      	b.n	1000846e <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_CSI:
          frequency = CSI_VALUE;
1000844c:	4b96      	ldr	r3, [pc, #600]	; (100086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
1000844e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008450:	e00d      	b.n	1000846e <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_HSE:
          frequency = HSE_VALUE;
10008452:	4b96      	ldr	r3, [pc, #600]	; (100086ac <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
10008454:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008456:	e00a      	b.n	1000846e <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008458:	f107 0318 	add.w	r3, r7, #24
1000845c:	4618      	mov	r0, r3
1000845e:	f7fc f97b 	bl	10004758 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008462:	69fb      	ldr	r3, [r7, #28]
10008464:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008466:	e002      	b.n	1000846e <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        default:
          frequency = 0;
10008468:	2300      	movs	r3, #0
1000846a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000846c:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SPI6
1000846e:	e298      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_USART1:
    {
      clksource = __HAL_RCC_GET_USART1_SOURCE();
10008470:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008474:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10008478:	f003 0307 	and.w	r3, r3, #7
1000847c:	633b      	str	r3, [r7, #48]	; 0x30
1000847e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008480:	2b05      	cmp	r3, #5
10008482:	d833      	bhi.n	100084ec <HAL_RCCEx_GetPeriphCLKFreq+0x10d8>
10008484:	a201      	add	r2, pc, #4	; (adr r2, 1000848c <HAL_RCCEx_GetPeriphCLKFreq+0x1078>)
10008486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000848a:	bf00      	nop
1000848c:	100084a5 	.word	0x100084a5
10008490:	100084ad 	.word	0x100084ad
10008494:	100084bd 	.word	0x100084bd
10008498:	100084d1 	.word	0x100084d1
1000849c:	100084d7 	.word	0x100084d7
100084a0:	100084e7 	.word	0x100084e7

      switch (clksource)
      {
        case RCC_USART1CLKSOURCE_PCLK5:
          frequency = HAL_RCC_GetPCLK5Freq();
100084a4:	f7fc fbab 	bl	10004bfe <HAL_RCC_GetPCLK5Freq>
100084a8:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100084aa:	e022      	b.n	100084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100084ac:	f107 0318 	add.w	r3, r7, #24
100084b0:	4618      	mov	r0, r3
100084b2:	f7fc f951 	bl	10004758 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
100084b6:	69fb      	ldr	r3, [r7, #28]
100084b8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100084ba:	e01a      	b.n	100084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100084bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100084c0:	699b      	ldr	r3, [r3, #24]
100084c2:	f003 0303 	and.w	r3, r3, #3
100084c6:	4a77      	ldr	r2, [pc, #476]	; (100086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1290>)
100084c8:	fa22 f303 	lsr.w	r3, r2, r3
100084cc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100084ce:	e010      	b.n	100084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_CSI:
          frequency = CSI_VALUE;
100084d0:	4b75      	ldr	r3, [pc, #468]	; (100086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
100084d2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100084d4:	e00d      	b.n	100084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100084d6:	f107 030c 	add.w	r3, r7, #12
100084da:	4618      	mov	r0, r3
100084dc:	f7fc fa36 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
100084e0:	693b      	ldr	r3, [r7, #16]
100084e2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100084e4:	e005      	b.n	100084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_HSE:
          frequency = HSE_VALUE;
100084e6:	4b71      	ldr	r3, [pc, #452]	; (100086ac <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
100084e8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100084ea:	e002      	b.n	100084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        default:
          frequency = 0;
100084ec:	2300      	movs	r3, #0
100084ee:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100084f0:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_USART1
100084f2:	e256      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_STGEN:
    {
      clksource = __HAL_RCC_GET_STGEN_SOURCE();
100084f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100084f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
100084fc:	f003 0303 	and.w	r3, r3, #3
10008500:	633b      	str	r3, [r7, #48]	; 0x30
10008502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008504:	2b00      	cmp	r3, #0
10008506:	d003      	beq.n	10008510 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
10008508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000850a:	2b01      	cmp	r3, #1
1000850c:	d00a      	beq.n	10008524 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
1000850e:	e00c      	b.n	1000852a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>

      switch (clksource)
      {
        case RCC_STGENCLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008510:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008514:	699b      	ldr	r3, [r3, #24]
10008516:	f003 0303 	and.w	r3, r3, #3
1000851a:	4a62      	ldr	r2, [pc, #392]	; (100086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1290>)
1000851c:	fa22 f303 	lsr.w	r3, r2, r3
10008520:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008522:	e005      	b.n	10008530 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>

        case RCC_STGENCLKSOURCE_HSE:
          frequency = HSE_VALUE;
10008524:	4b61      	ldr	r3, [pc, #388]	; (100086ac <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
10008526:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008528:	e002      	b.n	10008530 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>

        default:
          frequency = 0;
1000852a:	2300      	movs	r3, #0
1000852c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000852e:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_STGEN
10008530:	e237      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_QSPI:
    {
      clksource = __HAL_RCC_GET_QSPI_SOURCE();
10008532:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008536:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
1000853a:	f003 0303 	and.w	r3, r3, #3
1000853e:	633b      	str	r3, [r7, #48]	; 0x30
10008540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008542:	2b03      	cmp	r3, #3
10008544:	d822      	bhi.n	1000858c <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
10008546:	a201      	add	r2, pc, #4	; (adr r2, 1000854c <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
10008548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000854c:	1000855d 	.word	0x1000855d
10008550:	10008565 	.word	0x10008565
10008554:	10008575 	.word	0x10008575
10008558:	10008585 	.word	0x10008585

      switch (clksource)
      {
        case RCC_QSPICLKSOURCE_ACLK:
          frequency = HAL_RCC_GetACLKFreq();
1000855c:	f7fc fb69 	bl	10004c32 <HAL_RCC_GetACLKFreq>
10008560:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008562:	e016      	b.n	10008592 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

        case RCC_QSPICLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008564:	f107 0318 	add.w	r3, r7, #24
10008568:	4618      	mov	r0, r3
1000856a:	f7fc f8f5 	bl	10004758 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
1000856e:	6a3b      	ldr	r3, [r7, #32]
10008570:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008572:	e00e      	b.n	10008592 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

        case RCC_QSPICLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008574:	f107 030c 	add.w	r3, r7, #12
10008578:	4618      	mov	r0, r3
1000857a:	f7fc f9e7 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
1000857e:	68fb      	ldr	r3, [r7, #12]
10008580:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008582:	e006      	b.n	10008592 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

        case RCC_QSPICLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008584:	f7fc fba2 	bl	10004ccc <RCC_GetCKPERFreq>
10008588:	6378      	str	r0, [r7, #52]	; 0x34
          break;
1000858a:	e002      	b.n	10008592 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

        default:
          frequency = 0;
1000858c:	2300      	movs	r3, #0
1000858e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008590:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_QSPI
10008592:	e206      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_ETH:
    {
      clksource = __HAL_RCC_GET_ETH_SOURCE();
10008594:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008598:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
1000859c:	f003 0303 	and.w	r3, r3, #3
100085a0:	633b      	str	r3, [r7, #48]	; 0x30
100085a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100085a4:	2b00      	cmp	r3, #0
100085a6:	d003      	beq.n	100085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x119c>
100085a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100085aa:	2b01      	cmp	r3, #1
100085ac:	d008      	beq.n	100085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x11ac>
100085ae:	e00f      	b.n	100085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>

      switch (clksource)
      {
        case RCC_ETHCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100085b0:	f107 030c 	add.w	r3, r7, #12
100085b4:	4618      	mov	r0, r3
100085b6:	f7fc f9c9 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
100085ba:	68fb      	ldr	r3, [r7, #12]
100085bc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100085be:	e00a      	b.n	100085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x11c2>

        case RCC_ETHCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100085c0:	f107 0318 	add.w	r3, r7, #24
100085c4:	4618      	mov	r0, r3
100085c6:	f7fc f8c7 	bl	10004758 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
100085ca:	69fb      	ldr	r3, [r7, #28]
100085cc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100085ce:	e002      	b.n	100085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x11c2>

        default:
          frequency = 0;
100085d0:	2300      	movs	r3, #0
100085d2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100085d4:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_ETH
100085d6:	e1e4      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_FMC:
    {
      clksource = __HAL_RCC_GET_FMC_SOURCE();
100085d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100085dc:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
100085e0:	f003 0303 	and.w	r3, r3, #3
100085e4:	633b      	str	r3, [r7, #48]	; 0x30
100085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100085e8:	2b03      	cmp	r3, #3
100085ea:	f200 81d1 	bhi.w	10008990 <HAL_RCCEx_GetPeriphCLKFreq+0x157c>
100085ee:	a201      	add	r2, pc, #4	; (adr r2, 100085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
100085f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100085f4:	10008605 	.word	0x10008605
100085f8:	1000860d 	.word	0x1000860d
100085fc:	1000861d 	.word	0x1000861d
10008600:	1000862d 	.word	0x1000862d

      switch (clksource)
      {
        case RCC_FMCCLKSOURCE_ACLK:
          frequency = HAL_RCC_GetACLKFreq();
10008604:	f7fc fb15 	bl	10004c32 <HAL_RCC_GetACLKFreq>
10008608:	6378      	str	r0, [r7, #52]	; 0x34
          break;
1000860a:	e013      	b.n	10008634 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>

        case RCC_FMCCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000860c:	f107 0318 	add.w	r3, r7, #24
10008610:	4618      	mov	r0, r3
10008612:	f7fc f8a1 	bl	10004758 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10008616:	6a3b      	ldr	r3, [r7, #32]
10008618:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000861a:	e00b      	b.n	10008634 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>

        case RCC_FMCCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000861c:	f107 030c 	add.w	r3, r7, #12
10008620:	4618      	mov	r0, r3
10008622:	f7fc f993 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10008626:	68fb      	ldr	r3, [r7, #12]
10008628:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000862a:	e003      	b.n	10008634 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>

        case RCC_FMCCLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
1000862c:	f7fc fb4e 	bl	10004ccc <RCC_GetCKPERFreq>
10008630:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008632:	bf00      	nop

      }
    }
    break;//RCC_PERIPHCLK_FMC
10008634:	e1ac      	b.n	10008990 <HAL_RCCEx_GetPeriphCLKFreq+0x157c>


    case RCC_PERIPHCLK_GPU:
    {
      HAL_RCC_GetPLL2ClockFreq(&pll2_clocks);
10008636:	f107 0324 	add.w	r3, r7, #36	; 0x24
1000863a:	4618      	mov	r0, r3
1000863c:	f7fb ffa0 	bl	10004580 <HAL_RCC_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_Q_Frequency;
10008640:	6abb      	ldr	r3, [r7, #40]	; 0x28
10008642:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_GPU
10008644:	e1ad      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_USBO:
    {
      clksource = __HAL_RCC_GET_USBO_SOURCE();
10008646:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000864a:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
1000864e:	f003 0310 	and.w	r3, r3, #16
10008652:	633b      	str	r3, [r7, #48]	; 0x30
10008654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008656:	2b00      	cmp	r3, #0
10008658:	d003      	beq.n	10008662 <HAL_RCCEx_GetPeriphCLKFreq+0x124e>
1000865a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000865c:	2b10      	cmp	r3, #16
1000865e:	d008      	beq.n	10008672 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
        case RCC_USBOCLKSOURCE_PHY:
          frequency = USB_PHY_VALUE;
          break;
      }
    }
    break;//RCC_PERIPHCLK_USBO
10008660:	e19f      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008662:	f107 030c 	add.w	r3, r7, #12
10008666:	4618      	mov	r0, r3
10008668:	f7fc f970 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
1000866c:	697b      	ldr	r3, [r7, #20]
1000866e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008670:	e002      	b.n	10008678 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>
          frequency = USB_PHY_VALUE;
10008672:	4b0f      	ldr	r3, [pc, #60]	; (100086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
10008674:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008676:	bf00      	nop
    break;//RCC_PERIPHCLK_USBO
10008678:	e193      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SDMMC3:
    {
      clksource = __HAL_RCC_GET_SDMMC3_SOURCE();
1000867a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000867e:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
10008682:	f003 0307 	and.w	r3, r3, #7
10008686:	633b      	str	r3, [r7, #48]	; 0x30
10008688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000868a:	2b03      	cmp	r3, #3
1000868c:	d830      	bhi.n	100086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
1000868e:	a201      	add	r2, pc, #4	; (adr r2, 10008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
10008690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008694:	100086b5 	.word	0x100086b5
10008698:	100086bd 	.word	0x100086bd
1000869c:	100086cd 	.word	0x100086cd
100086a0:	100086dd 	.word	0x100086dd
100086a4:	03d09000 	.word	0x03d09000
100086a8:	003d0900 	.word	0x003d0900
100086ac:	016e3600 	.word	0x016e3600
100086b0:	02dc6c00 	.word	0x02dc6c00

      switch (clksource)
      {
        case RCC_SDMMC3CLKSOURCE_HCLK2:
          frequency = HAL_RCC_GetHCLK2Freq();
100086b4:	f7fc fae1 	bl	10004c7a <HAL_RCC_GetHCLK2Freq>
100086b8:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100086ba:	e01c      	b.n	100086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>

        case RCC_SDMMC3CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100086bc:	f107 0318 	add.w	r3, r7, #24
100086c0:	4618      	mov	r0, r3
100086c2:	f7fc f849 	bl	10004758 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
100086c6:	6a3b      	ldr	r3, [r7, #32]
100086c8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100086ca:	e014      	b.n	100086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>

        case RCC_SDMMC3CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100086cc:	f107 030c 	add.w	r3, r7, #12
100086d0:	4618      	mov	r0, r3
100086d2:	f7fc f93b 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
100086d6:	68fb      	ldr	r3, [r7, #12]
100086d8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100086da:	e00c      	b.n	100086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>

        case RCC_SDMMC3CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100086dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100086e0:	699b      	ldr	r3, [r3, #24]
100086e2:	f003 0303 	and.w	r3, r3, #3
100086e6:	4ab1      	ldr	r2, [pc, #708]	; (100089ac <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
100086e8:	fa22 f303 	lsr.w	r3, r2, r3
100086ec:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100086ee:	e002      	b.n	100086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>

        default:
          frequency = 0;
100086f0:	2300      	movs	r3, #0
100086f2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100086f4:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SDMMC3
100086f6:	e154      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_ADC:
    {
      clksource = __HAL_RCC_GET_ADC_SOURCE();
100086f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100086fc:	f8d3 3928 	ldr.w	r3, [r3, #2344]	; 0x928
10008700:	f003 0303 	and.w	r3, r3, #3
10008704:	633b      	str	r3, [r7, #48]	; 0x30
10008706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008708:	2b02      	cmp	r3, #2
1000870a:	d015      	beq.n	10008738 <HAL_RCCEx_GetPeriphCLKFreq+0x1324>
1000870c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000870e:	2b02      	cmp	r3, #2
10008710:	d81a      	bhi.n	10008748 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
10008712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008714:	2b00      	cmp	r3, #0
10008716:	d003      	beq.n	10008720 <HAL_RCCEx_GetPeriphCLKFreq+0x130c>
10008718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000871a:	2b01      	cmp	r3, #1
1000871c:	d008      	beq.n	10008730 <HAL_RCCEx_GetPeriphCLKFreq+0x131c>
1000871e:	e013      	b.n	10008748 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>

      switch (clksource)
      {
        case RCC_ADCCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008720:	f107 030c 	add.w	r3, r7, #12
10008724:	4618      	mov	r0, r3
10008726:	f7fc f911 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
1000872a:	697b      	ldr	r3, [r7, #20]
1000872c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000872e:	e00e      	b.n	1000874e <HAL_RCCEx_GetPeriphCLKFreq+0x133a>

        case RCC_ADCCLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008730:	f7fc facc 	bl	10004ccc <RCC_GetCKPERFreq>
10008734:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008736:	e00a      	b.n	1000874e <HAL_RCCEx_GetPeriphCLKFreq+0x133a>

        case RCC_ADCCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008738:	f107 0318 	add.w	r3, r7, #24
1000873c:	4618      	mov	r0, r3
1000873e:	f7fc f80b 	bl	10004758 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008742:	69fb      	ldr	r3, [r7, #28]
10008744:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008746:	e002      	b.n	1000874e <HAL_RCCEx_GetPeriphCLKFreq+0x133a>

        default:
          frequency = 0;
10008748:	2300      	movs	r3, #0
1000874a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000874c:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_ADC */
1000874e:	e128      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_RNG2:
    {
      clksource = __HAL_RCC_GET_RNG2_SOURCE();
10008750:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008754:	f8d3 3920 	ldr.w	r3, [r3, #2336]	; 0x920
10008758:	f003 0303 	and.w	r3, r3, #3
1000875c:	633b      	str	r3, [r7, #48]	; 0x30
1000875e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008760:	2b03      	cmp	r3, #3
10008762:	f200 8117 	bhi.w	10008994 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
10008766:	a201      	add	r2, pc, #4	; (adr r2, 1000876c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>)
10008768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000876c:	1000877d 	.word	0x1000877d
10008770:	10008783 	.word	0x10008783
10008774:	10008793 	.word	0x10008793
10008778:	1000879b 	.word	0x1000879b

      switch (clksource)
      {
        case RCC_RNG2CLKSOURCE_CSI:
          frequency = CSI_VALUE;
1000877c:	4b8c      	ldr	r3, [pc, #560]	; (100089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
1000877e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008780:	e00f      	b.n	100087a2 <HAL_RCCEx_GetPeriphCLKFreq+0x138e>

        case RCC_RNG2CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008782:	f107 030c 	add.w	r3, r7, #12
10008786:	4618      	mov	r0, r3
10008788:	f7fc f8e0 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
1000878c:	697b      	ldr	r3, [r7, #20]
1000878e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008790:	e007      	b.n	100087a2 <HAL_RCCEx_GetPeriphCLKFreq+0x138e>

        case RCC_RNG2CLKSOURCE_LSE:
          frequency = LSE_VALUE;
10008792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10008796:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008798:	e003      	b.n	100087a2 <HAL_RCCEx_GetPeriphCLKFreq+0x138e>

        case RCC_RNG2CLKSOURCE_LSI:
          frequency = LSI_VALUE;
1000879a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
1000879e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100087a0:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_RNG2
100087a2:	e0f7      	b.n	10008994 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>


    case RCC_PERIPHCLK_RNG1:
    {
      clksource = __HAL_RCC_GET_RNG1_SOURCE();
100087a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100087a8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
100087ac:	f003 0303 	and.w	r3, r3, #3
100087b0:	633b      	str	r3, [r7, #48]	; 0x30
100087b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100087b4:	2b03      	cmp	r3, #3
100087b6:	f200 80ef 	bhi.w	10008998 <HAL_RCCEx_GetPeriphCLKFreq+0x1584>
100087ba:	a201      	add	r2, pc, #4	; (adr r2, 100087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
100087bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100087c0:	100087d1 	.word	0x100087d1
100087c4:	100087d7 	.word	0x100087d7
100087c8:	100087e7 	.word	0x100087e7
100087cc:	100087ef 	.word	0x100087ef

      switch (clksource)
      {
        case RCC_RNG1CLKSOURCE_CSI:
          frequency = CSI_VALUE;
100087d0:	4b77      	ldr	r3, [pc, #476]	; (100089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
100087d2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100087d4:	e00f      	b.n	100087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>

        case RCC_RNG1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100087d6:	f107 030c 	add.w	r3, r7, #12
100087da:	4618      	mov	r0, r3
100087dc:	f7fc f8b6 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
100087e0:	697b      	ldr	r3, [r7, #20]
100087e2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100087e4:	e007      	b.n	100087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>

        case RCC_RNG1CLKSOURCE_LSE:
          frequency = LSE_VALUE;
100087e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
100087ea:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100087ec:	e003      	b.n	100087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>

        case RCC_RNG1CLKSOURCE_LSI:
          frequency = LSI_VALUE;
100087ee:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
100087f2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100087f4:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_RNG1
100087f6:	e0cf      	b.n	10008998 <HAL_RCCEx_GetPeriphCLKFreq+0x1584>

    case RCC_PERIPHCLK_SDMMC12:
    {
      clksource = __HAL_RCC_GET_SDMMC12_SOURCE();
100087f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100087fc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
10008800:	f003 0307 	and.w	r3, r3, #7
10008804:	633b      	str	r3, [r7, #48]	; 0x30
10008806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008808:	2b03      	cmp	r3, #3
1000880a:	d829      	bhi.n	10008860 <HAL_RCCEx_GetPeriphCLKFreq+0x144c>
1000880c:	a201      	add	r2, pc, #4	; (adr r2, 10008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>)
1000880e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008812:	bf00      	nop
10008814:	10008825 	.word	0x10008825
10008818:	1000882d 	.word	0x1000882d
1000881c:	1000883d 	.word	0x1000883d
10008820:	1000884d 	.word	0x1000884d

      switch (clksource)
      {
        case RCC_SDMMC12CLKSOURCE_HCLK6:
          frequency = HAL_RCC_GetHCLK6Freq();
10008824:	f7fc fa22 	bl	10004c6c <HAL_RCC_GetHCLK6Freq>
10008828:	6378      	str	r0, [r7, #52]	; 0x34
          break;
1000882a:	e01c      	b.n	10008866 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>

        case RCC_SDMMC12CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000882c:	f107 0318 	add.w	r3, r7, #24
10008830:	4618      	mov	r0, r3
10008832:	f7fb ff91 	bl	10004758 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10008836:	6a3b      	ldr	r3, [r7, #32]
10008838:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000883a:	e014      	b.n	10008866 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>

        case RCC_SDMMC12CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000883c:	f107 030c 	add.w	r3, r7, #12
10008840:	4618      	mov	r0, r3
10008842:	f7fc f883 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10008846:	68fb      	ldr	r3, [r7, #12]
10008848:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000884a:	e00c      	b.n	10008866 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>

        case RCC_SDMMC12CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
1000884c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008850:	699b      	ldr	r3, [r3, #24]
10008852:	f003 0303 	and.w	r3, r3, #3
10008856:	4a55      	ldr	r2, [pc, #340]	; (100089ac <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
10008858:	fa22 f303 	lsr.w	r3, r2, r3
1000885c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000885e:	e002      	b.n	10008866 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>

        default:
          frequency = 0;
10008860:	2300      	movs	r3, #0
10008862:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008864:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_SDMMC12 */
10008866:	e09c      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_TIMG1:
    {
      frequency = HAL_RCC_GetMCUFreq();
10008868:	f7fc fa15 	bl	10004c96 <HAL_RCC_GetMCUFreq>
1000886c:	6378      	str	r0, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_TIMG1PRES() == RCC_TIMG1PRES_ACTIVATED)
1000886e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008872:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
10008876:	f003 0301 	and.w	r3, r3, #1
1000887a:	2b01      	cmp	r3, #1
1000887c:	d116      	bne.n	100088ac <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
      {
        switch (__HAL_RCC_GET_APB1_DIV())
1000887e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008882:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10008886:	f003 0307 	and.w	r3, r3, #7
1000888a:	2b04      	cmp	r3, #4
1000888c:	d00a      	beq.n	100088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
1000888e:	2b04      	cmp	r3, #4
10008890:	f200 8084 	bhi.w	1000899c <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
10008894:	2b02      	cmp	r3, #2
10008896:	d92b      	bls.n	100088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x14dc>
10008898:	2b03      	cmp	r3, #3
1000889a:	d17f      	bne.n	1000899c <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
          case RCC_APB1_DIV1:
          case RCC_APB1_DIV2:
          case RCC_APB1_DIV4:
            break;
          case RCC_APB1_DIV8:
            frequency /= 2UL;
1000889c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000889e:	085b      	lsrs	r3, r3, #1
100088a0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
100088a2:	e028      	b.n	100088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
          case RCC_APB1_DIV16:
            frequency /= 4UL;
100088a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100088a6:	089b      	lsrs	r3, r3, #2
100088a8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
100088aa:	e024      	b.n	100088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
        }
      }
      else
      {
        switch (__HAL_RCC_GET_APB1_DIV())
100088ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100088b0:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
100088b4:	f003 0307 	and.w	r3, r3, #7
100088b8:	2b04      	cmp	r3, #4
100088ba:	d86f      	bhi.n	1000899c <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
100088bc:	a201      	add	r2, pc, #4	; (adr r2, 100088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x14b0>)
100088be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100088c2:	bf00      	nop
100088c4:	100088f5 	.word	0x100088f5
100088c8:	100088f5 	.word	0x100088f5
100088cc:	100088d9 	.word	0x100088d9
100088d0:	100088e1 	.word	0x100088e1
100088d4:	100088e9 	.word	0x100088e9
        {
          case RCC_APB1_DIV1:
          case RCC_APB1_DIV2:
            break;
          case RCC_APB1_DIV4:
            frequency /= 2UL;
100088d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100088da:	085b      	lsrs	r3, r3, #1
100088dc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
100088de:	e00a      	b.n	100088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
          case RCC_APB1_DIV8:
            frequency /= 4UL;
100088e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100088e2:	089b      	lsrs	r3, r3, #2
100088e4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
100088e6:	e006      	b.n	100088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
          case RCC_APB1_DIV16:
            frequency /= 8UL;
100088e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100088ea:	08db      	lsrs	r3, r3, #3
100088ec:	637b      	str	r3, [r7, #52]	; 0x34
            break;
100088ee:	e002      	b.n	100088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
            break;
100088f0:	bf00      	nop
100088f2:	e053      	b.n	1000899c <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
            break;
100088f4:	bf00      	nop
        }
      }
    }
    break;
100088f6:	e051      	b.n	1000899c <HAL_RCCEx_GetPeriphCLKFreq+0x1588>


    case RCC_PERIPHCLK_TIMG2:
    {
      frequency = HAL_RCC_GetMCUFreq();
100088f8:	f7fc f9cd 	bl	10004c96 <HAL_RCC_GetMCUFreq>
100088fc:	6378      	str	r0, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_TIMG2PRES() == RCC_TIMG2PRES_ACTIVATED)
100088fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008902:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
10008906:	f003 0301 	and.w	r3, r3, #1
1000890a:	2b01      	cmp	r3, #1
1000890c:	d115      	bne.n	1000893a <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
      {
        switch (__HAL_RCC_GET_APB2_DIV())
1000890e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008912:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10008916:	f003 0307 	and.w	r3, r3, #7
1000891a:	2b04      	cmp	r3, #4
1000891c:	d009      	beq.n	10008932 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
1000891e:	2b04      	cmp	r3, #4
10008920:	d83e      	bhi.n	100089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
10008922:	2b02      	cmp	r3, #2
10008924:	d92a      	bls.n	1000897c <HAL_RCCEx_GetPeriphCLKFreq+0x1568>
10008926:	2b03      	cmp	r3, #3
10008928:	d13a      	bne.n	100089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
          case RCC_APB2_DIV1:
          case RCC_APB2_DIV2:
          case RCC_APB2_DIV4:
            break;
          case RCC_APB2_DIV8:
            frequency /= 2UL;
1000892a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000892c:	085b      	lsrs	r3, r3, #1
1000892e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008930:	e027      	b.n	10008982 <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
          case RCC_APB2_DIV16:
            frequency /= 4UL;
10008932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008934:	089b      	lsrs	r3, r3, #2
10008936:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008938:	e023      	b.n	10008982 <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
        }
      }
      else
      {
        switch (__HAL_RCC_GET_APB2_DIV())
1000893a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000893e:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10008942:	f003 0307 	and.w	r3, r3, #7
10008946:	2b04      	cmp	r3, #4
10008948:	d82a      	bhi.n	100089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
1000894a:	a201      	add	r2, pc, #4	; (adr r2, 10008950 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
1000894c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008950:	10008981 	.word	0x10008981
10008954:	10008981 	.word	0x10008981
10008958:	10008965 	.word	0x10008965
1000895c:	1000896d 	.word	0x1000896d
10008960:	10008975 	.word	0x10008975
        {
          case RCC_APB2_DIV1:
          case RCC_APB2_DIV2:
            break;
          case RCC_APB2_DIV4:
            frequency /= 2UL;
10008964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008966:	085b      	lsrs	r3, r3, #1
10008968:	637b      	str	r3, [r7, #52]	; 0x34
            break;
1000896a:	e00a      	b.n	10008982 <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
          case RCC_APB2_DIV8:
            frequency /= 4UL;
1000896c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000896e:	089b      	lsrs	r3, r3, #2
10008970:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008972:	e006      	b.n	10008982 <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
          case RCC_APB2_DIV16:
            frequency /= 8UL;
10008974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008976:	08db      	lsrs	r3, r3, #3
10008978:	637b      	str	r3, [r7, #52]	; 0x34
            break;
1000897a:	e002      	b.n	10008982 <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
            break;
1000897c:	bf00      	nop
1000897e:	e00f      	b.n	100089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
            break;
10008980:	bf00      	nop
        }
      }
    }
    break;
10008982:	e00d      	b.n	100089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
      break; /* RCC_PERIPHCLK_I2C12 */
10008984:	bf00      	nop
10008986:	e00c      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
      break; /* RCC_PERIPHCLK_I2C35 */
10008988:	bf00      	nop
1000898a:	e00a      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;//RCC_PERIPHCLK_RTC
1000898c:	bf00      	nop
1000898e:	e008      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;//RCC_PERIPHCLK_FMC
10008990:	bf00      	nop
10008992:	e006      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;//RCC_PERIPHCLK_RNG2
10008994:	bf00      	nop
10008996:	e004      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;//RCC_PERIPHCLK_RNG1
10008998:	bf00      	nop
1000899a:	e002      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;
1000899c:	bf00      	nop
1000899e:	e000      	b.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;
100089a0:	bf00      	nop

  }

  return (frequency);
100089a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
100089a4:	4618      	mov	r0, r3
100089a6:	373c      	adds	r7, #60	; 0x3c
100089a8:	46bd      	mov	sp, r7
100089aa:	bd90      	pop	{r4, r7, pc}
100089ac:	03d09000 	.word	0x03d09000
100089b0:	003d0900 	.word	0x003d0900

100089b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
100089b4:	b580      	push	{r7, lr}
100089b6:	b082      	sub	sp, #8
100089b8:	af00      	add	r7, sp, #0
100089ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
100089bc:	687b      	ldr	r3, [r7, #4]
100089be:	2b00      	cmp	r3, #0
100089c0:	d101      	bne.n	100089c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
100089c2:	2301      	movs	r3, #1
100089c4:	e042      	b.n	10008a4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
100089c6:	687b      	ldr	r3, [r7, #4]
100089c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
100089cc:	2b00      	cmp	r3, #0
100089ce:	d106      	bne.n	100089de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
100089d0:	687b      	ldr	r3, [r7, #4]
100089d2:	2200      	movs	r2, #0
100089d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
100089d8:	6878      	ldr	r0, [r7, #4]
100089da:	f7f7 fffb 	bl	100009d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
100089de:	687b      	ldr	r3, [r7, #4]
100089e0:	2224      	movs	r2, #36	; 0x24
100089e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
100089e6:	687b      	ldr	r3, [r7, #4]
100089e8:	681b      	ldr	r3, [r3, #0]
100089ea:	681a      	ldr	r2, [r3, #0]
100089ec:	687b      	ldr	r3, [r7, #4]
100089ee:	681b      	ldr	r3, [r3, #0]
100089f0:	f022 0201 	bic.w	r2, r2, #1
100089f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
100089f6:	6878      	ldr	r0, [r7, #4]
100089f8:	f000 f8c4 	bl	10008b84 <UART_SetConfig>
100089fc:	4603      	mov	r3, r0
100089fe:	2b01      	cmp	r3, #1
10008a00:	d101      	bne.n	10008a06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
10008a02:	2301      	movs	r3, #1
10008a04:	e022      	b.n	10008a4c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
10008a06:	687b      	ldr	r3, [r7, #4]
10008a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10008a0a:	2b00      	cmp	r3, #0
10008a0c:	d002      	beq.n	10008a14 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
10008a0e:	6878      	ldr	r0, [r7, #4]
10008a10:	f001 f95e 	bl	10009cd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
10008a14:	687b      	ldr	r3, [r7, #4]
10008a16:	681b      	ldr	r3, [r3, #0]
10008a18:	685a      	ldr	r2, [r3, #4]
10008a1a:	687b      	ldr	r3, [r7, #4]
10008a1c:	681b      	ldr	r3, [r3, #0]
10008a1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
10008a22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
10008a24:	687b      	ldr	r3, [r7, #4]
10008a26:	681b      	ldr	r3, [r3, #0]
10008a28:	689a      	ldr	r2, [r3, #8]
10008a2a:	687b      	ldr	r3, [r7, #4]
10008a2c:	681b      	ldr	r3, [r3, #0]
10008a2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
10008a32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
10008a34:	687b      	ldr	r3, [r7, #4]
10008a36:	681b      	ldr	r3, [r3, #0]
10008a38:	681a      	ldr	r2, [r3, #0]
10008a3a:	687b      	ldr	r3, [r7, #4]
10008a3c:	681b      	ldr	r3, [r3, #0]
10008a3e:	f042 0201 	orr.w	r2, r2, #1
10008a42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
10008a44:	6878      	ldr	r0, [r7, #4]
10008a46:	f001 f9e5 	bl	10009e14 <UART_CheckIdleState>
10008a4a:	4603      	mov	r3, r0
}
10008a4c:	4618      	mov	r0, r3
10008a4e:	3708      	adds	r7, #8
10008a50:	46bd      	mov	sp, r7
10008a52:	bd80      	pop	{r7, pc}

10008a54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
10008a54:	b580      	push	{r7, lr}
10008a56:	b08a      	sub	sp, #40	; 0x28
10008a58:	af02      	add	r7, sp, #8
10008a5a:	60f8      	str	r0, [r7, #12]
10008a5c:	60b9      	str	r1, [r7, #8]
10008a5e:	603b      	str	r3, [r7, #0]
10008a60:	4613      	mov	r3, r2
10008a62:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
10008a64:	68fb      	ldr	r3, [r7, #12]
10008a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10008a6a:	2b20      	cmp	r3, #32
10008a6c:	f040 8084 	bne.w	10008b78 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
10008a70:	68bb      	ldr	r3, [r7, #8]
10008a72:	2b00      	cmp	r3, #0
10008a74:	d002      	beq.n	10008a7c <HAL_UART_Transmit+0x28>
10008a76:	88fb      	ldrh	r3, [r7, #6]
10008a78:	2b00      	cmp	r3, #0
10008a7a:	d101      	bne.n	10008a80 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
10008a7c:	2301      	movs	r3, #1
10008a7e:	e07c      	b.n	10008b7a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
10008a80:	68fb      	ldr	r3, [r7, #12]
10008a82:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
10008a86:	2b01      	cmp	r3, #1
10008a88:	d101      	bne.n	10008a8e <HAL_UART_Transmit+0x3a>
10008a8a:	2302      	movs	r3, #2
10008a8c:	e075      	b.n	10008b7a <HAL_UART_Transmit+0x126>
10008a8e:	68fb      	ldr	r3, [r7, #12]
10008a90:	2201      	movs	r2, #1
10008a92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    huart->ErrorCode = HAL_UART_ERROR_NONE;
10008a96:	68fb      	ldr	r3, [r7, #12]
10008a98:	2200      	movs	r2, #0
10008a9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
10008a9e:	68fb      	ldr	r3, [r7, #12]
10008aa0:	2221      	movs	r2, #33	; 0x21
10008aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
10008aa6:	f7f8 f993 	bl	10000dd0 <HAL_GetTick>
10008aaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
10008aac:	68fb      	ldr	r3, [r7, #12]
10008aae:	88fa      	ldrh	r2, [r7, #6]
10008ab0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
10008ab4:	68fb      	ldr	r3, [r7, #12]
10008ab6:	88fa      	ldrh	r2, [r7, #6]
10008ab8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
10008abc:	68fb      	ldr	r3, [r7, #12]
10008abe:	689b      	ldr	r3, [r3, #8]
10008ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
10008ac4:	d108      	bne.n	10008ad8 <HAL_UART_Transmit+0x84>
10008ac6:	68fb      	ldr	r3, [r7, #12]
10008ac8:	691b      	ldr	r3, [r3, #16]
10008aca:	2b00      	cmp	r3, #0
10008acc:	d104      	bne.n	10008ad8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
10008ace:	2300      	movs	r3, #0
10008ad0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
10008ad2:	68bb      	ldr	r3, [r7, #8]
10008ad4:	61bb      	str	r3, [r7, #24]
10008ad6:	e003      	b.n	10008ae0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
10008ad8:	68bb      	ldr	r3, [r7, #8]
10008ada:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
10008adc:	2300      	movs	r3, #0
10008ade:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
10008ae0:	68fb      	ldr	r3, [r7, #12]
10008ae2:	2200      	movs	r2, #0
10008ae4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    while (huart->TxXferCount > 0U)
10008ae8:	e02d      	b.n	10008b46 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
10008aea:	683b      	ldr	r3, [r7, #0]
10008aec:	9300      	str	r3, [sp, #0]
10008aee:	697b      	ldr	r3, [r7, #20]
10008af0:	2200      	movs	r2, #0
10008af2:	2180      	movs	r1, #128	; 0x80
10008af4:	68f8      	ldr	r0, [r7, #12]
10008af6:	f001 f9d5 	bl	10009ea4 <UART_WaitOnFlagUntilTimeout>
10008afa:	4603      	mov	r3, r0
10008afc:	2b00      	cmp	r3, #0
10008afe:	d001      	beq.n	10008b04 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
10008b00:	2303      	movs	r3, #3
10008b02:	e03a      	b.n	10008b7a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
10008b04:	69fb      	ldr	r3, [r7, #28]
10008b06:	2b00      	cmp	r3, #0
10008b08:	d10b      	bne.n	10008b22 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
10008b0a:	69bb      	ldr	r3, [r7, #24]
10008b0c:	881a      	ldrh	r2, [r3, #0]
10008b0e:	68fb      	ldr	r3, [r7, #12]
10008b10:	681b      	ldr	r3, [r3, #0]
10008b12:	f3c2 0208 	ubfx	r2, r2, #0, #9
10008b16:	b292      	uxth	r2, r2
10008b18:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
10008b1a:	69bb      	ldr	r3, [r7, #24]
10008b1c:	3302      	adds	r3, #2
10008b1e:	61bb      	str	r3, [r7, #24]
10008b20:	e008      	b.n	10008b34 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
10008b22:	69fb      	ldr	r3, [r7, #28]
10008b24:	781a      	ldrb	r2, [r3, #0]
10008b26:	68fb      	ldr	r3, [r7, #12]
10008b28:	681b      	ldr	r3, [r3, #0]
10008b2a:	b292      	uxth	r2, r2
10008b2c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
10008b2e:	69fb      	ldr	r3, [r7, #28]
10008b30:	3301      	adds	r3, #1
10008b32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
10008b34:	68fb      	ldr	r3, [r7, #12]
10008b36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
10008b3a:	b29b      	uxth	r3, r3
10008b3c:	3b01      	subs	r3, #1
10008b3e:	b29a      	uxth	r2, r3
10008b40:	68fb      	ldr	r3, [r7, #12]
10008b42:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
10008b46:	68fb      	ldr	r3, [r7, #12]
10008b48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
10008b4c:	b29b      	uxth	r3, r3
10008b4e:	2b00      	cmp	r3, #0
10008b50:	d1cb      	bne.n	10008aea <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
10008b52:	683b      	ldr	r3, [r7, #0]
10008b54:	9300      	str	r3, [sp, #0]
10008b56:	697b      	ldr	r3, [r7, #20]
10008b58:	2200      	movs	r2, #0
10008b5a:	2140      	movs	r1, #64	; 0x40
10008b5c:	68f8      	ldr	r0, [r7, #12]
10008b5e:	f001 f9a1 	bl	10009ea4 <UART_WaitOnFlagUntilTimeout>
10008b62:	4603      	mov	r3, r0
10008b64:	2b00      	cmp	r3, #0
10008b66:	d001      	beq.n	10008b6c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
10008b68:	2303      	movs	r3, #3
10008b6a:	e006      	b.n	10008b7a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
10008b6c:	68fb      	ldr	r3, [r7, #12]
10008b6e:	2220      	movs	r2, #32
10008b70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
10008b74:	2300      	movs	r3, #0
10008b76:	e000      	b.n	10008b7a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
10008b78:	2302      	movs	r3, #2
  }
}
10008b7a:	4618      	mov	r0, r3
10008b7c:	3720      	adds	r7, #32
10008b7e:	46bd      	mov	sp, r7
10008b80:	bd80      	pop	{r7, pc}
	...

10008b84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
10008b84:	b580      	push	{r7, lr}
10008b86:	b08e      	sub	sp, #56	; 0x38
10008b88:	af00      	add	r7, sp, #0
10008b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
10008b8c:	2300      	movs	r3, #0
10008b8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_StatusTypeDef ret               = HAL_OK;
10008b90:	2300      	movs	r3, #0
10008b92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
10008b96:	687b      	ldr	r3, [r7, #4]
10008b98:	689a      	ldr	r2, [r3, #8]
10008b9a:	687b      	ldr	r3, [r7, #4]
10008b9c:	691b      	ldr	r3, [r3, #16]
10008b9e:	431a      	orrs	r2, r3
10008ba0:	687b      	ldr	r3, [r7, #4]
10008ba2:	695b      	ldr	r3, [r3, #20]
10008ba4:	431a      	orrs	r2, r3
10008ba6:	687b      	ldr	r3, [r7, #4]
10008ba8:	69db      	ldr	r3, [r3, #28]
10008baa:	4313      	orrs	r3, r2
10008bac:	62bb      	str	r3, [r7, #40]	; 0x28
  tmpreg |= (uint32_t)huart->FifoMode;
10008bae:	687b      	ldr	r3, [r7, #4]
10008bb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
10008bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
10008bb4:	4313      	orrs	r3, r2
10008bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
10008bb8:	687b      	ldr	r3, [r7, #4]
10008bba:	681b      	ldr	r3, [r3, #0]
10008bbc:	681a      	ldr	r2, [r3, #0]
10008bbe:	4bb1      	ldr	r3, [pc, #708]	; (10008e84 <UART_SetConfig+0x300>)
10008bc0:	4013      	ands	r3, r2
10008bc2:	687a      	ldr	r2, [r7, #4]
10008bc4:	6812      	ldr	r2, [r2, #0]
10008bc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
10008bc8:	430b      	orrs	r3, r1
10008bca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
10008bcc:	687b      	ldr	r3, [r7, #4]
10008bce:	681b      	ldr	r3, [r3, #0]
10008bd0:	685b      	ldr	r3, [r3, #4]
10008bd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
10008bd6:	687b      	ldr	r3, [r7, #4]
10008bd8:	68da      	ldr	r2, [r3, #12]
10008bda:	687b      	ldr	r3, [r7, #4]
10008bdc:	681b      	ldr	r3, [r3, #0]
10008bde:	430a      	orrs	r2, r1
10008be0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
10008be2:	687b      	ldr	r3, [r7, #4]
10008be4:	699b      	ldr	r3, [r3, #24]
10008be6:	62bb      	str	r3, [r7, #40]	; 0x28

  tmpreg |= huart->Init.OneBitSampling;
10008be8:	687b      	ldr	r3, [r7, #4]
10008bea:	6a1b      	ldr	r3, [r3, #32]
10008bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
10008bee:	4313      	orrs	r3, r2
10008bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
10008bf2:	687b      	ldr	r3, [r7, #4]
10008bf4:	681b      	ldr	r3, [r3, #0]
10008bf6:	689b      	ldr	r3, [r3, #8]
10008bf8:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
10008bfc:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
10008c00:	687a      	ldr	r2, [r7, #4]
10008c02:	6812      	ldr	r2, [r2, #0]
10008c04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
10008c06:	430b      	orrs	r3, r1
10008c08:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
10008c0a:	687b      	ldr	r3, [r7, #4]
10008c0c:	681b      	ldr	r3, [r3, #0]
10008c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10008c10:	f023 010f 	bic.w	r1, r3, #15
10008c14:	687b      	ldr	r3, [r7, #4]
10008c16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10008c18:	687b      	ldr	r3, [r7, #4]
10008c1a:	681b      	ldr	r3, [r3, #0]
10008c1c:	430a      	orrs	r2, r1
10008c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
10008c20:	687b      	ldr	r3, [r7, #4]
10008c22:	681b      	ldr	r3, [r3, #0]
10008c24:	f1b3 4fb8 	cmp.w	r3, #1543503872	; 0x5c000000
10008c28:	d132      	bne.n	10008c90 <UART_SetConfig+0x10c>
10008c2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008c2e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10008c32:	f003 0307 	and.w	r3, r3, #7
10008c36:	2b05      	cmp	r3, #5
10008c38:	d826      	bhi.n	10008c88 <UART_SetConfig+0x104>
10008c3a:	a201      	add	r2, pc, #4	; (adr r2, 10008c40 <UART_SetConfig+0xbc>)
10008c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008c40:	10008c59 	.word	0x10008c59
10008c44:	10008c61 	.word	0x10008c61
10008c48:	10008c69 	.word	0x10008c69
10008c4c:	10008c71 	.word	0x10008c71
10008c50:	10008c79 	.word	0x10008c79
10008c54:	10008c81 	.word	0x10008c81
10008c58:	2302      	movs	r3, #2
10008c5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008c5e:	e184      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008c60:	2304      	movs	r3, #4
10008c62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008c66:	e180      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008c68:	2310      	movs	r3, #16
10008c6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008c6e:	e17c      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008c70:	2320      	movs	r3, #32
10008c72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008c76:	e178      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008c78:	2308      	movs	r3, #8
10008c7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008c7e:	e174      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008c80:	2340      	movs	r3, #64	; 0x40
10008c82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008c86:	e170      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008c88:	2380      	movs	r3, #128	; 0x80
10008c8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008c8e:	e16c      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008c90:	687b      	ldr	r3, [r7, #4]
10008c92:	681b      	ldr	r3, [r3, #0]
10008c94:	4a7c      	ldr	r2, [pc, #496]	; (10008e88 <UART_SetConfig+0x304>)
10008c96:	4293      	cmp	r3, r2
10008c98:	d12c      	bne.n	10008cf4 <UART_SetConfig+0x170>
10008c9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008c9e:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
10008ca2:	f003 0307 	and.w	r3, r3, #7
10008ca6:	2b04      	cmp	r3, #4
10008ca8:	d820      	bhi.n	10008cec <UART_SetConfig+0x168>
10008caa:	a201      	add	r2, pc, #4	; (adr r2, 10008cb0 <UART_SetConfig+0x12c>)
10008cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008cb0:	10008cc5 	.word	0x10008cc5
10008cb4:	10008ccd 	.word	0x10008ccd
10008cb8:	10008cd5 	.word	0x10008cd5
10008cbc:	10008cdd 	.word	0x10008cdd
10008cc0:	10008ce5 	.word	0x10008ce5
10008cc4:	2300      	movs	r3, #0
10008cc6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008cca:	e14e      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008ccc:	2308      	movs	r3, #8
10008cce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008cd2:	e14a      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008cd4:	2310      	movs	r3, #16
10008cd6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008cda:	e146      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008cdc:	2320      	movs	r3, #32
10008cde:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008ce2:	e142      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008ce4:	2340      	movs	r3, #64	; 0x40
10008ce6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008cea:	e13e      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008cec:	2380      	movs	r3, #128	; 0x80
10008cee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008cf2:	e13a      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008cf4:	687b      	ldr	r3, [r7, #4]
10008cf6:	681b      	ldr	r3, [r3, #0]
10008cf8:	4a64      	ldr	r2, [pc, #400]	; (10008e8c <UART_SetConfig+0x308>)
10008cfa:	4293      	cmp	r3, r2
10008cfc:	d12c      	bne.n	10008d58 <UART_SetConfig+0x1d4>
10008cfe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008d02:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
10008d06:	f003 0307 	and.w	r3, r3, #7
10008d0a:	2b04      	cmp	r3, #4
10008d0c:	d820      	bhi.n	10008d50 <UART_SetConfig+0x1cc>
10008d0e:	a201      	add	r2, pc, #4	; (adr r2, 10008d14 <UART_SetConfig+0x190>)
10008d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008d14:	10008d29 	.word	0x10008d29
10008d18:	10008d31 	.word	0x10008d31
10008d1c:	10008d39 	.word	0x10008d39
10008d20:	10008d41 	.word	0x10008d41
10008d24:	10008d49 	.word	0x10008d49
10008d28:	2300      	movs	r3, #0
10008d2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008d2e:	e11c      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008d30:	2308      	movs	r3, #8
10008d32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008d36:	e118      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008d38:	2310      	movs	r3, #16
10008d3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008d3e:	e114      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008d40:	2320      	movs	r3, #32
10008d42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008d46:	e110      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008d48:	2340      	movs	r3, #64	; 0x40
10008d4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008d4e:	e10c      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008d50:	2380      	movs	r3, #128	; 0x80
10008d52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008d56:	e108      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008d58:	687b      	ldr	r3, [r7, #4]
10008d5a:	681b      	ldr	r3, [r3, #0]
10008d5c:	4a4c      	ldr	r2, [pc, #304]	; (10008e90 <UART_SetConfig+0x30c>)
10008d5e:	4293      	cmp	r3, r2
10008d60:	d12c      	bne.n	10008dbc <UART_SetConfig+0x238>
10008d62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008d66:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
10008d6a:	f003 0307 	and.w	r3, r3, #7
10008d6e:	2b04      	cmp	r3, #4
10008d70:	d820      	bhi.n	10008db4 <UART_SetConfig+0x230>
10008d72:	a201      	add	r2, pc, #4	; (adr r2, 10008d78 <UART_SetConfig+0x1f4>)
10008d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008d78:	10008d8d 	.word	0x10008d8d
10008d7c:	10008d95 	.word	0x10008d95
10008d80:	10008d9d 	.word	0x10008d9d
10008d84:	10008da5 	.word	0x10008da5
10008d88:	10008dad 	.word	0x10008dad
10008d8c:	2300      	movs	r3, #0
10008d8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008d92:	e0ea      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008d94:	2308      	movs	r3, #8
10008d96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008d9a:	e0e6      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008d9c:	2310      	movs	r3, #16
10008d9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008da2:	e0e2      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008da4:	2320      	movs	r3, #32
10008da6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008daa:	e0de      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008dac:	2340      	movs	r3, #64	; 0x40
10008dae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008db2:	e0da      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008db4:	2380      	movs	r3, #128	; 0x80
10008db6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008dba:	e0d6      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008dbc:	687b      	ldr	r3, [r7, #4]
10008dbe:	681b      	ldr	r3, [r3, #0]
10008dc0:	4a34      	ldr	r2, [pc, #208]	; (10008e94 <UART_SetConfig+0x310>)
10008dc2:	4293      	cmp	r3, r2
10008dc4:	d12c      	bne.n	10008e20 <UART_SetConfig+0x29c>
10008dc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008dca:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
10008dce:	f003 0307 	and.w	r3, r3, #7
10008dd2:	2b04      	cmp	r3, #4
10008dd4:	d820      	bhi.n	10008e18 <UART_SetConfig+0x294>
10008dd6:	a201      	add	r2, pc, #4	; (adr r2, 10008ddc <UART_SetConfig+0x258>)
10008dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008ddc:	10008df1 	.word	0x10008df1
10008de0:	10008df9 	.word	0x10008df9
10008de4:	10008e01 	.word	0x10008e01
10008de8:	10008e09 	.word	0x10008e09
10008dec:	10008e11 	.word	0x10008e11
10008df0:	2300      	movs	r3, #0
10008df2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008df6:	e0b8      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008df8:	2308      	movs	r3, #8
10008dfa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008dfe:	e0b4      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008e00:	2310      	movs	r3, #16
10008e02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008e06:	e0b0      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008e08:	2320      	movs	r3, #32
10008e0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008e0e:	e0ac      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008e10:	2340      	movs	r3, #64	; 0x40
10008e12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008e16:	e0a8      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008e18:	2380      	movs	r3, #128	; 0x80
10008e1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008e1e:	e0a4      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008e20:	687b      	ldr	r3, [r7, #4]
10008e22:	681b      	ldr	r3, [r3, #0]
10008e24:	4a1c      	ldr	r2, [pc, #112]	; (10008e98 <UART_SetConfig+0x314>)
10008e26:	4293      	cmp	r3, r2
10008e28:	d138      	bne.n	10008e9c <UART_SetConfig+0x318>
10008e2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008e2e:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
10008e32:	f003 0307 	and.w	r3, r3, #7
10008e36:	2b04      	cmp	r3, #4
10008e38:	d820      	bhi.n	10008e7c <UART_SetConfig+0x2f8>
10008e3a:	a201      	add	r2, pc, #4	; (adr r2, 10008e40 <UART_SetConfig+0x2bc>)
10008e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008e40:	10008e55 	.word	0x10008e55
10008e44:	10008e5d 	.word	0x10008e5d
10008e48:	10008e65 	.word	0x10008e65
10008e4c:	10008e6d 	.word	0x10008e6d
10008e50:	10008e75 	.word	0x10008e75
10008e54:	2301      	movs	r3, #1
10008e56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008e5a:	e086      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008e5c:	2308      	movs	r3, #8
10008e5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008e62:	e082      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008e64:	2310      	movs	r3, #16
10008e66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008e6a:	e07e      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008e6c:	2320      	movs	r3, #32
10008e6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008e72:	e07a      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008e74:	2340      	movs	r3, #64	; 0x40
10008e76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008e7a:	e076      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008e7c:	2380      	movs	r3, #128	; 0x80
10008e7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008e82:	e072      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008e84:	cfff69f3 	.word	0xcfff69f3
10008e88:	4000e000 	.word	0x4000e000
10008e8c:	4000f000 	.word	0x4000f000
10008e90:	40010000 	.word	0x40010000
10008e94:	40011000 	.word	0x40011000
10008e98:	44003000 	.word	0x44003000
10008e9c:	687b      	ldr	r3, [r7, #4]
10008e9e:	681b      	ldr	r3, [r3, #0]
10008ea0:	4aab      	ldr	r2, [pc, #684]	; (10009150 <UART_SetConfig+0x5cc>)
10008ea2:	4293      	cmp	r3, r2
10008ea4:	d12c      	bne.n	10008f00 <UART_SetConfig+0x37c>
10008ea6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008eaa:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
10008eae:	f003 0307 	and.w	r3, r3, #7
10008eb2:	2b04      	cmp	r3, #4
10008eb4:	d820      	bhi.n	10008ef8 <UART_SetConfig+0x374>
10008eb6:	a201      	add	r2, pc, #4	; (adr r2, 10008ebc <UART_SetConfig+0x338>)
10008eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008ebc:	10008ed1 	.word	0x10008ed1
10008ec0:	10008ed9 	.word	0x10008ed9
10008ec4:	10008ee1 	.word	0x10008ee1
10008ec8:	10008ee9 	.word	0x10008ee9
10008ecc:	10008ef1 	.word	0x10008ef1
10008ed0:	2300      	movs	r3, #0
10008ed2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008ed6:	e048      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008ed8:	2308      	movs	r3, #8
10008eda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008ede:	e044      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008ee0:	2310      	movs	r3, #16
10008ee2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008ee6:	e040      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008ee8:	2320      	movs	r3, #32
10008eea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008eee:	e03c      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008ef0:	2340      	movs	r3, #64	; 0x40
10008ef2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008ef6:	e038      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008ef8:	2380      	movs	r3, #128	; 0x80
10008efa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008efe:	e034      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008f00:	687b      	ldr	r3, [r7, #4]
10008f02:	681b      	ldr	r3, [r3, #0]
10008f04:	4a93      	ldr	r2, [pc, #588]	; (10009154 <UART_SetConfig+0x5d0>)
10008f06:	4293      	cmp	r3, r2
10008f08:	d12c      	bne.n	10008f64 <UART_SetConfig+0x3e0>
10008f0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008f0e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
10008f12:	f003 0307 	and.w	r3, r3, #7
10008f16:	2b04      	cmp	r3, #4
10008f18:	d820      	bhi.n	10008f5c <UART_SetConfig+0x3d8>
10008f1a:	a201      	add	r2, pc, #4	; (adr r2, 10008f20 <UART_SetConfig+0x39c>)
10008f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008f20:	10008f35 	.word	0x10008f35
10008f24:	10008f3d 	.word	0x10008f3d
10008f28:	10008f45 	.word	0x10008f45
10008f2c:	10008f4d 	.word	0x10008f4d
10008f30:	10008f55 	.word	0x10008f55
10008f34:	2300      	movs	r3, #0
10008f36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008f3a:	e016      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008f3c:	2308      	movs	r3, #8
10008f3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008f42:	e012      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008f44:	2310      	movs	r3, #16
10008f46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008f4a:	e00e      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008f4c:	2320      	movs	r3, #32
10008f4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008f52:	e00a      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008f54:	2340      	movs	r3, #64	; 0x40
10008f56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008f5a:	e006      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008f5c:	2380      	movs	r3, #128	; 0x80
10008f5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10008f62:	e002      	b.n	10008f6a <UART_SetConfig+0x3e6>
10008f64:	2380      	movs	r3, #128	; 0x80
10008f66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
10008f6a:	687b      	ldr	r3, [r7, #4]
10008f6c:	69db      	ldr	r3, [r3, #28]
10008f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
10008f72:	f040 8354 	bne.w	1000961e <UART_SetConfig+0xa9a>
  {
    switch (clocksource)
10008f76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
10008f7a:	2b20      	cmp	r3, #32
10008f7c:	dc4a      	bgt.n	10009014 <UART_SetConfig+0x490>
10008f7e:	2b00      	cmp	r3, #0
10008f80:	f2c0 832b 	blt.w	100095da <UART_SetConfig+0xa56>
10008f84:	2b20      	cmp	r3, #32
10008f86:	f200 8328 	bhi.w	100095da <UART_SetConfig+0xa56>
10008f8a:	a201      	add	r2, pc, #4	; (adr r2, 10008f90 <UART_SetConfig+0x40c>)
10008f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008f90:	1000901d 	.word	0x1000901d
10008f94:	100090d5 	.word	0x100090d5
10008f98:	10009195 	.word	0x10009195
10008f9c:	100095db 	.word	0x100095db
10008fa0:	1000924d 	.word	0x1000924d
10008fa4:	100095db 	.word	0x100095db
10008fa8:	100095db 	.word	0x100095db
10008fac:	100095db 	.word	0x100095db
10008fb0:	10009309 	.word	0x10009309
10008fb4:	100095db 	.word	0x100095db
10008fb8:	100095db 	.word	0x100095db
10008fbc:	100095db 	.word	0x100095db
10008fc0:	100095db 	.word	0x100095db
10008fc4:	100095db 	.word	0x100095db
10008fc8:	100095db 	.word	0x100095db
10008fcc:	100095db 	.word	0x100095db
10008fd0:	100093c5 	.word	0x100093c5
10008fd4:	100095db 	.word	0x100095db
10008fd8:	100095db 	.word	0x100095db
10008fdc:	100095db 	.word	0x100095db
10008fe0:	100095db 	.word	0x100095db
10008fe4:	100095db 	.word	0x100095db
10008fe8:	100095db 	.word	0x100095db
10008fec:	100095db 	.word	0x100095db
10008ff0:	100095db 	.word	0x100095db
10008ff4:	100095db 	.word	0x100095db
10008ff8:	100095db 	.word	0x100095db
10008ffc:	100095db 	.word	0x100095db
10009000:	100095db 	.word	0x100095db
10009004:	100095db 	.word	0x100095db
10009008:	100095db 	.word	0x100095db
1000900c:	100095db 	.word	0x100095db
10009010:	10009477 	.word	0x10009477
10009014:	2b40      	cmp	r3, #64	; 0x40
10009016:	f000 8287 	beq.w	10009528 <UART_SetConfig+0x9a4>
1000901a:	e2de      	b.n	100095da <UART_SetConfig+0xa56>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
1000901c:	f7fb fd9e 	bl	10004b5c <HAL_RCC_GetPCLK1Freq>
10009020:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009022:	687b      	ldr	r3, [r7, #4]
10009024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009026:	2b00      	cmp	r3, #0
10009028:	d044      	beq.n	100090b4 <UART_SetConfig+0x530>
1000902a:	687b      	ldr	r3, [r7, #4]
1000902c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000902e:	2b01      	cmp	r3, #1
10009030:	d03e      	beq.n	100090b0 <UART_SetConfig+0x52c>
10009032:	687b      	ldr	r3, [r7, #4]
10009034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009036:	2b02      	cmp	r3, #2
10009038:	d038      	beq.n	100090ac <UART_SetConfig+0x528>
1000903a:	687b      	ldr	r3, [r7, #4]
1000903c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000903e:	2b03      	cmp	r3, #3
10009040:	d032      	beq.n	100090a8 <UART_SetConfig+0x524>
10009042:	687b      	ldr	r3, [r7, #4]
10009044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009046:	2b04      	cmp	r3, #4
10009048:	d02c      	beq.n	100090a4 <UART_SetConfig+0x520>
1000904a:	687b      	ldr	r3, [r7, #4]
1000904c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000904e:	2b05      	cmp	r3, #5
10009050:	d026      	beq.n	100090a0 <UART_SetConfig+0x51c>
10009052:	687b      	ldr	r3, [r7, #4]
10009054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009056:	2b06      	cmp	r3, #6
10009058:	d020      	beq.n	1000909c <UART_SetConfig+0x518>
1000905a:	687b      	ldr	r3, [r7, #4]
1000905c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000905e:	2b07      	cmp	r3, #7
10009060:	d01a      	beq.n	10009098 <UART_SetConfig+0x514>
10009062:	687b      	ldr	r3, [r7, #4]
10009064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009066:	2b08      	cmp	r3, #8
10009068:	d014      	beq.n	10009094 <UART_SetConfig+0x510>
1000906a:	687b      	ldr	r3, [r7, #4]
1000906c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000906e:	2b09      	cmp	r3, #9
10009070:	d00e      	beq.n	10009090 <UART_SetConfig+0x50c>
10009072:	687b      	ldr	r3, [r7, #4]
10009074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009076:	2b0a      	cmp	r3, #10
10009078:	d008      	beq.n	1000908c <UART_SetConfig+0x508>
1000907a:	687b      	ldr	r3, [r7, #4]
1000907c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000907e:	2b0b      	cmp	r3, #11
10009080:	d102      	bne.n	10009088 <UART_SetConfig+0x504>
10009082:	f44f 7380 	mov.w	r3, #256	; 0x100
10009086:	e016      	b.n	100090b6 <UART_SetConfig+0x532>
10009088:	2301      	movs	r3, #1
1000908a:	e014      	b.n	100090b6 <UART_SetConfig+0x532>
1000908c:	2380      	movs	r3, #128	; 0x80
1000908e:	e012      	b.n	100090b6 <UART_SetConfig+0x532>
10009090:	2340      	movs	r3, #64	; 0x40
10009092:	e010      	b.n	100090b6 <UART_SetConfig+0x532>
10009094:	2320      	movs	r3, #32
10009096:	e00e      	b.n	100090b6 <UART_SetConfig+0x532>
10009098:	2310      	movs	r3, #16
1000909a:	e00c      	b.n	100090b6 <UART_SetConfig+0x532>
1000909c:	230c      	movs	r3, #12
1000909e:	e00a      	b.n	100090b6 <UART_SetConfig+0x532>
100090a0:	230a      	movs	r3, #10
100090a2:	e008      	b.n	100090b6 <UART_SetConfig+0x532>
100090a4:	2308      	movs	r3, #8
100090a6:	e006      	b.n	100090b6 <UART_SetConfig+0x532>
100090a8:	2306      	movs	r3, #6
100090aa:	e004      	b.n	100090b6 <UART_SetConfig+0x532>
100090ac:	2304      	movs	r3, #4
100090ae:	e002      	b.n	100090b6 <UART_SetConfig+0x532>
100090b0:	2302      	movs	r3, #2
100090b2:	e000      	b.n	100090b6 <UART_SetConfig+0x532>
100090b4:	2301      	movs	r3, #1
100090b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100090b8:	fbb2 f3f3 	udiv	r3, r2, r3
100090bc:	005a      	lsls	r2, r3, #1
100090be:	687b      	ldr	r3, [r7, #4]
100090c0:	685b      	ldr	r3, [r3, #4]
100090c2:	085b      	lsrs	r3, r3, #1
100090c4:	441a      	add	r2, r3
100090c6:	687b      	ldr	r3, [r7, #4]
100090c8:	685b      	ldr	r3, [r3, #4]
100090ca:	fbb2 f3f3 	udiv	r3, r2, r3
100090ce:	b29b      	uxth	r3, r3
100090d0:	633b      	str	r3, [r7, #48]	; 0x30
        break;
100090d2:	e286      	b.n	100095e2 <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
100090d4:	f7fb fd5d 	bl	10004b92 <HAL_RCC_GetPCLK2Freq>
100090d8:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100090da:	687b      	ldr	r3, [r7, #4]
100090dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100090de:	2b00      	cmp	r3, #0
100090e0:	d048      	beq.n	10009174 <UART_SetConfig+0x5f0>
100090e2:	687b      	ldr	r3, [r7, #4]
100090e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100090e6:	2b01      	cmp	r3, #1
100090e8:	d042      	beq.n	10009170 <UART_SetConfig+0x5ec>
100090ea:	687b      	ldr	r3, [r7, #4]
100090ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100090ee:	2b02      	cmp	r3, #2
100090f0:	d03c      	beq.n	1000916c <UART_SetConfig+0x5e8>
100090f2:	687b      	ldr	r3, [r7, #4]
100090f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100090f6:	2b03      	cmp	r3, #3
100090f8:	d036      	beq.n	10009168 <UART_SetConfig+0x5e4>
100090fa:	687b      	ldr	r3, [r7, #4]
100090fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100090fe:	2b04      	cmp	r3, #4
10009100:	d030      	beq.n	10009164 <UART_SetConfig+0x5e0>
10009102:	687b      	ldr	r3, [r7, #4]
10009104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009106:	2b05      	cmp	r3, #5
10009108:	d02a      	beq.n	10009160 <UART_SetConfig+0x5dc>
1000910a:	687b      	ldr	r3, [r7, #4]
1000910c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000910e:	2b06      	cmp	r3, #6
10009110:	d024      	beq.n	1000915c <UART_SetConfig+0x5d8>
10009112:	687b      	ldr	r3, [r7, #4]
10009114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009116:	2b07      	cmp	r3, #7
10009118:	d01e      	beq.n	10009158 <UART_SetConfig+0x5d4>
1000911a:	687b      	ldr	r3, [r7, #4]
1000911c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000911e:	2b08      	cmp	r3, #8
10009120:	d014      	beq.n	1000914c <UART_SetConfig+0x5c8>
10009122:	687b      	ldr	r3, [r7, #4]
10009124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009126:	2b09      	cmp	r3, #9
10009128:	d00e      	beq.n	10009148 <UART_SetConfig+0x5c4>
1000912a:	687b      	ldr	r3, [r7, #4]
1000912c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000912e:	2b0a      	cmp	r3, #10
10009130:	d008      	beq.n	10009144 <UART_SetConfig+0x5c0>
10009132:	687b      	ldr	r3, [r7, #4]
10009134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009136:	2b0b      	cmp	r3, #11
10009138:	d102      	bne.n	10009140 <UART_SetConfig+0x5bc>
1000913a:	f44f 7380 	mov.w	r3, #256	; 0x100
1000913e:	e01a      	b.n	10009176 <UART_SetConfig+0x5f2>
10009140:	2301      	movs	r3, #1
10009142:	e018      	b.n	10009176 <UART_SetConfig+0x5f2>
10009144:	2380      	movs	r3, #128	; 0x80
10009146:	e016      	b.n	10009176 <UART_SetConfig+0x5f2>
10009148:	2340      	movs	r3, #64	; 0x40
1000914a:	e014      	b.n	10009176 <UART_SetConfig+0x5f2>
1000914c:	2320      	movs	r3, #32
1000914e:	e012      	b.n	10009176 <UART_SetConfig+0x5f2>
10009150:	40018000 	.word	0x40018000
10009154:	40019000 	.word	0x40019000
10009158:	2310      	movs	r3, #16
1000915a:	e00c      	b.n	10009176 <UART_SetConfig+0x5f2>
1000915c:	230c      	movs	r3, #12
1000915e:	e00a      	b.n	10009176 <UART_SetConfig+0x5f2>
10009160:	230a      	movs	r3, #10
10009162:	e008      	b.n	10009176 <UART_SetConfig+0x5f2>
10009164:	2308      	movs	r3, #8
10009166:	e006      	b.n	10009176 <UART_SetConfig+0x5f2>
10009168:	2306      	movs	r3, #6
1000916a:	e004      	b.n	10009176 <UART_SetConfig+0x5f2>
1000916c:	2304      	movs	r3, #4
1000916e:	e002      	b.n	10009176 <UART_SetConfig+0x5f2>
10009170:	2302      	movs	r3, #2
10009172:	e000      	b.n	10009176 <UART_SetConfig+0x5f2>
10009174:	2301      	movs	r3, #1
10009176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10009178:	fbb2 f3f3 	udiv	r3, r2, r3
1000917c:	005a      	lsls	r2, r3, #1
1000917e:	687b      	ldr	r3, [r7, #4]
10009180:	685b      	ldr	r3, [r3, #4]
10009182:	085b      	lsrs	r3, r3, #1
10009184:	441a      	add	r2, r3
10009186:	687b      	ldr	r3, [r7, #4]
10009188:	685b      	ldr	r3, [r3, #4]
1000918a:	fbb2 f3f3 	udiv	r3, r2, r3
1000918e:	b29b      	uxth	r3, r3
10009190:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009192:	e226      	b.n	100095e2 <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PCLK5:
        pclk = HAL_RCC_GetPCLK5Freq();
10009194:	f7fb fd33 	bl	10004bfe <HAL_RCC_GetPCLK5Freq>
10009198:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000919a:	687b      	ldr	r3, [r7, #4]
1000919c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000919e:	2b00      	cmp	r3, #0
100091a0:	d044      	beq.n	1000922c <UART_SetConfig+0x6a8>
100091a2:	687b      	ldr	r3, [r7, #4]
100091a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100091a6:	2b01      	cmp	r3, #1
100091a8:	d03e      	beq.n	10009228 <UART_SetConfig+0x6a4>
100091aa:	687b      	ldr	r3, [r7, #4]
100091ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100091ae:	2b02      	cmp	r3, #2
100091b0:	d038      	beq.n	10009224 <UART_SetConfig+0x6a0>
100091b2:	687b      	ldr	r3, [r7, #4]
100091b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100091b6:	2b03      	cmp	r3, #3
100091b8:	d032      	beq.n	10009220 <UART_SetConfig+0x69c>
100091ba:	687b      	ldr	r3, [r7, #4]
100091bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100091be:	2b04      	cmp	r3, #4
100091c0:	d02c      	beq.n	1000921c <UART_SetConfig+0x698>
100091c2:	687b      	ldr	r3, [r7, #4]
100091c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100091c6:	2b05      	cmp	r3, #5
100091c8:	d026      	beq.n	10009218 <UART_SetConfig+0x694>
100091ca:	687b      	ldr	r3, [r7, #4]
100091cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100091ce:	2b06      	cmp	r3, #6
100091d0:	d020      	beq.n	10009214 <UART_SetConfig+0x690>
100091d2:	687b      	ldr	r3, [r7, #4]
100091d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100091d6:	2b07      	cmp	r3, #7
100091d8:	d01a      	beq.n	10009210 <UART_SetConfig+0x68c>
100091da:	687b      	ldr	r3, [r7, #4]
100091dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100091de:	2b08      	cmp	r3, #8
100091e0:	d014      	beq.n	1000920c <UART_SetConfig+0x688>
100091e2:	687b      	ldr	r3, [r7, #4]
100091e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100091e6:	2b09      	cmp	r3, #9
100091e8:	d00e      	beq.n	10009208 <UART_SetConfig+0x684>
100091ea:	687b      	ldr	r3, [r7, #4]
100091ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100091ee:	2b0a      	cmp	r3, #10
100091f0:	d008      	beq.n	10009204 <UART_SetConfig+0x680>
100091f2:	687b      	ldr	r3, [r7, #4]
100091f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100091f6:	2b0b      	cmp	r3, #11
100091f8:	d102      	bne.n	10009200 <UART_SetConfig+0x67c>
100091fa:	f44f 7380 	mov.w	r3, #256	; 0x100
100091fe:	e016      	b.n	1000922e <UART_SetConfig+0x6aa>
10009200:	2301      	movs	r3, #1
10009202:	e014      	b.n	1000922e <UART_SetConfig+0x6aa>
10009204:	2380      	movs	r3, #128	; 0x80
10009206:	e012      	b.n	1000922e <UART_SetConfig+0x6aa>
10009208:	2340      	movs	r3, #64	; 0x40
1000920a:	e010      	b.n	1000922e <UART_SetConfig+0x6aa>
1000920c:	2320      	movs	r3, #32
1000920e:	e00e      	b.n	1000922e <UART_SetConfig+0x6aa>
10009210:	2310      	movs	r3, #16
10009212:	e00c      	b.n	1000922e <UART_SetConfig+0x6aa>
10009214:	230c      	movs	r3, #12
10009216:	e00a      	b.n	1000922e <UART_SetConfig+0x6aa>
10009218:	230a      	movs	r3, #10
1000921a:	e008      	b.n	1000922e <UART_SetConfig+0x6aa>
1000921c:	2308      	movs	r3, #8
1000921e:	e006      	b.n	1000922e <UART_SetConfig+0x6aa>
10009220:	2306      	movs	r3, #6
10009222:	e004      	b.n	1000922e <UART_SetConfig+0x6aa>
10009224:	2304      	movs	r3, #4
10009226:	e002      	b.n	1000922e <UART_SetConfig+0x6aa>
10009228:	2302      	movs	r3, #2
1000922a:	e000      	b.n	1000922e <UART_SetConfig+0x6aa>
1000922c:	2301      	movs	r3, #1
1000922e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10009230:	fbb2 f3f3 	udiv	r3, r2, r3
10009234:	005a      	lsls	r2, r3, #1
10009236:	687b      	ldr	r3, [r7, #4]
10009238:	685b      	ldr	r3, [r3, #4]
1000923a:	085b      	lsrs	r3, r3, #1
1000923c:	441a      	add	r2, r3
1000923e:	687b      	ldr	r3, [r7, #4]
10009240:	685b      	ldr	r3, [r3, #4]
10009242:	fbb2 f3f3 	udiv	r3, r2, r3
10009246:	b29b      	uxth	r3, r3
10009248:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000924a:	e1ca      	b.n	100095e2 <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PLL3Q:
        HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000924c:	f107 0314 	add.w	r3, r7, #20
10009250:	4618      	mov	r0, r3
10009252:	f7fb fa81 	bl	10004758 <HAL_RCC_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009256:	69ba      	ldr	r2, [r7, #24]
10009258:	687b      	ldr	r3, [r7, #4]
1000925a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000925c:	2b00      	cmp	r3, #0
1000925e:	d044      	beq.n	100092ea <UART_SetConfig+0x766>
10009260:	687b      	ldr	r3, [r7, #4]
10009262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009264:	2b01      	cmp	r3, #1
10009266:	d03e      	beq.n	100092e6 <UART_SetConfig+0x762>
10009268:	687b      	ldr	r3, [r7, #4]
1000926a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000926c:	2b02      	cmp	r3, #2
1000926e:	d038      	beq.n	100092e2 <UART_SetConfig+0x75e>
10009270:	687b      	ldr	r3, [r7, #4]
10009272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009274:	2b03      	cmp	r3, #3
10009276:	d032      	beq.n	100092de <UART_SetConfig+0x75a>
10009278:	687b      	ldr	r3, [r7, #4]
1000927a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000927c:	2b04      	cmp	r3, #4
1000927e:	d02c      	beq.n	100092da <UART_SetConfig+0x756>
10009280:	687b      	ldr	r3, [r7, #4]
10009282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009284:	2b05      	cmp	r3, #5
10009286:	d026      	beq.n	100092d6 <UART_SetConfig+0x752>
10009288:	687b      	ldr	r3, [r7, #4]
1000928a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000928c:	2b06      	cmp	r3, #6
1000928e:	d020      	beq.n	100092d2 <UART_SetConfig+0x74e>
10009290:	687b      	ldr	r3, [r7, #4]
10009292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009294:	2b07      	cmp	r3, #7
10009296:	d01a      	beq.n	100092ce <UART_SetConfig+0x74a>
10009298:	687b      	ldr	r3, [r7, #4]
1000929a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000929c:	2b08      	cmp	r3, #8
1000929e:	d014      	beq.n	100092ca <UART_SetConfig+0x746>
100092a0:	687b      	ldr	r3, [r7, #4]
100092a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100092a4:	2b09      	cmp	r3, #9
100092a6:	d00e      	beq.n	100092c6 <UART_SetConfig+0x742>
100092a8:	687b      	ldr	r3, [r7, #4]
100092aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100092ac:	2b0a      	cmp	r3, #10
100092ae:	d008      	beq.n	100092c2 <UART_SetConfig+0x73e>
100092b0:	687b      	ldr	r3, [r7, #4]
100092b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100092b4:	2b0b      	cmp	r3, #11
100092b6:	d102      	bne.n	100092be <UART_SetConfig+0x73a>
100092b8:	f44f 7380 	mov.w	r3, #256	; 0x100
100092bc:	e016      	b.n	100092ec <UART_SetConfig+0x768>
100092be:	2301      	movs	r3, #1
100092c0:	e014      	b.n	100092ec <UART_SetConfig+0x768>
100092c2:	2380      	movs	r3, #128	; 0x80
100092c4:	e012      	b.n	100092ec <UART_SetConfig+0x768>
100092c6:	2340      	movs	r3, #64	; 0x40
100092c8:	e010      	b.n	100092ec <UART_SetConfig+0x768>
100092ca:	2320      	movs	r3, #32
100092cc:	e00e      	b.n	100092ec <UART_SetConfig+0x768>
100092ce:	2310      	movs	r3, #16
100092d0:	e00c      	b.n	100092ec <UART_SetConfig+0x768>
100092d2:	230c      	movs	r3, #12
100092d4:	e00a      	b.n	100092ec <UART_SetConfig+0x768>
100092d6:	230a      	movs	r3, #10
100092d8:	e008      	b.n	100092ec <UART_SetConfig+0x768>
100092da:	2308      	movs	r3, #8
100092dc:	e006      	b.n	100092ec <UART_SetConfig+0x768>
100092de:	2306      	movs	r3, #6
100092e0:	e004      	b.n	100092ec <UART_SetConfig+0x768>
100092e2:	2304      	movs	r3, #4
100092e4:	e002      	b.n	100092ec <UART_SetConfig+0x768>
100092e6:	2302      	movs	r3, #2
100092e8:	e000      	b.n	100092ec <UART_SetConfig+0x768>
100092ea:	2301      	movs	r3, #1
100092ec:	fbb2 f3f3 	udiv	r3, r2, r3
100092f0:	005a      	lsls	r2, r3, #1
100092f2:	687b      	ldr	r3, [r7, #4]
100092f4:	685b      	ldr	r3, [r3, #4]
100092f6:	085b      	lsrs	r3, r3, #1
100092f8:	441a      	add	r2, r3
100092fa:	687b      	ldr	r3, [r7, #4]
100092fc:	685b      	ldr	r3, [r3, #4]
100092fe:	fbb2 f3f3 	udiv	r3, r2, r3
10009302:	b29b      	uxth	r3, r3
10009304:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009306:	e16c      	b.n	100095e2 <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PLL4Q:
        HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10009308:	f107 0308 	add.w	r3, r7, #8
1000930c:	4618      	mov	r0, r3
1000930e:	f7fb fb1d 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll4_clocks.PLL4_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009312:	68fa      	ldr	r2, [r7, #12]
10009314:	687b      	ldr	r3, [r7, #4]
10009316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009318:	2b00      	cmp	r3, #0
1000931a:	d044      	beq.n	100093a6 <UART_SetConfig+0x822>
1000931c:	687b      	ldr	r3, [r7, #4]
1000931e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009320:	2b01      	cmp	r3, #1
10009322:	d03e      	beq.n	100093a2 <UART_SetConfig+0x81e>
10009324:	687b      	ldr	r3, [r7, #4]
10009326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009328:	2b02      	cmp	r3, #2
1000932a:	d038      	beq.n	1000939e <UART_SetConfig+0x81a>
1000932c:	687b      	ldr	r3, [r7, #4]
1000932e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009330:	2b03      	cmp	r3, #3
10009332:	d032      	beq.n	1000939a <UART_SetConfig+0x816>
10009334:	687b      	ldr	r3, [r7, #4]
10009336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009338:	2b04      	cmp	r3, #4
1000933a:	d02c      	beq.n	10009396 <UART_SetConfig+0x812>
1000933c:	687b      	ldr	r3, [r7, #4]
1000933e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009340:	2b05      	cmp	r3, #5
10009342:	d026      	beq.n	10009392 <UART_SetConfig+0x80e>
10009344:	687b      	ldr	r3, [r7, #4]
10009346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009348:	2b06      	cmp	r3, #6
1000934a:	d020      	beq.n	1000938e <UART_SetConfig+0x80a>
1000934c:	687b      	ldr	r3, [r7, #4]
1000934e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009350:	2b07      	cmp	r3, #7
10009352:	d01a      	beq.n	1000938a <UART_SetConfig+0x806>
10009354:	687b      	ldr	r3, [r7, #4]
10009356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009358:	2b08      	cmp	r3, #8
1000935a:	d014      	beq.n	10009386 <UART_SetConfig+0x802>
1000935c:	687b      	ldr	r3, [r7, #4]
1000935e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009360:	2b09      	cmp	r3, #9
10009362:	d00e      	beq.n	10009382 <UART_SetConfig+0x7fe>
10009364:	687b      	ldr	r3, [r7, #4]
10009366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009368:	2b0a      	cmp	r3, #10
1000936a:	d008      	beq.n	1000937e <UART_SetConfig+0x7fa>
1000936c:	687b      	ldr	r3, [r7, #4]
1000936e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009370:	2b0b      	cmp	r3, #11
10009372:	d102      	bne.n	1000937a <UART_SetConfig+0x7f6>
10009374:	f44f 7380 	mov.w	r3, #256	; 0x100
10009378:	e016      	b.n	100093a8 <UART_SetConfig+0x824>
1000937a:	2301      	movs	r3, #1
1000937c:	e014      	b.n	100093a8 <UART_SetConfig+0x824>
1000937e:	2380      	movs	r3, #128	; 0x80
10009380:	e012      	b.n	100093a8 <UART_SetConfig+0x824>
10009382:	2340      	movs	r3, #64	; 0x40
10009384:	e010      	b.n	100093a8 <UART_SetConfig+0x824>
10009386:	2320      	movs	r3, #32
10009388:	e00e      	b.n	100093a8 <UART_SetConfig+0x824>
1000938a:	2310      	movs	r3, #16
1000938c:	e00c      	b.n	100093a8 <UART_SetConfig+0x824>
1000938e:	230c      	movs	r3, #12
10009390:	e00a      	b.n	100093a8 <UART_SetConfig+0x824>
10009392:	230a      	movs	r3, #10
10009394:	e008      	b.n	100093a8 <UART_SetConfig+0x824>
10009396:	2308      	movs	r3, #8
10009398:	e006      	b.n	100093a8 <UART_SetConfig+0x824>
1000939a:	2306      	movs	r3, #6
1000939c:	e004      	b.n	100093a8 <UART_SetConfig+0x824>
1000939e:	2304      	movs	r3, #4
100093a0:	e002      	b.n	100093a8 <UART_SetConfig+0x824>
100093a2:	2302      	movs	r3, #2
100093a4:	e000      	b.n	100093a8 <UART_SetConfig+0x824>
100093a6:	2301      	movs	r3, #1
100093a8:	fbb2 f3f3 	udiv	r3, r2, r3
100093ac:	005a      	lsls	r2, r3, #1
100093ae:	687b      	ldr	r3, [r7, #4]
100093b0:	685b      	ldr	r3, [r3, #4]
100093b2:	085b      	lsrs	r3, r3, #1
100093b4:	441a      	add	r2, r3
100093b6:	687b      	ldr	r3, [r7, #4]
100093b8:	685b      	ldr	r3, [r3, #4]
100093ba:	fbb2 f3f3 	udiv	r3, r2, r3
100093be:	b29b      	uxth	r3, r3
100093c0:	633b      	str	r3, [r7, #48]	; 0x30
        break;
100093c2:	e10e      	b.n	100095e2 <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100093c4:	687b      	ldr	r3, [r7, #4]
100093c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100093c8:	2b00      	cmp	r3, #0
100093ca:	d044      	beq.n	10009456 <UART_SetConfig+0x8d2>
100093cc:	687b      	ldr	r3, [r7, #4]
100093ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100093d0:	2b01      	cmp	r3, #1
100093d2:	d03e      	beq.n	10009452 <UART_SetConfig+0x8ce>
100093d4:	687b      	ldr	r3, [r7, #4]
100093d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100093d8:	2b02      	cmp	r3, #2
100093da:	d038      	beq.n	1000944e <UART_SetConfig+0x8ca>
100093dc:	687b      	ldr	r3, [r7, #4]
100093de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100093e0:	2b03      	cmp	r3, #3
100093e2:	d032      	beq.n	1000944a <UART_SetConfig+0x8c6>
100093e4:	687b      	ldr	r3, [r7, #4]
100093e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100093e8:	2b04      	cmp	r3, #4
100093ea:	d02c      	beq.n	10009446 <UART_SetConfig+0x8c2>
100093ec:	687b      	ldr	r3, [r7, #4]
100093ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100093f0:	2b05      	cmp	r3, #5
100093f2:	d026      	beq.n	10009442 <UART_SetConfig+0x8be>
100093f4:	687b      	ldr	r3, [r7, #4]
100093f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100093f8:	2b06      	cmp	r3, #6
100093fa:	d020      	beq.n	1000943e <UART_SetConfig+0x8ba>
100093fc:	687b      	ldr	r3, [r7, #4]
100093fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009400:	2b07      	cmp	r3, #7
10009402:	d01a      	beq.n	1000943a <UART_SetConfig+0x8b6>
10009404:	687b      	ldr	r3, [r7, #4]
10009406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009408:	2b08      	cmp	r3, #8
1000940a:	d014      	beq.n	10009436 <UART_SetConfig+0x8b2>
1000940c:	687b      	ldr	r3, [r7, #4]
1000940e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009410:	2b09      	cmp	r3, #9
10009412:	d00e      	beq.n	10009432 <UART_SetConfig+0x8ae>
10009414:	687b      	ldr	r3, [r7, #4]
10009416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009418:	2b0a      	cmp	r3, #10
1000941a:	d008      	beq.n	1000942e <UART_SetConfig+0x8aa>
1000941c:	687b      	ldr	r3, [r7, #4]
1000941e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009420:	2b0b      	cmp	r3, #11
10009422:	d102      	bne.n	1000942a <UART_SetConfig+0x8a6>
10009424:	f44f 7380 	mov.w	r3, #256	; 0x100
10009428:	e016      	b.n	10009458 <UART_SetConfig+0x8d4>
1000942a:	2301      	movs	r3, #1
1000942c:	e014      	b.n	10009458 <UART_SetConfig+0x8d4>
1000942e:	2380      	movs	r3, #128	; 0x80
10009430:	e012      	b.n	10009458 <UART_SetConfig+0x8d4>
10009432:	2340      	movs	r3, #64	; 0x40
10009434:	e010      	b.n	10009458 <UART_SetConfig+0x8d4>
10009436:	2320      	movs	r3, #32
10009438:	e00e      	b.n	10009458 <UART_SetConfig+0x8d4>
1000943a:	2310      	movs	r3, #16
1000943c:	e00c      	b.n	10009458 <UART_SetConfig+0x8d4>
1000943e:	230c      	movs	r3, #12
10009440:	e00a      	b.n	10009458 <UART_SetConfig+0x8d4>
10009442:	230a      	movs	r3, #10
10009444:	e008      	b.n	10009458 <UART_SetConfig+0x8d4>
10009446:	2308      	movs	r3, #8
10009448:	e006      	b.n	10009458 <UART_SetConfig+0x8d4>
1000944a:	2306      	movs	r3, #6
1000944c:	e004      	b.n	10009458 <UART_SetConfig+0x8d4>
1000944e:	2304      	movs	r3, #4
10009450:	e002      	b.n	10009458 <UART_SetConfig+0x8d4>
10009452:	2302      	movs	r3, #2
10009454:	e000      	b.n	10009458 <UART_SetConfig+0x8d4>
10009456:	2301      	movs	r3, #1
10009458:	4a9a      	ldr	r2, [pc, #616]	; (100096c4 <UART_SetConfig+0xb40>)
1000945a:	fbb2 f3f3 	udiv	r3, r2, r3
1000945e:	005a      	lsls	r2, r3, #1
10009460:	687b      	ldr	r3, [r7, #4]
10009462:	685b      	ldr	r3, [r3, #4]
10009464:	085b      	lsrs	r3, r3, #1
10009466:	441a      	add	r2, r3
10009468:	687b      	ldr	r3, [r7, #4]
1000946a:	685b      	ldr	r3, [r3, #4]
1000946c:	fbb2 f3f3 	udiv	r3, r2, r3
10009470:	b29b      	uxth	r3, r3
10009472:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009474:	e0b5      	b.n	100095e2 <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009476:	687b      	ldr	r3, [r7, #4]
10009478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000947a:	2b00      	cmp	r3, #0
1000947c:	d044      	beq.n	10009508 <UART_SetConfig+0x984>
1000947e:	687b      	ldr	r3, [r7, #4]
10009480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009482:	2b01      	cmp	r3, #1
10009484:	d03e      	beq.n	10009504 <UART_SetConfig+0x980>
10009486:	687b      	ldr	r3, [r7, #4]
10009488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000948a:	2b02      	cmp	r3, #2
1000948c:	d038      	beq.n	10009500 <UART_SetConfig+0x97c>
1000948e:	687b      	ldr	r3, [r7, #4]
10009490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009492:	2b03      	cmp	r3, #3
10009494:	d032      	beq.n	100094fc <UART_SetConfig+0x978>
10009496:	687b      	ldr	r3, [r7, #4]
10009498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000949a:	2b04      	cmp	r3, #4
1000949c:	d02c      	beq.n	100094f8 <UART_SetConfig+0x974>
1000949e:	687b      	ldr	r3, [r7, #4]
100094a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100094a2:	2b05      	cmp	r3, #5
100094a4:	d026      	beq.n	100094f4 <UART_SetConfig+0x970>
100094a6:	687b      	ldr	r3, [r7, #4]
100094a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100094aa:	2b06      	cmp	r3, #6
100094ac:	d020      	beq.n	100094f0 <UART_SetConfig+0x96c>
100094ae:	687b      	ldr	r3, [r7, #4]
100094b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100094b2:	2b07      	cmp	r3, #7
100094b4:	d01a      	beq.n	100094ec <UART_SetConfig+0x968>
100094b6:	687b      	ldr	r3, [r7, #4]
100094b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100094ba:	2b08      	cmp	r3, #8
100094bc:	d014      	beq.n	100094e8 <UART_SetConfig+0x964>
100094be:	687b      	ldr	r3, [r7, #4]
100094c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100094c2:	2b09      	cmp	r3, #9
100094c4:	d00e      	beq.n	100094e4 <UART_SetConfig+0x960>
100094c6:	687b      	ldr	r3, [r7, #4]
100094c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100094ca:	2b0a      	cmp	r3, #10
100094cc:	d008      	beq.n	100094e0 <UART_SetConfig+0x95c>
100094ce:	687b      	ldr	r3, [r7, #4]
100094d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100094d2:	2b0b      	cmp	r3, #11
100094d4:	d102      	bne.n	100094dc <UART_SetConfig+0x958>
100094d6:	f44f 7380 	mov.w	r3, #256	; 0x100
100094da:	e016      	b.n	1000950a <UART_SetConfig+0x986>
100094dc:	2301      	movs	r3, #1
100094de:	e014      	b.n	1000950a <UART_SetConfig+0x986>
100094e0:	2380      	movs	r3, #128	; 0x80
100094e2:	e012      	b.n	1000950a <UART_SetConfig+0x986>
100094e4:	2340      	movs	r3, #64	; 0x40
100094e6:	e010      	b.n	1000950a <UART_SetConfig+0x986>
100094e8:	2320      	movs	r3, #32
100094ea:	e00e      	b.n	1000950a <UART_SetConfig+0x986>
100094ec:	2310      	movs	r3, #16
100094ee:	e00c      	b.n	1000950a <UART_SetConfig+0x986>
100094f0:	230c      	movs	r3, #12
100094f2:	e00a      	b.n	1000950a <UART_SetConfig+0x986>
100094f4:	230a      	movs	r3, #10
100094f6:	e008      	b.n	1000950a <UART_SetConfig+0x986>
100094f8:	2308      	movs	r3, #8
100094fa:	e006      	b.n	1000950a <UART_SetConfig+0x986>
100094fc:	2306      	movs	r3, #6
100094fe:	e004      	b.n	1000950a <UART_SetConfig+0x986>
10009500:	2304      	movs	r3, #4
10009502:	e002      	b.n	1000950a <UART_SetConfig+0x986>
10009504:	2302      	movs	r3, #2
10009506:	e000      	b.n	1000950a <UART_SetConfig+0x986>
10009508:	2301      	movs	r3, #1
1000950a:	4a6f      	ldr	r2, [pc, #444]	; (100096c8 <UART_SetConfig+0xb44>)
1000950c:	fbb2 f3f3 	udiv	r3, r2, r3
10009510:	005a      	lsls	r2, r3, #1
10009512:	687b      	ldr	r3, [r7, #4]
10009514:	685b      	ldr	r3, [r3, #4]
10009516:	085b      	lsrs	r3, r3, #1
10009518:	441a      	add	r2, r3
1000951a:	687b      	ldr	r3, [r7, #4]
1000951c:	685b      	ldr	r3, [r3, #4]
1000951e:	fbb2 f3f3 	udiv	r3, r2, r3
10009522:	b29b      	uxth	r3, r3
10009524:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009526:	e05c      	b.n	100095e2 <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_HSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009528:	687b      	ldr	r3, [r7, #4]
1000952a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000952c:	2b00      	cmp	r3, #0
1000952e:	d044      	beq.n	100095ba <UART_SetConfig+0xa36>
10009530:	687b      	ldr	r3, [r7, #4]
10009532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009534:	2b01      	cmp	r3, #1
10009536:	d03e      	beq.n	100095b6 <UART_SetConfig+0xa32>
10009538:	687b      	ldr	r3, [r7, #4]
1000953a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000953c:	2b02      	cmp	r3, #2
1000953e:	d038      	beq.n	100095b2 <UART_SetConfig+0xa2e>
10009540:	687b      	ldr	r3, [r7, #4]
10009542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009544:	2b03      	cmp	r3, #3
10009546:	d032      	beq.n	100095ae <UART_SetConfig+0xa2a>
10009548:	687b      	ldr	r3, [r7, #4]
1000954a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000954c:	2b04      	cmp	r3, #4
1000954e:	d02c      	beq.n	100095aa <UART_SetConfig+0xa26>
10009550:	687b      	ldr	r3, [r7, #4]
10009552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009554:	2b05      	cmp	r3, #5
10009556:	d026      	beq.n	100095a6 <UART_SetConfig+0xa22>
10009558:	687b      	ldr	r3, [r7, #4]
1000955a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000955c:	2b06      	cmp	r3, #6
1000955e:	d020      	beq.n	100095a2 <UART_SetConfig+0xa1e>
10009560:	687b      	ldr	r3, [r7, #4]
10009562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009564:	2b07      	cmp	r3, #7
10009566:	d01a      	beq.n	1000959e <UART_SetConfig+0xa1a>
10009568:	687b      	ldr	r3, [r7, #4]
1000956a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000956c:	2b08      	cmp	r3, #8
1000956e:	d014      	beq.n	1000959a <UART_SetConfig+0xa16>
10009570:	687b      	ldr	r3, [r7, #4]
10009572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009574:	2b09      	cmp	r3, #9
10009576:	d00e      	beq.n	10009596 <UART_SetConfig+0xa12>
10009578:	687b      	ldr	r3, [r7, #4]
1000957a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000957c:	2b0a      	cmp	r3, #10
1000957e:	d008      	beq.n	10009592 <UART_SetConfig+0xa0e>
10009580:	687b      	ldr	r3, [r7, #4]
10009582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009584:	2b0b      	cmp	r3, #11
10009586:	d102      	bne.n	1000958e <UART_SetConfig+0xa0a>
10009588:	f44f 7380 	mov.w	r3, #256	; 0x100
1000958c:	e016      	b.n	100095bc <UART_SetConfig+0xa38>
1000958e:	2301      	movs	r3, #1
10009590:	e014      	b.n	100095bc <UART_SetConfig+0xa38>
10009592:	2380      	movs	r3, #128	; 0x80
10009594:	e012      	b.n	100095bc <UART_SetConfig+0xa38>
10009596:	2340      	movs	r3, #64	; 0x40
10009598:	e010      	b.n	100095bc <UART_SetConfig+0xa38>
1000959a:	2320      	movs	r3, #32
1000959c:	e00e      	b.n	100095bc <UART_SetConfig+0xa38>
1000959e:	2310      	movs	r3, #16
100095a0:	e00c      	b.n	100095bc <UART_SetConfig+0xa38>
100095a2:	230c      	movs	r3, #12
100095a4:	e00a      	b.n	100095bc <UART_SetConfig+0xa38>
100095a6:	230a      	movs	r3, #10
100095a8:	e008      	b.n	100095bc <UART_SetConfig+0xa38>
100095aa:	2308      	movs	r3, #8
100095ac:	e006      	b.n	100095bc <UART_SetConfig+0xa38>
100095ae:	2306      	movs	r3, #6
100095b0:	e004      	b.n	100095bc <UART_SetConfig+0xa38>
100095b2:	2304      	movs	r3, #4
100095b4:	e002      	b.n	100095bc <UART_SetConfig+0xa38>
100095b6:	2302      	movs	r3, #2
100095b8:	e000      	b.n	100095bc <UART_SetConfig+0xa38>
100095ba:	2301      	movs	r3, #1
100095bc:	4a43      	ldr	r2, [pc, #268]	; (100096cc <UART_SetConfig+0xb48>)
100095be:	fbb2 f3f3 	udiv	r3, r2, r3
100095c2:	005a      	lsls	r2, r3, #1
100095c4:	687b      	ldr	r3, [r7, #4]
100095c6:	685b      	ldr	r3, [r3, #4]
100095c8:	085b      	lsrs	r3, r3, #1
100095ca:	441a      	add	r2, r3
100095cc:	687b      	ldr	r3, [r7, #4]
100095ce:	685b      	ldr	r3, [r3, #4]
100095d0:	fbb2 f3f3 	udiv	r3, r2, r3
100095d4:	b29b      	uxth	r3, r3
100095d6:	633b      	str	r3, [r7, #48]	; 0x30
        break;
100095d8:	e003      	b.n	100095e2 <UART_SetConfig+0xa5e>
      default:
        ret = HAL_ERROR;
100095da:	2301      	movs	r3, #1
100095dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
100095e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
100095e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100095e4:	2b0f      	cmp	r3, #15
100095e6:	d916      	bls.n	10009616 <UART_SetConfig+0xa92>
100095e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100095ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
100095ee:	d212      	bcs.n	10009616 <UART_SetConfig+0xa92>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
100095f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100095f2:	b29b      	uxth	r3, r3
100095f4:	f023 030f 	bic.w	r3, r3, #15
100095f8:	847b      	strh	r3, [r7, #34]	; 0x22
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
100095fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100095fc:	085b      	lsrs	r3, r3, #1
100095fe:	b29b      	uxth	r3, r3
10009600:	f003 0307 	and.w	r3, r3, #7
10009604:	b29a      	uxth	r2, r3
10009606:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
10009608:	4313      	orrs	r3, r2
1000960a:	847b      	strh	r3, [r7, #34]	; 0x22
      huart->Instance->BRR = brrtemp;
1000960c:	687b      	ldr	r3, [r7, #4]
1000960e:	681b      	ldr	r3, [r3, #0]
10009610:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
10009612:	60da      	str	r2, [r3, #12]
10009614:	e342      	b.n	10009c9c <UART_SetConfig+0x1118>
    }
    else
    {
      ret = HAL_ERROR;
10009616:	2301      	movs	r3, #1
10009618:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
1000961c:	e33e      	b.n	10009c9c <UART_SetConfig+0x1118>
    }
  }
  else
  {
    switch (clocksource)
1000961e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
10009622:	2b20      	cmp	r3, #32
10009624:	dc4a      	bgt.n	100096bc <UART_SetConfig+0xb38>
10009626:	2b00      	cmp	r3, #0
10009628:	f2c0 8325 	blt.w	10009c76 <UART_SetConfig+0x10f2>
1000962c:	2b20      	cmp	r3, #32
1000962e:	f200 8322 	bhi.w	10009c76 <UART_SetConfig+0x10f2>
10009632:	a201      	add	r2, pc, #4	; (adr r2, 10009638 <UART_SetConfig+0xab4>)
10009634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009638:	100096d1 	.word	0x100096d1
1000963c:	10009787 	.word	0x10009787
10009640:	1000983d 	.word	0x1000983d
10009644:	10009c77 	.word	0x10009c77
10009648:	100098f3 	.word	0x100098f3
1000964c:	10009c77 	.word	0x10009c77
10009650:	10009c77 	.word	0x10009c77
10009654:	10009c77 	.word	0x10009c77
10009658:	100099ad 	.word	0x100099ad
1000965c:	10009c77 	.word	0x10009c77
10009660:	10009c77 	.word	0x10009c77
10009664:	10009c77 	.word	0x10009c77
10009668:	10009c77 	.word	0x10009c77
1000966c:	10009c77 	.word	0x10009c77
10009670:	10009c77 	.word	0x10009c77
10009674:	10009c77 	.word	0x10009c77
10009678:	10009a67 	.word	0x10009a67
1000967c:	10009c77 	.word	0x10009c77
10009680:	10009c77 	.word	0x10009c77
10009684:	10009c77 	.word	0x10009c77
10009688:	10009c77 	.word	0x10009c77
1000968c:	10009c77 	.word	0x10009c77
10009690:	10009c77 	.word	0x10009c77
10009694:	10009c77 	.word	0x10009c77
10009698:	10009c77 	.word	0x10009c77
1000969c:	10009c77 	.word	0x10009c77
100096a0:	10009c77 	.word	0x10009c77
100096a4:	10009c77 	.word	0x10009c77
100096a8:	10009c77 	.word	0x10009c77
100096ac:	10009c77 	.word	0x10009c77
100096b0:	10009c77 	.word	0x10009c77
100096b4:	10009c77 	.word	0x10009c77
100096b8:	10009b17 	.word	0x10009b17
100096bc:	2b40      	cmp	r3, #64	; 0x40
100096be:	f000 8282 	beq.w	10009bc6 <UART_SetConfig+0x1042>
100096c2:	e2d8      	b.n	10009c76 <UART_SetConfig+0x10f2>
100096c4:	03d09000 	.word	0x03d09000
100096c8:	003d0900 	.word	0x003d0900
100096cc:	016e3600 	.word	0x016e3600
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
100096d0:	f7fb fa44 	bl	10004b5c <HAL_RCC_GetPCLK1Freq>
100096d4:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100096d6:	687b      	ldr	r3, [r7, #4]
100096d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100096da:	2b00      	cmp	r3, #0
100096dc:	d044      	beq.n	10009768 <UART_SetConfig+0xbe4>
100096de:	687b      	ldr	r3, [r7, #4]
100096e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100096e2:	2b01      	cmp	r3, #1
100096e4:	d03e      	beq.n	10009764 <UART_SetConfig+0xbe0>
100096e6:	687b      	ldr	r3, [r7, #4]
100096e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100096ea:	2b02      	cmp	r3, #2
100096ec:	d038      	beq.n	10009760 <UART_SetConfig+0xbdc>
100096ee:	687b      	ldr	r3, [r7, #4]
100096f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100096f2:	2b03      	cmp	r3, #3
100096f4:	d032      	beq.n	1000975c <UART_SetConfig+0xbd8>
100096f6:	687b      	ldr	r3, [r7, #4]
100096f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100096fa:	2b04      	cmp	r3, #4
100096fc:	d02c      	beq.n	10009758 <UART_SetConfig+0xbd4>
100096fe:	687b      	ldr	r3, [r7, #4]
10009700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009702:	2b05      	cmp	r3, #5
10009704:	d026      	beq.n	10009754 <UART_SetConfig+0xbd0>
10009706:	687b      	ldr	r3, [r7, #4]
10009708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000970a:	2b06      	cmp	r3, #6
1000970c:	d020      	beq.n	10009750 <UART_SetConfig+0xbcc>
1000970e:	687b      	ldr	r3, [r7, #4]
10009710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009712:	2b07      	cmp	r3, #7
10009714:	d01a      	beq.n	1000974c <UART_SetConfig+0xbc8>
10009716:	687b      	ldr	r3, [r7, #4]
10009718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000971a:	2b08      	cmp	r3, #8
1000971c:	d014      	beq.n	10009748 <UART_SetConfig+0xbc4>
1000971e:	687b      	ldr	r3, [r7, #4]
10009720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009722:	2b09      	cmp	r3, #9
10009724:	d00e      	beq.n	10009744 <UART_SetConfig+0xbc0>
10009726:	687b      	ldr	r3, [r7, #4]
10009728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000972a:	2b0a      	cmp	r3, #10
1000972c:	d008      	beq.n	10009740 <UART_SetConfig+0xbbc>
1000972e:	687b      	ldr	r3, [r7, #4]
10009730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009732:	2b0b      	cmp	r3, #11
10009734:	d102      	bne.n	1000973c <UART_SetConfig+0xbb8>
10009736:	f44f 7380 	mov.w	r3, #256	; 0x100
1000973a:	e016      	b.n	1000976a <UART_SetConfig+0xbe6>
1000973c:	2301      	movs	r3, #1
1000973e:	e014      	b.n	1000976a <UART_SetConfig+0xbe6>
10009740:	2380      	movs	r3, #128	; 0x80
10009742:	e012      	b.n	1000976a <UART_SetConfig+0xbe6>
10009744:	2340      	movs	r3, #64	; 0x40
10009746:	e010      	b.n	1000976a <UART_SetConfig+0xbe6>
10009748:	2320      	movs	r3, #32
1000974a:	e00e      	b.n	1000976a <UART_SetConfig+0xbe6>
1000974c:	2310      	movs	r3, #16
1000974e:	e00c      	b.n	1000976a <UART_SetConfig+0xbe6>
10009750:	230c      	movs	r3, #12
10009752:	e00a      	b.n	1000976a <UART_SetConfig+0xbe6>
10009754:	230a      	movs	r3, #10
10009756:	e008      	b.n	1000976a <UART_SetConfig+0xbe6>
10009758:	2308      	movs	r3, #8
1000975a:	e006      	b.n	1000976a <UART_SetConfig+0xbe6>
1000975c:	2306      	movs	r3, #6
1000975e:	e004      	b.n	1000976a <UART_SetConfig+0xbe6>
10009760:	2304      	movs	r3, #4
10009762:	e002      	b.n	1000976a <UART_SetConfig+0xbe6>
10009764:	2302      	movs	r3, #2
10009766:	e000      	b.n	1000976a <UART_SetConfig+0xbe6>
10009768:	2301      	movs	r3, #1
1000976a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000976c:	fbb2 f2f3 	udiv	r2, r2, r3
10009770:	687b      	ldr	r3, [r7, #4]
10009772:	685b      	ldr	r3, [r3, #4]
10009774:	085b      	lsrs	r3, r3, #1
10009776:	441a      	add	r2, r3
10009778:	687b      	ldr	r3, [r7, #4]
1000977a:	685b      	ldr	r3, [r3, #4]
1000977c:	fbb2 f3f3 	udiv	r3, r2, r3
10009780:	b29b      	uxth	r3, r3
10009782:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009784:	e27b      	b.n	10009c7e <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
10009786:	f7fb fa04 	bl	10004b92 <HAL_RCC_GetPCLK2Freq>
1000978a:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000978c:	687b      	ldr	r3, [r7, #4]
1000978e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009790:	2b00      	cmp	r3, #0
10009792:	d044      	beq.n	1000981e <UART_SetConfig+0xc9a>
10009794:	687b      	ldr	r3, [r7, #4]
10009796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009798:	2b01      	cmp	r3, #1
1000979a:	d03e      	beq.n	1000981a <UART_SetConfig+0xc96>
1000979c:	687b      	ldr	r3, [r7, #4]
1000979e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100097a0:	2b02      	cmp	r3, #2
100097a2:	d038      	beq.n	10009816 <UART_SetConfig+0xc92>
100097a4:	687b      	ldr	r3, [r7, #4]
100097a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100097a8:	2b03      	cmp	r3, #3
100097aa:	d032      	beq.n	10009812 <UART_SetConfig+0xc8e>
100097ac:	687b      	ldr	r3, [r7, #4]
100097ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100097b0:	2b04      	cmp	r3, #4
100097b2:	d02c      	beq.n	1000980e <UART_SetConfig+0xc8a>
100097b4:	687b      	ldr	r3, [r7, #4]
100097b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100097b8:	2b05      	cmp	r3, #5
100097ba:	d026      	beq.n	1000980a <UART_SetConfig+0xc86>
100097bc:	687b      	ldr	r3, [r7, #4]
100097be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100097c0:	2b06      	cmp	r3, #6
100097c2:	d020      	beq.n	10009806 <UART_SetConfig+0xc82>
100097c4:	687b      	ldr	r3, [r7, #4]
100097c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100097c8:	2b07      	cmp	r3, #7
100097ca:	d01a      	beq.n	10009802 <UART_SetConfig+0xc7e>
100097cc:	687b      	ldr	r3, [r7, #4]
100097ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100097d0:	2b08      	cmp	r3, #8
100097d2:	d014      	beq.n	100097fe <UART_SetConfig+0xc7a>
100097d4:	687b      	ldr	r3, [r7, #4]
100097d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100097d8:	2b09      	cmp	r3, #9
100097da:	d00e      	beq.n	100097fa <UART_SetConfig+0xc76>
100097dc:	687b      	ldr	r3, [r7, #4]
100097de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100097e0:	2b0a      	cmp	r3, #10
100097e2:	d008      	beq.n	100097f6 <UART_SetConfig+0xc72>
100097e4:	687b      	ldr	r3, [r7, #4]
100097e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100097e8:	2b0b      	cmp	r3, #11
100097ea:	d102      	bne.n	100097f2 <UART_SetConfig+0xc6e>
100097ec:	f44f 7380 	mov.w	r3, #256	; 0x100
100097f0:	e016      	b.n	10009820 <UART_SetConfig+0xc9c>
100097f2:	2301      	movs	r3, #1
100097f4:	e014      	b.n	10009820 <UART_SetConfig+0xc9c>
100097f6:	2380      	movs	r3, #128	; 0x80
100097f8:	e012      	b.n	10009820 <UART_SetConfig+0xc9c>
100097fa:	2340      	movs	r3, #64	; 0x40
100097fc:	e010      	b.n	10009820 <UART_SetConfig+0xc9c>
100097fe:	2320      	movs	r3, #32
10009800:	e00e      	b.n	10009820 <UART_SetConfig+0xc9c>
10009802:	2310      	movs	r3, #16
10009804:	e00c      	b.n	10009820 <UART_SetConfig+0xc9c>
10009806:	230c      	movs	r3, #12
10009808:	e00a      	b.n	10009820 <UART_SetConfig+0xc9c>
1000980a:	230a      	movs	r3, #10
1000980c:	e008      	b.n	10009820 <UART_SetConfig+0xc9c>
1000980e:	2308      	movs	r3, #8
10009810:	e006      	b.n	10009820 <UART_SetConfig+0xc9c>
10009812:	2306      	movs	r3, #6
10009814:	e004      	b.n	10009820 <UART_SetConfig+0xc9c>
10009816:	2304      	movs	r3, #4
10009818:	e002      	b.n	10009820 <UART_SetConfig+0xc9c>
1000981a:	2302      	movs	r3, #2
1000981c:	e000      	b.n	10009820 <UART_SetConfig+0xc9c>
1000981e:	2301      	movs	r3, #1
10009820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10009822:	fbb2 f2f3 	udiv	r2, r2, r3
10009826:	687b      	ldr	r3, [r7, #4]
10009828:	685b      	ldr	r3, [r3, #4]
1000982a:	085b      	lsrs	r3, r3, #1
1000982c:	441a      	add	r2, r3
1000982e:	687b      	ldr	r3, [r7, #4]
10009830:	685b      	ldr	r3, [r3, #4]
10009832:	fbb2 f3f3 	udiv	r3, r2, r3
10009836:	b29b      	uxth	r3, r3
10009838:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000983a:	e220      	b.n	10009c7e <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PCLK5:
        pclk = HAL_RCC_GetPCLK5Freq();
1000983c:	f7fb f9df 	bl	10004bfe <HAL_RCC_GetPCLK5Freq>
10009840:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009842:	687b      	ldr	r3, [r7, #4]
10009844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009846:	2b00      	cmp	r3, #0
10009848:	d044      	beq.n	100098d4 <UART_SetConfig+0xd50>
1000984a:	687b      	ldr	r3, [r7, #4]
1000984c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000984e:	2b01      	cmp	r3, #1
10009850:	d03e      	beq.n	100098d0 <UART_SetConfig+0xd4c>
10009852:	687b      	ldr	r3, [r7, #4]
10009854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009856:	2b02      	cmp	r3, #2
10009858:	d038      	beq.n	100098cc <UART_SetConfig+0xd48>
1000985a:	687b      	ldr	r3, [r7, #4]
1000985c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000985e:	2b03      	cmp	r3, #3
10009860:	d032      	beq.n	100098c8 <UART_SetConfig+0xd44>
10009862:	687b      	ldr	r3, [r7, #4]
10009864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009866:	2b04      	cmp	r3, #4
10009868:	d02c      	beq.n	100098c4 <UART_SetConfig+0xd40>
1000986a:	687b      	ldr	r3, [r7, #4]
1000986c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000986e:	2b05      	cmp	r3, #5
10009870:	d026      	beq.n	100098c0 <UART_SetConfig+0xd3c>
10009872:	687b      	ldr	r3, [r7, #4]
10009874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009876:	2b06      	cmp	r3, #6
10009878:	d020      	beq.n	100098bc <UART_SetConfig+0xd38>
1000987a:	687b      	ldr	r3, [r7, #4]
1000987c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000987e:	2b07      	cmp	r3, #7
10009880:	d01a      	beq.n	100098b8 <UART_SetConfig+0xd34>
10009882:	687b      	ldr	r3, [r7, #4]
10009884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009886:	2b08      	cmp	r3, #8
10009888:	d014      	beq.n	100098b4 <UART_SetConfig+0xd30>
1000988a:	687b      	ldr	r3, [r7, #4]
1000988c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000988e:	2b09      	cmp	r3, #9
10009890:	d00e      	beq.n	100098b0 <UART_SetConfig+0xd2c>
10009892:	687b      	ldr	r3, [r7, #4]
10009894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009896:	2b0a      	cmp	r3, #10
10009898:	d008      	beq.n	100098ac <UART_SetConfig+0xd28>
1000989a:	687b      	ldr	r3, [r7, #4]
1000989c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000989e:	2b0b      	cmp	r3, #11
100098a0:	d102      	bne.n	100098a8 <UART_SetConfig+0xd24>
100098a2:	f44f 7380 	mov.w	r3, #256	; 0x100
100098a6:	e016      	b.n	100098d6 <UART_SetConfig+0xd52>
100098a8:	2301      	movs	r3, #1
100098aa:	e014      	b.n	100098d6 <UART_SetConfig+0xd52>
100098ac:	2380      	movs	r3, #128	; 0x80
100098ae:	e012      	b.n	100098d6 <UART_SetConfig+0xd52>
100098b0:	2340      	movs	r3, #64	; 0x40
100098b2:	e010      	b.n	100098d6 <UART_SetConfig+0xd52>
100098b4:	2320      	movs	r3, #32
100098b6:	e00e      	b.n	100098d6 <UART_SetConfig+0xd52>
100098b8:	2310      	movs	r3, #16
100098ba:	e00c      	b.n	100098d6 <UART_SetConfig+0xd52>
100098bc:	230c      	movs	r3, #12
100098be:	e00a      	b.n	100098d6 <UART_SetConfig+0xd52>
100098c0:	230a      	movs	r3, #10
100098c2:	e008      	b.n	100098d6 <UART_SetConfig+0xd52>
100098c4:	2308      	movs	r3, #8
100098c6:	e006      	b.n	100098d6 <UART_SetConfig+0xd52>
100098c8:	2306      	movs	r3, #6
100098ca:	e004      	b.n	100098d6 <UART_SetConfig+0xd52>
100098cc:	2304      	movs	r3, #4
100098ce:	e002      	b.n	100098d6 <UART_SetConfig+0xd52>
100098d0:	2302      	movs	r3, #2
100098d2:	e000      	b.n	100098d6 <UART_SetConfig+0xd52>
100098d4:	2301      	movs	r3, #1
100098d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100098d8:	fbb2 f2f3 	udiv	r2, r2, r3
100098dc:	687b      	ldr	r3, [r7, #4]
100098de:	685b      	ldr	r3, [r3, #4]
100098e0:	085b      	lsrs	r3, r3, #1
100098e2:	441a      	add	r2, r3
100098e4:	687b      	ldr	r3, [r7, #4]
100098e6:	685b      	ldr	r3, [r3, #4]
100098e8:	fbb2 f3f3 	udiv	r3, r2, r3
100098ec:	b29b      	uxth	r3, r3
100098ee:	633b      	str	r3, [r7, #48]	; 0x30
        break;
100098f0:	e1c5      	b.n	10009c7e <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PLL3Q:
        HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100098f2:	f107 0314 	add.w	r3, r7, #20
100098f6:	4618      	mov	r0, r3
100098f8:	f7fa ff2e 	bl	10004758 <HAL_RCC_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100098fc:	69ba      	ldr	r2, [r7, #24]
100098fe:	687b      	ldr	r3, [r7, #4]
10009900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009902:	2b00      	cmp	r3, #0
10009904:	d044      	beq.n	10009990 <UART_SetConfig+0xe0c>
10009906:	687b      	ldr	r3, [r7, #4]
10009908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000990a:	2b01      	cmp	r3, #1
1000990c:	d03e      	beq.n	1000998c <UART_SetConfig+0xe08>
1000990e:	687b      	ldr	r3, [r7, #4]
10009910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009912:	2b02      	cmp	r3, #2
10009914:	d038      	beq.n	10009988 <UART_SetConfig+0xe04>
10009916:	687b      	ldr	r3, [r7, #4]
10009918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000991a:	2b03      	cmp	r3, #3
1000991c:	d032      	beq.n	10009984 <UART_SetConfig+0xe00>
1000991e:	687b      	ldr	r3, [r7, #4]
10009920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009922:	2b04      	cmp	r3, #4
10009924:	d02c      	beq.n	10009980 <UART_SetConfig+0xdfc>
10009926:	687b      	ldr	r3, [r7, #4]
10009928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000992a:	2b05      	cmp	r3, #5
1000992c:	d026      	beq.n	1000997c <UART_SetConfig+0xdf8>
1000992e:	687b      	ldr	r3, [r7, #4]
10009930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009932:	2b06      	cmp	r3, #6
10009934:	d020      	beq.n	10009978 <UART_SetConfig+0xdf4>
10009936:	687b      	ldr	r3, [r7, #4]
10009938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000993a:	2b07      	cmp	r3, #7
1000993c:	d01a      	beq.n	10009974 <UART_SetConfig+0xdf0>
1000993e:	687b      	ldr	r3, [r7, #4]
10009940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009942:	2b08      	cmp	r3, #8
10009944:	d014      	beq.n	10009970 <UART_SetConfig+0xdec>
10009946:	687b      	ldr	r3, [r7, #4]
10009948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000994a:	2b09      	cmp	r3, #9
1000994c:	d00e      	beq.n	1000996c <UART_SetConfig+0xde8>
1000994e:	687b      	ldr	r3, [r7, #4]
10009950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009952:	2b0a      	cmp	r3, #10
10009954:	d008      	beq.n	10009968 <UART_SetConfig+0xde4>
10009956:	687b      	ldr	r3, [r7, #4]
10009958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000995a:	2b0b      	cmp	r3, #11
1000995c:	d102      	bne.n	10009964 <UART_SetConfig+0xde0>
1000995e:	f44f 7380 	mov.w	r3, #256	; 0x100
10009962:	e016      	b.n	10009992 <UART_SetConfig+0xe0e>
10009964:	2301      	movs	r3, #1
10009966:	e014      	b.n	10009992 <UART_SetConfig+0xe0e>
10009968:	2380      	movs	r3, #128	; 0x80
1000996a:	e012      	b.n	10009992 <UART_SetConfig+0xe0e>
1000996c:	2340      	movs	r3, #64	; 0x40
1000996e:	e010      	b.n	10009992 <UART_SetConfig+0xe0e>
10009970:	2320      	movs	r3, #32
10009972:	e00e      	b.n	10009992 <UART_SetConfig+0xe0e>
10009974:	2310      	movs	r3, #16
10009976:	e00c      	b.n	10009992 <UART_SetConfig+0xe0e>
10009978:	230c      	movs	r3, #12
1000997a:	e00a      	b.n	10009992 <UART_SetConfig+0xe0e>
1000997c:	230a      	movs	r3, #10
1000997e:	e008      	b.n	10009992 <UART_SetConfig+0xe0e>
10009980:	2308      	movs	r3, #8
10009982:	e006      	b.n	10009992 <UART_SetConfig+0xe0e>
10009984:	2306      	movs	r3, #6
10009986:	e004      	b.n	10009992 <UART_SetConfig+0xe0e>
10009988:	2304      	movs	r3, #4
1000998a:	e002      	b.n	10009992 <UART_SetConfig+0xe0e>
1000998c:	2302      	movs	r3, #2
1000998e:	e000      	b.n	10009992 <UART_SetConfig+0xe0e>
10009990:	2301      	movs	r3, #1
10009992:	fbb2 f2f3 	udiv	r2, r2, r3
10009996:	687b      	ldr	r3, [r7, #4]
10009998:	685b      	ldr	r3, [r3, #4]
1000999a:	085b      	lsrs	r3, r3, #1
1000999c:	441a      	add	r2, r3
1000999e:	687b      	ldr	r3, [r7, #4]
100099a0:	685b      	ldr	r3, [r3, #4]
100099a2:	fbb2 f3f3 	udiv	r3, r2, r3
100099a6:	b29b      	uxth	r3, r3
100099a8:	633b      	str	r3, [r7, #48]	; 0x30
        break;
100099aa:	e168      	b.n	10009c7e <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PLL4Q:
        HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100099ac:	f107 0308 	add.w	r3, r7, #8
100099b0:	4618      	mov	r0, r3
100099b2:	f7fa ffcb 	bl	1000494c <HAL_RCC_GetPLL4ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll4_clocks.PLL4_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100099b6:	68fa      	ldr	r2, [r7, #12]
100099b8:	687b      	ldr	r3, [r7, #4]
100099ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100099bc:	2b00      	cmp	r3, #0
100099be:	d044      	beq.n	10009a4a <UART_SetConfig+0xec6>
100099c0:	687b      	ldr	r3, [r7, #4]
100099c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100099c4:	2b01      	cmp	r3, #1
100099c6:	d03e      	beq.n	10009a46 <UART_SetConfig+0xec2>
100099c8:	687b      	ldr	r3, [r7, #4]
100099ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100099cc:	2b02      	cmp	r3, #2
100099ce:	d038      	beq.n	10009a42 <UART_SetConfig+0xebe>
100099d0:	687b      	ldr	r3, [r7, #4]
100099d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100099d4:	2b03      	cmp	r3, #3
100099d6:	d032      	beq.n	10009a3e <UART_SetConfig+0xeba>
100099d8:	687b      	ldr	r3, [r7, #4]
100099da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100099dc:	2b04      	cmp	r3, #4
100099de:	d02c      	beq.n	10009a3a <UART_SetConfig+0xeb6>
100099e0:	687b      	ldr	r3, [r7, #4]
100099e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100099e4:	2b05      	cmp	r3, #5
100099e6:	d026      	beq.n	10009a36 <UART_SetConfig+0xeb2>
100099e8:	687b      	ldr	r3, [r7, #4]
100099ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100099ec:	2b06      	cmp	r3, #6
100099ee:	d020      	beq.n	10009a32 <UART_SetConfig+0xeae>
100099f0:	687b      	ldr	r3, [r7, #4]
100099f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100099f4:	2b07      	cmp	r3, #7
100099f6:	d01a      	beq.n	10009a2e <UART_SetConfig+0xeaa>
100099f8:	687b      	ldr	r3, [r7, #4]
100099fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100099fc:	2b08      	cmp	r3, #8
100099fe:	d014      	beq.n	10009a2a <UART_SetConfig+0xea6>
10009a00:	687b      	ldr	r3, [r7, #4]
10009a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009a04:	2b09      	cmp	r3, #9
10009a06:	d00e      	beq.n	10009a26 <UART_SetConfig+0xea2>
10009a08:	687b      	ldr	r3, [r7, #4]
10009a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009a0c:	2b0a      	cmp	r3, #10
10009a0e:	d008      	beq.n	10009a22 <UART_SetConfig+0xe9e>
10009a10:	687b      	ldr	r3, [r7, #4]
10009a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009a14:	2b0b      	cmp	r3, #11
10009a16:	d102      	bne.n	10009a1e <UART_SetConfig+0xe9a>
10009a18:	f44f 7380 	mov.w	r3, #256	; 0x100
10009a1c:	e016      	b.n	10009a4c <UART_SetConfig+0xec8>
10009a1e:	2301      	movs	r3, #1
10009a20:	e014      	b.n	10009a4c <UART_SetConfig+0xec8>
10009a22:	2380      	movs	r3, #128	; 0x80
10009a24:	e012      	b.n	10009a4c <UART_SetConfig+0xec8>
10009a26:	2340      	movs	r3, #64	; 0x40
10009a28:	e010      	b.n	10009a4c <UART_SetConfig+0xec8>
10009a2a:	2320      	movs	r3, #32
10009a2c:	e00e      	b.n	10009a4c <UART_SetConfig+0xec8>
10009a2e:	2310      	movs	r3, #16
10009a30:	e00c      	b.n	10009a4c <UART_SetConfig+0xec8>
10009a32:	230c      	movs	r3, #12
10009a34:	e00a      	b.n	10009a4c <UART_SetConfig+0xec8>
10009a36:	230a      	movs	r3, #10
10009a38:	e008      	b.n	10009a4c <UART_SetConfig+0xec8>
10009a3a:	2308      	movs	r3, #8
10009a3c:	e006      	b.n	10009a4c <UART_SetConfig+0xec8>
10009a3e:	2306      	movs	r3, #6
10009a40:	e004      	b.n	10009a4c <UART_SetConfig+0xec8>
10009a42:	2304      	movs	r3, #4
10009a44:	e002      	b.n	10009a4c <UART_SetConfig+0xec8>
10009a46:	2302      	movs	r3, #2
10009a48:	e000      	b.n	10009a4c <UART_SetConfig+0xec8>
10009a4a:	2301      	movs	r3, #1
10009a4c:	fbb2 f2f3 	udiv	r2, r2, r3
10009a50:	687b      	ldr	r3, [r7, #4]
10009a52:	685b      	ldr	r3, [r3, #4]
10009a54:	085b      	lsrs	r3, r3, #1
10009a56:	441a      	add	r2, r3
10009a58:	687b      	ldr	r3, [r7, #4]
10009a5a:	685b      	ldr	r3, [r3, #4]
10009a5c:	fbb2 f3f3 	udiv	r3, r2, r3
10009a60:	b29b      	uxth	r3, r3
10009a62:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009a64:	e10b      	b.n	10009c7e <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009a66:	687b      	ldr	r3, [r7, #4]
10009a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009a6a:	2b00      	cmp	r3, #0
10009a6c:	d044      	beq.n	10009af8 <UART_SetConfig+0xf74>
10009a6e:	687b      	ldr	r3, [r7, #4]
10009a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009a72:	2b01      	cmp	r3, #1
10009a74:	d03e      	beq.n	10009af4 <UART_SetConfig+0xf70>
10009a76:	687b      	ldr	r3, [r7, #4]
10009a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009a7a:	2b02      	cmp	r3, #2
10009a7c:	d038      	beq.n	10009af0 <UART_SetConfig+0xf6c>
10009a7e:	687b      	ldr	r3, [r7, #4]
10009a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009a82:	2b03      	cmp	r3, #3
10009a84:	d032      	beq.n	10009aec <UART_SetConfig+0xf68>
10009a86:	687b      	ldr	r3, [r7, #4]
10009a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009a8a:	2b04      	cmp	r3, #4
10009a8c:	d02c      	beq.n	10009ae8 <UART_SetConfig+0xf64>
10009a8e:	687b      	ldr	r3, [r7, #4]
10009a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009a92:	2b05      	cmp	r3, #5
10009a94:	d026      	beq.n	10009ae4 <UART_SetConfig+0xf60>
10009a96:	687b      	ldr	r3, [r7, #4]
10009a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009a9a:	2b06      	cmp	r3, #6
10009a9c:	d020      	beq.n	10009ae0 <UART_SetConfig+0xf5c>
10009a9e:	687b      	ldr	r3, [r7, #4]
10009aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009aa2:	2b07      	cmp	r3, #7
10009aa4:	d01a      	beq.n	10009adc <UART_SetConfig+0xf58>
10009aa6:	687b      	ldr	r3, [r7, #4]
10009aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009aaa:	2b08      	cmp	r3, #8
10009aac:	d014      	beq.n	10009ad8 <UART_SetConfig+0xf54>
10009aae:	687b      	ldr	r3, [r7, #4]
10009ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ab2:	2b09      	cmp	r3, #9
10009ab4:	d00e      	beq.n	10009ad4 <UART_SetConfig+0xf50>
10009ab6:	687b      	ldr	r3, [r7, #4]
10009ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009aba:	2b0a      	cmp	r3, #10
10009abc:	d008      	beq.n	10009ad0 <UART_SetConfig+0xf4c>
10009abe:	687b      	ldr	r3, [r7, #4]
10009ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ac2:	2b0b      	cmp	r3, #11
10009ac4:	d102      	bne.n	10009acc <UART_SetConfig+0xf48>
10009ac6:	f44f 7380 	mov.w	r3, #256	; 0x100
10009aca:	e016      	b.n	10009afa <UART_SetConfig+0xf76>
10009acc:	2301      	movs	r3, #1
10009ace:	e014      	b.n	10009afa <UART_SetConfig+0xf76>
10009ad0:	2380      	movs	r3, #128	; 0x80
10009ad2:	e012      	b.n	10009afa <UART_SetConfig+0xf76>
10009ad4:	2340      	movs	r3, #64	; 0x40
10009ad6:	e010      	b.n	10009afa <UART_SetConfig+0xf76>
10009ad8:	2320      	movs	r3, #32
10009ada:	e00e      	b.n	10009afa <UART_SetConfig+0xf76>
10009adc:	2310      	movs	r3, #16
10009ade:	e00c      	b.n	10009afa <UART_SetConfig+0xf76>
10009ae0:	230c      	movs	r3, #12
10009ae2:	e00a      	b.n	10009afa <UART_SetConfig+0xf76>
10009ae4:	230a      	movs	r3, #10
10009ae6:	e008      	b.n	10009afa <UART_SetConfig+0xf76>
10009ae8:	2308      	movs	r3, #8
10009aea:	e006      	b.n	10009afa <UART_SetConfig+0xf76>
10009aec:	2306      	movs	r3, #6
10009aee:	e004      	b.n	10009afa <UART_SetConfig+0xf76>
10009af0:	2304      	movs	r3, #4
10009af2:	e002      	b.n	10009afa <UART_SetConfig+0xf76>
10009af4:	2302      	movs	r3, #2
10009af6:	e000      	b.n	10009afa <UART_SetConfig+0xf76>
10009af8:	2301      	movs	r3, #1
10009afa:	4a72      	ldr	r2, [pc, #456]	; (10009cc4 <UART_SetConfig+0x1140>)
10009afc:	fbb2 f2f3 	udiv	r2, r2, r3
10009b00:	687b      	ldr	r3, [r7, #4]
10009b02:	685b      	ldr	r3, [r3, #4]
10009b04:	085b      	lsrs	r3, r3, #1
10009b06:	441a      	add	r2, r3
10009b08:	687b      	ldr	r3, [r7, #4]
10009b0a:	685b      	ldr	r3, [r3, #4]
10009b0c:	fbb2 f3f3 	udiv	r3, r2, r3
10009b10:	b29b      	uxth	r3, r3
10009b12:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009b14:	e0b3      	b.n	10009c7e <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009b16:	687b      	ldr	r3, [r7, #4]
10009b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b1a:	2b00      	cmp	r3, #0
10009b1c:	d044      	beq.n	10009ba8 <UART_SetConfig+0x1024>
10009b1e:	687b      	ldr	r3, [r7, #4]
10009b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b22:	2b01      	cmp	r3, #1
10009b24:	d03e      	beq.n	10009ba4 <UART_SetConfig+0x1020>
10009b26:	687b      	ldr	r3, [r7, #4]
10009b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b2a:	2b02      	cmp	r3, #2
10009b2c:	d038      	beq.n	10009ba0 <UART_SetConfig+0x101c>
10009b2e:	687b      	ldr	r3, [r7, #4]
10009b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b32:	2b03      	cmp	r3, #3
10009b34:	d032      	beq.n	10009b9c <UART_SetConfig+0x1018>
10009b36:	687b      	ldr	r3, [r7, #4]
10009b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b3a:	2b04      	cmp	r3, #4
10009b3c:	d02c      	beq.n	10009b98 <UART_SetConfig+0x1014>
10009b3e:	687b      	ldr	r3, [r7, #4]
10009b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b42:	2b05      	cmp	r3, #5
10009b44:	d026      	beq.n	10009b94 <UART_SetConfig+0x1010>
10009b46:	687b      	ldr	r3, [r7, #4]
10009b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b4a:	2b06      	cmp	r3, #6
10009b4c:	d020      	beq.n	10009b90 <UART_SetConfig+0x100c>
10009b4e:	687b      	ldr	r3, [r7, #4]
10009b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b52:	2b07      	cmp	r3, #7
10009b54:	d01a      	beq.n	10009b8c <UART_SetConfig+0x1008>
10009b56:	687b      	ldr	r3, [r7, #4]
10009b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b5a:	2b08      	cmp	r3, #8
10009b5c:	d014      	beq.n	10009b88 <UART_SetConfig+0x1004>
10009b5e:	687b      	ldr	r3, [r7, #4]
10009b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b62:	2b09      	cmp	r3, #9
10009b64:	d00e      	beq.n	10009b84 <UART_SetConfig+0x1000>
10009b66:	687b      	ldr	r3, [r7, #4]
10009b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b6a:	2b0a      	cmp	r3, #10
10009b6c:	d008      	beq.n	10009b80 <UART_SetConfig+0xffc>
10009b6e:	687b      	ldr	r3, [r7, #4]
10009b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b72:	2b0b      	cmp	r3, #11
10009b74:	d102      	bne.n	10009b7c <UART_SetConfig+0xff8>
10009b76:	f44f 7380 	mov.w	r3, #256	; 0x100
10009b7a:	e016      	b.n	10009baa <UART_SetConfig+0x1026>
10009b7c:	2301      	movs	r3, #1
10009b7e:	e014      	b.n	10009baa <UART_SetConfig+0x1026>
10009b80:	2380      	movs	r3, #128	; 0x80
10009b82:	e012      	b.n	10009baa <UART_SetConfig+0x1026>
10009b84:	2340      	movs	r3, #64	; 0x40
10009b86:	e010      	b.n	10009baa <UART_SetConfig+0x1026>
10009b88:	2320      	movs	r3, #32
10009b8a:	e00e      	b.n	10009baa <UART_SetConfig+0x1026>
10009b8c:	2310      	movs	r3, #16
10009b8e:	e00c      	b.n	10009baa <UART_SetConfig+0x1026>
10009b90:	230c      	movs	r3, #12
10009b92:	e00a      	b.n	10009baa <UART_SetConfig+0x1026>
10009b94:	230a      	movs	r3, #10
10009b96:	e008      	b.n	10009baa <UART_SetConfig+0x1026>
10009b98:	2308      	movs	r3, #8
10009b9a:	e006      	b.n	10009baa <UART_SetConfig+0x1026>
10009b9c:	2306      	movs	r3, #6
10009b9e:	e004      	b.n	10009baa <UART_SetConfig+0x1026>
10009ba0:	2304      	movs	r3, #4
10009ba2:	e002      	b.n	10009baa <UART_SetConfig+0x1026>
10009ba4:	2302      	movs	r3, #2
10009ba6:	e000      	b.n	10009baa <UART_SetConfig+0x1026>
10009ba8:	2301      	movs	r3, #1
10009baa:	4a47      	ldr	r2, [pc, #284]	; (10009cc8 <UART_SetConfig+0x1144>)
10009bac:	fbb2 f2f3 	udiv	r2, r2, r3
10009bb0:	687b      	ldr	r3, [r7, #4]
10009bb2:	685b      	ldr	r3, [r3, #4]
10009bb4:	085b      	lsrs	r3, r3, #1
10009bb6:	441a      	add	r2, r3
10009bb8:	687b      	ldr	r3, [r7, #4]
10009bba:	685b      	ldr	r3, [r3, #4]
10009bbc:	fbb2 f3f3 	udiv	r3, r2, r3
10009bc0:	b29b      	uxth	r3, r3
10009bc2:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009bc4:	e05b      	b.n	10009c7e <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_HSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009bc6:	687b      	ldr	r3, [r7, #4]
10009bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009bca:	2b00      	cmp	r3, #0
10009bcc:	d044      	beq.n	10009c58 <UART_SetConfig+0x10d4>
10009bce:	687b      	ldr	r3, [r7, #4]
10009bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009bd2:	2b01      	cmp	r3, #1
10009bd4:	d03e      	beq.n	10009c54 <UART_SetConfig+0x10d0>
10009bd6:	687b      	ldr	r3, [r7, #4]
10009bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009bda:	2b02      	cmp	r3, #2
10009bdc:	d038      	beq.n	10009c50 <UART_SetConfig+0x10cc>
10009bde:	687b      	ldr	r3, [r7, #4]
10009be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009be2:	2b03      	cmp	r3, #3
10009be4:	d032      	beq.n	10009c4c <UART_SetConfig+0x10c8>
10009be6:	687b      	ldr	r3, [r7, #4]
10009be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009bea:	2b04      	cmp	r3, #4
10009bec:	d02c      	beq.n	10009c48 <UART_SetConfig+0x10c4>
10009bee:	687b      	ldr	r3, [r7, #4]
10009bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009bf2:	2b05      	cmp	r3, #5
10009bf4:	d026      	beq.n	10009c44 <UART_SetConfig+0x10c0>
10009bf6:	687b      	ldr	r3, [r7, #4]
10009bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009bfa:	2b06      	cmp	r3, #6
10009bfc:	d020      	beq.n	10009c40 <UART_SetConfig+0x10bc>
10009bfe:	687b      	ldr	r3, [r7, #4]
10009c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c02:	2b07      	cmp	r3, #7
10009c04:	d01a      	beq.n	10009c3c <UART_SetConfig+0x10b8>
10009c06:	687b      	ldr	r3, [r7, #4]
10009c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c0a:	2b08      	cmp	r3, #8
10009c0c:	d014      	beq.n	10009c38 <UART_SetConfig+0x10b4>
10009c0e:	687b      	ldr	r3, [r7, #4]
10009c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c12:	2b09      	cmp	r3, #9
10009c14:	d00e      	beq.n	10009c34 <UART_SetConfig+0x10b0>
10009c16:	687b      	ldr	r3, [r7, #4]
10009c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c1a:	2b0a      	cmp	r3, #10
10009c1c:	d008      	beq.n	10009c30 <UART_SetConfig+0x10ac>
10009c1e:	687b      	ldr	r3, [r7, #4]
10009c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c22:	2b0b      	cmp	r3, #11
10009c24:	d102      	bne.n	10009c2c <UART_SetConfig+0x10a8>
10009c26:	f44f 7380 	mov.w	r3, #256	; 0x100
10009c2a:	e016      	b.n	10009c5a <UART_SetConfig+0x10d6>
10009c2c:	2301      	movs	r3, #1
10009c2e:	e014      	b.n	10009c5a <UART_SetConfig+0x10d6>
10009c30:	2380      	movs	r3, #128	; 0x80
10009c32:	e012      	b.n	10009c5a <UART_SetConfig+0x10d6>
10009c34:	2340      	movs	r3, #64	; 0x40
10009c36:	e010      	b.n	10009c5a <UART_SetConfig+0x10d6>
10009c38:	2320      	movs	r3, #32
10009c3a:	e00e      	b.n	10009c5a <UART_SetConfig+0x10d6>
10009c3c:	2310      	movs	r3, #16
10009c3e:	e00c      	b.n	10009c5a <UART_SetConfig+0x10d6>
10009c40:	230c      	movs	r3, #12
10009c42:	e00a      	b.n	10009c5a <UART_SetConfig+0x10d6>
10009c44:	230a      	movs	r3, #10
10009c46:	e008      	b.n	10009c5a <UART_SetConfig+0x10d6>
10009c48:	2308      	movs	r3, #8
10009c4a:	e006      	b.n	10009c5a <UART_SetConfig+0x10d6>
10009c4c:	2306      	movs	r3, #6
10009c4e:	e004      	b.n	10009c5a <UART_SetConfig+0x10d6>
10009c50:	2304      	movs	r3, #4
10009c52:	e002      	b.n	10009c5a <UART_SetConfig+0x10d6>
10009c54:	2302      	movs	r3, #2
10009c56:	e000      	b.n	10009c5a <UART_SetConfig+0x10d6>
10009c58:	2301      	movs	r3, #1
10009c5a:	4a1c      	ldr	r2, [pc, #112]	; (10009ccc <UART_SetConfig+0x1148>)
10009c5c:	fbb2 f2f3 	udiv	r2, r2, r3
10009c60:	687b      	ldr	r3, [r7, #4]
10009c62:	685b      	ldr	r3, [r3, #4]
10009c64:	085b      	lsrs	r3, r3, #1
10009c66:	441a      	add	r2, r3
10009c68:	687b      	ldr	r3, [r7, #4]
10009c6a:	685b      	ldr	r3, [r3, #4]
10009c6c:	fbb2 f3f3 	udiv	r3, r2, r3
10009c70:	b29b      	uxth	r3, r3
10009c72:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009c74:	e003      	b.n	10009c7e <UART_SetConfig+0x10fa>
      default:
        ret = HAL_ERROR;
10009c76:	2301      	movs	r3, #1
10009c78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
10009c7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10009c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009c80:	2b0f      	cmp	r3, #15
10009c82:	d908      	bls.n	10009c96 <UART_SetConfig+0x1112>
10009c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
10009c8a:	d204      	bcs.n	10009c96 <UART_SetConfig+0x1112>
    {
      huart->Instance->BRR = usartdiv;
10009c8c:	687b      	ldr	r3, [r7, #4]
10009c8e:	681b      	ldr	r3, [r3, #0]
10009c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
10009c92:	60da      	str	r2, [r3, #12]
10009c94:	e002      	b.n	10009c9c <UART_SetConfig+0x1118>
    }
    else
    {
      ret = HAL_ERROR;
10009c96:	2301      	movs	r3, #1
10009c98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
10009c9c:	687b      	ldr	r3, [r7, #4]
10009c9e:	2201      	movs	r2, #1
10009ca0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
10009ca4:	687b      	ldr	r3, [r7, #4]
10009ca6:	2201      	movs	r2, #1
10009ca8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
10009cac:	687b      	ldr	r3, [r7, #4]
10009cae:	2200      	movs	r2, #0
10009cb0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
10009cb2:	687b      	ldr	r3, [r7, #4]
10009cb4:	2200      	movs	r2, #0
10009cb6:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
10009cb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
10009cbc:	4618      	mov	r0, r3
10009cbe:	3738      	adds	r7, #56	; 0x38
10009cc0:	46bd      	mov	sp, r7
10009cc2:	bd80      	pop	{r7, pc}
10009cc4:	03d09000 	.word	0x03d09000
10009cc8:	003d0900 	.word	0x003d0900
10009ccc:	016e3600 	.word	0x016e3600

10009cd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
10009cd0:	b480      	push	{r7}
10009cd2:	b083      	sub	sp, #12
10009cd4:	af00      	add	r7, sp, #0
10009cd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
10009cd8:	687b      	ldr	r3, [r7, #4]
10009cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10009cdc:	f003 0301 	and.w	r3, r3, #1
10009ce0:	2b00      	cmp	r3, #0
10009ce2:	d00a      	beq.n	10009cfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
10009ce4:	687b      	ldr	r3, [r7, #4]
10009ce6:	681b      	ldr	r3, [r3, #0]
10009ce8:	685b      	ldr	r3, [r3, #4]
10009cea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
10009cee:	687b      	ldr	r3, [r7, #4]
10009cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10009cf2:	687b      	ldr	r3, [r7, #4]
10009cf4:	681b      	ldr	r3, [r3, #0]
10009cf6:	430a      	orrs	r2, r1
10009cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
10009cfa:	687b      	ldr	r3, [r7, #4]
10009cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10009cfe:	f003 0302 	and.w	r3, r3, #2
10009d02:	2b00      	cmp	r3, #0
10009d04:	d00a      	beq.n	10009d1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
10009d06:	687b      	ldr	r3, [r7, #4]
10009d08:	681b      	ldr	r3, [r3, #0]
10009d0a:	685b      	ldr	r3, [r3, #4]
10009d0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
10009d10:	687b      	ldr	r3, [r7, #4]
10009d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
10009d14:	687b      	ldr	r3, [r7, #4]
10009d16:	681b      	ldr	r3, [r3, #0]
10009d18:	430a      	orrs	r2, r1
10009d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
10009d1c:	687b      	ldr	r3, [r7, #4]
10009d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10009d20:	f003 0304 	and.w	r3, r3, #4
10009d24:	2b00      	cmp	r3, #0
10009d26:	d00a      	beq.n	10009d3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
10009d28:	687b      	ldr	r3, [r7, #4]
10009d2a:	681b      	ldr	r3, [r3, #0]
10009d2c:	685b      	ldr	r3, [r3, #4]
10009d2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
10009d32:	687b      	ldr	r3, [r7, #4]
10009d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10009d36:	687b      	ldr	r3, [r7, #4]
10009d38:	681b      	ldr	r3, [r3, #0]
10009d3a:	430a      	orrs	r2, r1
10009d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
10009d3e:	687b      	ldr	r3, [r7, #4]
10009d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10009d42:	f003 0308 	and.w	r3, r3, #8
10009d46:	2b00      	cmp	r3, #0
10009d48:	d00a      	beq.n	10009d60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
10009d4a:	687b      	ldr	r3, [r7, #4]
10009d4c:	681b      	ldr	r3, [r3, #0]
10009d4e:	685b      	ldr	r3, [r3, #4]
10009d50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
10009d54:	687b      	ldr	r3, [r7, #4]
10009d56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
10009d58:	687b      	ldr	r3, [r7, #4]
10009d5a:	681b      	ldr	r3, [r3, #0]
10009d5c:	430a      	orrs	r2, r1
10009d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
10009d60:	687b      	ldr	r3, [r7, #4]
10009d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10009d64:	f003 0310 	and.w	r3, r3, #16
10009d68:	2b00      	cmp	r3, #0
10009d6a:	d00a      	beq.n	10009d82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
10009d6c:	687b      	ldr	r3, [r7, #4]
10009d6e:	681b      	ldr	r3, [r3, #0]
10009d70:	689b      	ldr	r3, [r3, #8]
10009d72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
10009d76:	687b      	ldr	r3, [r7, #4]
10009d78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
10009d7a:	687b      	ldr	r3, [r7, #4]
10009d7c:	681b      	ldr	r3, [r3, #0]
10009d7e:	430a      	orrs	r2, r1
10009d80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
10009d82:	687b      	ldr	r3, [r7, #4]
10009d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10009d86:	f003 0320 	and.w	r3, r3, #32
10009d8a:	2b00      	cmp	r3, #0
10009d8c:	d00a      	beq.n	10009da4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
10009d8e:	687b      	ldr	r3, [r7, #4]
10009d90:	681b      	ldr	r3, [r3, #0]
10009d92:	689b      	ldr	r3, [r3, #8]
10009d94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
10009d98:	687b      	ldr	r3, [r7, #4]
10009d9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
10009d9c:	687b      	ldr	r3, [r7, #4]
10009d9e:	681b      	ldr	r3, [r3, #0]
10009da0:	430a      	orrs	r2, r1
10009da2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
10009da4:	687b      	ldr	r3, [r7, #4]
10009da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10009da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
10009dac:	2b00      	cmp	r3, #0
10009dae:	d01a      	beq.n	10009de6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
10009db0:	687b      	ldr	r3, [r7, #4]
10009db2:	681b      	ldr	r3, [r3, #0]
10009db4:	685b      	ldr	r3, [r3, #4]
10009db6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
10009dba:	687b      	ldr	r3, [r7, #4]
10009dbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
10009dbe:	687b      	ldr	r3, [r7, #4]
10009dc0:	681b      	ldr	r3, [r3, #0]
10009dc2:	430a      	orrs	r2, r1
10009dc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
10009dc6:	687b      	ldr	r3, [r7, #4]
10009dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10009dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
10009dce:	d10a      	bne.n	10009de6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
10009dd0:	687b      	ldr	r3, [r7, #4]
10009dd2:	681b      	ldr	r3, [r3, #0]
10009dd4:	685b      	ldr	r3, [r3, #4]
10009dd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
10009dda:	687b      	ldr	r3, [r7, #4]
10009ddc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
10009dde:	687b      	ldr	r3, [r7, #4]
10009de0:	681b      	ldr	r3, [r3, #0]
10009de2:	430a      	orrs	r2, r1
10009de4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
10009de6:	687b      	ldr	r3, [r7, #4]
10009de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10009dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
10009dee:	2b00      	cmp	r3, #0
10009df0:	d00a      	beq.n	10009e08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
10009df2:	687b      	ldr	r3, [r7, #4]
10009df4:	681b      	ldr	r3, [r3, #0]
10009df6:	685b      	ldr	r3, [r3, #4]
10009df8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
10009dfc:	687b      	ldr	r3, [r7, #4]
10009dfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
10009e00:	687b      	ldr	r3, [r7, #4]
10009e02:	681b      	ldr	r3, [r3, #0]
10009e04:	430a      	orrs	r2, r1
10009e06:	605a      	str	r2, [r3, #4]
  }
}
10009e08:	bf00      	nop
10009e0a:	370c      	adds	r7, #12
10009e0c:	46bd      	mov	sp, r7
10009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
10009e12:	4770      	bx	lr

10009e14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
10009e14:	b580      	push	{r7, lr}
10009e16:	b086      	sub	sp, #24
10009e18:	af02      	add	r7, sp, #8
10009e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
10009e1c:	687b      	ldr	r3, [r7, #4]
10009e1e:	2200      	movs	r2, #0
10009e20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
10009e24:	f7f6 ffd4 	bl	10000dd0 <HAL_GetTick>
10009e28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
10009e2a:	687b      	ldr	r3, [r7, #4]
10009e2c:	681b      	ldr	r3, [r3, #0]
10009e2e:	681b      	ldr	r3, [r3, #0]
10009e30:	f003 0308 	and.w	r3, r3, #8
10009e34:	2b08      	cmp	r3, #8
10009e36:	d10e      	bne.n	10009e56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10009e38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
10009e3c:	9300      	str	r3, [sp, #0]
10009e3e:	68fb      	ldr	r3, [r7, #12]
10009e40:	2200      	movs	r2, #0
10009e42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
10009e46:	6878      	ldr	r0, [r7, #4]
10009e48:	f000 f82c 	bl	10009ea4 <UART_WaitOnFlagUntilTimeout>
10009e4c:	4603      	mov	r3, r0
10009e4e:	2b00      	cmp	r3, #0
10009e50:	d001      	beq.n	10009e56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
10009e52:	2303      	movs	r3, #3
10009e54:	e022      	b.n	10009e9c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
10009e56:	687b      	ldr	r3, [r7, #4]
10009e58:	681b      	ldr	r3, [r3, #0]
10009e5a:	681b      	ldr	r3, [r3, #0]
10009e5c:	f003 0304 	and.w	r3, r3, #4
10009e60:	2b04      	cmp	r3, #4
10009e62:	d10e      	bne.n	10009e82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10009e64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
10009e68:	9300      	str	r3, [sp, #0]
10009e6a:	68fb      	ldr	r3, [r7, #12]
10009e6c:	2200      	movs	r2, #0
10009e6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
10009e72:	6878      	ldr	r0, [r7, #4]
10009e74:	f000 f816 	bl	10009ea4 <UART_WaitOnFlagUntilTimeout>
10009e78:	4603      	mov	r3, r0
10009e7a:	2b00      	cmp	r3, #0
10009e7c:	d001      	beq.n	10009e82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
10009e7e:	2303      	movs	r3, #3
10009e80:	e00c      	b.n	10009e9c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
10009e82:	687b      	ldr	r3, [r7, #4]
10009e84:	2220      	movs	r2, #32
10009e86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
10009e8a:	687b      	ldr	r3, [r7, #4]
10009e8c:	2220      	movs	r2, #32
10009e8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  __HAL_UNLOCK(huart);
10009e92:	687b      	ldr	r3, [r7, #4]
10009e94:	2200      	movs	r2, #0
10009e96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
10009e9a:	2300      	movs	r3, #0
}
10009e9c:	4618      	mov	r0, r3
10009e9e:	3710      	adds	r7, #16
10009ea0:	46bd      	mov	sp, r7
10009ea2:	bd80      	pop	{r7, pc}

10009ea4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
10009ea4:	b580      	push	{r7, lr}
10009ea6:	b084      	sub	sp, #16
10009ea8:	af00      	add	r7, sp, #0
10009eaa:	60f8      	str	r0, [r7, #12]
10009eac:	60b9      	str	r1, [r7, #8]
10009eae:	603b      	str	r3, [r7, #0]
10009eb0:	4613      	mov	r3, r2
10009eb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
10009eb4:	e062      	b.n	10009f7c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
10009eb6:	69bb      	ldr	r3, [r7, #24]
10009eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
10009ebc:	d05e      	beq.n	10009f7c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10009ebe:	f7f6 ff87 	bl	10000dd0 <HAL_GetTick>
10009ec2:	4602      	mov	r2, r0
10009ec4:	683b      	ldr	r3, [r7, #0]
10009ec6:	1ad3      	subs	r3, r2, r3
10009ec8:	69ba      	ldr	r2, [r7, #24]
10009eca:	429a      	cmp	r2, r3
10009ecc:	d302      	bcc.n	10009ed4 <UART_WaitOnFlagUntilTimeout+0x30>
10009ece:	69bb      	ldr	r3, [r7, #24]
10009ed0:	2b00      	cmp	r3, #0
10009ed2:	d11d      	bne.n	10009f10 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
10009ed4:	68fb      	ldr	r3, [r7, #12]
10009ed6:	681b      	ldr	r3, [r3, #0]
10009ed8:	681a      	ldr	r2, [r3, #0]
10009eda:	68fb      	ldr	r3, [r7, #12]
10009edc:	681b      	ldr	r3, [r3, #0]
10009ede:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
10009ee2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
10009ee4:	68fb      	ldr	r3, [r7, #12]
10009ee6:	681b      	ldr	r3, [r3, #0]
10009ee8:	689a      	ldr	r2, [r3, #8]
10009eea:	68fb      	ldr	r3, [r7, #12]
10009eec:	681b      	ldr	r3, [r3, #0]
10009eee:	f022 0201 	bic.w	r2, r2, #1
10009ef2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
10009ef4:	68fb      	ldr	r3, [r7, #12]
10009ef6:	2220      	movs	r2, #32
10009ef8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
10009efc:	68fb      	ldr	r3, [r7, #12]
10009efe:	2220      	movs	r2, #32
10009f00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
10009f04:	68fb      	ldr	r3, [r7, #12]
10009f06:	2200      	movs	r2, #0
10009f08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
10009f0c:	2303      	movs	r3, #3
10009f0e:	e045      	b.n	10009f9c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
10009f10:	68fb      	ldr	r3, [r7, #12]
10009f12:	681b      	ldr	r3, [r3, #0]
10009f14:	681b      	ldr	r3, [r3, #0]
10009f16:	f003 0304 	and.w	r3, r3, #4
10009f1a:	2b00      	cmp	r3, #0
10009f1c:	d02e      	beq.n	10009f7c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
10009f1e:	68fb      	ldr	r3, [r7, #12]
10009f20:	681b      	ldr	r3, [r3, #0]
10009f22:	69db      	ldr	r3, [r3, #28]
10009f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
10009f28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
10009f2c:	d126      	bne.n	10009f7c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
10009f2e:	68fb      	ldr	r3, [r7, #12]
10009f30:	681b      	ldr	r3, [r3, #0]
10009f32:	f44f 6200 	mov.w	r2, #2048	; 0x800
10009f36:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
10009f38:	68fb      	ldr	r3, [r7, #12]
10009f3a:	681b      	ldr	r3, [r3, #0]
10009f3c:	681a      	ldr	r2, [r3, #0]
10009f3e:	68fb      	ldr	r3, [r7, #12]
10009f40:	681b      	ldr	r3, [r3, #0]
10009f42:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
10009f46:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
10009f48:	68fb      	ldr	r3, [r7, #12]
10009f4a:	681b      	ldr	r3, [r3, #0]
10009f4c:	689a      	ldr	r2, [r3, #8]
10009f4e:	68fb      	ldr	r3, [r7, #12]
10009f50:	681b      	ldr	r3, [r3, #0]
10009f52:	f022 0201 	bic.w	r2, r2, #1
10009f56:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
10009f58:	68fb      	ldr	r3, [r7, #12]
10009f5a:	2220      	movs	r2, #32
10009f5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
10009f60:	68fb      	ldr	r3, [r7, #12]
10009f62:	2220      	movs	r2, #32
10009f64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
10009f68:	68fb      	ldr	r3, [r7, #12]
10009f6a:	2220      	movs	r2, #32
10009f6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
10009f70:	68fb      	ldr	r3, [r7, #12]
10009f72:	2200      	movs	r2, #0
10009f74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
          
          return HAL_TIMEOUT;
10009f78:	2303      	movs	r3, #3
10009f7a:	e00f      	b.n	10009f9c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
10009f7c:	68fb      	ldr	r3, [r7, #12]
10009f7e:	681b      	ldr	r3, [r3, #0]
10009f80:	69da      	ldr	r2, [r3, #28]
10009f82:	68bb      	ldr	r3, [r7, #8]
10009f84:	4013      	ands	r3, r2
10009f86:	68ba      	ldr	r2, [r7, #8]
10009f88:	429a      	cmp	r2, r3
10009f8a:	bf0c      	ite	eq
10009f8c:	2301      	moveq	r3, #1
10009f8e:	2300      	movne	r3, #0
10009f90:	b2db      	uxtb	r3, r3
10009f92:	461a      	mov	r2, r3
10009f94:	79fb      	ldrb	r3, [r7, #7]
10009f96:	429a      	cmp	r2, r3
10009f98:	d08d      	beq.n	10009eb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
10009f9a:	2300      	movs	r3, #0
}
10009f9c:	4618      	mov	r0, r3
10009f9e:	3710      	adds	r7, #16
10009fa0:	46bd      	mov	sp, r7
10009fa2:	bd80      	pop	{r7, pc}

10009fa4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
10009fa4:	b480      	push	{r7}
10009fa6:	b085      	sub	sp, #20
10009fa8:	af00      	add	r7, sp, #0
10009faa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
10009fac:	687b      	ldr	r3, [r7, #4]
10009fae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
10009fb2:	2b01      	cmp	r3, #1
10009fb4:	d101      	bne.n	10009fba <HAL_UARTEx_DisableFifoMode+0x16>
10009fb6:	2302      	movs	r3, #2
10009fb8:	e027      	b.n	1000a00a <HAL_UARTEx_DisableFifoMode+0x66>
10009fba:	687b      	ldr	r3, [r7, #4]
10009fbc:	2201      	movs	r2, #1
10009fbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
10009fc2:	687b      	ldr	r3, [r7, #4]
10009fc4:	2224      	movs	r2, #36	; 0x24
10009fc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
10009fca:	687b      	ldr	r3, [r7, #4]
10009fcc:	681b      	ldr	r3, [r3, #0]
10009fce:	681b      	ldr	r3, [r3, #0]
10009fd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10009fd2:	687b      	ldr	r3, [r7, #4]
10009fd4:	681b      	ldr	r3, [r3, #0]
10009fd6:	681a      	ldr	r2, [r3, #0]
10009fd8:	687b      	ldr	r3, [r7, #4]
10009fda:	681b      	ldr	r3, [r3, #0]
10009fdc:	f022 0201 	bic.w	r2, r2, #1
10009fe0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
10009fe2:	68fb      	ldr	r3, [r7, #12]
10009fe4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
10009fe8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
10009fea:	687b      	ldr	r3, [r7, #4]
10009fec:	2200      	movs	r2, #0
10009fee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10009ff0:	687b      	ldr	r3, [r7, #4]
10009ff2:	681b      	ldr	r3, [r3, #0]
10009ff4:	68fa      	ldr	r2, [r7, #12]
10009ff6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
10009ff8:	687b      	ldr	r3, [r7, #4]
10009ffa:	2220      	movs	r2, #32
10009ffc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1000a000:	687b      	ldr	r3, [r7, #4]
1000a002:	2200      	movs	r2, #0
1000a004:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
1000a008:	2300      	movs	r3, #0
}
1000a00a:	4618      	mov	r0, r3
1000a00c:	3714      	adds	r7, #20
1000a00e:	46bd      	mov	sp, r7
1000a010:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a014:	4770      	bx	lr

1000a016 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1000a016:	b580      	push	{r7, lr}
1000a018:	b084      	sub	sp, #16
1000a01a:	af00      	add	r7, sp, #0
1000a01c:	6078      	str	r0, [r7, #4]
1000a01e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1000a020:	687b      	ldr	r3, [r7, #4]
1000a022:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
1000a026:	2b01      	cmp	r3, #1
1000a028:	d101      	bne.n	1000a02e <HAL_UARTEx_SetTxFifoThreshold+0x18>
1000a02a:	2302      	movs	r3, #2
1000a02c:	e02d      	b.n	1000a08a <HAL_UARTEx_SetTxFifoThreshold+0x74>
1000a02e:	687b      	ldr	r3, [r7, #4]
1000a030:	2201      	movs	r2, #1
1000a032:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
1000a036:	687b      	ldr	r3, [r7, #4]
1000a038:	2224      	movs	r2, #36	; 0x24
1000a03a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1000a03e:	687b      	ldr	r3, [r7, #4]
1000a040:	681b      	ldr	r3, [r3, #0]
1000a042:	681b      	ldr	r3, [r3, #0]
1000a044:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1000a046:	687b      	ldr	r3, [r7, #4]
1000a048:	681b      	ldr	r3, [r3, #0]
1000a04a:	681a      	ldr	r2, [r3, #0]
1000a04c:	687b      	ldr	r3, [r7, #4]
1000a04e:	681b      	ldr	r3, [r3, #0]
1000a050:	f022 0201 	bic.w	r2, r2, #1
1000a054:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
1000a056:	687b      	ldr	r3, [r7, #4]
1000a058:	681b      	ldr	r3, [r3, #0]
1000a05a:	689b      	ldr	r3, [r3, #8]
1000a05c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
1000a060:	687b      	ldr	r3, [r7, #4]
1000a062:	681b      	ldr	r3, [r3, #0]
1000a064:	683a      	ldr	r2, [r7, #0]
1000a066:	430a      	orrs	r2, r1
1000a068:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1000a06a:	6878      	ldr	r0, [r7, #4]
1000a06c:	f000 f850 	bl	1000a110 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1000a070:	687b      	ldr	r3, [r7, #4]
1000a072:	681b      	ldr	r3, [r3, #0]
1000a074:	68fa      	ldr	r2, [r7, #12]
1000a076:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1000a078:	687b      	ldr	r3, [r7, #4]
1000a07a:	2220      	movs	r2, #32
1000a07c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1000a080:	687b      	ldr	r3, [r7, #4]
1000a082:	2200      	movs	r2, #0
1000a084:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
1000a088:	2300      	movs	r3, #0
}
1000a08a:	4618      	mov	r0, r3
1000a08c:	3710      	adds	r7, #16
1000a08e:	46bd      	mov	sp, r7
1000a090:	bd80      	pop	{r7, pc}

1000a092 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1000a092:	b580      	push	{r7, lr}
1000a094:	b084      	sub	sp, #16
1000a096:	af00      	add	r7, sp, #0
1000a098:	6078      	str	r0, [r7, #4]
1000a09a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1000a09c:	687b      	ldr	r3, [r7, #4]
1000a09e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
1000a0a2:	2b01      	cmp	r3, #1
1000a0a4:	d101      	bne.n	1000a0aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
1000a0a6:	2302      	movs	r3, #2
1000a0a8:	e02d      	b.n	1000a106 <HAL_UARTEx_SetRxFifoThreshold+0x74>
1000a0aa:	687b      	ldr	r3, [r7, #4]
1000a0ac:	2201      	movs	r2, #1
1000a0ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
1000a0b2:	687b      	ldr	r3, [r7, #4]
1000a0b4:	2224      	movs	r2, #36	; 0x24
1000a0b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1000a0ba:	687b      	ldr	r3, [r7, #4]
1000a0bc:	681b      	ldr	r3, [r3, #0]
1000a0be:	681b      	ldr	r3, [r3, #0]
1000a0c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1000a0c2:	687b      	ldr	r3, [r7, #4]
1000a0c4:	681b      	ldr	r3, [r3, #0]
1000a0c6:	681a      	ldr	r2, [r3, #0]
1000a0c8:	687b      	ldr	r3, [r7, #4]
1000a0ca:	681b      	ldr	r3, [r3, #0]
1000a0cc:	f022 0201 	bic.w	r2, r2, #1
1000a0d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
1000a0d2:	687b      	ldr	r3, [r7, #4]
1000a0d4:	681b      	ldr	r3, [r3, #0]
1000a0d6:	689b      	ldr	r3, [r3, #8]
1000a0d8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
1000a0dc:	687b      	ldr	r3, [r7, #4]
1000a0de:	681b      	ldr	r3, [r3, #0]
1000a0e0:	683a      	ldr	r2, [r7, #0]
1000a0e2:	430a      	orrs	r2, r1
1000a0e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1000a0e6:	6878      	ldr	r0, [r7, #4]
1000a0e8:	f000 f812 	bl	1000a110 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1000a0ec:	687b      	ldr	r3, [r7, #4]
1000a0ee:	681b      	ldr	r3, [r3, #0]
1000a0f0:	68fa      	ldr	r2, [r7, #12]
1000a0f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1000a0f4:	687b      	ldr	r3, [r7, #4]
1000a0f6:	2220      	movs	r2, #32
1000a0f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1000a0fc:	687b      	ldr	r3, [r7, #4]
1000a0fe:	2200      	movs	r2, #0
1000a100:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
1000a104:	2300      	movs	r3, #0
}
1000a106:	4618      	mov	r0, r3
1000a108:	3710      	adds	r7, #16
1000a10a:	46bd      	mov	sp, r7
1000a10c:	bd80      	pop	{r7, pc}
	...

1000a110 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
1000a110:	b480      	push	{r7}
1000a112:	b089      	sub	sp, #36	; 0x24
1000a114:	af00      	add	r7, sp, #0
1000a116:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
1000a118:	4a2d      	ldr	r2, [pc, #180]	; (1000a1d0 <UARTEx_SetNbDataToProcess+0xc0>)
1000a11a:	f107 0314 	add.w	r3, r7, #20
1000a11e:	e892 0003 	ldmia.w	r2, {r0, r1}
1000a122:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
1000a126:	4a2b      	ldr	r2, [pc, #172]	; (1000a1d4 <UARTEx_SetNbDataToProcess+0xc4>)
1000a128:	f107 030c 	add.w	r3, r7, #12
1000a12c:	e892 0003 	ldmia.w	r2, {r0, r1}
1000a130:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
1000a134:	687b      	ldr	r3, [r7, #4]
1000a136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
1000a138:	2b00      	cmp	r3, #0
1000a13a:	d108      	bne.n	1000a14e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
1000a13c:	687b      	ldr	r3, [r7, #4]
1000a13e:	2201      	movs	r2, #1
1000a140:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
1000a144:	687b      	ldr	r3, [r7, #4]
1000a146:	2201      	movs	r2, #1
1000a148:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
1000a14c:	e039      	b.n	1000a1c2 <UARTEx_SetNbDataToProcess+0xb2>
    rx_fifo_depth = RX_FIFO_DEPTH;
1000a14e:	2308      	movs	r3, #8
1000a150:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
1000a152:	2308      	movs	r3, #8
1000a154:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
1000a156:	687b      	ldr	r3, [r7, #4]
1000a158:	681b      	ldr	r3, [r3, #0]
1000a15a:	689b      	ldr	r3, [r3, #8]
1000a15c:	0e5b      	lsrs	r3, r3, #25
1000a15e:	b2db      	uxtb	r3, r3
1000a160:	f003 0307 	and.w	r3, r3, #7
1000a164:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
1000a166:	687b      	ldr	r3, [r7, #4]
1000a168:	681b      	ldr	r3, [r3, #0]
1000a16a:	689b      	ldr	r3, [r3, #8]
1000a16c:	0f5b      	lsrs	r3, r3, #29
1000a16e:	b2db      	uxtb	r3, r3
1000a170:	f003 0307 	and.w	r3, r3, #7
1000a174:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
1000a176:	7fbb      	ldrb	r3, [r7, #30]
1000a178:	7f3a      	ldrb	r2, [r7, #28]
1000a17a:	3220      	adds	r2, #32
1000a17c:	443a      	add	r2, r7
1000a17e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
1000a182:	fb02 f303 	mul.w	r3, r2, r3
1000a186:	7f3a      	ldrb	r2, [r7, #28]
1000a188:	3220      	adds	r2, #32
1000a18a:	443a      	add	r2, r7
1000a18c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
1000a190:	fb93 f3f2 	sdiv	r3, r3, r2
1000a194:	b29a      	uxth	r2, r3
1000a196:	687b      	ldr	r3, [r7, #4]
1000a198:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
1000a19c:	7ffb      	ldrb	r3, [r7, #31]
1000a19e:	7f7a      	ldrb	r2, [r7, #29]
1000a1a0:	3220      	adds	r2, #32
1000a1a2:	443a      	add	r2, r7
1000a1a4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
1000a1a8:	fb02 f303 	mul.w	r3, r2, r3
1000a1ac:	7f7a      	ldrb	r2, [r7, #29]
1000a1ae:	3220      	adds	r2, #32
1000a1b0:	443a      	add	r2, r7
1000a1b2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
1000a1b6:	fb93 f3f2 	sdiv	r3, r3, r2
1000a1ba:	b29a      	uxth	r2, r3
1000a1bc:	687b      	ldr	r3, [r7, #4]
1000a1be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
1000a1c2:	bf00      	nop
1000a1c4:	3724      	adds	r7, #36	; 0x24
1000a1c6:	46bd      	mov	sp, r7
1000a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a1cc:	4770      	bx	lr
1000a1ce:	bf00      	nop
1000a1d0:	1000d82c 	.word	0x1000d82c
1000a1d4:	1000d834 	.word	0x1000d834

1000a1d8 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
1000a1d8:	b480      	push	{r7}
1000a1da:	b083      	sub	sp, #12
1000a1dc:	af00      	add	r7, sp, #0
1000a1de:	6078      	str	r0, [r7, #4]
	list->prev = list;
1000a1e0:	687b      	ldr	r3, [r7, #4]
1000a1e2:	687a      	ldr	r2, [r7, #4]
1000a1e4:	605a      	str	r2, [r3, #4]
	list->next = list;
1000a1e6:	687b      	ldr	r3, [r7, #4]
1000a1e8:	687a      	ldr	r2, [r7, #4]
1000a1ea:	601a      	str	r2, [r3, #0]
}
1000a1ec:	bf00      	nop
1000a1ee:	370c      	adds	r7, #12
1000a1f0:	46bd      	mov	sp, r7
1000a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a1f6:	4770      	bx	lr

1000a1f8 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
1000a1f8:	b480      	push	{r7}
1000a1fa:	b083      	sub	sp, #12
1000a1fc:	af00      	add	r7, sp, #0
1000a1fe:	6078      	str	r0, [r7, #4]
1000a200:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
1000a202:	687b      	ldr	r3, [r7, #4]
1000a204:	685a      	ldr	r2, [r3, #4]
1000a206:	683b      	ldr	r3, [r7, #0]
1000a208:	605a      	str	r2, [r3, #4]
	new_node->next = node;
1000a20a:	683b      	ldr	r3, [r7, #0]
1000a20c:	687a      	ldr	r2, [r7, #4]
1000a20e:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
1000a210:	683b      	ldr	r3, [r7, #0]
1000a212:	681b      	ldr	r3, [r3, #0]
1000a214:	683a      	ldr	r2, [r7, #0]
1000a216:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
1000a218:	683b      	ldr	r3, [r7, #0]
1000a21a:	685b      	ldr	r3, [r3, #4]
1000a21c:	683a      	ldr	r2, [r7, #0]
1000a21e:	601a      	str	r2, [r3, #0]
}
1000a220:	bf00      	nop
1000a222:	370c      	adds	r7, #12
1000a224:	46bd      	mov	sp, r7
1000a226:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a22a:	4770      	bx	lr

1000a22c <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
1000a22c:	b580      	push	{r7, lr}
1000a22e:	b082      	sub	sp, #8
1000a230:	af00      	add	r7, sp, #0
1000a232:	6078      	str	r0, [r7, #4]
1000a234:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
1000a236:	6839      	ldr	r1, [r7, #0]
1000a238:	6878      	ldr	r0, [r7, #4]
1000a23a:	f7ff ffdd 	bl	1000a1f8 <metal_list_add_before>
}
1000a23e:	bf00      	nop
1000a240:	3708      	adds	r7, #8
1000a242:	46bd      	mov	sp, r7
1000a244:	bd80      	pop	{r7, pc}

1000a246 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
1000a246:	b580      	push	{r7, lr}
1000a248:	b082      	sub	sp, #8
1000a24a:	af00      	add	r7, sp, #0
1000a24c:	6078      	str	r0, [r7, #4]
1000a24e:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
1000a250:	6839      	ldr	r1, [r7, #0]
1000a252:	6878      	ldr	r0, [r7, #4]
1000a254:	f001 fc26 	bl	1000baa4 <metal_machine_cache_flush>
}
1000a258:	bf00      	nop
1000a25a:	3708      	adds	r7, #8
1000a25c:	46bd      	mov	sp, r7
1000a25e:	bd80      	pop	{r7, pc}

1000a260 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
1000a260:	b580      	push	{r7, lr}
1000a262:	b082      	sub	sp, #8
1000a264:	af00      	add	r7, sp, #0
1000a266:	6078      	str	r0, [r7, #4]
1000a268:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
1000a26a:	6839      	ldr	r1, [r7, #0]
1000a26c:	6878      	ldr	r0, [r7, #4]
1000a26e:	f001 fc24 	bl	1000baba <metal_machine_cache_invalidate>
}
1000a272:	bf00      	nop
1000a274:	3708      	adds	r7, #8
1000a276:	46bd      	mov	sp, r7
1000a278:	bd80      	pop	{r7, pc}

1000a27a <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
1000a27a:	b580      	push	{r7, lr}
1000a27c:	b082      	sub	sp, #8
1000a27e:	af00      	add	r7, sp, #0
1000a280:	6078      	str	r0, [r7, #4]
1000a282:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
1000a284:	6839      	ldr	r1, [r7, #0]
1000a286:	6878      	ldr	r0, [r7, #4]
1000a288:	f7ff ffdd 	bl	1000a246 <__metal_cache_flush>
}
1000a28c:	bf00      	nop
1000a28e:	3708      	adds	r7, #8
1000a290:	46bd      	mov	sp, r7
1000a292:	bd80      	pop	{r7, pc}

1000a294 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
1000a294:	b580      	push	{r7, lr}
1000a296:	b082      	sub	sp, #8
1000a298:	af00      	add	r7, sp, #0
1000a29a:	6078      	str	r0, [r7, #4]
1000a29c:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
1000a29e:	6839      	ldr	r1, [r7, #0]
1000a2a0:	6878      	ldr	r0, [r7, #4]
1000a2a2:	f7ff ffdd 	bl	1000a260 <__metal_cache_invalidate>
}
1000a2a6:	bf00      	nop
1000a2a8:	3708      	adds	r7, #8
1000a2aa:	46bd      	mov	sp, r7
1000a2ac:	bd80      	pop	{r7, pc}
	...

1000a2b0 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
1000a2b0:	b580      	push	{r7, lr}
1000a2b2:	b082      	sub	sp, #8
1000a2b4:	af00      	add	r7, sp, #0
1000a2b6:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
1000a2b8:	687b      	ldr	r3, [r7, #4]
1000a2ba:	2b00      	cmp	r3, #0
1000a2bc:	d008      	beq.n	1000a2d0 <metal_bus_register+0x20>
1000a2be:	687b      	ldr	r3, [r7, #4]
1000a2c0:	681b      	ldr	r3, [r3, #0]
1000a2c2:	2b00      	cmp	r3, #0
1000a2c4:	d004      	beq.n	1000a2d0 <metal_bus_register+0x20>
1000a2c6:	687b      	ldr	r3, [r7, #4]
1000a2c8:	681b      	ldr	r3, [r3, #0]
1000a2ca:	781b      	ldrb	r3, [r3, #0]
1000a2cc:	2b00      	cmp	r3, #0
1000a2ce:	d102      	bne.n	1000a2d6 <metal_bus_register+0x26>
		return -EINVAL;
1000a2d0:	f06f 0315 	mvn.w	r3, #21
1000a2d4:	e026      	b.n	1000a324 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
1000a2d6:	687b      	ldr	r3, [r7, #4]
1000a2d8:	681b      	ldr	r3, [r3, #0]
1000a2da:	2100      	movs	r1, #0
1000a2dc:	4618      	mov	r0, r3
1000a2de:	f000 f82b 	bl	1000a338 <metal_bus_find>
1000a2e2:	4603      	mov	r3, r0
1000a2e4:	2b00      	cmp	r3, #0
1000a2e6:	d102      	bne.n	1000a2ee <metal_bus_register+0x3e>
		return -EEXIST;
1000a2e8:	f06f 0310 	mvn.w	r3, #16
1000a2ec:	e01a      	b.n	1000a324 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
1000a2ee:	687b      	ldr	r3, [r7, #4]
1000a2f0:	331c      	adds	r3, #28
1000a2f2:	4618      	mov	r0, r3
1000a2f4:	f7ff ff70 	bl	1000a1d8 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
1000a2f8:	687b      	ldr	r3, [r7, #4]
1000a2fa:	3324      	adds	r3, #36	; 0x24
1000a2fc:	4619      	mov	r1, r3
1000a2fe:	480b      	ldr	r0, [pc, #44]	; (1000a32c <metal_bus_register+0x7c>)
1000a300:	f7ff ff94 	bl	1000a22c <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
1000a304:	4b0a      	ldr	r3, [pc, #40]	; (1000a330 <metal_bus_register+0x80>)
1000a306:	781b      	ldrb	r3, [r3, #0]
1000a308:	2b06      	cmp	r3, #6
1000a30a:	d90a      	bls.n	1000a322 <metal_bus_register+0x72>
1000a30c:	4b08      	ldr	r3, [pc, #32]	; (1000a330 <metal_bus_register+0x80>)
1000a30e:	685b      	ldr	r3, [r3, #4]
1000a310:	2b00      	cmp	r3, #0
1000a312:	d006      	beq.n	1000a322 <metal_bus_register+0x72>
1000a314:	4b06      	ldr	r3, [pc, #24]	; (1000a330 <metal_bus_register+0x80>)
1000a316:	685b      	ldr	r3, [r3, #4]
1000a318:	687a      	ldr	r2, [r7, #4]
1000a31a:	6812      	ldr	r2, [r2, #0]
1000a31c:	4905      	ldr	r1, [pc, #20]	; (1000a334 <metal_bus_register+0x84>)
1000a31e:	2007      	movs	r0, #7
1000a320:	4798      	blx	r3
	return 0;
1000a322:	2300      	movs	r3, #0
}
1000a324:	4618      	mov	r0, r3
1000a326:	3708      	adds	r7, #8
1000a328:	46bd      	mov	sp, r7
1000a32a:	bd80      	pop	{r7, pc}
1000a32c:	10020384 	.word	0x10020384
1000a330:	1002037c 	.word	0x1002037c
1000a334:	1000d83c 	.word	0x1000d83c

1000a338 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
1000a338:	b580      	push	{r7, lr}
1000a33a:	b084      	sub	sp, #16
1000a33c:	af00      	add	r7, sp, #0
1000a33e:	6078      	str	r0, [r7, #4]
1000a340:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
1000a342:	4b12      	ldr	r3, [pc, #72]	; (1000a38c <metal_bus_find+0x54>)
1000a344:	689b      	ldr	r3, [r3, #8]
1000a346:	60fb      	str	r3, [r7, #12]
1000a348:	e016      	b.n	1000a378 <metal_bus_find+0x40>
		bus = metal_container_of(node, struct metal_bus, node);
1000a34a:	68fb      	ldr	r3, [r7, #12]
1000a34c:	3b24      	subs	r3, #36	; 0x24
1000a34e:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) == 0 && result) {
1000a350:	68bb      	ldr	r3, [r7, #8]
1000a352:	681b      	ldr	r3, [r3, #0]
1000a354:	6879      	ldr	r1, [r7, #4]
1000a356:	4618      	mov	r0, r3
1000a358:	f7f5 fe72 	bl	10000040 <strcmp>
1000a35c:	4603      	mov	r3, r0
1000a35e:	2b00      	cmp	r3, #0
1000a360:	d107      	bne.n	1000a372 <metal_bus_find+0x3a>
1000a362:	683b      	ldr	r3, [r7, #0]
1000a364:	2b00      	cmp	r3, #0
1000a366:	d004      	beq.n	1000a372 <metal_bus_find+0x3a>
			*result = bus;
1000a368:	683b      	ldr	r3, [r7, #0]
1000a36a:	68ba      	ldr	r2, [r7, #8]
1000a36c:	601a      	str	r2, [r3, #0]
			return 0;
1000a36e:	2300      	movs	r3, #0
1000a370:	e008      	b.n	1000a384 <metal_bus_find+0x4c>
	metal_list_for_each(&_metal.common.bus_list, node) {
1000a372:	68fb      	ldr	r3, [r7, #12]
1000a374:	681b      	ldr	r3, [r3, #0]
1000a376:	60fb      	str	r3, [r7, #12]
1000a378:	68fb      	ldr	r3, [r7, #12]
1000a37a:	4a05      	ldr	r2, [pc, #20]	; (1000a390 <metal_bus_find+0x58>)
1000a37c:	4293      	cmp	r3, r2
1000a37e:	d1e4      	bne.n	1000a34a <metal_bus_find+0x12>
		}
	}
	return -ENOENT;
1000a380:	f06f 0301 	mvn.w	r3, #1
}
1000a384:	4618      	mov	r0, r3
1000a386:	3710      	adds	r7, #16
1000a388:	46bd      	mov	sp, r7
1000a38a:	bd80      	pop	{r7, pc}
1000a38c:	1002037c 	.word	0x1002037c
1000a390:	10020384 	.word	0x10020384

1000a394 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
1000a394:	b580      	push	{r7, lr}
1000a396:	b086      	sub	sp, #24
1000a398:	af00      	add	r7, sp, #0
1000a39a:	60f8      	str	r0, [r7, #12]
1000a39c:	60b9      	str	r1, [r7, #8]
1000a39e:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
1000a3a0:	68fb      	ldr	r3, [r7, #12]
1000a3a2:	2b00      	cmp	r3, #0
1000a3a4:	d00d      	beq.n	1000a3c2 <metal_device_open+0x2e>
1000a3a6:	68fb      	ldr	r3, [r7, #12]
1000a3a8:	781b      	ldrb	r3, [r3, #0]
1000a3aa:	2b00      	cmp	r3, #0
1000a3ac:	d009      	beq.n	1000a3c2 <metal_device_open+0x2e>
1000a3ae:	68bb      	ldr	r3, [r7, #8]
1000a3b0:	2b00      	cmp	r3, #0
1000a3b2:	d006      	beq.n	1000a3c2 <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
1000a3b4:	68bb      	ldr	r3, [r7, #8]
1000a3b6:	781b      	ldrb	r3, [r3, #0]
1000a3b8:	2b00      	cmp	r3, #0
1000a3ba:	d002      	beq.n	1000a3c2 <metal_device_open+0x2e>
1000a3bc:	687b      	ldr	r3, [r7, #4]
1000a3be:	2b00      	cmp	r3, #0
1000a3c0:	d102      	bne.n	1000a3c8 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
1000a3c2:	f06f 0315 	mvn.w	r3, #21
1000a3c6:	e01f      	b.n	1000a408 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
1000a3c8:	f107 0310 	add.w	r3, r7, #16
1000a3cc:	4619      	mov	r1, r3
1000a3ce:	68f8      	ldr	r0, [r7, #12]
1000a3d0:	f7ff ffb2 	bl	1000a338 <metal_bus_find>
1000a3d4:	6178      	str	r0, [r7, #20]
	if (error)
1000a3d6:	697b      	ldr	r3, [r7, #20]
1000a3d8:	2b00      	cmp	r3, #0
1000a3da:	d001      	beq.n	1000a3e0 <metal_device_open+0x4c>
		return error;
1000a3dc:	697b      	ldr	r3, [r7, #20]
1000a3de:	e013      	b.n	1000a408 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
1000a3e0:	693b      	ldr	r3, [r7, #16]
1000a3e2:	689b      	ldr	r3, [r3, #8]
1000a3e4:	2b00      	cmp	r3, #0
1000a3e6:	d102      	bne.n	1000a3ee <metal_device_open+0x5a>
		return -ENODEV;
1000a3e8:	f06f 0312 	mvn.w	r3, #18
1000a3ec:	e00c      	b.n	1000a408 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
1000a3ee:	693b      	ldr	r3, [r7, #16]
1000a3f0:	689b      	ldr	r3, [r3, #8]
1000a3f2:	6938      	ldr	r0, [r7, #16]
1000a3f4:	687a      	ldr	r2, [r7, #4]
1000a3f6:	68b9      	ldr	r1, [r7, #8]
1000a3f8:	4798      	blx	r3
1000a3fa:	6178      	str	r0, [r7, #20]
	if (error)
1000a3fc:	697b      	ldr	r3, [r7, #20]
1000a3fe:	2b00      	cmp	r3, #0
1000a400:	d001      	beq.n	1000a406 <metal_device_open+0x72>
		return error;
1000a402:	697b      	ldr	r3, [r7, #20]
1000a404:	e000      	b.n	1000a408 <metal_device_open+0x74>

	return 0;
1000a406:	2300      	movs	r3, #0
}
1000a408:	4618      	mov	r0, r3
1000a40a:	3718      	adds	r7, #24
1000a40c:	46bd      	mov	sp, r7
1000a40e:	bd80      	pop	{r7, pc}

1000a410 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
1000a410:	b580      	push	{r7, lr}
1000a412:	b082      	sub	sp, #8
1000a414:	af00      	add	r7, sp, #0
1000a416:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
1000a418:	687b      	ldr	r3, [r7, #4]
1000a41a:	681b      	ldr	r3, [r3, #0]
1000a41c:	2b00      	cmp	r3, #0
1000a41e:	d008      	beq.n	1000a432 <metal_register_generic_device+0x22>
1000a420:	687b      	ldr	r3, [r7, #4]
1000a422:	681b      	ldr	r3, [r3, #0]
1000a424:	781b      	ldrb	r3, [r3, #0]
1000a426:	2b00      	cmp	r3, #0
1000a428:	d003      	beq.n	1000a432 <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
1000a42a:	687b      	ldr	r3, [r7, #4]
1000a42c:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
1000a42e:	2b02      	cmp	r3, #2
1000a430:	d902      	bls.n	1000a438 <metal_register_generic_device+0x28>
		return -EINVAL;
1000a432:	f06f 0315 	mvn.w	r3, #21
1000a436:	e009      	b.n	1000a44c <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
1000a438:	687b      	ldr	r3, [r7, #4]
1000a43a:	4a06      	ldr	r2, [pc, #24]	; (1000a454 <metal_register_generic_device+0x44>)
1000a43c:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
1000a43e:	687b      	ldr	r3, [r7, #4]
1000a440:	337c      	adds	r3, #124	; 0x7c
1000a442:	4619      	mov	r1, r3
1000a444:	4804      	ldr	r0, [pc, #16]	; (1000a458 <metal_register_generic_device+0x48>)
1000a446:	f7ff fef1 	bl	1000a22c <metal_list_add_tail>
			    &device->node);
	return 0;
1000a44a:	2300      	movs	r3, #0
}
1000a44c:	4618      	mov	r0, r3
1000a44e:	3708      	adds	r7, #8
1000a450:	46bd      	mov	sp, r7
1000a452:	bd80      	pop	{r7, pc}
1000a454:	1002000c 	.word	0x1002000c
1000a458:	10020394 	.word	0x10020394

1000a45c <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
1000a45c:	b580      	push	{r7, lr}
1000a45e:	b086      	sub	sp, #24
1000a460:	af00      	add	r7, sp, #0
1000a462:	60f8      	str	r0, [r7, #12]
1000a464:	60b9      	str	r1, [r7, #8]
1000a466:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
1000a468:	4b12      	ldr	r3, [pc, #72]	; (1000a4b4 <metal_generic_dev_open+0x58>)
1000a46a:	699b      	ldr	r3, [r3, #24]
1000a46c:	617b      	str	r3, [r7, #20]
1000a46e:	e016      	b.n	1000a49e <metal_generic_dev_open+0x42>
		dev = metal_container_of(node, struct metal_device, node);
1000a470:	697b      	ldr	r3, [r7, #20]
1000a472:	3b7c      	subs	r3, #124	; 0x7c
1000a474:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) == 0) {
1000a476:	693b      	ldr	r3, [r7, #16]
1000a478:	681b      	ldr	r3, [r3, #0]
1000a47a:	68b9      	ldr	r1, [r7, #8]
1000a47c:	4618      	mov	r0, r3
1000a47e:	f7f5 fddf 	bl	10000040 <strcmp>
1000a482:	4603      	mov	r3, r0
1000a484:	2b00      	cmp	r3, #0
1000a486:	d107      	bne.n	1000a498 <metal_generic_dev_open+0x3c>
			*device = dev;
1000a488:	687b      	ldr	r3, [r7, #4]
1000a48a:	693a      	ldr	r2, [r7, #16]
1000a48c:	601a      	str	r2, [r3, #0]
			return metal_generic_dev_sys_open(dev);
1000a48e:	6938      	ldr	r0, [r7, #16]
1000a490:	f000 f890 	bl	1000a5b4 <metal_generic_dev_sys_open>
1000a494:	4603      	mov	r3, r0
1000a496:	e008      	b.n	1000a4aa <metal_generic_dev_open+0x4e>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
1000a498:	697b      	ldr	r3, [r7, #20]
1000a49a:	681b      	ldr	r3, [r3, #0]
1000a49c:	617b      	str	r3, [r7, #20]
1000a49e:	697b      	ldr	r3, [r7, #20]
1000a4a0:	4a05      	ldr	r2, [pc, #20]	; (1000a4b8 <metal_generic_dev_open+0x5c>)
1000a4a2:	4293      	cmp	r3, r2
1000a4a4:	d1e4      	bne.n	1000a470 <metal_generic_dev_open+0x14>
		}
	}

	return -ENODEV;
1000a4a6:	f06f 0312 	mvn.w	r3, #18
}
1000a4aa:	4618      	mov	r0, r3
1000a4ac:	3718      	adds	r7, #24
1000a4ae:	46bd      	mov	sp, r7
1000a4b0:	bd80      	pop	{r7, pc}
1000a4b2:	bf00      	nop
1000a4b4:	1002037c 	.word	0x1002037c
1000a4b8:	10020394 	.word	0x10020394

1000a4bc <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
1000a4bc:	b580      	push	{r7, lr}
1000a4be:	b086      	sub	sp, #24
1000a4c0:	af00      	add	r7, sp, #0
1000a4c2:	60f8      	str	r0, [r7, #12]
1000a4c4:	60b9      	str	r1, [r7, #8]
1000a4c6:	607a      	str	r2, [r7, #4]
1000a4c8:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;

	if (sg_out != sg_in)
1000a4ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000a4cc:	683b      	ldr	r3, [r7, #0]
1000a4ce:	429a      	cmp	r2, r3
1000a4d0:	d009      	beq.n	1000a4e6 <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
1000a4d2:	6a3a      	ldr	r2, [r7, #32]
1000a4d4:	4613      	mov	r3, r2
1000a4d6:	005b      	lsls	r3, r3, #1
1000a4d8:	4413      	add	r3, r2
1000a4da:	009b      	lsls	r3, r3, #2
1000a4dc:	461a      	mov	r2, r3
1000a4de:	6839      	ldr	r1, [r7, #0]
1000a4e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000a4e2:	f002 fa80 	bl	1000c9e6 <memcpy>
	for (i = 0; i < nents_in; i++) {
1000a4e6:	2300      	movs	r3, #0
1000a4e8:	617b      	str	r3, [r7, #20]
1000a4ea:	e02f      	b.n	1000a54c <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
1000a4ec:	687b      	ldr	r3, [r7, #4]
1000a4ee:	2b02      	cmp	r3, #2
1000a4f0:	d114      	bne.n	1000a51c <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
1000a4f2:	697a      	ldr	r2, [r7, #20]
1000a4f4:	4613      	mov	r3, r2
1000a4f6:	005b      	lsls	r3, r3, #1
1000a4f8:	4413      	add	r3, r2
1000a4fa:	009b      	lsls	r3, r3, #2
1000a4fc:	461a      	mov	r2, r3
1000a4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000a500:	4413      	add	r3, r2
1000a502:	6818      	ldr	r0, [r3, #0]
1000a504:	697a      	ldr	r2, [r7, #20]
1000a506:	4613      	mov	r3, r2
1000a508:	005b      	lsls	r3, r3, #1
1000a50a:	4413      	add	r3, r2
1000a50c:	009b      	lsls	r3, r3, #2
1000a50e:	461a      	mov	r2, r3
1000a510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000a512:	4413      	add	r3, r2
1000a514:	689b      	ldr	r3, [r3, #8]
1000a516:	4619      	mov	r1, r3
1000a518:	f7ff feaf 	bl	1000a27a <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
1000a51c:	697a      	ldr	r2, [r7, #20]
1000a51e:	4613      	mov	r3, r2
1000a520:	005b      	lsls	r3, r3, #1
1000a522:	4413      	add	r3, r2
1000a524:	009b      	lsls	r3, r3, #2
1000a526:	461a      	mov	r2, r3
1000a528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000a52a:	4413      	add	r3, r2
1000a52c:	6818      	ldr	r0, [r3, #0]
1000a52e:	697a      	ldr	r2, [r7, #20]
1000a530:	4613      	mov	r3, r2
1000a532:	005b      	lsls	r3, r3, #1
1000a534:	4413      	add	r3, r2
1000a536:	009b      	lsls	r3, r3, #2
1000a538:	461a      	mov	r2, r3
1000a53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000a53c:	4413      	add	r3, r2
1000a53e:	689b      	ldr	r3, [r3, #8]
1000a540:	4619      	mov	r1, r3
1000a542:	f7ff fea7 	bl	1000a294 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
1000a546:	697b      	ldr	r3, [r7, #20]
1000a548:	3301      	adds	r3, #1
1000a54a:	617b      	str	r3, [r7, #20]
1000a54c:	697a      	ldr	r2, [r7, #20]
1000a54e:	6a3b      	ldr	r3, [r7, #32]
1000a550:	429a      	cmp	r2, r3
1000a552:	dbcb      	blt.n	1000a4ec <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
1000a554:	6a3b      	ldr	r3, [r7, #32]
}
1000a556:	4618      	mov	r0, r3
1000a558:	3718      	adds	r7, #24
1000a55a:	46bd      	mov	sp, r7
1000a55c:	bd80      	pop	{r7, pc}

1000a55e <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
1000a55e:	b580      	push	{r7, lr}
1000a560:	b086      	sub	sp, #24
1000a562:	af00      	add	r7, sp, #0
1000a564:	60f8      	str	r0, [r7, #12]
1000a566:	60b9      	str	r1, [r7, #8]
1000a568:	607a      	str	r2, [r7, #4]
1000a56a:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;
	(void)dir;

	for (i = 0; i < nents; i++) {
1000a56c:	2300      	movs	r3, #0
1000a56e:	617b      	str	r3, [r7, #20]
1000a570:	e017      	b.n	1000a5a2 <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
1000a572:	697a      	ldr	r2, [r7, #20]
1000a574:	4613      	mov	r3, r2
1000a576:	005b      	lsls	r3, r3, #1
1000a578:	4413      	add	r3, r2
1000a57a:	009b      	lsls	r3, r3, #2
1000a57c:	461a      	mov	r2, r3
1000a57e:	683b      	ldr	r3, [r7, #0]
1000a580:	4413      	add	r3, r2
1000a582:	6818      	ldr	r0, [r3, #0]
1000a584:	697a      	ldr	r2, [r7, #20]
1000a586:	4613      	mov	r3, r2
1000a588:	005b      	lsls	r3, r3, #1
1000a58a:	4413      	add	r3, r2
1000a58c:	009b      	lsls	r3, r3, #2
1000a58e:	461a      	mov	r2, r3
1000a590:	683b      	ldr	r3, [r7, #0]
1000a592:	4413      	add	r3, r2
1000a594:	689b      	ldr	r3, [r3, #8]
1000a596:	4619      	mov	r1, r3
1000a598:	f7ff fe7c 	bl	1000a294 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
1000a59c:	697b      	ldr	r3, [r7, #20]
1000a59e:	3301      	adds	r3, #1
1000a5a0:	617b      	str	r3, [r7, #20]
1000a5a2:	697a      	ldr	r2, [r7, #20]
1000a5a4:	6a3b      	ldr	r3, [r7, #32]
1000a5a6:	429a      	cmp	r2, r3
1000a5a8:	dbe3      	blt.n	1000a572 <metal_generic_dev_dma_unmap+0x14>
	}
}
1000a5aa:	bf00      	nop
1000a5ac:	bf00      	nop
1000a5ae:	3718      	adds	r7, #24
1000a5b0:	46bd      	mov	sp, r7
1000a5b2:	bd80      	pop	{r7, pc}

1000a5b4 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
1000a5b4:	b580      	push	{r7, lr}
1000a5b6:	b084      	sub	sp, #16
1000a5b8:	af00      	add	r7, sp, #0
1000a5ba:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned int i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
1000a5bc:	2300      	movs	r3, #0
1000a5be:	60fb      	str	r3, [r7, #12]
1000a5c0:	e013      	b.n	1000a5ea <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
1000a5c2:	68fa      	ldr	r2, [r7, #12]
1000a5c4:	4613      	mov	r3, r2
1000a5c6:	00db      	lsls	r3, r3, #3
1000a5c8:	1a9b      	subs	r3, r3, r2
1000a5ca:	00db      	lsls	r3, r3, #3
1000a5cc:	3308      	adds	r3, #8
1000a5ce:	687a      	ldr	r2, [r7, #4]
1000a5d0:	4413      	add	r3, r2
1000a5d2:	3304      	adds	r3, #4
1000a5d4:	60bb      	str	r3, [r7, #8]
		if (!io->size)
1000a5d6:	68bb      	ldr	r3, [r7, #8]
1000a5d8:	689b      	ldr	r3, [r3, #8]
1000a5da:	2b00      	cmp	r3, #0
1000a5dc:	d00b      	beq.n	1000a5f6 <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
1000a5de:	68b8      	ldr	r0, [r7, #8]
1000a5e0:	f000 f81e 	bl	1000a620 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
1000a5e4:	68fb      	ldr	r3, [r7, #12]
1000a5e6:	3301      	adds	r3, #1
1000a5e8:	60fb      	str	r3, [r7, #12]
1000a5ea:	687b      	ldr	r3, [r7, #4]
1000a5ec:	689b      	ldr	r3, [r3, #8]
1000a5ee:	68fa      	ldr	r2, [r7, #12]
1000a5f0:	429a      	cmp	r2, r3
1000a5f2:	d3e6      	bcc.n	1000a5c2 <metal_generic_dev_sys_open+0xe>
1000a5f4:	e000      	b.n	1000a5f8 <metal_generic_dev_sys_open+0x44>
			break;
1000a5f6:	bf00      	nop
	}

	return 0;
1000a5f8:	2300      	movs	r3, #0
}
1000a5fa:	4618      	mov	r0, r3
1000a5fc:	3710      	adds	r7, #16
1000a5fe:	46bd      	mov	sp, r7
1000a600:	bd80      	pop	{r7, pc}
	...

1000a604 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
1000a604:	b580      	push	{r7, lr}
1000a606:	b082      	sub	sp, #8
1000a608:	af00      	add	r7, sp, #0
1000a60a:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
1000a60c:	4803      	ldr	r0, [pc, #12]	; (1000a61c <metal_sys_init+0x18>)
1000a60e:	f7ff fe4f 	bl	1000a2b0 <metal_bus_register>
	return 0;
1000a612:	2300      	movs	r3, #0
}
1000a614:	4618      	mov	r0, r3
1000a616:	3708      	adds	r7, #8
1000a618:	46bd      	mov	sp, r7
1000a61a:	bd80      	pop	{r7, pc}
1000a61c:	1002000c 	.word	0x1002000c

1000a620 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
1000a620:	b580      	push	{r7, lr}
1000a622:	b086      	sub	sp, #24
1000a624:	af00      	add	r7, sp, #0
1000a626:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = io->virt;
1000a628:	687b      	ldr	r3, [r7, #4]
1000a62a:	681b      	ldr	r3, [r3, #0]
1000a62c:	60fb      	str	r3, [r7, #12]
	psize = (size_t)io->size;
1000a62e:	687b      	ldr	r3, [r7, #4]
1000a630:	689b      	ldr	r3, [r3, #8]
1000a632:	613b      	str	r3, [r7, #16]
	if (psize) {
1000a634:	693b      	ldr	r3, [r7, #16]
1000a636:	2b00      	cmp	r3, #0
1000a638:	d02c      	beq.n	1000a694 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
1000a63a:	687b      	ldr	r3, [r7, #4]
1000a63c:	68db      	ldr	r3, [r3, #12]
1000a63e:	693a      	ldr	r2, [r7, #16]
1000a640:	fa22 f303 	lsr.w	r3, r2, r3
1000a644:	2b00      	cmp	r3, #0
1000a646:	d005      	beq.n	1000a654 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
1000a648:	687b      	ldr	r3, [r7, #4]
1000a64a:	68db      	ldr	r3, [r3, #12]
1000a64c:	2201      	movs	r2, #1
1000a64e:	fa02 f303 	lsl.w	r3, r2, r3
1000a652:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
1000a654:	2300      	movs	r3, #0
1000a656:	617b      	str	r3, [r7, #20]
1000a658:	e013      	b.n	1000a682 <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
1000a65a:	687b      	ldr	r3, [r7, #4]
1000a65c:	685a      	ldr	r2, [r3, #4]
1000a65e:	697b      	ldr	r3, [r7, #20]
1000a660:	009b      	lsls	r3, r3, #2
1000a662:	4413      	add	r3, r2
1000a664:	6819      	ldr	r1, [r3, #0]
1000a666:	687b      	ldr	r3, [r7, #4]
1000a668:	695b      	ldr	r3, [r3, #20]
1000a66a:	693a      	ldr	r2, [r7, #16]
1000a66c:	68f8      	ldr	r0, [r7, #12]
1000a66e:	f001 fa2f 	bl	1000bad0 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
1000a672:	693b      	ldr	r3, [r7, #16]
1000a674:	009b      	lsls	r3, r3, #2
1000a676:	68fa      	ldr	r2, [r7, #12]
1000a678:	4413      	add	r3, r2
1000a67a:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
1000a67c:	697b      	ldr	r3, [r7, #20]
1000a67e:	3301      	adds	r3, #1
1000a680:	617b      	str	r3, [r7, #20]
1000a682:	687b      	ldr	r3, [r7, #4]
1000a684:	689a      	ldr	r2, [r3, #8]
1000a686:	687b      	ldr	r3, [r7, #4]
1000a688:	68db      	ldr	r3, [r3, #12]
1000a68a:	fa22 f303 	lsr.w	r3, r2, r3
1000a68e:	697a      	ldr	r2, [r7, #20]
1000a690:	429a      	cmp	r2, r3
1000a692:	d9e2      	bls.n	1000a65a <metal_sys_io_mem_map+0x3a>
		}
	}
}
1000a694:	bf00      	nop
1000a696:	3718      	adds	r7, #24
1000a698:	46bd      	mov	sp, r7
1000a69a:	bd80      	pop	{r7, pc}

1000a69c <metal_list_init>:
{
1000a69c:	b480      	push	{r7}
1000a69e:	b083      	sub	sp, #12
1000a6a0:	af00      	add	r7, sp, #0
1000a6a2:	6078      	str	r0, [r7, #4]
	list->prev = list;
1000a6a4:	687b      	ldr	r3, [r7, #4]
1000a6a6:	687a      	ldr	r2, [r7, #4]
1000a6a8:	605a      	str	r2, [r3, #4]
	list->next = list;
1000a6aa:	687b      	ldr	r3, [r7, #4]
1000a6ac:	687a      	ldr	r2, [r7, #4]
1000a6ae:	601a      	str	r2, [r3, #0]
}
1000a6b0:	bf00      	nop
1000a6b2:	370c      	adds	r7, #12
1000a6b4:	46bd      	mov	sp, r7
1000a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a6ba:	4770      	bx	lr

1000a6bc <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
1000a6bc:	b580      	push	{r7, lr}
1000a6be:	b084      	sub	sp, #16
1000a6c0:	af00      	add	r7, sp, #0
1000a6c2:	6078      	str	r0, [r7, #4]
	int error = 0;
1000a6c4:	2300      	movs	r3, #0
1000a6c6:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
1000a6c8:	2220      	movs	r2, #32
1000a6ca:	2100      	movs	r1, #0
1000a6cc:	4810      	ldr	r0, [pc, #64]	; (1000a710 <metal_init+0x54>)
1000a6ce:	f002 f8da 	bl	1000c886 <memset>

	_metal.common.log_handler   = params->log_handler;
1000a6d2:	687b      	ldr	r3, [r7, #4]
1000a6d4:	681b      	ldr	r3, [r3, #0]
1000a6d6:	4a0e      	ldr	r2, [pc, #56]	; (1000a710 <metal_init+0x54>)
1000a6d8:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
1000a6da:	687b      	ldr	r3, [r7, #4]
1000a6dc:	791a      	ldrb	r2, [r3, #4]
1000a6de:	4b0c      	ldr	r3, [pc, #48]	; (1000a710 <metal_init+0x54>)
1000a6e0:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
1000a6e2:	480c      	ldr	r0, [pc, #48]	; (1000a714 <metal_init+0x58>)
1000a6e4:	f7ff ffda 	bl	1000a69c <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
1000a6e8:	480b      	ldr	r0, [pc, #44]	; (1000a718 <metal_init+0x5c>)
1000a6ea:	f7ff ffd7 	bl	1000a69c <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
1000a6ee:	480b      	ldr	r0, [pc, #44]	; (1000a71c <metal_init+0x60>)
1000a6f0:	f7ff ffd4 	bl	1000a69c <metal_list_init>

	error = metal_sys_init(params);
1000a6f4:	6878      	ldr	r0, [r7, #4]
1000a6f6:	f7ff ff85 	bl	1000a604 <metal_sys_init>
1000a6fa:	60f8      	str	r0, [r7, #12]
	if (error)
1000a6fc:	68fb      	ldr	r3, [r7, #12]
1000a6fe:	2b00      	cmp	r3, #0
1000a700:	d001      	beq.n	1000a706 <metal_init+0x4a>
		return error;
1000a702:	68fb      	ldr	r3, [r7, #12]
1000a704:	e000      	b.n	1000a708 <metal_init+0x4c>

	return error;
1000a706:	68fb      	ldr	r3, [r7, #12]
}
1000a708:	4618      	mov	r0, r3
1000a70a:	3710      	adds	r7, #16
1000a70c:	46bd      	mov	sp, r7
1000a70e:	bd80      	pop	{r7, pc}
1000a710:	1002037c 	.word	0x1002037c
1000a714:	10020384 	.word	0x10020384
1000a718:	1002038c 	.word	0x1002038c
1000a71c:	10020394 	.word	0x10020394

1000a720 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
1000a720:	b480      	push	{r7}
1000a722:	b083      	sub	sp, #12
1000a724:	af00      	add	r7, sp, #0
1000a726:	6078      	str	r0, [r7, #4]
1000a728:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
1000a72a:	687b      	ldr	r3, [r7, #4]
1000a72c:	681b      	ldr	r3, [r3, #0]
		? (void *)((uintptr_t)io->virt + offset)
		: NULL);
1000a72e:	f1b3 3fff 	cmp.w	r3, #4294967295
1000a732:	d00a      	beq.n	1000a74a <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
1000a734:	687b      	ldr	r3, [r7, #4]
1000a736:	689b      	ldr	r3, [r3, #8]
1000a738:	683a      	ldr	r2, [r7, #0]
1000a73a:	429a      	cmp	r2, r3
1000a73c:	d205      	bcs.n	1000a74a <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
1000a73e:	687b      	ldr	r3, [r7, #4]
1000a740:	681b      	ldr	r3, [r3, #0]
1000a742:	461a      	mov	r2, r3
1000a744:	683b      	ldr	r3, [r7, #0]
1000a746:	4413      	add	r3, r2
		: NULL);
1000a748:	e000      	b.n	1000a74c <metal_io_virt+0x2c>
1000a74a:	2300      	movs	r3, #0
}
1000a74c:	4618      	mov	r0, r3
1000a74e:	370c      	adds	r7, #12
1000a750:	46bd      	mov	sp, r7
1000a752:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a756:	4770      	bx	lr

1000a758 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
1000a758:	b5b0      	push	{r4, r5, r7, lr}
1000a75a:	b08c      	sub	sp, #48	; 0x30
1000a75c:	af00      	add	r7, sp, #0
1000a75e:	60f8      	str	r0, [r7, #12]
1000a760:	60b9      	str	r1, [r7, #8]
1000a762:	607a      	str	r2, [r7, #4]
1000a764:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {
1000a766:	f107 0310 	add.w	r3, r7, #16
1000a76a:	2220      	movs	r2, #32
1000a76c:	2100      	movs	r1, #0
1000a76e:	4618      	mov	r0, r3
1000a770:	f002 f889 	bl	1000c886 <memset>
		NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
	};

	io->virt = virt;
1000a774:	68fb      	ldr	r3, [r7, #12]
1000a776:	68ba      	ldr	r2, [r7, #8]
1000a778:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
1000a77a:	68fb      	ldr	r3, [r7, #12]
1000a77c:	687a      	ldr	r2, [r7, #4]
1000a77e:	605a      	str	r2, [r3, #4]
	io->size = size;
1000a780:	68fb      	ldr	r3, [r7, #12]
1000a782:	683a      	ldr	r2, [r7, #0]
1000a784:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
1000a786:	68fb      	ldr	r3, [r7, #12]
1000a788:	6c3a      	ldr	r2, [r7, #64]	; 0x40
1000a78a:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
1000a78c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000a78e:	2b1f      	cmp	r3, #31
1000a790:	d904      	bls.n	1000a79c <metal_io_init+0x44>
		/* avoid overflow */
		io->page_mask = -1UL;
1000a792:	68fb      	ldr	r3, [r7, #12]
1000a794:	f04f 32ff 	mov.w	r2, #4294967295
1000a798:	611a      	str	r2, [r3, #16]
1000a79a:	e006      	b.n	1000a7aa <metal_io_init+0x52>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
1000a79c:	2201      	movs	r2, #1
1000a79e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000a7a0:	fa02 f303 	lsl.w	r3, r2, r3
1000a7a4:	1e5a      	subs	r2, r3, #1
1000a7a6:	68fb      	ldr	r3, [r7, #12]
1000a7a8:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
1000a7aa:	68fb      	ldr	r3, [r7, #12]
1000a7ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
1000a7ae:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
1000a7b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
1000a7b2:	2b00      	cmp	r3, #0
1000a7b4:	d00b      	beq.n	1000a7ce <metal_io_init+0x76>
1000a7b6:	68fb      	ldr	r3, [r7, #12]
1000a7b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
1000a7ba:	f103 0418 	add.w	r4, r3, #24
1000a7be:	4615      	mov	r5, r2
1000a7c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1000a7c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1000a7c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1000a7c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1000a7cc:	e00a      	b.n	1000a7e4 <metal_io_init+0x8c>
1000a7ce:	68fb      	ldr	r3, [r7, #12]
1000a7d0:	f103 0418 	add.w	r4, r3, #24
1000a7d4:	f107 0510 	add.w	r5, r7, #16
1000a7d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1000a7da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1000a7dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1000a7e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
1000a7e4:	68f8      	ldr	r0, [r7, #12]
1000a7e6:	f7ff ff1b 	bl	1000a620 <metal_sys_io_mem_map>
}
1000a7ea:	bf00      	nop
1000a7ec:	3730      	adds	r7, #48	; 0x30
1000a7ee:	46bd      	mov	sp, r7
1000a7f0:	bdb0      	pop	{r4, r5, r7, pc}

1000a7f2 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
1000a7f2:	b590      	push	{r4, r7, lr}
1000a7f4:	b08b      	sub	sp, #44	; 0x2c
1000a7f6:	af02      	add	r7, sp, #8
1000a7f8:	60f8      	str	r0, [r7, #12]
1000a7fa:	60b9      	str	r1, [r7, #8]
1000a7fc:	607a      	str	r2, [r7, #4]
1000a7fe:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
1000a800:	68b9      	ldr	r1, [r7, #8]
1000a802:	68f8      	ldr	r0, [r7, #12]
1000a804:	f7ff ff8c 	bl	1000a720 <metal_io_virt>
1000a808:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
1000a80a:	687b      	ldr	r3, [r7, #4]
1000a80c:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
1000a80e:	69fb      	ldr	r3, [r7, #28]
1000a810:	2b00      	cmp	r3, #0
1000a812:	d102      	bne.n	1000a81a <metal_io_block_read+0x28>
		return -ERANGE;
1000a814:	f06f 0321 	mvn.w	r3, #33	; 0x21
1000a818:	e05c      	b.n	1000a8d4 <metal_io_block_read+0xe2>
	if ((offset + len) > io->size)
1000a81a:	683a      	ldr	r2, [r7, #0]
1000a81c:	68bb      	ldr	r3, [r7, #8]
1000a81e:	441a      	add	r2, r3
1000a820:	68fb      	ldr	r3, [r7, #12]
1000a822:	689b      	ldr	r3, [r3, #8]
1000a824:	429a      	cmp	r2, r3
1000a826:	d904      	bls.n	1000a832 <metal_io_block_read+0x40>
		len = io->size - offset;
1000a828:	68fb      	ldr	r3, [r7, #12]
1000a82a:	689a      	ldr	r2, [r3, #8]
1000a82c:	68bb      	ldr	r3, [r7, #8]
1000a82e:	1ad3      	subs	r3, r2, r3
1000a830:	603b      	str	r3, [r7, #0]
	retlen = len;
1000a832:	683b      	ldr	r3, [r7, #0]
1000a834:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
1000a836:	68fb      	ldr	r3, [r7, #12]
1000a838:	6a1b      	ldr	r3, [r3, #32]
1000a83a:	2b00      	cmp	r3, #0
1000a83c:	d00a      	beq.n	1000a854 <metal_io_block_read+0x62>
		retlen = (*io->ops.block_read)(
1000a83e:	68fb      	ldr	r3, [r7, #12]
1000a840:	6a1c      	ldr	r4, [r3, #32]
1000a842:	683b      	ldr	r3, [r7, #0]
1000a844:	9300      	str	r3, [sp, #0]
1000a846:	2305      	movs	r3, #5
1000a848:	687a      	ldr	r2, [r7, #4]
1000a84a:	68b9      	ldr	r1, [r7, #8]
1000a84c:	68f8      	ldr	r0, [r7, #12]
1000a84e:	47a0      	blx	r4
1000a850:	6178      	str	r0, [r7, #20]
1000a852:	e03e      	b.n	1000a8d2 <metal_io_block_read+0xe0>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
1000a854:	f3bf 8f5b 	dmb	ish
		while ( len && (
1000a858:	e00c      	b.n	1000a874 <metal_io_block_read+0x82>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
1000a85a:	69fb      	ldr	r3, [r7, #28]
1000a85c:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
1000a85e:	69bb      	ldr	r3, [r7, #24]
1000a860:	701a      	strb	r2, [r3, #0]
			dest++;
1000a862:	69bb      	ldr	r3, [r7, #24]
1000a864:	3301      	adds	r3, #1
1000a866:	61bb      	str	r3, [r7, #24]
			ptr++;
1000a868:	69fb      	ldr	r3, [r7, #28]
1000a86a:	3301      	adds	r3, #1
1000a86c:	61fb      	str	r3, [r7, #28]
			len--;
1000a86e:	683b      	ldr	r3, [r7, #0]
1000a870:	3b01      	subs	r3, #1
1000a872:	603b      	str	r3, [r7, #0]
		while ( len && (
1000a874:	683b      	ldr	r3, [r7, #0]
1000a876:	2b00      	cmp	r3, #0
1000a878:	d017      	beq.n	1000a8aa <metal_io_block_read+0xb8>
			((uintptr_t)dest % sizeof(int)) ||
1000a87a:	69bb      	ldr	r3, [r7, #24]
1000a87c:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
1000a880:	2b00      	cmp	r3, #0
1000a882:	d1ea      	bne.n	1000a85a <metal_io_block_read+0x68>
			((uintptr_t)ptr % sizeof(int)))) {
1000a884:	69fb      	ldr	r3, [r7, #28]
1000a886:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
1000a88a:	2b00      	cmp	r3, #0
1000a88c:	d1e5      	bne.n	1000a85a <metal_io_block_read+0x68>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000a88e:	e00c      	b.n	1000a8aa <metal_io_block_read+0xb8>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
1000a890:	69fb      	ldr	r3, [r7, #28]
1000a892:	681a      	ldr	r2, [r3, #0]
1000a894:	69bb      	ldr	r3, [r7, #24]
1000a896:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000a898:	69bb      	ldr	r3, [r7, #24]
1000a89a:	3304      	adds	r3, #4
1000a89c:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
1000a89e:	69fb      	ldr	r3, [r7, #28]
1000a8a0:	3304      	adds	r3, #4
1000a8a2:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
1000a8a4:	683b      	ldr	r3, [r7, #0]
1000a8a6:	3b04      	subs	r3, #4
1000a8a8:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000a8aa:	683b      	ldr	r3, [r7, #0]
1000a8ac:	2b03      	cmp	r3, #3
1000a8ae:	dcef      	bgt.n	1000a890 <metal_io_block_read+0x9e>
		for (; len != 0; dest++, ptr++, len--)
1000a8b0:	e00c      	b.n	1000a8cc <metal_io_block_read+0xda>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
1000a8b2:	69fb      	ldr	r3, [r7, #28]
1000a8b4:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
1000a8b6:	69bb      	ldr	r3, [r7, #24]
1000a8b8:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
1000a8ba:	69bb      	ldr	r3, [r7, #24]
1000a8bc:	3301      	adds	r3, #1
1000a8be:	61bb      	str	r3, [r7, #24]
1000a8c0:	69fb      	ldr	r3, [r7, #28]
1000a8c2:	3301      	adds	r3, #1
1000a8c4:	61fb      	str	r3, [r7, #28]
1000a8c6:	683b      	ldr	r3, [r7, #0]
1000a8c8:	3b01      	subs	r3, #1
1000a8ca:	603b      	str	r3, [r7, #0]
1000a8cc:	683b      	ldr	r3, [r7, #0]
1000a8ce:	2b00      	cmp	r3, #0
1000a8d0:	d1ef      	bne.n	1000a8b2 <metal_io_block_read+0xc0>
	}
	return retlen;
1000a8d2:	697b      	ldr	r3, [r7, #20]
}
1000a8d4:	4618      	mov	r0, r3
1000a8d6:	3724      	adds	r7, #36	; 0x24
1000a8d8:	46bd      	mov	sp, r7
1000a8da:	bd90      	pop	{r4, r7, pc}

1000a8dc <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
1000a8dc:	b590      	push	{r4, r7, lr}
1000a8de:	b08b      	sub	sp, #44	; 0x2c
1000a8e0:	af02      	add	r7, sp, #8
1000a8e2:	60f8      	str	r0, [r7, #12]
1000a8e4:	60b9      	str	r1, [r7, #8]
1000a8e6:	607a      	str	r2, [r7, #4]
1000a8e8:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
1000a8ea:	68b9      	ldr	r1, [r7, #8]
1000a8ec:	68f8      	ldr	r0, [r7, #12]
1000a8ee:	f7ff ff17 	bl	1000a720 <metal_io_virt>
1000a8f2:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
1000a8f4:	687b      	ldr	r3, [r7, #4]
1000a8f6:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
1000a8f8:	69fb      	ldr	r3, [r7, #28]
1000a8fa:	2b00      	cmp	r3, #0
1000a8fc:	d102      	bne.n	1000a904 <metal_io_block_write+0x28>
		return -ERANGE;
1000a8fe:	f06f 0321 	mvn.w	r3, #33	; 0x21
1000a902:	e05b      	b.n	1000a9bc <metal_io_block_write+0xe0>
	if ((offset + len) > io->size)
1000a904:	683a      	ldr	r2, [r7, #0]
1000a906:	68bb      	ldr	r3, [r7, #8]
1000a908:	441a      	add	r2, r3
1000a90a:	68fb      	ldr	r3, [r7, #12]
1000a90c:	689b      	ldr	r3, [r3, #8]
1000a90e:	429a      	cmp	r2, r3
1000a910:	d904      	bls.n	1000a91c <metal_io_block_write+0x40>
		len = io->size - offset;
1000a912:	68fb      	ldr	r3, [r7, #12]
1000a914:	689a      	ldr	r2, [r3, #8]
1000a916:	68bb      	ldr	r3, [r7, #8]
1000a918:	1ad3      	subs	r3, r2, r3
1000a91a:	603b      	str	r3, [r7, #0]
	retlen = len;
1000a91c:	683b      	ldr	r3, [r7, #0]
1000a91e:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
1000a920:	68fb      	ldr	r3, [r7, #12]
1000a922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a924:	2b00      	cmp	r3, #0
1000a926:	d017      	beq.n	1000a958 <metal_io_block_write+0x7c>
		retlen = (*io->ops.block_write)(
1000a928:	68fb      	ldr	r3, [r7, #12]
1000a92a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
1000a92c:	683b      	ldr	r3, [r7, #0]
1000a92e:	9300      	str	r3, [sp, #0]
1000a930:	2305      	movs	r3, #5
1000a932:	687a      	ldr	r2, [r7, #4]
1000a934:	68b9      	ldr	r1, [r7, #8]
1000a936:	68f8      	ldr	r0, [r7, #12]
1000a938:	47a0      	blx	r4
1000a93a:	6178      	str	r0, [r7, #20]
1000a93c:	e03d      	b.n	1000a9ba <metal_io_block_write+0xde>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
1000a93e:	69bb      	ldr	r3, [r7, #24]
1000a940:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
1000a942:	69fb      	ldr	r3, [r7, #28]
1000a944:	701a      	strb	r2, [r3, #0]
			ptr++;
1000a946:	69fb      	ldr	r3, [r7, #28]
1000a948:	3301      	adds	r3, #1
1000a94a:	61fb      	str	r3, [r7, #28]
			source++;
1000a94c:	69bb      	ldr	r3, [r7, #24]
1000a94e:	3301      	adds	r3, #1
1000a950:	61bb      	str	r3, [r7, #24]
			len--;
1000a952:	683b      	ldr	r3, [r7, #0]
1000a954:	3b01      	subs	r3, #1
1000a956:	603b      	str	r3, [r7, #0]
		while ( len && (
1000a958:	683b      	ldr	r3, [r7, #0]
1000a95a:	2b00      	cmp	r3, #0
1000a95c:	d017      	beq.n	1000a98e <metal_io_block_write+0xb2>
			((uintptr_t)ptr % sizeof(int)) ||
1000a95e:	69fb      	ldr	r3, [r7, #28]
1000a960:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
1000a964:	2b00      	cmp	r3, #0
1000a966:	d1ea      	bne.n	1000a93e <metal_io_block_write+0x62>
			((uintptr_t)source % sizeof(int)))) {
1000a968:	69bb      	ldr	r3, [r7, #24]
1000a96a:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
1000a96e:	2b00      	cmp	r3, #0
1000a970:	d1e5      	bne.n	1000a93e <metal_io_block_write+0x62>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
1000a972:	e00c      	b.n	1000a98e <metal_io_block_write+0xb2>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
1000a974:	69bb      	ldr	r3, [r7, #24]
1000a976:	681a      	ldr	r2, [r3, #0]
1000a978:	69fb      	ldr	r3, [r7, #28]
1000a97a:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
1000a97c:	69fb      	ldr	r3, [r7, #28]
1000a97e:	3304      	adds	r3, #4
1000a980:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
1000a982:	69bb      	ldr	r3, [r7, #24]
1000a984:	3304      	adds	r3, #4
1000a986:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
1000a988:	683b      	ldr	r3, [r7, #0]
1000a98a:	3b04      	subs	r3, #4
1000a98c:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
1000a98e:	683b      	ldr	r3, [r7, #0]
1000a990:	2b03      	cmp	r3, #3
1000a992:	dcef      	bgt.n	1000a974 <metal_io_block_write+0x98>
		for (; len != 0; ptr++, source++, len--)
1000a994:	e00c      	b.n	1000a9b0 <metal_io_block_write+0xd4>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
1000a996:	69bb      	ldr	r3, [r7, #24]
1000a998:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
1000a99a:	69fb      	ldr	r3, [r7, #28]
1000a99c:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
1000a99e:	69fb      	ldr	r3, [r7, #28]
1000a9a0:	3301      	adds	r3, #1
1000a9a2:	61fb      	str	r3, [r7, #28]
1000a9a4:	69bb      	ldr	r3, [r7, #24]
1000a9a6:	3301      	adds	r3, #1
1000a9a8:	61bb      	str	r3, [r7, #24]
1000a9aa:	683b      	ldr	r3, [r7, #0]
1000a9ac:	3b01      	subs	r3, #1
1000a9ae:	603b      	str	r3, [r7, #0]
1000a9b0:	683b      	ldr	r3, [r7, #0]
1000a9b2:	2b00      	cmp	r3, #0
1000a9b4:	d1ef      	bne.n	1000a996 <metal_io_block_write+0xba>
		atomic_thread_fence(memory_order_seq_cst);
1000a9b6:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
1000a9ba:	697b      	ldr	r3, [r7, #20]
}
1000a9bc:	4618      	mov	r0, r3
1000a9be:	3724      	adds	r7, #36	; 0x24
1000a9c0:	46bd      	mov	sp, r7
1000a9c2:	bd90      	pop	{r4, r7, pc}

1000a9c4 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
1000a9c4:	b40e      	push	{r1, r2, r3}
1000a9c6:	b480      	push	{r7}
1000a9c8:	b082      	sub	sp, #8
1000a9ca:	af00      	add	r7, sp, #0
1000a9cc:	4603      	mov	r3, r0
1000a9ce:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
1000a9d0:	bf00      	nop
1000a9d2:	3708      	adds	r7, #8
1000a9d4:	46bd      	mov	sp, r7
1000a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a9da:	b003      	add	sp, #12
1000a9dc:	4770      	bx	lr

1000a9de <metal_io_virt>:
{
1000a9de:	b480      	push	{r7}
1000a9e0:	b083      	sub	sp, #12
1000a9e2:	af00      	add	r7, sp, #0
1000a9e4:	6078      	str	r0, [r7, #4]
1000a9e6:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
1000a9e8:	687b      	ldr	r3, [r7, #4]
1000a9ea:	681b      	ldr	r3, [r3, #0]
		: NULL);
1000a9ec:	f1b3 3fff 	cmp.w	r3, #4294967295
1000a9f0:	d00a      	beq.n	1000aa08 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
1000a9f2:	687b      	ldr	r3, [r7, #4]
1000a9f4:	689b      	ldr	r3, [r3, #8]
1000a9f6:	683a      	ldr	r2, [r7, #0]
1000a9f8:	429a      	cmp	r2, r3
1000a9fa:	d205      	bcs.n	1000aa08 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
1000a9fc:	687b      	ldr	r3, [r7, #4]
1000a9fe:	681b      	ldr	r3, [r3, #0]
1000aa00:	461a      	mov	r2, r3
1000aa02:	683b      	ldr	r3, [r7, #0]
1000aa04:	4413      	add	r3, r2
		: NULL);
1000aa06:	e000      	b.n	1000aa0a <metal_io_virt+0x2c>
1000aa08:	2300      	movs	r3, #0
}
1000aa0a:	4618      	mov	r0, r3
1000aa0c:	370c      	adds	r7, #12
1000aa0e:	46bd      	mov	sp, r7
1000aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
1000aa14:	4770      	bx	lr

1000aa16 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
1000aa16:	b480      	push	{r7}
1000aa18:	b085      	sub	sp, #20
1000aa1a:	af00      	add	r7, sp, #0
1000aa1c:	6078      	str	r0, [r7, #4]
1000aa1e:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
1000aa20:	683b      	ldr	r3, [r7, #0]
1000aa22:	687a      	ldr	r2, [r7, #4]
1000aa24:	6812      	ldr	r2, [r2, #0]
1000aa26:	1a9b      	subs	r3, r3, r2
1000aa28:	60fb      	str	r3, [r7, #12]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
1000aa2a:	687b      	ldr	r3, [r7, #4]
1000aa2c:	689b      	ldr	r3, [r3, #8]
1000aa2e:	68fa      	ldr	r2, [r7, #12]
1000aa30:	429a      	cmp	r2, r3
1000aa32:	d201      	bcs.n	1000aa38 <metal_io_virt_to_offset+0x22>
1000aa34:	68fb      	ldr	r3, [r7, #12]
1000aa36:	e001      	b.n	1000aa3c <metal_io_virt_to_offset+0x26>
1000aa38:	f04f 33ff 	mov.w	r3, #4294967295
}
1000aa3c:	4618      	mov	r0, r3
1000aa3e:	3714      	adds	r7, #20
1000aa40:	46bd      	mov	sp, r7
1000aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
1000aa46:	4770      	bx	lr

1000aa48 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
1000aa48:	b5b0      	push	{r4, r5, r7, lr}
1000aa4a:	b08c      	sub	sp, #48	; 0x30
1000aa4c:	af00      	add	r7, sp, #0
1000aa4e:	60f8      	str	r0, [r7, #12]
1000aa50:	60b9      	str	r1, [r7, #8]
1000aa52:	603b      	str	r3, [r7, #0]
1000aa54:	4613      	mov	r3, r2
1000aa56:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
1000aa58:	68b9      	ldr	r1, [r7, #8]
1000aa5a:	68f8      	ldr	r0, [r7, #12]
1000aa5c:	f7ff ffbf 	bl	1000a9de <metal_io_virt>
1000aa60:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
1000aa62:	68fb      	ldr	r3, [r7, #12]
1000aa64:	699b      	ldr	r3, [r3, #24]
1000aa66:	2b00      	cmp	r3, #0
1000aa68:	d009      	beq.n	1000aa7e <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
1000aa6a:	68fb      	ldr	r3, [r7, #12]
1000aa6c:	699c      	ldr	r4, [r3, #24]
1000aa6e:	79fa      	ldrb	r2, [r7, #7]
1000aa70:	683b      	ldr	r3, [r7, #0]
1000aa72:	68b9      	ldr	r1, [r7, #8]
1000aa74:	68f8      	ldr	r0, [r7, #12]
1000aa76:	47a0      	blx	r4
1000aa78:	4604      	mov	r4, r0
1000aa7a:	460d      	mov	r5, r1
1000aa7c:	e059      	b.n	1000ab32 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
1000aa7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000aa80:	2b00      	cmp	r3, #0
1000aa82:	d012      	beq.n	1000aaaa <metal_io_read+0x62>
1000aa84:	683b      	ldr	r3, [r7, #0]
1000aa86:	2b01      	cmp	r3, #1
1000aa88:	d10f      	bne.n	1000aaaa <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
1000aa8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000aa8c:	62bb      	str	r3, [r7, #40]	; 0x28
1000aa8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000aa90:	f3bf 8f5b 	dmb	ish
1000aa94:	781b      	ldrb	r3, [r3, #0]
1000aa96:	f3bf 8f5b 	dmb	ish
1000aa9a:	b2db      	uxtb	r3, r3
1000aa9c:	76fb      	strb	r3, [r7, #27]
1000aa9e:	7efb      	ldrb	r3, [r7, #27]
1000aaa0:	b2db      	uxtb	r3, r3
1000aaa2:	2200      	movs	r2, #0
1000aaa4:	461c      	mov	r4, r3
1000aaa6:	4615      	mov	r5, r2
1000aaa8:	e043      	b.n	1000ab32 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
1000aaaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000aaac:	2b00      	cmp	r3, #0
1000aaae:	d012      	beq.n	1000aad6 <metal_io_read+0x8e>
1000aab0:	683b      	ldr	r3, [r7, #0]
1000aab2:	2b02      	cmp	r3, #2
1000aab4:	d10f      	bne.n	1000aad6 <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
1000aab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000aab8:	627b      	str	r3, [r7, #36]	; 0x24
1000aaba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000aabc:	f3bf 8f5b 	dmb	ish
1000aac0:	881b      	ldrh	r3, [r3, #0]
1000aac2:	f3bf 8f5b 	dmb	ish
1000aac6:	b29b      	uxth	r3, r3
1000aac8:	833b      	strh	r3, [r7, #24]
1000aaca:	8b3b      	ldrh	r3, [r7, #24]
1000aacc:	b29b      	uxth	r3, r3
1000aace:	2200      	movs	r2, #0
1000aad0:	461c      	mov	r4, r3
1000aad2:	4615      	mov	r5, r2
1000aad4:	e02d      	b.n	1000ab32 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
1000aad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000aad8:	2b00      	cmp	r3, #0
1000aada:	d010      	beq.n	1000aafe <metal_io_read+0xb6>
1000aadc:	683b      	ldr	r3, [r7, #0]
1000aade:	2b04      	cmp	r3, #4
1000aae0:	d10d      	bne.n	1000aafe <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
1000aae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000aae4:	623b      	str	r3, [r7, #32]
1000aae6:	6a3b      	ldr	r3, [r7, #32]
1000aae8:	f3bf 8f5b 	dmb	ish
1000aaec:	681b      	ldr	r3, [r3, #0]
1000aaee:	f3bf 8f5b 	dmb	ish
1000aaf2:	617b      	str	r3, [r7, #20]
1000aaf4:	697b      	ldr	r3, [r7, #20]
1000aaf6:	2200      	movs	r2, #0
1000aaf8:	461c      	mov	r4, r3
1000aafa:	4615      	mov	r5, r2
1000aafc:	e019      	b.n	1000ab32 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
1000aafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000ab00:	2b00      	cmp	r3, #0
1000ab02:	d010      	beq.n	1000ab26 <metal_io_read+0xde>
1000ab04:	683b      	ldr	r3, [r7, #0]
1000ab06:	2b04      	cmp	r3, #4
1000ab08:	d10d      	bne.n	1000ab26 <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
1000ab0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000ab0c:	61fb      	str	r3, [r7, #28]
1000ab0e:	69fb      	ldr	r3, [r7, #28]
1000ab10:	f3bf 8f5b 	dmb	ish
1000ab14:	681b      	ldr	r3, [r3, #0]
1000ab16:	f3bf 8f5b 	dmb	ish
1000ab1a:	613b      	str	r3, [r7, #16]
1000ab1c:	693b      	ldr	r3, [r7, #16]
1000ab1e:	2200      	movs	r2, #0
1000ab20:	461c      	mov	r4, r3
1000ab22:	4615      	mov	r5, r2
1000ab24:	e005      	b.n	1000ab32 <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
1000ab26:	4b06      	ldr	r3, [pc, #24]	; (1000ab40 <metal_io_read+0xf8>)
1000ab28:	4a06      	ldr	r2, [pc, #24]	; (1000ab44 <metal_io_read+0xfc>)
1000ab2a:	21fe      	movs	r1, #254	; 0xfe
1000ab2c:	4806      	ldr	r0, [pc, #24]	; (1000ab48 <metal_io_read+0x100>)
1000ab2e:	f001 fc99 	bl	1000c464 <__assert_func>
	return 0; /* quiet compiler */
}
1000ab32:	4622      	mov	r2, r4
1000ab34:	462b      	mov	r3, r5
1000ab36:	4610      	mov	r0, r2
1000ab38:	4619      	mov	r1, r3
1000ab3a:	3730      	adds	r7, #48	; 0x30
1000ab3c:	46bd      	mov	sp, r7
1000ab3e:	bdb0      	pop	{r4, r5, r7, pc}
1000ab40:	1000d900 	.word	0x1000d900
1000ab44:	1000db40 	.word	0x1000db40
1000ab48:	1000d904 	.word	0x1000d904

1000ab4c <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
1000ab4c:	b580      	push	{r7, lr}
1000ab4e:	b082      	sub	sp, #8
1000ab50:	af00      	add	r7, sp, #0
1000ab52:	6078      	str	r0, [r7, #4]
	return malloc(size);
1000ab54:	6878      	ldr	r0, [r7, #4]
1000ab56:	f001 fca3 	bl	1000c4a0 <malloc>
1000ab5a:	4603      	mov	r3, r0
}
1000ab5c:	4618      	mov	r0, r3
1000ab5e:	3708      	adds	r7, #8
1000ab60:	46bd      	mov	sp, r7
1000ab62:	bd80      	pop	{r7, pc}

1000ab64 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
1000ab64:	b580      	push	{r7, lr}
1000ab66:	b082      	sub	sp, #8
1000ab68:	af00      	add	r7, sp, #0
1000ab6a:	6078      	str	r0, [r7, #4]
	free(ptr);
1000ab6c:	6878      	ldr	r0, [r7, #4]
1000ab6e:	f001 fc9f 	bl	1000c4b0 <free>
}
1000ab72:	bf00      	nop
1000ab74:	3708      	adds	r7, #8
1000ab76:	46bd      	mov	sp, r7
1000ab78:	bd80      	pop	{r7, pc}

1000ab7a <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
1000ab7a:	b580      	push	{r7, lr}
1000ab7c:	b084      	sub	sp, #16
1000ab7e:	af00      	add	r7, sp, #0
1000ab80:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
1000ab82:	687b      	ldr	r3, [r7, #4]
1000ab84:	00db      	lsls	r3, r3, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
1000ab86:	3334      	adds	r3, #52	; 0x34
1000ab88:	60fb      	str	r3, [r7, #12]

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
1000ab8a:	68f8      	ldr	r0, [r7, #12]
1000ab8c:	f7ff ffde 	bl	1000ab4c <metal_allocate_memory>
1000ab90:	60b8      	str	r0, [r7, #8]
	if (vqs) {
1000ab92:	68bb      	ldr	r3, [r7, #8]
1000ab94:	2b00      	cmp	r3, #0
1000ab96:	d004      	beq.n	1000aba2 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
1000ab98:	68fa      	ldr	r2, [r7, #12]
1000ab9a:	2100      	movs	r1, #0
1000ab9c:	68b8      	ldr	r0, [r7, #8]
1000ab9e:	f001 fe72 	bl	1000c886 <memset>
	}

	return vqs;
1000aba2:	68bb      	ldr	r3, [r7, #8]
}
1000aba4:	4618      	mov	r0, r3
1000aba6:	3710      	adds	r7, #16
1000aba8:	46bd      	mov	sp, r7
1000abaa:	bd80      	pop	{r7, pc}

1000abac <rproc_virtio_virtqueue_notify>:
#include <metal/cpu.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
1000abac:	b580      	push	{r7, lr}
1000abae:	b086      	sub	sp, #24
1000abb0:	af00      	add	r7, sp, #0
1000abb2:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
1000abb4:	687b      	ldr	r3, [r7, #4]
1000abb6:	891b      	ldrh	r3, [r3, #8]
1000abb8:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
1000abba:	687b      	ldr	r3, [r7, #4]
1000abbc:	681b      	ldr	r3, [r3, #0]
1000abbe:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000abc0:	693b      	ldr	r3, [r7, #16]
1000abc2:	3b10      	subs	r3, #16
1000abc4:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id < vdev->vrings_num);
1000abc6:	693b      	ldr	r3, [r7, #16]
1000abc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000abca:	697a      	ldr	r2, [r7, #20]
1000abcc:	429a      	cmp	r2, r3
1000abce:	d305      	bcc.n	1000abdc <rproc_virtio_virtqueue_notify+0x30>
1000abd0:	4b0d      	ldr	r3, [pc, #52]	; (1000ac08 <rproc_virtio_virtqueue_notify+0x5c>)
1000abd2:	4a0e      	ldr	r2, [pc, #56]	; (1000ac0c <rproc_virtio_virtqueue_notify+0x60>)
1000abd4:	211c      	movs	r1, #28
1000abd6:	480e      	ldr	r0, [pc, #56]	; (1000ac10 <rproc_virtio_virtqueue_notify+0x64>)
1000abd8:	f001 fc44 	bl	1000c464 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
1000abdc:	693b      	ldr	r3, [r7, #16]
1000abde:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1000abe0:	697a      	ldr	r2, [r7, #20]
1000abe2:	4613      	mov	r3, r2
1000abe4:	005b      	lsls	r3, r3, #1
1000abe6:	4413      	add	r3, r2
1000abe8:	00db      	lsls	r3, r3, #3
1000abea:	440b      	add	r3, r1
1000abec:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
1000abee:	68fb      	ldr	r3, [r7, #12]
1000abf0:	68db      	ldr	r3, [r3, #12]
1000abf2:	68fa      	ldr	r2, [r7, #12]
1000abf4:	6810      	ldr	r0, [r2, #0]
1000abf6:	68ba      	ldr	r2, [r7, #8]
1000abf8:	6912      	ldr	r2, [r2, #16]
1000abfa:	4611      	mov	r1, r2
1000abfc:	4798      	blx	r3
}
1000abfe:	bf00      	nop
1000ac00:	3718      	adds	r7, #24
1000ac02:	46bd      	mov	sp, r7
1000ac04:	bd80      	pop	{r7, pc}
1000ac06:	bf00      	nop
1000ac08:	1000d94c 	.word	0x1000d94c
1000ac0c:	1000db20 	.word	0x1000db20
1000ac10:	1000d968 	.word	0x1000d968

1000ac14 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
1000ac14:	b580      	push	{r7, lr}
1000ac16:	b086      	sub	sp, #24
1000ac18:	af00      	add	r7, sp, #0
1000ac1a:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000ac1c:	687b      	ldr	r3, [r7, #4]
1000ac1e:	3b10      	subs	r3, #16
1000ac20:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
1000ac22:	697b      	ldr	r3, [r7, #20]
1000ac24:	685b      	ldr	r3, [r3, #4]
1000ac26:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
1000ac28:	697b      	ldr	r3, [r7, #20]
1000ac2a:	689b      	ldr	r3, [r3, #8]
1000ac2c:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
1000ac2e:	693b      	ldr	r3, [r7, #16]
1000ac30:	3318      	adds	r3, #24
1000ac32:	4619      	mov	r1, r3
1000ac34:	68f8      	ldr	r0, [r7, #12]
1000ac36:	f7ff feee 	bl	1000aa16 <metal_io_virt_to_offset>
1000ac3a:	4601      	mov	r1, r0
1000ac3c:	2301      	movs	r3, #1
1000ac3e:	2205      	movs	r2, #5
1000ac40:	68f8      	ldr	r0, [r7, #12]
1000ac42:	f7ff ff01 	bl	1000aa48 <metal_io_read>
1000ac46:	4602      	mov	r2, r0
1000ac48:	460b      	mov	r3, r1
1000ac4a:	4613      	mov	r3, r2
1000ac4c:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
1000ac4e:	7afb      	ldrb	r3, [r7, #11]
}
1000ac50:	4618      	mov	r0, r3
1000ac52:	3718      	adds	r7, #24
1000ac54:	46bd      	mov	sp, r7
1000ac56:	bd80      	pop	{r7, pc}

1000ac58 <rproc_virtio_get_dfeatures>:
	rpvdev->notify(rpvdev->priv, vdev->notifyid);
}
#endif

static uint32_t rproc_virtio_get_dfeatures(struct virtio_device *vdev)
{
1000ac58:	b580      	push	{r7, lr}
1000ac5a:	b086      	sub	sp, #24
1000ac5c:	af00      	add	r7, sp, #0
1000ac5e:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000ac60:	687b      	ldr	r3, [r7, #4]
1000ac62:	3b10      	subs	r3, #16
1000ac64:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
1000ac66:	697b      	ldr	r3, [r7, #20]
1000ac68:	685b      	ldr	r3, [r3, #4]
1000ac6a:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
1000ac6c:	697b      	ldr	r3, [r7, #20]
1000ac6e:	689b      	ldr	r3, [r3, #8]
1000ac70:	60fb      	str	r3, [r7, #12]
	features = metal_io_read32(io,
1000ac72:	693b      	ldr	r3, [r7, #16]
1000ac74:	330c      	adds	r3, #12
1000ac76:	4619      	mov	r1, r3
1000ac78:	68f8      	ldr	r0, [r7, #12]
1000ac7a:	f7ff fecc 	bl	1000aa16 <metal_io_virt_to_offset>
1000ac7e:	4601      	mov	r1, r0
1000ac80:	2304      	movs	r3, #4
1000ac82:	2205      	movs	r2, #5
1000ac84:	68f8      	ldr	r0, [r7, #12]
1000ac86:	f7ff fedf 	bl	1000aa48 <metal_io_read>
1000ac8a:	4602      	mov	r2, r0
1000ac8c:	460b      	mov	r3, r1
1000ac8e:	4613      	mov	r3, r2
1000ac90:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
1000ac92:	68bb      	ldr	r3, [r7, #8]
}
1000ac94:	4618      	mov	r0, r3
1000ac96:	3718      	adds	r7, #24
1000ac98:	46bd      	mov	sp, r7
1000ac9a:	bd80      	pop	{r7, pc}

1000ac9c <rproc_virtio_get_features>:

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
1000ac9c:	b580      	push	{r7, lr}
1000ac9e:	b088      	sub	sp, #32
1000aca0:	af00      	add	r7, sp, #0
1000aca2:	6078      	str	r0, [r7, #4]
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t gfeatures;
	uint32_t dfeatures;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000aca4:	687b      	ldr	r3, [r7, #4]
1000aca6:	3b10      	subs	r3, #16
1000aca8:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
1000acaa:	69fb      	ldr	r3, [r7, #28]
1000acac:	685b      	ldr	r3, [r3, #4]
1000acae:	61bb      	str	r3, [r7, #24]
	io = rpvdev->vdev_rsc_io;
1000acb0:	69fb      	ldr	r3, [r7, #28]
1000acb2:	689b      	ldr	r3, [r3, #8]
1000acb4:	617b      	str	r3, [r7, #20]
	gfeatures = metal_io_read32(io,
1000acb6:	69bb      	ldr	r3, [r7, #24]
1000acb8:	3310      	adds	r3, #16
1000acba:	4619      	mov	r1, r3
1000acbc:	6978      	ldr	r0, [r7, #20]
1000acbe:	f7ff feaa 	bl	1000aa16 <metal_io_virt_to_offset>
1000acc2:	4601      	mov	r1, r0
1000acc4:	2304      	movs	r3, #4
1000acc6:	2205      	movs	r2, #5
1000acc8:	6978      	ldr	r0, [r7, #20]
1000acca:	f7ff febd 	bl	1000aa48 <metal_io_read>
1000acce:	4602      	mov	r2, r0
1000acd0:	460b      	mov	r3, r1
1000acd2:	4613      	mov	r3, r2
1000acd4:	613b      	str	r3, [r7, #16]
			metal_io_virt_to_offset(io, &vdev_rsc->gfeatures));
	dfeatures = rproc_virtio_get_dfeatures(vdev);
1000acd6:	6878      	ldr	r0, [r7, #4]
1000acd8:	f7ff ffbe 	bl	1000ac58 <rproc_virtio_get_dfeatures>
1000acdc:	60f8      	str	r0, [r7, #12]

	return dfeatures & gfeatures;
1000acde:	68fa      	ldr	r2, [r7, #12]
1000ace0:	693b      	ldr	r3, [r7, #16]
1000ace2:	4013      	ands	r3, r2
}
1000ace4:	4618      	mov	r0, r3
1000ace6:	3720      	adds	r7, #32
1000ace8:	46bd      	mov	sp, r7
1000acea:	bd80      	pop	{r7, pc}

1000acec <rproc_virtio_read_config>:
}
#endif

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
1000acec:	b580      	push	{r7, lr}
1000acee:	b088      	sub	sp, #32
1000acf0:	af00      	add	r7, sp, #0
1000acf2:	60f8      	str	r0, [r7, #12]
1000acf4:	60b9      	str	r1, [r7, #8]
1000acf6:	607a      	str	r2, [r7, #4]
1000acf8:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char *config;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000acfa:	68fb      	ldr	r3, [r7, #12]
1000acfc:	3b10      	subs	r3, #16
1000acfe:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
1000ad00:	69fb      	ldr	r3, [r7, #28]
1000ad02:	685b      	ldr	r3, [r3, #4]
1000ad04:	61bb      	str	r3, [r7, #24]
	config = (char *)(&vdev_rsc->vring[vdev->vrings_num]);
1000ad06:	68fb      	ldr	r3, [r7, #12]
1000ad08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
1000ad0a:	4613      	mov	r3, r2
1000ad0c:	009b      	lsls	r3, r3, #2
1000ad0e:	4413      	add	r3, r2
1000ad10:	009b      	lsls	r3, r3, #2
1000ad12:	3318      	adds	r3, #24
1000ad14:	69ba      	ldr	r2, [r7, #24]
1000ad16:	4413      	add	r3, r2
1000ad18:	3304      	adds	r3, #4
1000ad1a:	617b      	str	r3, [r7, #20]
	io = rpvdev->vdev_rsc_io;
1000ad1c:	69fb      	ldr	r3, [r7, #28]
1000ad1e:	689b      	ldr	r3, [r3, #8]
1000ad20:	613b      	str	r3, [r7, #16]

	if (offset + length <= vdev_rsc->config_len)
1000ad22:	683a      	ldr	r2, [r7, #0]
1000ad24:	68bb      	ldr	r3, [r7, #8]
1000ad26:	441a      	add	r2, r3
1000ad28:	69bb      	ldr	r3, [r7, #24]
1000ad2a:	695b      	ldr	r3, [r3, #20]
1000ad2c:	429a      	cmp	r2, r3
1000ad2e:	d80c      	bhi.n	1000ad4a <rproc_virtio_read_config+0x5e>
		metal_io_block_read(io,
				metal_io_virt_to_offset(io, config + offset),
1000ad30:	697a      	ldr	r2, [r7, #20]
1000ad32:	68bb      	ldr	r3, [r7, #8]
1000ad34:	4413      	add	r3, r2
		metal_io_block_read(io,
1000ad36:	4619      	mov	r1, r3
1000ad38:	6938      	ldr	r0, [r7, #16]
1000ad3a:	f7ff fe6c 	bl	1000aa16 <metal_io_virt_to_offset>
1000ad3e:	4601      	mov	r1, r0
1000ad40:	683b      	ldr	r3, [r7, #0]
1000ad42:	687a      	ldr	r2, [r7, #4]
1000ad44:	6938      	ldr	r0, [r7, #16]
1000ad46:	f7ff fd54 	bl	1000a7f2 <metal_io_block_read>
				dst, length);
}
1000ad4a:	bf00      	nop
1000ad4c:	3720      	adds	r7, #32
1000ad4e:	46bd      	mov	sp, r7
1000ad50:	bd80      	pop	{r7, pc}
	...

1000ad54 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
1000ad54:	b580      	push	{r7, lr}
1000ad56:	b08e      	sub	sp, #56	; 0x38
1000ad58:	af00      	add	r7, sp, #0
1000ad5a:	60f8      	str	r0, [r7, #12]
1000ad5c:	60b9      	str	r1, [r7, #8]
1000ad5e:	607a      	str	r2, [r7, #4]
1000ad60:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
1000ad62:	687b      	ldr	r3, [r7, #4]
1000ad64:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
1000ad66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000ad68:	7e5b      	ldrb	r3, [r3, #25]
1000ad6a:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
1000ad6c:	2048      	movs	r0, #72	; 0x48
1000ad6e:	f7ff feed 	bl	1000ab4c <metal_allocate_memory>
1000ad72:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
1000ad74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000ad76:	2b00      	cmp	r3, #0
1000ad78:	d101      	bne.n	1000ad7e <rproc_virtio_create_vdev+0x2a>
		return NULL;
1000ad7a:	2300      	movs	r3, #0
1000ad7c:	e092      	b.n	1000aea4 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
1000ad7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000ad80:	4613      	mov	r3, r2
1000ad82:	005b      	lsls	r3, r3, #1
1000ad84:	4413      	add	r3, r2
1000ad86:	00db      	lsls	r3, r3, #3
1000ad88:	4618      	mov	r0, r3
1000ad8a:	f7ff fedf 	bl	1000ab4c <metal_allocate_memory>
1000ad8e:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
1000ad90:	6a3b      	ldr	r3, [r7, #32]
1000ad92:	2b00      	cmp	r3, #0
1000ad94:	f000 8081 	beq.w	1000ae9a <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
1000ad98:	2248      	movs	r2, #72	; 0x48
1000ad9a:	2100      	movs	r1, #0
1000ad9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000ad9e:	f001 fd72 	bl	1000c886 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
1000ada2:	2218      	movs	r2, #24
1000ada4:	2100      	movs	r1, #0
1000ada6:	6a38      	ldr	r0, [r7, #32]
1000ada8:	f001 fd6d 	bl	1000c886 <memset>
	vdev = &rpvdev->vdev;
1000adac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000adae:	3310      	adds	r3, #16
1000adb0:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
1000adb2:	2300      	movs	r3, #0
1000adb4:	637b      	str	r3, [r7, #52]	; 0x34
1000adb6:	e025      	b.n	1000ae04 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
1000adb8:	2300      	movs	r3, #0
1000adba:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
1000adbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000adbe:	4613      	mov	r3, r2
1000adc0:	009b      	lsls	r3, r3, #2
1000adc2:	4413      	add	r3, r2
1000adc4:	009b      	lsls	r3, r3, #2
1000adc6:	3318      	adds	r3, #24
1000adc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
1000adca:	4413      	add	r3, r2
1000adcc:	3304      	adds	r3, #4
1000adce:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
1000add0:	68fb      	ldr	r3, [r7, #12]
1000add2:	2b00      	cmp	r3, #0
1000add4:	d102      	bne.n	1000addc <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
1000add6:	69bb      	ldr	r3, [r7, #24]
1000add8:	689b      	ldr	r3, [r3, #8]
1000adda:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
1000addc:	6b38      	ldr	r0, [r7, #48]	; 0x30
1000adde:	f7ff fecc 	bl	1000ab7a <virtqueue_allocate>
1000ade2:	6178      	str	r0, [r7, #20]
		if (!vq)
1000ade4:	697b      	ldr	r3, [r7, #20]
1000ade6:	2b00      	cmp	r3, #0
1000ade8:	d031      	beq.n	1000ae4e <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
1000adea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000adec:	4613      	mov	r3, r2
1000adee:	005b      	lsls	r3, r3, #1
1000adf0:	4413      	add	r3, r2
1000adf2:	00db      	lsls	r3, r3, #3
1000adf4:	461a      	mov	r2, r3
1000adf6:	6a3b      	ldr	r3, [r7, #32]
1000adf8:	4413      	add	r3, r2
1000adfa:	697a      	ldr	r2, [r7, #20]
1000adfc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
1000adfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000ae00:	3301      	adds	r3, #1
1000ae02:	637b      	str	r3, [r7, #52]	; 0x34
1000ae04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000ae06:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000ae08:	429a      	cmp	r2, r3
1000ae0a:	d3d5      	bcc.n	1000adb8 <rproc_virtio_create_vdev+0x64>
	}

	rpvdev->notify = notify;
1000ae0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000ae0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
1000ae10:	60da      	str	r2, [r3, #12]
	rpvdev->priv = priv;
1000ae12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000ae14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
1000ae16:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
1000ae18:	69fb      	ldr	r3, [r7, #28]
1000ae1a:	6a3a      	ldr	r2, [r7, #32]
1000ae1c:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
1000ae1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000ae20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
1000ae22:	605a      	str	r2, [r3, #4]
	rpvdev->vdev_rsc_io = rsc_io;
1000ae24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000ae26:	683a      	ldr	r2, [r7, #0]
1000ae28:	609a      	str	r2, [r3, #8]

	vdev->notifyid = notifyid;
1000ae2a:	69fb      	ldr	r3, [r7, #28]
1000ae2c:	68ba      	ldr	r2, [r7, #8]
1000ae2e:	601a      	str	r2, [r3, #0]
	vdev->role = role;
1000ae30:	69fb      	ldr	r3, [r7, #28]
1000ae32:	68fa      	ldr	r2, [r7, #12]
1000ae34:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
1000ae36:	69fb      	ldr	r3, [r7, #28]
1000ae38:	6cba      	ldr	r2, [r7, #72]	; 0x48
1000ae3a:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
1000ae3c:	69fb      	ldr	r3, [r7, #28]
1000ae3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000ae40:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
1000ae42:	69fb      	ldr	r3, [r7, #28]
1000ae44:	4a19      	ldr	r2, [pc, #100]	; (1000aeac <rproc_virtio_create_vdev+0x158>)
1000ae46:	621a      	str	r2, [r3, #32]
		/* Assume the master support all slave features */
		rproc_virtio_negotiate_features(vdev, dfeatures);
	}
#endif

	return &rpvdev->vdev;
1000ae48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000ae4a:	3310      	adds	r3, #16
1000ae4c:	e02a      	b.n	1000aea4 <rproc_virtio_create_vdev+0x150>
			goto err1;
1000ae4e:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
1000ae50:	2300      	movs	r3, #0
1000ae52:	637b      	str	r3, [r7, #52]	; 0x34
1000ae54:	e019      	b.n	1000ae8a <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
1000ae56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000ae58:	4613      	mov	r3, r2
1000ae5a:	005b      	lsls	r3, r3, #1
1000ae5c:	4413      	add	r3, r2
1000ae5e:	00db      	lsls	r3, r3, #3
1000ae60:	461a      	mov	r2, r3
1000ae62:	6a3b      	ldr	r3, [r7, #32]
1000ae64:	4413      	add	r3, r2
1000ae66:	681b      	ldr	r3, [r3, #0]
1000ae68:	2b00      	cmp	r3, #0
1000ae6a:	d00b      	beq.n	1000ae84 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
1000ae6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000ae6e:	4613      	mov	r3, r2
1000ae70:	005b      	lsls	r3, r3, #1
1000ae72:	4413      	add	r3, r2
1000ae74:	00db      	lsls	r3, r3, #3
1000ae76:	461a      	mov	r2, r3
1000ae78:	6a3b      	ldr	r3, [r7, #32]
1000ae7a:	4413      	add	r3, r2
1000ae7c:	681b      	ldr	r3, [r3, #0]
1000ae7e:	4618      	mov	r0, r3
1000ae80:	f7ff fe70 	bl	1000ab64 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
1000ae84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000ae86:	3301      	adds	r3, #1
1000ae88:	637b      	str	r3, [r7, #52]	; 0x34
1000ae8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000ae8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000ae8e:	429a      	cmp	r2, r3
1000ae90:	d3e1      	bcc.n	1000ae56 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
1000ae92:	6a38      	ldr	r0, [r7, #32]
1000ae94:	f7ff fe66 	bl	1000ab64 <metal_free_memory>
1000ae98:	e000      	b.n	1000ae9c <rproc_virtio_create_vdev+0x148>
		goto err0;
1000ae9a:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
1000ae9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000ae9e:	f7ff fe61 	bl	1000ab64 <metal_free_memory>
	return NULL;
1000aea2:	2300      	movs	r3, #0
}
1000aea4:	4618      	mov	r0, r3
1000aea6:	3738      	adds	r7, #56	; 0x38
1000aea8:	46bd      	mov	sp, r7
1000aeaa:	bd80      	pop	{r7, pc}
1000aeac:	1000dafc 	.word	0x1000dafc

1000aeb0 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
1000aeb0:	b480      	push	{r7}
1000aeb2:	b087      	sub	sp, #28
1000aeb4:	af00      	add	r7, sp, #0
1000aeb6:	60f8      	str	r0, [r7, #12]
1000aeb8:	60b9      	str	r1, [r7, #8]
1000aeba:	607a      	str	r2, [r7, #4]
1000aebc:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
1000aebe:	68fb      	ldr	r3, [r7, #12]
1000aec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000aec2:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
1000aec4:	68ba      	ldr	r2, [r7, #8]
1000aec6:	697b      	ldr	r3, [r7, #20]
1000aec8:	429a      	cmp	r2, r3
1000aeca:	d302      	bcc.n	1000aed2 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
1000aecc:	f06f 0301 	mvn.w	r3, #1
1000aed0:	e019      	b.n	1000af06 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
1000aed2:	68fb      	ldr	r3, [r7, #12]
1000aed4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1000aed6:	68ba      	ldr	r2, [r7, #8]
1000aed8:	4613      	mov	r3, r2
1000aeda:	005b      	lsls	r3, r3, #1
1000aedc:	4413      	add	r3, r2
1000aede:	00db      	lsls	r3, r3, #3
1000aee0:	440b      	add	r3, r1
1000aee2:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
1000aee4:	693b      	ldr	r3, [r7, #16]
1000aee6:	6a3a      	ldr	r2, [r7, #32]
1000aee8:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
1000aeea:	693b      	ldr	r3, [r7, #16]
1000aeec:	687a      	ldr	r2, [r7, #4]
1000aeee:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
1000aef0:	693b      	ldr	r3, [r7, #16]
1000aef2:	683a      	ldr	r2, [r7, #0]
1000aef4:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
1000aef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000aef8:	b29a      	uxth	r2, r3
1000aefa:	693b      	ldr	r3, [r7, #16]
1000aefc:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
1000aefe:	693b      	ldr	r3, [r7, #16]
1000af00:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000af02:	609a      	str	r2, [r3, #8]

	return 0;
1000af04:	2300      	movs	r3, #0
}
1000af06:	4618      	mov	r0, r3
1000af08:	371c      	adds	r7, #28
1000af0a:	46bd      	mov	sp, r7
1000af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
1000af10:	4770      	bx	lr

1000af12 <rproc_virtio_wait_remote_ready>:
	}
	return 0;
}

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
1000af12:	b580      	push	{r7, lr}
1000af14:	b084      	sub	sp, #16
1000af16:	af00      	add	r7, sp, #0
1000af18:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
1000af1a:	687b      	ldr	r3, [r7, #4]
1000af1c:	699b      	ldr	r3, [r3, #24]
1000af1e:	2b00      	cmp	r3, #0
1000af20:	d00a      	beq.n	1000af38 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
1000af22:	6878      	ldr	r0, [r7, #4]
1000af24:	f7ff fe76 	bl	1000ac14 <rproc_virtio_get_status>
1000af28:	4603      	mov	r3, r0
1000af2a:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
1000af2c:	7bfb      	ldrb	r3, [r7, #15]
1000af2e:	f003 0304 	and.w	r3, r3, #4
1000af32:	2b00      	cmp	r3, #0
1000af34:	d102      	bne.n	1000af3c <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
1000af36:	e7f4      	b.n	1000af22 <rproc_virtio_wait_remote_ready+0x10>
		return;
1000af38:	bf00      	nop
1000af3a:	e000      	b.n	1000af3e <rproc_virtio_wait_remote_ready+0x2c>
			return;
1000af3c:	bf00      	nop
		metal_cpu_yield();
	}
}
1000af3e:	3710      	adds	r7, #16
1000af40:	46bd      	mov	sp, r7
1000af42:	bd80      	pop	{r7, pc}

1000af44 <metal_list_add_before>:
{
1000af44:	b480      	push	{r7}
1000af46:	b083      	sub	sp, #12
1000af48:	af00      	add	r7, sp, #0
1000af4a:	6078      	str	r0, [r7, #4]
1000af4c:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
1000af4e:	687b      	ldr	r3, [r7, #4]
1000af50:	685a      	ldr	r2, [r3, #4]
1000af52:	683b      	ldr	r3, [r7, #0]
1000af54:	605a      	str	r2, [r3, #4]
	new_node->next = node;
1000af56:	683b      	ldr	r3, [r7, #0]
1000af58:	687a      	ldr	r2, [r7, #4]
1000af5a:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
1000af5c:	683b      	ldr	r3, [r7, #0]
1000af5e:	681b      	ldr	r3, [r3, #0]
1000af60:	683a      	ldr	r2, [r7, #0]
1000af62:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
1000af64:	683b      	ldr	r3, [r7, #0]
1000af66:	685b      	ldr	r3, [r3, #4]
1000af68:	683a      	ldr	r2, [r7, #0]
1000af6a:	601a      	str	r2, [r3, #0]
}
1000af6c:	bf00      	nop
1000af6e:	370c      	adds	r7, #12
1000af70:	46bd      	mov	sp, r7
1000af72:	f85d 7b04 	ldr.w	r7, [sp], #4
1000af76:	4770      	bx	lr

1000af78 <metal_list_add_tail>:
{
1000af78:	b580      	push	{r7, lr}
1000af7a:	b082      	sub	sp, #8
1000af7c:	af00      	add	r7, sp, #0
1000af7e:	6078      	str	r0, [r7, #4]
1000af80:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
1000af82:	6839      	ldr	r1, [r7, #0]
1000af84:	6878      	ldr	r0, [r7, #4]
1000af86:	f7ff ffdd 	bl	1000af44 <metal_list_add_before>
}
1000af8a:	bf00      	nop
1000af8c:	3708      	adds	r7, #8
1000af8e:	46bd      	mov	sp, r7
1000af90:	bd80      	pop	{r7, pc}

1000af92 <rpmsg_get_endpoint>:
}

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
1000af92:	b580      	push	{r7, lr}
1000af94:	b088      	sub	sp, #32
1000af96:	af00      	add	r7, sp, #0
1000af98:	60f8      	str	r0, [r7, #12]
1000af9a:	60b9      	str	r1, [r7, #8]
1000af9c:	607a      	str	r2, [r7, #4]
1000af9e:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
1000afa0:	68fb      	ldr	r3, [r7, #12]
1000afa2:	681b      	ldr	r3, [r3, #0]
1000afa4:	61fb      	str	r3, [r7, #28]
1000afa6:	e04b      	b.n	1000b040 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
1000afa8:	2300      	movs	r3, #0
1000afaa:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
1000afac:	69fb      	ldr	r3, [r7, #28]
1000afae:	3b34      	subs	r3, #52	; 0x34
1000afb0:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
1000afb2:	687b      	ldr	r3, [r7, #4]
1000afb4:	f1b3 3fff 	cmp.w	r3, #4294967295
1000afb8:	d006      	beq.n	1000afc8 <rpmsg_get_endpoint+0x36>
1000afba:	697b      	ldr	r3, [r7, #20]
1000afbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000afbe:	687a      	ldr	r2, [r7, #4]
1000afc0:	429a      	cmp	r2, r3
1000afc2:	d101      	bne.n	1000afc8 <rpmsg_get_endpoint+0x36>
			return ept;
1000afc4:	697b      	ldr	r3, [r7, #20]
1000afc6:	e040      	b.n	1000b04a <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
1000afc8:	697b      	ldr	r3, [r7, #20]
1000afca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000afcc:	687a      	ldr	r2, [r7, #4]
1000afce:	429a      	cmp	r2, r3
1000afd0:	d106      	bne.n	1000afe0 <rpmsg_get_endpoint+0x4e>
1000afd2:	697b      	ldr	r3, [r7, #20]
1000afd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000afd6:	683a      	ldr	r2, [r7, #0]
1000afd8:	429a      	cmp	r2, r3
1000afda:	d101      	bne.n	1000afe0 <rpmsg_get_endpoint+0x4e>
			return ept;
1000afdc:	697b      	ldr	r3, [r7, #20]
1000afde:	e034      	b.n	1000b04a <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
1000afe0:	68bb      	ldr	r3, [r7, #8]
1000afe2:	2b00      	cmp	r3, #0
1000afe4:	d00c      	beq.n	1000b000 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
1000afe6:	697b      	ldr	r3, [r7, #20]
1000afe8:	2220      	movs	r2, #32
1000afea:	68b9      	ldr	r1, [r7, #8]
1000afec:	4618      	mov	r0, r3
1000afee:	f001 fc52 	bl	1000c896 <strncmp>
1000aff2:	4603      	mov	r3, r0
1000aff4:	2b00      	cmp	r3, #0
1000aff6:	bf0c      	ite	eq
1000aff8:	2301      	moveq	r3, #1
1000affa:	2300      	movne	r3, #0
1000affc:	b2db      	uxtb	r3, r3
1000affe:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
1000b000:	68bb      	ldr	r3, [r7, #8]
1000b002:	2b00      	cmp	r3, #0
1000b004:	d018      	beq.n	1000b038 <rpmsg_get_endpoint+0xa6>
1000b006:	69bb      	ldr	r3, [r7, #24]
1000b008:	2b00      	cmp	r3, #0
1000b00a:	d015      	beq.n	1000b038 <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address */
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
1000b00c:	683b      	ldr	r3, [r7, #0]
1000b00e:	f1b3 3fff 	cmp.w	r3, #4294967295
1000b012:	d006      	beq.n	1000b022 <rpmsg_get_endpoint+0x90>
1000b014:	697b      	ldr	r3, [r7, #20]
1000b016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000b018:	683a      	ldr	r2, [r7, #0]
1000b01a:	429a      	cmp	r2, r3
1000b01c:	d101      	bne.n	1000b022 <rpmsg_get_endpoint+0x90>
			return ept;
1000b01e:	697b      	ldr	r3, [r7, #20]
1000b020:	e013      	b.n	1000b04a <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept */
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
1000b022:	687b      	ldr	r3, [r7, #4]
1000b024:	f1b3 3fff 	cmp.w	r3, #4294967295
1000b028:	d107      	bne.n	1000b03a <rpmsg_get_endpoint+0xa8>
1000b02a:	697b      	ldr	r3, [r7, #20]
1000b02c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000b02e:	f1b3 3fff 	cmp.w	r3, #4294967295
1000b032:	d102      	bne.n	1000b03a <rpmsg_get_endpoint+0xa8>
			return ept;
1000b034:	697b      	ldr	r3, [r7, #20]
1000b036:	e008      	b.n	1000b04a <rpmsg_get_endpoint+0xb8>
			continue;
1000b038:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
1000b03a:	69fb      	ldr	r3, [r7, #28]
1000b03c:	681b      	ldr	r3, [r3, #0]
1000b03e:	61fb      	str	r3, [r7, #28]
1000b040:	68fb      	ldr	r3, [r7, #12]
1000b042:	69fa      	ldr	r2, [r7, #28]
1000b044:	429a      	cmp	r2, r3
1000b046:	d1af      	bne.n	1000afa8 <rpmsg_get_endpoint+0x16>
	}
	return NULL;
1000b048:	2300      	movs	r3, #0
}
1000b04a:	4618      	mov	r0, r3
1000b04c:	3720      	adds	r7, #32
1000b04e:	46bd      	mov	sp, r7
1000b050:	bd80      	pop	{r7, pc}

1000b052 <rpmsg_register_endpoint>:
	metal_mutex_release(&rdev->lock);
}

void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept)
{
1000b052:	b580      	push	{r7, lr}
1000b054:	b082      	sub	sp, #8
1000b056:	af00      	add	r7, sp, #0
1000b058:	6078      	str	r0, [r7, #4]
1000b05a:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
1000b05c:	683b      	ldr	r3, [r7, #0]
1000b05e:	687a      	ldr	r2, [r7, #4]
1000b060:	621a      	str	r2, [r3, #32]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
1000b062:	687a      	ldr	r2, [r7, #4]
1000b064:	683b      	ldr	r3, [r7, #0]
1000b066:	3334      	adds	r3, #52	; 0x34
1000b068:	4619      	mov	r1, r3
1000b06a:	4610      	mov	r0, r2
1000b06c:	f7ff ff84 	bl	1000af78 <metal_list_add_tail>
}
1000b070:	bf00      	nop
1000b072:	3708      	adds	r7, #8
1000b074:	46bd      	mov	sp, r7
1000b076:	bd80      	pop	{r7, pc}

1000b078 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
1000b078:	b480      	push	{r7}
1000b07a:	b083      	sub	sp, #12
1000b07c:	af00      	add	r7, sp, #0
1000b07e:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
1000b080:	2300      	movs	r3, #0
}
1000b082:	4618      	mov	r0, r3
1000b084:	370c      	adds	r7, #12
1000b086:	46bd      	mov	sp, r7
1000b088:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b08c:	4770      	bx	lr

1000b08e <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
1000b08e:	b580      	push	{r7, lr}
1000b090:	b082      	sub	sp, #8
1000b092:	af00      	add	r7, sp, #0
1000b094:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
1000b096:	6878      	ldr	r0, [r7, #4]
1000b098:	f7ff ffee 	bl	1000b078 <__metal_sleep_usec>
1000b09c:	4603      	mov	r3, r0
}
1000b09e:	4618      	mov	r0, r3
1000b0a0:	3708      	adds	r7, #8
1000b0a2:	46bd      	mov	sp, r7
1000b0a4:	bd80      	pop	{r7, pc}

1000b0a6 <metal_list_init>:
{
1000b0a6:	b480      	push	{r7}
1000b0a8:	b083      	sub	sp, #12
1000b0aa:	af00      	add	r7, sp, #0
1000b0ac:	6078      	str	r0, [r7, #4]
	list->prev = list;
1000b0ae:	687b      	ldr	r3, [r7, #4]
1000b0b0:	687a      	ldr	r2, [r7, #4]
1000b0b2:	605a      	str	r2, [r3, #4]
	list->next = list;
1000b0b4:	687b      	ldr	r3, [r7, #4]
1000b0b6:	687a      	ldr	r2, [r7, #4]
1000b0b8:	601a      	str	r2, [r3, #0]
}
1000b0ba:	bf00      	nop
1000b0bc:	370c      	adds	r7, #12
1000b0be:	46bd      	mov	sp, r7
1000b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b0c4:	4770      	bx	lr

1000b0c6 <metal_io_virt_to_offset>:
{
1000b0c6:	b480      	push	{r7}
1000b0c8:	b085      	sub	sp, #20
1000b0ca:	af00      	add	r7, sp, #0
1000b0cc:	6078      	str	r0, [r7, #4]
1000b0ce:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
1000b0d0:	683b      	ldr	r3, [r7, #0]
1000b0d2:	687a      	ldr	r2, [r7, #4]
1000b0d4:	6812      	ldr	r2, [r2, #0]
1000b0d6:	1a9b      	subs	r3, r3, r2
1000b0d8:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
1000b0da:	687b      	ldr	r3, [r7, #4]
1000b0dc:	689b      	ldr	r3, [r3, #8]
1000b0de:	68fa      	ldr	r2, [r7, #12]
1000b0e0:	429a      	cmp	r2, r3
1000b0e2:	d201      	bcs.n	1000b0e8 <metal_io_virt_to_offset+0x22>
1000b0e4:	68fb      	ldr	r3, [r7, #12]
1000b0e6:	e001      	b.n	1000b0ec <metal_io_virt_to_offset+0x26>
1000b0e8:	f04f 33ff 	mov.w	r3, #4294967295
}
1000b0ec:	4618      	mov	r0, r3
1000b0ee:	3714      	adds	r7, #20
1000b0f0:	46bd      	mov	sp, r7
1000b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b0f6:	4770      	bx	lr

1000b0f8 <__metal_mutex_init>:
 * static singleton mutex
 */
#define METAL_MUTEX_DEFINE(m) metal_mutex_t m = METAL_MUTEX_INIT(m)

static inline void __metal_mutex_init(metal_mutex_t *mutex)
{
1000b0f8:	b480      	push	{r7}
1000b0fa:	b085      	sub	sp, #20
1000b0fc:	af00      	add	r7, sp, #0
1000b0fe:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
1000b100:	687b      	ldr	r3, [r7, #4]
1000b102:	60fb      	str	r3, [r7, #12]
1000b104:	2300      	movs	r3, #0
1000b106:	60bb      	str	r3, [r7, #8]
1000b108:	68bb      	ldr	r3, [r7, #8]
1000b10a:	461a      	mov	r2, r3
1000b10c:	68fb      	ldr	r3, [r7, #12]
1000b10e:	f3bf 8f5b 	dmb	ish
1000b112:	601a      	str	r2, [r3, #0]
1000b114:	f3bf 8f5b 	dmb	ish
}
1000b118:	bf00      	nop
1000b11a:	3714      	adds	r7, #20
1000b11c:	46bd      	mov	sp, r7
1000b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b122:	4770      	bx	lr

1000b124 <__metal_mutex_acquire>:
		return 0; /* not acquired */
	}
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
1000b124:	b490      	push	{r4, r7}
1000b126:	b086      	sub	sp, #24
1000b128:	af00      	add	r7, sp, #0
1000b12a:	6078      	str	r0, [r7, #4]
	int unlocked = METAL_MUTEX_UNLOCKED;
1000b12c:	2300      	movs	r3, #0
1000b12e:	613b      	str	r3, [r7, #16]

	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
1000b130:	bf00      	nop
1000b132:	687b      	ldr	r3, [r7, #4]
1000b134:	617b      	str	r3, [r7, #20]
1000b136:	2301      	movs	r3, #1
1000b138:	60fb      	str	r3, [r7, #12]
1000b13a:	68fb      	ldr	r3, [r7, #12]
1000b13c:	461c      	mov	r4, r3
1000b13e:	697a      	ldr	r2, [r7, #20]
1000b140:	f107 0310 	add.w	r3, r7, #16
1000b144:	6818      	ldr	r0, [r3, #0]
1000b146:	f3bf 8f5b 	dmb	ish
1000b14a:	e852 1f00 	ldrex	r1, [r2]
1000b14e:	4281      	cmp	r1, r0
1000b150:	d103      	bne.n	1000b15a <__metal_mutex_acquire+0x36>
1000b152:	e842 4c00 	strex	ip, r4, [r2]
1000b156:	f1bc 0f00 	cmp.w	ip, #0
1000b15a:	f3bf 8f5b 	dmb	ish
1000b15e:	bf0c      	ite	eq
1000b160:	2201      	moveq	r2, #1
1000b162:	2200      	movne	r2, #0
1000b164:	2a00      	cmp	r2, #0
1000b166:	d100      	bne.n	1000b16a <__metal_mutex_acquire+0x46>
1000b168:	6019      	str	r1, [r3, #0]
1000b16a:	4613      	mov	r3, r2
1000b16c:	f083 0301 	eor.w	r3, r3, #1
1000b170:	b2db      	uxtb	r3, r3
1000b172:	2b00      	cmp	r3, #0
1000b174:	d1dd      	bne.n	1000b132 <__metal_mutex_acquire+0xe>
					     METAL_MUTEX_LOCKED)) {
		;
	}
}
1000b176:	bf00      	nop
1000b178:	bf00      	nop
1000b17a:	3718      	adds	r7, #24
1000b17c:	46bd      	mov	sp, r7
1000b17e:	bc90      	pop	{r4, r7}
1000b180:	4770      	bx	lr

1000b182 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
1000b182:	b480      	push	{r7}
1000b184:	b085      	sub	sp, #20
1000b186:	af00      	add	r7, sp, #0
1000b188:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
1000b18a:	687b      	ldr	r3, [r7, #4]
1000b18c:	60fb      	str	r3, [r7, #12]
1000b18e:	2300      	movs	r3, #0
1000b190:	60bb      	str	r3, [r7, #8]
1000b192:	68bb      	ldr	r3, [r7, #8]
1000b194:	461a      	mov	r2, r3
1000b196:	68fb      	ldr	r3, [r7, #12]
1000b198:	f3bf 8f5b 	dmb	ish
1000b19c:	601a      	str	r2, [r3, #0]
1000b19e:	f3bf 8f5b 	dmb	ish
}
1000b1a2:	bf00      	nop
1000b1a4:	3714      	adds	r7, #20
1000b1a6:	46bd      	mov	sp, r7
1000b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b1ac:	4770      	bx	lr

1000b1ae <metal_mutex_init>:
/**
 * @brief	Initialize a libmetal mutex.
 * @param[in]	mutex	Mutex to initialize.
 */
static inline void metal_mutex_init(metal_mutex_t *mutex)
{
1000b1ae:	b580      	push	{r7, lr}
1000b1b0:	b082      	sub	sp, #8
1000b1b2:	af00      	add	r7, sp, #0
1000b1b4:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
1000b1b6:	6878      	ldr	r0, [r7, #4]
1000b1b8:	f7ff ff9e 	bl	1000b0f8 <__metal_mutex_init>
}
1000b1bc:	bf00      	nop
1000b1be:	3708      	adds	r7, #8
1000b1c0:	46bd      	mov	sp, r7
1000b1c2:	bd80      	pop	{r7, pc}

1000b1c4 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
1000b1c4:	b580      	push	{r7, lr}
1000b1c6:	b082      	sub	sp, #8
1000b1c8:	af00      	add	r7, sp, #0
1000b1ca:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
1000b1cc:	6878      	ldr	r0, [r7, #4]
1000b1ce:	f7ff ffa9 	bl	1000b124 <__metal_mutex_acquire>
}
1000b1d2:	bf00      	nop
1000b1d4:	3708      	adds	r7, #8
1000b1d6:	46bd      	mov	sp, r7
1000b1d8:	bd80      	pop	{r7, pc}

1000b1da <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
1000b1da:	b580      	push	{r7, lr}
1000b1dc:	b082      	sub	sp, #8
1000b1de:	af00      	add	r7, sp, #0
1000b1e0:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
1000b1e2:	6878      	ldr	r0, [r7, #4]
1000b1e4:	f7ff ffcd 	bl	1000b182 <__metal_mutex_release>
}
1000b1e8:	bf00      	nop
1000b1ea:	3708      	adds	r7, #8
1000b1ec:	46bd      	mov	sp, r7
1000b1ee:	bd80      	pop	{r7, pc}

1000b1f0 <rpmsg_virtio_get_role>:
#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
1000b1f0:	b480      	push	{r7}
1000b1f2:	b083      	sub	sp, #12
1000b1f4:	af00      	add	r7, sp, #0
1000b1f6:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
1000b1f8:	687b      	ldr	r3, [r7, #4]
1000b1fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000b1fc:	699b      	ldr	r3, [r3, #24]
}
1000b1fe:	4618      	mov	r0, r3
1000b200:	370c      	adds	r7, #12
1000b202:	46bd      	mov	sp, r7
1000b204:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b208:	4770      	bx	lr

1000b20a <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
1000b20a:	b580      	push	{r7, lr}
1000b20c:	b082      	sub	sp, #8
1000b20e:	af00      	add	r7, sp, #0
1000b210:	6078      	str	r0, [r7, #4]
1000b212:	460b      	mov	r3, r1
1000b214:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
1000b216:	687b      	ldr	r3, [r7, #4]
1000b218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000b21a:	6a1b      	ldr	r3, [r3, #32]
1000b21c:	685b      	ldr	r3, [r3, #4]
1000b21e:	687a      	ldr	r2, [r7, #4]
1000b220:	6f92      	ldr	r2, [r2, #120]	; 0x78
1000b222:	78f9      	ldrb	r1, [r7, #3]
1000b224:	4610      	mov	r0, r2
1000b226:	4798      	blx	r3
}
1000b228:	bf00      	nop
1000b22a:	3708      	adds	r7, #8
1000b22c:	46bd      	mov	sp, r7
1000b22e:	bd80      	pop	{r7, pc}

1000b230 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
1000b230:	b580      	push	{r7, lr}
1000b232:	b082      	sub	sp, #8
1000b234:	af00      	add	r7, sp, #0
1000b236:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
1000b238:	687b      	ldr	r3, [r7, #4]
1000b23a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000b23c:	6a1b      	ldr	r3, [r3, #32]
1000b23e:	681b      	ldr	r3, [r3, #0]
1000b240:	687a      	ldr	r2, [r7, #4]
1000b242:	6f92      	ldr	r2, [r2, #120]	; 0x78
1000b244:	4610      	mov	r0, r2
1000b246:	4798      	blx	r3
1000b248:	4603      	mov	r3, r0
}
1000b24a:	4618      	mov	r0, r3
1000b24c:	3708      	adds	r7, #8
1000b24e:	46bd      	mov	sp, r7
1000b250:	bd80      	pop	{r7, pc}

1000b252 <rpmsg_virtio_get_features>:

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
1000b252:	b580      	push	{r7, lr}
1000b254:	b082      	sub	sp, #8
1000b256:	af00      	add	r7, sp, #0
1000b258:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
1000b25a:	687b      	ldr	r3, [r7, #4]
1000b25c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000b25e:	6a1b      	ldr	r3, [r3, #32]
1000b260:	689b      	ldr	r3, [r3, #8]
1000b262:	687a      	ldr	r2, [r7, #4]
1000b264:	6f92      	ldr	r2, [r2, #120]	; 0x78
1000b266:	4610      	mov	r0, r2
1000b268:	4798      	blx	r3
1000b26a:	4603      	mov	r3, r0
}
1000b26c:	4618      	mov	r0, r3
1000b26e:	3708      	adds	r7, #8
1000b270:	46bd      	mov	sp, r7
1000b272:	bd80      	pop	{r7, pc}

1000b274 <rpmsg_virtio_create_virtqueues>:
static inline int
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
1000b274:	b580      	push	{r7, lr}
1000b276:	b086      	sub	sp, #24
1000b278:	af02      	add	r7, sp, #8
1000b27a:	60f8      	str	r0, [r7, #12]
1000b27c:	60b9      	str	r1, [r7, #8]
1000b27e:	607a      	str	r2, [r7, #4]
1000b280:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
1000b282:	68fb      	ldr	r3, [r7, #12]
1000b284:	6f98      	ldr	r0, [r3, #120]	; 0x78
1000b286:	68b9      	ldr	r1, [r7, #8]
1000b288:	69bb      	ldr	r3, [r7, #24]
1000b28a:	9300      	str	r3, [sp, #0]
1000b28c:	683b      	ldr	r3, [r7, #0]
1000b28e:	687a      	ldr	r2, [r7, #4]
1000b290:	f000 fc2c 	bl	1000baec <virtio_create_virtqueues>
1000b294:	4603      	mov	r3, r0
					callbacks);
}
1000b296:	4618      	mov	r0, r3
1000b298:	3710      	adds	r7, #16
1000b29a:	46bd      	mov	sp, r7
1000b29c:	bd80      	pop	{r7, pc}
	...

1000b2a0 <rpmsg_initialize_ept>:
static inline void rpmsg_initialize_ept(struct rpmsg_endpoint *ept,
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
1000b2a0:	b580      	push	{r7, lr}
1000b2a2:	b084      	sub	sp, #16
1000b2a4:	af00      	add	r7, sp, #0
1000b2a6:	60f8      	str	r0, [r7, #12]
1000b2a8:	60b9      	str	r1, [r7, #8]
1000b2aa:	607a      	str	r2, [r7, #4]
1000b2ac:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
1000b2ae:	68f8      	ldr	r0, [r7, #12]
1000b2b0:	68bb      	ldr	r3, [r7, #8]
1000b2b2:	2b00      	cmp	r3, #0
1000b2b4:	d001      	beq.n	1000b2ba <rpmsg_initialize_ept+0x1a>
1000b2b6:	68bb      	ldr	r3, [r7, #8]
1000b2b8:	e000      	b.n	1000b2bc <rpmsg_initialize_ept+0x1c>
1000b2ba:	4b0a      	ldr	r3, [pc, #40]	; (1000b2e4 <rpmsg_initialize_ept+0x44>)
1000b2bc:	2220      	movs	r2, #32
1000b2be:	4619      	mov	r1, r3
1000b2c0:	f001 fafb 	bl	1000c8ba <strncpy>
	ept->addr = src;
1000b2c4:	68fb      	ldr	r3, [r7, #12]
1000b2c6:	687a      	ldr	r2, [r7, #4]
1000b2c8:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
1000b2ca:	68fb      	ldr	r3, [r7, #12]
1000b2cc:	683a      	ldr	r2, [r7, #0]
1000b2ce:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
1000b2d0:	68fb      	ldr	r3, [r7, #12]
1000b2d2:	69ba      	ldr	r2, [r7, #24]
1000b2d4:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
1000b2d6:	68fb      	ldr	r3, [r7, #12]
1000b2d8:	69fa      	ldr	r2, [r7, #28]
1000b2da:	631a      	str	r2, [r3, #48]	; 0x30
}
1000b2dc:	bf00      	nop
1000b2de:	3710      	adds	r7, #16
1000b2e0:	46bd      	mov	sp, r7
1000b2e2:	bd80      	pop	{r7, pc}
1000b2e4:	1000d9f8 	.word	0x1000d9f8

1000b2e8 <rpmsg_get_ept_from_addr>:
void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
1000b2e8:	b580      	push	{r7, lr}
1000b2ea:	b082      	sub	sp, #8
1000b2ec:	af00      	add	r7, sp, #0
1000b2ee:	6078      	str	r0, [r7, #4]
1000b2f0:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
1000b2f2:	f04f 33ff 	mov.w	r3, #4294967295
1000b2f6:	683a      	ldr	r2, [r7, #0]
1000b2f8:	2100      	movs	r1, #0
1000b2fa:	6878      	ldr	r0, [r7, #4]
1000b2fc:	f7ff fe49 	bl	1000af92 <rpmsg_get_endpoint>
1000b300:	4603      	mov	r3, r0
}
1000b302:	4618      	mov	r0, r3
1000b304:	3708      	adds	r7, #8
1000b306:	46bd      	mov	sp, r7
1000b308:	bd80      	pop	{r7, pc}

1000b30a <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
1000b30a:	b480      	push	{r7}
1000b30c:	b085      	sub	sp, #20
1000b30e:	af00      	add	r7, sp, #0
1000b310:	60f8      	str	r0, [r7, #12]
1000b312:	60b9      	str	r1, [r7, #8]
1000b314:	607a      	str	r2, [r7, #4]
	if (!shpool)
1000b316:	68fb      	ldr	r3, [r7, #12]
1000b318:	2b00      	cmp	r3, #0
1000b31a:	d009      	beq.n	1000b330 <rpmsg_virtio_init_shm_pool+0x26>
		return;
	shpool->base = shb;
1000b31c:	68fb      	ldr	r3, [r7, #12]
1000b31e:	68ba      	ldr	r2, [r7, #8]
1000b320:	601a      	str	r2, [r3, #0]
	shpool->size = size;
1000b322:	68fb      	ldr	r3, [r7, #12]
1000b324:	687a      	ldr	r2, [r7, #4]
1000b326:	609a      	str	r2, [r3, #8]
	shpool->avail = size;
1000b328:	68fb      	ldr	r3, [r7, #12]
1000b32a:	687a      	ldr	r2, [r7, #4]
1000b32c:	605a      	str	r2, [r3, #4]
1000b32e:	e000      	b.n	1000b332 <rpmsg_virtio_init_shm_pool+0x28>
		return;
1000b330:	bf00      	nop
}
1000b332:	3714      	adds	r7, #20
1000b334:	46bd      	mov	sp, r7
1000b336:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b33a:	4770      	bx	lr

1000b33c <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
1000b33c:	b580      	push	{r7, lr}
1000b33e:	b086      	sub	sp, #24
1000b340:	af00      	add	r7, sp, #0
1000b342:	60f8      	str	r0, [r7, #12]
1000b344:	60b9      	str	r1, [r7, #8]
1000b346:	607a      	str	r2, [r7, #4]
1000b348:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000b34a:	68f8      	ldr	r0, [r7, #12]
1000b34c:	f7ff ff50 	bl	1000b1f0 <rpmsg_virtio_get_role>
1000b350:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000b352:	697b      	ldr	r3, [r7, #20]
1000b354:	2b01      	cmp	r3, #1
1000b356:	d106      	bne.n	1000b366 <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
1000b358:	68fb      	ldr	r3, [r7, #12]
1000b35a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1000b35c:	8879      	ldrh	r1, [r7, #2]
1000b35e:	687a      	ldr	r2, [r7, #4]
1000b360:	4618      	mov	r0, r3
1000b362:	f000 fd95 	bl	1000be90 <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
1000b366:	bf00      	nop
1000b368:	3718      	adds	r7, #24
1000b36a:	46bd      	mov	sp, r7
1000b36c:	bd80      	pop	{r7, pc}

1000b36e <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
1000b36e:	b580      	push	{r7, lr}
1000b370:	b086      	sub	sp, #24
1000b372:	af00      	add	r7, sp, #0
1000b374:	60f8      	str	r0, [r7, #12]
1000b376:	60b9      	str	r1, [r7, #8]
1000b378:	607a      	str	r2, [r7, #4]
1000b37a:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000b37c:	68f8      	ldr	r0, [r7, #12]
1000b37e:	f7ff ff37 	bl	1000b1f0 <rpmsg_virtio_get_role>
1000b382:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000b384:	697b      	ldr	r3, [r7, #20]
1000b386:	2b01      	cmp	r3, #1
1000b388:	d109      	bne.n	1000b39e <rpmsg_virtio_enqueue_buffer+0x30>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
1000b38a:	68fb      	ldr	r3, [r7, #12]
1000b38c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000b390:	8879      	ldrh	r1, [r7, #2]
1000b392:	687a      	ldr	r2, [r7, #4]
1000b394:	4618      	mov	r0, r3
1000b396:	f000 fd7b 	bl	1000be90 <virtqueue_add_consumed_buffer>
1000b39a:	4603      	mov	r3, r0
1000b39c:	e000      	b.n	1000b3a0 <rpmsg_virtio_enqueue_buffer+0x32>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
1000b39e:	2300      	movs	r3, #0
}
1000b3a0:	4618      	mov	r0, r3
1000b3a2:	3718      	adds	r7, #24
1000b3a4:	46bd      	mov	sp, r7
1000b3a6:	bd80      	pop	{r7, pc}

1000b3a8 <rpmsg_virtio_get_tx_buffer>:
 *
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
1000b3a8:	b580      	push	{r7, lr}
1000b3aa:	b086      	sub	sp, #24
1000b3ac:	af00      	add	r7, sp, #0
1000b3ae:	60f8      	str	r0, [r7, #12]
1000b3b0:	60b9      	str	r1, [r7, #8]
1000b3b2:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000b3b4:	68f8      	ldr	r0, [r7, #12]
1000b3b6:	f7ff ff1b 	bl	1000b1f0 <rpmsg_virtio_get_role>
1000b3ba:	6138      	str	r0, [r7, #16]
	void *data = NULL;
1000b3bc:	2300      	movs	r3, #0
1000b3be:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000b3c0:	693b      	ldr	r3, [r7, #16]
1000b3c2:	2b01      	cmp	r3, #1
1000b3c4:	d108      	bne.n	1000b3d8 <rpmsg_virtio_get_tx_buffer+0x30>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
1000b3c6:	68fb      	ldr	r3, [r7, #12]
1000b3c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000b3cc:	68ba      	ldr	r2, [r7, #8]
1000b3ce:	6879      	ldr	r1, [r7, #4]
1000b3d0:	4618      	mov	r0, r3
1000b3d2:	f000 fd15 	bl	1000be00 <virtqueue_get_available_buffer>
1000b3d6:	6178      	str	r0, [r7, #20]
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
1000b3d8:	697b      	ldr	r3, [r7, #20]
}
1000b3da:	4618      	mov	r0, r3
1000b3dc:	3718      	adds	r7, #24
1000b3de:	46bd      	mov	sp, r7
1000b3e0:	bd80      	pop	{r7, pc}

1000b3e2 <rpmsg_virtio_get_rx_buffer>:
 * @return - pointer to received buffer
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
1000b3e2:	b580      	push	{r7, lr}
1000b3e4:	b086      	sub	sp, #24
1000b3e6:	af00      	add	r7, sp, #0
1000b3e8:	60f8      	str	r0, [r7, #12]
1000b3ea:	60b9      	str	r1, [r7, #8]
1000b3ec:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000b3ee:	68f8      	ldr	r0, [r7, #12]
1000b3f0:	f7ff fefe 	bl	1000b1f0 <rpmsg_virtio_get_role>
1000b3f4:	6138      	str	r0, [r7, #16]
	void *data = NULL;
1000b3f6:	2300      	movs	r3, #0
1000b3f8:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000b3fa:	693b      	ldr	r3, [r7, #16]
1000b3fc:	2b01      	cmp	r3, #1
1000b3fe:	d107      	bne.n	1000b410 <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
1000b400:	68fb      	ldr	r3, [r7, #12]
1000b402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1000b404:	68ba      	ldr	r2, [r7, #8]
1000b406:	6879      	ldr	r1, [r7, #4]
1000b408:	4618      	mov	r0, r3
1000b40a:	f000 fcf9 	bl	1000be00 <virtqueue_get_available_buffer>
1000b40e:	6178      	str	r0, [r7, #20]
#ifdef VIRTIO_CACHED_BUFFERS
	/* Invalidate the buffer before returning it */
	metal_cache_invalidate(data, *len);
#endif /* VIRTIO_CACHED_BUFFERS */

	return data;
1000b410:	697b      	ldr	r3, [r7, #20]
}
1000b412:	4618      	mov	r0, r3
1000b414:	3718      	adds	r7, #24
1000b416:	46bd      	mov	sp, r7
1000b418:	bd80      	pop	{r7, pc}

1000b41a <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
1000b41a:	b580      	push	{r7, lr}
1000b41c:	b084      	sub	sp, #16
1000b41e:	af00      	add	r7, sp, #0
1000b420:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
1000b422:	6878      	ldr	r0, [r7, #4]
1000b424:	f7ff ff04 	bl	1000b230 <rpmsg_virtio_get_status>
1000b428:	4603      	mov	r3, r0
1000b42a:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
1000b42c:	7bfb      	ldrb	r3, [r7, #15]
1000b42e:	f003 0340 	and.w	r3, r3, #64	; 0x40
1000b432:	2b00      	cmp	r3, #0
1000b434:	d004      	beq.n	1000b440 <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
1000b436:	2100      	movs	r1, #0
1000b438:	6878      	ldr	r0, [r7, #4]
1000b43a:	f7ff fee6 	bl	1000b20a <rpmsg_virtio_set_status>
1000b43e:	e7f0      	b.n	1000b422 <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
1000b440:	7bfb      	ldrb	r3, [r7, #15]
1000b442:	f003 0304 	and.w	r3, r3, #4
1000b446:	2b00      	cmp	r3, #0
1000b448:	d0eb      	beq.n	1000b422 <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
1000b44a:	2301      	movs	r3, #1
		}
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}
}
1000b44c:	4618      	mov	r0, r3
1000b44e:	3710      	adds	r7, #16
1000b450:	46bd      	mov	sp, r7
1000b452:	bd80      	pop	{r7, pc}

1000b454 <rpmsg_virtio_hold_rx_buffer>:

	return length;
}

static void rpmsg_virtio_hold_rx_buffer(struct rpmsg_device *rdev, void *rxbuf)
{
1000b454:	b480      	push	{r7}
1000b456:	b085      	sub	sp, #20
1000b458:	af00      	add	r7, sp, #0
1000b45a:	6078      	str	r0, [r7, #4]
1000b45c:	6039      	str	r1, [r7, #0]
	struct rpmsg_hdr *rp_hdr;

	(void)rdev;

	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
1000b45e:	683b      	ldr	r3, [r7, #0]
1000b460:	3b10      	subs	r3, #16
1000b462:	60fb      	str	r3, [r7, #12]

	/* Set held status to keep buffer */
	rp_hdr->reserved |= RPMSG_BUF_HELD;
1000b464:	68fb      	ldr	r3, [r7, #12]
1000b466:	689b      	ldr	r3, [r3, #8]
1000b468:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
1000b46c:	68fb      	ldr	r3, [r7, #12]
1000b46e:	609a      	str	r2, [r3, #8]
}
1000b470:	bf00      	nop
1000b472:	3714      	adds	r7, #20
1000b474:	46bd      	mov	sp, r7
1000b476:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b47a:	4770      	bx	lr

1000b47c <rpmsg_virtio_release_rx_buffer>:

static void rpmsg_virtio_release_rx_buffer(struct rpmsg_device *rdev,
					   void *rxbuf)
{
1000b47c:	b580      	push	{r7, lr}
1000b47e:	b086      	sub	sp, #24
1000b480:	af00      	add	r7, sp, #0
1000b482:	6078      	str	r0, [r7, #4]
1000b484:	6039      	str	r1, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr *rp_hdr;
	uint16_t idx;
	uint32_t len;

	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000b486:	687b      	ldr	r3, [r7, #4]
1000b488:	617b      	str	r3, [r7, #20]
	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
1000b48a:	683b      	ldr	r3, [r7, #0]
1000b48c:	3b10      	subs	r3, #16
1000b48e:	613b      	str	r3, [r7, #16]
	/* The reserved field contains buffer index */
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
1000b490:	693b      	ldr	r3, [r7, #16]
1000b492:	689b      	ldr	r3, [r3, #8]
1000b494:	81fb      	strh	r3, [r7, #14]

	metal_mutex_acquire(&rdev->lock);
1000b496:	687b      	ldr	r3, [r7, #4]
1000b498:	3358      	adds	r3, #88	; 0x58
1000b49a:	4618      	mov	r0, r3
1000b49c:	f7ff fe92 	bl	1000b1c4 <metal_mutex_acquire>
	/* Return buffer on virtqueue. */
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
1000b4a0:	697b      	ldr	r3, [r7, #20]
1000b4a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1000b4a4:	89fa      	ldrh	r2, [r7, #14]
1000b4a6:	4611      	mov	r1, r2
1000b4a8:	4618      	mov	r0, r3
1000b4aa:	f000 fc97 	bl	1000bddc <virtqueue_get_buffer_length>
1000b4ae:	60b8      	str	r0, [r7, #8]
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
1000b4b0:	89fb      	ldrh	r3, [r7, #14]
1000b4b2:	68ba      	ldr	r2, [r7, #8]
1000b4b4:	6939      	ldr	r1, [r7, #16]
1000b4b6:	6978      	ldr	r0, [r7, #20]
1000b4b8:	f7ff ff40 	bl	1000b33c <rpmsg_virtio_return_buffer>
	metal_mutex_release(&rdev->lock);
1000b4bc:	687b      	ldr	r3, [r7, #4]
1000b4be:	3358      	adds	r3, #88	; 0x58
1000b4c0:	4618      	mov	r0, r3
1000b4c2:	f7ff fe8a 	bl	1000b1da <metal_mutex_release>
}
1000b4c6:	bf00      	nop
1000b4c8:	3718      	adds	r7, #24
1000b4ca:	46bd      	mov	sp, r7
1000b4cc:	bd80      	pop	{r7, pc}

1000b4ce <rpmsg_virtio_get_tx_payload_buffer>:

static void *rpmsg_virtio_get_tx_payload_buffer(struct rpmsg_device *rdev,
						uint32_t *len, int wait)
{
1000b4ce:	b580      	push	{r7, lr}
1000b4d0:	b08a      	sub	sp, #40	; 0x28
1000b4d2:	af00      	add	r7, sp, #0
1000b4d4:	60f8      	str	r0, [r7, #12]
1000b4d6:	60b9      	str	r1, [r7, #8]
1000b4d8:	607a      	str	r2, [r7, #4]
	uint16_t idx;
	int tick_count;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000b4da:	68fb      	ldr	r3, [r7, #12]
1000b4dc:	623b      	str	r3, [r7, #32]

	/* Validate device state */
	status = rpmsg_virtio_get_status(rvdev);
1000b4de:	6a38      	ldr	r0, [r7, #32]
1000b4e0:	f7ff fea6 	bl	1000b230 <rpmsg_virtio_get_status>
1000b4e4:	4603      	mov	r3, r0
1000b4e6:	61fb      	str	r3, [r7, #28]
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
1000b4e8:	69fb      	ldr	r3, [r7, #28]
1000b4ea:	f003 0304 	and.w	r3, r3, #4
1000b4ee:	2b00      	cmp	r3, #0
1000b4f0:	d101      	bne.n	1000b4f6 <rpmsg_virtio_get_tx_payload_buffer+0x28>
		return NULL;
1000b4f2:	2300      	movs	r3, #0
1000b4f4:	e039      	b.n	1000b56a <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	if (wait)
1000b4f6:	687b      	ldr	r3, [r7, #4]
1000b4f8:	2b00      	cmp	r3, #0
1000b4fa:	d003      	beq.n	1000b504 <rpmsg_virtio_get_tx_payload_buffer+0x36>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
1000b4fc:	f643 2398 	movw	r3, #15000	; 0x3a98
1000b500:	627b      	str	r3, [r7, #36]	; 0x24
1000b502:	e001      	b.n	1000b508 <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	else
		tick_count = 0;
1000b504:	2300      	movs	r3, #0
1000b506:	627b      	str	r3, [r7, #36]	; 0x24

	while (1) {
		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
1000b508:	68fb      	ldr	r3, [r7, #12]
1000b50a:	3358      	adds	r3, #88	; 0x58
1000b50c:	4618      	mov	r0, r3
1000b50e:	f7ff fe59 	bl	1000b1c4 <metal_mutex_acquire>
		rp_hdr = rpmsg_virtio_get_tx_buffer(rvdev, len, &idx);
1000b512:	f107 0316 	add.w	r3, r7, #22
1000b516:	461a      	mov	r2, r3
1000b518:	68b9      	ldr	r1, [r7, #8]
1000b51a:	6a38      	ldr	r0, [r7, #32]
1000b51c:	f7ff ff44 	bl	1000b3a8 <rpmsg_virtio_get_tx_buffer>
1000b520:	61b8      	str	r0, [r7, #24]
		metal_mutex_release(&rdev->lock);
1000b522:	68fb      	ldr	r3, [r7, #12]
1000b524:	3358      	adds	r3, #88	; 0x58
1000b526:	4618      	mov	r0, r3
1000b528:	f7ff fe57 	bl	1000b1da <metal_mutex_release>
		if (rp_hdr || !tick_count)
1000b52c:	69bb      	ldr	r3, [r7, #24]
1000b52e:	2b00      	cmp	r3, #0
1000b530:	d10a      	bne.n	1000b548 <rpmsg_virtio_get_tx_payload_buffer+0x7a>
1000b532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b534:	2b00      	cmp	r3, #0
1000b536:	d007      	beq.n	1000b548 <rpmsg_virtio_get_tx_payload_buffer+0x7a>
			break;
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
1000b538:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1000b53c:	f7ff fda7 	bl	1000b08e <metal_sleep_usec>
		tick_count--;
1000b540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b542:	3b01      	subs	r3, #1
1000b544:	627b      	str	r3, [r7, #36]	; 0x24
		metal_mutex_acquire(&rdev->lock);
1000b546:	e7df      	b.n	1000b508 <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	}

	if (!rp_hdr)
1000b548:	69bb      	ldr	r3, [r7, #24]
1000b54a:	2b00      	cmp	r3, #0
1000b54c:	d101      	bne.n	1000b552 <rpmsg_virtio_get_tx_payload_buffer+0x84>
		return NULL;
1000b54e:	2300      	movs	r3, #0
1000b550:	e00b      	b.n	1000b56a <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	/* Store the index into the reserved field to be used when sending */
	rp_hdr->reserved = idx;
1000b552:	8afb      	ldrh	r3, [r7, #22]
1000b554:	461a      	mov	r2, r3
1000b556:	69bb      	ldr	r3, [r7, #24]
1000b558:	609a      	str	r2, [r3, #8]

	/* Actual data buffer size is vring buffer size minus header length */
	*len -= sizeof(struct rpmsg_hdr);
1000b55a:	68bb      	ldr	r3, [r7, #8]
1000b55c:	681b      	ldr	r3, [r3, #0]
1000b55e:	f1a3 0210 	sub.w	r2, r3, #16
1000b562:	68bb      	ldr	r3, [r7, #8]
1000b564:	601a      	str	r2, [r3, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
1000b566:	69bb      	ldr	r3, [r7, #24]
1000b568:	3310      	adds	r3, #16
}
1000b56a:	4618      	mov	r0, r3
1000b56c:	3728      	adds	r7, #40	; 0x28
1000b56e:	46bd      	mov	sp, r7
1000b570:	bd80      	pop	{r7, pc}
	...

1000b574 <rpmsg_virtio_send_offchannel_nocopy>:

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
1000b574:	b580      	push	{r7, lr}
1000b576:	b08e      	sub	sp, #56	; 0x38
1000b578:	af00      	add	r7, sp, #0
1000b57a:	60f8      	str	r0, [r7, #12]
1000b57c:	60b9      	str	r1, [r7, #8]
1000b57e:	607a      	str	r2, [r7, #4]
1000b580:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	uint16_t idx;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000b582:	68fb      	ldr	r3, [r7, #12]
1000b584:	637b      	str	r3, [r7, #52]	; 0x34

	hdr = RPMSG_LOCATE_HDR(data);
1000b586:	683b      	ldr	r3, [r7, #0]
1000b588:	3b10      	subs	r3, #16
1000b58a:	633b      	str	r3, [r7, #48]	; 0x30
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
1000b58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000b58e:	689b      	ldr	r3, [r3, #8]
1000b590:	85fb      	strh	r3, [r7, #46]	; 0x2e

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
1000b592:	687b      	ldr	r3, [r7, #4]
1000b594:	617b      	str	r3, [r7, #20]
	rp_hdr.src = src;
1000b596:	68bb      	ldr	r3, [r7, #8]
1000b598:	613b      	str	r3, [r7, #16]
	rp_hdr.len = len;
1000b59a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000b59c:	b29b      	uxth	r3, r3
1000b59e:	83bb      	strh	r3, [r7, #28]
	rp_hdr.reserved = 0;
1000b5a0:	2300      	movs	r3, #0
1000b5a2:	61bb      	str	r3, [r7, #24]
	rp_hdr.flags = 0;
1000b5a4:	2300      	movs	r3, #0
1000b5a6:	83fb      	strh	r3, [r7, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
1000b5a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000b5aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
1000b5ae:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
1000b5b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
1000b5b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1000b5b4:	f7ff fd87 	bl	1000b0c6 <metal_io_virt_to_offset>
1000b5b8:	4601      	mov	r1, r0
1000b5ba:	f107 0210 	add.w	r2, r7, #16
1000b5be:	2310      	movs	r3, #16
1000b5c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1000b5c2:	f7ff f98b 	bl	1000a8dc <metal_io_block_write>
1000b5c6:	6278      	str	r0, [r7, #36]	; 0x24
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
1000b5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b5ca:	2b10      	cmp	r3, #16
1000b5cc:	d006      	beq.n	1000b5dc <rpmsg_virtio_send_offchannel_nocopy+0x68>
1000b5ce:	4b1b      	ldr	r3, [pc, #108]	; (1000b63c <rpmsg_virtio_send_offchannel_nocopy+0xc8>)
1000b5d0:	4a1b      	ldr	r2, [pc, #108]	; (1000b640 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
1000b5d2:	f240 117d 	movw	r1, #381	; 0x17d
1000b5d6:	481b      	ldr	r0, [pc, #108]	; (1000b644 <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
1000b5d8:	f000 ff44 	bl	1000c464 <__assert_func>

	metal_mutex_acquire(&rdev->lock);
1000b5dc:	68fb      	ldr	r3, [r7, #12]
1000b5de:	3358      	adds	r3, #88	; 0x58
1000b5e0:	4618      	mov	r0, r3
1000b5e2:	f7ff fdef 	bl	1000b1c4 <metal_mutex_acquire>
#ifndef VIRTIO_SLAVE_ONLY
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_MASTER)
		buff_len = RPMSG_BUFFER_SIZE;
	else
#endif /*!VIRTIO_SLAVE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
1000b5e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000b5e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000b5ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
1000b5ee:	4611      	mov	r1, r2
1000b5f0:	4618      	mov	r0, r3
1000b5f2:	f000 fbf3 	bl	1000bddc <virtqueue_get_buffer_length>
1000b5f6:	6238      	str	r0, [r7, #32]

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
1000b5f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
1000b5fa:	6a3a      	ldr	r2, [r7, #32]
1000b5fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
1000b5fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
1000b600:	f7ff feb5 	bl	1000b36e <rpmsg_virtio_enqueue_buffer>
1000b604:	6278      	str	r0, [r7, #36]	; 0x24
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
1000b606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b608:	2b00      	cmp	r3, #0
1000b60a:	d006      	beq.n	1000b61a <rpmsg_virtio_send_offchannel_nocopy+0xa6>
1000b60c:	4b0e      	ldr	r3, [pc, #56]	; (1000b648 <rpmsg_virtio_send_offchannel_nocopy+0xd4>)
1000b60e:	4a0c      	ldr	r2, [pc, #48]	; (1000b640 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
1000b610:	f44f 71c5 	mov.w	r1, #394	; 0x18a
1000b614:	480b      	ldr	r0, [pc, #44]	; (1000b644 <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
1000b616:	f000 ff25 	bl	1000c464 <__assert_func>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
1000b61a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000b61c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000b620:	4618      	mov	r0, r3
1000b622:	f000 fcaf 	bl	1000bf84 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
1000b626:	68fb      	ldr	r3, [r7, #12]
1000b628:	3358      	adds	r3, #88	; 0x58
1000b62a:	4618      	mov	r0, r3
1000b62c:	f7ff fdd5 	bl	1000b1da <metal_mutex_release>

	return len;
1000b630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
1000b632:	4618      	mov	r0, r3
1000b634:	3738      	adds	r7, #56	; 0x38
1000b636:	46bd      	mov	sp, r7
1000b638:	bd80      	pop	{r7, pc}
1000b63a:	bf00      	nop
1000b63c:	1000d9fc 	.word	0x1000d9fc
1000b640:	1000db50 	.word	0x1000db50
1000b644:	1000da18 	.word	0x1000da18
1000b648:	1000da9c 	.word	0x1000da9c

1000b64c <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
1000b64c:	b580      	push	{r7, lr}
1000b64e:	b08c      	sub	sp, #48	; 0x30
1000b650:	af02      	add	r7, sp, #8
1000b652:	60f8      	str	r0, [r7, #12]
1000b654:	60b9      	str	r1, [r7, #8]
1000b656:	607a      	str	r2, [r7, #4]
1000b658:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	void *buffer;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000b65a:	68fb      	ldr	r3, [r7, #12]
1000b65c:	627b      	str	r3, [r7, #36]	; 0x24

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
1000b65e:	f107 0314 	add.w	r3, r7, #20
1000b662:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000b664:	4619      	mov	r1, r3
1000b666:	68f8      	ldr	r0, [r7, #12]
1000b668:	f7ff ff31 	bl	1000b4ce <rpmsg_virtio_get_tx_payload_buffer>
1000b66c:	6238      	str	r0, [r7, #32]
	if (!buffer)
1000b66e:	6a3b      	ldr	r3, [r7, #32]
1000b670:	2b00      	cmp	r3, #0
1000b672:	d101      	bne.n	1000b678 <rpmsg_virtio_send_offchannel_raw+0x2c>
		return RPMSG_ERR_NO_BUFF;
1000b674:	4b17      	ldr	r3, [pc, #92]	; (1000b6d4 <rpmsg_virtio_send_offchannel_raw+0x88>)
1000b676:	e029      	b.n	1000b6cc <rpmsg_virtio_send_offchannel_raw+0x80>

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
1000b678:	697b      	ldr	r3, [r7, #20]
1000b67a:	461a      	mov	r2, r3
1000b67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000b67e:	4293      	cmp	r3, r2
1000b680:	dd01      	ble.n	1000b686 <rpmsg_virtio_send_offchannel_raw+0x3a>
		len = buff_len;
1000b682:	697b      	ldr	r3, [r7, #20]
1000b684:	633b      	str	r3, [r7, #48]	; 0x30
	io = rvdev->shbuf_io;
1000b686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
1000b68c:	61fb      	str	r3, [r7, #28]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
1000b68e:	6a39      	ldr	r1, [r7, #32]
1000b690:	69f8      	ldr	r0, [r7, #28]
1000b692:	f7ff fd18 	bl	1000b0c6 <metal_io_virt_to_offset>
1000b696:	4601      	mov	r1, r0
1000b698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000b69a:	683a      	ldr	r2, [r7, #0]
1000b69c:	69f8      	ldr	r0, [r7, #28]
1000b69e:	f7ff f91d 	bl	1000a8dc <metal_io_block_write>
1000b6a2:	61b8      	str	r0, [r7, #24]
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
1000b6a4:	69ba      	ldr	r2, [r7, #24]
1000b6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000b6a8:	429a      	cmp	r2, r3
1000b6aa:	d006      	beq.n	1000b6ba <rpmsg_virtio_send_offchannel_raw+0x6e>
1000b6ac:	4b0a      	ldr	r3, [pc, #40]	; (1000b6d8 <rpmsg_virtio_send_offchannel_raw+0x8c>)
1000b6ae:	4a0b      	ldr	r2, [pc, #44]	; (1000b6dc <rpmsg_virtio_send_offchannel_raw+0x90>)
1000b6b0:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
1000b6b4:	480a      	ldr	r0, [pc, #40]	; (1000b6e0 <rpmsg_virtio_send_offchannel_raw+0x94>)
1000b6b6:	f000 fed5 	bl	1000c464 <__assert_func>

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
1000b6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000b6bc:	9300      	str	r3, [sp, #0]
1000b6be:	6a3b      	ldr	r3, [r7, #32]
1000b6c0:	687a      	ldr	r2, [r7, #4]
1000b6c2:	68b9      	ldr	r1, [r7, #8]
1000b6c4:	68f8      	ldr	r0, [r7, #12]
1000b6c6:	f7ff ff55 	bl	1000b574 <rpmsg_virtio_send_offchannel_nocopy>
1000b6ca:	4603      	mov	r3, r0
}
1000b6cc:	4618      	mov	r0, r3
1000b6ce:	3728      	adds	r7, #40	; 0x28
1000b6d0:	46bd      	mov	sp, r7
1000b6d2:	bd80      	pop	{r7, pc}
1000b6d4:	fffff82e 	.word	0xfffff82e
1000b6d8:	1000daa8 	.word	0x1000daa8
1000b6dc:	1000db74 	.word	0x1000db74
1000b6e0:	1000da18 	.word	0x1000da18

1000b6e4 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
1000b6e4:	b480      	push	{r7}
1000b6e6:	b083      	sub	sp, #12
1000b6e8:	af00      	add	r7, sp, #0
1000b6ea:	6078      	str	r0, [r7, #4]
	(void)vq;
}
1000b6ec:	bf00      	nop
1000b6ee:	370c      	adds	r7, #12
1000b6f0:	46bd      	mov	sp, r7
1000b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b6f6:	4770      	bx	lr

1000b6f8 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
1000b6f8:	b590      	push	{r4, r7, lr}
1000b6fa:	b08d      	sub	sp, #52	; 0x34
1000b6fc:	af02      	add	r7, sp, #8
1000b6fe:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
1000b700:	687b      	ldr	r3, [r7, #4]
1000b702:	681b      	ldr	r3, [r3, #0]
1000b704:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
1000b706:	6a3b      	ldr	r3, [r7, #32]
1000b708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000b70a:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
1000b70c:	69fb      	ldr	r3, [r7, #28]
1000b70e:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
1000b710:	69bb      	ldr	r3, [r7, #24]
1000b712:	3358      	adds	r3, #88	; 0x58
1000b714:	4618      	mov	r0, r3
1000b716:	f7ff fd55 	bl	1000b1c4 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
1000b71a:	f107 020a 	add.w	r2, r7, #10
1000b71e:	f107 030c 	add.w	r3, r7, #12
1000b722:	4619      	mov	r1, r3
1000b724:	69f8      	ldr	r0, [r7, #28]
1000b726:	f7ff fe5c 	bl	1000b3e2 <rpmsg_virtio_get_rx_buffer>
1000b72a:	6278      	str	r0, [r7, #36]	; 0x24

	metal_mutex_release(&rdev->lock);
1000b72c:	69bb      	ldr	r3, [r7, #24]
1000b72e:	3358      	adds	r3, #88	; 0x58
1000b730:	4618      	mov	r0, r3
1000b732:	f7ff fd52 	bl	1000b1da <metal_mutex_release>

	while (rp_hdr) {
1000b736:	e062      	b.n	1000b7fe <rpmsg_virtio_rx_callback+0x106>
		rp_hdr->reserved = idx;
1000b738:	897b      	ldrh	r3, [r7, #10]
1000b73a:	461a      	mov	r2, r3
1000b73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b73e:	609a      	str	r2, [r3, #8]

		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
1000b740:	69bb      	ldr	r3, [r7, #24]
1000b742:	3358      	adds	r3, #88	; 0x58
1000b744:	4618      	mov	r0, r3
1000b746:	f7ff fd3d 	bl	1000b1c4 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
1000b74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b74c:	685b      	ldr	r3, [r3, #4]
1000b74e:	4619      	mov	r1, r3
1000b750:	69b8      	ldr	r0, [r7, #24]
1000b752:	f7ff fdc9 	bl	1000b2e8 <rpmsg_get_ept_from_addr>
1000b756:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
1000b758:	69bb      	ldr	r3, [r7, #24]
1000b75a:	3358      	adds	r3, #88	; 0x58
1000b75c:	4618      	mov	r0, r3
1000b75e:	f7ff fd3c 	bl	1000b1da <metal_mutex_release>

		if (ept) {
1000b762:	697b      	ldr	r3, [r7, #20]
1000b764:	2b00      	cmp	r3, #0
1000b766:	d025      	beq.n	1000b7b4 <rpmsg_virtio_rx_callback+0xbc>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
1000b768:	697b      	ldr	r3, [r7, #20]
1000b76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000b76c:	f1b3 3fff 	cmp.w	r3, #4294967295
1000b770:	d103      	bne.n	1000b77a <rpmsg_virtio_rx_callback+0x82>
				/*
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
1000b772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b774:	681a      	ldr	r2, [r3, #0]
1000b776:	697b      	ldr	r3, [r7, #20]
1000b778:	629a      	str	r2, [r3, #40]	; 0x28
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
1000b77a:	697b      	ldr	r3, [r7, #20]
1000b77c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
1000b77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b780:	f103 0110 	add.w	r1, r3, #16
					 rp_hdr->len, rp_hdr->src, ept->priv);
1000b784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b786:	899b      	ldrh	r3, [r3, #12]
1000b788:	b29b      	uxth	r3, r3
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
1000b78a:	4618      	mov	r0, r3
1000b78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b78e:	681a      	ldr	r2, [r3, #0]
1000b790:	697b      	ldr	r3, [r7, #20]
1000b792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000b794:	9300      	str	r3, [sp, #0]
1000b796:	4613      	mov	r3, r2
1000b798:	4602      	mov	r2, r0
1000b79a:	6978      	ldr	r0, [r7, #20]
1000b79c:	47a0      	blx	r4
1000b79e:	6138      	str	r0, [r7, #16]

			RPMSG_ASSERT(status >= 0,
1000b7a0:	693b      	ldr	r3, [r7, #16]
1000b7a2:	2b00      	cmp	r3, #0
1000b7a4:	da06      	bge.n	1000b7b4 <rpmsg_virtio_rx_callback+0xbc>
1000b7a6:	4b1a      	ldr	r3, [pc, #104]	; (1000b810 <rpmsg_virtio_rx_callback+0x118>)
1000b7a8:	4a1a      	ldr	r2, [pc, #104]	; (1000b814 <rpmsg_virtio_rx_callback+0x11c>)
1000b7aa:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
1000b7ae:	481a      	ldr	r0, [pc, #104]	; (1000b818 <rpmsg_virtio_rx_callback+0x120>)
1000b7b0:	f000 fe58 	bl	1000c464 <__assert_func>
				     "unexpected callback status\r\n");
		}

		metal_mutex_acquire(&rdev->lock);
1000b7b4:	69bb      	ldr	r3, [r7, #24]
1000b7b6:	3358      	adds	r3, #88	; 0x58
1000b7b8:	4618      	mov	r0, r3
1000b7ba:	f7ff fd03 	bl	1000b1c4 <metal_mutex_acquire>

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
1000b7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b7c0:	689b      	ldr	r3, [r3, #8]
1000b7c2:	2b00      	cmp	r3, #0
1000b7c4:	db05      	blt.n	1000b7d2 <rpmsg_virtio_rx_callback+0xda>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
1000b7c6:	68fa      	ldr	r2, [r7, #12]
1000b7c8:	897b      	ldrh	r3, [r7, #10]
1000b7ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
1000b7cc:	69f8      	ldr	r0, [r7, #28]
1000b7ce:	f7ff fdb5 	bl	1000b33c <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
1000b7d2:	f107 020a 	add.w	r2, r7, #10
1000b7d6:	f107 030c 	add.w	r3, r7, #12
1000b7da:	4619      	mov	r1, r3
1000b7dc:	69f8      	ldr	r0, [r7, #28]
1000b7de:	f7ff fe00 	bl	1000b3e2 <rpmsg_virtio_get_rx_buffer>
1000b7e2:	6278      	str	r0, [r7, #36]	; 0x24
		if (!rp_hdr) {
1000b7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b7e6:	2b00      	cmp	r3, #0
1000b7e8:	d104      	bne.n	1000b7f4 <rpmsg_virtio_rx_callback+0xfc>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
1000b7ea:	69fb      	ldr	r3, [r7, #28]
1000b7ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1000b7ee:	4618      	mov	r0, r3
1000b7f0:	f000 fbc8 	bl	1000bf84 <virtqueue_kick>
		}
		metal_mutex_release(&rdev->lock);
1000b7f4:	69bb      	ldr	r3, [r7, #24]
1000b7f6:	3358      	adds	r3, #88	; 0x58
1000b7f8:	4618      	mov	r0, r3
1000b7fa:	f7ff fcee 	bl	1000b1da <metal_mutex_release>
	while (rp_hdr) {
1000b7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b800:	2b00      	cmp	r3, #0
1000b802:	d199      	bne.n	1000b738 <rpmsg_virtio_rx_callback+0x40>
	}
}
1000b804:	bf00      	nop
1000b806:	bf00      	nop
1000b808:	372c      	adds	r7, #44	; 0x2c
1000b80a:	46bd      	mov	sp, r7
1000b80c:	bd90      	pop	{r4, r7, pc}
1000b80e:	bf00      	nop
1000b810:	1000dab8 	.word	0x1000dab8
1000b814:	1000db98 	.word	0x1000db98
1000b818:	1000da18 	.word	0x1000da18

1000b81c <rpmsg_virtio_ns_callback>:
 *
 * @return - rpmag endpoint callback handled
 */
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
1000b81c:	b580      	push	{r7, lr}
1000b81e:	b092      	sub	sp, #72	; 0x48
1000b820:	af00      	add	r7, sp, #0
1000b822:	60f8      	str	r0, [r7, #12]
1000b824:	60b9      	str	r1, [r7, #8]
1000b826:	607a      	str	r2, [r7, #4]
1000b828:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
1000b82a:	68fb      	ldr	r3, [r7, #12]
1000b82c:	6a1b      	ldr	r3, [r3, #32]
1000b82e:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
1000b830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000b832:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
1000b834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000b836:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
1000b83a:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = data;
1000b83c:	68bb      	ldr	r3, [r7, #8]
1000b83e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
1000b840:	687b      	ldr	r3, [r7, #4]
1000b842:	2b28      	cmp	r3, #40	; 0x28
1000b844:	d001      	beq.n	1000b84a <rpmsg_virtio_ns_callback+0x2e>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
1000b846:	2300      	movs	r3, #0
1000b848:	e057      	b.n	1000b8fa <rpmsg_virtio_ns_callback+0xde>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
1000b84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
1000b84c:	4619      	mov	r1, r3
1000b84e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
1000b850:	f7ff fc39 	bl	1000b0c6 <metal_io_virt_to_offset>
1000b854:	4601      	mov	r1, r0
1000b856:	f107 0210 	add.w	r2, r7, #16
1000b85a:	2320      	movs	r3, #32
1000b85c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
1000b85e:	f7fe ffc8 	bl	1000a7f2 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
1000b862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000b864:	6a1b      	ldr	r3, [r3, #32]
1000b866:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
1000b868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000b86a:	3358      	adds	r3, #88	; 0x58
1000b86c:	4618      	mov	r0, r3
1000b86e:	f7ff fca9 	bl	1000b1c4 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
1000b872:	f107 0110 	add.w	r1, r7, #16
1000b876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000b878:	f04f 32ff 	mov.w	r2, #4294967295
1000b87c:	6c78      	ldr	r0, [r7, #68]	; 0x44
1000b87e:	f7ff fb88 	bl	1000af92 <rpmsg_get_endpoint>
1000b882:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
1000b884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000b886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000b888:	f003 0301 	and.w	r3, r3, #1
1000b88c:	2b00      	cmp	r3, #0
1000b88e:	d017      	beq.n	1000b8c0 <rpmsg_virtio_ns_callback+0xa4>
		if (_ept)
1000b890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000b892:	2b00      	cmp	r3, #0
1000b894:	d003      	beq.n	1000b89e <rpmsg_virtio_ns_callback+0x82>
			_ept->dest_addr = RPMSG_ADDR_ANY;
1000b896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000b898:	f04f 32ff 	mov.w	r2, #4294967295
1000b89c:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
1000b89e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000b8a0:	3358      	adds	r3, #88	; 0x58
1000b8a2:	4618      	mov	r0, r3
1000b8a4:	f7ff fc99 	bl	1000b1da <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
1000b8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000b8aa:	2b00      	cmp	r3, #0
1000b8ac:	d024      	beq.n	1000b8f8 <rpmsg_virtio_ns_callback+0xdc>
1000b8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000b8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000b8b2:	2b00      	cmp	r3, #0
1000b8b4:	d020      	beq.n	1000b8f8 <rpmsg_virtio_ns_callback+0xdc>
			_ept->ns_unbind_cb(_ept);
1000b8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000b8b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000b8ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
1000b8bc:	4798      	blx	r3
1000b8be:	e01b      	b.n	1000b8f8 <rpmsg_virtio_ns_callback+0xdc>
	} else {
		if (!_ept) {
1000b8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000b8c2:	2b00      	cmp	r3, #0
1000b8c4:	d110      	bne.n	1000b8e8 <rpmsg_virtio_ns_callback+0xcc>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
1000b8c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000b8c8:	3358      	adds	r3, #88	; 0x58
1000b8ca:	4618      	mov	r0, r3
1000b8cc:	f7ff fc85 	bl	1000b1da <metal_mutex_release>
			if (rdev->ns_bind_cb)
1000b8d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000b8d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
1000b8d4:	2b00      	cmp	r3, #0
1000b8d6:	d00f      	beq.n	1000b8f8 <rpmsg_virtio_ns_callback+0xdc>
				rdev->ns_bind_cb(rdev, name, dest);
1000b8d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000b8da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
1000b8dc:	f107 0110 	add.w	r1, r7, #16
1000b8e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000b8e2:	6c78      	ldr	r0, [r7, #68]	; 0x44
1000b8e4:	4798      	blx	r3
1000b8e6:	e007      	b.n	1000b8f8 <rpmsg_virtio_ns_callback+0xdc>
		} else {
			_ept->dest_addr = dest;
1000b8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000b8ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000b8ec:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
1000b8ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000b8f0:	3358      	adds	r3, #88	; 0x58
1000b8f2:	4618      	mov	r0, r3
1000b8f4:	f7ff fc71 	bl	1000b1da <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
1000b8f8:	2300      	movs	r3, #0
}
1000b8fa:	4618      	mov	r0, r3
1000b8fc:	3748      	adds	r7, #72	; 0x48
1000b8fe:	46bd      	mov	sp, r7
1000b900:	bd80      	pop	{r7, pc}
	...

1000b904 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
1000b904:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
1000b908:	b090      	sub	sp, #64	; 0x40
1000b90a:	af02      	add	r7, sp, #8
1000b90c:	60f8      	str	r0, [r7, #12]
1000b90e:	60b9      	str	r1, [r7, #8]
1000b910:	607a      	str	r2, [r7, #4]
1000b912:	603b      	str	r3, [r7, #0]
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
1000b914:	68fb      	ldr	r3, [r7, #12]
1000b916:	633b      	str	r3, [r7, #48]	; 0x30
	memset(rdev, 0, sizeof(*rdev));
1000b918:	2278      	movs	r2, #120	; 0x78
1000b91a:	2100      	movs	r1, #0
1000b91c:	6b38      	ldr	r0, [r7, #48]	; 0x30
1000b91e:	f000 ffb2 	bl	1000c886 <memset>
	metal_mutex_init(&rdev->lock);
1000b922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000b924:	3358      	adds	r3, #88	; 0x58
1000b926:	4618      	mov	r0, r3
1000b928:	f7ff fc41 	bl	1000b1ae <metal_mutex_init>
	rvdev->vdev = vdev;
1000b92c:	68fb      	ldr	r3, [r7, #12]
1000b92e:	68ba      	ldr	r2, [r7, #8]
1000b930:	679a      	str	r2, [r3, #120]	; 0x78
	rdev->ns_bind_cb = ns_bind_cb;
1000b932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000b934:	687a      	ldr	r2, [r7, #4]
1000b936:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
1000b938:	68bb      	ldr	r3, [r7, #8]
1000b93a:	68fa      	ldr	r2, [r7, #12]
1000b93c:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
1000b93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000b940:	4a4d      	ldr	r2, [pc, #308]	; (1000ba78 <rpmsg_init_vdev+0x174>)
1000b942:	661a      	str	r2, [r3, #96]	; 0x60
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
1000b944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000b946:	4a4d      	ldr	r2, [pc, #308]	; (1000ba7c <rpmsg_init_vdev+0x178>)
1000b948:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
1000b94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000b94c:	4a4c      	ldr	r2, [pc, #304]	; (1000ba80 <rpmsg_init_vdev+0x17c>)
1000b94e:	669a      	str	r2, [r3, #104]	; 0x68
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
1000b950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000b952:	4a4c      	ldr	r2, [pc, #304]	; (1000ba84 <rpmsg_init_vdev+0x180>)
1000b954:	66da      	str	r2, [r3, #108]	; 0x6c
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
1000b956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000b958:	4a4b      	ldr	r2, [pc, #300]	; (1000ba88 <rpmsg_init_vdev+0x184>)
1000b95a:	671a      	str	r2, [r3, #112]	; 0x70
	role = rpmsg_virtio_get_role(rvdev);
1000b95c:	68f8      	ldr	r0, [r7, #12]
1000b95e:	f7ff fc47 	bl	1000b1f0 <rpmsg_virtio_get_role>
1000b962:	62f8      	str	r0, [r7, #44]	; 0x2c

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000b964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000b966:	2b01      	cmp	r3, #1
1000b968:	d102      	bne.n	1000b970 <rpmsg_init_vdev+0x6c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
1000b96a:	68f8      	ldr	r0, [r7, #12]
1000b96c:	f7ff fd55 	bl	1000b41a <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
1000b970:	68f8      	ldr	r0, [r7, #12]
1000b972:	f7ff fc6e 	bl	1000b252 <rpmsg_virtio_get_features>
1000b976:	4603      	mov	r3, r0
1000b978:	2200      	movs	r2, #0
1000b97a:	4698      	mov	r8, r3
1000b97c:	4691      	mov	r9, r2
1000b97e:	68bb      	ldr	r3, [r7, #8]
1000b980:	e9c3 8904 	strd	r8, r9, [r3, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
1000b984:	68bb      	ldr	r3, [r7, #8]
1000b986:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
1000b98a:	f002 0401 	and.w	r4, r2, #1
1000b98e:	2500      	movs	r5, #0
1000b990:	ea44 0305 	orr.w	r3, r4, r5
1000b994:	2b00      	cmp	r3, #0
1000b996:	bf14      	ite	ne
1000b998:	2301      	movne	r3, #1
1000b99a:	2300      	moveq	r3, #0
1000b99c:	b2da      	uxtb	r2, r3
1000b99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000b9a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
1000b9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000b9a6:	2b01      	cmp	r3, #1
1000b9a8:	d113      	bne.n	1000b9d2 <rpmsg_init_vdev+0xce>
		vq_names[0] = "tx_vq";
1000b9aa:	4b38      	ldr	r3, [pc, #224]	; (1000ba8c <rpmsg_init_vdev+0x188>)
1000b9ac:	61fb      	str	r3, [r7, #28]
		vq_names[1] = "rx_vq";
1000b9ae:	4b38      	ldr	r3, [pc, #224]	; (1000ba90 <rpmsg_init_vdev+0x18c>)
1000b9b0:	623b      	str	r3, [r7, #32]
		callback[0] = rpmsg_virtio_tx_callback;
1000b9b2:	4b38      	ldr	r3, [pc, #224]	; (1000ba94 <rpmsg_init_vdev+0x190>)
1000b9b4:	617b      	str	r3, [r7, #20]
		callback[1] = rpmsg_virtio_rx_callback;
1000b9b6:	4b38      	ldr	r3, [pc, #224]	; (1000ba98 <rpmsg_init_vdev+0x194>)
1000b9b8:	61bb      	str	r3, [r7, #24]
		rvdev->rvq  = vdev->vrings_info[1].vq;
1000b9ba:	68bb      	ldr	r3, [r7, #8]
1000b9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000b9be:	3318      	adds	r3, #24
1000b9c0:	681a      	ldr	r2, [r3, #0]
1000b9c2:	68fb      	ldr	r3, [r7, #12]
1000b9c4:	67da      	str	r2, [r3, #124]	; 0x7c
		rvdev->svq  = vdev->vrings_info[0].vq;
1000b9c6:	68bb      	ldr	r3, [r7, #8]
1000b9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000b9ca:	681a      	ldr	r2, [r3, #0]
1000b9cc:	68fb      	ldr	r3, [r7, #12]
1000b9ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
1000b9d2:	68fb      	ldr	r3, [r7, #12]
1000b9d4:	683a      	ldr	r2, [r7, #0]
1000b9d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
1000b9da:	f107 021c 	add.w	r2, r7, #28
1000b9de:	f107 0314 	add.w	r3, r7, #20
1000b9e2:	9300      	str	r3, [sp, #0]
1000b9e4:	4613      	mov	r3, r2
1000b9e6:	2202      	movs	r2, #2
1000b9e8:	2100      	movs	r1, #0
1000b9ea:	68f8      	ldr	r0, [r7, #12]
1000b9ec:	f7ff fc42 	bl	1000b274 <rpmsg_virtio_create_virtqueues>
1000b9f0:	62b8      	str	r0, [r7, #40]	; 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
1000b9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000b9f4:	2b00      	cmp	r3, #0
1000b9f6:	d001      	beq.n	1000b9fc <rpmsg_init_vdev+0xf8>
		return status;
1000b9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000b9fa:	e037      	b.n	1000ba6c <rpmsg_init_vdev+0x168>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
1000b9fc:	68fb      	ldr	r3, [r7, #12]
1000b9fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000ba02:	4618      	mov	r0, r3
1000ba04:	f000 fa86 	bl	1000bf14 <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
1000ba08:	2300      	movs	r3, #0
1000ba0a:	637b      	str	r3, [r7, #52]	; 0x34
1000ba0c:	e00f      	b.n	1000ba2e <rpmsg_init_vdev+0x12a>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
1000ba0e:	68bb      	ldr	r3, [r7, #8]
1000ba10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1000ba12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000ba14:	4613      	mov	r3, r2
1000ba16:	005b      	lsls	r3, r3, #1
1000ba18:	4413      	add	r3, r2
1000ba1a:	00db      	lsls	r3, r3, #3
1000ba1c:	440b      	add	r3, r1
1000ba1e:	681b      	ldr	r3, [r3, #0]
1000ba20:	627b      	str	r3, [r7, #36]	; 0x24
		vq->shm_io = shm_io;
1000ba22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000ba24:	683a      	ldr	r2, [r7, #0]
1000ba26:	629a      	str	r2, [r3, #40]	; 0x28
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
1000ba28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000ba2a:	3301      	adds	r3, #1
1000ba2c:	637b      	str	r3, [r7, #52]	; 0x34
1000ba2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000ba30:	2b01      	cmp	r3, #1
1000ba32:	d9ec      	bls.n	1000ba0e <rpmsg_init_vdev+0x10a>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
1000ba34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000ba36:	4618      	mov	r0, r3
1000ba38:	f7ff fb35 	bl	1000b0a6 <metal_list_init>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
1000ba3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000ba3e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
1000ba42:	2b00      	cmp	r3, #0
1000ba44:	d011      	beq.n	1000ba6a <rpmsg_init_vdev+0x166>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
1000ba46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000ba48:	f103 0008 	add.w	r0, r3, #8
1000ba4c:	2300      	movs	r3, #0
1000ba4e:	9301      	str	r3, [sp, #4]
1000ba50:	4b12      	ldr	r3, [pc, #72]	; (1000ba9c <rpmsg_init_vdev+0x198>)
1000ba52:	9300      	str	r3, [sp, #0]
1000ba54:	2335      	movs	r3, #53	; 0x35
1000ba56:	2235      	movs	r2, #53	; 0x35
1000ba58:	4911      	ldr	r1, [pc, #68]	; (1000baa0 <rpmsg_init_vdev+0x19c>)
1000ba5a:	f7ff fc21 	bl	1000b2a0 <rpmsg_initialize_ept>
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
1000ba5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000ba60:	3308      	adds	r3, #8
1000ba62:	4619      	mov	r1, r3
1000ba64:	6b38      	ldr	r0, [r7, #48]	; 0x30
1000ba66:	f7ff faf4 	bl	1000b052 <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
1000ba6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
1000ba6c:	4618      	mov	r0, r3
1000ba6e:	3738      	adds	r7, #56	; 0x38
1000ba70:	46bd      	mov	sp, r7
1000ba72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
1000ba76:	bf00      	nop
1000ba78:	1000b64d 	.word	0x1000b64d
1000ba7c:	1000b455 	.word	0x1000b455
1000ba80:	1000b47d 	.word	0x1000b47d
1000ba84:	1000b4cf 	.word	0x1000b4cf
1000ba88:	1000b575 	.word	0x1000b575
1000ba8c:	1000dac4 	.word	0x1000dac4
1000ba90:	1000dacc 	.word	0x1000dacc
1000ba94:	1000b6e5 	.word	0x1000b6e5
1000ba98:	1000b6f9 	.word	0x1000b6f9
1000ba9c:	1000b81d 	.word	0x1000b81d
1000baa0:	1000dad4 	.word	0x1000dad4

1000baa4 <metal_machine_cache_flush>:

	/* Add implementation here */
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
1000baa4:	b480      	push	{r7}
1000baa6:	b083      	sub	sp, #12
1000baa8:	af00      	add	r7, sp, #0
1000baaa:	6078      	str	r0, [r7, #4]
1000baac:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
1000baae:	bf00      	nop
1000bab0:	370c      	adds	r7, #12
1000bab2:	46bd      	mov	sp, r7
1000bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bab8:	4770      	bx	lr

1000baba <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
1000baba:	b480      	push	{r7}
1000babc:	b083      	sub	sp, #12
1000babe:	af00      	add	r7, sp, #0
1000bac0:	6078      	str	r0, [r7, #4]
1000bac2:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
1000bac4:	bf00      	nop
1000bac6:	370c      	adds	r7, #12
1000bac8:	46bd      	mov	sp, r7
1000baca:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bace:	4770      	bx	lr

1000bad0 <metal_machine_io_mem_map>:
	/* Add implementation here */
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
1000bad0:	b480      	push	{r7}
1000bad2:	b085      	sub	sp, #20
1000bad4:	af00      	add	r7, sp, #0
1000bad6:	60f8      	str	r0, [r7, #12]
1000bad8:	60b9      	str	r1, [r7, #8]
1000bada:	607a      	str	r2, [r7, #4]
1000badc:	603b      	str	r3, [r7, #0]
	metal_unused(size);
	metal_unused(flags);

	/* Add implementation here */

	return va;
1000bade:	68fb      	ldr	r3, [r7, #12]
}
1000bae0:	4618      	mov	r0, r3
1000bae2:	3714      	adds	r7, #20
1000bae4:	46bd      	mov	sp, r7
1000bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
1000baea:	4770      	bx	lr

1000baec <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
1000baec:	b590      	push	{r4, r7, lr}
1000baee:	b08f      	sub	sp, #60	; 0x3c
1000baf0:	af04      	add	r7, sp, #16
1000baf2:	60f8      	str	r0, [r7, #12]
1000baf4:	60b9      	str	r1, [r7, #8]
1000baf6:	607a      	str	r2, [r7, #4]
1000baf8:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
1000bafa:	68fb      	ldr	r3, [r7, #12]
1000bafc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000bafe:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
1000bb00:	687a      	ldr	r2, [r7, #4]
1000bb02:	6a3b      	ldr	r3, [r7, #32]
1000bb04:	429a      	cmp	r2, r3
1000bb06:	d901      	bls.n	1000bb0c <virtio_create_virtqueues+0x20>
		return ERROR_VQUEUE_INVLD_PARAM;
1000bb08:	4b1e      	ldr	r3, [pc, #120]	; (1000bb84 <virtio_create_virtqueues+0x98>)
1000bb0a:	e036      	b.n	1000bb7a <virtio_create_virtqueues+0x8e>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
1000bb0c:	2300      	movs	r3, #0
1000bb0e:	627b      	str	r3, [r7, #36]	; 0x24
1000bb10:	e02e      	b.n	1000bb70 <virtio_create_virtqueues+0x84>
		vring_info = &vdev->vrings_info[i];
1000bb12:	68fb      	ldr	r3, [r7, #12]
1000bb14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1000bb16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000bb18:	4613      	mov	r3, r2
1000bb1a:	005b      	lsls	r3, r3, #1
1000bb1c:	4413      	add	r3, r2
1000bb1e:	00db      	lsls	r3, r3, #3
1000bb20:	440b      	add	r3, r1
1000bb22:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
1000bb24:	69fb      	ldr	r3, [r7, #28]
1000bb26:	3304      	adds	r3, #4
1000bb28:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
1000bb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bb2c:	b298      	uxth	r0, r3
1000bb2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bb30:	009b      	lsls	r3, r3, #2
1000bb32:	683a      	ldr	r2, [r7, #0]
1000bb34:	4413      	add	r3, r2
1000bb36:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
1000bb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bb3a:	009b      	lsls	r3, r3, #2
1000bb3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
1000bb3e:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
1000bb40:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
1000bb42:	68fa      	ldr	r2, [r7, #12]
1000bb44:	6a12      	ldr	r2, [r2, #32]
1000bb46:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
1000bb48:	69f9      	ldr	r1, [r7, #28]
1000bb4a:	6809      	ldr	r1, [r1, #0]
1000bb4c:	9102      	str	r1, [sp, #8]
1000bb4e:	9201      	str	r2, [sp, #4]
1000bb50:	9300      	str	r3, [sp, #0]
1000bb52:	69bb      	ldr	r3, [r7, #24]
1000bb54:	4622      	mov	r2, r4
1000bb56:	4601      	mov	r1, r0
1000bb58:	68f8      	ldr	r0, [r7, #12]
1000bb5a:	f000 f90e 	bl	1000bd7a <virtqueue_create>
1000bb5e:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
1000bb60:	697b      	ldr	r3, [r7, #20]
1000bb62:	2b00      	cmp	r3, #0
1000bb64:	d001      	beq.n	1000bb6a <virtio_create_virtqueues+0x7e>
			return ret;
1000bb66:	697b      	ldr	r3, [r7, #20]
1000bb68:	e007      	b.n	1000bb7a <virtio_create_virtqueues+0x8e>
	for (i = 0; i < nvqs; i++) {
1000bb6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bb6c:	3301      	adds	r3, #1
1000bb6e:	627b      	str	r3, [r7, #36]	; 0x24
1000bb70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000bb72:	687b      	ldr	r3, [r7, #4]
1000bb74:	429a      	cmp	r2, r3
1000bb76:	d3cc      	bcc.n	1000bb12 <virtio_create_virtqueues+0x26>
	}
	return 0;
1000bb78:	2300      	movs	r3, #0
}
1000bb7a:	4618      	mov	r0, r3
1000bb7c:	372c      	adds	r7, #44	; 0x2c
1000bb7e:	46bd      	mov	sp, r7
1000bb80:	bd90      	pop	{r4, r7, pc}
1000bb82:	bf00      	nop
1000bb84:	fffff440 	.word	0xfffff440

1000bb88 <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
1000bb88:	b480      	push	{r7}
1000bb8a:	b085      	sub	sp, #20
1000bb8c:	af00      	add	r7, sp, #0
1000bb8e:	60f8      	str	r0, [r7, #12]
1000bb90:	60b9      	str	r1, [r7, #8]
1000bb92:	607a      	str	r2, [r7, #4]
1000bb94:	603b      	str	r3, [r7, #0]
	vr->num = num;
1000bb96:	68fb      	ldr	r3, [r7, #12]
1000bb98:	68ba      	ldr	r2, [r7, #8]
1000bb9a:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
1000bb9c:	68fb      	ldr	r3, [r7, #12]
1000bb9e:	687a      	ldr	r2, [r7, #4]
1000bba0:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
1000bba2:	68bb      	ldr	r3, [r7, #8]
1000bba4:	011b      	lsls	r3, r3, #4
1000bba6:	687a      	ldr	r2, [r7, #4]
1000bba8:	441a      	add	r2, r3
1000bbaa:	68fb      	ldr	r3, [r7, #12]
1000bbac:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
1000bbae:	68fb      	ldr	r3, [r7, #12]
1000bbb0:	689a      	ldr	r2, [r3, #8]
1000bbb2:	68bb      	ldr	r3, [r7, #8]
1000bbb4:	005b      	lsls	r3, r3, #1
1000bbb6:	4413      	add	r3, r2
1000bbb8:	3304      	adds	r3, #4
1000bbba:	461a      	mov	r2, r3
1000bbbc:	683b      	ldr	r3, [r7, #0]
1000bbbe:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
1000bbc0:	1c5a      	adds	r2, r3, #1
1000bbc2:	683b      	ldr	r3, [r7, #0]
1000bbc4:	425b      	negs	r3, r3
1000bbc6:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
1000bbc8:	461a      	mov	r2, r3
1000bbca:	68fb      	ldr	r3, [r7, #12]
1000bbcc:	60da      	str	r2, [r3, #12]
}
1000bbce:	bf00      	nop
1000bbd0:	3714      	adds	r7, #20
1000bbd2:	46bd      	mov	sp, r7
1000bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bbd8:	4770      	bx	lr

1000bbda <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
1000bbda:	b480      	push	{r7}
1000bbdc:	b083      	sub	sp, #12
1000bbde:	af00      	add	r7, sp, #0
1000bbe0:	4603      	mov	r3, r0
1000bbe2:	80fb      	strh	r3, [r7, #6]
1000bbe4:	460b      	mov	r3, r1
1000bbe6:	80bb      	strh	r3, [r7, #4]
1000bbe8:	4613      	mov	r3, r2
1000bbea:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
1000bbec:	88ba      	ldrh	r2, [r7, #4]
1000bbee:	88fb      	ldrh	r3, [r7, #6]
1000bbf0:	1ad3      	subs	r3, r2, r3
1000bbf2:	b29b      	uxth	r3, r3
1000bbf4:	3b01      	subs	r3, #1
1000bbf6:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
1000bbf8:	88b9      	ldrh	r1, [r7, #4]
1000bbfa:	887b      	ldrh	r3, [r7, #2]
1000bbfc:	1acb      	subs	r3, r1, r3
1000bbfe:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
1000bc00:	429a      	cmp	r2, r3
1000bc02:	bf34      	ite	cc
1000bc04:	2301      	movcc	r3, #1
1000bc06:	2300      	movcs	r3, #0
1000bc08:	b2db      	uxtb	r3, r3
}
1000bc0a:	4618      	mov	r0, r3
1000bc0c:	370c      	adds	r7, #12
1000bc0e:	46bd      	mov	sp, r7
1000bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bc14:	4770      	bx	lr

1000bc16 <metal_io_virt>:
{
1000bc16:	b480      	push	{r7}
1000bc18:	b083      	sub	sp, #12
1000bc1a:	af00      	add	r7, sp, #0
1000bc1c:	6078      	str	r0, [r7, #4]
1000bc1e:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
1000bc20:	687b      	ldr	r3, [r7, #4]
1000bc22:	681b      	ldr	r3, [r3, #0]
		: NULL);
1000bc24:	f1b3 3fff 	cmp.w	r3, #4294967295
1000bc28:	d00a      	beq.n	1000bc40 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
1000bc2a:	687b      	ldr	r3, [r7, #4]
1000bc2c:	689b      	ldr	r3, [r3, #8]
1000bc2e:	683a      	ldr	r2, [r7, #0]
1000bc30:	429a      	cmp	r2, r3
1000bc32:	d205      	bcs.n	1000bc40 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
1000bc34:	687b      	ldr	r3, [r7, #4]
1000bc36:	681b      	ldr	r3, [r3, #0]
1000bc38:	461a      	mov	r2, r3
1000bc3a:	683b      	ldr	r3, [r7, #0]
1000bc3c:	4413      	add	r3, r2
		: NULL);
1000bc3e:	e000      	b.n	1000bc42 <metal_io_virt+0x2c>
1000bc40:	2300      	movs	r3, #0
}
1000bc42:	4618      	mov	r0, r3
1000bc44:	370c      	adds	r7, #12
1000bc46:	46bd      	mov	sp, r7
1000bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bc4c:	4770      	bx	lr

1000bc4e <metal_io_phys>:
{
1000bc4e:	b580      	push	{r7, lr}
1000bc50:	b084      	sub	sp, #16
1000bc52:	af00      	add	r7, sp, #0
1000bc54:	6078      	str	r0, [r7, #4]
1000bc56:	6039      	str	r1, [r7, #0]
	if (!io->ops.offset_to_phys) {
1000bc58:	687b      	ldr	r3, [r7, #4]
1000bc5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000bc5c:	2b00      	cmp	r3, #0
1000bc5e:	d123      	bne.n	1000bca8 <metal_io_phys+0x5a>
		unsigned long page = (io->page_shift >=
1000bc60:	687b      	ldr	r3, [r7, #4]
1000bc62:	68db      	ldr	r3, [r3, #12]
				     0 : offset >> io->page_shift);
1000bc64:	2b1f      	cmp	r3, #31
1000bc66:	d805      	bhi.n	1000bc74 <metal_io_phys+0x26>
1000bc68:	687b      	ldr	r3, [r7, #4]
1000bc6a:	68db      	ldr	r3, [r3, #12]
1000bc6c:	683a      	ldr	r2, [r7, #0]
1000bc6e:	fa22 f303 	lsr.w	r3, r2, r3
1000bc72:	e000      	b.n	1000bc76 <metal_io_phys+0x28>
1000bc74:	2300      	movs	r3, #0
		unsigned long page = (io->page_shift >=
1000bc76:	60fb      	str	r3, [r7, #12]
		return (io->physmap && offset < io->size
1000bc78:	687b      	ldr	r3, [r7, #4]
1000bc7a:	685b      	ldr	r3, [r3, #4]
			: METAL_BAD_PHYS);
1000bc7c:	2b00      	cmp	r3, #0
1000bc7e:	d010      	beq.n	1000bca2 <metal_io_phys+0x54>
		return (io->physmap && offset < io->size
1000bc80:	687b      	ldr	r3, [r7, #4]
1000bc82:	689b      	ldr	r3, [r3, #8]
1000bc84:	683a      	ldr	r2, [r7, #0]
1000bc86:	429a      	cmp	r2, r3
1000bc88:	d20b      	bcs.n	1000bca2 <metal_io_phys+0x54>
			? io->physmap[page] + (offset & io->page_mask)
1000bc8a:	687b      	ldr	r3, [r7, #4]
1000bc8c:	685a      	ldr	r2, [r3, #4]
1000bc8e:	68fb      	ldr	r3, [r7, #12]
1000bc90:	009b      	lsls	r3, r3, #2
1000bc92:	4413      	add	r3, r2
1000bc94:	681a      	ldr	r2, [r3, #0]
1000bc96:	687b      	ldr	r3, [r7, #4]
1000bc98:	6919      	ldr	r1, [r3, #16]
1000bc9a:	683b      	ldr	r3, [r7, #0]
1000bc9c:	400b      	ands	r3, r1
			: METAL_BAD_PHYS);
1000bc9e:	4413      	add	r3, r2
1000bca0:	e008      	b.n	1000bcb4 <metal_io_phys+0x66>
1000bca2:	f04f 33ff 	mov.w	r3, #4294967295
1000bca6:	e005      	b.n	1000bcb4 <metal_io_phys+0x66>
	return io->ops.offset_to_phys(io, offset);
1000bca8:	687b      	ldr	r3, [r7, #4]
1000bcaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000bcac:	6839      	ldr	r1, [r7, #0]
1000bcae:	6878      	ldr	r0, [r7, #4]
1000bcb0:	4798      	blx	r3
1000bcb2:	4603      	mov	r3, r0
}
1000bcb4:	4618      	mov	r0, r3
1000bcb6:	3710      	adds	r7, #16
1000bcb8:	46bd      	mov	sp, r7
1000bcba:	bd80      	pop	{r7, pc}

1000bcbc <metal_io_phys_to_offset>:
{
1000bcbc:	b580      	push	{r7, lr}
1000bcbe:	b084      	sub	sp, #16
1000bcc0:	af00      	add	r7, sp, #0
1000bcc2:	6078      	str	r0, [r7, #4]
1000bcc4:	6039      	str	r1, [r7, #0]
	if (!io->ops.phys_to_offset) {
1000bcc6:	687b      	ldr	r3, [r7, #4]
1000bcc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000bcca:	2b00      	cmp	r3, #0
1000bccc:	d127      	bne.n	1000bd1e <metal_io_phys_to_offset+0x62>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
1000bcce:	687b      	ldr	r3, [r7, #4]
1000bcd0:	691b      	ldr	r3, [r3, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
1000bcd2:	f1b3 3fff 	cmp.w	r3, #4294967295
1000bcd6:	d105      	bne.n	1000bce4 <metal_io_phys_to_offset+0x28>
1000bcd8:	687b      	ldr	r3, [r7, #4]
1000bcda:	685b      	ldr	r3, [r3, #4]
1000bcdc:	681b      	ldr	r3, [r3, #0]
1000bcde:	683a      	ldr	r2, [r7, #0]
1000bce0:	1ad3      	subs	r3, r2, r3
1000bce2:	e003      	b.n	1000bcec <metal_io_phys_to_offset+0x30>
1000bce4:	687b      	ldr	r3, [r7, #4]
1000bce6:	691a      	ldr	r2, [r3, #16]
1000bce8:	683b      	ldr	r3, [r7, #0]
1000bcea:	4013      	ands	r3, r2
		unsigned long offset =
1000bcec:	60fb      	str	r3, [r7, #12]
			if (metal_io_phys(io, offset) == phys)
1000bcee:	68f9      	ldr	r1, [r7, #12]
1000bcf0:	6878      	ldr	r0, [r7, #4]
1000bcf2:	f7ff ffac 	bl	1000bc4e <metal_io_phys>
1000bcf6:	4602      	mov	r2, r0
1000bcf8:	683b      	ldr	r3, [r7, #0]
1000bcfa:	4293      	cmp	r3, r2
1000bcfc:	d101      	bne.n	1000bd02 <metal_io_phys_to_offset+0x46>
				return offset;
1000bcfe:	68fb      	ldr	r3, [r7, #12]
1000bd00:	e013      	b.n	1000bd2a <metal_io_phys_to_offset+0x6e>
			offset += io->page_mask + 1;
1000bd02:	687b      	ldr	r3, [r7, #4]
1000bd04:	691a      	ldr	r2, [r3, #16]
1000bd06:	68fb      	ldr	r3, [r7, #12]
1000bd08:	4413      	add	r3, r2
1000bd0a:	3301      	adds	r3, #1
1000bd0c:	60fb      	str	r3, [r7, #12]
		} while (offset < io->size);
1000bd0e:	687b      	ldr	r3, [r7, #4]
1000bd10:	689b      	ldr	r3, [r3, #8]
1000bd12:	68fa      	ldr	r2, [r7, #12]
1000bd14:	429a      	cmp	r2, r3
1000bd16:	d3ea      	bcc.n	1000bcee <metal_io_phys_to_offset+0x32>
		return METAL_BAD_OFFSET;
1000bd18:	f04f 33ff 	mov.w	r3, #4294967295
1000bd1c:	e005      	b.n	1000bd2a <metal_io_phys_to_offset+0x6e>
	return (*io->ops.phys_to_offset)(io, phys);
1000bd1e:	687b      	ldr	r3, [r7, #4]
1000bd20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000bd22:	6839      	ldr	r1, [r7, #0]
1000bd24:	6878      	ldr	r0, [r7, #4]
1000bd26:	4798      	blx	r3
1000bd28:	4603      	mov	r3, r0
}
1000bd2a:	4618      	mov	r0, r3
1000bd2c:	3710      	adds	r7, #16
1000bd2e:	46bd      	mov	sp, r7
1000bd30:	bd80      	pop	{r7, pc}

1000bd32 <metal_io_phys_to_virt>:
{
1000bd32:	b580      	push	{r7, lr}
1000bd34:	b082      	sub	sp, #8
1000bd36:	af00      	add	r7, sp, #0
1000bd38:	6078      	str	r0, [r7, #4]
1000bd3a:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
1000bd3c:	6839      	ldr	r1, [r7, #0]
1000bd3e:	6878      	ldr	r0, [r7, #4]
1000bd40:	f7ff ffbc 	bl	1000bcbc <metal_io_phys_to_offset>
1000bd44:	4603      	mov	r3, r0
1000bd46:	4619      	mov	r1, r3
1000bd48:	6878      	ldr	r0, [r7, #4]
1000bd4a:	f7ff ff64 	bl	1000bc16 <metal_io_virt>
1000bd4e:	4603      	mov	r3, r0
}
1000bd50:	4618      	mov	r0, r3
1000bd52:	3708      	adds	r7, #8
1000bd54:	46bd      	mov	sp, r7
1000bd56:	bd80      	pop	{r7, pc}

1000bd58 <virtqueue_phys_to_virt>:
#endif /* VIRTIO_CACHED_VRINGS */

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
1000bd58:	b580      	push	{r7, lr}
1000bd5a:	b084      	sub	sp, #16
1000bd5c:	af00      	add	r7, sp, #0
1000bd5e:	6078      	str	r0, [r7, #4]
1000bd60:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
1000bd62:	687b      	ldr	r3, [r7, #4]
1000bd64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000bd66:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
1000bd68:	6839      	ldr	r1, [r7, #0]
1000bd6a:	68f8      	ldr	r0, [r7, #12]
1000bd6c:	f7ff ffe1 	bl	1000bd32 <metal_io_phys_to_virt>
1000bd70:	4603      	mov	r3, r0
}
1000bd72:	4618      	mov	r0, r3
1000bd74:	3710      	adds	r7, #16
1000bd76:	46bd      	mov	sp, r7
1000bd78:	bd80      	pop	{r7, pc}

1000bd7a <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
1000bd7a:	b580      	push	{r7, lr}
1000bd7c:	b086      	sub	sp, #24
1000bd7e:	af00      	add	r7, sp, #0
1000bd80:	60f8      	str	r0, [r7, #12]
1000bd82:	607a      	str	r2, [r7, #4]
1000bd84:	603b      	str	r3, [r7, #0]
1000bd86:	460b      	mov	r3, r1
1000bd88:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
1000bd8a:	2300      	movs	r3, #0
1000bd8c:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
1000bd8e:	697b      	ldr	r3, [r7, #20]
1000bd90:	2b00      	cmp	r3, #0
1000bd92:	d11e      	bne.n	1000bdd2 <virtqueue_create+0x58>
		vq->vq_dev = virt_dev;
1000bd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000bd96:	68fa      	ldr	r2, [r7, #12]
1000bd98:	601a      	str	r2, [r3, #0]
		vq->vq_name = name;
1000bd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000bd9c:	687a      	ldr	r2, [r7, #4]
1000bd9e:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
1000bda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000bda2:	897a      	ldrh	r2, [r7, #10]
1000bda4:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
1000bda6:	683b      	ldr	r3, [r7, #0]
1000bda8:	891a      	ldrh	r2, [r3, #8]
1000bdaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000bdac:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
1000bdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000bdb0:	895a      	ldrh	r2, [r3, #10]
1000bdb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000bdb4:	849a      	strh	r2, [r3, #36]	; 0x24
		vq->callback = callback;
1000bdb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000bdb8:	6a3a      	ldr	r2, [r7, #32]
1000bdba:	60da      	str	r2, [r3, #12]
		vq->notify = notify;
1000bdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000bdbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000bdc0:	611a      	str	r2, [r3, #16]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, ring->vaddr, ring->align);
1000bdc2:	683b      	ldr	r3, [r7, #0]
1000bdc4:	6819      	ldr	r1, [r3, #0]
1000bdc6:	683b      	ldr	r3, [r7, #0]
1000bdc8:	685b      	ldr	r3, [r3, #4]
1000bdca:	461a      	mov	r2, r3
1000bdcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1000bdce:	f000 f8ef 	bl	1000bfb0 <vq_ring_init>
	/*
	 * CACHE: nothing to be done here. Only desc.next is setup at this
	 * stage but that is only written by master, so no need to flush it.
	 */

	return status;
1000bdd2:	697b      	ldr	r3, [r7, #20]
}
1000bdd4:	4618      	mov	r0, r3
1000bdd6:	3718      	adds	r7, #24
1000bdd8:	46bd      	mov	sp, r7
1000bdda:	bd80      	pop	{r7, pc}

1000bddc <virtqueue_get_buffer_length>:

	return cookie;
}

uint32_t virtqueue_get_buffer_length(struct virtqueue *vq, uint16_t idx)
{
1000bddc:	b480      	push	{r7}
1000bdde:	b083      	sub	sp, #12
1000bde0:	af00      	add	r7, sp, #0
1000bde2:	6078      	str	r0, [r7, #4]
1000bde4:	460b      	mov	r3, r1
1000bde6:	807b      	strh	r3, [r7, #2]
	VRING_INVALIDATE(vq->vq_ring.desc[idx].len);
	return vq->vq_ring.desc[idx].len;
1000bde8:	687b      	ldr	r3, [r7, #4]
1000bdea:	699a      	ldr	r2, [r3, #24]
1000bdec:	887b      	ldrh	r3, [r7, #2]
1000bdee:	011b      	lsls	r3, r3, #4
1000bdf0:	4413      	add	r3, r2
1000bdf2:	689b      	ldr	r3, [r3, #8]
}
1000bdf4:	4618      	mov	r0, r3
1000bdf6:	370c      	adds	r7, #12
1000bdf8:	46bd      	mov	sp, r7
1000bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bdfe:	4770      	bx	lr

1000be00 <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
1000be00:	b580      	push	{r7, lr}
1000be02:	b086      	sub	sp, #24
1000be04:	af00      	add	r7, sp, #0
1000be06:	60f8      	str	r0, [r7, #12]
1000be08:	60b9      	str	r1, [r7, #8]
1000be0a:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
1000be0c:	2300      	movs	r3, #0
1000be0e:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
1000be10:	f3bf 8f5b 	dmb	ish

	/* Avail.idx is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->idx);
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
1000be14:	68fb      	ldr	r3, [r7, #12]
1000be16:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
1000be18:	68fb      	ldr	r3, [r7, #12]
1000be1a:	69db      	ldr	r3, [r3, #28]
1000be1c:	885b      	ldrh	r3, [r3, #2]
1000be1e:	b29b      	uxth	r3, r3
1000be20:	429a      	cmp	r2, r3
1000be22:	d101      	bne.n	1000be28 <virtqueue_get_available_buffer+0x28>
		return NULL;
1000be24:	2300      	movs	r3, #0
1000be26:	e02f      	b.n	1000be88 <virtqueue_get_available_buffer+0x88>
	VQUEUE_BUSY(vq);

	/* Avail.ring is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->ring[head_idx]);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
1000be28:	68fb      	ldr	r3, [r7, #12]
1000be2a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
1000be2c:	1c5a      	adds	r2, r3, #1
1000be2e:	b291      	uxth	r1, r2
1000be30:	68fa      	ldr	r2, [r7, #12]
1000be32:	8611      	strh	r1, [r2, #48]	; 0x30
1000be34:	b21a      	sxth	r2, r3
1000be36:	68fb      	ldr	r3, [r7, #12]
1000be38:	895b      	ldrh	r3, [r3, #10]
1000be3a:	3b01      	subs	r3, #1
1000be3c:	b29b      	uxth	r3, r3
1000be3e:	b21b      	sxth	r3, r3
1000be40:	4013      	ands	r3, r2
1000be42:	b21b      	sxth	r3, r3
1000be44:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
1000be46:	68fb      	ldr	r3, [r7, #12]
1000be48:	69da      	ldr	r2, [r3, #28]
1000be4a:	8afb      	ldrh	r3, [r7, #22]
1000be4c:	005b      	lsls	r3, r3, #1
1000be4e:	4413      	add	r3, r2
1000be50:	889b      	ldrh	r3, [r3, #4]
1000be52:	b29a      	uxth	r2, r3
1000be54:	68bb      	ldr	r3, [r7, #8]
1000be56:	801a      	strh	r2, [r3, #0]

	/* Invalidate the desc entry written by master before accessing it */
	VRING_INVALIDATE(vq->vq_ring.desc[*avail_idx]);
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
1000be58:	68fb      	ldr	r3, [r7, #12]
1000be5a:	699a      	ldr	r2, [r3, #24]
1000be5c:	68bb      	ldr	r3, [r7, #8]
1000be5e:	881b      	ldrh	r3, [r3, #0]
1000be60:	011b      	lsls	r3, r3, #4
1000be62:	18d1      	adds	r1, r2, r3
1000be64:	680a      	ldr	r2, [r1, #0]
1000be66:	684b      	ldr	r3, [r1, #4]
1000be68:	4613      	mov	r3, r2
1000be6a:	4619      	mov	r1, r3
1000be6c:	68f8      	ldr	r0, [r7, #12]
1000be6e:	f7ff ff73 	bl	1000bd58 <virtqueue_phys_to_virt>
1000be72:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
1000be74:	68fb      	ldr	r3, [r7, #12]
1000be76:	699a      	ldr	r2, [r3, #24]
1000be78:	68bb      	ldr	r3, [r7, #8]
1000be7a:	881b      	ldrh	r3, [r3, #0]
1000be7c:	011b      	lsls	r3, r3, #4
1000be7e:	4413      	add	r3, r2
1000be80:	689a      	ldr	r2, [r3, #8]
1000be82:	687b      	ldr	r3, [r7, #4]
1000be84:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
1000be86:	693b      	ldr	r3, [r7, #16]
}
1000be88:	4618      	mov	r0, r3
1000be8a:	3718      	adds	r7, #24
1000be8c:	46bd      	mov	sp, r7
1000be8e:	bd80      	pop	{r7, pc}

1000be90 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
1000be90:	b480      	push	{r7}
1000be92:	b087      	sub	sp, #28
1000be94:	af00      	add	r7, sp, #0
1000be96:	60f8      	str	r0, [r7, #12]
1000be98:	460b      	mov	r3, r1
1000be9a:	607a      	str	r2, [r7, #4]
1000be9c:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
1000be9e:	2300      	movs	r3, #0
1000bea0:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
1000bea2:	68fb      	ldr	r3, [r7, #12]
1000bea4:	895b      	ldrh	r3, [r3, #10]
1000bea6:	897a      	ldrh	r2, [r7, #10]
1000bea8:	429a      	cmp	r2, r3
1000beaa:	d901      	bls.n	1000beb0 <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
1000beac:	4b18      	ldr	r3, [pc, #96]	; (1000bf10 <virtqueue_add_consumed_buffer+0x80>)
1000beae:	e029      	b.n	1000bf04 <virtqueue_add_consumed_buffer+0x74>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by master, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
1000beb0:	68fb      	ldr	r3, [r7, #12]
1000beb2:	6a1b      	ldr	r3, [r3, #32]
1000beb4:	885b      	ldrh	r3, [r3, #2]
1000beb6:	b29b      	uxth	r3, r3
1000beb8:	b21a      	sxth	r2, r3
1000beba:	68fb      	ldr	r3, [r7, #12]
1000bebc:	895b      	ldrh	r3, [r3, #10]
1000bebe:	3b01      	subs	r3, #1
1000bec0:	b29b      	uxth	r3, r3
1000bec2:	b21b      	sxth	r3, r3
1000bec4:	4013      	ands	r3, r2
1000bec6:	b21b      	sxth	r3, r3
1000bec8:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
1000beca:	68fb      	ldr	r3, [r7, #12]
1000becc:	6a1a      	ldr	r2, [r3, #32]
1000bece:	8a7b      	ldrh	r3, [r7, #18]
1000bed0:	00db      	lsls	r3, r3, #3
1000bed2:	4413      	add	r3, r2
1000bed4:	3304      	adds	r3, #4
1000bed6:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
1000bed8:	897a      	ldrh	r2, [r7, #10]
1000beda:	697b      	ldr	r3, [r7, #20]
1000bedc:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
1000bede:	697b      	ldr	r3, [r7, #20]
1000bee0:	687a      	ldr	r2, [r7, #4]
1000bee2:	605a      	str	r2, [r3, #4]

	/* We still need to flush it because this is read by master */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
1000bee4:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
1000bee8:	68fb      	ldr	r3, [r7, #12]
1000beea:	6a1b      	ldr	r3, [r3, #32]
1000beec:	885a      	ldrh	r2, [r3, #2]
1000beee:	b292      	uxth	r2, r2
1000bef0:	3201      	adds	r2, #1
1000bef2:	b292      	uxth	r2, r2
1000bef4:	805a      	strh	r2, [r3, #2]

	/* Used.idx is read by master, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
1000bef6:	68fb      	ldr	r3, [r7, #12]
1000bef8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
1000befa:	3301      	adds	r3, #1
1000befc:	b29a      	uxth	r2, r3
1000befe:	68fb      	ldr	r3, [r7, #12]
1000bf00:	84da      	strh	r2, [r3, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
1000bf02:	2300      	movs	r3, #0
}
1000bf04:	4618      	mov	r0, r3
1000bf06:	371c      	adds	r7, #28
1000bf08:	46bd      	mov	sp, r7
1000bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bf0e:	4770      	bx	lr
1000bf10:	fffff441 	.word	0xfffff441

1000bf14 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
1000bf14:	b480      	push	{r7}
1000bf16:	b083      	sub	sp, #12
1000bf18:	af00      	add	r7, sp, #0
1000bf1a:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
1000bf1c:	6879      	ldr	r1, [r7, #4]
1000bf1e:	6809      	ldr	r1, [r1, #0]
1000bf20:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
1000bf24:	f000 5200 	and.w	r2, r0, #536870912	; 0x20000000
1000bf28:	2300      	movs	r3, #0
1000bf2a:	4313      	orrs	r3, r2
1000bf2c:	d015      	beq.n	1000bf5a <virtqueue_disable_cb+0x46>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
			VRING_FLUSH(vring_used_event(&vq->vq_ring));
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000bf2e:	687b      	ldr	r3, [r7, #4]
1000bf30:	681b      	ldr	r3, [r3, #0]
1000bf32:	699b      	ldr	r3, [r3, #24]
1000bf34:	2b01      	cmp	r3, #1
1000bf36:	d11f      	bne.n	1000bf78 <virtqueue_disable_cb+0x64>
			vring_avail_event(&vq->vq_ring) =
			    vq->vq_available_idx - vq->vq_nentries - 1;
1000bf38:	687b      	ldr	r3, [r7, #4]
1000bf3a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
1000bf3c:	687b      	ldr	r3, [r7, #4]
1000bf3e:	895b      	ldrh	r3, [r3, #10]
1000bf40:	1ad3      	subs	r3, r2, r3
1000bf42:	b299      	uxth	r1, r3
			vring_avail_event(&vq->vq_ring) =
1000bf44:	687b      	ldr	r3, [r7, #4]
1000bf46:	6a1a      	ldr	r2, [r3, #32]
1000bf48:	687b      	ldr	r3, [r7, #4]
1000bf4a:	695b      	ldr	r3, [r3, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
1000bf4c:	3901      	subs	r1, #1
1000bf4e:	b289      	uxth	r1, r1
			vring_avail_event(&vq->vq_ring) =
1000bf50:	00db      	lsls	r3, r3, #3
1000bf52:	4413      	add	r3, r2
1000bf54:	460a      	mov	r2, r1
1000bf56:	809a      	strh	r2, [r3, #4]
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	VQUEUE_IDLE(vq);
}
1000bf58:	e00e      	b.n	1000bf78 <virtqueue_disable_cb+0x64>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000bf5a:	687b      	ldr	r3, [r7, #4]
1000bf5c:	681b      	ldr	r3, [r3, #0]
1000bf5e:	699b      	ldr	r3, [r3, #24]
1000bf60:	2b01      	cmp	r3, #1
1000bf62:	d109      	bne.n	1000bf78 <virtqueue_disable_cb+0x64>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
1000bf64:	687b      	ldr	r3, [r7, #4]
1000bf66:	6a1b      	ldr	r3, [r3, #32]
1000bf68:	881b      	ldrh	r3, [r3, #0]
1000bf6a:	b29a      	uxth	r2, r3
1000bf6c:	687b      	ldr	r3, [r7, #4]
1000bf6e:	6a1b      	ldr	r3, [r3, #32]
1000bf70:	f042 0201 	orr.w	r2, r2, #1
1000bf74:	b292      	uxth	r2, r2
1000bf76:	801a      	strh	r2, [r3, #0]
}
1000bf78:	bf00      	nop
1000bf7a:	370c      	adds	r7, #12
1000bf7c:	46bd      	mov	sp, r7
1000bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bf82:	4770      	bx	lr

1000bf84 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
1000bf84:	b580      	push	{r7, lr}
1000bf86:	b082      	sub	sp, #8
1000bf88:	af00      	add	r7, sp, #0
1000bf8a:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
1000bf8c:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify(vq))
1000bf90:	6878      	ldr	r0, [r7, #4]
1000bf92:	f000 f823 	bl	1000bfdc <vq_ring_must_notify>
1000bf96:	4603      	mov	r3, r0
1000bf98:	2b00      	cmp	r3, #0
1000bf9a:	d002      	beq.n	1000bfa2 <virtqueue_kick+0x1e>
		vq_ring_notify(vq);
1000bf9c:	6878      	ldr	r0, [r7, #4]
1000bf9e:	f000 f86b 	bl	1000c078 <vq_ring_notify>

	vq->vq_queued_cnt = 0;
1000bfa2:	687b      	ldr	r3, [r7, #4]
1000bfa4:	2200      	movs	r2, #0
1000bfa6:	84da      	strh	r2, [r3, #38]	; 0x26

	VQUEUE_IDLE(vq);
}
1000bfa8:	bf00      	nop
1000bfaa:	3708      	adds	r7, #8
1000bfac:	46bd      	mov	sp, r7
1000bfae:	bd80      	pop	{r7, pc}

1000bfb0 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
1000bfb0:	b580      	push	{r7, lr}
1000bfb2:	b086      	sub	sp, #24
1000bfb4:	af00      	add	r7, sp, #0
1000bfb6:	60f8      	str	r0, [r7, #12]
1000bfb8:	60b9      	str	r1, [r7, #8]
1000bfba:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int size;

	size = vq->vq_nentries;
1000bfbc:	68fb      	ldr	r3, [r7, #12]
1000bfbe:	895b      	ldrh	r3, [r3, #10]
1000bfc0:	617b      	str	r3, [r7, #20]
	vr = &vq->vq_ring;
1000bfc2:	68fb      	ldr	r3, [r7, #12]
1000bfc4:	3314      	adds	r3, #20
1000bfc6:	613b      	str	r3, [r7, #16]

	vring_init(vr, size, ring_mem, alignment);
1000bfc8:	6979      	ldr	r1, [r7, #20]
1000bfca:	687b      	ldr	r3, [r7, #4]
1000bfcc:	68ba      	ldr	r2, [r7, #8]
1000bfce:	6938      	ldr	r0, [r7, #16]
1000bfd0:	f7ff fdda 	bl	1000bb88 <vring_init>
		for (i = 0; i < size - 1; i++)
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
	}
#endif /*VIRTIO_SLAVE_ONLY*/
}
1000bfd4:	bf00      	nop
1000bfd6:	3718      	adds	r7, #24
1000bfd8:	46bd      	mov	sp, r7
1000bfda:	bd80      	pop	{r7, pc}

1000bfdc <vq_ring_must_notify>:
 *
 * vq_ring_must_notify
 *
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
1000bfdc:	b580      	push	{r7, lr}
1000bfde:	b084      	sub	sp, #16
1000bfe0:	af00      	add	r7, sp, #0
1000bfe2:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
1000bfe4:	6879      	ldr	r1, [r7, #4]
1000bfe6:	6809      	ldr	r1, [r1, #0]
1000bfe8:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
1000bfec:	f000 5200 	and.w	r2, r0, #536870912	; 0x20000000
1000bff0:	2300      	movs	r3, #0
1000bff2:	4313      	orrs	r3, r2
1000bff4:	d02a      	beq.n	1000c04c <vq_ring_must_notify+0x70>
			return vring_need_event(event_idx, new_idx,
						prev_idx) != 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000bff6:	687b      	ldr	r3, [r7, #4]
1000bff8:	681b      	ldr	r3, [r3, #0]
1000bffa:	699b      	ldr	r3, [r3, #24]
1000bffc:	2b01      	cmp	r3, #1
1000bffe:	d136      	bne.n	1000c06e <vq_ring_must_notify+0x92>
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
1000c000:	687b      	ldr	r3, [r7, #4]
1000c002:	6a1b      	ldr	r3, [r3, #32]
1000c004:	789a      	ldrb	r2, [r3, #2]
1000c006:	78db      	ldrb	r3, [r3, #3]
1000c008:	021b      	lsls	r3, r3, #8
1000c00a:	4313      	orrs	r3, r2
1000c00c:	81fb      	strh	r3, [r7, #14]
			prev_idx = new_idx - vq->vq_queued_cnt;
1000c00e:	687b      	ldr	r3, [r7, #4]
1000c010:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
1000c012:	89fa      	ldrh	r2, [r7, #14]
1000c014:	1ad3      	subs	r3, r2, r3
1000c016:	81bb      	strh	r3, [r7, #12]
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
1000c018:	687b      	ldr	r3, [r7, #4]
1000c01a:	69da      	ldr	r2, [r3, #28]
1000c01c:	687b      	ldr	r3, [r7, #4]
1000c01e:	6959      	ldr	r1, [r3, #20]
1000c020:	004b      	lsls	r3, r1, #1
1000c022:	4413      	add	r3, r2
1000c024:	7918      	ldrb	r0, [r3, #4]
1000c026:	004b      	lsls	r3, r1, #1
1000c028:	4413      	add	r3, r2
1000c02a:	795b      	ldrb	r3, [r3, #5]
1000c02c:	021b      	lsls	r3, r3, #8
1000c02e:	4303      	orrs	r3, r0
1000c030:	817b      	strh	r3, [r7, #10]
			return vring_need_event(event_idx, new_idx,
1000c032:	89ba      	ldrh	r2, [r7, #12]
1000c034:	89f9      	ldrh	r1, [r7, #14]
1000c036:	897b      	ldrh	r3, [r7, #10]
1000c038:	4618      	mov	r0, r3
1000c03a:	f7ff fdce 	bl	1000bbda <vring_need_event>
1000c03e:	4603      	mov	r3, r0
						prev_idx) != 0;
1000c040:	2b00      	cmp	r3, #0
1000c042:	bf14      	ite	ne
1000c044:	2301      	movne	r3, #1
1000c046:	2300      	moveq	r3, #0
1000c048:	b2db      	uxtb	r3, r3
1000c04a:	e011      	b.n	1000c070 <vq_ring_must_notify+0x94>
			return (vq->vq_ring.used->flags &
				VRING_USED_F_NO_NOTIFY) == 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000c04c:	687b      	ldr	r3, [r7, #4]
1000c04e:	681b      	ldr	r3, [r3, #0]
1000c050:	699b      	ldr	r3, [r3, #24]
1000c052:	2b01      	cmp	r3, #1
1000c054:	d10b      	bne.n	1000c06e <vq_ring_must_notify+0x92>
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
1000c056:	687b      	ldr	r3, [r7, #4]
1000c058:	69db      	ldr	r3, [r3, #28]
1000c05a:	881b      	ldrh	r3, [r3, #0]
1000c05c:	b29b      	uxth	r3, r3
1000c05e:	f003 0301 	and.w	r3, r3, #1
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
1000c062:	2b00      	cmp	r3, #0
1000c064:	bf0c      	ite	eq
1000c066:	2301      	moveq	r3, #1
1000c068:	2300      	movne	r3, #0
1000c06a:	b2db      	uxtb	r3, r3
1000c06c:	e000      	b.n	1000c070 <vq_ring_must_notify+0x94>
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	return 0;
1000c06e:	2300      	movs	r3, #0
}
1000c070:	4618      	mov	r0, r3
1000c072:	3710      	adds	r7, #16
1000c074:	46bd      	mov	sp, r7
1000c076:	bd80      	pop	{r7, pc}

1000c078 <vq_ring_notify>:
 *
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
1000c078:	b580      	push	{r7, lr}
1000c07a:	b082      	sub	sp, #8
1000c07c:	af00      	add	r7, sp, #0
1000c07e:	6078      	str	r0, [r7, #4]
	if (vq->notify)
1000c080:	687b      	ldr	r3, [r7, #4]
1000c082:	691b      	ldr	r3, [r3, #16]
1000c084:	2b00      	cmp	r3, #0
1000c086:	d003      	beq.n	1000c090 <vq_ring_notify+0x18>
		vq->notify(vq);
1000c088:	687b      	ldr	r3, [r7, #4]
1000c08a:	691b      	ldr	r3, [r3, #16]
1000c08c:	6878      	ldr	r0, [r7, #4]
1000c08e:	4798      	blx	r3
}
1000c090:	bf00      	nop
1000c092:	3708      	adds	r7, #8
1000c094:	46bd      	mov	sp, r7
1000c096:	bd80      	pop	{r7, pc}

1000c098 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
1000c098:	b580      	push	{r7, lr}
1000c09a:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN PRE_MAILBOX_INIT */

   /* USER CODE END  PRE_MAILBOX_INIT */

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_1, IPCC_CHANNEL_DIR_RX,
1000c09c:	4b0d      	ldr	r3, [pc, #52]	; (1000c0d4 <MAILBOX_Init+0x3c>)
1000c09e:	2201      	movs	r2, #1
1000c0a0:	2100      	movs	r1, #0
1000c0a2:	480d      	ldr	r0, [pc, #52]	; (1000c0d8 <MAILBOX_Init+0x40>)
1000c0a4:	f7f7 f812 	bl	100030cc <HAL_IPCC_ActivateNotification>
1000c0a8:	4603      	mov	r3, r0
1000c0aa:	2b00      	cmp	r3, #0
1000c0ac:	d002      	beq.n	1000c0b4 <MAILBOX_Init+0x1c>
          IPCC_channel1_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_1 RX fail\n", __func__);
    return -1;
1000c0ae:	f04f 33ff 	mov.w	r3, #4294967295
1000c0b2:	e00c      	b.n	1000c0ce <MAILBOX_Init+0x36>
  }

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_2, IPCC_CHANNEL_DIR_RX,
1000c0b4:	4b09      	ldr	r3, [pc, #36]	; (1000c0dc <MAILBOX_Init+0x44>)
1000c0b6:	2201      	movs	r2, #1
1000c0b8:	2101      	movs	r1, #1
1000c0ba:	4807      	ldr	r0, [pc, #28]	; (1000c0d8 <MAILBOX_Init+0x40>)
1000c0bc:	f7f7 f806 	bl	100030cc <HAL_IPCC_ActivateNotification>
1000c0c0:	4603      	mov	r3, r0
1000c0c2:	2b00      	cmp	r3, #0
1000c0c4:	d002      	beq.n	1000c0cc <MAILBOX_Init+0x34>
          IPCC_channel2_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_2 RX fail\n", __func__);
    return -1;
1000c0c6:	f04f 33ff 	mov.w	r3, #4294967295
1000c0ca:	e000      	b.n	1000c0ce <MAILBOX_Init+0x36>
  }

  /* USER CODE BEGIN POST_MAILBOX_INIT */

  /* USER CODE END  POST_MAILBOX_INIT */
  return 0;
1000c0cc:	2300      	movs	r3, #0
}
1000c0ce:	4618      	mov	r0, r3
1000c0d0:	bd80      	pop	{r7, pc}
1000c0d2:	bf00      	nop
1000c0d4:	1000c145 	.word	0x1000c145
1000c0d8:	100202a4 	.word	0x100202a4
1000c0dc:	1000c171 	.word	0x1000c171

1000c0e0 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
1000c0e0:	b580      	push	{r7, lr}
1000c0e2:	b084      	sub	sp, #16
1000c0e4:	af00      	add	r7, sp, #0
1000c0e6:	6078      	str	r0, [r7, #4]
1000c0e8:	6039      	str	r1, [r7, #0]
   /* USER CODE BEGIN PRE_MAILBOX_NOTIFY */

   /* USER CODE END  PRE_MAILBOX_NOTIFY */

  /* Called after virtqueue processing: time to inform the remote */
  if (id == VRING0_ID) {
1000c0ea:	683b      	ldr	r3, [r7, #0]
1000c0ec:	2b00      	cmp	r3, #0
1000c0ee:	d102      	bne.n	1000c0f6 <MAILBOX_Notify+0x16>
    channel = IPCC_CHANNEL_1;
1000c0f0:	2300      	movs	r3, #0
1000c0f2:	60fb      	str	r3, [r7, #12]
1000c0f4:	e008      	b.n	1000c108 <MAILBOX_Notify+0x28>
    OPENAMP_log_dbg("Send msg on ch_1\r\n");
  }
  else if (id == VRING1_ID) {
1000c0f6:	683b      	ldr	r3, [r7, #0]
1000c0f8:	2b01      	cmp	r3, #1
1000c0fa:	d102      	bne.n	1000c102 <MAILBOX_Notify+0x22>
    /* Note: the OpenAMP framework never notifies this */
    channel = IPCC_CHANNEL_2;
1000c0fc:	2301      	movs	r3, #1
1000c0fe:	60fb      	str	r3, [r7, #12]
1000c100:	e002      	b.n	1000c108 <MAILBOX_Notify+0x28>
    OPENAMP_log_dbg("Send 'buff free' on ch_2\r\n");
  }
  else {
    OPENAMP_log_err("invalid vring (%d)\r\n", (int)id);
    return -1;
1000c102:	f04f 33ff 	mov.w	r3, #4294967295
1000c106:	e016      	b.n	1000c136 <MAILBOX_Notify+0x56>
  }

  /* Check that the channel is free (otherwise wait until it is) */
  if (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED) {
1000c108:	2200      	movs	r2, #0
1000c10a:	68f9      	ldr	r1, [r7, #12]
1000c10c:	480c      	ldr	r0, [pc, #48]	; (1000c140 <MAILBOX_Notify+0x60>)
1000c10e:	f7f7 f82b 	bl	10003168 <HAL_IPCC_GetChannelStatus>
1000c112:	4603      	mov	r3, r0
1000c114:	2b01      	cmp	r3, #1
1000c116:	d108      	bne.n	1000c12a <MAILBOX_Notify+0x4a>
    OPENAMP_log_dbg("Waiting for channel to be freed\r\n");
    while (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED)
1000c118:	bf00      	nop
1000c11a:	2200      	movs	r2, #0
1000c11c:	68f9      	ldr	r1, [r7, #12]
1000c11e:	4808      	ldr	r0, [pc, #32]	; (1000c140 <MAILBOX_Notify+0x60>)
1000c120:	f7f7 f822 	bl	10003168 <HAL_IPCC_GetChannelStatus>
1000c124:	4603      	mov	r3, r0
1000c126:	2b01      	cmp	r3, #1
1000c128:	d0f7      	beq.n	1000c11a <MAILBOX_Notify+0x3a>
      ;
  }

  /* Inform A7 (either new message, or buf free) */
  HAL_IPCC_NotifyCPU(&hipcc, channel, IPCC_CHANNEL_DIR_TX);
1000c12a:	2200      	movs	r2, #0
1000c12c:	68f9      	ldr	r1, [r7, #12]
1000c12e:	4804      	ldr	r0, [pc, #16]	; (1000c140 <MAILBOX_Notify+0x60>)
1000c130:	f7f7 f84e 	bl	100031d0 <HAL_IPCC_NotifyCPU>

 /* USER CODE BEGIN POST_MAILBOX_NOTIFY */

 /* USER CODE END  POST_MAILBOX_NOTIFY */

  return 0;
1000c134:	2300      	movs	r3, #0
}
1000c136:	4618      	mov	r0, r3
1000c138:	3710      	adds	r7, #16
1000c13a:	46bd      	mov	sp, r7
1000c13c:	bd80      	pop	{r7, pc}
1000c13e:	bf00      	nop
1000c140:	100202a4 	.word	0x100202a4

1000c144 <IPCC_channel1_callback>:

/* USER CODE END 0 */
/* Callback from IPCC Interrupt Handler: Master Processor informs that there are some free buffers */
void IPCC_channel1_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
1000c144:	b580      	push	{r7, lr}
1000c146:	b084      	sub	sp, #16
1000c148:	af00      	add	r7, sp, #0
1000c14a:	60f8      	str	r0, [r7, #12]
1000c14c:	60b9      	str	r1, [r7, #8]
1000c14e:	4613      	mov	r3, r2
1000c150:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL1_CALLBACK */

  if (msg_received_ch1 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel1_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch1);

  msg_received_ch1 = MBOX_BUF_FREE;
1000c152:	4b06      	ldr	r3, [pc, #24]	; (1000c16c <IPCC_channel1_callback+0x28>)
1000c154:	2202      	movs	r2, #2
1000c156:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the 'buff free' msg */
  OPENAMP_log_dbg("Ack 'buff free' message on ch1\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
1000c158:	2201      	movs	r2, #1
1000c15a:	68b9      	ldr	r1, [r7, #8]
1000c15c:	68f8      	ldr	r0, [r7, #12]
1000c15e:	f7f7 f837 	bl	100031d0 <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL1_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL1_CALLBACK */
}
1000c162:	bf00      	nop
1000c164:	3710      	adds	r7, #16
1000c166:	46bd      	mov	sp, r7
1000c168:	bd80      	pop	{r7, pc}
1000c16a:	bf00      	nop
1000c16c:	1002039c 	.word	0x1002039c

1000c170 <IPCC_channel2_callback>:

/* Callback from IPCC Interrupt Handler: new message received from Master Processor */
void IPCC_channel2_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
1000c170:	b580      	push	{r7, lr}
1000c172:	b084      	sub	sp, #16
1000c174:	af00      	add	r7, sp, #0
1000c176:	60f8      	str	r0, [r7, #12]
1000c178:	60b9      	str	r1, [r7, #8]
1000c17a:	4613      	mov	r3, r2
1000c17c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL2_CALLBACK */

  if (msg_received_ch2 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel2_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch2);

  msg_received_ch2 = MBOX_NEW_MSG;
1000c17e:	4b06      	ldr	r3, [pc, #24]	; (1000c198 <IPCC_channel2_callback+0x28>)
1000c180:	2201      	movs	r2, #1
1000c182:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the new msg */
  OPENAMP_log_dbg("Ack new message on ch2\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
1000c184:	2201      	movs	r2, #1
1000c186:	68b9      	ldr	r1, [r7, #8]
1000c188:	68f8      	ldr	r0, [r7, #12]
1000c18a:	f7f7 f821 	bl	100031d0 <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL2_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL2_CALLBACK */
}
1000c18e:	bf00      	nop
1000c190:	3710      	adds	r7, #16
1000c192:	46bd      	mov	sp, r7
1000c194:	bd80      	pop	{r7, pc}
1000c196:	bf00      	nop
1000c198:	100203a0 	.word	0x100203a0

1000c19c <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
1000c19c:	b480      	push	{r7}
1000c19e:	b083      	sub	sp, #12
1000c1a0:	af00      	add	r7, sp, #0
1000c1a2:	6078      	str	r0, [r7, #4]
1000c1a4:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
1000c1a6:	687b      	ldr	r3, [r7, #4]
1000c1a8:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
1000c1aa:	683a      	ldr	r2, [r7, #0]
1000c1ac:	429a      	cmp	r2, r3
1000c1ae:	d209      	bcs.n	1000c1c4 <metal_device_io_region+0x28>
1000c1b0:	683a      	ldr	r2, [r7, #0]
1000c1b2:	4613      	mov	r3, r2
1000c1b4:	00db      	lsls	r3, r3, #3
1000c1b6:	1a9b      	subs	r3, r3, r2
1000c1b8:	00db      	lsls	r3, r3, #3
1000c1ba:	3308      	adds	r3, #8
1000c1bc:	687a      	ldr	r2, [r7, #4]
1000c1be:	4413      	add	r3, r2
1000c1c0:	3304      	adds	r3, #4
1000c1c2:	e000      	b.n	1000c1c6 <metal_device_io_region+0x2a>
1000c1c4:	2300      	movs	r3, #0
}
1000c1c6:	4618      	mov	r0, r3
1000c1c8:	370c      	adds	r7, #12
1000c1ca:	46bd      	mov	sp, r7
1000c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c1d0:	4770      	bx	lr
	...

1000c1d4 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
1000c1d4:	b590      	push	{r4, r7, lr}
1000c1d6:	b08d      	sub	sp, #52	; 0x34
1000c1d8:	af04      	add	r7, sp, #16
1000c1da:	6078      	str	r0, [r7, #4]
  int status = 0;
1000c1dc:	2300      	movs	r3, #0
1000c1de:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
1000c1e0:	2300      	movs	r3, #0
1000c1e2:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
1000c1e4:	4a41      	ldr	r2, [pc, #260]	; (1000c2ec <OPENAMP_shmem_init+0x118>)
1000c1e6:	f107 0310 	add.w	r3, r7, #16
1000c1ea:	e892 0003 	ldmia.w	r2, {r0, r1}
1000c1ee:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
1000c1f2:	2300      	movs	r3, #0
1000c1f4:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
1000c1f6:	2300      	movs	r3, #0
1000c1f8:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
1000c1fa:	f107 0310 	add.w	r3, r7, #16
1000c1fe:	4618      	mov	r0, r3
1000c200:	f7fe fa5c 	bl	1000a6bc <metal_init>

  status = metal_register_generic_device(&shm_device);
1000c204:	483a      	ldr	r0, [pc, #232]	; (1000c2f0 <OPENAMP_shmem_init+0x11c>)
1000c206:	f7fe f903 	bl	1000a410 <metal_register_generic_device>
1000c20a:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
1000c20c:	69fb      	ldr	r3, [r7, #28]
1000c20e:	2b00      	cmp	r3, #0
1000c210:	d001      	beq.n	1000c216 <OPENAMP_shmem_init+0x42>
    return status;
1000c212:	69fb      	ldr	r3, [r7, #28]
1000c214:	e066      	b.n	1000c2e4 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
1000c216:	f107 0318 	add.w	r3, r7, #24
1000c21a:	461a      	mov	r2, r3
1000c21c:	4935      	ldr	r1, [pc, #212]	; (1000c2f4 <OPENAMP_shmem_init+0x120>)
1000c21e:	4836      	ldr	r0, [pc, #216]	; (1000c2f8 <OPENAMP_shmem_init+0x124>)
1000c220:	f7fe f8b8 	bl	1000a394 <metal_device_open>
1000c224:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
1000c226:	69fb      	ldr	r3, [r7, #28]
1000c228:	2b00      	cmp	r3, #0
1000c22a:	d001      	beq.n	1000c230 <OPENAMP_shmem_init+0x5c>
    return status;
1000c22c:	69fb      	ldr	r3, [r7, #28]
1000c22e:	e059      	b.n	1000c2e4 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
1000c230:	4a32      	ldr	r2, [pc, #200]	; (1000c2fc <OPENAMP_shmem_init+0x128>)
1000c232:	4b33      	ldr	r3, [pc, #204]	; (1000c300 <OPENAMP_shmem_init+0x12c>)
1000c234:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
1000c236:	69bb      	ldr	r3, [r7, #24]
1000c238:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, (unsigned int)-1, 0, NULL);
1000c23c:	4a31      	ldr	r2, [pc, #196]	; (1000c304 <OPENAMP_shmem_init+0x130>)
1000c23e:	4b2f      	ldr	r3, [pc, #188]	; (1000c2fc <OPENAMP_shmem_init+0x128>)
1000c240:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
1000c242:	461a      	mov	r2, r3
1000c244:	2300      	movs	r3, #0
1000c246:	9302      	str	r3, [sp, #8]
1000c248:	2300      	movs	r3, #0
1000c24a:	9301      	str	r3, [sp, #4]
1000c24c:	f04f 33ff 	mov.w	r3, #4294967295
1000c250:	9300      	str	r3, [sp, #0]
1000c252:	4613      	mov	r3, r2
1000c254:	4a2a      	ldr	r2, [pc, #168]	; (1000c300 <OPENAMP_shmem_init+0x12c>)
1000c256:	4929      	ldr	r1, [pc, #164]	; (1000c2fc <OPENAMP_shmem_init+0x128>)
1000c258:	f7fe fa7e 	bl	1000a758 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
1000c25c:	69bb      	ldr	r3, [r7, #24]
1000c25e:	2100      	movs	r1, #0
1000c260:	4618      	mov	r0, r3
1000c262:	f7ff ff9b 	bl	1000c19c <metal_device_io_region>
1000c266:	4603      	mov	r3, r0
1000c268:	4a27      	ldr	r2, [pc, #156]	; (1000c308 <OPENAMP_shmem_init+0x134>)
1000c26a:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
1000c26c:	4b26      	ldr	r3, [pc, #152]	; (1000c308 <OPENAMP_shmem_init+0x134>)
1000c26e:	681b      	ldr	r3, [r3, #0]
1000c270:	2b00      	cmp	r3, #0
1000c272:	d102      	bne.n	1000c27a <OPENAMP_shmem_init+0xa6>
    return -1;
1000c274:	f04f 33ff 	mov.w	r3, #4294967295
1000c278:	e034      	b.n	1000c2e4 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
1000c27a:	f107 0208 	add.w	r2, r7, #8
1000c27e:	f107 030c 	add.w	r3, r7, #12
1000c282:	4619      	mov	r1, r3
1000c284:	6878      	ldr	r0, [r7, #4]
1000c286:	f000 f8d9 	bl	1000c43c <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
1000c28a:	68fb      	ldr	r3, [r7, #12]
1000c28c:	4a1f      	ldr	r2, [pc, #124]	; (1000c30c <OPENAMP_shmem_init+0x138>)
1000c28e:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
1000c290:	4b1e      	ldr	r3, [pc, #120]	; (1000c30c <OPENAMP_shmem_init+0x138>)
1000c292:	681b      	ldr	r3, [r3, #0]
1000c294:	2b00      	cmp	r3, #0
1000c296:	d102      	bne.n	1000c29e <OPENAMP_shmem_init+0xca>
  {
    return -1;
1000c298:	f04f 33ff 	mov.w	r3, #4294967295
1000c29c:	e022      	b.n	1000c2e4 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
1000c29e:	69bb      	ldr	r3, [r7, #24]
1000c2a0:	f103 0044 	add.w	r0, r3, #68	; 0x44
1000c2a4:	4b19      	ldr	r3, [pc, #100]	; (1000c30c <OPENAMP_shmem_init+0x138>)
1000c2a6:	6819      	ldr	r1, [r3, #0]
1000c2a8:	4b18      	ldr	r3, [pc, #96]	; (1000c30c <OPENAMP_shmem_init+0x138>)
1000c2aa:	681a      	ldr	r2, [r3, #0]
1000c2ac:	68bb      	ldr	r3, [r7, #8]
1000c2ae:	461c      	mov	r4, r3
1000c2b0:	2300      	movs	r3, #0
1000c2b2:	9302      	str	r3, [sp, #8]
1000c2b4:	2300      	movs	r3, #0
1000c2b6:	9301      	str	r3, [sp, #4]
1000c2b8:	f04f 33ff 	mov.w	r3, #4294967295
1000c2bc:	9300      	str	r3, [sp, #0]
1000c2be:	4623      	mov	r3, r4
1000c2c0:	f7fe fa4a 	bl	1000a758 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
1000c2c4:	69bb      	ldr	r3, [r7, #24]
1000c2c6:	2101      	movs	r1, #1
1000c2c8:	4618      	mov	r0, r3
1000c2ca:	f7ff ff67 	bl	1000c19c <metal_device_io_region>
1000c2ce:	4603      	mov	r3, r0
1000c2d0:	4a0f      	ldr	r2, [pc, #60]	; (1000c310 <OPENAMP_shmem_init+0x13c>)
1000c2d2:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
1000c2d4:	4b0e      	ldr	r3, [pc, #56]	; (1000c310 <OPENAMP_shmem_init+0x13c>)
1000c2d6:	681b      	ldr	r3, [r3, #0]
1000c2d8:	2b00      	cmp	r3, #0
1000c2da:	d102      	bne.n	1000c2e2 <OPENAMP_shmem_init+0x10e>
    return -1;
1000c2dc:	f04f 33ff 	mov.w	r3, #4294967295
1000c2e0:	e000      	b.n	1000c2e4 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
1000c2e2:	2300      	movs	r3, #0
}
1000c2e4:	4618      	mov	r0, r3
1000c2e6:	3724      	adds	r7, #36	; 0x24
1000c2e8:	46bd      	mov	sp, r7
1000c2ea:	bd90      	pop	{r4, r7, pc}
1000c2ec:	1000daec 	.word	0x1000daec
1000c2f0:	10020038 	.word	0x10020038
1000c2f4:	1000dad8 	.word	0x1000dad8
1000c2f8:	1000dae4 	.word	0x1000dae4
1000c2fc:	10040000 	.word	0x10040000
1000c300:	10020448 	.word	0x10020448
1000c304:	10050000 	.word	0x10050000
1000c308:	100203a4 	.word	0x100203a4
1000c30c:	100203ac 	.word	0x100203ac
1000c310:	100203a8 	.word	0x100203a8

1000c314 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
1000c314:	b590      	push	{r4, r7, lr}
1000c316:	b08b      	sub	sp, #44	; 0x2c
1000c318:	af04      	add	r7, sp, #16
1000c31a:	6078      	str	r0, [r7, #4]
1000c31c:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
1000c31e:	2300      	movs	r3, #0
1000c320:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
1000c322:	2300      	movs	r3, #0
1000c324:	613b      	str	r3, [r7, #16]
  int status = 0;
1000c326:	2300      	movs	r3, #0
1000c328:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
1000c32a:	f7ff feb5 	bl	1000c098 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
1000c32e:	6878      	ldr	r0, [r7, #4]
1000c330:	f7ff ff50 	bl	1000c1d4 <OPENAMP_shmem_init>
1000c334:	60f8      	str	r0, [r7, #12]
  if(status)
1000c336:	68fb      	ldr	r3, [r7, #12]
1000c338:	2b00      	cmp	r3, #0
1000c33a:	d001      	beq.n	1000c340 <MX_OPENAMP_Init+0x2c>
  {
    return status;
1000c33c:	68fb      	ldr	r3, [r7, #12]
1000c33e:	e068      	b.n	1000c412 <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
1000c340:	6878      	ldr	r0, [r7, #4]
1000c342:	4b36      	ldr	r3, [pc, #216]	; (1000c41c <MX_OPENAMP_Init+0x108>)
1000c344:	681b      	ldr	r3, [r3, #0]
1000c346:	f103 0218 	add.w	r2, r3, #24
1000c34a:	4b35      	ldr	r3, [pc, #212]	; (1000c420 <MX_OPENAMP_Init+0x10c>)
1000c34c:	681b      	ldr	r3, [r3, #0]
1000c34e:	2100      	movs	r1, #0
1000c350:	9102      	str	r1, [sp, #8]
1000c352:	4934      	ldr	r1, [pc, #208]	; (1000c424 <MX_OPENAMP_Init+0x110>)
1000c354:	9101      	str	r1, [sp, #4]
1000c356:	2100      	movs	r1, #0
1000c358:	9100      	str	r1, [sp, #0]
1000c35a:	21ff      	movs	r1, #255	; 0xff
1000c35c:	f7fe fcfa 	bl	1000ad54 <rproc_virtio_create_vdev>
1000c360:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
1000c362:	693b      	ldr	r3, [r7, #16]
1000c364:	2b00      	cmp	r3, #0
1000c366:	d102      	bne.n	1000c36e <MX_OPENAMP_Init+0x5a>
  {
    return -1;
1000c368:	f04f 33ff 	mov.w	r3, #4294967295
1000c36c:	e051      	b.n	1000c412 <MX_OPENAMP_Init+0xfe>
  }

  rproc_virtio_wait_remote_ready(vdev);
1000c36e:	6938      	ldr	r0, [r7, #16]
1000c370:	f7fe fdcf 	bl	1000af12 <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
1000c374:	4b29      	ldr	r3, [pc, #164]	; (1000c41c <MX_OPENAMP_Init+0x108>)
1000c376:	681b      	ldr	r3, [r3, #0]
1000c378:	3334      	adds	r3, #52	; 0x34
1000c37a:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
1000c37c:	697b      	ldr	r3, [r7, #20]
1000c37e:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
1000c380:	697b      	ldr	r3, [r7, #20]
1000c382:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
1000c384:	461c      	mov	r4, r3
1000c386:	4b28      	ldr	r3, [pc, #160]	; (1000c428 <MX_OPENAMP_Init+0x114>)
1000c388:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
1000c38a:	697a      	ldr	r2, [r7, #20]
1000c38c:	6892      	ldr	r2, [r2, #8]
1000c38e:	6979      	ldr	r1, [r7, #20]
1000c390:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
1000c392:	9102      	str	r1, [sp, #8]
1000c394:	9201      	str	r2, [sp, #4]
1000c396:	9300      	str	r3, [sp, #0]
1000c398:	4623      	mov	r3, r4
1000c39a:	4602      	mov	r2, r0
1000c39c:	2100      	movs	r1, #0
1000c39e:	6938      	ldr	r0, [r7, #16]
1000c3a0:	f7fe fd86 	bl	1000aeb0 <rproc_virtio_init_vring>
1000c3a4:	60f8      	str	r0, [r7, #12]
  if (status != 0)
1000c3a6:	68fb      	ldr	r3, [r7, #12]
1000c3a8:	2b00      	cmp	r3, #0
1000c3aa:	d001      	beq.n	1000c3b0 <MX_OPENAMP_Init+0x9c>
  {
    return status;
1000c3ac:	68fb      	ldr	r3, [r7, #12]
1000c3ae:	e030      	b.n	1000c412 <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
1000c3b0:	4b1a      	ldr	r3, [pc, #104]	; (1000c41c <MX_OPENAMP_Init+0x108>)
1000c3b2:	681b      	ldr	r3, [r3, #0]
1000c3b4:	3348      	adds	r3, #72	; 0x48
1000c3b6:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
1000c3b8:	697b      	ldr	r3, [r7, #20]
1000c3ba:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
1000c3bc:	697b      	ldr	r3, [r7, #20]
1000c3be:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
1000c3c0:	461c      	mov	r4, r3
1000c3c2:	4b19      	ldr	r3, [pc, #100]	; (1000c428 <MX_OPENAMP_Init+0x114>)
1000c3c4:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
1000c3c6:	697a      	ldr	r2, [r7, #20]
1000c3c8:	6892      	ldr	r2, [r2, #8]
1000c3ca:	6979      	ldr	r1, [r7, #20]
1000c3cc:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
1000c3ce:	9102      	str	r1, [sp, #8]
1000c3d0:	9201      	str	r2, [sp, #4]
1000c3d2:	9300      	str	r3, [sp, #0]
1000c3d4:	4623      	mov	r3, r4
1000c3d6:	4602      	mov	r2, r0
1000c3d8:	2101      	movs	r1, #1
1000c3da:	6938      	ldr	r0, [r7, #16]
1000c3dc:	f7fe fd68 	bl	1000aeb0 <rproc_virtio_init_vring>
1000c3e0:	60f8      	str	r0, [r7, #12]
  if (status != 0)
1000c3e2:	68fb      	ldr	r3, [r7, #12]
1000c3e4:	2b00      	cmp	r3, #0
1000c3e6:	d001      	beq.n	1000c3ec <MX_OPENAMP_Init+0xd8>
  {
    return status;
1000c3e8:	68fb      	ldr	r3, [r7, #12]
1000c3ea:	e012      	b.n	1000c412 <MX_OPENAMP_Init+0xfe>
  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
                             (size_t)SHM_SIZE);
1000c3ec:	4a0f      	ldr	r2, [pc, #60]	; (1000c42c <MX_OPENAMP_Init+0x118>)
1000c3ee:	4b10      	ldr	r3, [pc, #64]	; (1000c430 <MX_OPENAMP_Init+0x11c>)
1000c3f0:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
1000c3f2:	461a      	mov	r2, r3
1000c3f4:	f04f 31ff 	mov.w	r1, #4294967295
1000c3f8:	480e      	ldr	r0, [pc, #56]	; (1000c434 <MX_OPENAMP_Init+0x120>)
1000c3fa:	f7fe ff86 	bl	1000b30a <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
1000c3fe:	4b0a      	ldr	r3, [pc, #40]	; (1000c428 <MX_OPENAMP_Init+0x114>)
1000c400:	681b      	ldr	r3, [r3, #0]
1000c402:	4a0c      	ldr	r2, [pc, #48]	; (1000c434 <MX_OPENAMP_Init+0x120>)
1000c404:	9200      	str	r2, [sp, #0]
1000c406:	683a      	ldr	r2, [r7, #0]
1000c408:	6939      	ldr	r1, [r7, #16]
1000c40a:	480b      	ldr	r0, [pc, #44]	; (1000c438 <MX_OPENAMP_Init+0x124>)
1000c40c:	f7ff fa7a 	bl	1000b904 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
1000c410:	2300      	movs	r3, #0
}
1000c412:	4618      	mov	r0, r3
1000c414:	371c      	adds	r7, #28
1000c416:	46bd      	mov	sp, r7
1000c418:	bd90      	pop	{r4, r7, pc}
1000c41a:	bf00      	nop
1000c41c:	100203ac 	.word	0x100203ac
1000c420:	100203a8 	.word	0x100203a8
1000c424:	1000c0e1 	.word	0x1000c0e1
1000c428:	100203a4 	.word	0x100203a4
1000c42c:	10050000 	.word	0x10050000
1000c430:	10040000 	.word	0x10040000
1000c434:	100203b0 	.word	0x100203b0
1000c438:	100203bc 	.word	0x100203bc

1000c43c <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
1000c43c:	b480      	push	{r7}
1000c43e:	b085      	sub	sp, #20
1000c440:	af00      	add	r7, sp, #0
1000c442:	60f8      	str	r0, [r7, #12]
1000c444:	60b9      	str	r1, [r7, #8]
1000c446:	607a      	str	r2, [r7, #4]
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
1000c448:	687b      	ldr	r3, [r7, #4]
1000c44a:	228c      	movs	r2, #140	; 0x8c
1000c44c:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
1000c44e:	68bb      	ldr	r3, [r7, #8]
1000c450:	4a03      	ldr	r2, [pc, #12]	; (1000c460 <resource_table_init+0x24>)
1000c452:	601a      	str	r2, [r3, #0]
}
1000c454:	bf00      	nop
1000c456:	3714      	adds	r7, #20
1000c458:	46bd      	mov	sp, r7
1000c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c45e:	4770      	bx	lr
1000c460:	10020120 	.word	0x10020120

1000c464 <__assert_func>:
1000c464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000c466:	4614      	mov	r4, r2
1000c468:	461a      	mov	r2, r3
1000c46a:	4b09      	ldr	r3, [pc, #36]	; (1000c490 <__assert_func+0x2c>)
1000c46c:	681b      	ldr	r3, [r3, #0]
1000c46e:	4605      	mov	r5, r0
1000c470:	68d8      	ldr	r0, [r3, #12]
1000c472:	b14c      	cbz	r4, 1000c488 <__assert_func+0x24>
1000c474:	4b07      	ldr	r3, [pc, #28]	; (1000c494 <__assert_func+0x30>)
1000c476:	9100      	str	r1, [sp, #0]
1000c478:	e9cd 3401 	strd	r3, r4, [sp, #4]
1000c47c:	4906      	ldr	r1, [pc, #24]	; (1000c498 <__assert_func+0x34>)
1000c47e:	462b      	mov	r3, r5
1000c480:	f000 f96e 	bl	1000c760 <fiprintf>
1000c484:	f000 fabd 	bl	1000ca02 <abort>
1000c488:	4b04      	ldr	r3, [pc, #16]	; (1000c49c <__assert_func+0x38>)
1000c48a:	461c      	mov	r4, r3
1000c48c:	e7f3      	b.n	1000c476 <__assert_func+0x12>
1000c48e:	bf00      	nop
1000c490:	1002011c 	.word	0x1002011c
1000c494:	1000dbb1 	.word	0x1000dbb1
1000c498:	1000dbbe 	.word	0x1000dbbe
1000c49c:	1000dbec 	.word	0x1000dbec

1000c4a0 <malloc>:
1000c4a0:	4b02      	ldr	r3, [pc, #8]	; (1000c4ac <malloc+0xc>)
1000c4a2:	4601      	mov	r1, r0
1000c4a4:	6818      	ldr	r0, [r3, #0]
1000c4a6:	f000 b82b 	b.w	1000c500 <_malloc_r>
1000c4aa:	bf00      	nop
1000c4ac:	1002011c 	.word	0x1002011c

1000c4b0 <free>:
1000c4b0:	4b02      	ldr	r3, [pc, #8]	; (1000c4bc <free+0xc>)
1000c4b2:	4601      	mov	r1, r0
1000c4b4:	6818      	ldr	r0, [r3, #0]
1000c4b6:	f000 baab 	b.w	1000ca10 <_free_r>
1000c4ba:	bf00      	nop
1000c4bc:	1002011c 	.word	0x1002011c

1000c4c0 <sbrk_aligned>:
1000c4c0:	b570      	push	{r4, r5, r6, lr}
1000c4c2:	4e0e      	ldr	r6, [pc, #56]	; (1000c4fc <sbrk_aligned+0x3c>)
1000c4c4:	460c      	mov	r4, r1
1000c4c6:	6831      	ldr	r1, [r6, #0]
1000c4c8:	4605      	mov	r5, r0
1000c4ca:	b911      	cbnz	r1, 1000c4d2 <sbrk_aligned+0x12>
1000c4cc:	f000 fa3c 	bl	1000c948 <_sbrk_r>
1000c4d0:	6030      	str	r0, [r6, #0]
1000c4d2:	4621      	mov	r1, r4
1000c4d4:	4628      	mov	r0, r5
1000c4d6:	f000 fa37 	bl	1000c948 <_sbrk_r>
1000c4da:	1c43      	adds	r3, r0, #1
1000c4dc:	d00a      	beq.n	1000c4f4 <sbrk_aligned+0x34>
1000c4de:	1cc4      	adds	r4, r0, #3
1000c4e0:	f024 0403 	bic.w	r4, r4, #3
1000c4e4:	42a0      	cmp	r0, r4
1000c4e6:	d007      	beq.n	1000c4f8 <sbrk_aligned+0x38>
1000c4e8:	1a21      	subs	r1, r4, r0
1000c4ea:	4628      	mov	r0, r5
1000c4ec:	f000 fa2c 	bl	1000c948 <_sbrk_r>
1000c4f0:	3001      	adds	r0, #1
1000c4f2:	d101      	bne.n	1000c4f8 <sbrk_aligned+0x38>
1000c4f4:	f04f 34ff 	mov.w	r4, #4294967295
1000c4f8:	4620      	mov	r0, r4
1000c4fa:	bd70      	pop	{r4, r5, r6, pc}
1000c4fc:	10020450 	.word	0x10020450

1000c500 <_malloc_r>:
1000c500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1000c504:	1ccd      	adds	r5, r1, #3
1000c506:	f025 0503 	bic.w	r5, r5, #3
1000c50a:	3508      	adds	r5, #8
1000c50c:	2d0c      	cmp	r5, #12
1000c50e:	bf38      	it	cc
1000c510:	250c      	movcc	r5, #12
1000c512:	2d00      	cmp	r5, #0
1000c514:	4607      	mov	r7, r0
1000c516:	db01      	blt.n	1000c51c <_malloc_r+0x1c>
1000c518:	42a9      	cmp	r1, r5
1000c51a:	d905      	bls.n	1000c528 <_malloc_r+0x28>
1000c51c:	230c      	movs	r3, #12
1000c51e:	603b      	str	r3, [r7, #0]
1000c520:	2600      	movs	r6, #0
1000c522:	4630      	mov	r0, r6
1000c524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000c528:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 1000c5fc <_malloc_r+0xfc>
1000c52c:	f000 f868 	bl	1000c600 <__malloc_lock>
1000c530:	f8d8 3000 	ldr.w	r3, [r8]
1000c534:	461c      	mov	r4, r3
1000c536:	bb5c      	cbnz	r4, 1000c590 <_malloc_r+0x90>
1000c538:	4629      	mov	r1, r5
1000c53a:	4638      	mov	r0, r7
1000c53c:	f7ff ffc0 	bl	1000c4c0 <sbrk_aligned>
1000c540:	1c43      	adds	r3, r0, #1
1000c542:	4604      	mov	r4, r0
1000c544:	d155      	bne.n	1000c5f2 <_malloc_r+0xf2>
1000c546:	f8d8 4000 	ldr.w	r4, [r8]
1000c54a:	4626      	mov	r6, r4
1000c54c:	2e00      	cmp	r6, #0
1000c54e:	d145      	bne.n	1000c5dc <_malloc_r+0xdc>
1000c550:	2c00      	cmp	r4, #0
1000c552:	d048      	beq.n	1000c5e6 <_malloc_r+0xe6>
1000c554:	6823      	ldr	r3, [r4, #0]
1000c556:	4631      	mov	r1, r6
1000c558:	4638      	mov	r0, r7
1000c55a:	eb04 0903 	add.w	r9, r4, r3
1000c55e:	f000 f9f3 	bl	1000c948 <_sbrk_r>
1000c562:	4581      	cmp	r9, r0
1000c564:	d13f      	bne.n	1000c5e6 <_malloc_r+0xe6>
1000c566:	6821      	ldr	r1, [r4, #0]
1000c568:	1a6d      	subs	r5, r5, r1
1000c56a:	4629      	mov	r1, r5
1000c56c:	4638      	mov	r0, r7
1000c56e:	f7ff ffa7 	bl	1000c4c0 <sbrk_aligned>
1000c572:	3001      	adds	r0, #1
1000c574:	d037      	beq.n	1000c5e6 <_malloc_r+0xe6>
1000c576:	6823      	ldr	r3, [r4, #0]
1000c578:	442b      	add	r3, r5
1000c57a:	6023      	str	r3, [r4, #0]
1000c57c:	f8d8 3000 	ldr.w	r3, [r8]
1000c580:	2b00      	cmp	r3, #0
1000c582:	d038      	beq.n	1000c5f6 <_malloc_r+0xf6>
1000c584:	685a      	ldr	r2, [r3, #4]
1000c586:	42a2      	cmp	r2, r4
1000c588:	d12b      	bne.n	1000c5e2 <_malloc_r+0xe2>
1000c58a:	2200      	movs	r2, #0
1000c58c:	605a      	str	r2, [r3, #4]
1000c58e:	e00f      	b.n	1000c5b0 <_malloc_r+0xb0>
1000c590:	6822      	ldr	r2, [r4, #0]
1000c592:	1b52      	subs	r2, r2, r5
1000c594:	d41f      	bmi.n	1000c5d6 <_malloc_r+0xd6>
1000c596:	2a0b      	cmp	r2, #11
1000c598:	d917      	bls.n	1000c5ca <_malloc_r+0xca>
1000c59a:	1961      	adds	r1, r4, r5
1000c59c:	42a3      	cmp	r3, r4
1000c59e:	6025      	str	r5, [r4, #0]
1000c5a0:	bf18      	it	ne
1000c5a2:	6059      	strne	r1, [r3, #4]
1000c5a4:	6863      	ldr	r3, [r4, #4]
1000c5a6:	bf08      	it	eq
1000c5a8:	f8c8 1000 	streq.w	r1, [r8]
1000c5ac:	5162      	str	r2, [r4, r5]
1000c5ae:	604b      	str	r3, [r1, #4]
1000c5b0:	4638      	mov	r0, r7
1000c5b2:	f104 060b 	add.w	r6, r4, #11
1000c5b6:	f000 f829 	bl	1000c60c <__malloc_unlock>
1000c5ba:	f026 0607 	bic.w	r6, r6, #7
1000c5be:	1d23      	adds	r3, r4, #4
1000c5c0:	1af2      	subs	r2, r6, r3
1000c5c2:	d0ae      	beq.n	1000c522 <_malloc_r+0x22>
1000c5c4:	1b9b      	subs	r3, r3, r6
1000c5c6:	50a3      	str	r3, [r4, r2]
1000c5c8:	e7ab      	b.n	1000c522 <_malloc_r+0x22>
1000c5ca:	42a3      	cmp	r3, r4
1000c5cc:	6862      	ldr	r2, [r4, #4]
1000c5ce:	d1dd      	bne.n	1000c58c <_malloc_r+0x8c>
1000c5d0:	f8c8 2000 	str.w	r2, [r8]
1000c5d4:	e7ec      	b.n	1000c5b0 <_malloc_r+0xb0>
1000c5d6:	4623      	mov	r3, r4
1000c5d8:	6864      	ldr	r4, [r4, #4]
1000c5da:	e7ac      	b.n	1000c536 <_malloc_r+0x36>
1000c5dc:	4634      	mov	r4, r6
1000c5de:	6876      	ldr	r6, [r6, #4]
1000c5e0:	e7b4      	b.n	1000c54c <_malloc_r+0x4c>
1000c5e2:	4613      	mov	r3, r2
1000c5e4:	e7cc      	b.n	1000c580 <_malloc_r+0x80>
1000c5e6:	230c      	movs	r3, #12
1000c5e8:	603b      	str	r3, [r7, #0]
1000c5ea:	4638      	mov	r0, r7
1000c5ec:	f000 f80e 	bl	1000c60c <__malloc_unlock>
1000c5f0:	e797      	b.n	1000c522 <_malloc_r+0x22>
1000c5f2:	6025      	str	r5, [r4, #0]
1000c5f4:	e7dc      	b.n	1000c5b0 <_malloc_r+0xb0>
1000c5f6:	605b      	str	r3, [r3, #4]
1000c5f8:	deff      	udf	#255	; 0xff
1000c5fa:	bf00      	nop
1000c5fc:	1002044c 	.word	0x1002044c

1000c600 <__malloc_lock>:
1000c600:	4801      	ldr	r0, [pc, #4]	; (1000c608 <__malloc_lock+0x8>)
1000c602:	f000 b9ee 	b.w	1000c9e2 <__retarget_lock_acquire_recursive>
1000c606:	bf00      	nop
1000c608:	10020594 	.word	0x10020594

1000c60c <__malloc_unlock>:
1000c60c:	4801      	ldr	r0, [pc, #4]	; (1000c614 <__malloc_unlock+0x8>)
1000c60e:	f000 b9e9 	b.w	1000c9e4 <__retarget_lock_release_recursive>
1000c612:	bf00      	nop
1000c614:	10020594 	.word	0x10020594

1000c618 <std>:
1000c618:	2300      	movs	r3, #0
1000c61a:	b510      	push	{r4, lr}
1000c61c:	4604      	mov	r4, r0
1000c61e:	e9c0 3300 	strd	r3, r3, [r0]
1000c622:	e9c0 3304 	strd	r3, r3, [r0, #16]
1000c626:	6083      	str	r3, [r0, #8]
1000c628:	8181      	strh	r1, [r0, #12]
1000c62a:	6643      	str	r3, [r0, #100]	; 0x64
1000c62c:	81c2      	strh	r2, [r0, #14]
1000c62e:	6183      	str	r3, [r0, #24]
1000c630:	4619      	mov	r1, r3
1000c632:	2208      	movs	r2, #8
1000c634:	305c      	adds	r0, #92	; 0x5c
1000c636:	f000 f926 	bl	1000c886 <memset>
1000c63a:	4b0d      	ldr	r3, [pc, #52]	; (1000c670 <std+0x58>)
1000c63c:	6263      	str	r3, [r4, #36]	; 0x24
1000c63e:	4b0d      	ldr	r3, [pc, #52]	; (1000c674 <std+0x5c>)
1000c640:	62a3      	str	r3, [r4, #40]	; 0x28
1000c642:	4b0d      	ldr	r3, [pc, #52]	; (1000c678 <std+0x60>)
1000c644:	62e3      	str	r3, [r4, #44]	; 0x2c
1000c646:	4b0d      	ldr	r3, [pc, #52]	; (1000c67c <std+0x64>)
1000c648:	6323      	str	r3, [r4, #48]	; 0x30
1000c64a:	4b0d      	ldr	r3, [pc, #52]	; (1000c680 <std+0x68>)
1000c64c:	6224      	str	r4, [r4, #32]
1000c64e:	429c      	cmp	r4, r3
1000c650:	d006      	beq.n	1000c660 <std+0x48>
1000c652:	f103 0268 	add.w	r2, r3, #104	; 0x68
1000c656:	4294      	cmp	r4, r2
1000c658:	d002      	beq.n	1000c660 <std+0x48>
1000c65a:	33d0      	adds	r3, #208	; 0xd0
1000c65c:	429c      	cmp	r4, r3
1000c65e:	d105      	bne.n	1000c66c <std+0x54>
1000c660:	f104 0058 	add.w	r0, r4, #88	; 0x58
1000c664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000c668:	f000 b9ba 	b.w	1000c9e0 <__retarget_lock_init_recursive>
1000c66c:	bd10      	pop	{r4, pc}
1000c66e:	bf00      	nop
1000c670:	1000c801 	.word	0x1000c801
1000c674:	1000c823 	.word	0x1000c823
1000c678:	1000c85b 	.word	0x1000c85b
1000c67c:	1000c87f 	.word	0x1000c87f
1000c680:	10020454 	.word	0x10020454

1000c684 <stdio_exit_handler>:
1000c684:	4a02      	ldr	r2, [pc, #8]	; (1000c690 <stdio_exit_handler+0xc>)
1000c686:	4903      	ldr	r1, [pc, #12]	; (1000c694 <stdio_exit_handler+0x10>)
1000c688:	4803      	ldr	r0, [pc, #12]	; (1000c698 <stdio_exit_handler+0x14>)
1000c68a:	f000 b87b 	b.w	1000c784 <_fwalk_sglue>
1000c68e:	bf00      	nop
1000c690:	100200c4 	.word	0x100200c4
1000c694:	1000d40d 	.word	0x1000d40d
1000c698:	100200d0 	.word	0x100200d0

1000c69c <cleanup_stdio>:
1000c69c:	6841      	ldr	r1, [r0, #4]
1000c69e:	4b0c      	ldr	r3, [pc, #48]	; (1000c6d0 <cleanup_stdio+0x34>)
1000c6a0:	4299      	cmp	r1, r3
1000c6a2:	b510      	push	{r4, lr}
1000c6a4:	4604      	mov	r4, r0
1000c6a6:	d001      	beq.n	1000c6ac <cleanup_stdio+0x10>
1000c6a8:	f000 feb0 	bl	1000d40c <_fflush_r>
1000c6ac:	68a1      	ldr	r1, [r4, #8]
1000c6ae:	4b09      	ldr	r3, [pc, #36]	; (1000c6d4 <cleanup_stdio+0x38>)
1000c6b0:	4299      	cmp	r1, r3
1000c6b2:	d002      	beq.n	1000c6ba <cleanup_stdio+0x1e>
1000c6b4:	4620      	mov	r0, r4
1000c6b6:	f000 fea9 	bl	1000d40c <_fflush_r>
1000c6ba:	68e1      	ldr	r1, [r4, #12]
1000c6bc:	4b06      	ldr	r3, [pc, #24]	; (1000c6d8 <cleanup_stdio+0x3c>)
1000c6be:	4299      	cmp	r1, r3
1000c6c0:	d004      	beq.n	1000c6cc <cleanup_stdio+0x30>
1000c6c2:	4620      	mov	r0, r4
1000c6c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000c6c8:	f000 bea0 	b.w	1000d40c <_fflush_r>
1000c6cc:	bd10      	pop	{r4, pc}
1000c6ce:	bf00      	nop
1000c6d0:	10020454 	.word	0x10020454
1000c6d4:	100204bc 	.word	0x100204bc
1000c6d8:	10020524 	.word	0x10020524

1000c6dc <global_stdio_init.part.0>:
1000c6dc:	b510      	push	{r4, lr}
1000c6de:	4b0b      	ldr	r3, [pc, #44]	; (1000c70c <global_stdio_init.part.0+0x30>)
1000c6e0:	4c0b      	ldr	r4, [pc, #44]	; (1000c710 <global_stdio_init.part.0+0x34>)
1000c6e2:	4a0c      	ldr	r2, [pc, #48]	; (1000c714 <global_stdio_init.part.0+0x38>)
1000c6e4:	601a      	str	r2, [r3, #0]
1000c6e6:	4620      	mov	r0, r4
1000c6e8:	2200      	movs	r2, #0
1000c6ea:	2104      	movs	r1, #4
1000c6ec:	f7ff ff94 	bl	1000c618 <std>
1000c6f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
1000c6f4:	2201      	movs	r2, #1
1000c6f6:	2109      	movs	r1, #9
1000c6f8:	f7ff ff8e 	bl	1000c618 <std>
1000c6fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
1000c700:	2202      	movs	r2, #2
1000c702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000c706:	2112      	movs	r1, #18
1000c708:	f7ff bf86 	b.w	1000c618 <std>
1000c70c:	1002058c 	.word	0x1002058c
1000c710:	10020454 	.word	0x10020454
1000c714:	1000c685 	.word	0x1000c685

1000c718 <__sfp_lock_acquire>:
1000c718:	4801      	ldr	r0, [pc, #4]	; (1000c720 <__sfp_lock_acquire+0x8>)
1000c71a:	f000 b962 	b.w	1000c9e2 <__retarget_lock_acquire_recursive>
1000c71e:	bf00      	nop
1000c720:	10020595 	.word	0x10020595

1000c724 <__sfp_lock_release>:
1000c724:	4801      	ldr	r0, [pc, #4]	; (1000c72c <__sfp_lock_release+0x8>)
1000c726:	f000 b95d 	b.w	1000c9e4 <__retarget_lock_release_recursive>
1000c72a:	bf00      	nop
1000c72c:	10020595 	.word	0x10020595

1000c730 <__sinit>:
1000c730:	b510      	push	{r4, lr}
1000c732:	4604      	mov	r4, r0
1000c734:	f7ff fff0 	bl	1000c718 <__sfp_lock_acquire>
1000c738:	6a23      	ldr	r3, [r4, #32]
1000c73a:	b11b      	cbz	r3, 1000c744 <__sinit+0x14>
1000c73c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000c740:	f7ff bff0 	b.w	1000c724 <__sfp_lock_release>
1000c744:	4b04      	ldr	r3, [pc, #16]	; (1000c758 <__sinit+0x28>)
1000c746:	6223      	str	r3, [r4, #32]
1000c748:	4b04      	ldr	r3, [pc, #16]	; (1000c75c <__sinit+0x2c>)
1000c74a:	681b      	ldr	r3, [r3, #0]
1000c74c:	2b00      	cmp	r3, #0
1000c74e:	d1f5      	bne.n	1000c73c <__sinit+0xc>
1000c750:	f7ff ffc4 	bl	1000c6dc <global_stdio_init.part.0>
1000c754:	e7f2      	b.n	1000c73c <__sinit+0xc>
1000c756:	bf00      	nop
1000c758:	1000c69d 	.word	0x1000c69d
1000c75c:	1002058c 	.word	0x1002058c

1000c760 <fiprintf>:
1000c760:	b40e      	push	{r1, r2, r3}
1000c762:	b503      	push	{r0, r1, lr}
1000c764:	4601      	mov	r1, r0
1000c766:	ab03      	add	r3, sp, #12
1000c768:	4805      	ldr	r0, [pc, #20]	; (1000c780 <fiprintf+0x20>)
1000c76a:	f853 2b04 	ldr.w	r2, [r3], #4
1000c76e:	6800      	ldr	r0, [r0, #0]
1000c770:	9301      	str	r3, [sp, #4]
1000c772:	f000 fb1b 	bl	1000cdac <_vfiprintf_r>
1000c776:	b002      	add	sp, #8
1000c778:	f85d eb04 	ldr.w	lr, [sp], #4
1000c77c:	b003      	add	sp, #12
1000c77e:	4770      	bx	lr
1000c780:	1002011c 	.word	0x1002011c

1000c784 <_fwalk_sglue>:
1000c784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1000c788:	4607      	mov	r7, r0
1000c78a:	4688      	mov	r8, r1
1000c78c:	4614      	mov	r4, r2
1000c78e:	2600      	movs	r6, #0
1000c790:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
1000c794:	f1b9 0901 	subs.w	r9, r9, #1
1000c798:	d505      	bpl.n	1000c7a6 <_fwalk_sglue+0x22>
1000c79a:	6824      	ldr	r4, [r4, #0]
1000c79c:	2c00      	cmp	r4, #0
1000c79e:	d1f7      	bne.n	1000c790 <_fwalk_sglue+0xc>
1000c7a0:	4630      	mov	r0, r6
1000c7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000c7a6:	89ab      	ldrh	r3, [r5, #12]
1000c7a8:	2b01      	cmp	r3, #1
1000c7aa:	d907      	bls.n	1000c7bc <_fwalk_sglue+0x38>
1000c7ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1000c7b0:	3301      	adds	r3, #1
1000c7b2:	d003      	beq.n	1000c7bc <_fwalk_sglue+0x38>
1000c7b4:	4629      	mov	r1, r5
1000c7b6:	4638      	mov	r0, r7
1000c7b8:	47c0      	blx	r8
1000c7ba:	4306      	orrs	r6, r0
1000c7bc:	3568      	adds	r5, #104	; 0x68
1000c7be:	e7e9      	b.n	1000c794 <_fwalk_sglue+0x10>

1000c7c0 <siprintf>:
1000c7c0:	b40e      	push	{r1, r2, r3}
1000c7c2:	b500      	push	{lr}
1000c7c4:	b09c      	sub	sp, #112	; 0x70
1000c7c6:	ab1d      	add	r3, sp, #116	; 0x74
1000c7c8:	9002      	str	r0, [sp, #8]
1000c7ca:	9006      	str	r0, [sp, #24]
1000c7cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
1000c7d0:	4809      	ldr	r0, [pc, #36]	; (1000c7f8 <siprintf+0x38>)
1000c7d2:	9107      	str	r1, [sp, #28]
1000c7d4:	9104      	str	r1, [sp, #16]
1000c7d6:	4909      	ldr	r1, [pc, #36]	; (1000c7fc <siprintf+0x3c>)
1000c7d8:	f853 2b04 	ldr.w	r2, [r3], #4
1000c7dc:	9105      	str	r1, [sp, #20]
1000c7de:	6800      	ldr	r0, [r0, #0]
1000c7e0:	9301      	str	r3, [sp, #4]
1000c7e2:	a902      	add	r1, sp, #8
1000c7e4:	f000 f9ba 	bl	1000cb5c <_svfiprintf_r>
1000c7e8:	9b02      	ldr	r3, [sp, #8]
1000c7ea:	2200      	movs	r2, #0
1000c7ec:	701a      	strb	r2, [r3, #0]
1000c7ee:	b01c      	add	sp, #112	; 0x70
1000c7f0:	f85d eb04 	ldr.w	lr, [sp], #4
1000c7f4:	b003      	add	sp, #12
1000c7f6:	4770      	bx	lr
1000c7f8:	1002011c 	.word	0x1002011c
1000c7fc:	ffff0208 	.word	0xffff0208

1000c800 <__sread>:
1000c800:	b510      	push	{r4, lr}
1000c802:	460c      	mov	r4, r1
1000c804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000c808:	f000 f88c 	bl	1000c924 <_read_r>
1000c80c:	2800      	cmp	r0, #0
1000c80e:	bfab      	itete	ge
1000c810:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1000c812:	89a3      	ldrhlt	r3, [r4, #12]
1000c814:	181b      	addge	r3, r3, r0
1000c816:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1000c81a:	bfac      	ite	ge
1000c81c:	6563      	strge	r3, [r4, #84]	; 0x54
1000c81e:	81a3      	strhlt	r3, [r4, #12]
1000c820:	bd10      	pop	{r4, pc}

1000c822 <__swrite>:
1000c822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000c826:	461f      	mov	r7, r3
1000c828:	898b      	ldrh	r3, [r1, #12]
1000c82a:	05db      	lsls	r3, r3, #23
1000c82c:	4605      	mov	r5, r0
1000c82e:	460c      	mov	r4, r1
1000c830:	4616      	mov	r6, r2
1000c832:	d505      	bpl.n	1000c840 <__swrite+0x1e>
1000c834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000c838:	2302      	movs	r3, #2
1000c83a:	2200      	movs	r2, #0
1000c83c:	f000 f860 	bl	1000c900 <_lseek_r>
1000c840:	89a3      	ldrh	r3, [r4, #12]
1000c842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1000c846:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1000c84a:	81a3      	strh	r3, [r4, #12]
1000c84c:	4632      	mov	r2, r6
1000c84e:	463b      	mov	r3, r7
1000c850:	4628      	mov	r0, r5
1000c852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1000c856:	f000 b887 	b.w	1000c968 <_write_r>

1000c85a <__sseek>:
1000c85a:	b510      	push	{r4, lr}
1000c85c:	460c      	mov	r4, r1
1000c85e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000c862:	f000 f84d 	bl	1000c900 <_lseek_r>
1000c866:	1c43      	adds	r3, r0, #1
1000c868:	89a3      	ldrh	r3, [r4, #12]
1000c86a:	bf15      	itete	ne
1000c86c:	6560      	strne	r0, [r4, #84]	; 0x54
1000c86e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1000c872:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1000c876:	81a3      	strheq	r3, [r4, #12]
1000c878:	bf18      	it	ne
1000c87a:	81a3      	strhne	r3, [r4, #12]
1000c87c:	bd10      	pop	{r4, pc}

1000c87e <__sclose>:
1000c87e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000c882:	f000 b82d 	b.w	1000c8e0 <_close_r>

1000c886 <memset>:
1000c886:	4402      	add	r2, r0
1000c888:	4603      	mov	r3, r0
1000c88a:	4293      	cmp	r3, r2
1000c88c:	d100      	bne.n	1000c890 <memset+0xa>
1000c88e:	4770      	bx	lr
1000c890:	f803 1b01 	strb.w	r1, [r3], #1
1000c894:	e7f9      	b.n	1000c88a <memset+0x4>

1000c896 <strncmp>:
1000c896:	b510      	push	{r4, lr}
1000c898:	b16a      	cbz	r2, 1000c8b6 <strncmp+0x20>
1000c89a:	3901      	subs	r1, #1
1000c89c:	1884      	adds	r4, r0, r2
1000c89e:	f810 2b01 	ldrb.w	r2, [r0], #1
1000c8a2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
1000c8a6:	429a      	cmp	r2, r3
1000c8a8:	d103      	bne.n	1000c8b2 <strncmp+0x1c>
1000c8aa:	42a0      	cmp	r0, r4
1000c8ac:	d001      	beq.n	1000c8b2 <strncmp+0x1c>
1000c8ae:	2a00      	cmp	r2, #0
1000c8b0:	d1f5      	bne.n	1000c89e <strncmp+0x8>
1000c8b2:	1ad0      	subs	r0, r2, r3
1000c8b4:	bd10      	pop	{r4, pc}
1000c8b6:	4610      	mov	r0, r2
1000c8b8:	e7fc      	b.n	1000c8b4 <strncmp+0x1e>

1000c8ba <strncpy>:
1000c8ba:	b510      	push	{r4, lr}
1000c8bc:	3901      	subs	r1, #1
1000c8be:	4603      	mov	r3, r0
1000c8c0:	b132      	cbz	r2, 1000c8d0 <strncpy+0x16>
1000c8c2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1000c8c6:	f803 4b01 	strb.w	r4, [r3], #1
1000c8ca:	3a01      	subs	r2, #1
1000c8cc:	2c00      	cmp	r4, #0
1000c8ce:	d1f7      	bne.n	1000c8c0 <strncpy+0x6>
1000c8d0:	441a      	add	r2, r3
1000c8d2:	2100      	movs	r1, #0
1000c8d4:	4293      	cmp	r3, r2
1000c8d6:	d100      	bne.n	1000c8da <strncpy+0x20>
1000c8d8:	bd10      	pop	{r4, pc}
1000c8da:	f803 1b01 	strb.w	r1, [r3], #1
1000c8de:	e7f9      	b.n	1000c8d4 <strncpy+0x1a>

1000c8e0 <_close_r>:
1000c8e0:	b538      	push	{r3, r4, r5, lr}
1000c8e2:	4d06      	ldr	r5, [pc, #24]	; (1000c8fc <_close_r+0x1c>)
1000c8e4:	2300      	movs	r3, #0
1000c8e6:	4604      	mov	r4, r0
1000c8e8:	4608      	mov	r0, r1
1000c8ea:	602b      	str	r3, [r5, #0]
1000c8ec:	f7f4 f99f 	bl	10000c2e <_close>
1000c8f0:	1c43      	adds	r3, r0, #1
1000c8f2:	d102      	bne.n	1000c8fa <_close_r+0x1a>
1000c8f4:	682b      	ldr	r3, [r5, #0]
1000c8f6:	b103      	cbz	r3, 1000c8fa <_close_r+0x1a>
1000c8f8:	6023      	str	r3, [r4, #0]
1000c8fa:	bd38      	pop	{r3, r4, r5, pc}
1000c8fc:	10020590 	.word	0x10020590

1000c900 <_lseek_r>:
1000c900:	b538      	push	{r3, r4, r5, lr}
1000c902:	4d07      	ldr	r5, [pc, #28]	; (1000c920 <_lseek_r+0x20>)
1000c904:	4604      	mov	r4, r0
1000c906:	4608      	mov	r0, r1
1000c908:	4611      	mov	r1, r2
1000c90a:	2200      	movs	r2, #0
1000c90c:	602a      	str	r2, [r5, #0]
1000c90e:	461a      	mov	r2, r3
1000c910:	f7f4 f9b4 	bl	10000c7c <_lseek>
1000c914:	1c43      	adds	r3, r0, #1
1000c916:	d102      	bne.n	1000c91e <_lseek_r+0x1e>
1000c918:	682b      	ldr	r3, [r5, #0]
1000c91a:	b103      	cbz	r3, 1000c91e <_lseek_r+0x1e>
1000c91c:	6023      	str	r3, [r4, #0]
1000c91e:	bd38      	pop	{r3, r4, r5, pc}
1000c920:	10020590 	.word	0x10020590

1000c924 <_read_r>:
1000c924:	b538      	push	{r3, r4, r5, lr}
1000c926:	4d07      	ldr	r5, [pc, #28]	; (1000c944 <_read_r+0x20>)
1000c928:	4604      	mov	r4, r0
1000c92a:	4608      	mov	r0, r1
1000c92c:	4611      	mov	r1, r2
1000c92e:	2200      	movs	r2, #0
1000c930:	602a      	str	r2, [r5, #0]
1000c932:	461a      	mov	r2, r3
1000c934:	f7f4 f942 	bl	10000bbc <_read>
1000c938:	1c43      	adds	r3, r0, #1
1000c93a:	d102      	bne.n	1000c942 <_read_r+0x1e>
1000c93c:	682b      	ldr	r3, [r5, #0]
1000c93e:	b103      	cbz	r3, 1000c942 <_read_r+0x1e>
1000c940:	6023      	str	r3, [r4, #0]
1000c942:	bd38      	pop	{r3, r4, r5, pc}
1000c944:	10020590 	.word	0x10020590

1000c948 <_sbrk_r>:
1000c948:	b538      	push	{r3, r4, r5, lr}
1000c94a:	4d06      	ldr	r5, [pc, #24]	; (1000c964 <_sbrk_r+0x1c>)
1000c94c:	2300      	movs	r3, #0
1000c94e:	4604      	mov	r4, r0
1000c950:	4608      	mov	r0, r1
1000c952:	602b      	str	r3, [r5, #0]
1000c954:	f7f4 f9a0 	bl	10000c98 <_sbrk>
1000c958:	1c43      	adds	r3, r0, #1
1000c95a:	d102      	bne.n	1000c962 <_sbrk_r+0x1a>
1000c95c:	682b      	ldr	r3, [r5, #0]
1000c95e:	b103      	cbz	r3, 1000c962 <_sbrk_r+0x1a>
1000c960:	6023      	str	r3, [r4, #0]
1000c962:	bd38      	pop	{r3, r4, r5, pc}
1000c964:	10020590 	.word	0x10020590

1000c968 <_write_r>:
1000c968:	b538      	push	{r3, r4, r5, lr}
1000c96a:	4d07      	ldr	r5, [pc, #28]	; (1000c988 <_write_r+0x20>)
1000c96c:	4604      	mov	r4, r0
1000c96e:	4608      	mov	r0, r1
1000c970:	4611      	mov	r1, r2
1000c972:	2200      	movs	r2, #0
1000c974:	602a      	str	r2, [r5, #0]
1000c976:	461a      	mov	r2, r3
1000c978:	f7f4 f93d 	bl	10000bf6 <_write>
1000c97c:	1c43      	adds	r3, r0, #1
1000c97e:	d102      	bne.n	1000c986 <_write_r+0x1e>
1000c980:	682b      	ldr	r3, [r5, #0]
1000c982:	b103      	cbz	r3, 1000c986 <_write_r+0x1e>
1000c984:	6023      	str	r3, [r4, #0]
1000c986:	bd38      	pop	{r3, r4, r5, pc}
1000c988:	10020590 	.word	0x10020590

1000c98c <__errno>:
1000c98c:	4b01      	ldr	r3, [pc, #4]	; (1000c994 <__errno+0x8>)
1000c98e:	6818      	ldr	r0, [r3, #0]
1000c990:	4770      	bx	lr
1000c992:	bf00      	nop
1000c994:	1002011c 	.word	0x1002011c

1000c998 <__libc_init_array>:
1000c998:	b570      	push	{r4, r5, r6, lr}
1000c99a:	4d0d      	ldr	r5, [pc, #52]	; (1000c9d0 <__libc_init_array+0x38>)
1000c99c:	4c0d      	ldr	r4, [pc, #52]	; (1000c9d4 <__libc_init_array+0x3c>)
1000c99e:	1b64      	subs	r4, r4, r5
1000c9a0:	10a4      	asrs	r4, r4, #2
1000c9a2:	2600      	movs	r6, #0
1000c9a4:	42a6      	cmp	r6, r4
1000c9a6:	d109      	bne.n	1000c9bc <__libc_init_array+0x24>
1000c9a8:	4d0b      	ldr	r5, [pc, #44]	; (1000c9d8 <__libc_init_array+0x40>)
1000c9aa:	4c0c      	ldr	r4, [pc, #48]	; (1000c9dc <__libc_init_array+0x44>)
1000c9ac:	f000 ff06 	bl	1000d7bc <_init>
1000c9b0:	1b64      	subs	r4, r4, r5
1000c9b2:	10a4      	asrs	r4, r4, #2
1000c9b4:	2600      	movs	r6, #0
1000c9b6:	42a6      	cmp	r6, r4
1000c9b8:	d105      	bne.n	1000c9c6 <__libc_init_array+0x2e>
1000c9ba:	bd70      	pop	{r4, r5, r6, pc}
1000c9bc:	f855 3b04 	ldr.w	r3, [r5], #4
1000c9c0:	4798      	blx	r3
1000c9c2:	3601      	adds	r6, #1
1000c9c4:	e7ee      	b.n	1000c9a4 <__libc_init_array+0xc>
1000c9c6:	f855 3b04 	ldr.w	r3, [r5], #4
1000c9ca:	4798      	blx	r3
1000c9cc:	3601      	adds	r6, #1
1000c9ce:	e7f2      	b.n	1000c9b6 <__libc_init_array+0x1e>
1000c9d0:	1000dc20 	.word	0x1000dc20
1000c9d4:	1000dc20 	.word	0x1000dc20
1000c9d8:	1000dc20 	.word	0x1000dc20
1000c9dc:	1000dc24 	.word	0x1000dc24

1000c9e0 <__retarget_lock_init_recursive>:
1000c9e0:	4770      	bx	lr

1000c9e2 <__retarget_lock_acquire_recursive>:
1000c9e2:	4770      	bx	lr

1000c9e4 <__retarget_lock_release_recursive>:
1000c9e4:	4770      	bx	lr

1000c9e6 <memcpy>:
1000c9e6:	440a      	add	r2, r1
1000c9e8:	4291      	cmp	r1, r2
1000c9ea:	f100 33ff 	add.w	r3, r0, #4294967295
1000c9ee:	d100      	bne.n	1000c9f2 <memcpy+0xc>
1000c9f0:	4770      	bx	lr
1000c9f2:	b510      	push	{r4, lr}
1000c9f4:	f811 4b01 	ldrb.w	r4, [r1], #1
1000c9f8:	f803 4f01 	strb.w	r4, [r3, #1]!
1000c9fc:	4291      	cmp	r1, r2
1000c9fe:	d1f9      	bne.n	1000c9f4 <memcpy+0xe>
1000ca00:	bd10      	pop	{r4, pc}

1000ca02 <abort>:
1000ca02:	b508      	push	{r3, lr}
1000ca04:	2006      	movs	r0, #6
1000ca06:	f000 fe01 	bl	1000d60c <raise>
1000ca0a:	2001      	movs	r0, #1
1000ca0c:	f7f4 f8cc 	bl	10000ba8 <_exit>

1000ca10 <_free_r>:
1000ca10:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000ca12:	2900      	cmp	r1, #0
1000ca14:	d044      	beq.n	1000caa0 <_free_r+0x90>
1000ca16:	f851 3c04 	ldr.w	r3, [r1, #-4]
1000ca1a:	9001      	str	r0, [sp, #4]
1000ca1c:	2b00      	cmp	r3, #0
1000ca1e:	f1a1 0404 	sub.w	r4, r1, #4
1000ca22:	bfb8      	it	lt
1000ca24:	18e4      	addlt	r4, r4, r3
1000ca26:	f7ff fdeb 	bl	1000c600 <__malloc_lock>
1000ca2a:	4a1e      	ldr	r2, [pc, #120]	; (1000caa4 <_free_r+0x94>)
1000ca2c:	9801      	ldr	r0, [sp, #4]
1000ca2e:	6813      	ldr	r3, [r2, #0]
1000ca30:	b933      	cbnz	r3, 1000ca40 <_free_r+0x30>
1000ca32:	6063      	str	r3, [r4, #4]
1000ca34:	6014      	str	r4, [r2, #0]
1000ca36:	b003      	add	sp, #12
1000ca38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
1000ca3c:	f7ff bde6 	b.w	1000c60c <__malloc_unlock>
1000ca40:	42a3      	cmp	r3, r4
1000ca42:	d908      	bls.n	1000ca56 <_free_r+0x46>
1000ca44:	6825      	ldr	r5, [r4, #0]
1000ca46:	1961      	adds	r1, r4, r5
1000ca48:	428b      	cmp	r3, r1
1000ca4a:	bf01      	itttt	eq
1000ca4c:	6819      	ldreq	r1, [r3, #0]
1000ca4e:	685b      	ldreq	r3, [r3, #4]
1000ca50:	1949      	addeq	r1, r1, r5
1000ca52:	6021      	streq	r1, [r4, #0]
1000ca54:	e7ed      	b.n	1000ca32 <_free_r+0x22>
1000ca56:	461a      	mov	r2, r3
1000ca58:	685b      	ldr	r3, [r3, #4]
1000ca5a:	b10b      	cbz	r3, 1000ca60 <_free_r+0x50>
1000ca5c:	42a3      	cmp	r3, r4
1000ca5e:	d9fa      	bls.n	1000ca56 <_free_r+0x46>
1000ca60:	6811      	ldr	r1, [r2, #0]
1000ca62:	1855      	adds	r5, r2, r1
1000ca64:	42a5      	cmp	r5, r4
1000ca66:	d10b      	bne.n	1000ca80 <_free_r+0x70>
1000ca68:	6824      	ldr	r4, [r4, #0]
1000ca6a:	4421      	add	r1, r4
1000ca6c:	1854      	adds	r4, r2, r1
1000ca6e:	42a3      	cmp	r3, r4
1000ca70:	6011      	str	r1, [r2, #0]
1000ca72:	d1e0      	bne.n	1000ca36 <_free_r+0x26>
1000ca74:	681c      	ldr	r4, [r3, #0]
1000ca76:	685b      	ldr	r3, [r3, #4]
1000ca78:	6053      	str	r3, [r2, #4]
1000ca7a:	440c      	add	r4, r1
1000ca7c:	6014      	str	r4, [r2, #0]
1000ca7e:	e7da      	b.n	1000ca36 <_free_r+0x26>
1000ca80:	d902      	bls.n	1000ca88 <_free_r+0x78>
1000ca82:	230c      	movs	r3, #12
1000ca84:	6003      	str	r3, [r0, #0]
1000ca86:	e7d6      	b.n	1000ca36 <_free_r+0x26>
1000ca88:	6825      	ldr	r5, [r4, #0]
1000ca8a:	1961      	adds	r1, r4, r5
1000ca8c:	428b      	cmp	r3, r1
1000ca8e:	bf04      	itt	eq
1000ca90:	6819      	ldreq	r1, [r3, #0]
1000ca92:	685b      	ldreq	r3, [r3, #4]
1000ca94:	6063      	str	r3, [r4, #4]
1000ca96:	bf04      	itt	eq
1000ca98:	1949      	addeq	r1, r1, r5
1000ca9a:	6021      	streq	r1, [r4, #0]
1000ca9c:	6054      	str	r4, [r2, #4]
1000ca9e:	e7ca      	b.n	1000ca36 <_free_r+0x26>
1000caa0:	b003      	add	sp, #12
1000caa2:	bd30      	pop	{r4, r5, pc}
1000caa4:	1002044c 	.word	0x1002044c

1000caa8 <__ssputs_r>:
1000caa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1000caac:	688e      	ldr	r6, [r1, #8]
1000caae:	461f      	mov	r7, r3
1000cab0:	42be      	cmp	r6, r7
1000cab2:	680b      	ldr	r3, [r1, #0]
1000cab4:	4682      	mov	sl, r0
1000cab6:	460c      	mov	r4, r1
1000cab8:	4690      	mov	r8, r2
1000caba:	d82c      	bhi.n	1000cb16 <__ssputs_r+0x6e>
1000cabc:	898a      	ldrh	r2, [r1, #12]
1000cabe:	f412 6f90 	tst.w	r2, #1152	; 0x480
1000cac2:	d026      	beq.n	1000cb12 <__ssputs_r+0x6a>
1000cac4:	6965      	ldr	r5, [r4, #20]
1000cac6:	6909      	ldr	r1, [r1, #16]
1000cac8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
1000cacc:	eba3 0901 	sub.w	r9, r3, r1
1000cad0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
1000cad4:	1c7b      	adds	r3, r7, #1
1000cad6:	444b      	add	r3, r9
1000cad8:	106d      	asrs	r5, r5, #1
1000cada:	429d      	cmp	r5, r3
1000cadc:	bf38      	it	cc
1000cade:	461d      	movcc	r5, r3
1000cae0:	0553      	lsls	r3, r2, #21
1000cae2:	d527      	bpl.n	1000cb34 <__ssputs_r+0x8c>
1000cae4:	4629      	mov	r1, r5
1000cae6:	f7ff fd0b 	bl	1000c500 <_malloc_r>
1000caea:	4606      	mov	r6, r0
1000caec:	b360      	cbz	r0, 1000cb48 <__ssputs_r+0xa0>
1000caee:	6921      	ldr	r1, [r4, #16]
1000caf0:	464a      	mov	r2, r9
1000caf2:	f7ff ff78 	bl	1000c9e6 <memcpy>
1000caf6:	89a3      	ldrh	r3, [r4, #12]
1000caf8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
1000cafc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1000cb00:	81a3      	strh	r3, [r4, #12]
1000cb02:	6126      	str	r6, [r4, #16]
1000cb04:	6165      	str	r5, [r4, #20]
1000cb06:	444e      	add	r6, r9
1000cb08:	eba5 0509 	sub.w	r5, r5, r9
1000cb0c:	6026      	str	r6, [r4, #0]
1000cb0e:	60a5      	str	r5, [r4, #8]
1000cb10:	463e      	mov	r6, r7
1000cb12:	42be      	cmp	r6, r7
1000cb14:	d900      	bls.n	1000cb18 <__ssputs_r+0x70>
1000cb16:	463e      	mov	r6, r7
1000cb18:	6820      	ldr	r0, [r4, #0]
1000cb1a:	4632      	mov	r2, r6
1000cb1c:	4641      	mov	r1, r8
1000cb1e:	f000 fd33 	bl	1000d588 <memmove>
1000cb22:	68a3      	ldr	r3, [r4, #8]
1000cb24:	1b9b      	subs	r3, r3, r6
1000cb26:	60a3      	str	r3, [r4, #8]
1000cb28:	6823      	ldr	r3, [r4, #0]
1000cb2a:	4433      	add	r3, r6
1000cb2c:	6023      	str	r3, [r4, #0]
1000cb2e:	2000      	movs	r0, #0
1000cb30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000cb34:	462a      	mov	r2, r5
1000cb36:	f000 fd85 	bl	1000d644 <_realloc_r>
1000cb3a:	4606      	mov	r6, r0
1000cb3c:	2800      	cmp	r0, #0
1000cb3e:	d1e0      	bne.n	1000cb02 <__ssputs_r+0x5a>
1000cb40:	6921      	ldr	r1, [r4, #16]
1000cb42:	4650      	mov	r0, sl
1000cb44:	f7ff ff64 	bl	1000ca10 <_free_r>
1000cb48:	230c      	movs	r3, #12
1000cb4a:	f8ca 3000 	str.w	r3, [sl]
1000cb4e:	89a3      	ldrh	r3, [r4, #12]
1000cb50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000cb54:	81a3      	strh	r3, [r4, #12]
1000cb56:	f04f 30ff 	mov.w	r0, #4294967295
1000cb5a:	e7e9      	b.n	1000cb30 <__ssputs_r+0x88>

1000cb5c <_svfiprintf_r>:
1000cb5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000cb60:	4698      	mov	r8, r3
1000cb62:	898b      	ldrh	r3, [r1, #12]
1000cb64:	061b      	lsls	r3, r3, #24
1000cb66:	b09d      	sub	sp, #116	; 0x74
1000cb68:	4607      	mov	r7, r0
1000cb6a:	460d      	mov	r5, r1
1000cb6c:	4614      	mov	r4, r2
1000cb6e:	d50e      	bpl.n	1000cb8e <_svfiprintf_r+0x32>
1000cb70:	690b      	ldr	r3, [r1, #16]
1000cb72:	b963      	cbnz	r3, 1000cb8e <_svfiprintf_r+0x32>
1000cb74:	2140      	movs	r1, #64	; 0x40
1000cb76:	f7ff fcc3 	bl	1000c500 <_malloc_r>
1000cb7a:	6028      	str	r0, [r5, #0]
1000cb7c:	6128      	str	r0, [r5, #16]
1000cb7e:	b920      	cbnz	r0, 1000cb8a <_svfiprintf_r+0x2e>
1000cb80:	230c      	movs	r3, #12
1000cb82:	603b      	str	r3, [r7, #0]
1000cb84:	f04f 30ff 	mov.w	r0, #4294967295
1000cb88:	e0d0      	b.n	1000cd2c <_svfiprintf_r+0x1d0>
1000cb8a:	2340      	movs	r3, #64	; 0x40
1000cb8c:	616b      	str	r3, [r5, #20]
1000cb8e:	2300      	movs	r3, #0
1000cb90:	9309      	str	r3, [sp, #36]	; 0x24
1000cb92:	2320      	movs	r3, #32
1000cb94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1000cb98:	f8cd 800c 	str.w	r8, [sp, #12]
1000cb9c:	2330      	movs	r3, #48	; 0x30
1000cb9e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 1000cd44 <_svfiprintf_r+0x1e8>
1000cba2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1000cba6:	f04f 0901 	mov.w	r9, #1
1000cbaa:	4623      	mov	r3, r4
1000cbac:	469a      	mov	sl, r3
1000cbae:	f813 2b01 	ldrb.w	r2, [r3], #1
1000cbb2:	b10a      	cbz	r2, 1000cbb8 <_svfiprintf_r+0x5c>
1000cbb4:	2a25      	cmp	r2, #37	; 0x25
1000cbb6:	d1f9      	bne.n	1000cbac <_svfiprintf_r+0x50>
1000cbb8:	ebba 0b04 	subs.w	fp, sl, r4
1000cbbc:	d00b      	beq.n	1000cbd6 <_svfiprintf_r+0x7a>
1000cbbe:	465b      	mov	r3, fp
1000cbc0:	4622      	mov	r2, r4
1000cbc2:	4629      	mov	r1, r5
1000cbc4:	4638      	mov	r0, r7
1000cbc6:	f7ff ff6f 	bl	1000caa8 <__ssputs_r>
1000cbca:	3001      	adds	r0, #1
1000cbcc:	f000 80a9 	beq.w	1000cd22 <_svfiprintf_r+0x1c6>
1000cbd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000cbd2:	445a      	add	r2, fp
1000cbd4:	9209      	str	r2, [sp, #36]	; 0x24
1000cbd6:	f89a 3000 	ldrb.w	r3, [sl]
1000cbda:	2b00      	cmp	r3, #0
1000cbdc:	f000 80a1 	beq.w	1000cd22 <_svfiprintf_r+0x1c6>
1000cbe0:	2300      	movs	r3, #0
1000cbe2:	f04f 32ff 	mov.w	r2, #4294967295
1000cbe6:	e9cd 2305 	strd	r2, r3, [sp, #20]
1000cbea:	f10a 0a01 	add.w	sl, sl, #1
1000cbee:	9304      	str	r3, [sp, #16]
1000cbf0:	9307      	str	r3, [sp, #28]
1000cbf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1000cbf6:	931a      	str	r3, [sp, #104]	; 0x68
1000cbf8:	4654      	mov	r4, sl
1000cbfa:	2205      	movs	r2, #5
1000cbfc:	f814 1b01 	ldrb.w	r1, [r4], #1
1000cc00:	4850      	ldr	r0, [pc, #320]	; (1000cd44 <_svfiprintf_r+0x1e8>)
1000cc02:	f7f3 fa35 	bl	10000070 <memchr>
1000cc06:	9a04      	ldr	r2, [sp, #16]
1000cc08:	b9d8      	cbnz	r0, 1000cc42 <_svfiprintf_r+0xe6>
1000cc0a:	06d0      	lsls	r0, r2, #27
1000cc0c:	bf44      	itt	mi
1000cc0e:	2320      	movmi	r3, #32
1000cc10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
1000cc14:	0711      	lsls	r1, r2, #28
1000cc16:	bf44      	itt	mi
1000cc18:	232b      	movmi	r3, #43	; 0x2b
1000cc1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
1000cc1e:	f89a 3000 	ldrb.w	r3, [sl]
1000cc22:	2b2a      	cmp	r3, #42	; 0x2a
1000cc24:	d015      	beq.n	1000cc52 <_svfiprintf_r+0xf6>
1000cc26:	9a07      	ldr	r2, [sp, #28]
1000cc28:	4654      	mov	r4, sl
1000cc2a:	2000      	movs	r0, #0
1000cc2c:	f04f 0c0a 	mov.w	ip, #10
1000cc30:	4621      	mov	r1, r4
1000cc32:	f811 3b01 	ldrb.w	r3, [r1], #1
1000cc36:	3b30      	subs	r3, #48	; 0x30
1000cc38:	2b09      	cmp	r3, #9
1000cc3a:	d94d      	bls.n	1000ccd8 <_svfiprintf_r+0x17c>
1000cc3c:	b1b0      	cbz	r0, 1000cc6c <_svfiprintf_r+0x110>
1000cc3e:	9207      	str	r2, [sp, #28]
1000cc40:	e014      	b.n	1000cc6c <_svfiprintf_r+0x110>
1000cc42:	eba0 0308 	sub.w	r3, r0, r8
1000cc46:	fa09 f303 	lsl.w	r3, r9, r3
1000cc4a:	4313      	orrs	r3, r2
1000cc4c:	9304      	str	r3, [sp, #16]
1000cc4e:	46a2      	mov	sl, r4
1000cc50:	e7d2      	b.n	1000cbf8 <_svfiprintf_r+0x9c>
1000cc52:	9b03      	ldr	r3, [sp, #12]
1000cc54:	1d19      	adds	r1, r3, #4
1000cc56:	681b      	ldr	r3, [r3, #0]
1000cc58:	9103      	str	r1, [sp, #12]
1000cc5a:	2b00      	cmp	r3, #0
1000cc5c:	bfbb      	ittet	lt
1000cc5e:	425b      	neglt	r3, r3
1000cc60:	f042 0202 	orrlt.w	r2, r2, #2
1000cc64:	9307      	strge	r3, [sp, #28]
1000cc66:	9307      	strlt	r3, [sp, #28]
1000cc68:	bfb8      	it	lt
1000cc6a:	9204      	strlt	r2, [sp, #16]
1000cc6c:	7823      	ldrb	r3, [r4, #0]
1000cc6e:	2b2e      	cmp	r3, #46	; 0x2e
1000cc70:	d10c      	bne.n	1000cc8c <_svfiprintf_r+0x130>
1000cc72:	7863      	ldrb	r3, [r4, #1]
1000cc74:	2b2a      	cmp	r3, #42	; 0x2a
1000cc76:	d134      	bne.n	1000cce2 <_svfiprintf_r+0x186>
1000cc78:	9b03      	ldr	r3, [sp, #12]
1000cc7a:	1d1a      	adds	r2, r3, #4
1000cc7c:	681b      	ldr	r3, [r3, #0]
1000cc7e:	9203      	str	r2, [sp, #12]
1000cc80:	2b00      	cmp	r3, #0
1000cc82:	bfb8      	it	lt
1000cc84:	f04f 33ff 	movlt.w	r3, #4294967295
1000cc88:	3402      	adds	r4, #2
1000cc8a:	9305      	str	r3, [sp, #20]
1000cc8c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 1000cd54 <_svfiprintf_r+0x1f8>
1000cc90:	7821      	ldrb	r1, [r4, #0]
1000cc92:	2203      	movs	r2, #3
1000cc94:	4650      	mov	r0, sl
1000cc96:	f7f3 f9eb 	bl	10000070 <memchr>
1000cc9a:	b138      	cbz	r0, 1000ccac <_svfiprintf_r+0x150>
1000cc9c:	9b04      	ldr	r3, [sp, #16]
1000cc9e:	eba0 000a 	sub.w	r0, r0, sl
1000cca2:	2240      	movs	r2, #64	; 0x40
1000cca4:	4082      	lsls	r2, r0
1000cca6:	4313      	orrs	r3, r2
1000cca8:	3401      	adds	r4, #1
1000ccaa:	9304      	str	r3, [sp, #16]
1000ccac:	f814 1b01 	ldrb.w	r1, [r4], #1
1000ccb0:	4825      	ldr	r0, [pc, #148]	; (1000cd48 <_svfiprintf_r+0x1ec>)
1000ccb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1000ccb6:	2206      	movs	r2, #6
1000ccb8:	f7f3 f9da 	bl	10000070 <memchr>
1000ccbc:	2800      	cmp	r0, #0
1000ccbe:	d038      	beq.n	1000cd32 <_svfiprintf_r+0x1d6>
1000ccc0:	4b22      	ldr	r3, [pc, #136]	; (1000cd4c <_svfiprintf_r+0x1f0>)
1000ccc2:	bb1b      	cbnz	r3, 1000cd0c <_svfiprintf_r+0x1b0>
1000ccc4:	9b03      	ldr	r3, [sp, #12]
1000ccc6:	3307      	adds	r3, #7
1000ccc8:	f023 0307 	bic.w	r3, r3, #7
1000cccc:	3308      	adds	r3, #8
1000ccce:	9303      	str	r3, [sp, #12]
1000ccd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000ccd2:	4433      	add	r3, r6
1000ccd4:	9309      	str	r3, [sp, #36]	; 0x24
1000ccd6:	e768      	b.n	1000cbaa <_svfiprintf_r+0x4e>
1000ccd8:	fb0c 3202 	mla	r2, ip, r2, r3
1000ccdc:	460c      	mov	r4, r1
1000ccde:	2001      	movs	r0, #1
1000cce0:	e7a6      	b.n	1000cc30 <_svfiprintf_r+0xd4>
1000cce2:	2300      	movs	r3, #0
1000cce4:	3401      	adds	r4, #1
1000cce6:	9305      	str	r3, [sp, #20]
1000cce8:	4619      	mov	r1, r3
1000ccea:	f04f 0c0a 	mov.w	ip, #10
1000ccee:	4620      	mov	r0, r4
1000ccf0:	f810 2b01 	ldrb.w	r2, [r0], #1
1000ccf4:	3a30      	subs	r2, #48	; 0x30
1000ccf6:	2a09      	cmp	r2, #9
1000ccf8:	d903      	bls.n	1000cd02 <_svfiprintf_r+0x1a6>
1000ccfa:	2b00      	cmp	r3, #0
1000ccfc:	d0c6      	beq.n	1000cc8c <_svfiprintf_r+0x130>
1000ccfe:	9105      	str	r1, [sp, #20]
1000cd00:	e7c4      	b.n	1000cc8c <_svfiprintf_r+0x130>
1000cd02:	fb0c 2101 	mla	r1, ip, r1, r2
1000cd06:	4604      	mov	r4, r0
1000cd08:	2301      	movs	r3, #1
1000cd0a:	e7f0      	b.n	1000ccee <_svfiprintf_r+0x192>
1000cd0c:	ab03      	add	r3, sp, #12
1000cd0e:	9300      	str	r3, [sp, #0]
1000cd10:	462a      	mov	r2, r5
1000cd12:	4b0f      	ldr	r3, [pc, #60]	; (1000cd50 <_svfiprintf_r+0x1f4>)
1000cd14:	a904      	add	r1, sp, #16
1000cd16:	4638      	mov	r0, r7
1000cd18:	f3af 8000 	nop.w
1000cd1c:	1c42      	adds	r2, r0, #1
1000cd1e:	4606      	mov	r6, r0
1000cd20:	d1d6      	bne.n	1000ccd0 <_svfiprintf_r+0x174>
1000cd22:	89ab      	ldrh	r3, [r5, #12]
1000cd24:	065b      	lsls	r3, r3, #25
1000cd26:	f53f af2d 	bmi.w	1000cb84 <_svfiprintf_r+0x28>
1000cd2a:	9809      	ldr	r0, [sp, #36]	; 0x24
1000cd2c:	b01d      	add	sp, #116	; 0x74
1000cd2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000cd32:	ab03      	add	r3, sp, #12
1000cd34:	9300      	str	r3, [sp, #0]
1000cd36:	462a      	mov	r2, r5
1000cd38:	4b05      	ldr	r3, [pc, #20]	; (1000cd50 <_svfiprintf_r+0x1f4>)
1000cd3a:	a904      	add	r1, sp, #16
1000cd3c:	4638      	mov	r0, r7
1000cd3e:	f000 f9bd 	bl	1000d0bc <_printf_i>
1000cd42:	e7eb      	b.n	1000cd1c <_svfiprintf_r+0x1c0>
1000cd44:	1000dbed 	.word	0x1000dbed
1000cd48:	1000dbf7 	.word	0x1000dbf7
1000cd4c:	00000000 	.word	0x00000000
1000cd50:	1000caa9 	.word	0x1000caa9
1000cd54:	1000dbf3 	.word	0x1000dbf3

1000cd58 <__sfputc_r>:
1000cd58:	6893      	ldr	r3, [r2, #8]
1000cd5a:	3b01      	subs	r3, #1
1000cd5c:	2b00      	cmp	r3, #0
1000cd5e:	b410      	push	{r4}
1000cd60:	6093      	str	r3, [r2, #8]
1000cd62:	da08      	bge.n	1000cd76 <__sfputc_r+0x1e>
1000cd64:	6994      	ldr	r4, [r2, #24]
1000cd66:	42a3      	cmp	r3, r4
1000cd68:	db01      	blt.n	1000cd6e <__sfputc_r+0x16>
1000cd6a:	290a      	cmp	r1, #10
1000cd6c:	d103      	bne.n	1000cd76 <__sfputc_r+0x1e>
1000cd6e:	f85d 4b04 	ldr.w	r4, [sp], #4
1000cd72:	f000 bb73 	b.w	1000d45c <__swbuf_r>
1000cd76:	6813      	ldr	r3, [r2, #0]
1000cd78:	1c58      	adds	r0, r3, #1
1000cd7a:	6010      	str	r0, [r2, #0]
1000cd7c:	7019      	strb	r1, [r3, #0]
1000cd7e:	4608      	mov	r0, r1
1000cd80:	f85d 4b04 	ldr.w	r4, [sp], #4
1000cd84:	4770      	bx	lr

1000cd86 <__sfputs_r>:
1000cd86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000cd88:	4606      	mov	r6, r0
1000cd8a:	460f      	mov	r7, r1
1000cd8c:	4614      	mov	r4, r2
1000cd8e:	18d5      	adds	r5, r2, r3
1000cd90:	42ac      	cmp	r4, r5
1000cd92:	d101      	bne.n	1000cd98 <__sfputs_r+0x12>
1000cd94:	2000      	movs	r0, #0
1000cd96:	e007      	b.n	1000cda8 <__sfputs_r+0x22>
1000cd98:	f814 1b01 	ldrb.w	r1, [r4], #1
1000cd9c:	463a      	mov	r2, r7
1000cd9e:	4630      	mov	r0, r6
1000cda0:	f7ff ffda 	bl	1000cd58 <__sfputc_r>
1000cda4:	1c43      	adds	r3, r0, #1
1000cda6:	d1f3      	bne.n	1000cd90 <__sfputs_r+0xa>
1000cda8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1000cdac <_vfiprintf_r>:
1000cdac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000cdb0:	460d      	mov	r5, r1
1000cdb2:	b09d      	sub	sp, #116	; 0x74
1000cdb4:	4614      	mov	r4, r2
1000cdb6:	4698      	mov	r8, r3
1000cdb8:	4606      	mov	r6, r0
1000cdba:	b118      	cbz	r0, 1000cdc4 <_vfiprintf_r+0x18>
1000cdbc:	6a03      	ldr	r3, [r0, #32]
1000cdbe:	b90b      	cbnz	r3, 1000cdc4 <_vfiprintf_r+0x18>
1000cdc0:	f7ff fcb6 	bl	1000c730 <__sinit>
1000cdc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1000cdc6:	07d9      	lsls	r1, r3, #31
1000cdc8:	d405      	bmi.n	1000cdd6 <_vfiprintf_r+0x2a>
1000cdca:	89ab      	ldrh	r3, [r5, #12]
1000cdcc:	059a      	lsls	r2, r3, #22
1000cdce:	d402      	bmi.n	1000cdd6 <_vfiprintf_r+0x2a>
1000cdd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
1000cdd2:	f7ff fe06 	bl	1000c9e2 <__retarget_lock_acquire_recursive>
1000cdd6:	89ab      	ldrh	r3, [r5, #12]
1000cdd8:	071b      	lsls	r3, r3, #28
1000cdda:	d501      	bpl.n	1000cde0 <_vfiprintf_r+0x34>
1000cddc:	692b      	ldr	r3, [r5, #16]
1000cdde:	b99b      	cbnz	r3, 1000ce08 <_vfiprintf_r+0x5c>
1000cde0:	4629      	mov	r1, r5
1000cde2:	4630      	mov	r0, r6
1000cde4:	f000 fb78 	bl	1000d4d8 <__swsetup_r>
1000cde8:	b170      	cbz	r0, 1000ce08 <_vfiprintf_r+0x5c>
1000cdea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1000cdec:	07dc      	lsls	r4, r3, #31
1000cdee:	d504      	bpl.n	1000cdfa <_vfiprintf_r+0x4e>
1000cdf0:	f04f 30ff 	mov.w	r0, #4294967295
1000cdf4:	b01d      	add	sp, #116	; 0x74
1000cdf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000cdfa:	89ab      	ldrh	r3, [r5, #12]
1000cdfc:	0598      	lsls	r0, r3, #22
1000cdfe:	d4f7      	bmi.n	1000cdf0 <_vfiprintf_r+0x44>
1000ce00:	6da8      	ldr	r0, [r5, #88]	; 0x58
1000ce02:	f7ff fdef 	bl	1000c9e4 <__retarget_lock_release_recursive>
1000ce06:	e7f3      	b.n	1000cdf0 <_vfiprintf_r+0x44>
1000ce08:	2300      	movs	r3, #0
1000ce0a:	9309      	str	r3, [sp, #36]	; 0x24
1000ce0c:	2320      	movs	r3, #32
1000ce0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1000ce12:	f8cd 800c 	str.w	r8, [sp, #12]
1000ce16:	2330      	movs	r3, #48	; 0x30
1000ce18:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 1000cfcc <_vfiprintf_r+0x220>
1000ce1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1000ce20:	f04f 0901 	mov.w	r9, #1
1000ce24:	4623      	mov	r3, r4
1000ce26:	469a      	mov	sl, r3
1000ce28:	f813 2b01 	ldrb.w	r2, [r3], #1
1000ce2c:	b10a      	cbz	r2, 1000ce32 <_vfiprintf_r+0x86>
1000ce2e:	2a25      	cmp	r2, #37	; 0x25
1000ce30:	d1f9      	bne.n	1000ce26 <_vfiprintf_r+0x7a>
1000ce32:	ebba 0b04 	subs.w	fp, sl, r4
1000ce36:	d00b      	beq.n	1000ce50 <_vfiprintf_r+0xa4>
1000ce38:	465b      	mov	r3, fp
1000ce3a:	4622      	mov	r2, r4
1000ce3c:	4629      	mov	r1, r5
1000ce3e:	4630      	mov	r0, r6
1000ce40:	f7ff ffa1 	bl	1000cd86 <__sfputs_r>
1000ce44:	3001      	adds	r0, #1
1000ce46:	f000 80a9 	beq.w	1000cf9c <_vfiprintf_r+0x1f0>
1000ce4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000ce4c:	445a      	add	r2, fp
1000ce4e:	9209      	str	r2, [sp, #36]	; 0x24
1000ce50:	f89a 3000 	ldrb.w	r3, [sl]
1000ce54:	2b00      	cmp	r3, #0
1000ce56:	f000 80a1 	beq.w	1000cf9c <_vfiprintf_r+0x1f0>
1000ce5a:	2300      	movs	r3, #0
1000ce5c:	f04f 32ff 	mov.w	r2, #4294967295
1000ce60:	e9cd 2305 	strd	r2, r3, [sp, #20]
1000ce64:	f10a 0a01 	add.w	sl, sl, #1
1000ce68:	9304      	str	r3, [sp, #16]
1000ce6a:	9307      	str	r3, [sp, #28]
1000ce6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1000ce70:	931a      	str	r3, [sp, #104]	; 0x68
1000ce72:	4654      	mov	r4, sl
1000ce74:	2205      	movs	r2, #5
1000ce76:	f814 1b01 	ldrb.w	r1, [r4], #1
1000ce7a:	4854      	ldr	r0, [pc, #336]	; (1000cfcc <_vfiprintf_r+0x220>)
1000ce7c:	f7f3 f8f8 	bl	10000070 <memchr>
1000ce80:	9a04      	ldr	r2, [sp, #16]
1000ce82:	b9d8      	cbnz	r0, 1000cebc <_vfiprintf_r+0x110>
1000ce84:	06d1      	lsls	r1, r2, #27
1000ce86:	bf44      	itt	mi
1000ce88:	2320      	movmi	r3, #32
1000ce8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
1000ce8e:	0713      	lsls	r3, r2, #28
1000ce90:	bf44      	itt	mi
1000ce92:	232b      	movmi	r3, #43	; 0x2b
1000ce94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
1000ce98:	f89a 3000 	ldrb.w	r3, [sl]
1000ce9c:	2b2a      	cmp	r3, #42	; 0x2a
1000ce9e:	d015      	beq.n	1000cecc <_vfiprintf_r+0x120>
1000cea0:	9a07      	ldr	r2, [sp, #28]
1000cea2:	4654      	mov	r4, sl
1000cea4:	2000      	movs	r0, #0
1000cea6:	f04f 0c0a 	mov.w	ip, #10
1000ceaa:	4621      	mov	r1, r4
1000ceac:	f811 3b01 	ldrb.w	r3, [r1], #1
1000ceb0:	3b30      	subs	r3, #48	; 0x30
1000ceb2:	2b09      	cmp	r3, #9
1000ceb4:	d94d      	bls.n	1000cf52 <_vfiprintf_r+0x1a6>
1000ceb6:	b1b0      	cbz	r0, 1000cee6 <_vfiprintf_r+0x13a>
1000ceb8:	9207      	str	r2, [sp, #28]
1000ceba:	e014      	b.n	1000cee6 <_vfiprintf_r+0x13a>
1000cebc:	eba0 0308 	sub.w	r3, r0, r8
1000cec0:	fa09 f303 	lsl.w	r3, r9, r3
1000cec4:	4313      	orrs	r3, r2
1000cec6:	9304      	str	r3, [sp, #16]
1000cec8:	46a2      	mov	sl, r4
1000ceca:	e7d2      	b.n	1000ce72 <_vfiprintf_r+0xc6>
1000cecc:	9b03      	ldr	r3, [sp, #12]
1000cece:	1d19      	adds	r1, r3, #4
1000ced0:	681b      	ldr	r3, [r3, #0]
1000ced2:	9103      	str	r1, [sp, #12]
1000ced4:	2b00      	cmp	r3, #0
1000ced6:	bfbb      	ittet	lt
1000ced8:	425b      	neglt	r3, r3
1000ceda:	f042 0202 	orrlt.w	r2, r2, #2
1000cede:	9307      	strge	r3, [sp, #28]
1000cee0:	9307      	strlt	r3, [sp, #28]
1000cee2:	bfb8      	it	lt
1000cee4:	9204      	strlt	r2, [sp, #16]
1000cee6:	7823      	ldrb	r3, [r4, #0]
1000cee8:	2b2e      	cmp	r3, #46	; 0x2e
1000ceea:	d10c      	bne.n	1000cf06 <_vfiprintf_r+0x15a>
1000ceec:	7863      	ldrb	r3, [r4, #1]
1000ceee:	2b2a      	cmp	r3, #42	; 0x2a
1000cef0:	d134      	bne.n	1000cf5c <_vfiprintf_r+0x1b0>
1000cef2:	9b03      	ldr	r3, [sp, #12]
1000cef4:	1d1a      	adds	r2, r3, #4
1000cef6:	681b      	ldr	r3, [r3, #0]
1000cef8:	9203      	str	r2, [sp, #12]
1000cefa:	2b00      	cmp	r3, #0
1000cefc:	bfb8      	it	lt
1000cefe:	f04f 33ff 	movlt.w	r3, #4294967295
1000cf02:	3402      	adds	r4, #2
1000cf04:	9305      	str	r3, [sp, #20]
1000cf06:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 1000cfdc <_vfiprintf_r+0x230>
1000cf0a:	7821      	ldrb	r1, [r4, #0]
1000cf0c:	2203      	movs	r2, #3
1000cf0e:	4650      	mov	r0, sl
1000cf10:	f7f3 f8ae 	bl	10000070 <memchr>
1000cf14:	b138      	cbz	r0, 1000cf26 <_vfiprintf_r+0x17a>
1000cf16:	9b04      	ldr	r3, [sp, #16]
1000cf18:	eba0 000a 	sub.w	r0, r0, sl
1000cf1c:	2240      	movs	r2, #64	; 0x40
1000cf1e:	4082      	lsls	r2, r0
1000cf20:	4313      	orrs	r3, r2
1000cf22:	3401      	adds	r4, #1
1000cf24:	9304      	str	r3, [sp, #16]
1000cf26:	f814 1b01 	ldrb.w	r1, [r4], #1
1000cf2a:	4829      	ldr	r0, [pc, #164]	; (1000cfd0 <_vfiprintf_r+0x224>)
1000cf2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1000cf30:	2206      	movs	r2, #6
1000cf32:	f7f3 f89d 	bl	10000070 <memchr>
1000cf36:	2800      	cmp	r0, #0
1000cf38:	d03f      	beq.n	1000cfba <_vfiprintf_r+0x20e>
1000cf3a:	4b26      	ldr	r3, [pc, #152]	; (1000cfd4 <_vfiprintf_r+0x228>)
1000cf3c:	bb1b      	cbnz	r3, 1000cf86 <_vfiprintf_r+0x1da>
1000cf3e:	9b03      	ldr	r3, [sp, #12]
1000cf40:	3307      	adds	r3, #7
1000cf42:	f023 0307 	bic.w	r3, r3, #7
1000cf46:	3308      	adds	r3, #8
1000cf48:	9303      	str	r3, [sp, #12]
1000cf4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000cf4c:	443b      	add	r3, r7
1000cf4e:	9309      	str	r3, [sp, #36]	; 0x24
1000cf50:	e768      	b.n	1000ce24 <_vfiprintf_r+0x78>
1000cf52:	fb0c 3202 	mla	r2, ip, r2, r3
1000cf56:	460c      	mov	r4, r1
1000cf58:	2001      	movs	r0, #1
1000cf5a:	e7a6      	b.n	1000ceaa <_vfiprintf_r+0xfe>
1000cf5c:	2300      	movs	r3, #0
1000cf5e:	3401      	adds	r4, #1
1000cf60:	9305      	str	r3, [sp, #20]
1000cf62:	4619      	mov	r1, r3
1000cf64:	f04f 0c0a 	mov.w	ip, #10
1000cf68:	4620      	mov	r0, r4
1000cf6a:	f810 2b01 	ldrb.w	r2, [r0], #1
1000cf6e:	3a30      	subs	r2, #48	; 0x30
1000cf70:	2a09      	cmp	r2, #9
1000cf72:	d903      	bls.n	1000cf7c <_vfiprintf_r+0x1d0>
1000cf74:	2b00      	cmp	r3, #0
1000cf76:	d0c6      	beq.n	1000cf06 <_vfiprintf_r+0x15a>
1000cf78:	9105      	str	r1, [sp, #20]
1000cf7a:	e7c4      	b.n	1000cf06 <_vfiprintf_r+0x15a>
1000cf7c:	fb0c 2101 	mla	r1, ip, r1, r2
1000cf80:	4604      	mov	r4, r0
1000cf82:	2301      	movs	r3, #1
1000cf84:	e7f0      	b.n	1000cf68 <_vfiprintf_r+0x1bc>
1000cf86:	ab03      	add	r3, sp, #12
1000cf88:	9300      	str	r3, [sp, #0]
1000cf8a:	462a      	mov	r2, r5
1000cf8c:	4b12      	ldr	r3, [pc, #72]	; (1000cfd8 <_vfiprintf_r+0x22c>)
1000cf8e:	a904      	add	r1, sp, #16
1000cf90:	4630      	mov	r0, r6
1000cf92:	f3af 8000 	nop.w
1000cf96:	4607      	mov	r7, r0
1000cf98:	1c78      	adds	r0, r7, #1
1000cf9a:	d1d6      	bne.n	1000cf4a <_vfiprintf_r+0x19e>
1000cf9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1000cf9e:	07d9      	lsls	r1, r3, #31
1000cfa0:	d405      	bmi.n	1000cfae <_vfiprintf_r+0x202>
1000cfa2:	89ab      	ldrh	r3, [r5, #12]
1000cfa4:	059a      	lsls	r2, r3, #22
1000cfa6:	d402      	bmi.n	1000cfae <_vfiprintf_r+0x202>
1000cfa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
1000cfaa:	f7ff fd1b 	bl	1000c9e4 <__retarget_lock_release_recursive>
1000cfae:	89ab      	ldrh	r3, [r5, #12]
1000cfb0:	065b      	lsls	r3, r3, #25
1000cfb2:	f53f af1d 	bmi.w	1000cdf0 <_vfiprintf_r+0x44>
1000cfb6:	9809      	ldr	r0, [sp, #36]	; 0x24
1000cfb8:	e71c      	b.n	1000cdf4 <_vfiprintf_r+0x48>
1000cfba:	ab03      	add	r3, sp, #12
1000cfbc:	9300      	str	r3, [sp, #0]
1000cfbe:	462a      	mov	r2, r5
1000cfc0:	4b05      	ldr	r3, [pc, #20]	; (1000cfd8 <_vfiprintf_r+0x22c>)
1000cfc2:	a904      	add	r1, sp, #16
1000cfc4:	4630      	mov	r0, r6
1000cfc6:	f000 f879 	bl	1000d0bc <_printf_i>
1000cfca:	e7e4      	b.n	1000cf96 <_vfiprintf_r+0x1ea>
1000cfcc:	1000dbed 	.word	0x1000dbed
1000cfd0:	1000dbf7 	.word	0x1000dbf7
1000cfd4:	00000000 	.word	0x00000000
1000cfd8:	1000cd87 	.word	0x1000cd87
1000cfdc:	1000dbf3 	.word	0x1000dbf3

1000cfe0 <_printf_common>:
1000cfe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1000cfe4:	4616      	mov	r6, r2
1000cfe6:	4699      	mov	r9, r3
1000cfe8:	688a      	ldr	r2, [r1, #8]
1000cfea:	690b      	ldr	r3, [r1, #16]
1000cfec:	f8dd 8020 	ldr.w	r8, [sp, #32]
1000cff0:	4293      	cmp	r3, r2
1000cff2:	bfb8      	it	lt
1000cff4:	4613      	movlt	r3, r2
1000cff6:	6033      	str	r3, [r6, #0]
1000cff8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1000cffc:	4607      	mov	r7, r0
1000cffe:	460c      	mov	r4, r1
1000d000:	b10a      	cbz	r2, 1000d006 <_printf_common+0x26>
1000d002:	3301      	adds	r3, #1
1000d004:	6033      	str	r3, [r6, #0]
1000d006:	6823      	ldr	r3, [r4, #0]
1000d008:	0699      	lsls	r1, r3, #26
1000d00a:	bf42      	ittt	mi
1000d00c:	6833      	ldrmi	r3, [r6, #0]
1000d00e:	3302      	addmi	r3, #2
1000d010:	6033      	strmi	r3, [r6, #0]
1000d012:	6825      	ldr	r5, [r4, #0]
1000d014:	f015 0506 	ands.w	r5, r5, #6
1000d018:	d106      	bne.n	1000d028 <_printf_common+0x48>
1000d01a:	f104 0a19 	add.w	sl, r4, #25
1000d01e:	68e3      	ldr	r3, [r4, #12]
1000d020:	6832      	ldr	r2, [r6, #0]
1000d022:	1a9b      	subs	r3, r3, r2
1000d024:	42ab      	cmp	r3, r5
1000d026:	dc26      	bgt.n	1000d076 <_printf_common+0x96>
1000d028:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
1000d02c:	1e13      	subs	r3, r2, #0
1000d02e:	6822      	ldr	r2, [r4, #0]
1000d030:	bf18      	it	ne
1000d032:	2301      	movne	r3, #1
1000d034:	0692      	lsls	r2, r2, #26
1000d036:	d42b      	bmi.n	1000d090 <_printf_common+0xb0>
1000d038:	f104 0243 	add.w	r2, r4, #67	; 0x43
1000d03c:	4649      	mov	r1, r9
1000d03e:	4638      	mov	r0, r7
1000d040:	47c0      	blx	r8
1000d042:	3001      	adds	r0, #1
1000d044:	d01e      	beq.n	1000d084 <_printf_common+0xa4>
1000d046:	6823      	ldr	r3, [r4, #0]
1000d048:	6922      	ldr	r2, [r4, #16]
1000d04a:	f003 0306 	and.w	r3, r3, #6
1000d04e:	2b04      	cmp	r3, #4
1000d050:	bf02      	ittt	eq
1000d052:	68e5      	ldreq	r5, [r4, #12]
1000d054:	6833      	ldreq	r3, [r6, #0]
1000d056:	1aed      	subeq	r5, r5, r3
1000d058:	68a3      	ldr	r3, [r4, #8]
1000d05a:	bf0c      	ite	eq
1000d05c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1000d060:	2500      	movne	r5, #0
1000d062:	4293      	cmp	r3, r2
1000d064:	bfc4      	itt	gt
1000d066:	1a9b      	subgt	r3, r3, r2
1000d068:	18ed      	addgt	r5, r5, r3
1000d06a:	2600      	movs	r6, #0
1000d06c:	341a      	adds	r4, #26
1000d06e:	42b5      	cmp	r5, r6
1000d070:	d11a      	bne.n	1000d0a8 <_printf_common+0xc8>
1000d072:	2000      	movs	r0, #0
1000d074:	e008      	b.n	1000d088 <_printf_common+0xa8>
1000d076:	2301      	movs	r3, #1
1000d078:	4652      	mov	r2, sl
1000d07a:	4649      	mov	r1, r9
1000d07c:	4638      	mov	r0, r7
1000d07e:	47c0      	blx	r8
1000d080:	3001      	adds	r0, #1
1000d082:	d103      	bne.n	1000d08c <_printf_common+0xac>
1000d084:	f04f 30ff 	mov.w	r0, #4294967295
1000d088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000d08c:	3501      	adds	r5, #1
1000d08e:	e7c6      	b.n	1000d01e <_printf_common+0x3e>
1000d090:	18e1      	adds	r1, r4, r3
1000d092:	1c5a      	adds	r2, r3, #1
1000d094:	2030      	movs	r0, #48	; 0x30
1000d096:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1000d09a:	4422      	add	r2, r4
1000d09c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1000d0a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1000d0a4:	3302      	adds	r3, #2
1000d0a6:	e7c7      	b.n	1000d038 <_printf_common+0x58>
1000d0a8:	2301      	movs	r3, #1
1000d0aa:	4622      	mov	r2, r4
1000d0ac:	4649      	mov	r1, r9
1000d0ae:	4638      	mov	r0, r7
1000d0b0:	47c0      	blx	r8
1000d0b2:	3001      	adds	r0, #1
1000d0b4:	d0e6      	beq.n	1000d084 <_printf_common+0xa4>
1000d0b6:	3601      	adds	r6, #1
1000d0b8:	e7d9      	b.n	1000d06e <_printf_common+0x8e>
	...

1000d0bc <_printf_i>:
1000d0bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
1000d0c0:	7e0f      	ldrb	r7, [r1, #24]
1000d0c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
1000d0c4:	2f78      	cmp	r7, #120	; 0x78
1000d0c6:	4691      	mov	r9, r2
1000d0c8:	4680      	mov	r8, r0
1000d0ca:	460c      	mov	r4, r1
1000d0cc:	469a      	mov	sl, r3
1000d0ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
1000d0d2:	d807      	bhi.n	1000d0e4 <_printf_i+0x28>
1000d0d4:	2f62      	cmp	r7, #98	; 0x62
1000d0d6:	d80a      	bhi.n	1000d0ee <_printf_i+0x32>
1000d0d8:	2f00      	cmp	r7, #0
1000d0da:	f000 80d4 	beq.w	1000d286 <_printf_i+0x1ca>
1000d0de:	2f58      	cmp	r7, #88	; 0x58
1000d0e0:	f000 80c0 	beq.w	1000d264 <_printf_i+0x1a8>
1000d0e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
1000d0e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
1000d0ec:	e03a      	b.n	1000d164 <_printf_i+0xa8>
1000d0ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
1000d0f2:	2b15      	cmp	r3, #21
1000d0f4:	d8f6      	bhi.n	1000d0e4 <_printf_i+0x28>
1000d0f6:	a101      	add	r1, pc, #4	; (adr r1, 1000d0fc <_printf_i+0x40>)
1000d0f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
1000d0fc:	1000d155 	.word	0x1000d155
1000d100:	1000d169 	.word	0x1000d169
1000d104:	1000d0e5 	.word	0x1000d0e5
1000d108:	1000d0e5 	.word	0x1000d0e5
1000d10c:	1000d0e5 	.word	0x1000d0e5
1000d110:	1000d0e5 	.word	0x1000d0e5
1000d114:	1000d169 	.word	0x1000d169
1000d118:	1000d0e5 	.word	0x1000d0e5
1000d11c:	1000d0e5 	.word	0x1000d0e5
1000d120:	1000d0e5 	.word	0x1000d0e5
1000d124:	1000d0e5 	.word	0x1000d0e5
1000d128:	1000d26d 	.word	0x1000d26d
1000d12c:	1000d195 	.word	0x1000d195
1000d130:	1000d227 	.word	0x1000d227
1000d134:	1000d0e5 	.word	0x1000d0e5
1000d138:	1000d0e5 	.word	0x1000d0e5
1000d13c:	1000d28f 	.word	0x1000d28f
1000d140:	1000d0e5 	.word	0x1000d0e5
1000d144:	1000d195 	.word	0x1000d195
1000d148:	1000d0e5 	.word	0x1000d0e5
1000d14c:	1000d0e5 	.word	0x1000d0e5
1000d150:	1000d22f 	.word	0x1000d22f
1000d154:	682b      	ldr	r3, [r5, #0]
1000d156:	1d1a      	adds	r2, r3, #4
1000d158:	681b      	ldr	r3, [r3, #0]
1000d15a:	602a      	str	r2, [r5, #0]
1000d15c:	f104 0542 	add.w	r5, r4, #66	; 0x42
1000d160:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1000d164:	2301      	movs	r3, #1
1000d166:	e09f      	b.n	1000d2a8 <_printf_i+0x1ec>
1000d168:	6820      	ldr	r0, [r4, #0]
1000d16a:	682b      	ldr	r3, [r5, #0]
1000d16c:	0607      	lsls	r7, r0, #24
1000d16e:	f103 0104 	add.w	r1, r3, #4
1000d172:	6029      	str	r1, [r5, #0]
1000d174:	d501      	bpl.n	1000d17a <_printf_i+0xbe>
1000d176:	681e      	ldr	r6, [r3, #0]
1000d178:	e003      	b.n	1000d182 <_printf_i+0xc6>
1000d17a:	0646      	lsls	r6, r0, #25
1000d17c:	d5fb      	bpl.n	1000d176 <_printf_i+0xba>
1000d17e:	f9b3 6000 	ldrsh.w	r6, [r3]
1000d182:	2e00      	cmp	r6, #0
1000d184:	da03      	bge.n	1000d18e <_printf_i+0xd2>
1000d186:	232d      	movs	r3, #45	; 0x2d
1000d188:	4276      	negs	r6, r6
1000d18a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1000d18e:	485a      	ldr	r0, [pc, #360]	; (1000d2f8 <_printf_i+0x23c>)
1000d190:	230a      	movs	r3, #10
1000d192:	e012      	b.n	1000d1ba <_printf_i+0xfe>
1000d194:	682b      	ldr	r3, [r5, #0]
1000d196:	6820      	ldr	r0, [r4, #0]
1000d198:	1d19      	adds	r1, r3, #4
1000d19a:	6029      	str	r1, [r5, #0]
1000d19c:	0605      	lsls	r5, r0, #24
1000d19e:	d501      	bpl.n	1000d1a4 <_printf_i+0xe8>
1000d1a0:	681e      	ldr	r6, [r3, #0]
1000d1a2:	e002      	b.n	1000d1aa <_printf_i+0xee>
1000d1a4:	0641      	lsls	r1, r0, #25
1000d1a6:	d5fb      	bpl.n	1000d1a0 <_printf_i+0xe4>
1000d1a8:	881e      	ldrh	r6, [r3, #0]
1000d1aa:	4853      	ldr	r0, [pc, #332]	; (1000d2f8 <_printf_i+0x23c>)
1000d1ac:	2f6f      	cmp	r7, #111	; 0x6f
1000d1ae:	bf0c      	ite	eq
1000d1b0:	2308      	moveq	r3, #8
1000d1b2:	230a      	movne	r3, #10
1000d1b4:	2100      	movs	r1, #0
1000d1b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1000d1ba:	6865      	ldr	r5, [r4, #4]
1000d1bc:	60a5      	str	r5, [r4, #8]
1000d1be:	2d00      	cmp	r5, #0
1000d1c0:	bfa2      	ittt	ge
1000d1c2:	6821      	ldrge	r1, [r4, #0]
1000d1c4:	f021 0104 	bicge.w	r1, r1, #4
1000d1c8:	6021      	strge	r1, [r4, #0]
1000d1ca:	b90e      	cbnz	r6, 1000d1d0 <_printf_i+0x114>
1000d1cc:	2d00      	cmp	r5, #0
1000d1ce:	d04b      	beq.n	1000d268 <_printf_i+0x1ac>
1000d1d0:	4615      	mov	r5, r2
1000d1d2:	fbb6 f1f3 	udiv	r1, r6, r3
1000d1d6:	fb03 6711 	mls	r7, r3, r1, r6
1000d1da:	5dc7      	ldrb	r7, [r0, r7]
1000d1dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
1000d1e0:	4637      	mov	r7, r6
1000d1e2:	42bb      	cmp	r3, r7
1000d1e4:	460e      	mov	r6, r1
1000d1e6:	d9f4      	bls.n	1000d1d2 <_printf_i+0x116>
1000d1e8:	2b08      	cmp	r3, #8
1000d1ea:	d10b      	bne.n	1000d204 <_printf_i+0x148>
1000d1ec:	6823      	ldr	r3, [r4, #0]
1000d1ee:	07de      	lsls	r6, r3, #31
1000d1f0:	d508      	bpl.n	1000d204 <_printf_i+0x148>
1000d1f2:	6923      	ldr	r3, [r4, #16]
1000d1f4:	6861      	ldr	r1, [r4, #4]
1000d1f6:	4299      	cmp	r1, r3
1000d1f8:	bfde      	ittt	le
1000d1fa:	2330      	movle	r3, #48	; 0x30
1000d1fc:	f805 3c01 	strble.w	r3, [r5, #-1]
1000d200:	f105 35ff 	addle.w	r5, r5, #4294967295
1000d204:	1b52      	subs	r2, r2, r5
1000d206:	6122      	str	r2, [r4, #16]
1000d208:	f8cd a000 	str.w	sl, [sp]
1000d20c:	464b      	mov	r3, r9
1000d20e:	aa03      	add	r2, sp, #12
1000d210:	4621      	mov	r1, r4
1000d212:	4640      	mov	r0, r8
1000d214:	f7ff fee4 	bl	1000cfe0 <_printf_common>
1000d218:	3001      	adds	r0, #1
1000d21a:	d14a      	bne.n	1000d2b2 <_printf_i+0x1f6>
1000d21c:	f04f 30ff 	mov.w	r0, #4294967295
1000d220:	b004      	add	sp, #16
1000d222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000d226:	6823      	ldr	r3, [r4, #0]
1000d228:	f043 0320 	orr.w	r3, r3, #32
1000d22c:	6023      	str	r3, [r4, #0]
1000d22e:	4833      	ldr	r0, [pc, #204]	; (1000d2fc <_printf_i+0x240>)
1000d230:	2778      	movs	r7, #120	; 0x78
1000d232:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
1000d236:	6823      	ldr	r3, [r4, #0]
1000d238:	6829      	ldr	r1, [r5, #0]
1000d23a:	061f      	lsls	r7, r3, #24
1000d23c:	f851 6b04 	ldr.w	r6, [r1], #4
1000d240:	d402      	bmi.n	1000d248 <_printf_i+0x18c>
1000d242:	065f      	lsls	r7, r3, #25
1000d244:	bf48      	it	mi
1000d246:	b2b6      	uxthmi	r6, r6
1000d248:	07df      	lsls	r7, r3, #31
1000d24a:	bf48      	it	mi
1000d24c:	f043 0320 	orrmi.w	r3, r3, #32
1000d250:	6029      	str	r1, [r5, #0]
1000d252:	bf48      	it	mi
1000d254:	6023      	strmi	r3, [r4, #0]
1000d256:	b91e      	cbnz	r6, 1000d260 <_printf_i+0x1a4>
1000d258:	6823      	ldr	r3, [r4, #0]
1000d25a:	f023 0320 	bic.w	r3, r3, #32
1000d25e:	6023      	str	r3, [r4, #0]
1000d260:	2310      	movs	r3, #16
1000d262:	e7a7      	b.n	1000d1b4 <_printf_i+0xf8>
1000d264:	4824      	ldr	r0, [pc, #144]	; (1000d2f8 <_printf_i+0x23c>)
1000d266:	e7e4      	b.n	1000d232 <_printf_i+0x176>
1000d268:	4615      	mov	r5, r2
1000d26a:	e7bd      	b.n	1000d1e8 <_printf_i+0x12c>
1000d26c:	682b      	ldr	r3, [r5, #0]
1000d26e:	6826      	ldr	r6, [r4, #0]
1000d270:	6961      	ldr	r1, [r4, #20]
1000d272:	1d18      	adds	r0, r3, #4
1000d274:	6028      	str	r0, [r5, #0]
1000d276:	0635      	lsls	r5, r6, #24
1000d278:	681b      	ldr	r3, [r3, #0]
1000d27a:	d501      	bpl.n	1000d280 <_printf_i+0x1c4>
1000d27c:	6019      	str	r1, [r3, #0]
1000d27e:	e002      	b.n	1000d286 <_printf_i+0x1ca>
1000d280:	0670      	lsls	r0, r6, #25
1000d282:	d5fb      	bpl.n	1000d27c <_printf_i+0x1c0>
1000d284:	8019      	strh	r1, [r3, #0]
1000d286:	2300      	movs	r3, #0
1000d288:	6123      	str	r3, [r4, #16]
1000d28a:	4615      	mov	r5, r2
1000d28c:	e7bc      	b.n	1000d208 <_printf_i+0x14c>
1000d28e:	682b      	ldr	r3, [r5, #0]
1000d290:	1d1a      	adds	r2, r3, #4
1000d292:	602a      	str	r2, [r5, #0]
1000d294:	681d      	ldr	r5, [r3, #0]
1000d296:	6862      	ldr	r2, [r4, #4]
1000d298:	2100      	movs	r1, #0
1000d29a:	4628      	mov	r0, r5
1000d29c:	f7f2 fee8 	bl	10000070 <memchr>
1000d2a0:	b108      	cbz	r0, 1000d2a6 <_printf_i+0x1ea>
1000d2a2:	1b40      	subs	r0, r0, r5
1000d2a4:	6060      	str	r0, [r4, #4]
1000d2a6:	6863      	ldr	r3, [r4, #4]
1000d2a8:	6123      	str	r3, [r4, #16]
1000d2aa:	2300      	movs	r3, #0
1000d2ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1000d2b0:	e7aa      	b.n	1000d208 <_printf_i+0x14c>
1000d2b2:	6923      	ldr	r3, [r4, #16]
1000d2b4:	462a      	mov	r2, r5
1000d2b6:	4649      	mov	r1, r9
1000d2b8:	4640      	mov	r0, r8
1000d2ba:	47d0      	blx	sl
1000d2bc:	3001      	adds	r0, #1
1000d2be:	d0ad      	beq.n	1000d21c <_printf_i+0x160>
1000d2c0:	6823      	ldr	r3, [r4, #0]
1000d2c2:	079b      	lsls	r3, r3, #30
1000d2c4:	d413      	bmi.n	1000d2ee <_printf_i+0x232>
1000d2c6:	68e0      	ldr	r0, [r4, #12]
1000d2c8:	9b03      	ldr	r3, [sp, #12]
1000d2ca:	4298      	cmp	r0, r3
1000d2cc:	bfb8      	it	lt
1000d2ce:	4618      	movlt	r0, r3
1000d2d0:	e7a6      	b.n	1000d220 <_printf_i+0x164>
1000d2d2:	2301      	movs	r3, #1
1000d2d4:	4632      	mov	r2, r6
1000d2d6:	4649      	mov	r1, r9
1000d2d8:	4640      	mov	r0, r8
1000d2da:	47d0      	blx	sl
1000d2dc:	3001      	adds	r0, #1
1000d2de:	d09d      	beq.n	1000d21c <_printf_i+0x160>
1000d2e0:	3501      	adds	r5, #1
1000d2e2:	68e3      	ldr	r3, [r4, #12]
1000d2e4:	9903      	ldr	r1, [sp, #12]
1000d2e6:	1a5b      	subs	r3, r3, r1
1000d2e8:	42ab      	cmp	r3, r5
1000d2ea:	dcf2      	bgt.n	1000d2d2 <_printf_i+0x216>
1000d2ec:	e7eb      	b.n	1000d2c6 <_printf_i+0x20a>
1000d2ee:	2500      	movs	r5, #0
1000d2f0:	f104 0619 	add.w	r6, r4, #25
1000d2f4:	e7f5      	b.n	1000d2e2 <_printf_i+0x226>
1000d2f6:	bf00      	nop
1000d2f8:	1000dbfe 	.word	0x1000dbfe
1000d2fc:	1000dc0f 	.word	0x1000dc0f

1000d300 <__sflush_r>:
1000d300:	898a      	ldrh	r2, [r1, #12]
1000d302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000d306:	4605      	mov	r5, r0
1000d308:	0710      	lsls	r0, r2, #28
1000d30a:	460c      	mov	r4, r1
1000d30c:	d458      	bmi.n	1000d3c0 <__sflush_r+0xc0>
1000d30e:	684b      	ldr	r3, [r1, #4]
1000d310:	2b00      	cmp	r3, #0
1000d312:	dc05      	bgt.n	1000d320 <__sflush_r+0x20>
1000d314:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1000d316:	2b00      	cmp	r3, #0
1000d318:	dc02      	bgt.n	1000d320 <__sflush_r+0x20>
1000d31a:	2000      	movs	r0, #0
1000d31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000d320:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1000d322:	2e00      	cmp	r6, #0
1000d324:	d0f9      	beq.n	1000d31a <__sflush_r+0x1a>
1000d326:	2300      	movs	r3, #0
1000d328:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1000d32c:	682f      	ldr	r7, [r5, #0]
1000d32e:	6a21      	ldr	r1, [r4, #32]
1000d330:	602b      	str	r3, [r5, #0]
1000d332:	d032      	beq.n	1000d39a <__sflush_r+0x9a>
1000d334:	6d60      	ldr	r0, [r4, #84]	; 0x54
1000d336:	89a3      	ldrh	r3, [r4, #12]
1000d338:	075a      	lsls	r2, r3, #29
1000d33a:	d505      	bpl.n	1000d348 <__sflush_r+0x48>
1000d33c:	6863      	ldr	r3, [r4, #4]
1000d33e:	1ac0      	subs	r0, r0, r3
1000d340:	6b63      	ldr	r3, [r4, #52]	; 0x34
1000d342:	b10b      	cbz	r3, 1000d348 <__sflush_r+0x48>
1000d344:	6c23      	ldr	r3, [r4, #64]	; 0x40
1000d346:	1ac0      	subs	r0, r0, r3
1000d348:	2300      	movs	r3, #0
1000d34a:	4602      	mov	r2, r0
1000d34c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1000d34e:	6a21      	ldr	r1, [r4, #32]
1000d350:	4628      	mov	r0, r5
1000d352:	47b0      	blx	r6
1000d354:	1c43      	adds	r3, r0, #1
1000d356:	89a3      	ldrh	r3, [r4, #12]
1000d358:	d106      	bne.n	1000d368 <__sflush_r+0x68>
1000d35a:	6829      	ldr	r1, [r5, #0]
1000d35c:	291d      	cmp	r1, #29
1000d35e:	d82b      	bhi.n	1000d3b8 <__sflush_r+0xb8>
1000d360:	4a29      	ldr	r2, [pc, #164]	; (1000d408 <__sflush_r+0x108>)
1000d362:	410a      	asrs	r2, r1
1000d364:	07d6      	lsls	r6, r2, #31
1000d366:	d427      	bmi.n	1000d3b8 <__sflush_r+0xb8>
1000d368:	2200      	movs	r2, #0
1000d36a:	6062      	str	r2, [r4, #4]
1000d36c:	04d9      	lsls	r1, r3, #19
1000d36e:	6922      	ldr	r2, [r4, #16]
1000d370:	6022      	str	r2, [r4, #0]
1000d372:	d504      	bpl.n	1000d37e <__sflush_r+0x7e>
1000d374:	1c42      	adds	r2, r0, #1
1000d376:	d101      	bne.n	1000d37c <__sflush_r+0x7c>
1000d378:	682b      	ldr	r3, [r5, #0]
1000d37a:	b903      	cbnz	r3, 1000d37e <__sflush_r+0x7e>
1000d37c:	6560      	str	r0, [r4, #84]	; 0x54
1000d37e:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000d380:	602f      	str	r7, [r5, #0]
1000d382:	2900      	cmp	r1, #0
1000d384:	d0c9      	beq.n	1000d31a <__sflush_r+0x1a>
1000d386:	f104 0344 	add.w	r3, r4, #68	; 0x44
1000d38a:	4299      	cmp	r1, r3
1000d38c:	d002      	beq.n	1000d394 <__sflush_r+0x94>
1000d38e:	4628      	mov	r0, r5
1000d390:	f7ff fb3e 	bl	1000ca10 <_free_r>
1000d394:	2000      	movs	r0, #0
1000d396:	6360      	str	r0, [r4, #52]	; 0x34
1000d398:	e7c0      	b.n	1000d31c <__sflush_r+0x1c>
1000d39a:	2301      	movs	r3, #1
1000d39c:	4628      	mov	r0, r5
1000d39e:	47b0      	blx	r6
1000d3a0:	1c41      	adds	r1, r0, #1
1000d3a2:	d1c8      	bne.n	1000d336 <__sflush_r+0x36>
1000d3a4:	682b      	ldr	r3, [r5, #0]
1000d3a6:	2b00      	cmp	r3, #0
1000d3a8:	d0c5      	beq.n	1000d336 <__sflush_r+0x36>
1000d3aa:	2b1d      	cmp	r3, #29
1000d3ac:	d001      	beq.n	1000d3b2 <__sflush_r+0xb2>
1000d3ae:	2b16      	cmp	r3, #22
1000d3b0:	d101      	bne.n	1000d3b6 <__sflush_r+0xb6>
1000d3b2:	602f      	str	r7, [r5, #0]
1000d3b4:	e7b1      	b.n	1000d31a <__sflush_r+0x1a>
1000d3b6:	89a3      	ldrh	r3, [r4, #12]
1000d3b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000d3bc:	81a3      	strh	r3, [r4, #12]
1000d3be:	e7ad      	b.n	1000d31c <__sflush_r+0x1c>
1000d3c0:	690f      	ldr	r7, [r1, #16]
1000d3c2:	2f00      	cmp	r7, #0
1000d3c4:	d0a9      	beq.n	1000d31a <__sflush_r+0x1a>
1000d3c6:	0793      	lsls	r3, r2, #30
1000d3c8:	680e      	ldr	r6, [r1, #0]
1000d3ca:	bf08      	it	eq
1000d3cc:	694b      	ldreq	r3, [r1, #20]
1000d3ce:	600f      	str	r7, [r1, #0]
1000d3d0:	bf18      	it	ne
1000d3d2:	2300      	movne	r3, #0
1000d3d4:	eba6 0807 	sub.w	r8, r6, r7
1000d3d8:	608b      	str	r3, [r1, #8]
1000d3da:	f1b8 0f00 	cmp.w	r8, #0
1000d3de:	dd9c      	ble.n	1000d31a <__sflush_r+0x1a>
1000d3e0:	6a21      	ldr	r1, [r4, #32]
1000d3e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1000d3e4:	4643      	mov	r3, r8
1000d3e6:	463a      	mov	r2, r7
1000d3e8:	4628      	mov	r0, r5
1000d3ea:	47b0      	blx	r6
1000d3ec:	2800      	cmp	r0, #0
1000d3ee:	dc06      	bgt.n	1000d3fe <__sflush_r+0xfe>
1000d3f0:	89a3      	ldrh	r3, [r4, #12]
1000d3f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000d3f6:	81a3      	strh	r3, [r4, #12]
1000d3f8:	f04f 30ff 	mov.w	r0, #4294967295
1000d3fc:	e78e      	b.n	1000d31c <__sflush_r+0x1c>
1000d3fe:	4407      	add	r7, r0
1000d400:	eba8 0800 	sub.w	r8, r8, r0
1000d404:	e7e9      	b.n	1000d3da <__sflush_r+0xda>
1000d406:	bf00      	nop
1000d408:	dfbffffe 	.word	0xdfbffffe

1000d40c <_fflush_r>:
1000d40c:	b538      	push	{r3, r4, r5, lr}
1000d40e:	690b      	ldr	r3, [r1, #16]
1000d410:	4605      	mov	r5, r0
1000d412:	460c      	mov	r4, r1
1000d414:	b913      	cbnz	r3, 1000d41c <_fflush_r+0x10>
1000d416:	2500      	movs	r5, #0
1000d418:	4628      	mov	r0, r5
1000d41a:	bd38      	pop	{r3, r4, r5, pc}
1000d41c:	b118      	cbz	r0, 1000d426 <_fflush_r+0x1a>
1000d41e:	6a03      	ldr	r3, [r0, #32]
1000d420:	b90b      	cbnz	r3, 1000d426 <_fflush_r+0x1a>
1000d422:	f7ff f985 	bl	1000c730 <__sinit>
1000d426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000d42a:	2b00      	cmp	r3, #0
1000d42c:	d0f3      	beq.n	1000d416 <_fflush_r+0xa>
1000d42e:	6e62      	ldr	r2, [r4, #100]	; 0x64
1000d430:	07d0      	lsls	r0, r2, #31
1000d432:	d404      	bmi.n	1000d43e <_fflush_r+0x32>
1000d434:	0599      	lsls	r1, r3, #22
1000d436:	d402      	bmi.n	1000d43e <_fflush_r+0x32>
1000d438:	6da0      	ldr	r0, [r4, #88]	; 0x58
1000d43a:	f7ff fad2 	bl	1000c9e2 <__retarget_lock_acquire_recursive>
1000d43e:	4628      	mov	r0, r5
1000d440:	4621      	mov	r1, r4
1000d442:	f7ff ff5d 	bl	1000d300 <__sflush_r>
1000d446:	6e63      	ldr	r3, [r4, #100]	; 0x64
1000d448:	07da      	lsls	r2, r3, #31
1000d44a:	4605      	mov	r5, r0
1000d44c:	d4e4      	bmi.n	1000d418 <_fflush_r+0xc>
1000d44e:	89a3      	ldrh	r3, [r4, #12]
1000d450:	059b      	lsls	r3, r3, #22
1000d452:	d4e1      	bmi.n	1000d418 <_fflush_r+0xc>
1000d454:	6da0      	ldr	r0, [r4, #88]	; 0x58
1000d456:	f7ff fac5 	bl	1000c9e4 <__retarget_lock_release_recursive>
1000d45a:	e7dd      	b.n	1000d418 <_fflush_r+0xc>

1000d45c <__swbuf_r>:
1000d45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d45e:	460e      	mov	r6, r1
1000d460:	4614      	mov	r4, r2
1000d462:	4605      	mov	r5, r0
1000d464:	b118      	cbz	r0, 1000d46e <__swbuf_r+0x12>
1000d466:	6a03      	ldr	r3, [r0, #32]
1000d468:	b90b      	cbnz	r3, 1000d46e <__swbuf_r+0x12>
1000d46a:	f7ff f961 	bl	1000c730 <__sinit>
1000d46e:	69a3      	ldr	r3, [r4, #24]
1000d470:	60a3      	str	r3, [r4, #8]
1000d472:	89a3      	ldrh	r3, [r4, #12]
1000d474:	071a      	lsls	r2, r3, #28
1000d476:	d525      	bpl.n	1000d4c4 <__swbuf_r+0x68>
1000d478:	6923      	ldr	r3, [r4, #16]
1000d47a:	b31b      	cbz	r3, 1000d4c4 <__swbuf_r+0x68>
1000d47c:	6823      	ldr	r3, [r4, #0]
1000d47e:	6922      	ldr	r2, [r4, #16]
1000d480:	1a98      	subs	r0, r3, r2
1000d482:	6963      	ldr	r3, [r4, #20]
1000d484:	b2f6      	uxtb	r6, r6
1000d486:	4283      	cmp	r3, r0
1000d488:	4637      	mov	r7, r6
1000d48a:	dc04      	bgt.n	1000d496 <__swbuf_r+0x3a>
1000d48c:	4621      	mov	r1, r4
1000d48e:	4628      	mov	r0, r5
1000d490:	f7ff ffbc 	bl	1000d40c <_fflush_r>
1000d494:	b9e0      	cbnz	r0, 1000d4d0 <__swbuf_r+0x74>
1000d496:	68a3      	ldr	r3, [r4, #8]
1000d498:	3b01      	subs	r3, #1
1000d49a:	60a3      	str	r3, [r4, #8]
1000d49c:	6823      	ldr	r3, [r4, #0]
1000d49e:	1c5a      	adds	r2, r3, #1
1000d4a0:	6022      	str	r2, [r4, #0]
1000d4a2:	701e      	strb	r6, [r3, #0]
1000d4a4:	6962      	ldr	r2, [r4, #20]
1000d4a6:	1c43      	adds	r3, r0, #1
1000d4a8:	429a      	cmp	r2, r3
1000d4aa:	d004      	beq.n	1000d4b6 <__swbuf_r+0x5a>
1000d4ac:	89a3      	ldrh	r3, [r4, #12]
1000d4ae:	07db      	lsls	r3, r3, #31
1000d4b0:	d506      	bpl.n	1000d4c0 <__swbuf_r+0x64>
1000d4b2:	2e0a      	cmp	r6, #10
1000d4b4:	d104      	bne.n	1000d4c0 <__swbuf_r+0x64>
1000d4b6:	4621      	mov	r1, r4
1000d4b8:	4628      	mov	r0, r5
1000d4ba:	f7ff ffa7 	bl	1000d40c <_fflush_r>
1000d4be:	b938      	cbnz	r0, 1000d4d0 <__swbuf_r+0x74>
1000d4c0:	4638      	mov	r0, r7
1000d4c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d4c4:	4621      	mov	r1, r4
1000d4c6:	4628      	mov	r0, r5
1000d4c8:	f000 f806 	bl	1000d4d8 <__swsetup_r>
1000d4cc:	2800      	cmp	r0, #0
1000d4ce:	d0d5      	beq.n	1000d47c <__swbuf_r+0x20>
1000d4d0:	f04f 37ff 	mov.w	r7, #4294967295
1000d4d4:	e7f4      	b.n	1000d4c0 <__swbuf_r+0x64>
	...

1000d4d8 <__swsetup_r>:
1000d4d8:	b538      	push	{r3, r4, r5, lr}
1000d4da:	4b2a      	ldr	r3, [pc, #168]	; (1000d584 <__swsetup_r+0xac>)
1000d4dc:	4605      	mov	r5, r0
1000d4de:	6818      	ldr	r0, [r3, #0]
1000d4e0:	460c      	mov	r4, r1
1000d4e2:	b118      	cbz	r0, 1000d4ec <__swsetup_r+0x14>
1000d4e4:	6a03      	ldr	r3, [r0, #32]
1000d4e6:	b90b      	cbnz	r3, 1000d4ec <__swsetup_r+0x14>
1000d4e8:	f7ff f922 	bl	1000c730 <__sinit>
1000d4ec:	89a3      	ldrh	r3, [r4, #12]
1000d4ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1000d4f2:	0718      	lsls	r0, r3, #28
1000d4f4:	d422      	bmi.n	1000d53c <__swsetup_r+0x64>
1000d4f6:	06d9      	lsls	r1, r3, #27
1000d4f8:	d407      	bmi.n	1000d50a <__swsetup_r+0x32>
1000d4fa:	2309      	movs	r3, #9
1000d4fc:	602b      	str	r3, [r5, #0]
1000d4fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
1000d502:	81a3      	strh	r3, [r4, #12]
1000d504:	f04f 30ff 	mov.w	r0, #4294967295
1000d508:	e034      	b.n	1000d574 <__swsetup_r+0x9c>
1000d50a:	0758      	lsls	r0, r3, #29
1000d50c:	d512      	bpl.n	1000d534 <__swsetup_r+0x5c>
1000d50e:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000d510:	b141      	cbz	r1, 1000d524 <__swsetup_r+0x4c>
1000d512:	f104 0344 	add.w	r3, r4, #68	; 0x44
1000d516:	4299      	cmp	r1, r3
1000d518:	d002      	beq.n	1000d520 <__swsetup_r+0x48>
1000d51a:	4628      	mov	r0, r5
1000d51c:	f7ff fa78 	bl	1000ca10 <_free_r>
1000d520:	2300      	movs	r3, #0
1000d522:	6363      	str	r3, [r4, #52]	; 0x34
1000d524:	89a3      	ldrh	r3, [r4, #12]
1000d526:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1000d52a:	81a3      	strh	r3, [r4, #12]
1000d52c:	2300      	movs	r3, #0
1000d52e:	6063      	str	r3, [r4, #4]
1000d530:	6923      	ldr	r3, [r4, #16]
1000d532:	6023      	str	r3, [r4, #0]
1000d534:	89a3      	ldrh	r3, [r4, #12]
1000d536:	f043 0308 	orr.w	r3, r3, #8
1000d53a:	81a3      	strh	r3, [r4, #12]
1000d53c:	6923      	ldr	r3, [r4, #16]
1000d53e:	b94b      	cbnz	r3, 1000d554 <__swsetup_r+0x7c>
1000d540:	89a3      	ldrh	r3, [r4, #12]
1000d542:	f403 7320 	and.w	r3, r3, #640	; 0x280
1000d546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1000d54a:	d003      	beq.n	1000d554 <__swsetup_r+0x7c>
1000d54c:	4621      	mov	r1, r4
1000d54e:	4628      	mov	r0, r5
1000d550:	f000 f8cd 	bl	1000d6ee <__smakebuf_r>
1000d554:	89a0      	ldrh	r0, [r4, #12]
1000d556:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1000d55a:	f010 0301 	ands.w	r3, r0, #1
1000d55e:	d00a      	beq.n	1000d576 <__swsetup_r+0x9e>
1000d560:	2300      	movs	r3, #0
1000d562:	60a3      	str	r3, [r4, #8]
1000d564:	6963      	ldr	r3, [r4, #20]
1000d566:	425b      	negs	r3, r3
1000d568:	61a3      	str	r3, [r4, #24]
1000d56a:	6923      	ldr	r3, [r4, #16]
1000d56c:	b943      	cbnz	r3, 1000d580 <__swsetup_r+0xa8>
1000d56e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
1000d572:	d1c4      	bne.n	1000d4fe <__swsetup_r+0x26>
1000d574:	bd38      	pop	{r3, r4, r5, pc}
1000d576:	0781      	lsls	r1, r0, #30
1000d578:	bf58      	it	pl
1000d57a:	6963      	ldrpl	r3, [r4, #20]
1000d57c:	60a3      	str	r3, [r4, #8]
1000d57e:	e7f4      	b.n	1000d56a <__swsetup_r+0x92>
1000d580:	2000      	movs	r0, #0
1000d582:	e7f7      	b.n	1000d574 <__swsetup_r+0x9c>
1000d584:	1002011c 	.word	0x1002011c

1000d588 <memmove>:
1000d588:	4288      	cmp	r0, r1
1000d58a:	b510      	push	{r4, lr}
1000d58c:	eb01 0402 	add.w	r4, r1, r2
1000d590:	d902      	bls.n	1000d598 <memmove+0x10>
1000d592:	4284      	cmp	r4, r0
1000d594:	4623      	mov	r3, r4
1000d596:	d807      	bhi.n	1000d5a8 <memmove+0x20>
1000d598:	1e43      	subs	r3, r0, #1
1000d59a:	42a1      	cmp	r1, r4
1000d59c:	d008      	beq.n	1000d5b0 <memmove+0x28>
1000d59e:	f811 2b01 	ldrb.w	r2, [r1], #1
1000d5a2:	f803 2f01 	strb.w	r2, [r3, #1]!
1000d5a6:	e7f8      	b.n	1000d59a <memmove+0x12>
1000d5a8:	4402      	add	r2, r0
1000d5aa:	4601      	mov	r1, r0
1000d5ac:	428a      	cmp	r2, r1
1000d5ae:	d100      	bne.n	1000d5b2 <memmove+0x2a>
1000d5b0:	bd10      	pop	{r4, pc}
1000d5b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1000d5b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
1000d5ba:	e7f7      	b.n	1000d5ac <memmove+0x24>

1000d5bc <_raise_r>:
1000d5bc:	291f      	cmp	r1, #31
1000d5be:	b538      	push	{r3, r4, r5, lr}
1000d5c0:	4604      	mov	r4, r0
1000d5c2:	460d      	mov	r5, r1
1000d5c4:	d904      	bls.n	1000d5d0 <_raise_r+0x14>
1000d5c6:	2316      	movs	r3, #22
1000d5c8:	6003      	str	r3, [r0, #0]
1000d5ca:	f04f 30ff 	mov.w	r0, #4294967295
1000d5ce:	bd38      	pop	{r3, r4, r5, pc}
1000d5d0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
1000d5d2:	b112      	cbz	r2, 1000d5da <_raise_r+0x1e>
1000d5d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
1000d5d8:	b94b      	cbnz	r3, 1000d5ee <_raise_r+0x32>
1000d5da:	4620      	mov	r0, r4
1000d5dc:	f000 f830 	bl	1000d640 <_getpid_r>
1000d5e0:	462a      	mov	r2, r5
1000d5e2:	4601      	mov	r1, r0
1000d5e4:	4620      	mov	r0, r4
1000d5e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1000d5ea:	f000 b817 	b.w	1000d61c <_kill_r>
1000d5ee:	2b01      	cmp	r3, #1
1000d5f0:	d00a      	beq.n	1000d608 <_raise_r+0x4c>
1000d5f2:	1c59      	adds	r1, r3, #1
1000d5f4:	d103      	bne.n	1000d5fe <_raise_r+0x42>
1000d5f6:	2316      	movs	r3, #22
1000d5f8:	6003      	str	r3, [r0, #0]
1000d5fa:	2001      	movs	r0, #1
1000d5fc:	e7e7      	b.n	1000d5ce <_raise_r+0x12>
1000d5fe:	2400      	movs	r4, #0
1000d600:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
1000d604:	4628      	mov	r0, r5
1000d606:	4798      	blx	r3
1000d608:	2000      	movs	r0, #0
1000d60a:	e7e0      	b.n	1000d5ce <_raise_r+0x12>

1000d60c <raise>:
1000d60c:	4b02      	ldr	r3, [pc, #8]	; (1000d618 <raise+0xc>)
1000d60e:	4601      	mov	r1, r0
1000d610:	6818      	ldr	r0, [r3, #0]
1000d612:	f7ff bfd3 	b.w	1000d5bc <_raise_r>
1000d616:	bf00      	nop
1000d618:	1002011c 	.word	0x1002011c

1000d61c <_kill_r>:
1000d61c:	b538      	push	{r3, r4, r5, lr}
1000d61e:	4d07      	ldr	r5, [pc, #28]	; (1000d63c <_kill_r+0x20>)
1000d620:	2300      	movs	r3, #0
1000d622:	4604      	mov	r4, r0
1000d624:	4608      	mov	r0, r1
1000d626:	4611      	mov	r1, r2
1000d628:	602b      	str	r3, [r5, #0]
1000d62a:	f7f3 faad 	bl	10000b88 <_kill>
1000d62e:	1c43      	adds	r3, r0, #1
1000d630:	d102      	bne.n	1000d638 <_kill_r+0x1c>
1000d632:	682b      	ldr	r3, [r5, #0]
1000d634:	b103      	cbz	r3, 1000d638 <_kill_r+0x1c>
1000d636:	6023      	str	r3, [r4, #0]
1000d638:	bd38      	pop	{r3, r4, r5, pc}
1000d63a:	bf00      	nop
1000d63c:	10020590 	.word	0x10020590

1000d640 <_getpid_r>:
1000d640:	f7f3 ba9a 	b.w	10000b78 <_getpid>

1000d644 <_realloc_r>:
1000d644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000d648:	4680      	mov	r8, r0
1000d64a:	4614      	mov	r4, r2
1000d64c:	460e      	mov	r6, r1
1000d64e:	b921      	cbnz	r1, 1000d65a <_realloc_r+0x16>
1000d650:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1000d654:	4611      	mov	r1, r2
1000d656:	f7fe bf53 	b.w	1000c500 <_malloc_r>
1000d65a:	b92a      	cbnz	r2, 1000d668 <_realloc_r+0x24>
1000d65c:	f7ff f9d8 	bl	1000ca10 <_free_r>
1000d660:	4625      	mov	r5, r4
1000d662:	4628      	mov	r0, r5
1000d664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000d668:	f000 f8a0 	bl	1000d7ac <_malloc_usable_size_r>
1000d66c:	4284      	cmp	r4, r0
1000d66e:	4607      	mov	r7, r0
1000d670:	d802      	bhi.n	1000d678 <_realloc_r+0x34>
1000d672:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
1000d676:	d812      	bhi.n	1000d69e <_realloc_r+0x5a>
1000d678:	4621      	mov	r1, r4
1000d67a:	4640      	mov	r0, r8
1000d67c:	f7fe ff40 	bl	1000c500 <_malloc_r>
1000d680:	4605      	mov	r5, r0
1000d682:	2800      	cmp	r0, #0
1000d684:	d0ed      	beq.n	1000d662 <_realloc_r+0x1e>
1000d686:	42bc      	cmp	r4, r7
1000d688:	4622      	mov	r2, r4
1000d68a:	4631      	mov	r1, r6
1000d68c:	bf28      	it	cs
1000d68e:	463a      	movcs	r2, r7
1000d690:	f7ff f9a9 	bl	1000c9e6 <memcpy>
1000d694:	4631      	mov	r1, r6
1000d696:	4640      	mov	r0, r8
1000d698:	f7ff f9ba 	bl	1000ca10 <_free_r>
1000d69c:	e7e1      	b.n	1000d662 <_realloc_r+0x1e>
1000d69e:	4635      	mov	r5, r6
1000d6a0:	e7df      	b.n	1000d662 <_realloc_r+0x1e>

1000d6a2 <__swhatbuf_r>:
1000d6a2:	b570      	push	{r4, r5, r6, lr}
1000d6a4:	460c      	mov	r4, r1
1000d6a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000d6aa:	2900      	cmp	r1, #0
1000d6ac:	b096      	sub	sp, #88	; 0x58
1000d6ae:	4615      	mov	r5, r2
1000d6b0:	461e      	mov	r6, r3
1000d6b2:	da0d      	bge.n	1000d6d0 <__swhatbuf_r+0x2e>
1000d6b4:	89a3      	ldrh	r3, [r4, #12]
1000d6b6:	f013 0f80 	tst.w	r3, #128	; 0x80
1000d6ba:	f04f 0100 	mov.w	r1, #0
1000d6be:	bf0c      	ite	eq
1000d6c0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
1000d6c4:	2340      	movne	r3, #64	; 0x40
1000d6c6:	2000      	movs	r0, #0
1000d6c8:	6031      	str	r1, [r6, #0]
1000d6ca:	602b      	str	r3, [r5, #0]
1000d6cc:	b016      	add	sp, #88	; 0x58
1000d6ce:	bd70      	pop	{r4, r5, r6, pc}
1000d6d0:	466a      	mov	r2, sp
1000d6d2:	f000 f849 	bl	1000d768 <_fstat_r>
1000d6d6:	2800      	cmp	r0, #0
1000d6d8:	dbec      	blt.n	1000d6b4 <__swhatbuf_r+0x12>
1000d6da:	9901      	ldr	r1, [sp, #4]
1000d6dc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
1000d6e0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
1000d6e4:	4259      	negs	r1, r3
1000d6e6:	4159      	adcs	r1, r3
1000d6e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
1000d6ec:	e7eb      	b.n	1000d6c6 <__swhatbuf_r+0x24>

1000d6ee <__smakebuf_r>:
1000d6ee:	898b      	ldrh	r3, [r1, #12]
1000d6f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000d6f2:	079d      	lsls	r5, r3, #30
1000d6f4:	4606      	mov	r6, r0
1000d6f6:	460c      	mov	r4, r1
1000d6f8:	d507      	bpl.n	1000d70a <__smakebuf_r+0x1c>
1000d6fa:	f104 0347 	add.w	r3, r4, #71	; 0x47
1000d6fe:	6023      	str	r3, [r4, #0]
1000d700:	6123      	str	r3, [r4, #16]
1000d702:	2301      	movs	r3, #1
1000d704:	6163      	str	r3, [r4, #20]
1000d706:	b002      	add	sp, #8
1000d708:	bd70      	pop	{r4, r5, r6, pc}
1000d70a:	ab01      	add	r3, sp, #4
1000d70c:	466a      	mov	r2, sp
1000d70e:	f7ff ffc8 	bl	1000d6a2 <__swhatbuf_r>
1000d712:	9900      	ldr	r1, [sp, #0]
1000d714:	4605      	mov	r5, r0
1000d716:	4630      	mov	r0, r6
1000d718:	f7fe fef2 	bl	1000c500 <_malloc_r>
1000d71c:	b948      	cbnz	r0, 1000d732 <__smakebuf_r+0x44>
1000d71e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000d722:	059a      	lsls	r2, r3, #22
1000d724:	d4ef      	bmi.n	1000d706 <__smakebuf_r+0x18>
1000d726:	f023 0303 	bic.w	r3, r3, #3
1000d72a:	f043 0302 	orr.w	r3, r3, #2
1000d72e:	81a3      	strh	r3, [r4, #12]
1000d730:	e7e3      	b.n	1000d6fa <__smakebuf_r+0xc>
1000d732:	89a3      	ldrh	r3, [r4, #12]
1000d734:	6020      	str	r0, [r4, #0]
1000d736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1000d73a:	81a3      	strh	r3, [r4, #12]
1000d73c:	9b00      	ldr	r3, [sp, #0]
1000d73e:	6163      	str	r3, [r4, #20]
1000d740:	9b01      	ldr	r3, [sp, #4]
1000d742:	6120      	str	r0, [r4, #16]
1000d744:	b15b      	cbz	r3, 1000d75e <__smakebuf_r+0x70>
1000d746:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1000d74a:	4630      	mov	r0, r6
1000d74c:	f000 f81e 	bl	1000d78c <_isatty_r>
1000d750:	b128      	cbz	r0, 1000d75e <__smakebuf_r+0x70>
1000d752:	89a3      	ldrh	r3, [r4, #12]
1000d754:	f023 0303 	bic.w	r3, r3, #3
1000d758:	f043 0301 	orr.w	r3, r3, #1
1000d75c:	81a3      	strh	r3, [r4, #12]
1000d75e:	89a3      	ldrh	r3, [r4, #12]
1000d760:	431d      	orrs	r5, r3
1000d762:	81a5      	strh	r5, [r4, #12]
1000d764:	e7cf      	b.n	1000d706 <__smakebuf_r+0x18>
	...

1000d768 <_fstat_r>:
1000d768:	b538      	push	{r3, r4, r5, lr}
1000d76a:	4d07      	ldr	r5, [pc, #28]	; (1000d788 <_fstat_r+0x20>)
1000d76c:	2300      	movs	r3, #0
1000d76e:	4604      	mov	r4, r0
1000d770:	4608      	mov	r0, r1
1000d772:	4611      	mov	r1, r2
1000d774:	602b      	str	r3, [r5, #0]
1000d776:	f7f3 fa66 	bl	10000c46 <_fstat>
1000d77a:	1c43      	adds	r3, r0, #1
1000d77c:	d102      	bne.n	1000d784 <_fstat_r+0x1c>
1000d77e:	682b      	ldr	r3, [r5, #0]
1000d780:	b103      	cbz	r3, 1000d784 <_fstat_r+0x1c>
1000d782:	6023      	str	r3, [r4, #0]
1000d784:	bd38      	pop	{r3, r4, r5, pc}
1000d786:	bf00      	nop
1000d788:	10020590 	.word	0x10020590

1000d78c <_isatty_r>:
1000d78c:	b538      	push	{r3, r4, r5, lr}
1000d78e:	4d06      	ldr	r5, [pc, #24]	; (1000d7a8 <_isatty_r+0x1c>)
1000d790:	2300      	movs	r3, #0
1000d792:	4604      	mov	r4, r0
1000d794:	4608      	mov	r0, r1
1000d796:	602b      	str	r3, [r5, #0]
1000d798:	f7f3 fa65 	bl	10000c66 <_isatty>
1000d79c:	1c43      	adds	r3, r0, #1
1000d79e:	d102      	bne.n	1000d7a6 <_isatty_r+0x1a>
1000d7a0:	682b      	ldr	r3, [r5, #0]
1000d7a2:	b103      	cbz	r3, 1000d7a6 <_isatty_r+0x1a>
1000d7a4:	6023      	str	r3, [r4, #0]
1000d7a6:	bd38      	pop	{r3, r4, r5, pc}
1000d7a8:	10020590 	.word	0x10020590

1000d7ac <_malloc_usable_size_r>:
1000d7ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
1000d7b0:	1f18      	subs	r0, r3, #4
1000d7b2:	2b00      	cmp	r3, #0
1000d7b4:	bfbc      	itt	lt
1000d7b6:	580b      	ldrlt	r3, [r1, r0]
1000d7b8:	18c0      	addlt	r0, r0, r3
1000d7ba:	4770      	bx	lr

1000d7bc <_init>:
1000d7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d7be:	bf00      	nop
1000d7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000d7c2:	bc08      	pop	{r3}
1000d7c4:	469e      	mov	lr, r3
1000d7c6:	4770      	bx	lr

1000d7c8 <_fini>:
1000d7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d7ca:	bf00      	nop
1000d7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000d7ce:	bc08      	pop	{r3}
1000d7d0:	469e      	mov	lr, r3
1000d7d2:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

1000d7d4 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
1000d7d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 1000d80c <LoopForever+0x2>
  movs  r1, #0
1000d7d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
1000d7da:	e003      	b.n	1000d7e4 <LoopCopyDataInit>

1000d7dc <CopyDataInit>:
  ldr  r3, =_sidata
1000d7dc:	4b0c      	ldr	r3, [pc, #48]	; (1000d810 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
1000d7de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
1000d7e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
1000d7e2:	3104      	adds	r1, #4

1000d7e4 <LoopCopyDataInit>:
  ldr  r0, =_sdata
1000d7e4:	480b      	ldr	r0, [pc, #44]	; (1000d814 <LoopForever+0xa>)
  ldr  r3, =_edata
1000d7e6:	4b0c      	ldr	r3, [pc, #48]	; (1000d818 <LoopForever+0xe>)
  adds  r2, r0, r1
1000d7e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
1000d7ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
1000d7ec:	d3f6      	bcc.n	1000d7dc <CopyDataInit>
  ldr  r2, =_sbss
1000d7ee:	4a0b      	ldr	r2, [pc, #44]	; (1000d81c <LoopForever+0x12>)
  b  LoopFillZerobss
1000d7f0:	e002      	b.n	1000d7f8 <LoopFillZerobss>

1000d7f2 <FillZerobss>:
  movs  r3, #0
1000d7f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
1000d7f4:	f842 3b04 	str.w	r3, [r2], #4

1000d7f8 <LoopFillZerobss>:
  ldr  r3, = _ebss
1000d7f8:	4b09      	ldr	r3, [pc, #36]	; (1000d820 <LoopForever+0x16>)
  cmp  r2, r3
1000d7fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
1000d7fc:	d3f9      	bcc.n	1000d7f2 <FillZerobss>
  bl  SystemInit
1000d7fe:	f7f2 fc87 	bl	10000110 <SystemInit>
 bl __libc_init_array
1000d802:	f7ff f8c9 	bl	1000c998 <__libc_init_array>
  bl main
1000d806:	f7f2 fca9 	bl	1000015c <main>

1000d80a <LoopForever>:
    b LoopForever
1000d80a:	e7fe      	b.n	1000d80a <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
1000d80c:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
1000d810:	1000dc28 	.word	0x1000dc28
  ldr  r0, =_sdata
1000d814:	10020000 	.word	0x10020000
  ldr  r3, =_edata
1000d818:	10020120 	.word	0x10020120
  ldr  r2, =_sbss
1000d81c:	100201ac 	.word	0x100201ac
  ldr  r3, = _ebss
1000d820:	10020598 	.word	0x10020598


emotion_ai_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e20  10000000  10000000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  10012e20  10012e20  00032e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00004960  10012e80  10012e80  00032e80  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  100177e0  100177e0  00040dcc  2**0
                  CONTENTS
  5 .ARM          00000000  100177e0  100177e0  00040dcc  2**0
                  CONTENTS
  6 .preinit_array 00000000  100177e0  100177e0  00040dcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  100177e0  100177e0  000377e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  100177e4  100177e4  000377e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000d40  10020000  100177e8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 0000008c  10020d40  10018528  00040d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .bss          000090cc  10020dcc  100185b4  00040dcc  2**2
                  ALLOC
 12 ._user_heap_stack 00001000  10029e98  10021680  00040dcc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00040dcc  2**0
                  CONTENTS, READONLY
 14 .comment      00000093  00000000  00000000  00040dfc  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002898d  00000000  00000000  00040e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005668  00000000  00000000  0006981c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001b68  00000000  00000000  0006ee88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000149b  00000000  00000000  000709f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0004faea  00000000  00000000  00071e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000263bf  00000000  00000000  000c1975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001f9302  00000000  00000000  000e7d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000084b0  00000000  00000000  002e1038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000073  00000000  00000000  002e94e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	; (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	; (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	; (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	10020dcc 	.word	0x10020dcc
1000001c:	00000000 	.word	0x00000000
10000020:	10012e08 	.word	0x10012e08

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	; (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	; (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	; (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	10020dd0 	.word	0x10020dd0
1000003c:	10012e08 	.word	0x10012e08

10000040 <strcmp>:
10000040:	f810 2b01 	ldrb.w	r2, [r0], #1
10000044:	f811 3b01 	ldrb.w	r3, [r1], #1
10000048:	2a01      	cmp	r2, #1
1000004a:	bf28      	it	cs
1000004c:	429a      	cmpcs	r2, r3
1000004e:	d0f7      	beq.n	10000040 <strcmp>
10000050:	1ad0      	subs	r0, r2, r3
10000052:	4770      	bx	lr
	...

10000060 <memchr>:
10000060:	f001 01ff 	and.w	r1, r1, #255	; 0xff
10000064:	2a10      	cmp	r2, #16
10000066:	db2b      	blt.n	100000c0 <memchr+0x60>
10000068:	f010 0f07 	tst.w	r0, #7
1000006c:	d008      	beq.n	10000080 <memchr+0x20>
1000006e:	f810 3b01 	ldrb.w	r3, [r0], #1
10000072:	3a01      	subs	r2, #1
10000074:	428b      	cmp	r3, r1
10000076:	d02d      	beq.n	100000d4 <memchr+0x74>
10000078:	f010 0f07 	tst.w	r0, #7
1000007c:	b342      	cbz	r2, 100000d0 <memchr+0x70>
1000007e:	d1f6      	bne.n	1000006e <memchr+0xe>
10000080:	b4f0      	push	{r4, r5, r6, r7}
10000082:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
10000086:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1000008a:	f022 0407 	bic.w	r4, r2, #7
1000008e:	f07f 0700 	mvns.w	r7, #0
10000092:	2300      	movs	r3, #0
10000094:	e8f0 5602 	ldrd	r5, r6, [r0], #8
10000098:	3c08      	subs	r4, #8
1000009a:	ea85 0501 	eor.w	r5, r5, r1
1000009e:	ea86 0601 	eor.w	r6, r6, r1
100000a2:	fa85 f547 	uadd8	r5, r5, r7
100000a6:	faa3 f587 	sel	r5, r3, r7
100000aa:	fa86 f647 	uadd8	r6, r6, r7
100000ae:	faa5 f687 	sel	r6, r5, r7
100000b2:	b98e      	cbnz	r6, 100000d8 <memchr+0x78>
100000b4:	d1ee      	bne.n	10000094 <memchr+0x34>
100000b6:	bcf0      	pop	{r4, r5, r6, r7}
100000b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
100000bc:	f002 0207 	and.w	r2, r2, #7
100000c0:	b132      	cbz	r2, 100000d0 <memchr+0x70>
100000c2:	f810 3b01 	ldrb.w	r3, [r0], #1
100000c6:	3a01      	subs	r2, #1
100000c8:	ea83 0301 	eor.w	r3, r3, r1
100000cc:	b113      	cbz	r3, 100000d4 <memchr+0x74>
100000ce:	d1f8      	bne.n	100000c2 <memchr+0x62>
100000d0:	2000      	movs	r0, #0
100000d2:	4770      	bx	lr
100000d4:	3801      	subs	r0, #1
100000d6:	4770      	bx	lr
100000d8:	2d00      	cmp	r5, #0
100000da:	bf06      	itte	eq
100000dc:	4635      	moveq	r5, r6
100000de:	3803      	subeq	r0, #3
100000e0:	3807      	subne	r0, #7
100000e2:	f015 0f01 	tst.w	r5, #1
100000e6:	d107      	bne.n	100000f8 <memchr+0x98>
100000e8:	3001      	adds	r0, #1
100000ea:	f415 7f80 	tst.w	r5, #256	; 0x100
100000ee:	bf02      	ittt	eq
100000f0:	3001      	addeq	r0, #1
100000f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
100000f6:	3001      	addeq	r0, #1
100000f8:	bcf0      	pop	{r4, r5, r6, r7}
100000fa:	3801      	subs	r0, #1
100000fc:	4770      	bx	lr
100000fe:	bf00      	nop

10000100 <strlen>:
10000100:	4603      	mov	r3, r0
10000102:	f813 2b01 	ldrb.w	r2, [r3], #1
10000106:	2a00      	cmp	r2, #0
10000108:	d1fb      	bne.n	10000102 <strlen+0x2>
1000010a:	1a18      	subs	r0, r3, r0
1000010c:	3801      	subs	r0, #1
1000010e:	4770      	bx	lr

10000110 <__aeabi_drsub>:
10000110:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
10000114:	e002      	b.n	1000011c <__adddf3>
10000116:	bf00      	nop

10000118 <__aeabi_dsub>:
10000118:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1000011c <__adddf3>:
1000011c:	b530      	push	{r4, r5, lr}
1000011e:	ea4f 0441 	mov.w	r4, r1, lsl #1
10000122:	ea4f 0543 	mov.w	r5, r3, lsl #1
10000126:	ea94 0f05 	teq	r4, r5
1000012a:	bf08      	it	eq
1000012c:	ea90 0f02 	teqeq	r0, r2
10000130:	bf1f      	itttt	ne
10000132:	ea54 0c00 	orrsne.w	ip, r4, r0
10000136:	ea55 0c02 	orrsne.w	ip, r5, r2
1000013a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1000013e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
10000142:	f000 80e2 	beq.w	1000030a <__adddf3+0x1ee>
10000146:	ea4f 5454 	mov.w	r4, r4, lsr #21
1000014a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1000014e:	bfb8      	it	lt
10000150:	426d      	neglt	r5, r5
10000152:	dd0c      	ble.n	1000016e <__adddf3+0x52>
10000154:	442c      	add	r4, r5
10000156:	ea80 0202 	eor.w	r2, r0, r2
1000015a:	ea81 0303 	eor.w	r3, r1, r3
1000015e:	ea82 0000 	eor.w	r0, r2, r0
10000162:	ea83 0101 	eor.w	r1, r3, r1
10000166:	ea80 0202 	eor.w	r2, r0, r2
1000016a:	ea81 0303 	eor.w	r3, r1, r3
1000016e:	2d36      	cmp	r5, #54	; 0x36
10000170:	bf88      	it	hi
10000172:	bd30      	pophi	{r4, r5, pc}
10000174:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
10000178:	ea4f 3101 	mov.w	r1, r1, lsl #12
1000017c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
10000180:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
10000184:	d002      	beq.n	1000018c <__adddf3+0x70>
10000186:	4240      	negs	r0, r0
10000188:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1000018c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
10000190:	ea4f 3303 	mov.w	r3, r3, lsl #12
10000194:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
10000198:	d002      	beq.n	100001a0 <__adddf3+0x84>
1000019a:	4252      	negs	r2, r2
1000019c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
100001a0:	ea94 0f05 	teq	r4, r5
100001a4:	f000 80a7 	beq.w	100002f6 <__adddf3+0x1da>
100001a8:	f1a4 0401 	sub.w	r4, r4, #1
100001ac:	f1d5 0e20 	rsbs	lr, r5, #32
100001b0:	db0d      	blt.n	100001ce <__adddf3+0xb2>
100001b2:	fa02 fc0e 	lsl.w	ip, r2, lr
100001b6:	fa22 f205 	lsr.w	r2, r2, r5
100001ba:	1880      	adds	r0, r0, r2
100001bc:	f141 0100 	adc.w	r1, r1, #0
100001c0:	fa03 f20e 	lsl.w	r2, r3, lr
100001c4:	1880      	adds	r0, r0, r2
100001c6:	fa43 f305 	asr.w	r3, r3, r5
100001ca:	4159      	adcs	r1, r3
100001cc:	e00e      	b.n	100001ec <__adddf3+0xd0>
100001ce:	f1a5 0520 	sub.w	r5, r5, #32
100001d2:	f10e 0e20 	add.w	lr, lr, #32
100001d6:	2a01      	cmp	r2, #1
100001d8:	fa03 fc0e 	lsl.w	ip, r3, lr
100001dc:	bf28      	it	cs
100001de:	f04c 0c02 	orrcs.w	ip, ip, #2
100001e2:	fa43 f305 	asr.w	r3, r3, r5
100001e6:	18c0      	adds	r0, r0, r3
100001e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
100001ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
100001f0:	d507      	bpl.n	10000202 <__adddf3+0xe6>
100001f2:	f04f 0e00 	mov.w	lr, #0
100001f6:	f1dc 0c00 	rsbs	ip, ip, #0
100001fa:	eb7e 0000 	sbcs.w	r0, lr, r0
100001fe:	eb6e 0101 	sbc.w	r1, lr, r1
10000202:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
10000206:	d31b      	bcc.n	10000240 <__adddf3+0x124>
10000208:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1000020c:	d30c      	bcc.n	10000228 <__adddf3+0x10c>
1000020e:	0849      	lsrs	r1, r1, #1
10000210:	ea5f 0030 	movs.w	r0, r0, rrx
10000214:	ea4f 0c3c 	mov.w	ip, ip, rrx
10000218:	f104 0401 	add.w	r4, r4, #1
1000021c:	ea4f 5244 	mov.w	r2, r4, lsl #21
10000220:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
10000224:	f080 809a 	bcs.w	1000035c <__adddf3+0x240>
10000228:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1000022c:	bf08      	it	eq
1000022e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
10000232:	f150 0000 	adcs.w	r0, r0, #0
10000236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1000023a:	ea41 0105 	orr.w	r1, r1, r5
1000023e:	bd30      	pop	{r4, r5, pc}
10000240:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
10000244:	4140      	adcs	r0, r0
10000246:	eb41 0101 	adc.w	r1, r1, r1
1000024a:	3c01      	subs	r4, #1
1000024c:	bf28      	it	cs
1000024e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
10000252:	d2e9      	bcs.n	10000228 <__adddf3+0x10c>
10000254:	f091 0f00 	teq	r1, #0
10000258:	bf04      	itt	eq
1000025a:	4601      	moveq	r1, r0
1000025c:	2000      	moveq	r0, #0
1000025e:	fab1 f381 	clz	r3, r1
10000262:	bf08      	it	eq
10000264:	3320      	addeq	r3, #32
10000266:	f1a3 030b 	sub.w	r3, r3, #11
1000026a:	f1b3 0220 	subs.w	r2, r3, #32
1000026e:	da0c      	bge.n	1000028a <__adddf3+0x16e>
10000270:	320c      	adds	r2, #12
10000272:	dd08      	ble.n	10000286 <__adddf3+0x16a>
10000274:	f102 0c14 	add.w	ip, r2, #20
10000278:	f1c2 020c 	rsb	r2, r2, #12
1000027c:	fa01 f00c 	lsl.w	r0, r1, ip
10000280:	fa21 f102 	lsr.w	r1, r1, r2
10000284:	e00c      	b.n	100002a0 <__adddf3+0x184>
10000286:	f102 0214 	add.w	r2, r2, #20
1000028a:	bfd8      	it	le
1000028c:	f1c2 0c20 	rsble	ip, r2, #32
10000290:	fa01 f102 	lsl.w	r1, r1, r2
10000294:	fa20 fc0c 	lsr.w	ip, r0, ip
10000298:	bfdc      	itt	le
1000029a:	ea41 010c 	orrle.w	r1, r1, ip
1000029e:	4090      	lslle	r0, r2
100002a0:	1ae4      	subs	r4, r4, r3
100002a2:	bfa2      	ittt	ge
100002a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
100002a8:	4329      	orrge	r1, r5
100002aa:	bd30      	popge	{r4, r5, pc}
100002ac:	ea6f 0404 	mvn.w	r4, r4
100002b0:	3c1f      	subs	r4, #31
100002b2:	da1c      	bge.n	100002ee <__adddf3+0x1d2>
100002b4:	340c      	adds	r4, #12
100002b6:	dc0e      	bgt.n	100002d6 <__adddf3+0x1ba>
100002b8:	f104 0414 	add.w	r4, r4, #20
100002bc:	f1c4 0220 	rsb	r2, r4, #32
100002c0:	fa20 f004 	lsr.w	r0, r0, r4
100002c4:	fa01 f302 	lsl.w	r3, r1, r2
100002c8:	ea40 0003 	orr.w	r0, r0, r3
100002cc:	fa21 f304 	lsr.w	r3, r1, r4
100002d0:	ea45 0103 	orr.w	r1, r5, r3
100002d4:	bd30      	pop	{r4, r5, pc}
100002d6:	f1c4 040c 	rsb	r4, r4, #12
100002da:	f1c4 0220 	rsb	r2, r4, #32
100002de:	fa20 f002 	lsr.w	r0, r0, r2
100002e2:	fa01 f304 	lsl.w	r3, r1, r4
100002e6:	ea40 0003 	orr.w	r0, r0, r3
100002ea:	4629      	mov	r1, r5
100002ec:	bd30      	pop	{r4, r5, pc}
100002ee:	fa21 f004 	lsr.w	r0, r1, r4
100002f2:	4629      	mov	r1, r5
100002f4:	bd30      	pop	{r4, r5, pc}
100002f6:	f094 0f00 	teq	r4, #0
100002fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
100002fe:	bf06      	itte	eq
10000300:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
10000304:	3401      	addeq	r4, #1
10000306:	3d01      	subne	r5, #1
10000308:	e74e      	b.n	100001a8 <__adddf3+0x8c>
1000030a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1000030e:	bf18      	it	ne
10000310:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
10000314:	d029      	beq.n	1000036a <__adddf3+0x24e>
10000316:	ea94 0f05 	teq	r4, r5
1000031a:	bf08      	it	eq
1000031c:	ea90 0f02 	teqeq	r0, r2
10000320:	d005      	beq.n	1000032e <__adddf3+0x212>
10000322:	ea54 0c00 	orrs.w	ip, r4, r0
10000326:	bf04      	itt	eq
10000328:	4619      	moveq	r1, r3
1000032a:	4610      	moveq	r0, r2
1000032c:	bd30      	pop	{r4, r5, pc}
1000032e:	ea91 0f03 	teq	r1, r3
10000332:	bf1e      	ittt	ne
10000334:	2100      	movne	r1, #0
10000336:	2000      	movne	r0, #0
10000338:	bd30      	popne	{r4, r5, pc}
1000033a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1000033e:	d105      	bne.n	1000034c <__adddf3+0x230>
10000340:	0040      	lsls	r0, r0, #1
10000342:	4149      	adcs	r1, r1
10000344:	bf28      	it	cs
10000346:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1000034a:	bd30      	pop	{r4, r5, pc}
1000034c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
10000350:	bf3c      	itt	cc
10000352:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
10000356:	bd30      	popcc	{r4, r5, pc}
10000358:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1000035c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
10000360:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
10000364:	f04f 0000 	mov.w	r0, #0
10000368:	bd30      	pop	{r4, r5, pc}
1000036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1000036e:	bf1a      	itte	ne
10000370:	4619      	movne	r1, r3
10000372:	4610      	movne	r0, r2
10000374:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
10000378:	bf1c      	itt	ne
1000037a:	460b      	movne	r3, r1
1000037c:	4602      	movne	r2, r0
1000037e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
10000382:	bf06      	itte	eq
10000384:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
10000388:	ea91 0f03 	teqeq	r1, r3
1000038c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
10000390:	bd30      	pop	{r4, r5, pc}
10000392:	bf00      	nop

10000394 <__aeabi_ui2d>:
10000394:	f090 0f00 	teq	r0, #0
10000398:	bf04      	itt	eq
1000039a:	2100      	moveq	r1, #0
1000039c:	4770      	bxeq	lr
1000039e:	b530      	push	{r4, r5, lr}
100003a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
100003a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
100003a8:	f04f 0500 	mov.w	r5, #0
100003ac:	f04f 0100 	mov.w	r1, #0
100003b0:	e750      	b.n	10000254 <__adddf3+0x138>
100003b2:	bf00      	nop

100003b4 <__aeabi_i2d>:
100003b4:	f090 0f00 	teq	r0, #0
100003b8:	bf04      	itt	eq
100003ba:	2100      	moveq	r1, #0
100003bc:	4770      	bxeq	lr
100003be:	b530      	push	{r4, r5, lr}
100003c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
100003c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
100003c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
100003cc:	bf48      	it	mi
100003ce:	4240      	negmi	r0, r0
100003d0:	f04f 0100 	mov.w	r1, #0
100003d4:	e73e      	b.n	10000254 <__adddf3+0x138>
100003d6:	bf00      	nop

100003d8 <__aeabi_f2d>:
100003d8:	0042      	lsls	r2, r0, #1
100003da:	ea4f 01e2 	mov.w	r1, r2, asr #3
100003de:	ea4f 0131 	mov.w	r1, r1, rrx
100003e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
100003e6:	bf1f      	itttt	ne
100003e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
100003ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
100003f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
100003f4:	4770      	bxne	lr
100003f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
100003fa:	bf08      	it	eq
100003fc:	4770      	bxeq	lr
100003fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
10000402:	bf04      	itt	eq
10000404:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
10000408:	4770      	bxeq	lr
1000040a:	b530      	push	{r4, r5, lr}
1000040c:	f44f 7460 	mov.w	r4, #896	; 0x380
10000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
10000414:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
10000418:	e71c      	b.n	10000254 <__adddf3+0x138>
1000041a:	bf00      	nop

1000041c <__aeabi_ul2d>:
1000041c:	ea50 0201 	orrs.w	r2, r0, r1
10000420:	bf08      	it	eq
10000422:	4770      	bxeq	lr
10000424:	b530      	push	{r4, r5, lr}
10000426:	f04f 0500 	mov.w	r5, #0
1000042a:	e00a      	b.n	10000442 <__aeabi_l2d+0x16>

1000042c <__aeabi_l2d>:
1000042c:	ea50 0201 	orrs.w	r2, r0, r1
10000430:	bf08      	it	eq
10000432:	4770      	bxeq	lr
10000434:	b530      	push	{r4, r5, lr}
10000436:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1000043a:	d502      	bpl.n	10000442 <__aeabi_l2d+0x16>
1000043c:	4240      	negs	r0, r0
1000043e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10000442:	f44f 6480 	mov.w	r4, #1024	; 0x400
10000446:	f104 0432 	add.w	r4, r4, #50	; 0x32
1000044a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1000044e:	f43f aed8 	beq.w	10000202 <__adddf3+0xe6>
10000452:	f04f 0203 	mov.w	r2, #3
10000456:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1000045a:	bf18      	it	ne
1000045c:	3203      	addne	r2, #3
1000045e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
10000462:	bf18      	it	ne
10000464:	3203      	addne	r2, #3
10000466:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1000046a:	f1c2 0320 	rsb	r3, r2, #32
1000046e:	fa00 fc03 	lsl.w	ip, r0, r3
10000472:	fa20 f002 	lsr.w	r0, r0, r2
10000476:	fa01 fe03 	lsl.w	lr, r1, r3
1000047a:	ea40 000e 	orr.w	r0, r0, lr
1000047e:	fa21 f102 	lsr.w	r1, r1, r2
10000482:	4414      	add	r4, r2
10000484:	e6bd      	b.n	10000202 <__adddf3+0xe6>
10000486:	bf00      	nop

10000488 <__aeabi_dmul>:
10000488:	b570      	push	{r4, r5, r6, lr}
1000048a:	f04f 0cff 	mov.w	ip, #255	; 0xff
1000048e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
10000492:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
10000496:	bf1d      	ittte	ne
10000498:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1000049c:	ea94 0f0c 	teqne	r4, ip
100004a0:	ea95 0f0c 	teqne	r5, ip
100004a4:	f000 f8de 	bleq	10000664 <__aeabi_dmul+0x1dc>
100004a8:	442c      	add	r4, r5
100004aa:	ea81 0603 	eor.w	r6, r1, r3
100004ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
100004b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
100004b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
100004ba:	bf18      	it	ne
100004bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
100004c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
100004c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
100004c8:	d038      	beq.n	1000053c <__aeabi_dmul+0xb4>
100004ca:	fba0 ce02 	umull	ip, lr, r0, r2
100004ce:	f04f 0500 	mov.w	r5, #0
100004d2:	fbe1 e502 	umlal	lr, r5, r1, r2
100004d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
100004da:	fbe0 e503 	umlal	lr, r5, r0, r3
100004de:	f04f 0600 	mov.w	r6, #0
100004e2:	fbe1 5603 	umlal	r5, r6, r1, r3
100004e6:	f09c 0f00 	teq	ip, #0
100004ea:	bf18      	it	ne
100004ec:	f04e 0e01 	orrne.w	lr, lr, #1
100004f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
100004f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
100004f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
100004fc:	d204      	bcs.n	10000508 <__aeabi_dmul+0x80>
100004fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
10000502:	416d      	adcs	r5, r5
10000504:	eb46 0606 	adc.w	r6, r6, r6
10000508:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1000050c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
10000510:	ea4f 20c5 	mov.w	r0, r5, lsl #11
10000514:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
10000518:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1000051c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
10000520:	bf88      	it	hi
10000522:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
10000526:	d81e      	bhi.n	10000566 <__aeabi_dmul+0xde>
10000528:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1000052c:	bf08      	it	eq
1000052e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
10000532:	f150 0000 	adcs.w	r0, r0, #0
10000536:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1000053a:	bd70      	pop	{r4, r5, r6, pc}
1000053c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
10000540:	ea46 0101 	orr.w	r1, r6, r1
10000544:	ea40 0002 	orr.w	r0, r0, r2
10000548:	ea81 0103 	eor.w	r1, r1, r3
1000054c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
10000550:	bfc2      	ittt	gt
10000552:	ebd4 050c 	rsbsgt	r5, r4, ip
10000556:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1000055a:	bd70      	popgt	{r4, r5, r6, pc}
1000055c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
10000560:	f04f 0e00 	mov.w	lr, #0
10000564:	3c01      	subs	r4, #1
10000566:	f300 80ab 	bgt.w	100006c0 <__aeabi_dmul+0x238>
1000056a:	f114 0f36 	cmn.w	r4, #54	; 0x36
1000056e:	bfde      	ittt	le
10000570:	2000      	movle	r0, #0
10000572:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
10000576:	bd70      	pople	{r4, r5, r6, pc}
10000578:	f1c4 0400 	rsb	r4, r4, #0
1000057c:	3c20      	subs	r4, #32
1000057e:	da35      	bge.n	100005ec <__aeabi_dmul+0x164>
10000580:	340c      	adds	r4, #12
10000582:	dc1b      	bgt.n	100005bc <__aeabi_dmul+0x134>
10000584:	f104 0414 	add.w	r4, r4, #20
10000588:	f1c4 0520 	rsb	r5, r4, #32
1000058c:	fa00 f305 	lsl.w	r3, r0, r5
10000590:	fa20 f004 	lsr.w	r0, r0, r4
10000594:	fa01 f205 	lsl.w	r2, r1, r5
10000598:	ea40 0002 	orr.w	r0, r0, r2
1000059c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
100005a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
100005a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
100005a8:	fa21 f604 	lsr.w	r6, r1, r4
100005ac:	eb42 0106 	adc.w	r1, r2, r6
100005b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
100005b4:	bf08      	it	eq
100005b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
100005ba:	bd70      	pop	{r4, r5, r6, pc}
100005bc:	f1c4 040c 	rsb	r4, r4, #12
100005c0:	f1c4 0520 	rsb	r5, r4, #32
100005c4:	fa00 f304 	lsl.w	r3, r0, r4
100005c8:	fa20 f005 	lsr.w	r0, r0, r5
100005cc:	fa01 f204 	lsl.w	r2, r1, r4
100005d0:	ea40 0002 	orr.w	r0, r0, r2
100005d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
100005d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
100005dc:	f141 0100 	adc.w	r1, r1, #0
100005e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
100005e4:	bf08      	it	eq
100005e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
100005ea:	bd70      	pop	{r4, r5, r6, pc}
100005ec:	f1c4 0520 	rsb	r5, r4, #32
100005f0:	fa00 f205 	lsl.w	r2, r0, r5
100005f4:	ea4e 0e02 	orr.w	lr, lr, r2
100005f8:	fa20 f304 	lsr.w	r3, r0, r4
100005fc:	fa01 f205 	lsl.w	r2, r1, r5
10000600:	ea43 0302 	orr.w	r3, r3, r2
10000604:	fa21 f004 	lsr.w	r0, r1, r4
10000608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1000060c:	fa21 f204 	lsr.w	r2, r1, r4
10000610:	ea20 0002 	bic.w	r0, r0, r2
10000614:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
10000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1000061c:	bf08      	it	eq
1000061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
10000622:	bd70      	pop	{r4, r5, r6, pc}
10000624:	f094 0f00 	teq	r4, #0
10000628:	d10f      	bne.n	1000064a <__aeabi_dmul+0x1c2>
1000062a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1000062e:	0040      	lsls	r0, r0, #1
10000630:	eb41 0101 	adc.w	r1, r1, r1
10000634:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
10000638:	bf08      	it	eq
1000063a:	3c01      	subeq	r4, #1
1000063c:	d0f7      	beq.n	1000062e <__aeabi_dmul+0x1a6>
1000063e:	ea41 0106 	orr.w	r1, r1, r6
10000642:	f095 0f00 	teq	r5, #0
10000646:	bf18      	it	ne
10000648:	4770      	bxne	lr
1000064a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1000064e:	0052      	lsls	r2, r2, #1
10000650:	eb43 0303 	adc.w	r3, r3, r3
10000654:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
10000658:	bf08      	it	eq
1000065a:	3d01      	subeq	r5, #1
1000065c:	d0f7      	beq.n	1000064e <__aeabi_dmul+0x1c6>
1000065e:	ea43 0306 	orr.w	r3, r3, r6
10000662:	4770      	bx	lr
10000664:	ea94 0f0c 	teq	r4, ip
10000668:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1000066c:	bf18      	it	ne
1000066e:	ea95 0f0c 	teqne	r5, ip
10000672:	d00c      	beq.n	1000068e <__aeabi_dmul+0x206>
10000674:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
10000678:	bf18      	it	ne
1000067a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1000067e:	d1d1      	bne.n	10000624 <__aeabi_dmul+0x19c>
10000680:	ea81 0103 	eor.w	r1, r1, r3
10000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
10000688:	f04f 0000 	mov.w	r0, #0
1000068c:	bd70      	pop	{r4, r5, r6, pc}
1000068e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
10000692:	bf06      	itte	eq
10000694:	4610      	moveq	r0, r2
10000696:	4619      	moveq	r1, r3
10000698:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1000069c:	d019      	beq.n	100006d2 <__aeabi_dmul+0x24a>
1000069e:	ea94 0f0c 	teq	r4, ip
100006a2:	d102      	bne.n	100006aa <__aeabi_dmul+0x222>
100006a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
100006a8:	d113      	bne.n	100006d2 <__aeabi_dmul+0x24a>
100006aa:	ea95 0f0c 	teq	r5, ip
100006ae:	d105      	bne.n	100006bc <__aeabi_dmul+0x234>
100006b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
100006b4:	bf1c      	itt	ne
100006b6:	4610      	movne	r0, r2
100006b8:	4619      	movne	r1, r3
100006ba:	d10a      	bne.n	100006d2 <__aeabi_dmul+0x24a>
100006bc:	ea81 0103 	eor.w	r1, r1, r3
100006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
100006c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
100006c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
100006cc:	f04f 0000 	mov.w	r0, #0
100006d0:	bd70      	pop	{r4, r5, r6, pc}
100006d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
100006d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
100006da:	bd70      	pop	{r4, r5, r6, pc}

100006dc <__aeabi_ddiv>:
100006dc:	b570      	push	{r4, r5, r6, lr}
100006de:	f04f 0cff 	mov.w	ip, #255	; 0xff
100006e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
100006e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
100006ea:	bf1d      	ittte	ne
100006ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
100006f0:	ea94 0f0c 	teqne	r4, ip
100006f4:	ea95 0f0c 	teqne	r5, ip
100006f8:	f000 f8a7 	bleq	1000084a <__aeabi_ddiv+0x16e>
100006fc:	eba4 0405 	sub.w	r4, r4, r5
10000700:	ea81 0e03 	eor.w	lr, r1, r3
10000704:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
10000708:	ea4f 3101 	mov.w	r1, r1, lsl #12
1000070c:	f000 8088 	beq.w	10000820 <__aeabi_ddiv+0x144>
10000710:	ea4f 3303 	mov.w	r3, r3, lsl #12
10000714:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
10000718:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1000071c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
10000720:	ea4f 2202 	mov.w	r2, r2, lsl #8
10000724:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
10000728:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1000072c:	ea4f 2600 	mov.w	r6, r0, lsl #8
10000730:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
10000734:	429d      	cmp	r5, r3
10000736:	bf08      	it	eq
10000738:	4296      	cmpeq	r6, r2
1000073a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1000073e:	f504 7440 	add.w	r4, r4, #768	; 0x300
10000742:	d202      	bcs.n	1000074a <__aeabi_ddiv+0x6e>
10000744:	085b      	lsrs	r3, r3, #1
10000746:	ea4f 0232 	mov.w	r2, r2, rrx
1000074a:	1ab6      	subs	r6, r6, r2
1000074c:	eb65 0503 	sbc.w	r5, r5, r3
10000750:	085b      	lsrs	r3, r3, #1
10000752:	ea4f 0232 	mov.w	r2, r2, rrx
10000756:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1000075a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1000075e:	ebb6 0e02 	subs.w	lr, r6, r2
10000762:	eb75 0e03 	sbcs.w	lr, r5, r3
10000766:	bf22      	ittt	cs
10000768:	1ab6      	subcs	r6, r6, r2
1000076a:	4675      	movcs	r5, lr
1000076c:	ea40 000c 	orrcs.w	r0, r0, ip
10000770:	085b      	lsrs	r3, r3, #1
10000772:	ea4f 0232 	mov.w	r2, r2, rrx
10000776:	ebb6 0e02 	subs.w	lr, r6, r2
1000077a:	eb75 0e03 	sbcs.w	lr, r5, r3
1000077e:	bf22      	ittt	cs
10000780:	1ab6      	subcs	r6, r6, r2
10000782:	4675      	movcs	r5, lr
10000784:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
10000788:	085b      	lsrs	r3, r3, #1
1000078a:	ea4f 0232 	mov.w	r2, r2, rrx
1000078e:	ebb6 0e02 	subs.w	lr, r6, r2
10000792:	eb75 0e03 	sbcs.w	lr, r5, r3
10000796:	bf22      	ittt	cs
10000798:	1ab6      	subcs	r6, r6, r2
1000079a:	4675      	movcs	r5, lr
1000079c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
100007a0:	085b      	lsrs	r3, r3, #1
100007a2:	ea4f 0232 	mov.w	r2, r2, rrx
100007a6:	ebb6 0e02 	subs.w	lr, r6, r2
100007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
100007ae:	bf22      	ittt	cs
100007b0:	1ab6      	subcs	r6, r6, r2
100007b2:	4675      	movcs	r5, lr
100007b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
100007b8:	ea55 0e06 	orrs.w	lr, r5, r6
100007bc:	d018      	beq.n	100007f0 <__aeabi_ddiv+0x114>
100007be:	ea4f 1505 	mov.w	r5, r5, lsl #4
100007c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
100007c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
100007ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
100007ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
100007d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
100007d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
100007da:	d1c0      	bne.n	1000075e <__aeabi_ddiv+0x82>
100007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
100007e0:	d10b      	bne.n	100007fa <__aeabi_ddiv+0x11e>
100007e2:	ea41 0100 	orr.w	r1, r1, r0
100007e6:	f04f 0000 	mov.w	r0, #0
100007ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
100007ee:	e7b6      	b.n	1000075e <__aeabi_ddiv+0x82>
100007f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
100007f4:	bf04      	itt	eq
100007f6:	4301      	orreq	r1, r0
100007f8:	2000      	moveq	r0, #0
100007fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
100007fe:	bf88      	it	hi
10000800:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
10000804:	f63f aeaf 	bhi.w	10000566 <__aeabi_dmul+0xde>
10000808:	ebb5 0c03 	subs.w	ip, r5, r3
1000080c:	bf04      	itt	eq
1000080e:	ebb6 0c02 	subseq.w	ip, r6, r2
10000812:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
10000816:	f150 0000 	adcs.w	r0, r0, #0
1000081a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1000081e:	bd70      	pop	{r4, r5, r6, pc}
10000820:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
10000824:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
10000828:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1000082c:	bfc2      	ittt	gt
1000082e:	ebd4 050c 	rsbsgt	r5, r4, ip
10000832:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
10000836:	bd70      	popgt	{r4, r5, r6, pc}
10000838:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1000083c:	f04f 0e00 	mov.w	lr, #0
10000840:	3c01      	subs	r4, #1
10000842:	e690      	b.n	10000566 <__aeabi_dmul+0xde>
10000844:	ea45 0e06 	orr.w	lr, r5, r6
10000848:	e68d      	b.n	10000566 <__aeabi_dmul+0xde>
1000084a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1000084e:	ea94 0f0c 	teq	r4, ip
10000852:	bf08      	it	eq
10000854:	ea95 0f0c 	teqeq	r5, ip
10000858:	f43f af3b 	beq.w	100006d2 <__aeabi_dmul+0x24a>
1000085c:	ea94 0f0c 	teq	r4, ip
10000860:	d10a      	bne.n	10000878 <__aeabi_ddiv+0x19c>
10000862:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
10000866:	f47f af34 	bne.w	100006d2 <__aeabi_dmul+0x24a>
1000086a:	ea95 0f0c 	teq	r5, ip
1000086e:	f47f af25 	bne.w	100006bc <__aeabi_dmul+0x234>
10000872:	4610      	mov	r0, r2
10000874:	4619      	mov	r1, r3
10000876:	e72c      	b.n	100006d2 <__aeabi_dmul+0x24a>
10000878:	ea95 0f0c 	teq	r5, ip
1000087c:	d106      	bne.n	1000088c <__aeabi_ddiv+0x1b0>
1000087e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
10000882:	f43f aefd 	beq.w	10000680 <__aeabi_dmul+0x1f8>
10000886:	4610      	mov	r0, r2
10000888:	4619      	mov	r1, r3
1000088a:	e722      	b.n	100006d2 <__aeabi_dmul+0x24a>
1000088c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
10000890:	bf18      	it	ne
10000892:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
10000896:	f47f aec5 	bne.w	10000624 <__aeabi_dmul+0x19c>
1000089a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1000089e:	f47f af0d 	bne.w	100006bc <__aeabi_dmul+0x234>
100008a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
100008a6:	f47f aeeb 	bne.w	10000680 <__aeabi_dmul+0x1f8>
100008aa:	e712      	b.n	100006d2 <__aeabi_dmul+0x24a>

100008ac <__gedf2>:
100008ac:	f04f 3cff 	mov.w	ip, #4294967295
100008b0:	e006      	b.n	100008c0 <__cmpdf2+0x4>
100008b2:	bf00      	nop

100008b4 <__ledf2>:
100008b4:	f04f 0c01 	mov.w	ip, #1
100008b8:	e002      	b.n	100008c0 <__cmpdf2+0x4>
100008ba:	bf00      	nop

100008bc <__cmpdf2>:
100008bc:	f04f 0c01 	mov.w	ip, #1
100008c0:	f84d cd04 	str.w	ip, [sp, #-4]!
100008c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
100008c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
100008cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
100008d0:	bf18      	it	ne
100008d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
100008d6:	d01b      	beq.n	10000910 <__cmpdf2+0x54>
100008d8:	b001      	add	sp, #4
100008da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
100008de:	bf0c      	ite	eq
100008e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
100008e4:	ea91 0f03 	teqne	r1, r3
100008e8:	bf02      	ittt	eq
100008ea:	ea90 0f02 	teqeq	r0, r2
100008ee:	2000      	moveq	r0, #0
100008f0:	4770      	bxeq	lr
100008f2:	f110 0f00 	cmn.w	r0, #0
100008f6:	ea91 0f03 	teq	r1, r3
100008fa:	bf58      	it	pl
100008fc:	4299      	cmppl	r1, r3
100008fe:	bf08      	it	eq
10000900:	4290      	cmpeq	r0, r2
10000902:	bf2c      	ite	cs
10000904:	17d8      	asrcs	r0, r3, #31
10000906:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1000090a:	f040 0001 	orr.w	r0, r0, #1
1000090e:	4770      	bx	lr
10000910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
10000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
10000918:	d102      	bne.n	10000920 <__cmpdf2+0x64>
1000091a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1000091e:	d107      	bne.n	10000930 <__cmpdf2+0x74>
10000920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
10000924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
10000928:	d1d6      	bne.n	100008d8 <__cmpdf2+0x1c>
1000092a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1000092e:	d0d3      	beq.n	100008d8 <__cmpdf2+0x1c>
10000930:	f85d 0b04 	ldr.w	r0, [sp], #4
10000934:	4770      	bx	lr
10000936:	bf00      	nop

10000938 <__aeabi_cdrcmple>:
10000938:	4684      	mov	ip, r0
1000093a:	4610      	mov	r0, r2
1000093c:	4662      	mov	r2, ip
1000093e:	468c      	mov	ip, r1
10000940:	4619      	mov	r1, r3
10000942:	4663      	mov	r3, ip
10000944:	e000      	b.n	10000948 <__aeabi_cdcmpeq>
10000946:	bf00      	nop

10000948 <__aeabi_cdcmpeq>:
10000948:	b501      	push	{r0, lr}
1000094a:	f7ff ffb7 	bl	100008bc <__cmpdf2>
1000094e:	2800      	cmp	r0, #0
10000950:	bf48      	it	mi
10000952:	f110 0f00 	cmnmi.w	r0, #0
10000956:	bd01      	pop	{r0, pc}

10000958 <__aeabi_dcmpeq>:
10000958:	f84d ed08 	str.w	lr, [sp, #-8]!
1000095c:	f7ff fff4 	bl	10000948 <__aeabi_cdcmpeq>
10000960:	bf0c      	ite	eq
10000962:	2001      	moveq	r0, #1
10000964:	2000      	movne	r0, #0
10000966:	f85d fb08 	ldr.w	pc, [sp], #8
1000096a:	bf00      	nop

1000096c <__aeabi_dcmplt>:
1000096c:	f84d ed08 	str.w	lr, [sp, #-8]!
10000970:	f7ff ffea 	bl	10000948 <__aeabi_cdcmpeq>
10000974:	bf34      	ite	cc
10000976:	2001      	movcc	r0, #1
10000978:	2000      	movcs	r0, #0
1000097a:	f85d fb08 	ldr.w	pc, [sp], #8
1000097e:	bf00      	nop

10000980 <__aeabi_dcmple>:
10000980:	f84d ed08 	str.w	lr, [sp, #-8]!
10000984:	f7ff ffe0 	bl	10000948 <__aeabi_cdcmpeq>
10000988:	bf94      	ite	ls
1000098a:	2001      	movls	r0, #1
1000098c:	2000      	movhi	r0, #0
1000098e:	f85d fb08 	ldr.w	pc, [sp], #8
10000992:	bf00      	nop

10000994 <__aeabi_dcmpge>:
10000994:	f84d ed08 	str.w	lr, [sp, #-8]!
10000998:	f7ff ffce 	bl	10000938 <__aeabi_cdrcmple>
1000099c:	bf94      	ite	ls
1000099e:	2001      	movls	r0, #1
100009a0:	2000      	movhi	r0, #0
100009a2:	f85d fb08 	ldr.w	pc, [sp], #8
100009a6:	bf00      	nop

100009a8 <__aeabi_dcmpgt>:
100009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
100009ac:	f7ff ffc4 	bl	10000938 <__aeabi_cdrcmple>
100009b0:	bf34      	ite	cc
100009b2:	2001      	movcc	r0, #1
100009b4:	2000      	movcs	r0, #0
100009b6:	f85d fb08 	ldr.w	pc, [sp], #8
100009ba:	bf00      	nop

100009bc <__aeabi_dcmpun>:
100009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
100009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
100009c4:	d102      	bne.n	100009cc <__aeabi_dcmpun+0x10>
100009c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
100009ca:	d10a      	bne.n	100009e2 <__aeabi_dcmpun+0x26>
100009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
100009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
100009d4:	d102      	bne.n	100009dc <__aeabi_dcmpun+0x20>
100009d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
100009da:	d102      	bne.n	100009e2 <__aeabi_dcmpun+0x26>
100009dc:	f04f 0000 	mov.w	r0, #0
100009e0:	4770      	bx	lr
100009e2:	f04f 0001 	mov.w	r0, #1
100009e6:	4770      	bx	lr

100009e8 <__aeabi_d2iz>:
100009e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
100009ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
100009f0:	d215      	bcs.n	10000a1e <__aeabi_d2iz+0x36>
100009f2:	d511      	bpl.n	10000a18 <__aeabi_d2iz+0x30>
100009f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
100009f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
100009fc:	d912      	bls.n	10000a24 <__aeabi_d2iz+0x3c>
100009fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
10000a02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
10000a06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
10000a0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
10000a0e:	fa23 f002 	lsr.w	r0, r3, r2
10000a12:	bf18      	it	ne
10000a14:	4240      	negne	r0, r0
10000a16:	4770      	bx	lr
10000a18:	f04f 0000 	mov.w	r0, #0
10000a1c:	4770      	bx	lr
10000a1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
10000a22:	d105      	bne.n	10000a30 <__aeabi_d2iz+0x48>
10000a24:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
10000a28:	bf08      	it	eq
10000a2a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
10000a2e:	4770      	bx	lr
10000a30:	f04f 0000 	mov.w	r0, #0
10000a34:	4770      	bx	lr
10000a36:	bf00      	nop

10000a38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10000a38:	b480      	push	{r7}
10000a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10000a3c:	4b0f      	ldr	r3, [pc, #60]	; (10000a7c <SystemInit+0x44>)
10000a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10000a42:	4a0e      	ldr	r2, [pc, #56]	; (10000a7c <SystemInit+0x44>)
10000a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
10000a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10000a4c:	4b0c      	ldr	r3, [pc, #48]	; (10000a80 <SystemInit+0x48>)
10000a4e:	2200      	movs	r2, #0
10000a50:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
10000a52:	4b0b      	ldr	r3, [pc, #44]	; (10000a80 <SystemInit+0x48>)
10000a54:	2200      	movs	r2, #0
10000a56:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10000a58:	4b09      	ldr	r3, [pc, #36]	; (10000a80 <SystemInit+0x48>)
10000a5a:	2200      	movs	r2, #0
10000a5c:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10000a5e:	4b08      	ldr	r3, [pc, #32]	; (10000a80 <SystemInit+0x48>)
10000a60:	2200      	movs	r2, #0
10000a62:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
10000a64:	4b06      	ldr	r3, [pc, #24]	; (10000a80 <SystemInit+0x48>)
10000a66:	2200      	movs	r2, #0
10000a68:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
10000a6a:	4b05      	ldr	r3, [pc, #20]	; (10000a80 <SystemInit+0x48>)
10000a6c:	2200      	movs	r2, #0
10000a6e:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10000a70:	bf00      	nop
10000a72:	46bd      	mov	sp, r7
10000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
10000a78:	4770      	bx	lr
10000a7a:	bf00      	nop
10000a7c:	e000ed00 	.word	0xe000ed00
10000a80:	5000d0c0 	.word	0x5000d0c0

10000a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
10000a84:	b590      	push	{r4, r7, lr}
10000a86:	b0af      	sub	sp, #188	; 0xbc
10000a88:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	char buf[50]; // buffer for serial output string
	int buf_len = 0;
10000a8a:	2300      	movs	r3, #0
10000a8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
10000a90:	f000 ff5c 	bl	1000194c <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  if(IS_ENGINEERING_BOOT_MODE())
10000a94:	4b8b      	ldr	r3, [pc, #556]	; (10000cc4 <main+0x240>)
10000a96:	681b      	ldr	r3, [r3, #0]
10000a98:	f003 0307 	and.w	r3, r3, #7
10000a9c:	2b04      	cmp	r3, #4
10000a9e:	d101      	bne.n	10000aa4 <main+0x20>
  {
    /* Configure the system clock */
    SystemClock_Config();
10000aa0:	f000 f92a 	bl	10000cf8 <SystemClock_Config>
  }

  if(IS_ENGINEERING_BOOT_MODE())
10000aa4:	4b87      	ldr	r3, [pc, #540]	; (10000cc4 <main+0x240>)
10000aa6:	681b      	ldr	r3, [r3, #0]
10000aa8:	f003 0307 	and.w	r3, r3, #7
10000aac:	2b04      	cmp	r3, #4
10000aae:	d102      	bne.n	10000ab6 <main+0x32>
  {
    /* Configure the peripherals common clocks */
    PeriphCommonClock_Config();
10000ab0:	f000 fa97 	bl	10000fe2 <PeriphCommonClock_Config>
10000ab4:	e005      	b.n	10000ac2 <main+0x3e>
  }
  else
  {
    /* IPCC initialisation */
    MX_IPCC_Init();
10000ab6:	f000 fb61 	bl	1000117c <MX_IPCC_Init>
    /* OpenAmp initialisation ---------------------------------*/
    MX_OPENAMP_Init(RPMSG_REMOTE, NULL);
10000aba:	2100      	movs	r1, #0
10000abc:	2001      	movs	r0, #1
10000abe:	f00c fc23 	bl	1000d308 <MX_OPENAMP_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
10000ac2:	f000 fbf7 	bl	100012b4 <MX_GPIO_Init>
  MX_DMA_Init();
10000ac6:	f000 fbdf 	bl	10001288 <MX_DMA_Init>
  MX_CRC2_Init();
10000aca:	f000 fb35 	bl	10001138 <MX_CRC2_Init>
  MX_UART4_Init();
10000ace:	f000 fb8f 	bl	100011f0 <MX_UART4_Init>
  MX_ADC2_Init();
10000ad2:	f000 fab3 	bl	1000103c <MX_ADC2_Init>
  MX_TIM16_Init();
10000ad6:	f000 fb65 	bl	100011a4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  AI_Init();
10000ada:	f000 fc23 	bl	10001324 <AI_Init>
  HAL_TIM_Base_Start(&htim16);
10000ade:	487a      	ldr	r0, [pc, #488]	; (10000cc8 <main+0x244>)
10000ae0:	f008 fea0 	bl	10009824 <HAL_TIM_Base_Start>
  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
10000ae4:	f107 0368 	add.w	r3, r7, #104	; 0x68
10000ae8:	4978      	ldr	r1, [pc, #480]	; (10000ccc <main+0x248>)
10000aea:	4618      	mov	r0, r3
10000aec:	f00f ffa6 	bl	10010a3c <siprintf>
10000af0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  HAL_UART_Transmit(&huart4, (uint8_t *)buf, buf_len, 100);
10000af4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
10000af8:	b29a      	uxth	r2, r3
10000afa:	f107 0168 	add.w	r1, r7, #104	; 0x68
10000afe:	2364      	movs	r3, #100	; 0x64
10000b00:	4873      	ldr	r0, [pc, #460]	; (10000cd0 <main+0x24c>)
10000b02:	f008 ffa1 	bl	10009a48 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (int i = 0; i < AI_EMOTION_MODEL_IN_1_SIZE+1; ++i) {
10000b06:	2300      	movs	r3, #0
10000b08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
10000b0c:	e0ce      	b.n	10000cac <main+0x228>
	      HAL_ADC_Start(&hadc2);
10000b0e:	4871      	ldr	r0, [pc, #452]	; (10000cd4 <main+0x250>)
10000b10:	f001 fb70 	bl	100021f4 <HAL_ADC_Start>
	      HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
10000b14:	f04f 31ff 	mov.w	r1, #4294967295
10000b18:	486e      	ldr	r0, [pc, #440]	; (10000cd4 <main+0x250>)
10000b1a:	f001 fc25 	bl	10002368 <HAL_ADC_PollForConversion>
	      aiInData[i] = HAL_ADC_GetValue(&hadc2);
10000b1e:	486d      	ldr	r0, [pc, #436]	; (10000cd4 <main+0x250>)
10000b20:	f001 fcfa 	bl	10002518 <HAL_ADC_GetValue>
10000b24:	ee07 0a90 	vmov	s15, r0
10000b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
10000b2c:	4a6a      	ldr	r2, [pc, #424]	; (10000cd8 <main+0x254>)
10000b2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
10000b32:	009b      	lsls	r3, r3, #2
10000b34:	4413      	add	r3, r2
10000b36:	edc3 7a00 	vstr	s15, [r3]
	      sprintf(msg, "%f\r\n", aiInData[i]);
10000b3a:	4a67      	ldr	r2, [pc, #412]	; (10000cd8 <main+0x254>)
10000b3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
10000b40:	009b      	lsls	r3, r3, #2
10000b42:	4413      	add	r3, r2
10000b44:	681b      	ldr	r3, [r3, #0]
10000b46:	4618      	mov	r0, r3
10000b48:	f7ff fc46 	bl	100003d8 <__aeabi_f2d>
10000b4c:	4602      	mov	r2, r0
10000b4e:	460b      	mov	r3, r1
10000b50:	1d38      	adds	r0, r7, #4
10000b52:	4962      	ldr	r1, [pc, #392]	; (10000cdc <main+0x258>)
10000b54:	f00f ff72 	bl	10010a3c <siprintf>
	      HAL_UART_Transmit(&huart4, msg, strlen(msg), HAL_MAX_DELAY);
10000b58:	1d3b      	adds	r3, r7, #4
10000b5a:	4618      	mov	r0, r3
10000b5c:	f7ff fad0 	bl	10000100 <strlen>
10000b60:	4603      	mov	r3, r0
10000b62:	b29a      	uxth	r2, r3
10000b64:	1d39      	adds	r1, r7, #4
10000b66:	f04f 33ff 	mov.w	r3, #4294967295
10000b6a:	4859      	ldr	r0, [pc, #356]	; (10000cd0 <main+0x24c>)
10000b6c:	f008 ff6c 	bl	10009a48 <HAL_UART_Transmit>
	      HAL_Delay(1);
10000b70:	2001      	movs	r0, #1
10000b72:	f000 ff5b 	bl	10001a2c <HAL_Delay>

	      if (i == AI_EMOTION_MODEL_IN_1_SIZE) {
10000b76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
10000b7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
10000b7e:	f040 8090 	bne.w	10000ca2 <main+0x21e>
	    	  timestamp = htim16.Instance->CNT;
10000b82:	4b51      	ldr	r3, [pc, #324]	; (10000cc8 <main+0x244>)
10000b84:	681b      	ldr	r3, [r3, #0]
10000b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000b88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	      		  buf_len = sprintf(buf, "Running inference\r\n");
10000b8c:	f107 0368 	add.w	r3, r7, #104	; 0x68
10000b90:	4953      	ldr	r1, [pc, #332]	; (10000ce0 <main+0x25c>)
10000b92:	4618      	mov	r0, r3
10000b94:	f00f ff52 	bl	10010a3c <siprintf>
10000b98:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
	      		  HAL_UART_Transmit(&huart4, (uint8_t *)buf, buf_len, 100);
10000b9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
10000ba0:	b29a      	uxth	r2, r3
10000ba2:	f107 0168 	add.w	r1, r7, #104	; 0x68
10000ba6:	2364      	movs	r3, #100	; 0x64
10000ba8:	4849      	ldr	r0, [pc, #292]	; (10000cd0 <main+0x24c>)
10000baa:	f008 ff4d 	bl	10009a48 <HAL_UART_Transmit>

	      		  AI_Run(aiInData, aiOutData);
10000bae:	494d      	ldr	r1, [pc, #308]	; (10000ce4 <main+0x260>)
10000bb0:	4849      	ldr	r0, [pc, #292]	; (10000cd8 <main+0x254>)
10000bb2:	f000 fc01 	bl	100013b8 <AI_Run>
	      		  /* Output results */
	      		  for (uint32_t i = 0; i < AI_EMOTION_MODEL_OUT_1_SIZE; i++) {
10000bb6:	2300      	movs	r3, #0
10000bb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
10000bbc:	e023      	b.n	10000c06 <main+0x182>
	      			  buf_len = sprintf(buf, "Model confidence %d: %8.6f\n", i,aiOutData[i]);
10000bbe:	4a49      	ldr	r2, [pc, #292]	; (10000ce4 <main+0x260>)
10000bc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
10000bc4:	009b      	lsls	r3, r3, #2
10000bc6:	4413      	add	r3, r2
10000bc8:	681b      	ldr	r3, [r3, #0]
10000bca:	4618      	mov	r0, r3
10000bcc:	f7ff fc04 	bl	100003d8 <__aeabi_f2d>
10000bd0:	4602      	mov	r2, r0
10000bd2:	460b      	mov	r3, r1
10000bd4:	f107 0068 	add.w	r0, r7, #104	; 0x68
10000bd8:	e9cd 2300 	strd	r2, r3, [sp]
10000bdc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
10000be0:	4941      	ldr	r1, [pc, #260]	; (10000ce8 <main+0x264>)
10000be2:	f00f ff2b 	bl	10010a3c <siprintf>
10000be6:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
	      			  HAL_UART_Transmit(&huart4, (uint8_t *)buf, buf_len, 100);
10000bea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
10000bee:	b29a      	uxth	r2, r3
10000bf0:	f107 0168 	add.w	r1, r7, #104	; 0x68
10000bf4:	2364      	movs	r3, #100	; 0x64
10000bf6:	4836      	ldr	r0, [pc, #216]	; (10000cd0 <main+0x24c>)
10000bf8:	f008 ff26 	bl	10009a48 <HAL_UART_Transmit>
	      		  for (uint32_t i = 0; i < AI_EMOTION_MODEL_OUT_1_SIZE; i++) {
10000bfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
10000c00:	3301      	adds	r3, #1
10000c02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
10000c06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
10000c0a:	2b01      	cmp	r3, #1
10000c0c:	d9d7      	bls.n	10000bbe <main+0x13a>
	      		  }
	      		if (aiOutData[0] != 0.0 || aiOutData[1] != 1.0) {
10000c0e:	4b35      	ldr	r3, [pc, #212]	; (10000ce4 <main+0x260>)
10000c10:	edd3 7a00 	vldr	s15, [r3]
10000c14:	eef5 7a40 	vcmp.f32	s15, #0.0
10000c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
10000c1c:	d109      	bne.n	10000c32 <main+0x1ae>
10000c1e:	4b31      	ldr	r3, [pc, #196]	; (10000ce4 <main+0x260>)
10000c20:	edd3 7a01 	vldr	s15, [r3, #4]
10000c24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
10000c28:	eef4 7a47 	vcmp.f32	s15, s14
10000c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
10000c30:	d026      	beq.n	10000c80 <main+0x1fc>
	      		      uint32_t class = argmax(aiOutData, AI_EMOTION_MODEL_OUT_1_SIZE);
10000c32:	2102      	movs	r1, #2
10000c34:	482b      	ldr	r0, [pc, #172]	; (10000ce4 <main+0x260>)
10000c36:	f000 fc07 	bl	10001448 <argmax>
10000c3a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	      		      buf_len = sprintf(buf, "Prediction : %d - %s\r\nDuration : %lu\r\n", (int)class, emotions[class], htim16.Instance->CNT - timestamp);
10000c3e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
10000c42:	4a2a      	ldr	r2, [pc, #168]	; (10000cec <main+0x268>)
10000c44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
10000c48:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
10000c4c:	4b1e      	ldr	r3, [pc, #120]	; (10000cc8 <main+0x244>)
10000c4e:	681b      	ldr	r3, [r3, #0]
10000c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10000c52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
10000c56:	1ad3      	subs	r3, r2, r3
10000c58:	f107 0068 	add.w	r0, r7, #104	; 0x68
10000c5c:	9300      	str	r3, [sp, #0]
10000c5e:	4623      	mov	r3, r4
10000c60:	460a      	mov	r2, r1
10000c62:	4923      	ldr	r1, [pc, #140]	; (10000cf0 <main+0x26c>)
10000c64:	f00f feea 	bl	10010a3c <siprintf>
10000c68:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
	      		      HAL_UART_Transmit(&huart4, (uint8_t *)buf, buf_len, 100);
10000c6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
10000c70:	b29a      	uxth	r2, r3
10000c72:	f107 0168 	add.w	r1, r7, #104	; 0x68
10000c76:	2364      	movs	r3, #100	; 0x64
10000c78:	4815      	ldr	r0, [pc, #84]	; (10000cd0 <main+0x24c>)
10000c7a:	f008 fee5 	bl	10009a48 <HAL_UART_Transmit>
	      		if (aiOutData[0] != 0.0 || aiOutData[1] != 1.0) {
10000c7e:	e010      	b.n	10000ca2 <main+0x21e>
	      		  }
	      		else {
	      		      buf_len = sprintf(buf, "Sensor Detached\r\n");
10000c80:	f107 0368 	add.w	r3, r7, #104	; 0x68
10000c84:	491b      	ldr	r1, [pc, #108]	; (10000cf4 <main+0x270>)
10000c86:	4618      	mov	r0, r3
10000c88:	f00f fed8 	bl	10010a3c <siprintf>
10000c8c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
	      		      HAL_UART_Transmit(&huart4, (uint8_t *)buf, buf_len, 100);
10000c90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
10000c94:	b29a      	uxth	r2, r3
10000c96:	f107 0168 	add.w	r1, r7, #104	; 0x68
10000c9a:	2364      	movs	r3, #100	; 0x64
10000c9c:	480c      	ldr	r0, [pc, #48]	; (10000cd0 <main+0x24c>)
10000c9e:	f008 fed3 	bl	10009a48 <HAL_UART_Transmit>
	  for (int i = 0; i < AI_EMOTION_MODEL_IN_1_SIZE+1; ++i) {
10000ca2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
10000ca6:	3301      	adds	r3, #1
10000ca8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
10000cac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
10000cb0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
10000cb4:	f77f af2b 	ble.w	10000b0e <main+0x8a>
	      		  }
	      }

	  }
	  // Wait before doing it again
	  HAL_Delay(500);
10000cb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
10000cbc:	f000 feb6 	bl	10001a2c <HAL_Delay>
	  for (int i = 0; i < AI_EMOTION_MODEL_IN_1_SIZE+1; ++i) {
10000cc0:	e721      	b.n	10000b06 <main+0x82>
10000cc2:	bf00      	nop
10000cc4:	50020000 	.word	0x50020000
10000cc8:	10020f24 	.word	0x10020f24
10000ccc:	10012e94 	.word	0x10012e94
10000cd0:	10020f64 	.word	0x10020f64
10000cd4:	10020de8 	.word	0x10020de8
10000cd8:	10020ffc 	.word	0x10020ffc
10000cdc:	10012eb0 	.word	0x10012eb0
10000ce0:	10012eb8 	.word	0x10012eb8
10000ce4:	100217cc 	.word	0x100217cc
10000ce8:	10012ecc 	.word	0x10012ecc
10000cec:	10020004 	.word	0x10020004
10000cf0:	10012ee8 	.word	0x10012ee8
10000cf4:	10012f10 	.word	0x10012f10

10000cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
10000cf8:	b580      	push	{r7, lr}
10000cfa:	b0d2      	sub	sp, #328	; 0x148
10000cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10000cfe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d02:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d06:	4618      	mov	r0, r3
10000d08:	f44f 738a 	mov.w	r3, #276	; 0x114
10000d0c:	461a      	mov	r2, r3
10000d0e:	2100      	movs	r1, #0
10000d10:	f00f fef7 	bl	10010b02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10000d14:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d18:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000d1c:	4618      	mov	r0, r3
10000d1e:	2330      	movs	r3, #48	; 0x30
10000d20:	461a      	mov	r2, r3
10000d22:	2100      	movs	r1, #0
10000d24:	f00f feed 	bl	10010b02 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
10000d28:	f003 fac0 	bl	100042ac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
10000d2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d30:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10000d34:	f023 0330 	bic.w	r3, r3, #48	; 0x30
10000d38:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000d3c:	f043 0320 	orr.w	r3, r3, #32
10000d40:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI
10000d44:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d48:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d4c:	2217      	movs	r2, #23
10000d4e:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIG;
10000d50:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d54:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d58:	f44f 62b0 	mov.w	r2, #1408	; 0x580
10000d5c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
10000d5e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d62:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d66:	2201      	movs	r2, #1
10000d68:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
10000d6a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d6e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d72:	2201      	movs	r2, #1
10000d74:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
10000d76:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d7a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d7e:	2200      	movs	r2, #0
10000d80:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
10000d82:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d86:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d8a:	2210      	movs	r2, #16
10000d8c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
10000d8e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d92:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d96:	2200      	movs	r2, #0
10000d98:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
10000d9a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d9e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000da2:	2202      	movs	r2, #2
10000da4:	661a      	str	r2, [r3, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLL12SOURCE_HSE;
10000da6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000daa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000dae:	2201      	movs	r2, #1
10000db0:	665a      	str	r2, [r3, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLLM = 3;
10000db2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000db6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000dba:	2203      	movs	r2, #3
10000dbc:	669a      	str	r2, [r3, #104]	; 0x68
  RCC_OscInitStruct.PLL2.PLLN = 66;
10000dbe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000dc2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000dc6:	2242      	movs	r2, #66	; 0x42
10000dc8:	66da      	str	r2, [r3, #108]	; 0x6c
  RCC_OscInitStruct.PLL2.PLLP = 2;
10000dca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000dce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000dd2:	2202      	movs	r2, #2
10000dd4:	671a      	str	r2, [r3, #112]	; 0x70
  RCC_OscInitStruct.PLL2.PLLQ = 1;
10000dd6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000dda:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000dde:	2201      	movs	r2, #1
10000de0:	675a      	str	r2, [r3, #116]	; 0x74
  RCC_OscInitStruct.PLL2.PLLR = 1;
10000de2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000de6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000dea:	2201      	movs	r2, #1
10000dec:	679a      	str	r2, [r3, #120]	; 0x78
  RCC_OscInitStruct.PLL2.PLLFRACV = 5120;
10000dee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000df2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000df6:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
10000dfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  RCC_OscInitStruct.PLL2.PLLMODE = RCC_PLL_FRACTIONAL;
10000dfe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e02:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e06:	2201      	movs	r2, #1
10000e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
10000e0c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e10:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e14:	2202      	movs	r2, #2
10000e16:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLL3SOURCE_HSI;
10000e1a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e1e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e22:	2200      	movs	r2, #0
10000e24:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  RCC_OscInitStruct.PLL3.PLLM = 4;
10000e28:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e2c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e30:	2204      	movs	r2, #4
10000e32:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  RCC_OscInitStruct.PLL3.PLLN = 25;
10000e36:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e3a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e3e:	2219      	movs	r2, #25
10000e40:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  RCC_OscInitStruct.PLL3.PLLP = 2;
10000e44:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e48:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e4c:	2202      	movs	r2, #2
10000e4e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  RCC_OscInitStruct.PLL3.PLLQ = 4;
10000e52:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e56:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e5a:	2204      	movs	r2, #4
10000e5c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  RCC_OscInitStruct.PLL3.PLLR = 37;
10000e60:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e64:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e68:	2225      	movs	r2, #37	; 0x25
10000e6a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  RCC_OscInitStruct.PLL3.PLLRGE = RCC_PLL3IFRANGE_1;
10000e6e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e72:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e76:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
10000e7a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  RCC_OscInitStruct.PLL3.PLLFRACV = 0;
10000e7e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e82:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e86:	2200      	movs	r2, #0
10000e88:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  RCC_OscInitStruct.PLL3.PLLMODE = RCC_PLL_INTEGER;
10000e8c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e90:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e94:	2200      	movs	r2, #0
10000e96:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
10000e9a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e9e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000ea2:	2202      	movs	r2, #2
10000ea4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLL4SOURCE_HSE;
10000ea8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000eac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000eb0:	2201      	movs	r2, #1
10000eb2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  RCC_OscInitStruct.PLL4.PLLM = 4;
10000eb6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000eba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000ebe:	2204      	movs	r2, #4
10000ec0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  RCC_OscInitStruct.PLL4.PLLN = 99;
10000ec4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000ec8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000ecc:	2263      	movs	r2, #99	; 0x63
10000ece:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  RCC_OscInitStruct.PLL4.PLLP = 6;
10000ed2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000ed6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000eda:	2206      	movs	r2, #6
10000edc:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  RCC_OscInitStruct.PLL4.PLLQ = 8;
10000ee0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000ee4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000ee8:	2208      	movs	r2, #8
10000eea:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  RCC_OscInitStruct.PLL4.PLLR = 8;
10000eee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000ef2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000ef6:	2208      	movs	r2, #8
10000ef8:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  RCC_OscInitStruct.PLL4.PLLRGE = RCC_PLL4IFRANGE_0;
10000efc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000f00:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000f04:	2200      	movs	r2, #0
10000f06:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  RCC_OscInitStruct.PLL4.PLLFRACV = 0;
10000f0a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000f0e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000f12:	2200      	movs	r2, #0
10000f14:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  RCC_OscInitStruct.PLL4.PLLMODE = RCC_PLL_INTEGER;
10000f18:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000f1c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000f20:	2200      	movs	r2, #0
10000f22:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
10000f26:	f107 0334 	add.w	r3, r7, #52	; 0x34
10000f2a:	4618      	mov	r0, r3
10000f2c:	f003 f9ce 	bl	100042cc <HAL_RCC_OscConfig>
10000f30:	4603      	mov	r3, r0
10000f32:	2b00      	cmp	r3, #0
10000f34:	d001      	beq.n	10000f3a <SystemClock_Config+0x242>
  {
    Error_Handler();
10000f36:	f000 fab7 	bl	100014a8 <Error_Handler>
  }

  /** RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
10000f3a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000f3e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000f42:	22fe      	movs	r2, #254	; 0xfe
10000f44:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                              |RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_PLL2;
10000f46:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000f4a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000f4e:	2202      	movs	r2, #2
10000f50:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
10000f52:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000f56:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000f5a:	2200      	movs	r2, #0
10000f5c:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_PLL3;
10000f5e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000f62:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000f66:	2203      	movs	r2, #3
10000f68:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
10000f6a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000f6e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000f72:	2200      	movs	r2, #0
10000f74:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV2;
10000f76:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000f7a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000f7e:	2201      	movs	r2, #1
10000f80:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV4;
10000f82:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000f86:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000f8a:	2202      	movs	r2, #2
10000f8c:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV2;
10000f8e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000f92:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000f96:	2201      	movs	r2, #1
10000f98:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV2;
10000f9a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000f9e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000fa2:	2201      	movs	r2, #1
10000fa4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV2;
10000fa6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000faa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000fae:	2201      	movs	r2, #1
10000fb0:	62da      	str	r2, [r3, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
10000fb2:	1d3b      	adds	r3, r7, #4
10000fb4:	4618      	mov	r0, r3
10000fb6:	f003 ff27 	bl	10004e08 <HAL_RCC_ClockConfig>
10000fba:	4603      	mov	r3, r0
10000fbc:	2b00      	cmp	r3, #0
10000fbe:	d001      	beq.n	10000fc4 <SystemClock_Config+0x2cc>
  {
    Error_Handler();
10000fc0:	f000 fa72 	bl	100014a8 <Error_Handler>
  }

  /** Set the HSE division factor for RTC clock
  */
  __HAL_RCC_RTC_HSEDIV(24);
10000fc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10000fca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10000fce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000fd2:	f043 0317 	orr.w	r3, r3, #23
10000fd6:	6453      	str	r3, [r2, #68]	; 0x44
}
10000fd8:	bf00      	nop
10000fda:	f507 77a4 	add.w	r7, r7, #328	; 0x148
10000fde:	46bd      	mov	sp, r7
10000fe0:	bd80      	pop	{r7, pc}

10000fe2 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
10000fe2:	b580      	push	{r7, lr}
10000fe4:	b0d6      	sub	sp, #344	; 0x158
10000fe6:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
10000fe8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
10000fec:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
10000ff0:	4618      	mov	r0, r3
10000ff2:	f44f 73ac 	mov.w	r3, #344	; 0x158
10000ff6:	461a      	mov	r2, r3
10000ff8:	2100      	movs	r1, #0
10000ffa:	f00f fd82 	bl	10010b02 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
10000ffe:	f507 73ac 	add.w	r3, r7, #344	; 0x158
10001002:	f5a3 71ac 	sub.w	r1, r3, #344	; 0x158
10001006:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
1000100a:	f04f 0300 	mov.w	r3, #0
1000100e:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInit.CkperClockSelection = RCC_CKPERCLKSOURCE_HSE;
10001012:	f507 73ac 	add.w	r3, r7, #344	; 0x158
10001016:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
1000101a:	2202      	movs	r2, #2
1000101c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
10001020:	463b      	mov	r3, r7
10001022:	4618      	mov	r0, r3
10001024:	f005 fa6e 	bl	10006504 <HAL_RCCEx_PeriphCLKConfig>
10001028:	4603      	mov	r3, r0
1000102a:	2b00      	cmp	r3, #0
1000102c:	d001      	beq.n	10001032 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
1000102e:	f000 fa3b 	bl	100014a8 <Error_Handler>
  }
}
10001032:	bf00      	nop
10001034:	f507 77ac 	add.w	r7, r7, #344	; 0x158
10001038:	46bd      	mov	sp, r7
1000103a:	bd80      	pop	{r7, pc}

1000103c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
1000103c:	b580      	push	{r7, lr}
1000103e:	b088      	sub	sp, #32
10001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
10001042:	1d3b      	adds	r3, r7, #4
10001044:	2200      	movs	r2, #0
10001046:	601a      	str	r2, [r3, #0]
10001048:	605a      	str	r2, [r3, #4]
1000104a:	609a      	str	r2, [r3, #8]
1000104c:	60da      	str	r2, [r3, #12]
1000104e:	611a      	str	r2, [r3, #16]
10001050:	615a      	str	r2, [r3, #20]
10001052:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
10001054:	4b35      	ldr	r3, [pc, #212]	; (1000112c <MX_ADC2_Init+0xf0>)
10001056:	4a36      	ldr	r2, [pc, #216]	; (10001130 <MX_ADC2_Init+0xf4>)
10001058:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
1000105a:	4b34      	ldr	r3, [pc, #208]	; (1000112c <MX_ADC2_Init+0xf0>)
1000105c:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
10001060:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
10001062:	4b32      	ldr	r3, [pc, #200]	; (1000112c <MX_ADC2_Init+0xf0>)
10001064:	2200      	movs	r2, #0
10001066:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
10001068:	4b30      	ldr	r3, [pc, #192]	; (1000112c <MX_ADC2_Init+0xf0>)
1000106a:	2200      	movs	r2, #0
1000106c:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
1000106e:	4b2f      	ldr	r3, [pc, #188]	; (1000112c <MX_ADC2_Init+0xf0>)
10001070:	2204      	movs	r2, #4
10001072:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
10001074:	4b2d      	ldr	r3, [pc, #180]	; (1000112c <MX_ADC2_Init+0xf0>)
10001076:	2200      	movs	r2, #0
10001078:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
1000107a:	4b2c      	ldr	r3, [pc, #176]	; (1000112c <MX_ADC2_Init+0xf0>)
1000107c:	2200      	movs	r2, #0
1000107e:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
10001080:	4b2a      	ldr	r3, [pc, #168]	; (1000112c <MX_ADC2_Init+0xf0>)
10001082:	2201      	movs	r2, #1
10001084:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
10001086:	4b29      	ldr	r3, [pc, #164]	; (1000112c <MX_ADC2_Init+0xf0>)
10001088:	2200      	movs	r2, #0
1000108a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
1000108c:	4b27      	ldr	r3, [pc, #156]	; (1000112c <MX_ADC2_Init+0xf0>)
1000108e:	2200      	movs	r2, #0
10001090:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
10001092:	4b26      	ldr	r3, [pc, #152]	; (1000112c <MX_ADC2_Init+0xf0>)
10001094:	2200      	movs	r2, #0
10001096:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
10001098:	4b24      	ldr	r3, [pc, #144]	; (1000112c <MX_ADC2_Init+0xf0>)
1000109a:	2200      	movs	r2, #0
1000109c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
1000109e:	4b23      	ldr	r3, [pc, #140]	; (1000112c <MX_ADC2_Init+0xf0>)
100010a0:	2200      	movs	r2, #0
100010a2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
100010a4:	4b21      	ldr	r3, [pc, #132]	; (1000112c <MX_ADC2_Init+0xf0>)
100010a6:	2200      	movs	r2, #0
100010a8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
100010aa:	4b20      	ldr	r3, [pc, #128]	; (1000112c <MX_ADC2_Init+0xf0>)
100010ac:	2200      	movs	r2, #0
100010ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
100010b2:	481e      	ldr	r0, [pc, #120]	; (1000112c <MX_ADC2_Init+0xf0>)
100010b4:	f000 ff44 	bl	10001f40 <HAL_ADC_Init>
100010b8:	4603      	mov	r3, r0
100010ba:	2b00      	cmp	r3, #0
100010bc:	d001      	beq.n	100010c2 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
100010be:	f000 f9f3 	bl	100014a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
100010c2:	4b1c      	ldr	r3, [pc, #112]	; (10001134 <MX_ADC2_Init+0xf8>)
100010c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
100010c6:	2306      	movs	r3, #6
100010c8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
100010ca:	2300      	movs	r3, #0
100010cc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
100010ce:	f240 73ff 	movw	r3, #2047	; 0x7ff
100010d2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
100010d4:	2304      	movs	r3, #4
100010d6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
100010d8:	2300      	movs	r3, #0
100010da:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
100010dc:	1d3b      	adds	r3, r7, #4
100010de:	4619      	mov	r1, r3
100010e0:	4812      	ldr	r0, [pc, #72]	; (1000112c <MX_ADC2_Init+0xf0>)
100010e2:	f001 fa27 	bl	10002534 <HAL_ADC_ConfigChannel>
100010e6:	4603      	mov	r3, r0
100010e8:	2b00      	cmp	r3, #0
100010ea:	d001      	beq.n	100010f0 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
100010ec:	f000 f9dc 	bl	100014a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  __HAL_RCC_VREF_CLK_ENABLE(); // Enable the VREF clock
100010f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100010f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
100010f8:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
  	  // Disable the high impedance mode which is the default one read page 1694 of refman
      HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
100010fc:	2000      	movs	r0, #0
100010fe:	f000 fccd 	bl	10001a9c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
      // To set the volage to 2.5v
      HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1);
10001102:	2000      	movs	r0, #0
10001104:	f000 fcb6 	bl	10001a74 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
      HAL_SYSCFG_EnableVREFBUF(); // To enable VREFBUF
10001108:	f000 fcdc 	bl	10001ac4 <HAL_SYSCFG_EnableVREFBUF>

      if(HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
1000110c:	f240 72ff 	movw	r2, #2047	; 0x7ff
10001110:	f04f 1101 	mov.w	r1, #65537	; 0x10001
10001114:	4805      	ldr	r0, [pc, #20]	; (1000112c <MX_ADC2_Init+0xf0>)
10001116:	f001 fed1 	bl	10002ebc <HAL_ADCEx_Calibration_Start>
1000111a:	4603      	mov	r3, r0
1000111c:	2b00      	cmp	r3, #0
1000111e:	d001      	beq.n	10001124 <MX_ADC2_Init+0xe8>
      {
        /* Calibration Error */
        Error_Handler();
10001120:	f000 f9c2 	bl	100014a8 <Error_Handler>
      }
  /* USER CODE END ADC2_Init 2 */

}
10001124:	bf00      	nop
10001126:	3720      	adds	r7, #32
10001128:	46bd      	mov	sp, r7
1000112a:	bd80      	pop	{r7, pc}
1000112c:	10020de8 	.word	0x10020de8
10001130:	48003100 	.word	0x48003100
10001134:	19200040 	.word	0x19200040

10001138 <MX_CRC2_Init>:
  * @brief CRC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC2_Init(void)
{
10001138:	b580      	push	{r7, lr}
1000113a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC2_Init 0 */

  /* USER CODE BEGIN CRC2_Init 1 */

  /* USER CODE END CRC2_Init 1 */
  hcrc2.Instance = CRC2;
1000113c:	4b0d      	ldr	r3, [pc, #52]	; (10001174 <MX_CRC2_Init+0x3c>)
1000113e:	4a0e      	ldr	r2, [pc, #56]	; (10001178 <MX_CRC2_Init+0x40>)
10001140:	601a      	str	r2, [r3, #0]
  hcrc2.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
10001142:	4b0c      	ldr	r3, [pc, #48]	; (10001174 <MX_CRC2_Init+0x3c>)
10001144:	2200      	movs	r2, #0
10001146:	711a      	strb	r2, [r3, #4]
  hcrc2.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
10001148:	4b0a      	ldr	r3, [pc, #40]	; (10001174 <MX_CRC2_Init+0x3c>)
1000114a:	2200      	movs	r2, #0
1000114c:	715a      	strb	r2, [r3, #5]
  hcrc2.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
1000114e:	4b09      	ldr	r3, [pc, #36]	; (10001174 <MX_CRC2_Init+0x3c>)
10001150:	2200      	movs	r2, #0
10001152:	615a      	str	r2, [r3, #20]
  hcrc2.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
10001154:	4b07      	ldr	r3, [pc, #28]	; (10001174 <MX_CRC2_Init+0x3c>)
10001156:	2200      	movs	r2, #0
10001158:	619a      	str	r2, [r3, #24]
  hcrc2.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
1000115a:	4b06      	ldr	r3, [pc, #24]	; (10001174 <MX_CRC2_Init+0x3c>)
1000115c:	2201      	movs	r2, #1
1000115e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc2) != HAL_OK)
10001160:	4804      	ldr	r0, [pc, #16]	; (10001174 <MX_CRC2_Init+0x3c>)
10001162:	f002 f821 	bl	100031a8 <HAL_CRC_Init>
10001166:	4603      	mov	r3, r0
10001168:	2b00      	cmp	r3, #0
1000116a:	d001      	beq.n	10001170 <MX_CRC2_Init+0x38>
  {
    Error_Handler();
1000116c:	f000 f99c 	bl	100014a8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC2_Init 2 */

  /* USER CODE END CRC2_Init 2 */

}
10001170:	bf00      	nop
10001172:	bd80      	pop	{r7, pc}
10001174:	10020ec4 	.word	0x10020ec4
10001178:	4c004000 	.word	0x4c004000

1000117c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
1000117c:	b580      	push	{r7, lr}
1000117e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
10001180:	4b06      	ldr	r3, [pc, #24]	; (1000119c <MX_IPCC_Init+0x20>)
10001182:	4a07      	ldr	r2, [pc, #28]	; (100011a0 <MX_IPCC_Init+0x24>)
10001184:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
10001186:	4805      	ldr	r0, [pc, #20]	; (1000119c <MX_IPCC_Init+0x20>)
10001188:	f002 fe7a 	bl	10003e80 <HAL_IPCC_Init>
1000118c:	4603      	mov	r3, r0
1000118e:	2b00      	cmp	r3, #0
10001190:	d001      	beq.n	10001196 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
10001192:	f000 f989 	bl	100014a8 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
10001196:	bf00      	nop
10001198:	bd80      	pop	{r7, pc}
1000119a:	bf00      	nop
1000119c:	10020ee8 	.word	0x10020ee8
100011a0:	4c001000 	.word	0x4c001000

100011a4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
100011a4:	b580      	push	{r7, lr}
100011a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
100011a8:	4b0f      	ldr	r3, [pc, #60]	; (100011e8 <MX_TIM16_Init+0x44>)
100011aa:	4a10      	ldr	r2, [pc, #64]	; (100011ec <MX_TIM16_Init+0x48>)
100011ac:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 197;
100011ae:	4b0e      	ldr	r3, [pc, #56]	; (100011e8 <MX_TIM16_Init+0x44>)
100011b0:	22c5      	movs	r2, #197	; 0xc5
100011b2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
100011b4:	4b0c      	ldr	r3, [pc, #48]	; (100011e8 <MX_TIM16_Init+0x44>)
100011b6:	2200      	movs	r2, #0
100011b8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
100011ba:	4b0b      	ldr	r3, [pc, #44]	; (100011e8 <MX_TIM16_Init+0x44>)
100011bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
100011c0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
100011c2:	4b09      	ldr	r3, [pc, #36]	; (100011e8 <MX_TIM16_Init+0x44>)
100011c4:	2200      	movs	r2, #0
100011c6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
100011c8:	4b07      	ldr	r3, [pc, #28]	; (100011e8 <MX_TIM16_Init+0x44>)
100011ca:	2200      	movs	r2, #0
100011cc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
100011ce:	4b06      	ldr	r3, [pc, #24]	; (100011e8 <MX_TIM16_Init+0x44>)
100011d0:	2200      	movs	r2, #0
100011d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
100011d4:	4804      	ldr	r0, [pc, #16]	; (100011e8 <MX_TIM16_Init+0x44>)
100011d6:	f008 faf9 	bl	100097cc <HAL_TIM_Base_Init>
100011da:	4603      	mov	r3, r0
100011dc:	2b00      	cmp	r3, #0
100011de:	d001      	beq.n	100011e4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
100011e0:	f000 f962 	bl	100014a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
100011e4:	bf00      	nop
100011e6:	bd80      	pop	{r7, pc}
100011e8:	10020f24 	.word	0x10020f24
100011ec:	44007000 	.word	0x44007000

100011f0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
100011f0:	b580      	push	{r7, lr}
100011f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
100011f4:	4b22      	ldr	r3, [pc, #136]	; (10001280 <MX_UART4_Init+0x90>)
100011f6:	4a23      	ldr	r2, [pc, #140]	; (10001284 <MX_UART4_Init+0x94>)
100011f8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
100011fa:	4b21      	ldr	r3, [pc, #132]	; (10001280 <MX_UART4_Init+0x90>)
100011fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
10001200:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
10001202:	4b1f      	ldr	r3, [pc, #124]	; (10001280 <MX_UART4_Init+0x90>)
10001204:	2200      	movs	r2, #0
10001206:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
10001208:	4b1d      	ldr	r3, [pc, #116]	; (10001280 <MX_UART4_Init+0x90>)
1000120a:	2200      	movs	r2, #0
1000120c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
1000120e:	4b1c      	ldr	r3, [pc, #112]	; (10001280 <MX_UART4_Init+0x90>)
10001210:	2200      	movs	r2, #0
10001212:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
10001214:	4b1a      	ldr	r3, [pc, #104]	; (10001280 <MX_UART4_Init+0x90>)
10001216:	220c      	movs	r2, #12
10001218:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
1000121a:	4b19      	ldr	r3, [pc, #100]	; (10001280 <MX_UART4_Init+0x90>)
1000121c:	2200      	movs	r2, #0
1000121e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
10001220:	4b17      	ldr	r3, [pc, #92]	; (10001280 <MX_UART4_Init+0x90>)
10001222:	2200      	movs	r2, #0
10001224:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
10001226:	4b16      	ldr	r3, [pc, #88]	; (10001280 <MX_UART4_Init+0x90>)
10001228:	2200      	movs	r2, #0
1000122a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
1000122c:	4b14      	ldr	r3, [pc, #80]	; (10001280 <MX_UART4_Init+0x90>)
1000122e:	2200      	movs	r2, #0
10001230:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
10001232:	4b13      	ldr	r3, [pc, #76]	; (10001280 <MX_UART4_Init+0x90>)
10001234:	2200      	movs	r2, #0
10001236:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
10001238:	4811      	ldr	r0, [pc, #68]	; (10001280 <MX_UART4_Init+0x90>)
1000123a:	f008 fbb5 	bl	100099a8 <HAL_UART_Init>
1000123e:	4603      	mov	r3, r0
10001240:	2b00      	cmp	r3, #0
10001242:	d001      	beq.n	10001248 <MX_UART4_Init+0x58>
  {
    Error_Handler();
10001244:	f000 f930 	bl	100014a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
10001248:	2100      	movs	r1, #0
1000124a:	480d      	ldr	r0, [pc, #52]	; (10001280 <MX_UART4_Init+0x90>)
1000124c:	f009 fedd 	bl	1000b00a <HAL_UARTEx_SetTxFifoThreshold>
10001250:	4603      	mov	r3, r0
10001252:	2b00      	cmp	r3, #0
10001254:	d001      	beq.n	1000125a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
10001256:	f000 f927 	bl	100014a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
1000125a:	2100      	movs	r1, #0
1000125c:	4808      	ldr	r0, [pc, #32]	; (10001280 <MX_UART4_Init+0x90>)
1000125e:	f009 ff12 	bl	1000b086 <HAL_UARTEx_SetRxFifoThreshold>
10001262:	4603      	mov	r3, r0
10001264:	2b00      	cmp	r3, #0
10001266:	d001      	beq.n	1000126c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
10001268:	f000 f91e 	bl	100014a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
1000126c:	4804      	ldr	r0, [pc, #16]	; (10001280 <MX_UART4_Init+0x90>)
1000126e:	f009 fe93 	bl	1000af98 <HAL_UARTEx_DisableFifoMode>
10001272:	4603      	mov	r3, r0
10001274:	2b00      	cmp	r3, #0
10001276:	d001      	beq.n	1000127c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
10001278:	f000 f916 	bl	100014a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
1000127c:	bf00      	nop
1000127e:	bd80      	pop	{r7, pc}
10001280:	10020f64 	.word	0x10020f64
10001284:	40010000 	.word	0x40010000

10001288 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
10001288:	b580      	push	{r7, lr}
1000128a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX_CLK_ENABLE();
1000128c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001290:	2204      	movs	r2, #4
10001292:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
  __HAL_RCC_DMA2_CLK_ENABLE();
10001296:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000129a:	2202      	movs	r2, #2
1000129c:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
100012a0:	2200      	movs	r2, #0
100012a2:	2101      	movs	r1, #1
100012a4:	2038      	movs	r0, #56	; 0x38
100012a6:	f001 ff48 	bl	1000313a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
100012aa:	2038      	movs	r0, #56	; 0x38
100012ac:	f001 ff61 	bl	10003172 <HAL_NVIC_EnableIRQ>

}
100012b0:	bf00      	nop
100012b2:	bd80      	pop	{r7, pc}

100012b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
100012b4:	b580      	push	{r7, lr}
100012b6:	b086      	sub	sp, #24
100012b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
100012ba:	1d3b      	adds	r3, r7, #4
100012bc:	2200      	movs	r2, #0
100012be:	601a      	str	r2, [r3, #0]
100012c0:	605a      	str	r2, [r3, #4]
100012c2:	609a      	str	r2, [r3, #8]
100012c4:	60da      	str	r2, [r3, #12]
100012c6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
100012c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012cc:	2204      	movs	r2, #4
100012ce:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOH_CLK_ENABLE();
100012d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012d6:	2280      	movs	r2, #128	; 0x80
100012d8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOA_CLK_ENABLE();
100012dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012e0:	2201      	movs	r2, #1
100012e2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOG_CLK_ENABLE();
100012e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012ea:	2240      	movs	r2, #64	; 0x40
100012ec:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOB_CLK_ENABLE();
100012f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012f4:	2202      	movs	r2, #2
100012f6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOF_CLK_ENABLE();
100012fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012fe:	2220      	movs	r2, #32
10001300:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

  /*Configure GPIO pins : USB_PWR_CC2_Pin USB_PWR_CC1_Pin */
  GPIO_InitStruct.Pin = USB_PWR_CC2_Pin|USB_PWR_CC1_Pin;
10001304:	2330      	movs	r3, #48	; 0x30
10001306:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
10001308:	2303      	movs	r3, #3
1000130a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
1000130c:	1d3b      	adds	r3, r7, #4
1000130e:	4619      	mov	r1, r3
10001310:	4803      	ldr	r0, [pc, #12]	; (10001320 <MX_GPIO_Init+0x6c>)
10001312:	f002 fc0b 	bl	10003b2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
10001316:	bf00      	nop
10001318:	3718      	adds	r7, #24
1000131a:	46bd      	mov	sp, r7
1000131c:	bd80      	pop	{r7, pc}
1000131e:	bf00      	nop
10001320:	50002000 	.word	0x50002000

10001324 <AI_Init>:

/* USER CODE BEGIN 4 */

static void AI_Init(void)
{
10001324:	b580      	push	{r7, lr}
10001326:	b090      	sub	sp, #64	; 0x40
10001328:	af00      	add	r7, sp, #0
  ai_error err;

  char buf[50]; // buffer for serial output string
  int buf_len = 0;
1000132a:	2300      	movs	r3, #0
1000132c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Create a local array with the addresses of the activations buffers */
  const ai_handle act_addr[] = { activations };
1000132e:	4b1c      	ldr	r3, [pc, #112]	; (100013a0 <AI_Init+0x7c>)
10001330:	603b      	str	r3, [r7, #0]
  /* Create an instance of the model */
  err = ai_emotion_model_create_and_init(&emotion_model, act_addr, NULL);
10001332:	463b      	mov	r3, r7
10001334:	2200      	movs	r2, #0
10001336:	4619      	mov	r1, r3
10001338:	481a      	ldr	r0, [pc, #104]	; (100013a4 <AI_Init+0x80>)
1000133a:	f00c fa07 	bl	1000d74c <ai_emotion_model_create_and_init>
1000133e:	4603      	mov	r3, r0
10001340:	63bb      	str	r3, [r7, #56]	; 0x38
  if (err.type != AI_ERROR_NONE) {
10001342:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
10001346:	2b00      	cmp	r3, #0
10001348:	d013      	beq.n	10001372 <AI_Init+0x4e>
	  buf_len = sprintf(buf, "ai_emotion_model_create error - type=%d code=%d\r\n", err.type, err.code);
1000134a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
1000134e:	461a      	mov	r2, r3
10001350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10001352:	f3c3 2317 	ubfx	r3, r3, #8, #24
10001356:	1d38      	adds	r0, r7, #4
10001358:	4913      	ldr	r1, [pc, #76]	; (100013a8 <AI_Init+0x84>)
1000135a:	f00f fb6f 	bl	10010a3c <siprintf>
1000135e:	63f8      	str	r0, [r7, #60]	; 0x3c
	  HAL_UART_Transmit(&huart4, (uint8_t *)buf, buf_len, 100);
10001360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10001362:	b29a      	uxth	r2, r3
10001364:	1d39      	adds	r1, r7, #4
10001366:	2364      	movs	r3, #100	; 0x64
10001368:	4810      	ldr	r0, [pc, #64]	; (100013ac <AI_Init+0x88>)
1000136a:	f008 fb6d 	bl	10009a48 <HAL_UART_Transmit>
//	  printf("ai_emotion_model_create error - type=%d code=%d\r\n", err.type, err.code);
	  Error_Handler();
1000136e:	f000 f89b 	bl	100014a8 <Error_Handler>
  }
  ai_input = ai_emotion_model_inputs_get(emotion_model, NULL);
10001372:	4b0c      	ldr	r3, [pc, #48]	; (100013a4 <AI_Init+0x80>)
10001374:	681b      	ldr	r3, [r3, #0]
10001376:	2100      	movs	r1, #0
10001378:	4618      	mov	r0, r3
1000137a:	f00c fa5b 	bl	1000d834 <ai_emotion_model_inputs_get>
1000137e:	4603      	mov	r3, r0
10001380:	4a0b      	ldr	r2, [pc, #44]	; (100013b0 <AI_Init+0x8c>)
10001382:	6013      	str	r3, [r2, #0]
  ai_output = ai_emotion_model_outputs_get(emotion_model, NULL);
10001384:	4b07      	ldr	r3, [pc, #28]	; (100013a4 <AI_Init+0x80>)
10001386:	681b      	ldr	r3, [r3, #0]
10001388:	2100      	movs	r1, #0
1000138a:	4618      	mov	r0, r3
1000138c:	f00c fa6c 	bl	1000d868 <ai_emotion_model_outputs_get>
10001390:	4603      	mov	r3, r0
10001392:	4a08      	ldr	r2, [pc, #32]	; (100013b4 <AI_Init+0x90>)
10001394:	6013      	str	r3, [r2, #0]
}
10001396:	bf00      	nop
10001398:	3740      	adds	r7, #64	; 0x40
1000139a:	46bd      	mov	sp, r7
1000139c:	bd80      	pop	{r7, pc}
1000139e:	bf00      	nop
100013a0:	100217d4 	.word	0x100217d4
100013a4:	10020ff8 	.word	0x10020ff8
100013a8:	10012f24 	.word	0x10012f24
100013ac:	10020f64 	.word	0x10020f64
100013b0:	10029ba4 	.word	0x10029ba4
100013b4:	10029ba8 	.word	0x10029ba8

100013b8 <AI_Run>:

static void AI_Run(float *pIn, float *pOut)
{
100013b8:	b580      	push	{r7, lr}
100013ba:	b092      	sub	sp, #72	; 0x48
100013bc:	af00      	add	r7, sp, #0
100013be:	6078      	str	r0, [r7, #4]
100013c0:	6039      	str	r1, [r7, #0]

  ai_i32 batch;
  ai_error err;

  char buf[50]; // buffer for serial output string
  int buf_len = 0;
100013c2:	2300      	movs	r3, #0
100013c4:	647b      	str	r3, [r7, #68]	; 0x44

  /* Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(pIn);
100013c6:	4b1b      	ldr	r3, [pc, #108]	; (10001434 <AI_Run+0x7c>)
100013c8:	681b      	ldr	r3, [r3, #0]
100013ca:	687a      	ldr	r2, [r7, #4]
100013cc:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(pOut);
100013ce:	4b1a      	ldr	r3, [pc, #104]	; (10001438 <AI_Run+0x80>)
100013d0:	681b      	ldr	r3, [r3, #0]
100013d2:	683a      	ldr	r2, [r7, #0]
100013d4:	605a      	str	r2, [r3, #4]

  batch = ai_emotion_model_run(emotion_model, ai_input, ai_output);
100013d6:	4b19      	ldr	r3, [pc, #100]	; (1000143c <AI_Run+0x84>)
100013d8:	681b      	ldr	r3, [r3, #0]
100013da:	4a16      	ldr	r2, [pc, #88]	; (10001434 <AI_Run+0x7c>)
100013dc:	6811      	ldr	r1, [r2, #0]
100013de:	4a16      	ldr	r2, [pc, #88]	; (10001438 <AI_Run+0x80>)
100013e0:	6812      	ldr	r2, [r2, #0]
100013e2:	4618      	mov	r0, r3
100013e4:	f00c fa96 	bl	1000d914 <ai_emotion_model_run>
100013e8:	6438      	str	r0, [r7, #64]	; 0x40
  if (batch != 1) {
100013ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
100013ec:	2b01      	cmp	r3, #1
100013ee:	d01c      	beq.n	1000142a <AI_Run+0x72>
    err = ai_emotion_model_get_error(emotion_model);
100013f0:	4b12      	ldr	r3, [pc, #72]	; (1000143c <AI_Run+0x84>)
100013f2:	681b      	ldr	r3, [r3, #0]
100013f4:	4618      	mov	r0, r3
100013f6:	f00c f987 	bl	1000d708 <ai_emotion_model_get_error>
100013fa:	4603      	mov	r3, r0
100013fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    buf_len = sprintf(buf, "AI ai_emotion_model_run error - type=%d code=%d\r\n", err.type, err.code);
100013fe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
10001402:	461a      	mov	r2, r3
10001404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10001406:	f3c3 2317 	ubfx	r3, r3, #8, #24
1000140a:	f107 0008 	add.w	r0, r7, #8
1000140e:	490c      	ldr	r1, [pc, #48]	; (10001440 <AI_Run+0x88>)
10001410:	f00f fb14 	bl	10010a3c <siprintf>
10001414:	6478      	str	r0, [r7, #68]	; 0x44
    HAL_UART_Transmit(&huart4, (uint8_t *)buf, buf_len, 100);
10001416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10001418:	b29a      	uxth	r2, r3
1000141a:	f107 0108 	add.w	r1, r7, #8
1000141e:	2364      	movs	r3, #100	; 0x64
10001420:	4808      	ldr	r0, [pc, #32]	; (10001444 <AI_Run+0x8c>)
10001422:	f008 fb11 	bl	10009a48 <HAL_UART_Transmit>
    //printf("AI ai_emotion_model_run error - type=%d code=%d\r\n", err.type, err.code);
    Error_Handler();
10001426:	f000 f83f 	bl	100014a8 <Error_Handler>
  }
}
1000142a:	bf00      	nop
1000142c:	3748      	adds	r7, #72	; 0x48
1000142e:	46bd      	mov	sp, r7
10001430:	bd80      	pop	{r7, pc}
10001432:	bf00      	nop
10001434:	10029ba4 	.word	0x10029ba4
10001438:	10029ba8 	.word	0x10029ba8
1000143c:	10020ff8 	.word	0x10020ff8
10001440:	10012f58 	.word	0x10012f58
10001444:	10020f64 	.word	0x10020f64

10001448 <argmax>:

static uint32_t argmax(const float * values, uint32_t len)
{
10001448:	b480      	push	{r7}
1000144a:	b087      	sub	sp, #28
1000144c:	af00      	add	r7, sp, #0
1000144e:	6078      	str	r0, [r7, #4]
10001450:	6039      	str	r1, [r7, #0]
  float max_value = values[0];
10001452:	687b      	ldr	r3, [r7, #4]
10001454:	681b      	ldr	r3, [r3, #0]
10001456:	617b      	str	r3, [r7, #20]
  uint32_t max_index = 0;
10001458:	2300      	movs	r3, #0
1000145a:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
1000145c:	2301      	movs	r3, #1
1000145e:	60fb      	str	r3, [r7, #12]
10001460:	e017      	b.n	10001492 <argmax+0x4a>
    if (values[i] > max_value) {
10001462:	68fb      	ldr	r3, [r7, #12]
10001464:	009b      	lsls	r3, r3, #2
10001466:	687a      	ldr	r2, [r7, #4]
10001468:	4413      	add	r3, r2
1000146a:	edd3 7a00 	vldr	s15, [r3]
1000146e:	ed97 7a05 	vldr	s14, [r7, #20]
10001472:	eeb4 7ae7 	vcmpe.f32	s14, s15
10001476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000147a:	d507      	bpl.n	1000148c <argmax+0x44>
      max_value = values[i];
1000147c:	68fb      	ldr	r3, [r7, #12]
1000147e:	009b      	lsls	r3, r3, #2
10001480:	687a      	ldr	r2, [r7, #4]
10001482:	4413      	add	r3, r2
10001484:	681b      	ldr	r3, [r3, #0]
10001486:	617b      	str	r3, [r7, #20]
      max_index = i;
10001488:	68fb      	ldr	r3, [r7, #12]
1000148a:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
1000148c:	68fb      	ldr	r3, [r7, #12]
1000148e:	3301      	adds	r3, #1
10001490:	60fb      	str	r3, [r7, #12]
10001492:	68fa      	ldr	r2, [r7, #12]
10001494:	683b      	ldr	r3, [r7, #0]
10001496:	429a      	cmp	r2, r3
10001498:	d3e3      	bcc.n	10001462 <argmax+0x1a>
    }
  }
  return max_index;
1000149a:	693b      	ldr	r3, [r7, #16]
}
1000149c:	4618      	mov	r0, r3
1000149e:	371c      	adds	r7, #28
100014a0:	46bd      	mov	sp, r7
100014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
100014a6:	4770      	bx	lr

100014a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
100014a8:	b480      	push	{r7}
100014aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
100014ac:	b672      	cpsid	i
}
100014ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
100014b0:	e7fe      	b.n	100014b0 <Error_Handler+0x8>

100014b2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
100014b2:	b580      	push	{r7, lr}
100014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
100014b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
100014be:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
100014c2:	2200      	movs	r2, #0
100014c4:	2101      	movs	r1, #1
100014c6:	f06f 000b 	mvn.w	r0, #11
100014ca:	f001 fe36 	bl	1000313a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
100014ce:	2200      	movs	r2, #0
100014d0:	2101      	movs	r1, #1
100014d2:	f06f 000a 	mvn.w	r0, #10
100014d6:	f001 fe30 	bl	1000313a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
100014da:	2200      	movs	r2, #0
100014dc:	2101      	movs	r1, #1
100014de:	f06f 0009 	mvn.w	r0, #9
100014e2:	f001 fe2a 	bl	1000313a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
100014e6:	2200      	movs	r2, #0
100014e8:	2101      	movs	r1, #1
100014ea:	f06f 0004 	mvn.w	r0, #4
100014ee:	f001 fe24 	bl	1000313a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
100014f2:	2200      	movs	r2, #0
100014f4:	2101      	movs	r1, #1
100014f6:	f06f 0003 	mvn.w	r0, #3
100014fa:	f001 fe1e 	bl	1000313a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
100014fe:	2200      	movs	r2, #0
10001500:	2101      	movs	r1, #1
10001502:	f06f 0001 	mvn.w	r0, #1
10001506:	f001 fe18 	bl	1000313a <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_WAKEUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_WAKEUP_IRQn, 0, 0);
1000150a:	2200      	movs	r2, #0
1000150c:	2100      	movs	r1, #0
1000150e:	2091      	movs	r0, #145	; 0x91
10001510:	f001 fe13 	bl	1000313a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_WAKEUP_IRQn);
10001514:	2091      	movs	r0, #145	; 0x91
10001516:	f001 fe2c 	bl	10003172 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
1000151a:	bf00      	nop
1000151c:	bd80      	pop	{r7, pc}
	...

10001520 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
10001520:	b580      	push	{r7, lr}
10001522:	b0de      	sub	sp, #376	; 0x178
10001524:	af00      	add	r7, sp, #0
10001526:	f507 73bc 	add.w	r3, r7, #376	; 0x178
1000152a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
1000152e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10001530:	f507 73b2 	add.w	r3, r7, #356	; 0x164
10001534:	2200      	movs	r2, #0
10001536:	601a      	str	r2, [r3, #0]
10001538:	605a      	str	r2, [r3, #4]
1000153a:	609a      	str	r2, [r3, #8]
1000153c:	60da      	str	r2, [r3, #12]
1000153e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
10001540:	f507 73bc 	add.w	r3, r7, #376	; 0x178
10001544:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
10001548:	4618      	mov	r0, r3
1000154a:	f44f 73ac 	mov.w	r3, #344	; 0x158
1000154e:	461a      	mov	r2, r3
10001550:	2100      	movs	r1, #0
10001552:	f00f fad6 	bl	10010b02 <memset>
  if(hadc->Instance==ADC2)
10001556:	f507 73bc 	add.w	r3, r7, #376	; 0x178
1000155a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
1000155e:	681b      	ldr	r3, [r3, #0]
10001560:	681b      	ldr	r3, [r3, #0]
10001562:	4a46      	ldr	r2, [pc, #280]	; (1000167c <HAL_ADC_MspInit+0x15c>)
10001564:	4293      	cmp	r3, r2
10001566:	f040 8084 	bne.w	10001672 <HAL_ADC_MspInit+0x152>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
  if(IS_ENGINEERING_BOOT_MODE())
1000156a:	4b45      	ldr	r3, [pc, #276]	; (10001680 <HAL_ADC_MspInit+0x160>)
1000156c:	681b      	ldr	r3, [r3, #0]
1000156e:	f003 0307 	and.w	r3, r3, #7
10001572:	2b04      	cmp	r3, #4
10001574:	d11a      	bne.n	100015ac <HAL_ADC_MspInit+0x8c>
  {

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
10001576:	f507 73bc 	add.w	r3, r7, #376	; 0x178
1000157a:	f5a3 71b8 	sub.w	r1, r3, #368	; 0x170
1000157e:	f04f 0208 	mov.w	r2, #8
10001582:	f04f 0300 	mov.w	r3, #0
10001586:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PER;
1000158a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
1000158e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
10001592:	2201      	movs	r2, #1
10001594:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
10001598:	f107 0308 	add.w	r3, r7, #8
1000159c:	4618      	mov	r0, r3
1000159e:	f004 ffb1 	bl	10006504 <HAL_RCCEx_PeriphCLKConfig>
100015a2:	4603      	mov	r3, r0
100015a4:	2b00      	cmp	r3, #0
100015a6:	d001      	beq.n	100015ac <HAL_ADC_MspInit+0x8c>
    {
      Error_Handler();
100015a8:	f7ff ff7e 	bl	100014a8 <Error_Handler>
    }

  }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
100015ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015b0:	2220      	movs	r2, #32
100015b2:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98

    __HAL_RCC_GPIOA_CLK_ENABLE();
100015b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015ba:	2201      	movs	r2, #1
100015bc:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    __HAL_RCC_GPIOF_CLK_ENABLE();
100015c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015c4:	2220      	movs	r2, #32
100015c6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_INP19
    PA4     ------> ADC2_INP18
    PF14     ------> ADC2_INP6
    */
    GPIO_InitStruct.Pin = USB_PWR_CC2_Pin|USB_PWR_CC1_Pin;
100015ca:	2330      	movs	r3, #48	; 0x30
100015cc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
100015d0:	2303      	movs	r3, #3
100015d2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
100015d6:	f507 73b2 	add.w	r3, r7, #356	; 0x164
100015da:	4619      	mov	r1, r3
100015dc:	4829      	ldr	r0, [pc, #164]	; (10001684 <HAL_ADC_MspInit+0x164>)
100015de:	f002 faa5 	bl	10003b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
100015e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
100015e6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
100015ea:	2303      	movs	r3, #3
100015ec:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100015f0:	2300      	movs	r3, #0
100015f2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
100015f6:	f507 73b2 	add.w	r3, r7, #356	; 0x164
100015fa:	4619      	mov	r1, r3
100015fc:	4822      	ldr	r0, [pc, #136]	; (10001688 <HAL_ADC_MspInit+0x168>)
100015fe:	f002 fa95 	bl	10003b2c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream0;
10001602:	4b22      	ldr	r3, [pc, #136]	; (1000168c <HAL_ADC_MspInit+0x16c>)
10001604:	4a22      	ldr	r2, [pc, #136]	; (10001690 <HAL_ADC_MspInit+0x170>)
10001606:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
10001608:	4b20      	ldr	r3, [pc, #128]	; (1000168c <HAL_ADC_MspInit+0x16c>)
1000160a:	220a      	movs	r2, #10
1000160c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
1000160e:	4b1f      	ldr	r3, [pc, #124]	; (1000168c <HAL_ADC_MspInit+0x16c>)
10001610:	2200      	movs	r2, #0
10001612:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
10001614:	4b1d      	ldr	r3, [pc, #116]	; (1000168c <HAL_ADC_MspInit+0x16c>)
10001616:	2200      	movs	r2, #0
10001618:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
1000161a:	4b1c      	ldr	r3, [pc, #112]	; (1000168c <HAL_ADC_MspInit+0x16c>)
1000161c:	f44f 6280 	mov.w	r2, #1024	; 0x400
10001620:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
10001622:	4b1a      	ldr	r3, [pc, #104]	; (1000168c <HAL_ADC_MspInit+0x16c>)
10001624:	f44f 6200 	mov.w	r2, #2048	; 0x800
10001628:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
1000162a:	4b18      	ldr	r3, [pc, #96]	; (1000168c <HAL_ADC_MspInit+0x16c>)
1000162c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
10001630:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
10001632:	4b16      	ldr	r3, [pc, #88]	; (1000168c <HAL_ADC_MspInit+0x16c>)
10001634:	f44f 7280 	mov.w	r2, #256	; 0x100
10001638:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
1000163a:	4b14      	ldr	r3, [pc, #80]	; (1000168c <HAL_ADC_MspInit+0x16c>)
1000163c:	2200      	movs	r2, #0
1000163e:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
10001640:	4b12      	ldr	r3, [pc, #72]	; (1000168c <HAL_ADC_MspInit+0x16c>)
10001642:	2200      	movs	r2, #0
10001644:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
10001646:	4811      	ldr	r0, [pc, #68]	; (1000168c <HAL_ADC_MspInit+0x16c>)
10001648:	f001 fe98 	bl	1000337c <HAL_DMA_Init>
1000164c:	4603      	mov	r3, r0
1000164e:	2b00      	cmp	r3, #0
10001650:	d001      	beq.n	10001656 <HAL_ADC_MspInit+0x136>
    {
      Error_Handler();
10001652:	f7ff ff29 	bl	100014a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
10001656:	f507 73bc 	add.w	r3, r7, #376	; 0x178
1000165a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
1000165e:	681b      	ldr	r3, [r3, #0]
10001660:	4a0a      	ldr	r2, [pc, #40]	; (1000168c <HAL_ADC_MspInit+0x16c>)
10001662:	64da      	str	r2, [r3, #76]	; 0x4c
10001664:	4a09      	ldr	r2, [pc, #36]	; (1000168c <HAL_ADC_MspInit+0x16c>)
10001666:	f507 73bc 	add.w	r3, r7, #376	; 0x178
1000166a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
1000166e:	681b      	ldr	r3, [r3, #0]
10001670:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
10001672:	bf00      	nop
10001674:	f507 77bc 	add.w	r7, r7, #376	; 0x178
10001678:	46bd      	mov	sp, r7
1000167a:	bd80      	pop	{r7, pc}
1000167c:	48003100 	.word	0x48003100
10001680:	50020000 	.word	0x50020000
10001684:	50002000 	.word	0x50002000
10001688:	50007000 	.word	0x50007000
1000168c:	10020e4c 	.word	0x10020e4c
10001690:	48001010 	.word	0x48001010

10001694 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
10001694:	b480      	push	{r7}
10001696:	b083      	sub	sp, #12
10001698:	af00      	add	r7, sp, #0
1000169a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC2)
1000169c:	687b      	ldr	r3, [r7, #4]
1000169e:	681b      	ldr	r3, [r3, #0]
100016a0:	4a06      	ldr	r2, [pc, #24]	; (100016bc <HAL_CRC_MspInit+0x28>)
100016a2:	4293      	cmp	r3, r2
100016a4:	d104      	bne.n	100016b0 <HAL_CRC_MspInit+0x1c>
  {
  /* USER CODE BEGIN CRC2_MspInit 0 */

  /* USER CODE END CRC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC2_CLK_ENABLE();
100016a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016aa:	2280      	movs	r2, #128	; 0x80
100016ac:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
  /* USER CODE BEGIN CRC2_MspInit 1 */

  /* USER CODE END CRC2_MspInit 1 */
  }

}
100016b0:	bf00      	nop
100016b2:	370c      	adds	r7, #12
100016b4:	46bd      	mov	sp, r7
100016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
100016ba:	4770      	bx	lr
100016bc:	4c004000 	.word	0x4c004000

100016c0 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
100016c0:	b580      	push	{r7, lr}
100016c2:	b082      	sub	sp, #8
100016c4:	af00      	add	r7, sp, #0
100016c6:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
100016c8:	687b      	ldr	r3, [r7, #4]
100016ca:	681b      	ldr	r3, [r3, #0]
100016cc:	4a0e      	ldr	r2, [pc, #56]	; (10001708 <HAL_IPCC_MspInit+0x48>)
100016ce:	4293      	cmp	r3, r2
100016d0:	d115      	bne.n	100016fe <HAL_IPCC_MspInit+0x3e>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
100016d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
100016da:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_RX1_IRQn, 1, 0);
100016de:	2200      	movs	r2, #0
100016e0:	2101      	movs	r1, #1
100016e2:	2067      	movs	r0, #103	; 0x67
100016e4:	f001 fd29 	bl	1000313a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_RX1_IRQn);
100016e8:	2067      	movs	r0, #103	; 0x67
100016ea:	f001 fd42 	bl	10003172 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_TX1_IRQn, 1, 0);
100016ee:	2200      	movs	r2, #0
100016f0:	2101      	movs	r1, #1
100016f2:	2068      	movs	r0, #104	; 0x68
100016f4:	f001 fd21 	bl	1000313a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_TX1_IRQn);
100016f8:	2068      	movs	r0, #104	; 0x68
100016fa:	f001 fd3a 	bl	10003172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
100016fe:	bf00      	nop
10001700:	3708      	adds	r7, #8
10001702:	46bd      	mov	sp, r7
10001704:	bd80      	pop	{r7, pc}
10001706:	bf00      	nop
10001708:	4c001000 	.word	0x4c001000

1000170c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
1000170c:	b480      	push	{r7}
1000170e:	b083      	sub	sp, #12
10001710:	af00      	add	r7, sp, #0
10001712:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
10001714:	687b      	ldr	r3, [r7, #4]
10001716:	681b      	ldr	r3, [r3, #0]
10001718:	4a06      	ldr	r2, [pc, #24]	; (10001734 <HAL_TIM_Base_MspInit+0x28>)
1000171a:	4293      	cmp	r3, r2
1000171c:	d104      	bne.n	10001728 <HAL_TIM_Base_MspInit+0x1c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
1000171e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001722:	2208      	movs	r2, #8
10001724:	f8c3 2a88 	str.w	r2, [r3, #2696]	; 0xa88
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
10001728:	bf00      	nop
1000172a:	370c      	adds	r7, #12
1000172c:	46bd      	mov	sp, r7
1000172e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001732:	4770      	bx	lr
10001734:	44007000 	.word	0x44007000

10001738 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
10001738:	b580      	push	{r7, lr}
1000173a:	b0de      	sub	sp, #376	; 0x178
1000173c:	af00      	add	r7, sp, #0
1000173e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
10001742:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
10001746:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10001748:	f507 73b2 	add.w	r3, r7, #356	; 0x164
1000174c:	2200      	movs	r2, #0
1000174e:	601a      	str	r2, [r3, #0]
10001750:	605a      	str	r2, [r3, #4]
10001752:	609a      	str	r2, [r3, #8]
10001754:	60da      	str	r2, [r3, #12]
10001756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
10001758:	f507 73bc 	add.w	r3, r7, #376	; 0x178
1000175c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
10001760:	4618      	mov	r0, r3
10001762:	f44f 73ac 	mov.w	r3, #344	; 0x158
10001766:	461a      	mov	r2, r3
10001768:	2100      	movs	r1, #0
1000176a:	f00f f9ca 	bl	10010b02 <memset>
  if(huart->Instance==UART4)
1000176e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
10001772:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
10001776:	681b      	ldr	r3, [r3, #0]
10001778:	681b      	ldr	r3, [r3, #0]
1000177a:	4a2d      	ldr	r2, [pc, #180]	; (10001830 <HAL_UART_MspInit+0xf8>)
1000177c:	4293      	cmp	r3, r2
1000177e:	d151      	bne.n	10001824 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  if(IS_ENGINEERING_BOOT_MODE())
10001780:	4b2c      	ldr	r3, [pc, #176]	; (10001834 <HAL_UART_MspInit+0xfc>)
10001782:	681b      	ldr	r3, [r3, #0]
10001784:	f003 0307 	and.w	r3, r3, #7
10001788:	2b04      	cmp	r3, #4
1000178a:	d113      	bne.n	100017b4 <HAL_UART_MspInit+0x7c>
  {

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART24;
1000178c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
10001790:	f5a3 71b8 	sub.w	r1, r3, #368	; 0x170
10001794:	f04f 0202 	mov.w	r2, #2
10001798:	f04f 0300 	mov.w	r3, #0
1000179c:	e9c1 2300 	strd	r2, r3, [r1]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
100017a0:	f107 0308 	add.w	r3, r7, #8
100017a4:	4618      	mov	r0, r3
100017a6:	f004 fead 	bl	10006504 <HAL_RCCEx_PeriphCLKConfig>
100017aa:	4603      	mov	r3, r0
100017ac:	2b00      	cmp	r3, #0
100017ae:	d001      	beq.n	100017b4 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
100017b0:	f7ff fe7a 	bl	100014a8 <Error_Handler>
    }

  }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
100017b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100017b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
100017bc:	f8c3 2a80 	str.w	r2, [r3, #2688]	; 0xa80

    __HAL_RCC_GPIOG_CLK_ENABLE();
100017c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100017c4:	2240      	movs	r2, #64	; 0x40
100017c6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    __HAL_RCC_GPIOB_CLK_ENABLE();
100017ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100017ce:	2202      	movs	r2, #2
100017d0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    /**UART4 GPIO Configuration
    PG11     ------> UART4_TX
    PB2     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin;
100017d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
100017d8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
100017dc:	2302      	movs	r3, #2
100017de:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100017e2:	2300      	movs	r3, #0
100017e4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100017e8:	2300      	movs	r3, #0
100017ea:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
100017ee:	2306      	movs	r3, #6
100017f0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
100017f4:	f507 73b2 	add.w	r3, r7, #356	; 0x164
100017f8:	4619      	mov	r1, r3
100017fa:	480f      	ldr	r0, [pc, #60]	; (10001838 <HAL_UART_MspInit+0x100>)
100017fc:	f002 f996 	bl	10003b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLINK_TX_Pin;
10001800:	2304      	movs	r3, #4
10001802:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF;
10001806:	2302      	movs	r3, #2
10001808:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
1000180c:	2300      	movs	r3, #0
1000180e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
10001812:	2308      	movs	r3, #8
10001814:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    HAL_GPIO_Init(STLINK_TX_GPIO_Port, &GPIO_InitStruct);
10001818:	f507 73b2 	add.w	r3, r7, #356	; 0x164
1000181c:	4619      	mov	r1, r3
1000181e:	4807      	ldr	r0, [pc, #28]	; (1000183c <HAL_UART_MspInit+0x104>)
10001820:	f002 f984 	bl	10003b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
10001824:	bf00      	nop
10001826:	f507 77bc 	add.w	r7, r7, #376	; 0x178
1000182a:	46bd      	mov	sp, r7
1000182c:	bd80      	pop	{r7, pc}
1000182e:	bf00      	nop
10001830:	40010000 	.word	0x40010000
10001834:	50020000 	.word	0x50020000
10001838:	50008000 	.word	0x50008000
1000183c:	50003000 	.word	0x50003000

10001840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10001840:	b480      	push	{r7}
10001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
10001844:	e7fe      	b.n	10001844 <NMI_Handler+0x4>

10001846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10001846:	b480      	push	{r7}
10001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
1000184a:	e7fe      	b.n	1000184a <HardFault_Handler+0x4>

1000184c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
1000184c:	b480      	push	{r7}
1000184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
10001850:	e7fe      	b.n	10001850 <MemManage_Handler+0x4>

10001852 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
10001852:	b480      	push	{r7}
10001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
10001856:	e7fe      	b.n	10001856 <BusFault_Handler+0x4>

10001858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
10001858:	b480      	push	{r7}
1000185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
1000185c:	e7fe      	b.n	1000185c <UsageFault_Handler+0x4>

1000185e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
1000185e:	b480      	push	{r7}
10001860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
10001862:	bf00      	nop
10001864:	46bd      	mov	sp, r7
10001866:	f85d 7b04 	ldr.w	r7, [sp], #4
1000186a:	4770      	bx	lr

1000186c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
1000186c:	b480      	push	{r7}
1000186e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
10001870:	bf00      	nop
10001872:	46bd      	mov	sp, r7
10001874:	f85d 7b04 	ldr.w	r7, [sp], #4
10001878:	4770      	bx	lr

1000187a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
1000187a:	b480      	push	{r7}
1000187c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
1000187e:	bf00      	nop
10001880:	46bd      	mov	sp, r7
10001882:	f85d 7b04 	ldr.w	r7, [sp], #4
10001886:	4770      	bx	lr

10001888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
10001888:	b580      	push	{r7, lr}
1000188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
1000188c:	f000 f8ae 	bl	100019ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10001890:	bf00      	nop
10001892:	bd80      	pop	{r7, pc}

10001894 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
10001894:	b580      	push	{r7, lr}
10001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
10001898:	4802      	ldr	r0, [pc, #8]	; (100018a4 <DMA2_Stream0_IRQHandler+0x10>)
1000189a:	f001 fe6d 	bl	10003578 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
1000189e:	bf00      	nop
100018a0:	bd80      	pop	{r7, pc}
100018a2:	bf00      	nop
100018a4:	10020e4c 	.word	0x10020e4c

100018a8 <IPCC_RX1_IRQHandler>:

/**
  * @brief This function handles IPCC RX1 occupied interrupt.
  */
void IPCC_RX1_IRQHandler(void)
{
100018a8:	b580      	push	{r7, lr}
100018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_RX1_IRQn 0 */

  /* USER CODE END IPCC_RX1_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
100018ac:	4802      	ldr	r0, [pc, #8]	; (100018b8 <IPCC_RX1_IRQHandler+0x10>)
100018ae:	f002 fc2f 	bl	10004110 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_RX1_IRQn 1 */

  /* USER CODE END IPCC_RX1_IRQn 1 */
}
100018b2:	bf00      	nop
100018b4:	bd80      	pop	{r7, pc}
100018b6:	bf00      	nop
100018b8:	10020ee8 	.word	0x10020ee8

100018bc <IPCC_TX1_IRQHandler>:

/**
  * @brief This function handles IPCC TX1 free interrupt.
  */
void IPCC_TX1_IRQHandler(void)
{
100018bc:	b580      	push	{r7, lr}
100018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_TX1_IRQn 0 */

  /* USER CODE END IPCC_TX1_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
100018c0:	4802      	ldr	r0, [pc, #8]	; (100018cc <IPCC_TX1_IRQHandler+0x10>)
100018c2:	f002 fbd7 	bl	10004074 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_TX1_IRQn 1 */

  /* USER CODE END IPCC_TX1_IRQn 1 */
}
100018c6:	bf00      	nop
100018c8:	bd80      	pop	{r7, pc}
100018ca:	bf00      	nop
100018cc:	10020ee8 	.word	0x10020ee8

100018d0 <RCC_WAKEUP_IRQHandler>:

/**
  * @brief This function handles RCC wake-up interrupt.
  */
void RCC_WAKEUP_IRQHandler(void)
{
100018d0:	b580      	push	{r7, lr}
100018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 0 */

  /* USER CODE END RCC_WAKEUP_IRQn 0 */
  HAL_RCC_WAKEUP_IRQHandler();
100018d4:	f004 f9b6 	bl	10005c44 <HAL_RCC_WAKEUP_IRQHandler>
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 1 */

  /* USER CODE END RCC_WAKEUP_IRQn 1 */
}
100018d8:	bf00      	nop
100018da:	bd80      	pop	{r7, pc}

100018dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
100018dc:	b580      	push	{r7, lr}
100018de:	b086      	sub	sp, #24
100018e0:	af00      	add	r7, sp, #0
100018e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
100018e4:	4a14      	ldr	r2, [pc, #80]	; (10001938 <_sbrk+0x5c>)
100018e6:	4b15      	ldr	r3, [pc, #84]	; (1000193c <_sbrk+0x60>)
100018e8:	1ad3      	subs	r3, r2, r3
100018ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
100018ec:	697b      	ldr	r3, [r7, #20]
100018ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
100018f0:	4b13      	ldr	r3, [pc, #76]	; (10001940 <_sbrk+0x64>)
100018f2:	681b      	ldr	r3, [r3, #0]
100018f4:	2b00      	cmp	r3, #0
100018f6:	d102      	bne.n	100018fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
100018f8:	4b11      	ldr	r3, [pc, #68]	; (10001940 <_sbrk+0x64>)
100018fa:	4a12      	ldr	r2, [pc, #72]	; (10001944 <_sbrk+0x68>)
100018fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
100018fe:	4b10      	ldr	r3, [pc, #64]	; (10001940 <_sbrk+0x64>)
10001900:	681a      	ldr	r2, [r3, #0]
10001902:	687b      	ldr	r3, [r7, #4]
10001904:	4413      	add	r3, r2
10001906:	693a      	ldr	r2, [r7, #16]
10001908:	429a      	cmp	r2, r3
1000190a:	d207      	bcs.n	1000191c <_sbrk+0x40>
  {
    errno = ENOMEM;
1000190c:	f00f f980 	bl	10010c10 <__errno>
10001910:	4603      	mov	r3, r0
10001912:	220c      	movs	r2, #12
10001914:	601a      	str	r2, [r3, #0]
    return (void *)-1;
10001916:	f04f 33ff 	mov.w	r3, #4294967295
1000191a:	e009      	b.n	10001930 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
1000191c:	4b08      	ldr	r3, [pc, #32]	; (10001940 <_sbrk+0x64>)
1000191e:	681b      	ldr	r3, [r3, #0]
10001920:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
10001922:	4b07      	ldr	r3, [pc, #28]	; (10001940 <_sbrk+0x64>)
10001924:	681a      	ldr	r2, [r3, #0]
10001926:	687b      	ldr	r3, [r7, #4]
10001928:	4413      	add	r3, r2
1000192a:	4a05      	ldr	r2, [pc, #20]	; (10001940 <_sbrk+0x64>)
1000192c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
1000192e:	68fb      	ldr	r3, [r7, #12]
}
10001930:	4618      	mov	r0, r3
10001932:	3718      	adds	r7, #24
10001934:	46bd      	mov	sp, r7
10001936:	bd80      	pop	{r7, pc}
10001938:	10040000 	.word	0x10040000
1000193c:	00000800 	.word	0x00000800
10001940:	10029bac 	.word	0x10029bac
10001944:	10029e98 	.word	0x10029e98

10001948 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
10001948:	e7fe      	b.n	10001948 <ADC1_IRQHandler>
	...

1000194c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
1000194c:	b580      	push	{r7, lr}
1000194e:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
10001950:	2003      	movs	r0, #3
10001952:	f001 fbe7 	bl	10003124 <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001956:	f004 f8f5 	bl	10005b44 <HAL_RCC_GetSystemCoreClockFreq>
1000195a:	4603      	mov	r3, r0
1000195c:	4a07      	ldr	r2, [pc, #28]	; (1000197c <HAL_Init+0x30>)
1000195e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10001960:	2001      	movs	r0, #1
10001962:	f000 f80d 	bl	10001980 <HAL_InitTick>
10001966:	4603      	mov	r3, r0
10001968:	2b00      	cmp	r3, #0
1000196a:	d001      	beq.n	10001970 <HAL_Init+0x24>
  {
    return HAL_ERROR;
1000196c:	2301      	movs	r3, #1
1000196e:	e002      	b.n	10001976 <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
10001970:	f7ff fd9f 	bl	100014b2 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
10001974:	2300      	movs	r3, #0
}
10001976:	4618      	mov	r0, r3
10001978:	bd80      	pop	{r7, pc}
1000197a:	bf00      	nop
1000197c:	10020000 	.word	0x10020000

10001980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
10001980:	b580      	push	{r7, lr}
10001982:	b082      	sub	sp, #8
10001984:	af00      	add	r7, sp, #0
10001986:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
10001988:	4b15      	ldr	r3, [pc, #84]	; (100019e0 <HAL_InitTick+0x60>)
1000198a:	781b      	ldrb	r3, [r3, #0]
1000198c:	2b00      	cmp	r3, #0
1000198e:	d101      	bne.n	10001994 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
10001990:	2301      	movs	r3, #1
10001992:	e021      	b.n	100019d8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
10001994:	4b13      	ldr	r3, [pc, #76]	; (100019e4 <HAL_InitTick+0x64>)
10001996:	681a      	ldr	r2, [r3, #0]
10001998:	4b11      	ldr	r3, [pc, #68]	; (100019e0 <HAL_InitTick+0x60>)
1000199a:	781b      	ldrb	r3, [r3, #0]
1000199c:	4619      	mov	r1, r3
1000199e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
100019a2:	fbb3 f3f1 	udiv	r3, r3, r1
100019a6:	fbb2 f3f3 	udiv	r3, r2, r3
100019aa:	4618      	mov	r0, r3
100019ac:	f001 fbef 	bl	1000318e <HAL_SYSTICK_Config>
100019b0:	4603      	mov	r3, r0
100019b2:	2b00      	cmp	r3, #0
100019b4:	d001      	beq.n	100019ba <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
100019b6:	2301      	movs	r3, #1
100019b8:	e00e      	b.n	100019d8 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
100019ba:	687b      	ldr	r3, [r7, #4]
100019bc:	2b0f      	cmp	r3, #15
100019be:	d80a      	bhi.n	100019d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
100019c0:	2200      	movs	r2, #0
100019c2:	6879      	ldr	r1, [r7, #4]
100019c4:	f04f 30ff 	mov.w	r0, #4294967295
100019c8:	f001 fbb7 	bl	1000313a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
100019cc:	4a06      	ldr	r2, [pc, #24]	; (100019e8 <HAL_InitTick+0x68>)
100019ce:	687b      	ldr	r3, [r7, #4]
100019d0:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
100019d2:	2300      	movs	r3, #0
100019d4:	e000      	b.n	100019d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
100019d6:	2301      	movs	r3, #1
}
100019d8:	4618      	mov	r0, r3
100019da:	3708      	adds	r7, #8
100019dc:	46bd      	mov	sp, r7
100019de:	bd80      	pop	{r7, pc}
100019e0:	10020010 	.word	0x10020010
100019e4:	10020000 	.word	0x10020000
100019e8:	1002000c 	.word	0x1002000c

100019ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
100019ec:	b480      	push	{r7}
100019ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
100019f0:	4b06      	ldr	r3, [pc, #24]	; (10001a0c <HAL_IncTick+0x20>)
100019f2:	781b      	ldrb	r3, [r3, #0]
100019f4:	461a      	mov	r2, r3
100019f6:	4b06      	ldr	r3, [pc, #24]	; (10001a10 <HAL_IncTick+0x24>)
100019f8:	681b      	ldr	r3, [r3, #0]
100019fa:	4413      	add	r3, r2
100019fc:	4a04      	ldr	r2, [pc, #16]	; (10001a10 <HAL_IncTick+0x24>)
100019fe:	6013      	str	r3, [r2, #0]
}
10001a00:	bf00      	nop
10001a02:	46bd      	mov	sp, r7
10001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
10001a08:	4770      	bx	lr
10001a0a:	bf00      	nop
10001a0c:	10020010 	.word	0x10020010
10001a10:	10029bb0 	.word	0x10029bb0

10001a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10001a14:	b480      	push	{r7}
10001a16:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
10001a18:	4b03      	ldr	r3, [pc, #12]	; (10001a28 <HAL_GetTick+0x14>)
10001a1a:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
10001a1c:	4618      	mov	r0, r3
10001a1e:	46bd      	mov	sp, r7
10001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
10001a24:	4770      	bx	lr
10001a26:	bf00      	nop
10001a28:	10029bb0 	.word	0x10029bb0

10001a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
10001a2c:	b580      	push	{r7, lr}
10001a2e:	b084      	sub	sp, #16
10001a30:	af00      	add	r7, sp, #0
10001a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
10001a34:	f7ff ffee 	bl	10001a14 <HAL_GetTick>
10001a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
10001a3a:	687b      	ldr	r3, [r7, #4]
10001a3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
10001a3e:	68fb      	ldr	r3, [r7, #12]
10001a40:	f1b3 3fff 	cmp.w	r3, #4294967295
10001a44:	d005      	beq.n	10001a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
10001a46:	4b0a      	ldr	r3, [pc, #40]	; (10001a70 <HAL_Delay+0x44>)
10001a48:	781b      	ldrb	r3, [r3, #0]
10001a4a:	461a      	mov	r2, r3
10001a4c:	68fb      	ldr	r3, [r7, #12]
10001a4e:	4413      	add	r3, r2
10001a50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
10001a52:	bf00      	nop
10001a54:	f7ff ffde 	bl	10001a14 <HAL_GetTick>
10001a58:	4602      	mov	r2, r0
10001a5a:	68bb      	ldr	r3, [r7, #8]
10001a5c:	1ad3      	subs	r3, r2, r3
10001a5e:	68fa      	ldr	r2, [r7, #12]
10001a60:	429a      	cmp	r2, r3
10001a62:	d8f7      	bhi.n	10001a54 <HAL_Delay+0x28>
  {
  }
}
10001a64:	bf00      	nop
10001a66:	bf00      	nop
10001a68:	3710      	adds	r7, #16
10001a6a:	46bd      	mov	sp, r7
10001a6c:	bd80      	pop	{r7, pc}
10001a6e:	bf00      	nop
10001a70:	10020010 	.word	0x10020010

10001a74 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.8 V.
  *                                                This requires VDDA equal to or higher than 2.1 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
10001a74:	b480      	push	{r7}
10001a76:	b083      	sub	sp, #12
10001a78:	af00      	add	r7, sp, #0
10001a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
10001a7c:	4b06      	ldr	r3, [pc, #24]	; (10001a98 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
10001a7e:	681b      	ldr	r3, [r3, #0]
10001a80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
10001a84:	4904      	ldr	r1, [pc, #16]	; (10001a98 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
10001a86:	687b      	ldr	r3, [r7, #4]
10001a88:	4313      	orrs	r3, r2
10001a8a:	600b      	str	r3, [r1, #0]
}
10001a8c:	bf00      	nop
10001a8e:	370c      	adds	r7, #12
10001a90:	46bd      	mov	sp, r7
10001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
10001a96:	4770      	bx	lr
10001a98:	50025000 	.word	0x50025000

10001a9c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
10001a9c:	b480      	push	{r7}
10001a9e:	b083      	sub	sp, #12
10001aa0:	af00      	add	r7, sp, #0
10001aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
10001aa4:	4b06      	ldr	r3, [pc, #24]	; (10001ac0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
10001aa6:	681b      	ldr	r3, [r3, #0]
10001aa8:	f023 0202 	bic.w	r2, r3, #2
10001aac:	4904      	ldr	r1, [pc, #16]	; (10001ac0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
10001aae:	687b      	ldr	r3, [r7, #4]
10001ab0:	4313      	orrs	r3, r2
10001ab2:	600b      	str	r3, [r1, #0]
}
10001ab4:	bf00      	nop
10001ab6:	370c      	adds	r7, #12
10001ab8:	46bd      	mov	sp, r7
10001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
10001abe:	4770      	bx	lr
10001ac0:	50025000 	.word	0x50025000

10001ac4 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
10001ac4:	b580      	push	{r7, lr}
10001ac6:	b082      	sub	sp, #8
10001ac8:	af00      	add	r7, sp, #0
  uint32_t  tickstart = 0;
10001aca:	2300      	movs	r3, #0
10001acc:	607b      	str	r3, [r7, #4]

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
10001ace:	4b0f      	ldr	r3, [pc, #60]	; (10001b0c <HAL_SYSCFG_EnableVREFBUF+0x48>)
10001ad0:	681b      	ldr	r3, [r3, #0]
10001ad2:	4a0e      	ldr	r2, [pc, #56]	; (10001b0c <HAL_SYSCFG_EnableVREFBUF+0x48>)
10001ad4:	f043 0301 	orr.w	r3, r3, #1
10001ad8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001ada:	f7ff ff9b 	bl	10001a14 <HAL_GetTick>
10001ade:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == RESET)
10001ae0:	e008      	b.n	10001af4 <HAL_SYSCFG_EnableVREFBUF+0x30>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
10001ae2:	f7ff ff97 	bl	10001a14 <HAL_GetTick>
10001ae6:	4602      	mov	r2, r0
10001ae8:	687b      	ldr	r3, [r7, #4]
10001aea:	1ad3      	subs	r3, r2, r3
10001aec:	2b0a      	cmp	r3, #10
10001aee:	d901      	bls.n	10001af4 <HAL_SYSCFG_EnableVREFBUF+0x30>
    {
      return HAL_TIMEOUT;
10001af0:	2303      	movs	r3, #3
10001af2:	e006      	b.n	10001b02 <HAL_SYSCFG_EnableVREFBUF+0x3e>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == RESET)
10001af4:	4b05      	ldr	r3, [pc, #20]	; (10001b0c <HAL_SYSCFG_EnableVREFBUF+0x48>)
10001af6:	681b      	ldr	r3, [r3, #0]
10001af8:	f003 0308 	and.w	r3, r3, #8
10001afc:	2b00      	cmp	r3, #0
10001afe:	d0f0      	beq.n	10001ae2 <HAL_SYSCFG_EnableVREFBUF+0x1e>
    }
  }

  return HAL_OK;
10001b00:	2300      	movs	r3, #0
}
10001b02:	4618      	mov	r0, r3
10001b04:	3708      	adds	r7, #8
10001b06:	46bd      	mov	sp, r7
10001b08:	bd80      	pop	{r7, pc}
10001b0a:	bf00      	nop
10001b0c:	50025000 	.word	0x50025000

10001b10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
10001b10:	b480      	push	{r7}
10001b12:	b083      	sub	sp, #12
10001b14:	af00      	add	r7, sp, #0
10001b16:	6078      	str	r0, [r7, #4]
10001b18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
10001b1a:	687b      	ldr	r3, [r7, #4]
10001b1c:	689b      	ldr	r3, [r3, #8]
10001b1e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
10001b22:	683b      	ldr	r3, [r7, #0]
10001b24:	431a      	orrs	r2, r3
10001b26:	687b      	ldr	r3, [r7, #4]
10001b28:	609a      	str	r2, [r3, #8]
}
10001b2a:	bf00      	nop
10001b2c:	370c      	adds	r7, #12
10001b2e:	46bd      	mov	sp, r7
10001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
10001b34:	4770      	bx	lr
	...

10001b38 <LL_ADC_SetCommonPathInternalCh>:
  *
  *         (1) On STM32MP1, parameter available only on ADC instance: ADC2.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
10001b38:	b480      	push	{r7}
10001b3a:	b083      	sub	sp, #12
10001b3c:	af00      	add	r7, sp, #0
10001b3e:	6078      	str	r0, [r7, #4]
10001b40:	6039      	str	r1, [r7, #0]
  if(PathInternal == LL_ADC_PATH_INTERNAL_VDDCORE)
10001b42:	683b      	ldr	r3, [r7, #0]
10001b44:	2b01      	cmp	r3, #1
10001b46:	d108      	bne.n	10001b5a <LL_ADC_SetCommonPathInternalCh+0x22>
  {
    /* Feature limited to ADC instance ADC2 */
    SET_BIT(ADC2->OR, ADC2_OR_VDDCOREEN);
10001b48:	4b0b      	ldr	r3, [pc, #44]	; (10001b78 <LL_ADC_SetCommonPathInternalCh+0x40>)
10001b4a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
10001b4e:	4a0a      	ldr	r2, [pc, #40]	; (10001b78 <LL_ADC_SetCommonPathInternalCh+0x40>)
10001b50:	f043 0301 	orr.w	r3, r3, #1
10001b54:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
  }
  else
  {
    MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
  }
}
10001b58:	e007      	b.n	10001b6a <LL_ADC_SetCommonPathInternalCh+0x32>
    MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
10001b5a:	687b      	ldr	r3, [r7, #4]
10001b5c:	689b      	ldr	r3, [r3, #8]
10001b5e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
10001b62:	683b      	ldr	r3, [r7, #0]
10001b64:	431a      	orrs	r2, r3
10001b66:	687b      	ldr	r3, [r7, #4]
10001b68:	609a      	str	r2, [r3, #8]
}
10001b6a:	bf00      	nop
10001b6c:	370c      	adds	r7, #12
10001b6e:	46bd      	mov	sp, r7
10001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
10001b74:	4770      	bx	lr
10001b76:	bf00      	nop
10001b78:	48003100 	.word	0x48003100

10001b7c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
10001b7c:	b480      	push	{r7}
10001b7e:	b083      	sub	sp, #12
10001b80:	af00      	add	r7, sp, #0
10001b82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
10001b84:	687b      	ldr	r3, [r7, #4]
10001b86:	689b      	ldr	r3, [r3, #8]
10001b88:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
10001b8c:	4618      	mov	r0, r3
10001b8e:	370c      	adds	r7, #12
10001b90:	46bd      	mov	sp, r7
10001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
10001b96:	4770      	bx	lr

10001b98 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
10001b98:	b480      	push	{r7}
10001b9a:	b087      	sub	sp, #28
10001b9c:	af00      	add	r7, sp, #0
10001b9e:	60f8      	str	r0, [r7, #12]
10001ba0:	60b9      	str	r1, [r7, #8]
10001ba2:	607a      	str	r2, [r7, #4]
10001ba4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
10001ba6:	68fb      	ldr	r3, [r7, #12]
10001ba8:	3360      	adds	r3, #96	; 0x60
10001baa:	461a      	mov	r2, r3
10001bac:	68bb      	ldr	r3, [r7, #8]
10001bae:	009b      	lsls	r3, r3, #2
10001bb0:	4413      	add	r3, r2
10001bb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
10001bb4:	697b      	ldr	r3, [r7, #20]
10001bb6:	681b      	ldr	r3, [r3, #0]
10001bb8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10001bbc:	687b      	ldr	r3, [r7, #4]
10001bbe:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
10001bc2:	683b      	ldr	r3, [r7, #0]
10001bc4:	430b      	orrs	r3, r1
10001bc6:	431a      	orrs	r2, r3
10001bc8:	697b      	ldr	r3, [r7, #20]
10001bca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
10001bcc:	bf00      	nop
10001bce:	371c      	adds	r7, #28
10001bd0:	46bd      	mov	sp, r7
10001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
10001bd6:	4770      	bx	lr

10001bd8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
10001bd8:	b480      	push	{r7}
10001bda:	b085      	sub	sp, #20
10001bdc:	af00      	add	r7, sp, #0
10001bde:	60f8      	str	r0, [r7, #12]
10001be0:	60b9      	str	r1, [r7, #8]
10001be2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
10001be4:	68fb      	ldr	r3, [r7, #12]
10001be6:	691b      	ldr	r3, [r3, #16]
10001be8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
10001bec:	68bb      	ldr	r3, [r7, #8]
10001bee:	f003 031f 	and.w	r3, r3, #31
10001bf2:	6879      	ldr	r1, [r7, #4]
10001bf4:	fa01 f303 	lsl.w	r3, r1, r3
10001bf8:	431a      	orrs	r2, r3
10001bfa:	68fb      	ldr	r3, [r7, #12]
10001bfc:	611a      	str	r2, [r3, #16]
}
10001bfe:	bf00      	nop
10001c00:	3714      	adds	r7, #20
10001c02:	46bd      	mov	sp, r7
10001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c08:	4770      	bx	lr

10001c0a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
10001c0a:	b480      	push	{r7}
10001c0c:	b087      	sub	sp, #28
10001c0e:	af00      	add	r7, sp, #0
10001c10:	60f8      	str	r0, [r7, #12]
10001c12:	60b9      	str	r1, [r7, #8]
10001c14:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
10001c16:	68fb      	ldr	r3, [r7, #12]
10001c18:	3360      	adds	r3, #96	; 0x60
10001c1a:	461a      	mov	r2, r3
10001c1c:	68bb      	ldr	r3, [r7, #8]
10001c1e:	009b      	lsls	r3, r3, #2
10001c20:	4413      	add	r3, r2
10001c22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
10001c24:	697b      	ldr	r3, [r7, #20]
10001c26:	681b      	ldr	r3, [r3, #0]
10001c28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
10001c2c:	687b      	ldr	r3, [r7, #4]
10001c2e:	431a      	orrs	r2, r3
10001c30:	697b      	ldr	r3, [r7, #20]
10001c32:	601a      	str	r2, [r3, #0]
}
10001c34:	bf00      	nop
10001c36:	371c      	adds	r7, #28
10001c38:	46bd      	mov	sp, r7
10001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c3e:	4770      	bx	lr

10001c40 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
10001c40:	b480      	push	{r7}
10001c42:	b083      	sub	sp, #12
10001c44:	af00      	add	r7, sp, #0
10001c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
10001c48:	687b      	ldr	r3, [r7, #4]
10001c4a:	68db      	ldr	r3, [r3, #12]
10001c4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
10001c50:	2b00      	cmp	r3, #0
10001c52:	d101      	bne.n	10001c58 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
10001c54:	2301      	movs	r3, #1
10001c56:	e000      	b.n	10001c5a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
10001c58:	2300      	movs	r3, #0
}
10001c5a:	4618      	mov	r0, r3
10001c5c:	370c      	adds	r7, #12
10001c5e:	46bd      	mov	sp, r7
10001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c64:	4770      	bx	lr

10001c66 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32MP1, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
10001c66:	b480      	push	{r7}
10001c68:	b087      	sub	sp, #28
10001c6a:	af00      	add	r7, sp, #0
10001c6c:	60f8      	str	r0, [r7, #12]
10001c6e:	60b9      	str	r1, [r7, #8]
10001c70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
10001c72:	68fb      	ldr	r3, [r7, #12]
10001c74:	3330      	adds	r3, #48	; 0x30
10001c76:	461a      	mov	r2, r3
10001c78:	68bb      	ldr	r3, [r7, #8]
10001c7a:	0a1b      	lsrs	r3, r3, #8
10001c7c:	009b      	lsls	r3, r3, #2
10001c7e:	f003 030c 	and.w	r3, r3, #12
10001c82:	4413      	add	r3, r2
10001c84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
10001c86:	697b      	ldr	r3, [r7, #20]
10001c88:	681a      	ldr	r2, [r3, #0]
10001c8a:	68bb      	ldr	r3, [r7, #8]
10001c8c:	f003 031f 	and.w	r3, r3, #31
10001c90:	211f      	movs	r1, #31
10001c92:	fa01 f303 	lsl.w	r3, r1, r3
10001c96:	43db      	mvns	r3, r3
10001c98:	401a      	ands	r2, r3
10001c9a:	687b      	ldr	r3, [r7, #4]
10001c9c:	0e9b      	lsrs	r3, r3, #26
10001c9e:	f003 011f 	and.w	r1, r3, #31
10001ca2:	68bb      	ldr	r3, [r7, #8]
10001ca4:	f003 031f 	and.w	r3, r3, #31
10001ca8:	fa01 f303 	lsl.w	r3, r1, r3
10001cac:	431a      	orrs	r2, r3
10001cae:	697b      	ldr	r3, [r7, #20]
10001cb0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
10001cb2:	bf00      	nop
10001cb4:	371c      	adds	r7, #28
10001cb6:	46bd      	mov	sp, r7
10001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
10001cbc:	4770      	bx	lr

10001cbe <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
10001cbe:	b480      	push	{r7}
10001cc0:	b087      	sub	sp, #28
10001cc2:	af00      	add	r7, sp, #0
10001cc4:	60f8      	str	r0, [r7, #12]
10001cc6:	60b9      	str	r1, [r7, #8]
10001cc8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
10001cca:	68fb      	ldr	r3, [r7, #12]
10001ccc:	3314      	adds	r3, #20
10001cce:	461a      	mov	r2, r3
10001cd0:	68bb      	ldr	r3, [r7, #8]
10001cd2:	0e5b      	lsrs	r3, r3, #25
10001cd4:	009b      	lsls	r3, r3, #2
10001cd6:	f003 0304 	and.w	r3, r3, #4
10001cda:	4413      	add	r3, r2
10001cdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
10001cde:	697b      	ldr	r3, [r7, #20]
10001ce0:	681a      	ldr	r2, [r3, #0]
10001ce2:	68bb      	ldr	r3, [r7, #8]
10001ce4:	0d1b      	lsrs	r3, r3, #20
10001ce6:	f003 031f 	and.w	r3, r3, #31
10001cea:	2107      	movs	r1, #7
10001cec:	fa01 f303 	lsl.w	r3, r1, r3
10001cf0:	43db      	mvns	r3, r3
10001cf2:	401a      	ands	r2, r3
10001cf4:	68bb      	ldr	r3, [r7, #8]
10001cf6:	0d1b      	lsrs	r3, r3, #20
10001cf8:	f003 031f 	and.w	r3, r3, #31
10001cfc:	6879      	ldr	r1, [r7, #4]
10001cfe:	fa01 f303 	lsl.w	r3, r1, r3
10001d02:	431a      	orrs	r2, r3
10001d04:	697b      	ldr	r3, [r7, #20]
10001d06:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
10001d08:	bf00      	nop
10001d0a:	371c      	adds	r7, #28
10001d0c:	46bd      	mov	sp, r7
10001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001d12:	4770      	bx	lr

10001d14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
10001d14:	b480      	push	{r7}
10001d16:	b085      	sub	sp, #20
10001d18:	af00      	add	r7, sp, #0
10001d1a:	60f8      	str	r0, [r7, #12]
10001d1c:	60b9      	str	r1, [r7, #8]
10001d1e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
10001d20:	68fb      	ldr	r3, [r7, #12]
10001d22:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
10001d26:	68bb      	ldr	r3, [r7, #8]
10001d28:	f3c3 0313 	ubfx	r3, r3, #0, #20
10001d2c:	43db      	mvns	r3, r3
10001d2e:	401a      	ands	r2, r3
10001d30:	687b      	ldr	r3, [r7, #4]
10001d32:	f003 0318 	and.w	r3, r3, #24
10001d36:	4908      	ldr	r1, [pc, #32]	; (10001d58 <LL_ADC_SetChannelSingleDiff+0x44>)
10001d38:	40d9      	lsrs	r1, r3
10001d3a:	68bb      	ldr	r3, [r7, #8]
10001d3c:	400b      	ands	r3, r1
10001d3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
10001d42:	431a      	orrs	r2, r3
10001d44:	68fb      	ldr	r3, [r7, #12]
10001d46:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
10001d4a:	bf00      	nop
10001d4c:	3714      	adds	r7, #20
10001d4e:	46bd      	mov	sp, r7
10001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
10001d54:	4770      	bx	lr
10001d56:	bf00      	nop
10001d58:	000fffff 	.word	0x000fffff

10001d5c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
10001d5c:	b480      	push	{r7}
10001d5e:	b083      	sub	sp, #12
10001d60:	af00      	add	r7, sp, #0
10001d62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
10001d64:	687b      	ldr	r3, [r7, #4]
10001d66:	689b      	ldr	r3, [r3, #8]
10001d68:	f003 031f 	and.w	r3, r3, #31
}
10001d6c:	4618      	mov	r0, r3
10001d6e:	370c      	adds	r7, #12
10001d70:	46bd      	mov	sp, r7
10001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
10001d76:	4770      	bx	lr

10001d78 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
10001d78:	b480      	push	{r7}
10001d7a:	b083      	sub	sp, #12
10001d7c:	af00      	add	r7, sp, #0
10001d7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
10001d80:	687b      	ldr	r3, [r7, #4]
10001d82:	689b      	ldr	r3, [r3, #8]
10001d84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
10001d88:	4618      	mov	r0, r3
10001d8a:	370c      	adds	r7, #12
10001d8c:	46bd      	mov	sp, r7
10001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001d92:	4770      	bx	lr

10001d94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
10001d94:	b480      	push	{r7}
10001d96:	b083      	sub	sp, #12
10001d98:	af00      	add	r7, sp, #0
10001d9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
10001d9c:	687b      	ldr	r3, [r7, #4]
10001d9e:	689b      	ldr	r3, [r3, #8]
10001da0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
10001da4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10001da8:	687a      	ldr	r2, [r7, #4]
10001daa:	6093      	str	r3, [r2, #8]
}
10001dac:	bf00      	nop
10001dae:	370c      	adds	r7, #12
10001db0:	46bd      	mov	sp, r7
10001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
10001db6:	4770      	bx	lr

10001db8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
10001db8:	b480      	push	{r7}
10001dba:	b083      	sub	sp, #12
10001dbc:	af00      	add	r7, sp, #0
10001dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
10001dc0:	687b      	ldr	r3, [r7, #4]
10001dc2:	689b      	ldr	r3, [r3, #8]
10001dc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
10001dc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
10001dcc:	d101      	bne.n	10001dd2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
10001dce:	2301      	movs	r3, #1
10001dd0:	e000      	b.n	10001dd4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
10001dd2:	2300      	movs	r3, #0
}
10001dd4:	4618      	mov	r0, r3
10001dd6:	370c      	adds	r7, #12
10001dd8:	46bd      	mov	sp, r7
10001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
10001dde:	4770      	bx	lr

10001de0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
10001de0:	b480      	push	{r7}
10001de2:	b083      	sub	sp, #12
10001de4:	af00      	add	r7, sp, #0
10001de6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
10001de8:	687b      	ldr	r3, [r7, #4]
10001dea:	689b      	ldr	r3, [r3, #8]
10001dec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
10001df0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10001df4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
10001df8:	687b      	ldr	r3, [r7, #4]
10001dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
10001dfc:	bf00      	nop
10001dfe:	370c      	adds	r7, #12
10001e00:	46bd      	mov	sp, r7
10001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
10001e06:	4770      	bx	lr

10001e08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
10001e08:	b480      	push	{r7}
10001e0a:	b083      	sub	sp, #12
10001e0c:	af00      	add	r7, sp, #0
10001e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
10001e10:	687b      	ldr	r3, [r7, #4]
10001e12:	689b      	ldr	r3, [r3, #8]
10001e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
10001e18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
10001e1c:	d101      	bne.n	10001e22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
10001e1e:	2301      	movs	r3, #1
10001e20:	e000      	b.n	10001e24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
10001e22:	2300      	movs	r3, #0
}
10001e24:	4618      	mov	r0, r3
10001e26:	370c      	adds	r7, #12
10001e28:	46bd      	mov	sp, r7
10001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
10001e2e:	4770      	bx	lr

10001e30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
10001e30:	b480      	push	{r7}
10001e32:	b083      	sub	sp, #12
10001e34:	af00      	add	r7, sp, #0
10001e36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
10001e38:	687b      	ldr	r3, [r7, #4]
10001e3a:	689b      	ldr	r3, [r3, #8]
10001e3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
10001e40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10001e44:	f043 0201 	orr.w	r2, r3, #1
10001e48:	687b      	ldr	r3, [r7, #4]
10001e4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
10001e4c:	bf00      	nop
10001e4e:	370c      	adds	r7, #12
10001e50:	46bd      	mov	sp, r7
10001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
10001e56:	4770      	bx	lr

10001e58 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
10001e58:	b480      	push	{r7}
10001e5a:	b083      	sub	sp, #12
10001e5c:	af00      	add	r7, sp, #0
10001e5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
10001e60:	687b      	ldr	r3, [r7, #4]
10001e62:	689b      	ldr	r3, [r3, #8]
10001e64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
10001e68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10001e6c:	f043 0202 	orr.w	r2, r3, #2
10001e70:	687b      	ldr	r3, [r7, #4]
10001e72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
10001e74:	bf00      	nop
10001e76:	370c      	adds	r7, #12
10001e78:	46bd      	mov	sp, r7
10001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
10001e7e:	4770      	bx	lr

10001e80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
10001e80:	b480      	push	{r7}
10001e82:	b083      	sub	sp, #12
10001e84:	af00      	add	r7, sp, #0
10001e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
10001e88:	687b      	ldr	r3, [r7, #4]
10001e8a:	689b      	ldr	r3, [r3, #8]
10001e8c:	f003 0301 	and.w	r3, r3, #1
10001e90:	2b01      	cmp	r3, #1
10001e92:	d101      	bne.n	10001e98 <LL_ADC_IsEnabled+0x18>
10001e94:	2301      	movs	r3, #1
10001e96:	e000      	b.n	10001e9a <LL_ADC_IsEnabled+0x1a>
10001e98:	2300      	movs	r3, #0
}
10001e9a:	4618      	mov	r0, r3
10001e9c:	370c      	adds	r7, #12
10001e9e:	46bd      	mov	sp, r7
10001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
10001ea4:	4770      	bx	lr

10001ea6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
10001ea6:	b480      	push	{r7}
10001ea8:	b083      	sub	sp, #12
10001eaa:	af00      	add	r7, sp, #0
10001eac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
10001eae:	687b      	ldr	r3, [r7, #4]
10001eb0:	689b      	ldr	r3, [r3, #8]
10001eb2:	f003 0302 	and.w	r3, r3, #2
10001eb6:	2b02      	cmp	r3, #2
10001eb8:	d101      	bne.n	10001ebe <LL_ADC_IsDisableOngoing+0x18>
10001eba:	2301      	movs	r3, #1
10001ebc:	e000      	b.n	10001ec0 <LL_ADC_IsDisableOngoing+0x1a>
10001ebe:	2300      	movs	r3, #0
}
10001ec0:	4618      	mov	r0, r3
10001ec2:	370c      	adds	r7, #12
10001ec4:	46bd      	mov	sp, r7
10001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
10001eca:	4770      	bx	lr

10001ecc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
10001ecc:	b480      	push	{r7}
10001ece:	b083      	sub	sp, #12
10001ed0:	af00      	add	r7, sp, #0
10001ed2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
10001ed4:	687b      	ldr	r3, [r7, #4]
10001ed6:	689b      	ldr	r3, [r3, #8]
10001ed8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
10001edc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10001ee0:	f043 0204 	orr.w	r2, r3, #4
10001ee4:	687b      	ldr	r3, [r7, #4]
10001ee6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
10001ee8:	bf00      	nop
10001eea:	370c      	adds	r7, #12
10001eec:	46bd      	mov	sp, r7
10001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
10001ef2:	4770      	bx	lr

10001ef4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
10001ef4:	b480      	push	{r7}
10001ef6:	b083      	sub	sp, #12
10001ef8:	af00      	add	r7, sp, #0
10001efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
10001efc:	687b      	ldr	r3, [r7, #4]
10001efe:	689b      	ldr	r3, [r3, #8]
10001f00:	f003 0304 	and.w	r3, r3, #4
10001f04:	2b04      	cmp	r3, #4
10001f06:	d101      	bne.n	10001f0c <LL_ADC_REG_IsConversionOngoing+0x18>
10001f08:	2301      	movs	r3, #1
10001f0a:	e000      	b.n	10001f0e <LL_ADC_REG_IsConversionOngoing+0x1a>
10001f0c:	2300      	movs	r3, #0
}
10001f0e:	4618      	mov	r0, r3
10001f10:	370c      	adds	r7, #12
10001f12:	46bd      	mov	sp, r7
10001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
10001f18:	4770      	bx	lr

10001f1a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
10001f1a:	b480      	push	{r7}
10001f1c:	b083      	sub	sp, #12
10001f1e:	af00      	add	r7, sp, #0
10001f20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
10001f22:	687b      	ldr	r3, [r7, #4]
10001f24:	689b      	ldr	r3, [r3, #8]
10001f26:	f003 0308 	and.w	r3, r3, #8
10001f2a:	2b08      	cmp	r3, #8
10001f2c:	d101      	bne.n	10001f32 <LL_ADC_INJ_IsConversionOngoing+0x18>
10001f2e:	2301      	movs	r3, #1
10001f30:	e000      	b.n	10001f34 <LL_ADC_INJ_IsConversionOngoing+0x1a>
10001f32:	2300      	movs	r3, #0
}
10001f34:	4618      	mov	r0, r3
10001f36:	370c      	adds	r7, #12
10001f38:	46bd      	mov	sp, r7
10001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
10001f3e:	4770      	bx	lr

10001f40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
10001f40:	b590      	push	{r4, r7, lr}
10001f42:	b089      	sub	sp, #36	; 0x24
10001f44:	af00      	add	r7, sp, #0
10001f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
10001f48:	2300      	movs	r3, #0
10001f4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
10001f4c:	2300      	movs	r3, #0
10001f4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
10001f50:	687b      	ldr	r3, [r7, #4]
10001f52:	2b00      	cmp	r3, #0
10001f54:	d101      	bne.n	10001f5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
10001f56:	2301      	movs	r3, #1
10001f58:	e13a      	b.n	100021d0 <HAL_ADC_Init+0x290>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
10001f5a:	687b      	ldr	r3, [r7, #4]
10001f5c:	68db      	ldr	r3, [r3, #12]
10001f5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
10001f60:	687b      	ldr	r3, [r7, #4]
10001f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001f64:	2b00      	cmp	r3, #0
10001f66:	d109      	bne.n	10001f7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
10001f68:	6878      	ldr	r0, [r7, #4]
10001f6a:	f7ff fad9 	bl	10001520 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
10001f6e:	687b      	ldr	r3, [r7, #4]
10001f70:	2200      	movs	r2, #0
10001f72:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
10001f74:	687b      	ldr	r3, [r7, #4]
10001f76:	2200      	movs	r2, #0
10001f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
10001f7c:	687b      	ldr	r3, [r7, #4]
10001f7e:	681b      	ldr	r3, [r3, #0]
10001f80:	4618      	mov	r0, r3
10001f82:	f7ff ff19 	bl	10001db8 <LL_ADC_IsDeepPowerDownEnabled>
10001f86:	4603      	mov	r3, r0
10001f88:	2b00      	cmp	r3, #0
10001f8a:	d004      	beq.n	10001f96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
10001f8c:	687b      	ldr	r3, [r7, #4]
10001f8e:	681b      	ldr	r3, [r3, #0]
10001f90:	4618      	mov	r0, r3
10001f92:	f7ff feff 	bl	10001d94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
10001f96:	687b      	ldr	r3, [r7, #4]
10001f98:	681b      	ldr	r3, [r3, #0]
10001f9a:	4618      	mov	r0, r3
10001f9c:	f7ff ff34 	bl	10001e08 <LL_ADC_IsInternalRegulatorEnabled>
10001fa0:	4603      	mov	r3, r0
10001fa2:	2b00      	cmp	r3, #0
10001fa4:	d114      	bne.n	10001fd0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
10001fa6:	687b      	ldr	r3, [r7, #4]
10001fa8:	681b      	ldr	r3, [r3, #0]
10001faa:	4618      	mov	r0, r3
10001fac:	f7ff ff18 	bl	10001de0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
10001fb0:	4b89      	ldr	r3, [pc, #548]	; (100021d8 <HAL_ADC_Init+0x298>)
10001fb2:	681b      	ldr	r3, [r3, #0]
10001fb4:	099b      	lsrs	r3, r3, #6
10001fb6:	4a89      	ldr	r2, [pc, #548]	; (100021dc <HAL_ADC_Init+0x29c>)
10001fb8:	fba2 2303 	umull	r2, r3, r2, r3
10001fbc:	099b      	lsrs	r3, r3, #6
10001fbe:	3301      	adds	r3, #1
10001fc0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
10001fc2:	e002      	b.n	10001fca <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
10001fc4:	68bb      	ldr	r3, [r7, #8]
10001fc6:	3b01      	subs	r3, #1
10001fc8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
10001fca:	68bb      	ldr	r3, [r7, #8]
10001fcc:	2b00      	cmp	r3, #0
10001fce:	d1f9      	bne.n	10001fc4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
10001fd0:	687b      	ldr	r3, [r7, #4]
10001fd2:	681b      	ldr	r3, [r3, #0]
10001fd4:	4618      	mov	r0, r3
10001fd6:	f7ff ff17 	bl	10001e08 <LL_ADC_IsInternalRegulatorEnabled>
10001fda:	4603      	mov	r3, r0
10001fdc:	2b00      	cmp	r3, #0
10001fde:	d10d      	bne.n	10001ffc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10001fe0:	687b      	ldr	r3, [r7, #4]
10001fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001fe4:	f043 0210 	orr.w	r2, r3, #16
10001fe8:	687b      	ldr	r3, [r7, #4]
10001fea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
10001fec:	687b      	ldr	r3, [r7, #4]
10001fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10001ff0:	f043 0201 	orr.w	r2, r3, #1
10001ff4:	687b      	ldr	r3, [r7, #4]
10001ff6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
10001ff8:	2301      	movs	r3, #1
10001ffa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
10001ffc:	687b      	ldr	r3, [r7, #4]
10001ffe:	681b      	ldr	r3, [r3, #0]
10002000:	4618      	mov	r0, r3
10002002:	f7ff ff77 	bl	10001ef4 <LL_ADC_REG_IsConversionOngoing>
10002006:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
10002008:	687b      	ldr	r3, [r7, #4]
1000200a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000200c:	f003 0310 	and.w	r3, r3, #16
10002010:	2b00      	cmp	r3, #0
10002012:	f040 80d4 	bne.w	100021be <HAL_ADC_Init+0x27e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
10002016:	697b      	ldr	r3, [r7, #20]
10002018:	2b00      	cmp	r3, #0
1000201a:	f040 80d0 	bne.w	100021be <HAL_ADC_Init+0x27e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
1000201e:	687b      	ldr	r3, [r7, #4]
10002020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002022:	f423 7381 	bic.w	r3, r3, #258	; 0x102
10002026:	f043 0202 	orr.w	r2, r3, #2
1000202a:	687b      	ldr	r3, [r7, #4]
1000202c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
1000202e:	687b      	ldr	r3, [r7, #4]
10002030:	681b      	ldr	r3, [r3, #0]
10002032:	4618      	mov	r0, r3
10002034:	f7ff ff24 	bl	10001e80 <LL_ADC_IsEnabled>
10002038:	4603      	mov	r3, r0
1000203a:	2b00      	cmp	r3, #0
1000203c:	d110      	bne.n	10002060 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
1000203e:	4868      	ldr	r0, [pc, #416]	; (100021e0 <HAL_ADC_Init+0x2a0>)
10002040:	f7ff ff1e 	bl	10001e80 <LL_ADC_IsEnabled>
10002044:	4604      	mov	r4, r0
10002046:	4867      	ldr	r0, [pc, #412]	; (100021e4 <HAL_ADC_Init+0x2a4>)
10002048:	f7ff ff1a 	bl	10001e80 <LL_ADC_IsEnabled>
1000204c:	4603      	mov	r3, r0
1000204e:	4323      	orrs	r3, r4
10002050:	2b00      	cmp	r3, #0
10002052:	d105      	bne.n	10002060 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
10002054:	687b      	ldr	r3, [r7, #4]
10002056:	685b      	ldr	r3, [r3, #4]
10002058:	4619      	mov	r1, r3
1000205a:	4863      	ldr	r0, [pc, #396]	; (100021e8 <HAL_ADC_Init+0x2a8>)
1000205c:	f7ff fd58 	bl	10001b10 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
10002060:	687b      	ldr	r3, [r7, #4]
10002062:	7d5b      	ldrb	r3, [r3, #21]
10002064:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
10002066:	687b      	ldr	r3, [r7, #4]
10002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
1000206a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
1000206c:	687b      	ldr	r3, [r7, #4]
1000206e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                     |
10002070:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
10002072:	687b      	ldr	r3, [r7, #4]
10002074:	7f1b      	ldrb	r3, [r3, #28]
10002076:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
10002078:	4313      	orrs	r3, r2
1000207a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
1000207c:	687b      	ldr	r3, [r7, #4]
1000207e:	7f1b      	ldrb	r3, [r3, #28]
10002080:	2b01      	cmp	r3, #1
10002082:	d106      	bne.n	10002092 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
10002084:	687b      	ldr	r3, [r7, #4]
10002086:	6a1b      	ldr	r3, [r3, #32]
10002088:	3b01      	subs	r3, #1
1000208a:	045b      	lsls	r3, r3, #17
1000208c:	69ba      	ldr	r2, [r7, #24]
1000208e:	4313      	orrs	r3, r2
10002090:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
10002092:	687b      	ldr	r3, [r7, #4]
10002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002096:	2b00      	cmp	r3, #0
10002098:	d009      	beq.n	100020ae <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
1000209a:	687b      	ldr	r3, [r7, #4]
1000209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000209e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
100020a2:	687b      	ldr	r3, [r7, #4]
100020a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100020a6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
100020a8:	69ba      	ldr	r2, [r7, #24]
100020aa:	4313      	orrs	r3, r2
100020ac:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
100020ae:	687b      	ldr	r3, [r7, #4]
100020b0:	681b      	ldr	r3, [r3, #0]
100020b2:	68da      	ldr	r2, [r3, #12]
100020b4:	4b4d      	ldr	r3, [pc, #308]	; (100021ec <HAL_ADC_Init+0x2ac>)
100020b6:	4013      	ands	r3, r2
100020b8:	687a      	ldr	r2, [r7, #4]
100020ba:	6812      	ldr	r2, [r2, #0]
100020bc:	69b9      	ldr	r1, [r7, #24]
100020be:	430b      	orrs	r3, r1
100020c0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
100020c2:	687b      	ldr	r3, [r7, #4]
100020c4:	681b      	ldr	r3, [r3, #0]
100020c6:	4618      	mov	r0, r3
100020c8:	f7ff ff14 	bl	10001ef4 <LL_ADC_REG_IsConversionOngoing>
100020cc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
100020ce:	687b      	ldr	r3, [r7, #4]
100020d0:	681b      	ldr	r3, [r3, #0]
100020d2:	4618      	mov	r0, r3
100020d4:	f7ff ff21 	bl	10001f1a <LL_ADC_INJ_IsConversionOngoing>
100020d8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
100020da:	693b      	ldr	r3, [r7, #16]
100020dc:	2b00      	cmp	r3, #0
100020de:	d14c      	bne.n	1000217a <HAL_ADC_Init+0x23a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
100020e0:	68fb      	ldr	r3, [r7, #12]
100020e2:	2b00      	cmp	r3, #0
100020e4:	d149      	bne.n	1000217a <HAL_ADC_Init+0x23a>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
100020e6:	687b      	ldr	r3, [r7, #4]
100020e8:	7d1b      	ldrb	r3, [r3, #20]
100020ea:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
100020ec:	687b      	ldr	r3, [r7, #4]
100020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
100020f0:	4313      	orrs	r3, r2
100020f2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
100020f4:	687b      	ldr	r3, [r7, #4]
100020f6:	681b      	ldr	r3, [r3, #0]
100020f8:	68db      	ldr	r3, [r3, #12]
100020fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
100020fe:	f023 0303 	bic.w	r3, r3, #3
10002102:	687a      	ldr	r2, [r7, #4]
10002104:	6812      	ldr	r2, [r2, #0]
10002106:	69b9      	ldr	r1, [r7, #24]
10002108:	430b      	orrs	r3, r1
1000210a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
1000210c:	687b      	ldr	r3, [r7, #4]
1000210e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
10002112:	2b01      	cmp	r3, #1
10002114:	d11b      	bne.n	1000214e <HAL_ADC_Init+0x20e>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
10002116:	687b      	ldr	r3, [r7, #4]
10002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000211a:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
1000211c:	687b      	ldr	r3, [r7, #4]
1000211e:	681b      	ldr	r3, [r3, #0]
10002120:	691a      	ldr	r2, [r3, #16]
10002122:	4b33      	ldr	r3, [pc, #204]	; (100021f0 <HAL_ADC_Init+0x2b0>)
10002124:	4013      	ands	r3, r2
10002126:	687a      	ldr	r2, [r7, #4]
10002128:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
1000212a:	3a01      	subs	r2, #1
1000212c:	0411      	lsls	r1, r2, #16
1000212e:	687a      	ldr	r2, [r7, #4]
10002130:	6c12      	ldr	r2, [r2, #64]	; 0x40
10002132:	4311      	orrs	r1, r2
10002134:	687a      	ldr	r2, [r7, #4]
10002136:	6c52      	ldr	r2, [r2, #68]	; 0x44
10002138:	4311      	orrs	r1, r2
1000213a:	687a      	ldr	r2, [r7, #4]
1000213c:	6c92      	ldr	r2, [r2, #72]	; 0x48
1000213e:	430a      	orrs	r2, r1
10002140:	431a      	orrs	r2, r3
10002142:	687b      	ldr	r3, [r7, #4]
10002144:	681b      	ldr	r3, [r3, #0]
10002146:	f042 0201 	orr.w	r2, r2, #1
1000214a:	611a      	str	r2, [r3, #16]
1000214c:	e007      	b.n	1000215e <HAL_ADC_Init+0x21e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
1000214e:	687b      	ldr	r3, [r7, #4]
10002150:	681b      	ldr	r3, [r3, #0]
10002152:	691a      	ldr	r2, [r3, #16]
10002154:	687b      	ldr	r3, [r7, #4]
10002156:	681b      	ldr	r3, [r3, #0]
10002158:	f022 0201 	bic.w	r2, r2, #1
1000215c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
1000215e:	687b      	ldr	r3, [r7, #4]
10002160:	681b      	ldr	r3, [r3, #0]
10002162:	691b      	ldr	r3, [r3, #16]
10002164:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
10002168:	687b      	ldr	r3, [r7, #4]
1000216a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
1000216c:	687b      	ldr	r3, [r7, #4]
1000216e:	681b      	ldr	r3, [r3, #0]
10002170:	430a      	orrs	r2, r1
10002172:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
10002174:	6878      	ldr	r0, [r7, #4]
10002176:	f000 fdb9 	bl	10002cec <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
1000217a:	687b      	ldr	r3, [r7, #4]
1000217c:	68db      	ldr	r3, [r3, #12]
1000217e:	2b01      	cmp	r3, #1
10002180:	d10c      	bne.n	1000219c <HAL_ADC_Init+0x25c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
10002182:	687b      	ldr	r3, [r7, #4]
10002184:	681b      	ldr	r3, [r3, #0]
10002186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10002188:	f023 010f 	bic.w	r1, r3, #15
1000218c:	687b      	ldr	r3, [r7, #4]
1000218e:	699b      	ldr	r3, [r3, #24]
10002190:	1e5a      	subs	r2, r3, #1
10002192:	687b      	ldr	r3, [r7, #4]
10002194:	681b      	ldr	r3, [r3, #0]
10002196:	430a      	orrs	r2, r1
10002198:	631a      	str	r2, [r3, #48]	; 0x30
1000219a:	e007      	b.n	100021ac <HAL_ADC_Init+0x26c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
1000219c:	687b      	ldr	r3, [r7, #4]
1000219e:	681b      	ldr	r3, [r3, #0]
100021a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
100021a2:	687b      	ldr	r3, [r7, #4]
100021a4:	681b      	ldr	r3, [r3, #0]
100021a6:	f022 020f 	bic.w	r2, r2, #15
100021aa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
100021ac:	687b      	ldr	r3, [r7, #4]
100021ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100021b0:	f023 0303 	bic.w	r3, r3, #3
100021b4:	f043 0201 	orr.w	r2, r3, #1
100021b8:	687b      	ldr	r3, [r7, #4]
100021ba:	655a      	str	r2, [r3, #84]	; 0x54
100021bc:	e007      	b.n	100021ce <HAL_ADC_Init+0x28e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
100021be:	687b      	ldr	r3, [r7, #4]
100021c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100021c2:	f043 0210 	orr.w	r2, r3, #16
100021c6:	687b      	ldr	r3, [r7, #4]
100021c8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
100021ca:	2301      	movs	r3, #1
100021cc:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
100021ce:	7ffb      	ldrb	r3, [r7, #31]
}
100021d0:	4618      	mov	r0, r3
100021d2:	3724      	adds	r7, #36	; 0x24
100021d4:	46bd      	mov	sp, r7
100021d6:	bd90      	pop	{r4, r7, pc}
100021d8:	10020000 	.word	0x10020000
100021dc:	053e2d63 	.word	0x053e2d63
100021e0:	48003000 	.word	0x48003000
100021e4:	48003100 	.word	0x48003100
100021e8:	48003300 	.word	0x48003300
100021ec:	fff0c003 	.word	0xfff0c003
100021f0:	fc00f81e 	.word	0xfc00f81e

100021f4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
100021f4:	b580      	push	{r7, lr}
100021f6:	b086      	sub	sp, #24
100021f8:	af00      	add	r7, sp, #0
100021fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
100021fc:	4857      	ldr	r0, [pc, #348]	; (1000235c <HAL_ADC_Start+0x168>)
100021fe:	f7ff fdad 	bl	10001d5c <LL_ADC_GetMultimode>
10002202:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
10002204:	687b      	ldr	r3, [r7, #4]
10002206:	681b      	ldr	r3, [r3, #0]
10002208:	4618      	mov	r0, r3
1000220a:	f7ff fe73 	bl	10001ef4 <LL_ADC_REG_IsConversionOngoing>
1000220e:	4603      	mov	r3, r0
10002210:	2b00      	cmp	r3, #0
10002212:	f040 809c 	bne.w	1000234e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
10002216:	687b      	ldr	r3, [r7, #4]
10002218:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
1000221c:	2b01      	cmp	r3, #1
1000221e:	d101      	bne.n	10002224 <HAL_ADC_Start+0x30>
10002220:	2302      	movs	r3, #2
10002222:	e097      	b.n	10002354 <HAL_ADC_Start+0x160>
10002224:	687b      	ldr	r3, [r7, #4]
10002226:	2201      	movs	r2, #1
10002228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
1000222c:	6878      	ldr	r0, [r7, #4]
1000222e:	f000 fc81 	bl	10002b34 <ADC_Enable>
10002232:	4603      	mov	r3, r0
10002234:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
10002236:	7dfb      	ldrb	r3, [r7, #23]
10002238:	2b00      	cmp	r3, #0
1000223a:	f040 8083 	bne.w	10002344 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
1000223e:	687b      	ldr	r3, [r7, #4]
10002240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002242:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
10002246:	f023 0301 	bic.w	r3, r3, #1
1000224a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
1000224e:	687b      	ldr	r3, [r7, #4]
10002250:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
10002252:	687b      	ldr	r3, [r7, #4]
10002254:	681b      	ldr	r3, [r3, #0]
10002256:	4a42      	ldr	r2, [pc, #264]	; (10002360 <HAL_ADC_Start+0x16c>)
10002258:	4293      	cmp	r3, r2
1000225a:	d002      	beq.n	10002262 <HAL_ADC_Start+0x6e>
1000225c:	687b      	ldr	r3, [r7, #4]
1000225e:	681b      	ldr	r3, [r3, #0]
10002260:	e000      	b.n	10002264 <HAL_ADC_Start+0x70>
10002262:	4b40      	ldr	r3, [pc, #256]	; (10002364 <HAL_ADC_Start+0x170>)
10002264:	687a      	ldr	r2, [r7, #4]
10002266:	6812      	ldr	r2, [r2, #0]
10002268:	4293      	cmp	r3, r2
1000226a:	d002      	beq.n	10002272 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
1000226c:	693b      	ldr	r3, [r7, #16]
1000226e:	2b00      	cmp	r3, #0
10002270:	d105      	bne.n	1000227e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
10002272:	687b      	ldr	r3, [r7, #4]
10002274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002276:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
1000227a:	687b      	ldr	r3, [r7, #4]
1000227c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1000227e:	687b      	ldr	r3, [r7, #4]
10002280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002282:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
10002286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
1000228a:	d106      	bne.n	1000229a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
1000228c:	687b      	ldr	r3, [r7, #4]
1000228e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10002290:	f023 0206 	bic.w	r2, r3, #6
10002294:	687b      	ldr	r3, [r7, #4]
10002296:	659a      	str	r2, [r3, #88]	; 0x58
10002298:	e002      	b.n	100022a0 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
1000229a:	687b      	ldr	r3, [r7, #4]
1000229c:	2200      	movs	r2, #0
1000229e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
100022a0:	687b      	ldr	r3, [r7, #4]
100022a2:	681b      	ldr	r3, [r3, #0]
100022a4:	221c      	movs	r2, #28
100022a6:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
100022a8:	687b      	ldr	r3, [r7, #4]
100022aa:	2200      	movs	r2, #0
100022ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
100022b0:	687b      	ldr	r3, [r7, #4]
100022b2:	681b      	ldr	r3, [r3, #0]
100022b4:	4a2a      	ldr	r2, [pc, #168]	; (10002360 <HAL_ADC_Start+0x16c>)
100022b6:	4293      	cmp	r3, r2
100022b8:	d002      	beq.n	100022c0 <HAL_ADC_Start+0xcc>
100022ba:	687b      	ldr	r3, [r7, #4]
100022bc:	681b      	ldr	r3, [r3, #0]
100022be:	e000      	b.n	100022c2 <HAL_ADC_Start+0xce>
100022c0:	4b28      	ldr	r3, [pc, #160]	; (10002364 <HAL_ADC_Start+0x170>)
100022c2:	687a      	ldr	r2, [r7, #4]
100022c4:	6812      	ldr	r2, [r2, #0]
100022c6:	4293      	cmp	r3, r2
100022c8:	d008      	beq.n	100022dc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
100022ca:	693b      	ldr	r3, [r7, #16]
100022cc:	2b00      	cmp	r3, #0
100022ce:	d005      	beq.n	100022dc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
100022d0:	693b      	ldr	r3, [r7, #16]
100022d2:	2b05      	cmp	r3, #5
100022d4:	d002      	beq.n	100022dc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
100022d6:	693b      	ldr	r3, [r7, #16]
100022d8:	2b09      	cmp	r3, #9
100022da:	d114      	bne.n	10002306 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
100022dc:	687b      	ldr	r3, [r7, #4]
100022de:	681b      	ldr	r3, [r3, #0]
100022e0:	68db      	ldr	r3, [r3, #12]
100022e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
100022e6:	2b00      	cmp	r3, #0
100022e8:	d007      	beq.n	100022fa <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
100022ea:	687b      	ldr	r3, [r7, #4]
100022ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100022ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
100022f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
100022f6:	687b      	ldr	r3, [r7, #4]
100022f8:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
100022fa:	687b      	ldr	r3, [r7, #4]
100022fc:	681b      	ldr	r3, [r3, #0]
100022fe:	4618      	mov	r0, r3
10002300:	f7ff fde4 	bl	10001ecc <LL_ADC_REG_StartConversion>
10002304:	e025      	b.n	10002352 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
10002306:	687b      	ldr	r3, [r7, #4]
10002308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000230a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
1000230e:	687b      	ldr	r3, [r7, #4]
10002310:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
10002312:	687b      	ldr	r3, [r7, #4]
10002314:	681b      	ldr	r3, [r3, #0]
10002316:	4a12      	ldr	r2, [pc, #72]	; (10002360 <HAL_ADC_Start+0x16c>)
10002318:	4293      	cmp	r3, r2
1000231a:	d002      	beq.n	10002322 <HAL_ADC_Start+0x12e>
1000231c:	687b      	ldr	r3, [r7, #4]
1000231e:	681b      	ldr	r3, [r3, #0]
10002320:	e000      	b.n	10002324 <HAL_ADC_Start+0x130>
10002322:	4b10      	ldr	r3, [pc, #64]	; (10002364 <HAL_ADC_Start+0x170>)
10002324:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
10002326:	68fb      	ldr	r3, [r7, #12]
10002328:	68db      	ldr	r3, [r3, #12]
1000232a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
1000232e:	2b00      	cmp	r3, #0
10002330:	d00f      	beq.n	10002352 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
10002332:	687b      	ldr	r3, [r7, #4]
10002334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002336:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
1000233a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
1000233e:	687b      	ldr	r3, [r7, #4]
10002340:	655a      	str	r2, [r3, #84]	; 0x54
10002342:	e006      	b.n	10002352 <HAL_ADC_Start+0x15e>
      LL_ADC_REG_StartConversion(hadc->Instance);
#endif
    }
    else
    {
      __HAL_UNLOCK(hadc);
10002344:	687b      	ldr	r3, [r7, #4]
10002346:	2200      	movs	r2, #0
10002348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
1000234c:	e001      	b.n	10002352 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
1000234e:	2302      	movs	r3, #2
10002350:	75fb      	strb	r3, [r7, #23]
  }

  return tmp_hal_status;
10002352:	7dfb      	ldrb	r3, [r7, #23]
}
10002354:	4618      	mov	r0, r3
10002356:	3718      	adds	r7, #24
10002358:	46bd      	mov	sp, r7
1000235a:	bd80      	pop	{r7, pc}
1000235c:	48003300 	.word	0x48003300
10002360:	48003100 	.word	0x48003100
10002364:	48003000 	.word	0x48003000

10002368 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
10002368:	b580      	push	{r7, lr}
1000236a:	b088      	sub	sp, #32
1000236c:	af00      	add	r7, sp, #0
1000236e:	6078      	str	r0, [r7, #4]
10002370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
10002372:	4866      	ldr	r0, [pc, #408]	; (1000250c <HAL_ADC_PollForConversion+0x1a4>)
10002374:	f7ff fcf2 	bl	10001d5c <LL_ADC_GetMultimode>
10002378:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
1000237a:	687b      	ldr	r3, [r7, #4]
1000237c:	691b      	ldr	r3, [r3, #16]
1000237e:	2b08      	cmp	r3, #8
10002380:	d102      	bne.n	10002388 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
10002382:	2308      	movs	r3, #8
10002384:	61fb      	str	r3, [r7, #28]
10002386:	e02a      	b.n	100023de <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
10002388:	697b      	ldr	r3, [r7, #20]
1000238a:	2b00      	cmp	r3, #0
1000238c:	d005      	beq.n	1000239a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
1000238e:	697b      	ldr	r3, [r7, #20]
10002390:	2b05      	cmp	r3, #5
10002392:	d002      	beq.n	1000239a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
10002394:	697b      	ldr	r3, [r7, #20]
10002396:	2b09      	cmp	r3, #9
10002398:	d111      	bne.n	100023be <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
1000239a:	687b      	ldr	r3, [r7, #4]
1000239c:	681b      	ldr	r3, [r3, #0]
1000239e:	68db      	ldr	r3, [r3, #12]
100023a0:	f003 0301 	and.w	r3, r3, #1
100023a4:	2b00      	cmp	r3, #0
100023a6:	d007      	beq.n	100023b8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
100023a8:	687b      	ldr	r3, [r7, #4]
100023aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100023ac:	f043 0220 	orr.w	r2, r3, #32
100023b0:	687b      	ldr	r3, [r7, #4]
100023b2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
100023b4:	2301      	movs	r3, #1
100023b6:	e0a4      	b.n	10002502 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
100023b8:	2304      	movs	r3, #4
100023ba:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
100023bc:	e00f      	b.n	100023de <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
100023be:	4853      	ldr	r0, [pc, #332]	; (1000250c <HAL_ADC_PollForConversion+0x1a4>)
100023c0:	f7ff fcda 	bl	10001d78 <LL_ADC_GetMultiDMATransfer>
100023c4:	4603      	mov	r3, r0
100023c6:	2b00      	cmp	r3, #0
100023c8:	d007      	beq.n	100023da <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
100023ca:	687b      	ldr	r3, [r7, #4]
100023cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100023ce:	f043 0220 	orr.w	r2, r3, #32
100023d2:	687b      	ldr	r3, [r7, #4]
100023d4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
100023d6:	2301      	movs	r3, #1
100023d8:	e093      	b.n	10002502 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
100023da:	2304      	movs	r3, #4
100023dc:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
100023de:	f7ff fb19 	bl	10001a14 <HAL_GetTick>
100023e2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
100023e4:	e021      	b.n	1000242a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
100023e6:	683b      	ldr	r3, [r7, #0]
100023e8:	f1b3 3fff 	cmp.w	r3, #4294967295
100023ec:	d01d      	beq.n	1000242a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
100023ee:	f7ff fb11 	bl	10001a14 <HAL_GetTick>
100023f2:	4602      	mov	r2, r0
100023f4:	693b      	ldr	r3, [r7, #16]
100023f6:	1ad3      	subs	r3, r2, r3
100023f8:	683a      	ldr	r2, [r7, #0]
100023fa:	429a      	cmp	r2, r3
100023fc:	d302      	bcc.n	10002404 <HAL_ADC_PollForConversion+0x9c>
100023fe:	683b      	ldr	r3, [r7, #0]
10002400:	2b00      	cmp	r3, #0
10002402:	d112      	bne.n	1000242a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
10002404:	687b      	ldr	r3, [r7, #4]
10002406:	681b      	ldr	r3, [r3, #0]
10002408:	681a      	ldr	r2, [r3, #0]
1000240a:	69fb      	ldr	r3, [r7, #28]
1000240c:	4013      	ands	r3, r2
1000240e:	2b00      	cmp	r3, #0
10002410:	d10b      	bne.n	1000242a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
10002412:	687b      	ldr	r3, [r7, #4]
10002414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002416:	f043 0204 	orr.w	r2, r3, #4
1000241a:	687b      	ldr	r3, [r7, #4]
1000241c:	655a      	str	r2, [r3, #84]	; 0x54

          __HAL_UNLOCK(hadc);
1000241e:	687b      	ldr	r3, [r7, #4]
10002420:	2200      	movs	r2, #0
10002422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
10002426:	2303      	movs	r3, #3
10002428:	e06b      	b.n	10002502 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
1000242a:	687b      	ldr	r3, [r7, #4]
1000242c:	681b      	ldr	r3, [r3, #0]
1000242e:	681a      	ldr	r2, [r3, #0]
10002430:	69fb      	ldr	r3, [r7, #28]
10002432:	4013      	ands	r3, r2
10002434:	2b00      	cmp	r3, #0
10002436:	d0d6      	beq.n	100023e6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
10002438:	687b      	ldr	r3, [r7, #4]
1000243a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000243c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
10002440:	687b      	ldr	r3, [r7, #4]
10002442:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
10002444:	687b      	ldr	r3, [r7, #4]
10002446:	681b      	ldr	r3, [r3, #0]
10002448:	4618      	mov	r0, r3
1000244a:	f7ff fbf9 	bl	10001c40 <LL_ADC_REG_IsTriggerSourceSWStart>
1000244e:	4603      	mov	r3, r0
10002450:	2b00      	cmp	r3, #0
10002452:	d01c      	beq.n	1000248e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
10002454:	687b      	ldr	r3, [r7, #4]
10002456:	7d5b      	ldrb	r3, [r3, #21]
10002458:	2b00      	cmp	r3, #0
1000245a:	d118      	bne.n	1000248e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
1000245c:	687b      	ldr	r3, [r7, #4]
1000245e:	681b      	ldr	r3, [r3, #0]
10002460:	681b      	ldr	r3, [r3, #0]
10002462:	f003 0308 	and.w	r3, r3, #8
10002466:	2b08      	cmp	r3, #8
10002468:	d111      	bne.n	1000248e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
1000246a:	687b      	ldr	r3, [r7, #4]
1000246c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000246e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
10002472:	687b      	ldr	r3, [r7, #4]
10002474:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
10002476:	687b      	ldr	r3, [r7, #4]
10002478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000247a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
1000247e:	2b00      	cmp	r3, #0
10002480:	d105      	bne.n	1000248e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
10002482:	687b      	ldr	r3, [r7, #4]
10002484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002486:	f043 0201 	orr.w	r2, r3, #1
1000248a:	687b      	ldr	r3, [r7, #4]
1000248c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
1000248e:	687b      	ldr	r3, [r7, #4]
10002490:	681b      	ldr	r3, [r3, #0]
10002492:	4a1f      	ldr	r2, [pc, #124]	; (10002510 <HAL_ADC_PollForConversion+0x1a8>)
10002494:	4293      	cmp	r3, r2
10002496:	d002      	beq.n	1000249e <HAL_ADC_PollForConversion+0x136>
10002498:	687b      	ldr	r3, [r7, #4]
1000249a:	681b      	ldr	r3, [r3, #0]
1000249c:	e000      	b.n	100024a0 <HAL_ADC_PollForConversion+0x138>
1000249e:	4b1d      	ldr	r3, [pc, #116]	; (10002514 <HAL_ADC_PollForConversion+0x1ac>)
100024a0:	687a      	ldr	r2, [r7, #4]
100024a2:	6812      	ldr	r2, [r2, #0]
100024a4:	4293      	cmp	r3, r2
100024a6:	d008      	beq.n	100024ba <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
100024a8:	697b      	ldr	r3, [r7, #20]
100024aa:	2b00      	cmp	r3, #0
100024ac:	d005      	beq.n	100024ba <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
100024ae:	697b      	ldr	r3, [r7, #20]
100024b0:	2b05      	cmp	r3, #5
100024b2:	d002      	beq.n	100024ba <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
100024b4:	697b      	ldr	r3, [r7, #20]
100024b6:	2b09      	cmp	r3, #9
100024b8:	d104      	bne.n	100024c4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
100024ba:	687b      	ldr	r3, [r7, #4]
100024bc:	681b      	ldr	r3, [r3, #0]
100024be:	68db      	ldr	r3, [r3, #12]
100024c0:	61bb      	str	r3, [r7, #24]
100024c2:	e00c      	b.n	100024de <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
100024c4:	687b      	ldr	r3, [r7, #4]
100024c6:	681b      	ldr	r3, [r3, #0]
100024c8:	4a11      	ldr	r2, [pc, #68]	; (10002510 <HAL_ADC_PollForConversion+0x1a8>)
100024ca:	4293      	cmp	r3, r2
100024cc:	d002      	beq.n	100024d4 <HAL_ADC_PollForConversion+0x16c>
100024ce:	687b      	ldr	r3, [r7, #4]
100024d0:	681b      	ldr	r3, [r3, #0]
100024d2:	e000      	b.n	100024d6 <HAL_ADC_PollForConversion+0x16e>
100024d4:	4b0f      	ldr	r3, [pc, #60]	; (10002514 <HAL_ADC_PollForConversion+0x1ac>)
100024d6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
100024d8:	68fb      	ldr	r3, [r7, #12]
100024da:	68db      	ldr	r3, [r3, #12]
100024dc:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
100024de:	69fb      	ldr	r3, [r7, #28]
100024e0:	2b08      	cmp	r3, #8
100024e2:	d104      	bne.n	100024ee <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
100024e4:	687b      	ldr	r3, [r7, #4]
100024e6:	681b      	ldr	r3, [r3, #0]
100024e8:	2208      	movs	r2, #8
100024ea:	601a      	str	r2, [r3, #0]
100024ec:	e008      	b.n	10002500 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
100024ee:	69bb      	ldr	r3, [r7, #24]
100024f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
100024f4:	2b00      	cmp	r3, #0
100024f6:	d103      	bne.n	10002500 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
100024f8:	687b      	ldr	r3, [r7, #4]
100024fa:	681b      	ldr	r3, [r3, #0]
100024fc:	220c      	movs	r2, #12
100024fe:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
10002500:	2300      	movs	r3, #0
}
10002502:	4618      	mov	r0, r3
10002504:	3720      	adds	r7, #32
10002506:	46bd      	mov	sp, r7
10002508:	bd80      	pop	{r7, pc}
1000250a:	bf00      	nop
1000250c:	48003300 	.word	0x48003300
10002510:	48003100 	.word	0x48003100
10002514:	48003000 	.word	0x48003000

10002518 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
10002518:	b480      	push	{r7}
1000251a:	b083      	sub	sp, #12
1000251c:	af00      	add	r7, sp, #0
1000251e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
10002520:	687b      	ldr	r3, [r7, #4]
10002522:	681b      	ldr	r3, [r3, #0]
10002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
10002526:	4618      	mov	r0, r3
10002528:	370c      	adds	r7, #12
1000252a:	46bd      	mov	sp, r7
1000252c:	f85d 7b04 	ldr.w	r7, [sp], #4
10002530:	4770      	bx	lr
	...

10002534 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
10002534:	b590      	push	{r4, r7, lr}
10002536:	b0a1      	sub	sp, #132	; 0x84
10002538:	af00      	add	r7, sp, #0
1000253a:	6078      	str	r0, [r7, #4]
1000253c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1000253e:	2300      	movs	r3, #0
10002540:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
10002544:	2300      	movs	r3, #0
10002546:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((pConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (pConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
10002548:	683b      	ldr	r3, [r7, #0]
1000254a:	68db      	ldr	r3, [r3, #12]
1000254c:	4a9a      	ldr	r2, [pc, #616]	; (100027b8 <HAL_ADC_ConfigChannel+0x284>)
1000254e:	4293      	cmp	r3, r2
      assert_param(IS_ADC2_DIFF_CHANNEL(pConfig->Channel));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
10002550:	687b      	ldr	r3, [r7, #4]
10002552:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
10002556:	2b01      	cmp	r3, #1
10002558:	d101      	bne.n	1000255e <HAL_ADC_ConfigChannel+0x2a>
1000255a:	2302      	movs	r3, #2
1000255c:	e2d4      	b.n	10002b08 <HAL_ADC_ConfigChannel+0x5d4>
1000255e:	687b      	ldr	r3, [r7, #4]
10002560:	2201      	movs	r2, #1
10002562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
10002566:	687b      	ldr	r3, [r7, #4]
10002568:	681b      	ldr	r3, [r3, #0]
1000256a:	4618      	mov	r0, r3
1000256c:	f7ff fcc2 	bl	10001ef4 <LL_ADC_REG_IsConversionOngoing>
10002570:	4603      	mov	r3, r0
10002572:	2b00      	cmp	r3, #0
10002574:	f040 82b9 	bne.w	10002aea <HAL_ADC_ConfigChannel+0x5b6>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
10002578:	683b      	ldr	r3, [r7, #0]
1000257a:	681b      	ldr	r3, [r3, #0]
1000257c:	f3c3 0313 	ubfx	r3, r3, #0, #20
10002580:	2b00      	cmp	r3, #0
10002582:	d108      	bne.n	10002596 <HAL_ADC_ConfigChannel+0x62>
10002584:	683b      	ldr	r3, [r7, #0]
10002586:	681b      	ldr	r3, [r3, #0]
10002588:	0e9b      	lsrs	r3, r3, #26
1000258a:	f003 031f 	and.w	r3, r3, #31
1000258e:	2201      	movs	r2, #1
10002590:	fa02 f303 	lsl.w	r3, r2, r3
10002594:	e016      	b.n	100025c4 <HAL_ADC_ConfigChannel+0x90>
10002596:	683b      	ldr	r3, [r7, #0]
10002598:	681b      	ldr	r3, [r3, #0]
1000259a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
1000259c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
1000259e:	fa93 f3a3 	rbit	r3, r3
100025a2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
100025a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
100025a6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
100025a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
100025aa:	2b00      	cmp	r3, #0
100025ac:	d101      	bne.n	100025b2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
100025ae:	2320      	movs	r3, #32
100025b0:	e003      	b.n	100025ba <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
100025b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
100025b4:	fab3 f383 	clz	r3, r3
100025b8:	b2db      	uxtb	r3, r3
100025ba:	f003 031f 	and.w	r3, r3, #31
100025be:	2201      	movs	r2, #1
100025c0:	fa02 f303 	lsl.w	r3, r2, r3
100025c4:	687a      	ldr	r2, [r7, #4]
100025c6:	6812      	ldr	r2, [r2, #0]
100025c8:	69d1      	ldr	r1, [r2, #28]
100025ca:	687a      	ldr	r2, [r7, #4]
100025cc:	6812      	ldr	r2, [r2, #0]
100025ce:	430b      	orrs	r3, r1
100025d0:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
100025d2:	687b      	ldr	r3, [r7, #4]
100025d4:	6818      	ldr	r0, [r3, #0]
100025d6:	683b      	ldr	r3, [r7, #0]
100025d8:	6859      	ldr	r1, [r3, #4]
100025da:	683b      	ldr	r3, [r7, #0]
100025dc:	681b      	ldr	r3, [r3, #0]
100025de:	461a      	mov	r2, r3
100025e0:	f7ff fb41 	bl	10001c66 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
100025e4:	687b      	ldr	r3, [r7, #4]
100025e6:	681b      	ldr	r3, [r3, #0]
100025e8:	4618      	mov	r0, r3
100025ea:	f7ff fc83 	bl	10001ef4 <LL_ADC_REG_IsConversionOngoing>
100025ee:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
100025f0:	687b      	ldr	r3, [r7, #4]
100025f2:	681b      	ldr	r3, [r3, #0]
100025f4:	4618      	mov	r0, r3
100025f6:	f7ff fc90 	bl	10001f1a <LL_ADC_INJ_IsConversionOngoing>
100025fa:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
100025fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
100025fe:	2b00      	cmp	r3, #0
10002600:	f040 80a0 	bne.w	10002744 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
10002604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
10002606:	2b00      	cmp	r3, #0
10002608:	f040 809c 	bne.w	10002744 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
1000260c:	687b      	ldr	r3, [r7, #4]
1000260e:	6818      	ldr	r0, [r3, #0]
10002610:	683b      	ldr	r3, [r7, #0]
10002612:	6819      	ldr	r1, [r3, #0]
10002614:	683b      	ldr	r3, [r7, #0]
10002616:	689b      	ldr	r3, [r3, #8]
10002618:	461a      	mov	r2, r3
1000261a:	f7ff fb50 	bl	10001cbe <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
1000261e:	687b      	ldr	r3, [r7, #4]
10002620:	681b      	ldr	r3, [r3, #0]
10002622:	68db      	ldr	r3, [r3, #12]
10002624:	f003 0310 	and.w	r3, r3, #16
10002628:	2b00      	cmp	r3, #0
1000262a:	d10b      	bne.n	10002644 <HAL_ADC_ConfigChannel+0x110>
1000262c:	683b      	ldr	r3, [r7, #0]
1000262e:	695a      	ldr	r2, [r3, #20]
10002630:	687b      	ldr	r3, [r7, #4]
10002632:	681b      	ldr	r3, [r3, #0]
10002634:	68db      	ldr	r3, [r3, #12]
10002636:	089b      	lsrs	r3, r3, #2
10002638:	f003 0307 	and.w	r3, r3, #7
1000263c:	005b      	lsls	r3, r3, #1
1000263e:	fa02 f303 	lsl.w	r3, r2, r3
10002642:	e00a      	b.n	1000265a <HAL_ADC_ConfigChannel+0x126>
10002644:	683b      	ldr	r3, [r7, #0]
10002646:	695a      	ldr	r2, [r3, #20]
10002648:	687b      	ldr	r3, [r7, #4]
1000264a:	681b      	ldr	r3, [r3, #0]
1000264c:	68db      	ldr	r3, [r3, #12]
1000264e:	089b      	lsrs	r3, r3, #2
10002650:	f003 0304 	and.w	r3, r3, #4
10002654:	005b      	lsls	r3, r3, #1
10002656:	fa02 f303 	lsl.w	r3, r2, r3
1000265a:	673b      	str	r3, [r7, #112]	; 0x70

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
1000265c:	683b      	ldr	r3, [r7, #0]
1000265e:	691b      	ldr	r3, [r3, #16]
10002660:	2b04      	cmp	r3, #4
10002662:	d027      	beq.n	100026b4 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
10002664:	687b      	ldr	r3, [r7, #4]
10002666:	6818      	ldr	r0, [r3, #0]
10002668:	683b      	ldr	r3, [r7, #0]
1000266a:	6919      	ldr	r1, [r3, #16]
1000266c:	683b      	ldr	r3, [r7, #0]
1000266e:	681a      	ldr	r2, [r3, #0]
10002670:	6f3b      	ldr	r3, [r7, #112]	; 0x70
10002672:	f7ff fa91 	bl	10001b98 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber, (pConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
10002676:	687b      	ldr	r3, [r7, #4]
10002678:	6818      	ldr	r0, [r3, #0]
1000267a:	683b      	ldr	r3, [r7, #0]
1000267c:	6919      	ldr	r1, [r3, #16]
1000267e:	683b      	ldr	r3, [r7, #0]
10002680:	7e5b      	ldrb	r3, [r3, #25]
10002682:	2b01      	cmp	r3, #1
10002684:	d102      	bne.n	1000268c <HAL_ADC_ConfigChannel+0x158>
10002686:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
1000268a:	e000      	b.n	1000268e <HAL_ADC_ConfigChannel+0x15a>
1000268c:	2300      	movs	r3, #0
1000268e:	461a      	mov	r2, r3
10002690:	f7ff fabb 	bl	10001c0a <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, pConfig->OffsetNumber, (pConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
10002694:	687b      	ldr	r3, [r7, #4]
10002696:	6818      	ldr	r0, [r3, #0]
10002698:	683b      	ldr	r3, [r7, #0]
1000269a:	6919      	ldr	r1, [r3, #16]
1000269c:	683b      	ldr	r3, [r7, #0]
1000269e:	7e1b      	ldrb	r3, [r3, #24]
100026a0:	2b01      	cmp	r3, #1
100026a2:	d102      	bne.n	100026aa <HAL_ADC_ConfigChannel+0x176>
100026a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
100026a8:	e000      	b.n	100026ac <HAL_ADC_ConfigChannel+0x178>
100026aa:	2300      	movs	r3, #0
100026ac:	461a      	mov	r2, r3
100026ae:	f7ff fa93 	bl	10001bd8 <LL_ADC_SetDataRightShift>
100026b2:	e047      	b.n	10002744 <HAL_ADC_ConfigChannel+0x210>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
100026b4:	687b      	ldr	r3, [r7, #4]
100026b6:	681b      	ldr	r3, [r3, #0]
100026b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
100026ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
100026be:	683b      	ldr	r3, [r7, #0]
100026c0:	681b      	ldr	r3, [r3, #0]
100026c2:	069b      	lsls	r3, r3, #26
100026c4:	429a      	cmp	r2, r3
100026c6:	d107      	bne.n	100026d8 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
100026c8:	687b      	ldr	r3, [r7, #4]
100026ca:	681b      	ldr	r3, [r3, #0]
100026cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
100026ce:	687b      	ldr	r3, [r7, #4]
100026d0:	681b      	ldr	r3, [r3, #0]
100026d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
100026d6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
100026d8:	687b      	ldr	r3, [r7, #4]
100026da:	681b      	ldr	r3, [r3, #0]
100026dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
100026de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
100026e2:	683b      	ldr	r3, [r7, #0]
100026e4:	681b      	ldr	r3, [r3, #0]
100026e6:	069b      	lsls	r3, r3, #26
100026e8:	429a      	cmp	r2, r3
100026ea:	d107      	bne.n	100026fc <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
100026ec:	687b      	ldr	r3, [r7, #4]
100026ee:	681b      	ldr	r3, [r3, #0]
100026f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
100026f2:	687b      	ldr	r3, [r7, #4]
100026f4:	681b      	ldr	r3, [r3, #0]
100026f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
100026fa:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
100026fc:	687b      	ldr	r3, [r7, #4]
100026fe:	681b      	ldr	r3, [r3, #0]
10002700:	6e9b      	ldr	r3, [r3, #104]	; 0x68
10002702:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
10002706:	683b      	ldr	r3, [r7, #0]
10002708:	681b      	ldr	r3, [r3, #0]
1000270a:	069b      	lsls	r3, r3, #26
1000270c:	429a      	cmp	r2, r3
1000270e:	d107      	bne.n	10002720 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
10002710:	687b      	ldr	r3, [r7, #4]
10002712:	681b      	ldr	r3, [r3, #0]
10002714:	6e9a      	ldr	r2, [r3, #104]	; 0x68
10002716:	687b      	ldr	r3, [r7, #4]
10002718:	681b      	ldr	r3, [r3, #0]
1000271a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
1000271e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
10002720:	687b      	ldr	r3, [r7, #4]
10002722:	681b      	ldr	r3, [r3, #0]
10002724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
10002726:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
1000272a:	683b      	ldr	r3, [r7, #0]
1000272c:	681b      	ldr	r3, [r3, #0]
1000272e:	069b      	lsls	r3, r3, #26
10002730:	429a      	cmp	r2, r3
10002732:	d107      	bne.n	10002744 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
10002734:	687b      	ldr	r3, [r7, #4]
10002736:	681b      	ldr	r3, [r3, #0]
10002738:	6eda      	ldr	r2, [r3, #108]	; 0x6c
1000273a:	687b      	ldr	r3, [r7, #4]
1000273c:	681b      	ldr	r3, [r3, #0]
1000273e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
10002742:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor/VddCore        */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
10002744:	687b      	ldr	r3, [r7, #4]
10002746:	681b      	ldr	r3, [r3, #0]
10002748:	4618      	mov	r0, r3
1000274a:	f7ff fb99 	bl	10001e80 <LL_ADC_IsEnabled>
1000274e:	4603      	mov	r3, r0
10002750:	2b00      	cmp	r3, #0
10002752:	f040 81d3 	bne.w	10002afc <HAL_ADC_ConfigChannel+0x5c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
10002756:	687b      	ldr	r3, [r7, #4]
10002758:	6818      	ldr	r0, [r3, #0]
1000275a:	683b      	ldr	r3, [r7, #0]
1000275c:	6819      	ldr	r1, [r3, #0]
1000275e:	683b      	ldr	r3, [r7, #0]
10002760:	68db      	ldr	r3, [r3, #12]
10002762:	461a      	mov	r2, r3
10002764:	f7ff fad6 	bl	10001d14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
10002768:	683b      	ldr	r3, [r7, #0]
1000276a:	68db      	ldr	r3, [r3, #12]
1000276c:	4a12      	ldr	r2, [pc, #72]	; (100027b8 <HAL_ADC_ConfigChannel+0x284>)
1000276e:	4293      	cmp	r3, r2
10002770:	f040 8130 	bne.w	100029d4 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
10002774:	687b      	ldr	r3, [r7, #4]
10002776:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) + 1UL) & 0x1FUL)),
10002778:	683b      	ldr	r3, [r7, #0]
1000277a:	681b      	ldr	r3, [r3, #0]
1000277c:	f3c3 0313 	ubfx	r3, r3, #0, #20
10002780:	2b00      	cmp	r3, #0
10002782:	d10b      	bne.n	1000279c <HAL_ADC_ConfigChannel+0x268>
10002784:	683b      	ldr	r3, [r7, #0]
10002786:	681b      	ldr	r3, [r3, #0]
10002788:	0e9b      	lsrs	r3, r3, #26
1000278a:	3301      	adds	r3, #1
1000278c:	f003 031f 	and.w	r3, r3, #31
10002790:	2b09      	cmp	r3, #9
10002792:	bf94      	ite	ls
10002794:	2301      	movls	r3, #1
10002796:	2300      	movhi	r3, #0
10002798:	b2db      	uxtb	r3, r3
1000279a:	e01b      	b.n	100027d4 <HAL_ADC_ConfigChannel+0x2a0>
1000279c:	683b      	ldr	r3, [r7, #0]
1000279e:	681b      	ldr	r3, [r3, #0]
100027a0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
100027a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
100027a4:	fa93 f3a3 	rbit	r3, r3
100027a8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
100027aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
100027ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
100027ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
100027b0:	2b00      	cmp	r3, #0
100027b2:	d103      	bne.n	100027bc <HAL_ADC_ConfigChannel+0x288>
    return 32U;
100027b4:	2320      	movs	r3, #32
100027b6:	e005      	b.n	100027c4 <HAL_ADC_ConfigChannel+0x290>
100027b8:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
100027bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
100027be:	fab3 f383 	clz	r3, r3
100027c2:	b2db      	uxtb	r3, r3
100027c4:	3301      	adds	r3, #1
100027c6:	f003 031f 	and.w	r3, r3, #31
100027ca:	2b09      	cmp	r3, #9
100027cc:	bf94      	ite	ls
100027ce:	2301      	movls	r3, #1
100027d0:	2300      	movhi	r3, #0
100027d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
100027d4:	2b00      	cmp	r3, #0
100027d6:	d079      	beq.n	100028cc <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) + 1UL) & 0x1FUL)),
100027d8:	683b      	ldr	r3, [r7, #0]
100027da:	681b      	ldr	r3, [r3, #0]
100027dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
100027e0:	2b00      	cmp	r3, #0
100027e2:	d107      	bne.n	100027f4 <HAL_ADC_ConfigChannel+0x2c0>
100027e4:	683b      	ldr	r3, [r7, #0]
100027e6:	681b      	ldr	r3, [r3, #0]
100027e8:	0e9b      	lsrs	r3, r3, #26
100027ea:	3301      	adds	r3, #1
100027ec:	069b      	lsls	r3, r3, #26
100027ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
100027f2:	e015      	b.n	10002820 <HAL_ADC_ConfigChannel+0x2ec>
100027f4:	683b      	ldr	r3, [r7, #0]
100027f6:	681b      	ldr	r3, [r3, #0]
100027f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
100027fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
100027fc:	fa93 f3a3 	rbit	r3, r3
10002800:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
10002802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10002804:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
10002806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
10002808:	2b00      	cmp	r3, #0
1000280a:	d101      	bne.n	10002810 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
1000280c:	2320      	movs	r3, #32
1000280e:	e003      	b.n	10002818 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
10002810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
10002812:	fab3 f383 	clz	r3, r3
10002816:	b2db      	uxtb	r3, r3
10002818:	3301      	adds	r3, #1
1000281a:	069b      	lsls	r3, r3, #26
1000281c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
10002820:	683b      	ldr	r3, [r7, #0]
10002822:	681b      	ldr	r3, [r3, #0]
10002824:	f3c3 0313 	ubfx	r3, r3, #0, #20
10002828:	2b00      	cmp	r3, #0
1000282a:	d109      	bne.n	10002840 <HAL_ADC_ConfigChannel+0x30c>
1000282c:	683b      	ldr	r3, [r7, #0]
1000282e:	681b      	ldr	r3, [r3, #0]
10002830:	0e9b      	lsrs	r3, r3, #26
10002832:	3301      	adds	r3, #1
10002834:	f003 031f 	and.w	r3, r3, #31
10002838:	2101      	movs	r1, #1
1000283a:	fa01 f303 	lsl.w	r3, r1, r3
1000283e:	e017      	b.n	10002870 <HAL_ADC_ConfigChannel+0x33c>
10002840:	683b      	ldr	r3, [r7, #0]
10002842:	681b      	ldr	r3, [r3, #0]
10002844:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
10002846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10002848:	fa93 f3a3 	rbit	r3, r3
1000284c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
1000284e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10002850:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
10002852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10002854:	2b00      	cmp	r3, #0
10002856:	d101      	bne.n	1000285c <HAL_ADC_ConfigChannel+0x328>
    return 32U;
10002858:	2320      	movs	r3, #32
1000285a:	e003      	b.n	10002864 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
1000285c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000285e:	fab3 f383 	clz	r3, r3
10002862:	b2db      	uxtb	r3, r3
10002864:	3301      	adds	r3, #1
10002866:	f003 031f 	and.w	r3, r3, #31
1000286a:	2101      	movs	r1, #1
1000286c:	fa01 f303 	lsl.w	r3, r1, r3
10002870:	ea42 0103 	orr.w	r1, r2, r3
10002874:	683b      	ldr	r3, [r7, #0]
10002876:	681b      	ldr	r3, [r3, #0]
10002878:	f3c3 0313 	ubfx	r3, r3, #0, #20
1000287c:	2b00      	cmp	r3, #0
1000287e:	d10a      	bne.n	10002896 <HAL_ADC_ConfigChannel+0x362>
10002880:	683b      	ldr	r3, [r7, #0]
10002882:	681b      	ldr	r3, [r3, #0]
10002884:	0e9b      	lsrs	r3, r3, #26
10002886:	3301      	adds	r3, #1
10002888:	f003 021f 	and.w	r2, r3, #31
1000288c:	4613      	mov	r3, r2
1000288e:	005b      	lsls	r3, r3, #1
10002890:	4413      	add	r3, r2
10002892:	051b      	lsls	r3, r3, #20
10002894:	e018      	b.n	100028c8 <HAL_ADC_ConfigChannel+0x394>
10002896:	683b      	ldr	r3, [r7, #0]
10002898:	681b      	ldr	r3, [r3, #0]
1000289a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
1000289c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000289e:	fa93 f3a3 	rbit	r3, r3
100028a2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
100028a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100028a6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
100028a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
100028aa:	2b00      	cmp	r3, #0
100028ac:	d101      	bne.n	100028b2 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
100028ae:	2320      	movs	r3, #32
100028b0:	e003      	b.n	100028ba <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
100028b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
100028b4:	fab3 f383 	clz	r3, r3
100028b8:	b2db      	uxtb	r3, r3
100028ba:	3301      	adds	r3, #1
100028bc:	f003 021f 	and.w	r2, r3, #31
100028c0:	4613      	mov	r3, r2
100028c2:	005b      	lsls	r3, r3, #1
100028c4:	4413      	add	r3, r2
100028c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
100028c8:	430b      	orrs	r3, r1
100028ca:	e07e      	b.n	100029ca <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) + 1UL) & 0x1FUL)),
100028cc:	683b      	ldr	r3, [r7, #0]
100028ce:	681b      	ldr	r3, [r3, #0]
100028d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
100028d4:	2b00      	cmp	r3, #0
100028d6:	d107      	bne.n	100028e8 <HAL_ADC_ConfigChannel+0x3b4>
100028d8:	683b      	ldr	r3, [r7, #0]
100028da:	681b      	ldr	r3, [r3, #0]
100028dc:	0e9b      	lsrs	r3, r3, #26
100028de:	3301      	adds	r3, #1
100028e0:	069b      	lsls	r3, r3, #26
100028e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
100028e6:	e015      	b.n	10002914 <HAL_ADC_ConfigChannel+0x3e0>
100028e8:	683b      	ldr	r3, [r7, #0]
100028ea:	681b      	ldr	r3, [r3, #0]
100028ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
100028ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
100028f0:	fa93 f3a3 	rbit	r3, r3
100028f4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
100028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100028f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
100028fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100028fc:	2b00      	cmp	r3, #0
100028fe:	d101      	bne.n	10002904 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
10002900:	2320      	movs	r3, #32
10002902:	e003      	b.n	1000290c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
10002904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10002906:	fab3 f383 	clz	r3, r3
1000290a:	b2db      	uxtb	r3, r3
1000290c:	3301      	adds	r3, #1
1000290e:	069b      	lsls	r3, r3, #26
10002910:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
10002914:	683b      	ldr	r3, [r7, #0]
10002916:	681b      	ldr	r3, [r3, #0]
10002918:	f3c3 0313 	ubfx	r3, r3, #0, #20
1000291c:	2b00      	cmp	r3, #0
1000291e:	d109      	bne.n	10002934 <HAL_ADC_ConfigChannel+0x400>
10002920:	683b      	ldr	r3, [r7, #0]
10002922:	681b      	ldr	r3, [r3, #0]
10002924:	0e9b      	lsrs	r3, r3, #26
10002926:	3301      	adds	r3, #1
10002928:	f003 031f 	and.w	r3, r3, #31
1000292c:	2101      	movs	r1, #1
1000292e:	fa01 f303 	lsl.w	r3, r1, r3
10002932:	e017      	b.n	10002964 <HAL_ADC_ConfigChannel+0x430>
10002934:	683b      	ldr	r3, [r7, #0]
10002936:	681b      	ldr	r3, [r3, #0]
10002938:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
1000293a:	69fb      	ldr	r3, [r7, #28]
1000293c:	fa93 f3a3 	rbit	r3, r3
10002940:	61bb      	str	r3, [r7, #24]
  return result;
10002942:	69bb      	ldr	r3, [r7, #24]
10002944:	623b      	str	r3, [r7, #32]
  if (value == 0U)
10002946:	6a3b      	ldr	r3, [r7, #32]
10002948:	2b00      	cmp	r3, #0
1000294a:	d101      	bne.n	10002950 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
1000294c:	2320      	movs	r3, #32
1000294e:	e003      	b.n	10002958 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
10002950:	6a3b      	ldr	r3, [r7, #32]
10002952:	fab3 f383 	clz	r3, r3
10002956:	b2db      	uxtb	r3, r3
10002958:	3301      	adds	r3, #1
1000295a:	f003 031f 	and.w	r3, r3, #31
1000295e:	2101      	movs	r1, #1
10002960:	fa01 f303 	lsl.w	r3, r1, r3
10002964:	ea42 0103 	orr.w	r1, r2, r3
10002968:	683b      	ldr	r3, [r7, #0]
1000296a:	681b      	ldr	r3, [r3, #0]
1000296c:	f3c3 0313 	ubfx	r3, r3, #0, #20
10002970:	2b00      	cmp	r3, #0
10002972:	d10d      	bne.n	10002990 <HAL_ADC_ConfigChannel+0x45c>
10002974:	683b      	ldr	r3, [r7, #0]
10002976:	681b      	ldr	r3, [r3, #0]
10002978:	0e9b      	lsrs	r3, r3, #26
1000297a:	3301      	adds	r3, #1
1000297c:	f003 021f 	and.w	r2, r3, #31
10002980:	4613      	mov	r3, r2
10002982:	005b      	lsls	r3, r3, #1
10002984:	4413      	add	r3, r2
10002986:	3b1e      	subs	r3, #30
10002988:	051b      	lsls	r3, r3, #20
1000298a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
1000298e:	e01b      	b.n	100029c8 <HAL_ADC_ConfigChannel+0x494>
10002990:	683b      	ldr	r3, [r7, #0]
10002992:	681b      	ldr	r3, [r3, #0]
10002994:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
10002996:	693b      	ldr	r3, [r7, #16]
10002998:	fa93 f3a3 	rbit	r3, r3
1000299c:	60fb      	str	r3, [r7, #12]
  return result;
1000299e:	68fb      	ldr	r3, [r7, #12]
100029a0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
100029a2:	697b      	ldr	r3, [r7, #20]
100029a4:	2b00      	cmp	r3, #0
100029a6:	d101      	bne.n	100029ac <HAL_ADC_ConfigChannel+0x478>
    return 32U;
100029a8:	2320      	movs	r3, #32
100029aa:	e003      	b.n	100029b4 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
100029ac:	697b      	ldr	r3, [r7, #20]
100029ae:	fab3 f383 	clz	r3, r3
100029b2:	b2db      	uxtb	r3, r3
100029b4:	3301      	adds	r3, #1
100029b6:	f003 021f 	and.w	r2, r3, #31
100029ba:	4613      	mov	r3, r2
100029bc:	005b      	lsls	r3, r3, #1
100029be:	4413      	add	r3, r2
100029c0:	3b1e      	subs	r3, #30
100029c2:	051b      	lsls	r3, r3, #20
100029c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
100029c8:	430b      	orrs	r3, r1
100029ca:	683a      	ldr	r2, [r7, #0]
100029cc:	6892      	ldr	r2, [r2, #8]
100029ce:	4619      	mov	r1, r3
100029d0:	f7ff f975 	bl	10001cbe <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
100029d4:	683b      	ldr	r3, [r7, #0]
100029d6:	681b      	ldr	r3, [r3, #0]
100029d8:	2b00      	cmp	r3, #0
100029da:	f280 808f 	bge.w	10002afc <HAL_ADC_ConfigChannel+0x5c8>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
100029de:	484c      	ldr	r0, [pc, #304]	; (10002b10 <HAL_ADC_ConfigChannel+0x5dc>)
100029e0:	f7ff f8cc 	bl	10001b7c <LL_ADC_GetCommonPathInternalCh>
100029e4:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
100029e6:	484b      	ldr	r0, [pc, #300]	; (10002b14 <HAL_ADC_ConfigChannel+0x5e0>)
100029e8:	f7ff fa4a 	bl	10001e80 <LL_ADC_IsEnabled>
100029ec:	4604      	mov	r4, r0
100029ee:	484a      	ldr	r0, [pc, #296]	; (10002b18 <HAL_ADC_ConfigChannel+0x5e4>)
100029f0:	f7ff fa46 	bl	10001e80 <LL_ADC_IsEnabled>
100029f4:	4603      	mov	r3, r0
100029f6:	4323      	orrs	r3, r4
100029f8:	2b00      	cmp	r3, #0
100029fa:	d16c      	bne.n	10002ad6 <HAL_ADC_ConfigChannel+0x5a2>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
100029fc:	683b      	ldr	r3, [r7, #0]
100029fe:	681b      	ldr	r3, [r3, #0]
10002a00:	4a46      	ldr	r2, [pc, #280]	; (10002b1c <HAL_ADC_ConfigChannel+0x5e8>)
10002a02:	4293      	cmp	r3, r2
10002a04:	d122      	bne.n	10002a4c <HAL_ADC_ConfigChannel+0x518>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
10002a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10002a08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
10002a0c:	2b00      	cmp	r3, #0
10002a0e:	d11d      	bne.n	10002a4c <HAL_ADC_ConfigChannel+0x518>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
10002a10:	687b      	ldr	r3, [r7, #4]
10002a12:	681b      	ldr	r3, [r3, #0]
10002a14:	4a40      	ldr	r2, [pc, #256]	; (10002b18 <HAL_ADC_ConfigChannel+0x5e4>)
10002a16:	4293      	cmp	r3, r2
10002a18:	d170      	bne.n	10002afc <HAL_ADC_ConfigChannel+0x5c8>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
10002a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10002a1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
10002a20:	4619      	mov	r1, r3
10002a22:	483b      	ldr	r0, [pc, #236]	; (10002b10 <HAL_ADC_ConfigChannel+0x5dc>)
10002a24:	f7ff f888 	bl	10001b38 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
10002a28:	4b3d      	ldr	r3, [pc, #244]	; (10002b20 <HAL_ADC_ConfigChannel+0x5ec>)
10002a2a:	681b      	ldr	r3, [r3, #0]
10002a2c:	099b      	lsrs	r3, r3, #6
10002a2e:	4a3d      	ldr	r2, [pc, #244]	; (10002b24 <HAL_ADC_ConfigChannel+0x5f0>)
10002a30:	fba2 2303 	umull	r2, r3, r2, r3
10002a34:	099b      	lsrs	r3, r3, #6
10002a36:	3301      	adds	r3, #1
10002a38:	005b      	lsls	r3, r3, #1
10002a3a:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
10002a3c:	e002      	b.n	10002a44 <HAL_ADC_ConfigChannel+0x510>
              {
                wait_loop_index--;
10002a3e:	68bb      	ldr	r3, [r7, #8]
10002a40:	3b01      	subs	r3, #1
10002a42:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
10002a44:	68bb      	ldr	r3, [r7, #8]
10002a46:	2b00      	cmp	r3, #0
10002a48:	d1f9      	bne.n	10002a3e <HAL_ADC_ConfigChannel+0x50a>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
10002a4a:	e057      	b.n	10002afc <HAL_ADC_ConfigChannel+0x5c8>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
10002a4c:	683b      	ldr	r3, [r7, #0]
10002a4e:	681b      	ldr	r3, [r3, #0]
10002a50:	4a35      	ldr	r2, [pc, #212]	; (10002b28 <HAL_ADC_ConfigChannel+0x5f4>)
10002a52:	4293      	cmp	r3, r2
10002a54:	d111      	bne.n	10002a7a <HAL_ADC_ConfigChannel+0x546>
10002a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10002a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
10002a5c:	2b00      	cmp	r3, #0
10002a5e:	d10c      	bne.n	10002a7a <HAL_ADC_ConfigChannel+0x546>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
10002a60:	687b      	ldr	r3, [r7, #4]
10002a62:	681b      	ldr	r3, [r3, #0]
10002a64:	4a2c      	ldr	r2, [pc, #176]	; (10002b18 <HAL_ADC_ConfigChannel+0x5e4>)
10002a66:	4293      	cmp	r3, r2
10002a68:	d148      	bne.n	10002afc <HAL_ADC_ConfigChannel+0x5c8>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
10002a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10002a6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
10002a70:	4619      	mov	r1, r3
10002a72:	4827      	ldr	r0, [pc, #156]	; (10002b10 <HAL_ADC_ConfigChannel+0x5dc>)
10002a74:	f7ff f860 	bl	10001b38 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
10002a78:	e040      	b.n	10002afc <HAL_ADC_ConfigChannel+0x5c8>
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
10002a7a:	683b      	ldr	r3, [r7, #0]
10002a7c:	681b      	ldr	r3, [r3, #0]
10002a7e:	4a2b      	ldr	r2, [pc, #172]	; (10002b2c <HAL_ADC_ConfigChannel+0x5f8>)
10002a80:	4293      	cmp	r3, r2
10002a82:	d111      	bne.n	10002aa8 <HAL_ADC_ConfigChannel+0x574>
10002a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10002a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
10002a8a:	2b00      	cmp	r3, #0
10002a8c:	d10c      	bne.n	10002aa8 <HAL_ADC_ConfigChannel+0x574>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
10002a8e:	687b      	ldr	r3, [r7, #4]
10002a90:	681b      	ldr	r3, [r3, #0]
10002a92:	4a21      	ldr	r2, [pc, #132]	; (10002b18 <HAL_ADC_ConfigChannel+0x5e4>)
10002a94:	4293      	cmp	r3, r2
10002a96:	d131      	bne.n	10002afc <HAL_ADC_ConfigChannel+0x5c8>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
10002a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10002a9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
10002a9e:	4619      	mov	r1, r3
10002aa0:	481b      	ldr	r0, [pc, #108]	; (10002b10 <HAL_ADC_ConfigChannel+0x5dc>)
10002aa2:	f7ff f849 	bl	10001b38 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_VREFINT_INSTANCE(hadc))
10002aa6:	e029      	b.n	10002afc <HAL_ADC_ConfigChannel+0x5c8>
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VDDCORE) == 0UL))
10002aa8:	683b      	ldr	r3, [r7, #0]
10002aaa:	681b      	ldr	r3, [r3, #0]
10002aac:	4a20      	ldr	r2, [pc, #128]	; (10002b30 <HAL_ADC_ConfigChannel+0x5fc>)
10002aae:	4293      	cmp	r3, r2
10002ab0:	d124      	bne.n	10002afc <HAL_ADC_ConfigChannel+0x5c8>
10002ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10002ab4:	f003 0301 	and.w	r3, r3, #1
10002ab8:	2b00      	cmp	r3, #0
10002aba:	d11f      	bne.n	10002afc <HAL_ADC_ConfigChannel+0x5c8>
          {
            if (ADC_VDDCORE_INSTANCE(hadc))
10002abc:	687b      	ldr	r3, [r7, #4]
10002abe:	681b      	ldr	r3, [r3, #0]
10002ac0:	4a15      	ldr	r2, [pc, #84]	; (10002b18 <HAL_ADC_ConfigChannel+0x5e4>)
10002ac2:	4293      	cmp	r3, r2
10002ac4:	d11a      	bne.n	10002afc <HAL_ADC_ConfigChannel+0x5c8>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VDDCORE | tmp_config_internal_channel);
10002ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10002ac8:	f043 0301 	orr.w	r3, r3, #1
10002acc:	4619      	mov	r1, r3
10002ace:	4810      	ldr	r0, [pc, #64]	; (10002b10 <HAL_ADC_ConfigChannel+0x5dc>)
10002ad0:	f7ff f832 	bl	10001b38 <LL_ADC_SetCommonPathInternalCh>
10002ad4:	e012      	b.n	10002afc <HAL_ADC_ConfigChannel+0x5c8>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
10002ad6:	687b      	ldr	r3, [r7, #4]
10002ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002ada:	f043 0220 	orr.w	r2, r3, #32
10002ade:	687b      	ldr	r3, [r7, #4]
10002ae0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
10002ae2:	2301      	movs	r3, #1
10002ae4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
10002ae8:	e008      	b.n	10002afc <HAL_ADC_ConfigChannel+0x5c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
10002aea:	687b      	ldr	r3, [r7, #4]
10002aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002aee:	f043 0220 	orr.w	r2, r3, #32
10002af2:	687b      	ldr	r3, [r7, #4]
10002af4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
10002af6:	2301      	movs	r3, #1
10002af8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  __HAL_UNLOCK(hadc);
10002afc:	687b      	ldr	r3, [r7, #4]
10002afe:	2200      	movs	r2, #0
10002b00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return tmp_hal_status;
10002b04:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
10002b08:	4618      	mov	r0, r3
10002b0a:	3784      	adds	r7, #132	; 0x84
10002b0c:	46bd      	mov	sp, r7
10002b0e:	bd90      	pop	{r4, r7, pc}
10002b10:	48003300 	.word	0x48003300
10002b14:	48003000 	.word	0x48003000
10002b18:	48003100 	.word	0x48003100
10002b1c:	b2601000 	.word	0xb2601000
10002b20:	10020000 	.word	0x10020000
10002b24:	053e2d63 	.word	0x053e2d63
10002b28:	bef08000 	.word	0xbef08000
10002b2c:	b6902000 	.word	0xb6902000
10002b30:	bac04000 	.word	0xbac04000

10002b34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
10002b34:	b580      	push	{r7, lr}
10002b36:	b084      	sub	sp, #16
10002b38:	af00      	add	r7, sp, #0
10002b3a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
10002b3c:	687b      	ldr	r3, [r7, #4]
10002b3e:	681b      	ldr	r3, [r3, #0]
10002b40:	4618      	mov	r0, r3
10002b42:	f7ff f99d 	bl	10001e80 <LL_ADC_IsEnabled>
10002b46:	4603      	mov	r3, r0
10002b48:	2b00      	cmp	r3, #0
10002b4a:	d161      	bne.n	10002c10 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
10002b4c:	687b      	ldr	r3, [r7, #4]
10002b4e:	681b      	ldr	r3, [r3, #0]
10002b50:	689a      	ldr	r2, [r3, #8]
10002b52:	4b32      	ldr	r3, [pc, #200]	; (10002c1c <ADC_Enable+0xe8>)
10002b54:	4013      	ands	r3, r2
10002b56:	2b00      	cmp	r3, #0
10002b58:	d00d      	beq.n	10002b76 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10002b5a:	687b      	ldr	r3, [r7, #4]
10002b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002b5e:	f043 0210 	orr.w	r2, r3, #16
10002b62:	687b      	ldr	r3, [r7, #4]
10002b64:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
10002b66:	687b      	ldr	r3, [r7, #4]
10002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10002b6a:	f043 0201 	orr.w	r2, r3, #1
10002b6e:	687b      	ldr	r3, [r7, #4]
10002b70:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
10002b72:	2301      	movs	r3, #1
10002b74:	e04d      	b.n	10002c12 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
10002b76:	687b      	ldr	r3, [r7, #4]
10002b78:	681b      	ldr	r3, [r3, #0]
10002b7a:	4618      	mov	r0, r3
10002b7c:	f7ff f958 	bl	10001e30 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
10002b80:	f7fe ff48 	bl	10001a14 <HAL_GetTick>
10002b84:	60f8      	str	r0, [r7, #12]

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
10002b86:	4826      	ldr	r0, [pc, #152]	; (10002c20 <ADC_Enable+0xec>)
10002b88:	f7ff f8e8 	bl	10001d5c <LL_ADC_GetMultimode>
10002b8c:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
10002b8e:	687b      	ldr	r3, [r7, #4]
10002b90:	681b      	ldr	r3, [r3, #0]
10002b92:	4a24      	ldr	r2, [pc, #144]	; (10002c24 <ADC_Enable+0xf0>)
10002b94:	4293      	cmp	r3, r2
10002b96:	d002      	beq.n	10002b9e <ADC_Enable+0x6a>
10002b98:	687b      	ldr	r3, [r7, #4]
10002b9a:	681b      	ldr	r3, [r3, #0]
10002b9c:	e000      	b.n	10002ba0 <ADC_Enable+0x6c>
10002b9e:	4b22      	ldr	r3, [pc, #136]	; (10002c28 <ADC_Enable+0xf4>)
10002ba0:	687a      	ldr	r2, [r7, #4]
10002ba2:	6812      	ldr	r2, [r2, #0]
10002ba4:	4293      	cmp	r3, r2
10002ba6:	d02c      	beq.n	10002c02 <ADC_Enable+0xce>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
10002ba8:	68bb      	ldr	r3, [r7, #8]
10002baa:	2b00      	cmp	r3, #0
10002bac:	d130      	bne.n	10002c10 <ADC_Enable+0xdc>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
10002bae:	e028      	b.n	10002c02 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
10002bb0:	687b      	ldr	r3, [r7, #4]
10002bb2:	681b      	ldr	r3, [r3, #0]
10002bb4:	4618      	mov	r0, r3
10002bb6:	f7ff f963 	bl	10001e80 <LL_ADC_IsEnabled>
10002bba:	4603      	mov	r3, r0
10002bbc:	2b00      	cmp	r3, #0
10002bbe:	d104      	bne.n	10002bca <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
10002bc0:	687b      	ldr	r3, [r7, #4]
10002bc2:	681b      	ldr	r3, [r3, #0]
10002bc4:	4618      	mov	r0, r3
10002bc6:	f7ff f933 	bl	10001e30 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
10002bca:	f7fe ff23 	bl	10001a14 <HAL_GetTick>
10002bce:	4602      	mov	r2, r0
10002bd0:	68fb      	ldr	r3, [r7, #12]
10002bd2:	1ad3      	subs	r3, r2, r3
10002bd4:	2b02      	cmp	r3, #2
10002bd6:	d914      	bls.n	10002c02 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
10002bd8:	687b      	ldr	r3, [r7, #4]
10002bda:	681b      	ldr	r3, [r3, #0]
10002bdc:	681b      	ldr	r3, [r3, #0]
10002bde:	f003 0301 	and.w	r3, r3, #1
10002be2:	2b01      	cmp	r3, #1
10002be4:	d00d      	beq.n	10002c02 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10002be6:	687b      	ldr	r3, [r7, #4]
10002be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002bea:	f043 0210 	orr.w	r2, r3, #16
10002bee:	687b      	ldr	r3, [r7, #4]
10002bf0:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
10002bf2:	687b      	ldr	r3, [r7, #4]
10002bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10002bf6:	f043 0201 	orr.w	r2, r3, #1
10002bfa:	687b      	ldr	r3, [r7, #4]
10002bfc:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
10002bfe:	2301      	movs	r3, #1
10002c00:	e007      	b.n	10002c12 <ADC_Enable+0xde>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
10002c02:	687b      	ldr	r3, [r7, #4]
10002c04:	681b      	ldr	r3, [r3, #0]
10002c06:	681b      	ldr	r3, [r3, #0]
10002c08:	f003 0301 	and.w	r3, r3, #1
10002c0c:	2b01      	cmp	r3, #1
10002c0e:	d1cf      	bne.n	10002bb0 <ADC_Enable+0x7c>
    }
#endif
  }

  /* Return HAL status */
  return HAL_OK;
10002c10:	2300      	movs	r3, #0
}
10002c12:	4618      	mov	r0, r3
10002c14:	3710      	adds	r7, #16
10002c16:	46bd      	mov	sp, r7
10002c18:	bd80      	pop	{r7, pc}
10002c1a:	bf00      	nop
10002c1c:	8000003f 	.word	0x8000003f
10002c20:	48003300 	.word	0x48003300
10002c24:	48003100 	.word	0x48003100
10002c28:	48003000 	.word	0x48003000

10002c2c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
10002c2c:	b580      	push	{r7, lr}
10002c2e:	b084      	sub	sp, #16
10002c30:	af00      	add	r7, sp, #0
10002c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
10002c34:	687b      	ldr	r3, [r7, #4]
10002c36:	681b      	ldr	r3, [r3, #0]
10002c38:	4618      	mov	r0, r3
10002c3a:	f7ff f934 	bl	10001ea6 <LL_ADC_IsDisableOngoing>
10002c3e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
10002c40:	687b      	ldr	r3, [r7, #4]
10002c42:	681b      	ldr	r3, [r3, #0]
10002c44:	4618      	mov	r0, r3
10002c46:	f7ff f91b 	bl	10001e80 <LL_ADC_IsEnabled>
10002c4a:	4603      	mov	r3, r0
10002c4c:	2b00      	cmp	r3, #0
10002c4e:	d047      	beq.n	10002ce0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
10002c50:	68fb      	ldr	r3, [r7, #12]
10002c52:	2b00      	cmp	r3, #0
10002c54:	d144      	bne.n	10002ce0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
10002c56:	687b      	ldr	r3, [r7, #4]
10002c58:	681b      	ldr	r3, [r3, #0]
10002c5a:	689b      	ldr	r3, [r3, #8]
10002c5c:	f003 030d 	and.w	r3, r3, #13
10002c60:	2b01      	cmp	r3, #1
10002c62:	d10c      	bne.n	10002c7e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
10002c64:	687b      	ldr	r3, [r7, #4]
10002c66:	681b      	ldr	r3, [r3, #0]
10002c68:	4618      	mov	r0, r3
10002c6a:	f7ff f8f5 	bl	10001e58 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
10002c6e:	687b      	ldr	r3, [r7, #4]
10002c70:	681b      	ldr	r3, [r3, #0]
10002c72:	2203      	movs	r2, #3
10002c74:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
10002c76:	f7fe fecd 	bl	10001a14 <HAL_GetTick>
10002c7a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
10002c7c:	e029      	b.n	10002cd2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10002c7e:	687b      	ldr	r3, [r7, #4]
10002c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002c82:	f043 0210 	orr.w	r2, r3, #16
10002c86:	687b      	ldr	r3, [r7, #4]
10002c88:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
10002c8a:	687b      	ldr	r3, [r7, #4]
10002c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10002c8e:	f043 0201 	orr.w	r2, r3, #1
10002c92:	687b      	ldr	r3, [r7, #4]
10002c94:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
10002c96:	2301      	movs	r3, #1
10002c98:	e023      	b.n	10002ce2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
10002c9a:	f7fe febb 	bl	10001a14 <HAL_GetTick>
10002c9e:	4602      	mov	r2, r0
10002ca0:	68bb      	ldr	r3, [r7, #8]
10002ca2:	1ad3      	subs	r3, r2, r3
10002ca4:	2b02      	cmp	r3, #2
10002ca6:	d914      	bls.n	10002cd2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
10002ca8:	687b      	ldr	r3, [r7, #4]
10002caa:	681b      	ldr	r3, [r3, #0]
10002cac:	689b      	ldr	r3, [r3, #8]
10002cae:	f003 0301 	and.w	r3, r3, #1
10002cb2:	2b00      	cmp	r3, #0
10002cb4:	d00d      	beq.n	10002cd2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10002cb6:	687b      	ldr	r3, [r7, #4]
10002cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002cba:	f043 0210 	orr.w	r2, r3, #16
10002cbe:	687b      	ldr	r3, [r7, #4]
10002cc0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
10002cc2:	687b      	ldr	r3, [r7, #4]
10002cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10002cc6:	f043 0201 	orr.w	r2, r3, #1
10002cca:	687b      	ldr	r3, [r7, #4]
10002ccc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
10002cce:	2301      	movs	r3, #1
10002cd0:	e007      	b.n	10002ce2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
10002cd2:	687b      	ldr	r3, [r7, #4]
10002cd4:	681b      	ldr	r3, [r3, #0]
10002cd6:	689b      	ldr	r3, [r3, #8]
10002cd8:	f003 0301 	and.w	r3, r3, #1
10002cdc:	2b00      	cmp	r3, #0
10002cde:	d1dc      	bne.n	10002c9a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
10002ce0:	2300      	movs	r3, #0
}
10002ce2:	4618      	mov	r0, r3
10002ce4:	3710      	adds	r7, #16
10002ce6:	46bd      	mov	sp, r7
10002ce8:	bd80      	pop	{r7, pc}
	...

10002cec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
10002cec:	b580      	push	{r7, lr}
10002cee:	b084      	sub	sp, #16
10002cf0:	af00      	add	r7, sp, #0
10002cf2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
10002cf4:	687b      	ldr	r3, [r7, #4]
10002cf6:	681b      	ldr	r3, [r3, #0]
10002cf8:	4a53      	ldr	r2, [pc, #332]	; (10002e48 <ADC_ConfigureBoostMode+0x15c>)
10002cfa:	4293      	cmp	r3, r2
10002cfc:	d004      	beq.n	10002d08 <ADC_ConfigureBoostMode+0x1c>
10002cfe:	687b      	ldr	r3, [r7, #4]
10002d00:	681b      	ldr	r3, [r3, #0]
10002d02:	4a52      	ldr	r2, [pc, #328]	; (10002e4c <ADC_ConfigureBoostMode+0x160>)
10002d04:	4293      	cmp	r3, r2
10002d06:	d124      	bne.n	10002d52 <ADC_ConfigureBoostMode+0x66>
10002d08:	4b51      	ldr	r3, [pc, #324]	; (10002e50 <ADC_ConfigureBoostMode+0x164>)
10002d0a:	689b      	ldr	r3, [r3, #8]
10002d0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
10002d10:	2b00      	cmp	r3, #0
10002d12:	d01e      	beq.n	10002d52 <ADC_ConfigureBoostMode+0x66>
  {
    freq = HAL_RCC_GetHCLK2Freq();
10002d14:	f002 febd 	bl	10005a92 <HAL_RCC_GetHCLK2Freq>
10002d18:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
10002d1a:	687b      	ldr	r3, [r7, #4]
10002d1c:	685b      	ldr	r3, [r3, #4]
10002d1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
10002d22:	d010      	beq.n	10002d46 <ADC_ConfigureBoostMode+0x5a>
10002d24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
10002d28:	d811      	bhi.n	10002d4e <ADC_ConfigureBoostMode+0x62>
10002d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
10002d2e:	d002      	beq.n	10002d36 <ADC_ConfigureBoostMode+0x4a>
10002d30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
10002d34:	d10b      	bne.n	10002d4e <ADC_ConfigureBoostMode+0x62>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
10002d36:	687b      	ldr	r3, [r7, #4]
10002d38:	685b      	ldr	r3, [r3, #4]
10002d3a:	0c1b      	lsrs	r3, r3, #16
10002d3c:	68fa      	ldr	r2, [r7, #12]
10002d3e:	fbb2 f3f3 	udiv	r3, r2, r3
10002d42:	60fb      	str	r3, [r7, #12]
        break;
10002d44:	e004      	b.n	10002d50 <ADC_ConfigureBoostMode+0x64>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
10002d46:	68fb      	ldr	r3, [r7, #12]
10002d48:	089b      	lsrs	r3, r3, #2
10002d4a:	60fb      	str	r3, [r7, #12]
        break;
10002d4c:	e000      	b.n	10002d50 <ADC_ConfigureBoostMode+0x64>
      default:
        break;
10002d4e:	bf00      	nop
    switch(hadc->Init.ClockPrescaler)
10002d50:	e062      	b.n	10002e18 <ADC_ConfigureBoostMode+0x12c>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
10002d52:	f04f 0008 	mov.w	r0, #8
10002d56:	f04f 0100 	mov.w	r1, #0
10002d5a:	f005 fa67 	bl	1000822c <HAL_RCCEx_GetPeriphCLKFreq>
10002d5e:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
10002d60:	687b      	ldr	r3, [r7, #4]
10002d62:	685b      	ldr	r3, [r3, #4]
10002d64:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
10002d68:	d051      	beq.n	10002e0e <ADC_ConfigureBoostMode+0x122>
10002d6a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
10002d6e:	d852      	bhi.n	10002e16 <ADC_ConfigureBoostMode+0x12a>
10002d70:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
10002d74:	d047      	beq.n	10002e06 <ADC_ConfigureBoostMode+0x11a>
10002d76:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
10002d7a:	d84c      	bhi.n	10002e16 <ADC_ConfigureBoostMode+0x12a>
10002d7c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
10002d80:	d03d      	beq.n	10002dfe <ADC_ConfigureBoostMode+0x112>
10002d82:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
10002d86:	d846      	bhi.n	10002e16 <ADC_ConfigureBoostMode+0x12a>
10002d88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
10002d8c:	d033      	beq.n	10002df6 <ADC_ConfigureBoostMode+0x10a>
10002d8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
10002d92:	d840      	bhi.n	10002e16 <ADC_ConfigureBoostMode+0x12a>
10002d94:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
10002d98:	d029      	beq.n	10002dee <ADC_ConfigureBoostMode+0x102>
10002d9a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
10002d9e:	d83a      	bhi.n	10002e16 <ADC_ConfigureBoostMode+0x12a>
10002da0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
10002da4:	d01a      	beq.n	10002ddc <ADC_ConfigureBoostMode+0xf0>
10002da6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
10002daa:	d834      	bhi.n	10002e16 <ADC_ConfigureBoostMode+0x12a>
10002dac:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
10002db0:	d014      	beq.n	10002ddc <ADC_ConfigureBoostMode+0xf0>
10002db2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
10002db6:	d82e      	bhi.n	10002e16 <ADC_ConfigureBoostMode+0x12a>
10002db8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
10002dbc:	d00e      	beq.n	10002ddc <ADC_ConfigureBoostMode+0xf0>
10002dbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
10002dc2:	d828      	bhi.n	10002e16 <ADC_ConfigureBoostMode+0x12a>
10002dc4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
10002dc8:	d008      	beq.n	10002ddc <ADC_ConfigureBoostMode+0xf0>
10002dca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
10002dce:	d822      	bhi.n	10002e16 <ADC_ConfigureBoostMode+0x12a>
10002dd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
10002dd4:	d002      	beq.n	10002ddc <ADC_ConfigureBoostMode+0xf0>
10002dd6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
10002dda:	d11c      	bne.n	10002e16 <ADC_ConfigureBoostMode+0x12a>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
10002ddc:	687b      	ldr	r3, [r7, #4]
10002dde:	685b      	ldr	r3, [r3, #4]
10002de0:	0c9b      	lsrs	r3, r3, #18
10002de2:	005b      	lsls	r3, r3, #1
10002de4:	68fa      	ldr	r2, [r7, #12]
10002de6:	fbb2 f3f3 	udiv	r3, r2, r3
10002dea:	60fb      	str	r3, [r7, #12]
        break;
10002dec:	e014      	b.n	10002e18 <ADC_ConfigureBoostMode+0x12c>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
10002dee:	68fb      	ldr	r3, [r7, #12]
10002df0:	091b      	lsrs	r3, r3, #4
10002df2:	60fb      	str	r3, [r7, #12]
      break;
10002df4:	e010      	b.n	10002e18 <ADC_ConfigureBoostMode+0x12c>
        case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
10002df6:	68fb      	ldr	r3, [r7, #12]
10002df8:	095b      	lsrs	r3, r3, #5
10002dfa:	60fb      	str	r3, [r7, #12]
        break;
10002dfc:	e00c      	b.n	10002e18 <ADC_ConfigureBoostMode+0x12c>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
10002dfe:	68fb      	ldr	r3, [r7, #12]
10002e00:	099b      	lsrs	r3, r3, #6
10002e02:	60fb      	str	r3, [r7, #12]
        break;
10002e04:	e008      	b.n	10002e18 <ADC_ConfigureBoostMode+0x12c>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
10002e06:	68fb      	ldr	r3, [r7, #12]
10002e08:	09db      	lsrs	r3, r3, #7
10002e0a:	60fb      	str	r3, [r7, #12]
        break;
10002e0c:	e004      	b.n	10002e18 <ADC_ConfigureBoostMode+0x12c>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
10002e0e:	68fb      	ldr	r3, [r7, #12]
10002e10:	0a1b      	lsrs	r3, r3, #8
10002e12:	60fb      	str	r3, [r7, #12]
        break;
10002e14:	e000      	b.n	10002e18 <ADC_ConfigureBoostMode+0x12c>
      default:
        break;
10002e16:	bf00      	nop
    }
  }

  if (freq > 20000000UL)
10002e18:	68fb      	ldr	r3, [r7, #12]
10002e1a:	4a0e      	ldr	r2, [pc, #56]	; (10002e54 <ADC_ConfigureBoostMode+0x168>)
10002e1c:	4293      	cmp	r3, r2
10002e1e:	d908      	bls.n	10002e32 <ADC_ConfigureBoostMode+0x146>
  {
    SET_BIT(hadc->Instance->CR, ADC_CR_BOOST);
10002e20:	687b      	ldr	r3, [r7, #4]
10002e22:	681b      	ldr	r3, [r3, #0]
10002e24:	689a      	ldr	r2, [r3, #8]
10002e26:	687b      	ldr	r3, [r7, #4]
10002e28:	681b      	ldr	r3, [r3, #0]
10002e2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
10002e2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    CLEAR_BIT(hadc->Instance->CR, 0);
  }
}
10002e30:	e005      	b.n	10002e3e <ADC_ConfigureBoostMode+0x152>
    CLEAR_BIT(hadc->Instance->CR, 0);
10002e32:	687b      	ldr	r3, [r7, #4]
10002e34:	681a      	ldr	r2, [r3, #0]
10002e36:	687b      	ldr	r3, [r7, #4]
10002e38:	681b      	ldr	r3, [r3, #0]
10002e3a:	6892      	ldr	r2, [r2, #8]
10002e3c:	609a      	str	r2, [r3, #8]
}
10002e3e:	bf00      	nop
10002e40:	3710      	adds	r7, #16
10002e42:	46bd      	mov	sp, r7
10002e44:	bd80      	pop	{r7, pc}
10002e46:	bf00      	nop
10002e48:	48003000 	.word	0x48003000
10002e4c:	48003100 	.word	0x48003100
10002e50:	48003300 	.word	0x48003300
10002e54:	01312d00 	.word	0x01312d00

10002e58 <LL_ADC_StartCalibration>:
{
10002e58:	b480      	push	{r7}
10002e5a:	b085      	sub	sp, #20
10002e5c:	af00      	add	r7, sp, #0
10002e5e:	60f8      	str	r0, [r7, #12]
10002e60:	60b9      	str	r1, [r7, #8]
10002e62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
10002e64:	68fb      	ldr	r3, [r7, #12]
10002e66:	689a      	ldr	r2, [r3, #8]
10002e68:	4b09      	ldr	r3, [pc, #36]	; (10002e90 <LL_ADC_StartCalibration+0x38>)
10002e6a:	4013      	ands	r3, r2
10002e6c:	68ba      	ldr	r2, [r7, #8]
10002e6e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
10002e72:	687a      	ldr	r2, [r7, #4]
10002e74:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
10002e78:	430a      	orrs	r2, r1
10002e7a:	4313      	orrs	r3, r2
10002e7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
10002e80:	68fb      	ldr	r3, [r7, #12]
10002e82:	609a      	str	r2, [r3, #8]
}
10002e84:	bf00      	nop
10002e86:	3714      	adds	r7, #20
10002e88:	46bd      	mov	sp, r7
10002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
10002e8e:	4770      	bx	lr
10002e90:	3ffeffc0 	.word	0x3ffeffc0

10002e94 <LL_ADC_IsCalibrationOnGoing>:
{
10002e94:	b480      	push	{r7}
10002e96:	b083      	sub	sp, #12
10002e98:	af00      	add	r7, sp, #0
10002e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
10002e9c:	687b      	ldr	r3, [r7, #4]
10002e9e:	689b      	ldr	r3, [r3, #8]
10002ea0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002ea4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002ea8:	d101      	bne.n	10002eae <LL_ADC_IsCalibrationOnGoing+0x1a>
10002eaa:	2301      	movs	r3, #1
10002eac:	e000      	b.n	10002eb0 <LL_ADC_IsCalibrationOnGoing+0x1c>
10002eae:	2300      	movs	r3, #0
}
10002eb0:	4618      	mov	r0, r3
10002eb2:	370c      	adds	r7, #12
10002eb4:	46bd      	mov	sp, r7
10002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
10002eba:	4770      	bx	lr

10002ebc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
10002ebc:	b580      	push	{r7, lr}
10002ebe:	b086      	sub	sp, #24
10002ec0:	af00      	add	r7, sp, #0
10002ec2:	60f8      	str	r0, [r7, #12]
10002ec4:	60b9      	str	r1, [r7, #8]
10002ec6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
10002ec8:	2300      	movs	r3, #0
10002eca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
10002ecc:	68fb      	ldr	r3, [r7, #12]
10002ece:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
10002ed2:	2b01      	cmp	r3, #1
10002ed4:	d101      	bne.n	10002eda <HAL_ADCEx_Calibration_Start+0x1e>
10002ed6:	2302      	movs	r3, #2
10002ed8:	e04e      	b.n	10002f78 <HAL_ADCEx_Calibration_Start+0xbc>
10002eda:	68fb      	ldr	r3, [r7, #12]
10002edc:	2201      	movs	r2, #1
10002ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
10002ee2:	68f8      	ldr	r0, [r7, #12]
10002ee4:	f7ff fea2 	bl	10002c2c <ADC_Disable>
10002ee8:	4603      	mov	r3, r0
10002eea:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
10002eec:	7dfb      	ldrb	r3, [r7, #23]
10002eee:	2b00      	cmp	r3, #0
10002ef0:	d137      	bne.n	10002f62 <HAL_ADCEx_Calibration_Start+0xa6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
10002ef2:	68fb      	ldr	r3, [r7, #12]
10002ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002ef6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
10002efa:	f023 0302 	bic.w	r3, r3, #2
10002efe:	f043 0202 	orr.w	r2, r3, #2
10002f02:	68fb      	ldr	r3, [r7, #12]
10002f04:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance , CalibrationMode, SingleDiff );
10002f06:	68fb      	ldr	r3, [r7, #12]
10002f08:	681b      	ldr	r3, [r3, #0]
10002f0a:	687a      	ldr	r2, [r7, #4]
10002f0c:	68b9      	ldr	r1, [r7, #8]
10002f0e:	4618      	mov	r0, r3
10002f10:	f7ff ffa2 	bl	10002e58 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
10002f14:	e014      	b.n	10002f40 <HAL_ADCEx_Calibration_Start+0x84>
    {
      wait_loop_index++;
10002f16:	693b      	ldr	r3, [r7, #16]
10002f18:	3301      	adds	r3, #1
10002f1a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
10002f1c:	693b      	ldr	r3, [r7, #16]
10002f1e:	4a18      	ldr	r2, [pc, #96]	; (10002f80 <HAL_ADCEx_Calibration_Start+0xc4>)
10002f20:	4293      	cmp	r3, r2
10002f22:	d90d      	bls.n	10002f40 <HAL_ADCEx_Calibration_Start+0x84>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
10002f24:	68fb      	ldr	r3, [r7, #12]
10002f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002f28:	f023 0312 	bic.w	r3, r3, #18
10002f2c:	f043 0210 	orr.w	r2, r3, #16
10002f30:	68fb      	ldr	r3, [r7, #12]
10002f32:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
10002f34:	68fb      	ldr	r3, [r7, #12]
10002f36:	2200      	movs	r2, #0
10002f38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
10002f3c:	2301      	movs	r3, #1
10002f3e:	e01b      	b.n	10002f78 <HAL_ADCEx_Calibration_Start+0xbc>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
10002f40:	68fb      	ldr	r3, [r7, #12]
10002f42:	681b      	ldr	r3, [r3, #0]
10002f44:	4618      	mov	r0, r3
10002f46:	f7ff ffa5 	bl	10002e94 <LL_ADC_IsCalibrationOnGoing>
10002f4a:	4603      	mov	r3, r0
10002f4c:	2b00      	cmp	r3, #0
10002f4e:	d1e2      	bne.n	10002f16 <HAL_ADCEx_Calibration_Start+0x5a>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
10002f50:	68fb      	ldr	r3, [r7, #12]
10002f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002f54:	f023 0303 	bic.w	r3, r3, #3
10002f58:	f043 0201 	orr.w	r2, r3, #1
10002f5c:	68fb      	ldr	r3, [r7, #12]
10002f5e:	655a      	str	r2, [r3, #84]	; 0x54
10002f60:	e005      	b.n	10002f6e <HAL_ADCEx_Calibration_Start+0xb2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10002f62:	68fb      	ldr	r3, [r7, #12]
10002f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002f66:	f043 0210 	orr.w	r2, r3, #16
10002f6a:	68fb      	ldr	r3, [r7, #12]
10002f6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
10002f6e:	68fb      	ldr	r3, [r7, #12]
10002f70:	2200      	movs	r2, #0
10002f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return tmp_hal_status;
10002f76:	7dfb      	ldrb	r3, [r7, #23]
}
10002f78:	4618      	mov	r0, r3
10002f7a:	3718      	adds	r7, #24
10002f7c:	46bd      	mov	sp, r7
10002f7e:	bd80      	pop	{r7, pc}
10002f80:	32021fbf 	.word	0x32021fbf

10002f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10002f84:	b480      	push	{r7}
10002f86:	b085      	sub	sp, #20
10002f88:	af00      	add	r7, sp, #0
10002f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
10002f8c:	687b      	ldr	r3, [r7, #4]
10002f8e:	f003 0307 	and.w	r3, r3, #7
10002f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
10002f94:	4b0c      	ldr	r3, [pc, #48]	; (10002fc8 <__NVIC_SetPriorityGrouping+0x44>)
10002f96:	68db      	ldr	r3, [r3, #12]
10002f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
10002f9a:	68ba      	ldr	r2, [r7, #8]
10002f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
10002fa0:	4013      	ands	r3, r2
10002fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
10002fa4:	68fb      	ldr	r3, [r7, #12]
10002fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10002fa8:	68bb      	ldr	r3, [r7, #8]
10002faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
10002fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
10002fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
10002fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
10002fb6:	4a04      	ldr	r2, [pc, #16]	; (10002fc8 <__NVIC_SetPriorityGrouping+0x44>)
10002fb8:	68bb      	ldr	r3, [r7, #8]
10002fba:	60d3      	str	r3, [r2, #12]
}
10002fbc:	bf00      	nop
10002fbe:	3714      	adds	r7, #20
10002fc0:	46bd      	mov	sp, r7
10002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
10002fc6:	4770      	bx	lr
10002fc8:	e000ed00 	.word	0xe000ed00

10002fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
10002fcc:	b480      	push	{r7}
10002fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
10002fd0:	4b04      	ldr	r3, [pc, #16]	; (10002fe4 <__NVIC_GetPriorityGrouping+0x18>)
10002fd2:	68db      	ldr	r3, [r3, #12]
10002fd4:	0a1b      	lsrs	r3, r3, #8
10002fd6:	f003 0307 	and.w	r3, r3, #7
}
10002fda:	4618      	mov	r0, r3
10002fdc:	46bd      	mov	sp, r7
10002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
10002fe2:	4770      	bx	lr
10002fe4:	e000ed00 	.word	0xe000ed00

10002fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10002fe8:	b480      	push	{r7}
10002fea:	b083      	sub	sp, #12
10002fec:	af00      	add	r7, sp, #0
10002fee:	4603      	mov	r3, r0
10002ff0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10002ff2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10002ff6:	2b00      	cmp	r3, #0
10002ff8:	db0b      	blt.n	10003012 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002ffa:	88fb      	ldrh	r3, [r7, #6]
10002ffc:	f003 021f 	and.w	r2, r3, #31
10003000:	4907      	ldr	r1, [pc, #28]	; (10003020 <__NVIC_EnableIRQ+0x38>)
10003002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10003006:	095b      	lsrs	r3, r3, #5
10003008:	2001      	movs	r0, #1
1000300a:	fa00 f202 	lsl.w	r2, r0, r2
1000300e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
10003012:	bf00      	nop
10003014:	370c      	adds	r7, #12
10003016:	46bd      	mov	sp, r7
10003018:	f85d 7b04 	ldr.w	r7, [sp], #4
1000301c:	4770      	bx	lr
1000301e:	bf00      	nop
10003020:	e000e100 	.word	0xe000e100

10003024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10003024:	b480      	push	{r7}
10003026:	b083      	sub	sp, #12
10003028:	af00      	add	r7, sp, #0
1000302a:	4603      	mov	r3, r0
1000302c:	6039      	str	r1, [r7, #0]
1000302e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10003030:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10003034:	2b00      	cmp	r3, #0
10003036:	db0a      	blt.n	1000304e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10003038:	683b      	ldr	r3, [r7, #0]
1000303a:	b2da      	uxtb	r2, r3
1000303c:	490c      	ldr	r1, [pc, #48]	; (10003070 <__NVIC_SetPriority+0x4c>)
1000303e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10003042:	0112      	lsls	r2, r2, #4
10003044:	b2d2      	uxtb	r2, r2
10003046:	440b      	add	r3, r1
10003048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
1000304c:	e00a      	b.n	10003064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1000304e:	683b      	ldr	r3, [r7, #0]
10003050:	b2da      	uxtb	r2, r3
10003052:	4908      	ldr	r1, [pc, #32]	; (10003074 <__NVIC_SetPriority+0x50>)
10003054:	88fb      	ldrh	r3, [r7, #6]
10003056:	f003 030f 	and.w	r3, r3, #15
1000305a:	3b04      	subs	r3, #4
1000305c:	0112      	lsls	r2, r2, #4
1000305e:	b2d2      	uxtb	r2, r2
10003060:	440b      	add	r3, r1
10003062:	761a      	strb	r2, [r3, #24]
}
10003064:	bf00      	nop
10003066:	370c      	adds	r7, #12
10003068:	46bd      	mov	sp, r7
1000306a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000306e:	4770      	bx	lr
10003070:	e000e100 	.word	0xe000e100
10003074:	e000ed00 	.word	0xe000ed00

10003078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
10003078:	b480      	push	{r7}
1000307a:	b089      	sub	sp, #36	; 0x24
1000307c:	af00      	add	r7, sp, #0
1000307e:	60f8      	str	r0, [r7, #12]
10003080:	60b9      	str	r1, [r7, #8]
10003082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
10003084:	68fb      	ldr	r3, [r7, #12]
10003086:	f003 0307 	and.w	r3, r3, #7
1000308a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
1000308c:	69fb      	ldr	r3, [r7, #28]
1000308e:	f1c3 0307 	rsb	r3, r3, #7
10003092:	2b04      	cmp	r3, #4
10003094:	bf28      	it	cs
10003096:	2304      	movcs	r3, #4
10003098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
1000309a:	69fb      	ldr	r3, [r7, #28]
1000309c:	3304      	adds	r3, #4
1000309e:	2b06      	cmp	r3, #6
100030a0:	d902      	bls.n	100030a8 <NVIC_EncodePriority+0x30>
100030a2:	69fb      	ldr	r3, [r7, #28]
100030a4:	3b03      	subs	r3, #3
100030a6:	e000      	b.n	100030aa <NVIC_EncodePriority+0x32>
100030a8:	2300      	movs	r3, #0
100030aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
100030ac:	f04f 32ff 	mov.w	r2, #4294967295
100030b0:	69bb      	ldr	r3, [r7, #24]
100030b2:	fa02 f303 	lsl.w	r3, r2, r3
100030b6:	43da      	mvns	r2, r3
100030b8:	68bb      	ldr	r3, [r7, #8]
100030ba:	401a      	ands	r2, r3
100030bc:	697b      	ldr	r3, [r7, #20]
100030be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
100030c0:	f04f 31ff 	mov.w	r1, #4294967295
100030c4:	697b      	ldr	r3, [r7, #20]
100030c6:	fa01 f303 	lsl.w	r3, r1, r3
100030ca:	43d9      	mvns	r1, r3
100030cc:	687b      	ldr	r3, [r7, #4]
100030ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
100030d0:	4313      	orrs	r3, r2
         );
}
100030d2:	4618      	mov	r0, r3
100030d4:	3724      	adds	r7, #36	; 0x24
100030d6:	46bd      	mov	sp, r7
100030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
100030dc:	4770      	bx	lr
	...

100030e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
100030e0:	b580      	push	{r7, lr}
100030e2:	b082      	sub	sp, #8
100030e4:	af00      	add	r7, sp, #0
100030e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
100030e8:	687b      	ldr	r3, [r7, #4]
100030ea:	3b01      	subs	r3, #1
100030ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
100030f0:	d301      	bcc.n	100030f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
100030f2:	2301      	movs	r3, #1
100030f4:	e00f      	b.n	10003116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
100030f6:	4a0a      	ldr	r2, [pc, #40]	; (10003120 <SysTick_Config+0x40>)
100030f8:	687b      	ldr	r3, [r7, #4]
100030fa:	3b01      	subs	r3, #1
100030fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
100030fe:	210f      	movs	r1, #15
10003100:	f04f 30ff 	mov.w	r0, #4294967295
10003104:	f7ff ff8e 	bl	10003024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10003108:	4b05      	ldr	r3, [pc, #20]	; (10003120 <SysTick_Config+0x40>)
1000310a:	2200      	movs	r2, #0
1000310c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1000310e:	4b04      	ldr	r3, [pc, #16]	; (10003120 <SysTick_Config+0x40>)
10003110:	2207      	movs	r2, #7
10003112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10003114:	2300      	movs	r3, #0
}
10003116:	4618      	mov	r0, r3
10003118:	3708      	adds	r7, #8
1000311a:	46bd      	mov	sp, r7
1000311c:	bd80      	pop	{r7, pc}
1000311e:	bf00      	nop
10003120:	e000e010 	.word	0xe000e010

10003124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10003124:	b580      	push	{r7, lr}
10003126:	b082      	sub	sp, #8
10003128:	af00      	add	r7, sp, #0
1000312a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
1000312c:	6878      	ldr	r0, [r7, #4]
1000312e:	f7ff ff29 	bl	10002f84 <__NVIC_SetPriorityGrouping>
}
10003132:	bf00      	nop
10003134:	3708      	adds	r7, #8
10003136:	46bd      	mov	sp, r7
10003138:	bd80      	pop	{r7, pc}

1000313a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
1000313a:	b580      	push	{r7, lr}
1000313c:	b086      	sub	sp, #24
1000313e:	af00      	add	r7, sp, #0
10003140:	4603      	mov	r3, r0
10003142:	60b9      	str	r1, [r7, #8]
10003144:	607a      	str	r2, [r7, #4]
10003146:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
10003148:	2300      	movs	r3, #0
1000314a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
1000314c:	f7ff ff3e 	bl	10002fcc <__NVIC_GetPriorityGrouping>
10003150:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
10003152:	687a      	ldr	r2, [r7, #4]
10003154:	68b9      	ldr	r1, [r7, #8]
10003156:	6978      	ldr	r0, [r7, #20]
10003158:	f7ff ff8e 	bl	10003078 <NVIC_EncodePriority>
1000315c:	4602      	mov	r2, r0
1000315e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
10003162:	4611      	mov	r1, r2
10003164:	4618      	mov	r0, r3
10003166:	f7ff ff5d 	bl	10003024 <__NVIC_SetPriority>
}
1000316a:	bf00      	nop
1000316c:	3718      	adds	r7, #24
1000316e:	46bd      	mov	sp, r7
10003170:	bd80      	pop	{r7, pc}

10003172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10003172:	b580      	push	{r7, lr}
10003174:	b082      	sub	sp, #8
10003176:	af00      	add	r7, sp, #0
10003178:	4603      	mov	r3, r0
1000317a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
1000317c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10003180:	4618      	mov	r0, r3
10003182:	f7ff ff31 	bl	10002fe8 <__NVIC_EnableIRQ>
}
10003186:	bf00      	nop
10003188:	3708      	adds	r7, #8
1000318a:	46bd      	mov	sp, r7
1000318c:	bd80      	pop	{r7, pc}

1000318e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
1000318e:	b580      	push	{r7, lr}
10003190:	b082      	sub	sp, #8
10003192:	af00      	add	r7, sp, #0
10003194:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10003196:	6878      	ldr	r0, [r7, #4]
10003198:	f7ff ffa2 	bl	100030e0 <SysTick_Config>
1000319c:	4603      	mov	r3, r0
}
1000319e:	4618      	mov	r0, r3
100031a0:	3708      	adds	r7, #8
100031a2:	46bd      	mov	sp, r7
100031a4:	bd80      	pop	{r7, pc}
	...

100031a8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
100031a8:	b580      	push	{r7, lr}
100031aa:	b082      	sub	sp, #8
100031ac:	af00      	add	r7, sp, #0
100031ae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
100031b0:	687b      	ldr	r3, [r7, #4]
100031b2:	2b00      	cmp	r3, #0
100031b4:	d101      	bne.n	100031ba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
100031b6:	2301      	movs	r3, #1
100031b8:	e054      	b.n	10003264 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
100031ba:	687b      	ldr	r3, [r7, #4]
100031bc:	7f5b      	ldrb	r3, [r3, #29]
100031be:	b2db      	uxtb	r3, r3
100031c0:	2b00      	cmp	r3, #0
100031c2:	d105      	bne.n	100031d0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
100031c4:	687b      	ldr	r3, [r7, #4]
100031c6:	2200      	movs	r2, #0
100031c8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
100031ca:	6878      	ldr	r0, [r7, #4]
100031cc:	f7fe fa62 	bl	10001694 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
100031d0:	687b      	ldr	r3, [r7, #4]
100031d2:	2202      	movs	r2, #2
100031d4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
100031d6:	687b      	ldr	r3, [r7, #4]
100031d8:	791b      	ldrb	r3, [r3, #4]
100031da:	2b00      	cmp	r3, #0
100031dc:	d10c      	bne.n	100031f8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
100031de:	687b      	ldr	r3, [r7, #4]
100031e0:	681b      	ldr	r3, [r3, #0]
100031e2:	4a22      	ldr	r2, [pc, #136]	; (1000326c <HAL_CRC_Init+0xc4>)
100031e4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
100031e6:	687b      	ldr	r3, [r7, #4]
100031e8:	681b      	ldr	r3, [r3, #0]
100031ea:	689a      	ldr	r2, [r3, #8]
100031ec:	687b      	ldr	r3, [r7, #4]
100031ee:	681b      	ldr	r3, [r3, #0]
100031f0:	f022 0218 	bic.w	r2, r2, #24
100031f4:	609a      	str	r2, [r3, #8]
100031f6:	e00c      	b.n	10003212 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
100031f8:	687b      	ldr	r3, [r7, #4]
100031fa:	6899      	ldr	r1, [r3, #8]
100031fc:	687b      	ldr	r3, [r7, #4]
100031fe:	68db      	ldr	r3, [r3, #12]
10003200:	461a      	mov	r2, r3
10003202:	6878      	ldr	r0, [r7, #4]
10003204:	f000 f834 	bl	10003270 <HAL_CRCEx_Polynomial_Set>
10003208:	4603      	mov	r3, r0
1000320a:	2b00      	cmp	r3, #0
1000320c:	d001      	beq.n	10003212 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
1000320e:	2301      	movs	r3, #1
10003210:	e028      	b.n	10003264 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
10003212:	687b      	ldr	r3, [r7, #4]
10003214:	795b      	ldrb	r3, [r3, #5]
10003216:	2b00      	cmp	r3, #0
10003218:	d105      	bne.n	10003226 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
1000321a:	687b      	ldr	r3, [r7, #4]
1000321c:	681b      	ldr	r3, [r3, #0]
1000321e:	f04f 32ff 	mov.w	r2, #4294967295
10003222:	611a      	str	r2, [r3, #16]
10003224:	e004      	b.n	10003230 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
10003226:	687b      	ldr	r3, [r7, #4]
10003228:	681b      	ldr	r3, [r3, #0]
1000322a:	687a      	ldr	r2, [r7, #4]
1000322c:	6912      	ldr	r2, [r2, #16]
1000322e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
10003230:	687b      	ldr	r3, [r7, #4]
10003232:	681b      	ldr	r3, [r3, #0]
10003234:	689b      	ldr	r3, [r3, #8]
10003236:	f023 0160 	bic.w	r1, r3, #96	; 0x60
1000323a:	687b      	ldr	r3, [r7, #4]
1000323c:	695a      	ldr	r2, [r3, #20]
1000323e:	687b      	ldr	r3, [r7, #4]
10003240:	681b      	ldr	r3, [r3, #0]
10003242:	430a      	orrs	r2, r1
10003244:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
10003246:	687b      	ldr	r3, [r7, #4]
10003248:	681b      	ldr	r3, [r3, #0]
1000324a:	689b      	ldr	r3, [r3, #8]
1000324c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
10003250:	687b      	ldr	r3, [r7, #4]
10003252:	699a      	ldr	r2, [r3, #24]
10003254:	687b      	ldr	r3, [r7, #4]
10003256:	681b      	ldr	r3, [r3, #0]
10003258:	430a      	orrs	r2, r1
1000325a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
1000325c:	687b      	ldr	r3, [r7, #4]
1000325e:	2201      	movs	r2, #1
10003260:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
10003262:	2300      	movs	r3, #0
}
10003264:	4618      	mov	r0, r3
10003266:	3708      	adds	r7, #8
10003268:	46bd      	mov	sp, r7
1000326a:	bd80      	pop	{r7, pc}
1000326c:	04c11db7 	.word	0x04c11db7

10003270 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
10003270:	b480      	push	{r7}
10003272:	b087      	sub	sp, #28
10003274:	af00      	add	r7, sp, #0
10003276:	60f8      	str	r0, [r7, #12]
10003278:	60b9      	str	r1, [r7, #8]
1000327a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
1000327c:	2300      	movs	r3, #0
1000327e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
10003280:	231f      	movs	r3, #31
10003282:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
10003284:	bf00      	nop
10003286:	693b      	ldr	r3, [r7, #16]
10003288:	1e5a      	subs	r2, r3, #1
1000328a:	613a      	str	r2, [r7, #16]
1000328c:	2b00      	cmp	r3, #0
1000328e:	d009      	beq.n	100032a4 <HAL_CRCEx_Polynomial_Set+0x34>
10003290:	693b      	ldr	r3, [r7, #16]
10003292:	f003 031f 	and.w	r3, r3, #31
10003296:	68ba      	ldr	r2, [r7, #8]
10003298:	fa22 f303 	lsr.w	r3, r2, r3
1000329c:	f003 0301 	and.w	r3, r3, #1
100032a0:	2b00      	cmp	r3, #0
100032a2:	d0f0      	beq.n	10003286 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
100032a4:	687b      	ldr	r3, [r7, #4]
100032a6:	2b18      	cmp	r3, #24
100032a8:	d846      	bhi.n	10003338 <HAL_CRCEx_Polynomial_Set+0xc8>
100032aa:	a201      	add	r2, pc, #4	; (adr r2, 100032b0 <HAL_CRCEx_Polynomial_Set+0x40>)
100032ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100032b0:	1000333f 	.word	0x1000333f
100032b4:	10003339 	.word	0x10003339
100032b8:	10003339 	.word	0x10003339
100032bc:	10003339 	.word	0x10003339
100032c0:	10003339 	.word	0x10003339
100032c4:	10003339 	.word	0x10003339
100032c8:	10003339 	.word	0x10003339
100032cc:	10003339 	.word	0x10003339
100032d0:	1000332d 	.word	0x1000332d
100032d4:	10003339 	.word	0x10003339
100032d8:	10003339 	.word	0x10003339
100032dc:	10003339 	.word	0x10003339
100032e0:	10003339 	.word	0x10003339
100032e4:	10003339 	.word	0x10003339
100032e8:	10003339 	.word	0x10003339
100032ec:	10003339 	.word	0x10003339
100032f0:	10003321 	.word	0x10003321
100032f4:	10003339 	.word	0x10003339
100032f8:	10003339 	.word	0x10003339
100032fc:	10003339 	.word	0x10003339
10003300:	10003339 	.word	0x10003339
10003304:	10003339 	.word	0x10003339
10003308:	10003339 	.word	0x10003339
1000330c:	10003339 	.word	0x10003339
10003310:	10003315 	.word	0x10003315
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
10003314:	693b      	ldr	r3, [r7, #16]
10003316:	2b06      	cmp	r3, #6
10003318:	d913      	bls.n	10003342 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
1000331a:	2301      	movs	r3, #1
1000331c:	75fb      	strb	r3, [r7, #23]
      }
      break;
1000331e:	e010      	b.n	10003342 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
10003320:	693b      	ldr	r3, [r7, #16]
10003322:	2b07      	cmp	r3, #7
10003324:	d90f      	bls.n	10003346 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
10003326:	2301      	movs	r3, #1
10003328:	75fb      	strb	r3, [r7, #23]
      }
      break;
1000332a:	e00c      	b.n	10003346 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
1000332c:	693b      	ldr	r3, [r7, #16]
1000332e:	2b0f      	cmp	r3, #15
10003330:	d90b      	bls.n	1000334a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
10003332:	2301      	movs	r3, #1
10003334:	75fb      	strb	r3, [r7, #23]
      }
      break;
10003336:	e008      	b.n	1000334a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
10003338:	2301      	movs	r3, #1
1000333a:	75fb      	strb	r3, [r7, #23]
      break;
1000333c:	e006      	b.n	1000334c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
1000333e:	bf00      	nop
10003340:	e004      	b.n	1000334c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
10003342:	bf00      	nop
10003344:	e002      	b.n	1000334c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
10003346:	bf00      	nop
10003348:	e000      	b.n	1000334c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
1000334a:	bf00      	nop
  }
  if (status == HAL_OK)
1000334c:	7dfb      	ldrb	r3, [r7, #23]
1000334e:	2b00      	cmp	r3, #0
10003350:	d10d      	bne.n	1000336e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
10003352:	68fb      	ldr	r3, [r7, #12]
10003354:	681b      	ldr	r3, [r3, #0]
10003356:	68ba      	ldr	r2, [r7, #8]
10003358:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
1000335a:	68fb      	ldr	r3, [r7, #12]
1000335c:	681b      	ldr	r3, [r3, #0]
1000335e:	689b      	ldr	r3, [r3, #8]
10003360:	f023 0118 	bic.w	r1, r3, #24
10003364:	68fb      	ldr	r3, [r7, #12]
10003366:	681b      	ldr	r3, [r3, #0]
10003368:	687a      	ldr	r2, [r7, #4]
1000336a:	430a      	orrs	r2, r1
1000336c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
1000336e:	7dfb      	ldrb	r3, [r7, #23]
}
10003370:	4618      	mov	r0, r3
10003372:	371c      	adds	r7, #28
10003374:	46bd      	mov	sp, r7
10003376:	f85d 7b04 	ldr.w	r7, [sp], #4
1000337a:	4770      	bx	lr

1000337c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
1000337c:	b580      	push	{r7, lr}
1000337e:	b086      	sub	sp, #24
10003380:	af00      	add	r7, sp, #0
10003382:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
10003384:	f7fe fb46 	bl	10001a14 <HAL_GetTick>
10003388:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
1000338a:	687b      	ldr	r3, [r7, #4]
1000338c:	2b00      	cmp	r3, #0
1000338e:	d101      	bne.n	10003394 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
10003390:	2301      	movs	r3, #1
10003392:	e0e7      	b.n	10003564 <HAL_DMA_Init+0x1e8>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_INSTANCE(hdma) != 0U) /* DMA1 or DMA2 instance */
10003394:	687b      	ldr	r3, [r7, #4]
10003396:	681b      	ldr	r3, [r3, #0]
10003398:	461a      	mov	r2, r3
1000339a:	4b74      	ldr	r3, [pc, #464]	; (1000356c <HAL_DMA_Init+0x1f0>)
1000339c:	429a      	cmp	r2, r3
1000339e:	d907      	bls.n	100033b0 <HAL_DMA_Init+0x34>
100033a0:	687b      	ldr	r3, [r7, #4]
100033a2:	681b      	ldr	r3, [r3, #0]
100033a4:	461a      	mov	r2, r3
100033a6:	4b72      	ldr	r3, [pc, #456]	; (10003570 <HAL_DMA_Init+0x1f4>)
100033a8:	429a      	cmp	r2, r3
100033aa:	d801      	bhi.n	100033b0 <HAL_DMA_Init+0x34>
100033ac:	2301      	movs	r3, #1
100033ae:	e000      	b.n	100033b2 <HAL_DMA_Init+0x36>
100033b0:	2300      	movs	r3, #0
100033b2:	2b00      	cmp	r3, #0
100033b4:	f000 8099 	beq.w	100034ea <HAL_DMA_Init+0x16e>
    }



    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
100033b8:	687b      	ldr	r3, [r7, #4]
100033ba:	2202      	movs	r2, #2
100033bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
100033c0:	687b      	ldr	r3, [r7, #4]
100033c2:	2200      	movs	r2, #0
100033c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
100033c8:	687b      	ldr	r3, [r7, #4]
100033ca:	681b      	ldr	r3, [r3, #0]
100033cc:	681a      	ldr	r2, [r3, #0]
100033ce:	687b      	ldr	r3, [r7, #4]
100033d0:	681b      	ldr	r3, [r3, #0]
100033d2:	f022 0201 	bic.w	r2, r2, #1
100033d6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
100033d8:	e00f      	b.n	100033fa <HAL_DMA_Init+0x7e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
100033da:	f7fe fb1b 	bl	10001a14 <HAL_GetTick>
100033de:	4602      	mov	r2, r0
100033e0:	693b      	ldr	r3, [r7, #16]
100033e2:	1ad3      	subs	r3, r2, r3
100033e4:	2b05      	cmp	r3, #5
100033e6:	d908      	bls.n	100033fa <HAL_DMA_Init+0x7e>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
100033e8:	687b      	ldr	r3, [r7, #4]
100033ea:	2220      	movs	r2, #32
100033ec:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
100033ee:	687b      	ldr	r3, [r7, #4]
100033f0:	2203      	movs	r2, #3
100033f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
100033f6:	2301      	movs	r3, #1
100033f8:	e0b4      	b.n	10003564 <HAL_DMA_Init+0x1e8>
    while ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
100033fa:	687b      	ldr	r3, [r7, #4]
100033fc:	681b      	ldr	r3, [r3, #0]
100033fe:	681b      	ldr	r3, [r3, #0]
10003400:	f003 0301 	and.w	r3, r3, #1
10003404:	2b00      	cmp	r3, #0
10003406:	d1e8      	bne.n	100033da <HAL_DMA_Init+0x5e>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef *)hdma->Instance)->CR;
10003408:	687b      	ldr	r3, [r7, #4]
1000340a:	681b      	ldr	r3, [r3, #0]
1000340c:	681b      	ldr	r3, [r3, #0]
1000340e:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
10003410:	697a      	ldr	r2, [r7, #20]
10003412:	4b58      	ldr	r3, [pc, #352]	; (10003574 <HAL_DMA_Init+0x1f8>)
10003414:	4013      	ands	r3, r2
10003416:	617b      	str	r3, [r7, #20]
                                  DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                                  DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                                  DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
10003418:	687b      	ldr	r3, [r7, #4]
1000341a:	689a      	ldr	r2, [r3, #8]
                      hdma->Init.PeriphInc           | hdma->Init.MemInc           |
1000341c:	687b      	ldr	r3, [r7, #4]
1000341e:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
10003420:	431a      	orrs	r2, r3
                      hdma->Init.PeriphInc           | hdma->Init.MemInc           |
10003422:	687b      	ldr	r3, [r7, #4]
10003424:	691b      	ldr	r3, [r3, #16]
10003426:	431a      	orrs	r2, r3
                      hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
10003428:	687b      	ldr	r3, [r7, #4]
1000342a:	695b      	ldr	r3, [r3, #20]
                      hdma->Init.PeriphInc           | hdma->Init.MemInc           |
1000342c:	431a      	orrs	r2, r3
                      hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
1000342e:	687b      	ldr	r3, [r7, #4]
10003430:	699b      	ldr	r3, [r3, #24]
10003432:	431a      	orrs	r2, r3
                      hdma->Init.Mode                | hdma->Init.Priority;
10003434:	687b      	ldr	r3, [r7, #4]
10003436:	69db      	ldr	r3, [r3, #28]
                      hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
10003438:	431a      	orrs	r2, r3
                      hdma->Init.Mode                | hdma->Init.Priority;
1000343a:	687b      	ldr	r3, [r7, #4]
1000343c:	6a1b      	ldr	r3, [r3, #32]
1000343e:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
10003440:	697a      	ldr	r2, [r7, #20]
10003442:	4313      	orrs	r3, r2
10003444:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
10003446:	687b      	ldr	r3, [r7, #4]
10003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000344a:	2b04      	cmp	r3, #4
1000344c:	d107      	bne.n	1000345e <HAL_DMA_Init+0xe2>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
1000344e:	687b      	ldr	r3, [r7, #4]
10003450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10003452:	687b      	ldr	r3, [r7, #4]
10003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10003456:	4313      	orrs	r3, r2
10003458:	697a      	ldr	r2, [r7, #20]
1000345a:	4313      	orrs	r3, r2
1000345c:	617b      	str	r3, [r7, #20]
    }

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR = registerValue;
1000345e:	687b      	ldr	r3, [r7, #4]
10003460:	681b      	ldr	r3, [r3, #0]
10003462:	697a      	ldr	r2, [r7, #20]
10003464:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef *)hdma->Instance)->FCR;
10003466:	687b      	ldr	r3, [r7, #4]
10003468:	681b      	ldr	r3, [r3, #0]
1000346a:	695b      	ldr	r3, [r3, #20]
1000346c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
1000346e:	697b      	ldr	r3, [r7, #20]
10003470:	f023 0307 	bic.w	r3, r3, #7
10003474:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
10003476:	687b      	ldr	r3, [r7, #4]
10003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000347a:	697a      	ldr	r2, [r7, #20]
1000347c:	4313      	orrs	r3, r2
1000347e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
10003480:	687b      	ldr	r3, [r7, #4]
10003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003484:	2b04      	cmp	r3, #4
10003486:	d117      	bne.n	100034b8 <HAL_DMA_Init+0x13c>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
10003488:	687b      	ldr	r3, [r7, #4]
1000348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000348c:	697a      	ldr	r2, [r7, #20]
1000348e:	4313      	orrs	r3, r2
10003490:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
10003492:	687b      	ldr	r3, [r7, #4]
10003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10003496:	2b00      	cmp	r3, #0
10003498:	d00e      	beq.n	100034b8 <HAL_DMA_Init+0x13c>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
1000349a:	6878      	ldr	r0, [r7, #4]
1000349c:	f000 fa66 	bl	1000396c <DMA_CheckFifoParam>
100034a0:	4603      	mov	r3, r0
100034a2:	2b00      	cmp	r3, #0
100034a4:	d008      	beq.n	100034b8 <HAL_DMA_Init+0x13c>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
100034a6:	687b      	ldr	r3, [r7, #4]
100034a8:	2240      	movs	r2, #64	; 0x40
100034aa:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
100034ac:	687b      	ldr	r3, [r7, #4]
100034ae:	2201      	movs	r2, #1
100034b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
100034b4:	2301      	movs	r3, #1
100034b6:	e055      	b.n	10003564 <HAL_DMA_Init+0x1e8>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef *)hdma->Instance)->FCR = registerValue;
100034b8:	687b      	ldr	r3, [r7, #4]
100034ba:	681b      	ldr	r3, [r3, #0]
100034bc:	697a      	ldr	r2, [r7, #20]
100034be:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
100034c0:	6878      	ldr	r0, [r7, #4]
100034c2:	f000 fa1d 	bl	10003900 <DMA_CalcBaseAndBitshift>
100034c6:	4603      	mov	r3, r0
100034c8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
     regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
100034ca:	687b      	ldr	r3, [r7, #4]
100034cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
100034ce:	f003 031f 	and.w	r3, r3, #31
100034d2:	223f      	movs	r2, #63	; 0x3f
100034d4:	409a      	lsls	r2, r3
100034d6:	68fb      	ldr	r3, [r7, #12]
100034d8:	609a      	str	r2, [r3, #8]
  }

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
100034da:	6878      	ldr	r0, [r7, #4]
100034dc:	f000 fac2 	bl	10003a64 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
100034e0:	687b      	ldr	r3, [r7, #4]
100034e2:	689b      	ldr	r3, [r3, #8]
100034e4:	2b80      	cmp	r3, #128	; 0x80
100034e6:	d10c      	bne.n	10003502 <HAL_DMA_Init+0x186>
100034e8:	e008      	b.n	100034fc <HAL_DMA_Init+0x180>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
100034ea:	687b      	ldr	r3, [r7, #4]
100034ec:	2240      	movs	r2, #64	; 0x40
100034ee:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
100034f0:	687b      	ldr	r3, [r7, #4]
100034f2:	2203      	movs	r2, #3
100034f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    return HAL_ERROR;
100034f8:	2301      	movs	r3, #1
100034fa:	e033      	b.n	10003564 <HAL_DMA_Init+0x1e8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
100034fc:	687b      	ldr	r3, [r7, #4]
100034fe:	2200      	movs	r2, #0
10003500:	605a      	str	r2, [r3, #4]
  }


  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
10003502:	687b      	ldr	r3, [r7, #4]
10003504:	685a      	ldr	r2, [r3, #4]
10003506:	687b      	ldr	r3, [r7, #4]
10003508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
1000350a:	b2d2      	uxtb	r2, r2
1000350c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
1000350e:	687b      	ldr	r3, [r7, #4]
10003510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
10003512:	687a      	ldr	r2, [r7, #4]
10003514:	6e92      	ldr	r2, [r2, #104]	; 0x68
10003516:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX request generator :
     if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
  */

  if ((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
10003518:	687b      	ldr	r3, [r7, #4]
1000351a:	685b      	ldr	r3, [r3, #4]
1000351c:	2b00      	cmp	r3, #0
1000351e:	d010      	beq.n	10003542 <HAL_DMA_Init+0x1c6>
10003520:	687b      	ldr	r3, [r7, #4]
10003522:	685b      	ldr	r3, [r3, #4]
10003524:	2b08      	cmp	r3, #8
10003526:	d80c      	bhi.n	10003542 <HAL_DMA_Init+0x1c6>
  {
    /* Initialize parameters for DMAMUX request generator :
    DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
10003528:	6878      	ldr	r0, [r7, #4]
1000352a:	f000 fad7 	bl	10003adc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
1000352e:	687b      	ldr	r3, [r7, #4]
10003530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
10003532:	2200      	movs	r2, #0
10003534:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
10003536:	687b      	ldr	r3, [r7, #4]
10003538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
1000353a:	687a      	ldr	r2, [r7, #4]
1000353c:	6f52      	ldr	r2, [r2, #116]	; 0x74
1000353e:	605a      	str	r2, [r3, #4]
10003540:	e008      	b.n	10003554 <HAL_DMA_Init+0x1d8>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
10003542:	687b      	ldr	r3, [r7, #4]
10003544:	2200      	movs	r2, #0
10003546:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
10003548:	687b      	ldr	r3, [r7, #4]
1000354a:	2200      	movs	r2, #0
1000354c:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
1000354e:	687b      	ldr	r3, [r7, #4]
10003550:	2200      	movs	r2, #0
10003552:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
10003554:	687b      	ldr	r3, [r7, #4]
10003556:	2200      	movs	r2, #0
10003558:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
1000355a:	687b      	ldr	r3, [r7, #4]
1000355c:	2201      	movs	r2, #1
1000355e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
10003562:	2300      	movs	r3, #0
}
10003564:	4618      	mov	r0, r3
10003566:	3718      	adds	r7, #24
10003568:	46bd      	mov	sp, r7
1000356a:	bd80      	pop	{r7, pc}
1000356c:	4800000f 	.word	0x4800000f
10003570:	480010b8 	.word	0x480010b8
10003574:	fe10803f 	.word	0xfe10803f

10003578 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
10003578:	b580      	push	{r7, lr}
1000357a:	b086      	sub	sp, #24
1000357c:	af00      	add	r7, sp, #0
1000357e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma;
  __IO uint32_t count = 0U;
10003580:	2300      	movs	r3, #0
10003582:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
10003584:	4b97      	ldr	r3, [pc, #604]	; (100037e4 <HAL_DMA_IRQHandler+0x26c>)
10003586:	681b      	ldr	r3, [r3, #0]
10003588:	4a97      	ldr	r2, [pc, #604]	; (100037e8 <HAL_DMA_IRQHandler+0x270>)
1000358a:	fba2 2303 	umull	r2, r3, r2, r3
1000358e:	0a9b      	lsrs	r3, r3, #10
10003590:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
10003592:	687b      	ldr	r3, [r7, #4]
10003594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10003596:	613b      	str	r3, [r7, #16]

  tmpisr_dma = regs_dma->ISR;
10003598:	693b      	ldr	r3, [r7, #16]
1000359a:	681b      	ldr	r3, [r3, #0]
1000359c:	60fb      	str	r3, [r7, #12]

  if(IS_DMA_INSTANCE(hdma) != 0U)  /* DMA1 or DMA2 instance */
1000359e:	687b      	ldr	r3, [r7, #4]
100035a0:	681b      	ldr	r3, [r3, #0]
100035a2:	461a      	mov	r2, r3
100035a4:	4b91      	ldr	r3, [pc, #580]	; (100037ec <HAL_DMA_IRQHandler+0x274>)
100035a6:	429a      	cmp	r2, r3
100035a8:	d907      	bls.n	100035ba <HAL_DMA_IRQHandler+0x42>
100035aa:	687b      	ldr	r3, [r7, #4]
100035ac:	681b      	ldr	r3, [r3, #0]
100035ae:	461a      	mov	r2, r3
100035b0:	4b8f      	ldr	r3, [pc, #572]	; (100037f0 <HAL_DMA_IRQHandler+0x278>)
100035b2:	429a      	cmp	r2, r3
100035b4:	d801      	bhi.n	100035ba <HAL_DMA_IRQHandler+0x42>
100035b6:	2301      	movs	r3, #1
100035b8:	e000      	b.n	100035bc <HAL_DMA_IRQHandler+0x44>
100035ba:	2300      	movs	r3, #0
100035bc:	2b00      	cmp	r3, #0
100035be:	f000 819b 	beq.w	100038f8 <HAL_DMA_IRQHandler+0x380>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
100035c2:	687b      	ldr	r3, [r7, #4]
100035c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
100035c6:	f003 031f 	and.w	r3, r3, #31
100035ca:	2208      	movs	r2, #8
100035cc:	409a      	lsls	r2, r3
100035ce:	68fb      	ldr	r3, [r7, #12]
100035d0:	4013      	ands	r3, r2
100035d2:	2b00      	cmp	r3, #0
100035d4:	d01c      	beq.n	10003610 <HAL_DMA_IRQHandler+0x98>
    {
      if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
100035d6:	687b      	ldr	r3, [r7, #4]
100035d8:	681b      	ldr	r3, [r3, #0]
100035da:	681b      	ldr	r3, [r3, #0]
100035dc:	f003 0304 	and.w	r3, r3, #4
100035e0:	2b00      	cmp	r3, #0
100035e2:	d015      	beq.n	10003610 <HAL_DMA_IRQHandler+0x98>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
100035e4:	687b      	ldr	r3, [r7, #4]
100035e6:	681b      	ldr	r3, [r3, #0]
100035e8:	681a      	ldr	r2, [r3, #0]
100035ea:	687b      	ldr	r3, [r7, #4]
100035ec:	681b      	ldr	r3, [r3, #0]
100035ee:	f022 0204 	bic.w	r2, r2, #4
100035f2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
100035f4:	687b      	ldr	r3, [r7, #4]
100035f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
100035f8:	f003 031f 	and.w	r3, r3, #31
100035fc:	2208      	movs	r2, #8
100035fe:	409a      	lsls	r2, r3
10003600:	693b      	ldr	r3, [r7, #16]
10003602:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
10003604:	687b      	ldr	r3, [r7, #4]
10003606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10003608:	f043 0201 	orr.w	r2, r3, #1
1000360c:	687b      	ldr	r3, [r7, #4]
1000360e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
10003610:	687b      	ldr	r3, [r7, #4]
10003612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
10003614:	f003 031f 	and.w	r3, r3, #31
10003618:	68fa      	ldr	r2, [r7, #12]
1000361a:	fa22 f303 	lsr.w	r3, r2, r3
1000361e:	f003 0301 	and.w	r3, r3, #1
10003622:	2b00      	cmp	r3, #0
10003624:	d014      	beq.n	10003650 <HAL_DMA_IRQHandler+0xd8>
    {
      if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
10003626:	687b      	ldr	r3, [r7, #4]
10003628:	681b      	ldr	r3, [r3, #0]
1000362a:	695b      	ldr	r3, [r3, #20]
1000362c:	f003 0380 	and.w	r3, r3, #128	; 0x80
10003630:	2b00      	cmp	r3, #0
10003632:	d00d      	beq.n	10003650 <HAL_DMA_IRQHandler+0xd8>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
10003634:	687b      	ldr	r3, [r7, #4]
10003636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
10003638:	f003 031f 	and.w	r3, r3, #31
1000363c:	2201      	movs	r2, #1
1000363e:	409a      	lsls	r2, r3
10003640:	693b      	ldr	r3, [r7, #16]
10003642:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
10003644:	687b      	ldr	r3, [r7, #4]
10003646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10003648:	f043 0202 	orr.w	r2, r3, #2
1000364c:	687b      	ldr	r3, [r7, #4]
1000364e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
10003650:	687b      	ldr	r3, [r7, #4]
10003652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
10003654:	f003 031f 	and.w	r3, r3, #31
10003658:	2204      	movs	r2, #4
1000365a:	409a      	lsls	r2, r3
1000365c:	68fb      	ldr	r3, [r7, #12]
1000365e:	4013      	ands	r3, r2
10003660:	2b00      	cmp	r3, #0
10003662:	d014      	beq.n	1000368e <HAL_DMA_IRQHandler+0x116>
    {
      if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
10003664:	687b      	ldr	r3, [r7, #4]
10003666:	681b      	ldr	r3, [r3, #0]
10003668:	681b      	ldr	r3, [r3, #0]
1000366a:	f003 0302 	and.w	r3, r3, #2
1000366e:	2b00      	cmp	r3, #0
10003670:	d00d      	beq.n	1000368e <HAL_DMA_IRQHandler+0x116>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
10003672:	687b      	ldr	r3, [r7, #4]
10003674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
10003676:	f003 031f 	and.w	r3, r3, #31
1000367a:	2204      	movs	r2, #4
1000367c:	409a      	lsls	r2, r3
1000367e:	693b      	ldr	r3, [r7, #16]
10003680:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
10003682:	687b      	ldr	r3, [r7, #4]
10003684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10003686:	f043 0204 	orr.w	r2, r3, #4
1000368a:	687b      	ldr	r3, [r7, #4]
1000368c:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
1000368e:	687b      	ldr	r3, [r7, #4]
10003690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
10003692:	f003 031f 	and.w	r3, r3, #31
10003696:	2210      	movs	r2, #16
10003698:	409a      	lsls	r2, r3
1000369a:	68fb      	ldr	r3, [r7, #12]
1000369c:	4013      	ands	r3, r2
1000369e:	2b00      	cmp	r3, #0
100036a0:	d045      	beq.n	1000372e <HAL_DMA_IRQHandler+0x1b6>
    {
      if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
100036a2:	687b      	ldr	r3, [r7, #4]
100036a4:	681b      	ldr	r3, [r3, #0]
100036a6:	681b      	ldr	r3, [r3, #0]
100036a8:	f003 0308 	and.w	r3, r3, #8
100036ac:	2b00      	cmp	r3, #0
100036ae:	d03e      	beq.n	1000372e <HAL_DMA_IRQHandler+0x1b6>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
100036b0:	687b      	ldr	r3, [r7, #4]
100036b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
100036b4:	f003 031f 	and.w	r3, r3, #31
100036b8:	2210      	movs	r2, #16
100036ba:	409a      	lsls	r2, r3
100036bc:	693b      	ldr	r3, [r7, #16]
100036be:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if (((((DMA_Stream_TypeDef *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
100036c0:	687b      	ldr	r3, [r7, #4]
100036c2:	681b      	ldr	r3, [r3, #0]
100036c4:	681b      	ldr	r3, [r3, #0]
100036c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
100036ca:	2b00      	cmp	r3, #0
100036cc:	d018      	beq.n	10003700 <HAL_DMA_IRQHandler+0x188>
        {
          /* Current memory buffer used is Memory 0 */
          if ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
100036ce:	687b      	ldr	r3, [r7, #4]
100036d0:	681b      	ldr	r3, [r3, #0]
100036d2:	681b      	ldr	r3, [r3, #0]
100036d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
100036d8:	2b00      	cmp	r3, #0
100036da:	d108      	bne.n	100036ee <HAL_DMA_IRQHandler+0x176>
          {
            if (hdma->XferHalfCpltCallback != NULL)
100036dc:	687b      	ldr	r3, [r7, #4]
100036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100036e0:	2b00      	cmp	r3, #0
100036e2:	d024      	beq.n	1000372e <HAL_DMA_IRQHandler+0x1b6>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
100036e4:	687b      	ldr	r3, [r7, #4]
100036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100036e8:	6878      	ldr	r0, [r7, #4]
100036ea:	4798      	blx	r3
100036ec:	e01f      	b.n	1000372e <HAL_DMA_IRQHandler+0x1b6>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if (hdma->XferM1HalfCpltCallback != NULL)
100036ee:	687b      	ldr	r3, [r7, #4]
100036f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100036f2:	2b00      	cmp	r3, #0
100036f4:	d01b      	beq.n	1000372e <HAL_DMA_IRQHandler+0x1b6>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
100036f6:	687b      	ldr	r3, [r7, #4]
100036f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100036fa:	6878      	ldr	r0, [r7, #4]
100036fc:	4798      	blx	r3
100036fe:	e016      	b.n	1000372e <HAL_DMA_IRQHandler+0x1b6>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
10003700:	687b      	ldr	r3, [r7, #4]
10003702:	681b      	ldr	r3, [r3, #0]
10003704:	681b      	ldr	r3, [r3, #0]
10003706:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000370a:	2b00      	cmp	r3, #0
1000370c:	d107      	bne.n	1000371e <HAL_DMA_IRQHandler+0x1a6>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
1000370e:	687b      	ldr	r3, [r7, #4]
10003710:	681b      	ldr	r3, [r3, #0]
10003712:	681a      	ldr	r2, [r3, #0]
10003714:	687b      	ldr	r3, [r7, #4]
10003716:	681b      	ldr	r3, [r3, #0]
10003718:	f022 0208 	bic.w	r2, r2, #8
1000371c:	601a      	str	r2, [r3, #0]
          }

          if (hdma->XferHalfCpltCallback != NULL)
1000371e:	687b      	ldr	r3, [r7, #4]
10003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10003722:	2b00      	cmp	r3, #0
10003724:	d003      	beq.n	1000372e <HAL_DMA_IRQHandler+0x1b6>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
10003726:	687b      	ldr	r3, [r7, #4]
10003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000372a:	6878      	ldr	r0, [r7, #4]
1000372c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
1000372e:	687b      	ldr	r3, [r7, #4]
10003730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
10003732:	f003 031f 	and.w	r3, r3, #31
10003736:	2220      	movs	r2, #32
10003738:	409a      	lsls	r2, r3
1000373a:	68fb      	ldr	r3, [r7, #12]
1000373c:	4013      	ands	r3, r2
1000373e:	2b00      	cmp	r3, #0
10003740:	f000 8097 	beq.w	10003872 <HAL_DMA_IRQHandler+0x2fa>
    {
      if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
10003744:	687b      	ldr	r3, [r7, #4]
10003746:	681b      	ldr	r3, [r3, #0]
10003748:	681b      	ldr	r3, [r3, #0]
1000374a:	f003 0310 	and.w	r3, r3, #16
1000374e:	2b00      	cmp	r3, #0
10003750:	f000 808f 	beq.w	10003872 <HAL_DMA_IRQHandler+0x2fa>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
10003754:	687b      	ldr	r3, [r7, #4]
10003756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
10003758:	f003 031f 	and.w	r3, r3, #31
1000375c:	2220      	movs	r2, #32
1000375e:	409a      	lsls	r2, r3
10003760:	693b      	ldr	r3, [r7, #16]
10003762:	609a      	str	r2, [r3, #8]

        if (HAL_DMA_STATE_ABORT == hdma->State)
10003764:	687b      	ldr	r3, [r7, #4]
10003766:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
1000376a:	b2db      	uxtb	r3, r3
1000376c:	2b04      	cmp	r3, #4
1000376e:	d141      	bne.n	100037f4 <HAL_DMA_IRQHandler+0x27c>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
10003770:	687b      	ldr	r3, [r7, #4]
10003772:	681b      	ldr	r3, [r3, #0]
10003774:	681a      	ldr	r2, [r3, #0]
10003776:	687b      	ldr	r3, [r7, #4]
10003778:	681b      	ldr	r3, [r3, #0]
1000377a:	f022 0216 	bic.w	r2, r2, #22
1000377e:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
10003780:	687b      	ldr	r3, [r7, #4]
10003782:	681b      	ldr	r3, [r3, #0]
10003784:	695a      	ldr	r2, [r3, #20]
10003786:	687b      	ldr	r3, [r7, #4]
10003788:	681b      	ldr	r3, [r3, #0]
1000378a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1000378e:	615a      	str	r2, [r3, #20]

          if ((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
10003790:	687b      	ldr	r3, [r7, #4]
10003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10003794:	2b00      	cmp	r3, #0
10003796:	d103      	bne.n	100037a0 <HAL_DMA_IRQHandler+0x228>
10003798:	687b      	ldr	r3, [r7, #4]
1000379a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000379c:	2b00      	cmp	r3, #0
1000379e:	d007      	beq.n	100037b0 <HAL_DMA_IRQHandler+0x238>
          {
            ((DMA_Stream_TypeDef *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
100037a0:	687b      	ldr	r3, [r7, #4]
100037a2:	681b      	ldr	r3, [r3, #0]
100037a4:	681a      	ldr	r2, [r3, #0]
100037a6:	687b      	ldr	r3, [r7, #4]
100037a8:	681b      	ldr	r3, [r3, #0]
100037aa:	f022 0208 	bic.w	r2, r2, #8
100037ae:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
100037b0:	687b      	ldr	r3, [r7, #4]
100037b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
100037b4:	f003 031f 	and.w	r3, r3, #31
100037b8:	223f      	movs	r2, #63	; 0x3f
100037ba:	409a      	lsls	r2, r3
100037bc:	693b      	ldr	r3, [r7, #16]
100037be:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
100037c0:	687b      	ldr	r3, [r7, #4]
100037c2:	2201      	movs	r2, #1
100037c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
100037c8:	687b      	ldr	r3, [r7, #4]
100037ca:	2200      	movs	r2, #0
100037cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if (hdma->XferAbortCallback != NULL)
100037d0:	687b      	ldr	r3, [r7, #4]
100037d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
100037d4:	2b00      	cmp	r3, #0
100037d6:	f000 808e 	beq.w	100038f6 <HAL_DMA_IRQHandler+0x37e>
          {
            hdma->XferAbortCallback(hdma);
100037da:	687b      	ldr	r3, [r7, #4]
100037dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
100037de:	6878      	ldr	r0, [r7, #4]
100037e0:	4798      	blx	r3
          }
          return;
100037e2:	e088      	b.n	100038f6 <HAL_DMA_IRQHandler+0x37e>
100037e4:	10020000 	.word	0x10020000
100037e8:	1b4e81b5 	.word	0x1b4e81b5
100037ec:	4800000f 	.word	0x4800000f
100037f0:	480010b8 	.word	0x480010b8
        }

        if (((((DMA_Stream_TypeDef *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
100037f4:	687b      	ldr	r3, [r7, #4]
100037f6:	681b      	ldr	r3, [r3, #0]
100037f8:	681b      	ldr	r3, [r3, #0]
100037fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
100037fe:	2b00      	cmp	r3, #0
10003800:	d018      	beq.n	10003834 <HAL_DMA_IRQHandler+0x2bc>
        {
          /* Current memory buffer used is Memory 0 */
          if ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
10003802:	687b      	ldr	r3, [r7, #4]
10003804:	681b      	ldr	r3, [r3, #0]
10003806:	681b      	ldr	r3, [r3, #0]
10003808:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
1000380c:	2b00      	cmp	r3, #0
1000380e:	d108      	bne.n	10003822 <HAL_DMA_IRQHandler+0x2aa>
          {
            if (hdma->XferM1CpltCallback != NULL)
10003810:	687b      	ldr	r3, [r7, #4]
10003812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10003814:	2b00      	cmp	r3, #0
10003816:	d02c      	beq.n	10003872 <HAL_DMA_IRQHandler+0x2fa>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
10003818:	687b      	ldr	r3, [r7, #4]
1000381a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1000381c:	6878      	ldr	r0, [r7, #4]
1000381e:	4798      	blx	r3
10003820:	e027      	b.n	10003872 <HAL_DMA_IRQHandler+0x2fa>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if (hdma->XferCpltCallback != NULL)
10003822:	687b      	ldr	r3, [r7, #4]
10003824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10003826:	2b00      	cmp	r3, #0
10003828:	d023      	beq.n	10003872 <HAL_DMA_IRQHandler+0x2fa>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
1000382a:	687b      	ldr	r3, [r7, #4]
1000382c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000382e:	6878      	ldr	r0, [r7, #4]
10003830:	4798      	blx	r3
10003832:	e01e      	b.n	10003872 <HAL_DMA_IRQHandler+0x2fa>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
10003834:	687b      	ldr	r3, [r7, #4]
10003836:	681b      	ldr	r3, [r3, #0]
10003838:	681b      	ldr	r3, [r3, #0]
1000383a:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000383e:	2b00      	cmp	r3, #0
10003840:	d10f      	bne.n	10003862 <HAL_DMA_IRQHandler+0x2ea>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
10003842:	687b      	ldr	r3, [r7, #4]
10003844:	681b      	ldr	r3, [r3, #0]
10003846:	681a      	ldr	r2, [r3, #0]
10003848:	687b      	ldr	r3, [r7, #4]
1000384a:	681b      	ldr	r3, [r3, #0]
1000384c:	f022 0210 	bic.w	r2, r2, #16
10003850:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
10003852:	687b      	ldr	r3, [r7, #4]
10003854:	2201      	movs	r2, #1
10003856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
1000385a:	687b      	ldr	r3, [r7, #4]
1000385c:	2200      	movs	r2, #0
1000385e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if (hdma->XferCpltCallback != NULL)
10003862:	687b      	ldr	r3, [r7, #4]
10003864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10003866:	2b00      	cmp	r3, #0
10003868:	d003      	beq.n	10003872 <HAL_DMA_IRQHandler+0x2fa>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
1000386a:	687b      	ldr	r3, [r7, #4]
1000386c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000386e:	6878      	ldr	r0, [r7, #4]
10003870:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
10003872:	687b      	ldr	r3, [r7, #4]
10003874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10003876:	2b00      	cmp	r3, #0
10003878:	d03e      	beq.n	100038f8 <HAL_DMA_IRQHandler+0x380>
    {
      if ((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
1000387a:	687b      	ldr	r3, [r7, #4]
1000387c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000387e:	f003 0301 	and.w	r3, r3, #1
10003882:	2b00      	cmp	r3, #0
10003884:	d02e      	beq.n	100038e4 <HAL_DMA_IRQHandler+0x36c>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
10003886:	687b      	ldr	r3, [r7, #4]
10003888:	2204      	movs	r2, #4
1000388a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
1000388e:	687b      	ldr	r3, [r7, #4]
10003890:	681b      	ldr	r3, [r3, #0]
10003892:	681a      	ldr	r2, [r3, #0]
10003894:	687b      	ldr	r3, [r7, #4]
10003896:	681b      	ldr	r3, [r3, #0]
10003898:	f022 0201 	bic.w	r2, r2, #1
1000389c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
1000389e:	68bb      	ldr	r3, [r7, #8]
100038a0:	3301      	adds	r3, #1
100038a2:	60bb      	str	r3, [r7, #8]
100038a4:	697a      	ldr	r2, [r7, #20]
100038a6:	429a      	cmp	r2, r3
100038a8:	d307      	bcc.n	100038ba <HAL_DMA_IRQHandler+0x342>
          {
            break;
          }
        }
        while ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
100038aa:	687b      	ldr	r3, [r7, #4]
100038ac:	681b      	ldr	r3, [r3, #0]
100038ae:	681b      	ldr	r3, [r3, #0]
100038b0:	f003 0301 	and.w	r3, r3, #1
100038b4:	2b00      	cmp	r3, #0
100038b6:	d1f2      	bne.n	1000389e <HAL_DMA_IRQHandler+0x326>
100038b8:	e000      	b.n	100038bc <HAL_DMA_IRQHandler+0x344>
            break;
100038ba:	bf00      	nop

        if ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
100038bc:	687b      	ldr	r3, [r7, #4]
100038be:	681b      	ldr	r3, [r3, #0]
100038c0:	681b      	ldr	r3, [r3, #0]
100038c2:	f003 0301 	and.w	r3, r3, #1
100038c6:	2b00      	cmp	r3, #0
100038c8:	d004      	beq.n	100038d4 <HAL_DMA_IRQHandler+0x35c>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
100038ca:	687b      	ldr	r3, [r7, #4]
100038cc:	2203      	movs	r2, #3
100038ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
100038d2:	e003      	b.n	100038dc <HAL_DMA_IRQHandler+0x364>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
100038d4:	687b      	ldr	r3, [r7, #4]
100038d6:	2201      	movs	r2, #1
100038d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
100038dc:	687b      	ldr	r3, [r7, #4]
100038de:	2200      	movs	r2, #0
100038e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if (hdma->XferErrorCallback != NULL)
100038e4:	687b      	ldr	r3, [r7, #4]
100038e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
100038e8:	2b00      	cmp	r3, #0
100038ea:	d005      	beq.n	100038f8 <HAL_DMA_IRQHandler+0x380>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
100038ec:	687b      	ldr	r3, [r7, #4]
100038ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
100038f0:	6878      	ldr	r0, [r7, #4]
100038f2:	4798      	blx	r3
100038f4:	e000      	b.n	100038f8 <HAL_DMA_IRQHandler+0x380>
          return;
100038f6:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
100038f8:	3718      	adds	r7, #24
100038fa:	46bd      	mov	sp, r7
100038fc:	bd80      	pop	{r7, pc}
100038fe:	bf00      	nop

10003900 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
10003900:	b480      	push	{r7}
10003902:	b085      	sub	sp, #20
10003904:	af00      	add	r7, sp, #0
10003906:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)((uint32_t *)hdma->Instance) & 0xFFU) - 16U) / 24U;
10003908:	687b      	ldr	r3, [r7, #4]
1000390a:	681b      	ldr	r3, [r3, #0]
1000390c:	b2db      	uxtb	r3, r3
1000390e:	3b10      	subs	r3, #16
10003910:	4a14      	ldr	r2, [pc, #80]	; (10003964 <DMA_CalcBaseAndBitshift+0x64>)
10003912:	fba2 2303 	umull	r2, r3, r2, r3
10003916:	091b      	lsrs	r3, r3, #4
10003918:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
1000391a:	68fb      	ldr	r3, [r7, #12]
1000391c:	f003 0307 	and.w	r3, r3, #7
10003920:	4a11      	ldr	r2, [pc, #68]	; (10003968 <DMA_CalcBaseAndBitshift+0x68>)
10003922:	5cd3      	ldrb	r3, [r2, r3]
10003924:	461a      	mov	r2, r3
10003926:	687b      	ldr	r3, [r7, #4]
10003928:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
1000392a:	68fb      	ldr	r3, [r7, #12]
1000392c:	2b03      	cmp	r3, #3
1000392e:	d909      	bls.n	10003944 <DMA_CalcBaseAndBitshift+0x44>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)((uint32_t *)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
10003930:	687b      	ldr	r3, [r7, #4]
10003932:	681b      	ldr	r3, [r3, #0]
10003934:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
10003938:	f023 0303 	bic.w	r3, r3, #3
1000393c:	1d1a      	adds	r2, r3, #4
1000393e:	687b      	ldr	r3, [r7, #4]
10003940:	659a      	str	r2, [r3, #88]	; 0x58
10003942:	e007      	b.n	10003954 <DMA_CalcBaseAndBitshift+0x54>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t *)hdma->Instance) & (uint32_t)(~0x3FFU));
10003944:	687b      	ldr	r3, [r7, #4]
10003946:	681b      	ldr	r3, [r3, #0]
10003948:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
1000394c:	f023 0303 	bic.w	r3, r3, #3
10003950:	687a      	ldr	r2, [r7, #4]
10003952:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
10003954:	687b      	ldr	r3, [r7, #4]
10003956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
10003958:	4618      	mov	r0, r3
1000395a:	3714      	adds	r7, #20
1000395c:	46bd      	mov	sp, r7
1000395e:	f85d 7b04 	ldr.w	r7, [sp], #4
10003962:	4770      	bx	lr
10003964:	aaaaaaab 	.word	0xaaaaaaab
10003968:	10013280 	.word	0x10013280

1000396c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
1000396c:	b480      	push	{r7}
1000396e:	b085      	sub	sp, #20
10003970:	af00      	add	r7, sp, #0
10003972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
10003974:	2300      	movs	r3, #0
10003976:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
10003978:	687b      	ldr	r3, [r7, #4]
1000397a:	699b      	ldr	r3, [r3, #24]
1000397c:	2b00      	cmp	r3, #0
1000397e:	d120      	bne.n	100039c2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
10003980:	687b      	ldr	r3, [r7, #4]
10003982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10003984:	2b03      	cmp	r3, #3
10003986:	d858      	bhi.n	10003a3a <DMA_CheckFifoParam+0xce>
10003988:	a201      	add	r2, pc, #4	; (adr r2, 10003990 <DMA_CheckFifoParam+0x24>)
1000398a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000398e:	bf00      	nop
10003990:	100039a1 	.word	0x100039a1
10003994:	100039b3 	.word	0x100039b3
10003998:	100039a1 	.word	0x100039a1
1000399c:	10003a3b 	.word	0x10003a3b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
100039a0:	687b      	ldr	r3, [r7, #4]
100039a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100039a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
100039a8:	2b00      	cmp	r3, #0
100039aa:	d048      	beq.n	10003a3e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
100039ac:	2301      	movs	r3, #1
100039ae:	73fb      	strb	r3, [r7, #15]
        }
        break;
100039b0:	e045      	b.n	10003a3e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
100039b2:	687b      	ldr	r3, [r7, #4]
100039b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100039b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
100039ba:	d142      	bne.n	10003a42 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
100039bc:	2301      	movs	r3, #1
100039be:	73fb      	strb	r3, [r7, #15]
        }
        break;
100039c0:	e03f      	b.n	10003a42 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
100039c2:	687b      	ldr	r3, [r7, #4]
100039c4:	699b      	ldr	r3, [r3, #24]
100039c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
100039ca:	d123      	bne.n	10003a14 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
100039cc:	687b      	ldr	r3, [r7, #4]
100039ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100039d0:	2b03      	cmp	r3, #3
100039d2:	d838      	bhi.n	10003a46 <DMA_CheckFifoParam+0xda>
100039d4:	a201      	add	r2, pc, #4	; (adr r2, 100039dc <DMA_CheckFifoParam+0x70>)
100039d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100039da:	bf00      	nop
100039dc:	100039ed 	.word	0x100039ed
100039e0:	100039f3 	.word	0x100039f3
100039e4:	100039ed 	.word	0x100039ed
100039e8:	10003a05 	.word	0x10003a05
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
100039ec:	2301      	movs	r3, #1
100039ee:	73fb      	strb	r3, [r7, #15]
        break;
100039f0:	e030      	b.n	10003a54 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
100039f2:	687b      	ldr	r3, [r7, #4]
100039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100039f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
100039fa:	2b00      	cmp	r3, #0
100039fc:	d025      	beq.n	10003a4a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
100039fe:	2301      	movs	r3, #1
10003a00:	73fb      	strb	r3, [r7, #15]
        }
        break;
10003a02:	e022      	b.n	10003a4a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
10003a04:	687b      	ldr	r3, [r7, #4]
10003a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10003a08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
10003a0c:	d11f      	bne.n	10003a4e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
10003a0e:	2301      	movs	r3, #1
10003a10:	73fb      	strb	r3, [r7, #15]
        }
        break;
10003a12:	e01c      	b.n	10003a4e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
10003a14:	687b      	ldr	r3, [r7, #4]
10003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10003a18:	2b02      	cmp	r3, #2
10003a1a:	d902      	bls.n	10003a22 <DMA_CheckFifoParam+0xb6>
10003a1c:	2b03      	cmp	r3, #3
10003a1e:	d003      	beq.n	10003a28 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
        break;

      default:
        break;
10003a20:	e018      	b.n	10003a54 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
10003a22:	2301      	movs	r3, #1
10003a24:	73fb      	strb	r3, [r7, #15]
        break;
10003a26:	e015      	b.n	10003a54 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
10003a28:	687b      	ldr	r3, [r7, #4]
10003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10003a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
10003a30:	2b00      	cmp	r3, #0
10003a32:	d00e      	beq.n	10003a52 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
10003a34:	2301      	movs	r3, #1
10003a36:	73fb      	strb	r3, [r7, #15]
        break;
10003a38:	e00b      	b.n	10003a52 <DMA_CheckFifoParam+0xe6>
        break;
10003a3a:	bf00      	nop
10003a3c:	e00a      	b.n	10003a54 <DMA_CheckFifoParam+0xe8>
        break;
10003a3e:	bf00      	nop
10003a40:	e008      	b.n	10003a54 <DMA_CheckFifoParam+0xe8>
        break;
10003a42:	bf00      	nop
10003a44:	e006      	b.n	10003a54 <DMA_CheckFifoParam+0xe8>
        break;
10003a46:	bf00      	nop
10003a48:	e004      	b.n	10003a54 <DMA_CheckFifoParam+0xe8>
        break;
10003a4a:	bf00      	nop
10003a4c:	e002      	b.n	10003a54 <DMA_CheckFifoParam+0xe8>
        break;
10003a4e:	bf00      	nop
10003a50:	e000      	b.n	10003a54 <DMA_CheckFifoParam+0xe8>
        break;
10003a52:	bf00      	nop
    }
  }

  return status;
10003a54:	7bfb      	ldrb	r3, [r7, #15]
}
10003a56:	4618      	mov	r0, r3
10003a58:	3714      	adds	r7, #20
10003a5a:	46bd      	mov	sp, r7
10003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
10003a60:	4770      	bx	lr
10003a62:	bf00      	nop

10003a64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
10003a64:	b480      	push	{r7}
10003a66:	b085      	sub	sp, #20
10003a68:	af00      	add	r7, sp, #0
10003a6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t *)hdma->Instance);
10003a6c:	687b      	ldr	r3, [r7, #4]
10003a6e:	681b      	ldr	r3, [r3, #0]
10003a70:	60bb      	str	r3, [r7, #8]
  /*DMA1/DMA2 Streams are connected to DMAMUX1 channels*/
  stream_number = (((uint32_t)((uint32_t *)hdma->Instance) & 0xFFU) - 16U) / 24U;
10003a72:	687b      	ldr	r3, [r7, #4]
10003a74:	681b      	ldr	r3, [r3, #0]
10003a76:	b2db      	uxtb	r3, r3
10003a78:	3b10      	subs	r3, #16
10003a7a:	4a14      	ldr	r2, [pc, #80]	; (10003acc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
10003a7c:	fba2 2303 	umull	r2, r3, r2, r3
10003a80:	091b      	lsrs	r3, r3, #4
10003a82:	60fb      	str	r3, [r7, #12]

  if ((stream_baseaddress <= ((uint32_t)DMA2_Stream7)) && \
10003a84:	68bb      	ldr	r3, [r7, #8]
10003a86:	4a12      	ldr	r2, [pc, #72]	; (10003ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
10003a88:	4293      	cmp	r3, r2
10003a8a:	d806      	bhi.n	10003a9a <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
10003a8c:	68bb      	ldr	r3, [r7, #8]
10003a8e:	4a11      	ldr	r2, [pc, #68]	; (10003ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
10003a90:	4293      	cmp	r3, r2
10003a92:	d902      	bls.n	10003a9a <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
      (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
  {
    stream_number += 8U;
10003a94:	68fb      	ldr	r3, [r7, #12]
10003a96:	3308      	adds	r3, #8
10003a98:	60fb      	str	r3, [r7, #12]
  }

  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
10003a9a:	68fb      	ldr	r3, [r7, #12]
10003a9c:	f103 5390 	add.w	r3, r3, #301989888	; 0x12000000
10003aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
10003aa4:	009b      	lsls	r3, r3, #2
10003aa6:	461a      	mov	r2, r3
10003aa8:	687b      	ldr	r3, [r7, #4]
10003aaa:	661a      	str	r2, [r3, #96]	; 0x60
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
10003aac:	687b      	ldr	r3, [r7, #4]
10003aae:	4a0a      	ldr	r2, [pc, #40]	; (10003ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
10003ab0:	665a      	str	r2, [r3, #100]	; 0x64
  hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
10003ab2:	68fb      	ldr	r3, [r7, #12]
10003ab4:	f003 031f 	and.w	r3, r3, #31
10003ab8:	2201      	movs	r2, #1
10003aba:	409a      	lsls	r2, r3
10003abc:	687b      	ldr	r3, [r7, #4]
10003abe:	669a      	str	r2, [r3, #104]	; 0x68

}
10003ac0:	bf00      	nop
10003ac2:	3714      	adds	r7, #20
10003ac4:	46bd      	mov	sp, r7
10003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
10003aca:	4770      	bx	lr
10003acc:	aaaaaaab 	.word	0xaaaaaaab
10003ad0:	480010b8 	.word	0x480010b8
10003ad4:	4800100f 	.word	0x4800100f
10003ad8:	48002080 	.word	0x48002080

10003adc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
10003adc:	b480      	push	{r7}
10003ade:	b085      	sub	sp, #20
10003ae0:	af00      	add	r7, sp, #0
10003ae2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
10003ae4:	687b      	ldr	r3, [r7, #4]
10003ae6:	685b      	ldr	r3, [r3, #4]
10003ae8:	b2db      	uxtb	r3, r3
10003aea:	60fb      	str	r3, [r7, #12]

  if ((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
10003aec:	68fb      	ldr	r3, [r7, #12]
10003aee:	2b00      	cmp	r3, #0
10003af0:	d014      	beq.n	10003b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>
10003af2:	68fb      	ldr	r3, [r7, #12]
10003af4:	2b08      	cmp	r3, #8
10003af6:	d811      	bhi.n	10003b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>
  {
    /*DMA1 and DMA2 Streams use DMAMUX1 request generator blocks*/
    hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
10003af8:	68fb      	ldr	r3, [r7, #12]
10003afa:	f103 5390 	add.w	r3, r3, #301989888	; 0x12000000
10003afe:	f603 033f 	addw	r3, r3, #2111	; 0x83f
10003b02:	009b      	lsls	r3, r3, #2
10003b04:	461a      	mov	r2, r3
10003b06:	687b      	ldr	r3, [r7, #4]
10003b08:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
10003b0a:	687b      	ldr	r3, [r7, #4]
10003b0c:	4a06      	ldr	r2, [pc, #24]	; (10003b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4c>)
10003b0e:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
10003b10:	68fb      	ldr	r3, [r7, #12]
10003b12:	3b01      	subs	r3, #1
10003b14:	2201      	movs	r2, #1
10003b16:	409a      	lsls	r2, r3
10003b18:	687b      	ldr	r3, [r7, #4]
10003b1a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
10003b1c:	bf00      	nop
10003b1e:	3714      	adds	r7, #20
10003b20:	46bd      	mov	sp, r7
10003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
10003b26:	4770      	bx	lr
10003b28:	48002140 	.word	0x48002140

10003b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
10003b2c:	b480      	push	{r7}
10003b2e:	b089      	sub	sp, #36	; 0x24
10003b30:	af00      	add	r7, sp, #0
10003b32:	6078      	str	r0, [r7, #4]
10003b34:	6039      	str	r1, [r7, #0]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef * EXTI_CurrentCPU;

#if defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_C2; /* EXTI for CM4 CPU */
10003b36:	4b8a      	ldr	r3, [pc, #552]	; (10003d60 <HAL_GPIO_Init+0x234>)
10003b38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
10003b3a:	2300      	movs	r3, #0
10003b3c:	61fb      	str	r3, [r7, #28]
10003b3e:	e191      	b.n	10003e64 <HAL_GPIO_Init+0x338>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
10003b40:	2201      	movs	r2, #1
10003b42:	69fb      	ldr	r3, [r7, #28]
10003b44:	fa02 f303 	lsl.w	r3, r2, r3
10003b48:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
10003b4a:	683b      	ldr	r3, [r7, #0]
10003b4c:	681b      	ldr	r3, [r3, #0]
10003b4e:	693a      	ldr	r2, [r7, #16]
10003b50:	4013      	ands	r3, r2
10003b52:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
10003b54:	68fa      	ldr	r2, [r7, #12]
10003b56:	693b      	ldr	r3, [r7, #16]
10003b58:	429a      	cmp	r2, r3
10003b5a:	f040 8180 	bne.w	10003e5e <HAL_GPIO_Init+0x332>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10003b5e:	683b      	ldr	r3, [r7, #0]
10003b60:	685b      	ldr	r3, [r3, #4]
10003b62:	2b02      	cmp	r3, #2
10003b64:	d003      	beq.n	10003b6e <HAL_GPIO_Init+0x42>
10003b66:	683b      	ldr	r3, [r7, #0]
10003b68:	685b      	ldr	r3, [r3, #4]
10003b6a:	2b12      	cmp	r3, #18
10003b6c:	d123      	bne.n	10003bb6 <HAL_GPIO_Init+0x8a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
10003b6e:	69fb      	ldr	r3, [r7, #28]
10003b70:	08da      	lsrs	r2, r3, #3
10003b72:	687b      	ldr	r3, [r7, #4]
10003b74:	3208      	adds	r2, #8
10003b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
10003b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
10003b7c:	69fb      	ldr	r3, [r7, #28]
10003b7e:	f003 0307 	and.w	r3, r3, #7
10003b82:	009b      	lsls	r3, r3, #2
10003b84:	220f      	movs	r2, #15
10003b86:	fa02 f303 	lsl.w	r3, r2, r3
10003b8a:	43db      	mvns	r3, r3
10003b8c:	69ba      	ldr	r2, [r7, #24]
10003b8e:	4013      	ands	r3, r2
10003b90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
10003b92:	683b      	ldr	r3, [r7, #0]
10003b94:	691a      	ldr	r2, [r3, #16]
10003b96:	69fb      	ldr	r3, [r7, #28]
10003b98:	f003 0307 	and.w	r3, r3, #7
10003b9c:	009b      	lsls	r3, r3, #2
10003b9e:	fa02 f303 	lsl.w	r3, r2, r3
10003ba2:	69ba      	ldr	r2, [r7, #24]
10003ba4:	4313      	orrs	r3, r2
10003ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
10003ba8:	69fb      	ldr	r3, [r7, #28]
10003baa:	08da      	lsrs	r2, r3, #3
10003bac:	687b      	ldr	r3, [r7, #4]
10003bae:	3208      	adds	r2, #8
10003bb0:	69b9      	ldr	r1, [r7, #24]
10003bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
10003bb6:	687b      	ldr	r3, [r7, #4]
10003bb8:	681b      	ldr	r3, [r3, #0]
10003bba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
10003bbc:	69fb      	ldr	r3, [r7, #28]
10003bbe:	005b      	lsls	r3, r3, #1
10003bc0:	2203      	movs	r2, #3
10003bc2:	fa02 f303 	lsl.w	r3, r2, r3
10003bc6:	43db      	mvns	r3, r3
10003bc8:	69ba      	ldr	r2, [r7, #24]
10003bca:	4013      	ands	r3, r2
10003bcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
10003bce:	683b      	ldr	r3, [r7, #0]
10003bd0:	685b      	ldr	r3, [r3, #4]
10003bd2:	f003 0203 	and.w	r2, r3, #3
10003bd6:	69fb      	ldr	r3, [r7, #28]
10003bd8:	005b      	lsls	r3, r3, #1
10003bda:	fa02 f303 	lsl.w	r3, r2, r3
10003bde:	69ba      	ldr	r2, [r7, #24]
10003be0:	4313      	orrs	r3, r2
10003be2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
10003be4:	687b      	ldr	r3, [r7, #4]
10003be6:	69ba      	ldr	r2, [r7, #24]
10003be8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10003bea:	683b      	ldr	r3, [r7, #0]
10003bec:	685b      	ldr	r3, [r3, #4]
10003bee:	2b01      	cmp	r3, #1
10003bf0:	d00b      	beq.n	10003c0a <HAL_GPIO_Init+0xde>
10003bf2:	683b      	ldr	r3, [r7, #0]
10003bf4:	685b      	ldr	r3, [r3, #4]
10003bf6:	2b02      	cmp	r3, #2
10003bf8:	d007      	beq.n	10003c0a <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10003bfa:	683b      	ldr	r3, [r7, #0]
10003bfc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10003bfe:	2b11      	cmp	r3, #17
10003c00:	d003      	beq.n	10003c0a <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10003c02:	683b      	ldr	r3, [r7, #0]
10003c04:	685b      	ldr	r3, [r3, #4]
10003c06:	2b12      	cmp	r3, #18
10003c08:	d130      	bne.n	10003c6c <HAL_GPIO_Init+0x140>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10003c0a:	687b      	ldr	r3, [r7, #4]
10003c0c:	689b      	ldr	r3, [r3, #8]
10003c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
10003c10:	69fb      	ldr	r3, [r7, #28]
10003c12:	005b      	lsls	r3, r3, #1
10003c14:	2203      	movs	r2, #3
10003c16:	fa02 f303 	lsl.w	r3, r2, r3
10003c1a:	43db      	mvns	r3, r3
10003c1c:	69ba      	ldr	r2, [r7, #24]
10003c1e:	4013      	ands	r3, r2
10003c20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
10003c22:	683b      	ldr	r3, [r7, #0]
10003c24:	68da      	ldr	r2, [r3, #12]
10003c26:	69fb      	ldr	r3, [r7, #28]
10003c28:	005b      	lsls	r3, r3, #1
10003c2a:	fa02 f303 	lsl.w	r3, r2, r3
10003c2e:	69ba      	ldr	r2, [r7, #24]
10003c30:	4313      	orrs	r3, r2
10003c32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
10003c34:	687b      	ldr	r3, [r7, #4]
10003c36:	69ba      	ldr	r2, [r7, #24]
10003c38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
10003c3a:	687b      	ldr	r3, [r7, #4]
10003c3c:	685b      	ldr	r3, [r3, #4]
10003c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10003c40:	2201      	movs	r2, #1
10003c42:	69fb      	ldr	r3, [r7, #28]
10003c44:	fa02 f303 	lsl.w	r3, r2, r3
10003c48:	43db      	mvns	r3, r3
10003c4a:	69ba      	ldr	r2, [r7, #24]
10003c4c:	4013      	ands	r3, r2
10003c4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
10003c50:	683b      	ldr	r3, [r7, #0]
10003c52:	685b      	ldr	r3, [r3, #4]
10003c54:	091b      	lsrs	r3, r3, #4
10003c56:	f003 0201 	and.w	r2, r3, #1
10003c5a:	69fb      	ldr	r3, [r7, #28]
10003c5c:	fa02 f303 	lsl.w	r3, r2, r3
10003c60:	69ba      	ldr	r2, [r7, #24]
10003c62:	4313      	orrs	r3, r2
10003c64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
10003c66:	687b      	ldr	r3, [r7, #4]
10003c68:	69ba      	ldr	r2, [r7, #24]
10003c6a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
10003c6c:	687b      	ldr	r3, [r7, #4]
10003c6e:	68db      	ldr	r3, [r3, #12]
10003c70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
10003c72:	69fb      	ldr	r3, [r7, #28]
10003c74:	005b      	lsls	r3, r3, #1
10003c76:	2203      	movs	r2, #3
10003c78:	fa02 f303 	lsl.w	r3, r2, r3
10003c7c:	43db      	mvns	r3, r3
10003c7e:	69ba      	ldr	r2, [r7, #24]
10003c80:	4013      	ands	r3, r2
10003c82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
10003c84:	683b      	ldr	r3, [r7, #0]
10003c86:	689a      	ldr	r2, [r3, #8]
10003c88:	69fb      	ldr	r3, [r7, #28]
10003c8a:	005b      	lsls	r3, r3, #1
10003c8c:	fa02 f303 	lsl.w	r3, r2, r3
10003c90:	69ba      	ldr	r2, [r7, #24]
10003c92:	4313      	orrs	r3, r2
10003c94:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
10003c96:	687b      	ldr	r3, [r7, #4]
10003c98:	69ba      	ldr	r2, [r7, #24]
10003c9a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
10003c9c:	683b      	ldr	r3, [r7, #0]
10003c9e:	685b      	ldr	r3, [r3, #4]
10003ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
10003ca4:	2b00      	cmp	r3, #0
10003ca6:	f000 80da 	beq.w	10003e5e <HAL_GPIO_Init+0x332>
      {
        temp = EXTI->EXTICR[position >> 2U];
10003caa:	4a2e      	ldr	r2, [pc, #184]	; (10003d64 <HAL_GPIO_Init+0x238>)
10003cac:	69fb      	ldr	r3, [r7, #28]
10003cae:	089b      	lsrs	r3, r3, #2
10003cb0:	3318      	adds	r3, #24
10003cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10003cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFFU << (8U * (position & 0x03U)));
10003cb8:	69fb      	ldr	r3, [r7, #28]
10003cba:	f003 0303 	and.w	r3, r3, #3
10003cbe:	00db      	lsls	r3, r3, #3
10003cc0:	22ff      	movs	r2, #255	; 0xff
10003cc2:	fa02 f303 	lsl.w	r3, r2, r3
10003cc6:	43db      	mvns	r3, r3
10003cc8:	69ba      	ldr	r2, [r7, #24]
10003cca:	4013      	ands	r3, r2
10003ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
10003cce:	687b      	ldr	r3, [r7, #4]
10003cd0:	4a25      	ldr	r2, [pc, #148]	; (10003d68 <HAL_GPIO_Init+0x23c>)
10003cd2:	4293      	cmp	r3, r2
10003cd4:	d05e      	beq.n	10003d94 <HAL_GPIO_Init+0x268>
10003cd6:	687b      	ldr	r3, [r7, #4]
10003cd8:	4a24      	ldr	r2, [pc, #144]	; (10003d6c <HAL_GPIO_Init+0x240>)
10003cda:	4293      	cmp	r3, r2
10003cdc:	d03d      	beq.n	10003d5a <HAL_GPIO_Init+0x22e>
10003cde:	687b      	ldr	r3, [r7, #4]
10003ce0:	4a23      	ldr	r2, [pc, #140]	; (10003d70 <HAL_GPIO_Init+0x244>)
10003ce2:	4293      	cmp	r3, r2
10003ce4:	d037      	beq.n	10003d56 <HAL_GPIO_Init+0x22a>
10003ce6:	687b      	ldr	r3, [r7, #4]
10003ce8:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
10003cec:	d031      	beq.n	10003d52 <HAL_GPIO_Init+0x226>
10003cee:	687b      	ldr	r3, [r7, #4]
10003cf0:	4a20      	ldr	r2, [pc, #128]	; (10003d74 <HAL_GPIO_Init+0x248>)
10003cf2:	4293      	cmp	r3, r2
10003cf4:	d02b      	beq.n	10003d4e <HAL_GPIO_Init+0x222>
10003cf6:	687b      	ldr	r3, [r7, #4]
10003cf8:	4a1f      	ldr	r2, [pc, #124]	; (10003d78 <HAL_GPIO_Init+0x24c>)
10003cfa:	4293      	cmp	r3, r2
10003cfc:	d025      	beq.n	10003d4a <HAL_GPIO_Init+0x21e>
10003cfe:	687b      	ldr	r3, [r7, #4]
10003d00:	4a1e      	ldr	r2, [pc, #120]	; (10003d7c <HAL_GPIO_Init+0x250>)
10003d02:	4293      	cmp	r3, r2
10003d04:	d01f      	beq.n	10003d46 <HAL_GPIO_Init+0x21a>
10003d06:	687b      	ldr	r3, [r7, #4]
10003d08:	4a1d      	ldr	r2, [pc, #116]	; (10003d80 <HAL_GPIO_Init+0x254>)
10003d0a:	4293      	cmp	r3, r2
10003d0c:	d019      	beq.n	10003d42 <HAL_GPIO_Init+0x216>
10003d0e:	687b      	ldr	r3, [r7, #4]
10003d10:	4a1c      	ldr	r2, [pc, #112]	; (10003d84 <HAL_GPIO_Init+0x258>)
10003d12:	4293      	cmp	r3, r2
10003d14:	d013      	beq.n	10003d3e <HAL_GPIO_Init+0x212>
10003d16:	687b      	ldr	r3, [r7, #4]
10003d18:	4a1b      	ldr	r2, [pc, #108]	; (10003d88 <HAL_GPIO_Init+0x25c>)
10003d1a:	4293      	cmp	r3, r2
10003d1c:	d00d      	beq.n	10003d3a <HAL_GPIO_Init+0x20e>
10003d1e:	687b      	ldr	r3, [r7, #4]
10003d20:	4a1a      	ldr	r2, [pc, #104]	; (10003d8c <HAL_GPIO_Init+0x260>)
10003d22:	4293      	cmp	r3, r2
10003d24:	d007      	beq.n	10003d36 <HAL_GPIO_Init+0x20a>
10003d26:	687b      	ldr	r3, [r7, #4]
10003d28:	4a19      	ldr	r2, [pc, #100]	; (10003d90 <HAL_GPIO_Init+0x264>)
10003d2a:	4293      	cmp	r3, r2
10003d2c:	d101      	bne.n	10003d32 <HAL_GPIO_Init+0x206>
10003d2e:	230b      	movs	r3, #11
10003d30:	e031      	b.n	10003d96 <HAL_GPIO_Init+0x26a>
10003d32:	2319      	movs	r3, #25
10003d34:	e02f      	b.n	10003d96 <HAL_GPIO_Init+0x26a>
10003d36:	230a      	movs	r3, #10
10003d38:	e02d      	b.n	10003d96 <HAL_GPIO_Init+0x26a>
10003d3a:	2309      	movs	r3, #9
10003d3c:	e02b      	b.n	10003d96 <HAL_GPIO_Init+0x26a>
10003d3e:	2308      	movs	r3, #8
10003d40:	e029      	b.n	10003d96 <HAL_GPIO_Init+0x26a>
10003d42:	2307      	movs	r3, #7
10003d44:	e027      	b.n	10003d96 <HAL_GPIO_Init+0x26a>
10003d46:	2306      	movs	r3, #6
10003d48:	e025      	b.n	10003d96 <HAL_GPIO_Init+0x26a>
10003d4a:	2305      	movs	r3, #5
10003d4c:	e023      	b.n	10003d96 <HAL_GPIO_Init+0x26a>
10003d4e:	2304      	movs	r3, #4
10003d50:	e021      	b.n	10003d96 <HAL_GPIO_Init+0x26a>
10003d52:	2303      	movs	r3, #3
10003d54:	e01f      	b.n	10003d96 <HAL_GPIO_Init+0x26a>
10003d56:	2302      	movs	r3, #2
10003d58:	e01d      	b.n	10003d96 <HAL_GPIO_Init+0x26a>
10003d5a:	2301      	movs	r3, #1
10003d5c:	e01b      	b.n	10003d96 <HAL_GPIO_Init+0x26a>
10003d5e:	bf00      	nop
10003d60:	5000d0c0 	.word	0x5000d0c0
10003d64:	5000d000 	.word	0x5000d000
10003d68:	50002000 	.word	0x50002000
10003d6c:	50003000 	.word	0x50003000
10003d70:	50004000 	.word	0x50004000
10003d74:	50006000 	.word	0x50006000
10003d78:	50007000 	.word	0x50007000
10003d7c:	50008000 	.word	0x50008000
10003d80:	50009000 	.word	0x50009000
10003d84:	5000a000 	.word	0x5000a000
10003d88:	5000b000 	.word	0x5000b000
10003d8c:	5000c000 	.word	0x5000c000
10003d90:	54004000 	.word	0x54004000
10003d94:	2300      	movs	r3, #0
10003d96:	69fa      	ldr	r2, [r7, #28]
10003d98:	f002 0203 	and.w	r2, r2, #3
10003d9c:	00d2      	lsls	r2, r2, #3
10003d9e:	4093      	lsls	r3, r2
10003da0:	461a      	mov	r2, r3
10003da2:	69bb      	ldr	r3, [r7, #24]
10003da4:	4313      	orrs	r3, r2
10003da6:	61bb      	str	r3, [r7, #24]
        EXTI->EXTICR[position >> 2U] = temp;
10003da8:	4934      	ldr	r1, [pc, #208]	; (10003e7c <HAL_GPIO_Init+0x350>)
10003daa:	69fb      	ldr	r3, [r7, #28]
10003dac:	089b      	lsrs	r3, r3, #2
10003dae:	3318      	adds	r3, #24
10003db0:	69ba      	ldr	r2, [r7, #24]
10003db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
10003db6:	697b      	ldr	r3, [r7, #20]
10003db8:	681b      	ldr	r3, [r3, #0]
10003dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10003dbc:	68fb      	ldr	r3, [r7, #12]
10003dbe:	43db      	mvns	r3, r3
10003dc0:	69ba      	ldr	r2, [r7, #24]
10003dc2:	4013      	ands	r3, r2
10003dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
10003dc6:	683b      	ldr	r3, [r7, #0]
10003dc8:	685b      	ldr	r3, [r3, #4]
10003dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
10003dce:	2b00      	cmp	r3, #0
10003dd0:	d003      	beq.n	10003dda <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
10003dd2:	69ba      	ldr	r2, [r7, #24]
10003dd4:	68fb      	ldr	r3, [r7, #12]
10003dd6:	4313      	orrs	r3, r2
10003dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
10003dda:	697b      	ldr	r3, [r7, #20]
10003ddc:	69ba      	ldr	r2, [r7, #24]
10003dde:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
10003de0:	697b      	ldr	r3, [r7, #20]
10003de2:	685b      	ldr	r3, [r3, #4]
10003de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10003de6:	68fb      	ldr	r3, [r7, #12]
10003de8:	43db      	mvns	r3, r3
10003dea:	69ba      	ldr	r2, [r7, #24]
10003dec:	4013      	ands	r3, r2
10003dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
10003df0:	683b      	ldr	r3, [r7, #0]
10003df2:	685b      	ldr	r3, [r3, #4]
10003df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
10003df8:	2b00      	cmp	r3, #0
10003dfa:	d003      	beq.n	10003e04 <HAL_GPIO_Init+0x2d8>
        {
          temp |= iocurrent;
10003dfc:	69ba      	ldr	r2, [r7, #24]
10003dfe:	68fb      	ldr	r3, [r7, #12]
10003e00:	4313      	orrs	r3, r2
10003e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
10003e04:	697b      	ldr	r3, [r7, #20]
10003e06:	69ba      	ldr	r2, [r7, #24]
10003e08:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
10003e0a:	4b1c      	ldr	r3, [pc, #112]	; (10003e7c <HAL_GPIO_Init+0x350>)
10003e0c:	681b      	ldr	r3, [r3, #0]
10003e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10003e10:	68fb      	ldr	r3, [r7, #12]
10003e12:	43db      	mvns	r3, r3
10003e14:	69ba      	ldr	r2, [r7, #24]
10003e16:	4013      	ands	r3, r2
10003e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
10003e1a:	683b      	ldr	r3, [r7, #0]
10003e1c:	685b      	ldr	r3, [r3, #4]
10003e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
10003e22:	2b00      	cmp	r3, #0
10003e24:	d003      	beq.n	10003e2e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
10003e26:	69ba      	ldr	r2, [r7, #24]
10003e28:	68fb      	ldr	r3, [r7, #12]
10003e2a:	4313      	orrs	r3, r2
10003e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
10003e2e:	4a13      	ldr	r2, [pc, #76]	; (10003e7c <HAL_GPIO_Init+0x350>)
10003e30:	69bb      	ldr	r3, [r7, #24]
10003e32:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
10003e34:	4b11      	ldr	r3, [pc, #68]	; (10003e7c <HAL_GPIO_Init+0x350>)
10003e36:	685b      	ldr	r3, [r3, #4]
10003e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10003e3a:	68fb      	ldr	r3, [r7, #12]
10003e3c:	43db      	mvns	r3, r3
10003e3e:	69ba      	ldr	r2, [r7, #24]
10003e40:	4013      	ands	r3, r2
10003e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
10003e44:	683b      	ldr	r3, [r7, #0]
10003e46:	685b      	ldr	r3, [r3, #4]
10003e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
10003e4c:	2b00      	cmp	r3, #0
10003e4e:	d003      	beq.n	10003e58 <HAL_GPIO_Init+0x32c>
        {
          temp |= iocurrent;
10003e50:	69ba      	ldr	r2, [r7, #24]
10003e52:	68fb      	ldr	r3, [r7, #12]
10003e54:	4313      	orrs	r3, r2
10003e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
10003e58:	4a08      	ldr	r2, [pc, #32]	; (10003e7c <HAL_GPIO_Init+0x350>)
10003e5a:	69bb      	ldr	r3, [r7, #24]
10003e5c:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
10003e5e:	69fb      	ldr	r3, [r7, #28]
10003e60:	3301      	adds	r3, #1
10003e62:	61fb      	str	r3, [r7, #28]
10003e64:	69fb      	ldr	r3, [r7, #28]
10003e66:	2b0f      	cmp	r3, #15
10003e68:	f67f ae6a 	bls.w	10003b40 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
10003e6c:	bf00      	nop
10003e6e:	bf00      	nop
10003e70:	3724      	adds	r7, #36	; 0x24
10003e72:	46bd      	mov	sp, r7
10003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
10003e78:	4770      	bx	lr
10003e7a:	bf00      	nop
10003e7c:	5000d000 	.word	0x5000d000

10003e80 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
10003e80:	b580      	push	{r7, lr}
10003e82:	b084      	sub	sp, #16
10003e84:	af00      	add	r7, sp, #0
10003e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
10003e88:	2300      	movs	r3, #0
10003e8a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
10003e8c:	687b      	ldr	r3, [r7, #4]
10003e8e:	2b00      	cmp	r3, #0
10003e90:	d01e      	beq.n	10003ed0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

#if defined(CORE_CM4)
    IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10003e92:	4b13      	ldr	r3, [pc, #76]	; (10003ee0 <HAL_IPCC_Init+0x60>)
10003e94:	60bb      	str	r3, [r7, #8]
#else
    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

    if (hipcc->State == HAL_IPCC_STATE_RESET)
10003e96:	687b      	ldr	r3, [r7, #4]
10003e98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
10003e9c:	b2db      	uxtb	r3, r3
10003e9e:	2b00      	cmp	r3, #0
10003ea0:	d102      	bne.n	10003ea8 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
10003ea2:	6878      	ldr	r0, [r7, #4]
10003ea4:	f7fd fc0c 	bl	100016c0 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
10003ea8:	68b8      	ldr	r0, [r7, #8]
10003eaa:	f000 f9eb 	bl	10004284 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
10003eae:	68bb      	ldr	r3, [r7, #8]
10003eb0:	681b      	ldr	r3, [r3, #0]
10003eb2:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
10003eb6:	68bb      	ldr	r3, [r7, #8]
10003eb8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
10003eba:	6878      	ldr	r0, [r7, #4]
10003ebc:	f000 f9bc 	bl	10004238 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
10003ec0:	687b      	ldr	r3, [r7, #4]
10003ec2:	2200      	movs	r2, #0
10003ec4:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
10003ec6:	687b      	ldr	r3, [r7, #4]
10003ec8:	2201      	movs	r2, #1
10003eca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
10003ece:	e001      	b.n	10003ed4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
10003ed0:	2301      	movs	r3, #1
10003ed2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
10003ed4:	7bfb      	ldrb	r3, [r7, #15]
}
10003ed6:	4618      	mov	r0, r3
10003ed8:	3710      	adds	r7, #16
10003eda:	46bd      	mov	sp, r7
10003edc:	bd80      	pop	{r7, pc}
10003ede:	bf00      	nop
10003ee0:	4c001010 	.word	0x4c001010

10003ee4 <HAL_IPCC_ActivateNotification>:
  * @param  ChannelDir Channel direction
  * @param  cb Interrupt callback
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_ActivateNotification(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir, ChannelCb cb)
{
10003ee4:	b580      	push	{r7, lr}
10003ee6:	b086      	sub	sp, #24
10003ee8:	af00      	add	r7, sp, #0
10003eea:	60f8      	str	r0, [r7, #12]
10003eec:	60b9      	str	r1, [r7, #8]
10003eee:	603b      	str	r3, [r7, #0]
10003ef0:	4613      	mov	r3, r2
10003ef2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
10003ef4:	2300      	movs	r3, #0
10003ef6:	75fb      	strb	r3, [r7, #23]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
10003ef8:	68fb      	ldr	r3, [r7, #12]
10003efa:	2b00      	cmp	r3, #0
10003efc:	d039      	beq.n	10003f72 <HAL_IPCC_ActivateNotification+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    /* Check IPCC state */
    if (hipcc->State == HAL_IPCC_STATE_READY)
10003efe:	68fb      	ldr	r3, [r7, #12]
10003f00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
10003f04:	b2db      	uxtb	r3, r3
10003f06:	2b01      	cmp	r3, #1
10003f08:	d130      	bne.n	10003f6c <HAL_IPCC_ActivateNotification+0x88>
    {
      /* Set callback and register masking information */
      if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10003f0a:	79fb      	ldrb	r3, [r7, #7]
10003f0c:	2b00      	cmp	r3, #0
10003f0e:	d113      	bne.n	10003f38 <HAL_IPCC_ActivateNotification+0x54>
      {
        hipcc->ChannelCallbackTx[ChannelIndex] = cb;
10003f10:	68fa      	ldr	r2, [r7, #12]
10003f12:	68bb      	ldr	r3, [r7, #8]
10003f14:	3306      	adds	r3, #6
10003f16:	009b      	lsls	r3, r3, #2
10003f18:	4413      	add	r3, r2
10003f1a:	683a      	ldr	r2, [r7, #0]
10003f1c:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10003f1e:	68fb      	ldr	r3, [r7, #12]
10003f20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10003f22:	68bb      	ldr	r3, [r7, #8]
10003f24:	f003 030f 	and.w	r3, r3, #15
10003f28:	f44f 3180 	mov.w	r1, #65536	; 0x10000
10003f2c:	fa01 f303 	lsl.w	r3, r1, r3
10003f30:	431a      	orrs	r2, r3
10003f32:	68fb      	ldr	r3, [r7, #12]
10003f34:	635a      	str	r2, [r3, #52]	; 0x34
10003f36:	e010      	b.n	10003f5a <HAL_IPCC_ActivateNotification+0x76>
      }
      else
      {
        hipcc->ChannelCallbackRx[ChannelIndex] = cb;
10003f38:	68fa      	ldr	r2, [r7, #12]
10003f3a:	68bb      	ldr	r3, [r7, #8]
10003f3c:	009b      	lsls	r3, r3, #2
10003f3e:	4413      	add	r3, r2
10003f40:	683a      	ldr	r2, [r7, #0]
10003f42:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10003f44:	68fb      	ldr	r3, [r7, #12]
10003f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10003f48:	68bb      	ldr	r3, [r7, #8]
10003f4a:	f003 030f 	and.w	r3, r3, #15
10003f4e:	2101      	movs	r1, #1
10003f50:	fa01 f303 	lsl.w	r3, r1, r3
10003f54:	431a      	orrs	r2, r3
10003f56:	68fb      	ldr	r3, [r7, #12]
10003f58:	635a      	str	r2, [r3, #52]	; 0x34
      }

      /* Unmask only the channels in reception (Transmission channel mask/unmask is done in HAL_IPCC_NotifyCPU) */
      if (ChannelDir == IPCC_CHANNEL_DIR_RX)
10003f5a:	79fb      	ldrb	r3, [r7, #7]
10003f5c:	2b01      	cmp	r3, #1
10003f5e:	d10a      	bne.n	10003f76 <HAL_IPCC_ActivateNotification+0x92>
      {
        IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
10003f60:	79fb      	ldrb	r3, [r7, #7]
10003f62:	4619      	mov	r1, r3
10003f64:	68b8      	ldr	r0, [r7, #8]
10003f66:	f000 f939 	bl	100041dc <IPCC_UnmaskInterrupt>
10003f6a:	e004      	b.n	10003f76 <HAL_IPCC_ActivateNotification+0x92>
      }
    }
    else
    {
      err = HAL_ERROR;
10003f6c:	2301      	movs	r3, #1
10003f6e:	75fb      	strb	r3, [r7, #23]
10003f70:	e001      	b.n	10003f76 <HAL_IPCC_ActivateNotification+0x92>
    }
  }
  else
  {
    err = HAL_ERROR;
10003f72:	2301      	movs	r3, #1
10003f74:	75fb      	strb	r3, [r7, #23]
  }
  return err;
10003f76:	7dfb      	ldrb	r3, [r7, #23]
}
10003f78:	4618      	mov	r0, r3
10003f7a:	3718      	adds	r7, #24
10003f7c:	46bd      	mov	sp, r7
10003f7e:	bd80      	pop	{r7, pc}

10003f80 <HAL_IPCC_GetChannelStatus>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval Channel status
  */
IPCC_CHANNELStatusTypeDef HAL_IPCC_GetChannelStatus(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10003f80:	b480      	push	{r7}
10003f82:	b089      	sub	sp, #36	; 0x24
10003f84:	af00      	add	r7, sp, #0
10003f86:	60f8      	str	r0, [r7, #12]
10003f88:	60b9      	str	r1, [r7, #8]
10003f8a:	4613      	mov	r3, r2
10003f8c:	71fb      	strb	r3, [r7, #7]
  uint32_t channel_state;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10003f8e:	4b14      	ldr	r3, [pc, #80]	; (10003fe0 <HAL_IPCC_GetChannelStatus+0x60>)
10003f90:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
10003f92:	4b14      	ldr	r3, [pc, #80]	; (10003fe4 <HAL_IPCC_GetChannelStatus+0x64>)
10003f94:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Read corresponding channel depending of the MCU and the direction */
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10003f96:	79fb      	ldrb	r3, [r7, #7]
10003f98:	2b00      	cmp	r3, #0
10003f9a:	d10a      	bne.n	10003fb2 <HAL_IPCC_GetChannelStatus+0x32>
  {
    channel_state = (currentInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10003f9c:	69bb      	ldr	r3, [r7, #24]
10003f9e:	68da      	ldr	r2, [r3, #12]
10003fa0:	68bb      	ldr	r3, [r7, #8]
10003fa2:	f003 030f 	and.w	r3, r3, #15
10003fa6:	2101      	movs	r1, #1
10003fa8:	fa01 f303 	lsl.w	r3, r1, r3
10003fac:	4013      	ands	r3, r2
10003fae:	61fb      	str	r3, [r7, #28]
10003fb0:	e009      	b.n	10003fc6 <HAL_IPCC_GetChannelStatus+0x46>
  }
  else
  {
    channel_state = (otherInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10003fb2:	697b      	ldr	r3, [r7, #20]
10003fb4:	68da      	ldr	r2, [r3, #12]
10003fb6:	68bb      	ldr	r3, [r7, #8]
10003fb8:	f003 030f 	and.w	r3, r3, #15
10003fbc:	2101      	movs	r1, #1
10003fbe:	fa01 f303 	lsl.w	r3, r1, r3
10003fc2:	4013      	ands	r3, r2
10003fc4:	61fb      	str	r3, [r7, #28]
  }

  return (channel_state == 0UL) ? IPCC_CHANNEL_STATUS_FREE : IPCC_CHANNEL_STATUS_OCCUPIED ;
10003fc6:	69fb      	ldr	r3, [r7, #28]
10003fc8:	2b00      	cmp	r3, #0
10003fca:	bf14      	ite	ne
10003fcc:	2301      	movne	r3, #1
10003fce:	2300      	moveq	r3, #0
10003fd0:	b2db      	uxtb	r3, r3
}
10003fd2:	4618      	mov	r0, r3
10003fd4:	3724      	adds	r7, #36	; 0x24
10003fd6:	46bd      	mov	sp, r7
10003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
10003fdc:	4770      	bx	lr
10003fde:	bf00      	nop
10003fe0:	4c001010 	.word	0x4c001010
10003fe4:	4c001000 	.word	0x4c001000

10003fe8 <HAL_IPCC_NotifyCPU>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_NotifyCPU(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10003fe8:	b580      	push	{r7, lr}
10003fea:	b088      	sub	sp, #32
10003fec:	af00      	add	r7, sp, #0
10003fee:	60f8      	str	r0, [r7, #12]
10003ff0:	60b9      	str	r1, [r7, #8]
10003ff2:	4613      	mov	r3, r2
10003ff4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
10003ff6:	2300      	movs	r3, #0
10003ff8:	77fb      	strb	r3, [r7, #31]
  uint32_t mask;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10003ffa:	4b1d      	ldr	r3, [pc, #116]	; (10004070 <HAL_IPCC_NotifyCPU+0x88>)
10003ffc:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Check if IPCC is initiliased */
  if (hipcc->State == HAL_IPCC_STATE_READY)
10003ffe:	68fb      	ldr	r3, [r7, #12]
10004000:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
10004004:	b2db      	uxtb	r3, r3
10004006:	2b01      	cmp	r3, #1
10004008:	d12a      	bne.n	10004060 <HAL_IPCC_NotifyCPU+0x78>
  {
    /* For IPCC_CHANNEL_DIR_TX, set the status. For IPCC_CHANNEL_DIR_RX, clear the status */
    currentInstance->SCR |= ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_SCR_CH1S : IPCC_SCR_CH1C) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
1000400a:	69bb      	ldr	r3, [r7, #24]
1000400c:	689a      	ldr	r2, [r3, #8]
1000400e:	79fb      	ldrb	r3, [r7, #7]
10004010:	2b00      	cmp	r3, #0
10004012:	d102      	bne.n	1000401a <HAL_IPCC_NotifyCPU+0x32>
10004014:	f44f 3180 	mov.w	r1, #65536	; 0x10000
10004018:	e000      	b.n	1000401c <HAL_IPCC_NotifyCPU+0x34>
1000401a:	2101      	movs	r1, #1
1000401c:	68bb      	ldr	r3, [r7, #8]
1000401e:	f003 030f 	and.w	r3, r3, #15
10004022:	fa01 f303 	lsl.w	r3, r1, r3
10004026:	431a      	orrs	r2, r3
10004028:	69bb      	ldr	r3, [r7, #24]
1000402a:	609a      	str	r2, [r3, #8]

    /* Unmask interrupt if the callback is requested */
    mask = ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_MR_CH1FM_Msk : IPCC_MR_CH1OM_Msk) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
1000402c:	79fb      	ldrb	r3, [r7, #7]
1000402e:	2b00      	cmp	r3, #0
10004030:	d102      	bne.n	10004038 <HAL_IPCC_NotifyCPU+0x50>
10004032:	f44f 3280 	mov.w	r2, #65536	; 0x10000
10004036:	e000      	b.n	1000403a <HAL_IPCC_NotifyCPU+0x52>
10004038:	2201      	movs	r2, #1
1000403a:	68bb      	ldr	r3, [r7, #8]
1000403c:	f003 030f 	and.w	r3, r3, #15
10004040:	fa02 f303 	lsl.w	r3, r2, r3
10004044:	617b      	str	r3, [r7, #20]
    if ((hipcc->callbackRequest & mask) == mask)
10004046:	68fb      	ldr	r3, [r7, #12]
10004048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
1000404a:	697b      	ldr	r3, [r7, #20]
1000404c:	4013      	ands	r3, r2
1000404e:	697a      	ldr	r2, [r7, #20]
10004050:	429a      	cmp	r2, r3
10004052:	d107      	bne.n	10004064 <HAL_IPCC_NotifyCPU+0x7c>
    {
      IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
10004054:	79fb      	ldrb	r3, [r7, #7]
10004056:	4619      	mov	r1, r3
10004058:	68b8      	ldr	r0, [r7, #8]
1000405a:	f000 f8bf 	bl	100041dc <IPCC_UnmaskInterrupt>
1000405e:	e001      	b.n	10004064 <HAL_IPCC_NotifyCPU+0x7c>
    }
  }
  else
  {
    err = HAL_ERROR;
10004060:	2301      	movs	r3, #1
10004062:	77fb      	strb	r3, [r7, #31]
  }

  return err;
10004064:	7ffb      	ldrb	r3, [r7, #31]
}
10004066:	4618      	mov	r0, r3
10004068:	3720      	adds	r7, #32
1000406a:	46bd      	mov	sp, r7
1000406c:	bd80      	pop	{r7, pc}
1000406e:	bf00      	nop
10004070:	4c001010 	.word	0x4c001010

10004074 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
10004074:	b580      	push	{r7, lr}
10004076:	b086      	sub	sp, #24
10004078:	af00      	add	r7, sp, #0
1000407a:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
1000407c:	2300      	movs	r3, #0
1000407e:	613b      	str	r3, [r7, #16]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10004080:	4b22      	ldr	r3, [pc, #136]	; (1000410c <HAL_IPCC_TX_IRQHandler+0x98>)
10004082:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
10004084:	68fb      	ldr	r3, [r7, #12]
10004086:	685b      	ldr	r3, [r3, #4]
10004088:	43db      	mvns	r3, r3
1000408a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
1000408e:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
10004090:	68fb      	ldr	r3, [r7, #12]
10004092:	68db      	ldr	r3, [r3, #12]
10004094:	041b      	lsls	r3, r3, #16
10004096:	43db      	mvns	r3, r3
10004098:	697a      	ldr	r2, [r7, #20]
1000409a:	4013      	ands	r3, r2
1000409c:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
1000409e:	e02c      	b.n	100040fa <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_Msk));
100040a0:	693b      	ldr	r3, [r7, #16]
100040a2:	f003 030f 	and.w	r3, r3, #15
100040a6:	3310      	adds	r3, #16
100040a8:	2201      	movs	r2, #1
100040aa:	fa02 f303 	lsl.w	r3, r2, r3
100040ae:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
100040b0:	697a      	ldr	r2, [r7, #20]
100040b2:	68bb      	ldr	r3, [r7, #8]
100040b4:	4013      	ands	r3, r2
100040b6:	2b00      	cmp	r3, #0
100040b8:	d01c      	beq.n	100040f4 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
100040ba:	68fb      	ldr	r3, [r7, #12]
100040bc:	685a      	ldr	r2, [r3, #4]
100040be:	68bb      	ldr	r3, [r7, #8]
100040c0:	431a      	orrs	r2, r3
100040c2:	68fb      	ldr	r3, [r7, #12]
100040c4:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
100040c6:	687a      	ldr	r2, [r7, #4]
100040c8:	693b      	ldr	r3, [r7, #16]
100040ca:	3306      	adds	r3, #6
100040cc:	009b      	lsls	r3, r3, #2
100040ce:	4413      	add	r3, r2
100040d0:	685b      	ldr	r3, [r3, #4]
100040d2:	2b00      	cmp	r3, #0
100040d4:	d009      	beq.n	100040ea <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
100040d6:	687a      	ldr	r2, [r7, #4]
100040d8:	693b      	ldr	r3, [r7, #16]
100040da:	3306      	adds	r3, #6
100040dc:	009b      	lsls	r3, r3, #2
100040de:	4413      	add	r3, r2
100040e0:	685b      	ldr	r3, [r3, #4]
100040e2:	2200      	movs	r2, #0
100040e4:	6939      	ldr	r1, [r7, #16]
100040e6:	6878      	ldr	r0, [r7, #4]
100040e8:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
100040ea:	68bb      	ldr	r3, [r7, #8]
100040ec:	43db      	mvns	r3, r3
100040ee:	697a      	ldr	r2, [r7, #20]
100040f0:	4013      	ands	r3, r2
100040f2:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
100040f4:	693b      	ldr	r3, [r7, #16]
100040f6:	3301      	adds	r3, #1
100040f8:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
100040fa:	697b      	ldr	r3, [r7, #20]
100040fc:	2b00      	cmp	r3, #0
100040fe:	d1cf      	bne.n	100040a0 <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
10004100:	bf00      	nop
10004102:	bf00      	nop
10004104:	3718      	adds	r7, #24
10004106:	46bd      	mov	sp, r7
10004108:	bd80      	pop	{r7, pc}
1000410a:	bf00      	nop
1000410c:	4c001010 	.word	0x4c001010

10004110 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
10004110:	b580      	push	{r7, lr}
10004112:	b088      	sub	sp, #32
10004114:	af00      	add	r7, sp, #0
10004116:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
10004118:	2300      	movs	r3, #0
1000411a:	61bb      	str	r3, [r7, #24]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
1000411c:	4b20      	ldr	r3, [pc, #128]	; (100041a0 <HAL_IPCC_RX_IRQHandler+0x90>)
1000411e:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
10004120:	4b20      	ldr	r3, [pc, #128]	; (100041a4 <HAL_IPCC_RX_IRQHandler+0x94>)
10004122:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
#endif

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
10004124:	697b      	ldr	r3, [r7, #20]
10004126:	685b      	ldr	r3, [r3, #4]
10004128:	43db      	mvns	r3, r3
1000412a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1000412e:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
10004130:	693b      	ldr	r3, [r7, #16]
10004132:	68db      	ldr	r3, [r3, #12]
10004134:	69fa      	ldr	r2, [r7, #28]
10004136:	4013      	ands	r3, r2
10004138:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
1000413a:	e029      	b.n	10004190 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
1000413c:	69bb      	ldr	r3, [r7, #24]
1000413e:	f003 030f 	and.w	r3, r3, #15
10004142:	2201      	movs	r2, #1
10004144:	fa02 f303 	lsl.w	r3, r2, r3
10004148:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
1000414a:	69fa      	ldr	r2, [r7, #28]
1000414c:	68fb      	ldr	r3, [r7, #12]
1000414e:	4013      	ands	r3, r2
10004150:	2b00      	cmp	r3, #0
10004152:	d01a      	beq.n	1000418a <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
10004154:	697b      	ldr	r3, [r7, #20]
10004156:	685a      	ldr	r2, [r3, #4]
10004158:	68fb      	ldr	r3, [r7, #12]
1000415a:	431a      	orrs	r2, r3
1000415c:	697b      	ldr	r3, [r7, #20]
1000415e:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
10004160:	687a      	ldr	r2, [r7, #4]
10004162:	69bb      	ldr	r3, [r7, #24]
10004164:	009b      	lsls	r3, r3, #2
10004166:	4413      	add	r3, r2
10004168:	685b      	ldr	r3, [r3, #4]
1000416a:	2b00      	cmp	r3, #0
1000416c:	d008      	beq.n	10004180 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
1000416e:	687a      	ldr	r2, [r7, #4]
10004170:	69bb      	ldr	r3, [r7, #24]
10004172:	009b      	lsls	r3, r3, #2
10004174:	4413      	add	r3, r2
10004176:	685b      	ldr	r3, [r3, #4]
10004178:	2201      	movs	r2, #1
1000417a:	69b9      	ldr	r1, [r7, #24]
1000417c:	6878      	ldr	r0, [r7, #4]
1000417e:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
10004180:	68fb      	ldr	r3, [r7, #12]
10004182:	43db      	mvns	r3, r3
10004184:	69fa      	ldr	r2, [r7, #28]
10004186:	4013      	ands	r3, r2
10004188:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
1000418a:	69bb      	ldr	r3, [r7, #24]
1000418c:	3301      	adds	r3, #1
1000418e:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10004190:	69fb      	ldr	r3, [r7, #28]
10004192:	2b00      	cmp	r3, #0
10004194:	d1d2      	bne.n	1000413c <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
10004196:	bf00      	nop
10004198:	bf00      	nop
1000419a:	3720      	adds	r7, #32
1000419c:	46bd      	mov	sp, r7
1000419e:	bd80      	pop	{r7, pc}
100041a0:	4c001010 	.word	0x4c001010
100041a4:	4c001000 	.word	0x4c001000

100041a8 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
100041a8:	b480      	push	{r7}
100041aa:	b085      	sub	sp, #20
100041ac:	af00      	add	r7, sp, #0
100041ae:	60f8      	str	r0, [r7, #12]
100041b0:	60b9      	str	r1, [r7, #8]
100041b2:	4613      	mov	r3, r2
100041b4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
100041b6:	bf00      	nop
100041b8:	3714      	adds	r7, #20
100041ba:	46bd      	mov	sp, r7
100041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
100041c0:	4770      	bx	lr

100041c2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
100041c2:	b480      	push	{r7}
100041c4:	b085      	sub	sp, #20
100041c6:	af00      	add	r7, sp, #0
100041c8:	60f8      	str	r0, [r7, #12]
100041ca:	60b9      	str	r1, [r7, #8]
100041cc:	4613      	mov	r3, r2
100041ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
100041d0:	bf00      	nop
100041d2:	3714      	adds	r7, #20
100041d4:	46bd      	mov	sp, r7
100041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
100041da:	4770      	bx	lr

100041dc <IPCC_UnmaskInterrupt>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  */
void IPCC_UnmaskInterrupt(uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
100041dc:	b480      	push	{r7}
100041de:	b085      	sub	sp, #20
100041e0:	af00      	add	r7, sp, #0
100041e2:	6078      	str	r0, [r7, #4]
100041e4:	460b      	mov	r3, r1
100041e6:	70fb      	strb	r3, [r7, #3]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
100041e8:	4b12      	ldr	r3, [pc, #72]	; (10004234 <IPCC_UnmaskInterrupt+0x58>)
100041ea:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
100041ec:	78fb      	ldrb	r3, [r7, #3]
100041ee:	2b00      	cmp	r3, #0
100041f0:	d10d      	bne.n	1000420e <IPCC_UnmaskInterrupt+0x32>
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
100041f2:	68fb      	ldr	r3, [r7, #12]
100041f4:	685a      	ldr	r2, [r3, #4]
100041f6:	687b      	ldr	r3, [r7, #4]
100041f8:	f003 030f 	and.w	r3, r3, #15
100041fc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
10004200:	fa01 f303 	lsl.w	r3, r1, r3
10004204:	43db      	mvns	r3, r3
10004206:	401a      	ands	r2, r3
10004208:	68fb      	ldr	r3, [r7, #12]
1000420a:	605a      	str	r2, [r3, #4]
  else
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
  }
}
1000420c:	e00b      	b.n	10004226 <IPCC_UnmaskInterrupt+0x4a>
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
1000420e:	68fb      	ldr	r3, [r7, #12]
10004210:	685a      	ldr	r2, [r3, #4]
10004212:	687b      	ldr	r3, [r7, #4]
10004214:	f003 030f 	and.w	r3, r3, #15
10004218:	2101      	movs	r1, #1
1000421a:	fa01 f303 	lsl.w	r3, r1, r3
1000421e:	43db      	mvns	r3, r3
10004220:	401a      	ands	r2, r3
10004222:	68fb      	ldr	r3, [r7, #12]
10004224:	605a      	str	r2, [r3, #4]
}
10004226:	bf00      	nop
10004228:	3714      	adds	r7, #20
1000422a:	46bd      	mov	sp, r7
1000422c:	f85d 7b04 	ldr.w	r7, [sp], #4
10004230:	4770      	bx	lr
10004232:	bf00      	nop
10004234:	4c001010 	.word	0x4c001010

10004238 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
10004238:	b480      	push	{r7}
1000423a:	b085      	sub	sp, #20
1000423c:	af00      	add	r7, sp, #0
1000423e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
10004240:	2300      	movs	r3, #0
10004242:	60fb      	str	r3, [r7, #12]
10004244:	e00f      	b.n	10004266 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
10004246:	687a      	ldr	r2, [r7, #4]
10004248:	68fb      	ldr	r3, [r7, #12]
1000424a:	009b      	lsls	r3, r3, #2
1000424c:	4413      	add	r3, r2
1000424e:	4a0b      	ldr	r2, [pc, #44]	; (1000427c <IPCC_SetDefaultCallbacks+0x44>)
10004250:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
10004252:	687a      	ldr	r2, [r7, #4]
10004254:	68fb      	ldr	r3, [r7, #12]
10004256:	3306      	adds	r3, #6
10004258:	009b      	lsls	r3, r3, #2
1000425a:	4413      	add	r3, r2
1000425c:	4a08      	ldr	r2, [pc, #32]	; (10004280 <IPCC_SetDefaultCallbacks+0x48>)
1000425e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
10004260:	68fb      	ldr	r3, [r7, #12]
10004262:	3301      	adds	r3, #1
10004264:	60fb      	str	r3, [r7, #12]
10004266:	68fb      	ldr	r3, [r7, #12]
10004268:	2b05      	cmp	r3, #5
1000426a:	d9ec      	bls.n	10004246 <IPCC_SetDefaultCallbacks+0xe>
  }
}
1000426c:	bf00      	nop
1000426e:	bf00      	nop
10004270:	3714      	adds	r7, #20
10004272:	46bd      	mov	sp, r7
10004274:	f85d 7b04 	ldr.w	r7, [sp], #4
10004278:	4770      	bx	lr
1000427a:	bf00      	nop
1000427c:	100041a9 	.word	0x100041a9
10004280:	100041c3 	.word	0x100041c3

10004284 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
10004284:	b480      	push	{r7}
10004286:	b083      	sub	sp, #12
10004288:	af00      	add	r7, sp, #0
1000428a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
1000428c:	687b      	ldr	r3, [r7, #4]
1000428e:	2200      	movs	r2, #0
10004290:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
10004292:	687b      	ldr	r3, [r7, #4]
10004294:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
10004298:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
1000429a:	687b      	ldr	r3, [r7, #4]
1000429c:	223f      	movs	r2, #63	; 0x3f
1000429e:	609a      	str	r2, [r3, #8]
}
100042a0:	bf00      	nop
100042a2:	370c      	adds	r7, #12
100042a4:	46bd      	mov	sp, r7
100042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
100042aa:	4770      	bx	lr

100042ac <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
100042ac:	b480      	push	{r7}
100042ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
100042b0:	4b05      	ldr	r3, [pc, #20]	; (100042c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
100042b2:	681b      	ldr	r3, [r3, #0]
100042b4:	4a04      	ldr	r2, [pc, #16]	; (100042c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
100042b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
100042ba:	6013      	str	r3, [r2, #0]
}
100042bc:	bf00      	nop
100042be:	46bd      	mov	sp, r7
100042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
100042c4:	4770      	bx	lr
100042c6:	bf00      	nop
100042c8:	50001000 	.word	0x50001000

100042cc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
100042cc:	b580      	push	{r7, lr}
100042ce:	b084      	sub	sp, #16
100042d0:	af00      	add	r7, sp, #0
100042d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
100042d4:	2300      	movs	r3, #0
100042d6:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
100042d8:	687b      	ldr	r3, [r7, #4]
100042da:	2b00      	cmp	r3, #0
100042dc:	d101      	bne.n	100042e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
100042de:	2301      	movs	r3, #1
100042e0:	e320      	b.n	10004924 <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
100042e2:	687b      	ldr	r3, [r7, #4]
100042e4:	681b      	ldr	r3, [r3, #0]
100042e6:	f003 0301 	and.w	r3, r3, #1
100042ea:	2b00      	cmp	r3, #0
100042ec:	f000 8081 	beq.w	100043f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
100042f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100042f4:	6a1b      	ldr	r3, [r3, #32]
100042f6:	f003 0303 	and.w	r3, r3, #3
100042fa:	2b01      	cmp	r3, #1
100042fc:	d107      	bne.n	1000430e <HAL_RCC_OscConfig+0x42>
100042fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004302:	6a1b      	ldr	r3, [r3, #32]
10004304:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004308:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000430c:	d054      	beq.n	100043b8 <HAL_RCC_OscConfig+0xec>
1000430e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004314:	f003 0307 	and.w	r3, r3, #7
10004318:	2b01      	cmp	r3, #1
1000431a:	d107      	bne.n	1000432c <HAL_RCC_OscConfig+0x60>
1000431c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004322:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004326:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000432a:	d045      	beq.n	100043b8 <HAL_RCC_OscConfig+0xec>
1000432c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10004332:	f003 0303 	and.w	r3, r3, #3
10004336:	2b01      	cmp	r3, #1
10004338:	d107      	bne.n	1000434a <HAL_RCC_OscConfig+0x7e>
1000433a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000433e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10004340:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004344:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004348:	d036      	beq.n	100043b8 <HAL_RCC_OscConfig+0xec>
1000434a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000434e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004350:	f003 0303 	and.w	r3, r3, #3
10004354:	2b01      	cmp	r3, #1
10004356:	d10f      	bne.n	10004378 <HAL_RCC_OscConfig+0xac>
10004358:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000435c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004360:	f003 0302 	and.w	r3, r3, #2
10004364:	2b02      	cmp	r3, #2
10004366:	d027      	beq.n	100043b8 <HAL_RCC_OscConfig+0xec>
10004368:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000436c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10004370:	f003 0302 	and.w	r3, r3, #2
10004374:	2b02      	cmp	r3, #2
10004376:	d01f      	beq.n	100043b8 <HAL_RCC_OscConfig+0xec>
10004378:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000437c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10004380:	f003 0303 	and.w	r3, r3, #3
10004384:	2b01      	cmp	r3, #1
10004386:	d107      	bne.n	10004398 <HAL_RCC_OscConfig+0xcc>
10004388:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000438c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004390:	f003 0302 	and.w	r3, r3, #2
10004394:	2b02      	cmp	r3, #2
10004396:	d00f      	beq.n	100043b8 <HAL_RCC_OscConfig+0xec>
10004398:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000439c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
100043a0:	f003 0303 	and.w	r3, r3, #3
100043a4:	2b01      	cmp	r3, #1
100043a6:	d117      	bne.n	100043d8 <HAL_RCC_OscConfig+0x10c>
100043a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100043ac:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100043b0:	f003 0302 	and.w	r3, r3, #2
100043b4:	2b02      	cmp	r3, #2
100043b6:	d10f      	bne.n	100043d8 <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
100043b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100043bc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100043c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
100043c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100043c8:	d112      	bne.n	100043f0 <HAL_RCC_OscConfig+0x124>
100043ca:	687b      	ldr	r3, [r7, #4]
100043cc:	685b      	ldr	r3, [r3, #4]
100043ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100043d2:	d00d      	beq.n	100043f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
100043d4:	2301      	movs	r3, #1
100043d6:	e2a5      	b.n	10004924 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
100043d8:	687b      	ldr	r3, [r7, #4]
100043da:	685b      	ldr	r3, [r3, #4]
100043dc:	4618      	mov	r0, r3
100043de:	f000 faa7 	bl	10004930 <HAL_RCC_HSEConfig>
100043e2:	4603      	mov	r3, r0
100043e4:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
100043e6:	7bfb      	ldrb	r3, [r7, #15]
100043e8:	2b00      	cmp	r3, #0
100043ea:	d002      	beq.n	100043f2 <HAL_RCC_OscConfig+0x126>
      {
        return result;
100043ec:	7bfb      	ldrb	r3, [r7, #15]
100043ee:	e299      	b.n	10004924 <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
100043f0:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
100043f2:	687b      	ldr	r3, [r7, #4]
100043f4:	681b      	ldr	r3, [r3, #0]
100043f6:	f003 0302 	and.w	r3, r3, #2
100043fa:	2b00      	cmp	r3, #0
100043fc:	f000 814e 	beq.w	1000469c <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
10004400:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004404:	6a1b      	ldr	r3, [r3, #32]
10004406:	f003 0303 	and.w	r3, r3, #3
1000440a:	2b00      	cmp	r3, #0
1000440c:	d107      	bne.n	1000441e <HAL_RCC_OscConfig+0x152>
1000440e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004412:	6a1b      	ldr	r3, [r3, #32]
10004414:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004418:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000441c:	d055      	beq.n	100044ca <HAL_RCC_OscConfig+0x1fe>
1000441e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004424:	f003 0307 	and.w	r3, r3, #7
10004428:	2b00      	cmp	r3, #0
1000442a:	d107      	bne.n	1000443c <HAL_RCC_OscConfig+0x170>
1000442c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004432:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004436:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000443a:	d046      	beq.n	100044ca <HAL_RCC_OscConfig+0x1fe>
1000443c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10004442:	f003 0303 	and.w	r3, r3, #3
10004446:	2b00      	cmp	r3, #0
10004448:	d107      	bne.n	1000445a <HAL_RCC_OscConfig+0x18e>
1000444a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000444e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10004450:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004454:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004458:	d037      	beq.n	100044ca <HAL_RCC_OscConfig+0x1fe>
1000445a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000445e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004460:	f003 0303 	and.w	r3, r3, #3
10004464:	2b00      	cmp	r3, #0
10004466:	d10f      	bne.n	10004488 <HAL_RCC_OscConfig+0x1bc>
10004468:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000446c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004470:	f003 0302 	and.w	r3, r3, #2
10004474:	2b02      	cmp	r3, #2
10004476:	d028      	beq.n	100044ca <HAL_RCC_OscConfig+0x1fe>
10004478:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000447c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10004480:	f003 0302 	and.w	r3, r3, #2
10004484:	2b02      	cmp	r3, #2
10004486:	d020      	beq.n	100044ca <HAL_RCC_OscConfig+0x1fe>
10004488:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000448c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10004490:	f003 0303 	and.w	r3, r3, #3
10004494:	2b00      	cmp	r3, #0
10004496:	d107      	bne.n	100044a8 <HAL_RCC_OscConfig+0x1dc>
10004498:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000449c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100044a0:	f003 0302 	and.w	r3, r3, #2
100044a4:	2b02      	cmp	r3, #2
100044a6:	d010      	beq.n	100044ca <HAL_RCC_OscConfig+0x1fe>
100044a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044ac:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
100044b0:	f003 0303 	and.w	r3, r3, #3
100044b4:	2b00      	cmp	r3, #0
100044b6:	f040 8088 	bne.w	100045ca <HAL_RCC_OscConfig+0x2fe>
100044ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044be:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100044c2:	f003 0302 	and.w	r3, r3, #2
100044c6:	2b02      	cmp	r3, #2
100044c8:	d17f      	bne.n	100045ca <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
100044ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044ce:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100044d2:	f003 0301 	and.w	r3, r3, #1
100044d6:	2b01      	cmp	r3, #1
100044d8:	d105      	bne.n	100044e6 <HAL_RCC_OscConfig+0x21a>
100044da:	687b      	ldr	r3, [r7, #4]
100044dc:	68db      	ldr	r3, [r3, #12]
100044de:	2b01      	cmp	r3, #1
100044e0:	d001      	beq.n	100044e6 <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
100044e2:	2301      	movs	r3, #1
100044e4:	e21e      	b.n	10004924 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
100044e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044ea:	699b      	ldr	r3, [r3, #24]
100044ec:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
100044f0:	687b      	ldr	r3, [r7, #4]
100044f2:	691b      	ldr	r3, [r3, #16]
100044f4:	021b      	lsls	r3, r3, #8
100044f6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100044fa:	4313      	orrs	r3, r2
100044fc:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
100044fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004504:	f003 0303 	and.w	r3, r3, #3
10004508:	2b00      	cmp	r3, #0
1000450a:	d10f      	bne.n	1000452c <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
1000450c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004510:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004514:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10004518:	2b02      	cmp	r3, #2
1000451a:	d047      	beq.n	100045ac <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
1000451c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004520:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10004524:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10004528:	2b02      	cmp	r3, #2
1000452a:	d03f      	beq.n	100045ac <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
1000452c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004530:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10004534:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10004538:	2b00      	cmp	r3, #0
1000453a:	d107      	bne.n	1000454c <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
1000453c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004540:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004544:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10004548:	2b02      	cmp	r3, #2
1000454a:	d02f      	beq.n	100045ac <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
1000454c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004550:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10004554:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10004558:	2b00      	cmp	r3, #0
1000455a:	d107      	bne.n	1000456c <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
1000455c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004560:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004564:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10004568:	2b02      	cmp	r3, #2
1000456a:	d01f      	beq.n	100045ac <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
1000456c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004570:	699b      	ldr	r3, [r3, #24]
10004572:	f023 0203 	bic.w	r2, r3, #3
10004576:	687b      	ldr	r3, [r7, #4]
10004578:	695b      	ldr	r3, [r3, #20]
1000457a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000457e:	4313      	orrs	r3, r2
10004580:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
10004582:	f7fd fa47 	bl	10001a14 <HAL_GetTick>
10004586:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10004588:	e008      	b.n	1000459c <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000458a:	f7fd fa43 	bl	10001a14 <HAL_GetTick>
1000458e:	4602      	mov	r2, r0
10004590:	68bb      	ldr	r3, [r7, #8]
10004592:	1ad3      	subs	r3, r2, r3
10004594:	2b64      	cmp	r3, #100	; 0x64
10004596:	d901      	bls.n	1000459c <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
10004598:	2303      	movs	r3, #3
1000459a:	e1c3      	b.n	10004924 <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
1000459c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100045a0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100045a4:	f003 0304 	and.w	r3, r3, #4
100045a8:	2b04      	cmp	r3, #4
100045aa:	d1ee      	bne.n	1000458a <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
100045ac:	f001 faca 	bl	10005b44 <HAL_RCC_GetSystemCoreClockFreq>
100045b0:	4603      	mov	r3, r0
100045b2:	4ab3      	ldr	r2, [pc, #716]	; (10004880 <HAL_RCC_OscConfig+0x5b4>)
100045b4:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
100045b6:	4bb3      	ldr	r3, [pc, #716]	; (10004884 <HAL_RCC_OscConfig+0x5b8>)
100045b8:	681b      	ldr	r3, [r3, #0]
100045ba:	4618      	mov	r0, r3
100045bc:	f7fd f9e0 	bl	10001980 <HAL_InitTick>
100045c0:	4603      	mov	r3, r0
100045c2:	2b00      	cmp	r3, #0
100045c4:	d069      	beq.n	1000469a <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
100045c6:	2301      	movs	r3, #1
100045c8:	e1ac      	b.n	10004924 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
100045ca:	687b      	ldr	r3, [r7, #4]
100045cc:	68db      	ldr	r3, [r3, #12]
100045ce:	2b00      	cmp	r3, #0
100045d0:	d049      	beq.n	10004666 <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
100045d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100045d6:	68db      	ldr	r3, [r3, #12]
100045d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100045dc:	f043 0301 	orr.w	r3, r3, #1
100045e0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100045e2:	f7fd fa17 	bl	10001a14 <HAL_GetTick>
100045e6:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100045e8:	e008      	b.n	100045fc <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
100045ea:	f7fd fa13 	bl	10001a14 <HAL_GetTick>
100045ee:	4602      	mov	r2, r0
100045f0:	68bb      	ldr	r3, [r7, #8]
100045f2:	1ad3      	subs	r3, r2, r3
100045f4:	2b64      	cmp	r3, #100	; 0x64
100045f6:	d901      	bls.n	100045fc <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
100045f8:	2303      	movs	r3, #3
100045fa:	e193      	b.n	10004924 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100045fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004600:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004604:	f003 0301 	and.w	r3, r3, #1
10004608:	2b01      	cmp	r3, #1
1000460a:	d1ee      	bne.n	100045ea <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
1000460c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004610:	699b      	ldr	r3, [r3, #24]
10004612:	f023 0203 	bic.w	r2, r3, #3
10004616:	687b      	ldr	r3, [r7, #4]
10004618:	695b      	ldr	r3, [r3, #20]
1000461a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000461e:	4313      	orrs	r3, r2
10004620:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10004622:	f7fd f9f7 	bl	10001a14 <HAL_GetTick>
10004626:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10004628:	e008      	b.n	1000463c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000462a:	f7fd f9f3 	bl	10001a14 <HAL_GetTick>
1000462e:	4602      	mov	r2, r0
10004630:	68bb      	ldr	r3, [r7, #8]
10004632:	1ad3      	subs	r3, r2, r3
10004634:	2b64      	cmp	r3, #100	; 0x64
10004636:	d901      	bls.n	1000463c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
10004638:	2303      	movs	r3, #3
1000463a:	e173      	b.n	10004924 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
1000463c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004640:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004644:	f003 0304 	and.w	r3, r3, #4
10004648:	2b04      	cmp	r3, #4
1000464a:	d1ee      	bne.n	1000462a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
1000464c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004650:	699b      	ldr	r3, [r3, #24]
10004652:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
10004656:	687b      	ldr	r3, [r7, #4]
10004658:	691b      	ldr	r3, [r3, #16]
1000465a:	021b      	lsls	r3, r3, #8
1000465c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004660:	4313      	orrs	r3, r2
10004662:	618b      	str	r3, [r1, #24]
10004664:	e01a      	b.n	1000469c <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
10004666:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000466a:	2201      	movs	r2, #1
1000466c:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000466e:	f7fd f9d1 	bl	10001a14 <HAL_GetTick>
10004672:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10004674:	e008      	b.n	10004688 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10004676:	f7fd f9cd 	bl	10001a14 <HAL_GetTick>
1000467a:	4602      	mov	r2, r0
1000467c:	68bb      	ldr	r3, [r7, #8]
1000467e:	1ad3      	subs	r3, r2, r3
10004680:	2b64      	cmp	r3, #100	; 0x64
10004682:	d901      	bls.n	10004688 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
10004684:	2303      	movs	r3, #3
10004686:	e14d      	b.n	10004924 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10004688:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000468c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004690:	f003 0301 	and.w	r3, r3, #1
10004694:	2b01      	cmp	r3, #1
10004696:	d0ee      	beq.n	10004676 <HAL_RCC_OscConfig+0x3aa>
10004698:	e000      	b.n	1000469c <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
1000469a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
1000469c:	687b      	ldr	r3, [r7, #4]
1000469e:	681b      	ldr	r3, [r3, #0]
100046a0:	f003 0310 	and.w	r3, r3, #16
100046a4:	2b00      	cmp	r3, #0
100046a6:	f000 8091 	beq.w	100047cc <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
100046aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100046ae:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
100046b2:	f003 0303 	and.w	r3, r3, #3
100046b6:	2b02      	cmp	r3, #2
100046b8:	d107      	bne.n	100046ca <HAL_RCC_OscConfig+0x3fe>
100046ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100046be:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100046c2:	f003 0302 	and.w	r3, r3, #2
100046c6:	2b02      	cmp	r3, #2
100046c8:	d01e      	beq.n	10004708 <HAL_RCC_OscConfig+0x43c>
100046ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100046ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100046d0:	f003 0303 	and.w	r3, r3, #3
100046d4:	2b02      	cmp	r3, #2
100046d6:	d107      	bne.n	100046e8 <HAL_RCC_OscConfig+0x41c>
100046d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100046dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100046de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100046e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100046e6:	d00f      	beq.n	10004708 <HAL_RCC_OscConfig+0x43c>
100046e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100046ec:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
100046f0:	f003 0303 	and.w	r3, r3, #3
100046f4:	2b02      	cmp	r3, #2
100046f6:	d122      	bne.n	1000473e <HAL_RCC_OscConfig+0x472>
100046f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100046fc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004700:	f003 0302 	and.w	r3, r3, #2
10004704:	2b02      	cmp	r3, #2
10004706:	d11a      	bne.n	1000473e <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10004708:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000470c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004710:	f003 0310 	and.w	r3, r3, #16
10004714:	2b10      	cmp	r3, #16
10004716:	d105      	bne.n	10004724 <HAL_RCC_OscConfig+0x458>
10004718:	687b      	ldr	r3, [r7, #4]
1000471a:	69db      	ldr	r3, [r3, #28]
1000471c:	2b10      	cmp	r3, #16
1000471e:	d001      	beq.n	10004724 <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
10004720:	2301      	movs	r3, #1
10004722:	e0ff      	b.n	10004924 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10004724:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004728:	69db      	ldr	r3, [r3, #28]
1000472a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
1000472e:	687b      	ldr	r3, [r7, #4]
10004730:	6a1b      	ldr	r3, [r3, #32]
10004732:	021b      	lsls	r3, r3, #8
10004734:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004738:	4313      	orrs	r3, r2
1000473a:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
1000473c:	e046      	b.n	100047cc <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
1000473e:	687b      	ldr	r3, [r7, #4]
10004740:	69db      	ldr	r3, [r3, #28]
10004742:	2b00      	cmp	r3, #0
10004744:	d029      	beq.n	1000479a <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
10004746:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000474a:	68db      	ldr	r3, [r3, #12]
1000474c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004750:	f043 0310 	orr.w	r3, r3, #16
10004754:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10004756:	f7fd f95d 	bl	10001a14 <HAL_GetTick>
1000475a:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
1000475c:	e008      	b.n	10004770 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
1000475e:	f7fd f959 	bl	10001a14 <HAL_GetTick>
10004762:	4602      	mov	r2, r0
10004764:	68bb      	ldr	r3, [r7, #8]
10004766:	1ad3      	subs	r3, r2, r3
10004768:	2b64      	cmp	r3, #100	; 0x64
1000476a:	d901      	bls.n	10004770 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
1000476c:	2303      	movs	r3, #3
1000476e:	e0d9      	b.n	10004924 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10004770:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004774:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004778:	f003 0310 	and.w	r3, r3, #16
1000477c:	2b10      	cmp	r3, #16
1000477e:	d1ee      	bne.n	1000475e <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10004780:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004784:	69db      	ldr	r3, [r3, #28]
10004786:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
1000478a:	687b      	ldr	r3, [r7, #4]
1000478c:	6a1b      	ldr	r3, [r3, #32]
1000478e:	021b      	lsls	r3, r3, #8
10004790:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004794:	4313      	orrs	r3, r2
10004796:	61cb      	str	r3, [r1, #28]
10004798:	e018      	b.n	100047cc <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
1000479a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000479e:	2210      	movs	r2, #16
100047a0:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100047a2:	f7fd f937 	bl	10001a14 <HAL_GetTick>
100047a6:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
100047a8:	e008      	b.n	100047bc <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
100047aa:	f7fd f933 	bl	10001a14 <HAL_GetTick>
100047ae:	4602      	mov	r2, r0
100047b0:	68bb      	ldr	r3, [r7, #8]
100047b2:	1ad3      	subs	r3, r2, r3
100047b4:	2b64      	cmp	r3, #100	; 0x64
100047b6:	d901      	bls.n	100047bc <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
100047b8:	2303      	movs	r3, #3
100047ba:	e0b3      	b.n	10004924 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
100047bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100047c0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100047c4:	f003 0310 	and.w	r3, r3, #16
100047c8:	2b10      	cmp	r3, #16
100047ca:	d0ee      	beq.n	100047aa <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
100047cc:	687b      	ldr	r3, [r7, #4]
100047ce:	681b      	ldr	r3, [r3, #0]
100047d0:	f003 0308 	and.w	r3, r3, #8
100047d4:	2b00      	cmp	r3, #0
100047d6:	d042      	beq.n	1000485e <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
100047d8:	687b      	ldr	r3, [r7, #4]
100047da:	699b      	ldr	r3, [r3, #24]
100047dc:	2b00      	cmp	r3, #0
100047de:	d01f      	beq.n	10004820 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
100047e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100047e4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
100047e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100047ec:	f043 0301 	orr.w	r3, r3, #1
100047f0:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100047f4:	f7fd f90e 	bl	10001a14 <HAL_GetTick>
100047f8:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
100047fa:	e008      	b.n	1000480e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
100047fc:	f7fd f90a 	bl	10001a14 <HAL_GetTick>
10004800:	4602      	mov	r2, r0
10004802:	68bb      	ldr	r3, [r7, #8]
10004804:	1ad3      	subs	r3, r2, r3
10004806:	2b64      	cmp	r3, #100	; 0x64
10004808:	d901      	bls.n	1000480e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
1000480a:	2303      	movs	r3, #3
1000480c:	e08a      	b.n	10004924 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
1000480e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004812:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10004816:	f003 0302 	and.w	r3, r3, #2
1000481a:	2b02      	cmp	r3, #2
1000481c:	d1ee      	bne.n	100047fc <HAL_RCC_OscConfig+0x530>
1000481e:	e01e      	b.n	1000485e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10004820:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004824:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10004828:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000482c:	f023 0301 	bic.w	r3, r3, #1
10004830:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10004834:	f7fd f8ee 	bl	10001a14 <HAL_GetTick>
10004838:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
1000483a:	e008      	b.n	1000484e <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
1000483c:	f7fd f8ea 	bl	10001a14 <HAL_GetTick>
10004840:	4602      	mov	r2, r0
10004842:	68bb      	ldr	r3, [r7, #8]
10004844:	1ad3      	subs	r3, r2, r3
10004846:	2b64      	cmp	r3, #100	; 0x64
10004848:	d901      	bls.n	1000484e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
1000484a:	2303      	movs	r3, #3
1000484c:	e06a      	b.n	10004924 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
1000484e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004852:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10004856:	f003 0302 	and.w	r3, r3, #2
1000485a:	2b02      	cmp	r3, #2
1000485c:	d0ee      	beq.n	1000483c <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
1000485e:	687b      	ldr	r3, [r7, #4]
10004860:	681b      	ldr	r3, [r3, #0]
10004862:	f003 0304 	and.w	r3, r3, #4
10004866:	2b00      	cmp	r3, #0
10004868:	d02b      	beq.n	100048c2 <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
1000486a:	4b07      	ldr	r3, [pc, #28]	; (10004888 <HAL_RCC_OscConfig+0x5bc>)
1000486c:	681b      	ldr	r3, [r3, #0]
1000486e:	4a06      	ldr	r2, [pc, #24]	; (10004888 <HAL_RCC_OscConfig+0x5bc>)
10004870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10004874:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
10004876:	f7fd f8cd 	bl	10001a14 <HAL_GetTick>
1000487a:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
1000487c:	e00f      	b.n	1000489e <HAL_RCC_OscConfig+0x5d2>
1000487e:	bf00      	nop
10004880:	10020000 	.word	0x10020000
10004884:	1002000c 	.word	0x1002000c
10004888:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
1000488c:	f7fd f8c2 	bl	10001a14 <HAL_GetTick>
10004890:	4602      	mov	r2, r0
10004892:	68bb      	ldr	r3, [r7, #8]
10004894:	1ad3      	subs	r3, r2, r3
10004896:	2b64      	cmp	r3, #100	; 0x64
10004898:	d901      	bls.n	1000489e <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
1000489a:	2303      	movs	r3, #3
1000489c:	e042      	b.n	10004924 <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
1000489e:	4b23      	ldr	r3, [pc, #140]	; (1000492c <HAL_RCC_OscConfig+0x660>)
100048a0:	681b      	ldr	r3, [r3, #0]
100048a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
100048a6:	2b00      	cmp	r3, #0
100048a8:	d0f0      	beq.n	1000488c <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
100048aa:	687b      	ldr	r3, [r7, #4]
100048ac:	689b      	ldr	r3, [r3, #8]
100048ae:	4618      	mov	r0, r3
100048b0:	f000 f8a9 	bl	10004a06 <HAL_RCC_LSEConfig>
100048b4:	4603      	mov	r3, r0
100048b6:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
100048b8:	7bfb      	ldrb	r3, [r7, #15]
100048ba:	2b00      	cmp	r3, #0
100048bc:	d001      	beq.n	100048c2 <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
100048be:	7bfb      	ldrb	r3, [r7, #15]
100048c0:	e030      	b.n	10004924 <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
100048c2:	687b      	ldr	r3, [r7, #4]
100048c4:	3324      	adds	r3, #36	; 0x24
100048c6:	4618      	mov	r0, r3
100048c8:	f000 f91a 	bl	10004b00 <RCC_PLL1_Config>
100048cc:	4603      	mov	r3, r0
100048ce:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
100048d0:	7bfb      	ldrb	r3, [r7, #15]
100048d2:	2b00      	cmp	r3, #0
100048d4:	d001      	beq.n	100048da <HAL_RCC_OscConfig+0x60e>
  {
    return result;
100048d6:	7bfb      	ldrb	r3, [r7, #15]
100048d8:	e024      	b.n	10004924 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
100048da:	687b      	ldr	r3, [r7, #4]
100048dc:	3360      	adds	r3, #96	; 0x60
100048de:	4618      	mov	r0, r3
100048e0:	f001 f9cc 	bl	10005c7c <RCCEx_PLL2_Config>
100048e4:	4603      	mov	r3, r0
100048e6:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
100048e8:	7bfb      	ldrb	r3, [r7, #15]
100048ea:	2b00      	cmp	r3, #0
100048ec:	d001      	beq.n	100048f2 <HAL_RCC_OscConfig+0x626>
  {
    return result;
100048ee:	7bfb      	ldrb	r3, [r7, #15]
100048f0:	e018      	b.n	10004924 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
100048f2:	687b      	ldr	r3, [r7, #4]
100048f4:	339c      	adds	r3, #156	; 0x9c
100048f6:	4618      	mov	r0, r3
100048f8:	f001 fb42 	bl	10005f80 <RCCEx_PLL3_Config>
100048fc:	4603      	mov	r3, r0
100048fe:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10004900:	7bfb      	ldrb	r3, [r7, #15]
10004902:	2b00      	cmp	r3, #0
10004904:	d001      	beq.n	1000490a <HAL_RCC_OscConfig+0x63e>
  {
    return result;
10004906:	7bfb      	ldrb	r3, [r7, #15]
10004908:	e00c      	b.n	10004924 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
1000490a:	687b      	ldr	r3, [r7, #4]
1000490c:	33d8      	adds	r3, #216	; 0xd8
1000490e:	4618      	mov	r0, r3
10004910:	f001 fca0 	bl	10006254 <RCCEx_PLL4_Config>
10004914:	4603      	mov	r3, r0
10004916:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10004918:	7bfb      	ldrb	r3, [r7, #15]
1000491a:	2b00      	cmp	r3, #0
1000491c:	d001      	beq.n	10004922 <HAL_RCC_OscConfig+0x656>
  {
    return result;
1000491e:	7bfb      	ldrb	r3, [r7, #15]
10004920:	e000      	b.n	10004924 <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
10004922:	2300      	movs	r3, #0
}
10004924:	4618      	mov	r0, r3
10004926:	3710      	adds	r7, #16
10004928:	46bd      	mov	sp, r7
1000492a:	bd80      	pop	{r7, pc}
1000492c:	50001000 	.word	0x50001000

10004930 <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
10004930:	b580      	push	{r7, lr}
10004932:	b084      	sub	sp, #16
10004934:	af00      	add	r7, sp, #0
10004936:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
10004938:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000493c:	f44f 7280 	mov.w	r2, #256	; 0x100
10004940:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10004942:	f7fd f867 	bl	10001a14 <HAL_GetTick>
10004946:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10004948:	e008      	b.n	1000495c <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1000494a:	f7fd f863 	bl	10001a14 <HAL_GetTick>
1000494e:	4602      	mov	r2, r0
10004950:	68fb      	ldr	r3, [r7, #12]
10004952:	1ad3      	subs	r3, r2, r3
10004954:	2b64      	cmp	r3, #100	; 0x64
10004956:	d901      	bls.n	1000495c <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
10004958:	2303      	movs	r3, #3
1000495a:	e050      	b.n	100049fe <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
1000495c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004960:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004964:	f403 7380 	and.w	r3, r3, #256	; 0x100
10004968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
1000496c:	d0ed      	beq.n	1000494a <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
1000496e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004972:	f44f 6290 	mov.w	r2, #1152	; 0x480
10004976:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
10004978:	687b      	ldr	r3, [r7, #4]
1000497a:	2b00      	cmp	r3, #0
1000497c:	d03e      	beq.n	100049fc <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
1000497e:	687b      	ldr	r3, [r7, #4]
10004980:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
10004984:	d108      	bne.n	10004998 <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10004986:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000498a:	68db      	ldr	r3, [r3, #12]
1000498c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004990:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
10004994:	60d3      	str	r3, [r2, #12]
10004996:	e013      	b.n	100049c0 <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
10004998:	687b      	ldr	r3, [r7, #4]
1000499a:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
1000499e:	d10f      	bne.n	100049c0 <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
100049a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100049a4:	68db      	ldr	r3, [r3, #12]
100049a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100049aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
100049ae:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
100049b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100049b4:	68db      	ldr	r3, [r3, #12]
100049b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100049ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
100049be:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
100049c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100049c4:	68db      	ldr	r3, [r3, #12]
100049c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100049ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
100049ce:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100049d0:	f7fd f820 	bl	10001a14 <HAL_GetTick>
100049d4:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100049d6:	e008      	b.n	100049ea <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100049d8:	f7fd f81c 	bl	10001a14 <HAL_GetTick>
100049dc:	4602      	mov	r2, r0
100049de:	68fb      	ldr	r3, [r7, #12]
100049e0:	1ad3      	subs	r3, r2, r3
100049e2:	2b64      	cmp	r3, #100	; 0x64
100049e4:	d901      	bls.n	100049ea <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
100049e6:	2303      	movs	r3, #3
100049e8:	e009      	b.n	100049fe <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100049ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100049ee:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100049f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
100049f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100049fa:	d1ed      	bne.n	100049d8 <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
100049fc:	2300      	movs	r3, #0
}
100049fe:	4618      	mov	r0, r3
10004a00:	3710      	adds	r7, #16
10004a02:	46bd      	mov	sp, r7
10004a04:	bd80      	pop	{r7, pc}

10004a06 <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
10004a06:	b580      	push	{r7, lr}
10004a08:	b084      	sub	sp, #16
10004a0a:	af00      	add	r7, sp, #0
10004a0c:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10004a0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a12:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10004a16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004a1a:	f023 0301 	bic.w	r3, r3, #1
10004a1e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10004a22:	f7fc fff7 	bl	10001a14 <HAL_GetTick>
10004a26:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10004a28:	e00a      	b.n	10004a40 <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10004a2a:	f7fc fff3 	bl	10001a14 <HAL_GetTick>
10004a2e:	4602      	mov	r2, r0
10004a30:	68fb      	ldr	r3, [r7, #12]
10004a32:	1ad3      	subs	r3, r2, r3
10004a34:	f241 3288 	movw	r2, #5000	; 0x1388
10004a38:	4293      	cmp	r3, r2
10004a3a:	d901      	bls.n	10004a40 <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
10004a3c:	2303      	movs	r3, #3
10004a3e:	e05b      	b.n	10004af8 <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10004a40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10004a48:	f003 0304 	and.w	r3, r3, #4
10004a4c:	2b04      	cmp	r3, #4
10004a4e:	d0ec      	beq.n	10004a2a <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
10004a50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10004a58:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004a5c:	f023 030a 	bic.w	r3, r3, #10
10004a60:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
10004a64:	687b      	ldr	r3, [r7, #4]
10004a66:	2b00      	cmp	r3, #0
10004a68:	d045      	beq.n	10004af6 <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
10004a6a:	687b      	ldr	r3, [r7, #4]
10004a6c:	2b03      	cmp	r3, #3
10004a6e:	d10a      	bne.n	10004a86 <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10004a70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a74:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10004a78:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004a7c:	f043 0302 	orr.w	r3, r3, #2
10004a80:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
10004a84:	e016      	b.n	10004ab4 <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
10004a86:	687b      	ldr	r3, [r7, #4]
10004a88:	2b0b      	cmp	r3, #11
10004a8a:	d113      	bne.n	10004ab4 <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
10004a8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10004a94:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004a98:	f043 0308 	orr.w	r3, r3, #8
10004a9c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10004aa0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004aa4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10004aa8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004aac:	f043 0302 	orr.w	r3, r3, #2
10004ab0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10004ab4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004ab8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10004abc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004ac0:	f043 0301 	orr.w	r3, r3, #1
10004ac4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004ac8:	f7fc ffa4 	bl	10001a14 <HAL_GetTick>
10004acc:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10004ace:	e00a      	b.n	10004ae6 <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10004ad0:	f7fc ffa0 	bl	10001a14 <HAL_GetTick>
10004ad4:	4602      	mov	r2, r0
10004ad6:	68fb      	ldr	r3, [r7, #12]
10004ad8:	1ad3      	subs	r3, r2, r3
10004ada:	f241 3288 	movw	r2, #5000	; 0x1388
10004ade:	4293      	cmp	r3, r2
10004ae0:	d901      	bls.n	10004ae6 <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
10004ae2:	2303      	movs	r3, #3
10004ae4:	e008      	b.n	10004af8 <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10004ae6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004aea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10004aee:	f003 0304 	and.w	r3, r3, #4
10004af2:	2b04      	cmp	r3, #4
10004af4:	d1ec      	bne.n	10004ad0 <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
10004af6:	2300      	movs	r3, #0
}
10004af8:	4618      	mov	r0, r3
10004afa:	3710      	adds	r7, #16
10004afc:	46bd      	mov	sp, r7
10004afe:	bd80      	pop	{r7, pc}

10004b00 <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
10004b00:	b580      	push	{r7, lr}
10004b02:	b084      	sub	sp, #16
10004b04:	af00      	add	r7, sp, #0
10004b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
10004b08:	687b      	ldr	r3, [r7, #4]
10004b0a:	681b      	ldr	r3, [r3, #0]
10004b0c:	2b00      	cmp	r3, #0
10004b0e:	f000 8174 	beq.w	10004dfa <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
10004b12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b16:	6a1b      	ldr	r3, [r3, #32]
10004b18:	f003 0303 	and.w	r3, r3, #3
10004b1c:	2b02      	cmp	r3, #2
10004b1e:	d108      	bne.n	10004b32 <RCC_PLL1_Config+0x32>
10004b20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b24:	6a1b      	ldr	r3, [r3, #32]
10004b26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004b2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004b2e:	f000 8162 	beq.w	10004df6 <RCC_PLL1_Config+0x2f6>
10004b32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b36:	6a1b      	ldr	r3, [r3, #32]
10004b38:	f003 0303 	and.w	r3, r3, #3
10004b3c:	2b03      	cmp	r3, #3
10004b3e:	d108      	bne.n	10004b52 <RCC_PLL1_Config+0x52>
10004b40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b44:	6a1b      	ldr	r3, [r3, #32]
10004b46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004b4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004b4e:	f000 8152 	beq.w	10004df6 <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
10004b52:	687b      	ldr	r3, [r7, #4]
10004b54:	681b      	ldr	r3, [r3, #0]
10004b56:	2b02      	cmp	r3, #2
10004b58:	f040 8123 	bne.w	10004da2 <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10004b5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004b64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10004b6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
10004b70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004b78:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004b7c:	f023 0301 	bic.w	r3, r3, #1
10004b80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10004b84:	f7fc ff46 	bl	10001a14 <HAL_GetTick>
10004b88:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10004b8a:	e008      	b.n	10004b9e <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10004b8c:	f7fc ff42 	bl	10001a14 <HAL_GetTick>
10004b90:	4602      	mov	r2, r0
10004b92:	68fb      	ldr	r3, [r7, #12]
10004b94:	1ad3      	subs	r3, r2, r3
10004b96:	2b64      	cmp	r3, #100	; 0x64
10004b98:	d901      	bls.n	10004b9e <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
10004b9a:	2303      	movs	r3, #3
10004b9c:	e12e      	b.n	10004dfc <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10004b9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004ba6:	f003 0302 	and.w	r3, r3, #2
10004baa:	2b02      	cmp	r3, #2
10004bac:	d0ee      	beq.n	10004b8c <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
10004bae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004bb4:	f003 0307 	and.w	r3, r3, #7
10004bb8:	2b02      	cmp	r3, #2
10004bba:	d112      	bne.n	10004be2 <RCC_PLL1_Config+0xe2>
10004bbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004bc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004bc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004bca:	d10a      	bne.n	10004be2 <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10004bcc:	687b      	ldr	r3, [r7, #4]
10004bce:	685a      	ldr	r2, [r3, #4]
10004bd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004bd6:	f003 0303 	and.w	r3, r3, #3
10004bda:	429a      	cmp	r2, r3
10004bdc:	d00c      	beq.n	10004bf8 <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
10004bde:	2301      	movs	r3, #1
10004be0:	e10c      	b.n	10004dfc <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
10004be2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004be8:	f023 0203 	bic.w	r2, r3, #3
10004bec:	687b      	ldr	r3, [r7, #4]
10004bee:	685b      	ldr	r3, [r3, #4]
10004bf0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004bf4:	4313      	orrs	r3, r2
10004bf6:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10004bf8:	e008      	b.n	10004c0c <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10004bfa:	f7fc ff0b 	bl	10001a14 <HAL_GetTick>
10004bfe:	4602      	mov	r2, r0
10004c00:	68fb      	ldr	r3, [r7, #12]
10004c02:	1ad3      	subs	r3, r2, r3
10004c04:	2b64      	cmp	r3, #100	; 0x64
10004c06:	d901      	bls.n	10004c0c <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
10004c08:	2303      	movs	r3, #3
10004c0a:	e0f7      	b.n	10004dfc <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10004c0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004c12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004c16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004c1a:	d1ee      	bne.n	10004bfa <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
10004c1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004c20:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
10004c24:	4b77      	ldr	r3, [pc, #476]	; (10004e04 <RCC_PLL1_Config+0x304>)
10004c26:	4013      	ands	r3, r2
10004c28:	687a      	ldr	r2, [r7, #4]
10004c2a:	68d2      	ldr	r2, [r2, #12]
10004c2c:	1e51      	subs	r1, r2, #1
10004c2e:	687a      	ldr	r2, [r7, #4]
10004c30:	6892      	ldr	r2, [r2, #8]
10004c32:	3a01      	subs	r2, #1
10004c34:	0412      	lsls	r2, r2, #16
10004c36:	430a      	orrs	r2, r1
10004c38:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004c3c:	4313      	orrs	r3, r2
10004c3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
10004c42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10004c4a:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10004c4e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10004c52:	687a      	ldr	r2, [r7, #4]
10004c54:	6912      	ldr	r2, [r2, #16]
10004c56:	1e51      	subs	r1, r2, #1
10004c58:	687a      	ldr	r2, [r7, #4]
10004c5a:	6952      	ldr	r2, [r2, #20]
10004c5c:	3a01      	subs	r2, #1
10004c5e:	0212      	lsls	r2, r2, #8
10004c60:	4311      	orrs	r1, r2
10004c62:	687a      	ldr	r2, [r7, #4]
10004c64:	6992      	ldr	r2, [r2, #24]
10004c66:	3a01      	subs	r2, #1
10004c68:	0412      	lsls	r2, r2, #16
10004c6a:	430a      	orrs	r2, r1
10004c6c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004c70:	4313      	orrs	r3, r2
10004c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
10004c76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10004c7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10004c86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
10004c8a:	687b      	ldr	r3, [r7, #4]
10004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004c8e:	2b02      	cmp	r3, #2
10004c90:	d003      	beq.n	10004c9a <RCC_PLL1_Config+0x19a>
10004c92:	687b      	ldr	r3, [r7, #4]
10004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004c96:	2b00      	cmp	r3, #0
10004c98:	d10c      	bne.n	10004cb4 <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
10004c9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004c9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10004ca2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004ca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10004caa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10004cae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
10004cb2:	e00f      	b.n	10004cd4 <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
10004cb4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10004cbc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10004cc0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10004cc4:	687a      	ldr	r2, [r7, #4]
10004cc6:	6a12      	ldr	r2, [r2, #32]
10004cc8:	00d2      	lsls	r2, r2, #3
10004cca:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004cce:	4313      	orrs	r3, r2
10004cd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
10004cd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10004cdc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10004ce4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10004ce8:	687b      	ldr	r3, [r7, #4]
10004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004cec:	2b02      	cmp	r3, #2
10004cee:	d124      	bne.n	10004d3a <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
10004cf0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
10004cf8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10004cfc:	687b      	ldr	r3, [r7, #4]
10004cfe:	6a99      	ldr	r1, [r3, #40]	; 0x28
10004d00:	687b      	ldr	r3, [r7, #4]
10004d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10004d04:	4319      	orrs	r1, r3
10004d06:	687b      	ldr	r3, [r7, #4]
10004d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10004d0a:	4319      	orrs	r1, r3
10004d0c:	687b      	ldr	r3, [r7, #4]
10004d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10004d10:	4319      	orrs	r1, r3
10004d12:	687b      	ldr	r3, [r7, #4]
10004d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10004d16:	041b      	lsls	r3, r3, #16
10004d18:	430b      	orrs	r3, r1
10004d1a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004d1e:	4313      	orrs	r3, r2
10004d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
10004d24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004d2c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004d30:	f043 0304 	orr.w	r3, r3, #4
10004d34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
10004d38:	e009      	b.n	10004d4e <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
10004d3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004d42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004d46:	f023 0304 	bic.w	r3, r3, #4
10004d4a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
10004d4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004d56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004d5a:	f043 0301 	orr.w	r3, r3, #1
10004d5e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10004d62:	f7fc fe57 	bl	10001a14 <HAL_GetTick>
10004d66:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10004d68:	e008      	b.n	10004d7c <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10004d6a:	f7fc fe53 	bl	10001a14 <HAL_GetTick>
10004d6e:	4602      	mov	r2, r0
10004d70:	68fb      	ldr	r3, [r7, #12]
10004d72:	1ad3      	subs	r3, r2, r3
10004d74:	2b64      	cmp	r3, #100	; 0x64
10004d76:	d901      	bls.n	10004d7c <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
10004d78:	2303      	movs	r3, #3
10004d7a:	e03f      	b.n	10004dfc <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10004d7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004d84:	f003 0302 	and.w	r3, r3, #2
10004d88:	2b02      	cmp	r3, #2
10004d8a:	d1ee      	bne.n	10004d6a <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10004d8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004d94:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004d98:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10004d9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
10004da0:	e02b      	b.n	10004dfa <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10004da2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004daa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10004db2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
10004db6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004dbe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004dc2:	f023 0301 	bic.w	r3, r3, #1
10004dc6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10004dca:	f7fc fe23 	bl	10001a14 <HAL_GetTick>
10004dce:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10004dd0:	e008      	b.n	10004de4 <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10004dd2:	f7fc fe1f 	bl	10001a14 <HAL_GetTick>
10004dd6:	4602      	mov	r2, r0
10004dd8:	68fb      	ldr	r3, [r7, #12]
10004dda:	1ad3      	subs	r3, r2, r3
10004ddc:	2b64      	cmp	r3, #100	; 0x64
10004dde:	d901      	bls.n	10004de4 <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
10004de0:	2303      	movs	r3, #3
10004de2:	e00b      	b.n	10004dfc <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10004de4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004dec:	f003 0302 	and.w	r3, r3, #2
10004df0:	2b02      	cmp	r3, #2
10004df2:	d0ee      	beq.n	10004dd2 <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
10004df4:	e001      	b.n	10004dfa <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10004df6:	2301      	movs	r3, #1
10004df8:	e000      	b.n	10004dfc <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
10004dfa:	2300      	movs	r3, #0

}
10004dfc:	4618      	mov	r0, r3
10004dfe:	3710      	adds	r7, #16
10004e00:	46bd      	mov	sp, r7
10004e02:	bd80      	pop	{r7, pc}
10004e04:	ffc0fe00 	.word	0xffc0fe00

10004e08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
10004e08:	b580      	push	{r7, lr}
10004e0a:	b084      	sub	sp, #16
10004e0c:	af00      	add	r7, sp, #0
10004e0e:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
10004e10:	2300      	movs	r3, #0
10004e12:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10004e14:	687b      	ldr	r3, [r7, #4]
10004e16:	2b00      	cmp	r3, #0
10004e18:	d101      	bne.n	10004e1e <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
10004e1a:	2301      	movs	r3, #1
10004e1c:	e102      	b.n	10005024 <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
10004e1e:	687b      	ldr	r3, [r7, #4]
10004e20:	681b      	ldr	r3, [r3, #0]
10004e22:	f003 0301 	and.w	r3, r3, #1
10004e26:	2b00      	cmp	r3, #0
10004e28:	d00b      	beq.n	10004e42 <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
10004e2a:	687b      	ldr	r3, [r7, #4]
10004e2c:	3304      	adds	r3, #4
10004e2e:	4618      	mov	r0, r3
10004e30:	f000 f8fc 	bl	1000502c <RCC_MPUConfig>
10004e34:	4603      	mov	r3, r0
10004e36:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10004e38:	7bfb      	ldrb	r3, [r7, #15]
10004e3a:	2b00      	cmp	r3, #0
10004e3c:	d001      	beq.n	10004e42 <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
10004e3e:	7bfb      	ldrb	r3, [r7, #15]
10004e40:	e0f0      	b.n	10005024 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
10004e42:	687b      	ldr	r3, [r7, #4]
10004e44:	681b      	ldr	r3, [r3, #0]
10004e46:	f003 0302 	and.w	r3, r3, #2
10004e4a:	2b00      	cmp	r3, #0
10004e4c:	d00b      	beq.n	10004e66 <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
10004e4e:	687b      	ldr	r3, [r7, #4]
10004e50:	330c      	adds	r3, #12
10004e52:	4618      	mov	r0, r3
10004e54:	f000 f960 	bl	10005118 <RCC_AXISSConfig>
10004e58:	4603      	mov	r3, r0
10004e5a:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10004e5c:	7bfb      	ldrb	r3, [r7, #15]
10004e5e:	2b00      	cmp	r3, #0
10004e60:	d001      	beq.n	10004e66 <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
10004e62:	7bfb      	ldrb	r3, [r7, #15]
10004e64:	e0de      	b.n	10005024 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
10004e66:	687b      	ldr	r3, [r7, #4]
10004e68:	681b      	ldr	r3, [r3, #0]
10004e6a:	f003 0304 	and.w	r3, r3, #4
10004e6e:	2b00      	cmp	r3, #0
10004e70:	d00b      	beq.n	10004e8a <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
10004e72:	687b      	ldr	r3, [r7, #4]
10004e74:	3314      	adds	r3, #20
10004e76:	4618      	mov	r0, r3
10004e78:	f000 f9e6 	bl	10005248 <RCC_MCUConfig>
10004e7c:	4603      	mov	r3, r0
10004e7e:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10004e80:	7bfb      	ldrb	r3, [r7, #15]
10004e82:	2b00      	cmp	r3, #0
10004e84:	d001      	beq.n	10004e8a <HAL_RCC_ClockConfig+0x82>
    {
      return status;
10004e86:	7bfb      	ldrb	r3, [r7, #15]
10004e88:	e0cc      	b.n	10005024 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
10004e8a:	687b      	ldr	r3, [r7, #4]
10004e8c:	681b      	ldr	r3, [r3, #0]
10004e8e:	f003 0308 	and.w	r3, r3, #8
10004e92:	2b00      	cmp	r3, #0
10004e94:	d020      	beq.n	10004ed8 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
10004e96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10004e9c:	f023 0207 	bic.w	r2, r3, #7
10004ea0:	687b      	ldr	r3, [r7, #4]
10004ea2:	69db      	ldr	r3, [r3, #28]
10004ea4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004ea8:	4313      	orrs	r3, r2
10004eaa:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004eac:	f7fc fdb2 	bl	10001a14 <HAL_GetTick>
10004eb0:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10004eb2:	e009      	b.n	10004ec8 <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004eb4:	f7fc fdae 	bl	10001a14 <HAL_GetTick>
10004eb8:	4602      	mov	r2, r0
10004eba:	68bb      	ldr	r3, [r7, #8]
10004ebc:	1ad3      	subs	r3, r2, r3
10004ebe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004ec2:	d901      	bls.n	10004ec8 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
10004ec4:	2303      	movs	r3, #3
10004ec6:	e0ad      	b.n	10005024 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10004ec8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10004ece:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004ed6:	d1ed      	bne.n	10004eb4 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
10004ed8:	687b      	ldr	r3, [r7, #4]
10004eda:	681b      	ldr	r3, [r3, #0]
10004edc:	f003 0310 	and.w	r3, r3, #16
10004ee0:	2b00      	cmp	r3, #0
10004ee2:	d020      	beq.n	10004f26 <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
10004ee4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10004eea:	f023 0207 	bic.w	r2, r3, #7
10004eee:	687b      	ldr	r3, [r7, #4]
10004ef0:	6a1b      	ldr	r3, [r3, #32]
10004ef2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004ef6:	4313      	orrs	r3, r2
10004ef8:	640b      	str	r3, [r1, #64]	; 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004efa:	f7fc fd8b 	bl	10001a14 <HAL_GetTick>
10004efe:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10004f00:	e009      	b.n	10004f16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004f02:	f7fc fd87 	bl	10001a14 <HAL_GetTick>
10004f06:	4602      	mov	r2, r0
10004f08:	68bb      	ldr	r3, [r7, #8]
10004f0a:	1ad3      	subs	r3, r2, r3
10004f0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004f10:	d901      	bls.n	10004f16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
10004f12:	2303      	movs	r3, #3
10004f14:	e086      	b.n	10005024 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10004f16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10004f1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004f20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004f24:	d1ed      	bne.n	10004f02 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
10004f26:	687b      	ldr	r3, [r7, #4]
10004f28:	681b      	ldr	r3, [r3, #0]
10004f2a:	f003 0320 	and.w	r3, r3, #32
10004f2e:	2b00      	cmp	r3, #0
10004f30:	d023      	beq.n	10004f7a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
10004f32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f36:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10004f3a:	f023 0207 	bic.w	r2, r3, #7
10004f3e:	687b      	ldr	r3, [r7, #4]
10004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004f42:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004f46:	4313      	orrs	r3, r2
10004f48:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004f4c:	f7fc fd62 	bl	10001a14 <HAL_GetTick>
10004f50:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10004f52:	e009      	b.n	10004f68 <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004f54:	f7fc fd5e 	bl	10001a14 <HAL_GetTick>
10004f58:	4602      	mov	r2, r0
10004f5a:	68bb      	ldr	r3, [r7, #8]
10004f5c:	1ad3      	subs	r3, r2, r3
10004f5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004f62:	d901      	bls.n	10004f68 <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
10004f64:	2303      	movs	r3, #3
10004f66:	e05d      	b.n	10005024 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10004f68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f6c:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10004f70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004f74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004f78:	d1ec      	bne.n	10004f54 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
10004f7a:	687b      	ldr	r3, [r7, #4]
10004f7c:	681b      	ldr	r3, [r3, #0]
10004f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
10004f82:	2b00      	cmp	r3, #0
10004f84:	d023      	beq.n	10004fce <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
10004f86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f8a:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10004f8e:	f023 0207 	bic.w	r2, r3, #7
10004f92:	687b      	ldr	r3, [r7, #4]
10004f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004f96:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004f9a:	4313      	orrs	r3, r2
10004f9c:	f8c1 3838 	str.w	r3, [r1, #2104]	; 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004fa0:	f7fc fd38 	bl	10001a14 <HAL_GetTick>
10004fa4:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10004fa6:	e009      	b.n	10004fbc <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004fa8:	f7fc fd34 	bl	10001a14 <HAL_GetTick>
10004fac:	4602      	mov	r2, r0
10004fae:	68bb      	ldr	r3, [r7, #8]
10004fb0:	1ad3      	subs	r3, r2, r3
10004fb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004fb6:	d901      	bls.n	10004fbc <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
10004fb8:	2303      	movs	r3, #3
10004fba:	e033      	b.n	10005024 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10004fbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004fc0:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10004fc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004fc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004fcc:	d1ec      	bne.n	10004fa8 <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
10004fce:	687b      	ldr	r3, [r7, #4]
10004fd0:	681b      	ldr	r3, [r3, #0]
10004fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
10004fd6:	2b00      	cmp	r3, #0
10004fd8:	d023      	beq.n	10005022 <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
10004fda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004fde:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
10004fe2:	f023 0207 	bic.w	r2, r3, #7
10004fe6:	687b      	ldr	r3, [r7, #4]
10004fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10004fea:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004fee:	4313      	orrs	r3, r2
10004ff0:	f8c1 383c 	str.w	r3, [r1, #2108]	; 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004ff4:	f7fc fd0e 	bl	10001a14 <HAL_GetTick>
10004ff8:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10004ffa:	e009      	b.n	10005010 <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004ffc:	f7fc fd0a 	bl	10001a14 <HAL_GetTick>
10005000:	4602      	mov	r2, r0
10005002:	68bb      	ldr	r3, [r7, #8]
10005004:	1ad3      	subs	r3, r2, r3
10005006:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000500a:	d901      	bls.n	10005010 <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
1000500c:	2303      	movs	r3, #3
1000500e:	e009      	b.n	10005024 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10005010:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005014:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
10005018:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000501c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10005020:	d1ec      	bne.n	10004ffc <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
10005022:	2300      	movs	r3, #0
}
10005024:	4618      	mov	r0, r3
10005026:	3710      	adds	r7, #16
10005028:	46bd      	mov	sp, r7
1000502a:	bd80      	pop	{r7, pc}

1000502c <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
1000502c:	b580      	push	{r7, lr}
1000502e:	b084      	sub	sp, #16
10005030:	af00      	add	r7, sp, #0
10005032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
10005034:	687b      	ldr	r3, [r7, #4]
10005036:	681b      	ldr	r3, [r3, #0]
10005038:	2b03      	cmp	r3, #3
1000503a:	d840      	bhi.n	100050be <RCC_MPUConfig+0x92>
1000503c:	a201      	add	r2, pc, #4	; (adr r2, 10005044 <RCC_MPUConfig+0x18>)
1000503e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005042:	bf00      	nop
10005044:	10005055 	.word	0x10005055
10005048:	10005069 	.word	0x10005069
1000504c:	1000507f 	.word	0x1000507f
10005050:	10005093 	.word	0x10005093
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10005054:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005058:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000505c:	f003 0301 	and.w	r3, r3, #1
10005060:	2b01      	cmp	r3, #1
10005062:	d02e      	beq.n	100050c2 <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
10005064:	2301      	movs	r3, #1
10005066:	e053      	b.n	10005110 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10005068:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000506c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10005070:	f403 7380 	and.w	r3, r3, #256	; 0x100
10005074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10005078:	d025      	beq.n	100050c6 <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
1000507a:	2301      	movs	r3, #1
1000507c:	e048      	b.n	10005110 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
1000507e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10005086:	f003 0302 	and.w	r3, r3, #2
1000508a:	2b02      	cmp	r3, #2
1000508c:	d01d      	beq.n	100050ca <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
1000508e:	2301      	movs	r3, #1
10005090:	e03e      	b.n	10005110 <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10005092:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000509a:	f003 0302 	and.w	r3, r3, #2
1000509e:	2b02      	cmp	r3, #2
100050a0:	d001      	beq.n	100050a6 <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
100050a2:	2301      	movs	r3, #1
100050a4:	e034      	b.n	10005110 <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
100050a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100050aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100050ac:	f023 0207 	bic.w	r2, r3, #7
100050b0:	687b      	ldr	r3, [r7, #4]
100050b2:	685b      	ldr	r3, [r3, #4]
100050b4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100050b8:	4313      	orrs	r3, r2
100050ba:	62cb      	str	r3, [r1, #44]	; 0x2c

      break;
100050bc:	e006      	b.n	100050cc <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
100050be:	2301      	movs	r3, #1
100050c0:	e026      	b.n	10005110 <RCC_MPUConfig+0xe4>
      break;
100050c2:	bf00      	nop
100050c4:	e002      	b.n	100050cc <RCC_MPUConfig+0xa0>
      break;
100050c6:	bf00      	nop
100050c8:	e000      	b.n	100050cc <RCC_MPUConfig+0xa0>
      break;
100050ca:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
100050cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100050d0:	6a1b      	ldr	r3, [r3, #32]
100050d2:	f023 0203 	bic.w	r2, r3, #3
100050d6:	687b      	ldr	r3, [r7, #4]
100050d8:	681b      	ldr	r3, [r3, #0]
100050da:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100050de:	4313      	orrs	r3, r2
100050e0:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100050e2:	f7fc fc97 	bl	10001a14 <HAL_GetTick>
100050e6:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
100050e8:	e009      	b.n	100050fe <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100050ea:	f7fc fc93 	bl	10001a14 <HAL_GetTick>
100050ee:	4602      	mov	r2, r0
100050f0:	68fb      	ldr	r3, [r7, #12]
100050f2:	1ad3      	subs	r3, r2, r3
100050f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100050f8:	d901      	bls.n	100050fe <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
100050fa:	2303      	movs	r3, #3
100050fc:	e008      	b.n	10005110 <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
100050fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005102:	6a1b      	ldr	r3, [r3, #32]
10005104:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10005108:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000510c:	d1ed      	bne.n	100050ea <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
1000510e:	2300      	movs	r3, #0
}
10005110:	4618      	mov	r0, r3
10005112:	3710      	adds	r7, #16
10005114:	46bd      	mov	sp, r7
10005116:	bd80      	pop	{r7, pc}

10005118 <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
10005118:	b580      	push	{r7, lr}
1000511a:	b084      	sub	sp, #16
1000511c:	af00      	add	r7, sp, #0
1000511e:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
10005120:	687b      	ldr	r3, [r7, #4]
10005122:	681b      	ldr	r3, [r3, #0]
10005124:	2b02      	cmp	r3, #2
10005126:	d01b      	beq.n	10005160 <RCC_AXISSConfig+0x48>
10005128:	2b02      	cmp	r3, #2
1000512a:	d823      	bhi.n	10005174 <RCC_AXISSConfig+0x5c>
1000512c:	2b00      	cmp	r3, #0
1000512e:	d002      	beq.n	10005136 <RCC_AXISSConfig+0x1e>
10005130:	2b01      	cmp	r3, #1
10005132:	d00a      	beq.n	1000514a <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
10005134:	e01e      	b.n	10005174 <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10005136:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000513a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000513e:	f003 0301 	and.w	r3, r3, #1
10005142:	2b01      	cmp	r3, #1
10005144:	d018      	beq.n	10005178 <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
10005146:	2301      	movs	r3, #1
10005148:	e079      	b.n	1000523e <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000514a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000514e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10005152:	f403 7380 	and.w	r3, r3, #256	; 0x100
10005156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
1000515a:	d00f      	beq.n	1000517c <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
1000515c:	2301      	movs	r3, #1
1000515e:	e06e      	b.n	1000523e <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10005160:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005164:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005168:	f003 0302 	and.w	r3, r3, #2
1000516c:	2b02      	cmp	r3, #2
1000516e:	d007      	beq.n	10005180 <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
10005170:	2301      	movs	r3, #1
10005172:	e064      	b.n	1000523e <RCC_AXISSConfig+0x126>
      break;
10005174:	bf00      	nop
10005176:	e004      	b.n	10005182 <RCC_AXISSConfig+0x6a>
      break;
10005178:	bf00      	nop
1000517a:	e002      	b.n	10005182 <RCC_AXISSConfig+0x6a>
      break;
1000517c:	bf00      	nop
1000517e:	e000      	b.n	10005182 <RCC_AXISSConfig+0x6a>
      break;
10005180:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
10005182:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005188:	f023 0207 	bic.w	r2, r3, #7
1000518c:	687b      	ldr	r3, [r7, #4]
1000518e:	681b      	ldr	r3, [r3, #0]
10005190:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005194:	4313      	orrs	r3, r2
10005196:	624b      	str	r3, [r1, #36]	; 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
10005198:	687b      	ldr	r3, [r7, #4]
1000519a:	681b      	ldr	r3, [r3, #0]
1000519c:	2b03      	cmp	r3, #3
1000519e:	d016      	beq.n	100051ce <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100051a0:	f7fc fc38 	bl	10001a14 <HAL_GetTick>
100051a4:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
100051a6:	e009      	b.n	100051bc <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100051a8:	f7fc fc34 	bl	10001a14 <HAL_GetTick>
100051ac:	4602      	mov	r2, r0
100051ae:	68fb      	ldr	r3, [r7, #12]
100051b0:	1ad3      	subs	r3, r2, r3
100051b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100051b6:	d901      	bls.n	100051bc <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
100051b8:	2303      	movs	r3, #3
100051ba:	e040      	b.n	1000523e <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
100051bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100051c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100051c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100051ca:	d1ed      	bne.n	100051a8 <RCC_AXISSConfig+0x90>
100051cc:	e015      	b.n	100051fa <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100051ce:	f7fc fc21 	bl	10001a14 <HAL_GetTick>
100051d2:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
100051d4:	e009      	b.n	100051ea <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100051d6:	f7fc fc1d 	bl	10001a14 <HAL_GetTick>
100051da:	4602      	mov	r2, r0
100051dc:	68fb      	ldr	r3, [r7, #12]
100051de:	1ad3      	subs	r3, r2, r3
100051e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100051e4:	d901      	bls.n	100051ea <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
100051e6:	2303      	movs	r3, #3
100051e8:	e029      	b.n	1000523e <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
100051ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100051f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100051f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100051f8:	d0ed      	beq.n	100051d6 <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
100051fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100051fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10005200:	f023 0207 	bic.w	r2, r3, #7
10005204:	687b      	ldr	r3, [r7, #4]
10005206:	685b      	ldr	r3, [r3, #4]
10005208:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000520c:	4313      	orrs	r3, r2
1000520e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10005210:	f7fc fc00 	bl	10001a14 <HAL_GetTick>
10005214:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10005216:	e009      	b.n	1000522c <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10005218:	f7fc fbfc 	bl	10001a14 <HAL_GetTick>
1000521c:	4602      	mov	r2, r0
1000521e:	68fb      	ldr	r3, [r7, #12]
10005220:	1ad3      	subs	r3, r2, r3
10005222:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10005226:	d901      	bls.n	1000522c <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
10005228:	2303      	movs	r3, #3
1000522a:	e008      	b.n	1000523e <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
1000522c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10005232:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10005236:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000523a:	d1ed      	bne.n	10005218 <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
1000523c:	2300      	movs	r3, #0
}
1000523e:	4618      	mov	r0, r3
10005240:	3710      	adds	r7, #16
10005242:	46bd      	mov	sp, r7
10005244:	bd80      	pop	{r7, pc}
	...

10005248 <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
10005248:	b580      	push	{r7, lr}
1000524a:	b084      	sub	sp, #16
1000524c:	af00      	add	r7, sp, #0
1000524e:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
10005250:	687b      	ldr	r3, [r7, #4]
10005252:	681b      	ldr	r3, [r3, #0]
10005254:	2b03      	cmp	r3, #3
10005256:	d834      	bhi.n	100052c2 <RCC_MCUConfig+0x7a>
10005258:	a201      	add	r2, pc, #4	; (adr r2, 10005260 <RCC_MCUConfig+0x18>)
1000525a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000525e:	bf00      	nop
10005260:	10005271 	.word	0x10005271
10005264:	10005285 	.word	0x10005285
10005268:	1000529b 	.word	0x1000529b
1000526c:	100052af 	.word	0x100052af
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10005270:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005274:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10005278:	f003 0301 	and.w	r3, r3, #1
1000527c:	2b01      	cmp	r3, #1
1000527e:	d022      	beq.n	100052c6 <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
10005280:	2301      	movs	r3, #1
10005282:	e081      	b.n	10005388 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10005284:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005288:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000528c:	f403 7380 	and.w	r3, r3, #256	; 0x100
10005290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10005294:	d019      	beq.n	100052ca <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
10005296:	2301      	movs	r3, #1
10005298:	e076      	b.n	10005388 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
1000529a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000529e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100052a2:	f003 0310 	and.w	r3, r3, #16
100052a6:	2b10      	cmp	r3, #16
100052a8:	d011      	beq.n	100052ce <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
100052aa:	2301      	movs	r3, #1
100052ac:	e06c      	b.n	10005388 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
100052ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100052b2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100052b6:	f003 0302 	and.w	r3, r3, #2
100052ba:	2b02      	cmp	r3, #2
100052bc:	d009      	beq.n	100052d2 <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
100052be:	2301      	movs	r3, #1
100052c0:	e062      	b.n	10005388 <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
100052c2:	bf00      	nop
100052c4:	e006      	b.n	100052d4 <RCC_MCUConfig+0x8c>
      break;
100052c6:	bf00      	nop
100052c8:	e004      	b.n	100052d4 <RCC_MCUConfig+0x8c>
      break;
100052ca:	bf00      	nop
100052cc:	e002      	b.n	100052d4 <RCC_MCUConfig+0x8c>
      break;
100052ce:	bf00      	nop
100052d0:	e000      	b.n	100052d4 <RCC_MCUConfig+0x8c>
      break;
100052d2:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
100052d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100052d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100052da:	f023 0203 	bic.w	r2, r3, #3
100052de:	687b      	ldr	r3, [r7, #4]
100052e0:	681b      	ldr	r3, [r3, #0]
100052e2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100052e6:	4313      	orrs	r3, r2
100052e8:	648b      	str	r3, [r1, #72]	; 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100052ea:	f7fc fb93 	bl	10001a14 <HAL_GetTick>
100052ee:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
100052f0:	e009      	b.n	10005306 <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100052f2:	f7fc fb8f 	bl	10001a14 <HAL_GetTick>
100052f6:	4602      	mov	r2, r0
100052f8:	68fb      	ldr	r3, [r7, #12]
100052fa:	1ad3      	subs	r3, r2, r3
100052fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10005300:	d901      	bls.n	10005306 <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
10005302:	2303      	movs	r3, #3
10005304:	e040      	b.n	10005388 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10005306:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000530a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000530c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10005310:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10005314:	d1ed      	bne.n	100052f2 <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10005316:	f000 fc15 	bl	10005b44 <HAL_RCC_GetSystemCoreClockFreq>
1000531a:	4603      	mov	r3, r0
1000531c:	4a1c      	ldr	r2, [pc, #112]	; (10005390 <RCC_MCUConfig+0x148>)
1000531e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10005320:	4b1c      	ldr	r3, [pc, #112]	; (10005394 <RCC_MCUConfig+0x14c>)
10005322:	681b      	ldr	r3, [r3, #0]
10005324:	4618      	mov	r0, r3
10005326:	f7fc fb2b 	bl	10001980 <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
1000532a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000532e:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10005332:	f023 020f 	bic.w	r2, r3, #15
10005336:	687b      	ldr	r3, [r7, #4]
10005338:	685b      	ldr	r3, [r3, #4]
1000533a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000533e:	4313      	orrs	r3, r2
10005340:	f8c1 3830 	str.w	r3, [r1, #2096]	; 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10005344:	f7fc fb66 	bl	10001a14 <HAL_GetTick>
10005348:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
1000534a:	e009      	b.n	10005360 <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000534c:	f7fc fb62 	bl	10001a14 <HAL_GetTick>
10005350:	4602      	mov	r2, r0
10005352:	68fb      	ldr	r3, [r7, #12]
10005354:	1ad3      	subs	r3, r2, r3
10005356:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000535a:	d901      	bls.n	10005360 <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
1000535c:	2303      	movs	r3, #3
1000535e:	e013      	b.n	10005388 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10005360:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005364:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10005368:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000536c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10005370:	d1ec      	bne.n	1000534c <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10005372:	f000 fbe7 	bl	10005b44 <HAL_RCC_GetSystemCoreClockFreq>
10005376:	4603      	mov	r3, r0
10005378:	4a05      	ldr	r2, [pc, #20]	; (10005390 <RCC_MCUConfig+0x148>)
1000537a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
1000537c:	4b05      	ldr	r3, [pc, #20]	; (10005394 <RCC_MCUConfig+0x14c>)
1000537e:	681b      	ldr	r3, [r3, #0]
10005380:	4618      	mov	r0, r3
10005382:	f7fc fafd 	bl	10001980 <HAL_InitTick>
#endif

  return HAL_OK;
10005386:	2300      	movs	r3, #0
}
10005388:	4618      	mov	r0, r3
1000538a:	3710      	adds	r7, #16
1000538c:	46bd      	mov	sp, r7
1000538e:	bd80      	pop	{r7, pc}
10005390:	10020000 	.word	0x10020000
10005394:	1002000c 	.word	0x1002000c

10005398 <HAL_RCC_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
10005398:	b480      	push	{r7}
1000539a:	b089      	sub	sp, #36	; 0x24
1000539c:	af00      	add	r7, sp, #0
1000539e:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0U, pll2m = 1U, pll2fracen = 0U, hsivalue = 0U;
100053a0:	2300      	movs	r3, #0
100053a2:	61bb      	str	r3, [r7, #24]
100053a4:	2301      	movs	r3, #1
100053a6:	617b      	str	r3, [r7, #20]
100053a8:	2300      	movs	r3, #0
100053aa:	613b      	str	r3, [r7, #16]
100053ac:	2300      	movs	r3, #0
100053ae:	60fb      	str	r3, [r7, #12]
  float fracn1, pll2vco = 0;
100053b0:	f04f 0300 	mov.w	r3, #0
100053b4:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL12_SOURCE();
100053b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100053ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100053bc:	f003 0303 	and.w	r3, r3, #3
100053c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLL2CFGR1 & RCC_PLL2CFGR1_DIVM2) >> RCC_PLL2CFGR1_DIVM2_Pos) + 1U;
100053c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100053c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
100053ca:	0c1b      	lsrs	r3, r3, #16
100053cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
100053d0:	3301      	adds	r3, #1
100053d2:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLL2FRACR & RCC_PLL2FRACR_FRACLE) >> RCC_PLL2FRACR_FRACLE_Pos;
100053d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100053d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
100053dc:	0c1b      	lsrs	r3, r3, #16
100053de:	f003 0301 	and.w	r3, r3, #1
100053e2:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACV) >> RCC_PLL2FRACR_FRACV_Pos));
100053e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100053e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
100053ec:	08db      	lsrs	r3, r3, #3
100053ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
100053f2:	693a      	ldr	r2, [r7, #16]
100053f4:	fb02 f303 	mul.w	r3, r2, r3
100053f8:	ee07 3a90 	vmov	s15, r3
100053fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
10005400:	edc7 7a02 	vstr	s15, [r7, #8]
  pll2vco = (float)((float)((RCC->PLL2CFGR1 & RCC_PLL2CFGR1_DIVN) + 1U) + (fracn1 / (float)0x2000));  //Intermediary value
10005404:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005408:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
1000540c:	f3c3 0308 	ubfx	r3, r3, #0, #9
10005410:	3301      	adds	r3, #1
10005412:	ee07 3a90 	vmov	s15, r3
10005416:	eeb8 7a67 	vcvt.f32.u32	s14, s15
1000541a:	edd7 6a02 	vldr	s13, [r7, #8]
1000541e:	ed9f 6a51 	vldr	s12, [pc, #324]	; 10005564 <HAL_RCC_GetPLL2ClockFreq+0x1cc>
10005422:	eec6 7a86 	vdiv.f32	s15, s13, s12
10005426:	ee77 7a27 	vadd.f32	s15, s14, s15
1000542a:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
1000542e:	69bb      	ldr	r3, [r7, #24]
10005430:	2b02      	cmp	r3, #2
10005432:	d047      	beq.n	100054c4 <HAL_RCC_GetPLL2ClockFreq+0x12c>
10005434:	69bb      	ldr	r3, [r7, #24]
10005436:	2b02      	cmp	r3, #2
10005438:	d848      	bhi.n	100054cc <HAL_RCC_GetPLL2ClockFreq+0x134>
1000543a:	69bb      	ldr	r3, [r7, #24]
1000543c:	2b00      	cmp	r3, #0
1000543e:	d003      	beq.n	10005448 <HAL_RCC_GetPLL2ClockFreq+0xb0>
10005440:	69bb      	ldr	r3, [r7, #24]
10005442:	2b01      	cmp	r3, #1
10005444:	d02f      	beq.n	100054a6 <HAL_RCC_GetPLL2ClockFreq+0x10e>
10005446:	e041      	b.n	100054cc <HAL_RCC_GetPLL2ClockFreq+0x134>
  {
    case RCC_PLL12SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10005448:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000544c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10005450:	f003 0304 	and.w	r3, r3, #4
10005454:	2b04      	cmp	r3, #4
10005456:	d117      	bne.n	10005488 <HAL_RCC_GetPLL2ClockFreq+0xf0>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10005458:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000545c:	699b      	ldr	r3, [r3, #24]
1000545e:	f003 0303 	and.w	r3, r3, #3
10005462:	4a41      	ldr	r2, [pc, #260]	; (10005568 <HAL_RCC_GetPLL2ClockFreq+0x1d0>)
10005464:	fa22 f303 	lsr.w	r3, r2, r3
10005468:	60fb      	str	r3, [r7, #12]
        pll2vco *= (float)(hsivalue / pll2m);
1000546a:	68fa      	ldr	r2, [r7, #12]
1000546c:	697b      	ldr	r3, [r7, #20]
1000546e:	fbb2 f3f3 	udiv	r3, r2, r3
10005472:	ee07 3a90 	vmov	s15, r3
10005476:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000547a:	ed97 7a07 	vldr	s14, [r7, #28]
1000547e:	ee67 7a27 	vmul.f32	s15, s14, s15
10005482:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco *= (float)(HSI_VALUE / pll2m);
      }
      break;
10005486:	e025      	b.n	100054d4 <HAL_RCC_GetPLL2ClockFreq+0x13c>
        pll2vco *= (float)(HSI_VALUE / pll2m);
10005488:	4a37      	ldr	r2, [pc, #220]	; (10005568 <HAL_RCC_GetPLL2ClockFreq+0x1d0>)
1000548a:	697b      	ldr	r3, [r7, #20]
1000548c:	fbb2 f3f3 	udiv	r3, r2, r3
10005490:	ee07 3a90 	vmov	s15, r3
10005494:	eef8 7a67 	vcvt.f32.u32	s15, s15
10005498:	ed97 7a07 	vldr	s14, [r7, #28]
1000549c:	ee67 7a27 	vmul.f32	s15, s14, s15
100054a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100054a4:	e016      	b.n	100054d4 <HAL_RCC_GetPLL2ClockFreq+0x13c>

    case RCC_PLL12SOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco *= (float)(HSE_VALUE / pll2m);
100054a6:	4a31      	ldr	r2, [pc, #196]	; (1000556c <HAL_RCC_GetPLL2ClockFreq+0x1d4>)
100054a8:	697b      	ldr	r3, [r7, #20]
100054aa:	fbb2 f3f3 	udiv	r3, r2, r3
100054ae:	ee07 3a90 	vmov	s15, r3
100054b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
100054b6:	ed97 7a07 	vldr	s14, [r7, #28]
100054ba:	ee67 7a27 	vmul.f32	s15, s14, s15
100054be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100054c2:	e007      	b.n	100054d4 <HAL_RCC_GetPLL2ClockFreq+0x13c>

    case RCC_PLL12SOURCE_OFF:  /* No clock source for PLL */
      pll2vco = 0;
100054c4:	f04f 0300 	mov.w	r3, #0
100054c8:	61fb      	str	r3, [r7, #28]
      break;
100054ca:	e003      	b.n	100054d4 <HAL_RCC_GetPLL2ClockFreq+0x13c>

    default:
      pll2vco = 0;
100054cc:	f04f 0300 	mov.w	r3, #0
100054d0:	61fb      	str	r3, [r7, #28]
      break;
100054d2:	bf00      	nop
  }

  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVP) >> RCC_PLL2CFGR2_DIVP_Pos) + 1U)));
100054d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100054d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
100054dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
100054e0:	3301      	adds	r3, #1
100054e2:	ee07 3a90 	vmov	s15, r3
100054e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100054ea:	edd7 6a07 	vldr	s13, [r7, #28]
100054ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
100054f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100054f6:	ee17 2a90 	vmov	r2, s15
100054fa:	687b      	ldr	r3, [r7, #4]
100054fc:	601a      	str	r2, [r3, #0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVQ) >> RCC_PLL2CFGR2_DIVQ_Pos) + 1U)));
100054fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005502:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10005506:	0a1b      	lsrs	r3, r3, #8
10005508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1000550c:	3301      	adds	r3, #1
1000550e:	ee07 3a90 	vmov	s15, r3
10005512:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10005516:	edd7 6a07 	vldr	s13, [r7, #28]
1000551a:	eec6 7a87 	vdiv.f32	s15, s13, s14
1000551e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10005522:	ee17 2a90 	vmov	r2, s15
10005526:	687b      	ldr	r3, [r7, #4]
10005528:	605a      	str	r2, [r3, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVR) >> RCC_PLL2CFGR2_DIVR_Pos) + 1U)));
1000552a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000552e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10005532:	0c1b      	lsrs	r3, r3, #16
10005534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10005538:	3301      	adds	r3, #1
1000553a:	ee07 3a90 	vmov	s15, r3
1000553e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10005542:	edd7 6a07 	vldr	s13, [r7, #28]
10005546:	eec6 7a87 	vdiv.f32	s15, s13, s14
1000554a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1000554e:	ee17 2a90 	vmov	r2, s15
10005552:	687b      	ldr	r3, [r7, #4]
10005554:	609a      	str	r2, [r3, #8]
}
10005556:	bf00      	nop
10005558:	3724      	adds	r7, #36	; 0x24
1000555a:	46bd      	mov	sp, r7
1000555c:	f85d 7b04 	ldr.w	r7, [sp], #4
10005560:	4770      	bx	lr
10005562:	bf00      	nop
10005564:	46000000 	.word	0x46000000
10005568:	03d09000 	.word	0x03d09000
1000556c:	016e3600 	.word	0x016e3600

10005570 <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
10005570:	b480      	push	{r7}
10005572:	b089      	sub	sp, #36	; 0x24
10005574:	af00      	add	r7, sp, #0
10005576:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
10005578:	2300      	movs	r3, #0
1000557a:	61bb      	str	r3, [r7, #24]
1000557c:	2301      	movs	r3, #1
1000557e:	617b      	str	r3, [r7, #20]
10005580:	2300      	movs	r3, #0
10005582:	613b      	str	r3, [r7, #16]
10005584:	2300      	movs	r3, #0
10005586:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
10005588:	f04f 0300 	mov.w	r3, #0
1000558c:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
1000558e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005592:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10005596:	f003 0303 	and.w	r3, r3, #3
1000559a:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
1000559c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100055a0:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
100055a4:	0c1b      	lsrs	r3, r3, #16
100055a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
100055aa:	3301      	adds	r3, #1
100055ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
100055ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100055b2:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100055b6:	0c1b      	lsrs	r3, r3, #16
100055b8:	f003 0301 	and.w	r3, r3, #1
100055bc:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
100055be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100055c2:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100055c6:	08db      	lsrs	r3, r3, #3
100055c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
100055cc:	693a      	ldr	r2, [r7, #16]
100055ce:	fb02 f303 	mul.w	r3, r2, r3
100055d2:	ee07 3a90 	vmov	s15, r3
100055d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
100055da:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
100055de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100055e2:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
100055e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
100055ea:	3301      	adds	r3, #1
100055ec:	ee07 3a90 	vmov	s15, r3
100055f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100055f4:	edd7 6a02 	vldr	s13, [r7, #8]
100055f8:	ed9f 6a56 	vldr	s12, [pc, #344]	; 10005754 <HAL_RCC_GetPLL3ClockFreq+0x1e4>
100055fc:	eec6 7a86 	vdiv.f32	s15, s13, s12
10005600:	ee77 7a27 	vadd.f32	s15, s14, s15
10005604:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10005608:	69bb      	ldr	r3, [r7, #24]
1000560a:	2b03      	cmp	r3, #3
1000560c:	d85b      	bhi.n	100056c6 <HAL_RCC_GetPLL3ClockFreq+0x156>
1000560e:	a201      	add	r2, pc, #4	; (adr r2, 10005614 <HAL_RCC_GetPLL3ClockFreq+0xa4>)
10005610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005614:	10005625 	.word	0x10005625
10005618:	10005683 	.word	0x10005683
1000561c:	100056a1 	.word	0x100056a1
10005620:	100056bf 	.word	0x100056bf
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10005624:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005628:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000562c:	f003 0304 	and.w	r3, r3, #4
10005630:	2b04      	cmp	r3, #4
10005632:	d117      	bne.n	10005664 <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10005634:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005638:	699b      	ldr	r3, [r3, #24]
1000563a:	f003 0303 	and.w	r3, r3, #3
1000563e:	4a46      	ldr	r2, [pc, #280]	; (10005758 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10005640:	fa22 f303 	lsr.w	r3, r2, r3
10005644:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
10005646:	68fa      	ldr	r2, [r7, #12]
10005648:	697b      	ldr	r3, [r7, #20]
1000564a:	fbb2 f3f3 	udiv	r3, r2, r3
1000564e:	ee07 3a90 	vmov	s15, r3
10005652:	eef8 7a67 	vcvt.f32.u32	s15, s15
10005656:	ed97 7a07 	vldr	s14, [r7, #28]
1000565a:	ee67 7a27 	vmul.f32	s15, s14, s15
1000565e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
10005662:	e030      	b.n	100056c6 <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
10005664:	4a3c      	ldr	r2, [pc, #240]	; (10005758 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10005666:	697b      	ldr	r3, [r7, #20]
10005668:	fbb2 f3f3 	udiv	r3, r2, r3
1000566c:	ee07 3a90 	vmov	s15, r3
10005670:	eef8 7a67 	vcvt.f32.u32	s15, s15
10005674:	ed97 7a07 	vldr	s14, [r7, #28]
10005678:	ee67 7a27 	vmul.f32	s15, s14, s15
1000567c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10005680:	e021      	b.n	100056c6 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
10005682:	4a36      	ldr	r2, [pc, #216]	; (1000575c <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
10005684:	697b      	ldr	r3, [r7, #20]
10005686:	fbb2 f3f3 	udiv	r3, r2, r3
1000568a:	ee07 3a90 	vmov	s15, r3
1000568e:	eef8 7a67 	vcvt.f32.u32	s15, s15
10005692:	ed97 7a07 	vldr	s14, [r7, #28]
10005696:	ee67 7a27 	vmul.f32	s15, s14, s15
1000569a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
1000569e:	e012      	b.n	100056c6 <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
100056a0:	4a2f      	ldr	r2, [pc, #188]	; (10005760 <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
100056a2:	697b      	ldr	r3, [r7, #20]
100056a4:	fbb2 f3f3 	udiv	r3, r2, r3
100056a8:	ee07 3a90 	vmov	s15, r3
100056ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
100056b0:	ed97 7a07 	vldr	s14, [r7, #28]
100056b4:	ee67 7a27 	vmul.f32	s15, s14, s15
100056b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100056bc:	e003      	b.n	100056c6 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
100056be:	f04f 0300 	mov.w	r3, #0
100056c2:	61fb      	str	r3, [r7, #28]
      break;
100056c4:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
100056c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100056ca:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
100056ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
100056d2:	3301      	adds	r3, #1
100056d4:	ee07 3a90 	vmov	s15, r3
100056d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100056dc:	edd7 6a07 	vldr	s13, [r7, #28]
100056e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
100056e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100056e8:	ee17 2a90 	vmov	r2, s15
100056ec:	687b      	ldr	r3, [r7, #4]
100056ee:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
100056f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100056f4:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
100056f8:	0a1b      	lsrs	r3, r3, #8
100056fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
100056fe:	3301      	adds	r3, #1
10005700:	ee07 3a90 	vmov	s15, r3
10005704:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10005708:	edd7 6a07 	vldr	s13, [r7, #28]
1000570c:	eec6 7a87 	vdiv.f32	s15, s13, s14
10005710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10005714:	ee17 2a90 	vmov	r2, s15
10005718:	687b      	ldr	r3, [r7, #4]
1000571a:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
1000571c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005720:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10005724:	0c1b      	lsrs	r3, r3, #16
10005726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1000572a:	3301      	adds	r3, #1
1000572c:	ee07 3a90 	vmov	s15, r3
10005730:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10005734:	edd7 6a07 	vldr	s13, [r7, #28]
10005738:	eec6 7a87 	vdiv.f32	s15, s13, s14
1000573c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10005740:	ee17 2a90 	vmov	r2, s15
10005744:	687b      	ldr	r3, [r7, #4]
10005746:	609a      	str	r2, [r3, #8]
}
10005748:	bf00      	nop
1000574a:	3724      	adds	r7, #36	; 0x24
1000574c:	46bd      	mov	sp, r7
1000574e:	f85d 7b04 	ldr.w	r7, [sp], #4
10005752:	4770      	bx	lr
10005754:	46000000 	.word	0x46000000
10005758:	03d09000 	.word	0x03d09000
1000575c:	016e3600 	.word	0x016e3600
10005760:	003d0900 	.word	0x003d0900

10005764 <HAL_RCC_GetPLL4ClockFreq>:
  *         right PLL4CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL4_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL4ClockFreq(PLL4_ClocksTypeDef *PLL4_Clocks)
{
10005764:	b480      	push	{r7}
10005766:	b089      	sub	sp, #36	; 0x24
10005768:	af00      	add	r7, sp, #0
1000576a:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0U, pll4m = 1U, pll4fracen = 0U, hsivalue = 0U;
1000576c:	2300      	movs	r3, #0
1000576e:	61bb      	str	r3, [r7, #24]
10005770:	2301      	movs	r3, #1
10005772:	617b      	str	r3, [r7, #20]
10005774:	2300      	movs	r3, #0
10005776:	613b      	str	r3, [r7, #16]
10005778:	2300      	movs	r3, #0
1000577a:	60fb      	str	r3, [r7, #12]
  float fracn1, pll4vco = 0;
1000577c:	f04f 0300 	mov.w	r3, #0
10005780:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL4_SOURCE();
10005782:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005786:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
1000578a:	f003 0303 	and.w	r3, r3, #3
1000578e:	61bb      	str	r3, [r7, #24]
  pll4m = ((RCC->PLL4CFGR1 & RCC_PLL4CFGR1_DIVM4) >> RCC_PLL4CFGR1_DIVM4_Pos) + 1U;
10005790:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005794:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
10005798:	0c1b      	lsrs	r3, r3, #16
1000579a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1000579e:	3301      	adds	r3, #1
100057a0:	617b      	str	r3, [r7, #20]
  pll4fracen = (RCC->PLL4FRACR & RCC_PLL4FRACR_FRACLE) >> RCC_PLL4FRACR_FRACLE_Pos;
100057a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100057a6:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100057aa:	0c1b      	lsrs	r3, r3, #16
100057ac:	f003 0301 	and.w	r3, r3, #1
100057b0:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll4fracen * ((RCC->PLL4FRACR & RCC_PLL4FRACR_FRACV) >> RCC_PLL4FRACR_FRACV_Pos));
100057b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100057b6:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100057ba:	08db      	lsrs	r3, r3, #3
100057bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
100057c0:	693a      	ldr	r2, [r7, #16]
100057c2:	fb02 f303 	mul.w	r3, r2, r3
100057c6:	ee07 3a90 	vmov	s15, r3
100057ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
100057ce:	edc7 7a02 	vstr	s15, [r7, #8]
  pll4vco = (float)((float)((RCC->PLL4CFGR1 & RCC_PLL4CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
100057d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100057d6:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
100057da:	f3c3 0308 	ubfx	r3, r3, #0, #9
100057de:	3301      	adds	r3, #1
100057e0:	ee07 3a90 	vmov	s15, r3
100057e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100057e8:	edd7 6a02 	vldr	s13, [r7, #8]
100057ec:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 10005960 <HAL_RCC_GetPLL4ClockFreq+0x1fc>
100057f0:	eec6 7a86 	vdiv.f32	s15, s13, s12
100057f4:	ee77 7a27 	vadd.f32	s15, s14, s15
100057f8:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
100057fc:	69bb      	ldr	r3, [r7, #24]
100057fe:	2b03      	cmp	r3, #3
10005800:	d866      	bhi.n	100058d0 <HAL_RCC_GetPLL4ClockFreq+0x16c>
10005802:	a201      	add	r2, pc, #4	; (adr r2, 10005808 <HAL_RCC_GetPLL4ClockFreq+0xa4>)
10005804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005808:	10005819 	.word	0x10005819
1000580c:	10005877 	.word	0x10005877
10005810:	10005895 	.word	0x10005895
10005814:	100058b3 	.word	0x100058b3
  {
    case RCC_PLL4SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10005818:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000581c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10005820:	f003 0304 	and.w	r3, r3, #4
10005824:	2b04      	cmp	r3, #4
10005826:	d117      	bne.n	10005858 <HAL_RCC_GetPLL4ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10005828:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000582c:	699b      	ldr	r3, [r3, #24]
1000582e:	f003 0303 	and.w	r3, r3, #3
10005832:	4a4c      	ldr	r2, [pc, #304]	; (10005964 <HAL_RCC_GetPLL4ClockFreq+0x200>)
10005834:	fa22 f303 	lsr.w	r3, r2, r3
10005838:	60fb      	str	r3, [r7, #12]
        pll4vco *= (float)(hsivalue / pll4m);
1000583a:	68fa      	ldr	r2, [r7, #12]
1000583c:	697b      	ldr	r3, [r7, #20]
1000583e:	fbb2 f3f3 	udiv	r3, r2, r3
10005842:	ee07 3a90 	vmov	s15, r3
10005846:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000584a:	ed97 7a07 	vldr	s14, [r7, #28]
1000584e:	ee67 7a27 	vmul.f32	s15, s14, s15
10005852:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll4vco *= (float)(HSI_VALUE / pll4m);
      }
      break;
10005856:	e03b      	b.n	100058d0 <HAL_RCC_GetPLL4ClockFreq+0x16c>
        pll4vco *= (float)(HSI_VALUE / pll4m);
10005858:	4a42      	ldr	r2, [pc, #264]	; (10005964 <HAL_RCC_GetPLL4ClockFreq+0x200>)
1000585a:	697b      	ldr	r3, [r7, #20]
1000585c:	fbb2 f3f3 	udiv	r3, r2, r3
10005860:	ee07 3a90 	vmov	s15, r3
10005864:	eef8 7a67 	vcvt.f32.u32	s15, s15
10005868:	ed97 7a07 	vldr	s14, [r7, #28]
1000586c:	ee67 7a27 	vmul.f32	s15, s14, s15
10005870:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10005874:	e02c      	b.n	100058d0 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_HSE:  /* HSE used as PLL clock source */
      pll4vco *= (float)(HSE_VALUE / pll4m);
10005876:	4a3c      	ldr	r2, [pc, #240]	; (10005968 <HAL_RCC_GetPLL4ClockFreq+0x204>)
10005878:	697b      	ldr	r3, [r7, #20]
1000587a:	fbb2 f3f3 	udiv	r3, r2, r3
1000587e:	ee07 3a90 	vmov	s15, r3
10005882:	eef8 7a67 	vcvt.f32.u32	s15, s15
10005886:	ed97 7a07 	vldr	s14, [r7, #28]
1000588a:	ee67 7a27 	vmul.f32	s15, s14, s15
1000588e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10005892:	e01d      	b.n	100058d0 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_CSI:  /* CSI used as PLL clock source */
      pll4vco *= (float)(CSI_VALUE / pll4m);
10005894:	4a35      	ldr	r2, [pc, #212]	; (1000596c <HAL_RCC_GetPLL4ClockFreq+0x208>)
10005896:	697b      	ldr	r3, [r7, #20]
10005898:	fbb2 f3f3 	udiv	r3, r2, r3
1000589c:	ee07 3a90 	vmov	s15, r3
100058a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
100058a4:	ed97 7a07 	vldr	s14, [r7, #28]
100058a8:	ee67 7a27 	vmul.f32	s15, s14, s15
100058ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100058b0:	e00e      	b.n	100058d0 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_I2S_CKIN:  /* Signal I2S_CKIN used as reference clock */
      pll4vco *= (float)(EXTERNAL_CLOCK_VALUE / pll4m);
100058b2:	4a2f      	ldr	r2, [pc, #188]	; (10005970 <HAL_RCC_GetPLL4ClockFreq+0x20c>)
100058b4:	697b      	ldr	r3, [r7, #20]
100058b6:	fbb2 f3f3 	udiv	r3, r2, r3
100058ba:	ee07 3a90 	vmov	s15, r3
100058be:	eef8 7a67 	vcvt.f32.u32	s15, s15
100058c2:	ed97 7a07 	vldr	s14, [r7, #28]
100058c6:	ee67 7a27 	vmul.f32	s15, s14, s15
100058ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100058ce:	bf00      	nop
  }

  PLL4_Clocks->PLL4_P_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVP) >> RCC_PLL4CFGR2_DIVP_Pos) + 1U)));
100058d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100058d4:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
100058d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
100058dc:	3301      	adds	r3, #1
100058de:	ee07 3a90 	vmov	s15, r3
100058e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100058e6:	edd7 6a07 	vldr	s13, [r7, #28]
100058ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
100058ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100058f2:	ee17 2a90 	vmov	r2, s15
100058f6:	687b      	ldr	r3, [r7, #4]
100058f8:	601a      	str	r2, [r3, #0]
  PLL4_Clocks->PLL4_Q_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVQ) >> RCC_PLL4CFGR2_DIVQ_Pos) + 1U)));
100058fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100058fe:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
10005902:	0a1b      	lsrs	r3, r3, #8
10005904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10005908:	3301      	adds	r3, #1
1000590a:	ee07 3a90 	vmov	s15, r3
1000590e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10005912:	edd7 6a07 	vldr	s13, [r7, #28]
10005916:	eec6 7a87 	vdiv.f32	s15, s13, s14
1000591a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1000591e:	ee17 2a90 	vmov	r2, s15
10005922:	687b      	ldr	r3, [r7, #4]
10005924:	605a      	str	r2, [r3, #4]
  PLL4_Clocks->PLL4_R_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVR) >> RCC_PLL4CFGR2_DIVR_Pos) + 1U)));
10005926:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000592a:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
1000592e:	0c1b      	lsrs	r3, r3, #16
10005930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10005934:	3301      	adds	r3, #1
10005936:	ee07 3a90 	vmov	s15, r3
1000593a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
1000593e:	edd7 6a07 	vldr	s13, [r7, #28]
10005942:	eec6 7a87 	vdiv.f32	s15, s13, s14
10005946:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1000594a:	ee17 2a90 	vmov	r2, s15
1000594e:	687b      	ldr	r3, [r7, #4]
10005950:	609a      	str	r2, [r3, #8]
}
10005952:	bf00      	nop
10005954:	3724      	adds	r7, #36	; 0x24
10005956:	46bd      	mov	sp, r7
10005958:	f85d 7b04 	ldr.w	r7, [sp], #4
1000595c:	4770      	bx	lr
1000595e:	bf00      	nop
10005960:	46000000 	.word	0x46000000
10005964:	03d09000 	.word	0x03d09000
10005968:	016e3600 	.word	0x016e3600
1000596c:	003d0900 	.word	0x003d0900
10005970:	00bb8000 	.word	0x00bb8000

10005974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
10005974:	b580      	push	{r7, lr}
10005976:	b082      	sub	sp, #8
10005978:	af00      	add	r7, sp, #0
  uint32_t apb1div = 0;
1000597a:	2300      	movs	r3, #0
1000597c:	607b      	str	r3, [r7, #4]

  /* Compute PCLK1 frequency ---------------------------*/
  apb1div = __HAL_RCC_GET_APB1_DIV();
1000597e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005982:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10005986:	f003 0307 	and.w	r3, r3, #7
1000598a:	607b      	str	r3, [r7, #4]
  if (apb1div > RCC_APB1_DIV16)
1000598c:	687b      	ldr	r3, [r7, #4]
1000598e:	2b04      	cmp	r3, #4
10005990:	d901      	bls.n	10005996 <HAL_RCC_GetPCLK1Freq+0x22>
  {
    apb1div = RCC_APB1_DIV16;
10005992:	2304      	movs	r3, #4
10005994:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb1div);
10005996:	f000 f88a 	bl	10005aae <HAL_RCC_GetMCUFreq>
1000599a:	4602      	mov	r2, r0
1000599c:	687b      	ldr	r3, [r7, #4]
1000599e:	fa22 f303 	lsr.w	r3, r2, r3
}
100059a2:	4618      	mov	r0, r3
100059a4:	3708      	adds	r7, #8
100059a6:	46bd      	mov	sp, r7
100059a8:	bd80      	pop	{r7, pc}

100059aa <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
100059aa:	b580      	push	{r7, lr}
100059ac:	b082      	sub	sp, #8
100059ae:	af00      	add	r7, sp, #0
  uint32_t apb2div = 0;
100059b0:	2300      	movs	r3, #0
100059b2:	607b      	str	r3, [r7, #4]

  /* Compute PCLK2 frequency ---------------------------*/
  apb2div = __HAL_RCC_GET_APB2_DIV();
100059b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100059b8:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
100059bc:	f003 0307 	and.w	r3, r3, #7
100059c0:	607b      	str	r3, [r7, #4]
  if (apb2div > RCC_APB2_DIV16)
100059c2:	687b      	ldr	r3, [r7, #4]
100059c4:	2b04      	cmp	r3, #4
100059c6:	d901      	bls.n	100059cc <HAL_RCC_GetPCLK2Freq+0x22>
  {
    apb2div = RCC_APB2_DIV16;
100059c8:	2304      	movs	r3, #4
100059ca:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb2div);
100059cc:	f000 f86f 	bl	10005aae <HAL_RCC_GetMCUFreq>
100059d0:	4602      	mov	r2, r0
100059d2:	687b      	ldr	r3, [r7, #4]
100059d4:	fa22 f303 	lsr.w	r3, r2, r3
}
100059d8:	4618      	mov	r0, r3
100059da:	3708      	adds	r7, #8
100059dc:	46bd      	mov	sp, r7
100059de:	bd80      	pop	{r7, pc}

100059e0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
100059e0:	b580      	push	{r7, lr}
100059e2:	b082      	sub	sp, #8
100059e4:	af00      	add	r7, sp, #0
  uint32_t apb3div = 0;
100059e6:	2300      	movs	r3, #0
100059e8:	607b      	str	r3, [r7, #4]

  /* Compute PCLK3 frequency ---------------------------*/
  apb3div = __HAL_RCC_GET_APB3_DIV();
100059ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100059ee:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
100059f2:	f003 0307 	and.w	r3, r3, #7
100059f6:	607b      	str	r3, [r7, #4]
  if (apb3div > RCC_APB3_DIV16)
100059f8:	687b      	ldr	r3, [r7, #4]
100059fa:	2b04      	cmp	r3, #4
100059fc:	d901      	bls.n	10005a02 <HAL_RCC_GetPCLK3Freq+0x22>
  {
    apb3div = RCC_APB3_DIV16;
100059fe:	2304      	movs	r3, #4
10005a00:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb3div);
10005a02:	f000 f854 	bl	10005aae <HAL_RCC_GetMCUFreq>
10005a06:	4602      	mov	r2, r0
10005a08:	687b      	ldr	r3, [r7, #4]
10005a0a:	fa22 f303 	lsr.w	r3, r2, r3
}
10005a0e:	4618      	mov	r0, r3
10005a10:	3708      	adds	r7, #8
10005a12:	46bd      	mov	sp, r7
10005a14:	bd80      	pop	{r7, pc}

10005a16 <HAL_RCC_GetPCLK5Freq>:
  * @note   Each time PCLK5 changes, this function must be called to update the
  *         right PCLK5 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK5 frequency
  */
uint32_t HAL_RCC_GetPCLK5Freq(void)
{
10005a16:	b580      	push	{r7, lr}
10005a18:	b082      	sub	sp, #8
10005a1a:	af00      	add	r7, sp, #0
  uint32_t apb5div = 0;
10005a1c:	2300      	movs	r3, #0
10005a1e:	607b      	str	r3, [r7, #4]

  /* Compute PCLK5 frequency ---------------------------*/
  apb5div = __HAL_RCC_GET_APB5_DIV();
10005a20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10005a26:	f003 0307 	and.w	r3, r3, #7
10005a2a:	607b      	str	r3, [r7, #4]
  if (apb5div > RCC_APB5_DIV16)
10005a2c:	687b      	ldr	r3, [r7, #4]
10005a2e:	2b04      	cmp	r3, #4
10005a30:	d901      	bls.n	10005a36 <HAL_RCC_GetPCLK5Freq+0x20>
  {
    apb5div = RCC_APB5_DIV16;
10005a32:	2304      	movs	r3, #4
10005a34:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetACLKFreq() >> apb5div);
10005a36:	f000 f808 	bl	10005a4a <HAL_RCC_GetACLKFreq>
10005a3a:	4602      	mov	r2, r0
10005a3c:	687b      	ldr	r3, [r7, #4]
10005a3e:	fa22 f303 	lsr.w	r3, r2, r3
}
10005a42:	4618      	mov	r0, r3
10005a44:	3708      	adds	r7, #8
10005a46:	46bd      	mov	sp, r7
10005a48:	bd80      	pop	{r7, pc}

10005a4a <HAL_RCC_GetACLKFreq>:
  * @note   Each time ACLK changes, this function must be called to update the
  *         right ACLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval ACLK frequency
  */
uint32_t HAL_RCC_GetACLKFreq(void)
{
10005a4a:	b580      	push	{r7, lr}
10005a4c:	b082      	sub	sp, #8
10005a4e:	af00      	add	r7, sp, #0
  uint32_t axidiv = 0;
10005a50:	2300      	movs	r3, #0
10005a52:	607b      	str	r3, [r7, #4]

  /* Compute ACLK frequency ---------------------------*/
  axidiv = __HAL_RCC_GET_AXI_DIV();
10005a54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10005a5a:	f003 0307 	and.w	r3, r3, #7
10005a5e:	607b      	str	r3, [r7, #4]
  if (axidiv > RCC_AXI_DIV4)
10005a60:	687b      	ldr	r3, [r7, #4]
10005a62:	2b03      	cmp	r3, #3
10005a64:	d901      	bls.n	10005a6a <HAL_RCC_GetACLKFreq+0x20>
  {
    axidiv = RCC_AXI_DIV4;
10005a66:	2303      	movs	r3, #3
10005a68:	607b      	str	r3, [r7, #4]
  }
  axidiv += 1;
10005a6a:	687b      	ldr	r3, [r7, #4]
10005a6c:	3301      	adds	r3, #1
10005a6e:	607b      	str	r3, [r7, #4]

  return HAL_RCC_GetAXISSFreq() / axidiv;
10005a70:	f000 f870 	bl	10005b54 <HAL_RCC_GetAXISSFreq>
10005a74:	4602      	mov	r2, r0
10005a76:	687b      	ldr	r3, [r7, #4]
10005a78:	fbb2 f3f3 	udiv	r3, r2, r3
}
10005a7c:	4618      	mov	r0, r3
10005a7e:	3708      	adds	r7, #8
10005a80:	46bd      	mov	sp, r7
10005a82:	bd80      	pop	{r7, pc}

10005a84 <HAL_RCC_GetHCLK6Freq>:
  * @note   Each time HCLK6 changes, this function must be called to update the
  *         right HCLK6 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK6 frequency
  */
uint32_t HAL_RCC_GetHCLK6Freq(void)
{
10005a84:	b580      	push	{r7, lr}
10005a86:	af00      	add	r7, sp, #0
  return HAL_RCC_GetACLKFreq();
10005a88:	f7ff ffdf 	bl	10005a4a <HAL_RCC_GetACLKFreq>
10005a8c:	4603      	mov	r3, r0
}
10005a8e:	4618      	mov	r0, r3
10005a90:	bd80      	pop	{r7, pc}

10005a92 <HAL_RCC_GetHCLK2Freq>:
  * @note   Each time HCLK1 changes, this function must be called to update the
  *         right HCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK2 frequency
  */
uint32_t HAL_RCC_GetHCLK2Freq(void)
{
10005a92:	b580      	push	{r7, lr}
10005a94:	af00      	add	r7, sp, #0
  return HAL_RCC_GetMCUFreq();
10005a96:	f000 f80a 	bl	10005aae <HAL_RCC_GetMCUFreq>
10005a9a:	4603      	mov	r3, r0
}
10005a9c:	4618      	mov	r0, r3
10005a9e:	bd80      	pop	{r7, pc}

10005aa0 <HAL_RCC_GetMLHCLKFreq>:
  * @note   Each time MLHCLK changes, this function must be called to update the
  *         right MLHCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK4 frequency
  */
uint32_t HAL_RCC_GetMLHCLKFreq(void)
{
10005aa0:	b580      	push	{r7, lr}
10005aa2:	af00      	add	r7, sp, #0
  return HAL_RCC_GetMCUFreq();
10005aa4:	f000 f803 	bl	10005aae <HAL_RCC_GetMCUFreq>
10005aa8:	4603      	mov	r3, r0
}
10005aaa:	4618      	mov	r0, r3
10005aac:	bd80      	pop	{r7, pc}

10005aae <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
10005aae:	b580      	push	{r7, lr}
10005ab0:	b082      	sub	sp, #8
10005ab2:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
10005ab4:	2300      	movs	r3, #0
10005ab6:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
10005ab8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005abc:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10005ac0:	f003 030f 	and.w	r3, r3, #15
10005ac4:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
10005ac6:	687b      	ldr	r3, [r7, #4]
10005ac8:	2b09      	cmp	r3, #9
10005aca:	d901      	bls.n	10005ad0 <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
10005acc:	2309      	movs	r3, #9
10005ace:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
10005ad0:	f000 f87e 	bl	10005bd0 <HAL_RCC_GetMCUSSFreq>
10005ad4:	4602      	mov	r2, r0
10005ad6:	687b      	ldr	r3, [r7, #4]
10005ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
10005adc:	4618      	mov	r0, r3
10005ade:	3708      	adds	r7, #8
10005ae0:	46bd      	mov	sp, r7
10005ae2:	bd80      	pop	{r7, pc}

10005ae4 <RCC_GetCKPERFreq>:
  * @note   Each time CKPER changes, this function must be called to update the
  *         right CKPER value. Otherwise, any configuration based on this function will be incorrect.
  * @retval CKPER frequency
  */
uint32_t RCC_GetCKPERFreq(void)
{
10005ae4:	b480      	push	{r7}
10005ae6:	b083      	sub	sp, #12
10005ae8:	af00      	add	r7, sp, #0
  uint32_t ckperclocksource = 0, frequency = 0;
10005aea:	2300      	movs	r3, #0
10005aec:	603b      	str	r3, [r7, #0]
10005aee:	2300      	movs	r3, #0
10005af0:	607b      	str	r3, [r7, #4]

  ckperclocksource = __HAL_RCC_GET_CKPER_SOURCE();
10005af2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005af6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
10005afa:	f003 0303 	and.w	r3, r3, #3
10005afe:	603b      	str	r3, [r7, #0]

  if (ckperclocksource == RCC_CKPERCLKSOURCE_HSI)
10005b00:	683b      	ldr	r3, [r7, #0]
10005b02:	2b00      	cmp	r3, #0
10005b04:	d102      	bne.n	10005b0c <RCC_GetCKPERFreq+0x28>
  {
    /* In Case the main PLL Source is HSI */
    frequency = HSI_VALUE;
10005b06:	4b0c      	ldr	r3, [pc, #48]	; (10005b38 <RCC_GetCKPERFreq+0x54>)
10005b08:	607b      	str	r3, [r7, #4]
10005b0a:	e00d      	b.n	10005b28 <RCC_GetCKPERFreq+0x44>
  }

  else if (ckperclocksource == RCC_CKPERCLKSOURCE_CSI)
10005b0c:	683b      	ldr	r3, [r7, #0]
10005b0e:	2b01      	cmp	r3, #1
10005b10:	d102      	bne.n	10005b18 <RCC_GetCKPERFreq+0x34>
  {
    /* In Case the main PLL Source is CSI */
    frequency = CSI_VALUE;
10005b12:	4b0a      	ldr	r3, [pc, #40]	; (10005b3c <RCC_GetCKPERFreq+0x58>)
10005b14:	607b      	str	r3, [r7, #4]
10005b16:	e007      	b.n	10005b28 <RCC_GetCKPERFreq+0x44>
  }

  else if (ckperclocksource == RCC_CKPERCLKSOURCE_HSE)
10005b18:	683b      	ldr	r3, [r7, #0]
10005b1a:	2b02      	cmp	r3, #2
10005b1c:	d102      	bne.n	10005b24 <RCC_GetCKPERFreq+0x40>
  {
    /* In Case the main PLL Source is HSE */
    frequency = HSE_VALUE;
10005b1e:	4b08      	ldr	r3, [pc, #32]	; (10005b40 <RCC_GetCKPERFreq+0x5c>)
10005b20:	607b      	str	r3, [r7, #4]
10005b22:	e001      	b.n	10005b28 <RCC_GetCKPERFreq+0x44>
  }
  else
  {
    frequency = 0;
10005b24:	2300      	movs	r3, #0
10005b26:	607b      	str	r3, [r7, #4]
  }

  return frequency;
10005b28:	687b      	ldr	r3, [r7, #4]
}
10005b2a:	4618      	mov	r0, r3
10005b2c:	370c      	adds	r7, #12
10005b2e:	46bd      	mov	sp, r7
10005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
10005b34:	4770      	bx	lr
10005b36:	bf00      	nop
10005b38:	03d09000 	.word	0x03d09000
10005b3c:	003d0900 	.word	0x003d0900
10005b40:	016e3600 	.word	0x016e3600

10005b44 <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
10005b44:	b580      	push	{r7, lr}
10005b46:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
10005b48:	f7ff ffb1 	bl	10005aae <HAL_RCC_GetMCUFreq>
10005b4c:	4603      	mov	r3, r0
#endif
}
10005b4e:	4618      	mov	r0, r3
10005b50:	bd80      	pop	{r7, pc}
	...

10005b54 <HAL_RCC_GetAXISSFreq>:
  return mpussfreq;
}


uint32_t HAL_RCC_GetAXISSFreq()
{
10005b54:	b580      	push	{r7, lr}
10005b56:	b084      	sub	sp, #16
10005b58:	af00      	add	r7, sp, #0
  uint32_t axissfreq = 0;
10005b5a:	2300      	movs	r3, #0
10005b5c:	60fb      	str	r3, [r7, #12]
  PLL2_ClocksTypeDef pll2_clocks;

  switch (__HAL_RCC_GET_AXIS_SOURCE())
10005b5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005b64:	f003 0307 	and.w	r3, r3, #7
10005b68:	2b02      	cmp	r3, #2
10005b6a:	d006      	beq.n	10005b7a <HAL_RCC_GetAXISSFreq+0x26>
10005b6c:	2b02      	cmp	r3, #2
10005b6e:	d823      	bhi.n	10005bb8 <HAL_RCC_GetAXISSFreq+0x64>
10005b70:	2b00      	cmp	r3, #0
10005b72:	d009      	beq.n	10005b88 <HAL_RCC_GetAXISSFreq+0x34>
10005b74:	2b01      	cmp	r3, #1
10005b76:	d01c      	beq.n	10005bb2 <HAL_RCC_GetAXISSFreq+0x5e>
10005b78:	e01e      	b.n	10005bb8 <HAL_RCC_GetAXISSFreq+0x64>
  {
    case RCC_AXISSOURCE_PLL2:
      HAL_RCC_GetPLL2ClockFreq(&pll2_clocks);
10005b7a:	463b      	mov	r3, r7
10005b7c:	4618      	mov	r0, r3
10005b7e:	f7ff fc0b 	bl	10005398 <HAL_RCC_GetPLL2ClockFreq>
      axissfreq = pll2_clocks.PLL2_P_Frequency;
10005b82:	683b      	ldr	r3, [r7, #0]
10005b84:	60fb      	str	r3, [r7, #12]
      break;
10005b86:	e01a      	b.n	10005bbe <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10005b88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005b8c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10005b90:	f003 0304 	and.w	r3, r3, #4
10005b94:	2b04      	cmp	r3, #4
10005b96:	d109      	bne.n	10005bac <HAL_RCC_GetAXISSFreq+0x58>
      {
        axissfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10005b98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005b9c:	699b      	ldr	r3, [r3, #24]
10005b9e:	f003 0303 	and.w	r3, r3, #3
10005ba2:	4a09      	ldr	r2, [pc, #36]	; (10005bc8 <HAL_RCC_GetAXISSFreq+0x74>)
10005ba4:	fa22 f303 	lsr.w	r3, r2, r3
10005ba8:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        axissfreq = HSI_VALUE;
      }
      break;
10005baa:	e008      	b.n	10005bbe <HAL_RCC_GetAXISSFreq+0x6a>
        axissfreq = HSI_VALUE;
10005bac:	4b06      	ldr	r3, [pc, #24]	; (10005bc8 <HAL_RCC_GetAXISSFreq+0x74>)
10005bae:	60fb      	str	r3, [r7, #12]
      break;
10005bb0:	e005      	b.n	10005bbe <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_HSE:
      axissfreq = HSE_VALUE;
10005bb2:	4b06      	ldr	r3, [pc, #24]	; (10005bcc <HAL_RCC_GetAXISSFreq+0x78>)
10005bb4:	60fb      	str	r3, [r7, #12]
      break;
10005bb6:	e002      	b.n	10005bbe <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_OFF:
    default:
      axissfreq = 0; /* ck_axiss is gated */
10005bb8:	2300      	movs	r3, #0
10005bba:	60fb      	str	r3, [r7, #12]
      break;
10005bbc:	bf00      	nop
  }

  return axissfreq;
10005bbe:	68fb      	ldr	r3, [r7, #12]
}
10005bc0:	4618      	mov	r0, r3
10005bc2:	3710      	adds	r7, #16
10005bc4:	46bd      	mov	sp, r7
10005bc6:	bd80      	pop	{r7, pc}
10005bc8:	03d09000 	.word	0x03d09000
10005bcc:	016e3600 	.word	0x016e3600

10005bd0 <HAL_RCC_GetMCUSSFreq>:

uint32_t HAL_RCC_GetMCUSSFreq()
{
10005bd0:	b580      	push	{r7, lr}
10005bd2:	b084      	sub	sp, #16
10005bd4:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
10005bd6:	2300      	movs	r3, #0
10005bd8:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
10005bda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10005be0:	f003 0303 	and.w	r3, r3, #3
10005be4:	2b03      	cmp	r3, #3
10005be6:	d822      	bhi.n	10005c2e <HAL_RCC_GetMCUSSFreq+0x5e>
10005be8:	a201      	add	r2, pc, #4	; (adr r2, 10005bf0 <HAL_RCC_GetMCUSSFreq+0x20>)
10005bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005bee:	bf00      	nop
10005bf0:	10005c0f 	.word	0x10005c0f
10005bf4:	10005c23 	.word	0x10005c23
10005bf8:	10005c29 	.word	0x10005c29
10005bfc:	10005c01 	.word	0x10005c01
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10005c00:	463b      	mov	r3, r7
10005c02:	4618      	mov	r0, r3
10005c04:	f7ff fcb4 	bl	10005570 <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
10005c08:	683b      	ldr	r3, [r7, #0]
10005c0a:	60fb      	str	r3, [r7, #12]
      break;
10005c0c:	e00f      	b.n	10005c2e <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10005c0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005c12:	699b      	ldr	r3, [r3, #24]
10005c14:	f003 0303 	and.w	r3, r3, #3
10005c18:	4a07      	ldr	r2, [pc, #28]	; (10005c38 <HAL_RCC_GetMCUSSFreq+0x68>)
10005c1a:	fa22 f303 	lsr.w	r3, r2, r3
10005c1e:	60fb      	str	r3, [r7, #12]

      break;
10005c20:	e005      	b.n	10005c2e <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
10005c22:	4b06      	ldr	r3, [pc, #24]	; (10005c3c <HAL_RCC_GetMCUSSFreq+0x6c>)
10005c24:	60fb      	str	r3, [r7, #12]
      break;
10005c26:	e002      	b.n	10005c2e <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
10005c28:	4b05      	ldr	r3, [pc, #20]	; (10005c40 <HAL_RCC_GetMCUSSFreq+0x70>)
10005c2a:	60fb      	str	r3, [r7, #12]
      break;
10005c2c:	bf00      	nop
  }

  return mcussfreq;
10005c2e:	68fb      	ldr	r3, [r7, #12]
}
10005c30:	4618      	mov	r0, r3
10005c32:	3710      	adds	r7, #16
10005c34:	46bd      	mov	sp, r7
10005c36:	bd80      	pop	{r7, pc}
10005c38:	03d09000 	.word	0x03d09000
10005c3c:	016e3600 	.word	0x016e3600
10005c40:	003d0900 	.word	0x003d0900

10005c44 <HAL_RCC_WAKEUP_IRQHandler>:
  * @brief This function handles the RCC Wake up interrupt (rcc_mcu_wkup_irq/rcc_mpu_wkup_irq)
  * @note This API should be called under the RCC_WAKEUP_Handler().
  * @retval None
  */
void HAL_RCC_WAKEUP_IRQHandler(void)
{
10005c44:	b580      	push	{r7, lr}
10005c46:	af00      	add	r7, sp, #0
  /* Check RCC WKUP flag is set */
  if (__HAL_RCC_GET_IT(RCC_IT_WKUP) != RESET)
10005c48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005c4c:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
10005c50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
10005c54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
10005c58:	d107      	bne.n	10005c6a <HAL_RCC_WAKEUP_IRQHandler+0x26>
  {
    /* Clear the RCC WKUP flag bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_WKUP);
10005c5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005c5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
10005c62:	f8c3 2c18 	str.w	r2, [r3, #3096]	; 0xc18

    /* RCC WKUP interrupt user callback */
    HAL_RCC_WAKEUP_Callback();
10005c66:	f000 f802 	bl	10005c6e <HAL_RCC_WAKEUP_Callback>
  }
}
10005c6a:	bf00      	nop
10005c6c:	bd80      	pop	{r7, pc}

10005c6e <HAL_RCC_WAKEUP_Callback>:
/**
  * @brief  RCC WAKEUP interrupt callback
  * @retval None
  */
__weak void HAL_RCC_WAKEUP_Callback(void)
{
10005c6e:	b480      	push	{r7}
10005c70:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_WAKEUP_Callback could be implemented in the user file
  */
}
10005c72:	bf00      	nop
10005c74:	46bd      	mov	sp, r7
10005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
10005c7a:	4770      	bx	lr

10005c7c <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
10005c7c:	b580      	push	{r7, lr}
10005c7e:	b084      	sub	sp, #16
10005c80:	af00      	add	r7, sp, #0
10005c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
10005c84:	687b      	ldr	r3, [r7, #4]
10005c86:	681b      	ldr	r3, [r3, #0]
10005c88:	2b00      	cmp	r3, #0
10005c8a:	f000 8171 	beq.w	10005f70 <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
10005c8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005c94:	f003 0307 	and.w	r3, r3, #7
10005c98:	2b02      	cmp	r3, #2
10005c9a:	d108      	bne.n	10005cae <RCCEx_PLL2_Config+0x32>
10005c9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005ca2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10005ca6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10005caa:	f000 815f 	beq.w	10005f6c <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
10005cae:	687b      	ldr	r3, [r7, #4]
10005cb0:	681b      	ldr	r3, [r3, #0]
10005cb2:	2b02      	cmp	r3, #2
10005cb4:	f040 8130 	bne.w	10005f18 <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10005cb8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005cbe:	f003 0303 	and.w	r3, r3, #3
10005cc2:	2b00      	cmp	r3, #0
10005cc4:	d008      	beq.n	10005cd8 <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
10005cc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005ccc:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10005cd0:	2b01      	cmp	r3, #1
10005cd2:	d001      	beq.n	10005cd8 <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
10005cd4:	2301      	movs	r3, #1
10005cd6:	e14c      	b.n	10005f72 <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10005cd8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005ce0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10005ce8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
10005cec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005cf4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005cf8:	f023 0301 	bic.w	r3, r3, #1
10005cfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10005d00:	f7fb fe88 	bl	10001a14 <HAL_GetTick>
10005d04:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10005d06:	e008      	b.n	10005d1a <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005d08:	f7fb fe84 	bl	10001a14 <HAL_GetTick>
10005d0c:	4602      	mov	r2, r0
10005d0e:	68fb      	ldr	r3, [r7, #12]
10005d10:	1ad3      	subs	r3, r2, r3
10005d12:	2b64      	cmp	r3, #100	; 0x64
10005d14:	d901      	bls.n	10005d1a <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
10005d16:	2303      	movs	r3, #3
10005d18:	e12b      	b.n	10005f72 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10005d1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005d22:	f003 0302 	and.w	r3, r3, #2
10005d26:	2b02      	cmp	r3, #2
10005d28:	d0ee      	beq.n	10005d08 <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
10005d2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005d2e:	6a1b      	ldr	r3, [r3, #32]
10005d30:	f003 0303 	and.w	r3, r3, #3
10005d34:	2b02      	cmp	r3, #2
10005d36:	d107      	bne.n	10005d48 <RCCEx_PLL2_Config+0xcc>
10005d38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005d3c:	6a1b      	ldr	r3, [r3, #32]
10005d3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10005d42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10005d46:	d00e      	beq.n	10005d66 <RCCEx_PLL2_Config+0xea>
10005d48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005d4c:	6a1b      	ldr	r3, [r3, #32]
10005d4e:	f003 0303 	and.w	r3, r3, #3
10005d52:	2b03      	cmp	r3, #3
10005d54:	d112      	bne.n	10005d7c <RCCEx_PLL2_Config+0x100>
10005d56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005d5a:	6a1b      	ldr	r3, [r3, #32]
10005d5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10005d60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10005d64:	d10a      	bne.n	10005d7c <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10005d66:	687b      	ldr	r3, [r7, #4]
10005d68:	685a      	ldr	r2, [r3, #4]
10005d6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005d70:	f003 0303 	and.w	r3, r3, #3
10005d74:	429a      	cmp	r2, r3
10005d76:	d00c      	beq.n	10005d92 <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
10005d78:	2301      	movs	r3, #1
10005d7a:	e0fa      	b.n	10005f72 <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
10005d7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005d82:	f023 0203 	bic.w	r2, r3, #3
10005d86:	687b      	ldr	r3, [r7, #4]
10005d88:	685b      	ldr	r3, [r3, #4]
10005d8a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005d8e:	4313      	orrs	r3, r2
10005d90:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
10005d92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005d96:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
10005d9a:	4b78      	ldr	r3, [pc, #480]	; (10005f7c <RCCEx_PLL2_Config+0x300>)
10005d9c:	4013      	ands	r3, r2
10005d9e:	687a      	ldr	r2, [r7, #4]
10005da0:	68d2      	ldr	r2, [r2, #12]
10005da2:	1e51      	subs	r1, r2, #1
10005da4:	687a      	ldr	r2, [r7, #4]
10005da6:	6892      	ldr	r2, [r2, #8]
10005da8:	3a01      	subs	r2, #1
10005daa:	0412      	lsls	r2, r2, #16
10005dac:	430a      	orrs	r2, r1
10005dae:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005db2:	4313      	orrs	r3, r2
10005db4:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
10005db8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005dbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10005dc0:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10005dc4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10005dc8:	687a      	ldr	r2, [r7, #4]
10005dca:	6912      	ldr	r2, [r2, #16]
10005dcc:	1e51      	subs	r1, r2, #1
10005dce:	687a      	ldr	r2, [r7, #4]
10005dd0:	6952      	ldr	r2, [r2, #20]
10005dd2:	3a01      	subs	r2, #1
10005dd4:	0212      	lsls	r2, r2, #8
10005dd6:	4311      	orrs	r1, r2
10005dd8:	687a      	ldr	r2, [r7, #4]
10005dda:	6992      	ldr	r2, [r2, #24]
10005ddc:	3a01      	subs	r2, #1
10005dde:	0412      	lsls	r2, r2, #16
10005de0:	430a      	orrs	r2, r1
10005de2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005de6:	4313      	orrs	r3, r2
10005de8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
10005dec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005df0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10005df4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10005dfc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
10005e00:	687b      	ldr	r3, [r7, #4]
10005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005e04:	2b02      	cmp	r3, #2
10005e06:	d003      	beq.n	10005e10 <RCCEx_PLL2_Config+0x194>
10005e08:	687b      	ldr	r3, [r7, #4]
10005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005e0c:	2b00      	cmp	r3, #0
10005e0e:	d10c      	bne.n	10005e2a <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
10005e10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005e14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10005e18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005e1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10005e20:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10005e24:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
10005e28:	e00f      	b.n	10005e4a <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
10005e2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005e2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10005e32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10005e36:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10005e3a:	687a      	ldr	r2, [r7, #4]
10005e3c:	6a12      	ldr	r2, [r2, #32]
10005e3e:	00d2      	lsls	r2, r2, #3
10005e40:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005e44:	4313      	orrs	r3, r2
10005e46:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
10005e4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005e4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10005e52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005e56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10005e5a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10005e5e:	687b      	ldr	r3, [r7, #4]
10005e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005e62:	2b02      	cmp	r3, #2
10005e64:	d124      	bne.n	10005eb0 <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
10005e66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005e6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
10005e6e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10005e72:	687b      	ldr	r3, [r7, #4]
10005e74:	6a99      	ldr	r1, [r3, #40]	; 0x28
10005e76:	687b      	ldr	r3, [r7, #4]
10005e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10005e7a:	4319      	orrs	r1, r3
10005e7c:	687b      	ldr	r3, [r7, #4]
10005e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10005e80:	4319      	orrs	r1, r3
10005e82:	687b      	ldr	r3, [r7, #4]
10005e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10005e86:	4319      	orrs	r1, r3
10005e88:	687b      	ldr	r3, [r7, #4]
10005e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10005e8c:	041b      	lsls	r3, r3, #16
10005e8e:	430b      	orrs	r3, r1
10005e90:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005e94:	4313      	orrs	r3, r2
10005e96:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
10005e9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005ea2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005ea6:	f043 0304 	orr.w	r3, r3, #4
10005eaa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
10005eae:	e009      	b.n	10005ec4 <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
10005eb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005eb8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005ebc:	f023 0304 	bic.w	r3, r3, #4
10005ec0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
10005ec4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005ecc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005ed0:	f043 0301 	orr.w	r3, r3, #1
10005ed4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10005ed8:	f7fb fd9c 	bl	10001a14 <HAL_GetTick>
10005edc:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10005ede:	e008      	b.n	10005ef2 <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005ee0:	f7fb fd98 	bl	10001a14 <HAL_GetTick>
10005ee4:	4602      	mov	r2, r0
10005ee6:	68fb      	ldr	r3, [r7, #12]
10005ee8:	1ad3      	subs	r3, r2, r3
10005eea:	2b64      	cmp	r3, #100	; 0x64
10005eec:	d901      	bls.n	10005ef2 <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
10005eee:	2303      	movs	r3, #3
10005ef0:	e03f      	b.n	10005f72 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10005ef2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005efa:	f003 0302 	and.w	r3, r3, #2
10005efe:	2b02      	cmp	r3, #2
10005f00:	d1ee      	bne.n	10005ee0 <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10005f02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005f0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005f0e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10005f12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
10005f16:	e02b      	b.n	10005f70 <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10005f18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005f20:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10005f28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
10005f2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005f34:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005f38:	f023 0301 	bic.w	r3, r3, #1
10005f3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10005f40:	f7fb fd68 	bl	10001a14 <HAL_GetTick>
10005f44:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10005f46:	e008      	b.n	10005f5a <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005f48:	f7fb fd64 	bl	10001a14 <HAL_GetTick>
10005f4c:	4602      	mov	r2, r0
10005f4e:	68fb      	ldr	r3, [r7, #12]
10005f50:	1ad3      	subs	r3, r2, r3
10005f52:	2b64      	cmp	r3, #100	; 0x64
10005f54:	d901      	bls.n	10005f5a <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
10005f56:	2303      	movs	r3, #3
10005f58:	e00b      	b.n	10005f72 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10005f5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005f62:	f003 0302 	and.w	r3, r3, #2
10005f66:	2b02      	cmp	r3, #2
10005f68:	d0ee      	beq.n	10005f48 <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
10005f6a:	e001      	b.n	10005f70 <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10005f6c:	2301      	movs	r3, #1
10005f6e:	e000      	b.n	10005f72 <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
10005f70:	2300      	movs	r3, #0

}
10005f72:	4618      	mov	r0, r3
10005f74:	3710      	adds	r7, #16
10005f76:	46bd      	mov	sp, r7
10005f78:	bd80      	pop	{r7, pc}
10005f7a:	bf00      	nop
10005f7c:	ffc0fe00 	.word	0xffc0fe00

10005f80 <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
10005f80:	b580      	push	{r7, lr}
10005f82:	b084      	sub	sp, #16
10005f84:	af00      	add	r7, sp, #0
10005f86:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
10005f88:	687b      	ldr	r3, [r7, #4]
10005f8a:	681b      	ldr	r3, [r3, #0]
10005f8c:	2b00      	cmp	r3, #0
10005f8e:	f000 815a 	beq.w	10006246 <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
10005f92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10005f98:	f003 0303 	and.w	r3, r3, #3
10005f9c:	2b03      	cmp	r3, #3
10005f9e:	d108      	bne.n	10005fb2 <RCCEx_PLL3_Config+0x32>
10005fa0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10005fa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10005faa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10005fae:	f000 8148 	beq.w	10006242 <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
10005fb2:	687b      	ldr	r3, [r7, #4]
10005fb4:	681b      	ldr	r3, [r3, #0]
10005fb6:	2b02      	cmp	r3, #2
10005fb8:	f040 8119 	bne.w	100061ee <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10005fbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005fc0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005fc4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10005fcc:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
10005fd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005fd4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005fd8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005fdc:	f023 0301 	bic.w	r3, r3, #1
10005fe0:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10005fe4:	f7fb fd16 	bl	10001a14 <HAL_GetTick>
10005fe8:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10005fea:	e008      	b.n	10005ffe <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005fec:	f7fb fd12 	bl	10001a14 <HAL_GetTick>
10005ff0:	4602      	mov	r2, r0
10005ff2:	68fb      	ldr	r3, [r7, #12]
10005ff4:	1ad3      	subs	r3, r2, r3
10005ff6:	2b64      	cmp	r3, #100	; 0x64
10005ff8:	d901      	bls.n	10005ffe <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
10005ffa:	2303      	movs	r3, #3
10005ffc:	e124      	b.n	10006248 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10005ffe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006002:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006006:	f003 0302 	and.w	r3, r3, #2
1000600a:	2b02      	cmp	r3, #2
1000600c:	d0ee      	beq.n	10005fec <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
1000600e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006012:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10006016:	f023 0203 	bic.w	r2, r3, #3
1000601a:	687b      	ldr	r3, [r7, #4]
1000601c:	685b      	ldr	r3, [r3, #4]
1000601e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10006022:	4313      	orrs	r3, r2
10006024:	f8c1 3820 	str.w	r3, [r1, #2080]	; 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10006028:	e008      	b.n	1000603c <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000602a:	f7fb fcf3 	bl	10001a14 <HAL_GetTick>
1000602e:	4602      	mov	r2, r0
10006030:	68fb      	ldr	r3, [r7, #12]
10006032:	1ad3      	subs	r3, r2, r3
10006034:	2b64      	cmp	r3, #100	; 0x64
10006036:	d901      	bls.n	1000603c <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
10006038:	2303      	movs	r3, #3
1000603a:	e105      	b.n	10006248 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
1000603c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006040:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10006044:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10006048:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000604c:	d1ed      	bne.n	1000602a <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
1000604e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006052:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10006056:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
1000605a:	687b      	ldr	r3, [r7, #4]
1000605c:	69db      	ldr	r3, [r3, #28]
1000605e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10006062:	4313      	orrs	r3, r2
10006064:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
10006068:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000606c:	f8d3 2884 	ldr.w	r2, [r3, #2180]	; 0x884
10006070:	4b77      	ldr	r3, [pc, #476]	; (10006250 <RCCEx_PLL3_Config+0x2d0>)
10006072:	4013      	ands	r3, r2
10006074:	687a      	ldr	r2, [r7, #4]
10006076:	68d2      	ldr	r2, [r2, #12]
10006078:	1e51      	subs	r1, r2, #1
1000607a:	687a      	ldr	r2, [r7, #4]
1000607c:	6892      	ldr	r2, [r2, #8]
1000607e:	3a01      	subs	r2, #1
10006080:	0412      	lsls	r2, r2, #16
10006082:	430a      	orrs	r2, r1
10006084:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10006088:	4313      	orrs	r3, r2
1000608a:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884
1000608e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006092:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10006096:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
1000609a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
1000609e:	687a      	ldr	r2, [r7, #4]
100060a0:	6912      	ldr	r2, [r2, #16]
100060a2:	1e51      	subs	r1, r2, #1
100060a4:	687a      	ldr	r2, [r7, #4]
100060a6:	6952      	ldr	r2, [r2, #20]
100060a8:	3a01      	subs	r2, #1
100060aa:	0212      	lsls	r2, r2, #8
100060ac:	4311      	orrs	r1, r2
100060ae:	687a      	ldr	r2, [r7, #4]
100060b0:	6992      	ldr	r2, [r2, #24]
100060b2:	3a01      	subs	r2, #1
100060b4:	0412      	lsls	r2, r2, #16
100060b6:	430a      	orrs	r2, r1
100060b8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100060bc:	4313      	orrs	r3, r2
100060be:	f8c1 3888 	str.w	r3, [r1, #2184]	; 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
100060c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100060c6:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100060ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100060ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
100060d2:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
100060d6:	687b      	ldr	r3, [r7, #4]
100060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100060da:	2b02      	cmp	r3, #2
100060dc:	d003      	beq.n	100060e6 <RCCEx_PLL3_Config+0x166>
100060de:	687b      	ldr	r3, [r7, #4]
100060e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100060e2:	2b00      	cmp	r3, #0
100060e4:	d10c      	bne.n	10006100 <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
100060e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100060ea:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100060ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100060f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100060f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100060fa:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
100060fe:	e00f      	b.n	10006120 <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
10006100:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006104:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10006108:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000610c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10006110:	687a      	ldr	r2, [r7, #4]
10006112:	6a12      	ldr	r2, [r2, #32]
10006114:	00d2      	lsls	r2, r2, #3
10006116:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000611a:	4313      	orrs	r3, r2
1000611c:	f8c1 388c 	str.w	r3, [r1, #2188]	; 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
10006120:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006124:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10006128:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000612c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10006130:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10006134:	687b      	ldr	r3, [r7, #4]
10006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006138:	2b02      	cmp	r3, #2
1000613a:	d124      	bne.n	10006186 <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
1000613c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006140:	f8d3 3890 	ldr.w	r3, [r3, #2192]	; 0x890
10006144:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10006148:	687b      	ldr	r3, [r7, #4]
1000614a:	6a99      	ldr	r1, [r3, #40]	; 0x28
1000614c:	687b      	ldr	r3, [r7, #4]
1000614e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10006150:	4319      	orrs	r1, r3
10006152:	687b      	ldr	r3, [r7, #4]
10006154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10006156:	4319      	orrs	r1, r3
10006158:	687b      	ldr	r3, [r7, #4]
1000615a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000615c:	4319      	orrs	r1, r3
1000615e:	687b      	ldr	r3, [r7, #4]
10006160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10006162:	041b      	lsls	r3, r3, #16
10006164:	430b      	orrs	r3, r1
10006166:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000616a:	4313      	orrs	r3, r2
1000616c:	f8c1 3890 	str.w	r3, [r1, #2192]	; 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
10006170:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006174:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006178:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000617c:	f043 0304 	orr.w	r3, r3, #4
10006180:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
10006184:	e009      	b.n	1000619a <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
10006186:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000618a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000618e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006192:	f023 0304 	bic.w	r3, r3, #4
10006196:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
1000619a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000619e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100061a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100061a6:	f043 0301 	orr.w	r3, r3, #1
100061aa:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100061ae:	f7fb fc31 	bl	10001a14 <HAL_GetTick>
100061b2:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
100061b4:	e008      	b.n	100061c8 <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100061b6:	f7fb fc2d 	bl	10001a14 <HAL_GetTick>
100061ba:	4602      	mov	r2, r0
100061bc:	68fb      	ldr	r3, [r7, #12]
100061be:	1ad3      	subs	r3, r2, r3
100061c0:	2b64      	cmp	r3, #100	; 0x64
100061c2:	d901      	bls.n	100061c8 <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
100061c4:	2303      	movs	r3, #3
100061c6:	e03f      	b.n	10006248 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
100061c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100061cc:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100061d0:	f003 0302 	and.w	r3, r3, #2
100061d4:	2b02      	cmp	r3, #2
100061d6:	d1ee      	bne.n	100061b6 <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100061d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100061dc:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100061e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100061e4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
100061e8:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
100061ec:	e02b      	b.n	10006246 <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100061ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100061f2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100061f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100061fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100061fe:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
10006202:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006206:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000620a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000620e:	f023 0301 	bic.w	r3, r3, #1
10006212:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10006216:	f7fb fbfd 	bl	10001a14 <HAL_GetTick>
1000621a:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
1000621c:	e008      	b.n	10006230 <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000621e:	f7fb fbf9 	bl	10001a14 <HAL_GetTick>
10006222:	4602      	mov	r2, r0
10006224:	68fb      	ldr	r3, [r7, #12]
10006226:	1ad3      	subs	r3, r2, r3
10006228:	2b64      	cmp	r3, #100	; 0x64
1000622a:	d901      	bls.n	10006230 <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
1000622c:	2303      	movs	r3, #3
1000622e:	e00b      	b.n	10006248 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10006230:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006234:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006238:	f003 0302 	and.w	r3, r3, #2
1000623c:	2b02      	cmp	r3, #2
1000623e:	d0ee      	beq.n	1000621e <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
10006240:	e001      	b.n	10006246 <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10006242:	2301      	movs	r3, #1
10006244:	e000      	b.n	10006248 <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
10006246:	2300      	movs	r3, #0
}
10006248:	4618      	mov	r0, r3
1000624a:	3710      	adds	r7, #16
1000624c:	46bd      	mov	sp, r7
1000624e:	bd80      	pop	{r7, pc}
10006250:	ffc0fe00 	.word	0xffc0fe00

10006254 <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
10006254:	b580      	push	{r7, lr}
10006256:	b084      	sub	sp, #16
10006258:	af00      	add	r7, sp, #0
1000625a:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
1000625c:	687b      	ldr	r3, [r7, #4]
1000625e:	681b      	ldr	r3, [r3, #0]
10006260:	2b00      	cmp	r3, #0
10006262:	f000 8147 	beq.w	100064f4 <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
10006266:	687b      	ldr	r3, [r7, #4]
10006268:	681b      	ldr	r3, [r3, #0]
1000626a:	2b02      	cmp	r3, #2
1000626c:	f040 8119 	bne.w	100064a2 <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10006270:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006274:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006278:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000627c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10006280:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
10006284:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006288:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000628c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006290:	f023 0301 	bic.w	r3, r3, #1
10006294:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10006298:	f7fb fbbc 	bl	10001a14 <HAL_GetTick>
1000629c:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
1000629e:	e008      	b.n	100062b2 <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100062a0:	f7fb fbb8 	bl	10001a14 <HAL_GetTick>
100062a4:	4602      	mov	r2, r0
100062a6:	68fb      	ldr	r3, [r7, #12]
100062a8:	1ad3      	subs	r3, r2, r3
100062aa:	2b64      	cmp	r3, #100	; 0x64
100062ac:	d901      	bls.n	100062b2 <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
100062ae:	2303      	movs	r3, #3
100062b0:	e121      	b.n	100064f6 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100062b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100062b6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100062ba:	f003 0302 	and.w	r3, r3, #2
100062be:	2b02      	cmp	r3, #2
100062c0:	d0ee      	beq.n	100062a0 <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
100062c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100062c6:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
100062ca:	f023 0203 	bic.w	r2, r3, #3
100062ce:	687b      	ldr	r3, [r7, #4]
100062d0:	685b      	ldr	r3, [r3, #4]
100062d2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100062d6:	4313      	orrs	r3, r2
100062d8:	f8c1 3824 	str.w	r3, [r1, #2084]	; 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
100062dc:	e008      	b.n	100062f0 <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100062de:	f7fb fb99 	bl	10001a14 <HAL_GetTick>
100062e2:	4602      	mov	r2, r0
100062e4:	68fb      	ldr	r3, [r7, #12]
100062e6:	1ad3      	subs	r3, r2, r3
100062e8:	2b64      	cmp	r3, #100	; 0x64
100062ea:	d901      	bls.n	100062f0 <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
100062ec:	2303      	movs	r3, #3
100062ee:	e102      	b.n	100064f6 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
100062f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100062f4:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
100062f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100062fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10006300:	d1ed      	bne.n	100062de <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
10006302:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006306:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
1000630a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
1000630e:	687b      	ldr	r3, [r7, #4]
10006310:	69db      	ldr	r3, [r3, #28]
10006312:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10006316:	4313      	orrs	r3, r2
10006318:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
1000631c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006320:	f8d3 2898 	ldr.w	r2, [r3, #2200]	; 0x898
10006324:	4b76      	ldr	r3, [pc, #472]	; (10006500 <RCCEx_PLL4_Config+0x2ac>)
10006326:	4013      	ands	r3, r2
10006328:	687a      	ldr	r2, [r7, #4]
1000632a:	68d2      	ldr	r2, [r2, #12]
1000632c:	1e51      	subs	r1, r2, #1
1000632e:	687a      	ldr	r2, [r7, #4]
10006330:	6892      	ldr	r2, [r2, #8]
10006332:	3a01      	subs	r2, #1
10006334:	0412      	lsls	r2, r2, #16
10006336:	430a      	orrs	r2, r1
10006338:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000633c:	4313      	orrs	r3, r2
1000633e:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898
10006342:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006346:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
1000634a:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
1000634e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10006352:	687a      	ldr	r2, [r7, #4]
10006354:	6912      	ldr	r2, [r2, #16]
10006356:	1e51      	subs	r1, r2, #1
10006358:	687a      	ldr	r2, [r7, #4]
1000635a:	6952      	ldr	r2, [r2, #20]
1000635c:	3a01      	subs	r2, #1
1000635e:	0212      	lsls	r2, r2, #8
10006360:	4311      	orrs	r1, r2
10006362:	687a      	ldr	r2, [r7, #4]
10006364:	6992      	ldr	r2, [r2, #24]
10006366:	3a01      	subs	r2, #1
10006368:	0412      	lsls	r2, r2, #16
1000636a:	430a      	orrs	r2, r1
1000636c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10006370:	4313      	orrs	r3, r2
10006372:	f8c1 389c 	str.w	r3, [r1, #2204]	; 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
10006376:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000637a:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
1000637e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10006386:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
1000638a:	687b      	ldr	r3, [r7, #4]
1000638c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000638e:	2b02      	cmp	r3, #2
10006390:	d003      	beq.n	1000639a <RCCEx_PLL4_Config+0x146>
10006392:	687b      	ldr	r3, [r7, #4]
10006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006396:	2b00      	cmp	r3, #0
10006398:	d10c      	bne.n	100063b4 <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
1000639a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000639e:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100063a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100063a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100063aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100063ae:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
100063b2:	e00f      	b.n	100063d4 <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
100063b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100063b8:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100063bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100063c0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100063c4:	687a      	ldr	r2, [r7, #4]
100063c6:	6a12      	ldr	r2, [r2, #32]
100063c8:	00d2      	lsls	r2, r2, #3
100063ca:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100063ce:	4313      	orrs	r3, r2
100063d0:	f8c1 38a0 	str.w	r3, [r1, #2208]	; 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
100063d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100063d8:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100063dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100063e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
100063e4:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100063e8:	687b      	ldr	r3, [r7, #4]
100063ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100063ec:	2b02      	cmp	r3, #2
100063ee:	d124      	bne.n	1000643a <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
100063f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100063f4:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	; 0x8a4
100063f8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
100063fc:	687b      	ldr	r3, [r7, #4]
100063fe:	6a99      	ldr	r1, [r3, #40]	; 0x28
10006400:	687b      	ldr	r3, [r7, #4]
10006402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10006404:	4319      	orrs	r1, r3
10006406:	687b      	ldr	r3, [r7, #4]
10006408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000640a:	4319      	orrs	r1, r3
1000640c:	687b      	ldr	r3, [r7, #4]
1000640e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10006410:	4319      	orrs	r1, r3
10006412:	687b      	ldr	r3, [r7, #4]
10006414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10006416:	041b      	lsls	r3, r3, #16
10006418:	430b      	orrs	r3, r1
1000641a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000641e:	4313      	orrs	r3, r2
10006420:	f8c1 38a4 	str.w	r3, [r1, #2212]	; 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
10006424:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006428:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000642c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006430:	f043 0304 	orr.w	r3, r3, #4
10006434:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10006438:	e009      	b.n	1000644e <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
1000643a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000643e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006442:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006446:	f023 0304 	bic.w	r3, r3, #4
1000644a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
1000644e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006452:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006456:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000645a:	f043 0301 	orr.w	r3, r3, #1
1000645e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10006462:	f7fb fad7 	bl	10001a14 <HAL_GetTick>
10006466:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10006468:	e008      	b.n	1000647c <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000646a:	f7fb fad3 	bl	10001a14 <HAL_GetTick>
1000646e:	4602      	mov	r2, r0
10006470:	68fb      	ldr	r3, [r7, #12]
10006472:	1ad3      	subs	r3, r2, r3
10006474:	2b64      	cmp	r3, #100	; 0x64
10006476:	d901      	bls.n	1000647c <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
10006478:	2303      	movs	r3, #3
1000647a:	e03c      	b.n	100064f6 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
1000647c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006480:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006484:	f003 0302 	and.w	r3, r3, #2
10006488:	2b02      	cmp	r3, #2
1000648a:	d1ee      	bne.n	1000646a <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
1000648c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006490:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006494:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006498:	f043 0370 	orr.w	r3, r3, #112	; 0x70
1000649c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
100064a0:	e028      	b.n	100064f4 <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
100064a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100064a6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100064aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100064ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100064b2:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
100064b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100064ba:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100064be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100064c2:	f023 0301 	bic.w	r3, r3, #1
100064c6:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100064ca:	f7fb faa3 	bl	10001a14 <HAL_GetTick>
100064ce:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100064d0:	e008      	b.n	100064e4 <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100064d2:	f7fb fa9f 	bl	10001a14 <HAL_GetTick>
100064d6:	4602      	mov	r2, r0
100064d8:	68fb      	ldr	r3, [r7, #12]
100064da:	1ad3      	subs	r3, r2, r3
100064dc:	2b64      	cmp	r3, #100	; 0x64
100064de:	d901      	bls.n	100064e4 <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
100064e0:	2303      	movs	r3, #3
100064e2:	e008      	b.n	100064f6 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100064e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100064e8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100064ec:	f003 0302 	and.w	r3, r3, #2
100064f0:	2b02      	cmp	r3, #2
100064f2:	d0ee      	beq.n	100064d2 <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
100064f4:	2300      	movs	r3, #0
}
100064f6:	4618      	mov	r0, r3
100064f8:	3710      	adds	r7, #16
100064fa:	46bd      	mov	sp, r7
100064fc:	bd80      	pop	{r7, pc}
100064fe:	bf00      	nop
10006500:	ffc0fe00 	.word	0xffc0fe00

10006504 <HAL_RCCEx_PeriphCLKConfig>:
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef
                                            *PeriphClkInit)
{
10006504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
10006508:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
1000650c:	af00      	add	r7, sp, #0
1000650e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006512:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006516:	6018      	str	r0, [r3, #0]
  uint32_t tmpreg = 0, RESERVED_BDCR_MASK = 0;
10006518:	2300      	movs	r3, #0
1000651a:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
1000651e:	2300      	movs	r3, #0
10006520:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
10006524:	2300      	movs	r3, #0
10006526:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
1000652a:	2300      	movs	r3, #0
1000652c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- CKPER configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) ==
10006530:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006534:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006538:	681b      	ldr	r3, [r3, #0]
1000653a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000653e:	f402 0400 	and.w	r4, r2, #8388608	; 0x800000
10006542:	2500      	movs	r5, #0
10006544:	ea54 0305 	orrs.w	r3, r4, r5
10006548:	d011      	beq.n	1000656e <HAL_RCCEx_PeriphCLKConfig+0x6a>
      RCC_PERIPHCLK_CKPER)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    __HAL_RCC_CKPER_CONFIG(PeriphClkInit->CkperClockSelection);
1000654a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000654e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
10006552:	f023 0103 	bic.w	r1, r3, #3
10006556:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000655a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000655e:	681b      	ldr	r3, [r3, #0]
10006560:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
10006564:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006568:	430b      	orrs	r3, r1
1000656a:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
  }

  /*------------------------------ I2C12 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C12) ==
1000656e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006572:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006576:	681b      	ldr	r3, [r3, #0]
10006578:	e9d3 2300 	ldrd	r2, r3, [r3]
1000657c:	f002 0810 	and.w	r8, r2, #16
10006580:	f04f 0900 	mov.w	r9, #0
10006584:	ea58 0309 	orrs.w	r3, r8, r9
10006588:	d038      	beq.n	100065fc <HAL_RCCEx_PeriphCLKConfig+0xf8>
      RCC_PERIPHCLK_I2C12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C12CLKSOURCE(PeriphClkInit->I2c12ClockSelection));

    if ((PeriphClkInit->I2c12ClockSelection) == RCC_I2C12CLKSOURCE_PLL4)
1000658a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000658e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006592:	681b      	ldr	r3, [r3, #0]
10006594:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
10006598:	2b01      	cmp	r3, #1
1000659a:	d11d      	bne.n	100065d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000659c:	f507 7312 	add.w	r3, r7, #584	; 0x248
100065a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100065a4:	681b      	ldr	r3, [r3, #0]
100065a6:	3380      	adds	r3, #128	; 0x80
100065a8:	4618      	mov	r0, r3
100065aa:	f7ff fe53 	bl	10006254 <RCCEx_PLL4_Config>
100065ae:	4603      	mov	r3, r0
100065b0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
100065b4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100065b8:	2b00      	cmp	r3, #0
100065ba:	d003      	beq.n	100065c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return status;
100065bc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100065c0:	f001 be2a 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100065c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100065c8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100065cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100065d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100065d4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_I2C12_CONFIG(PeriphClkInit->I2c12ClockSelection);
100065d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100065dc:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	; 0x8c0
100065e0:	f023 0107 	bic.w	r1, r3, #7
100065e4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100065e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100065ec:	681b      	ldr	r3, [r3, #0]
100065ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
100065f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100065f6:	430b      	orrs	r3, r1
100065f8:	f8c2 38c0 	str.w	r3, [r2, #2240]	; 0x8c0
  }

  /*------------------------------ I2C35 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C35) ==
100065fc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006600:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006604:	681b      	ldr	r3, [r3, #0]
10006606:	e9d3 2300 	ldrd	r2, r3, [r3]
1000660a:	f002 0a20 	and.w	sl, r2, #32
1000660e:	f04f 0b00 	mov.w	fp, #0
10006612:	ea5a 030b 	orrs.w	r3, sl, fp
10006616:	d038      	beq.n	1000668a <HAL_RCCEx_PeriphCLKConfig+0x186>
      RCC_PERIPHCLK_I2C35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C35CLKSOURCE(PeriphClkInit->I2c35ClockSelection));

    if ((PeriphClkInit->I2c35ClockSelection) == RCC_I2C35CLKSOURCE_PLL4)
10006618:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000661c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006620:	681b      	ldr	r3, [r3, #0]
10006622:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10006626:	2b01      	cmp	r3, #1
10006628:	d11d      	bne.n	10006666 <HAL_RCCEx_PeriphCLKConfig+0x162>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000662a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000662e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006632:	681b      	ldr	r3, [r3, #0]
10006634:	3380      	adds	r3, #128	; 0x80
10006636:	4618      	mov	r0, r3
10006638:	f7ff fe0c 	bl	10006254 <RCCEx_PLL4_Config>
1000663c:	4603      	mov	r3, r0
1000663e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10006642:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006646:	2b00      	cmp	r3, #0
10006648:	d003      	beq.n	10006652 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        return status;
1000664a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000664e:	f001 bde3 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10006652:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006656:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000665a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000665e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006662:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_I2C35_CONFIG(PeriphClkInit->I2c35ClockSelection);
10006666:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000666a:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	; 0x8c4
1000666e:	f023 0107 	bic.w	r1, r3, #7
10006672:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006676:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000667a:	681b      	ldr	r3, [r3, #0]
1000667c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10006680:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006684:	430b      	orrs	r3, r1
10006686:	f8c2 38c4 	str.w	r3, [r2, #2244]	; 0x8c4
  }

  /*------------------------------ I2C46 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C46) ==
1000668a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000668e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006692:	681b      	ldr	r3, [r3, #0]
10006694:	e9d3 2300 	ldrd	r2, r3, [r3]
10006698:	2100      	movs	r1, #0
1000669a:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
1000669e:	f003 0320 	and.w	r3, r3, #32
100066a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
100066a6:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
100066aa:	460b      	mov	r3, r1
100066ac:	4313      	orrs	r3, r2
100066ae:	d038      	beq.n	10006722 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      RCC_PERIPHCLK_I2C46)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C46CLKSOURCE(PeriphClkInit->I2c46ClockSelection));

    if ((PeriphClkInit->I2c46ClockSelection) == RCC_I2C46CLKSOURCE_PLL3)
100066b0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100066b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100066b8:	681b      	ldr	r3, [r3, #0]
100066ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
100066be:	2b01      	cmp	r3, #1
100066c0:	d11d      	bne.n	100066fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100066c2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100066c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100066ca:	681b      	ldr	r3, [r3, #0]
100066cc:	3344      	adds	r3, #68	; 0x44
100066ce:	4618      	mov	r0, r3
100066d0:	f7ff fc56 	bl	10005f80 <RCCEx_PLL3_Config>
100066d4:	4603      	mov	r3, r0
100066d6:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
100066da:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100066de:	2b00      	cmp	r3, #0
100066e0:	d003      	beq.n	100066ea <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      {
        return status;
100066e2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100066e6:	f001 bd97 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100066ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100066ee:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100066f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100066f6:	f043 0320 	orr.w	r3, r3, #32
100066fa:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
    }

    __HAL_RCC_I2C46_CONFIG(PeriphClkInit->I2c46ClockSelection);
100066fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006702:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10006706:	f023 0107 	bic.w	r1, r3, #7
1000670a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000670e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006712:	681b      	ldr	r3, [r3, #0]
10006714:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10006718:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000671c:	430b      	orrs	r3, r1
1000671e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) ==
10006722:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006726:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000672a:	681b      	ldr	r3, [r3, #0]
1000672c:	e9d3 2300 	ldrd	r2, r3, [r3]
10006730:	f002 0380 	and.w	r3, r2, #128	; 0x80
10006734:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
10006738:	2300      	movs	r3, #0
1000673a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
1000673e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
10006742:	460b      	mov	r3, r1
10006744:	4313      	orrs	r3, r2
10006746:	d07e      	beq.n	10006846 <HAL_RCCEx_PeriphCLKConfig+0x342>
      RCC_PERIPHCLK_SAI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
10006748:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000674c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006750:	681b      	ldr	r3, [r3, #0]
10006752:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10006756:	2b04      	cmp	r3, #4
10006758:	d044      	beq.n	100067e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
1000675a:	2b04      	cmp	r3, #4
1000675c:	d861      	bhi.n	10006822 <HAL_RCCEx_PeriphCLKConfig+0x31e>
1000675e:	2b00      	cmp	r3, #0
10006760:	d002      	beq.n	10006768 <HAL_RCCEx_PeriphCLKConfig+0x264>
10006762:	2b01      	cmp	r3, #1
10006764:	d01f      	beq.n	100067a6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
10006766:	e05c      	b.n	10006822 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    {
      case RCC_SAI1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI1*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006768:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000676c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006770:	681b      	ldr	r3, [r3, #0]
10006772:	3380      	adds	r3, #128	; 0x80
10006774:	4618      	mov	r0, r3
10006776:	f7ff fd6d 	bl	10006254 <RCCEx_PLL4_Config>
1000677a:	4603      	mov	r3, r0
1000677c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006780:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006784:	2b00      	cmp	r3, #0
10006786:	d003      	beq.n	10006790 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        {
          return status;
10006788:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000678c:	f001 bd44 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006790:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006794:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006798:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000679c:	f043 0320 	orr.w	r3, r3, #32
100067a0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100067a4:	e03d      	b.n	10006822 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_Q:  /* PLL3_Q is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100067a6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100067aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100067ae:	681b      	ldr	r3, [r3, #0]
100067b0:	3344      	adds	r3, #68	; 0x44
100067b2:	4618      	mov	r0, r3
100067b4:	f7ff fbe4 	bl	10005f80 <RCCEx_PLL3_Config>
100067b8:	4603      	mov	r3, r0
100067ba:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100067be:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100067c2:	2b00      	cmp	r3, #0
100067c4:	d003      	beq.n	100067ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
        {
          return status;
100067c6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100067ca:	f001 bd25 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100067ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100067d2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100067d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100067da:	f043 0320 	orr.w	r3, r3, #32
100067de:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100067e2:	e01e      	b.n	10006822 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_R:  /* PLL3_R is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100067e4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100067e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100067ec:	681b      	ldr	r3, [r3, #0]
100067ee:	3344      	adds	r3, #68	; 0x44
100067f0:	4618      	mov	r0, r3
100067f2:	f7ff fbc5 	bl	10005f80 <RCCEx_PLL3_Config>
100067f6:	4603      	mov	r3, r0
100067f8:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100067fc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006800:	2b00      	cmp	r3, #0
10006802:	d003      	beq.n	1000680c <HAL_RCCEx_PeriphCLKConfig+0x308>
        {
          return status;
10006804:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006808:	f001 bd06 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
1000680c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006810:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006814:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000681c:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006820:	bf00      	nop
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
10006822:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006826:	f8d3 38c8 	ldr.w	r3, [r3, #2248]	; 0x8c8
1000682a:	f023 0107 	bic.w	r1, r3, #7
1000682e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006832:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006836:	681b      	ldr	r3, [r3, #0]
10006838:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
1000683c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006840:	430b      	orrs	r3, r1
10006842:	f8c2 38c8 	str.w	r3, [r2, #2248]	; 0x8c8
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) ==
10006846:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000684a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000684e:	681b      	ldr	r3, [r3, #0]
10006850:	e9d3 2300 	ldrd	r2, r3, [r3]
10006854:	f402 7380 	and.w	r3, r2, #256	; 0x100
10006858:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
1000685c:	2300      	movs	r3, #0
1000685e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
10006862:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
10006866:	460b      	mov	r3, r1
10006868:	4313      	orrs	r3, r2
1000686a:	d07e      	beq.n	1000696a <HAL_RCCEx_PeriphCLKConfig+0x466>
      RCC_PERIPHCLK_SAI2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
1000686c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006870:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006874:	681b      	ldr	r3, [r3, #0]
10006876:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
1000687a:	2b05      	cmp	r3, #5
1000687c:	d044      	beq.n	10006908 <HAL_RCCEx_PeriphCLKConfig+0x404>
1000687e:	2b05      	cmp	r3, #5
10006880:	d861      	bhi.n	10006946 <HAL_RCCEx_PeriphCLKConfig+0x442>
10006882:	2b00      	cmp	r3, #0
10006884:	d002      	beq.n	1000688c <HAL_RCCEx_PeriphCLKConfig+0x388>
10006886:	2b01      	cmp	r3, #1
10006888:	d01f      	beq.n	100068ca <HAL_RCCEx_PeriphCLKConfig+0x3c6>
1000688a:	e05c      	b.n	10006946 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      case RCC_SAI2CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI2*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000688c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006890:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006894:	681b      	ldr	r3, [r3, #0]
10006896:	3380      	adds	r3, #128	; 0x80
10006898:	4618      	mov	r0, r3
1000689a:	f7ff fcdb 	bl	10006254 <RCCEx_PLL4_Config>
1000689e:	4603      	mov	r3, r0
100068a0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100068a4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100068a8:	2b00      	cmp	r3, #0
100068aa:	d003      	beq.n	100068b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          return status;
100068ac:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100068b0:	f001 bcb2 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100068b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100068b8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100068bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100068c0:	f043 0320 	orr.w	r3, r3, #32
100068c4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100068c8:	e03d      	b.n	10006946 <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100068ca:	f507 7312 	add.w	r3, r7, #584	; 0x248
100068ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100068d2:	681b      	ldr	r3, [r3, #0]
100068d4:	3344      	adds	r3, #68	; 0x44
100068d6:	4618      	mov	r0, r3
100068d8:	f7ff fb52 	bl	10005f80 <RCCEx_PLL3_Config>
100068dc:	4603      	mov	r3, r0
100068de:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100068e2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100068e6:	2b00      	cmp	r3, #0
100068e8:	d003      	beq.n	100068f2 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
        {
          return status;
100068ea:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100068ee:	f001 bc93 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100068f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100068f6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100068fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100068fe:	f043 0320 	orr.w	r3, r3, #32
10006902:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006906:	e01e      	b.n	10006946 <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006908:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000690c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006910:	681b      	ldr	r3, [r3, #0]
10006912:	3344      	adds	r3, #68	; 0x44
10006914:	4618      	mov	r0, r3
10006916:	f7ff fb33 	bl	10005f80 <RCCEx_PLL3_Config>
1000691a:	4603      	mov	r3, r0
1000691c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006920:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006924:	2b00      	cmp	r3, #0
10006926:	d003      	beq.n	10006930 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        {
          return status;
10006928:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000692c:	f001 bc74 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006930:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006934:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006938:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000693c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006940:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006944:	bf00      	nop
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
10006946:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000694a:	f8d3 38cc 	ldr.w	r3, [r3, #2252]	; 0x8cc
1000694e:	f023 0107 	bic.w	r1, r3, #7
10006952:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006956:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000695a:	681b      	ldr	r3, [r3, #0]
1000695c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
10006960:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006964:	430b      	orrs	r3, r1
10006966:	f8c2 38cc 	str.w	r3, [r2, #2252]	; 0x8cc
  }

  /*---------------------------- SAI3 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI3) ==
1000696a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000696e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006972:	681b      	ldr	r3, [r3, #0]
10006974:	e9d3 2300 	ldrd	r2, r3, [r3]
10006978:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
1000697c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
10006980:	2300      	movs	r3, #0
10006982:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
10006986:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
1000698a:	460b      	mov	r3, r1
1000698c:	4313      	orrs	r3, r2
1000698e:	d07e      	beq.n	10006a8e <HAL_RCCEx_PeriphCLKConfig+0x58a>
      RCC_PERIPHCLK_SAI3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI3CLKSOURCE(PeriphClkInit->Sai3ClockSelection));

    switch (PeriphClkInit->Sai3ClockSelection)
10006990:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006994:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006998:	681b      	ldr	r3, [r3, #0]
1000699a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
1000699e:	2b04      	cmp	r3, #4
100069a0:	d044      	beq.n	10006a2c <HAL_RCCEx_PeriphCLKConfig+0x528>
100069a2:	2b04      	cmp	r3, #4
100069a4:	d861      	bhi.n	10006a6a <HAL_RCCEx_PeriphCLKConfig+0x566>
100069a6:	2b00      	cmp	r3, #0
100069a8:	d002      	beq.n	100069b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
100069aa:	2b01      	cmp	r3, #1
100069ac:	d01f      	beq.n	100069ee <HAL_RCCEx_PeriphCLKConfig+0x4ea>
100069ae:	e05c      	b.n	10006a6a <HAL_RCCEx_PeriphCLKConfig+0x566>
    {
      case RCC_SAI3CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI3*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100069b0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100069b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100069b8:	681b      	ldr	r3, [r3, #0]
100069ba:	3380      	adds	r3, #128	; 0x80
100069bc:	4618      	mov	r0, r3
100069be:	f7ff fc49 	bl	10006254 <RCCEx_PLL4_Config>
100069c2:	4603      	mov	r3, r0
100069c4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100069c8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100069cc:	2b00      	cmp	r3, #0
100069ce:	d003      	beq.n	100069d8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        {
          return status;
100069d0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100069d4:	f001 bc20 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100069d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100069dc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100069e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100069e4:	f043 0320 	orr.w	r3, r3, #32
100069e8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100069ec:	e03d      	b.n	10006a6a <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100069ee:	f507 7312 	add.w	r3, r7, #584	; 0x248
100069f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100069f6:	681b      	ldr	r3, [r3, #0]
100069f8:	3344      	adds	r3, #68	; 0x44
100069fa:	4618      	mov	r0, r3
100069fc:	f7ff fac0 	bl	10005f80 <RCCEx_PLL3_Config>
10006a00:	4603      	mov	r3, r0
10006a02:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006a06:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006a0a:	2b00      	cmp	r3, #0
10006a0c:	d003      	beq.n	10006a16 <HAL_RCCEx_PeriphCLKConfig+0x512>
        {
          return status;
10006a0e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006a12:	f001 bc01 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006a16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006a1a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006a1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006a22:	f043 0320 	orr.w	r3, r3, #32
10006a26:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006a2a:	e01e      	b.n	10006a6a <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006a2c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006a30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006a34:	681b      	ldr	r3, [r3, #0]
10006a36:	3344      	adds	r3, #68	; 0x44
10006a38:	4618      	mov	r0, r3
10006a3a:	f7ff faa1 	bl	10005f80 <RCCEx_PLL3_Config>
10006a3e:	4603      	mov	r3, r0
10006a40:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006a44:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006a48:	2b00      	cmp	r3, #0
10006a4a:	d003      	beq.n	10006a54 <HAL_RCCEx_PeriphCLKConfig+0x550>
        {
          return status;
10006a4c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006a50:	f001 bbe2 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006a54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006a58:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006a5c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006a64:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006a68:	bf00      	nop
    }

    /* Set the source of SAI3 clock*/
    __HAL_RCC_SAI3_CONFIG(PeriphClkInit->Sai3ClockSelection);
10006a6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006a6e:	f8d3 38d0 	ldr.w	r3, [r3, #2256]	; 0x8d0
10006a72:	f023 0107 	bic.w	r1, r3, #7
10006a76:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006a7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006a7e:	681b      	ldr	r3, [r3, #0]
10006a80:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
10006a84:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006a88:	430b      	orrs	r3, r1
10006a8a:	f8c2 38d0 	str.w	r3, [r2, #2256]	; 0x8d0
  }

  /*---------------------------- SAI4 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4) ==
10006a8e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006a92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006a96:	681b      	ldr	r3, [r3, #0]
10006a98:	e9d3 2300 	ldrd	r2, r3, [r3]
10006a9c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
10006aa0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
10006aa4:	2300      	movs	r3, #0
10006aa6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
10006aaa:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
10006aae:	460b      	mov	r3, r1
10006ab0:	4313      	orrs	r3, r2
10006ab2:	d07e      	beq.n	10006bb2 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      RCC_PERIPHCLK_SAI4)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI4CLKSOURCE(PeriphClkInit->Sai4ClockSelection));

    switch (PeriphClkInit->Sai4ClockSelection)
10006ab4:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006ab8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006abc:	681b      	ldr	r3, [r3, #0]
10006abe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
10006ac2:	2b04      	cmp	r3, #4
10006ac4:	d044      	beq.n	10006b50 <HAL_RCCEx_PeriphCLKConfig+0x64c>
10006ac6:	2b04      	cmp	r3, #4
10006ac8:	d861      	bhi.n	10006b8e <HAL_RCCEx_PeriphCLKConfig+0x68a>
10006aca:	2b00      	cmp	r3, #0
10006acc:	d002      	beq.n	10006ad4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
10006ace:	2b01      	cmp	r3, #1
10006ad0:	d01f      	beq.n	10006b12 <HAL_RCCEx_PeriphCLKConfig+0x60e>
10006ad2:	e05c      	b.n	10006b8e <HAL_RCCEx_PeriphCLKConfig+0x68a>
    {
      case RCC_SAI4CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI4 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006ad4:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006ad8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006adc:	681b      	ldr	r3, [r3, #0]
10006ade:	3380      	adds	r3, #128	; 0x80
10006ae0:	4618      	mov	r0, r3
10006ae2:	f7ff fbb7 	bl	10006254 <RCCEx_PLL4_Config>
10006ae6:	4603      	mov	r3, r0
10006ae8:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006aec:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006af0:	2b00      	cmp	r3, #0
10006af2:	d003      	beq.n	10006afc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
        {
          return status;
10006af4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006af8:	f001 bb8e 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006afc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006b00:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006b04:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006b08:	f043 0320 	orr.w	r3, r3, #32
10006b0c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006b10:	e03d      	b.n	10006b8e <HAL_RCCEx_PeriphCLKConfig+0x68a>


      case RCC_SAI4CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006b12:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006b16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006b1a:	681b      	ldr	r3, [r3, #0]
10006b1c:	3344      	adds	r3, #68	; 0x44
10006b1e:	4618      	mov	r0, r3
10006b20:	f7ff fa2e 	bl	10005f80 <RCCEx_PLL3_Config>
10006b24:	4603      	mov	r3, r0
10006b26:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006b2a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006b2e:	2b00      	cmp	r3, #0
10006b30:	d003      	beq.n	10006b3a <HAL_RCCEx_PeriphCLKConfig+0x636>
        {
          return status;
10006b32:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006b36:	f001 bb6f 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_Q */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006b3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006b3e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006b42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006b46:	f043 0320 	orr.w	r3, r3, #32
10006b4a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006b4e:	e01e      	b.n	10006b8e <HAL_RCCEx_PeriphCLKConfig+0x68a>

      case RCC_SAI4CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006b50:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006b54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006b58:	681b      	ldr	r3, [r3, #0]
10006b5a:	3344      	adds	r3, #68	; 0x44
10006b5c:	4618      	mov	r0, r3
10006b5e:	f7ff fa0f 	bl	10005f80 <RCCEx_PLL3_Config>
10006b62:	4603      	mov	r3, r0
10006b64:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006b68:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006b6c:	2b00      	cmp	r3, #0
10006b6e:	d003      	beq.n	10006b78 <HAL_RCCEx_PeriphCLKConfig+0x674>
        {
          return status;
10006b70:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006b74:	f001 bb50 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_R */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006b78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006b7c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006b80:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006b88:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006b8c:	bf00      	nop
    }

    /* Set the source of SAI4 clock*/
    __HAL_RCC_SAI4_CONFIG(PeriphClkInit->Sai4ClockSelection);
10006b8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006b92:	f8d3 38d4 	ldr.w	r3, [r3, #2260]	; 0x8d4
10006b96:	f023 0107 	bic.w	r1, r3, #7
10006b9a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006b9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006ba2:	681b      	ldr	r3, [r3, #0]
10006ba4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
10006ba8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006bac:	430b      	orrs	r3, r1
10006bae:	f8c2 38d4 	str.w	r3, [r2, #2260]	; 0x8d4
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) ==
10006bb2:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006bb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006bba:	681b      	ldr	r3, [r3, #0]
10006bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
10006bc0:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
10006bc4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
10006bc8:	2300      	movs	r3, #0
10006bca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
10006bce:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
10006bd2:	460b      	mov	r3, r1
10006bd4:	4313      	orrs	r3, r2
10006bd6:	d07e      	beq.n	10006cd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      RCC_PERIPHCLK_SPI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
10006bd8:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006bdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006be0:	681b      	ldr	r3, [r3, #0]
10006be2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
10006be6:	2b04      	cmp	r3, #4
10006be8:	d044      	beq.n	10006c74 <HAL_RCCEx_PeriphCLKConfig+0x770>
10006bea:	2b04      	cmp	r3, #4
10006bec:	d861      	bhi.n	10006cb2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
10006bee:	2b00      	cmp	r3, #0
10006bf0:	d002      	beq.n	10006bf8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
10006bf2:	2b01      	cmp	r3, #1
10006bf4:	d01f      	beq.n	10006c36 <HAL_RCCEx_PeriphCLKConfig+0x732>
10006bf6:	e05c      	b.n	10006cb2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      case RCC_SPI1CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006bf8:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006bfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006c00:	681b      	ldr	r3, [r3, #0]
10006c02:	3380      	adds	r3, #128	; 0x80
10006c04:	4618      	mov	r0, r3
10006c06:	f7ff fb25 	bl	10006254 <RCCEx_PLL4_Config>
10006c0a:	4603      	mov	r3, r0
10006c0c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006c10:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006c14:	2b00      	cmp	r3, #0
10006c16:	d003      	beq.n	10006c20 <HAL_RCCEx_PeriphCLKConfig+0x71c>
        {
          return status;
10006c18:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006c1c:	f001 bafc 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006c20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006c24:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006c28:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006c2c:	f043 0310 	orr.w	r3, r3, #16
10006c30:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006c34:	e03d      	b.n	10006cb2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006c36:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006c3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006c3e:	681b      	ldr	r3, [r3, #0]
10006c40:	3344      	adds	r3, #68	; 0x44
10006c42:	4618      	mov	r0, r3
10006c44:	f7ff f99c 	bl	10005f80 <RCCEx_PLL3_Config>
10006c48:	4603      	mov	r3, r0
10006c4a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006c4e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006c52:	2b00      	cmp	r3, #0
10006c54:	d003      	beq.n	10006c5e <HAL_RCCEx_PeriphCLKConfig+0x75a>
        {
          return status;
10006c56:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006c5a:	f001 badd 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006c5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006c62:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006c66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006c6a:	f043 0320 	orr.w	r3, r3, #32
10006c6e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006c72:	e01e      	b.n	10006cb2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006c74:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006c78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006c7c:	681b      	ldr	r3, [r3, #0]
10006c7e:	3344      	adds	r3, #68	; 0x44
10006c80:	4618      	mov	r0, r3
10006c82:	f7ff f97d 	bl	10005f80 <RCCEx_PLL3_Config>
10006c86:	4603      	mov	r3, r0
10006c88:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006c8c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006c90:	2b00      	cmp	r3, #0
10006c92:	d003      	beq.n	10006c9c <HAL_RCCEx_PeriphCLKConfig+0x798>
        {
          return status;
10006c94:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006c98:	f001 babe 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006c9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006ca0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006ca4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006cac:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006cb0:	bf00      	nop

    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
10006cb2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006cb6:	f8d3 38d8 	ldr.w	r3, [r3, #2264]	; 0x8d8
10006cba:	f023 0107 	bic.w	r1, r3, #7
10006cbe:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006cc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006cc6:	681b      	ldr	r3, [r3, #0]
10006cc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
10006ccc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006cd0:	430b      	orrs	r3, r1
10006cd2:	f8c2 38d8 	str.w	r3, [r2, #2264]	; 0x8d8
  }

  /*---------------------------- SPI23 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI23) ==
10006cd6:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006cda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006cde:	681b      	ldr	r3, [r3, #0]
10006ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
10006ce4:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
10006ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
10006cec:	2300      	movs	r3, #0
10006cee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
10006cf2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
10006cf6:	460b      	mov	r3, r1
10006cf8:	4313      	orrs	r3, r2
10006cfa:	d07e      	beq.n	10006dfa <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      RCC_PERIPHCLK_SPI23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
10006cfc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006d00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006d04:	681b      	ldr	r3, [r3, #0]
10006d06:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
10006d0a:	2b04      	cmp	r3, #4
10006d0c:	d044      	beq.n	10006d98 <HAL_RCCEx_PeriphCLKConfig+0x894>
10006d0e:	2b04      	cmp	r3, #4
10006d10:	d861      	bhi.n	10006dd6 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
10006d12:	2b00      	cmp	r3, #0
10006d14:	d002      	beq.n	10006d1c <HAL_RCCEx_PeriphCLKConfig+0x818>
10006d16:	2b01      	cmp	r3, #1
10006d18:	d01f      	beq.n	10006d5a <HAL_RCCEx_PeriphCLKConfig+0x856>
10006d1a:	e05c      	b.n	10006dd6 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
    {
      case RCC_SPI23CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI23 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006d1c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006d20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006d24:	681b      	ldr	r3, [r3, #0]
10006d26:	3380      	adds	r3, #128	; 0x80
10006d28:	4618      	mov	r0, r3
10006d2a:	f7ff fa93 	bl	10006254 <RCCEx_PLL4_Config>
10006d2e:	4603      	mov	r3, r0
10006d30:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006d34:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006d38:	2b00      	cmp	r3, #0
10006d3a:	d003      	beq.n	10006d44 <HAL_RCCEx_PeriphCLKConfig+0x840>
        {
          return status;
10006d3c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006d40:	f001 ba6a 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006d44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006d48:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006d4c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006d50:	f043 0310 	orr.w	r3, r3, #16
10006d54:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006d58:	e03d      	b.n	10006dd6 <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006d5a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006d5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006d62:	681b      	ldr	r3, [r3, #0]
10006d64:	3344      	adds	r3, #68	; 0x44
10006d66:	4618      	mov	r0, r3
10006d68:	f7ff f90a 	bl	10005f80 <RCCEx_PLL3_Config>
10006d6c:	4603      	mov	r3, r0
10006d6e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006d72:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006d76:	2b00      	cmp	r3, #0
10006d78:	d003      	beq.n	10006d82 <HAL_RCCEx_PeriphCLKConfig+0x87e>
        {
          return status;
10006d7a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006d7e:	f001 ba4b 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006d82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006d86:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006d8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006d8e:	f043 0320 	orr.w	r3, r3, #32
10006d92:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006d96:	e01e      	b.n	10006dd6 <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006d98:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006d9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006da0:	681b      	ldr	r3, [r3, #0]
10006da2:	3344      	adds	r3, #68	; 0x44
10006da4:	4618      	mov	r0, r3
10006da6:	f7ff f8eb 	bl	10005f80 <RCCEx_PLL3_Config>
10006daa:	4603      	mov	r3, r0
10006dac:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006db0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006db4:	2b00      	cmp	r3, #0
10006db6:	d003      	beq.n	10006dc0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
        {
          return status;
10006db8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006dbc:	f001 ba2c 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006dc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006dc4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006dc8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006dd0:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006dd4:	bf00      	nop
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
10006dd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006dda:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	; 0x8dc
10006dde:	f023 0107 	bic.w	r1, r3, #7
10006de2:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006de6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006dea:	681b      	ldr	r3, [r3, #0]
10006dec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
10006df0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006df4:	430b      	orrs	r3, r1
10006df6:	f8c2 38dc 	str.w	r3, [r2, #2268]	; 0x8dc
  }

  /*---------------------------- SPI45 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) ==
10006dfa:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006dfe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006e02:	681b      	ldr	r3, [r3, #0]
10006e04:	e9d3 2300 	ldrd	r2, r3, [r3]
10006e08:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
10006e0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
10006e10:	2300      	movs	r3, #0
10006e12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
10006e16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
10006e1a:	460b      	mov	r3, r1
10006e1c:	4313      	orrs	r3, r2
10006e1e:	d038      	beq.n	10006e92 <HAL_RCCEx_PeriphCLKConfig+0x98e>
      RCC_PERIPHCLK_SPI45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    if (PeriphClkInit->Spi45ClockSelection == RCC_SPI45CLKSOURCE_PLL4)
10006e20:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006e24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006e28:	681b      	ldr	r3, [r3, #0]
10006e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
10006e2e:	2b01      	cmp	r3, #1
10006e30:	d11d      	bne.n	10006e6e <HAL_RCCEx_PeriphCLKConfig+0x96a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006e32:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006e36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006e3a:	681b      	ldr	r3, [r3, #0]
10006e3c:	3380      	adds	r3, #128	; 0x80
10006e3e:	4618      	mov	r0, r3
10006e40:	f7ff fa08 	bl	10006254 <RCCEx_PLL4_Config>
10006e44:	4603      	mov	r3, r0
10006e46:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10006e4a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006e4e:	2b00      	cmp	r3, #0
10006e50:	d003      	beq.n	10006e5a <HAL_RCCEx_PeriphCLKConfig+0x956>
      {
        return status;
10006e52:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006e56:	f001 b9df 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable SPI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006e5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006e5e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006e62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006e66:	f043 0320 	orr.w	r3, r3, #32
10006e6a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of SPI45 clock*/
    __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
10006e6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006e72:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
10006e76:	f023 0107 	bic.w	r1, r3, #7
10006e7a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006e7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006e82:	681b      	ldr	r3, [r3, #0]
10006e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
10006e88:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006e8c:	430b      	orrs	r3, r1
10006e8e:	f8c2 38e0 	str.w	r3, [r2, #2272]	; 0x8e0
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) ==
10006e92:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006e96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006e9a:	681b      	ldr	r3, [r3, #0]
10006e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
10006ea0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
10006ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
10006ea8:	2300      	movs	r3, #0
10006eaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
10006eae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
10006eb2:	460b      	mov	r3, r1
10006eb4:	4313      	orrs	r3, r2
10006eb6:	d05b      	beq.n	10006f70 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
      RCC_PERIPHCLK_SPI6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
10006eb8:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006ebc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006ec0:	681b      	ldr	r3, [r3, #0]
10006ec2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
10006ec6:	2b01      	cmp	r3, #1
10006ec8:	d002      	beq.n	10006ed0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
10006eca:	2b05      	cmp	r3, #5
10006ecc:	d01f      	beq.n	10006f0e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
10006ece:	e03d      	b.n	10006f4c <HAL_RCCEx_PeriphCLKConfig+0xa48>
    {
      case RCC_SPI6CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI6 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006ed0:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006ed4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006ed8:	681b      	ldr	r3, [r3, #0]
10006eda:	3380      	adds	r3, #128	; 0x80
10006edc:	4618      	mov	r0, r3
10006ede:	f7ff f9b9 	bl	10006254 <RCCEx_PLL4_Config>
10006ee2:	4603      	mov	r3, r0
10006ee4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006ee8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006eec:	2b00      	cmp	r3, #0
10006eee:	d003      	beq.n	10006ef8 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        {
          return status;
10006ef0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006ef4:	f001 b990 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006ef8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006efc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006f00:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006f04:	f043 0320 	orr.w	r3, r3, #32
10006f08:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006f0c:	e01e      	b.n	10006f4c <HAL_RCCEx_PeriphCLKConfig+0xa48>

      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is used as clock source for SPI6 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006f0e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006f12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006f16:	681b      	ldr	r3, [r3, #0]
10006f18:	3344      	adds	r3, #68	; 0x44
10006f1a:	4618      	mov	r0, r3
10006f1c:	f7ff f830 	bl	10005f80 <RCCEx_PLL3_Config>
10006f20:	4603      	mov	r3, r0
10006f22:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006f26:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006f2a:	2b00      	cmp	r3, #0
10006f2c:	d003      	beq.n	10006f36 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        {
          return status;
10006f2e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006f32:	f001 b971 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006f36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006f3a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006f3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006f42:	f043 0320 	orr.w	r3, r3, #32
10006f46:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006f4a:	bf00      	nop
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
10006f4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006f50:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10006f54:	f023 0107 	bic.w	r1, r3, #7
10006f58:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006f5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006f60:	681b      	ldr	r3, [r3, #0]
10006f62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
10006f66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006f6a:	430b      	orrs	r3, r1
10006f6c:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  /*---------------------------- USART6 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) ==
10006f70:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006f74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006f78:	681b      	ldr	r3, [r3, #0]
10006f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
10006f7e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
10006f82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
10006f86:	2300      	movs	r3, #0
10006f88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
10006f8c:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
10006f90:	460b      	mov	r3, r1
10006f92:	4313      	orrs	r3, r2
10006f94:	d038      	beq.n	10007008 <HAL_RCCEx_PeriphCLKConfig+0xb04>
      RCC_PERIPHCLK_USART6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_PLL4)
10006f96:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006f9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006f9e:	681b      	ldr	r3, [r3, #0]
10006fa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
10006fa4:	2b01      	cmp	r3, #1
10006fa6:	d11d      	bne.n	10006fe4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
    {
      /* PLL4 is used as clock source for USART6 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006fa8:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006fac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006fb0:	681b      	ldr	r3, [r3, #0]
10006fb2:	3380      	adds	r3, #128	; 0x80
10006fb4:	4618      	mov	r0, r3
10006fb6:	f7ff f94d 	bl	10006254 <RCCEx_PLL4_Config>
10006fba:	4603      	mov	r3, r0
10006fbc:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10006fc0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006fc4:	2b00      	cmp	r3, #0
10006fc6:	d003      	beq.n	10006fd0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
      {
        return status;
10006fc8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006fcc:	f001 b924 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006fd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006fd4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006fd8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006fdc:	f043 0320 	orr.w	r3, r3, #32
10006fe0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of USART6 clock*/
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
10006fe4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006fe8:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
10006fec:	f023 0107 	bic.w	r1, r3, #7
10006ff0:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006ff4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006ff8:	681b      	ldr	r3, [r3, #0]
10006ffa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
10006ffe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007002:	430b      	orrs	r3, r1
10007004:	f8c2 38e4 	str.w	r3, [r2, #2276]	; 0x8e4
  }

  /*---------------------------- UART24 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART24) ==
10007008:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000700c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007010:	681b      	ldr	r3, [r3, #0]
10007012:	e9d3 2300 	ldrd	r2, r3, [r3]
10007016:	f002 0302 	and.w	r3, r2, #2
1000701a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
1000701e:	2300      	movs	r3, #0
10007020:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
10007024:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
10007028:	460b      	mov	r3, r1
1000702a:	4313      	orrs	r3, r2
1000702c:	d038      	beq.n	100070a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      RCC_PERIPHCLK_UART24)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART24CLKSOURCE(PeriphClkInit->Uart24ClockSelection));

    if (PeriphClkInit->Uart24ClockSelection == RCC_UART24CLKSOURCE_PLL4)
1000702e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007032:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007036:	681b      	ldr	r3, [r3, #0]
10007038:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
1000703c:	2b01      	cmp	r3, #1
1000703e:	d11d      	bne.n	1000707c <HAL_RCCEx_PeriphCLKConfig+0xb78>
    {
      /* PLL4 is used as clock source for UART24 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007040:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007044:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007048:	681b      	ldr	r3, [r3, #0]
1000704a:	3380      	adds	r3, #128	; 0x80
1000704c:	4618      	mov	r0, r3
1000704e:	f7ff f901 	bl	10006254 <RCCEx_PLL4_Config>
10007052:	4603      	mov	r3, r0
10007054:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10007058:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000705c:	2b00      	cmp	r3, #0
1000705e:	d003      	beq.n	10007068 <HAL_RCCEx_PeriphCLKConfig+0xb64>
      {
        return status;
10007060:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007064:	f001 b8d8 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10007068:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000706c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007070:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007074:	f043 0320 	orr.w	r3, r3, #32
10007078:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART24 clock*/
    __HAL_RCC_UART24_CONFIG(PeriphClkInit->Uart24ClockSelection);
1000707c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007080:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
10007084:	f023 0107 	bic.w	r1, r3, #7
10007088:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000708c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007090:	681b      	ldr	r3, [r3, #0]
10007092:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
10007096:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000709a:	430b      	orrs	r3, r1
1000709c:	f8c2 38e8 	str.w	r3, [r2, #2280]	; 0x8e8
  }

  /*---------------------------- UART35 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART35) ==
100070a0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100070a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100070a8:	681b      	ldr	r3, [r3, #0]
100070aa:	e9d3 2300 	ldrd	r2, r3, [r3]
100070ae:	f002 0304 	and.w	r3, r2, #4
100070b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
100070b6:	2300      	movs	r3, #0
100070b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
100070bc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
100070c0:	460b      	mov	r3, r1
100070c2:	4313      	orrs	r3, r2
100070c4:	d038      	beq.n	10007138 <HAL_RCCEx_PeriphCLKConfig+0xc34>
      RCC_PERIPHCLK_UART35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART35CLKSOURCE(PeriphClkInit->Uart35ClockSelection));

    if (PeriphClkInit->Uart35ClockSelection == RCC_UART35CLKSOURCE_PLL4)
100070c6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100070ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100070ce:	681b      	ldr	r3, [r3, #0]
100070d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
100070d4:	2b01      	cmp	r3, #1
100070d6:	d11d      	bne.n	10007114 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      /* PLL4 is used as clock source for UART35 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100070d8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100070dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100070e0:	681b      	ldr	r3, [r3, #0]
100070e2:	3380      	adds	r3, #128	; 0x80
100070e4:	4618      	mov	r0, r3
100070e6:	f7ff f8b5 	bl	10006254 <RCCEx_PLL4_Config>
100070ea:	4603      	mov	r3, r0
100070ec:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
100070f0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100070f4:	2b00      	cmp	r3, #0
100070f6:	d003      	beq.n	10007100 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      {
        return status;
100070f8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100070fc:	f001 b88c 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10007100:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007104:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007108:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000710c:	f043 0320 	orr.w	r3, r3, #32
10007110:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART35 clock*/
    __HAL_RCC_UART35_CONFIG(PeriphClkInit->Uart35ClockSelection);
10007114:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007118:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
1000711c:	f023 0107 	bic.w	r1, r3, #7
10007120:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007124:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007128:	681b      	ldr	r3, [r3, #0]
1000712a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
1000712e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007132:	430b      	orrs	r3, r1
10007134:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
  }

  /*---------------------------- UAUART78 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART78) ==
10007138:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000713c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007140:	681b      	ldr	r3, [r3, #0]
10007142:	e9d3 2300 	ldrd	r2, r3, [r3]
10007146:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
1000714a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
1000714e:	2300      	movs	r3, #0
10007150:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
10007154:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
10007158:	460b      	mov	r3, r1
1000715a:	4313      	orrs	r3, r2
1000715c:	d038      	beq.n	100071d0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      RCC_PERIPHCLK_UART78)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART78CLKSOURCE(PeriphClkInit->Uart78ClockSelection));

    if (PeriphClkInit->Uart78ClockSelection == RCC_UART78CLKSOURCE_PLL4)
1000715e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007162:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007166:	681b      	ldr	r3, [r3, #0]
10007168:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
1000716c:	2b01      	cmp	r3, #1
1000716e:	d11d      	bne.n	100071ac <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* PLL4 is used as clock source for UART78 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007170:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007174:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007178:	681b      	ldr	r3, [r3, #0]
1000717a:	3380      	adds	r3, #128	; 0x80
1000717c:	4618      	mov	r0, r3
1000717e:	f7ff f869 	bl	10006254 <RCCEx_PLL4_Config>
10007182:	4603      	mov	r3, r0
10007184:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10007188:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000718c:	2b00      	cmp	r3, #0
1000718e:	d003      	beq.n	10007198 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        return status;
10007190:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007194:	f001 b840 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10007198:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000719c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100071a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100071a4:	f043 0320 	orr.w	r3, r3, #32
100071a8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART78 clock*/
    __HAL_RCC_UART78_CONFIG(PeriphClkInit->Uart78ClockSelection);
100071ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100071b0:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
100071b4:	f023 0107 	bic.w	r1, r3, #7
100071b8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100071bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100071c0:	681b      	ldr	r3, [r3, #0]
100071c2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
100071c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100071ca:	430b      	orrs	r3, r1
100071cc:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
  }

  /*---------------------------- USART1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) ==
100071d0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100071d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100071d8:	681b      	ldr	r3, [r3, #0]
100071da:	e9d3 2300 	ldrd	r2, r3, [r3]
100071de:	f002 0301 	and.w	r3, r2, #1
100071e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
100071e6:	2300      	movs	r3, #0
100071e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
100071ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
100071f0:	460b      	mov	r3, r1
100071f2:	4313      	orrs	r3, r2
100071f4:	d05b      	beq.n	100072ae <HAL_RCCEx_PeriphCLKConfig+0xdaa>
      RCC_PERIPHCLK_USART1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
100071f6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100071fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100071fe:	681b      	ldr	r3, [r3, #0]
10007200:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
10007204:	2b01      	cmp	r3, #1
10007206:	d002      	beq.n	1000720e <HAL_RCCEx_PeriphCLKConfig+0xd0a>
10007208:	2b04      	cmp	r3, #4
1000720a:	d01f      	beq.n	1000724c <HAL_RCCEx_PeriphCLKConfig+0xd48>
1000720c:	e03d      	b.n	1000728a <HAL_RCCEx_PeriphCLKConfig+0xd86>
    {
      case RCC_USART1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for USART1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000720e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007212:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007216:	681b      	ldr	r3, [r3, #0]
10007218:	3344      	adds	r3, #68	; 0x44
1000721a:	4618      	mov	r0, r3
1000721c:	f7fe feb0 	bl	10005f80 <RCCEx_PLL3_Config>
10007220:	4603      	mov	r3, r0
10007222:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007226:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000722a:	2b00      	cmp	r3, #0
1000722c:	d003      	beq.n	10007236 <HAL_RCCEx_PeriphCLKConfig+0xd32>
        {
          return status;
1000722e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007232:	f000 bff1 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable UART Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10007236:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000723a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000723e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007242:	f043 0320 	orr.w	r3, r3, #32
10007246:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000724a:	e01e      	b.n	1000728a <HAL_RCCEx_PeriphCLKConfig+0xd86>

      case RCC_USART1CLKSOURCE_PLL4: /* PLL4 is used as clock source for USART1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000724c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007250:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007254:	681b      	ldr	r3, [r3, #0]
10007256:	3380      	adds	r3, #128	; 0x80
10007258:	4618      	mov	r0, r3
1000725a:	f7fe fffb 	bl	10006254 <RCCEx_PLL4_Config>
1000725e:	4603      	mov	r3, r0
10007260:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007264:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007268:	2b00      	cmp	r3, #0
1000726a:	d003      	beq.n	10007274 <HAL_RCCEx_PeriphCLKConfig+0xd70>
        {
          return status;
1000726c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007270:	f000 bfd2 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable USART Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10007274:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007278:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000727c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007280:	f043 0320 	orr.w	r3, r3, #32
10007284:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10007288:	bf00      	nop
    }

    /* Set the source of USART1 clock*/
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
1000728a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000728e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10007292:	f023 0107 	bic.w	r1, r3, #7
10007296:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000729a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000729e:	681b      	ldr	r3, [r3, #0]
100072a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
100072a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100072a8:	430b      	orrs	r3, r1
100072aa:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  /*---------------------------- SDMMC12 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC12) ==
100072ae:	f507 7312 	add.w	r3, r7, #584	; 0x248
100072b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100072b6:	681b      	ldr	r3, [r3, #0]
100072b8:	e9d3 2300 	ldrd	r2, r3, [r3]
100072bc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
100072c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
100072c4:	2300      	movs	r3, #0
100072c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
100072ca:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
100072ce:	460b      	mov	r3, r1
100072d0:	4313      	orrs	r3, r2
100072d2:	d05b      	beq.n	1000738c <HAL_RCCEx_PeriphCLKConfig+0xe88>
      RCC_PERIPHCLK_SDMMC12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
100072d4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100072d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100072dc:	681b      	ldr	r3, [r3, #0]
100072de:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
100072e2:	2b01      	cmp	r3, #1
100072e4:	d002      	beq.n	100072ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
100072e6:	2b02      	cmp	r3, #2
100072e8:	d01f      	beq.n	1000732a <HAL_RCCEx_PeriphCLKConfig+0xe26>
100072ea:	e03d      	b.n	10007368 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      case RCC_SDMMC12CLKSOURCE_PLL3: /* PLL3 is used as clock source for SDMMC12 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100072ec:	f507 7312 	add.w	r3, r7, #584	; 0x248
100072f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100072f4:	681b      	ldr	r3, [r3, #0]
100072f6:	3344      	adds	r3, #68	; 0x44
100072f8:	4618      	mov	r0, r3
100072fa:	f7fe fe41 	bl	10005f80 <RCCEx_PLL3_Config>
100072fe:	4603      	mov	r3, r0
10007300:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007304:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007308:	2b00      	cmp	r3, #0
1000730a:	d003      	beq.n	10007314 <HAL_RCCEx_PeriphCLKConfig+0xe10>
        {
          return status;
1000730c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007310:	f000 bf82 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10007314:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007318:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000731c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10007324:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10007328:	e01e      	b.n	10007368 <HAL_RCCEx_PeriphCLKConfig+0xe64>

      case RCC_SDMMC12CLKSOURCE_PLL4: /* PLL4 is used as clock source for SDMMC12 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000732a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000732e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007332:	681b      	ldr	r3, [r3, #0]
10007334:	3380      	adds	r3, #128	; 0x80
10007336:	4618      	mov	r0, r3
10007338:	f7fe ff8c 	bl	10006254 <RCCEx_PLL4_Config>
1000733c:	4603      	mov	r3, r0
1000733e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007342:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007346:	2b00      	cmp	r3, #0
10007348:	d003      	beq.n	10007352 <HAL_RCCEx_PeriphCLKConfig+0xe4e>
        {
          return status;
1000734a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000734e:	f000 bf63 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10007352:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007356:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000735a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000735e:	f043 0310 	orr.w	r3, r3, #16
10007362:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10007366:	bf00      	nop
    }

    /* Set the source of SDMMC12 clock*/
    __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
10007368:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000736c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
10007370:	f023 0107 	bic.w	r1, r3, #7
10007374:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007378:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000737c:	681b      	ldr	r3, [r3, #0]
1000737e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
10007382:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007386:	430b      	orrs	r3, r1
10007388:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
  }

  /*---------------------------- SDMMC3 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC3) ==
1000738c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007390:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007394:	681b      	ldr	r3, [r3, #0]
10007396:	e9d3 2300 	ldrd	r2, r3, [r3]
1000739a:	2100      	movs	r1, #0
1000739c:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
100073a0:	f003 0301 	and.w	r3, r3, #1
100073a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
100073a8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
100073ac:	460b      	mov	r3, r1
100073ae:	4313      	orrs	r3, r2
100073b0:	d05b      	beq.n	1000746a <HAL_RCCEx_PeriphCLKConfig+0xf66>
      RCC_PERIPHCLK_SDMMC3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC3CLKSOURCE(PeriphClkInit->Sdmmc3ClockSelection));

    switch (PeriphClkInit->Sdmmc3ClockSelection)
100073b2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100073b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100073ba:	681b      	ldr	r3, [r3, #0]
100073bc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
100073c0:	2b01      	cmp	r3, #1
100073c2:	d002      	beq.n	100073ca <HAL_RCCEx_PeriphCLKConfig+0xec6>
100073c4:	2b02      	cmp	r3, #2
100073c6:	d01f      	beq.n	10007408 <HAL_RCCEx_PeriphCLKConfig+0xf04>
100073c8:	e03d      	b.n	10007446 <HAL_RCCEx_PeriphCLKConfig+0xf42>
    {
      case RCC_SDMMC3CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SDMMC3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100073ca:	f507 7312 	add.w	r3, r7, #584	; 0x248
100073ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100073d2:	681b      	ldr	r3, [r3, #0]
100073d4:	3344      	adds	r3, #68	; 0x44
100073d6:	4618      	mov	r0, r3
100073d8:	f7fe fdd2 	bl	10005f80 <RCCEx_PLL3_Config>
100073dc:	4603      	mov	r3, r0
100073de:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100073e2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100073e6:	2b00      	cmp	r3, #0
100073e8:	d003      	beq.n	100073f2 <HAL_RCCEx_PeriphCLKConfig+0xeee>
        {
          return status;
100073ea:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100073ee:	f000 bf13 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100073f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100073f6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100073fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100073fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10007402:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10007406:	e01e      	b.n	10007446 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_SDMMC3CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SDMMC3 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007408:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000740c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007410:	681b      	ldr	r3, [r3, #0]
10007412:	3380      	adds	r3, #128	; 0x80
10007414:	4618      	mov	r0, r3
10007416:	f7fe ff1d 	bl	10006254 <RCCEx_PLL4_Config>
1000741a:	4603      	mov	r3, r0
1000741c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007420:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007424:	2b00      	cmp	r3, #0
10007426:	d003      	beq.n	10007430 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
        {
          return status;
10007428:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000742c:	f000 bef4 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10007430:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007434:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007438:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000743c:	f043 0310 	orr.w	r3, r3, #16
10007440:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10007444:	bf00      	nop
    }

    /* Set the source of SDMMC3 clock*/
    __HAL_RCC_SDMMC3_CONFIG(PeriphClkInit->Sdmmc3ClockSelection);
10007446:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000744a:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
1000744e:	f023 0107 	bic.w	r1, r3, #7
10007452:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007456:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000745a:	681b      	ldr	r3, [r3, #0]
1000745c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
10007460:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007464:	430b      	orrs	r3, r1
10007466:	f8c2 38f8 	str.w	r3, [r2, #2296]	; 0x8f8
  }

  /*---------------------------- ETH configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ETH) ==
1000746a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000746e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007472:	681b      	ldr	r3, [r3, #0]
10007474:	e9d3 2300 	ldrd	r2, r3, [r3]
10007478:	2100      	movs	r1, #0
1000747a:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
1000747e:	f003 0302 	and.w	r3, r3, #2
10007482:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
10007486:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
1000748a:	460b      	mov	r3, r1
1000748c:	4313      	orrs	r3, r2
1000748e:	d05b      	beq.n	10007548 <HAL_RCCEx_PeriphCLKConfig+0x1044>
      RCC_PERIPHCLK_ETH)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETHCLKSOURCE(PeriphClkInit->EthClockSelection));

    switch (PeriphClkInit->EthClockSelection)
10007490:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007494:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007498:	681b      	ldr	r3, [r3, #0]
1000749a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
1000749e:	2b00      	cmp	r3, #0
100074a0:	d002      	beq.n	100074a8 <HAL_RCCEx_PeriphCLKConfig+0xfa4>
100074a2:	2b01      	cmp	r3, #1
100074a4:	d01f      	beq.n	100074e6 <HAL_RCCEx_PeriphCLKConfig+0xfe2>
100074a6:	e03d      	b.n	10007524 <HAL_RCCEx_PeriphCLKConfig+0x1020>
    {
      case RCC_ETHCLKSOURCE_PLL4:     /* PLL4 is used as clock source for ETH */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100074a8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100074ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100074b0:	681b      	ldr	r3, [r3, #0]
100074b2:	3380      	adds	r3, #128	; 0x80
100074b4:	4618      	mov	r0, r3
100074b6:	f7fe fecd 	bl	10006254 <RCCEx_PLL4_Config>
100074ba:	4603      	mov	r3, r0
100074bc:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100074c0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100074c4:	2b00      	cmp	r3, #0
100074c6:	d003      	beq.n	100074d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
        {
          return status;
100074c8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100074cc:	f000 bea4 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL2 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100074d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100074d4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100074d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100074dc:	f043 0310 	orr.w	r3, r3, #16
100074e0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100074e4:	e01e      	b.n	10007524 <HAL_RCCEx_PeriphCLKConfig+0x1020>

      case RCC_ETHCLKSOURCE_PLL3:     /* PLL3 is used as clock source for ETH */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100074e6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100074ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100074ee:	681b      	ldr	r3, [r3, #0]
100074f0:	3344      	adds	r3, #68	; 0x44
100074f2:	4618      	mov	r0, r3
100074f4:	f7fe fd44 	bl	10005f80 <RCCEx_PLL3_Config>
100074f8:	4603      	mov	r3, r0
100074fa:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100074fe:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007502:	2b00      	cmp	r3, #0
10007504:	d003      	beq.n	1000750e <HAL_RCCEx_PeriphCLKConfig+0x100a>
        {
          return status;
10007506:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000750a:	f000 be85 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000750e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007512:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10007516:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000751a:	f043 0320 	orr.w	r3, r3, #32
1000751e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10007522:	bf00      	nop
    }

    /* Set the source of ETH clock*/
    __HAL_RCC_ETH_CONFIG(PeriphClkInit->EthClockSelection);
10007524:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007528:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
1000752c:	f023 0103 	bic.w	r1, r3, #3
10007530:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007534:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007538:	681b      	ldr	r3, [r3, #0]
1000753a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
1000753e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007542:	430b      	orrs	r3, r1
10007544:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
  }

  /*---------------------------- QSPI configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) ==
10007548:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000754c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007550:	681b      	ldr	r3, [r3, #0]
10007552:	e9d3 2300 	ldrd	r2, r3, [r3]
10007556:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
1000755a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
1000755e:	2300      	movs	r3, #0
10007560:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
10007564:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
10007568:	460b      	mov	r3, r1
1000756a:	4313      	orrs	r3, r2
1000756c:	d05b      	beq.n	10007626 <HAL_RCCEx_PeriphCLKConfig+0x1122>
      RCC_PERIPHCLK_QSPI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    switch (PeriphClkInit->QspiClockSelection)
1000756e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007572:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007576:	681b      	ldr	r3, [r3, #0]
10007578:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
1000757c:	2b01      	cmp	r3, #1
1000757e:	d002      	beq.n	10007586 <HAL_RCCEx_PeriphCLKConfig+0x1082>
10007580:	2b02      	cmp	r3, #2
10007582:	d01f      	beq.n	100075c4 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
10007584:	e03d      	b.n	10007602 <HAL_RCCEx_PeriphCLKConfig+0x10fe>
    {
      case RCC_QSPICLKSOURCE_PLL3:   /* PLL3 is used as clock source for QSPI */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10007586:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000758a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000758e:	681b      	ldr	r3, [r3, #0]
10007590:	3344      	adds	r3, #68	; 0x44
10007592:	4618      	mov	r0, r3
10007594:	f7fe fcf4 	bl	10005f80 <RCCEx_PLL3_Config>
10007598:	4603      	mov	r3, r0
1000759a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000759e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100075a2:	2b00      	cmp	r3, #0
100075a4:	d003      	beq.n	100075ae <HAL_RCCEx_PeriphCLKConfig+0x10aa>
        {
          return status;
100075a6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100075aa:	f000 be35 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100075ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100075b2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100075b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100075ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100075be:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100075c2:	e01e      	b.n	10007602 <HAL_RCCEx_PeriphCLKConfig+0x10fe>

      case RCC_QSPICLKSOURCE_PLL4:   /* PLL4 is used as clock source for QSPI */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100075c4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100075c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100075cc:	681b      	ldr	r3, [r3, #0]
100075ce:	3380      	adds	r3, #128	; 0x80
100075d0:	4618      	mov	r0, r3
100075d2:	f7fe fe3f 	bl	10006254 <RCCEx_PLL4_Config>
100075d6:	4603      	mov	r3, r0
100075d8:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100075dc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100075e0:	2b00      	cmp	r3, #0
100075e2:	d003      	beq.n	100075ec <HAL_RCCEx_PeriphCLKConfig+0x10e8>
        {
          return status;
100075e4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100075e8:	f000 be16 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100075ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100075f0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100075f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100075f8:	f043 0310 	orr.w	r3, r3, #16
100075fc:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10007600:	bf00      	nop
    }

    /* Set the source of QSPI clock*/
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
10007602:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007606:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
1000760a:	f023 0103 	bic.w	r1, r3, #3
1000760e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007612:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007616:	681b      	ldr	r3, [r3, #0]
10007618:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
1000761c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007620:	430b      	orrs	r3, r1
10007622:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
  }

  /*---------------------------- FMC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) ==
10007626:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000762a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000762e:	681b      	ldr	r3, [r3, #0]
10007630:	e9d3 2300 	ldrd	r2, r3, [r3]
10007634:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
10007638:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
1000763c:	2300      	movs	r3, #0
1000763e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
10007642:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
10007646:	460b      	mov	r3, r1
10007648:	4313      	orrs	r3, r2
1000764a:	d05b      	beq.n	10007704 <HAL_RCCEx_PeriphCLKConfig+0x1200>
      RCC_PERIPHCLK_FMC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
1000764c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007650:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007654:	681b      	ldr	r3, [r3, #0]
10007656:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
1000765a:	2b01      	cmp	r3, #1
1000765c:	d002      	beq.n	10007664 <HAL_RCCEx_PeriphCLKConfig+0x1160>
1000765e:	2b02      	cmp	r3, #2
10007660:	d01f      	beq.n	100076a2 <HAL_RCCEx_PeriphCLKConfig+0x119e>
10007662:	e03d      	b.n	100076e0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
    {
      case RCC_FMCCLKSOURCE_PLL3: /* PLL3 is used as clock source for FMC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10007664:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007668:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000766c:	681b      	ldr	r3, [r3, #0]
1000766e:	3344      	adds	r3, #68	; 0x44
10007670:	4618      	mov	r0, r3
10007672:	f7fe fc85 	bl	10005f80 <RCCEx_PLL3_Config>
10007676:	4603      	mov	r3, r0
10007678:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000767c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007680:	2b00      	cmp	r3, #0
10007682:	d003      	beq.n	1000768c <HAL_RCCEx_PeriphCLKConfig+0x1188>
        {
          return status;
10007684:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007688:	f000 bdc6 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
1000768c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007690:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10007694:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000769c:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100076a0:	e01e      	b.n	100076e0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>

      case RCC_FMCCLKSOURCE_PLL4: /* PLL4 is used as clock source for FMC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100076a2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100076a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100076aa:	681b      	ldr	r3, [r3, #0]
100076ac:	3380      	adds	r3, #128	; 0x80
100076ae:	4618      	mov	r0, r3
100076b0:	f7fe fdd0 	bl	10006254 <RCCEx_PLL4_Config>
100076b4:	4603      	mov	r3, r0
100076b6:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100076ba:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100076be:	2b00      	cmp	r3, #0
100076c0:	d003      	beq.n	100076ca <HAL_RCCEx_PeriphCLKConfig+0x11c6>
        {
          return status;
100076c2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100076c6:	f000 bda7 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100076ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100076ce:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100076d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100076d6:	f043 0310 	orr.w	r3, r3, #16
100076da:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100076de:	bf00      	nop
    }

    /* Set the source of FMC clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
100076e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100076e4:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
100076e8:	f023 0103 	bic.w	r1, r3, #3
100076ec:	f507 7312 	add.w	r3, r7, #584	; 0x248
100076f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100076f4:	681b      	ldr	r3, [r3, #0]
100076f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
100076fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100076fe:	430b      	orrs	r3, r1
10007700:	f8c2 3904 	str.w	r3, [r2, #2308]	; 0x904
  }

#if defined(FDCAN1)
  /*---------------------------- FDCAN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) ==
10007704:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007708:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000770c:	681b      	ldr	r3, [r3, #0]
1000770e:	e9d3 2300 	ldrd	r2, r3, [r3]
10007712:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
10007716:	67bb      	str	r3, [r7, #120]	; 0x78
10007718:	2300      	movs	r3, #0
1000771a:	67fb      	str	r3, [r7, #124]	; 0x7c
1000771c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
10007720:	460b      	mov	r3, r1
10007722:	4313      	orrs	r3, r2
10007724:	d07e      	beq.n	10007824 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      RCC_PERIPHCLK_FDCAN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
10007726:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000772a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000772e:	681b      	ldr	r3, [r3, #0]
10007730:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
10007734:	2b03      	cmp	r3, #3
10007736:	d044      	beq.n	100077c2 <HAL_RCCEx_PeriphCLKConfig+0x12be>
10007738:	2b03      	cmp	r3, #3
1000773a:	d861      	bhi.n	10007800 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
1000773c:	2b01      	cmp	r3, #1
1000773e:	d002      	beq.n	10007746 <HAL_RCCEx_PeriphCLKConfig+0x1242>
10007740:	2b02      	cmp	r3, #2
10007742:	d01f      	beq.n	10007784 <HAL_RCCEx_PeriphCLKConfig+0x1280>
10007744:	e05c      	b.n	10007800 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
    {
      case RCC_FDCANCLKSOURCE_PLL3: /* PLL3 is used as clock source for FDCAN */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10007746:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000774a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000774e:	681b      	ldr	r3, [r3, #0]
10007750:	3344      	adds	r3, #68	; 0x44
10007752:	4618      	mov	r0, r3
10007754:	f7fe fc14 	bl	10005f80 <RCCEx_PLL3_Config>
10007758:	4603      	mov	r3, r0
1000775a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000775e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007762:	2b00      	cmp	r3, #0
10007764:	d003      	beq.n	1000776e <HAL_RCCEx_PeriphCLKConfig+0x126a>
        {
          return status;
10007766:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000776a:	f000 bd55 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000776e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007772:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10007776:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000777a:	f043 0320 	orr.w	r3, r3, #32
1000777e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10007782:	e03d      	b.n	10007800 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_Q: /* PLL4_Q is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007784:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007788:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000778c:	681b      	ldr	r3, [r3, #0]
1000778e:	3380      	adds	r3, #128	; 0x80
10007790:	4618      	mov	r0, r3
10007792:	f7fe fd5f 	bl	10006254 <RCCEx_PLL4_Config>
10007796:	4603      	mov	r3, r0
10007798:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000779c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100077a0:	2b00      	cmp	r3, #0
100077a2:	d003      	beq.n	100077ac <HAL_RCCEx_PeriphCLKConfig+0x12a8>
        {
          return status;
100077a4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100077a8:	f000 bd36 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100077ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100077b0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100077b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100077b8:	f043 0320 	orr.w	r3, r3, #32
100077bc:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100077c0:	e01e      	b.n	10007800 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_R: /* PLL4_R is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100077c2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100077c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100077ca:	681b      	ldr	r3, [r3, #0]
100077cc:	3380      	adds	r3, #128	; 0x80
100077ce:	4618      	mov	r0, r3
100077d0:	f7fe fd40 	bl	10006254 <RCCEx_PLL4_Config>
100077d4:	4603      	mov	r3, r0
100077d6:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100077da:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100077de:	2b00      	cmp	r3, #0
100077e0:	d003      	beq.n	100077ea <HAL_RCCEx_PeriphCLKConfig+0x12e6>
        {
          return status;
100077e2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100077e6:	f000 bd17 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100077ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100077ee:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100077f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100077f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100077fa:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100077fe:	bf00      	nop
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
10007800:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007804:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
10007808:	f023 0103 	bic.w	r1, r3, #3
1000780c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007810:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007814:	681b      	ldr	r3, [r3, #0]
10007816:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
1000781a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000781e:	430b      	orrs	r3, r1
10007820:	f8c2 390c 	str.w	r3, [r2, #2316]	; 0x90c
  }
#endif /*FDCAN1*/

  /*---------------------------- SPDIFRX configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) ==
10007824:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007828:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000782c:	681b      	ldr	r3, [r3, #0]
1000782e:	e9d3 2300 	ldrd	r2, r3, [r3]
10007832:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
10007836:	673b      	str	r3, [r7, #112]	; 0x70
10007838:	2300      	movs	r3, #0
1000783a:	677b      	str	r3, [r7, #116]	; 0x74
1000783c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
10007840:	460b      	mov	r3, r1
10007842:	4313      	orrs	r3, r2
10007844:	d05b      	beq.n	100078fe <HAL_RCCEx_PeriphCLKConfig+0x13fa>
      RCC_PERIPHCLK_SPDIFRX)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
10007846:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000784a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000784e:	681b      	ldr	r3, [r3, #0]
10007850:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
10007854:	2b00      	cmp	r3, #0
10007856:	d002      	beq.n	1000785e <HAL_RCCEx_PeriphCLKConfig+0x135a>
10007858:	2b01      	cmp	r3, #1
1000785a:	d01f      	beq.n	1000789c <HAL_RCCEx_PeriphCLKConfig+0x1398>
1000785c:	e03d      	b.n	100078da <HAL_RCCEx_PeriphCLKConfig+0x13d6>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL4: /* PLL4 is used as clock source for SPDIF */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000785e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007862:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007866:	681b      	ldr	r3, [r3, #0]
10007868:	3380      	adds	r3, #128	; 0x80
1000786a:	4618      	mov	r0, r3
1000786c:	f7fe fcf2 	bl	10006254 <RCCEx_PLL4_Config>
10007870:	4603      	mov	r3, r0
10007872:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007876:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000787a:	2b00      	cmp	r3, #0
1000787c:	d003      	beq.n	10007886 <HAL_RCCEx_PeriphCLKConfig+0x1382>
        {
          return status;
1000787e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007882:	f000 bcc9 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10007886:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000788a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000788e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007892:	f043 0310 	orr.w	r3, r3, #16
10007896:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
1000789a:	e01e      	b.n	100078da <HAL_RCCEx_PeriphCLKConfig+0x13d6>

      case RCC_SPDIFRXCLKSOURCE_PLL3: /* PLL3 is used as clock source for SPDIF */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000789c:	f507 7312 	add.w	r3, r7, #584	; 0x248
100078a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100078a4:	681b      	ldr	r3, [r3, #0]
100078a6:	3344      	adds	r3, #68	; 0x44
100078a8:	4618      	mov	r0, r3
100078aa:	f7fe fb69 	bl	10005f80 <RCCEx_PLL3_Config>
100078ae:	4603      	mov	r3, r0
100078b0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100078b4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100078b8:	2b00      	cmp	r3, #0
100078ba:	d003      	beq.n	100078c4 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
        {
          return status;
100078bc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100078c0:	f000 bcaa 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100078c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100078c8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100078cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100078d0:	f043 0320 	orr.w	r3, r3, #32
100078d4:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100078d8:	bf00      	nop
    }

    /* Set the source of SPDIF clock*/
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
100078da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100078de:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
100078e2:	f023 0103 	bic.w	r1, r3, #3
100078e6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100078ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100078ee:	681b      	ldr	r3, [r3, #0]
100078f0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
100078f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100078f8:	430b      	orrs	r3, r1
100078fa:	f8c2 3914 	str.w	r3, [r2, #2324]	; 0x914
  }

  /*---------------------------- CEC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) ==
100078fe:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007902:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007906:	681b      	ldr	r3, [r3, #0]
10007908:	e9d3 2300 	ldrd	r2, r3, [r3]
1000790c:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
10007910:	66bb      	str	r3, [r7, #104]	; 0x68
10007912:	2300      	movs	r3, #0
10007914:	66fb      	str	r3, [r7, #108]	; 0x6c
10007916:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
1000791a:	460b      	mov	r3, r1
1000791c:	4313      	orrs	r3, r2
1000791e:	d011      	beq.n	10007944 <HAL_RCCEx_PeriphCLKConfig+0x1440>
      RCC_PERIPHCLK_CEC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
10007920:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007924:	f8d3 3918 	ldr.w	r3, [r3, #2328]	; 0x918
10007928:	f023 0103 	bic.w	r1, r3, #3
1000792c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007930:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007934:	681b      	ldr	r3, [r3, #0]
10007936:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
1000793a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000793e:	430b      	orrs	r3, r1
10007940:	f8c2 3918 	str.w	r3, [r2, #2328]	; 0x918
  }

  /*---------------------------- USBPHY configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) ==
10007944:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007948:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000794c:	681b      	ldr	r3, [r3, #0]
1000794e:	e9d3 2300 	ldrd	r2, r3, [r3]
10007952:	f402 7300 	and.w	r3, r2, #512	; 0x200
10007956:	663b      	str	r3, [r7, #96]	; 0x60
10007958:	2300      	movs	r3, #0
1000795a:	667b      	str	r3, [r7, #100]	; 0x64
1000795c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
10007960:	460b      	mov	r3, r1
10007962:	4313      	orrs	r3, r2
10007964:	d038      	beq.n	100079d8 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
      RCC_PERIPHCLK_USBPHY)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(PeriphClkInit->UsbphyClockSelection));

    if (PeriphClkInit->UsbphyClockSelection == RCC_USBPHYCLKSOURCE_PLL4)
10007966:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000796a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000796e:	681b      	ldr	r3, [r3, #0]
10007970:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
10007974:	2b01      	cmp	r3, #1
10007976:	d11d      	bne.n	100079b4 <HAL_RCCEx_PeriphCLKConfig+0x14b0>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007978:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000797c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007980:	681b      	ldr	r3, [r3, #0]
10007982:	3380      	adds	r3, #128	; 0x80
10007984:	4618      	mov	r0, r3
10007986:	f7fe fc65 	bl	10006254 <RCCEx_PLL4_Config>
1000798a:	4603      	mov	r3, r0
1000798c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10007990:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007994:	2b00      	cmp	r3, #0
10007996:	d003      	beq.n	100079a0 <HAL_RCCEx_PeriphCLKConfig+0x149c>
      {
        return status;
10007998:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000799c:	f000 bc3c 	b.w	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB PHY Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100079a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100079a4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100079a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100079ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100079b0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_USBPHY_CONFIG(PeriphClkInit->UsbphyClockSelection);
100079b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100079b8:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
100079bc:	f023 0103 	bic.w	r1, r3, #3
100079c0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100079c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100079c8:	681b      	ldr	r3, [r3, #0]
100079ca:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
100079ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100079d2:	430b      	orrs	r3, r1
100079d4:	f8c2 391c 	str.w	r3, [r2, #2332]	; 0x91c
  }

  /*---------------------------- USBO configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBO) ==
100079d8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100079dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100079e0:	681b      	ldr	r3, [r3, #0]
100079e2:	e9d3 2300 	ldrd	r2, r3, [r3]
100079e6:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
100079ea:	65bb      	str	r3, [r7, #88]	; 0x58
100079ec:	2300      	movs	r3, #0
100079ee:	65fb      	str	r3, [r7, #92]	; 0x5c
100079f0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
100079f4:	460b      	mov	r3, r1
100079f6:	4313      	orrs	r3, r2
100079f8:	d037      	beq.n	10007a6a <HAL_RCCEx_PeriphCLKConfig+0x1566>
      RCC_PERIPHCLK_USBO)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOCLKSOURCE(PeriphClkInit->UsboClockSelection));

    if (PeriphClkInit->UsboClockSelection == RCC_USBOCLKSOURCE_PLL4)
100079fa:	f507 7312 	add.w	r3, r7, #584	; 0x248
100079fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007a02:	681b      	ldr	r3, [r3, #0]
10007a04:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
10007a08:	2b00      	cmp	r3, #0
10007a0a:	d11c      	bne.n	10007a46 <HAL_RCCEx_PeriphCLKConfig+0x1542>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007a0c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007a10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007a14:	681b      	ldr	r3, [r3, #0]
10007a16:	3380      	adds	r3, #128	; 0x80
10007a18:	4618      	mov	r0, r3
10007a1a:	f7fe fc1b 	bl	10006254 <RCCEx_PLL4_Config>
10007a1e:	4603      	mov	r3, r0
10007a20:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10007a24:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007a28:	2b00      	cmp	r3, #0
10007a2a:	d002      	beq.n	10007a32 <HAL_RCCEx_PeriphCLKConfig+0x152e>
      {
        return status;
10007a2c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007a30:	e3f2      	b.n	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB OTG Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10007a32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007a36:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007a3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10007a42:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_USBO_CONFIG(PeriphClkInit->UsboClockSelection);
10007a46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007a4a:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
10007a4e:	f023 0110 	bic.w	r1, r3, #16
10007a52:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007a56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007a5a:	681b      	ldr	r3, [r3, #0]
10007a5c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
10007a60:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007a64:	430b      	orrs	r3, r1
10007a66:	f8c2 391c 	str.w	r3, [r2, #2332]	; 0x91c
  }

  /*---------------------------- RNG1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG1) ==
10007a6a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007a6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007a72:	681b      	ldr	r3, [r3, #0]
10007a74:	e9d3 2300 	ldrd	r2, r3, [r3]
10007a78:	2100      	movs	r1, #0
10007a7a:	6539      	str	r1, [r7, #80]	; 0x50
10007a7c:	f003 0304 	and.w	r3, r3, #4
10007a80:	657b      	str	r3, [r7, #84]	; 0x54
10007a82:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
10007a86:	460b      	mov	r3, r1
10007a88:	4313      	orrs	r3, r2
10007a8a:	d037      	beq.n	10007afc <HAL_RCCEx_PeriphCLKConfig+0x15f8>
      RCC_PERIPHCLK_RNG1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG1CLKSOURCE(PeriphClkInit->Rng1ClockSelection));

    if (PeriphClkInit->Rng1ClockSelection == RCC_RNG1CLKSOURCE_PLL4)
10007a8c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007a90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007a94:	681b      	ldr	r3, [r3, #0]
10007a96:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
10007a9a:	2b01      	cmp	r3, #1
10007a9c:	d11c      	bne.n	10007ad8 <HAL_RCCEx_PeriphCLKConfig+0x15d4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007a9e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007aa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007aa6:	681b      	ldr	r3, [r3, #0]
10007aa8:	3380      	adds	r3, #128	; 0x80
10007aaa:	4618      	mov	r0, r3
10007aac:	f7fe fbd2 	bl	10006254 <RCCEx_PLL4_Config>
10007ab0:	4603      	mov	r3, r0
10007ab2:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10007ab6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007aba:	2b00      	cmp	r3, #0
10007abc:	d002      	beq.n	10007ac4 <HAL_RCCEx_PeriphCLKConfig+0x15c0>
      {
        return status;
10007abe:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007ac2:	e3a9      	b.n	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG1 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10007ac4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007ac8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007acc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10007ad4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of RNG1 clock*/
    __HAL_RCC_RNG1_CONFIG(PeriphClkInit->Rng1ClockSelection);
10007ad8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007adc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
10007ae0:	f023 0103 	bic.w	r1, r3, #3
10007ae4:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007ae8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007aec:	681b      	ldr	r3, [r3, #0]
10007aee:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
10007af2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007af6:	430b      	orrs	r3, r1
10007af8:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
  }

  /*---------------------------- RNG2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG2) ==
10007afc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007b00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007b04:	681b      	ldr	r3, [r3, #0]
10007b06:	e9d3 2300 	ldrd	r2, r3, [r3]
10007b0a:	2100      	movs	r1, #0
10007b0c:	64b9      	str	r1, [r7, #72]	; 0x48
10007b0e:	f003 0308 	and.w	r3, r3, #8
10007b12:	64fb      	str	r3, [r7, #76]	; 0x4c
10007b14:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
10007b18:	460b      	mov	r3, r1
10007b1a:	4313      	orrs	r3, r2
10007b1c:	d037      	beq.n	10007b8e <HAL_RCCEx_PeriphCLKConfig+0x168a>
      RCC_PERIPHCLK_RNG2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG2CLKSOURCE(PeriphClkInit->Rng2ClockSelection));

    if (PeriphClkInit->Rng2ClockSelection == RCC_RNG2CLKSOURCE_PLL4)
10007b1e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007b22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007b26:	681b      	ldr	r3, [r3, #0]
10007b28:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
10007b2c:	2b01      	cmp	r3, #1
10007b2e:	d11c      	bne.n	10007b6a <HAL_RCCEx_PeriphCLKConfig+0x1666>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007b30:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007b34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007b38:	681b      	ldr	r3, [r3, #0]
10007b3a:	3380      	adds	r3, #128	; 0x80
10007b3c:	4618      	mov	r0, r3
10007b3e:	f7fe fb89 	bl	10006254 <RCCEx_PLL4_Config>
10007b42:	4603      	mov	r3, r0
10007b44:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10007b48:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007b4c:	2b00      	cmp	r3, #0
10007b4e:	d002      	beq.n	10007b56 <HAL_RCCEx_PeriphCLKConfig+0x1652>
      {
        return status;
10007b50:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007b54:	e360      	b.n	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG2 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10007b56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007b5a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007b5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10007b66:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of RNG2 clock*/
    __HAL_RCC_RNG2_CONFIG(PeriphClkInit->Rng2ClockSelection);
10007b6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007b6e:	f8d3 3920 	ldr.w	r3, [r3, #2336]	; 0x920
10007b72:	f023 0103 	bic.w	r1, r3, #3
10007b76:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007b7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007b7e:	681b      	ldr	r3, [r3, #0]
10007b80:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
10007b84:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007b88:	430b      	orrs	r3, r1
10007b8a:	f8c2 3920 	str.w	r3, [r2, #2336]	; 0x920
  }

  /*---------------------------- STGEN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_STGEN) ==
10007b8e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007b92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007b96:	681b      	ldr	r3, [r3, #0]
10007b98:	e9d3 2300 	ldrd	r2, r3, [r3]
10007b9c:	2100      	movs	r1, #0
10007b9e:	6439      	str	r1, [r7, #64]	; 0x40
10007ba0:	f003 0310 	and.w	r3, r3, #16
10007ba4:	647b      	str	r3, [r7, #68]	; 0x44
10007ba6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
10007baa:	460b      	mov	r3, r1
10007bac:	4313      	orrs	r3, r2
10007bae:	d011      	beq.n	10007bd4 <HAL_RCCEx_PeriphCLKConfig+0x16d0>
      RCC_PERIPHCLK_STGEN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_STGENCLKSOURCE(PeriphClkInit->StgenClockSelection));

    __HAL_RCC_STGEN_CONFIG(PeriphClkInit->StgenClockSelection);
10007bb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007bb4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
10007bb8:	f023 0103 	bic.w	r1, r3, #3
10007bbc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007bc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007bc4:	681b      	ldr	r3, [r3, #0]
10007bc6:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
10007bca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007bce:	430b      	orrs	r3, r1
10007bd0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  }

#if defined(DSI)
  /*---------------------------- DSI configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) ==
10007bd4:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007bd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007bdc:	681b      	ldr	r3, [r3, #0]
10007bde:	e9d3 2300 	ldrd	r2, r3, [r3]
10007be2:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
10007be6:	63bb      	str	r3, [r7, #56]	; 0x38
10007be8:	2300      	movs	r3, #0
10007bea:	63fb      	str	r3, [r7, #60]	; 0x3c
10007bec:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
10007bf0:	460b      	mov	r3, r1
10007bf2:	4313      	orrs	r3, r2
10007bf4:	d037      	beq.n	10007c66 <HAL_RCCEx_PeriphCLKConfig+0x1762>
      RCC_PERIPHCLK_DSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    if (PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL4)
10007bf6:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007bfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007bfe:	681b      	ldr	r3, [r3, #0]
10007c00:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
10007c04:	2b01      	cmp	r3, #1
10007c06:	d11c      	bne.n	10007c42 <HAL_RCCEx_PeriphCLKConfig+0x173e>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007c08:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007c0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007c10:	681b      	ldr	r3, [r3, #0]
10007c12:	3380      	adds	r3, #128	; 0x80
10007c14:	4618      	mov	r0, r3
10007c16:	f7fe fb1d 	bl	10006254 <RCCEx_PLL4_Config>
10007c1a:	4603      	mov	r3, r0
10007c1c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10007c20:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007c24:	2b00      	cmp	r3, #0
10007c26:	d002      	beq.n	10007c2e <HAL_RCCEx_PeriphCLKConfig+0x172a>
      {
        return status;
10007c28:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007c2c:	e2f4      	b.n	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable DSI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10007c2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007c32:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007c36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007c3a:	f043 0310 	orr.w	r3, r3, #16
10007c3e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
10007c42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007c46:	f8d3 3924 	ldr.w	r3, [r3, #2340]	; 0x924
10007c4a:	f023 0101 	bic.w	r1, r3, #1
10007c4e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007c52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007c56:	681b      	ldr	r3, [r3, #0]
10007c58:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
10007c5c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007c60:	430b      	orrs	r3, r1
10007c62:	f8c2 3924 	str.w	r3, [r2, #2340]	; 0x924
  }
#endif /*DSI*/

  /*---------------------------- ADC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) ==
10007c66:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007c6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007c6e:	681b      	ldr	r3, [r3, #0]
10007c70:	e9d3 2300 	ldrd	r2, r3, [r3]
10007c74:	f002 0308 	and.w	r3, r2, #8
10007c78:	633b      	str	r3, [r7, #48]	; 0x30
10007c7a:	2300      	movs	r3, #0
10007c7c:	637b      	str	r3, [r7, #52]	; 0x34
10007c7e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
10007c82:	460b      	mov	r3, r1
10007c84:	4313      	orrs	r3, r2
10007c86:	d059      	beq.n	10007d3c <HAL_RCCEx_PeriphCLKConfig+0x1838>
      RCC_PERIPHCLK_ADC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
10007c88:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007c8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007c90:	681b      	ldr	r3, [r3, #0]
10007c92:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10007c96:	2b00      	cmp	r3, #0
10007c98:	d002      	beq.n	10007ca0 <HAL_RCCEx_PeriphCLKConfig+0x179c>
10007c9a:	2b02      	cmp	r3, #2
10007c9c:	d01e      	beq.n	10007cdc <HAL_RCCEx_PeriphCLKConfig+0x17d8>
10007c9e:	e03b      	b.n	10007d18 <HAL_RCCEx_PeriphCLKConfig+0x1814>
    {
      case RCC_ADCCLKSOURCE_PLL4: /* PLL4 is used as clock source for ADC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007ca0:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007ca4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007ca8:	681b      	ldr	r3, [r3, #0]
10007caa:	3380      	adds	r3, #128	; 0x80
10007cac:	4618      	mov	r0, r3
10007cae:	f7fe fad1 	bl	10006254 <RCCEx_PLL4_Config>
10007cb2:	4603      	mov	r3, r0
10007cb4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007cb8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007cbc:	2b00      	cmp	r3, #0
10007cbe:	d002      	beq.n	10007cc6 <HAL_RCCEx_PeriphCLKConfig+0x17c2>
        {
          return status;
10007cc0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007cc4:	e2a8      	b.n	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10007cc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007cca:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007cce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10007cd6:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
10007cda:	e01d      	b.n	10007d18 <HAL_RCCEx_PeriphCLKConfig+0x1814>

      case RCC_ADCCLKSOURCE_PLL3: /* PLL3 is used as clock source for ADC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10007cdc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007ce0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007ce4:	681b      	ldr	r3, [r3, #0]
10007ce6:	3344      	adds	r3, #68	; 0x44
10007ce8:	4618      	mov	r0, r3
10007cea:	f7fe f949 	bl	10005f80 <RCCEx_PLL3_Config>
10007cee:	4603      	mov	r3, r0
10007cf0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007cf4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007cf8:	2b00      	cmp	r3, #0
10007cfa:	d002      	beq.n	10007d02 <HAL_RCCEx_PeriphCLKConfig+0x17fe>
        {
          return status;
10007cfc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007d00:	e28a      	b.n	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10007d02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007d06:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10007d0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007d0e:	f043 0320 	orr.w	r3, r3, #32
10007d12:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10007d16:	bf00      	nop
    }

    /* Set the source of ADC clock*/
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
10007d18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007d1c:	f8d3 3928 	ldr.w	r3, [r3, #2344]	; 0x928
10007d20:	f023 0103 	bic.w	r1, r3, #3
10007d24:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007d28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007d2c:	681b      	ldr	r3, [r3, #0]
10007d2e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10007d32:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007d36:	430b      	orrs	r3, r1
10007d38:	f8c2 3928 	str.w	r3, [r2, #2344]	; 0x928
  }

  /*---------------------------- LPTIM45 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM45) ==
10007d3c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007d40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007d44:	681b      	ldr	r3, [r3, #0]
10007d46:	e9d3 2300 	ldrd	r2, r3, [r3]
10007d4a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
10007d4e:	62bb      	str	r3, [r7, #40]	; 0x28
10007d50:	2300      	movs	r3, #0
10007d52:	62fb      	str	r3, [r7, #44]	; 0x2c
10007d54:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
10007d58:	460b      	mov	r3, r1
10007d5a:	4313      	orrs	r3, r2
10007d5c:	d058      	beq.n	10007e10 <HAL_RCCEx_PeriphCLKConfig+0x190c>
      RCC_PERIPHCLK_LPTIM45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM45CLKSOURCE(PeriphClkInit->Lptim45ClockSelection));

    switch (PeriphClkInit->Lptim45ClockSelection)
10007d5e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007d62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007d66:	681b      	ldr	r3, [r3, #0]
10007d68:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10007d6c:	2b01      	cmp	r3, #1
10007d6e:	d01f      	beq.n	10007db0 <HAL_RCCEx_PeriphCLKConfig+0x18ac>
10007d70:	2b02      	cmp	r3, #2
10007d72:	d13b      	bne.n	10007dec <HAL_RCCEx_PeriphCLKConfig+0x18e8>
    {
      case RCC_LPTIM45CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPTIM45 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10007d74:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007d78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007d7c:	681b      	ldr	r3, [r3, #0]
10007d7e:	3344      	adds	r3, #68	; 0x44
10007d80:	4618      	mov	r0, r3
10007d82:	f7fe f8fd 	bl	10005f80 <RCCEx_PLL3_Config>
10007d86:	4603      	mov	r3, r0
10007d88:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007d8c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007d90:	2b00      	cmp	r3, #0
10007d92:	d002      	beq.n	10007d9a <HAL_RCCEx_PeriphCLKConfig+0x1896>
        {
          return status;
10007d94:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007d98:	e23e      	b.n	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10007d9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007d9e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10007da2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007da6:	f043 0320 	orr.w	r3, r3, #32
10007daa:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10007dae:	e01d      	b.n	10007dec <HAL_RCCEx_PeriphCLKConfig+0x18e8>

      case RCC_LPTIM45CLKSOURCE_PLL4: /* PLL4 is used as clock source for LPTIM45 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007db0:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007db4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007db8:	681b      	ldr	r3, [r3, #0]
10007dba:	3380      	adds	r3, #128	; 0x80
10007dbc:	4618      	mov	r0, r3
10007dbe:	f7fe fa49 	bl	10006254 <RCCEx_PLL4_Config>
10007dc2:	4603      	mov	r3, r0
10007dc4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007dc8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007dcc:	2b00      	cmp	r3, #0
10007dce:	d002      	beq.n	10007dd6 <HAL_RCCEx_PeriphCLKConfig+0x18d2>
        {
          return status;
10007dd0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007dd4:	e220      	b.n	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10007dd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007dda:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007dde:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007de2:	f043 0310 	orr.w	r3, r3, #16
10007de6:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10007dea:	bf00      	nop
    }

    /* Set the source of LPTIM45 clock*/
    __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
10007dec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007df0:	f8d3 392c 	ldr.w	r3, [r3, #2348]	; 0x92c
10007df4:	f023 0207 	bic.w	r2, r3, #7
10007df8:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007dfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007e00:	681b      	ldr	r3, [r3, #0]
10007e02:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10007e06:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10007e0a:	4313      	orrs	r3, r2
10007e0c:	f8c1 392c 	str.w	r3, [r1, #2348]	; 0x92c
  }

  /*---------------------------- LPTIM23 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM23) ==
10007e10:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007e14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007e18:	681b      	ldr	r3, [r3, #0]
10007e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
10007e1e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
10007e22:	623b      	str	r3, [r7, #32]
10007e24:	2300      	movs	r3, #0
10007e26:	627b      	str	r3, [r7, #36]	; 0x24
10007e28:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
10007e2c:	460b      	mov	r3, r1
10007e2e:	4313      	orrs	r3, r2
10007e30:	d037      	beq.n	10007ea2 <HAL_RCCEx_PeriphCLKConfig+0x199e>
      RCC_PERIPHCLK_LPTIM23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM23CLKSOURCE(PeriphClkInit->Lptim23ClockSelection));

    if (PeriphClkInit->Lptim23ClockSelection == RCC_LPTIM23CLKSOURCE_PLL4)
10007e32:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007e36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007e3a:	681b      	ldr	r3, [r3, #0]
10007e3c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
10007e40:	2b01      	cmp	r3, #1
10007e42:	d11c      	bne.n	10007e7e <HAL_RCCEx_PeriphCLKConfig+0x197a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007e44:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007e48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007e4c:	681b      	ldr	r3, [r3, #0]
10007e4e:	3380      	adds	r3, #128	; 0x80
10007e50:	4618      	mov	r0, r3
10007e52:	f7fe f9ff 	bl	10006254 <RCCEx_PLL4_Config>
10007e56:	4603      	mov	r3, r0
10007e58:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10007e5c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007e60:	2b00      	cmp	r3, #0
10007e62:	d002      	beq.n	10007e6a <HAL_RCCEx_PeriphCLKConfig+0x1966>
      {
        return status;
10007e64:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007e68:	e1d6      	b.n	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10007e6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007e6e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007e72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007e76:	f043 0320 	orr.w	r3, r3, #32
10007e7a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of LPTIM23 clock*/
    __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
10007e7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007e82:	f8d3 3930 	ldr.w	r3, [r3, #2352]	; 0x930
10007e86:	f023 0207 	bic.w	r2, r3, #7
10007e8a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007e8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007e92:	681b      	ldr	r3, [r3, #0]
10007e94:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
10007e98:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10007e9c:	4313      	orrs	r3, r2
10007e9e:	f8c1 3930 	str.w	r3, [r1, #2352]	; 0x930
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) ==
10007ea2:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007ea6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007eaa:	681b      	ldr	r3, [r3, #0]
10007eac:	e9d3 2300 	ldrd	r2, r3, [r3]
10007eb0:	f002 0340 	and.w	r3, r2, #64	; 0x40
10007eb4:	61bb      	str	r3, [r7, #24]
10007eb6:	2300      	movs	r3, #0
10007eb8:	61fb      	str	r3, [r7, #28]
10007eba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
10007ebe:	460b      	mov	r3, r1
10007ec0:	4313      	orrs	r3, r2
10007ec2:	d058      	beq.n	10007f76 <HAL_RCCEx_PeriphCLKConfig+0x1a72>
      RCC_PERIPHCLK_LPTIM1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
10007ec4:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007ec8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007ecc:	681b      	ldr	r3, [r3, #0]
10007ece:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
10007ed2:	2b01      	cmp	r3, #1
10007ed4:	d01f      	beq.n	10007f16 <HAL_RCCEx_PeriphCLKConfig+0x1a12>
10007ed6:	2b02      	cmp	r3, #2
10007ed8:	d13b      	bne.n	10007f52 <HAL_RCCEx_PeriphCLKConfig+0x1a4e>
    {
      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10007eda:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007ede:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007ee2:	681b      	ldr	r3, [r3, #0]
10007ee4:	3344      	adds	r3, #68	; 0x44
10007ee6:	4618      	mov	r0, r3
10007ee8:	f7fe f84a 	bl	10005f80 <RCCEx_PLL3_Config>
10007eec:	4603      	mov	r3, r0
10007eee:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007ef2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007ef6:	2b00      	cmp	r3, #0
10007ef8:	d002      	beq.n	10007f00 <HAL_RCCEx_PeriphCLKConfig+0x19fc>
        {
          return status;
10007efa:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007efe:	e18b      	b.n	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10007f00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007f04:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10007f08:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007f0c:	f043 0320 	orr.w	r3, r3, #32
10007f10:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10007f14:	e01d      	b.n	10007f52 <HAL_RCCEx_PeriphCLKConfig+0x1a4e>

      case RCC_LPTIM1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for LPTIM1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007f16:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007f1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007f1e:	681b      	ldr	r3, [r3, #0]
10007f20:	3380      	adds	r3, #128	; 0x80
10007f22:	4618      	mov	r0, r3
10007f24:	f7fe f996 	bl	10006254 <RCCEx_PLL4_Config>
10007f28:	4603      	mov	r3, r0
10007f2a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007f2e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007f32:	2b00      	cmp	r3, #0
10007f34:	d002      	beq.n	10007f3c <HAL_RCCEx_PeriphCLKConfig+0x1a38>
        {
          return status;
10007f36:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007f3a:	e16d      	b.n	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10007f3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007f40:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007f44:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007f48:	f043 0310 	orr.w	r3, r3, #16
10007f4c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10007f50:	bf00      	nop
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
10007f52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007f56:	f8d3 3934 	ldr.w	r3, [r3, #2356]	; 0x934
10007f5a:	f023 0207 	bic.w	r2, r3, #7
10007f5e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007f62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007f66:	681b      	ldr	r3, [r3, #0]
10007f68:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
10007f6c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10007f70:	4313      	orrs	r3, r2
10007f72:	f8c1 3934 	str.w	r3, [r1, #2356]	; 0x934
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) ==
10007f76:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007f7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007f7e:	681b      	ldr	r3, [r3, #0]
10007f80:	e9d3 2300 	ldrd	r2, r3, [r3]
10007f84:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
10007f88:	613b      	str	r3, [r7, #16]
10007f8a:	2300      	movs	r3, #0
10007f8c:	617b      	str	r3, [r7, #20]
10007f8e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
10007f92:	460b      	mov	r3, r1
10007f94:	4313      	orrs	r3, r2
10007f96:	f000 80c6 	beq.w	10008126 <HAL_RCCEx_PeriphCLKConfig+0x1c22>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
10007f9a:	4ba2      	ldr	r3, [pc, #648]	; (10008224 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
10007f9c:	681b      	ldr	r3, [r3, #0]
10007f9e:	4aa1      	ldr	r2, [pc, #644]	; (10008224 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
10007fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10007fa4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
10007fa6:	f7f9 fd35 	bl	10001a14 <HAL_GetTick>
10007faa:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10007fae:	e00a      	b.n	10007fc6 <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10007fb0:	f7f9 fd30 	bl	10001a14 <HAL_GetTick>
10007fb4:	4602      	mov	r2, r0
10007fb6:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
10007fba:	1ad3      	subs	r3, r2, r3
10007fbc:	2b64      	cmp	r3, #100	; 0x64
10007fbe:	d902      	bls.n	10007fc6 <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
      {
        ret = HAL_TIMEOUT;
10007fc0:	2303      	movs	r3, #3
10007fc2:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10007fc6:	4b97      	ldr	r3, [pc, #604]	; (10008224 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
10007fc8:	681b      	ldr	r3, [r3, #0]
10007fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
10007fce:	2b00      	cmp	r3, #0
10007fd0:	d0ee      	beq.n	10007fb0 <HAL_RCCEx_PeriphCLKConfig+0x1aac>
      }
    }

    if (ret == HAL_OK)
10007fd2:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
10007fd6:	2b00      	cmp	r3, #0
10007fd8:	f040 80a2 	bne.w	10008120 <HAL_RCCEx_PeriphCLKConfig+0x1c1c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSRC) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSRC))
10007fdc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007fe0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
10007fe4:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007fe8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007fec:	681b      	ldr	r3, [r3, #0]
10007fee:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
10007ff2:	4053      	eors	r3, r2
10007ff4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
10007ff8:	2b00      	cmp	r3, #0
10007ffa:	f000 8086 	beq.w	1000810a <HAL_RCCEx_PeriphCLKConfig+0x1c06>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSRC));
10007ffe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008002:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10008006:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
1000800a:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
1000800e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008012:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10008016:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000801a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1000801e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        __HAL_RCC_BACKUPRESET_RELEASE();
10008022:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008026:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000802a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000802e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
10008032:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

        /* Set the LSEDrive value */
        __HAL_RCC_LSEDRIVE_CONFIG(tmpreg & RCC_BDCR_LSEDRV);
10008036:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000803a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000803e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
10008042:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
10008046:	f003 0330 	and.w	r3, r3, #48	; 0x30
1000804a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000804e:	4313      	orrs	r3, r2
10008050:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

        /* RCC_BDCR_LSEON can be enabled for RTC or another IP, re-enable it */
        RCC_OscInitTypeDef RCC_OscInitStructure;
        /* Configure LSE Oscillator*/
        RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_LSE;
10008054:	f507 7312 	add.w	r3, r7, #584	; 0x248
10008058:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
1000805c:	2204      	movs	r2, #4
1000805e:	601a      	str	r2, [r3, #0]
        RCC_OscInitStructure.LSEState = (tmpreg & LSE_MASK);
10008060:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
10008064:	f003 020b 	and.w	r2, r3, #11
10008068:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000806c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
10008070:	609a      	str	r2, [r3, #8]

        RCC_OscInitStructure.PLL.PLLState = RCC_PLL_NONE;
10008072:	f507 7312 	add.w	r3, r7, #584	; 0x248
10008076:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
1000807a:	2200      	movs	r2, #0
1000807c:	625a      	str	r2, [r3, #36]	; 0x24
        RCC_OscInitStructure.PLL2.PLLState = RCC_PLL_NONE;
1000807e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10008082:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
10008086:	2200      	movs	r2, #0
10008088:	661a      	str	r2, [r3, #96]	; 0x60
        RCC_OscInitStructure.PLL3.PLLState = RCC_PLL_NONE;
1000808a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000808e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
10008092:	2200      	movs	r2, #0
10008094:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        RCC_OscInitStructure.PLL4.PLLState = RCC_PLL_NONE;
10008098:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000809c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
100080a0:	2200      	movs	r2, #0
100080a2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
        ret = HAL_RCC_OscConfig(&RCC_OscInitStructure);
100080a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
100080aa:	4618      	mov	r0, r3
100080ac:	f7fc f90e 	bl	100042cc <HAL_RCC_OscConfig>
100080b0:	4603      	mov	r3, r0
100080b2:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
        if (ret != HAL_OK)
100080b6:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
100080ba:	2b00      	cmp	r3, #0
100080bc:	d002      	beq.n	100080c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc0>
        {
          return ret;
100080be:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
100080c2:	e0a9      	b.n	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }

        /* Write the RTCSRC */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
100080c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100080c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100080cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
100080d0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100080d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100080d8:	681b      	ldr	r3, [r3, #0]
100080da:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
100080de:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100080e2:	4313      	orrs	r3, r2
100080e4:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

        /* Fill up Reserved register mask for BDCR
         * All already filled up or what shouldn't be modified must be put on the mask */
        RESERVED_BDCR_MASK = ~(RCC_BDCR_VSWRST | RCC_BDCR_RTCCKEN | RCC_BDCR_RTCSRC |
100080e8:	4b4f      	ldr	r3, [pc, #316]	; (10008228 <HAL_RCCEx_PeriphCLKConfig+0x1d24>)
100080ea:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
                               RCC_BDCR_LSECSSD | RCC_BDCR_LSEDRV | RCC_BDCR_DIGBYP |
                               RCC_BDCR_LSERDY | RCC_BDCR_LSEBYP | RCC_BDCR_LSEON);

        /* Restore the BDCR context: RESERVED registers plus RCC_BDCR_LSECSSON */
        WRITE_REG(RCC->BDCR, (READ_REG(RCC->BDCR) | (tmpreg & RESERVED_BDCR_MASK)));
100080ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100080f2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
100080f6:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
100080fa:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
100080fe:	400b      	ands	r3, r1
10008100:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10008104:	4313      	orrs	r3, r2
10008106:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

      }/* End RTCSRC changed */

      /*Enable RTC clock   */
      __HAL_RCC_RTC_ENABLE();
1000810a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000810e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10008112:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10008116:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1000811a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
1000811e:	e002      	b.n	10008126 <HAL_RCCEx_PeriphCLKConfig+0x1c22>
    }
    else
    {
      // Enable write access to Backup domain failed
      /* return the error */
      return ret;
10008120:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
10008124:	e078      	b.n	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    }
  }

  /*---------------------------- TIMG1 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG1) ==
10008126:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000812a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000812e:	681b      	ldr	r3, [r3, #0]
10008130:	e9d3 2300 	ldrd	r2, r3, [r3]
10008134:	f402 6380 	and.w	r3, r2, #1024	; 0x400
10008138:	60bb      	str	r3, [r7, #8]
1000813a:	2300      	movs	r3, #0
1000813c:	60fb      	str	r3, [r7, #12]
1000813e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
10008142:	460b      	mov	r3, r1
10008144:	4313      	orrs	r3, r2
10008146:	d02a      	beq.n	1000819e <HAL_RCCEx_PeriphCLKConfig+0x1c9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection);
10008148:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000814c:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
10008150:	f023 0201 	bic.w	r2, r3, #1
10008154:	f507 7312 	add.w	r3, r7, #584	; 0x248
10008158:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000815c:	681b      	ldr	r3, [r3, #0]
1000815e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
10008162:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10008166:	4313      	orrs	r3, r2
10008168:	f8c1 3828 	str.w	r3, [r1, #2088]	; 0x828

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000816c:	f7f9 fc52 	bl	10001a14 <HAL_GetTick>
10008170:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
10008174:	e00a      	b.n	1000818c <HAL_RCCEx_PeriphCLKConfig+0x1c88>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10008176:	f7f9 fc4d 	bl	10001a14 <HAL_GetTick>
1000817a:	4602      	mov	r2, r0
1000817c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
10008180:	1ad3      	subs	r3, r2, r3
10008182:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10008186:	d901      	bls.n	1000818c <HAL_RCCEx_PeriphCLKConfig+0x1c88>
      {
        return HAL_TIMEOUT;
10008188:	2303      	movs	r3, #3
1000818a:	e045      	b.n	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
1000818c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008190:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
10008194:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10008198:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000819c:	d1eb      	bne.n	10008176 <HAL_RCCEx_PeriphCLKConfig+0x1c72>
      }
    }
  }

  /*---------------------------- TIMG2 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG2) ==
1000819e:	f507 7312 	add.w	r3, r7, #584	; 0x248
100081a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100081a6:	681b      	ldr	r3, [r3, #0]
100081a8:	e9d3 2300 	ldrd	r2, r3, [r3]
100081ac:	f402 6300 	and.w	r3, r2, #2048	; 0x800
100081b0:	603b      	str	r3, [r7, #0]
100081b2:	2300      	movs	r3, #0
100081b4:	607b      	str	r3, [r7, #4]
100081b6:	e9d7 1200 	ldrd	r1, r2, [r7]
100081ba:	460b      	mov	r3, r1
100081bc:	4313      	orrs	r3, r2
100081be:	d02a      	beq.n	10008216 <HAL_RCCEx_PeriphCLKConfig+0x1d12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection);
100081c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100081c4:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
100081c8:	f023 0201 	bic.w	r2, r3, #1
100081cc:	f507 7312 	add.w	r3, r7, #584	; 0x248
100081d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100081d4:	681b      	ldr	r3, [r3, #0]
100081d6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
100081da:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100081de:	4313      	orrs	r3, r2
100081e0:	f8c1 382c 	str.w	r3, [r1, #2092]	; 0x82c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100081e4:	f7f9 fc16 	bl	10001a14 <HAL_GetTick>
100081e8:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
100081ec:	e00a      	b.n	10008204 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100081ee:	f7f9 fc11 	bl	10001a14 <HAL_GetTick>
100081f2:	4602      	mov	r2, r0
100081f4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
100081f8:	1ad3      	subs	r3, r2, r3
100081fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100081fe:	d901      	bls.n	10008204 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
      {
        return HAL_TIMEOUT;
10008200:	2303      	movs	r3, #3
10008202:	e009      	b.n	10008218 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
10008204:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008208:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
1000820c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10008210:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10008214:	d1eb      	bne.n	100081ee <HAL_RCCEx_PeriphCLKConfig+0x1cea>
      }
    }
  }

  return HAL_OK;
10008216:	2300      	movs	r3, #0
}
10008218:	4618      	mov	r0, r3
1000821a:	f507 7712 	add.w	r7, r7, #584	; 0x248
1000821e:	46bd      	mov	sp, r7
10008220:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
10008224:	50001000 	.word	0x50001000
10008228:	7fecfdc0 	.word	0x7fecfdc0

1000822c <HAL_RCCEx_GetPeriphCLKFreq>:
  *          @ref RCCEx_Periph_Clock_Selection
  *          @ref RCCEx_Periph_One_Clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
1000822c:	b590      	push	{r4, r7, lr}
1000822e:	b08f      	sub	sp, #60	; 0x3c
10008230:	af00      	add	r7, sp, #0
10008232:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t frequency = 0, clksource = 0;
10008236:	2100      	movs	r1, #0
10008238:	6379      	str	r1, [r7, #52]	; 0x34
1000823a:	2100      	movs	r1, #0
1000823c:	6339      	str	r1, [r7, #48]	; 0x30
  PLL4_ClocksTypeDef pll4_clocks;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk) || IS_RCC_PERIPHONECLOCK(PeriphClk));

  switch (PeriphClk)
1000823e:	e9d7 0100 	ldrd	r0, r1, [r7]
10008242:	f5a1 4480 	sub.w	r4, r1, #16384	; 0x4000
10008246:	ea50 0104 	orrs.w	r1, r0, r4
1000824a:	f000 82cb 	beq.w	100087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
1000824e:	e9d7 0100 	ldrd	r0, r1, [r7]
10008252:	2801      	cmp	r0, #1
10008254:	f571 4180 	sbcs.w	r1, r1, #16384	; 0x4000
10008258:	f081 82af 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000825c:	e9d7 0100 	ldrd	r0, r1, [r7]
10008260:	f5a1 5400 	sub.w	r4, r1, #8192	; 0x2000
10008264:	ea50 0104 	orrs.w	r1, r0, r4
10008268:	f001 80f1 	beq.w	1000944e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
1000826c:	e9d7 0100 	ldrd	r0, r1, [r7]
10008270:	2801      	cmp	r0, #1
10008272:	f571 5100 	sbcs.w	r1, r1, #8192	; 0x2000
10008276:	f081 82a0 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000827a:	e9d7 0100 	ldrd	r0, r1, [r7]
1000827e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
10008282:	ea50 0104 	orrs.w	r1, r0, r4
10008286:	f000 8738 	beq.w	100090fa <HAL_RCCEx_GetPeriphCLKFreq+0xece>
1000828a:	e9d7 0100 	ldrd	r0, r1, [r7]
1000828e:	2801      	cmp	r0, #1
10008290:	f571 5180 	sbcs.w	r1, r1, #4096	; 0x1000
10008294:	f081 8291 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008298:	e9d7 0100 	ldrd	r0, r1, [r7]
1000829c:	f5a1 6400 	sub.w	r4, r1, #2048	; 0x800
100082a0:	ea50 0104 	orrs.w	r1, r0, r4
100082a4:	f000 872d 	beq.w	10009102 <HAL_RCCEx_GetPeriphCLKFreq+0xed6>
100082a8:	e9d7 0100 	ldrd	r0, r1, [r7]
100082ac:	2801      	cmp	r0, #1
100082ae:	f571 6100 	sbcs.w	r1, r1, #2048	; 0x800
100082b2:	f081 8282 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100082b6:	e9d7 0100 	ldrd	r0, r1, [r7]
100082ba:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
100082be:	ea50 0104 	orrs.w	r1, r0, r4
100082c2:	f000 875e 	beq.w	10009182 <HAL_RCCEx_GetPeriphCLKFreq+0xf56>
100082c6:	e9d7 0100 	ldrd	r0, r1, [r7]
100082ca:	2801      	cmp	r0, #1
100082cc:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
100082d0:	f081 8273 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100082d4:	e9d7 0100 	ldrd	r0, r1, [r7]
100082d8:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
100082dc:	ea50 0104 	orrs.w	r1, r0, r4
100082e0:	f000 86bf 	beq.w	10009062 <HAL_RCCEx_GetPeriphCLKFreq+0xe36>
100082e4:	e9d7 0100 	ldrd	r0, r1, [r7]
100082e8:	2801      	cmp	r0, #1
100082ea:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
100082ee:	f081 8264 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100082f2:	e9d7 0100 	ldrd	r0, r1, [r7]
100082f6:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
100082fa:	ea50 0104 	orrs.w	r1, r0, r4
100082fe:	f000 845c 	beq.w	10008bba <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
10008302:	e9d7 0100 	ldrd	r0, r1, [r7]
10008306:	2801      	cmp	r0, #1
10008308:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
1000830c:	f081 8255 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008310:	e9d7 0100 	ldrd	r0, r1, [r7]
10008314:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
10008318:	ea50 0104 	orrs.w	r1, r0, r4
1000831c:	f000 86bf 	beq.w	1000909e <HAL_RCCEx_GetPeriphCLKFreq+0xe72>
10008320:	e9d7 0100 	ldrd	r0, r1, [r7]
10008324:	2801      	cmp	r0, #1
10008326:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
1000832a:	f081 8246 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000832e:	e9d7 0100 	ldrd	r0, r1, [r7]
10008332:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
10008336:	ea50 0104 	orrs.w	r1, r0, r4
1000833a:	f000 824e 	beq.w	100087da <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
1000833e:	e9d7 0100 	ldrd	r0, r1, [r7]
10008342:	2801      	cmp	r0, #1
10008344:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
10008348:	f081 8237 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000834c:	e9d7 0100 	ldrd	r0, r1, [r7]
10008350:	f1a1 0420 	sub.w	r4, r1, #32
10008354:	ea50 0104 	orrs.w	r1, r0, r4
10008358:	f000 8722 	beq.w	100091a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf74>
1000835c:	e9d7 0100 	ldrd	r0, r1, [r7]
10008360:	2801      	cmp	r0, #1
10008362:	f171 0120 	sbcs.w	r1, r1, #32
10008366:	f081 8228 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000836a:	e9d7 0100 	ldrd	r0, r1, [r7]
1000836e:	f1a1 0410 	sub.w	r4, r1, #16
10008372:	ea50 0104 	orrs.w	r1, r0, r4
10008376:	f000 87c9 	beq.w	1000930c <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
1000837a:	e9d7 0100 	ldrd	r0, r1, [r7]
1000837e:	2801      	cmp	r0, #1
10008380:	f171 0110 	sbcs.w	r1, r1, #16
10008384:	f081 8219 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008388:	e9d7 0100 	ldrd	r0, r1, [r7]
1000838c:	f1a1 0408 	sub.w	r4, r1, #8
10008390:	ea50 0104 	orrs.w	r1, r0, r4
10008394:	f001 80e8 	beq.w	10009568 <HAL_RCCEx_GetPeriphCLKFreq+0x133c>
10008398:	e9d7 0100 	ldrd	r0, r1, [r7]
1000839c:	2801      	cmp	r0, #1
1000839e:	f171 0108 	sbcs.w	r1, r1, #8
100083a2:	f081 820a 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100083a6:	e9d7 0100 	ldrd	r0, r1, [r7]
100083aa:	1f0c      	subs	r4, r1, #4
100083ac:	ea50 0104 	orrs.w	r1, r0, r4
100083b0:	f001 8104 	beq.w	100095bc <HAL_RCCEx_GetPeriphCLKFreq+0x1390>
100083b4:	e9d7 0100 	ldrd	r0, r1, [r7]
100083b8:	2801      	cmp	r0, #1
100083ba:	f171 0104 	sbcs.w	r1, r1, #4
100083be:	f081 81fc 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100083c2:	e9d7 0100 	ldrd	r0, r1, [r7]
100083c6:	1e8c      	subs	r4, r1, #2
100083c8:	ea50 0104 	orrs.w	r1, r0, r4
100083cc:	f000 87ee 	beq.w	100093ac <HAL_RCCEx_GetPeriphCLKFreq+0x1180>
100083d0:	e9d7 0100 	ldrd	r0, r1, [r7]
100083d4:	2801      	cmp	r0, #1
100083d6:	f171 0102 	sbcs.w	r1, r1, #2
100083da:	f081 81ee 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100083de:	e9d7 0100 	ldrd	r0, r1, [r7]
100083e2:	1e4c      	subs	r4, r1, #1
100083e4:	ea50 0104 	orrs.w	r1, r0, r4
100083e8:	f001 8053 	beq.w	10009492 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
100083ec:	e9d7 0100 	ldrd	r0, r1, [r7]
100083f0:	2801      	cmp	r0, #1
100083f2:	f171 0101 	sbcs.w	r1, r1, #1
100083f6:	f081 81e0 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100083fa:	e9d7 0100 	ldrd	r0, r1, [r7]
100083fe:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
10008402:	4321      	orrs	r1, r4
10008404:	f001 8104 	beq.w	10009610 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
10008408:	e9d7 0100 	ldrd	r0, r1, [r7]
1000840c:	4cbd      	ldr	r4, [pc, #756]	; (10008704 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>)
1000840e:	42a0      	cmp	r0, r4
10008410:	f171 0100 	sbcs.w	r1, r1, #0
10008414:	f081 81d1 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008418:	e9d7 0100 	ldrd	r0, r1, [r7]
1000841c:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
10008420:	4321      	orrs	r1, r4
10008422:	f000 85e3 	beq.w	10008fec <HAL_RCCEx_GetPeriphCLKFreq+0xdc0>
10008426:	e9d7 0100 	ldrd	r0, r1, [r7]
1000842a:	4cb7      	ldr	r4, [pc, #732]	; (10008708 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
1000842c:	42a0      	cmp	r0, r4
1000842e:	f171 0100 	sbcs.w	r1, r1, #0
10008432:	f081 81c2 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008436:	e9d7 0100 	ldrd	r0, r1, [r7]
1000843a:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
1000843e:	4321      	orrs	r1, r4
10008440:	f000 86e1 	beq.w	10009206 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
10008444:	e9d7 0100 	ldrd	r0, r1, [r7]
10008448:	4cb0      	ldr	r4, [pc, #704]	; (1000870c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
1000844a:	42a0      	cmp	r0, r4
1000844c:	f171 0100 	sbcs.w	r1, r1, #0
10008450:	f081 81b3 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008454:	e9d7 0100 	ldrd	r0, r1, [r7]
10008458:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
1000845c:	4321      	orrs	r1, r4
1000845e:	f000 84db 	beq.w	10008e18 <HAL_RCCEx_GetPeriphCLKFreq+0xbec>
10008462:	e9d7 0100 	ldrd	r0, r1, [r7]
10008466:	4caa      	ldr	r4, [pc, #680]	; (10008710 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
10008468:	42a0      	cmp	r0, r4
1000846a:	f171 0100 	sbcs.w	r1, r1, #0
1000846e:	f081 81a4 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008472:	e9d7 0100 	ldrd	r0, r1, [r7]
10008476:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
1000847a:	4321      	orrs	r1, r4
1000847c:	f000 82b0 	beq.w	100089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
10008480:	e9d7 0100 	ldrd	r0, r1, [r7]
10008484:	4ca3      	ldr	r4, [pc, #652]	; (10008714 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
10008486:	42a0      	cmp	r0, r4
10008488:	f171 0100 	sbcs.w	r1, r1, #0
1000848c:	f081 8195 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008490:	e9d7 0100 	ldrd	r0, r1, [r7]
10008494:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
10008498:	4321      	orrs	r1, r4
1000849a:	f000 8481 	beq.w	10008da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb74>
1000849e:	e9d7 0100 	ldrd	r0, r1, [r7]
100084a2:	4c9d      	ldr	r4, [pc, #628]	; (10008718 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
100084a4:	42a0      	cmp	r0, r4
100084a6:	f171 0100 	sbcs.w	r1, r1, #0
100084aa:	f081 8186 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100084ae:	e9d7 0100 	ldrd	r0, r1, [r7]
100084b2:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
100084b6:	4321      	orrs	r1, r4
100084b8:	f000 8384 	beq.w	10008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
100084bc:	e9d7 0100 	ldrd	r0, r1, [r7]
100084c0:	4c96      	ldr	r4, [pc, #600]	; (1000871c <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
100084c2:	42a0      	cmp	r0, r4
100084c4:	f171 0100 	sbcs.w	r1, r1, #0
100084c8:	f081 8177 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100084cc:	e9d7 0100 	ldrd	r0, r1, [r7]
100084d0:	f100 447f 	add.w	r4, r0, #4278190080	; 0xff000000
100084d4:	4321      	orrs	r1, r4
100084d6:	f000 8250 	beq.w	1000897a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
100084da:	e9d7 0100 	ldrd	r0, r1, [r7]
100084de:	4c90      	ldr	r4, [pc, #576]	; (10008720 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
100084e0:	42a0      	cmp	r0, r4
100084e2:	f171 0100 	sbcs.w	r1, r1, #0
100084e6:	f081 8168 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100084ea:	e9d7 0100 	ldrd	r0, r1, [r7]
100084ee:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
100084f2:	4321      	orrs	r1, r4
100084f4:	f000 85b9 	beq.w	1000906a <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
100084f8:	e9d7 0100 	ldrd	r0, r1, [r7]
100084fc:	4c89      	ldr	r4, [pc, #548]	; (10008724 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
100084fe:	42a0      	cmp	r0, r4
10008500:	f171 0100 	sbcs.w	r1, r1, #0
10008504:	f081 8159 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008508:	e9d7 0100 	ldrd	r0, r1, [r7]
1000850c:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
10008510:	4321      	orrs	r1, r4
10008512:	f000 871a 	beq.w	1000934a <HAL_RCCEx_GetPeriphCLKFreq+0x111e>
10008516:	e9d7 0100 	ldrd	r0, r1, [r7]
1000851a:	4c83      	ldr	r4, [pc, #524]	; (10008728 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
1000851c:	42a0      	cmp	r0, r4
1000851e:	f171 0100 	sbcs.w	r1, r1, #0
10008522:	f081 814a 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008526:	e9d7 0100 	ldrd	r0, r1, [r7]
1000852a:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
1000852e:	4321      	orrs	r1, r4
10008530:	f000 875e 	beq.w	100093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
10008534:	e9d7 0100 	ldrd	r0, r1, [r7]
10008538:	4c7c      	ldr	r4, [pc, #496]	; (1000872c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
1000853a:	42a0      	cmp	r0, r4
1000853c:	f171 0100 	sbcs.w	r1, r1, #0
10008540:	f081 813b 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008544:	e9d7 0100 	ldrd	r0, r1, [r7]
10008548:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
1000854c:	4321      	orrs	r1, r4
1000854e:	f000 8786 	beq.w	1000945e <HAL_RCCEx_GetPeriphCLKFreq+0x1232>
10008552:	e9d7 0100 	ldrd	r0, r1, [r7]
10008556:	4c76      	ldr	r4, [pc, #472]	; (10008730 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
10008558:	42a0      	cmp	r0, r4
1000855a:	f171 0100 	sbcs.w	r1, r1, #0
1000855e:	f081 812c 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008562:	e9d7 0100 	ldrd	r0, r1, [r7]
10008566:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
1000856a:	4321      	orrs	r1, r4
1000856c:	f000 83dd 	beq.w	10008d2a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
10008570:	e9d7 0100 	ldrd	r0, r1, [r7]
10008574:	4c6f      	ldr	r4, [pc, #444]	; (10008734 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
10008576:	42a0      	cmp	r0, r4
10008578:	f171 0100 	sbcs.w	r1, r1, #0
1000857c:	f081 811d 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008580:	e9d7 0100 	ldrd	r0, r1, [r7]
10008584:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
10008588:	4321      	orrs	r1, r4
1000858a:	f000 84f2 	beq.w	10008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
1000858e:	e9d7 0100 	ldrd	r0, r1, [r7]
10008592:	4c69      	ldr	r4, [pc, #420]	; (10008738 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
10008594:	42a0      	cmp	r0, r4
10008596:	f171 0100 	sbcs.w	r1, r1, #0
1000859a:	f081 810e 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000859e:	e9d7 0100 	ldrd	r0, r1, [r7]
100085a2:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
100085a6:	4321      	orrs	r1, r4
100085a8:	f000 84af 	beq.w	10008f0a <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
100085ac:	e9d7 0100 	ldrd	r0, r1, [r7]
100085b0:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
100085b4:	f171 0100 	sbcs.w	r1, r1, #0
100085b8:	f081 80ff 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100085bc:	e9d7 0100 	ldrd	r0, r1, [r7]
100085c0:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
100085c4:	4321      	orrs	r1, r4
100085c6:	f000 82b8 	beq.w	10008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x90e>
100085ca:	e9d7 0100 	ldrd	r0, r1, [r7]
100085ce:	f248 0401 	movw	r4, #32769	; 0x8001
100085d2:	42a0      	cmp	r0, r4
100085d4:	f171 0100 	sbcs.w	r1, r1, #0
100085d8:	f081 80ef 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100085dc:	e9d7 0100 	ldrd	r0, r1, [r7]
100085e0:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
100085e4:	4321      	orrs	r1, r4
100085e6:	f000 8458 	beq.w	10008e9a <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
100085ea:	e9d7 0100 	ldrd	r0, r1, [r7]
100085ee:	f244 0401 	movw	r4, #16385	; 0x4001
100085f2:	42a0      	cmp	r0, r4
100085f4:	f171 0100 	sbcs.w	r1, r1, #0
100085f8:	f081 80df 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100085fc:	e9d7 0100 	ldrd	r0, r1, [r7]
10008600:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
10008604:	4321      	orrs	r1, r4
10008606:	f000 80f2 	beq.w	100087ee <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
1000860a:	e9d7 0100 	ldrd	r0, r1, [r7]
1000860e:	f242 0401 	movw	r4, #8193	; 0x2001
10008612:	42a0      	cmp	r0, r4
10008614:	f171 0100 	sbcs.w	r1, r1, #0
10008618:	f081 80cf 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000861c:	e9d7 0100 	ldrd	r0, r1, [r7]
10008620:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
10008624:	4321      	orrs	r1, r4
10008626:	f000 8574 	beq.w	10009112 <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
1000862a:	e9d7 0100 	ldrd	r0, r1, [r7]
1000862e:	f241 0401 	movw	r4, #4097	; 0x1001
10008632:	42a0      	cmp	r0, r4
10008634:	f171 0100 	sbcs.w	r1, r1, #0
10008638:	f081 80bf 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000863c:	e9d7 0100 	ldrd	r0, r1, [r7]
10008640:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
10008644:	4321      	orrs	r1, r4
10008646:	f001 8063 	beq.w	10009710 <HAL_RCCEx_GetPeriphCLKFreq+0x14e4>
1000864a:	e9d7 0100 	ldrd	r0, r1, [r7]
1000864e:	f640 0401 	movw	r4, #2049	; 0x801
10008652:	42a0      	cmp	r0, r4
10008654:	f171 0100 	sbcs.w	r1, r1, #0
10008658:	f081 80af 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000865c:	e9d7 0100 	ldrd	r0, r1, [r7]
10008660:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
10008664:	4321      	orrs	r1, r4
10008666:	f001 800b 	beq.w	10009680 <HAL_RCCEx_GetPeriphCLKFreq+0x1454>
1000866a:	e9d7 0100 	ldrd	r0, r1, [r7]
1000866e:	f240 4401 	movw	r4, #1025	; 0x401
10008672:	42a0      	cmp	r0, r4
10008674:	f171 0100 	sbcs.w	r1, r1, #0
10008678:	f081 809f 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000867c:	e9d7 0100 	ldrd	r0, r1, [r7]
10008680:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
10008684:	4321      	orrs	r1, r4
10008686:	f000 8512 	beq.w	100090ae <HAL_RCCEx_GetPeriphCLKFreq+0xe82>
1000868a:	e9d7 0100 	ldrd	r0, r1, [r7]
1000868e:	f240 2401 	movw	r4, #513	; 0x201
10008692:	42a0      	cmp	r0, r4
10008694:	f171 0100 	sbcs.w	r1, r1, #0
10008698:	f081 808f 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000869c:	e9d7 0100 	ldrd	r0, r1, [r7]
100086a0:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
100086a4:	4321      	orrs	r1, r4
100086a6:	f000 82ff 	beq.w	10008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
100086aa:	e9d7 0100 	ldrd	r0, r1, [r7]
100086ae:	f240 1401 	movw	r4, #257	; 0x101
100086b2:	42a0      	cmp	r0, r4
100086b4:	f171 0100 	sbcs.w	r1, r1, #0
100086b8:	f081 807f 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100086bc:	e9d7 0100 	ldrd	r0, r1, [r7]
100086c0:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
100086c4:	4321      	orrs	r1, r4
100086c6:	f000 82b3 	beq.w	10008c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
100086ca:	e9d7 0100 	ldrd	r0, r1, [r7]
100086ce:	2881      	cmp	r0, #129	; 0x81
100086d0:	f171 0100 	sbcs.w	r1, r1, #0
100086d4:	f081 8071 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100086d8:	e9d7 0100 	ldrd	r0, r1, [r7]
100086dc:	2821      	cmp	r0, #33	; 0x21
100086de:	f171 0100 	sbcs.w	r1, r1, #0
100086e2:	d271      	bcs.n	100087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
100086e4:	e9d7 0100 	ldrd	r0, r1, [r7]
100086e8:	4301      	orrs	r1, r0
100086ea:	f001 8066 	beq.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100086ee:	e9d7 0100 	ldrd	r0, r1, [r7]
100086f2:	1e42      	subs	r2, r0, #1
100086f4:	f141 33ff 	adc.w	r3, r1, #4294967295
100086f8:	2a20      	cmp	r2, #32
100086fa:	f173 0100 	sbcs.w	r1, r3, #0
100086fe:	f081 805c 	bcs.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008702:	e01b      	b.n	1000873c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
10008704:	80000001 	.word	0x80000001
10008708:	40000001 	.word	0x40000001
1000870c:	20000001 	.word	0x20000001
10008710:	10000001 	.word	0x10000001
10008714:	08000001 	.word	0x08000001
10008718:	04000001 	.word	0x04000001
1000871c:	02000001 	.word	0x02000001
10008720:	01000001 	.word	0x01000001
10008724:	00400001 	.word	0x00400001
10008728:	00200001 	.word	0x00200001
1000872c:	00100001 	.word	0x00100001
10008730:	00080001 	.word	0x00080001
10008734:	00040001 	.word	0x00040001
10008738:	00020001 	.word	0x00020001
1000873c:	2a1f      	cmp	r2, #31
1000873e:	f201 803c 	bhi.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10008742:	a101      	add	r1, pc, #4	; (adr r1, 10008748 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
10008744:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
10008748:	10009289 	.word	0x10009289
1000874c:	10008a59 	.word	0x10008a59
10008750:	100097bb 	.word	0x100097bb
10008754:	10008acb 	.word	0x10008acb
10008758:	100097bb 	.word	0x100097bb
1000875c:	100097bb 	.word	0x100097bb
10008760:	100097bb 	.word	0x100097bb
10008764:	10009511 	.word	0x10009511
10008768:	100097bb 	.word	0x100097bb
1000876c:	100097bb 	.word	0x100097bb
10008770:	100097bb 	.word	0x100097bb
10008774:	100097bb 	.word	0x100097bb
10008778:	100097bb 	.word	0x100097bb
1000877c:	100097bb 	.word	0x100097bb
10008780:	100097bb 	.word	0x100097bb
10008784:	10008839 	.word	0x10008839
10008788:	100097bb 	.word	0x100097bb
1000878c:	100097bb 	.word	0x100097bb
10008790:	100097bb 	.word	0x100097bb
10008794:	100097bb 	.word	0x100097bb
10008798:	100097bb 	.word	0x100097bb
1000879c:	100097bb 	.word	0x100097bb
100087a0:	100097bb 	.word	0x100097bb
100087a4:	100097bb 	.word	0x100097bb
100087a8:	100097bb 	.word	0x100097bb
100087ac:	100097bb 	.word	0x100097bb
100087b0:	100097bb 	.word	0x100097bb
100087b4:	100097bb 	.word	0x100097bb
100087b8:	100097bb 	.word	0x100097bb
100087bc:	100097bb 	.word	0x100097bb
100087c0:	100097bb 	.word	0x100097bb
100087c4:	1000889b 	.word	0x1000889b
100087c8:	e9d7 2300 	ldrd	r2, r3, [r7]
100087cc:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
100087d0:	430b      	orrs	r3, r1
100087d2:	f000 8094 	beq.w	100088fe <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
100087d6:	f000 bff0 	b.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
  {

    case RCC_PERIPHCLK_DAC:
    {
      frequency = LSI_VALUE;
100087da:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
100087de:	637b      	str	r3, [r7, #52]	; 0x34
    }
      break; /*RCC_PERIPHCLK_DAC*/
100087e0:	f000 bfeb 	b.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_WWDG:
    {
      frequency = HAL_RCC_GetPCLK1Freq();
100087e4:	f7fd f8c6 	bl	10005974 <HAL_RCC_GetPCLK1Freq>
100087e8:	6378      	str	r0, [r7, #52]	; 0x34
    }
      break; /* RCC_PERIPHCLK_WWDG */
100087ea:	f000 bfe6 	b.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_CEC:
    {
      clksource = __HAL_RCC_GET_CEC_SOURCE();
100087ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100087f2:	f8d3 3918 	ldr.w	r3, [r3, #2328]	; 0x918
100087f6:	f003 0303 	and.w	r3, r3, #3
100087fa:	633b      	str	r3, [r7, #48]	; 0x30
100087fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100087fe:	2b02      	cmp	r3, #2
10008800:	d011      	beq.n	10008826 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
10008802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008804:	2b02      	cmp	r3, #2
10008806:	d812      	bhi.n	1000882e <HAL_RCCEx_GetPeriphCLKFreq+0x602>
10008808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000880a:	2b00      	cmp	r3, #0
1000880c:	d003      	beq.n	10008816 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
1000880e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008810:	2b01      	cmp	r3, #1
10008812:	d004      	beq.n	1000881e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
10008814:	e00b      	b.n	1000882e <HAL_RCCEx_GetPeriphCLKFreq+0x602>

      switch (clksource)
      {
        case RCC_CECCLKSOURCE_LSE:
          frequency = LSE_VALUE;
10008816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
1000881a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000881c:	e00a      	b.n	10008834 <HAL_RCCEx_GetPeriphCLKFreq+0x608>

        case RCC_CECCLKSOURCE_LSI:
          frequency = LSI_VALUE;
1000881e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10008822:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008824:	e006      	b.n	10008834 <HAL_RCCEx_GetPeriphCLKFreq+0x608>

        case RCC_CECCLKSOURCE_CSI122:
          frequency = (CSI_VALUE / 122);
10008826:	f248 0312 	movw	r3, #32786	; 0x8012
1000882a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000882c:	e002      	b.n	10008834 <HAL_RCCEx_GetPeriphCLKFreq+0x608>

        default:
          frequency = 0;
1000882e:	2300      	movs	r3, #0
10008830:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008832:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_CEC */
10008834:	f000 bfc1 	b.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_I2C12:
    {
      clksource = __HAL_RCC_GET_I2C12_SOURCE();
10008838:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000883c:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	; 0x8c0
10008840:	f003 0307 	and.w	r3, r3, #7
10008844:	633b      	str	r3, [r7, #48]	; 0x30
10008846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008848:	2b03      	cmp	r3, #3
1000884a:	f200 87a7 	bhi.w	1000979c <HAL_RCCEx_GetPeriphCLKFreq+0x1570>
1000884e:	a201      	add	r2, pc, #4	; (adr r2, 10008854 <HAL_RCCEx_GetPeriphCLKFreq+0x628>)
10008850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008854:	10008865 	.word	0x10008865
10008858:	1000886d 	.word	0x1000886d
1000885c:	1000887d 	.word	0x1000887d
10008860:	10008891 	.word	0x10008891

      switch (clksource)
      {
        case RCC_I2C12CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
10008864:	f7fd f886 	bl	10005974 <HAL_RCC_GetPCLK1Freq>
10008868:	6378      	str	r0, [r7, #52]	; 0x34
          break;
1000886a:	e014      	b.n	10008896 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>

        case RCC_I2C12CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000886c:	f107 030c 	add.w	r3, r7, #12
10008870:	4618      	mov	r0, r3
10008872:	f7fc ff77 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10008876:	697b      	ldr	r3, [r7, #20]
10008878:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000887a:	e00c      	b.n	10008896 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>

        case RCC_I2C12CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
1000887c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008880:	699b      	ldr	r3, [r3, #24]
10008882:	f003 0303 	and.w	r3, r3, #3
10008886:	4ab8      	ldr	r2, [pc, #736]	; (10008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
10008888:	fa22 f303 	lsr.w	r3, r2, r3
1000888c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000888e:	e002      	b.n	10008896 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>

        case RCC_I2C12CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008890:	4bb6      	ldr	r3, [pc, #728]	; (10008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
10008892:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008894:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_I2C12 */
10008896:	f000 bf81 	b.w	1000979c <HAL_RCCEx_GetPeriphCLKFreq+0x1570>


    case RCC_PERIPHCLK_I2C35:
    {
      clksource = __HAL_RCC_GET_I2C35_SOURCE();
1000889a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000889e:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	; 0x8c4
100088a2:	f003 0307 	and.w	r3, r3, #7
100088a6:	633b      	str	r3, [r7, #48]	; 0x30
100088a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100088aa:	2b03      	cmp	r3, #3
100088ac:	f200 8778 	bhi.w	100097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1574>
100088b0:	a201      	add	r2, pc, #4	; (adr r2, 100088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
100088b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100088b6:	bf00      	nop
100088b8:	100088c9 	.word	0x100088c9
100088bc:	100088d1 	.word	0x100088d1
100088c0:	100088e1 	.word	0x100088e1
100088c4:	100088f5 	.word	0x100088f5

      switch (clksource)
      {
        case RCC_I2C35CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
100088c8:	f7fd f854 	bl	10005974 <HAL_RCC_GetPCLK1Freq>
100088cc:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100088ce:	e014      	b.n	100088fa <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>

        case RCC_I2C35CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100088d0:	f107 030c 	add.w	r3, r7, #12
100088d4:	4618      	mov	r0, r3
100088d6:	f7fc ff45 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
100088da:	697b      	ldr	r3, [r7, #20]
100088dc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100088de:	e00c      	b.n	100088fa <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>

        case RCC_I2C35CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100088e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100088e4:	699b      	ldr	r3, [r3, #24]
100088e6:	f003 0303 	and.w	r3, r3, #3
100088ea:	4a9f      	ldr	r2, [pc, #636]	; (10008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
100088ec:	fa22 f303 	lsr.w	r3, r2, r3
100088f0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100088f2:	e002      	b.n	100088fa <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>

        case RCC_I2C35CLKSOURCE_CSI:
          frequency = CSI_VALUE;
100088f4:	4b9d      	ldr	r3, [pc, #628]	; (10008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
100088f6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100088f8:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_I2C35 */
100088fa:	f000 bf51 	b.w	100097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1574>


    case RCC_PERIPHCLK_LPTIM1:
    {
      clksource = __HAL_RCC_GET_LPTIM1_SOURCE();
100088fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008902:	f8d3 3934 	ldr.w	r3, [r3, #2356]	; 0x934
10008906:	f003 0307 	and.w	r3, r3, #7
1000890a:	633b      	str	r3, [r7, #48]	; 0x30
1000890c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000890e:	2b05      	cmp	r3, #5
10008910:	d82e      	bhi.n	10008970 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
10008912:	a201      	add	r2, pc, #4	; (adr r2, 10008918 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
10008914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008918:	10008931 	.word	0x10008931
1000891c:	10008939 	.word	0x10008939
10008920:	10008949 	.word	0x10008949
10008924:	10008959 	.word	0x10008959
10008928:	10008961 	.word	0x10008961
1000892c:	10008969 	.word	0x10008969

      switch (clksource)
      {
        case RCC_LPTIM1CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
10008930:	f7fd f820 	bl	10005974 <HAL_RCC_GetPCLK1Freq>
10008934:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008936:	e01e      	b.n	10008976 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008938:	f107 030c 	add.w	r3, r7, #12
1000893c:	4618      	mov	r0, r3
1000893e:	f7fc ff11 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10008942:	68fb      	ldr	r3, [r7, #12]
10008944:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008946:	e016      	b.n	10008976 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008948:	f107 0318 	add.w	r3, r7, #24
1000894c:	4618      	mov	r0, r3
1000894e:	f7fc fe0f 	bl	10005570 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008952:	69fb      	ldr	r3, [r7, #28]
10008954:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008956:	e00e      	b.n	10008976 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_LSE:
          frequency = LSE_VALUE;
10008958:	f44f 4300 	mov.w	r3, #32768	; 0x8000
1000895c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000895e:	e00a      	b.n	10008976 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_LSI:
          frequency = LSI_VALUE;
10008960:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10008964:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008966:	e006      	b.n	10008976 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008968:	f7fd f8bc 	bl	10005ae4 <RCC_GetCKPERFreq>
1000896c:	6378      	str	r0, [r7, #52]	; 0x34
          break;
1000896e:	e002      	b.n	10008976 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        default:
          frequency = 0;
10008970:	2300      	movs	r3, #0
10008972:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008974:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_LPTIM1 */
10008976:	f000 bf20 	b.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SPDIFRX:
    {
      clksource = __HAL_RCC_GET_SPDIFRX_SOURCE();
1000897a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000897e:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
10008982:	f003 0303 	and.w	r3, r3, #3
10008986:	633b      	str	r3, [r7, #48]	; 0x30
10008988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000898a:	2b02      	cmp	r3, #2
1000898c:	d019      	beq.n	100089c2 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
1000898e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008990:	2b02      	cmp	r3, #2
10008992:	d820      	bhi.n	100089d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
10008994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008996:	2b00      	cmp	r3, #0
10008998:	d003      	beq.n	100089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
1000899a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000899c:	2b01      	cmp	r3, #1
1000899e:	d008      	beq.n	100089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
100089a0:	e019      	b.n	100089d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>

      switch (clksource)
      {
        case RCC_SPDIFRXCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100089a2:	f107 030c 	add.w	r3, r7, #12
100089a6:	4618      	mov	r0, r3
100089a8:	f7fc fedc 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
100089ac:	68fb      	ldr	r3, [r7, #12]
100089ae:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100089b0:	e014      	b.n	100089dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>

        case RCC_SPDIFRXCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100089b2:	f107 0318 	add.w	r3, r7, #24
100089b6:	4618      	mov	r0, r3
100089b8:	f7fc fdda 	bl	10005570 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
100089bc:	69fb      	ldr	r3, [r7, #28]
100089be:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100089c0:	e00c      	b.n	100089dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>

        case RCC_SPDIFRXCLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100089c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100089c6:	699b      	ldr	r3, [r3, #24]
100089c8:	f003 0303 	and.w	r3, r3, #3
100089cc:	4a66      	ldr	r2, [pc, #408]	; (10008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
100089ce:	fa22 f303 	lsr.w	r3, r2, r3
100089d2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100089d4:	e002      	b.n	100089dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>

        default:
          frequency = 0;
100089d6:	2300      	movs	r3, #0
100089d8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100089da:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_SPDIFRX */
100089dc:	f000 beed 	b.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_SPI23:
    {
      clksource = __HAL_RCC_GET_SPI23_SOURCE();
100089e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100089e4:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	; 0x8dc
100089e8:	f003 0307 	and.w	r3, r3, #7
100089ec:	633b      	str	r3, [r7, #48]	; 0x30
100089ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100089f0:	2b04      	cmp	r3, #4
100089f2:	d82c      	bhi.n	10008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x822>
100089f4:	a201      	add	r2, pc, #4	; (adr r2, 100089fc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>)
100089f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100089fa:	bf00      	nop
100089fc:	10008a11 	.word	0x10008a11
10008a00:	10008a21 	.word	0x10008a21
10008a04:	10008a41 	.word	0x10008a41
10008a08:	10008a47 	.word	0x10008a47
10008a0c:	10008a31 	.word	0x10008a31

      switch (clksource)
      {
        case RCC_SPI23CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008a10:	f107 030c 	add.w	r3, r7, #12
10008a14:	4618      	mov	r0, r3
10008a16:	f7fc fea5 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10008a1a:	68fb      	ldr	r3, [r7, #12]
10008a1c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a1e:	e019      	b.n	10008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        case RCC_SPI23CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008a20:	f107 0318 	add.w	r3, r7, #24
10008a24:	4618      	mov	r0, r3
10008a26:	f7fc fda3 	bl	10005570 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008a2a:	69fb      	ldr	r3, [r7, #28]
10008a2c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a2e:	e011      	b.n	10008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        case RCC_SPI23CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008a30:	f107 0318 	add.w	r3, r7, #24
10008a34:	4618      	mov	r0, r3
10008a36:	f7fc fd9b 	bl	10005570 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10008a3a:	6a3b      	ldr	r3, [r7, #32]
10008a3c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a3e:	e009      	b.n	10008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        case RCC_SPI23CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10008a40:	4b4b      	ldr	r3, [pc, #300]	; (10008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x944>)
10008a42:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a44:	e006      	b.n	10008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        case RCC_SPI23CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008a46:	f7fd f84d 	bl	10005ae4 <RCC_GetCKPERFreq>
10008a4a:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008a4c:	e002      	b.n	10008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        default:
          frequency = 0;
10008a4e:	2300      	movs	r3, #0
10008a50:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a52:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_SPI23 */
10008a54:	f000 beb1 	b.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_UART24:
    {
      clksource = __HAL_RCC_GET_UART24_SOURCE();
10008a58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008a5c:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
10008a60:	f003 0307 	and.w	r3, r3, #7
10008a64:	633b      	str	r3, [r7, #48]	; 0x30
10008a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008a68:	2b04      	cmp	r3, #4
10008a6a:	d829      	bhi.n	10008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
10008a6c:	a201      	add	r2, pc, #4	; (adr r2, 10008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
10008a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008a72:	bf00      	nop
10008a74:	10008a89 	.word	0x10008a89
10008a78:	10008a91 	.word	0x10008a91
10008a7c:	10008aa1 	.word	0x10008aa1
10008a80:	10008ab5 	.word	0x10008ab5
10008a84:	10008abb 	.word	0x10008abb

      switch (clksource)
      {
        case RCC_UART24CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
10008a88:	f7fc ff74 	bl	10005974 <HAL_RCC_GetPCLK1Freq>
10008a8c:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008a8e:	e01a      	b.n	10008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        case RCC_UART24CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008a90:	f107 030c 	add.w	r3, r7, #12
10008a94:	4618      	mov	r0, r3
10008a96:	f7fc fe65 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008a9a:	693b      	ldr	r3, [r7, #16]
10008a9c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a9e:	e012      	b.n	10008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        case RCC_UART24CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008aa0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008aa4:	699b      	ldr	r3, [r3, #24]
10008aa6:	f003 0303 	and.w	r3, r3, #3
10008aaa:	4a2f      	ldr	r2, [pc, #188]	; (10008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
10008aac:	fa22 f303 	lsr.w	r3, r2, r3
10008ab0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008ab2:	e008      	b.n	10008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        case RCC_UART24CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008ab4:	4b2d      	ldr	r3, [pc, #180]	; (10008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
10008ab6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008ab8:	e005      	b.n	10008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        case RCC_UART24CLKSOURCE_HSE:
          frequency = HSE_VALUE;
10008aba:	4b2e      	ldr	r3, [pc, #184]	; (10008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x948>)
10008abc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008abe:	e002      	b.n	10008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        default:
          frequency = 0;
10008ac0:	2300      	movs	r3, #0
10008ac2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008ac4:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_UART24 */
10008ac6:	f000 be78 	b.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_UART35:
    {
      clksource = __HAL_RCC_GET_UART35_SOURCE();
10008aca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008ace:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
10008ad2:	f003 0307 	and.w	r3, r3, #7
10008ad6:	633b      	str	r3, [r7, #48]	; 0x30
10008ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008ada:	2b04      	cmp	r3, #4
10008adc:	d828      	bhi.n	10008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
10008ade:	a201      	add	r2, pc, #4	; (adr r2, 10008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>)
10008ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008ae4:	10008af9 	.word	0x10008af9
10008ae8:	10008b01 	.word	0x10008b01
10008aec:	10008b11 	.word	0x10008b11
10008af0:	10008b25 	.word	0x10008b25
10008af4:	10008b2b 	.word	0x10008b2b

      switch (clksource)
      {
        case RCC_UART35CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
10008af8:	f7fc ff3c 	bl	10005974 <HAL_RCC_GetPCLK1Freq>
10008afc:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008afe:	e01a      	b.n	10008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        case RCC_UART35CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008b00:	f107 030c 	add.w	r3, r7, #12
10008b04:	4618      	mov	r0, r3
10008b06:	f7fc fe2d 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008b0a:	693b      	ldr	r3, [r7, #16]
10008b0c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b0e:	e012      	b.n	10008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        case RCC_UART35CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008b10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008b14:	699b      	ldr	r3, [r3, #24]
10008b16:	f003 0303 	and.w	r3, r3, #3
10008b1a:	4a13      	ldr	r2, [pc, #76]	; (10008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
10008b1c:	fa22 f303 	lsr.w	r3, r2, r3
10008b20:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b22:	e008      	b.n	10008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        case RCC_UART35CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008b24:	4b11      	ldr	r3, [pc, #68]	; (10008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
10008b26:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b28:	e005      	b.n	10008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        case RCC_UART35CLKSOURCE_HSE:
          frequency = HSE_VALUE;
10008b2a:	4b12      	ldr	r3, [pc, #72]	; (10008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x948>)
10008b2c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b2e:	e002      	b.n	10008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        default:
          frequency = 0;
10008b30:	2300      	movs	r3, #0
10008b32:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b34:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_USART35 */
10008b36:	f000 be40 	b.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_UART78:
    {
      clksource = __HAL_RCC_GET_UART78_SOURCE();
10008b3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008b3e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
10008b42:	f003 0307 	and.w	r3, r3, #7
10008b46:	633b      	str	r3, [r7, #48]	; 0x30
10008b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008b4a:	2b04      	cmp	r3, #4
10008b4c:	d830      	bhi.n	10008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
10008b4e:	a201      	add	r2, pc, #4	; (adr r2, 10008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
10008b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008b54:	10008b79 	.word	0x10008b79
10008b58:	10008b81 	.word	0x10008b81
10008b5c:	10008b91 	.word	0x10008b91
10008b60:	10008ba5 	.word	0x10008ba5
10008b64:	10008bab 	.word	0x10008bab
10008b68:	03d09000 	.word	0x03d09000
10008b6c:	003d0900 	.word	0x003d0900
10008b70:	00bb8000 	.word	0x00bb8000
10008b74:	016e3600 	.word	0x016e3600

      switch (clksource)
      {
        case RCC_UART78CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
10008b78:	f7fc fefc 	bl	10005974 <HAL_RCC_GetPCLK1Freq>
10008b7c:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008b7e:	e01a      	b.n	10008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        case RCC_UART78CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008b80:	f107 030c 	add.w	r3, r7, #12
10008b84:	4618      	mov	r0, r3
10008b86:	f7fc fded 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008b8a:	693b      	ldr	r3, [r7, #16]
10008b8c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b8e:	e012      	b.n	10008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        case RCC_UART78CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008b90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008b94:	699b      	ldr	r3, [r3, #24]
10008b96:	f003 0303 	and.w	r3, r3, #3
10008b9a:	4ab9      	ldr	r2, [pc, #740]	; (10008e80 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>)
10008b9c:	fa22 f303 	lsr.w	r3, r2, r3
10008ba0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008ba2:	e008      	b.n	10008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        case RCC_UART78CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008ba4:	4bb7      	ldr	r3, [pc, #732]	; (10008e84 <HAL_RCCEx_GetPeriphCLKFreq+0xc58>)
10008ba6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008ba8:	e005      	b.n	10008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        case RCC_UART78CLKSOURCE_HSE:
          frequency = HSE_VALUE;
10008baa:	4bb7      	ldr	r3, [pc, #732]	; (10008e88 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
10008bac:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008bae:	e002      	b.n	10008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        default:
          frequency = 0;
10008bb0:	2300      	movs	r3, #0
10008bb2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008bb4:	bf00      	nop
      }
    }
      break; /*RCC_PERIPHCLK_UART78 */
10008bb6:	f000 be00 	b.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_DFSDM1:
    {
      frequency = HAL_RCC_GetMLHCLKFreq();
10008bba:	f7fc ff71 	bl	10005aa0 <HAL_RCC_GetMLHCLKFreq>
10008bbe:	6378      	str	r0, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_DFSDM1
10008bc0:	f000 bdfb 	b.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

#if defined(FDCAN1)
    case RCC_PERIPHCLK_FDCAN:
    {
      clksource = __HAL_RCC_GET_FDCAN_SOURCE();
10008bc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008bc8:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
10008bcc:	f003 0303 	and.w	r3, r3, #3
10008bd0:	633b      	str	r3, [r7, #48]	; 0x30
10008bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008bd4:	2b03      	cmp	r3, #3
10008bd6:	d826      	bhi.n	10008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
10008bd8:	a201      	add	r2, pc, #4	; (adr r2, 10008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>)
10008bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008bde:	bf00      	nop
10008be0:	10008bf1 	.word	0x10008bf1
10008be4:	10008bf7 	.word	0x10008bf7
10008be8:	10008c07 	.word	0x10008c07
10008bec:	10008c17 	.word	0x10008c17

      switch (clksource)
      {
        case RCC_FDCANCLKSOURCE_HSE:
          frequency = HSE_VALUE;
10008bf0:	4ba5      	ldr	r3, [pc, #660]	; (10008e88 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
10008bf2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008bf4:	e01a      	b.n	10008c2c <HAL_RCCEx_GetPeriphCLKFreq+0xa00>

        case RCC_FDCANCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008bf6:	f107 0318 	add.w	r3, r7, #24
10008bfa:	4618      	mov	r0, r3
10008bfc:	f7fc fcb8 	bl	10005570 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008c00:	69fb      	ldr	r3, [r7, #28]
10008c02:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008c04:	e012      	b.n	10008c2c <HAL_RCCEx_GetPeriphCLKFreq+0xa00>

        case RCC_FDCANCLKSOURCE_PLL4_Q:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008c06:	f107 030c 	add.w	r3, r7, #12
10008c0a:	4618      	mov	r0, r3
10008c0c:	f7fc fdaa 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008c10:	693b      	ldr	r3, [r7, #16]
10008c12:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008c14:	e00a      	b.n	10008c2c <HAL_RCCEx_GetPeriphCLKFreq+0xa00>

        case RCC_FDCANCLKSOURCE_PLL4_R:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008c16:	f107 030c 	add.w	r3, r7, #12
10008c1a:	4618      	mov	r0, r3
10008c1c:	f7fc fda2 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10008c20:	697b      	ldr	r3, [r7, #20]
10008c22:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008c24:	e002      	b.n	10008c2c <HAL_RCCEx_GetPeriphCLKFreq+0xa00>

        default:
          frequency = 0;
10008c26:	2300      	movs	r3, #0
10008c28:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008c2a:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_FDCAN
10008c2c:	f000 bdc5 	b.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
#endif /*FDCAN1*/

    case RCC_PERIPHCLK_SAI1:
    {
      clksource = __HAL_RCC_GET_SAI1_SOURCE();
10008c30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008c34:	f8d3 38c8 	ldr.w	r3, [r3, #2248]	; 0x8c8
10008c38:	f003 0307 	and.w	r3, r3, #7
10008c3c:	633b      	str	r3, [r7, #48]	; 0x30
10008c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008c40:	2b04      	cmp	r3, #4
10008c42:	d82c      	bhi.n	10008c9e <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
10008c44:	a201      	add	r2, pc, #4	; (adr r2, 10008c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>)
10008c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008c4a:	bf00      	nop
10008c4c:	10008c61 	.word	0x10008c61
10008c50:	10008c71 	.word	0x10008c71
10008c54:	10008c91 	.word	0x10008c91
10008c58:	10008c97 	.word	0x10008c97
10008c5c:	10008c81 	.word	0x10008c81

      switch (clksource)
      {
        case RCC_SAI1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008c60:	f107 030c 	add.w	r3, r7, #12
10008c64:	4618      	mov	r0, r3
10008c66:	f7fc fd7d 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008c6a:	693b      	ldr	r3, [r7, #16]
10008c6c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008c6e:	e019      	b.n	10008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        case RCC_SAI1CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008c70:	f107 0318 	add.w	r3, r7, #24
10008c74:	4618      	mov	r0, r3
10008c76:	f7fc fc7b 	bl	10005570 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008c7a:	69fb      	ldr	r3, [r7, #28]
10008c7c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008c7e:	e011      	b.n	10008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        case RCC_SAI1CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008c80:	f107 0318 	add.w	r3, r7, #24
10008c84:	4618      	mov	r0, r3
10008c86:	f7fc fc73 	bl	10005570 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10008c8a:	6a3b      	ldr	r3, [r7, #32]
10008c8c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008c8e:	e009      	b.n	10008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        case RCC_SAI1CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10008c90:	4b7e      	ldr	r3, [pc, #504]	; (10008e8c <HAL_RCCEx_GetPeriphCLKFreq+0xc60>)
10008c92:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008c94:	e006      	b.n	10008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        case RCC_SAI1CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008c96:	f7fc ff25 	bl	10005ae4 <RCC_GetCKPERFreq>
10008c9a:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008c9c:	e002      	b.n	10008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        default:
          frequency = 0;
10008c9e:	2300      	movs	r3, #0
10008ca0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008ca2:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SAI1
10008ca4:	f000 bd89 	b.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SAI2:
    {
      clksource = __HAL_RCC_GET_SAI2_SOURCE();
10008ca8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008cac:	f8d3 38cc 	ldr.w	r3, [r3, #2252]	; 0x8cc
10008cb0:	f003 0307 	and.w	r3, r3, #7
10008cb4:	633b      	str	r3, [r7, #48]	; 0x30
10008cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008cb8:	2b05      	cmp	r3, #5
10008cba:	d831      	bhi.n	10008d20 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
10008cbc:	a201      	add	r2, pc, #4	; (adr r2, 10008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
10008cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008cc2:	bf00      	nop
10008cc4:	10008cdd 	.word	0x10008cdd
10008cc8:	10008ced 	.word	0x10008ced
10008ccc:	10008d0d 	.word	0x10008d0d
10008cd0:	10008d13 	.word	0x10008d13
10008cd4:	10008d1b 	.word	0x10008d1b
10008cd8:	10008cfd 	.word	0x10008cfd

      switch (clksource)
      {
        case RCC_SAI2CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008cdc:	f107 030c 	add.w	r3, r7, #12
10008ce0:	4618      	mov	r0, r3
10008ce2:	f7fc fd3f 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008ce6:	693b      	ldr	r3, [r7, #16]
10008ce8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008cea:	e01c      	b.n	10008d26 <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008cec:	f107 0318 	add.w	r3, r7, #24
10008cf0:	4618      	mov	r0, r3
10008cf2:	f7fc fc3d 	bl	10005570 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008cf6:	69fb      	ldr	r3, [r7, #28]
10008cf8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008cfa:	e014      	b.n	10008d26 <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008cfc:	f107 0318 	add.w	r3, r7, #24
10008d00:	4618      	mov	r0, r3
10008d02:	f7fc fc35 	bl	10005570 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10008d06:	6a3b      	ldr	r3, [r7, #32]
10008d08:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008d0a:	e00c      	b.n	10008d26 <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10008d0c:	4b5f      	ldr	r3, [pc, #380]	; (10008e8c <HAL_RCCEx_GetPeriphCLKFreq+0xc60>)
10008d0e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008d10:	e009      	b.n	10008d26 <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008d12:	f7fc fee7 	bl	10005ae4 <RCC_GetCKPERFreq>
10008d16:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008d18:	e005      	b.n	10008d26 <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_SPDIF:
          frequency = 0; //SAI2 manage this SPDIF_CKSYMB_VALUE
10008d1a:	2300      	movs	r3, #0
10008d1c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008d1e:	e002      	b.n	10008d26 <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        default:
          frequency = 0;
10008d20:	2300      	movs	r3, #0
10008d22:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008d24:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SAI2
10008d26:	f000 bd48 	b.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SAI3:
    {
      clksource = __HAL_RCC_GET_SAI3_SOURCE();
10008d2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008d2e:	f8d3 38d0 	ldr.w	r3, [r3, #2256]	; 0x8d0
10008d32:	f003 0307 	and.w	r3, r3, #7
10008d36:	633b      	str	r3, [r7, #48]	; 0x30
10008d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008d3a:	2b04      	cmp	r3, #4
10008d3c:	d82b      	bhi.n	10008d96 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
10008d3e:	a201      	add	r2, pc, #4	; (adr r2, 10008d44 <HAL_RCCEx_GetPeriphCLKFreq+0xb18>)
10008d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008d44:	10008d59 	.word	0x10008d59
10008d48:	10008d69 	.word	0x10008d69
10008d4c:	10008d89 	.word	0x10008d89
10008d50:	10008d8f 	.word	0x10008d8f
10008d54:	10008d79 	.word	0x10008d79

      switch (clksource)
      {
        case RCC_SAI3CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008d58:	f107 030c 	add.w	r3, r7, #12
10008d5c:	4618      	mov	r0, r3
10008d5e:	f7fc fd01 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008d62:	693b      	ldr	r3, [r7, #16]
10008d64:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008d66:	e019      	b.n	10008d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        case RCC_SAI3CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008d68:	f107 0318 	add.w	r3, r7, #24
10008d6c:	4618      	mov	r0, r3
10008d6e:	f7fc fbff 	bl	10005570 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008d72:	69fb      	ldr	r3, [r7, #28]
10008d74:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008d76:	e011      	b.n	10008d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        case RCC_SAI3CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008d78:	f107 0318 	add.w	r3, r7, #24
10008d7c:	4618      	mov	r0, r3
10008d7e:	f7fc fbf7 	bl	10005570 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10008d82:	6a3b      	ldr	r3, [r7, #32]
10008d84:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008d86:	e009      	b.n	10008d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        case RCC_SAI3CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10008d88:	4b40      	ldr	r3, [pc, #256]	; (10008e8c <HAL_RCCEx_GetPeriphCLKFreq+0xc60>)
10008d8a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008d8c:	e006      	b.n	10008d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        case RCC_SAI2CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008d8e:	f7fc fea9 	bl	10005ae4 <RCC_GetCKPERFreq>
10008d92:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008d94:	e002      	b.n	10008d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        default:
          frequency = 0;
10008d96:	2300      	movs	r3, #0
10008d98:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008d9a:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SAI3
10008d9c:	f000 bd0d 	b.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SPI1:
    {
      clksource = __HAL_RCC_GET_SPI1_SOURCE();
10008da0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008da4:	f8d3 38d8 	ldr.w	r3, [r3, #2264]	; 0x8d8
10008da8:	f003 0307 	and.w	r3, r3, #7
10008dac:	633b      	str	r3, [r7, #48]	; 0x30
10008dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008db0:	2b04      	cmp	r3, #4
10008db2:	d82c      	bhi.n	10008e0e <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
10008db4:	a201      	add	r2, pc, #4	; (adr r2, 10008dbc <HAL_RCCEx_GetPeriphCLKFreq+0xb90>)
10008db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008dba:	bf00      	nop
10008dbc:	10008dd1 	.word	0x10008dd1
10008dc0:	10008de1 	.word	0x10008de1
10008dc4:	10008e01 	.word	0x10008e01
10008dc8:	10008e07 	.word	0x10008e07
10008dcc:	10008df1 	.word	0x10008df1

      switch (clksource)
      {
        case RCC_SPI1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008dd0:	f107 030c 	add.w	r3, r7, #12
10008dd4:	4618      	mov	r0, r3
10008dd6:	f7fc fcc5 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008dda:	693b      	ldr	r3, [r7, #16]
10008ddc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008dde:	e019      	b.n	10008e14 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        case RCC_SPI1CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008de0:	f107 0318 	add.w	r3, r7, #24
10008de4:	4618      	mov	r0, r3
10008de6:	f7fc fbc3 	bl	10005570 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008dea:	69fb      	ldr	r3, [r7, #28]
10008dec:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008dee:	e011      	b.n	10008e14 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        case RCC_SPI1CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008df0:	f107 0318 	add.w	r3, r7, #24
10008df4:	4618      	mov	r0, r3
10008df6:	f7fc fbbb 	bl	10005570 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10008dfa:	6a3b      	ldr	r3, [r7, #32]
10008dfc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008dfe:	e009      	b.n	10008e14 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        case RCC_SPI1CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10008e00:	4b22      	ldr	r3, [pc, #136]	; (10008e8c <HAL_RCCEx_GetPeriphCLKFreq+0xc60>)
10008e02:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008e04:	e006      	b.n	10008e14 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        case RCC_SPI1CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008e06:	f7fc fe6d 	bl	10005ae4 <RCC_GetCKPERFreq>
10008e0a:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008e0c:	e002      	b.n	10008e14 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        default:
          frequency = 0;
10008e0e:	2300      	movs	r3, #0
10008e10:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008e12:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SPI1
10008e14:	f000 bcd1 	b.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SPI45:
    {
      clksource = __HAL_RCC_GET_SPI45_SOURCE();
10008e18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008e1c:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
10008e20:	f003 0307 	and.w	r3, r3, #7
10008e24:	633b      	str	r3, [r7, #48]	; 0x30
10008e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008e28:	2b04      	cmp	r3, #4
10008e2a:	d831      	bhi.n	10008e90 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
10008e2c:	a201      	add	r2, pc, #4	; (adr r2, 10008e34 <HAL_RCCEx_GetPeriphCLKFreq+0xc08>)
10008e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008e32:	bf00      	nop
10008e34:	10008e49 	.word	0x10008e49
10008e38:	10008e51 	.word	0x10008e51
10008e3c:	10008e61 	.word	0x10008e61
10008e40:	10008e75 	.word	0x10008e75
10008e44:	10008e7b 	.word	0x10008e7b

      switch (clksource)
      {
        case RCC_SPI45CLKSOURCE_PCLK2:
          frequency = HAL_RCC_GetPCLK2Freq();
10008e48:	f7fc fdaf 	bl	100059aa <HAL_RCC_GetPCLK2Freq>
10008e4c:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008e4e:	e022      	b.n	10008e96 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>

        case RCC_SPI45CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008e50:	f107 030c 	add.w	r3, r7, #12
10008e54:	4618      	mov	r0, r3
10008e56:	f7fc fc85 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008e5a:	693b      	ldr	r3, [r7, #16]
10008e5c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008e5e:	e01a      	b.n	10008e96 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>

        case RCC_SPI45CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008e60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008e64:	699b      	ldr	r3, [r3, #24]
10008e66:	f003 0303 	and.w	r3, r3, #3
10008e6a:	4a05      	ldr	r2, [pc, #20]	; (10008e80 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>)
10008e6c:	fa22 f303 	lsr.w	r3, r2, r3
10008e70:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008e72:	e010      	b.n	10008e96 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>

        case RCC_SPI45CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008e74:	4b03      	ldr	r3, [pc, #12]	; (10008e84 <HAL_RCCEx_GetPeriphCLKFreq+0xc58>)
10008e76:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008e78:	e00d      	b.n	10008e96 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>

        case RCC_SPI45CLKSOURCE_HSE:
          frequency = HSE_VALUE;
10008e7a:	4b03      	ldr	r3, [pc, #12]	; (10008e88 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
10008e7c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008e7e:	e00a      	b.n	10008e96 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
10008e80:	03d09000 	.word	0x03d09000
10008e84:	003d0900 	.word	0x003d0900
10008e88:	016e3600 	.word	0x016e3600
10008e8c:	00bb8000 	.word	0x00bb8000

        default:
          frequency = 0;
10008e90:	2300      	movs	r3, #0
10008e92:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008e94:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_SPI45 */
10008e96:	f000 bc90 	b.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_USART6:
    {
      clksource = __HAL_RCC_GET_USART6_SOURCE();
10008e9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008e9e:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
10008ea2:	f003 0307 	and.w	r3, r3, #7
10008ea6:	633b      	str	r3, [r7, #48]	; 0x30
10008ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008eaa:	2b04      	cmp	r3, #4
10008eac:	d828      	bhi.n	10008f00 <HAL_RCCEx_GetPeriphCLKFreq+0xcd4>
10008eae:	a201      	add	r2, pc, #4	; (adr r2, 10008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc88>)
10008eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008eb4:	10008ec9 	.word	0x10008ec9
10008eb8:	10008ed1 	.word	0x10008ed1
10008ebc:	10008ee1 	.word	0x10008ee1
10008ec0:	10008ef5 	.word	0x10008ef5
10008ec4:	10008efb 	.word	0x10008efb

      switch (clksource)
      {
        case RCC_USART6CLKSOURCE_PCLK2:
          frequency = HAL_RCC_GetPCLK2Freq();
10008ec8:	f7fc fd6f 	bl	100059aa <HAL_RCC_GetPCLK2Freq>
10008ecc:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008ece:	e01a      	b.n	10008f06 <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        case RCC_USART6CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008ed0:	f107 030c 	add.w	r3, r7, #12
10008ed4:	4618      	mov	r0, r3
10008ed6:	f7fc fc45 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008eda:	693b      	ldr	r3, [r7, #16]
10008edc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008ede:	e012      	b.n	10008f06 <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        case RCC_USART6CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008ee0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008ee4:	699b      	ldr	r3, [r3, #24]
10008ee6:	f003 0303 	and.w	r3, r3, #3
10008eea:	4aa8      	ldr	r2, [pc, #672]	; (1000918c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
10008eec:	fa22 f303 	lsr.w	r3, r2, r3
10008ef0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008ef2:	e008      	b.n	10008f06 <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        case RCC_USART6CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008ef4:	4ba6      	ldr	r3, [pc, #664]	; (10009190 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>)
10008ef6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008ef8:	e005      	b.n	10008f06 <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        case RCC_USART6CLKSOURCE_HSE:
          frequency = HSE_VALUE;
10008efa:	4ba6      	ldr	r3, [pc, #664]	; (10009194 <HAL_RCCEx_GetPeriphCLKFreq+0xf68>)
10008efc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008efe:	e002      	b.n	10008f06 <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        default:
          frequency = 0;
10008f00:	2300      	movs	r3, #0
10008f02:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008f04:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_USART6
10008f06:	f000 bc58 	b.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_LPTIM23:
    {
      clksource = __HAL_RCC_GET_LPTIM23_SOURCE();
10008f0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008f0e:	f8d3 3930 	ldr.w	r3, [r3, #2352]	; 0x930
10008f12:	f003 0307 	and.w	r3, r3, #7
10008f16:	633b      	str	r3, [r7, #48]	; 0x30
10008f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008f1a:	2b04      	cmp	r3, #4
10008f1c:	d824      	bhi.n	10008f68 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>
10008f1e:	a201      	add	r2, pc, #4	; (adr r2, 10008f24 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>)
10008f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008f24:	10008f39 	.word	0x10008f39
10008f28:	10008f41 	.word	0x10008f41
10008f2c:	10008f51 	.word	0x10008f51
10008f30:	10008f59 	.word	0x10008f59
10008f34:	10008f61 	.word	0x10008f61

      switch (clksource)
      {
        case RCC_LPTIM23CLKSOURCE_PCLK3:
          frequency = HAL_RCC_GetPCLK3Freq();
10008f38:	f7fc fd52 	bl	100059e0 <HAL_RCC_GetPCLK3Freq>
10008f3c:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008f3e:	e016      	b.n	10008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        case RCC_LPTIM23CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008f40:	f107 030c 	add.w	r3, r7, #12
10008f44:	4618      	mov	r0, r3
10008f46:	f7fc fc0d 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008f4a:	693b      	ldr	r3, [r7, #16]
10008f4c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008f4e:	e00e      	b.n	10008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        case RCC_LPTIM23CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008f50:	f7fc fdc8 	bl	10005ae4 <RCC_GetCKPERFreq>
10008f54:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008f56:	e00a      	b.n	10008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        case RCC_LPTIM23CLKSOURCE_LSE:
          frequency = LSE_VALUE;
10008f58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10008f5c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008f5e:	e006      	b.n	10008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        case RCC_LPTIM23CLKSOURCE_LSI:
          frequency = LSI_VALUE;
10008f60:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10008f64:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008f66:	e002      	b.n	10008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        default:
          frequency = 0;
10008f68:	2300      	movs	r3, #0
10008f6a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008f6c:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_LPTIM23 */
10008f6e:	f000 bc24 	b.w	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_LPTIM45:
    {
      clksource = __HAL_RCC_GET_LPTIM45_SOURCE();
10008f72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008f76:	f8d3 392c 	ldr.w	r3, [r3, #2348]	; 0x92c
10008f7a:	f003 0307 	and.w	r3, r3, #7
10008f7e:	633b      	str	r3, [r7, #48]	; 0x30
10008f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008f82:	2b05      	cmp	r3, #5
10008f84:	d82e      	bhi.n	10008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>
10008f86:	a201      	add	r2, pc, #4	; (adr r2, 10008f8c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
10008f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008f8c:	10008fa5 	.word	0x10008fa5
10008f90:	10008fad 	.word	0x10008fad
10008f94:	10008fbd 	.word	0x10008fbd
10008f98:	10008fcd 	.word	0x10008fcd
10008f9c:	10008fd5 	.word	0x10008fd5
10008fa0:	10008fdd 	.word	0x10008fdd

      switch (clksource)
      {
        case RCC_LPTIM45CLKSOURCE_PCLK3:
          frequency = HAL_RCC_GetPCLK3Freq();
10008fa4:	f7fc fd1c 	bl	100059e0 <HAL_RCC_GetPCLK3Freq>
10008fa8:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008faa:	e01e      	b.n	10008fea <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008fac:	f107 030c 	add.w	r3, r7, #12
10008fb0:	4618      	mov	r0, r3
10008fb2:	f7fc fbd7 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10008fb6:	68fb      	ldr	r3, [r7, #12]
10008fb8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008fba:	e016      	b.n	10008fea <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008fbc:	f107 0318 	add.w	r3, r7, #24
10008fc0:	4618      	mov	r0, r3
10008fc2:	f7fc fad5 	bl	10005570 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008fc6:	69fb      	ldr	r3, [r7, #28]
10008fc8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008fca:	e00e      	b.n	10008fea <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_LSE:
          frequency = LSE_VALUE;
10008fcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10008fd0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008fd2:	e00a      	b.n	10008fea <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_LSI:
          frequency = LSI_VALUE;
10008fd4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10008fd8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008fda:	e006      	b.n	10008fea <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008fdc:	f7fc fd82 	bl	10005ae4 <RCC_GetCKPERFreq>
10008fe0:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008fe2:	e002      	b.n	10008fea <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        default:
          frequency = 0;
10008fe4:	2300      	movs	r3, #0
10008fe6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008fe8:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_LPTIM45 */
10008fea:	e3e6      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SAI4:
    {
      clksource = __HAL_RCC_GET_SAI4_SOURCE();
10008fec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008ff0:	f8d3 38d4 	ldr.w	r3, [r3, #2260]	; 0x8d4
10008ff4:	f003 0307 	and.w	r3, r3, #7
10008ff8:	633b      	str	r3, [r7, #48]	; 0x30
10008ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008ffc:	2b04      	cmp	r3, #4
10008ffe:	d82c      	bhi.n	1000905a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
10009000:	a201      	add	r2, pc, #4	; (adr r2, 10009008 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>)
10009002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009006:	bf00      	nop
10009008:	1000901d 	.word	0x1000901d
1000900c:	1000902d 	.word	0x1000902d
10009010:	1000904d 	.word	0x1000904d
10009014:	10009053 	.word	0x10009053
10009018:	1000903d 	.word	0x1000903d

      switch (clksource)
      {
        case RCC_SAI4CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000901c:	f107 030c 	add.w	r3, r7, #12
10009020:	4618      	mov	r0, r3
10009022:	f7fc fb9f 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10009026:	693b      	ldr	r3, [r7, #16]
10009028:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000902a:	e019      	b.n	10009060 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        case RCC_SAI4CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000902c:	f107 0318 	add.w	r3, r7, #24
10009030:	4618      	mov	r0, r3
10009032:	f7fc fa9d 	bl	10005570 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10009036:	69fb      	ldr	r3, [r7, #28]
10009038:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000903a:	e011      	b.n	10009060 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        case RCC_SAI4CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000903c:	f107 0318 	add.w	r3, r7, #24
10009040:	4618      	mov	r0, r3
10009042:	f7fc fa95 	bl	10005570 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10009046:	6a3b      	ldr	r3, [r7, #32]
10009048:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000904a:	e009      	b.n	10009060 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        case RCC_SAI4CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
1000904c:	4b52      	ldr	r3, [pc, #328]	; (10009198 <HAL_RCCEx_GetPeriphCLKFreq+0xf6c>)
1000904e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009050:	e006      	b.n	10009060 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        case RCC_SAI4CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10009052:	f7fc fd47 	bl	10005ae4 <RCC_GetCKPERFreq>
10009056:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10009058:	e002      	b.n	10009060 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        default:
          frequency = 0;
1000905a:	2300      	movs	r3, #0
1000905c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000905e:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SAI4
10009060:	e3ab      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_TEMP:
    {
      frequency = LSE_VALUE;
10009062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10009066:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_TEMP
10009068:	e3a7      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


#if defined(DSI)
    case RCC_PERIPHCLK_DSI:
    {
      clksource = __HAL_RCC_GET_DSI_SOURCE();
1000906a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000906e:	f8d3 3924 	ldr.w	r3, [r3, #2340]	; 0x924
10009072:	f003 0301 	and.w	r3, r3, #1
10009076:	633b      	str	r3, [r7, #48]	; 0x30
10009078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000907a:	2b00      	cmp	r3, #0
1000907c:	d003      	beq.n	10009086 <HAL_RCCEx_GetPeriphCLKFreq+0xe5a>
1000907e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009080:	2b01      	cmp	r3, #1
10009082:	d003      	beq.n	1000908c <HAL_RCCEx_GetPeriphCLKFreq+0xe60>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
          frequency = pll4_clocks.PLL4_P_Frequency;
          break;
      }
    }
    break;//RCC_PERIPHCLK_DSI
10009084:	e399      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
          frequency = 0;
10009086:	2300      	movs	r3, #0
10009088:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000908a:	e007      	b.n	1000909c <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000908c:	f107 030c 	add.w	r3, r7, #12
10009090:	4618      	mov	r0, r3
10009092:	f7fc fb67 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10009096:	68fb      	ldr	r3, [r7, #12]
10009098:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000909a:	bf00      	nop
    break;//RCC_PERIPHCLK_DSI
1000909c:	e38d      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
#endif /*DSI*/

    case RCC_PERIPHCLK_LTDC:
    {
      HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000909e:	f107 030c 	add.w	r3, r7, #12
100090a2:	4618      	mov	r0, r3
100090a4:	f7fc fb5e 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
      frequency = pll4_clocks.PLL4_Q_Frequency;
100090a8:	693b      	ldr	r3, [r7, #16]
100090aa:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_LTDC
100090ac:	e385      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_USBPHY:
    {
      clksource = __HAL_RCC_GET_USBPHY_SOURCE();
100090ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100090b2:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
100090b6:	f003 0303 	and.w	r3, r3, #3
100090ba:	633b      	str	r3, [r7, #48]	; 0x30
100090bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100090be:	2b02      	cmp	r3, #2
100090c0:	d014      	beq.n	100090ec <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
100090c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100090c4:	2b02      	cmp	r3, #2
100090c6:	d814      	bhi.n	100090f2 <HAL_RCCEx_GetPeriphCLKFreq+0xec6>
100090c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100090ca:	2b00      	cmp	r3, #0
100090cc:	d003      	beq.n	100090d6 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
100090ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100090d0:	2b01      	cmp	r3, #1
100090d2:	d003      	beq.n	100090dc <HAL_RCCEx_GetPeriphCLKFreq+0xeb0>
100090d4:	e00d      	b.n	100090f2 <HAL_RCCEx_GetPeriphCLKFreq+0xec6>

      switch (clksource)
      {
        case RCC_USBPHYCLKSOURCE_HSE:
          frequency = HSE_VALUE;
100090d6:	4b2f      	ldr	r3, [pc, #188]	; (10009194 <HAL_RCCEx_GetPeriphCLKFreq+0xf68>)
100090d8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100090da:	e00d      	b.n	100090f8 <HAL_RCCEx_GetPeriphCLKFreq+0xecc>

        case RCC_USBPHYCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100090dc:	f107 030c 	add.w	r3, r7, #12
100090e0:	4618      	mov	r0, r3
100090e2:	f7fc fb3f 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
100090e6:	697b      	ldr	r3, [r7, #20]
100090e8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100090ea:	e005      	b.n	100090f8 <HAL_RCCEx_GetPeriphCLKFreq+0xecc>

        case RCC_USBPHYCLKSOURCE_HSE2:
          frequency = (HSE_VALUE / 2UL);
100090ec:	4b2b      	ldr	r3, [pc, #172]	; (1000919c <HAL_RCCEx_GetPeriphCLKFreq+0xf70>)
100090ee:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100090f0:	e002      	b.n	100090f8 <HAL_RCCEx_GetPeriphCLKFreq+0xecc>

        default:
          frequency = 0;
100090f2:	2300      	movs	r3, #0
100090f4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100090f6:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_USBPHY
100090f8:	e35f      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_IWDG2:
    {
      frequency = LSI_VALUE;
100090fa:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
100090fe:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_IWDG2
10009100:	e35b      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_DDRPHYC:
    {
      HAL_RCC_GetPLL2ClockFreq(&pll2_clocks);
10009102:	f107 0324 	add.w	r3, r7, #36	; 0x24
10009106:	4618      	mov	r0, r3
10009108:	f7fc f946 	bl	10005398 <HAL_RCC_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
1000910c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000910e:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_DDRPHYC
10009110:	e353      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_RTC:
    {
      clksource = __HAL_RCC_GET_RTC_SOURCE();
10009112:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009116:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000911a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
1000911e:	633b      	str	r3, [r7, #48]	; 0x30
10009120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009122:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
10009126:	d020      	beq.n	1000916a <HAL_RCCEx_GetPeriphCLKFreq+0xf3e>
10009128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000912a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
1000912e:	f200 8339 	bhi.w	100097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1578>
10009132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009134:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
10009138:	d013      	beq.n	10009162 <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
1000913a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000913c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
10009140:	f200 8330 	bhi.w	100097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1578>
10009144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009146:	2b00      	cmp	r3, #0
10009148:	d004      	beq.n	10009154 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
1000914a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000914c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
10009150:	d003      	beq.n	1000915a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        case RCC_RTCCLKSOURCE_HSE_DIV:
          frequency = (HSE_VALUE / __HAL_RCC_GET_RTC_HSEDIV());
          break;
      }
    }
    break;//RCC_PERIPHCLK_RTC
10009152:	e327      	b.n	100097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1578>
          frequency = 0;
10009154:	2300      	movs	r3, #0
10009156:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009158:	e012      	b.n	10009180 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>
          frequency = LSE_VALUE;
1000915a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
1000915e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009160:	e00e      	b.n	10009180 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>
          frequency = LSI_VALUE;
10009162:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10009166:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009168:	e00a      	b.n	10009180 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>
          frequency = (HSE_VALUE / __HAL_RCC_GET_RTC_HSEDIV());
1000916a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000916e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10009170:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10009174:	3301      	adds	r3, #1
10009176:	4a07      	ldr	r2, [pc, #28]	; (10009194 <HAL_RCCEx_GetPeriphCLKFreq+0xf68>)
10009178:	fbb2 f3f3 	udiv	r3, r2, r3
1000917c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000917e:	bf00      	nop
    break;//RCC_PERIPHCLK_RTC
10009180:	e310      	b.n	100097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1578>


    case RCC_PERIPHCLK_IWDG1:
    {
      frequency = LSI_VALUE;
10009182:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10009186:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_IWDG1
10009188:	e317      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000918a:	bf00      	nop
1000918c:	03d09000 	.word	0x03d09000
10009190:	003d0900 	.word	0x003d0900
10009194:	016e3600 	.word	0x016e3600
10009198:	00bb8000 	.word	0x00bb8000
1000919c:	00b71b00 	.word	0x00b71b00


    case RCC_PERIPHCLK_I2C46:
    {
      clksource = __HAL_RCC_GET_I2C46_SOURCE();
100091a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100091a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
100091a8:	f003 0307 	and.w	r3, r3, #7
100091ac:	633b      	str	r3, [r7, #48]	; 0x30
100091ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100091b0:	2b03      	cmp	r3, #3
100091b2:	d824      	bhi.n	100091fe <HAL_RCCEx_GetPeriphCLKFreq+0xfd2>
100091b4:	a201      	add	r2, pc, #4	; (adr r2, 100091bc <HAL_RCCEx_GetPeriphCLKFreq+0xf90>)
100091b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100091ba:	bf00      	nop
100091bc:	100091cd 	.word	0x100091cd
100091c0:	100091d5 	.word	0x100091d5
100091c4:	100091e5 	.word	0x100091e5
100091c8:	100091f9 	.word	0x100091f9

      switch (clksource)
      {
        case RCC_I2C46CLKSOURCE_PCLK5:
          frequency = HAL_RCC_GetPCLK5Freq();
100091cc:	f7fc fc23 	bl	10005a16 <HAL_RCC_GetPCLK5Freq>
100091d0:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100091d2:	e017      	b.n	10009204 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>

        case RCC_I2C46CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100091d4:	f107 0318 	add.w	r3, r7, #24
100091d8:	4618      	mov	r0, r3
100091da:	f7fc f9c9 	bl	10005570 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
100091de:	69fb      	ldr	r3, [r7, #28]
100091e0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100091e2:	e00f      	b.n	10009204 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>

        case RCC_I2C46CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100091e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100091e8:	699b      	ldr	r3, [r3, #24]
100091ea:	f003 0303 	and.w	r3, r3, #3
100091ee:	4ab3      	ldr	r2, [pc, #716]	; (100094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1290>)
100091f0:	fa22 f303 	lsr.w	r3, r2, r3
100091f4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100091f6:	e005      	b.n	10009204 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>

        case RCC_I2C46CLKSOURCE_CSI:
          frequency = CSI_VALUE;
100091f8:	4bb1      	ldr	r3, [pc, #708]	; (100094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
100091fa:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100091fc:	e002      	b.n	10009204 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>

        default:
          frequency = 0;
100091fe:	2300      	movs	r3, #0
10009200:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009202:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_I2C46 */
10009204:	e2d9      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SPI6:
    {
      clksource = __HAL_RCC_GET_SPI6_SOURCE();
10009206:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000920a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
1000920e:	f003 0307 	and.w	r3, r3, #7
10009212:	633b      	str	r3, [r7, #48]	; 0x30
10009214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009216:	2b05      	cmp	r3, #5
10009218:	d832      	bhi.n	10009280 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
1000921a:	a201      	add	r2, pc, #4	; (adr r2, 10009220 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
1000921c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009220:	10009239 	.word	0x10009239
10009224:	10009241 	.word	0x10009241
10009228:	10009251 	.word	0x10009251
1000922c:	10009265 	.word	0x10009265
10009230:	1000926b 	.word	0x1000926b
10009234:	10009271 	.word	0x10009271

      switch (clksource)
      {
        case RCC_SPI6CLKSOURCE_PCLK5:
          frequency = HAL_RCC_GetPCLK5Freq();
10009238:	f7fc fbed 	bl	10005a16 <HAL_RCC_GetPCLK5Freq>
1000923c:	6378      	str	r0, [r7, #52]	; 0x34
          break;
1000923e:	e022      	b.n	10009286 <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10009240:	f107 030c 	add.w	r3, r7, #12
10009244:	4618      	mov	r0, r3
10009246:	f7fc fa8d 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000924a:	693b      	ldr	r3, [r7, #16]
1000924c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000924e:	e01a      	b.n	10009286 <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10009250:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009254:	699b      	ldr	r3, [r3, #24]
10009256:	f003 0303 	and.w	r3, r3, #3
1000925a:	4a98      	ldr	r2, [pc, #608]	; (100094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1290>)
1000925c:	fa22 f303 	lsr.w	r3, r2, r3
10009260:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009262:	e010      	b.n	10009286 <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10009264:	4b96      	ldr	r3, [pc, #600]	; (100094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
10009266:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009268:	e00d      	b.n	10009286 <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_HSE:
          frequency = HSE_VALUE;
1000926a:	4b96      	ldr	r3, [pc, #600]	; (100094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
1000926c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000926e:	e00a      	b.n	10009286 <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10009270:	f107 0318 	add.w	r3, r7, #24
10009274:	4618      	mov	r0, r3
10009276:	f7fc f97b 	bl	10005570 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
1000927a:	69fb      	ldr	r3, [r7, #28]
1000927c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000927e:	e002      	b.n	10009286 <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        default:
          frequency = 0;
10009280:	2300      	movs	r3, #0
10009282:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009284:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SPI6
10009286:	e298      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_USART1:
    {
      clksource = __HAL_RCC_GET_USART1_SOURCE();
10009288:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000928c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10009290:	f003 0307 	and.w	r3, r3, #7
10009294:	633b      	str	r3, [r7, #48]	; 0x30
10009296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009298:	2b05      	cmp	r3, #5
1000929a:	d833      	bhi.n	10009304 <HAL_RCCEx_GetPeriphCLKFreq+0x10d8>
1000929c:	a201      	add	r2, pc, #4	; (adr r2, 100092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1078>)
1000929e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100092a2:	bf00      	nop
100092a4:	100092bd 	.word	0x100092bd
100092a8:	100092c5 	.word	0x100092c5
100092ac:	100092d5 	.word	0x100092d5
100092b0:	100092e9 	.word	0x100092e9
100092b4:	100092ef 	.word	0x100092ef
100092b8:	100092ff 	.word	0x100092ff

      switch (clksource)
      {
        case RCC_USART1CLKSOURCE_PCLK5:
          frequency = HAL_RCC_GetPCLK5Freq();
100092bc:	f7fc fbab 	bl	10005a16 <HAL_RCC_GetPCLK5Freq>
100092c0:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100092c2:	e022      	b.n	1000930a <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100092c4:	f107 0318 	add.w	r3, r7, #24
100092c8:	4618      	mov	r0, r3
100092ca:	f7fc f951 	bl	10005570 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
100092ce:	69fb      	ldr	r3, [r7, #28]
100092d0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100092d2:	e01a      	b.n	1000930a <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100092d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100092d8:	699b      	ldr	r3, [r3, #24]
100092da:	f003 0303 	and.w	r3, r3, #3
100092de:	4a77      	ldr	r2, [pc, #476]	; (100094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1290>)
100092e0:	fa22 f303 	lsr.w	r3, r2, r3
100092e4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100092e6:	e010      	b.n	1000930a <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_CSI:
          frequency = CSI_VALUE;
100092e8:	4b75      	ldr	r3, [pc, #468]	; (100094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
100092ea:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100092ec:	e00d      	b.n	1000930a <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100092ee:	f107 030c 	add.w	r3, r7, #12
100092f2:	4618      	mov	r0, r3
100092f4:	f7fc fa36 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
100092f8:	693b      	ldr	r3, [r7, #16]
100092fa:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100092fc:	e005      	b.n	1000930a <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_HSE:
          frequency = HSE_VALUE;
100092fe:	4b71      	ldr	r3, [pc, #452]	; (100094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
10009300:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009302:	e002      	b.n	1000930a <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        default:
          frequency = 0;
10009304:	2300      	movs	r3, #0
10009306:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009308:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_USART1
1000930a:	e256      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_STGEN:
    {
      clksource = __HAL_RCC_GET_STGEN_SOURCE();
1000930c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009310:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
10009314:	f003 0303 	and.w	r3, r3, #3
10009318:	633b      	str	r3, [r7, #48]	; 0x30
1000931a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000931c:	2b00      	cmp	r3, #0
1000931e:	d003      	beq.n	10009328 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
10009320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009322:	2b01      	cmp	r3, #1
10009324:	d00a      	beq.n	1000933c <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
10009326:	e00c      	b.n	10009342 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>

      switch (clksource)
      {
        case RCC_STGENCLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10009328:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000932c:	699b      	ldr	r3, [r3, #24]
1000932e:	f003 0303 	and.w	r3, r3, #3
10009332:	4a62      	ldr	r2, [pc, #392]	; (100094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1290>)
10009334:	fa22 f303 	lsr.w	r3, r2, r3
10009338:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000933a:	e005      	b.n	10009348 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>

        case RCC_STGENCLKSOURCE_HSE:
          frequency = HSE_VALUE;
1000933c:	4b61      	ldr	r3, [pc, #388]	; (100094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
1000933e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009340:	e002      	b.n	10009348 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>

        default:
          frequency = 0;
10009342:	2300      	movs	r3, #0
10009344:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009346:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_STGEN
10009348:	e237      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_QSPI:
    {
      clksource = __HAL_RCC_GET_QSPI_SOURCE();
1000934a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000934e:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
10009352:	f003 0303 	and.w	r3, r3, #3
10009356:	633b      	str	r3, [r7, #48]	; 0x30
10009358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000935a:	2b03      	cmp	r3, #3
1000935c:	d822      	bhi.n	100093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
1000935e:	a201      	add	r2, pc, #4	; (adr r2, 10009364 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
10009360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009364:	10009375 	.word	0x10009375
10009368:	1000937d 	.word	0x1000937d
1000936c:	1000938d 	.word	0x1000938d
10009370:	1000939d 	.word	0x1000939d

      switch (clksource)
      {
        case RCC_QSPICLKSOURCE_ACLK:
          frequency = HAL_RCC_GetACLKFreq();
10009374:	f7fc fb69 	bl	10005a4a <HAL_RCC_GetACLKFreq>
10009378:	6378      	str	r0, [r7, #52]	; 0x34
          break;
1000937a:	e016      	b.n	100093aa <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

        case RCC_QSPICLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000937c:	f107 0318 	add.w	r3, r7, #24
10009380:	4618      	mov	r0, r3
10009382:	f7fc f8f5 	bl	10005570 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10009386:	6a3b      	ldr	r3, [r7, #32]
10009388:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000938a:	e00e      	b.n	100093aa <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

        case RCC_QSPICLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000938c:	f107 030c 	add.w	r3, r7, #12
10009390:	4618      	mov	r0, r3
10009392:	f7fc f9e7 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10009396:	68fb      	ldr	r3, [r7, #12]
10009398:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000939a:	e006      	b.n	100093aa <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

        case RCC_QSPICLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
1000939c:	f7fc fba2 	bl	10005ae4 <RCC_GetCKPERFreq>
100093a0:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100093a2:	e002      	b.n	100093aa <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

        default:
          frequency = 0;
100093a4:	2300      	movs	r3, #0
100093a6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100093a8:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_QSPI
100093aa:	e206      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_ETH:
    {
      clksource = __HAL_RCC_GET_ETH_SOURCE();
100093ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100093b0:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
100093b4:	f003 0303 	and.w	r3, r3, #3
100093b8:	633b      	str	r3, [r7, #48]	; 0x30
100093ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100093bc:	2b00      	cmp	r3, #0
100093be:	d003      	beq.n	100093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x119c>
100093c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100093c2:	2b01      	cmp	r3, #1
100093c4:	d008      	beq.n	100093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x11ac>
100093c6:	e00f      	b.n	100093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>

      switch (clksource)
      {
        case RCC_ETHCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100093c8:	f107 030c 	add.w	r3, r7, #12
100093cc:	4618      	mov	r0, r3
100093ce:	f7fc f9c9 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
100093d2:	68fb      	ldr	r3, [r7, #12]
100093d4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100093d6:	e00a      	b.n	100093ee <HAL_RCCEx_GetPeriphCLKFreq+0x11c2>

        case RCC_ETHCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100093d8:	f107 0318 	add.w	r3, r7, #24
100093dc:	4618      	mov	r0, r3
100093de:	f7fc f8c7 	bl	10005570 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
100093e2:	69fb      	ldr	r3, [r7, #28]
100093e4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100093e6:	e002      	b.n	100093ee <HAL_RCCEx_GetPeriphCLKFreq+0x11c2>

        default:
          frequency = 0;
100093e8:	2300      	movs	r3, #0
100093ea:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100093ec:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_ETH
100093ee:	e1e4      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_FMC:
    {
      clksource = __HAL_RCC_GET_FMC_SOURCE();
100093f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100093f4:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
100093f8:	f003 0303 	and.w	r3, r3, #3
100093fc:	633b      	str	r3, [r7, #48]	; 0x30
100093fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009400:	2b03      	cmp	r3, #3
10009402:	f200 81d1 	bhi.w	100097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x157c>
10009406:	a201      	add	r2, pc, #4	; (adr r2, 1000940c <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
10009408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000940c:	1000941d 	.word	0x1000941d
10009410:	10009425 	.word	0x10009425
10009414:	10009435 	.word	0x10009435
10009418:	10009445 	.word	0x10009445

      switch (clksource)
      {
        case RCC_FMCCLKSOURCE_ACLK:
          frequency = HAL_RCC_GetACLKFreq();
1000941c:	f7fc fb15 	bl	10005a4a <HAL_RCC_GetACLKFreq>
10009420:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10009422:	e013      	b.n	1000944c <HAL_RCCEx_GetPeriphCLKFreq+0x1220>

        case RCC_FMCCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10009424:	f107 0318 	add.w	r3, r7, #24
10009428:	4618      	mov	r0, r3
1000942a:	f7fc f8a1 	bl	10005570 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
1000942e:	6a3b      	ldr	r3, [r7, #32]
10009430:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009432:	e00b      	b.n	1000944c <HAL_RCCEx_GetPeriphCLKFreq+0x1220>

        case RCC_FMCCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10009434:	f107 030c 	add.w	r3, r7, #12
10009438:	4618      	mov	r0, r3
1000943a:	f7fc f993 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
1000943e:	68fb      	ldr	r3, [r7, #12]
10009440:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009442:	e003      	b.n	1000944c <HAL_RCCEx_GetPeriphCLKFreq+0x1220>

        case RCC_FMCCLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10009444:	f7fc fb4e 	bl	10005ae4 <RCC_GetCKPERFreq>
10009448:	6378      	str	r0, [r7, #52]	; 0x34
          break;
1000944a:	bf00      	nop

      }
    }
    break;//RCC_PERIPHCLK_FMC
1000944c:	e1ac      	b.n	100097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x157c>


    case RCC_PERIPHCLK_GPU:
    {
      HAL_RCC_GetPLL2ClockFreq(&pll2_clocks);
1000944e:	f107 0324 	add.w	r3, r7, #36	; 0x24
10009452:	4618      	mov	r0, r3
10009454:	f7fb ffa0 	bl	10005398 <HAL_RCC_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_Q_Frequency;
10009458:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000945a:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_GPU
1000945c:	e1ad      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_USBO:
    {
      clksource = __HAL_RCC_GET_USBO_SOURCE();
1000945e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009462:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
10009466:	f003 0310 	and.w	r3, r3, #16
1000946a:	633b      	str	r3, [r7, #48]	; 0x30
1000946c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000946e:	2b00      	cmp	r3, #0
10009470:	d003      	beq.n	1000947a <HAL_RCCEx_GetPeriphCLKFreq+0x124e>
10009472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009474:	2b10      	cmp	r3, #16
10009476:	d008      	beq.n	1000948a <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
        case RCC_USBOCLKSOURCE_PHY:
          frequency = USB_PHY_VALUE;
          break;
      }
    }
    break;//RCC_PERIPHCLK_USBO
10009478:	e19f      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000947a:	f107 030c 	add.w	r3, r7, #12
1000947e:	4618      	mov	r0, r3
10009480:	f7fc f970 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10009484:	697b      	ldr	r3, [r7, #20]
10009486:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009488:	e002      	b.n	10009490 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>
          frequency = USB_PHY_VALUE;
1000948a:	4b0f      	ldr	r3, [pc, #60]	; (100094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
1000948c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000948e:	bf00      	nop
    break;//RCC_PERIPHCLK_USBO
10009490:	e193      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SDMMC3:
    {
      clksource = __HAL_RCC_GET_SDMMC3_SOURCE();
10009492:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009496:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
1000949a:	f003 0307 	and.w	r3, r3, #7
1000949e:	633b      	str	r3, [r7, #48]	; 0x30
100094a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100094a2:	2b03      	cmp	r3, #3
100094a4:	d830      	bhi.n	10009508 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
100094a6:	a201      	add	r2, pc, #4	; (adr r2, 100094ac <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
100094a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100094ac:	100094cd 	.word	0x100094cd
100094b0:	100094d5 	.word	0x100094d5
100094b4:	100094e5 	.word	0x100094e5
100094b8:	100094f5 	.word	0x100094f5
100094bc:	03d09000 	.word	0x03d09000
100094c0:	003d0900 	.word	0x003d0900
100094c4:	016e3600 	.word	0x016e3600
100094c8:	02dc6c00 	.word	0x02dc6c00

      switch (clksource)
      {
        case RCC_SDMMC3CLKSOURCE_HCLK2:
          frequency = HAL_RCC_GetHCLK2Freq();
100094cc:	f7fc fae1 	bl	10005a92 <HAL_RCC_GetHCLK2Freq>
100094d0:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100094d2:	e01c      	b.n	1000950e <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>

        case RCC_SDMMC3CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100094d4:	f107 0318 	add.w	r3, r7, #24
100094d8:	4618      	mov	r0, r3
100094da:	f7fc f849 	bl	10005570 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
100094de:	6a3b      	ldr	r3, [r7, #32]
100094e0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100094e2:	e014      	b.n	1000950e <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>

        case RCC_SDMMC3CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100094e4:	f107 030c 	add.w	r3, r7, #12
100094e8:	4618      	mov	r0, r3
100094ea:	f7fc f93b 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
100094ee:	68fb      	ldr	r3, [r7, #12]
100094f0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100094f2:	e00c      	b.n	1000950e <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>

        case RCC_SDMMC3CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100094f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100094f8:	699b      	ldr	r3, [r3, #24]
100094fa:	f003 0303 	and.w	r3, r3, #3
100094fe:	4ab1      	ldr	r2, [pc, #708]	; (100097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
10009500:	fa22 f303 	lsr.w	r3, r2, r3
10009504:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009506:	e002      	b.n	1000950e <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>

        default:
          frequency = 0;
10009508:	2300      	movs	r3, #0
1000950a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000950c:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SDMMC3
1000950e:	e154      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_ADC:
    {
      clksource = __HAL_RCC_GET_ADC_SOURCE();
10009510:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009514:	f8d3 3928 	ldr.w	r3, [r3, #2344]	; 0x928
10009518:	f003 0303 	and.w	r3, r3, #3
1000951c:	633b      	str	r3, [r7, #48]	; 0x30
1000951e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009520:	2b02      	cmp	r3, #2
10009522:	d015      	beq.n	10009550 <HAL_RCCEx_GetPeriphCLKFreq+0x1324>
10009524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009526:	2b02      	cmp	r3, #2
10009528:	d81a      	bhi.n	10009560 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
1000952a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000952c:	2b00      	cmp	r3, #0
1000952e:	d003      	beq.n	10009538 <HAL_RCCEx_GetPeriphCLKFreq+0x130c>
10009530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009532:	2b01      	cmp	r3, #1
10009534:	d008      	beq.n	10009548 <HAL_RCCEx_GetPeriphCLKFreq+0x131c>
10009536:	e013      	b.n	10009560 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>

      switch (clksource)
      {
        case RCC_ADCCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10009538:	f107 030c 	add.w	r3, r7, #12
1000953c:	4618      	mov	r0, r3
1000953e:	f7fc f911 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10009542:	697b      	ldr	r3, [r7, #20]
10009544:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009546:	e00e      	b.n	10009566 <HAL_RCCEx_GetPeriphCLKFreq+0x133a>

        case RCC_ADCCLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10009548:	f7fc facc 	bl	10005ae4 <RCC_GetCKPERFreq>
1000954c:	6378      	str	r0, [r7, #52]	; 0x34
          break;
1000954e:	e00a      	b.n	10009566 <HAL_RCCEx_GetPeriphCLKFreq+0x133a>

        case RCC_ADCCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10009550:	f107 0318 	add.w	r3, r7, #24
10009554:	4618      	mov	r0, r3
10009556:	f7fc f80b 	bl	10005570 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
1000955a:	69fb      	ldr	r3, [r7, #28]
1000955c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000955e:	e002      	b.n	10009566 <HAL_RCCEx_GetPeriphCLKFreq+0x133a>

        default:
          frequency = 0;
10009560:	2300      	movs	r3, #0
10009562:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009564:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_ADC */
10009566:	e128      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_RNG2:
    {
      clksource = __HAL_RCC_GET_RNG2_SOURCE();
10009568:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000956c:	f8d3 3920 	ldr.w	r3, [r3, #2336]	; 0x920
10009570:	f003 0303 	and.w	r3, r3, #3
10009574:	633b      	str	r3, [r7, #48]	; 0x30
10009576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009578:	2b03      	cmp	r3, #3
1000957a:	f200 8117 	bhi.w	100097ac <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
1000957e:	a201      	add	r2, pc, #4	; (adr r2, 10009584 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>)
10009580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009584:	10009595 	.word	0x10009595
10009588:	1000959b 	.word	0x1000959b
1000958c:	100095ab 	.word	0x100095ab
10009590:	100095b3 	.word	0x100095b3

      switch (clksource)
      {
        case RCC_RNG2CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10009594:	4b8c      	ldr	r3, [pc, #560]	; (100097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
10009596:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009598:	e00f      	b.n	100095ba <HAL_RCCEx_GetPeriphCLKFreq+0x138e>

        case RCC_RNG2CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000959a:	f107 030c 	add.w	r3, r7, #12
1000959e:	4618      	mov	r0, r3
100095a0:	f7fc f8e0 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
100095a4:	697b      	ldr	r3, [r7, #20]
100095a6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100095a8:	e007      	b.n	100095ba <HAL_RCCEx_GetPeriphCLKFreq+0x138e>

        case RCC_RNG2CLKSOURCE_LSE:
          frequency = LSE_VALUE;
100095aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
100095ae:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100095b0:	e003      	b.n	100095ba <HAL_RCCEx_GetPeriphCLKFreq+0x138e>

        case RCC_RNG2CLKSOURCE_LSI:
          frequency = LSI_VALUE;
100095b2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
100095b6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100095b8:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_RNG2
100095ba:	e0f7      	b.n	100097ac <HAL_RCCEx_GetPeriphCLKFreq+0x1580>


    case RCC_PERIPHCLK_RNG1:
    {
      clksource = __HAL_RCC_GET_RNG1_SOURCE();
100095bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100095c0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
100095c4:	f003 0303 	and.w	r3, r3, #3
100095c8:	633b      	str	r3, [r7, #48]	; 0x30
100095ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100095cc:	2b03      	cmp	r3, #3
100095ce:	f200 80ef 	bhi.w	100097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1584>
100095d2:	a201      	add	r2, pc, #4	; (adr r2, 100095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
100095d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100095d8:	100095e9 	.word	0x100095e9
100095dc:	100095ef 	.word	0x100095ef
100095e0:	100095ff 	.word	0x100095ff
100095e4:	10009607 	.word	0x10009607

      switch (clksource)
      {
        case RCC_RNG1CLKSOURCE_CSI:
          frequency = CSI_VALUE;
100095e8:	4b77      	ldr	r3, [pc, #476]	; (100097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
100095ea:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100095ec:	e00f      	b.n	1000960e <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>

        case RCC_RNG1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100095ee:	f107 030c 	add.w	r3, r7, #12
100095f2:	4618      	mov	r0, r3
100095f4:	f7fc f8b6 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
100095f8:	697b      	ldr	r3, [r7, #20]
100095fa:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100095fc:	e007      	b.n	1000960e <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>

        case RCC_RNG1CLKSOURCE_LSE:
          frequency = LSE_VALUE;
100095fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10009602:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009604:	e003      	b.n	1000960e <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>

        case RCC_RNG1CLKSOURCE_LSI:
          frequency = LSI_VALUE;
10009606:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
1000960a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000960c:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_RNG1
1000960e:	e0cf      	b.n	100097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1584>

    case RCC_PERIPHCLK_SDMMC12:
    {
      clksource = __HAL_RCC_GET_SDMMC12_SOURCE();
10009610:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009614:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
10009618:	f003 0307 	and.w	r3, r3, #7
1000961c:	633b      	str	r3, [r7, #48]	; 0x30
1000961e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009620:	2b03      	cmp	r3, #3
10009622:	d829      	bhi.n	10009678 <HAL_RCCEx_GetPeriphCLKFreq+0x144c>
10009624:	a201      	add	r2, pc, #4	; (adr r2, 1000962c <HAL_RCCEx_GetPeriphCLKFreq+0x1400>)
10009626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000962a:	bf00      	nop
1000962c:	1000963d 	.word	0x1000963d
10009630:	10009645 	.word	0x10009645
10009634:	10009655 	.word	0x10009655
10009638:	10009665 	.word	0x10009665

      switch (clksource)
      {
        case RCC_SDMMC12CLKSOURCE_HCLK6:
          frequency = HAL_RCC_GetHCLK6Freq();
1000963c:	f7fc fa22 	bl	10005a84 <HAL_RCC_GetHCLK6Freq>
10009640:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10009642:	e01c      	b.n	1000967e <HAL_RCCEx_GetPeriphCLKFreq+0x1452>

        case RCC_SDMMC12CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10009644:	f107 0318 	add.w	r3, r7, #24
10009648:	4618      	mov	r0, r3
1000964a:	f7fb ff91 	bl	10005570 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
1000964e:	6a3b      	ldr	r3, [r7, #32]
10009650:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009652:	e014      	b.n	1000967e <HAL_RCCEx_GetPeriphCLKFreq+0x1452>

        case RCC_SDMMC12CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10009654:	f107 030c 	add.w	r3, r7, #12
10009658:	4618      	mov	r0, r3
1000965a:	f7fc f883 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
1000965e:	68fb      	ldr	r3, [r7, #12]
10009660:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009662:	e00c      	b.n	1000967e <HAL_RCCEx_GetPeriphCLKFreq+0x1452>

        case RCC_SDMMC12CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10009664:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009668:	699b      	ldr	r3, [r3, #24]
1000966a:	f003 0303 	and.w	r3, r3, #3
1000966e:	4a55      	ldr	r2, [pc, #340]	; (100097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
10009670:	fa22 f303 	lsr.w	r3, r2, r3
10009674:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10009676:	e002      	b.n	1000967e <HAL_RCCEx_GetPeriphCLKFreq+0x1452>

        default:
          frequency = 0;
10009678:	2300      	movs	r3, #0
1000967a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000967c:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_SDMMC12 */
1000967e:	e09c      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_TIMG1:
    {
      frequency = HAL_RCC_GetMCUFreq();
10009680:	f7fc fa15 	bl	10005aae <HAL_RCC_GetMCUFreq>
10009684:	6378      	str	r0, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_TIMG1PRES() == RCC_TIMG1PRES_ACTIVATED)
10009686:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000968a:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
1000968e:	f003 0301 	and.w	r3, r3, #1
10009692:	2b01      	cmp	r3, #1
10009694:	d116      	bne.n	100096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
      {
        switch (__HAL_RCC_GET_APB1_DIV())
10009696:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000969a:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
1000969e:	f003 0307 	and.w	r3, r3, #7
100096a2:	2b04      	cmp	r3, #4
100096a4:	d00a      	beq.n	100096bc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
100096a6:	2b04      	cmp	r3, #4
100096a8:	f200 8084 	bhi.w	100097b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
100096ac:	2b02      	cmp	r3, #2
100096ae:	d92b      	bls.n	10009708 <HAL_RCCEx_GetPeriphCLKFreq+0x14dc>
100096b0:	2b03      	cmp	r3, #3
100096b2:	d17f      	bne.n	100097b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
          case RCC_APB1_DIV1:
          case RCC_APB1_DIV2:
          case RCC_APB1_DIV4:
            break;
          case RCC_APB1_DIV8:
            frequency /= 2UL;
100096b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100096b6:	085b      	lsrs	r3, r3, #1
100096b8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
100096ba:	e028      	b.n	1000970e <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
          case RCC_APB1_DIV16:
            frequency /= 4UL;
100096bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100096be:	089b      	lsrs	r3, r3, #2
100096c0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
100096c2:	e024      	b.n	1000970e <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
        }
      }
      else
      {
        switch (__HAL_RCC_GET_APB1_DIV())
100096c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100096c8:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
100096cc:	f003 0307 	and.w	r3, r3, #7
100096d0:	2b04      	cmp	r3, #4
100096d2:	d86f      	bhi.n	100097b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
100096d4:	a201      	add	r2, pc, #4	; (adr r2, 100096dc <HAL_RCCEx_GetPeriphCLKFreq+0x14b0>)
100096d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100096da:	bf00      	nop
100096dc:	1000970d 	.word	0x1000970d
100096e0:	1000970d 	.word	0x1000970d
100096e4:	100096f1 	.word	0x100096f1
100096e8:	100096f9 	.word	0x100096f9
100096ec:	10009701 	.word	0x10009701
        {
          case RCC_APB1_DIV1:
          case RCC_APB1_DIV2:
            break;
          case RCC_APB1_DIV4:
            frequency /= 2UL;
100096f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100096f2:	085b      	lsrs	r3, r3, #1
100096f4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
100096f6:	e00a      	b.n	1000970e <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
          case RCC_APB1_DIV8:
            frequency /= 4UL;
100096f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100096fa:	089b      	lsrs	r3, r3, #2
100096fc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
100096fe:	e006      	b.n	1000970e <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
          case RCC_APB1_DIV16:
            frequency /= 8UL;
10009700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10009702:	08db      	lsrs	r3, r3, #3
10009704:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10009706:	e002      	b.n	1000970e <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
            break;
10009708:	bf00      	nop
1000970a:	e053      	b.n	100097b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
            break;
1000970c:	bf00      	nop
        }
      }
    }
    break;
1000970e:	e051      	b.n	100097b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>


    case RCC_PERIPHCLK_TIMG2:
    {
      frequency = HAL_RCC_GetMCUFreq();
10009710:	f7fc f9cd 	bl	10005aae <HAL_RCC_GetMCUFreq>
10009714:	6378      	str	r0, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_TIMG2PRES() == RCC_TIMG2PRES_ACTIVATED)
10009716:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000971a:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
1000971e:	f003 0301 	and.w	r3, r3, #1
10009722:	2b01      	cmp	r3, #1
10009724:	d115      	bne.n	10009752 <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
      {
        switch (__HAL_RCC_GET_APB2_DIV())
10009726:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000972a:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
1000972e:	f003 0307 	and.w	r3, r3, #7
10009732:	2b04      	cmp	r3, #4
10009734:	d009      	beq.n	1000974a <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
10009736:	2b04      	cmp	r3, #4
10009738:	d83e      	bhi.n	100097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
1000973a:	2b02      	cmp	r3, #2
1000973c:	d92a      	bls.n	10009794 <HAL_RCCEx_GetPeriphCLKFreq+0x1568>
1000973e:	2b03      	cmp	r3, #3
10009740:	d13a      	bne.n	100097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
          case RCC_APB2_DIV1:
          case RCC_APB2_DIV2:
          case RCC_APB2_DIV4:
            break;
          case RCC_APB2_DIV8:
            frequency /= 2UL;
10009742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10009744:	085b      	lsrs	r3, r3, #1
10009746:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10009748:	e027      	b.n	1000979a <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
          case RCC_APB2_DIV16:
            frequency /= 4UL;
1000974a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000974c:	089b      	lsrs	r3, r3, #2
1000974e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10009750:	e023      	b.n	1000979a <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
        }
      }
      else
      {
        switch (__HAL_RCC_GET_APB2_DIV())
10009752:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009756:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
1000975a:	f003 0307 	and.w	r3, r3, #7
1000975e:	2b04      	cmp	r3, #4
10009760:	d82a      	bhi.n	100097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
10009762:	a201      	add	r2, pc, #4	; (adr r2, 10009768 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
10009764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009768:	10009799 	.word	0x10009799
1000976c:	10009799 	.word	0x10009799
10009770:	1000977d 	.word	0x1000977d
10009774:	10009785 	.word	0x10009785
10009778:	1000978d 	.word	0x1000978d
        {
          case RCC_APB2_DIV1:
          case RCC_APB2_DIV2:
            break;
          case RCC_APB2_DIV4:
            frequency /= 2UL;
1000977c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000977e:	085b      	lsrs	r3, r3, #1
10009780:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10009782:	e00a      	b.n	1000979a <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
          case RCC_APB2_DIV8:
            frequency /= 4UL;
10009784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10009786:	089b      	lsrs	r3, r3, #2
10009788:	637b      	str	r3, [r7, #52]	; 0x34
            break;
1000978a:	e006      	b.n	1000979a <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
          case RCC_APB2_DIV16:
            frequency /= 8UL;
1000978c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000978e:	08db      	lsrs	r3, r3, #3
10009790:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10009792:	e002      	b.n	1000979a <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
            break;
10009794:	bf00      	nop
10009796:	e00f      	b.n	100097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
            break;
10009798:	bf00      	nop
        }
      }
    }
    break;
1000979a:	e00d      	b.n	100097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
      break; /* RCC_PERIPHCLK_I2C12 */
1000979c:	bf00      	nop
1000979e:	e00c      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
      break; /* RCC_PERIPHCLK_I2C35 */
100097a0:	bf00      	nop
100097a2:	e00a      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;//RCC_PERIPHCLK_RTC
100097a4:	bf00      	nop
100097a6:	e008      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;//RCC_PERIPHCLK_FMC
100097a8:	bf00      	nop
100097aa:	e006      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;//RCC_PERIPHCLK_RNG2
100097ac:	bf00      	nop
100097ae:	e004      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;//RCC_PERIPHCLK_RNG1
100097b0:	bf00      	nop
100097b2:	e002      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;
100097b4:	bf00      	nop
100097b6:	e000      	b.n	100097ba <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;
100097b8:	bf00      	nop

  }

  return (frequency);
100097ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
100097bc:	4618      	mov	r0, r3
100097be:	373c      	adds	r7, #60	; 0x3c
100097c0:	46bd      	mov	sp, r7
100097c2:	bd90      	pop	{r4, r7, pc}
100097c4:	03d09000 	.word	0x03d09000
100097c8:	003d0900 	.word	0x003d0900

100097cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
100097cc:	b580      	push	{r7, lr}
100097ce:	b082      	sub	sp, #8
100097d0:	af00      	add	r7, sp, #0
100097d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
100097d4:	687b      	ldr	r3, [r7, #4]
100097d6:	2b00      	cmp	r3, #0
100097d8:	d101      	bne.n	100097de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
100097da:	2301      	movs	r3, #1
100097dc:	e01d      	b.n	1000981a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
100097de:	687b      	ldr	r3, [r7, #4]
100097e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
100097e4:	b2db      	uxtb	r3, r3
100097e6:	2b00      	cmp	r3, #0
100097e8:	d106      	bne.n	100097f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
100097ea:	687b      	ldr	r3, [r7, #4]
100097ec:	2200      	movs	r2, #0
100097ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
100097f2:	6878      	ldr	r0, [r7, #4]
100097f4:	f7f7 ff8a 	bl	1000170c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
100097f8:	687b      	ldr	r3, [r7, #4]
100097fa:	2202      	movs	r2, #2
100097fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
10009800:	687b      	ldr	r3, [r7, #4]
10009802:	681a      	ldr	r2, [r3, #0]
10009804:	687b      	ldr	r3, [r7, #4]
10009806:	3304      	adds	r3, #4
10009808:	4619      	mov	r1, r3
1000980a:	4610      	mov	r0, r2
1000980c:	f000 f834 	bl	10009878 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
10009810:	687b      	ldr	r3, [r7, #4]
10009812:	2201      	movs	r2, #1
10009814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
10009818:	2300      	movs	r3, #0
}
1000981a:	4618      	mov	r0, r3
1000981c:	3708      	adds	r7, #8
1000981e:	46bd      	mov	sp, r7
10009820:	bd80      	pop	{r7, pc}
	...

10009824 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
10009824:	b480      	push	{r7}
10009826:	b085      	sub	sp, #20
10009828:	af00      	add	r7, sp, #0
1000982a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
1000982c:	687b      	ldr	r3, [r7, #4]
1000982e:	2202      	movs	r2, #2
10009830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
10009834:	687b      	ldr	r3, [r7, #4]
10009836:	681b      	ldr	r3, [r3, #0]
10009838:	689a      	ldr	r2, [r3, #8]
1000983a:	4b0e      	ldr	r3, [pc, #56]	; (10009874 <HAL_TIM_Base_Start+0x50>)
1000983c:	4013      	ands	r3, r2
1000983e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
10009840:	68fb      	ldr	r3, [r7, #12]
10009842:	2b06      	cmp	r3, #6
10009844:	d00b      	beq.n	1000985e <HAL_TIM_Base_Start+0x3a>
10009846:	68fb      	ldr	r3, [r7, #12]
10009848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
1000984c:	d007      	beq.n	1000985e <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
1000984e:	687b      	ldr	r3, [r7, #4]
10009850:	681b      	ldr	r3, [r3, #0]
10009852:	681a      	ldr	r2, [r3, #0]
10009854:	687b      	ldr	r3, [r7, #4]
10009856:	681b      	ldr	r3, [r3, #0]
10009858:	f042 0201 	orr.w	r2, r2, #1
1000985c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
1000985e:	687b      	ldr	r3, [r7, #4]
10009860:	2201      	movs	r2, #1
10009862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
10009866:	2300      	movs	r3, #0
}
10009868:	4618      	mov	r0, r3
1000986a:	3714      	adds	r7, #20
1000986c:	46bd      	mov	sp, r7
1000986e:	f85d 7b04 	ldr.w	r7, [sp], #4
10009872:	4770      	bx	lr
10009874:	00010007 	.word	0x00010007

10009878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
10009878:	b480      	push	{r7}
1000987a:	b085      	sub	sp, #20
1000987c:	af00      	add	r7, sp, #0
1000987e:	6078      	str	r0, [r7, #4]
10009880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
10009882:	687b      	ldr	r3, [r7, #4]
10009884:	681b      	ldr	r3, [r3, #0]
10009886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
10009888:	687b      	ldr	r3, [r7, #4]
1000988a:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
1000988e:	d013      	beq.n	100098b8 <TIM_Base_SetConfig+0x40>
10009890:	687b      	ldr	r3, [r7, #4]
10009892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
10009896:	d00f      	beq.n	100098b8 <TIM_Base_SetConfig+0x40>
10009898:	687b      	ldr	r3, [r7, #4]
1000989a:	4a3c      	ldr	r2, [pc, #240]	; (1000998c <TIM_Base_SetConfig+0x114>)
1000989c:	4293      	cmp	r3, r2
1000989e:	d00b      	beq.n	100098b8 <TIM_Base_SetConfig+0x40>
100098a0:	687b      	ldr	r3, [r7, #4]
100098a2:	4a3b      	ldr	r2, [pc, #236]	; (10009990 <TIM_Base_SetConfig+0x118>)
100098a4:	4293      	cmp	r3, r2
100098a6:	d007      	beq.n	100098b8 <TIM_Base_SetConfig+0x40>
100098a8:	687b      	ldr	r3, [r7, #4]
100098aa:	4a3a      	ldr	r2, [pc, #232]	; (10009994 <TIM_Base_SetConfig+0x11c>)
100098ac:	4293      	cmp	r3, r2
100098ae:	d003      	beq.n	100098b8 <TIM_Base_SetConfig+0x40>
100098b0:	687b      	ldr	r3, [r7, #4]
100098b2:	4a39      	ldr	r2, [pc, #228]	; (10009998 <TIM_Base_SetConfig+0x120>)
100098b4:	4293      	cmp	r3, r2
100098b6:	d108      	bne.n	100098ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
100098b8:	68fb      	ldr	r3, [r7, #12]
100098ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100098be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
100098c0:	683b      	ldr	r3, [r7, #0]
100098c2:	685b      	ldr	r3, [r3, #4]
100098c4:	68fa      	ldr	r2, [r7, #12]
100098c6:	4313      	orrs	r3, r2
100098c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
100098ca:	687b      	ldr	r3, [r7, #4]
100098cc:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
100098d0:	d01f      	beq.n	10009912 <TIM_Base_SetConfig+0x9a>
100098d2:	687b      	ldr	r3, [r7, #4]
100098d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
100098d8:	d01b      	beq.n	10009912 <TIM_Base_SetConfig+0x9a>
100098da:	687b      	ldr	r3, [r7, #4]
100098dc:	4a2b      	ldr	r2, [pc, #172]	; (1000998c <TIM_Base_SetConfig+0x114>)
100098de:	4293      	cmp	r3, r2
100098e0:	d017      	beq.n	10009912 <TIM_Base_SetConfig+0x9a>
100098e2:	687b      	ldr	r3, [r7, #4]
100098e4:	4a2a      	ldr	r2, [pc, #168]	; (10009990 <TIM_Base_SetConfig+0x118>)
100098e6:	4293      	cmp	r3, r2
100098e8:	d013      	beq.n	10009912 <TIM_Base_SetConfig+0x9a>
100098ea:	687b      	ldr	r3, [r7, #4]
100098ec:	4a29      	ldr	r2, [pc, #164]	; (10009994 <TIM_Base_SetConfig+0x11c>)
100098ee:	4293      	cmp	r3, r2
100098f0:	d00f      	beq.n	10009912 <TIM_Base_SetConfig+0x9a>
100098f2:	687b      	ldr	r3, [r7, #4]
100098f4:	4a28      	ldr	r2, [pc, #160]	; (10009998 <TIM_Base_SetConfig+0x120>)
100098f6:	4293      	cmp	r3, r2
100098f8:	d00b      	beq.n	10009912 <TIM_Base_SetConfig+0x9a>
100098fa:	687b      	ldr	r3, [r7, #4]
100098fc:	4a27      	ldr	r2, [pc, #156]	; (1000999c <TIM_Base_SetConfig+0x124>)
100098fe:	4293      	cmp	r3, r2
10009900:	d007      	beq.n	10009912 <TIM_Base_SetConfig+0x9a>
10009902:	687b      	ldr	r3, [r7, #4]
10009904:	4a26      	ldr	r2, [pc, #152]	; (100099a0 <TIM_Base_SetConfig+0x128>)
10009906:	4293      	cmp	r3, r2
10009908:	d003      	beq.n	10009912 <TIM_Base_SetConfig+0x9a>
1000990a:	687b      	ldr	r3, [r7, #4]
1000990c:	4a25      	ldr	r2, [pc, #148]	; (100099a4 <TIM_Base_SetConfig+0x12c>)
1000990e:	4293      	cmp	r3, r2
10009910:	d108      	bne.n	10009924 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
10009912:	68fb      	ldr	r3, [r7, #12]
10009914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
10009918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
1000991a:	683b      	ldr	r3, [r7, #0]
1000991c:	68db      	ldr	r3, [r3, #12]
1000991e:	68fa      	ldr	r2, [r7, #12]
10009920:	4313      	orrs	r3, r2
10009922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
10009924:	68fb      	ldr	r3, [r7, #12]
10009926:	f023 0280 	bic.w	r2, r3, #128	; 0x80
1000992a:	683b      	ldr	r3, [r7, #0]
1000992c:	695b      	ldr	r3, [r3, #20]
1000992e:	4313      	orrs	r3, r2
10009930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
10009932:	687b      	ldr	r3, [r7, #4]
10009934:	68fa      	ldr	r2, [r7, #12]
10009936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
10009938:	683b      	ldr	r3, [r7, #0]
1000993a:	689a      	ldr	r2, [r3, #8]
1000993c:	687b      	ldr	r3, [r7, #4]
1000993e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
10009940:	683b      	ldr	r3, [r7, #0]
10009942:	681a      	ldr	r2, [r3, #0]
10009944:	687b      	ldr	r3, [r7, #4]
10009946:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
10009948:	687b      	ldr	r3, [r7, #4]
1000994a:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
1000994e:	d00f      	beq.n	10009970 <TIM_Base_SetConfig+0xf8>
10009950:	687b      	ldr	r3, [r7, #4]
10009952:	4a11      	ldr	r2, [pc, #68]	; (10009998 <TIM_Base_SetConfig+0x120>)
10009954:	4293      	cmp	r3, r2
10009956:	d00b      	beq.n	10009970 <TIM_Base_SetConfig+0xf8>
10009958:	687b      	ldr	r3, [r7, #4]
1000995a:	4a10      	ldr	r2, [pc, #64]	; (1000999c <TIM_Base_SetConfig+0x124>)
1000995c:	4293      	cmp	r3, r2
1000995e:	d007      	beq.n	10009970 <TIM_Base_SetConfig+0xf8>
10009960:	687b      	ldr	r3, [r7, #4]
10009962:	4a0f      	ldr	r2, [pc, #60]	; (100099a0 <TIM_Base_SetConfig+0x128>)
10009964:	4293      	cmp	r3, r2
10009966:	d003      	beq.n	10009970 <TIM_Base_SetConfig+0xf8>
10009968:	687b      	ldr	r3, [r7, #4]
1000996a:	4a0e      	ldr	r2, [pc, #56]	; (100099a4 <TIM_Base_SetConfig+0x12c>)
1000996c:	4293      	cmp	r3, r2
1000996e:	d103      	bne.n	10009978 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
10009970:	683b      	ldr	r3, [r7, #0]
10009972:	691a      	ldr	r2, [r3, #16]
10009974:	687b      	ldr	r3, [r7, #4]
10009976:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
10009978:	687b      	ldr	r3, [r7, #4]
1000997a:	2201      	movs	r2, #1
1000997c:	615a      	str	r2, [r3, #20]
}
1000997e:	bf00      	nop
10009980:	3714      	adds	r7, #20
10009982:	46bd      	mov	sp, r7
10009984:	f85d 7b04 	ldr.w	r7, [sp], #4
10009988:	4770      	bx	lr
1000998a:	bf00      	nop
1000998c:	40001000 	.word	0x40001000
10009990:	40002000 	.word	0x40002000
10009994:	40003000 	.word	0x40003000
10009998:	44001000 	.word	0x44001000
1000999c:	44006000 	.word	0x44006000
100099a0:	44007000 	.word	0x44007000
100099a4:	44008000 	.word	0x44008000

100099a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
100099a8:	b580      	push	{r7, lr}
100099aa:	b082      	sub	sp, #8
100099ac:	af00      	add	r7, sp, #0
100099ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
100099b0:	687b      	ldr	r3, [r7, #4]
100099b2:	2b00      	cmp	r3, #0
100099b4:	d101      	bne.n	100099ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
100099b6:	2301      	movs	r3, #1
100099b8:	e042      	b.n	10009a40 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
100099ba:	687b      	ldr	r3, [r7, #4]
100099bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
100099c0:	2b00      	cmp	r3, #0
100099c2:	d106      	bne.n	100099d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
100099c4:	687b      	ldr	r3, [r7, #4]
100099c6:	2200      	movs	r2, #0
100099c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
100099cc:	6878      	ldr	r0, [r7, #4]
100099ce:	f7f7 feb3 	bl	10001738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
100099d2:	687b      	ldr	r3, [r7, #4]
100099d4:	2224      	movs	r2, #36	; 0x24
100099d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
100099da:	687b      	ldr	r3, [r7, #4]
100099dc:	681b      	ldr	r3, [r3, #0]
100099de:	681a      	ldr	r2, [r3, #0]
100099e0:	687b      	ldr	r3, [r7, #4]
100099e2:	681b      	ldr	r3, [r3, #0]
100099e4:	f022 0201 	bic.w	r2, r2, #1
100099e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
100099ea:	6878      	ldr	r0, [r7, #4]
100099ec:	f000 f8c4 	bl	10009b78 <UART_SetConfig>
100099f0:	4603      	mov	r3, r0
100099f2:	2b01      	cmp	r3, #1
100099f4:	d101      	bne.n	100099fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
100099f6:	2301      	movs	r3, #1
100099f8:	e022      	b.n	10009a40 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
100099fa:	687b      	ldr	r3, [r7, #4]
100099fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100099fe:	2b00      	cmp	r3, #0
10009a00:	d002      	beq.n	10009a08 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
10009a02:	6878      	ldr	r0, [r7, #4]
10009a04:	f001 f95e 	bl	1000acc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
10009a08:	687b      	ldr	r3, [r7, #4]
10009a0a:	681b      	ldr	r3, [r3, #0]
10009a0c:	685a      	ldr	r2, [r3, #4]
10009a0e:	687b      	ldr	r3, [r7, #4]
10009a10:	681b      	ldr	r3, [r3, #0]
10009a12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
10009a16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
10009a18:	687b      	ldr	r3, [r7, #4]
10009a1a:	681b      	ldr	r3, [r3, #0]
10009a1c:	689a      	ldr	r2, [r3, #8]
10009a1e:	687b      	ldr	r3, [r7, #4]
10009a20:	681b      	ldr	r3, [r3, #0]
10009a22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
10009a26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
10009a28:	687b      	ldr	r3, [r7, #4]
10009a2a:	681b      	ldr	r3, [r3, #0]
10009a2c:	681a      	ldr	r2, [r3, #0]
10009a2e:	687b      	ldr	r3, [r7, #4]
10009a30:	681b      	ldr	r3, [r3, #0]
10009a32:	f042 0201 	orr.w	r2, r2, #1
10009a36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
10009a38:	6878      	ldr	r0, [r7, #4]
10009a3a:	f001 f9e5 	bl	1000ae08 <UART_CheckIdleState>
10009a3e:	4603      	mov	r3, r0
}
10009a40:	4618      	mov	r0, r3
10009a42:	3708      	adds	r7, #8
10009a44:	46bd      	mov	sp, r7
10009a46:	bd80      	pop	{r7, pc}

10009a48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
10009a48:	b580      	push	{r7, lr}
10009a4a:	b08a      	sub	sp, #40	; 0x28
10009a4c:	af02      	add	r7, sp, #8
10009a4e:	60f8      	str	r0, [r7, #12]
10009a50:	60b9      	str	r1, [r7, #8]
10009a52:	603b      	str	r3, [r7, #0]
10009a54:	4613      	mov	r3, r2
10009a56:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
10009a58:	68fb      	ldr	r3, [r7, #12]
10009a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10009a5e:	2b20      	cmp	r3, #32
10009a60:	f040 8084 	bne.w	10009b6c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
10009a64:	68bb      	ldr	r3, [r7, #8]
10009a66:	2b00      	cmp	r3, #0
10009a68:	d002      	beq.n	10009a70 <HAL_UART_Transmit+0x28>
10009a6a:	88fb      	ldrh	r3, [r7, #6]
10009a6c:	2b00      	cmp	r3, #0
10009a6e:	d101      	bne.n	10009a74 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
10009a70:	2301      	movs	r3, #1
10009a72:	e07c      	b.n	10009b6e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
10009a74:	68fb      	ldr	r3, [r7, #12]
10009a76:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
10009a7a:	2b01      	cmp	r3, #1
10009a7c:	d101      	bne.n	10009a82 <HAL_UART_Transmit+0x3a>
10009a7e:	2302      	movs	r3, #2
10009a80:	e075      	b.n	10009b6e <HAL_UART_Transmit+0x126>
10009a82:	68fb      	ldr	r3, [r7, #12]
10009a84:	2201      	movs	r2, #1
10009a86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    huart->ErrorCode = HAL_UART_ERROR_NONE;
10009a8a:	68fb      	ldr	r3, [r7, #12]
10009a8c:	2200      	movs	r2, #0
10009a8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
10009a92:	68fb      	ldr	r3, [r7, #12]
10009a94:	2221      	movs	r2, #33	; 0x21
10009a96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
10009a9a:	f7f7 ffbb 	bl	10001a14 <HAL_GetTick>
10009a9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
10009aa0:	68fb      	ldr	r3, [r7, #12]
10009aa2:	88fa      	ldrh	r2, [r7, #6]
10009aa4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
10009aa8:	68fb      	ldr	r3, [r7, #12]
10009aaa:	88fa      	ldrh	r2, [r7, #6]
10009aac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
10009ab0:	68fb      	ldr	r3, [r7, #12]
10009ab2:	689b      	ldr	r3, [r3, #8]
10009ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
10009ab8:	d108      	bne.n	10009acc <HAL_UART_Transmit+0x84>
10009aba:	68fb      	ldr	r3, [r7, #12]
10009abc:	691b      	ldr	r3, [r3, #16]
10009abe:	2b00      	cmp	r3, #0
10009ac0:	d104      	bne.n	10009acc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
10009ac2:	2300      	movs	r3, #0
10009ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
10009ac6:	68bb      	ldr	r3, [r7, #8]
10009ac8:	61bb      	str	r3, [r7, #24]
10009aca:	e003      	b.n	10009ad4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
10009acc:	68bb      	ldr	r3, [r7, #8]
10009ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
10009ad0:	2300      	movs	r3, #0
10009ad2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
10009ad4:	68fb      	ldr	r3, [r7, #12]
10009ad6:	2200      	movs	r2, #0
10009ad8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    while (huart->TxXferCount > 0U)
10009adc:	e02d      	b.n	10009b3a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
10009ade:	683b      	ldr	r3, [r7, #0]
10009ae0:	9300      	str	r3, [sp, #0]
10009ae2:	697b      	ldr	r3, [r7, #20]
10009ae4:	2200      	movs	r2, #0
10009ae6:	2180      	movs	r1, #128	; 0x80
10009ae8:	68f8      	ldr	r0, [r7, #12]
10009aea:	f001 f9d5 	bl	1000ae98 <UART_WaitOnFlagUntilTimeout>
10009aee:	4603      	mov	r3, r0
10009af0:	2b00      	cmp	r3, #0
10009af2:	d001      	beq.n	10009af8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
10009af4:	2303      	movs	r3, #3
10009af6:	e03a      	b.n	10009b6e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
10009af8:	69fb      	ldr	r3, [r7, #28]
10009afa:	2b00      	cmp	r3, #0
10009afc:	d10b      	bne.n	10009b16 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
10009afe:	69bb      	ldr	r3, [r7, #24]
10009b00:	881a      	ldrh	r2, [r3, #0]
10009b02:	68fb      	ldr	r3, [r7, #12]
10009b04:	681b      	ldr	r3, [r3, #0]
10009b06:	f3c2 0208 	ubfx	r2, r2, #0, #9
10009b0a:	b292      	uxth	r2, r2
10009b0c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
10009b0e:	69bb      	ldr	r3, [r7, #24]
10009b10:	3302      	adds	r3, #2
10009b12:	61bb      	str	r3, [r7, #24]
10009b14:	e008      	b.n	10009b28 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
10009b16:	69fb      	ldr	r3, [r7, #28]
10009b18:	781a      	ldrb	r2, [r3, #0]
10009b1a:	68fb      	ldr	r3, [r7, #12]
10009b1c:	681b      	ldr	r3, [r3, #0]
10009b1e:	b292      	uxth	r2, r2
10009b20:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
10009b22:	69fb      	ldr	r3, [r7, #28]
10009b24:	3301      	adds	r3, #1
10009b26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
10009b28:	68fb      	ldr	r3, [r7, #12]
10009b2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
10009b2e:	b29b      	uxth	r3, r3
10009b30:	3b01      	subs	r3, #1
10009b32:	b29a      	uxth	r2, r3
10009b34:	68fb      	ldr	r3, [r7, #12]
10009b36:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
10009b3a:	68fb      	ldr	r3, [r7, #12]
10009b3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
10009b40:	b29b      	uxth	r3, r3
10009b42:	2b00      	cmp	r3, #0
10009b44:	d1cb      	bne.n	10009ade <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
10009b46:	683b      	ldr	r3, [r7, #0]
10009b48:	9300      	str	r3, [sp, #0]
10009b4a:	697b      	ldr	r3, [r7, #20]
10009b4c:	2200      	movs	r2, #0
10009b4e:	2140      	movs	r1, #64	; 0x40
10009b50:	68f8      	ldr	r0, [r7, #12]
10009b52:	f001 f9a1 	bl	1000ae98 <UART_WaitOnFlagUntilTimeout>
10009b56:	4603      	mov	r3, r0
10009b58:	2b00      	cmp	r3, #0
10009b5a:	d001      	beq.n	10009b60 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
10009b5c:	2303      	movs	r3, #3
10009b5e:	e006      	b.n	10009b6e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
10009b60:	68fb      	ldr	r3, [r7, #12]
10009b62:	2220      	movs	r2, #32
10009b64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
10009b68:	2300      	movs	r3, #0
10009b6a:	e000      	b.n	10009b6e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
10009b6c:	2302      	movs	r3, #2
  }
}
10009b6e:	4618      	mov	r0, r3
10009b70:	3720      	adds	r7, #32
10009b72:	46bd      	mov	sp, r7
10009b74:	bd80      	pop	{r7, pc}
	...

10009b78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
10009b78:	b580      	push	{r7, lr}
10009b7a:	b08e      	sub	sp, #56	; 0x38
10009b7c:	af00      	add	r7, sp, #0
10009b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
10009b80:	2300      	movs	r3, #0
10009b82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_StatusTypeDef ret               = HAL_OK;
10009b84:	2300      	movs	r3, #0
10009b86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
10009b8a:	687b      	ldr	r3, [r7, #4]
10009b8c:	689a      	ldr	r2, [r3, #8]
10009b8e:	687b      	ldr	r3, [r7, #4]
10009b90:	691b      	ldr	r3, [r3, #16]
10009b92:	431a      	orrs	r2, r3
10009b94:	687b      	ldr	r3, [r7, #4]
10009b96:	695b      	ldr	r3, [r3, #20]
10009b98:	431a      	orrs	r2, r3
10009b9a:	687b      	ldr	r3, [r7, #4]
10009b9c:	69db      	ldr	r3, [r3, #28]
10009b9e:	4313      	orrs	r3, r2
10009ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  tmpreg |= (uint32_t)huart->FifoMode;
10009ba2:	687b      	ldr	r3, [r7, #4]
10009ba4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
10009ba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
10009ba8:	4313      	orrs	r3, r2
10009baa:	62bb      	str	r3, [r7, #40]	; 0x28
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
10009bac:	687b      	ldr	r3, [r7, #4]
10009bae:	681b      	ldr	r3, [r3, #0]
10009bb0:	681a      	ldr	r2, [r3, #0]
10009bb2:	4bb1      	ldr	r3, [pc, #708]	; (10009e78 <UART_SetConfig+0x300>)
10009bb4:	4013      	ands	r3, r2
10009bb6:	687a      	ldr	r2, [r7, #4]
10009bb8:	6812      	ldr	r2, [r2, #0]
10009bba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
10009bbc:	430b      	orrs	r3, r1
10009bbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
10009bc0:	687b      	ldr	r3, [r7, #4]
10009bc2:	681b      	ldr	r3, [r3, #0]
10009bc4:	685b      	ldr	r3, [r3, #4]
10009bc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
10009bca:	687b      	ldr	r3, [r7, #4]
10009bcc:	68da      	ldr	r2, [r3, #12]
10009bce:	687b      	ldr	r3, [r7, #4]
10009bd0:	681b      	ldr	r3, [r3, #0]
10009bd2:	430a      	orrs	r2, r1
10009bd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
10009bd6:	687b      	ldr	r3, [r7, #4]
10009bd8:	699b      	ldr	r3, [r3, #24]
10009bda:	62bb      	str	r3, [r7, #40]	; 0x28

  tmpreg |= huart->Init.OneBitSampling;
10009bdc:	687b      	ldr	r3, [r7, #4]
10009bde:	6a1b      	ldr	r3, [r3, #32]
10009be0:	6aba      	ldr	r2, [r7, #40]	; 0x28
10009be2:	4313      	orrs	r3, r2
10009be4:	62bb      	str	r3, [r7, #40]	; 0x28
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
10009be6:	687b      	ldr	r3, [r7, #4]
10009be8:	681b      	ldr	r3, [r3, #0]
10009bea:	689b      	ldr	r3, [r3, #8]
10009bec:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
10009bf0:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
10009bf4:	687a      	ldr	r2, [r7, #4]
10009bf6:	6812      	ldr	r2, [r2, #0]
10009bf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
10009bfa:	430b      	orrs	r3, r1
10009bfc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
10009bfe:	687b      	ldr	r3, [r7, #4]
10009c00:	681b      	ldr	r3, [r3, #0]
10009c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10009c04:	f023 010f 	bic.w	r1, r3, #15
10009c08:	687b      	ldr	r3, [r7, #4]
10009c0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10009c0c:	687b      	ldr	r3, [r7, #4]
10009c0e:	681b      	ldr	r3, [r3, #0]
10009c10:	430a      	orrs	r2, r1
10009c12:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
10009c14:	687b      	ldr	r3, [r7, #4]
10009c16:	681b      	ldr	r3, [r3, #0]
10009c18:	f1b3 4fb8 	cmp.w	r3, #1543503872	; 0x5c000000
10009c1c:	d132      	bne.n	10009c84 <UART_SetConfig+0x10c>
10009c1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009c22:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10009c26:	f003 0307 	and.w	r3, r3, #7
10009c2a:	2b05      	cmp	r3, #5
10009c2c:	d826      	bhi.n	10009c7c <UART_SetConfig+0x104>
10009c2e:	a201      	add	r2, pc, #4	; (adr r2, 10009c34 <UART_SetConfig+0xbc>)
10009c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009c34:	10009c4d 	.word	0x10009c4d
10009c38:	10009c55 	.word	0x10009c55
10009c3c:	10009c5d 	.word	0x10009c5d
10009c40:	10009c65 	.word	0x10009c65
10009c44:	10009c6d 	.word	0x10009c6d
10009c48:	10009c75 	.word	0x10009c75
10009c4c:	2302      	movs	r3, #2
10009c4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009c52:	e184      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009c54:	2304      	movs	r3, #4
10009c56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009c5a:	e180      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009c5c:	2310      	movs	r3, #16
10009c5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009c62:	e17c      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009c64:	2320      	movs	r3, #32
10009c66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009c6a:	e178      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009c6c:	2308      	movs	r3, #8
10009c6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009c72:	e174      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009c74:	2340      	movs	r3, #64	; 0x40
10009c76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009c7a:	e170      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009c7c:	2380      	movs	r3, #128	; 0x80
10009c7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009c82:	e16c      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009c84:	687b      	ldr	r3, [r7, #4]
10009c86:	681b      	ldr	r3, [r3, #0]
10009c88:	4a7c      	ldr	r2, [pc, #496]	; (10009e7c <UART_SetConfig+0x304>)
10009c8a:	4293      	cmp	r3, r2
10009c8c:	d12c      	bne.n	10009ce8 <UART_SetConfig+0x170>
10009c8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009c92:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
10009c96:	f003 0307 	and.w	r3, r3, #7
10009c9a:	2b04      	cmp	r3, #4
10009c9c:	d820      	bhi.n	10009ce0 <UART_SetConfig+0x168>
10009c9e:	a201      	add	r2, pc, #4	; (adr r2, 10009ca4 <UART_SetConfig+0x12c>)
10009ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009ca4:	10009cb9 	.word	0x10009cb9
10009ca8:	10009cc1 	.word	0x10009cc1
10009cac:	10009cc9 	.word	0x10009cc9
10009cb0:	10009cd1 	.word	0x10009cd1
10009cb4:	10009cd9 	.word	0x10009cd9
10009cb8:	2300      	movs	r3, #0
10009cba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009cbe:	e14e      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009cc0:	2308      	movs	r3, #8
10009cc2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009cc6:	e14a      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009cc8:	2310      	movs	r3, #16
10009cca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009cce:	e146      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009cd0:	2320      	movs	r3, #32
10009cd2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009cd6:	e142      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009cd8:	2340      	movs	r3, #64	; 0x40
10009cda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009cde:	e13e      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009ce0:	2380      	movs	r3, #128	; 0x80
10009ce2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009ce6:	e13a      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009ce8:	687b      	ldr	r3, [r7, #4]
10009cea:	681b      	ldr	r3, [r3, #0]
10009cec:	4a64      	ldr	r2, [pc, #400]	; (10009e80 <UART_SetConfig+0x308>)
10009cee:	4293      	cmp	r3, r2
10009cf0:	d12c      	bne.n	10009d4c <UART_SetConfig+0x1d4>
10009cf2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009cf6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
10009cfa:	f003 0307 	and.w	r3, r3, #7
10009cfe:	2b04      	cmp	r3, #4
10009d00:	d820      	bhi.n	10009d44 <UART_SetConfig+0x1cc>
10009d02:	a201      	add	r2, pc, #4	; (adr r2, 10009d08 <UART_SetConfig+0x190>)
10009d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009d08:	10009d1d 	.word	0x10009d1d
10009d0c:	10009d25 	.word	0x10009d25
10009d10:	10009d2d 	.word	0x10009d2d
10009d14:	10009d35 	.word	0x10009d35
10009d18:	10009d3d 	.word	0x10009d3d
10009d1c:	2300      	movs	r3, #0
10009d1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009d22:	e11c      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009d24:	2308      	movs	r3, #8
10009d26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009d2a:	e118      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009d2c:	2310      	movs	r3, #16
10009d2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009d32:	e114      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009d34:	2320      	movs	r3, #32
10009d36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009d3a:	e110      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009d3c:	2340      	movs	r3, #64	; 0x40
10009d3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009d42:	e10c      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009d44:	2380      	movs	r3, #128	; 0x80
10009d46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009d4a:	e108      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009d4c:	687b      	ldr	r3, [r7, #4]
10009d4e:	681b      	ldr	r3, [r3, #0]
10009d50:	4a4c      	ldr	r2, [pc, #304]	; (10009e84 <UART_SetConfig+0x30c>)
10009d52:	4293      	cmp	r3, r2
10009d54:	d12c      	bne.n	10009db0 <UART_SetConfig+0x238>
10009d56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009d5a:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
10009d5e:	f003 0307 	and.w	r3, r3, #7
10009d62:	2b04      	cmp	r3, #4
10009d64:	d820      	bhi.n	10009da8 <UART_SetConfig+0x230>
10009d66:	a201      	add	r2, pc, #4	; (adr r2, 10009d6c <UART_SetConfig+0x1f4>)
10009d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009d6c:	10009d81 	.word	0x10009d81
10009d70:	10009d89 	.word	0x10009d89
10009d74:	10009d91 	.word	0x10009d91
10009d78:	10009d99 	.word	0x10009d99
10009d7c:	10009da1 	.word	0x10009da1
10009d80:	2300      	movs	r3, #0
10009d82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009d86:	e0ea      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009d88:	2308      	movs	r3, #8
10009d8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009d8e:	e0e6      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009d90:	2310      	movs	r3, #16
10009d92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009d96:	e0e2      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009d98:	2320      	movs	r3, #32
10009d9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009d9e:	e0de      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009da0:	2340      	movs	r3, #64	; 0x40
10009da2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009da6:	e0da      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009da8:	2380      	movs	r3, #128	; 0x80
10009daa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009dae:	e0d6      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009db0:	687b      	ldr	r3, [r7, #4]
10009db2:	681b      	ldr	r3, [r3, #0]
10009db4:	4a34      	ldr	r2, [pc, #208]	; (10009e88 <UART_SetConfig+0x310>)
10009db6:	4293      	cmp	r3, r2
10009db8:	d12c      	bne.n	10009e14 <UART_SetConfig+0x29c>
10009dba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009dbe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
10009dc2:	f003 0307 	and.w	r3, r3, #7
10009dc6:	2b04      	cmp	r3, #4
10009dc8:	d820      	bhi.n	10009e0c <UART_SetConfig+0x294>
10009dca:	a201      	add	r2, pc, #4	; (adr r2, 10009dd0 <UART_SetConfig+0x258>)
10009dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009dd0:	10009de5 	.word	0x10009de5
10009dd4:	10009ded 	.word	0x10009ded
10009dd8:	10009df5 	.word	0x10009df5
10009ddc:	10009dfd 	.word	0x10009dfd
10009de0:	10009e05 	.word	0x10009e05
10009de4:	2300      	movs	r3, #0
10009de6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009dea:	e0b8      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009dec:	2308      	movs	r3, #8
10009dee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009df2:	e0b4      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009df4:	2310      	movs	r3, #16
10009df6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009dfa:	e0b0      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009dfc:	2320      	movs	r3, #32
10009dfe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009e02:	e0ac      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009e04:	2340      	movs	r3, #64	; 0x40
10009e06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009e0a:	e0a8      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009e0c:	2380      	movs	r3, #128	; 0x80
10009e0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009e12:	e0a4      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009e14:	687b      	ldr	r3, [r7, #4]
10009e16:	681b      	ldr	r3, [r3, #0]
10009e18:	4a1c      	ldr	r2, [pc, #112]	; (10009e8c <UART_SetConfig+0x314>)
10009e1a:	4293      	cmp	r3, r2
10009e1c:	d138      	bne.n	10009e90 <UART_SetConfig+0x318>
10009e1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009e22:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
10009e26:	f003 0307 	and.w	r3, r3, #7
10009e2a:	2b04      	cmp	r3, #4
10009e2c:	d820      	bhi.n	10009e70 <UART_SetConfig+0x2f8>
10009e2e:	a201      	add	r2, pc, #4	; (adr r2, 10009e34 <UART_SetConfig+0x2bc>)
10009e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009e34:	10009e49 	.word	0x10009e49
10009e38:	10009e51 	.word	0x10009e51
10009e3c:	10009e59 	.word	0x10009e59
10009e40:	10009e61 	.word	0x10009e61
10009e44:	10009e69 	.word	0x10009e69
10009e48:	2301      	movs	r3, #1
10009e4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009e4e:	e086      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009e50:	2308      	movs	r3, #8
10009e52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009e56:	e082      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009e58:	2310      	movs	r3, #16
10009e5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009e5e:	e07e      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009e60:	2320      	movs	r3, #32
10009e62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009e66:	e07a      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009e68:	2340      	movs	r3, #64	; 0x40
10009e6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009e6e:	e076      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009e70:	2380      	movs	r3, #128	; 0x80
10009e72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009e76:	e072      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009e78:	cfff69f3 	.word	0xcfff69f3
10009e7c:	4000e000 	.word	0x4000e000
10009e80:	4000f000 	.word	0x4000f000
10009e84:	40010000 	.word	0x40010000
10009e88:	40011000 	.word	0x40011000
10009e8c:	44003000 	.word	0x44003000
10009e90:	687b      	ldr	r3, [r7, #4]
10009e92:	681b      	ldr	r3, [r3, #0]
10009e94:	4aab      	ldr	r2, [pc, #684]	; (1000a144 <UART_SetConfig+0x5cc>)
10009e96:	4293      	cmp	r3, r2
10009e98:	d12c      	bne.n	10009ef4 <UART_SetConfig+0x37c>
10009e9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009e9e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
10009ea2:	f003 0307 	and.w	r3, r3, #7
10009ea6:	2b04      	cmp	r3, #4
10009ea8:	d820      	bhi.n	10009eec <UART_SetConfig+0x374>
10009eaa:	a201      	add	r2, pc, #4	; (adr r2, 10009eb0 <UART_SetConfig+0x338>)
10009eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009eb0:	10009ec5 	.word	0x10009ec5
10009eb4:	10009ecd 	.word	0x10009ecd
10009eb8:	10009ed5 	.word	0x10009ed5
10009ebc:	10009edd 	.word	0x10009edd
10009ec0:	10009ee5 	.word	0x10009ee5
10009ec4:	2300      	movs	r3, #0
10009ec6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009eca:	e048      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009ecc:	2308      	movs	r3, #8
10009ece:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009ed2:	e044      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009ed4:	2310      	movs	r3, #16
10009ed6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009eda:	e040      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009edc:	2320      	movs	r3, #32
10009ede:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009ee2:	e03c      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009ee4:	2340      	movs	r3, #64	; 0x40
10009ee6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009eea:	e038      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009eec:	2380      	movs	r3, #128	; 0x80
10009eee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009ef2:	e034      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009ef4:	687b      	ldr	r3, [r7, #4]
10009ef6:	681b      	ldr	r3, [r3, #0]
10009ef8:	4a93      	ldr	r2, [pc, #588]	; (1000a148 <UART_SetConfig+0x5d0>)
10009efa:	4293      	cmp	r3, r2
10009efc:	d12c      	bne.n	10009f58 <UART_SetConfig+0x3e0>
10009efe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009f02:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
10009f06:	f003 0307 	and.w	r3, r3, #7
10009f0a:	2b04      	cmp	r3, #4
10009f0c:	d820      	bhi.n	10009f50 <UART_SetConfig+0x3d8>
10009f0e:	a201      	add	r2, pc, #4	; (adr r2, 10009f14 <UART_SetConfig+0x39c>)
10009f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009f14:	10009f29 	.word	0x10009f29
10009f18:	10009f31 	.word	0x10009f31
10009f1c:	10009f39 	.word	0x10009f39
10009f20:	10009f41 	.word	0x10009f41
10009f24:	10009f49 	.word	0x10009f49
10009f28:	2300      	movs	r3, #0
10009f2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009f2e:	e016      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009f30:	2308      	movs	r3, #8
10009f32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009f36:	e012      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009f38:	2310      	movs	r3, #16
10009f3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009f3e:	e00e      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009f40:	2320      	movs	r3, #32
10009f42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009f46:	e00a      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009f48:	2340      	movs	r3, #64	; 0x40
10009f4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009f4e:	e006      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009f50:	2380      	movs	r3, #128	; 0x80
10009f52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009f56:	e002      	b.n	10009f5e <UART_SetConfig+0x3e6>
10009f58:	2380      	movs	r3, #128	; 0x80
10009f5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
10009f5e:	687b      	ldr	r3, [r7, #4]
10009f60:	69db      	ldr	r3, [r3, #28]
10009f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
10009f66:	f040 8354 	bne.w	1000a612 <UART_SetConfig+0xa9a>
  {
    switch (clocksource)
10009f6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
10009f6e:	2b20      	cmp	r3, #32
10009f70:	dc4a      	bgt.n	1000a008 <UART_SetConfig+0x490>
10009f72:	2b00      	cmp	r3, #0
10009f74:	f2c0 832b 	blt.w	1000a5ce <UART_SetConfig+0xa56>
10009f78:	2b20      	cmp	r3, #32
10009f7a:	f200 8328 	bhi.w	1000a5ce <UART_SetConfig+0xa56>
10009f7e:	a201      	add	r2, pc, #4	; (adr r2, 10009f84 <UART_SetConfig+0x40c>)
10009f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009f84:	1000a011 	.word	0x1000a011
10009f88:	1000a0c9 	.word	0x1000a0c9
10009f8c:	1000a189 	.word	0x1000a189
10009f90:	1000a5cf 	.word	0x1000a5cf
10009f94:	1000a241 	.word	0x1000a241
10009f98:	1000a5cf 	.word	0x1000a5cf
10009f9c:	1000a5cf 	.word	0x1000a5cf
10009fa0:	1000a5cf 	.word	0x1000a5cf
10009fa4:	1000a2fd 	.word	0x1000a2fd
10009fa8:	1000a5cf 	.word	0x1000a5cf
10009fac:	1000a5cf 	.word	0x1000a5cf
10009fb0:	1000a5cf 	.word	0x1000a5cf
10009fb4:	1000a5cf 	.word	0x1000a5cf
10009fb8:	1000a5cf 	.word	0x1000a5cf
10009fbc:	1000a5cf 	.word	0x1000a5cf
10009fc0:	1000a5cf 	.word	0x1000a5cf
10009fc4:	1000a3b9 	.word	0x1000a3b9
10009fc8:	1000a5cf 	.word	0x1000a5cf
10009fcc:	1000a5cf 	.word	0x1000a5cf
10009fd0:	1000a5cf 	.word	0x1000a5cf
10009fd4:	1000a5cf 	.word	0x1000a5cf
10009fd8:	1000a5cf 	.word	0x1000a5cf
10009fdc:	1000a5cf 	.word	0x1000a5cf
10009fe0:	1000a5cf 	.word	0x1000a5cf
10009fe4:	1000a5cf 	.word	0x1000a5cf
10009fe8:	1000a5cf 	.word	0x1000a5cf
10009fec:	1000a5cf 	.word	0x1000a5cf
10009ff0:	1000a5cf 	.word	0x1000a5cf
10009ff4:	1000a5cf 	.word	0x1000a5cf
10009ff8:	1000a5cf 	.word	0x1000a5cf
10009ffc:	1000a5cf 	.word	0x1000a5cf
1000a000:	1000a5cf 	.word	0x1000a5cf
1000a004:	1000a46b 	.word	0x1000a46b
1000a008:	2b40      	cmp	r3, #64	; 0x40
1000a00a:	f000 8287 	beq.w	1000a51c <UART_SetConfig+0x9a4>
1000a00e:	e2de      	b.n	1000a5ce <UART_SetConfig+0xa56>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
1000a010:	f7fb fcb0 	bl	10005974 <HAL_RCC_GetPCLK1Freq>
1000a014:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a016:	687b      	ldr	r3, [r7, #4]
1000a018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a01a:	2b00      	cmp	r3, #0
1000a01c:	d044      	beq.n	1000a0a8 <UART_SetConfig+0x530>
1000a01e:	687b      	ldr	r3, [r7, #4]
1000a020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a022:	2b01      	cmp	r3, #1
1000a024:	d03e      	beq.n	1000a0a4 <UART_SetConfig+0x52c>
1000a026:	687b      	ldr	r3, [r7, #4]
1000a028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a02a:	2b02      	cmp	r3, #2
1000a02c:	d038      	beq.n	1000a0a0 <UART_SetConfig+0x528>
1000a02e:	687b      	ldr	r3, [r7, #4]
1000a030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a032:	2b03      	cmp	r3, #3
1000a034:	d032      	beq.n	1000a09c <UART_SetConfig+0x524>
1000a036:	687b      	ldr	r3, [r7, #4]
1000a038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a03a:	2b04      	cmp	r3, #4
1000a03c:	d02c      	beq.n	1000a098 <UART_SetConfig+0x520>
1000a03e:	687b      	ldr	r3, [r7, #4]
1000a040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a042:	2b05      	cmp	r3, #5
1000a044:	d026      	beq.n	1000a094 <UART_SetConfig+0x51c>
1000a046:	687b      	ldr	r3, [r7, #4]
1000a048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a04a:	2b06      	cmp	r3, #6
1000a04c:	d020      	beq.n	1000a090 <UART_SetConfig+0x518>
1000a04e:	687b      	ldr	r3, [r7, #4]
1000a050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a052:	2b07      	cmp	r3, #7
1000a054:	d01a      	beq.n	1000a08c <UART_SetConfig+0x514>
1000a056:	687b      	ldr	r3, [r7, #4]
1000a058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a05a:	2b08      	cmp	r3, #8
1000a05c:	d014      	beq.n	1000a088 <UART_SetConfig+0x510>
1000a05e:	687b      	ldr	r3, [r7, #4]
1000a060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a062:	2b09      	cmp	r3, #9
1000a064:	d00e      	beq.n	1000a084 <UART_SetConfig+0x50c>
1000a066:	687b      	ldr	r3, [r7, #4]
1000a068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a06a:	2b0a      	cmp	r3, #10
1000a06c:	d008      	beq.n	1000a080 <UART_SetConfig+0x508>
1000a06e:	687b      	ldr	r3, [r7, #4]
1000a070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a072:	2b0b      	cmp	r3, #11
1000a074:	d102      	bne.n	1000a07c <UART_SetConfig+0x504>
1000a076:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a07a:	e016      	b.n	1000a0aa <UART_SetConfig+0x532>
1000a07c:	2301      	movs	r3, #1
1000a07e:	e014      	b.n	1000a0aa <UART_SetConfig+0x532>
1000a080:	2380      	movs	r3, #128	; 0x80
1000a082:	e012      	b.n	1000a0aa <UART_SetConfig+0x532>
1000a084:	2340      	movs	r3, #64	; 0x40
1000a086:	e010      	b.n	1000a0aa <UART_SetConfig+0x532>
1000a088:	2320      	movs	r3, #32
1000a08a:	e00e      	b.n	1000a0aa <UART_SetConfig+0x532>
1000a08c:	2310      	movs	r3, #16
1000a08e:	e00c      	b.n	1000a0aa <UART_SetConfig+0x532>
1000a090:	230c      	movs	r3, #12
1000a092:	e00a      	b.n	1000a0aa <UART_SetConfig+0x532>
1000a094:	230a      	movs	r3, #10
1000a096:	e008      	b.n	1000a0aa <UART_SetConfig+0x532>
1000a098:	2308      	movs	r3, #8
1000a09a:	e006      	b.n	1000a0aa <UART_SetConfig+0x532>
1000a09c:	2306      	movs	r3, #6
1000a09e:	e004      	b.n	1000a0aa <UART_SetConfig+0x532>
1000a0a0:	2304      	movs	r3, #4
1000a0a2:	e002      	b.n	1000a0aa <UART_SetConfig+0x532>
1000a0a4:	2302      	movs	r3, #2
1000a0a6:	e000      	b.n	1000a0aa <UART_SetConfig+0x532>
1000a0a8:	2301      	movs	r3, #1
1000a0aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000a0ac:	fbb2 f3f3 	udiv	r3, r2, r3
1000a0b0:	005a      	lsls	r2, r3, #1
1000a0b2:	687b      	ldr	r3, [r7, #4]
1000a0b4:	685b      	ldr	r3, [r3, #4]
1000a0b6:	085b      	lsrs	r3, r3, #1
1000a0b8:	441a      	add	r2, r3
1000a0ba:	687b      	ldr	r3, [r7, #4]
1000a0bc:	685b      	ldr	r3, [r3, #4]
1000a0be:	fbb2 f3f3 	udiv	r3, r2, r3
1000a0c2:	b29b      	uxth	r3, r3
1000a0c4:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a0c6:	e286      	b.n	1000a5d6 <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
1000a0c8:	f7fb fc6f 	bl	100059aa <HAL_RCC_GetPCLK2Freq>
1000a0cc:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a0ce:	687b      	ldr	r3, [r7, #4]
1000a0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a0d2:	2b00      	cmp	r3, #0
1000a0d4:	d048      	beq.n	1000a168 <UART_SetConfig+0x5f0>
1000a0d6:	687b      	ldr	r3, [r7, #4]
1000a0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a0da:	2b01      	cmp	r3, #1
1000a0dc:	d042      	beq.n	1000a164 <UART_SetConfig+0x5ec>
1000a0de:	687b      	ldr	r3, [r7, #4]
1000a0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a0e2:	2b02      	cmp	r3, #2
1000a0e4:	d03c      	beq.n	1000a160 <UART_SetConfig+0x5e8>
1000a0e6:	687b      	ldr	r3, [r7, #4]
1000a0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a0ea:	2b03      	cmp	r3, #3
1000a0ec:	d036      	beq.n	1000a15c <UART_SetConfig+0x5e4>
1000a0ee:	687b      	ldr	r3, [r7, #4]
1000a0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a0f2:	2b04      	cmp	r3, #4
1000a0f4:	d030      	beq.n	1000a158 <UART_SetConfig+0x5e0>
1000a0f6:	687b      	ldr	r3, [r7, #4]
1000a0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a0fa:	2b05      	cmp	r3, #5
1000a0fc:	d02a      	beq.n	1000a154 <UART_SetConfig+0x5dc>
1000a0fe:	687b      	ldr	r3, [r7, #4]
1000a100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a102:	2b06      	cmp	r3, #6
1000a104:	d024      	beq.n	1000a150 <UART_SetConfig+0x5d8>
1000a106:	687b      	ldr	r3, [r7, #4]
1000a108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a10a:	2b07      	cmp	r3, #7
1000a10c:	d01e      	beq.n	1000a14c <UART_SetConfig+0x5d4>
1000a10e:	687b      	ldr	r3, [r7, #4]
1000a110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a112:	2b08      	cmp	r3, #8
1000a114:	d014      	beq.n	1000a140 <UART_SetConfig+0x5c8>
1000a116:	687b      	ldr	r3, [r7, #4]
1000a118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a11a:	2b09      	cmp	r3, #9
1000a11c:	d00e      	beq.n	1000a13c <UART_SetConfig+0x5c4>
1000a11e:	687b      	ldr	r3, [r7, #4]
1000a120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a122:	2b0a      	cmp	r3, #10
1000a124:	d008      	beq.n	1000a138 <UART_SetConfig+0x5c0>
1000a126:	687b      	ldr	r3, [r7, #4]
1000a128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a12a:	2b0b      	cmp	r3, #11
1000a12c:	d102      	bne.n	1000a134 <UART_SetConfig+0x5bc>
1000a12e:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a132:	e01a      	b.n	1000a16a <UART_SetConfig+0x5f2>
1000a134:	2301      	movs	r3, #1
1000a136:	e018      	b.n	1000a16a <UART_SetConfig+0x5f2>
1000a138:	2380      	movs	r3, #128	; 0x80
1000a13a:	e016      	b.n	1000a16a <UART_SetConfig+0x5f2>
1000a13c:	2340      	movs	r3, #64	; 0x40
1000a13e:	e014      	b.n	1000a16a <UART_SetConfig+0x5f2>
1000a140:	2320      	movs	r3, #32
1000a142:	e012      	b.n	1000a16a <UART_SetConfig+0x5f2>
1000a144:	40018000 	.word	0x40018000
1000a148:	40019000 	.word	0x40019000
1000a14c:	2310      	movs	r3, #16
1000a14e:	e00c      	b.n	1000a16a <UART_SetConfig+0x5f2>
1000a150:	230c      	movs	r3, #12
1000a152:	e00a      	b.n	1000a16a <UART_SetConfig+0x5f2>
1000a154:	230a      	movs	r3, #10
1000a156:	e008      	b.n	1000a16a <UART_SetConfig+0x5f2>
1000a158:	2308      	movs	r3, #8
1000a15a:	e006      	b.n	1000a16a <UART_SetConfig+0x5f2>
1000a15c:	2306      	movs	r3, #6
1000a15e:	e004      	b.n	1000a16a <UART_SetConfig+0x5f2>
1000a160:	2304      	movs	r3, #4
1000a162:	e002      	b.n	1000a16a <UART_SetConfig+0x5f2>
1000a164:	2302      	movs	r3, #2
1000a166:	e000      	b.n	1000a16a <UART_SetConfig+0x5f2>
1000a168:	2301      	movs	r3, #1
1000a16a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000a16c:	fbb2 f3f3 	udiv	r3, r2, r3
1000a170:	005a      	lsls	r2, r3, #1
1000a172:	687b      	ldr	r3, [r7, #4]
1000a174:	685b      	ldr	r3, [r3, #4]
1000a176:	085b      	lsrs	r3, r3, #1
1000a178:	441a      	add	r2, r3
1000a17a:	687b      	ldr	r3, [r7, #4]
1000a17c:	685b      	ldr	r3, [r3, #4]
1000a17e:	fbb2 f3f3 	udiv	r3, r2, r3
1000a182:	b29b      	uxth	r3, r3
1000a184:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a186:	e226      	b.n	1000a5d6 <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PCLK5:
        pclk = HAL_RCC_GetPCLK5Freq();
1000a188:	f7fb fc45 	bl	10005a16 <HAL_RCC_GetPCLK5Freq>
1000a18c:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a18e:	687b      	ldr	r3, [r7, #4]
1000a190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a192:	2b00      	cmp	r3, #0
1000a194:	d044      	beq.n	1000a220 <UART_SetConfig+0x6a8>
1000a196:	687b      	ldr	r3, [r7, #4]
1000a198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a19a:	2b01      	cmp	r3, #1
1000a19c:	d03e      	beq.n	1000a21c <UART_SetConfig+0x6a4>
1000a19e:	687b      	ldr	r3, [r7, #4]
1000a1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a1a2:	2b02      	cmp	r3, #2
1000a1a4:	d038      	beq.n	1000a218 <UART_SetConfig+0x6a0>
1000a1a6:	687b      	ldr	r3, [r7, #4]
1000a1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a1aa:	2b03      	cmp	r3, #3
1000a1ac:	d032      	beq.n	1000a214 <UART_SetConfig+0x69c>
1000a1ae:	687b      	ldr	r3, [r7, #4]
1000a1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a1b2:	2b04      	cmp	r3, #4
1000a1b4:	d02c      	beq.n	1000a210 <UART_SetConfig+0x698>
1000a1b6:	687b      	ldr	r3, [r7, #4]
1000a1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a1ba:	2b05      	cmp	r3, #5
1000a1bc:	d026      	beq.n	1000a20c <UART_SetConfig+0x694>
1000a1be:	687b      	ldr	r3, [r7, #4]
1000a1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a1c2:	2b06      	cmp	r3, #6
1000a1c4:	d020      	beq.n	1000a208 <UART_SetConfig+0x690>
1000a1c6:	687b      	ldr	r3, [r7, #4]
1000a1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a1ca:	2b07      	cmp	r3, #7
1000a1cc:	d01a      	beq.n	1000a204 <UART_SetConfig+0x68c>
1000a1ce:	687b      	ldr	r3, [r7, #4]
1000a1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a1d2:	2b08      	cmp	r3, #8
1000a1d4:	d014      	beq.n	1000a200 <UART_SetConfig+0x688>
1000a1d6:	687b      	ldr	r3, [r7, #4]
1000a1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a1da:	2b09      	cmp	r3, #9
1000a1dc:	d00e      	beq.n	1000a1fc <UART_SetConfig+0x684>
1000a1de:	687b      	ldr	r3, [r7, #4]
1000a1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a1e2:	2b0a      	cmp	r3, #10
1000a1e4:	d008      	beq.n	1000a1f8 <UART_SetConfig+0x680>
1000a1e6:	687b      	ldr	r3, [r7, #4]
1000a1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a1ea:	2b0b      	cmp	r3, #11
1000a1ec:	d102      	bne.n	1000a1f4 <UART_SetConfig+0x67c>
1000a1ee:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a1f2:	e016      	b.n	1000a222 <UART_SetConfig+0x6aa>
1000a1f4:	2301      	movs	r3, #1
1000a1f6:	e014      	b.n	1000a222 <UART_SetConfig+0x6aa>
1000a1f8:	2380      	movs	r3, #128	; 0x80
1000a1fa:	e012      	b.n	1000a222 <UART_SetConfig+0x6aa>
1000a1fc:	2340      	movs	r3, #64	; 0x40
1000a1fe:	e010      	b.n	1000a222 <UART_SetConfig+0x6aa>
1000a200:	2320      	movs	r3, #32
1000a202:	e00e      	b.n	1000a222 <UART_SetConfig+0x6aa>
1000a204:	2310      	movs	r3, #16
1000a206:	e00c      	b.n	1000a222 <UART_SetConfig+0x6aa>
1000a208:	230c      	movs	r3, #12
1000a20a:	e00a      	b.n	1000a222 <UART_SetConfig+0x6aa>
1000a20c:	230a      	movs	r3, #10
1000a20e:	e008      	b.n	1000a222 <UART_SetConfig+0x6aa>
1000a210:	2308      	movs	r3, #8
1000a212:	e006      	b.n	1000a222 <UART_SetConfig+0x6aa>
1000a214:	2306      	movs	r3, #6
1000a216:	e004      	b.n	1000a222 <UART_SetConfig+0x6aa>
1000a218:	2304      	movs	r3, #4
1000a21a:	e002      	b.n	1000a222 <UART_SetConfig+0x6aa>
1000a21c:	2302      	movs	r3, #2
1000a21e:	e000      	b.n	1000a222 <UART_SetConfig+0x6aa>
1000a220:	2301      	movs	r3, #1
1000a222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000a224:	fbb2 f3f3 	udiv	r3, r2, r3
1000a228:	005a      	lsls	r2, r3, #1
1000a22a:	687b      	ldr	r3, [r7, #4]
1000a22c:	685b      	ldr	r3, [r3, #4]
1000a22e:	085b      	lsrs	r3, r3, #1
1000a230:	441a      	add	r2, r3
1000a232:	687b      	ldr	r3, [r7, #4]
1000a234:	685b      	ldr	r3, [r3, #4]
1000a236:	fbb2 f3f3 	udiv	r3, r2, r3
1000a23a:	b29b      	uxth	r3, r3
1000a23c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a23e:	e1ca      	b.n	1000a5d6 <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PLL3Q:
        HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000a240:	f107 0314 	add.w	r3, r7, #20
1000a244:	4618      	mov	r0, r3
1000a246:	f7fb f993 	bl	10005570 <HAL_RCC_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a24a:	69ba      	ldr	r2, [r7, #24]
1000a24c:	687b      	ldr	r3, [r7, #4]
1000a24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a250:	2b00      	cmp	r3, #0
1000a252:	d044      	beq.n	1000a2de <UART_SetConfig+0x766>
1000a254:	687b      	ldr	r3, [r7, #4]
1000a256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a258:	2b01      	cmp	r3, #1
1000a25a:	d03e      	beq.n	1000a2da <UART_SetConfig+0x762>
1000a25c:	687b      	ldr	r3, [r7, #4]
1000a25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a260:	2b02      	cmp	r3, #2
1000a262:	d038      	beq.n	1000a2d6 <UART_SetConfig+0x75e>
1000a264:	687b      	ldr	r3, [r7, #4]
1000a266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a268:	2b03      	cmp	r3, #3
1000a26a:	d032      	beq.n	1000a2d2 <UART_SetConfig+0x75a>
1000a26c:	687b      	ldr	r3, [r7, #4]
1000a26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a270:	2b04      	cmp	r3, #4
1000a272:	d02c      	beq.n	1000a2ce <UART_SetConfig+0x756>
1000a274:	687b      	ldr	r3, [r7, #4]
1000a276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a278:	2b05      	cmp	r3, #5
1000a27a:	d026      	beq.n	1000a2ca <UART_SetConfig+0x752>
1000a27c:	687b      	ldr	r3, [r7, #4]
1000a27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a280:	2b06      	cmp	r3, #6
1000a282:	d020      	beq.n	1000a2c6 <UART_SetConfig+0x74e>
1000a284:	687b      	ldr	r3, [r7, #4]
1000a286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a288:	2b07      	cmp	r3, #7
1000a28a:	d01a      	beq.n	1000a2c2 <UART_SetConfig+0x74a>
1000a28c:	687b      	ldr	r3, [r7, #4]
1000a28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a290:	2b08      	cmp	r3, #8
1000a292:	d014      	beq.n	1000a2be <UART_SetConfig+0x746>
1000a294:	687b      	ldr	r3, [r7, #4]
1000a296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a298:	2b09      	cmp	r3, #9
1000a29a:	d00e      	beq.n	1000a2ba <UART_SetConfig+0x742>
1000a29c:	687b      	ldr	r3, [r7, #4]
1000a29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a2a0:	2b0a      	cmp	r3, #10
1000a2a2:	d008      	beq.n	1000a2b6 <UART_SetConfig+0x73e>
1000a2a4:	687b      	ldr	r3, [r7, #4]
1000a2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a2a8:	2b0b      	cmp	r3, #11
1000a2aa:	d102      	bne.n	1000a2b2 <UART_SetConfig+0x73a>
1000a2ac:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a2b0:	e016      	b.n	1000a2e0 <UART_SetConfig+0x768>
1000a2b2:	2301      	movs	r3, #1
1000a2b4:	e014      	b.n	1000a2e0 <UART_SetConfig+0x768>
1000a2b6:	2380      	movs	r3, #128	; 0x80
1000a2b8:	e012      	b.n	1000a2e0 <UART_SetConfig+0x768>
1000a2ba:	2340      	movs	r3, #64	; 0x40
1000a2bc:	e010      	b.n	1000a2e0 <UART_SetConfig+0x768>
1000a2be:	2320      	movs	r3, #32
1000a2c0:	e00e      	b.n	1000a2e0 <UART_SetConfig+0x768>
1000a2c2:	2310      	movs	r3, #16
1000a2c4:	e00c      	b.n	1000a2e0 <UART_SetConfig+0x768>
1000a2c6:	230c      	movs	r3, #12
1000a2c8:	e00a      	b.n	1000a2e0 <UART_SetConfig+0x768>
1000a2ca:	230a      	movs	r3, #10
1000a2cc:	e008      	b.n	1000a2e0 <UART_SetConfig+0x768>
1000a2ce:	2308      	movs	r3, #8
1000a2d0:	e006      	b.n	1000a2e0 <UART_SetConfig+0x768>
1000a2d2:	2306      	movs	r3, #6
1000a2d4:	e004      	b.n	1000a2e0 <UART_SetConfig+0x768>
1000a2d6:	2304      	movs	r3, #4
1000a2d8:	e002      	b.n	1000a2e0 <UART_SetConfig+0x768>
1000a2da:	2302      	movs	r3, #2
1000a2dc:	e000      	b.n	1000a2e0 <UART_SetConfig+0x768>
1000a2de:	2301      	movs	r3, #1
1000a2e0:	fbb2 f3f3 	udiv	r3, r2, r3
1000a2e4:	005a      	lsls	r2, r3, #1
1000a2e6:	687b      	ldr	r3, [r7, #4]
1000a2e8:	685b      	ldr	r3, [r3, #4]
1000a2ea:	085b      	lsrs	r3, r3, #1
1000a2ec:	441a      	add	r2, r3
1000a2ee:	687b      	ldr	r3, [r7, #4]
1000a2f0:	685b      	ldr	r3, [r3, #4]
1000a2f2:	fbb2 f3f3 	udiv	r3, r2, r3
1000a2f6:	b29b      	uxth	r3, r3
1000a2f8:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a2fa:	e16c      	b.n	1000a5d6 <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PLL4Q:
        HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000a2fc:	f107 0308 	add.w	r3, r7, #8
1000a300:	4618      	mov	r0, r3
1000a302:	f7fb fa2f 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll4_clocks.PLL4_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a306:	68fa      	ldr	r2, [r7, #12]
1000a308:	687b      	ldr	r3, [r7, #4]
1000a30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a30c:	2b00      	cmp	r3, #0
1000a30e:	d044      	beq.n	1000a39a <UART_SetConfig+0x822>
1000a310:	687b      	ldr	r3, [r7, #4]
1000a312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a314:	2b01      	cmp	r3, #1
1000a316:	d03e      	beq.n	1000a396 <UART_SetConfig+0x81e>
1000a318:	687b      	ldr	r3, [r7, #4]
1000a31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a31c:	2b02      	cmp	r3, #2
1000a31e:	d038      	beq.n	1000a392 <UART_SetConfig+0x81a>
1000a320:	687b      	ldr	r3, [r7, #4]
1000a322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a324:	2b03      	cmp	r3, #3
1000a326:	d032      	beq.n	1000a38e <UART_SetConfig+0x816>
1000a328:	687b      	ldr	r3, [r7, #4]
1000a32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a32c:	2b04      	cmp	r3, #4
1000a32e:	d02c      	beq.n	1000a38a <UART_SetConfig+0x812>
1000a330:	687b      	ldr	r3, [r7, #4]
1000a332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a334:	2b05      	cmp	r3, #5
1000a336:	d026      	beq.n	1000a386 <UART_SetConfig+0x80e>
1000a338:	687b      	ldr	r3, [r7, #4]
1000a33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a33c:	2b06      	cmp	r3, #6
1000a33e:	d020      	beq.n	1000a382 <UART_SetConfig+0x80a>
1000a340:	687b      	ldr	r3, [r7, #4]
1000a342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a344:	2b07      	cmp	r3, #7
1000a346:	d01a      	beq.n	1000a37e <UART_SetConfig+0x806>
1000a348:	687b      	ldr	r3, [r7, #4]
1000a34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a34c:	2b08      	cmp	r3, #8
1000a34e:	d014      	beq.n	1000a37a <UART_SetConfig+0x802>
1000a350:	687b      	ldr	r3, [r7, #4]
1000a352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a354:	2b09      	cmp	r3, #9
1000a356:	d00e      	beq.n	1000a376 <UART_SetConfig+0x7fe>
1000a358:	687b      	ldr	r3, [r7, #4]
1000a35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a35c:	2b0a      	cmp	r3, #10
1000a35e:	d008      	beq.n	1000a372 <UART_SetConfig+0x7fa>
1000a360:	687b      	ldr	r3, [r7, #4]
1000a362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a364:	2b0b      	cmp	r3, #11
1000a366:	d102      	bne.n	1000a36e <UART_SetConfig+0x7f6>
1000a368:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a36c:	e016      	b.n	1000a39c <UART_SetConfig+0x824>
1000a36e:	2301      	movs	r3, #1
1000a370:	e014      	b.n	1000a39c <UART_SetConfig+0x824>
1000a372:	2380      	movs	r3, #128	; 0x80
1000a374:	e012      	b.n	1000a39c <UART_SetConfig+0x824>
1000a376:	2340      	movs	r3, #64	; 0x40
1000a378:	e010      	b.n	1000a39c <UART_SetConfig+0x824>
1000a37a:	2320      	movs	r3, #32
1000a37c:	e00e      	b.n	1000a39c <UART_SetConfig+0x824>
1000a37e:	2310      	movs	r3, #16
1000a380:	e00c      	b.n	1000a39c <UART_SetConfig+0x824>
1000a382:	230c      	movs	r3, #12
1000a384:	e00a      	b.n	1000a39c <UART_SetConfig+0x824>
1000a386:	230a      	movs	r3, #10
1000a388:	e008      	b.n	1000a39c <UART_SetConfig+0x824>
1000a38a:	2308      	movs	r3, #8
1000a38c:	e006      	b.n	1000a39c <UART_SetConfig+0x824>
1000a38e:	2306      	movs	r3, #6
1000a390:	e004      	b.n	1000a39c <UART_SetConfig+0x824>
1000a392:	2304      	movs	r3, #4
1000a394:	e002      	b.n	1000a39c <UART_SetConfig+0x824>
1000a396:	2302      	movs	r3, #2
1000a398:	e000      	b.n	1000a39c <UART_SetConfig+0x824>
1000a39a:	2301      	movs	r3, #1
1000a39c:	fbb2 f3f3 	udiv	r3, r2, r3
1000a3a0:	005a      	lsls	r2, r3, #1
1000a3a2:	687b      	ldr	r3, [r7, #4]
1000a3a4:	685b      	ldr	r3, [r3, #4]
1000a3a6:	085b      	lsrs	r3, r3, #1
1000a3a8:	441a      	add	r2, r3
1000a3aa:	687b      	ldr	r3, [r7, #4]
1000a3ac:	685b      	ldr	r3, [r3, #4]
1000a3ae:	fbb2 f3f3 	udiv	r3, r2, r3
1000a3b2:	b29b      	uxth	r3, r3
1000a3b4:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a3b6:	e10e      	b.n	1000a5d6 <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a3b8:	687b      	ldr	r3, [r7, #4]
1000a3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a3bc:	2b00      	cmp	r3, #0
1000a3be:	d044      	beq.n	1000a44a <UART_SetConfig+0x8d2>
1000a3c0:	687b      	ldr	r3, [r7, #4]
1000a3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a3c4:	2b01      	cmp	r3, #1
1000a3c6:	d03e      	beq.n	1000a446 <UART_SetConfig+0x8ce>
1000a3c8:	687b      	ldr	r3, [r7, #4]
1000a3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a3cc:	2b02      	cmp	r3, #2
1000a3ce:	d038      	beq.n	1000a442 <UART_SetConfig+0x8ca>
1000a3d0:	687b      	ldr	r3, [r7, #4]
1000a3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a3d4:	2b03      	cmp	r3, #3
1000a3d6:	d032      	beq.n	1000a43e <UART_SetConfig+0x8c6>
1000a3d8:	687b      	ldr	r3, [r7, #4]
1000a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a3dc:	2b04      	cmp	r3, #4
1000a3de:	d02c      	beq.n	1000a43a <UART_SetConfig+0x8c2>
1000a3e0:	687b      	ldr	r3, [r7, #4]
1000a3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a3e4:	2b05      	cmp	r3, #5
1000a3e6:	d026      	beq.n	1000a436 <UART_SetConfig+0x8be>
1000a3e8:	687b      	ldr	r3, [r7, #4]
1000a3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a3ec:	2b06      	cmp	r3, #6
1000a3ee:	d020      	beq.n	1000a432 <UART_SetConfig+0x8ba>
1000a3f0:	687b      	ldr	r3, [r7, #4]
1000a3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a3f4:	2b07      	cmp	r3, #7
1000a3f6:	d01a      	beq.n	1000a42e <UART_SetConfig+0x8b6>
1000a3f8:	687b      	ldr	r3, [r7, #4]
1000a3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a3fc:	2b08      	cmp	r3, #8
1000a3fe:	d014      	beq.n	1000a42a <UART_SetConfig+0x8b2>
1000a400:	687b      	ldr	r3, [r7, #4]
1000a402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a404:	2b09      	cmp	r3, #9
1000a406:	d00e      	beq.n	1000a426 <UART_SetConfig+0x8ae>
1000a408:	687b      	ldr	r3, [r7, #4]
1000a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a40c:	2b0a      	cmp	r3, #10
1000a40e:	d008      	beq.n	1000a422 <UART_SetConfig+0x8aa>
1000a410:	687b      	ldr	r3, [r7, #4]
1000a412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a414:	2b0b      	cmp	r3, #11
1000a416:	d102      	bne.n	1000a41e <UART_SetConfig+0x8a6>
1000a418:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a41c:	e016      	b.n	1000a44c <UART_SetConfig+0x8d4>
1000a41e:	2301      	movs	r3, #1
1000a420:	e014      	b.n	1000a44c <UART_SetConfig+0x8d4>
1000a422:	2380      	movs	r3, #128	; 0x80
1000a424:	e012      	b.n	1000a44c <UART_SetConfig+0x8d4>
1000a426:	2340      	movs	r3, #64	; 0x40
1000a428:	e010      	b.n	1000a44c <UART_SetConfig+0x8d4>
1000a42a:	2320      	movs	r3, #32
1000a42c:	e00e      	b.n	1000a44c <UART_SetConfig+0x8d4>
1000a42e:	2310      	movs	r3, #16
1000a430:	e00c      	b.n	1000a44c <UART_SetConfig+0x8d4>
1000a432:	230c      	movs	r3, #12
1000a434:	e00a      	b.n	1000a44c <UART_SetConfig+0x8d4>
1000a436:	230a      	movs	r3, #10
1000a438:	e008      	b.n	1000a44c <UART_SetConfig+0x8d4>
1000a43a:	2308      	movs	r3, #8
1000a43c:	e006      	b.n	1000a44c <UART_SetConfig+0x8d4>
1000a43e:	2306      	movs	r3, #6
1000a440:	e004      	b.n	1000a44c <UART_SetConfig+0x8d4>
1000a442:	2304      	movs	r3, #4
1000a444:	e002      	b.n	1000a44c <UART_SetConfig+0x8d4>
1000a446:	2302      	movs	r3, #2
1000a448:	e000      	b.n	1000a44c <UART_SetConfig+0x8d4>
1000a44a:	2301      	movs	r3, #1
1000a44c:	4a9a      	ldr	r2, [pc, #616]	; (1000a6b8 <UART_SetConfig+0xb40>)
1000a44e:	fbb2 f3f3 	udiv	r3, r2, r3
1000a452:	005a      	lsls	r2, r3, #1
1000a454:	687b      	ldr	r3, [r7, #4]
1000a456:	685b      	ldr	r3, [r3, #4]
1000a458:	085b      	lsrs	r3, r3, #1
1000a45a:	441a      	add	r2, r3
1000a45c:	687b      	ldr	r3, [r7, #4]
1000a45e:	685b      	ldr	r3, [r3, #4]
1000a460:	fbb2 f3f3 	udiv	r3, r2, r3
1000a464:	b29b      	uxth	r3, r3
1000a466:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a468:	e0b5      	b.n	1000a5d6 <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a46a:	687b      	ldr	r3, [r7, #4]
1000a46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a46e:	2b00      	cmp	r3, #0
1000a470:	d044      	beq.n	1000a4fc <UART_SetConfig+0x984>
1000a472:	687b      	ldr	r3, [r7, #4]
1000a474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a476:	2b01      	cmp	r3, #1
1000a478:	d03e      	beq.n	1000a4f8 <UART_SetConfig+0x980>
1000a47a:	687b      	ldr	r3, [r7, #4]
1000a47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a47e:	2b02      	cmp	r3, #2
1000a480:	d038      	beq.n	1000a4f4 <UART_SetConfig+0x97c>
1000a482:	687b      	ldr	r3, [r7, #4]
1000a484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a486:	2b03      	cmp	r3, #3
1000a488:	d032      	beq.n	1000a4f0 <UART_SetConfig+0x978>
1000a48a:	687b      	ldr	r3, [r7, #4]
1000a48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a48e:	2b04      	cmp	r3, #4
1000a490:	d02c      	beq.n	1000a4ec <UART_SetConfig+0x974>
1000a492:	687b      	ldr	r3, [r7, #4]
1000a494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a496:	2b05      	cmp	r3, #5
1000a498:	d026      	beq.n	1000a4e8 <UART_SetConfig+0x970>
1000a49a:	687b      	ldr	r3, [r7, #4]
1000a49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a49e:	2b06      	cmp	r3, #6
1000a4a0:	d020      	beq.n	1000a4e4 <UART_SetConfig+0x96c>
1000a4a2:	687b      	ldr	r3, [r7, #4]
1000a4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a4a6:	2b07      	cmp	r3, #7
1000a4a8:	d01a      	beq.n	1000a4e0 <UART_SetConfig+0x968>
1000a4aa:	687b      	ldr	r3, [r7, #4]
1000a4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a4ae:	2b08      	cmp	r3, #8
1000a4b0:	d014      	beq.n	1000a4dc <UART_SetConfig+0x964>
1000a4b2:	687b      	ldr	r3, [r7, #4]
1000a4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a4b6:	2b09      	cmp	r3, #9
1000a4b8:	d00e      	beq.n	1000a4d8 <UART_SetConfig+0x960>
1000a4ba:	687b      	ldr	r3, [r7, #4]
1000a4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a4be:	2b0a      	cmp	r3, #10
1000a4c0:	d008      	beq.n	1000a4d4 <UART_SetConfig+0x95c>
1000a4c2:	687b      	ldr	r3, [r7, #4]
1000a4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a4c6:	2b0b      	cmp	r3, #11
1000a4c8:	d102      	bne.n	1000a4d0 <UART_SetConfig+0x958>
1000a4ca:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a4ce:	e016      	b.n	1000a4fe <UART_SetConfig+0x986>
1000a4d0:	2301      	movs	r3, #1
1000a4d2:	e014      	b.n	1000a4fe <UART_SetConfig+0x986>
1000a4d4:	2380      	movs	r3, #128	; 0x80
1000a4d6:	e012      	b.n	1000a4fe <UART_SetConfig+0x986>
1000a4d8:	2340      	movs	r3, #64	; 0x40
1000a4da:	e010      	b.n	1000a4fe <UART_SetConfig+0x986>
1000a4dc:	2320      	movs	r3, #32
1000a4de:	e00e      	b.n	1000a4fe <UART_SetConfig+0x986>
1000a4e0:	2310      	movs	r3, #16
1000a4e2:	e00c      	b.n	1000a4fe <UART_SetConfig+0x986>
1000a4e4:	230c      	movs	r3, #12
1000a4e6:	e00a      	b.n	1000a4fe <UART_SetConfig+0x986>
1000a4e8:	230a      	movs	r3, #10
1000a4ea:	e008      	b.n	1000a4fe <UART_SetConfig+0x986>
1000a4ec:	2308      	movs	r3, #8
1000a4ee:	e006      	b.n	1000a4fe <UART_SetConfig+0x986>
1000a4f0:	2306      	movs	r3, #6
1000a4f2:	e004      	b.n	1000a4fe <UART_SetConfig+0x986>
1000a4f4:	2304      	movs	r3, #4
1000a4f6:	e002      	b.n	1000a4fe <UART_SetConfig+0x986>
1000a4f8:	2302      	movs	r3, #2
1000a4fa:	e000      	b.n	1000a4fe <UART_SetConfig+0x986>
1000a4fc:	2301      	movs	r3, #1
1000a4fe:	4a6f      	ldr	r2, [pc, #444]	; (1000a6bc <UART_SetConfig+0xb44>)
1000a500:	fbb2 f3f3 	udiv	r3, r2, r3
1000a504:	005a      	lsls	r2, r3, #1
1000a506:	687b      	ldr	r3, [r7, #4]
1000a508:	685b      	ldr	r3, [r3, #4]
1000a50a:	085b      	lsrs	r3, r3, #1
1000a50c:	441a      	add	r2, r3
1000a50e:	687b      	ldr	r3, [r7, #4]
1000a510:	685b      	ldr	r3, [r3, #4]
1000a512:	fbb2 f3f3 	udiv	r3, r2, r3
1000a516:	b29b      	uxth	r3, r3
1000a518:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a51a:	e05c      	b.n	1000a5d6 <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_HSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a51c:	687b      	ldr	r3, [r7, #4]
1000a51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a520:	2b00      	cmp	r3, #0
1000a522:	d044      	beq.n	1000a5ae <UART_SetConfig+0xa36>
1000a524:	687b      	ldr	r3, [r7, #4]
1000a526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a528:	2b01      	cmp	r3, #1
1000a52a:	d03e      	beq.n	1000a5aa <UART_SetConfig+0xa32>
1000a52c:	687b      	ldr	r3, [r7, #4]
1000a52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a530:	2b02      	cmp	r3, #2
1000a532:	d038      	beq.n	1000a5a6 <UART_SetConfig+0xa2e>
1000a534:	687b      	ldr	r3, [r7, #4]
1000a536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a538:	2b03      	cmp	r3, #3
1000a53a:	d032      	beq.n	1000a5a2 <UART_SetConfig+0xa2a>
1000a53c:	687b      	ldr	r3, [r7, #4]
1000a53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a540:	2b04      	cmp	r3, #4
1000a542:	d02c      	beq.n	1000a59e <UART_SetConfig+0xa26>
1000a544:	687b      	ldr	r3, [r7, #4]
1000a546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a548:	2b05      	cmp	r3, #5
1000a54a:	d026      	beq.n	1000a59a <UART_SetConfig+0xa22>
1000a54c:	687b      	ldr	r3, [r7, #4]
1000a54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a550:	2b06      	cmp	r3, #6
1000a552:	d020      	beq.n	1000a596 <UART_SetConfig+0xa1e>
1000a554:	687b      	ldr	r3, [r7, #4]
1000a556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a558:	2b07      	cmp	r3, #7
1000a55a:	d01a      	beq.n	1000a592 <UART_SetConfig+0xa1a>
1000a55c:	687b      	ldr	r3, [r7, #4]
1000a55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a560:	2b08      	cmp	r3, #8
1000a562:	d014      	beq.n	1000a58e <UART_SetConfig+0xa16>
1000a564:	687b      	ldr	r3, [r7, #4]
1000a566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a568:	2b09      	cmp	r3, #9
1000a56a:	d00e      	beq.n	1000a58a <UART_SetConfig+0xa12>
1000a56c:	687b      	ldr	r3, [r7, #4]
1000a56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a570:	2b0a      	cmp	r3, #10
1000a572:	d008      	beq.n	1000a586 <UART_SetConfig+0xa0e>
1000a574:	687b      	ldr	r3, [r7, #4]
1000a576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a578:	2b0b      	cmp	r3, #11
1000a57a:	d102      	bne.n	1000a582 <UART_SetConfig+0xa0a>
1000a57c:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a580:	e016      	b.n	1000a5b0 <UART_SetConfig+0xa38>
1000a582:	2301      	movs	r3, #1
1000a584:	e014      	b.n	1000a5b0 <UART_SetConfig+0xa38>
1000a586:	2380      	movs	r3, #128	; 0x80
1000a588:	e012      	b.n	1000a5b0 <UART_SetConfig+0xa38>
1000a58a:	2340      	movs	r3, #64	; 0x40
1000a58c:	e010      	b.n	1000a5b0 <UART_SetConfig+0xa38>
1000a58e:	2320      	movs	r3, #32
1000a590:	e00e      	b.n	1000a5b0 <UART_SetConfig+0xa38>
1000a592:	2310      	movs	r3, #16
1000a594:	e00c      	b.n	1000a5b0 <UART_SetConfig+0xa38>
1000a596:	230c      	movs	r3, #12
1000a598:	e00a      	b.n	1000a5b0 <UART_SetConfig+0xa38>
1000a59a:	230a      	movs	r3, #10
1000a59c:	e008      	b.n	1000a5b0 <UART_SetConfig+0xa38>
1000a59e:	2308      	movs	r3, #8
1000a5a0:	e006      	b.n	1000a5b0 <UART_SetConfig+0xa38>
1000a5a2:	2306      	movs	r3, #6
1000a5a4:	e004      	b.n	1000a5b0 <UART_SetConfig+0xa38>
1000a5a6:	2304      	movs	r3, #4
1000a5a8:	e002      	b.n	1000a5b0 <UART_SetConfig+0xa38>
1000a5aa:	2302      	movs	r3, #2
1000a5ac:	e000      	b.n	1000a5b0 <UART_SetConfig+0xa38>
1000a5ae:	2301      	movs	r3, #1
1000a5b0:	4a43      	ldr	r2, [pc, #268]	; (1000a6c0 <UART_SetConfig+0xb48>)
1000a5b2:	fbb2 f3f3 	udiv	r3, r2, r3
1000a5b6:	005a      	lsls	r2, r3, #1
1000a5b8:	687b      	ldr	r3, [r7, #4]
1000a5ba:	685b      	ldr	r3, [r3, #4]
1000a5bc:	085b      	lsrs	r3, r3, #1
1000a5be:	441a      	add	r2, r3
1000a5c0:	687b      	ldr	r3, [r7, #4]
1000a5c2:	685b      	ldr	r3, [r3, #4]
1000a5c4:	fbb2 f3f3 	udiv	r3, r2, r3
1000a5c8:	b29b      	uxth	r3, r3
1000a5ca:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a5cc:	e003      	b.n	1000a5d6 <UART_SetConfig+0xa5e>
      default:
        ret = HAL_ERROR;
1000a5ce:	2301      	movs	r3, #1
1000a5d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
1000a5d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
1000a5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000a5d8:	2b0f      	cmp	r3, #15
1000a5da:	d916      	bls.n	1000a60a <UART_SetConfig+0xa92>
1000a5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000a5de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
1000a5e2:	d212      	bcs.n	1000a60a <UART_SetConfig+0xa92>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
1000a5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000a5e6:	b29b      	uxth	r3, r3
1000a5e8:	f023 030f 	bic.w	r3, r3, #15
1000a5ec:	847b      	strh	r3, [r7, #34]	; 0x22
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
1000a5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000a5f0:	085b      	lsrs	r3, r3, #1
1000a5f2:	b29b      	uxth	r3, r3
1000a5f4:	f003 0307 	and.w	r3, r3, #7
1000a5f8:	b29a      	uxth	r2, r3
1000a5fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
1000a5fc:	4313      	orrs	r3, r2
1000a5fe:	847b      	strh	r3, [r7, #34]	; 0x22
      huart->Instance->BRR = brrtemp;
1000a600:	687b      	ldr	r3, [r7, #4]
1000a602:	681b      	ldr	r3, [r3, #0]
1000a604:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
1000a606:	60da      	str	r2, [r3, #12]
1000a608:	e342      	b.n	1000ac90 <UART_SetConfig+0x1118>
    }
    else
    {
      ret = HAL_ERROR;
1000a60a:	2301      	movs	r3, #1
1000a60c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
1000a610:	e33e      	b.n	1000ac90 <UART_SetConfig+0x1118>
    }
  }
  else
  {
    switch (clocksource)
1000a612:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
1000a616:	2b20      	cmp	r3, #32
1000a618:	dc4a      	bgt.n	1000a6b0 <UART_SetConfig+0xb38>
1000a61a:	2b00      	cmp	r3, #0
1000a61c:	f2c0 8325 	blt.w	1000ac6a <UART_SetConfig+0x10f2>
1000a620:	2b20      	cmp	r3, #32
1000a622:	f200 8322 	bhi.w	1000ac6a <UART_SetConfig+0x10f2>
1000a626:	a201      	add	r2, pc, #4	; (adr r2, 1000a62c <UART_SetConfig+0xab4>)
1000a628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000a62c:	1000a6c5 	.word	0x1000a6c5
1000a630:	1000a77b 	.word	0x1000a77b
1000a634:	1000a831 	.word	0x1000a831
1000a638:	1000ac6b 	.word	0x1000ac6b
1000a63c:	1000a8e7 	.word	0x1000a8e7
1000a640:	1000ac6b 	.word	0x1000ac6b
1000a644:	1000ac6b 	.word	0x1000ac6b
1000a648:	1000ac6b 	.word	0x1000ac6b
1000a64c:	1000a9a1 	.word	0x1000a9a1
1000a650:	1000ac6b 	.word	0x1000ac6b
1000a654:	1000ac6b 	.word	0x1000ac6b
1000a658:	1000ac6b 	.word	0x1000ac6b
1000a65c:	1000ac6b 	.word	0x1000ac6b
1000a660:	1000ac6b 	.word	0x1000ac6b
1000a664:	1000ac6b 	.word	0x1000ac6b
1000a668:	1000ac6b 	.word	0x1000ac6b
1000a66c:	1000aa5b 	.word	0x1000aa5b
1000a670:	1000ac6b 	.word	0x1000ac6b
1000a674:	1000ac6b 	.word	0x1000ac6b
1000a678:	1000ac6b 	.word	0x1000ac6b
1000a67c:	1000ac6b 	.word	0x1000ac6b
1000a680:	1000ac6b 	.word	0x1000ac6b
1000a684:	1000ac6b 	.word	0x1000ac6b
1000a688:	1000ac6b 	.word	0x1000ac6b
1000a68c:	1000ac6b 	.word	0x1000ac6b
1000a690:	1000ac6b 	.word	0x1000ac6b
1000a694:	1000ac6b 	.word	0x1000ac6b
1000a698:	1000ac6b 	.word	0x1000ac6b
1000a69c:	1000ac6b 	.word	0x1000ac6b
1000a6a0:	1000ac6b 	.word	0x1000ac6b
1000a6a4:	1000ac6b 	.word	0x1000ac6b
1000a6a8:	1000ac6b 	.word	0x1000ac6b
1000a6ac:	1000ab0b 	.word	0x1000ab0b
1000a6b0:	2b40      	cmp	r3, #64	; 0x40
1000a6b2:	f000 8282 	beq.w	1000abba <UART_SetConfig+0x1042>
1000a6b6:	e2d8      	b.n	1000ac6a <UART_SetConfig+0x10f2>
1000a6b8:	03d09000 	.word	0x03d09000
1000a6bc:	003d0900 	.word	0x003d0900
1000a6c0:	016e3600 	.word	0x016e3600
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
1000a6c4:	f7fb f956 	bl	10005974 <HAL_RCC_GetPCLK1Freq>
1000a6c8:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a6ca:	687b      	ldr	r3, [r7, #4]
1000a6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a6ce:	2b00      	cmp	r3, #0
1000a6d0:	d044      	beq.n	1000a75c <UART_SetConfig+0xbe4>
1000a6d2:	687b      	ldr	r3, [r7, #4]
1000a6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a6d6:	2b01      	cmp	r3, #1
1000a6d8:	d03e      	beq.n	1000a758 <UART_SetConfig+0xbe0>
1000a6da:	687b      	ldr	r3, [r7, #4]
1000a6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a6de:	2b02      	cmp	r3, #2
1000a6e0:	d038      	beq.n	1000a754 <UART_SetConfig+0xbdc>
1000a6e2:	687b      	ldr	r3, [r7, #4]
1000a6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a6e6:	2b03      	cmp	r3, #3
1000a6e8:	d032      	beq.n	1000a750 <UART_SetConfig+0xbd8>
1000a6ea:	687b      	ldr	r3, [r7, #4]
1000a6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a6ee:	2b04      	cmp	r3, #4
1000a6f0:	d02c      	beq.n	1000a74c <UART_SetConfig+0xbd4>
1000a6f2:	687b      	ldr	r3, [r7, #4]
1000a6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a6f6:	2b05      	cmp	r3, #5
1000a6f8:	d026      	beq.n	1000a748 <UART_SetConfig+0xbd0>
1000a6fa:	687b      	ldr	r3, [r7, #4]
1000a6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a6fe:	2b06      	cmp	r3, #6
1000a700:	d020      	beq.n	1000a744 <UART_SetConfig+0xbcc>
1000a702:	687b      	ldr	r3, [r7, #4]
1000a704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a706:	2b07      	cmp	r3, #7
1000a708:	d01a      	beq.n	1000a740 <UART_SetConfig+0xbc8>
1000a70a:	687b      	ldr	r3, [r7, #4]
1000a70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a70e:	2b08      	cmp	r3, #8
1000a710:	d014      	beq.n	1000a73c <UART_SetConfig+0xbc4>
1000a712:	687b      	ldr	r3, [r7, #4]
1000a714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a716:	2b09      	cmp	r3, #9
1000a718:	d00e      	beq.n	1000a738 <UART_SetConfig+0xbc0>
1000a71a:	687b      	ldr	r3, [r7, #4]
1000a71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a71e:	2b0a      	cmp	r3, #10
1000a720:	d008      	beq.n	1000a734 <UART_SetConfig+0xbbc>
1000a722:	687b      	ldr	r3, [r7, #4]
1000a724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a726:	2b0b      	cmp	r3, #11
1000a728:	d102      	bne.n	1000a730 <UART_SetConfig+0xbb8>
1000a72a:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a72e:	e016      	b.n	1000a75e <UART_SetConfig+0xbe6>
1000a730:	2301      	movs	r3, #1
1000a732:	e014      	b.n	1000a75e <UART_SetConfig+0xbe6>
1000a734:	2380      	movs	r3, #128	; 0x80
1000a736:	e012      	b.n	1000a75e <UART_SetConfig+0xbe6>
1000a738:	2340      	movs	r3, #64	; 0x40
1000a73a:	e010      	b.n	1000a75e <UART_SetConfig+0xbe6>
1000a73c:	2320      	movs	r3, #32
1000a73e:	e00e      	b.n	1000a75e <UART_SetConfig+0xbe6>
1000a740:	2310      	movs	r3, #16
1000a742:	e00c      	b.n	1000a75e <UART_SetConfig+0xbe6>
1000a744:	230c      	movs	r3, #12
1000a746:	e00a      	b.n	1000a75e <UART_SetConfig+0xbe6>
1000a748:	230a      	movs	r3, #10
1000a74a:	e008      	b.n	1000a75e <UART_SetConfig+0xbe6>
1000a74c:	2308      	movs	r3, #8
1000a74e:	e006      	b.n	1000a75e <UART_SetConfig+0xbe6>
1000a750:	2306      	movs	r3, #6
1000a752:	e004      	b.n	1000a75e <UART_SetConfig+0xbe6>
1000a754:	2304      	movs	r3, #4
1000a756:	e002      	b.n	1000a75e <UART_SetConfig+0xbe6>
1000a758:	2302      	movs	r3, #2
1000a75a:	e000      	b.n	1000a75e <UART_SetConfig+0xbe6>
1000a75c:	2301      	movs	r3, #1
1000a75e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000a760:	fbb2 f2f3 	udiv	r2, r2, r3
1000a764:	687b      	ldr	r3, [r7, #4]
1000a766:	685b      	ldr	r3, [r3, #4]
1000a768:	085b      	lsrs	r3, r3, #1
1000a76a:	441a      	add	r2, r3
1000a76c:	687b      	ldr	r3, [r7, #4]
1000a76e:	685b      	ldr	r3, [r3, #4]
1000a770:	fbb2 f3f3 	udiv	r3, r2, r3
1000a774:	b29b      	uxth	r3, r3
1000a776:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a778:	e27b      	b.n	1000ac72 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
1000a77a:	f7fb f916 	bl	100059aa <HAL_RCC_GetPCLK2Freq>
1000a77e:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a780:	687b      	ldr	r3, [r7, #4]
1000a782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a784:	2b00      	cmp	r3, #0
1000a786:	d044      	beq.n	1000a812 <UART_SetConfig+0xc9a>
1000a788:	687b      	ldr	r3, [r7, #4]
1000a78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a78c:	2b01      	cmp	r3, #1
1000a78e:	d03e      	beq.n	1000a80e <UART_SetConfig+0xc96>
1000a790:	687b      	ldr	r3, [r7, #4]
1000a792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a794:	2b02      	cmp	r3, #2
1000a796:	d038      	beq.n	1000a80a <UART_SetConfig+0xc92>
1000a798:	687b      	ldr	r3, [r7, #4]
1000a79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a79c:	2b03      	cmp	r3, #3
1000a79e:	d032      	beq.n	1000a806 <UART_SetConfig+0xc8e>
1000a7a0:	687b      	ldr	r3, [r7, #4]
1000a7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a7a4:	2b04      	cmp	r3, #4
1000a7a6:	d02c      	beq.n	1000a802 <UART_SetConfig+0xc8a>
1000a7a8:	687b      	ldr	r3, [r7, #4]
1000a7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a7ac:	2b05      	cmp	r3, #5
1000a7ae:	d026      	beq.n	1000a7fe <UART_SetConfig+0xc86>
1000a7b0:	687b      	ldr	r3, [r7, #4]
1000a7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a7b4:	2b06      	cmp	r3, #6
1000a7b6:	d020      	beq.n	1000a7fa <UART_SetConfig+0xc82>
1000a7b8:	687b      	ldr	r3, [r7, #4]
1000a7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a7bc:	2b07      	cmp	r3, #7
1000a7be:	d01a      	beq.n	1000a7f6 <UART_SetConfig+0xc7e>
1000a7c0:	687b      	ldr	r3, [r7, #4]
1000a7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a7c4:	2b08      	cmp	r3, #8
1000a7c6:	d014      	beq.n	1000a7f2 <UART_SetConfig+0xc7a>
1000a7c8:	687b      	ldr	r3, [r7, #4]
1000a7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a7cc:	2b09      	cmp	r3, #9
1000a7ce:	d00e      	beq.n	1000a7ee <UART_SetConfig+0xc76>
1000a7d0:	687b      	ldr	r3, [r7, #4]
1000a7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a7d4:	2b0a      	cmp	r3, #10
1000a7d6:	d008      	beq.n	1000a7ea <UART_SetConfig+0xc72>
1000a7d8:	687b      	ldr	r3, [r7, #4]
1000a7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a7dc:	2b0b      	cmp	r3, #11
1000a7de:	d102      	bne.n	1000a7e6 <UART_SetConfig+0xc6e>
1000a7e0:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a7e4:	e016      	b.n	1000a814 <UART_SetConfig+0xc9c>
1000a7e6:	2301      	movs	r3, #1
1000a7e8:	e014      	b.n	1000a814 <UART_SetConfig+0xc9c>
1000a7ea:	2380      	movs	r3, #128	; 0x80
1000a7ec:	e012      	b.n	1000a814 <UART_SetConfig+0xc9c>
1000a7ee:	2340      	movs	r3, #64	; 0x40
1000a7f0:	e010      	b.n	1000a814 <UART_SetConfig+0xc9c>
1000a7f2:	2320      	movs	r3, #32
1000a7f4:	e00e      	b.n	1000a814 <UART_SetConfig+0xc9c>
1000a7f6:	2310      	movs	r3, #16
1000a7f8:	e00c      	b.n	1000a814 <UART_SetConfig+0xc9c>
1000a7fa:	230c      	movs	r3, #12
1000a7fc:	e00a      	b.n	1000a814 <UART_SetConfig+0xc9c>
1000a7fe:	230a      	movs	r3, #10
1000a800:	e008      	b.n	1000a814 <UART_SetConfig+0xc9c>
1000a802:	2308      	movs	r3, #8
1000a804:	e006      	b.n	1000a814 <UART_SetConfig+0xc9c>
1000a806:	2306      	movs	r3, #6
1000a808:	e004      	b.n	1000a814 <UART_SetConfig+0xc9c>
1000a80a:	2304      	movs	r3, #4
1000a80c:	e002      	b.n	1000a814 <UART_SetConfig+0xc9c>
1000a80e:	2302      	movs	r3, #2
1000a810:	e000      	b.n	1000a814 <UART_SetConfig+0xc9c>
1000a812:	2301      	movs	r3, #1
1000a814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000a816:	fbb2 f2f3 	udiv	r2, r2, r3
1000a81a:	687b      	ldr	r3, [r7, #4]
1000a81c:	685b      	ldr	r3, [r3, #4]
1000a81e:	085b      	lsrs	r3, r3, #1
1000a820:	441a      	add	r2, r3
1000a822:	687b      	ldr	r3, [r7, #4]
1000a824:	685b      	ldr	r3, [r3, #4]
1000a826:	fbb2 f3f3 	udiv	r3, r2, r3
1000a82a:	b29b      	uxth	r3, r3
1000a82c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a82e:	e220      	b.n	1000ac72 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PCLK5:
        pclk = HAL_RCC_GetPCLK5Freq();
1000a830:	f7fb f8f1 	bl	10005a16 <HAL_RCC_GetPCLK5Freq>
1000a834:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a836:	687b      	ldr	r3, [r7, #4]
1000a838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a83a:	2b00      	cmp	r3, #0
1000a83c:	d044      	beq.n	1000a8c8 <UART_SetConfig+0xd50>
1000a83e:	687b      	ldr	r3, [r7, #4]
1000a840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a842:	2b01      	cmp	r3, #1
1000a844:	d03e      	beq.n	1000a8c4 <UART_SetConfig+0xd4c>
1000a846:	687b      	ldr	r3, [r7, #4]
1000a848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a84a:	2b02      	cmp	r3, #2
1000a84c:	d038      	beq.n	1000a8c0 <UART_SetConfig+0xd48>
1000a84e:	687b      	ldr	r3, [r7, #4]
1000a850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a852:	2b03      	cmp	r3, #3
1000a854:	d032      	beq.n	1000a8bc <UART_SetConfig+0xd44>
1000a856:	687b      	ldr	r3, [r7, #4]
1000a858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a85a:	2b04      	cmp	r3, #4
1000a85c:	d02c      	beq.n	1000a8b8 <UART_SetConfig+0xd40>
1000a85e:	687b      	ldr	r3, [r7, #4]
1000a860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a862:	2b05      	cmp	r3, #5
1000a864:	d026      	beq.n	1000a8b4 <UART_SetConfig+0xd3c>
1000a866:	687b      	ldr	r3, [r7, #4]
1000a868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a86a:	2b06      	cmp	r3, #6
1000a86c:	d020      	beq.n	1000a8b0 <UART_SetConfig+0xd38>
1000a86e:	687b      	ldr	r3, [r7, #4]
1000a870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a872:	2b07      	cmp	r3, #7
1000a874:	d01a      	beq.n	1000a8ac <UART_SetConfig+0xd34>
1000a876:	687b      	ldr	r3, [r7, #4]
1000a878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a87a:	2b08      	cmp	r3, #8
1000a87c:	d014      	beq.n	1000a8a8 <UART_SetConfig+0xd30>
1000a87e:	687b      	ldr	r3, [r7, #4]
1000a880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a882:	2b09      	cmp	r3, #9
1000a884:	d00e      	beq.n	1000a8a4 <UART_SetConfig+0xd2c>
1000a886:	687b      	ldr	r3, [r7, #4]
1000a888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a88a:	2b0a      	cmp	r3, #10
1000a88c:	d008      	beq.n	1000a8a0 <UART_SetConfig+0xd28>
1000a88e:	687b      	ldr	r3, [r7, #4]
1000a890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a892:	2b0b      	cmp	r3, #11
1000a894:	d102      	bne.n	1000a89c <UART_SetConfig+0xd24>
1000a896:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a89a:	e016      	b.n	1000a8ca <UART_SetConfig+0xd52>
1000a89c:	2301      	movs	r3, #1
1000a89e:	e014      	b.n	1000a8ca <UART_SetConfig+0xd52>
1000a8a0:	2380      	movs	r3, #128	; 0x80
1000a8a2:	e012      	b.n	1000a8ca <UART_SetConfig+0xd52>
1000a8a4:	2340      	movs	r3, #64	; 0x40
1000a8a6:	e010      	b.n	1000a8ca <UART_SetConfig+0xd52>
1000a8a8:	2320      	movs	r3, #32
1000a8aa:	e00e      	b.n	1000a8ca <UART_SetConfig+0xd52>
1000a8ac:	2310      	movs	r3, #16
1000a8ae:	e00c      	b.n	1000a8ca <UART_SetConfig+0xd52>
1000a8b0:	230c      	movs	r3, #12
1000a8b2:	e00a      	b.n	1000a8ca <UART_SetConfig+0xd52>
1000a8b4:	230a      	movs	r3, #10
1000a8b6:	e008      	b.n	1000a8ca <UART_SetConfig+0xd52>
1000a8b8:	2308      	movs	r3, #8
1000a8ba:	e006      	b.n	1000a8ca <UART_SetConfig+0xd52>
1000a8bc:	2306      	movs	r3, #6
1000a8be:	e004      	b.n	1000a8ca <UART_SetConfig+0xd52>
1000a8c0:	2304      	movs	r3, #4
1000a8c2:	e002      	b.n	1000a8ca <UART_SetConfig+0xd52>
1000a8c4:	2302      	movs	r3, #2
1000a8c6:	e000      	b.n	1000a8ca <UART_SetConfig+0xd52>
1000a8c8:	2301      	movs	r3, #1
1000a8ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000a8cc:	fbb2 f2f3 	udiv	r2, r2, r3
1000a8d0:	687b      	ldr	r3, [r7, #4]
1000a8d2:	685b      	ldr	r3, [r3, #4]
1000a8d4:	085b      	lsrs	r3, r3, #1
1000a8d6:	441a      	add	r2, r3
1000a8d8:	687b      	ldr	r3, [r7, #4]
1000a8da:	685b      	ldr	r3, [r3, #4]
1000a8dc:	fbb2 f3f3 	udiv	r3, r2, r3
1000a8e0:	b29b      	uxth	r3, r3
1000a8e2:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a8e4:	e1c5      	b.n	1000ac72 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PLL3Q:
        HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000a8e6:	f107 0314 	add.w	r3, r7, #20
1000a8ea:	4618      	mov	r0, r3
1000a8ec:	f7fa fe40 	bl	10005570 <HAL_RCC_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a8f0:	69ba      	ldr	r2, [r7, #24]
1000a8f2:	687b      	ldr	r3, [r7, #4]
1000a8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a8f6:	2b00      	cmp	r3, #0
1000a8f8:	d044      	beq.n	1000a984 <UART_SetConfig+0xe0c>
1000a8fa:	687b      	ldr	r3, [r7, #4]
1000a8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a8fe:	2b01      	cmp	r3, #1
1000a900:	d03e      	beq.n	1000a980 <UART_SetConfig+0xe08>
1000a902:	687b      	ldr	r3, [r7, #4]
1000a904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a906:	2b02      	cmp	r3, #2
1000a908:	d038      	beq.n	1000a97c <UART_SetConfig+0xe04>
1000a90a:	687b      	ldr	r3, [r7, #4]
1000a90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a90e:	2b03      	cmp	r3, #3
1000a910:	d032      	beq.n	1000a978 <UART_SetConfig+0xe00>
1000a912:	687b      	ldr	r3, [r7, #4]
1000a914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a916:	2b04      	cmp	r3, #4
1000a918:	d02c      	beq.n	1000a974 <UART_SetConfig+0xdfc>
1000a91a:	687b      	ldr	r3, [r7, #4]
1000a91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a91e:	2b05      	cmp	r3, #5
1000a920:	d026      	beq.n	1000a970 <UART_SetConfig+0xdf8>
1000a922:	687b      	ldr	r3, [r7, #4]
1000a924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a926:	2b06      	cmp	r3, #6
1000a928:	d020      	beq.n	1000a96c <UART_SetConfig+0xdf4>
1000a92a:	687b      	ldr	r3, [r7, #4]
1000a92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a92e:	2b07      	cmp	r3, #7
1000a930:	d01a      	beq.n	1000a968 <UART_SetConfig+0xdf0>
1000a932:	687b      	ldr	r3, [r7, #4]
1000a934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a936:	2b08      	cmp	r3, #8
1000a938:	d014      	beq.n	1000a964 <UART_SetConfig+0xdec>
1000a93a:	687b      	ldr	r3, [r7, #4]
1000a93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a93e:	2b09      	cmp	r3, #9
1000a940:	d00e      	beq.n	1000a960 <UART_SetConfig+0xde8>
1000a942:	687b      	ldr	r3, [r7, #4]
1000a944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a946:	2b0a      	cmp	r3, #10
1000a948:	d008      	beq.n	1000a95c <UART_SetConfig+0xde4>
1000a94a:	687b      	ldr	r3, [r7, #4]
1000a94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a94e:	2b0b      	cmp	r3, #11
1000a950:	d102      	bne.n	1000a958 <UART_SetConfig+0xde0>
1000a952:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a956:	e016      	b.n	1000a986 <UART_SetConfig+0xe0e>
1000a958:	2301      	movs	r3, #1
1000a95a:	e014      	b.n	1000a986 <UART_SetConfig+0xe0e>
1000a95c:	2380      	movs	r3, #128	; 0x80
1000a95e:	e012      	b.n	1000a986 <UART_SetConfig+0xe0e>
1000a960:	2340      	movs	r3, #64	; 0x40
1000a962:	e010      	b.n	1000a986 <UART_SetConfig+0xe0e>
1000a964:	2320      	movs	r3, #32
1000a966:	e00e      	b.n	1000a986 <UART_SetConfig+0xe0e>
1000a968:	2310      	movs	r3, #16
1000a96a:	e00c      	b.n	1000a986 <UART_SetConfig+0xe0e>
1000a96c:	230c      	movs	r3, #12
1000a96e:	e00a      	b.n	1000a986 <UART_SetConfig+0xe0e>
1000a970:	230a      	movs	r3, #10
1000a972:	e008      	b.n	1000a986 <UART_SetConfig+0xe0e>
1000a974:	2308      	movs	r3, #8
1000a976:	e006      	b.n	1000a986 <UART_SetConfig+0xe0e>
1000a978:	2306      	movs	r3, #6
1000a97a:	e004      	b.n	1000a986 <UART_SetConfig+0xe0e>
1000a97c:	2304      	movs	r3, #4
1000a97e:	e002      	b.n	1000a986 <UART_SetConfig+0xe0e>
1000a980:	2302      	movs	r3, #2
1000a982:	e000      	b.n	1000a986 <UART_SetConfig+0xe0e>
1000a984:	2301      	movs	r3, #1
1000a986:	fbb2 f2f3 	udiv	r2, r2, r3
1000a98a:	687b      	ldr	r3, [r7, #4]
1000a98c:	685b      	ldr	r3, [r3, #4]
1000a98e:	085b      	lsrs	r3, r3, #1
1000a990:	441a      	add	r2, r3
1000a992:	687b      	ldr	r3, [r7, #4]
1000a994:	685b      	ldr	r3, [r3, #4]
1000a996:	fbb2 f3f3 	udiv	r3, r2, r3
1000a99a:	b29b      	uxth	r3, r3
1000a99c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a99e:	e168      	b.n	1000ac72 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PLL4Q:
        HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000a9a0:	f107 0308 	add.w	r3, r7, #8
1000a9a4:	4618      	mov	r0, r3
1000a9a6:	f7fa fedd 	bl	10005764 <HAL_RCC_GetPLL4ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll4_clocks.PLL4_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a9aa:	68fa      	ldr	r2, [r7, #12]
1000a9ac:	687b      	ldr	r3, [r7, #4]
1000a9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a9b0:	2b00      	cmp	r3, #0
1000a9b2:	d044      	beq.n	1000aa3e <UART_SetConfig+0xec6>
1000a9b4:	687b      	ldr	r3, [r7, #4]
1000a9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a9b8:	2b01      	cmp	r3, #1
1000a9ba:	d03e      	beq.n	1000aa3a <UART_SetConfig+0xec2>
1000a9bc:	687b      	ldr	r3, [r7, #4]
1000a9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a9c0:	2b02      	cmp	r3, #2
1000a9c2:	d038      	beq.n	1000aa36 <UART_SetConfig+0xebe>
1000a9c4:	687b      	ldr	r3, [r7, #4]
1000a9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a9c8:	2b03      	cmp	r3, #3
1000a9ca:	d032      	beq.n	1000aa32 <UART_SetConfig+0xeba>
1000a9cc:	687b      	ldr	r3, [r7, #4]
1000a9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a9d0:	2b04      	cmp	r3, #4
1000a9d2:	d02c      	beq.n	1000aa2e <UART_SetConfig+0xeb6>
1000a9d4:	687b      	ldr	r3, [r7, #4]
1000a9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a9d8:	2b05      	cmp	r3, #5
1000a9da:	d026      	beq.n	1000aa2a <UART_SetConfig+0xeb2>
1000a9dc:	687b      	ldr	r3, [r7, #4]
1000a9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a9e0:	2b06      	cmp	r3, #6
1000a9e2:	d020      	beq.n	1000aa26 <UART_SetConfig+0xeae>
1000a9e4:	687b      	ldr	r3, [r7, #4]
1000a9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a9e8:	2b07      	cmp	r3, #7
1000a9ea:	d01a      	beq.n	1000aa22 <UART_SetConfig+0xeaa>
1000a9ec:	687b      	ldr	r3, [r7, #4]
1000a9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a9f0:	2b08      	cmp	r3, #8
1000a9f2:	d014      	beq.n	1000aa1e <UART_SetConfig+0xea6>
1000a9f4:	687b      	ldr	r3, [r7, #4]
1000a9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a9f8:	2b09      	cmp	r3, #9
1000a9fa:	d00e      	beq.n	1000aa1a <UART_SetConfig+0xea2>
1000a9fc:	687b      	ldr	r3, [r7, #4]
1000a9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000aa00:	2b0a      	cmp	r3, #10
1000aa02:	d008      	beq.n	1000aa16 <UART_SetConfig+0xe9e>
1000aa04:	687b      	ldr	r3, [r7, #4]
1000aa06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000aa08:	2b0b      	cmp	r3, #11
1000aa0a:	d102      	bne.n	1000aa12 <UART_SetConfig+0xe9a>
1000aa0c:	f44f 7380 	mov.w	r3, #256	; 0x100
1000aa10:	e016      	b.n	1000aa40 <UART_SetConfig+0xec8>
1000aa12:	2301      	movs	r3, #1
1000aa14:	e014      	b.n	1000aa40 <UART_SetConfig+0xec8>
1000aa16:	2380      	movs	r3, #128	; 0x80
1000aa18:	e012      	b.n	1000aa40 <UART_SetConfig+0xec8>
1000aa1a:	2340      	movs	r3, #64	; 0x40
1000aa1c:	e010      	b.n	1000aa40 <UART_SetConfig+0xec8>
1000aa1e:	2320      	movs	r3, #32
1000aa20:	e00e      	b.n	1000aa40 <UART_SetConfig+0xec8>
1000aa22:	2310      	movs	r3, #16
1000aa24:	e00c      	b.n	1000aa40 <UART_SetConfig+0xec8>
1000aa26:	230c      	movs	r3, #12
1000aa28:	e00a      	b.n	1000aa40 <UART_SetConfig+0xec8>
1000aa2a:	230a      	movs	r3, #10
1000aa2c:	e008      	b.n	1000aa40 <UART_SetConfig+0xec8>
1000aa2e:	2308      	movs	r3, #8
1000aa30:	e006      	b.n	1000aa40 <UART_SetConfig+0xec8>
1000aa32:	2306      	movs	r3, #6
1000aa34:	e004      	b.n	1000aa40 <UART_SetConfig+0xec8>
1000aa36:	2304      	movs	r3, #4
1000aa38:	e002      	b.n	1000aa40 <UART_SetConfig+0xec8>
1000aa3a:	2302      	movs	r3, #2
1000aa3c:	e000      	b.n	1000aa40 <UART_SetConfig+0xec8>
1000aa3e:	2301      	movs	r3, #1
1000aa40:	fbb2 f2f3 	udiv	r2, r2, r3
1000aa44:	687b      	ldr	r3, [r7, #4]
1000aa46:	685b      	ldr	r3, [r3, #4]
1000aa48:	085b      	lsrs	r3, r3, #1
1000aa4a:	441a      	add	r2, r3
1000aa4c:	687b      	ldr	r3, [r7, #4]
1000aa4e:	685b      	ldr	r3, [r3, #4]
1000aa50:	fbb2 f3f3 	udiv	r3, r2, r3
1000aa54:	b29b      	uxth	r3, r3
1000aa56:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000aa58:	e10b      	b.n	1000ac72 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000aa5a:	687b      	ldr	r3, [r7, #4]
1000aa5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000aa5e:	2b00      	cmp	r3, #0
1000aa60:	d044      	beq.n	1000aaec <UART_SetConfig+0xf74>
1000aa62:	687b      	ldr	r3, [r7, #4]
1000aa64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000aa66:	2b01      	cmp	r3, #1
1000aa68:	d03e      	beq.n	1000aae8 <UART_SetConfig+0xf70>
1000aa6a:	687b      	ldr	r3, [r7, #4]
1000aa6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000aa6e:	2b02      	cmp	r3, #2
1000aa70:	d038      	beq.n	1000aae4 <UART_SetConfig+0xf6c>
1000aa72:	687b      	ldr	r3, [r7, #4]
1000aa74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000aa76:	2b03      	cmp	r3, #3
1000aa78:	d032      	beq.n	1000aae0 <UART_SetConfig+0xf68>
1000aa7a:	687b      	ldr	r3, [r7, #4]
1000aa7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000aa7e:	2b04      	cmp	r3, #4
1000aa80:	d02c      	beq.n	1000aadc <UART_SetConfig+0xf64>
1000aa82:	687b      	ldr	r3, [r7, #4]
1000aa84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000aa86:	2b05      	cmp	r3, #5
1000aa88:	d026      	beq.n	1000aad8 <UART_SetConfig+0xf60>
1000aa8a:	687b      	ldr	r3, [r7, #4]
1000aa8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000aa8e:	2b06      	cmp	r3, #6
1000aa90:	d020      	beq.n	1000aad4 <UART_SetConfig+0xf5c>
1000aa92:	687b      	ldr	r3, [r7, #4]
1000aa94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000aa96:	2b07      	cmp	r3, #7
1000aa98:	d01a      	beq.n	1000aad0 <UART_SetConfig+0xf58>
1000aa9a:	687b      	ldr	r3, [r7, #4]
1000aa9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000aa9e:	2b08      	cmp	r3, #8
1000aaa0:	d014      	beq.n	1000aacc <UART_SetConfig+0xf54>
1000aaa2:	687b      	ldr	r3, [r7, #4]
1000aaa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000aaa6:	2b09      	cmp	r3, #9
1000aaa8:	d00e      	beq.n	1000aac8 <UART_SetConfig+0xf50>
1000aaaa:	687b      	ldr	r3, [r7, #4]
1000aaac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000aaae:	2b0a      	cmp	r3, #10
1000aab0:	d008      	beq.n	1000aac4 <UART_SetConfig+0xf4c>
1000aab2:	687b      	ldr	r3, [r7, #4]
1000aab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000aab6:	2b0b      	cmp	r3, #11
1000aab8:	d102      	bne.n	1000aac0 <UART_SetConfig+0xf48>
1000aaba:	f44f 7380 	mov.w	r3, #256	; 0x100
1000aabe:	e016      	b.n	1000aaee <UART_SetConfig+0xf76>
1000aac0:	2301      	movs	r3, #1
1000aac2:	e014      	b.n	1000aaee <UART_SetConfig+0xf76>
1000aac4:	2380      	movs	r3, #128	; 0x80
1000aac6:	e012      	b.n	1000aaee <UART_SetConfig+0xf76>
1000aac8:	2340      	movs	r3, #64	; 0x40
1000aaca:	e010      	b.n	1000aaee <UART_SetConfig+0xf76>
1000aacc:	2320      	movs	r3, #32
1000aace:	e00e      	b.n	1000aaee <UART_SetConfig+0xf76>
1000aad0:	2310      	movs	r3, #16
1000aad2:	e00c      	b.n	1000aaee <UART_SetConfig+0xf76>
1000aad4:	230c      	movs	r3, #12
1000aad6:	e00a      	b.n	1000aaee <UART_SetConfig+0xf76>
1000aad8:	230a      	movs	r3, #10
1000aada:	e008      	b.n	1000aaee <UART_SetConfig+0xf76>
1000aadc:	2308      	movs	r3, #8
1000aade:	e006      	b.n	1000aaee <UART_SetConfig+0xf76>
1000aae0:	2306      	movs	r3, #6
1000aae2:	e004      	b.n	1000aaee <UART_SetConfig+0xf76>
1000aae4:	2304      	movs	r3, #4
1000aae6:	e002      	b.n	1000aaee <UART_SetConfig+0xf76>
1000aae8:	2302      	movs	r3, #2
1000aaea:	e000      	b.n	1000aaee <UART_SetConfig+0xf76>
1000aaec:	2301      	movs	r3, #1
1000aaee:	4a72      	ldr	r2, [pc, #456]	; (1000acb8 <UART_SetConfig+0x1140>)
1000aaf0:	fbb2 f2f3 	udiv	r2, r2, r3
1000aaf4:	687b      	ldr	r3, [r7, #4]
1000aaf6:	685b      	ldr	r3, [r3, #4]
1000aaf8:	085b      	lsrs	r3, r3, #1
1000aafa:	441a      	add	r2, r3
1000aafc:	687b      	ldr	r3, [r7, #4]
1000aafe:	685b      	ldr	r3, [r3, #4]
1000ab00:	fbb2 f3f3 	udiv	r3, r2, r3
1000ab04:	b29b      	uxth	r3, r3
1000ab06:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000ab08:	e0b3      	b.n	1000ac72 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000ab0a:	687b      	ldr	r3, [r7, #4]
1000ab0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000ab0e:	2b00      	cmp	r3, #0
1000ab10:	d044      	beq.n	1000ab9c <UART_SetConfig+0x1024>
1000ab12:	687b      	ldr	r3, [r7, #4]
1000ab14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000ab16:	2b01      	cmp	r3, #1
1000ab18:	d03e      	beq.n	1000ab98 <UART_SetConfig+0x1020>
1000ab1a:	687b      	ldr	r3, [r7, #4]
1000ab1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000ab1e:	2b02      	cmp	r3, #2
1000ab20:	d038      	beq.n	1000ab94 <UART_SetConfig+0x101c>
1000ab22:	687b      	ldr	r3, [r7, #4]
1000ab24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000ab26:	2b03      	cmp	r3, #3
1000ab28:	d032      	beq.n	1000ab90 <UART_SetConfig+0x1018>
1000ab2a:	687b      	ldr	r3, [r7, #4]
1000ab2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000ab2e:	2b04      	cmp	r3, #4
1000ab30:	d02c      	beq.n	1000ab8c <UART_SetConfig+0x1014>
1000ab32:	687b      	ldr	r3, [r7, #4]
1000ab34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000ab36:	2b05      	cmp	r3, #5
1000ab38:	d026      	beq.n	1000ab88 <UART_SetConfig+0x1010>
1000ab3a:	687b      	ldr	r3, [r7, #4]
1000ab3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000ab3e:	2b06      	cmp	r3, #6
1000ab40:	d020      	beq.n	1000ab84 <UART_SetConfig+0x100c>
1000ab42:	687b      	ldr	r3, [r7, #4]
1000ab44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000ab46:	2b07      	cmp	r3, #7
1000ab48:	d01a      	beq.n	1000ab80 <UART_SetConfig+0x1008>
1000ab4a:	687b      	ldr	r3, [r7, #4]
1000ab4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000ab4e:	2b08      	cmp	r3, #8
1000ab50:	d014      	beq.n	1000ab7c <UART_SetConfig+0x1004>
1000ab52:	687b      	ldr	r3, [r7, #4]
1000ab54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000ab56:	2b09      	cmp	r3, #9
1000ab58:	d00e      	beq.n	1000ab78 <UART_SetConfig+0x1000>
1000ab5a:	687b      	ldr	r3, [r7, #4]
1000ab5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000ab5e:	2b0a      	cmp	r3, #10
1000ab60:	d008      	beq.n	1000ab74 <UART_SetConfig+0xffc>
1000ab62:	687b      	ldr	r3, [r7, #4]
1000ab64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000ab66:	2b0b      	cmp	r3, #11
1000ab68:	d102      	bne.n	1000ab70 <UART_SetConfig+0xff8>
1000ab6a:	f44f 7380 	mov.w	r3, #256	; 0x100
1000ab6e:	e016      	b.n	1000ab9e <UART_SetConfig+0x1026>
1000ab70:	2301      	movs	r3, #1
1000ab72:	e014      	b.n	1000ab9e <UART_SetConfig+0x1026>
1000ab74:	2380      	movs	r3, #128	; 0x80
1000ab76:	e012      	b.n	1000ab9e <UART_SetConfig+0x1026>
1000ab78:	2340      	movs	r3, #64	; 0x40
1000ab7a:	e010      	b.n	1000ab9e <UART_SetConfig+0x1026>
1000ab7c:	2320      	movs	r3, #32
1000ab7e:	e00e      	b.n	1000ab9e <UART_SetConfig+0x1026>
1000ab80:	2310      	movs	r3, #16
1000ab82:	e00c      	b.n	1000ab9e <UART_SetConfig+0x1026>
1000ab84:	230c      	movs	r3, #12
1000ab86:	e00a      	b.n	1000ab9e <UART_SetConfig+0x1026>
1000ab88:	230a      	movs	r3, #10
1000ab8a:	e008      	b.n	1000ab9e <UART_SetConfig+0x1026>
1000ab8c:	2308      	movs	r3, #8
1000ab8e:	e006      	b.n	1000ab9e <UART_SetConfig+0x1026>
1000ab90:	2306      	movs	r3, #6
1000ab92:	e004      	b.n	1000ab9e <UART_SetConfig+0x1026>
1000ab94:	2304      	movs	r3, #4
1000ab96:	e002      	b.n	1000ab9e <UART_SetConfig+0x1026>
1000ab98:	2302      	movs	r3, #2
1000ab9a:	e000      	b.n	1000ab9e <UART_SetConfig+0x1026>
1000ab9c:	2301      	movs	r3, #1
1000ab9e:	4a47      	ldr	r2, [pc, #284]	; (1000acbc <UART_SetConfig+0x1144>)
1000aba0:	fbb2 f2f3 	udiv	r2, r2, r3
1000aba4:	687b      	ldr	r3, [r7, #4]
1000aba6:	685b      	ldr	r3, [r3, #4]
1000aba8:	085b      	lsrs	r3, r3, #1
1000abaa:	441a      	add	r2, r3
1000abac:	687b      	ldr	r3, [r7, #4]
1000abae:	685b      	ldr	r3, [r3, #4]
1000abb0:	fbb2 f3f3 	udiv	r3, r2, r3
1000abb4:	b29b      	uxth	r3, r3
1000abb6:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000abb8:	e05b      	b.n	1000ac72 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_HSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000abba:	687b      	ldr	r3, [r7, #4]
1000abbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000abbe:	2b00      	cmp	r3, #0
1000abc0:	d044      	beq.n	1000ac4c <UART_SetConfig+0x10d4>
1000abc2:	687b      	ldr	r3, [r7, #4]
1000abc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000abc6:	2b01      	cmp	r3, #1
1000abc8:	d03e      	beq.n	1000ac48 <UART_SetConfig+0x10d0>
1000abca:	687b      	ldr	r3, [r7, #4]
1000abcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000abce:	2b02      	cmp	r3, #2
1000abd0:	d038      	beq.n	1000ac44 <UART_SetConfig+0x10cc>
1000abd2:	687b      	ldr	r3, [r7, #4]
1000abd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000abd6:	2b03      	cmp	r3, #3
1000abd8:	d032      	beq.n	1000ac40 <UART_SetConfig+0x10c8>
1000abda:	687b      	ldr	r3, [r7, #4]
1000abdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000abde:	2b04      	cmp	r3, #4
1000abe0:	d02c      	beq.n	1000ac3c <UART_SetConfig+0x10c4>
1000abe2:	687b      	ldr	r3, [r7, #4]
1000abe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000abe6:	2b05      	cmp	r3, #5
1000abe8:	d026      	beq.n	1000ac38 <UART_SetConfig+0x10c0>
1000abea:	687b      	ldr	r3, [r7, #4]
1000abec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000abee:	2b06      	cmp	r3, #6
1000abf0:	d020      	beq.n	1000ac34 <UART_SetConfig+0x10bc>
1000abf2:	687b      	ldr	r3, [r7, #4]
1000abf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000abf6:	2b07      	cmp	r3, #7
1000abf8:	d01a      	beq.n	1000ac30 <UART_SetConfig+0x10b8>
1000abfa:	687b      	ldr	r3, [r7, #4]
1000abfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000abfe:	2b08      	cmp	r3, #8
1000ac00:	d014      	beq.n	1000ac2c <UART_SetConfig+0x10b4>
1000ac02:	687b      	ldr	r3, [r7, #4]
1000ac04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000ac06:	2b09      	cmp	r3, #9
1000ac08:	d00e      	beq.n	1000ac28 <UART_SetConfig+0x10b0>
1000ac0a:	687b      	ldr	r3, [r7, #4]
1000ac0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000ac0e:	2b0a      	cmp	r3, #10
1000ac10:	d008      	beq.n	1000ac24 <UART_SetConfig+0x10ac>
1000ac12:	687b      	ldr	r3, [r7, #4]
1000ac14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000ac16:	2b0b      	cmp	r3, #11
1000ac18:	d102      	bne.n	1000ac20 <UART_SetConfig+0x10a8>
1000ac1a:	f44f 7380 	mov.w	r3, #256	; 0x100
1000ac1e:	e016      	b.n	1000ac4e <UART_SetConfig+0x10d6>
1000ac20:	2301      	movs	r3, #1
1000ac22:	e014      	b.n	1000ac4e <UART_SetConfig+0x10d6>
1000ac24:	2380      	movs	r3, #128	; 0x80
1000ac26:	e012      	b.n	1000ac4e <UART_SetConfig+0x10d6>
1000ac28:	2340      	movs	r3, #64	; 0x40
1000ac2a:	e010      	b.n	1000ac4e <UART_SetConfig+0x10d6>
1000ac2c:	2320      	movs	r3, #32
1000ac2e:	e00e      	b.n	1000ac4e <UART_SetConfig+0x10d6>
1000ac30:	2310      	movs	r3, #16
1000ac32:	e00c      	b.n	1000ac4e <UART_SetConfig+0x10d6>
1000ac34:	230c      	movs	r3, #12
1000ac36:	e00a      	b.n	1000ac4e <UART_SetConfig+0x10d6>
1000ac38:	230a      	movs	r3, #10
1000ac3a:	e008      	b.n	1000ac4e <UART_SetConfig+0x10d6>
1000ac3c:	2308      	movs	r3, #8
1000ac3e:	e006      	b.n	1000ac4e <UART_SetConfig+0x10d6>
1000ac40:	2306      	movs	r3, #6
1000ac42:	e004      	b.n	1000ac4e <UART_SetConfig+0x10d6>
1000ac44:	2304      	movs	r3, #4
1000ac46:	e002      	b.n	1000ac4e <UART_SetConfig+0x10d6>
1000ac48:	2302      	movs	r3, #2
1000ac4a:	e000      	b.n	1000ac4e <UART_SetConfig+0x10d6>
1000ac4c:	2301      	movs	r3, #1
1000ac4e:	4a1c      	ldr	r2, [pc, #112]	; (1000acc0 <UART_SetConfig+0x1148>)
1000ac50:	fbb2 f2f3 	udiv	r2, r2, r3
1000ac54:	687b      	ldr	r3, [r7, #4]
1000ac56:	685b      	ldr	r3, [r3, #4]
1000ac58:	085b      	lsrs	r3, r3, #1
1000ac5a:	441a      	add	r2, r3
1000ac5c:	687b      	ldr	r3, [r7, #4]
1000ac5e:	685b      	ldr	r3, [r3, #4]
1000ac60:	fbb2 f3f3 	udiv	r3, r2, r3
1000ac64:	b29b      	uxth	r3, r3
1000ac66:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000ac68:	e003      	b.n	1000ac72 <UART_SetConfig+0x10fa>
      default:
        ret = HAL_ERROR;
1000ac6a:	2301      	movs	r3, #1
1000ac6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
1000ac70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
1000ac72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000ac74:	2b0f      	cmp	r3, #15
1000ac76:	d908      	bls.n	1000ac8a <UART_SetConfig+0x1112>
1000ac78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000ac7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
1000ac7e:	d204      	bcs.n	1000ac8a <UART_SetConfig+0x1112>
    {
      huart->Instance->BRR = usartdiv;
1000ac80:	687b      	ldr	r3, [r7, #4]
1000ac82:	681b      	ldr	r3, [r3, #0]
1000ac84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1000ac86:	60da      	str	r2, [r3, #12]
1000ac88:	e002      	b.n	1000ac90 <UART_SetConfig+0x1118>
    }
    else
    {
      ret = HAL_ERROR;
1000ac8a:	2301      	movs	r3, #1
1000ac8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
1000ac90:	687b      	ldr	r3, [r7, #4]
1000ac92:	2201      	movs	r2, #1
1000ac94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
1000ac98:	687b      	ldr	r3, [r7, #4]
1000ac9a:	2201      	movs	r2, #1
1000ac9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
1000aca0:	687b      	ldr	r3, [r7, #4]
1000aca2:	2200      	movs	r2, #0
1000aca4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
1000aca6:	687b      	ldr	r3, [r7, #4]
1000aca8:	2200      	movs	r2, #0
1000acaa:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
1000acac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
1000acb0:	4618      	mov	r0, r3
1000acb2:	3738      	adds	r7, #56	; 0x38
1000acb4:	46bd      	mov	sp, r7
1000acb6:	bd80      	pop	{r7, pc}
1000acb8:	03d09000 	.word	0x03d09000
1000acbc:	003d0900 	.word	0x003d0900
1000acc0:	016e3600 	.word	0x016e3600

1000acc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
1000acc4:	b480      	push	{r7}
1000acc6:	b083      	sub	sp, #12
1000acc8:	af00      	add	r7, sp, #0
1000acca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
1000accc:	687b      	ldr	r3, [r7, #4]
1000acce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000acd0:	f003 0301 	and.w	r3, r3, #1
1000acd4:	2b00      	cmp	r3, #0
1000acd6:	d00a      	beq.n	1000acee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
1000acd8:	687b      	ldr	r3, [r7, #4]
1000acda:	681b      	ldr	r3, [r3, #0]
1000acdc:	685b      	ldr	r3, [r3, #4]
1000acde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
1000ace2:	687b      	ldr	r3, [r7, #4]
1000ace4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1000ace6:	687b      	ldr	r3, [r7, #4]
1000ace8:	681b      	ldr	r3, [r3, #0]
1000acea:	430a      	orrs	r2, r1
1000acec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
1000acee:	687b      	ldr	r3, [r7, #4]
1000acf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000acf2:	f003 0302 	and.w	r3, r3, #2
1000acf6:	2b00      	cmp	r3, #0
1000acf8:	d00a      	beq.n	1000ad10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
1000acfa:	687b      	ldr	r3, [r7, #4]
1000acfc:	681b      	ldr	r3, [r3, #0]
1000acfe:	685b      	ldr	r3, [r3, #4]
1000ad00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
1000ad04:	687b      	ldr	r3, [r7, #4]
1000ad06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
1000ad08:	687b      	ldr	r3, [r7, #4]
1000ad0a:	681b      	ldr	r3, [r3, #0]
1000ad0c:	430a      	orrs	r2, r1
1000ad0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
1000ad10:	687b      	ldr	r3, [r7, #4]
1000ad12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000ad14:	f003 0304 	and.w	r3, r3, #4
1000ad18:	2b00      	cmp	r3, #0
1000ad1a:	d00a      	beq.n	1000ad32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
1000ad1c:	687b      	ldr	r3, [r7, #4]
1000ad1e:	681b      	ldr	r3, [r3, #0]
1000ad20:	685b      	ldr	r3, [r3, #4]
1000ad22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
1000ad26:	687b      	ldr	r3, [r7, #4]
1000ad28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
1000ad2a:	687b      	ldr	r3, [r7, #4]
1000ad2c:	681b      	ldr	r3, [r3, #0]
1000ad2e:	430a      	orrs	r2, r1
1000ad30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
1000ad32:	687b      	ldr	r3, [r7, #4]
1000ad34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000ad36:	f003 0308 	and.w	r3, r3, #8
1000ad3a:	2b00      	cmp	r3, #0
1000ad3c:	d00a      	beq.n	1000ad54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
1000ad3e:	687b      	ldr	r3, [r7, #4]
1000ad40:	681b      	ldr	r3, [r3, #0]
1000ad42:	685b      	ldr	r3, [r3, #4]
1000ad44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
1000ad48:	687b      	ldr	r3, [r7, #4]
1000ad4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1000ad4c:	687b      	ldr	r3, [r7, #4]
1000ad4e:	681b      	ldr	r3, [r3, #0]
1000ad50:	430a      	orrs	r2, r1
1000ad52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
1000ad54:	687b      	ldr	r3, [r7, #4]
1000ad56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000ad58:	f003 0310 	and.w	r3, r3, #16
1000ad5c:	2b00      	cmp	r3, #0
1000ad5e:	d00a      	beq.n	1000ad76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
1000ad60:	687b      	ldr	r3, [r7, #4]
1000ad62:	681b      	ldr	r3, [r3, #0]
1000ad64:	689b      	ldr	r3, [r3, #8]
1000ad66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
1000ad6a:	687b      	ldr	r3, [r7, #4]
1000ad6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
1000ad6e:	687b      	ldr	r3, [r7, #4]
1000ad70:	681b      	ldr	r3, [r3, #0]
1000ad72:	430a      	orrs	r2, r1
1000ad74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
1000ad76:	687b      	ldr	r3, [r7, #4]
1000ad78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000ad7a:	f003 0320 	and.w	r3, r3, #32
1000ad7e:	2b00      	cmp	r3, #0
1000ad80:	d00a      	beq.n	1000ad98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
1000ad82:	687b      	ldr	r3, [r7, #4]
1000ad84:	681b      	ldr	r3, [r3, #0]
1000ad86:	689b      	ldr	r3, [r3, #8]
1000ad88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
1000ad8c:	687b      	ldr	r3, [r7, #4]
1000ad8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
1000ad90:	687b      	ldr	r3, [r7, #4]
1000ad92:	681b      	ldr	r3, [r3, #0]
1000ad94:	430a      	orrs	r2, r1
1000ad96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
1000ad98:	687b      	ldr	r3, [r7, #4]
1000ad9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000ad9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
1000ada0:	2b00      	cmp	r3, #0
1000ada2:	d01a      	beq.n	1000adda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
1000ada4:	687b      	ldr	r3, [r7, #4]
1000ada6:	681b      	ldr	r3, [r3, #0]
1000ada8:	685b      	ldr	r3, [r3, #4]
1000adaa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
1000adae:	687b      	ldr	r3, [r7, #4]
1000adb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
1000adb2:	687b      	ldr	r3, [r7, #4]
1000adb4:	681b      	ldr	r3, [r3, #0]
1000adb6:	430a      	orrs	r2, r1
1000adb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
1000adba:	687b      	ldr	r3, [r7, #4]
1000adbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1000adbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
1000adc2:	d10a      	bne.n	1000adda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
1000adc4:	687b      	ldr	r3, [r7, #4]
1000adc6:	681b      	ldr	r3, [r3, #0]
1000adc8:	685b      	ldr	r3, [r3, #4]
1000adca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
1000adce:	687b      	ldr	r3, [r7, #4]
1000add0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
1000add2:	687b      	ldr	r3, [r7, #4]
1000add4:	681b      	ldr	r3, [r3, #0]
1000add6:	430a      	orrs	r2, r1
1000add8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
1000adda:	687b      	ldr	r3, [r7, #4]
1000addc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000adde:	f003 0380 	and.w	r3, r3, #128	; 0x80
1000ade2:	2b00      	cmp	r3, #0
1000ade4:	d00a      	beq.n	1000adfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
1000ade6:	687b      	ldr	r3, [r7, #4]
1000ade8:	681b      	ldr	r3, [r3, #0]
1000adea:	685b      	ldr	r3, [r3, #4]
1000adec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
1000adf0:	687b      	ldr	r3, [r7, #4]
1000adf2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
1000adf4:	687b      	ldr	r3, [r7, #4]
1000adf6:	681b      	ldr	r3, [r3, #0]
1000adf8:	430a      	orrs	r2, r1
1000adfa:	605a      	str	r2, [r3, #4]
  }
}
1000adfc:	bf00      	nop
1000adfe:	370c      	adds	r7, #12
1000ae00:	46bd      	mov	sp, r7
1000ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
1000ae06:	4770      	bx	lr

1000ae08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
1000ae08:	b580      	push	{r7, lr}
1000ae0a:	b086      	sub	sp, #24
1000ae0c:	af02      	add	r7, sp, #8
1000ae0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
1000ae10:	687b      	ldr	r3, [r7, #4]
1000ae12:	2200      	movs	r2, #0
1000ae14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
1000ae18:	f7f6 fdfc 	bl	10001a14 <HAL_GetTick>
1000ae1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
1000ae1e:	687b      	ldr	r3, [r7, #4]
1000ae20:	681b      	ldr	r3, [r3, #0]
1000ae22:	681b      	ldr	r3, [r3, #0]
1000ae24:	f003 0308 	and.w	r3, r3, #8
1000ae28:	2b08      	cmp	r3, #8
1000ae2a:	d10e      	bne.n	1000ae4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
1000ae2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
1000ae30:	9300      	str	r3, [sp, #0]
1000ae32:	68fb      	ldr	r3, [r7, #12]
1000ae34:	2200      	movs	r2, #0
1000ae36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
1000ae3a:	6878      	ldr	r0, [r7, #4]
1000ae3c:	f000 f82c 	bl	1000ae98 <UART_WaitOnFlagUntilTimeout>
1000ae40:	4603      	mov	r3, r0
1000ae42:	2b00      	cmp	r3, #0
1000ae44:	d001      	beq.n	1000ae4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
1000ae46:	2303      	movs	r3, #3
1000ae48:	e022      	b.n	1000ae90 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
1000ae4a:	687b      	ldr	r3, [r7, #4]
1000ae4c:	681b      	ldr	r3, [r3, #0]
1000ae4e:	681b      	ldr	r3, [r3, #0]
1000ae50:	f003 0304 	and.w	r3, r3, #4
1000ae54:	2b04      	cmp	r3, #4
1000ae56:	d10e      	bne.n	1000ae76 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
1000ae58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
1000ae5c:	9300      	str	r3, [sp, #0]
1000ae5e:	68fb      	ldr	r3, [r7, #12]
1000ae60:	2200      	movs	r2, #0
1000ae62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
1000ae66:	6878      	ldr	r0, [r7, #4]
1000ae68:	f000 f816 	bl	1000ae98 <UART_WaitOnFlagUntilTimeout>
1000ae6c:	4603      	mov	r3, r0
1000ae6e:	2b00      	cmp	r3, #0
1000ae70:	d001      	beq.n	1000ae76 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
1000ae72:	2303      	movs	r3, #3
1000ae74:	e00c      	b.n	1000ae90 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
1000ae76:	687b      	ldr	r3, [r7, #4]
1000ae78:	2220      	movs	r2, #32
1000ae7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
1000ae7e:	687b      	ldr	r3, [r7, #4]
1000ae80:	2220      	movs	r2, #32
1000ae82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  __HAL_UNLOCK(huart);
1000ae86:	687b      	ldr	r3, [r7, #4]
1000ae88:	2200      	movs	r2, #0
1000ae8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
1000ae8e:	2300      	movs	r3, #0
}
1000ae90:	4618      	mov	r0, r3
1000ae92:	3710      	adds	r7, #16
1000ae94:	46bd      	mov	sp, r7
1000ae96:	bd80      	pop	{r7, pc}

1000ae98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
1000ae98:	b580      	push	{r7, lr}
1000ae9a:	b084      	sub	sp, #16
1000ae9c:	af00      	add	r7, sp, #0
1000ae9e:	60f8      	str	r0, [r7, #12]
1000aea0:	60b9      	str	r1, [r7, #8]
1000aea2:	603b      	str	r3, [r7, #0]
1000aea4:	4613      	mov	r3, r2
1000aea6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1000aea8:	e062      	b.n	1000af70 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
1000aeaa:	69bb      	ldr	r3, [r7, #24]
1000aeac:	f1b3 3fff 	cmp.w	r3, #4294967295
1000aeb0:	d05e      	beq.n	1000af70 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
1000aeb2:	f7f6 fdaf 	bl	10001a14 <HAL_GetTick>
1000aeb6:	4602      	mov	r2, r0
1000aeb8:	683b      	ldr	r3, [r7, #0]
1000aeba:	1ad3      	subs	r3, r2, r3
1000aebc:	69ba      	ldr	r2, [r7, #24]
1000aebe:	429a      	cmp	r2, r3
1000aec0:	d302      	bcc.n	1000aec8 <UART_WaitOnFlagUntilTimeout+0x30>
1000aec2:	69bb      	ldr	r3, [r7, #24]
1000aec4:	2b00      	cmp	r3, #0
1000aec6:	d11d      	bne.n	1000af04 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
1000aec8:	68fb      	ldr	r3, [r7, #12]
1000aeca:	681b      	ldr	r3, [r3, #0]
1000aecc:	681a      	ldr	r2, [r3, #0]
1000aece:	68fb      	ldr	r3, [r7, #12]
1000aed0:	681b      	ldr	r3, [r3, #0]
1000aed2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
1000aed6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1000aed8:	68fb      	ldr	r3, [r7, #12]
1000aeda:	681b      	ldr	r3, [r3, #0]
1000aedc:	689a      	ldr	r2, [r3, #8]
1000aede:	68fb      	ldr	r3, [r7, #12]
1000aee0:	681b      	ldr	r3, [r3, #0]
1000aee2:	f022 0201 	bic.w	r2, r2, #1
1000aee6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
1000aee8:	68fb      	ldr	r3, [r7, #12]
1000aeea:	2220      	movs	r2, #32
1000aeec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
1000aef0:	68fb      	ldr	r3, [r7, #12]
1000aef2:	2220      	movs	r2, #32
1000aef4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
1000aef8:	68fb      	ldr	r3, [r7, #12]
1000aefa:	2200      	movs	r2, #0
1000aefc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
1000af00:	2303      	movs	r3, #3
1000af02:	e045      	b.n	1000af90 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
1000af04:	68fb      	ldr	r3, [r7, #12]
1000af06:	681b      	ldr	r3, [r3, #0]
1000af08:	681b      	ldr	r3, [r3, #0]
1000af0a:	f003 0304 	and.w	r3, r3, #4
1000af0e:	2b00      	cmp	r3, #0
1000af10:	d02e      	beq.n	1000af70 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
1000af12:	68fb      	ldr	r3, [r7, #12]
1000af14:	681b      	ldr	r3, [r3, #0]
1000af16:	69db      	ldr	r3, [r3, #28]
1000af18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
1000af1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
1000af20:	d126      	bne.n	1000af70 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
1000af22:	68fb      	ldr	r3, [r7, #12]
1000af24:	681b      	ldr	r3, [r3, #0]
1000af26:	f44f 6200 	mov.w	r2, #2048	; 0x800
1000af2a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
1000af2c:	68fb      	ldr	r3, [r7, #12]
1000af2e:	681b      	ldr	r3, [r3, #0]
1000af30:	681a      	ldr	r2, [r3, #0]
1000af32:	68fb      	ldr	r3, [r7, #12]
1000af34:	681b      	ldr	r3, [r3, #0]
1000af36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
1000af3a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1000af3c:	68fb      	ldr	r3, [r7, #12]
1000af3e:	681b      	ldr	r3, [r3, #0]
1000af40:	689a      	ldr	r2, [r3, #8]
1000af42:	68fb      	ldr	r3, [r7, #12]
1000af44:	681b      	ldr	r3, [r3, #0]
1000af46:	f022 0201 	bic.w	r2, r2, #1
1000af4a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
1000af4c:	68fb      	ldr	r3, [r7, #12]
1000af4e:	2220      	movs	r2, #32
1000af50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
1000af54:	68fb      	ldr	r3, [r7, #12]
1000af56:	2220      	movs	r2, #32
1000af58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
1000af5c:	68fb      	ldr	r3, [r7, #12]
1000af5e:	2220      	movs	r2, #32
1000af60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
1000af64:	68fb      	ldr	r3, [r7, #12]
1000af66:	2200      	movs	r2, #0
1000af68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
          
          return HAL_TIMEOUT;
1000af6c:	2303      	movs	r3, #3
1000af6e:	e00f      	b.n	1000af90 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1000af70:	68fb      	ldr	r3, [r7, #12]
1000af72:	681b      	ldr	r3, [r3, #0]
1000af74:	69da      	ldr	r2, [r3, #28]
1000af76:	68bb      	ldr	r3, [r7, #8]
1000af78:	4013      	ands	r3, r2
1000af7a:	68ba      	ldr	r2, [r7, #8]
1000af7c:	429a      	cmp	r2, r3
1000af7e:	bf0c      	ite	eq
1000af80:	2301      	moveq	r3, #1
1000af82:	2300      	movne	r3, #0
1000af84:	b2db      	uxtb	r3, r3
1000af86:	461a      	mov	r2, r3
1000af88:	79fb      	ldrb	r3, [r7, #7]
1000af8a:	429a      	cmp	r2, r3
1000af8c:	d08d      	beq.n	1000aeaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
1000af8e:	2300      	movs	r3, #0
}
1000af90:	4618      	mov	r0, r3
1000af92:	3710      	adds	r7, #16
1000af94:	46bd      	mov	sp, r7
1000af96:	bd80      	pop	{r7, pc}

1000af98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
1000af98:	b480      	push	{r7}
1000af9a:	b085      	sub	sp, #20
1000af9c:	af00      	add	r7, sp, #0
1000af9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
1000afa0:	687b      	ldr	r3, [r7, #4]
1000afa2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
1000afa6:	2b01      	cmp	r3, #1
1000afa8:	d101      	bne.n	1000afae <HAL_UARTEx_DisableFifoMode+0x16>
1000afaa:	2302      	movs	r3, #2
1000afac:	e027      	b.n	1000affe <HAL_UARTEx_DisableFifoMode+0x66>
1000afae:	687b      	ldr	r3, [r7, #4]
1000afb0:	2201      	movs	r2, #1
1000afb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
1000afb6:	687b      	ldr	r3, [r7, #4]
1000afb8:	2224      	movs	r2, #36	; 0x24
1000afba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1000afbe:	687b      	ldr	r3, [r7, #4]
1000afc0:	681b      	ldr	r3, [r3, #0]
1000afc2:	681b      	ldr	r3, [r3, #0]
1000afc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1000afc6:	687b      	ldr	r3, [r7, #4]
1000afc8:	681b      	ldr	r3, [r3, #0]
1000afca:	681a      	ldr	r2, [r3, #0]
1000afcc:	687b      	ldr	r3, [r7, #4]
1000afce:	681b      	ldr	r3, [r3, #0]
1000afd0:	f022 0201 	bic.w	r2, r2, #1
1000afd4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
1000afd6:	68fb      	ldr	r3, [r7, #12]
1000afd8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
1000afdc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
1000afde:	687b      	ldr	r3, [r7, #4]
1000afe0:	2200      	movs	r2, #0
1000afe2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1000afe4:	687b      	ldr	r3, [r7, #4]
1000afe6:	681b      	ldr	r3, [r3, #0]
1000afe8:	68fa      	ldr	r2, [r7, #12]
1000afea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1000afec:	687b      	ldr	r3, [r7, #4]
1000afee:	2220      	movs	r2, #32
1000aff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1000aff4:	687b      	ldr	r3, [r7, #4]
1000aff6:	2200      	movs	r2, #0
1000aff8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
1000affc:	2300      	movs	r3, #0
}
1000affe:	4618      	mov	r0, r3
1000b000:	3714      	adds	r7, #20
1000b002:	46bd      	mov	sp, r7
1000b004:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b008:	4770      	bx	lr

1000b00a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1000b00a:	b580      	push	{r7, lr}
1000b00c:	b084      	sub	sp, #16
1000b00e:	af00      	add	r7, sp, #0
1000b010:	6078      	str	r0, [r7, #4]
1000b012:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1000b014:	687b      	ldr	r3, [r7, #4]
1000b016:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
1000b01a:	2b01      	cmp	r3, #1
1000b01c:	d101      	bne.n	1000b022 <HAL_UARTEx_SetTxFifoThreshold+0x18>
1000b01e:	2302      	movs	r3, #2
1000b020:	e02d      	b.n	1000b07e <HAL_UARTEx_SetTxFifoThreshold+0x74>
1000b022:	687b      	ldr	r3, [r7, #4]
1000b024:	2201      	movs	r2, #1
1000b026:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
1000b02a:	687b      	ldr	r3, [r7, #4]
1000b02c:	2224      	movs	r2, #36	; 0x24
1000b02e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1000b032:	687b      	ldr	r3, [r7, #4]
1000b034:	681b      	ldr	r3, [r3, #0]
1000b036:	681b      	ldr	r3, [r3, #0]
1000b038:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1000b03a:	687b      	ldr	r3, [r7, #4]
1000b03c:	681b      	ldr	r3, [r3, #0]
1000b03e:	681a      	ldr	r2, [r3, #0]
1000b040:	687b      	ldr	r3, [r7, #4]
1000b042:	681b      	ldr	r3, [r3, #0]
1000b044:	f022 0201 	bic.w	r2, r2, #1
1000b048:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
1000b04a:	687b      	ldr	r3, [r7, #4]
1000b04c:	681b      	ldr	r3, [r3, #0]
1000b04e:	689b      	ldr	r3, [r3, #8]
1000b050:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
1000b054:	687b      	ldr	r3, [r7, #4]
1000b056:	681b      	ldr	r3, [r3, #0]
1000b058:	683a      	ldr	r2, [r7, #0]
1000b05a:	430a      	orrs	r2, r1
1000b05c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1000b05e:	6878      	ldr	r0, [r7, #4]
1000b060:	f000 f850 	bl	1000b104 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1000b064:	687b      	ldr	r3, [r7, #4]
1000b066:	681b      	ldr	r3, [r3, #0]
1000b068:	68fa      	ldr	r2, [r7, #12]
1000b06a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1000b06c:	687b      	ldr	r3, [r7, #4]
1000b06e:	2220      	movs	r2, #32
1000b070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1000b074:	687b      	ldr	r3, [r7, #4]
1000b076:	2200      	movs	r2, #0
1000b078:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
1000b07c:	2300      	movs	r3, #0
}
1000b07e:	4618      	mov	r0, r3
1000b080:	3710      	adds	r7, #16
1000b082:	46bd      	mov	sp, r7
1000b084:	bd80      	pop	{r7, pc}

1000b086 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1000b086:	b580      	push	{r7, lr}
1000b088:	b084      	sub	sp, #16
1000b08a:	af00      	add	r7, sp, #0
1000b08c:	6078      	str	r0, [r7, #4]
1000b08e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1000b090:	687b      	ldr	r3, [r7, #4]
1000b092:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
1000b096:	2b01      	cmp	r3, #1
1000b098:	d101      	bne.n	1000b09e <HAL_UARTEx_SetRxFifoThreshold+0x18>
1000b09a:	2302      	movs	r3, #2
1000b09c:	e02d      	b.n	1000b0fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
1000b09e:	687b      	ldr	r3, [r7, #4]
1000b0a0:	2201      	movs	r2, #1
1000b0a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
1000b0a6:	687b      	ldr	r3, [r7, #4]
1000b0a8:	2224      	movs	r2, #36	; 0x24
1000b0aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1000b0ae:	687b      	ldr	r3, [r7, #4]
1000b0b0:	681b      	ldr	r3, [r3, #0]
1000b0b2:	681b      	ldr	r3, [r3, #0]
1000b0b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1000b0b6:	687b      	ldr	r3, [r7, #4]
1000b0b8:	681b      	ldr	r3, [r3, #0]
1000b0ba:	681a      	ldr	r2, [r3, #0]
1000b0bc:	687b      	ldr	r3, [r7, #4]
1000b0be:	681b      	ldr	r3, [r3, #0]
1000b0c0:	f022 0201 	bic.w	r2, r2, #1
1000b0c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
1000b0c6:	687b      	ldr	r3, [r7, #4]
1000b0c8:	681b      	ldr	r3, [r3, #0]
1000b0ca:	689b      	ldr	r3, [r3, #8]
1000b0cc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
1000b0d0:	687b      	ldr	r3, [r7, #4]
1000b0d2:	681b      	ldr	r3, [r3, #0]
1000b0d4:	683a      	ldr	r2, [r7, #0]
1000b0d6:	430a      	orrs	r2, r1
1000b0d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1000b0da:	6878      	ldr	r0, [r7, #4]
1000b0dc:	f000 f812 	bl	1000b104 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1000b0e0:	687b      	ldr	r3, [r7, #4]
1000b0e2:	681b      	ldr	r3, [r3, #0]
1000b0e4:	68fa      	ldr	r2, [r7, #12]
1000b0e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1000b0e8:	687b      	ldr	r3, [r7, #4]
1000b0ea:	2220      	movs	r2, #32
1000b0ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1000b0f0:	687b      	ldr	r3, [r7, #4]
1000b0f2:	2200      	movs	r2, #0
1000b0f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
1000b0f8:	2300      	movs	r3, #0
}
1000b0fa:	4618      	mov	r0, r3
1000b0fc:	3710      	adds	r7, #16
1000b0fe:	46bd      	mov	sp, r7
1000b100:	bd80      	pop	{r7, pc}
	...

1000b104 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
1000b104:	b480      	push	{r7}
1000b106:	b089      	sub	sp, #36	; 0x24
1000b108:	af00      	add	r7, sp, #0
1000b10a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
1000b10c:	4a2d      	ldr	r2, [pc, #180]	; (1000b1c4 <UARTEx_SetNbDataToProcess+0xc0>)
1000b10e:	f107 0314 	add.w	r3, r7, #20
1000b112:	e892 0003 	ldmia.w	r2, {r0, r1}
1000b116:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
1000b11a:	4a2b      	ldr	r2, [pc, #172]	; (1000b1c8 <UARTEx_SetNbDataToProcess+0xc4>)
1000b11c:	f107 030c 	add.w	r3, r7, #12
1000b120:	e892 0003 	ldmia.w	r2, {r0, r1}
1000b124:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
1000b128:	687b      	ldr	r3, [r7, #4]
1000b12a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
1000b12c:	2b00      	cmp	r3, #0
1000b12e:	d108      	bne.n	1000b142 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
1000b130:	687b      	ldr	r3, [r7, #4]
1000b132:	2201      	movs	r2, #1
1000b134:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
1000b138:	687b      	ldr	r3, [r7, #4]
1000b13a:	2201      	movs	r2, #1
1000b13c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
1000b140:	e039      	b.n	1000b1b6 <UARTEx_SetNbDataToProcess+0xb2>
    rx_fifo_depth = RX_FIFO_DEPTH;
1000b142:	2308      	movs	r3, #8
1000b144:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
1000b146:	2308      	movs	r3, #8
1000b148:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
1000b14a:	687b      	ldr	r3, [r7, #4]
1000b14c:	681b      	ldr	r3, [r3, #0]
1000b14e:	689b      	ldr	r3, [r3, #8]
1000b150:	0e5b      	lsrs	r3, r3, #25
1000b152:	b2db      	uxtb	r3, r3
1000b154:	f003 0307 	and.w	r3, r3, #7
1000b158:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
1000b15a:	687b      	ldr	r3, [r7, #4]
1000b15c:	681b      	ldr	r3, [r3, #0]
1000b15e:	689b      	ldr	r3, [r3, #8]
1000b160:	0f5b      	lsrs	r3, r3, #29
1000b162:	b2db      	uxtb	r3, r3
1000b164:	f003 0307 	and.w	r3, r3, #7
1000b168:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
1000b16a:	7fbb      	ldrb	r3, [r7, #30]
1000b16c:	7f3a      	ldrb	r2, [r7, #28]
1000b16e:	3220      	adds	r2, #32
1000b170:	443a      	add	r2, r7
1000b172:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
1000b176:	fb02 f303 	mul.w	r3, r2, r3
1000b17a:	7f3a      	ldrb	r2, [r7, #28]
1000b17c:	3220      	adds	r2, #32
1000b17e:	443a      	add	r2, r7
1000b180:	f812 2c14 	ldrb.w	r2, [r2, #-20]
1000b184:	fb93 f3f2 	sdiv	r3, r3, r2
1000b188:	b29a      	uxth	r2, r3
1000b18a:	687b      	ldr	r3, [r7, #4]
1000b18c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
1000b190:	7ffb      	ldrb	r3, [r7, #31]
1000b192:	7f7a      	ldrb	r2, [r7, #29]
1000b194:	3220      	adds	r2, #32
1000b196:	443a      	add	r2, r7
1000b198:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
1000b19c:	fb02 f303 	mul.w	r3, r2, r3
1000b1a0:	7f7a      	ldrb	r2, [r7, #29]
1000b1a2:	3220      	adds	r2, #32
1000b1a4:	443a      	add	r2, r7
1000b1a6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
1000b1aa:	fb93 f3f2 	sdiv	r3, r3, r2
1000b1ae:	b29a      	uxth	r2, r3
1000b1b0:	687b      	ldr	r3, [r7, #4]
1000b1b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
1000b1b6:	bf00      	nop
1000b1b8:	3724      	adds	r7, #36	; 0x24
1000b1ba:	46bd      	mov	sp, r7
1000b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b1c0:	4770      	bx	lr
1000b1c2:	bf00      	nop
1000b1c4:	10012f8c 	.word	0x10012f8c
1000b1c8:	10012f94 	.word	0x10012f94

1000b1cc <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
1000b1cc:	b480      	push	{r7}
1000b1ce:	b083      	sub	sp, #12
1000b1d0:	af00      	add	r7, sp, #0
1000b1d2:	6078      	str	r0, [r7, #4]
	list->prev = list;
1000b1d4:	687b      	ldr	r3, [r7, #4]
1000b1d6:	687a      	ldr	r2, [r7, #4]
1000b1d8:	605a      	str	r2, [r3, #4]
	list->next = list;
1000b1da:	687b      	ldr	r3, [r7, #4]
1000b1dc:	687a      	ldr	r2, [r7, #4]
1000b1de:	601a      	str	r2, [r3, #0]
}
1000b1e0:	bf00      	nop
1000b1e2:	370c      	adds	r7, #12
1000b1e4:	46bd      	mov	sp, r7
1000b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b1ea:	4770      	bx	lr

1000b1ec <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
1000b1ec:	b480      	push	{r7}
1000b1ee:	b083      	sub	sp, #12
1000b1f0:	af00      	add	r7, sp, #0
1000b1f2:	6078      	str	r0, [r7, #4]
1000b1f4:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
1000b1f6:	687b      	ldr	r3, [r7, #4]
1000b1f8:	685a      	ldr	r2, [r3, #4]
1000b1fa:	683b      	ldr	r3, [r7, #0]
1000b1fc:	605a      	str	r2, [r3, #4]
	new_node->next = node;
1000b1fe:	683b      	ldr	r3, [r7, #0]
1000b200:	687a      	ldr	r2, [r7, #4]
1000b202:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
1000b204:	683b      	ldr	r3, [r7, #0]
1000b206:	681b      	ldr	r3, [r3, #0]
1000b208:	683a      	ldr	r2, [r7, #0]
1000b20a:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
1000b20c:	683b      	ldr	r3, [r7, #0]
1000b20e:	685b      	ldr	r3, [r3, #4]
1000b210:	683a      	ldr	r2, [r7, #0]
1000b212:	601a      	str	r2, [r3, #0]
}
1000b214:	bf00      	nop
1000b216:	370c      	adds	r7, #12
1000b218:	46bd      	mov	sp, r7
1000b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b21e:	4770      	bx	lr

1000b220 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
1000b220:	b580      	push	{r7, lr}
1000b222:	b082      	sub	sp, #8
1000b224:	af00      	add	r7, sp, #0
1000b226:	6078      	str	r0, [r7, #4]
1000b228:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
1000b22a:	6839      	ldr	r1, [r7, #0]
1000b22c:	6878      	ldr	r0, [r7, #4]
1000b22e:	f7ff ffdd 	bl	1000b1ec <metal_list_add_before>
}
1000b232:	bf00      	nop
1000b234:	3708      	adds	r7, #8
1000b236:	46bd      	mov	sp, r7
1000b238:	bd80      	pop	{r7, pc}

1000b23a <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
1000b23a:	b580      	push	{r7, lr}
1000b23c:	b082      	sub	sp, #8
1000b23e:	af00      	add	r7, sp, #0
1000b240:	6078      	str	r0, [r7, #4]
1000b242:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
1000b244:	6839      	ldr	r1, [r7, #0]
1000b246:	6878      	ldr	r0, [r7, #4]
1000b248:	f001 fc26 	bl	1000ca98 <metal_machine_cache_flush>
}
1000b24c:	bf00      	nop
1000b24e:	3708      	adds	r7, #8
1000b250:	46bd      	mov	sp, r7
1000b252:	bd80      	pop	{r7, pc}

1000b254 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
1000b254:	b580      	push	{r7, lr}
1000b256:	b082      	sub	sp, #8
1000b258:	af00      	add	r7, sp, #0
1000b25a:	6078      	str	r0, [r7, #4]
1000b25c:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
1000b25e:	6839      	ldr	r1, [r7, #0]
1000b260:	6878      	ldr	r0, [r7, #4]
1000b262:	f001 fc24 	bl	1000caae <metal_machine_cache_invalidate>
}
1000b266:	bf00      	nop
1000b268:	3708      	adds	r7, #8
1000b26a:	46bd      	mov	sp, r7
1000b26c:	bd80      	pop	{r7, pc}

1000b26e <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
1000b26e:	b580      	push	{r7, lr}
1000b270:	b082      	sub	sp, #8
1000b272:	af00      	add	r7, sp, #0
1000b274:	6078      	str	r0, [r7, #4]
1000b276:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
1000b278:	6839      	ldr	r1, [r7, #0]
1000b27a:	6878      	ldr	r0, [r7, #4]
1000b27c:	f7ff ffdd 	bl	1000b23a <__metal_cache_flush>
}
1000b280:	bf00      	nop
1000b282:	3708      	adds	r7, #8
1000b284:	46bd      	mov	sp, r7
1000b286:	bd80      	pop	{r7, pc}

1000b288 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
1000b288:	b580      	push	{r7, lr}
1000b28a:	b082      	sub	sp, #8
1000b28c:	af00      	add	r7, sp, #0
1000b28e:	6078      	str	r0, [r7, #4]
1000b290:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
1000b292:	6839      	ldr	r1, [r7, #0]
1000b294:	6878      	ldr	r0, [r7, #4]
1000b296:	f7ff ffdd 	bl	1000b254 <__metal_cache_invalidate>
}
1000b29a:	bf00      	nop
1000b29c:	3708      	adds	r7, #8
1000b29e:	46bd      	mov	sp, r7
1000b2a0:	bd80      	pop	{r7, pc}
	...

1000b2a4 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
1000b2a4:	b580      	push	{r7, lr}
1000b2a6:	b082      	sub	sp, #8
1000b2a8:	af00      	add	r7, sp, #0
1000b2aa:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
1000b2ac:	687b      	ldr	r3, [r7, #4]
1000b2ae:	2b00      	cmp	r3, #0
1000b2b0:	d008      	beq.n	1000b2c4 <metal_bus_register+0x20>
1000b2b2:	687b      	ldr	r3, [r7, #4]
1000b2b4:	681b      	ldr	r3, [r3, #0]
1000b2b6:	2b00      	cmp	r3, #0
1000b2b8:	d004      	beq.n	1000b2c4 <metal_bus_register+0x20>
1000b2ba:	687b      	ldr	r3, [r7, #4]
1000b2bc:	681b      	ldr	r3, [r3, #0]
1000b2be:	781b      	ldrb	r3, [r3, #0]
1000b2c0:	2b00      	cmp	r3, #0
1000b2c2:	d102      	bne.n	1000b2ca <metal_bus_register+0x26>
		return -EINVAL;
1000b2c4:	f06f 0315 	mvn.w	r3, #21
1000b2c8:	e026      	b.n	1000b318 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
1000b2ca:	687b      	ldr	r3, [r7, #4]
1000b2cc:	681b      	ldr	r3, [r3, #0]
1000b2ce:	2100      	movs	r1, #0
1000b2d0:	4618      	mov	r0, r3
1000b2d2:	f000 f82b 	bl	1000b32c <metal_bus_find>
1000b2d6:	4603      	mov	r3, r0
1000b2d8:	2b00      	cmp	r3, #0
1000b2da:	d102      	bne.n	1000b2e2 <metal_bus_register+0x3e>
		return -EEXIST;
1000b2dc:	f06f 0310 	mvn.w	r3, #16
1000b2e0:	e01a      	b.n	1000b318 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
1000b2e2:	687b      	ldr	r3, [r7, #4]
1000b2e4:	331c      	adds	r3, #28
1000b2e6:	4618      	mov	r0, r3
1000b2e8:	f7ff ff70 	bl	1000b1cc <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
1000b2ec:	687b      	ldr	r3, [r7, #4]
1000b2ee:	3324      	adds	r3, #36	; 0x24
1000b2f0:	4619      	mov	r1, r3
1000b2f2:	480b      	ldr	r0, [pc, #44]	; (1000b320 <metal_bus_register+0x7c>)
1000b2f4:	f7ff ff94 	bl	1000b220 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
1000b2f8:	4b0a      	ldr	r3, [pc, #40]	; (1000b324 <metal_bus_register+0x80>)
1000b2fa:	781b      	ldrb	r3, [r3, #0]
1000b2fc:	2b06      	cmp	r3, #6
1000b2fe:	d90a      	bls.n	1000b316 <metal_bus_register+0x72>
1000b300:	4b08      	ldr	r3, [pc, #32]	; (1000b324 <metal_bus_register+0x80>)
1000b302:	685b      	ldr	r3, [r3, #4]
1000b304:	2b00      	cmp	r3, #0
1000b306:	d006      	beq.n	1000b316 <metal_bus_register+0x72>
1000b308:	4b06      	ldr	r3, [pc, #24]	; (1000b324 <metal_bus_register+0x80>)
1000b30a:	685b      	ldr	r3, [r3, #4]
1000b30c:	687a      	ldr	r2, [r7, #4]
1000b30e:	6812      	ldr	r2, [r2, #0]
1000b310:	4905      	ldr	r1, [pc, #20]	; (1000b328 <metal_bus_register+0x84>)
1000b312:	2007      	movs	r0, #7
1000b314:	4798      	blx	r3
	return 0;
1000b316:	2300      	movs	r3, #0
}
1000b318:	4618      	mov	r0, r3
1000b31a:	3708      	adds	r7, #8
1000b31c:	46bd      	mov	sp, r7
1000b31e:	bd80      	pop	{r7, pc}
1000b320:	10029bbc 	.word	0x10029bbc
1000b324:	10029bb4 	.word	0x10029bb4
1000b328:	10012f9c 	.word	0x10012f9c

1000b32c <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
1000b32c:	b580      	push	{r7, lr}
1000b32e:	b084      	sub	sp, #16
1000b330:	af00      	add	r7, sp, #0
1000b332:	6078      	str	r0, [r7, #4]
1000b334:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
1000b336:	4b12      	ldr	r3, [pc, #72]	; (1000b380 <metal_bus_find+0x54>)
1000b338:	689b      	ldr	r3, [r3, #8]
1000b33a:	60fb      	str	r3, [r7, #12]
1000b33c:	e016      	b.n	1000b36c <metal_bus_find+0x40>
		bus = metal_container_of(node, struct metal_bus, node);
1000b33e:	68fb      	ldr	r3, [r7, #12]
1000b340:	3b24      	subs	r3, #36	; 0x24
1000b342:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) == 0 && result) {
1000b344:	68bb      	ldr	r3, [r7, #8]
1000b346:	681b      	ldr	r3, [r3, #0]
1000b348:	6879      	ldr	r1, [r7, #4]
1000b34a:	4618      	mov	r0, r3
1000b34c:	f7f4 fe78 	bl	10000040 <strcmp>
1000b350:	4603      	mov	r3, r0
1000b352:	2b00      	cmp	r3, #0
1000b354:	d107      	bne.n	1000b366 <metal_bus_find+0x3a>
1000b356:	683b      	ldr	r3, [r7, #0]
1000b358:	2b00      	cmp	r3, #0
1000b35a:	d004      	beq.n	1000b366 <metal_bus_find+0x3a>
			*result = bus;
1000b35c:	683b      	ldr	r3, [r7, #0]
1000b35e:	68ba      	ldr	r2, [r7, #8]
1000b360:	601a      	str	r2, [r3, #0]
			return 0;
1000b362:	2300      	movs	r3, #0
1000b364:	e008      	b.n	1000b378 <metal_bus_find+0x4c>
	metal_list_for_each(&_metal.common.bus_list, node) {
1000b366:	68fb      	ldr	r3, [r7, #12]
1000b368:	681b      	ldr	r3, [r3, #0]
1000b36a:	60fb      	str	r3, [r7, #12]
1000b36c:	68fb      	ldr	r3, [r7, #12]
1000b36e:	4a05      	ldr	r2, [pc, #20]	; (1000b384 <metal_bus_find+0x58>)
1000b370:	4293      	cmp	r3, r2
1000b372:	d1e4      	bne.n	1000b33e <metal_bus_find+0x12>
		}
	}
	return -ENOENT;
1000b374:	f06f 0301 	mvn.w	r3, #1
}
1000b378:	4618      	mov	r0, r3
1000b37a:	3710      	adds	r7, #16
1000b37c:	46bd      	mov	sp, r7
1000b37e:	bd80      	pop	{r7, pc}
1000b380:	10029bb4 	.word	0x10029bb4
1000b384:	10029bbc 	.word	0x10029bbc

1000b388 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
1000b388:	b580      	push	{r7, lr}
1000b38a:	b086      	sub	sp, #24
1000b38c:	af00      	add	r7, sp, #0
1000b38e:	60f8      	str	r0, [r7, #12]
1000b390:	60b9      	str	r1, [r7, #8]
1000b392:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
1000b394:	68fb      	ldr	r3, [r7, #12]
1000b396:	2b00      	cmp	r3, #0
1000b398:	d00d      	beq.n	1000b3b6 <metal_device_open+0x2e>
1000b39a:	68fb      	ldr	r3, [r7, #12]
1000b39c:	781b      	ldrb	r3, [r3, #0]
1000b39e:	2b00      	cmp	r3, #0
1000b3a0:	d009      	beq.n	1000b3b6 <metal_device_open+0x2e>
1000b3a2:	68bb      	ldr	r3, [r7, #8]
1000b3a4:	2b00      	cmp	r3, #0
1000b3a6:	d006      	beq.n	1000b3b6 <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
1000b3a8:	68bb      	ldr	r3, [r7, #8]
1000b3aa:	781b      	ldrb	r3, [r3, #0]
1000b3ac:	2b00      	cmp	r3, #0
1000b3ae:	d002      	beq.n	1000b3b6 <metal_device_open+0x2e>
1000b3b0:	687b      	ldr	r3, [r7, #4]
1000b3b2:	2b00      	cmp	r3, #0
1000b3b4:	d102      	bne.n	1000b3bc <metal_device_open+0x34>
	    !device)
		return -EINVAL;
1000b3b6:	f06f 0315 	mvn.w	r3, #21
1000b3ba:	e01f      	b.n	1000b3fc <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
1000b3bc:	f107 0310 	add.w	r3, r7, #16
1000b3c0:	4619      	mov	r1, r3
1000b3c2:	68f8      	ldr	r0, [r7, #12]
1000b3c4:	f7ff ffb2 	bl	1000b32c <metal_bus_find>
1000b3c8:	6178      	str	r0, [r7, #20]
	if (error)
1000b3ca:	697b      	ldr	r3, [r7, #20]
1000b3cc:	2b00      	cmp	r3, #0
1000b3ce:	d001      	beq.n	1000b3d4 <metal_device_open+0x4c>
		return error;
1000b3d0:	697b      	ldr	r3, [r7, #20]
1000b3d2:	e013      	b.n	1000b3fc <metal_device_open+0x74>

	if (!bus->ops.dev_open)
1000b3d4:	693b      	ldr	r3, [r7, #16]
1000b3d6:	689b      	ldr	r3, [r3, #8]
1000b3d8:	2b00      	cmp	r3, #0
1000b3da:	d102      	bne.n	1000b3e2 <metal_device_open+0x5a>
		return -ENODEV;
1000b3dc:	f06f 0312 	mvn.w	r3, #18
1000b3e0:	e00c      	b.n	1000b3fc <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
1000b3e2:	693b      	ldr	r3, [r7, #16]
1000b3e4:	689b      	ldr	r3, [r3, #8]
1000b3e6:	6938      	ldr	r0, [r7, #16]
1000b3e8:	687a      	ldr	r2, [r7, #4]
1000b3ea:	68b9      	ldr	r1, [r7, #8]
1000b3ec:	4798      	blx	r3
1000b3ee:	6178      	str	r0, [r7, #20]
	if (error)
1000b3f0:	697b      	ldr	r3, [r7, #20]
1000b3f2:	2b00      	cmp	r3, #0
1000b3f4:	d001      	beq.n	1000b3fa <metal_device_open+0x72>
		return error;
1000b3f6:	697b      	ldr	r3, [r7, #20]
1000b3f8:	e000      	b.n	1000b3fc <metal_device_open+0x74>

	return 0;
1000b3fa:	2300      	movs	r3, #0
}
1000b3fc:	4618      	mov	r0, r3
1000b3fe:	3718      	adds	r7, #24
1000b400:	46bd      	mov	sp, r7
1000b402:	bd80      	pop	{r7, pc}

1000b404 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
1000b404:	b580      	push	{r7, lr}
1000b406:	b082      	sub	sp, #8
1000b408:	af00      	add	r7, sp, #0
1000b40a:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
1000b40c:	687b      	ldr	r3, [r7, #4]
1000b40e:	681b      	ldr	r3, [r3, #0]
1000b410:	2b00      	cmp	r3, #0
1000b412:	d008      	beq.n	1000b426 <metal_register_generic_device+0x22>
1000b414:	687b      	ldr	r3, [r7, #4]
1000b416:	681b      	ldr	r3, [r3, #0]
1000b418:	781b      	ldrb	r3, [r3, #0]
1000b41a:	2b00      	cmp	r3, #0
1000b41c:	d003      	beq.n	1000b426 <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
1000b41e:	687b      	ldr	r3, [r7, #4]
1000b420:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
1000b422:	2b02      	cmp	r3, #2
1000b424:	d902      	bls.n	1000b42c <metal_register_generic_device+0x28>
		return -EINVAL;
1000b426:	f06f 0315 	mvn.w	r3, #21
1000b42a:	e009      	b.n	1000b440 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
1000b42c:	687b      	ldr	r3, [r7, #4]
1000b42e:	4a06      	ldr	r2, [pc, #24]	; (1000b448 <metal_register_generic_device+0x44>)
1000b430:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
1000b432:	687b      	ldr	r3, [r7, #4]
1000b434:	337c      	adds	r3, #124	; 0x7c
1000b436:	4619      	mov	r1, r3
1000b438:	4804      	ldr	r0, [pc, #16]	; (1000b44c <metal_register_generic_device+0x48>)
1000b43a:	f7ff fef1 	bl	1000b220 <metal_list_add_tail>
			    &device->node);
	return 0;
1000b43e:	2300      	movs	r3, #0
}
1000b440:	4618      	mov	r0, r3
1000b442:	3708      	adds	r7, #8
1000b444:	46bd      	mov	sp, r7
1000b446:	bd80      	pop	{r7, pc}
1000b448:	10020014 	.word	0x10020014
1000b44c:	10029bcc 	.word	0x10029bcc

1000b450 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
1000b450:	b580      	push	{r7, lr}
1000b452:	b086      	sub	sp, #24
1000b454:	af00      	add	r7, sp, #0
1000b456:	60f8      	str	r0, [r7, #12]
1000b458:	60b9      	str	r1, [r7, #8]
1000b45a:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
1000b45c:	4b12      	ldr	r3, [pc, #72]	; (1000b4a8 <metal_generic_dev_open+0x58>)
1000b45e:	699b      	ldr	r3, [r3, #24]
1000b460:	617b      	str	r3, [r7, #20]
1000b462:	e016      	b.n	1000b492 <metal_generic_dev_open+0x42>
		dev = metal_container_of(node, struct metal_device, node);
1000b464:	697b      	ldr	r3, [r7, #20]
1000b466:	3b7c      	subs	r3, #124	; 0x7c
1000b468:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) == 0) {
1000b46a:	693b      	ldr	r3, [r7, #16]
1000b46c:	681b      	ldr	r3, [r3, #0]
1000b46e:	68b9      	ldr	r1, [r7, #8]
1000b470:	4618      	mov	r0, r3
1000b472:	f7f4 fde5 	bl	10000040 <strcmp>
1000b476:	4603      	mov	r3, r0
1000b478:	2b00      	cmp	r3, #0
1000b47a:	d107      	bne.n	1000b48c <metal_generic_dev_open+0x3c>
			*device = dev;
1000b47c:	687b      	ldr	r3, [r7, #4]
1000b47e:	693a      	ldr	r2, [r7, #16]
1000b480:	601a      	str	r2, [r3, #0]
			return metal_generic_dev_sys_open(dev);
1000b482:	6938      	ldr	r0, [r7, #16]
1000b484:	f000 f890 	bl	1000b5a8 <metal_generic_dev_sys_open>
1000b488:	4603      	mov	r3, r0
1000b48a:	e008      	b.n	1000b49e <metal_generic_dev_open+0x4e>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
1000b48c:	697b      	ldr	r3, [r7, #20]
1000b48e:	681b      	ldr	r3, [r3, #0]
1000b490:	617b      	str	r3, [r7, #20]
1000b492:	697b      	ldr	r3, [r7, #20]
1000b494:	4a05      	ldr	r2, [pc, #20]	; (1000b4ac <metal_generic_dev_open+0x5c>)
1000b496:	4293      	cmp	r3, r2
1000b498:	d1e4      	bne.n	1000b464 <metal_generic_dev_open+0x14>
		}
	}

	return -ENODEV;
1000b49a:	f06f 0312 	mvn.w	r3, #18
}
1000b49e:	4618      	mov	r0, r3
1000b4a0:	3718      	adds	r7, #24
1000b4a2:	46bd      	mov	sp, r7
1000b4a4:	bd80      	pop	{r7, pc}
1000b4a6:	bf00      	nop
1000b4a8:	10029bb4 	.word	0x10029bb4
1000b4ac:	10029bcc 	.word	0x10029bcc

1000b4b0 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
1000b4b0:	b580      	push	{r7, lr}
1000b4b2:	b086      	sub	sp, #24
1000b4b4:	af00      	add	r7, sp, #0
1000b4b6:	60f8      	str	r0, [r7, #12]
1000b4b8:	60b9      	str	r1, [r7, #8]
1000b4ba:	607a      	str	r2, [r7, #4]
1000b4bc:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;

	if (sg_out != sg_in)
1000b4be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000b4c0:	683b      	ldr	r3, [r7, #0]
1000b4c2:	429a      	cmp	r2, r3
1000b4c4:	d009      	beq.n	1000b4da <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
1000b4c6:	6a3a      	ldr	r2, [r7, #32]
1000b4c8:	4613      	mov	r3, r2
1000b4ca:	005b      	lsls	r3, r3, #1
1000b4cc:	4413      	add	r3, r2
1000b4ce:	009b      	lsls	r3, r3, #2
1000b4d0:	461a      	mov	r2, r3
1000b4d2:	6839      	ldr	r1, [r7, #0]
1000b4d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000b4d6:	f005 fbc8 	bl	10010c6a <memcpy>
	for (i = 0; i < nents_in; i++) {
1000b4da:	2300      	movs	r3, #0
1000b4dc:	617b      	str	r3, [r7, #20]
1000b4de:	e02f      	b.n	1000b540 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
1000b4e0:	687b      	ldr	r3, [r7, #4]
1000b4e2:	2b02      	cmp	r3, #2
1000b4e4:	d114      	bne.n	1000b510 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
1000b4e6:	697a      	ldr	r2, [r7, #20]
1000b4e8:	4613      	mov	r3, r2
1000b4ea:	005b      	lsls	r3, r3, #1
1000b4ec:	4413      	add	r3, r2
1000b4ee:	009b      	lsls	r3, r3, #2
1000b4f0:	461a      	mov	r2, r3
1000b4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b4f4:	4413      	add	r3, r2
1000b4f6:	6818      	ldr	r0, [r3, #0]
1000b4f8:	697a      	ldr	r2, [r7, #20]
1000b4fa:	4613      	mov	r3, r2
1000b4fc:	005b      	lsls	r3, r3, #1
1000b4fe:	4413      	add	r3, r2
1000b500:	009b      	lsls	r3, r3, #2
1000b502:	461a      	mov	r2, r3
1000b504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b506:	4413      	add	r3, r2
1000b508:	689b      	ldr	r3, [r3, #8]
1000b50a:	4619      	mov	r1, r3
1000b50c:	f7ff feaf 	bl	1000b26e <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
1000b510:	697a      	ldr	r2, [r7, #20]
1000b512:	4613      	mov	r3, r2
1000b514:	005b      	lsls	r3, r3, #1
1000b516:	4413      	add	r3, r2
1000b518:	009b      	lsls	r3, r3, #2
1000b51a:	461a      	mov	r2, r3
1000b51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b51e:	4413      	add	r3, r2
1000b520:	6818      	ldr	r0, [r3, #0]
1000b522:	697a      	ldr	r2, [r7, #20]
1000b524:	4613      	mov	r3, r2
1000b526:	005b      	lsls	r3, r3, #1
1000b528:	4413      	add	r3, r2
1000b52a:	009b      	lsls	r3, r3, #2
1000b52c:	461a      	mov	r2, r3
1000b52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b530:	4413      	add	r3, r2
1000b532:	689b      	ldr	r3, [r3, #8]
1000b534:	4619      	mov	r1, r3
1000b536:	f7ff fea7 	bl	1000b288 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
1000b53a:	697b      	ldr	r3, [r7, #20]
1000b53c:	3301      	adds	r3, #1
1000b53e:	617b      	str	r3, [r7, #20]
1000b540:	697a      	ldr	r2, [r7, #20]
1000b542:	6a3b      	ldr	r3, [r7, #32]
1000b544:	429a      	cmp	r2, r3
1000b546:	dbcb      	blt.n	1000b4e0 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
1000b548:	6a3b      	ldr	r3, [r7, #32]
}
1000b54a:	4618      	mov	r0, r3
1000b54c:	3718      	adds	r7, #24
1000b54e:	46bd      	mov	sp, r7
1000b550:	bd80      	pop	{r7, pc}

1000b552 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
1000b552:	b580      	push	{r7, lr}
1000b554:	b086      	sub	sp, #24
1000b556:	af00      	add	r7, sp, #0
1000b558:	60f8      	str	r0, [r7, #12]
1000b55a:	60b9      	str	r1, [r7, #8]
1000b55c:	607a      	str	r2, [r7, #4]
1000b55e:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;
	(void)dir;

	for (i = 0; i < nents; i++) {
1000b560:	2300      	movs	r3, #0
1000b562:	617b      	str	r3, [r7, #20]
1000b564:	e017      	b.n	1000b596 <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
1000b566:	697a      	ldr	r2, [r7, #20]
1000b568:	4613      	mov	r3, r2
1000b56a:	005b      	lsls	r3, r3, #1
1000b56c:	4413      	add	r3, r2
1000b56e:	009b      	lsls	r3, r3, #2
1000b570:	461a      	mov	r2, r3
1000b572:	683b      	ldr	r3, [r7, #0]
1000b574:	4413      	add	r3, r2
1000b576:	6818      	ldr	r0, [r3, #0]
1000b578:	697a      	ldr	r2, [r7, #20]
1000b57a:	4613      	mov	r3, r2
1000b57c:	005b      	lsls	r3, r3, #1
1000b57e:	4413      	add	r3, r2
1000b580:	009b      	lsls	r3, r3, #2
1000b582:	461a      	mov	r2, r3
1000b584:	683b      	ldr	r3, [r7, #0]
1000b586:	4413      	add	r3, r2
1000b588:	689b      	ldr	r3, [r3, #8]
1000b58a:	4619      	mov	r1, r3
1000b58c:	f7ff fe7c 	bl	1000b288 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
1000b590:	697b      	ldr	r3, [r7, #20]
1000b592:	3301      	adds	r3, #1
1000b594:	617b      	str	r3, [r7, #20]
1000b596:	697a      	ldr	r2, [r7, #20]
1000b598:	6a3b      	ldr	r3, [r7, #32]
1000b59a:	429a      	cmp	r2, r3
1000b59c:	dbe3      	blt.n	1000b566 <metal_generic_dev_dma_unmap+0x14>
	}
}
1000b59e:	bf00      	nop
1000b5a0:	bf00      	nop
1000b5a2:	3718      	adds	r7, #24
1000b5a4:	46bd      	mov	sp, r7
1000b5a6:	bd80      	pop	{r7, pc}

1000b5a8 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
1000b5a8:	b580      	push	{r7, lr}
1000b5aa:	b084      	sub	sp, #16
1000b5ac:	af00      	add	r7, sp, #0
1000b5ae:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned int i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
1000b5b0:	2300      	movs	r3, #0
1000b5b2:	60fb      	str	r3, [r7, #12]
1000b5b4:	e013      	b.n	1000b5de <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
1000b5b6:	68fa      	ldr	r2, [r7, #12]
1000b5b8:	4613      	mov	r3, r2
1000b5ba:	00db      	lsls	r3, r3, #3
1000b5bc:	1a9b      	subs	r3, r3, r2
1000b5be:	00db      	lsls	r3, r3, #3
1000b5c0:	3308      	adds	r3, #8
1000b5c2:	687a      	ldr	r2, [r7, #4]
1000b5c4:	4413      	add	r3, r2
1000b5c6:	3304      	adds	r3, #4
1000b5c8:	60bb      	str	r3, [r7, #8]
		if (!io->size)
1000b5ca:	68bb      	ldr	r3, [r7, #8]
1000b5cc:	689b      	ldr	r3, [r3, #8]
1000b5ce:	2b00      	cmp	r3, #0
1000b5d0:	d00b      	beq.n	1000b5ea <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
1000b5d2:	68b8      	ldr	r0, [r7, #8]
1000b5d4:	f000 f81e 	bl	1000b614 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
1000b5d8:	68fb      	ldr	r3, [r7, #12]
1000b5da:	3301      	adds	r3, #1
1000b5dc:	60fb      	str	r3, [r7, #12]
1000b5de:	687b      	ldr	r3, [r7, #4]
1000b5e0:	689b      	ldr	r3, [r3, #8]
1000b5e2:	68fa      	ldr	r2, [r7, #12]
1000b5e4:	429a      	cmp	r2, r3
1000b5e6:	d3e6      	bcc.n	1000b5b6 <metal_generic_dev_sys_open+0xe>
1000b5e8:	e000      	b.n	1000b5ec <metal_generic_dev_sys_open+0x44>
			break;
1000b5ea:	bf00      	nop
	}

	return 0;
1000b5ec:	2300      	movs	r3, #0
}
1000b5ee:	4618      	mov	r0, r3
1000b5f0:	3710      	adds	r7, #16
1000b5f2:	46bd      	mov	sp, r7
1000b5f4:	bd80      	pop	{r7, pc}
	...

1000b5f8 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
1000b5f8:	b580      	push	{r7, lr}
1000b5fa:	b082      	sub	sp, #8
1000b5fc:	af00      	add	r7, sp, #0
1000b5fe:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
1000b600:	4803      	ldr	r0, [pc, #12]	; (1000b610 <metal_sys_init+0x18>)
1000b602:	f7ff fe4f 	bl	1000b2a4 <metal_bus_register>
	return 0;
1000b606:	2300      	movs	r3, #0
}
1000b608:	4618      	mov	r0, r3
1000b60a:	3708      	adds	r7, #8
1000b60c:	46bd      	mov	sp, r7
1000b60e:	bd80      	pop	{r7, pc}
1000b610:	10020014 	.word	0x10020014

1000b614 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
1000b614:	b580      	push	{r7, lr}
1000b616:	b086      	sub	sp, #24
1000b618:	af00      	add	r7, sp, #0
1000b61a:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = io->virt;
1000b61c:	687b      	ldr	r3, [r7, #4]
1000b61e:	681b      	ldr	r3, [r3, #0]
1000b620:	60fb      	str	r3, [r7, #12]
	psize = (size_t)io->size;
1000b622:	687b      	ldr	r3, [r7, #4]
1000b624:	689b      	ldr	r3, [r3, #8]
1000b626:	613b      	str	r3, [r7, #16]
	if (psize) {
1000b628:	693b      	ldr	r3, [r7, #16]
1000b62a:	2b00      	cmp	r3, #0
1000b62c:	d02c      	beq.n	1000b688 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
1000b62e:	687b      	ldr	r3, [r7, #4]
1000b630:	68db      	ldr	r3, [r3, #12]
1000b632:	693a      	ldr	r2, [r7, #16]
1000b634:	fa22 f303 	lsr.w	r3, r2, r3
1000b638:	2b00      	cmp	r3, #0
1000b63a:	d005      	beq.n	1000b648 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
1000b63c:	687b      	ldr	r3, [r7, #4]
1000b63e:	68db      	ldr	r3, [r3, #12]
1000b640:	2201      	movs	r2, #1
1000b642:	fa02 f303 	lsl.w	r3, r2, r3
1000b646:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
1000b648:	2300      	movs	r3, #0
1000b64a:	617b      	str	r3, [r7, #20]
1000b64c:	e013      	b.n	1000b676 <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
1000b64e:	687b      	ldr	r3, [r7, #4]
1000b650:	685a      	ldr	r2, [r3, #4]
1000b652:	697b      	ldr	r3, [r7, #20]
1000b654:	009b      	lsls	r3, r3, #2
1000b656:	4413      	add	r3, r2
1000b658:	6819      	ldr	r1, [r3, #0]
1000b65a:	687b      	ldr	r3, [r7, #4]
1000b65c:	695b      	ldr	r3, [r3, #20]
1000b65e:	693a      	ldr	r2, [r7, #16]
1000b660:	68f8      	ldr	r0, [r7, #12]
1000b662:	f001 fa2f 	bl	1000cac4 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
1000b666:	693b      	ldr	r3, [r7, #16]
1000b668:	009b      	lsls	r3, r3, #2
1000b66a:	68fa      	ldr	r2, [r7, #12]
1000b66c:	4413      	add	r3, r2
1000b66e:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
1000b670:	697b      	ldr	r3, [r7, #20]
1000b672:	3301      	adds	r3, #1
1000b674:	617b      	str	r3, [r7, #20]
1000b676:	687b      	ldr	r3, [r7, #4]
1000b678:	689a      	ldr	r2, [r3, #8]
1000b67a:	687b      	ldr	r3, [r7, #4]
1000b67c:	68db      	ldr	r3, [r3, #12]
1000b67e:	fa22 f303 	lsr.w	r3, r2, r3
1000b682:	697a      	ldr	r2, [r7, #20]
1000b684:	429a      	cmp	r2, r3
1000b686:	d9e2      	bls.n	1000b64e <metal_sys_io_mem_map+0x3a>
		}
	}
}
1000b688:	bf00      	nop
1000b68a:	3718      	adds	r7, #24
1000b68c:	46bd      	mov	sp, r7
1000b68e:	bd80      	pop	{r7, pc}

1000b690 <metal_list_init>:
{
1000b690:	b480      	push	{r7}
1000b692:	b083      	sub	sp, #12
1000b694:	af00      	add	r7, sp, #0
1000b696:	6078      	str	r0, [r7, #4]
	list->prev = list;
1000b698:	687b      	ldr	r3, [r7, #4]
1000b69a:	687a      	ldr	r2, [r7, #4]
1000b69c:	605a      	str	r2, [r3, #4]
	list->next = list;
1000b69e:	687b      	ldr	r3, [r7, #4]
1000b6a0:	687a      	ldr	r2, [r7, #4]
1000b6a2:	601a      	str	r2, [r3, #0]
}
1000b6a4:	bf00      	nop
1000b6a6:	370c      	adds	r7, #12
1000b6a8:	46bd      	mov	sp, r7
1000b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b6ae:	4770      	bx	lr

1000b6b0 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
1000b6b0:	b580      	push	{r7, lr}
1000b6b2:	b084      	sub	sp, #16
1000b6b4:	af00      	add	r7, sp, #0
1000b6b6:	6078      	str	r0, [r7, #4]
	int error = 0;
1000b6b8:	2300      	movs	r3, #0
1000b6ba:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
1000b6bc:	2220      	movs	r2, #32
1000b6be:	2100      	movs	r1, #0
1000b6c0:	4810      	ldr	r0, [pc, #64]	; (1000b704 <metal_init+0x54>)
1000b6c2:	f005 fa1e 	bl	10010b02 <memset>

	_metal.common.log_handler   = params->log_handler;
1000b6c6:	687b      	ldr	r3, [r7, #4]
1000b6c8:	681b      	ldr	r3, [r3, #0]
1000b6ca:	4a0e      	ldr	r2, [pc, #56]	; (1000b704 <metal_init+0x54>)
1000b6cc:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
1000b6ce:	687b      	ldr	r3, [r7, #4]
1000b6d0:	791a      	ldrb	r2, [r3, #4]
1000b6d2:	4b0c      	ldr	r3, [pc, #48]	; (1000b704 <metal_init+0x54>)
1000b6d4:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
1000b6d6:	480c      	ldr	r0, [pc, #48]	; (1000b708 <metal_init+0x58>)
1000b6d8:	f7ff ffda 	bl	1000b690 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
1000b6dc:	480b      	ldr	r0, [pc, #44]	; (1000b70c <metal_init+0x5c>)
1000b6de:	f7ff ffd7 	bl	1000b690 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
1000b6e2:	480b      	ldr	r0, [pc, #44]	; (1000b710 <metal_init+0x60>)
1000b6e4:	f7ff ffd4 	bl	1000b690 <metal_list_init>

	error = metal_sys_init(params);
1000b6e8:	6878      	ldr	r0, [r7, #4]
1000b6ea:	f7ff ff85 	bl	1000b5f8 <metal_sys_init>
1000b6ee:	60f8      	str	r0, [r7, #12]
	if (error)
1000b6f0:	68fb      	ldr	r3, [r7, #12]
1000b6f2:	2b00      	cmp	r3, #0
1000b6f4:	d001      	beq.n	1000b6fa <metal_init+0x4a>
		return error;
1000b6f6:	68fb      	ldr	r3, [r7, #12]
1000b6f8:	e000      	b.n	1000b6fc <metal_init+0x4c>

	return error;
1000b6fa:	68fb      	ldr	r3, [r7, #12]
}
1000b6fc:	4618      	mov	r0, r3
1000b6fe:	3710      	adds	r7, #16
1000b700:	46bd      	mov	sp, r7
1000b702:	bd80      	pop	{r7, pc}
1000b704:	10029bb4 	.word	0x10029bb4
1000b708:	10029bbc 	.word	0x10029bbc
1000b70c:	10029bc4 	.word	0x10029bc4
1000b710:	10029bcc 	.word	0x10029bcc

1000b714 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
1000b714:	b480      	push	{r7}
1000b716:	b083      	sub	sp, #12
1000b718:	af00      	add	r7, sp, #0
1000b71a:	6078      	str	r0, [r7, #4]
1000b71c:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
1000b71e:	687b      	ldr	r3, [r7, #4]
1000b720:	681b      	ldr	r3, [r3, #0]
		? (void *)((uintptr_t)io->virt + offset)
		: NULL);
1000b722:	f1b3 3fff 	cmp.w	r3, #4294967295
1000b726:	d00a      	beq.n	1000b73e <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
1000b728:	687b      	ldr	r3, [r7, #4]
1000b72a:	689b      	ldr	r3, [r3, #8]
1000b72c:	683a      	ldr	r2, [r7, #0]
1000b72e:	429a      	cmp	r2, r3
1000b730:	d205      	bcs.n	1000b73e <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
1000b732:	687b      	ldr	r3, [r7, #4]
1000b734:	681b      	ldr	r3, [r3, #0]
1000b736:	461a      	mov	r2, r3
1000b738:	683b      	ldr	r3, [r7, #0]
1000b73a:	4413      	add	r3, r2
		: NULL);
1000b73c:	e000      	b.n	1000b740 <metal_io_virt+0x2c>
1000b73e:	2300      	movs	r3, #0
}
1000b740:	4618      	mov	r0, r3
1000b742:	370c      	adds	r7, #12
1000b744:	46bd      	mov	sp, r7
1000b746:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b74a:	4770      	bx	lr

1000b74c <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
1000b74c:	b5b0      	push	{r4, r5, r7, lr}
1000b74e:	b08c      	sub	sp, #48	; 0x30
1000b750:	af00      	add	r7, sp, #0
1000b752:	60f8      	str	r0, [r7, #12]
1000b754:	60b9      	str	r1, [r7, #8]
1000b756:	607a      	str	r2, [r7, #4]
1000b758:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {
1000b75a:	f107 0310 	add.w	r3, r7, #16
1000b75e:	2220      	movs	r2, #32
1000b760:	2100      	movs	r1, #0
1000b762:	4618      	mov	r0, r3
1000b764:	f005 f9cd 	bl	10010b02 <memset>
		NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
	};

	io->virt = virt;
1000b768:	68fb      	ldr	r3, [r7, #12]
1000b76a:	68ba      	ldr	r2, [r7, #8]
1000b76c:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
1000b76e:	68fb      	ldr	r3, [r7, #12]
1000b770:	687a      	ldr	r2, [r7, #4]
1000b772:	605a      	str	r2, [r3, #4]
	io->size = size;
1000b774:	68fb      	ldr	r3, [r7, #12]
1000b776:	683a      	ldr	r2, [r7, #0]
1000b778:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
1000b77a:	68fb      	ldr	r3, [r7, #12]
1000b77c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
1000b77e:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
1000b780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000b782:	2b1f      	cmp	r3, #31
1000b784:	d904      	bls.n	1000b790 <metal_io_init+0x44>
		/* avoid overflow */
		io->page_mask = -1UL;
1000b786:	68fb      	ldr	r3, [r7, #12]
1000b788:	f04f 32ff 	mov.w	r2, #4294967295
1000b78c:	611a      	str	r2, [r3, #16]
1000b78e:	e006      	b.n	1000b79e <metal_io_init+0x52>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
1000b790:	2201      	movs	r2, #1
1000b792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000b794:	fa02 f303 	lsl.w	r3, r2, r3
1000b798:	1e5a      	subs	r2, r3, #1
1000b79a:	68fb      	ldr	r3, [r7, #12]
1000b79c:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
1000b79e:	68fb      	ldr	r3, [r7, #12]
1000b7a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
1000b7a2:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
1000b7a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
1000b7a6:	2b00      	cmp	r3, #0
1000b7a8:	d00b      	beq.n	1000b7c2 <metal_io_init+0x76>
1000b7aa:	68fb      	ldr	r3, [r7, #12]
1000b7ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
1000b7ae:	f103 0418 	add.w	r4, r3, #24
1000b7b2:	4615      	mov	r5, r2
1000b7b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1000b7b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1000b7b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1000b7bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1000b7c0:	e00a      	b.n	1000b7d8 <metal_io_init+0x8c>
1000b7c2:	68fb      	ldr	r3, [r7, #12]
1000b7c4:	f103 0418 	add.w	r4, r3, #24
1000b7c8:	f107 0510 	add.w	r5, r7, #16
1000b7cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1000b7ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1000b7d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1000b7d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
1000b7d8:	68f8      	ldr	r0, [r7, #12]
1000b7da:	f7ff ff1b 	bl	1000b614 <metal_sys_io_mem_map>
}
1000b7de:	bf00      	nop
1000b7e0:	3730      	adds	r7, #48	; 0x30
1000b7e2:	46bd      	mov	sp, r7
1000b7e4:	bdb0      	pop	{r4, r5, r7, pc}

1000b7e6 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
1000b7e6:	b590      	push	{r4, r7, lr}
1000b7e8:	b08b      	sub	sp, #44	; 0x2c
1000b7ea:	af02      	add	r7, sp, #8
1000b7ec:	60f8      	str	r0, [r7, #12]
1000b7ee:	60b9      	str	r1, [r7, #8]
1000b7f0:	607a      	str	r2, [r7, #4]
1000b7f2:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
1000b7f4:	68b9      	ldr	r1, [r7, #8]
1000b7f6:	68f8      	ldr	r0, [r7, #12]
1000b7f8:	f7ff ff8c 	bl	1000b714 <metal_io_virt>
1000b7fc:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
1000b7fe:	687b      	ldr	r3, [r7, #4]
1000b800:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
1000b802:	69fb      	ldr	r3, [r7, #28]
1000b804:	2b00      	cmp	r3, #0
1000b806:	d102      	bne.n	1000b80e <metal_io_block_read+0x28>
		return -ERANGE;
1000b808:	f06f 0321 	mvn.w	r3, #33	; 0x21
1000b80c:	e05c      	b.n	1000b8c8 <metal_io_block_read+0xe2>
	if ((offset + len) > io->size)
1000b80e:	683a      	ldr	r2, [r7, #0]
1000b810:	68bb      	ldr	r3, [r7, #8]
1000b812:	441a      	add	r2, r3
1000b814:	68fb      	ldr	r3, [r7, #12]
1000b816:	689b      	ldr	r3, [r3, #8]
1000b818:	429a      	cmp	r2, r3
1000b81a:	d904      	bls.n	1000b826 <metal_io_block_read+0x40>
		len = io->size - offset;
1000b81c:	68fb      	ldr	r3, [r7, #12]
1000b81e:	689a      	ldr	r2, [r3, #8]
1000b820:	68bb      	ldr	r3, [r7, #8]
1000b822:	1ad3      	subs	r3, r2, r3
1000b824:	603b      	str	r3, [r7, #0]
	retlen = len;
1000b826:	683b      	ldr	r3, [r7, #0]
1000b828:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
1000b82a:	68fb      	ldr	r3, [r7, #12]
1000b82c:	6a1b      	ldr	r3, [r3, #32]
1000b82e:	2b00      	cmp	r3, #0
1000b830:	d00a      	beq.n	1000b848 <metal_io_block_read+0x62>
		retlen = (*io->ops.block_read)(
1000b832:	68fb      	ldr	r3, [r7, #12]
1000b834:	6a1c      	ldr	r4, [r3, #32]
1000b836:	683b      	ldr	r3, [r7, #0]
1000b838:	9300      	str	r3, [sp, #0]
1000b83a:	2305      	movs	r3, #5
1000b83c:	687a      	ldr	r2, [r7, #4]
1000b83e:	68b9      	ldr	r1, [r7, #8]
1000b840:	68f8      	ldr	r0, [r7, #12]
1000b842:	47a0      	blx	r4
1000b844:	6178      	str	r0, [r7, #20]
1000b846:	e03e      	b.n	1000b8c6 <metal_io_block_read+0xe0>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
1000b848:	f3bf 8f5b 	dmb	ish
		while ( len && (
1000b84c:	e00c      	b.n	1000b868 <metal_io_block_read+0x82>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
1000b84e:	69fb      	ldr	r3, [r7, #28]
1000b850:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
1000b852:	69bb      	ldr	r3, [r7, #24]
1000b854:	701a      	strb	r2, [r3, #0]
			dest++;
1000b856:	69bb      	ldr	r3, [r7, #24]
1000b858:	3301      	adds	r3, #1
1000b85a:	61bb      	str	r3, [r7, #24]
			ptr++;
1000b85c:	69fb      	ldr	r3, [r7, #28]
1000b85e:	3301      	adds	r3, #1
1000b860:	61fb      	str	r3, [r7, #28]
			len--;
1000b862:	683b      	ldr	r3, [r7, #0]
1000b864:	3b01      	subs	r3, #1
1000b866:	603b      	str	r3, [r7, #0]
		while ( len && (
1000b868:	683b      	ldr	r3, [r7, #0]
1000b86a:	2b00      	cmp	r3, #0
1000b86c:	d017      	beq.n	1000b89e <metal_io_block_read+0xb8>
			((uintptr_t)dest % sizeof(int)) ||
1000b86e:	69bb      	ldr	r3, [r7, #24]
1000b870:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
1000b874:	2b00      	cmp	r3, #0
1000b876:	d1ea      	bne.n	1000b84e <metal_io_block_read+0x68>
			((uintptr_t)ptr % sizeof(int)))) {
1000b878:	69fb      	ldr	r3, [r7, #28]
1000b87a:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
1000b87e:	2b00      	cmp	r3, #0
1000b880:	d1e5      	bne.n	1000b84e <metal_io_block_read+0x68>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000b882:	e00c      	b.n	1000b89e <metal_io_block_read+0xb8>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
1000b884:	69fb      	ldr	r3, [r7, #28]
1000b886:	681a      	ldr	r2, [r3, #0]
1000b888:	69bb      	ldr	r3, [r7, #24]
1000b88a:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000b88c:	69bb      	ldr	r3, [r7, #24]
1000b88e:	3304      	adds	r3, #4
1000b890:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
1000b892:	69fb      	ldr	r3, [r7, #28]
1000b894:	3304      	adds	r3, #4
1000b896:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
1000b898:	683b      	ldr	r3, [r7, #0]
1000b89a:	3b04      	subs	r3, #4
1000b89c:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000b89e:	683b      	ldr	r3, [r7, #0]
1000b8a0:	2b03      	cmp	r3, #3
1000b8a2:	dcef      	bgt.n	1000b884 <metal_io_block_read+0x9e>
		for (; len != 0; dest++, ptr++, len--)
1000b8a4:	e00c      	b.n	1000b8c0 <metal_io_block_read+0xda>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
1000b8a6:	69fb      	ldr	r3, [r7, #28]
1000b8a8:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
1000b8aa:	69bb      	ldr	r3, [r7, #24]
1000b8ac:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
1000b8ae:	69bb      	ldr	r3, [r7, #24]
1000b8b0:	3301      	adds	r3, #1
1000b8b2:	61bb      	str	r3, [r7, #24]
1000b8b4:	69fb      	ldr	r3, [r7, #28]
1000b8b6:	3301      	adds	r3, #1
1000b8b8:	61fb      	str	r3, [r7, #28]
1000b8ba:	683b      	ldr	r3, [r7, #0]
1000b8bc:	3b01      	subs	r3, #1
1000b8be:	603b      	str	r3, [r7, #0]
1000b8c0:	683b      	ldr	r3, [r7, #0]
1000b8c2:	2b00      	cmp	r3, #0
1000b8c4:	d1ef      	bne.n	1000b8a6 <metal_io_block_read+0xc0>
	}
	return retlen;
1000b8c6:	697b      	ldr	r3, [r7, #20]
}
1000b8c8:	4618      	mov	r0, r3
1000b8ca:	3724      	adds	r7, #36	; 0x24
1000b8cc:	46bd      	mov	sp, r7
1000b8ce:	bd90      	pop	{r4, r7, pc}

1000b8d0 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
1000b8d0:	b590      	push	{r4, r7, lr}
1000b8d2:	b08b      	sub	sp, #44	; 0x2c
1000b8d4:	af02      	add	r7, sp, #8
1000b8d6:	60f8      	str	r0, [r7, #12]
1000b8d8:	60b9      	str	r1, [r7, #8]
1000b8da:	607a      	str	r2, [r7, #4]
1000b8dc:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
1000b8de:	68b9      	ldr	r1, [r7, #8]
1000b8e0:	68f8      	ldr	r0, [r7, #12]
1000b8e2:	f7ff ff17 	bl	1000b714 <metal_io_virt>
1000b8e6:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
1000b8e8:	687b      	ldr	r3, [r7, #4]
1000b8ea:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
1000b8ec:	69fb      	ldr	r3, [r7, #28]
1000b8ee:	2b00      	cmp	r3, #0
1000b8f0:	d102      	bne.n	1000b8f8 <metal_io_block_write+0x28>
		return -ERANGE;
1000b8f2:	f06f 0321 	mvn.w	r3, #33	; 0x21
1000b8f6:	e05b      	b.n	1000b9b0 <metal_io_block_write+0xe0>
	if ((offset + len) > io->size)
1000b8f8:	683a      	ldr	r2, [r7, #0]
1000b8fa:	68bb      	ldr	r3, [r7, #8]
1000b8fc:	441a      	add	r2, r3
1000b8fe:	68fb      	ldr	r3, [r7, #12]
1000b900:	689b      	ldr	r3, [r3, #8]
1000b902:	429a      	cmp	r2, r3
1000b904:	d904      	bls.n	1000b910 <metal_io_block_write+0x40>
		len = io->size - offset;
1000b906:	68fb      	ldr	r3, [r7, #12]
1000b908:	689a      	ldr	r2, [r3, #8]
1000b90a:	68bb      	ldr	r3, [r7, #8]
1000b90c:	1ad3      	subs	r3, r2, r3
1000b90e:	603b      	str	r3, [r7, #0]
	retlen = len;
1000b910:	683b      	ldr	r3, [r7, #0]
1000b912:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
1000b914:	68fb      	ldr	r3, [r7, #12]
1000b916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000b918:	2b00      	cmp	r3, #0
1000b91a:	d017      	beq.n	1000b94c <metal_io_block_write+0x7c>
		retlen = (*io->ops.block_write)(
1000b91c:	68fb      	ldr	r3, [r7, #12]
1000b91e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
1000b920:	683b      	ldr	r3, [r7, #0]
1000b922:	9300      	str	r3, [sp, #0]
1000b924:	2305      	movs	r3, #5
1000b926:	687a      	ldr	r2, [r7, #4]
1000b928:	68b9      	ldr	r1, [r7, #8]
1000b92a:	68f8      	ldr	r0, [r7, #12]
1000b92c:	47a0      	blx	r4
1000b92e:	6178      	str	r0, [r7, #20]
1000b930:	e03d      	b.n	1000b9ae <metal_io_block_write+0xde>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
1000b932:	69bb      	ldr	r3, [r7, #24]
1000b934:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
1000b936:	69fb      	ldr	r3, [r7, #28]
1000b938:	701a      	strb	r2, [r3, #0]
			ptr++;
1000b93a:	69fb      	ldr	r3, [r7, #28]
1000b93c:	3301      	adds	r3, #1
1000b93e:	61fb      	str	r3, [r7, #28]
			source++;
1000b940:	69bb      	ldr	r3, [r7, #24]
1000b942:	3301      	adds	r3, #1
1000b944:	61bb      	str	r3, [r7, #24]
			len--;
1000b946:	683b      	ldr	r3, [r7, #0]
1000b948:	3b01      	subs	r3, #1
1000b94a:	603b      	str	r3, [r7, #0]
		while ( len && (
1000b94c:	683b      	ldr	r3, [r7, #0]
1000b94e:	2b00      	cmp	r3, #0
1000b950:	d017      	beq.n	1000b982 <metal_io_block_write+0xb2>
			((uintptr_t)ptr % sizeof(int)) ||
1000b952:	69fb      	ldr	r3, [r7, #28]
1000b954:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
1000b958:	2b00      	cmp	r3, #0
1000b95a:	d1ea      	bne.n	1000b932 <metal_io_block_write+0x62>
			((uintptr_t)source % sizeof(int)))) {
1000b95c:	69bb      	ldr	r3, [r7, #24]
1000b95e:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
1000b962:	2b00      	cmp	r3, #0
1000b964:	d1e5      	bne.n	1000b932 <metal_io_block_write+0x62>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
1000b966:	e00c      	b.n	1000b982 <metal_io_block_write+0xb2>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
1000b968:	69bb      	ldr	r3, [r7, #24]
1000b96a:	681a      	ldr	r2, [r3, #0]
1000b96c:	69fb      	ldr	r3, [r7, #28]
1000b96e:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
1000b970:	69fb      	ldr	r3, [r7, #28]
1000b972:	3304      	adds	r3, #4
1000b974:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
1000b976:	69bb      	ldr	r3, [r7, #24]
1000b978:	3304      	adds	r3, #4
1000b97a:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
1000b97c:	683b      	ldr	r3, [r7, #0]
1000b97e:	3b04      	subs	r3, #4
1000b980:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
1000b982:	683b      	ldr	r3, [r7, #0]
1000b984:	2b03      	cmp	r3, #3
1000b986:	dcef      	bgt.n	1000b968 <metal_io_block_write+0x98>
		for (; len != 0; ptr++, source++, len--)
1000b988:	e00c      	b.n	1000b9a4 <metal_io_block_write+0xd4>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
1000b98a:	69bb      	ldr	r3, [r7, #24]
1000b98c:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
1000b98e:	69fb      	ldr	r3, [r7, #28]
1000b990:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
1000b992:	69fb      	ldr	r3, [r7, #28]
1000b994:	3301      	adds	r3, #1
1000b996:	61fb      	str	r3, [r7, #28]
1000b998:	69bb      	ldr	r3, [r7, #24]
1000b99a:	3301      	adds	r3, #1
1000b99c:	61bb      	str	r3, [r7, #24]
1000b99e:	683b      	ldr	r3, [r7, #0]
1000b9a0:	3b01      	subs	r3, #1
1000b9a2:	603b      	str	r3, [r7, #0]
1000b9a4:	683b      	ldr	r3, [r7, #0]
1000b9a6:	2b00      	cmp	r3, #0
1000b9a8:	d1ef      	bne.n	1000b98a <metal_io_block_write+0xba>
		atomic_thread_fence(memory_order_seq_cst);
1000b9aa:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
1000b9ae:	697b      	ldr	r3, [r7, #20]
}
1000b9b0:	4618      	mov	r0, r3
1000b9b2:	3724      	adds	r7, #36	; 0x24
1000b9b4:	46bd      	mov	sp, r7
1000b9b6:	bd90      	pop	{r4, r7, pc}

1000b9b8 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
1000b9b8:	b40e      	push	{r1, r2, r3}
1000b9ba:	b480      	push	{r7}
1000b9bc:	b082      	sub	sp, #8
1000b9be:	af00      	add	r7, sp, #0
1000b9c0:	4603      	mov	r3, r0
1000b9c2:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
1000b9c4:	bf00      	nop
1000b9c6:	3708      	adds	r7, #8
1000b9c8:	46bd      	mov	sp, r7
1000b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b9ce:	b003      	add	sp, #12
1000b9d0:	4770      	bx	lr

1000b9d2 <metal_io_virt>:
{
1000b9d2:	b480      	push	{r7}
1000b9d4:	b083      	sub	sp, #12
1000b9d6:	af00      	add	r7, sp, #0
1000b9d8:	6078      	str	r0, [r7, #4]
1000b9da:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
1000b9dc:	687b      	ldr	r3, [r7, #4]
1000b9de:	681b      	ldr	r3, [r3, #0]
		: NULL);
1000b9e0:	f1b3 3fff 	cmp.w	r3, #4294967295
1000b9e4:	d00a      	beq.n	1000b9fc <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
1000b9e6:	687b      	ldr	r3, [r7, #4]
1000b9e8:	689b      	ldr	r3, [r3, #8]
1000b9ea:	683a      	ldr	r2, [r7, #0]
1000b9ec:	429a      	cmp	r2, r3
1000b9ee:	d205      	bcs.n	1000b9fc <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
1000b9f0:	687b      	ldr	r3, [r7, #4]
1000b9f2:	681b      	ldr	r3, [r3, #0]
1000b9f4:	461a      	mov	r2, r3
1000b9f6:	683b      	ldr	r3, [r7, #0]
1000b9f8:	4413      	add	r3, r2
		: NULL);
1000b9fa:	e000      	b.n	1000b9fe <metal_io_virt+0x2c>
1000b9fc:	2300      	movs	r3, #0
}
1000b9fe:	4618      	mov	r0, r3
1000ba00:	370c      	adds	r7, #12
1000ba02:	46bd      	mov	sp, r7
1000ba04:	f85d 7b04 	ldr.w	r7, [sp], #4
1000ba08:	4770      	bx	lr

1000ba0a <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
1000ba0a:	b480      	push	{r7}
1000ba0c:	b085      	sub	sp, #20
1000ba0e:	af00      	add	r7, sp, #0
1000ba10:	6078      	str	r0, [r7, #4]
1000ba12:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
1000ba14:	683b      	ldr	r3, [r7, #0]
1000ba16:	687a      	ldr	r2, [r7, #4]
1000ba18:	6812      	ldr	r2, [r2, #0]
1000ba1a:	1a9b      	subs	r3, r3, r2
1000ba1c:	60fb      	str	r3, [r7, #12]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
1000ba1e:	687b      	ldr	r3, [r7, #4]
1000ba20:	689b      	ldr	r3, [r3, #8]
1000ba22:	68fa      	ldr	r2, [r7, #12]
1000ba24:	429a      	cmp	r2, r3
1000ba26:	d201      	bcs.n	1000ba2c <metal_io_virt_to_offset+0x22>
1000ba28:	68fb      	ldr	r3, [r7, #12]
1000ba2a:	e001      	b.n	1000ba30 <metal_io_virt_to_offset+0x26>
1000ba2c:	f04f 33ff 	mov.w	r3, #4294967295
}
1000ba30:	4618      	mov	r0, r3
1000ba32:	3714      	adds	r7, #20
1000ba34:	46bd      	mov	sp, r7
1000ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
1000ba3a:	4770      	bx	lr

1000ba3c <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
1000ba3c:	b5b0      	push	{r4, r5, r7, lr}
1000ba3e:	b08c      	sub	sp, #48	; 0x30
1000ba40:	af00      	add	r7, sp, #0
1000ba42:	60f8      	str	r0, [r7, #12]
1000ba44:	60b9      	str	r1, [r7, #8]
1000ba46:	603b      	str	r3, [r7, #0]
1000ba48:	4613      	mov	r3, r2
1000ba4a:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
1000ba4c:	68b9      	ldr	r1, [r7, #8]
1000ba4e:	68f8      	ldr	r0, [r7, #12]
1000ba50:	f7ff ffbf 	bl	1000b9d2 <metal_io_virt>
1000ba54:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
1000ba56:	68fb      	ldr	r3, [r7, #12]
1000ba58:	699b      	ldr	r3, [r3, #24]
1000ba5a:	2b00      	cmp	r3, #0
1000ba5c:	d009      	beq.n	1000ba72 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
1000ba5e:	68fb      	ldr	r3, [r7, #12]
1000ba60:	699c      	ldr	r4, [r3, #24]
1000ba62:	79fa      	ldrb	r2, [r7, #7]
1000ba64:	683b      	ldr	r3, [r7, #0]
1000ba66:	68b9      	ldr	r1, [r7, #8]
1000ba68:	68f8      	ldr	r0, [r7, #12]
1000ba6a:	47a0      	blx	r4
1000ba6c:	4604      	mov	r4, r0
1000ba6e:	460d      	mov	r5, r1
1000ba70:	e059      	b.n	1000bb26 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
1000ba72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000ba74:	2b00      	cmp	r3, #0
1000ba76:	d012      	beq.n	1000ba9e <metal_io_read+0x62>
1000ba78:	683b      	ldr	r3, [r7, #0]
1000ba7a:	2b01      	cmp	r3, #1
1000ba7c:	d10f      	bne.n	1000ba9e <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
1000ba7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000ba80:	62bb      	str	r3, [r7, #40]	; 0x28
1000ba82:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000ba84:	f3bf 8f5b 	dmb	ish
1000ba88:	781b      	ldrb	r3, [r3, #0]
1000ba8a:	f3bf 8f5b 	dmb	ish
1000ba8e:	b2db      	uxtb	r3, r3
1000ba90:	76fb      	strb	r3, [r7, #27]
1000ba92:	7efb      	ldrb	r3, [r7, #27]
1000ba94:	b2db      	uxtb	r3, r3
1000ba96:	2200      	movs	r2, #0
1000ba98:	461c      	mov	r4, r3
1000ba9a:	4615      	mov	r5, r2
1000ba9c:	e043      	b.n	1000bb26 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
1000ba9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000baa0:	2b00      	cmp	r3, #0
1000baa2:	d012      	beq.n	1000baca <metal_io_read+0x8e>
1000baa4:	683b      	ldr	r3, [r7, #0]
1000baa6:	2b02      	cmp	r3, #2
1000baa8:	d10f      	bne.n	1000baca <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
1000baaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000baac:	627b      	str	r3, [r7, #36]	; 0x24
1000baae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bab0:	f3bf 8f5b 	dmb	ish
1000bab4:	881b      	ldrh	r3, [r3, #0]
1000bab6:	f3bf 8f5b 	dmb	ish
1000baba:	b29b      	uxth	r3, r3
1000babc:	833b      	strh	r3, [r7, #24]
1000babe:	8b3b      	ldrh	r3, [r7, #24]
1000bac0:	b29b      	uxth	r3, r3
1000bac2:	2200      	movs	r2, #0
1000bac4:	461c      	mov	r4, r3
1000bac6:	4615      	mov	r5, r2
1000bac8:	e02d      	b.n	1000bb26 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
1000baca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000bacc:	2b00      	cmp	r3, #0
1000bace:	d010      	beq.n	1000baf2 <metal_io_read+0xb6>
1000bad0:	683b      	ldr	r3, [r7, #0]
1000bad2:	2b04      	cmp	r3, #4
1000bad4:	d10d      	bne.n	1000baf2 <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
1000bad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000bad8:	623b      	str	r3, [r7, #32]
1000bada:	6a3b      	ldr	r3, [r7, #32]
1000badc:	f3bf 8f5b 	dmb	ish
1000bae0:	681b      	ldr	r3, [r3, #0]
1000bae2:	f3bf 8f5b 	dmb	ish
1000bae6:	617b      	str	r3, [r7, #20]
1000bae8:	697b      	ldr	r3, [r7, #20]
1000baea:	2200      	movs	r2, #0
1000baec:	461c      	mov	r4, r3
1000baee:	4615      	mov	r5, r2
1000baf0:	e019      	b.n	1000bb26 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
1000baf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000baf4:	2b00      	cmp	r3, #0
1000baf6:	d010      	beq.n	1000bb1a <metal_io_read+0xde>
1000baf8:	683b      	ldr	r3, [r7, #0]
1000bafa:	2b04      	cmp	r3, #4
1000bafc:	d10d      	bne.n	1000bb1a <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
1000bafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000bb00:	61fb      	str	r3, [r7, #28]
1000bb02:	69fb      	ldr	r3, [r7, #28]
1000bb04:	f3bf 8f5b 	dmb	ish
1000bb08:	681b      	ldr	r3, [r3, #0]
1000bb0a:	f3bf 8f5b 	dmb	ish
1000bb0e:	613b      	str	r3, [r7, #16]
1000bb10:	693b      	ldr	r3, [r7, #16]
1000bb12:	2200      	movs	r2, #0
1000bb14:	461c      	mov	r4, r3
1000bb16:	4615      	mov	r5, r2
1000bb18:	e005      	b.n	1000bb26 <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
1000bb1a:	4b06      	ldr	r3, [pc, #24]	; (1000bb34 <metal_io_read+0xf8>)
1000bb1c:	4a06      	ldr	r2, [pc, #24]	; (1000bb38 <metal_io_read+0xfc>)
1000bb1e:	21fe      	movs	r1, #254	; 0xfe
1000bb20:	4806      	ldr	r0, [pc, #24]	; (1000bb3c <metal_io_read+0x100>)
1000bb22:	f004 f947 	bl	1000fdb4 <__assert_func>
	return 0; /* quiet compiler */
}
1000bb26:	4622      	mov	r2, r4
1000bb28:	462b      	mov	r3, r5
1000bb2a:	4610      	mov	r0, r2
1000bb2c:	4619      	mov	r1, r3
1000bb2e:	3730      	adds	r7, #48	; 0x30
1000bb30:	46bd      	mov	sp, r7
1000bb32:	bdb0      	pop	{r4, r5, r7, pc}
1000bb34:	10013060 	.word	0x10013060
1000bb38:	100132cc 	.word	0x100132cc
1000bb3c:	10013064 	.word	0x10013064

1000bb40 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
1000bb40:	b580      	push	{r7, lr}
1000bb42:	b082      	sub	sp, #8
1000bb44:	af00      	add	r7, sp, #0
1000bb46:	6078      	str	r0, [r7, #4]
	return malloc(size);
1000bb48:	6878      	ldr	r0, [r7, #4]
1000bb4a:	f004 f951 	bl	1000fdf0 <malloc>
1000bb4e:	4603      	mov	r3, r0
}
1000bb50:	4618      	mov	r0, r3
1000bb52:	3708      	adds	r7, #8
1000bb54:	46bd      	mov	sp, r7
1000bb56:	bd80      	pop	{r7, pc}

1000bb58 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
1000bb58:	b580      	push	{r7, lr}
1000bb5a:	b082      	sub	sp, #8
1000bb5c:	af00      	add	r7, sp, #0
1000bb5e:	6078      	str	r0, [r7, #4]
	free(ptr);
1000bb60:	6878      	ldr	r0, [r7, #4]
1000bb62:	f004 f94d 	bl	1000fe00 <free>
}
1000bb66:	bf00      	nop
1000bb68:	3708      	adds	r7, #8
1000bb6a:	46bd      	mov	sp, r7
1000bb6c:	bd80      	pop	{r7, pc}

1000bb6e <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
1000bb6e:	b580      	push	{r7, lr}
1000bb70:	b084      	sub	sp, #16
1000bb72:	af00      	add	r7, sp, #0
1000bb74:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
1000bb76:	687b      	ldr	r3, [r7, #4]
1000bb78:	00db      	lsls	r3, r3, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
1000bb7a:	3334      	adds	r3, #52	; 0x34
1000bb7c:	60fb      	str	r3, [r7, #12]

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
1000bb7e:	68f8      	ldr	r0, [r7, #12]
1000bb80:	f7ff ffde 	bl	1000bb40 <metal_allocate_memory>
1000bb84:	60b8      	str	r0, [r7, #8]
	if (vqs) {
1000bb86:	68bb      	ldr	r3, [r7, #8]
1000bb88:	2b00      	cmp	r3, #0
1000bb8a:	d004      	beq.n	1000bb96 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
1000bb8c:	68fa      	ldr	r2, [r7, #12]
1000bb8e:	2100      	movs	r1, #0
1000bb90:	68b8      	ldr	r0, [r7, #8]
1000bb92:	f004 ffb6 	bl	10010b02 <memset>
	}

	return vqs;
1000bb96:	68bb      	ldr	r3, [r7, #8]
}
1000bb98:	4618      	mov	r0, r3
1000bb9a:	3710      	adds	r7, #16
1000bb9c:	46bd      	mov	sp, r7
1000bb9e:	bd80      	pop	{r7, pc}

1000bba0 <rproc_virtio_virtqueue_notify>:
#include <metal/cpu.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
1000bba0:	b580      	push	{r7, lr}
1000bba2:	b086      	sub	sp, #24
1000bba4:	af00      	add	r7, sp, #0
1000bba6:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
1000bba8:	687b      	ldr	r3, [r7, #4]
1000bbaa:	891b      	ldrh	r3, [r3, #8]
1000bbac:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
1000bbae:	687b      	ldr	r3, [r7, #4]
1000bbb0:	681b      	ldr	r3, [r3, #0]
1000bbb2:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000bbb4:	693b      	ldr	r3, [r7, #16]
1000bbb6:	3b10      	subs	r3, #16
1000bbb8:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id < vdev->vrings_num);
1000bbba:	693b      	ldr	r3, [r7, #16]
1000bbbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000bbbe:	697a      	ldr	r2, [r7, #20]
1000bbc0:	429a      	cmp	r2, r3
1000bbc2:	d305      	bcc.n	1000bbd0 <rproc_virtio_virtqueue_notify+0x30>
1000bbc4:	4b0d      	ldr	r3, [pc, #52]	; (1000bbfc <rproc_virtio_virtqueue_notify+0x5c>)
1000bbc6:	4a0e      	ldr	r2, [pc, #56]	; (1000bc00 <rproc_virtio_virtqueue_notify+0x60>)
1000bbc8:	211c      	movs	r1, #28
1000bbca:	480e      	ldr	r0, [pc, #56]	; (1000bc04 <rproc_virtio_virtqueue_notify+0x64>)
1000bbcc:	f004 f8f2 	bl	1000fdb4 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
1000bbd0:	693b      	ldr	r3, [r7, #16]
1000bbd2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1000bbd4:	697a      	ldr	r2, [r7, #20]
1000bbd6:	4613      	mov	r3, r2
1000bbd8:	005b      	lsls	r3, r3, #1
1000bbda:	4413      	add	r3, r2
1000bbdc:	00db      	lsls	r3, r3, #3
1000bbde:	440b      	add	r3, r1
1000bbe0:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
1000bbe2:	68fb      	ldr	r3, [r7, #12]
1000bbe4:	68db      	ldr	r3, [r3, #12]
1000bbe6:	68fa      	ldr	r2, [r7, #12]
1000bbe8:	6810      	ldr	r0, [r2, #0]
1000bbea:	68ba      	ldr	r2, [r7, #8]
1000bbec:	6912      	ldr	r2, [r2, #16]
1000bbee:	4611      	mov	r1, r2
1000bbf0:	4798      	blx	r3
}
1000bbf2:	bf00      	nop
1000bbf4:	3718      	adds	r7, #24
1000bbf6:	46bd      	mov	sp, r7
1000bbf8:	bd80      	pop	{r7, pc}
1000bbfa:	bf00      	nop
1000bbfc:	100130ac 	.word	0x100130ac
1000bc00:	100132ac 	.word	0x100132ac
1000bc04:	100130c8 	.word	0x100130c8

1000bc08 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
1000bc08:	b580      	push	{r7, lr}
1000bc0a:	b086      	sub	sp, #24
1000bc0c:	af00      	add	r7, sp, #0
1000bc0e:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000bc10:	687b      	ldr	r3, [r7, #4]
1000bc12:	3b10      	subs	r3, #16
1000bc14:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
1000bc16:	697b      	ldr	r3, [r7, #20]
1000bc18:	685b      	ldr	r3, [r3, #4]
1000bc1a:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
1000bc1c:	697b      	ldr	r3, [r7, #20]
1000bc1e:	689b      	ldr	r3, [r3, #8]
1000bc20:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
1000bc22:	693b      	ldr	r3, [r7, #16]
1000bc24:	3318      	adds	r3, #24
1000bc26:	4619      	mov	r1, r3
1000bc28:	68f8      	ldr	r0, [r7, #12]
1000bc2a:	f7ff feee 	bl	1000ba0a <metal_io_virt_to_offset>
1000bc2e:	4601      	mov	r1, r0
1000bc30:	2301      	movs	r3, #1
1000bc32:	2205      	movs	r2, #5
1000bc34:	68f8      	ldr	r0, [r7, #12]
1000bc36:	f7ff ff01 	bl	1000ba3c <metal_io_read>
1000bc3a:	4602      	mov	r2, r0
1000bc3c:	460b      	mov	r3, r1
1000bc3e:	4613      	mov	r3, r2
1000bc40:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
1000bc42:	7afb      	ldrb	r3, [r7, #11]
}
1000bc44:	4618      	mov	r0, r3
1000bc46:	3718      	adds	r7, #24
1000bc48:	46bd      	mov	sp, r7
1000bc4a:	bd80      	pop	{r7, pc}

1000bc4c <rproc_virtio_get_dfeatures>:
	rpvdev->notify(rpvdev->priv, vdev->notifyid);
}
#endif

static uint32_t rproc_virtio_get_dfeatures(struct virtio_device *vdev)
{
1000bc4c:	b580      	push	{r7, lr}
1000bc4e:	b086      	sub	sp, #24
1000bc50:	af00      	add	r7, sp, #0
1000bc52:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000bc54:	687b      	ldr	r3, [r7, #4]
1000bc56:	3b10      	subs	r3, #16
1000bc58:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
1000bc5a:	697b      	ldr	r3, [r7, #20]
1000bc5c:	685b      	ldr	r3, [r3, #4]
1000bc5e:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
1000bc60:	697b      	ldr	r3, [r7, #20]
1000bc62:	689b      	ldr	r3, [r3, #8]
1000bc64:	60fb      	str	r3, [r7, #12]
	features = metal_io_read32(io,
1000bc66:	693b      	ldr	r3, [r7, #16]
1000bc68:	330c      	adds	r3, #12
1000bc6a:	4619      	mov	r1, r3
1000bc6c:	68f8      	ldr	r0, [r7, #12]
1000bc6e:	f7ff fecc 	bl	1000ba0a <metal_io_virt_to_offset>
1000bc72:	4601      	mov	r1, r0
1000bc74:	2304      	movs	r3, #4
1000bc76:	2205      	movs	r2, #5
1000bc78:	68f8      	ldr	r0, [r7, #12]
1000bc7a:	f7ff fedf 	bl	1000ba3c <metal_io_read>
1000bc7e:	4602      	mov	r2, r0
1000bc80:	460b      	mov	r3, r1
1000bc82:	4613      	mov	r3, r2
1000bc84:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
1000bc86:	68bb      	ldr	r3, [r7, #8]
}
1000bc88:	4618      	mov	r0, r3
1000bc8a:	3718      	adds	r7, #24
1000bc8c:	46bd      	mov	sp, r7
1000bc8e:	bd80      	pop	{r7, pc}

1000bc90 <rproc_virtio_get_features>:

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
1000bc90:	b580      	push	{r7, lr}
1000bc92:	b088      	sub	sp, #32
1000bc94:	af00      	add	r7, sp, #0
1000bc96:	6078      	str	r0, [r7, #4]
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t gfeatures;
	uint32_t dfeatures;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000bc98:	687b      	ldr	r3, [r7, #4]
1000bc9a:	3b10      	subs	r3, #16
1000bc9c:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
1000bc9e:	69fb      	ldr	r3, [r7, #28]
1000bca0:	685b      	ldr	r3, [r3, #4]
1000bca2:	61bb      	str	r3, [r7, #24]
	io = rpvdev->vdev_rsc_io;
1000bca4:	69fb      	ldr	r3, [r7, #28]
1000bca6:	689b      	ldr	r3, [r3, #8]
1000bca8:	617b      	str	r3, [r7, #20]
	gfeatures = metal_io_read32(io,
1000bcaa:	69bb      	ldr	r3, [r7, #24]
1000bcac:	3310      	adds	r3, #16
1000bcae:	4619      	mov	r1, r3
1000bcb0:	6978      	ldr	r0, [r7, #20]
1000bcb2:	f7ff feaa 	bl	1000ba0a <metal_io_virt_to_offset>
1000bcb6:	4601      	mov	r1, r0
1000bcb8:	2304      	movs	r3, #4
1000bcba:	2205      	movs	r2, #5
1000bcbc:	6978      	ldr	r0, [r7, #20]
1000bcbe:	f7ff febd 	bl	1000ba3c <metal_io_read>
1000bcc2:	4602      	mov	r2, r0
1000bcc4:	460b      	mov	r3, r1
1000bcc6:	4613      	mov	r3, r2
1000bcc8:	613b      	str	r3, [r7, #16]
			metal_io_virt_to_offset(io, &vdev_rsc->gfeatures));
	dfeatures = rproc_virtio_get_dfeatures(vdev);
1000bcca:	6878      	ldr	r0, [r7, #4]
1000bccc:	f7ff ffbe 	bl	1000bc4c <rproc_virtio_get_dfeatures>
1000bcd0:	60f8      	str	r0, [r7, #12]

	return dfeatures & gfeatures;
1000bcd2:	68fa      	ldr	r2, [r7, #12]
1000bcd4:	693b      	ldr	r3, [r7, #16]
1000bcd6:	4013      	ands	r3, r2
}
1000bcd8:	4618      	mov	r0, r3
1000bcda:	3720      	adds	r7, #32
1000bcdc:	46bd      	mov	sp, r7
1000bcde:	bd80      	pop	{r7, pc}

1000bce0 <rproc_virtio_read_config>:
}
#endif

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
1000bce0:	b580      	push	{r7, lr}
1000bce2:	b088      	sub	sp, #32
1000bce4:	af00      	add	r7, sp, #0
1000bce6:	60f8      	str	r0, [r7, #12]
1000bce8:	60b9      	str	r1, [r7, #8]
1000bcea:	607a      	str	r2, [r7, #4]
1000bcec:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char *config;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000bcee:	68fb      	ldr	r3, [r7, #12]
1000bcf0:	3b10      	subs	r3, #16
1000bcf2:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
1000bcf4:	69fb      	ldr	r3, [r7, #28]
1000bcf6:	685b      	ldr	r3, [r3, #4]
1000bcf8:	61bb      	str	r3, [r7, #24]
	config = (char *)(&vdev_rsc->vring[vdev->vrings_num]);
1000bcfa:	68fb      	ldr	r3, [r7, #12]
1000bcfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
1000bcfe:	4613      	mov	r3, r2
1000bd00:	009b      	lsls	r3, r3, #2
1000bd02:	4413      	add	r3, r2
1000bd04:	009b      	lsls	r3, r3, #2
1000bd06:	3318      	adds	r3, #24
1000bd08:	69ba      	ldr	r2, [r7, #24]
1000bd0a:	4413      	add	r3, r2
1000bd0c:	3304      	adds	r3, #4
1000bd0e:	617b      	str	r3, [r7, #20]
	io = rpvdev->vdev_rsc_io;
1000bd10:	69fb      	ldr	r3, [r7, #28]
1000bd12:	689b      	ldr	r3, [r3, #8]
1000bd14:	613b      	str	r3, [r7, #16]

	if (offset + length <= vdev_rsc->config_len)
1000bd16:	683a      	ldr	r2, [r7, #0]
1000bd18:	68bb      	ldr	r3, [r7, #8]
1000bd1a:	441a      	add	r2, r3
1000bd1c:	69bb      	ldr	r3, [r7, #24]
1000bd1e:	695b      	ldr	r3, [r3, #20]
1000bd20:	429a      	cmp	r2, r3
1000bd22:	d80c      	bhi.n	1000bd3e <rproc_virtio_read_config+0x5e>
		metal_io_block_read(io,
				metal_io_virt_to_offset(io, config + offset),
1000bd24:	697a      	ldr	r2, [r7, #20]
1000bd26:	68bb      	ldr	r3, [r7, #8]
1000bd28:	4413      	add	r3, r2
		metal_io_block_read(io,
1000bd2a:	4619      	mov	r1, r3
1000bd2c:	6938      	ldr	r0, [r7, #16]
1000bd2e:	f7ff fe6c 	bl	1000ba0a <metal_io_virt_to_offset>
1000bd32:	4601      	mov	r1, r0
1000bd34:	683b      	ldr	r3, [r7, #0]
1000bd36:	687a      	ldr	r2, [r7, #4]
1000bd38:	6938      	ldr	r0, [r7, #16]
1000bd3a:	f7ff fd54 	bl	1000b7e6 <metal_io_block_read>
				dst, length);
}
1000bd3e:	bf00      	nop
1000bd40:	3720      	adds	r7, #32
1000bd42:	46bd      	mov	sp, r7
1000bd44:	bd80      	pop	{r7, pc}
	...

1000bd48 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
1000bd48:	b580      	push	{r7, lr}
1000bd4a:	b08e      	sub	sp, #56	; 0x38
1000bd4c:	af00      	add	r7, sp, #0
1000bd4e:	60f8      	str	r0, [r7, #12]
1000bd50:	60b9      	str	r1, [r7, #8]
1000bd52:	607a      	str	r2, [r7, #4]
1000bd54:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
1000bd56:	687b      	ldr	r3, [r7, #4]
1000bd58:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
1000bd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000bd5c:	7e5b      	ldrb	r3, [r3, #25]
1000bd5e:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
1000bd60:	2048      	movs	r0, #72	; 0x48
1000bd62:	f7ff feed 	bl	1000bb40 <metal_allocate_memory>
1000bd66:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
1000bd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bd6a:	2b00      	cmp	r3, #0
1000bd6c:	d101      	bne.n	1000bd72 <rproc_virtio_create_vdev+0x2a>
		return NULL;
1000bd6e:	2300      	movs	r3, #0
1000bd70:	e092      	b.n	1000be98 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
1000bd72:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000bd74:	4613      	mov	r3, r2
1000bd76:	005b      	lsls	r3, r3, #1
1000bd78:	4413      	add	r3, r2
1000bd7a:	00db      	lsls	r3, r3, #3
1000bd7c:	4618      	mov	r0, r3
1000bd7e:	f7ff fedf 	bl	1000bb40 <metal_allocate_memory>
1000bd82:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
1000bd84:	6a3b      	ldr	r3, [r7, #32]
1000bd86:	2b00      	cmp	r3, #0
1000bd88:	f000 8081 	beq.w	1000be8e <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
1000bd8c:	2248      	movs	r2, #72	; 0x48
1000bd8e:	2100      	movs	r1, #0
1000bd90:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000bd92:	f004 feb6 	bl	10010b02 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
1000bd96:	2218      	movs	r2, #24
1000bd98:	2100      	movs	r1, #0
1000bd9a:	6a38      	ldr	r0, [r7, #32]
1000bd9c:	f004 feb1 	bl	10010b02 <memset>
	vdev = &rpvdev->vdev;
1000bda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bda2:	3310      	adds	r3, #16
1000bda4:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
1000bda6:	2300      	movs	r3, #0
1000bda8:	637b      	str	r3, [r7, #52]	; 0x34
1000bdaa:	e025      	b.n	1000bdf8 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
1000bdac:	2300      	movs	r3, #0
1000bdae:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
1000bdb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000bdb2:	4613      	mov	r3, r2
1000bdb4:	009b      	lsls	r3, r3, #2
1000bdb6:	4413      	add	r3, r2
1000bdb8:	009b      	lsls	r3, r3, #2
1000bdba:	3318      	adds	r3, #24
1000bdbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
1000bdbe:	4413      	add	r3, r2
1000bdc0:	3304      	adds	r3, #4
1000bdc2:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
1000bdc4:	68fb      	ldr	r3, [r7, #12]
1000bdc6:	2b00      	cmp	r3, #0
1000bdc8:	d102      	bne.n	1000bdd0 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
1000bdca:	69bb      	ldr	r3, [r7, #24]
1000bdcc:	689b      	ldr	r3, [r3, #8]
1000bdce:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
1000bdd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
1000bdd2:	f7ff fecc 	bl	1000bb6e <virtqueue_allocate>
1000bdd6:	6178      	str	r0, [r7, #20]
		if (!vq)
1000bdd8:	697b      	ldr	r3, [r7, #20]
1000bdda:	2b00      	cmp	r3, #0
1000bddc:	d031      	beq.n	1000be42 <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
1000bdde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000bde0:	4613      	mov	r3, r2
1000bde2:	005b      	lsls	r3, r3, #1
1000bde4:	4413      	add	r3, r2
1000bde6:	00db      	lsls	r3, r3, #3
1000bde8:	461a      	mov	r2, r3
1000bdea:	6a3b      	ldr	r3, [r7, #32]
1000bdec:	4413      	add	r3, r2
1000bdee:	697a      	ldr	r2, [r7, #20]
1000bdf0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
1000bdf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000bdf4:	3301      	adds	r3, #1
1000bdf6:	637b      	str	r3, [r7, #52]	; 0x34
1000bdf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000bdfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000bdfc:	429a      	cmp	r2, r3
1000bdfe:	d3d5      	bcc.n	1000bdac <rproc_virtio_create_vdev+0x64>
	}

	rpvdev->notify = notify;
1000be00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000be02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
1000be04:	60da      	str	r2, [r3, #12]
	rpvdev->priv = priv;
1000be06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000be08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
1000be0a:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
1000be0c:	69fb      	ldr	r3, [r7, #28]
1000be0e:	6a3a      	ldr	r2, [r7, #32]
1000be10:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
1000be12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000be14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
1000be16:	605a      	str	r2, [r3, #4]
	rpvdev->vdev_rsc_io = rsc_io;
1000be18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000be1a:	683a      	ldr	r2, [r7, #0]
1000be1c:	609a      	str	r2, [r3, #8]

	vdev->notifyid = notifyid;
1000be1e:	69fb      	ldr	r3, [r7, #28]
1000be20:	68ba      	ldr	r2, [r7, #8]
1000be22:	601a      	str	r2, [r3, #0]
	vdev->role = role;
1000be24:	69fb      	ldr	r3, [r7, #28]
1000be26:	68fa      	ldr	r2, [r7, #12]
1000be28:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
1000be2a:	69fb      	ldr	r3, [r7, #28]
1000be2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
1000be2e:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
1000be30:	69fb      	ldr	r3, [r7, #28]
1000be32:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000be34:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
1000be36:	69fb      	ldr	r3, [r7, #28]
1000be38:	4a19      	ldr	r2, [pc, #100]	; (1000bea0 <rproc_virtio_create_vdev+0x158>)
1000be3a:	621a      	str	r2, [r3, #32]
		/* Assume the master support all slave features */
		rproc_virtio_negotiate_features(vdev, dfeatures);
	}
#endif

	return &rpvdev->vdev;
1000be3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000be3e:	3310      	adds	r3, #16
1000be40:	e02a      	b.n	1000be98 <rproc_virtio_create_vdev+0x150>
			goto err1;
1000be42:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
1000be44:	2300      	movs	r3, #0
1000be46:	637b      	str	r3, [r7, #52]	; 0x34
1000be48:	e019      	b.n	1000be7e <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
1000be4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000be4c:	4613      	mov	r3, r2
1000be4e:	005b      	lsls	r3, r3, #1
1000be50:	4413      	add	r3, r2
1000be52:	00db      	lsls	r3, r3, #3
1000be54:	461a      	mov	r2, r3
1000be56:	6a3b      	ldr	r3, [r7, #32]
1000be58:	4413      	add	r3, r2
1000be5a:	681b      	ldr	r3, [r3, #0]
1000be5c:	2b00      	cmp	r3, #0
1000be5e:	d00b      	beq.n	1000be78 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
1000be60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000be62:	4613      	mov	r3, r2
1000be64:	005b      	lsls	r3, r3, #1
1000be66:	4413      	add	r3, r2
1000be68:	00db      	lsls	r3, r3, #3
1000be6a:	461a      	mov	r2, r3
1000be6c:	6a3b      	ldr	r3, [r7, #32]
1000be6e:	4413      	add	r3, r2
1000be70:	681b      	ldr	r3, [r3, #0]
1000be72:	4618      	mov	r0, r3
1000be74:	f7ff fe70 	bl	1000bb58 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
1000be78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000be7a:	3301      	adds	r3, #1
1000be7c:	637b      	str	r3, [r7, #52]	; 0x34
1000be7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000be80:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000be82:	429a      	cmp	r2, r3
1000be84:	d3e1      	bcc.n	1000be4a <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
1000be86:	6a38      	ldr	r0, [r7, #32]
1000be88:	f7ff fe66 	bl	1000bb58 <metal_free_memory>
1000be8c:	e000      	b.n	1000be90 <rproc_virtio_create_vdev+0x148>
		goto err0;
1000be8e:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
1000be90:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000be92:	f7ff fe61 	bl	1000bb58 <metal_free_memory>
	return NULL;
1000be96:	2300      	movs	r3, #0
}
1000be98:	4618      	mov	r0, r3
1000be9a:	3738      	adds	r7, #56	; 0x38
1000be9c:	46bd      	mov	sp, r7
1000be9e:	bd80      	pop	{r7, pc}
1000bea0:	10013288 	.word	0x10013288

1000bea4 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
1000bea4:	b480      	push	{r7}
1000bea6:	b087      	sub	sp, #28
1000bea8:	af00      	add	r7, sp, #0
1000beaa:	60f8      	str	r0, [r7, #12]
1000beac:	60b9      	str	r1, [r7, #8]
1000beae:	607a      	str	r2, [r7, #4]
1000beb0:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
1000beb2:	68fb      	ldr	r3, [r7, #12]
1000beb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000beb6:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
1000beb8:	68ba      	ldr	r2, [r7, #8]
1000beba:	697b      	ldr	r3, [r7, #20]
1000bebc:	429a      	cmp	r2, r3
1000bebe:	d302      	bcc.n	1000bec6 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
1000bec0:	f06f 0301 	mvn.w	r3, #1
1000bec4:	e019      	b.n	1000befa <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
1000bec6:	68fb      	ldr	r3, [r7, #12]
1000bec8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1000beca:	68ba      	ldr	r2, [r7, #8]
1000becc:	4613      	mov	r3, r2
1000bece:	005b      	lsls	r3, r3, #1
1000bed0:	4413      	add	r3, r2
1000bed2:	00db      	lsls	r3, r3, #3
1000bed4:	440b      	add	r3, r1
1000bed6:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
1000bed8:	693b      	ldr	r3, [r7, #16]
1000beda:	6a3a      	ldr	r2, [r7, #32]
1000bedc:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
1000bede:	693b      	ldr	r3, [r7, #16]
1000bee0:	687a      	ldr	r2, [r7, #4]
1000bee2:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
1000bee4:	693b      	ldr	r3, [r7, #16]
1000bee6:	683a      	ldr	r2, [r7, #0]
1000bee8:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
1000beea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000beec:	b29a      	uxth	r2, r3
1000beee:	693b      	ldr	r3, [r7, #16]
1000bef0:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
1000bef2:	693b      	ldr	r3, [r7, #16]
1000bef4:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000bef6:	609a      	str	r2, [r3, #8]

	return 0;
1000bef8:	2300      	movs	r3, #0
}
1000befa:	4618      	mov	r0, r3
1000befc:	371c      	adds	r7, #28
1000befe:	46bd      	mov	sp, r7
1000bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bf04:	4770      	bx	lr

1000bf06 <rproc_virtio_wait_remote_ready>:
	}
	return 0;
}

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
1000bf06:	b580      	push	{r7, lr}
1000bf08:	b084      	sub	sp, #16
1000bf0a:	af00      	add	r7, sp, #0
1000bf0c:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
1000bf0e:	687b      	ldr	r3, [r7, #4]
1000bf10:	699b      	ldr	r3, [r3, #24]
1000bf12:	2b00      	cmp	r3, #0
1000bf14:	d00a      	beq.n	1000bf2c <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
1000bf16:	6878      	ldr	r0, [r7, #4]
1000bf18:	f7ff fe76 	bl	1000bc08 <rproc_virtio_get_status>
1000bf1c:	4603      	mov	r3, r0
1000bf1e:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
1000bf20:	7bfb      	ldrb	r3, [r7, #15]
1000bf22:	f003 0304 	and.w	r3, r3, #4
1000bf26:	2b00      	cmp	r3, #0
1000bf28:	d102      	bne.n	1000bf30 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
1000bf2a:	e7f4      	b.n	1000bf16 <rproc_virtio_wait_remote_ready+0x10>
		return;
1000bf2c:	bf00      	nop
1000bf2e:	e000      	b.n	1000bf32 <rproc_virtio_wait_remote_ready+0x2c>
			return;
1000bf30:	bf00      	nop
		metal_cpu_yield();
	}
}
1000bf32:	3710      	adds	r7, #16
1000bf34:	46bd      	mov	sp, r7
1000bf36:	bd80      	pop	{r7, pc}

1000bf38 <metal_list_add_before>:
{
1000bf38:	b480      	push	{r7}
1000bf3a:	b083      	sub	sp, #12
1000bf3c:	af00      	add	r7, sp, #0
1000bf3e:	6078      	str	r0, [r7, #4]
1000bf40:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
1000bf42:	687b      	ldr	r3, [r7, #4]
1000bf44:	685a      	ldr	r2, [r3, #4]
1000bf46:	683b      	ldr	r3, [r7, #0]
1000bf48:	605a      	str	r2, [r3, #4]
	new_node->next = node;
1000bf4a:	683b      	ldr	r3, [r7, #0]
1000bf4c:	687a      	ldr	r2, [r7, #4]
1000bf4e:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
1000bf50:	683b      	ldr	r3, [r7, #0]
1000bf52:	681b      	ldr	r3, [r3, #0]
1000bf54:	683a      	ldr	r2, [r7, #0]
1000bf56:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
1000bf58:	683b      	ldr	r3, [r7, #0]
1000bf5a:	685b      	ldr	r3, [r3, #4]
1000bf5c:	683a      	ldr	r2, [r7, #0]
1000bf5e:	601a      	str	r2, [r3, #0]
}
1000bf60:	bf00      	nop
1000bf62:	370c      	adds	r7, #12
1000bf64:	46bd      	mov	sp, r7
1000bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bf6a:	4770      	bx	lr

1000bf6c <metal_list_add_tail>:
{
1000bf6c:	b580      	push	{r7, lr}
1000bf6e:	b082      	sub	sp, #8
1000bf70:	af00      	add	r7, sp, #0
1000bf72:	6078      	str	r0, [r7, #4]
1000bf74:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
1000bf76:	6839      	ldr	r1, [r7, #0]
1000bf78:	6878      	ldr	r0, [r7, #4]
1000bf7a:	f7ff ffdd 	bl	1000bf38 <metal_list_add_before>
}
1000bf7e:	bf00      	nop
1000bf80:	3708      	adds	r7, #8
1000bf82:	46bd      	mov	sp, r7
1000bf84:	bd80      	pop	{r7, pc}

1000bf86 <rpmsg_get_endpoint>:
}

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
1000bf86:	b580      	push	{r7, lr}
1000bf88:	b088      	sub	sp, #32
1000bf8a:	af00      	add	r7, sp, #0
1000bf8c:	60f8      	str	r0, [r7, #12]
1000bf8e:	60b9      	str	r1, [r7, #8]
1000bf90:	607a      	str	r2, [r7, #4]
1000bf92:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
1000bf94:	68fb      	ldr	r3, [r7, #12]
1000bf96:	681b      	ldr	r3, [r3, #0]
1000bf98:	61fb      	str	r3, [r7, #28]
1000bf9a:	e04b      	b.n	1000c034 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
1000bf9c:	2300      	movs	r3, #0
1000bf9e:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
1000bfa0:	69fb      	ldr	r3, [r7, #28]
1000bfa2:	3b34      	subs	r3, #52	; 0x34
1000bfa4:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
1000bfa6:	687b      	ldr	r3, [r7, #4]
1000bfa8:	f1b3 3fff 	cmp.w	r3, #4294967295
1000bfac:	d006      	beq.n	1000bfbc <rpmsg_get_endpoint+0x36>
1000bfae:	697b      	ldr	r3, [r7, #20]
1000bfb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000bfb2:	687a      	ldr	r2, [r7, #4]
1000bfb4:	429a      	cmp	r2, r3
1000bfb6:	d101      	bne.n	1000bfbc <rpmsg_get_endpoint+0x36>
			return ept;
1000bfb8:	697b      	ldr	r3, [r7, #20]
1000bfba:	e040      	b.n	1000c03e <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
1000bfbc:	697b      	ldr	r3, [r7, #20]
1000bfbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000bfc0:	687a      	ldr	r2, [r7, #4]
1000bfc2:	429a      	cmp	r2, r3
1000bfc4:	d106      	bne.n	1000bfd4 <rpmsg_get_endpoint+0x4e>
1000bfc6:	697b      	ldr	r3, [r7, #20]
1000bfc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000bfca:	683a      	ldr	r2, [r7, #0]
1000bfcc:	429a      	cmp	r2, r3
1000bfce:	d101      	bne.n	1000bfd4 <rpmsg_get_endpoint+0x4e>
			return ept;
1000bfd0:	697b      	ldr	r3, [r7, #20]
1000bfd2:	e034      	b.n	1000c03e <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
1000bfd4:	68bb      	ldr	r3, [r7, #8]
1000bfd6:	2b00      	cmp	r3, #0
1000bfd8:	d00c      	beq.n	1000bff4 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
1000bfda:	697b      	ldr	r3, [r7, #20]
1000bfdc:	2220      	movs	r2, #32
1000bfde:	68b9      	ldr	r1, [r7, #8]
1000bfe0:	4618      	mov	r0, r3
1000bfe2:	f004 fd96 	bl	10010b12 <strncmp>
1000bfe6:	4603      	mov	r3, r0
1000bfe8:	2b00      	cmp	r3, #0
1000bfea:	bf0c      	ite	eq
1000bfec:	2301      	moveq	r3, #1
1000bfee:	2300      	movne	r3, #0
1000bff0:	b2db      	uxtb	r3, r3
1000bff2:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
1000bff4:	68bb      	ldr	r3, [r7, #8]
1000bff6:	2b00      	cmp	r3, #0
1000bff8:	d018      	beq.n	1000c02c <rpmsg_get_endpoint+0xa6>
1000bffa:	69bb      	ldr	r3, [r7, #24]
1000bffc:	2b00      	cmp	r3, #0
1000bffe:	d015      	beq.n	1000c02c <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address */
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
1000c000:	683b      	ldr	r3, [r7, #0]
1000c002:	f1b3 3fff 	cmp.w	r3, #4294967295
1000c006:	d006      	beq.n	1000c016 <rpmsg_get_endpoint+0x90>
1000c008:	697b      	ldr	r3, [r7, #20]
1000c00a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000c00c:	683a      	ldr	r2, [r7, #0]
1000c00e:	429a      	cmp	r2, r3
1000c010:	d101      	bne.n	1000c016 <rpmsg_get_endpoint+0x90>
			return ept;
1000c012:	697b      	ldr	r3, [r7, #20]
1000c014:	e013      	b.n	1000c03e <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept */
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
1000c016:	687b      	ldr	r3, [r7, #4]
1000c018:	f1b3 3fff 	cmp.w	r3, #4294967295
1000c01c:	d107      	bne.n	1000c02e <rpmsg_get_endpoint+0xa8>
1000c01e:	697b      	ldr	r3, [r7, #20]
1000c020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000c022:	f1b3 3fff 	cmp.w	r3, #4294967295
1000c026:	d102      	bne.n	1000c02e <rpmsg_get_endpoint+0xa8>
			return ept;
1000c028:	697b      	ldr	r3, [r7, #20]
1000c02a:	e008      	b.n	1000c03e <rpmsg_get_endpoint+0xb8>
			continue;
1000c02c:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
1000c02e:	69fb      	ldr	r3, [r7, #28]
1000c030:	681b      	ldr	r3, [r3, #0]
1000c032:	61fb      	str	r3, [r7, #28]
1000c034:	68fb      	ldr	r3, [r7, #12]
1000c036:	69fa      	ldr	r2, [r7, #28]
1000c038:	429a      	cmp	r2, r3
1000c03a:	d1af      	bne.n	1000bf9c <rpmsg_get_endpoint+0x16>
	}
	return NULL;
1000c03c:	2300      	movs	r3, #0
}
1000c03e:	4618      	mov	r0, r3
1000c040:	3720      	adds	r7, #32
1000c042:	46bd      	mov	sp, r7
1000c044:	bd80      	pop	{r7, pc}

1000c046 <rpmsg_register_endpoint>:
	metal_mutex_release(&rdev->lock);
}

void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept)
{
1000c046:	b580      	push	{r7, lr}
1000c048:	b082      	sub	sp, #8
1000c04a:	af00      	add	r7, sp, #0
1000c04c:	6078      	str	r0, [r7, #4]
1000c04e:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
1000c050:	683b      	ldr	r3, [r7, #0]
1000c052:	687a      	ldr	r2, [r7, #4]
1000c054:	621a      	str	r2, [r3, #32]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
1000c056:	687a      	ldr	r2, [r7, #4]
1000c058:	683b      	ldr	r3, [r7, #0]
1000c05a:	3334      	adds	r3, #52	; 0x34
1000c05c:	4619      	mov	r1, r3
1000c05e:	4610      	mov	r0, r2
1000c060:	f7ff ff84 	bl	1000bf6c <metal_list_add_tail>
}
1000c064:	bf00      	nop
1000c066:	3708      	adds	r7, #8
1000c068:	46bd      	mov	sp, r7
1000c06a:	bd80      	pop	{r7, pc}

1000c06c <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
1000c06c:	b480      	push	{r7}
1000c06e:	b083      	sub	sp, #12
1000c070:	af00      	add	r7, sp, #0
1000c072:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
1000c074:	2300      	movs	r3, #0
}
1000c076:	4618      	mov	r0, r3
1000c078:	370c      	adds	r7, #12
1000c07a:	46bd      	mov	sp, r7
1000c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c080:	4770      	bx	lr

1000c082 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
1000c082:	b580      	push	{r7, lr}
1000c084:	b082      	sub	sp, #8
1000c086:	af00      	add	r7, sp, #0
1000c088:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
1000c08a:	6878      	ldr	r0, [r7, #4]
1000c08c:	f7ff ffee 	bl	1000c06c <__metal_sleep_usec>
1000c090:	4603      	mov	r3, r0
}
1000c092:	4618      	mov	r0, r3
1000c094:	3708      	adds	r7, #8
1000c096:	46bd      	mov	sp, r7
1000c098:	bd80      	pop	{r7, pc}

1000c09a <metal_list_init>:
{
1000c09a:	b480      	push	{r7}
1000c09c:	b083      	sub	sp, #12
1000c09e:	af00      	add	r7, sp, #0
1000c0a0:	6078      	str	r0, [r7, #4]
	list->prev = list;
1000c0a2:	687b      	ldr	r3, [r7, #4]
1000c0a4:	687a      	ldr	r2, [r7, #4]
1000c0a6:	605a      	str	r2, [r3, #4]
	list->next = list;
1000c0a8:	687b      	ldr	r3, [r7, #4]
1000c0aa:	687a      	ldr	r2, [r7, #4]
1000c0ac:	601a      	str	r2, [r3, #0]
}
1000c0ae:	bf00      	nop
1000c0b0:	370c      	adds	r7, #12
1000c0b2:	46bd      	mov	sp, r7
1000c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c0b8:	4770      	bx	lr

1000c0ba <metal_io_virt_to_offset>:
{
1000c0ba:	b480      	push	{r7}
1000c0bc:	b085      	sub	sp, #20
1000c0be:	af00      	add	r7, sp, #0
1000c0c0:	6078      	str	r0, [r7, #4]
1000c0c2:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
1000c0c4:	683b      	ldr	r3, [r7, #0]
1000c0c6:	687a      	ldr	r2, [r7, #4]
1000c0c8:	6812      	ldr	r2, [r2, #0]
1000c0ca:	1a9b      	subs	r3, r3, r2
1000c0cc:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
1000c0ce:	687b      	ldr	r3, [r7, #4]
1000c0d0:	689b      	ldr	r3, [r3, #8]
1000c0d2:	68fa      	ldr	r2, [r7, #12]
1000c0d4:	429a      	cmp	r2, r3
1000c0d6:	d201      	bcs.n	1000c0dc <metal_io_virt_to_offset+0x22>
1000c0d8:	68fb      	ldr	r3, [r7, #12]
1000c0da:	e001      	b.n	1000c0e0 <metal_io_virt_to_offset+0x26>
1000c0dc:	f04f 33ff 	mov.w	r3, #4294967295
}
1000c0e0:	4618      	mov	r0, r3
1000c0e2:	3714      	adds	r7, #20
1000c0e4:	46bd      	mov	sp, r7
1000c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c0ea:	4770      	bx	lr

1000c0ec <__metal_mutex_init>:
 * static singleton mutex
 */
#define METAL_MUTEX_DEFINE(m) metal_mutex_t m = METAL_MUTEX_INIT(m)

static inline void __metal_mutex_init(metal_mutex_t *mutex)
{
1000c0ec:	b480      	push	{r7}
1000c0ee:	b085      	sub	sp, #20
1000c0f0:	af00      	add	r7, sp, #0
1000c0f2:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
1000c0f4:	687b      	ldr	r3, [r7, #4]
1000c0f6:	60fb      	str	r3, [r7, #12]
1000c0f8:	2300      	movs	r3, #0
1000c0fa:	60bb      	str	r3, [r7, #8]
1000c0fc:	68bb      	ldr	r3, [r7, #8]
1000c0fe:	461a      	mov	r2, r3
1000c100:	68fb      	ldr	r3, [r7, #12]
1000c102:	f3bf 8f5b 	dmb	ish
1000c106:	601a      	str	r2, [r3, #0]
1000c108:	f3bf 8f5b 	dmb	ish
}
1000c10c:	bf00      	nop
1000c10e:	3714      	adds	r7, #20
1000c110:	46bd      	mov	sp, r7
1000c112:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c116:	4770      	bx	lr

1000c118 <__metal_mutex_acquire>:
		return 0; /* not acquired */
	}
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
1000c118:	b490      	push	{r4, r7}
1000c11a:	b086      	sub	sp, #24
1000c11c:	af00      	add	r7, sp, #0
1000c11e:	6078      	str	r0, [r7, #4]
	int unlocked = METAL_MUTEX_UNLOCKED;
1000c120:	2300      	movs	r3, #0
1000c122:	613b      	str	r3, [r7, #16]

	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
1000c124:	bf00      	nop
1000c126:	687b      	ldr	r3, [r7, #4]
1000c128:	617b      	str	r3, [r7, #20]
1000c12a:	2301      	movs	r3, #1
1000c12c:	60fb      	str	r3, [r7, #12]
1000c12e:	68fb      	ldr	r3, [r7, #12]
1000c130:	461c      	mov	r4, r3
1000c132:	697a      	ldr	r2, [r7, #20]
1000c134:	f107 0310 	add.w	r3, r7, #16
1000c138:	6818      	ldr	r0, [r3, #0]
1000c13a:	f3bf 8f5b 	dmb	ish
1000c13e:	e852 1f00 	ldrex	r1, [r2]
1000c142:	4281      	cmp	r1, r0
1000c144:	d103      	bne.n	1000c14e <__metal_mutex_acquire+0x36>
1000c146:	e842 4c00 	strex	ip, r4, [r2]
1000c14a:	f1bc 0f00 	cmp.w	ip, #0
1000c14e:	f3bf 8f5b 	dmb	ish
1000c152:	bf0c      	ite	eq
1000c154:	2201      	moveq	r2, #1
1000c156:	2200      	movne	r2, #0
1000c158:	2a00      	cmp	r2, #0
1000c15a:	d100      	bne.n	1000c15e <__metal_mutex_acquire+0x46>
1000c15c:	6019      	str	r1, [r3, #0]
1000c15e:	4613      	mov	r3, r2
1000c160:	f083 0301 	eor.w	r3, r3, #1
1000c164:	b2db      	uxtb	r3, r3
1000c166:	2b00      	cmp	r3, #0
1000c168:	d1dd      	bne.n	1000c126 <__metal_mutex_acquire+0xe>
					     METAL_MUTEX_LOCKED)) {
		;
	}
}
1000c16a:	bf00      	nop
1000c16c:	bf00      	nop
1000c16e:	3718      	adds	r7, #24
1000c170:	46bd      	mov	sp, r7
1000c172:	bc90      	pop	{r4, r7}
1000c174:	4770      	bx	lr

1000c176 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
1000c176:	b480      	push	{r7}
1000c178:	b085      	sub	sp, #20
1000c17a:	af00      	add	r7, sp, #0
1000c17c:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
1000c17e:	687b      	ldr	r3, [r7, #4]
1000c180:	60fb      	str	r3, [r7, #12]
1000c182:	2300      	movs	r3, #0
1000c184:	60bb      	str	r3, [r7, #8]
1000c186:	68bb      	ldr	r3, [r7, #8]
1000c188:	461a      	mov	r2, r3
1000c18a:	68fb      	ldr	r3, [r7, #12]
1000c18c:	f3bf 8f5b 	dmb	ish
1000c190:	601a      	str	r2, [r3, #0]
1000c192:	f3bf 8f5b 	dmb	ish
}
1000c196:	bf00      	nop
1000c198:	3714      	adds	r7, #20
1000c19a:	46bd      	mov	sp, r7
1000c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c1a0:	4770      	bx	lr

1000c1a2 <metal_mutex_init>:
/**
 * @brief	Initialize a libmetal mutex.
 * @param[in]	mutex	Mutex to initialize.
 */
static inline void metal_mutex_init(metal_mutex_t *mutex)
{
1000c1a2:	b580      	push	{r7, lr}
1000c1a4:	b082      	sub	sp, #8
1000c1a6:	af00      	add	r7, sp, #0
1000c1a8:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
1000c1aa:	6878      	ldr	r0, [r7, #4]
1000c1ac:	f7ff ff9e 	bl	1000c0ec <__metal_mutex_init>
}
1000c1b0:	bf00      	nop
1000c1b2:	3708      	adds	r7, #8
1000c1b4:	46bd      	mov	sp, r7
1000c1b6:	bd80      	pop	{r7, pc}

1000c1b8 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
1000c1b8:	b580      	push	{r7, lr}
1000c1ba:	b082      	sub	sp, #8
1000c1bc:	af00      	add	r7, sp, #0
1000c1be:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
1000c1c0:	6878      	ldr	r0, [r7, #4]
1000c1c2:	f7ff ffa9 	bl	1000c118 <__metal_mutex_acquire>
}
1000c1c6:	bf00      	nop
1000c1c8:	3708      	adds	r7, #8
1000c1ca:	46bd      	mov	sp, r7
1000c1cc:	bd80      	pop	{r7, pc}

1000c1ce <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
1000c1ce:	b580      	push	{r7, lr}
1000c1d0:	b082      	sub	sp, #8
1000c1d2:	af00      	add	r7, sp, #0
1000c1d4:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
1000c1d6:	6878      	ldr	r0, [r7, #4]
1000c1d8:	f7ff ffcd 	bl	1000c176 <__metal_mutex_release>
}
1000c1dc:	bf00      	nop
1000c1de:	3708      	adds	r7, #8
1000c1e0:	46bd      	mov	sp, r7
1000c1e2:	bd80      	pop	{r7, pc}

1000c1e4 <rpmsg_virtio_get_role>:
#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
1000c1e4:	b480      	push	{r7}
1000c1e6:	b083      	sub	sp, #12
1000c1e8:	af00      	add	r7, sp, #0
1000c1ea:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
1000c1ec:	687b      	ldr	r3, [r7, #4]
1000c1ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000c1f0:	699b      	ldr	r3, [r3, #24]
}
1000c1f2:	4618      	mov	r0, r3
1000c1f4:	370c      	adds	r7, #12
1000c1f6:	46bd      	mov	sp, r7
1000c1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c1fc:	4770      	bx	lr

1000c1fe <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
1000c1fe:	b580      	push	{r7, lr}
1000c200:	b082      	sub	sp, #8
1000c202:	af00      	add	r7, sp, #0
1000c204:	6078      	str	r0, [r7, #4]
1000c206:	460b      	mov	r3, r1
1000c208:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
1000c20a:	687b      	ldr	r3, [r7, #4]
1000c20c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000c20e:	6a1b      	ldr	r3, [r3, #32]
1000c210:	685b      	ldr	r3, [r3, #4]
1000c212:	687a      	ldr	r2, [r7, #4]
1000c214:	6f92      	ldr	r2, [r2, #120]	; 0x78
1000c216:	78f9      	ldrb	r1, [r7, #3]
1000c218:	4610      	mov	r0, r2
1000c21a:	4798      	blx	r3
}
1000c21c:	bf00      	nop
1000c21e:	3708      	adds	r7, #8
1000c220:	46bd      	mov	sp, r7
1000c222:	bd80      	pop	{r7, pc}

1000c224 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
1000c224:	b580      	push	{r7, lr}
1000c226:	b082      	sub	sp, #8
1000c228:	af00      	add	r7, sp, #0
1000c22a:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
1000c22c:	687b      	ldr	r3, [r7, #4]
1000c22e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000c230:	6a1b      	ldr	r3, [r3, #32]
1000c232:	681b      	ldr	r3, [r3, #0]
1000c234:	687a      	ldr	r2, [r7, #4]
1000c236:	6f92      	ldr	r2, [r2, #120]	; 0x78
1000c238:	4610      	mov	r0, r2
1000c23a:	4798      	blx	r3
1000c23c:	4603      	mov	r3, r0
}
1000c23e:	4618      	mov	r0, r3
1000c240:	3708      	adds	r7, #8
1000c242:	46bd      	mov	sp, r7
1000c244:	bd80      	pop	{r7, pc}

1000c246 <rpmsg_virtio_get_features>:

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
1000c246:	b580      	push	{r7, lr}
1000c248:	b082      	sub	sp, #8
1000c24a:	af00      	add	r7, sp, #0
1000c24c:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
1000c24e:	687b      	ldr	r3, [r7, #4]
1000c250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000c252:	6a1b      	ldr	r3, [r3, #32]
1000c254:	689b      	ldr	r3, [r3, #8]
1000c256:	687a      	ldr	r2, [r7, #4]
1000c258:	6f92      	ldr	r2, [r2, #120]	; 0x78
1000c25a:	4610      	mov	r0, r2
1000c25c:	4798      	blx	r3
1000c25e:	4603      	mov	r3, r0
}
1000c260:	4618      	mov	r0, r3
1000c262:	3708      	adds	r7, #8
1000c264:	46bd      	mov	sp, r7
1000c266:	bd80      	pop	{r7, pc}

1000c268 <rpmsg_virtio_create_virtqueues>:
static inline int
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
1000c268:	b580      	push	{r7, lr}
1000c26a:	b086      	sub	sp, #24
1000c26c:	af02      	add	r7, sp, #8
1000c26e:	60f8      	str	r0, [r7, #12]
1000c270:	60b9      	str	r1, [r7, #8]
1000c272:	607a      	str	r2, [r7, #4]
1000c274:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
1000c276:	68fb      	ldr	r3, [r7, #12]
1000c278:	6f98      	ldr	r0, [r3, #120]	; 0x78
1000c27a:	68b9      	ldr	r1, [r7, #8]
1000c27c:	69bb      	ldr	r3, [r7, #24]
1000c27e:	9300      	str	r3, [sp, #0]
1000c280:	683b      	ldr	r3, [r7, #0]
1000c282:	687a      	ldr	r2, [r7, #4]
1000c284:	f000 fc2c 	bl	1000cae0 <virtio_create_virtqueues>
1000c288:	4603      	mov	r3, r0
					callbacks);
}
1000c28a:	4618      	mov	r0, r3
1000c28c:	3710      	adds	r7, #16
1000c28e:	46bd      	mov	sp, r7
1000c290:	bd80      	pop	{r7, pc}
	...

1000c294 <rpmsg_initialize_ept>:
static inline void rpmsg_initialize_ept(struct rpmsg_endpoint *ept,
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
1000c294:	b580      	push	{r7, lr}
1000c296:	b084      	sub	sp, #16
1000c298:	af00      	add	r7, sp, #0
1000c29a:	60f8      	str	r0, [r7, #12]
1000c29c:	60b9      	str	r1, [r7, #8]
1000c29e:	607a      	str	r2, [r7, #4]
1000c2a0:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
1000c2a2:	68f8      	ldr	r0, [r7, #12]
1000c2a4:	68bb      	ldr	r3, [r7, #8]
1000c2a6:	2b00      	cmp	r3, #0
1000c2a8:	d001      	beq.n	1000c2ae <rpmsg_initialize_ept+0x1a>
1000c2aa:	68bb      	ldr	r3, [r7, #8]
1000c2ac:	e000      	b.n	1000c2b0 <rpmsg_initialize_ept+0x1c>
1000c2ae:	4b0a      	ldr	r3, [pc, #40]	; (1000c2d8 <rpmsg_initialize_ept+0x44>)
1000c2b0:	2220      	movs	r2, #32
1000c2b2:	4619      	mov	r1, r3
1000c2b4:	f004 fc3f 	bl	10010b36 <strncpy>
	ept->addr = src;
1000c2b8:	68fb      	ldr	r3, [r7, #12]
1000c2ba:	687a      	ldr	r2, [r7, #4]
1000c2bc:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
1000c2be:	68fb      	ldr	r3, [r7, #12]
1000c2c0:	683a      	ldr	r2, [r7, #0]
1000c2c2:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
1000c2c4:	68fb      	ldr	r3, [r7, #12]
1000c2c6:	69ba      	ldr	r2, [r7, #24]
1000c2c8:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
1000c2ca:	68fb      	ldr	r3, [r7, #12]
1000c2cc:	69fa      	ldr	r2, [r7, #28]
1000c2ce:	631a      	str	r2, [r3, #48]	; 0x30
}
1000c2d0:	bf00      	nop
1000c2d2:	3710      	adds	r7, #16
1000c2d4:	46bd      	mov	sp, r7
1000c2d6:	bd80      	pop	{r7, pc}
1000c2d8:	10013154 	.word	0x10013154

1000c2dc <rpmsg_get_ept_from_addr>:
void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
1000c2dc:	b580      	push	{r7, lr}
1000c2de:	b082      	sub	sp, #8
1000c2e0:	af00      	add	r7, sp, #0
1000c2e2:	6078      	str	r0, [r7, #4]
1000c2e4:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
1000c2e6:	f04f 33ff 	mov.w	r3, #4294967295
1000c2ea:	683a      	ldr	r2, [r7, #0]
1000c2ec:	2100      	movs	r1, #0
1000c2ee:	6878      	ldr	r0, [r7, #4]
1000c2f0:	f7ff fe49 	bl	1000bf86 <rpmsg_get_endpoint>
1000c2f4:	4603      	mov	r3, r0
}
1000c2f6:	4618      	mov	r0, r3
1000c2f8:	3708      	adds	r7, #8
1000c2fa:	46bd      	mov	sp, r7
1000c2fc:	bd80      	pop	{r7, pc}

1000c2fe <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
1000c2fe:	b480      	push	{r7}
1000c300:	b085      	sub	sp, #20
1000c302:	af00      	add	r7, sp, #0
1000c304:	60f8      	str	r0, [r7, #12]
1000c306:	60b9      	str	r1, [r7, #8]
1000c308:	607a      	str	r2, [r7, #4]
	if (!shpool)
1000c30a:	68fb      	ldr	r3, [r7, #12]
1000c30c:	2b00      	cmp	r3, #0
1000c30e:	d009      	beq.n	1000c324 <rpmsg_virtio_init_shm_pool+0x26>
		return;
	shpool->base = shb;
1000c310:	68fb      	ldr	r3, [r7, #12]
1000c312:	68ba      	ldr	r2, [r7, #8]
1000c314:	601a      	str	r2, [r3, #0]
	shpool->size = size;
1000c316:	68fb      	ldr	r3, [r7, #12]
1000c318:	687a      	ldr	r2, [r7, #4]
1000c31a:	609a      	str	r2, [r3, #8]
	shpool->avail = size;
1000c31c:	68fb      	ldr	r3, [r7, #12]
1000c31e:	687a      	ldr	r2, [r7, #4]
1000c320:	605a      	str	r2, [r3, #4]
1000c322:	e000      	b.n	1000c326 <rpmsg_virtio_init_shm_pool+0x28>
		return;
1000c324:	bf00      	nop
}
1000c326:	3714      	adds	r7, #20
1000c328:	46bd      	mov	sp, r7
1000c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c32e:	4770      	bx	lr

1000c330 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
1000c330:	b580      	push	{r7, lr}
1000c332:	b086      	sub	sp, #24
1000c334:	af00      	add	r7, sp, #0
1000c336:	60f8      	str	r0, [r7, #12]
1000c338:	60b9      	str	r1, [r7, #8]
1000c33a:	607a      	str	r2, [r7, #4]
1000c33c:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000c33e:	68f8      	ldr	r0, [r7, #12]
1000c340:	f7ff ff50 	bl	1000c1e4 <rpmsg_virtio_get_role>
1000c344:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000c346:	697b      	ldr	r3, [r7, #20]
1000c348:	2b01      	cmp	r3, #1
1000c34a:	d106      	bne.n	1000c35a <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
1000c34c:	68fb      	ldr	r3, [r7, #12]
1000c34e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1000c350:	8879      	ldrh	r1, [r7, #2]
1000c352:	687a      	ldr	r2, [r7, #4]
1000c354:	4618      	mov	r0, r3
1000c356:	f000 fd95 	bl	1000ce84 <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
1000c35a:	bf00      	nop
1000c35c:	3718      	adds	r7, #24
1000c35e:	46bd      	mov	sp, r7
1000c360:	bd80      	pop	{r7, pc}

1000c362 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
1000c362:	b580      	push	{r7, lr}
1000c364:	b086      	sub	sp, #24
1000c366:	af00      	add	r7, sp, #0
1000c368:	60f8      	str	r0, [r7, #12]
1000c36a:	60b9      	str	r1, [r7, #8]
1000c36c:	607a      	str	r2, [r7, #4]
1000c36e:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000c370:	68f8      	ldr	r0, [r7, #12]
1000c372:	f7ff ff37 	bl	1000c1e4 <rpmsg_virtio_get_role>
1000c376:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000c378:	697b      	ldr	r3, [r7, #20]
1000c37a:	2b01      	cmp	r3, #1
1000c37c:	d109      	bne.n	1000c392 <rpmsg_virtio_enqueue_buffer+0x30>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
1000c37e:	68fb      	ldr	r3, [r7, #12]
1000c380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000c384:	8879      	ldrh	r1, [r7, #2]
1000c386:	687a      	ldr	r2, [r7, #4]
1000c388:	4618      	mov	r0, r3
1000c38a:	f000 fd7b 	bl	1000ce84 <virtqueue_add_consumed_buffer>
1000c38e:	4603      	mov	r3, r0
1000c390:	e000      	b.n	1000c394 <rpmsg_virtio_enqueue_buffer+0x32>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
1000c392:	2300      	movs	r3, #0
}
1000c394:	4618      	mov	r0, r3
1000c396:	3718      	adds	r7, #24
1000c398:	46bd      	mov	sp, r7
1000c39a:	bd80      	pop	{r7, pc}

1000c39c <rpmsg_virtio_get_tx_buffer>:
 *
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
1000c39c:	b580      	push	{r7, lr}
1000c39e:	b086      	sub	sp, #24
1000c3a0:	af00      	add	r7, sp, #0
1000c3a2:	60f8      	str	r0, [r7, #12]
1000c3a4:	60b9      	str	r1, [r7, #8]
1000c3a6:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000c3a8:	68f8      	ldr	r0, [r7, #12]
1000c3aa:	f7ff ff1b 	bl	1000c1e4 <rpmsg_virtio_get_role>
1000c3ae:	6138      	str	r0, [r7, #16]
	void *data = NULL;
1000c3b0:	2300      	movs	r3, #0
1000c3b2:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000c3b4:	693b      	ldr	r3, [r7, #16]
1000c3b6:	2b01      	cmp	r3, #1
1000c3b8:	d108      	bne.n	1000c3cc <rpmsg_virtio_get_tx_buffer+0x30>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
1000c3ba:	68fb      	ldr	r3, [r7, #12]
1000c3bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000c3c0:	68ba      	ldr	r2, [r7, #8]
1000c3c2:	6879      	ldr	r1, [r7, #4]
1000c3c4:	4618      	mov	r0, r3
1000c3c6:	f000 fd15 	bl	1000cdf4 <virtqueue_get_available_buffer>
1000c3ca:	6178      	str	r0, [r7, #20]
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
1000c3cc:	697b      	ldr	r3, [r7, #20]
}
1000c3ce:	4618      	mov	r0, r3
1000c3d0:	3718      	adds	r7, #24
1000c3d2:	46bd      	mov	sp, r7
1000c3d4:	bd80      	pop	{r7, pc}

1000c3d6 <rpmsg_virtio_get_rx_buffer>:
 * @return - pointer to received buffer
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
1000c3d6:	b580      	push	{r7, lr}
1000c3d8:	b086      	sub	sp, #24
1000c3da:	af00      	add	r7, sp, #0
1000c3dc:	60f8      	str	r0, [r7, #12]
1000c3de:	60b9      	str	r1, [r7, #8]
1000c3e0:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000c3e2:	68f8      	ldr	r0, [r7, #12]
1000c3e4:	f7ff fefe 	bl	1000c1e4 <rpmsg_virtio_get_role>
1000c3e8:	6138      	str	r0, [r7, #16]
	void *data = NULL;
1000c3ea:	2300      	movs	r3, #0
1000c3ec:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000c3ee:	693b      	ldr	r3, [r7, #16]
1000c3f0:	2b01      	cmp	r3, #1
1000c3f2:	d107      	bne.n	1000c404 <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
1000c3f4:	68fb      	ldr	r3, [r7, #12]
1000c3f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1000c3f8:	68ba      	ldr	r2, [r7, #8]
1000c3fa:	6879      	ldr	r1, [r7, #4]
1000c3fc:	4618      	mov	r0, r3
1000c3fe:	f000 fcf9 	bl	1000cdf4 <virtqueue_get_available_buffer>
1000c402:	6178      	str	r0, [r7, #20]
#ifdef VIRTIO_CACHED_BUFFERS
	/* Invalidate the buffer before returning it */
	metal_cache_invalidate(data, *len);
#endif /* VIRTIO_CACHED_BUFFERS */

	return data;
1000c404:	697b      	ldr	r3, [r7, #20]
}
1000c406:	4618      	mov	r0, r3
1000c408:	3718      	adds	r7, #24
1000c40a:	46bd      	mov	sp, r7
1000c40c:	bd80      	pop	{r7, pc}

1000c40e <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
1000c40e:	b580      	push	{r7, lr}
1000c410:	b084      	sub	sp, #16
1000c412:	af00      	add	r7, sp, #0
1000c414:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
1000c416:	6878      	ldr	r0, [r7, #4]
1000c418:	f7ff ff04 	bl	1000c224 <rpmsg_virtio_get_status>
1000c41c:	4603      	mov	r3, r0
1000c41e:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
1000c420:	7bfb      	ldrb	r3, [r7, #15]
1000c422:	f003 0340 	and.w	r3, r3, #64	; 0x40
1000c426:	2b00      	cmp	r3, #0
1000c428:	d004      	beq.n	1000c434 <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
1000c42a:	2100      	movs	r1, #0
1000c42c:	6878      	ldr	r0, [r7, #4]
1000c42e:	f7ff fee6 	bl	1000c1fe <rpmsg_virtio_set_status>
1000c432:	e7f0      	b.n	1000c416 <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
1000c434:	7bfb      	ldrb	r3, [r7, #15]
1000c436:	f003 0304 	and.w	r3, r3, #4
1000c43a:	2b00      	cmp	r3, #0
1000c43c:	d0eb      	beq.n	1000c416 <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
1000c43e:	2301      	movs	r3, #1
		}
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}
}
1000c440:	4618      	mov	r0, r3
1000c442:	3710      	adds	r7, #16
1000c444:	46bd      	mov	sp, r7
1000c446:	bd80      	pop	{r7, pc}

1000c448 <rpmsg_virtio_hold_rx_buffer>:

	return length;
}

static void rpmsg_virtio_hold_rx_buffer(struct rpmsg_device *rdev, void *rxbuf)
{
1000c448:	b480      	push	{r7}
1000c44a:	b085      	sub	sp, #20
1000c44c:	af00      	add	r7, sp, #0
1000c44e:	6078      	str	r0, [r7, #4]
1000c450:	6039      	str	r1, [r7, #0]
	struct rpmsg_hdr *rp_hdr;

	(void)rdev;

	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
1000c452:	683b      	ldr	r3, [r7, #0]
1000c454:	3b10      	subs	r3, #16
1000c456:	60fb      	str	r3, [r7, #12]

	/* Set held status to keep buffer */
	rp_hdr->reserved |= RPMSG_BUF_HELD;
1000c458:	68fb      	ldr	r3, [r7, #12]
1000c45a:	689b      	ldr	r3, [r3, #8]
1000c45c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
1000c460:	68fb      	ldr	r3, [r7, #12]
1000c462:	609a      	str	r2, [r3, #8]
}
1000c464:	bf00      	nop
1000c466:	3714      	adds	r7, #20
1000c468:	46bd      	mov	sp, r7
1000c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c46e:	4770      	bx	lr

1000c470 <rpmsg_virtio_release_rx_buffer>:

static void rpmsg_virtio_release_rx_buffer(struct rpmsg_device *rdev,
					   void *rxbuf)
{
1000c470:	b580      	push	{r7, lr}
1000c472:	b086      	sub	sp, #24
1000c474:	af00      	add	r7, sp, #0
1000c476:	6078      	str	r0, [r7, #4]
1000c478:	6039      	str	r1, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr *rp_hdr;
	uint16_t idx;
	uint32_t len;

	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000c47a:	687b      	ldr	r3, [r7, #4]
1000c47c:	617b      	str	r3, [r7, #20]
	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
1000c47e:	683b      	ldr	r3, [r7, #0]
1000c480:	3b10      	subs	r3, #16
1000c482:	613b      	str	r3, [r7, #16]
	/* The reserved field contains buffer index */
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
1000c484:	693b      	ldr	r3, [r7, #16]
1000c486:	689b      	ldr	r3, [r3, #8]
1000c488:	81fb      	strh	r3, [r7, #14]

	metal_mutex_acquire(&rdev->lock);
1000c48a:	687b      	ldr	r3, [r7, #4]
1000c48c:	3358      	adds	r3, #88	; 0x58
1000c48e:	4618      	mov	r0, r3
1000c490:	f7ff fe92 	bl	1000c1b8 <metal_mutex_acquire>
	/* Return buffer on virtqueue. */
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
1000c494:	697b      	ldr	r3, [r7, #20]
1000c496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1000c498:	89fa      	ldrh	r2, [r7, #14]
1000c49a:	4611      	mov	r1, r2
1000c49c:	4618      	mov	r0, r3
1000c49e:	f000 fc97 	bl	1000cdd0 <virtqueue_get_buffer_length>
1000c4a2:	60b8      	str	r0, [r7, #8]
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
1000c4a4:	89fb      	ldrh	r3, [r7, #14]
1000c4a6:	68ba      	ldr	r2, [r7, #8]
1000c4a8:	6939      	ldr	r1, [r7, #16]
1000c4aa:	6978      	ldr	r0, [r7, #20]
1000c4ac:	f7ff ff40 	bl	1000c330 <rpmsg_virtio_return_buffer>
	metal_mutex_release(&rdev->lock);
1000c4b0:	687b      	ldr	r3, [r7, #4]
1000c4b2:	3358      	adds	r3, #88	; 0x58
1000c4b4:	4618      	mov	r0, r3
1000c4b6:	f7ff fe8a 	bl	1000c1ce <metal_mutex_release>
}
1000c4ba:	bf00      	nop
1000c4bc:	3718      	adds	r7, #24
1000c4be:	46bd      	mov	sp, r7
1000c4c0:	bd80      	pop	{r7, pc}

1000c4c2 <rpmsg_virtio_get_tx_payload_buffer>:

static void *rpmsg_virtio_get_tx_payload_buffer(struct rpmsg_device *rdev,
						uint32_t *len, int wait)
{
1000c4c2:	b580      	push	{r7, lr}
1000c4c4:	b08a      	sub	sp, #40	; 0x28
1000c4c6:	af00      	add	r7, sp, #0
1000c4c8:	60f8      	str	r0, [r7, #12]
1000c4ca:	60b9      	str	r1, [r7, #8]
1000c4cc:	607a      	str	r2, [r7, #4]
	uint16_t idx;
	int tick_count;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000c4ce:	68fb      	ldr	r3, [r7, #12]
1000c4d0:	623b      	str	r3, [r7, #32]

	/* Validate device state */
	status = rpmsg_virtio_get_status(rvdev);
1000c4d2:	6a38      	ldr	r0, [r7, #32]
1000c4d4:	f7ff fea6 	bl	1000c224 <rpmsg_virtio_get_status>
1000c4d8:	4603      	mov	r3, r0
1000c4da:	61fb      	str	r3, [r7, #28]
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
1000c4dc:	69fb      	ldr	r3, [r7, #28]
1000c4de:	f003 0304 	and.w	r3, r3, #4
1000c4e2:	2b00      	cmp	r3, #0
1000c4e4:	d101      	bne.n	1000c4ea <rpmsg_virtio_get_tx_payload_buffer+0x28>
		return NULL;
1000c4e6:	2300      	movs	r3, #0
1000c4e8:	e039      	b.n	1000c55e <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	if (wait)
1000c4ea:	687b      	ldr	r3, [r7, #4]
1000c4ec:	2b00      	cmp	r3, #0
1000c4ee:	d003      	beq.n	1000c4f8 <rpmsg_virtio_get_tx_payload_buffer+0x36>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
1000c4f0:	f643 2398 	movw	r3, #15000	; 0x3a98
1000c4f4:	627b      	str	r3, [r7, #36]	; 0x24
1000c4f6:	e001      	b.n	1000c4fc <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	else
		tick_count = 0;
1000c4f8:	2300      	movs	r3, #0
1000c4fa:	627b      	str	r3, [r7, #36]	; 0x24

	while (1) {
		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
1000c4fc:	68fb      	ldr	r3, [r7, #12]
1000c4fe:	3358      	adds	r3, #88	; 0x58
1000c500:	4618      	mov	r0, r3
1000c502:	f7ff fe59 	bl	1000c1b8 <metal_mutex_acquire>
		rp_hdr = rpmsg_virtio_get_tx_buffer(rvdev, len, &idx);
1000c506:	f107 0316 	add.w	r3, r7, #22
1000c50a:	461a      	mov	r2, r3
1000c50c:	68b9      	ldr	r1, [r7, #8]
1000c50e:	6a38      	ldr	r0, [r7, #32]
1000c510:	f7ff ff44 	bl	1000c39c <rpmsg_virtio_get_tx_buffer>
1000c514:	61b8      	str	r0, [r7, #24]
		metal_mutex_release(&rdev->lock);
1000c516:	68fb      	ldr	r3, [r7, #12]
1000c518:	3358      	adds	r3, #88	; 0x58
1000c51a:	4618      	mov	r0, r3
1000c51c:	f7ff fe57 	bl	1000c1ce <metal_mutex_release>
		if (rp_hdr || !tick_count)
1000c520:	69bb      	ldr	r3, [r7, #24]
1000c522:	2b00      	cmp	r3, #0
1000c524:	d10a      	bne.n	1000c53c <rpmsg_virtio_get_tx_payload_buffer+0x7a>
1000c526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c528:	2b00      	cmp	r3, #0
1000c52a:	d007      	beq.n	1000c53c <rpmsg_virtio_get_tx_payload_buffer+0x7a>
			break;
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
1000c52c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1000c530:	f7ff fda7 	bl	1000c082 <metal_sleep_usec>
		tick_count--;
1000c534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c536:	3b01      	subs	r3, #1
1000c538:	627b      	str	r3, [r7, #36]	; 0x24
		metal_mutex_acquire(&rdev->lock);
1000c53a:	e7df      	b.n	1000c4fc <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	}

	if (!rp_hdr)
1000c53c:	69bb      	ldr	r3, [r7, #24]
1000c53e:	2b00      	cmp	r3, #0
1000c540:	d101      	bne.n	1000c546 <rpmsg_virtio_get_tx_payload_buffer+0x84>
		return NULL;
1000c542:	2300      	movs	r3, #0
1000c544:	e00b      	b.n	1000c55e <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	/* Store the index into the reserved field to be used when sending */
	rp_hdr->reserved = idx;
1000c546:	8afb      	ldrh	r3, [r7, #22]
1000c548:	461a      	mov	r2, r3
1000c54a:	69bb      	ldr	r3, [r7, #24]
1000c54c:	609a      	str	r2, [r3, #8]

	/* Actual data buffer size is vring buffer size minus header length */
	*len -= sizeof(struct rpmsg_hdr);
1000c54e:	68bb      	ldr	r3, [r7, #8]
1000c550:	681b      	ldr	r3, [r3, #0]
1000c552:	f1a3 0210 	sub.w	r2, r3, #16
1000c556:	68bb      	ldr	r3, [r7, #8]
1000c558:	601a      	str	r2, [r3, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
1000c55a:	69bb      	ldr	r3, [r7, #24]
1000c55c:	3310      	adds	r3, #16
}
1000c55e:	4618      	mov	r0, r3
1000c560:	3728      	adds	r7, #40	; 0x28
1000c562:	46bd      	mov	sp, r7
1000c564:	bd80      	pop	{r7, pc}
	...

1000c568 <rpmsg_virtio_send_offchannel_nocopy>:

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
1000c568:	b580      	push	{r7, lr}
1000c56a:	b08e      	sub	sp, #56	; 0x38
1000c56c:	af00      	add	r7, sp, #0
1000c56e:	60f8      	str	r0, [r7, #12]
1000c570:	60b9      	str	r1, [r7, #8]
1000c572:	607a      	str	r2, [r7, #4]
1000c574:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	uint16_t idx;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000c576:	68fb      	ldr	r3, [r7, #12]
1000c578:	637b      	str	r3, [r7, #52]	; 0x34

	hdr = RPMSG_LOCATE_HDR(data);
1000c57a:	683b      	ldr	r3, [r7, #0]
1000c57c:	3b10      	subs	r3, #16
1000c57e:	633b      	str	r3, [r7, #48]	; 0x30
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
1000c580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c582:	689b      	ldr	r3, [r3, #8]
1000c584:	85fb      	strh	r3, [r7, #46]	; 0x2e

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
1000c586:	687b      	ldr	r3, [r7, #4]
1000c588:	617b      	str	r3, [r7, #20]
	rp_hdr.src = src;
1000c58a:	68bb      	ldr	r3, [r7, #8]
1000c58c:	613b      	str	r3, [r7, #16]
	rp_hdr.len = len;
1000c58e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000c590:	b29b      	uxth	r3, r3
1000c592:	83bb      	strh	r3, [r7, #28]
	rp_hdr.reserved = 0;
1000c594:	2300      	movs	r3, #0
1000c596:	61bb      	str	r3, [r7, #24]
	rp_hdr.flags = 0;
1000c598:	2300      	movs	r3, #0
1000c59a:	83fb      	strh	r3, [r7, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
1000c59c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000c59e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
1000c5a2:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
1000c5a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
1000c5a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1000c5a8:	f7ff fd87 	bl	1000c0ba <metal_io_virt_to_offset>
1000c5ac:	4601      	mov	r1, r0
1000c5ae:	f107 0210 	add.w	r2, r7, #16
1000c5b2:	2310      	movs	r3, #16
1000c5b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1000c5b6:	f7ff f98b 	bl	1000b8d0 <metal_io_block_write>
1000c5ba:	6278      	str	r0, [r7, #36]	; 0x24
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
1000c5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c5be:	2b10      	cmp	r3, #16
1000c5c0:	d006      	beq.n	1000c5d0 <rpmsg_virtio_send_offchannel_nocopy+0x68>
1000c5c2:	4b1b      	ldr	r3, [pc, #108]	; (1000c630 <rpmsg_virtio_send_offchannel_nocopy+0xc8>)
1000c5c4:	4a1b      	ldr	r2, [pc, #108]	; (1000c634 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
1000c5c6:	f240 117d 	movw	r1, #381	; 0x17d
1000c5ca:	481b      	ldr	r0, [pc, #108]	; (1000c638 <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
1000c5cc:	f003 fbf2 	bl	1000fdb4 <__assert_func>

	metal_mutex_acquire(&rdev->lock);
1000c5d0:	68fb      	ldr	r3, [r7, #12]
1000c5d2:	3358      	adds	r3, #88	; 0x58
1000c5d4:	4618      	mov	r0, r3
1000c5d6:	f7ff fdef 	bl	1000c1b8 <metal_mutex_acquire>
#ifndef VIRTIO_SLAVE_ONLY
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_MASTER)
		buff_len = RPMSG_BUFFER_SIZE;
	else
#endif /*!VIRTIO_SLAVE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
1000c5da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000c5dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000c5e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
1000c5e2:	4611      	mov	r1, r2
1000c5e4:	4618      	mov	r0, r3
1000c5e6:	f000 fbf3 	bl	1000cdd0 <virtqueue_get_buffer_length>
1000c5ea:	6238      	str	r0, [r7, #32]

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
1000c5ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
1000c5ee:	6a3a      	ldr	r2, [r7, #32]
1000c5f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
1000c5f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
1000c5f4:	f7ff feb5 	bl	1000c362 <rpmsg_virtio_enqueue_buffer>
1000c5f8:	6278      	str	r0, [r7, #36]	; 0x24
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
1000c5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c5fc:	2b00      	cmp	r3, #0
1000c5fe:	d006      	beq.n	1000c60e <rpmsg_virtio_send_offchannel_nocopy+0xa6>
1000c600:	4b0e      	ldr	r3, [pc, #56]	; (1000c63c <rpmsg_virtio_send_offchannel_nocopy+0xd4>)
1000c602:	4a0c      	ldr	r2, [pc, #48]	; (1000c634 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
1000c604:	f44f 71c5 	mov.w	r1, #394	; 0x18a
1000c608:	480b      	ldr	r0, [pc, #44]	; (1000c638 <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
1000c60a:	f003 fbd3 	bl	1000fdb4 <__assert_func>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
1000c60e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000c610:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000c614:	4618      	mov	r0, r3
1000c616:	f000 fcaf 	bl	1000cf78 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
1000c61a:	68fb      	ldr	r3, [r7, #12]
1000c61c:	3358      	adds	r3, #88	; 0x58
1000c61e:	4618      	mov	r0, r3
1000c620:	f7ff fdd5 	bl	1000c1ce <metal_mutex_release>

	return len;
1000c624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
1000c626:	4618      	mov	r0, r3
1000c628:	3738      	adds	r7, #56	; 0x38
1000c62a:	46bd      	mov	sp, r7
1000c62c:	bd80      	pop	{r7, pc}
1000c62e:	bf00      	nop
1000c630:	10013158 	.word	0x10013158
1000c634:	100132dc 	.word	0x100132dc
1000c638:	10013174 	.word	0x10013174
1000c63c:	100131f8 	.word	0x100131f8

1000c640 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
1000c640:	b580      	push	{r7, lr}
1000c642:	b08c      	sub	sp, #48	; 0x30
1000c644:	af02      	add	r7, sp, #8
1000c646:	60f8      	str	r0, [r7, #12]
1000c648:	60b9      	str	r1, [r7, #8]
1000c64a:	607a      	str	r2, [r7, #4]
1000c64c:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	void *buffer;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000c64e:	68fb      	ldr	r3, [r7, #12]
1000c650:	627b      	str	r3, [r7, #36]	; 0x24

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
1000c652:	f107 0314 	add.w	r3, r7, #20
1000c656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000c658:	4619      	mov	r1, r3
1000c65a:	68f8      	ldr	r0, [r7, #12]
1000c65c:	f7ff ff31 	bl	1000c4c2 <rpmsg_virtio_get_tx_payload_buffer>
1000c660:	6238      	str	r0, [r7, #32]
	if (!buffer)
1000c662:	6a3b      	ldr	r3, [r7, #32]
1000c664:	2b00      	cmp	r3, #0
1000c666:	d101      	bne.n	1000c66c <rpmsg_virtio_send_offchannel_raw+0x2c>
		return RPMSG_ERR_NO_BUFF;
1000c668:	4b17      	ldr	r3, [pc, #92]	; (1000c6c8 <rpmsg_virtio_send_offchannel_raw+0x88>)
1000c66a:	e029      	b.n	1000c6c0 <rpmsg_virtio_send_offchannel_raw+0x80>

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
1000c66c:	697b      	ldr	r3, [r7, #20]
1000c66e:	461a      	mov	r2, r3
1000c670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c672:	4293      	cmp	r3, r2
1000c674:	dd01      	ble.n	1000c67a <rpmsg_virtio_send_offchannel_raw+0x3a>
		len = buff_len;
1000c676:	697b      	ldr	r3, [r7, #20]
1000c678:	633b      	str	r3, [r7, #48]	; 0x30
	io = rvdev->shbuf_io;
1000c67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c67c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
1000c680:	61fb      	str	r3, [r7, #28]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
1000c682:	6a39      	ldr	r1, [r7, #32]
1000c684:	69f8      	ldr	r0, [r7, #28]
1000c686:	f7ff fd18 	bl	1000c0ba <metal_io_virt_to_offset>
1000c68a:	4601      	mov	r1, r0
1000c68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c68e:	683a      	ldr	r2, [r7, #0]
1000c690:	69f8      	ldr	r0, [r7, #28]
1000c692:	f7ff f91d 	bl	1000b8d0 <metal_io_block_write>
1000c696:	61b8      	str	r0, [r7, #24]
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
1000c698:	69ba      	ldr	r2, [r7, #24]
1000c69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c69c:	429a      	cmp	r2, r3
1000c69e:	d006      	beq.n	1000c6ae <rpmsg_virtio_send_offchannel_raw+0x6e>
1000c6a0:	4b0a      	ldr	r3, [pc, #40]	; (1000c6cc <rpmsg_virtio_send_offchannel_raw+0x8c>)
1000c6a2:	4a0b      	ldr	r2, [pc, #44]	; (1000c6d0 <rpmsg_virtio_send_offchannel_raw+0x90>)
1000c6a4:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
1000c6a8:	480a      	ldr	r0, [pc, #40]	; (1000c6d4 <rpmsg_virtio_send_offchannel_raw+0x94>)
1000c6aa:	f003 fb83 	bl	1000fdb4 <__assert_func>

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
1000c6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c6b0:	9300      	str	r3, [sp, #0]
1000c6b2:	6a3b      	ldr	r3, [r7, #32]
1000c6b4:	687a      	ldr	r2, [r7, #4]
1000c6b6:	68b9      	ldr	r1, [r7, #8]
1000c6b8:	68f8      	ldr	r0, [r7, #12]
1000c6ba:	f7ff ff55 	bl	1000c568 <rpmsg_virtio_send_offchannel_nocopy>
1000c6be:	4603      	mov	r3, r0
}
1000c6c0:	4618      	mov	r0, r3
1000c6c2:	3728      	adds	r7, #40	; 0x28
1000c6c4:	46bd      	mov	sp, r7
1000c6c6:	bd80      	pop	{r7, pc}
1000c6c8:	fffff82e 	.word	0xfffff82e
1000c6cc:	10013204 	.word	0x10013204
1000c6d0:	10013300 	.word	0x10013300
1000c6d4:	10013174 	.word	0x10013174

1000c6d8 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
1000c6d8:	b480      	push	{r7}
1000c6da:	b083      	sub	sp, #12
1000c6dc:	af00      	add	r7, sp, #0
1000c6de:	6078      	str	r0, [r7, #4]
	(void)vq;
}
1000c6e0:	bf00      	nop
1000c6e2:	370c      	adds	r7, #12
1000c6e4:	46bd      	mov	sp, r7
1000c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c6ea:	4770      	bx	lr

1000c6ec <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
1000c6ec:	b590      	push	{r4, r7, lr}
1000c6ee:	b08d      	sub	sp, #52	; 0x34
1000c6f0:	af02      	add	r7, sp, #8
1000c6f2:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
1000c6f4:	687b      	ldr	r3, [r7, #4]
1000c6f6:	681b      	ldr	r3, [r3, #0]
1000c6f8:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
1000c6fa:	6a3b      	ldr	r3, [r7, #32]
1000c6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000c6fe:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
1000c700:	69fb      	ldr	r3, [r7, #28]
1000c702:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
1000c704:	69bb      	ldr	r3, [r7, #24]
1000c706:	3358      	adds	r3, #88	; 0x58
1000c708:	4618      	mov	r0, r3
1000c70a:	f7ff fd55 	bl	1000c1b8 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
1000c70e:	f107 020a 	add.w	r2, r7, #10
1000c712:	f107 030c 	add.w	r3, r7, #12
1000c716:	4619      	mov	r1, r3
1000c718:	69f8      	ldr	r0, [r7, #28]
1000c71a:	f7ff fe5c 	bl	1000c3d6 <rpmsg_virtio_get_rx_buffer>
1000c71e:	6278      	str	r0, [r7, #36]	; 0x24

	metal_mutex_release(&rdev->lock);
1000c720:	69bb      	ldr	r3, [r7, #24]
1000c722:	3358      	adds	r3, #88	; 0x58
1000c724:	4618      	mov	r0, r3
1000c726:	f7ff fd52 	bl	1000c1ce <metal_mutex_release>

	while (rp_hdr) {
1000c72a:	e062      	b.n	1000c7f2 <rpmsg_virtio_rx_callback+0x106>
		rp_hdr->reserved = idx;
1000c72c:	897b      	ldrh	r3, [r7, #10]
1000c72e:	461a      	mov	r2, r3
1000c730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c732:	609a      	str	r2, [r3, #8]

		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
1000c734:	69bb      	ldr	r3, [r7, #24]
1000c736:	3358      	adds	r3, #88	; 0x58
1000c738:	4618      	mov	r0, r3
1000c73a:	f7ff fd3d 	bl	1000c1b8 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
1000c73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c740:	685b      	ldr	r3, [r3, #4]
1000c742:	4619      	mov	r1, r3
1000c744:	69b8      	ldr	r0, [r7, #24]
1000c746:	f7ff fdc9 	bl	1000c2dc <rpmsg_get_ept_from_addr>
1000c74a:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
1000c74c:	69bb      	ldr	r3, [r7, #24]
1000c74e:	3358      	adds	r3, #88	; 0x58
1000c750:	4618      	mov	r0, r3
1000c752:	f7ff fd3c 	bl	1000c1ce <metal_mutex_release>

		if (ept) {
1000c756:	697b      	ldr	r3, [r7, #20]
1000c758:	2b00      	cmp	r3, #0
1000c75a:	d025      	beq.n	1000c7a8 <rpmsg_virtio_rx_callback+0xbc>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
1000c75c:	697b      	ldr	r3, [r7, #20]
1000c75e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000c760:	f1b3 3fff 	cmp.w	r3, #4294967295
1000c764:	d103      	bne.n	1000c76e <rpmsg_virtio_rx_callback+0x82>
				/*
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
1000c766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c768:	681a      	ldr	r2, [r3, #0]
1000c76a:	697b      	ldr	r3, [r7, #20]
1000c76c:	629a      	str	r2, [r3, #40]	; 0x28
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
1000c76e:	697b      	ldr	r3, [r7, #20]
1000c770:	6adc      	ldr	r4, [r3, #44]	; 0x2c
1000c772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c774:	f103 0110 	add.w	r1, r3, #16
					 rp_hdr->len, rp_hdr->src, ept->priv);
1000c778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c77a:	899b      	ldrh	r3, [r3, #12]
1000c77c:	b29b      	uxth	r3, r3
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
1000c77e:	4618      	mov	r0, r3
1000c780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c782:	681a      	ldr	r2, [r3, #0]
1000c784:	697b      	ldr	r3, [r7, #20]
1000c786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000c788:	9300      	str	r3, [sp, #0]
1000c78a:	4613      	mov	r3, r2
1000c78c:	4602      	mov	r2, r0
1000c78e:	6978      	ldr	r0, [r7, #20]
1000c790:	47a0      	blx	r4
1000c792:	6138      	str	r0, [r7, #16]

			RPMSG_ASSERT(status >= 0,
1000c794:	693b      	ldr	r3, [r7, #16]
1000c796:	2b00      	cmp	r3, #0
1000c798:	da06      	bge.n	1000c7a8 <rpmsg_virtio_rx_callback+0xbc>
1000c79a:	4b1a      	ldr	r3, [pc, #104]	; (1000c804 <rpmsg_virtio_rx_callback+0x118>)
1000c79c:	4a1a      	ldr	r2, [pc, #104]	; (1000c808 <rpmsg_virtio_rx_callback+0x11c>)
1000c79e:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
1000c7a2:	481a      	ldr	r0, [pc, #104]	; (1000c80c <rpmsg_virtio_rx_callback+0x120>)
1000c7a4:	f003 fb06 	bl	1000fdb4 <__assert_func>
				     "unexpected callback status\r\n");
		}

		metal_mutex_acquire(&rdev->lock);
1000c7a8:	69bb      	ldr	r3, [r7, #24]
1000c7aa:	3358      	adds	r3, #88	; 0x58
1000c7ac:	4618      	mov	r0, r3
1000c7ae:	f7ff fd03 	bl	1000c1b8 <metal_mutex_acquire>

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
1000c7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c7b4:	689b      	ldr	r3, [r3, #8]
1000c7b6:	2b00      	cmp	r3, #0
1000c7b8:	db05      	blt.n	1000c7c6 <rpmsg_virtio_rx_callback+0xda>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
1000c7ba:	68fa      	ldr	r2, [r7, #12]
1000c7bc:	897b      	ldrh	r3, [r7, #10]
1000c7be:	6a79      	ldr	r1, [r7, #36]	; 0x24
1000c7c0:	69f8      	ldr	r0, [r7, #28]
1000c7c2:	f7ff fdb5 	bl	1000c330 <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
1000c7c6:	f107 020a 	add.w	r2, r7, #10
1000c7ca:	f107 030c 	add.w	r3, r7, #12
1000c7ce:	4619      	mov	r1, r3
1000c7d0:	69f8      	ldr	r0, [r7, #28]
1000c7d2:	f7ff fe00 	bl	1000c3d6 <rpmsg_virtio_get_rx_buffer>
1000c7d6:	6278      	str	r0, [r7, #36]	; 0x24
		if (!rp_hdr) {
1000c7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c7da:	2b00      	cmp	r3, #0
1000c7dc:	d104      	bne.n	1000c7e8 <rpmsg_virtio_rx_callback+0xfc>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
1000c7de:	69fb      	ldr	r3, [r7, #28]
1000c7e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1000c7e2:	4618      	mov	r0, r3
1000c7e4:	f000 fbc8 	bl	1000cf78 <virtqueue_kick>
		}
		metal_mutex_release(&rdev->lock);
1000c7e8:	69bb      	ldr	r3, [r7, #24]
1000c7ea:	3358      	adds	r3, #88	; 0x58
1000c7ec:	4618      	mov	r0, r3
1000c7ee:	f7ff fcee 	bl	1000c1ce <metal_mutex_release>
	while (rp_hdr) {
1000c7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000c7f4:	2b00      	cmp	r3, #0
1000c7f6:	d199      	bne.n	1000c72c <rpmsg_virtio_rx_callback+0x40>
	}
}
1000c7f8:	bf00      	nop
1000c7fa:	bf00      	nop
1000c7fc:	372c      	adds	r7, #44	; 0x2c
1000c7fe:	46bd      	mov	sp, r7
1000c800:	bd90      	pop	{r4, r7, pc}
1000c802:	bf00      	nop
1000c804:	10013214 	.word	0x10013214
1000c808:	10013324 	.word	0x10013324
1000c80c:	10013174 	.word	0x10013174

1000c810 <rpmsg_virtio_ns_callback>:
 *
 * @return - rpmag endpoint callback handled
 */
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
1000c810:	b580      	push	{r7, lr}
1000c812:	b092      	sub	sp, #72	; 0x48
1000c814:	af00      	add	r7, sp, #0
1000c816:	60f8      	str	r0, [r7, #12]
1000c818:	60b9      	str	r1, [r7, #8]
1000c81a:	607a      	str	r2, [r7, #4]
1000c81c:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
1000c81e:	68fb      	ldr	r3, [r7, #12]
1000c820:	6a1b      	ldr	r3, [r3, #32]
1000c822:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
1000c824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000c826:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
1000c828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000c82a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
1000c82e:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = data;
1000c830:	68bb      	ldr	r3, [r7, #8]
1000c832:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
1000c834:	687b      	ldr	r3, [r7, #4]
1000c836:	2b28      	cmp	r3, #40	; 0x28
1000c838:	d001      	beq.n	1000c83e <rpmsg_virtio_ns_callback+0x2e>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
1000c83a:	2300      	movs	r3, #0
1000c83c:	e057      	b.n	1000c8ee <rpmsg_virtio_ns_callback+0xde>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
1000c83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
1000c840:	4619      	mov	r1, r3
1000c842:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
1000c844:	f7ff fc39 	bl	1000c0ba <metal_io_virt_to_offset>
1000c848:	4601      	mov	r1, r0
1000c84a:	f107 0210 	add.w	r2, r7, #16
1000c84e:	2320      	movs	r3, #32
1000c850:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
1000c852:	f7fe ffc8 	bl	1000b7e6 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
1000c856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000c858:	6a1b      	ldr	r3, [r3, #32]
1000c85a:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
1000c85c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000c85e:	3358      	adds	r3, #88	; 0x58
1000c860:	4618      	mov	r0, r3
1000c862:	f7ff fca9 	bl	1000c1b8 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
1000c866:	f107 0110 	add.w	r1, r7, #16
1000c86a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000c86c:	f04f 32ff 	mov.w	r2, #4294967295
1000c870:	6c78      	ldr	r0, [r7, #68]	; 0x44
1000c872:	f7ff fb88 	bl	1000bf86 <rpmsg_get_endpoint>
1000c876:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
1000c878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000c87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000c87c:	f003 0301 	and.w	r3, r3, #1
1000c880:	2b00      	cmp	r3, #0
1000c882:	d017      	beq.n	1000c8b4 <rpmsg_virtio_ns_callback+0xa4>
		if (_ept)
1000c884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c886:	2b00      	cmp	r3, #0
1000c888:	d003      	beq.n	1000c892 <rpmsg_virtio_ns_callback+0x82>
			_ept->dest_addr = RPMSG_ADDR_ANY;
1000c88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c88c:	f04f 32ff 	mov.w	r2, #4294967295
1000c890:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
1000c892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000c894:	3358      	adds	r3, #88	; 0x58
1000c896:	4618      	mov	r0, r3
1000c898:	f7ff fc99 	bl	1000c1ce <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
1000c89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c89e:	2b00      	cmp	r3, #0
1000c8a0:	d024      	beq.n	1000c8ec <rpmsg_virtio_ns_callback+0xdc>
1000c8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c8a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000c8a6:	2b00      	cmp	r3, #0
1000c8a8:	d020      	beq.n	1000c8ec <rpmsg_virtio_ns_callback+0xdc>
			_ept->ns_unbind_cb(_ept);
1000c8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c8ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000c8ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
1000c8b0:	4798      	blx	r3
1000c8b2:	e01b      	b.n	1000c8ec <rpmsg_virtio_ns_callback+0xdc>
	} else {
		if (!_ept) {
1000c8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c8b6:	2b00      	cmp	r3, #0
1000c8b8:	d110      	bne.n	1000c8dc <rpmsg_virtio_ns_callback+0xcc>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
1000c8ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000c8bc:	3358      	adds	r3, #88	; 0x58
1000c8be:	4618      	mov	r0, r3
1000c8c0:	f7ff fc85 	bl	1000c1ce <metal_mutex_release>
			if (rdev->ns_bind_cb)
1000c8c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000c8c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
1000c8c8:	2b00      	cmp	r3, #0
1000c8ca:	d00f      	beq.n	1000c8ec <rpmsg_virtio_ns_callback+0xdc>
				rdev->ns_bind_cb(rdev, name, dest);
1000c8cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000c8ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
1000c8d0:	f107 0110 	add.w	r1, r7, #16
1000c8d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000c8d6:	6c78      	ldr	r0, [r7, #68]	; 0x44
1000c8d8:	4798      	blx	r3
1000c8da:	e007      	b.n	1000c8ec <rpmsg_virtio_ns_callback+0xdc>
		} else {
			_ept->dest_addr = dest;
1000c8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c8de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000c8e0:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
1000c8e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000c8e4:	3358      	adds	r3, #88	; 0x58
1000c8e6:	4618      	mov	r0, r3
1000c8e8:	f7ff fc71 	bl	1000c1ce <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
1000c8ec:	2300      	movs	r3, #0
}
1000c8ee:	4618      	mov	r0, r3
1000c8f0:	3748      	adds	r7, #72	; 0x48
1000c8f2:	46bd      	mov	sp, r7
1000c8f4:	bd80      	pop	{r7, pc}
	...

1000c8f8 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
1000c8f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
1000c8fc:	b090      	sub	sp, #64	; 0x40
1000c8fe:	af02      	add	r7, sp, #8
1000c900:	60f8      	str	r0, [r7, #12]
1000c902:	60b9      	str	r1, [r7, #8]
1000c904:	607a      	str	r2, [r7, #4]
1000c906:	603b      	str	r3, [r7, #0]
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
1000c908:	68fb      	ldr	r3, [r7, #12]
1000c90a:	633b      	str	r3, [r7, #48]	; 0x30
	memset(rdev, 0, sizeof(*rdev));
1000c90c:	2278      	movs	r2, #120	; 0x78
1000c90e:	2100      	movs	r1, #0
1000c910:	6b38      	ldr	r0, [r7, #48]	; 0x30
1000c912:	f004 f8f6 	bl	10010b02 <memset>
	metal_mutex_init(&rdev->lock);
1000c916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c918:	3358      	adds	r3, #88	; 0x58
1000c91a:	4618      	mov	r0, r3
1000c91c:	f7ff fc41 	bl	1000c1a2 <metal_mutex_init>
	rvdev->vdev = vdev;
1000c920:	68fb      	ldr	r3, [r7, #12]
1000c922:	68ba      	ldr	r2, [r7, #8]
1000c924:	679a      	str	r2, [r3, #120]	; 0x78
	rdev->ns_bind_cb = ns_bind_cb;
1000c926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c928:	687a      	ldr	r2, [r7, #4]
1000c92a:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
1000c92c:	68bb      	ldr	r3, [r7, #8]
1000c92e:	68fa      	ldr	r2, [r7, #12]
1000c930:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
1000c932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c934:	4a4d      	ldr	r2, [pc, #308]	; (1000ca6c <rpmsg_init_vdev+0x174>)
1000c936:	661a      	str	r2, [r3, #96]	; 0x60
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
1000c938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c93a:	4a4d      	ldr	r2, [pc, #308]	; (1000ca70 <rpmsg_init_vdev+0x178>)
1000c93c:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
1000c93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c940:	4a4c      	ldr	r2, [pc, #304]	; (1000ca74 <rpmsg_init_vdev+0x17c>)
1000c942:	669a      	str	r2, [r3, #104]	; 0x68
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
1000c944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c946:	4a4c      	ldr	r2, [pc, #304]	; (1000ca78 <rpmsg_init_vdev+0x180>)
1000c948:	66da      	str	r2, [r3, #108]	; 0x6c
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
1000c94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c94c:	4a4b      	ldr	r2, [pc, #300]	; (1000ca7c <rpmsg_init_vdev+0x184>)
1000c94e:	671a      	str	r2, [r3, #112]	; 0x70
	role = rpmsg_virtio_get_role(rvdev);
1000c950:	68f8      	ldr	r0, [r7, #12]
1000c952:	f7ff fc47 	bl	1000c1e4 <rpmsg_virtio_get_role>
1000c956:	62f8      	str	r0, [r7, #44]	; 0x2c

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000c958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000c95a:	2b01      	cmp	r3, #1
1000c95c:	d102      	bne.n	1000c964 <rpmsg_init_vdev+0x6c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
1000c95e:	68f8      	ldr	r0, [r7, #12]
1000c960:	f7ff fd55 	bl	1000c40e <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
1000c964:	68f8      	ldr	r0, [r7, #12]
1000c966:	f7ff fc6e 	bl	1000c246 <rpmsg_virtio_get_features>
1000c96a:	4603      	mov	r3, r0
1000c96c:	2200      	movs	r2, #0
1000c96e:	4698      	mov	r8, r3
1000c970:	4691      	mov	r9, r2
1000c972:	68bb      	ldr	r3, [r7, #8]
1000c974:	e9c3 8904 	strd	r8, r9, [r3, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
1000c978:	68bb      	ldr	r3, [r7, #8]
1000c97a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
1000c97e:	f002 0401 	and.w	r4, r2, #1
1000c982:	2500      	movs	r5, #0
1000c984:	ea44 0305 	orr.w	r3, r4, r5
1000c988:	2b00      	cmp	r3, #0
1000c98a:	bf14      	ite	ne
1000c98c:	2301      	movne	r3, #1
1000c98e:	2300      	moveq	r3, #0
1000c990:	b2da      	uxtb	r2, r3
1000c992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000c994:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
1000c998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000c99a:	2b01      	cmp	r3, #1
1000c99c:	d113      	bne.n	1000c9c6 <rpmsg_init_vdev+0xce>
		vq_names[0] = "tx_vq";
1000c99e:	4b38      	ldr	r3, [pc, #224]	; (1000ca80 <rpmsg_init_vdev+0x188>)
1000c9a0:	61fb      	str	r3, [r7, #28]
		vq_names[1] = "rx_vq";
1000c9a2:	4b38      	ldr	r3, [pc, #224]	; (1000ca84 <rpmsg_init_vdev+0x18c>)
1000c9a4:	623b      	str	r3, [r7, #32]
		callback[0] = rpmsg_virtio_tx_callback;
1000c9a6:	4b38      	ldr	r3, [pc, #224]	; (1000ca88 <rpmsg_init_vdev+0x190>)
1000c9a8:	617b      	str	r3, [r7, #20]
		callback[1] = rpmsg_virtio_rx_callback;
1000c9aa:	4b38      	ldr	r3, [pc, #224]	; (1000ca8c <rpmsg_init_vdev+0x194>)
1000c9ac:	61bb      	str	r3, [r7, #24]
		rvdev->rvq  = vdev->vrings_info[1].vq;
1000c9ae:	68bb      	ldr	r3, [r7, #8]
1000c9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000c9b2:	3318      	adds	r3, #24
1000c9b4:	681a      	ldr	r2, [r3, #0]
1000c9b6:	68fb      	ldr	r3, [r7, #12]
1000c9b8:	67da      	str	r2, [r3, #124]	; 0x7c
		rvdev->svq  = vdev->vrings_info[0].vq;
1000c9ba:	68bb      	ldr	r3, [r7, #8]
1000c9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000c9be:	681a      	ldr	r2, [r3, #0]
1000c9c0:	68fb      	ldr	r3, [r7, #12]
1000c9c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
1000c9c6:	68fb      	ldr	r3, [r7, #12]
1000c9c8:	683a      	ldr	r2, [r7, #0]
1000c9ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
1000c9ce:	f107 021c 	add.w	r2, r7, #28
1000c9d2:	f107 0314 	add.w	r3, r7, #20
1000c9d6:	9300      	str	r3, [sp, #0]
1000c9d8:	4613      	mov	r3, r2
1000c9da:	2202      	movs	r2, #2
1000c9dc:	2100      	movs	r1, #0
1000c9de:	68f8      	ldr	r0, [r7, #12]
1000c9e0:	f7ff fc42 	bl	1000c268 <rpmsg_virtio_create_virtqueues>
1000c9e4:	62b8      	str	r0, [r7, #40]	; 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
1000c9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c9e8:	2b00      	cmp	r3, #0
1000c9ea:	d001      	beq.n	1000c9f0 <rpmsg_init_vdev+0xf8>
		return status;
1000c9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c9ee:	e037      	b.n	1000ca60 <rpmsg_init_vdev+0x168>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
1000c9f0:	68fb      	ldr	r3, [r7, #12]
1000c9f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000c9f6:	4618      	mov	r0, r3
1000c9f8:	f000 fa86 	bl	1000cf08 <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
1000c9fc:	2300      	movs	r3, #0
1000c9fe:	637b      	str	r3, [r7, #52]	; 0x34
1000ca00:	e00f      	b.n	1000ca22 <rpmsg_init_vdev+0x12a>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
1000ca02:	68bb      	ldr	r3, [r7, #8]
1000ca04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1000ca06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000ca08:	4613      	mov	r3, r2
1000ca0a:	005b      	lsls	r3, r3, #1
1000ca0c:	4413      	add	r3, r2
1000ca0e:	00db      	lsls	r3, r3, #3
1000ca10:	440b      	add	r3, r1
1000ca12:	681b      	ldr	r3, [r3, #0]
1000ca14:	627b      	str	r3, [r7, #36]	; 0x24
		vq->shm_io = shm_io;
1000ca16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000ca18:	683a      	ldr	r2, [r7, #0]
1000ca1a:	629a      	str	r2, [r3, #40]	; 0x28
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
1000ca1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000ca1e:	3301      	adds	r3, #1
1000ca20:	637b      	str	r3, [r7, #52]	; 0x34
1000ca22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000ca24:	2b01      	cmp	r3, #1
1000ca26:	d9ec      	bls.n	1000ca02 <rpmsg_init_vdev+0x10a>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
1000ca28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000ca2a:	4618      	mov	r0, r3
1000ca2c:	f7ff fb35 	bl	1000c09a <metal_list_init>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
1000ca30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000ca32:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
1000ca36:	2b00      	cmp	r3, #0
1000ca38:	d011      	beq.n	1000ca5e <rpmsg_init_vdev+0x166>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
1000ca3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000ca3c:	f103 0008 	add.w	r0, r3, #8
1000ca40:	2300      	movs	r3, #0
1000ca42:	9301      	str	r3, [sp, #4]
1000ca44:	4b12      	ldr	r3, [pc, #72]	; (1000ca90 <rpmsg_init_vdev+0x198>)
1000ca46:	9300      	str	r3, [sp, #0]
1000ca48:	2335      	movs	r3, #53	; 0x35
1000ca4a:	2235      	movs	r2, #53	; 0x35
1000ca4c:	4911      	ldr	r1, [pc, #68]	; (1000ca94 <rpmsg_init_vdev+0x19c>)
1000ca4e:	f7ff fc21 	bl	1000c294 <rpmsg_initialize_ept>
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
1000ca52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000ca54:	3308      	adds	r3, #8
1000ca56:	4619      	mov	r1, r3
1000ca58:	6b38      	ldr	r0, [r7, #48]	; 0x30
1000ca5a:	f7ff faf4 	bl	1000c046 <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
1000ca5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
1000ca60:	4618      	mov	r0, r3
1000ca62:	3738      	adds	r7, #56	; 0x38
1000ca64:	46bd      	mov	sp, r7
1000ca66:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
1000ca6a:	bf00      	nop
1000ca6c:	1000c641 	.word	0x1000c641
1000ca70:	1000c449 	.word	0x1000c449
1000ca74:	1000c471 	.word	0x1000c471
1000ca78:	1000c4c3 	.word	0x1000c4c3
1000ca7c:	1000c569 	.word	0x1000c569
1000ca80:	10013220 	.word	0x10013220
1000ca84:	10013228 	.word	0x10013228
1000ca88:	1000c6d9 	.word	0x1000c6d9
1000ca8c:	1000c6ed 	.word	0x1000c6ed
1000ca90:	1000c811 	.word	0x1000c811
1000ca94:	10013230 	.word	0x10013230

1000ca98 <metal_machine_cache_flush>:

	/* Add implementation here */
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
1000ca98:	b480      	push	{r7}
1000ca9a:	b083      	sub	sp, #12
1000ca9c:	af00      	add	r7, sp, #0
1000ca9e:	6078      	str	r0, [r7, #4]
1000caa0:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
1000caa2:	bf00      	nop
1000caa4:	370c      	adds	r7, #12
1000caa6:	46bd      	mov	sp, r7
1000caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
1000caac:	4770      	bx	lr

1000caae <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
1000caae:	b480      	push	{r7}
1000cab0:	b083      	sub	sp, #12
1000cab2:	af00      	add	r7, sp, #0
1000cab4:	6078      	str	r0, [r7, #4]
1000cab6:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
1000cab8:	bf00      	nop
1000caba:	370c      	adds	r7, #12
1000cabc:	46bd      	mov	sp, r7
1000cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
1000cac2:	4770      	bx	lr

1000cac4 <metal_machine_io_mem_map>:
	/* Add implementation here */
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
1000cac4:	b480      	push	{r7}
1000cac6:	b085      	sub	sp, #20
1000cac8:	af00      	add	r7, sp, #0
1000caca:	60f8      	str	r0, [r7, #12]
1000cacc:	60b9      	str	r1, [r7, #8]
1000cace:	607a      	str	r2, [r7, #4]
1000cad0:	603b      	str	r3, [r7, #0]
	metal_unused(size);
	metal_unused(flags);

	/* Add implementation here */

	return va;
1000cad2:	68fb      	ldr	r3, [r7, #12]
}
1000cad4:	4618      	mov	r0, r3
1000cad6:	3714      	adds	r7, #20
1000cad8:	46bd      	mov	sp, r7
1000cada:	f85d 7b04 	ldr.w	r7, [sp], #4
1000cade:	4770      	bx	lr

1000cae0 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
1000cae0:	b590      	push	{r4, r7, lr}
1000cae2:	b08f      	sub	sp, #60	; 0x3c
1000cae4:	af04      	add	r7, sp, #16
1000cae6:	60f8      	str	r0, [r7, #12]
1000cae8:	60b9      	str	r1, [r7, #8]
1000caea:	607a      	str	r2, [r7, #4]
1000caec:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
1000caee:	68fb      	ldr	r3, [r7, #12]
1000caf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000caf2:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
1000caf4:	687a      	ldr	r2, [r7, #4]
1000caf6:	6a3b      	ldr	r3, [r7, #32]
1000caf8:	429a      	cmp	r2, r3
1000cafa:	d901      	bls.n	1000cb00 <virtio_create_virtqueues+0x20>
		return ERROR_VQUEUE_INVLD_PARAM;
1000cafc:	4b1e      	ldr	r3, [pc, #120]	; (1000cb78 <virtio_create_virtqueues+0x98>)
1000cafe:	e036      	b.n	1000cb6e <virtio_create_virtqueues+0x8e>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
1000cb00:	2300      	movs	r3, #0
1000cb02:	627b      	str	r3, [r7, #36]	; 0x24
1000cb04:	e02e      	b.n	1000cb64 <virtio_create_virtqueues+0x84>
		vring_info = &vdev->vrings_info[i];
1000cb06:	68fb      	ldr	r3, [r7, #12]
1000cb08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1000cb0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000cb0c:	4613      	mov	r3, r2
1000cb0e:	005b      	lsls	r3, r3, #1
1000cb10:	4413      	add	r3, r2
1000cb12:	00db      	lsls	r3, r3, #3
1000cb14:	440b      	add	r3, r1
1000cb16:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
1000cb18:	69fb      	ldr	r3, [r7, #28]
1000cb1a:	3304      	adds	r3, #4
1000cb1c:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
1000cb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000cb20:	b298      	uxth	r0, r3
1000cb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000cb24:	009b      	lsls	r3, r3, #2
1000cb26:	683a      	ldr	r2, [r7, #0]
1000cb28:	4413      	add	r3, r2
1000cb2a:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
1000cb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000cb2e:	009b      	lsls	r3, r3, #2
1000cb30:	6bba      	ldr	r2, [r7, #56]	; 0x38
1000cb32:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
1000cb34:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
1000cb36:	68fa      	ldr	r2, [r7, #12]
1000cb38:	6a12      	ldr	r2, [r2, #32]
1000cb3a:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
1000cb3c:	69f9      	ldr	r1, [r7, #28]
1000cb3e:	6809      	ldr	r1, [r1, #0]
1000cb40:	9102      	str	r1, [sp, #8]
1000cb42:	9201      	str	r2, [sp, #4]
1000cb44:	9300      	str	r3, [sp, #0]
1000cb46:	69bb      	ldr	r3, [r7, #24]
1000cb48:	4622      	mov	r2, r4
1000cb4a:	4601      	mov	r1, r0
1000cb4c:	68f8      	ldr	r0, [r7, #12]
1000cb4e:	f000 f90e 	bl	1000cd6e <virtqueue_create>
1000cb52:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
1000cb54:	697b      	ldr	r3, [r7, #20]
1000cb56:	2b00      	cmp	r3, #0
1000cb58:	d001      	beq.n	1000cb5e <virtio_create_virtqueues+0x7e>
			return ret;
1000cb5a:	697b      	ldr	r3, [r7, #20]
1000cb5c:	e007      	b.n	1000cb6e <virtio_create_virtqueues+0x8e>
	for (i = 0; i < nvqs; i++) {
1000cb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000cb60:	3301      	adds	r3, #1
1000cb62:	627b      	str	r3, [r7, #36]	; 0x24
1000cb64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000cb66:	687b      	ldr	r3, [r7, #4]
1000cb68:	429a      	cmp	r2, r3
1000cb6a:	d3cc      	bcc.n	1000cb06 <virtio_create_virtqueues+0x26>
	}
	return 0;
1000cb6c:	2300      	movs	r3, #0
}
1000cb6e:	4618      	mov	r0, r3
1000cb70:	372c      	adds	r7, #44	; 0x2c
1000cb72:	46bd      	mov	sp, r7
1000cb74:	bd90      	pop	{r4, r7, pc}
1000cb76:	bf00      	nop
1000cb78:	fffff440 	.word	0xfffff440

1000cb7c <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
1000cb7c:	b480      	push	{r7}
1000cb7e:	b085      	sub	sp, #20
1000cb80:	af00      	add	r7, sp, #0
1000cb82:	60f8      	str	r0, [r7, #12]
1000cb84:	60b9      	str	r1, [r7, #8]
1000cb86:	607a      	str	r2, [r7, #4]
1000cb88:	603b      	str	r3, [r7, #0]
	vr->num = num;
1000cb8a:	68fb      	ldr	r3, [r7, #12]
1000cb8c:	68ba      	ldr	r2, [r7, #8]
1000cb8e:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
1000cb90:	68fb      	ldr	r3, [r7, #12]
1000cb92:	687a      	ldr	r2, [r7, #4]
1000cb94:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
1000cb96:	68bb      	ldr	r3, [r7, #8]
1000cb98:	011b      	lsls	r3, r3, #4
1000cb9a:	687a      	ldr	r2, [r7, #4]
1000cb9c:	441a      	add	r2, r3
1000cb9e:	68fb      	ldr	r3, [r7, #12]
1000cba0:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
1000cba2:	68fb      	ldr	r3, [r7, #12]
1000cba4:	689a      	ldr	r2, [r3, #8]
1000cba6:	68bb      	ldr	r3, [r7, #8]
1000cba8:	005b      	lsls	r3, r3, #1
1000cbaa:	4413      	add	r3, r2
1000cbac:	3304      	adds	r3, #4
1000cbae:	461a      	mov	r2, r3
1000cbb0:	683b      	ldr	r3, [r7, #0]
1000cbb2:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
1000cbb4:	1c5a      	adds	r2, r3, #1
1000cbb6:	683b      	ldr	r3, [r7, #0]
1000cbb8:	425b      	negs	r3, r3
1000cbba:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
1000cbbc:	461a      	mov	r2, r3
1000cbbe:	68fb      	ldr	r3, [r7, #12]
1000cbc0:	60da      	str	r2, [r3, #12]
}
1000cbc2:	bf00      	nop
1000cbc4:	3714      	adds	r7, #20
1000cbc6:	46bd      	mov	sp, r7
1000cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
1000cbcc:	4770      	bx	lr

1000cbce <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
1000cbce:	b480      	push	{r7}
1000cbd0:	b083      	sub	sp, #12
1000cbd2:	af00      	add	r7, sp, #0
1000cbd4:	4603      	mov	r3, r0
1000cbd6:	80fb      	strh	r3, [r7, #6]
1000cbd8:	460b      	mov	r3, r1
1000cbda:	80bb      	strh	r3, [r7, #4]
1000cbdc:	4613      	mov	r3, r2
1000cbde:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
1000cbe0:	88ba      	ldrh	r2, [r7, #4]
1000cbe2:	88fb      	ldrh	r3, [r7, #6]
1000cbe4:	1ad3      	subs	r3, r2, r3
1000cbe6:	b29b      	uxth	r3, r3
1000cbe8:	3b01      	subs	r3, #1
1000cbea:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
1000cbec:	88b9      	ldrh	r1, [r7, #4]
1000cbee:	887b      	ldrh	r3, [r7, #2]
1000cbf0:	1acb      	subs	r3, r1, r3
1000cbf2:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
1000cbf4:	429a      	cmp	r2, r3
1000cbf6:	bf34      	ite	cc
1000cbf8:	2301      	movcc	r3, #1
1000cbfa:	2300      	movcs	r3, #0
1000cbfc:	b2db      	uxtb	r3, r3
}
1000cbfe:	4618      	mov	r0, r3
1000cc00:	370c      	adds	r7, #12
1000cc02:	46bd      	mov	sp, r7
1000cc04:	f85d 7b04 	ldr.w	r7, [sp], #4
1000cc08:	4770      	bx	lr

1000cc0a <metal_io_virt>:
{
1000cc0a:	b480      	push	{r7}
1000cc0c:	b083      	sub	sp, #12
1000cc0e:	af00      	add	r7, sp, #0
1000cc10:	6078      	str	r0, [r7, #4]
1000cc12:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
1000cc14:	687b      	ldr	r3, [r7, #4]
1000cc16:	681b      	ldr	r3, [r3, #0]
		: NULL);
1000cc18:	f1b3 3fff 	cmp.w	r3, #4294967295
1000cc1c:	d00a      	beq.n	1000cc34 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
1000cc1e:	687b      	ldr	r3, [r7, #4]
1000cc20:	689b      	ldr	r3, [r3, #8]
1000cc22:	683a      	ldr	r2, [r7, #0]
1000cc24:	429a      	cmp	r2, r3
1000cc26:	d205      	bcs.n	1000cc34 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
1000cc28:	687b      	ldr	r3, [r7, #4]
1000cc2a:	681b      	ldr	r3, [r3, #0]
1000cc2c:	461a      	mov	r2, r3
1000cc2e:	683b      	ldr	r3, [r7, #0]
1000cc30:	4413      	add	r3, r2
		: NULL);
1000cc32:	e000      	b.n	1000cc36 <metal_io_virt+0x2c>
1000cc34:	2300      	movs	r3, #0
}
1000cc36:	4618      	mov	r0, r3
1000cc38:	370c      	adds	r7, #12
1000cc3a:	46bd      	mov	sp, r7
1000cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
1000cc40:	4770      	bx	lr

1000cc42 <metal_io_phys>:
{
1000cc42:	b580      	push	{r7, lr}
1000cc44:	b084      	sub	sp, #16
1000cc46:	af00      	add	r7, sp, #0
1000cc48:	6078      	str	r0, [r7, #4]
1000cc4a:	6039      	str	r1, [r7, #0]
	if (!io->ops.offset_to_phys) {
1000cc4c:	687b      	ldr	r3, [r7, #4]
1000cc4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000cc50:	2b00      	cmp	r3, #0
1000cc52:	d123      	bne.n	1000cc9c <metal_io_phys+0x5a>
		unsigned long page = (io->page_shift >=
1000cc54:	687b      	ldr	r3, [r7, #4]
1000cc56:	68db      	ldr	r3, [r3, #12]
				     0 : offset >> io->page_shift);
1000cc58:	2b1f      	cmp	r3, #31
1000cc5a:	d805      	bhi.n	1000cc68 <metal_io_phys+0x26>
1000cc5c:	687b      	ldr	r3, [r7, #4]
1000cc5e:	68db      	ldr	r3, [r3, #12]
1000cc60:	683a      	ldr	r2, [r7, #0]
1000cc62:	fa22 f303 	lsr.w	r3, r2, r3
1000cc66:	e000      	b.n	1000cc6a <metal_io_phys+0x28>
1000cc68:	2300      	movs	r3, #0
		unsigned long page = (io->page_shift >=
1000cc6a:	60fb      	str	r3, [r7, #12]
		return (io->physmap && offset < io->size
1000cc6c:	687b      	ldr	r3, [r7, #4]
1000cc6e:	685b      	ldr	r3, [r3, #4]
			: METAL_BAD_PHYS);
1000cc70:	2b00      	cmp	r3, #0
1000cc72:	d010      	beq.n	1000cc96 <metal_io_phys+0x54>
		return (io->physmap && offset < io->size
1000cc74:	687b      	ldr	r3, [r7, #4]
1000cc76:	689b      	ldr	r3, [r3, #8]
1000cc78:	683a      	ldr	r2, [r7, #0]
1000cc7a:	429a      	cmp	r2, r3
1000cc7c:	d20b      	bcs.n	1000cc96 <metal_io_phys+0x54>
			? io->physmap[page] + (offset & io->page_mask)
1000cc7e:	687b      	ldr	r3, [r7, #4]
1000cc80:	685a      	ldr	r2, [r3, #4]
1000cc82:	68fb      	ldr	r3, [r7, #12]
1000cc84:	009b      	lsls	r3, r3, #2
1000cc86:	4413      	add	r3, r2
1000cc88:	681a      	ldr	r2, [r3, #0]
1000cc8a:	687b      	ldr	r3, [r7, #4]
1000cc8c:	6919      	ldr	r1, [r3, #16]
1000cc8e:	683b      	ldr	r3, [r7, #0]
1000cc90:	400b      	ands	r3, r1
			: METAL_BAD_PHYS);
1000cc92:	4413      	add	r3, r2
1000cc94:	e008      	b.n	1000cca8 <metal_io_phys+0x66>
1000cc96:	f04f 33ff 	mov.w	r3, #4294967295
1000cc9a:	e005      	b.n	1000cca8 <metal_io_phys+0x66>
	return io->ops.offset_to_phys(io, offset);
1000cc9c:	687b      	ldr	r3, [r7, #4]
1000cc9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000cca0:	6839      	ldr	r1, [r7, #0]
1000cca2:	6878      	ldr	r0, [r7, #4]
1000cca4:	4798      	blx	r3
1000cca6:	4603      	mov	r3, r0
}
1000cca8:	4618      	mov	r0, r3
1000ccaa:	3710      	adds	r7, #16
1000ccac:	46bd      	mov	sp, r7
1000ccae:	bd80      	pop	{r7, pc}

1000ccb0 <metal_io_phys_to_offset>:
{
1000ccb0:	b580      	push	{r7, lr}
1000ccb2:	b084      	sub	sp, #16
1000ccb4:	af00      	add	r7, sp, #0
1000ccb6:	6078      	str	r0, [r7, #4]
1000ccb8:	6039      	str	r1, [r7, #0]
	if (!io->ops.phys_to_offset) {
1000ccba:	687b      	ldr	r3, [r7, #4]
1000ccbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000ccbe:	2b00      	cmp	r3, #0
1000ccc0:	d127      	bne.n	1000cd12 <metal_io_phys_to_offset+0x62>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
1000ccc2:	687b      	ldr	r3, [r7, #4]
1000ccc4:	691b      	ldr	r3, [r3, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
1000ccc6:	f1b3 3fff 	cmp.w	r3, #4294967295
1000ccca:	d105      	bne.n	1000ccd8 <metal_io_phys_to_offset+0x28>
1000cccc:	687b      	ldr	r3, [r7, #4]
1000ccce:	685b      	ldr	r3, [r3, #4]
1000ccd0:	681b      	ldr	r3, [r3, #0]
1000ccd2:	683a      	ldr	r2, [r7, #0]
1000ccd4:	1ad3      	subs	r3, r2, r3
1000ccd6:	e003      	b.n	1000cce0 <metal_io_phys_to_offset+0x30>
1000ccd8:	687b      	ldr	r3, [r7, #4]
1000ccda:	691a      	ldr	r2, [r3, #16]
1000ccdc:	683b      	ldr	r3, [r7, #0]
1000ccde:	4013      	ands	r3, r2
		unsigned long offset =
1000cce0:	60fb      	str	r3, [r7, #12]
			if (metal_io_phys(io, offset) == phys)
1000cce2:	68f9      	ldr	r1, [r7, #12]
1000cce4:	6878      	ldr	r0, [r7, #4]
1000cce6:	f7ff ffac 	bl	1000cc42 <metal_io_phys>
1000ccea:	4602      	mov	r2, r0
1000ccec:	683b      	ldr	r3, [r7, #0]
1000ccee:	4293      	cmp	r3, r2
1000ccf0:	d101      	bne.n	1000ccf6 <metal_io_phys_to_offset+0x46>
				return offset;
1000ccf2:	68fb      	ldr	r3, [r7, #12]
1000ccf4:	e013      	b.n	1000cd1e <metal_io_phys_to_offset+0x6e>
			offset += io->page_mask + 1;
1000ccf6:	687b      	ldr	r3, [r7, #4]
1000ccf8:	691a      	ldr	r2, [r3, #16]
1000ccfa:	68fb      	ldr	r3, [r7, #12]
1000ccfc:	4413      	add	r3, r2
1000ccfe:	3301      	adds	r3, #1
1000cd00:	60fb      	str	r3, [r7, #12]
		} while (offset < io->size);
1000cd02:	687b      	ldr	r3, [r7, #4]
1000cd04:	689b      	ldr	r3, [r3, #8]
1000cd06:	68fa      	ldr	r2, [r7, #12]
1000cd08:	429a      	cmp	r2, r3
1000cd0a:	d3ea      	bcc.n	1000cce2 <metal_io_phys_to_offset+0x32>
		return METAL_BAD_OFFSET;
1000cd0c:	f04f 33ff 	mov.w	r3, #4294967295
1000cd10:	e005      	b.n	1000cd1e <metal_io_phys_to_offset+0x6e>
	return (*io->ops.phys_to_offset)(io, phys);
1000cd12:	687b      	ldr	r3, [r7, #4]
1000cd14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000cd16:	6839      	ldr	r1, [r7, #0]
1000cd18:	6878      	ldr	r0, [r7, #4]
1000cd1a:	4798      	blx	r3
1000cd1c:	4603      	mov	r3, r0
}
1000cd1e:	4618      	mov	r0, r3
1000cd20:	3710      	adds	r7, #16
1000cd22:	46bd      	mov	sp, r7
1000cd24:	bd80      	pop	{r7, pc}

1000cd26 <metal_io_phys_to_virt>:
{
1000cd26:	b580      	push	{r7, lr}
1000cd28:	b082      	sub	sp, #8
1000cd2a:	af00      	add	r7, sp, #0
1000cd2c:	6078      	str	r0, [r7, #4]
1000cd2e:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
1000cd30:	6839      	ldr	r1, [r7, #0]
1000cd32:	6878      	ldr	r0, [r7, #4]
1000cd34:	f7ff ffbc 	bl	1000ccb0 <metal_io_phys_to_offset>
1000cd38:	4603      	mov	r3, r0
1000cd3a:	4619      	mov	r1, r3
1000cd3c:	6878      	ldr	r0, [r7, #4]
1000cd3e:	f7ff ff64 	bl	1000cc0a <metal_io_virt>
1000cd42:	4603      	mov	r3, r0
}
1000cd44:	4618      	mov	r0, r3
1000cd46:	3708      	adds	r7, #8
1000cd48:	46bd      	mov	sp, r7
1000cd4a:	bd80      	pop	{r7, pc}

1000cd4c <virtqueue_phys_to_virt>:
#endif /* VIRTIO_CACHED_VRINGS */

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
1000cd4c:	b580      	push	{r7, lr}
1000cd4e:	b084      	sub	sp, #16
1000cd50:	af00      	add	r7, sp, #0
1000cd52:	6078      	str	r0, [r7, #4]
1000cd54:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
1000cd56:	687b      	ldr	r3, [r7, #4]
1000cd58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000cd5a:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
1000cd5c:	6839      	ldr	r1, [r7, #0]
1000cd5e:	68f8      	ldr	r0, [r7, #12]
1000cd60:	f7ff ffe1 	bl	1000cd26 <metal_io_phys_to_virt>
1000cd64:	4603      	mov	r3, r0
}
1000cd66:	4618      	mov	r0, r3
1000cd68:	3710      	adds	r7, #16
1000cd6a:	46bd      	mov	sp, r7
1000cd6c:	bd80      	pop	{r7, pc}

1000cd6e <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
1000cd6e:	b580      	push	{r7, lr}
1000cd70:	b086      	sub	sp, #24
1000cd72:	af00      	add	r7, sp, #0
1000cd74:	60f8      	str	r0, [r7, #12]
1000cd76:	607a      	str	r2, [r7, #4]
1000cd78:	603b      	str	r3, [r7, #0]
1000cd7a:	460b      	mov	r3, r1
1000cd7c:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
1000cd7e:	2300      	movs	r3, #0
1000cd80:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
1000cd82:	697b      	ldr	r3, [r7, #20]
1000cd84:	2b00      	cmp	r3, #0
1000cd86:	d11e      	bne.n	1000cdc6 <virtqueue_create+0x58>
		vq->vq_dev = virt_dev;
1000cd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000cd8a:	68fa      	ldr	r2, [r7, #12]
1000cd8c:	601a      	str	r2, [r3, #0]
		vq->vq_name = name;
1000cd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000cd90:	687a      	ldr	r2, [r7, #4]
1000cd92:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
1000cd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000cd96:	897a      	ldrh	r2, [r7, #10]
1000cd98:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
1000cd9a:	683b      	ldr	r3, [r7, #0]
1000cd9c:	891a      	ldrh	r2, [r3, #8]
1000cd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000cda0:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
1000cda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000cda4:	895a      	ldrh	r2, [r3, #10]
1000cda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000cda8:	849a      	strh	r2, [r3, #36]	; 0x24
		vq->callback = callback;
1000cdaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000cdac:	6a3a      	ldr	r2, [r7, #32]
1000cdae:	60da      	str	r2, [r3, #12]
		vq->notify = notify;
1000cdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000cdb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000cdb4:	611a      	str	r2, [r3, #16]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, ring->vaddr, ring->align);
1000cdb6:	683b      	ldr	r3, [r7, #0]
1000cdb8:	6819      	ldr	r1, [r3, #0]
1000cdba:	683b      	ldr	r3, [r7, #0]
1000cdbc:	685b      	ldr	r3, [r3, #4]
1000cdbe:	461a      	mov	r2, r3
1000cdc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1000cdc2:	f000 f8ef 	bl	1000cfa4 <vq_ring_init>
	/*
	 * CACHE: nothing to be done here. Only desc.next is setup at this
	 * stage but that is only written by master, so no need to flush it.
	 */

	return status;
1000cdc6:	697b      	ldr	r3, [r7, #20]
}
1000cdc8:	4618      	mov	r0, r3
1000cdca:	3718      	adds	r7, #24
1000cdcc:	46bd      	mov	sp, r7
1000cdce:	bd80      	pop	{r7, pc}

1000cdd0 <virtqueue_get_buffer_length>:

	return cookie;
}

uint32_t virtqueue_get_buffer_length(struct virtqueue *vq, uint16_t idx)
{
1000cdd0:	b480      	push	{r7}
1000cdd2:	b083      	sub	sp, #12
1000cdd4:	af00      	add	r7, sp, #0
1000cdd6:	6078      	str	r0, [r7, #4]
1000cdd8:	460b      	mov	r3, r1
1000cdda:	807b      	strh	r3, [r7, #2]
	VRING_INVALIDATE(vq->vq_ring.desc[idx].len);
	return vq->vq_ring.desc[idx].len;
1000cddc:	687b      	ldr	r3, [r7, #4]
1000cdde:	699a      	ldr	r2, [r3, #24]
1000cde0:	887b      	ldrh	r3, [r7, #2]
1000cde2:	011b      	lsls	r3, r3, #4
1000cde4:	4413      	add	r3, r2
1000cde6:	689b      	ldr	r3, [r3, #8]
}
1000cde8:	4618      	mov	r0, r3
1000cdea:	370c      	adds	r7, #12
1000cdec:	46bd      	mov	sp, r7
1000cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
1000cdf2:	4770      	bx	lr

1000cdf4 <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
1000cdf4:	b580      	push	{r7, lr}
1000cdf6:	b086      	sub	sp, #24
1000cdf8:	af00      	add	r7, sp, #0
1000cdfa:	60f8      	str	r0, [r7, #12]
1000cdfc:	60b9      	str	r1, [r7, #8]
1000cdfe:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
1000ce00:	2300      	movs	r3, #0
1000ce02:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
1000ce04:	f3bf 8f5b 	dmb	ish

	/* Avail.idx is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->idx);
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
1000ce08:	68fb      	ldr	r3, [r7, #12]
1000ce0a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
1000ce0c:	68fb      	ldr	r3, [r7, #12]
1000ce0e:	69db      	ldr	r3, [r3, #28]
1000ce10:	885b      	ldrh	r3, [r3, #2]
1000ce12:	b29b      	uxth	r3, r3
1000ce14:	429a      	cmp	r2, r3
1000ce16:	d101      	bne.n	1000ce1c <virtqueue_get_available_buffer+0x28>
		return NULL;
1000ce18:	2300      	movs	r3, #0
1000ce1a:	e02f      	b.n	1000ce7c <virtqueue_get_available_buffer+0x88>
	VQUEUE_BUSY(vq);

	/* Avail.ring is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->ring[head_idx]);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
1000ce1c:	68fb      	ldr	r3, [r7, #12]
1000ce1e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
1000ce20:	1c5a      	adds	r2, r3, #1
1000ce22:	b291      	uxth	r1, r2
1000ce24:	68fa      	ldr	r2, [r7, #12]
1000ce26:	8611      	strh	r1, [r2, #48]	; 0x30
1000ce28:	b21a      	sxth	r2, r3
1000ce2a:	68fb      	ldr	r3, [r7, #12]
1000ce2c:	895b      	ldrh	r3, [r3, #10]
1000ce2e:	3b01      	subs	r3, #1
1000ce30:	b29b      	uxth	r3, r3
1000ce32:	b21b      	sxth	r3, r3
1000ce34:	4013      	ands	r3, r2
1000ce36:	b21b      	sxth	r3, r3
1000ce38:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
1000ce3a:	68fb      	ldr	r3, [r7, #12]
1000ce3c:	69da      	ldr	r2, [r3, #28]
1000ce3e:	8afb      	ldrh	r3, [r7, #22]
1000ce40:	005b      	lsls	r3, r3, #1
1000ce42:	4413      	add	r3, r2
1000ce44:	889b      	ldrh	r3, [r3, #4]
1000ce46:	b29a      	uxth	r2, r3
1000ce48:	68bb      	ldr	r3, [r7, #8]
1000ce4a:	801a      	strh	r2, [r3, #0]

	/* Invalidate the desc entry written by master before accessing it */
	VRING_INVALIDATE(vq->vq_ring.desc[*avail_idx]);
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
1000ce4c:	68fb      	ldr	r3, [r7, #12]
1000ce4e:	699a      	ldr	r2, [r3, #24]
1000ce50:	68bb      	ldr	r3, [r7, #8]
1000ce52:	881b      	ldrh	r3, [r3, #0]
1000ce54:	011b      	lsls	r3, r3, #4
1000ce56:	18d1      	adds	r1, r2, r3
1000ce58:	680a      	ldr	r2, [r1, #0]
1000ce5a:	684b      	ldr	r3, [r1, #4]
1000ce5c:	4613      	mov	r3, r2
1000ce5e:	4619      	mov	r1, r3
1000ce60:	68f8      	ldr	r0, [r7, #12]
1000ce62:	f7ff ff73 	bl	1000cd4c <virtqueue_phys_to_virt>
1000ce66:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
1000ce68:	68fb      	ldr	r3, [r7, #12]
1000ce6a:	699a      	ldr	r2, [r3, #24]
1000ce6c:	68bb      	ldr	r3, [r7, #8]
1000ce6e:	881b      	ldrh	r3, [r3, #0]
1000ce70:	011b      	lsls	r3, r3, #4
1000ce72:	4413      	add	r3, r2
1000ce74:	689a      	ldr	r2, [r3, #8]
1000ce76:	687b      	ldr	r3, [r7, #4]
1000ce78:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
1000ce7a:	693b      	ldr	r3, [r7, #16]
}
1000ce7c:	4618      	mov	r0, r3
1000ce7e:	3718      	adds	r7, #24
1000ce80:	46bd      	mov	sp, r7
1000ce82:	bd80      	pop	{r7, pc}

1000ce84 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
1000ce84:	b480      	push	{r7}
1000ce86:	b087      	sub	sp, #28
1000ce88:	af00      	add	r7, sp, #0
1000ce8a:	60f8      	str	r0, [r7, #12]
1000ce8c:	460b      	mov	r3, r1
1000ce8e:	607a      	str	r2, [r7, #4]
1000ce90:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
1000ce92:	2300      	movs	r3, #0
1000ce94:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
1000ce96:	68fb      	ldr	r3, [r7, #12]
1000ce98:	895b      	ldrh	r3, [r3, #10]
1000ce9a:	897a      	ldrh	r2, [r7, #10]
1000ce9c:	429a      	cmp	r2, r3
1000ce9e:	d901      	bls.n	1000cea4 <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
1000cea0:	4b18      	ldr	r3, [pc, #96]	; (1000cf04 <virtqueue_add_consumed_buffer+0x80>)
1000cea2:	e029      	b.n	1000cef8 <virtqueue_add_consumed_buffer+0x74>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by master, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
1000cea4:	68fb      	ldr	r3, [r7, #12]
1000cea6:	6a1b      	ldr	r3, [r3, #32]
1000cea8:	885b      	ldrh	r3, [r3, #2]
1000ceaa:	b29b      	uxth	r3, r3
1000ceac:	b21a      	sxth	r2, r3
1000ceae:	68fb      	ldr	r3, [r7, #12]
1000ceb0:	895b      	ldrh	r3, [r3, #10]
1000ceb2:	3b01      	subs	r3, #1
1000ceb4:	b29b      	uxth	r3, r3
1000ceb6:	b21b      	sxth	r3, r3
1000ceb8:	4013      	ands	r3, r2
1000ceba:	b21b      	sxth	r3, r3
1000cebc:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
1000cebe:	68fb      	ldr	r3, [r7, #12]
1000cec0:	6a1a      	ldr	r2, [r3, #32]
1000cec2:	8a7b      	ldrh	r3, [r7, #18]
1000cec4:	00db      	lsls	r3, r3, #3
1000cec6:	4413      	add	r3, r2
1000cec8:	3304      	adds	r3, #4
1000ceca:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
1000cecc:	897a      	ldrh	r2, [r7, #10]
1000cece:	697b      	ldr	r3, [r7, #20]
1000ced0:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
1000ced2:	697b      	ldr	r3, [r7, #20]
1000ced4:	687a      	ldr	r2, [r7, #4]
1000ced6:	605a      	str	r2, [r3, #4]

	/* We still need to flush it because this is read by master */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
1000ced8:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
1000cedc:	68fb      	ldr	r3, [r7, #12]
1000cede:	6a1b      	ldr	r3, [r3, #32]
1000cee0:	885a      	ldrh	r2, [r3, #2]
1000cee2:	b292      	uxth	r2, r2
1000cee4:	3201      	adds	r2, #1
1000cee6:	b292      	uxth	r2, r2
1000cee8:	805a      	strh	r2, [r3, #2]

	/* Used.idx is read by master, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
1000ceea:	68fb      	ldr	r3, [r7, #12]
1000ceec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
1000ceee:	3301      	adds	r3, #1
1000cef0:	b29a      	uxth	r2, r3
1000cef2:	68fb      	ldr	r3, [r7, #12]
1000cef4:	84da      	strh	r2, [r3, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
1000cef6:	2300      	movs	r3, #0
}
1000cef8:	4618      	mov	r0, r3
1000cefa:	371c      	adds	r7, #28
1000cefc:	46bd      	mov	sp, r7
1000cefe:	f85d 7b04 	ldr.w	r7, [sp], #4
1000cf02:	4770      	bx	lr
1000cf04:	fffff441 	.word	0xfffff441

1000cf08 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
1000cf08:	b480      	push	{r7}
1000cf0a:	b083      	sub	sp, #12
1000cf0c:	af00      	add	r7, sp, #0
1000cf0e:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
1000cf10:	6879      	ldr	r1, [r7, #4]
1000cf12:	6809      	ldr	r1, [r1, #0]
1000cf14:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
1000cf18:	f000 5200 	and.w	r2, r0, #536870912	; 0x20000000
1000cf1c:	2300      	movs	r3, #0
1000cf1e:	4313      	orrs	r3, r2
1000cf20:	d015      	beq.n	1000cf4e <virtqueue_disable_cb+0x46>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
			VRING_FLUSH(vring_used_event(&vq->vq_ring));
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000cf22:	687b      	ldr	r3, [r7, #4]
1000cf24:	681b      	ldr	r3, [r3, #0]
1000cf26:	699b      	ldr	r3, [r3, #24]
1000cf28:	2b01      	cmp	r3, #1
1000cf2a:	d11f      	bne.n	1000cf6c <virtqueue_disable_cb+0x64>
			vring_avail_event(&vq->vq_ring) =
			    vq->vq_available_idx - vq->vq_nentries - 1;
1000cf2c:	687b      	ldr	r3, [r7, #4]
1000cf2e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
1000cf30:	687b      	ldr	r3, [r7, #4]
1000cf32:	895b      	ldrh	r3, [r3, #10]
1000cf34:	1ad3      	subs	r3, r2, r3
1000cf36:	b299      	uxth	r1, r3
			vring_avail_event(&vq->vq_ring) =
1000cf38:	687b      	ldr	r3, [r7, #4]
1000cf3a:	6a1a      	ldr	r2, [r3, #32]
1000cf3c:	687b      	ldr	r3, [r7, #4]
1000cf3e:	695b      	ldr	r3, [r3, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
1000cf40:	3901      	subs	r1, #1
1000cf42:	b289      	uxth	r1, r1
			vring_avail_event(&vq->vq_ring) =
1000cf44:	00db      	lsls	r3, r3, #3
1000cf46:	4413      	add	r3, r2
1000cf48:	460a      	mov	r2, r1
1000cf4a:	809a      	strh	r2, [r3, #4]
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	VQUEUE_IDLE(vq);
}
1000cf4c:	e00e      	b.n	1000cf6c <virtqueue_disable_cb+0x64>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000cf4e:	687b      	ldr	r3, [r7, #4]
1000cf50:	681b      	ldr	r3, [r3, #0]
1000cf52:	699b      	ldr	r3, [r3, #24]
1000cf54:	2b01      	cmp	r3, #1
1000cf56:	d109      	bne.n	1000cf6c <virtqueue_disable_cb+0x64>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
1000cf58:	687b      	ldr	r3, [r7, #4]
1000cf5a:	6a1b      	ldr	r3, [r3, #32]
1000cf5c:	881b      	ldrh	r3, [r3, #0]
1000cf5e:	b29a      	uxth	r2, r3
1000cf60:	687b      	ldr	r3, [r7, #4]
1000cf62:	6a1b      	ldr	r3, [r3, #32]
1000cf64:	f042 0201 	orr.w	r2, r2, #1
1000cf68:	b292      	uxth	r2, r2
1000cf6a:	801a      	strh	r2, [r3, #0]
}
1000cf6c:	bf00      	nop
1000cf6e:	370c      	adds	r7, #12
1000cf70:	46bd      	mov	sp, r7
1000cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
1000cf76:	4770      	bx	lr

1000cf78 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
1000cf78:	b580      	push	{r7, lr}
1000cf7a:	b082      	sub	sp, #8
1000cf7c:	af00      	add	r7, sp, #0
1000cf7e:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
1000cf80:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify(vq))
1000cf84:	6878      	ldr	r0, [r7, #4]
1000cf86:	f000 f823 	bl	1000cfd0 <vq_ring_must_notify>
1000cf8a:	4603      	mov	r3, r0
1000cf8c:	2b00      	cmp	r3, #0
1000cf8e:	d002      	beq.n	1000cf96 <virtqueue_kick+0x1e>
		vq_ring_notify(vq);
1000cf90:	6878      	ldr	r0, [r7, #4]
1000cf92:	f000 f86b 	bl	1000d06c <vq_ring_notify>

	vq->vq_queued_cnt = 0;
1000cf96:	687b      	ldr	r3, [r7, #4]
1000cf98:	2200      	movs	r2, #0
1000cf9a:	84da      	strh	r2, [r3, #38]	; 0x26

	VQUEUE_IDLE(vq);
}
1000cf9c:	bf00      	nop
1000cf9e:	3708      	adds	r7, #8
1000cfa0:	46bd      	mov	sp, r7
1000cfa2:	bd80      	pop	{r7, pc}

1000cfa4 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
1000cfa4:	b580      	push	{r7, lr}
1000cfa6:	b086      	sub	sp, #24
1000cfa8:	af00      	add	r7, sp, #0
1000cfaa:	60f8      	str	r0, [r7, #12]
1000cfac:	60b9      	str	r1, [r7, #8]
1000cfae:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int size;

	size = vq->vq_nentries;
1000cfb0:	68fb      	ldr	r3, [r7, #12]
1000cfb2:	895b      	ldrh	r3, [r3, #10]
1000cfb4:	617b      	str	r3, [r7, #20]
	vr = &vq->vq_ring;
1000cfb6:	68fb      	ldr	r3, [r7, #12]
1000cfb8:	3314      	adds	r3, #20
1000cfba:	613b      	str	r3, [r7, #16]

	vring_init(vr, size, ring_mem, alignment);
1000cfbc:	6979      	ldr	r1, [r7, #20]
1000cfbe:	687b      	ldr	r3, [r7, #4]
1000cfc0:	68ba      	ldr	r2, [r7, #8]
1000cfc2:	6938      	ldr	r0, [r7, #16]
1000cfc4:	f7ff fdda 	bl	1000cb7c <vring_init>
		for (i = 0; i < size - 1; i++)
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
	}
#endif /*VIRTIO_SLAVE_ONLY*/
}
1000cfc8:	bf00      	nop
1000cfca:	3718      	adds	r7, #24
1000cfcc:	46bd      	mov	sp, r7
1000cfce:	bd80      	pop	{r7, pc}

1000cfd0 <vq_ring_must_notify>:
 *
 * vq_ring_must_notify
 *
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
1000cfd0:	b580      	push	{r7, lr}
1000cfd2:	b084      	sub	sp, #16
1000cfd4:	af00      	add	r7, sp, #0
1000cfd6:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
1000cfd8:	6879      	ldr	r1, [r7, #4]
1000cfda:	6809      	ldr	r1, [r1, #0]
1000cfdc:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
1000cfe0:	f000 5200 	and.w	r2, r0, #536870912	; 0x20000000
1000cfe4:	2300      	movs	r3, #0
1000cfe6:	4313      	orrs	r3, r2
1000cfe8:	d02a      	beq.n	1000d040 <vq_ring_must_notify+0x70>
			return vring_need_event(event_idx, new_idx,
						prev_idx) != 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000cfea:	687b      	ldr	r3, [r7, #4]
1000cfec:	681b      	ldr	r3, [r3, #0]
1000cfee:	699b      	ldr	r3, [r3, #24]
1000cff0:	2b01      	cmp	r3, #1
1000cff2:	d136      	bne.n	1000d062 <vq_ring_must_notify+0x92>
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
1000cff4:	687b      	ldr	r3, [r7, #4]
1000cff6:	6a1b      	ldr	r3, [r3, #32]
1000cff8:	789a      	ldrb	r2, [r3, #2]
1000cffa:	78db      	ldrb	r3, [r3, #3]
1000cffc:	021b      	lsls	r3, r3, #8
1000cffe:	4313      	orrs	r3, r2
1000d000:	81fb      	strh	r3, [r7, #14]
			prev_idx = new_idx - vq->vq_queued_cnt;
1000d002:	687b      	ldr	r3, [r7, #4]
1000d004:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
1000d006:	89fa      	ldrh	r2, [r7, #14]
1000d008:	1ad3      	subs	r3, r2, r3
1000d00a:	81bb      	strh	r3, [r7, #12]
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
1000d00c:	687b      	ldr	r3, [r7, #4]
1000d00e:	69da      	ldr	r2, [r3, #28]
1000d010:	687b      	ldr	r3, [r7, #4]
1000d012:	6959      	ldr	r1, [r3, #20]
1000d014:	004b      	lsls	r3, r1, #1
1000d016:	4413      	add	r3, r2
1000d018:	7918      	ldrb	r0, [r3, #4]
1000d01a:	004b      	lsls	r3, r1, #1
1000d01c:	4413      	add	r3, r2
1000d01e:	795b      	ldrb	r3, [r3, #5]
1000d020:	021b      	lsls	r3, r3, #8
1000d022:	4303      	orrs	r3, r0
1000d024:	817b      	strh	r3, [r7, #10]
			return vring_need_event(event_idx, new_idx,
1000d026:	89ba      	ldrh	r2, [r7, #12]
1000d028:	89f9      	ldrh	r1, [r7, #14]
1000d02a:	897b      	ldrh	r3, [r7, #10]
1000d02c:	4618      	mov	r0, r3
1000d02e:	f7ff fdce 	bl	1000cbce <vring_need_event>
1000d032:	4603      	mov	r3, r0
						prev_idx) != 0;
1000d034:	2b00      	cmp	r3, #0
1000d036:	bf14      	ite	ne
1000d038:	2301      	movne	r3, #1
1000d03a:	2300      	moveq	r3, #0
1000d03c:	b2db      	uxtb	r3, r3
1000d03e:	e011      	b.n	1000d064 <vq_ring_must_notify+0x94>
			return (vq->vq_ring.used->flags &
				VRING_USED_F_NO_NOTIFY) == 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000d040:	687b      	ldr	r3, [r7, #4]
1000d042:	681b      	ldr	r3, [r3, #0]
1000d044:	699b      	ldr	r3, [r3, #24]
1000d046:	2b01      	cmp	r3, #1
1000d048:	d10b      	bne.n	1000d062 <vq_ring_must_notify+0x92>
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
1000d04a:	687b      	ldr	r3, [r7, #4]
1000d04c:	69db      	ldr	r3, [r3, #28]
1000d04e:	881b      	ldrh	r3, [r3, #0]
1000d050:	b29b      	uxth	r3, r3
1000d052:	f003 0301 	and.w	r3, r3, #1
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
1000d056:	2b00      	cmp	r3, #0
1000d058:	bf0c      	ite	eq
1000d05a:	2301      	moveq	r3, #1
1000d05c:	2300      	movne	r3, #0
1000d05e:	b2db      	uxtb	r3, r3
1000d060:	e000      	b.n	1000d064 <vq_ring_must_notify+0x94>
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	return 0;
1000d062:	2300      	movs	r3, #0
}
1000d064:	4618      	mov	r0, r3
1000d066:	3710      	adds	r7, #16
1000d068:	46bd      	mov	sp, r7
1000d06a:	bd80      	pop	{r7, pc}

1000d06c <vq_ring_notify>:
 *
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
1000d06c:	b580      	push	{r7, lr}
1000d06e:	b082      	sub	sp, #8
1000d070:	af00      	add	r7, sp, #0
1000d072:	6078      	str	r0, [r7, #4]
	if (vq->notify)
1000d074:	687b      	ldr	r3, [r7, #4]
1000d076:	691b      	ldr	r3, [r3, #16]
1000d078:	2b00      	cmp	r3, #0
1000d07a:	d003      	beq.n	1000d084 <vq_ring_notify+0x18>
		vq->notify(vq);
1000d07c:	687b      	ldr	r3, [r7, #4]
1000d07e:	691b      	ldr	r3, [r3, #16]
1000d080:	6878      	ldr	r0, [r7, #4]
1000d082:	4798      	blx	r3
}
1000d084:	bf00      	nop
1000d086:	3708      	adds	r7, #8
1000d088:	46bd      	mov	sp, r7
1000d08a:	bd80      	pop	{r7, pc}

1000d08c <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
1000d08c:	b580      	push	{r7, lr}
1000d08e:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN PRE_MAILBOX_INIT */

   /* USER CODE END  PRE_MAILBOX_INIT */

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_1, IPCC_CHANNEL_DIR_RX,
1000d090:	4b0d      	ldr	r3, [pc, #52]	; (1000d0c8 <MAILBOX_Init+0x3c>)
1000d092:	2201      	movs	r2, #1
1000d094:	2100      	movs	r1, #0
1000d096:	480d      	ldr	r0, [pc, #52]	; (1000d0cc <MAILBOX_Init+0x40>)
1000d098:	f7f6 ff24 	bl	10003ee4 <HAL_IPCC_ActivateNotification>
1000d09c:	4603      	mov	r3, r0
1000d09e:	2b00      	cmp	r3, #0
1000d0a0:	d002      	beq.n	1000d0a8 <MAILBOX_Init+0x1c>
          IPCC_channel1_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_1 RX fail\n", __func__);
    return -1;
1000d0a2:	f04f 33ff 	mov.w	r3, #4294967295
1000d0a6:	e00c      	b.n	1000d0c2 <MAILBOX_Init+0x36>
  }

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_2, IPCC_CHANNEL_DIR_RX,
1000d0a8:	4b09      	ldr	r3, [pc, #36]	; (1000d0d0 <MAILBOX_Init+0x44>)
1000d0aa:	2201      	movs	r2, #1
1000d0ac:	2101      	movs	r1, #1
1000d0ae:	4807      	ldr	r0, [pc, #28]	; (1000d0cc <MAILBOX_Init+0x40>)
1000d0b0:	f7f6 ff18 	bl	10003ee4 <HAL_IPCC_ActivateNotification>
1000d0b4:	4603      	mov	r3, r0
1000d0b6:	2b00      	cmp	r3, #0
1000d0b8:	d002      	beq.n	1000d0c0 <MAILBOX_Init+0x34>
          IPCC_channel2_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_2 RX fail\n", __func__);
    return -1;
1000d0ba:	f04f 33ff 	mov.w	r3, #4294967295
1000d0be:	e000      	b.n	1000d0c2 <MAILBOX_Init+0x36>
  }

  /* USER CODE BEGIN POST_MAILBOX_INIT */

  /* USER CODE END  POST_MAILBOX_INIT */
  return 0;
1000d0c0:	2300      	movs	r3, #0
}
1000d0c2:	4618      	mov	r0, r3
1000d0c4:	bd80      	pop	{r7, pc}
1000d0c6:	bf00      	nop
1000d0c8:	1000d139 	.word	0x1000d139
1000d0cc:	10020ee8 	.word	0x10020ee8
1000d0d0:	1000d165 	.word	0x1000d165

1000d0d4 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
1000d0d4:	b580      	push	{r7, lr}
1000d0d6:	b084      	sub	sp, #16
1000d0d8:	af00      	add	r7, sp, #0
1000d0da:	6078      	str	r0, [r7, #4]
1000d0dc:	6039      	str	r1, [r7, #0]
   /* USER CODE BEGIN PRE_MAILBOX_NOTIFY */

   /* USER CODE END  PRE_MAILBOX_NOTIFY */

  /* Called after virtqueue processing: time to inform the remote */
  if (id == VRING0_ID) {
1000d0de:	683b      	ldr	r3, [r7, #0]
1000d0e0:	2b00      	cmp	r3, #0
1000d0e2:	d102      	bne.n	1000d0ea <MAILBOX_Notify+0x16>
    channel = IPCC_CHANNEL_1;
1000d0e4:	2300      	movs	r3, #0
1000d0e6:	60fb      	str	r3, [r7, #12]
1000d0e8:	e008      	b.n	1000d0fc <MAILBOX_Notify+0x28>
    OPENAMP_log_dbg("Send msg on ch_1\r\n");
  }
  else if (id == VRING1_ID) {
1000d0ea:	683b      	ldr	r3, [r7, #0]
1000d0ec:	2b01      	cmp	r3, #1
1000d0ee:	d102      	bne.n	1000d0f6 <MAILBOX_Notify+0x22>
    /* Note: the OpenAMP framework never notifies this */
    channel = IPCC_CHANNEL_2;
1000d0f0:	2301      	movs	r3, #1
1000d0f2:	60fb      	str	r3, [r7, #12]
1000d0f4:	e002      	b.n	1000d0fc <MAILBOX_Notify+0x28>
    OPENAMP_log_dbg("Send 'buff free' on ch_2\r\n");
  }
  else {
    OPENAMP_log_err("invalid vring (%d)\r\n", (int)id);
    return -1;
1000d0f6:	f04f 33ff 	mov.w	r3, #4294967295
1000d0fa:	e016      	b.n	1000d12a <MAILBOX_Notify+0x56>
  }

  /* Check that the channel is free (otherwise wait until it is) */
  if (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED) {
1000d0fc:	2200      	movs	r2, #0
1000d0fe:	68f9      	ldr	r1, [r7, #12]
1000d100:	480c      	ldr	r0, [pc, #48]	; (1000d134 <MAILBOX_Notify+0x60>)
1000d102:	f7f6 ff3d 	bl	10003f80 <HAL_IPCC_GetChannelStatus>
1000d106:	4603      	mov	r3, r0
1000d108:	2b01      	cmp	r3, #1
1000d10a:	d108      	bne.n	1000d11e <MAILBOX_Notify+0x4a>
    OPENAMP_log_dbg("Waiting for channel to be freed\r\n");
    while (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED)
1000d10c:	bf00      	nop
1000d10e:	2200      	movs	r2, #0
1000d110:	68f9      	ldr	r1, [r7, #12]
1000d112:	4808      	ldr	r0, [pc, #32]	; (1000d134 <MAILBOX_Notify+0x60>)
1000d114:	f7f6 ff34 	bl	10003f80 <HAL_IPCC_GetChannelStatus>
1000d118:	4603      	mov	r3, r0
1000d11a:	2b01      	cmp	r3, #1
1000d11c:	d0f7      	beq.n	1000d10e <MAILBOX_Notify+0x3a>
      ;
  }

  /* Inform A7 (either new message, or buf free) */
  HAL_IPCC_NotifyCPU(&hipcc, channel, IPCC_CHANNEL_DIR_TX);
1000d11e:	2200      	movs	r2, #0
1000d120:	68f9      	ldr	r1, [r7, #12]
1000d122:	4804      	ldr	r0, [pc, #16]	; (1000d134 <MAILBOX_Notify+0x60>)
1000d124:	f7f6 ff60 	bl	10003fe8 <HAL_IPCC_NotifyCPU>

 /* USER CODE BEGIN POST_MAILBOX_NOTIFY */

 /* USER CODE END  POST_MAILBOX_NOTIFY */

  return 0;
1000d128:	2300      	movs	r3, #0
}
1000d12a:	4618      	mov	r0, r3
1000d12c:	3710      	adds	r7, #16
1000d12e:	46bd      	mov	sp, r7
1000d130:	bd80      	pop	{r7, pc}
1000d132:	bf00      	nop
1000d134:	10020ee8 	.word	0x10020ee8

1000d138 <IPCC_channel1_callback>:

/* USER CODE END 0 */
/* Callback from IPCC Interrupt Handler: Master Processor informs that there are some free buffers */
void IPCC_channel1_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
1000d138:	b580      	push	{r7, lr}
1000d13a:	b084      	sub	sp, #16
1000d13c:	af00      	add	r7, sp, #0
1000d13e:	60f8      	str	r0, [r7, #12]
1000d140:	60b9      	str	r1, [r7, #8]
1000d142:	4613      	mov	r3, r2
1000d144:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL1_CALLBACK */

  if (msg_received_ch1 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel1_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch1);

  msg_received_ch1 = MBOX_BUF_FREE;
1000d146:	4b06      	ldr	r3, [pc, #24]	; (1000d160 <IPCC_channel1_callback+0x28>)
1000d148:	2202      	movs	r2, #2
1000d14a:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the 'buff free' msg */
  OPENAMP_log_dbg("Ack 'buff free' message on ch1\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
1000d14c:	2201      	movs	r2, #1
1000d14e:	68b9      	ldr	r1, [r7, #8]
1000d150:	68f8      	ldr	r0, [r7, #12]
1000d152:	f7f6 ff49 	bl	10003fe8 <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL1_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL1_CALLBACK */
}
1000d156:	bf00      	nop
1000d158:	3710      	adds	r7, #16
1000d15a:	46bd      	mov	sp, r7
1000d15c:	bd80      	pop	{r7, pc}
1000d15e:	bf00      	nop
1000d160:	10029bd4 	.word	0x10029bd4

1000d164 <IPCC_channel2_callback>:

/* Callback from IPCC Interrupt Handler: new message received from Master Processor */
void IPCC_channel2_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
1000d164:	b580      	push	{r7, lr}
1000d166:	b084      	sub	sp, #16
1000d168:	af00      	add	r7, sp, #0
1000d16a:	60f8      	str	r0, [r7, #12]
1000d16c:	60b9      	str	r1, [r7, #8]
1000d16e:	4613      	mov	r3, r2
1000d170:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL2_CALLBACK */

  if (msg_received_ch2 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel2_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch2);

  msg_received_ch2 = MBOX_NEW_MSG;
1000d172:	4b06      	ldr	r3, [pc, #24]	; (1000d18c <IPCC_channel2_callback+0x28>)
1000d174:	2201      	movs	r2, #1
1000d176:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the new msg */
  OPENAMP_log_dbg("Ack new message on ch2\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
1000d178:	2201      	movs	r2, #1
1000d17a:	68b9      	ldr	r1, [r7, #8]
1000d17c:	68f8      	ldr	r0, [r7, #12]
1000d17e:	f7f6 ff33 	bl	10003fe8 <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL2_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL2_CALLBACK */
}
1000d182:	bf00      	nop
1000d184:	3710      	adds	r7, #16
1000d186:	46bd      	mov	sp, r7
1000d188:	bd80      	pop	{r7, pc}
1000d18a:	bf00      	nop
1000d18c:	10029bd8 	.word	0x10029bd8

1000d190 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
1000d190:	b480      	push	{r7}
1000d192:	b083      	sub	sp, #12
1000d194:	af00      	add	r7, sp, #0
1000d196:	6078      	str	r0, [r7, #4]
1000d198:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
1000d19a:	687b      	ldr	r3, [r7, #4]
1000d19c:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
1000d19e:	683a      	ldr	r2, [r7, #0]
1000d1a0:	429a      	cmp	r2, r3
1000d1a2:	d209      	bcs.n	1000d1b8 <metal_device_io_region+0x28>
1000d1a4:	683a      	ldr	r2, [r7, #0]
1000d1a6:	4613      	mov	r3, r2
1000d1a8:	00db      	lsls	r3, r3, #3
1000d1aa:	1a9b      	subs	r3, r3, r2
1000d1ac:	00db      	lsls	r3, r3, #3
1000d1ae:	3308      	adds	r3, #8
1000d1b0:	687a      	ldr	r2, [r7, #4]
1000d1b2:	4413      	add	r3, r2
1000d1b4:	3304      	adds	r3, #4
1000d1b6:	e000      	b.n	1000d1ba <metal_device_io_region+0x2a>
1000d1b8:	2300      	movs	r3, #0
}
1000d1ba:	4618      	mov	r0, r3
1000d1bc:	370c      	adds	r7, #12
1000d1be:	46bd      	mov	sp, r7
1000d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
1000d1c4:	4770      	bx	lr
	...

1000d1c8 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
1000d1c8:	b590      	push	{r4, r7, lr}
1000d1ca:	b08d      	sub	sp, #52	; 0x34
1000d1cc:	af04      	add	r7, sp, #16
1000d1ce:	6078      	str	r0, [r7, #4]
  int status = 0;
1000d1d0:	2300      	movs	r3, #0
1000d1d2:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
1000d1d4:	2300      	movs	r3, #0
1000d1d6:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
1000d1d8:	4a41      	ldr	r2, [pc, #260]	; (1000d2e0 <OPENAMP_shmem_init+0x118>)
1000d1da:	f107 0310 	add.w	r3, r7, #16
1000d1de:	e892 0003 	ldmia.w	r2, {r0, r1}
1000d1e2:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
1000d1e6:	2300      	movs	r3, #0
1000d1e8:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
1000d1ea:	2300      	movs	r3, #0
1000d1ec:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
1000d1ee:	f107 0310 	add.w	r3, r7, #16
1000d1f2:	4618      	mov	r0, r3
1000d1f4:	f7fe fa5c 	bl	1000b6b0 <metal_init>

  status = metal_register_generic_device(&shm_device);
1000d1f8:	483a      	ldr	r0, [pc, #232]	; (1000d2e4 <OPENAMP_shmem_init+0x11c>)
1000d1fa:	f7fe f903 	bl	1000b404 <metal_register_generic_device>
1000d1fe:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
1000d200:	69fb      	ldr	r3, [r7, #28]
1000d202:	2b00      	cmp	r3, #0
1000d204:	d001      	beq.n	1000d20a <OPENAMP_shmem_init+0x42>
    return status;
1000d206:	69fb      	ldr	r3, [r7, #28]
1000d208:	e066      	b.n	1000d2d8 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
1000d20a:	f107 0318 	add.w	r3, r7, #24
1000d20e:	461a      	mov	r2, r3
1000d210:	4935      	ldr	r1, [pc, #212]	; (1000d2e8 <OPENAMP_shmem_init+0x120>)
1000d212:	4836      	ldr	r0, [pc, #216]	; (1000d2ec <OPENAMP_shmem_init+0x124>)
1000d214:	f7fe f8b8 	bl	1000b388 <metal_device_open>
1000d218:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
1000d21a:	69fb      	ldr	r3, [r7, #28]
1000d21c:	2b00      	cmp	r3, #0
1000d21e:	d001      	beq.n	1000d224 <OPENAMP_shmem_init+0x5c>
    return status;
1000d220:	69fb      	ldr	r3, [r7, #28]
1000d222:	e059      	b.n	1000d2d8 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
1000d224:	4a32      	ldr	r2, [pc, #200]	; (1000d2f0 <OPENAMP_shmem_init+0x128>)
1000d226:	4b33      	ldr	r3, [pc, #204]	; (1000d2f4 <OPENAMP_shmem_init+0x12c>)
1000d228:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
1000d22a:	69bb      	ldr	r3, [r7, #24]
1000d22c:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, (unsigned int)-1, 0, NULL);
1000d230:	4a31      	ldr	r2, [pc, #196]	; (1000d2f8 <OPENAMP_shmem_init+0x130>)
1000d232:	4b2f      	ldr	r3, [pc, #188]	; (1000d2f0 <OPENAMP_shmem_init+0x128>)
1000d234:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
1000d236:	461a      	mov	r2, r3
1000d238:	2300      	movs	r3, #0
1000d23a:	9302      	str	r3, [sp, #8]
1000d23c:	2300      	movs	r3, #0
1000d23e:	9301      	str	r3, [sp, #4]
1000d240:	f04f 33ff 	mov.w	r3, #4294967295
1000d244:	9300      	str	r3, [sp, #0]
1000d246:	4613      	mov	r3, r2
1000d248:	4a2a      	ldr	r2, [pc, #168]	; (1000d2f4 <OPENAMP_shmem_init+0x12c>)
1000d24a:	4929      	ldr	r1, [pc, #164]	; (1000d2f0 <OPENAMP_shmem_init+0x128>)
1000d24c:	f7fe fa7e 	bl	1000b74c <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
1000d250:	69bb      	ldr	r3, [r7, #24]
1000d252:	2100      	movs	r1, #0
1000d254:	4618      	mov	r0, r3
1000d256:	f7ff ff9b 	bl	1000d190 <metal_device_io_region>
1000d25a:	4603      	mov	r3, r0
1000d25c:	4a27      	ldr	r2, [pc, #156]	; (1000d2fc <OPENAMP_shmem_init+0x134>)
1000d25e:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
1000d260:	4b26      	ldr	r3, [pc, #152]	; (1000d2fc <OPENAMP_shmem_init+0x134>)
1000d262:	681b      	ldr	r3, [r3, #0]
1000d264:	2b00      	cmp	r3, #0
1000d266:	d102      	bne.n	1000d26e <OPENAMP_shmem_init+0xa6>
    return -1;
1000d268:	f04f 33ff 	mov.w	r3, #4294967295
1000d26c:	e034      	b.n	1000d2d8 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
1000d26e:	f107 0208 	add.w	r2, r7, #8
1000d272:	f107 030c 	add.w	r3, r7, #12
1000d276:	4619      	mov	r1, r3
1000d278:	6878      	ldr	r0, [r7, #4]
1000d27a:	f000 f8d9 	bl	1000d430 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
1000d27e:	68fb      	ldr	r3, [r7, #12]
1000d280:	4a1f      	ldr	r2, [pc, #124]	; (1000d300 <OPENAMP_shmem_init+0x138>)
1000d282:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
1000d284:	4b1e      	ldr	r3, [pc, #120]	; (1000d300 <OPENAMP_shmem_init+0x138>)
1000d286:	681b      	ldr	r3, [r3, #0]
1000d288:	2b00      	cmp	r3, #0
1000d28a:	d102      	bne.n	1000d292 <OPENAMP_shmem_init+0xca>
  {
    return -1;
1000d28c:	f04f 33ff 	mov.w	r3, #4294967295
1000d290:	e022      	b.n	1000d2d8 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
1000d292:	69bb      	ldr	r3, [r7, #24]
1000d294:	f103 0044 	add.w	r0, r3, #68	; 0x44
1000d298:	4b19      	ldr	r3, [pc, #100]	; (1000d300 <OPENAMP_shmem_init+0x138>)
1000d29a:	6819      	ldr	r1, [r3, #0]
1000d29c:	4b18      	ldr	r3, [pc, #96]	; (1000d300 <OPENAMP_shmem_init+0x138>)
1000d29e:	681a      	ldr	r2, [r3, #0]
1000d2a0:	68bb      	ldr	r3, [r7, #8]
1000d2a2:	461c      	mov	r4, r3
1000d2a4:	2300      	movs	r3, #0
1000d2a6:	9302      	str	r3, [sp, #8]
1000d2a8:	2300      	movs	r3, #0
1000d2aa:	9301      	str	r3, [sp, #4]
1000d2ac:	f04f 33ff 	mov.w	r3, #4294967295
1000d2b0:	9300      	str	r3, [sp, #0]
1000d2b2:	4623      	mov	r3, r4
1000d2b4:	f7fe fa4a 	bl	1000b74c <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
1000d2b8:	69bb      	ldr	r3, [r7, #24]
1000d2ba:	2101      	movs	r1, #1
1000d2bc:	4618      	mov	r0, r3
1000d2be:	f7ff ff67 	bl	1000d190 <metal_device_io_region>
1000d2c2:	4603      	mov	r3, r0
1000d2c4:	4a0f      	ldr	r2, [pc, #60]	; (1000d304 <OPENAMP_shmem_init+0x13c>)
1000d2c6:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
1000d2c8:	4b0e      	ldr	r3, [pc, #56]	; (1000d304 <OPENAMP_shmem_init+0x13c>)
1000d2ca:	681b      	ldr	r3, [r3, #0]
1000d2cc:	2b00      	cmp	r3, #0
1000d2ce:	d102      	bne.n	1000d2d6 <OPENAMP_shmem_init+0x10e>
    return -1;
1000d2d0:	f04f 33ff 	mov.w	r3, #4294967295
1000d2d4:	e000      	b.n	1000d2d8 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
1000d2d6:	2300      	movs	r3, #0
}
1000d2d8:	4618      	mov	r0, r3
1000d2da:	3724      	adds	r7, #36	; 0x24
1000d2dc:	46bd      	mov	sp, r7
1000d2de:	bd90      	pop	{r4, r7, pc}
1000d2e0:	10013248 	.word	0x10013248
1000d2e4:	10020040 	.word	0x10020040
1000d2e8:	10013234 	.word	0x10013234
1000d2ec:	10013240 	.word	0x10013240
1000d2f0:	10040000 	.word	0x10040000
1000d2f4:	10029c80 	.word	0x10029c80
1000d2f8:	10050000 	.word	0x10050000
1000d2fc:	10029bdc 	.word	0x10029bdc
1000d300:	10029be4 	.word	0x10029be4
1000d304:	10029be0 	.word	0x10029be0

1000d308 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
1000d308:	b590      	push	{r4, r7, lr}
1000d30a:	b08b      	sub	sp, #44	; 0x2c
1000d30c:	af04      	add	r7, sp, #16
1000d30e:	6078      	str	r0, [r7, #4]
1000d310:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
1000d312:	2300      	movs	r3, #0
1000d314:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
1000d316:	2300      	movs	r3, #0
1000d318:	613b      	str	r3, [r7, #16]
  int status = 0;
1000d31a:	2300      	movs	r3, #0
1000d31c:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
1000d31e:	f7ff feb5 	bl	1000d08c <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
1000d322:	6878      	ldr	r0, [r7, #4]
1000d324:	f7ff ff50 	bl	1000d1c8 <OPENAMP_shmem_init>
1000d328:	60f8      	str	r0, [r7, #12]
  if(status)
1000d32a:	68fb      	ldr	r3, [r7, #12]
1000d32c:	2b00      	cmp	r3, #0
1000d32e:	d001      	beq.n	1000d334 <MX_OPENAMP_Init+0x2c>
  {
    return status;
1000d330:	68fb      	ldr	r3, [r7, #12]
1000d332:	e068      	b.n	1000d406 <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
1000d334:	6878      	ldr	r0, [r7, #4]
1000d336:	4b36      	ldr	r3, [pc, #216]	; (1000d410 <MX_OPENAMP_Init+0x108>)
1000d338:	681b      	ldr	r3, [r3, #0]
1000d33a:	f103 0218 	add.w	r2, r3, #24
1000d33e:	4b35      	ldr	r3, [pc, #212]	; (1000d414 <MX_OPENAMP_Init+0x10c>)
1000d340:	681b      	ldr	r3, [r3, #0]
1000d342:	2100      	movs	r1, #0
1000d344:	9102      	str	r1, [sp, #8]
1000d346:	4934      	ldr	r1, [pc, #208]	; (1000d418 <MX_OPENAMP_Init+0x110>)
1000d348:	9101      	str	r1, [sp, #4]
1000d34a:	2100      	movs	r1, #0
1000d34c:	9100      	str	r1, [sp, #0]
1000d34e:	21ff      	movs	r1, #255	; 0xff
1000d350:	f7fe fcfa 	bl	1000bd48 <rproc_virtio_create_vdev>
1000d354:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
1000d356:	693b      	ldr	r3, [r7, #16]
1000d358:	2b00      	cmp	r3, #0
1000d35a:	d102      	bne.n	1000d362 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
1000d35c:	f04f 33ff 	mov.w	r3, #4294967295
1000d360:	e051      	b.n	1000d406 <MX_OPENAMP_Init+0xfe>
  }

  rproc_virtio_wait_remote_ready(vdev);
1000d362:	6938      	ldr	r0, [r7, #16]
1000d364:	f7fe fdcf 	bl	1000bf06 <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
1000d368:	4b29      	ldr	r3, [pc, #164]	; (1000d410 <MX_OPENAMP_Init+0x108>)
1000d36a:	681b      	ldr	r3, [r3, #0]
1000d36c:	3334      	adds	r3, #52	; 0x34
1000d36e:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
1000d370:	697b      	ldr	r3, [r7, #20]
1000d372:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
1000d374:	697b      	ldr	r3, [r7, #20]
1000d376:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
1000d378:	461c      	mov	r4, r3
1000d37a:	4b28      	ldr	r3, [pc, #160]	; (1000d41c <MX_OPENAMP_Init+0x114>)
1000d37c:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
1000d37e:	697a      	ldr	r2, [r7, #20]
1000d380:	6892      	ldr	r2, [r2, #8]
1000d382:	6979      	ldr	r1, [r7, #20]
1000d384:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
1000d386:	9102      	str	r1, [sp, #8]
1000d388:	9201      	str	r2, [sp, #4]
1000d38a:	9300      	str	r3, [sp, #0]
1000d38c:	4623      	mov	r3, r4
1000d38e:	4602      	mov	r2, r0
1000d390:	2100      	movs	r1, #0
1000d392:	6938      	ldr	r0, [r7, #16]
1000d394:	f7fe fd86 	bl	1000bea4 <rproc_virtio_init_vring>
1000d398:	60f8      	str	r0, [r7, #12]
  if (status != 0)
1000d39a:	68fb      	ldr	r3, [r7, #12]
1000d39c:	2b00      	cmp	r3, #0
1000d39e:	d001      	beq.n	1000d3a4 <MX_OPENAMP_Init+0x9c>
  {
    return status;
1000d3a0:	68fb      	ldr	r3, [r7, #12]
1000d3a2:	e030      	b.n	1000d406 <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
1000d3a4:	4b1a      	ldr	r3, [pc, #104]	; (1000d410 <MX_OPENAMP_Init+0x108>)
1000d3a6:	681b      	ldr	r3, [r3, #0]
1000d3a8:	3348      	adds	r3, #72	; 0x48
1000d3aa:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
1000d3ac:	697b      	ldr	r3, [r7, #20]
1000d3ae:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
1000d3b0:	697b      	ldr	r3, [r7, #20]
1000d3b2:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
1000d3b4:	461c      	mov	r4, r3
1000d3b6:	4b19      	ldr	r3, [pc, #100]	; (1000d41c <MX_OPENAMP_Init+0x114>)
1000d3b8:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
1000d3ba:	697a      	ldr	r2, [r7, #20]
1000d3bc:	6892      	ldr	r2, [r2, #8]
1000d3be:	6979      	ldr	r1, [r7, #20]
1000d3c0:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
1000d3c2:	9102      	str	r1, [sp, #8]
1000d3c4:	9201      	str	r2, [sp, #4]
1000d3c6:	9300      	str	r3, [sp, #0]
1000d3c8:	4623      	mov	r3, r4
1000d3ca:	4602      	mov	r2, r0
1000d3cc:	2101      	movs	r1, #1
1000d3ce:	6938      	ldr	r0, [r7, #16]
1000d3d0:	f7fe fd68 	bl	1000bea4 <rproc_virtio_init_vring>
1000d3d4:	60f8      	str	r0, [r7, #12]
  if (status != 0)
1000d3d6:	68fb      	ldr	r3, [r7, #12]
1000d3d8:	2b00      	cmp	r3, #0
1000d3da:	d001      	beq.n	1000d3e0 <MX_OPENAMP_Init+0xd8>
  {
    return status;
1000d3dc:	68fb      	ldr	r3, [r7, #12]
1000d3de:	e012      	b.n	1000d406 <MX_OPENAMP_Init+0xfe>
  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
                             (size_t)SHM_SIZE);
1000d3e0:	4a0f      	ldr	r2, [pc, #60]	; (1000d420 <MX_OPENAMP_Init+0x118>)
1000d3e2:	4b10      	ldr	r3, [pc, #64]	; (1000d424 <MX_OPENAMP_Init+0x11c>)
1000d3e4:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
1000d3e6:	461a      	mov	r2, r3
1000d3e8:	f04f 31ff 	mov.w	r1, #4294967295
1000d3ec:	480e      	ldr	r0, [pc, #56]	; (1000d428 <MX_OPENAMP_Init+0x120>)
1000d3ee:	f7fe ff86 	bl	1000c2fe <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
1000d3f2:	4b0a      	ldr	r3, [pc, #40]	; (1000d41c <MX_OPENAMP_Init+0x114>)
1000d3f4:	681b      	ldr	r3, [r3, #0]
1000d3f6:	4a0c      	ldr	r2, [pc, #48]	; (1000d428 <MX_OPENAMP_Init+0x120>)
1000d3f8:	9200      	str	r2, [sp, #0]
1000d3fa:	683a      	ldr	r2, [r7, #0]
1000d3fc:	6939      	ldr	r1, [r7, #16]
1000d3fe:	480b      	ldr	r0, [pc, #44]	; (1000d42c <MX_OPENAMP_Init+0x124>)
1000d400:	f7ff fa7a 	bl	1000c8f8 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
1000d404:	2300      	movs	r3, #0
}
1000d406:	4618      	mov	r0, r3
1000d408:	371c      	adds	r7, #28
1000d40a:	46bd      	mov	sp, r7
1000d40c:	bd90      	pop	{r4, r7, pc}
1000d40e:	bf00      	nop
1000d410:	10029be4 	.word	0x10029be4
1000d414:	10029be0 	.word	0x10029be0
1000d418:	1000d0d5 	.word	0x1000d0d5
1000d41c:	10029bdc 	.word	0x10029bdc
1000d420:	10050000 	.word	0x10050000
1000d424:	10040000 	.word	0x10040000
1000d428:	10029be8 	.word	0x10029be8
1000d42c:	10029bf4 	.word	0x10029bf4

1000d430 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
1000d430:	b480      	push	{r7}
1000d432:	b085      	sub	sp, #20
1000d434:	af00      	add	r7, sp, #0
1000d436:	60f8      	str	r0, [r7, #12]
1000d438:	60b9      	str	r1, [r7, #8]
1000d43a:	607a      	str	r2, [r7, #4]
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
1000d43c:	687b      	ldr	r3, [r7, #4]
1000d43e:	228c      	movs	r2, #140	; 0x8c
1000d440:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
1000d442:	68bb      	ldr	r3, [r7, #8]
1000d444:	4a03      	ldr	r2, [pc, #12]	; (1000d454 <resource_table_init+0x24>)
1000d446:	601a      	str	r2, [r3, #0]
}
1000d448:	bf00      	nop
1000d44a:	3714      	adds	r7, #20
1000d44c:	46bd      	mov	sp, r7
1000d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
1000d452:	4770      	bx	lr
1000d454:	10020d40 	.word	0x10020d40

1000d458 <emotion_model_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool emotion_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
1000d458:	b580      	push	{r7, lr}
1000d45a:	b082      	sub	sp, #8
1000d45c:	af00      	add	r7, sp, #0
1000d45e:	6078      	str	r0, [r7, #4]
1000d460:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_emotion_model_activations_map, 1, params)) {
1000d462:	683a      	ldr	r2, [r7, #0]
1000d464:	2101      	movs	r1, #1
1000d466:	483a      	ldr	r0, [pc, #232]	; (1000d550 <emotion_model_configure_activations+0xf8>)
1000d468:	f000 fb32 	bl	1000dad0 <ai_platform_get_activations_map>
1000d46c:	4603      	mov	r3, r0
1000d46e:	2b00      	cmp	r3, #0
1000d470:	d063      	beq.n	1000d53a <emotion_model_configure_activations+0xe2>
    /* Updating activations (byte) offsets */
    
    serving_default_conv1d_1_input0_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000d472:	4b37      	ldr	r3, [pc, #220]	; (1000d550 <emotion_model_configure_activations+0xf8>)
1000d474:	681b      	ldr	r3, [r3, #0]
1000d476:	4a37      	ldr	r2, [pc, #220]	; (1000d554 <emotion_model_configure_activations+0xfc>)
1000d478:	6093      	str	r3, [r2, #8]
    serving_default_conv1d_1_input0_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000d47a:	4b35      	ldr	r3, [pc, #212]	; (1000d550 <emotion_model_configure_activations+0xf8>)
1000d47c:	681b      	ldr	r3, [r3, #0]
1000d47e:	4a35      	ldr	r2, [pc, #212]	; (1000d554 <emotion_model_configure_activations+0xfc>)
1000d480:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 2000);
1000d482:	4b33      	ldr	r3, [pc, #204]	; (1000d550 <emotion_model_configure_activations+0xf8>)
1000d484:	681b      	ldr	r3, [r3, #0]
1000d486:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
1000d48a:	4a33      	ldr	r2, [pc, #204]	; (1000d558 <emotion_model_configure_activations+0x100>)
1000d48c:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 2000);
1000d48e:	4b30      	ldr	r3, [pc, #192]	; (1000d550 <emotion_model_configure_activations+0xf8>)
1000d490:	681b      	ldr	r3, [r3, #0]
1000d492:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
1000d496:	4a30      	ldr	r2, [pc, #192]	; (1000d558 <emotion_model_configure_activations+0x100>)
1000d498:	60d3      	str	r3, [r2, #12]
    
    nl_1_nl_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 2000);
1000d49a:	4b2d      	ldr	r3, [pc, #180]	; (1000d550 <emotion_model_configure_activations+0xf8>)
1000d49c:	681b      	ldr	r3, [r3, #0]
1000d49e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
1000d4a2:	4a2e      	ldr	r2, [pc, #184]	; (1000d55c <emotion_model_configure_activations+0x104>)
1000d4a4:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 2000);
1000d4a6:	4b2a      	ldr	r3, [pc, #168]	; (1000d550 <emotion_model_configure_activations+0xf8>)
1000d4a8:	681b      	ldr	r3, [r3, #0]
1000d4aa:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
1000d4ae:	4a2b      	ldr	r2, [pc, #172]	; (1000d55c <emotion_model_configure_activations+0x104>)
1000d4b0:	60d3      	str	r3, [r2, #12]
    
    pool_4_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 2000);
1000d4b2:	4b27      	ldr	r3, [pc, #156]	; (1000d550 <emotion_model_configure_activations+0xf8>)
1000d4b4:	681b      	ldr	r3, [r3, #0]
1000d4b6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
1000d4ba:	4a29      	ldr	r2, [pc, #164]	; (1000d560 <emotion_model_configure_activations+0x108>)
1000d4bc:	6093      	str	r3, [r2, #8]
    pool_4_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 2000);
1000d4be:	4b24      	ldr	r3, [pc, #144]	; (1000d550 <emotion_model_configure_activations+0xf8>)
1000d4c0:	681b      	ldr	r3, [r3, #0]
1000d4c2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
1000d4c6:	4a26      	ldr	r2, [pc, #152]	; (1000d560 <emotion_model_configure_activations+0x108>)
1000d4c8:	60d3      	str	r3, [r2, #12]
    
    gemm_6_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000d4ca:	4b21      	ldr	r3, [pc, #132]	; (1000d550 <emotion_model_configure_activations+0xf8>)
1000d4cc:	681b      	ldr	r3, [r3, #0]
1000d4ce:	4a25      	ldr	r2, [pc, #148]	; (1000d564 <emotion_model_configure_activations+0x10c>)
1000d4d0:	6093      	str	r3, [r2, #8]
    gemm_6_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000d4d2:	4b1f      	ldr	r3, [pc, #124]	; (1000d550 <emotion_model_configure_activations+0xf8>)
1000d4d4:	681b      	ldr	r3, [r3, #0]
1000d4d6:	4a23      	ldr	r2, [pc, #140]	; (1000d564 <emotion_model_configure_activations+0x10c>)
1000d4d8:	60d3      	str	r3, [r2, #12]
    
    nl_7_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 32);
1000d4da:	4b1d      	ldr	r3, [pc, #116]	; (1000d550 <emotion_model_configure_activations+0xf8>)
1000d4dc:	681b      	ldr	r3, [r3, #0]
1000d4de:	3320      	adds	r3, #32
1000d4e0:	4a21      	ldr	r2, [pc, #132]	; (1000d568 <emotion_model_configure_activations+0x110>)
1000d4e2:	6093      	str	r3, [r2, #8]
    nl_7_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 32);
1000d4e4:	4b1a      	ldr	r3, [pc, #104]	; (1000d550 <emotion_model_configure_activations+0xf8>)
1000d4e6:	681b      	ldr	r3, [r3, #0]
1000d4e8:	3320      	adds	r3, #32
1000d4ea:	4a1f      	ldr	r2, [pc, #124]	; (1000d568 <emotion_model_configure_activations+0x110>)
1000d4ec:	60d3      	str	r3, [r2, #12]
    
    gemm_8_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000d4ee:	4b18      	ldr	r3, [pc, #96]	; (1000d550 <emotion_model_configure_activations+0xf8>)
1000d4f0:	681b      	ldr	r3, [r3, #0]
1000d4f2:	4a1e      	ldr	r2, [pc, #120]	; (1000d56c <emotion_model_configure_activations+0x114>)
1000d4f4:	6093      	str	r3, [r2, #8]
    gemm_8_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000d4f6:	4b16      	ldr	r3, [pc, #88]	; (1000d550 <emotion_model_configure_activations+0xf8>)
1000d4f8:	681b      	ldr	r3, [r3, #0]
1000d4fa:	4a1c      	ldr	r2, [pc, #112]	; (1000d56c <emotion_model_configure_activations+0x114>)
1000d4fc:	60d3      	str	r3, [r2, #12]
    
    nl_9_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 16);
1000d4fe:	4b14      	ldr	r3, [pc, #80]	; (1000d550 <emotion_model_configure_activations+0xf8>)
1000d500:	681b      	ldr	r3, [r3, #0]
1000d502:	3310      	adds	r3, #16
1000d504:	4a1a      	ldr	r2, [pc, #104]	; (1000d570 <emotion_model_configure_activations+0x118>)
1000d506:	6093      	str	r3, [r2, #8]
    nl_9_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 16);
1000d508:	4b11      	ldr	r3, [pc, #68]	; (1000d550 <emotion_model_configure_activations+0xf8>)
1000d50a:	681b      	ldr	r3, [r3, #0]
1000d50c:	3310      	adds	r3, #16
1000d50e:	4a18      	ldr	r2, [pc, #96]	; (1000d570 <emotion_model_configure_activations+0x118>)
1000d510:	60d3      	str	r3, [r2, #12]
    
    gemm_10_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000d512:	4b0f      	ldr	r3, [pc, #60]	; (1000d550 <emotion_model_configure_activations+0xf8>)
1000d514:	681b      	ldr	r3, [r3, #0]
1000d516:	4a17      	ldr	r2, [pc, #92]	; (1000d574 <emotion_model_configure_activations+0x11c>)
1000d518:	6093      	str	r3, [r2, #8]
    gemm_10_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000d51a:	4b0d      	ldr	r3, [pc, #52]	; (1000d550 <emotion_model_configure_activations+0xf8>)
1000d51c:	681b      	ldr	r3, [r3, #0]
1000d51e:	4a15      	ldr	r2, [pc, #84]	; (1000d574 <emotion_model_configure_activations+0x11c>)
1000d520:	60d3      	str	r3, [r2, #12]
    
    nl_11_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 8);
1000d522:	4b0b      	ldr	r3, [pc, #44]	; (1000d550 <emotion_model_configure_activations+0xf8>)
1000d524:	681b      	ldr	r3, [r3, #0]
1000d526:	3308      	adds	r3, #8
1000d528:	4a13      	ldr	r2, [pc, #76]	; (1000d578 <emotion_model_configure_activations+0x120>)
1000d52a:	6093      	str	r3, [r2, #8]
    nl_11_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 8);
1000d52c:	4b08      	ldr	r3, [pc, #32]	; (1000d550 <emotion_model_configure_activations+0xf8>)
1000d52e:	681b      	ldr	r3, [r3, #0]
1000d530:	3308      	adds	r3, #8
1000d532:	4a11      	ldr	r2, [pc, #68]	; (1000d578 <emotion_model_configure_activations+0x120>)
1000d534:	60d3      	str	r3, [r2, #12]
    
    return true;
1000d536:	2301      	movs	r3, #1
1000d538:	e005      	b.n	1000d546 <emotion_model_configure_activations+0xee>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
1000d53a:	2213      	movs	r2, #19
1000d53c:	2130      	movs	r1, #48	; 0x30
1000d53e:	6878      	ldr	r0, [r7, #4]
1000d540:	f000 fb76 	bl	1000dc30 <ai_platform_network_set_error>
  return false;
1000d544:	2300      	movs	r3, #0
}
1000d546:	4618      	mov	r0, r3
1000d548:	3708      	adds	r7, #8
1000d54a:	46bd      	mov	sp, r7
1000d54c:	bd80      	pop	{r7, pc}
1000d54e:	bf00      	nop
1000d550:	10029c84 	.word	0x10029c84
1000d554:	100200ec 	.word	0x100200ec
1000d558:	1002010c 	.word	0x1002010c
1000d55c:	1002011c 	.word	0x1002011c
1000d560:	1002013c 	.word	0x1002013c
1000d564:	1002015c 	.word	0x1002015c
1000d568:	1002016c 	.word	0x1002016c
1000d56c:	1002018c 	.word	0x1002018c
1000d570:	1002019c 	.word	0x1002019c
1000d574:	100201ac 	.word	0x100201ac
1000d578:	100201bc 	.word	0x100201bc

1000d57c <emotion_model_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool emotion_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
1000d57c:	b580      	push	{r7, lr}
1000d57e:	b082      	sub	sp, #8
1000d580:	af00      	add	r7, sp, #0
1000d582:	6078      	str	r0, [r7, #4]
1000d584:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_emotion_model_weights_map, 1, params)) {
1000d586:	683a      	ldr	r2, [r7, #0]
1000d588:	2101      	movs	r1, #1
1000d58a:	4856      	ldr	r0, [pc, #344]	; (1000d6e4 <emotion_model_configure_weights+0x168>)
1000d58c:	f000 fa4c 	bl	1000da28 <ai_platform_get_weights_map>
1000d590:	4603      	mov	r3, r0
1000d592:	2b00      	cmp	r3, #0
1000d594:	f000 809b 	beq.w	1000d6ce <emotion_model_configure_weights+0x152>
    /* Updating weights (byte) offsets */
    
    gemm_6_weights_array.format |= AI_FMT_FLAG_CONST;
1000d598:	4b53      	ldr	r3, [pc, #332]	; (1000d6e8 <emotion_model_configure_weights+0x16c>)
1000d59a:	681b      	ldr	r3, [r3, #0]
1000d59c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000d5a0:	4a51      	ldr	r2, [pc, #324]	; (1000d6e8 <emotion_model_configure_weights+0x16c>)
1000d5a2:	6013      	str	r3, [r2, #0]
    gemm_6_weights_array.data = AI_PTR(g_emotion_model_weights_map[0] + 64);
1000d5a4:	4b4f      	ldr	r3, [pc, #316]	; (1000d6e4 <emotion_model_configure_weights+0x168>)
1000d5a6:	681b      	ldr	r3, [r3, #0]
1000d5a8:	3340      	adds	r3, #64	; 0x40
1000d5aa:	4a4f      	ldr	r2, [pc, #316]	; (1000d6e8 <emotion_model_configure_weights+0x16c>)
1000d5ac:	6093      	str	r3, [r2, #8]
    gemm_6_weights_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 0);
1000d5ae:	4b4d      	ldr	r3, [pc, #308]	; (1000d6e4 <emotion_model_configure_weights+0x168>)
1000d5b0:	681b      	ldr	r3, [r3, #0]
1000d5b2:	4a4d      	ldr	r2, [pc, #308]	; (1000d6e8 <emotion_model_configure_weights+0x16c>)
1000d5b4:	60d3      	str	r3, [r2, #12]
    
    gemm_6_bias_array.format |= AI_FMT_FLAG_CONST;
1000d5b6:	4b4d      	ldr	r3, [pc, #308]	; (1000d6ec <emotion_model_configure_weights+0x170>)
1000d5b8:	681b      	ldr	r3, [r3, #0]
1000d5ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000d5be:	4a4b      	ldr	r2, [pc, #300]	; (1000d6ec <emotion_model_configure_weights+0x170>)
1000d5c0:	6013      	str	r3, [r2, #0]
    gemm_6_bias_array.data = AI_PTR(g_emotion_model_weights_map[0] + 15936);
1000d5c2:	4b48      	ldr	r3, [pc, #288]	; (1000d6e4 <emotion_model_configure_weights+0x168>)
1000d5c4:	681b      	ldr	r3, [r3, #0]
1000d5c6:	f503 5379 	add.w	r3, r3, #15936	; 0x3e40
1000d5ca:	4a48      	ldr	r2, [pc, #288]	; (1000d6ec <emotion_model_configure_weights+0x170>)
1000d5cc:	6093      	str	r3, [r2, #8]
    gemm_6_bias_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 15936);
1000d5ce:	4b45      	ldr	r3, [pc, #276]	; (1000d6e4 <emotion_model_configure_weights+0x168>)
1000d5d0:	681b      	ldr	r3, [r3, #0]
1000d5d2:	f503 5379 	add.w	r3, r3, #15936	; 0x3e40
1000d5d6:	4a45      	ldr	r2, [pc, #276]	; (1000d6ec <emotion_model_configure_weights+0x170>)
1000d5d8:	60d3      	str	r3, [r2, #12]
    
    gemm_8_weights_array.format |= AI_FMT_FLAG_CONST;
1000d5da:	4b45      	ldr	r3, [pc, #276]	; (1000d6f0 <emotion_model_configure_weights+0x174>)
1000d5dc:	681b      	ldr	r3, [r3, #0]
1000d5de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000d5e2:	4a43      	ldr	r2, [pc, #268]	; (1000d6f0 <emotion_model_configure_weights+0x174>)
1000d5e4:	6013      	str	r3, [r2, #0]
    gemm_8_weights_array.data = AI_PTR(g_emotion_model_weights_map[0] + 15968);
1000d5e6:	4b3f      	ldr	r3, [pc, #252]	; (1000d6e4 <emotion_model_configure_weights+0x168>)
1000d5e8:	681b      	ldr	r3, [r3, #0]
1000d5ea:	f503 5379 	add.w	r3, r3, #15936	; 0x3e40
1000d5ee:	3320      	adds	r3, #32
1000d5f0:	4a3f      	ldr	r2, [pc, #252]	; (1000d6f0 <emotion_model_configure_weights+0x174>)
1000d5f2:	6093      	str	r3, [r2, #8]
    gemm_8_weights_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 15968);
1000d5f4:	4b3b      	ldr	r3, [pc, #236]	; (1000d6e4 <emotion_model_configure_weights+0x168>)
1000d5f6:	681b      	ldr	r3, [r3, #0]
1000d5f8:	f503 5379 	add.w	r3, r3, #15936	; 0x3e40
1000d5fc:	3320      	adds	r3, #32
1000d5fe:	4a3c      	ldr	r2, [pc, #240]	; (1000d6f0 <emotion_model_configure_weights+0x174>)
1000d600:	60d3      	str	r3, [r2, #12]
    
    gemm_8_bias_array.format |= AI_FMT_FLAG_CONST;
1000d602:	4b3c      	ldr	r3, [pc, #240]	; (1000d6f4 <emotion_model_configure_weights+0x178>)
1000d604:	681b      	ldr	r3, [r3, #0]
1000d606:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000d60a:	4a3a      	ldr	r2, [pc, #232]	; (1000d6f4 <emotion_model_configure_weights+0x178>)
1000d60c:	6013      	str	r3, [r2, #0]
    gemm_8_bias_array.data = AI_PTR(g_emotion_model_weights_map[0] + 16096);
1000d60e:	4b35      	ldr	r3, [pc, #212]	; (1000d6e4 <emotion_model_configure_weights+0x168>)
1000d610:	681b      	ldr	r3, [r3, #0]
1000d612:	f503 537b 	add.w	r3, r3, #16064	; 0x3ec0
1000d616:	3320      	adds	r3, #32
1000d618:	4a36      	ldr	r2, [pc, #216]	; (1000d6f4 <emotion_model_configure_weights+0x178>)
1000d61a:	6093      	str	r3, [r2, #8]
    gemm_8_bias_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 16096);
1000d61c:	4b31      	ldr	r3, [pc, #196]	; (1000d6e4 <emotion_model_configure_weights+0x168>)
1000d61e:	681b      	ldr	r3, [r3, #0]
1000d620:	f503 537b 	add.w	r3, r3, #16064	; 0x3ec0
1000d624:	3320      	adds	r3, #32
1000d626:	4a33      	ldr	r2, [pc, #204]	; (1000d6f4 <emotion_model_configure_weights+0x178>)
1000d628:	60d3      	str	r3, [r2, #12]
    
    gemm_10_weights_array.format |= AI_FMT_FLAG_CONST;
1000d62a:	4b33      	ldr	r3, [pc, #204]	; (1000d6f8 <emotion_model_configure_weights+0x17c>)
1000d62c:	681b      	ldr	r3, [r3, #0]
1000d62e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000d632:	4a31      	ldr	r2, [pc, #196]	; (1000d6f8 <emotion_model_configure_weights+0x17c>)
1000d634:	6013      	str	r3, [r2, #0]
    gemm_10_weights_array.data = AI_PTR(g_emotion_model_weights_map[0] + 16112);
1000d636:	4b2b      	ldr	r3, [pc, #172]	; (1000d6e4 <emotion_model_configure_weights+0x168>)
1000d638:	681b      	ldr	r3, [r3, #0]
1000d63a:	f503 537b 	add.w	r3, r3, #16064	; 0x3ec0
1000d63e:	3330      	adds	r3, #48	; 0x30
1000d640:	4a2d      	ldr	r2, [pc, #180]	; (1000d6f8 <emotion_model_configure_weights+0x17c>)
1000d642:	6093      	str	r3, [r2, #8]
    gemm_10_weights_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 16112);
1000d644:	4b27      	ldr	r3, [pc, #156]	; (1000d6e4 <emotion_model_configure_weights+0x168>)
1000d646:	681b      	ldr	r3, [r3, #0]
1000d648:	f503 537b 	add.w	r3, r3, #16064	; 0x3ec0
1000d64c:	3330      	adds	r3, #48	; 0x30
1000d64e:	4a2a      	ldr	r2, [pc, #168]	; (1000d6f8 <emotion_model_configure_weights+0x17c>)
1000d650:	60d3      	str	r3, [r2, #12]
    
    gemm_10_bias_array.format |= AI_FMT_FLAG_CONST;
1000d652:	4b2a      	ldr	r3, [pc, #168]	; (1000d6fc <emotion_model_configure_weights+0x180>)
1000d654:	681b      	ldr	r3, [r3, #0]
1000d656:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000d65a:	4a28      	ldr	r2, [pc, #160]	; (1000d6fc <emotion_model_configure_weights+0x180>)
1000d65c:	6013      	str	r3, [r2, #0]
    gemm_10_bias_array.data = AI_PTR(g_emotion_model_weights_map[0] + 16144);
1000d65e:	4b21      	ldr	r3, [pc, #132]	; (1000d6e4 <emotion_model_configure_weights+0x168>)
1000d660:	681b      	ldr	r3, [r3, #0]
1000d662:	f503 537c 	add.w	r3, r3, #16128	; 0x3f00
1000d666:	3310      	adds	r3, #16
1000d668:	4a24      	ldr	r2, [pc, #144]	; (1000d6fc <emotion_model_configure_weights+0x180>)
1000d66a:	6093      	str	r3, [r2, #8]
    gemm_10_bias_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 16144);
1000d66c:	4b1d      	ldr	r3, [pc, #116]	; (1000d6e4 <emotion_model_configure_weights+0x168>)
1000d66e:	681b      	ldr	r3, [r3, #0]
1000d670:	f503 537c 	add.w	r3, r3, #16128	; 0x3f00
1000d674:	3310      	adds	r3, #16
1000d676:	4a21      	ldr	r2, [pc, #132]	; (1000d6fc <emotion_model_configure_weights+0x180>)
1000d678:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
1000d67a:	4b21      	ldr	r3, [pc, #132]	; (1000d700 <emotion_model_configure_weights+0x184>)
1000d67c:	681b      	ldr	r3, [r3, #0]
1000d67e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000d682:	4a1f      	ldr	r2, [pc, #124]	; (1000d700 <emotion_model_configure_weights+0x184>)
1000d684:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_emotion_model_weights_map[0] + 16152);
1000d686:	4b17      	ldr	r3, [pc, #92]	; (1000d6e4 <emotion_model_configure_weights+0x168>)
1000d688:	681b      	ldr	r3, [r3, #0]
1000d68a:	f503 537c 	add.w	r3, r3, #16128	; 0x3f00
1000d68e:	3318      	adds	r3, #24
1000d690:	4a1b      	ldr	r2, [pc, #108]	; (1000d700 <emotion_model_configure_weights+0x184>)
1000d692:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 16152);
1000d694:	4b13      	ldr	r3, [pc, #76]	; (1000d6e4 <emotion_model_configure_weights+0x168>)
1000d696:	681b      	ldr	r3, [r3, #0]
1000d698:	f503 537c 	add.w	r3, r3, #16128	; 0x3f00
1000d69c:	3318      	adds	r3, #24
1000d69e:	4a18      	ldr	r2, [pc, #96]	; (1000d700 <emotion_model_configure_weights+0x184>)
1000d6a0:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
1000d6a2:	4b18      	ldr	r3, [pc, #96]	; (1000d704 <emotion_model_configure_weights+0x188>)
1000d6a4:	681b      	ldr	r3, [r3, #0]
1000d6a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000d6aa:	4a16      	ldr	r2, [pc, #88]	; (1000d704 <emotion_model_configure_weights+0x188>)
1000d6ac:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_emotion_model_weights_map[0] + 16472);
1000d6ae:	4b0d      	ldr	r3, [pc, #52]	; (1000d6e4 <emotion_model_configure_weights+0x168>)
1000d6b0:	681b      	ldr	r3, [r3, #0]
1000d6b2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
1000d6b6:	3358      	adds	r3, #88	; 0x58
1000d6b8:	4a12      	ldr	r2, [pc, #72]	; (1000d704 <emotion_model_configure_weights+0x188>)
1000d6ba:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 16472);
1000d6bc:	4b09      	ldr	r3, [pc, #36]	; (1000d6e4 <emotion_model_configure_weights+0x168>)
1000d6be:	681b      	ldr	r3, [r3, #0]
1000d6c0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
1000d6c4:	3358      	adds	r3, #88	; 0x58
1000d6c6:	4a0f      	ldr	r2, [pc, #60]	; (1000d704 <emotion_model_configure_weights+0x188>)
1000d6c8:	60d3      	str	r3, [r2, #12]
    
    return true;
1000d6ca:	2301      	movs	r3, #1
1000d6cc:	e005      	b.n	1000d6da <emotion_model_configure_weights+0x15e>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
1000d6ce:	2212      	movs	r2, #18
1000d6d0:	2130      	movs	r1, #48	; 0x30
1000d6d2:	6878      	ldr	r0, [r7, #4]
1000d6d4:	f000 faac 	bl	1000dc30 <ai_platform_network_set_error>
  return false;
1000d6d8:	2300      	movs	r3, #0
}
1000d6da:	4618      	mov	r0, r3
1000d6dc:	3708      	adds	r7, #8
1000d6de:	46bd      	mov	sp, r7
1000d6e0:	bd80      	pop	{r7, pc}
1000d6e2:	bf00      	nop
1000d6e4:	10029c88 	.word	0x10029c88
1000d6e8:	100200cc 	.word	0x100200cc
1000d6ec:	100200dc 	.word	0x100200dc
1000d6f0:	100200fc 	.word	0x100200fc
1000d6f4:	1002012c 	.word	0x1002012c
1000d6f8:	1002014c 	.word	0x1002014c
1000d6fc:	1002017c 	.word	0x1002017c
1000d700:	100201cc 	.word	0x100201cc
1000d704:	100201dc 	.word	0x100201dc

1000d708 <ai_emotion_model_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_emotion_model_get_error(ai_handle network)
{
1000d708:	b580      	push	{r7, lr}
1000d70a:	b082      	sub	sp, #8
1000d70c:	af00      	add	r7, sp, #0
1000d70e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
1000d710:	6878      	ldr	r0, [r7, #4]
1000d712:	f000 fa53 	bl	1000dbbc <ai_platform_network_get_error>
1000d716:	4603      	mov	r3, r0
}
1000d718:	4618      	mov	r0, r3
1000d71a:	3708      	adds	r7, #8
1000d71c:	46bd      	mov	sp, r7
1000d71e:	bd80      	pop	{r7, pc}

1000d720 <ai_emotion_model_create>:

AI_API_ENTRY
ai_error ai_emotion_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
1000d720:	b580      	push	{r7, lr}
1000d722:	b084      	sub	sp, #16
1000d724:	af02      	add	r7, sp, #8
1000d726:	6078      	str	r0, [r7, #4]
1000d728:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
1000d72a:	2300      	movs	r3, #0
1000d72c:	9301      	str	r3, [sp, #4]
1000d72e:	2305      	movs	r3, #5
1000d730:	9300      	str	r3, [sp, #0]
1000d732:	2301      	movs	r3, #1
1000d734:	4a04      	ldr	r2, [pc, #16]	; (1000d748 <ai_emotion_model_create+0x28>)
1000d736:	6839      	ldr	r1, [r7, #0]
1000d738:	6878      	ldr	r0, [r7, #4]
1000d73a:	f000 fbb3 	bl	1000dea4 <ai_platform_network_create>
1000d73e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
1000d740:	4618      	mov	r0, r3
1000d742:	3708      	adds	r7, #8
1000d744:	46bd      	mov	sp, r7
1000d746:	bd80      	pop	{r7, pc}
1000d748:	10020ad4 	.word	0x10020ad4

1000d74c <ai_emotion_model_create_and_init>:

AI_API_ENTRY
ai_error ai_emotion_model_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
1000d74c:	b580      	push	{r7, lr}
1000d74e:	b096      	sub	sp, #88	; 0x58
1000d750:	af00      	add	r7, sp, #0
1000d752:	60f8      	str	r0, [r7, #12]
1000d754:	60b9      	str	r1, [r7, #8]
1000d756:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_emotion_model_create(network, AI_EMOTION_MODEL_DATA_CONFIG);
1000d758:	2100      	movs	r1, #0
1000d75a:	68f8      	ldr	r0, [r7, #12]
1000d75c:	f7ff ffe0 	bl	1000d720 <ai_emotion_model_create>
1000d760:	4603      	mov	r3, r0
1000d762:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
1000d764:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
1000d768:	2b00      	cmp	r3, #0
1000d76a:	d001      	beq.n	1000d770 <ai_emotion_model_create_and_init+0x24>
        return err;
1000d76c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1000d76e:	e05d      	b.n	1000d82c <ai_emotion_model_create_and_init+0xe0>
    if (ai_emotion_model_data_params_get(&params) != true) {
1000d770:	f107 0314 	add.w	r3, r7, #20
1000d774:	4618      	mov	r0, r3
1000d776:	f000 f8dd 	bl	1000d934 <ai_emotion_model_data_params_get>
1000d77a:	4603      	mov	r3, r0
1000d77c:	f083 0301 	eor.w	r3, r3, #1
1000d780:	b2db      	uxtb	r3, r3
1000d782:	2b00      	cmp	r3, #0
1000d784:	d008      	beq.n	1000d798 <ai_emotion_model_create_and_init+0x4c>
        err = ai_emotion_model_get_error(*network);
1000d786:	68fb      	ldr	r3, [r7, #12]
1000d788:	681b      	ldr	r3, [r3, #0]
1000d78a:	4618      	mov	r0, r3
1000d78c:	f7ff ffbc 	bl	1000d708 <ai_emotion_model_get_error>
1000d790:	4603      	mov	r3, r0
1000d792:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
1000d794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1000d796:	e049      	b.n	1000d82c <ai_emotion_model_create_and_init+0xe0>
    }
#if defined(AI_EMOTION_MODEL_DATA_ACTIVATIONS_COUNT)
    if (activations) {
1000d798:	68bb      	ldr	r3, [r7, #8]
1000d79a:	2b00      	cmp	r3, #0
1000d79c:	d016      	beq.n	1000d7cc <ai_emotion_model_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
1000d79e:	2300      	movs	r3, #0
1000d7a0:	657b      	str	r3, [r7, #84]	; 0x54
1000d7a2:	e00e      	b.n	1000d7c2 <ai_emotion_model_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
1000d7a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
1000d7a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1000d7a8:	009b      	lsls	r3, r3, #2
1000d7aa:	68ba      	ldr	r2, [r7, #8]
1000d7ac:	4413      	add	r3, r2
1000d7ae:	681a      	ldr	r2, [r3, #0]
1000d7b0:	f107 0314 	add.w	r3, r7, #20
1000d7b4:	330c      	adds	r3, #12
1000d7b6:	4618      	mov	r0, r3
1000d7b8:	f000 f922 	bl	1000da00 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
1000d7bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1000d7be:	3301      	adds	r3, #1
1000d7c0:	657b      	str	r3, [r7, #84]	; 0x54
1000d7c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
1000d7c4:	461a      	mov	r2, r3
1000d7c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1000d7c8:	4293      	cmp	r3, r2
1000d7ca:	dbeb      	blt.n	1000d7a4 <ai_emotion_model_create_and_init+0x58>
    }
#endif
#if defined(AI_EMOTION_MODEL_DATA_WEIGHTS_COUNT)
    if (weights) {
1000d7cc:	687b      	ldr	r3, [r7, #4]
1000d7ce:	2b00      	cmp	r3, #0
1000d7d0:	d016      	beq.n	1000d800 <ai_emotion_model_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
1000d7d2:	2300      	movs	r3, #0
1000d7d4:	653b      	str	r3, [r7, #80]	; 0x50
1000d7d6:	e00e      	b.n	1000d7f6 <ai_emotion_model_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
1000d7d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
1000d7da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1000d7dc:	009b      	lsls	r3, r3, #2
1000d7de:	687a      	ldr	r2, [r7, #4]
1000d7e0:	4413      	add	r3, r2
1000d7e2:	681a      	ldr	r2, [r3, #0]
1000d7e4:	f107 0314 	add.w	r3, r7, #20
1000d7e8:	3304      	adds	r3, #4
1000d7ea:	4618      	mov	r0, r3
1000d7ec:	f000 f908 	bl	1000da00 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
1000d7f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1000d7f2:	3301      	adds	r3, #1
1000d7f4:	653b      	str	r3, [r7, #80]	; 0x50
1000d7f6:	8b7b      	ldrh	r3, [r7, #26]
1000d7f8:	461a      	mov	r2, r3
1000d7fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1000d7fc:	4293      	cmp	r3, r2
1000d7fe:	dbeb      	blt.n	1000d7d8 <ai_emotion_model_create_and_init+0x8c>
    }
#endif
    if (ai_emotion_model_init(*network, &params) != true) {
1000d800:	68fb      	ldr	r3, [r7, #12]
1000d802:	681b      	ldr	r3, [r3, #0]
1000d804:	f107 0214 	add.w	r2, r7, #20
1000d808:	4611      	mov	r1, r2
1000d80a:	4618      	mov	r0, r3
1000d80c:	f000 f846 	bl	1000d89c <ai_emotion_model_init>
1000d810:	4603      	mov	r3, r0
1000d812:	f083 0301 	eor.w	r3, r3, #1
1000d816:	b2db      	uxtb	r3, r3
1000d818:	2b00      	cmp	r3, #0
1000d81a:	d006      	beq.n	1000d82a <ai_emotion_model_create_and_init+0xde>
        err = ai_emotion_model_get_error(*network);
1000d81c:	68fb      	ldr	r3, [r7, #12]
1000d81e:	681b      	ldr	r3, [r3, #0]
1000d820:	4618      	mov	r0, r3
1000d822:	f7ff ff71 	bl	1000d708 <ai_emotion_model_get_error>
1000d826:	4603      	mov	r3, r0
1000d828:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
1000d82a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
1000d82c:	4618      	mov	r0, r3
1000d82e:	3758      	adds	r7, #88	; 0x58
1000d830:	46bd      	mov	sp, r7
1000d832:	bd80      	pop	{r7, pc}

1000d834 <ai_emotion_model_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_emotion_model_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
1000d834:	b580      	push	{r7, lr}
1000d836:	b082      	sub	sp, #8
1000d838:	af00      	add	r7, sp, #0
1000d83a:	6078      	str	r0, [r7, #4]
1000d83c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
1000d83e:	687b      	ldr	r3, [r7, #4]
1000d840:	2b00      	cmp	r3, #0
1000d842:	d104      	bne.n	1000d84e <ai_emotion_model_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
1000d844:	4b06      	ldr	r3, [pc, #24]	; (1000d860 <ai_emotion_model_inputs_get+0x2c>)
1000d846:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
1000d848:	687b      	ldr	r3, [r7, #4]
1000d84a:	4a06      	ldr	r2, [pc, #24]	; (1000d864 <ai_emotion_model_inputs_get+0x30>)
1000d84c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
1000d84e:	6839      	ldr	r1, [r7, #0]
1000d850:	6878      	ldr	r0, [r7, #4]
1000d852:	f000 f9f3 	bl	1000dc3c <ai_platform_inputs_get>
1000d856:	4603      	mov	r3, r0
}
1000d858:	4618      	mov	r0, r3
1000d85a:	3708      	adds	r7, #8
1000d85c:	46bd      	mov	sp, r7
1000d85e:	bd80      	pop	{r7, pc}
1000d860:	10020ad4 	.word	0x10020ad4
1000d864:	a1c00100 	.word	0xa1c00100

1000d868 <ai_emotion_model_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_emotion_model_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
1000d868:	b580      	push	{r7, lr}
1000d86a:	b082      	sub	sp, #8
1000d86c:	af00      	add	r7, sp, #0
1000d86e:	6078      	str	r0, [r7, #4]
1000d870:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
1000d872:	687b      	ldr	r3, [r7, #4]
1000d874:	2b00      	cmp	r3, #0
1000d876:	d104      	bne.n	1000d882 <ai_emotion_model_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
1000d878:	4b06      	ldr	r3, [pc, #24]	; (1000d894 <ai_emotion_model_outputs_get+0x2c>)
1000d87a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
1000d87c:	687b      	ldr	r3, [r7, #4]
1000d87e:	4a06      	ldr	r2, [pc, #24]	; (1000d898 <ai_emotion_model_outputs_get+0x30>)
1000d880:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
1000d882:	6839      	ldr	r1, [r7, #0]
1000d884:	6878      	ldr	r0, [r7, #4]
1000d886:	f000 fa75 	bl	1000dd74 <ai_platform_outputs_get>
1000d88a:	4603      	mov	r3, r0
}
1000d88c:	4618      	mov	r0, r3
1000d88e:	3708      	adds	r7, #8
1000d890:	46bd      	mov	sp, r7
1000d892:	bd80      	pop	{r7, pc}
1000d894:	10020ad4 	.word	0x10020ad4
1000d898:	a1c00100 	.word	0xa1c00100

1000d89c <ai_emotion_model_init>:
}

AI_API_ENTRY
ai_bool ai_emotion_model_init(
  ai_handle network, const ai_network_params* params)
{
1000d89c:	b580      	push	{r7, lr}
1000d89e:	b084      	sub	sp, #16
1000d8a0:	af00      	add	r7, sp, #0
1000d8a2:	6078      	str	r0, [r7, #4]
1000d8a4:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
1000d8a6:	6839      	ldr	r1, [r7, #0]
1000d8a8:	6878      	ldr	r0, [r7, #4]
1000d8aa:	f000 fb83 	bl	1000dfb4 <ai_platform_network_init>
1000d8ae:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
1000d8b0:	68fb      	ldr	r3, [r7, #12]
1000d8b2:	2b00      	cmp	r3, #0
1000d8b4:	d101      	bne.n	1000d8ba <ai_emotion_model_init+0x1e>
1000d8b6:	2300      	movs	r3, #0
1000d8b8:	e028      	b.n	1000d90c <ai_emotion_model_init+0x70>

  ai_bool ok = true;
1000d8ba:	2301      	movs	r3, #1
1000d8bc:	72fb      	strb	r3, [r7, #11]
  ok &= emotion_model_configure_weights(net_ctx, params);
1000d8be:	6839      	ldr	r1, [r7, #0]
1000d8c0:	68f8      	ldr	r0, [r7, #12]
1000d8c2:	f7ff fe5b 	bl	1000d57c <emotion_model_configure_weights>
1000d8c6:	4603      	mov	r3, r0
1000d8c8:	461a      	mov	r2, r3
1000d8ca:	7afb      	ldrb	r3, [r7, #11]
1000d8cc:	4013      	ands	r3, r2
1000d8ce:	2b00      	cmp	r3, #0
1000d8d0:	bf14      	ite	ne
1000d8d2:	2301      	movne	r3, #1
1000d8d4:	2300      	moveq	r3, #0
1000d8d6:	72fb      	strb	r3, [r7, #11]
  ok &= emotion_model_configure_activations(net_ctx, params);
1000d8d8:	6839      	ldr	r1, [r7, #0]
1000d8da:	68f8      	ldr	r0, [r7, #12]
1000d8dc:	f7ff fdbc 	bl	1000d458 <emotion_model_configure_activations>
1000d8e0:	4603      	mov	r3, r0
1000d8e2:	461a      	mov	r2, r3
1000d8e4:	7afb      	ldrb	r3, [r7, #11]
1000d8e6:	4013      	ands	r3, r2
1000d8e8:	2b00      	cmp	r3, #0
1000d8ea:	bf14      	ite	ne
1000d8ec:	2301      	movne	r3, #1
1000d8ee:	2300      	moveq	r3, #0
1000d8f0:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
1000d8f2:	6878      	ldr	r0, [r7, #4]
1000d8f4:	f000 fc12 	bl	1000e11c <ai_platform_network_post_init>
1000d8f8:	4603      	mov	r3, r0
1000d8fa:	461a      	mov	r2, r3
1000d8fc:	7afb      	ldrb	r3, [r7, #11]
1000d8fe:	4013      	ands	r3, r2
1000d900:	2b00      	cmp	r3, #0
1000d902:	bf14      	ite	ne
1000d904:	2301      	movne	r3, #1
1000d906:	2300      	moveq	r3, #0
1000d908:	72fb      	strb	r3, [r7, #11]

  return ok;
1000d90a:	7afb      	ldrb	r3, [r7, #11]
}
1000d90c:	4618      	mov	r0, r3
1000d90e:	3710      	adds	r7, #16
1000d910:	46bd      	mov	sp, r7
1000d912:	bd80      	pop	{r7, pc}

1000d914 <ai_emotion_model_run>:


AI_API_ENTRY
ai_i32 ai_emotion_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
1000d914:	b580      	push	{r7, lr}
1000d916:	b084      	sub	sp, #16
1000d918:	af00      	add	r7, sp, #0
1000d91a:	60f8      	str	r0, [r7, #12]
1000d91c:	60b9      	str	r1, [r7, #8]
1000d91e:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
1000d920:	687a      	ldr	r2, [r7, #4]
1000d922:	68b9      	ldr	r1, [r7, #8]
1000d924:	68f8      	ldr	r0, [r7, #12]
1000d926:	f000 fc4d 	bl	1000e1c4 <ai_platform_network_process>
1000d92a:	4603      	mov	r3, r0
}
1000d92c:	4618      	mov	r0, r3
1000d92e:	3710      	adds	r7, #16
1000d930:	46bd      	mov	sp, r7
1000d932:	bd80      	pop	{r7, pc}

1000d934 <ai_emotion_model_data_params_get>:
 * @ingroup emotion_model_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_emotion_model_data_params_get(ai_network_params* params)
{
1000d934:	b580      	push	{r7, lr}
1000d936:	b086      	sub	sp, #24
1000d938:	af00      	add	r7, sp, #0
1000d93a:	6078      	str	r0, [r7, #4]
  if (!params) return false;
1000d93c:	687b      	ldr	r3, [r7, #4]
1000d93e:	2b00      	cmp	r3, #0
1000d940:	d101      	bne.n	1000d946 <ai_emotion_model_data_params_get+0x12>
1000d942:	2300      	movs	r3, #0
1000d944:	e016      	b.n	1000d974 <ai_emotion_model_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
1000d946:	4a0d      	ldr	r2, [pc, #52]	; (1000d97c <ai_emotion_model_data_params_get+0x48>)
1000d948:	f107 0310 	add.w	r3, r7, #16
1000d94c:	e892 0003 	ldmia.w	r2, {r0, r1}
1000d950:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_EMOTION_MODEL_DATA_ACTIVATIONS_COUNT, g_emotion_model_data_map_activations);
  
  const ai_buffer_array map_weights = 
1000d954:	4a0a      	ldr	r2, [pc, #40]	; (1000d980 <ai_emotion_model_data_params_get+0x4c>)
1000d956:	f107 0308 	add.w	r3, r7, #8
1000d95a:	e892 0003 	ldmia.w	r2, {r0, r1}
1000d95e:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_EMOTION_MODEL_DATA_WEIGHTS_COUNT, g_emotion_model_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
1000d962:	f107 0210 	add.w	r2, r7, #16
1000d966:	f107 0308 	add.w	r3, r7, #8
1000d96a:	4619      	mov	r1, r3
1000d96c:	6878      	ldr	r0, [r7, #4]
1000d96e:	f000 f903 	bl	1000db78 <ai_platform_bind_network_params>
1000d972:	4603      	mov	r3, r0
}
1000d974:	4618      	mov	r0, r3
1000d976:	3718      	adds	r7, #24
1000d978:	46bd      	mov	sp, r7
1000d97a:	bd80      	pop	{r7, pc}
1000d97c:	10013270 	.word	0x10013270
1000d980:	10013278 	.word	0x10013278

1000d984 <ai_buffer_get_size>:
1000d984:	b378      	cbz	r0, 1000d9e6 <ai_buffer_get_size+0x62>
1000d986:	b410      	push	{r4}
1000d988:	6803      	ldr	r3, [r0, #0]
1000d98a:	4a17      	ldr	r2, [pc, #92]	; (1000d9e8 <ai_buffer_get_size+0x64>)
1000d98c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
1000d990:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
1000d994:	4293      	cmp	r3, r2
1000d996:	d01e      	beq.n	1000d9d6 <ai_buffer_get_size+0x52>
1000d998:	6984      	ldr	r4, [r0, #24]
1000d99a:	6862      	ldr	r2, [r4, #4]
1000d99c:	7d03      	ldrb	r3, [r0, #20]
1000d99e:	6941      	ldr	r1, [r0, #20]
1000d9a0:	f1a3 0301 	sub.w	r3, r3, #1
1000d9a4:	fab3 f383 	clz	r3, r3
1000d9a8:	095b      	lsrs	r3, r3, #5
1000d9aa:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
1000d9ae:	f3c1 2017 	ubfx	r0, r1, #8, #24
1000d9b2:	da0b      	bge.n	1000d9cc <ai_buffer_get_size+0x48>
1000d9b4:	2b01      	cmp	r3, #1
1000d9b6:	d102      	bne.n	1000d9be <ai_buffer_get_size+0x3a>
1000d9b8:	2802      	cmp	r0, #2
1000d9ba:	d007      	beq.n	1000d9cc <ai_buffer_get_size+0x48>
1000d9bc:	2302      	movs	r3, #2
1000d9be:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
1000d9c2:	3301      	adds	r3, #1
1000d9c4:	4298      	cmp	r0, r3
1000d9c6:	fb01 f202 	mul.w	r2, r1, r2
1000d9ca:	d1f3      	bne.n	1000d9b4 <ai_buffer_get_size+0x30>
1000d9cc:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
1000d9d0:	f85d 4b04 	ldr.w	r4, [sp], #4
1000d9d4:	4770      	bx	lr
1000d9d6:	2900      	cmp	r1, #0
1000d9d8:	d0de      	beq.n	1000d998 <ai_buffer_get_size+0x14>
1000d9da:	6984      	ldr	r4, [r0, #24]
1000d9dc:	6863      	ldr	r3, [r4, #4]
1000d9de:	331f      	adds	r3, #31
1000d9e0:	f023 021f 	bic.w	r2, r3, #31
1000d9e4:	e7da      	b.n	1000d99c <ai_buffer_get_size+0x18>
1000d9e6:	4770      	bx	lr
1000d9e8:	000400c0 	.word	0x000400c0

1000d9ec <ai_buffer_array_sane>:
1000d9ec:	b138      	cbz	r0, 1000d9fe <ai_buffer_array_sane+0x12>
1000d9ee:	6843      	ldr	r3, [r0, #4]
1000d9f0:	b123      	cbz	r3, 1000d9fc <ai_buffer_array_sane+0x10>
1000d9f2:	8840      	ldrh	r0, [r0, #2]
1000d9f4:	3800      	subs	r0, #0
1000d9f6:	bf18      	it	ne
1000d9f8:	2001      	movne	r0, #1
1000d9fa:	4770      	bx	lr
1000d9fc:	4618      	mov	r0, r3
1000d9fe:	4770      	bx	lr

1000da00 <ai_buffer_array_item_set_address>:
1000da00:	b150      	cbz	r0, 1000da18 <ai_buffer_array_item_set_address+0x18>
1000da02:	6843      	ldr	r3, [r0, #4]
1000da04:	b14b      	cbz	r3, 1000da1a <ai_buffer_array_item_set_address+0x1a>
1000da06:	8840      	ldrh	r0, [r0, #2]
1000da08:	b900      	cbnz	r0, 1000da0c <ai_buffer_array_item_set_address+0xc>
1000da0a:	4770      	bx	lr
1000da0c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
1000da10:	eb03 0181 	add.w	r1, r3, r1, lsl #2
1000da14:	2001      	movs	r0, #1
1000da16:	604a      	str	r2, [r1, #4]
1000da18:	4770      	bx	lr
1000da1a:	4618      	mov	r0, r3
1000da1c:	4770      	bx	lr
1000da1e:	bf00      	nop

1000da20 <_ai_platform_acquire_crc>:
1000da20:	2001      	movs	r0, #1
1000da22:	4770      	bx	lr

1000da24 <_ai_platform_release_crc>:
1000da24:	4770      	bx	lr
1000da26:	bf00      	nop

1000da28 <ai_platform_get_weights_map>:
1000da28:	2a00      	cmp	r2, #0
1000da2a:	d037      	beq.n	1000da9c <ai_platform_get_weights_map+0x74>
1000da2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000da2e:	4604      	mov	r4, r0
1000da30:	b1a0      	cbz	r0, 1000da5c <ai_platform_get_weights_map+0x34>
1000da32:	460f      	mov	r7, r1
1000da34:	b191      	cbz	r1, 1000da5c <ai_platform_get_weights_map+0x34>
1000da36:	4b25      	ldr	r3, [pc, #148]	; (1000dacc <ai_platform_get_weights_map+0xa4>)
1000da38:	6810      	ldr	r0, [r2, #0]
1000da3a:	4298      	cmp	r0, r3
1000da3c:	4615      	mov	r5, r2
1000da3e:	d00f      	beq.n	1000da60 <ai_platform_get_weights_map+0x38>
1000da40:	6855      	ldr	r5, [r2, #4]
1000da42:	b15d      	cbz	r5, 1000da5c <ai_platform_get_weights_map+0x34>
1000da44:	682e      	ldr	r6, [r5, #0]
1000da46:	429e      	cmp	r6, r3
1000da48:	d02a      	beq.n	1000daa0 <ai_platform_get_weights_map+0x78>
1000da4a:	f1a1 0001 	sub.w	r0, r1, #1
1000da4e:	6025      	str	r5, [r4, #0]
1000da50:	fab0 f080 	clz	r0, r0
1000da54:	0940      	lsrs	r0, r0, #5
1000da56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000da58:	42a7      	cmp	r7, r4
1000da5a:	d034      	beq.n	1000dac6 <ai_platform_get_weights_map+0x9e>
1000da5c:	2000      	movs	r0, #0
1000da5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000da60:	1d10      	adds	r0, r2, #4
1000da62:	f7ff ffc3 	bl	1000d9ec <ai_buffer_array_sane>
1000da66:	2800      	cmp	r0, #0
1000da68:	d0f8      	beq.n	1000da5c <ai_platform_get_weights_map+0x34>
1000da6a:	88eb      	ldrh	r3, [r5, #6]
1000da6c:	429f      	cmp	r7, r3
1000da6e:	d1f5      	bne.n	1000da5c <ai_platform_get_weights_map+0x34>
1000da70:	f04f 0e00 	mov.w	lr, #0
1000da74:	1f23      	subs	r3, r4, #4
1000da76:	4670      	mov	r0, lr
1000da78:	68aa      	ldr	r2, [r5, #8]
1000da7a:	eb02 0c0e 	add.w	ip, r2, lr
1000da7e:	f10e 0e1c 	add.w	lr, lr, #28
1000da82:	f8dc 4004 	ldr.w	r4, [ip, #4]
1000da86:	b124      	cbz	r4, 1000da92 <ai_platform_get_weights_map+0x6a>
1000da88:	3001      	adds	r0, #1
1000da8a:	4287      	cmp	r7, r0
1000da8c:	f843 4f04 	str.w	r4, [r3, #4]!
1000da90:	d1f2      	bne.n	1000da78 <ai_platform_get_weights_map+0x50>
1000da92:	1a38      	subs	r0, r7, r0
1000da94:	fab0 f080 	clz	r0, r0
1000da98:	0940      	lsrs	r0, r0, #5
1000da9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000da9c:	2000      	movs	r0, #0
1000da9e:	4770      	bx	lr
1000daa0:	1f23      	subs	r3, r4, #4
1000daa2:	4628      	mov	r0, r5
1000daa4:	2400      	movs	r4, #0
1000daa6:	e000      	b.n	1000daaa <ai_platform_get_weights_map+0x82>
1000daa8:	4614      	mov	r4, r2
1000daaa:	f850 2f04 	ldr.w	r2, [r0, #4]!
1000daae:	42b2      	cmp	r2, r6
1000dab0:	d0d2      	beq.n	1000da58 <ai_platform_get_weights_map+0x30>
1000dab2:	f843 2f04 	str.w	r2, [r3, #4]!
1000dab6:	1c62      	adds	r2, r4, #1
1000dab8:	4297      	cmp	r7, r2
1000daba:	d1f5      	bne.n	1000daa8 <ai_platform_get_weights_map+0x80>
1000dabc:	3402      	adds	r4, #2
1000dabe:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
1000dac2:	42b3      	cmp	r3, r6
1000dac4:	d1ca      	bne.n	1000da5c <ai_platform_get_weights_map+0x34>
1000dac6:	2001      	movs	r0, #1
1000dac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000daca:	bf00      	nop
1000dacc:	a1facade 	.word	0xa1facade

1000dad0 <ai_platform_get_activations_map>:
1000dad0:	2a00      	cmp	r2, #0
1000dad2:	d038      	beq.n	1000db46 <ai_platform_get_activations_map+0x76>
1000dad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000dad6:	4604      	mov	r4, r0
1000dad8:	b1a0      	cbz	r0, 1000db04 <ai_platform_get_activations_map+0x34>
1000dada:	460f      	mov	r7, r1
1000dadc:	b191      	cbz	r1, 1000db04 <ai_platform_get_activations_map+0x34>
1000dade:	4b25      	ldr	r3, [pc, #148]	; (1000db74 <ai_platform_get_activations_map+0xa4>)
1000dae0:	6810      	ldr	r0, [r2, #0]
1000dae2:	4298      	cmp	r0, r3
1000dae4:	4615      	mov	r5, r2
1000dae6:	d00f      	beq.n	1000db08 <ai_platform_get_activations_map+0x38>
1000dae8:	6a15      	ldr	r5, [r2, #32]
1000daea:	b15d      	cbz	r5, 1000db04 <ai_platform_get_activations_map+0x34>
1000daec:	682e      	ldr	r6, [r5, #0]
1000daee:	429e      	cmp	r6, r3
1000daf0:	d02b      	beq.n	1000db4a <ai_platform_get_activations_map+0x7a>
1000daf2:	f1a1 0001 	sub.w	r0, r1, #1
1000daf6:	6025      	str	r5, [r4, #0]
1000daf8:	fab0 f080 	clz	r0, r0
1000dafc:	0940      	lsrs	r0, r0, #5
1000dafe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000db00:	42a7      	cmp	r7, r4
1000db02:	d035      	beq.n	1000db70 <ai_platform_get_activations_map+0xa0>
1000db04:	2000      	movs	r0, #0
1000db06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000db08:	f102 000c 	add.w	r0, r2, #12
1000db0c:	f7ff ff6e 	bl	1000d9ec <ai_buffer_array_sane>
1000db10:	2800      	cmp	r0, #0
1000db12:	d0f7      	beq.n	1000db04 <ai_platform_get_activations_map+0x34>
1000db14:	89eb      	ldrh	r3, [r5, #14]
1000db16:	429f      	cmp	r7, r3
1000db18:	d1f4      	bne.n	1000db04 <ai_platform_get_activations_map+0x34>
1000db1a:	f04f 0e00 	mov.w	lr, #0
1000db1e:	1f23      	subs	r3, r4, #4
1000db20:	4670      	mov	r0, lr
1000db22:	692a      	ldr	r2, [r5, #16]
1000db24:	eb02 0c0e 	add.w	ip, r2, lr
1000db28:	f10e 0e1c 	add.w	lr, lr, #28
1000db2c:	f8dc 4004 	ldr.w	r4, [ip, #4]
1000db30:	b124      	cbz	r4, 1000db3c <ai_platform_get_activations_map+0x6c>
1000db32:	3001      	adds	r0, #1
1000db34:	4287      	cmp	r7, r0
1000db36:	f843 4f04 	str.w	r4, [r3, #4]!
1000db3a:	d1f2      	bne.n	1000db22 <ai_platform_get_activations_map+0x52>
1000db3c:	1a38      	subs	r0, r7, r0
1000db3e:	fab0 f080 	clz	r0, r0
1000db42:	0940      	lsrs	r0, r0, #5
1000db44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000db46:	2000      	movs	r0, #0
1000db48:	4770      	bx	lr
1000db4a:	1f23      	subs	r3, r4, #4
1000db4c:	4628      	mov	r0, r5
1000db4e:	2400      	movs	r4, #0
1000db50:	e000      	b.n	1000db54 <ai_platform_get_activations_map+0x84>
1000db52:	4614      	mov	r4, r2
1000db54:	f850 2f04 	ldr.w	r2, [r0, #4]!
1000db58:	42b2      	cmp	r2, r6
1000db5a:	d0d1      	beq.n	1000db00 <ai_platform_get_activations_map+0x30>
1000db5c:	f843 2f04 	str.w	r2, [r3, #4]!
1000db60:	1c62      	adds	r2, r4, #1
1000db62:	4297      	cmp	r7, r2
1000db64:	d1f5      	bne.n	1000db52 <ai_platform_get_activations_map+0x82>
1000db66:	3402      	adds	r4, #2
1000db68:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
1000db6c:	42b3      	cmp	r3, r6
1000db6e:	d1c9      	bne.n	1000db04 <ai_platform_get_activations_map+0x34>
1000db70:	2001      	movs	r0, #1
1000db72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000db74:	a1facade 	.word	0xa1facade

1000db78 <ai_platform_bind_network_params>:
1000db78:	b1a0      	cbz	r0, 1000dba4 <ai_platform_bind_network_params+0x2c>
1000db7a:	b1b1      	cbz	r1, 1000dbaa <ai_platform_bind_network_params+0x32>
1000db7c:	b1c2      	cbz	r2, 1000dbb0 <ai_platform_bind_network_params+0x38>
1000db7e:	b410      	push	{r4}
1000db80:	4603      	mov	r3, r0
1000db82:	4c0d      	ldr	r4, [pc, #52]	; (1000dbb8 <ai_platform_bind_network_params+0x40>)
1000db84:	f843 4b04 	str.w	r4, [r3], #4
1000db88:	f100 0c0c 	add.w	ip, r0, #12
1000db8c:	c903      	ldmia	r1, {r0, r1}
1000db8e:	e883 0003 	stmia.w	r3, {r0, r1}
1000db92:	e892 0003 	ldmia.w	r2, {r0, r1}
1000db96:	e88c 0003 	stmia.w	ip, {r0, r1}
1000db9a:	2301      	movs	r3, #1
1000db9c:	4618      	mov	r0, r3
1000db9e:	f85d 4b04 	ldr.w	r4, [sp], #4
1000dba2:	4770      	bx	lr
1000dba4:	4603      	mov	r3, r0
1000dba6:	4618      	mov	r0, r3
1000dba8:	4770      	bx	lr
1000dbaa:	460b      	mov	r3, r1
1000dbac:	4618      	mov	r0, r3
1000dbae:	4770      	bx	lr
1000dbb0:	4613      	mov	r3, r2
1000dbb2:	4618      	mov	r0, r3
1000dbb4:	4770      	bx	lr
1000dbb6:	bf00      	nop
1000dbb8:	a1facade 	.word	0xa1facade

1000dbbc <ai_platform_network_get_error>:
1000dbbc:	b510      	push	{r4, lr}
1000dbbe:	b198      	cbz	r0, 1000dbe8 <ai_platform_network_get_error+0x2c>
1000dbc0:	4b17      	ldr	r3, [pc, #92]	; (1000dc20 <ai_platform_network_get_error+0x64>)
1000dbc2:	6802      	ldr	r2, [r0, #0]
1000dbc4:	429a      	cmp	r2, r3
1000dbc6:	4604      	mov	r4, r0
1000dbc8:	d10e      	bne.n	1000dbe8 <ai_platform_network_get_error+0x2c>
1000dbca:	f7ff ff29 	bl	1000da20 <_ai_platform_acquire_crc>
1000dbce:	4a15      	ldr	r2, [pc, #84]	; (1000dc24 <ai_platform_network_get_error+0x68>)
1000dbd0:	2301      	movs	r3, #1
1000dbd2:	6093      	str	r3, [r2, #8]
1000dbd4:	6893      	ldr	r3, [r2, #8]
1000dbd6:	2b00      	cmp	r3, #0
1000dbd8:	d1fc      	bne.n	1000dbd4 <ai_platform_network_get_error+0x18>
1000dbda:	4b13      	ldr	r3, [pc, #76]	; (1000dc28 <ai_platform_network_get_error+0x6c>)
1000dbdc:	6013      	str	r3, [r2, #0]
1000dbde:	6812      	ldr	r2, [r2, #0]
1000dbe0:	4b12      	ldr	r3, [pc, #72]	; (1000dc2c <ai_platform_network_get_error+0x70>)
1000dbe2:	429a      	cmp	r2, r3
1000dbe4:	d014      	beq.n	1000dc10 <ai_platform_network_get_error+0x54>
1000dbe6:	e7fe      	b.n	1000dbe6 <ai_platform_network_get_error+0x2a>
1000dbe8:	f7ff ff1a 	bl	1000da20 <_ai_platform_acquire_crc>
1000dbec:	4a0d      	ldr	r2, [pc, #52]	; (1000dc24 <ai_platform_network_get_error+0x68>)
1000dbee:	2301      	movs	r3, #1
1000dbf0:	6093      	str	r3, [r2, #8]
1000dbf2:	6893      	ldr	r3, [r2, #8]
1000dbf4:	2b00      	cmp	r3, #0
1000dbf6:	d1fc      	bne.n	1000dbf2 <ai_platform_network_get_error+0x36>
1000dbf8:	4b0b      	ldr	r3, [pc, #44]	; (1000dc28 <ai_platform_network_get_error+0x6c>)
1000dbfa:	6013      	str	r3, [r2, #0]
1000dbfc:	6812      	ldr	r2, [r2, #0]
1000dbfe:	4b0b      	ldr	r3, [pc, #44]	; (1000dc2c <ai_platform_network_get_error+0x70>)
1000dc00:	429a      	cmp	r2, r3
1000dc02:	d000      	beq.n	1000dc06 <ai_platform_network_get_error+0x4a>
1000dc04:	e7fe      	b.n	1000dc04 <ai_platform_network_get_error+0x48>
1000dc06:	f7ff ff0d 	bl	1000da24 <_ai_platform_release_crc>
1000dc0a:	f241 0010 	movw	r0, #4112	; 0x1010
1000dc0e:	bd10      	pop	{r4, pc}
1000dc10:	f7ff ff08 	bl	1000da24 <_ai_platform_release_crc>
1000dc14:	f104 0010 	add.w	r0, r4, #16
1000dc18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000dc1c:	f000 bd36 	b.w	1000e68c <core_get_error>
1000dc20:	a1c00100 	.word	0xa1c00100
1000dc24:	4c004000 	.word	0x4c004000
1000dc28:	f407a5c2 	.word	0xf407a5c2
1000dc2c:	b5e8b5cd 	.word	0xb5e8b5cd

1000dc30 <ai_platform_network_set_error>:
1000dc30:	b110      	cbz	r0, 1000dc38 <ai_platform_network_set_error+0x8>
1000dc32:	3010      	adds	r0, #16
1000dc34:	f000 bd30 	b.w	1000e698 <core_set_error>
1000dc38:	4770      	bx	lr
1000dc3a:	bf00      	nop

1000dc3c <ai_platform_inputs_get>:
1000dc3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000dc40:	b083      	sub	sp, #12
1000dc42:	9100      	str	r1, [sp, #0]
1000dc44:	b198      	cbz	r0, 1000dc6e <ai_platform_inputs_get+0x32>
1000dc46:	4b47      	ldr	r3, [pc, #284]	; (1000dd64 <ai_platform_inputs_get+0x128>)
1000dc48:	6802      	ldr	r2, [r0, #0]
1000dc4a:	429a      	cmp	r2, r3
1000dc4c:	4607      	mov	r7, r0
1000dc4e:	d10e      	bne.n	1000dc6e <ai_platform_inputs_get+0x32>
1000dc50:	f7ff fee6 	bl	1000da20 <_ai_platform_acquire_crc>
1000dc54:	4b44      	ldr	r3, [pc, #272]	; (1000dd68 <ai_platform_inputs_get+0x12c>)
1000dc56:	2201      	movs	r2, #1
1000dc58:	609a      	str	r2, [r3, #8]
1000dc5a:	689c      	ldr	r4, [r3, #8]
1000dc5c:	2c00      	cmp	r4, #0
1000dc5e:	d1fc      	bne.n	1000dc5a <ai_platform_inputs_get+0x1e>
1000dc60:	4a42      	ldr	r2, [pc, #264]	; (1000dd6c <ai_platform_inputs_get+0x130>)
1000dc62:	601a      	str	r2, [r3, #0]
1000dc64:	681a      	ldr	r2, [r3, #0]
1000dc66:	4b42      	ldr	r3, [pc, #264]	; (1000dd70 <ai_platform_inputs_get+0x134>)
1000dc68:	429a      	cmp	r2, r3
1000dc6a:	d015      	beq.n	1000dc98 <ai_platform_inputs_get+0x5c>
1000dc6c:	e7fe      	b.n	1000dc6c <ai_platform_inputs_get+0x30>
1000dc6e:	f7ff fed7 	bl	1000da20 <_ai_platform_acquire_crc>
1000dc72:	4b3d      	ldr	r3, [pc, #244]	; (1000dd68 <ai_platform_inputs_get+0x12c>)
1000dc74:	2201      	movs	r2, #1
1000dc76:	609a      	str	r2, [r3, #8]
1000dc78:	689c      	ldr	r4, [r3, #8]
1000dc7a:	2c00      	cmp	r4, #0
1000dc7c:	d1fc      	bne.n	1000dc78 <ai_platform_inputs_get+0x3c>
1000dc7e:	4a3b      	ldr	r2, [pc, #236]	; (1000dd6c <ai_platform_inputs_get+0x130>)
1000dc80:	601a      	str	r2, [r3, #0]
1000dc82:	681a      	ldr	r2, [r3, #0]
1000dc84:	4b3a      	ldr	r3, [pc, #232]	; (1000dd70 <ai_platform_inputs_get+0x134>)
1000dc86:	429a      	cmp	r2, r3
1000dc88:	d000      	beq.n	1000dc8c <ai_platform_inputs_get+0x50>
1000dc8a:	e7fe      	b.n	1000dc8a <ai_platform_inputs_get+0x4e>
1000dc8c:	f7ff feca 	bl	1000da24 <_ai_platform_release_crc>
1000dc90:	4620      	mov	r0, r4
1000dc92:	b003      	add	sp, #12
1000dc94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000dc98:	f7ff fec4 	bl	1000da24 <_ai_platform_release_crc>
1000dc9c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
1000dc9e:	2b00      	cmp	r3, #0
1000dca0:	d04c      	beq.n	1000dd3c <ai_platform_inputs_get+0x100>
1000dca2:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
1000dca6:	f1b9 0f00 	cmp.w	r9, #0
1000dcaa:	d047      	beq.n	1000dd3c <ai_platform_inputs_get+0x100>
1000dcac:	46a2      	mov	sl, r4
1000dcae:	9701      	str	r7, [sp, #4]
1000dcb0:	e016      	b.n	1000dce0 <ai_platform_inputs_get+0xa4>
1000dcb2:	2201      	movs	r2, #1
1000dcb4:	f847 200e 	str.w	r2, [r7, lr]
1000dcb8:	69b2      	ldr	r2, [r6, #24]
1000dcba:	6852      	ldr	r2, [r2, #4]
1000dcbc:	60ab      	str	r3, [r5, #8]
1000dcbe:	f04f 0301 	mov.w	r3, #1
1000dcc2:	752b      	strb	r3, [r5, #20]
1000dcc4:	2300      	movs	r3, #0
1000dcc6:	60eb      	str	r3, [r5, #12]
1000dcc8:	696b      	ldr	r3, [r5, #20]
1000dcca:	612a      	str	r2, [r5, #16]
1000dccc:	e9c5 0100 	strd	r0, r1, [r5]
1000dcd0:	f36b 231f 	bfi	r3, fp, #8, #24
1000dcd4:	f8c5 8018 	str.w	r8, [r5, #24]
1000dcd8:	3401      	adds	r4, #1
1000dcda:	f10a 0a1c 	add.w	sl, sl, #28
1000dcde:	616b      	str	r3, [r5, #20]
1000dce0:	f8b9 3000 	ldrh.w	r3, [r9]
1000dce4:	42a3      	cmp	r3, r4
1000dce6:	b2a2      	uxth	r2, r4
1000dce8:	d935      	bls.n	1000dd56 <ai_platform_inputs_get+0x11a>
1000dcea:	f8d9 3004 	ldr.w	r3, [r9, #4]
1000dcee:	2b00      	cmp	r3, #0
1000dcf0:	d031      	beq.n	1000dd56 <ai_platform_inputs_get+0x11a>
1000dcf2:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
1000dcf6:	b376      	cbz	r6, 1000dd56 <ai_platform_inputs_get+0x11a>
1000dcf8:	f8d9 3008 	ldr.w	r3, [r9, #8]
1000dcfc:	69b2      	ldr	r2, [r6, #24]
1000dcfe:	f8d6 800c 	ldr.w	r8, [r6, #12]
1000dd02:	6810      	ldr	r0, [r2, #0]
1000dd04:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
1000dd08:	68b3      	ldr	r3, [r6, #8]
1000dd0a:	f3c3 2b17 	ubfx	fp, r3, #8, #24
1000dd0e:	f001 ff8d 	bl	1000fc2c <ai_array_to_buffer_fmt>
1000dd12:	69b2      	ldr	r2, [r6, #24]
1000dd14:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
1000dd18:	6891      	ldr	r1, [r2, #8]
1000dd1a:	4455      	add	r5, sl
1000dd1c:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
1000dd20:	2b00      	cmp	r3, #0
1000dd22:	d0ca      	beq.n	1000dcba <ai_platform_inputs_get+0x7e>
1000dd24:	2200      	movs	r2, #0
1000dd26:	f847 2034 	str.w	r2, [r7, r4, lsl #3]
1000dd2a:	6832      	ldr	r2, [r6, #0]
1000dd2c:	605a      	str	r2, [r3, #4]
1000dd2e:	b112      	cbz	r2, 1000dd36 <ai_platform_inputs_get+0xfa>
1000dd30:	8852      	ldrh	r2, [r2, #2]
1000dd32:	2a00      	cmp	r2, #0
1000dd34:	d1bd      	bne.n	1000dcb2 <ai_platform_inputs_get+0x76>
1000dd36:	69b2      	ldr	r2, [r6, #24]
1000dd38:	2300      	movs	r3, #0
1000dd3a:	e7be      	b.n	1000dcba <ai_platform_inputs_get+0x7e>
1000dd3c:	2218      	movs	r2, #24
1000dd3e:	2111      	movs	r1, #17
1000dd40:	f107 0010 	add.w	r0, r7, #16
1000dd44:	f000 fca8 	bl	1000e698 <core_set_error>
1000dd48:	2200      	movs	r2, #0
1000dd4a:	4610      	mov	r0, r2
1000dd4c:	9b00      	ldr	r3, [sp, #0]
1000dd4e:	2b00      	cmp	r3, #0
1000dd50:	d09f      	beq.n	1000dc92 <ai_platform_inputs_get+0x56>
1000dd52:	801a      	strh	r2, [r3, #0]
1000dd54:	e79d      	b.n	1000dc92 <ai_platform_inputs_get+0x56>
1000dd56:	9f01      	ldr	r7, [sp, #4]
1000dd58:	2a00      	cmp	r2, #0
1000dd5a:	d0ef      	beq.n	1000dd3c <ai_platform_inputs_get+0x100>
1000dd5c:	f8d9 3008 	ldr.w	r3, [r9, #8]
1000dd60:	6858      	ldr	r0, [r3, #4]
1000dd62:	e7f3      	b.n	1000dd4c <ai_platform_inputs_get+0x110>
1000dd64:	a1c00100 	.word	0xa1c00100
1000dd68:	4c004000 	.word	0x4c004000
1000dd6c:	f407a5c2 	.word	0xf407a5c2
1000dd70:	b5e8b5cd 	.word	0xb5e8b5cd

1000dd74 <ai_platform_outputs_get>:
1000dd74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000dd78:	b083      	sub	sp, #12
1000dd7a:	9100      	str	r1, [sp, #0]
1000dd7c:	b198      	cbz	r0, 1000dda6 <ai_platform_outputs_get+0x32>
1000dd7e:	4b45      	ldr	r3, [pc, #276]	; (1000de94 <ai_platform_outputs_get+0x120>)
1000dd80:	6802      	ldr	r2, [r0, #0]
1000dd82:	429a      	cmp	r2, r3
1000dd84:	4607      	mov	r7, r0
1000dd86:	d10e      	bne.n	1000dda6 <ai_platform_outputs_get+0x32>
1000dd88:	f7ff fe4a 	bl	1000da20 <_ai_platform_acquire_crc>
1000dd8c:	4b42      	ldr	r3, [pc, #264]	; (1000de98 <ai_platform_outputs_get+0x124>)
1000dd8e:	2201      	movs	r2, #1
1000dd90:	609a      	str	r2, [r3, #8]
1000dd92:	689c      	ldr	r4, [r3, #8]
1000dd94:	2c00      	cmp	r4, #0
1000dd96:	d1fc      	bne.n	1000dd92 <ai_platform_outputs_get+0x1e>
1000dd98:	4a40      	ldr	r2, [pc, #256]	; (1000de9c <ai_platform_outputs_get+0x128>)
1000dd9a:	601a      	str	r2, [r3, #0]
1000dd9c:	681a      	ldr	r2, [r3, #0]
1000dd9e:	4b40      	ldr	r3, [pc, #256]	; (1000dea0 <ai_platform_outputs_get+0x12c>)
1000dda0:	429a      	cmp	r2, r3
1000dda2:	d015      	beq.n	1000ddd0 <ai_platform_outputs_get+0x5c>
1000dda4:	e7fe      	b.n	1000dda4 <ai_platform_outputs_get+0x30>
1000dda6:	f7ff fe3b 	bl	1000da20 <_ai_platform_acquire_crc>
1000ddaa:	4b3b      	ldr	r3, [pc, #236]	; (1000de98 <ai_platform_outputs_get+0x124>)
1000ddac:	2201      	movs	r2, #1
1000ddae:	609a      	str	r2, [r3, #8]
1000ddb0:	689c      	ldr	r4, [r3, #8]
1000ddb2:	2c00      	cmp	r4, #0
1000ddb4:	d1fc      	bne.n	1000ddb0 <ai_platform_outputs_get+0x3c>
1000ddb6:	4a39      	ldr	r2, [pc, #228]	; (1000de9c <ai_platform_outputs_get+0x128>)
1000ddb8:	601a      	str	r2, [r3, #0]
1000ddba:	681a      	ldr	r2, [r3, #0]
1000ddbc:	4b38      	ldr	r3, [pc, #224]	; (1000dea0 <ai_platform_outputs_get+0x12c>)
1000ddbe:	429a      	cmp	r2, r3
1000ddc0:	d000      	beq.n	1000ddc4 <ai_platform_outputs_get+0x50>
1000ddc2:	e7fe      	b.n	1000ddc2 <ai_platform_outputs_get+0x4e>
1000ddc4:	f7ff fe2e 	bl	1000da24 <_ai_platform_release_crc>
1000ddc8:	4620      	mov	r0, r4
1000ddca:	b003      	add	sp, #12
1000ddcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000ddd0:	f7ff fe28 	bl	1000da24 <_ai_platform_release_crc>
1000ddd4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
1000ddd6:	2b01      	cmp	r3, #1
1000ddd8:	d952      	bls.n	1000de80 <ai_platform_outputs_get+0x10c>
1000ddda:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
1000ddde:	9701      	str	r7, [sp, #4]
1000dde0:	46a2      	mov	sl, r4
1000dde2:	e016      	b.n	1000de12 <ai_platform_outputs_get+0x9e>
1000dde4:	2201      	movs	r2, #1
1000dde6:	f847 200e 	str.w	r2, [r7, lr]
1000ddea:	69b2      	ldr	r2, [r6, #24]
1000ddec:	6852      	ldr	r2, [r2, #4]
1000ddee:	60ab      	str	r3, [r5, #8]
1000ddf0:	f04f 0301 	mov.w	r3, #1
1000ddf4:	752b      	strb	r3, [r5, #20]
1000ddf6:	2300      	movs	r3, #0
1000ddf8:	60eb      	str	r3, [r5, #12]
1000ddfa:	696b      	ldr	r3, [r5, #20]
1000ddfc:	612a      	str	r2, [r5, #16]
1000ddfe:	e9c5 0100 	strd	r0, r1, [r5]
1000de02:	f36b 231f 	bfi	r3, fp, #8, #24
1000de06:	f8c5 8018 	str.w	r8, [r5, #24]
1000de0a:	3401      	adds	r4, #1
1000de0c:	f10a 0a1c 	add.w	sl, sl, #28
1000de10:	616b      	str	r3, [r5, #20]
1000de12:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1000de16:	42a3      	cmp	r3, r4
1000de18:	b2a2      	uxth	r2, r4
1000de1a:	d927      	bls.n	1000de6c <ai_platform_outputs_get+0xf8>
1000de1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
1000de20:	b323      	cbz	r3, 1000de6c <ai_platform_outputs_get+0xf8>
1000de22:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
1000de26:	b30e      	cbz	r6, 1000de6c <ai_platform_outputs_get+0xf8>
1000de28:	f8d9 3014 	ldr.w	r3, [r9, #20]
1000de2c:	69b2      	ldr	r2, [r6, #24]
1000de2e:	f8d6 800c 	ldr.w	r8, [r6, #12]
1000de32:	6810      	ldr	r0, [r2, #0]
1000de34:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
1000de38:	68b3      	ldr	r3, [r6, #8]
1000de3a:	f3c3 2b17 	ubfx	fp, r3, #8, #24
1000de3e:	f001 fef5 	bl	1000fc2c <ai_array_to_buffer_fmt>
1000de42:	69b2      	ldr	r2, [r6, #24]
1000de44:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
1000de48:	6891      	ldr	r1, [r2, #8]
1000de4a:	4455      	add	r5, sl
1000de4c:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
1000de50:	2b00      	cmp	r3, #0
1000de52:	d0cb      	beq.n	1000ddec <ai_platform_outputs_get+0x78>
1000de54:	2200      	movs	r2, #0
1000de56:	f847 2034 	str.w	r2, [r7, r4, lsl #3]
1000de5a:	6832      	ldr	r2, [r6, #0]
1000de5c:	605a      	str	r2, [r3, #4]
1000de5e:	b112      	cbz	r2, 1000de66 <ai_platform_outputs_get+0xf2>
1000de60:	8852      	ldrh	r2, [r2, #2]
1000de62:	2a00      	cmp	r2, #0
1000de64:	d1be      	bne.n	1000dde4 <ai_platform_outputs_get+0x70>
1000de66:	69b2      	ldr	r2, [r6, #24]
1000de68:	2300      	movs	r3, #0
1000de6a:	e7bf      	b.n	1000ddec <ai_platform_outputs_get+0x78>
1000de6c:	9f01      	ldr	r7, [sp, #4]
1000de6e:	b13a      	cbz	r2, 1000de80 <ai_platform_outputs_get+0x10c>
1000de70:	f8d9 3014 	ldr.w	r3, [r9, #20]
1000de74:	6858      	ldr	r0, [r3, #4]
1000de76:	9b00      	ldr	r3, [sp, #0]
1000de78:	2b00      	cmp	r3, #0
1000de7a:	d0a6      	beq.n	1000ddca <ai_platform_outputs_get+0x56>
1000de7c:	801a      	strh	r2, [r3, #0]
1000de7e:	e7a4      	b.n	1000ddca <ai_platform_outputs_get+0x56>
1000de80:	2218      	movs	r2, #24
1000de82:	2111      	movs	r1, #17
1000de84:	f107 0010 	add.w	r0, r7, #16
1000de88:	f000 fc06 	bl	1000e698 <core_set_error>
1000de8c:	2200      	movs	r2, #0
1000de8e:	4610      	mov	r0, r2
1000de90:	e7f1      	b.n	1000de76 <ai_platform_outputs_get+0x102>
1000de92:	bf00      	nop
1000de94:	a1c00100 	.word	0xa1c00100
1000de98:	4c004000 	.word	0x4c004000
1000de9c:	f407a5c2 	.word	0xf407a5c2
1000dea0:	b5e8b5cd 	.word	0xb5e8b5cd

1000dea4 <ai_platform_network_create>:
1000dea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1000dea8:	b082      	sub	sp, #8
1000deaa:	4605      	mov	r5, r0
1000deac:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
1000deb0:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
1000deb4:	4616      	mov	r6, r2
1000deb6:	461f      	mov	r7, r3
1000deb8:	f7ff fdb2 	bl	1000da20 <_ai_platform_acquire_crc>
1000debc:	b138      	cbz	r0, 1000dece <ai_platform_network_create+0x2a>
1000debe:	4c38      	ldr	r4, [pc, #224]	; (1000dfa0 <ai_platform_network_create+0xfc>)
1000dec0:	2218      	movs	r2, #24
1000dec2:	60a2      	str	r2, [r4, #8]
1000dec4:	68a2      	ldr	r2, [r4, #8]
1000dec6:	2a18      	cmp	r2, #24
1000dec8:	d006      	beq.n	1000ded8 <ai_platform_network_create+0x34>
1000deca:	f7ff fdab 	bl	1000da24 <_ai_platform_release_crc>
1000dece:	f244 1033 	movw	r0, #16691	; 0x4133
1000ded2:	b002      	add	sp, #8
1000ded4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000ded8:	2201      	movs	r2, #1
1000deda:	4603      	mov	r3, r0
1000dedc:	60a2      	str	r2, [r4, #8]
1000dede:	68a2      	ldr	r2, [r4, #8]
1000dee0:	2a00      	cmp	r2, #0
1000dee2:	d1fc      	bne.n	1000dede <ai_platform_network_create+0x3a>
1000dee4:	4618      	mov	r0, r3
1000dee6:	f7ff fd9d 	bl	1000da24 <_ai_platform_release_crc>
1000deea:	f7ff fd99 	bl	1000da20 <_ai_platform_acquire_crc>
1000deee:	2301      	movs	r3, #1
1000def0:	60a3      	str	r3, [r4, #8]
1000def2:	4c2b      	ldr	r4, [pc, #172]	; (1000dfa0 <ai_platform_network_create+0xfc>)
1000def4:	68a1      	ldr	r1, [r4, #8]
1000def6:	2900      	cmp	r1, #0
1000def8:	d1fc      	bne.n	1000def4 <ai_platform_network_create+0x50>
1000defa:	4b2a      	ldr	r3, [pc, #168]	; (1000dfa4 <ai_platform_network_create+0x100>)
1000defc:	6023      	str	r3, [r4, #0]
1000defe:	6822      	ldr	r2, [r4, #0]
1000df00:	4b29      	ldr	r3, [pc, #164]	; (1000dfa8 <ai_platform_network_create+0x104>)
1000df02:	429a      	cmp	r2, r3
1000df04:	d000      	beq.n	1000df08 <ai_platform_network_create+0x64>
1000df06:	e7fe      	b.n	1000df06 <ai_platform_network_create+0x62>
1000df08:	f7ff fd8c 	bl	1000da24 <_ai_platform_release_crc>
1000df0c:	2d00      	cmp	r5, #0
1000df0e:	d038      	beq.n	1000df82 <ai_platform_network_create+0xde>
1000df10:	4b26      	ldr	r3, [pc, #152]	; (1000dfac <ai_platform_network_create+0x108>)
1000df12:	6033      	str	r3, [r6, #0]
1000df14:	602e      	str	r6, [r5, #0]
1000df16:	f000 fbb7 	bl	1000e688 <core_init>
1000df1a:	b988      	cbnz	r0, 1000df40 <ai_platform_network_create+0x9c>
1000df1c:	f04f 0a30 	mov.w	sl, #48	; 0x30
1000df20:	2300      	movs	r3, #0
1000df22:	602b      	str	r3, [r5, #0]
1000df24:	2410      	movs	r4, #16
1000df26:	464a      	mov	r2, r9
1000df28:	4641      	mov	r1, r8
1000df2a:	4638      	mov	r0, r7
1000df2c:	f001 ff24 	bl	1000fd78 <ai_version_get>
1000df30:	4603      	mov	r3, r0
1000df32:	2000      	movs	r0, #0
1000df34:	f36a 0007 	bfi	r0, sl, #0, #8
1000df38:	64b3      	str	r3, [r6, #72]	; 0x48
1000df3a:	f364 201f 	bfi	r0, r4, #8, #24
1000df3e:	e7c8      	b.n	1000ded2 <ai_platform_network_create+0x2e>
1000df40:	f7ff fd6e 	bl	1000da20 <_ai_platform_acquire_crc>
1000df44:	2301      	movs	r3, #1
1000df46:	60a3      	str	r3, [r4, #8]
1000df48:	4b15      	ldr	r3, [pc, #84]	; (1000dfa0 <ai_platform_network_create+0xfc>)
1000df4a:	689c      	ldr	r4, [r3, #8]
1000df4c:	2c00      	cmp	r4, #0
1000df4e:	d1fc      	bne.n	1000df4a <ai_platform_network_create+0xa6>
1000df50:	4a14      	ldr	r2, [pc, #80]	; (1000dfa4 <ai_platform_network_create+0x100>)
1000df52:	601a      	str	r2, [r3, #0]
1000df54:	681a      	ldr	r2, [r3, #0]
1000df56:	4b14      	ldr	r3, [pc, #80]	; (1000dfa8 <ai_platform_network_create+0x104>)
1000df58:	429a      	cmp	r2, r3
1000df5a:	d000      	beq.n	1000df5e <ai_platform_network_create+0xba>
1000df5c:	e7fe      	b.n	1000df5c <ai_platform_network_create+0xb8>
1000df5e:	f7ff fd61 	bl	1000da24 <_ai_platform_release_crc>
1000df62:	4622      	mov	r2, r4
1000df64:	4641      	mov	r1, r8
1000df66:	4638      	mov	r0, r7
1000df68:	f001 ff06 	bl	1000fd78 <ai_version_get>
1000df6c:	4622      	mov	r2, r4
1000df6e:	4682      	mov	sl, r0
1000df70:	2105      	movs	r1, #5
1000df72:	2001      	movs	r0, #1
1000df74:	f001 ff00 	bl	1000fd78 <ai_version_get>
1000df78:	4582      	cmp	sl, r0
1000df7a:	d005      	beq.n	1000df88 <ai_platform_network_create+0xe4>
1000df7c:	f04f 0a01 	mov.w	sl, #1
1000df80:	e7ce      	b.n	1000df20 <ai_platform_network_create+0x7c>
1000df82:	f241 0010 	movw	r0, #4112	; 0x1010
1000df86:	e7a4      	b.n	1000ded2 <ai_platform_network_create+0x2e>
1000df88:	4b09      	ldr	r3, [pc, #36]	; (1000dfb0 <ai_platform_network_create+0x10c>)
1000df8a:	9301      	str	r3, [sp, #4]
1000df8c:	a801      	add	r0, sp, #4
1000df8e:	f000 fb8f 	bl	1000e6b0 <ai_check_custom_types>
1000df92:	b108      	cbz	r0, 1000df98 <ai_platform_network_create+0xf4>
1000df94:	46a2      	mov	sl, r4
1000df96:	e7c6      	b.n	1000df26 <ai_platform_network_create+0x82>
1000df98:	f04f 0a02 	mov.w	sl, #2
1000df9c:	e7c0      	b.n	1000df20 <ai_platform_network_create+0x7c>
1000df9e:	bf00      	nop
1000dfa0:	4c004000 	.word	0x4c004000
1000dfa4:	f407a5c2 	.word	0xf407a5c2
1000dfa8:	b5e8b5cd 	.word	0xb5e8b5cd
1000dfac:	a1c00100 	.word	0xa1c00100
1000dfb0:	84048403 	.word	0x84048403

1000dfb4 <ai_platform_network_init>:
1000dfb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1000dfb8:	b1a0      	cbz	r0, 1000dfe4 <ai_platform_network_init+0x30>
1000dfba:	4b53      	ldr	r3, [pc, #332]	; (1000e108 <ai_platform_network_init+0x154>)
1000dfbc:	6802      	ldr	r2, [r0, #0]
1000dfbe:	429a      	cmp	r2, r3
1000dfc0:	4605      	mov	r5, r0
1000dfc2:	d10f      	bne.n	1000dfe4 <ai_platform_network_init+0x30>
1000dfc4:	460c      	mov	r4, r1
1000dfc6:	f7ff fd2b 	bl	1000da20 <_ai_platform_acquire_crc>
1000dfca:	4a50      	ldr	r2, [pc, #320]	; (1000e10c <ai_platform_network_init+0x158>)
1000dfcc:	2301      	movs	r3, #1
1000dfce:	6093      	str	r3, [r2, #8]
1000dfd0:	6893      	ldr	r3, [r2, #8]
1000dfd2:	2b00      	cmp	r3, #0
1000dfd4:	d1fc      	bne.n	1000dfd0 <ai_platform_network_init+0x1c>
1000dfd6:	4b4e      	ldr	r3, [pc, #312]	; (1000e110 <ai_platform_network_init+0x15c>)
1000dfd8:	6013      	str	r3, [r2, #0]
1000dfda:	6812      	ldr	r2, [r2, #0]
1000dfdc:	4b4d      	ldr	r3, [pc, #308]	; (1000e114 <ai_platform_network_init+0x160>)
1000dfde:	429a      	cmp	r2, r3
1000dfe0:	d014      	beq.n	1000e00c <ai_platform_network_init+0x58>
1000dfe2:	e7fe      	b.n	1000dfe2 <ai_platform_network_init+0x2e>
1000dfe4:	f7ff fd1c 	bl	1000da20 <_ai_platform_acquire_crc>
1000dfe8:	4b48      	ldr	r3, [pc, #288]	; (1000e10c <ai_platform_network_init+0x158>)
1000dfea:	2201      	movs	r2, #1
1000dfec:	609a      	str	r2, [r3, #8]
1000dfee:	689c      	ldr	r4, [r3, #8]
1000dff0:	2c00      	cmp	r4, #0
1000dff2:	d1fc      	bne.n	1000dfee <ai_platform_network_init+0x3a>
1000dff4:	4a46      	ldr	r2, [pc, #280]	; (1000e110 <ai_platform_network_init+0x15c>)
1000dff6:	601a      	str	r2, [r3, #0]
1000dff8:	681a      	ldr	r2, [r3, #0]
1000dffa:	4b46      	ldr	r3, [pc, #280]	; (1000e114 <ai_platform_network_init+0x160>)
1000dffc:	429a      	cmp	r2, r3
1000dffe:	d000      	beq.n	1000e002 <ai_platform_network_init+0x4e>
1000e000:	e7fe      	b.n	1000e000 <ai_platform_network_init+0x4c>
1000e002:	f7ff fd0f 	bl	1000da24 <_ai_platform_release_crc>
1000e006:	4620      	mov	r0, r4
1000e008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000e00c:	f7ff fd0a 	bl	1000da24 <_ai_platform_release_crc>
1000e010:	2c00      	cmp	r4, #0
1000e012:	d06c      	beq.n	1000e0ee <ai_platform_network_init+0x13a>
1000e014:	4b40      	ldr	r3, [pc, #256]	; (1000e118 <ai_platform_network_init+0x164>)
1000e016:	6822      	ldr	r2, [r4, #0]
1000e018:	429a      	cmp	r2, r3
1000e01a:	d110      	bne.n	1000e03e <ai_platform_network_init+0x8a>
1000e01c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
1000e020:	6923      	ldr	r3, [r4, #16]
1000e022:	89a6      	ldrh	r6, [r4, #12]
1000e024:	89e7      	ldrh	r7, [r4, #14]
1000e026:	62ab      	str	r3, [r5, #40]	; 0x28
1000e028:	e9c5 2107 	strd	r2, r1, [r5, #28]
1000e02c:	2303      	movs	r3, #3
1000e02e:	84ef      	strh	r7, [r5, #38]	; 0x26
1000e030:	84ae      	strh	r6, [r5, #36]	; 0x24
1000e032:	60eb      	str	r3, [r5, #12]
1000e034:	4628      	mov	r0, r5
1000e036:	f000 fb65 	bl	1000e704 <ai_layers_init_all>
1000e03a:	462c      	mov	r4, r5
1000e03c:	e7e3      	b.n	1000e006 <ai_platform_network_init+0x52>
1000e03e:	2101      	movs	r1, #1
1000e040:	4620      	mov	r0, r4
1000e042:	46a1      	mov	r9, r4
1000e044:	6864      	ldr	r4, [r4, #4]
1000e046:	f7ff fc9d 	bl	1000d984 <ai_buffer_get_size>
1000e04a:	f109 081c 	add.w	r8, r9, #28
1000e04e:	4606      	mov	r6, r0
1000e050:	2101      	movs	r1, #1
1000e052:	4640      	mov	r0, r8
1000e054:	f8d9 7020 	ldr.w	r7, [r9, #32]
1000e058:	f7ff fc94 	bl	1000d984 <ai_buffer_get_size>
1000e05c:	bb5e      	cbnz	r6, 1000e0b6 <ai_platform_network_init+0x102>
1000e05e:	4633      	mov	r3, r6
1000e060:	46b6      	mov	lr, r6
1000e062:	46b1      	mov	r9, r6
1000e064:	bb20      	cbnz	r0, 1000e0b0 <ai_platform_network_init+0xfc>
1000e066:	4680      	mov	r8, r0
1000e068:	4607      	mov	r7, r0
1000e06a:	b37c      	cbz	r4, 1000e0cc <ai_platform_network_init+0x118>
1000e06c:	8bea      	ldrh	r2, [r5, #30]
1000e06e:	4572      	cmp	r2, lr
1000e070:	d324      	bcc.n	1000e0bc <ai_platform_network_init+0x108>
1000e072:	b143      	cbz	r3, 1000e086 <ai_platform_network_init+0xd2>
1000e074:	46cc      	mov	ip, r9
1000e076:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
1000e07a:	6a2c      	ldr	r4, [r5, #32]
1000e07c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1000e07e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
1000e082:	e884 0007 	stmia.w	r4, {r0, r1, r2}
1000e086:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
1000e088:	f8a5 e01e 	strh.w	lr, [r5, #30]
1000e08c:	2400      	movs	r4, #0
1000e08e:	42bb      	cmp	r3, r7
1000e090:	83ac      	strh	r4, [r5, #28]
1000e092:	d323      	bcc.n	1000e0dc <ai_platform_network_init+0x128>
1000e094:	b34f      	cbz	r7, 1000e0ea <ai_platform_network_init+0x136>
1000e096:	46c6      	mov	lr, r8
1000e098:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
1000e09c:	f8d5 c028 	ldr.w	ip, [r5, #40]	; 0x28
1000e0a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
1000e0a4:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
1000e0a8:	4626      	mov	r6, r4
1000e0aa:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
1000e0ae:	e7bd      	b.n	1000e02c <ai_platform_network_init+0x78>
1000e0b0:	b31f      	cbz	r7, 1000e0fa <ai_platform_network_init+0x146>
1000e0b2:	2701      	movs	r7, #1
1000e0b4:	e7d9      	b.n	1000e06a <ai_platform_network_init+0xb6>
1000e0b6:	2301      	movs	r3, #1
1000e0b8:	469e      	mov	lr, r3
1000e0ba:	e7d3      	b.n	1000e064 <ai_platform_network_init+0xb0>
1000e0bc:	2212      	movs	r2, #18
1000e0be:	2116      	movs	r1, #22
1000e0c0:	f105 0010 	add.w	r0, r5, #16
1000e0c4:	f000 fae8 	bl	1000e698 <core_set_error>
1000e0c8:	2400      	movs	r4, #0
1000e0ca:	e79c      	b.n	1000e006 <ai_platform_network_init+0x52>
1000e0cc:	2e00      	cmp	r6, #0
1000e0ce:	d0cd      	beq.n	1000e06c <ai_platform_network_init+0xb8>
1000e0d0:	2110      	movs	r1, #16
1000e0d2:	2212      	movs	r2, #18
1000e0d4:	1868      	adds	r0, r5, r1
1000e0d6:	f000 fadf 	bl	1000e698 <core_set_error>
1000e0da:	e794      	b.n	1000e006 <ai_platform_network_init+0x52>
1000e0dc:	2213      	movs	r2, #19
1000e0de:	2116      	movs	r1, #22
1000e0e0:	f105 0010 	add.w	r0, r5, #16
1000e0e4:	f000 fad8 	bl	1000e698 <core_set_error>
1000e0e8:	e78d      	b.n	1000e006 <ai_platform_network_init+0x52>
1000e0ea:	463e      	mov	r6, r7
1000e0ec:	e79e      	b.n	1000e02c <ai_platform_network_init+0x78>
1000e0ee:	2110      	movs	r1, #16
1000e0f0:	2211      	movs	r2, #17
1000e0f2:	1868      	adds	r0, r5, r1
1000e0f4:	f000 fad0 	bl	1000e698 <core_set_error>
1000e0f8:	e785      	b.n	1000e006 <ai_platform_network_init+0x52>
1000e0fa:	2110      	movs	r1, #16
1000e0fc:	2213      	movs	r2, #19
1000e0fe:	1868      	adds	r0, r5, r1
1000e100:	f000 faca 	bl	1000e698 <core_set_error>
1000e104:	463c      	mov	r4, r7
1000e106:	e77e      	b.n	1000e006 <ai_platform_network_init+0x52>
1000e108:	a1c00100 	.word	0xa1c00100
1000e10c:	4c004000 	.word	0x4c004000
1000e110:	f407a5c2 	.word	0xf407a5c2
1000e114:	b5e8b5cd 	.word	0xb5e8b5cd
1000e118:	a1facade 	.word	0xa1facade

1000e11c <ai_platform_network_post_init>:
1000e11c:	b538      	push	{r3, r4, r5, lr}
1000e11e:	b198      	cbz	r0, 1000e148 <ai_platform_network_post_init+0x2c>
1000e120:	4b24      	ldr	r3, [pc, #144]	; (1000e1b4 <ai_platform_network_post_init+0x98>)
1000e122:	6802      	ldr	r2, [r0, #0]
1000e124:	429a      	cmp	r2, r3
1000e126:	4605      	mov	r5, r0
1000e128:	d10e      	bne.n	1000e148 <ai_platform_network_post_init+0x2c>
1000e12a:	f7ff fc79 	bl	1000da20 <_ai_platform_acquire_crc>
1000e12e:	4a22      	ldr	r2, [pc, #136]	; (1000e1b8 <ai_platform_network_post_init+0x9c>)
1000e130:	2301      	movs	r3, #1
1000e132:	6093      	str	r3, [r2, #8]
1000e134:	6893      	ldr	r3, [r2, #8]
1000e136:	2b00      	cmp	r3, #0
1000e138:	d1fc      	bne.n	1000e134 <ai_platform_network_post_init+0x18>
1000e13a:	4b20      	ldr	r3, [pc, #128]	; (1000e1bc <ai_platform_network_post_init+0xa0>)
1000e13c:	6013      	str	r3, [r2, #0]
1000e13e:	6812      	ldr	r2, [r2, #0]
1000e140:	4b1f      	ldr	r3, [pc, #124]	; (1000e1c0 <ai_platform_network_post_init+0xa4>)
1000e142:	429a      	cmp	r2, r3
1000e144:	d013      	beq.n	1000e16e <ai_platform_network_post_init+0x52>
1000e146:	e7fe      	b.n	1000e146 <ai_platform_network_post_init+0x2a>
1000e148:	f7ff fc6a 	bl	1000da20 <_ai_platform_acquire_crc>
1000e14c:	4b1a      	ldr	r3, [pc, #104]	; (1000e1b8 <ai_platform_network_post_init+0x9c>)
1000e14e:	2201      	movs	r2, #1
1000e150:	609a      	str	r2, [r3, #8]
1000e152:	689c      	ldr	r4, [r3, #8]
1000e154:	2c00      	cmp	r4, #0
1000e156:	d1fc      	bne.n	1000e152 <ai_platform_network_post_init+0x36>
1000e158:	4a18      	ldr	r2, [pc, #96]	; (1000e1bc <ai_platform_network_post_init+0xa0>)
1000e15a:	601a      	str	r2, [r3, #0]
1000e15c:	681a      	ldr	r2, [r3, #0]
1000e15e:	4b18      	ldr	r3, [pc, #96]	; (1000e1c0 <ai_platform_network_post_init+0xa4>)
1000e160:	429a      	cmp	r2, r3
1000e162:	d000      	beq.n	1000e166 <ai_platform_network_post_init+0x4a>
1000e164:	e7fe      	b.n	1000e164 <ai_platform_network_post_init+0x48>
1000e166:	f7ff fc5d 	bl	1000da24 <_ai_platform_release_crc>
1000e16a:	4620      	mov	r0, r4
1000e16c:	bd38      	pop	{r3, r4, r5, pc}
1000e16e:	f7ff fc59 	bl	1000da24 <_ai_platform_release_crc>
1000e172:	68eb      	ldr	r3, [r5, #12]
1000e174:	f013 0402 	ands.w	r4, r3, #2
1000e178:	d014      	beq.n	1000e1a4 <ai_platform_network_post_init+0x88>
1000e17a:	4628      	mov	r0, r5
1000e17c:	f000 fad0 	bl	1000e720 <ai_layers_post_init_all>
1000e180:	6beb      	ldr	r3, [r5, #60]	; 0x3c
1000e182:	b16b      	cbz	r3, 1000e1a0 <ai_platform_network_post_init+0x84>
1000e184:	6b6c      	ldr	r4, [r5, #52]	; 0x34
1000e186:	e007      	b.n	1000e198 <ai_platform_network_post_init+0x7c>
1000e188:	e9d5 320f 	ldrd	r3, r2, [r5, #60]	; 0x3c
1000e18c:	4798      	blx	r3
1000e18e:	6923      	ldr	r3, [r4, #16]
1000e190:	42a3      	cmp	r3, r4
1000e192:	d005      	beq.n	1000e1a0 <ai_platform_network_post_init+0x84>
1000e194:	b123      	cbz	r3, 1000e1a0 <ai_platform_network_post_init+0x84>
1000e196:	461c      	mov	r4, r3
1000e198:	4621      	mov	r1, r4
1000e19a:	2000      	movs	r0, #0
1000e19c:	2c00      	cmp	r4, #0
1000e19e:	d1f3      	bne.n	1000e188 <ai_platform_network_post_init+0x6c>
1000e1a0:	2001      	movs	r0, #1
1000e1a2:	bd38      	pop	{r3, r4, r5, pc}
1000e1a4:	2210      	movs	r2, #16
1000e1a6:	2111      	movs	r1, #17
1000e1a8:	18a8      	adds	r0, r5, r2
1000e1aa:	f000 fa75 	bl	1000e698 <core_set_error>
1000e1ae:	4620      	mov	r0, r4
1000e1b0:	bd38      	pop	{r3, r4, r5, pc}
1000e1b2:	bf00      	nop
1000e1b4:	a1c00100 	.word	0xa1c00100
1000e1b8:	4c004000 	.word	0x4c004000
1000e1bc:	f407a5c2 	.word	0xf407a5c2
1000e1c0:	b5e8b5cd 	.word	0xb5e8b5cd

1000e1c4 <ai_platform_network_process>:
1000e1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000e1c8:	460f      	mov	r7, r1
1000e1ca:	b083      	sub	sp, #12
1000e1cc:	4690      	mov	r8, r2
1000e1ce:	4605      	mov	r5, r0
1000e1d0:	b120      	cbz	r0, 1000e1dc <ai_platform_network_process+0x18>
1000e1d2:	4bb4      	ldr	r3, [pc, #720]	; (1000e4a4 <ai_platform_network_process+0x2e0>)
1000e1d4:	6802      	ldr	r2, [r0, #0]
1000e1d6:	429a      	cmp	r2, r3
1000e1d8:	bf18      	it	ne
1000e1da:	2500      	movne	r5, #0
1000e1dc:	f7ff fc20 	bl	1000da20 <_ai_platform_acquire_crc>
1000e1e0:	4bb1      	ldr	r3, [pc, #708]	; (1000e4a8 <ai_platform_network_process+0x2e4>)
1000e1e2:	2201      	movs	r2, #1
1000e1e4:	609a      	str	r2, [r3, #8]
1000e1e6:	689c      	ldr	r4, [r3, #8]
1000e1e8:	2c00      	cmp	r4, #0
1000e1ea:	d1fc      	bne.n	1000e1e6 <ai_platform_network_process+0x22>
1000e1ec:	4aaf      	ldr	r2, [pc, #700]	; (1000e4ac <ai_platform_network_process+0x2e8>)
1000e1ee:	601a      	str	r2, [r3, #0]
1000e1f0:	681a      	ldr	r2, [r3, #0]
1000e1f2:	4baf      	ldr	r3, [pc, #700]	; (1000e4b0 <ai_platform_network_process+0x2ec>)
1000e1f4:	429a      	cmp	r2, r3
1000e1f6:	d000      	beq.n	1000e1fa <ai_platform_network_process+0x36>
1000e1f8:	e7fe      	b.n	1000e1f8 <ai_platform_network_process+0x34>
1000e1fa:	f7ff fc13 	bl	1000da24 <_ai_platform_release_crc>
1000e1fe:	2d00      	cmp	r5, #0
1000e200:	f000 8145 	beq.w	1000e48e <ai_platform_network_process+0x2ca>
1000e204:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
1000e206:	b98b      	cbnz	r3, 1000e22c <ai_platform_network_process+0x68>
1000e208:	68ea      	ldr	r2, [r5, #12]
1000e20a:	616b      	str	r3, [r5, #20]
1000e20c:	f002 0203 	and.w	r2, r2, #3
1000e210:	2a03      	cmp	r2, #3
1000e212:	f040 8134 	bne.w	1000e47e <ai_platform_network_process+0x2ba>
1000e216:	2217      	movs	r2, #23
1000e218:	2112      	movs	r1, #18
1000e21a:	f105 0010 	add.w	r0, r5, #16
1000e21e:	f000 fa3b 	bl	1000e698 <core_set_error>
1000e222:	2600      	movs	r6, #0
1000e224:	4630      	mov	r0, r6
1000e226:	b003      	add	sp, #12
1000e228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000e22c:	68eb      	ldr	r3, [r5, #12]
1000e22e:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
1000e232:	616c      	str	r4, [r5, #20]
1000e234:	f003 0303 	and.w	r3, r3, #3
1000e238:	2b03      	cmp	r3, #3
1000e23a:	f040 8120 	bne.w	1000e47e <ai_platform_network_process+0x2ba>
1000e23e:	2f00      	cmp	r7, #0
1000e240:	d0e9      	beq.n	1000e216 <ai_platform_network_process+0x52>
1000e242:	f1ba 0f00 	cmp.w	sl, #0
1000e246:	d0e6      	beq.n	1000e216 <ai_platform_network_process+0x52>
1000e248:	f8ba 3000 	ldrh.w	r3, [sl]
1000e24c:	2b00      	cmp	r3, #0
1000e24e:	d0e2      	beq.n	1000e216 <ai_platform_network_process+0x52>
1000e250:	69bb      	ldr	r3, [r7, #24]
1000e252:	681b      	ldr	r3, [r3, #0]
1000e254:	9300      	str	r3, [sp, #0]
1000e256:	f8da 3004 	ldr.w	r3, [sl, #4]
1000e25a:	2b00      	cmp	r3, #0
1000e25c:	d075      	beq.n	1000e34a <ai_platform_network_process+0x186>
1000e25e:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
1000e262:	2e00      	cmp	r6, #0
1000e264:	d071      	beq.n	1000e34a <ai_platform_network_process+0x186>
1000e266:	f8da 3008 	ldr.w	r3, [sl, #8]
1000e26a:	f8d3 b000 	ldr.w	fp, [r3]
1000e26e:	0123      	lsls	r3, r4, #4
1000e270:	eb1b 1904 	adds.w	r9, fp, r4, lsl #4
1000e274:	9301      	str	r3, [sp, #4]
1000e276:	d0ce      	beq.n	1000e216 <ai_platform_network_process+0x52>
1000e278:	69b3      	ldr	r3, [r6, #24]
1000e27a:	2101      	movs	r1, #1
1000e27c:	685b      	ldr	r3, [r3, #4]
1000e27e:	9301      	str	r3, [sp, #4]
1000e280:	4638      	mov	r0, r7
1000e282:	f7ff fb7f 	bl	1000d984 <ai_buffer_get_size>
1000e286:	9b01      	ldr	r3, [sp, #4]
1000e288:	4283      	cmp	r3, r0
1000e28a:	f0c0 8102 	bcc.w	1000e492 <ai_platform_network_process+0x2ce>
1000e28e:	68f0      	ldr	r0, [r6, #12]
1000e290:	69b9      	ldr	r1, [r7, #24]
1000e292:	68c2      	ldr	r2, [r0, #12]
1000e294:	68cb      	ldr	r3, [r1, #12]
1000e296:	429a      	cmp	r2, r3
1000e298:	f040 80fb 	bne.w	1000e492 <ai_platform_network_process+0x2ce>
1000e29c:	6882      	ldr	r2, [r0, #8]
1000e29e:	688b      	ldr	r3, [r1, #8]
1000e2a0:	429a      	cmp	r2, r3
1000e2a2:	f040 80f6 	bne.w	1000e492 <ai_platform_network_process+0x2ce>
1000e2a6:	6842      	ldr	r2, [r0, #4]
1000e2a8:	684b      	ldr	r3, [r1, #4]
1000e2aa:	429a      	cmp	r2, r3
1000e2ac:	f040 80f1 	bne.w	1000e492 <ai_platform_network_process+0x2ce>
1000e2b0:	69b3      	ldr	r3, [r6, #24]
1000e2b2:	e9d3 0100 	ldrd	r0, r1, [r3]
1000e2b6:	f001 fd4d 	bl	1000fd54 <ai_array_get_data_byte_size>
1000e2ba:	9001      	str	r0, [sp, #4]
1000e2bc:	4630      	mov	r0, r6
1000e2be:	f001 fd61 	bl	1000fd84 <get_tensor_byte_size>
1000e2c2:	9b01      	ldr	r3, [sp, #4]
1000e2c4:	4283      	cmp	r3, r0
1000e2c6:	f0c0 80e4 	bcc.w	1000e492 <ai_platform_network_process+0x2ce>
1000e2ca:	69b3      	ldr	r3, [r6, #24]
1000e2cc:	6818      	ldr	r0, [r3, #0]
1000e2ce:	f001 fcad 	bl	1000fc2c <ai_array_to_buffer_fmt>
1000e2d2:	683b      	ldr	r3, [r7, #0]
1000e2d4:	4058      	eors	r0, r3
1000e2d6:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
1000e2da:	f040 81a5 	bne.w	1000e628 <ai_platform_network_process+0x464>
1000e2de:	687b      	ldr	r3, [r7, #4]
1000e2e0:	2b00      	cmp	r3, #0
1000e2e2:	f000 8199 	beq.w	1000e618 <ai_platform_network_process+0x454>
1000e2e6:	69bb      	ldr	r3, [r7, #24]
1000e2e8:	681b      	ldr	r3, [r3, #0]
1000e2ea:	2b00      	cmp	r3, #0
1000e2ec:	f000 818c 	beq.w	1000e608 <ai_platform_network_process+0x444>
1000e2f0:	9a00      	ldr	r2, [sp, #0]
1000e2f2:	429a      	cmp	r2, r3
1000e2f4:	bf38      	it	cc
1000e2f6:	461a      	movcc	r2, r3
1000e2f8:	4630      	mov	r0, r6
1000e2fa:	9200      	str	r2, [sp, #0]
1000e2fc:	f001 fd42 	bl	1000fd84 <get_tensor_byte_size>
1000e300:	f8c9 0008 	str.w	r0, [r9, #8]
1000e304:	69bb      	ldr	r3, [r7, #24]
1000e306:	681b      	ldr	r3, [r3, #0]
1000e308:	fb00 f303 	mul.w	r3, r0, r3
1000e30c:	f8c9 300c 	str.w	r3, [r9, #12]
1000e310:	6879      	ldr	r1, [r7, #4]
1000e312:	f8c9 1004 	str.w	r1, [r9, #4]
1000e316:	0122      	lsls	r2, r4, #4
1000e318:	440b      	add	r3, r1
1000e31a:	f84b 3002 	str.w	r3, [fp, r2]
1000e31e:	69b0      	ldr	r0, [r6, #24]
1000e320:	6803      	ldr	r3, [r0, #0]
1000e322:	009a      	lsls	r2, r3, #2
1000e324:	f104 0401 	add.w	r4, r4, #1
1000e328:	f107 071c 	add.w	r7, r7, #28
1000e32c:	f100 80a1 	bmi.w	1000e472 <ai_platform_network_process+0x2ae>
1000e330:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
1000e334:	1a9b      	subs	r3, r3, r2
1000e336:	4419      	add	r1, r3
1000e338:	6081      	str	r1, [r0, #8]
1000e33a:	69b3      	ldr	r3, [r6, #24]
1000e33c:	f8d9 2004 	ldr.w	r2, [r9, #4]
1000e340:	60da      	str	r2, [r3, #12]
1000e342:	f8ba 3000 	ldrh.w	r3, [sl]
1000e346:	42a3      	cmp	r3, r4
1000e348:	d885      	bhi.n	1000e256 <ai_platform_network_process+0x92>
1000e34a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
1000e34c:	f1b8 0f00 	cmp.w	r8, #0
1000e350:	f000 8172 	beq.w	1000e638 <ai_platform_network_process+0x474>
1000e354:	2b01      	cmp	r3, #1
1000e356:	f240 814f 	bls.w	1000e5f8 <ai_platform_network_process+0x434>
1000e35a:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
1000e35e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
1000e362:	2b00      	cmp	r3, #0
1000e364:	f000 8148 	beq.w	1000e5f8 <ai_platform_network_process+0x434>
1000e368:	2400      	movs	r4, #0
1000e36a:	462e      	mov	r6, r5
1000e36c:	f8da 3010 	ldr.w	r3, [sl, #16]
1000e370:	2b00      	cmp	r3, #0
1000e372:	f000 80a4 	beq.w	1000e4be <ai_platform_network_process+0x2fa>
1000e376:	f853 7024 	ldr.w	r7, [r3, r4, lsl #2]
1000e37a:	2f00      	cmp	r7, #0
1000e37c:	f000 809f 	beq.w	1000e4be <ai_platform_network_process+0x2fa>
1000e380:	f8da 3014 	ldr.w	r3, [sl, #20]
1000e384:	f8d3 b000 	ldr.w	fp, [r3]
1000e388:	eb1b 1904 	adds.w	r9, fp, r4, lsl #4
1000e38c:	ea4f 1504 	mov.w	r5, r4, lsl #4
1000e390:	f000 8172 	beq.w	1000e678 <ai_platform_network_process+0x4b4>
1000e394:	69bb      	ldr	r3, [r7, #24]
1000e396:	2101      	movs	r1, #1
1000e398:	685b      	ldr	r3, [r3, #4]
1000e39a:	9301      	str	r3, [sp, #4]
1000e39c:	4640      	mov	r0, r8
1000e39e:	f7ff faf1 	bl	1000d984 <ai_buffer_get_size>
1000e3a2:	9b01      	ldr	r3, [sp, #4]
1000e3a4:	4283      	cmp	r3, r0
1000e3a6:	f0c0 8126 	bcc.w	1000e5f6 <ai_platform_network_process+0x432>
1000e3aa:	68f8      	ldr	r0, [r7, #12]
1000e3ac:	f8d8 1018 	ldr.w	r1, [r8, #24]
1000e3b0:	68c2      	ldr	r2, [r0, #12]
1000e3b2:	68cb      	ldr	r3, [r1, #12]
1000e3b4:	429a      	cmp	r2, r3
1000e3b6:	f040 811e 	bne.w	1000e5f6 <ai_platform_network_process+0x432>
1000e3ba:	6882      	ldr	r2, [r0, #8]
1000e3bc:	688b      	ldr	r3, [r1, #8]
1000e3be:	429a      	cmp	r2, r3
1000e3c0:	f040 8119 	bne.w	1000e5f6 <ai_platform_network_process+0x432>
1000e3c4:	6842      	ldr	r2, [r0, #4]
1000e3c6:	684b      	ldr	r3, [r1, #4]
1000e3c8:	429a      	cmp	r2, r3
1000e3ca:	f040 8114 	bne.w	1000e5f6 <ai_platform_network_process+0x432>
1000e3ce:	69bb      	ldr	r3, [r7, #24]
1000e3d0:	e9d3 0100 	ldrd	r0, r1, [r3]
1000e3d4:	f001 fcbe 	bl	1000fd54 <ai_array_get_data_byte_size>
1000e3d8:	9001      	str	r0, [sp, #4]
1000e3da:	4638      	mov	r0, r7
1000e3dc:	f001 fcd2 	bl	1000fd84 <get_tensor_byte_size>
1000e3e0:	9b01      	ldr	r3, [sp, #4]
1000e3e2:	4283      	cmp	r3, r0
1000e3e4:	f0c0 8107 	bcc.w	1000e5f6 <ai_platform_network_process+0x432>
1000e3e8:	69bb      	ldr	r3, [r7, #24]
1000e3ea:	6818      	ldr	r0, [r3, #0]
1000e3ec:	f001 fc1e 	bl	1000fc2c <ai_array_to_buffer_fmt>
1000e3f0:	f8d8 3000 	ldr.w	r3, [r8]
1000e3f4:	4058      	eors	r0, r3
1000e3f6:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
1000e3fa:	f040 812a 	bne.w	1000e652 <ai_platform_network_process+0x48e>
1000e3fe:	f8d8 3004 	ldr.w	r3, [r8, #4]
1000e402:	2b00      	cmp	r3, #0
1000e404:	f000 811c 	beq.w	1000e640 <ai_platform_network_process+0x47c>
1000e408:	f8d8 3018 	ldr.w	r3, [r8, #24]
1000e40c:	681b      	ldr	r3, [r3, #0]
1000e40e:	2b00      	cmp	r3, #0
1000e410:	f000 8127 	beq.w	1000e662 <ai_platform_network_process+0x49e>
1000e414:	9a00      	ldr	r2, [sp, #0]
1000e416:	429a      	cmp	r2, r3
1000e418:	bf38      	it	cc
1000e41a:	461a      	movcc	r2, r3
1000e41c:	4638      	mov	r0, r7
1000e41e:	9200      	str	r2, [sp, #0]
1000e420:	f001 fcb0 	bl	1000fd84 <get_tensor_byte_size>
1000e424:	f8c9 0008 	str.w	r0, [r9, #8]
1000e428:	f8d8 3018 	ldr.w	r3, [r8, #24]
1000e42c:	681b      	ldr	r3, [r3, #0]
1000e42e:	fb00 f303 	mul.w	r3, r0, r3
1000e432:	f8c9 300c 	str.w	r3, [r9, #12]
1000e436:	f8d8 1004 	ldr.w	r1, [r8, #4]
1000e43a:	f8c9 1004 	str.w	r1, [r9, #4]
1000e43e:	440b      	add	r3, r1
1000e440:	f84b 3005 	str.w	r3, [fp, r5]
1000e444:	69b8      	ldr	r0, [r7, #24]
1000e446:	6803      	ldr	r3, [r0, #0]
1000e448:	009b      	lsls	r3, r3, #2
1000e44a:	f104 0401 	add.w	r4, r4, #1
1000e44e:	f108 081c 	add.w	r8, r8, #28
1000e452:	d42f      	bmi.n	1000e4b4 <ai_platform_network_process+0x2f0>
1000e454:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
1000e458:	1a9b      	subs	r3, r3, r2
1000e45a:	4419      	add	r1, r3
1000e45c:	6081      	str	r1, [r0, #8]
1000e45e:	69bb      	ldr	r3, [r7, #24]
1000e460:	f8d9 2004 	ldr.w	r2, [r9, #4]
1000e464:	60da      	str	r2, [r3, #12]
1000e466:	f8ba 300c 	ldrh.w	r3, [sl, #12]
1000e46a:	429c      	cmp	r4, r3
1000e46c:	f4ff af7e 	bcc.w	1000e36c <ai_platform_network_process+0x1a8>
1000e470:	e025      	b.n	1000e4be <ai_platform_network_process+0x2fa>
1000e472:	f8ba 3000 	ldrh.w	r3, [sl]
1000e476:	429c      	cmp	r4, r3
1000e478:	f4ff aeed 	bcc.w	1000e256 <ai_platform_network_process+0x92>
1000e47c:	e765      	b.n	1000e34a <ai_platform_network_process+0x186>
1000e47e:	2230      	movs	r2, #48	; 0x30
1000e480:	2111      	movs	r1, #17
1000e482:	f105 0010 	add.w	r0, r5, #16
1000e486:	f000 f907 	bl	1000e698 <core_set_error>
1000e48a:	2600      	movs	r6, #0
1000e48c:	e6ca      	b.n	1000e224 <ai_platform_network_process+0x60>
1000e48e:	462e      	mov	r6, r5
1000e490:	e6c8      	b.n	1000e224 <ai_platform_network_process+0x60>
1000e492:	2218      	movs	r2, #24
1000e494:	2112      	movs	r1, #18
1000e496:	f105 0010 	add.w	r0, r5, #16
1000e49a:	f000 f8fd 	bl	1000e698 <core_set_error>
1000e49e:	2600      	movs	r6, #0
1000e4a0:	e6c0      	b.n	1000e224 <ai_platform_network_process+0x60>
1000e4a2:	bf00      	nop
1000e4a4:	a1c00100 	.word	0xa1c00100
1000e4a8:	4c004000 	.word	0x4c004000
1000e4ac:	f407a5c2 	.word	0xf407a5c2
1000e4b0:	b5e8b5cd 	.word	0xb5e8b5cd
1000e4b4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
1000e4b8:	429c      	cmp	r4, r3
1000e4ba:	f4ff af57 	bcc.w	1000e36c <ai_platform_network_process+0x1a8>
1000e4be:	f8bd 2000 	ldrh.w	r2, [sp]
1000e4c2:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
1000e4c4:	82b2      	strh	r2, [r6, #20]
1000e4c6:	4635      	mov	r5, r6
1000e4c8:	2b00      	cmp	r3, #0
1000e4ca:	f040 808e 	bne.w	1000e5ea <ai_platform_network_process+0x426>
1000e4ce:	461f      	mov	r7, r3
1000e4d0:	461e      	mov	r6, r3
1000e4d2:	8aeb      	ldrh	r3, [r5, #22]
1000e4d4:	4293      	cmp	r3, r2
1000e4d6:	bf38      	it	cc
1000e4d8:	46ab      	movcc	fp, r5
1000e4da:	d23c      	bcs.n	1000e556 <ai_platform_network_process+0x392>
1000e4dc:	2f00      	cmp	r7, #0
1000e4de:	d03f      	beq.n	1000e560 <ai_platform_network_process+0x39c>
1000e4e0:	f04f 0800 	mov.w	r8, #0
1000e4e4:	e014      	b.n	1000e510 <ai_platform_network_process+0x34c>
1000e4e6:	6882      	ldr	r2, [r0, #8]
1000e4e8:	68c5      	ldr	r5, [r0, #12]
1000e4ea:	6863      	ldr	r3, [r4, #4]
1000e4ec:	1b52      	subs	r2, r2, r5
1000e4ee:	4413      	add	r3, r2
1000e4f0:	6083      	str	r3, [r0, #8]
1000e4f2:	698b      	ldr	r3, [r1, #24]
1000e4f4:	6862      	ldr	r2, [r4, #4]
1000e4f6:	60da      	str	r2, [r3, #12]
1000e4f8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
1000e4fc:	f859 200a 	ldr.w	r2, [r9, sl]
1000e500:	440b      	add	r3, r1
1000e502:	4293      	cmp	r3, r2
1000e504:	bf24      	itt	cs
1000e506:	68e3      	ldrcs	r3, [r4, #12]
1000e508:	1ad3      	subcs	r3, r2, r3
1000e50a:	6063      	str	r3, [r4, #4]
1000e50c:	f108 0801 	add.w	r8, r8, #1
1000e510:	883b      	ldrh	r3, [r7, #0]
1000e512:	4543      	cmp	r3, r8
1000e514:	ea4f 1a08 	mov.w	sl, r8, lsl #4
1000e518:	d922      	bls.n	1000e560 <ai_platform_network_process+0x39c>
1000e51a:	687b      	ldr	r3, [r7, #4]
1000e51c:	b303      	cbz	r3, 1000e560 <ai_platform_network_process+0x39c>
1000e51e:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
1000e522:	b1e9      	cbz	r1, 1000e560 <ai_platform_network_process+0x39c>
1000e524:	6988      	ldr	r0, [r1, #24]
1000e526:	68ba      	ldr	r2, [r7, #8]
1000e528:	6803      	ldr	r3, [r0, #0]
1000e52a:	f8d2 9000 	ldr.w	r9, [r2]
1000e52e:	009d      	lsls	r5, r3, #2
1000e530:	eb09 1408 	add.w	r4, r9, r8, lsl #4
1000e534:	d5d7      	bpl.n	1000e4e6 <ai_platform_network_process+0x322>
1000e536:	6881      	ldr	r1, [r0, #8]
1000e538:	68a2      	ldr	r2, [r4, #8]
1000e53a:	6860      	ldr	r0, [r4, #4]
1000e53c:	f001 faf0 	bl	1000fb20 <st_int8_copy>
1000e540:	e7da      	b.n	1000e4f8 <ai_platform_network_process+0x334>
1000e542:	f8bb 3016 	ldrh.w	r3, [fp, #22]
1000e546:	f8bb 2014 	ldrh.w	r2, [fp, #20]
1000e54a:	3301      	adds	r3, #1
1000e54c:	b29b      	uxth	r3, r3
1000e54e:	429a      	cmp	r2, r3
1000e550:	f8ab 3016 	strh.w	r3, [fp, #22]
1000e554:	d8c2      	bhi.n	1000e4dc <ai_platform_network_process+0x318>
1000e556:	461e      	mov	r6, r3
1000e558:	4630      	mov	r0, r6
1000e55a:	b003      	add	sp, #12
1000e55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000e560:	4658      	mov	r0, fp
1000e562:	f000 f8f1 	bl	1000e748 <ai_layers_forward_all>
1000e566:	2e00      	cmp	r6, #0
1000e568:	d0eb      	beq.n	1000e542 <ai_platform_network_process+0x37e>
1000e56a:	2400      	movs	r4, #0
1000e56c:	e016      	b.n	1000e59c <ai_platform_network_process+0x3d8>
1000e56e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
1000e572:	f859 100a 	ldr.w	r1, [r9, sl]
1000e576:	4413      	add	r3, r2
1000e578:	428b      	cmp	r3, r1
1000e57a:	bf24      	itt	cs
1000e57c:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
1000e580:	1acb      	subcs	r3, r1, r3
1000e582:	f8c8 3004 	str.w	r3, [r8, #4]
1000e586:	6981      	ldr	r1, [r0, #24]
1000e588:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
1000e58c:	1b52      	subs	r2, r2, r5
1000e58e:	4413      	add	r3, r2
1000e590:	608b      	str	r3, [r1, #8]
1000e592:	6983      	ldr	r3, [r0, #24]
1000e594:	f8d8 2004 	ldr.w	r2, [r8, #4]
1000e598:	60da      	str	r2, [r3, #12]
1000e59a:	3401      	adds	r4, #1
1000e59c:	8833      	ldrh	r3, [r6, #0]
1000e59e:	42a3      	cmp	r3, r4
1000e5a0:	d9cf      	bls.n	1000e542 <ai_platform_network_process+0x37e>
1000e5a2:	6873      	ldr	r3, [r6, #4]
1000e5a4:	2b00      	cmp	r3, #0
1000e5a6:	d0cc      	beq.n	1000e542 <ai_platform_network_process+0x37e>
1000e5a8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1000e5ac:	2800      	cmp	r0, #0
1000e5ae:	d0c8      	beq.n	1000e542 <ai_platform_network_process+0x37e>
1000e5b0:	68b2      	ldr	r2, [r6, #8]
1000e5b2:	6983      	ldr	r3, [r0, #24]
1000e5b4:	f8d2 9000 	ldr.w	r9, [r2]
1000e5b8:	681a      	ldr	r2, [r3, #0]
1000e5ba:	0092      	lsls	r2, r2, #2
1000e5bc:	ea4f 1a04 	mov.w	sl, r4, lsl #4
1000e5c0:	eb09 1804 	add.w	r8, r9, r4, lsl #4
1000e5c4:	d5d3      	bpl.n	1000e56e <ai_platform_network_process+0x3aa>
1000e5c6:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
1000e5ca:	6898      	ldr	r0, [r3, #8]
1000e5cc:	f001 faa8 	bl	1000fb20 <st_int8_copy>
1000e5d0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
1000e5d4:	f859 200a 	ldr.w	r2, [r9, sl]
1000e5d8:	440b      	add	r3, r1
1000e5da:	4293      	cmp	r3, r2
1000e5dc:	bf24      	itt	cs
1000e5de:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
1000e5e2:	1ad3      	subcs	r3, r2, r3
1000e5e4:	f8c8 3004 	str.w	r3, [r8, #4]
1000e5e8:	e7d7      	b.n	1000e59a <ai_platform_network_process+0x3d6>
1000e5ea:	2b01      	cmp	r3, #1
1000e5ec:	6b2f      	ldr	r7, [r5, #48]	; 0x30
1000e5ee:	d041      	beq.n	1000e674 <ai_platform_network_process+0x4b0>
1000e5f0:	f107 060c 	add.w	r6, r7, #12
1000e5f4:	e76d      	b.n	1000e4d2 <ai_platform_network_process+0x30e>
1000e5f6:	4635      	mov	r5, r6
1000e5f8:	2218      	movs	r2, #24
1000e5fa:	2113      	movs	r1, #19
1000e5fc:	f105 0010 	add.w	r0, r5, #16
1000e600:	f000 f84a 	bl	1000e698 <core_set_error>
1000e604:	2600      	movs	r6, #0
1000e606:	e60d      	b.n	1000e224 <ai_platform_network_process+0x60>
1000e608:	4606      	mov	r6, r0
1000e60a:	2221      	movs	r2, #33	; 0x21
1000e60c:	2112      	movs	r1, #18
1000e60e:	f105 0010 	add.w	r0, r5, #16
1000e612:	f000 f841 	bl	1000e698 <core_set_error>
1000e616:	e605      	b.n	1000e224 <ai_platform_network_process+0x60>
1000e618:	4606      	mov	r6, r0
1000e61a:	2217      	movs	r2, #23
1000e61c:	2112      	movs	r1, #18
1000e61e:	f105 0010 	add.w	r0, r5, #16
1000e622:	f000 f839 	bl	1000e698 <core_set_error>
1000e626:	e5fd      	b.n	1000e224 <ai_platform_network_process+0x60>
1000e628:	2219      	movs	r2, #25
1000e62a:	2112      	movs	r1, #18
1000e62c:	f105 0010 	add.w	r0, r5, #16
1000e630:	f000 f832 	bl	1000e698 <core_set_error>
1000e634:	2600      	movs	r6, #0
1000e636:	e5f5      	b.n	1000e224 <ai_platform_network_process+0x60>
1000e638:	f8bd 2000 	ldrh.w	r2, [sp]
1000e63c:	82aa      	strh	r2, [r5, #20]
1000e63e:	e743      	b.n	1000e4c8 <ai_platform_network_process+0x304>
1000e640:	4635      	mov	r5, r6
1000e642:	2217      	movs	r2, #23
1000e644:	4606      	mov	r6, r0
1000e646:	2113      	movs	r1, #19
1000e648:	f105 0010 	add.w	r0, r5, #16
1000e64c:	f000 f824 	bl	1000e698 <core_set_error>
1000e650:	e5e8      	b.n	1000e224 <ai_platform_network_process+0x60>
1000e652:	f106 0010 	add.w	r0, r6, #16
1000e656:	2219      	movs	r2, #25
1000e658:	2113      	movs	r1, #19
1000e65a:	f000 f81d 	bl	1000e698 <core_set_error>
1000e65e:	2600      	movs	r6, #0
1000e660:	e5e0      	b.n	1000e224 <ai_platform_network_process+0x60>
1000e662:	4635      	mov	r5, r6
1000e664:	2221      	movs	r2, #33	; 0x21
1000e666:	4606      	mov	r6, r0
1000e668:	2113      	movs	r1, #19
1000e66a:	f105 0010 	add.w	r0, r5, #16
1000e66e:	f000 f813 	bl	1000e698 <core_set_error>
1000e672:	e5d7      	b.n	1000e224 <ai_platform_network_process+0x60>
1000e674:	2600      	movs	r6, #0
1000e676:	e72c      	b.n	1000e4d2 <ai_platform_network_process+0x30e>
1000e678:	f106 0010 	add.w	r0, r6, #16
1000e67c:	2217      	movs	r2, #23
1000e67e:	2113      	movs	r1, #19
1000e680:	f000 f80a 	bl	1000e698 <core_set_error>
1000e684:	464e      	mov	r6, r9
1000e686:	e5cd      	b.n	1000e224 <ai_platform_network_process+0x60>

1000e688 <core_init>:
1000e688:	2001      	movs	r0, #1
1000e68a:	4770      	bx	lr

1000e68c <core_get_error>:
1000e68c:	4603      	mov	r3, r0
1000e68e:	2200      	movs	r2, #0
1000e690:	6800      	ldr	r0, [r0, #0]
1000e692:	601a      	str	r2, [r3, #0]
1000e694:	4770      	bx	lr
1000e696:	bf00      	nop

1000e698 <core_set_error>:
1000e698:	4603      	mov	r3, r0
1000e69a:	7800      	ldrb	r0, [r0, #0]
1000e69c:	b108      	cbz	r0, 1000e6a2 <core_set_error+0xa>
1000e69e:	2000      	movs	r0, #0
1000e6a0:	4770      	bx	lr
1000e6a2:	7019      	strb	r1, [r3, #0]
1000e6a4:	6819      	ldr	r1, [r3, #0]
1000e6a6:	f362 211f 	bfi	r1, r2, #8, #24
1000e6aa:	2001      	movs	r0, #1
1000e6ac:	6019      	str	r1, [r3, #0]
1000e6ae:	4770      	bx	lr

1000e6b0 <ai_check_custom_types>:
1000e6b0:	b082      	sub	sp, #8
1000e6b2:	4b13      	ldr	r3, [pc, #76]	; (1000e700 <ai_check_custom_types+0x50>)
1000e6b4:	9301      	str	r3, [sp, #4]
1000e6b6:	b118      	cbz	r0, 1000e6c0 <ai_check_custom_types+0x10>
1000e6b8:	7803      	ldrb	r3, [r0, #0]
1000e6ba:	2b03      	cmp	r3, #3
1000e6bc:	d002      	beq.n	1000e6c4 <ai_check_custom_types+0x14>
1000e6be:	2000      	movs	r0, #0
1000e6c0:	b002      	add	sp, #8
1000e6c2:	4770      	bx	lr
1000e6c4:	f89d 2004 	ldrb.w	r2, [sp, #4]
1000e6c8:	4293      	cmp	r3, r2
1000e6ca:	d004      	beq.n	1000e6d6 <ai_check_custom_types+0x26>
1000e6cc:	2001      	movs	r0, #1
1000e6ce:	f080 0001 	eor.w	r0, r0, #1
1000e6d2:	b002      	add	sp, #8
1000e6d4:	4770      	bx	lr
1000e6d6:	7842      	ldrb	r2, [r0, #1]
1000e6d8:	f89d 3005 	ldrb.w	r3, [sp, #5]
1000e6dc:	429a      	cmp	r2, r3
1000e6de:	f100 0001 	add.w	r0, r0, #1
1000e6e2:	d1f3      	bne.n	1000e6cc <ai_check_custom_types+0x1c>
1000e6e4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
1000e6e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
1000e6ec:	429a      	cmp	r2, r3
1000e6ee:	d1ed      	bne.n	1000e6cc <ai_check_custom_types+0x1c>
1000e6f0:	7842      	ldrb	r2, [r0, #1]
1000e6f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
1000e6f6:	429a      	cmp	r2, r3
1000e6f8:	d1e8      	bne.n	1000e6cc <ai_check_custom_types+0x1c>
1000e6fa:	2000      	movs	r0, #0
1000e6fc:	e7e7      	b.n	1000e6ce <ai_check_custom_types+0x1e>
1000e6fe:	bf00      	nop
1000e700:	84048403 	.word	0x84048403

1000e704 <ai_layers_init_all>:
1000e704:	4601      	mov	r1, r0
1000e706:	2000      	movs	r0, #0
1000e708:	6b4b      	ldr	r3, [r1, #52]	; 0x34
1000e70a:	b143      	cbz	r3, 1000e71e <ai_layers_init_all+0x1a>
1000e70c:	691a      	ldr	r2, [r3, #16]
1000e70e:	60d9      	str	r1, [r3, #12]
1000e710:	429a      	cmp	r2, r3
1000e712:	f100 0001 	add.w	r0, r0, #1
1000e716:	d002      	beq.n	1000e71e <ai_layers_init_all+0x1a>
1000e718:	b10a      	cbz	r2, 1000e71e <ai_layers_init_all+0x1a>
1000e71a:	4613      	mov	r3, r2
1000e71c:	e7f5      	b.n	1000e70a <ai_layers_init_all+0x6>
1000e71e:	4770      	bx	lr

1000e720 <ai_layers_post_init_all>:
1000e720:	b538      	push	{r3, r4, r5, lr}
1000e722:	6b44      	ldr	r4, [r0, #52]	; 0x34
1000e724:	2500      	movs	r5, #0
1000e726:	b16c      	cbz	r4, 1000e744 <ai_layers_post_init_all+0x24>
1000e728:	6863      	ldr	r3, [r4, #4]
1000e72a:	07db      	lsls	r3, r3, #31
1000e72c:	d504      	bpl.n	1000e738 <ai_layers_post_init_all+0x18>
1000e72e:	6a23      	ldr	r3, [r4, #32]
1000e730:	4620      	mov	r0, r4
1000e732:	b10b      	cbz	r3, 1000e738 <ai_layers_post_init_all+0x18>
1000e734:	4798      	blx	r3
1000e736:	3501      	adds	r5, #1
1000e738:	6923      	ldr	r3, [r4, #16]
1000e73a:	42a3      	cmp	r3, r4
1000e73c:	d002      	beq.n	1000e744 <ai_layers_post_init_all+0x24>
1000e73e:	b10b      	cbz	r3, 1000e744 <ai_layers_post_init_all+0x24>
1000e740:	461c      	mov	r4, r3
1000e742:	e7f0      	b.n	1000e726 <ai_layers_post_init_all+0x6>
1000e744:	4628      	mov	r0, r5
1000e746:	bd38      	pop	{r3, r4, r5, pc}

1000e748 <ai_layers_forward_all>:
1000e748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000e74c:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
1000e750:	4604      	mov	r4, r0
1000e752:	f1b8 0f00 	cmp.w	r8, #0
1000e756:	d02b      	beq.n	1000e7b0 <ai_layers_forward_all+0x68>
1000e758:	6b41      	ldr	r1, [r0, #52]	; 0x34
1000e75a:	6381      	str	r1, [r0, #56]	; 0x38
1000e75c:	b321      	cbz	r1, 1000e7a8 <ai_layers_forward_all+0x60>
1000e75e:	6c02      	ldr	r2, [r0, #64]	; 0x40
1000e760:	2001      	movs	r0, #1
1000e762:	47c0      	blx	r8
1000e764:	6ba6      	ldr	r6, [r4, #56]	; 0x38
1000e766:	b1fe      	cbz	r6, 1000e7a8 <ai_layers_forward_all+0x60>
1000e768:	2700      	movs	r7, #0
1000e76a:	4631      	mov	r1, r6
1000e76c:	6c22      	ldr	r2, [r4, #64]	; 0x40
1000e76e:	2002      	movs	r0, #2
1000e770:	47c0      	blx	r8
1000e772:	6ba5      	ldr	r5, [r4, #56]	; 0x38
1000e774:	4628      	mov	r0, r5
1000e776:	696b      	ldr	r3, [r5, #20]
1000e778:	4798      	blx	r3
1000e77a:	692e      	ldr	r6, [r5, #16]
1000e77c:	6c22      	ldr	r2, [r4, #64]	; 0x40
1000e77e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1000e780:	42b5      	cmp	r5, r6
1000e782:	f04f 0003 	mov.w	r0, #3
1000e786:	d007      	beq.n	1000e798 <ai_layers_forward_all+0x50>
1000e788:	47c0      	blx	r8
1000e78a:	3701      	adds	r7, #1
1000e78c:	63a6      	str	r6, [r4, #56]	; 0x38
1000e78e:	2e00      	cmp	r6, #0
1000e790:	d1eb      	bne.n	1000e76a <ai_layers_forward_all+0x22>
1000e792:	4638      	mov	r0, r7
1000e794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000e798:	2003      	movs	r0, #3
1000e79a:	47c0      	blx	r8
1000e79c:	2300      	movs	r3, #0
1000e79e:	3701      	adds	r7, #1
1000e7a0:	63a3      	str	r3, [r4, #56]	; 0x38
1000e7a2:	4638      	mov	r0, r7
1000e7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000e7a8:	2700      	movs	r7, #0
1000e7aa:	4638      	mov	r0, r7
1000e7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000e7b0:	6b45      	ldr	r5, [r0, #52]	; 0x34
1000e7b2:	6385      	str	r5, [r0, #56]	; 0x38
1000e7b4:	2d00      	cmp	r5, #0
1000e7b6:	d0f7      	beq.n	1000e7a8 <ai_layers_forward_all+0x60>
1000e7b8:	4647      	mov	r7, r8
1000e7ba:	696b      	ldr	r3, [r5, #20]
1000e7bc:	4628      	mov	r0, r5
1000e7be:	4798      	blx	r3
1000e7c0:	462b      	mov	r3, r5
1000e7c2:	692d      	ldr	r5, [r5, #16]
1000e7c4:	429d      	cmp	r5, r3
1000e7c6:	d004      	beq.n	1000e7d2 <ai_layers_forward_all+0x8a>
1000e7c8:	63a5      	str	r5, [r4, #56]	; 0x38
1000e7ca:	3701      	adds	r7, #1
1000e7cc:	2d00      	cmp	r5, #0
1000e7ce:	d1f4      	bne.n	1000e7ba <ai_layers_forward_all+0x72>
1000e7d0:	e7df      	b.n	1000e792 <ai_layers_forward_all+0x4a>
1000e7d2:	2300      	movs	r3, #0
1000e7d4:	63a3      	str	r3, [r4, #56]	; 0x38
1000e7d6:	3701      	adds	r7, #1
1000e7d8:	e7db      	b.n	1000e792 <ai_layers_forward_all+0x4a>
1000e7da:	bf00      	nop

1000e7dc <ai_dict_decompress_f32>:
1000e7dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1000e7e0:	9d08      	ldr	r5, [sp, #32]
1000e7e2:	2b04      	cmp	r3, #4
1000e7e4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
1000e7e8:	d00e      	beq.n	1000e808 <ai_dict_decompress_f32+0x2c>
1000e7ea:	2b08      	cmp	r3, #8
1000e7ec:	d10a      	bne.n	1000e804 <ai_dict_decompress_f32+0x28>
1000e7ee:	42a8      	cmp	r0, r5
1000e7f0:	d208      	bcs.n	1000e804 <ai_dict_decompress_f32+0x28>
1000e7f2:	f811 3b01 	ldrb.w	r3, [r1], #1
1000e7f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
1000e7fa:	681b      	ldr	r3, [r3, #0]
1000e7fc:	f840 3b04 	str.w	r3, [r0], #4
1000e800:	4285      	cmp	r5, r0
1000e802:	d8f6      	bhi.n	1000e7f2 <ai_dict_decompress_f32+0x16>
1000e804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1000e808:	9b07      	ldr	r3, [sp, #28]
1000e80a:	085e      	lsrs	r6, r3, #1
1000e80c:	f003 0701 	and.w	r7, r3, #1
1000e810:	ea4f 09c6 	mov.w	r9, r6, lsl #3
1000e814:	f106 38ff 	add.w	r8, r6, #4294967295
1000e818:	42a8      	cmp	r0, r5
1000e81a:	d2f3      	bcs.n	1000e804 <ai_dict_decompress_f32+0x28>
1000e81c:	b33e      	cbz	r6, 1000e86e <ai_dict_decompress_f32+0x92>
1000e81e:	f100 0e08 	add.w	lr, r0, #8
1000e822:	f101 3cff 	add.w	ip, r1, #4294967295
1000e826:	eb01 0408 	add.w	r4, r1, r8
1000e82a:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
1000e82e:	091b      	lsrs	r3, r3, #4
1000e830:	eb02 0383 	add.w	r3, r2, r3, lsl #2
1000e834:	f10e 0e08 	add.w	lr, lr, #8
1000e838:	681b      	ldr	r3, [r3, #0]
1000e83a:	f84e 3c10 	str.w	r3, [lr, #-16]
1000e83e:	f89c 3000 	ldrb.w	r3, [ip]
1000e842:	f003 030f 	and.w	r3, r3, #15
1000e846:	eb02 0383 	add.w	r3, r2, r3, lsl #2
1000e84a:	4564      	cmp	r4, ip
1000e84c:	681b      	ldr	r3, [r3, #0]
1000e84e:	f84e 3c0c 	str.w	r3, [lr, #-12]
1000e852:	d1ea      	bne.n	1000e82a <ai_dict_decompress_f32+0x4e>
1000e854:	4431      	add	r1, r6
1000e856:	4448      	add	r0, r9
1000e858:	2f00      	cmp	r7, #0
1000e85a:	d0dd      	beq.n	1000e818 <ai_dict_decompress_f32+0x3c>
1000e85c:	f811 3b01 	ldrb.w	r3, [r1], #1
1000e860:	091b      	lsrs	r3, r3, #4
1000e862:	eb02 0383 	add.w	r3, r2, r3, lsl #2
1000e866:	681b      	ldr	r3, [r3, #0]
1000e868:	f840 3b04 	str.w	r3, [r0], #4
1000e86c:	e7d4      	b.n	1000e818 <ai_dict_decompress_f32+0x3c>
1000e86e:	2f00      	cmp	r7, #0
1000e870:	d1f4      	bne.n	1000e85c <ai_dict_decompress_f32+0x80>
1000e872:	42a8      	cmp	r0, r5
1000e874:	d3fd      	bcc.n	1000e872 <ai_dict_decompress_f32+0x96>
1000e876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1000e87a:	bf00      	nop

1000e87c <forward_conv2d_if32of32wf32>:
1000e87c:	6982      	ldr	r2, [r0, #24]
1000e87e:	8813      	ldrh	r3, [r2, #0]
1000e880:	2b00      	cmp	r3, #0
1000e882:	f000 8092 	beq.w	1000e9aa <forward_conv2d_if32of32wf32+0x12e>
1000e886:	f8d2 c004 	ldr.w	ip, [r2, #4]
1000e88a:	f8dc 2004 	ldr.w	r2, [ip, #4]
1000e88e:	b102      	cbz	r2, 1000e892 <forward_conv2d_if32of32wf32+0x16>
1000e890:	6812      	ldr	r2, [r2, #0]
1000e892:	2b01      	cmp	r3, #1
1000e894:	f000 80b2 	beq.w	1000e9fc <forward_conv2d_if32of32wf32+0x180>
1000e898:	f8dc 1010 	ldr.w	r1, [ip, #16]
1000e89c:	b101      	cbz	r1, 1000e8a0 <forward_conv2d_if32of32wf32+0x24>
1000e89e:	6809      	ldr	r1, [r1, #0]
1000e8a0:	2b02      	cmp	r3, #2
1000e8a2:	f000 8084 	beq.w	1000e9ae <forward_conv2d_if32of32wf32+0x132>
1000e8a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000e8aa:	f8dc 601c 	ldr.w	r6, [ip, #28]
1000e8ae:	b0a1      	sub	sp, #132	; 0x84
1000e8b0:	2e00      	cmp	r6, #0
1000e8b2:	f000 809c 	beq.w	1000e9ee <forward_conv2d_if32of32wf32+0x172>
1000e8b6:	f8bc 5018 	ldrh.w	r5, [ip, #24]
1000e8ba:	6834      	ldr	r4, [r6, #0]
1000e8bc:	2d01      	cmp	r5, #1
1000e8be:	f240 8098 	bls.w	1000e9f2 <forward_conv2d_if32of32wf32+0x176>
1000e8c2:	6876      	ldr	r6, [r6, #4]
1000e8c4:	f8d2 800c 	ldr.w	r8, [r2, #12]
1000e8c8:	f8d1 900c 	ldr.w	r9, [r1, #12]
1000e8cc:	f8d8 7004 	ldr.w	r7, [r8, #4]
1000e8d0:	9713      	str	r7, [sp, #76]	; 0x4c
1000e8d2:	f8d9 7004 	ldr.w	r7, [r9, #4]
1000e8d6:	9714      	str	r7, [sp, #80]	; 0x50
1000e8d8:	f8d9 700c 	ldr.w	r7, [r9, #12]
1000e8dc:	9715      	str	r7, [sp, #84]	; 0x54
1000e8de:	f8d9 7008 	ldr.w	r7, [r9, #8]
1000e8e2:	9716      	str	r7, [sp, #88]	; 0x58
1000e8e4:	f8d8 700c 	ldr.w	r7, [r8, #12]
1000e8e8:	6992      	ldr	r2, [r2, #24]
1000e8ea:	9717      	str	r7, [sp, #92]	; 0x5c
1000e8ec:	f8d8 7008 	ldr.w	r7, [r8, #8]
1000e8f0:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
1000e8f4:	9718      	str	r7, [sp, #96]	; 0x60
1000e8f6:	8d07      	ldrh	r7, [r0, #40]	; 0x28
1000e8f8:	f8d2 b008 	ldr.w	fp, [r2, #8]
1000e8fc:	f8d4 a00c 	ldr.w	sl, [r4, #12]
1000e900:	69a2      	ldr	r2, [r4, #24]
1000e902:	9719      	str	r7, [sp, #100]	; 0x64
1000e904:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
1000e908:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
1000e90a:	69c0      	ldr	r0, [r0, #28]
1000e90c:	901f      	str	r0, [sp, #124]	; 0x7c
1000e90e:	f8be 0000 	ldrh.w	r0, [lr]
1000e912:	901b      	str	r0, [sp, #108]	; 0x6c
1000e914:	f8be 0004 	ldrh.w	r0, [lr, #4]
1000e918:	901c      	str	r0, [sp, #112]	; 0x70
1000e91a:	b2a8      	uxth	r0, r5
1000e91c:	971a      	str	r7, [sp, #104]	; 0x68
1000e91e:	e9da 7801 	ldrd	r7, r8, [sl, #4]
1000e922:	901d      	str	r0, [sp, #116]	; 0x74
1000e924:	b2a0      	uxth	r0, r4
1000e926:	f8d2 9008 	ldr.w	r9, [r2, #8]
1000e92a:	901e      	str	r0, [sp, #120]	; 0x78
1000e92c:	b10e      	cbz	r6, 1000e932 <forward_conv2d_if32of32wf32+0xb6>
1000e92e:	69b0      	ldr	r0, [r6, #24]
1000e930:	6886      	ldr	r6, [r0, #8]
1000e932:	6989      	ldr	r1, [r1, #24]
1000e934:	b2a4      	uxth	r4, r4
1000e936:	f108 30ff 	add.w	r0, r8, #4294967295
1000e93a:	f8d1 a008 	ldr.w	sl, [r1, #8]
1000e93e:	6811      	ldr	r1, [r2, #0]
1000e940:	b2ad      	uxth	r5, r5
1000e942:	3c01      	subs	r4, #1
1000e944:	3d01      	subs	r5, #1
1000e946:	fb00 8404 	mla	r4, r0, r4, r8
1000e94a:	1e78      	subs	r0, r7, #1
1000e94c:	fb00 7505 	mla	r5, r0, r5, r7
1000e950:	f3c1 4043 	ubfx	r0, r1, #17, #4
1000e954:	2804      	cmp	r0, #4
1000e956:	d02d      	beq.n	1000e9b4 <forward_conv2d_if32of32wf32+0x138>
1000e958:	2808      	cmp	r0, #8
1000e95a:	d02b      	beq.n	1000e9b4 <forward_conv2d_if32of32wf32+0x138>
1000e95c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
1000e95e:	940c      	str	r4, [sp, #48]	; 0x30
1000e960:	e9cd 530d 	strd	r5, r3, [sp, #52]	; 0x34
1000e964:	9b1a      	ldr	r3, [sp, #104]	; 0x68
1000e966:	930b      	str	r3, [sp, #44]	; 0x2c
1000e968:	9b19      	ldr	r3, [sp, #100]	; 0x64
1000e96a:	930a      	str	r3, [sp, #40]	; 0x28
1000e96c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1000e96e:	9309      	str	r3, [sp, #36]	; 0x24
1000e970:	9b1c      	ldr	r3, [sp, #112]	; 0x70
1000e972:	9c1e      	ldr	r4, [sp, #120]	; 0x78
1000e974:	9706      	str	r7, [sp, #24]
1000e976:	e9cd 8307 	strd	r8, r3, [sp, #28]
1000e97a:	9b15      	ldr	r3, [sp, #84]	; 0x54
1000e97c:	9305      	str	r3, [sp, #20]
1000e97e:	9b16      	ldr	r3, [sp, #88]	; 0x58
1000e980:	9304      	str	r3, [sp, #16]
1000e982:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1000e984:	9303      	str	r3, [sp, #12]
1000e986:	9b18      	ldr	r3, [sp, #96]	; 0x60
1000e988:	9302      	str	r3, [sp, #8]
1000e98a:	9b14      	ldr	r3, [sp, #80]	; 0x50
1000e98c:	9301      	str	r3, [sp, #4]
1000e98e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1000e990:	9300      	str	r3, [sp, #0]
1000e992:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1000e994:	9310      	str	r3, [sp, #64]	; 0x40
1000e996:	464a      	mov	r2, r9
1000e998:	4633      	mov	r3, r6
1000e99a:	4651      	mov	r1, sl
1000e99c:	4658      	mov	r0, fp
1000e99e:	940f      	str	r4, [sp, #60]	; 0x3c
1000e9a0:	f000 fe38 	bl	1000f614 <forward_lite_conv2d_if32of32wf32>
1000e9a4:	b021      	add	sp, #132	; 0x84
1000e9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000e9aa:	685b      	ldr	r3, [r3, #4]
1000e9ac:	deff      	udf	#255	; 0xff
1000e9ae:	2300      	movs	r3, #0
1000e9b0:	685b      	ldr	r3, [r3, #4]
1000e9b2:	deff      	udf	#255	; 0xff
1000e9b4:	68d2      	ldr	r2, [r2, #12]
1000e9b6:	2a00      	cmp	r2, #0
1000e9b8:	d0d0      	beq.n	1000e95c <forward_conv2d_if32of32wf32+0xe0>
1000e9ba:	2b03      	cmp	r3, #3
1000e9bc:	d021      	beq.n	1000ea02 <forward_conv2d_if32of32wf32+0x186>
1000e9be:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
1000e9c2:	b1c3      	cbz	r3, 1000e9f6 <forward_conv2d_if32of32wf32+0x17a>
1000e9c4:	681b      	ldr	r3, [r3, #0]
1000e9c6:	b1b3      	cbz	r3, 1000e9f6 <forward_conv2d_if32of32wf32+0x17a>
1000e9c8:	699b      	ldr	r3, [r3, #24]
1000e9ca:	e9d3 3001 	ldrd	r3, r0, [r3, #4]
1000e9ce:	9301      	str	r3, [sp, #4]
1000e9d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1000e9d2:	9300      	str	r3, [sp, #0]
1000e9d4:	f3c1 13c6 	ubfx	r3, r1, #7, #7
1000e9d8:	f3c1 5141 	ubfx	r1, r1, #21, #2
1000e9dc:	410b      	asrs	r3, r1
1000e9de:	b29b      	uxth	r3, r3
1000e9e0:	4649      	mov	r1, r9
1000e9e2:	2800      	cmp	r0, #0
1000e9e4:	bf18      	it	ne
1000e9e6:	4681      	movne	r9, r0
1000e9e8:	f7ff fef8 	bl	1000e7dc <ai_dict_decompress_f32>
1000e9ec:	e7b6      	b.n	1000e95c <forward_conv2d_if32of32wf32+0xe0>
1000e9ee:	4634      	mov	r4, r6
1000e9f0:	e768      	b.n	1000e8c4 <forward_conv2d_if32of32wf32+0x48>
1000e9f2:	2600      	movs	r6, #0
1000e9f4:	e766      	b.n	1000e8c4 <forward_conv2d_if32of32wf32+0x48>
1000e9f6:	2300      	movs	r3, #0
1000e9f8:	699b      	ldr	r3, [r3, #24]
1000e9fa:	deff      	udf	#255	; 0xff
1000e9fc:	2300      	movs	r3, #0
1000e9fe:	685b      	ldr	r3, [r3, #4]
1000ea00:	deff      	udf	#255	; 0xff
1000ea02:	2300      	movs	r3, #0
1000ea04:	685b      	ldr	r3, [r3, #4]
1000ea06:	deff      	udf	#255	; 0xff

1000ea08 <forward_dense>:
1000ea08:	6983      	ldr	r3, [r0, #24]
1000ea0a:	881a      	ldrh	r2, [r3, #0]
1000ea0c:	2a00      	cmp	r2, #0
1000ea0e:	f000 8181 	beq.w	1000ed14 <forward_dense+0x30c>
1000ea12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000ea16:	ed2d 8b02 	vpush	{d8}
1000ea1a:	f8d3 c004 	ldr.w	ip, [r3, #4]
1000ea1e:	f8dc 5004 	ldr.w	r5, [ip, #4]
1000ea22:	b095      	sub	sp, #84	; 0x54
1000ea24:	b105      	cbz	r5, 1000ea28 <forward_dense+0x20>
1000ea26:	682d      	ldr	r5, [r5, #0]
1000ea28:	2a01      	cmp	r2, #1
1000ea2a:	f000 828f 	beq.w	1000ef4c <forward_dense+0x544>
1000ea2e:	f8dc 6010 	ldr.w	r6, [ip, #16]
1000ea32:	b106      	cbz	r6, 1000ea36 <forward_dense+0x2e>
1000ea34:	6836      	ldr	r6, [r6, #0]
1000ea36:	2a02      	cmp	r2, #2
1000ea38:	f000 816e 	beq.w	1000ed18 <forward_dense+0x310>
1000ea3c:	f8dc 301c 	ldr.w	r3, [ip, #28]
1000ea40:	930b      	str	r3, [sp, #44]	; 0x2c
1000ea42:	2b00      	cmp	r3, #0
1000ea44:	f000 8274 	beq.w	1000ef30 <forward_dense+0x528>
1000ea48:	4619      	mov	r1, r3
1000ea4a:	f8bc 3018 	ldrh.w	r3, [ip, #24]
1000ea4e:	6809      	ldr	r1, [r1, #0]
1000ea50:	910d      	str	r1, [sp, #52]	; 0x34
1000ea52:	2b01      	cmp	r3, #1
1000ea54:	f240 826e 	bls.w	1000ef34 <forward_dense+0x52c>
1000ea58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000ea5a:	685b      	ldr	r3, [r3, #4]
1000ea5c:	930b      	str	r3, [sp, #44]	; 0x2c
1000ea5e:	460b      	mov	r3, r1
1000ea60:	68e8      	ldr	r0, [r5, #12]
1000ea62:	68f7      	ldr	r7, [r6, #12]
1000ea64:	6840      	ldr	r0, [r0, #4]
1000ea66:	6999      	ldr	r1, [r3, #24]
1000ea68:	9013      	str	r0, [sp, #76]	; 0x4c
1000ea6a:	6878      	ldr	r0, [r7, #4]
1000ea6c:	680b      	ldr	r3, [r1, #0]
1000ea6e:	9012      	str	r0, [sp, #72]	; 0x48
1000ea70:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
1000ea74:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
1000ea78:	fb00 f404 	mul.w	r4, r0, r4
1000ea7c:	f3c3 5041 	ubfx	r0, r3, #21, #2
1000ea80:	fa4e f000 	asr.w	r0, lr, r0
1000ea84:	2a03      	cmp	r2, #3
1000ea86:	9010      	str	r0, [sp, #64]	; 0x40
1000ea88:	f000 825d 	beq.w	1000ef46 <forward_dense+0x53e>
1000ea8c:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
1000ea90:	f3c3 4343 	ubfx	r3, r3, #17, #4
1000ea94:	2a00      	cmp	r2, #0
1000ea96:	f000 8246 	beq.w	1000ef26 <forward_dense+0x51e>
1000ea9a:	6812      	ldr	r2, [r2, #0]
1000ea9c:	2a00      	cmp	r2, #0
1000ea9e:	f000 8242 	beq.w	1000ef26 <forward_dense+0x51e>
1000eaa2:	2b04      	cmp	r3, #4
1000eaa4:	f8d2 9018 	ldr.w	r9, [r2, #24]
1000eaa8:	f000 822c 	beq.w	1000ef04 <forward_dense+0x4fc>
1000eaac:	2b08      	cmp	r3, #8
1000eaae:	f000 8229 	beq.w	1000ef04 <forward_dense+0x4fc>
1000eab2:	f04f 0b00 	mov.w	fp, #0
1000eab6:	69b2      	ldr	r2, [r6, #24]
1000eab8:	69ab      	ldr	r3, [r5, #24]
1000eaba:	6891      	ldr	r1, [r2, #8]
1000eabc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000eabe:	689b      	ldr	r3, [r3, #8]
1000eac0:	6952      	ldr	r2, [r2, #20]
1000eac2:	9106      	str	r1, [sp, #24]
1000eac4:	fb07 f404 	mul.w	r4, r7, r4
1000eac8:	f8d2 9004 	ldr.w	r9, [r2, #4]
1000eacc:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000eace:	eb01 0084 	add.w	r0, r1, r4, lsl #2
1000ead2:	4281      	cmp	r1, r0
1000ead4:	ea4f 0482 	mov.w	r4, r2, lsl #2
1000ead8:	900e      	str	r0, [sp, #56]	; 0x38
1000eada:	940c      	str	r4, [sp, #48]	; 0x30
1000eadc:	eb01 0882 	add.w	r8, r1, r2, lsl #2
1000eae0:	f080 8113 	bcs.w	1000ed0a <forward_dense+0x302>
1000eae4:	9913      	ldr	r1, [sp, #76]	; 0x4c
1000eae6:	ed9f 8a93 	vldr	s16, [pc, #588]	; 1000ed34 <forward_dense+0x32c>
1000eaea:	f021 0201 	bic.w	r2, r1, #1
1000eaee:	eb03 0282 	add.w	r2, r3, r2, lsl #2
1000eaf2:	9204      	str	r2, [sp, #16]
1000eaf4:	f001 0201 	and.w	r2, r1, #1
1000eaf8:	08c8      	lsrs	r0, r1, #3
1000eafa:	9208      	str	r2, [sp, #32]
1000eafc:	008a      	lsls	r2, r1, #2
1000eafe:	f001 0a07 	and.w	sl, r1, #7
1000eb02:	920f      	str	r2, [sp, #60]	; 0x3c
1000eb04:	eb03 1240 	add.w	r2, r3, r0, lsl #5
1000eb08:	3320      	adds	r3, #32
1000eb0a:	465c      	mov	r4, fp
1000eb0c:	9007      	str	r0, [sp, #28]
1000eb0e:	46cb      	mov	fp, r9
1000eb10:	9205      	str	r2, [sp, #20]
1000eb12:	9302      	str	r3, [sp, #8]
1000eb14:	46c1      	mov	r9, r8
1000eb16:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
1000eb1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000eb1c:	699b      	ldr	r3, [r3, #24]
1000eb1e:	689a      	ldr	r2, [r3, #8]
1000eb20:	9b02      	ldr	r3, [sp, #8]
1000eb22:	3b20      	subs	r3, #32
1000eb24:	930a      	str	r3, [sp, #40]	; 0x28
1000eb26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000eb28:	b10b      	cbz	r3, 1000eb2e <forward_dense+0x126>
1000eb2a:	699b      	ldr	r3, [r3, #24]
1000eb2c:	689b      	ldr	r3, [r3, #8]
1000eb2e:	2c00      	cmp	r4, #0
1000eb30:	f000 81da 	beq.w	1000eee8 <forward_dense+0x4e0>
1000eb34:	9910      	ldr	r1, [sp, #64]	; 0x40
1000eb36:	2904      	cmp	r1, #4
1000eb38:	9906      	ldr	r1, [sp, #24]
1000eb3a:	f000 80fd 	beq.w	1000ed38 <forward_dense+0x330>
1000eb3e:	4549      	cmp	r1, r9
1000eb40:	f080 80d2 	bcs.w	1000ece8 <forward_dense+0x2e0>
1000eb44:	460f      	mov	r7, r1
1000eb46:	9907      	ldr	r1, [sp, #28]
1000eb48:	f8dd 8008 	ldr.w	r8, [sp, #8]
1000eb4c:	f8dd a014 	ldr.w	sl, [sp, #20]
1000eb50:	1c4e      	adds	r6, r1, #1
1000eb52:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
1000eb56:	4694      	mov	ip, r2
1000eb58:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000eb5a:	468e      	mov	lr, r1
1000eb5c:	2b00      	cmp	r3, #0
1000eb5e:	f000 80de 	beq.w	1000ed1e <forward_dense+0x316>
1000eb62:	ecf3 2a01 	vldmia	r3!, {s5}
1000eb66:	ed9f 7a73 	vldr	s14, [pc, #460]	; 1000ed34 <forward_dense+0x32c>
1000eb6a:	f1be 0f00 	cmp.w	lr, #0
1000eb6e:	f000 80de 	beq.w	1000ed2e <forward_dense+0x326>
1000eb72:	f10c 0108 	add.w	r1, ip, #8
1000eb76:	4640      	mov	r0, r8
1000eb78:	f811 5c07 	ldrb.w	r5, [r1, #-7]
1000eb7c:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
1000eb80:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
1000eb84:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
1000eb88:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
1000eb8c:	ed10 5a04 	vldr	s10, [r0, #-16]
1000eb90:	ed50 5a03 	vldr	s11, [r0, #-12]
1000eb94:	ed10 6a02 	vldr	s12, [r0, #-8]
1000eb98:	ed50 6a01 	vldr	s13, [r0, #-4]
1000eb9c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000eba0:	edd5 7a00 	vldr	s15, [r5]
1000eba4:	f811 5c08 	ldrb.w	r5, [r1, #-8]
1000eba8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000ebac:	ee67 7a83 	vmul.f32	s15, s15, s6
1000ebb0:	ed95 3a00 	vldr	s6, [r5]
1000ebb4:	f811 5c06 	ldrb.w	r5, [r1, #-6]
1000ebb8:	eee3 7a23 	vfma.f32	s15, s6, s7
1000ebbc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000ebc0:	3108      	adds	r1, #8
1000ebc2:	edd5 3a00 	vldr	s7, [r5]
1000ebc6:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
1000ebca:	eee3 7a84 	vfma.f32	s15, s7, s8
1000ebce:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000ebd2:	3020      	adds	r0, #32
1000ebd4:	ed95 4a00 	vldr	s8, [r5]
1000ebd8:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
1000ebdc:	eee4 7a24 	vfma.f32	s15, s8, s9
1000ebe0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000ebe4:	edd5 4a00 	vldr	s9, [r5]
1000ebe8:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
1000ebec:	eee4 7a85 	vfma.f32	s15, s9, s10
1000ebf0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000ebf4:	ed95 5a00 	vldr	s10, [r5]
1000ebf8:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
1000ebfc:	eee5 7a25 	vfma.f32	s15, s10, s11
1000ec00:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000ec04:	edd5 5a00 	vldr	s11, [r5]
1000ec08:	f811 5c09 	ldrb.w	r5, [r1, #-9]
1000ec0c:	eee5 7a86 	vfma.f32	s15, s11, s12
1000ec10:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000ec14:	428e      	cmp	r6, r1
1000ec16:	ed95 6a00 	vldr	s12, [r5]
1000ec1a:	eee6 7a26 	vfma.f32	s15, s12, s13
1000ec1e:	ee37 7a27 	vadd.f32	s14, s14, s15
1000ec22:	d1a9      	bne.n	1000eb78 <forward_dense+0x170>
1000ec24:	f1a6 0108 	sub.w	r1, r6, #8
1000ec28:	4650      	mov	r0, sl
1000ec2a:	2a00      	cmp	r2, #0
1000ec2c:	d04a      	beq.n	1000ecc4 <forward_dense+0x2bc>
1000ec2e:	780d      	ldrb	r5, [r1, #0]
1000ec30:	edd0 6a00 	vldr	s13, [r0]
1000ec34:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000ec38:	edd5 7a00 	vldr	s15, [r5]
1000ec3c:	2a01      	cmp	r2, #1
1000ec3e:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000ec42:	d03f      	beq.n	1000ecc4 <forward_dense+0x2bc>
1000ec44:	784d      	ldrb	r5, [r1, #1]
1000ec46:	edd0 6a01 	vldr	s13, [r0, #4]
1000ec4a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000ec4e:	edd5 7a00 	vldr	s15, [r5]
1000ec52:	2a02      	cmp	r2, #2
1000ec54:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000ec58:	d034      	beq.n	1000ecc4 <forward_dense+0x2bc>
1000ec5a:	788d      	ldrb	r5, [r1, #2]
1000ec5c:	edd0 6a02 	vldr	s13, [r0, #8]
1000ec60:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000ec64:	edd5 7a00 	vldr	s15, [r5]
1000ec68:	2a03      	cmp	r2, #3
1000ec6a:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000ec6e:	d029      	beq.n	1000ecc4 <forward_dense+0x2bc>
1000ec70:	78cd      	ldrb	r5, [r1, #3]
1000ec72:	edd0 6a03 	vldr	s13, [r0, #12]
1000ec76:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000ec7a:	edd5 7a00 	vldr	s15, [r5]
1000ec7e:	2a04      	cmp	r2, #4
1000ec80:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000ec84:	d01e      	beq.n	1000ecc4 <forward_dense+0x2bc>
1000ec86:	790d      	ldrb	r5, [r1, #4]
1000ec88:	edd0 6a04 	vldr	s13, [r0, #16]
1000ec8c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000ec90:	edd5 7a00 	vldr	s15, [r5]
1000ec94:	2a05      	cmp	r2, #5
1000ec96:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000ec9a:	d013      	beq.n	1000ecc4 <forward_dense+0x2bc>
1000ec9c:	794d      	ldrb	r5, [r1, #5]
1000ec9e:	edd0 6a05 	vldr	s13, [r0, #20]
1000eca2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000eca6:	edd5 7a00 	vldr	s15, [r5]
1000ecaa:	2a06      	cmp	r2, #6
1000ecac:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000ecb0:	d008      	beq.n	1000ecc4 <forward_dense+0x2bc>
1000ecb2:	7989      	ldrb	r1, [r1, #6]
1000ecb4:	edd0 7a06 	vldr	s15, [r0, #24]
1000ecb8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
1000ecbc:	edd1 6a00 	vldr	s13, [r1]
1000ecc0:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000ecc4:	44dc      	add	ip, fp
1000ecc6:	445e      	add	r6, fp
1000ecc8:	ee32 7a87 	vadd.f32	s14, s5, s14
1000eccc:	eca7 7a01 	vstmia	r7!, {s14}
1000ecd0:	454f      	cmp	r7, r9
1000ecd2:	f4ff af43 	bcc.w	1000eb5c <forward_dense+0x154>
1000ecd6:	9a06      	ldr	r2, [sp, #24]
1000ecd8:	eba9 0302 	sub.w	r3, r9, r2
1000ecdc:	3b01      	subs	r3, #1
1000ecde:	f023 0303 	bic.w	r3, r3, #3
1000ece2:	3304      	adds	r3, #4
1000ece4:	18d3      	adds	r3, r2, r3
1000ece6:	9306      	str	r3, [sp, #24]
1000ece8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000ecea:	9a05      	ldr	r2, [sp, #20]
1000ecec:	4499      	add	r9, r3
1000ecee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000ecf0:	441a      	add	r2, r3
1000ecf2:	9205      	str	r2, [sp, #20]
1000ecf4:	9a02      	ldr	r2, [sp, #8]
1000ecf6:	441a      	add	r2, r3
1000ecf8:	9202      	str	r2, [sp, #8]
1000ecfa:	9a04      	ldr	r2, [sp, #16]
1000ecfc:	441a      	add	r2, r3
1000ecfe:	9204      	str	r2, [sp, #16]
1000ed00:	9b06      	ldr	r3, [sp, #24]
1000ed02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000ed04:	4293      	cmp	r3, r2
1000ed06:	f4ff af08 	bcc.w	1000eb1a <forward_dense+0x112>
1000ed0a:	b015      	add	sp, #84	; 0x54
1000ed0c:	ecbd 8b02 	vpop	{d8}
1000ed10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000ed14:	6853      	ldr	r3, [r2, #4]
1000ed16:	deff      	udf	#255	; 0xff
1000ed18:	2300      	movs	r3, #0
1000ed1a:	685b      	ldr	r3, [r3, #4]
1000ed1c:	deff      	udf	#255	; 0xff
1000ed1e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 1000ed34 <forward_dense+0x32c>
1000ed22:	eef0 2a48 	vmov.f32	s5, s16
1000ed26:	f1be 0f00 	cmp.w	lr, #0
1000ed2a:	f47f af22 	bne.w	1000eb72 <forward_dense+0x16a>
1000ed2e:	980a      	ldr	r0, [sp, #40]	; 0x28
1000ed30:	4661      	mov	r1, ip
1000ed32:	e77a      	b.n	1000ec2a <forward_dense+0x222>
1000ed34:	00000000 	.word	0x00000000
1000ed38:	4549      	cmp	r1, r9
1000ed3a:	d2d5      	bcs.n	1000ece8 <forward_dense+0x2e0>
1000ed3c:	9807      	ldr	r0, [sp, #28]
1000ed3e:	9103      	str	r1, [sp, #12]
1000ed40:	9904      	ldr	r1, [sp, #16]
1000ed42:	f100 0c01 	add.w	ip, r0, #1
1000ed46:	3901      	subs	r1, #1
1000ed48:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
1000ed4c:	9109      	str	r1, [sp, #36]	; 0x24
1000ed4e:	2b00      	cmp	r3, #0
1000ed50:	f000 80b2 	beq.w	1000eeb8 <forward_dense+0x4b0>
1000ed54:	9907      	ldr	r1, [sp, #28]
1000ed56:	ecf3 2a01 	vldmia	r3!, {s5}
1000ed5a:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 1000ed34 <forward_dense+0x32c>
1000ed5e:	2900      	cmp	r1, #0
1000ed60:	f000 80b2 	beq.w	1000eec8 <forward_dense+0x4c0>
1000ed64:	9902      	ldr	r1, [sp, #8]
1000ed66:	1d10      	adds	r0, r2, #4
1000ed68:	f810 6c04 	ldrb.w	r6, [r0, #-4]
1000ed6c:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
1000ed70:	f810 5c03 	ldrb.w	r5, [r0, #-3]
1000ed74:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
1000ed78:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
1000ed7c:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
1000ed80:	ed11 5a04 	vldr	s10, [r1, #-16]
1000ed84:	ed51 5a03 	vldr	s11, [r1, #-12]
1000ed88:	ed11 6a02 	vldr	s12, [r1, #-8]
1000ed8c:	ed51 6a01 	vldr	s13, [r1, #-4]
1000ed90:	f006 070f 	and.w	r7, r6, #15
1000ed94:	eb04 0787 	add.w	r7, r4, r7, lsl #2
1000ed98:	edd7 7a00 	vldr	s15, [r7]
1000ed9c:	0936      	lsrs	r6, r6, #4
1000ed9e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
1000eda2:	ed96 3a00 	vldr	s6, [r6]
1000eda6:	ee67 7a82 	vmul.f32	s15, s15, s4
1000edaa:	092e      	lsrs	r6, r5, #4
1000edac:	eee3 7a23 	vfma.f32	s15, s6, s7
1000edb0:	eb04 0686 	add.w	r6, r4, r6, lsl #2
1000edb4:	f005 050f 	and.w	r5, r5, #15
1000edb8:	edd6 3a00 	vldr	s7, [r6]
1000edbc:	f810 6c02 	ldrb.w	r6, [r0, #-2]
1000edc0:	eee3 7a84 	vfma.f32	s15, s7, s8
1000edc4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000edc8:	0937      	lsrs	r7, r6, #4
1000edca:	ed95 4a00 	vldr	s8, [r5]
1000edce:	f810 5c01 	ldrb.w	r5, [r0, #-1]
1000edd2:	eee4 7a24 	vfma.f32	s15, s8, s9
1000edd6:	eb04 0787 	add.w	r7, r4, r7, lsl #2
1000edda:	f006 060f 	and.w	r6, r6, #15
1000edde:	edd7 4a00 	vldr	s9, [r7]
1000ede2:	eee4 7a85 	vfma.f32	s15, s9, s10
1000ede6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
1000edea:	3004      	adds	r0, #4
1000edec:	ed96 5a00 	vldr	s10, [r6]
1000edf0:	092e      	lsrs	r6, r5, #4
1000edf2:	eee5 7a25 	vfma.f32	s15, s10, s11
1000edf6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
1000edfa:	f005 050f 	and.w	r5, r5, #15
1000edfe:	edd6 5a00 	vldr	s11, [r6]
1000ee02:	eee5 7a86 	vfma.f32	s15, s11, s12
1000ee06:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000ee0a:	4584      	cmp	ip, r0
1000ee0c:	ed95 6a00 	vldr	s12, [r5]
1000ee10:	eee6 7a26 	vfma.f32	s15, s12, s13
1000ee14:	f101 0120 	add.w	r1, r1, #32
1000ee18:	ee37 7a27 	vadd.f32	s14, s14, s15
1000ee1c:	d1a4      	bne.n	1000ed68 <forward_dense+0x360>
1000ee1e:	f8dd e014 	ldr.w	lr, [sp, #20]
1000ee22:	f1ac 0804 	sub.w	r8, ip, #4
1000ee26:	9904      	ldr	r1, [sp, #16]
1000ee28:	458e      	cmp	lr, r1
1000ee2a:	d22a      	bcs.n	1000ee82 <forward_dense+0x47a>
1000ee2c:	9909      	ldr	r1, [sp, #36]	; 0x24
1000ee2e:	eba1 070e 	sub.w	r7, r1, lr
1000ee32:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
1000ee36:	f10e 0008 	add.w	r0, lr, #8
1000ee3a:	f108 36ff 	add.w	r6, r8, #4294967295
1000ee3e:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
1000ee42:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1000ee46:	ed50 5a01 	vldr	s11, [r0, #-4]
1000ee4a:	ed50 6a02 	vldr	s13, [r0, #-8]
1000ee4e:	f001 050f 	and.w	r5, r1, #15
1000ee52:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000ee56:	edd5 7a00 	vldr	s15, [r5]
1000ee5a:	0909      	lsrs	r1, r1, #4
1000ee5c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
1000ee60:	ed91 6a00 	vldr	s12, [r1]
1000ee64:	ee67 7aa5 	vmul.f32	s15, s15, s11
1000ee68:	42b7      	cmp	r7, r6
1000ee6a:	eee6 7a26 	vfma.f32	s15, s12, s13
1000ee6e:	f100 0008 	add.w	r0, r0, #8
1000ee72:	ee37 7a27 	vadd.f32	s14, s14, s15
1000ee76:	d1e4      	bne.n	1000ee42 <forward_dense+0x43a>
1000ee78:	f10a 0a01 	add.w	sl, sl, #1
1000ee7c:	44d0      	add	r8, sl
1000ee7e:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
1000ee82:	9908      	ldr	r1, [sp, #32]
1000ee84:	b321      	cbz	r1, 1000eed0 <forward_dense+0x4c8>
1000ee86:	f898 1000 	ldrb.w	r1, [r8]
1000ee8a:	edde 7a00 	vldr	s15, [lr]
1000ee8e:	0909      	lsrs	r1, r1, #4
1000ee90:	eb04 0181 	add.w	r1, r4, r1, lsl #2
1000ee94:	edd1 6a00 	vldr	s13, [r1]
1000ee98:	9903      	ldr	r1, [sp, #12]
1000ee9a:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000ee9e:	445a      	add	r2, fp
1000eea0:	44dc      	add	ip, fp
1000eea2:	ee72 2a87 	vadd.f32	s5, s5, s14
1000eea6:	ece1 2a01 	vstmia	r1!, {s5}
1000eeaa:	4589      	cmp	r9, r1
1000eeac:	9103      	str	r1, [sp, #12]
1000eeae:	f67f af12 	bls.w	1000ecd6 <forward_dense+0x2ce>
1000eeb2:	2b00      	cmp	r3, #0
1000eeb4:	f47f af4e 	bne.w	1000ed54 <forward_dense+0x34c>
1000eeb8:	9907      	ldr	r1, [sp, #28]
1000eeba:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 1000ed34 <forward_dense+0x32c>
1000eebe:	eef0 2a48 	vmov.f32	s5, s16
1000eec2:	2900      	cmp	r1, #0
1000eec4:	f47f af4e 	bne.w	1000ed64 <forward_dense+0x35c>
1000eec8:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
1000eecc:	4690      	mov	r8, r2
1000eece:	e7aa      	b.n	1000ee26 <forward_dense+0x41e>
1000eed0:	9903      	ldr	r1, [sp, #12]
1000eed2:	ee32 7a87 	vadd.f32	s14, s5, s14
1000eed6:	445a      	add	r2, fp
1000eed8:	eca1 7a01 	vstmia	r1!, {s14}
1000eedc:	4549      	cmp	r1, r9
1000eede:	9103      	str	r1, [sp, #12]
1000eee0:	44dc      	add	ip, fp
1000eee2:	f4ff af34 	bcc.w	1000ed4e <forward_dense+0x346>
1000eee6:	e6f6      	b.n	1000ecd6 <forward_dense+0x2ce>
1000eee8:	9912      	ldr	r1, [sp, #72]	; 0x48
1000eeea:	9d06      	ldr	r5, [sp, #24]
1000eeec:	9101      	str	r1, [sp, #4]
1000eeee:	9913      	ldr	r1, [sp, #76]	; 0x4c
1000eef0:	9100      	str	r1, [sp, #0]
1000eef2:	4628      	mov	r0, r5
1000eef4:	990a      	ldr	r1, [sp, #40]	; 0x28
1000eef6:	f000 fcef 	bl	1000f8d8 <forward_lite_dense_if32of32wf32>
1000eefa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000eefc:	462b      	mov	r3, r5
1000eefe:	4413      	add	r3, r2
1000ef00:	9306      	str	r3, [sp, #24]
1000ef02:	e6f1      	b.n	1000ece8 <forward_dense+0x2e0>
1000ef04:	f8d1 800c 	ldr.w	r8, [r1, #12]
1000ef08:	f1b9 0f00 	cmp.w	r9, #0
1000ef0c:	d016      	beq.n	1000ef3c <forward_dense+0x534>
1000ef0e:	e9d9 0100 	ldrd	r0, r1, [r9]
1000ef12:	f000 fef7 	bl	1000fd04 <ai_array_get_byte_size>
1000ef16:	f8d9 b00c 	ldr.w	fp, [r9, #12]
1000ef1a:	4602      	mov	r2, r0
1000ef1c:	4659      	mov	r1, fp
1000ef1e:	4640      	mov	r0, r8
1000ef20:	f000 fdfe 	bl	1000fb20 <st_int8_copy>
1000ef24:	e5c7      	b.n	1000eab6 <forward_dense+0xae>
1000ef26:	2b04      	cmp	r3, #4
1000ef28:	d00a      	beq.n	1000ef40 <forward_dense+0x538>
1000ef2a:	f04f 0900 	mov.w	r9, #0
1000ef2e:	e5bd      	b.n	1000eaac <forward_dense+0xa4>
1000ef30:	930d      	str	r3, [sp, #52]	; 0x34
1000ef32:	e595      	b.n	1000ea60 <forward_dense+0x58>
1000ef34:	2300      	movs	r3, #0
1000ef36:	930b      	str	r3, [sp, #44]	; 0x2c
1000ef38:	460b      	mov	r3, r1
1000ef3a:	e591      	b.n	1000ea60 <forward_dense+0x58>
1000ef3c:	46c3      	mov	fp, r8
1000ef3e:	e5ba      	b.n	1000eab6 <forward_dense+0xae>
1000ef40:	f8d1 b00c 	ldr.w	fp, [r1, #12]
1000ef44:	e5b7      	b.n	1000eab6 <forward_dense+0xae>
1000ef46:	2300      	movs	r3, #0
1000ef48:	685b      	ldr	r3, [r3, #4]
1000ef4a:	deff      	udf	#255	; 0xff
1000ef4c:	2300      	movs	r3, #0
1000ef4e:	685b      	ldr	r3, [r3, #4]
1000ef50:	deff      	udf	#255	; 0xff
1000ef52:	bf00      	nop

1000ef54 <forward_sigmoid>:
1000ef54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ef56:	ed2d 8b02 	vpush	{d8}
1000ef5a:	6982      	ldr	r2, [r0, #24]
1000ef5c:	8813      	ldrh	r3, [r2, #0]
1000ef5e:	2b00      	cmp	r3, #0
1000ef60:	d03b      	beq.n	1000efda <forward_sigmoid+0x86>
1000ef62:	6852      	ldr	r2, [r2, #4]
1000ef64:	6854      	ldr	r4, [r2, #4]
1000ef66:	b104      	cbz	r4, 1000ef6a <forward_sigmoid+0x16>
1000ef68:	6824      	ldr	r4, [r4, #0]
1000ef6a:	2b01      	cmp	r3, #1
1000ef6c:	d034      	beq.n	1000efd8 <forward_sigmoid+0x84>
1000ef6e:	6915      	ldr	r5, [r2, #16]
1000ef70:	b105      	cbz	r5, 1000ef74 <forward_sigmoid+0x20>
1000ef72:	682d      	ldr	r5, [r5, #0]
1000ef74:	68a3      	ldr	r3, [r4, #8]
1000ef76:	0a1b      	lsrs	r3, r3, #8
1000ef78:	d031      	beq.n	1000efde <forward_sigmoid+0x8a>
1000ef7a:	68e0      	ldr	r0, [r4, #12]
1000ef7c:	2201      	movs	r2, #1
1000ef7e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
1000ef82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
1000ef86:	4298      	cmp	r0, r3
1000ef88:	fb01 f202 	mul.w	r2, r1, r2
1000ef8c:	d1f9      	bne.n	1000ef82 <forward_sigmoid+0x2e>
1000ef8e:	69a7      	ldr	r7, [r4, #24]
1000ef90:	69a9      	ldr	r1, [r5, #24]
1000ef92:	68bb      	ldr	r3, [r7, #8]
1000ef94:	688e      	ldr	r6, [r1, #8]
1000ef96:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
1000ef9a:	3a01      	subs	r2, #1
1000ef9c:	eb03 0582 	add.w	r5, r3, r2, lsl #2
1000efa0:	42ab      	cmp	r3, r5
1000efa2:	eb06 0682 	add.w	r6, r6, r2, lsl #2
1000efa6:	d814      	bhi.n	1000efd2 <forward_sigmoid+0x7e>
1000efa8:	3504      	adds	r5, #4
1000efaa:	3604      	adds	r6, #4
1000efac:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
1000efb0:	462c      	mov	r4, r5
1000efb2:	ed35 0a01 	vldmdb	r5!, {s0}
1000efb6:	eeb1 0a40 	vneg.f32	s0, s0
1000efba:	f003 fdaf 	bl	10012b1c <expf>
1000efbe:	ee30 0a08 	vadd.f32	s0, s0, s16
1000efc2:	3c08      	subs	r4, #8
1000efc4:	eec8 7a00 	vdiv.f32	s15, s16, s0
1000efc8:	ed66 7a01 	vstmdb	r6!, {s15}
1000efcc:	68bb      	ldr	r3, [r7, #8]
1000efce:	42a3      	cmp	r3, r4
1000efd0:	d9ee      	bls.n	1000efb0 <forward_sigmoid+0x5c>
1000efd2:	ecbd 8b02 	vpop	{d8}
1000efd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000efd8:	2300      	movs	r3, #0
1000efda:	685b      	ldr	r3, [r3, #4]
1000efdc:	deff      	udf	#255	; 0xff
1000efde:	69ab      	ldr	r3, [r5, #24]
1000efe0:	69a7      	ldr	r7, [r4, #24]
1000efe2:	689e      	ldr	r6, [r3, #8]
1000efe4:	68bd      	ldr	r5, [r7, #8]
1000efe6:	e7df      	b.n	1000efa8 <forward_sigmoid+0x54>

1000efe8 <forward_relu>:
1000efe8:	6982      	ldr	r2, [r0, #24]
1000efea:	8813      	ldrh	r3, [r2, #0]
1000efec:	2b00      	cmp	r3, #0
1000efee:	d05b      	beq.n	1000f0a8 <forward_relu+0xc0>
1000eff0:	6851      	ldr	r1, [r2, #4]
1000eff2:	684a      	ldr	r2, [r1, #4]
1000eff4:	b102      	cbz	r2, 1000eff8 <forward_relu+0x10>
1000eff6:	6812      	ldr	r2, [r2, #0]
1000eff8:	2b01      	cmp	r3, #1
1000effa:	f000 8123 	beq.w	1000f244 <forward_relu+0x25c>
1000effe:	b470      	push	{r4, r5, r6}
1000f000:	6909      	ldr	r1, [r1, #16]
1000f002:	b101      	cbz	r1, 1000f006 <forward_relu+0x1e>
1000f004:	6809      	ldr	r1, [r1, #0]
1000f006:	69c6      	ldr	r6, [r0, #28]
1000f008:	2e00      	cmp	r6, #0
1000f00a:	f000 8097 	beq.w	1000f13c <forward_relu+0x154>
1000f00e:	6873      	ldr	r3, [r6, #4]
1000f010:	6988      	ldr	r0, [r1, #24]
1000f012:	6991      	ldr	r1, [r2, #24]
1000f014:	2b01      	cmp	r3, #1
1000f016:	f000 80c1 	beq.w	1000f19c <forward_relu+0x1b4>
1000f01a:	6893      	ldr	r3, [r2, #8]
1000f01c:	6880      	ldr	r0, [r0, #8]
1000f01e:	688c      	ldr	r4, [r1, #8]
1000f020:	0a1b      	lsrs	r3, r3, #8
1000f022:	f000 80f2 	beq.w	1000f20a <forward_relu+0x222>
1000f026:	68d5      	ldr	r5, [r2, #12]
1000f028:	2201      	movs	r2, #1
1000f02a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
1000f02e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
1000f032:	42ab      	cmp	r3, r5
1000f034:	fb01 f202 	mul.w	r2, r1, r2
1000f038:	d1f9      	bne.n	1000f02e <forward_relu+0x46>
1000f03a:	68b3      	ldr	r3, [r6, #8]
1000f03c:	ed93 7a02 	vldr	s14, [r3, #8]
1000f040:	edd3 6a00 	vldr	s13, [r3]
1000f044:	ed93 6a01 	vldr	s12, [r3, #4]
1000f048:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
1000f04c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
1000f050:	3a01      	subs	r2, #1
1000f052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000f056:	eb04 0382 	add.w	r3, r4, r2, lsl #2
1000f05a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
1000f05e:	d425      	bmi.n	1000f0ac <forward_relu+0xc4>
1000f060:	429c      	cmp	r4, r3
1000f062:	d81f      	bhi.n	1000f0a4 <forward_relu+0xbc>
1000f064:	1d1a      	adds	r2, r3, #4
1000f066:	1d01      	adds	r1, r0, #4
1000f068:	e00d      	b.n	1000f086 <forward_relu+0x9e>
1000f06a:	eef4 6ae7 	vcmpe.f32	s13, s15
1000f06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000f072:	db03      	blt.n	1000f07c <forward_relu+0x94>
1000f074:	ee77 7ae6 	vsub.f32	s15, s15, s13
1000f078:	ee67 7a86 	vmul.f32	s15, s15, s12
1000f07c:	3b08      	subs	r3, #8
1000f07e:	429c      	cmp	r4, r3
1000f080:	ed61 7a01 	vstmdb	r1!, {s15}
1000f084:	d80e      	bhi.n	1000f0a4 <forward_relu+0xbc>
1000f086:	4613      	mov	r3, r2
1000f088:	ed72 7a01 	vldmdb	r2!, {s15}
1000f08c:	eef4 7ac7 	vcmpe.f32	s15, s14
1000f090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000f094:	d9e9      	bls.n	1000f06a <forward_relu+0x82>
1000f096:	3b08      	subs	r3, #8
1000f098:	eef0 7a47 	vmov.f32	s15, s14
1000f09c:	429c      	cmp	r4, r3
1000f09e:	ed61 7a01 	vstmdb	r1!, {s15}
1000f0a2:	d9f0      	bls.n	1000f086 <forward_relu+0x9e>
1000f0a4:	bc70      	pop	{r4, r5, r6}
1000f0a6:	4770      	bx	lr
1000f0a8:	685b      	ldr	r3, [r3, #4]
1000f0aa:	deff      	udf	#255	; 0xff
1000f0ac:	eeb5 6a40 	vcmp.f32	s12, #0.0
1000f0b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000f0b4:	d11f      	bne.n	1000f0f6 <forward_relu+0x10e>
1000f0b6:	429c      	cmp	r4, r3
1000f0b8:	d8f4      	bhi.n	1000f0a4 <forward_relu+0xbc>
1000f0ba:	1b1c      	subs	r4, r3, r4
1000f0bc:	f024 0403 	bic.w	r4, r4, #3
1000f0c0:	1d1a      	adds	r2, r3, #4
1000f0c2:	2500      	movs	r5, #0
1000f0c4:	1b1b      	subs	r3, r3, r4
1000f0c6:	1d01      	adds	r1, r0, #4
1000f0c8:	ed72 7a01 	vldmdb	r2!, {s15}
1000f0cc:	eef4 7ae6 	vcmpe.f32	s15, s13
1000f0d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000f0d4:	dc0a      	bgt.n	1000f0ec <forward_relu+0x104>
1000f0d6:	429a      	cmp	r2, r3
1000f0d8:	f841 5d04 	str.w	r5, [r1, #-4]!
1000f0dc:	d0e2      	beq.n	1000f0a4 <forward_relu+0xbc>
1000f0de:	ed72 7a01 	vldmdb	r2!, {s15}
1000f0e2:	eef4 7ae6 	vcmpe.f32	s15, s13
1000f0e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000f0ea:	ddf4      	ble.n	1000f0d6 <forward_relu+0xee>
1000f0ec:	429a      	cmp	r2, r3
1000f0ee:	ed61 7a01 	vstmdb	r1!, {s15}
1000f0f2:	d1e9      	bne.n	1000f0c8 <forward_relu+0xe0>
1000f0f4:	e7d6      	b.n	1000f0a4 <forward_relu+0xbc>
1000f0f6:	429c      	cmp	r4, r3
1000f0f8:	d8d4      	bhi.n	1000f0a4 <forward_relu+0xbc>
1000f0fa:	1b1c      	subs	r4, r3, r4
1000f0fc:	f024 0403 	bic.w	r4, r4, #3
1000f100:	1d1a      	adds	r2, r3, #4
1000f102:	1d01      	adds	r1, r0, #4
1000f104:	1b1b      	subs	r3, r3, r4
1000f106:	ed72 7a01 	vldmdb	r2!, {s15}
1000f10a:	eef4 6ae7 	vcmpe.f32	s13, s15
1000f10e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000f112:	db0e      	blt.n	1000f132 <forward_relu+0x14a>
1000f114:	ee77 7ae6 	vsub.f32	s15, s15, s13
1000f118:	4293      	cmp	r3, r2
1000f11a:	ee67 7a86 	vmul.f32	s15, s15, s12
1000f11e:	ed61 7a01 	vstmdb	r1!, {s15}
1000f122:	d0bf      	beq.n	1000f0a4 <forward_relu+0xbc>
1000f124:	ed72 7a01 	vldmdb	r2!, {s15}
1000f128:	eef4 6ae7 	vcmpe.f32	s13, s15
1000f12c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000f130:	daf0      	bge.n	1000f114 <forward_relu+0x12c>
1000f132:	4293      	cmp	r3, r2
1000f134:	ed61 7a01 	vstmdb	r1!, {s15}
1000f138:	d1e5      	bne.n	1000f106 <forward_relu+0x11e>
1000f13a:	e7b3      	b.n	1000f0a4 <forward_relu+0xbc>
1000f13c:	6893      	ldr	r3, [r2, #8]
1000f13e:	6989      	ldr	r1, [r1, #24]
1000f140:	6990      	ldr	r0, [r2, #24]
1000f142:	6889      	ldr	r1, [r1, #8]
1000f144:	6884      	ldr	r4, [r0, #8]
1000f146:	0a1b      	lsrs	r3, r3, #8
1000f148:	d075      	beq.n	1000f236 <forward_relu+0x24e>
1000f14a:	68d5      	ldr	r5, [r2, #12]
1000f14c:	2201      	movs	r2, #1
1000f14e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
1000f152:	f853 0d04 	ldr.w	r0, [r3, #-4]!
1000f156:	429d      	cmp	r5, r3
1000f158:	fb00 f202 	mul.w	r2, r0, r2
1000f15c:	d1f9      	bne.n	1000f152 <forward_relu+0x16a>
1000f15e:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
1000f162:	3b01      	subs	r3, #1
1000f164:	eb04 0283 	add.w	r2, r4, r3, lsl #2
1000f168:	4294      	cmp	r4, r2
1000f16a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
1000f16e:	d899      	bhi.n	1000f0a4 <forward_relu+0xbc>
1000f170:	ed9f 7a36 	vldr	s14, [pc, #216]	; 1000f24c <forward_relu+0x264>
1000f174:	3204      	adds	r2, #4
1000f176:	3104      	adds	r1, #4
1000f178:	4613      	mov	r3, r2
1000f17a:	ed72 7a01 	vldmdb	r2!, {s15}
1000f17e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
1000f182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000f186:	f1a3 0308 	sub.w	r3, r3, #8
1000f18a:	bfb8      	it	lt
1000f18c:	eef0 7a47 	vmovlt.f32	s15, s14
1000f190:	429c      	cmp	r4, r3
1000f192:	ed61 7a01 	vstmdb	r1!, {s15}
1000f196:	d9ef      	bls.n	1000f178 <forward_relu+0x190>
1000f198:	bc70      	pop	{r4, r5, r6}
1000f19a:	4770      	bx	lr
1000f19c:	688c      	ldr	r4, [r1, #8]
1000f19e:	6891      	ldr	r1, [r2, #8]
1000f1a0:	6880      	ldr	r0, [r0, #8]
1000f1a2:	0a09      	lsrs	r1, r1, #8
1000f1a4:	d049      	beq.n	1000f23a <forward_relu+0x252>
1000f1a6:	68d5      	ldr	r5, [r2, #12]
1000f1a8:	eb05 0281 	add.w	r2, r5, r1, lsl #2
1000f1ac:	f852 1d04 	ldr.w	r1, [r2, #-4]!
1000f1b0:	42aa      	cmp	r2, r5
1000f1b2:	fb01 f303 	mul.w	r3, r1, r3
1000f1b6:	d1f9      	bne.n	1000f1ac <forward_relu+0x1c4>
1000f1b8:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
1000f1bc:	3a01      	subs	r2, #1
1000f1be:	68b1      	ldr	r1, [r6, #8]
1000f1c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
1000f1c4:	429c      	cmp	r4, r3
1000f1c6:	ed91 7a00 	vldr	s14, [r1]
1000f1ca:	eb00 0082 	add.w	r0, r0, r2, lsl #2
1000f1ce:	f63f af69 	bhi.w	1000f0a4 <forward_relu+0xbc>
1000f1d2:	2500      	movs	r5, #0
1000f1d4:	3304      	adds	r3, #4
1000f1d6:	1d02      	adds	r2, r0, #4
1000f1d8:	ed53 7a01 	vldr	s15, [r3, #-4]
1000f1dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
1000f1e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000f1e4:	f1a3 0104 	sub.w	r1, r3, #4
1000f1e8:	f1a3 0308 	sub.w	r3, r3, #8
1000f1ec:	d406      	bmi.n	1000f1fc <forward_relu+0x214>
1000f1ee:	429c      	cmp	r4, r3
1000f1f0:	f842 5d04 	str.w	r5, [r2, #-4]!
1000f1f4:	f63f af56 	bhi.w	1000f0a4 <forward_relu+0xbc>
1000f1f8:	460b      	mov	r3, r1
1000f1fa:	e7ed      	b.n	1000f1d8 <forward_relu+0x1f0>
1000f1fc:	429c      	cmp	r4, r3
1000f1fe:	ed62 7a01 	vstmdb	r2!, {s15}
1000f202:	f63f af4f 	bhi.w	1000f0a4 <forward_relu+0xbc>
1000f206:	460b      	mov	r3, r1
1000f208:	e7e6      	b.n	1000f1d8 <forward_relu+0x1f0>
1000f20a:	68b3      	ldr	r3, [r6, #8]
1000f20c:	ed93 7a02 	vldr	s14, [r3, #8]
1000f210:	edd3 6a00 	vldr	s13, [r3]
1000f214:	ed93 6a01 	vldr	s12, [r3, #4]
1000f218:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
1000f21c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000f220:	d401      	bmi.n	1000f226 <forward_relu+0x23e>
1000f222:	4623      	mov	r3, r4
1000f224:	e71e      	b.n	1000f064 <forward_relu+0x7c>
1000f226:	eeb5 6a40 	vcmp.f32	s12, #0.0
1000f22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000f22e:	4623      	mov	r3, r4
1000f230:	f47f af63 	bne.w	1000f0fa <forward_relu+0x112>
1000f234:	e741      	b.n	1000f0ba <forward_relu+0xd2>
1000f236:	4622      	mov	r2, r4
1000f238:	e79a      	b.n	1000f170 <forward_relu+0x188>
1000f23a:	68b2      	ldr	r2, [r6, #8]
1000f23c:	4623      	mov	r3, r4
1000f23e:	ed92 7a00 	vldr	s14, [r2]
1000f242:	e7c6      	b.n	1000f1d2 <forward_relu+0x1ea>
1000f244:	2300      	movs	r3, #0
1000f246:	685b      	ldr	r3, [r3, #4]
1000f248:	deff      	udf	#255	; 0xff
1000f24a:	bf00      	nop
1000f24c:	00000000 	.word	0x00000000

1000f250 <forward_mp>:
1000f250:	6983      	ldr	r3, [r0, #24]
1000f252:	881a      	ldrh	r2, [r3, #0]
1000f254:	2a00      	cmp	r2, #0
1000f256:	f000 80c6 	beq.w	1000f3e6 <forward_mp+0x196>
1000f25a:	6859      	ldr	r1, [r3, #4]
1000f25c:	684b      	ldr	r3, [r1, #4]
1000f25e:	b103      	cbz	r3, 1000f262 <forward_mp+0x12>
1000f260:	681b      	ldr	r3, [r3, #0]
1000f262:	2a01      	cmp	r2, #1
1000f264:	f000 80c1 	beq.w	1000f3ea <forward_mp+0x19a>
1000f268:	690a      	ldr	r2, [r1, #16]
1000f26a:	2a00      	cmp	r2, #0
1000f26c:	f000 80c0 	beq.w	1000f3f0 <forward_mp+0x1a0>
1000f270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000f274:	6811      	ldr	r1, [r2, #0]
1000f276:	68ca      	ldr	r2, [r1, #12]
1000f278:	6989      	ldr	r1, [r1, #24]
1000f27a:	68d4      	ldr	r4, [r2, #12]
1000f27c:	6895      	ldr	r5, [r2, #8]
1000f27e:	688a      	ldr	r2, [r1, #8]
1000f280:	68d9      	ldr	r1, [r3, #12]
1000f282:	699b      	ldr	r3, [r3, #24]
1000f284:	f8d1 9004 	ldr.w	r9, [r1, #4]
1000f288:	689b      	ldr	r3, [r3, #8]
1000f28a:	b093      	sub	sp, #76	; 0x4c
1000f28c:	9200      	str	r2, [sp, #0]
1000f28e:	6b02      	ldr	r2, [r0, #48]	; 0x30
1000f290:	930e      	str	r3, [sp, #56]	; 0x38
1000f292:	e9d2 3600 	ldrd	r3, r6, [r2]
1000f296:	e9d1 7202 	ldrd	r7, r2, [r1, #8]
1000f29a:	69c1      	ldr	r1, [r0, #28]
1000f29c:	9109      	str	r1, [sp, #36]	; 0x24
1000f29e:	6a01      	ldr	r1, [r0, #32]
1000f2a0:	910a      	str	r1, [sp, #40]	; 0x28
1000f2a2:	6a41      	ldr	r1, [r0, #36]	; 0x24
1000f2a4:	910b      	str	r1, [sp, #44]	; 0x2c
1000f2a6:	6a81      	ldr	r1, [r0, #40]	; 0x28
1000f2a8:	9408      	str	r4, [sp, #32]
1000f2aa:	9504      	str	r5, [sp, #16]
1000f2ac:	960d      	str	r6, [sp, #52]	; 0x34
1000f2ae:	9705      	str	r7, [sp, #20]
1000f2b0:	910c      	str	r1, [sp, #48]	; 0x30
1000f2b2:	f1c3 0a00 	rsb	sl, r3, #0
1000f2b6:	2c00      	cmp	r4, #0
1000f2b8:	f000 8092 	beq.w	1000f3e0 <forward_mp+0x190>
1000f2bc:	441a      	add	r2, r3
1000f2be:	9b05      	ldr	r3, [sp, #20]
1000f2c0:	9201      	str	r2, [sp, #4]
1000f2c2:	fb09 f303 	mul.w	r3, r9, r3
1000f2c6:	ea4f 0789 	mov.w	r7, r9, lsl #2
1000f2ca:	ea4f 0883 	mov.w	r8, r3, lsl #2
1000f2ce:	4273      	negs	r3, r6
1000f2d0:	9310      	str	r3, [sp, #64]	; 0x40
1000f2d2:	fb05 f307 	mul.w	r3, r5, r7
1000f2d6:	930f      	str	r3, [sp, #60]	; 0x3c
1000f2d8:	f04f 0b00 	mov.w	fp, #0
1000f2dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000f2de:	9901      	ldr	r1, [sp, #4]
1000f2e0:	428a      	cmp	r2, r1
1000f2e2:	bf94      	ite	ls
1000f2e4:	eb0a 0e02 	addls.w	lr, sl, r2
1000f2e8:	eb0a 0e01 	addhi.w	lr, sl, r1
1000f2ec:	9a04      	ldr	r2, [sp, #16]
1000f2ee:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
1000f2f2:	9307      	str	r3, [sp, #28]
1000f2f4:	2a00      	cmp	r2, #0
1000f2f6:	d068      	beq.n	1000f3ca <forward_mp+0x17a>
1000f2f8:	9a05      	ldr	r2, [sp, #20]
1000f2fa:	9d00      	ldr	r5, [sp, #0]
1000f2fc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
1000f300:	fb02 f303 	mul.w	r3, r2, r3
1000f304:	9303      	str	r3, [sp, #12]
1000f306:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000f308:	18d3      	adds	r3, r2, r3
1000f30a:	9302      	str	r3, [sp, #8]
1000f30c:	2200      	movs	r2, #0
1000f30e:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000f310:	9206      	str	r2, [sp, #24]
1000f312:	2b00      	cmp	r3, #0
1000f314:	bfac      	ite	ge
1000f316:	9a03      	ldrge	r2, [sp, #12]
1000f318:	9e03      	ldrlt	r6, [sp, #12]
1000f31a:	9902      	ldr	r1, [sp, #8]
1000f31c:	bfa8      	it	ge
1000f31e:	18d6      	addge	r6, r2, r3
1000f320:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000f322:	fb06 2607 	mla	r6, r6, r7, r2
1000f326:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000f328:	469b      	mov	fp, r3
1000f32a:	bfb8      	it	lt
1000f32c:	2300      	movlt	r3, #0
1000f32e:	428a      	cmp	r2, r1
1000f330:	bf94      	ite	ls
1000f332:	eb0b 0402 	addls.w	r4, fp, r2
1000f336:	eb0b 0401 	addhi.w	r4, fp, r1
1000f33a:	1ae4      	subs	r4, r4, r3
1000f33c:	f1b9 0f00 	cmp.w	r9, #0
1000f340:	d008      	beq.n	1000f354 <forward_mp+0x104>
1000f342:	4633      	mov	r3, r6
1000f344:	462a      	mov	r2, r5
1000f346:	19b9      	adds	r1, r7, r6
1000f348:	f853 0b04 	ldr.w	r0, [r3], #4
1000f34c:	f842 0b04 	str.w	r0, [r2], #4
1000f350:	4299      	cmp	r1, r3
1000f352:	d1f9      	bne.n	1000f348 <forward_mp+0xf8>
1000f354:	9b07      	ldr	r3, [sp, #28]
1000f356:	459e      	cmp	lr, r3
1000f358:	dd24      	ble.n	1000f3a4 <forward_mp+0x154>
1000f35a:	469c      	mov	ip, r3
1000f35c:	fb07 6404 	mla	r4, r7, r4, r6
1000f360:	42a6      	cmp	r6, r4
1000f362:	d219      	bcs.n	1000f398 <forward_mp+0x148>
1000f364:	f1b9 0f00 	cmp.w	r9, #0
1000f368:	d016      	beq.n	1000f398 <forward_mp+0x148>
1000f36a:	19f1      	adds	r1, r6, r7
1000f36c:	4630      	mov	r0, r6
1000f36e:	4602      	mov	r2, r0
1000f370:	462b      	mov	r3, r5
1000f372:	ecf2 7a01 	vldmia	r2!, {s15}
1000f376:	ed93 7a00 	vldr	s14, [r3]
1000f37a:	eef4 7ac7 	vcmpe.f32	s15, s14
1000f37e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000f382:	bfb8      	it	lt
1000f384:	eef0 7a47 	vmovlt.f32	s15, s14
1000f388:	428a      	cmp	r2, r1
1000f38a:	ece3 7a01 	vstmia	r3!, {s15}
1000f38e:	d1f0      	bne.n	1000f372 <forward_mp+0x122>
1000f390:	4438      	add	r0, r7
1000f392:	42a0      	cmp	r0, r4
1000f394:	4439      	add	r1, r7
1000f396:	d3ea      	bcc.n	1000f36e <forward_mp+0x11e>
1000f398:	f10c 0c01 	add.w	ip, ip, #1
1000f39c:	45e6      	cmp	lr, ip
1000f39e:	4446      	add	r6, r8
1000f3a0:	4444      	add	r4, r8
1000f3a2:	d1dd      	bne.n	1000f360 <forward_mp+0x110>
1000f3a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
1000f3a6:	9802      	ldr	r0, [sp, #8]
1000f3a8:	9a06      	ldr	r2, [sp, #24]
1000f3aa:	eb01 030b 	add.w	r3, r1, fp
1000f3ae:	1a41      	subs	r1, r0, r1
1000f3b0:	9102      	str	r1, [sp, #8]
1000f3b2:	9904      	ldr	r1, [sp, #16]
1000f3b4:	3201      	adds	r2, #1
1000f3b6:	4291      	cmp	r1, r2
1000f3b8:	9206      	str	r2, [sp, #24]
1000f3ba:	443d      	add	r5, r7
1000f3bc:	d1a9      	bne.n	1000f312 <forward_mp+0xc2>
1000f3be:	9b00      	ldr	r3, [sp, #0]
1000f3c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000f3c2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
1000f3c6:	4413      	add	r3, r2
1000f3c8:	9300      	str	r3, [sp, #0]
1000f3ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000f3cc:	9a01      	ldr	r2, [sp, #4]
1000f3ce:	449a      	add	sl, r3
1000f3d0:	1ad3      	subs	r3, r2, r3
1000f3d2:	9301      	str	r3, [sp, #4]
1000f3d4:	9b08      	ldr	r3, [sp, #32]
1000f3d6:	f10b 0b01 	add.w	fp, fp, #1
1000f3da:	455b      	cmp	r3, fp
1000f3dc:	f47f af7e 	bne.w	1000f2dc <forward_mp+0x8c>
1000f3e0:	b013      	add	sp, #76	; 0x4c
1000f3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000f3e6:	6853      	ldr	r3, [r2, #4]
1000f3e8:	deff      	udf	#255	; 0xff
1000f3ea:	2300      	movs	r3, #0
1000f3ec:	685b      	ldr	r3, [r3, #4]
1000f3ee:	deff      	udf	#255	; 0xff
1000f3f0:	68d3      	ldr	r3, [r2, #12]
1000f3f2:	deff      	udf	#255	; 0xff

1000f3f4 <ai_conv2d_kernel_simple_opt_f32.constprop.0>:
1000f3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000f3f8:	b08d      	sub	sp, #52	; 0x34
1000f3fa:	9003      	str	r0, [sp, #12]
1000f3fc:	9207      	str	r2, [sp, #28]
1000f3fe:	9308      	str	r3, [sp, #32]
1000f400:	461a      	mov	r2, r3
1000f402:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
1000f406:	9d18      	ldr	r5, [sp, #96]	; 0x60
1000f408:	9c16      	ldr	r4, [sp, #88]	; 0x58
1000f40a:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
1000f40e:	910b      	str	r1, [sp, #44]	; 0x2c
1000f410:	fb00 f003 	mul.w	r0, r0, r3
1000f414:	9004      	str	r0, [sp, #16]
1000f416:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
1000f41a:	9009      	str	r0, [sp, #36]	; 0x24
1000f41c:	2d00      	cmp	r5, #0
1000f41e:	f000 80ef 	beq.w	1000f600 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x20c>
1000f422:	fb00 f302 	mul.w	r3, r0, r2
1000f426:	009b      	lsls	r3, r3, #2
1000f428:	9306      	str	r3, [sp, #24]
1000f42a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
1000f42c:	fb03 f302 	mul.w	r3, r3, r2
1000f430:	eb01 0383 	add.w	r3, r1, r3, lsl #2
1000f434:	9301      	str	r3, [sp, #4]
1000f436:	9b1c      	ldr	r3, [sp, #112]	; 0x70
1000f438:	425b      	negs	r3, r3
1000f43a:	9300      	str	r3, [sp, #0]
1000f43c:	2300      	movs	r3, #0
1000f43e:	00a4      	lsls	r4, r4, #2
1000f440:	9302      	str	r3, [sp, #8]
1000f442:	0093      	lsls	r3, r2, #2
1000f444:	9405      	str	r4, [sp, #20]
1000f446:	930a      	str	r3, [sp, #40]	; 0x28
1000f448:	9b1c      	ldr	r3, [sp, #112]	; 0x70
1000f44a:	2b00      	cmp	r3, #0
1000f44c:	f2c0 80db 	blt.w	1000f606 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x212>
1000f450:	9e01      	ldr	r6, [sp, #4]
1000f452:	9d04      	ldr	r5, [sp, #16]
1000f454:	2000      	movs	r0, #0
1000f456:	9b07      	ldr	r3, [sp, #28]
1000f458:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000f45a:	9900      	ldr	r1, [sp, #0]
1000f45c:	fb05 3502 	mla	r5, r5, r2, r3
1000f460:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1000f462:	440b      	add	r3, r1
1000f464:	9919      	ldr	r1, [sp, #100]	; 0x64
1000f466:	428b      	cmp	r3, r1
1000f468:	bf94      	ite	ls
1000f46a:	ebc0 0003 	rsbls	r0, r0, r3
1000f46e:	ebc0 0001 	rsbhi	r0, r0, r1
1000f472:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1000f474:	eba3 0a00 	sub.w	sl, r3, r0
1000f478:	9b08      	ldr	r3, [sp, #32]
1000f47a:	f1bb 0f00 	cmp.w	fp, #0
1000f47e:	eba1 0900 	sub.w	r9, r1, r0
1000f482:	eeb0 7a40 	vmov.f32	s14, s0
1000f486:	fb03 f000 	mul.w	r0, r3, r0
1000f48a:	f340 80a1 	ble.w	1000f5d0 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1dc>
1000f48e:	f020 040f 	bic.w	r4, r0, #15
1000f492:	f104 38ff 	add.w	r8, r4, #4294967295
1000f496:	ea4f 1818 	mov.w	r8, r8, lsr #4
1000f49a:	f108 0801 	add.w	r8, r8, #1
1000f49e:	ea4f 1e88 	mov.w	lr, r8, lsl #6
1000f4a2:	fb02 fa0a 	mul.w	sl, r2, sl
1000f4a6:	fb02 f909 	mul.w	r9, r2, r9
1000f4aa:	ea4f 1808 	mov.w	r8, r8, lsl #4
1000f4ae:	f04f 0c00 	mov.w	ip, #0
1000f4b2:	2c00      	cmp	r4, #0
1000f4b4:	bfd8      	it	le
1000f4b6:	2700      	movle	r7, #0
1000f4b8:	dd70      	ble.n	1000f59c <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1a8>
1000f4ba:	f106 0240 	add.w	r2, r6, #64	; 0x40
1000f4be:	f105 0340 	add.w	r3, r5, #64	; 0x40
1000f4c2:	2100      	movs	r1, #0
1000f4c4:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
1000f4c8:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
1000f4cc:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
1000f4d0:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
1000f4d4:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
1000f4d8:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
1000f4dc:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
1000f4e0:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
1000f4e4:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
1000f4e8:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
1000f4ec:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
1000f4f0:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
1000f4f4:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
1000f4f8:	ee67 7aa5 	vmul.f32	s15, s15, s11
1000f4fc:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
1000f500:	eee6 7a26 	vfma.f32	s15, s12, s13
1000f504:	3110      	adds	r1, #16
1000f506:	42a1      	cmp	r1, r4
1000f508:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
1000f50c:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
1000f510:	eee5 7a86 	vfma.f32	s15, s11, s12
1000f514:	f102 0240 	add.w	r2, r2, #64	; 0x40
1000f518:	f103 0340 	add.w	r3, r3, #64	; 0x40
1000f51c:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
1000f520:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
1000f524:	eee4 7aa6 	vfma.f32	s15, s9, s13
1000f528:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
1000f52c:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
1000f530:	eee5 7a25 	vfma.f32	s15, s10, s11
1000f534:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
1000f538:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
1000f53c:	eee6 7a26 	vfma.f32	s15, s12, s13
1000f540:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
1000f544:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
1000f548:	eee3 7a23 	vfma.f32	s15, s6, s7
1000f54c:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
1000f550:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
1000f554:	eee4 7a24 	vfma.f32	s15, s8, s9
1000f558:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
1000f55c:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
1000f560:	eee5 7a25 	vfma.f32	s15, s10, s11
1000f564:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
1000f568:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
1000f56c:	eee6 7a26 	vfma.f32	s15, s12, s13
1000f570:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
1000f574:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
1000f578:	eee1 7a21 	vfma.f32	s15, s2, s3
1000f57c:	eee2 7a22 	vfma.f32	s15, s4, s5
1000f580:	eee3 7a23 	vfma.f32	s15, s6, s7
1000f584:	eee4 7a24 	vfma.f32	s15, s8, s9
1000f588:	eee5 7a25 	vfma.f32	s15, s10, s11
1000f58c:	eee6 7a26 	vfma.f32	s15, s12, s13
1000f590:	ee37 7a27 	vadd.f32	s14, s14, s15
1000f594:	db96      	blt.n	1000f4c4 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xd0>
1000f596:	4476      	add	r6, lr
1000f598:	4475      	add	r5, lr
1000f59a:	4647      	mov	r7, r8
1000f59c:	42b8      	cmp	r0, r7
1000f59e:	dd10      	ble.n	1000f5c2 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1ce>
1000f5a0:	463b      	mov	r3, r7
1000f5a2:	4631      	mov	r1, r6
1000f5a4:	462a      	mov	r2, r5
1000f5a6:	ecf2 6a01 	vldmia	r2!, {s13}
1000f5aa:	ecf1 7a01 	vldmia	r1!, {s15}
1000f5ae:	3301      	adds	r3, #1
1000f5b0:	4298      	cmp	r0, r3
1000f5b2:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000f5b6:	d1f6      	bne.n	1000f5a6 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1b2>
1000f5b8:	1bc7      	subs	r7, r0, r7
1000f5ba:	eb05 0587 	add.w	r5, r5, r7, lsl #2
1000f5be:	eb06 0687 	add.w	r6, r6, r7, lsl #2
1000f5c2:	f10c 0c01 	add.w	ip, ip, #1
1000f5c6:	45dc      	cmp	ip, fp
1000f5c8:	4456      	add	r6, sl
1000f5ca:	444d      	add	r5, r9
1000f5cc:	f47f af71 	bne.w	1000f4b2 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xbe>
1000f5d0:	991c      	ldr	r1, [sp, #112]	; 0x70
1000f5d2:	9809      	ldr	r0, [sp, #36]	; 0x24
1000f5d4:	9a03      	ldr	r2, [sp, #12]
1000f5d6:	9b02      	ldr	r3, [sp, #8]
1000f5d8:	ed82 7a00 	vstr	s14, [r2]
1000f5dc:	4401      	add	r1, r0
1000f5de:	911c      	str	r1, [sp, #112]	; 0x70
1000f5e0:	9905      	ldr	r1, [sp, #20]
1000f5e2:	440a      	add	r2, r1
1000f5e4:	9203      	str	r2, [sp, #12]
1000f5e6:	9a00      	ldr	r2, [sp, #0]
1000f5e8:	9906      	ldr	r1, [sp, #24]
1000f5ea:	1a12      	subs	r2, r2, r0
1000f5ec:	9200      	str	r2, [sp, #0]
1000f5ee:	9a01      	ldr	r2, [sp, #4]
1000f5f0:	440a      	add	r2, r1
1000f5f2:	9201      	str	r2, [sp, #4]
1000f5f4:	9a18      	ldr	r2, [sp, #96]	; 0x60
1000f5f6:	3301      	adds	r3, #1
1000f5f8:	4293      	cmp	r3, r2
1000f5fa:	9302      	str	r3, [sp, #8]
1000f5fc:	f47f af24 	bne.w	1000f448 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x54>
1000f600:	b00d      	add	sp, #52	; 0x34
1000f602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000f606:	9a00      	ldr	r2, [sp, #0]
1000f608:	9b04      	ldr	r3, [sp, #16]
1000f60a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
1000f60c:	4610      	mov	r0, r2
1000f60e:	189d      	adds	r5, r3, r2
1000f610:	e721      	b.n	1000f456 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x62>
1000f612:	bf00      	nop

1000f614 <forward_lite_conv2d_if32of32wf32>:
1000f614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000f618:	ed2d 8b02 	vpush	{d8}
1000f61c:	b09f      	sub	sp, #124	; 0x7c
1000f61e:	af08      	add	r7, sp, #32
1000f620:	461c      	mov	r4, r3
1000f622:	62f9      	str	r1, [r7, #44]	; 0x2c
1000f624:	63fc      	str	r4, [r7, #60]	; 0x3c
1000f626:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
1000f62a:	f8b7 40b0 	ldrh.w	r4, [r7, #176]	; 0xb0
1000f62e:	64fc      	str	r4, [r7, #76]	; 0x4c
1000f630:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
1000f634:	f8b7 50b4 	ldrh.w	r5, [r7, #180]	; 0xb4
1000f638:	6078      	str	r0, [r7, #4]
1000f63a:	424e      	negs	r6, r1
1000f63c:	4686      	mov	lr, r0
1000f63e:	4694      	mov	ip, r2
1000f640:	613a      	str	r2, [r7, #16]
1000f642:	e9d7 3a22 	ldrd	r3, sl, [r7, #136]	; 0x88
1000f646:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
1000f64a:	f8b7 00a8 	ldrh.w	r0, [r7, #168]	; 0xa8
1000f64e:	617d      	str	r5, [r7, #20]
1000f650:	633e      	str	r6, [r7, #48]	; 0x30
1000f652:	2c00      	cmp	r4, #0
1000f654:	f000 8092 	beq.w	1000f77c <forward_lite_conv2d_if32of32wf32+0x168>
1000f658:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
1000f65c:	6379      	str	r1, [r7, #52]	; 0x34
1000f65e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
1000f662:	eddf 0a9c 	vldr	s1, [pc, #624]	; 1000f8d4 <forward_lite_conv2d_if32of32wf32+0x2c0>
1000f666:	fb04 f202 	mul.w	r2, r4, r2
1000f66a:	fb03 f402 	mul.w	r4, r3, r2
1000f66e:	fb03 f201 	mul.w	r2, r3, r1
1000f672:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
1000f676:	63bc      	str	r4, [r7, #56]	; 0x38
1000f678:	fb01 f10a 	mul.w	r1, r1, sl
1000f67c:	0089      	lsls	r1, r1, #2
1000f67e:	61b9      	str	r1, [r7, #24]
1000f680:	fb05 f102 	mul.w	r1, r5, r2
1000f684:	ea4f 0b84 	mov.w	fp, r4, lsl #2
1000f688:	fb06 f202 	mul.w	r2, r6, r2
1000f68c:	0089      	lsls	r1, r1, #2
1000f68e:	61f9      	str	r1, [r7, #28]
1000f690:	eb0e 0182 	add.w	r1, lr, r2, lsl #2
1000f694:	f10b 0207 	add.w	r2, fp, #7
1000f698:	62b9      	str	r1, [r7, #40]	; 0x28
1000f69a:	f022 0107 	bic.w	r1, r2, #7
1000f69e:	eb0c 0284 	add.w	r2, ip, r4, lsl #2
1000f6a2:	4240      	negs	r0, r0
1000f6a4:	60f9      	str	r1, [r7, #12]
1000f6a6:	60ba      	str	r2, [r7, #8]
1000f6a8:	f10c 4178 	add.w	r1, ip, #4160749568	; 0xf8000000
1000f6ac:	2200      	movs	r2, #0
1000f6ae:	4655      	mov	r5, sl
1000f6b0:	6538      	str	r0, [r7, #80]	; 0x50
1000f6b2:	6239      	str	r1, [r7, #32]
1000f6b4:	627a      	str	r2, [r7, #36]	; 0x24
1000f6b6:	46da      	mov	sl, fp
1000f6b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1000f6ba:	2a00      	cmp	r2, #0
1000f6bc:	f2c0 80d7 	blt.w	1000f86e <forward_lite_conv2d_if32of32wf32+0x25a>
1000f6c0:	2200      	movs	r2, #0
1000f6c2:	f8d7 b028 	ldr.w	fp, [r7, #40]	; 0x28
1000f6c6:	657a      	str	r2, [r7, #84]	; 0x54
1000f6c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
1000f6ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
1000f6ce:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
1000f6d2:	440a      	add	r2, r1
1000f6d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
1000f6d6:	4282      	cmp	r2, r0
1000f6d8:	bf94      	ite	ls
1000f6da:	ebc1 0102 	rsbls	r1, r1, r2
1000f6de:	ebc1 0100 	rsbhi	r1, r1, r0
1000f6e2:	6a3a      	ldr	r2, [r7, #32]
1000f6e4:	6439      	str	r1, [r7, #64]	; 0x40
1000f6e6:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
1000f6ea:	d24d      	bcs.n	1000f788 <forward_lite_conv2d_if32of32wf32+0x174>
1000f6ec:	b385      	cbz	r5, 1000f750 <forward_lite_conv2d_if32of32wf32+0x13c>
1000f6ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
1000f6f0:	2a00      	cmp	r2, #0
1000f6f2:	f000 80c1 	beq.w	1000f878 <forward_lite_conv2d_if32of32wf32+0x264>
1000f6f6:	4659      	mov	r1, fp
1000f6f8:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
1000f6fc:	693e      	ldr	r6, [r7, #16]
1000f6fe:	46d3      	mov	fp, sl
1000f700:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
1000f704:	4691      	mov	r9, r2
1000f706:	2400      	movs	r4, #0
1000f708:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
1000f70a:	ecb9 0a01 	vldmia	r9!, {s0}
1000f70e:	9207      	str	r2, [sp, #28]
1000f710:	6d3a      	ldr	r2, [r7, #80]	; 0x50
1000f712:	e9cd a205 	strd	sl, r2, [sp, #20]
1000f716:	6d7a      	ldr	r2, [r7, #84]	; 0x54
1000f718:	9204      	str	r2, [sp, #16]
1000f71a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
1000f71e:	9203      	str	r2, [sp, #12]
1000f720:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
1000f724:	9202      	str	r2, [sp, #8]
1000f726:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
1000f72a:	4640      	mov	r0, r8
1000f72c:	e9cd 5200 	strd	r5, r2, [sp]
1000f730:	3401      	adds	r4, #1
1000f732:	4632      	mov	r2, r6
1000f734:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
1000f738:	64b9      	str	r1, [r7, #72]	; 0x48
1000f73a:	f7ff fe5b 	bl	1000f3f4 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
1000f73e:	42a5      	cmp	r5, r4
1000f740:	6cb9      	ldr	r1, [r7, #72]	; 0x48
1000f742:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
1000f746:	445e      	add	r6, fp
1000f748:	f108 0804 	add.w	r8, r8, #4
1000f74c:	d1dc      	bne.n	1000f708 <forward_lite_conv2d_if32of32wf32+0xf4>
1000f74e:	46da      	mov	sl, fp
1000f750:	6af9      	ldr	r1, [r7, #44]	; 0x2c
1000f752:	69b8      	ldr	r0, [r7, #24]
1000f754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000f756:	4401      	add	r1, r0
1000f758:	62f9      	str	r1, [r7, #44]	; 0x2c
1000f75a:	6978      	ldr	r0, [r7, #20]
1000f75c:	6b39      	ldr	r1, [r7, #48]	; 0x30
1000f75e:	4401      	add	r1, r0
1000f760:	6339      	str	r1, [r7, #48]	; 0x30
1000f762:	6b79      	ldr	r1, [r7, #52]	; 0x34
1000f764:	1a09      	subs	r1, r1, r0
1000f766:	6379      	str	r1, [r7, #52]	; 0x34
1000f768:	69f8      	ldr	r0, [r7, #28]
1000f76a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
1000f76c:	4401      	add	r1, r0
1000f76e:	62b9      	str	r1, [r7, #40]	; 0x28
1000f770:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
1000f774:	3201      	adds	r2, #1
1000f776:	4291      	cmp	r1, r2
1000f778:	627a      	str	r2, [r7, #36]	; 0x24
1000f77a:	d19d      	bne.n	1000f6b8 <forward_lite_conv2d_if32of32wf32+0xa4>
1000f77c:	375c      	adds	r7, #92	; 0x5c
1000f77e:	46bd      	mov	sp, r7
1000f780:	ecbd 8b02 	vpop	{d8}
1000f784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000f788:	466a      	mov	r2, sp
1000f78a:	ee08 2a10 	vmov	s16, r2
1000f78e:	68fa      	ldr	r2, [r7, #12]
1000f790:	ebad 0d02 	sub.w	sp, sp, r2
1000f794:	aa08      	add	r2, sp, #32
1000f796:	2d00      	cmp	r5, #0
1000f798:	d03d      	beq.n	1000f816 <forward_lite_conv2d_if32of32wf32+0x202>
1000f79a:	6938      	ldr	r0, [r7, #16]
1000f79c:	68bc      	ldr	r4, [r7, #8]
1000f79e:	f8d7 902c 	ldr.w	r9, [r7, #44]	; 0x2c
1000f7a2:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
1000f7a4:	4659      	mov	r1, fp
1000f7a6:	f04f 0800 	mov.w	r8, #0
1000f7aa:	46ab      	mov	fp, r5
1000f7ac:	4605      	mov	r5, r0
1000f7ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
1000f7b0:	b138      	cbz	r0, 1000f7c2 <forward_lite_conv2d_if32of32wf32+0x1ae>
1000f7b2:	4628      	mov	r0, r5
1000f7b4:	4694      	mov	ip, r2
1000f7b6:	f850 eb04 	ldr.w	lr, [r0], #4
1000f7ba:	f84c eb04 	str.w	lr, [ip], #4
1000f7be:	42a0      	cmp	r0, r4
1000f7c0:	d1f9      	bne.n	1000f7b6 <forward_lite_conv2d_if32of32wf32+0x1a2>
1000f7c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
1000f7c4:	b358      	cbz	r0, 1000f81e <forward_lite_conv2d_if32of32wf32+0x20a>
1000f7c6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
1000f7c8:	ecb6 0a01 	vldmia	r6!, {s0}
1000f7cc:	9007      	str	r0, [sp, #28]
1000f7ce:	6d38      	ldr	r0, [r7, #80]	; 0x50
1000f7d0:	9006      	str	r0, [sp, #24]
1000f7d2:	6c38      	ldr	r0, [r7, #64]	; 0x40
1000f7d4:	9005      	str	r0, [sp, #20]
1000f7d6:	6d78      	ldr	r0, [r7, #84]	; 0x54
1000f7d8:	9004      	str	r0, [sp, #16]
1000f7da:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
1000f7de:	9003      	str	r0, [sp, #12]
1000f7e0:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
1000f7e4:	9002      	str	r0, [sp, #8]
1000f7e6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
1000f7ea:	f108 0801 	add.w	r8, r8, #1
1000f7ee:	e9cd b000 	strd	fp, r0, [sp]
1000f7f2:	e9c7 2111 	strd	r2, r1, [r7, #68]	; 0x44
1000f7f6:	4648      	mov	r0, r9
1000f7f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
1000f7fc:	f7ff fdfa 	bl	1000f3f4 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
1000f800:	45d8      	cmp	r8, fp
1000f802:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	; 0x44
1000f806:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
1000f80a:	4455      	add	r5, sl
1000f80c:	4454      	add	r4, sl
1000f80e:	f109 0904 	add.w	r9, r9, #4
1000f812:	d1cc      	bne.n	1000f7ae <forward_lite_conv2d_if32of32wf32+0x19a>
1000f814:	465d      	mov	r5, fp
1000f816:	ee18 2a10 	vmov	r2, s16
1000f81a:	4695      	mov	sp, r2
1000f81c:	e798      	b.n	1000f750 <forward_lite_conv2d_if32of32wf32+0x13c>
1000f81e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
1000f820:	9007      	str	r0, [sp, #28]
1000f822:	6d38      	ldr	r0, [r7, #80]	; 0x50
1000f824:	9006      	str	r0, [sp, #24]
1000f826:	6c38      	ldr	r0, [r7, #64]	; 0x40
1000f828:	9005      	str	r0, [sp, #20]
1000f82a:	6d78      	ldr	r0, [r7, #84]	; 0x54
1000f82c:	9004      	str	r0, [sp, #16]
1000f82e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
1000f832:	9003      	str	r0, [sp, #12]
1000f834:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
1000f838:	9002      	str	r0, [sp, #8]
1000f83a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
1000f83e:	eeb0 0a60 	vmov.f32	s0, s1
1000f842:	e9cd b000 	strd	fp, r0, [sp]
1000f846:	f108 0801 	add.w	r8, r8, #1
1000f84a:	e9c7 2111 	strd	r2, r1, [r7, #68]	; 0x44
1000f84e:	4648      	mov	r0, r9
1000f850:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
1000f854:	f7ff fdce 	bl	1000f3f4 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
1000f858:	45c3      	cmp	fp, r8
1000f85a:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	; 0x44
1000f85e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
1000f862:	4455      	add	r5, sl
1000f864:	4454      	add	r4, sl
1000f866:	f109 0904 	add.w	r9, r9, #4
1000f86a:	d1a0      	bne.n	1000f7ae <forward_lite_conv2d_if32of32wf32+0x19a>
1000f86c:	e7d2      	b.n	1000f814 <forward_lite_conv2d_if32of32wf32+0x200>
1000f86e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000f870:	f8d7 b004 	ldr.w	fp, [r7, #4]
1000f874:	657a      	str	r2, [r7, #84]	; 0x54
1000f876:	e727      	b.n	1000f6c8 <forward_lite_conv2d_if32of32wf32+0xb4>
1000f878:	4659      	mov	r1, fp
1000f87a:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
1000f87e:	693e      	ldr	r6, [r7, #16]
1000f880:	f8d7 9054 	ldr.w	r9, [r7, #84]	; 0x54
1000f884:	46d3      	mov	fp, sl
1000f886:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
1000f88a:	4614      	mov	r4, r2
1000f88c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
1000f88e:	9207      	str	r2, [sp, #28]
1000f890:	6d3a      	ldr	r2, [r7, #80]	; 0x50
1000f892:	f8cd 9010 	str.w	r9, [sp, #16]
1000f896:	e9cd a205 	strd	sl, r2, [sp, #20]
1000f89a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
1000f89e:	9203      	str	r2, [sp, #12]
1000f8a0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
1000f8a4:	9202      	str	r2, [sp, #8]
1000f8a6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
1000f8aa:	4640      	mov	r0, r8
1000f8ac:	e9cd 5200 	strd	r5, r2, [sp]
1000f8b0:	eeb0 0a60 	vmov.f32	s0, s1
1000f8b4:	4632      	mov	r2, r6
1000f8b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
1000f8ba:	6579      	str	r1, [r7, #84]	; 0x54
1000f8bc:	3401      	adds	r4, #1
1000f8be:	f7ff fd99 	bl	1000f3f4 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
1000f8c2:	42a5      	cmp	r5, r4
1000f8c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
1000f8c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
1000f8ca:	445e      	add	r6, fp
1000f8cc:	f108 0804 	add.w	r8, r8, #4
1000f8d0:	d1dc      	bne.n	1000f88c <forward_lite_conv2d_if32of32wf32+0x278>
1000f8d2:	e73c      	b.n	1000f74e <forward_lite_conv2d_if32of32wf32+0x13a>
1000f8d4:	00000000 	.word	0x00000000

1000f8d8 <forward_lite_dense_if32of32wf32>:
1000f8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000f8dc:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
1000f8e0:	eb00 0784 	add.w	r7, r0, r4, lsl #2
1000f8e4:	4287      	cmp	r7, r0
1000f8e6:	f240 8106 	bls.w	1000faf6 <forward_lite_dense_if32of32wf32+0x21e>
1000f8ea:	f1a6 0810 	sub.w	r8, r6, #16
1000f8ee:	ea4f 1818 	mov.w	r8, r8, lsr #4
1000f8f2:	f108 0801 	add.w	r8, r8, #1
1000f8f6:	ea4f 1b88 	mov.w	fp, r8, lsl #6
1000f8fa:	ea4f 0986 	mov.w	r9, r6, lsl #2
1000f8fe:	eb01 1888 	add.w	r8, r1, r8, lsl #6
1000f902:	4605      	mov	r5, r0
1000f904:	f006 0a0f 	and.w	sl, r6, #15
1000f908:	2e0f      	cmp	r6, #15
1000f90a:	ed9f 7a84 	vldr	s14, [pc, #528]	; 1000fb1c <forward_lite_dense_if32of32wf32+0x244>
1000f90e:	f240 8101 	bls.w	1000fb14 <forward_lite_dense_if32of32wf32+0x23c>
1000f912:	f101 0c40 	add.w	ip, r1, #64	; 0x40
1000f916:	f102 0440 	add.w	r4, r2, #64	; 0x40
1000f91a:	46b6      	mov	lr, r6
1000f91c:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
1000f920:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
1000f924:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
1000f928:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
1000f92c:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
1000f930:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
1000f934:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
1000f938:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
1000f93c:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
1000f940:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
1000f944:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
1000f948:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
1000f94c:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
1000f950:	ee67 7aa5 	vmul.f32	s15, s15, s11
1000f954:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
1000f958:	eee6 7a26 	vfma.f32	s15, s12, s13
1000f95c:	f1ae 0e10 	sub.w	lr, lr, #16
1000f960:	f1be 0f0f 	cmp.w	lr, #15
1000f964:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
1000f968:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
1000f96c:	eee5 7a86 	vfma.f32	s15, s11, s12
1000f970:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
1000f974:	f104 0440 	add.w	r4, r4, #64	; 0x40
1000f978:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
1000f97c:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
1000f980:	eee4 7aa6 	vfma.f32	s15, s9, s13
1000f984:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
1000f988:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
1000f98c:	eee5 7a25 	vfma.f32	s15, s10, s11
1000f990:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
1000f994:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
1000f998:	eee6 7a26 	vfma.f32	s15, s12, s13
1000f99c:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
1000f9a0:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
1000f9a4:	eee3 7a23 	vfma.f32	s15, s6, s7
1000f9a8:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
1000f9ac:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
1000f9b0:	eee4 7a24 	vfma.f32	s15, s8, s9
1000f9b4:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
1000f9b8:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
1000f9bc:	eee5 7a25 	vfma.f32	s15, s10, s11
1000f9c0:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
1000f9c4:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
1000f9c8:	eee6 7a26 	vfma.f32	s15, s12, s13
1000f9cc:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
1000f9d0:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
1000f9d4:	eee1 7a21 	vfma.f32	s15, s2, s3
1000f9d8:	eee2 7a22 	vfma.f32	s15, s4, s5
1000f9dc:	eee3 7a23 	vfma.f32	s15, s6, s7
1000f9e0:	eee4 7a24 	vfma.f32	s15, s8, s9
1000f9e4:	eee5 7a25 	vfma.f32	s15, s10, s11
1000f9e8:	eee6 7a26 	vfma.f32	s15, s12, s13
1000f9ec:	ee37 7a27 	vadd.f32	s14, s14, s15
1000f9f0:	d894      	bhi.n	1000f91c <forward_lite_dense_if32of32wf32+0x44>
1000f9f2:	eb02 0e0b 	add.w	lr, r2, fp
1000f9f6:	4654      	mov	r4, sl
1000f9f8:	46c4      	mov	ip, r8
1000f9fa:	2c00      	cmp	r4, #0
1000f9fc:	d075      	beq.n	1000faea <forward_lite_dense_if32of32wf32+0x212>
1000f9fe:	eddc 6a00 	vldr	s13, [ip]
1000fa02:	edde 7a00 	vldr	s15, [lr]
1000fa06:	2c01      	cmp	r4, #1
1000fa08:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000fa0c:	d06d      	beq.n	1000faea <forward_lite_dense_if32of32wf32+0x212>
1000fa0e:	eddc 6a01 	vldr	s13, [ip, #4]
1000fa12:	edde 7a01 	vldr	s15, [lr, #4]
1000fa16:	2c02      	cmp	r4, #2
1000fa18:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000fa1c:	d065      	beq.n	1000faea <forward_lite_dense_if32of32wf32+0x212>
1000fa1e:	eddc 6a02 	vldr	s13, [ip, #8]
1000fa22:	edde 7a02 	vldr	s15, [lr, #8]
1000fa26:	2c03      	cmp	r4, #3
1000fa28:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000fa2c:	d05d      	beq.n	1000faea <forward_lite_dense_if32of32wf32+0x212>
1000fa2e:	eddc 6a03 	vldr	s13, [ip, #12]
1000fa32:	edde 7a03 	vldr	s15, [lr, #12]
1000fa36:	2c04      	cmp	r4, #4
1000fa38:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000fa3c:	d055      	beq.n	1000faea <forward_lite_dense_if32of32wf32+0x212>
1000fa3e:	eddc 6a04 	vldr	s13, [ip, #16]
1000fa42:	edde 7a04 	vldr	s15, [lr, #16]
1000fa46:	2c05      	cmp	r4, #5
1000fa48:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000fa4c:	d04d      	beq.n	1000faea <forward_lite_dense_if32of32wf32+0x212>
1000fa4e:	eddc 6a05 	vldr	s13, [ip, #20]
1000fa52:	edde 7a05 	vldr	s15, [lr, #20]
1000fa56:	2c06      	cmp	r4, #6
1000fa58:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000fa5c:	d045      	beq.n	1000faea <forward_lite_dense_if32of32wf32+0x212>
1000fa5e:	eddc 6a06 	vldr	s13, [ip, #24]
1000fa62:	edde 7a06 	vldr	s15, [lr, #24]
1000fa66:	2c07      	cmp	r4, #7
1000fa68:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000fa6c:	d03d      	beq.n	1000faea <forward_lite_dense_if32of32wf32+0x212>
1000fa6e:	eddc 6a07 	vldr	s13, [ip, #28]
1000fa72:	edde 7a07 	vldr	s15, [lr, #28]
1000fa76:	2c08      	cmp	r4, #8
1000fa78:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000fa7c:	d035      	beq.n	1000faea <forward_lite_dense_if32of32wf32+0x212>
1000fa7e:	eddc 6a08 	vldr	s13, [ip, #32]
1000fa82:	edde 7a08 	vldr	s15, [lr, #32]
1000fa86:	2c09      	cmp	r4, #9
1000fa88:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000fa8c:	d02d      	beq.n	1000faea <forward_lite_dense_if32of32wf32+0x212>
1000fa8e:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
1000fa92:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
1000fa96:	2c0a      	cmp	r4, #10
1000fa98:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000fa9c:	d025      	beq.n	1000faea <forward_lite_dense_if32of32wf32+0x212>
1000fa9e:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
1000faa2:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
1000faa6:	2c0b      	cmp	r4, #11
1000faa8:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000faac:	d01d      	beq.n	1000faea <forward_lite_dense_if32of32wf32+0x212>
1000faae:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
1000fab2:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
1000fab6:	2c0c      	cmp	r4, #12
1000fab8:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000fabc:	d015      	beq.n	1000faea <forward_lite_dense_if32of32wf32+0x212>
1000fabe:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
1000fac2:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
1000fac6:	3c0d      	subs	r4, #13
1000fac8:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000facc:	d00d      	beq.n	1000faea <forward_lite_dense_if32of32wf32+0x212>
1000face:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
1000fad2:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
1000fad6:	2c01      	cmp	r4, #1
1000fad8:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000fadc:	d005      	beq.n	1000faea <forward_lite_dense_if32of32wf32+0x212>
1000fade:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
1000fae2:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
1000fae6:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000faea:	444a      	add	r2, r9
1000faec:	eca5 7a01 	vstmia	r5!, {s14}
1000faf0:	42af      	cmp	r7, r5
1000faf2:	f63f af09 	bhi.w	1000f908 <forward_lite_dense_if32of32wf32+0x30>
1000faf6:	b15b      	cbz	r3, 1000fb10 <forward_lite_dense_if32of32wf32+0x238>
1000faf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000fafa:	b14a      	cbz	r2, 1000fb10 <forward_lite_dense_if32of32wf32+0x238>
1000fafc:	edd0 7a00 	vldr	s15, [r0]
1000fb00:	ecb3 7a01 	vldmia	r3!, {s14}
1000fb04:	ee77 7a87 	vadd.f32	s15, s15, s14
1000fb08:	ece0 7a01 	vstmia	r0!, {s15}
1000fb0c:	4287      	cmp	r7, r0
1000fb0e:	d1f5      	bne.n	1000fafc <forward_lite_dense_if32of32wf32+0x224>
1000fb10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000fb14:	4634      	mov	r4, r6
1000fb16:	4696      	mov	lr, r2
1000fb18:	468c      	mov	ip, r1
1000fb1a:	e76e      	b.n	1000f9fa <forward_lite_dense_if32of32wf32+0x122>
1000fb1c:	00000000 	.word	0x00000000

1000fb20 <st_int8_copy>:
1000fb20:	4288      	cmp	r0, r1
1000fb22:	d057      	beq.n	1000fbd4 <st_int8_copy+0xb4>
1000fb24:	2a00      	cmp	r2, #0
1000fb26:	d055      	beq.n	1000fbd4 <st_int8_copy+0xb4>
1000fb28:	4288      	cmp	r0, r1
1000fb2a:	d354      	bcc.n	1000fbd6 <st_int8_copy+0xb6>
1000fb2c:	078b      	lsls	r3, r1, #30
1000fb2e:	d102      	bne.n	1000fb36 <st_int8_copy+0x16>
1000fb30:	e009      	b.n	1000fb46 <st_int8_copy+0x26>
1000fb32:	2a00      	cmp	r2, #0
1000fb34:	d05c      	beq.n	1000fbf0 <st_int8_copy+0xd0>
1000fb36:	f910 3b01 	ldrsb.w	r3, [r0], #1
1000fb3a:	f801 3b01 	strb.w	r3, [r1], #1
1000fb3e:	078b      	lsls	r3, r1, #30
1000fb40:	f102 32ff 	add.w	r2, r2, #4294967295
1000fb44:	d1f5      	bne.n	1000fb32 <st_int8_copy+0x12>
1000fb46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000fb4a:	ea5f 1e12 	movs.w	lr, r2, lsr #4
1000fb4e:	d069      	beq.n	1000fc24 <st_int8_copy+0x104>
1000fb50:	ea41 0300 	orr.w	r3, r1, r0
1000fb54:	075b      	lsls	r3, r3, #29
1000fb56:	d14c      	bne.n	1000fbf2 <st_int8_copy+0xd2>
1000fb58:	f10e 33ff 	add.w	r3, lr, #4294967295
1000fb5c:	2b01      	cmp	r3, #1
1000fb5e:	d948      	bls.n	1000fbf2 <st_int8_copy+0xd2>
1000fb60:	f100 0310 	add.w	r3, r0, #16
1000fb64:	ea4f 140e 	mov.w	r4, lr, lsl #4
1000fb68:	f101 0c10 	add.w	ip, r1, #16
1000fb6c:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
1000fb70:	ed13 6b04 	vldr	d6, [r3, #-16]
1000fb74:	ed13 7b02 	vldr	d7, [r3, #-8]
1000fb78:	3310      	adds	r3, #16
1000fb7a:	4573      	cmp	r3, lr
1000fb7c:	ed0c 6b04 	vstr	d6, [ip, #-16]
1000fb80:	ed0c 7b02 	vstr	d7, [ip, #-8]
1000fb84:	f10c 0c10 	add.w	ip, ip, #16
1000fb88:	d1f2      	bne.n	1000fb70 <st_int8_copy+0x50>
1000fb8a:	f3c2 0381 	ubfx	r3, r2, #2, #2
1000fb8e:	4421      	add	r1, r4
1000fb90:	4420      	add	r0, r4
1000fb92:	f002 0203 	and.w	r2, r2, #3
1000fb96:	b16b      	cbz	r3, 1000fbb4 <st_int8_copy+0x94>
1000fb98:	6804      	ldr	r4, [r0, #0]
1000fb9a:	600c      	str	r4, [r1, #0]
1000fb9c:	1e5c      	subs	r4, r3, #1
1000fb9e:	d005      	beq.n	1000fbac <st_int8_copy+0x8c>
1000fba0:	6845      	ldr	r5, [r0, #4]
1000fba2:	604d      	str	r5, [r1, #4]
1000fba4:	2c01      	cmp	r4, #1
1000fba6:	bf1c      	itt	ne
1000fba8:	6884      	ldrne	r4, [r0, #8]
1000fbaa:	608c      	strne	r4, [r1, #8]
1000fbac:	eb00 0083 	add.w	r0, r0, r3, lsl #2
1000fbb0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
1000fbb4:	b162      	cbz	r2, 1000fbd0 <st_int8_copy+0xb0>
1000fbb6:	f990 3000 	ldrsb.w	r3, [r0]
1000fbba:	700b      	strb	r3, [r1, #0]
1000fbbc:	3a01      	subs	r2, #1
1000fbbe:	d007      	beq.n	1000fbd0 <st_int8_copy+0xb0>
1000fbc0:	f990 3001 	ldrsb.w	r3, [r0, #1]
1000fbc4:	704b      	strb	r3, [r1, #1]
1000fbc6:	2a01      	cmp	r2, #1
1000fbc8:	bf1c      	itt	ne
1000fbca:	f990 3002 	ldrsbne.w	r3, [r0, #2]
1000fbce:	708b      	strbne	r3, [r1, #2]
1000fbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000fbd4:	4770      	bx	lr
1000fbd6:	1883      	adds	r3, r0, r2
1000fbd8:	428b      	cmp	r3, r1
1000fbda:	d9a7      	bls.n	1000fb2c <st_int8_copy+0xc>
1000fbdc:	4283      	cmp	r3, r0
1000fbde:	440a      	add	r2, r1
1000fbe0:	d9f8      	bls.n	1000fbd4 <st_int8_copy+0xb4>
1000fbe2:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
1000fbe6:	f802 1d01 	strb.w	r1, [r2, #-1]!
1000fbea:	4283      	cmp	r3, r0
1000fbec:	d1f9      	bne.n	1000fbe2 <st_int8_copy+0xc2>
1000fbee:	4770      	bx	lr
1000fbf0:	4770      	bx	lr
1000fbf2:	ea4f 140e 	mov.w	r4, lr, lsl #4
1000fbf6:	460b      	mov	r3, r1
1000fbf8:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
1000fbfc:	4684      	mov	ip, r0
1000fbfe:	f8dc 7000 	ldr.w	r7, [ip]
1000fc02:	f8dc 6004 	ldr.w	r6, [ip, #4]
1000fc06:	f8dc 5008 	ldr.w	r5, [ip, #8]
1000fc0a:	f8dc 800c 	ldr.w	r8, [ip, #12]
1000fc0e:	f8c3 800c 	str.w	r8, [r3, #12]
1000fc12:	601f      	str	r7, [r3, #0]
1000fc14:	605e      	str	r6, [r3, #4]
1000fc16:	609d      	str	r5, [r3, #8]
1000fc18:	3310      	adds	r3, #16
1000fc1a:	459e      	cmp	lr, r3
1000fc1c:	f10c 0c10 	add.w	ip, ip, #16
1000fc20:	d1ed      	bne.n	1000fbfe <st_int8_copy+0xde>
1000fc22:	e7b2      	b.n	1000fb8a <st_int8_copy+0x6a>
1000fc24:	0893      	lsrs	r3, r2, #2
1000fc26:	f002 0203 	and.w	r2, r2, #3
1000fc2a:	e7b4      	b.n	1000fb96 <st_int8_copy+0x76>

1000fc2c <ai_array_to_buffer_fmt>:
1000fc2c:	f3c0 4343 	ubfx	r3, r0, #17, #4
1000fc30:	2b02      	cmp	r3, #2
1000fc32:	d050      	beq.n	1000fcd6 <ai_array_to_buffer_fmt+0xaa>
1000fc34:	4b2a      	ldr	r3, [pc, #168]	; (1000fce0 <ai_array_to_buffer_fmt+0xb4>)
1000fc36:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
1000fc3a:	429a      	cmp	r2, r3
1000fc3c:	d00b      	beq.n	1000fc56 <ai_array_to_buffer_fmt+0x2a>
1000fc3e:	dc1c      	bgt.n	1000fc7a <ai_array_to_buffer_fmt+0x4e>
1000fc40:	4b28      	ldr	r3, [pc, #160]	; (1000fce4 <ai_array_to_buffer_fmt+0xb8>)
1000fc42:	429a      	cmp	r2, r3
1000fc44:	d007      	beq.n	1000fc56 <ai_array_to_buffer_fmt+0x2a>
1000fc46:	dd0b      	ble.n	1000fc60 <ai_array_to_buffer_fmt+0x34>
1000fc48:	4b27      	ldr	r3, [pc, #156]	; (1000fce8 <ai_array_to_buffer_fmt+0xbc>)
1000fc4a:	429a      	cmp	r2, r3
1000fc4c:	d003      	beq.n	1000fc56 <ai_array_to_buffer_fmt+0x2a>
1000fc4e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
1000fc52:	429a      	cmp	r2, r3
1000fc54:	d131      	bne.n	1000fcba <ai_array_to_buffer_fmt+0x8e>
1000fc56:	4613      	mov	r3, r2
1000fc58:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
1000fc5c:	4318      	orrs	r0, r3
1000fc5e:	4770      	bx	lr
1000fc60:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
1000fc64:	429a      	cmp	r2, r3
1000fc66:	d0f6      	beq.n	1000fc56 <ai_array_to_buffer_fmt+0x2a>
1000fc68:	dd2c      	ble.n	1000fcc4 <ai_array_to_buffer_fmt+0x98>
1000fc6a:	4b20      	ldr	r3, [pc, #128]	; (1000fcec <ai_array_to_buffer_fmt+0xc0>)
1000fc6c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
1000fc70:	429a      	cmp	r2, r3
1000fc72:	bf18      	it	ne
1000fc74:	2340      	movne	r3, #64	; 0x40
1000fc76:	4318      	orrs	r0, r3
1000fc78:	4770      	bx	lr
1000fc7a:	4b1d      	ldr	r3, [pc, #116]	; (1000fcf0 <ai_array_to_buffer_fmt+0xc4>)
1000fc7c:	429a      	cmp	r2, r3
1000fc7e:	d0ea      	beq.n	1000fc56 <ai_array_to_buffer_fmt+0x2a>
1000fc80:	dd0e      	ble.n	1000fca0 <ai_array_to_buffer_fmt+0x74>
1000fc82:	4b1c      	ldr	r3, [pc, #112]	; (1000fcf4 <ai_array_to_buffer_fmt+0xc8>)
1000fc84:	429a      	cmp	r2, r3
1000fc86:	d0e6      	beq.n	1000fc56 <ai_array_to_buffer_fmt+0x2a>
1000fc88:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
1000fc8c:	429a      	cmp	r2, r3
1000fc8e:	d0e2      	beq.n	1000fc56 <ai_array_to_buffer_fmt+0x2a>
1000fc90:	4b19      	ldr	r3, [pc, #100]	; (1000fcf8 <ai_array_to_buffer_fmt+0xcc>)
1000fc92:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
1000fc96:	429a      	cmp	r2, r3
1000fc98:	bf18      	it	ne
1000fc9a:	2340      	movne	r3, #64	; 0x40
1000fc9c:	4318      	orrs	r0, r3
1000fc9e:	4770      	bx	lr
1000fca0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
1000fca4:	429a      	cmp	r2, r3
1000fca6:	d0d6      	beq.n	1000fc56 <ai_array_to_buffer_fmt+0x2a>
1000fca8:	3307      	adds	r3, #7
1000fcaa:	429a      	cmp	r2, r3
1000fcac:	d0d3      	beq.n	1000fc56 <ai_array_to_buffer_fmt+0x2a>
1000fcae:	f2a3 3387 	subw	r3, r3, #903	; 0x387
1000fcb2:	429a      	cmp	r2, r3
1000fcb4:	bf18      	it	ne
1000fcb6:	2340      	movne	r3, #64	; 0x40
1000fcb8:	e7ce      	b.n	1000fc58 <ai_array_to_buffer_fmt+0x2c>
1000fcba:	4b10      	ldr	r3, [pc, #64]	; (1000fcfc <ai_array_to_buffer_fmt+0xd0>)
1000fcbc:	429a      	cmp	r2, r3
1000fcbe:	bf18      	it	ne
1000fcc0:	2340      	movne	r3, #64	; 0x40
1000fcc2:	e7c9      	b.n	1000fc58 <ai_array_to_buffer_fmt+0x2c>
1000fcc4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
1000fcc8:	429a      	cmp	r2, r3
1000fcca:	d0c4      	beq.n	1000fc56 <ai_array_to_buffer_fmt+0x2a>
1000fccc:	3380      	adds	r3, #128	; 0x80
1000fcce:	429a      	cmp	r2, r3
1000fcd0:	bf18      	it	ne
1000fcd2:	2340      	movne	r3, #64	; 0x40
1000fcd4:	e7c0      	b.n	1000fc58 <ai_array_to_buffer_fmt+0x2c>
1000fcd6:	4b0a      	ldr	r3, [pc, #40]	; (1000fd00 <ai_array_to_buffer_fmt+0xd4>)
1000fcd8:	4003      	ands	r3, r0
1000fcda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
1000fcde:	e7bb      	b.n	1000fc58 <ai_array_to_buffer_fmt+0x2c>
1000fce0:	00840040 	.word	0x00840040
1000fce4:	00040840 	.word	0x00040840
1000fce8:	00041040 	.word	0x00041040
1000fcec:	00040447 	.word	0x00040447
1000fcf0:	00840840 	.word	0x00840840
1000fcf4:	00841040 	.word	0x00841040
1000fcf8:	0084084f 	.word	0x0084084f
1000fcfc:	0004084f 	.word	0x0004084f
1000fd00:	00803fff 	.word	0x00803fff

1000fd04 <ai_array_get_byte_size>:
1000fd04:	b319      	cbz	r1, 1000fd4e <ai_array_get_byte_size+0x4a>
1000fd06:	f3c0 13c6 	ubfx	r3, r0, #7, #7
1000fd0a:	fb03 f101 	mul.w	r1, r3, r1
1000fd0e:	3107      	adds	r1, #7
1000fd10:	f3c0 4243 	ubfx	r2, r0, #17, #4
1000fd14:	f021 0307 	bic.w	r3, r1, #7
1000fd18:	2a04      	cmp	r2, #4
1000fd1a:	f3c0 5141 	ubfx	r1, r0, #21, #2
1000fd1e:	fa23 f101 	lsr.w	r1, r3, r1
1000fd22:	ea4f 10e0 	mov.w	r0, r0, asr #7
1000fd26:	d00b      	beq.n	1000fd40 <ai_array_get_byte_size+0x3c>
1000fd28:	2a08      	cmp	r2, #8
1000fd2a:	d002      	beq.n	1000fd32 <ai_array_get_byte_size+0x2e>
1000fd2c:	3107      	adds	r1, #7
1000fd2e:	08c8      	lsrs	r0, r1, #3
1000fd30:	4770      	bx	lr
1000fd32:	f000 007f 	and.w	r0, r0, #127	; 0x7f
1000fd36:	eb01 2100 	add.w	r1, r1, r0, lsl #8
1000fd3a:	3107      	adds	r1, #7
1000fd3c:	08c8      	lsrs	r0, r1, #3
1000fd3e:	4770      	bx	lr
1000fd40:	f000 007f 	and.w	r0, r0, #127	; 0x7f
1000fd44:	eb01 1100 	add.w	r1, r1, r0, lsl #4
1000fd48:	3107      	adds	r1, #7
1000fd4a:	08c8      	lsrs	r0, r1, #3
1000fd4c:	4770      	bx	lr
1000fd4e:	4608      	mov	r0, r1
1000fd50:	4770      	bx	lr
1000fd52:	bf00      	nop

1000fd54 <ai_array_get_data_byte_size>:
1000fd54:	b169      	cbz	r1, 1000fd72 <ai_array_get_data_byte_size+0x1e>
1000fd56:	f3c0 12c6 	ubfx	r2, r0, #7, #7
1000fd5a:	fb02 f101 	mul.w	r1, r2, r1
1000fd5e:	1dcb      	adds	r3, r1, #7
1000fd60:	f023 0307 	bic.w	r3, r3, #7
1000fd64:	f3c0 5041 	ubfx	r0, r0, #21, #2
1000fd68:	fa23 f000 	lsr.w	r0, r3, r0
1000fd6c:	3007      	adds	r0, #7
1000fd6e:	08c0      	lsrs	r0, r0, #3
1000fd70:	4770      	bx	lr
1000fd72:	4608      	mov	r0, r1
1000fd74:	4770      	bx	lr
1000fd76:	bf00      	nop

1000fd78 <ai_version_get>:
1000fd78:	0212      	lsls	r2, r2, #8
1000fd7a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
1000fd7e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
1000fd82:	4770      	bx	lr

1000fd84 <get_tensor_byte_size>:
1000fd84:	b410      	push	{r4}
1000fd86:	6983      	ldr	r3, [r0, #24]
1000fd88:	68c4      	ldr	r4, [r0, #12]
1000fd8a:	6941      	ldr	r1, [r0, #20]
1000fd8c:	681b      	ldr	r3, [r3, #0]
1000fd8e:	68e0      	ldr	r0, [r4, #12]
1000fd90:	4a07      	ldr	r2, [pc, #28]	; (1000fdb0 <get_tensor_byte_size+0x2c>)
1000fd92:	68c9      	ldr	r1, [r1, #12]
1000fd94:	f85d 4b04 	ldr.w	r4, [sp], #4
1000fd98:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
1000fd9c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
1000fda0:	fb01 f000 	mul.w	r0, r1, r0
1000fda4:	4293      	cmp	r3, r2
1000fda6:	bf04      	itt	eq
1000fda8:	3007      	addeq	r0, #7
1000fdaa:	08c0      	lsreq	r0, r0, #3
1000fdac:	4770      	bx	lr
1000fdae:	bf00      	nop
1000fdb0:	000400c0 	.word	0x000400c0

1000fdb4 <__assert_func>:
1000fdb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000fdb6:	4614      	mov	r4, r2
1000fdb8:	461a      	mov	r2, r3
1000fdba:	4b09      	ldr	r3, [pc, #36]	; (1000fde0 <__assert_func+0x2c>)
1000fdbc:	681b      	ldr	r3, [r3, #0]
1000fdbe:	4605      	mov	r5, r0
1000fdc0:	68d8      	ldr	r0, [r3, #12]
1000fdc2:	b14c      	cbz	r4, 1000fdd8 <__assert_func+0x24>
1000fdc4:	4b07      	ldr	r3, [pc, #28]	; (1000fde4 <__assert_func+0x30>)
1000fdc6:	9100      	str	r1, [sp, #0]
1000fdc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
1000fdcc:	4906      	ldr	r1, [pc, #24]	; (1000fde8 <__assert_func+0x34>)
1000fdce:	462b      	mov	r3, r5
1000fdd0:	f000 fe04 	bl	100109dc <fiprintf>
1000fdd4:	f000 ff57 	bl	10010c86 <abort>
1000fdd8:	4b04      	ldr	r3, [pc, #16]	; (1000fdec <__assert_func+0x38>)
1000fdda:	461c      	mov	r4, r3
1000fddc:	e7f3      	b.n	1000fdc6 <__assert_func+0x12>
1000fdde:	bf00      	nop
1000fde0:	10020bd0 	.word	0x10020bd0
1000fde4:	10017458 	.word	0x10017458
1000fde8:	10017465 	.word	0x10017465
1000fdec:	10017493 	.word	0x10017493

1000fdf0 <malloc>:
1000fdf0:	4b02      	ldr	r3, [pc, #8]	; (1000fdfc <malloc+0xc>)
1000fdf2:	4601      	mov	r1, r0
1000fdf4:	6818      	ldr	r0, [r3, #0]
1000fdf6:	f000 b82b 	b.w	1000fe50 <_malloc_r>
1000fdfa:	bf00      	nop
1000fdfc:	10020bd0 	.word	0x10020bd0

1000fe00 <free>:
1000fe00:	4b02      	ldr	r3, [pc, #8]	; (1000fe0c <free+0xc>)
1000fe02:	4601      	mov	r1, r0
1000fe04:	6818      	ldr	r0, [r3, #0]
1000fe06:	f001 bdc1 	b.w	1001198c <_free_r>
1000fe0a:	bf00      	nop
1000fe0c:	10020bd0 	.word	0x10020bd0

1000fe10 <sbrk_aligned>:
1000fe10:	b570      	push	{r4, r5, r6, lr}
1000fe12:	4e0e      	ldr	r6, [pc, #56]	; (1000fe4c <sbrk_aligned+0x3c>)
1000fe14:	460c      	mov	r4, r1
1000fe16:	6831      	ldr	r1, [r6, #0]
1000fe18:	4605      	mov	r5, r0
1000fe1a:	b911      	cbnz	r1, 1000fe22 <sbrk_aligned+0x12>
1000fe1c:	f000 fed6 	bl	10010bcc <_sbrk_r>
1000fe20:	6030      	str	r0, [r6, #0]
1000fe22:	4621      	mov	r1, r4
1000fe24:	4628      	mov	r0, r5
1000fe26:	f000 fed1 	bl	10010bcc <_sbrk_r>
1000fe2a:	1c43      	adds	r3, r0, #1
1000fe2c:	d00a      	beq.n	1000fe44 <sbrk_aligned+0x34>
1000fe2e:	1cc4      	adds	r4, r0, #3
1000fe30:	f024 0403 	bic.w	r4, r4, #3
1000fe34:	42a0      	cmp	r0, r4
1000fe36:	d007      	beq.n	1000fe48 <sbrk_aligned+0x38>
1000fe38:	1a21      	subs	r1, r4, r0
1000fe3a:	4628      	mov	r0, r5
1000fe3c:	f000 fec6 	bl	10010bcc <_sbrk_r>
1000fe40:	3001      	adds	r0, #1
1000fe42:	d101      	bne.n	1000fe48 <sbrk_aligned+0x38>
1000fe44:	f04f 34ff 	mov.w	r4, #4294967295
1000fe48:	4620      	mov	r0, r4
1000fe4a:	bd70      	pop	{r4, r5, r6, pc}
1000fe4c:	10029d50 	.word	0x10029d50

1000fe50 <_malloc_r>:
1000fe50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1000fe54:	1ccd      	adds	r5, r1, #3
1000fe56:	f025 0503 	bic.w	r5, r5, #3
1000fe5a:	3508      	adds	r5, #8
1000fe5c:	2d0c      	cmp	r5, #12
1000fe5e:	bf38      	it	cc
1000fe60:	250c      	movcc	r5, #12
1000fe62:	2d00      	cmp	r5, #0
1000fe64:	4607      	mov	r7, r0
1000fe66:	db01      	blt.n	1000fe6c <_malloc_r+0x1c>
1000fe68:	42a9      	cmp	r1, r5
1000fe6a:	d905      	bls.n	1000fe78 <_malloc_r+0x28>
1000fe6c:	230c      	movs	r3, #12
1000fe6e:	603b      	str	r3, [r7, #0]
1000fe70:	2600      	movs	r6, #0
1000fe72:	4630      	mov	r0, r6
1000fe74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000fe78:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 1000ff4c <_malloc_r+0xfc>
1000fe7c:	f000 f868 	bl	1000ff50 <__malloc_lock>
1000fe80:	f8d8 3000 	ldr.w	r3, [r8]
1000fe84:	461c      	mov	r4, r3
1000fe86:	bb5c      	cbnz	r4, 1000fee0 <_malloc_r+0x90>
1000fe88:	4629      	mov	r1, r5
1000fe8a:	4638      	mov	r0, r7
1000fe8c:	f7ff ffc0 	bl	1000fe10 <sbrk_aligned>
1000fe90:	1c43      	adds	r3, r0, #1
1000fe92:	4604      	mov	r4, r0
1000fe94:	d155      	bne.n	1000ff42 <_malloc_r+0xf2>
1000fe96:	f8d8 4000 	ldr.w	r4, [r8]
1000fe9a:	4626      	mov	r6, r4
1000fe9c:	2e00      	cmp	r6, #0
1000fe9e:	d145      	bne.n	1000ff2c <_malloc_r+0xdc>
1000fea0:	2c00      	cmp	r4, #0
1000fea2:	d048      	beq.n	1000ff36 <_malloc_r+0xe6>
1000fea4:	6823      	ldr	r3, [r4, #0]
1000fea6:	4631      	mov	r1, r6
1000fea8:	4638      	mov	r0, r7
1000feaa:	eb04 0903 	add.w	r9, r4, r3
1000feae:	f000 fe8d 	bl	10010bcc <_sbrk_r>
1000feb2:	4581      	cmp	r9, r0
1000feb4:	d13f      	bne.n	1000ff36 <_malloc_r+0xe6>
1000feb6:	6821      	ldr	r1, [r4, #0]
1000feb8:	1a6d      	subs	r5, r5, r1
1000feba:	4629      	mov	r1, r5
1000febc:	4638      	mov	r0, r7
1000febe:	f7ff ffa7 	bl	1000fe10 <sbrk_aligned>
1000fec2:	3001      	adds	r0, #1
1000fec4:	d037      	beq.n	1000ff36 <_malloc_r+0xe6>
1000fec6:	6823      	ldr	r3, [r4, #0]
1000fec8:	442b      	add	r3, r5
1000feca:	6023      	str	r3, [r4, #0]
1000fecc:	f8d8 3000 	ldr.w	r3, [r8]
1000fed0:	2b00      	cmp	r3, #0
1000fed2:	d038      	beq.n	1000ff46 <_malloc_r+0xf6>
1000fed4:	685a      	ldr	r2, [r3, #4]
1000fed6:	42a2      	cmp	r2, r4
1000fed8:	d12b      	bne.n	1000ff32 <_malloc_r+0xe2>
1000feda:	2200      	movs	r2, #0
1000fedc:	605a      	str	r2, [r3, #4]
1000fede:	e00f      	b.n	1000ff00 <_malloc_r+0xb0>
1000fee0:	6822      	ldr	r2, [r4, #0]
1000fee2:	1b52      	subs	r2, r2, r5
1000fee4:	d41f      	bmi.n	1000ff26 <_malloc_r+0xd6>
1000fee6:	2a0b      	cmp	r2, #11
1000fee8:	d917      	bls.n	1000ff1a <_malloc_r+0xca>
1000feea:	1961      	adds	r1, r4, r5
1000feec:	42a3      	cmp	r3, r4
1000feee:	6025      	str	r5, [r4, #0]
1000fef0:	bf18      	it	ne
1000fef2:	6059      	strne	r1, [r3, #4]
1000fef4:	6863      	ldr	r3, [r4, #4]
1000fef6:	bf08      	it	eq
1000fef8:	f8c8 1000 	streq.w	r1, [r8]
1000fefc:	5162      	str	r2, [r4, r5]
1000fefe:	604b      	str	r3, [r1, #4]
1000ff00:	4638      	mov	r0, r7
1000ff02:	f104 060b 	add.w	r6, r4, #11
1000ff06:	f000 f829 	bl	1000ff5c <__malloc_unlock>
1000ff0a:	f026 0607 	bic.w	r6, r6, #7
1000ff0e:	1d23      	adds	r3, r4, #4
1000ff10:	1af2      	subs	r2, r6, r3
1000ff12:	d0ae      	beq.n	1000fe72 <_malloc_r+0x22>
1000ff14:	1b9b      	subs	r3, r3, r6
1000ff16:	50a3      	str	r3, [r4, r2]
1000ff18:	e7ab      	b.n	1000fe72 <_malloc_r+0x22>
1000ff1a:	42a3      	cmp	r3, r4
1000ff1c:	6862      	ldr	r2, [r4, #4]
1000ff1e:	d1dd      	bne.n	1000fedc <_malloc_r+0x8c>
1000ff20:	f8c8 2000 	str.w	r2, [r8]
1000ff24:	e7ec      	b.n	1000ff00 <_malloc_r+0xb0>
1000ff26:	4623      	mov	r3, r4
1000ff28:	6864      	ldr	r4, [r4, #4]
1000ff2a:	e7ac      	b.n	1000fe86 <_malloc_r+0x36>
1000ff2c:	4634      	mov	r4, r6
1000ff2e:	6876      	ldr	r6, [r6, #4]
1000ff30:	e7b4      	b.n	1000fe9c <_malloc_r+0x4c>
1000ff32:	4613      	mov	r3, r2
1000ff34:	e7cc      	b.n	1000fed0 <_malloc_r+0x80>
1000ff36:	230c      	movs	r3, #12
1000ff38:	603b      	str	r3, [r7, #0]
1000ff3a:	4638      	mov	r0, r7
1000ff3c:	f000 f80e 	bl	1000ff5c <__malloc_unlock>
1000ff40:	e797      	b.n	1000fe72 <_malloc_r+0x22>
1000ff42:	6025      	str	r5, [r4, #0]
1000ff44:	e7dc      	b.n	1000ff00 <_malloc_r+0xb0>
1000ff46:	605b      	str	r3, [r3, #4]
1000ff48:	deff      	udf	#255	; 0xff
1000ff4a:	bf00      	nop
1000ff4c:	10029d4c 	.word	0x10029d4c

1000ff50 <__malloc_lock>:
1000ff50:	4801      	ldr	r0, [pc, #4]	; (1000ff58 <__malloc_lock+0x8>)
1000ff52:	f000 be88 	b.w	10010c66 <__retarget_lock_acquire_recursive>
1000ff56:	bf00      	nop
1000ff58:	10029e94 	.word	0x10029e94

1000ff5c <__malloc_unlock>:
1000ff5c:	4801      	ldr	r0, [pc, #4]	; (1000ff64 <__malloc_unlock+0x8>)
1000ff5e:	f000 be83 	b.w	10010c68 <__retarget_lock_release_recursive>
1000ff62:	bf00      	nop
1000ff64:	10029e94 	.word	0x10029e94

1000ff68 <_realloc_r>:
1000ff68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000ff6c:	4680      	mov	r8, r0
1000ff6e:	4614      	mov	r4, r2
1000ff70:	460e      	mov	r6, r1
1000ff72:	b921      	cbnz	r1, 1000ff7e <_realloc_r+0x16>
1000ff74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1000ff78:	4611      	mov	r1, r2
1000ff7a:	f7ff bf69 	b.w	1000fe50 <_malloc_r>
1000ff7e:	b92a      	cbnz	r2, 1000ff8c <_realloc_r+0x24>
1000ff80:	f001 fd04 	bl	1001198c <_free_r>
1000ff84:	4625      	mov	r5, r4
1000ff86:	4628      	mov	r0, r5
1000ff88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000ff8c:	f002 f8c6 	bl	1001211c <_malloc_usable_size_r>
1000ff90:	4284      	cmp	r4, r0
1000ff92:	4607      	mov	r7, r0
1000ff94:	d802      	bhi.n	1000ff9c <_realloc_r+0x34>
1000ff96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
1000ff9a:	d812      	bhi.n	1000ffc2 <_realloc_r+0x5a>
1000ff9c:	4621      	mov	r1, r4
1000ff9e:	4640      	mov	r0, r8
1000ffa0:	f7ff ff56 	bl	1000fe50 <_malloc_r>
1000ffa4:	4605      	mov	r5, r0
1000ffa6:	2800      	cmp	r0, #0
1000ffa8:	d0ed      	beq.n	1000ff86 <_realloc_r+0x1e>
1000ffaa:	42bc      	cmp	r4, r7
1000ffac:	4622      	mov	r2, r4
1000ffae:	4631      	mov	r1, r6
1000ffb0:	bf28      	it	cs
1000ffb2:	463a      	movcs	r2, r7
1000ffb4:	f000 fe59 	bl	10010c6a <memcpy>
1000ffb8:	4631      	mov	r1, r6
1000ffba:	4640      	mov	r0, r8
1000ffbc:	f001 fce6 	bl	1001198c <_free_r>
1000ffc0:	e7e1      	b.n	1000ff86 <_realloc_r+0x1e>
1000ffc2:	4635      	mov	r5, r6
1000ffc4:	e7df      	b.n	1000ff86 <_realloc_r+0x1e>

1000ffc6 <__cvt>:
1000ffc6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
1000ffca:	ec55 4b10 	vmov	r4, r5, d0
1000ffce:	2d00      	cmp	r5, #0
1000ffd0:	460e      	mov	r6, r1
1000ffd2:	4619      	mov	r1, r3
1000ffd4:	462b      	mov	r3, r5
1000ffd6:	bfbb      	ittet	lt
1000ffd8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
1000ffdc:	461d      	movlt	r5, r3
1000ffde:	2300      	movge	r3, #0
1000ffe0:	232d      	movlt	r3, #45	; 0x2d
1000ffe2:	700b      	strb	r3, [r1, #0]
1000ffe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000ffe6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
1000ffea:	4691      	mov	r9, r2
1000ffec:	f023 0820 	bic.w	r8, r3, #32
1000fff0:	bfbc      	itt	lt
1000fff2:	4622      	movlt	r2, r4
1000fff4:	4614      	movlt	r4, r2
1000fff6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
1000fffa:	d005      	beq.n	10010008 <__cvt+0x42>
1000fffc:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
10010000:	d100      	bne.n	10010004 <__cvt+0x3e>
10010002:	3601      	adds	r6, #1
10010004:	2102      	movs	r1, #2
10010006:	e000      	b.n	1001000a <__cvt+0x44>
10010008:	2103      	movs	r1, #3
1001000a:	ab03      	add	r3, sp, #12
1001000c:	9301      	str	r3, [sp, #4]
1001000e:	ab02      	add	r3, sp, #8
10010010:	9300      	str	r3, [sp, #0]
10010012:	ec45 4b10 	vmov	d0, r4, r5
10010016:	4653      	mov	r3, sl
10010018:	4632      	mov	r2, r6
1001001a:	f000 fec5 	bl	10010da8 <_dtoa_r>
1001001e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
10010022:	4607      	mov	r7, r0
10010024:	d102      	bne.n	1001002c <__cvt+0x66>
10010026:	f019 0f01 	tst.w	r9, #1
1001002a:	d022      	beq.n	10010072 <__cvt+0xac>
1001002c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
10010030:	eb07 0906 	add.w	r9, r7, r6
10010034:	d110      	bne.n	10010058 <__cvt+0x92>
10010036:	783b      	ldrb	r3, [r7, #0]
10010038:	2b30      	cmp	r3, #48	; 0x30
1001003a:	d10a      	bne.n	10010052 <__cvt+0x8c>
1001003c:	2200      	movs	r2, #0
1001003e:	2300      	movs	r3, #0
10010040:	4620      	mov	r0, r4
10010042:	4629      	mov	r1, r5
10010044:	f7f0 fc88 	bl	10000958 <__aeabi_dcmpeq>
10010048:	b918      	cbnz	r0, 10010052 <__cvt+0x8c>
1001004a:	f1c6 0601 	rsb	r6, r6, #1
1001004e:	f8ca 6000 	str.w	r6, [sl]
10010052:	f8da 3000 	ldr.w	r3, [sl]
10010056:	4499      	add	r9, r3
10010058:	2200      	movs	r2, #0
1001005a:	2300      	movs	r3, #0
1001005c:	4620      	mov	r0, r4
1001005e:	4629      	mov	r1, r5
10010060:	f7f0 fc7a 	bl	10000958 <__aeabi_dcmpeq>
10010064:	b108      	cbz	r0, 1001006a <__cvt+0xa4>
10010066:	f8cd 900c 	str.w	r9, [sp, #12]
1001006a:	2230      	movs	r2, #48	; 0x30
1001006c:	9b03      	ldr	r3, [sp, #12]
1001006e:	454b      	cmp	r3, r9
10010070:	d307      	bcc.n	10010082 <__cvt+0xbc>
10010072:	9b03      	ldr	r3, [sp, #12]
10010074:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10010076:	1bdb      	subs	r3, r3, r7
10010078:	4638      	mov	r0, r7
1001007a:	6013      	str	r3, [r2, #0]
1001007c:	b004      	add	sp, #16
1001007e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10010082:	1c59      	adds	r1, r3, #1
10010084:	9103      	str	r1, [sp, #12]
10010086:	701a      	strb	r2, [r3, #0]
10010088:	e7f0      	b.n	1001006c <__cvt+0xa6>

1001008a <__exponent>:
1001008a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001008c:	4603      	mov	r3, r0
1001008e:	2900      	cmp	r1, #0
10010090:	bfb8      	it	lt
10010092:	4249      	neglt	r1, r1
10010094:	f803 2b02 	strb.w	r2, [r3], #2
10010098:	bfb4      	ite	lt
1001009a:	222d      	movlt	r2, #45	; 0x2d
1001009c:	222b      	movge	r2, #43	; 0x2b
1001009e:	2909      	cmp	r1, #9
100100a0:	7042      	strb	r2, [r0, #1]
100100a2:	dd2a      	ble.n	100100fa <__exponent+0x70>
100100a4:	f10d 0207 	add.w	r2, sp, #7
100100a8:	4617      	mov	r7, r2
100100aa:	260a      	movs	r6, #10
100100ac:	4694      	mov	ip, r2
100100ae:	fb91 f5f6 	sdiv	r5, r1, r6
100100b2:	fb06 1415 	mls	r4, r6, r5, r1
100100b6:	3430      	adds	r4, #48	; 0x30
100100b8:	f80c 4c01 	strb.w	r4, [ip, #-1]
100100bc:	460c      	mov	r4, r1
100100be:	2c63      	cmp	r4, #99	; 0x63
100100c0:	f102 32ff 	add.w	r2, r2, #4294967295
100100c4:	4629      	mov	r1, r5
100100c6:	dcf1      	bgt.n	100100ac <__exponent+0x22>
100100c8:	3130      	adds	r1, #48	; 0x30
100100ca:	f1ac 0402 	sub.w	r4, ip, #2
100100ce:	f802 1c01 	strb.w	r1, [r2, #-1]
100100d2:	1c41      	adds	r1, r0, #1
100100d4:	4622      	mov	r2, r4
100100d6:	42ba      	cmp	r2, r7
100100d8:	d30a      	bcc.n	100100f0 <__exponent+0x66>
100100da:	f10d 0209 	add.w	r2, sp, #9
100100de:	eba2 020c 	sub.w	r2, r2, ip
100100e2:	42bc      	cmp	r4, r7
100100e4:	bf88      	it	hi
100100e6:	2200      	movhi	r2, #0
100100e8:	4413      	add	r3, r2
100100ea:	1a18      	subs	r0, r3, r0
100100ec:	b003      	add	sp, #12
100100ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
100100f0:	f812 5b01 	ldrb.w	r5, [r2], #1
100100f4:	f801 5f01 	strb.w	r5, [r1, #1]!
100100f8:	e7ed      	b.n	100100d6 <__exponent+0x4c>
100100fa:	2330      	movs	r3, #48	; 0x30
100100fc:	3130      	adds	r1, #48	; 0x30
100100fe:	7083      	strb	r3, [r0, #2]
10010100:	70c1      	strb	r1, [r0, #3]
10010102:	1d03      	adds	r3, r0, #4
10010104:	e7f1      	b.n	100100ea <__exponent+0x60>
	...

10010108 <_printf_float>:
10010108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1001010c:	ed2d 8b02 	vpush	{d8}
10010110:	b08d      	sub	sp, #52	; 0x34
10010112:	460c      	mov	r4, r1
10010114:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
10010118:	4616      	mov	r6, r2
1001011a:	461f      	mov	r7, r3
1001011c:	4605      	mov	r5, r0
1001011e:	f000 fd1d 	bl	10010b5c <_localeconv_r>
10010122:	f8d0 a000 	ldr.w	sl, [r0]
10010126:	4650      	mov	r0, sl
10010128:	f7ef ffea 	bl	10000100 <strlen>
1001012c:	2300      	movs	r3, #0
1001012e:	930a      	str	r3, [sp, #40]	; 0x28
10010130:	6823      	ldr	r3, [r4, #0]
10010132:	9305      	str	r3, [sp, #20]
10010134:	f8d8 3000 	ldr.w	r3, [r8]
10010138:	f894 b018 	ldrb.w	fp, [r4, #24]
1001013c:	3307      	adds	r3, #7
1001013e:	f023 0307 	bic.w	r3, r3, #7
10010142:	f103 0208 	add.w	r2, r3, #8
10010146:	f8c8 2000 	str.w	r2, [r8]
1001014a:	e9d3 8900 	ldrd	r8, r9, [r3]
1001014e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
10010152:	9307      	str	r3, [sp, #28]
10010154:	f8cd 8018 	str.w	r8, [sp, #24]
10010158:	ee08 0a10 	vmov	s16, r0
1001015c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
10010160:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
10010164:	4b9e      	ldr	r3, [pc, #632]	; (100103e0 <_printf_float+0x2d8>)
10010166:	f04f 32ff 	mov.w	r2, #4294967295
1001016a:	f7f0 fc27 	bl	100009bc <__aeabi_dcmpun>
1001016e:	bb88      	cbnz	r0, 100101d4 <_printf_float+0xcc>
10010170:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
10010174:	4b9a      	ldr	r3, [pc, #616]	; (100103e0 <_printf_float+0x2d8>)
10010176:	f04f 32ff 	mov.w	r2, #4294967295
1001017a:	f7f0 fc01 	bl	10000980 <__aeabi_dcmple>
1001017e:	bb48      	cbnz	r0, 100101d4 <_printf_float+0xcc>
10010180:	2200      	movs	r2, #0
10010182:	2300      	movs	r3, #0
10010184:	4640      	mov	r0, r8
10010186:	4649      	mov	r1, r9
10010188:	f7f0 fbf0 	bl	1000096c <__aeabi_dcmplt>
1001018c:	b110      	cbz	r0, 10010194 <_printf_float+0x8c>
1001018e:	232d      	movs	r3, #45	; 0x2d
10010190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
10010194:	4a93      	ldr	r2, [pc, #588]	; (100103e4 <_printf_float+0x2dc>)
10010196:	4b94      	ldr	r3, [pc, #592]	; (100103e8 <_printf_float+0x2e0>)
10010198:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
1001019c:	bf94      	ite	ls
1001019e:	4690      	movls	r8, r2
100101a0:	4698      	movhi	r8, r3
100101a2:	2303      	movs	r3, #3
100101a4:	6123      	str	r3, [r4, #16]
100101a6:	9b05      	ldr	r3, [sp, #20]
100101a8:	f023 0304 	bic.w	r3, r3, #4
100101ac:	6023      	str	r3, [r4, #0]
100101ae:	f04f 0900 	mov.w	r9, #0
100101b2:	9700      	str	r7, [sp, #0]
100101b4:	4633      	mov	r3, r6
100101b6:	aa0b      	add	r2, sp, #44	; 0x2c
100101b8:	4621      	mov	r1, r4
100101ba:	4628      	mov	r0, r5
100101bc:	f000 f9da 	bl	10010574 <_printf_common>
100101c0:	3001      	adds	r0, #1
100101c2:	f040 8090 	bne.w	100102e6 <_printf_float+0x1de>
100101c6:	f04f 30ff 	mov.w	r0, #4294967295
100101ca:	b00d      	add	sp, #52	; 0x34
100101cc:	ecbd 8b02 	vpop	{d8}
100101d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
100101d4:	4642      	mov	r2, r8
100101d6:	464b      	mov	r3, r9
100101d8:	4640      	mov	r0, r8
100101da:	4649      	mov	r1, r9
100101dc:	f7f0 fbee 	bl	100009bc <__aeabi_dcmpun>
100101e0:	b140      	cbz	r0, 100101f4 <_printf_float+0xec>
100101e2:	464b      	mov	r3, r9
100101e4:	2b00      	cmp	r3, #0
100101e6:	bfbc      	itt	lt
100101e8:	232d      	movlt	r3, #45	; 0x2d
100101ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
100101ee:	4a7f      	ldr	r2, [pc, #508]	; (100103ec <_printf_float+0x2e4>)
100101f0:	4b7f      	ldr	r3, [pc, #508]	; (100103f0 <_printf_float+0x2e8>)
100101f2:	e7d1      	b.n	10010198 <_printf_float+0x90>
100101f4:	6863      	ldr	r3, [r4, #4]
100101f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
100101fa:	9206      	str	r2, [sp, #24]
100101fc:	1c5a      	adds	r2, r3, #1
100101fe:	d13f      	bne.n	10010280 <_printf_float+0x178>
10010200:	2306      	movs	r3, #6
10010202:	6063      	str	r3, [r4, #4]
10010204:	9b05      	ldr	r3, [sp, #20]
10010206:	6861      	ldr	r1, [r4, #4]
10010208:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
1001020c:	2300      	movs	r3, #0
1001020e:	9303      	str	r3, [sp, #12]
10010210:	ab0a      	add	r3, sp, #40	; 0x28
10010212:	e9cd b301 	strd	fp, r3, [sp, #4]
10010216:	ab09      	add	r3, sp, #36	; 0x24
10010218:	ec49 8b10 	vmov	d0, r8, r9
1001021c:	9300      	str	r3, [sp, #0]
1001021e:	6022      	str	r2, [r4, #0]
10010220:	f10d 0323 	add.w	r3, sp, #35	; 0x23
10010224:	4628      	mov	r0, r5
10010226:	f7ff fece 	bl	1000ffc6 <__cvt>
1001022a:	9b06      	ldr	r3, [sp, #24]
1001022c:	9909      	ldr	r1, [sp, #36]	; 0x24
1001022e:	2b47      	cmp	r3, #71	; 0x47
10010230:	4680      	mov	r8, r0
10010232:	d108      	bne.n	10010246 <_printf_float+0x13e>
10010234:	1cc8      	adds	r0, r1, #3
10010236:	db02      	blt.n	1001023e <_printf_float+0x136>
10010238:	6863      	ldr	r3, [r4, #4]
1001023a:	4299      	cmp	r1, r3
1001023c:	dd41      	ble.n	100102c2 <_printf_float+0x1ba>
1001023e:	f1ab 0302 	sub.w	r3, fp, #2
10010242:	fa5f fb83 	uxtb.w	fp, r3
10010246:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
1001024a:	d820      	bhi.n	1001028e <_printf_float+0x186>
1001024c:	3901      	subs	r1, #1
1001024e:	465a      	mov	r2, fp
10010250:	f104 0050 	add.w	r0, r4, #80	; 0x50
10010254:	9109      	str	r1, [sp, #36]	; 0x24
10010256:	f7ff ff18 	bl	1001008a <__exponent>
1001025a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1001025c:	1813      	adds	r3, r2, r0
1001025e:	2a01      	cmp	r2, #1
10010260:	4681      	mov	r9, r0
10010262:	6123      	str	r3, [r4, #16]
10010264:	dc02      	bgt.n	1001026c <_printf_float+0x164>
10010266:	6822      	ldr	r2, [r4, #0]
10010268:	07d2      	lsls	r2, r2, #31
1001026a:	d501      	bpl.n	10010270 <_printf_float+0x168>
1001026c:	3301      	adds	r3, #1
1001026e:	6123      	str	r3, [r4, #16]
10010270:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
10010274:	2b00      	cmp	r3, #0
10010276:	d09c      	beq.n	100101b2 <_printf_float+0xaa>
10010278:	232d      	movs	r3, #45	; 0x2d
1001027a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1001027e:	e798      	b.n	100101b2 <_printf_float+0xaa>
10010280:	9a06      	ldr	r2, [sp, #24]
10010282:	2a47      	cmp	r2, #71	; 0x47
10010284:	d1be      	bne.n	10010204 <_printf_float+0xfc>
10010286:	2b00      	cmp	r3, #0
10010288:	d1bc      	bne.n	10010204 <_printf_float+0xfc>
1001028a:	2301      	movs	r3, #1
1001028c:	e7b9      	b.n	10010202 <_printf_float+0xfa>
1001028e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
10010292:	d118      	bne.n	100102c6 <_printf_float+0x1be>
10010294:	2900      	cmp	r1, #0
10010296:	6863      	ldr	r3, [r4, #4]
10010298:	dd0b      	ble.n	100102b2 <_printf_float+0x1aa>
1001029a:	6121      	str	r1, [r4, #16]
1001029c:	b913      	cbnz	r3, 100102a4 <_printf_float+0x19c>
1001029e:	6822      	ldr	r2, [r4, #0]
100102a0:	07d0      	lsls	r0, r2, #31
100102a2:	d502      	bpl.n	100102aa <_printf_float+0x1a2>
100102a4:	3301      	adds	r3, #1
100102a6:	440b      	add	r3, r1
100102a8:	6123      	str	r3, [r4, #16]
100102aa:	65a1      	str	r1, [r4, #88]	; 0x58
100102ac:	f04f 0900 	mov.w	r9, #0
100102b0:	e7de      	b.n	10010270 <_printf_float+0x168>
100102b2:	b913      	cbnz	r3, 100102ba <_printf_float+0x1b2>
100102b4:	6822      	ldr	r2, [r4, #0]
100102b6:	07d2      	lsls	r2, r2, #31
100102b8:	d501      	bpl.n	100102be <_printf_float+0x1b6>
100102ba:	3302      	adds	r3, #2
100102bc:	e7f4      	b.n	100102a8 <_printf_float+0x1a0>
100102be:	2301      	movs	r3, #1
100102c0:	e7f2      	b.n	100102a8 <_printf_float+0x1a0>
100102c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
100102c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100102c8:	4299      	cmp	r1, r3
100102ca:	db05      	blt.n	100102d8 <_printf_float+0x1d0>
100102cc:	6823      	ldr	r3, [r4, #0]
100102ce:	6121      	str	r1, [r4, #16]
100102d0:	07d8      	lsls	r0, r3, #31
100102d2:	d5ea      	bpl.n	100102aa <_printf_float+0x1a2>
100102d4:	1c4b      	adds	r3, r1, #1
100102d6:	e7e7      	b.n	100102a8 <_printf_float+0x1a0>
100102d8:	2900      	cmp	r1, #0
100102da:	bfd4      	ite	le
100102dc:	f1c1 0202 	rsble	r2, r1, #2
100102e0:	2201      	movgt	r2, #1
100102e2:	4413      	add	r3, r2
100102e4:	e7e0      	b.n	100102a8 <_printf_float+0x1a0>
100102e6:	6823      	ldr	r3, [r4, #0]
100102e8:	055a      	lsls	r2, r3, #21
100102ea:	d407      	bmi.n	100102fc <_printf_float+0x1f4>
100102ec:	6923      	ldr	r3, [r4, #16]
100102ee:	4642      	mov	r2, r8
100102f0:	4631      	mov	r1, r6
100102f2:	4628      	mov	r0, r5
100102f4:	47b8      	blx	r7
100102f6:	3001      	adds	r0, #1
100102f8:	d12c      	bne.n	10010354 <_printf_float+0x24c>
100102fa:	e764      	b.n	100101c6 <_printf_float+0xbe>
100102fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
10010300:	f240 80e0 	bls.w	100104c4 <_printf_float+0x3bc>
10010304:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
10010308:	2200      	movs	r2, #0
1001030a:	2300      	movs	r3, #0
1001030c:	f7f0 fb24 	bl	10000958 <__aeabi_dcmpeq>
10010310:	2800      	cmp	r0, #0
10010312:	d034      	beq.n	1001037e <_printf_float+0x276>
10010314:	4a37      	ldr	r2, [pc, #220]	; (100103f4 <_printf_float+0x2ec>)
10010316:	2301      	movs	r3, #1
10010318:	4631      	mov	r1, r6
1001031a:	4628      	mov	r0, r5
1001031c:	47b8      	blx	r7
1001031e:	3001      	adds	r0, #1
10010320:	f43f af51 	beq.w	100101c6 <_printf_float+0xbe>
10010324:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
10010328:	429a      	cmp	r2, r3
1001032a:	db02      	blt.n	10010332 <_printf_float+0x22a>
1001032c:	6823      	ldr	r3, [r4, #0]
1001032e:	07d8      	lsls	r0, r3, #31
10010330:	d510      	bpl.n	10010354 <_printf_float+0x24c>
10010332:	ee18 3a10 	vmov	r3, s16
10010336:	4652      	mov	r2, sl
10010338:	4631      	mov	r1, r6
1001033a:	4628      	mov	r0, r5
1001033c:	47b8      	blx	r7
1001033e:	3001      	adds	r0, #1
10010340:	f43f af41 	beq.w	100101c6 <_printf_float+0xbe>
10010344:	f04f 0800 	mov.w	r8, #0
10010348:	f104 091a 	add.w	r9, r4, #26
1001034c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1001034e:	3b01      	subs	r3, #1
10010350:	4543      	cmp	r3, r8
10010352:	dc09      	bgt.n	10010368 <_printf_float+0x260>
10010354:	6823      	ldr	r3, [r4, #0]
10010356:	079b      	lsls	r3, r3, #30
10010358:	f100 8107 	bmi.w	1001056a <_printf_float+0x462>
1001035c:	68e0      	ldr	r0, [r4, #12]
1001035e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10010360:	4298      	cmp	r0, r3
10010362:	bfb8      	it	lt
10010364:	4618      	movlt	r0, r3
10010366:	e730      	b.n	100101ca <_printf_float+0xc2>
10010368:	2301      	movs	r3, #1
1001036a:	464a      	mov	r2, r9
1001036c:	4631      	mov	r1, r6
1001036e:	4628      	mov	r0, r5
10010370:	47b8      	blx	r7
10010372:	3001      	adds	r0, #1
10010374:	f43f af27 	beq.w	100101c6 <_printf_float+0xbe>
10010378:	f108 0801 	add.w	r8, r8, #1
1001037c:	e7e6      	b.n	1001034c <_printf_float+0x244>
1001037e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10010380:	2b00      	cmp	r3, #0
10010382:	dc39      	bgt.n	100103f8 <_printf_float+0x2f0>
10010384:	4a1b      	ldr	r2, [pc, #108]	; (100103f4 <_printf_float+0x2ec>)
10010386:	2301      	movs	r3, #1
10010388:	4631      	mov	r1, r6
1001038a:	4628      	mov	r0, r5
1001038c:	47b8      	blx	r7
1001038e:	3001      	adds	r0, #1
10010390:	f43f af19 	beq.w	100101c6 <_printf_float+0xbe>
10010394:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
10010398:	4313      	orrs	r3, r2
1001039a:	d102      	bne.n	100103a2 <_printf_float+0x29a>
1001039c:	6823      	ldr	r3, [r4, #0]
1001039e:	07d9      	lsls	r1, r3, #31
100103a0:	d5d8      	bpl.n	10010354 <_printf_float+0x24c>
100103a2:	ee18 3a10 	vmov	r3, s16
100103a6:	4652      	mov	r2, sl
100103a8:	4631      	mov	r1, r6
100103aa:	4628      	mov	r0, r5
100103ac:	47b8      	blx	r7
100103ae:	3001      	adds	r0, #1
100103b0:	f43f af09 	beq.w	100101c6 <_printf_float+0xbe>
100103b4:	f04f 0900 	mov.w	r9, #0
100103b8:	f104 0a1a 	add.w	sl, r4, #26
100103bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
100103be:	425b      	negs	r3, r3
100103c0:	454b      	cmp	r3, r9
100103c2:	dc01      	bgt.n	100103c8 <_printf_float+0x2c0>
100103c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100103c6:	e792      	b.n	100102ee <_printf_float+0x1e6>
100103c8:	2301      	movs	r3, #1
100103ca:	4652      	mov	r2, sl
100103cc:	4631      	mov	r1, r6
100103ce:	4628      	mov	r0, r5
100103d0:	47b8      	blx	r7
100103d2:	3001      	adds	r0, #1
100103d4:	f43f aef7 	beq.w	100101c6 <_printf_float+0xbe>
100103d8:	f109 0901 	add.w	r9, r9, #1
100103dc:	e7ee      	b.n	100103bc <_printf_float+0x2b4>
100103de:	bf00      	nop
100103e0:	7fefffff 	.word	0x7fefffff
100103e4:	10017494 	.word	0x10017494
100103e8:	10017498 	.word	0x10017498
100103ec:	1001749c 	.word	0x1001749c
100103f0:	100174a0 	.word	0x100174a0
100103f4:	100174a4 	.word	0x100174a4
100103f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100103fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
100103fc:	429a      	cmp	r2, r3
100103fe:	bfa8      	it	ge
10010400:	461a      	movge	r2, r3
10010402:	2a00      	cmp	r2, #0
10010404:	4691      	mov	r9, r2
10010406:	dc37      	bgt.n	10010478 <_printf_float+0x370>
10010408:	f04f 0b00 	mov.w	fp, #0
1001040c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
10010410:	f104 021a 	add.w	r2, r4, #26
10010414:	6da3      	ldr	r3, [r4, #88]	; 0x58
10010416:	9305      	str	r3, [sp, #20]
10010418:	eba3 0309 	sub.w	r3, r3, r9
1001041c:	455b      	cmp	r3, fp
1001041e:	dc33      	bgt.n	10010488 <_printf_float+0x380>
10010420:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
10010424:	429a      	cmp	r2, r3
10010426:	db3b      	blt.n	100104a0 <_printf_float+0x398>
10010428:	6823      	ldr	r3, [r4, #0]
1001042a:	07da      	lsls	r2, r3, #31
1001042c:	d438      	bmi.n	100104a0 <_printf_float+0x398>
1001042e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
10010432:	eba2 0903 	sub.w	r9, r2, r3
10010436:	9b05      	ldr	r3, [sp, #20]
10010438:	1ad2      	subs	r2, r2, r3
1001043a:	4591      	cmp	r9, r2
1001043c:	bfa8      	it	ge
1001043e:	4691      	movge	r9, r2
10010440:	f1b9 0f00 	cmp.w	r9, #0
10010444:	dc35      	bgt.n	100104b2 <_printf_float+0x3aa>
10010446:	f04f 0800 	mov.w	r8, #0
1001044a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
1001044e:	f104 0a1a 	add.w	sl, r4, #26
10010452:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
10010456:	1a9b      	subs	r3, r3, r2
10010458:	eba3 0309 	sub.w	r3, r3, r9
1001045c:	4543      	cmp	r3, r8
1001045e:	f77f af79 	ble.w	10010354 <_printf_float+0x24c>
10010462:	2301      	movs	r3, #1
10010464:	4652      	mov	r2, sl
10010466:	4631      	mov	r1, r6
10010468:	4628      	mov	r0, r5
1001046a:	47b8      	blx	r7
1001046c:	3001      	adds	r0, #1
1001046e:	f43f aeaa 	beq.w	100101c6 <_printf_float+0xbe>
10010472:	f108 0801 	add.w	r8, r8, #1
10010476:	e7ec      	b.n	10010452 <_printf_float+0x34a>
10010478:	4613      	mov	r3, r2
1001047a:	4631      	mov	r1, r6
1001047c:	4642      	mov	r2, r8
1001047e:	4628      	mov	r0, r5
10010480:	47b8      	blx	r7
10010482:	3001      	adds	r0, #1
10010484:	d1c0      	bne.n	10010408 <_printf_float+0x300>
10010486:	e69e      	b.n	100101c6 <_printf_float+0xbe>
10010488:	2301      	movs	r3, #1
1001048a:	4631      	mov	r1, r6
1001048c:	4628      	mov	r0, r5
1001048e:	9205      	str	r2, [sp, #20]
10010490:	47b8      	blx	r7
10010492:	3001      	adds	r0, #1
10010494:	f43f ae97 	beq.w	100101c6 <_printf_float+0xbe>
10010498:	9a05      	ldr	r2, [sp, #20]
1001049a:	f10b 0b01 	add.w	fp, fp, #1
1001049e:	e7b9      	b.n	10010414 <_printf_float+0x30c>
100104a0:	ee18 3a10 	vmov	r3, s16
100104a4:	4652      	mov	r2, sl
100104a6:	4631      	mov	r1, r6
100104a8:	4628      	mov	r0, r5
100104aa:	47b8      	blx	r7
100104ac:	3001      	adds	r0, #1
100104ae:	d1be      	bne.n	1001042e <_printf_float+0x326>
100104b0:	e689      	b.n	100101c6 <_printf_float+0xbe>
100104b2:	9a05      	ldr	r2, [sp, #20]
100104b4:	464b      	mov	r3, r9
100104b6:	4442      	add	r2, r8
100104b8:	4631      	mov	r1, r6
100104ba:	4628      	mov	r0, r5
100104bc:	47b8      	blx	r7
100104be:	3001      	adds	r0, #1
100104c0:	d1c1      	bne.n	10010446 <_printf_float+0x33e>
100104c2:	e680      	b.n	100101c6 <_printf_float+0xbe>
100104c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100104c6:	2a01      	cmp	r2, #1
100104c8:	dc01      	bgt.n	100104ce <_printf_float+0x3c6>
100104ca:	07db      	lsls	r3, r3, #31
100104cc:	d53a      	bpl.n	10010544 <_printf_float+0x43c>
100104ce:	2301      	movs	r3, #1
100104d0:	4642      	mov	r2, r8
100104d2:	4631      	mov	r1, r6
100104d4:	4628      	mov	r0, r5
100104d6:	47b8      	blx	r7
100104d8:	3001      	adds	r0, #1
100104da:	f43f ae74 	beq.w	100101c6 <_printf_float+0xbe>
100104de:	ee18 3a10 	vmov	r3, s16
100104e2:	4652      	mov	r2, sl
100104e4:	4631      	mov	r1, r6
100104e6:	4628      	mov	r0, r5
100104e8:	47b8      	blx	r7
100104ea:	3001      	adds	r0, #1
100104ec:	f43f ae6b 	beq.w	100101c6 <_printf_float+0xbe>
100104f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
100104f4:	2200      	movs	r2, #0
100104f6:	2300      	movs	r3, #0
100104f8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
100104fc:	f7f0 fa2c 	bl	10000958 <__aeabi_dcmpeq>
10010500:	b9d8      	cbnz	r0, 1001053a <_printf_float+0x432>
10010502:	f10a 33ff 	add.w	r3, sl, #4294967295
10010506:	f108 0201 	add.w	r2, r8, #1
1001050a:	4631      	mov	r1, r6
1001050c:	4628      	mov	r0, r5
1001050e:	47b8      	blx	r7
10010510:	3001      	adds	r0, #1
10010512:	d10e      	bne.n	10010532 <_printf_float+0x42a>
10010514:	e657      	b.n	100101c6 <_printf_float+0xbe>
10010516:	2301      	movs	r3, #1
10010518:	4652      	mov	r2, sl
1001051a:	4631      	mov	r1, r6
1001051c:	4628      	mov	r0, r5
1001051e:	47b8      	blx	r7
10010520:	3001      	adds	r0, #1
10010522:	f43f ae50 	beq.w	100101c6 <_printf_float+0xbe>
10010526:	f108 0801 	add.w	r8, r8, #1
1001052a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1001052c:	3b01      	subs	r3, #1
1001052e:	4543      	cmp	r3, r8
10010530:	dcf1      	bgt.n	10010516 <_printf_float+0x40e>
10010532:	464b      	mov	r3, r9
10010534:	f104 0250 	add.w	r2, r4, #80	; 0x50
10010538:	e6da      	b.n	100102f0 <_printf_float+0x1e8>
1001053a:	f04f 0800 	mov.w	r8, #0
1001053e:	f104 0a1a 	add.w	sl, r4, #26
10010542:	e7f2      	b.n	1001052a <_printf_float+0x422>
10010544:	2301      	movs	r3, #1
10010546:	4642      	mov	r2, r8
10010548:	e7df      	b.n	1001050a <_printf_float+0x402>
1001054a:	2301      	movs	r3, #1
1001054c:	464a      	mov	r2, r9
1001054e:	4631      	mov	r1, r6
10010550:	4628      	mov	r0, r5
10010552:	47b8      	blx	r7
10010554:	3001      	adds	r0, #1
10010556:	f43f ae36 	beq.w	100101c6 <_printf_float+0xbe>
1001055a:	f108 0801 	add.w	r8, r8, #1
1001055e:	68e3      	ldr	r3, [r4, #12]
10010560:	990b      	ldr	r1, [sp, #44]	; 0x2c
10010562:	1a5b      	subs	r3, r3, r1
10010564:	4543      	cmp	r3, r8
10010566:	dcf0      	bgt.n	1001054a <_printf_float+0x442>
10010568:	e6f8      	b.n	1001035c <_printf_float+0x254>
1001056a:	f04f 0800 	mov.w	r8, #0
1001056e:	f104 0919 	add.w	r9, r4, #25
10010572:	e7f4      	b.n	1001055e <_printf_float+0x456>

10010574 <_printf_common>:
10010574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10010578:	4616      	mov	r6, r2
1001057a:	4699      	mov	r9, r3
1001057c:	688a      	ldr	r2, [r1, #8]
1001057e:	690b      	ldr	r3, [r1, #16]
10010580:	f8dd 8020 	ldr.w	r8, [sp, #32]
10010584:	4293      	cmp	r3, r2
10010586:	bfb8      	it	lt
10010588:	4613      	movlt	r3, r2
1001058a:	6033      	str	r3, [r6, #0]
1001058c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
10010590:	4607      	mov	r7, r0
10010592:	460c      	mov	r4, r1
10010594:	b10a      	cbz	r2, 1001059a <_printf_common+0x26>
10010596:	3301      	adds	r3, #1
10010598:	6033      	str	r3, [r6, #0]
1001059a:	6823      	ldr	r3, [r4, #0]
1001059c:	0699      	lsls	r1, r3, #26
1001059e:	bf42      	ittt	mi
100105a0:	6833      	ldrmi	r3, [r6, #0]
100105a2:	3302      	addmi	r3, #2
100105a4:	6033      	strmi	r3, [r6, #0]
100105a6:	6825      	ldr	r5, [r4, #0]
100105a8:	f015 0506 	ands.w	r5, r5, #6
100105ac:	d106      	bne.n	100105bc <_printf_common+0x48>
100105ae:	f104 0a19 	add.w	sl, r4, #25
100105b2:	68e3      	ldr	r3, [r4, #12]
100105b4:	6832      	ldr	r2, [r6, #0]
100105b6:	1a9b      	subs	r3, r3, r2
100105b8:	42ab      	cmp	r3, r5
100105ba:	dc26      	bgt.n	1001060a <_printf_common+0x96>
100105bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
100105c0:	1e13      	subs	r3, r2, #0
100105c2:	6822      	ldr	r2, [r4, #0]
100105c4:	bf18      	it	ne
100105c6:	2301      	movne	r3, #1
100105c8:	0692      	lsls	r2, r2, #26
100105ca:	d42b      	bmi.n	10010624 <_printf_common+0xb0>
100105cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
100105d0:	4649      	mov	r1, r9
100105d2:	4638      	mov	r0, r7
100105d4:	47c0      	blx	r8
100105d6:	3001      	adds	r0, #1
100105d8:	d01e      	beq.n	10010618 <_printf_common+0xa4>
100105da:	6823      	ldr	r3, [r4, #0]
100105dc:	6922      	ldr	r2, [r4, #16]
100105de:	f003 0306 	and.w	r3, r3, #6
100105e2:	2b04      	cmp	r3, #4
100105e4:	bf02      	ittt	eq
100105e6:	68e5      	ldreq	r5, [r4, #12]
100105e8:	6833      	ldreq	r3, [r6, #0]
100105ea:	1aed      	subeq	r5, r5, r3
100105ec:	68a3      	ldr	r3, [r4, #8]
100105ee:	bf0c      	ite	eq
100105f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
100105f4:	2500      	movne	r5, #0
100105f6:	4293      	cmp	r3, r2
100105f8:	bfc4      	itt	gt
100105fa:	1a9b      	subgt	r3, r3, r2
100105fc:	18ed      	addgt	r5, r5, r3
100105fe:	2600      	movs	r6, #0
10010600:	341a      	adds	r4, #26
10010602:	42b5      	cmp	r5, r6
10010604:	d11a      	bne.n	1001063c <_printf_common+0xc8>
10010606:	2000      	movs	r0, #0
10010608:	e008      	b.n	1001061c <_printf_common+0xa8>
1001060a:	2301      	movs	r3, #1
1001060c:	4652      	mov	r2, sl
1001060e:	4649      	mov	r1, r9
10010610:	4638      	mov	r0, r7
10010612:	47c0      	blx	r8
10010614:	3001      	adds	r0, #1
10010616:	d103      	bne.n	10010620 <_printf_common+0xac>
10010618:	f04f 30ff 	mov.w	r0, #4294967295
1001061c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10010620:	3501      	adds	r5, #1
10010622:	e7c6      	b.n	100105b2 <_printf_common+0x3e>
10010624:	18e1      	adds	r1, r4, r3
10010626:	1c5a      	adds	r2, r3, #1
10010628:	2030      	movs	r0, #48	; 0x30
1001062a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1001062e:	4422      	add	r2, r4
10010630:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
10010634:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
10010638:	3302      	adds	r3, #2
1001063a:	e7c7      	b.n	100105cc <_printf_common+0x58>
1001063c:	2301      	movs	r3, #1
1001063e:	4622      	mov	r2, r4
10010640:	4649      	mov	r1, r9
10010642:	4638      	mov	r0, r7
10010644:	47c0      	blx	r8
10010646:	3001      	adds	r0, #1
10010648:	d0e6      	beq.n	10010618 <_printf_common+0xa4>
1001064a:	3601      	adds	r6, #1
1001064c:	e7d9      	b.n	10010602 <_printf_common+0x8e>
	...

10010650 <_printf_i>:
10010650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
10010654:	7e0f      	ldrb	r7, [r1, #24]
10010656:	9d0c      	ldr	r5, [sp, #48]	; 0x30
10010658:	2f78      	cmp	r7, #120	; 0x78
1001065a:	4691      	mov	r9, r2
1001065c:	4680      	mov	r8, r0
1001065e:	460c      	mov	r4, r1
10010660:	469a      	mov	sl, r3
10010662:	f101 0243 	add.w	r2, r1, #67	; 0x43
10010666:	d807      	bhi.n	10010678 <_printf_i+0x28>
10010668:	2f62      	cmp	r7, #98	; 0x62
1001066a:	d80a      	bhi.n	10010682 <_printf_i+0x32>
1001066c:	2f00      	cmp	r7, #0
1001066e:	f000 80d4 	beq.w	1001081a <_printf_i+0x1ca>
10010672:	2f58      	cmp	r7, #88	; 0x58
10010674:	f000 80c0 	beq.w	100107f8 <_printf_i+0x1a8>
10010678:	f104 0542 	add.w	r5, r4, #66	; 0x42
1001067c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
10010680:	e03a      	b.n	100106f8 <_printf_i+0xa8>
10010682:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
10010686:	2b15      	cmp	r3, #21
10010688:	d8f6      	bhi.n	10010678 <_printf_i+0x28>
1001068a:	a101      	add	r1, pc, #4	; (adr r1, 10010690 <_printf_i+0x40>)
1001068c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
10010690:	100106e9 	.word	0x100106e9
10010694:	100106fd 	.word	0x100106fd
10010698:	10010679 	.word	0x10010679
1001069c:	10010679 	.word	0x10010679
100106a0:	10010679 	.word	0x10010679
100106a4:	10010679 	.word	0x10010679
100106a8:	100106fd 	.word	0x100106fd
100106ac:	10010679 	.word	0x10010679
100106b0:	10010679 	.word	0x10010679
100106b4:	10010679 	.word	0x10010679
100106b8:	10010679 	.word	0x10010679
100106bc:	10010801 	.word	0x10010801
100106c0:	10010729 	.word	0x10010729
100106c4:	100107bb 	.word	0x100107bb
100106c8:	10010679 	.word	0x10010679
100106cc:	10010679 	.word	0x10010679
100106d0:	10010823 	.word	0x10010823
100106d4:	10010679 	.word	0x10010679
100106d8:	10010729 	.word	0x10010729
100106dc:	10010679 	.word	0x10010679
100106e0:	10010679 	.word	0x10010679
100106e4:	100107c3 	.word	0x100107c3
100106e8:	682b      	ldr	r3, [r5, #0]
100106ea:	1d1a      	adds	r2, r3, #4
100106ec:	681b      	ldr	r3, [r3, #0]
100106ee:	602a      	str	r2, [r5, #0]
100106f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
100106f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
100106f8:	2301      	movs	r3, #1
100106fa:	e09f      	b.n	1001083c <_printf_i+0x1ec>
100106fc:	6820      	ldr	r0, [r4, #0]
100106fe:	682b      	ldr	r3, [r5, #0]
10010700:	0607      	lsls	r7, r0, #24
10010702:	f103 0104 	add.w	r1, r3, #4
10010706:	6029      	str	r1, [r5, #0]
10010708:	d501      	bpl.n	1001070e <_printf_i+0xbe>
1001070a:	681e      	ldr	r6, [r3, #0]
1001070c:	e003      	b.n	10010716 <_printf_i+0xc6>
1001070e:	0646      	lsls	r6, r0, #25
10010710:	d5fb      	bpl.n	1001070a <_printf_i+0xba>
10010712:	f9b3 6000 	ldrsh.w	r6, [r3]
10010716:	2e00      	cmp	r6, #0
10010718:	da03      	bge.n	10010722 <_printf_i+0xd2>
1001071a:	232d      	movs	r3, #45	; 0x2d
1001071c:	4276      	negs	r6, r6
1001071e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
10010722:	485a      	ldr	r0, [pc, #360]	; (1001088c <_printf_i+0x23c>)
10010724:	230a      	movs	r3, #10
10010726:	e012      	b.n	1001074e <_printf_i+0xfe>
10010728:	682b      	ldr	r3, [r5, #0]
1001072a:	6820      	ldr	r0, [r4, #0]
1001072c:	1d19      	adds	r1, r3, #4
1001072e:	6029      	str	r1, [r5, #0]
10010730:	0605      	lsls	r5, r0, #24
10010732:	d501      	bpl.n	10010738 <_printf_i+0xe8>
10010734:	681e      	ldr	r6, [r3, #0]
10010736:	e002      	b.n	1001073e <_printf_i+0xee>
10010738:	0641      	lsls	r1, r0, #25
1001073a:	d5fb      	bpl.n	10010734 <_printf_i+0xe4>
1001073c:	881e      	ldrh	r6, [r3, #0]
1001073e:	4853      	ldr	r0, [pc, #332]	; (1001088c <_printf_i+0x23c>)
10010740:	2f6f      	cmp	r7, #111	; 0x6f
10010742:	bf0c      	ite	eq
10010744:	2308      	moveq	r3, #8
10010746:	230a      	movne	r3, #10
10010748:	2100      	movs	r1, #0
1001074a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1001074e:	6865      	ldr	r5, [r4, #4]
10010750:	60a5      	str	r5, [r4, #8]
10010752:	2d00      	cmp	r5, #0
10010754:	bfa2      	ittt	ge
10010756:	6821      	ldrge	r1, [r4, #0]
10010758:	f021 0104 	bicge.w	r1, r1, #4
1001075c:	6021      	strge	r1, [r4, #0]
1001075e:	b90e      	cbnz	r6, 10010764 <_printf_i+0x114>
10010760:	2d00      	cmp	r5, #0
10010762:	d04b      	beq.n	100107fc <_printf_i+0x1ac>
10010764:	4615      	mov	r5, r2
10010766:	fbb6 f1f3 	udiv	r1, r6, r3
1001076a:	fb03 6711 	mls	r7, r3, r1, r6
1001076e:	5dc7      	ldrb	r7, [r0, r7]
10010770:	f805 7d01 	strb.w	r7, [r5, #-1]!
10010774:	4637      	mov	r7, r6
10010776:	42bb      	cmp	r3, r7
10010778:	460e      	mov	r6, r1
1001077a:	d9f4      	bls.n	10010766 <_printf_i+0x116>
1001077c:	2b08      	cmp	r3, #8
1001077e:	d10b      	bne.n	10010798 <_printf_i+0x148>
10010780:	6823      	ldr	r3, [r4, #0]
10010782:	07de      	lsls	r6, r3, #31
10010784:	d508      	bpl.n	10010798 <_printf_i+0x148>
10010786:	6923      	ldr	r3, [r4, #16]
10010788:	6861      	ldr	r1, [r4, #4]
1001078a:	4299      	cmp	r1, r3
1001078c:	bfde      	ittt	le
1001078e:	2330      	movle	r3, #48	; 0x30
10010790:	f805 3c01 	strble.w	r3, [r5, #-1]
10010794:	f105 35ff 	addle.w	r5, r5, #4294967295
10010798:	1b52      	subs	r2, r2, r5
1001079a:	6122      	str	r2, [r4, #16]
1001079c:	f8cd a000 	str.w	sl, [sp]
100107a0:	464b      	mov	r3, r9
100107a2:	aa03      	add	r2, sp, #12
100107a4:	4621      	mov	r1, r4
100107a6:	4640      	mov	r0, r8
100107a8:	f7ff fee4 	bl	10010574 <_printf_common>
100107ac:	3001      	adds	r0, #1
100107ae:	d14a      	bne.n	10010846 <_printf_i+0x1f6>
100107b0:	f04f 30ff 	mov.w	r0, #4294967295
100107b4:	b004      	add	sp, #16
100107b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
100107ba:	6823      	ldr	r3, [r4, #0]
100107bc:	f043 0320 	orr.w	r3, r3, #32
100107c0:	6023      	str	r3, [r4, #0]
100107c2:	4833      	ldr	r0, [pc, #204]	; (10010890 <_printf_i+0x240>)
100107c4:	2778      	movs	r7, #120	; 0x78
100107c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
100107ca:	6823      	ldr	r3, [r4, #0]
100107cc:	6829      	ldr	r1, [r5, #0]
100107ce:	061f      	lsls	r7, r3, #24
100107d0:	f851 6b04 	ldr.w	r6, [r1], #4
100107d4:	d402      	bmi.n	100107dc <_printf_i+0x18c>
100107d6:	065f      	lsls	r7, r3, #25
100107d8:	bf48      	it	mi
100107da:	b2b6      	uxthmi	r6, r6
100107dc:	07df      	lsls	r7, r3, #31
100107de:	bf48      	it	mi
100107e0:	f043 0320 	orrmi.w	r3, r3, #32
100107e4:	6029      	str	r1, [r5, #0]
100107e6:	bf48      	it	mi
100107e8:	6023      	strmi	r3, [r4, #0]
100107ea:	b91e      	cbnz	r6, 100107f4 <_printf_i+0x1a4>
100107ec:	6823      	ldr	r3, [r4, #0]
100107ee:	f023 0320 	bic.w	r3, r3, #32
100107f2:	6023      	str	r3, [r4, #0]
100107f4:	2310      	movs	r3, #16
100107f6:	e7a7      	b.n	10010748 <_printf_i+0xf8>
100107f8:	4824      	ldr	r0, [pc, #144]	; (1001088c <_printf_i+0x23c>)
100107fa:	e7e4      	b.n	100107c6 <_printf_i+0x176>
100107fc:	4615      	mov	r5, r2
100107fe:	e7bd      	b.n	1001077c <_printf_i+0x12c>
10010800:	682b      	ldr	r3, [r5, #0]
10010802:	6826      	ldr	r6, [r4, #0]
10010804:	6961      	ldr	r1, [r4, #20]
10010806:	1d18      	adds	r0, r3, #4
10010808:	6028      	str	r0, [r5, #0]
1001080a:	0635      	lsls	r5, r6, #24
1001080c:	681b      	ldr	r3, [r3, #0]
1001080e:	d501      	bpl.n	10010814 <_printf_i+0x1c4>
10010810:	6019      	str	r1, [r3, #0]
10010812:	e002      	b.n	1001081a <_printf_i+0x1ca>
10010814:	0670      	lsls	r0, r6, #25
10010816:	d5fb      	bpl.n	10010810 <_printf_i+0x1c0>
10010818:	8019      	strh	r1, [r3, #0]
1001081a:	2300      	movs	r3, #0
1001081c:	6123      	str	r3, [r4, #16]
1001081e:	4615      	mov	r5, r2
10010820:	e7bc      	b.n	1001079c <_printf_i+0x14c>
10010822:	682b      	ldr	r3, [r5, #0]
10010824:	1d1a      	adds	r2, r3, #4
10010826:	602a      	str	r2, [r5, #0]
10010828:	681d      	ldr	r5, [r3, #0]
1001082a:	6862      	ldr	r2, [r4, #4]
1001082c:	2100      	movs	r1, #0
1001082e:	4628      	mov	r0, r5
10010830:	f7ef fc16 	bl	10000060 <memchr>
10010834:	b108      	cbz	r0, 1001083a <_printf_i+0x1ea>
10010836:	1b40      	subs	r0, r0, r5
10010838:	6060      	str	r0, [r4, #4]
1001083a:	6863      	ldr	r3, [r4, #4]
1001083c:	6123      	str	r3, [r4, #16]
1001083e:	2300      	movs	r3, #0
10010840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
10010844:	e7aa      	b.n	1001079c <_printf_i+0x14c>
10010846:	6923      	ldr	r3, [r4, #16]
10010848:	462a      	mov	r2, r5
1001084a:	4649      	mov	r1, r9
1001084c:	4640      	mov	r0, r8
1001084e:	47d0      	blx	sl
10010850:	3001      	adds	r0, #1
10010852:	d0ad      	beq.n	100107b0 <_printf_i+0x160>
10010854:	6823      	ldr	r3, [r4, #0]
10010856:	079b      	lsls	r3, r3, #30
10010858:	d413      	bmi.n	10010882 <_printf_i+0x232>
1001085a:	68e0      	ldr	r0, [r4, #12]
1001085c:	9b03      	ldr	r3, [sp, #12]
1001085e:	4298      	cmp	r0, r3
10010860:	bfb8      	it	lt
10010862:	4618      	movlt	r0, r3
10010864:	e7a6      	b.n	100107b4 <_printf_i+0x164>
10010866:	2301      	movs	r3, #1
10010868:	4632      	mov	r2, r6
1001086a:	4649      	mov	r1, r9
1001086c:	4640      	mov	r0, r8
1001086e:	47d0      	blx	sl
10010870:	3001      	adds	r0, #1
10010872:	d09d      	beq.n	100107b0 <_printf_i+0x160>
10010874:	3501      	adds	r5, #1
10010876:	68e3      	ldr	r3, [r4, #12]
10010878:	9903      	ldr	r1, [sp, #12]
1001087a:	1a5b      	subs	r3, r3, r1
1001087c:	42ab      	cmp	r3, r5
1001087e:	dcf2      	bgt.n	10010866 <_printf_i+0x216>
10010880:	e7eb      	b.n	1001085a <_printf_i+0x20a>
10010882:	2500      	movs	r5, #0
10010884:	f104 0619 	add.w	r6, r4, #25
10010888:	e7f5      	b.n	10010876 <_printf_i+0x226>
1001088a:	bf00      	nop
1001088c:	100174a6 	.word	0x100174a6
10010890:	100174b7 	.word	0x100174b7

10010894 <std>:
10010894:	2300      	movs	r3, #0
10010896:	b510      	push	{r4, lr}
10010898:	4604      	mov	r4, r0
1001089a:	e9c0 3300 	strd	r3, r3, [r0]
1001089e:	e9c0 3304 	strd	r3, r3, [r0, #16]
100108a2:	6083      	str	r3, [r0, #8]
100108a4:	8181      	strh	r1, [r0, #12]
100108a6:	6643      	str	r3, [r0, #100]	; 0x64
100108a8:	81c2      	strh	r2, [r0, #14]
100108aa:	6183      	str	r3, [r0, #24]
100108ac:	4619      	mov	r1, r3
100108ae:	2208      	movs	r2, #8
100108b0:	305c      	adds	r0, #92	; 0x5c
100108b2:	f000 f926 	bl	10010b02 <memset>
100108b6:	4b0d      	ldr	r3, [pc, #52]	; (100108ec <std+0x58>)
100108b8:	6263      	str	r3, [r4, #36]	; 0x24
100108ba:	4b0d      	ldr	r3, [pc, #52]	; (100108f0 <std+0x5c>)
100108bc:	62a3      	str	r3, [r4, #40]	; 0x28
100108be:	4b0d      	ldr	r3, [pc, #52]	; (100108f4 <std+0x60>)
100108c0:	62e3      	str	r3, [r4, #44]	; 0x2c
100108c2:	4b0d      	ldr	r3, [pc, #52]	; (100108f8 <std+0x64>)
100108c4:	6323      	str	r3, [r4, #48]	; 0x30
100108c6:	4b0d      	ldr	r3, [pc, #52]	; (100108fc <std+0x68>)
100108c8:	6224      	str	r4, [r4, #32]
100108ca:	429c      	cmp	r4, r3
100108cc:	d006      	beq.n	100108dc <std+0x48>
100108ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
100108d2:	4294      	cmp	r4, r2
100108d4:	d002      	beq.n	100108dc <std+0x48>
100108d6:	33d0      	adds	r3, #208	; 0xd0
100108d8:	429c      	cmp	r4, r3
100108da:	d105      	bne.n	100108e8 <std+0x54>
100108dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
100108e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
100108e4:	f000 b9be 	b.w	10010c64 <__retarget_lock_init_recursive>
100108e8:	bd10      	pop	{r4, pc}
100108ea:	bf00      	nop
100108ec:	10010a7d 	.word	0x10010a7d
100108f0:	10010a9f 	.word	0x10010a9f
100108f4:	10010ad7 	.word	0x10010ad7
100108f8:	10010afb 	.word	0x10010afb
100108fc:	10029d54 	.word	0x10029d54

10010900 <stdio_exit_handler>:
10010900:	4a02      	ldr	r2, [pc, #8]	; (1001090c <stdio_exit_handler+0xc>)
10010902:	4903      	ldr	r1, [pc, #12]	; (10010910 <stdio_exit_handler+0x10>)
10010904:	4803      	ldr	r0, [pc, #12]	; (10010914 <stdio_exit_handler+0x14>)
10010906:	f000 b87b 	b.w	10010a00 <_fwalk_sglue>
1001090a:	bf00      	nop
1001090c:	10020b78 	.word	0x10020b78
10010910:	10012771 	.word	0x10012771
10010914:	10020b84 	.word	0x10020b84

10010918 <cleanup_stdio>:
10010918:	6841      	ldr	r1, [r0, #4]
1001091a:	4b0c      	ldr	r3, [pc, #48]	; (1001094c <cleanup_stdio+0x34>)
1001091c:	4299      	cmp	r1, r3
1001091e:	b510      	push	{r4, lr}
10010920:	4604      	mov	r4, r0
10010922:	d001      	beq.n	10010928 <cleanup_stdio+0x10>
10010924:	f001 ff24 	bl	10012770 <_fflush_r>
10010928:	68a1      	ldr	r1, [r4, #8]
1001092a:	4b09      	ldr	r3, [pc, #36]	; (10010950 <cleanup_stdio+0x38>)
1001092c:	4299      	cmp	r1, r3
1001092e:	d002      	beq.n	10010936 <cleanup_stdio+0x1e>
10010930:	4620      	mov	r0, r4
10010932:	f001 ff1d 	bl	10012770 <_fflush_r>
10010936:	68e1      	ldr	r1, [r4, #12]
10010938:	4b06      	ldr	r3, [pc, #24]	; (10010954 <cleanup_stdio+0x3c>)
1001093a:	4299      	cmp	r1, r3
1001093c:	d004      	beq.n	10010948 <cleanup_stdio+0x30>
1001093e:	4620      	mov	r0, r4
10010940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10010944:	f001 bf14 	b.w	10012770 <_fflush_r>
10010948:	bd10      	pop	{r4, pc}
1001094a:	bf00      	nop
1001094c:	10029d54 	.word	0x10029d54
10010950:	10029dbc 	.word	0x10029dbc
10010954:	10029e24 	.word	0x10029e24

10010958 <global_stdio_init.part.0>:
10010958:	b510      	push	{r4, lr}
1001095a:	4b0b      	ldr	r3, [pc, #44]	; (10010988 <global_stdio_init.part.0+0x30>)
1001095c:	4c0b      	ldr	r4, [pc, #44]	; (1001098c <global_stdio_init.part.0+0x34>)
1001095e:	4a0c      	ldr	r2, [pc, #48]	; (10010990 <global_stdio_init.part.0+0x38>)
10010960:	601a      	str	r2, [r3, #0]
10010962:	4620      	mov	r0, r4
10010964:	2200      	movs	r2, #0
10010966:	2104      	movs	r1, #4
10010968:	f7ff ff94 	bl	10010894 <std>
1001096c:	f104 0068 	add.w	r0, r4, #104	; 0x68
10010970:	2201      	movs	r2, #1
10010972:	2109      	movs	r1, #9
10010974:	f7ff ff8e 	bl	10010894 <std>
10010978:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
1001097c:	2202      	movs	r2, #2
1001097e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10010982:	2112      	movs	r1, #18
10010984:	f7ff bf86 	b.w	10010894 <std>
10010988:	10029e8c 	.word	0x10029e8c
1001098c:	10029d54 	.word	0x10029d54
10010990:	10010901 	.word	0x10010901

10010994 <__sfp_lock_acquire>:
10010994:	4801      	ldr	r0, [pc, #4]	; (1001099c <__sfp_lock_acquire+0x8>)
10010996:	f000 b966 	b.w	10010c66 <__retarget_lock_acquire_recursive>
1001099a:	bf00      	nop
1001099c:	10029e95 	.word	0x10029e95

100109a0 <__sfp_lock_release>:
100109a0:	4801      	ldr	r0, [pc, #4]	; (100109a8 <__sfp_lock_release+0x8>)
100109a2:	f000 b961 	b.w	10010c68 <__retarget_lock_release_recursive>
100109a6:	bf00      	nop
100109a8:	10029e95 	.word	0x10029e95

100109ac <__sinit>:
100109ac:	b510      	push	{r4, lr}
100109ae:	4604      	mov	r4, r0
100109b0:	f7ff fff0 	bl	10010994 <__sfp_lock_acquire>
100109b4:	6a23      	ldr	r3, [r4, #32]
100109b6:	b11b      	cbz	r3, 100109c0 <__sinit+0x14>
100109b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
100109bc:	f7ff bff0 	b.w	100109a0 <__sfp_lock_release>
100109c0:	4b04      	ldr	r3, [pc, #16]	; (100109d4 <__sinit+0x28>)
100109c2:	6223      	str	r3, [r4, #32]
100109c4:	4b04      	ldr	r3, [pc, #16]	; (100109d8 <__sinit+0x2c>)
100109c6:	681b      	ldr	r3, [r3, #0]
100109c8:	2b00      	cmp	r3, #0
100109ca:	d1f5      	bne.n	100109b8 <__sinit+0xc>
100109cc:	f7ff ffc4 	bl	10010958 <global_stdio_init.part.0>
100109d0:	e7f2      	b.n	100109b8 <__sinit+0xc>
100109d2:	bf00      	nop
100109d4:	10010919 	.word	0x10010919
100109d8:	10029e8c 	.word	0x10029e8c

100109dc <fiprintf>:
100109dc:	b40e      	push	{r1, r2, r3}
100109de:	b503      	push	{r0, r1, lr}
100109e0:	4601      	mov	r1, r0
100109e2:	ab03      	add	r3, sp, #12
100109e4:	4805      	ldr	r0, [pc, #20]	; (100109fc <fiprintf+0x20>)
100109e6:	f853 2b04 	ldr.w	r2, [r3], #4
100109ea:	6800      	ldr	r0, [r0, #0]
100109ec:	9301      	str	r3, [sp, #4]
100109ee:	f001 fd1f 	bl	10012430 <_vfiprintf_r>
100109f2:	b002      	add	sp, #8
100109f4:	f85d eb04 	ldr.w	lr, [sp], #4
100109f8:	b003      	add	sp, #12
100109fa:	4770      	bx	lr
100109fc:	10020bd0 	.word	0x10020bd0

10010a00 <_fwalk_sglue>:
10010a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10010a04:	4607      	mov	r7, r0
10010a06:	4688      	mov	r8, r1
10010a08:	4614      	mov	r4, r2
10010a0a:	2600      	movs	r6, #0
10010a0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
10010a10:	f1b9 0901 	subs.w	r9, r9, #1
10010a14:	d505      	bpl.n	10010a22 <_fwalk_sglue+0x22>
10010a16:	6824      	ldr	r4, [r4, #0]
10010a18:	2c00      	cmp	r4, #0
10010a1a:	d1f7      	bne.n	10010a0c <_fwalk_sglue+0xc>
10010a1c:	4630      	mov	r0, r6
10010a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
10010a22:	89ab      	ldrh	r3, [r5, #12]
10010a24:	2b01      	cmp	r3, #1
10010a26:	d907      	bls.n	10010a38 <_fwalk_sglue+0x38>
10010a28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
10010a2c:	3301      	adds	r3, #1
10010a2e:	d003      	beq.n	10010a38 <_fwalk_sglue+0x38>
10010a30:	4629      	mov	r1, r5
10010a32:	4638      	mov	r0, r7
10010a34:	47c0      	blx	r8
10010a36:	4306      	orrs	r6, r0
10010a38:	3568      	adds	r5, #104	; 0x68
10010a3a:	e7e9      	b.n	10010a10 <_fwalk_sglue+0x10>

10010a3c <siprintf>:
10010a3c:	b40e      	push	{r1, r2, r3}
10010a3e:	b500      	push	{lr}
10010a40:	b09c      	sub	sp, #112	; 0x70
10010a42:	ab1d      	add	r3, sp, #116	; 0x74
10010a44:	9002      	str	r0, [sp, #8]
10010a46:	9006      	str	r0, [sp, #24]
10010a48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
10010a4c:	4809      	ldr	r0, [pc, #36]	; (10010a74 <siprintf+0x38>)
10010a4e:	9107      	str	r1, [sp, #28]
10010a50:	9104      	str	r1, [sp, #16]
10010a52:	4909      	ldr	r1, [pc, #36]	; (10010a78 <siprintf+0x3c>)
10010a54:	f853 2b04 	ldr.w	r2, [r3], #4
10010a58:	9105      	str	r1, [sp, #20]
10010a5a:	6800      	ldr	r0, [r0, #0]
10010a5c:	9301      	str	r3, [sp, #4]
10010a5e:	a902      	add	r1, sp, #8
10010a60:	f001 fbbe 	bl	100121e0 <_svfiprintf_r>
10010a64:	9b02      	ldr	r3, [sp, #8]
10010a66:	2200      	movs	r2, #0
10010a68:	701a      	strb	r2, [r3, #0]
10010a6a:	b01c      	add	sp, #112	; 0x70
10010a6c:	f85d eb04 	ldr.w	lr, [sp], #4
10010a70:	b003      	add	sp, #12
10010a72:	4770      	bx	lr
10010a74:	10020bd0 	.word	0x10020bd0
10010a78:	ffff0208 	.word	0xffff0208

10010a7c <__sread>:
10010a7c:	b510      	push	{r4, lr}
10010a7e:	460c      	mov	r4, r1
10010a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10010a84:	f000 f890 	bl	10010ba8 <_read_r>
10010a88:	2800      	cmp	r0, #0
10010a8a:	bfab      	itete	ge
10010a8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
10010a8e:	89a3      	ldrhlt	r3, [r4, #12]
10010a90:	181b      	addge	r3, r3, r0
10010a92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
10010a96:	bfac      	ite	ge
10010a98:	6563      	strge	r3, [r4, #84]	; 0x54
10010a9a:	81a3      	strhlt	r3, [r4, #12]
10010a9c:	bd10      	pop	{r4, pc}

10010a9e <__swrite>:
10010a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10010aa2:	461f      	mov	r7, r3
10010aa4:	898b      	ldrh	r3, [r1, #12]
10010aa6:	05db      	lsls	r3, r3, #23
10010aa8:	4605      	mov	r5, r0
10010aaa:	460c      	mov	r4, r1
10010aac:	4616      	mov	r6, r2
10010aae:	d505      	bpl.n	10010abc <__swrite+0x1e>
10010ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10010ab4:	2302      	movs	r3, #2
10010ab6:	2200      	movs	r2, #0
10010ab8:	f000 f864 	bl	10010b84 <_lseek_r>
10010abc:	89a3      	ldrh	r3, [r4, #12]
10010abe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
10010ac2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
10010ac6:	81a3      	strh	r3, [r4, #12]
10010ac8:	4632      	mov	r2, r6
10010aca:	463b      	mov	r3, r7
10010acc:	4628      	mov	r0, r5
10010ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
10010ad2:	f000 b88b 	b.w	10010bec <_write_r>

10010ad6 <__sseek>:
10010ad6:	b510      	push	{r4, lr}
10010ad8:	460c      	mov	r4, r1
10010ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10010ade:	f000 f851 	bl	10010b84 <_lseek_r>
10010ae2:	1c43      	adds	r3, r0, #1
10010ae4:	89a3      	ldrh	r3, [r4, #12]
10010ae6:	bf15      	itete	ne
10010ae8:	6560      	strne	r0, [r4, #84]	; 0x54
10010aea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
10010aee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
10010af2:	81a3      	strheq	r3, [r4, #12]
10010af4:	bf18      	it	ne
10010af6:	81a3      	strhne	r3, [r4, #12]
10010af8:	bd10      	pop	{r4, pc}

10010afa <__sclose>:
10010afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10010afe:	f000 b831 	b.w	10010b64 <_close_r>

10010b02 <memset>:
10010b02:	4402      	add	r2, r0
10010b04:	4603      	mov	r3, r0
10010b06:	4293      	cmp	r3, r2
10010b08:	d100      	bne.n	10010b0c <memset+0xa>
10010b0a:	4770      	bx	lr
10010b0c:	f803 1b01 	strb.w	r1, [r3], #1
10010b10:	e7f9      	b.n	10010b06 <memset+0x4>

10010b12 <strncmp>:
10010b12:	b510      	push	{r4, lr}
10010b14:	b16a      	cbz	r2, 10010b32 <strncmp+0x20>
10010b16:	3901      	subs	r1, #1
10010b18:	1884      	adds	r4, r0, r2
10010b1a:	f810 2b01 	ldrb.w	r2, [r0], #1
10010b1e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
10010b22:	429a      	cmp	r2, r3
10010b24:	d103      	bne.n	10010b2e <strncmp+0x1c>
10010b26:	42a0      	cmp	r0, r4
10010b28:	d001      	beq.n	10010b2e <strncmp+0x1c>
10010b2a:	2a00      	cmp	r2, #0
10010b2c:	d1f5      	bne.n	10010b1a <strncmp+0x8>
10010b2e:	1ad0      	subs	r0, r2, r3
10010b30:	bd10      	pop	{r4, pc}
10010b32:	4610      	mov	r0, r2
10010b34:	e7fc      	b.n	10010b30 <strncmp+0x1e>

10010b36 <strncpy>:
10010b36:	b510      	push	{r4, lr}
10010b38:	3901      	subs	r1, #1
10010b3a:	4603      	mov	r3, r0
10010b3c:	b132      	cbz	r2, 10010b4c <strncpy+0x16>
10010b3e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
10010b42:	f803 4b01 	strb.w	r4, [r3], #1
10010b46:	3a01      	subs	r2, #1
10010b48:	2c00      	cmp	r4, #0
10010b4a:	d1f7      	bne.n	10010b3c <strncpy+0x6>
10010b4c:	441a      	add	r2, r3
10010b4e:	2100      	movs	r1, #0
10010b50:	4293      	cmp	r3, r2
10010b52:	d100      	bne.n	10010b56 <strncpy+0x20>
10010b54:	bd10      	pop	{r4, pc}
10010b56:	f803 1b01 	strb.w	r1, [r3], #1
10010b5a:	e7f9      	b.n	10010b50 <strncpy+0x1a>

10010b5c <_localeconv_r>:
10010b5c:	4800      	ldr	r0, [pc, #0]	; (10010b60 <_localeconv_r+0x4>)
10010b5e:	4770      	bx	lr
10010b60:	10020cc4 	.word	0x10020cc4

10010b64 <_close_r>:
10010b64:	b538      	push	{r3, r4, r5, lr}
10010b66:	4d06      	ldr	r5, [pc, #24]	; (10010b80 <_close_r+0x1c>)
10010b68:	2300      	movs	r3, #0
10010b6a:	4604      	mov	r4, r0
10010b6c:	4608      	mov	r0, r1
10010b6e:	602b      	str	r3, [r5, #0]
10010b70:	f002 f908 	bl	10012d84 <_close>
10010b74:	1c43      	adds	r3, r0, #1
10010b76:	d102      	bne.n	10010b7e <_close_r+0x1a>
10010b78:	682b      	ldr	r3, [r5, #0]
10010b7a:	b103      	cbz	r3, 10010b7e <_close_r+0x1a>
10010b7c:	6023      	str	r3, [r4, #0]
10010b7e:	bd38      	pop	{r3, r4, r5, pc}
10010b80:	10029e90 	.word	0x10029e90

10010b84 <_lseek_r>:
10010b84:	b538      	push	{r3, r4, r5, lr}
10010b86:	4d07      	ldr	r5, [pc, #28]	; (10010ba4 <_lseek_r+0x20>)
10010b88:	4604      	mov	r4, r0
10010b8a:	4608      	mov	r0, r1
10010b8c:	4611      	mov	r1, r2
10010b8e:	2200      	movs	r2, #0
10010b90:	602a      	str	r2, [r5, #0]
10010b92:	461a      	mov	r2, r3
10010b94:	f002 f91e 	bl	10012dd4 <_lseek>
10010b98:	1c43      	adds	r3, r0, #1
10010b9a:	d102      	bne.n	10010ba2 <_lseek_r+0x1e>
10010b9c:	682b      	ldr	r3, [r5, #0]
10010b9e:	b103      	cbz	r3, 10010ba2 <_lseek_r+0x1e>
10010ba0:	6023      	str	r3, [r4, #0]
10010ba2:	bd38      	pop	{r3, r4, r5, pc}
10010ba4:	10029e90 	.word	0x10029e90

10010ba8 <_read_r>:
10010ba8:	b538      	push	{r3, r4, r5, lr}
10010baa:	4d07      	ldr	r5, [pc, #28]	; (10010bc8 <_read_r+0x20>)
10010bac:	4604      	mov	r4, r0
10010bae:	4608      	mov	r0, r1
10010bb0:	4611      	mov	r1, r2
10010bb2:	2200      	movs	r2, #0
10010bb4:	602a      	str	r2, [r5, #0]
10010bb6:	461a      	mov	r2, r3
10010bb8:	f002 f914 	bl	10012de4 <_read>
10010bbc:	1c43      	adds	r3, r0, #1
10010bbe:	d102      	bne.n	10010bc6 <_read_r+0x1e>
10010bc0:	682b      	ldr	r3, [r5, #0]
10010bc2:	b103      	cbz	r3, 10010bc6 <_read_r+0x1e>
10010bc4:	6023      	str	r3, [r4, #0]
10010bc6:	bd38      	pop	{r3, r4, r5, pc}
10010bc8:	10029e90 	.word	0x10029e90

10010bcc <_sbrk_r>:
10010bcc:	b538      	push	{r3, r4, r5, lr}
10010bce:	4d06      	ldr	r5, [pc, #24]	; (10010be8 <_sbrk_r+0x1c>)
10010bd0:	2300      	movs	r3, #0
10010bd2:	4604      	mov	r4, r0
10010bd4:	4608      	mov	r0, r1
10010bd6:	602b      	str	r3, [r5, #0]
10010bd8:	f7f0 fe80 	bl	100018dc <_sbrk>
10010bdc:	1c43      	adds	r3, r0, #1
10010bde:	d102      	bne.n	10010be6 <_sbrk_r+0x1a>
10010be0:	682b      	ldr	r3, [r5, #0]
10010be2:	b103      	cbz	r3, 10010be6 <_sbrk_r+0x1a>
10010be4:	6023      	str	r3, [r4, #0]
10010be6:	bd38      	pop	{r3, r4, r5, pc}
10010be8:	10029e90 	.word	0x10029e90

10010bec <_write_r>:
10010bec:	b538      	push	{r3, r4, r5, lr}
10010bee:	4d07      	ldr	r5, [pc, #28]	; (10010c0c <_write_r+0x20>)
10010bf0:	4604      	mov	r4, r0
10010bf2:	4608      	mov	r0, r1
10010bf4:	4611      	mov	r1, r2
10010bf6:	2200      	movs	r2, #0
10010bf8:	602a      	str	r2, [r5, #0]
10010bfa:	461a      	mov	r2, r3
10010bfc:	f002 f8fa 	bl	10012df4 <_write>
10010c00:	1c43      	adds	r3, r0, #1
10010c02:	d102      	bne.n	10010c0a <_write_r+0x1e>
10010c04:	682b      	ldr	r3, [r5, #0]
10010c06:	b103      	cbz	r3, 10010c0a <_write_r+0x1e>
10010c08:	6023      	str	r3, [r4, #0]
10010c0a:	bd38      	pop	{r3, r4, r5, pc}
10010c0c:	10029e90 	.word	0x10029e90

10010c10 <__errno>:
10010c10:	4b01      	ldr	r3, [pc, #4]	; (10010c18 <__errno+0x8>)
10010c12:	6818      	ldr	r0, [r3, #0]
10010c14:	4770      	bx	lr
10010c16:	bf00      	nop
10010c18:	10020bd0 	.word	0x10020bd0

10010c1c <__libc_init_array>:
10010c1c:	b570      	push	{r4, r5, r6, lr}
10010c1e:	4d0d      	ldr	r5, [pc, #52]	; (10010c54 <__libc_init_array+0x38>)
10010c20:	4c0d      	ldr	r4, [pc, #52]	; (10010c58 <__libc_init_array+0x3c>)
10010c22:	1b64      	subs	r4, r4, r5
10010c24:	10a4      	asrs	r4, r4, #2
10010c26:	2600      	movs	r6, #0
10010c28:	42a6      	cmp	r6, r4
10010c2a:	d109      	bne.n	10010c40 <__libc_init_array+0x24>
10010c2c:	4d0b      	ldr	r5, [pc, #44]	; (10010c5c <__libc_init_array+0x40>)
10010c2e:	4c0c      	ldr	r4, [pc, #48]	; (10010c60 <__libc_init_array+0x44>)
10010c30:	f002 f8ea 	bl	10012e08 <_init>
10010c34:	1b64      	subs	r4, r4, r5
10010c36:	10a4      	asrs	r4, r4, #2
10010c38:	2600      	movs	r6, #0
10010c3a:	42a6      	cmp	r6, r4
10010c3c:	d105      	bne.n	10010c4a <__libc_init_array+0x2e>
10010c3e:	bd70      	pop	{r4, r5, r6, pc}
10010c40:	f855 3b04 	ldr.w	r3, [r5], #4
10010c44:	4798      	blx	r3
10010c46:	3601      	adds	r6, #1
10010c48:	e7ee      	b.n	10010c28 <__libc_init_array+0xc>
10010c4a:	f855 3b04 	ldr.w	r3, [r5], #4
10010c4e:	4798      	blx	r3
10010c50:	3601      	adds	r6, #1
10010c52:	e7f2      	b.n	10010c3a <__libc_init_array+0x1e>
10010c54:	100177e0 	.word	0x100177e0
10010c58:	100177e0 	.word	0x100177e0
10010c5c:	100177e0 	.word	0x100177e0
10010c60:	100177e4 	.word	0x100177e4

10010c64 <__retarget_lock_init_recursive>:
10010c64:	4770      	bx	lr

10010c66 <__retarget_lock_acquire_recursive>:
10010c66:	4770      	bx	lr

10010c68 <__retarget_lock_release_recursive>:
10010c68:	4770      	bx	lr

10010c6a <memcpy>:
10010c6a:	440a      	add	r2, r1
10010c6c:	4291      	cmp	r1, r2
10010c6e:	f100 33ff 	add.w	r3, r0, #4294967295
10010c72:	d100      	bne.n	10010c76 <memcpy+0xc>
10010c74:	4770      	bx	lr
10010c76:	b510      	push	{r4, lr}
10010c78:	f811 4b01 	ldrb.w	r4, [r1], #1
10010c7c:	f803 4f01 	strb.w	r4, [r3, #1]!
10010c80:	4291      	cmp	r1, r2
10010c82:	d1f9      	bne.n	10010c78 <memcpy+0xe>
10010c84:	bd10      	pop	{r4, pc}

10010c86 <abort>:
10010c86:	b508      	push	{r3, lr}
10010c88:	2006      	movs	r0, #6
10010c8a:	f001 fe71 	bl	10012970 <raise>
10010c8e:	2001      	movs	r0, #1
10010c90:	f002 f8b8 	bl	10012e04 <_exit>

10010c94 <quorem>:
10010c94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
10010c98:	6903      	ldr	r3, [r0, #16]
10010c9a:	690c      	ldr	r4, [r1, #16]
10010c9c:	42a3      	cmp	r3, r4
10010c9e:	4607      	mov	r7, r0
10010ca0:	db7e      	blt.n	10010da0 <quorem+0x10c>
10010ca2:	3c01      	subs	r4, #1
10010ca4:	f101 0814 	add.w	r8, r1, #20
10010ca8:	f100 0514 	add.w	r5, r0, #20
10010cac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
10010cb0:	9301      	str	r3, [sp, #4]
10010cb2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
10010cb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
10010cba:	3301      	adds	r3, #1
10010cbc:	429a      	cmp	r2, r3
10010cbe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
10010cc2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
10010cc6:	fbb2 f6f3 	udiv	r6, r2, r3
10010cca:	d331      	bcc.n	10010d30 <quorem+0x9c>
10010ccc:	f04f 0e00 	mov.w	lr, #0
10010cd0:	4640      	mov	r0, r8
10010cd2:	46ac      	mov	ip, r5
10010cd4:	46f2      	mov	sl, lr
10010cd6:	f850 2b04 	ldr.w	r2, [r0], #4
10010cda:	b293      	uxth	r3, r2
10010cdc:	fb06 e303 	mla	r3, r6, r3, lr
10010ce0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
10010ce4:	0c1a      	lsrs	r2, r3, #16
10010ce6:	b29b      	uxth	r3, r3
10010ce8:	ebaa 0303 	sub.w	r3, sl, r3
10010cec:	f8dc a000 	ldr.w	sl, [ip]
10010cf0:	fa13 f38a 	uxtah	r3, r3, sl
10010cf4:	fb06 220e 	mla	r2, r6, lr, r2
10010cf8:	9300      	str	r3, [sp, #0]
10010cfa:	9b00      	ldr	r3, [sp, #0]
10010cfc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
10010d00:	b292      	uxth	r2, r2
10010d02:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
10010d06:	eb02 4223 	add.w	r2, r2, r3, asr #16
10010d0a:	f8bd 3000 	ldrh.w	r3, [sp]
10010d0e:	4581      	cmp	r9, r0
10010d10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
10010d14:	f84c 3b04 	str.w	r3, [ip], #4
10010d18:	ea4f 4a22 	mov.w	sl, r2, asr #16
10010d1c:	d2db      	bcs.n	10010cd6 <quorem+0x42>
10010d1e:	f855 300b 	ldr.w	r3, [r5, fp]
10010d22:	b92b      	cbnz	r3, 10010d30 <quorem+0x9c>
10010d24:	9b01      	ldr	r3, [sp, #4]
10010d26:	3b04      	subs	r3, #4
10010d28:	429d      	cmp	r5, r3
10010d2a:	461a      	mov	r2, r3
10010d2c:	d32c      	bcc.n	10010d88 <quorem+0xf4>
10010d2e:	613c      	str	r4, [r7, #16]
10010d30:	4638      	mov	r0, r7
10010d32:	f001 f8f3 	bl	10011f1c <__mcmp>
10010d36:	2800      	cmp	r0, #0
10010d38:	db22      	blt.n	10010d80 <quorem+0xec>
10010d3a:	3601      	adds	r6, #1
10010d3c:	4629      	mov	r1, r5
10010d3e:	2000      	movs	r0, #0
10010d40:	f858 2b04 	ldr.w	r2, [r8], #4
10010d44:	f8d1 c000 	ldr.w	ip, [r1]
10010d48:	b293      	uxth	r3, r2
10010d4a:	1ac3      	subs	r3, r0, r3
10010d4c:	0c12      	lsrs	r2, r2, #16
10010d4e:	fa13 f38c 	uxtah	r3, r3, ip
10010d52:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
10010d56:	eb02 4223 	add.w	r2, r2, r3, asr #16
10010d5a:	b29b      	uxth	r3, r3
10010d5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
10010d60:	45c1      	cmp	r9, r8
10010d62:	f841 3b04 	str.w	r3, [r1], #4
10010d66:	ea4f 4022 	mov.w	r0, r2, asr #16
10010d6a:	d2e9      	bcs.n	10010d40 <quorem+0xac>
10010d6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
10010d70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
10010d74:	b922      	cbnz	r2, 10010d80 <quorem+0xec>
10010d76:	3b04      	subs	r3, #4
10010d78:	429d      	cmp	r5, r3
10010d7a:	461a      	mov	r2, r3
10010d7c:	d30a      	bcc.n	10010d94 <quorem+0x100>
10010d7e:	613c      	str	r4, [r7, #16]
10010d80:	4630      	mov	r0, r6
10010d82:	b003      	add	sp, #12
10010d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10010d88:	6812      	ldr	r2, [r2, #0]
10010d8a:	3b04      	subs	r3, #4
10010d8c:	2a00      	cmp	r2, #0
10010d8e:	d1ce      	bne.n	10010d2e <quorem+0x9a>
10010d90:	3c01      	subs	r4, #1
10010d92:	e7c9      	b.n	10010d28 <quorem+0x94>
10010d94:	6812      	ldr	r2, [r2, #0]
10010d96:	3b04      	subs	r3, #4
10010d98:	2a00      	cmp	r2, #0
10010d9a:	d1f0      	bne.n	10010d7e <quorem+0xea>
10010d9c:	3c01      	subs	r4, #1
10010d9e:	e7eb      	b.n	10010d78 <quorem+0xe4>
10010da0:	2000      	movs	r0, #0
10010da2:	e7ee      	b.n	10010d82 <quorem+0xee>
10010da4:	0000      	movs	r0, r0
	...

10010da8 <_dtoa_r>:
10010da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10010dac:	ed2d 8b04 	vpush	{d8-d9}
10010db0:	69c5      	ldr	r5, [r0, #28]
10010db2:	b093      	sub	sp, #76	; 0x4c
10010db4:	ed8d 0b02 	vstr	d0, [sp, #8]
10010db8:	ec57 6b10 	vmov	r6, r7, d0
10010dbc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
10010dc0:	9107      	str	r1, [sp, #28]
10010dc2:	4604      	mov	r4, r0
10010dc4:	920a      	str	r2, [sp, #40]	; 0x28
10010dc6:	930d      	str	r3, [sp, #52]	; 0x34
10010dc8:	b975      	cbnz	r5, 10010de8 <_dtoa_r+0x40>
10010dca:	2010      	movs	r0, #16
10010dcc:	f7ff f810 	bl	1000fdf0 <malloc>
10010dd0:	4602      	mov	r2, r0
10010dd2:	61e0      	str	r0, [r4, #28]
10010dd4:	b920      	cbnz	r0, 10010de0 <_dtoa_r+0x38>
10010dd6:	4bae      	ldr	r3, [pc, #696]	; (10011090 <_dtoa_r+0x2e8>)
10010dd8:	21ef      	movs	r1, #239	; 0xef
10010dda:	48ae      	ldr	r0, [pc, #696]	; (10011094 <_dtoa_r+0x2ec>)
10010ddc:	f7fe ffea 	bl	1000fdb4 <__assert_func>
10010de0:	e9c0 5501 	strd	r5, r5, [r0, #4]
10010de4:	6005      	str	r5, [r0, #0]
10010de6:	60c5      	str	r5, [r0, #12]
10010de8:	69e3      	ldr	r3, [r4, #28]
10010dea:	6819      	ldr	r1, [r3, #0]
10010dec:	b151      	cbz	r1, 10010e04 <_dtoa_r+0x5c>
10010dee:	685a      	ldr	r2, [r3, #4]
10010df0:	604a      	str	r2, [r1, #4]
10010df2:	2301      	movs	r3, #1
10010df4:	4093      	lsls	r3, r2
10010df6:	608b      	str	r3, [r1, #8]
10010df8:	4620      	mov	r0, r4
10010dfa:	f000 fe53 	bl	10011aa4 <_Bfree>
10010dfe:	69e3      	ldr	r3, [r4, #28]
10010e00:	2200      	movs	r2, #0
10010e02:	601a      	str	r2, [r3, #0]
10010e04:	1e3b      	subs	r3, r7, #0
10010e06:	bfbb      	ittet	lt
10010e08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
10010e0c:	9303      	strlt	r3, [sp, #12]
10010e0e:	2300      	movge	r3, #0
10010e10:	2201      	movlt	r2, #1
10010e12:	bfac      	ite	ge
10010e14:	f8c8 3000 	strge.w	r3, [r8]
10010e18:	f8c8 2000 	strlt.w	r2, [r8]
10010e1c:	4b9e      	ldr	r3, [pc, #632]	; (10011098 <_dtoa_r+0x2f0>)
10010e1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
10010e22:	ea33 0308 	bics.w	r3, r3, r8
10010e26:	d11b      	bne.n	10010e60 <_dtoa_r+0xb8>
10010e28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10010e2a:	f242 730f 	movw	r3, #9999	; 0x270f
10010e2e:	6013      	str	r3, [r2, #0]
10010e30:	f3c8 0313 	ubfx	r3, r8, #0, #20
10010e34:	4333      	orrs	r3, r6
10010e36:	f000 8593 	beq.w	10011960 <_dtoa_r+0xbb8>
10010e3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
10010e3c:	b963      	cbnz	r3, 10010e58 <_dtoa_r+0xb0>
10010e3e:	4b97      	ldr	r3, [pc, #604]	; (1001109c <_dtoa_r+0x2f4>)
10010e40:	e027      	b.n	10010e92 <_dtoa_r+0xea>
10010e42:	4b97      	ldr	r3, [pc, #604]	; (100110a0 <_dtoa_r+0x2f8>)
10010e44:	9300      	str	r3, [sp, #0]
10010e46:	3308      	adds	r3, #8
10010e48:	9a21      	ldr	r2, [sp, #132]	; 0x84
10010e4a:	6013      	str	r3, [r2, #0]
10010e4c:	9800      	ldr	r0, [sp, #0]
10010e4e:	b013      	add	sp, #76	; 0x4c
10010e50:	ecbd 8b04 	vpop	{d8-d9}
10010e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10010e58:	4b90      	ldr	r3, [pc, #576]	; (1001109c <_dtoa_r+0x2f4>)
10010e5a:	9300      	str	r3, [sp, #0]
10010e5c:	3303      	adds	r3, #3
10010e5e:	e7f3      	b.n	10010e48 <_dtoa_r+0xa0>
10010e60:	ed9d 7b02 	vldr	d7, [sp, #8]
10010e64:	2200      	movs	r2, #0
10010e66:	ec51 0b17 	vmov	r0, r1, d7
10010e6a:	eeb0 8a47 	vmov.f32	s16, s14
10010e6e:	eef0 8a67 	vmov.f32	s17, s15
10010e72:	2300      	movs	r3, #0
10010e74:	f7ef fd70 	bl	10000958 <__aeabi_dcmpeq>
10010e78:	4681      	mov	r9, r0
10010e7a:	b160      	cbz	r0, 10010e96 <_dtoa_r+0xee>
10010e7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10010e7e:	2301      	movs	r3, #1
10010e80:	6013      	str	r3, [r2, #0]
10010e82:	9b21      	ldr	r3, [sp, #132]	; 0x84
10010e84:	2b00      	cmp	r3, #0
10010e86:	f000 8568 	beq.w	1001195a <_dtoa_r+0xbb2>
10010e8a:	4b86      	ldr	r3, [pc, #536]	; (100110a4 <_dtoa_r+0x2fc>)
10010e8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
10010e8e:	6013      	str	r3, [r2, #0]
10010e90:	3b01      	subs	r3, #1
10010e92:	9300      	str	r3, [sp, #0]
10010e94:	e7da      	b.n	10010e4c <_dtoa_r+0xa4>
10010e96:	aa10      	add	r2, sp, #64	; 0x40
10010e98:	a911      	add	r1, sp, #68	; 0x44
10010e9a:	4620      	mov	r0, r4
10010e9c:	eeb0 0a48 	vmov.f32	s0, s16
10010ea0:	eef0 0a68 	vmov.f32	s1, s17
10010ea4:	f001 f8e0 	bl	10012068 <__d2b>
10010ea8:	f3c8 550a 	ubfx	r5, r8, #20, #11
10010eac:	4682      	mov	sl, r0
10010eae:	2d00      	cmp	r5, #0
10010eb0:	d07f      	beq.n	10010fb2 <_dtoa_r+0x20a>
10010eb2:	ee18 3a90 	vmov	r3, s17
10010eb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
10010eba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
10010ebe:	ec51 0b18 	vmov	r0, r1, d8
10010ec2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
10010ec6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
10010eca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
10010ece:	4619      	mov	r1, r3
10010ed0:	2200      	movs	r2, #0
10010ed2:	4b75      	ldr	r3, [pc, #468]	; (100110a8 <_dtoa_r+0x300>)
10010ed4:	f7ef f920 	bl	10000118 <__aeabi_dsub>
10010ed8:	a367      	add	r3, pc, #412	; (adr r3, 10011078 <_dtoa_r+0x2d0>)
10010eda:	e9d3 2300 	ldrd	r2, r3, [r3]
10010ede:	f7ef fad3 	bl	10000488 <__aeabi_dmul>
10010ee2:	a367      	add	r3, pc, #412	; (adr r3, 10011080 <_dtoa_r+0x2d8>)
10010ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
10010ee8:	f7ef f918 	bl	1000011c <__adddf3>
10010eec:	4606      	mov	r6, r0
10010eee:	4628      	mov	r0, r5
10010ef0:	460f      	mov	r7, r1
10010ef2:	f7ef fa5f 	bl	100003b4 <__aeabi_i2d>
10010ef6:	a364      	add	r3, pc, #400	; (adr r3, 10011088 <_dtoa_r+0x2e0>)
10010ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
10010efc:	f7ef fac4 	bl	10000488 <__aeabi_dmul>
10010f00:	4602      	mov	r2, r0
10010f02:	460b      	mov	r3, r1
10010f04:	4630      	mov	r0, r6
10010f06:	4639      	mov	r1, r7
10010f08:	f7ef f908 	bl	1000011c <__adddf3>
10010f0c:	4606      	mov	r6, r0
10010f0e:	460f      	mov	r7, r1
10010f10:	f7ef fd6a 	bl	100009e8 <__aeabi_d2iz>
10010f14:	2200      	movs	r2, #0
10010f16:	4683      	mov	fp, r0
10010f18:	2300      	movs	r3, #0
10010f1a:	4630      	mov	r0, r6
10010f1c:	4639      	mov	r1, r7
10010f1e:	f7ef fd25 	bl	1000096c <__aeabi_dcmplt>
10010f22:	b148      	cbz	r0, 10010f38 <_dtoa_r+0x190>
10010f24:	4658      	mov	r0, fp
10010f26:	f7ef fa45 	bl	100003b4 <__aeabi_i2d>
10010f2a:	4632      	mov	r2, r6
10010f2c:	463b      	mov	r3, r7
10010f2e:	f7ef fd13 	bl	10000958 <__aeabi_dcmpeq>
10010f32:	b908      	cbnz	r0, 10010f38 <_dtoa_r+0x190>
10010f34:	f10b 3bff 	add.w	fp, fp, #4294967295
10010f38:	f1bb 0f16 	cmp.w	fp, #22
10010f3c:	d857      	bhi.n	10010fee <_dtoa_r+0x246>
10010f3e:	4b5b      	ldr	r3, [pc, #364]	; (100110ac <_dtoa_r+0x304>)
10010f40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
10010f44:	e9d3 2300 	ldrd	r2, r3, [r3]
10010f48:	ec51 0b18 	vmov	r0, r1, d8
10010f4c:	f7ef fd0e 	bl	1000096c <__aeabi_dcmplt>
10010f50:	2800      	cmp	r0, #0
10010f52:	d04e      	beq.n	10010ff2 <_dtoa_r+0x24a>
10010f54:	f10b 3bff 	add.w	fp, fp, #4294967295
10010f58:	2300      	movs	r3, #0
10010f5a:	930c      	str	r3, [sp, #48]	; 0x30
10010f5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
10010f5e:	1b5b      	subs	r3, r3, r5
10010f60:	1e5a      	subs	r2, r3, #1
10010f62:	bf45      	ittet	mi
10010f64:	f1c3 0301 	rsbmi	r3, r3, #1
10010f68:	9305      	strmi	r3, [sp, #20]
10010f6a:	2300      	movpl	r3, #0
10010f6c:	2300      	movmi	r3, #0
10010f6e:	9206      	str	r2, [sp, #24]
10010f70:	bf54      	ite	pl
10010f72:	9305      	strpl	r3, [sp, #20]
10010f74:	9306      	strmi	r3, [sp, #24]
10010f76:	f1bb 0f00 	cmp.w	fp, #0
10010f7a:	db3c      	blt.n	10010ff6 <_dtoa_r+0x24e>
10010f7c:	9b06      	ldr	r3, [sp, #24]
10010f7e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
10010f82:	445b      	add	r3, fp
10010f84:	9306      	str	r3, [sp, #24]
10010f86:	2300      	movs	r3, #0
10010f88:	9308      	str	r3, [sp, #32]
10010f8a:	9b07      	ldr	r3, [sp, #28]
10010f8c:	2b09      	cmp	r3, #9
10010f8e:	d868      	bhi.n	10011062 <_dtoa_r+0x2ba>
10010f90:	2b05      	cmp	r3, #5
10010f92:	bfc4      	itt	gt
10010f94:	3b04      	subgt	r3, #4
10010f96:	9307      	strgt	r3, [sp, #28]
10010f98:	9b07      	ldr	r3, [sp, #28]
10010f9a:	f1a3 0302 	sub.w	r3, r3, #2
10010f9e:	bfcc      	ite	gt
10010fa0:	2500      	movgt	r5, #0
10010fa2:	2501      	movle	r5, #1
10010fa4:	2b03      	cmp	r3, #3
10010fa6:	f200 8085 	bhi.w	100110b4 <_dtoa_r+0x30c>
10010faa:	e8df f003 	tbb	[pc, r3]
10010fae:	3b2e      	.short	0x3b2e
10010fb0:	5839      	.short	0x5839
10010fb2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
10010fb6:	441d      	add	r5, r3
10010fb8:	f205 4332 	addw	r3, r5, #1074	; 0x432
10010fbc:	2b20      	cmp	r3, #32
10010fbe:	bfc1      	itttt	gt
10010fc0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
10010fc4:	fa08 f803 	lslgt.w	r8, r8, r3
10010fc8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
10010fcc:	fa26 f303 	lsrgt.w	r3, r6, r3
10010fd0:	bfd6      	itet	le
10010fd2:	f1c3 0320 	rsble	r3, r3, #32
10010fd6:	ea48 0003 	orrgt.w	r0, r8, r3
10010fda:	fa06 f003 	lslle.w	r0, r6, r3
10010fde:	f7ef f9d9 	bl	10000394 <__aeabi_ui2d>
10010fe2:	2201      	movs	r2, #1
10010fe4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
10010fe8:	3d01      	subs	r5, #1
10010fea:	920e      	str	r2, [sp, #56]	; 0x38
10010fec:	e76f      	b.n	10010ece <_dtoa_r+0x126>
10010fee:	2301      	movs	r3, #1
10010ff0:	e7b3      	b.n	10010f5a <_dtoa_r+0x1b2>
10010ff2:	900c      	str	r0, [sp, #48]	; 0x30
10010ff4:	e7b2      	b.n	10010f5c <_dtoa_r+0x1b4>
10010ff6:	9b05      	ldr	r3, [sp, #20]
10010ff8:	eba3 030b 	sub.w	r3, r3, fp
10010ffc:	9305      	str	r3, [sp, #20]
10010ffe:	f1cb 0300 	rsb	r3, fp, #0
10011002:	9308      	str	r3, [sp, #32]
10011004:	2300      	movs	r3, #0
10011006:	930b      	str	r3, [sp, #44]	; 0x2c
10011008:	e7bf      	b.n	10010f8a <_dtoa_r+0x1e2>
1001100a:	2300      	movs	r3, #0
1001100c:	9309      	str	r3, [sp, #36]	; 0x24
1001100e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10011010:	2b00      	cmp	r3, #0
10011012:	dc52      	bgt.n	100110ba <_dtoa_r+0x312>
10011014:	2301      	movs	r3, #1
10011016:	9301      	str	r3, [sp, #4]
10011018:	9304      	str	r3, [sp, #16]
1001101a:	461a      	mov	r2, r3
1001101c:	920a      	str	r2, [sp, #40]	; 0x28
1001101e:	e00b      	b.n	10011038 <_dtoa_r+0x290>
10011020:	2301      	movs	r3, #1
10011022:	e7f3      	b.n	1001100c <_dtoa_r+0x264>
10011024:	2300      	movs	r3, #0
10011026:	9309      	str	r3, [sp, #36]	; 0x24
10011028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1001102a:	445b      	add	r3, fp
1001102c:	9301      	str	r3, [sp, #4]
1001102e:	3301      	adds	r3, #1
10011030:	2b01      	cmp	r3, #1
10011032:	9304      	str	r3, [sp, #16]
10011034:	bfb8      	it	lt
10011036:	2301      	movlt	r3, #1
10011038:	69e0      	ldr	r0, [r4, #28]
1001103a:	2100      	movs	r1, #0
1001103c:	2204      	movs	r2, #4
1001103e:	f102 0614 	add.w	r6, r2, #20
10011042:	429e      	cmp	r6, r3
10011044:	d93d      	bls.n	100110c2 <_dtoa_r+0x31a>
10011046:	6041      	str	r1, [r0, #4]
10011048:	4620      	mov	r0, r4
1001104a:	f000 fceb 	bl	10011a24 <_Balloc>
1001104e:	9000      	str	r0, [sp, #0]
10011050:	2800      	cmp	r0, #0
10011052:	d139      	bne.n	100110c8 <_dtoa_r+0x320>
10011054:	4b16      	ldr	r3, [pc, #88]	; (100110b0 <_dtoa_r+0x308>)
10011056:	4602      	mov	r2, r0
10011058:	f240 11af 	movw	r1, #431	; 0x1af
1001105c:	e6bd      	b.n	10010dda <_dtoa_r+0x32>
1001105e:	2301      	movs	r3, #1
10011060:	e7e1      	b.n	10011026 <_dtoa_r+0x27e>
10011062:	2501      	movs	r5, #1
10011064:	2300      	movs	r3, #0
10011066:	9307      	str	r3, [sp, #28]
10011068:	9509      	str	r5, [sp, #36]	; 0x24
1001106a:	f04f 33ff 	mov.w	r3, #4294967295
1001106e:	9301      	str	r3, [sp, #4]
10011070:	9304      	str	r3, [sp, #16]
10011072:	2200      	movs	r2, #0
10011074:	2312      	movs	r3, #18
10011076:	e7d1      	b.n	1001101c <_dtoa_r+0x274>
10011078:	636f4361 	.word	0x636f4361
1001107c:	3fd287a7 	.word	0x3fd287a7
10011080:	8b60c8b3 	.word	0x8b60c8b3
10011084:	3fc68a28 	.word	0x3fc68a28
10011088:	509f79fb 	.word	0x509f79fb
1001108c:	3fd34413 	.word	0x3fd34413
10011090:	100174d5 	.word	0x100174d5
10011094:	100174ec 	.word	0x100174ec
10011098:	7ff00000 	.word	0x7ff00000
1001109c:	100174d1 	.word	0x100174d1
100110a0:	100174c8 	.word	0x100174c8
100110a4:	100174a5 	.word	0x100174a5
100110a8:	3ff80000 	.word	0x3ff80000
100110ac:	100175d8 	.word	0x100175d8
100110b0:	10017544 	.word	0x10017544
100110b4:	2301      	movs	r3, #1
100110b6:	9309      	str	r3, [sp, #36]	; 0x24
100110b8:	e7d7      	b.n	1001106a <_dtoa_r+0x2c2>
100110ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100110bc:	9301      	str	r3, [sp, #4]
100110be:	9304      	str	r3, [sp, #16]
100110c0:	e7ba      	b.n	10011038 <_dtoa_r+0x290>
100110c2:	3101      	adds	r1, #1
100110c4:	0052      	lsls	r2, r2, #1
100110c6:	e7ba      	b.n	1001103e <_dtoa_r+0x296>
100110c8:	69e3      	ldr	r3, [r4, #28]
100110ca:	9a00      	ldr	r2, [sp, #0]
100110cc:	601a      	str	r2, [r3, #0]
100110ce:	9b04      	ldr	r3, [sp, #16]
100110d0:	2b0e      	cmp	r3, #14
100110d2:	f200 80a8 	bhi.w	10011226 <_dtoa_r+0x47e>
100110d6:	2d00      	cmp	r5, #0
100110d8:	f000 80a5 	beq.w	10011226 <_dtoa_r+0x47e>
100110dc:	f1bb 0f00 	cmp.w	fp, #0
100110e0:	dd38      	ble.n	10011154 <_dtoa_r+0x3ac>
100110e2:	4bc0      	ldr	r3, [pc, #768]	; (100113e4 <_dtoa_r+0x63c>)
100110e4:	f00b 020f 	and.w	r2, fp, #15
100110e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
100110ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
100110f0:	e9d3 6700 	ldrd	r6, r7, [r3]
100110f4:	ea4f 182b 	mov.w	r8, fp, asr #4
100110f8:	d019      	beq.n	1001112e <_dtoa_r+0x386>
100110fa:	4bbb      	ldr	r3, [pc, #748]	; (100113e8 <_dtoa_r+0x640>)
100110fc:	ec51 0b18 	vmov	r0, r1, d8
10011100:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
10011104:	f7ef faea 	bl	100006dc <__aeabi_ddiv>
10011108:	e9cd 0102 	strd	r0, r1, [sp, #8]
1001110c:	f008 080f 	and.w	r8, r8, #15
10011110:	2503      	movs	r5, #3
10011112:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 100113e8 <_dtoa_r+0x640>
10011116:	f1b8 0f00 	cmp.w	r8, #0
1001111a:	d10a      	bne.n	10011132 <_dtoa_r+0x38a>
1001111c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
10011120:	4632      	mov	r2, r6
10011122:	463b      	mov	r3, r7
10011124:	f7ef fada 	bl	100006dc <__aeabi_ddiv>
10011128:	e9cd 0102 	strd	r0, r1, [sp, #8]
1001112c:	e02b      	b.n	10011186 <_dtoa_r+0x3de>
1001112e:	2502      	movs	r5, #2
10011130:	e7ef      	b.n	10011112 <_dtoa_r+0x36a>
10011132:	f018 0f01 	tst.w	r8, #1
10011136:	d008      	beq.n	1001114a <_dtoa_r+0x3a2>
10011138:	4630      	mov	r0, r6
1001113a:	4639      	mov	r1, r7
1001113c:	e9d9 2300 	ldrd	r2, r3, [r9]
10011140:	f7ef f9a2 	bl	10000488 <__aeabi_dmul>
10011144:	3501      	adds	r5, #1
10011146:	4606      	mov	r6, r0
10011148:	460f      	mov	r7, r1
1001114a:	ea4f 0868 	mov.w	r8, r8, asr #1
1001114e:	f109 0908 	add.w	r9, r9, #8
10011152:	e7e0      	b.n	10011116 <_dtoa_r+0x36e>
10011154:	f000 809f 	beq.w	10011296 <_dtoa_r+0x4ee>
10011158:	f1cb 0600 	rsb	r6, fp, #0
1001115c:	4ba1      	ldr	r3, [pc, #644]	; (100113e4 <_dtoa_r+0x63c>)
1001115e:	4fa2      	ldr	r7, [pc, #648]	; (100113e8 <_dtoa_r+0x640>)
10011160:	f006 020f 	and.w	r2, r6, #15
10011164:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
10011168:	e9d3 2300 	ldrd	r2, r3, [r3]
1001116c:	ec51 0b18 	vmov	r0, r1, d8
10011170:	f7ef f98a 	bl	10000488 <__aeabi_dmul>
10011174:	e9cd 0102 	strd	r0, r1, [sp, #8]
10011178:	1136      	asrs	r6, r6, #4
1001117a:	2300      	movs	r3, #0
1001117c:	2502      	movs	r5, #2
1001117e:	2e00      	cmp	r6, #0
10011180:	d17e      	bne.n	10011280 <_dtoa_r+0x4d8>
10011182:	2b00      	cmp	r3, #0
10011184:	d1d0      	bne.n	10011128 <_dtoa_r+0x380>
10011186:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10011188:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
1001118c:	2b00      	cmp	r3, #0
1001118e:	f000 8084 	beq.w	1001129a <_dtoa_r+0x4f2>
10011192:	4b96      	ldr	r3, [pc, #600]	; (100113ec <_dtoa_r+0x644>)
10011194:	2200      	movs	r2, #0
10011196:	4640      	mov	r0, r8
10011198:	4649      	mov	r1, r9
1001119a:	f7ef fbe7 	bl	1000096c <__aeabi_dcmplt>
1001119e:	2800      	cmp	r0, #0
100111a0:	d07b      	beq.n	1001129a <_dtoa_r+0x4f2>
100111a2:	9b04      	ldr	r3, [sp, #16]
100111a4:	2b00      	cmp	r3, #0
100111a6:	d078      	beq.n	1001129a <_dtoa_r+0x4f2>
100111a8:	9b01      	ldr	r3, [sp, #4]
100111aa:	2b00      	cmp	r3, #0
100111ac:	dd39      	ble.n	10011222 <_dtoa_r+0x47a>
100111ae:	4b90      	ldr	r3, [pc, #576]	; (100113f0 <_dtoa_r+0x648>)
100111b0:	2200      	movs	r2, #0
100111b2:	4640      	mov	r0, r8
100111b4:	4649      	mov	r1, r9
100111b6:	f7ef f967 	bl	10000488 <__aeabi_dmul>
100111ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
100111be:	9e01      	ldr	r6, [sp, #4]
100111c0:	f10b 37ff 	add.w	r7, fp, #4294967295
100111c4:	3501      	adds	r5, #1
100111c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
100111ca:	4628      	mov	r0, r5
100111cc:	f7ef f8f2 	bl	100003b4 <__aeabi_i2d>
100111d0:	4642      	mov	r2, r8
100111d2:	464b      	mov	r3, r9
100111d4:	f7ef f958 	bl	10000488 <__aeabi_dmul>
100111d8:	4b86      	ldr	r3, [pc, #536]	; (100113f4 <_dtoa_r+0x64c>)
100111da:	2200      	movs	r2, #0
100111dc:	f7ee ff9e 	bl	1000011c <__adddf3>
100111e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
100111e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
100111e8:	9303      	str	r3, [sp, #12]
100111ea:	2e00      	cmp	r6, #0
100111ec:	d158      	bne.n	100112a0 <_dtoa_r+0x4f8>
100111ee:	4b82      	ldr	r3, [pc, #520]	; (100113f8 <_dtoa_r+0x650>)
100111f0:	2200      	movs	r2, #0
100111f2:	4640      	mov	r0, r8
100111f4:	4649      	mov	r1, r9
100111f6:	f7ee ff8f 	bl	10000118 <__aeabi_dsub>
100111fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
100111fe:	4680      	mov	r8, r0
10011200:	4689      	mov	r9, r1
10011202:	f7ef fbd1 	bl	100009a8 <__aeabi_dcmpgt>
10011206:	2800      	cmp	r0, #0
10011208:	f040 8296 	bne.w	10011738 <_dtoa_r+0x990>
1001120c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
10011210:	4640      	mov	r0, r8
10011212:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
10011216:	4649      	mov	r1, r9
10011218:	f7ef fba8 	bl	1000096c <__aeabi_dcmplt>
1001121c:	2800      	cmp	r0, #0
1001121e:	f040 8289 	bne.w	10011734 <_dtoa_r+0x98c>
10011222:	ed8d 8b02 	vstr	d8, [sp, #8]
10011226:	9b11      	ldr	r3, [sp, #68]	; 0x44
10011228:	2b00      	cmp	r3, #0
1001122a:	f2c0 814e 	blt.w	100114ca <_dtoa_r+0x722>
1001122e:	f1bb 0f0e 	cmp.w	fp, #14
10011232:	f300 814a 	bgt.w	100114ca <_dtoa_r+0x722>
10011236:	4b6b      	ldr	r3, [pc, #428]	; (100113e4 <_dtoa_r+0x63c>)
10011238:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
1001123c:	e9d3 8900 	ldrd	r8, r9, [r3]
10011240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10011242:	2b00      	cmp	r3, #0
10011244:	f280 80dc 	bge.w	10011400 <_dtoa_r+0x658>
10011248:	9b04      	ldr	r3, [sp, #16]
1001124a:	2b00      	cmp	r3, #0
1001124c:	f300 80d8 	bgt.w	10011400 <_dtoa_r+0x658>
10011250:	f040 826f 	bne.w	10011732 <_dtoa_r+0x98a>
10011254:	4b68      	ldr	r3, [pc, #416]	; (100113f8 <_dtoa_r+0x650>)
10011256:	2200      	movs	r2, #0
10011258:	4640      	mov	r0, r8
1001125a:	4649      	mov	r1, r9
1001125c:	f7ef f914 	bl	10000488 <__aeabi_dmul>
10011260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
10011264:	f7ef fb96 	bl	10000994 <__aeabi_dcmpge>
10011268:	9e04      	ldr	r6, [sp, #16]
1001126a:	4637      	mov	r7, r6
1001126c:	2800      	cmp	r0, #0
1001126e:	f040 8245 	bne.w	100116fc <_dtoa_r+0x954>
10011272:	9d00      	ldr	r5, [sp, #0]
10011274:	2331      	movs	r3, #49	; 0x31
10011276:	f805 3b01 	strb.w	r3, [r5], #1
1001127a:	f10b 0b01 	add.w	fp, fp, #1
1001127e:	e241      	b.n	10011704 <_dtoa_r+0x95c>
10011280:	07f2      	lsls	r2, r6, #31
10011282:	d505      	bpl.n	10011290 <_dtoa_r+0x4e8>
10011284:	e9d7 2300 	ldrd	r2, r3, [r7]
10011288:	f7ef f8fe 	bl	10000488 <__aeabi_dmul>
1001128c:	3501      	adds	r5, #1
1001128e:	2301      	movs	r3, #1
10011290:	1076      	asrs	r6, r6, #1
10011292:	3708      	adds	r7, #8
10011294:	e773      	b.n	1001117e <_dtoa_r+0x3d6>
10011296:	2502      	movs	r5, #2
10011298:	e775      	b.n	10011186 <_dtoa_r+0x3de>
1001129a:	9e04      	ldr	r6, [sp, #16]
1001129c:	465f      	mov	r7, fp
1001129e:	e792      	b.n	100111c6 <_dtoa_r+0x41e>
100112a0:	9900      	ldr	r1, [sp, #0]
100112a2:	4b50      	ldr	r3, [pc, #320]	; (100113e4 <_dtoa_r+0x63c>)
100112a4:	ed9d 7b02 	vldr	d7, [sp, #8]
100112a8:	4431      	add	r1, r6
100112aa:	9102      	str	r1, [sp, #8]
100112ac:	9909      	ldr	r1, [sp, #36]	; 0x24
100112ae:	eeb0 9a47 	vmov.f32	s18, s14
100112b2:	eef0 9a67 	vmov.f32	s19, s15
100112b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
100112ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
100112be:	2900      	cmp	r1, #0
100112c0:	d044      	beq.n	1001134c <_dtoa_r+0x5a4>
100112c2:	494e      	ldr	r1, [pc, #312]	; (100113fc <_dtoa_r+0x654>)
100112c4:	2000      	movs	r0, #0
100112c6:	f7ef fa09 	bl	100006dc <__aeabi_ddiv>
100112ca:	ec53 2b19 	vmov	r2, r3, d9
100112ce:	f7ee ff23 	bl	10000118 <__aeabi_dsub>
100112d2:	9d00      	ldr	r5, [sp, #0]
100112d4:	ec41 0b19 	vmov	d9, r0, r1
100112d8:	4649      	mov	r1, r9
100112da:	4640      	mov	r0, r8
100112dc:	f7ef fb84 	bl	100009e8 <__aeabi_d2iz>
100112e0:	4606      	mov	r6, r0
100112e2:	f7ef f867 	bl	100003b4 <__aeabi_i2d>
100112e6:	4602      	mov	r2, r0
100112e8:	460b      	mov	r3, r1
100112ea:	4640      	mov	r0, r8
100112ec:	4649      	mov	r1, r9
100112ee:	f7ee ff13 	bl	10000118 <__aeabi_dsub>
100112f2:	3630      	adds	r6, #48	; 0x30
100112f4:	f805 6b01 	strb.w	r6, [r5], #1
100112f8:	ec53 2b19 	vmov	r2, r3, d9
100112fc:	4680      	mov	r8, r0
100112fe:	4689      	mov	r9, r1
10011300:	f7ef fb34 	bl	1000096c <__aeabi_dcmplt>
10011304:	2800      	cmp	r0, #0
10011306:	d164      	bne.n	100113d2 <_dtoa_r+0x62a>
10011308:	4642      	mov	r2, r8
1001130a:	464b      	mov	r3, r9
1001130c:	4937      	ldr	r1, [pc, #220]	; (100113ec <_dtoa_r+0x644>)
1001130e:	2000      	movs	r0, #0
10011310:	f7ee ff02 	bl	10000118 <__aeabi_dsub>
10011314:	ec53 2b19 	vmov	r2, r3, d9
10011318:	f7ef fb28 	bl	1000096c <__aeabi_dcmplt>
1001131c:	2800      	cmp	r0, #0
1001131e:	f040 80b6 	bne.w	1001148e <_dtoa_r+0x6e6>
10011322:	9b02      	ldr	r3, [sp, #8]
10011324:	429d      	cmp	r5, r3
10011326:	f43f af7c 	beq.w	10011222 <_dtoa_r+0x47a>
1001132a:	4b31      	ldr	r3, [pc, #196]	; (100113f0 <_dtoa_r+0x648>)
1001132c:	ec51 0b19 	vmov	r0, r1, d9
10011330:	2200      	movs	r2, #0
10011332:	f7ef f8a9 	bl	10000488 <__aeabi_dmul>
10011336:	4b2e      	ldr	r3, [pc, #184]	; (100113f0 <_dtoa_r+0x648>)
10011338:	ec41 0b19 	vmov	d9, r0, r1
1001133c:	2200      	movs	r2, #0
1001133e:	4640      	mov	r0, r8
10011340:	4649      	mov	r1, r9
10011342:	f7ef f8a1 	bl	10000488 <__aeabi_dmul>
10011346:	4680      	mov	r8, r0
10011348:	4689      	mov	r9, r1
1001134a:	e7c5      	b.n	100112d8 <_dtoa_r+0x530>
1001134c:	ec51 0b17 	vmov	r0, r1, d7
10011350:	f7ef f89a 	bl	10000488 <__aeabi_dmul>
10011354:	9b02      	ldr	r3, [sp, #8]
10011356:	9d00      	ldr	r5, [sp, #0]
10011358:	930f      	str	r3, [sp, #60]	; 0x3c
1001135a:	ec41 0b19 	vmov	d9, r0, r1
1001135e:	4649      	mov	r1, r9
10011360:	4640      	mov	r0, r8
10011362:	f7ef fb41 	bl	100009e8 <__aeabi_d2iz>
10011366:	4606      	mov	r6, r0
10011368:	f7ef f824 	bl	100003b4 <__aeabi_i2d>
1001136c:	3630      	adds	r6, #48	; 0x30
1001136e:	4602      	mov	r2, r0
10011370:	460b      	mov	r3, r1
10011372:	4640      	mov	r0, r8
10011374:	4649      	mov	r1, r9
10011376:	f7ee fecf 	bl	10000118 <__aeabi_dsub>
1001137a:	f805 6b01 	strb.w	r6, [r5], #1
1001137e:	9b02      	ldr	r3, [sp, #8]
10011380:	429d      	cmp	r5, r3
10011382:	4680      	mov	r8, r0
10011384:	4689      	mov	r9, r1
10011386:	f04f 0200 	mov.w	r2, #0
1001138a:	d124      	bne.n	100113d6 <_dtoa_r+0x62e>
1001138c:	4b1b      	ldr	r3, [pc, #108]	; (100113fc <_dtoa_r+0x654>)
1001138e:	ec51 0b19 	vmov	r0, r1, d9
10011392:	f7ee fec3 	bl	1000011c <__adddf3>
10011396:	4602      	mov	r2, r0
10011398:	460b      	mov	r3, r1
1001139a:	4640      	mov	r0, r8
1001139c:	4649      	mov	r1, r9
1001139e:	f7ef fb03 	bl	100009a8 <__aeabi_dcmpgt>
100113a2:	2800      	cmp	r0, #0
100113a4:	d173      	bne.n	1001148e <_dtoa_r+0x6e6>
100113a6:	ec53 2b19 	vmov	r2, r3, d9
100113aa:	4914      	ldr	r1, [pc, #80]	; (100113fc <_dtoa_r+0x654>)
100113ac:	2000      	movs	r0, #0
100113ae:	f7ee feb3 	bl	10000118 <__aeabi_dsub>
100113b2:	4602      	mov	r2, r0
100113b4:	460b      	mov	r3, r1
100113b6:	4640      	mov	r0, r8
100113b8:	4649      	mov	r1, r9
100113ba:	f7ef fad7 	bl	1000096c <__aeabi_dcmplt>
100113be:	2800      	cmp	r0, #0
100113c0:	f43f af2f 	beq.w	10011222 <_dtoa_r+0x47a>
100113c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
100113c6:	1e6b      	subs	r3, r5, #1
100113c8:	930f      	str	r3, [sp, #60]	; 0x3c
100113ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
100113ce:	2b30      	cmp	r3, #48	; 0x30
100113d0:	d0f8      	beq.n	100113c4 <_dtoa_r+0x61c>
100113d2:	46bb      	mov	fp, r7
100113d4:	e04a      	b.n	1001146c <_dtoa_r+0x6c4>
100113d6:	4b06      	ldr	r3, [pc, #24]	; (100113f0 <_dtoa_r+0x648>)
100113d8:	f7ef f856 	bl	10000488 <__aeabi_dmul>
100113dc:	4680      	mov	r8, r0
100113de:	4689      	mov	r9, r1
100113e0:	e7bd      	b.n	1001135e <_dtoa_r+0x5b6>
100113e2:	bf00      	nop
100113e4:	100175d8 	.word	0x100175d8
100113e8:	100175b0 	.word	0x100175b0
100113ec:	3ff00000 	.word	0x3ff00000
100113f0:	40240000 	.word	0x40240000
100113f4:	401c0000 	.word	0x401c0000
100113f8:	40140000 	.word	0x40140000
100113fc:	3fe00000 	.word	0x3fe00000
10011400:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
10011404:	9d00      	ldr	r5, [sp, #0]
10011406:	4642      	mov	r2, r8
10011408:	464b      	mov	r3, r9
1001140a:	4630      	mov	r0, r6
1001140c:	4639      	mov	r1, r7
1001140e:	f7ef f965 	bl	100006dc <__aeabi_ddiv>
10011412:	f7ef fae9 	bl	100009e8 <__aeabi_d2iz>
10011416:	9001      	str	r0, [sp, #4]
10011418:	f7ee ffcc 	bl	100003b4 <__aeabi_i2d>
1001141c:	4642      	mov	r2, r8
1001141e:	464b      	mov	r3, r9
10011420:	f7ef f832 	bl	10000488 <__aeabi_dmul>
10011424:	4602      	mov	r2, r0
10011426:	460b      	mov	r3, r1
10011428:	4630      	mov	r0, r6
1001142a:	4639      	mov	r1, r7
1001142c:	f7ee fe74 	bl	10000118 <__aeabi_dsub>
10011430:	9e01      	ldr	r6, [sp, #4]
10011432:	9f04      	ldr	r7, [sp, #16]
10011434:	3630      	adds	r6, #48	; 0x30
10011436:	f805 6b01 	strb.w	r6, [r5], #1
1001143a:	9e00      	ldr	r6, [sp, #0]
1001143c:	1bae      	subs	r6, r5, r6
1001143e:	42b7      	cmp	r7, r6
10011440:	4602      	mov	r2, r0
10011442:	460b      	mov	r3, r1
10011444:	d134      	bne.n	100114b0 <_dtoa_r+0x708>
10011446:	f7ee fe69 	bl	1000011c <__adddf3>
1001144a:	4642      	mov	r2, r8
1001144c:	464b      	mov	r3, r9
1001144e:	4606      	mov	r6, r0
10011450:	460f      	mov	r7, r1
10011452:	f7ef faa9 	bl	100009a8 <__aeabi_dcmpgt>
10011456:	b9c8      	cbnz	r0, 1001148c <_dtoa_r+0x6e4>
10011458:	4642      	mov	r2, r8
1001145a:	464b      	mov	r3, r9
1001145c:	4630      	mov	r0, r6
1001145e:	4639      	mov	r1, r7
10011460:	f7ef fa7a 	bl	10000958 <__aeabi_dcmpeq>
10011464:	b110      	cbz	r0, 1001146c <_dtoa_r+0x6c4>
10011466:	9b01      	ldr	r3, [sp, #4]
10011468:	07db      	lsls	r3, r3, #31
1001146a:	d40f      	bmi.n	1001148c <_dtoa_r+0x6e4>
1001146c:	4651      	mov	r1, sl
1001146e:	4620      	mov	r0, r4
10011470:	f000 fb18 	bl	10011aa4 <_Bfree>
10011474:	2300      	movs	r3, #0
10011476:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10011478:	702b      	strb	r3, [r5, #0]
1001147a:	f10b 0301 	add.w	r3, fp, #1
1001147e:	6013      	str	r3, [r2, #0]
10011480:	9b21      	ldr	r3, [sp, #132]	; 0x84
10011482:	2b00      	cmp	r3, #0
10011484:	f43f ace2 	beq.w	10010e4c <_dtoa_r+0xa4>
10011488:	601d      	str	r5, [r3, #0]
1001148a:	e4df      	b.n	10010e4c <_dtoa_r+0xa4>
1001148c:	465f      	mov	r7, fp
1001148e:	462b      	mov	r3, r5
10011490:	461d      	mov	r5, r3
10011492:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
10011496:	2a39      	cmp	r2, #57	; 0x39
10011498:	d106      	bne.n	100114a8 <_dtoa_r+0x700>
1001149a:	9a00      	ldr	r2, [sp, #0]
1001149c:	429a      	cmp	r2, r3
1001149e:	d1f7      	bne.n	10011490 <_dtoa_r+0x6e8>
100114a0:	9900      	ldr	r1, [sp, #0]
100114a2:	2230      	movs	r2, #48	; 0x30
100114a4:	3701      	adds	r7, #1
100114a6:	700a      	strb	r2, [r1, #0]
100114a8:	781a      	ldrb	r2, [r3, #0]
100114aa:	3201      	adds	r2, #1
100114ac:	701a      	strb	r2, [r3, #0]
100114ae:	e790      	b.n	100113d2 <_dtoa_r+0x62a>
100114b0:	4ba3      	ldr	r3, [pc, #652]	; (10011740 <_dtoa_r+0x998>)
100114b2:	2200      	movs	r2, #0
100114b4:	f7ee ffe8 	bl	10000488 <__aeabi_dmul>
100114b8:	2200      	movs	r2, #0
100114ba:	2300      	movs	r3, #0
100114bc:	4606      	mov	r6, r0
100114be:	460f      	mov	r7, r1
100114c0:	f7ef fa4a 	bl	10000958 <__aeabi_dcmpeq>
100114c4:	2800      	cmp	r0, #0
100114c6:	d09e      	beq.n	10011406 <_dtoa_r+0x65e>
100114c8:	e7d0      	b.n	1001146c <_dtoa_r+0x6c4>
100114ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
100114cc:	2a00      	cmp	r2, #0
100114ce:	f000 80ca 	beq.w	10011666 <_dtoa_r+0x8be>
100114d2:	9a07      	ldr	r2, [sp, #28]
100114d4:	2a01      	cmp	r2, #1
100114d6:	f300 80ad 	bgt.w	10011634 <_dtoa_r+0x88c>
100114da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
100114dc:	2a00      	cmp	r2, #0
100114de:	f000 80a5 	beq.w	1001162c <_dtoa_r+0x884>
100114e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
100114e6:	9e08      	ldr	r6, [sp, #32]
100114e8:	9d05      	ldr	r5, [sp, #20]
100114ea:	9a05      	ldr	r2, [sp, #20]
100114ec:	441a      	add	r2, r3
100114ee:	9205      	str	r2, [sp, #20]
100114f0:	9a06      	ldr	r2, [sp, #24]
100114f2:	2101      	movs	r1, #1
100114f4:	441a      	add	r2, r3
100114f6:	4620      	mov	r0, r4
100114f8:	9206      	str	r2, [sp, #24]
100114fa:	f000 fb89 	bl	10011c10 <__i2b>
100114fe:	4607      	mov	r7, r0
10011500:	b165      	cbz	r5, 1001151c <_dtoa_r+0x774>
10011502:	9b06      	ldr	r3, [sp, #24]
10011504:	2b00      	cmp	r3, #0
10011506:	dd09      	ble.n	1001151c <_dtoa_r+0x774>
10011508:	42ab      	cmp	r3, r5
1001150a:	9a05      	ldr	r2, [sp, #20]
1001150c:	bfa8      	it	ge
1001150e:	462b      	movge	r3, r5
10011510:	1ad2      	subs	r2, r2, r3
10011512:	9205      	str	r2, [sp, #20]
10011514:	9a06      	ldr	r2, [sp, #24]
10011516:	1aed      	subs	r5, r5, r3
10011518:	1ad3      	subs	r3, r2, r3
1001151a:	9306      	str	r3, [sp, #24]
1001151c:	9b08      	ldr	r3, [sp, #32]
1001151e:	b1f3      	cbz	r3, 1001155e <_dtoa_r+0x7b6>
10011520:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011522:	2b00      	cmp	r3, #0
10011524:	f000 80a3 	beq.w	1001166e <_dtoa_r+0x8c6>
10011528:	2e00      	cmp	r6, #0
1001152a:	dd10      	ble.n	1001154e <_dtoa_r+0x7a6>
1001152c:	4639      	mov	r1, r7
1001152e:	4632      	mov	r2, r6
10011530:	4620      	mov	r0, r4
10011532:	f000 fc2d 	bl	10011d90 <__pow5mult>
10011536:	4652      	mov	r2, sl
10011538:	4601      	mov	r1, r0
1001153a:	4607      	mov	r7, r0
1001153c:	4620      	mov	r0, r4
1001153e:	f000 fb7d 	bl	10011c3c <__multiply>
10011542:	4651      	mov	r1, sl
10011544:	4680      	mov	r8, r0
10011546:	4620      	mov	r0, r4
10011548:	f000 faac 	bl	10011aa4 <_Bfree>
1001154c:	46c2      	mov	sl, r8
1001154e:	9b08      	ldr	r3, [sp, #32]
10011550:	1b9a      	subs	r2, r3, r6
10011552:	d004      	beq.n	1001155e <_dtoa_r+0x7b6>
10011554:	4651      	mov	r1, sl
10011556:	4620      	mov	r0, r4
10011558:	f000 fc1a 	bl	10011d90 <__pow5mult>
1001155c:	4682      	mov	sl, r0
1001155e:	2101      	movs	r1, #1
10011560:	4620      	mov	r0, r4
10011562:	f000 fb55 	bl	10011c10 <__i2b>
10011566:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10011568:	2b00      	cmp	r3, #0
1001156a:	4606      	mov	r6, r0
1001156c:	f340 8081 	ble.w	10011672 <_dtoa_r+0x8ca>
10011570:	461a      	mov	r2, r3
10011572:	4601      	mov	r1, r0
10011574:	4620      	mov	r0, r4
10011576:	f000 fc0b 	bl	10011d90 <__pow5mult>
1001157a:	9b07      	ldr	r3, [sp, #28]
1001157c:	2b01      	cmp	r3, #1
1001157e:	4606      	mov	r6, r0
10011580:	dd7a      	ble.n	10011678 <_dtoa_r+0x8d0>
10011582:	f04f 0800 	mov.w	r8, #0
10011586:	6933      	ldr	r3, [r6, #16]
10011588:	eb06 0383 	add.w	r3, r6, r3, lsl #2
1001158c:	6918      	ldr	r0, [r3, #16]
1001158e:	f000 faf1 	bl	10011b74 <__hi0bits>
10011592:	f1c0 0020 	rsb	r0, r0, #32
10011596:	9b06      	ldr	r3, [sp, #24]
10011598:	4418      	add	r0, r3
1001159a:	f010 001f 	ands.w	r0, r0, #31
1001159e:	f000 8094 	beq.w	100116ca <_dtoa_r+0x922>
100115a2:	f1c0 0320 	rsb	r3, r0, #32
100115a6:	2b04      	cmp	r3, #4
100115a8:	f340 8085 	ble.w	100116b6 <_dtoa_r+0x90e>
100115ac:	9b05      	ldr	r3, [sp, #20]
100115ae:	f1c0 001c 	rsb	r0, r0, #28
100115b2:	4403      	add	r3, r0
100115b4:	9305      	str	r3, [sp, #20]
100115b6:	9b06      	ldr	r3, [sp, #24]
100115b8:	4403      	add	r3, r0
100115ba:	4405      	add	r5, r0
100115bc:	9306      	str	r3, [sp, #24]
100115be:	9b05      	ldr	r3, [sp, #20]
100115c0:	2b00      	cmp	r3, #0
100115c2:	dd05      	ble.n	100115d0 <_dtoa_r+0x828>
100115c4:	4651      	mov	r1, sl
100115c6:	461a      	mov	r2, r3
100115c8:	4620      	mov	r0, r4
100115ca:	f000 fc3b 	bl	10011e44 <__lshift>
100115ce:	4682      	mov	sl, r0
100115d0:	9b06      	ldr	r3, [sp, #24]
100115d2:	2b00      	cmp	r3, #0
100115d4:	dd05      	ble.n	100115e2 <_dtoa_r+0x83a>
100115d6:	4631      	mov	r1, r6
100115d8:	461a      	mov	r2, r3
100115da:	4620      	mov	r0, r4
100115dc:	f000 fc32 	bl	10011e44 <__lshift>
100115e0:	4606      	mov	r6, r0
100115e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100115e4:	2b00      	cmp	r3, #0
100115e6:	d072      	beq.n	100116ce <_dtoa_r+0x926>
100115e8:	4631      	mov	r1, r6
100115ea:	4650      	mov	r0, sl
100115ec:	f000 fc96 	bl	10011f1c <__mcmp>
100115f0:	2800      	cmp	r0, #0
100115f2:	da6c      	bge.n	100116ce <_dtoa_r+0x926>
100115f4:	2300      	movs	r3, #0
100115f6:	4651      	mov	r1, sl
100115f8:	220a      	movs	r2, #10
100115fa:	4620      	mov	r0, r4
100115fc:	f000 fa74 	bl	10011ae8 <__multadd>
10011600:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011602:	f10b 3bff 	add.w	fp, fp, #4294967295
10011606:	4682      	mov	sl, r0
10011608:	2b00      	cmp	r3, #0
1001160a:	f000 81b0 	beq.w	1001196e <_dtoa_r+0xbc6>
1001160e:	2300      	movs	r3, #0
10011610:	4639      	mov	r1, r7
10011612:	220a      	movs	r2, #10
10011614:	4620      	mov	r0, r4
10011616:	f000 fa67 	bl	10011ae8 <__multadd>
1001161a:	9b01      	ldr	r3, [sp, #4]
1001161c:	2b00      	cmp	r3, #0
1001161e:	4607      	mov	r7, r0
10011620:	f300 8096 	bgt.w	10011750 <_dtoa_r+0x9a8>
10011624:	9b07      	ldr	r3, [sp, #28]
10011626:	2b02      	cmp	r3, #2
10011628:	dc59      	bgt.n	100116de <_dtoa_r+0x936>
1001162a:	e091      	b.n	10011750 <_dtoa_r+0x9a8>
1001162c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1001162e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
10011632:	e758      	b.n	100114e6 <_dtoa_r+0x73e>
10011634:	9b04      	ldr	r3, [sp, #16]
10011636:	1e5e      	subs	r6, r3, #1
10011638:	9b08      	ldr	r3, [sp, #32]
1001163a:	42b3      	cmp	r3, r6
1001163c:	bfbf      	itttt	lt
1001163e:	9b08      	ldrlt	r3, [sp, #32]
10011640:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
10011642:	9608      	strlt	r6, [sp, #32]
10011644:	1af3      	sublt	r3, r6, r3
10011646:	bfb4      	ite	lt
10011648:	18d2      	addlt	r2, r2, r3
1001164a:	1b9e      	subge	r6, r3, r6
1001164c:	9b04      	ldr	r3, [sp, #16]
1001164e:	bfbc      	itt	lt
10011650:	920b      	strlt	r2, [sp, #44]	; 0x2c
10011652:	2600      	movlt	r6, #0
10011654:	2b00      	cmp	r3, #0
10011656:	bfb7      	itett	lt
10011658:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
1001165c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
10011660:	1a9d      	sublt	r5, r3, r2
10011662:	2300      	movlt	r3, #0
10011664:	e741      	b.n	100114ea <_dtoa_r+0x742>
10011666:	9e08      	ldr	r6, [sp, #32]
10011668:	9d05      	ldr	r5, [sp, #20]
1001166a:	9f09      	ldr	r7, [sp, #36]	; 0x24
1001166c:	e748      	b.n	10011500 <_dtoa_r+0x758>
1001166e:	9a08      	ldr	r2, [sp, #32]
10011670:	e770      	b.n	10011554 <_dtoa_r+0x7ac>
10011672:	9b07      	ldr	r3, [sp, #28]
10011674:	2b01      	cmp	r3, #1
10011676:	dc19      	bgt.n	100116ac <_dtoa_r+0x904>
10011678:	9b02      	ldr	r3, [sp, #8]
1001167a:	b9bb      	cbnz	r3, 100116ac <_dtoa_r+0x904>
1001167c:	9b03      	ldr	r3, [sp, #12]
1001167e:	f3c3 0313 	ubfx	r3, r3, #0, #20
10011682:	b99b      	cbnz	r3, 100116ac <_dtoa_r+0x904>
10011684:	9b03      	ldr	r3, [sp, #12]
10011686:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
1001168a:	0d1b      	lsrs	r3, r3, #20
1001168c:	051b      	lsls	r3, r3, #20
1001168e:	b183      	cbz	r3, 100116b2 <_dtoa_r+0x90a>
10011690:	9b05      	ldr	r3, [sp, #20]
10011692:	3301      	adds	r3, #1
10011694:	9305      	str	r3, [sp, #20]
10011696:	9b06      	ldr	r3, [sp, #24]
10011698:	3301      	adds	r3, #1
1001169a:	9306      	str	r3, [sp, #24]
1001169c:	f04f 0801 	mov.w	r8, #1
100116a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100116a2:	2b00      	cmp	r3, #0
100116a4:	f47f af6f 	bne.w	10011586 <_dtoa_r+0x7de>
100116a8:	2001      	movs	r0, #1
100116aa:	e774      	b.n	10011596 <_dtoa_r+0x7ee>
100116ac:	f04f 0800 	mov.w	r8, #0
100116b0:	e7f6      	b.n	100116a0 <_dtoa_r+0x8f8>
100116b2:	4698      	mov	r8, r3
100116b4:	e7f4      	b.n	100116a0 <_dtoa_r+0x8f8>
100116b6:	d082      	beq.n	100115be <_dtoa_r+0x816>
100116b8:	9a05      	ldr	r2, [sp, #20]
100116ba:	331c      	adds	r3, #28
100116bc:	441a      	add	r2, r3
100116be:	9205      	str	r2, [sp, #20]
100116c0:	9a06      	ldr	r2, [sp, #24]
100116c2:	441a      	add	r2, r3
100116c4:	441d      	add	r5, r3
100116c6:	9206      	str	r2, [sp, #24]
100116c8:	e779      	b.n	100115be <_dtoa_r+0x816>
100116ca:	4603      	mov	r3, r0
100116cc:	e7f4      	b.n	100116b8 <_dtoa_r+0x910>
100116ce:	9b04      	ldr	r3, [sp, #16]
100116d0:	2b00      	cmp	r3, #0
100116d2:	dc37      	bgt.n	10011744 <_dtoa_r+0x99c>
100116d4:	9b07      	ldr	r3, [sp, #28]
100116d6:	2b02      	cmp	r3, #2
100116d8:	dd34      	ble.n	10011744 <_dtoa_r+0x99c>
100116da:	9b04      	ldr	r3, [sp, #16]
100116dc:	9301      	str	r3, [sp, #4]
100116de:	9b01      	ldr	r3, [sp, #4]
100116e0:	b963      	cbnz	r3, 100116fc <_dtoa_r+0x954>
100116e2:	4631      	mov	r1, r6
100116e4:	2205      	movs	r2, #5
100116e6:	4620      	mov	r0, r4
100116e8:	f000 f9fe 	bl	10011ae8 <__multadd>
100116ec:	4601      	mov	r1, r0
100116ee:	4606      	mov	r6, r0
100116f0:	4650      	mov	r0, sl
100116f2:	f000 fc13 	bl	10011f1c <__mcmp>
100116f6:	2800      	cmp	r0, #0
100116f8:	f73f adbb 	bgt.w	10011272 <_dtoa_r+0x4ca>
100116fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100116fe:	9d00      	ldr	r5, [sp, #0]
10011700:	ea6f 0b03 	mvn.w	fp, r3
10011704:	f04f 0800 	mov.w	r8, #0
10011708:	4631      	mov	r1, r6
1001170a:	4620      	mov	r0, r4
1001170c:	f000 f9ca 	bl	10011aa4 <_Bfree>
10011710:	2f00      	cmp	r7, #0
10011712:	f43f aeab 	beq.w	1001146c <_dtoa_r+0x6c4>
10011716:	f1b8 0f00 	cmp.w	r8, #0
1001171a:	d005      	beq.n	10011728 <_dtoa_r+0x980>
1001171c:	45b8      	cmp	r8, r7
1001171e:	d003      	beq.n	10011728 <_dtoa_r+0x980>
10011720:	4641      	mov	r1, r8
10011722:	4620      	mov	r0, r4
10011724:	f000 f9be 	bl	10011aa4 <_Bfree>
10011728:	4639      	mov	r1, r7
1001172a:	4620      	mov	r0, r4
1001172c:	f000 f9ba 	bl	10011aa4 <_Bfree>
10011730:	e69c      	b.n	1001146c <_dtoa_r+0x6c4>
10011732:	2600      	movs	r6, #0
10011734:	4637      	mov	r7, r6
10011736:	e7e1      	b.n	100116fc <_dtoa_r+0x954>
10011738:	46bb      	mov	fp, r7
1001173a:	4637      	mov	r7, r6
1001173c:	e599      	b.n	10011272 <_dtoa_r+0x4ca>
1001173e:	bf00      	nop
10011740:	40240000 	.word	0x40240000
10011744:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011746:	2b00      	cmp	r3, #0
10011748:	f000 80c8 	beq.w	100118dc <_dtoa_r+0xb34>
1001174c:	9b04      	ldr	r3, [sp, #16]
1001174e:	9301      	str	r3, [sp, #4]
10011750:	2d00      	cmp	r5, #0
10011752:	dd05      	ble.n	10011760 <_dtoa_r+0x9b8>
10011754:	4639      	mov	r1, r7
10011756:	462a      	mov	r2, r5
10011758:	4620      	mov	r0, r4
1001175a:	f000 fb73 	bl	10011e44 <__lshift>
1001175e:	4607      	mov	r7, r0
10011760:	f1b8 0f00 	cmp.w	r8, #0
10011764:	d05b      	beq.n	1001181e <_dtoa_r+0xa76>
10011766:	6879      	ldr	r1, [r7, #4]
10011768:	4620      	mov	r0, r4
1001176a:	f000 f95b 	bl	10011a24 <_Balloc>
1001176e:	4605      	mov	r5, r0
10011770:	b928      	cbnz	r0, 1001177e <_dtoa_r+0x9d6>
10011772:	4b83      	ldr	r3, [pc, #524]	; (10011980 <_dtoa_r+0xbd8>)
10011774:	4602      	mov	r2, r0
10011776:	f240 21ef 	movw	r1, #751	; 0x2ef
1001177a:	f7ff bb2e 	b.w	10010dda <_dtoa_r+0x32>
1001177e:	693a      	ldr	r2, [r7, #16]
10011780:	3202      	adds	r2, #2
10011782:	0092      	lsls	r2, r2, #2
10011784:	f107 010c 	add.w	r1, r7, #12
10011788:	300c      	adds	r0, #12
1001178a:	f7ff fa6e 	bl	10010c6a <memcpy>
1001178e:	2201      	movs	r2, #1
10011790:	4629      	mov	r1, r5
10011792:	4620      	mov	r0, r4
10011794:	f000 fb56 	bl	10011e44 <__lshift>
10011798:	9b00      	ldr	r3, [sp, #0]
1001179a:	3301      	adds	r3, #1
1001179c:	9304      	str	r3, [sp, #16]
1001179e:	e9dd 2300 	ldrd	r2, r3, [sp]
100117a2:	4413      	add	r3, r2
100117a4:	9308      	str	r3, [sp, #32]
100117a6:	9b02      	ldr	r3, [sp, #8]
100117a8:	f003 0301 	and.w	r3, r3, #1
100117ac:	46b8      	mov	r8, r7
100117ae:	9306      	str	r3, [sp, #24]
100117b0:	4607      	mov	r7, r0
100117b2:	9b04      	ldr	r3, [sp, #16]
100117b4:	4631      	mov	r1, r6
100117b6:	3b01      	subs	r3, #1
100117b8:	4650      	mov	r0, sl
100117ba:	9301      	str	r3, [sp, #4]
100117bc:	f7ff fa6a 	bl	10010c94 <quorem>
100117c0:	4641      	mov	r1, r8
100117c2:	9002      	str	r0, [sp, #8]
100117c4:	f100 0930 	add.w	r9, r0, #48	; 0x30
100117c8:	4650      	mov	r0, sl
100117ca:	f000 fba7 	bl	10011f1c <__mcmp>
100117ce:	463a      	mov	r2, r7
100117d0:	9005      	str	r0, [sp, #20]
100117d2:	4631      	mov	r1, r6
100117d4:	4620      	mov	r0, r4
100117d6:	f000 fbbd 	bl	10011f54 <__mdiff>
100117da:	68c2      	ldr	r2, [r0, #12]
100117dc:	4605      	mov	r5, r0
100117de:	bb02      	cbnz	r2, 10011822 <_dtoa_r+0xa7a>
100117e0:	4601      	mov	r1, r0
100117e2:	4650      	mov	r0, sl
100117e4:	f000 fb9a 	bl	10011f1c <__mcmp>
100117e8:	4602      	mov	r2, r0
100117ea:	4629      	mov	r1, r5
100117ec:	4620      	mov	r0, r4
100117ee:	9209      	str	r2, [sp, #36]	; 0x24
100117f0:	f000 f958 	bl	10011aa4 <_Bfree>
100117f4:	9b07      	ldr	r3, [sp, #28]
100117f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
100117f8:	9d04      	ldr	r5, [sp, #16]
100117fa:	ea43 0102 	orr.w	r1, r3, r2
100117fe:	9b06      	ldr	r3, [sp, #24]
10011800:	4319      	orrs	r1, r3
10011802:	d110      	bne.n	10011826 <_dtoa_r+0xa7e>
10011804:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
10011808:	d029      	beq.n	1001185e <_dtoa_r+0xab6>
1001180a:	9b05      	ldr	r3, [sp, #20]
1001180c:	2b00      	cmp	r3, #0
1001180e:	dd02      	ble.n	10011816 <_dtoa_r+0xa6e>
10011810:	9b02      	ldr	r3, [sp, #8]
10011812:	f103 0931 	add.w	r9, r3, #49	; 0x31
10011816:	9b01      	ldr	r3, [sp, #4]
10011818:	f883 9000 	strb.w	r9, [r3]
1001181c:	e774      	b.n	10011708 <_dtoa_r+0x960>
1001181e:	4638      	mov	r0, r7
10011820:	e7ba      	b.n	10011798 <_dtoa_r+0x9f0>
10011822:	2201      	movs	r2, #1
10011824:	e7e1      	b.n	100117ea <_dtoa_r+0xa42>
10011826:	9b05      	ldr	r3, [sp, #20]
10011828:	2b00      	cmp	r3, #0
1001182a:	db04      	blt.n	10011836 <_dtoa_r+0xa8e>
1001182c:	9907      	ldr	r1, [sp, #28]
1001182e:	430b      	orrs	r3, r1
10011830:	9906      	ldr	r1, [sp, #24]
10011832:	430b      	orrs	r3, r1
10011834:	d120      	bne.n	10011878 <_dtoa_r+0xad0>
10011836:	2a00      	cmp	r2, #0
10011838:	dded      	ble.n	10011816 <_dtoa_r+0xa6e>
1001183a:	4651      	mov	r1, sl
1001183c:	2201      	movs	r2, #1
1001183e:	4620      	mov	r0, r4
10011840:	f000 fb00 	bl	10011e44 <__lshift>
10011844:	4631      	mov	r1, r6
10011846:	4682      	mov	sl, r0
10011848:	f000 fb68 	bl	10011f1c <__mcmp>
1001184c:	2800      	cmp	r0, #0
1001184e:	dc03      	bgt.n	10011858 <_dtoa_r+0xab0>
10011850:	d1e1      	bne.n	10011816 <_dtoa_r+0xa6e>
10011852:	f019 0f01 	tst.w	r9, #1
10011856:	d0de      	beq.n	10011816 <_dtoa_r+0xa6e>
10011858:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
1001185c:	d1d8      	bne.n	10011810 <_dtoa_r+0xa68>
1001185e:	9a01      	ldr	r2, [sp, #4]
10011860:	2339      	movs	r3, #57	; 0x39
10011862:	7013      	strb	r3, [r2, #0]
10011864:	462b      	mov	r3, r5
10011866:	461d      	mov	r5, r3
10011868:	3b01      	subs	r3, #1
1001186a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
1001186e:	2a39      	cmp	r2, #57	; 0x39
10011870:	d06c      	beq.n	1001194c <_dtoa_r+0xba4>
10011872:	3201      	adds	r2, #1
10011874:	701a      	strb	r2, [r3, #0]
10011876:	e747      	b.n	10011708 <_dtoa_r+0x960>
10011878:	2a00      	cmp	r2, #0
1001187a:	dd07      	ble.n	1001188c <_dtoa_r+0xae4>
1001187c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
10011880:	d0ed      	beq.n	1001185e <_dtoa_r+0xab6>
10011882:	9a01      	ldr	r2, [sp, #4]
10011884:	f109 0301 	add.w	r3, r9, #1
10011888:	7013      	strb	r3, [r2, #0]
1001188a:	e73d      	b.n	10011708 <_dtoa_r+0x960>
1001188c:	9b04      	ldr	r3, [sp, #16]
1001188e:	9a08      	ldr	r2, [sp, #32]
10011890:	f803 9c01 	strb.w	r9, [r3, #-1]
10011894:	4293      	cmp	r3, r2
10011896:	d043      	beq.n	10011920 <_dtoa_r+0xb78>
10011898:	4651      	mov	r1, sl
1001189a:	2300      	movs	r3, #0
1001189c:	220a      	movs	r2, #10
1001189e:	4620      	mov	r0, r4
100118a0:	f000 f922 	bl	10011ae8 <__multadd>
100118a4:	45b8      	cmp	r8, r7
100118a6:	4682      	mov	sl, r0
100118a8:	f04f 0300 	mov.w	r3, #0
100118ac:	f04f 020a 	mov.w	r2, #10
100118b0:	4641      	mov	r1, r8
100118b2:	4620      	mov	r0, r4
100118b4:	d107      	bne.n	100118c6 <_dtoa_r+0xb1e>
100118b6:	f000 f917 	bl	10011ae8 <__multadd>
100118ba:	4680      	mov	r8, r0
100118bc:	4607      	mov	r7, r0
100118be:	9b04      	ldr	r3, [sp, #16]
100118c0:	3301      	adds	r3, #1
100118c2:	9304      	str	r3, [sp, #16]
100118c4:	e775      	b.n	100117b2 <_dtoa_r+0xa0a>
100118c6:	f000 f90f 	bl	10011ae8 <__multadd>
100118ca:	4639      	mov	r1, r7
100118cc:	4680      	mov	r8, r0
100118ce:	2300      	movs	r3, #0
100118d0:	220a      	movs	r2, #10
100118d2:	4620      	mov	r0, r4
100118d4:	f000 f908 	bl	10011ae8 <__multadd>
100118d8:	4607      	mov	r7, r0
100118da:	e7f0      	b.n	100118be <_dtoa_r+0xb16>
100118dc:	9b04      	ldr	r3, [sp, #16]
100118de:	9301      	str	r3, [sp, #4]
100118e0:	9d00      	ldr	r5, [sp, #0]
100118e2:	4631      	mov	r1, r6
100118e4:	4650      	mov	r0, sl
100118e6:	f7ff f9d5 	bl	10010c94 <quorem>
100118ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
100118ee:	9b00      	ldr	r3, [sp, #0]
100118f0:	f805 9b01 	strb.w	r9, [r5], #1
100118f4:	1aea      	subs	r2, r5, r3
100118f6:	9b01      	ldr	r3, [sp, #4]
100118f8:	4293      	cmp	r3, r2
100118fa:	dd07      	ble.n	1001190c <_dtoa_r+0xb64>
100118fc:	4651      	mov	r1, sl
100118fe:	2300      	movs	r3, #0
10011900:	220a      	movs	r2, #10
10011902:	4620      	mov	r0, r4
10011904:	f000 f8f0 	bl	10011ae8 <__multadd>
10011908:	4682      	mov	sl, r0
1001190a:	e7ea      	b.n	100118e2 <_dtoa_r+0xb3a>
1001190c:	9b01      	ldr	r3, [sp, #4]
1001190e:	2b00      	cmp	r3, #0
10011910:	bfc8      	it	gt
10011912:	461d      	movgt	r5, r3
10011914:	9b00      	ldr	r3, [sp, #0]
10011916:	bfd8      	it	le
10011918:	2501      	movle	r5, #1
1001191a:	441d      	add	r5, r3
1001191c:	f04f 0800 	mov.w	r8, #0
10011920:	4651      	mov	r1, sl
10011922:	2201      	movs	r2, #1
10011924:	4620      	mov	r0, r4
10011926:	f000 fa8d 	bl	10011e44 <__lshift>
1001192a:	4631      	mov	r1, r6
1001192c:	4682      	mov	sl, r0
1001192e:	f000 faf5 	bl	10011f1c <__mcmp>
10011932:	2800      	cmp	r0, #0
10011934:	dc96      	bgt.n	10011864 <_dtoa_r+0xabc>
10011936:	d102      	bne.n	1001193e <_dtoa_r+0xb96>
10011938:	f019 0f01 	tst.w	r9, #1
1001193c:	d192      	bne.n	10011864 <_dtoa_r+0xabc>
1001193e:	462b      	mov	r3, r5
10011940:	461d      	mov	r5, r3
10011942:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
10011946:	2a30      	cmp	r2, #48	; 0x30
10011948:	d0fa      	beq.n	10011940 <_dtoa_r+0xb98>
1001194a:	e6dd      	b.n	10011708 <_dtoa_r+0x960>
1001194c:	9a00      	ldr	r2, [sp, #0]
1001194e:	429a      	cmp	r2, r3
10011950:	d189      	bne.n	10011866 <_dtoa_r+0xabe>
10011952:	f10b 0b01 	add.w	fp, fp, #1
10011956:	2331      	movs	r3, #49	; 0x31
10011958:	e796      	b.n	10011888 <_dtoa_r+0xae0>
1001195a:	4b0a      	ldr	r3, [pc, #40]	; (10011984 <_dtoa_r+0xbdc>)
1001195c:	f7ff ba99 	b.w	10010e92 <_dtoa_r+0xea>
10011960:	9b21      	ldr	r3, [sp, #132]	; 0x84
10011962:	2b00      	cmp	r3, #0
10011964:	f47f aa6d 	bne.w	10010e42 <_dtoa_r+0x9a>
10011968:	4b07      	ldr	r3, [pc, #28]	; (10011988 <_dtoa_r+0xbe0>)
1001196a:	f7ff ba92 	b.w	10010e92 <_dtoa_r+0xea>
1001196e:	9b01      	ldr	r3, [sp, #4]
10011970:	2b00      	cmp	r3, #0
10011972:	dcb5      	bgt.n	100118e0 <_dtoa_r+0xb38>
10011974:	9b07      	ldr	r3, [sp, #28]
10011976:	2b02      	cmp	r3, #2
10011978:	f73f aeb1 	bgt.w	100116de <_dtoa_r+0x936>
1001197c:	e7b0      	b.n	100118e0 <_dtoa_r+0xb38>
1001197e:	bf00      	nop
10011980:	10017544 	.word	0x10017544
10011984:	100174a4 	.word	0x100174a4
10011988:	100174c8 	.word	0x100174c8

1001198c <_free_r>:
1001198c:	b537      	push	{r0, r1, r2, r4, r5, lr}
1001198e:	2900      	cmp	r1, #0
10011990:	d044      	beq.n	10011a1c <_free_r+0x90>
10011992:	f851 3c04 	ldr.w	r3, [r1, #-4]
10011996:	9001      	str	r0, [sp, #4]
10011998:	2b00      	cmp	r3, #0
1001199a:	f1a1 0404 	sub.w	r4, r1, #4
1001199e:	bfb8      	it	lt
100119a0:	18e4      	addlt	r4, r4, r3
100119a2:	f7fe fad5 	bl	1000ff50 <__malloc_lock>
100119a6:	4a1e      	ldr	r2, [pc, #120]	; (10011a20 <_free_r+0x94>)
100119a8:	9801      	ldr	r0, [sp, #4]
100119aa:	6813      	ldr	r3, [r2, #0]
100119ac:	b933      	cbnz	r3, 100119bc <_free_r+0x30>
100119ae:	6063      	str	r3, [r4, #4]
100119b0:	6014      	str	r4, [r2, #0]
100119b2:	b003      	add	sp, #12
100119b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
100119b8:	f7fe bad0 	b.w	1000ff5c <__malloc_unlock>
100119bc:	42a3      	cmp	r3, r4
100119be:	d908      	bls.n	100119d2 <_free_r+0x46>
100119c0:	6825      	ldr	r5, [r4, #0]
100119c2:	1961      	adds	r1, r4, r5
100119c4:	428b      	cmp	r3, r1
100119c6:	bf01      	itttt	eq
100119c8:	6819      	ldreq	r1, [r3, #0]
100119ca:	685b      	ldreq	r3, [r3, #4]
100119cc:	1949      	addeq	r1, r1, r5
100119ce:	6021      	streq	r1, [r4, #0]
100119d0:	e7ed      	b.n	100119ae <_free_r+0x22>
100119d2:	461a      	mov	r2, r3
100119d4:	685b      	ldr	r3, [r3, #4]
100119d6:	b10b      	cbz	r3, 100119dc <_free_r+0x50>
100119d8:	42a3      	cmp	r3, r4
100119da:	d9fa      	bls.n	100119d2 <_free_r+0x46>
100119dc:	6811      	ldr	r1, [r2, #0]
100119de:	1855      	adds	r5, r2, r1
100119e0:	42a5      	cmp	r5, r4
100119e2:	d10b      	bne.n	100119fc <_free_r+0x70>
100119e4:	6824      	ldr	r4, [r4, #0]
100119e6:	4421      	add	r1, r4
100119e8:	1854      	adds	r4, r2, r1
100119ea:	42a3      	cmp	r3, r4
100119ec:	6011      	str	r1, [r2, #0]
100119ee:	d1e0      	bne.n	100119b2 <_free_r+0x26>
100119f0:	681c      	ldr	r4, [r3, #0]
100119f2:	685b      	ldr	r3, [r3, #4]
100119f4:	6053      	str	r3, [r2, #4]
100119f6:	440c      	add	r4, r1
100119f8:	6014      	str	r4, [r2, #0]
100119fa:	e7da      	b.n	100119b2 <_free_r+0x26>
100119fc:	d902      	bls.n	10011a04 <_free_r+0x78>
100119fe:	230c      	movs	r3, #12
10011a00:	6003      	str	r3, [r0, #0]
10011a02:	e7d6      	b.n	100119b2 <_free_r+0x26>
10011a04:	6825      	ldr	r5, [r4, #0]
10011a06:	1961      	adds	r1, r4, r5
10011a08:	428b      	cmp	r3, r1
10011a0a:	bf04      	itt	eq
10011a0c:	6819      	ldreq	r1, [r3, #0]
10011a0e:	685b      	ldreq	r3, [r3, #4]
10011a10:	6063      	str	r3, [r4, #4]
10011a12:	bf04      	itt	eq
10011a14:	1949      	addeq	r1, r1, r5
10011a16:	6021      	streq	r1, [r4, #0]
10011a18:	6054      	str	r4, [r2, #4]
10011a1a:	e7ca      	b.n	100119b2 <_free_r+0x26>
10011a1c:	b003      	add	sp, #12
10011a1e:	bd30      	pop	{r4, r5, pc}
10011a20:	10029d4c 	.word	0x10029d4c

10011a24 <_Balloc>:
10011a24:	b570      	push	{r4, r5, r6, lr}
10011a26:	69c6      	ldr	r6, [r0, #28]
10011a28:	4604      	mov	r4, r0
10011a2a:	460d      	mov	r5, r1
10011a2c:	b976      	cbnz	r6, 10011a4c <_Balloc+0x28>
10011a2e:	2010      	movs	r0, #16
10011a30:	f7fe f9de 	bl	1000fdf0 <malloc>
10011a34:	4602      	mov	r2, r0
10011a36:	61e0      	str	r0, [r4, #28]
10011a38:	b920      	cbnz	r0, 10011a44 <_Balloc+0x20>
10011a3a:	4b18      	ldr	r3, [pc, #96]	; (10011a9c <_Balloc+0x78>)
10011a3c:	4818      	ldr	r0, [pc, #96]	; (10011aa0 <_Balloc+0x7c>)
10011a3e:	216b      	movs	r1, #107	; 0x6b
10011a40:	f7fe f9b8 	bl	1000fdb4 <__assert_func>
10011a44:	e9c0 6601 	strd	r6, r6, [r0, #4]
10011a48:	6006      	str	r6, [r0, #0]
10011a4a:	60c6      	str	r6, [r0, #12]
10011a4c:	69e6      	ldr	r6, [r4, #28]
10011a4e:	68f3      	ldr	r3, [r6, #12]
10011a50:	b183      	cbz	r3, 10011a74 <_Balloc+0x50>
10011a52:	69e3      	ldr	r3, [r4, #28]
10011a54:	68db      	ldr	r3, [r3, #12]
10011a56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
10011a5a:	b9b8      	cbnz	r0, 10011a8c <_Balloc+0x68>
10011a5c:	2101      	movs	r1, #1
10011a5e:	fa01 f605 	lsl.w	r6, r1, r5
10011a62:	1d72      	adds	r2, r6, #5
10011a64:	0092      	lsls	r2, r2, #2
10011a66:	4620      	mov	r0, r4
10011a68:	f000 ff9e 	bl	100129a8 <_calloc_r>
10011a6c:	b160      	cbz	r0, 10011a88 <_Balloc+0x64>
10011a6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
10011a72:	e00e      	b.n	10011a92 <_Balloc+0x6e>
10011a74:	2221      	movs	r2, #33	; 0x21
10011a76:	2104      	movs	r1, #4
10011a78:	4620      	mov	r0, r4
10011a7a:	f000 ff95 	bl	100129a8 <_calloc_r>
10011a7e:	69e3      	ldr	r3, [r4, #28]
10011a80:	60f0      	str	r0, [r6, #12]
10011a82:	68db      	ldr	r3, [r3, #12]
10011a84:	2b00      	cmp	r3, #0
10011a86:	d1e4      	bne.n	10011a52 <_Balloc+0x2e>
10011a88:	2000      	movs	r0, #0
10011a8a:	bd70      	pop	{r4, r5, r6, pc}
10011a8c:	6802      	ldr	r2, [r0, #0]
10011a8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
10011a92:	2300      	movs	r3, #0
10011a94:	e9c0 3303 	strd	r3, r3, [r0, #12]
10011a98:	e7f7      	b.n	10011a8a <_Balloc+0x66>
10011a9a:	bf00      	nop
10011a9c:	100174d5 	.word	0x100174d5
10011aa0:	10017555 	.word	0x10017555

10011aa4 <_Bfree>:
10011aa4:	b570      	push	{r4, r5, r6, lr}
10011aa6:	69c6      	ldr	r6, [r0, #28]
10011aa8:	4605      	mov	r5, r0
10011aaa:	460c      	mov	r4, r1
10011aac:	b976      	cbnz	r6, 10011acc <_Bfree+0x28>
10011aae:	2010      	movs	r0, #16
10011ab0:	f7fe f99e 	bl	1000fdf0 <malloc>
10011ab4:	4602      	mov	r2, r0
10011ab6:	61e8      	str	r0, [r5, #28]
10011ab8:	b920      	cbnz	r0, 10011ac4 <_Bfree+0x20>
10011aba:	4b09      	ldr	r3, [pc, #36]	; (10011ae0 <_Bfree+0x3c>)
10011abc:	4809      	ldr	r0, [pc, #36]	; (10011ae4 <_Bfree+0x40>)
10011abe:	218f      	movs	r1, #143	; 0x8f
10011ac0:	f7fe f978 	bl	1000fdb4 <__assert_func>
10011ac4:	e9c0 6601 	strd	r6, r6, [r0, #4]
10011ac8:	6006      	str	r6, [r0, #0]
10011aca:	60c6      	str	r6, [r0, #12]
10011acc:	b13c      	cbz	r4, 10011ade <_Bfree+0x3a>
10011ace:	69eb      	ldr	r3, [r5, #28]
10011ad0:	6862      	ldr	r2, [r4, #4]
10011ad2:	68db      	ldr	r3, [r3, #12]
10011ad4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
10011ad8:	6021      	str	r1, [r4, #0]
10011ada:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
10011ade:	bd70      	pop	{r4, r5, r6, pc}
10011ae0:	100174d5 	.word	0x100174d5
10011ae4:	10017555 	.word	0x10017555

10011ae8 <__multadd>:
10011ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10011aec:	690d      	ldr	r5, [r1, #16]
10011aee:	4607      	mov	r7, r0
10011af0:	460c      	mov	r4, r1
10011af2:	461e      	mov	r6, r3
10011af4:	f101 0c14 	add.w	ip, r1, #20
10011af8:	2000      	movs	r0, #0
10011afa:	f8dc 3000 	ldr.w	r3, [ip]
10011afe:	b299      	uxth	r1, r3
10011b00:	fb02 6101 	mla	r1, r2, r1, r6
10011b04:	0c1e      	lsrs	r6, r3, #16
10011b06:	0c0b      	lsrs	r3, r1, #16
10011b08:	fb02 3306 	mla	r3, r2, r6, r3
10011b0c:	b289      	uxth	r1, r1
10011b0e:	3001      	adds	r0, #1
10011b10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
10011b14:	4285      	cmp	r5, r0
10011b16:	f84c 1b04 	str.w	r1, [ip], #4
10011b1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
10011b1e:	dcec      	bgt.n	10011afa <__multadd+0x12>
10011b20:	b30e      	cbz	r6, 10011b66 <__multadd+0x7e>
10011b22:	68a3      	ldr	r3, [r4, #8]
10011b24:	42ab      	cmp	r3, r5
10011b26:	dc19      	bgt.n	10011b5c <__multadd+0x74>
10011b28:	6861      	ldr	r1, [r4, #4]
10011b2a:	4638      	mov	r0, r7
10011b2c:	3101      	adds	r1, #1
10011b2e:	f7ff ff79 	bl	10011a24 <_Balloc>
10011b32:	4680      	mov	r8, r0
10011b34:	b928      	cbnz	r0, 10011b42 <__multadd+0x5a>
10011b36:	4602      	mov	r2, r0
10011b38:	4b0c      	ldr	r3, [pc, #48]	; (10011b6c <__multadd+0x84>)
10011b3a:	480d      	ldr	r0, [pc, #52]	; (10011b70 <__multadd+0x88>)
10011b3c:	21ba      	movs	r1, #186	; 0xba
10011b3e:	f7fe f939 	bl	1000fdb4 <__assert_func>
10011b42:	6922      	ldr	r2, [r4, #16]
10011b44:	3202      	adds	r2, #2
10011b46:	f104 010c 	add.w	r1, r4, #12
10011b4a:	0092      	lsls	r2, r2, #2
10011b4c:	300c      	adds	r0, #12
10011b4e:	f7ff f88c 	bl	10010c6a <memcpy>
10011b52:	4621      	mov	r1, r4
10011b54:	4638      	mov	r0, r7
10011b56:	f7ff ffa5 	bl	10011aa4 <_Bfree>
10011b5a:	4644      	mov	r4, r8
10011b5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
10011b60:	3501      	adds	r5, #1
10011b62:	615e      	str	r6, [r3, #20]
10011b64:	6125      	str	r5, [r4, #16]
10011b66:	4620      	mov	r0, r4
10011b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10011b6c:	10017544 	.word	0x10017544
10011b70:	10017555 	.word	0x10017555

10011b74 <__hi0bits>:
10011b74:	0c03      	lsrs	r3, r0, #16
10011b76:	041b      	lsls	r3, r3, #16
10011b78:	b9d3      	cbnz	r3, 10011bb0 <__hi0bits+0x3c>
10011b7a:	0400      	lsls	r0, r0, #16
10011b7c:	2310      	movs	r3, #16
10011b7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
10011b82:	bf04      	itt	eq
10011b84:	0200      	lsleq	r0, r0, #8
10011b86:	3308      	addeq	r3, #8
10011b88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
10011b8c:	bf04      	itt	eq
10011b8e:	0100      	lsleq	r0, r0, #4
10011b90:	3304      	addeq	r3, #4
10011b92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
10011b96:	bf04      	itt	eq
10011b98:	0080      	lsleq	r0, r0, #2
10011b9a:	3302      	addeq	r3, #2
10011b9c:	2800      	cmp	r0, #0
10011b9e:	db05      	blt.n	10011bac <__hi0bits+0x38>
10011ba0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
10011ba4:	f103 0301 	add.w	r3, r3, #1
10011ba8:	bf08      	it	eq
10011baa:	2320      	moveq	r3, #32
10011bac:	4618      	mov	r0, r3
10011bae:	4770      	bx	lr
10011bb0:	2300      	movs	r3, #0
10011bb2:	e7e4      	b.n	10011b7e <__hi0bits+0xa>

10011bb4 <__lo0bits>:
10011bb4:	6803      	ldr	r3, [r0, #0]
10011bb6:	f013 0207 	ands.w	r2, r3, #7
10011bba:	d00c      	beq.n	10011bd6 <__lo0bits+0x22>
10011bbc:	07d9      	lsls	r1, r3, #31
10011bbe:	d422      	bmi.n	10011c06 <__lo0bits+0x52>
10011bc0:	079a      	lsls	r2, r3, #30
10011bc2:	bf49      	itett	mi
10011bc4:	085b      	lsrmi	r3, r3, #1
10011bc6:	089b      	lsrpl	r3, r3, #2
10011bc8:	6003      	strmi	r3, [r0, #0]
10011bca:	2201      	movmi	r2, #1
10011bcc:	bf5c      	itt	pl
10011bce:	6003      	strpl	r3, [r0, #0]
10011bd0:	2202      	movpl	r2, #2
10011bd2:	4610      	mov	r0, r2
10011bd4:	4770      	bx	lr
10011bd6:	b299      	uxth	r1, r3
10011bd8:	b909      	cbnz	r1, 10011bde <__lo0bits+0x2a>
10011bda:	0c1b      	lsrs	r3, r3, #16
10011bdc:	2210      	movs	r2, #16
10011bde:	b2d9      	uxtb	r1, r3
10011be0:	b909      	cbnz	r1, 10011be6 <__lo0bits+0x32>
10011be2:	3208      	adds	r2, #8
10011be4:	0a1b      	lsrs	r3, r3, #8
10011be6:	0719      	lsls	r1, r3, #28
10011be8:	bf04      	itt	eq
10011bea:	091b      	lsreq	r3, r3, #4
10011bec:	3204      	addeq	r2, #4
10011bee:	0799      	lsls	r1, r3, #30
10011bf0:	bf04      	itt	eq
10011bf2:	089b      	lsreq	r3, r3, #2
10011bf4:	3202      	addeq	r2, #2
10011bf6:	07d9      	lsls	r1, r3, #31
10011bf8:	d403      	bmi.n	10011c02 <__lo0bits+0x4e>
10011bfa:	085b      	lsrs	r3, r3, #1
10011bfc:	f102 0201 	add.w	r2, r2, #1
10011c00:	d003      	beq.n	10011c0a <__lo0bits+0x56>
10011c02:	6003      	str	r3, [r0, #0]
10011c04:	e7e5      	b.n	10011bd2 <__lo0bits+0x1e>
10011c06:	2200      	movs	r2, #0
10011c08:	e7e3      	b.n	10011bd2 <__lo0bits+0x1e>
10011c0a:	2220      	movs	r2, #32
10011c0c:	e7e1      	b.n	10011bd2 <__lo0bits+0x1e>
	...

10011c10 <__i2b>:
10011c10:	b510      	push	{r4, lr}
10011c12:	460c      	mov	r4, r1
10011c14:	2101      	movs	r1, #1
10011c16:	f7ff ff05 	bl	10011a24 <_Balloc>
10011c1a:	4602      	mov	r2, r0
10011c1c:	b928      	cbnz	r0, 10011c2a <__i2b+0x1a>
10011c1e:	4b05      	ldr	r3, [pc, #20]	; (10011c34 <__i2b+0x24>)
10011c20:	4805      	ldr	r0, [pc, #20]	; (10011c38 <__i2b+0x28>)
10011c22:	f240 1145 	movw	r1, #325	; 0x145
10011c26:	f7fe f8c5 	bl	1000fdb4 <__assert_func>
10011c2a:	2301      	movs	r3, #1
10011c2c:	6144      	str	r4, [r0, #20]
10011c2e:	6103      	str	r3, [r0, #16]
10011c30:	bd10      	pop	{r4, pc}
10011c32:	bf00      	nop
10011c34:	10017544 	.word	0x10017544
10011c38:	10017555 	.word	0x10017555

10011c3c <__multiply>:
10011c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10011c40:	4691      	mov	r9, r2
10011c42:	690a      	ldr	r2, [r1, #16]
10011c44:	f8d9 3010 	ldr.w	r3, [r9, #16]
10011c48:	429a      	cmp	r2, r3
10011c4a:	bfb8      	it	lt
10011c4c:	460b      	movlt	r3, r1
10011c4e:	460c      	mov	r4, r1
10011c50:	bfbc      	itt	lt
10011c52:	464c      	movlt	r4, r9
10011c54:	4699      	movlt	r9, r3
10011c56:	6927      	ldr	r7, [r4, #16]
10011c58:	f8d9 a010 	ldr.w	sl, [r9, #16]
10011c5c:	68a3      	ldr	r3, [r4, #8]
10011c5e:	6861      	ldr	r1, [r4, #4]
10011c60:	eb07 060a 	add.w	r6, r7, sl
10011c64:	42b3      	cmp	r3, r6
10011c66:	b085      	sub	sp, #20
10011c68:	bfb8      	it	lt
10011c6a:	3101      	addlt	r1, #1
10011c6c:	f7ff feda 	bl	10011a24 <_Balloc>
10011c70:	b930      	cbnz	r0, 10011c80 <__multiply+0x44>
10011c72:	4602      	mov	r2, r0
10011c74:	4b44      	ldr	r3, [pc, #272]	; (10011d88 <__multiply+0x14c>)
10011c76:	4845      	ldr	r0, [pc, #276]	; (10011d8c <__multiply+0x150>)
10011c78:	f44f 71b1 	mov.w	r1, #354	; 0x162
10011c7c:	f7fe f89a 	bl	1000fdb4 <__assert_func>
10011c80:	f100 0514 	add.w	r5, r0, #20
10011c84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
10011c88:	462b      	mov	r3, r5
10011c8a:	2200      	movs	r2, #0
10011c8c:	4543      	cmp	r3, r8
10011c8e:	d321      	bcc.n	10011cd4 <__multiply+0x98>
10011c90:	f104 0314 	add.w	r3, r4, #20
10011c94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
10011c98:	f109 0314 	add.w	r3, r9, #20
10011c9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
10011ca0:	9202      	str	r2, [sp, #8]
10011ca2:	1b3a      	subs	r2, r7, r4
10011ca4:	3a15      	subs	r2, #21
10011ca6:	f022 0203 	bic.w	r2, r2, #3
10011caa:	3204      	adds	r2, #4
10011cac:	f104 0115 	add.w	r1, r4, #21
10011cb0:	428f      	cmp	r7, r1
10011cb2:	bf38      	it	cc
10011cb4:	2204      	movcc	r2, #4
10011cb6:	9201      	str	r2, [sp, #4]
10011cb8:	9a02      	ldr	r2, [sp, #8]
10011cba:	9303      	str	r3, [sp, #12]
10011cbc:	429a      	cmp	r2, r3
10011cbe:	d80c      	bhi.n	10011cda <__multiply+0x9e>
10011cc0:	2e00      	cmp	r6, #0
10011cc2:	dd03      	ble.n	10011ccc <__multiply+0x90>
10011cc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
10011cc8:	2b00      	cmp	r3, #0
10011cca:	d05b      	beq.n	10011d84 <__multiply+0x148>
10011ccc:	6106      	str	r6, [r0, #16]
10011cce:	b005      	add	sp, #20
10011cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10011cd4:	f843 2b04 	str.w	r2, [r3], #4
10011cd8:	e7d8      	b.n	10011c8c <__multiply+0x50>
10011cda:	f8b3 a000 	ldrh.w	sl, [r3]
10011cde:	f1ba 0f00 	cmp.w	sl, #0
10011ce2:	d024      	beq.n	10011d2e <__multiply+0xf2>
10011ce4:	f104 0e14 	add.w	lr, r4, #20
10011ce8:	46a9      	mov	r9, r5
10011cea:	f04f 0c00 	mov.w	ip, #0
10011cee:	f85e 2b04 	ldr.w	r2, [lr], #4
10011cf2:	f8d9 1000 	ldr.w	r1, [r9]
10011cf6:	fa1f fb82 	uxth.w	fp, r2
10011cfa:	b289      	uxth	r1, r1
10011cfc:	fb0a 110b 	mla	r1, sl, fp, r1
10011d00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
10011d04:	f8d9 2000 	ldr.w	r2, [r9]
10011d08:	4461      	add	r1, ip
10011d0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
10011d0e:	fb0a c20b 	mla	r2, sl, fp, ip
10011d12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
10011d16:	b289      	uxth	r1, r1
10011d18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
10011d1c:	4577      	cmp	r7, lr
10011d1e:	f849 1b04 	str.w	r1, [r9], #4
10011d22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
10011d26:	d8e2      	bhi.n	10011cee <__multiply+0xb2>
10011d28:	9a01      	ldr	r2, [sp, #4]
10011d2a:	f845 c002 	str.w	ip, [r5, r2]
10011d2e:	9a03      	ldr	r2, [sp, #12]
10011d30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
10011d34:	3304      	adds	r3, #4
10011d36:	f1b9 0f00 	cmp.w	r9, #0
10011d3a:	d021      	beq.n	10011d80 <__multiply+0x144>
10011d3c:	6829      	ldr	r1, [r5, #0]
10011d3e:	f104 0c14 	add.w	ip, r4, #20
10011d42:	46ae      	mov	lr, r5
10011d44:	f04f 0a00 	mov.w	sl, #0
10011d48:	f8bc b000 	ldrh.w	fp, [ip]
10011d4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
10011d50:	fb09 220b 	mla	r2, r9, fp, r2
10011d54:	4452      	add	r2, sl
10011d56:	b289      	uxth	r1, r1
10011d58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
10011d5c:	f84e 1b04 	str.w	r1, [lr], #4
10011d60:	f85c 1b04 	ldr.w	r1, [ip], #4
10011d64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
10011d68:	f8be 1000 	ldrh.w	r1, [lr]
10011d6c:	fb09 110a 	mla	r1, r9, sl, r1
10011d70:	eb01 4112 	add.w	r1, r1, r2, lsr #16
10011d74:	4567      	cmp	r7, ip
10011d76:	ea4f 4a11 	mov.w	sl, r1, lsr #16
10011d7a:	d8e5      	bhi.n	10011d48 <__multiply+0x10c>
10011d7c:	9a01      	ldr	r2, [sp, #4]
10011d7e:	50a9      	str	r1, [r5, r2]
10011d80:	3504      	adds	r5, #4
10011d82:	e799      	b.n	10011cb8 <__multiply+0x7c>
10011d84:	3e01      	subs	r6, #1
10011d86:	e79b      	b.n	10011cc0 <__multiply+0x84>
10011d88:	10017544 	.word	0x10017544
10011d8c:	10017555 	.word	0x10017555

10011d90 <__pow5mult>:
10011d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10011d94:	4615      	mov	r5, r2
10011d96:	f012 0203 	ands.w	r2, r2, #3
10011d9a:	4606      	mov	r6, r0
10011d9c:	460f      	mov	r7, r1
10011d9e:	d007      	beq.n	10011db0 <__pow5mult+0x20>
10011da0:	4c25      	ldr	r4, [pc, #148]	; (10011e38 <__pow5mult+0xa8>)
10011da2:	3a01      	subs	r2, #1
10011da4:	2300      	movs	r3, #0
10011da6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
10011daa:	f7ff fe9d 	bl	10011ae8 <__multadd>
10011dae:	4607      	mov	r7, r0
10011db0:	10ad      	asrs	r5, r5, #2
10011db2:	d03d      	beq.n	10011e30 <__pow5mult+0xa0>
10011db4:	69f4      	ldr	r4, [r6, #28]
10011db6:	b97c      	cbnz	r4, 10011dd8 <__pow5mult+0x48>
10011db8:	2010      	movs	r0, #16
10011dba:	f7fe f819 	bl	1000fdf0 <malloc>
10011dbe:	4602      	mov	r2, r0
10011dc0:	61f0      	str	r0, [r6, #28]
10011dc2:	b928      	cbnz	r0, 10011dd0 <__pow5mult+0x40>
10011dc4:	4b1d      	ldr	r3, [pc, #116]	; (10011e3c <__pow5mult+0xac>)
10011dc6:	481e      	ldr	r0, [pc, #120]	; (10011e40 <__pow5mult+0xb0>)
10011dc8:	f240 11b3 	movw	r1, #435	; 0x1b3
10011dcc:	f7fd fff2 	bl	1000fdb4 <__assert_func>
10011dd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
10011dd4:	6004      	str	r4, [r0, #0]
10011dd6:	60c4      	str	r4, [r0, #12]
10011dd8:	f8d6 801c 	ldr.w	r8, [r6, #28]
10011ddc:	f8d8 4008 	ldr.w	r4, [r8, #8]
10011de0:	b94c      	cbnz	r4, 10011df6 <__pow5mult+0x66>
10011de2:	f240 2171 	movw	r1, #625	; 0x271
10011de6:	4630      	mov	r0, r6
10011de8:	f7ff ff12 	bl	10011c10 <__i2b>
10011dec:	2300      	movs	r3, #0
10011dee:	f8c8 0008 	str.w	r0, [r8, #8]
10011df2:	4604      	mov	r4, r0
10011df4:	6003      	str	r3, [r0, #0]
10011df6:	f04f 0900 	mov.w	r9, #0
10011dfa:	07eb      	lsls	r3, r5, #31
10011dfc:	d50a      	bpl.n	10011e14 <__pow5mult+0x84>
10011dfe:	4639      	mov	r1, r7
10011e00:	4622      	mov	r2, r4
10011e02:	4630      	mov	r0, r6
10011e04:	f7ff ff1a 	bl	10011c3c <__multiply>
10011e08:	4639      	mov	r1, r7
10011e0a:	4680      	mov	r8, r0
10011e0c:	4630      	mov	r0, r6
10011e0e:	f7ff fe49 	bl	10011aa4 <_Bfree>
10011e12:	4647      	mov	r7, r8
10011e14:	106d      	asrs	r5, r5, #1
10011e16:	d00b      	beq.n	10011e30 <__pow5mult+0xa0>
10011e18:	6820      	ldr	r0, [r4, #0]
10011e1a:	b938      	cbnz	r0, 10011e2c <__pow5mult+0x9c>
10011e1c:	4622      	mov	r2, r4
10011e1e:	4621      	mov	r1, r4
10011e20:	4630      	mov	r0, r6
10011e22:	f7ff ff0b 	bl	10011c3c <__multiply>
10011e26:	6020      	str	r0, [r4, #0]
10011e28:	f8c0 9000 	str.w	r9, [r0]
10011e2c:	4604      	mov	r4, r0
10011e2e:	e7e4      	b.n	10011dfa <__pow5mult+0x6a>
10011e30:	4638      	mov	r0, r7
10011e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
10011e36:	bf00      	nop
10011e38:	100176a0 	.word	0x100176a0
10011e3c:	100174d5 	.word	0x100174d5
10011e40:	10017555 	.word	0x10017555

10011e44 <__lshift>:
10011e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10011e48:	460c      	mov	r4, r1
10011e4a:	6849      	ldr	r1, [r1, #4]
10011e4c:	6923      	ldr	r3, [r4, #16]
10011e4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
10011e52:	68a3      	ldr	r3, [r4, #8]
10011e54:	4607      	mov	r7, r0
10011e56:	4691      	mov	r9, r2
10011e58:	ea4f 1a62 	mov.w	sl, r2, asr #5
10011e5c:	f108 0601 	add.w	r6, r8, #1
10011e60:	42b3      	cmp	r3, r6
10011e62:	db0b      	blt.n	10011e7c <__lshift+0x38>
10011e64:	4638      	mov	r0, r7
10011e66:	f7ff fddd 	bl	10011a24 <_Balloc>
10011e6a:	4605      	mov	r5, r0
10011e6c:	b948      	cbnz	r0, 10011e82 <__lshift+0x3e>
10011e6e:	4602      	mov	r2, r0
10011e70:	4b28      	ldr	r3, [pc, #160]	; (10011f14 <__lshift+0xd0>)
10011e72:	4829      	ldr	r0, [pc, #164]	; (10011f18 <__lshift+0xd4>)
10011e74:	f44f 71ef 	mov.w	r1, #478	; 0x1de
10011e78:	f7fd ff9c 	bl	1000fdb4 <__assert_func>
10011e7c:	3101      	adds	r1, #1
10011e7e:	005b      	lsls	r3, r3, #1
10011e80:	e7ee      	b.n	10011e60 <__lshift+0x1c>
10011e82:	2300      	movs	r3, #0
10011e84:	f100 0114 	add.w	r1, r0, #20
10011e88:	f100 0210 	add.w	r2, r0, #16
10011e8c:	4618      	mov	r0, r3
10011e8e:	4553      	cmp	r3, sl
10011e90:	db33      	blt.n	10011efa <__lshift+0xb6>
10011e92:	6920      	ldr	r0, [r4, #16]
10011e94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
10011e98:	f104 0314 	add.w	r3, r4, #20
10011e9c:	f019 091f 	ands.w	r9, r9, #31
10011ea0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
10011ea4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
10011ea8:	d02b      	beq.n	10011f02 <__lshift+0xbe>
10011eaa:	f1c9 0e20 	rsb	lr, r9, #32
10011eae:	468a      	mov	sl, r1
10011eb0:	2200      	movs	r2, #0
10011eb2:	6818      	ldr	r0, [r3, #0]
10011eb4:	fa00 f009 	lsl.w	r0, r0, r9
10011eb8:	4310      	orrs	r0, r2
10011eba:	f84a 0b04 	str.w	r0, [sl], #4
10011ebe:	f853 2b04 	ldr.w	r2, [r3], #4
10011ec2:	459c      	cmp	ip, r3
10011ec4:	fa22 f20e 	lsr.w	r2, r2, lr
10011ec8:	d8f3      	bhi.n	10011eb2 <__lshift+0x6e>
10011eca:	ebac 0304 	sub.w	r3, ip, r4
10011ece:	3b15      	subs	r3, #21
10011ed0:	f023 0303 	bic.w	r3, r3, #3
10011ed4:	3304      	adds	r3, #4
10011ed6:	f104 0015 	add.w	r0, r4, #21
10011eda:	4584      	cmp	ip, r0
10011edc:	bf38      	it	cc
10011ede:	2304      	movcc	r3, #4
10011ee0:	50ca      	str	r2, [r1, r3]
10011ee2:	b10a      	cbz	r2, 10011ee8 <__lshift+0xa4>
10011ee4:	f108 0602 	add.w	r6, r8, #2
10011ee8:	3e01      	subs	r6, #1
10011eea:	4638      	mov	r0, r7
10011eec:	612e      	str	r6, [r5, #16]
10011eee:	4621      	mov	r1, r4
10011ef0:	f7ff fdd8 	bl	10011aa4 <_Bfree>
10011ef4:	4628      	mov	r0, r5
10011ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10011efa:	f842 0f04 	str.w	r0, [r2, #4]!
10011efe:	3301      	adds	r3, #1
10011f00:	e7c5      	b.n	10011e8e <__lshift+0x4a>
10011f02:	3904      	subs	r1, #4
10011f04:	f853 2b04 	ldr.w	r2, [r3], #4
10011f08:	f841 2f04 	str.w	r2, [r1, #4]!
10011f0c:	459c      	cmp	ip, r3
10011f0e:	d8f9      	bhi.n	10011f04 <__lshift+0xc0>
10011f10:	e7ea      	b.n	10011ee8 <__lshift+0xa4>
10011f12:	bf00      	nop
10011f14:	10017544 	.word	0x10017544
10011f18:	10017555 	.word	0x10017555

10011f1c <__mcmp>:
10011f1c:	b530      	push	{r4, r5, lr}
10011f1e:	6902      	ldr	r2, [r0, #16]
10011f20:	690c      	ldr	r4, [r1, #16]
10011f22:	1b12      	subs	r2, r2, r4
10011f24:	d10e      	bne.n	10011f44 <__mcmp+0x28>
10011f26:	f100 0314 	add.w	r3, r0, #20
10011f2a:	3114      	adds	r1, #20
10011f2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
10011f30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
10011f34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
10011f38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
10011f3c:	42a5      	cmp	r5, r4
10011f3e:	d003      	beq.n	10011f48 <__mcmp+0x2c>
10011f40:	d305      	bcc.n	10011f4e <__mcmp+0x32>
10011f42:	2201      	movs	r2, #1
10011f44:	4610      	mov	r0, r2
10011f46:	bd30      	pop	{r4, r5, pc}
10011f48:	4283      	cmp	r3, r0
10011f4a:	d3f3      	bcc.n	10011f34 <__mcmp+0x18>
10011f4c:	e7fa      	b.n	10011f44 <__mcmp+0x28>
10011f4e:	f04f 32ff 	mov.w	r2, #4294967295
10011f52:	e7f7      	b.n	10011f44 <__mcmp+0x28>

10011f54 <__mdiff>:
10011f54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
10011f58:	460c      	mov	r4, r1
10011f5a:	4606      	mov	r6, r0
10011f5c:	4611      	mov	r1, r2
10011f5e:	4620      	mov	r0, r4
10011f60:	4690      	mov	r8, r2
10011f62:	f7ff ffdb 	bl	10011f1c <__mcmp>
10011f66:	1e05      	subs	r5, r0, #0
10011f68:	d110      	bne.n	10011f8c <__mdiff+0x38>
10011f6a:	4629      	mov	r1, r5
10011f6c:	4630      	mov	r0, r6
10011f6e:	f7ff fd59 	bl	10011a24 <_Balloc>
10011f72:	b930      	cbnz	r0, 10011f82 <__mdiff+0x2e>
10011f74:	4b3a      	ldr	r3, [pc, #232]	; (10012060 <__mdiff+0x10c>)
10011f76:	4602      	mov	r2, r0
10011f78:	f240 2137 	movw	r1, #567	; 0x237
10011f7c:	4839      	ldr	r0, [pc, #228]	; (10012064 <__mdiff+0x110>)
10011f7e:	f7fd ff19 	bl	1000fdb4 <__assert_func>
10011f82:	2301      	movs	r3, #1
10011f84:	e9c0 3504 	strd	r3, r5, [r0, #16]
10011f88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
10011f8c:	bfa4      	itt	ge
10011f8e:	4643      	movge	r3, r8
10011f90:	46a0      	movge	r8, r4
10011f92:	4630      	mov	r0, r6
10011f94:	f8d8 1004 	ldr.w	r1, [r8, #4]
10011f98:	bfa6      	itte	ge
10011f9a:	461c      	movge	r4, r3
10011f9c:	2500      	movge	r5, #0
10011f9e:	2501      	movlt	r5, #1
10011fa0:	f7ff fd40 	bl	10011a24 <_Balloc>
10011fa4:	b920      	cbnz	r0, 10011fb0 <__mdiff+0x5c>
10011fa6:	4b2e      	ldr	r3, [pc, #184]	; (10012060 <__mdiff+0x10c>)
10011fa8:	4602      	mov	r2, r0
10011faa:	f240 2145 	movw	r1, #581	; 0x245
10011fae:	e7e5      	b.n	10011f7c <__mdiff+0x28>
10011fb0:	f8d8 7010 	ldr.w	r7, [r8, #16]
10011fb4:	6926      	ldr	r6, [r4, #16]
10011fb6:	60c5      	str	r5, [r0, #12]
10011fb8:	f104 0914 	add.w	r9, r4, #20
10011fbc:	f108 0514 	add.w	r5, r8, #20
10011fc0:	f100 0e14 	add.w	lr, r0, #20
10011fc4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
10011fc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
10011fcc:	f108 0210 	add.w	r2, r8, #16
10011fd0:	46f2      	mov	sl, lr
10011fd2:	2100      	movs	r1, #0
10011fd4:	f859 3b04 	ldr.w	r3, [r9], #4
10011fd8:	f852 bf04 	ldr.w	fp, [r2, #4]!
10011fdc:	fa11 f88b 	uxtah	r8, r1, fp
10011fe0:	b299      	uxth	r1, r3
10011fe2:	0c1b      	lsrs	r3, r3, #16
10011fe4:	eba8 0801 	sub.w	r8, r8, r1
10011fe8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
10011fec:	eb03 4328 	add.w	r3, r3, r8, asr #16
10011ff0:	fa1f f888 	uxth.w	r8, r8
10011ff4:	1419      	asrs	r1, r3, #16
10011ff6:	454e      	cmp	r6, r9
10011ff8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
10011ffc:	f84a 3b04 	str.w	r3, [sl], #4
10012000:	d8e8      	bhi.n	10011fd4 <__mdiff+0x80>
10012002:	1b33      	subs	r3, r6, r4
10012004:	3b15      	subs	r3, #21
10012006:	f023 0303 	bic.w	r3, r3, #3
1001200a:	3304      	adds	r3, #4
1001200c:	3415      	adds	r4, #21
1001200e:	42a6      	cmp	r6, r4
10012010:	bf38      	it	cc
10012012:	2304      	movcc	r3, #4
10012014:	441d      	add	r5, r3
10012016:	4473      	add	r3, lr
10012018:	469e      	mov	lr, r3
1001201a:	462e      	mov	r6, r5
1001201c:	4566      	cmp	r6, ip
1001201e:	d30e      	bcc.n	1001203e <__mdiff+0xea>
10012020:	f10c 0203 	add.w	r2, ip, #3
10012024:	1b52      	subs	r2, r2, r5
10012026:	f022 0203 	bic.w	r2, r2, #3
1001202a:	3d03      	subs	r5, #3
1001202c:	45ac      	cmp	ip, r5
1001202e:	bf38      	it	cc
10012030:	2200      	movcc	r2, #0
10012032:	4413      	add	r3, r2
10012034:	f853 2d04 	ldr.w	r2, [r3, #-4]!
10012038:	b17a      	cbz	r2, 1001205a <__mdiff+0x106>
1001203a:	6107      	str	r7, [r0, #16]
1001203c:	e7a4      	b.n	10011f88 <__mdiff+0x34>
1001203e:	f856 8b04 	ldr.w	r8, [r6], #4
10012042:	fa11 f288 	uxtah	r2, r1, r8
10012046:	1414      	asrs	r4, r2, #16
10012048:	eb04 4418 	add.w	r4, r4, r8, lsr #16
1001204c:	b292      	uxth	r2, r2
1001204e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
10012052:	f84e 2b04 	str.w	r2, [lr], #4
10012056:	1421      	asrs	r1, r4, #16
10012058:	e7e0      	b.n	1001201c <__mdiff+0xc8>
1001205a:	3f01      	subs	r7, #1
1001205c:	e7ea      	b.n	10012034 <__mdiff+0xe0>
1001205e:	bf00      	nop
10012060:	10017544 	.word	0x10017544
10012064:	10017555 	.word	0x10017555

10012068 <__d2b>:
10012068:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
1001206c:	460f      	mov	r7, r1
1001206e:	2101      	movs	r1, #1
10012070:	ec59 8b10 	vmov	r8, r9, d0
10012074:	4616      	mov	r6, r2
10012076:	f7ff fcd5 	bl	10011a24 <_Balloc>
1001207a:	4604      	mov	r4, r0
1001207c:	b930      	cbnz	r0, 1001208c <__d2b+0x24>
1001207e:	4602      	mov	r2, r0
10012080:	4b24      	ldr	r3, [pc, #144]	; (10012114 <__d2b+0xac>)
10012082:	4825      	ldr	r0, [pc, #148]	; (10012118 <__d2b+0xb0>)
10012084:	f240 310f 	movw	r1, #783	; 0x30f
10012088:	f7fd fe94 	bl	1000fdb4 <__assert_func>
1001208c:	f3c9 550a 	ubfx	r5, r9, #20, #11
10012090:	f3c9 0313 	ubfx	r3, r9, #0, #20
10012094:	bb2d      	cbnz	r5, 100120e2 <__d2b+0x7a>
10012096:	9301      	str	r3, [sp, #4]
10012098:	f1b8 0300 	subs.w	r3, r8, #0
1001209c:	d026      	beq.n	100120ec <__d2b+0x84>
1001209e:	4668      	mov	r0, sp
100120a0:	9300      	str	r3, [sp, #0]
100120a2:	f7ff fd87 	bl	10011bb4 <__lo0bits>
100120a6:	e9dd 1200 	ldrd	r1, r2, [sp]
100120aa:	b1e8      	cbz	r0, 100120e8 <__d2b+0x80>
100120ac:	f1c0 0320 	rsb	r3, r0, #32
100120b0:	fa02 f303 	lsl.w	r3, r2, r3
100120b4:	430b      	orrs	r3, r1
100120b6:	40c2      	lsrs	r2, r0
100120b8:	6163      	str	r3, [r4, #20]
100120ba:	9201      	str	r2, [sp, #4]
100120bc:	9b01      	ldr	r3, [sp, #4]
100120be:	61a3      	str	r3, [r4, #24]
100120c0:	2b00      	cmp	r3, #0
100120c2:	bf14      	ite	ne
100120c4:	2202      	movne	r2, #2
100120c6:	2201      	moveq	r2, #1
100120c8:	6122      	str	r2, [r4, #16]
100120ca:	b1bd      	cbz	r5, 100120fc <__d2b+0x94>
100120cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
100120d0:	4405      	add	r5, r0
100120d2:	603d      	str	r5, [r7, #0]
100120d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
100120d8:	6030      	str	r0, [r6, #0]
100120da:	4620      	mov	r0, r4
100120dc:	b003      	add	sp, #12
100120de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
100120e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
100120e6:	e7d6      	b.n	10012096 <__d2b+0x2e>
100120e8:	6161      	str	r1, [r4, #20]
100120ea:	e7e7      	b.n	100120bc <__d2b+0x54>
100120ec:	a801      	add	r0, sp, #4
100120ee:	f7ff fd61 	bl	10011bb4 <__lo0bits>
100120f2:	9b01      	ldr	r3, [sp, #4]
100120f4:	6163      	str	r3, [r4, #20]
100120f6:	3020      	adds	r0, #32
100120f8:	2201      	movs	r2, #1
100120fa:	e7e5      	b.n	100120c8 <__d2b+0x60>
100120fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
10012100:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
10012104:	6038      	str	r0, [r7, #0]
10012106:	6918      	ldr	r0, [r3, #16]
10012108:	f7ff fd34 	bl	10011b74 <__hi0bits>
1001210c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
10012110:	e7e2      	b.n	100120d8 <__d2b+0x70>
10012112:	bf00      	nop
10012114:	10017544 	.word	0x10017544
10012118:	10017555 	.word	0x10017555

1001211c <_malloc_usable_size_r>:
1001211c:	f851 3c04 	ldr.w	r3, [r1, #-4]
10012120:	1f18      	subs	r0, r3, #4
10012122:	2b00      	cmp	r3, #0
10012124:	bfbc      	itt	lt
10012126:	580b      	ldrlt	r3, [r1, r0]
10012128:	18c0      	addlt	r0, r0, r3
1001212a:	4770      	bx	lr

1001212c <__ssputs_r>:
1001212c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10012130:	688e      	ldr	r6, [r1, #8]
10012132:	461f      	mov	r7, r3
10012134:	42be      	cmp	r6, r7
10012136:	680b      	ldr	r3, [r1, #0]
10012138:	4682      	mov	sl, r0
1001213a:	460c      	mov	r4, r1
1001213c:	4690      	mov	r8, r2
1001213e:	d82c      	bhi.n	1001219a <__ssputs_r+0x6e>
10012140:	898a      	ldrh	r2, [r1, #12]
10012142:	f412 6f90 	tst.w	r2, #1152	; 0x480
10012146:	d026      	beq.n	10012196 <__ssputs_r+0x6a>
10012148:	6965      	ldr	r5, [r4, #20]
1001214a:	6909      	ldr	r1, [r1, #16]
1001214c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
10012150:	eba3 0901 	sub.w	r9, r3, r1
10012154:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
10012158:	1c7b      	adds	r3, r7, #1
1001215a:	444b      	add	r3, r9
1001215c:	106d      	asrs	r5, r5, #1
1001215e:	429d      	cmp	r5, r3
10012160:	bf38      	it	cc
10012162:	461d      	movcc	r5, r3
10012164:	0553      	lsls	r3, r2, #21
10012166:	d527      	bpl.n	100121b8 <__ssputs_r+0x8c>
10012168:	4629      	mov	r1, r5
1001216a:	f7fd fe71 	bl	1000fe50 <_malloc_r>
1001216e:	4606      	mov	r6, r0
10012170:	b360      	cbz	r0, 100121cc <__ssputs_r+0xa0>
10012172:	6921      	ldr	r1, [r4, #16]
10012174:	464a      	mov	r2, r9
10012176:	f7fe fd78 	bl	10010c6a <memcpy>
1001217a:	89a3      	ldrh	r3, [r4, #12]
1001217c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
10012180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
10012184:	81a3      	strh	r3, [r4, #12]
10012186:	6126      	str	r6, [r4, #16]
10012188:	6165      	str	r5, [r4, #20]
1001218a:	444e      	add	r6, r9
1001218c:	eba5 0509 	sub.w	r5, r5, r9
10012190:	6026      	str	r6, [r4, #0]
10012192:	60a5      	str	r5, [r4, #8]
10012194:	463e      	mov	r6, r7
10012196:	42be      	cmp	r6, r7
10012198:	d900      	bls.n	1001219c <__ssputs_r+0x70>
1001219a:	463e      	mov	r6, r7
1001219c:	6820      	ldr	r0, [r4, #0]
1001219e:	4632      	mov	r2, r6
100121a0:	4641      	mov	r1, r8
100121a2:	f000 fba3 	bl	100128ec <memmove>
100121a6:	68a3      	ldr	r3, [r4, #8]
100121a8:	1b9b      	subs	r3, r3, r6
100121aa:	60a3      	str	r3, [r4, #8]
100121ac:	6823      	ldr	r3, [r4, #0]
100121ae:	4433      	add	r3, r6
100121b0:	6023      	str	r3, [r4, #0]
100121b2:	2000      	movs	r0, #0
100121b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
100121b8:	462a      	mov	r2, r5
100121ba:	f7fd fed5 	bl	1000ff68 <_realloc_r>
100121be:	4606      	mov	r6, r0
100121c0:	2800      	cmp	r0, #0
100121c2:	d1e0      	bne.n	10012186 <__ssputs_r+0x5a>
100121c4:	6921      	ldr	r1, [r4, #16]
100121c6:	4650      	mov	r0, sl
100121c8:	f7ff fbe0 	bl	1001198c <_free_r>
100121cc:	230c      	movs	r3, #12
100121ce:	f8ca 3000 	str.w	r3, [sl]
100121d2:	89a3      	ldrh	r3, [r4, #12]
100121d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100121d8:	81a3      	strh	r3, [r4, #12]
100121da:	f04f 30ff 	mov.w	r0, #4294967295
100121de:	e7e9      	b.n	100121b4 <__ssputs_r+0x88>

100121e0 <_svfiprintf_r>:
100121e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
100121e4:	4698      	mov	r8, r3
100121e6:	898b      	ldrh	r3, [r1, #12]
100121e8:	061b      	lsls	r3, r3, #24
100121ea:	b09d      	sub	sp, #116	; 0x74
100121ec:	4607      	mov	r7, r0
100121ee:	460d      	mov	r5, r1
100121f0:	4614      	mov	r4, r2
100121f2:	d50e      	bpl.n	10012212 <_svfiprintf_r+0x32>
100121f4:	690b      	ldr	r3, [r1, #16]
100121f6:	b963      	cbnz	r3, 10012212 <_svfiprintf_r+0x32>
100121f8:	2140      	movs	r1, #64	; 0x40
100121fa:	f7fd fe29 	bl	1000fe50 <_malloc_r>
100121fe:	6028      	str	r0, [r5, #0]
10012200:	6128      	str	r0, [r5, #16]
10012202:	b920      	cbnz	r0, 1001220e <_svfiprintf_r+0x2e>
10012204:	230c      	movs	r3, #12
10012206:	603b      	str	r3, [r7, #0]
10012208:	f04f 30ff 	mov.w	r0, #4294967295
1001220c:	e0d0      	b.n	100123b0 <_svfiprintf_r+0x1d0>
1001220e:	2340      	movs	r3, #64	; 0x40
10012210:	616b      	str	r3, [r5, #20]
10012212:	2300      	movs	r3, #0
10012214:	9309      	str	r3, [sp, #36]	; 0x24
10012216:	2320      	movs	r3, #32
10012218:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1001221c:	f8cd 800c 	str.w	r8, [sp, #12]
10012220:	2330      	movs	r3, #48	; 0x30
10012222:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 100123c8 <_svfiprintf_r+0x1e8>
10012226:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1001222a:	f04f 0901 	mov.w	r9, #1
1001222e:	4623      	mov	r3, r4
10012230:	469a      	mov	sl, r3
10012232:	f813 2b01 	ldrb.w	r2, [r3], #1
10012236:	b10a      	cbz	r2, 1001223c <_svfiprintf_r+0x5c>
10012238:	2a25      	cmp	r2, #37	; 0x25
1001223a:	d1f9      	bne.n	10012230 <_svfiprintf_r+0x50>
1001223c:	ebba 0b04 	subs.w	fp, sl, r4
10012240:	d00b      	beq.n	1001225a <_svfiprintf_r+0x7a>
10012242:	465b      	mov	r3, fp
10012244:	4622      	mov	r2, r4
10012246:	4629      	mov	r1, r5
10012248:	4638      	mov	r0, r7
1001224a:	f7ff ff6f 	bl	1001212c <__ssputs_r>
1001224e:	3001      	adds	r0, #1
10012250:	f000 80a9 	beq.w	100123a6 <_svfiprintf_r+0x1c6>
10012254:	9a09      	ldr	r2, [sp, #36]	; 0x24
10012256:	445a      	add	r2, fp
10012258:	9209      	str	r2, [sp, #36]	; 0x24
1001225a:	f89a 3000 	ldrb.w	r3, [sl]
1001225e:	2b00      	cmp	r3, #0
10012260:	f000 80a1 	beq.w	100123a6 <_svfiprintf_r+0x1c6>
10012264:	2300      	movs	r3, #0
10012266:	f04f 32ff 	mov.w	r2, #4294967295
1001226a:	e9cd 2305 	strd	r2, r3, [sp, #20]
1001226e:	f10a 0a01 	add.w	sl, sl, #1
10012272:	9304      	str	r3, [sp, #16]
10012274:	9307      	str	r3, [sp, #28]
10012276:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1001227a:	931a      	str	r3, [sp, #104]	; 0x68
1001227c:	4654      	mov	r4, sl
1001227e:	2205      	movs	r2, #5
10012280:	f814 1b01 	ldrb.w	r1, [r4], #1
10012284:	4850      	ldr	r0, [pc, #320]	; (100123c8 <_svfiprintf_r+0x1e8>)
10012286:	f7ed feeb 	bl	10000060 <memchr>
1001228a:	9a04      	ldr	r2, [sp, #16]
1001228c:	b9d8      	cbnz	r0, 100122c6 <_svfiprintf_r+0xe6>
1001228e:	06d0      	lsls	r0, r2, #27
10012290:	bf44      	itt	mi
10012292:	2320      	movmi	r3, #32
10012294:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
10012298:	0711      	lsls	r1, r2, #28
1001229a:	bf44      	itt	mi
1001229c:	232b      	movmi	r3, #43	; 0x2b
1001229e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
100122a2:	f89a 3000 	ldrb.w	r3, [sl]
100122a6:	2b2a      	cmp	r3, #42	; 0x2a
100122a8:	d015      	beq.n	100122d6 <_svfiprintf_r+0xf6>
100122aa:	9a07      	ldr	r2, [sp, #28]
100122ac:	4654      	mov	r4, sl
100122ae:	2000      	movs	r0, #0
100122b0:	f04f 0c0a 	mov.w	ip, #10
100122b4:	4621      	mov	r1, r4
100122b6:	f811 3b01 	ldrb.w	r3, [r1], #1
100122ba:	3b30      	subs	r3, #48	; 0x30
100122bc:	2b09      	cmp	r3, #9
100122be:	d94d      	bls.n	1001235c <_svfiprintf_r+0x17c>
100122c0:	b1b0      	cbz	r0, 100122f0 <_svfiprintf_r+0x110>
100122c2:	9207      	str	r2, [sp, #28]
100122c4:	e014      	b.n	100122f0 <_svfiprintf_r+0x110>
100122c6:	eba0 0308 	sub.w	r3, r0, r8
100122ca:	fa09 f303 	lsl.w	r3, r9, r3
100122ce:	4313      	orrs	r3, r2
100122d0:	9304      	str	r3, [sp, #16]
100122d2:	46a2      	mov	sl, r4
100122d4:	e7d2      	b.n	1001227c <_svfiprintf_r+0x9c>
100122d6:	9b03      	ldr	r3, [sp, #12]
100122d8:	1d19      	adds	r1, r3, #4
100122da:	681b      	ldr	r3, [r3, #0]
100122dc:	9103      	str	r1, [sp, #12]
100122de:	2b00      	cmp	r3, #0
100122e0:	bfbb      	ittet	lt
100122e2:	425b      	neglt	r3, r3
100122e4:	f042 0202 	orrlt.w	r2, r2, #2
100122e8:	9307      	strge	r3, [sp, #28]
100122ea:	9307      	strlt	r3, [sp, #28]
100122ec:	bfb8      	it	lt
100122ee:	9204      	strlt	r2, [sp, #16]
100122f0:	7823      	ldrb	r3, [r4, #0]
100122f2:	2b2e      	cmp	r3, #46	; 0x2e
100122f4:	d10c      	bne.n	10012310 <_svfiprintf_r+0x130>
100122f6:	7863      	ldrb	r3, [r4, #1]
100122f8:	2b2a      	cmp	r3, #42	; 0x2a
100122fa:	d134      	bne.n	10012366 <_svfiprintf_r+0x186>
100122fc:	9b03      	ldr	r3, [sp, #12]
100122fe:	1d1a      	adds	r2, r3, #4
10012300:	681b      	ldr	r3, [r3, #0]
10012302:	9203      	str	r2, [sp, #12]
10012304:	2b00      	cmp	r3, #0
10012306:	bfb8      	it	lt
10012308:	f04f 33ff 	movlt.w	r3, #4294967295
1001230c:	3402      	adds	r4, #2
1001230e:	9305      	str	r3, [sp, #20]
10012310:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 100123d8 <_svfiprintf_r+0x1f8>
10012314:	7821      	ldrb	r1, [r4, #0]
10012316:	2203      	movs	r2, #3
10012318:	4650      	mov	r0, sl
1001231a:	f7ed fea1 	bl	10000060 <memchr>
1001231e:	b138      	cbz	r0, 10012330 <_svfiprintf_r+0x150>
10012320:	9b04      	ldr	r3, [sp, #16]
10012322:	eba0 000a 	sub.w	r0, r0, sl
10012326:	2240      	movs	r2, #64	; 0x40
10012328:	4082      	lsls	r2, r0
1001232a:	4313      	orrs	r3, r2
1001232c:	3401      	adds	r4, #1
1001232e:	9304      	str	r3, [sp, #16]
10012330:	f814 1b01 	ldrb.w	r1, [r4], #1
10012334:	4825      	ldr	r0, [pc, #148]	; (100123cc <_svfiprintf_r+0x1ec>)
10012336:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1001233a:	2206      	movs	r2, #6
1001233c:	f7ed fe90 	bl	10000060 <memchr>
10012340:	2800      	cmp	r0, #0
10012342:	d038      	beq.n	100123b6 <_svfiprintf_r+0x1d6>
10012344:	4b22      	ldr	r3, [pc, #136]	; (100123d0 <_svfiprintf_r+0x1f0>)
10012346:	bb1b      	cbnz	r3, 10012390 <_svfiprintf_r+0x1b0>
10012348:	9b03      	ldr	r3, [sp, #12]
1001234a:	3307      	adds	r3, #7
1001234c:	f023 0307 	bic.w	r3, r3, #7
10012350:	3308      	adds	r3, #8
10012352:	9303      	str	r3, [sp, #12]
10012354:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012356:	4433      	add	r3, r6
10012358:	9309      	str	r3, [sp, #36]	; 0x24
1001235a:	e768      	b.n	1001222e <_svfiprintf_r+0x4e>
1001235c:	fb0c 3202 	mla	r2, ip, r2, r3
10012360:	460c      	mov	r4, r1
10012362:	2001      	movs	r0, #1
10012364:	e7a6      	b.n	100122b4 <_svfiprintf_r+0xd4>
10012366:	2300      	movs	r3, #0
10012368:	3401      	adds	r4, #1
1001236a:	9305      	str	r3, [sp, #20]
1001236c:	4619      	mov	r1, r3
1001236e:	f04f 0c0a 	mov.w	ip, #10
10012372:	4620      	mov	r0, r4
10012374:	f810 2b01 	ldrb.w	r2, [r0], #1
10012378:	3a30      	subs	r2, #48	; 0x30
1001237a:	2a09      	cmp	r2, #9
1001237c:	d903      	bls.n	10012386 <_svfiprintf_r+0x1a6>
1001237e:	2b00      	cmp	r3, #0
10012380:	d0c6      	beq.n	10012310 <_svfiprintf_r+0x130>
10012382:	9105      	str	r1, [sp, #20]
10012384:	e7c4      	b.n	10012310 <_svfiprintf_r+0x130>
10012386:	fb0c 2101 	mla	r1, ip, r1, r2
1001238a:	4604      	mov	r4, r0
1001238c:	2301      	movs	r3, #1
1001238e:	e7f0      	b.n	10012372 <_svfiprintf_r+0x192>
10012390:	ab03      	add	r3, sp, #12
10012392:	9300      	str	r3, [sp, #0]
10012394:	462a      	mov	r2, r5
10012396:	4b0f      	ldr	r3, [pc, #60]	; (100123d4 <_svfiprintf_r+0x1f4>)
10012398:	a904      	add	r1, sp, #16
1001239a:	4638      	mov	r0, r7
1001239c:	f7fd feb4 	bl	10010108 <_printf_float>
100123a0:	1c42      	adds	r2, r0, #1
100123a2:	4606      	mov	r6, r0
100123a4:	d1d6      	bne.n	10012354 <_svfiprintf_r+0x174>
100123a6:	89ab      	ldrh	r3, [r5, #12]
100123a8:	065b      	lsls	r3, r3, #25
100123aa:	f53f af2d 	bmi.w	10012208 <_svfiprintf_r+0x28>
100123ae:	9809      	ldr	r0, [sp, #36]	; 0x24
100123b0:	b01d      	add	sp, #116	; 0x74
100123b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
100123b6:	ab03      	add	r3, sp, #12
100123b8:	9300      	str	r3, [sp, #0]
100123ba:	462a      	mov	r2, r5
100123bc:	4b05      	ldr	r3, [pc, #20]	; (100123d4 <_svfiprintf_r+0x1f4>)
100123be:	a904      	add	r1, sp, #16
100123c0:	4638      	mov	r0, r7
100123c2:	f7fe f945 	bl	10010650 <_printf_i>
100123c6:	e7eb      	b.n	100123a0 <_svfiprintf_r+0x1c0>
100123c8:	100176ac 	.word	0x100176ac
100123cc:	100176b6 	.word	0x100176b6
100123d0:	10010109 	.word	0x10010109
100123d4:	1001212d 	.word	0x1001212d
100123d8:	100176b2 	.word	0x100176b2

100123dc <__sfputc_r>:
100123dc:	6893      	ldr	r3, [r2, #8]
100123de:	3b01      	subs	r3, #1
100123e0:	2b00      	cmp	r3, #0
100123e2:	b410      	push	{r4}
100123e4:	6093      	str	r3, [r2, #8]
100123e6:	da08      	bge.n	100123fa <__sfputc_r+0x1e>
100123e8:	6994      	ldr	r4, [r2, #24]
100123ea:	42a3      	cmp	r3, r4
100123ec:	db01      	blt.n	100123f2 <__sfputc_r+0x16>
100123ee:	290a      	cmp	r1, #10
100123f0:	d103      	bne.n	100123fa <__sfputc_r+0x1e>
100123f2:	f85d 4b04 	ldr.w	r4, [sp], #4
100123f6:	f000 b9e3 	b.w	100127c0 <__swbuf_r>
100123fa:	6813      	ldr	r3, [r2, #0]
100123fc:	1c58      	adds	r0, r3, #1
100123fe:	6010      	str	r0, [r2, #0]
10012400:	7019      	strb	r1, [r3, #0]
10012402:	4608      	mov	r0, r1
10012404:	f85d 4b04 	ldr.w	r4, [sp], #4
10012408:	4770      	bx	lr

1001240a <__sfputs_r>:
1001240a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001240c:	4606      	mov	r6, r0
1001240e:	460f      	mov	r7, r1
10012410:	4614      	mov	r4, r2
10012412:	18d5      	adds	r5, r2, r3
10012414:	42ac      	cmp	r4, r5
10012416:	d101      	bne.n	1001241c <__sfputs_r+0x12>
10012418:	2000      	movs	r0, #0
1001241a:	e007      	b.n	1001242c <__sfputs_r+0x22>
1001241c:	f814 1b01 	ldrb.w	r1, [r4], #1
10012420:	463a      	mov	r2, r7
10012422:	4630      	mov	r0, r6
10012424:	f7ff ffda 	bl	100123dc <__sfputc_r>
10012428:	1c43      	adds	r3, r0, #1
1001242a:	d1f3      	bne.n	10012414 <__sfputs_r+0xa>
1001242c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10012430 <_vfiprintf_r>:
10012430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10012434:	460d      	mov	r5, r1
10012436:	b09d      	sub	sp, #116	; 0x74
10012438:	4614      	mov	r4, r2
1001243a:	4698      	mov	r8, r3
1001243c:	4606      	mov	r6, r0
1001243e:	b118      	cbz	r0, 10012448 <_vfiprintf_r+0x18>
10012440:	6a03      	ldr	r3, [r0, #32]
10012442:	b90b      	cbnz	r3, 10012448 <_vfiprintf_r+0x18>
10012444:	f7fe fab2 	bl	100109ac <__sinit>
10012448:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1001244a:	07d9      	lsls	r1, r3, #31
1001244c:	d405      	bmi.n	1001245a <_vfiprintf_r+0x2a>
1001244e:	89ab      	ldrh	r3, [r5, #12]
10012450:	059a      	lsls	r2, r3, #22
10012452:	d402      	bmi.n	1001245a <_vfiprintf_r+0x2a>
10012454:	6da8      	ldr	r0, [r5, #88]	; 0x58
10012456:	f7fe fc06 	bl	10010c66 <__retarget_lock_acquire_recursive>
1001245a:	89ab      	ldrh	r3, [r5, #12]
1001245c:	071b      	lsls	r3, r3, #28
1001245e:	d501      	bpl.n	10012464 <_vfiprintf_r+0x34>
10012460:	692b      	ldr	r3, [r5, #16]
10012462:	b99b      	cbnz	r3, 1001248c <_vfiprintf_r+0x5c>
10012464:	4629      	mov	r1, r5
10012466:	4630      	mov	r0, r6
10012468:	f000 f9e8 	bl	1001283c <__swsetup_r>
1001246c:	b170      	cbz	r0, 1001248c <_vfiprintf_r+0x5c>
1001246e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
10012470:	07dc      	lsls	r4, r3, #31
10012472:	d504      	bpl.n	1001247e <_vfiprintf_r+0x4e>
10012474:	f04f 30ff 	mov.w	r0, #4294967295
10012478:	b01d      	add	sp, #116	; 0x74
1001247a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001247e:	89ab      	ldrh	r3, [r5, #12]
10012480:	0598      	lsls	r0, r3, #22
10012482:	d4f7      	bmi.n	10012474 <_vfiprintf_r+0x44>
10012484:	6da8      	ldr	r0, [r5, #88]	; 0x58
10012486:	f7fe fbef 	bl	10010c68 <__retarget_lock_release_recursive>
1001248a:	e7f3      	b.n	10012474 <_vfiprintf_r+0x44>
1001248c:	2300      	movs	r3, #0
1001248e:	9309      	str	r3, [sp, #36]	; 0x24
10012490:	2320      	movs	r3, #32
10012492:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
10012496:	f8cd 800c 	str.w	r8, [sp, #12]
1001249a:	2330      	movs	r3, #48	; 0x30
1001249c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 10012650 <_vfiprintf_r+0x220>
100124a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
100124a4:	f04f 0901 	mov.w	r9, #1
100124a8:	4623      	mov	r3, r4
100124aa:	469a      	mov	sl, r3
100124ac:	f813 2b01 	ldrb.w	r2, [r3], #1
100124b0:	b10a      	cbz	r2, 100124b6 <_vfiprintf_r+0x86>
100124b2:	2a25      	cmp	r2, #37	; 0x25
100124b4:	d1f9      	bne.n	100124aa <_vfiprintf_r+0x7a>
100124b6:	ebba 0b04 	subs.w	fp, sl, r4
100124ba:	d00b      	beq.n	100124d4 <_vfiprintf_r+0xa4>
100124bc:	465b      	mov	r3, fp
100124be:	4622      	mov	r2, r4
100124c0:	4629      	mov	r1, r5
100124c2:	4630      	mov	r0, r6
100124c4:	f7ff ffa1 	bl	1001240a <__sfputs_r>
100124c8:	3001      	adds	r0, #1
100124ca:	f000 80a9 	beq.w	10012620 <_vfiprintf_r+0x1f0>
100124ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
100124d0:	445a      	add	r2, fp
100124d2:	9209      	str	r2, [sp, #36]	; 0x24
100124d4:	f89a 3000 	ldrb.w	r3, [sl]
100124d8:	2b00      	cmp	r3, #0
100124da:	f000 80a1 	beq.w	10012620 <_vfiprintf_r+0x1f0>
100124de:	2300      	movs	r3, #0
100124e0:	f04f 32ff 	mov.w	r2, #4294967295
100124e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
100124e8:	f10a 0a01 	add.w	sl, sl, #1
100124ec:	9304      	str	r3, [sp, #16]
100124ee:	9307      	str	r3, [sp, #28]
100124f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
100124f4:	931a      	str	r3, [sp, #104]	; 0x68
100124f6:	4654      	mov	r4, sl
100124f8:	2205      	movs	r2, #5
100124fa:	f814 1b01 	ldrb.w	r1, [r4], #1
100124fe:	4854      	ldr	r0, [pc, #336]	; (10012650 <_vfiprintf_r+0x220>)
10012500:	f7ed fdae 	bl	10000060 <memchr>
10012504:	9a04      	ldr	r2, [sp, #16]
10012506:	b9d8      	cbnz	r0, 10012540 <_vfiprintf_r+0x110>
10012508:	06d1      	lsls	r1, r2, #27
1001250a:	bf44      	itt	mi
1001250c:	2320      	movmi	r3, #32
1001250e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
10012512:	0713      	lsls	r3, r2, #28
10012514:	bf44      	itt	mi
10012516:	232b      	movmi	r3, #43	; 0x2b
10012518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
1001251c:	f89a 3000 	ldrb.w	r3, [sl]
10012520:	2b2a      	cmp	r3, #42	; 0x2a
10012522:	d015      	beq.n	10012550 <_vfiprintf_r+0x120>
10012524:	9a07      	ldr	r2, [sp, #28]
10012526:	4654      	mov	r4, sl
10012528:	2000      	movs	r0, #0
1001252a:	f04f 0c0a 	mov.w	ip, #10
1001252e:	4621      	mov	r1, r4
10012530:	f811 3b01 	ldrb.w	r3, [r1], #1
10012534:	3b30      	subs	r3, #48	; 0x30
10012536:	2b09      	cmp	r3, #9
10012538:	d94d      	bls.n	100125d6 <_vfiprintf_r+0x1a6>
1001253a:	b1b0      	cbz	r0, 1001256a <_vfiprintf_r+0x13a>
1001253c:	9207      	str	r2, [sp, #28]
1001253e:	e014      	b.n	1001256a <_vfiprintf_r+0x13a>
10012540:	eba0 0308 	sub.w	r3, r0, r8
10012544:	fa09 f303 	lsl.w	r3, r9, r3
10012548:	4313      	orrs	r3, r2
1001254a:	9304      	str	r3, [sp, #16]
1001254c:	46a2      	mov	sl, r4
1001254e:	e7d2      	b.n	100124f6 <_vfiprintf_r+0xc6>
10012550:	9b03      	ldr	r3, [sp, #12]
10012552:	1d19      	adds	r1, r3, #4
10012554:	681b      	ldr	r3, [r3, #0]
10012556:	9103      	str	r1, [sp, #12]
10012558:	2b00      	cmp	r3, #0
1001255a:	bfbb      	ittet	lt
1001255c:	425b      	neglt	r3, r3
1001255e:	f042 0202 	orrlt.w	r2, r2, #2
10012562:	9307      	strge	r3, [sp, #28]
10012564:	9307      	strlt	r3, [sp, #28]
10012566:	bfb8      	it	lt
10012568:	9204      	strlt	r2, [sp, #16]
1001256a:	7823      	ldrb	r3, [r4, #0]
1001256c:	2b2e      	cmp	r3, #46	; 0x2e
1001256e:	d10c      	bne.n	1001258a <_vfiprintf_r+0x15a>
10012570:	7863      	ldrb	r3, [r4, #1]
10012572:	2b2a      	cmp	r3, #42	; 0x2a
10012574:	d134      	bne.n	100125e0 <_vfiprintf_r+0x1b0>
10012576:	9b03      	ldr	r3, [sp, #12]
10012578:	1d1a      	adds	r2, r3, #4
1001257a:	681b      	ldr	r3, [r3, #0]
1001257c:	9203      	str	r2, [sp, #12]
1001257e:	2b00      	cmp	r3, #0
10012580:	bfb8      	it	lt
10012582:	f04f 33ff 	movlt.w	r3, #4294967295
10012586:	3402      	adds	r4, #2
10012588:	9305      	str	r3, [sp, #20]
1001258a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 10012660 <_vfiprintf_r+0x230>
1001258e:	7821      	ldrb	r1, [r4, #0]
10012590:	2203      	movs	r2, #3
10012592:	4650      	mov	r0, sl
10012594:	f7ed fd64 	bl	10000060 <memchr>
10012598:	b138      	cbz	r0, 100125aa <_vfiprintf_r+0x17a>
1001259a:	9b04      	ldr	r3, [sp, #16]
1001259c:	eba0 000a 	sub.w	r0, r0, sl
100125a0:	2240      	movs	r2, #64	; 0x40
100125a2:	4082      	lsls	r2, r0
100125a4:	4313      	orrs	r3, r2
100125a6:	3401      	adds	r4, #1
100125a8:	9304      	str	r3, [sp, #16]
100125aa:	f814 1b01 	ldrb.w	r1, [r4], #1
100125ae:	4829      	ldr	r0, [pc, #164]	; (10012654 <_vfiprintf_r+0x224>)
100125b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
100125b4:	2206      	movs	r2, #6
100125b6:	f7ed fd53 	bl	10000060 <memchr>
100125ba:	2800      	cmp	r0, #0
100125bc:	d03f      	beq.n	1001263e <_vfiprintf_r+0x20e>
100125be:	4b26      	ldr	r3, [pc, #152]	; (10012658 <_vfiprintf_r+0x228>)
100125c0:	bb1b      	cbnz	r3, 1001260a <_vfiprintf_r+0x1da>
100125c2:	9b03      	ldr	r3, [sp, #12]
100125c4:	3307      	adds	r3, #7
100125c6:	f023 0307 	bic.w	r3, r3, #7
100125ca:	3308      	adds	r3, #8
100125cc:	9303      	str	r3, [sp, #12]
100125ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
100125d0:	443b      	add	r3, r7
100125d2:	9309      	str	r3, [sp, #36]	; 0x24
100125d4:	e768      	b.n	100124a8 <_vfiprintf_r+0x78>
100125d6:	fb0c 3202 	mla	r2, ip, r2, r3
100125da:	460c      	mov	r4, r1
100125dc:	2001      	movs	r0, #1
100125de:	e7a6      	b.n	1001252e <_vfiprintf_r+0xfe>
100125e0:	2300      	movs	r3, #0
100125e2:	3401      	adds	r4, #1
100125e4:	9305      	str	r3, [sp, #20]
100125e6:	4619      	mov	r1, r3
100125e8:	f04f 0c0a 	mov.w	ip, #10
100125ec:	4620      	mov	r0, r4
100125ee:	f810 2b01 	ldrb.w	r2, [r0], #1
100125f2:	3a30      	subs	r2, #48	; 0x30
100125f4:	2a09      	cmp	r2, #9
100125f6:	d903      	bls.n	10012600 <_vfiprintf_r+0x1d0>
100125f8:	2b00      	cmp	r3, #0
100125fa:	d0c6      	beq.n	1001258a <_vfiprintf_r+0x15a>
100125fc:	9105      	str	r1, [sp, #20]
100125fe:	e7c4      	b.n	1001258a <_vfiprintf_r+0x15a>
10012600:	fb0c 2101 	mla	r1, ip, r1, r2
10012604:	4604      	mov	r4, r0
10012606:	2301      	movs	r3, #1
10012608:	e7f0      	b.n	100125ec <_vfiprintf_r+0x1bc>
1001260a:	ab03      	add	r3, sp, #12
1001260c:	9300      	str	r3, [sp, #0]
1001260e:	462a      	mov	r2, r5
10012610:	4b12      	ldr	r3, [pc, #72]	; (1001265c <_vfiprintf_r+0x22c>)
10012612:	a904      	add	r1, sp, #16
10012614:	4630      	mov	r0, r6
10012616:	f7fd fd77 	bl	10010108 <_printf_float>
1001261a:	4607      	mov	r7, r0
1001261c:	1c78      	adds	r0, r7, #1
1001261e:	d1d6      	bne.n	100125ce <_vfiprintf_r+0x19e>
10012620:	6e6b      	ldr	r3, [r5, #100]	; 0x64
10012622:	07d9      	lsls	r1, r3, #31
10012624:	d405      	bmi.n	10012632 <_vfiprintf_r+0x202>
10012626:	89ab      	ldrh	r3, [r5, #12]
10012628:	059a      	lsls	r2, r3, #22
1001262a:	d402      	bmi.n	10012632 <_vfiprintf_r+0x202>
1001262c:	6da8      	ldr	r0, [r5, #88]	; 0x58
1001262e:	f7fe fb1b 	bl	10010c68 <__retarget_lock_release_recursive>
10012632:	89ab      	ldrh	r3, [r5, #12]
10012634:	065b      	lsls	r3, r3, #25
10012636:	f53f af1d 	bmi.w	10012474 <_vfiprintf_r+0x44>
1001263a:	9809      	ldr	r0, [sp, #36]	; 0x24
1001263c:	e71c      	b.n	10012478 <_vfiprintf_r+0x48>
1001263e:	ab03      	add	r3, sp, #12
10012640:	9300      	str	r3, [sp, #0]
10012642:	462a      	mov	r2, r5
10012644:	4b05      	ldr	r3, [pc, #20]	; (1001265c <_vfiprintf_r+0x22c>)
10012646:	a904      	add	r1, sp, #16
10012648:	4630      	mov	r0, r6
1001264a:	f7fe f801 	bl	10010650 <_printf_i>
1001264e:	e7e4      	b.n	1001261a <_vfiprintf_r+0x1ea>
10012650:	100176ac 	.word	0x100176ac
10012654:	100176b6 	.word	0x100176b6
10012658:	10010109 	.word	0x10010109
1001265c:	1001240b 	.word	0x1001240b
10012660:	100176b2 	.word	0x100176b2

10012664 <__sflush_r>:
10012664:	898a      	ldrh	r2, [r1, #12]
10012666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1001266a:	4605      	mov	r5, r0
1001266c:	0710      	lsls	r0, r2, #28
1001266e:	460c      	mov	r4, r1
10012670:	d458      	bmi.n	10012724 <__sflush_r+0xc0>
10012672:	684b      	ldr	r3, [r1, #4]
10012674:	2b00      	cmp	r3, #0
10012676:	dc05      	bgt.n	10012684 <__sflush_r+0x20>
10012678:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1001267a:	2b00      	cmp	r3, #0
1001267c:	dc02      	bgt.n	10012684 <__sflush_r+0x20>
1001267e:	2000      	movs	r0, #0
10012680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10012684:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
10012686:	2e00      	cmp	r6, #0
10012688:	d0f9      	beq.n	1001267e <__sflush_r+0x1a>
1001268a:	2300      	movs	r3, #0
1001268c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
10012690:	682f      	ldr	r7, [r5, #0]
10012692:	6a21      	ldr	r1, [r4, #32]
10012694:	602b      	str	r3, [r5, #0]
10012696:	d032      	beq.n	100126fe <__sflush_r+0x9a>
10012698:	6d60      	ldr	r0, [r4, #84]	; 0x54
1001269a:	89a3      	ldrh	r3, [r4, #12]
1001269c:	075a      	lsls	r2, r3, #29
1001269e:	d505      	bpl.n	100126ac <__sflush_r+0x48>
100126a0:	6863      	ldr	r3, [r4, #4]
100126a2:	1ac0      	subs	r0, r0, r3
100126a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
100126a6:	b10b      	cbz	r3, 100126ac <__sflush_r+0x48>
100126a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
100126aa:	1ac0      	subs	r0, r0, r3
100126ac:	2300      	movs	r3, #0
100126ae:	4602      	mov	r2, r0
100126b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
100126b2:	6a21      	ldr	r1, [r4, #32]
100126b4:	4628      	mov	r0, r5
100126b6:	47b0      	blx	r6
100126b8:	1c43      	adds	r3, r0, #1
100126ba:	89a3      	ldrh	r3, [r4, #12]
100126bc:	d106      	bne.n	100126cc <__sflush_r+0x68>
100126be:	6829      	ldr	r1, [r5, #0]
100126c0:	291d      	cmp	r1, #29
100126c2:	d82b      	bhi.n	1001271c <__sflush_r+0xb8>
100126c4:	4a29      	ldr	r2, [pc, #164]	; (1001276c <__sflush_r+0x108>)
100126c6:	410a      	asrs	r2, r1
100126c8:	07d6      	lsls	r6, r2, #31
100126ca:	d427      	bmi.n	1001271c <__sflush_r+0xb8>
100126cc:	2200      	movs	r2, #0
100126ce:	6062      	str	r2, [r4, #4]
100126d0:	04d9      	lsls	r1, r3, #19
100126d2:	6922      	ldr	r2, [r4, #16]
100126d4:	6022      	str	r2, [r4, #0]
100126d6:	d504      	bpl.n	100126e2 <__sflush_r+0x7e>
100126d8:	1c42      	adds	r2, r0, #1
100126da:	d101      	bne.n	100126e0 <__sflush_r+0x7c>
100126dc:	682b      	ldr	r3, [r5, #0]
100126de:	b903      	cbnz	r3, 100126e2 <__sflush_r+0x7e>
100126e0:	6560      	str	r0, [r4, #84]	; 0x54
100126e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
100126e4:	602f      	str	r7, [r5, #0]
100126e6:	2900      	cmp	r1, #0
100126e8:	d0c9      	beq.n	1001267e <__sflush_r+0x1a>
100126ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
100126ee:	4299      	cmp	r1, r3
100126f0:	d002      	beq.n	100126f8 <__sflush_r+0x94>
100126f2:	4628      	mov	r0, r5
100126f4:	f7ff f94a 	bl	1001198c <_free_r>
100126f8:	2000      	movs	r0, #0
100126fa:	6360      	str	r0, [r4, #52]	; 0x34
100126fc:	e7c0      	b.n	10012680 <__sflush_r+0x1c>
100126fe:	2301      	movs	r3, #1
10012700:	4628      	mov	r0, r5
10012702:	47b0      	blx	r6
10012704:	1c41      	adds	r1, r0, #1
10012706:	d1c8      	bne.n	1001269a <__sflush_r+0x36>
10012708:	682b      	ldr	r3, [r5, #0]
1001270a:	2b00      	cmp	r3, #0
1001270c:	d0c5      	beq.n	1001269a <__sflush_r+0x36>
1001270e:	2b1d      	cmp	r3, #29
10012710:	d001      	beq.n	10012716 <__sflush_r+0xb2>
10012712:	2b16      	cmp	r3, #22
10012714:	d101      	bne.n	1001271a <__sflush_r+0xb6>
10012716:	602f      	str	r7, [r5, #0]
10012718:	e7b1      	b.n	1001267e <__sflush_r+0x1a>
1001271a:	89a3      	ldrh	r3, [r4, #12]
1001271c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10012720:	81a3      	strh	r3, [r4, #12]
10012722:	e7ad      	b.n	10012680 <__sflush_r+0x1c>
10012724:	690f      	ldr	r7, [r1, #16]
10012726:	2f00      	cmp	r7, #0
10012728:	d0a9      	beq.n	1001267e <__sflush_r+0x1a>
1001272a:	0793      	lsls	r3, r2, #30
1001272c:	680e      	ldr	r6, [r1, #0]
1001272e:	bf08      	it	eq
10012730:	694b      	ldreq	r3, [r1, #20]
10012732:	600f      	str	r7, [r1, #0]
10012734:	bf18      	it	ne
10012736:	2300      	movne	r3, #0
10012738:	eba6 0807 	sub.w	r8, r6, r7
1001273c:	608b      	str	r3, [r1, #8]
1001273e:	f1b8 0f00 	cmp.w	r8, #0
10012742:	dd9c      	ble.n	1001267e <__sflush_r+0x1a>
10012744:	6a21      	ldr	r1, [r4, #32]
10012746:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10012748:	4643      	mov	r3, r8
1001274a:	463a      	mov	r2, r7
1001274c:	4628      	mov	r0, r5
1001274e:	47b0      	blx	r6
10012750:	2800      	cmp	r0, #0
10012752:	dc06      	bgt.n	10012762 <__sflush_r+0xfe>
10012754:	89a3      	ldrh	r3, [r4, #12]
10012756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1001275a:	81a3      	strh	r3, [r4, #12]
1001275c:	f04f 30ff 	mov.w	r0, #4294967295
10012760:	e78e      	b.n	10012680 <__sflush_r+0x1c>
10012762:	4407      	add	r7, r0
10012764:	eba8 0800 	sub.w	r8, r8, r0
10012768:	e7e9      	b.n	1001273e <__sflush_r+0xda>
1001276a:	bf00      	nop
1001276c:	dfbffffe 	.word	0xdfbffffe

10012770 <_fflush_r>:
10012770:	b538      	push	{r3, r4, r5, lr}
10012772:	690b      	ldr	r3, [r1, #16]
10012774:	4605      	mov	r5, r0
10012776:	460c      	mov	r4, r1
10012778:	b913      	cbnz	r3, 10012780 <_fflush_r+0x10>
1001277a:	2500      	movs	r5, #0
1001277c:	4628      	mov	r0, r5
1001277e:	bd38      	pop	{r3, r4, r5, pc}
10012780:	b118      	cbz	r0, 1001278a <_fflush_r+0x1a>
10012782:	6a03      	ldr	r3, [r0, #32]
10012784:	b90b      	cbnz	r3, 1001278a <_fflush_r+0x1a>
10012786:	f7fe f911 	bl	100109ac <__sinit>
1001278a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001278e:	2b00      	cmp	r3, #0
10012790:	d0f3      	beq.n	1001277a <_fflush_r+0xa>
10012792:	6e62      	ldr	r2, [r4, #100]	; 0x64
10012794:	07d0      	lsls	r0, r2, #31
10012796:	d404      	bmi.n	100127a2 <_fflush_r+0x32>
10012798:	0599      	lsls	r1, r3, #22
1001279a:	d402      	bmi.n	100127a2 <_fflush_r+0x32>
1001279c:	6da0      	ldr	r0, [r4, #88]	; 0x58
1001279e:	f7fe fa62 	bl	10010c66 <__retarget_lock_acquire_recursive>
100127a2:	4628      	mov	r0, r5
100127a4:	4621      	mov	r1, r4
100127a6:	f7ff ff5d 	bl	10012664 <__sflush_r>
100127aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
100127ac:	07da      	lsls	r2, r3, #31
100127ae:	4605      	mov	r5, r0
100127b0:	d4e4      	bmi.n	1001277c <_fflush_r+0xc>
100127b2:	89a3      	ldrh	r3, [r4, #12]
100127b4:	059b      	lsls	r3, r3, #22
100127b6:	d4e1      	bmi.n	1001277c <_fflush_r+0xc>
100127b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
100127ba:	f7fe fa55 	bl	10010c68 <__retarget_lock_release_recursive>
100127be:	e7dd      	b.n	1001277c <_fflush_r+0xc>

100127c0 <__swbuf_r>:
100127c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100127c2:	460e      	mov	r6, r1
100127c4:	4614      	mov	r4, r2
100127c6:	4605      	mov	r5, r0
100127c8:	b118      	cbz	r0, 100127d2 <__swbuf_r+0x12>
100127ca:	6a03      	ldr	r3, [r0, #32]
100127cc:	b90b      	cbnz	r3, 100127d2 <__swbuf_r+0x12>
100127ce:	f7fe f8ed 	bl	100109ac <__sinit>
100127d2:	69a3      	ldr	r3, [r4, #24]
100127d4:	60a3      	str	r3, [r4, #8]
100127d6:	89a3      	ldrh	r3, [r4, #12]
100127d8:	071a      	lsls	r2, r3, #28
100127da:	d525      	bpl.n	10012828 <__swbuf_r+0x68>
100127dc:	6923      	ldr	r3, [r4, #16]
100127de:	b31b      	cbz	r3, 10012828 <__swbuf_r+0x68>
100127e0:	6823      	ldr	r3, [r4, #0]
100127e2:	6922      	ldr	r2, [r4, #16]
100127e4:	1a98      	subs	r0, r3, r2
100127e6:	6963      	ldr	r3, [r4, #20]
100127e8:	b2f6      	uxtb	r6, r6
100127ea:	4283      	cmp	r3, r0
100127ec:	4637      	mov	r7, r6
100127ee:	dc04      	bgt.n	100127fa <__swbuf_r+0x3a>
100127f0:	4621      	mov	r1, r4
100127f2:	4628      	mov	r0, r5
100127f4:	f7ff ffbc 	bl	10012770 <_fflush_r>
100127f8:	b9e0      	cbnz	r0, 10012834 <__swbuf_r+0x74>
100127fa:	68a3      	ldr	r3, [r4, #8]
100127fc:	3b01      	subs	r3, #1
100127fe:	60a3      	str	r3, [r4, #8]
10012800:	6823      	ldr	r3, [r4, #0]
10012802:	1c5a      	adds	r2, r3, #1
10012804:	6022      	str	r2, [r4, #0]
10012806:	701e      	strb	r6, [r3, #0]
10012808:	6962      	ldr	r2, [r4, #20]
1001280a:	1c43      	adds	r3, r0, #1
1001280c:	429a      	cmp	r2, r3
1001280e:	d004      	beq.n	1001281a <__swbuf_r+0x5a>
10012810:	89a3      	ldrh	r3, [r4, #12]
10012812:	07db      	lsls	r3, r3, #31
10012814:	d506      	bpl.n	10012824 <__swbuf_r+0x64>
10012816:	2e0a      	cmp	r6, #10
10012818:	d104      	bne.n	10012824 <__swbuf_r+0x64>
1001281a:	4621      	mov	r1, r4
1001281c:	4628      	mov	r0, r5
1001281e:	f7ff ffa7 	bl	10012770 <_fflush_r>
10012822:	b938      	cbnz	r0, 10012834 <__swbuf_r+0x74>
10012824:	4638      	mov	r0, r7
10012826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012828:	4621      	mov	r1, r4
1001282a:	4628      	mov	r0, r5
1001282c:	f000 f806 	bl	1001283c <__swsetup_r>
10012830:	2800      	cmp	r0, #0
10012832:	d0d5      	beq.n	100127e0 <__swbuf_r+0x20>
10012834:	f04f 37ff 	mov.w	r7, #4294967295
10012838:	e7f4      	b.n	10012824 <__swbuf_r+0x64>
	...

1001283c <__swsetup_r>:
1001283c:	b538      	push	{r3, r4, r5, lr}
1001283e:	4b2a      	ldr	r3, [pc, #168]	; (100128e8 <__swsetup_r+0xac>)
10012840:	4605      	mov	r5, r0
10012842:	6818      	ldr	r0, [r3, #0]
10012844:	460c      	mov	r4, r1
10012846:	b118      	cbz	r0, 10012850 <__swsetup_r+0x14>
10012848:	6a03      	ldr	r3, [r0, #32]
1001284a:	b90b      	cbnz	r3, 10012850 <__swsetup_r+0x14>
1001284c:	f7fe f8ae 	bl	100109ac <__sinit>
10012850:	89a3      	ldrh	r3, [r4, #12]
10012852:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
10012856:	0718      	lsls	r0, r3, #28
10012858:	d422      	bmi.n	100128a0 <__swsetup_r+0x64>
1001285a:	06d9      	lsls	r1, r3, #27
1001285c:	d407      	bmi.n	1001286e <__swsetup_r+0x32>
1001285e:	2309      	movs	r3, #9
10012860:	602b      	str	r3, [r5, #0]
10012862:	f042 0340 	orr.w	r3, r2, #64	; 0x40
10012866:	81a3      	strh	r3, [r4, #12]
10012868:	f04f 30ff 	mov.w	r0, #4294967295
1001286c:	e034      	b.n	100128d8 <__swsetup_r+0x9c>
1001286e:	0758      	lsls	r0, r3, #29
10012870:	d512      	bpl.n	10012898 <__swsetup_r+0x5c>
10012872:	6b61      	ldr	r1, [r4, #52]	; 0x34
10012874:	b141      	cbz	r1, 10012888 <__swsetup_r+0x4c>
10012876:	f104 0344 	add.w	r3, r4, #68	; 0x44
1001287a:	4299      	cmp	r1, r3
1001287c:	d002      	beq.n	10012884 <__swsetup_r+0x48>
1001287e:	4628      	mov	r0, r5
10012880:	f7ff f884 	bl	1001198c <_free_r>
10012884:	2300      	movs	r3, #0
10012886:	6363      	str	r3, [r4, #52]	; 0x34
10012888:	89a3      	ldrh	r3, [r4, #12]
1001288a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1001288e:	81a3      	strh	r3, [r4, #12]
10012890:	2300      	movs	r3, #0
10012892:	6063      	str	r3, [r4, #4]
10012894:	6923      	ldr	r3, [r4, #16]
10012896:	6023      	str	r3, [r4, #0]
10012898:	89a3      	ldrh	r3, [r4, #12]
1001289a:	f043 0308 	orr.w	r3, r3, #8
1001289e:	81a3      	strh	r3, [r4, #12]
100128a0:	6923      	ldr	r3, [r4, #16]
100128a2:	b94b      	cbnz	r3, 100128b8 <__swsetup_r+0x7c>
100128a4:	89a3      	ldrh	r3, [r4, #12]
100128a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
100128aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
100128ae:	d003      	beq.n	100128b8 <__swsetup_r+0x7c>
100128b0:	4621      	mov	r1, r4
100128b2:	4628      	mov	r0, r5
100128b4:	f000 f8d3 	bl	10012a5e <__smakebuf_r>
100128b8:	89a0      	ldrh	r0, [r4, #12]
100128ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
100128be:	f010 0301 	ands.w	r3, r0, #1
100128c2:	d00a      	beq.n	100128da <__swsetup_r+0x9e>
100128c4:	2300      	movs	r3, #0
100128c6:	60a3      	str	r3, [r4, #8]
100128c8:	6963      	ldr	r3, [r4, #20]
100128ca:	425b      	negs	r3, r3
100128cc:	61a3      	str	r3, [r4, #24]
100128ce:	6923      	ldr	r3, [r4, #16]
100128d0:	b943      	cbnz	r3, 100128e4 <__swsetup_r+0xa8>
100128d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
100128d6:	d1c4      	bne.n	10012862 <__swsetup_r+0x26>
100128d8:	bd38      	pop	{r3, r4, r5, pc}
100128da:	0781      	lsls	r1, r0, #30
100128dc:	bf58      	it	pl
100128de:	6963      	ldrpl	r3, [r4, #20]
100128e0:	60a3      	str	r3, [r4, #8]
100128e2:	e7f4      	b.n	100128ce <__swsetup_r+0x92>
100128e4:	2000      	movs	r0, #0
100128e6:	e7f7      	b.n	100128d8 <__swsetup_r+0x9c>
100128e8:	10020bd0 	.word	0x10020bd0

100128ec <memmove>:
100128ec:	4288      	cmp	r0, r1
100128ee:	b510      	push	{r4, lr}
100128f0:	eb01 0402 	add.w	r4, r1, r2
100128f4:	d902      	bls.n	100128fc <memmove+0x10>
100128f6:	4284      	cmp	r4, r0
100128f8:	4623      	mov	r3, r4
100128fa:	d807      	bhi.n	1001290c <memmove+0x20>
100128fc:	1e43      	subs	r3, r0, #1
100128fe:	42a1      	cmp	r1, r4
10012900:	d008      	beq.n	10012914 <memmove+0x28>
10012902:	f811 2b01 	ldrb.w	r2, [r1], #1
10012906:	f803 2f01 	strb.w	r2, [r3, #1]!
1001290a:	e7f8      	b.n	100128fe <memmove+0x12>
1001290c:	4402      	add	r2, r0
1001290e:	4601      	mov	r1, r0
10012910:	428a      	cmp	r2, r1
10012912:	d100      	bne.n	10012916 <memmove+0x2a>
10012914:	bd10      	pop	{r4, pc}
10012916:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1001291a:	f802 4d01 	strb.w	r4, [r2, #-1]!
1001291e:	e7f7      	b.n	10012910 <memmove+0x24>

10012920 <_raise_r>:
10012920:	291f      	cmp	r1, #31
10012922:	b538      	push	{r3, r4, r5, lr}
10012924:	4604      	mov	r4, r0
10012926:	460d      	mov	r5, r1
10012928:	d904      	bls.n	10012934 <_raise_r+0x14>
1001292a:	2316      	movs	r3, #22
1001292c:	6003      	str	r3, [r0, #0]
1001292e:	f04f 30ff 	mov.w	r0, #4294967295
10012932:	bd38      	pop	{r3, r4, r5, pc}
10012934:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
10012936:	b112      	cbz	r2, 1001293e <_raise_r+0x1e>
10012938:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
1001293c:	b94b      	cbnz	r3, 10012952 <_raise_r+0x32>
1001293e:	4620      	mov	r0, r4
10012940:	f000 f830 	bl	100129a4 <_getpid_r>
10012944:	462a      	mov	r2, r5
10012946:	4601      	mov	r1, r0
10012948:	4620      	mov	r0, r4
1001294a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1001294e:	f000 b817 	b.w	10012980 <_kill_r>
10012952:	2b01      	cmp	r3, #1
10012954:	d00a      	beq.n	1001296c <_raise_r+0x4c>
10012956:	1c59      	adds	r1, r3, #1
10012958:	d103      	bne.n	10012962 <_raise_r+0x42>
1001295a:	2316      	movs	r3, #22
1001295c:	6003      	str	r3, [r0, #0]
1001295e:	2001      	movs	r0, #1
10012960:	e7e7      	b.n	10012932 <_raise_r+0x12>
10012962:	2400      	movs	r4, #0
10012964:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
10012968:	4628      	mov	r0, r5
1001296a:	4798      	blx	r3
1001296c:	2000      	movs	r0, #0
1001296e:	e7e0      	b.n	10012932 <_raise_r+0x12>

10012970 <raise>:
10012970:	4b02      	ldr	r3, [pc, #8]	; (1001297c <raise+0xc>)
10012972:	4601      	mov	r1, r0
10012974:	6818      	ldr	r0, [r3, #0]
10012976:	f7ff bfd3 	b.w	10012920 <_raise_r>
1001297a:	bf00      	nop
1001297c:	10020bd0 	.word	0x10020bd0

10012980 <_kill_r>:
10012980:	b538      	push	{r3, r4, r5, lr}
10012982:	4d07      	ldr	r5, [pc, #28]	; (100129a0 <_kill_r+0x20>)
10012984:	2300      	movs	r3, #0
10012986:	4604      	mov	r4, r0
10012988:	4608      	mov	r0, r1
1001298a:	4611      	mov	r1, r2
1001298c:	602b      	str	r3, [r5, #0]
1001298e:	f000 fa19 	bl	10012dc4 <_kill>
10012992:	1c43      	adds	r3, r0, #1
10012994:	d102      	bne.n	1001299c <_kill_r+0x1c>
10012996:	682b      	ldr	r3, [r5, #0]
10012998:	b103      	cbz	r3, 1001299c <_kill_r+0x1c>
1001299a:	6023      	str	r3, [r4, #0]
1001299c:	bd38      	pop	{r3, r4, r5, pc}
1001299e:	bf00      	nop
100129a0:	10029e90 	.word	0x10029e90

100129a4 <_getpid_r>:
100129a4:	f000 b9fe 	b.w	10012da4 <_getpid>

100129a8 <_calloc_r>:
100129a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
100129aa:	fba1 2402 	umull	r2, r4, r1, r2
100129ae:	b94c      	cbnz	r4, 100129c4 <_calloc_r+0x1c>
100129b0:	4611      	mov	r1, r2
100129b2:	9201      	str	r2, [sp, #4]
100129b4:	f7fd fa4c 	bl	1000fe50 <_malloc_r>
100129b8:	9a01      	ldr	r2, [sp, #4]
100129ba:	4605      	mov	r5, r0
100129bc:	b930      	cbnz	r0, 100129cc <_calloc_r+0x24>
100129be:	4628      	mov	r0, r5
100129c0:	b003      	add	sp, #12
100129c2:	bd30      	pop	{r4, r5, pc}
100129c4:	220c      	movs	r2, #12
100129c6:	6002      	str	r2, [r0, #0]
100129c8:	2500      	movs	r5, #0
100129ca:	e7f8      	b.n	100129be <_calloc_r+0x16>
100129cc:	4621      	mov	r1, r4
100129ce:	f7fe f898 	bl	10010b02 <memset>
100129d2:	e7f4      	b.n	100129be <_calloc_r+0x16>

100129d4 <__ascii_mbtowc>:
100129d4:	b082      	sub	sp, #8
100129d6:	b901      	cbnz	r1, 100129da <__ascii_mbtowc+0x6>
100129d8:	a901      	add	r1, sp, #4
100129da:	b142      	cbz	r2, 100129ee <__ascii_mbtowc+0x1a>
100129dc:	b14b      	cbz	r3, 100129f2 <__ascii_mbtowc+0x1e>
100129de:	7813      	ldrb	r3, [r2, #0]
100129e0:	600b      	str	r3, [r1, #0]
100129e2:	7812      	ldrb	r2, [r2, #0]
100129e4:	1e10      	subs	r0, r2, #0
100129e6:	bf18      	it	ne
100129e8:	2001      	movne	r0, #1
100129ea:	b002      	add	sp, #8
100129ec:	4770      	bx	lr
100129ee:	4610      	mov	r0, r2
100129f0:	e7fb      	b.n	100129ea <__ascii_mbtowc+0x16>
100129f2:	f06f 0001 	mvn.w	r0, #1
100129f6:	e7f8      	b.n	100129ea <__ascii_mbtowc+0x16>

100129f8 <__ascii_wctomb>:
100129f8:	b149      	cbz	r1, 10012a0e <__ascii_wctomb+0x16>
100129fa:	2aff      	cmp	r2, #255	; 0xff
100129fc:	bf85      	ittet	hi
100129fe:	238a      	movhi	r3, #138	; 0x8a
10012a00:	6003      	strhi	r3, [r0, #0]
10012a02:	700a      	strbls	r2, [r1, #0]
10012a04:	f04f 30ff 	movhi.w	r0, #4294967295
10012a08:	bf98      	it	ls
10012a0a:	2001      	movls	r0, #1
10012a0c:	4770      	bx	lr
10012a0e:	4608      	mov	r0, r1
10012a10:	4770      	bx	lr

10012a12 <__swhatbuf_r>:
10012a12:	b570      	push	{r4, r5, r6, lr}
10012a14:	460c      	mov	r4, r1
10012a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10012a1a:	2900      	cmp	r1, #0
10012a1c:	b096      	sub	sp, #88	; 0x58
10012a1e:	4615      	mov	r5, r2
10012a20:	461e      	mov	r6, r3
10012a22:	da0d      	bge.n	10012a40 <__swhatbuf_r+0x2e>
10012a24:	89a3      	ldrh	r3, [r4, #12]
10012a26:	f013 0f80 	tst.w	r3, #128	; 0x80
10012a2a:	f04f 0100 	mov.w	r1, #0
10012a2e:	bf0c      	ite	eq
10012a30:	f44f 6380 	moveq.w	r3, #1024	; 0x400
10012a34:	2340      	movne	r3, #64	; 0x40
10012a36:	2000      	movs	r0, #0
10012a38:	6031      	str	r1, [r6, #0]
10012a3a:	602b      	str	r3, [r5, #0]
10012a3c:	b016      	add	sp, #88	; 0x58
10012a3e:	bd70      	pop	{r4, r5, r6, pc}
10012a40:	466a      	mov	r2, sp
10012a42:	f000 f849 	bl	10012ad8 <_fstat_r>
10012a46:	2800      	cmp	r0, #0
10012a48:	dbec      	blt.n	10012a24 <__swhatbuf_r+0x12>
10012a4a:	9901      	ldr	r1, [sp, #4]
10012a4c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
10012a50:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
10012a54:	4259      	negs	r1, r3
10012a56:	4159      	adcs	r1, r3
10012a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
10012a5c:	e7eb      	b.n	10012a36 <__swhatbuf_r+0x24>

10012a5e <__smakebuf_r>:
10012a5e:	898b      	ldrh	r3, [r1, #12]
10012a60:	b573      	push	{r0, r1, r4, r5, r6, lr}
10012a62:	079d      	lsls	r5, r3, #30
10012a64:	4606      	mov	r6, r0
10012a66:	460c      	mov	r4, r1
10012a68:	d507      	bpl.n	10012a7a <__smakebuf_r+0x1c>
10012a6a:	f104 0347 	add.w	r3, r4, #71	; 0x47
10012a6e:	6023      	str	r3, [r4, #0]
10012a70:	6123      	str	r3, [r4, #16]
10012a72:	2301      	movs	r3, #1
10012a74:	6163      	str	r3, [r4, #20]
10012a76:	b002      	add	sp, #8
10012a78:	bd70      	pop	{r4, r5, r6, pc}
10012a7a:	ab01      	add	r3, sp, #4
10012a7c:	466a      	mov	r2, sp
10012a7e:	f7ff ffc8 	bl	10012a12 <__swhatbuf_r>
10012a82:	9900      	ldr	r1, [sp, #0]
10012a84:	4605      	mov	r5, r0
10012a86:	4630      	mov	r0, r6
10012a88:	f7fd f9e2 	bl	1000fe50 <_malloc_r>
10012a8c:	b948      	cbnz	r0, 10012aa2 <__smakebuf_r+0x44>
10012a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10012a92:	059a      	lsls	r2, r3, #22
10012a94:	d4ef      	bmi.n	10012a76 <__smakebuf_r+0x18>
10012a96:	f023 0303 	bic.w	r3, r3, #3
10012a9a:	f043 0302 	orr.w	r3, r3, #2
10012a9e:	81a3      	strh	r3, [r4, #12]
10012aa0:	e7e3      	b.n	10012a6a <__smakebuf_r+0xc>
10012aa2:	89a3      	ldrh	r3, [r4, #12]
10012aa4:	6020      	str	r0, [r4, #0]
10012aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
10012aaa:	81a3      	strh	r3, [r4, #12]
10012aac:	9b00      	ldr	r3, [sp, #0]
10012aae:	6163      	str	r3, [r4, #20]
10012ab0:	9b01      	ldr	r3, [sp, #4]
10012ab2:	6120      	str	r0, [r4, #16]
10012ab4:	b15b      	cbz	r3, 10012ace <__smakebuf_r+0x70>
10012ab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
10012aba:	4630      	mov	r0, r6
10012abc:	f000 f81e 	bl	10012afc <_isatty_r>
10012ac0:	b128      	cbz	r0, 10012ace <__smakebuf_r+0x70>
10012ac2:	89a3      	ldrh	r3, [r4, #12]
10012ac4:	f023 0303 	bic.w	r3, r3, #3
10012ac8:	f043 0301 	orr.w	r3, r3, #1
10012acc:	81a3      	strh	r3, [r4, #12]
10012ace:	89a3      	ldrh	r3, [r4, #12]
10012ad0:	431d      	orrs	r5, r3
10012ad2:	81a5      	strh	r5, [r4, #12]
10012ad4:	e7cf      	b.n	10012a76 <__smakebuf_r+0x18>
	...

10012ad8 <_fstat_r>:
10012ad8:	b538      	push	{r3, r4, r5, lr}
10012ada:	4d07      	ldr	r5, [pc, #28]	; (10012af8 <_fstat_r+0x20>)
10012adc:	2300      	movs	r3, #0
10012ade:	4604      	mov	r4, r0
10012ae0:	4608      	mov	r0, r1
10012ae2:	4611      	mov	r1, r2
10012ae4:	602b      	str	r3, [r5, #0]
10012ae6:	f000 f955 	bl	10012d94 <_fstat>
10012aea:	1c43      	adds	r3, r0, #1
10012aec:	d102      	bne.n	10012af4 <_fstat_r+0x1c>
10012aee:	682b      	ldr	r3, [r5, #0]
10012af0:	b103      	cbz	r3, 10012af4 <_fstat_r+0x1c>
10012af2:	6023      	str	r3, [r4, #0]
10012af4:	bd38      	pop	{r3, r4, r5, pc}
10012af6:	bf00      	nop
10012af8:	10029e90 	.word	0x10029e90

10012afc <_isatty_r>:
10012afc:	b538      	push	{r3, r4, r5, lr}
10012afe:	4d06      	ldr	r5, [pc, #24]	; (10012b18 <_isatty_r+0x1c>)
10012b00:	2300      	movs	r3, #0
10012b02:	4604      	mov	r4, r0
10012b04:	4608      	mov	r0, r1
10012b06:	602b      	str	r3, [r5, #0]
10012b08:	f000 f954 	bl	10012db4 <_isatty>
10012b0c:	1c43      	adds	r3, r0, #1
10012b0e:	d102      	bne.n	10012b16 <_isatty_r+0x1a>
10012b10:	682b      	ldr	r3, [r5, #0]
10012b12:	b103      	cbz	r3, 10012b16 <_isatty_r+0x1a>
10012b14:	6023      	str	r3, [r4, #0]
10012b16:	bd38      	pop	{r3, r4, r5, pc}
10012b18:	10029e90 	.word	0x10029e90

10012b1c <expf>:
10012b1c:	b508      	push	{r3, lr}
10012b1e:	ed2d 8b02 	vpush	{d8}
10012b22:	eef0 8a40 	vmov.f32	s17, s0
10012b26:	f000 f85f 	bl	10012be8 <__ieee754_expf>
10012b2a:	eeb0 8a40 	vmov.f32	s16, s0
10012b2e:	eeb0 0a68 	vmov.f32	s0, s17
10012b32:	f000 f829 	bl	10012b88 <finitef>
10012b36:	b160      	cbz	r0, 10012b52 <expf+0x36>
10012b38:	eddf 7a0f 	vldr	s15, [pc, #60]	; 10012b78 <expf+0x5c>
10012b3c:	eef4 8ae7 	vcmpe.f32	s17, s15
10012b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
10012b44:	dd0a      	ble.n	10012b5c <expf+0x40>
10012b46:	f7fe f863 	bl	10010c10 <__errno>
10012b4a:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 10012b7c <expf+0x60>
10012b4e:	2322      	movs	r3, #34	; 0x22
10012b50:	6003      	str	r3, [r0, #0]
10012b52:	eeb0 0a48 	vmov.f32	s0, s16
10012b56:	ecbd 8b02 	vpop	{d8}
10012b5a:	bd08      	pop	{r3, pc}
10012b5c:	eddf 7a08 	vldr	s15, [pc, #32]	; 10012b80 <expf+0x64>
10012b60:	eef4 8ae7 	vcmpe.f32	s17, s15
10012b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
10012b68:	d5f3      	bpl.n	10012b52 <expf+0x36>
10012b6a:	f7fe f851 	bl	10010c10 <__errno>
10012b6e:	2322      	movs	r3, #34	; 0x22
10012b70:	ed9f 8a04 	vldr	s16, [pc, #16]	; 10012b84 <expf+0x68>
10012b74:	6003      	str	r3, [r0, #0]
10012b76:	e7ec      	b.n	10012b52 <expf+0x36>
10012b78:	42b17217 	.word	0x42b17217
10012b7c:	7f800000 	.word	0x7f800000
10012b80:	c2cff1b5 	.word	0xc2cff1b5
10012b84:	00000000 	.word	0x00000000

10012b88 <finitef>:
10012b88:	b082      	sub	sp, #8
10012b8a:	ed8d 0a01 	vstr	s0, [sp, #4]
10012b8e:	9801      	ldr	r0, [sp, #4]
10012b90:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
10012b94:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
10012b98:	bfac      	ite	ge
10012b9a:	2000      	movge	r0, #0
10012b9c:	2001      	movlt	r0, #1
10012b9e:	b002      	add	sp, #8
10012ba0:	4770      	bx	lr

10012ba2 <with_errnof>:
10012ba2:	b513      	push	{r0, r1, r4, lr}
10012ba4:	4604      	mov	r4, r0
10012ba6:	ed8d 0a01 	vstr	s0, [sp, #4]
10012baa:	f7fe f831 	bl	10010c10 <__errno>
10012bae:	ed9d 0a01 	vldr	s0, [sp, #4]
10012bb2:	6004      	str	r4, [r0, #0]
10012bb4:	b002      	add	sp, #8
10012bb6:	bd10      	pop	{r4, pc}

10012bb8 <xflowf>:
10012bb8:	b130      	cbz	r0, 10012bc8 <xflowf+0x10>
10012bba:	eef1 7a40 	vneg.f32	s15, s0
10012bbe:	ee27 0a80 	vmul.f32	s0, s15, s0
10012bc2:	2022      	movs	r0, #34	; 0x22
10012bc4:	f7ff bfed 	b.w	10012ba2 <with_errnof>
10012bc8:	eef0 7a40 	vmov.f32	s15, s0
10012bcc:	e7f7      	b.n	10012bbe <xflowf+0x6>
	...

10012bd0 <__math_uflowf>:
10012bd0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 10012bd8 <__math_uflowf+0x8>
10012bd4:	f7ff bff0 	b.w	10012bb8 <xflowf>
10012bd8:	10000000 	.word	0x10000000

10012bdc <__math_oflowf>:
10012bdc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 10012be4 <__math_oflowf+0x8>
10012be0:	f7ff bfea 	b.w	10012bb8 <xflowf>
10012be4:	70000000 	.word	0x70000000

10012be8 <__ieee754_expf>:
10012be8:	ee10 2a10 	vmov	r2, s0
10012bec:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
10012bf0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
10012bf4:	d902      	bls.n	10012bfc <__ieee754_expf+0x14>
10012bf6:	ee30 0a00 	vadd.f32	s0, s0, s0
10012bfa:	4770      	bx	lr
10012bfc:	ea4f 71d2 	mov.w	r1, r2, lsr #31
10012c00:	d106      	bne.n	10012c10 <__ieee754_expf+0x28>
10012c02:	eddf 7a4e 	vldr	s15, [pc, #312]	; 10012d3c <__ieee754_expf+0x154>
10012c06:	2900      	cmp	r1, #0
10012c08:	bf18      	it	ne
10012c0a:	eeb0 0a67 	vmovne.f32	s0, s15
10012c0e:	4770      	bx	lr
10012c10:	484b      	ldr	r0, [pc, #300]	; (10012d40 <__ieee754_expf+0x158>)
10012c12:	4282      	cmp	r2, r0
10012c14:	dd02      	ble.n	10012c1c <__ieee754_expf+0x34>
10012c16:	2000      	movs	r0, #0
10012c18:	f7ff bfe0 	b.w	10012bdc <__math_oflowf>
10012c1c:	2a00      	cmp	r2, #0
10012c1e:	da05      	bge.n	10012c2c <__ieee754_expf+0x44>
10012c20:	4a48      	ldr	r2, [pc, #288]	; (10012d44 <__ieee754_expf+0x15c>)
10012c22:	4293      	cmp	r3, r2
10012c24:	d902      	bls.n	10012c2c <__ieee754_expf+0x44>
10012c26:	2000      	movs	r0, #0
10012c28:	f7ff bfd2 	b.w	10012bd0 <__math_uflowf>
10012c2c:	4a46      	ldr	r2, [pc, #280]	; (10012d48 <__ieee754_expf+0x160>)
10012c2e:	4293      	cmp	r3, r2
10012c30:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
10012c34:	d952      	bls.n	10012cdc <__ieee754_expf+0xf4>
10012c36:	4a45      	ldr	r2, [pc, #276]	; (10012d4c <__ieee754_expf+0x164>)
10012c38:	4293      	cmp	r3, r2
10012c3a:	ea4f 0281 	mov.w	r2, r1, lsl #2
10012c3e:	d834      	bhi.n	10012caa <__ieee754_expf+0xc2>
10012c40:	4b43      	ldr	r3, [pc, #268]	; (10012d50 <__ieee754_expf+0x168>)
10012c42:	4413      	add	r3, r2
10012c44:	ed93 7a00 	vldr	s14, [r3]
10012c48:	4b42      	ldr	r3, [pc, #264]	; (10012d54 <__ieee754_expf+0x16c>)
10012c4a:	4413      	add	r3, r2
10012c4c:	ee30 7a47 	vsub.f32	s14, s0, s14
10012c50:	f1c1 0201 	rsb	r2, r1, #1
10012c54:	edd3 7a00 	vldr	s15, [r3]
10012c58:	1a52      	subs	r2, r2, r1
10012c5a:	ee37 0a67 	vsub.f32	s0, s14, s15
10012c5e:	ee20 6a00 	vmul.f32	s12, s0, s0
10012c62:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 10012d58 <__ieee754_expf+0x170>
10012c66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 10012d5c <__ieee754_expf+0x174>
10012c6a:	eee6 6a05 	vfma.f32	s13, s12, s10
10012c6e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 10012d60 <__ieee754_expf+0x178>
10012c72:	eea6 5a86 	vfma.f32	s10, s13, s12
10012c76:	eddf 6a3b 	vldr	s13, [pc, #236]	; 10012d64 <__ieee754_expf+0x17c>
10012c7a:	eee5 6a06 	vfma.f32	s13, s10, s12
10012c7e:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 10012d68 <__ieee754_expf+0x180>
10012c82:	eea6 5a86 	vfma.f32	s10, s13, s12
10012c86:	eef0 6a40 	vmov.f32	s13, s0
10012c8a:	eee5 6a46 	vfms.f32	s13, s10, s12
10012c8e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
10012c92:	ee20 5a26 	vmul.f32	s10, s0, s13
10012c96:	bb92      	cbnz	r2, 10012cfe <__ieee754_expf+0x116>
10012c98:	ee76 6ac6 	vsub.f32	s13, s13, s12
10012c9c:	eec5 7a26 	vdiv.f32	s15, s10, s13
10012ca0:	ee37 0ac0 	vsub.f32	s0, s15, s0
10012ca4:	ee35 0ac0 	vsub.f32	s0, s11, s0
10012ca8:	4770      	bx	lr
10012caa:	4b30      	ldr	r3, [pc, #192]	; (10012d6c <__ieee754_expf+0x184>)
10012cac:	ed9f 7a30 	vldr	s14, [pc, #192]	; 10012d70 <__ieee754_expf+0x188>
10012cb0:	eddf 6a30 	vldr	s13, [pc, #192]	; 10012d74 <__ieee754_expf+0x18c>
10012cb4:	4413      	add	r3, r2
10012cb6:	edd3 7a00 	vldr	s15, [r3]
10012cba:	eee0 7a07 	vfma.f32	s15, s0, s14
10012cbe:	eeb0 7a40 	vmov.f32	s14, s0
10012cc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
10012cc6:	ee17 2a90 	vmov	r2, s15
10012cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
10012cce:	eea7 7ae6 	vfms.f32	s14, s15, s13
10012cd2:	eddf 6a29 	vldr	s13, [pc, #164]	; 10012d78 <__ieee754_expf+0x190>
10012cd6:	ee67 7aa6 	vmul.f32	s15, s15, s13
10012cda:	e7be      	b.n	10012c5a <__ieee754_expf+0x72>
10012cdc:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
10012ce0:	d20b      	bcs.n	10012cfa <__ieee754_expf+0x112>
10012ce2:	eddf 6a26 	vldr	s13, [pc, #152]	; 10012d7c <__ieee754_expf+0x194>
10012ce6:	ee70 6a26 	vadd.f32	s13, s0, s13
10012cea:	eef4 6ae5 	vcmpe.f32	s13, s11
10012cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
10012cf2:	dd02      	ble.n	10012cfa <__ieee754_expf+0x112>
10012cf4:	ee30 0a25 	vadd.f32	s0, s0, s11
10012cf8:	4770      	bx	lr
10012cfa:	2200      	movs	r2, #0
10012cfc:	e7af      	b.n	10012c5e <__ieee754_expf+0x76>
10012cfe:	ee36 6a66 	vsub.f32	s12, s12, s13
10012d02:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
10012d06:	eec5 6a06 	vdiv.f32	s13, s10, s12
10012d0a:	bfb8      	it	lt
10012d0c:	3264      	addlt	r2, #100	; 0x64
10012d0e:	ee77 7ae6 	vsub.f32	s15, s15, s13
10012d12:	ee77 7ac7 	vsub.f32	s15, s15, s14
10012d16:	ee75 7ae7 	vsub.f32	s15, s11, s15
10012d1a:	ee17 3a90 	vmov	r3, s15
10012d1e:	bfab      	itete	ge
10012d20:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
10012d24:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
10012d28:	ee00 3a10 	vmovge	s0, r3
10012d2c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 10012d80 <__ieee754_expf+0x198>
10012d30:	bfbc      	itt	lt
10012d32:	ee00 3a10 	vmovlt	s0, r3
10012d36:	ee20 0a27 	vmullt.f32	s0, s0, s15
10012d3a:	4770      	bx	lr
10012d3c:	00000000 	.word	0x00000000
10012d40:	42b17217 	.word	0x42b17217
10012d44:	42cff1b5 	.word	0x42cff1b5
10012d48:	3eb17218 	.word	0x3eb17218
10012d4c:	3f851591 	.word	0x3f851591
10012d50:	100177d0 	.word	0x100177d0
10012d54:	100177d8 	.word	0x100177d8
10012d58:	3331bb4c 	.word	0x3331bb4c
10012d5c:	b5ddea0e 	.word	0xb5ddea0e
10012d60:	388ab355 	.word	0x388ab355
10012d64:	bb360b61 	.word	0xbb360b61
10012d68:	3e2aaaab 	.word	0x3e2aaaab
10012d6c:	100177c8 	.word	0x100177c8
10012d70:	3fb8aa3b 	.word	0x3fb8aa3b
10012d74:	3f317180 	.word	0x3f317180
10012d78:	3717f7d1 	.word	0x3717f7d1
10012d7c:	7149f2ca 	.word	0x7149f2ca
10012d80:	0d800000 	.word	0x0d800000

10012d84 <_close>:
10012d84:	4b02      	ldr	r3, [pc, #8]	; (10012d90 <_close+0xc>)
10012d86:	2258      	movs	r2, #88	; 0x58
10012d88:	601a      	str	r2, [r3, #0]
10012d8a:	f04f 30ff 	mov.w	r0, #4294967295
10012d8e:	4770      	bx	lr
10012d90:	10029e90 	.word	0x10029e90

10012d94 <_fstat>:
10012d94:	4b02      	ldr	r3, [pc, #8]	; (10012da0 <_fstat+0xc>)
10012d96:	2258      	movs	r2, #88	; 0x58
10012d98:	601a      	str	r2, [r3, #0]
10012d9a:	f04f 30ff 	mov.w	r0, #4294967295
10012d9e:	4770      	bx	lr
10012da0:	10029e90 	.word	0x10029e90

10012da4 <_getpid>:
10012da4:	4b02      	ldr	r3, [pc, #8]	; (10012db0 <_getpid+0xc>)
10012da6:	2258      	movs	r2, #88	; 0x58
10012da8:	601a      	str	r2, [r3, #0]
10012daa:	f04f 30ff 	mov.w	r0, #4294967295
10012dae:	4770      	bx	lr
10012db0:	10029e90 	.word	0x10029e90

10012db4 <_isatty>:
10012db4:	4b02      	ldr	r3, [pc, #8]	; (10012dc0 <_isatty+0xc>)
10012db6:	2258      	movs	r2, #88	; 0x58
10012db8:	601a      	str	r2, [r3, #0]
10012dba:	2000      	movs	r0, #0
10012dbc:	4770      	bx	lr
10012dbe:	bf00      	nop
10012dc0:	10029e90 	.word	0x10029e90

10012dc4 <_kill>:
10012dc4:	4b02      	ldr	r3, [pc, #8]	; (10012dd0 <_kill+0xc>)
10012dc6:	2258      	movs	r2, #88	; 0x58
10012dc8:	601a      	str	r2, [r3, #0]
10012dca:	f04f 30ff 	mov.w	r0, #4294967295
10012dce:	4770      	bx	lr
10012dd0:	10029e90 	.word	0x10029e90

10012dd4 <_lseek>:
10012dd4:	4b02      	ldr	r3, [pc, #8]	; (10012de0 <_lseek+0xc>)
10012dd6:	2258      	movs	r2, #88	; 0x58
10012dd8:	601a      	str	r2, [r3, #0]
10012dda:	f04f 30ff 	mov.w	r0, #4294967295
10012dde:	4770      	bx	lr
10012de0:	10029e90 	.word	0x10029e90

10012de4 <_read>:
10012de4:	4b02      	ldr	r3, [pc, #8]	; (10012df0 <_read+0xc>)
10012de6:	2258      	movs	r2, #88	; 0x58
10012de8:	601a      	str	r2, [r3, #0]
10012dea:	f04f 30ff 	mov.w	r0, #4294967295
10012dee:	4770      	bx	lr
10012df0:	10029e90 	.word	0x10029e90

10012df4 <_write>:
10012df4:	4b02      	ldr	r3, [pc, #8]	; (10012e00 <_write+0xc>)
10012df6:	2258      	movs	r2, #88	; 0x58
10012df8:	601a      	str	r2, [r3, #0]
10012dfa:	f04f 30ff 	mov.w	r0, #4294967295
10012dfe:	4770      	bx	lr
10012e00:	10029e90 	.word	0x10029e90

10012e04 <_exit>:
10012e04:	e7fe      	b.n	10012e04 <_exit>
	...

10012e08 <_init>:
10012e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012e0a:	bf00      	nop
10012e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
10012e0e:	bc08      	pop	{r3}
10012e10:	469e      	mov	lr, r3
10012e12:	4770      	bx	lr

10012e14 <_fini>:
10012e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012e16:	bf00      	nop
10012e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
10012e1a:	bc08      	pop	{r3}
10012e1c:	469e      	mov	lr, r3
10012e1e:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

10012e20 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
10012e20:	f8df d034 	ldr.w	sp, [pc, #52]	; 10012e58 <LoopForever+0x2>
  movs  r1, #0
10012e24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10012e26:	e003      	b.n	10012e30 <LoopCopyDataInit>

10012e28 <CopyDataInit>:
  ldr  r3, =_sidata
10012e28:	4b0c      	ldr	r3, [pc, #48]	; (10012e5c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
10012e2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10012e2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10012e2e:	3104      	adds	r1, #4

10012e30 <LoopCopyDataInit>:
  ldr  r0, =_sdata
10012e30:	480b      	ldr	r0, [pc, #44]	; (10012e60 <LoopForever+0xa>)
  ldr  r3, =_edata
10012e32:	4b0c      	ldr	r3, [pc, #48]	; (10012e64 <LoopForever+0xe>)
  adds  r2, r0, r1
10012e34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10012e36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10012e38:	d3f6      	bcc.n	10012e28 <CopyDataInit>
  ldr  r2, =_sbss
10012e3a:	4a0b      	ldr	r2, [pc, #44]	; (10012e68 <LoopForever+0x12>)
  b  LoopFillZerobss
10012e3c:	e002      	b.n	10012e44 <LoopFillZerobss>

10012e3e <FillZerobss>:
  movs  r3, #0
10012e3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
10012e40:	f842 3b04 	str.w	r3, [r2], #4

10012e44 <LoopFillZerobss>:
  ldr  r3, = _ebss
10012e44:	4b09      	ldr	r3, [pc, #36]	; (10012e6c <LoopForever+0x16>)
  cmp  r2, r3
10012e46:	429a      	cmp	r2, r3
  bcc  FillZerobss
10012e48:	d3f9      	bcc.n	10012e3e <FillZerobss>
  bl  SystemInit
10012e4a:	f7ed fdf5 	bl	10000a38 <SystemInit>
 bl __libc_init_array
10012e4e:	f7fd fee5 	bl	10010c1c <__libc_init_array>
  bl main
10012e52:	f7ed fe17 	bl	10000a84 <main>

10012e56 <LoopForever>:
    b LoopForever
10012e56:	e7fe      	b.n	10012e56 <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
10012e58:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
10012e5c:	100177e8 	.word	0x100177e8
  ldr  r0, =_sdata
10012e60:	10020000 	.word	0x10020000
  ldr  r3, =_edata
10012e64:	10020d40 	.word	0x10020d40
  ldr  r2, =_sbss
10012e68:	10020dcc 	.word	0x10020dcc
  ldr  r3, = _ebss
10012e6c:	10029e98 	.word	0x10029e98

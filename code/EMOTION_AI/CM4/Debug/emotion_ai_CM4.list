
emotion_ai_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011918  10000000  10000000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  10011918  10011918  00031918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00002c60  10011980  10011980  00031980  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  100145e0  100145e0  00040d18  2**0
                  CONTENTS
  5 .ARM          00000000  100145e0  100145e0  00040d18  2**0
                  CONTENTS
  6 .preinit_array 00000000  100145e0  100145e0  00040d18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  100145e0  100145e0  000345e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  100145e4  100145e4  000345e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000c8c  10020000  100145e8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 0000008c  10020c8c  10015274  00040c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .bss          00001470  10020d18  10015300  00040d18  2**2
                  ALLOC
 12 ._user_heap_stack 00001000  10022188  10016770  00040d18  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00040d18  2**0
                  CONTENTS, READONLY
 14 .comment      00000093  00000000  00000000  00040d48  2**0
                  CONTENTS, READONLY
 15 .debug_info   00024571  00000000  00000000  00040ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000509e  00000000  00000000  0006534c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000016e8  00000000  00000000  0006a3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001108  00000000  00000000  0006bad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0004e72a  00000000  00000000  0006cbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00021be7  00000000  00000000  000bb30a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001ef508  00000000  00000000  000dcef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00007020  00000000  00000000  002cc3fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000073  00000000  00000000  002d341c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	; (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	; (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	; (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	10020d18 	.word	0x10020d18
1000001c:	00000000 	.word	0x00000000
10000020:	10011900 	.word	0x10011900

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	; (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	; (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	; (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	10020d1c 	.word	0x10020d1c
1000003c:	10011900 	.word	0x10011900

10000040 <strcmp>:
10000040:	f810 2b01 	ldrb.w	r2, [r0], #1
10000044:	f811 3b01 	ldrb.w	r3, [r1], #1
10000048:	2a01      	cmp	r2, #1
1000004a:	bf28      	it	cs
1000004c:	429a      	cmpcs	r2, r3
1000004e:	d0f7      	beq.n	10000040 <strcmp>
10000050:	1ad0      	subs	r0, r2, r3
10000052:	4770      	bx	lr
	...

10000060 <memchr>:
10000060:	f001 01ff 	and.w	r1, r1, #255	; 0xff
10000064:	2a10      	cmp	r2, #16
10000066:	db2b      	blt.n	100000c0 <memchr+0x60>
10000068:	f010 0f07 	tst.w	r0, #7
1000006c:	d008      	beq.n	10000080 <memchr+0x20>
1000006e:	f810 3b01 	ldrb.w	r3, [r0], #1
10000072:	3a01      	subs	r2, #1
10000074:	428b      	cmp	r3, r1
10000076:	d02d      	beq.n	100000d4 <memchr+0x74>
10000078:	f010 0f07 	tst.w	r0, #7
1000007c:	b342      	cbz	r2, 100000d0 <memchr+0x70>
1000007e:	d1f6      	bne.n	1000006e <memchr+0xe>
10000080:	b4f0      	push	{r4, r5, r6, r7}
10000082:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
10000086:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1000008a:	f022 0407 	bic.w	r4, r2, #7
1000008e:	f07f 0700 	mvns.w	r7, #0
10000092:	2300      	movs	r3, #0
10000094:	e8f0 5602 	ldrd	r5, r6, [r0], #8
10000098:	3c08      	subs	r4, #8
1000009a:	ea85 0501 	eor.w	r5, r5, r1
1000009e:	ea86 0601 	eor.w	r6, r6, r1
100000a2:	fa85 f547 	uadd8	r5, r5, r7
100000a6:	faa3 f587 	sel	r5, r3, r7
100000aa:	fa86 f647 	uadd8	r6, r6, r7
100000ae:	faa5 f687 	sel	r6, r5, r7
100000b2:	b98e      	cbnz	r6, 100000d8 <memchr+0x78>
100000b4:	d1ee      	bne.n	10000094 <memchr+0x34>
100000b6:	bcf0      	pop	{r4, r5, r6, r7}
100000b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
100000bc:	f002 0207 	and.w	r2, r2, #7
100000c0:	b132      	cbz	r2, 100000d0 <memchr+0x70>
100000c2:	f810 3b01 	ldrb.w	r3, [r0], #1
100000c6:	3a01      	subs	r2, #1
100000c8:	ea83 0301 	eor.w	r3, r3, r1
100000cc:	b113      	cbz	r3, 100000d4 <memchr+0x74>
100000ce:	d1f8      	bne.n	100000c2 <memchr+0x62>
100000d0:	2000      	movs	r0, #0
100000d2:	4770      	bx	lr
100000d4:	3801      	subs	r0, #1
100000d6:	4770      	bx	lr
100000d8:	2d00      	cmp	r5, #0
100000da:	bf06      	itte	eq
100000dc:	4635      	moveq	r5, r6
100000de:	3803      	subeq	r0, #3
100000e0:	3807      	subne	r0, #7
100000e2:	f015 0f01 	tst.w	r5, #1
100000e6:	d107      	bne.n	100000f8 <memchr+0x98>
100000e8:	3001      	adds	r0, #1
100000ea:	f415 7f80 	tst.w	r5, #256	; 0x100
100000ee:	bf02      	ittt	eq
100000f0:	3001      	addeq	r0, #1
100000f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
100000f6:	3001      	addeq	r0, #1
100000f8:	bcf0      	pop	{r4, r5, r6, r7}
100000fa:	3801      	subs	r0, #1
100000fc:	4770      	bx	lr
100000fe:	bf00      	nop

10000100 <strlen>:
10000100:	4603      	mov	r3, r0
10000102:	f813 2b01 	ldrb.w	r2, [r3], #1
10000106:	2a00      	cmp	r2, #0
10000108:	d1fb      	bne.n	10000102 <strlen+0x2>
1000010a:	1a18      	subs	r0, r3, r0
1000010c:	3801      	subs	r0, #1
1000010e:	4770      	bx	lr

10000110 <__aeabi_drsub>:
10000110:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
10000114:	e002      	b.n	1000011c <__adddf3>
10000116:	bf00      	nop

10000118 <__aeabi_dsub>:
10000118:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1000011c <__adddf3>:
1000011c:	b530      	push	{r4, r5, lr}
1000011e:	ea4f 0441 	mov.w	r4, r1, lsl #1
10000122:	ea4f 0543 	mov.w	r5, r3, lsl #1
10000126:	ea94 0f05 	teq	r4, r5
1000012a:	bf08      	it	eq
1000012c:	ea90 0f02 	teqeq	r0, r2
10000130:	bf1f      	itttt	ne
10000132:	ea54 0c00 	orrsne.w	ip, r4, r0
10000136:	ea55 0c02 	orrsne.w	ip, r5, r2
1000013a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1000013e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
10000142:	f000 80e2 	beq.w	1000030a <__adddf3+0x1ee>
10000146:	ea4f 5454 	mov.w	r4, r4, lsr #21
1000014a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1000014e:	bfb8      	it	lt
10000150:	426d      	neglt	r5, r5
10000152:	dd0c      	ble.n	1000016e <__adddf3+0x52>
10000154:	442c      	add	r4, r5
10000156:	ea80 0202 	eor.w	r2, r0, r2
1000015a:	ea81 0303 	eor.w	r3, r1, r3
1000015e:	ea82 0000 	eor.w	r0, r2, r0
10000162:	ea83 0101 	eor.w	r1, r3, r1
10000166:	ea80 0202 	eor.w	r2, r0, r2
1000016a:	ea81 0303 	eor.w	r3, r1, r3
1000016e:	2d36      	cmp	r5, #54	; 0x36
10000170:	bf88      	it	hi
10000172:	bd30      	pophi	{r4, r5, pc}
10000174:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
10000178:	ea4f 3101 	mov.w	r1, r1, lsl #12
1000017c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
10000180:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
10000184:	d002      	beq.n	1000018c <__adddf3+0x70>
10000186:	4240      	negs	r0, r0
10000188:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1000018c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
10000190:	ea4f 3303 	mov.w	r3, r3, lsl #12
10000194:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
10000198:	d002      	beq.n	100001a0 <__adddf3+0x84>
1000019a:	4252      	negs	r2, r2
1000019c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
100001a0:	ea94 0f05 	teq	r4, r5
100001a4:	f000 80a7 	beq.w	100002f6 <__adddf3+0x1da>
100001a8:	f1a4 0401 	sub.w	r4, r4, #1
100001ac:	f1d5 0e20 	rsbs	lr, r5, #32
100001b0:	db0d      	blt.n	100001ce <__adddf3+0xb2>
100001b2:	fa02 fc0e 	lsl.w	ip, r2, lr
100001b6:	fa22 f205 	lsr.w	r2, r2, r5
100001ba:	1880      	adds	r0, r0, r2
100001bc:	f141 0100 	adc.w	r1, r1, #0
100001c0:	fa03 f20e 	lsl.w	r2, r3, lr
100001c4:	1880      	adds	r0, r0, r2
100001c6:	fa43 f305 	asr.w	r3, r3, r5
100001ca:	4159      	adcs	r1, r3
100001cc:	e00e      	b.n	100001ec <__adddf3+0xd0>
100001ce:	f1a5 0520 	sub.w	r5, r5, #32
100001d2:	f10e 0e20 	add.w	lr, lr, #32
100001d6:	2a01      	cmp	r2, #1
100001d8:	fa03 fc0e 	lsl.w	ip, r3, lr
100001dc:	bf28      	it	cs
100001de:	f04c 0c02 	orrcs.w	ip, ip, #2
100001e2:	fa43 f305 	asr.w	r3, r3, r5
100001e6:	18c0      	adds	r0, r0, r3
100001e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
100001ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
100001f0:	d507      	bpl.n	10000202 <__adddf3+0xe6>
100001f2:	f04f 0e00 	mov.w	lr, #0
100001f6:	f1dc 0c00 	rsbs	ip, ip, #0
100001fa:	eb7e 0000 	sbcs.w	r0, lr, r0
100001fe:	eb6e 0101 	sbc.w	r1, lr, r1
10000202:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
10000206:	d31b      	bcc.n	10000240 <__adddf3+0x124>
10000208:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1000020c:	d30c      	bcc.n	10000228 <__adddf3+0x10c>
1000020e:	0849      	lsrs	r1, r1, #1
10000210:	ea5f 0030 	movs.w	r0, r0, rrx
10000214:	ea4f 0c3c 	mov.w	ip, ip, rrx
10000218:	f104 0401 	add.w	r4, r4, #1
1000021c:	ea4f 5244 	mov.w	r2, r4, lsl #21
10000220:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
10000224:	f080 809a 	bcs.w	1000035c <__adddf3+0x240>
10000228:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1000022c:	bf08      	it	eq
1000022e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
10000232:	f150 0000 	adcs.w	r0, r0, #0
10000236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1000023a:	ea41 0105 	orr.w	r1, r1, r5
1000023e:	bd30      	pop	{r4, r5, pc}
10000240:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
10000244:	4140      	adcs	r0, r0
10000246:	eb41 0101 	adc.w	r1, r1, r1
1000024a:	3c01      	subs	r4, #1
1000024c:	bf28      	it	cs
1000024e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
10000252:	d2e9      	bcs.n	10000228 <__adddf3+0x10c>
10000254:	f091 0f00 	teq	r1, #0
10000258:	bf04      	itt	eq
1000025a:	4601      	moveq	r1, r0
1000025c:	2000      	moveq	r0, #0
1000025e:	fab1 f381 	clz	r3, r1
10000262:	bf08      	it	eq
10000264:	3320      	addeq	r3, #32
10000266:	f1a3 030b 	sub.w	r3, r3, #11
1000026a:	f1b3 0220 	subs.w	r2, r3, #32
1000026e:	da0c      	bge.n	1000028a <__adddf3+0x16e>
10000270:	320c      	adds	r2, #12
10000272:	dd08      	ble.n	10000286 <__adddf3+0x16a>
10000274:	f102 0c14 	add.w	ip, r2, #20
10000278:	f1c2 020c 	rsb	r2, r2, #12
1000027c:	fa01 f00c 	lsl.w	r0, r1, ip
10000280:	fa21 f102 	lsr.w	r1, r1, r2
10000284:	e00c      	b.n	100002a0 <__adddf3+0x184>
10000286:	f102 0214 	add.w	r2, r2, #20
1000028a:	bfd8      	it	le
1000028c:	f1c2 0c20 	rsble	ip, r2, #32
10000290:	fa01 f102 	lsl.w	r1, r1, r2
10000294:	fa20 fc0c 	lsr.w	ip, r0, ip
10000298:	bfdc      	itt	le
1000029a:	ea41 010c 	orrle.w	r1, r1, ip
1000029e:	4090      	lslle	r0, r2
100002a0:	1ae4      	subs	r4, r4, r3
100002a2:	bfa2      	ittt	ge
100002a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
100002a8:	4329      	orrge	r1, r5
100002aa:	bd30      	popge	{r4, r5, pc}
100002ac:	ea6f 0404 	mvn.w	r4, r4
100002b0:	3c1f      	subs	r4, #31
100002b2:	da1c      	bge.n	100002ee <__adddf3+0x1d2>
100002b4:	340c      	adds	r4, #12
100002b6:	dc0e      	bgt.n	100002d6 <__adddf3+0x1ba>
100002b8:	f104 0414 	add.w	r4, r4, #20
100002bc:	f1c4 0220 	rsb	r2, r4, #32
100002c0:	fa20 f004 	lsr.w	r0, r0, r4
100002c4:	fa01 f302 	lsl.w	r3, r1, r2
100002c8:	ea40 0003 	orr.w	r0, r0, r3
100002cc:	fa21 f304 	lsr.w	r3, r1, r4
100002d0:	ea45 0103 	orr.w	r1, r5, r3
100002d4:	bd30      	pop	{r4, r5, pc}
100002d6:	f1c4 040c 	rsb	r4, r4, #12
100002da:	f1c4 0220 	rsb	r2, r4, #32
100002de:	fa20 f002 	lsr.w	r0, r0, r2
100002e2:	fa01 f304 	lsl.w	r3, r1, r4
100002e6:	ea40 0003 	orr.w	r0, r0, r3
100002ea:	4629      	mov	r1, r5
100002ec:	bd30      	pop	{r4, r5, pc}
100002ee:	fa21 f004 	lsr.w	r0, r1, r4
100002f2:	4629      	mov	r1, r5
100002f4:	bd30      	pop	{r4, r5, pc}
100002f6:	f094 0f00 	teq	r4, #0
100002fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
100002fe:	bf06      	itte	eq
10000300:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
10000304:	3401      	addeq	r4, #1
10000306:	3d01      	subne	r5, #1
10000308:	e74e      	b.n	100001a8 <__adddf3+0x8c>
1000030a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1000030e:	bf18      	it	ne
10000310:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
10000314:	d029      	beq.n	1000036a <__adddf3+0x24e>
10000316:	ea94 0f05 	teq	r4, r5
1000031a:	bf08      	it	eq
1000031c:	ea90 0f02 	teqeq	r0, r2
10000320:	d005      	beq.n	1000032e <__adddf3+0x212>
10000322:	ea54 0c00 	orrs.w	ip, r4, r0
10000326:	bf04      	itt	eq
10000328:	4619      	moveq	r1, r3
1000032a:	4610      	moveq	r0, r2
1000032c:	bd30      	pop	{r4, r5, pc}
1000032e:	ea91 0f03 	teq	r1, r3
10000332:	bf1e      	ittt	ne
10000334:	2100      	movne	r1, #0
10000336:	2000      	movne	r0, #0
10000338:	bd30      	popne	{r4, r5, pc}
1000033a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1000033e:	d105      	bne.n	1000034c <__adddf3+0x230>
10000340:	0040      	lsls	r0, r0, #1
10000342:	4149      	adcs	r1, r1
10000344:	bf28      	it	cs
10000346:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1000034a:	bd30      	pop	{r4, r5, pc}
1000034c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
10000350:	bf3c      	itt	cc
10000352:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
10000356:	bd30      	popcc	{r4, r5, pc}
10000358:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1000035c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
10000360:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
10000364:	f04f 0000 	mov.w	r0, #0
10000368:	bd30      	pop	{r4, r5, pc}
1000036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1000036e:	bf1a      	itte	ne
10000370:	4619      	movne	r1, r3
10000372:	4610      	movne	r0, r2
10000374:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
10000378:	bf1c      	itt	ne
1000037a:	460b      	movne	r3, r1
1000037c:	4602      	movne	r2, r0
1000037e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
10000382:	bf06      	itte	eq
10000384:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
10000388:	ea91 0f03 	teqeq	r1, r3
1000038c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
10000390:	bd30      	pop	{r4, r5, pc}
10000392:	bf00      	nop

10000394 <__aeabi_ui2d>:
10000394:	f090 0f00 	teq	r0, #0
10000398:	bf04      	itt	eq
1000039a:	2100      	moveq	r1, #0
1000039c:	4770      	bxeq	lr
1000039e:	b530      	push	{r4, r5, lr}
100003a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
100003a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
100003a8:	f04f 0500 	mov.w	r5, #0
100003ac:	f04f 0100 	mov.w	r1, #0
100003b0:	e750      	b.n	10000254 <__adddf3+0x138>
100003b2:	bf00      	nop

100003b4 <__aeabi_i2d>:
100003b4:	f090 0f00 	teq	r0, #0
100003b8:	bf04      	itt	eq
100003ba:	2100      	moveq	r1, #0
100003bc:	4770      	bxeq	lr
100003be:	b530      	push	{r4, r5, lr}
100003c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
100003c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
100003c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
100003cc:	bf48      	it	mi
100003ce:	4240      	negmi	r0, r0
100003d0:	f04f 0100 	mov.w	r1, #0
100003d4:	e73e      	b.n	10000254 <__adddf3+0x138>
100003d6:	bf00      	nop

100003d8 <__aeabi_f2d>:
100003d8:	0042      	lsls	r2, r0, #1
100003da:	ea4f 01e2 	mov.w	r1, r2, asr #3
100003de:	ea4f 0131 	mov.w	r1, r1, rrx
100003e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
100003e6:	bf1f      	itttt	ne
100003e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
100003ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
100003f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
100003f4:	4770      	bxne	lr
100003f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
100003fa:	bf08      	it	eq
100003fc:	4770      	bxeq	lr
100003fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
10000402:	bf04      	itt	eq
10000404:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
10000408:	4770      	bxeq	lr
1000040a:	b530      	push	{r4, r5, lr}
1000040c:	f44f 7460 	mov.w	r4, #896	; 0x380
10000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
10000414:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
10000418:	e71c      	b.n	10000254 <__adddf3+0x138>
1000041a:	bf00      	nop

1000041c <__aeabi_ul2d>:
1000041c:	ea50 0201 	orrs.w	r2, r0, r1
10000420:	bf08      	it	eq
10000422:	4770      	bxeq	lr
10000424:	b530      	push	{r4, r5, lr}
10000426:	f04f 0500 	mov.w	r5, #0
1000042a:	e00a      	b.n	10000442 <__aeabi_l2d+0x16>

1000042c <__aeabi_l2d>:
1000042c:	ea50 0201 	orrs.w	r2, r0, r1
10000430:	bf08      	it	eq
10000432:	4770      	bxeq	lr
10000434:	b530      	push	{r4, r5, lr}
10000436:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1000043a:	d502      	bpl.n	10000442 <__aeabi_l2d+0x16>
1000043c:	4240      	negs	r0, r0
1000043e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10000442:	f44f 6480 	mov.w	r4, #1024	; 0x400
10000446:	f104 0432 	add.w	r4, r4, #50	; 0x32
1000044a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1000044e:	f43f aed8 	beq.w	10000202 <__adddf3+0xe6>
10000452:	f04f 0203 	mov.w	r2, #3
10000456:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1000045a:	bf18      	it	ne
1000045c:	3203      	addne	r2, #3
1000045e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
10000462:	bf18      	it	ne
10000464:	3203      	addne	r2, #3
10000466:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1000046a:	f1c2 0320 	rsb	r3, r2, #32
1000046e:	fa00 fc03 	lsl.w	ip, r0, r3
10000472:	fa20 f002 	lsr.w	r0, r0, r2
10000476:	fa01 fe03 	lsl.w	lr, r1, r3
1000047a:	ea40 000e 	orr.w	r0, r0, lr
1000047e:	fa21 f102 	lsr.w	r1, r1, r2
10000482:	4414      	add	r4, r2
10000484:	e6bd      	b.n	10000202 <__adddf3+0xe6>
10000486:	bf00      	nop

10000488 <__aeabi_dmul>:
10000488:	b570      	push	{r4, r5, r6, lr}
1000048a:	f04f 0cff 	mov.w	ip, #255	; 0xff
1000048e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
10000492:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
10000496:	bf1d      	ittte	ne
10000498:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1000049c:	ea94 0f0c 	teqne	r4, ip
100004a0:	ea95 0f0c 	teqne	r5, ip
100004a4:	f000 f8de 	bleq	10000664 <__aeabi_dmul+0x1dc>
100004a8:	442c      	add	r4, r5
100004aa:	ea81 0603 	eor.w	r6, r1, r3
100004ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
100004b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
100004b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
100004ba:	bf18      	it	ne
100004bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
100004c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
100004c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
100004c8:	d038      	beq.n	1000053c <__aeabi_dmul+0xb4>
100004ca:	fba0 ce02 	umull	ip, lr, r0, r2
100004ce:	f04f 0500 	mov.w	r5, #0
100004d2:	fbe1 e502 	umlal	lr, r5, r1, r2
100004d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
100004da:	fbe0 e503 	umlal	lr, r5, r0, r3
100004de:	f04f 0600 	mov.w	r6, #0
100004e2:	fbe1 5603 	umlal	r5, r6, r1, r3
100004e6:	f09c 0f00 	teq	ip, #0
100004ea:	bf18      	it	ne
100004ec:	f04e 0e01 	orrne.w	lr, lr, #1
100004f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
100004f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
100004f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
100004fc:	d204      	bcs.n	10000508 <__aeabi_dmul+0x80>
100004fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
10000502:	416d      	adcs	r5, r5
10000504:	eb46 0606 	adc.w	r6, r6, r6
10000508:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1000050c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
10000510:	ea4f 20c5 	mov.w	r0, r5, lsl #11
10000514:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
10000518:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1000051c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
10000520:	bf88      	it	hi
10000522:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
10000526:	d81e      	bhi.n	10000566 <__aeabi_dmul+0xde>
10000528:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1000052c:	bf08      	it	eq
1000052e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
10000532:	f150 0000 	adcs.w	r0, r0, #0
10000536:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1000053a:	bd70      	pop	{r4, r5, r6, pc}
1000053c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
10000540:	ea46 0101 	orr.w	r1, r6, r1
10000544:	ea40 0002 	orr.w	r0, r0, r2
10000548:	ea81 0103 	eor.w	r1, r1, r3
1000054c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
10000550:	bfc2      	ittt	gt
10000552:	ebd4 050c 	rsbsgt	r5, r4, ip
10000556:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1000055a:	bd70      	popgt	{r4, r5, r6, pc}
1000055c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
10000560:	f04f 0e00 	mov.w	lr, #0
10000564:	3c01      	subs	r4, #1
10000566:	f300 80ab 	bgt.w	100006c0 <__aeabi_dmul+0x238>
1000056a:	f114 0f36 	cmn.w	r4, #54	; 0x36
1000056e:	bfde      	ittt	le
10000570:	2000      	movle	r0, #0
10000572:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
10000576:	bd70      	pople	{r4, r5, r6, pc}
10000578:	f1c4 0400 	rsb	r4, r4, #0
1000057c:	3c20      	subs	r4, #32
1000057e:	da35      	bge.n	100005ec <__aeabi_dmul+0x164>
10000580:	340c      	adds	r4, #12
10000582:	dc1b      	bgt.n	100005bc <__aeabi_dmul+0x134>
10000584:	f104 0414 	add.w	r4, r4, #20
10000588:	f1c4 0520 	rsb	r5, r4, #32
1000058c:	fa00 f305 	lsl.w	r3, r0, r5
10000590:	fa20 f004 	lsr.w	r0, r0, r4
10000594:	fa01 f205 	lsl.w	r2, r1, r5
10000598:	ea40 0002 	orr.w	r0, r0, r2
1000059c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
100005a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
100005a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
100005a8:	fa21 f604 	lsr.w	r6, r1, r4
100005ac:	eb42 0106 	adc.w	r1, r2, r6
100005b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
100005b4:	bf08      	it	eq
100005b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
100005ba:	bd70      	pop	{r4, r5, r6, pc}
100005bc:	f1c4 040c 	rsb	r4, r4, #12
100005c0:	f1c4 0520 	rsb	r5, r4, #32
100005c4:	fa00 f304 	lsl.w	r3, r0, r4
100005c8:	fa20 f005 	lsr.w	r0, r0, r5
100005cc:	fa01 f204 	lsl.w	r2, r1, r4
100005d0:	ea40 0002 	orr.w	r0, r0, r2
100005d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
100005d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
100005dc:	f141 0100 	adc.w	r1, r1, #0
100005e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
100005e4:	bf08      	it	eq
100005e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
100005ea:	bd70      	pop	{r4, r5, r6, pc}
100005ec:	f1c4 0520 	rsb	r5, r4, #32
100005f0:	fa00 f205 	lsl.w	r2, r0, r5
100005f4:	ea4e 0e02 	orr.w	lr, lr, r2
100005f8:	fa20 f304 	lsr.w	r3, r0, r4
100005fc:	fa01 f205 	lsl.w	r2, r1, r5
10000600:	ea43 0302 	orr.w	r3, r3, r2
10000604:	fa21 f004 	lsr.w	r0, r1, r4
10000608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1000060c:	fa21 f204 	lsr.w	r2, r1, r4
10000610:	ea20 0002 	bic.w	r0, r0, r2
10000614:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
10000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1000061c:	bf08      	it	eq
1000061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
10000622:	bd70      	pop	{r4, r5, r6, pc}
10000624:	f094 0f00 	teq	r4, #0
10000628:	d10f      	bne.n	1000064a <__aeabi_dmul+0x1c2>
1000062a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1000062e:	0040      	lsls	r0, r0, #1
10000630:	eb41 0101 	adc.w	r1, r1, r1
10000634:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
10000638:	bf08      	it	eq
1000063a:	3c01      	subeq	r4, #1
1000063c:	d0f7      	beq.n	1000062e <__aeabi_dmul+0x1a6>
1000063e:	ea41 0106 	orr.w	r1, r1, r6
10000642:	f095 0f00 	teq	r5, #0
10000646:	bf18      	it	ne
10000648:	4770      	bxne	lr
1000064a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1000064e:	0052      	lsls	r2, r2, #1
10000650:	eb43 0303 	adc.w	r3, r3, r3
10000654:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
10000658:	bf08      	it	eq
1000065a:	3d01      	subeq	r5, #1
1000065c:	d0f7      	beq.n	1000064e <__aeabi_dmul+0x1c6>
1000065e:	ea43 0306 	orr.w	r3, r3, r6
10000662:	4770      	bx	lr
10000664:	ea94 0f0c 	teq	r4, ip
10000668:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1000066c:	bf18      	it	ne
1000066e:	ea95 0f0c 	teqne	r5, ip
10000672:	d00c      	beq.n	1000068e <__aeabi_dmul+0x206>
10000674:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
10000678:	bf18      	it	ne
1000067a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1000067e:	d1d1      	bne.n	10000624 <__aeabi_dmul+0x19c>
10000680:	ea81 0103 	eor.w	r1, r1, r3
10000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
10000688:	f04f 0000 	mov.w	r0, #0
1000068c:	bd70      	pop	{r4, r5, r6, pc}
1000068e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
10000692:	bf06      	itte	eq
10000694:	4610      	moveq	r0, r2
10000696:	4619      	moveq	r1, r3
10000698:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1000069c:	d019      	beq.n	100006d2 <__aeabi_dmul+0x24a>
1000069e:	ea94 0f0c 	teq	r4, ip
100006a2:	d102      	bne.n	100006aa <__aeabi_dmul+0x222>
100006a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
100006a8:	d113      	bne.n	100006d2 <__aeabi_dmul+0x24a>
100006aa:	ea95 0f0c 	teq	r5, ip
100006ae:	d105      	bne.n	100006bc <__aeabi_dmul+0x234>
100006b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
100006b4:	bf1c      	itt	ne
100006b6:	4610      	movne	r0, r2
100006b8:	4619      	movne	r1, r3
100006ba:	d10a      	bne.n	100006d2 <__aeabi_dmul+0x24a>
100006bc:	ea81 0103 	eor.w	r1, r1, r3
100006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
100006c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
100006c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
100006cc:	f04f 0000 	mov.w	r0, #0
100006d0:	bd70      	pop	{r4, r5, r6, pc}
100006d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
100006d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
100006da:	bd70      	pop	{r4, r5, r6, pc}

100006dc <__aeabi_ddiv>:
100006dc:	b570      	push	{r4, r5, r6, lr}
100006de:	f04f 0cff 	mov.w	ip, #255	; 0xff
100006e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
100006e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
100006ea:	bf1d      	ittte	ne
100006ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
100006f0:	ea94 0f0c 	teqne	r4, ip
100006f4:	ea95 0f0c 	teqne	r5, ip
100006f8:	f000 f8a7 	bleq	1000084a <__aeabi_ddiv+0x16e>
100006fc:	eba4 0405 	sub.w	r4, r4, r5
10000700:	ea81 0e03 	eor.w	lr, r1, r3
10000704:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
10000708:	ea4f 3101 	mov.w	r1, r1, lsl #12
1000070c:	f000 8088 	beq.w	10000820 <__aeabi_ddiv+0x144>
10000710:	ea4f 3303 	mov.w	r3, r3, lsl #12
10000714:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
10000718:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1000071c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
10000720:	ea4f 2202 	mov.w	r2, r2, lsl #8
10000724:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
10000728:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1000072c:	ea4f 2600 	mov.w	r6, r0, lsl #8
10000730:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
10000734:	429d      	cmp	r5, r3
10000736:	bf08      	it	eq
10000738:	4296      	cmpeq	r6, r2
1000073a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1000073e:	f504 7440 	add.w	r4, r4, #768	; 0x300
10000742:	d202      	bcs.n	1000074a <__aeabi_ddiv+0x6e>
10000744:	085b      	lsrs	r3, r3, #1
10000746:	ea4f 0232 	mov.w	r2, r2, rrx
1000074a:	1ab6      	subs	r6, r6, r2
1000074c:	eb65 0503 	sbc.w	r5, r5, r3
10000750:	085b      	lsrs	r3, r3, #1
10000752:	ea4f 0232 	mov.w	r2, r2, rrx
10000756:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1000075a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1000075e:	ebb6 0e02 	subs.w	lr, r6, r2
10000762:	eb75 0e03 	sbcs.w	lr, r5, r3
10000766:	bf22      	ittt	cs
10000768:	1ab6      	subcs	r6, r6, r2
1000076a:	4675      	movcs	r5, lr
1000076c:	ea40 000c 	orrcs.w	r0, r0, ip
10000770:	085b      	lsrs	r3, r3, #1
10000772:	ea4f 0232 	mov.w	r2, r2, rrx
10000776:	ebb6 0e02 	subs.w	lr, r6, r2
1000077a:	eb75 0e03 	sbcs.w	lr, r5, r3
1000077e:	bf22      	ittt	cs
10000780:	1ab6      	subcs	r6, r6, r2
10000782:	4675      	movcs	r5, lr
10000784:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
10000788:	085b      	lsrs	r3, r3, #1
1000078a:	ea4f 0232 	mov.w	r2, r2, rrx
1000078e:	ebb6 0e02 	subs.w	lr, r6, r2
10000792:	eb75 0e03 	sbcs.w	lr, r5, r3
10000796:	bf22      	ittt	cs
10000798:	1ab6      	subcs	r6, r6, r2
1000079a:	4675      	movcs	r5, lr
1000079c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
100007a0:	085b      	lsrs	r3, r3, #1
100007a2:	ea4f 0232 	mov.w	r2, r2, rrx
100007a6:	ebb6 0e02 	subs.w	lr, r6, r2
100007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
100007ae:	bf22      	ittt	cs
100007b0:	1ab6      	subcs	r6, r6, r2
100007b2:	4675      	movcs	r5, lr
100007b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
100007b8:	ea55 0e06 	orrs.w	lr, r5, r6
100007bc:	d018      	beq.n	100007f0 <__aeabi_ddiv+0x114>
100007be:	ea4f 1505 	mov.w	r5, r5, lsl #4
100007c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
100007c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
100007ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
100007ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
100007d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
100007d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
100007da:	d1c0      	bne.n	1000075e <__aeabi_ddiv+0x82>
100007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
100007e0:	d10b      	bne.n	100007fa <__aeabi_ddiv+0x11e>
100007e2:	ea41 0100 	orr.w	r1, r1, r0
100007e6:	f04f 0000 	mov.w	r0, #0
100007ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
100007ee:	e7b6      	b.n	1000075e <__aeabi_ddiv+0x82>
100007f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
100007f4:	bf04      	itt	eq
100007f6:	4301      	orreq	r1, r0
100007f8:	2000      	moveq	r0, #0
100007fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
100007fe:	bf88      	it	hi
10000800:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
10000804:	f63f aeaf 	bhi.w	10000566 <__aeabi_dmul+0xde>
10000808:	ebb5 0c03 	subs.w	ip, r5, r3
1000080c:	bf04      	itt	eq
1000080e:	ebb6 0c02 	subseq.w	ip, r6, r2
10000812:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
10000816:	f150 0000 	adcs.w	r0, r0, #0
1000081a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1000081e:	bd70      	pop	{r4, r5, r6, pc}
10000820:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
10000824:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
10000828:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1000082c:	bfc2      	ittt	gt
1000082e:	ebd4 050c 	rsbsgt	r5, r4, ip
10000832:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
10000836:	bd70      	popgt	{r4, r5, r6, pc}
10000838:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1000083c:	f04f 0e00 	mov.w	lr, #0
10000840:	3c01      	subs	r4, #1
10000842:	e690      	b.n	10000566 <__aeabi_dmul+0xde>
10000844:	ea45 0e06 	orr.w	lr, r5, r6
10000848:	e68d      	b.n	10000566 <__aeabi_dmul+0xde>
1000084a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1000084e:	ea94 0f0c 	teq	r4, ip
10000852:	bf08      	it	eq
10000854:	ea95 0f0c 	teqeq	r5, ip
10000858:	f43f af3b 	beq.w	100006d2 <__aeabi_dmul+0x24a>
1000085c:	ea94 0f0c 	teq	r4, ip
10000860:	d10a      	bne.n	10000878 <__aeabi_ddiv+0x19c>
10000862:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
10000866:	f47f af34 	bne.w	100006d2 <__aeabi_dmul+0x24a>
1000086a:	ea95 0f0c 	teq	r5, ip
1000086e:	f47f af25 	bne.w	100006bc <__aeabi_dmul+0x234>
10000872:	4610      	mov	r0, r2
10000874:	4619      	mov	r1, r3
10000876:	e72c      	b.n	100006d2 <__aeabi_dmul+0x24a>
10000878:	ea95 0f0c 	teq	r5, ip
1000087c:	d106      	bne.n	1000088c <__aeabi_ddiv+0x1b0>
1000087e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
10000882:	f43f aefd 	beq.w	10000680 <__aeabi_dmul+0x1f8>
10000886:	4610      	mov	r0, r2
10000888:	4619      	mov	r1, r3
1000088a:	e722      	b.n	100006d2 <__aeabi_dmul+0x24a>
1000088c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
10000890:	bf18      	it	ne
10000892:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
10000896:	f47f aec5 	bne.w	10000624 <__aeabi_dmul+0x19c>
1000089a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1000089e:	f47f af0d 	bne.w	100006bc <__aeabi_dmul+0x234>
100008a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
100008a6:	f47f aeeb 	bne.w	10000680 <__aeabi_dmul+0x1f8>
100008aa:	e712      	b.n	100006d2 <__aeabi_dmul+0x24a>

100008ac <__gedf2>:
100008ac:	f04f 3cff 	mov.w	ip, #4294967295
100008b0:	e006      	b.n	100008c0 <__cmpdf2+0x4>
100008b2:	bf00      	nop

100008b4 <__ledf2>:
100008b4:	f04f 0c01 	mov.w	ip, #1
100008b8:	e002      	b.n	100008c0 <__cmpdf2+0x4>
100008ba:	bf00      	nop

100008bc <__cmpdf2>:
100008bc:	f04f 0c01 	mov.w	ip, #1
100008c0:	f84d cd04 	str.w	ip, [sp, #-4]!
100008c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
100008c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
100008cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
100008d0:	bf18      	it	ne
100008d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
100008d6:	d01b      	beq.n	10000910 <__cmpdf2+0x54>
100008d8:	b001      	add	sp, #4
100008da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
100008de:	bf0c      	ite	eq
100008e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
100008e4:	ea91 0f03 	teqne	r1, r3
100008e8:	bf02      	ittt	eq
100008ea:	ea90 0f02 	teqeq	r0, r2
100008ee:	2000      	moveq	r0, #0
100008f0:	4770      	bxeq	lr
100008f2:	f110 0f00 	cmn.w	r0, #0
100008f6:	ea91 0f03 	teq	r1, r3
100008fa:	bf58      	it	pl
100008fc:	4299      	cmppl	r1, r3
100008fe:	bf08      	it	eq
10000900:	4290      	cmpeq	r0, r2
10000902:	bf2c      	ite	cs
10000904:	17d8      	asrcs	r0, r3, #31
10000906:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1000090a:	f040 0001 	orr.w	r0, r0, #1
1000090e:	4770      	bx	lr
10000910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
10000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
10000918:	d102      	bne.n	10000920 <__cmpdf2+0x64>
1000091a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1000091e:	d107      	bne.n	10000930 <__cmpdf2+0x74>
10000920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
10000924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
10000928:	d1d6      	bne.n	100008d8 <__cmpdf2+0x1c>
1000092a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1000092e:	d0d3      	beq.n	100008d8 <__cmpdf2+0x1c>
10000930:	f85d 0b04 	ldr.w	r0, [sp], #4
10000934:	4770      	bx	lr
10000936:	bf00      	nop

10000938 <__aeabi_cdrcmple>:
10000938:	4684      	mov	ip, r0
1000093a:	4610      	mov	r0, r2
1000093c:	4662      	mov	r2, ip
1000093e:	468c      	mov	ip, r1
10000940:	4619      	mov	r1, r3
10000942:	4663      	mov	r3, ip
10000944:	e000      	b.n	10000948 <__aeabi_cdcmpeq>
10000946:	bf00      	nop

10000948 <__aeabi_cdcmpeq>:
10000948:	b501      	push	{r0, lr}
1000094a:	f7ff ffb7 	bl	100008bc <__cmpdf2>
1000094e:	2800      	cmp	r0, #0
10000950:	bf48      	it	mi
10000952:	f110 0f00 	cmnmi.w	r0, #0
10000956:	bd01      	pop	{r0, pc}

10000958 <__aeabi_dcmpeq>:
10000958:	f84d ed08 	str.w	lr, [sp, #-8]!
1000095c:	f7ff fff4 	bl	10000948 <__aeabi_cdcmpeq>
10000960:	bf0c      	ite	eq
10000962:	2001      	moveq	r0, #1
10000964:	2000      	movne	r0, #0
10000966:	f85d fb08 	ldr.w	pc, [sp], #8
1000096a:	bf00      	nop

1000096c <__aeabi_dcmplt>:
1000096c:	f84d ed08 	str.w	lr, [sp, #-8]!
10000970:	f7ff ffea 	bl	10000948 <__aeabi_cdcmpeq>
10000974:	bf34      	ite	cc
10000976:	2001      	movcc	r0, #1
10000978:	2000      	movcs	r0, #0
1000097a:	f85d fb08 	ldr.w	pc, [sp], #8
1000097e:	bf00      	nop

10000980 <__aeabi_dcmple>:
10000980:	f84d ed08 	str.w	lr, [sp, #-8]!
10000984:	f7ff ffe0 	bl	10000948 <__aeabi_cdcmpeq>
10000988:	bf94      	ite	ls
1000098a:	2001      	movls	r0, #1
1000098c:	2000      	movhi	r0, #0
1000098e:	f85d fb08 	ldr.w	pc, [sp], #8
10000992:	bf00      	nop

10000994 <__aeabi_dcmpge>:
10000994:	f84d ed08 	str.w	lr, [sp, #-8]!
10000998:	f7ff ffce 	bl	10000938 <__aeabi_cdrcmple>
1000099c:	bf94      	ite	ls
1000099e:	2001      	movls	r0, #1
100009a0:	2000      	movhi	r0, #0
100009a2:	f85d fb08 	ldr.w	pc, [sp], #8
100009a6:	bf00      	nop

100009a8 <__aeabi_dcmpgt>:
100009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
100009ac:	f7ff ffc4 	bl	10000938 <__aeabi_cdrcmple>
100009b0:	bf34      	ite	cc
100009b2:	2001      	movcc	r0, #1
100009b4:	2000      	movcs	r0, #0
100009b6:	f85d fb08 	ldr.w	pc, [sp], #8
100009ba:	bf00      	nop

100009bc <__aeabi_dcmpun>:
100009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
100009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
100009c4:	d102      	bne.n	100009cc <__aeabi_dcmpun+0x10>
100009c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
100009ca:	d10a      	bne.n	100009e2 <__aeabi_dcmpun+0x26>
100009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
100009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
100009d4:	d102      	bne.n	100009dc <__aeabi_dcmpun+0x20>
100009d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
100009da:	d102      	bne.n	100009e2 <__aeabi_dcmpun+0x26>
100009dc:	f04f 0000 	mov.w	r0, #0
100009e0:	4770      	bx	lr
100009e2:	f04f 0001 	mov.w	r0, #1
100009e6:	4770      	bx	lr

100009e8 <__aeabi_d2iz>:
100009e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
100009ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
100009f0:	d215      	bcs.n	10000a1e <__aeabi_d2iz+0x36>
100009f2:	d511      	bpl.n	10000a18 <__aeabi_d2iz+0x30>
100009f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
100009f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
100009fc:	d912      	bls.n	10000a24 <__aeabi_d2iz+0x3c>
100009fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
10000a02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
10000a06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
10000a0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
10000a0e:	fa23 f002 	lsr.w	r0, r3, r2
10000a12:	bf18      	it	ne
10000a14:	4240      	negne	r0, r0
10000a16:	4770      	bx	lr
10000a18:	f04f 0000 	mov.w	r0, #0
10000a1c:	4770      	bx	lr
10000a1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
10000a22:	d105      	bne.n	10000a30 <__aeabi_d2iz+0x48>
10000a24:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
10000a28:	bf08      	it	eq
10000a2a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
10000a2e:	4770      	bx	lr
10000a30:	f04f 0000 	mov.w	r0, #0
10000a34:	4770      	bx	lr
10000a36:	bf00      	nop

10000a38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10000a38:	b480      	push	{r7}
10000a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10000a3c:	4b0f      	ldr	r3, [pc, #60]	; (10000a7c <SystemInit+0x44>)
10000a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10000a42:	4a0e      	ldr	r2, [pc, #56]	; (10000a7c <SystemInit+0x44>)
10000a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
10000a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10000a4c:	4b0c      	ldr	r3, [pc, #48]	; (10000a80 <SystemInit+0x48>)
10000a4e:	2200      	movs	r2, #0
10000a50:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
10000a52:	4b0b      	ldr	r3, [pc, #44]	; (10000a80 <SystemInit+0x48>)
10000a54:	2200      	movs	r2, #0
10000a56:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10000a58:	4b09      	ldr	r3, [pc, #36]	; (10000a80 <SystemInit+0x48>)
10000a5a:	2200      	movs	r2, #0
10000a5c:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10000a5e:	4b08      	ldr	r3, [pc, #32]	; (10000a80 <SystemInit+0x48>)
10000a60:	2200      	movs	r2, #0
10000a62:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
10000a64:	4b06      	ldr	r3, [pc, #24]	; (10000a80 <SystemInit+0x48>)
10000a66:	2200      	movs	r2, #0
10000a68:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
10000a6a:	4b05      	ldr	r3, [pc, #20]	; (10000a80 <SystemInit+0x48>)
10000a6c:	2200      	movs	r2, #0
10000a6e:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10000a70:	bf00      	nop
10000a72:	46bd      	mov	sp, r7
10000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
10000a78:	4770      	bx	lr
10000a7a:	bf00      	nop
10000a7c:	e000ed00 	.word	0xe000ed00
10000a80:	5000d0c0 	.word	0x5000d0c0

10000a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
10000a84:	b580      	push	{r7, lr}
10000a86:	b090      	sub	sp, #64	; 0x40
10000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char buf[50]; // buffer for serial output string
	int buf_len = 0;
10000a8a:	2300      	movs	r3, #0
10000a8c:	637b      	str	r3, [r7, #52]	; 0x34
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
10000a8e:	f000 fdfd 	bl	1000168c <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  if(IS_ENGINEERING_BOOT_MODE())
10000a92:	4b44      	ldr	r3, [pc, #272]	; (10000ba4 <main+0x120>)
10000a94:	681b      	ldr	r3, [r3, #0]
10000a96:	f003 0307 	and.w	r3, r3, #7
10000a9a:	2b04      	cmp	r3, #4
10000a9c:	d101      	bne.n	10000aa2 <main+0x1e>
  {
    /* Configure the system clock */
    SystemClock_Config();
10000a9e:	f000 f891 	bl	10000bc4 <SystemClock_Config>
  }

  if(IS_ENGINEERING_BOOT_MODE())
10000aa2:	4b40      	ldr	r3, [pc, #256]	; (10000ba4 <main+0x120>)
10000aa4:	681b      	ldr	r3, [r3, #0]
10000aa6:	f003 0307 	and.w	r3, r3, #7
10000aaa:	2b04      	cmp	r3, #4
10000aac:	d102      	bne.n	10000ab4 <main+0x30>
  {
    /* Configure the peripherals common clocks */
    PeriphCommonClock_Config();
10000aae:	f000 f9ff 	bl	10000eb0 <PeriphCommonClock_Config>
10000ab2:	e005      	b.n	10000ac0 <main+0x3c>
  }
  else
  {
    /* IPCC initialisation */
    MX_IPCC_Init();
10000ab4:	f000 faca 	bl	1000104c <MX_IPCC_Init>
    /* OpenAmp initialisation ---------------------------------*/
    MX_OPENAMP_Init(RPMSG_REMOTE, NULL);
10000ab8:	2100      	movs	r1, #0
10000aba:	2001      	movs	r0, #1
10000abc:	f00b fdfe 	bl	1000c6bc <MX_OPENAMP_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
10000ac0:	f000 fb24 	bl	1000110c <MX_GPIO_Init>
  MX_CRC2_Init();
10000ac4:	f000 faa0 	bl	10001008 <MX_CRC2_Init>
  MX_UART4_Init();
10000ac8:	f000 fad4 	bl	10001074 <MX_UART4_Init>
  MX_ADC2_Init();
10000acc:	f000 fa1e 	bl	10000f0c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

   AI_Init();
10000ad0:	f000 fb54 	bl	1000117c <AI_Init>

  // start timer/counter
  // HAL_TIM_Base_Start(&htim16);

  // test print output
  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
10000ad4:	463b      	mov	r3, r7
10000ad6:	4934      	ldr	r1, [pc, #208]	; (10000ba8 <main+0x124>)
10000ad8:	4618      	mov	r0, r3
10000ada:	f00e fd2d 	bl	1000f538 <siprintf>
10000ade:	6378      	str	r0, [r7, #52]	; 0x34
  HAL_UART_Transmit(&huart4, (uint8_t *)buf, buf_len, 100);
10000ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10000ae2:	b29a      	uxth	r2, r3
10000ae4:	4639      	mov	r1, r7
10000ae6:	2364      	movs	r3, #100	; 0x64
10000ae8:	4830      	ldr	r0, [pc, #192]	; (10000bac <main+0x128>)
10000aea:	f008 f987 	bl	10008dfc <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // uint32_t write_index = 0;
  while (1)
  {
	  for (int i = 0; i < AI_EMOTION_MODEL_IN_1_SIZE+1; ++i) {
10000aee:	2300      	movs	r3, #0
10000af0:	63fb      	str	r3, [r7, #60]	; 0x3c
10000af2:	e04e      	b.n	10000b92 <main+0x10e>
	      HAL_ADC_Start(&hadc2);
10000af4:	482e      	ldr	r0, [pc, #184]	; (10000bb0 <main+0x12c>)
10000af6:	f001 fa1d 	bl	10001f34 <HAL_ADC_Start>
	      HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
10000afa:	f04f 31ff 	mov.w	r1, #4294967295
10000afe:	482c      	ldr	r0, [pc, #176]	; (10000bb0 <main+0x12c>)
10000b00:	f001 fad2 	bl	100020a8 <HAL_ADC_PollForConversion>
	      aiInData[i] = HAL_ADC_GetValue(&hadc2);
10000b04:	482a      	ldr	r0, [pc, #168]	; (10000bb0 <main+0x12c>)
10000b06:	f001 fba7 	bl	10002258 <HAL_ADC_GetValue>
10000b0a:	ee07 0a90 	vmov	s15, r0
10000b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
10000b12:	4a28      	ldr	r2, [pc, #160]	; (10000bb4 <main+0x130>)
10000b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10000b16:	009b      	lsls	r3, r3, #2
10000b18:	4413      	add	r3, r2
10000b1a:	edc3 7a00 	vstr	s15, [r3]
	      HAL_Delay(1);
10000b1e:	2001      	movs	r0, #1
10000b20:	f000 fe24 	bl	1000176c <HAL_Delay>

	      if (i == AI_EMOTION_MODEL_IN_1_SIZE) {
10000b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10000b26:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
10000b2a:	d12f      	bne.n	10000b8c <main+0x108>
	      		  buf_len = sprintf(buf, "Running inference\r\n");
10000b2c:	463b      	mov	r3, r7
10000b2e:	4922      	ldr	r1, [pc, #136]	; (10000bb8 <main+0x134>)
10000b30:	4618      	mov	r0, r3
10000b32:	f00e fd01 	bl	1000f538 <siprintf>
10000b36:	6378      	str	r0, [r7, #52]	; 0x34
	      		  HAL_UART_Transmit(&huart4, (uint8_t *)buf, buf_len, 100);
10000b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10000b3a:	b29a      	uxth	r2, r3
10000b3c:	4639      	mov	r1, r7
10000b3e:	2364      	movs	r3, #100	; 0x64
10000b40:	481a      	ldr	r0, [pc, #104]	; (10000bac <main+0x128>)
10000b42:	f008 f95b 	bl	10008dfc <HAL_UART_Transmit>

	      		  AI_Run(aiInData, aiOutData);
10000b46:	491d      	ldr	r1, [pc, #116]	; (10000bbc <main+0x138>)
10000b48:	481a      	ldr	r0, [pc, #104]	; (10000bb4 <main+0x130>)
10000b4a:	f000 fb61 	bl	10001210 <AI_Run>

	      		  /* Output results */
	      		  for (uint32_t i = 0; i < AI_EMOTION_MODEL_OUT_1_SIZE; i++) {
10000b4e:	2300      	movs	r3, #0
10000b50:	63bb      	str	r3, [r7, #56]	; 0x38
10000b52:	e018      	b.n	10000b86 <main+0x102>
	      			  buf_len = sprintf(buf, "%8.6f ", aiOutData[i]);
10000b54:	4a19      	ldr	r2, [pc, #100]	; (10000bbc <main+0x138>)
10000b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10000b58:	009b      	lsls	r3, r3, #2
10000b5a:	4413      	add	r3, r2
10000b5c:	681b      	ldr	r3, [r3, #0]
10000b5e:	4618      	mov	r0, r3
10000b60:	f7ff fc3a 	bl	100003d8 <__aeabi_f2d>
10000b64:	4602      	mov	r2, r0
10000b66:	460b      	mov	r3, r1
10000b68:	4638      	mov	r0, r7
10000b6a:	4915      	ldr	r1, [pc, #84]	; (10000bc0 <main+0x13c>)
10000b6c:	f00e fce4 	bl	1000f538 <siprintf>
10000b70:	6378      	str	r0, [r7, #52]	; 0x34
	      			  HAL_UART_Transmit(&huart4, (uint8_t *)buf, buf_len, 100);
10000b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10000b74:	b29a      	uxth	r2, r3
10000b76:	4639      	mov	r1, r7
10000b78:	2364      	movs	r3, #100	; 0x64
10000b7a:	480c      	ldr	r0, [pc, #48]	; (10000bac <main+0x128>)
10000b7c:	f008 f93e 	bl	10008dfc <HAL_UART_Transmit>
	      		  for (uint32_t i = 0; i < AI_EMOTION_MODEL_OUT_1_SIZE; i++) {
10000b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10000b82:	3301      	adds	r3, #1
10000b84:	63bb      	str	r3, [r7, #56]	; 0x38
10000b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10000b88:	2b01      	cmp	r3, #1
10000b8a:	d9e3      	bls.n	10000b54 <main+0xd0>
	  for (int i = 0; i < AI_EMOTION_MODEL_IN_1_SIZE+1; ++i) {
10000b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10000b8e:	3301      	adds	r3, #1
10000b90:	63fb      	str	r3, [r7, #60]	; 0x3c
10000b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10000b94:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
10000b98:	ddac      	ble.n	10000af4 <main+0x70>
	  }



	  // Wait before doing it again
	  HAL_Delay(500);
10000b9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
10000b9e:	f000 fde5 	bl	1000176c <HAL_Delay>
	  for (int i = 0; i < AI_EMOTION_MODEL_IN_1_SIZE+1; ++i) {
10000ba2:	e7a4      	b.n	10000aee <main+0x6a>
10000ba4:	50020000 	.word	0x50020000
10000ba8:	10011994 	.word	0x10011994
10000bac:	10020df8 	.word	0x10020df8
10000bb0:	10020d34 	.word	0x10020d34
10000bb4:	10020e90 	.word	0x10020e90
10000bb8:	100119b0 	.word	0x100119b0
10000bbc:	10021660 	.word	0x10021660
10000bc0:	100119c4 	.word	0x100119c4

10000bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
10000bc4:	b580      	push	{r7, lr}
10000bc6:	b0d2      	sub	sp, #328	; 0x148
10000bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10000bca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000bce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000bd2:	4618      	mov	r0, r3
10000bd4:	f44f 738a 	mov.w	r3, #276	; 0x114
10000bd8:	461a      	mov	r2, r3
10000bda:	2100      	movs	r1, #0
10000bdc:	f00e fd0f 	bl	1000f5fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10000be0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000be4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000be8:	4618      	mov	r0, r3
10000bea:	2330      	movs	r3, #48	; 0x30
10000bec:	461a      	mov	r2, r3
10000bee:	2100      	movs	r1, #0
10000bf0:	f00e fd05 	bl	1000f5fe <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
10000bf4:	f002 fe22 	bl	1000383c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
10000bf8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000bfc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10000c00:	f023 0330 	bic.w	r3, r3, #48	; 0x30
10000c04:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000c08:	f043 0320 	orr.w	r3, r3, #32
10000c0c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI
10000c10:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000c14:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000c18:	2217      	movs	r2, #23
10000c1a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIG;
10000c1c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000c20:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000c24:	f44f 62b0 	mov.w	r2, #1408	; 0x580
10000c28:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
10000c2a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000c2e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000c32:	2201      	movs	r2, #1
10000c34:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
10000c36:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000c3a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000c3e:	2201      	movs	r2, #1
10000c40:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
10000c42:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000c46:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000c4a:	2200      	movs	r2, #0
10000c4c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
10000c4e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000c52:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000c56:	2210      	movs	r2, #16
10000c58:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
10000c5a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000c5e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000c62:	2200      	movs	r2, #0
10000c64:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
10000c66:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000c6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000c6e:	2202      	movs	r2, #2
10000c70:	661a      	str	r2, [r3, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLL12SOURCE_HSE;
10000c72:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000c76:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000c7a:	2201      	movs	r2, #1
10000c7c:	665a      	str	r2, [r3, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLLM = 3;
10000c7e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000c82:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000c86:	2203      	movs	r2, #3
10000c88:	669a      	str	r2, [r3, #104]	; 0x68
  RCC_OscInitStruct.PLL2.PLLN = 66;
10000c8a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000c8e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000c92:	2242      	movs	r2, #66	; 0x42
10000c94:	66da      	str	r2, [r3, #108]	; 0x6c
  RCC_OscInitStruct.PLL2.PLLP = 2;
10000c96:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000c9a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000c9e:	2202      	movs	r2, #2
10000ca0:	671a      	str	r2, [r3, #112]	; 0x70
  RCC_OscInitStruct.PLL2.PLLQ = 1;
10000ca2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000ca6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000caa:	2201      	movs	r2, #1
10000cac:	675a      	str	r2, [r3, #116]	; 0x74
  RCC_OscInitStruct.PLL2.PLLR = 1;
10000cae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000cb2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000cb6:	2201      	movs	r2, #1
10000cb8:	679a      	str	r2, [r3, #120]	; 0x78
  RCC_OscInitStruct.PLL2.PLLFRACV = 0x1400;
10000cba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000cbe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000cc2:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
10000cc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  RCC_OscInitStruct.PLL2.PLLMODE = RCC_PLL_FRACTIONAL;
10000cca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000cce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000cd2:	2201      	movs	r2, #1
10000cd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
10000cd8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000cdc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000ce0:	2202      	movs	r2, #2
10000ce2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLL3SOURCE_HSE;
10000ce6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000cea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000cee:	2201      	movs	r2, #1
10000cf0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  RCC_OscInitStruct.PLL3.PLLM = 2;
10000cf4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000cf8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000cfc:	2202      	movs	r2, #2
10000cfe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  RCC_OscInitStruct.PLL3.PLLN = 34;
10000d02:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d06:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d0a:	2222      	movs	r2, #34	; 0x22
10000d0c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  RCC_OscInitStruct.PLL3.PLLP = 2;
10000d10:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d14:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d18:	2202      	movs	r2, #2
10000d1a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  RCC_OscInitStruct.PLL3.PLLQ = 17;
10000d1e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d22:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d26:	2211      	movs	r2, #17
10000d28:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  RCC_OscInitStruct.PLL3.PLLR = 37;
10000d2c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d30:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d34:	2225      	movs	r2, #37	; 0x25
10000d36:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  RCC_OscInitStruct.PLL3.PLLRGE = RCC_PLL3IFRANGE_1;
10000d3a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d3e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
10000d46:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  RCC_OscInitStruct.PLL3.PLLFRACV = 6660;
10000d4a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d4e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d52:	f641 2204 	movw	r2, #6660	; 0x1a04
10000d56:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  RCC_OscInitStruct.PLL3.PLLMODE = RCC_PLL_FRACTIONAL;
10000d5a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d5e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d62:	2201      	movs	r2, #1
10000d64:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
10000d68:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d6c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d70:	2202      	movs	r2, #2
10000d72:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLL4SOURCE_HSE;
10000d76:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d7a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d7e:	2201      	movs	r2, #1
10000d80:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  RCC_OscInitStruct.PLL4.PLLM = 4;
10000d84:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d88:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d8c:	2204      	movs	r2, #4
10000d8e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  RCC_OscInitStruct.PLL4.PLLN = 99;
10000d92:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d96:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d9a:	2263      	movs	r2, #99	; 0x63
10000d9c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  RCC_OscInitStruct.PLL4.PLLP = 6;
10000da0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000da4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000da8:	2206      	movs	r2, #6
10000daa:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  RCC_OscInitStruct.PLL4.PLLQ = 8;
10000dae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000db2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000db6:	2208      	movs	r2, #8
10000db8:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  RCC_OscInitStruct.PLL4.PLLR = 8;
10000dbc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000dc0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000dc4:	2208      	movs	r2, #8
10000dc6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  RCC_OscInitStruct.PLL4.PLLRGE = RCC_PLL4IFRANGE_0;
10000dca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000dce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000dd2:	2200      	movs	r2, #0
10000dd4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  RCC_OscInitStruct.PLL4.PLLFRACV = 0;
10000dd8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000ddc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000de0:	2200      	movs	r2, #0
10000de2:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  RCC_OscInitStruct.PLL4.PLLMODE = RCC_PLL_INTEGER;
10000de6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000dea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000dee:	2200      	movs	r2, #0
10000df0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
10000df4:	f107 0334 	add.w	r3, r7, #52	; 0x34
10000df8:	4618      	mov	r0, r3
10000dfa:	f002 fd2f 	bl	1000385c <HAL_RCC_OscConfig>
10000dfe:	4603      	mov	r3, r0
10000e00:	2b00      	cmp	r3, #0
10000e02:	d001      	beq.n	10000e08 <SystemClock_Config+0x244>
  {
    Error_Handler();
10000e04:	f000 fa4c 	bl	100012a0 <Error_Handler>
  }

  /** RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
10000e08:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e0c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000e10:	22fe      	movs	r2, #254	; 0xfe
10000e12:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                              |RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_PLL2;
10000e14:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e18:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000e1c:	2202      	movs	r2, #2
10000e1e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
10000e20:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e24:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000e28:	2200      	movs	r2, #0
10000e2a:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_PLL3;
10000e2c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e30:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000e34:	2203      	movs	r2, #3
10000e36:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
10000e38:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e3c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000e40:	2200      	movs	r2, #0
10000e42:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV2;
10000e44:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e48:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000e4c:	2201      	movs	r2, #1
10000e4e:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV4;
10000e50:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e54:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000e58:	2202      	movs	r2, #2
10000e5a:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV2;
10000e5c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e60:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000e64:	2201      	movs	r2, #1
10000e66:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV2;
10000e68:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e6c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000e70:	2201      	movs	r2, #1
10000e72:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV2;
10000e74:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e78:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000e7c:	2201      	movs	r2, #1
10000e7e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
10000e80:	1d3b      	adds	r3, r7, #4
10000e82:	4618      	mov	r0, r3
10000e84:	f003 fa88 	bl	10004398 <HAL_RCC_ClockConfig>
10000e88:	4603      	mov	r3, r0
10000e8a:	2b00      	cmp	r3, #0
10000e8c:	d001      	beq.n	10000e92 <SystemClock_Config+0x2ce>
  {
    Error_Handler();
10000e8e:	f000 fa07 	bl	100012a0 <Error_Handler>
  }

  /** Set the HSE division factor for RTC clock
  */
  __HAL_RCC_RTC_HSEDIV(24);
10000e92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10000e98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10000e9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000ea0:	f043 0317 	orr.w	r3, r3, #23
10000ea4:	6453      	str	r3, [r2, #68]	; 0x44
}
10000ea6:	bf00      	nop
10000ea8:	f507 77a4 	add.w	r7, r7, #328	; 0x148
10000eac:	46bd      	mov	sp, r7
10000eae:	bd80      	pop	{r7, pc}

10000eb0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
10000eb0:	b580      	push	{r7, lr}
10000eb2:	b0d6      	sub	sp, #344	; 0x158
10000eb4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
10000eb6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
10000eba:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
10000ebe:	4618      	mov	r0, r3
10000ec0:	f44f 73ac 	mov.w	r3, #344	; 0x158
10000ec4:	461a      	mov	r2, r3
10000ec6:	2100      	movs	r1, #0
10000ec8:	f00e fb99 	bl	1000f5fe <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
10000ecc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
10000ed0:	f5a3 71ac 	sub.w	r1, r3, #344	; 0x158
10000ed4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
10000ed8:	f04f 0300 	mov.w	r3, #0
10000edc:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInit.CkperClockSelection = RCC_CKPERCLKSOURCE_HSE;
10000ee0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
10000ee4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
10000ee8:	2202      	movs	r2, #2
10000eea:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
10000eee:	463b      	mov	r3, r7
10000ef0:	4618      	mov	r0, r3
10000ef2:	f004 fdcf 	bl	10005a94 <HAL_RCCEx_PeriphCLKConfig>
10000ef6:	4603      	mov	r3, r0
10000ef8:	2b00      	cmp	r3, #0
10000efa:	d001      	beq.n	10000f00 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
10000efc:	f000 f9d0 	bl	100012a0 <Error_Handler>
  }
}
10000f00:	bf00      	nop
10000f02:	f507 77ac 	add.w	r7, r7, #344	; 0x158
10000f06:	46bd      	mov	sp, r7
10000f08:	bd80      	pop	{r7, pc}
	...

10000f0c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
10000f0c:	b580      	push	{r7, lr}
10000f0e:	b088      	sub	sp, #32
10000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
10000f12:	1d3b      	adds	r3, r7, #4
10000f14:	2200      	movs	r2, #0
10000f16:	601a      	str	r2, [r3, #0]
10000f18:	605a      	str	r2, [r3, #4]
10000f1a:	609a      	str	r2, [r3, #8]
10000f1c:	60da      	str	r2, [r3, #12]
10000f1e:	611a      	str	r2, [r3, #16]
10000f20:	615a      	str	r2, [r3, #20]
10000f22:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
10000f24:	4b35      	ldr	r3, [pc, #212]	; (10000ffc <MX_ADC2_Init+0xf0>)
10000f26:	4a36      	ldr	r2, [pc, #216]	; (10001000 <MX_ADC2_Init+0xf4>)
10000f28:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
10000f2a:	4b34      	ldr	r3, [pc, #208]	; (10000ffc <MX_ADC2_Init+0xf0>)
10000f2c:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
10000f30:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
10000f32:	4b32      	ldr	r3, [pc, #200]	; (10000ffc <MX_ADC2_Init+0xf0>)
10000f34:	2200      	movs	r2, #0
10000f36:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
10000f38:	4b30      	ldr	r3, [pc, #192]	; (10000ffc <MX_ADC2_Init+0xf0>)
10000f3a:	2200      	movs	r2, #0
10000f3c:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
10000f3e:	4b2f      	ldr	r3, [pc, #188]	; (10000ffc <MX_ADC2_Init+0xf0>)
10000f40:	2204      	movs	r2, #4
10000f42:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
10000f44:	4b2d      	ldr	r3, [pc, #180]	; (10000ffc <MX_ADC2_Init+0xf0>)
10000f46:	2200      	movs	r2, #0
10000f48:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
10000f4a:	4b2c      	ldr	r3, [pc, #176]	; (10000ffc <MX_ADC2_Init+0xf0>)
10000f4c:	2200      	movs	r2, #0
10000f4e:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
10000f50:	4b2a      	ldr	r3, [pc, #168]	; (10000ffc <MX_ADC2_Init+0xf0>)
10000f52:	2201      	movs	r2, #1
10000f54:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
10000f56:	4b29      	ldr	r3, [pc, #164]	; (10000ffc <MX_ADC2_Init+0xf0>)
10000f58:	2200      	movs	r2, #0
10000f5a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
10000f5c:	4b27      	ldr	r3, [pc, #156]	; (10000ffc <MX_ADC2_Init+0xf0>)
10000f5e:	2200      	movs	r2, #0
10000f60:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
10000f62:	4b26      	ldr	r3, [pc, #152]	; (10000ffc <MX_ADC2_Init+0xf0>)
10000f64:	2200      	movs	r2, #0
10000f66:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
10000f68:	4b24      	ldr	r3, [pc, #144]	; (10000ffc <MX_ADC2_Init+0xf0>)
10000f6a:	2200      	movs	r2, #0
10000f6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
10000f6e:	4b23      	ldr	r3, [pc, #140]	; (10000ffc <MX_ADC2_Init+0xf0>)
10000f70:	2200      	movs	r2, #0
10000f72:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
10000f74:	4b21      	ldr	r3, [pc, #132]	; (10000ffc <MX_ADC2_Init+0xf0>)
10000f76:	2200      	movs	r2, #0
10000f78:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
10000f7a:	4b20      	ldr	r3, [pc, #128]	; (10000ffc <MX_ADC2_Init+0xf0>)
10000f7c:	2200      	movs	r2, #0
10000f7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
10000f82:	481e      	ldr	r0, [pc, #120]	; (10000ffc <MX_ADC2_Init+0xf0>)
10000f84:	f000 fe7c 	bl	10001c80 <HAL_ADC_Init>
10000f88:	4603      	mov	r3, r0
10000f8a:	2b00      	cmp	r3, #0
10000f8c:	d001      	beq.n	10000f92 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
10000f8e:	f000 f987 	bl	100012a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
10000f92:	4b1c      	ldr	r3, [pc, #112]	; (10001004 <MX_ADC2_Init+0xf8>)
10000f94:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
10000f96:	2306      	movs	r3, #6
10000f98:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
10000f9a:	2300      	movs	r3, #0
10000f9c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
10000f9e:	f240 73ff 	movw	r3, #2047	; 0x7ff
10000fa2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
10000fa4:	2304      	movs	r3, #4
10000fa6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
10000fa8:	2300      	movs	r3, #0
10000faa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
10000fac:	1d3b      	adds	r3, r7, #4
10000fae:	4619      	mov	r1, r3
10000fb0:	4812      	ldr	r0, [pc, #72]	; (10000ffc <MX_ADC2_Init+0xf0>)
10000fb2:	f001 f95f 	bl	10002274 <HAL_ADC_ConfigChannel>
10000fb6:	4603      	mov	r3, r0
10000fb8:	2b00      	cmp	r3, #0
10000fba:	d001      	beq.n	10000fc0 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
10000fbc:	f000 f970 	bl	100012a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  __HAL_RCC_VREF_CLK_ENABLE(); // Enable the VREF clock
10000fc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fc4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
10000fc8:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
      HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE); // Disable the high impedance mode which is the default one read page 1694 of refman
10000fcc:	2000      	movs	r0, #0
10000fce:	f000 fc05 	bl	100017dc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
      HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1); // To set the volage to 2.5v
10000fd2:	2000      	movs	r0, #0
10000fd4:	f000 fbee 	bl	100017b4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
      HAL_SYSCFG_EnableVREFBUF(); // To enable VREFBUF
10000fd8:	f000 fc14 	bl	10001804 <HAL_SYSCFG_EnableVREFBUF>

      if(HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
10000fdc:	f240 72ff 	movw	r2, #2047	; 0x7ff
10000fe0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
10000fe4:	4805      	ldr	r0, [pc, #20]	; (10000ffc <MX_ADC2_Init+0xf0>)
10000fe6:	f001 fe09 	bl	10002bfc <HAL_ADCEx_Calibration_Start>
10000fea:	4603      	mov	r3, r0
10000fec:	2b00      	cmp	r3, #0
10000fee:	d001      	beq.n	10000ff4 <MX_ADC2_Init+0xe8>
      {
        /* Calibration Error */
        Error_Handler();
10000ff0:	f000 f956 	bl	100012a0 <Error_Handler>
      }
  /* USER CODE END ADC2_Init 2 */

}
10000ff4:	bf00      	nop
10000ff6:	3720      	adds	r7, #32
10000ff8:	46bd      	mov	sp, r7
10000ffa:	bd80      	pop	{r7, pc}
10000ffc:	10020d34 	.word	0x10020d34
10001000:	48003100 	.word	0x48003100
10001004:	19200040 	.word	0x19200040

10001008 <MX_CRC2_Init>:
  * @brief CRC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC2_Init(void)
{
10001008:	b580      	push	{r7, lr}
1000100a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC2_Init 0 */

  /* USER CODE BEGIN CRC2_Init 1 */

  /* USER CODE END CRC2_Init 1 */
  hcrc2.Instance = CRC2;
1000100c:	4b0d      	ldr	r3, [pc, #52]	; (10001044 <MX_CRC2_Init+0x3c>)
1000100e:	4a0e      	ldr	r2, [pc, #56]	; (10001048 <MX_CRC2_Init+0x40>)
10001010:	601a      	str	r2, [r3, #0]
  hcrc2.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
10001012:	4b0c      	ldr	r3, [pc, #48]	; (10001044 <MX_CRC2_Init+0x3c>)
10001014:	2200      	movs	r2, #0
10001016:	711a      	strb	r2, [r3, #4]
  hcrc2.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
10001018:	4b0a      	ldr	r3, [pc, #40]	; (10001044 <MX_CRC2_Init+0x3c>)
1000101a:	2200      	movs	r2, #0
1000101c:	715a      	strb	r2, [r3, #5]
  hcrc2.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
1000101e:	4b09      	ldr	r3, [pc, #36]	; (10001044 <MX_CRC2_Init+0x3c>)
10001020:	2200      	movs	r2, #0
10001022:	615a      	str	r2, [r3, #20]
  hcrc2.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
10001024:	4b07      	ldr	r3, [pc, #28]	; (10001044 <MX_CRC2_Init+0x3c>)
10001026:	2200      	movs	r2, #0
10001028:	619a      	str	r2, [r3, #24]
  hcrc2.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
1000102a:	4b06      	ldr	r3, [pc, #24]	; (10001044 <MX_CRC2_Init+0x3c>)
1000102c:	2201      	movs	r2, #1
1000102e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc2) != HAL_OK)
10001030:	4804      	ldr	r0, [pc, #16]	; (10001044 <MX_CRC2_Init+0x3c>)
10001032:	f001 ff59 	bl	10002ee8 <HAL_CRC_Init>
10001036:	4603      	mov	r3, r0
10001038:	2b00      	cmp	r3, #0
1000103a:	d001      	beq.n	10001040 <MX_CRC2_Init+0x38>
  {
    Error_Handler();
1000103c:	f000 f930 	bl	100012a0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC2_Init 2 */

  /* USER CODE END CRC2_Init 2 */

}
10001040:	bf00      	nop
10001042:	bd80      	pop	{r7, pc}
10001044:	10020d98 	.word	0x10020d98
10001048:	4c004000 	.word	0x4c004000

1000104c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
1000104c:	b580      	push	{r7, lr}
1000104e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
10001050:	4b06      	ldr	r3, [pc, #24]	; (1000106c <MX_IPCC_Init+0x20>)
10001052:	4a07      	ldr	r2, [pc, #28]	; (10001070 <MX_IPCC_Init+0x24>)
10001054:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
10001056:	4805      	ldr	r0, [pc, #20]	; (1000106c <MX_IPCC_Init+0x20>)
10001058:	f002 f9da 	bl	10003410 <HAL_IPCC_Init>
1000105c:	4603      	mov	r3, r0
1000105e:	2b00      	cmp	r3, #0
10001060:	d001      	beq.n	10001066 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
10001062:	f000 f91d 	bl	100012a0 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
10001066:	bf00      	nop
10001068:	bd80      	pop	{r7, pc}
1000106a:	bf00      	nop
1000106c:	10020dbc 	.word	0x10020dbc
10001070:	4c001000 	.word	0x4c001000

10001074 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
10001074:	b580      	push	{r7, lr}
10001076:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
10001078:	4b22      	ldr	r3, [pc, #136]	; (10001104 <MX_UART4_Init+0x90>)
1000107a:	4a23      	ldr	r2, [pc, #140]	; (10001108 <MX_UART4_Init+0x94>)
1000107c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
1000107e:	4b21      	ldr	r3, [pc, #132]	; (10001104 <MX_UART4_Init+0x90>)
10001080:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
10001084:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
10001086:	4b1f      	ldr	r3, [pc, #124]	; (10001104 <MX_UART4_Init+0x90>)
10001088:	2200      	movs	r2, #0
1000108a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
1000108c:	4b1d      	ldr	r3, [pc, #116]	; (10001104 <MX_UART4_Init+0x90>)
1000108e:	2200      	movs	r2, #0
10001090:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
10001092:	4b1c      	ldr	r3, [pc, #112]	; (10001104 <MX_UART4_Init+0x90>)
10001094:	2200      	movs	r2, #0
10001096:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
10001098:	4b1a      	ldr	r3, [pc, #104]	; (10001104 <MX_UART4_Init+0x90>)
1000109a:	220c      	movs	r2, #12
1000109c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
1000109e:	4b19      	ldr	r3, [pc, #100]	; (10001104 <MX_UART4_Init+0x90>)
100010a0:	2200      	movs	r2, #0
100010a2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
100010a4:	4b17      	ldr	r3, [pc, #92]	; (10001104 <MX_UART4_Init+0x90>)
100010a6:	2200      	movs	r2, #0
100010a8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
100010aa:	4b16      	ldr	r3, [pc, #88]	; (10001104 <MX_UART4_Init+0x90>)
100010ac:	2200      	movs	r2, #0
100010ae:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
100010b0:	4b14      	ldr	r3, [pc, #80]	; (10001104 <MX_UART4_Init+0x90>)
100010b2:	2200      	movs	r2, #0
100010b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
100010b6:	4b13      	ldr	r3, [pc, #76]	; (10001104 <MX_UART4_Init+0x90>)
100010b8:	2200      	movs	r2, #0
100010ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
100010bc:	4811      	ldr	r0, [pc, #68]	; (10001104 <MX_UART4_Init+0x90>)
100010be:	f007 fe4d 	bl	10008d5c <HAL_UART_Init>
100010c2:	4603      	mov	r3, r0
100010c4:	2b00      	cmp	r3, #0
100010c6:	d001      	beq.n	100010cc <MX_UART4_Init+0x58>
  {
    Error_Handler();
100010c8:	f000 f8ea 	bl	100012a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
100010cc:	2100      	movs	r1, #0
100010ce:	480d      	ldr	r0, [pc, #52]	; (10001104 <MX_UART4_Init+0x90>)
100010d0:	f009 f975 	bl	1000a3be <HAL_UARTEx_SetTxFifoThreshold>
100010d4:	4603      	mov	r3, r0
100010d6:	2b00      	cmp	r3, #0
100010d8:	d001      	beq.n	100010de <MX_UART4_Init+0x6a>
  {
    Error_Handler();
100010da:	f000 f8e1 	bl	100012a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
100010de:	2100      	movs	r1, #0
100010e0:	4808      	ldr	r0, [pc, #32]	; (10001104 <MX_UART4_Init+0x90>)
100010e2:	f009 f9aa 	bl	1000a43a <HAL_UARTEx_SetRxFifoThreshold>
100010e6:	4603      	mov	r3, r0
100010e8:	2b00      	cmp	r3, #0
100010ea:	d001      	beq.n	100010f0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
100010ec:	f000 f8d8 	bl	100012a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
100010f0:	4804      	ldr	r0, [pc, #16]	; (10001104 <MX_UART4_Init+0x90>)
100010f2:	f009 f92b 	bl	1000a34c <HAL_UARTEx_DisableFifoMode>
100010f6:	4603      	mov	r3, r0
100010f8:	2b00      	cmp	r3, #0
100010fa:	d001      	beq.n	10001100 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
100010fc:	f000 f8d0 	bl	100012a0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
10001100:	bf00      	nop
10001102:	bd80      	pop	{r7, pc}
10001104:	10020df8 	.word	0x10020df8
10001108:	40010000 	.word	0x40010000

1000110c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
1000110c:	b580      	push	{r7, lr}
1000110e:	b086      	sub	sp, #24
10001110:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10001112:	1d3b      	adds	r3, r7, #4
10001114:	2200      	movs	r2, #0
10001116:	601a      	str	r2, [r3, #0]
10001118:	605a      	str	r2, [r3, #4]
1000111a:	609a      	str	r2, [r3, #8]
1000111c:	60da      	str	r2, [r3, #12]
1000111e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
10001120:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001124:	2204      	movs	r2, #4
10001126:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOH_CLK_ENABLE();
1000112a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000112e:	2280      	movs	r2, #128	; 0x80
10001130:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOA_CLK_ENABLE();
10001134:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001138:	2201      	movs	r2, #1
1000113a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOG_CLK_ENABLE();
1000113e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001142:	2240      	movs	r2, #64	; 0x40
10001144:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOB_CLK_ENABLE();
10001148:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000114c:	2202      	movs	r2, #2
1000114e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOF_CLK_ENABLE();
10001152:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001156:	2220      	movs	r2, #32
10001158:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

  /*Configure GPIO pins : USB_PWR_CC2_Pin USB_PWR_CC1_Pin */
  GPIO_InitStruct.Pin = USB_PWR_CC2_Pin|USB_PWR_CC1_Pin;
1000115c:	2330      	movs	r3, #48	; 0x30
1000115e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
10001160:	2303      	movs	r3, #3
10001162:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10001164:	1d3b      	adds	r3, r7, #4
10001166:	4619      	mov	r1, r3
10001168:	4803      	ldr	r0, [pc, #12]	; (10001178 <MX_GPIO_Init+0x6c>)
1000116a:	f001 ffa7 	bl	100030bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
1000116e:	bf00      	nop
10001170:	3718      	adds	r7, #24
10001172:	46bd      	mov	sp, r7
10001174:	bd80      	pop	{r7, pc}
10001176:	bf00      	nop
10001178:	50002000 	.word	0x50002000

1000117c <AI_Init>:

/* USER CODE BEGIN 4 */

static void AI_Init(void)
{
1000117c:	b580      	push	{r7, lr}
1000117e:	b090      	sub	sp, #64	; 0x40
10001180:	af00      	add	r7, sp, #0
  ai_error err;

  char buf[50]; // buffer for serial output string
  int buf_len = 0;
10001182:	2300      	movs	r3, #0
10001184:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Create a local array with the addresses of the activations buffers */
  const ai_handle act_addr[] = { activations };
10001186:	4b1c      	ldr	r3, [pc, #112]	; (100011f8 <AI_Init+0x7c>)
10001188:	603b      	str	r3, [r7, #0]
  /* Create an instance of the model */
  err = ai_emotion_model_create_and_init(&emotion_model, act_addr, NULL);
1000118a:	463b      	mov	r3, r7
1000118c:	2200      	movs	r2, #0
1000118e:	4619      	mov	r1, r3
10001190:	481a      	ldr	r0, [pc, #104]	; (100011fc <AI_Init+0x80>)
10001192:	f00b fcb3 	bl	1000cafc <ai_emotion_model_create_and_init>
10001196:	4603      	mov	r3, r0
10001198:	63bb      	str	r3, [r7, #56]	; 0x38
  if (err.type != AI_ERROR_NONE) {
1000119a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
1000119e:	2b00      	cmp	r3, #0
100011a0:	d013      	beq.n	100011ca <AI_Init+0x4e>
	  buf_len = sprintf(buf, "ai_emotion_model_create error - type=%d code=%d\r\n", err.type, err.code);
100011a2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
100011a6:	461a      	mov	r2, r3
100011a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
100011aa:	f3c3 2317 	ubfx	r3, r3, #8, #24
100011ae:	1d38      	adds	r0, r7, #4
100011b0:	4913      	ldr	r1, [pc, #76]	; (10001200 <AI_Init+0x84>)
100011b2:	f00e f9c1 	bl	1000f538 <siprintf>
100011b6:	63f8      	str	r0, [r7, #60]	; 0x3c
	  HAL_UART_Transmit(&huart4, (uint8_t *)buf, buf_len, 100);
100011b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
100011ba:	b29a      	uxth	r2, r3
100011bc:	1d39      	adds	r1, r7, #4
100011be:	2364      	movs	r3, #100	; 0x64
100011c0:	4810      	ldr	r0, [pc, #64]	; (10001204 <AI_Init+0x88>)
100011c2:	f007 fe1b 	bl	10008dfc <HAL_UART_Transmit>
//	  printf("ai_emotion_model_create error - type=%d code=%d\r\n", err.type, err.code);
	  Error_Handler();
100011c6:	f000 f86b 	bl	100012a0 <Error_Handler>
  }
  ai_input = ai_emotion_model_inputs_get(emotion_model, NULL);
100011ca:	4b0c      	ldr	r3, [pc, #48]	; (100011fc <AI_Init+0x80>)
100011cc:	681b      	ldr	r3, [r3, #0]
100011ce:	2100      	movs	r1, #0
100011d0:	4618      	mov	r0, r3
100011d2:	f00b fd07 	bl	1000cbe4 <ai_emotion_model_inputs_get>
100011d6:	4603      	mov	r3, r0
100011d8:	4a0b      	ldr	r2, [pc, #44]	; (10001208 <AI_Init+0x8c>)
100011da:	6013      	str	r3, [r2, #0]
  ai_output = ai_emotion_model_outputs_get(emotion_model, NULL);
100011dc:	4b07      	ldr	r3, [pc, #28]	; (100011fc <AI_Init+0x80>)
100011de:	681b      	ldr	r3, [r3, #0]
100011e0:	2100      	movs	r1, #0
100011e2:	4618      	mov	r0, r3
100011e4:	f00b fd18 	bl	1000cc18 <ai_emotion_model_outputs_get>
100011e8:	4603      	mov	r3, r0
100011ea:	4a08      	ldr	r2, [pc, #32]	; (1000120c <AI_Init+0x90>)
100011ec:	6013      	str	r3, [r2, #0]
}
100011ee:	bf00      	nop
100011f0:	3740      	adds	r7, #64	; 0x40
100011f2:	46bd      	mov	sp, r7
100011f4:	bd80      	pop	{r7, pc}
100011f6:	bf00      	nop
100011f8:	10021668 	.word	0x10021668
100011fc:	10020e8c 	.word	0x10020e8c
10001200:	100119cc 	.word	0x100119cc
10001204:	10020df8 	.word	0x10020df8
10001208:	10021eb8 	.word	0x10021eb8
1000120c:	10021ebc 	.word	0x10021ebc

10001210 <AI_Run>:

static void AI_Run(float *pIn, float *pOut)
{
10001210:	b580      	push	{r7, lr}
10001212:	b092      	sub	sp, #72	; 0x48
10001214:	af00      	add	r7, sp, #0
10001216:	6078      	str	r0, [r7, #4]
10001218:	6039      	str	r1, [r7, #0]

  ai_i32 batch;
  ai_error err;

  char buf[50]; // buffer for serial output string
  int buf_len = 0;
1000121a:	2300      	movs	r3, #0
1000121c:	647b      	str	r3, [r7, #68]	; 0x44

  /* Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(pIn);
1000121e:	4b1b      	ldr	r3, [pc, #108]	; (1000128c <AI_Run+0x7c>)
10001220:	681b      	ldr	r3, [r3, #0]
10001222:	687a      	ldr	r2, [r7, #4]
10001224:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(pOut);
10001226:	4b1a      	ldr	r3, [pc, #104]	; (10001290 <AI_Run+0x80>)
10001228:	681b      	ldr	r3, [r3, #0]
1000122a:	683a      	ldr	r2, [r7, #0]
1000122c:	605a      	str	r2, [r3, #4]

  batch = ai_emotion_model_run(emotion_model, ai_input, ai_output);
1000122e:	4b19      	ldr	r3, [pc, #100]	; (10001294 <AI_Run+0x84>)
10001230:	681b      	ldr	r3, [r3, #0]
10001232:	4a16      	ldr	r2, [pc, #88]	; (1000128c <AI_Run+0x7c>)
10001234:	6811      	ldr	r1, [r2, #0]
10001236:	4a16      	ldr	r2, [pc, #88]	; (10001290 <AI_Run+0x80>)
10001238:	6812      	ldr	r2, [r2, #0]
1000123a:	4618      	mov	r0, r3
1000123c:	f00b fd42 	bl	1000ccc4 <ai_emotion_model_run>
10001240:	6438      	str	r0, [r7, #64]	; 0x40
  if (batch != 1) {
10001242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10001244:	2b01      	cmp	r3, #1
10001246:	d01c      	beq.n	10001282 <AI_Run+0x72>
    err = ai_emotion_model_get_error(emotion_model);
10001248:	4b12      	ldr	r3, [pc, #72]	; (10001294 <AI_Run+0x84>)
1000124a:	681b      	ldr	r3, [r3, #0]
1000124c:	4618      	mov	r0, r3
1000124e:	f00b fc33 	bl	1000cab8 <ai_emotion_model_get_error>
10001252:	4603      	mov	r3, r0
10001254:	63fb      	str	r3, [r7, #60]	; 0x3c
    buf_len = sprintf(buf, "AI ai_emotion_model_run error - type=%d code=%d\r\n", err.type, err.code);
10001256:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
1000125a:	461a      	mov	r2, r3
1000125c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
1000125e:	f3c3 2317 	ubfx	r3, r3, #8, #24
10001262:	f107 0008 	add.w	r0, r7, #8
10001266:	490c      	ldr	r1, [pc, #48]	; (10001298 <AI_Run+0x88>)
10001268:	f00e f966 	bl	1000f538 <siprintf>
1000126c:	6478      	str	r0, [r7, #68]	; 0x44
    HAL_UART_Transmit(&huart4, (uint8_t *)buf, buf_len, 100);
1000126e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10001270:	b29a      	uxth	r2, r3
10001272:	f107 0108 	add.w	r1, r7, #8
10001276:	2364      	movs	r3, #100	; 0x64
10001278:	4808      	ldr	r0, [pc, #32]	; (1000129c <AI_Run+0x8c>)
1000127a:	f007 fdbf 	bl	10008dfc <HAL_UART_Transmit>
    //printf("AI ai_emotion_model_run error - type=%d code=%d\r\n", err.type, err.code);
    Error_Handler();
1000127e:	f000 f80f 	bl	100012a0 <Error_Handler>
  }
}
10001282:	bf00      	nop
10001284:	3748      	adds	r7, #72	; 0x48
10001286:	46bd      	mov	sp, r7
10001288:	bd80      	pop	{r7, pc}
1000128a:	bf00      	nop
1000128c:	10021eb8 	.word	0x10021eb8
10001290:	10021ebc 	.word	0x10021ebc
10001294:	10020e8c 	.word	0x10020e8c
10001298:	10011a00 	.word	0x10011a00
1000129c:	10020df8 	.word	0x10020df8

100012a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
100012a0:	b480      	push	{r7}
100012a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
100012a4:	b672      	cpsid	i
}
100012a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
100012a8:	e7fe      	b.n	100012a8 <Error_Handler+0x8>

100012aa <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
100012aa:	b580      	push	{r7, lr}
100012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
100012ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
100012b6:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
100012ba:	2200      	movs	r2, #0
100012bc:	2101      	movs	r1, #1
100012be:	f06f 000b 	mvn.w	r0, #11
100012c2:	f001 fdda 	bl	10002e7a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
100012c6:	2200      	movs	r2, #0
100012c8:	2101      	movs	r1, #1
100012ca:	f06f 000a 	mvn.w	r0, #10
100012ce:	f001 fdd4 	bl	10002e7a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
100012d2:	2200      	movs	r2, #0
100012d4:	2101      	movs	r1, #1
100012d6:	f06f 0009 	mvn.w	r0, #9
100012da:	f001 fdce 	bl	10002e7a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
100012de:	2200      	movs	r2, #0
100012e0:	2101      	movs	r1, #1
100012e2:	f06f 0004 	mvn.w	r0, #4
100012e6:	f001 fdc8 	bl	10002e7a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
100012ea:	2200      	movs	r2, #0
100012ec:	2101      	movs	r1, #1
100012ee:	f06f 0003 	mvn.w	r0, #3
100012f2:	f001 fdc2 	bl	10002e7a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
100012f6:	2200      	movs	r2, #0
100012f8:	2101      	movs	r1, #1
100012fa:	f06f 0001 	mvn.w	r0, #1
100012fe:	f001 fdbc 	bl	10002e7a <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_WAKEUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_WAKEUP_IRQn, 0, 0);
10001302:	2200      	movs	r2, #0
10001304:	2100      	movs	r1, #0
10001306:	2091      	movs	r0, #145	; 0x91
10001308:	f001 fdb7 	bl	10002e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_WAKEUP_IRQn);
1000130c:	2091      	movs	r0, #145	; 0x91
1000130e:	f001 fdd0 	bl	10002eb2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
10001312:	bf00      	nop
10001314:	bd80      	pop	{r7, pc}
	...

10001318 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
10001318:	b580      	push	{r7, lr}
1000131a:	b0de      	sub	sp, #376	; 0x178
1000131c:	af00      	add	r7, sp, #0
1000131e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
10001322:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
10001326:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10001328:	f507 73b2 	add.w	r3, r7, #356	; 0x164
1000132c:	2200      	movs	r2, #0
1000132e:	601a      	str	r2, [r3, #0]
10001330:	605a      	str	r2, [r3, #4]
10001332:	609a      	str	r2, [r3, #8]
10001334:	60da      	str	r2, [r3, #12]
10001336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
10001338:	f507 73bc 	add.w	r3, r7, #376	; 0x178
1000133c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
10001340:	4618      	mov	r0, r3
10001342:	f44f 73ac 	mov.w	r3, #344	; 0x158
10001346:	461a      	mov	r2, r3
10001348:	2100      	movs	r1, #0
1000134a:	f00e f958 	bl	1000f5fe <memset>
  if(hadc->Instance==ADC2)
1000134e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
10001352:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
10001356:	681b      	ldr	r3, [r3, #0]
10001358:	681b      	ldr	r3, [r3, #0]
1000135a:	4a2a      	ldr	r2, [pc, #168]	; (10001404 <HAL_ADC_MspInit+0xec>)
1000135c:	4293      	cmp	r3, r2
1000135e:	d14b      	bne.n	100013f8 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
  if(IS_ENGINEERING_BOOT_MODE())
10001360:	4b29      	ldr	r3, [pc, #164]	; (10001408 <HAL_ADC_MspInit+0xf0>)
10001362:	681b      	ldr	r3, [r3, #0]
10001364:	f003 0307 	and.w	r3, r3, #7
10001368:	2b04      	cmp	r3, #4
1000136a:	d11a      	bne.n	100013a2 <HAL_ADC_MspInit+0x8a>
  {

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
1000136c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
10001370:	f5a3 71b8 	sub.w	r1, r3, #368	; 0x170
10001374:	f04f 0208 	mov.w	r2, #8
10001378:	f04f 0300 	mov.w	r3, #0
1000137c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PER;
10001380:	f507 73bc 	add.w	r3, r7, #376	; 0x178
10001384:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
10001388:	2201      	movs	r2, #1
1000138a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
1000138e:	f107 0308 	add.w	r3, r7, #8
10001392:	4618      	mov	r0, r3
10001394:	f004 fb7e 	bl	10005a94 <HAL_RCCEx_PeriphCLKConfig>
10001398:	4603      	mov	r3, r0
1000139a:	2b00      	cmp	r3, #0
1000139c:	d001      	beq.n	100013a2 <HAL_ADC_MspInit+0x8a>
    {
      Error_Handler();
1000139e:	f7ff ff7f 	bl	100012a0 <Error_Handler>
    }

  }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
100013a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013a6:	2220      	movs	r2, #32
100013a8:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98

    __HAL_RCC_GPIOA_CLK_ENABLE();
100013ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013b0:	2201      	movs	r2, #1
100013b2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    __HAL_RCC_GPIOF_CLK_ENABLE();
100013b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013ba:	2220      	movs	r2, #32
100013bc:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_INP19
    PA4     ------> ADC2_INP18
    PF14     ------> ADC2_INP6
    */
    GPIO_InitStruct.Pin = USB_PWR_CC2_Pin|USB_PWR_CC1_Pin;
100013c0:	2330      	movs	r3, #48	; 0x30
100013c2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
100013c6:	2303      	movs	r3, #3
100013c8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
100013cc:	f507 73b2 	add.w	r3, r7, #356	; 0x164
100013d0:	4619      	mov	r1, r3
100013d2:	480e      	ldr	r0, [pc, #56]	; (1000140c <HAL_ADC_MspInit+0xf4>)
100013d4:	f001 fe72 	bl	100030bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
100013d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
100013dc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
100013e0:	2303      	movs	r3, #3
100013e2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100013e6:	2300      	movs	r3, #0
100013e8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
100013ec:	f507 73b2 	add.w	r3, r7, #356	; 0x164
100013f0:	4619      	mov	r1, r3
100013f2:	4807      	ldr	r0, [pc, #28]	; (10001410 <HAL_ADC_MspInit+0xf8>)
100013f4:	f001 fe62 	bl	100030bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
100013f8:	bf00      	nop
100013fa:	f507 77bc 	add.w	r7, r7, #376	; 0x178
100013fe:	46bd      	mov	sp, r7
10001400:	bd80      	pop	{r7, pc}
10001402:	bf00      	nop
10001404:	48003100 	.word	0x48003100
10001408:	50020000 	.word	0x50020000
1000140c:	50002000 	.word	0x50002000
10001410:	50007000 	.word	0x50007000

10001414 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
10001414:	b480      	push	{r7}
10001416:	b083      	sub	sp, #12
10001418:	af00      	add	r7, sp, #0
1000141a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC2)
1000141c:	687b      	ldr	r3, [r7, #4]
1000141e:	681b      	ldr	r3, [r3, #0]
10001420:	4a06      	ldr	r2, [pc, #24]	; (1000143c <HAL_CRC_MspInit+0x28>)
10001422:	4293      	cmp	r3, r2
10001424:	d104      	bne.n	10001430 <HAL_CRC_MspInit+0x1c>
  {
  /* USER CODE BEGIN CRC2_MspInit 0 */

  /* USER CODE END CRC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC2_CLK_ENABLE();
10001426:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000142a:	2280      	movs	r2, #128	; 0x80
1000142c:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
  /* USER CODE BEGIN CRC2_MspInit 1 */

  /* USER CODE END CRC2_MspInit 1 */
  }

}
10001430:	bf00      	nop
10001432:	370c      	adds	r7, #12
10001434:	46bd      	mov	sp, r7
10001436:	f85d 7b04 	ldr.w	r7, [sp], #4
1000143a:	4770      	bx	lr
1000143c:	4c004000 	.word	0x4c004000

10001440 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
10001440:	b580      	push	{r7, lr}
10001442:	b082      	sub	sp, #8
10001444:	af00      	add	r7, sp, #0
10001446:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
10001448:	687b      	ldr	r3, [r7, #4]
1000144a:	681b      	ldr	r3, [r3, #0]
1000144c:	4a0e      	ldr	r2, [pc, #56]	; (10001488 <HAL_IPCC_MspInit+0x48>)
1000144e:	4293      	cmp	r3, r2
10001450:	d115      	bne.n	1000147e <HAL_IPCC_MspInit+0x3e>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
10001452:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001456:	f44f 5280 	mov.w	r2, #4096	; 0x1000
1000145a:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_RX1_IRQn, 1, 0);
1000145e:	2200      	movs	r2, #0
10001460:	2101      	movs	r1, #1
10001462:	2067      	movs	r0, #103	; 0x67
10001464:	f001 fd09 	bl	10002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_RX1_IRQn);
10001468:	2067      	movs	r0, #103	; 0x67
1000146a:	f001 fd22 	bl	10002eb2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_TX1_IRQn, 1, 0);
1000146e:	2200      	movs	r2, #0
10001470:	2101      	movs	r1, #1
10001472:	2068      	movs	r0, #104	; 0x68
10001474:	f001 fd01 	bl	10002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_TX1_IRQn);
10001478:	2068      	movs	r0, #104	; 0x68
1000147a:	f001 fd1a 	bl	10002eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
1000147e:	bf00      	nop
10001480:	3708      	adds	r7, #8
10001482:	46bd      	mov	sp, r7
10001484:	bd80      	pop	{r7, pc}
10001486:	bf00      	nop
10001488:	4c001000 	.word	0x4c001000

1000148c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
1000148c:	b580      	push	{r7, lr}
1000148e:	b0de      	sub	sp, #376	; 0x178
10001490:	af00      	add	r7, sp, #0
10001492:	f507 73bc 	add.w	r3, r7, #376	; 0x178
10001496:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
1000149a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
1000149c:	f507 73b2 	add.w	r3, r7, #356	; 0x164
100014a0:	2200      	movs	r2, #0
100014a2:	601a      	str	r2, [r3, #0]
100014a4:	605a      	str	r2, [r3, #4]
100014a6:	609a      	str	r2, [r3, #8]
100014a8:	60da      	str	r2, [r3, #12]
100014aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
100014ac:	f507 73bc 	add.w	r3, r7, #376	; 0x178
100014b0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
100014b4:	4618      	mov	r0, r3
100014b6:	f44f 73ac 	mov.w	r3, #344	; 0x158
100014ba:	461a      	mov	r2, r3
100014bc:	2100      	movs	r1, #0
100014be:	f00e f89e 	bl	1000f5fe <memset>
  if(huart->Instance==UART4)
100014c2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
100014c6:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
100014ca:	681b      	ldr	r3, [r3, #0]
100014cc:	681b      	ldr	r3, [r3, #0]
100014ce:	4a2d      	ldr	r2, [pc, #180]	; (10001584 <HAL_UART_MspInit+0xf8>)
100014d0:	4293      	cmp	r3, r2
100014d2:	d151      	bne.n	10001578 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  if(IS_ENGINEERING_BOOT_MODE())
100014d4:	4b2c      	ldr	r3, [pc, #176]	; (10001588 <HAL_UART_MspInit+0xfc>)
100014d6:	681b      	ldr	r3, [r3, #0]
100014d8:	f003 0307 	and.w	r3, r3, #7
100014dc:	2b04      	cmp	r3, #4
100014de:	d113      	bne.n	10001508 <HAL_UART_MspInit+0x7c>
  {

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART24;
100014e0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
100014e4:	f5a3 71b8 	sub.w	r1, r3, #368	; 0x170
100014e8:	f04f 0202 	mov.w	r2, #2
100014ec:	f04f 0300 	mov.w	r3, #0
100014f0:	e9c1 2300 	strd	r2, r3, [r1]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
100014f4:	f107 0308 	add.w	r3, r7, #8
100014f8:	4618      	mov	r0, r3
100014fa:	f004 facb 	bl	10005a94 <HAL_RCCEx_PeriphCLKConfig>
100014fe:	4603      	mov	r3, r0
10001500:	2b00      	cmp	r3, #0
10001502:	d001      	beq.n	10001508 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
10001504:	f7ff fecc 	bl	100012a0 <Error_Handler>
    }

  }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
10001508:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000150c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
10001510:	f8c3 2a80 	str.w	r2, [r3, #2688]	; 0xa80

    __HAL_RCC_GPIOG_CLK_ENABLE();
10001514:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001518:	2240      	movs	r2, #64	; 0x40
1000151a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    __HAL_RCC_GPIOB_CLK_ENABLE();
1000151e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001522:	2202      	movs	r2, #2
10001524:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    /**UART4 GPIO Configuration
    PG11     ------> UART4_TX
    PB2     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin;
10001528:	f44f 6300 	mov.w	r3, #2048	; 0x800
1000152c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10001530:	2302      	movs	r3, #2
10001532:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10001536:	2300      	movs	r3, #0
10001538:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
1000153c:	2300      	movs	r3, #0
1000153e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
10001542:	2306      	movs	r3, #6
10001544:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
10001548:	f507 73b2 	add.w	r3, r7, #356	; 0x164
1000154c:	4619      	mov	r1, r3
1000154e:	480f      	ldr	r0, [pc, #60]	; (1000158c <HAL_UART_MspInit+0x100>)
10001550:	f001 fdb4 	bl	100030bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLINK_TX_Pin;
10001554:	2304      	movs	r3, #4
10001556:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF;
1000155a:	2302      	movs	r3, #2
1000155c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10001560:	2300      	movs	r3, #0
10001562:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
10001566:	2308      	movs	r3, #8
10001568:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    HAL_GPIO_Init(STLINK_TX_GPIO_Port, &GPIO_InitStruct);
1000156c:	f507 73b2 	add.w	r3, r7, #356	; 0x164
10001570:	4619      	mov	r1, r3
10001572:	4807      	ldr	r0, [pc, #28]	; (10001590 <HAL_UART_MspInit+0x104>)
10001574:	f001 fda2 	bl	100030bc <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
10001578:	bf00      	nop
1000157a:	f507 77bc 	add.w	r7, r7, #376	; 0x178
1000157e:	46bd      	mov	sp, r7
10001580:	bd80      	pop	{r7, pc}
10001582:	bf00      	nop
10001584:	40010000 	.word	0x40010000
10001588:	50020000 	.word	0x50020000
1000158c:	50008000 	.word	0x50008000
10001590:	50003000 	.word	0x50003000

10001594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10001594:	b480      	push	{r7}
10001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
10001598:	e7fe      	b.n	10001598 <NMI_Handler+0x4>

1000159a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
1000159a:	b480      	push	{r7}
1000159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
1000159e:	e7fe      	b.n	1000159e <HardFault_Handler+0x4>

100015a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
100015a0:	b480      	push	{r7}
100015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
100015a4:	e7fe      	b.n	100015a4 <MemManage_Handler+0x4>

100015a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
100015a6:	b480      	push	{r7}
100015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
100015aa:	e7fe      	b.n	100015aa <BusFault_Handler+0x4>

100015ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
100015ac:	b480      	push	{r7}
100015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
100015b0:	e7fe      	b.n	100015b0 <UsageFault_Handler+0x4>

100015b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
100015b2:	b480      	push	{r7}
100015b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
100015b6:	bf00      	nop
100015b8:	46bd      	mov	sp, r7
100015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
100015be:	4770      	bx	lr

100015c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
100015c0:	b480      	push	{r7}
100015c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
100015c4:	bf00      	nop
100015c6:	46bd      	mov	sp, r7
100015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
100015cc:	4770      	bx	lr

100015ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
100015ce:	b480      	push	{r7}
100015d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
100015d2:	bf00      	nop
100015d4:	46bd      	mov	sp, r7
100015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
100015da:	4770      	bx	lr

100015dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
100015dc:	b580      	push	{r7, lr}
100015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
100015e0:	f000 f8a4 	bl	1000172c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
100015e4:	bf00      	nop
100015e6:	bd80      	pop	{r7, pc}

100015e8 <IPCC_RX1_IRQHandler>:

/**
  * @brief This function handles IPCC RX1 occupied interrupt.
  */
void IPCC_RX1_IRQHandler(void)
{
100015e8:	b580      	push	{r7, lr}
100015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_RX1_IRQn 0 */

  /* USER CODE END IPCC_RX1_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
100015ec:	4802      	ldr	r0, [pc, #8]	; (100015f8 <IPCC_RX1_IRQHandler+0x10>)
100015ee:	f002 f857 	bl	100036a0 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_RX1_IRQn 1 */

  /* USER CODE END IPCC_RX1_IRQn 1 */
}
100015f2:	bf00      	nop
100015f4:	bd80      	pop	{r7, pc}
100015f6:	bf00      	nop
100015f8:	10020dbc 	.word	0x10020dbc

100015fc <IPCC_TX1_IRQHandler>:

/**
  * @brief This function handles IPCC TX1 free interrupt.
  */
void IPCC_TX1_IRQHandler(void)
{
100015fc:	b580      	push	{r7, lr}
100015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_TX1_IRQn 0 */

  /* USER CODE END IPCC_TX1_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
10001600:	4802      	ldr	r0, [pc, #8]	; (1000160c <IPCC_TX1_IRQHandler+0x10>)
10001602:	f001 ffff 	bl	10003604 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_TX1_IRQn 1 */

  /* USER CODE END IPCC_TX1_IRQn 1 */
}
10001606:	bf00      	nop
10001608:	bd80      	pop	{r7, pc}
1000160a:	bf00      	nop
1000160c:	10020dbc 	.word	0x10020dbc

10001610 <RCC_WAKEUP_IRQHandler>:

/**
  * @brief This function handles RCC wake-up interrupt.
  */
void RCC_WAKEUP_IRQHandler(void)
{
10001610:	b580      	push	{r7, lr}
10001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 0 */

  /* USER CODE END RCC_WAKEUP_IRQn 0 */
  HAL_RCC_WAKEUP_IRQHandler();
10001614:	f003 fdde 	bl	100051d4 <HAL_RCC_WAKEUP_IRQHandler>
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 1 */

  /* USER CODE END RCC_WAKEUP_IRQn 1 */
}
10001618:	bf00      	nop
1000161a:	bd80      	pop	{r7, pc}

1000161c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
1000161c:	b580      	push	{r7, lr}
1000161e:	b086      	sub	sp, #24
10001620:	af00      	add	r7, sp, #0
10001622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
10001624:	4a14      	ldr	r2, [pc, #80]	; (10001678 <_sbrk+0x5c>)
10001626:	4b15      	ldr	r3, [pc, #84]	; (1000167c <_sbrk+0x60>)
10001628:	1ad3      	subs	r3, r2, r3
1000162a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
1000162c:	697b      	ldr	r3, [r7, #20]
1000162e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
10001630:	4b13      	ldr	r3, [pc, #76]	; (10001680 <_sbrk+0x64>)
10001632:	681b      	ldr	r3, [r3, #0]
10001634:	2b00      	cmp	r3, #0
10001636:	d102      	bne.n	1000163e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
10001638:	4b11      	ldr	r3, [pc, #68]	; (10001680 <_sbrk+0x64>)
1000163a:	4a12      	ldr	r2, [pc, #72]	; (10001684 <_sbrk+0x68>)
1000163c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
1000163e:	4b10      	ldr	r3, [pc, #64]	; (10001680 <_sbrk+0x64>)
10001640:	681a      	ldr	r2, [r3, #0]
10001642:	687b      	ldr	r3, [r7, #4]
10001644:	4413      	add	r3, r2
10001646:	693a      	ldr	r2, [r7, #16]
10001648:	429a      	cmp	r2, r3
1000164a:	d207      	bcs.n	1000165c <_sbrk+0x40>
  {
    errno = ENOMEM;
1000164c:	f00e f85e 	bl	1000f70c <__errno>
10001650:	4603      	mov	r3, r0
10001652:	220c      	movs	r2, #12
10001654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
10001656:	f04f 33ff 	mov.w	r3, #4294967295
1000165a:	e009      	b.n	10001670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
1000165c:	4b08      	ldr	r3, [pc, #32]	; (10001680 <_sbrk+0x64>)
1000165e:	681b      	ldr	r3, [r3, #0]
10001660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
10001662:	4b07      	ldr	r3, [pc, #28]	; (10001680 <_sbrk+0x64>)
10001664:	681a      	ldr	r2, [r3, #0]
10001666:	687b      	ldr	r3, [r7, #4]
10001668:	4413      	add	r3, r2
1000166a:	4a05      	ldr	r2, [pc, #20]	; (10001680 <_sbrk+0x64>)
1000166c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
1000166e:	68fb      	ldr	r3, [r7, #12]
}
10001670:	4618      	mov	r0, r3
10001672:	3718      	adds	r7, #24
10001674:	46bd      	mov	sp, r7
10001676:	bd80      	pop	{r7, pc}
10001678:	10040000 	.word	0x10040000
1000167c:	00000800 	.word	0x00000800
10001680:	10021ec0 	.word	0x10021ec0
10001684:	10022188 	.word	0x10022188

10001688 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
10001688:	e7fe      	b.n	10001688 <ADC1_IRQHandler>
	...

1000168c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
1000168c:	b580      	push	{r7, lr}
1000168e:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
10001690:	2003      	movs	r0, #3
10001692:	f001 fbe7 	bl	10002e64 <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001696:	f003 fd1d 	bl	100050d4 <HAL_RCC_GetSystemCoreClockFreq>
1000169a:	4603      	mov	r3, r0
1000169c:	4a07      	ldr	r2, [pc, #28]	; (100016bc <HAL_Init+0x30>)
1000169e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
100016a0:	2001      	movs	r0, #1
100016a2:	f000 f80d 	bl	100016c0 <HAL_InitTick>
100016a6:	4603      	mov	r3, r0
100016a8:	2b00      	cmp	r3, #0
100016aa:	d001      	beq.n	100016b0 <HAL_Init+0x24>
  {
    return HAL_ERROR;
100016ac:	2301      	movs	r3, #1
100016ae:	e002      	b.n	100016b6 <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
100016b0:	f7ff fdfb 	bl	100012aa <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
100016b4:	2300      	movs	r3, #0
}
100016b6:	4618      	mov	r0, r3
100016b8:	bd80      	pop	{r7, pc}
100016ba:	bf00      	nop
100016bc:	10020000 	.word	0x10020000

100016c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
100016c0:	b580      	push	{r7, lr}
100016c2:	b082      	sub	sp, #8
100016c4:	af00      	add	r7, sp, #0
100016c6:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
100016c8:	4b15      	ldr	r3, [pc, #84]	; (10001720 <HAL_InitTick+0x60>)
100016ca:	781b      	ldrb	r3, [r3, #0]
100016cc:	2b00      	cmp	r3, #0
100016ce:	d101      	bne.n	100016d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
100016d0:	2301      	movs	r3, #1
100016d2:	e021      	b.n	10001718 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
100016d4:	4b13      	ldr	r3, [pc, #76]	; (10001724 <HAL_InitTick+0x64>)
100016d6:	681a      	ldr	r2, [r3, #0]
100016d8:	4b11      	ldr	r3, [pc, #68]	; (10001720 <HAL_InitTick+0x60>)
100016da:	781b      	ldrb	r3, [r3, #0]
100016dc:	4619      	mov	r1, r3
100016de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
100016e2:	fbb3 f3f1 	udiv	r3, r3, r1
100016e6:	fbb2 f3f3 	udiv	r3, r2, r3
100016ea:	4618      	mov	r0, r3
100016ec:	f001 fbef 	bl	10002ece <HAL_SYSTICK_Config>
100016f0:	4603      	mov	r3, r0
100016f2:	2b00      	cmp	r3, #0
100016f4:	d001      	beq.n	100016fa <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
100016f6:	2301      	movs	r3, #1
100016f8:	e00e      	b.n	10001718 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
100016fa:	687b      	ldr	r3, [r7, #4]
100016fc:	2b0f      	cmp	r3, #15
100016fe:	d80a      	bhi.n	10001716 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
10001700:	2200      	movs	r2, #0
10001702:	6879      	ldr	r1, [r7, #4]
10001704:	f04f 30ff 	mov.w	r0, #4294967295
10001708:	f001 fbb7 	bl	10002e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
1000170c:	4a06      	ldr	r2, [pc, #24]	; (10001728 <HAL_InitTick+0x68>)
1000170e:	687b      	ldr	r3, [r7, #4]
10001710:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
10001712:	2300      	movs	r3, #0
10001714:	e000      	b.n	10001718 <HAL_InitTick+0x58>
    return HAL_ERROR;
10001716:	2301      	movs	r3, #1
}
10001718:	4618      	mov	r0, r3
1000171a:	3708      	adds	r7, #8
1000171c:	46bd      	mov	sp, r7
1000171e:	bd80      	pop	{r7, pc}
10001720:	10020008 	.word	0x10020008
10001724:	10020000 	.word	0x10020000
10001728:	10020004 	.word	0x10020004

1000172c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
1000172c:	b480      	push	{r7}
1000172e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10001730:	4b06      	ldr	r3, [pc, #24]	; (1000174c <HAL_IncTick+0x20>)
10001732:	781b      	ldrb	r3, [r3, #0]
10001734:	461a      	mov	r2, r3
10001736:	4b06      	ldr	r3, [pc, #24]	; (10001750 <HAL_IncTick+0x24>)
10001738:	681b      	ldr	r3, [r3, #0]
1000173a:	4413      	add	r3, r2
1000173c:	4a04      	ldr	r2, [pc, #16]	; (10001750 <HAL_IncTick+0x24>)
1000173e:	6013      	str	r3, [r2, #0]
}
10001740:	bf00      	nop
10001742:	46bd      	mov	sp, r7
10001744:	f85d 7b04 	ldr.w	r7, [sp], #4
10001748:	4770      	bx	lr
1000174a:	bf00      	nop
1000174c:	10020008 	.word	0x10020008
10001750:	10021ec4 	.word	0x10021ec4

10001754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10001754:	b480      	push	{r7}
10001756:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
10001758:	4b03      	ldr	r3, [pc, #12]	; (10001768 <HAL_GetTick+0x14>)
1000175a:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
1000175c:	4618      	mov	r0, r3
1000175e:	46bd      	mov	sp, r7
10001760:	f85d 7b04 	ldr.w	r7, [sp], #4
10001764:	4770      	bx	lr
10001766:	bf00      	nop
10001768:	10021ec4 	.word	0x10021ec4

1000176c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
1000176c:	b580      	push	{r7, lr}
1000176e:	b084      	sub	sp, #16
10001770:	af00      	add	r7, sp, #0
10001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
10001774:	f7ff ffee 	bl	10001754 <HAL_GetTick>
10001778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
1000177a:	687b      	ldr	r3, [r7, #4]
1000177c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
1000177e:	68fb      	ldr	r3, [r7, #12]
10001780:	f1b3 3fff 	cmp.w	r3, #4294967295
10001784:	d005      	beq.n	10001792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
10001786:	4b0a      	ldr	r3, [pc, #40]	; (100017b0 <HAL_Delay+0x44>)
10001788:	781b      	ldrb	r3, [r3, #0]
1000178a:	461a      	mov	r2, r3
1000178c:	68fb      	ldr	r3, [r7, #12]
1000178e:	4413      	add	r3, r2
10001790:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
10001792:	bf00      	nop
10001794:	f7ff ffde 	bl	10001754 <HAL_GetTick>
10001798:	4602      	mov	r2, r0
1000179a:	68bb      	ldr	r3, [r7, #8]
1000179c:	1ad3      	subs	r3, r2, r3
1000179e:	68fa      	ldr	r2, [r7, #12]
100017a0:	429a      	cmp	r2, r3
100017a2:	d8f7      	bhi.n	10001794 <HAL_Delay+0x28>
  {
  }
}
100017a4:	bf00      	nop
100017a6:	bf00      	nop
100017a8:	3710      	adds	r7, #16
100017aa:	46bd      	mov	sp, r7
100017ac:	bd80      	pop	{r7, pc}
100017ae:	bf00      	nop
100017b0:	10020008 	.word	0x10020008

100017b4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.8 V.
  *                                                This requires VDDA equal to or higher than 2.1 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
100017b4:	b480      	push	{r7}
100017b6:	b083      	sub	sp, #12
100017b8:	af00      	add	r7, sp, #0
100017ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
100017bc:	4b06      	ldr	r3, [pc, #24]	; (100017d8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
100017be:	681b      	ldr	r3, [r3, #0]
100017c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
100017c4:	4904      	ldr	r1, [pc, #16]	; (100017d8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
100017c6:	687b      	ldr	r3, [r7, #4]
100017c8:	4313      	orrs	r3, r2
100017ca:	600b      	str	r3, [r1, #0]
}
100017cc:	bf00      	nop
100017ce:	370c      	adds	r7, #12
100017d0:	46bd      	mov	sp, r7
100017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
100017d6:	4770      	bx	lr
100017d8:	50025000 	.word	0x50025000

100017dc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
100017dc:	b480      	push	{r7}
100017de:	b083      	sub	sp, #12
100017e0:	af00      	add	r7, sp, #0
100017e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
100017e4:	4b06      	ldr	r3, [pc, #24]	; (10001800 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
100017e6:	681b      	ldr	r3, [r3, #0]
100017e8:	f023 0202 	bic.w	r2, r3, #2
100017ec:	4904      	ldr	r1, [pc, #16]	; (10001800 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
100017ee:	687b      	ldr	r3, [r7, #4]
100017f0:	4313      	orrs	r3, r2
100017f2:	600b      	str	r3, [r1, #0]
}
100017f4:	bf00      	nop
100017f6:	370c      	adds	r7, #12
100017f8:	46bd      	mov	sp, r7
100017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
100017fe:	4770      	bx	lr
10001800:	50025000 	.word	0x50025000

10001804 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
10001804:	b580      	push	{r7, lr}
10001806:	b082      	sub	sp, #8
10001808:	af00      	add	r7, sp, #0
  uint32_t  tickstart = 0;
1000180a:	2300      	movs	r3, #0
1000180c:	607b      	str	r3, [r7, #4]

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
1000180e:	4b0f      	ldr	r3, [pc, #60]	; (1000184c <HAL_SYSCFG_EnableVREFBUF+0x48>)
10001810:	681b      	ldr	r3, [r3, #0]
10001812:	4a0e      	ldr	r2, [pc, #56]	; (1000184c <HAL_SYSCFG_EnableVREFBUF+0x48>)
10001814:	f043 0301 	orr.w	r3, r3, #1
10001818:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
1000181a:	f7ff ff9b 	bl	10001754 <HAL_GetTick>
1000181e:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == RESET)
10001820:	e008      	b.n	10001834 <HAL_SYSCFG_EnableVREFBUF+0x30>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
10001822:	f7ff ff97 	bl	10001754 <HAL_GetTick>
10001826:	4602      	mov	r2, r0
10001828:	687b      	ldr	r3, [r7, #4]
1000182a:	1ad3      	subs	r3, r2, r3
1000182c:	2b0a      	cmp	r3, #10
1000182e:	d901      	bls.n	10001834 <HAL_SYSCFG_EnableVREFBUF+0x30>
    {
      return HAL_TIMEOUT;
10001830:	2303      	movs	r3, #3
10001832:	e006      	b.n	10001842 <HAL_SYSCFG_EnableVREFBUF+0x3e>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == RESET)
10001834:	4b05      	ldr	r3, [pc, #20]	; (1000184c <HAL_SYSCFG_EnableVREFBUF+0x48>)
10001836:	681b      	ldr	r3, [r3, #0]
10001838:	f003 0308 	and.w	r3, r3, #8
1000183c:	2b00      	cmp	r3, #0
1000183e:	d0f0      	beq.n	10001822 <HAL_SYSCFG_EnableVREFBUF+0x1e>
    }
  }

  return HAL_OK;
10001840:	2300      	movs	r3, #0
}
10001842:	4618      	mov	r0, r3
10001844:	3708      	adds	r7, #8
10001846:	46bd      	mov	sp, r7
10001848:	bd80      	pop	{r7, pc}
1000184a:	bf00      	nop
1000184c:	50025000 	.word	0x50025000

10001850 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
10001850:	b480      	push	{r7}
10001852:	b083      	sub	sp, #12
10001854:	af00      	add	r7, sp, #0
10001856:	6078      	str	r0, [r7, #4]
10001858:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
1000185a:	687b      	ldr	r3, [r7, #4]
1000185c:	689b      	ldr	r3, [r3, #8]
1000185e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
10001862:	683b      	ldr	r3, [r7, #0]
10001864:	431a      	orrs	r2, r3
10001866:	687b      	ldr	r3, [r7, #4]
10001868:	609a      	str	r2, [r3, #8]
}
1000186a:	bf00      	nop
1000186c:	370c      	adds	r7, #12
1000186e:	46bd      	mov	sp, r7
10001870:	f85d 7b04 	ldr.w	r7, [sp], #4
10001874:	4770      	bx	lr
	...

10001878 <LL_ADC_SetCommonPathInternalCh>:
  *
  *         (1) On STM32MP1, parameter available only on ADC instance: ADC2.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
10001878:	b480      	push	{r7}
1000187a:	b083      	sub	sp, #12
1000187c:	af00      	add	r7, sp, #0
1000187e:	6078      	str	r0, [r7, #4]
10001880:	6039      	str	r1, [r7, #0]
  if(PathInternal == LL_ADC_PATH_INTERNAL_VDDCORE)
10001882:	683b      	ldr	r3, [r7, #0]
10001884:	2b01      	cmp	r3, #1
10001886:	d108      	bne.n	1000189a <LL_ADC_SetCommonPathInternalCh+0x22>
  {
    /* Feature limited to ADC instance ADC2 */
    SET_BIT(ADC2->OR, ADC2_OR_VDDCOREEN);
10001888:	4b0b      	ldr	r3, [pc, #44]	; (100018b8 <LL_ADC_SetCommonPathInternalCh+0x40>)
1000188a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
1000188e:	4a0a      	ldr	r2, [pc, #40]	; (100018b8 <LL_ADC_SetCommonPathInternalCh+0x40>)
10001890:	f043 0301 	orr.w	r3, r3, #1
10001894:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
  }
  else
  {
    MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
  }
}
10001898:	e007      	b.n	100018aa <LL_ADC_SetCommonPathInternalCh+0x32>
    MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
1000189a:	687b      	ldr	r3, [r7, #4]
1000189c:	689b      	ldr	r3, [r3, #8]
1000189e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
100018a2:	683b      	ldr	r3, [r7, #0]
100018a4:	431a      	orrs	r2, r3
100018a6:	687b      	ldr	r3, [r7, #4]
100018a8:	609a      	str	r2, [r3, #8]
}
100018aa:	bf00      	nop
100018ac:	370c      	adds	r7, #12
100018ae:	46bd      	mov	sp, r7
100018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
100018b4:	4770      	bx	lr
100018b6:	bf00      	nop
100018b8:	48003100 	.word	0x48003100

100018bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
100018bc:	b480      	push	{r7}
100018be:	b083      	sub	sp, #12
100018c0:	af00      	add	r7, sp, #0
100018c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
100018c4:	687b      	ldr	r3, [r7, #4]
100018c6:	689b      	ldr	r3, [r3, #8]
100018c8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
100018cc:	4618      	mov	r0, r3
100018ce:	370c      	adds	r7, #12
100018d0:	46bd      	mov	sp, r7
100018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
100018d6:	4770      	bx	lr

100018d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
100018d8:	b480      	push	{r7}
100018da:	b087      	sub	sp, #28
100018dc:	af00      	add	r7, sp, #0
100018de:	60f8      	str	r0, [r7, #12]
100018e0:	60b9      	str	r1, [r7, #8]
100018e2:	607a      	str	r2, [r7, #4]
100018e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
100018e6:	68fb      	ldr	r3, [r7, #12]
100018e8:	3360      	adds	r3, #96	; 0x60
100018ea:	461a      	mov	r2, r3
100018ec:	68bb      	ldr	r3, [r7, #8]
100018ee:	009b      	lsls	r3, r3, #2
100018f0:	4413      	add	r3, r2
100018f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
100018f4:	697b      	ldr	r3, [r7, #20]
100018f6:	681b      	ldr	r3, [r3, #0]
100018f8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
100018fc:	687b      	ldr	r3, [r7, #4]
100018fe:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
10001902:	683b      	ldr	r3, [r7, #0]
10001904:	430b      	orrs	r3, r1
10001906:	431a      	orrs	r2, r3
10001908:	697b      	ldr	r3, [r7, #20]
1000190a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
1000190c:	bf00      	nop
1000190e:	371c      	adds	r7, #28
10001910:	46bd      	mov	sp, r7
10001912:	f85d 7b04 	ldr.w	r7, [sp], #4
10001916:	4770      	bx	lr

10001918 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
10001918:	b480      	push	{r7}
1000191a:	b085      	sub	sp, #20
1000191c:	af00      	add	r7, sp, #0
1000191e:	60f8      	str	r0, [r7, #12]
10001920:	60b9      	str	r1, [r7, #8]
10001922:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
10001924:	68fb      	ldr	r3, [r7, #12]
10001926:	691b      	ldr	r3, [r3, #16]
10001928:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
1000192c:	68bb      	ldr	r3, [r7, #8]
1000192e:	f003 031f 	and.w	r3, r3, #31
10001932:	6879      	ldr	r1, [r7, #4]
10001934:	fa01 f303 	lsl.w	r3, r1, r3
10001938:	431a      	orrs	r2, r3
1000193a:	68fb      	ldr	r3, [r7, #12]
1000193c:	611a      	str	r2, [r3, #16]
}
1000193e:	bf00      	nop
10001940:	3714      	adds	r7, #20
10001942:	46bd      	mov	sp, r7
10001944:	f85d 7b04 	ldr.w	r7, [sp], #4
10001948:	4770      	bx	lr

1000194a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
1000194a:	b480      	push	{r7}
1000194c:	b087      	sub	sp, #28
1000194e:	af00      	add	r7, sp, #0
10001950:	60f8      	str	r0, [r7, #12]
10001952:	60b9      	str	r1, [r7, #8]
10001954:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
10001956:	68fb      	ldr	r3, [r7, #12]
10001958:	3360      	adds	r3, #96	; 0x60
1000195a:	461a      	mov	r2, r3
1000195c:	68bb      	ldr	r3, [r7, #8]
1000195e:	009b      	lsls	r3, r3, #2
10001960:	4413      	add	r3, r2
10001962:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
10001964:	697b      	ldr	r3, [r7, #20]
10001966:	681b      	ldr	r3, [r3, #0]
10001968:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
1000196c:	687b      	ldr	r3, [r7, #4]
1000196e:	431a      	orrs	r2, r3
10001970:	697b      	ldr	r3, [r7, #20]
10001972:	601a      	str	r2, [r3, #0]
}
10001974:	bf00      	nop
10001976:	371c      	adds	r7, #28
10001978:	46bd      	mov	sp, r7
1000197a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000197e:	4770      	bx	lr

10001980 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
10001980:	b480      	push	{r7}
10001982:	b083      	sub	sp, #12
10001984:	af00      	add	r7, sp, #0
10001986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
10001988:	687b      	ldr	r3, [r7, #4]
1000198a:	68db      	ldr	r3, [r3, #12]
1000198c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
10001990:	2b00      	cmp	r3, #0
10001992:	d101      	bne.n	10001998 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
10001994:	2301      	movs	r3, #1
10001996:	e000      	b.n	1000199a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
10001998:	2300      	movs	r3, #0
}
1000199a:	4618      	mov	r0, r3
1000199c:	370c      	adds	r7, #12
1000199e:	46bd      	mov	sp, r7
100019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
100019a4:	4770      	bx	lr

100019a6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32MP1, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
100019a6:	b480      	push	{r7}
100019a8:	b087      	sub	sp, #28
100019aa:	af00      	add	r7, sp, #0
100019ac:	60f8      	str	r0, [r7, #12]
100019ae:	60b9      	str	r1, [r7, #8]
100019b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
100019b2:	68fb      	ldr	r3, [r7, #12]
100019b4:	3330      	adds	r3, #48	; 0x30
100019b6:	461a      	mov	r2, r3
100019b8:	68bb      	ldr	r3, [r7, #8]
100019ba:	0a1b      	lsrs	r3, r3, #8
100019bc:	009b      	lsls	r3, r3, #2
100019be:	f003 030c 	and.w	r3, r3, #12
100019c2:	4413      	add	r3, r2
100019c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
100019c6:	697b      	ldr	r3, [r7, #20]
100019c8:	681a      	ldr	r2, [r3, #0]
100019ca:	68bb      	ldr	r3, [r7, #8]
100019cc:	f003 031f 	and.w	r3, r3, #31
100019d0:	211f      	movs	r1, #31
100019d2:	fa01 f303 	lsl.w	r3, r1, r3
100019d6:	43db      	mvns	r3, r3
100019d8:	401a      	ands	r2, r3
100019da:	687b      	ldr	r3, [r7, #4]
100019dc:	0e9b      	lsrs	r3, r3, #26
100019de:	f003 011f 	and.w	r1, r3, #31
100019e2:	68bb      	ldr	r3, [r7, #8]
100019e4:	f003 031f 	and.w	r3, r3, #31
100019e8:	fa01 f303 	lsl.w	r3, r1, r3
100019ec:	431a      	orrs	r2, r3
100019ee:	697b      	ldr	r3, [r7, #20]
100019f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
100019f2:	bf00      	nop
100019f4:	371c      	adds	r7, #28
100019f6:	46bd      	mov	sp, r7
100019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
100019fc:	4770      	bx	lr

100019fe <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
100019fe:	b480      	push	{r7}
10001a00:	b087      	sub	sp, #28
10001a02:	af00      	add	r7, sp, #0
10001a04:	60f8      	str	r0, [r7, #12]
10001a06:	60b9      	str	r1, [r7, #8]
10001a08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
10001a0a:	68fb      	ldr	r3, [r7, #12]
10001a0c:	3314      	adds	r3, #20
10001a0e:	461a      	mov	r2, r3
10001a10:	68bb      	ldr	r3, [r7, #8]
10001a12:	0e5b      	lsrs	r3, r3, #25
10001a14:	009b      	lsls	r3, r3, #2
10001a16:	f003 0304 	and.w	r3, r3, #4
10001a1a:	4413      	add	r3, r2
10001a1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
10001a1e:	697b      	ldr	r3, [r7, #20]
10001a20:	681a      	ldr	r2, [r3, #0]
10001a22:	68bb      	ldr	r3, [r7, #8]
10001a24:	0d1b      	lsrs	r3, r3, #20
10001a26:	f003 031f 	and.w	r3, r3, #31
10001a2a:	2107      	movs	r1, #7
10001a2c:	fa01 f303 	lsl.w	r3, r1, r3
10001a30:	43db      	mvns	r3, r3
10001a32:	401a      	ands	r2, r3
10001a34:	68bb      	ldr	r3, [r7, #8]
10001a36:	0d1b      	lsrs	r3, r3, #20
10001a38:	f003 031f 	and.w	r3, r3, #31
10001a3c:	6879      	ldr	r1, [r7, #4]
10001a3e:	fa01 f303 	lsl.w	r3, r1, r3
10001a42:	431a      	orrs	r2, r3
10001a44:	697b      	ldr	r3, [r7, #20]
10001a46:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
10001a48:	bf00      	nop
10001a4a:	371c      	adds	r7, #28
10001a4c:	46bd      	mov	sp, r7
10001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001a52:	4770      	bx	lr

10001a54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
10001a54:	b480      	push	{r7}
10001a56:	b085      	sub	sp, #20
10001a58:	af00      	add	r7, sp, #0
10001a5a:	60f8      	str	r0, [r7, #12]
10001a5c:	60b9      	str	r1, [r7, #8]
10001a5e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
10001a60:	68fb      	ldr	r3, [r7, #12]
10001a62:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
10001a66:	68bb      	ldr	r3, [r7, #8]
10001a68:	f3c3 0313 	ubfx	r3, r3, #0, #20
10001a6c:	43db      	mvns	r3, r3
10001a6e:	401a      	ands	r2, r3
10001a70:	687b      	ldr	r3, [r7, #4]
10001a72:	f003 0318 	and.w	r3, r3, #24
10001a76:	4908      	ldr	r1, [pc, #32]	; (10001a98 <LL_ADC_SetChannelSingleDiff+0x44>)
10001a78:	40d9      	lsrs	r1, r3
10001a7a:	68bb      	ldr	r3, [r7, #8]
10001a7c:	400b      	ands	r3, r1
10001a7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
10001a82:	431a      	orrs	r2, r3
10001a84:	68fb      	ldr	r3, [r7, #12]
10001a86:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
10001a8a:	bf00      	nop
10001a8c:	3714      	adds	r7, #20
10001a8e:	46bd      	mov	sp, r7
10001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
10001a94:	4770      	bx	lr
10001a96:	bf00      	nop
10001a98:	000fffff 	.word	0x000fffff

10001a9c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
10001a9c:	b480      	push	{r7}
10001a9e:	b083      	sub	sp, #12
10001aa0:	af00      	add	r7, sp, #0
10001aa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
10001aa4:	687b      	ldr	r3, [r7, #4]
10001aa6:	689b      	ldr	r3, [r3, #8]
10001aa8:	f003 031f 	and.w	r3, r3, #31
}
10001aac:	4618      	mov	r0, r3
10001aae:	370c      	adds	r7, #12
10001ab0:	46bd      	mov	sp, r7
10001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
10001ab6:	4770      	bx	lr

10001ab8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
10001ab8:	b480      	push	{r7}
10001aba:	b083      	sub	sp, #12
10001abc:	af00      	add	r7, sp, #0
10001abe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
10001ac0:	687b      	ldr	r3, [r7, #4]
10001ac2:	689b      	ldr	r3, [r3, #8]
10001ac4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
10001ac8:	4618      	mov	r0, r3
10001aca:	370c      	adds	r7, #12
10001acc:	46bd      	mov	sp, r7
10001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
10001ad2:	4770      	bx	lr

10001ad4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
10001ad4:	b480      	push	{r7}
10001ad6:	b083      	sub	sp, #12
10001ad8:	af00      	add	r7, sp, #0
10001ada:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
10001adc:	687b      	ldr	r3, [r7, #4]
10001ade:	689b      	ldr	r3, [r3, #8]
10001ae0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
10001ae4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10001ae8:	687a      	ldr	r2, [r7, #4]
10001aea:	6093      	str	r3, [r2, #8]
}
10001aec:	bf00      	nop
10001aee:	370c      	adds	r7, #12
10001af0:	46bd      	mov	sp, r7
10001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
10001af6:	4770      	bx	lr

10001af8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
10001af8:	b480      	push	{r7}
10001afa:	b083      	sub	sp, #12
10001afc:	af00      	add	r7, sp, #0
10001afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
10001b00:	687b      	ldr	r3, [r7, #4]
10001b02:	689b      	ldr	r3, [r3, #8]
10001b04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
10001b08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
10001b0c:	d101      	bne.n	10001b12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
10001b0e:	2301      	movs	r3, #1
10001b10:	e000      	b.n	10001b14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
10001b12:	2300      	movs	r3, #0
}
10001b14:	4618      	mov	r0, r3
10001b16:	370c      	adds	r7, #12
10001b18:	46bd      	mov	sp, r7
10001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
10001b1e:	4770      	bx	lr

10001b20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
10001b20:	b480      	push	{r7}
10001b22:	b083      	sub	sp, #12
10001b24:	af00      	add	r7, sp, #0
10001b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
10001b28:	687b      	ldr	r3, [r7, #4]
10001b2a:	689b      	ldr	r3, [r3, #8]
10001b2c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
10001b30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10001b34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
10001b38:	687b      	ldr	r3, [r7, #4]
10001b3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
10001b3c:	bf00      	nop
10001b3e:	370c      	adds	r7, #12
10001b40:	46bd      	mov	sp, r7
10001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
10001b46:	4770      	bx	lr

10001b48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
10001b48:	b480      	push	{r7}
10001b4a:	b083      	sub	sp, #12
10001b4c:	af00      	add	r7, sp, #0
10001b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
10001b50:	687b      	ldr	r3, [r7, #4]
10001b52:	689b      	ldr	r3, [r3, #8]
10001b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
10001b58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
10001b5c:	d101      	bne.n	10001b62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
10001b5e:	2301      	movs	r3, #1
10001b60:	e000      	b.n	10001b64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
10001b62:	2300      	movs	r3, #0
}
10001b64:	4618      	mov	r0, r3
10001b66:	370c      	adds	r7, #12
10001b68:	46bd      	mov	sp, r7
10001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
10001b6e:	4770      	bx	lr

10001b70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
10001b70:	b480      	push	{r7}
10001b72:	b083      	sub	sp, #12
10001b74:	af00      	add	r7, sp, #0
10001b76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
10001b78:	687b      	ldr	r3, [r7, #4]
10001b7a:	689b      	ldr	r3, [r3, #8]
10001b7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
10001b80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10001b84:	f043 0201 	orr.w	r2, r3, #1
10001b88:	687b      	ldr	r3, [r7, #4]
10001b8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
10001b8c:	bf00      	nop
10001b8e:	370c      	adds	r7, #12
10001b90:	46bd      	mov	sp, r7
10001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
10001b96:	4770      	bx	lr

10001b98 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
10001b98:	b480      	push	{r7}
10001b9a:	b083      	sub	sp, #12
10001b9c:	af00      	add	r7, sp, #0
10001b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
10001ba0:	687b      	ldr	r3, [r7, #4]
10001ba2:	689b      	ldr	r3, [r3, #8]
10001ba4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
10001ba8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10001bac:	f043 0202 	orr.w	r2, r3, #2
10001bb0:	687b      	ldr	r3, [r7, #4]
10001bb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
10001bb4:	bf00      	nop
10001bb6:	370c      	adds	r7, #12
10001bb8:	46bd      	mov	sp, r7
10001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
10001bbe:	4770      	bx	lr

10001bc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
10001bc0:	b480      	push	{r7}
10001bc2:	b083      	sub	sp, #12
10001bc4:	af00      	add	r7, sp, #0
10001bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
10001bc8:	687b      	ldr	r3, [r7, #4]
10001bca:	689b      	ldr	r3, [r3, #8]
10001bcc:	f003 0301 	and.w	r3, r3, #1
10001bd0:	2b01      	cmp	r3, #1
10001bd2:	d101      	bne.n	10001bd8 <LL_ADC_IsEnabled+0x18>
10001bd4:	2301      	movs	r3, #1
10001bd6:	e000      	b.n	10001bda <LL_ADC_IsEnabled+0x1a>
10001bd8:	2300      	movs	r3, #0
}
10001bda:	4618      	mov	r0, r3
10001bdc:	370c      	adds	r7, #12
10001bde:	46bd      	mov	sp, r7
10001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
10001be4:	4770      	bx	lr

10001be6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
10001be6:	b480      	push	{r7}
10001be8:	b083      	sub	sp, #12
10001bea:	af00      	add	r7, sp, #0
10001bec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
10001bee:	687b      	ldr	r3, [r7, #4]
10001bf0:	689b      	ldr	r3, [r3, #8]
10001bf2:	f003 0302 	and.w	r3, r3, #2
10001bf6:	2b02      	cmp	r3, #2
10001bf8:	d101      	bne.n	10001bfe <LL_ADC_IsDisableOngoing+0x18>
10001bfa:	2301      	movs	r3, #1
10001bfc:	e000      	b.n	10001c00 <LL_ADC_IsDisableOngoing+0x1a>
10001bfe:	2300      	movs	r3, #0
}
10001c00:	4618      	mov	r0, r3
10001c02:	370c      	adds	r7, #12
10001c04:	46bd      	mov	sp, r7
10001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c0a:	4770      	bx	lr

10001c0c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
10001c0c:	b480      	push	{r7}
10001c0e:	b083      	sub	sp, #12
10001c10:	af00      	add	r7, sp, #0
10001c12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
10001c14:	687b      	ldr	r3, [r7, #4]
10001c16:	689b      	ldr	r3, [r3, #8]
10001c18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
10001c1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10001c20:	f043 0204 	orr.w	r2, r3, #4
10001c24:	687b      	ldr	r3, [r7, #4]
10001c26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
10001c28:	bf00      	nop
10001c2a:	370c      	adds	r7, #12
10001c2c:	46bd      	mov	sp, r7
10001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c32:	4770      	bx	lr

10001c34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
10001c34:	b480      	push	{r7}
10001c36:	b083      	sub	sp, #12
10001c38:	af00      	add	r7, sp, #0
10001c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
10001c3c:	687b      	ldr	r3, [r7, #4]
10001c3e:	689b      	ldr	r3, [r3, #8]
10001c40:	f003 0304 	and.w	r3, r3, #4
10001c44:	2b04      	cmp	r3, #4
10001c46:	d101      	bne.n	10001c4c <LL_ADC_REG_IsConversionOngoing+0x18>
10001c48:	2301      	movs	r3, #1
10001c4a:	e000      	b.n	10001c4e <LL_ADC_REG_IsConversionOngoing+0x1a>
10001c4c:	2300      	movs	r3, #0
}
10001c4e:	4618      	mov	r0, r3
10001c50:	370c      	adds	r7, #12
10001c52:	46bd      	mov	sp, r7
10001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c58:	4770      	bx	lr

10001c5a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
10001c5a:	b480      	push	{r7}
10001c5c:	b083      	sub	sp, #12
10001c5e:	af00      	add	r7, sp, #0
10001c60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
10001c62:	687b      	ldr	r3, [r7, #4]
10001c64:	689b      	ldr	r3, [r3, #8]
10001c66:	f003 0308 	and.w	r3, r3, #8
10001c6a:	2b08      	cmp	r3, #8
10001c6c:	d101      	bne.n	10001c72 <LL_ADC_INJ_IsConversionOngoing+0x18>
10001c6e:	2301      	movs	r3, #1
10001c70:	e000      	b.n	10001c74 <LL_ADC_INJ_IsConversionOngoing+0x1a>
10001c72:	2300      	movs	r3, #0
}
10001c74:	4618      	mov	r0, r3
10001c76:	370c      	adds	r7, #12
10001c78:	46bd      	mov	sp, r7
10001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c7e:	4770      	bx	lr

10001c80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
10001c80:	b590      	push	{r4, r7, lr}
10001c82:	b089      	sub	sp, #36	; 0x24
10001c84:	af00      	add	r7, sp, #0
10001c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
10001c88:	2300      	movs	r3, #0
10001c8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
10001c8c:	2300      	movs	r3, #0
10001c8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
10001c90:	687b      	ldr	r3, [r7, #4]
10001c92:	2b00      	cmp	r3, #0
10001c94:	d101      	bne.n	10001c9a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
10001c96:	2301      	movs	r3, #1
10001c98:	e13a      	b.n	10001f10 <HAL_ADC_Init+0x290>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
10001c9a:	687b      	ldr	r3, [r7, #4]
10001c9c:	68db      	ldr	r3, [r3, #12]
10001c9e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
10001ca0:	687b      	ldr	r3, [r7, #4]
10001ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001ca4:	2b00      	cmp	r3, #0
10001ca6:	d109      	bne.n	10001cbc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
10001ca8:	6878      	ldr	r0, [r7, #4]
10001caa:	f7ff fb35 	bl	10001318 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
10001cae:	687b      	ldr	r3, [r7, #4]
10001cb0:	2200      	movs	r2, #0
10001cb2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
10001cb4:	687b      	ldr	r3, [r7, #4]
10001cb6:	2200      	movs	r2, #0
10001cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
10001cbc:	687b      	ldr	r3, [r7, #4]
10001cbe:	681b      	ldr	r3, [r3, #0]
10001cc0:	4618      	mov	r0, r3
10001cc2:	f7ff ff19 	bl	10001af8 <LL_ADC_IsDeepPowerDownEnabled>
10001cc6:	4603      	mov	r3, r0
10001cc8:	2b00      	cmp	r3, #0
10001cca:	d004      	beq.n	10001cd6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
10001ccc:	687b      	ldr	r3, [r7, #4]
10001cce:	681b      	ldr	r3, [r3, #0]
10001cd0:	4618      	mov	r0, r3
10001cd2:	f7ff feff 	bl	10001ad4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
10001cd6:	687b      	ldr	r3, [r7, #4]
10001cd8:	681b      	ldr	r3, [r3, #0]
10001cda:	4618      	mov	r0, r3
10001cdc:	f7ff ff34 	bl	10001b48 <LL_ADC_IsInternalRegulatorEnabled>
10001ce0:	4603      	mov	r3, r0
10001ce2:	2b00      	cmp	r3, #0
10001ce4:	d114      	bne.n	10001d10 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
10001ce6:	687b      	ldr	r3, [r7, #4]
10001ce8:	681b      	ldr	r3, [r3, #0]
10001cea:	4618      	mov	r0, r3
10001cec:	f7ff ff18 	bl	10001b20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
10001cf0:	4b89      	ldr	r3, [pc, #548]	; (10001f18 <HAL_ADC_Init+0x298>)
10001cf2:	681b      	ldr	r3, [r3, #0]
10001cf4:	099b      	lsrs	r3, r3, #6
10001cf6:	4a89      	ldr	r2, [pc, #548]	; (10001f1c <HAL_ADC_Init+0x29c>)
10001cf8:	fba2 2303 	umull	r2, r3, r2, r3
10001cfc:	099b      	lsrs	r3, r3, #6
10001cfe:	3301      	adds	r3, #1
10001d00:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
10001d02:	e002      	b.n	10001d0a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
10001d04:	68bb      	ldr	r3, [r7, #8]
10001d06:	3b01      	subs	r3, #1
10001d08:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
10001d0a:	68bb      	ldr	r3, [r7, #8]
10001d0c:	2b00      	cmp	r3, #0
10001d0e:	d1f9      	bne.n	10001d04 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
10001d10:	687b      	ldr	r3, [r7, #4]
10001d12:	681b      	ldr	r3, [r3, #0]
10001d14:	4618      	mov	r0, r3
10001d16:	f7ff ff17 	bl	10001b48 <LL_ADC_IsInternalRegulatorEnabled>
10001d1a:	4603      	mov	r3, r0
10001d1c:	2b00      	cmp	r3, #0
10001d1e:	d10d      	bne.n	10001d3c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10001d20:	687b      	ldr	r3, [r7, #4]
10001d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001d24:	f043 0210 	orr.w	r2, r3, #16
10001d28:	687b      	ldr	r3, [r7, #4]
10001d2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
10001d2c:	687b      	ldr	r3, [r7, #4]
10001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10001d30:	f043 0201 	orr.w	r2, r3, #1
10001d34:	687b      	ldr	r3, [r7, #4]
10001d36:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
10001d38:	2301      	movs	r3, #1
10001d3a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
10001d3c:	687b      	ldr	r3, [r7, #4]
10001d3e:	681b      	ldr	r3, [r3, #0]
10001d40:	4618      	mov	r0, r3
10001d42:	f7ff ff77 	bl	10001c34 <LL_ADC_REG_IsConversionOngoing>
10001d46:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
10001d48:	687b      	ldr	r3, [r7, #4]
10001d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001d4c:	f003 0310 	and.w	r3, r3, #16
10001d50:	2b00      	cmp	r3, #0
10001d52:	f040 80d4 	bne.w	10001efe <HAL_ADC_Init+0x27e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
10001d56:	697b      	ldr	r3, [r7, #20]
10001d58:	2b00      	cmp	r3, #0
10001d5a:	f040 80d0 	bne.w	10001efe <HAL_ADC_Init+0x27e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
10001d5e:	687b      	ldr	r3, [r7, #4]
10001d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001d62:	f423 7381 	bic.w	r3, r3, #258	; 0x102
10001d66:	f043 0202 	orr.w	r2, r3, #2
10001d6a:	687b      	ldr	r3, [r7, #4]
10001d6c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
10001d6e:	687b      	ldr	r3, [r7, #4]
10001d70:	681b      	ldr	r3, [r3, #0]
10001d72:	4618      	mov	r0, r3
10001d74:	f7ff ff24 	bl	10001bc0 <LL_ADC_IsEnabled>
10001d78:	4603      	mov	r3, r0
10001d7a:	2b00      	cmp	r3, #0
10001d7c:	d110      	bne.n	10001da0 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
10001d7e:	4868      	ldr	r0, [pc, #416]	; (10001f20 <HAL_ADC_Init+0x2a0>)
10001d80:	f7ff ff1e 	bl	10001bc0 <LL_ADC_IsEnabled>
10001d84:	4604      	mov	r4, r0
10001d86:	4867      	ldr	r0, [pc, #412]	; (10001f24 <HAL_ADC_Init+0x2a4>)
10001d88:	f7ff ff1a 	bl	10001bc0 <LL_ADC_IsEnabled>
10001d8c:	4603      	mov	r3, r0
10001d8e:	4323      	orrs	r3, r4
10001d90:	2b00      	cmp	r3, #0
10001d92:	d105      	bne.n	10001da0 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
10001d94:	687b      	ldr	r3, [r7, #4]
10001d96:	685b      	ldr	r3, [r3, #4]
10001d98:	4619      	mov	r1, r3
10001d9a:	4863      	ldr	r0, [pc, #396]	; (10001f28 <HAL_ADC_Init+0x2a8>)
10001d9c:	f7ff fd58 	bl	10001850 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
10001da0:	687b      	ldr	r3, [r7, #4]
10001da2:	7d5b      	ldrb	r3, [r3, #21]
10001da4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
10001da6:	687b      	ldr	r3, [r7, #4]
10001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
10001daa:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
10001dac:	687b      	ldr	r3, [r7, #4]
10001dae:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                     |
10001db0:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
10001db2:	687b      	ldr	r3, [r7, #4]
10001db4:	7f1b      	ldrb	r3, [r3, #28]
10001db6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
10001db8:	4313      	orrs	r3, r2
10001dba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
10001dbc:	687b      	ldr	r3, [r7, #4]
10001dbe:	7f1b      	ldrb	r3, [r3, #28]
10001dc0:	2b01      	cmp	r3, #1
10001dc2:	d106      	bne.n	10001dd2 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
10001dc4:	687b      	ldr	r3, [r7, #4]
10001dc6:	6a1b      	ldr	r3, [r3, #32]
10001dc8:	3b01      	subs	r3, #1
10001dca:	045b      	lsls	r3, r3, #17
10001dcc:	69ba      	ldr	r2, [r7, #24]
10001dce:	4313      	orrs	r3, r2
10001dd0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
10001dd2:	687b      	ldr	r3, [r7, #4]
10001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001dd6:	2b00      	cmp	r3, #0
10001dd8:	d009      	beq.n	10001dee <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
10001dda:	687b      	ldr	r3, [r7, #4]
10001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001dde:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
10001de2:	687b      	ldr	r3, [r7, #4]
10001de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001de6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
10001de8:	69ba      	ldr	r2, [r7, #24]
10001dea:	4313      	orrs	r3, r2
10001dec:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
10001dee:	687b      	ldr	r3, [r7, #4]
10001df0:	681b      	ldr	r3, [r3, #0]
10001df2:	68da      	ldr	r2, [r3, #12]
10001df4:	4b4d      	ldr	r3, [pc, #308]	; (10001f2c <HAL_ADC_Init+0x2ac>)
10001df6:	4013      	ands	r3, r2
10001df8:	687a      	ldr	r2, [r7, #4]
10001dfa:	6812      	ldr	r2, [r2, #0]
10001dfc:	69b9      	ldr	r1, [r7, #24]
10001dfe:	430b      	orrs	r3, r1
10001e00:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
10001e02:	687b      	ldr	r3, [r7, #4]
10001e04:	681b      	ldr	r3, [r3, #0]
10001e06:	4618      	mov	r0, r3
10001e08:	f7ff ff14 	bl	10001c34 <LL_ADC_REG_IsConversionOngoing>
10001e0c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
10001e0e:	687b      	ldr	r3, [r7, #4]
10001e10:	681b      	ldr	r3, [r3, #0]
10001e12:	4618      	mov	r0, r3
10001e14:	f7ff ff21 	bl	10001c5a <LL_ADC_INJ_IsConversionOngoing>
10001e18:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
10001e1a:	693b      	ldr	r3, [r7, #16]
10001e1c:	2b00      	cmp	r3, #0
10001e1e:	d14c      	bne.n	10001eba <HAL_ADC_Init+0x23a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
10001e20:	68fb      	ldr	r3, [r7, #12]
10001e22:	2b00      	cmp	r3, #0
10001e24:	d149      	bne.n	10001eba <HAL_ADC_Init+0x23a>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
10001e26:	687b      	ldr	r3, [r7, #4]
10001e28:	7d1b      	ldrb	r3, [r3, #20]
10001e2a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
10001e2c:	687b      	ldr	r3, [r7, #4]
10001e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
10001e30:	4313      	orrs	r3, r2
10001e32:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
10001e34:	687b      	ldr	r3, [r7, #4]
10001e36:	681b      	ldr	r3, [r3, #0]
10001e38:	68db      	ldr	r3, [r3, #12]
10001e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
10001e3e:	f023 0303 	bic.w	r3, r3, #3
10001e42:	687a      	ldr	r2, [r7, #4]
10001e44:	6812      	ldr	r2, [r2, #0]
10001e46:	69b9      	ldr	r1, [r7, #24]
10001e48:	430b      	orrs	r3, r1
10001e4a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
10001e4c:	687b      	ldr	r3, [r7, #4]
10001e4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
10001e52:	2b01      	cmp	r3, #1
10001e54:	d11b      	bne.n	10001e8e <HAL_ADC_Init+0x20e>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
10001e56:	687b      	ldr	r3, [r7, #4]
10001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001e5a:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
10001e5c:	687b      	ldr	r3, [r7, #4]
10001e5e:	681b      	ldr	r3, [r3, #0]
10001e60:	691a      	ldr	r2, [r3, #16]
10001e62:	4b33      	ldr	r3, [pc, #204]	; (10001f30 <HAL_ADC_Init+0x2b0>)
10001e64:	4013      	ands	r3, r2
10001e66:	687a      	ldr	r2, [r7, #4]
10001e68:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
10001e6a:	3a01      	subs	r2, #1
10001e6c:	0411      	lsls	r1, r2, #16
10001e6e:	687a      	ldr	r2, [r7, #4]
10001e70:	6c12      	ldr	r2, [r2, #64]	; 0x40
10001e72:	4311      	orrs	r1, r2
10001e74:	687a      	ldr	r2, [r7, #4]
10001e76:	6c52      	ldr	r2, [r2, #68]	; 0x44
10001e78:	4311      	orrs	r1, r2
10001e7a:	687a      	ldr	r2, [r7, #4]
10001e7c:	6c92      	ldr	r2, [r2, #72]	; 0x48
10001e7e:	430a      	orrs	r2, r1
10001e80:	431a      	orrs	r2, r3
10001e82:	687b      	ldr	r3, [r7, #4]
10001e84:	681b      	ldr	r3, [r3, #0]
10001e86:	f042 0201 	orr.w	r2, r2, #1
10001e8a:	611a      	str	r2, [r3, #16]
10001e8c:	e007      	b.n	10001e9e <HAL_ADC_Init+0x21e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
10001e8e:	687b      	ldr	r3, [r7, #4]
10001e90:	681b      	ldr	r3, [r3, #0]
10001e92:	691a      	ldr	r2, [r3, #16]
10001e94:	687b      	ldr	r3, [r7, #4]
10001e96:	681b      	ldr	r3, [r3, #0]
10001e98:	f022 0201 	bic.w	r2, r2, #1
10001e9c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
10001e9e:	687b      	ldr	r3, [r7, #4]
10001ea0:	681b      	ldr	r3, [r3, #0]
10001ea2:	691b      	ldr	r3, [r3, #16]
10001ea4:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
10001ea8:	687b      	ldr	r3, [r7, #4]
10001eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10001eac:	687b      	ldr	r3, [r7, #4]
10001eae:	681b      	ldr	r3, [r3, #0]
10001eb0:	430a      	orrs	r2, r1
10001eb2:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
10001eb4:	6878      	ldr	r0, [r7, #4]
10001eb6:	f000 fdb9 	bl	10002a2c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
10001eba:	687b      	ldr	r3, [r7, #4]
10001ebc:	68db      	ldr	r3, [r3, #12]
10001ebe:	2b01      	cmp	r3, #1
10001ec0:	d10c      	bne.n	10001edc <HAL_ADC_Init+0x25c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
10001ec2:	687b      	ldr	r3, [r7, #4]
10001ec4:	681b      	ldr	r3, [r3, #0]
10001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001ec8:	f023 010f 	bic.w	r1, r3, #15
10001ecc:	687b      	ldr	r3, [r7, #4]
10001ece:	699b      	ldr	r3, [r3, #24]
10001ed0:	1e5a      	subs	r2, r3, #1
10001ed2:	687b      	ldr	r3, [r7, #4]
10001ed4:	681b      	ldr	r3, [r3, #0]
10001ed6:	430a      	orrs	r2, r1
10001ed8:	631a      	str	r2, [r3, #48]	; 0x30
10001eda:	e007      	b.n	10001eec <HAL_ADC_Init+0x26c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
10001edc:	687b      	ldr	r3, [r7, #4]
10001ede:	681b      	ldr	r3, [r3, #0]
10001ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
10001ee2:	687b      	ldr	r3, [r7, #4]
10001ee4:	681b      	ldr	r3, [r3, #0]
10001ee6:	f022 020f 	bic.w	r2, r2, #15
10001eea:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
10001eec:	687b      	ldr	r3, [r7, #4]
10001eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001ef0:	f023 0303 	bic.w	r3, r3, #3
10001ef4:	f043 0201 	orr.w	r2, r3, #1
10001ef8:	687b      	ldr	r3, [r7, #4]
10001efa:	655a      	str	r2, [r3, #84]	; 0x54
10001efc:	e007      	b.n	10001f0e <HAL_ADC_Init+0x28e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10001efe:	687b      	ldr	r3, [r7, #4]
10001f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001f02:	f043 0210 	orr.w	r2, r3, #16
10001f06:	687b      	ldr	r3, [r7, #4]
10001f08:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
10001f0a:	2301      	movs	r3, #1
10001f0c:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
10001f0e:	7ffb      	ldrb	r3, [r7, #31]
}
10001f10:	4618      	mov	r0, r3
10001f12:	3724      	adds	r7, #36	; 0x24
10001f14:	46bd      	mov	sp, r7
10001f16:	bd90      	pop	{r4, r7, pc}
10001f18:	10020000 	.word	0x10020000
10001f1c:	053e2d63 	.word	0x053e2d63
10001f20:	48003000 	.word	0x48003000
10001f24:	48003100 	.word	0x48003100
10001f28:	48003300 	.word	0x48003300
10001f2c:	fff0c003 	.word	0xfff0c003
10001f30:	fc00f81e 	.word	0xfc00f81e

10001f34 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
10001f34:	b580      	push	{r7, lr}
10001f36:	b086      	sub	sp, #24
10001f38:	af00      	add	r7, sp, #0
10001f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
10001f3c:	4857      	ldr	r0, [pc, #348]	; (1000209c <HAL_ADC_Start+0x168>)
10001f3e:	f7ff fdad 	bl	10001a9c <LL_ADC_GetMultimode>
10001f42:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
10001f44:	687b      	ldr	r3, [r7, #4]
10001f46:	681b      	ldr	r3, [r3, #0]
10001f48:	4618      	mov	r0, r3
10001f4a:	f7ff fe73 	bl	10001c34 <LL_ADC_REG_IsConversionOngoing>
10001f4e:	4603      	mov	r3, r0
10001f50:	2b00      	cmp	r3, #0
10001f52:	f040 809c 	bne.w	1000208e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
10001f56:	687b      	ldr	r3, [r7, #4]
10001f58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
10001f5c:	2b01      	cmp	r3, #1
10001f5e:	d101      	bne.n	10001f64 <HAL_ADC_Start+0x30>
10001f60:	2302      	movs	r3, #2
10001f62:	e097      	b.n	10002094 <HAL_ADC_Start+0x160>
10001f64:	687b      	ldr	r3, [r7, #4]
10001f66:	2201      	movs	r2, #1
10001f68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
10001f6c:	6878      	ldr	r0, [r7, #4]
10001f6e:	f000 fc81 	bl	10002874 <ADC_Enable>
10001f72:	4603      	mov	r3, r0
10001f74:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
10001f76:	7dfb      	ldrb	r3, [r7, #23]
10001f78:	2b00      	cmp	r3, #0
10001f7a:	f040 8083 	bne.w	10002084 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
10001f7e:	687b      	ldr	r3, [r7, #4]
10001f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001f82:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
10001f86:	f023 0301 	bic.w	r3, r3, #1
10001f8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
10001f8e:	687b      	ldr	r3, [r7, #4]
10001f90:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
10001f92:	687b      	ldr	r3, [r7, #4]
10001f94:	681b      	ldr	r3, [r3, #0]
10001f96:	4a42      	ldr	r2, [pc, #264]	; (100020a0 <HAL_ADC_Start+0x16c>)
10001f98:	4293      	cmp	r3, r2
10001f9a:	d002      	beq.n	10001fa2 <HAL_ADC_Start+0x6e>
10001f9c:	687b      	ldr	r3, [r7, #4]
10001f9e:	681b      	ldr	r3, [r3, #0]
10001fa0:	e000      	b.n	10001fa4 <HAL_ADC_Start+0x70>
10001fa2:	4b40      	ldr	r3, [pc, #256]	; (100020a4 <HAL_ADC_Start+0x170>)
10001fa4:	687a      	ldr	r2, [r7, #4]
10001fa6:	6812      	ldr	r2, [r2, #0]
10001fa8:	4293      	cmp	r3, r2
10001faa:	d002      	beq.n	10001fb2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
10001fac:	693b      	ldr	r3, [r7, #16]
10001fae:	2b00      	cmp	r3, #0
10001fb0:	d105      	bne.n	10001fbe <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
10001fb2:	687b      	ldr	r3, [r7, #4]
10001fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001fb6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
10001fba:	687b      	ldr	r3, [r7, #4]
10001fbc:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
10001fbe:	687b      	ldr	r3, [r7, #4]
10001fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001fc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
10001fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
10001fca:	d106      	bne.n	10001fda <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
10001fcc:	687b      	ldr	r3, [r7, #4]
10001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10001fd0:	f023 0206 	bic.w	r2, r3, #6
10001fd4:	687b      	ldr	r3, [r7, #4]
10001fd6:	659a      	str	r2, [r3, #88]	; 0x58
10001fd8:	e002      	b.n	10001fe0 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
10001fda:	687b      	ldr	r3, [r7, #4]
10001fdc:	2200      	movs	r2, #0
10001fde:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
10001fe0:	687b      	ldr	r3, [r7, #4]
10001fe2:	681b      	ldr	r3, [r3, #0]
10001fe4:	221c      	movs	r2, #28
10001fe6:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
10001fe8:	687b      	ldr	r3, [r7, #4]
10001fea:	2200      	movs	r2, #0
10001fec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
10001ff0:	687b      	ldr	r3, [r7, #4]
10001ff2:	681b      	ldr	r3, [r3, #0]
10001ff4:	4a2a      	ldr	r2, [pc, #168]	; (100020a0 <HAL_ADC_Start+0x16c>)
10001ff6:	4293      	cmp	r3, r2
10001ff8:	d002      	beq.n	10002000 <HAL_ADC_Start+0xcc>
10001ffa:	687b      	ldr	r3, [r7, #4]
10001ffc:	681b      	ldr	r3, [r3, #0]
10001ffe:	e000      	b.n	10002002 <HAL_ADC_Start+0xce>
10002000:	4b28      	ldr	r3, [pc, #160]	; (100020a4 <HAL_ADC_Start+0x170>)
10002002:	687a      	ldr	r2, [r7, #4]
10002004:	6812      	ldr	r2, [r2, #0]
10002006:	4293      	cmp	r3, r2
10002008:	d008      	beq.n	1000201c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
1000200a:	693b      	ldr	r3, [r7, #16]
1000200c:	2b00      	cmp	r3, #0
1000200e:	d005      	beq.n	1000201c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
10002010:	693b      	ldr	r3, [r7, #16]
10002012:	2b05      	cmp	r3, #5
10002014:	d002      	beq.n	1000201c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
10002016:	693b      	ldr	r3, [r7, #16]
10002018:	2b09      	cmp	r3, #9
1000201a:	d114      	bne.n	10002046 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
1000201c:	687b      	ldr	r3, [r7, #4]
1000201e:	681b      	ldr	r3, [r3, #0]
10002020:	68db      	ldr	r3, [r3, #12]
10002022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
10002026:	2b00      	cmp	r3, #0
10002028:	d007      	beq.n	1000203a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
1000202a:	687b      	ldr	r3, [r7, #4]
1000202c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000202e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
10002032:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
10002036:	687b      	ldr	r3, [r7, #4]
10002038:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
1000203a:	687b      	ldr	r3, [r7, #4]
1000203c:	681b      	ldr	r3, [r3, #0]
1000203e:	4618      	mov	r0, r3
10002040:	f7ff fde4 	bl	10001c0c <LL_ADC_REG_StartConversion>
10002044:	e025      	b.n	10002092 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
10002046:	687b      	ldr	r3, [r7, #4]
10002048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000204a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
1000204e:	687b      	ldr	r3, [r7, #4]
10002050:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
10002052:	687b      	ldr	r3, [r7, #4]
10002054:	681b      	ldr	r3, [r3, #0]
10002056:	4a12      	ldr	r2, [pc, #72]	; (100020a0 <HAL_ADC_Start+0x16c>)
10002058:	4293      	cmp	r3, r2
1000205a:	d002      	beq.n	10002062 <HAL_ADC_Start+0x12e>
1000205c:	687b      	ldr	r3, [r7, #4]
1000205e:	681b      	ldr	r3, [r3, #0]
10002060:	e000      	b.n	10002064 <HAL_ADC_Start+0x130>
10002062:	4b10      	ldr	r3, [pc, #64]	; (100020a4 <HAL_ADC_Start+0x170>)
10002064:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
10002066:	68fb      	ldr	r3, [r7, #12]
10002068:	68db      	ldr	r3, [r3, #12]
1000206a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
1000206e:	2b00      	cmp	r3, #0
10002070:	d00f      	beq.n	10002092 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
10002072:	687b      	ldr	r3, [r7, #4]
10002074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002076:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
1000207a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
1000207e:	687b      	ldr	r3, [r7, #4]
10002080:	655a      	str	r2, [r3, #84]	; 0x54
10002082:	e006      	b.n	10002092 <HAL_ADC_Start+0x15e>
      LL_ADC_REG_StartConversion(hadc->Instance);
#endif
    }
    else
    {
      __HAL_UNLOCK(hadc);
10002084:	687b      	ldr	r3, [r7, #4]
10002086:	2200      	movs	r2, #0
10002088:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
1000208c:	e001      	b.n	10002092 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
1000208e:	2302      	movs	r3, #2
10002090:	75fb      	strb	r3, [r7, #23]
  }

  return tmp_hal_status;
10002092:	7dfb      	ldrb	r3, [r7, #23]
}
10002094:	4618      	mov	r0, r3
10002096:	3718      	adds	r7, #24
10002098:	46bd      	mov	sp, r7
1000209a:	bd80      	pop	{r7, pc}
1000209c:	48003300 	.word	0x48003300
100020a0:	48003100 	.word	0x48003100
100020a4:	48003000 	.word	0x48003000

100020a8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
100020a8:	b580      	push	{r7, lr}
100020aa:	b088      	sub	sp, #32
100020ac:	af00      	add	r7, sp, #0
100020ae:	6078      	str	r0, [r7, #4]
100020b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
100020b2:	4866      	ldr	r0, [pc, #408]	; (1000224c <HAL_ADC_PollForConversion+0x1a4>)
100020b4:	f7ff fcf2 	bl	10001a9c <LL_ADC_GetMultimode>
100020b8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
100020ba:	687b      	ldr	r3, [r7, #4]
100020bc:	691b      	ldr	r3, [r3, #16]
100020be:	2b08      	cmp	r3, #8
100020c0:	d102      	bne.n	100020c8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
100020c2:	2308      	movs	r3, #8
100020c4:	61fb      	str	r3, [r7, #28]
100020c6:	e02a      	b.n	1000211e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
100020c8:	697b      	ldr	r3, [r7, #20]
100020ca:	2b00      	cmp	r3, #0
100020cc:	d005      	beq.n	100020da <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
100020ce:	697b      	ldr	r3, [r7, #20]
100020d0:	2b05      	cmp	r3, #5
100020d2:	d002      	beq.n	100020da <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
100020d4:	697b      	ldr	r3, [r7, #20]
100020d6:	2b09      	cmp	r3, #9
100020d8:	d111      	bne.n	100020fe <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
100020da:	687b      	ldr	r3, [r7, #4]
100020dc:	681b      	ldr	r3, [r3, #0]
100020de:	68db      	ldr	r3, [r3, #12]
100020e0:	f003 0301 	and.w	r3, r3, #1
100020e4:	2b00      	cmp	r3, #0
100020e6:	d007      	beq.n	100020f8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
100020e8:	687b      	ldr	r3, [r7, #4]
100020ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100020ec:	f043 0220 	orr.w	r2, r3, #32
100020f0:	687b      	ldr	r3, [r7, #4]
100020f2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
100020f4:	2301      	movs	r3, #1
100020f6:	e0a4      	b.n	10002242 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
100020f8:	2304      	movs	r3, #4
100020fa:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
100020fc:	e00f      	b.n	1000211e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
100020fe:	4853      	ldr	r0, [pc, #332]	; (1000224c <HAL_ADC_PollForConversion+0x1a4>)
10002100:	f7ff fcda 	bl	10001ab8 <LL_ADC_GetMultiDMATransfer>
10002104:	4603      	mov	r3, r0
10002106:	2b00      	cmp	r3, #0
10002108:	d007      	beq.n	1000211a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1000210a:	687b      	ldr	r3, [r7, #4]
1000210c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000210e:	f043 0220 	orr.w	r2, r3, #32
10002112:	687b      	ldr	r3, [r7, #4]
10002114:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
10002116:	2301      	movs	r3, #1
10002118:	e093      	b.n	10002242 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
1000211a:	2304      	movs	r3, #4
1000211c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
1000211e:	f7ff fb19 	bl	10001754 <HAL_GetTick>
10002122:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
10002124:	e021      	b.n	1000216a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
10002126:	683b      	ldr	r3, [r7, #0]
10002128:	f1b3 3fff 	cmp.w	r3, #4294967295
1000212c:	d01d      	beq.n	1000216a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
1000212e:	f7ff fb11 	bl	10001754 <HAL_GetTick>
10002132:	4602      	mov	r2, r0
10002134:	693b      	ldr	r3, [r7, #16]
10002136:	1ad3      	subs	r3, r2, r3
10002138:	683a      	ldr	r2, [r7, #0]
1000213a:	429a      	cmp	r2, r3
1000213c:	d302      	bcc.n	10002144 <HAL_ADC_PollForConversion+0x9c>
1000213e:	683b      	ldr	r3, [r7, #0]
10002140:	2b00      	cmp	r3, #0
10002142:	d112      	bne.n	1000216a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
10002144:	687b      	ldr	r3, [r7, #4]
10002146:	681b      	ldr	r3, [r3, #0]
10002148:	681a      	ldr	r2, [r3, #0]
1000214a:	69fb      	ldr	r3, [r7, #28]
1000214c:	4013      	ands	r3, r2
1000214e:	2b00      	cmp	r3, #0
10002150:	d10b      	bne.n	1000216a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
10002152:	687b      	ldr	r3, [r7, #4]
10002154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002156:	f043 0204 	orr.w	r2, r3, #4
1000215a:	687b      	ldr	r3, [r7, #4]
1000215c:	655a      	str	r2, [r3, #84]	; 0x54

          __HAL_UNLOCK(hadc);
1000215e:	687b      	ldr	r3, [r7, #4]
10002160:	2200      	movs	r2, #0
10002162:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
10002166:	2303      	movs	r3, #3
10002168:	e06b      	b.n	10002242 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
1000216a:	687b      	ldr	r3, [r7, #4]
1000216c:	681b      	ldr	r3, [r3, #0]
1000216e:	681a      	ldr	r2, [r3, #0]
10002170:	69fb      	ldr	r3, [r7, #28]
10002172:	4013      	ands	r3, r2
10002174:	2b00      	cmp	r3, #0
10002176:	d0d6      	beq.n	10002126 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
10002178:	687b      	ldr	r3, [r7, #4]
1000217a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000217c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
10002180:	687b      	ldr	r3, [r7, #4]
10002182:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
10002184:	687b      	ldr	r3, [r7, #4]
10002186:	681b      	ldr	r3, [r3, #0]
10002188:	4618      	mov	r0, r3
1000218a:	f7ff fbf9 	bl	10001980 <LL_ADC_REG_IsTriggerSourceSWStart>
1000218e:	4603      	mov	r3, r0
10002190:	2b00      	cmp	r3, #0
10002192:	d01c      	beq.n	100021ce <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
10002194:	687b      	ldr	r3, [r7, #4]
10002196:	7d5b      	ldrb	r3, [r3, #21]
10002198:	2b00      	cmp	r3, #0
1000219a:	d118      	bne.n	100021ce <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
1000219c:	687b      	ldr	r3, [r7, #4]
1000219e:	681b      	ldr	r3, [r3, #0]
100021a0:	681b      	ldr	r3, [r3, #0]
100021a2:	f003 0308 	and.w	r3, r3, #8
100021a6:	2b08      	cmp	r3, #8
100021a8:	d111      	bne.n	100021ce <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
100021aa:	687b      	ldr	r3, [r7, #4]
100021ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100021ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
100021b2:	687b      	ldr	r3, [r7, #4]
100021b4:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
100021b6:	687b      	ldr	r3, [r7, #4]
100021b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100021ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
100021be:	2b00      	cmp	r3, #0
100021c0:	d105      	bne.n	100021ce <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
100021c2:	687b      	ldr	r3, [r7, #4]
100021c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100021c6:	f043 0201 	orr.w	r2, r3, #1
100021ca:	687b      	ldr	r3, [r7, #4]
100021cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
100021ce:	687b      	ldr	r3, [r7, #4]
100021d0:	681b      	ldr	r3, [r3, #0]
100021d2:	4a1f      	ldr	r2, [pc, #124]	; (10002250 <HAL_ADC_PollForConversion+0x1a8>)
100021d4:	4293      	cmp	r3, r2
100021d6:	d002      	beq.n	100021de <HAL_ADC_PollForConversion+0x136>
100021d8:	687b      	ldr	r3, [r7, #4]
100021da:	681b      	ldr	r3, [r3, #0]
100021dc:	e000      	b.n	100021e0 <HAL_ADC_PollForConversion+0x138>
100021de:	4b1d      	ldr	r3, [pc, #116]	; (10002254 <HAL_ADC_PollForConversion+0x1ac>)
100021e0:	687a      	ldr	r2, [r7, #4]
100021e2:	6812      	ldr	r2, [r2, #0]
100021e4:	4293      	cmp	r3, r2
100021e6:	d008      	beq.n	100021fa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
100021e8:	697b      	ldr	r3, [r7, #20]
100021ea:	2b00      	cmp	r3, #0
100021ec:	d005      	beq.n	100021fa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
100021ee:	697b      	ldr	r3, [r7, #20]
100021f0:	2b05      	cmp	r3, #5
100021f2:	d002      	beq.n	100021fa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
100021f4:	697b      	ldr	r3, [r7, #20]
100021f6:	2b09      	cmp	r3, #9
100021f8:	d104      	bne.n	10002204 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
100021fa:	687b      	ldr	r3, [r7, #4]
100021fc:	681b      	ldr	r3, [r3, #0]
100021fe:	68db      	ldr	r3, [r3, #12]
10002200:	61bb      	str	r3, [r7, #24]
10002202:	e00c      	b.n	1000221e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
10002204:	687b      	ldr	r3, [r7, #4]
10002206:	681b      	ldr	r3, [r3, #0]
10002208:	4a11      	ldr	r2, [pc, #68]	; (10002250 <HAL_ADC_PollForConversion+0x1a8>)
1000220a:	4293      	cmp	r3, r2
1000220c:	d002      	beq.n	10002214 <HAL_ADC_PollForConversion+0x16c>
1000220e:	687b      	ldr	r3, [r7, #4]
10002210:	681b      	ldr	r3, [r3, #0]
10002212:	e000      	b.n	10002216 <HAL_ADC_PollForConversion+0x16e>
10002214:	4b0f      	ldr	r3, [pc, #60]	; (10002254 <HAL_ADC_PollForConversion+0x1ac>)
10002216:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
10002218:	68fb      	ldr	r3, [r7, #12]
1000221a:	68db      	ldr	r3, [r3, #12]
1000221c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
1000221e:	69fb      	ldr	r3, [r7, #28]
10002220:	2b08      	cmp	r3, #8
10002222:	d104      	bne.n	1000222e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
10002224:	687b      	ldr	r3, [r7, #4]
10002226:	681b      	ldr	r3, [r3, #0]
10002228:	2208      	movs	r2, #8
1000222a:	601a      	str	r2, [r3, #0]
1000222c:	e008      	b.n	10002240 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
1000222e:	69bb      	ldr	r3, [r7, #24]
10002230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
10002234:	2b00      	cmp	r3, #0
10002236:	d103      	bne.n	10002240 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
10002238:	687b      	ldr	r3, [r7, #4]
1000223a:	681b      	ldr	r3, [r3, #0]
1000223c:	220c      	movs	r2, #12
1000223e:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
10002240:	2300      	movs	r3, #0
}
10002242:	4618      	mov	r0, r3
10002244:	3720      	adds	r7, #32
10002246:	46bd      	mov	sp, r7
10002248:	bd80      	pop	{r7, pc}
1000224a:	bf00      	nop
1000224c:	48003300 	.word	0x48003300
10002250:	48003100 	.word	0x48003100
10002254:	48003000 	.word	0x48003000

10002258 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
10002258:	b480      	push	{r7}
1000225a:	b083      	sub	sp, #12
1000225c:	af00      	add	r7, sp, #0
1000225e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
10002260:	687b      	ldr	r3, [r7, #4]
10002262:	681b      	ldr	r3, [r3, #0]
10002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
10002266:	4618      	mov	r0, r3
10002268:	370c      	adds	r7, #12
1000226a:	46bd      	mov	sp, r7
1000226c:	f85d 7b04 	ldr.w	r7, [sp], #4
10002270:	4770      	bx	lr
	...

10002274 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
10002274:	b590      	push	{r4, r7, lr}
10002276:	b0a1      	sub	sp, #132	; 0x84
10002278:	af00      	add	r7, sp, #0
1000227a:	6078      	str	r0, [r7, #4]
1000227c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1000227e:	2300      	movs	r3, #0
10002280:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
10002284:	2300      	movs	r3, #0
10002286:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((pConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (pConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
10002288:	683b      	ldr	r3, [r7, #0]
1000228a:	68db      	ldr	r3, [r3, #12]
1000228c:	4a9a      	ldr	r2, [pc, #616]	; (100024f8 <HAL_ADC_ConfigChannel+0x284>)
1000228e:	4293      	cmp	r3, r2
      assert_param(IS_ADC2_DIFF_CHANNEL(pConfig->Channel));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
10002290:	687b      	ldr	r3, [r7, #4]
10002292:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
10002296:	2b01      	cmp	r3, #1
10002298:	d101      	bne.n	1000229e <HAL_ADC_ConfigChannel+0x2a>
1000229a:	2302      	movs	r3, #2
1000229c:	e2d4      	b.n	10002848 <HAL_ADC_ConfigChannel+0x5d4>
1000229e:	687b      	ldr	r3, [r7, #4]
100022a0:	2201      	movs	r2, #1
100022a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
100022a6:	687b      	ldr	r3, [r7, #4]
100022a8:	681b      	ldr	r3, [r3, #0]
100022aa:	4618      	mov	r0, r3
100022ac:	f7ff fcc2 	bl	10001c34 <LL_ADC_REG_IsConversionOngoing>
100022b0:	4603      	mov	r3, r0
100022b2:	2b00      	cmp	r3, #0
100022b4:	f040 82b9 	bne.w	1000282a <HAL_ADC_ConfigChannel+0x5b6>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
100022b8:	683b      	ldr	r3, [r7, #0]
100022ba:	681b      	ldr	r3, [r3, #0]
100022bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
100022c0:	2b00      	cmp	r3, #0
100022c2:	d108      	bne.n	100022d6 <HAL_ADC_ConfigChannel+0x62>
100022c4:	683b      	ldr	r3, [r7, #0]
100022c6:	681b      	ldr	r3, [r3, #0]
100022c8:	0e9b      	lsrs	r3, r3, #26
100022ca:	f003 031f 	and.w	r3, r3, #31
100022ce:	2201      	movs	r2, #1
100022d0:	fa02 f303 	lsl.w	r3, r2, r3
100022d4:	e016      	b.n	10002304 <HAL_ADC_ConfigChannel+0x90>
100022d6:	683b      	ldr	r3, [r7, #0]
100022d8:	681b      	ldr	r3, [r3, #0]
100022da:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
100022dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
100022de:	fa93 f3a3 	rbit	r3, r3
100022e2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
100022e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
100022e6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
100022e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
100022ea:	2b00      	cmp	r3, #0
100022ec:	d101      	bne.n	100022f2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
100022ee:	2320      	movs	r3, #32
100022f0:	e003      	b.n	100022fa <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
100022f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
100022f4:	fab3 f383 	clz	r3, r3
100022f8:	b2db      	uxtb	r3, r3
100022fa:	f003 031f 	and.w	r3, r3, #31
100022fe:	2201      	movs	r2, #1
10002300:	fa02 f303 	lsl.w	r3, r2, r3
10002304:	687a      	ldr	r2, [r7, #4]
10002306:	6812      	ldr	r2, [r2, #0]
10002308:	69d1      	ldr	r1, [r2, #28]
1000230a:	687a      	ldr	r2, [r7, #4]
1000230c:	6812      	ldr	r2, [r2, #0]
1000230e:	430b      	orrs	r3, r1
10002310:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
10002312:	687b      	ldr	r3, [r7, #4]
10002314:	6818      	ldr	r0, [r3, #0]
10002316:	683b      	ldr	r3, [r7, #0]
10002318:	6859      	ldr	r1, [r3, #4]
1000231a:	683b      	ldr	r3, [r7, #0]
1000231c:	681b      	ldr	r3, [r3, #0]
1000231e:	461a      	mov	r2, r3
10002320:	f7ff fb41 	bl	100019a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
10002324:	687b      	ldr	r3, [r7, #4]
10002326:	681b      	ldr	r3, [r3, #0]
10002328:	4618      	mov	r0, r3
1000232a:	f7ff fc83 	bl	10001c34 <LL_ADC_REG_IsConversionOngoing>
1000232e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
10002330:	687b      	ldr	r3, [r7, #4]
10002332:	681b      	ldr	r3, [r3, #0]
10002334:	4618      	mov	r0, r3
10002336:	f7ff fc90 	bl	10001c5a <LL_ADC_INJ_IsConversionOngoing>
1000233a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
1000233c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
1000233e:	2b00      	cmp	r3, #0
10002340:	f040 80a0 	bne.w	10002484 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
10002344:	6f7b      	ldr	r3, [r7, #116]	; 0x74
10002346:	2b00      	cmp	r3, #0
10002348:	f040 809c 	bne.w	10002484 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
1000234c:	687b      	ldr	r3, [r7, #4]
1000234e:	6818      	ldr	r0, [r3, #0]
10002350:	683b      	ldr	r3, [r7, #0]
10002352:	6819      	ldr	r1, [r3, #0]
10002354:	683b      	ldr	r3, [r7, #0]
10002356:	689b      	ldr	r3, [r3, #8]
10002358:	461a      	mov	r2, r3
1000235a:	f7ff fb50 	bl	100019fe <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
1000235e:	687b      	ldr	r3, [r7, #4]
10002360:	681b      	ldr	r3, [r3, #0]
10002362:	68db      	ldr	r3, [r3, #12]
10002364:	f003 0310 	and.w	r3, r3, #16
10002368:	2b00      	cmp	r3, #0
1000236a:	d10b      	bne.n	10002384 <HAL_ADC_ConfigChannel+0x110>
1000236c:	683b      	ldr	r3, [r7, #0]
1000236e:	695a      	ldr	r2, [r3, #20]
10002370:	687b      	ldr	r3, [r7, #4]
10002372:	681b      	ldr	r3, [r3, #0]
10002374:	68db      	ldr	r3, [r3, #12]
10002376:	089b      	lsrs	r3, r3, #2
10002378:	f003 0307 	and.w	r3, r3, #7
1000237c:	005b      	lsls	r3, r3, #1
1000237e:	fa02 f303 	lsl.w	r3, r2, r3
10002382:	e00a      	b.n	1000239a <HAL_ADC_ConfigChannel+0x126>
10002384:	683b      	ldr	r3, [r7, #0]
10002386:	695a      	ldr	r2, [r3, #20]
10002388:	687b      	ldr	r3, [r7, #4]
1000238a:	681b      	ldr	r3, [r3, #0]
1000238c:	68db      	ldr	r3, [r3, #12]
1000238e:	089b      	lsrs	r3, r3, #2
10002390:	f003 0304 	and.w	r3, r3, #4
10002394:	005b      	lsls	r3, r3, #1
10002396:	fa02 f303 	lsl.w	r3, r2, r3
1000239a:	673b      	str	r3, [r7, #112]	; 0x70

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
1000239c:	683b      	ldr	r3, [r7, #0]
1000239e:	691b      	ldr	r3, [r3, #16]
100023a0:	2b04      	cmp	r3, #4
100023a2:	d027      	beq.n	100023f4 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
100023a4:	687b      	ldr	r3, [r7, #4]
100023a6:	6818      	ldr	r0, [r3, #0]
100023a8:	683b      	ldr	r3, [r7, #0]
100023aa:	6919      	ldr	r1, [r3, #16]
100023ac:	683b      	ldr	r3, [r7, #0]
100023ae:	681a      	ldr	r2, [r3, #0]
100023b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
100023b2:	f7ff fa91 	bl	100018d8 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber, (pConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
100023b6:	687b      	ldr	r3, [r7, #4]
100023b8:	6818      	ldr	r0, [r3, #0]
100023ba:	683b      	ldr	r3, [r7, #0]
100023bc:	6919      	ldr	r1, [r3, #16]
100023be:	683b      	ldr	r3, [r7, #0]
100023c0:	7e5b      	ldrb	r3, [r3, #25]
100023c2:	2b01      	cmp	r3, #1
100023c4:	d102      	bne.n	100023cc <HAL_ADC_ConfigChannel+0x158>
100023c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
100023ca:	e000      	b.n	100023ce <HAL_ADC_ConfigChannel+0x15a>
100023cc:	2300      	movs	r3, #0
100023ce:	461a      	mov	r2, r3
100023d0:	f7ff fabb 	bl	1000194a <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, pConfig->OffsetNumber, (pConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
100023d4:	687b      	ldr	r3, [r7, #4]
100023d6:	6818      	ldr	r0, [r3, #0]
100023d8:	683b      	ldr	r3, [r7, #0]
100023da:	6919      	ldr	r1, [r3, #16]
100023dc:	683b      	ldr	r3, [r7, #0]
100023de:	7e1b      	ldrb	r3, [r3, #24]
100023e0:	2b01      	cmp	r3, #1
100023e2:	d102      	bne.n	100023ea <HAL_ADC_ConfigChannel+0x176>
100023e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
100023e8:	e000      	b.n	100023ec <HAL_ADC_ConfigChannel+0x178>
100023ea:	2300      	movs	r3, #0
100023ec:	461a      	mov	r2, r3
100023ee:	f7ff fa93 	bl	10001918 <LL_ADC_SetDataRightShift>
100023f2:	e047      	b.n	10002484 <HAL_ADC_ConfigChannel+0x210>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
100023f4:	687b      	ldr	r3, [r7, #4]
100023f6:	681b      	ldr	r3, [r3, #0]
100023f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
100023fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
100023fe:	683b      	ldr	r3, [r7, #0]
10002400:	681b      	ldr	r3, [r3, #0]
10002402:	069b      	lsls	r3, r3, #26
10002404:	429a      	cmp	r2, r3
10002406:	d107      	bne.n	10002418 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
10002408:	687b      	ldr	r3, [r7, #4]
1000240a:	681b      	ldr	r3, [r3, #0]
1000240c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
1000240e:	687b      	ldr	r3, [r7, #4]
10002410:	681b      	ldr	r3, [r3, #0]
10002412:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
10002416:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
10002418:	687b      	ldr	r3, [r7, #4]
1000241a:	681b      	ldr	r3, [r3, #0]
1000241c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
1000241e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
10002422:	683b      	ldr	r3, [r7, #0]
10002424:	681b      	ldr	r3, [r3, #0]
10002426:	069b      	lsls	r3, r3, #26
10002428:	429a      	cmp	r2, r3
1000242a:	d107      	bne.n	1000243c <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
1000242c:	687b      	ldr	r3, [r7, #4]
1000242e:	681b      	ldr	r3, [r3, #0]
10002430:	6e5a      	ldr	r2, [r3, #100]	; 0x64
10002432:	687b      	ldr	r3, [r7, #4]
10002434:	681b      	ldr	r3, [r3, #0]
10002436:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
1000243a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
1000243c:	687b      	ldr	r3, [r7, #4]
1000243e:	681b      	ldr	r3, [r3, #0]
10002440:	6e9b      	ldr	r3, [r3, #104]	; 0x68
10002442:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
10002446:	683b      	ldr	r3, [r7, #0]
10002448:	681b      	ldr	r3, [r3, #0]
1000244a:	069b      	lsls	r3, r3, #26
1000244c:	429a      	cmp	r2, r3
1000244e:	d107      	bne.n	10002460 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
10002450:	687b      	ldr	r3, [r7, #4]
10002452:	681b      	ldr	r3, [r3, #0]
10002454:	6e9a      	ldr	r2, [r3, #104]	; 0x68
10002456:	687b      	ldr	r3, [r7, #4]
10002458:	681b      	ldr	r3, [r3, #0]
1000245a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
1000245e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
10002460:	687b      	ldr	r3, [r7, #4]
10002462:	681b      	ldr	r3, [r3, #0]
10002464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
10002466:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
1000246a:	683b      	ldr	r3, [r7, #0]
1000246c:	681b      	ldr	r3, [r3, #0]
1000246e:	069b      	lsls	r3, r3, #26
10002470:	429a      	cmp	r2, r3
10002472:	d107      	bne.n	10002484 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
10002474:	687b      	ldr	r3, [r7, #4]
10002476:	681b      	ldr	r3, [r3, #0]
10002478:	6eda      	ldr	r2, [r3, #108]	; 0x6c
1000247a:	687b      	ldr	r3, [r7, #4]
1000247c:	681b      	ldr	r3, [r3, #0]
1000247e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
10002482:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor/VddCore        */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
10002484:	687b      	ldr	r3, [r7, #4]
10002486:	681b      	ldr	r3, [r3, #0]
10002488:	4618      	mov	r0, r3
1000248a:	f7ff fb99 	bl	10001bc0 <LL_ADC_IsEnabled>
1000248e:	4603      	mov	r3, r0
10002490:	2b00      	cmp	r3, #0
10002492:	f040 81d3 	bne.w	1000283c <HAL_ADC_ConfigChannel+0x5c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
10002496:	687b      	ldr	r3, [r7, #4]
10002498:	6818      	ldr	r0, [r3, #0]
1000249a:	683b      	ldr	r3, [r7, #0]
1000249c:	6819      	ldr	r1, [r3, #0]
1000249e:	683b      	ldr	r3, [r7, #0]
100024a0:	68db      	ldr	r3, [r3, #12]
100024a2:	461a      	mov	r2, r3
100024a4:	f7ff fad6 	bl	10001a54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
100024a8:	683b      	ldr	r3, [r7, #0]
100024aa:	68db      	ldr	r3, [r3, #12]
100024ac:	4a12      	ldr	r2, [pc, #72]	; (100024f8 <HAL_ADC_ConfigChannel+0x284>)
100024ae:	4293      	cmp	r3, r2
100024b0:	f040 8130 	bne.w	10002714 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
100024b4:	687b      	ldr	r3, [r7, #4]
100024b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) + 1UL) & 0x1FUL)),
100024b8:	683b      	ldr	r3, [r7, #0]
100024ba:	681b      	ldr	r3, [r3, #0]
100024bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
100024c0:	2b00      	cmp	r3, #0
100024c2:	d10b      	bne.n	100024dc <HAL_ADC_ConfigChannel+0x268>
100024c4:	683b      	ldr	r3, [r7, #0]
100024c6:	681b      	ldr	r3, [r3, #0]
100024c8:	0e9b      	lsrs	r3, r3, #26
100024ca:	3301      	adds	r3, #1
100024cc:	f003 031f 	and.w	r3, r3, #31
100024d0:	2b09      	cmp	r3, #9
100024d2:	bf94      	ite	ls
100024d4:	2301      	movls	r3, #1
100024d6:	2300      	movhi	r3, #0
100024d8:	b2db      	uxtb	r3, r3
100024da:	e01b      	b.n	10002514 <HAL_ADC_ConfigChannel+0x2a0>
100024dc:	683b      	ldr	r3, [r7, #0]
100024de:	681b      	ldr	r3, [r3, #0]
100024e0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
100024e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
100024e4:	fa93 f3a3 	rbit	r3, r3
100024e8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
100024ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
100024ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
100024ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
100024f0:	2b00      	cmp	r3, #0
100024f2:	d103      	bne.n	100024fc <HAL_ADC_ConfigChannel+0x288>
    return 32U;
100024f4:	2320      	movs	r3, #32
100024f6:	e005      	b.n	10002504 <HAL_ADC_ConfigChannel+0x290>
100024f8:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
100024fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
100024fe:	fab3 f383 	clz	r3, r3
10002502:	b2db      	uxtb	r3, r3
10002504:	3301      	adds	r3, #1
10002506:	f003 031f 	and.w	r3, r3, #31
1000250a:	2b09      	cmp	r3, #9
1000250c:	bf94      	ite	ls
1000250e:	2301      	movls	r3, #1
10002510:	2300      	movhi	r3, #0
10002512:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
10002514:	2b00      	cmp	r3, #0
10002516:	d079      	beq.n	1000260c <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) + 1UL) & 0x1FUL)),
10002518:	683b      	ldr	r3, [r7, #0]
1000251a:	681b      	ldr	r3, [r3, #0]
1000251c:	f3c3 0313 	ubfx	r3, r3, #0, #20
10002520:	2b00      	cmp	r3, #0
10002522:	d107      	bne.n	10002534 <HAL_ADC_ConfigChannel+0x2c0>
10002524:	683b      	ldr	r3, [r7, #0]
10002526:	681b      	ldr	r3, [r3, #0]
10002528:	0e9b      	lsrs	r3, r3, #26
1000252a:	3301      	adds	r3, #1
1000252c:	069b      	lsls	r3, r3, #26
1000252e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
10002532:	e015      	b.n	10002560 <HAL_ADC_ConfigChannel+0x2ec>
10002534:	683b      	ldr	r3, [r7, #0]
10002536:	681b      	ldr	r3, [r3, #0]
10002538:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
1000253a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1000253c:	fa93 f3a3 	rbit	r3, r3
10002540:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
10002542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10002544:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
10002546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
10002548:	2b00      	cmp	r3, #0
1000254a:	d101      	bne.n	10002550 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
1000254c:	2320      	movs	r3, #32
1000254e:	e003      	b.n	10002558 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
10002550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
10002552:	fab3 f383 	clz	r3, r3
10002556:	b2db      	uxtb	r3, r3
10002558:	3301      	adds	r3, #1
1000255a:	069b      	lsls	r3, r3, #26
1000255c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
10002560:	683b      	ldr	r3, [r7, #0]
10002562:	681b      	ldr	r3, [r3, #0]
10002564:	f3c3 0313 	ubfx	r3, r3, #0, #20
10002568:	2b00      	cmp	r3, #0
1000256a:	d109      	bne.n	10002580 <HAL_ADC_ConfigChannel+0x30c>
1000256c:	683b      	ldr	r3, [r7, #0]
1000256e:	681b      	ldr	r3, [r3, #0]
10002570:	0e9b      	lsrs	r3, r3, #26
10002572:	3301      	adds	r3, #1
10002574:	f003 031f 	and.w	r3, r3, #31
10002578:	2101      	movs	r1, #1
1000257a:	fa01 f303 	lsl.w	r3, r1, r3
1000257e:	e017      	b.n	100025b0 <HAL_ADC_ConfigChannel+0x33c>
10002580:	683b      	ldr	r3, [r7, #0]
10002582:	681b      	ldr	r3, [r3, #0]
10002584:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
10002586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10002588:	fa93 f3a3 	rbit	r3, r3
1000258c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
1000258e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10002590:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
10002592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10002594:	2b00      	cmp	r3, #0
10002596:	d101      	bne.n	1000259c <HAL_ADC_ConfigChannel+0x328>
    return 32U;
10002598:	2320      	movs	r3, #32
1000259a:	e003      	b.n	100025a4 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
1000259c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000259e:	fab3 f383 	clz	r3, r3
100025a2:	b2db      	uxtb	r3, r3
100025a4:	3301      	adds	r3, #1
100025a6:	f003 031f 	and.w	r3, r3, #31
100025aa:	2101      	movs	r1, #1
100025ac:	fa01 f303 	lsl.w	r3, r1, r3
100025b0:	ea42 0103 	orr.w	r1, r2, r3
100025b4:	683b      	ldr	r3, [r7, #0]
100025b6:	681b      	ldr	r3, [r3, #0]
100025b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
100025bc:	2b00      	cmp	r3, #0
100025be:	d10a      	bne.n	100025d6 <HAL_ADC_ConfigChannel+0x362>
100025c0:	683b      	ldr	r3, [r7, #0]
100025c2:	681b      	ldr	r3, [r3, #0]
100025c4:	0e9b      	lsrs	r3, r3, #26
100025c6:	3301      	adds	r3, #1
100025c8:	f003 021f 	and.w	r2, r3, #31
100025cc:	4613      	mov	r3, r2
100025ce:	005b      	lsls	r3, r3, #1
100025d0:	4413      	add	r3, r2
100025d2:	051b      	lsls	r3, r3, #20
100025d4:	e018      	b.n	10002608 <HAL_ADC_ConfigChannel+0x394>
100025d6:	683b      	ldr	r3, [r7, #0]
100025d8:	681b      	ldr	r3, [r3, #0]
100025da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
100025dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100025de:	fa93 f3a3 	rbit	r3, r3
100025e2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
100025e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100025e6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
100025e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
100025ea:	2b00      	cmp	r3, #0
100025ec:	d101      	bne.n	100025f2 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
100025ee:	2320      	movs	r3, #32
100025f0:	e003      	b.n	100025fa <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
100025f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
100025f4:	fab3 f383 	clz	r3, r3
100025f8:	b2db      	uxtb	r3, r3
100025fa:	3301      	adds	r3, #1
100025fc:	f003 021f 	and.w	r2, r3, #31
10002600:	4613      	mov	r3, r2
10002602:	005b      	lsls	r3, r3, #1
10002604:	4413      	add	r3, r2
10002606:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
10002608:	430b      	orrs	r3, r1
1000260a:	e07e      	b.n	1000270a <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) + 1UL) & 0x1FUL)),
1000260c:	683b      	ldr	r3, [r7, #0]
1000260e:	681b      	ldr	r3, [r3, #0]
10002610:	f3c3 0313 	ubfx	r3, r3, #0, #20
10002614:	2b00      	cmp	r3, #0
10002616:	d107      	bne.n	10002628 <HAL_ADC_ConfigChannel+0x3b4>
10002618:	683b      	ldr	r3, [r7, #0]
1000261a:	681b      	ldr	r3, [r3, #0]
1000261c:	0e9b      	lsrs	r3, r3, #26
1000261e:	3301      	adds	r3, #1
10002620:	069b      	lsls	r3, r3, #26
10002622:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
10002626:	e015      	b.n	10002654 <HAL_ADC_ConfigChannel+0x3e0>
10002628:	683b      	ldr	r3, [r7, #0]
1000262a:	681b      	ldr	r3, [r3, #0]
1000262c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
1000262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002630:	fa93 f3a3 	rbit	r3, r3
10002634:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
10002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10002638:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
1000263a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000263c:	2b00      	cmp	r3, #0
1000263e:	d101      	bne.n	10002644 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
10002640:	2320      	movs	r3, #32
10002642:	e003      	b.n	1000264c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
10002644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10002646:	fab3 f383 	clz	r3, r3
1000264a:	b2db      	uxtb	r3, r3
1000264c:	3301      	adds	r3, #1
1000264e:	069b      	lsls	r3, r3, #26
10002650:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
10002654:	683b      	ldr	r3, [r7, #0]
10002656:	681b      	ldr	r3, [r3, #0]
10002658:	f3c3 0313 	ubfx	r3, r3, #0, #20
1000265c:	2b00      	cmp	r3, #0
1000265e:	d109      	bne.n	10002674 <HAL_ADC_ConfigChannel+0x400>
10002660:	683b      	ldr	r3, [r7, #0]
10002662:	681b      	ldr	r3, [r3, #0]
10002664:	0e9b      	lsrs	r3, r3, #26
10002666:	3301      	adds	r3, #1
10002668:	f003 031f 	and.w	r3, r3, #31
1000266c:	2101      	movs	r1, #1
1000266e:	fa01 f303 	lsl.w	r3, r1, r3
10002672:	e017      	b.n	100026a4 <HAL_ADC_ConfigChannel+0x430>
10002674:	683b      	ldr	r3, [r7, #0]
10002676:	681b      	ldr	r3, [r3, #0]
10002678:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
1000267a:	69fb      	ldr	r3, [r7, #28]
1000267c:	fa93 f3a3 	rbit	r3, r3
10002680:	61bb      	str	r3, [r7, #24]
  return result;
10002682:	69bb      	ldr	r3, [r7, #24]
10002684:	623b      	str	r3, [r7, #32]
  if (value == 0U)
10002686:	6a3b      	ldr	r3, [r7, #32]
10002688:	2b00      	cmp	r3, #0
1000268a:	d101      	bne.n	10002690 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
1000268c:	2320      	movs	r3, #32
1000268e:	e003      	b.n	10002698 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
10002690:	6a3b      	ldr	r3, [r7, #32]
10002692:	fab3 f383 	clz	r3, r3
10002696:	b2db      	uxtb	r3, r3
10002698:	3301      	adds	r3, #1
1000269a:	f003 031f 	and.w	r3, r3, #31
1000269e:	2101      	movs	r1, #1
100026a0:	fa01 f303 	lsl.w	r3, r1, r3
100026a4:	ea42 0103 	orr.w	r1, r2, r3
100026a8:	683b      	ldr	r3, [r7, #0]
100026aa:	681b      	ldr	r3, [r3, #0]
100026ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
100026b0:	2b00      	cmp	r3, #0
100026b2:	d10d      	bne.n	100026d0 <HAL_ADC_ConfigChannel+0x45c>
100026b4:	683b      	ldr	r3, [r7, #0]
100026b6:	681b      	ldr	r3, [r3, #0]
100026b8:	0e9b      	lsrs	r3, r3, #26
100026ba:	3301      	adds	r3, #1
100026bc:	f003 021f 	and.w	r2, r3, #31
100026c0:	4613      	mov	r3, r2
100026c2:	005b      	lsls	r3, r3, #1
100026c4:	4413      	add	r3, r2
100026c6:	3b1e      	subs	r3, #30
100026c8:	051b      	lsls	r3, r3, #20
100026ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
100026ce:	e01b      	b.n	10002708 <HAL_ADC_ConfigChannel+0x494>
100026d0:	683b      	ldr	r3, [r7, #0]
100026d2:	681b      	ldr	r3, [r3, #0]
100026d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
100026d6:	693b      	ldr	r3, [r7, #16]
100026d8:	fa93 f3a3 	rbit	r3, r3
100026dc:	60fb      	str	r3, [r7, #12]
  return result;
100026de:	68fb      	ldr	r3, [r7, #12]
100026e0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
100026e2:	697b      	ldr	r3, [r7, #20]
100026e4:	2b00      	cmp	r3, #0
100026e6:	d101      	bne.n	100026ec <HAL_ADC_ConfigChannel+0x478>
    return 32U;
100026e8:	2320      	movs	r3, #32
100026ea:	e003      	b.n	100026f4 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
100026ec:	697b      	ldr	r3, [r7, #20]
100026ee:	fab3 f383 	clz	r3, r3
100026f2:	b2db      	uxtb	r3, r3
100026f4:	3301      	adds	r3, #1
100026f6:	f003 021f 	and.w	r2, r3, #31
100026fa:	4613      	mov	r3, r2
100026fc:	005b      	lsls	r3, r3, #1
100026fe:	4413      	add	r3, r2
10002700:	3b1e      	subs	r3, #30
10002702:	051b      	lsls	r3, r3, #20
10002704:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
10002708:	430b      	orrs	r3, r1
1000270a:	683a      	ldr	r2, [r7, #0]
1000270c:	6892      	ldr	r2, [r2, #8]
1000270e:	4619      	mov	r1, r3
10002710:	f7ff f975 	bl	100019fe <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
10002714:	683b      	ldr	r3, [r7, #0]
10002716:	681b      	ldr	r3, [r3, #0]
10002718:	2b00      	cmp	r3, #0
1000271a:	f280 808f 	bge.w	1000283c <HAL_ADC_ConfigChannel+0x5c8>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
1000271e:	484c      	ldr	r0, [pc, #304]	; (10002850 <HAL_ADC_ConfigChannel+0x5dc>)
10002720:	f7ff f8cc 	bl	100018bc <LL_ADC_GetCommonPathInternalCh>
10002724:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
10002726:	484b      	ldr	r0, [pc, #300]	; (10002854 <HAL_ADC_ConfigChannel+0x5e0>)
10002728:	f7ff fa4a 	bl	10001bc0 <LL_ADC_IsEnabled>
1000272c:	4604      	mov	r4, r0
1000272e:	484a      	ldr	r0, [pc, #296]	; (10002858 <HAL_ADC_ConfigChannel+0x5e4>)
10002730:	f7ff fa46 	bl	10001bc0 <LL_ADC_IsEnabled>
10002734:	4603      	mov	r3, r0
10002736:	4323      	orrs	r3, r4
10002738:	2b00      	cmp	r3, #0
1000273a:	d16c      	bne.n	10002816 <HAL_ADC_ConfigChannel+0x5a2>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
1000273c:	683b      	ldr	r3, [r7, #0]
1000273e:	681b      	ldr	r3, [r3, #0]
10002740:	4a46      	ldr	r2, [pc, #280]	; (1000285c <HAL_ADC_ConfigChannel+0x5e8>)
10002742:	4293      	cmp	r3, r2
10002744:	d122      	bne.n	1000278c <HAL_ADC_ConfigChannel+0x518>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
10002746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10002748:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
1000274c:	2b00      	cmp	r3, #0
1000274e:	d11d      	bne.n	1000278c <HAL_ADC_ConfigChannel+0x518>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
10002750:	687b      	ldr	r3, [r7, #4]
10002752:	681b      	ldr	r3, [r3, #0]
10002754:	4a40      	ldr	r2, [pc, #256]	; (10002858 <HAL_ADC_ConfigChannel+0x5e4>)
10002756:	4293      	cmp	r3, r2
10002758:	d170      	bne.n	1000283c <HAL_ADC_ConfigChannel+0x5c8>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
1000275a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000275c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
10002760:	4619      	mov	r1, r3
10002762:	483b      	ldr	r0, [pc, #236]	; (10002850 <HAL_ADC_ConfigChannel+0x5dc>)
10002764:	f7ff f888 	bl	10001878 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
10002768:	4b3d      	ldr	r3, [pc, #244]	; (10002860 <HAL_ADC_ConfigChannel+0x5ec>)
1000276a:	681b      	ldr	r3, [r3, #0]
1000276c:	099b      	lsrs	r3, r3, #6
1000276e:	4a3d      	ldr	r2, [pc, #244]	; (10002864 <HAL_ADC_ConfigChannel+0x5f0>)
10002770:	fba2 2303 	umull	r2, r3, r2, r3
10002774:	099b      	lsrs	r3, r3, #6
10002776:	3301      	adds	r3, #1
10002778:	005b      	lsls	r3, r3, #1
1000277a:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
1000277c:	e002      	b.n	10002784 <HAL_ADC_ConfigChannel+0x510>
              {
                wait_loop_index--;
1000277e:	68bb      	ldr	r3, [r7, #8]
10002780:	3b01      	subs	r3, #1
10002782:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
10002784:	68bb      	ldr	r3, [r7, #8]
10002786:	2b00      	cmp	r3, #0
10002788:	d1f9      	bne.n	1000277e <HAL_ADC_ConfigChannel+0x50a>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
1000278a:	e057      	b.n	1000283c <HAL_ADC_ConfigChannel+0x5c8>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
1000278c:	683b      	ldr	r3, [r7, #0]
1000278e:	681b      	ldr	r3, [r3, #0]
10002790:	4a35      	ldr	r2, [pc, #212]	; (10002868 <HAL_ADC_ConfigChannel+0x5f4>)
10002792:	4293      	cmp	r3, r2
10002794:	d111      	bne.n	100027ba <HAL_ADC_ConfigChannel+0x546>
10002796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10002798:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
1000279c:	2b00      	cmp	r3, #0
1000279e:	d10c      	bne.n	100027ba <HAL_ADC_ConfigChannel+0x546>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
100027a0:	687b      	ldr	r3, [r7, #4]
100027a2:	681b      	ldr	r3, [r3, #0]
100027a4:	4a2c      	ldr	r2, [pc, #176]	; (10002858 <HAL_ADC_ConfigChannel+0x5e4>)
100027a6:	4293      	cmp	r3, r2
100027a8:	d148      	bne.n	1000283c <HAL_ADC_ConfigChannel+0x5c8>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
100027aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
100027ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
100027b0:	4619      	mov	r1, r3
100027b2:	4827      	ldr	r0, [pc, #156]	; (10002850 <HAL_ADC_ConfigChannel+0x5dc>)
100027b4:	f7ff f860 	bl	10001878 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
100027b8:	e040      	b.n	1000283c <HAL_ADC_ConfigChannel+0x5c8>
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
100027ba:	683b      	ldr	r3, [r7, #0]
100027bc:	681b      	ldr	r3, [r3, #0]
100027be:	4a2b      	ldr	r2, [pc, #172]	; (1000286c <HAL_ADC_ConfigChannel+0x5f8>)
100027c0:	4293      	cmp	r3, r2
100027c2:	d111      	bne.n	100027e8 <HAL_ADC_ConfigChannel+0x574>
100027c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
100027c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
100027ca:	2b00      	cmp	r3, #0
100027cc:	d10c      	bne.n	100027e8 <HAL_ADC_ConfigChannel+0x574>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
100027ce:	687b      	ldr	r3, [r7, #4]
100027d0:	681b      	ldr	r3, [r3, #0]
100027d2:	4a21      	ldr	r2, [pc, #132]	; (10002858 <HAL_ADC_ConfigChannel+0x5e4>)
100027d4:	4293      	cmp	r3, r2
100027d6:	d131      	bne.n	1000283c <HAL_ADC_ConfigChannel+0x5c8>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
100027d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
100027da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
100027de:	4619      	mov	r1, r3
100027e0:	481b      	ldr	r0, [pc, #108]	; (10002850 <HAL_ADC_ConfigChannel+0x5dc>)
100027e2:	f7ff f849 	bl	10001878 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_VREFINT_INSTANCE(hadc))
100027e6:	e029      	b.n	1000283c <HAL_ADC_ConfigChannel+0x5c8>
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VDDCORE) == 0UL))
100027e8:	683b      	ldr	r3, [r7, #0]
100027ea:	681b      	ldr	r3, [r3, #0]
100027ec:	4a20      	ldr	r2, [pc, #128]	; (10002870 <HAL_ADC_ConfigChannel+0x5fc>)
100027ee:	4293      	cmp	r3, r2
100027f0:	d124      	bne.n	1000283c <HAL_ADC_ConfigChannel+0x5c8>
100027f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
100027f4:	f003 0301 	and.w	r3, r3, #1
100027f8:	2b00      	cmp	r3, #0
100027fa:	d11f      	bne.n	1000283c <HAL_ADC_ConfigChannel+0x5c8>
          {
            if (ADC_VDDCORE_INSTANCE(hadc))
100027fc:	687b      	ldr	r3, [r7, #4]
100027fe:	681b      	ldr	r3, [r3, #0]
10002800:	4a15      	ldr	r2, [pc, #84]	; (10002858 <HAL_ADC_ConfigChannel+0x5e4>)
10002802:	4293      	cmp	r3, r2
10002804:	d11a      	bne.n	1000283c <HAL_ADC_ConfigChannel+0x5c8>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VDDCORE | tmp_config_internal_channel);
10002806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10002808:	f043 0301 	orr.w	r3, r3, #1
1000280c:	4619      	mov	r1, r3
1000280e:	4810      	ldr	r0, [pc, #64]	; (10002850 <HAL_ADC_ConfigChannel+0x5dc>)
10002810:	f7ff f832 	bl	10001878 <LL_ADC_SetCommonPathInternalCh>
10002814:	e012      	b.n	1000283c <HAL_ADC_ConfigChannel+0x5c8>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
10002816:	687b      	ldr	r3, [r7, #4]
10002818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000281a:	f043 0220 	orr.w	r2, r3, #32
1000281e:	687b      	ldr	r3, [r7, #4]
10002820:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
10002822:	2301      	movs	r3, #1
10002824:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
10002828:	e008      	b.n	1000283c <HAL_ADC_ConfigChannel+0x5c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1000282a:	687b      	ldr	r3, [r7, #4]
1000282c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000282e:	f043 0220 	orr.w	r2, r3, #32
10002832:	687b      	ldr	r3, [r7, #4]
10002834:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
10002836:	2301      	movs	r3, #1
10002838:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  __HAL_UNLOCK(hadc);
1000283c:	687b      	ldr	r3, [r7, #4]
1000283e:	2200      	movs	r2, #0
10002840:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return tmp_hal_status;
10002844:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
10002848:	4618      	mov	r0, r3
1000284a:	3784      	adds	r7, #132	; 0x84
1000284c:	46bd      	mov	sp, r7
1000284e:	bd90      	pop	{r4, r7, pc}
10002850:	48003300 	.word	0x48003300
10002854:	48003000 	.word	0x48003000
10002858:	48003100 	.word	0x48003100
1000285c:	b2601000 	.word	0xb2601000
10002860:	10020000 	.word	0x10020000
10002864:	053e2d63 	.word	0x053e2d63
10002868:	bef08000 	.word	0xbef08000
1000286c:	b6902000 	.word	0xb6902000
10002870:	bac04000 	.word	0xbac04000

10002874 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
10002874:	b580      	push	{r7, lr}
10002876:	b084      	sub	sp, #16
10002878:	af00      	add	r7, sp, #0
1000287a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
1000287c:	687b      	ldr	r3, [r7, #4]
1000287e:	681b      	ldr	r3, [r3, #0]
10002880:	4618      	mov	r0, r3
10002882:	f7ff f99d 	bl	10001bc0 <LL_ADC_IsEnabled>
10002886:	4603      	mov	r3, r0
10002888:	2b00      	cmp	r3, #0
1000288a:	d161      	bne.n	10002950 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
1000288c:	687b      	ldr	r3, [r7, #4]
1000288e:	681b      	ldr	r3, [r3, #0]
10002890:	689a      	ldr	r2, [r3, #8]
10002892:	4b32      	ldr	r3, [pc, #200]	; (1000295c <ADC_Enable+0xe8>)
10002894:	4013      	ands	r3, r2
10002896:	2b00      	cmp	r3, #0
10002898:	d00d      	beq.n	100028b6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1000289a:	687b      	ldr	r3, [r7, #4]
1000289c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000289e:	f043 0210 	orr.w	r2, r3, #16
100028a2:	687b      	ldr	r3, [r7, #4]
100028a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
100028a6:	687b      	ldr	r3, [r7, #4]
100028a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
100028aa:	f043 0201 	orr.w	r2, r3, #1
100028ae:	687b      	ldr	r3, [r7, #4]
100028b0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
100028b2:	2301      	movs	r3, #1
100028b4:	e04d      	b.n	10002952 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
100028b6:	687b      	ldr	r3, [r7, #4]
100028b8:	681b      	ldr	r3, [r3, #0]
100028ba:	4618      	mov	r0, r3
100028bc:	f7ff f958 	bl	10001b70 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
100028c0:	f7fe ff48 	bl	10001754 <HAL_GetTick>
100028c4:	60f8      	str	r0, [r7, #12]

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
100028c6:	4826      	ldr	r0, [pc, #152]	; (10002960 <ADC_Enable+0xec>)
100028c8:	f7ff f8e8 	bl	10001a9c <LL_ADC_GetMultimode>
100028cc:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
100028ce:	687b      	ldr	r3, [r7, #4]
100028d0:	681b      	ldr	r3, [r3, #0]
100028d2:	4a24      	ldr	r2, [pc, #144]	; (10002964 <ADC_Enable+0xf0>)
100028d4:	4293      	cmp	r3, r2
100028d6:	d002      	beq.n	100028de <ADC_Enable+0x6a>
100028d8:	687b      	ldr	r3, [r7, #4]
100028da:	681b      	ldr	r3, [r3, #0]
100028dc:	e000      	b.n	100028e0 <ADC_Enable+0x6c>
100028de:	4b22      	ldr	r3, [pc, #136]	; (10002968 <ADC_Enable+0xf4>)
100028e0:	687a      	ldr	r2, [r7, #4]
100028e2:	6812      	ldr	r2, [r2, #0]
100028e4:	4293      	cmp	r3, r2
100028e6:	d02c      	beq.n	10002942 <ADC_Enable+0xce>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
100028e8:	68bb      	ldr	r3, [r7, #8]
100028ea:	2b00      	cmp	r3, #0
100028ec:	d130      	bne.n	10002950 <ADC_Enable+0xdc>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
100028ee:	e028      	b.n	10002942 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
100028f0:	687b      	ldr	r3, [r7, #4]
100028f2:	681b      	ldr	r3, [r3, #0]
100028f4:	4618      	mov	r0, r3
100028f6:	f7ff f963 	bl	10001bc0 <LL_ADC_IsEnabled>
100028fa:	4603      	mov	r3, r0
100028fc:	2b00      	cmp	r3, #0
100028fe:	d104      	bne.n	1000290a <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
10002900:	687b      	ldr	r3, [r7, #4]
10002902:	681b      	ldr	r3, [r3, #0]
10002904:	4618      	mov	r0, r3
10002906:	f7ff f933 	bl	10001b70 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
1000290a:	f7fe ff23 	bl	10001754 <HAL_GetTick>
1000290e:	4602      	mov	r2, r0
10002910:	68fb      	ldr	r3, [r7, #12]
10002912:	1ad3      	subs	r3, r2, r3
10002914:	2b02      	cmp	r3, #2
10002916:	d914      	bls.n	10002942 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
10002918:	687b      	ldr	r3, [r7, #4]
1000291a:	681b      	ldr	r3, [r3, #0]
1000291c:	681b      	ldr	r3, [r3, #0]
1000291e:	f003 0301 	and.w	r3, r3, #1
10002922:	2b01      	cmp	r3, #1
10002924:	d00d      	beq.n	10002942 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10002926:	687b      	ldr	r3, [r7, #4]
10002928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000292a:	f043 0210 	orr.w	r2, r3, #16
1000292e:	687b      	ldr	r3, [r7, #4]
10002930:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
10002932:	687b      	ldr	r3, [r7, #4]
10002934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10002936:	f043 0201 	orr.w	r2, r3, #1
1000293a:	687b      	ldr	r3, [r7, #4]
1000293c:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
1000293e:	2301      	movs	r3, #1
10002940:	e007      	b.n	10002952 <ADC_Enable+0xde>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
10002942:	687b      	ldr	r3, [r7, #4]
10002944:	681b      	ldr	r3, [r3, #0]
10002946:	681b      	ldr	r3, [r3, #0]
10002948:	f003 0301 	and.w	r3, r3, #1
1000294c:	2b01      	cmp	r3, #1
1000294e:	d1cf      	bne.n	100028f0 <ADC_Enable+0x7c>
    }
#endif
  }

  /* Return HAL status */
  return HAL_OK;
10002950:	2300      	movs	r3, #0
}
10002952:	4618      	mov	r0, r3
10002954:	3710      	adds	r7, #16
10002956:	46bd      	mov	sp, r7
10002958:	bd80      	pop	{r7, pc}
1000295a:	bf00      	nop
1000295c:	8000003f 	.word	0x8000003f
10002960:	48003300 	.word	0x48003300
10002964:	48003100 	.word	0x48003100
10002968:	48003000 	.word	0x48003000

1000296c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
1000296c:	b580      	push	{r7, lr}
1000296e:	b084      	sub	sp, #16
10002970:	af00      	add	r7, sp, #0
10002972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
10002974:	687b      	ldr	r3, [r7, #4]
10002976:	681b      	ldr	r3, [r3, #0]
10002978:	4618      	mov	r0, r3
1000297a:	f7ff f934 	bl	10001be6 <LL_ADC_IsDisableOngoing>
1000297e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
10002980:	687b      	ldr	r3, [r7, #4]
10002982:	681b      	ldr	r3, [r3, #0]
10002984:	4618      	mov	r0, r3
10002986:	f7ff f91b 	bl	10001bc0 <LL_ADC_IsEnabled>
1000298a:	4603      	mov	r3, r0
1000298c:	2b00      	cmp	r3, #0
1000298e:	d047      	beq.n	10002a20 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
10002990:	68fb      	ldr	r3, [r7, #12]
10002992:	2b00      	cmp	r3, #0
10002994:	d144      	bne.n	10002a20 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
10002996:	687b      	ldr	r3, [r7, #4]
10002998:	681b      	ldr	r3, [r3, #0]
1000299a:	689b      	ldr	r3, [r3, #8]
1000299c:	f003 030d 	and.w	r3, r3, #13
100029a0:	2b01      	cmp	r3, #1
100029a2:	d10c      	bne.n	100029be <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
100029a4:	687b      	ldr	r3, [r7, #4]
100029a6:	681b      	ldr	r3, [r3, #0]
100029a8:	4618      	mov	r0, r3
100029aa:	f7ff f8f5 	bl	10001b98 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
100029ae:	687b      	ldr	r3, [r7, #4]
100029b0:	681b      	ldr	r3, [r3, #0]
100029b2:	2203      	movs	r2, #3
100029b4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
100029b6:	f7fe fecd 	bl	10001754 <HAL_GetTick>
100029ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
100029bc:	e029      	b.n	10002a12 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
100029be:	687b      	ldr	r3, [r7, #4]
100029c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100029c2:	f043 0210 	orr.w	r2, r3, #16
100029c6:	687b      	ldr	r3, [r7, #4]
100029c8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
100029ca:	687b      	ldr	r3, [r7, #4]
100029cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
100029ce:	f043 0201 	orr.w	r2, r3, #1
100029d2:	687b      	ldr	r3, [r7, #4]
100029d4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
100029d6:	2301      	movs	r3, #1
100029d8:	e023      	b.n	10002a22 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
100029da:	f7fe febb 	bl	10001754 <HAL_GetTick>
100029de:	4602      	mov	r2, r0
100029e0:	68bb      	ldr	r3, [r7, #8]
100029e2:	1ad3      	subs	r3, r2, r3
100029e4:	2b02      	cmp	r3, #2
100029e6:	d914      	bls.n	10002a12 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
100029e8:	687b      	ldr	r3, [r7, #4]
100029ea:	681b      	ldr	r3, [r3, #0]
100029ec:	689b      	ldr	r3, [r3, #8]
100029ee:	f003 0301 	and.w	r3, r3, #1
100029f2:	2b00      	cmp	r3, #0
100029f4:	d00d      	beq.n	10002a12 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
100029f6:	687b      	ldr	r3, [r7, #4]
100029f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100029fa:	f043 0210 	orr.w	r2, r3, #16
100029fe:	687b      	ldr	r3, [r7, #4]
10002a00:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
10002a02:	687b      	ldr	r3, [r7, #4]
10002a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10002a06:	f043 0201 	orr.w	r2, r3, #1
10002a0a:	687b      	ldr	r3, [r7, #4]
10002a0c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
10002a0e:	2301      	movs	r3, #1
10002a10:	e007      	b.n	10002a22 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
10002a12:	687b      	ldr	r3, [r7, #4]
10002a14:	681b      	ldr	r3, [r3, #0]
10002a16:	689b      	ldr	r3, [r3, #8]
10002a18:	f003 0301 	and.w	r3, r3, #1
10002a1c:	2b00      	cmp	r3, #0
10002a1e:	d1dc      	bne.n	100029da <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
10002a20:	2300      	movs	r3, #0
}
10002a22:	4618      	mov	r0, r3
10002a24:	3710      	adds	r7, #16
10002a26:	46bd      	mov	sp, r7
10002a28:	bd80      	pop	{r7, pc}
	...

10002a2c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
10002a2c:	b580      	push	{r7, lr}
10002a2e:	b084      	sub	sp, #16
10002a30:	af00      	add	r7, sp, #0
10002a32:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
10002a34:	687b      	ldr	r3, [r7, #4]
10002a36:	681b      	ldr	r3, [r3, #0]
10002a38:	4a53      	ldr	r2, [pc, #332]	; (10002b88 <ADC_ConfigureBoostMode+0x15c>)
10002a3a:	4293      	cmp	r3, r2
10002a3c:	d004      	beq.n	10002a48 <ADC_ConfigureBoostMode+0x1c>
10002a3e:	687b      	ldr	r3, [r7, #4]
10002a40:	681b      	ldr	r3, [r3, #0]
10002a42:	4a52      	ldr	r2, [pc, #328]	; (10002b8c <ADC_ConfigureBoostMode+0x160>)
10002a44:	4293      	cmp	r3, r2
10002a46:	d124      	bne.n	10002a92 <ADC_ConfigureBoostMode+0x66>
10002a48:	4b51      	ldr	r3, [pc, #324]	; (10002b90 <ADC_ConfigureBoostMode+0x164>)
10002a4a:	689b      	ldr	r3, [r3, #8]
10002a4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
10002a50:	2b00      	cmp	r3, #0
10002a52:	d01e      	beq.n	10002a92 <ADC_ConfigureBoostMode+0x66>
  {
    freq = HAL_RCC_GetHCLK2Freq();
10002a54:	f002 fae5 	bl	10005022 <HAL_RCC_GetHCLK2Freq>
10002a58:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
10002a5a:	687b      	ldr	r3, [r7, #4]
10002a5c:	685b      	ldr	r3, [r3, #4]
10002a5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
10002a62:	d010      	beq.n	10002a86 <ADC_ConfigureBoostMode+0x5a>
10002a64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
10002a68:	d811      	bhi.n	10002a8e <ADC_ConfigureBoostMode+0x62>
10002a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
10002a6e:	d002      	beq.n	10002a76 <ADC_ConfigureBoostMode+0x4a>
10002a70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
10002a74:	d10b      	bne.n	10002a8e <ADC_ConfigureBoostMode+0x62>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
10002a76:	687b      	ldr	r3, [r7, #4]
10002a78:	685b      	ldr	r3, [r3, #4]
10002a7a:	0c1b      	lsrs	r3, r3, #16
10002a7c:	68fa      	ldr	r2, [r7, #12]
10002a7e:	fbb2 f3f3 	udiv	r3, r2, r3
10002a82:	60fb      	str	r3, [r7, #12]
        break;
10002a84:	e004      	b.n	10002a90 <ADC_ConfigureBoostMode+0x64>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
10002a86:	68fb      	ldr	r3, [r7, #12]
10002a88:	089b      	lsrs	r3, r3, #2
10002a8a:	60fb      	str	r3, [r7, #12]
        break;
10002a8c:	e000      	b.n	10002a90 <ADC_ConfigureBoostMode+0x64>
      default:
        break;
10002a8e:	bf00      	nop
    switch(hadc->Init.ClockPrescaler)
10002a90:	e062      	b.n	10002b58 <ADC_ConfigureBoostMode+0x12c>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
10002a92:	f04f 0008 	mov.w	r0, #8
10002a96:	f04f 0100 	mov.w	r1, #0
10002a9a:	f004 fe8f 	bl	100077bc <HAL_RCCEx_GetPeriphCLKFreq>
10002a9e:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
10002aa0:	687b      	ldr	r3, [r7, #4]
10002aa2:	685b      	ldr	r3, [r3, #4]
10002aa4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
10002aa8:	d051      	beq.n	10002b4e <ADC_ConfigureBoostMode+0x122>
10002aaa:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
10002aae:	d852      	bhi.n	10002b56 <ADC_ConfigureBoostMode+0x12a>
10002ab0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
10002ab4:	d047      	beq.n	10002b46 <ADC_ConfigureBoostMode+0x11a>
10002ab6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
10002aba:	d84c      	bhi.n	10002b56 <ADC_ConfigureBoostMode+0x12a>
10002abc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
10002ac0:	d03d      	beq.n	10002b3e <ADC_ConfigureBoostMode+0x112>
10002ac2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
10002ac6:	d846      	bhi.n	10002b56 <ADC_ConfigureBoostMode+0x12a>
10002ac8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
10002acc:	d033      	beq.n	10002b36 <ADC_ConfigureBoostMode+0x10a>
10002ace:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
10002ad2:	d840      	bhi.n	10002b56 <ADC_ConfigureBoostMode+0x12a>
10002ad4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
10002ad8:	d029      	beq.n	10002b2e <ADC_ConfigureBoostMode+0x102>
10002ada:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
10002ade:	d83a      	bhi.n	10002b56 <ADC_ConfigureBoostMode+0x12a>
10002ae0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
10002ae4:	d01a      	beq.n	10002b1c <ADC_ConfigureBoostMode+0xf0>
10002ae6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
10002aea:	d834      	bhi.n	10002b56 <ADC_ConfigureBoostMode+0x12a>
10002aec:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
10002af0:	d014      	beq.n	10002b1c <ADC_ConfigureBoostMode+0xf0>
10002af2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
10002af6:	d82e      	bhi.n	10002b56 <ADC_ConfigureBoostMode+0x12a>
10002af8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
10002afc:	d00e      	beq.n	10002b1c <ADC_ConfigureBoostMode+0xf0>
10002afe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
10002b02:	d828      	bhi.n	10002b56 <ADC_ConfigureBoostMode+0x12a>
10002b04:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
10002b08:	d008      	beq.n	10002b1c <ADC_ConfigureBoostMode+0xf0>
10002b0a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
10002b0e:	d822      	bhi.n	10002b56 <ADC_ConfigureBoostMode+0x12a>
10002b10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
10002b14:	d002      	beq.n	10002b1c <ADC_ConfigureBoostMode+0xf0>
10002b16:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
10002b1a:	d11c      	bne.n	10002b56 <ADC_ConfigureBoostMode+0x12a>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
10002b1c:	687b      	ldr	r3, [r7, #4]
10002b1e:	685b      	ldr	r3, [r3, #4]
10002b20:	0c9b      	lsrs	r3, r3, #18
10002b22:	005b      	lsls	r3, r3, #1
10002b24:	68fa      	ldr	r2, [r7, #12]
10002b26:	fbb2 f3f3 	udiv	r3, r2, r3
10002b2a:	60fb      	str	r3, [r7, #12]
        break;
10002b2c:	e014      	b.n	10002b58 <ADC_ConfigureBoostMode+0x12c>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
10002b2e:	68fb      	ldr	r3, [r7, #12]
10002b30:	091b      	lsrs	r3, r3, #4
10002b32:	60fb      	str	r3, [r7, #12]
      break;
10002b34:	e010      	b.n	10002b58 <ADC_ConfigureBoostMode+0x12c>
        case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
10002b36:	68fb      	ldr	r3, [r7, #12]
10002b38:	095b      	lsrs	r3, r3, #5
10002b3a:	60fb      	str	r3, [r7, #12]
        break;
10002b3c:	e00c      	b.n	10002b58 <ADC_ConfigureBoostMode+0x12c>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
10002b3e:	68fb      	ldr	r3, [r7, #12]
10002b40:	099b      	lsrs	r3, r3, #6
10002b42:	60fb      	str	r3, [r7, #12]
        break;
10002b44:	e008      	b.n	10002b58 <ADC_ConfigureBoostMode+0x12c>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
10002b46:	68fb      	ldr	r3, [r7, #12]
10002b48:	09db      	lsrs	r3, r3, #7
10002b4a:	60fb      	str	r3, [r7, #12]
        break;
10002b4c:	e004      	b.n	10002b58 <ADC_ConfigureBoostMode+0x12c>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
10002b4e:	68fb      	ldr	r3, [r7, #12]
10002b50:	0a1b      	lsrs	r3, r3, #8
10002b52:	60fb      	str	r3, [r7, #12]
        break;
10002b54:	e000      	b.n	10002b58 <ADC_ConfigureBoostMode+0x12c>
      default:
        break;
10002b56:	bf00      	nop
    }
  }

  if (freq > 20000000UL)
10002b58:	68fb      	ldr	r3, [r7, #12]
10002b5a:	4a0e      	ldr	r2, [pc, #56]	; (10002b94 <ADC_ConfigureBoostMode+0x168>)
10002b5c:	4293      	cmp	r3, r2
10002b5e:	d908      	bls.n	10002b72 <ADC_ConfigureBoostMode+0x146>
  {
    SET_BIT(hadc->Instance->CR, ADC_CR_BOOST);
10002b60:	687b      	ldr	r3, [r7, #4]
10002b62:	681b      	ldr	r3, [r3, #0]
10002b64:	689a      	ldr	r2, [r3, #8]
10002b66:	687b      	ldr	r3, [r7, #4]
10002b68:	681b      	ldr	r3, [r3, #0]
10002b6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
10002b6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    CLEAR_BIT(hadc->Instance->CR, 0);
  }
}
10002b70:	e005      	b.n	10002b7e <ADC_ConfigureBoostMode+0x152>
    CLEAR_BIT(hadc->Instance->CR, 0);
10002b72:	687b      	ldr	r3, [r7, #4]
10002b74:	681a      	ldr	r2, [r3, #0]
10002b76:	687b      	ldr	r3, [r7, #4]
10002b78:	681b      	ldr	r3, [r3, #0]
10002b7a:	6892      	ldr	r2, [r2, #8]
10002b7c:	609a      	str	r2, [r3, #8]
}
10002b7e:	bf00      	nop
10002b80:	3710      	adds	r7, #16
10002b82:	46bd      	mov	sp, r7
10002b84:	bd80      	pop	{r7, pc}
10002b86:	bf00      	nop
10002b88:	48003000 	.word	0x48003000
10002b8c:	48003100 	.word	0x48003100
10002b90:	48003300 	.word	0x48003300
10002b94:	01312d00 	.word	0x01312d00

10002b98 <LL_ADC_StartCalibration>:
{
10002b98:	b480      	push	{r7}
10002b9a:	b085      	sub	sp, #20
10002b9c:	af00      	add	r7, sp, #0
10002b9e:	60f8      	str	r0, [r7, #12]
10002ba0:	60b9      	str	r1, [r7, #8]
10002ba2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
10002ba4:	68fb      	ldr	r3, [r7, #12]
10002ba6:	689a      	ldr	r2, [r3, #8]
10002ba8:	4b09      	ldr	r3, [pc, #36]	; (10002bd0 <LL_ADC_StartCalibration+0x38>)
10002baa:	4013      	ands	r3, r2
10002bac:	68ba      	ldr	r2, [r7, #8]
10002bae:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
10002bb2:	687a      	ldr	r2, [r7, #4]
10002bb4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
10002bb8:	430a      	orrs	r2, r1
10002bba:	4313      	orrs	r3, r2
10002bbc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
10002bc0:	68fb      	ldr	r3, [r7, #12]
10002bc2:	609a      	str	r2, [r3, #8]
}
10002bc4:	bf00      	nop
10002bc6:	3714      	adds	r7, #20
10002bc8:	46bd      	mov	sp, r7
10002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
10002bce:	4770      	bx	lr
10002bd0:	3ffeffc0 	.word	0x3ffeffc0

10002bd4 <LL_ADC_IsCalibrationOnGoing>:
{
10002bd4:	b480      	push	{r7}
10002bd6:	b083      	sub	sp, #12
10002bd8:	af00      	add	r7, sp, #0
10002bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
10002bdc:	687b      	ldr	r3, [r7, #4]
10002bde:	689b      	ldr	r3, [r3, #8]
10002be0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002be4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002be8:	d101      	bne.n	10002bee <LL_ADC_IsCalibrationOnGoing+0x1a>
10002bea:	2301      	movs	r3, #1
10002bec:	e000      	b.n	10002bf0 <LL_ADC_IsCalibrationOnGoing+0x1c>
10002bee:	2300      	movs	r3, #0
}
10002bf0:	4618      	mov	r0, r3
10002bf2:	370c      	adds	r7, #12
10002bf4:	46bd      	mov	sp, r7
10002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
10002bfa:	4770      	bx	lr

10002bfc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
10002bfc:	b580      	push	{r7, lr}
10002bfe:	b086      	sub	sp, #24
10002c00:	af00      	add	r7, sp, #0
10002c02:	60f8      	str	r0, [r7, #12]
10002c04:	60b9      	str	r1, [r7, #8]
10002c06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
10002c08:	2300      	movs	r3, #0
10002c0a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
10002c0c:	68fb      	ldr	r3, [r7, #12]
10002c0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
10002c12:	2b01      	cmp	r3, #1
10002c14:	d101      	bne.n	10002c1a <HAL_ADCEx_Calibration_Start+0x1e>
10002c16:	2302      	movs	r3, #2
10002c18:	e04e      	b.n	10002cb8 <HAL_ADCEx_Calibration_Start+0xbc>
10002c1a:	68fb      	ldr	r3, [r7, #12]
10002c1c:	2201      	movs	r2, #1
10002c1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
10002c22:	68f8      	ldr	r0, [r7, #12]
10002c24:	f7ff fea2 	bl	1000296c <ADC_Disable>
10002c28:	4603      	mov	r3, r0
10002c2a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
10002c2c:	7dfb      	ldrb	r3, [r7, #23]
10002c2e:	2b00      	cmp	r3, #0
10002c30:	d137      	bne.n	10002ca2 <HAL_ADCEx_Calibration_Start+0xa6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
10002c32:	68fb      	ldr	r3, [r7, #12]
10002c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002c36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
10002c3a:	f023 0302 	bic.w	r3, r3, #2
10002c3e:	f043 0202 	orr.w	r2, r3, #2
10002c42:	68fb      	ldr	r3, [r7, #12]
10002c44:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance , CalibrationMode, SingleDiff );
10002c46:	68fb      	ldr	r3, [r7, #12]
10002c48:	681b      	ldr	r3, [r3, #0]
10002c4a:	687a      	ldr	r2, [r7, #4]
10002c4c:	68b9      	ldr	r1, [r7, #8]
10002c4e:	4618      	mov	r0, r3
10002c50:	f7ff ffa2 	bl	10002b98 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
10002c54:	e014      	b.n	10002c80 <HAL_ADCEx_Calibration_Start+0x84>
    {
      wait_loop_index++;
10002c56:	693b      	ldr	r3, [r7, #16]
10002c58:	3301      	adds	r3, #1
10002c5a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
10002c5c:	693b      	ldr	r3, [r7, #16]
10002c5e:	4a18      	ldr	r2, [pc, #96]	; (10002cc0 <HAL_ADCEx_Calibration_Start+0xc4>)
10002c60:	4293      	cmp	r3, r2
10002c62:	d90d      	bls.n	10002c80 <HAL_ADCEx_Calibration_Start+0x84>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
10002c64:	68fb      	ldr	r3, [r7, #12]
10002c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002c68:	f023 0312 	bic.w	r3, r3, #18
10002c6c:	f043 0210 	orr.w	r2, r3, #16
10002c70:	68fb      	ldr	r3, [r7, #12]
10002c72:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
10002c74:	68fb      	ldr	r3, [r7, #12]
10002c76:	2200      	movs	r2, #0
10002c78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
10002c7c:	2301      	movs	r3, #1
10002c7e:	e01b      	b.n	10002cb8 <HAL_ADCEx_Calibration_Start+0xbc>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
10002c80:	68fb      	ldr	r3, [r7, #12]
10002c82:	681b      	ldr	r3, [r3, #0]
10002c84:	4618      	mov	r0, r3
10002c86:	f7ff ffa5 	bl	10002bd4 <LL_ADC_IsCalibrationOnGoing>
10002c8a:	4603      	mov	r3, r0
10002c8c:	2b00      	cmp	r3, #0
10002c8e:	d1e2      	bne.n	10002c56 <HAL_ADCEx_Calibration_Start+0x5a>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
10002c90:	68fb      	ldr	r3, [r7, #12]
10002c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002c94:	f023 0303 	bic.w	r3, r3, #3
10002c98:	f043 0201 	orr.w	r2, r3, #1
10002c9c:	68fb      	ldr	r3, [r7, #12]
10002c9e:	655a      	str	r2, [r3, #84]	; 0x54
10002ca0:	e005      	b.n	10002cae <HAL_ADCEx_Calibration_Start+0xb2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10002ca2:	68fb      	ldr	r3, [r7, #12]
10002ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002ca6:	f043 0210 	orr.w	r2, r3, #16
10002caa:	68fb      	ldr	r3, [r7, #12]
10002cac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
10002cae:	68fb      	ldr	r3, [r7, #12]
10002cb0:	2200      	movs	r2, #0
10002cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return tmp_hal_status;
10002cb6:	7dfb      	ldrb	r3, [r7, #23]
}
10002cb8:	4618      	mov	r0, r3
10002cba:	3718      	adds	r7, #24
10002cbc:	46bd      	mov	sp, r7
10002cbe:	bd80      	pop	{r7, pc}
10002cc0:	32021fbf 	.word	0x32021fbf

10002cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10002cc4:	b480      	push	{r7}
10002cc6:	b085      	sub	sp, #20
10002cc8:	af00      	add	r7, sp, #0
10002cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
10002ccc:	687b      	ldr	r3, [r7, #4]
10002cce:	f003 0307 	and.w	r3, r3, #7
10002cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
10002cd4:	4b0c      	ldr	r3, [pc, #48]	; (10002d08 <__NVIC_SetPriorityGrouping+0x44>)
10002cd6:	68db      	ldr	r3, [r3, #12]
10002cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
10002cda:	68ba      	ldr	r2, [r7, #8]
10002cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
10002ce0:	4013      	ands	r3, r2
10002ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
10002ce4:	68fb      	ldr	r3, [r7, #12]
10002ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10002ce8:	68bb      	ldr	r3, [r7, #8]
10002cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
10002cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
10002cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
10002cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
10002cf6:	4a04      	ldr	r2, [pc, #16]	; (10002d08 <__NVIC_SetPriorityGrouping+0x44>)
10002cf8:	68bb      	ldr	r3, [r7, #8]
10002cfa:	60d3      	str	r3, [r2, #12]
}
10002cfc:	bf00      	nop
10002cfe:	3714      	adds	r7, #20
10002d00:	46bd      	mov	sp, r7
10002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
10002d06:	4770      	bx	lr
10002d08:	e000ed00 	.word	0xe000ed00

10002d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
10002d0c:	b480      	push	{r7}
10002d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
10002d10:	4b04      	ldr	r3, [pc, #16]	; (10002d24 <__NVIC_GetPriorityGrouping+0x18>)
10002d12:	68db      	ldr	r3, [r3, #12]
10002d14:	0a1b      	lsrs	r3, r3, #8
10002d16:	f003 0307 	and.w	r3, r3, #7
}
10002d1a:	4618      	mov	r0, r3
10002d1c:	46bd      	mov	sp, r7
10002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
10002d22:	4770      	bx	lr
10002d24:	e000ed00 	.word	0xe000ed00

10002d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10002d28:	b480      	push	{r7}
10002d2a:	b083      	sub	sp, #12
10002d2c:	af00      	add	r7, sp, #0
10002d2e:	4603      	mov	r3, r0
10002d30:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10002d32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10002d36:	2b00      	cmp	r3, #0
10002d38:	db0b      	blt.n	10002d52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002d3a:	88fb      	ldrh	r3, [r7, #6]
10002d3c:	f003 021f 	and.w	r2, r3, #31
10002d40:	4907      	ldr	r1, [pc, #28]	; (10002d60 <__NVIC_EnableIRQ+0x38>)
10002d42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10002d46:	095b      	lsrs	r3, r3, #5
10002d48:	2001      	movs	r0, #1
10002d4a:	fa00 f202 	lsl.w	r2, r0, r2
10002d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
10002d52:	bf00      	nop
10002d54:	370c      	adds	r7, #12
10002d56:	46bd      	mov	sp, r7
10002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
10002d5c:	4770      	bx	lr
10002d5e:	bf00      	nop
10002d60:	e000e100 	.word	0xe000e100

10002d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10002d64:	b480      	push	{r7}
10002d66:	b083      	sub	sp, #12
10002d68:	af00      	add	r7, sp, #0
10002d6a:	4603      	mov	r3, r0
10002d6c:	6039      	str	r1, [r7, #0]
10002d6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10002d70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10002d74:	2b00      	cmp	r3, #0
10002d76:	db0a      	blt.n	10002d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10002d78:	683b      	ldr	r3, [r7, #0]
10002d7a:	b2da      	uxtb	r2, r3
10002d7c:	490c      	ldr	r1, [pc, #48]	; (10002db0 <__NVIC_SetPriority+0x4c>)
10002d7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10002d82:	0112      	lsls	r2, r2, #4
10002d84:	b2d2      	uxtb	r2, r2
10002d86:	440b      	add	r3, r1
10002d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
10002d8c:	e00a      	b.n	10002da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10002d8e:	683b      	ldr	r3, [r7, #0]
10002d90:	b2da      	uxtb	r2, r3
10002d92:	4908      	ldr	r1, [pc, #32]	; (10002db4 <__NVIC_SetPriority+0x50>)
10002d94:	88fb      	ldrh	r3, [r7, #6]
10002d96:	f003 030f 	and.w	r3, r3, #15
10002d9a:	3b04      	subs	r3, #4
10002d9c:	0112      	lsls	r2, r2, #4
10002d9e:	b2d2      	uxtb	r2, r2
10002da0:	440b      	add	r3, r1
10002da2:	761a      	strb	r2, [r3, #24]
}
10002da4:	bf00      	nop
10002da6:	370c      	adds	r7, #12
10002da8:	46bd      	mov	sp, r7
10002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
10002dae:	4770      	bx	lr
10002db0:	e000e100 	.word	0xe000e100
10002db4:	e000ed00 	.word	0xe000ed00

10002db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
10002db8:	b480      	push	{r7}
10002dba:	b089      	sub	sp, #36	; 0x24
10002dbc:	af00      	add	r7, sp, #0
10002dbe:	60f8      	str	r0, [r7, #12]
10002dc0:	60b9      	str	r1, [r7, #8]
10002dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
10002dc4:	68fb      	ldr	r3, [r7, #12]
10002dc6:	f003 0307 	and.w	r3, r3, #7
10002dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
10002dcc:	69fb      	ldr	r3, [r7, #28]
10002dce:	f1c3 0307 	rsb	r3, r3, #7
10002dd2:	2b04      	cmp	r3, #4
10002dd4:	bf28      	it	cs
10002dd6:	2304      	movcs	r3, #4
10002dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
10002dda:	69fb      	ldr	r3, [r7, #28]
10002ddc:	3304      	adds	r3, #4
10002dde:	2b06      	cmp	r3, #6
10002de0:	d902      	bls.n	10002de8 <NVIC_EncodePriority+0x30>
10002de2:	69fb      	ldr	r3, [r7, #28]
10002de4:	3b03      	subs	r3, #3
10002de6:	e000      	b.n	10002dea <NVIC_EncodePriority+0x32>
10002de8:	2300      	movs	r3, #0
10002dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10002dec:	f04f 32ff 	mov.w	r2, #4294967295
10002df0:	69bb      	ldr	r3, [r7, #24]
10002df2:	fa02 f303 	lsl.w	r3, r2, r3
10002df6:	43da      	mvns	r2, r3
10002df8:	68bb      	ldr	r3, [r7, #8]
10002dfa:	401a      	ands	r2, r3
10002dfc:	697b      	ldr	r3, [r7, #20]
10002dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
10002e00:	f04f 31ff 	mov.w	r1, #4294967295
10002e04:	697b      	ldr	r3, [r7, #20]
10002e06:	fa01 f303 	lsl.w	r3, r1, r3
10002e0a:	43d9      	mvns	r1, r3
10002e0c:	687b      	ldr	r3, [r7, #4]
10002e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10002e10:	4313      	orrs	r3, r2
         );
}
10002e12:	4618      	mov	r0, r3
10002e14:	3724      	adds	r7, #36	; 0x24
10002e16:	46bd      	mov	sp, r7
10002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
10002e1c:	4770      	bx	lr
	...

10002e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10002e20:	b580      	push	{r7, lr}
10002e22:	b082      	sub	sp, #8
10002e24:	af00      	add	r7, sp, #0
10002e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10002e28:	687b      	ldr	r3, [r7, #4]
10002e2a:	3b01      	subs	r3, #1
10002e2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
10002e30:	d301      	bcc.n	10002e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
10002e32:	2301      	movs	r3, #1
10002e34:	e00f      	b.n	10002e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10002e36:	4a0a      	ldr	r2, [pc, #40]	; (10002e60 <SysTick_Config+0x40>)
10002e38:	687b      	ldr	r3, [r7, #4]
10002e3a:	3b01      	subs	r3, #1
10002e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10002e3e:	210f      	movs	r1, #15
10002e40:	f04f 30ff 	mov.w	r0, #4294967295
10002e44:	f7ff ff8e 	bl	10002d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10002e48:	4b05      	ldr	r3, [pc, #20]	; (10002e60 <SysTick_Config+0x40>)
10002e4a:	2200      	movs	r2, #0
10002e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10002e4e:	4b04      	ldr	r3, [pc, #16]	; (10002e60 <SysTick_Config+0x40>)
10002e50:	2207      	movs	r2, #7
10002e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10002e54:	2300      	movs	r3, #0
}
10002e56:	4618      	mov	r0, r3
10002e58:	3708      	adds	r7, #8
10002e5a:	46bd      	mov	sp, r7
10002e5c:	bd80      	pop	{r7, pc}
10002e5e:	bf00      	nop
10002e60:	e000e010 	.word	0xe000e010

10002e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10002e64:	b580      	push	{r7, lr}
10002e66:	b082      	sub	sp, #8
10002e68:	af00      	add	r7, sp, #0
10002e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
10002e6c:	6878      	ldr	r0, [r7, #4]
10002e6e:	f7ff ff29 	bl	10002cc4 <__NVIC_SetPriorityGrouping>
}
10002e72:	bf00      	nop
10002e74:	3708      	adds	r7, #8
10002e76:	46bd      	mov	sp, r7
10002e78:	bd80      	pop	{r7, pc}

10002e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10002e7a:	b580      	push	{r7, lr}
10002e7c:	b086      	sub	sp, #24
10002e7e:	af00      	add	r7, sp, #0
10002e80:	4603      	mov	r3, r0
10002e82:	60b9      	str	r1, [r7, #8]
10002e84:	607a      	str	r2, [r7, #4]
10002e86:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
10002e88:	2300      	movs	r3, #0
10002e8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
10002e8c:	f7ff ff3e 	bl	10002d0c <__NVIC_GetPriorityGrouping>
10002e90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
10002e92:	687a      	ldr	r2, [r7, #4]
10002e94:	68b9      	ldr	r1, [r7, #8]
10002e96:	6978      	ldr	r0, [r7, #20]
10002e98:	f7ff ff8e 	bl	10002db8 <NVIC_EncodePriority>
10002e9c:	4602      	mov	r2, r0
10002e9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
10002ea2:	4611      	mov	r1, r2
10002ea4:	4618      	mov	r0, r3
10002ea6:	f7ff ff5d 	bl	10002d64 <__NVIC_SetPriority>
}
10002eaa:	bf00      	nop
10002eac:	3718      	adds	r7, #24
10002eae:	46bd      	mov	sp, r7
10002eb0:	bd80      	pop	{r7, pc}

10002eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10002eb2:	b580      	push	{r7, lr}
10002eb4:	b082      	sub	sp, #8
10002eb6:	af00      	add	r7, sp, #0
10002eb8:	4603      	mov	r3, r0
10002eba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10002ebc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10002ec0:	4618      	mov	r0, r3
10002ec2:	f7ff ff31 	bl	10002d28 <__NVIC_EnableIRQ>
}
10002ec6:	bf00      	nop
10002ec8:	3708      	adds	r7, #8
10002eca:	46bd      	mov	sp, r7
10002ecc:	bd80      	pop	{r7, pc}

10002ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10002ece:	b580      	push	{r7, lr}
10002ed0:	b082      	sub	sp, #8
10002ed2:	af00      	add	r7, sp, #0
10002ed4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10002ed6:	6878      	ldr	r0, [r7, #4]
10002ed8:	f7ff ffa2 	bl	10002e20 <SysTick_Config>
10002edc:	4603      	mov	r3, r0
}
10002ede:	4618      	mov	r0, r3
10002ee0:	3708      	adds	r7, #8
10002ee2:	46bd      	mov	sp, r7
10002ee4:	bd80      	pop	{r7, pc}
	...

10002ee8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
10002ee8:	b580      	push	{r7, lr}
10002eea:	b082      	sub	sp, #8
10002eec:	af00      	add	r7, sp, #0
10002eee:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
10002ef0:	687b      	ldr	r3, [r7, #4]
10002ef2:	2b00      	cmp	r3, #0
10002ef4:	d101      	bne.n	10002efa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
10002ef6:	2301      	movs	r3, #1
10002ef8:	e054      	b.n	10002fa4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
10002efa:	687b      	ldr	r3, [r7, #4]
10002efc:	7f5b      	ldrb	r3, [r3, #29]
10002efe:	b2db      	uxtb	r3, r3
10002f00:	2b00      	cmp	r3, #0
10002f02:	d105      	bne.n	10002f10 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
10002f04:	687b      	ldr	r3, [r7, #4]
10002f06:	2200      	movs	r2, #0
10002f08:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
10002f0a:	6878      	ldr	r0, [r7, #4]
10002f0c:	f7fe fa82 	bl	10001414 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
10002f10:	687b      	ldr	r3, [r7, #4]
10002f12:	2202      	movs	r2, #2
10002f14:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
10002f16:	687b      	ldr	r3, [r7, #4]
10002f18:	791b      	ldrb	r3, [r3, #4]
10002f1a:	2b00      	cmp	r3, #0
10002f1c:	d10c      	bne.n	10002f38 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
10002f1e:	687b      	ldr	r3, [r7, #4]
10002f20:	681b      	ldr	r3, [r3, #0]
10002f22:	4a22      	ldr	r2, [pc, #136]	; (10002fac <HAL_CRC_Init+0xc4>)
10002f24:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
10002f26:	687b      	ldr	r3, [r7, #4]
10002f28:	681b      	ldr	r3, [r3, #0]
10002f2a:	689a      	ldr	r2, [r3, #8]
10002f2c:	687b      	ldr	r3, [r7, #4]
10002f2e:	681b      	ldr	r3, [r3, #0]
10002f30:	f022 0218 	bic.w	r2, r2, #24
10002f34:	609a      	str	r2, [r3, #8]
10002f36:	e00c      	b.n	10002f52 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
10002f38:	687b      	ldr	r3, [r7, #4]
10002f3a:	6899      	ldr	r1, [r3, #8]
10002f3c:	687b      	ldr	r3, [r7, #4]
10002f3e:	68db      	ldr	r3, [r3, #12]
10002f40:	461a      	mov	r2, r3
10002f42:	6878      	ldr	r0, [r7, #4]
10002f44:	f000 f834 	bl	10002fb0 <HAL_CRCEx_Polynomial_Set>
10002f48:	4603      	mov	r3, r0
10002f4a:	2b00      	cmp	r3, #0
10002f4c:	d001      	beq.n	10002f52 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
10002f4e:	2301      	movs	r3, #1
10002f50:	e028      	b.n	10002fa4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
10002f52:	687b      	ldr	r3, [r7, #4]
10002f54:	795b      	ldrb	r3, [r3, #5]
10002f56:	2b00      	cmp	r3, #0
10002f58:	d105      	bne.n	10002f66 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
10002f5a:	687b      	ldr	r3, [r7, #4]
10002f5c:	681b      	ldr	r3, [r3, #0]
10002f5e:	f04f 32ff 	mov.w	r2, #4294967295
10002f62:	611a      	str	r2, [r3, #16]
10002f64:	e004      	b.n	10002f70 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
10002f66:	687b      	ldr	r3, [r7, #4]
10002f68:	681b      	ldr	r3, [r3, #0]
10002f6a:	687a      	ldr	r2, [r7, #4]
10002f6c:	6912      	ldr	r2, [r2, #16]
10002f6e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
10002f70:	687b      	ldr	r3, [r7, #4]
10002f72:	681b      	ldr	r3, [r3, #0]
10002f74:	689b      	ldr	r3, [r3, #8]
10002f76:	f023 0160 	bic.w	r1, r3, #96	; 0x60
10002f7a:	687b      	ldr	r3, [r7, #4]
10002f7c:	695a      	ldr	r2, [r3, #20]
10002f7e:	687b      	ldr	r3, [r7, #4]
10002f80:	681b      	ldr	r3, [r3, #0]
10002f82:	430a      	orrs	r2, r1
10002f84:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
10002f86:	687b      	ldr	r3, [r7, #4]
10002f88:	681b      	ldr	r3, [r3, #0]
10002f8a:	689b      	ldr	r3, [r3, #8]
10002f8c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
10002f90:	687b      	ldr	r3, [r7, #4]
10002f92:	699a      	ldr	r2, [r3, #24]
10002f94:	687b      	ldr	r3, [r7, #4]
10002f96:	681b      	ldr	r3, [r3, #0]
10002f98:	430a      	orrs	r2, r1
10002f9a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
10002f9c:	687b      	ldr	r3, [r7, #4]
10002f9e:	2201      	movs	r2, #1
10002fa0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
10002fa2:	2300      	movs	r3, #0
}
10002fa4:	4618      	mov	r0, r3
10002fa6:	3708      	adds	r7, #8
10002fa8:	46bd      	mov	sp, r7
10002faa:	bd80      	pop	{r7, pc}
10002fac:	04c11db7 	.word	0x04c11db7

10002fb0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
10002fb0:	b480      	push	{r7}
10002fb2:	b087      	sub	sp, #28
10002fb4:	af00      	add	r7, sp, #0
10002fb6:	60f8      	str	r0, [r7, #12]
10002fb8:	60b9      	str	r1, [r7, #8]
10002fba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
10002fbc:	2300      	movs	r3, #0
10002fbe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
10002fc0:	231f      	movs	r3, #31
10002fc2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
10002fc4:	bf00      	nop
10002fc6:	693b      	ldr	r3, [r7, #16]
10002fc8:	1e5a      	subs	r2, r3, #1
10002fca:	613a      	str	r2, [r7, #16]
10002fcc:	2b00      	cmp	r3, #0
10002fce:	d009      	beq.n	10002fe4 <HAL_CRCEx_Polynomial_Set+0x34>
10002fd0:	693b      	ldr	r3, [r7, #16]
10002fd2:	f003 031f 	and.w	r3, r3, #31
10002fd6:	68ba      	ldr	r2, [r7, #8]
10002fd8:	fa22 f303 	lsr.w	r3, r2, r3
10002fdc:	f003 0301 	and.w	r3, r3, #1
10002fe0:	2b00      	cmp	r3, #0
10002fe2:	d0f0      	beq.n	10002fc6 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
10002fe4:	687b      	ldr	r3, [r7, #4]
10002fe6:	2b18      	cmp	r3, #24
10002fe8:	d846      	bhi.n	10003078 <HAL_CRCEx_Polynomial_Set+0xc8>
10002fea:	a201      	add	r2, pc, #4	; (adr r2, 10002ff0 <HAL_CRCEx_Polynomial_Set+0x40>)
10002fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10002ff0:	1000307f 	.word	0x1000307f
10002ff4:	10003079 	.word	0x10003079
10002ff8:	10003079 	.word	0x10003079
10002ffc:	10003079 	.word	0x10003079
10003000:	10003079 	.word	0x10003079
10003004:	10003079 	.word	0x10003079
10003008:	10003079 	.word	0x10003079
1000300c:	10003079 	.word	0x10003079
10003010:	1000306d 	.word	0x1000306d
10003014:	10003079 	.word	0x10003079
10003018:	10003079 	.word	0x10003079
1000301c:	10003079 	.word	0x10003079
10003020:	10003079 	.word	0x10003079
10003024:	10003079 	.word	0x10003079
10003028:	10003079 	.word	0x10003079
1000302c:	10003079 	.word	0x10003079
10003030:	10003061 	.word	0x10003061
10003034:	10003079 	.word	0x10003079
10003038:	10003079 	.word	0x10003079
1000303c:	10003079 	.word	0x10003079
10003040:	10003079 	.word	0x10003079
10003044:	10003079 	.word	0x10003079
10003048:	10003079 	.word	0x10003079
1000304c:	10003079 	.word	0x10003079
10003050:	10003055 	.word	0x10003055
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
10003054:	693b      	ldr	r3, [r7, #16]
10003056:	2b06      	cmp	r3, #6
10003058:	d913      	bls.n	10003082 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
1000305a:	2301      	movs	r3, #1
1000305c:	75fb      	strb	r3, [r7, #23]
      }
      break;
1000305e:	e010      	b.n	10003082 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
10003060:	693b      	ldr	r3, [r7, #16]
10003062:	2b07      	cmp	r3, #7
10003064:	d90f      	bls.n	10003086 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
10003066:	2301      	movs	r3, #1
10003068:	75fb      	strb	r3, [r7, #23]
      }
      break;
1000306a:	e00c      	b.n	10003086 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
1000306c:	693b      	ldr	r3, [r7, #16]
1000306e:	2b0f      	cmp	r3, #15
10003070:	d90b      	bls.n	1000308a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
10003072:	2301      	movs	r3, #1
10003074:	75fb      	strb	r3, [r7, #23]
      }
      break;
10003076:	e008      	b.n	1000308a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
10003078:	2301      	movs	r3, #1
1000307a:	75fb      	strb	r3, [r7, #23]
      break;
1000307c:	e006      	b.n	1000308c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
1000307e:	bf00      	nop
10003080:	e004      	b.n	1000308c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
10003082:	bf00      	nop
10003084:	e002      	b.n	1000308c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
10003086:	bf00      	nop
10003088:	e000      	b.n	1000308c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
1000308a:	bf00      	nop
  }
  if (status == HAL_OK)
1000308c:	7dfb      	ldrb	r3, [r7, #23]
1000308e:	2b00      	cmp	r3, #0
10003090:	d10d      	bne.n	100030ae <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
10003092:	68fb      	ldr	r3, [r7, #12]
10003094:	681b      	ldr	r3, [r3, #0]
10003096:	68ba      	ldr	r2, [r7, #8]
10003098:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
1000309a:	68fb      	ldr	r3, [r7, #12]
1000309c:	681b      	ldr	r3, [r3, #0]
1000309e:	689b      	ldr	r3, [r3, #8]
100030a0:	f023 0118 	bic.w	r1, r3, #24
100030a4:	68fb      	ldr	r3, [r7, #12]
100030a6:	681b      	ldr	r3, [r3, #0]
100030a8:	687a      	ldr	r2, [r7, #4]
100030aa:	430a      	orrs	r2, r1
100030ac:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
100030ae:	7dfb      	ldrb	r3, [r7, #23]
}
100030b0:	4618      	mov	r0, r3
100030b2:	371c      	adds	r7, #28
100030b4:	46bd      	mov	sp, r7
100030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
100030ba:	4770      	bx	lr

100030bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
100030bc:	b480      	push	{r7}
100030be:	b089      	sub	sp, #36	; 0x24
100030c0:	af00      	add	r7, sp, #0
100030c2:	6078      	str	r0, [r7, #4]
100030c4:	6039      	str	r1, [r7, #0]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef * EXTI_CurrentCPU;

#if defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_C2; /* EXTI for CM4 CPU */
100030c6:	4b8a      	ldr	r3, [pc, #552]	; (100032f0 <HAL_GPIO_Init+0x234>)
100030c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
100030ca:	2300      	movs	r3, #0
100030cc:	61fb      	str	r3, [r7, #28]
100030ce:	e191      	b.n	100033f4 <HAL_GPIO_Init+0x338>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
100030d0:	2201      	movs	r2, #1
100030d2:	69fb      	ldr	r3, [r7, #28]
100030d4:	fa02 f303 	lsl.w	r3, r2, r3
100030d8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
100030da:	683b      	ldr	r3, [r7, #0]
100030dc:	681b      	ldr	r3, [r3, #0]
100030de:	693a      	ldr	r2, [r7, #16]
100030e0:	4013      	ands	r3, r2
100030e2:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
100030e4:	68fa      	ldr	r2, [r7, #12]
100030e6:	693b      	ldr	r3, [r7, #16]
100030e8:	429a      	cmp	r2, r3
100030ea:	f040 8180 	bne.w	100033ee <HAL_GPIO_Init+0x332>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
100030ee:	683b      	ldr	r3, [r7, #0]
100030f0:	685b      	ldr	r3, [r3, #4]
100030f2:	2b02      	cmp	r3, #2
100030f4:	d003      	beq.n	100030fe <HAL_GPIO_Init+0x42>
100030f6:	683b      	ldr	r3, [r7, #0]
100030f8:	685b      	ldr	r3, [r3, #4]
100030fa:	2b12      	cmp	r3, #18
100030fc:	d123      	bne.n	10003146 <HAL_GPIO_Init+0x8a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
100030fe:	69fb      	ldr	r3, [r7, #28]
10003100:	08da      	lsrs	r2, r3, #3
10003102:	687b      	ldr	r3, [r7, #4]
10003104:	3208      	adds	r2, #8
10003106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1000310a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
1000310c:	69fb      	ldr	r3, [r7, #28]
1000310e:	f003 0307 	and.w	r3, r3, #7
10003112:	009b      	lsls	r3, r3, #2
10003114:	220f      	movs	r2, #15
10003116:	fa02 f303 	lsl.w	r3, r2, r3
1000311a:	43db      	mvns	r3, r3
1000311c:	69ba      	ldr	r2, [r7, #24]
1000311e:	4013      	ands	r3, r2
10003120:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
10003122:	683b      	ldr	r3, [r7, #0]
10003124:	691a      	ldr	r2, [r3, #16]
10003126:	69fb      	ldr	r3, [r7, #28]
10003128:	f003 0307 	and.w	r3, r3, #7
1000312c:	009b      	lsls	r3, r3, #2
1000312e:	fa02 f303 	lsl.w	r3, r2, r3
10003132:	69ba      	ldr	r2, [r7, #24]
10003134:	4313      	orrs	r3, r2
10003136:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
10003138:	69fb      	ldr	r3, [r7, #28]
1000313a:	08da      	lsrs	r2, r3, #3
1000313c:	687b      	ldr	r3, [r7, #4]
1000313e:	3208      	adds	r2, #8
10003140:	69b9      	ldr	r1, [r7, #24]
10003142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
10003146:	687b      	ldr	r3, [r7, #4]
10003148:	681b      	ldr	r3, [r3, #0]
1000314a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
1000314c:	69fb      	ldr	r3, [r7, #28]
1000314e:	005b      	lsls	r3, r3, #1
10003150:	2203      	movs	r2, #3
10003152:	fa02 f303 	lsl.w	r3, r2, r3
10003156:	43db      	mvns	r3, r3
10003158:	69ba      	ldr	r2, [r7, #24]
1000315a:	4013      	ands	r3, r2
1000315c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
1000315e:	683b      	ldr	r3, [r7, #0]
10003160:	685b      	ldr	r3, [r3, #4]
10003162:	f003 0203 	and.w	r2, r3, #3
10003166:	69fb      	ldr	r3, [r7, #28]
10003168:	005b      	lsls	r3, r3, #1
1000316a:	fa02 f303 	lsl.w	r3, r2, r3
1000316e:	69ba      	ldr	r2, [r7, #24]
10003170:	4313      	orrs	r3, r2
10003172:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
10003174:	687b      	ldr	r3, [r7, #4]
10003176:	69ba      	ldr	r2, [r7, #24]
10003178:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
1000317a:	683b      	ldr	r3, [r7, #0]
1000317c:	685b      	ldr	r3, [r3, #4]
1000317e:	2b01      	cmp	r3, #1
10003180:	d00b      	beq.n	1000319a <HAL_GPIO_Init+0xde>
10003182:	683b      	ldr	r3, [r7, #0]
10003184:	685b      	ldr	r3, [r3, #4]
10003186:	2b02      	cmp	r3, #2
10003188:	d007      	beq.n	1000319a <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
1000318a:	683b      	ldr	r3, [r7, #0]
1000318c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
1000318e:	2b11      	cmp	r3, #17
10003190:	d003      	beq.n	1000319a <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10003192:	683b      	ldr	r3, [r7, #0]
10003194:	685b      	ldr	r3, [r3, #4]
10003196:	2b12      	cmp	r3, #18
10003198:	d130      	bne.n	100031fc <HAL_GPIO_Init+0x140>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
1000319a:	687b      	ldr	r3, [r7, #4]
1000319c:	689b      	ldr	r3, [r3, #8]
1000319e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
100031a0:	69fb      	ldr	r3, [r7, #28]
100031a2:	005b      	lsls	r3, r3, #1
100031a4:	2203      	movs	r2, #3
100031a6:	fa02 f303 	lsl.w	r3, r2, r3
100031aa:	43db      	mvns	r3, r3
100031ac:	69ba      	ldr	r2, [r7, #24]
100031ae:	4013      	ands	r3, r2
100031b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
100031b2:	683b      	ldr	r3, [r7, #0]
100031b4:	68da      	ldr	r2, [r3, #12]
100031b6:	69fb      	ldr	r3, [r7, #28]
100031b8:	005b      	lsls	r3, r3, #1
100031ba:	fa02 f303 	lsl.w	r3, r2, r3
100031be:	69ba      	ldr	r2, [r7, #24]
100031c0:	4313      	orrs	r3, r2
100031c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
100031c4:	687b      	ldr	r3, [r7, #4]
100031c6:	69ba      	ldr	r2, [r7, #24]
100031c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
100031ca:	687b      	ldr	r3, [r7, #4]
100031cc:	685b      	ldr	r3, [r3, #4]
100031ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
100031d0:	2201      	movs	r2, #1
100031d2:	69fb      	ldr	r3, [r7, #28]
100031d4:	fa02 f303 	lsl.w	r3, r2, r3
100031d8:	43db      	mvns	r3, r3
100031da:	69ba      	ldr	r2, [r7, #24]
100031dc:	4013      	ands	r3, r2
100031de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
100031e0:	683b      	ldr	r3, [r7, #0]
100031e2:	685b      	ldr	r3, [r3, #4]
100031e4:	091b      	lsrs	r3, r3, #4
100031e6:	f003 0201 	and.w	r2, r3, #1
100031ea:	69fb      	ldr	r3, [r7, #28]
100031ec:	fa02 f303 	lsl.w	r3, r2, r3
100031f0:	69ba      	ldr	r2, [r7, #24]
100031f2:	4313      	orrs	r3, r2
100031f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
100031f6:	687b      	ldr	r3, [r7, #4]
100031f8:	69ba      	ldr	r2, [r7, #24]
100031fa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
100031fc:	687b      	ldr	r3, [r7, #4]
100031fe:	68db      	ldr	r3, [r3, #12]
10003200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
10003202:	69fb      	ldr	r3, [r7, #28]
10003204:	005b      	lsls	r3, r3, #1
10003206:	2203      	movs	r2, #3
10003208:	fa02 f303 	lsl.w	r3, r2, r3
1000320c:	43db      	mvns	r3, r3
1000320e:	69ba      	ldr	r2, [r7, #24]
10003210:	4013      	ands	r3, r2
10003212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
10003214:	683b      	ldr	r3, [r7, #0]
10003216:	689a      	ldr	r2, [r3, #8]
10003218:	69fb      	ldr	r3, [r7, #28]
1000321a:	005b      	lsls	r3, r3, #1
1000321c:	fa02 f303 	lsl.w	r3, r2, r3
10003220:	69ba      	ldr	r2, [r7, #24]
10003222:	4313      	orrs	r3, r2
10003224:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
10003226:	687b      	ldr	r3, [r7, #4]
10003228:	69ba      	ldr	r2, [r7, #24]
1000322a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
1000322c:	683b      	ldr	r3, [r7, #0]
1000322e:	685b      	ldr	r3, [r3, #4]
10003230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
10003234:	2b00      	cmp	r3, #0
10003236:	f000 80da 	beq.w	100033ee <HAL_GPIO_Init+0x332>
      {
        temp = EXTI->EXTICR[position >> 2U];
1000323a:	4a2e      	ldr	r2, [pc, #184]	; (100032f4 <HAL_GPIO_Init+0x238>)
1000323c:	69fb      	ldr	r3, [r7, #28]
1000323e:	089b      	lsrs	r3, r3, #2
10003240:	3318      	adds	r3, #24
10003242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10003246:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFFU << (8U * (position & 0x03U)));
10003248:	69fb      	ldr	r3, [r7, #28]
1000324a:	f003 0303 	and.w	r3, r3, #3
1000324e:	00db      	lsls	r3, r3, #3
10003250:	22ff      	movs	r2, #255	; 0xff
10003252:	fa02 f303 	lsl.w	r3, r2, r3
10003256:	43db      	mvns	r3, r3
10003258:	69ba      	ldr	r2, [r7, #24]
1000325a:	4013      	ands	r3, r2
1000325c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
1000325e:	687b      	ldr	r3, [r7, #4]
10003260:	4a25      	ldr	r2, [pc, #148]	; (100032f8 <HAL_GPIO_Init+0x23c>)
10003262:	4293      	cmp	r3, r2
10003264:	d05e      	beq.n	10003324 <HAL_GPIO_Init+0x268>
10003266:	687b      	ldr	r3, [r7, #4]
10003268:	4a24      	ldr	r2, [pc, #144]	; (100032fc <HAL_GPIO_Init+0x240>)
1000326a:	4293      	cmp	r3, r2
1000326c:	d03d      	beq.n	100032ea <HAL_GPIO_Init+0x22e>
1000326e:	687b      	ldr	r3, [r7, #4]
10003270:	4a23      	ldr	r2, [pc, #140]	; (10003300 <HAL_GPIO_Init+0x244>)
10003272:	4293      	cmp	r3, r2
10003274:	d037      	beq.n	100032e6 <HAL_GPIO_Init+0x22a>
10003276:	687b      	ldr	r3, [r7, #4]
10003278:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
1000327c:	d031      	beq.n	100032e2 <HAL_GPIO_Init+0x226>
1000327e:	687b      	ldr	r3, [r7, #4]
10003280:	4a20      	ldr	r2, [pc, #128]	; (10003304 <HAL_GPIO_Init+0x248>)
10003282:	4293      	cmp	r3, r2
10003284:	d02b      	beq.n	100032de <HAL_GPIO_Init+0x222>
10003286:	687b      	ldr	r3, [r7, #4]
10003288:	4a1f      	ldr	r2, [pc, #124]	; (10003308 <HAL_GPIO_Init+0x24c>)
1000328a:	4293      	cmp	r3, r2
1000328c:	d025      	beq.n	100032da <HAL_GPIO_Init+0x21e>
1000328e:	687b      	ldr	r3, [r7, #4]
10003290:	4a1e      	ldr	r2, [pc, #120]	; (1000330c <HAL_GPIO_Init+0x250>)
10003292:	4293      	cmp	r3, r2
10003294:	d01f      	beq.n	100032d6 <HAL_GPIO_Init+0x21a>
10003296:	687b      	ldr	r3, [r7, #4]
10003298:	4a1d      	ldr	r2, [pc, #116]	; (10003310 <HAL_GPIO_Init+0x254>)
1000329a:	4293      	cmp	r3, r2
1000329c:	d019      	beq.n	100032d2 <HAL_GPIO_Init+0x216>
1000329e:	687b      	ldr	r3, [r7, #4]
100032a0:	4a1c      	ldr	r2, [pc, #112]	; (10003314 <HAL_GPIO_Init+0x258>)
100032a2:	4293      	cmp	r3, r2
100032a4:	d013      	beq.n	100032ce <HAL_GPIO_Init+0x212>
100032a6:	687b      	ldr	r3, [r7, #4]
100032a8:	4a1b      	ldr	r2, [pc, #108]	; (10003318 <HAL_GPIO_Init+0x25c>)
100032aa:	4293      	cmp	r3, r2
100032ac:	d00d      	beq.n	100032ca <HAL_GPIO_Init+0x20e>
100032ae:	687b      	ldr	r3, [r7, #4]
100032b0:	4a1a      	ldr	r2, [pc, #104]	; (1000331c <HAL_GPIO_Init+0x260>)
100032b2:	4293      	cmp	r3, r2
100032b4:	d007      	beq.n	100032c6 <HAL_GPIO_Init+0x20a>
100032b6:	687b      	ldr	r3, [r7, #4]
100032b8:	4a19      	ldr	r2, [pc, #100]	; (10003320 <HAL_GPIO_Init+0x264>)
100032ba:	4293      	cmp	r3, r2
100032bc:	d101      	bne.n	100032c2 <HAL_GPIO_Init+0x206>
100032be:	230b      	movs	r3, #11
100032c0:	e031      	b.n	10003326 <HAL_GPIO_Init+0x26a>
100032c2:	2319      	movs	r3, #25
100032c4:	e02f      	b.n	10003326 <HAL_GPIO_Init+0x26a>
100032c6:	230a      	movs	r3, #10
100032c8:	e02d      	b.n	10003326 <HAL_GPIO_Init+0x26a>
100032ca:	2309      	movs	r3, #9
100032cc:	e02b      	b.n	10003326 <HAL_GPIO_Init+0x26a>
100032ce:	2308      	movs	r3, #8
100032d0:	e029      	b.n	10003326 <HAL_GPIO_Init+0x26a>
100032d2:	2307      	movs	r3, #7
100032d4:	e027      	b.n	10003326 <HAL_GPIO_Init+0x26a>
100032d6:	2306      	movs	r3, #6
100032d8:	e025      	b.n	10003326 <HAL_GPIO_Init+0x26a>
100032da:	2305      	movs	r3, #5
100032dc:	e023      	b.n	10003326 <HAL_GPIO_Init+0x26a>
100032de:	2304      	movs	r3, #4
100032e0:	e021      	b.n	10003326 <HAL_GPIO_Init+0x26a>
100032e2:	2303      	movs	r3, #3
100032e4:	e01f      	b.n	10003326 <HAL_GPIO_Init+0x26a>
100032e6:	2302      	movs	r3, #2
100032e8:	e01d      	b.n	10003326 <HAL_GPIO_Init+0x26a>
100032ea:	2301      	movs	r3, #1
100032ec:	e01b      	b.n	10003326 <HAL_GPIO_Init+0x26a>
100032ee:	bf00      	nop
100032f0:	5000d0c0 	.word	0x5000d0c0
100032f4:	5000d000 	.word	0x5000d000
100032f8:	50002000 	.word	0x50002000
100032fc:	50003000 	.word	0x50003000
10003300:	50004000 	.word	0x50004000
10003304:	50006000 	.word	0x50006000
10003308:	50007000 	.word	0x50007000
1000330c:	50008000 	.word	0x50008000
10003310:	50009000 	.word	0x50009000
10003314:	5000a000 	.word	0x5000a000
10003318:	5000b000 	.word	0x5000b000
1000331c:	5000c000 	.word	0x5000c000
10003320:	54004000 	.word	0x54004000
10003324:	2300      	movs	r3, #0
10003326:	69fa      	ldr	r2, [r7, #28]
10003328:	f002 0203 	and.w	r2, r2, #3
1000332c:	00d2      	lsls	r2, r2, #3
1000332e:	4093      	lsls	r3, r2
10003330:	461a      	mov	r2, r3
10003332:	69bb      	ldr	r3, [r7, #24]
10003334:	4313      	orrs	r3, r2
10003336:	61bb      	str	r3, [r7, #24]
        EXTI->EXTICR[position >> 2U] = temp;
10003338:	4934      	ldr	r1, [pc, #208]	; (1000340c <HAL_GPIO_Init+0x350>)
1000333a:	69fb      	ldr	r3, [r7, #28]
1000333c:	089b      	lsrs	r3, r3, #2
1000333e:	3318      	adds	r3, #24
10003340:	69ba      	ldr	r2, [r7, #24]
10003342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
10003346:	697b      	ldr	r3, [r7, #20]
10003348:	681b      	ldr	r3, [r3, #0]
1000334a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
1000334c:	68fb      	ldr	r3, [r7, #12]
1000334e:	43db      	mvns	r3, r3
10003350:	69ba      	ldr	r2, [r7, #24]
10003352:	4013      	ands	r3, r2
10003354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
10003356:	683b      	ldr	r3, [r7, #0]
10003358:	685b      	ldr	r3, [r3, #4]
1000335a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
1000335e:	2b00      	cmp	r3, #0
10003360:	d003      	beq.n	1000336a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
10003362:	69ba      	ldr	r2, [r7, #24]
10003364:	68fb      	ldr	r3, [r7, #12]
10003366:	4313      	orrs	r3, r2
10003368:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
1000336a:	697b      	ldr	r3, [r7, #20]
1000336c:	69ba      	ldr	r2, [r7, #24]
1000336e:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
10003370:	697b      	ldr	r3, [r7, #20]
10003372:	685b      	ldr	r3, [r3, #4]
10003374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10003376:	68fb      	ldr	r3, [r7, #12]
10003378:	43db      	mvns	r3, r3
1000337a:	69ba      	ldr	r2, [r7, #24]
1000337c:	4013      	ands	r3, r2
1000337e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
10003380:	683b      	ldr	r3, [r7, #0]
10003382:	685b      	ldr	r3, [r3, #4]
10003384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
10003388:	2b00      	cmp	r3, #0
1000338a:	d003      	beq.n	10003394 <HAL_GPIO_Init+0x2d8>
        {
          temp |= iocurrent;
1000338c:	69ba      	ldr	r2, [r7, #24]
1000338e:	68fb      	ldr	r3, [r7, #12]
10003390:	4313      	orrs	r3, r2
10003392:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
10003394:	697b      	ldr	r3, [r7, #20]
10003396:	69ba      	ldr	r2, [r7, #24]
10003398:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
1000339a:	4b1c      	ldr	r3, [pc, #112]	; (1000340c <HAL_GPIO_Init+0x350>)
1000339c:	681b      	ldr	r3, [r3, #0]
1000339e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
100033a0:	68fb      	ldr	r3, [r7, #12]
100033a2:	43db      	mvns	r3, r3
100033a4:	69ba      	ldr	r2, [r7, #24]
100033a6:	4013      	ands	r3, r2
100033a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
100033aa:	683b      	ldr	r3, [r7, #0]
100033ac:	685b      	ldr	r3, [r3, #4]
100033ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
100033b2:	2b00      	cmp	r3, #0
100033b4:	d003      	beq.n	100033be <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
100033b6:	69ba      	ldr	r2, [r7, #24]
100033b8:	68fb      	ldr	r3, [r7, #12]
100033ba:	4313      	orrs	r3, r2
100033bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
100033be:	4a13      	ldr	r2, [pc, #76]	; (1000340c <HAL_GPIO_Init+0x350>)
100033c0:	69bb      	ldr	r3, [r7, #24]
100033c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
100033c4:	4b11      	ldr	r3, [pc, #68]	; (1000340c <HAL_GPIO_Init+0x350>)
100033c6:	685b      	ldr	r3, [r3, #4]
100033c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
100033ca:	68fb      	ldr	r3, [r7, #12]
100033cc:	43db      	mvns	r3, r3
100033ce:	69ba      	ldr	r2, [r7, #24]
100033d0:	4013      	ands	r3, r2
100033d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
100033d4:	683b      	ldr	r3, [r7, #0]
100033d6:	685b      	ldr	r3, [r3, #4]
100033d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
100033dc:	2b00      	cmp	r3, #0
100033de:	d003      	beq.n	100033e8 <HAL_GPIO_Init+0x32c>
        {
          temp |= iocurrent;
100033e0:	69ba      	ldr	r2, [r7, #24]
100033e2:	68fb      	ldr	r3, [r7, #12]
100033e4:	4313      	orrs	r3, r2
100033e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
100033e8:	4a08      	ldr	r2, [pc, #32]	; (1000340c <HAL_GPIO_Init+0x350>)
100033ea:	69bb      	ldr	r3, [r7, #24]
100033ec:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
100033ee:	69fb      	ldr	r3, [r7, #28]
100033f0:	3301      	adds	r3, #1
100033f2:	61fb      	str	r3, [r7, #28]
100033f4:	69fb      	ldr	r3, [r7, #28]
100033f6:	2b0f      	cmp	r3, #15
100033f8:	f67f ae6a 	bls.w	100030d0 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
100033fc:	bf00      	nop
100033fe:	bf00      	nop
10003400:	3724      	adds	r7, #36	; 0x24
10003402:	46bd      	mov	sp, r7
10003404:	f85d 7b04 	ldr.w	r7, [sp], #4
10003408:	4770      	bx	lr
1000340a:	bf00      	nop
1000340c:	5000d000 	.word	0x5000d000

10003410 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
10003410:	b580      	push	{r7, lr}
10003412:	b084      	sub	sp, #16
10003414:	af00      	add	r7, sp, #0
10003416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
10003418:	2300      	movs	r3, #0
1000341a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
1000341c:	687b      	ldr	r3, [r7, #4]
1000341e:	2b00      	cmp	r3, #0
10003420:	d01e      	beq.n	10003460 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

#if defined(CORE_CM4)
    IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10003422:	4b13      	ldr	r3, [pc, #76]	; (10003470 <HAL_IPCC_Init+0x60>)
10003424:	60bb      	str	r3, [r7, #8]
#else
    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

    if (hipcc->State == HAL_IPCC_STATE_RESET)
10003426:	687b      	ldr	r3, [r7, #4]
10003428:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
1000342c:	b2db      	uxtb	r3, r3
1000342e:	2b00      	cmp	r3, #0
10003430:	d102      	bne.n	10003438 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
10003432:	6878      	ldr	r0, [r7, #4]
10003434:	f7fe f804 	bl	10001440 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
10003438:	68b8      	ldr	r0, [r7, #8]
1000343a:	f000 f9eb 	bl	10003814 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
1000343e:	68bb      	ldr	r3, [r7, #8]
10003440:	681b      	ldr	r3, [r3, #0]
10003442:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
10003446:	68bb      	ldr	r3, [r7, #8]
10003448:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
1000344a:	6878      	ldr	r0, [r7, #4]
1000344c:	f000 f9bc 	bl	100037c8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
10003450:	687b      	ldr	r3, [r7, #4]
10003452:	2200      	movs	r2, #0
10003454:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
10003456:	687b      	ldr	r3, [r7, #4]
10003458:	2201      	movs	r2, #1
1000345a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
1000345e:	e001      	b.n	10003464 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
10003460:	2301      	movs	r3, #1
10003462:	73fb      	strb	r3, [r7, #15]
  }

  return err;
10003464:	7bfb      	ldrb	r3, [r7, #15]
}
10003466:	4618      	mov	r0, r3
10003468:	3710      	adds	r7, #16
1000346a:	46bd      	mov	sp, r7
1000346c:	bd80      	pop	{r7, pc}
1000346e:	bf00      	nop
10003470:	4c001010 	.word	0x4c001010

10003474 <HAL_IPCC_ActivateNotification>:
  * @param  ChannelDir Channel direction
  * @param  cb Interrupt callback
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_ActivateNotification(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir, ChannelCb cb)
{
10003474:	b580      	push	{r7, lr}
10003476:	b086      	sub	sp, #24
10003478:	af00      	add	r7, sp, #0
1000347a:	60f8      	str	r0, [r7, #12]
1000347c:	60b9      	str	r1, [r7, #8]
1000347e:	603b      	str	r3, [r7, #0]
10003480:	4613      	mov	r3, r2
10003482:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
10003484:	2300      	movs	r3, #0
10003486:	75fb      	strb	r3, [r7, #23]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
10003488:	68fb      	ldr	r3, [r7, #12]
1000348a:	2b00      	cmp	r3, #0
1000348c:	d039      	beq.n	10003502 <HAL_IPCC_ActivateNotification+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    /* Check IPCC state */
    if (hipcc->State == HAL_IPCC_STATE_READY)
1000348e:	68fb      	ldr	r3, [r7, #12]
10003490:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
10003494:	b2db      	uxtb	r3, r3
10003496:	2b01      	cmp	r3, #1
10003498:	d130      	bne.n	100034fc <HAL_IPCC_ActivateNotification+0x88>
    {
      /* Set callback and register masking information */
      if (ChannelDir == IPCC_CHANNEL_DIR_TX)
1000349a:	79fb      	ldrb	r3, [r7, #7]
1000349c:	2b00      	cmp	r3, #0
1000349e:	d113      	bne.n	100034c8 <HAL_IPCC_ActivateNotification+0x54>
      {
        hipcc->ChannelCallbackTx[ChannelIndex] = cb;
100034a0:	68fa      	ldr	r2, [r7, #12]
100034a2:	68bb      	ldr	r3, [r7, #8]
100034a4:	3306      	adds	r3, #6
100034a6:	009b      	lsls	r3, r3, #2
100034a8:	4413      	add	r3, r2
100034aa:	683a      	ldr	r2, [r7, #0]
100034ac:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
100034ae:	68fb      	ldr	r3, [r7, #12]
100034b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
100034b2:	68bb      	ldr	r3, [r7, #8]
100034b4:	f003 030f 	and.w	r3, r3, #15
100034b8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
100034bc:	fa01 f303 	lsl.w	r3, r1, r3
100034c0:	431a      	orrs	r2, r3
100034c2:	68fb      	ldr	r3, [r7, #12]
100034c4:	635a      	str	r2, [r3, #52]	; 0x34
100034c6:	e010      	b.n	100034ea <HAL_IPCC_ActivateNotification+0x76>
      }
      else
      {
        hipcc->ChannelCallbackRx[ChannelIndex] = cb;
100034c8:	68fa      	ldr	r2, [r7, #12]
100034ca:	68bb      	ldr	r3, [r7, #8]
100034cc:	009b      	lsls	r3, r3, #2
100034ce:	4413      	add	r3, r2
100034d0:	683a      	ldr	r2, [r7, #0]
100034d2:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
100034d4:	68fb      	ldr	r3, [r7, #12]
100034d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
100034d8:	68bb      	ldr	r3, [r7, #8]
100034da:	f003 030f 	and.w	r3, r3, #15
100034de:	2101      	movs	r1, #1
100034e0:	fa01 f303 	lsl.w	r3, r1, r3
100034e4:	431a      	orrs	r2, r3
100034e6:	68fb      	ldr	r3, [r7, #12]
100034e8:	635a      	str	r2, [r3, #52]	; 0x34
      }

      /* Unmask only the channels in reception (Transmission channel mask/unmask is done in HAL_IPCC_NotifyCPU) */
      if (ChannelDir == IPCC_CHANNEL_DIR_RX)
100034ea:	79fb      	ldrb	r3, [r7, #7]
100034ec:	2b01      	cmp	r3, #1
100034ee:	d10a      	bne.n	10003506 <HAL_IPCC_ActivateNotification+0x92>
      {
        IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
100034f0:	79fb      	ldrb	r3, [r7, #7]
100034f2:	4619      	mov	r1, r3
100034f4:	68b8      	ldr	r0, [r7, #8]
100034f6:	f000 f939 	bl	1000376c <IPCC_UnmaskInterrupt>
100034fa:	e004      	b.n	10003506 <HAL_IPCC_ActivateNotification+0x92>
      }
    }
    else
    {
      err = HAL_ERROR;
100034fc:	2301      	movs	r3, #1
100034fe:	75fb      	strb	r3, [r7, #23]
10003500:	e001      	b.n	10003506 <HAL_IPCC_ActivateNotification+0x92>
    }
  }
  else
  {
    err = HAL_ERROR;
10003502:	2301      	movs	r3, #1
10003504:	75fb      	strb	r3, [r7, #23]
  }
  return err;
10003506:	7dfb      	ldrb	r3, [r7, #23]
}
10003508:	4618      	mov	r0, r3
1000350a:	3718      	adds	r7, #24
1000350c:	46bd      	mov	sp, r7
1000350e:	bd80      	pop	{r7, pc}

10003510 <HAL_IPCC_GetChannelStatus>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval Channel status
  */
IPCC_CHANNELStatusTypeDef HAL_IPCC_GetChannelStatus(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10003510:	b480      	push	{r7}
10003512:	b089      	sub	sp, #36	; 0x24
10003514:	af00      	add	r7, sp, #0
10003516:	60f8      	str	r0, [r7, #12]
10003518:	60b9      	str	r1, [r7, #8]
1000351a:	4613      	mov	r3, r2
1000351c:	71fb      	strb	r3, [r7, #7]
  uint32_t channel_state;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
1000351e:	4b14      	ldr	r3, [pc, #80]	; (10003570 <HAL_IPCC_GetChannelStatus+0x60>)
10003520:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
10003522:	4b14      	ldr	r3, [pc, #80]	; (10003574 <HAL_IPCC_GetChannelStatus+0x64>)
10003524:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Read corresponding channel depending of the MCU and the direction */
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10003526:	79fb      	ldrb	r3, [r7, #7]
10003528:	2b00      	cmp	r3, #0
1000352a:	d10a      	bne.n	10003542 <HAL_IPCC_GetChannelStatus+0x32>
  {
    channel_state = (currentInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
1000352c:	69bb      	ldr	r3, [r7, #24]
1000352e:	68da      	ldr	r2, [r3, #12]
10003530:	68bb      	ldr	r3, [r7, #8]
10003532:	f003 030f 	and.w	r3, r3, #15
10003536:	2101      	movs	r1, #1
10003538:	fa01 f303 	lsl.w	r3, r1, r3
1000353c:	4013      	ands	r3, r2
1000353e:	61fb      	str	r3, [r7, #28]
10003540:	e009      	b.n	10003556 <HAL_IPCC_GetChannelStatus+0x46>
  }
  else
  {
    channel_state = (otherInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10003542:	697b      	ldr	r3, [r7, #20]
10003544:	68da      	ldr	r2, [r3, #12]
10003546:	68bb      	ldr	r3, [r7, #8]
10003548:	f003 030f 	and.w	r3, r3, #15
1000354c:	2101      	movs	r1, #1
1000354e:	fa01 f303 	lsl.w	r3, r1, r3
10003552:	4013      	ands	r3, r2
10003554:	61fb      	str	r3, [r7, #28]
  }

  return (channel_state == 0UL) ? IPCC_CHANNEL_STATUS_FREE : IPCC_CHANNEL_STATUS_OCCUPIED ;
10003556:	69fb      	ldr	r3, [r7, #28]
10003558:	2b00      	cmp	r3, #0
1000355a:	bf14      	ite	ne
1000355c:	2301      	movne	r3, #1
1000355e:	2300      	moveq	r3, #0
10003560:	b2db      	uxtb	r3, r3
}
10003562:	4618      	mov	r0, r3
10003564:	3724      	adds	r7, #36	; 0x24
10003566:	46bd      	mov	sp, r7
10003568:	f85d 7b04 	ldr.w	r7, [sp], #4
1000356c:	4770      	bx	lr
1000356e:	bf00      	nop
10003570:	4c001010 	.word	0x4c001010
10003574:	4c001000 	.word	0x4c001000

10003578 <HAL_IPCC_NotifyCPU>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_NotifyCPU(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10003578:	b580      	push	{r7, lr}
1000357a:	b088      	sub	sp, #32
1000357c:	af00      	add	r7, sp, #0
1000357e:	60f8      	str	r0, [r7, #12]
10003580:	60b9      	str	r1, [r7, #8]
10003582:	4613      	mov	r3, r2
10003584:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
10003586:	2300      	movs	r3, #0
10003588:	77fb      	strb	r3, [r7, #31]
  uint32_t mask;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
1000358a:	4b1d      	ldr	r3, [pc, #116]	; (10003600 <HAL_IPCC_NotifyCPU+0x88>)
1000358c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Check if IPCC is initiliased */
  if (hipcc->State == HAL_IPCC_STATE_READY)
1000358e:	68fb      	ldr	r3, [r7, #12]
10003590:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
10003594:	b2db      	uxtb	r3, r3
10003596:	2b01      	cmp	r3, #1
10003598:	d12a      	bne.n	100035f0 <HAL_IPCC_NotifyCPU+0x78>
  {
    /* For IPCC_CHANNEL_DIR_TX, set the status. For IPCC_CHANNEL_DIR_RX, clear the status */
    currentInstance->SCR |= ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_SCR_CH1S : IPCC_SCR_CH1C) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
1000359a:	69bb      	ldr	r3, [r7, #24]
1000359c:	689a      	ldr	r2, [r3, #8]
1000359e:	79fb      	ldrb	r3, [r7, #7]
100035a0:	2b00      	cmp	r3, #0
100035a2:	d102      	bne.n	100035aa <HAL_IPCC_NotifyCPU+0x32>
100035a4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
100035a8:	e000      	b.n	100035ac <HAL_IPCC_NotifyCPU+0x34>
100035aa:	2101      	movs	r1, #1
100035ac:	68bb      	ldr	r3, [r7, #8]
100035ae:	f003 030f 	and.w	r3, r3, #15
100035b2:	fa01 f303 	lsl.w	r3, r1, r3
100035b6:	431a      	orrs	r2, r3
100035b8:	69bb      	ldr	r3, [r7, #24]
100035ba:	609a      	str	r2, [r3, #8]

    /* Unmask interrupt if the callback is requested */
    mask = ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_MR_CH1FM_Msk : IPCC_MR_CH1OM_Msk) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
100035bc:	79fb      	ldrb	r3, [r7, #7]
100035be:	2b00      	cmp	r3, #0
100035c0:	d102      	bne.n	100035c8 <HAL_IPCC_NotifyCPU+0x50>
100035c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
100035c6:	e000      	b.n	100035ca <HAL_IPCC_NotifyCPU+0x52>
100035c8:	2201      	movs	r2, #1
100035ca:	68bb      	ldr	r3, [r7, #8]
100035cc:	f003 030f 	and.w	r3, r3, #15
100035d0:	fa02 f303 	lsl.w	r3, r2, r3
100035d4:	617b      	str	r3, [r7, #20]
    if ((hipcc->callbackRequest & mask) == mask)
100035d6:	68fb      	ldr	r3, [r7, #12]
100035d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
100035da:	697b      	ldr	r3, [r7, #20]
100035dc:	4013      	ands	r3, r2
100035de:	697a      	ldr	r2, [r7, #20]
100035e0:	429a      	cmp	r2, r3
100035e2:	d107      	bne.n	100035f4 <HAL_IPCC_NotifyCPU+0x7c>
    {
      IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
100035e4:	79fb      	ldrb	r3, [r7, #7]
100035e6:	4619      	mov	r1, r3
100035e8:	68b8      	ldr	r0, [r7, #8]
100035ea:	f000 f8bf 	bl	1000376c <IPCC_UnmaskInterrupt>
100035ee:	e001      	b.n	100035f4 <HAL_IPCC_NotifyCPU+0x7c>
    }
  }
  else
  {
    err = HAL_ERROR;
100035f0:	2301      	movs	r3, #1
100035f2:	77fb      	strb	r3, [r7, #31]
  }

  return err;
100035f4:	7ffb      	ldrb	r3, [r7, #31]
}
100035f6:	4618      	mov	r0, r3
100035f8:	3720      	adds	r7, #32
100035fa:	46bd      	mov	sp, r7
100035fc:	bd80      	pop	{r7, pc}
100035fe:	bf00      	nop
10003600:	4c001010 	.word	0x4c001010

10003604 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
10003604:	b580      	push	{r7, lr}
10003606:	b086      	sub	sp, #24
10003608:	af00      	add	r7, sp, #0
1000360a:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
1000360c:	2300      	movs	r3, #0
1000360e:	613b      	str	r3, [r7, #16]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10003610:	4b22      	ldr	r3, [pc, #136]	; (1000369c <HAL_IPCC_TX_IRQHandler+0x98>)
10003612:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
10003614:	68fb      	ldr	r3, [r7, #12]
10003616:	685b      	ldr	r3, [r3, #4]
10003618:	43db      	mvns	r3, r3
1000361a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
1000361e:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
10003620:	68fb      	ldr	r3, [r7, #12]
10003622:	68db      	ldr	r3, [r3, #12]
10003624:	041b      	lsls	r3, r3, #16
10003626:	43db      	mvns	r3, r3
10003628:	697a      	ldr	r2, [r7, #20]
1000362a:	4013      	ands	r3, r2
1000362c:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
1000362e:	e02c      	b.n	1000368a <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_Msk));
10003630:	693b      	ldr	r3, [r7, #16]
10003632:	f003 030f 	and.w	r3, r3, #15
10003636:	3310      	adds	r3, #16
10003638:	2201      	movs	r2, #1
1000363a:	fa02 f303 	lsl.w	r3, r2, r3
1000363e:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
10003640:	697a      	ldr	r2, [r7, #20]
10003642:	68bb      	ldr	r3, [r7, #8]
10003644:	4013      	ands	r3, r2
10003646:	2b00      	cmp	r3, #0
10003648:	d01c      	beq.n	10003684 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
1000364a:	68fb      	ldr	r3, [r7, #12]
1000364c:	685a      	ldr	r2, [r3, #4]
1000364e:	68bb      	ldr	r3, [r7, #8]
10003650:	431a      	orrs	r2, r3
10003652:	68fb      	ldr	r3, [r7, #12]
10003654:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
10003656:	687a      	ldr	r2, [r7, #4]
10003658:	693b      	ldr	r3, [r7, #16]
1000365a:	3306      	adds	r3, #6
1000365c:	009b      	lsls	r3, r3, #2
1000365e:	4413      	add	r3, r2
10003660:	685b      	ldr	r3, [r3, #4]
10003662:	2b00      	cmp	r3, #0
10003664:	d009      	beq.n	1000367a <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
10003666:	687a      	ldr	r2, [r7, #4]
10003668:	693b      	ldr	r3, [r7, #16]
1000366a:	3306      	adds	r3, #6
1000366c:	009b      	lsls	r3, r3, #2
1000366e:	4413      	add	r3, r2
10003670:	685b      	ldr	r3, [r3, #4]
10003672:	2200      	movs	r2, #0
10003674:	6939      	ldr	r1, [r7, #16]
10003676:	6878      	ldr	r0, [r7, #4]
10003678:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
1000367a:	68bb      	ldr	r3, [r7, #8]
1000367c:	43db      	mvns	r3, r3
1000367e:	697a      	ldr	r2, [r7, #20]
10003680:	4013      	ands	r3, r2
10003682:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
10003684:	693b      	ldr	r3, [r7, #16]
10003686:	3301      	adds	r3, #1
10003688:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
1000368a:	697b      	ldr	r3, [r7, #20]
1000368c:	2b00      	cmp	r3, #0
1000368e:	d1cf      	bne.n	10003630 <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
10003690:	bf00      	nop
10003692:	bf00      	nop
10003694:	3718      	adds	r7, #24
10003696:	46bd      	mov	sp, r7
10003698:	bd80      	pop	{r7, pc}
1000369a:	bf00      	nop
1000369c:	4c001010 	.word	0x4c001010

100036a0 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
100036a0:	b580      	push	{r7, lr}
100036a2:	b088      	sub	sp, #32
100036a4:	af00      	add	r7, sp, #0
100036a6:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
100036a8:	2300      	movs	r3, #0
100036aa:	61bb      	str	r3, [r7, #24]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
100036ac:	4b20      	ldr	r3, [pc, #128]	; (10003730 <HAL_IPCC_RX_IRQHandler+0x90>)
100036ae:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
100036b0:	4b20      	ldr	r3, [pc, #128]	; (10003734 <HAL_IPCC_RX_IRQHandler+0x94>)
100036b2:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
#endif

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
100036b4:	697b      	ldr	r3, [r7, #20]
100036b6:	685b      	ldr	r3, [r3, #4]
100036b8:	43db      	mvns	r3, r3
100036ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
100036be:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
100036c0:	693b      	ldr	r3, [r7, #16]
100036c2:	68db      	ldr	r3, [r3, #12]
100036c4:	69fa      	ldr	r2, [r7, #28]
100036c6:	4013      	ands	r3, r2
100036c8:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
100036ca:	e029      	b.n	10003720 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
100036cc:	69bb      	ldr	r3, [r7, #24]
100036ce:	f003 030f 	and.w	r3, r3, #15
100036d2:	2201      	movs	r2, #1
100036d4:	fa02 f303 	lsl.w	r3, r2, r3
100036d8:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
100036da:	69fa      	ldr	r2, [r7, #28]
100036dc:	68fb      	ldr	r3, [r7, #12]
100036de:	4013      	ands	r3, r2
100036e0:	2b00      	cmp	r3, #0
100036e2:	d01a      	beq.n	1000371a <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
100036e4:	697b      	ldr	r3, [r7, #20]
100036e6:	685a      	ldr	r2, [r3, #4]
100036e8:	68fb      	ldr	r3, [r7, #12]
100036ea:	431a      	orrs	r2, r3
100036ec:	697b      	ldr	r3, [r7, #20]
100036ee:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
100036f0:	687a      	ldr	r2, [r7, #4]
100036f2:	69bb      	ldr	r3, [r7, #24]
100036f4:	009b      	lsls	r3, r3, #2
100036f6:	4413      	add	r3, r2
100036f8:	685b      	ldr	r3, [r3, #4]
100036fa:	2b00      	cmp	r3, #0
100036fc:	d008      	beq.n	10003710 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
100036fe:	687a      	ldr	r2, [r7, #4]
10003700:	69bb      	ldr	r3, [r7, #24]
10003702:	009b      	lsls	r3, r3, #2
10003704:	4413      	add	r3, r2
10003706:	685b      	ldr	r3, [r3, #4]
10003708:	2201      	movs	r2, #1
1000370a:	69b9      	ldr	r1, [r7, #24]
1000370c:	6878      	ldr	r0, [r7, #4]
1000370e:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
10003710:	68fb      	ldr	r3, [r7, #12]
10003712:	43db      	mvns	r3, r3
10003714:	69fa      	ldr	r2, [r7, #28]
10003716:	4013      	ands	r3, r2
10003718:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
1000371a:	69bb      	ldr	r3, [r7, #24]
1000371c:	3301      	adds	r3, #1
1000371e:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10003720:	69fb      	ldr	r3, [r7, #28]
10003722:	2b00      	cmp	r3, #0
10003724:	d1d2      	bne.n	100036cc <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
10003726:	bf00      	nop
10003728:	bf00      	nop
1000372a:	3720      	adds	r7, #32
1000372c:	46bd      	mov	sp, r7
1000372e:	bd80      	pop	{r7, pc}
10003730:	4c001010 	.word	0x4c001010
10003734:	4c001000 	.word	0x4c001000

10003738 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10003738:	b480      	push	{r7}
1000373a:	b085      	sub	sp, #20
1000373c:	af00      	add	r7, sp, #0
1000373e:	60f8      	str	r0, [r7, #12]
10003740:	60b9      	str	r1, [r7, #8]
10003742:	4613      	mov	r3, r2
10003744:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
10003746:	bf00      	nop
10003748:	3714      	adds	r7, #20
1000374a:	46bd      	mov	sp, r7
1000374c:	f85d 7b04 	ldr.w	r7, [sp], #4
10003750:	4770      	bx	lr

10003752 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10003752:	b480      	push	{r7}
10003754:	b085      	sub	sp, #20
10003756:	af00      	add	r7, sp, #0
10003758:	60f8      	str	r0, [r7, #12]
1000375a:	60b9      	str	r1, [r7, #8]
1000375c:	4613      	mov	r3, r2
1000375e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
10003760:	bf00      	nop
10003762:	3714      	adds	r7, #20
10003764:	46bd      	mov	sp, r7
10003766:	f85d 7b04 	ldr.w	r7, [sp], #4
1000376a:	4770      	bx	lr

1000376c <IPCC_UnmaskInterrupt>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  */
void IPCC_UnmaskInterrupt(uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
1000376c:	b480      	push	{r7}
1000376e:	b085      	sub	sp, #20
10003770:	af00      	add	r7, sp, #0
10003772:	6078      	str	r0, [r7, #4]
10003774:	460b      	mov	r3, r1
10003776:	70fb      	strb	r3, [r7, #3]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10003778:	4b12      	ldr	r3, [pc, #72]	; (100037c4 <IPCC_UnmaskInterrupt+0x58>)
1000377a:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
1000377c:	78fb      	ldrb	r3, [r7, #3]
1000377e:	2b00      	cmp	r3, #0
10003780:	d10d      	bne.n	1000379e <IPCC_UnmaskInterrupt+0x32>
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10003782:	68fb      	ldr	r3, [r7, #12]
10003784:	685a      	ldr	r2, [r3, #4]
10003786:	687b      	ldr	r3, [r7, #4]
10003788:	f003 030f 	and.w	r3, r3, #15
1000378c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
10003790:	fa01 f303 	lsl.w	r3, r1, r3
10003794:	43db      	mvns	r3, r3
10003796:	401a      	ands	r2, r3
10003798:	68fb      	ldr	r3, [r7, #12]
1000379a:	605a      	str	r2, [r3, #4]
  else
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
  }
}
1000379c:	e00b      	b.n	100037b6 <IPCC_UnmaskInterrupt+0x4a>
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
1000379e:	68fb      	ldr	r3, [r7, #12]
100037a0:	685a      	ldr	r2, [r3, #4]
100037a2:	687b      	ldr	r3, [r7, #4]
100037a4:	f003 030f 	and.w	r3, r3, #15
100037a8:	2101      	movs	r1, #1
100037aa:	fa01 f303 	lsl.w	r3, r1, r3
100037ae:	43db      	mvns	r3, r3
100037b0:	401a      	ands	r2, r3
100037b2:	68fb      	ldr	r3, [r7, #12]
100037b4:	605a      	str	r2, [r3, #4]
}
100037b6:	bf00      	nop
100037b8:	3714      	adds	r7, #20
100037ba:	46bd      	mov	sp, r7
100037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
100037c0:	4770      	bx	lr
100037c2:	bf00      	nop
100037c4:	4c001010 	.word	0x4c001010

100037c8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
100037c8:	b480      	push	{r7}
100037ca:	b085      	sub	sp, #20
100037cc:	af00      	add	r7, sp, #0
100037ce:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
100037d0:	2300      	movs	r3, #0
100037d2:	60fb      	str	r3, [r7, #12]
100037d4:	e00f      	b.n	100037f6 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
100037d6:	687a      	ldr	r2, [r7, #4]
100037d8:	68fb      	ldr	r3, [r7, #12]
100037da:	009b      	lsls	r3, r3, #2
100037dc:	4413      	add	r3, r2
100037de:	4a0b      	ldr	r2, [pc, #44]	; (1000380c <IPCC_SetDefaultCallbacks+0x44>)
100037e0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
100037e2:	687a      	ldr	r2, [r7, #4]
100037e4:	68fb      	ldr	r3, [r7, #12]
100037e6:	3306      	adds	r3, #6
100037e8:	009b      	lsls	r3, r3, #2
100037ea:	4413      	add	r3, r2
100037ec:	4a08      	ldr	r2, [pc, #32]	; (10003810 <IPCC_SetDefaultCallbacks+0x48>)
100037ee:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
100037f0:	68fb      	ldr	r3, [r7, #12]
100037f2:	3301      	adds	r3, #1
100037f4:	60fb      	str	r3, [r7, #12]
100037f6:	68fb      	ldr	r3, [r7, #12]
100037f8:	2b05      	cmp	r3, #5
100037fa:	d9ec      	bls.n	100037d6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
100037fc:	bf00      	nop
100037fe:	bf00      	nop
10003800:	3714      	adds	r7, #20
10003802:	46bd      	mov	sp, r7
10003804:	f85d 7b04 	ldr.w	r7, [sp], #4
10003808:	4770      	bx	lr
1000380a:	bf00      	nop
1000380c:	10003739 	.word	0x10003739
10003810:	10003753 	.word	0x10003753

10003814 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
10003814:	b480      	push	{r7}
10003816:	b083      	sub	sp, #12
10003818:	af00      	add	r7, sp, #0
1000381a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
1000381c:	687b      	ldr	r3, [r7, #4]
1000381e:	2200      	movs	r2, #0
10003820:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
10003822:	687b      	ldr	r3, [r7, #4]
10003824:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
10003828:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
1000382a:	687b      	ldr	r3, [r7, #4]
1000382c:	223f      	movs	r2, #63	; 0x3f
1000382e:	609a      	str	r2, [r3, #8]
}
10003830:	bf00      	nop
10003832:	370c      	adds	r7, #12
10003834:	46bd      	mov	sp, r7
10003836:	f85d 7b04 	ldr.w	r7, [sp], #4
1000383a:	4770      	bx	lr

1000383c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
1000383c:	b480      	push	{r7}
1000383e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
10003840:	4b05      	ldr	r3, [pc, #20]	; (10003858 <HAL_PWR_EnableBkUpAccess+0x1c>)
10003842:	681b      	ldr	r3, [r3, #0]
10003844:	4a04      	ldr	r2, [pc, #16]	; (10003858 <HAL_PWR_EnableBkUpAccess+0x1c>)
10003846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1000384a:	6013      	str	r3, [r2, #0]
}
1000384c:	bf00      	nop
1000384e:	46bd      	mov	sp, r7
10003850:	f85d 7b04 	ldr.w	r7, [sp], #4
10003854:	4770      	bx	lr
10003856:	bf00      	nop
10003858:	50001000 	.word	0x50001000

1000385c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
1000385c:	b580      	push	{r7, lr}
1000385e:	b084      	sub	sp, #16
10003860:	af00      	add	r7, sp, #0
10003862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
10003864:	2300      	movs	r3, #0
10003866:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10003868:	687b      	ldr	r3, [r7, #4]
1000386a:	2b00      	cmp	r3, #0
1000386c:	d101      	bne.n	10003872 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
1000386e:	2301      	movs	r3, #1
10003870:	e320      	b.n	10003eb4 <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10003872:	687b      	ldr	r3, [r7, #4]
10003874:	681b      	ldr	r3, [r3, #0]
10003876:	f003 0301 	and.w	r3, r3, #1
1000387a:	2b00      	cmp	r3, #0
1000387c:	f000 8081 	beq.w	10003982 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
10003880:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003884:	6a1b      	ldr	r3, [r3, #32]
10003886:	f003 0303 	and.w	r3, r3, #3
1000388a:	2b01      	cmp	r3, #1
1000388c:	d107      	bne.n	1000389e <HAL_RCC_OscConfig+0x42>
1000388e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003892:	6a1b      	ldr	r3, [r3, #32]
10003894:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003898:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000389c:	d054      	beq.n	10003948 <HAL_RCC_OscConfig+0xec>
1000389e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100038a4:	f003 0307 	and.w	r3, r3, #7
100038a8:	2b01      	cmp	r3, #1
100038aa:	d107      	bne.n	100038bc <HAL_RCC_OscConfig+0x60>
100038ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100038b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100038b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100038ba:	d045      	beq.n	10003948 <HAL_RCC_OscConfig+0xec>
100038bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100038c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100038c2:	f003 0303 	and.w	r3, r3, #3
100038c6:	2b01      	cmp	r3, #1
100038c8:	d107      	bne.n	100038da <HAL_RCC_OscConfig+0x7e>
100038ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100038ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100038d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100038d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100038d8:	d036      	beq.n	10003948 <HAL_RCC_OscConfig+0xec>
100038da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100038de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100038e0:	f003 0303 	and.w	r3, r3, #3
100038e4:	2b01      	cmp	r3, #1
100038e6:	d10f      	bne.n	10003908 <HAL_RCC_OscConfig+0xac>
100038e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100038ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100038f0:	f003 0302 	and.w	r3, r3, #2
100038f4:	2b02      	cmp	r3, #2
100038f6:	d027      	beq.n	10003948 <HAL_RCC_OscConfig+0xec>
100038f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100038fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10003900:	f003 0302 	and.w	r3, r3, #2
10003904:	2b02      	cmp	r3, #2
10003906:	d01f      	beq.n	10003948 <HAL_RCC_OscConfig+0xec>
10003908:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000390c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10003910:	f003 0303 	and.w	r3, r3, #3
10003914:	2b01      	cmp	r3, #1
10003916:	d107      	bne.n	10003928 <HAL_RCC_OscConfig+0xcc>
10003918:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000391c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003920:	f003 0302 	and.w	r3, r3, #2
10003924:	2b02      	cmp	r3, #2
10003926:	d00f      	beq.n	10003948 <HAL_RCC_OscConfig+0xec>
10003928:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000392c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10003930:	f003 0303 	and.w	r3, r3, #3
10003934:	2b01      	cmp	r3, #1
10003936:	d117      	bne.n	10003968 <HAL_RCC_OscConfig+0x10c>
10003938:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000393c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003940:	f003 0302 	and.w	r3, r3, #2
10003944:	2b02      	cmp	r3, #2
10003946:	d10f      	bne.n	10003968 <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10003948:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000394c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003950:	f403 7380 	and.w	r3, r3, #256	; 0x100
10003954:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10003958:	d112      	bne.n	10003980 <HAL_RCC_OscConfig+0x124>
1000395a:	687b      	ldr	r3, [r7, #4]
1000395c:	685b      	ldr	r3, [r3, #4]
1000395e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10003962:	d00d      	beq.n	10003980 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
10003964:	2301      	movs	r3, #1
10003966:	e2a5      	b.n	10003eb4 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
10003968:	687b      	ldr	r3, [r7, #4]
1000396a:	685b      	ldr	r3, [r3, #4]
1000396c:	4618      	mov	r0, r3
1000396e:	f000 faa7 	bl	10003ec0 <HAL_RCC_HSEConfig>
10003972:	4603      	mov	r3, r0
10003974:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
10003976:	7bfb      	ldrb	r3, [r7, #15]
10003978:	2b00      	cmp	r3, #0
1000397a:	d002      	beq.n	10003982 <HAL_RCC_OscConfig+0x126>
      {
        return result;
1000397c:	7bfb      	ldrb	r3, [r7, #15]
1000397e:	e299      	b.n	10003eb4 <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10003980:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10003982:	687b      	ldr	r3, [r7, #4]
10003984:	681b      	ldr	r3, [r3, #0]
10003986:	f003 0302 	and.w	r3, r3, #2
1000398a:	2b00      	cmp	r3, #0
1000398c:	f000 814e 	beq.w	10003c2c <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
10003990:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003994:	6a1b      	ldr	r3, [r3, #32]
10003996:	f003 0303 	and.w	r3, r3, #3
1000399a:	2b00      	cmp	r3, #0
1000399c:	d107      	bne.n	100039ae <HAL_RCC_OscConfig+0x152>
1000399e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039a2:	6a1b      	ldr	r3, [r3, #32]
100039a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100039a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100039ac:	d055      	beq.n	10003a5a <HAL_RCC_OscConfig+0x1fe>
100039ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100039b4:	f003 0307 	and.w	r3, r3, #7
100039b8:	2b00      	cmp	r3, #0
100039ba:	d107      	bne.n	100039cc <HAL_RCC_OscConfig+0x170>
100039bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100039c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100039c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100039ca:	d046      	beq.n	10003a5a <HAL_RCC_OscConfig+0x1fe>
100039cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100039d2:	f003 0303 	and.w	r3, r3, #3
100039d6:	2b00      	cmp	r3, #0
100039d8:	d107      	bne.n	100039ea <HAL_RCC_OscConfig+0x18e>
100039da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100039e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100039e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100039e8:	d037      	beq.n	10003a5a <HAL_RCC_OscConfig+0x1fe>
100039ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100039f0:	f003 0303 	and.w	r3, r3, #3
100039f4:	2b00      	cmp	r3, #0
100039f6:	d10f      	bne.n	10003a18 <HAL_RCC_OscConfig+0x1bc>
100039f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10003a00:	f003 0302 	and.w	r3, r3, #2
10003a04:	2b02      	cmp	r3, #2
10003a06:	d028      	beq.n	10003a5a <HAL_RCC_OscConfig+0x1fe>
10003a08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10003a10:	f003 0302 	and.w	r3, r3, #2
10003a14:	2b02      	cmp	r3, #2
10003a16:	d020      	beq.n	10003a5a <HAL_RCC_OscConfig+0x1fe>
10003a18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a1c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10003a20:	f003 0303 	and.w	r3, r3, #3
10003a24:	2b00      	cmp	r3, #0
10003a26:	d107      	bne.n	10003a38 <HAL_RCC_OscConfig+0x1dc>
10003a28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a2c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003a30:	f003 0302 	and.w	r3, r3, #2
10003a34:	2b02      	cmp	r3, #2
10003a36:	d010      	beq.n	10003a5a <HAL_RCC_OscConfig+0x1fe>
10003a38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a3c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10003a40:	f003 0303 	and.w	r3, r3, #3
10003a44:	2b00      	cmp	r3, #0
10003a46:	f040 8088 	bne.w	10003b5a <HAL_RCC_OscConfig+0x2fe>
10003a4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a4e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003a52:	f003 0302 	and.w	r3, r3, #2
10003a56:	2b02      	cmp	r3, #2
10003a58:	d17f      	bne.n	10003b5a <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10003a5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a5e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003a62:	f003 0301 	and.w	r3, r3, #1
10003a66:	2b01      	cmp	r3, #1
10003a68:	d105      	bne.n	10003a76 <HAL_RCC_OscConfig+0x21a>
10003a6a:	687b      	ldr	r3, [r7, #4]
10003a6c:	68db      	ldr	r3, [r3, #12]
10003a6e:	2b01      	cmp	r3, #1
10003a70:	d001      	beq.n	10003a76 <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
10003a72:	2301      	movs	r3, #1
10003a74:	e21e      	b.n	10003eb4 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10003a76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a7a:	699b      	ldr	r3, [r3, #24]
10003a7c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
10003a80:	687b      	ldr	r3, [r7, #4]
10003a82:	691b      	ldr	r3, [r3, #16]
10003a84:	021b      	lsls	r3, r3, #8
10003a86:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003a8a:	4313      	orrs	r3, r2
10003a8c:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10003a8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10003a94:	f003 0303 	and.w	r3, r3, #3
10003a98:	2b00      	cmp	r3, #0
10003a9a:	d10f      	bne.n	10003abc <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10003a9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10003aa4:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10003aa8:	2b02      	cmp	r3, #2
10003aaa:	d047      	beq.n	10003b3c <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10003aac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10003ab4:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10003ab8:	2b02      	cmp	r3, #2
10003aba:	d03f      	beq.n	10003b3c <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10003abc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ac0:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10003ac4:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10003ac8:	2b00      	cmp	r3, #0
10003aca:	d107      	bne.n	10003adc <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10003acc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ad0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003ad4:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10003ad8:	2b02      	cmp	r3, #2
10003ada:	d02f      	beq.n	10003b3c <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10003adc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ae0:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10003ae4:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10003ae8:	2b00      	cmp	r3, #0
10003aea:	d107      	bne.n	10003afc <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
10003aec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003af0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003af4:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10003af8:	2b02      	cmp	r3, #2
10003afa:	d01f      	beq.n	10003b3c <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10003afc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b00:	699b      	ldr	r3, [r3, #24]
10003b02:	f023 0203 	bic.w	r2, r3, #3
10003b06:	687b      	ldr	r3, [r7, #4]
10003b08:	695b      	ldr	r3, [r3, #20]
10003b0a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003b0e:	4313      	orrs	r3, r2
10003b10:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
10003b12:	f7fd fe1f 	bl	10001754 <HAL_GetTick>
10003b16:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10003b18:	e008      	b.n	10003b2c <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10003b1a:	f7fd fe1b 	bl	10001754 <HAL_GetTick>
10003b1e:	4602      	mov	r2, r0
10003b20:	68bb      	ldr	r3, [r7, #8]
10003b22:	1ad3      	subs	r3, r2, r3
10003b24:	2b64      	cmp	r3, #100	; 0x64
10003b26:	d901      	bls.n	10003b2c <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
10003b28:	2303      	movs	r3, #3
10003b2a:	e1c3      	b.n	10003eb4 <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10003b2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b30:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003b34:	f003 0304 	and.w	r3, r3, #4
10003b38:	2b04      	cmp	r3, #4
10003b3a:	d1ee      	bne.n	10003b1a <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
10003b3c:	f001 faca 	bl	100050d4 <HAL_RCC_GetSystemCoreClockFreq>
10003b40:	4603      	mov	r3, r0
10003b42:	4ab3      	ldr	r2, [pc, #716]	; (10003e10 <HAL_RCC_OscConfig+0x5b4>)
10003b44:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
10003b46:	4bb3      	ldr	r3, [pc, #716]	; (10003e14 <HAL_RCC_OscConfig+0x5b8>)
10003b48:	681b      	ldr	r3, [r3, #0]
10003b4a:	4618      	mov	r0, r3
10003b4c:	f7fd fdb8 	bl	100016c0 <HAL_InitTick>
10003b50:	4603      	mov	r3, r0
10003b52:	2b00      	cmp	r3, #0
10003b54:	d069      	beq.n	10003c2a <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
10003b56:	2301      	movs	r3, #1
10003b58:	e1ac      	b.n	10003eb4 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
10003b5a:	687b      	ldr	r3, [r7, #4]
10003b5c:	68db      	ldr	r3, [r3, #12]
10003b5e:	2b00      	cmp	r3, #0
10003b60:	d049      	beq.n	10003bf6 <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
10003b62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b66:	68db      	ldr	r3, [r3, #12]
10003b68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003b6c:	f043 0301 	orr.w	r3, r3, #1
10003b70:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003b72:	f7fd fdef 	bl	10001754 <HAL_GetTick>
10003b76:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10003b78:	e008      	b.n	10003b8c <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10003b7a:	f7fd fdeb 	bl	10001754 <HAL_GetTick>
10003b7e:	4602      	mov	r2, r0
10003b80:	68bb      	ldr	r3, [r7, #8]
10003b82:	1ad3      	subs	r3, r2, r3
10003b84:	2b64      	cmp	r3, #100	; 0x64
10003b86:	d901      	bls.n	10003b8c <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
10003b88:	2303      	movs	r3, #3
10003b8a:	e193      	b.n	10003eb4 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10003b8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b90:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003b94:	f003 0301 	and.w	r3, r3, #1
10003b98:	2b01      	cmp	r3, #1
10003b9a:	d1ee      	bne.n	10003b7a <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10003b9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ba0:	699b      	ldr	r3, [r3, #24]
10003ba2:	f023 0203 	bic.w	r2, r3, #3
10003ba6:	687b      	ldr	r3, [r7, #4]
10003ba8:	695b      	ldr	r3, [r3, #20]
10003baa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003bae:	4313      	orrs	r3, r2
10003bb0:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003bb2:	f7fd fdcf 	bl	10001754 <HAL_GetTick>
10003bb6:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10003bb8:	e008      	b.n	10003bcc <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10003bba:	f7fd fdcb 	bl	10001754 <HAL_GetTick>
10003bbe:	4602      	mov	r2, r0
10003bc0:	68bb      	ldr	r3, [r7, #8]
10003bc2:	1ad3      	subs	r3, r2, r3
10003bc4:	2b64      	cmp	r3, #100	; 0x64
10003bc6:	d901      	bls.n	10003bcc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
10003bc8:	2303      	movs	r3, #3
10003bca:	e173      	b.n	10003eb4 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10003bcc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003bd0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003bd4:	f003 0304 	and.w	r3, r3, #4
10003bd8:	2b04      	cmp	r3, #4
10003bda:	d1ee      	bne.n	10003bba <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10003bdc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003be0:	699b      	ldr	r3, [r3, #24]
10003be2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
10003be6:	687b      	ldr	r3, [r7, #4]
10003be8:	691b      	ldr	r3, [r3, #16]
10003bea:	021b      	lsls	r3, r3, #8
10003bec:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003bf0:	4313      	orrs	r3, r2
10003bf2:	618b      	str	r3, [r1, #24]
10003bf4:	e01a      	b.n	10003c2c <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
10003bf6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003bfa:	2201      	movs	r2, #1
10003bfc:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003bfe:	f7fd fda9 	bl	10001754 <HAL_GetTick>
10003c02:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10003c04:	e008      	b.n	10003c18 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10003c06:	f7fd fda5 	bl	10001754 <HAL_GetTick>
10003c0a:	4602      	mov	r2, r0
10003c0c:	68bb      	ldr	r3, [r7, #8]
10003c0e:	1ad3      	subs	r3, r2, r3
10003c10:	2b64      	cmp	r3, #100	; 0x64
10003c12:	d901      	bls.n	10003c18 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
10003c14:	2303      	movs	r3, #3
10003c16:	e14d      	b.n	10003eb4 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10003c18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c1c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003c20:	f003 0301 	and.w	r3, r3, #1
10003c24:	2b01      	cmp	r3, #1
10003c26:	d0ee      	beq.n	10003c06 <HAL_RCC_OscConfig+0x3aa>
10003c28:	e000      	b.n	10003c2c <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10003c2a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
10003c2c:	687b      	ldr	r3, [r7, #4]
10003c2e:	681b      	ldr	r3, [r3, #0]
10003c30:	f003 0310 	and.w	r3, r3, #16
10003c34:	2b00      	cmp	r3, #0
10003c36:	f000 8091 	beq.w	10003d5c <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
10003c3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c3e:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10003c42:	f003 0303 	and.w	r3, r3, #3
10003c46:	2b02      	cmp	r3, #2
10003c48:	d107      	bne.n	10003c5a <HAL_RCC_OscConfig+0x3fe>
10003c4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c4e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003c52:	f003 0302 	and.w	r3, r3, #2
10003c56:	2b02      	cmp	r3, #2
10003c58:	d01e      	beq.n	10003c98 <HAL_RCC_OscConfig+0x43c>
10003c5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003c60:	f003 0303 	and.w	r3, r3, #3
10003c64:	2b02      	cmp	r3, #2
10003c66:	d107      	bne.n	10003c78 <HAL_RCC_OscConfig+0x41c>
10003c68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003c6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003c72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003c76:	d00f      	beq.n	10003c98 <HAL_RCC_OscConfig+0x43c>
10003c78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c7c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10003c80:	f003 0303 	and.w	r3, r3, #3
10003c84:	2b02      	cmp	r3, #2
10003c86:	d122      	bne.n	10003cce <HAL_RCC_OscConfig+0x472>
10003c88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c8c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003c90:	f003 0302 	and.w	r3, r3, #2
10003c94:	2b02      	cmp	r3, #2
10003c96:	d11a      	bne.n	10003cce <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10003c98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c9c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003ca0:	f003 0310 	and.w	r3, r3, #16
10003ca4:	2b10      	cmp	r3, #16
10003ca6:	d105      	bne.n	10003cb4 <HAL_RCC_OscConfig+0x458>
10003ca8:	687b      	ldr	r3, [r7, #4]
10003caa:	69db      	ldr	r3, [r3, #28]
10003cac:	2b10      	cmp	r3, #16
10003cae:	d001      	beq.n	10003cb4 <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
10003cb0:	2301      	movs	r3, #1
10003cb2:	e0ff      	b.n	10003eb4 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10003cb4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003cb8:	69db      	ldr	r3, [r3, #28]
10003cba:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
10003cbe:	687b      	ldr	r3, [r7, #4]
10003cc0:	6a1b      	ldr	r3, [r3, #32]
10003cc2:	021b      	lsls	r3, r3, #8
10003cc4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003cc8:	4313      	orrs	r3, r2
10003cca:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10003ccc:	e046      	b.n	10003d5c <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
10003cce:	687b      	ldr	r3, [r7, #4]
10003cd0:	69db      	ldr	r3, [r3, #28]
10003cd2:	2b00      	cmp	r3, #0
10003cd4:	d029      	beq.n	10003d2a <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
10003cd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003cda:	68db      	ldr	r3, [r3, #12]
10003cdc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003ce0:	f043 0310 	orr.w	r3, r3, #16
10003ce4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003ce6:	f7fd fd35 	bl	10001754 <HAL_GetTick>
10003cea:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10003cec:	e008      	b.n	10003d00 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10003cee:	f7fd fd31 	bl	10001754 <HAL_GetTick>
10003cf2:	4602      	mov	r2, r0
10003cf4:	68bb      	ldr	r3, [r7, #8]
10003cf6:	1ad3      	subs	r3, r2, r3
10003cf8:	2b64      	cmp	r3, #100	; 0x64
10003cfa:	d901      	bls.n	10003d00 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
10003cfc:	2303      	movs	r3, #3
10003cfe:	e0d9      	b.n	10003eb4 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10003d00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d04:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003d08:	f003 0310 	and.w	r3, r3, #16
10003d0c:	2b10      	cmp	r3, #16
10003d0e:	d1ee      	bne.n	10003cee <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10003d10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d14:	69db      	ldr	r3, [r3, #28]
10003d16:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
10003d1a:	687b      	ldr	r3, [r7, #4]
10003d1c:	6a1b      	ldr	r3, [r3, #32]
10003d1e:	021b      	lsls	r3, r3, #8
10003d20:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003d24:	4313      	orrs	r3, r2
10003d26:	61cb      	str	r3, [r1, #28]
10003d28:	e018      	b.n	10003d5c <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
10003d2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d2e:	2210      	movs	r2, #16
10003d30:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003d32:	f7fd fd0f 	bl	10001754 <HAL_GetTick>
10003d36:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10003d38:	e008      	b.n	10003d4c <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10003d3a:	f7fd fd0b 	bl	10001754 <HAL_GetTick>
10003d3e:	4602      	mov	r2, r0
10003d40:	68bb      	ldr	r3, [r7, #8]
10003d42:	1ad3      	subs	r3, r2, r3
10003d44:	2b64      	cmp	r3, #100	; 0x64
10003d46:	d901      	bls.n	10003d4c <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
10003d48:	2303      	movs	r3, #3
10003d4a:	e0b3      	b.n	10003eb4 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10003d4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d50:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003d54:	f003 0310 	and.w	r3, r3, #16
10003d58:	2b10      	cmp	r3, #16
10003d5a:	d0ee      	beq.n	10003d3a <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
10003d5c:	687b      	ldr	r3, [r7, #4]
10003d5e:	681b      	ldr	r3, [r3, #0]
10003d60:	f003 0308 	and.w	r3, r3, #8
10003d64:	2b00      	cmp	r3, #0
10003d66:	d042      	beq.n	10003dee <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
10003d68:	687b      	ldr	r3, [r7, #4]
10003d6a:	699b      	ldr	r3, [r3, #24]
10003d6c:	2b00      	cmp	r3, #0
10003d6e:	d01f      	beq.n	10003db0 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
10003d70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d74:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10003d78:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003d7c:	f043 0301 	orr.w	r3, r3, #1
10003d80:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10003d84:	f7fd fce6 	bl	10001754 <HAL_GetTick>
10003d88:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10003d8a:	e008      	b.n	10003d9e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10003d8c:	f7fd fce2 	bl	10001754 <HAL_GetTick>
10003d90:	4602      	mov	r2, r0
10003d92:	68bb      	ldr	r3, [r7, #8]
10003d94:	1ad3      	subs	r3, r2, r3
10003d96:	2b64      	cmp	r3, #100	; 0x64
10003d98:	d901      	bls.n	10003d9e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
10003d9a:	2303      	movs	r3, #3
10003d9c:	e08a      	b.n	10003eb4 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10003d9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003da2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10003da6:	f003 0302 	and.w	r3, r3, #2
10003daa:	2b02      	cmp	r3, #2
10003dac:	d1ee      	bne.n	10003d8c <HAL_RCC_OscConfig+0x530>
10003dae:	e01e      	b.n	10003dee <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10003db0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003db4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10003db8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003dbc:	f023 0301 	bic.w	r3, r3, #1
10003dc0:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10003dc4:	f7fd fcc6 	bl	10001754 <HAL_GetTick>
10003dc8:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10003dca:	e008      	b.n	10003dde <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10003dcc:	f7fd fcc2 	bl	10001754 <HAL_GetTick>
10003dd0:	4602      	mov	r2, r0
10003dd2:	68bb      	ldr	r3, [r7, #8]
10003dd4:	1ad3      	subs	r3, r2, r3
10003dd6:	2b64      	cmp	r3, #100	; 0x64
10003dd8:	d901      	bls.n	10003dde <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
10003dda:	2303      	movs	r3, #3
10003ddc:	e06a      	b.n	10003eb4 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10003dde:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003de2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10003de6:	f003 0302 	and.w	r3, r3, #2
10003dea:	2b02      	cmp	r3, #2
10003dec:	d0ee      	beq.n	10003dcc <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
10003dee:	687b      	ldr	r3, [r7, #4]
10003df0:	681b      	ldr	r3, [r3, #0]
10003df2:	f003 0304 	and.w	r3, r3, #4
10003df6:	2b00      	cmp	r3, #0
10003df8:	d02b      	beq.n	10003e52 <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
10003dfa:	4b07      	ldr	r3, [pc, #28]	; (10003e18 <HAL_RCC_OscConfig+0x5bc>)
10003dfc:	681b      	ldr	r3, [r3, #0]
10003dfe:	4a06      	ldr	r2, [pc, #24]	; (10003e18 <HAL_RCC_OscConfig+0x5bc>)
10003e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10003e04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
10003e06:	f7fd fca5 	bl	10001754 <HAL_GetTick>
10003e0a:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10003e0c:	e00f      	b.n	10003e2e <HAL_RCC_OscConfig+0x5d2>
10003e0e:	bf00      	nop
10003e10:	10020000 	.word	0x10020000
10003e14:	10020004 	.word	0x10020004
10003e18:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10003e1c:	f7fd fc9a 	bl	10001754 <HAL_GetTick>
10003e20:	4602      	mov	r2, r0
10003e22:	68bb      	ldr	r3, [r7, #8]
10003e24:	1ad3      	subs	r3, r2, r3
10003e26:	2b64      	cmp	r3, #100	; 0x64
10003e28:	d901      	bls.n	10003e2e <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
10003e2a:	2303      	movs	r3, #3
10003e2c:	e042      	b.n	10003eb4 <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10003e2e:	4b23      	ldr	r3, [pc, #140]	; (10003ebc <HAL_RCC_OscConfig+0x660>)
10003e30:	681b      	ldr	r3, [r3, #0]
10003e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
10003e36:	2b00      	cmp	r3, #0
10003e38:	d0f0      	beq.n	10003e1c <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
10003e3a:	687b      	ldr	r3, [r7, #4]
10003e3c:	689b      	ldr	r3, [r3, #8]
10003e3e:	4618      	mov	r0, r3
10003e40:	f000 f8a9 	bl	10003f96 <HAL_RCC_LSEConfig>
10003e44:	4603      	mov	r3, r0
10003e46:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
10003e48:	7bfb      	ldrb	r3, [r7, #15]
10003e4a:	2b00      	cmp	r3, #0
10003e4c:	d001      	beq.n	10003e52 <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
10003e4e:	7bfb      	ldrb	r3, [r7, #15]
10003e50:	e030      	b.n	10003eb4 <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
10003e52:	687b      	ldr	r3, [r7, #4]
10003e54:	3324      	adds	r3, #36	; 0x24
10003e56:	4618      	mov	r0, r3
10003e58:	f000 f91a 	bl	10004090 <RCC_PLL1_Config>
10003e5c:	4603      	mov	r3, r0
10003e5e:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10003e60:	7bfb      	ldrb	r3, [r7, #15]
10003e62:	2b00      	cmp	r3, #0
10003e64:	d001      	beq.n	10003e6a <HAL_RCC_OscConfig+0x60e>
  {
    return result;
10003e66:	7bfb      	ldrb	r3, [r7, #15]
10003e68:	e024      	b.n	10003eb4 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
10003e6a:	687b      	ldr	r3, [r7, #4]
10003e6c:	3360      	adds	r3, #96	; 0x60
10003e6e:	4618      	mov	r0, r3
10003e70:	f001 f9cc 	bl	1000520c <RCCEx_PLL2_Config>
10003e74:	4603      	mov	r3, r0
10003e76:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10003e78:	7bfb      	ldrb	r3, [r7, #15]
10003e7a:	2b00      	cmp	r3, #0
10003e7c:	d001      	beq.n	10003e82 <HAL_RCC_OscConfig+0x626>
  {
    return result;
10003e7e:	7bfb      	ldrb	r3, [r7, #15]
10003e80:	e018      	b.n	10003eb4 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
10003e82:	687b      	ldr	r3, [r7, #4]
10003e84:	339c      	adds	r3, #156	; 0x9c
10003e86:	4618      	mov	r0, r3
10003e88:	f001 fb42 	bl	10005510 <RCCEx_PLL3_Config>
10003e8c:	4603      	mov	r3, r0
10003e8e:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10003e90:	7bfb      	ldrb	r3, [r7, #15]
10003e92:	2b00      	cmp	r3, #0
10003e94:	d001      	beq.n	10003e9a <HAL_RCC_OscConfig+0x63e>
  {
    return result;
10003e96:	7bfb      	ldrb	r3, [r7, #15]
10003e98:	e00c      	b.n	10003eb4 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
10003e9a:	687b      	ldr	r3, [r7, #4]
10003e9c:	33d8      	adds	r3, #216	; 0xd8
10003e9e:	4618      	mov	r0, r3
10003ea0:	f001 fca0 	bl	100057e4 <RCCEx_PLL4_Config>
10003ea4:	4603      	mov	r3, r0
10003ea6:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10003ea8:	7bfb      	ldrb	r3, [r7, #15]
10003eaa:	2b00      	cmp	r3, #0
10003eac:	d001      	beq.n	10003eb2 <HAL_RCC_OscConfig+0x656>
  {
    return result;
10003eae:	7bfb      	ldrb	r3, [r7, #15]
10003eb0:	e000      	b.n	10003eb4 <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
10003eb2:	2300      	movs	r3, #0
}
10003eb4:	4618      	mov	r0, r3
10003eb6:	3710      	adds	r7, #16
10003eb8:	46bd      	mov	sp, r7
10003eba:	bd80      	pop	{r7, pc}
10003ebc:	50001000 	.word	0x50001000

10003ec0 <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
10003ec0:	b580      	push	{r7, lr}
10003ec2:	b084      	sub	sp, #16
10003ec4:	af00      	add	r7, sp, #0
10003ec6:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
10003ec8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ecc:	f44f 7280 	mov.w	r2, #256	; 0x100
10003ed0:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10003ed2:	f7fd fc3f 	bl	10001754 <HAL_GetTick>
10003ed6:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10003ed8:	e008      	b.n	10003eec <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10003eda:	f7fd fc3b 	bl	10001754 <HAL_GetTick>
10003ede:	4602      	mov	r2, r0
10003ee0:	68fb      	ldr	r3, [r7, #12]
10003ee2:	1ad3      	subs	r3, r2, r3
10003ee4:	2b64      	cmp	r3, #100	; 0x64
10003ee6:	d901      	bls.n	10003eec <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
10003ee8:	2303      	movs	r3, #3
10003eea:	e050      	b.n	10003f8e <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10003eec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ef0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
10003ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10003efc:	d0ed      	beq.n	10003eda <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
10003efe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f02:	f44f 6290 	mov.w	r2, #1152	; 0x480
10003f06:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
10003f08:	687b      	ldr	r3, [r7, #4]
10003f0a:	2b00      	cmp	r3, #0
10003f0c:	d03e      	beq.n	10003f8c <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
10003f0e:	687b      	ldr	r3, [r7, #4]
10003f10:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
10003f14:	d108      	bne.n	10003f28 <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10003f16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f1a:	68db      	ldr	r3, [r3, #12]
10003f1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003f20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
10003f24:	60d3      	str	r3, [r2, #12]
10003f26:	e013      	b.n	10003f50 <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
10003f28:	687b      	ldr	r3, [r7, #4]
10003f2a:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
10003f2e:	d10f      	bne.n	10003f50 <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
10003f30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f34:	68db      	ldr	r3, [r3, #12]
10003f36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
10003f3e:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10003f40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f44:	68db      	ldr	r3, [r3, #12]
10003f46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003f4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
10003f4e:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
10003f50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f54:	68db      	ldr	r3, [r3, #12]
10003f56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10003f5e:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10003f60:	f7fd fbf8 	bl	10001754 <HAL_GetTick>
10003f64:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10003f66:	e008      	b.n	10003f7a <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10003f68:	f7fd fbf4 	bl	10001754 <HAL_GetTick>
10003f6c:	4602      	mov	r2, r0
10003f6e:	68fb      	ldr	r3, [r7, #12]
10003f70:	1ad3      	subs	r3, r2, r3
10003f72:	2b64      	cmp	r3, #100	; 0x64
10003f74:	d901      	bls.n	10003f7a <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
10003f76:	2303      	movs	r3, #3
10003f78:	e009      	b.n	10003f8e <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10003f7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f7e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
10003f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10003f8a:	d1ed      	bne.n	10003f68 <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
10003f8c:	2300      	movs	r3, #0
}
10003f8e:	4618      	mov	r0, r3
10003f90:	3710      	adds	r7, #16
10003f92:	46bd      	mov	sp, r7
10003f94:	bd80      	pop	{r7, pc}

10003f96 <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
10003f96:	b580      	push	{r7, lr}
10003f98:	b084      	sub	sp, #16
10003f9a:	af00      	add	r7, sp, #0
10003f9c:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10003f9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003fa2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10003fa6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003faa:	f023 0301 	bic.w	r3, r3, #1
10003fae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10003fb2:	f7fd fbcf 	bl	10001754 <HAL_GetTick>
10003fb6:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10003fb8:	e00a      	b.n	10003fd0 <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10003fba:	f7fd fbcb 	bl	10001754 <HAL_GetTick>
10003fbe:	4602      	mov	r2, r0
10003fc0:	68fb      	ldr	r3, [r7, #12]
10003fc2:	1ad3      	subs	r3, r2, r3
10003fc4:	f241 3288 	movw	r2, #5000	; 0x1388
10003fc8:	4293      	cmp	r3, r2
10003fca:	d901      	bls.n	10003fd0 <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
10003fcc:	2303      	movs	r3, #3
10003fce:	e05b      	b.n	10004088 <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10003fd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003fd4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10003fd8:	f003 0304 	and.w	r3, r3, #4
10003fdc:	2b04      	cmp	r3, #4
10003fde:	d0ec      	beq.n	10003fba <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
10003fe0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003fe4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10003fe8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003fec:	f023 030a 	bic.w	r3, r3, #10
10003ff0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
10003ff4:	687b      	ldr	r3, [r7, #4]
10003ff6:	2b00      	cmp	r3, #0
10003ff8:	d045      	beq.n	10004086 <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
10003ffa:	687b      	ldr	r3, [r7, #4]
10003ffc:	2b03      	cmp	r3, #3
10003ffe:	d10a      	bne.n	10004016 <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10004000:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004004:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10004008:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000400c:	f043 0302 	orr.w	r3, r3, #2
10004010:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
10004014:	e016      	b.n	10004044 <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
10004016:	687b      	ldr	r3, [r7, #4]
10004018:	2b0b      	cmp	r3, #11
1000401a:	d113      	bne.n	10004044 <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
1000401c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004020:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10004024:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004028:	f043 0308 	orr.w	r3, r3, #8
1000402c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10004030:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004034:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10004038:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000403c:	f043 0302 	orr.w	r3, r3, #2
10004040:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10004044:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004048:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000404c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004050:	f043 0301 	orr.w	r3, r3, #1
10004054:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004058:	f7fd fb7c 	bl	10001754 <HAL_GetTick>
1000405c:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
1000405e:	e00a      	b.n	10004076 <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10004060:	f7fd fb78 	bl	10001754 <HAL_GetTick>
10004064:	4602      	mov	r2, r0
10004066:	68fb      	ldr	r3, [r7, #12]
10004068:	1ad3      	subs	r3, r2, r3
1000406a:	f241 3288 	movw	r2, #5000	; 0x1388
1000406e:	4293      	cmp	r3, r2
10004070:	d901      	bls.n	10004076 <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
10004072:	2303      	movs	r3, #3
10004074:	e008      	b.n	10004088 <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10004076:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000407a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000407e:	f003 0304 	and.w	r3, r3, #4
10004082:	2b04      	cmp	r3, #4
10004084:	d1ec      	bne.n	10004060 <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
10004086:	2300      	movs	r3, #0
}
10004088:	4618      	mov	r0, r3
1000408a:	3710      	adds	r7, #16
1000408c:	46bd      	mov	sp, r7
1000408e:	bd80      	pop	{r7, pc}

10004090 <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
10004090:	b580      	push	{r7, lr}
10004092:	b084      	sub	sp, #16
10004094:	af00      	add	r7, sp, #0
10004096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
10004098:	687b      	ldr	r3, [r7, #4]
1000409a:	681b      	ldr	r3, [r3, #0]
1000409c:	2b00      	cmp	r3, #0
1000409e:	f000 8174 	beq.w	1000438a <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
100040a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100040a6:	6a1b      	ldr	r3, [r3, #32]
100040a8:	f003 0303 	and.w	r3, r3, #3
100040ac:	2b02      	cmp	r3, #2
100040ae:	d108      	bne.n	100040c2 <RCC_PLL1_Config+0x32>
100040b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100040b4:	6a1b      	ldr	r3, [r3, #32]
100040b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100040ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100040be:	f000 8162 	beq.w	10004386 <RCC_PLL1_Config+0x2f6>
100040c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100040c6:	6a1b      	ldr	r3, [r3, #32]
100040c8:	f003 0303 	and.w	r3, r3, #3
100040cc:	2b03      	cmp	r3, #3
100040ce:	d108      	bne.n	100040e2 <RCC_PLL1_Config+0x52>
100040d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100040d4:	6a1b      	ldr	r3, [r3, #32]
100040d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100040da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100040de:	f000 8152 	beq.w	10004386 <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
100040e2:	687b      	ldr	r3, [r7, #4]
100040e4:	681b      	ldr	r3, [r3, #0]
100040e6:	2b02      	cmp	r3, #2
100040e8:	f040 8123 	bne.w	10004332 <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100040ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100040f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100040f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100040f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100040fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
10004100:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004104:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004108:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000410c:	f023 0301 	bic.w	r3, r3, #1
10004110:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10004114:	f7fd fb1e 	bl	10001754 <HAL_GetTick>
10004118:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
1000411a:	e008      	b.n	1000412e <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000411c:	f7fd fb1a 	bl	10001754 <HAL_GetTick>
10004120:	4602      	mov	r2, r0
10004122:	68fb      	ldr	r3, [r7, #12]
10004124:	1ad3      	subs	r3, r2, r3
10004126:	2b64      	cmp	r3, #100	; 0x64
10004128:	d901      	bls.n	1000412e <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
1000412a:	2303      	movs	r3, #3
1000412c:	e12e      	b.n	1000438c <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
1000412e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004136:	f003 0302 	and.w	r3, r3, #2
1000413a:	2b02      	cmp	r3, #2
1000413c:	d0ee      	beq.n	1000411c <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
1000413e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004144:	f003 0307 	and.w	r3, r3, #7
10004148:	2b02      	cmp	r3, #2
1000414a:	d112      	bne.n	10004172 <RCC_PLL1_Config+0xe2>
1000414c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004152:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000415a:	d10a      	bne.n	10004172 <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
1000415c:	687b      	ldr	r3, [r7, #4]
1000415e:	685a      	ldr	r2, [r3, #4]
10004160:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004166:	f003 0303 	and.w	r3, r3, #3
1000416a:	429a      	cmp	r2, r3
1000416c:	d00c      	beq.n	10004188 <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
1000416e:	2301      	movs	r3, #1
10004170:	e10c      	b.n	1000438c <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
10004172:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004178:	f023 0203 	bic.w	r2, r3, #3
1000417c:	687b      	ldr	r3, [r7, #4]
1000417e:	685b      	ldr	r3, [r3, #4]
10004180:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004184:	4313      	orrs	r3, r2
10004186:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10004188:	e008      	b.n	1000419c <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000418a:	f7fd fae3 	bl	10001754 <HAL_GetTick>
1000418e:	4602      	mov	r2, r0
10004190:	68fb      	ldr	r3, [r7, #12]
10004192:	1ad3      	subs	r3, r2, r3
10004194:	2b64      	cmp	r3, #100	; 0x64
10004196:	d901      	bls.n	1000419c <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
10004198:	2303      	movs	r3, #3
1000419a:	e0f7      	b.n	1000438c <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
1000419c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100041a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100041a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100041a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100041aa:	d1ee      	bne.n	1000418a <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
100041ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100041b0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
100041b4:	4b77      	ldr	r3, [pc, #476]	; (10004394 <RCC_PLL1_Config+0x304>)
100041b6:	4013      	ands	r3, r2
100041b8:	687a      	ldr	r2, [r7, #4]
100041ba:	68d2      	ldr	r2, [r2, #12]
100041bc:	1e51      	subs	r1, r2, #1
100041be:	687a      	ldr	r2, [r7, #4]
100041c0:	6892      	ldr	r2, [r2, #8]
100041c2:	3a01      	subs	r2, #1
100041c4:	0412      	lsls	r2, r2, #16
100041c6:	430a      	orrs	r2, r1
100041c8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100041cc:	4313      	orrs	r3, r2
100041ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
100041d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100041d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
100041da:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
100041de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
100041e2:	687a      	ldr	r2, [r7, #4]
100041e4:	6912      	ldr	r2, [r2, #16]
100041e6:	1e51      	subs	r1, r2, #1
100041e8:	687a      	ldr	r2, [r7, #4]
100041ea:	6952      	ldr	r2, [r2, #20]
100041ec:	3a01      	subs	r2, #1
100041ee:	0212      	lsls	r2, r2, #8
100041f0:	4311      	orrs	r1, r2
100041f2:	687a      	ldr	r2, [r7, #4]
100041f4:	6992      	ldr	r2, [r2, #24]
100041f6:	3a01      	subs	r2, #1
100041f8:	0412      	lsls	r2, r2, #16
100041fa:	430a      	orrs	r2, r1
100041fc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004200:	4313      	orrs	r3, r2
10004202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
10004206:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000420a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
1000420e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10004216:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
1000421a:	687b      	ldr	r3, [r7, #4]
1000421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000421e:	2b02      	cmp	r3, #2
10004220:	d003      	beq.n	1000422a <RCC_PLL1_Config+0x19a>
10004222:	687b      	ldr	r3, [r7, #4]
10004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004226:	2b00      	cmp	r3, #0
10004228:	d10c      	bne.n	10004244 <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
1000422a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000422e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10004232:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000423a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
1000423e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
10004242:	e00f      	b.n	10004264 <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
10004244:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
1000424c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10004250:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10004254:	687a      	ldr	r2, [r7, #4]
10004256:	6a12      	ldr	r2, [r2, #32]
10004258:	00d2      	lsls	r2, r2, #3
1000425a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000425e:	4313      	orrs	r3, r2
10004260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
10004264:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
1000426c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10004274:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10004278:	687b      	ldr	r3, [r7, #4]
1000427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000427c:	2b02      	cmp	r3, #2
1000427e:	d124      	bne.n	100042ca <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
10004280:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
10004288:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
1000428c:	687b      	ldr	r3, [r7, #4]
1000428e:	6a99      	ldr	r1, [r3, #40]	; 0x28
10004290:	687b      	ldr	r3, [r7, #4]
10004292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10004294:	4319      	orrs	r1, r3
10004296:	687b      	ldr	r3, [r7, #4]
10004298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000429a:	4319      	orrs	r1, r3
1000429c:	687b      	ldr	r3, [r7, #4]
1000429e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100042a0:	4319      	orrs	r1, r3
100042a2:	687b      	ldr	r3, [r7, #4]
100042a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100042a6:	041b      	lsls	r3, r3, #16
100042a8:	430b      	orrs	r3, r1
100042aa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100042ae:	4313      	orrs	r3, r2
100042b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
100042b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100042b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100042bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100042c0:	f043 0304 	orr.w	r3, r3, #4
100042c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
100042c8:	e009      	b.n	100042de <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
100042ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100042ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100042d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100042d6:	f023 0304 	bic.w	r3, r3, #4
100042da:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
100042de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100042e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100042e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100042ea:	f043 0301 	orr.w	r3, r3, #1
100042ee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100042f2:	f7fd fa2f 	bl	10001754 <HAL_GetTick>
100042f6:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100042f8:	e008      	b.n	1000430c <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100042fa:	f7fd fa2b 	bl	10001754 <HAL_GetTick>
100042fe:	4602      	mov	r2, r0
10004300:	68fb      	ldr	r3, [r7, #12]
10004302:	1ad3      	subs	r3, r2, r3
10004304:	2b64      	cmp	r3, #100	; 0x64
10004306:	d901      	bls.n	1000430c <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
10004308:	2303      	movs	r3, #3
1000430a:	e03f      	b.n	1000438c <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
1000430c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004314:	f003 0302 	and.w	r3, r3, #2
10004318:	2b02      	cmp	r3, #2
1000431a:	d1ee      	bne.n	100042fa <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
1000431c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004324:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004328:	f043 0370 	orr.w	r3, r3, #112	; 0x70
1000432c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
10004330:	e02b      	b.n	1000438a <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10004332:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000433a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000433e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10004342:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
10004346:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000434a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000434e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004352:	f023 0301 	bic.w	r3, r3, #1
10004356:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000435a:	f7fd f9fb 	bl	10001754 <HAL_GetTick>
1000435e:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10004360:	e008      	b.n	10004374 <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10004362:	f7fd f9f7 	bl	10001754 <HAL_GetTick>
10004366:	4602      	mov	r2, r0
10004368:	68fb      	ldr	r3, [r7, #12]
1000436a:	1ad3      	subs	r3, r2, r3
1000436c:	2b64      	cmp	r3, #100	; 0x64
1000436e:	d901      	bls.n	10004374 <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
10004370:	2303      	movs	r3, #3
10004372:	e00b      	b.n	1000438c <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10004374:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000437c:	f003 0302 	and.w	r3, r3, #2
10004380:	2b02      	cmp	r3, #2
10004382:	d0ee      	beq.n	10004362 <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
10004384:	e001      	b.n	1000438a <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10004386:	2301      	movs	r3, #1
10004388:	e000      	b.n	1000438c <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
1000438a:	2300      	movs	r3, #0

}
1000438c:	4618      	mov	r0, r3
1000438e:	3710      	adds	r7, #16
10004390:	46bd      	mov	sp, r7
10004392:	bd80      	pop	{r7, pc}
10004394:	ffc0fe00 	.word	0xffc0fe00

10004398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
10004398:	b580      	push	{r7, lr}
1000439a:	b084      	sub	sp, #16
1000439c:	af00      	add	r7, sp, #0
1000439e:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
100043a0:	2300      	movs	r3, #0
100043a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
100043a4:	687b      	ldr	r3, [r7, #4]
100043a6:	2b00      	cmp	r3, #0
100043a8:	d101      	bne.n	100043ae <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
100043aa:	2301      	movs	r3, #1
100043ac:	e102      	b.n	100045b4 <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
100043ae:	687b      	ldr	r3, [r7, #4]
100043b0:	681b      	ldr	r3, [r3, #0]
100043b2:	f003 0301 	and.w	r3, r3, #1
100043b6:	2b00      	cmp	r3, #0
100043b8:	d00b      	beq.n	100043d2 <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
100043ba:	687b      	ldr	r3, [r7, #4]
100043bc:	3304      	adds	r3, #4
100043be:	4618      	mov	r0, r3
100043c0:	f000 f8fc 	bl	100045bc <RCC_MPUConfig>
100043c4:	4603      	mov	r3, r0
100043c6:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
100043c8:	7bfb      	ldrb	r3, [r7, #15]
100043ca:	2b00      	cmp	r3, #0
100043cc:	d001      	beq.n	100043d2 <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
100043ce:	7bfb      	ldrb	r3, [r7, #15]
100043d0:	e0f0      	b.n	100045b4 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
100043d2:	687b      	ldr	r3, [r7, #4]
100043d4:	681b      	ldr	r3, [r3, #0]
100043d6:	f003 0302 	and.w	r3, r3, #2
100043da:	2b00      	cmp	r3, #0
100043dc:	d00b      	beq.n	100043f6 <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
100043de:	687b      	ldr	r3, [r7, #4]
100043e0:	330c      	adds	r3, #12
100043e2:	4618      	mov	r0, r3
100043e4:	f000 f960 	bl	100046a8 <RCC_AXISSConfig>
100043e8:	4603      	mov	r3, r0
100043ea:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
100043ec:	7bfb      	ldrb	r3, [r7, #15]
100043ee:	2b00      	cmp	r3, #0
100043f0:	d001      	beq.n	100043f6 <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
100043f2:	7bfb      	ldrb	r3, [r7, #15]
100043f4:	e0de      	b.n	100045b4 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
100043f6:	687b      	ldr	r3, [r7, #4]
100043f8:	681b      	ldr	r3, [r3, #0]
100043fa:	f003 0304 	and.w	r3, r3, #4
100043fe:	2b00      	cmp	r3, #0
10004400:	d00b      	beq.n	1000441a <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
10004402:	687b      	ldr	r3, [r7, #4]
10004404:	3314      	adds	r3, #20
10004406:	4618      	mov	r0, r3
10004408:	f000 f9e6 	bl	100047d8 <RCC_MCUConfig>
1000440c:	4603      	mov	r3, r0
1000440e:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10004410:	7bfb      	ldrb	r3, [r7, #15]
10004412:	2b00      	cmp	r3, #0
10004414:	d001      	beq.n	1000441a <HAL_RCC_ClockConfig+0x82>
    {
      return status;
10004416:	7bfb      	ldrb	r3, [r7, #15]
10004418:	e0cc      	b.n	100045b4 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
1000441a:	687b      	ldr	r3, [r7, #4]
1000441c:	681b      	ldr	r3, [r3, #0]
1000441e:	f003 0308 	and.w	r3, r3, #8
10004422:	2b00      	cmp	r3, #0
10004424:	d020      	beq.n	10004468 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
10004426:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000442a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000442c:	f023 0207 	bic.w	r2, r3, #7
10004430:	687b      	ldr	r3, [r7, #4]
10004432:	69db      	ldr	r3, [r3, #28]
10004434:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004438:	4313      	orrs	r3, r2
1000443a:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000443c:	f7fd f98a 	bl	10001754 <HAL_GetTick>
10004440:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10004442:	e009      	b.n	10004458 <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004444:	f7fd f986 	bl	10001754 <HAL_GetTick>
10004448:	4602      	mov	r2, r0
1000444a:	68bb      	ldr	r3, [r7, #8]
1000444c:	1ad3      	subs	r3, r2, r3
1000444e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004452:	d901      	bls.n	10004458 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
10004454:	2303      	movs	r3, #3
10004456:	e0ad      	b.n	100045b4 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10004458:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000445c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000445e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004462:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004466:	d1ed      	bne.n	10004444 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
10004468:	687b      	ldr	r3, [r7, #4]
1000446a:	681b      	ldr	r3, [r3, #0]
1000446c:	f003 0310 	and.w	r3, r3, #16
10004470:	2b00      	cmp	r3, #0
10004472:	d020      	beq.n	100044b6 <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
10004474:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000447a:	f023 0207 	bic.w	r2, r3, #7
1000447e:	687b      	ldr	r3, [r7, #4]
10004480:	6a1b      	ldr	r3, [r3, #32]
10004482:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004486:	4313      	orrs	r3, r2
10004488:	640b      	str	r3, [r1, #64]	; 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000448a:	f7fd f963 	bl	10001754 <HAL_GetTick>
1000448e:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10004490:	e009      	b.n	100044a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004492:	f7fd f95f 	bl	10001754 <HAL_GetTick>
10004496:	4602      	mov	r2, r0
10004498:	68bb      	ldr	r3, [r7, #8]
1000449a:	1ad3      	subs	r3, r2, r3
1000449c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100044a0:	d901      	bls.n	100044a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
100044a2:	2303      	movs	r3, #3
100044a4:	e086      	b.n	100045b4 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
100044a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100044ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100044b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100044b4:	d1ed      	bne.n	10004492 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
100044b6:	687b      	ldr	r3, [r7, #4]
100044b8:	681b      	ldr	r3, [r3, #0]
100044ba:	f003 0320 	and.w	r3, r3, #32
100044be:	2b00      	cmp	r3, #0
100044c0:	d023      	beq.n	1000450a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
100044c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044c6:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
100044ca:	f023 0207 	bic.w	r2, r3, #7
100044ce:	687b      	ldr	r3, [r7, #4]
100044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100044d2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100044d6:	4313      	orrs	r3, r2
100044d8:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100044dc:	f7fd f93a 	bl	10001754 <HAL_GetTick>
100044e0:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
100044e2:	e009      	b.n	100044f8 <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100044e4:	f7fd f936 	bl	10001754 <HAL_GetTick>
100044e8:	4602      	mov	r2, r0
100044ea:	68bb      	ldr	r3, [r7, #8]
100044ec:	1ad3      	subs	r3, r2, r3
100044ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100044f2:	d901      	bls.n	100044f8 <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
100044f4:	2303      	movs	r3, #3
100044f6:	e05d      	b.n	100045b4 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
100044f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044fc:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10004500:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004504:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004508:	d1ec      	bne.n	100044e4 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
1000450a:	687b      	ldr	r3, [r7, #4]
1000450c:	681b      	ldr	r3, [r3, #0]
1000450e:	f003 0340 	and.w	r3, r3, #64	; 0x40
10004512:	2b00      	cmp	r3, #0
10004514:	d023      	beq.n	1000455e <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
10004516:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000451a:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
1000451e:	f023 0207 	bic.w	r2, r3, #7
10004522:	687b      	ldr	r3, [r7, #4]
10004524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004526:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000452a:	4313      	orrs	r3, r2
1000452c:	f8c1 3838 	str.w	r3, [r1, #2104]	; 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004530:	f7fd f910 	bl	10001754 <HAL_GetTick>
10004534:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10004536:	e009      	b.n	1000454c <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004538:	f7fd f90c 	bl	10001754 <HAL_GetTick>
1000453c:	4602      	mov	r2, r0
1000453e:	68bb      	ldr	r3, [r7, #8]
10004540:	1ad3      	subs	r3, r2, r3
10004542:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004546:	d901      	bls.n	1000454c <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
10004548:	2303      	movs	r3, #3
1000454a:	e033      	b.n	100045b4 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
1000454c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004550:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10004554:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004558:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000455c:	d1ec      	bne.n	10004538 <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
1000455e:	687b      	ldr	r3, [r7, #4]
10004560:	681b      	ldr	r3, [r3, #0]
10004562:	f003 0380 	and.w	r3, r3, #128	; 0x80
10004566:	2b00      	cmp	r3, #0
10004568:	d023      	beq.n	100045b2 <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
1000456a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000456e:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
10004572:	f023 0207 	bic.w	r2, r3, #7
10004576:	687b      	ldr	r3, [r7, #4]
10004578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000457a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000457e:	4313      	orrs	r3, r2
10004580:	f8c1 383c 	str.w	r3, [r1, #2108]	; 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004584:	f7fd f8e6 	bl	10001754 <HAL_GetTick>
10004588:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
1000458a:	e009      	b.n	100045a0 <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000458c:	f7fd f8e2 	bl	10001754 <HAL_GetTick>
10004590:	4602      	mov	r2, r0
10004592:	68bb      	ldr	r3, [r7, #8]
10004594:	1ad3      	subs	r3, r2, r3
10004596:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000459a:	d901      	bls.n	100045a0 <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
1000459c:	2303      	movs	r3, #3
1000459e:	e009      	b.n	100045b4 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
100045a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100045a4:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
100045a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100045ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100045b0:	d1ec      	bne.n	1000458c <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
100045b2:	2300      	movs	r3, #0
}
100045b4:	4618      	mov	r0, r3
100045b6:	3710      	adds	r7, #16
100045b8:	46bd      	mov	sp, r7
100045ba:	bd80      	pop	{r7, pc}

100045bc <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
100045bc:	b580      	push	{r7, lr}
100045be:	b084      	sub	sp, #16
100045c0:	af00      	add	r7, sp, #0
100045c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
100045c4:	687b      	ldr	r3, [r7, #4]
100045c6:	681b      	ldr	r3, [r3, #0]
100045c8:	2b03      	cmp	r3, #3
100045ca:	d840      	bhi.n	1000464e <RCC_MPUConfig+0x92>
100045cc:	a201      	add	r2, pc, #4	; (adr r2, 100045d4 <RCC_MPUConfig+0x18>)
100045ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100045d2:	bf00      	nop
100045d4:	100045e5 	.word	0x100045e5
100045d8:	100045f9 	.word	0x100045f9
100045dc:	1000460f 	.word	0x1000460f
100045e0:	10004623 	.word	0x10004623
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100045e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100045e8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100045ec:	f003 0301 	and.w	r3, r3, #1
100045f0:	2b01      	cmp	r3, #1
100045f2:	d02e      	beq.n	10004652 <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
100045f4:	2301      	movs	r3, #1
100045f6:	e053      	b.n	100046a0 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100045f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100045fc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004600:	f403 7380 	and.w	r3, r3, #256	; 0x100
10004604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10004608:	d025      	beq.n	10004656 <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
1000460a:	2301      	movs	r3, #1
1000460c:	e048      	b.n	100046a0 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
1000460e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004616:	f003 0302 	and.w	r3, r3, #2
1000461a:	2b02      	cmp	r3, #2
1000461c:	d01d      	beq.n	1000465a <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
1000461e:	2301      	movs	r3, #1
10004620:	e03e      	b.n	100046a0 <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10004622:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000462a:	f003 0302 	and.w	r3, r3, #2
1000462e:	2b02      	cmp	r3, #2
10004630:	d001      	beq.n	10004636 <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
10004632:	2301      	movs	r3, #1
10004634:	e034      	b.n	100046a0 <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
10004636:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000463c:	f023 0207 	bic.w	r2, r3, #7
10004640:	687b      	ldr	r3, [r7, #4]
10004642:	685b      	ldr	r3, [r3, #4]
10004644:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004648:	4313      	orrs	r3, r2
1000464a:	62cb      	str	r3, [r1, #44]	; 0x2c

      break;
1000464c:	e006      	b.n	1000465c <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
1000464e:	2301      	movs	r3, #1
10004650:	e026      	b.n	100046a0 <RCC_MPUConfig+0xe4>
      break;
10004652:	bf00      	nop
10004654:	e002      	b.n	1000465c <RCC_MPUConfig+0xa0>
      break;
10004656:	bf00      	nop
10004658:	e000      	b.n	1000465c <RCC_MPUConfig+0xa0>
      break;
1000465a:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
1000465c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004660:	6a1b      	ldr	r3, [r3, #32]
10004662:	f023 0203 	bic.w	r2, r3, #3
10004666:	687b      	ldr	r3, [r7, #4]
10004668:	681b      	ldr	r3, [r3, #0]
1000466a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000466e:	4313      	orrs	r3, r2
10004670:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10004672:	f7fd f86f 	bl	10001754 <HAL_GetTick>
10004676:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10004678:	e009      	b.n	1000468e <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000467a:	f7fd f86b 	bl	10001754 <HAL_GetTick>
1000467e:	4602      	mov	r2, r0
10004680:	68fb      	ldr	r3, [r7, #12]
10004682:	1ad3      	subs	r3, r2, r3
10004684:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004688:	d901      	bls.n	1000468e <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
1000468a:	2303      	movs	r3, #3
1000468c:	e008      	b.n	100046a0 <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
1000468e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004692:	6a1b      	ldr	r3, [r3, #32]
10004694:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004698:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000469c:	d1ed      	bne.n	1000467a <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
1000469e:	2300      	movs	r3, #0
}
100046a0:	4618      	mov	r0, r3
100046a2:	3710      	adds	r7, #16
100046a4:	46bd      	mov	sp, r7
100046a6:	bd80      	pop	{r7, pc}

100046a8 <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
100046a8:	b580      	push	{r7, lr}
100046aa:	b084      	sub	sp, #16
100046ac:	af00      	add	r7, sp, #0
100046ae:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
100046b0:	687b      	ldr	r3, [r7, #4]
100046b2:	681b      	ldr	r3, [r3, #0]
100046b4:	2b02      	cmp	r3, #2
100046b6:	d01b      	beq.n	100046f0 <RCC_AXISSConfig+0x48>
100046b8:	2b02      	cmp	r3, #2
100046ba:	d823      	bhi.n	10004704 <RCC_AXISSConfig+0x5c>
100046bc:	2b00      	cmp	r3, #0
100046be:	d002      	beq.n	100046c6 <RCC_AXISSConfig+0x1e>
100046c0:	2b01      	cmp	r3, #1
100046c2:	d00a      	beq.n	100046da <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
100046c4:	e01e      	b.n	10004704 <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100046c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100046ca:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100046ce:	f003 0301 	and.w	r3, r3, #1
100046d2:	2b01      	cmp	r3, #1
100046d4:	d018      	beq.n	10004708 <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
100046d6:	2301      	movs	r3, #1
100046d8:	e079      	b.n	100047ce <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100046da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100046de:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100046e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
100046e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100046ea:	d00f      	beq.n	1000470c <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
100046ec:	2301      	movs	r3, #1
100046ee:	e06e      	b.n	100047ce <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
100046f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100046f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100046f8:	f003 0302 	and.w	r3, r3, #2
100046fc:	2b02      	cmp	r3, #2
100046fe:	d007      	beq.n	10004710 <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
10004700:	2301      	movs	r3, #1
10004702:	e064      	b.n	100047ce <RCC_AXISSConfig+0x126>
      break;
10004704:	bf00      	nop
10004706:	e004      	b.n	10004712 <RCC_AXISSConfig+0x6a>
      break;
10004708:	bf00      	nop
1000470a:	e002      	b.n	10004712 <RCC_AXISSConfig+0x6a>
      break;
1000470c:	bf00      	nop
1000470e:	e000      	b.n	10004712 <RCC_AXISSConfig+0x6a>
      break;
10004710:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
10004712:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004718:	f023 0207 	bic.w	r2, r3, #7
1000471c:	687b      	ldr	r3, [r7, #4]
1000471e:	681b      	ldr	r3, [r3, #0]
10004720:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004724:	4313      	orrs	r3, r2
10004726:	624b      	str	r3, [r1, #36]	; 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
10004728:	687b      	ldr	r3, [r7, #4]
1000472a:	681b      	ldr	r3, [r3, #0]
1000472c:	2b03      	cmp	r3, #3
1000472e:	d016      	beq.n	1000475e <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004730:	f7fd f810 	bl	10001754 <HAL_GetTick>
10004734:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10004736:	e009      	b.n	1000474c <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004738:	f7fd f80c 	bl	10001754 <HAL_GetTick>
1000473c:	4602      	mov	r2, r0
1000473e:	68fb      	ldr	r3, [r7, #12]
10004740:	1ad3      	subs	r3, r2, r3
10004742:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004746:	d901      	bls.n	1000474c <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
10004748:	2303      	movs	r3, #3
1000474a:	e040      	b.n	100047ce <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
1000474c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004752:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004756:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000475a:	d1ed      	bne.n	10004738 <RCC_AXISSConfig+0x90>
1000475c:	e015      	b.n	1000478a <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000475e:	f7fc fff9 	bl	10001754 <HAL_GetTick>
10004762:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10004764:	e009      	b.n	1000477a <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004766:	f7fc fff5 	bl	10001754 <HAL_GetTick>
1000476a:	4602      	mov	r2, r0
1000476c:	68fb      	ldr	r3, [r7, #12]
1000476e:	1ad3      	subs	r3, r2, r3
10004770:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004774:	d901      	bls.n	1000477a <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
10004776:	2303      	movs	r3, #3
10004778:	e029      	b.n	100047ce <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
1000477a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004780:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004784:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004788:	d0ed      	beq.n	10004766 <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
1000478a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000478e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10004790:	f023 0207 	bic.w	r2, r3, #7
10004794:	687b      	ldr	r3, [r7, #4]
10004796:	685b      	ldr	r3, [r3, #4]
10004798:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000479c:	4313      	orrs	r3, r2
1000479e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100047a0:	f7fc ffd8 	bl	10001754 <HAL_GetTick>
100047a4:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
100047a6:	e009      	b.n	100047bc <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100047a8:	f7fc ffd4 	bl	10001754 <HAL_GetTick>
100047ac:	4602      	mov	r2, r0
100047ae:	68fb      	ldr	r3, [r7, #12]
100047b0:	1ad3      	subs	r3, r2, r3
100047b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100047b6:	d901      	bls.n	100047bc <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
100047b8:	2303      	movs	r3, #3
100047ba:	e008      	b.n	100047ce <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
100047bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100047c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100047c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100047c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100047ca:	d1ed      	bne.n	100047a8 <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
100047cc:	2300      	movs	r3, #0
}
100047ce:	4618      	mov	r0, r3
100047d0:	3710      	adds	r7, #16
100047d2:	46bd      	mov	sp, r7
100047d4:	bd80      	pop	{r7, pc}
	...

100047d8 <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
100047d8:	b580      	push	{r7, lr}
100047da:	b084      	sub	sp, #16
100047dc:	af00      	add	r7, sp, #0
100047de:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
100047e0:	687b      	ldr	r3, [r7, #4]
100047e2:	681b      	ldr	r3, [r3, #0]
100047e4:	2b03      	cmp	r3, #3
100047e6:	d834      	bhi.n	10004852 <RCC_MCUConfig+0x7a>
100047e8:	a201      	add	r2, pc, #4	; (adr r2, 100047f0 <RCC_MCUConfig+0x18>)
100047ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100047ee:	bf00      	nop
100047f0:	10004801 	.word	0x10004801
100047f4:	10004815 	.word	0x10004815
100047f8:	1000482b 	.word	0x1000482b
100047fc:	1000483f 	.word	0x1000483f
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10004800:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004804:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004808:	f003 0301 	and.w	r3, r3, #1
1000480c:	2b01      	cmp	r3, #1
1000480e:	d022      	beq.n	10004856 <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
10004810:	2301      	movs	r3, #1
10004812:	e081      	b.n	10004918 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10004814:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004818:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000481c:	f403 7380 	and.w	r3, r3, #256	; 0x100
10004820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10004824:	d019      	beq.n	1000485a <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
10004826:	2301      	movs	r3, #1
10004828:	e076      	b.n	10004918 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
1000482a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000482e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004832:	f003 0310 	and.w	r3, r3, #16
10004836:	2b10      	cmp	r3, #16
10004838:	d011      	beq.n	1000485e <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
1000483a:	2301      	movs	r3, #1
1000483c:	e06c      	b.n	10004918 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
1000483e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004842:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004846:	f003 0302 	and.w	r3, r3, #2
1000484a:	2b02      	cmp	r3, #2
1000484c:	d009      	beq.n	10004862 <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
1000484e:	2301      	movs	r3, #1
10004850:	e062      	b.n	10004918 <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
10004852:	bf00      	nop
10004854:	e006      	b.n	10004864 <RCC_MCUConfig+0x8c>
      break;
10004856:	bf00      	nop
10004858:	e004      	b.n	10004864 <RCC_MCUConfig+0x8c>
      break;
1000485a:	bf00      	nop
1000485c:	e002      	b.n	10004864 <RCC_MCUConfig+0x8c>
      break;
1000485e:	bf00      	nop
10004860:	e000      	b.n	10004864 <RCC_MCUConfig+0x8c>
      break;
10004862:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
10004864:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000486a:	f023 0203 	bic.w	r2, r3, #3
1000486e:	687b      	ldr	r3, [r7, #4]
10004870:	681b      	ldr	r3, [r3, #0]
10004872:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004876:	4313      	orrs	r3, r2
10004878:	648b      	str	r3, [r1, #72]	; 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
1000487a:	f7fc ff6b 	bl	10001754 <HAL_GetTick>
1000487e:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10004880:	e009      	b.n	10004896 <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004882:	f7fc ff67 	bl	10001754 <HAL_GetTick>
10004886:	4602      	mov	r2, r0
10004888:	68fb      	ldr	r3, [r7, #12]
1000488a:	1ad3      	subs	r3, r2, r3
1000488c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004890:	d901      	bls.n	10004896 <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
10004892:	2303      	movs	r3, #3
10004894:	e040      	b.n	10004918 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10004896:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000489a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000489c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100048a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100048a4:	d1ed      	bne.n	10004882 <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
100048a6:	f000 fc15 	bl	100050d4 <HAL_RCC_GetSystemCoreClockFreq>
100048aa:	4603      	mov	r3, r0
100048ac:	4a1c      	ldr	r2, [pc, #112]	; (10004920 <RCC_MCUConfig+0x148>)
100048ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
100048b0:	4b1c      	ldr	r3, [pc, #112]	; (10004924 <RCC_MCUConfig+0x14c>)
100048b2:	681b      	ldr	r3, [r3, #0]
100048b4:	4618      	mov	r0, r3
100048b6:	f7fc ff03 	bl	100016c0 <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
100048ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100048be:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
100048c2:	f023 020f 	bic.w	r2, r3, #15
100048c6:	687b      	ldr	r3, [r7, #4]
100048c8:	685b      	ldr	r3, [r3, #4]
100048ca:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100048ce:	4313      	orrs	r3, r2
100048d0:	f8c1 3830 	str.w	r3, [r1, #2096]	; 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100048d4:	f7fc ff3e 	bl	10001754 <HAL_GetTick>
100048d8:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
100048da:	e009      	b.n	100048f0 <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100048dc:	f7fc ff3a 	bl	10001754 <HAL_GetTick>
100048e0:	4602      	mov	r2, r0
100048e2:	68fb      	ldr	r3, [r7, #12]
100048e4:	1ad3      	subs	r3, r2, r3
100048e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100048ea:	d901      	bls.n	100048f0 <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
100048ec:	2303      	movs	r3, #3
100048ee:	e013      	b.n	10004918 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
100048f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100048f4:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
100048f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100048fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004900:	d1ec      	bne.n	100048dc <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10004902:	f000 fbe7 	bl	100050d4 <HAL_RCC_GetSystemCoreClockFreq>
10004906:	4603      	mov	r3, r0
10004908:	4a05      	ldr	r2, [pc, #20]	; (10004920 <RCC_MCUConfig+0x148>)
1000490a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
1000490c:	4b05      	ldr	r3, [pc, #20]	; (10004924 <RCC_MCUConfig+0x14c>)
1000490e:	681b      	ldr	r3, [r3, #0]
10004910:	4618      	mov	r0, r3
10004912:	f7fc fed5 	bl	100016c0 <HAL_InitTick>
#endif

  return HAL_OK;
10004916:	2300      	movs	r3, #0
}
10004918:	4618      	mov	r0, r3
1000491a:	3710      	adds	r7, #16
1000491c:	46bd      	mov	sp, r7
1000491e:	bd80      	pop	{r7, pc}
10004920:	10020000 	.word	0x10020000
10004924:	10020004 	.word	0x10020004

10004928 <HAL_RCC_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
10004928:	b480      	push	{r7}
1000492a:	b089      	sub	sp, #36	; 0x24
1000492c:	af00      	add	r7, sp, #0
1000492e:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0U, pll2m = 1U, pll2fracen = 0U, hsivalue = 0U;
10004930:	2300      	movs	r3, #0
10004932:	61bb      	str	r3, [r7, #24]
10004934:	2301      	movs	r3, #1
10004936:	617b      	str	r3, [r7, #20]
10004938:	2300      	movs	r3, #0
1000493a:	613b      	str	r3, [r7, #16]
1000493c:	2300      	movs	r3, #0
1000493e:	60fb      	str	r3, [r7, #12]
  float fracn1, pll2vco = 0;
10004940:	f04f 0300 	mov.w	r3, #0
10004944:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL12_SOURCE();
10004946:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000494a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000494c:	f003 0303 	and.w	r3, r3, #3
10004950:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLL2CFGR1 & RCC_PLL2CFGR1_DIVM2) >> RCC_PLL2CFGR1_DIVM2_Pos) + 1U;
10004952:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004956:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
1000495a:	0c1b      	lsrs	r3, r3, #16
1000495c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10004960:	3301      	adds	r3, #1
10004962:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLL2FRACR & RCC_PLL2FRACR_FRACLE) >> RCC_PLL2FRACR_FRACLE_Pos;
10004964:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004968:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
1000496c:	0c1b      	lsrs	r3, r3, #16
1000496e:	f003 0301 	and.w	r3, r3, #1
10004972:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACV) >> RCC_PLL2FRACR_FRACV_Pos));
10004974:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004978:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
1000497c:	08db      	lsrs	r3, r3, #3
1000497e:	f3c3 030c 	ubfx	r3, r3, #0, #13
10004982:	693a      	ldr	r2, [r7, #16]
10004984:	fb02 f303 	mul.w	r3, r2, r3
10004988:	ee07 3a90 	vmov	s15, r3
1000498c:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004990:	edc7 7a02 	vstr	s15, [r7, #8]
  pll2vco = (float)((float)((RCC->PLL2CFGR1 & RCC_PLL2CFGR1_DIVN) + 1U) + (fracn1 / (float)0x2000));  //Intermediary value
10004994:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004998:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
1000499c:	f3c3 0308 	ubfx	r3, r3, #0, #9
100049a0:	3301      	adds	r3, #1
100049a2:	ee07 3a90 	vmov	s15, r3
100049a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100049aa:	edd7 6a02 	vldr	s13, [r7, #8]
100049ae:	ed9f 6a51 	vldr	s12, [pc, #324]	; 10004af4 <HAL_RCC_GetPLL2ClockFreq+0x1cc>
100049b2:	eec6 7a86 	vdiv.f32	s15, s13, s12
100049b6:	ee77 7a27 	vadd.f32	s15, s14, s15
100049ba:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
100049be:	69bb      	ldr	r3, [r7, #24]
100049c0:	2b02      	cmp	r3, #2
100049c2:	d047      	beq.n	10004a54 <HAL_RCC_GetPLL2ClockFreq+0x12c>
100049c4:	69bb      	ldr	r3, [r7, #24]
100049c6:	2b02      	cmp	r3, #2
100049c8:	d848      	bhi.n	10004a5c <HAL_RCC_GetPLL2ClockFreq+0x134>
100049ca:	69bb      	ldr	r3, [r7, #24]
100049cc:	2b00      	cmp	r3, #0
100049ce:	d003      	beq.n	100049d8 <HAL_RCC_GetPLL2ClockFreq+0xb0>
100049d0:	69bb      	ldr	r3, [r7, #24]
100049d2:	2b01      	cmp	r3, #1
100049d4:	d02f      	beq.n	10004a36 <HAL_RCC_GetPLL2ClockFreq+0x10e>
100049d6:	e041      	b.n	10004a5c <HAL_RCC_GetPLL2ClockFreq+0x134>
  {
    case RCC_PLL12SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
100049d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100049dc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100049e0:	f003 0304 	and.w	r3, r3, #4
100049e4:	2b04      	cmp	r3, #4
100049e6:	d117      	bne.n	10004a18 <HAL_RCC_GetPLL2ClockFreq+0xf0>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100049e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100049ec:	699b      	ldr	r3, [r3, #24]
100049ee:	f003 0303 	and.w	r3, r3, #3
100049f2:	4a41      	ldr	r2, [pc, #260]	; (10004af8 <HAL_RCC_GetPLL2ClockFreq+0x1d0>)
100049f4:	fa22 f303 	lsr.w	r3, r2, r3
100049f8:	60fb      	str	r3, [r7, #12]
        pll2vco *= (float)(hsivalue / pll2m);
100049fa:	68fa      	ldr	r2, [r7, #12]
100049fc:	697b      	ldr	r3, [r7, #20]
100049fe:	fbb2 f3f3 	udiv	r3, r2, r3
10004a02:	ee07 3a90 	vmov	s15, r3
10004a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004a0a:	ed97 7a07 	vldr	s14, [r7, #28]
10004a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
10004a12:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco *= (float)(HSI_VALUE / pll2m);
      }
      break;
10004a16:	e025      	b.n	10004a64 <HAL_RCC_GetPLL2ClockFreq+0x13c>
        pll2vco *= (float)(HSI_VALUE / pll2m);
10004a18:	4a37      	ldr	r2, [pc, #220]	; (10004af8 <HAL_RCC_GetPLL2ClockFreq+0x1d0>)
10004a1a:	697b      	ldr	r3, [r7, #20]
10004a1c:	fbb2 f3f3 	udiv	r3, r2, r3
10004a20:	ee07 3a90 	vmov	s15, r3
10004a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004a28:	ed97 7a07 	vldr	s14, [r7, #28]
10004a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
10004a30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004a34:	e016      	b.n	10004a64 <HAL_RCC_GetPLL2ClockFreq+0x13c>

    case RCC_PLL12SOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco *= (float)(HSE_VALUE / pll2m);
10004a36:	4a31      	ldr	r2, [pc, #196]	; (10004afc <HAL_RCC_GetPLL2ClockFreq+0x1d4>)
10004a38:	697b      	ldr	r3, [r7, #20]
10004a3a:	fbb2 f3f3 	udiv	r3, r2, r3
10004a3e:	ee07 3a90 	vmov	s15, r3
10004a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004a46:	ed97 7a07 	vldr	s14, [r7, #28]
10004a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
10004a4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004a52:	e007      	b.n	10004a64 <HAL_RCC_GetPLL2ClockFreq+0x13c>

    case RCC_PLL12SOURCE_OFF:  /* No clock source for PLL */
      pll2vco = 0;
10004a54:	f04f 0300 	mov.w	r3, #0
10004a58:	61fb      	str	r3, [r7, #28]
      break;
10004a5a:	e003      	b.n	10004a64 <HAL_RCC_GetPLL2ClockFreq+0x13c>

    default:
      pll2vco = 0;
10004a5c:	f04f 0300 	mov.w	r3, #0
10004a60:	61fb      	str	r3, [r7, #28]
      break;
10004a62:	bf00      	nop
  }

  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVP) >> RCC_PLL2CFGR2_DIVP_Pos) + 1U)));
10004a64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10004a6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004a70:	3301      	adds	r3, #1
10004a72:	ee07 3a90 	vmov	s15, r3
10004a76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004a7a:	edd7 6a07 	vldr	s13, [r7, #28]
10004a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004a86:	ee17 2a90 	vmov	r2, s15
10004a8a:	687b      	ldr	r3, [r7, #4]
10004a8c:	601a      	str	r2, [r3, #0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVQ) >> RCC_PLL2CFGR2_DIVQ_Pos) + 1U)));
10004a8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10004a96:	0a1b      	lsrs	r3, r3, #8
10004a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004a9c:	3301      	adds	r3, #1
10004a9e:	ee07 3a90 	vmov	s15, r3
10004aa2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004aa6:	edd7 6a07 	vldr	s13, [r7, #28]
10004aaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004ab2:	ee17 2a90 	vmov	r2, s15
10004ab6:	687b      	ldr	r3, [r7, #4]
10004ab8:	605a      	str	r2, [r3, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVR) >> RCC_PLL2CFGR2_DIVR_Pos) + 1U)));
10004aba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004abe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10004ac2:	0c1b      	lsrs	r3, r3, #16
10004ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004ac8:	3301      	adds	r3, #1
10004aca:	ee07 3a90 	vmov	s15, r3
10004ace:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004ad2:	edd7 6a07 	vldr	s13, [r7, #28]
10004ad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004ada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004ade:	ee17 2a90 	vmov	r2, s15
10004ae2:	687b      	ldr	r3, [r7, #4]
10004ae4:	609a      	str	r2, [r3, #8]
}
10004ae6:	bf00      	nop
10004ae8:	3724      	adds	r7, #36	; 0x24
10004aea:	46bd      	mov	sp, r7
10004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
10004af0:	4770      	bx	lr
10004af2:	bf00      	nop
10004af4:	46000000 	.word	0x46000000
10004af8:	03d09000 	.word	0x03d09000
10004afc:	016e3600 	.word	0x016e3600

10004b00 <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
10004b00:	b480      	push	{r7}
10004b02:	b089      	sub	sp, #36	; 0x24
10004b04:	af00      	add	r7, sp, #0
10004b06:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
10004b08:	2300      	movs	r3, #0
10004b0a:	61bb      	str	r3, [r7, #24]
10004b0c:	2301      	movs	r3, #1
10004b0e:	617b      	str	r3, [r7, #20]
10004b10:	2300      	movs	r3, #0
10004b12:	613b      	str	r3, [r7, #16]
10004b14:	2300      	movs	r3, #0
10004b16:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
10004b18:	f04f 0300 	mov.w	r3, #0
10004b1c:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
10004b1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b22:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10004b26:	f003 0303 	and.w	r3, r3, #3
10004b2a:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
10004b2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b30:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10004b34:	0c1b      	lsrs	r3, r3, #16
10004b36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10004b3a:	3301      	adds	r3, #1
10004b3c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
10004b3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b42:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10004b46:	0c1b      	lsrs	r3, r3, #16
10004b48:	f003 0301 	and.w	r3, r3, #1
10004b4c:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
10004b4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b52:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10004b56:	08db      	lsrs	r3, r3, #3
10004b58:	f3c3 030c 	ubfx	r3, r3, #0, #13
10004b5c:	693a      	ldr	r2, [r7, #16]
10004b5e:	fb02 f303 	mul.w	r3, r2, r3
10004b62:	ee07 3a90 	vmov	s15, r3
10004b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004b6a:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
10004b6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b72:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10004b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
10004b7a:	3301      	adds	r3, #1
10004b7c:	ee07 3a90 	vmov	s15, r3
10004b80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004b84:	edd7 6a02 	vldr	s13, [r7, #8]
10004b88:	ed9f 6a56 	vldr	s12, [pc, #344]	; 10004ce4 <HAL_RCC_GetPLL3ClockFreq+0x1e4>
10004b8c:	eec6 7a86 	vdiv.f32	s15, s13, s12
10004b90:	ee77 7a27 	vadd.f32	s15, s14, s15
10004b94:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10004b98:	69bb      	ldr	r3, [r7, #24]
10004b9a:	2b03      	cmp	r3, #3
10004b9c:	d85b      	bhi.n	10004c56 <HAL_RCC_GetPLL3ClockFreq+0x156>
10004b9e:	a201      	add	r2, pc, #4	; (adr r2, 10004ba4 <HAL_RCC_GetPLL3ClockFreq+0xa4>)
10004ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004ba4:	10004bb5 	.word	0x10004bb5
10004ba8:	10004c13 	.word	0x10004c13
10004bac:	10004c31 	.word	0x10004c31
10004bb0:	10004c4f 	.word	0x10004c4f
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10004bb4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004bb8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004bbc:	f003 0304 	and.w	r3, r3, #4
10004bc0:	2b04      	cmp	r3, #4
10004bc2:	d117      	bne.n	10004bf4 <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10004bc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004bc8:	699b      	ldr	r3, [r3, #24]
10004bca:	f003 0303 	and.w	r3, r3, #3
10004bce:	4a46      	ldr	r2, [pc, #280]	; (10004ce8 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10004bd0:	fa22 f303 	lsr.w	r3, r2, r3
10004bd4:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
10004bd6:	68fa      	ldr	r2, [r7, #12]
10004bd8:	697b      	ldr	r3, [r7, #20]
10004bda:	fbb2 f3f3 	udiv	r3, r2, r3
10004bde:	ee07 3a90 	vmov	s15, r3
10004be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004be6:	ed97 7a07 	vldr	s14, [r7, #28]
10004bea:	ee67 7a27 	vmul.f32	s15, s14, s15
10004bee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
10004bf2:	e030      	b.n	10004c56 <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
10004bf4:	4a3c      	ldr	r2, [pc, #240]	; (10004ce8 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10004bf6:	697b      	ldr	r3, [r7, #20]
10004bf8:	fbb2 f3f3 	udiv	r3, r2, r3
10004bfc:	ee07 3a90 	vmov	s15, r3
10004c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004c04:	ed97 7a07 	vldr	s14, [r7, #28]
10004c08:	ee67 7a27 	vmul.f32	s15, s14, s15
10004c0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004c10:	e021      	b.n	10004c56 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
10004c12:	4a36      	ldr	r2, [pc, #216]	; (10004cec <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
10004c14:	697b      	ldr	r3, [r7, #20]
10004c16:	fbb2 f3f3 	udiv	r3, r2, r3
10004c1a:	ee07 3a90 	vmov	s15, r3
10004c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004c22:	ed97 7a07 	vldr	s14, [r7, #28]
10004c26:	ee67 7a27 	vmul.f32	s15, s14, s15
10004c2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004c2e:	e012      	b.n	10004c56 <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
10004c30:	4a2f      	ldr	r2, [pc, #188]	; (10004cf0 <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
10004c32:	697b      	ldr	r3, [r7, #20]
10004c34:	fbb2 f3f3 	udiv	r3, r2, r3
10004c38:	ee07 3a90 	vmov	s15, r3
10004c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004c40:	ed97 7a07 	vldr	s14, [r7, #28]
10004c44:	ee67 7a27 	vmul.f32	s15, s14, s15
10004c48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004c4c:	e003      	b.n	10004c56 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
10004c4e:	f04f 0300 	mov.w	r3, #0
10004c52:	61fb      	str	r3, [r7, #28]
      break;
10004c54:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
10004c56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004c5a:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10004c5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004c62:	3301      	adds	r3, #1
10004c64:	ee07 3a90 	vmov	s15, r3
10004c68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004c6c:	edd7 6a07 	vldr	s13, [r7, #28]
10004c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004c74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004c78:	ee17 2a90 	vmov	r2, s15
10004c7c:	687b      	ldr	r3, [r7, #4]
10004c7e:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
10004c80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004c84:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10004c88:	0a1b      	lsrs	r3, r3, #8
10004c8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004c8e:	3301      	adds	r3, #1
10004c90:	ee07 3a90 	vmov	s15, r3
10004c94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004c98:	edd7 6a07 	vldr	s13, [r7, #28]
10004c9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004ca4:	ee17 2a90 	vmov	r2, s15
10004ca8:	687b      	ldr	r3, [r7, #4]
10004caa:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
10004cac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004cb0:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10004cb4:	0c1b      	lsrs	r3, r3, #16
10004cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004cba:	3301      	adds	r3, #1
10004cbc:	ee07 3a90 	vmov	s15, r3
10004cc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004cc4:	edd7 6a07 	vldr	s13, [r7, #28]
10004cc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004cd0:	ee17 2a90 	vmov	r2, s15
10004cd4:	687b      	ldr	r3, [r7, #4]
10004cd6:	609a      	str	r2, [r3, #8]
}
10004cd8:	bf00      	nop
10004cda:	3724      	adds	r7, #36	; 0x24
10004cdc:	46bd      	mov	sp, r7
10004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
10004ce2:	4770      	bx	lr
10004ce4:	46000000 	.word	0x46000000
10004ce8:	03d09000 	.word	0x03d09000
10004cec:	016e3600 	.word	0x016e3600
10004cf0:	003d0900 	.word	0x003d0900

10004cf4 <HAL_RCC_GetPLL4ClockFreq>:
  *         right PLL4CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL4_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL4ClockFreq(PLL4_ClocksTypeDef *PLL4_Clocks)
{
10004cf4:	b480      	push	{r7}
10004cf6:	b089      	sub	sp, #36	; 0x24
10004cf8:	af00      	add	r7, sp, #0
10004cfa:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0U, pll4m = 1U, pll4fracen = 0U, hsivalue = 0U;
10004cfc:	2300      	movs	r3, #0
10004cfe:	61bb      	str	r3, [r7, #24]
10004d00:	2301      	movs	r3, #1
10004d02:	617b      	str	r3, [r7, #20]
10004d04:	2300      	movs	r3, #0
10004d06:	613b      	str	r3, [r7, #16]
10004d08:	2300      	movs	r3, #0
10004d0a:	60fb      	str	r3, [r7, #12]
  float fracn1, pll4vco = 0;
10004d0c:	f04f 0300 	mov.w	r3, #0
10004d10:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL4_SOURCE();
10004d12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d16:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10004d1a:	f003 0303 	and.w	r3, r3, #3
10004d1e:	61bb      	str	r3, [r7, #24]
  pll4m = ((RCC->PLL4CFGR1 & RCC_PLL4CFGR1_DIVM4) >> RCC_PLL4CFGR1_DIVM4_Pos) + 1U;
10004d20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d24:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
10004d28:	0c1b      	lsrs	r3, r3, #16
10004d2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10004d2e:	3301      	adds	r3, #1
10004d30:	617b      	str	r3, [r7, #20]
  pll4fracen = (RCC->PLL4FRACR & RCC_PLL4FRACR_FRACLE) >> RCC_PLL4FRACR_FRACLE_Pos;
10004d32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d36:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10004d3a:	0c1b      	lsrs	r3, r3, #16
10004d3c:	f003 0301 	and.w	r3, r3, #1
10004d40:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll4fracen * ((RCC->PLL4FRACR & RCC_PLL4FRACR_FRACV) >> RCC_PLL4FRACR_FRACV_Pos));
10004d42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d46:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10004d4a:	08db      	lsrs	r3, r3, #3
10004d4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
10004d50:	693a      	ldr	r2, [r7, #16]
10004d52:	fb02 f303 	mul.w	r3, r2, r3
10004d56:	ee07 3a90 	vmov	s15, r3
10004d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004d5e:	edc7 7a02 	vstr	s15, [r7, #8]
  pll4vco = (float)((float)((RCC->PLL4CFGR1 & RCC_PLL4CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
10004d62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d66:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
10004d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
10004d6e:	3301      	adds	r3, #1
10004d70:	ee07 3a90 	vmov	s15, r3
10004d74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004d78:	edd7 6a02 	vldr	s13, [r7, #8]
10004d7c:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 10004ef0 <HAL_RCC_GetPLL4ClockFreq+0x1fc>
10004d80:	eec6 7a86 	vdiv.f32	s15, s13, s12
10004d84:	ee77 7a27 	vadd.f32	s15, s14, s15
10004d88:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10004d8c:	69bb      	ldr	r3, [r7, #24]
10004d8e:	2b03      	cmp	r3, #3
10004d90:	d866      	bhi.n	10004e60 <HAL_RCC_GetPLL4ClockFreq+0x16c>
10004d92:	a201      	add	r2, pc, #4	; (adr r2, 10004d98 <HAL_RCC_GetPLL4ClockFreq+0xa4>)
10004d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004d98:	10004da9 	.word	0x10004da9
10004d9c:	10004e07 	.word	0x10004e07
10004da0:	10004e25 	.word	0x10004e25
10004da4:	10004e43 	.word	0x10004e43
  {
    case RCC_PLL4SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10004da8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004dac:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004db0:	f003 0304 	and.w	r3, r3, #4
10004db4:	2b04      	cmp	r3, #4
10004db6:	d117      	bne.n	10004de8 <HAL_RCC_GetPLL4ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10004db8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004dbc:	699b      	ldr	r3, [r3, #24]
10004dbe:	f003 0303 	and.w	r3, r3, #3
10004dc2:	4a4c      	ldr	r2, [pc, #304]	; (10004ef4 <HAL_RCC_GetPLL4ClockFreq+0x200>)
10004dc4:	fa22 f303 	lsr.w	r3, r2, r3
10004dc8:	60fb      	str	r3, [r7, #12]
        pll4vco *= (float)(hsivalue / pll4m);
10004dca:	68fa      	ldr	r2, [r7, #12]
10004dcc:	697b      	ldr	r3, [r7, #20]
10004dce:	fbb2 f3f3 	udiv	r3, r2, r3
10004dd2:	ee07 3a90 	vmov	s15, r3
10004dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004dda:	ed97 7a07 	vldr	s14, [r7, #28]
10004dde:	ee67 7a27 	vmul.f32	s15, s14, s15
10004de2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll4vco *= (float)(HSI_VALUE / pll4m);
      }
      break;
10004de6:	e03b      	b.n	10004e60 <HAL_RCC_GetPLL4ClockFreq+0x16c>
        pll4vco *= (float)(HSI_VALUE / pll4m);
10004de8:	4a42      	ldr	r2, [pc, #264]	; (10004ef4 <HAL_RCC_GetPLL4ClockFreq+0x200>)
10004dea:	697b      	ldr	r3, [r7, #20]
10004dec:	fbb2 f3f3 	udiv	r3, r2, r3
10004df0:	ee07 3a90 	vmov	s15, r3
10004df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004df8:	ed97 7a07 	vldr	s14, [r7, #28]
10004dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
10004e00:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004e04:	e02c      	b.n	10004e60 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_HSE:  /* HSE used as PLL clock source */
      pll4vco *= (float)(HSE_VALUE / pll4m);
10004e06:	4a3c      	ldr	r2, [pc, #240]	; (10004ef8 <HAL_RCC_GetPLL4ClockFreq+0x204>)
10004e08:	697b      	ldr	r3, [r7, #20]
10004e0a:	fbb2 f3f3 	udiv	r3, r2, r3
10004e0e:	ee07 3a90 	vmov	s15, r3
10004e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004e16:	ed97 7a07 	vldr	s14, [r7, #28]
10004e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
10004e1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004e22:	e01d      	b.n	10004e60 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_CSI:  /* CSI used as PLL clock source */
      pll4vco *= (float)(CSI_VALUE / pll4m);
10004e24:	4a35      	ldr	r2, [pc, #212]	; (10004efc <HAL_RCC_GetPLL4ClockFreq+0x208>)
10004e26:	697b      	ldr	r3, [r7, #20]
10004e28:	fbb2 f3f3 	udiv	r3, r2, r3
10004e2c:	ee07 3a90 	vmov	s15, r3
10004e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004e34:	ed97 7a07 	vldr	s14, [r7, #28]
10004e38:	ee67 7a27 	vmul.f32	s15, s14, s15
10004e3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004e40:	e00e      	b.n	10004e60 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_I2S_CKIN:  /* Signal I2S_CKIN used as reference clock */
      pll4vco *= (float)(EXTERNAL_CLOCK_VALUE / pll4m);
10004e42:	4a2f      	ldr	r2, [pc, #188]	; (10004f00 <HAL_RCC_GetPLL4ClockFreq+0x20c>)
10004e44:	697b      	ldr	r3, [r7, #20]
10004e46:	fbb2 f3f3 	udiv	r3, r2, r3
10004e4a:	ee07 3a90 	vmov	s15, r3
10004e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004e52:	ed97 7a07 	vldr	s14, [r7, #28]
10004e56:	ee67 7a27 	vmul.f32	s15, s14, s15
10004e5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004e5e:	bf00      	nop
  }

  PLL4_Clocks->PLL4_P_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVP) >> RCC_PLL4CFGR2_DIVP_Pos) + 1U)));
10004e60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e64:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
10004e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004e6c:	3301      	adds	r3, #1
10004e6e:	ee07 3a90 	vmov	s15, r3
10004e72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004e76:	edd7 6a07 	vldr	s13, [r7, #28]
10004e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004e82:	ee17 2a90 	vmov	r2, s15
10004e86:	687b      	ldr	r3, [r7, #4]
10004e88:	601a      	str	r2, [r3, #0]
  PLL4_Clocks->PLL4_Q_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVQ) >> RCC_PLL4CFGR2_DIVQ_Pos) + 1U)));
10004e8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e8e:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
10004e92:	0a1b      	lsrs	r3, r3, #8
10004e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004e98:	3301      	adds	r3, #1
10004e9a:	ee07 3a90 	vmov	s15, r3
10004e9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004ea2:	edd7 6a07 	vldr	s13, [r7, #28]
10004ea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004eaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004eae:	ee17 2a90 	vmov	r2, s15
10004eb2:	687b      	ldr	r3, [r7, #4]
10004eb4:	605a      	str	r2, [r3, #4]
  PLL4_Clocks->PLL4_R_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVR) >> RCC_PLL4CFGR2_DIVR_Pos) + 1U)));
10004eb6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004eba:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
10004ebe:	0c1b      	lsrs	r3, r3, #16
10004ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004ec4:	3301      	adds	r3, #1
10004ec6:	ee07 3a90 	vmov	s15, r3
10004eca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004ece:	edd7 6a07 	vldr	s13, [r7, #28]
10004ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004ed6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004eda:	ee17 2a90 	vmov	r2, s15
10004ede:	687b      	ldr	r3, [r7, #4]
10004ee0:	609a      	str	r2, [r3, #8]
}
10004ee2:	bf00      	nop
10004ee4:	3724      	adds	r7, #36	; 0x24
10004ee6:	46bd      	mov	sp, r7
10004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
10004eec:	4770      	bx	lr
10004eee:	bf00      	nop
10004ef0:	46000000 	.word	0x46000000
10004ef4:	03d09000 	.word	0x03d09000
10004ef8:	016e3600 	.word	0x016e3600
10004efc:	003d0900 	.word	0x003d0900
10004f00:	00bb8000 	.word	0x00bb8000

10004f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
10004f04:	b580      	push	{r7, lr}
10004f06:	b082      	sub	sp, #8
10004f08:	af00      	add	r7, sp, #0
  uint32_t apb1div = 0;
10004f0a:	2300      	movs	r3, #0
10004f0c:	607b      	str	r3, [r7, #4]

  /* Compute PCLK1 frequency ---------------------------*/
  apb1div = __HAL_RCC_GET_APB1_DIV();
10004f0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f12:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10004f16:	f003 0307 	and.w	r3, r3, #7
10004f1a:	607b      	str	r3, [r7, #4]
  if (apb1div > RCC_APB1_DIV16)
10004f1c:	687b      	ldr	r3, [r7, #4]
10004f1e:	2b04      	cmp	r3, #4
10004f20:	d901      	bls.n	10004f26 <HAL_RCC_GetPCLK1Freq+0x22>
  {
    apb1div = RCC_APB1_DIV16;
10004f22:	2304      	movs	r3, #4
10004f24:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb1div);
10004f26:	f000 f88a 	bl	1000503e <HAL_RCC_GetMCUFreq>
10004f2a:	4602      	mov	r2, r0
10004f2c:	687b      	ldr	r3, [r7, #4]
10004f2e:	fa22 f303 	lsr.w	r3, r2, r3
}
10004f32:	4618      	mov	r0, r3
10004f34:	3708      	adds	r7, #8
10004f36:	46bd      	mov	sp, r7
10004f38:	bd80      	pop	{r7, pc}

10004f3a <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
10004f3a:	b580      	push	{r7, lr}
10004f3c:	b082      	sub	sp, #8
10004f3e:	af00      	add	r7, sp, #0
  uint32_t apb2div = 0;
10004f40:	2300      	movs	r3, #0
10004f42:	607b      	str	r3, [r7, #4]

  /* Compute PCLK2 frequency ---------------------------*/
  apb2div = __HAL_RCC_GET_APB2_DIV();
10004f44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f48:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10004f4c:	f003 0307 	and.w	r3, r3, #7
10004f50:	607b      	str	r3, [r7, #4]
  if (apb2div > RCC_APB2_DIV16)
10004f52:	687b      	ldr	r3, [r7, #4]
10004f54:	2b04      	cmp	r3, #4
10004f56:	d901      	bls.n	10004f5c <HAL_RCC_GetPCLK2Freq+0x22>
  {
    apb2div = RCC_APB2_DIV16;
10004f58:	2304      	movs	r3, #4
10004f5a:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb2div);
10004f5c:	f000 f86f 	bl	1000503e <HAL_RCC_GetMCUFreq>
10004f60:	4602      	mov	r2, r0
10004f62:	687b      	ldr	r3, [r7, #4]
10004f64:	fa22 f303 	lsr.w	r3, r2, r3
}
10004f68:	4618      	mov	r0, r3
10004f6a:	3708      	adds	r7, #8
10004f6c:	46bd      	mov	sp, r7
10004f6e:	bd80      	pop	{r7, pc}

10004f70 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
10004f70:	b580      	push	{r7, lr}
10004f72:	b082      	sub	sp, #8
10004f74:	af00      	add	r7, sp, #0
  uint32_t apb3div = 0;
10004f76:	2300      	movs	r3, #0
10004f78:	607b      	str	r3, [r7, #4]

  /* Compute PCLK3 frequency ---------------------------*/
  apb3div = __HAL_RCC_GET_APB3_DIV();
10004f7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f7e:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
10004f82:	f003 0307 	and.w	r3, r3, #7
10004f86:	607b      	str	r3, [r7, #4]
  if (apb3div > RCC_APB3_DIV16)
10004f88:	687b      	ldr	r3, [r7, #4]
10004f8a:	2b04      	cmp	r3, #4
10004f8c:	d901      	bls.n	10004f92 <HAL_RCC_GetPCLK3Freq+0x22>
  {
    apb3div = RCC_APB3_DIV16;
10004f8e:	2304      	movs	r3, #4
10004f90:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb3div);
10004f92:	f000 f854 	bl	1000503e <HAL_RCC_GetMCUFreq>
10004f96:	4602      	mov	r2, r0
10004f98:	687b      	ldr	r3, [r7, #4]
10004f9a:	fa22 f303 	lsr.w	r3, r2, r3
}
10004f9e:	4618      	mov	r0, r3
10004fa0:	3708      	adds	r7, #8
10004fa2:	46bd      	mov	sp, r7
10004fa4:	bd80      	pop	{r7, pc}

10004fa6 <HAL_RCC_GetPCLK5Freq>:
  * @note   Each time PCLK5 changes, this function must be called to update the
  *         right PCLK5 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK5 frequency
  */
uint32_t HAL_RCC_GetPCLK5Freq(void)
{
10004fa6:	b580      	push	{r7, lr}
10004fa8:	b082      	sub	sp, #8
10004faa:	af00      	add	r7, sp, #0
  uint32_t apb5div = 0;
10004fac:	2300      	movs	r3, #0
10004fae:	607b      	str	r3, [r7, #4]

  /* Compute PCLK5 frequency ---------------------------*/
  apb5div = __HAL_RCC_GET_APB5_DIV();
10004fb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10004fb6:	f003 0307 	and.w	r3, r3, #7
10004fba:	607b      	str	r3, [r7, #4]
  if (apb5div > RCC_APB5_DIV16)
10004fbc:	687b      	ldr	r3, [r7, #4]
10004fbe:	2b04      	cmp	r3, #4
10004fc0:	d901      	bls.n	10004fc6 <HAL_RCC_GetPCLK5Freq+0x20>
  {
    apb5div = RCC_APB5_DIV16;
10004fc2:	2304      	movs	r3, #4
10004fc4:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetACLKFreq() >> apb5div);
10004fc6:	f000 f808 	bl	10004fda <HAL_RCC_GetACLKFreq>
10004fca:	4602      	mov	r2, r0
10004fcc:	687b      	ldr	r3, [r7, #4]
10004fce:	fa22 f303 	lsr.w	r3, r2, r3
}
10004fd2:	4618      	mov	r0, r3
10004fd4:	3708      	adds	r7, #8
10004fd6:	46bd      	mov	sp, r7
10004fd8:	bd80      	pop	{r7, pc}

10004fda <HAL_RCC_GetACLKFreq>:
  * @note   Each time ACLK changes, this function must be called to update the
  *         right ACLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval ACLK frequency
  */
uint32_t HAL_RCC_GetACLKFreq(void)
{
10004fda:	b580      	push	{r7, lr}
10004fdc:	b082      	sub	sp, #8
10004fde:	af00      	add	r7, sp, #0
  uint32_t axidiv = 0;
10004fe0:	2300      	movs	r3, #0
10004fe2:	607b      	str	r3, [r7, #4]

  /* Compute ACLK frequency ---------------------------*/
  axidiv = __HAL_RCC_GET_AXI_DIV();
10004fe4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10004fea:	f003 0307 	and.w	r3, r3, #7
10004fee:	607b      	str	r3, [r7, #4]
  if (axidiv > RCC_AXI_DIV4)
10004ff0:	687b      	ldr	r3, [r7, #4]
10004ff2:	2b03      	cmp	r3, #3
10004ff4:	d901      	bls.n	10004ffa <HAL_RCC_GetACLKFreq+0x20>
  {
    axidiv = RCC_AXI_DIV4;
10004ff6:	2303      	movs	r3, #3
10004ff8:	607b      	str	r3, [r7, #4]
  }
  axidiv += 1;
10004ffa:	687b      	ldr	r3, [r7, #4]
10004ffc:	3301      	adds	r3, #1
10004ffe:	607b      	str	r3, [r7, #4]

  return HAL_RCC_GetAXISSFreq() / axidiv;
10005000:	f000 f870 	bl	100050e4 <HAL_RCC_GetAXISSFreq>
10005004:	4602      	mov	r2, r0
10005006:	687b      	ldr	r3, [r7, #4]
10005008:	fbb2 f3f3 	udiv	r3, r2, r3
}
1000500c:	4618      	mov	r0, r3
1000500e:	3708      	adds	r7, #8
10005010:	46bd      	mov	sp, r7
10005012:	bd80      	pop	{r7, pc}

10005014 <HAL_RCC_GetHCLK6Freq>:
  * @note   Each time HCLK6 changes, this function must be called to update the
  *         right HCLK6 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK6 frequency
  */
uint32_t HAL_RCC_GetHCLK6Freq(void)
{
10005014:	b580      	push	{r7, lr}
10005016:	af00      	add	r7, sp, #0
  return HAL_RCC_GetACLKFreq();
10005018:	f7ff ffdf 	bl	10004fda <HAL_RCC_GetACLKFreq>
1000501c:	4603      	mov	r3, r0
}
1000501e:	4618      	mov	r0, r3
10005020:	bd80      	pop	{r7, pc}

10005022 <HAL_RCC_GetHCLK2Freq>:
  * @note   Each time HCLK1 changes, this function must be called to update the
  *         right HCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK2 frequency
  */
uint32_t HAL_RCC_GetHCLK2Freq(void)
{
10005022:	b580      	push	{r7, lr}
10005024:	af00      	add	r7, sp, #0
  return HAL_RCC_GetMCUFreq();
10005026:	f000 f80a 	bl	1000503e <HAL_RCC_GetMCUFreq>
1000502a:	4603      	mov	r3, r0
}
1000502c:	4618      	mov	r0, r3
1000502e:	bd80      	pop	{r7, pc}

10005030 <HAL_RCC_GetMLHCLKFreq>:
  * @note   Each time MLHCLK changes, this function must be called to update the
  *         right MLHCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK4 frequency
  */
uint32_t HAL_RCC_GetMLHCLKFreq(void)
{
10005030:	b580      	push	{r7, lr}
10005032:	af00      	add	r7, sp, #0
  return HAL_RCC_GetMCUFreq();
10005034:	f000 f803 	bl	1000503e <HAL_RCC_GetMCUFreq>
10005038:	4603      	mov	r3, r0
}
1000503a:	4618      	mov	r0, r3
1000503c:	bd80      	pop	{r7, pc}

1000503e <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
1000503e:	b580      	push	{r7, lr}
10005040:	b082      	sub	sp, #8
10005042:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
10005044:	2300      	movs	r3, #0
10005046:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
10005048:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000504c:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10005050:	f003 030f 	and.w	r3, r3, #15
10005054:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
10005056:	687b      	ldr	r3, [r7, #4]
10005058:	2b09      	cmp	r3, #9
1000505a:	d901      	bls.n	10005060 <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
1000505c:	2309      	movs	r3, #9
1000505e:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
10005060:	f000 f87e 	bl	10005160 <HAL_RCC_GetMCUSSFreq>
10005064:	4602      	mov	r2, r0
10005066:	687b      	ldr	r3, [r7, #4]
10005068:	fa22 f303 	lsr.w	r3, r2, r3
}
1000506c:	4618      	mov	r0, r3
1000506e:	3708      	adds	r7, #8
10005070:	46bd      	mov	sp, r7
10005072:	bd80      	pop	{r7, pc}

10005074 <RCC_GetCKPERFreq>:
  * @note   Each time CKPER changes, this function must be called to update the
  *         right CKPER value. Otherwise, any configuration based on this function will be incorrect.
  * @retval CKPER frequency
  */
uint32_t RCC_GetCKPERFreq(void)
{
10005074:	b480      	push	{r7}
10005076:	b083      	sub	sp, #12
10005078:	af00      	add	r7, sp, #0
  uint32_t ckperclocksource = 0, frequency = 0;
1000507a:	2300      	movs	r3, #0
1000507c:	603b      	str	r3, [r7, #0]
1000507e:	2300      	movs	r3, #0
10005080:	607b      	str	r3, [r7, #4]

  ckperclocksource = __HAL_RCC_GET_CKPER_SOURCE();
10005082:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005086:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
1000508a:	f003 0303 	and.w	r3, r3, #3
1000508e:	603b      	str	r3, [r7, #0]

  if (ckperclocksource == RCC_CKPERCLKSOURCE_HSI)
10005090:	683b      	ldr	r3, [r7, #0]
10005092:	2b00      	cmp	r3, #0
10005094:	d102      	bne.n	1000509c <RCC_GetCKPERFreq+0x28>
  {
    /* In Case the main PLL Source is HSI */
    frequency = HSI_VALUE;
10005096:	4b0c      	ldr	r3, [pc, #48]	; (100050c8 <RCC_GetCKPERFreq+0x54>)
10005098:	607b      	str	r3, [r7, #4]
1000509a:	e00d      	b.n	100050b8 <RCC_GetCKPERFreq+0x44>
  }

  else if (ckperclocksource == RCC_CKPERCLKSOURCE_CSI)
1000509c:	683b      	ldr	r3, [r7, #0]
1000509e:	2b01      	cmp	r3, #1
100050a0:	d102      	bne.n	100050a8 <RCC_GetCKPERFreq+0x34>
  {
    /* In Case the main PLL Source is CSI */
    frequency = CSI_VALUE;
100050a2:	4b0a      	ldr	r3, [pc, #40]	; (100050cc <RCC_GetCKPERFreq+0x58>)
100050a4:	607b      	str	r3, [r7, #4]
100050a6:	e007      	b.n	100050b8 <RCC_GetCKPERFreq+0x44>
  }

  else if (ckperclocksource == RCC_CKPERCLKSOURCE_HSE)
100050a8:	683b      	ldr	r3, [r7, #0]
100050aa:	2b02      	cmp	r3, #2
100050ac:	d102      	bne.n	100050b4 <RCC_GetCKPERFreq+0x40>
  {
    /* In Case the main PLL Source is HSE */
    frequency = HSE_VALUE;
100050ae:	4b08      	ldr	r3, [pc, #32]	; (100050d0 <RCC_GetCKPERFreq+0x5c>)
100050b0:	607b      	str	r3, [r7, #4]
100050b2:	e001      	b.n	100050b8 <RCC_GetCKPERFreq+0x44>
  }
  else
  {
    frequency = 0;
100050b4:	2300      	movs	r3, #0
100050b6:	607b      	str	r3, [r7, #4]
  }

  return frequency;
100050b8:	687b      	ldr	r3, [r7, #4]
}
100050ba:	4618      	mov	r0, r3
100050bc:	370c      	adds	r7, #12
100050be:	46bd      	mov	sp, r7
100050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
100050c4:	4770      	bx	lr
100050c6:	bf00      	nop
100050c8:	03d09000 	.word	0x03d09000
100050cc:	003d0900 	.word	0x003d0900
100050d0:	016e3600 	.word	0x016e3600

100050d4 <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
100050d4:	b580      	push	{r7, lr}
100050d6:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
100050d8:	f7ff ffb1 	bl	1000503e <HAL_RCC_GetMCUFreq>
100050dc:	4603      	mov	r3, r0
#endif
}
100050de:	4618      	mov	r0, r3
100050e0:	bd80      	pop	{r7, pc}
	...

100050e4 <HAL_RCC_GetAXISSFreq>:
  return mpussfreq;
}


uint32_t HAL_RCC_GetAXISSFreq()
{
100050e4:	b580      	push	{r7, lr}
100050e6:	b084      	sub	sp, #16
100050e8:	af00      	add	r7, sp, #0
  uint32_t axissfreq = 0;
100050ea:	2300      	movs	r3, #0
100050ec:	60fb      	str	r3, [r7, #12]
  PLL2_ClocksTypeDef pll2_clocks;

  switch (__HAL_RCC_GET_AXIS_SOURCE())
100050ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100050f4:	f003 0307 	and.w	r3, r3, #7
100050f8:	2b02      	cmp	r3, #2
100050fa:	d006      	beq.n	1000510a <HAL_RCC_GetAXISSFreq+0x26>
100050fc:	2b02      	cmp	r3, #2
100050fe:	d823      	bhi.n	10005148 <HAL_RCC_GetAXISSFreq+0x64>
10005100:	2b00      	cmp	r3, #0
10005102:	d009      	beq.n	10005118 <HAL_RCC_GetAXISSFreq+0x34>
10005104:	2b01      	cmp	r3, #1
10005106:	d01c      	beq.n	10005142 <HAL_RCC_GetAXISSFreq+0x5e>
10005108:	e01e      	b.n	10005148 <HAL_RCC_GetAXISSFreq+0x64>
  {
    case RCC_AXISSOURCE_PLL2:
      HAL_RCC_GetPLL2ClockFreq(&pll2_clocks);
1000510a:	463b      	mov	r3, r7
1000510c:	4618      	mov	r0, r3
1000510e:	f7ff fc0b 	bl	10004928 <HAL_RCC_GetPLL2ClockFreq>
      axissfreq = pll2_clocks.PLL2_P_Frequency;
10005112:	683b      	ldr	r3, [r7, #0]
10005114:	60fb      	str	r3, [r7, #12]
      break;
10005116:	e01a      	b.n	1000514e <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10005118:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000511c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10005120:	f003 0304 	and.w	r3, r3, #4
10005124:	2b04      	cmp	r3, #4
10005126:	d109      	bne.n	1000513c <HAL_RCC_GetAXISSFreq+0x58>
      {
        axissfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10005128:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000512c:	699b      	ldr	r3, [r3, #24]
1000512e:	f003 0303 	and.w	r3, r3, #3
10005132:	4a09      	ldr	r2, [pc, #36]	; (10005158 <HAL_RCC_GetAXISSFreq+0x74>)
10005134:	fa22 f303 	lsr.w	r3, r2, r3
10005138:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        axissfreq = HSI_VALUE;
      }
      break;
1000513a:	e008      	b.n	1000514e <HAL_RCC_GetAXISSFreq+0x6a>
        axissfreq = HSI_VALUE;
1000513c:	4b06      	ldr	r3, [pc, #24]	; (10005158 <HAL_RCC_GetAXISSFreq+0x74>)
1000513e:	60fb      	str	r3, [r7, #12]
      break;
10005140:	e005      	b.n	1000514e <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_HSE:
      axissfreq = HSE_VALUE;
10005142:	4b06      	ldr	r3, [pc, #24]	; (1000515c <HAL_RCC_GetAXISSFreq+0x78>)
10005144:	60fb      	str	r3, [r7, #12]
      break;
10005146:	e002      	b.n	1000514e <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_OFF:
    default:
      axissfreq = 0; /* ck_axiss is gated */
10005148:	2300      	movs	r3, #0
1000514a:	60fb      	str	r3, [r7, #12]
      break;
1000514c:	bf00      	nop
  }

  return axissfreq;
1000514e:	68fb      	ldr	r3, [r7, #12]
}
10005150:	4618      	mov	r0, r3
10005152:	3710      	adds	r7, #16
10005154:	46bd      	mov	sp, r7
10005156:	bd80      	pop	{r7, pc}
10005158:	03d09000 	.word	0x03d09000
1000515c:	016e3600 	.word	0x016e3600

10005160 <HAL_RCC_GetMCUSSFreq>:

uint32_t HAL_RCC_GetMCUSSFreq()
{
10005160:	b580      	push	{r7, lr}
10005162:	b084      	sub	sp, #16
10005164:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
10005166:	2300      	movs	r3, #0
10005168:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
1000516a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000516e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10005170:	f003 0303 	and.w	r3, r3, #3
10005174:	2b03      	cmp	r3, #3
10005176:	d822      	bhi.n	100051be <HAL_RCC_GetMCUSSFreq+0x5e>
10005178:	a201      	add	r2, pc, #4	; (adr r2, 10005180 <HAL_RCC_GetMCUSSFreq+0x20>)
1000517a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000517e:	bf00      	nop
10005180:	1000519f 	.word	0x1000519f
10005184:	100051b3 	.word	0x100051b3
10005188:	100051b9 	.word	0x100051b9
1000518c:	10005191 	.word	0x10005191
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10005190:	463b      	mov	r3, r7
10005192:	4618      	mov	r0, r3
10005194:	f7ff fcb4 	bl	10004b00 <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
10005198:	683b      	ldr	r3, [r7, #0]
1000519a:	60fb      	str	r3, [r7, #12]
      break;
1000519c:	e00f      	b.n	100051be <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
1000519e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100051a2:	699b      	ldr	r3, [r3, #24]
100051a4:	f003 0303 	and.w	r3, r3, #3
100051a8:	4a07      	ldr	r2, [pc, #28]	; (100051c8 <HAL_RCC_GetMCUSSFreq+0x68>)
100051aa:	fa22 f303 	lsr.w	r3, r2, r3
100051ae:	60fb      	str	r3, [r7, #12]

      break;
100051b0:	e005      	b.n	100051be <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
100051b2:	4b06      	ldr	r3, [pc, #24]	; (100051cc <HAL_RCC_GetMCUSSFreq+0x6c>)
100051b4:	60fb      	str	r3, [r7, #12]
      break;
100051b6:	e002      	b.n	100051be <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
100051b8:	4b05      	ldr	r3, [pc, #20]	; (100051d0 <HAL_RCC_GetMCUSSFreq+0x70>)
100051ba:	60fb      	str	r3, [r7, #12]
      break;
100051bc:	bf00      	nop
  }

  return mcussfreq;
100051be:	68fb      	ldr	r3, [r7, #12]
}
100051c0:	4618      	mov	r0, r3
100051c2:	3710      	adds	r7, #16
100051c4:	46bd      	mov	sp, r7
100051c6:	bd80      	pop	{r7, pc}
100051c8:	03d09000 	.word	0x03d09000
100051cc:	016e3600 	.word	0x016e3600
100051d0:	003d0900 	.word	0x003d0900

100051d4 <HAL_RCC_WAKEUP_IRQHandler>:
  * @brief This function handles the RCC Wake up interrupt (rcc_mcu_wkup_irq/rcc_mpu_wkup_irq)
  * @note This API should be called under the RCC_WAKEUP_Handler().
  * @retval None
  */
void HAL_RCC_WAKEUP_IRQHandler(void)
{
100051d4:	b580      	push	{r7, lr}
100051d6:	af00      	add	r7, sp, #0
  /* Check RCC WKUP flag is set */
  if (__HAL_RCC_GET_IT(RCC_IT_WKUP) != RESET)
100051d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100051dc:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
100051e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
100051e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
100051e8:	d107      	bne.n	100051fa <HAL_RCC_WAKEUP_IRQHandler+0x26>
  {
    /* Clear the RCC WKUP flag bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_WKUP);
100051ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100051ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
100051f2:	f8c3 2c18 	str.w	r2, [r3, #3096]	; 0xc18

    /* RCC WKUP interrupt user callback */
    HAL_RCC_WAKEUP_Callback();
100051f6:	f000 f802 	bl	100051fe <HAL_RCC_WAKEUP_Callback>
  }
}
100051fa:	bf00      	nop
100051fc:	bd80      	pop	{r7, pc}

100051fe <HAL_RCC_WAKEUP_Callback>:
/**
  * @brief  RCC WAKEUP interrupt callback
  * @retval None
  */
__weak void HAL_RCC_WAKEUP_Callback(void)
{
100051fe:	b480      	push	{r7}
10005200:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_WAKEUP_Callback could be implemented in the user file
  */
}
10005202:	bf00      	nop
10005204:	46bd      	mov	sp, r7
10005206:	f85d 7b04 	ldr.w	r7, [sp], #4
1000520a:	4770      	bx	lr

1000520c <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
1000520c:	b580      	push	{r7, lr}
1000520e:	b084      	sub	sp, #16
10005210:	af00      	add	r7, sp, #0
10005212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
10005214:	687b      	ldr	r3, [r7, #4]
10005216:	681b      	ldr	r3, [r3, #0]
10005218:	2b00      	cmp	r3, #0
1000521a:	f000 8171 	beq.w	10005500 <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
1000521e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005224:	f003 0307 	and.w	r3, r3, #7
10005228:	2b02      	cmp	r3, #2
1000522a:	d108      	bne.n	1000523e <RCCEx_PLL2_Config+0x32>
1000522c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005232:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10005236:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000523a:	f000 815f 	beq.w	100054fc <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
1000523e:	687b      	ldr	r3, [r7, #4]
10005240:	681b      	ldr	r3, [r3, #0]
10005242:	2b02      	cmp	r3, #2
10005244:	f040 8130 	bne.w	100054a8 <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10005248:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000524c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000524e:	f003 0303 	and.w	r3, r3, #3
10005252:	2b00      	cmp	r3, #0
10005254:	d008      	beq.n	10005268 <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
10005256:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000525a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000525c:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10005260:	2b01      	cmp	r3, #1
10005262:	d001      	beq.n	10005268 <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
10005264:	2301      	movs	r3, #1
10005266:	e14c      	b.n	10005502 <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10005268:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000526c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005270:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10005278:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
1000527c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005280:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005284:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005288:	f023 0301 	bic.w	r3, r3, #1
1000528c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10005290:	f7fc fa60 	bl	10001754 <HAL_GetTick>
10005294:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10005296:	e008      	b.n	100052aa <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005298:	f7fc fa5c 	bl	10001754 <HAL_GetTick>
1000529c:	4602      	mov	r2, r0
1000529e:	68fb      	ldr	r3, [r7, #12]
100052a0:	1ad3      	subs	r3, r2, r3
100052a2:	2b64      	cmp	r3, #100	; 0x64
100052a4:	d901      	bls.n	100052aa <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
100052a6:	2303      	movs	r3, #3
100052a8:	e12b      	b.n	10005502 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100052aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100052ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100052b2:	f003 0302 	and.w	r3, r3, #2
100052b6:	2b02      	cmp	r3, #2
100052b8:	d0ee      	beq.n	10005298 <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
100052ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100052be:	6a1b      	ldr	r3, [r3, #32]
100052c0:	f003 0303 	and.w	r3, r3, #3
100052c4:	2b02      	cmp	r3, #2
100052c6:	d107      	bne.n	100052d8 <RCCEx_PLL2_Config+0xcc>
100052c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100052cc:	6a1b      	ldr	r3, [r3, #32]
100052ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100052d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100052d6:	d00e      	beq.n	100052f6 <RCCEx_PLL2_Config+0xea>
100052d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100052dc:	6a1b      	ldr	r3, [r3, #32]
100052de:	f003 0303 	and.w	r3, r3, #3
100052e2:	2b03      	cmp	r3, #3
100052e4:	d112      	bne.n	1000530c <RCCEx_PLL2_Config+0x100>
100052e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100052ea:	6a1b      	ldr	r3, [r3, #32]
100052ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100052f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100052f4:	d10a      	bne.n	1000530c <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
100052f6:	687b      	ldr	r3, [r7, #4]
100052f8:	685a      	ldr	r2, [r3, #4]
100052fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100052fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005300:	f003 0303 	and.w	r3, r3, #3
10005304:	429a      	cmp	r2, r3
10005306:	d00c      	beq.n	10005322 <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
10005308:	2301      	movs	r3, #1
1000530a:	e0fa      	b.n	10005502 <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
1000530c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005312:	f023 0203 	bic.w	r2, r3, #3
10005316:	687b      	ldr	r3, [r7, #4]
10005318:	685b      	ldr	r3, [r3, #4]
1000531a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000531e:	4313      	orrs	r3, r2
10005320:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
10005322:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005326:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
1000532a:	4b78      	ldr	r3, [pc, #480]	; (1000550c <RCCEx_PLL2_Config+0x300>)
1000532c:	4013      	ands	r3, r2
1000532e:	687a      	ldr	r2, [r7, #4]
10005330:	68d2      	ldr	r2, [r2, #12]
10005332:	1e51      	subs	r1, r2, #1
10005334:	687a      	ldr	r2, [r7, #4]
10005336:	6892      	ldr	r2, [r2, #8]
10005338:	3a01      	subs	r2, #1
1000533a:	0412      	lsls	r2, r2, #16
1000533c:	430a      	orrs	r2, r1
1000533e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005342:	4313      	orrs	r3, r2
10005344:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
10005348:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000534c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10005350:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10005354:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10005358:	687a      	ldr	r2, [r7, #4]
1000535a:	6912      	ldr	r2, [r2, #16]
1000535c:	1e51      	subs	r1, r2, #1
1000535e:	687a      	ldr	r2, [r7, #4]
10005360:	6952      	ldr	r2, [r2, #20]
10005362:	3a01      	subs	r2, #1
10005364:	0212      	lsls	r2, r2, #8
10005366:	4311      	orrs	r1, r2
10005368:	687a      	ldr	r2, [r7, #4]
1000536a:	6992      	ldr	r2, [r2, #24]
1000536c:	3a01      	subs	r2, #1
1000536e:	0412      	lsls	r2, r2, #16
10005370:	430a      	orrs	r2, r1
10005372:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005376:	4313      	orrs	r3, r2
10005378:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
1000537c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005380:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10005384:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1000538c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
10005390:	687b      	ldr	r3, [r7, #4]
10005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005394:	2b02      	cmp	r3, #2
10005396:	d003      	beq.n	100053a0 <RCCEx_PLL2_Config+0x194>
10005398:	687b      	ldr	r3, [r7, #4]
1000539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000539c:	2b00      	cmp	r3, #0
1000539e:	d10c      	bne.n	100053ba <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
100053a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100053a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
100053a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100053ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100053b0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100053b4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
100053b8:	e00f      	b.n	100053da <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
100053ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100053be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
100053c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100053c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100053ca:	687a      	ldr	r2, [r7, #4]
100053cc:	6a12      	ldr	r2, [r2, #32]
100053ce:	00d2      	lsls	r2, r2, #3
100053d0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100053d4:	4313      	orrs	r3, r2
100053d6:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
100053da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100053de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
100053e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100053e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
100053ea:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100053ee:	687b      	ldr	r3, [r7, #4]
100053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100053f2:	2b02      	cmp	r3, #2
100053f4:	d124      	bne.n	10005440 <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
100053f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100053fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
100053fe:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10005402:	687b      	ldr	r3, [r7, #4]
10005404:	6a99      	ldr	r1, [r3, #40]	; 0x28
10005406:	687b      	ldr	r3, [r7, #4]
10005408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000540a:	4319      	orrs	r1, r3
1000540c:	687b      	ldr	r3, [r7, #4]
1000540e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10005410:	4319      	orrs	r1, r3
10005412:	687b      	ldr	r3, [r7, #4]
10005414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10005416:	4319      	orrs	r1, r3
10005418:	687b      	ldr	r3, [r7, #4]
1000541a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000541c:	041b      	lsls	r3, r3, #16
1000541e:	430b      	orrs	r3, r1
10005420:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005424:	4313      	orrs	r3, r2
10005426:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
1000542a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000542e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005432:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005436:	f043 0304 	orr.w	r3, r3, #4
1000543a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
1000543e:	e009      	b.n	10005454 <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
10005440:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005444:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005448:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000544c:	f023 0304 	bic.w	r3, r3, #4
10005450:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
10005454:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000545c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005460:	f043 0301 	orr.w	r3, r3, #1
10005464:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10005468:	f7fc f974 	bl	10001754 <HAL_GetTick>
1000546c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
1000546e:	e008      	b.n	10005482 <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005470:	f7fc f970 	bl	10001754 <HAL_GetTick>
10005474:	4602      	mov	r2, r0
10005476:	68fb      	ldr	r3, [r7, #12]
10005478:	1ad3      	subs	r3, r2, r3
1000547a:	2b64      	cmp	r3, #100	; 0x64
1000547c:	d901      	bls.n	10005482 <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
1000547e:	2303      	movs	r3, #3
10005480:	e03f      	b.n	10005502 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10005482:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000548a:	f003 0302 	and.w	r3, r3, #2
1000548e:	2b02      	cmp	r3, #2
10005490:	d1ee      	bne.n	10005470 <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10005492:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000549a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000549e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
100054a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
100054a6:	e02b      	b.n	10005500 <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
100054a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100054ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100054b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100054b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100054b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
100054bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100054c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100054c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100054c8:	f023 0301 	bic.w	r3, r3, #1
100054cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100054d0:	f7fc f940 	bl	10001754 <HAL_GetTick>
100054d4:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100054d6:	e008      	b.n	100054ea <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100054d8:	f7fc f93c 	bl	10001754 <HAL_GetTick>
100054dc:	4602      	mov	r2, r0
100054de:	68fb      	ldr	r3, [r7, #12]
100054e0:	1ad3      	subs	r3, r2, r3
100054e2:	2b64      	cmp	r3, #100	; 0x64
100054e4:	d901      	bls.n	100054ea <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
100054e6:	2303      	movs	r3, #3
100054e8:	e00b      	b.n	10005502 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100054ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100054ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100054f2:	f003 0302 	and.w	r3, r3, #2
100054f6:	2b02      	cmp	r3, #2
100054f8:	d0ee      	beq.n	100054d8 <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
100054fa:	e001      	b.n	10005500 <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
100054fc:	2301      	movs	r3, #1
100054fe:	e000      	b.n	10005502 <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
10005500:	2300      	movs	r3, #0

}
10005502:	4618      	mov	r0, r3
10005504:	3710      	adds	r7, #16
10005506:	46bd      	mov	sp, r7
10005508:	bd80      	pop	{r7, pc}
1000550a:	bf00      	nop
1000550c:	ffc0fe00 	.word	0xffc0fe00

10005510 <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
10005510:	b580      	push	{r7, lr}
10005512:	b084      	sub	sp, #16
10005514:	af00      	add	r7, sp, #0
10005516:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
10005518:	687b      	ldr	r3, [r7, #4]
1000551a:	681b      	ldr	r3, [r3, #0]
1000551c:	2b00      	cmp	r3, #0
1000551e:	f000 815a 	beq.w	100057d6 <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
10005522:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10005528:	f003 0303 	and.w	r3, r3, #3
1000552c:	2b03      	cmp	r3, #3
1000552e:	d108      	bne.n	10005542 <RCCEx_PLL3_Config+0x32>
10005530:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10005536:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000553a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000553e:	f000 8148 	beq.w	100057d2 <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
10005542:	687b      	ldr	r3, [r7, #4]
10005544:	681b      	ldr	r3, [r3, #0]
10005546:	2b02      	cmp	r3, #2
10005548:	f040 8119 	bne.w	1000577e <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
1000554c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005550:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005554:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
1000555c:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
10005560:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005564:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005568:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000556c:	f023 0301 	bic.w	r3, r3, #1
10005570:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10005574:	f7fc f8ee 	bl	10001754 <HAL_GetTick>
10005578:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
1000557a:	e008      	b.n	1000558e <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000557c:	f7fc f8ea 	bl	10001754 <HAL_GetTick>
10005580:	4602      	mov	r2, r0
10005582:	68fb      	ldr	r3, [r7, #12]
10005584:	1ad3      	subs	r3, r2, r3
10005586:	2b64      	cmp	r3, #100	; 0x64
10005588:	d901      	bls.n	1000558e <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
1000558a:	2303      	movs	r3, #3
1000558c:	e124      	b.n	100057d8 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
1000558e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005592:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005596:	f003 0302 	and.w	r3, r3, #2
1000559a:	2b02      	cmp	r3, #2
1000559c:	d0ee      	beq.n	1000557c <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
1000559e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100055a2:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
100055a6:	f023 0203 	bic.w	r2, r3, #3
100055aa:	687b      	ldr	r3, [r7, #4]
100055ac:	685b      	ldr	r3, [r3, #4]
100055ae:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100055b2:	4313      	orrs	r3, r2
100055b4:	f8c1 3820 	str.w	r3, [r1, #2080]	; 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
100055b8:	e008      	b.n	100055cc <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100055ba:	f7fc f8cb 	bl	10001754 <HAL_GetTick>
100055be:	4602      	mov	r2, r0
100055c0:	68fb      	ldr	r3, [r7, #12]
100055c2:	1ad3      	subs	r3, r2, r3
100055c4:	2b64      	cmp	r3, #100	; 0x64
100055c6:	d901      	bls.n	100055cc <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
100055c8:	2303      	movs	r3, #3
100055ca:	e105      	b.n	100057d8 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
100055cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100055d0:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
100055d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100055d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100055dc:	d1ed      	bne.n	100055ba <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
100055de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100055e2:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
100055e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
100055ea:	687b      	ldr	r3, [r7, #4]
100055ec:	69db      	ldr	r3, [r3, #28]
100055ee:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100055f2:	4313      	orrs	r3, r2
100055f4:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
100055f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100055fc:	f8d3 2884 	ldr.w	r2, [r3, #2180]	; 0x884
10005600:	4b77      	ldr	r3, [pc, #476]	; (100057e0 <RCCEx_PLL3_Config+0x2d0>)
10005602:	4013      	ands	r3, r2
10005604:	687a      	ldr	r2, [r7, #4]
10005606:	68d2      	ldr	r2, [r2, #12]
10005608:	1e51      	subs	r1, r2, #1
1000560a:	687a      	ldr	r2, [r7, #4]
1000560c:	6892      	ldr	r2, [r2, #8]
1000560e:	3a01      	subs	r2, #1
10005610:	0412      	lsls	r2, r2, #16
10005612:	430a      	orrs	r2, r1
10005614:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005618:	4313      	orrs	r3, r2
1000561a:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884
1000561e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005622:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10005626:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
1000562a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
1000562e:	687a      	ldr	r2, [r7, #4]
10005630:	6912      	ldr	r2, [r2, #16]
10005632:	1e51      	subs	r1, r2, #1
10005634:	687a      	ldr	r2, [r7, #4]
10005636:	6952      	ldr	r2, [r2, #20]
10005638:	3a01      	subs	r2, #1
1000563a:	0212      	lsls	r2, r2, #8
1000563c:	4311      	orrs	r1, r2
1000563e:	687a      	ldr	r2, [r7, #4]
10005640:	6992      	ldr	r2, [r2, #24]
10005642:	3a01      	subs	r2, #1
10005644:	0412      	lsls	r2, r2, #16
10005646:	430a      	orrs	r2, r1
10005648:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000564c:	4313      	orrs	r3, r2
1000564e:	f8c1 3888 	str.w	r3, [r1, #2184]	; 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
10005652:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005656:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
1000565a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000565e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10005662:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
10005666:	687b      	ldr	r3, [r7, #4]
10005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000566a:	2b02      	cmp	r3, #2
1000566c:	d003      	beq.n	10005676 <RCCEx_PLL3_Config+0x166>
1000566e:	687b      	ldr	r3, [r7, #4]
10005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005672:	2b00      	cmp	r3, #0
10005674:	d10c      	bne.n	10005690 <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
10005676:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000567a:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
1000567e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005682:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10005686:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
1000568a:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
1000568e:	e00f      	b.n	100056b0 <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
10005690:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005694:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10005698:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000569c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100056a0:	687a      	ldr	r2, [r7, #4]
100056a2:	6a12      	ldr	r2, [r2, #32]
100056a4:	00d2      	lsls	r2, r2, #3
100056a6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100056aa:	4313      	orrs	r3, r2
100056ac:	f8c1 388c 	str.w	r3, [r1, #2188]	; 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
100056b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100056b4:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100056b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100056bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
100056c0:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100056c4:	687b      	ldr	r3, [r7, #4]
100056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100056c8:	2b02      	cmp	r3, #2
100056ca:	d124      	bne.n	10005716 <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
100056cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100056d0:	f8d3 3890 	ldr.w	r3, [r3, #2192]	; 0x890
100056d4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
100056d8:	687b      	ldr	r3, [r7, #4]
100056da:	6a99      	ldr	r1, [r3, #40]	; 0x28
100056dc:	687b      	ldr	r3, [r7, #4]
100056de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100056e0:	4319      	orrs	r1, r3
100056e2:	687b      	ldr	r3, [r7, #4]
100056e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100056e6:	4319      	orrs	r1, r3
100056e8:	687b      	ldr	r3, [r7, #4]
100056ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100056ec:	4319      	orrs	r1, r3
100056ee:	687b      	ldr	r3, [r7, #4]
100056f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100056f2:	041b      	lsls	r3, r3, #16
100056f4:	430b      	orrs	r3, r1
100056f6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100056fa:	4313      	orrs	r3, r2
100056fc:	f8c1 3890 	str.w	r3, [r1, #2192]	; 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
10005700:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005704:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005708:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000570c:	f043 0304 	orr.w	r3, r3, #4
10005710:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
10005714:	e009      	b.n	1000572a <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
10005716:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000571a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000571e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005722:	f023 0304 	bic.w	r3, r3, #4
10005726:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
1000572a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000572e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005732:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005736:	f043 0301 	orr.w	r3, r3, #1
1000573a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000573e:	f7fc f809 	bl	10001754 <HAL_GetTick>
10005742:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10005744:	e008      	b.n	10005758 <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005746:	f7fc f805 	bl	10001754 <HAL_GetTick>
1000574a:	4602      	mov	r2, r0
1000574c:	68fb      	ldr	r3, [r7, #12]
1000574e:	1ad3      	subs	r3, r2, r3
10005750:	2b64      	cmp	r3, #100	; 0x64
10005752:	d901      	bls.n	10005758 <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
10005754:	2303      	movs	r3, #3
10005756:	e03f      	b.n	100057d8 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10005758:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000575c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005760:	f003 0302 	and.w	r3, r3, #2
10005764:	2b02      	cmp	r3, #2
10005766:	d1ee      	bne.n	10005746 <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10005768:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000576c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005770:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005774:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10005778:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
1000577c:	e02b      	b.n	100057d6 <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
1000577e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005782:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005786:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000578a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
1000578e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
10005792:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005796:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000579a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000579e:	f023 0301 	bic.w	r3, r3, #1
100057a2:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100057a6:	f7fb ffd5 	bl	10001754 <HAL_GetTick>
100057aa:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
100057ac:	e008      	b.n	100057c0 <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100057ae:	f7fb ffd1 	bl	10001754 <HAL_GetTick>
100057b2:	4602      	mov	r2, r0
100057b4:	68fb      	ldr	r3, [r7, #12]
100057b6:	1ad3      	subs	r3, r2, r3
100057b8:	2b64      	cmp	r3, #100	; 0x64
100057ba:	d901      	bls.n	100057c0 <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
100057bc:	2303      	movs	r3, #3
100057be:	e00b      	b.n	100057d8 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
100057c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100057c4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100057c8:	f003 0302 	and.w	r3, r3, #2
100057cc:	2b02      	cmp	r3, #2
100057ce:	d0ee      	beq.n	100057ae <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
100057d0:	e001      	b.n	100057d6 <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
100057d2:	2301      	movs	r3, #1
100057d4:	e000      	b.n	100057d8 <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
100057d6:	2300      	movs	r3, #0
}
100057d8:	4618      	mov	r0, r3
100057da:	3710      	adds	r7, #16
100057dc:	46bd      	mov	sp, r7
100057de:	bd80      	pop	{r7, pc}
100057e0:	ffc0fe00 	.word	0xffc0fe00

100057e4 <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
100057e4:	b580      	push	{r7, lr}
100057e6:	b084      	sub	sp, #16
100057e8:	af00      	add	r7, sp, #0
100057ea:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
100057ec:	687b      	ldr	r3, [r7, #4]
100057ee:	681b      	ldr	r3, [r3, #0]
100057f0:	2b00      	cmp	r3, #0
100057f2:	f000 8147 	beq.w	10005a84 <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
100057f6:	687b      	ldr	r3, [r7, #4]
100057f8:	681b      	ldr	r3, [r3, #0]
100057fa:	2b02      	cmp	r3, #2
100057fc:	f040 8119 	bne.w	10005a32 <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10005800:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005804:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005808:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000580c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10005810:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
10005814:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005818:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000581c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005820:	f023 0301 	bic.w	r3, r3, #1
10005824:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10005828:	f7fb ff94 	bl	10001754 <HAL_GetTick>
1000582c:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
1000582e:	e008      	b.n	10005842 <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005830:	f7fb ff90 	bl	10001754 <HAL_GetTick>
10005834:	4602      	mov	r2, r0
10005836:	68fb      	ldr	r3, [r7, #12]
10005838:	1ad3      	subs	r3, r2, r3
1000583a:	2b64      	cmp	r3, #100	; 0x64
1000583c:	d901      	bls.n	10005842 <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
1000583e:	2303      	movs	r3, #3
10005840:	e121      	b.n	10005a86 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10005842:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005846:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000584a:	f003 0302 	and.w	r3, r3, #2
1000584e:	2b02      	cmp	r3, #2
10005850:	d0ee      	beq.n	10005830 <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
10005852:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005856:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
1000585a:	f023 0203 	bic.w	r2, r3, #3
1000585e:	687b      	ldr	r3, [r7, #4]
10005860:	685b      	ldr	r3, [r3, #4]
10005862:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005866:	4313      	orrs	r3, r2
10005868:	f8c1 3824 	str.w	r3, [r1, #2084]	; 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
1000586c:	e008      	b.n	10005880 <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000586e:	f7fb ff71 	bl	10001754 <HAL_GetTick>
10005872:	4602      	mov	r2, r0
10005874:	68fb      	ldr	r3, [r7, #12]
10005876:	1ad3      	subs	r3, r2, r3
10005878:	2b64      	cmp	r3, #100	; 0x64
1000587a:	d901      	bls.n	10005880 <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
1000587c:	2303      	movs	r3, #3
1000587e:	e102      	b.n	10005a86 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10005880:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005884:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10005888:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000588c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10005890:	d1ed      	bne.n	1000586e <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
10005892:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005896:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
1000589a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
1000589e:	687b      	ldr	r3, [r7, #4]
100058a0:	69db      	ldr	r3, [r3, #28]
100058a2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100058a6:	4313      	orrs	r3, r2
100058a8:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
100058ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100058b0:	f8d3 2898 	ldr.w	r2, [r3, #2200]	; 0x898
100058b4:	4b76      	ldr	r3, [pc, #472]	; (10005a90 <RCCEx_PLL4_Config+0x2ac>)
100058b6:	4013      	ands	r3, r2
100058b8:	687a      	ldr	r2, [r7, #4]
100058ba:	68d2      	ldr	r2, [r2, #12]
100058bc:	1e51      	subs	r1, r2, #1
100058be:	687a      	ldr	r2, [r7, #4]
100058c0:	6892      	ldr	r2, [r2, #8]
100058c2:	3a01      	subs	r2, #1
100058c4:	0412      	lsls	r2, r2, #16
100058c6:	430a      	orrs	r2, r1
100058c8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100058cc:	4313      	orrs	r3, r2
100058ce:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898
100058d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100058d6:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
100058da:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
100058de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
100058e2:	687a      	ldr	r2, [r7, #4]
100058e4:	6912      	ldr	r2, [r2, #16]
100058e6:	1e51      	subs	r1, r2, #1
100058e8:	687a      	ldr	r2, [r7, #4]
100058ea:	6952      	ldr	r2, [r2, #20]
100058ec:	3a01      	subs	r2, #1
100058ee:	0212      	lsls	r2, r2, #8
100058f0:	4311      	orrs	r1, r2
100058f2:	687a      	ldr	r2, [r7, #4]
100058f4:	6992      	ldr	r2, [r2, #24]
100058f6:	3a01      	subs	r2, #1
100058f8:	0412      	lsls	r2, r2, #16
100058fa:	430a      	orrs	r2, r1
100058fc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005900:	4313      	orrs	r3, r2
10005902:	f8c1 389c 	str.w	r3, [r1, #2204]	; 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
10005906:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000590a:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
1000590e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10005916:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
1000591a:	687b      	ldr	r3, [r7, #4]
1000591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000591e:	2b02      	cmp	r3, #2
10005920:	d003      	beq.n	1000592a <RCCEx_PLL4_Config+0x146>
10005922:	687b      	ldr	r3, [r7, #4]
10005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005926:	2b00      	cmp	r3, #0
10005928:	d10c      	bne.n	10005944 <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
1000592a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000592e:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10005932:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000593a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
1000593e:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
10005942:	e00f      	b.n	10005964 <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
10005944:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005948:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
1000594c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10005950:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10005954:	687a      	ldr	r2, [r7, #4]
10005956:	6a12      	ldr	r2, [r2, #32]
10005958:	00d2      	lsls	r2, r2, #3
1000595a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000595e:	4313      	orrs	r3, r2
10005960:	f8c1 38a0 	str.w	r3, [r1, #2208]	; 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
10005964:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005968:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
1000596c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10005974:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10005978:	687b      	ldr	r3, [r7, #4]
1000597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000597c:	2b02      	cmp	r3, #2
1000597e:	d124      	bne.n	100059ca <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
10005980:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005984:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	; 0x8a4
10005988:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
1000598c:	687b      	ldr	r3, [r7, #4]
1000598e:	6a99      	ldr	r1, [r3, #40]	; 0x28
10005990:	687b      	ldr	r3, [r7, #4]
10005992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10005994:	4319      	orrs	r1, r3
10005996:	687b      	ldr	r3, [r7, #4]
10005998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000599a:	4319      	orrs	r1, r3
1000599c:	687b      	ldr	r3, [r7, #4]
1000599e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100059a0:	4319      	orrs	r1, r3
100059a2:	687b      	ldr	r3, [r7, #4]
100059a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100059a6:	041b      	lsls	r3, r3, #16
100059a8:	430b      	orrs	r3, r1
100059aa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100059ae:	4313      	orrs	r3, r2
100059b0:	f8c1 38a4 	str.w	r3, [r1, #2212]	; 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
100059b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100059b8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100059bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100059c0:	f043 0304 	orr.w	r3, r3, #4
100059c4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
100059c8:	e009      	b.n	100059de <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
100059ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100059ce:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100059d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100059d6:	f023 0304 	bic.w	r3, r3, #4
100059da:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
100059de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100059e2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100059e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100059ea:	f043 0301 	orr.w	r3, r3, #1
100059ee:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100059f2:	f7fb feaf 	bl	10001754 <HAL_GetTick>
100059f6:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
100059f8:	e008      	b.n	10005a0c <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100059fa:	f7fb feab 	bl	10001754 <HAL_GetTick>
100059fe:	4602      	mov	r2, r0
10005a00:	68fb      	ldr	r3, [r7, #12]
10005a02:	1ad3      	subs	r3, r2, r3
10005a04:	2b64      	cmp	r3, #100	; 0x64
10005a06:	d901      	bls.n	10005a0c <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
10005a08:	2303      	movs	r3, #3
10005a0a:	e03c      	b.n	10005a86 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10005a0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005a10:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005a14:	f003 0302 	and.w	r3, r3, #2
10005a18:	2b02      	cmp	r3, #2
10005a1a:	d1ee      	bne.n	100059fa <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10005a1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005a20:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005a24:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005a28:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10005a2c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10005a30:	e028      	b.n	10005a84 <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10005a32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005a36:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005a3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10005a42:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
10005a46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005a4a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005a4e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005a52:	f023 0301 	bic.w	r3, r3, #1
10005a56:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10005a5a:	f7fb fe7b 	bl	10001754 <HAL_GetTick>
10005a5e:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10005a60:	e008      	b.n	10005a74 <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005a62:	f7fb fe77 	bl	10001754 <HAL_GetTick>
10005a66:	4602      	mov	r2, r0
10005a68:	68fb      	ldr	r3, [r7, #12]
10005a6a:	1ad3      	subs	r3, r2, r3
10005a6c:	2b64      	cmp	r3, #100	; 0x64
10005a6e:	d901      	bls.n	10005a74 <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
10005a70:	2303      	movs	r3, #3
10005a72:	e008      	b.n	10005a86 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10005a74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005a78:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005a7c:	f003 0302 	and.w	r3, r3, #2
10005a80:	2b02      	cmp	r3, #2
10005a82:	d0ee      	beq.n	10005a62 <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
10005a84:	2300      	movs	r3, #0
}
10005a86:	4618      	mov	r0, r3
10005a88:	3710      	adds	r7, #16
10005a8a:	46bd      	mov	sp, r7
10005a8c:	bd80      	pop	{r7, pc}
10005a8e:	bf00      	nop
10005a90:	ffc0fe00 	.word	0xffc0fe00

10005a94 <HAL_RCCEx_PeriphCLKConfig>:
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef
                                            *PeriphClkInit)
{
10005a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
10005a98:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
10005a9c:	af00      	add	r7, sp, #0
10005a9e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005aa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005aa6:	6018      	str	r0, [r3, #0]
  uint32_t tmpreg = 0, RESERVED_BDCR_MASK = 0;
10005aa8:	2300      	movs	r3, #0
10005aaa:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
10005aae:	2300      	movs	r3, #0
10005ab0:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
10005ab4:	2300      	movs	r3, #0
10005ab6:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
10005aba:	2300      	movs	r3, #0
10005abc:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- CKPER configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) ==
10005ac0:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005ac4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005ac8:	681b      	ldr	r3, [r3, #0]
10005aca:	e9d3 2300 	ldrd	r2, r3, [r3]
10005ace:	f402 0400 	and.w	r4, r2, #8388608	; 0x800000
10005ad2:	2500      	movs	r5, #0
10005ad4:	ea54 0305 	orrs.w	r3, r4, r5
10005ad8:	d011      	beq.n	10005afe <HAL_RCCEx_PeriphCLKConfig+0x6a>
      RCC_PERIPHCLK_CKPER)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    __HAL_RCC_CKPER_CONFIG(PeriphClkInit->CkperClockSelection);
10005ada:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005ade:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
10005ae2:	f023 0103 	bic.w	r1, r3, #3
10005ae6:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005aea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005aee:	681b      	ldr	r3, [r3, #0]
10005af0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
10005af4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005af8:	430b      	orrs	r3, r1
10005afa:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
  }

  /*------------------------------ I2C12 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C12) ==
10005afe:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005b02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005b06:	681b      	ldr	r3, [r3, #0]
10005b08:	e9d3 2300 	ldrd	r2, r3, [r3]
10005b0c:	f002 0810 	and.w	r8, r2, #16
10005b10:	f04f 0900 	mov.w	r9, #0
10005b14:	ea58 0309 	orrs.w	r3, r8, r9
10005b18:	d038      	beq.n	10005b8c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      RCC_PERIPHCLK_I2C12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C12CLKSOURCE(PeriphClkInit->I2c12ClockSelection));

    if ((PeriphClkInit->I2c12ClockSelection) == RCC_I2C12CLKSOURCE_PLL4)
10005b1a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005b1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005b22:	681b      	ldr	r3, [r3, #0]
10005b24:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
10005b28:	2b01      	cmp	r3, #1
10005b2a:	d11d      	bne.n	10005b68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005b2c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005b30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005b34:	681b      	ldr	r3, [r3, #0]
10005b36:	3380      	adds	r3, #128	; 0x80
10005b38:	4618      	mov	r0, r3
10005b3a:	f7ff fe53 	bl	100057e4 <RCCEx_PLL4_Config>
10005b3e:	4603      	mov	r3, r0
10005b40:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10005b44:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005b48:	2b00      	cmp	r3, #0
10005b4a:	d003      	beq.n	10005b54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return status;
10005b4c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005b50:	f001 be2a 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10005b54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005b58:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005b5c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10005b64:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_I2C12_CONFIG(PeriphClkInit->I2c12ClockSelection);
10005b68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005b6c:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	; 0x8c0
10005b70:	f023 0107 	bic.w	r1, r3, #7
10005b74:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005b78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005b7c:	681b      	ldr	r3, [r3, #0]
10005b7e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
10005b82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005b86:	430b      	orrs	r3, r1
10005b88:	f8c2 38c0 	str.w	r3, [r2, #2240]	; 0x8c0
  }

  /*------------------------------ I2C35 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C35) ==
10005b8c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005b90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005b94:	681b      	ldr	r3, [r3, #0]
10005b96:	e9d3 2300 	ldrd	r2, r3, [r3]
10005b9a:	f002 0a20 	and.w	sl, r2, #32
10005b9e:	f04f 0b00 	mov.w	fp, #0
10005ba2:	ea5a 030b 	orrs.w	r3, sl, fp
10005ba6:	d038      	beq.n	10005c1a <HAL_RCCEx_PeriphCLKConfig+0x186>
      RCC_PERIPHCLK_I2C35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C35CLKSOURCE(PeriphClkInit->I2c35ClockSelection));

    if ((PeriphClkInit->I2c35ClockSelection) == RCC_I2C35CLKSOURCE_PLL4)
10005ba8:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005bac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005bb0:	681b      	ldr	r3, [r3, #0]
10005bb2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10005bb6:	2b01      	cmp	r3, #1
10005bb8:	d11d      	bne.n	10005bf6 <HAL_RCCEx_PeriphCLKConfig+0x162>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005bba:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005bbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005bc2:	681b      	ldr	r3, [r3, #0]
10005bc4:	3380      	adds	r3, #128	; 0x80
10005bc6:	4618      	mov	r0, r3
10005bc8:	f7ff fe0c 	bl	100057e4 <RCCEx_PLL4_Config>
10005bcc:	4603      	mov	r3, r0
10005bce:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10005bd2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005bd6:	2b00      	cmp	r3, #0
10005bd8:	d003      	beq.n	10005be2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        return status;
10005bda:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005bde:	f001 bde3 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10005be2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005be6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005bea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10005bf2:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_I2C35_CONFIG(PeriphClkInit->I2c35ClockSelection);
10005bf6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005bfa:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	; 0x8c4
10005bfe:	f023 0107 	bic.w	r1, r3, #7
10005c02:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005c06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005c0a:	681b      	ldr	r3, [r3, #0]
10005c0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10005c10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005c14:	430b      	orrs	r3, r1
10005c16:	f8c2 38c4 	str.w	r3, [r2, #2244]	; 0x8c4
  }

  /*------------------------------ I2C46 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C46) ==
10005c1a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005c1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005c22:	681b      	ldr	r3, [r3, #0]
10005c24:	e9d3 2300 	ldrd	r2, r3, [r3]
10005c28:	2100      	movs	r1, #0
10005c2a:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
10005c2e:	f003 0320 	and.w	r3, r3, #32
10005c32:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
10005c36:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
10005c3a:	460b      	mov	r3, r1
10005c3c:	4313      	orrs	r3, r2
10005c3e:	d038      	beq.n	10005cb2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      RCC_PERIPHCLK_I2C46)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C46CLKSOURCE(PeriphClkInit->I2c46ClockSelection));

    if ((PeriphClkInit->I2c46ClockSelection) == RCC_I2C46CLKSOURCE_PLL3)
10005c40:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005c44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005c48:	681b      	ldr	r3, [r3, #0]
10005c4a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10005c4e:	2b01      	cmp	r3, #1
10005c50:	d11d      	bne.n	10005c8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005c52:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005c56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005c5a:	681b      	ldr	r3, [r3, #0]
10005c5c:	3344      	adds	r3, #68	; 0x44
10005c5e:	4618      	mov	r0, r3
10005c60:	f7ff fc56 	bl	10005510 <RCCEx_PLL3_Config>
10005c64:	4603      	mov	r3, r0
10005c66:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10005c6a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005c6e:	2b00      	cmp	r3, #0
10005c70:	d003      	beq.n	10005c7a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      {
        return status;
10005c72:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005c76:	f001 bd97 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10005c7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005c7e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005c82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005c86:	f043 0320 	orr.w	r3, r3, #32
10005c8a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
    }

    __HAL_RCC_I2C46_CONFIG(PeriphClkInit->I2c46ClockSelection);
10005c8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005c92:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10005c96:	f023 0107 	bic.w	r1, r3, #7
10005c9a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005c9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005ca2:	681b      	ldr	r3, [r3, #0]
10005ca4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10005ca8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005cac:	430b      	orrs	r3, r1
10005cae:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) ==
10005cb2:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005cb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005cba:	681b      	ldr	r3, [r3, #0]
10005cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
10005cc0:	f002 0380 	and.w	r3, r2, #128	; 0x80
10005cc4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
10005cc8:	2300      	movs	r3, #0
10005cca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
10005cce:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
10005cd2:	460b      	mov	r3, r1
10005cd4:	4313      	orrs	r3, r2
10005cd6:	d07e      	beq.n	10005dd6 <HAL_RCCEx_PeriphCLKConfig+0x342>
      RCC_PERIPHCLK_SAI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
10005cd8:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005cdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005ce0:	681b      	ldr	r3, [r3, #0]
10005ce2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10005ce6:	2b04      	cmp	r3, #4
10005ce8:	d044      	beq.n	10005d74 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
10005cea:	2b04      	cmp	r3, #4
10005cec:	d861      	bhi.n	10005db2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
10005cee:	2b00      	cmp	r3, #0
10005cf0:	d002      	beq.n	10005cf8 <HAL_RCCEx_PeriphCLKConfig+0x264>
10005cf2:	2b01      	cmp	r3, #1
10005cf4:	d01f      	beq.n	10005d36 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
10005cf6:	e05c      	b.n	10005db2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    {
      case RCC_SAI1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI1*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005cf8:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005cfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005d00:	681b      	ldr	r3, [r3, #0]
10005d02:	3380      	adds	r3, #128	; 0x80
10005d04:	4618      	mov	r0, r3
10005d06:	f7ff fd6d 	bl	100057e4 <RCCEx_PLL4_Config>
10005d0a:	4603      	mov	r3, r0
10005d0c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005d10:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005d14:	2b00      	cmp	r3, #0
10005d16:	d003      	beq.n	10005d20 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        {
          return status;
10005d18:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005d1c:	f001 bd44 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10005d20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005d24:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005d28:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005d2c:	f043 0320 	orr.w	r3, r3, #32
10005d30:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10005d34:	e03d      	b.n	10005db2 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_Q:  /* PLL3_Q is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005d36:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005d3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005d3e:	681b      	ldr	r3, [r3, #0]
10005d40:	3344      	adds	r3, #68	; 0x44
10005d42:	4618      	mov	r0, r3
10005d44:	f7ff fbe4 	bl	10005510 <RCCEx_PLL3_Config>
10005d48:	4603      	mov	r3, r0
10005d4a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005d4e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005d52:	2b00      	cmp	r3, #0
10005d54:	d003      	beq.n	10005d5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
        {
          return status;
10005d56:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005d5a:	f001 bd25 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10005d5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005d62:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005d66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005d6a:	f043 0320 	orr.w	r3, r3, #32
10005d6e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10005d72:	e01e      	b.n	10005db2 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_R:  /* PLL3_R is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005d74:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005d78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005d7c:	681b      	ldr	r3, [r3, #0]
10005d7e:	3344      	adds	r3, #68	; 0x44
10005d80:	4618      	mov	r0, r3
10005d82:	f7ff fbc5 	bl	10005510 <RCCEx_PLL3_Config>
10005d86:	4603      	mov	r3, r0
10005d88:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005d8c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005d90:	2b00      	cmp	r3, #0
10005d92:	d003      	beq.n	10005d9c <HAL_RCCEx_PeriphCLKConfig+0x308>
        {
          return status;
10005d94:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005d98:	f001 bd06 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10005d9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005da0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005da4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10005dac:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10005db0:	bf00      	nop
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
10005db2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005db6:	f8d3 38c8 	ldr.w	r3, [r3, #2248]	; 0x8c8
10005dba:	f023 0107 	bic.w	r1, r3, #7
10005dbe:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005dc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005dc6:	681b      	ldr	r3, [r3, #0]
10005dc8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10005dcc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005dd0:	430b      	orrs	r3, r1
10005dd2:	f8c2 38c8 	str.w	r3, [r2, #2248]	; 0x8c8
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) ==
10005dd6:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005dda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005dde:	681b      	ldr	r3, [r3, #0]
10005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
10005de4:	f402 7380 	and.w	r3, r2, #256	; 0x100
10005de8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
10005dec:	2300      	movs	r3, #0
10005dee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
10005df2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
10005df6:	460b      	mov	r3, r1
10005df8:	4313      	orrs	r3, r2
10005dfa:	d07e      	beq.n	10005efa <HAL_RCCEx_PeriphCLKConfig+0x466>
      RCC_PERIPHCLK_SAI2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
10005dfc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005e00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005e04:	681b      	ldr	r3, [r3, #0]
10005e06:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
10005e0a:	2b05      	cmp	r3, #5
10005e0c:	d044      	beq.n	10005e98 <HAL_RCCEx_PeriphCLKConfig+0x404>
10005e0e:	2b05      	cmp	r3, #5
10005e10:	d861      	bhi.n	10005ed6 <HAL_RCCEx_PeriphCLKConfig+0x442>
10005e12:	2b00      	cmp	r3, #0
10005e14:	d002      	beq.n	10005e1c <HAL_RCCEx_PeriphCLKConfig+0x388>
10005e16:	2b01      	cmp	r3, #1
10005e18:	d01f      	beq.n	10005e5a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
10005e1a:	e05c      	b.n	10005ed6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      case RCC_SAI2CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI2*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005e1c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005e20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005e24:	681b      	ldr	r3, [r3, #0]
10005e26:	3380      	adds	r3, #128	; 0x80
10005e28:	4618      	mov	r0, r3
10005e2a:	f7ff fcdb 	bl	100057e4 <RCCEx_PLL4_Config>
10005e2e:	4603      	mov	r3, r0
10005e30:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005e34:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005e38:	2b00      	cmp	r3, #0
10005e3a:	d003      	beq.n	10005e44 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          return status;
10005e3c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005e40:	f001 bcb2 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10005e44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005e48:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005e4c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005e50:	f043 0320 	orr.w	r3, r3, #32
10005e54:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10005e58:	e03d      	b.n	10005ed6 <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005e5a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005e5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005e62:	681b      	ldr	r3, [r3, #0]
10005e64:	3344      	adds	r3, #68	; 0x44
10005e66:	4618      	mov	r0, r3
10005e68:	f7ff fb52 	bl	10005510 <RCCEx_PLL3_Config>
10005e6c:	4603      	mov	r3, r0
10005e6e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005e72:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005e76:	2b00      	cmp	r3, #0
10005e78:	d003      	beq.n	10005e82 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
        {
          return status;
10005e7a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005e7e:	f001 bc93 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10005e82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005e86:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005e8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005e8e:	f043 0320 	orr.w	r3, r3, #32
10005e92:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10005e96:	e01e      	b.n	10005ed6 <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005e98:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005e9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005ea0:	681b      	ldr	r3, [r3, #0]
10005ea2:	3344      	adds	r3, #68	; 0x44
10005ea4:	4618      	mov	r0, r3
10005ea6:	f7ff fb33 	bl	10005510 <RCCEx_PLL3_Config>
10005eaa:	4603      	mov	r3, r0
10005eac:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005eb0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005eb4:	2b00      	cmp	r3, #0
10005eb6:	d003      	beq.n	10005ec0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        {
          return status;
10005eb8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005ebc:	f001 bc74 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10005ec0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005ec4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005ec8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10005ed0:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10005ed4:	bf00      	nop
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
10005ed6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005eda:	f8d3 38cc 	ldr.w	r3, [r3, #2252]	; 0x8cc
10005ede:	f023 0107 	bic.w	r1, r3, #7
10005ee2:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005ee6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005eea:	681b      	ldr	r3, [r3, #0]
10005eec:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
10005ef0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005ef4:	430b      	orrs	r3, r1
10005ef6:	f8c2 38cc 	str.w	r3, [r2, #2252]	; 0x8cc
  }

  /*---------------------------- SAI3 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI3) ==
10005efa:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005efe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005f02:	681b      	ldr	r3, [r3, #0]
10005f04:	e9d3 2300 	ldrd	r2, r3, [r3]
10005f08:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
10005f0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
10005f10:	2300      	movs	r3, #0
10005f12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
10005f16:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
10005f1a:	460b      	mov	r3, r1
10005f1c:	4313      	orrs	r3, r2
10005f1e:	d07e      	beq.n	1000601e <HAL_RCCEx_PeriphCLKConfig+0x58a>
      RCC_PERIPHCLK_SAI3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI3CLKSOURCE(PeriphClkInit->Sai3ClockSelection));

    switch (PeriphClkInit->Sai3ClockSelection)
10005f20:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005f24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005f28:	681b      	ldr	r3, [r3, #0]
10005f2a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
10005f2e:	2b04      	cmp	r3, #4
10005f30:	d044      	beq.n	10005fbc <HAL_RCCEx_PeriphCLKConfig+0x528>
10005f32:	2b04      	cmp	r3, #4
10005f34:	d861      	bhi.n	10005ffa <HAL_RCCEx_PeriphCLKConfig+0x566>
10005f36:	2b00      	cmp	r3, #0
10005f38:	d002      	beq.n	10005f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
10005f3a:	2b01      	cmp	r3, #1
10005f3c:	d01f      	beq.n	10005f7e <HAL_RCCEx_PeriphCLKConfig+0x4ea>
10005f3e:	e05c      	b.n	10005ffa <HAL_RCCEx_PeriphCLKConfig+0x566>
    {
      case RCC_SAI3CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI3*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005f40:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005f44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005f48:	681b      	ldr	r3, [r3, #0]
10005f4a:	3380      	adds	r3, #128	; 0x80
10005f4c:	4618      	mov	r0, r3
10005f4e:	f7ff fc49 	bl	100057e4 <RCCEx_PLL4_Config>
10005f52:	4603      	mov	r3, r0
10005f54:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005f58:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005f5c:	2b00      	cmp	r3, #0
10005f5e:	d003      	beq.n	10005f68 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        {
          return status;
10005f60:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005f64:	f001 bc20 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10005f68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005f6c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005f70:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005f74:	f043 0320 	orr.w	r3, r3, #32
10005f78:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10005f7c:	e03d      	b.n	10005ffa <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005f7e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005f82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005f86:	681b      	ldr	r3, [r3, #0]
10005f88:	3344      	adds	r3, #68	; 0x44
10005f8a:	4618      	mov	r0, r3
10005f8c:	f7ff fac0 	bl	10005510 <RCCEx_PLL3_Config>
10005f90:	4603      	mov	r3, r0
10005f92:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005f96:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005f9a:	2b00      	cmp	r3, #0
10005f9c:	d003      	beq.n	10005fa6 <HAL_RCCEx_PeriphCLKConfig+0x512>
        {
          return status;
10005f9e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005fa2:	f001 bc01 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10005fa6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005faa:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005fae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005fb2:	f043 0320 	orr.w	r3, r3, #32
10005fb6:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10005fba:	e01e      	b.n	10005ffa <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005fbc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005fc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005fc4:	681b      	ldr	r3, [r3, #0]
10005fc6:	3344      	adds	r3, #68	; 0x44
10005fc8:	4618      	mov	r0, r3
10005fca:	f7ff faa1 	bl	10005510 <RCCEx_PLL3_Config>
10005fce:	4603      	mov	r3, r0
10005fd0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005fd4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005fd8:	2b00      	cmp	r3, #0
10005fda:	d003      	beq.n	10005fe4 <HAL_RCCEx_PeriphCLKConfig+0x550>
        {
          return status;
10005fdc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005fe0:	f001 bbe2 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10005fe4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005fe8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005fec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10005ff4:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10005ff8:	bf00      	nop
    }

    /* Set the source of SAI3 clock*/
    __HAL_RCC_SAI3_CONFIG(PeriphClkInit->Sai3ClockSelection);
10005ffa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005ffe:	f8d3 38d0 	ldr.w	r3, [r3, #2256]	; 0x8d0
10006002:	f023 0107 	bic.w	r1, r3, #7
10006006:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000600a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000600e:	681b      	ldr	r3, [r3, #0]
10006010:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
10006014:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006018:	430b      	orrs	r3, r1
1000601a:	f8c2 38d0 	str.w	r3, [r2, #2256]	; 0x8d0
  }

  /*---------------------------- SAI4 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4) ==
1000601e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006022:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006026:	681b      	ldr	r3, [r3, #0]
10006028:	e9d3 2300 	ldrd	r2, r3, [r3]
1000602c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
10006030:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
10006034:	2300      	movs	r3, #0
10006036:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
1000603a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
1000603e:	460b      	mov	r3, r1
10006040:	4313      	orrs	r3, r2
10006042:	d07e      	beq.n	10006142 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      RCC_PERIPHCLK_SAI4)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI4CLKSOURCE(PeriphClkInit->Sai4ClockSelection));

    switch (PeriphClkInit->Sai4ClockSelection)
10006044:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006048:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000604c:	681b      	ldr	r3, [r3, #0]
1000604e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
10006052:	2b04      	cmp	r3, #4
10006054:	d044      	beq.n	100060e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
10006056:	2b04      	cmp	r3, #4
10006058:	d861      	bhi.n	1000611e <HAL_RCCEx_PeriphCLKConfig+0x68a>
1000605a:	2b00      	cmp	r3, #0
1000605c:	d002      	beq.n	10006064 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
1000605e:	2b01      	cmp	r3, #1
10006060:	d01f      	beq.n	100060a2 <HAL_RCCEx_PeriphCLKConfig+0x60e>
10006062:	e05c      	b.n	1000611e <HAL_RCCEx_PeriphCLKConfig+0x68a>
    {
      case RCC_SAI4CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI4 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006064:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006068:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000606c:	681b      	ldr	r3, [r3, #0]
1000606e:	3380      	adds	r3, #128	; 0x80
10006070:	4618      	mov	r0, r3
10006072:	f7ff fbb7 	bl	100057e4 <RCCEx_PLL4_Config>
10006076:	4603      	mov	r3, r0
10006078:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000607c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006080:	2b00      	cmp	r3, #0
10006082:	d003      	beq.n	1000608c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
        {
          return status;
10006084:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006088:	f001 bb8e 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000608c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006090:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006094:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006098:	f043 0320 	orr.w	r3, r3, #32
1000609c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100060a0:	e03d      	b.n	1000611e <HAL_RCCEx_PeriphCLKConfig+0x68a>


      case RCC_SAI4CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100060a2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100060a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100060aa:	681b      	ldr	r3, [r3, #0]
100060ac:	3344      	adds	r3, #68	; 0x44
100060ae:	4618      	mov	r0, r3
100060b0:	f7ff fa2e 	bl	10005510 <RCCEx_PLL3_Config>
100060b4:	4603      	mov	r3, r0
100060b6:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100060ba:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100060be:	2b00      	cmp	r3, #0
100060c0:	d003      	beq.n	100060ca <HAL_RCCEx_PeriphCLKConfig+0x636>
        {
          return status;
100060c2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100060c6:	f001 bb6f 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_Q */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100060ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100060ce:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100060d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100060d6:	f043 0320 	orr.w	r3, r3, #32
100060da:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100060de:	e01e      	b.n	1000611e <HAL_RCCEx_PeriphCLKConfig+0x68a>

      case RCC_SAI4CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100060e0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100060e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100060e8:	681b      	ldr	r3, [r3, #0]
100060ea:	3344      	adds	r3, #68	; 0x44
100060ec:	4618      	mov	r0, r3
100060ee:	f7ff fa0f 	bl	10005510 <RCCEx_PLL3_Config>
100060f2:	4603      	mov	r3, r0
100060f4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100060f8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100060fc:	2b00      	cmp	r3, #0
100060fe:	d003      	beq.n	10006108 <HAL_RCCEx_PeriphCLKConfig+0x674>
        {
          return status;
10006100:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006104:	f001 bb50 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_R */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006108:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000610c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006110:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006118:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000611c:	bf00      	nop
    }

    /* Set the source of SAI4 clock*/
    __HAL_RCC_SAI4_CONFIG(PeriphClkInit->Sai4ClockSelection);
1000611e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006122:	f8d3 38d4 	ldr.w	r3, [r3, #2260]	; 0x8d4
10006126:	f023 0107 	bic.w	r1, r3, #7
1000612a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000612e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006132:	681b      	ldr	r3, [r3, #0]
10006134:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
10006138:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000613c:	430b      	orrs	r3, r1
1000613e:	f8c2 38d4 	str.w	r3, [r2, #2260]	; 0x8d4
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) ==
10006142:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006146:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000614a:	681b      	ldr	r3, [r3, #0]
1000614c:	e9d3 2300 	ldrd	r2, r3, [r3]
10006150:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
10006154:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
10006158:	2300      	movs	r3, #0
1000615a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
1000615e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
10006162:	460b      	mov	r3, r1
10006164:	4313      	orrs	r3, r2
10006166:	d07e      	beq.n	10006266 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      RCC_PERIPHCLK_SPI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
10006168:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000616c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006170:	681b      	ldr	r3, [r3, #0]
10006172:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
10006176:	2b04      	cmp	r3, #4
10006178:	d044      	beq.n	10006204 <HAL_RCCEx_PeriphCLKConfig+0x770>
1000617a:	2b04      	cmp	r3, #4
1000617c:	d861      	bhi.n	10006242 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
1000617e:	2b00      	cmp	r3, #0
10006180:	d002      	beq.n	10006188 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
10006182:	2b01      	cmp	r3, #1
10006184:	d01f      	beq.n	100061c6 <HAL_RCCEx_PeriphCLKConfig+0x732>
10006186:	e05c      	b.n	10006242 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      case RCC_SPI1CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006188:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000618c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006190:	681b      	ldr	r3, [r3, #0]
10006192:	3380      	adds	r3, #128	; 0x80
10006194:	4618      	mov	r0, r3
10006196:	f7ff fb25 	bl	100057e4 <RCCEx_PLL4_Config>
1000619a:	4603      	mov	r3, r0
1000619c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100061a0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100061a4:	2b00      	cmp	r3, #0
100061a6:	d003      	beq.n	100061b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
        {
          return status;
100061a8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100061ac:	f001 bafc 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100061b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100061b4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100061b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100061bc:	f043 0310 	orr.w	r3, r3, #16
100061c0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100061c4:	e03d      	b.n	10006242 <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100061c6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100061ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100061ce:	681b      	ldr	r3, [r3, #0]
100061d0:	3344      	adds	r3, #68	; 0x44
100061d2:	4618      	mov	r0, r3
100061d4:	f7ff f99c 	bl	10005510 <RCCEx_PLL3_Config>
100061d8:	4603      	mov	r3, r0
100061da:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100061de:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100061e2:	2b00      	cmp	r3, #0
100061e4:	d003      	beq.n	100061ee <HAL_RCCEx_PeriphCLKConfig+0x75a>
        {
          return status;
100061e6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100061ea:	f001 badd 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100061ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100061f2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100061f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100061fa:	f043 0320 	orr.w	r3, r3, #32
100061fe:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006202:	e01e      	b.n	10006242 <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006204:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006208:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000620c:	681b      	ldr	r3, [r3, #0]
1000620e:	3344      	adds	r3, #68	; 0x44
10006210:	4618      	mov	r0, r3
10006212:	f7ff f97d 	bl	10005510 <RCCEx_PLL3_Config>
10006216:	4603      	mov	r3, r0
10006218:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000621c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006220:	2b00      	cmp	r3, #0
10006222:	d003      	beq.n	1000622c <HAL_RCCEx_PeriphCLKConfig+0x798>
        {
          return status;
10006224:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006228:	f001 babe 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
1000622c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006230:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006234:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000623c:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006240:	bf00      	nop

    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
10006242:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006246:	f8d3 38d8 	ldr.w	r3, [r3, #2264]	; 0x8d8
1000624a:	f023 0107 	bic.w	r1, r3, #7
1000624e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006252:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006256:	681b      	ldr	r3, [r3, #0]
10006258:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
1000625c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006260:	430b      	orrs	r3, r1
10006262:	f8c2 38d8 	str.w	r3, [r2, #2264]	; 0x8d8
  }

  /*---------------------------- SPI23 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI23) ==
10006266:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000626a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000626e:	681b      	ldr	r3, [r3, #0]
10006270:	e9d3 2300 	ldrd	r2, r3, [r3]
10006274:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
10006278:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
1000627c:	2300      	movs	r3, #0
1000627e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
10006282:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
10006286:	460b      	mov	r3, r1
10006288:	4313      	orrs	r3, r2
1000628a:	d07e      	beq.n	1000638a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      RCC_PERIPHCLK_SPI23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
1000628c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006290:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006294:	681b      	ldr	r3, [r3, #0]
10006296:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
1000629a:	2b04      	cmp	r3, #4
1000629c:	d044      	beq.n	10006328 <HAL_RCCEx_PeriphCLKConfig+0x894>
1000629e:	2b04      	cmp	r3, #4
100062a0:	d861      	bhi.n	10006366 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
100062a2:	2b00      	cmp	r3, #0
100062a4:	d002      	beq.n	100062ac <HAL_RCCEx_PeriphCLKConfig+0x818>
100062a6:	2b01      	cmp	r3, #1
100062a8:	d01f      	beq.n	100062ea <HAL_RCCEx_PeriphCLKConfig+0x856>
100062aa:	e05c      	b.n	10006366 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
    {
      case RCC_SPI23CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI23 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100062ac:	f507 7312 	add.w	r3, r7, #584	; 0x248
100062b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100062b4:	681b      	ldr	r3, [r3, #0]
100062b6:	3380      	adds	r3, #128	; 0x80
100062b8:	4618      	mov	r0, r3
100062ba:	f7ff fa93 	bl	100057e4 <RCCEx_PLL4_Config>
100062be:	4603      	mov	r3, r0
100062c0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100062c4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100062c8:	2b00      	cmp	r3, #0
100062ca:	d003      	beq.n	100062d4 <HAL_RCCEx_PeriphCLKConfig+0x840>
        {
          return status;
100062cc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100062d0:	f001 ba6a 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100062d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100062d8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100062dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100062e0:	f043 0310 	orr.w	r3, r3, #16
100062e4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100062e8:	e03d      	b.n	10006366 <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100062ea:	f507 7312 	add.w	r3, r7, #584	; 0x248
100062ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100062f2:	681b      	ldr	r3, [r3, #0]
100062f4:	3344      	adds	r3, #68	; 0x44
100062f6:	4618      	mov	r0, r3
100062f8:	f7ff f90a 	bl	10005510 <RCCEx_PLL3_Config>
100062fc:	4603      	mov	r3, r0
100062fe:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006302:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006306:	2b00      	cmp	r3, #0
10006308:	d003      	beq.n	10006312 <HAL_RCCEx_PeriphCLKConfig+0x87e>
        {
          return status;
1000630a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000630e:	f001 ba4b 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006312:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006316:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000631a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000631e:	f043 0320 	orr.w	r3, r3, #32
10006322:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006326:	e01e      	b.n	10006366 <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006328:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000632c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006330:	681b      	ldr	r3, [r3, #0]
10006332:	3344      	adds	r3, #68	; 0x44
10006334:	4618      	mov	r0, r3
10006336:	f7ff f8eb 	bl	10005510 <RCCEx_PLL3_Config>
1000633a:	4603      	mov	r3, r0
1000633c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006340:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006344:	2b00      	cmp	r3, #0
10006346:	d003      	beq.n	10006350 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
        {
          return status;
10006348:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000634c:	f001 ba2c 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006350:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006354:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006358:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000635c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006360:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006364:	bf00      	nop
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
10006366:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000636a:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	; 0x8dc
1000636e:	f023 0107 	bic.w	r1, r3, #7
10006372:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006376:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000637a:	681b      	ldr	r3, [r3, #0]
1000637c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
10006380:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006384:	430b      	orrs	r3, r1
10006386:	f8c2 38dc 	str.w	r3, [r2, #2268]	; 0x8dc
  }

  /*---------------------------- SPI45 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) ==
1000638a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000638e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006392:	681b      	ldr	r3, [r3, #0]
10006394:	e9d3 2300 	ldrd	r2, r3, [r3]
10006398:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
1000639c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
100063a0:	2300      	movs	r3, #0
100063a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
100063a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
100063aa:	460b      	mov	r3, r1
100063ac:	4313      	orrs	r3, r2
100063ae:	d038      	beq.n	10006422 <HAL_RCCEx_PeriphCLKConfig+0x98e>
      RCC_PERIPHCLK_SPI45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    if (PeriphClkInit->Spi45ClockSelection == RCC_SPI45CLKSOURCE_PLL4)
100063b0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100063b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100063b8:	681b      	ldr	r3, [r3, #0]
100063ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
100063be:	2b01      	cmp	r3, #1
100063c0:	d11d      	bne.n	100063fe <HAL_RCCEx_PeriphCLKConfig+0x96a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100063c2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100063c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100063ca:	681b      	ldr	r3, [r3, #0]
100063cc:	3380      	adds	r3, #128	; 0x80
100063ce:	4618      	mov	r0, r3
100063d0:	f7ff fa08 	bl	100057e4 <RCCEx_PLL4_Config>
100063d4:	4603      	mov	r3, r0
100063d6:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
100063da:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100063de:	2b00      	cmp	r3, #0
100063e0:	d003      	beq.n	100063ea <HAL_RCCEx_PeriphCLKConfig+0x956>
      {
        return status;
100063e2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100063e6:	f001 b9df 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable SPI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100063ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100063ee:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100063f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100063f6:	f043 0320 	orr.w	r3, r3, #32
100063fa:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of SPI45 clock*/
    __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
100063fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006402:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
10006406:	f023 0107 	bic.w	r1, r3, #7
1000640a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000640e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006412:	681b      	ldr	r3, [r3, #0]
10006414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
10006418:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000641c:	430b      	orrs	r3, r1
1000641e:	f8c2 38e0 	str.w	r3, [r2, #2272]	; 0x8e0
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) ==
10006422:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006426:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000642a:	681b      	ldr	r3, [r3, #0]
1000642c:	e9d3 2300 	ldrd	r2, r3, [r3]
10006430:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
10006434:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
10006438:	2300      	movs	r3, #0
1000643a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
1000643e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
10006442:	460b      	mov	r3, r1
10006444:	4313      	orrs	r3, r2
10006446:	d05b      	beq.n	10006500 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
      RCC_PERIPHCLK_SPI6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
10006448:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000644c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006450:	681b      	ldr	r3, [r3, #0]
10006452:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
10006456:	2b01      	cmp	r3, #1
10006458:	d002      	beq.n	10006460 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
1000645a:	2b05      	cmp	r3, #5
1000645c:	d01f      	beq.n	1000649e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
1000645e:	e03d      	b.n	100064dc <HAL_RCCEx_PeriphCLKConfig+0xa48>
    {
      case RCC_SPI6CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI6 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006460:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006464:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006468:	681b      	ldr	r3, [r3, #0]
1000646a:	3380      	adds	r3, #128	; 0x80
1000646c:	4618      	mov	r0, r3
1000646e:	f7ff f9b9 	bl	100057e4 <RCCEx_PLL4_Config>
10006472:	4603      	mov	r3, r0
10006474:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006478:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000647c:	2b00      	cmp	r3, #0
1000647e:	d003      	beq.n	10006488 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        {
          return status;
10006480:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006484:	f001 b990 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006488:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000648c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006490:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006494:	f043 0320 	orr.w	r3, r3, #32
10006498:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
1000649c:	e01e      	b.n	100064dc <HAL_RCCEx_PeriphCLKConfig+0xa48>

      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is used as clock source for SPI6 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000649e:	f507 7312 	add.w	r3, r7, #584	; 0x248
100064a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100064a6:	681b      	ldr	r3, [r3, #0]
100064a8:	3344      	adds	r3, #68	; 0x44
100064aa:	4618      	mov	r0, r3
100064ac:	f7ff f830 	bl	10005510 <RCCEx_PLL3_Config>
100064b0:	4603      	mov	r3, r0
100064b2:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100064b6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100064ba:	2b00      	cmp	r3, #0
100064bc:	d003      	beq.n	100064c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        {
          return status;
100064be:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100064c2:	f001 b971 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100064c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100064ca:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100064ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100064d2:	f043 0320 	orr.w	r3, r3, #32
100064d6:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100064da:	bf00      	nop
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
100064dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100064e0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
100064e4:	f023 0107 	bic.w	r1, r3, #7
100064e8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100064ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100064f0:	681b      	ldr	r3, [r3, #0]
100064f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
100064f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100064fa:	430b      	orrs	r3, r1
100064fc:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  /*---------------------------- USART6 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) ==
10006500:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006504:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006508:	681b      	ldr	r3, [r3, #0]
1000650a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000650e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
10006512:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
10006516:	2300      	movs	r3, #0
10006518:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
1000651c:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
10006520:	460b      	mov	r3, r1
10006522:	4313      	orrs	r3, r2
10006524:	d038      	beq.n	10006598 <HAL_RCCEx_PeriphCLKConfig+0xb04>
      RCC_PERIPHCLK_USART6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_PLL4)
10006526:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000652a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000652e:	681b      	ldr	r3, [r3, #0]
10006530:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
10006534:	2b01      	cmp	r3, #1
10006536:	d11d      	bne.n	10006574 <HAL_RCCEx_PeriphCLKConfig+0xae0>
    {
      /* PLL4 is used as clock source for USART6 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006538:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000653c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006540:	681b      	ldr	r3, [r3, #0]
10006542:	3380      	adds	r3, #128	; 0x80
10006544:	4618      	mov	r0, r3
10006546:	f7ff f94d 	bl	100057e4 <RCCEx_PLL4_Config>
1000654a:	4603      	mov	r3, r0
1000654c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10006550:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006554:	2b00      	cmp	r3, #0
10006556:	d003      	beq.n	10006560 <HAL_RCCEx_PeriphCLKConfig+0xacc>
      {
        return status;
10006558:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000655c:	f001 b924 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006560:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006564:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006568:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000656c:	f043 0320 	orr.w	r3, r3, #32
10006570:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of USART6 clock*/
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
10006574:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006578:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
1000657c:	f023 0107 	bic.w	r1, r3, #7
10006580:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006584:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006588:	681b      	ldr	r3, [r3, #0]
1000658a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
1000658e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006592:	430b      	orrs	r3, r1
10006594:	f8c2 38e4 	str.w	r3, [r2, #2276]	; 0x8e4
  }

  /*---------------------------- UART24 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART24) ==
10006598:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000659c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100065a0:	681b      	ldr	r3, [r3, #0]
100065a2:	e9d3 2300 	ldrd	r2, r3, [r3]
100065a6:	f002 0302 	and.w	r3, r2, #2
100065aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
100065ae:	2300      	movs	r3, #0
100065b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
100065b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
100065b8:	460b      	mov	r3, r1
100065ba:	4313      	orrs	r3, r2
100065bc:	d038      	beq.n	10006630 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      RCC_PERIPHCLK_UART24)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART24CLKSOURCE(PeriphClkInit->Uart24ClockSelection));

    if (PeriphClkInit->Uart24ClockSelection == RCC_UART24CLKSOURCE_PLL4)
100065be:	f507 7312 	add.w	r3, r7, #584	; 0x248
100065c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100065c6:	681b      	ldr	r3, [r3, #0]
100065c8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
100065cc:	2b01      	cmp	r3, #1
100065ce:	d11d      	bne.n	1000660c <HAL_RCCEx_PeriphCLKConfig+0xb78>
    {
      /* PLL4 is used as clock source for UART24 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100065d0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100065d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100065d8:	681b      	ldr	r3, [r3, #0]
100065da:	3380      	adds	r3, #128	; 0x80
100065dc:	4618      	mov	r0, r3
100065de:	f7ff f901 	bl	100057e4 <RCCEx_PLL4_Config>
100065e2:	4603      	mov	r3, r0
100065e4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
100065e8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100065ec:	2b00      	cmp	r3, #0
100065ee:	d003      	beq.n	100065f8 <HAL_RCCEx_PeriphCLKConfig+0xb64>
      {
        return status;
100065f0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100065f4:	f001 b8d8 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100065f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100065fc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006600:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006604:	f043 0320 	orr.w	r3, r3, #32
10006608:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART24 clock*/
    __HAL_RCC_UART24_CONFIG(PeriphClkInit->Uart24ClockSelection);
1000660c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006610:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
10006614:	f023 0107 	bic.w	r1, r3, #7
10006618:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000661c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006620:	681b      	ldr	r3, [r3, #0]
10006622:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
10006626:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000662a:	430b      	orrs	r3, r1
1000662c:	f8c2 38e8 	str.w	r3, [r2, #2280]	; 0x8e8
  }

  /*---------------------------- UART35 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART35) ==
10006630:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006634:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006638:	681b      	ldr	r3, [r3, #0]
1000663a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000663e:	f002 0304 	and.w	r3, r2, #4
10006642:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
10006646:	2300      	movs	r3, #0
10006648:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
1000664c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
10006650:	460b      	mov	r3, r1
10006652:	4313      	orrs	r3, r2
10006654:	d038      	beq.n	100066c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
      RCC_PERIPHCLK_UART35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART35CLKSOURCE(PeriphClkInit->Uart35ClockSelection));

    if (PeriphClkInit->Uart35ClockSelection == RCC_UART35CLKSOURCE_PLL4)
10006656:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000665a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000665e:	681b      	ldr	r3, [r3, #0]
10006660:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
10006664:	2b01      	cmp	r3, #1
10006666:	d11d      	bne.n	100066a4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      /* PLL4 is used as clock source for UART35 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006668:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000666c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006670:	681b      	ldr	r3, [r3, #0]
10006672:	3380      	adds	r3, #128	; 0x80
10006674:	4618      	mov	r0, r3
10006676:	f7ff f8b5 	bl	100057e4 <RCCEx_PLL4_Config>
1000667a:	4603      	mov	r3, r0
1000667c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10006680:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006684:	2b00      	cmp	r3, #0
10006686:	d003      	beq.n	10006690 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      {
        return status;
10006688:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000668c:	f001 b88c 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006690:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006694:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006698:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000669c:	f043 0320 	orr.w	r3, r3, #32
100066a0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART35 clock*/
    __HAL_RCC_UART35_CONFIG(PeriphClkInit->Uart35ClockSelection);
100066a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100066a8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
100066ac:	f023 0107 	bic.w	r1, r3, #7
100066b0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100066b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100066b8:	681b      	ldr	r3, [r3, #0]
100066ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
100066be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100066c2:	430b      	orrs	r3, r1
100066c4:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
  }

  /*---------------------------- UAUART78 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART78) ==
100066c8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100066cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100066d0:	681b      	ldr	r3, [r3, #0]
100066d2:	e9d3 2300 	ldrd	r2, r3, [r3]
100066d6:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
100066da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
100066de:	2300      	movs	r3, #0
100066e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
100066e4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
100066e8:	460b      	mov	r3, r1
100066ea:	4313      	orrs	r3, r2
100066ec:	d038      	beq.n	10006760 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      RCC_PERIPHCLK_UART78)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART78CLKSOURCE(PeriphClkInit->Uart78ClockSelection));

    if (PeriphClkInit->Uart78ClockSelection == RCC_UART78CLKSOURCE_PLL4)
100066ee:	f507 7312 	add.w	r3, r7, #584	; 0x248
100066f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100066f6:	681b      	ldr	r3, [r3, #0]
100066f8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
100066fc:	2b01      	cmp	r3, #1
100066fe:	d11d      	bne.n	1000673c <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* PLL4 is used as clock source for UART78 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006700:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006704:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006708:	681b      	ldr	r3, [r3, #0]
1000670a:	3380      	adds	r3, #128	; 0x80
1000670c:	4618      	mov	r0, r3
1000670e:	f7ff f869 	bl	100057e4 <RCCEx_PLL4_Config>
10006712:	4603      	mov	r3, r0
10006714:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10006718:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000671c:	2b00      	cmp	r3, #0
1000671e:	d003      	beq.n	10006728 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        return status;
10006720:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006724:	f001 b840 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006728:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000672c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006730:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006734:	f043 0320 	orr.w	r3, r3, #32
10006738:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART78 clock*/
    __HAL_RCC_UART78_CONFIG(PeriphClkInit->Uart78ClockSelection);
1000673c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006740:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
10006744:	f023 0107 	bic.w	r1, r3, #7
10006748:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000674c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006750:	681b      	ldr	r3, [r3, #0]
10006752:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
10006756:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000675a:	430b      	orrs	r3, r1
1000675c:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
  }

  /*---------------------------- USART1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) ==
10006760:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006764:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006768:	681b      	ldr	r3, [r3, #0]
1000676a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000676e:	f002 0301 	and.w	r3, r2, #1
10006772:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
10006776:	2300      	movs	r3, #0
10006778:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
1000677c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
10006780:	460b      	mov	r3, r1
10006782:	4313      	orrs	r3, r2
10006784:	d05b      	beq.n	1000683e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
      RCC_PERIPHCLK_USART1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
10006786:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000678a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000678e:	681b      	ldr	r3, [r3, #0]
10006790:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
10006794:	2b01      	cmp	r3, #1
10006796:	d002      	beq.n	1000679e <HAL_RCCEx_PeriphCLKConfig+0xd0a>
10006798:	2b04      	cmp	r3, #4
1000679a:	d01f      	beq.n	100067dc <HAL_RCCEx_PeriphCLKConfig+0xd48>
1000679c:	e03d      	b.n	1000681a <HAL_RCCEx_PeriphCLKConfig+0xd86>
    {
      case RCC_USART1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for USART1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000679e:	f507 7312 	add.w	r3, r7, #584	; 0x248
100067a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100067a6:	681b      	ldr	r3, [r3, #0]
100067a8:	3344      	adds	r3, #68	; 0x44
100067aa:	4618      	mov	r0, r3
100067ac:	f7fe feb0 	bl	10005510 <RCCEx_PLL3_Config>
100067b0:	4603      	mov	r3, r0
100067b2:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100067b6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100067ba:	2b00      	cmp	r3, #0
100067bc:	d003      	beq.n	100067c6 <HAL_RCCEx_PeriphCLKConfig+0xd32>
        {
          return status;
100067be:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100067c2:	f000 bff1 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable UART Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100067c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100067ca:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100067ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100067d2:	f043 0320 	orr.w	r3, r3, #32
100067d6:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100067da:	e01e      	b.n	1000681a <HAL_RCCEx_PeriphCLKConfig+0xd86>

      case RCC_USART1CLKSOURCE_PLL4: /* PLL4 is used as clock source for USART1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100067dc:	f507 7312 	add.w	r3, r7, #584	; 0x248
100067e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100067e4:	681b      	ldr	r3, [r3, #0]
100067e6:	3380      	adds	r3, #128	; 0x80
100067e8:	4618      	mov	r0, r3
100067ea:	f7fe fffb 	bl	100057e4 <RCCEx_PLL4_Config>
100067ee:	4603      	mov	r3, r0
100067f0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100067f4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100067f8:	2b00      	cmp	r3, #0
100067fa:	d003      	beq.n	10006804 <HAL_RCCEx_PeriphCLKConfig+0xd70>
        {
          return status;
100067fc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006800:	f000 bfd2 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable USART Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006804:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006808:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000680c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006810:	f043 0320 	orr.w	r3, r3, #32
10006814:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006818:	bf00      	nop
    }

    /* Set the source of USART1 clock*/
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
1000681a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000681e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10006822:	f023 0107 	bic.w	r1, r3, #7
10006826:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000682a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000682e:	681b      	ldr	r3, [r3, #0]
10006830:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
10006834:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006838:	430b      	orrs	r3, r1
1000683a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  /*---------------------------- SDMMC12 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC12) ==
1000683e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006842:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006846:	681b      	ldr	r3, [r3, #0]
10006848:	e9d3 2300 	ldrd	r2, r3, [r3]
1000684c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
10006850:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
10006854:	2300      	movs	r3, #0
10006856:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
1000685a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
1000685e:	460b      	mov	r3, r1
10006860:	4313      	orrs	r3, r2
10006862:	d05b      	beq.n	1000691c <HAL_RCCEx_PeriphCLKConfig+0xe88>
      RCC_PERIPHCLK_SDMMC12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
10006864:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006868:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000686c:	681b      	ldr	r3, [r3, #0]
1000686e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
10006872:	2b01      	cmp	r3, #1
10006874:	d002      	beq.n	1000687c <HAL_RCCEx_PeriphCLKConfig+0xde8>
10006876:	2b02      	cmp	r3, #2
10006878:	d01f      	beq.n	100068ba <HAL_RCCEx_PeriphCLKConfig+0xe26>
1000687a:	e03d      	b.n	100068f8 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      case RCC_SDMMC12CLKSOURCE_PLL3: /* PLL3 is used as clock source for SDMMC12 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000687c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006880:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006884:	681b      	ldr	r3, [r3, #0]
10006886:	3344      	adds	r3, #68	; 0x44
10006888:	4618      	mov	r0, r3
1000688a:	f7fe fe41 	bl	10005510 <RCCEx_PLL3_Config>
1000688e:	4603      	mov	r3, r0
10006890:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006894:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006898:	2b00      	cmp	r3, #0
1000689a:	d003      	beq.n	100068a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
        {
          return status;
1000689c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100068a0:	f000 bf82 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100068a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100068a8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100068ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100068b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100068b4:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100068b8:	e01e      	b.n	100068f8 <HAL_RCCEx_PeriphCLKConfig+0xe64>

      case RCC_SDMMC12CLKSOURCE_PLL4: /* PLL4 is used as clock source for SDMMC12 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100068ba:	f507 7312 	add.w	r3, r7, #584	; 0x248
100068be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100068c2:	681b      	ldr	r3, [r3, #0]
100068c4:	3380      	adds	r3, #128	; 0x80
100068c6:	4618      	mov	r0, r3
100068c8:	f7fe ff8c 	bl	100057e4 <RCCEx_PLL4_Config>
100068cc:	4603      	mov	r3, r0
100068ce:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100068d2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100068d6:	2b00      	cmp	r3, #0
100068d8:	d003      	beq.n	100068e2 <HAL_RCCEx_PeriphCLKConfig+0xe4e>
        {
          return status;
100068da:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100068de:	f000 bf63 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100068e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100068e6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100068ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100068ee:	f043 0310 	orr.w	r3, r3, #16
100068f2:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100068f6:	bf00      	nop
    }

    /* Set the source of SDMMC12 clock*/
    __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
100068f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100068fc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
10006900:	f023 0107 	bic.w	r1, r3, #7
10006904:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006908:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000690c:	681b      	ldr	r3, [r3, #0]
1000690e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
10006912:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006916:	430b      	orrs	r3, r1
10006918:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
  }

  /*---------------------------- SDMMC3 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC3) ==
1000691c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006920:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006924:	681b      	ldr	r3, [r3, #0]
10006926:	e9d3 2300 	ldrd	r2, r3, [r3]
1000692a:	2100      	movs	r1, #0
1000692c:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
10006930:	f003 0301 	and.w	r3, r3, #1
10006934:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
10006938:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
1000693c:	460b      	mov	r3, r1
1000693e:	4313      	orrs	r3, r2
10006940:	d05b      	beq.n	100069fa <HAL_RCCEx_PeriphCLKConfig+0xf66>
      RCC_PERIPHCLK_SDMMC3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC3CLKSOURCE(PeriphClkInit->Sdmmc3ClockSelection));

    switch (PeriphClkInit->Sdmmc3ClockSelection)
10006942:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006946:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000694a:	681b      	ldr	r3, [r3, #0]
1000694c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
10006950:	2b01      	cmp	r3, #1
10006952:	d002      	beq.n	1000695a <HAL_RCCEx_PeriphCLKConfig+0xec6>
10006954:	2b02      	cmp	r3, #2
10006956:	d01f      	beq.n	10006998 <HAL_RCCEx_PeriphCLKConfig+0xf04>
10006958:	e03d      	b.n	100069d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
    {
      case RCC_SDMMC3CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SDMMC3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000695a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000695e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006962:	681b      	ldr	r3, [r3, #0]
10006964:	3344      	adds	r3, #68	; 0x44
10006966:	4618      	mov	r0, r3
10006968:	f7fe fdd2 	bl	10005510 <RCCEx_PLL3_Config>
1000696c:	4603      	mov	r3, r0
1000696e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006972:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006976:	2b00      	cmp	r3, #0
10006978:	d003      	beq.n	10006982 <HAL_RCCEx_PeriphCLKConfig+0xeee>
        {
          return status;
1000697a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000697e:	f000 bf13 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006982:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006986:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000698a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000698e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006992:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006996:	e01e      	b.n	100069d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_SDMMC3CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SDMMC3 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006998:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000699c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100069a0:	681b      	ldr	r3, [r3, #0]
100069a2:	3380      	adds	r3, #128	; 0x80
100069a4:	4618      	mov	r0, r3
100069a6:	f7fe ff1d 	bl	100057e4 <RCCEx_PLL4_Config>
100069aa:	4603      	mov	r3, r0
100069ac:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100069b0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100069b4:	2b00      	cmp	r3, #0
100069b6:	d003      	beq.n	100069c0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
        {
          return status;
100069b8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100069bc:	f000 bef4 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100069c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100069c4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100069c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100069cc:	f043 0310 	orr.w	r3, r3, #16
100069d0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100069d4:	bf00      	nop
    }

    /* Set the source of SDMMC3 clock*/
    __HAL_RCC_SDMMC3_CONFIG(PeriphClkInit->Sdmmc3ClockSelection);
100069d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100069da:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
100069de:	f023 0107 	bic.w	r1, r3, #7
100069e2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100069e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100069ea:	681b      	ldr	r3, [r3, #0]
100069ec:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
100069f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100069f4:	430b      	orrs	r3, r1
100069f6:	f8c2 38f8 	str.w	r3, [r2, #2296]	; 0x8f8
  }

  /*---------------------------- ETH configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ETH) ==
100069fa:	f507 7312 	add.w	r3, r7, #584	; 0x248
100069fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006a02:	681b      	ldr	r3, [r3, #0]
10006a04:	e9d3 2300 	ldrd	r2, r3, [r3]
10006a08:	2100      	movs	r1, #0
10006a0a:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
10006a0e:	f003 0302 	and.w	r3, r3, #2
10006a12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
10006a16:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
10006a1a:	460b      	mov	r3, r1
10006a1c:	4313      	orrs	r3, r2
10006a1e:	d05b      	beq.n	10006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1044>
      RCC_PERIPHCLK_ETH)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETHCLKSOURCE(PeriphClkInit->EthClockSelection));

    switch (PeriphClkInit->EthClockSelection)
10006a20:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006a24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006a28:	681b      	ldr	r3, [r3, #0]
10006a2a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
10006a2e:	2b00      	cmp	r3, #0
10006a30:	d002      	beq.n	10006a38 <HAL_RCCEx_PeriphCLKConfig+0xfa4>
10006a32:	2b01      	cmp	r3, #1
10006a34:	d01f      	beq.n	10006a76 <HAL_RCCEx_PeriphCLKConfig+0xfe2>
10006a36:	e03d      	b.n	10006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1020>
    {
      case RCC_ETHCLKSOURCE_PLL4:     /* PLL4 is used as clock source for ETH */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006a38:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006a3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006a40:	681b      	ldr	r3, [r3, #0]
10006a42:	3380      	adds	r3, #128	; 0x80
10006a44:	4618      	mov	r0, r3
10006a46:	f7fe fecd 	bl	100057e4 <RCCEx_PLL4_Config>
10006a4a:	4603      	mov	r3, r0
10006a4c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006a50:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006a54:	2b00      	cmp	r3, #0
10006a56:	d003      	beq.n	10006a60 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
        {
          return status;
10006a58:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006a5c:	f000 bea4 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL2 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006a60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006a64:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006a68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006a6c:	f043 0310 	orr.w	r3, r3, #16
10006a70:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006a74:	e01e      	b.n	10006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1020>

      case RCC_ETHCLKSOURCE_PLL3:     /* PLL3 is used as clock source for ETH */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006a76:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006a7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006a7e:	681b      	ldr	r3, [r3, #0]
10006a80:	3344      	adds	r3, #68	; 0x44
10006a82:	4618      	mov	r0, r3
10006a84:	f7fe fd44 	bl	10005510 <RCCEx_PLL3_Config>
10006a88:	4603      	mov	r3, r0
10006a8a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006a8e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006a92:	2b00      	cmp	r3, #0
10006a94:	d003      	beq.n	10006a9e <HAL_RCCEx_PeriphCLKConfig+0x100a>
        {
          return status;
10006a96:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006a9a:	f000 be85 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006a9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006aa2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006aa6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006aaa:	f043 0320 	orr.w	r3, r3, #32
10006aae:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006ab2:	bf00      	nop
    }

    /* Set the source of ETH clock*/
    __HAL_RCC_ETH_CONFIG(PeriphClkInit->EthClockSelection);
10006ab4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006ab8:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
10006abc:	f023 0103 	bic.w	r1, r3, #3
10006ac0:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006ac4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006ac8:	681b      	ldr	r3, [r3, #0]
10006aca:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
10006ace:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006ad2:	430b      	orrs	r3, r1
10006ad4:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
  }

  /*---------------------------- QSPI configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) ==
10006ad8:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006adc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006ae0:	681b      	ldr	r3, [r3, #0]
10006ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
10006ae6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
10006aea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
10006aee:	2300      	movs	r3, #0
10006af0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
10006af4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
10006af8:	460b      	mov	r3, r1
10006afa:	4313      	orrs	r3, r2
10006afc:	d05b      	beq.n	10006bb6 <HAL_RCCEx_PeriphCLKConfig+0x1122>
      RCC_PERIPHCLK_QSPI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    switch (PeriphClkInit->QspiClockSelection)
10006afe:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006b02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006b06:	681b      	ldr	r3, [r3, #0]
10006b08:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
10006b0c:	2b01      	cmp	r3, #1
10006b0e:	d002      	beq.n	10006b16 <HAL_RCCEx_PeriphCLKConfig+0x1082>
10006b10:	2b02      	cmp	r3, #2
10006b12:	d01f      	beq.n	10006b54 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
10006b14:	e03d      	b.n	10006b92 <HAL_RCCEx_PeriphCLKConfig+0x10fe>
    {
      case RCC_QSPICLKSOURCE_PLL3:   /* PLL3 is used as clock source for QSPI */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006b16:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006b1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006b1e:	681b      	ldr	r3, [r3, #0]
10006b20:	3344      	adds	r3, #68	; 0x44
10006b22:	4618      	mov	r0, r3
10006b24:	f7fe fcf4 	bl	10005510 <RCCEx_PLL3_Config>
10006b28:	4603      	mov	r3, r0
10006b2a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006b2e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006b32:	2b00      	cmp	r3, #0
10006b34:	d003      	beq.n	10006b3e <HAL_RCCEx_PeriphCLKConfig+0x10aa>
        {
          return status;
10006b36:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006b3a:	f000 be35 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006b3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006b42:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006b46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006b4e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006b52:	e01e      	b.n	10006b92 <HAL_RCCEx_PeriphCLKConfig+0x10fe>

      case RCC_QSPICLKSOURCE_PLL4:   /* PLL4 is used as clock source for QSPI */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006b54:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006b58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006b5c:	681b      	ldr	r3, [r3, #0]
10006b5e:	3380      	adds	r3, #128	; 0x80
10006b60:	4618      	mov	r0, r3
10006b62:	f7fe fe3f 	bl	100057e4 <RCCEx_PLL4_Config>
10006b66:	4603      	mov	r3, r0
10006b68:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006b6c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006b70:	2b00      	cmp	r3, #0
10006b72:	d003      	beq.n	10006b7c <HAL_RCCEx_PeriphCLKConfig+0x10e8>
        {
          return status;
10006b74:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006b78:	f000 be16 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006b7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006b80:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006b84:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006b88:	f043 0310 	orr.w	r3, r3, #16
10006b8c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006b90:	bf00      	nop
    }

    /* Set the source of QSPI clock*/
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
10006b92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006b96:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
10006b9a:	f023 0103 	bic.w	r1, r3, #3
10006b9e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006ba2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006ba6:	681b      	ldr	r3, [r3, #0]
10006ba8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
10006bac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006bb0:	430b      	orrs	r3, r1
10006bb2:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
  }

  /*---------------------------- FMC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) ==
10006bb6:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006bba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006bbe:	681b      	ldr	r3, [r3, #0]
10006bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
10006bc4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
10006bc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
10006bcc:	2300      	movs	r3, #0
10006bce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
10006bd2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
10006bd6:	460b      	mov	r3, r1
10006bd8:	4313      	orrs	r3, r2
10006bda:	d05b      	beq.n	10006c94 <HAL_RCCEx_PeriphCLKConfig+0x1200>
      RCC_PERIPHCLK_FMC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
10006bdc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006be0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006be4:	681b      	ldr	r3, [r3, #0]
10006be6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
10006bea:	2b01      	cmp	r3, #1
10006bec:	d002      	beq.n	10006bf4 <HAL_RCCEx_PeriphCLKConfig+0x1160>
10006bee:	2b02      	cmp	r3, #2
10006bf0:	d01f      	beq.n	10006c32 <HAL_RCCEx_PeriphCLKConfig+0x119e>
10006bf2:	e03d      	b.n	10006c70 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
    {
      case RCC_FMCCLKSOURCE_PLL3: /* PLL3 is used as clock source for FMC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006bf4:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006bf8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006bfc:	681b      	ldr	r3, [r3, #0]
10006bfe:	3344      	adds	r3, #68	; 0x44
10006c00:	4618      	mov	r0, r3
10006c02:	f7fe fc85 	bl	10005510 <RCCEx_PLL3_Config>
10006c06:	4603      	mov	r3, r0
10006c08:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006c0c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006c10:	2b00      	cmp	r3, #0
10006c12:	d003      	beq.n	10006c1c <HAL_RCCEx_PeriphCLKConfig+0x1188>
        {
          return status;
10006c14:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006c18:	f000 bdc6 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006c1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006c20:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006c24:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006c2c:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006c30:	e01e      	b.n	10006c70 <HAL_RCCEx_PeriphCLKConfig+0x11dc>

      case RCC_FMCCLKSOURCE_PLL4: /* PLL4 is used as clock source for FMC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006c32:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006c36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006c3a:	681b      	ldr	r3, [r3, #0]
10006c3c:	3380      	adds	r3, #128	; 0x80
10006c3e:	4618      	mov	r0, r3
10006c40:	f7fe fdd0 	bl	100057e4 <RCCEx_PLL4_Config>
10006c44:	4603      	mov	r3, r0
10006c46:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006c4a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006c4e:	2b00      	cmp	r3, #0
10006c50:	d003      	beq.n	10006c5a <HAL_RCCEx_PeriphCLKConfig+0x11c6>
        {
          return status;
10006c52:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006c56:	f000 bda7 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006c5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006c5e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006c62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006c66:	f043 0310 	orr.w	r3, r3, #16
10006c6a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006c6e:	bf00      	nop
    }

    /* Set the source of FMC clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
10006c70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006c74:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
10006c78:	f023 0103 	bic.w	r1, r3, #3
10006c7c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006c80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006c84:	681b      	ldr	r3, [r3, #0]
10006c86:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
10006c8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006c8e:	430b      	orrs	r3, r1
10006c90:	f8c2 3904 	str.w	r3, [r2, #2308]	; 0x904
  }

#if defined(FDCAN1)
  /*---------------------------- FDCAN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) ==
10006c94:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006c98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006c9c:	681b      	ldr	r3, [r3, #0]
10006c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
10006ca2:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
10006ca6:	67bb      	str	r3, [r7, #120]	; 0x78
10006ca8:	2300      	movs	r3, #0
10006caa:	67fb      	str	r3, [r7, #124]	; 0x7c
10006cac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
10006cb0:	460b      	mov	r3, r1
10006cb2:	4313      	orrs	r3, r2
10006cb4:	d07e      	beq.n	10006db4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      RCC_PERIPHCLK_FDCAN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
10006cb6:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006cba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006cbe:	681b      	ldr	r3, [r3, #0]
10006cc0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
10006cc4:	2b03      	cmp	r3, #3
10006cc6:	d044      	beq.n	10006d52 <HAL_RCCEx_PeriphCLKConfig+0x12be>
10006cc8:	2b03      	cmp	r3, #3
10006cca:	d861      	bhi.n	10006d90 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
10006ccc:	2b01      	cmp	r3, #1
10006cce:	d002      	beq.n	10006cd6 <HAL_RCCEx_PeriphCLKConfig+0x1242>
10006cd0:	2b02      	cmp	r3, #2
10006cd2:	d01f      	beq.n	10006d14 <HAL_RCCEx_PeriphCLKConfig+0x1280>
10006cd4:	e05c      	b.n	10006d90 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
    {
      case RCC_FDCANCLKSOURCE_PLL3: /* PLL3 is used as clock source for FDCAN */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006cd6:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006cda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006cde:	681b      	ldr	r3, [r3, #0]
10006ce0:	3344      	adds	r3, #68	; 0x44
10006ce2:	4618      	mov	r0, r3
10006ce4:	f7fe fc14 	bl	10005510 <RCCEx_PLL3_Config>
10006ce8:	4603      	mov	r3, r0
10006cea:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006cee:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006cf2:	2b00      	cmp	r3, #0
10006cf4:	d003      	beq.n	10006cfe <HAL_RCCEx_PeriphCLKConfig+0x126a>
        {
          return status;
10006cf6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006cfa:	f000 bd55 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006cfe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006d02:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006d06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006d0a:	f043 0320 	orr.w	r3, r3, #32
10006d0e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006d12:	e03d      	b.n	10006d90 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_Q: /* PLL4_Q is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006d14:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006d18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006d1c:	681b      	ldr	r3, [r3, #0]
10006d1e:	3380      	adds	r3, #128	; 0x80
10006d20:	4618      	mov	r0, r3
10006d22:	f7fe fd5f 	bl	100057e4 <RCCEx_PLL4_Config>
10006d26:	4603      	mov	r3, r0
10006d28:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006d2c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006d30:	2b00      	cmp	r3, #0
10006d32:	d003      	beq.n	10006d3c <HAL_RCCEx_PeriphCLKConfig+0x12a8>
        {
          return status;
10006d34:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006d38:	f000 bd36 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006d3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006d40:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006d44:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006d48:	f043 0320 	orr.w	r3, r3, #32
10006d4c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006d50:	e01e      	b.n	10006d90 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_R: /* PLL4_R is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006d52:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006d56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006d5a:	681b      	ldr	r3, [r3, #0]
10006d5c:	3380      	adds	r3, #128	; 0x80
10006d5e:	4618      	mov	r0, r3
10006d60:	f7fe fd40 	bl	100057e4 <RCCEx_PLL4_Config>
10006d64:	4603      	mov	r3, r0
10006d66:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006d6a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006d6e:	2b00      	cmp	r3, #0
10006d70:	d003      	beq.n	10006d7a <HAL_RCCEx_PeriphCLKConfig+0x12e6>
        {
          return status;
10006d72:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006d76:	f000 bd17 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10006d7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006d7e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006d82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006d8a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006d8e:	bf00      	nop
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
10006d90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006d94:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
10006d98:	f023 0103 	bic.w	r1, r3, #3
10006d9c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006da0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006da4:	681b      	ldr	r3, [r3, #0]
10006da6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
10006daa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006dae:	430b      	orrs	r3, r1
10006db0:	f8c2 390c 	str.w	r3, [r2, #2316]	; 0x90c
  }
#endif /*FDCAN1*/

  /*---------------------------- SPDIFRX configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) ==
10006db4:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006db8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006dbc:	681b      	ldr	r3, [r3, #0]
10006dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
10006dc2:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
10006dc6:	673b      	str	r3, [r7, #112]	; 0x70
10006dc8:	2300      	movs	r3, #0
10006dca:	677b      	str	r3, [r7, #116]	; 0x74
10006dcc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
10006dd0:	460b      	mov	r3, r1
10006dd2:	4313      	orrs	r3, r2
10006dd4:	d05b      	beq.n	10006e8e <HAL_RCCEx_PeriphCLKConfig+0x13fa>
      RCC_PERIPHCLK_SPDIFRX)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
10006dd6:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006dda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006dde:	681b      	ldr	r3, [r3, #0]
10006de0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
10006de4:	2b00      	cmp	r3, #0
10006de6:	d002      	beq.n	10006dee <HAL_RCCEx_PeriphCLKConfig+0x135a>
10006de8:	2b01      	cmp	r3, #1
10006dea:	d01f      	beq.n	10006e2c <HAL_RCCEx_PeriphCLKConfig+0x1398>
10006dec:	e03d      	b.n	10006e6a <HAL_RCCEx_PeriphCLKConfig+0x13d6>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL4: /* PLL4 is used as clock source for SPDIF */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006dee:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006df2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006df6:	681b      	ldr	r3, [r3, #0]
10006df8:	3380      	adds	r3, #128	; 0x80
10006dfa:	4618      	mov	r0, r3
10006dfc:	f7fe fcf2 	bl	100057e4 <RCCEx_PLL4_Config>
10006e00:	4603      	mov	r3, r0
10006e02:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006e06:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006e0a:	2b00      	cmp	r3, #0
10006e0c:	d003      	beq.n	10006e16 <HAL_RCCEx_PeriphCLKConfig+0x1382>
        {
          return status;
10006e0e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006e12:	f000 bcc9 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006e16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006e1a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006e1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006e22:	f043 0310 	orr.w	r3, r3, #16
10006e26:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006e2a:	e01e      	b.n	10006e6a <HAL_RCCEx_PeriphCLKConfig+0x13d6>

      case RCC_SPDIFRXCLKSOURCE_PLL3: /* PLL3 is used as clock source for SPDIF */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006e2c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006e30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006e34:	681b      	ldr	r3, [r3, #0]
10006e36:	3344      	adds	r3, #68	; 0x44
10006e38:	4618      	mov	r0, r3
10006e3a:	f7fe fb69 	bl	10005510 <RCCEx_PLL3_Config>
10006e3e:	4603      	mov	r3, r0
10006e40:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006e44:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006e48:	2b00      	cmp	r3, #0
10006e4a:	d003      	beq.n	10006e54 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
        {
          return status;
10006e4c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006e50:	f000 bcaa 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006e54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006e58:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006e5c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006e60:	f043 0320 	orr.w	r3, r3, #32
10006e64:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006e68:	bf00      	nop
    }

    /* Set the source of SPDIF clock*/
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
10006e6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006e6e:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
10006e72:	f023 0103 	bic.w	r1, r3, #3
10006e76:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006e7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006e7e:	681b      	ldr	r3, [r3, #0]
10006e80:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
10006e84:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006e88:	430b      	orrs	r3, r1
10006e8a:	f8c2 3914 	str.w	r3, [r2, #2324]	; 0x914
  }

  /*---------------------------- CEC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) ==
10006e8e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006e92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006e96:	681b      	ldr	r3, [r3, #0]
10006e98:	e9d3 2300 	ldrd	r2, r3, [r3]
10006e9c:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
10006ea0:	66bb      	str	r3, [r7, #104]	; 0x68
10006ea2:	2300      	movs	r3, #0
10006ea4:	66fb      	str	r3, [r7, #108]	; 0x6c
10006ea6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
10006eaa:	460b      	mov	r3, r1
10006eac:	4313      	orrs	r3, r2
10006eae:	d011      	beq.n	10006ed4 <HAL_RCCEx_PeriphCLKConfig+0x1440>
      RCC_PERIPHCLK_CEC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
10006eb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006eb4:	f8d3 3918 	ldr.w	r3, [r3, #2328]	; 0x918
10006eb8:	f023 0103 	bic.w	r1, r3, #3
10006ebc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006ec0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006ec4:	681b      	ldr	r3, [r3, #0]
10006ec6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
10006eca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006ece:	430b      	orrs	r3, r1
10006ed0:	f8c2 3918 	str.w	r3, [r2, #2328]	; 0x918
  }

  /*---------------------------- USBPHY configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) ==
10006ed4:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006ed8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006edc:	681b      	ldr	r3, [r3, #0]
10006ede:	e9d3 2300 	ldrd	r2, r3, [r3]
10006ee2:	f402 7300 	and.w	r3, r2, #512	; 0x200
10006ee6:	663b      	str	r3, [r7, #96]	; 0x60
10006ee8:	2300      	movs	r3, #0
10006eea:	667b      	str	r3, [r7, #100]	; 0x64
10006eec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
10006ef0:	460b      	mov	r3, r1
10006ef2:	4313      	orrs	r3, r2
10006ef4:	d038      	beq.n	10006f68 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
      RCC_PERIPHCLK_USBPHY)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(PeriphClkInit->UsbphyClockSelection));

    if (PeriphClkInit->UsbphyClockSelection == RCC_USBPHYCLKSOURCE_PLL4)
10006ef6:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006efa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006efe:	681b      	ldr	r3, [r3, #0]
10006f00:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
10006f04:	2b01      	cmp	r3, #1
10006f06:	d11d      	bne.n	10006f44 <HAL_RCCEx_PeriphCLKConfig+0x14b0>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006f08:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006f0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006f10:	681b      	ldr	r3, [r3, #0]
10006f12:	3380      	adds	r3, #128	; 0x80
10006f14:	4618      	mov	r0, r3
10006f16:	f7fe fc65 	bl	100057e4 <RCCEx_PLL4_Config>
10006f1a:	4603      	mov	r3, r0
10006f1c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10006f20:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006f24:	2b00      	cmp	r3, #0
10006f26:	d003      	beq.n	10006f30 <HAL_RCCEx_PeriphCLKConfig+0x149c>
      {
        return status;
10006f28:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006f2c:	f000 bc3c 	b.w	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB PHY Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10006f30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006f34:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006f38:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006f40:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_USBPHY_CONFIG(PeriphClkInit->UsbphyClockSelection);
10006f44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006f48:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
10006f4c:	f023 0103 	bic.w	r1, r3, #3
10006f50:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006f54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006f58:	681b      	ldr	r3, [r3, #0]
10006f5a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
10006f5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006f62:	430b      	orrs	r3, r1
10006f64:	f8c2 391c 	str.w	r3, [r2, #2332]	; 0x91c
  }

  /*---------------------------- USBO configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBO) ==
10006f68:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006f6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006f70:	681b      	ldr	r3, [r3, #0]
10006f72:	e9d3 2300 	ldrd	r2, r3, [r3]
10006f76:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
10006f7a:	65bb      	str	r3, [r7, #88]	; 0x58
10006f7c:	2300      	movs	r3, #0
10006f7e:	65fb      	str	r3, [r7, #92]	; 0x5c
10006f80:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
10006f84:	460b      	mov	r3, r1
10006f86:	4313      	orrs	r3, r2
10006f88:	d037      	beq.n	10006ffa <HAL_RCCEx_PeriphCLKConfig+0x1566>
      RCC_PERIPHCLK_USBO)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOCLKSOURCE(PeriphClkInit->UsboClockSelection));

    if (PeriphClkInit->UsboClockSelection == RCC_USBOCLKSOURCE_PLL4)
10006f8a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006f8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006f92:	681b      	ldr	r3, [r3, #0]
10006f94:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
10006f98:	2b00      	cmp	r3, #0
10006f9a:	d11c      	bne.n	10006fd6 <HAL_RCCEx_PeriphCLKConfig+0x1542>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006f9c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006fa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006fa4:	681b      	ldr	r3, [r3, #0]
10006fa6:	3380      	adds	r3, #128	; 0x80
10006fa8:	4618      	mov	r0, r3
10006faa:	f7fe fc1b 	bl	100057e4 <RCCEx_PLL4_Config>
10006fae:	4603      	mov	r3, r0
10006fb0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10006fb4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006fb8:	2b00      	cmp	r3, #0
10006fba:	d002      	beq.n	10006fc2 <HAL_RCCEx_PeriphCLKConfig+0x152e>
      {
        return status;
10006fbc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006fc0:	e3f2      	b.n	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB OTG Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10006fc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006fc6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006fca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006fd2:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_USBO_CONFIG(PeriphClkInit->UsboClockSelection);
10006fd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006fda:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
10006fde:	f023 0110 	bic.w	r1, r3, #16
10006fe2:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006fe6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006fea:	681b      	ldr	r3, [r3, #0]
10006fec:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
10006ff0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006ff4:	430b      	orrs	r3, r1
10006ff6:	f8c2 391c 	str.w	r3, [r2, #2332]	; 0x91c
  }

  /*---------------------------- RNG1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG1) ==
10006ffa:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006ffe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007002:	681b      	ldr	r3, [r3, #0]
10007004:	e9d3 2300 	ldrd	r2, r3, [r3]
10007008:	2100      	movs	r1, #0
1000700a:	6539      	str	r1, [r7, #80]	; 0x50
1000700c:	f003 0304 	and.w	r3, r3, #4
10007010:	657b      	str	r3, [r7, #84]	; 0x54
10007012:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
10007016:	460b      	mov	r3, r1
10007018:	4313      	orrs	r3, r2
1000701a:	d037      	beq.n	1000708c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
      RCC_PERIPHCLK_RNG1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG1CLKSOURCE(PeriphClkInit->Rng1ClockSelection));

    if (PeriphClkInit->Rng1ClockSelection == RCC_RNG1CLKSOURCE_PLL4)
1000701c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007020:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007024:	681b      	ldr	r3, [r3, #0]
10007026:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
1000702a:	2b01      	cmp	r3, #1
1000702c:	d11c      	bne.n	10007068 <HAL_RCCEx_PeriphCLKConfig+0x15d4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000702e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007032:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007036:	681b      	ldr	r3, [r3, #0]
10007038:	3380      	adds	r3, #128	; 0x80
1000703a:	4618      	mov	r0, r3
1000703c:	f7fe fbd2 	bl	100057e4 <RCCEx_PLL4_Config>
10007040:	4603      	mov	r3, r0
10007042:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10007046:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000704a:	2b00      	cmp	r3, #0
1000704c:	d002      	beq.n	10007054 <HAL_RCCEx_PeriphCLKConfig+0x15c0>
      {
        return status;
1000704e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007052:	e3a9      	b.n	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG1 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10007054:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007058:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000705c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10007064:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of RNG1 clock*/
    __HAL_RCC_RNG1_CONFIG(PeriphClkInit->Rng1ClockSelection);
10007068:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000706c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
10007070:	f023 0103 	bic.w	r1, r3, #3
10007074:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007078:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000707c:	681b      	ldr	r3, [r3, #0]
1000707e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
10007082:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007086:	430b      	orrs	r3, r1
10007088:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
  }

  /*---------------------------- RNG2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG2) ==
1000708c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007090:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007094:	681b      	ldr	r3, [r3, #0]
10007096:	e9d3 2300 	ldrd	r2, r3, [r3]
1000709a:	2100      	movs	r1, #0
1000709c:	64b9      	str	r1, [r7, #72]	; 0x48
1000709e:	f003 0308 	and.w	r3, r3, #8
100070a2:	64fb      	str	r3, [r7, #76]	; 0x4c
100070a4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
100070a8:	460b      	mov	r3, r1
100070aa:	4313      	orrs	r3, r2
100070ac:	d037      	beq.n	1000711e <HAL_RCCEx_PeriphCLKConfig+0x168a>
      RCC_PERIPHCLK_RNG2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG2CLKSOURCE(PeriphClkInit->Rng2ClockSelection));

    if (PeriphClkInit->Rng2ClockSelection == RCC_RNG2CLKSOURCE_PLL4)
100070ae:	f507 7312 	add.w	r3, r7, #584	; 0x248
100070b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100070b6:	681b      	ldr	r3, [r3, #0]
100070b8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
100070bc:	2b01      	cmp	r3, #1
100070be:	d11c      	bne.n	100070fa <HAL_RCCEx_PeriphCLKConfig+0x1666>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100070c0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100070c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100070c8:	681b      	ldr	r3, [r3, #0]
100070ca:	3380      	adds	r3, #128	; 0x80
100070cc:	4618      	mov	r0, r3
100070ce:	f7fe fb89 	bl	100057e4 <RCCEx_PLL4_Config>
100070d2:	4603      	mov	r3, r0
100070d4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
100070d8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100070dc:	2b00      	cmp	r3, #0
100070de:	d002      	beq.n	100070e6 <HAL_RCCEx_PeriphCLKConfig+0x1652>
      {
        return status;
100070e0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100070e4:	e360      	b.n	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG2 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100070e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100070ea:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100070ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100070f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100070f6:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of RNG2 clock*/
    __HAL_RCC_RNG2_CONFIG(PeriphClkInit->Rng2ClockSelection);
100070fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100070fe:	f8d3 3920 	ldr.w	r3, [r3, #2336]	; 0x920
10007102:	f023 0103 	bic.w	r1, r3, #3
10007106:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000710a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000710e:	681b      	ldr	r3, [r3, #0]
10007110:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
10007114:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007118:	430b      	orrs	r3, r1
1000711a:	f8c2 3920 	str.w	r3, [r2, #2336]	; 0x920
  }

  /*---------------------------- STGEN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_STGEN) ==
1000711e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007122:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007126:	681b      	ldr	r3, [r3, #0]
10007128:	e9d3 2300 	ldrd	r2, r3, [r3]
1000712c:	2100      	movs	r1, #0
1000712e:	6439      	str	r1, [r7, #64]	; 0x40
10007130:	f003 0310 	and.w	r3, r3, #16
10007134:	647b      	str	r3, [r7, #68]	; 0x44
10007136:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
1000713a:	460b      	mov	r3, r1
1000713c:	4313      	orrs	r3, r2
1000713e:	d011      	beq.n	10007164 <HAL_RCCEx_PeriphCLKConfig+0x16d0>
      RCC_PERIPHCLK_STGEN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_STGENCLKSOURCE(PeriphClkInit->StgenClockSelection));

    __HAL_RCC_STGEN_CONFIG(PeriphClkInit->StgenClockSelection);
10007140:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007144:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
10007148:	f023 0103 	bic.w	r1, r3, #3
1000714c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007150:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007154:	681b      	ldr	r3, [r3, #0]
10007156:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
1000715a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000715e:	430b      	orrs	r3, r1
10007160:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  }

#if defined(DSI)
  /*---------------------------- DSI configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) ==
10007164:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007168:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000716c:	681b      	ldr	r3, [r3, #0]
1000716e:	e9d3 2300 	ldrd	r2, r3, [r3]
10007172:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
10007176:	63bb      	str	r3, [r7, #56]	; 0x38
10007178:	2300      	movs	r3, #0
1000717a:	63fb      	str	r3, [r7, #60]	; 0x3c
1000717c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
10007180:	460b      	mov	r3, r1
10007182:	4313      	orrs	r3, r2
10007184:	d037      	beq.n	100071f6 <HAL_RCCEx_PeriphCLKConfig+0x1762>
      RCC_PERIPHCLK_DSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    if (PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL4)
10007186:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000718a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000718e:	681b      	ldr	r3, [r3, #0]
10007190:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
10007194:	2b01      	cmp	r3, #1
10007196:	d11c      	bne.n	100071d2 <HAL_RCCEx_PeriphCLKConfig+0x173e>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007198:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000719c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100071a0:	681b      	ldr	r3, [r3, #0]
100071a2:	3380      	adds	r3, #128	; 0x80
100071a4:	4618      	mov	r0, r3
100071a6:	f7fe fb1d 	bl	100057e4 <RCCEx_PLL4_Config>
100071aa:	4603      	mov	r3, r0
100071ac:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
100071b0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100071b4:	2b00      	cmp	r3, #0
100071b6:	d002      	beq.n	100071be <HAL_RCCEx_PeriphCLKConfig+0x172a>
      {
        return status;
100071b8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100071bc:	e2f4      	b.n	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable DSI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100071be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100071c2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100071c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100071ca:	f043 0310 	orr.w	r3, r3, #16
100071ce:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
100071d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100071d6:	f8d3 3924 	ldr.w	r3, [r3, #2340]	; 0x924
100071da:	f023 0101 	bic.w	r1, r3, #1
100071de:	f507 7312 	add.w	r3, r7, #584	; 0x248
100071e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100071e6:	681b      	ldr	r3, [r3, #0]
100071e8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
100071ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100071f0:	430b      	orrs	r3, r1
100071f2:	f8c2 3924 	str.w	r3, [r2, #2340]	; 0x924
  }
#endif /*DSI*/

  /*---------------------------- ADC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) ==
100071f6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100071fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100071fe:	681b      	ldr	r3, [r3, #0]
10007200:	e9d3 2300 	ldrd	r2, r3, [r3]
10007204:	f002 0308 	and.w	r3, r2, #8
10007208:	633b      	str	r3, [r7, #48]	; 0x30
1000720a:	2300      	movs	r3, #0
1000720c:	637b      	str	r3, [r7, #52]	; 0x34
1000720e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
10007212:	460b      	mov	r3, r1
10007214:	4313      	orrs	r3, r2
10007216:	d059      	beq.n	100072cc <HAL_RCCEx_PeriphCLKConfig+0x1838>
      RCC_PERIPHCLK_ADC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
10007218:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000721c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007220:	681b      	ldr	r3, [r3, #0]
10007222:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10007226:	2b00      	cmp	r3, #0
10007228:	d002      	beq.n	10007230 <HAL_RCCEx_PeriphCLKConfig+0x179c>
1000722a:	2b02      	cmp	r3, #2
1000722c:	d01e      	beq.n	1000726c <HAL_RCCEx_PeriphCLKConfig+0x17d8>
1000722e:	e03b      	b.n	100072a8 <HAL_RCCEx_PeriphCLKConfig+0x1814>
    {
      case RCC_ADCCLKSOURCE_PLL4: /* PLL4 is used as clock source for ADC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007230:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007234:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007238:	681b      	ldr	r3, [r3, #0]
1000723a:	3380      	adds	r3, #128	; 0x80
1000723c:	4618      	mov	r0, r3
1000723e:	f7fe fad1 	bl	100057e4 <RCCEx_PLL4_Config>
10007242:	4603      	mov	r3, r0
10007244:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007248:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000724c:	2b00      	cmp	r3, #0
1000724e:	d002      	beq.n	10007256 <HAL_RCCEx_PeriphCLKConfig+0x17c2>
        {
          return status;
10007250:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007254:	e2a8      	b.n	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10007256:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000725a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000725e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10007266:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
1000726a:	e01d      	b.n	100072a8 <HAL_RCCEx_PeriphCLKConfig+0x1814>

      case RCC_ADCCLKSOURCE_PLL3: /* PLL3 is used as clock source for ADC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000726c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007270:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007274:	681b      	ldr	r3, [r3, #0]
10007276:	3344      	adds	r3, #68	; 0x44
10007278:	4618      	mov	r0, r3
1000727a:	f7fe f949 	bl	10005510 <RCCEx_PLL3_Config>
1000727e:	4603      	mov	r3, r0
10007280:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007284:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007288:	2b00      	cmp	r3, #0
1000728a:	d002      	beq.n	10007292 <HAL_RCCEx_PeriphCLKConfig+0x17fe>
        {
          return status;
1000728c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007290:	e28a      	b.n	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10007292:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007296:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000729a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000729e:	f043 0320 	orr.w	r3, r3, #32
100072a2:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100072a6:	bf00      	nop
    }

    /* Set the source of ADC clock*/
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
100072a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100072ac:	f8d3 3928 	ldr.w	r3, [r3, #2344]	; 0x928
100072b0:	f023 0103 	bic.w	r1, r3, #3
100072b4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100072b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100072bc:	681b      	ldr	r3, [r3, #0]
100072be:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
100072c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100072c6:	430b      	orrs	r3, r1
100072c8:	f8c2 3928 	str.w	r3, [r2, #2344]	; 0x928
  }

  /*---------------------------- LPTIM45 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM45) ==
100072cc:	f507 7312 	add.w	r3, r7, #584	; 0x248
100072d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100072d4:	681b      	ldr	r3, [r3, #0]
100072d6:	e9d3 2300 	ldrd	r2, r3, [r3]
100072da:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
100072de:	62bb      	str	r3, [r7, #40]	; 0x28
100072e0:	2300      	movs	r3, #0
100072e2:	62fb      	str	r3, [r7, #44]	; 0x2c
100072e4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
100072e8:	460b      	mov	r3, r1
100072ea:	4313      	orrs	r3, r2
100072ec:	d058      	beq.n	100073a0 <HAL_RCCEx_PeriphCLKConfig+0x190c>
      RCC_PERIPHCLK_LPTIM45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM45CLKSOURCE(PeriphClkInit->Lptim45ClockSelection));

    switch (PeriphClkInit->Lptim45ClockSelection)
100072ee:	f507 7312 	add.w	r3, r7, #584	; 0x248
100072f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100072f6:	681b      	ldr	r3, [r3, #0]
100072f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100072fc:	2b01      	cmp	r3, #1
100072fe:	d01f      	beq.n	10007340 <HAL_RCCEx_PeriphCLKConfig+0x18ac>
10007300:	2b02      	cmp	r3, #2
10007302:	d13b      	bne.n	1000737c <HAL_RCCEx_PeriphCLKConfig+0x18e8>
    {
      case RCC_LPTIM45CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPTIM45 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10007304:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007308:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000730c:	681b      	ldr	r3, [r3, #0]
1000730e:	3344      	adds	r3, #68	; 0x44
10007310:	4618      	mov	r0, r3
10007312:	f7fe f8fd 	bl	10005510 <RCCEx_PLL3_Config>
10007316:	4603      	mov	r3, r0
10007318:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000731c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007320:	2b00      	cmp	r3, #0
10007322:	d002      	beq.n	1000732a <HAL_RCCEx_PeriphCLKConfig+0x1896>
        {
          return status;
10007324:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007328:	e23e      	b.n	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000732a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000732e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10007332:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007336:	f043 0320 	orr.w	r3, r3, #32
1000733a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000733e:	e01d      	b.n	1000737c <HAL_RCCEx_PeriphCLKConfig+0x18e8>

      case RCC_LPTIM45CLKSOURCE_PLL4: /* PLL4 is used as clock source for LPTIM45 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007340:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007344:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007348:	681b      	ldr	r3, [r3, #0]
1000734a:	3380      	adds	r3, #128	; 0x80
1000734c:	4618      	mov	r0, r3
1000734e:	f7fe fa49 	bl	100057e4 <RCCEx_PLL4_Config>
10007352:	4603      	mov	r3, r0
10007354:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007358:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000735c:	2b00      	cmp	r3, #0
1000735e:	d002      	beq.n	10007366 <HAL_RCCEx_PeriphCLKConfig+0x18d2>
        {
          return status;
10007360:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007364:	e220      	b.n	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10007366:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000736a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000736e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007372:	f043 0310 	orr.w	r3, r3, #16
10007376:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
1000737a:	bf00      	nop
    }

    /* Set the source of LPTIM45 clock*/
    __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
1000737c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007380:	f8d3 392c 	ldr.w	r3, [r3, #2348]	; 0x92c
10007384:	f023 0207 	bic.w	r2, r3, #7
10007388:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000738c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007390:	681b      	ldr	r3, [r3, #0]
10007392:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10007396:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000739a:	4313      	orrs	r3, r2
1000739c:	f8c1 392c 	str.w	r3, [r1, #2348]	; 0x92c
  }

  /*---------------------------- LPTIM23 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM23) ==
100073a0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100073a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100073a8:	681b      	ldr	r3, [r3, #0]
100073aa:	e9d3 2300 	ldrd	r2, r3, [r3]
100073ae:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
100073b2:	623b      	str	r3, [r7, #32]
100073b4:	2300      	movs	r3, #0
100073b6:	627b      	str	r3, [r7, #36]	; 0x24
100073b8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
100073bc:	460b      	mov	r3, r1
100073be:	4313      	orrs	r3, r2
100073c0:	d037      	beq.n	10007432 <HAL_RCCEx_PeriphCLKConfig+0x199e>
      RCC_PERIPHCLK_LPTIM23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM23CLKSOURCE(PeriphClkInit->Lptim23ClockSelection));

    if (PeriphClkInit->Lptim23ClockSelection == RCC_LPTIM23CLKSOURCE_PLL4)
100073c2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100073c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100073ca:	681b      	ldr	r3, [r3, #0]
100073cc:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
100073d0:	2b01      	cmp	r3, #1
100073d2:	d11c      	bne.n	1000740e <HAL_RCCEx_PeriphCLKConfig+0x197a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100073d4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100073d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100073dc:	681b      	ldr	r3, [r3, #0]
100073de:	3380      	adds	r3, #128	; 0x80
100073e0:	4618      	mov	r0, r3
100073e2:	f7fe f9ff 	bl	100057e4 <RCCEx_PLL4_Config>
100073e6:	4603      	mov	r3, r0
100073e8:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
100073ec:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100073f0:	2b00      	cmp	r3, #0
100073f2:	d002      	beq.n	100073fa <HAL_RCCEx_PeriphCLKConfig+0x1966>
      {
        return status;
100073f4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100073f8:	e1d6      	b.n	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100073fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100073fe:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007402:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007406:	f043 0320 	orr.w	r3, r3, #32
1000740a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of LPTIM23 clock*/
    __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
1000740e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007412:	f8d3 3930 	ldr.w	r3, [r3, #2352]	; 0x930
10007416:	f023 0207 	bic.w	r2, r3, #7
1000741a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000741e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007422:	681b      	ldr	r3, [r3, #0]
10007424:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
10007428:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000742c:	4313      	orrs	r3, r2
1000742e:	f8c1 3930 	str.w	r3, [r1, #2352]	; 0x930
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) ==
10007432:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007436:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000743a:	681b      	ldr	r3, [r3, #0]
1000743c:	e9d3 2300 	ldrd	r2, r3, [r3]
10007440:	f002 0340 	and.w	r3, r2, #64	; 0x40
10007444:	61bb      	str	r3, [r7, #24]
10007446:	2300      	movs	r3, #0
10007448:	61fb      	str	r3, [r7, #28]
1000744a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
1000744e:	460b      	mov	r3, r1
10007450:	4313      	orrs	r3, r2
10007452:	d058      	beq.n	10007506 <HAL_RCCEx_PeriphCLKConfig+0x1a72>
      RCC_PERIPHCLK_LPTIM1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
10007454:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007458:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000745c:	681b      	ldr	r3, [r3, #0]
1000745e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
10007462:	2b01      	cmp	r3, #1
10007464:	d01f      	beq.n	100074a6 <HAL_RCCEx_PeriphCLKConfig+0x1a12>
10007466:	2b02      	cmp	r3, #2
10007468:	d13b      	bne.n	100074e2 <HAL_RCCEx_PeriphCLKConfig+0x1a4e>
    {
      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000746a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000746e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007472:	681b      	ldr	r3, [r3, #0]
10007474:	3344      	adds	r3, #68	; 0x44
10007476:	4618      	mov	r0, r3
10007478:	f7fe f84a 	bl	10005510 <RCCEx_PLL3_Config>
1000747c:	4603      	mov	r3, r0
1000747e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007482:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007486:	2b00      	cmp	r3, #0
10007488:	d002      	beq.n	10007490 <HAL_RCCEx_PeriphCLKConfig+0x19fc>
        {
          return status;
1000748a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000748e:	e18b      	b.n	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10007490:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007494:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10007498:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000749c:	f043 0320 	orr.w	r3, r3, #32
100074a0:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100074a4:	e01d      	b.n	100074e2 <HAL_RCCEx_PeriphCLKConfig+0x1a4e>

      case RCC_LPTIM1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for LPTIM1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100074a6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100074aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100074ae:	681b      	ldr	r3, [r3, #0]
100074b0:	3380      	adds	r3, #128	; 0x80
100074b2:	4618      	mov	r0, r3
100074b4:	f7fe f996 	bl	100057e4 <RCCEx_PLL4_Config>
100074b8:	4603      	mov	r3, r0
100074ba:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100074be:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100074c2:	2b00      	cmp	r3, #0
100074c4:	d002      	beq.n	100074cc <HAL_RCCEx_PeriphCLKConfig+0x1a38>
        {
          return status;
100074c6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100074ca:	e16d      	b.n	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100074cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100074d0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100074d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100074d8:	f043 0310 	orr.w	r3, r3, #16
100074dc:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100074e0:	bf00      	nop
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
100074e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100074e6:	f8d3 3934 	ldr.w	r3, [r3, #2356]	; 0x934
100074ea:	f023 0207 	bic.w	r2, r3, #7
100074ee:	f507 7312 	add.w	r3, r7, #584	; 0x248
100074f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100074f6:	681b      	ldr	r3, [r3, #0]
100074f8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
100074fc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10007500:	4313      	orrs	r3, r2
10007502:	f8c1 3934 	str.w	r3, [r1, #2356]	; 0x934
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) ==
10007506:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000750a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000750e:	681b      	ldr	r3, [r3, #0]
10007510:	e9d3 2300 	ldrd	r2, r3, [r3]
10007514:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
10007518:	613b      	str	r3, [r7, #16]
1000751a:	2300      	movs	r3, #0
1000751c:	617b      	str	r3, [r7, #20]
1000751e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
10007522:	460b      	mov	r3, r1
10007524:	4313      	orrs	r3, r2
10007526:	f000 80c6 	beq.w	100076b6 <HAL_RCCEx_PeriphCLKConfig+0x1c22>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
1000752a:	4ba2      	ldr	r3, [pc, #648]	; (100077b4 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
1000752c:	681b      	ldr	r3, [r3, #0]
1000752e:	4aa1      	ldr	r2, [pc, #644]	; (100077b4 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
10007530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10007534:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
10007536:	f7fa f90d 	bl	10001754 <HAL_GetTick>
1000753a:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
1000753e:	e00a      	b.n	10007556 <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10007540:	f7fa f908 	bl	10001754 <HAL_GetTick>
10007544:	4602      	mov	r2, r0
10007546:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
1000754a:	1ad3      	subs	r3, r2, r3
1000754c:	2b64      	cmp	r3, #100	; 0x64
1000754e:	d902      	bls.n	10007556 <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
      {
        ret = HAL_TIMEOUT;
10007550:	2303      	movs	r3, #3
10007552:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10007556:	4b97      	ldr	r3, [pc, #604]	; (100077b4 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
10007558:	681b      	ldr	r3, [r3, #0]
1000755a:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000755e:	2b00      	cmp	r3, #0
10007560:	d0ee      	beq.n	10007540 <HAL_RCCEx_PeriphCLKConfig+0x1aac>
      }
    }

    if (ret == HAL_OK)
10007562:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
10007566:	2b00      	cmp	r3, #0
10007568:	f040 80a2 	bne.w	100076b0 <HAL_RCCEx_PeriphCLKConfig+0x1c1c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSRC) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSRC))
1000756c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007570:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
10007574:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007578:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000757c:	681b      	ldr	r3, [r3, #0]
1000757e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
10007582:	4053      	eors	r3, r2
10007584:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
10007588:	2b00      	cmp	r3, #0
1000758a:	f000 8086 	beq.w	1000769a <HAL_RCCEx_PeriphCLKConfig+0x1c06>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSRC));
1000758e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007592:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10007596:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
1000759a:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
1000759e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100075a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100075a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100075aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
100075ae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        __HAL_RCC_BACKUPRESET_RELEASE();
100075b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100075b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100075ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100075be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
100075c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

        /* Set the LSEDrive value */
        __HAL_RCC_LSEDRIVE_CONFIG(tmpreg & RCC_BDCR_LSEDRV);
100075c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100075ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100075ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
100075d2:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
100075d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
100075da:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100075de:	4313      	orrs	r3, r2
100075e0:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

        /* RCC_BDCR_LSEON can be enabled for RTC or another IP, re-enable it */
        RCC_OscInitTypeDef RCC_OscInitStructure;
        /* Configure LSE Oscillator*/
        RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_LSE;
100075e4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100075e8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
100075ec:	2204      	movs	r2, #4
100075ee:	601a      	str	r2, [r3, #0]
        RCC_OscInitStructure.LSEState = (tmpreg & LSE_MASK);
100075f0:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
100075f4:	f003 020b 	and.w	r2, r3, #11
100075f8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100075fc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
10007600:	609a      	str	r2, [r3, #8]

        RCC_OscInitStructure.PLL.PLLState = RCC_PLL_NONE;
10007602:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007606:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
1000760a:	2200      	movs	r2, #0
1000760c:	625a      	str	r2, [r3, #36]	; 0x24
        RCC_OscInitStructure.PLL2.PLLState = RCC_PLL_NONE;
1000760e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007612:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
10007616:	2200      	movs	r2, #0
10007618:	661a      	str	r2, [r3, #96]	; 0x60
        RCC_OscInitStructure.PLL3.PLLState = RCC_PLL_NONE;
1000761a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000761e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
10007622:	2200      	movs	r2, #0
10007624:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        RCC_OscInitStructure.PLL4.PLLState = RCC_PLL_NONE;
10007628:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000762c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
10007630:	2200      	movs	r2, #0
10007632:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
        ret = HAL_RCC_OscConfig(&RCC_OscInitStructure);
10007636:	f507 7390 	add.w	r3, r7, #288	; 0x120
1000763a:	4618      	mov	r0, r3
1000763c:	f7fc f90e 	bl	1000385c <HAL_RCC_OscConfig>
10007640:	4603      	mov	r3, r0
10007642:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
        if (ret != HAL_OK)
10007646:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
1000764a:	2b00      	cmp	r3, #0
1000764c:	d002      	beq.n	10007654 <HAL_RCCEx_PeriphCLKConfig+0x1bc0>
        {
          return ret;
1000764e:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
10007652:	e0a9      	b.n	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }

        /* Write the RTCSRC */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
10007654:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007658:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000765c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
10007660:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007664:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007668:	681b      	ldr	r3, [r3, #0]
1000766a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
1000766e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10007672:	4313      	orrs	r3, r2
10007674:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

        /* Fill up Reserved register mask for BDCR
         * All already filled up or what shouldn't be modified must be put on the mask */
        RESERVED_BDCR_MASK = ~(RCC_BDCR_VSWRST | RCC_BDCR_RTCCKEN | RCC_BDCR_RTCSRC |
10007678:	4b4f      	ldr	r3, [pc, #316]	; (100077b8 <HAL_RCCEx_PeriphCLKConfig+0x1d24>)
1000767a:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
                               RCC_BDCR_LSECSSD | RCC_BDCR_LSEDRV | RCC_BDCR_DIGBYP |
                               RCC_BDCR_LSERDY | RCC_BDCR_LSEBYP | RCC_BDCR_LSEON);

        /* Restore the BDCR context: RESERVED registers plus RCC_BDCR_LSECSSON */
        WRITE_REG(RCC->BDCR, (READ_REG(RCC->BDCR) | (tmpreg & RESERVED_BDCR_MASK)));
1000767e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007682:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
10007686:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
1000768a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
1000768e:	400b      	ands	r3, r1
10007690:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10007694:	4313      	orrs	r3, r2
10007696:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

      }/* End RTCSRC changed */

      /*Enable RTC clock   */
      __HAL_RCC_RTC_ENABLE();
1000769a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000769e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100076a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100076a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
100076aa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
100076ae:	e002      	b.n	100076b6 <HAL_RCCEx_PeriphCLKConfig+0x1c22>
    }
    else
    {
      // Enable write access to Backup domain failed
      /* return the error */
      return ret;
100076b0:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
100076b4:	e078      	b.n	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    }
  }

  /*---------------------------- TIMG1 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG1) ==
100076b6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100076ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100076be:	681b      	ldr	r3, [r3, #0]
100076c0:	e9d3 2300 	ldrd	r2, r3, [r3]
100076c4:	f402 6380 	and.w	r3, r2, #1024	; 0x400
100076c8:	60bb      	str	r3, [r7, #8]
100076ca:	2300      	movs	r3, #0
100076cc:	60fb      	str	r3, [r7, #12]
100076ce:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
100076d2:	460b      	mov	r3, r1
100076d4:	4313      	orrs	r3, r2
100076d6:	d02a      	beq.n	1000772e <HAL_RCCEx_PeriphCLKConfig+0x1c9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection);
100076d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100076dc:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
100076e0:	f023 0201 	bic.w	r2, r3, #1
100076e4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100076e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100076ec:	681b      	ldr	r3, [r3, #0]
100076ee:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
100076f2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100076f6:	4313      	orrs	r3, r2
100076f8:	f8c1 3828 	str.w	r3, [r1, #2088]	; 0x828

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100076fc:	f7fa f82a 	bl	10001754 <HAL_GetTick>
10007700:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
10007704:	e00a      	b.n	1000771c <HAL_RCCEx_PeriphCLKConfig+0x1c88>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10007706:	f7fa f825 	bl	10001754 <HAL_GetTick>
1000770a:	4602      	mov	r2, r0
1000770c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
10007710:	1ad3      	subs	r3, r2, r3
10007712:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10007716:	d901      	bls.n	1000771c <HAL_RCCEx_PeriphCLKConfig+0x1c88>
      {
        return HAL_TIMEOUT;
10007718:	2303      	movs	r3, #3
1000771a:	e045      	b.n	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
1000771c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007720:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
10007724:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10007728:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000772c:	d1eb      	bne.n	10007706 <HAL_RCCEx_PeriphCLKConfig+0x1c72>
      }
    }
  }

  /*---------------------------- TIMG2 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG2) ==
1000772e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007732:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007736:	681b      	ldr	r3, [r3, #0]
10007738:	e9d3 2300 	ldrd	r2, r3, [r3]
1000773c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
10007740:	603b      	str	r3, [r7, #0]
10007742:	2300      	movs	r3, #0
10007744:	607b      	str	r3, [r7, #4]
10007746:	e9d7 1200 	ldrd	r1, r2, [r7]
1000774a:	460b      	mov	r3, r1
1000774c:	4313      	orrs	r3, r2
1000774e:	d02a      	beq.n	100077a6 <HAL_RCCEx_PeriphCLKConfig+0x1d12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection);
10007750:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007754:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
10007758:	f023 0201 	bic.w	r2, r3, #1
1000775c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007760:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007764:	681b      	ldr	r3, [r3, #0]
10007766:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
1000776a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000776e:	4313      	orrs	r3, r2
10007770:	f8c1 382c 	str.w	r3, [r1, #2092]	; 0x82c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10007774:	f7f9 ffee 	bl	10001754 <HAL_GetTick>
10007778:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
1000777c:	e00a      	b.n	10007794 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000777e:	f7f9 ffe9 	bl	10001754 <HAL_GetTick>
10007782:	4602      	mov	r2, r0
10007784:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
10007788:	1ad3      	subs	r3, r2, r3
1000778a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000778e:	d901      	bls.n	10007794 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
      {
        return HAL_TIMEOUT;
10007790:	2303      	movs	r3, #3
10007792:	e009      	b.n	100077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
10007794:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007798:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
1000779c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100077a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100077a4:	d1eb      	bne.n	1000777e <HAL_RCCEx_PeriphCLKConfig+0x1cea>
      }
    }
  }

  return HAL_OK;
100077a6:	2300      	movs	r3, #0
}
100077a8:	4618      	mov	r0, r3
100077aa:	f507 7712 	add.w	r7, r7, #584	; 0x248
100077ae:	46bd      	mov	sp, r7
100077b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
100077b4:	50001000 	.word	0x50001000
100077b8:	7fecfdc0 	.word	0x7fecfdc0

100077bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *          @ref RCCEx_Periph_Clock_Selection
  *          @ref RCCEx_Periph_One_Clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
100077bc:	b590      	push	{r4, r7, lr}
100077be:	b08f      	sub	sp, #60	; 0x3c
100077c0:	af00      	add	r7, sp, #0
100077c2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t frequency = 0, clksource = 0;
100077c6:	2100      	movs	r1, #0
100077c8:	6379      	str	r1, [r7, #52]	; 0x34
100077ca:	2100      	movs	r1, #0
100077cc:	6339      	str	r1, [r7, #48]	; 0x30
  PLL4_ClocksTypeDef pll4_clocks;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk) || IS_RCC_PERIPHONECLOCK(PeriphClk));

  switch (PeriphClk)
100077ce:	e9d7 0100 	ldrd	r0, r1, [r7]
100077d2:	f5a1 4480 	sub.w	r4, r1, #16384	; 0x4000
100077d6:	ea50 0104 	orrs.w	r1, r0, r4
100077da:	f000 82cb 	beq.w	10007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
100077de:	e9d7 0100 	ldrd	r0, r1, [r7]
100077e2:	2801      	cmp	r0, #1
100077e4:	f571 4180 	sbcs.w	r1, r1, #16384	; 0x4000
100077e8:	f081 82af 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100077ec:	e9d7 0100 	ldrd	r0, r1, [r7]
100077f0:	f5a1 5400 	sub.w	r4, r1, #8192	; 0x2000
100077f4:	ea50 0104 	orrs.w	r1, r0, r4
100077f8:	f001 80f1 	beq.w	100089de <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
100077fc:	e9d7 0100 	ldrd	r0, r1, [r7]
10007800:	2801      	cmp	r0, #1
10007802:	f571 5100 	sbcs.w	r1, r1, #8192	; 0x2000
10007806:	f081 82a0 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000780a:	e9d7 0100 	ldrd	r0, r1, [r7]
1000780e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
10007812:	ea50 0104 	orrs.w	r1, r0, r4
10007816:	f000 8738 	beq.w	1000868a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
1000781a:	e9d7 0100 	ldrd	r0, r1, [r7]
1000781e:	2801      	cmp	r0, #1
10007820:	f571 5180 	sbcs.w	r1, r1, #4096	; 0x1000
10007824:	f081 8291 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007828:	e9d7 0100 	ldrd	r0, r1, [r7]
1000782c:	f5a1 6400 	sub.w	r4, r1, #2048	; 0x800
10007830:	ea50 0104 	orrs.w	r1, r0, r4
10007834:	f000 872d 	beq.w	10008692 <HAL_RCCEx_GetPeriphCLKFreq+0xed6>
10007838:	e9d7 0100 	ldrd	r0, r1, [r7]
1000783c:	2801      	cmp	r0, #1
1000783e:	f571 6100 	sbcs.w	r1, r1, #2048	; 0x800
10007842:	f081 8282 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007846:	e9d7 0100 	ldrd	r0, r1, [r7]
1000784a:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
1000784e:	ea50 0104 	orrs.w	r1, r0, r4
10007852:	f000 875e 	beq.w	10008712 <HAL_RCCEx_GetPeriphCLKFreq+0xf56>
10007856:	e9d7 0100 	ldrd	r0, r1, [r7]
1000785a:	2801      	cmp	r0, #1
1000785c:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
10007860:	f081 8273 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007864:	e9d7 0100 	ldrd	r0, r1, [r7]
10007868:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
1000786c:	ea50 0104 	orrs.w	r1, r0, r4
10007870:	f000 86bf 	beq.w	100085f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe36>
10007874:	e9d7 0100 	ldrd	r0, r1, [r7]
10007878:	2801      	cmp	r0, #1
1000787a:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
1000787e:	f081 8264 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007882:	e9d7 0100 	ldrd	r0, r1, [r7]
10007886:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
1000788a:	ea50 0104 	orrs.w	r1, r0, r4
1000788e:	f000 845c 	beq.w	1000814a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
10007892:	e9d7 0100 	ldrd	r0, r1, [r7]
10007896:	2801      	cmp	r0, #1
10007898:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
1000789c:	f081 8255 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100078a0:	e9d7 0100 	ldrd	r0, r1, [r7]
100078a4:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
100078a8:	ea50 0104 	orrs.w	r1, r0, r4
100078ac:	f000 86bf 	beq.w	1000862e <HAL_RCCEx_GetPeriphCLKFreq+0xe72>
100078b0:	e9d7 0100 	ldrd	r0, r1, [r7]
100078b4:	2801      	cmp	r0, #1
100078b6:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
100078ba:	f081 8246 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100078be:	e9d7 0100 	ldrd	r0, r1, [r7]
100078c2:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
100078c6:	ea50 0104 	orrs.w	r1, r0, r4
100078ca:	f000 824e 	beq.w	10007d6a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
100078ce:	e9d7 0100 	ldrd	r0, r1, [r7]
100078d2:	2801      	cmp	r0, #1
100078d4:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
100078d8:	f081 8237 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100078dc:	e9d7 0100 	ldrd	r0, r1, [r7]
100078e0:	f1a1 0420 	sub.w	r4, r1, #32
100078e4:	ea50 0104 	orrs.w	r1, r0, r4
100078e8:	f000 8722 	beq.w	10008730 <HAL_RCCEx_GetPeriphCLKFreq+0xf74>
100078ec:	e9d7 0100 	ldrd	r0, r1, [r7]
100078f0:	2801      	cmp	r0, #1
100078f2:	f171 0120 	sbcs.w	r1, r1, #32
100078f6:	f081 8228 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100078fa:	e9d7 0100 	ldrd	r0, r1, [r7]
100078fe:	f1a1 0410 	sub.w	r4, r1, #16
10007902:	ea50 0104 	orrs.w	r1, r0, r4
10007906:	f000 87c9 	beq.w	1000889c <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
1000790a:	e9d7 0100 	ldrd	r0, r1, [r7]
1000790e:	2801      	cmp	r0, #1
10007910:	f171 0110 	sbcs.w	r1, r1, #16
10007914:	f081 8219 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007918:	e9d7 0100 	ldrd	r0, r1, [r7]
1000791c:	f1a1 0408 	sub.w	r4, r1, #8
10007920:	ea50 0104 	orrs.w	r1, r0, r4
10007924:	f001 80e8 	beq.w	10008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x133c>
10007928:	e9d7 0100 	ldrd	r0, r1, [r7]
1000792c:	2801      	cmp	r0, #1
1000792e:	f171 0108 	sbcs.w	r1, r1, #8
10007932:	f081 820a 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007936:	e9d7 0100 	ldrd	r0, r1, [r7]
1000793a:	1f0c      	subs	r4, r1, #4
1000793c:	ea50 0104 	orrs.w	r1, r0, r4
10007940:	f001 8104 	beq.w	10008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x1390>
10007944:	e9d7 0100 	ldrd	r0, r1, [r7]
10007948:	2801      	cmp	r0, #1
1000794a:	f171 0104 	sbcs.w	r1, r1, #4
1000794e:	f081 81fc 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007952:	e9d7 0100 	ldrd	r0, r1, [r7]
10007956:	1e8c      	subs	r4, r1, #2
10007958:	ea50 0104 	orrs.w	r1, r0, r4
1000795c:	f000 87ee 	beq.w	1000893c <HAL_RCCEx_GetPeriphCLKFreq+0x1180>
10007960:	e9d7 0100 	ldrd	r0, r1, [r7]
10007964:	2801      	cmp	r0, #1
10007966:	f171 0102 	sbcs.w	r1, r1, #2
1000796a:	f081 81ee 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000796e:	e9d7 0100 	ldrd	r0, r1, [r7]
10007972:	1e4c      	subs	r4, r1, #1
10007974:	ea50 0104 	orrs.w	r1, r0, r4
10007978:	f001 8053 	beq.w	10008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
1000797c:	e9d7 0100 	ldrd	r0, r1, [r7]
10007980:	2801      	cmp	r0, #1
10007982:	f171 0101 	sbcs.w	r1, r1, #1
10007986:	f081 81e0 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000798a:	e9d7 0100 	ldrd	r0, r1, [r7]
1000798e:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
10007992:	4321      	orrs	r1, r4
10007994:	f001 8104 	beq.w	10008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
10007998:	e9d7 0100 	ldrd	r0, r1, [r7]
1000799c:	4cbd      	ldr	r4, [pc, #756]	; (10007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>)
1000799e:	42a0      	cmp	r0, r4
100079a0:	f171 0100 	sbcs.w	r1, r1, #0
100079a4:	f081 81d1 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100079a8:	e9d7 0100 	ldrd	r0, r1, [r7]
100079ac:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
100079b0:	4321      	orrs	r1, r4
100079b2:	f000 85e3 	beq.w	1000857c <HAL_RCCEx_GetPeriphCLKFreq+0xdc0>
100079b6:	e9d7 0100 	ldrd	r0, r1, [r7]
100079ba:	4cb7      	ldr	r4, [pc, #732]	; (10007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
100079bc:	42a0      	cmp	r0, r4
100079be:	f171 0100 	sbcs.w	r1, r1, #0
100079c2:	f081 81c2 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100079c6:	e9d7 0100 	ldrd	r0, r1, [r7]
100079ca:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
100079ce:	4321      	orrs	r1, r4
100079d0:	f000 86e1 	beq.w	10008796 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
100079d4:	e9d7 0100 	ldrd	r0, r1, [r7]
100079d8:	4cb0      	ldr	r4, [pc, #704]	; (10007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
100079da:	42a0      	cmp	r0, r4
100079dc:	f171 0100 	sbcs.w	r1, r1, #0
100079e0:	f081 81b3 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100079e4:	e9d7 0100 	ldrd	r0, r1, [r7]
100079e8:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
100079ec:	4321      	orrs	r1, r4
100079ee:	f000 84db 	beq.w	100083a8 <HAL_RCCEx_GetPeriphCLKFreq+0xbec>
100079f2:	e9d7 0100 	ldrd	r0, r1, [r7]
100079f6:	4caa      	ldr	r4, [pc, #680]	; (10007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
100079f8:	42a0      	cmp	r0, r4
100079fa:	f171 0100 	sbcs.w	r1, r1, #0
100079fe:	f081 81a4 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007a02:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a06:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
10007a0a:	4321      	orrs	r1, r4
10007a0c:	f000 82b0 	beq.w	10007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
10007a10:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a14:	4ca3      	ldr	r4, [pc, #652]	; (10007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
10007a16:	42a0      	cmp	r0, r4
10007a18:	f171 0100 	sbcs.w	r1, r1, #0
10007a1c:	f081 8195 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007a20:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a24:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
10007a28:	4321      	orrs	r1, r4
10007a2a:	f000 8481 	beq.w	10008330 <HAL_RCCEx_GetPeriphCLKFreq+0xb74>
10007a2e:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a32:	4c9d      	ldr	r4, [pc, #628]	; (10007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
10007a34:	42a0      	cmp	r0, r4
10007a36:	f171 0100 	sbcs.w	r1, r1, #0
10007a3a:	f081 8186 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007a3e:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a42:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
10007a46:	4321      	orrs	r1, r4
10007a48:	f000 8384 	beq.w	10008154 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
10007a4c:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a50:	4c96      	ldr	r4, [pc, #600]	; (10007cac <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
10007a52:	42a0      	cmp	r0, r4
10007a54:	f171 0100 	sbcs.w	r1, r1, #0
10007a58:	f081 8177 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007a5c:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a60:	f100 447f 	add.w	r4, r0, #4278190080	; 0xff000000
10007a64:	4321      	orrs	r1, r4
10007a66:	f000 8250 	beq.w	10007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
10007a6a:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a6e:	4c90      	ldr	r4, [pc, #576]	; (10007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
10007a70:	42a0      	cmp	r0, r4
10007a72:	f171 0100 	sbcs.w	r1, r1, #0
10007a76:	f081 8168 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007a7a:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a7e:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
10007a82:	4321      	orrs	r1, r4
10007a84:	f000 85b9 	beq.w	100085fa <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
10007a88:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a8c:	4c89      	ldr	r4, [pc, #548]	; (10007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
10007a8e:	42a0      	cmp	r0, r4
10007a90:	f171 0100 	sbcs.w	r1, r1, #0
10007a94:	f081 8159 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007a98:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a9c:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
10007aa0:	4321      	orrs	r1, r4
10007aa2:	f000 871a 	beq.w	100088da <HAL_RCCEx_GetPeriphCLKFreq+0x111e>
10007aa6:	e9d7 0100 	ldrd	r0, r1, [r7]
10007aaa:	4c83      	ldr	r4, [pc, #524]	; (10007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
10007aac:	42a0      	cmp	r0, r4
10007aae:	f171 0100 	sbcs.w	r1, r1, #0
10007ab2:	f081 814a 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007ab6:	e9d7 0100 	ldrd	r0, r1, [r7]
10007aba:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
10007abe:	4321      	orrs	r1, r4
10007ac0:	f000 875e 	beq.w	10008980 <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
10007ac4:	e9d7 0100 	ldrd	r0, r1, [r7]
10007ac8:	4c7c      	ldr	r4, [pc, #496]	; (10007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
10007aca:	42a0      	cmp	r0, r4
10007acc:	f171 0100 	sbcs.w	r1, r1, #0
10007ad0:	f081 813b 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007ad4:	e9d7 0100 	ldrd	r0, r1, [r7]
10007ad8:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
10007adc:	4321      	orrs	r1, r4
10007ade:	f000 8786 	beq.w	100089ee <HAL_RCCEx_GetPeriphCLKFreq+0x1232>
10007ae2:	e9d7 0100 	ldrd	r0, r1, [r7]
10007ae6:	4c76      	ldr	r4, [pc, #472]	; (10007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
10007ae8:	42a0      	cmp	r0, r4
10007aea:	f171 0100 	sbcs.w	r1, r1, #0
10007aee:	f081 812c 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007af2:	e9d7 0100 	ldrd	r0, r1, [r7]
10007af6:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
10007afa:	4321      	orrs	r1, r4
10007afc:	f000 83dd 	beq.w	100082ba <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
10007b00:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b04:	4c6f      	ldr	r4, [pc, #444]	; (10007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
10007b06:	42a0      	cmp	r0, r4
10007b08:	f171 0100 	sbcs.w	r1, r1, #0
10007b0c:	f081 811d 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007b10:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b14:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
10007b18:	4321      	orrs	r1, r4
10007b1a:	f000 84f2 	beq.w	10008502 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
10007b1e:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b22:	4c69      	ldr	r4, [pc, #420]	; (10007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
10007b24:	42a0      	cmp	r0, r4
10007b26:	f171 0100 	sbcs.w	r1, r1, #0
10007b2a:	f081 810e 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007b2e:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b32:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
10007b36:	4321      	orrs	r1, r4
10007b38:	f000 84af 	beq.w	1000849a <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
10007b3c:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b40:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
10007b44:	f171 0100 	sbcs.w	r1, r1, #0
10007b48:	f081 80ff 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007b4c:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b50:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
10007b54:	4321      	orrs	r1, r4
10007b56:	f000 82b8 	beq.w	100080ca <HAL_RCCEx_GetPeriphCLKFreq+0x90e>
10007b5a:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b5e:	f248 0401 	movw	r4, #32769	; 0x8001
10007b62:	42a0      	cmp	r0, r4
10007b64:	f171 0100 	sbcs.w	r1, r1, #0
10007b68:	f081 80ef 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007b6c:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b70:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
10007b74:	4321      	orrs	r1, r4
10007b76:	f000 8458 	beq.w	1000842a <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
10007b7a:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b7e:	f244 0401 	movw	r4, #16385	; 0x4001
10007b82:	42a0      	cmp	r0, r4
10007b84:	f171 0100 	sbcs.w	r1, r1, #0
10007b88:	f081 80df 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007b8c:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b90:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
10007b94:	4321      	orrs	r1, r4
10007b96:	f000 80f2 	beq.w	10007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
10007b9a:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b9e:	f242 0401 	movw	r4, #8193	; 0x2001
10007ba2:	42a0      	cmp	r0, r4
10007ba4:	f171 0100 	sbcs.w	r1, r1, #0
10007ba8:	f081 80cf 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007bac:	e9d7 0100 	ldrd	r0, r1, [r7]
10007bb0:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
10007bb4:	4321      	orrs	r1, r4
10007bb6:	f000 8574 	beq.w	100086a2 <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
10007bba:	e9d7 0100 	ldrd	r0, r1, [r7]
10007bbe:	f241 0401 	movw	r4, #4097	; 0x1001
10007bc2:	42a0      	cmp	r0, r4
10007bc4:	f171 0100 	sbcs.w	r1, r1, #0
10007bc8:	f081 80bf 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007bcc:	e9d7 0100 	ldrd	r0, r1, [r7]
10007bd0:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
10007bd4:	4321      	orrs	r1, r4
10007bd6:	f001 8063 	beq.w	10008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x14e4>
10007bda:	e9d7 0100 	ldrd	r0, r1, [r7]
10007bde:	f640 0401 	movw	r4, #2049	; 0x801
10007be2:	42a0      	cmp	r0, r4
10007be4:	f171 0100 	sbcs.w	r1, r1, #0
10007be8:	f081 80af 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007bec:	e9d7 0100 	ldrd	r0, r1, [r7]
10007bf0:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
10007bf4:	4321      	orrs	r1, r4
10007bf6:	f001 800b 	beq.w	10008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1454>
10007bfa:	e9d7 0100 	ldrd	r0, r1, [r7]
10007bfe:	f240 4401 	movw	r4, #1025	; 0x401
10007c02:	42a0      	cmp	r0, r4
10007c04:	f171 0100 	sbcs.w	r1, r1, #0
10007c08:	f081 809f 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007c0c:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c10:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
10007c14:	4321      	orrs	r1, r4
10007c16:	f000 8512 	beq.w	1000863e <HAL_RCCEx_GetPeriphCLKFreq+0xe82>
10007c1a:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c1e:	f240 2401 	movw	r4, #513	; 0x201
10007c22:	42a0      	cmp	r0, r4
10007c24:	f171 0100 	sbcs.w	r1, r1, #0
10007c28:	f081 808f 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007c2c:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c30:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
10007c34:	4321      	orrs	r1, r4
10007c36:	f000 82ff 	beq.w	10008238 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
10007c3a:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c3e:	f240 1401 	movw	r4, #257	; 0x101
10007c42:	42a0      	cmp	r0, r4
10007c44:	f171 0100 	sbcs.w	r1, r1, #0
10007c48:	f081 807f 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007c4c:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c50:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
10007c54:	4321      	orrs	r1, r4
10007c56:	f000 82b3 	beq.w	100081c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
10007c5a:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c5e:	2881      	cmp	r0, #129	; 0x81
10007c60:	f171 0100 	sbcs.w	r1, r1, #0
10007c64:	f081 8071 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007c68:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c6c:	2821      	cmp	r0, #33	; 0x21
10007c6e:	f171 0100 	sbcs.w	r1, r1, #0
10007c72:	d271      	bcs.n	10007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
10007c74:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c78:	4301      	orrs	r1, r0
10007c7a:	f001 8066 	beq.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007c7e:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c82:	1e42      	subs	r2, r0, #1
10007c84:	f141 33ff 	adc.w	r3, r1, #4294967295
10007c88:	2a20      	cmp	r2, #32
10007c8a:	f173 0100 	sbcs.w	r1, r3, #0
10007c8e:	f081 805c 	bcs.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007c92:	e01b      	b.n	10007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x510>
10007c94:	80000001 	.word	0x80000001
10007c98:	40000001 	.word	0x40000001
10007c9c:	20000001 	.word	0x20000001
10007ca0:	10000001 	.word	0x10000001
10007ca4:	08000001 	.word	0x08000001
10007ca8:	04000001 	.word	0x04000001
10007cac:	02000001 	.word	0x02000001
10007cb0:	01000001 	.word	0x01000001
10007cb4:	00400001 	.word	0x00400001
10007cb8:	00200001 	.word	0x00200001
10007cbc:	00100001 	.word	0x00100001
10007cc0:	00080001 	.word	0x00080001
10007cc4:	00040001 	.word	0x00040001
10007cc8:	00020001 	.word	0x00020001
10007ccc:	2a1f      	cmp	r2, #31
10007cce:	f201 803c 	bhi.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007cd2:	a101      	add	r1, pc, #4	; (adr r1, 10007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
10007cd4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
10007cd8:	10008819 	.word	0x10008819
10007cdc:	10007fe9 	.word	0x10007fe9
10007ce0:	10008d4b 	.word	0x10008d4b
10007ce4:	1000805b 	.word	0x1000805b
10007ce8:	10008d4b 	.word	0x10008d4b
10007cec:	10008d4b 	.word	0x10008d4b
10007cf0:	10008d4b 	.word	0x10008d4b
10007cf4:	10008aa1 	.word	0x10008aa1
10007cf8:	10008d4b 	.word	0x10008d4b
10007cfc:	10008d4b 	.word	0x10008d4b
10007d00:	10008d4b 	.word	0x10008d4b
10007d04:	10008d4b 	.word	0x10008d4b
10007d08:	10008d4b 	.word	0x10008d4b
10007d0c:	10008d4b 	.word	0x10008d4b
10007d10:	10008d4b 	.word	0x10008d4b
10007d14:	10007dc9 	.word	0x10007dc9
10007d18:	10008d4b 	.word	0x10008d4b
10007d1c:	10008d4b 	.word	0x10008d4b
10007d20:	10008d4b 	.word	0x10008d4b
10007d24:	10008d4b 	.word	0x10008d4b
10007d28:	10008d4b 	.word	0x10008d4b
10007d2c:	10008d4b 	.word	0x10008d4b
10007d30:	10008d4b 	.word	0x10008d4b
10007d34:	10008d4b 	.word	0x10008d4b
10007d38:	10008d4b 	.word	0x10008d4b
10007d3c:	10008d4b 	.word	0x10008d4b
10007d40:	10008d4b 	.word	0x10008d4b
10007d44:	10008d4b 	.word	0x10008d4b
10007d48:	10008d4b 	.word	0x10008d4b
10007d4c:	10008d4b 	.word	0x10008d4b
10007d50:	10008d4b 	.word	0x10008d4b
10007d54:	10007e2b 	.word	0x10007e2b
10007d58:	e9d7 2300 	ldrd	r2, r3, [r7]
10007d5c:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
10007d60:	430b      	orrs	r3, r1
10007d62:	f000 8094 	beq.w	10007e8e <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
10007d66:	f000 bff0 	b.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
  {

    case RCC_PERIPHCLK_DAC:
    {
      frequency = LSI_VALUE;
10007d6a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10007d6e:	637b      	str	r3, [r7, #52]	; 0x34
    }
      break; /*RCC_PERIPHCLK_DAC*/
10007d70:	f000 bfeb 	b.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_WWDG:
    {
      frequency = HAL_RCC_GetPCLK1Freq();
10007d74:	f7fd f8c6 	bl	10004f04 <HAL_RCC_GetPCLK1Freq>
10007d78:	6378      	str	r0, [r7, #52]	; 0x34
    }
      break; /* RCC_PERIPHCLK_WWDG */
10007d7a:	f000 bfe6 	b.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_CEC:
    {
      clksource = __HAL_RCC_GET_CEC_SOURCE();
10007d7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007d82:	f8d3 3918 	ldr.w	r3, [r3, #2328]	; 0x918
10007d86:	f003 0303 	and.w	r3, r3, #3
10007d8a:	633b      	str	r3, [r7, #48]	; 0x30
10007d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007d8e:	2b02      	cmp	r3, #2
10007d90:	d011      	beq.n	10007db6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
10007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007d94:	2b02      	cmp	r3, #2
10007d96:	d812      	bhi.n	10007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x602>
10007d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007d9a:	2b00      	cmp	r3, #0
10007d9c:	d003      	beq.n	10007da6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
10007d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007da0:	2b01      	cmp	r3, #1
10007da2:	d004      	beq.n	10007dae <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
10007da4:	e00b      	b.n	10007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x602>

      switch (clksource)
      {
        case RCC_CECCLKSOURCE_LSE:
          frequency = LSE_VALUE;
10007da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10007daa:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007dac:	e00a      	b.n	10007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x608>

        case RCC_CECCLKSOURCE_LSI:
          frequency = LSI_VALUE;
10007dae:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10007db2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007db4:	e006      	b.n	10007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x608>

        case RCC_CECCLKSOURCE_CSI122:
          frequency = (CSI_VALUE / 122);
10007db6:	f248 0312 	movw	r3, #32786	; 0x8012
10007dba:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007dbc:	e002      	b.n	10007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x608>

        default:
          frequency = 0;
10007dbe:	2300      	movs	r3, #0
10007dc0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007dc2:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_CEC */
10007dc4:	f000 bfc1 	b.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_I2C12:
    {
      clksource = __HAL_RCC_GET_I2C12_SOURCE();
10007dc8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007dcc:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	; 0x8c0
10007dd0:	f003 0307 	and.w	r3, r3, #7
10007dd4:	633b      	str	r3, [r7, #48]	; 0x30
10007dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007dd8:	2b03      	cmp	r3, #3
10007dda:	f200 87a7 	bhi.w	10008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1570>
10007dde:	a201      	add	r2, pc, #4	; (adr r2, 10007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x628>)
10007de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10007de4:	10007df5 	.word	0x10007df5
10007de8:	10007dfd 	.word	0x10007dfd
10007dec:	10007e0d 	.word	0x10007e0d
10007df0:	10007e21 	.word	0x10007e21

      switch (clksource)
      {
        case RCC_I2C12CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
10007df4:	f7fd f886 	bl	10004f04 <HAL_RCC_GetPCLK1Freq>
10007df8:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10007dfa:	e014      	b.n	10007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>

        case RCC_I2C12CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007dfc:	f107 030c 	add.w	r3, r7, #12
10007e00:	4618      	mov	r0, r3
10007e02:	f7fc ff77 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10007e06:	697b      	ldr	r3, [r7, #20]
10007e08:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007e0a:	e00c      	b.n	10007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>

        case RCC_I2C12CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10007e0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007e10:	699b      	ldr	r3, [r3, #24]
10007e12:	f003 0303 	and.w	r3, r3, #3
10007e16:	4ab8      	ldr	r2, [pc, #736]	; (100080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
10007e18:	fa22 f303 	lsr.w	r3, r2, r3
10007e1c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007e1e:	e002      	b.n	10007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>

        case RCC_I2C12CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10007e20:	4bb6      	ldr	r3, [pc, #728]	; (100080fc <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
10007e22:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007e24:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_I2C12 */
10007e26:	f000 bf81 	b.w	10008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1570>


    case RCC_PERIPHCLK_I2C35:
    {
      clksource = __HAL_RCC_GET_I2C35_SOURCE();
10007e2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007e2e:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	; 0x8c4
10007e32:	f003 0307 	and.w	r3, r3, #7
10007e36:	633b      	str	r3, [r7, #48]	; 0x30
10007e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007e3a:	2b03      	cmp	r3, #3
10007e3c:	f200 8778 	bhi.w	10008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1574>
10007e40:	a201      	add	r2, pc, #4	; (adr r2, 10007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
10007e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10007e46:	bf00      	nop
10007e48:	10007e59 	.word	0x10007e59
10007e4c:	10007e61 	.word	0x10007e61
10007e50:	10007e71 	.word	0x10007e71
10007e54:	10007e85 	.word	0x10007e85

      switch (clksource)
      {
        case RCC_I2C35CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
10007e58:	f7fd f854 	bl	10004f04 <HAL_RCC_GetPCLK1Freq>
10007e5c:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10007e5e:	e014      	b.n	10007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>

        case RCC_I2C35CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007e60:	f107 030c 	add.w	r3, r7, #12
10007e64:	4618      	mov	r0, r3
10007e66:	f7fc ff45 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10007e6a:	697b      	ldr	r3, [r7, #20]
10007e6c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007e6e:	e00c      	b.n	10007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>

        case RCC_I2C35CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10007e70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007e74:	699b      	ldr	r3, [r3, #24]
10007e76:	f003 0303 	and.w	r3, r3, #3
10007e7a:	4a9f      	ldr	r2, [pc, #636]	; (100080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
10007e7c:	fa22 f303 	lsr.w	r3, r2, r3
10007e80:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007e82:	e002      	b.n	10007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>

        case RCC_I2C35CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10007e84:	4b9d      	ldr	r3, [pc, #628]	; (100080fc <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
10007e86:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007e88:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_I2C35 */
10007e8a:	f000 bf51 	b.w	10008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1574>


    case RCC_PERIPHCLK_LPTIM1:
    {
      clksource = __HAL_RCC_GET_LPTIM1_SOURCE();
10007e8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007e92:	f8d3 3934 	ldr.w	r3, [r3, #2356]	; 0x934
10007e96:	f003 0307 	and.w	r3, r3, #7
10007e9a:	633b      	str	r3, [r7, #48]	; 0x30
10007e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007e9e:	2b05      	cmp	r3, #5
10007ea0:	d82e      	bhi.n	10007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
10007ea2:	a201      	add	r2, pc, #4	; (adr r2, 10007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
10007ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10007ea8:	10007ec1 	.word	0x10007ec1
10007eac:	10007ec9 	.word	0x10007ec9
10007eb0:	10007ed9 	.word	0x10007ed9
10007eb4:	10007ee9 	.word	0x10007ee9
10007eb8:	10007ef1 	.word	0x10007ef1
10007ebc:	10007ef9 	.word	0x10007ef9

      switch (clksource)
      {
        case RCC_LPTIM1CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
10007ec0:	f7fd f820 	bl	10004f04 <HAL_RCC_GetPCLK1Freq>
10007ec4:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10007ec6:	e01e      	b.n	10007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007ec8:	f107 030c 	add.w	r3, r7, #12
10007ecc:	4618      	mov	r0, r3
10007ece:	f7fc ff11 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10007ed2:	68fb      	ldr	r3, [r7, #12]
10007ed4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007ed6:	e016      	b.n	10007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10007ed8:	f107 0318 	add.w	r3, r7, #24
10007edc:	4618      	mov	r0, r3
10007ede:	f7fc fe0f 	bl	10004b00 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10007ee2:	69fb      	ldr	r3, [r7, #28]
10007ee4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007ee6:	e00e      	b.n	10007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_LSE:
          frequency = LSE_VALUE;
10007ee8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10007eec:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007eee:	e00a      	b.n	10007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_LSI:
          frequency = LSI_VALUE;
10007ef0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10007ef4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007ef6:	e006      	b.n	10007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10007ef8:	f7fd f8bc 	bl	10005074 <RCC_GetCKPERFreq>
10007efc:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10007efe:	e002      	b.n	10007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        default:
          frequency = 0;
10007f00:	2300      	movs	r3, #0
10007f02:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007f04:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_LPTIM1 */
10007f06:	f000 bf20 	b.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SPDIFRX:
    {
      clksource = __HAL_RCC_GET_SPDIFRX_SOURCE();
10007f0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007f0e:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
10007f12:	f003 0303 	and.w	r3, r3, #3
10007f16:	633b      	str	r3, [r7, #48]	; 0x30
10007f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007f1a:	2b02      	cmp	r3, #2
10007f1c:	d019      	beq.n	10007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
10007f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007f20:	2b02      	cmp	r3, #2
10007f22:	d820      	bhi.n	10007f66 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
10007f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007f26:	2b00      	cmp	r3, #0
10007f28:	d003      	beq.n	10007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
10007f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007f2c:	2b01      	cmp	r3, #1
10007f2e:	d008      	beq.n	10007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
10007f30:	e019      	b.n	10007f66 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>

      switch (clksource)
      {
        case RCC_SPDIFRXCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007f32:	f107 030c 	add.w	r3, r7, #12
10007f36:	4618      	mov	r0, r3
10007f38:	f7fc fedc 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10007f3c:	68fb      	ldr	r3, [r7, #12]
10007f3e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007f40:	e014      	b.n	10007f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>

        case RCC_SPDIFRXCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10007f42:	f107 0318 	add.w	r3, r7, #24
10007f46:	4618      	mov	r0, r3
10007f48:	f7fc fdda 	bl	10004b00 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10007f4c:	69fb      	ldr	r3, [r7, #28]
10007f4e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007f50:	e00c      	b.n	10007f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>

        case RCC_SPDIFRXCLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10007f52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007f56:	699b      	ldr	r3, [r3, #24]
10007f58:	f003 0303 	and.w	r3, r3, #3
10007f5c:	4a66      	ldr	r2, [pc, #408]	; (100080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
10007f5e:	fa22 f303 	lsr.w	r3, r2, r3
10007f62:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007f64:	e002      	b.n	10007f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>

        default:
          frequency = 0;
10007f66:	2300      	movs	r3, #0
10007f68:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007f6a:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_SPDIFRX */
10007f6c:	f000 beed 	b.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_SPI23:
    {
      clksource = __HAL_RCC_GET_SPI23_SOURCE();
10007f70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007f74:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	; 0x8dc
10007f78:	f003 0307 	and.w	r3, r3, #7
10007f7c:	633b      	str	r3, [r7, #48]	; 0x30
10007f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007f80:	2b04      	cmp	r3, #4
10007f82:	d82c      	bhi.n	10007fde <HAL_RCCEx_GetPeriphCLKFreq+0x822>
10007f84:	a201      	add	r2, pc, #4	; (adr r2, 10007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>)
10007f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10007f8a:	bf00      	nop
10007f8c:	10007fa1 	.word	0x10007fa1
10007f90:	10007fb1 	.word	0x10007fb1
10007f94:	10007fd1 	.word	0x10007fd1
10007f98:	10007fd7 	.word	0x10007fd7
10007f9c:	10007fc1 	.word	0x10007fc1

      switch (clksource)
      {
        case RCC_SPI23CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007fa0:	f107 030c 	add.w	r3, r7, #12
10007fa4:	4618      	mov	r0, r3
10007fa6:	f7fc fea5 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10007faa:	68fb      	ldr	r3, [r7, #12]
10007fac:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007fae:	e019      	b.n	10007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        case RCC_SPI23CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10007fb0:	f107 0318 	add.w	r3, r7, #24
10007fb4:	4618      	mov	r0, r3
10007fb6:	f7fc fda3 	bl	10004b00 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10007fba:	69fb      	ldr	r3, [r7, #28]
10007fbc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007fbe:	e011      	b.n	10007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        case RCC_SPI23CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10007fc0:	f107 0318 	add.w	r3, r7, #24
10007fc4:	4618      	mov	r0, r3
10007fc6:	f7fc fd9b 	bl	10004b00 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10007fca:	6a3b      	ldr	r3, [r7, #32]
10007fcc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007fce:	e009      	b.n	10007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        case RCC_SPI23CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10007fd0:	4b4b      	ldr	r3, [pc, #300]	; (10008100 <HAL_RCCEx_GetPeriphCLKFreq+0x944>)
10007fd2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007fd4:	e006      	b.n	10007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        case RCC_SPI23CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10007fd6:	f7fd f84d 	bl	10005074 <RCC_GetCKPERFreq>
10007fda:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10007fdc:	e002      	b.n	10007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        default:
          frequency = 0;
10007fde:	2300      	movs	r3, #0
10007fe0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007fe2:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_SPI23 */
10007fe4:	f000 beb1 	b.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_UART24:
    {
      clksource = __HAL_RCC_GET_UART24_SOURCE();
10007fe8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007fec:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
10007ff0:	f003 0307 	and.w	r3, r3, #7
10007ff4:	633b      	str	r3, [r7, #48]	; 0x30
10007ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007ff8:	2b04      	cmp	r3, #4
10007ffa:	d829      	bhi.n	10008050 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
10007ffc:	a201      	add	r2, pc, #4	; (adr r2, 10008004 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
10007ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008002:	bf00      	nop
10008004:	10008019 	.word	0x10008019
10008008:	10008021 	.word	0x10008021
1000800c:	10008031 	.word	0x10008031
10008010:	10008045 	.word	0x10008045
10008014:	1000804b 	.word	0x1000804b

      switch (clksource)
      {
        case RCC_UART24CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
10008018:	f7fc ff74 	bl	10004f04 <HAL_RCC_GetPCLK1Freq>
1000801c:	6378      	str	r0, [r7, #52]	; 0x34
          break;
1000801e:	e01a      	b.n	10008056 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        case RCC_UART24CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008020:	f107 030c 	add.w	r3, r7, #12
10008024:	4618      	mov	r0, r3
10008026:	f7fc fe65 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000802a:	693b      	ldr	r3, [r7, #16]
1000802c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000802e:	e012      	b.n	10008056 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        case RCC_UART24CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008030:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008034:	699b      	ldr	r3, [r3, #24]
10008036:	f003 0303 	and.w	r3, r3, #3
1000803a:	4a2f      	ldr	r2, [pc, #188]	; (100080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
1000803c:	fa22 f303 	lsr.w	r3, r2, r3
10008040:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008042:	e008      	b.n	10008056 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        case RCC_UART24CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008044:	4b2d      	ldr	r3, [pc, #180]	; (100080fc <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
10008046:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008048:	e005      	b.n	10008056 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        case RCC_UART24CLKSOURCE_HSE:
          frequency = HSE_VALUE;
1000804a:	4b2e      	ldr	r3, [pc, #184]	; (10008104 <HAL_RCCEx_GetPeriphCLKFreq+0x948>)
1000804c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000804e:	e002      	b.n	10008056 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        default:
          frequency = 0;
10008050:	2300      	movs	r3, #0
10008052:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008054:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_UART24 */
10008056:	f000 be78 	b.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_UART35:
    {
      clksource = __HAL_RCC_GET_UART35_SOURCE();
1000805a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000805e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
10008062:	f003 0307 	and.w	r3, r3, #7
10008066:	633b      	str	r3, [r7, #48]	; 0x30
10008068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000806a:	2b04      	cmp	r3, #4
1000806c:	d828      	bhi.n	100080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
1000806e:	a201      	add	r2, pc, #4	; (adr r2, 10008074 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>)
10008070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008074:	10008089 	.word	0x10008089
10008078:	10008091 	.word	0x10008091
1000807c:	100080a1 	.word	0x100080a1
10008080:	100080b5 	.word	0x100080b5
10008084:	100080bb 	.word	0x100080bb

      switch (clksource)
      {
        case RCC_UART35CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
10008088:	f7fc ff3c 	bl	10004f04 <HAL_RCC_GetPCLK1Freq>
1000808c:	6378      	str	r0, [r7, #52]	; 0x34
          break;
1000808e:	e01a      	b.n	100080c6 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        case RCC_UART35CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008090:	f107 030c 	add.w	r3, r7, #12
10008094:	4618      	mov	r0, r3
10008096:	f7fc fe2d 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000809a:	693b      	ldr	r3, [r7, #16]
1000809c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000809e:	e012      	b.n	100080c6 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        case RCC_UART35CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100080a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100080a4:	699b      	ldr	r3, [r3, #24]
100080a6:	f003 0303 	and.w	r3, r3, #3
100080aa:	4a13      	ldr	r2, [pc, #76]	; (100080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
100080ac:	fa22 f303 	lsr.w	r3, r2, r3
100080b0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100080b2:	e008      	b.n	100080c6 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        case RCC_UART35CLKSOURCE_CSI:
          frequency = CSI_VALUE;
100080b4:	4b11      	ldr	r3, [pc, #68]	; (100080fc <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
100080b6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100080b8:	e005      	b.n	100080c6 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        case RCC_UART35CLKSOURCE_HSE:
          frequency = HSE_VALUE;
100080ba:	4b12      	ldr	r3, [pc, #72]	; (10008104 <HAL_RCCEx_GetPeriphCLKFreq+0x948>)
100080bc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100080be:	e002      	b.n	100080c6 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        default:
          frequency = 0;
100080c0:	2300      	movs	r3, #0
100080c2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100080c4:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_USART35 */
100080c6:	f000 be40 	b.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_UART78:
    {
      clksource = __HAL_RCC_GET_UART78_SOURCE();
100080ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100080ce:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
100080d2:	f003 0307 	and.w	r3, r3, #7
100080d6:	633b      	str	r3, [r7, #48]	; 0x30
100080d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100080da:	2b04      	cmp	r3, #4
100080dc:	d830      	bhi.n	10008140 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
100080de:	a201      	add	r2, pc, #4	; (adr r2, 100080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
100080e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100080e4:	10008109 	.word	0x10008109
100080e8:	10008111 	.word	0x10008111
100080ec:	10008121 	.word	0x10008121
100080f0:	10008135 	.word	0x10008135
100080f4:	1000813b 	.word	0x1000813b
100080f8:	03d09000 	.word	0x03d09000
100080fc:	003d0900 	.word	0x003d0900
10008100:	00bb8000 	.word	0x00bb8000
10008104:	016e3600 	.word	0x016e3600

      switch (clksource)
      {
        case RCC_UART78CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
10008108:	f7fc fefc 	bl	10004f04 <HAL_RCC_GetPCLK1Freq>
1000810c:	6378      	str	r0, [r7, #52]	; 0x34
          break;
1000810e:	e01a      	b.n	10008146 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        case RCC_UART78CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008110:	f107 030c 	add.w	r3, r7, #12
10008114:	4618      	mov	r0, r3
10008116:	f7fc fded 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000811a:	693b      	ldr	r3, [r7, #16]
1000811c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000811e:	e012      	b.n	10008146 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        case RCC_UART78CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008120:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008124:	699b      	ldr	r3, [r3, #24]
10008126:	f003 0303 	and.w	r3, r3, #3
1000812a:	4ab9      	ldr	r2, [pc, #740]	; (10008410 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>)
1000812c:	fa22 f303 	lsr.w	r3, r2, r3
10008130:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008132:	e008      	b.n	10008146 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        case RCC_UART78CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008134:	4bb7      	ldr	r3, [pc, #732]	; (10008414 <HAL_RCCEx_GetPeriphCLKFreq+0xc58>)
10008136:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008138:	e005      	b.n	10008146 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        case RCC_UART78CLKSOURCE_HSE:
          frequency = HSE_VALUE;
1000813a:	4bb7      	ldr	r3, [pc, #732]	; (10008418 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
1000813c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000813e:	e002      	b.n	10008146 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        default:
          frequency = 0;
10008140:	2300      	movs	r3, #0
10008142:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008144:	bf00      	nop
      }
    }
      break; /*RCC_PERIPHCLK_UART78 */
10008146:	f000 be00 	b.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_DFSDM1:
    {
      frequency = HAL_RCC_GetMLHCLKFreq();
1000814a:	f7fc ff71 	bl	10005030 <HAL_RCC_GetMLHCLKFreq>
1000814e:	6378      	str	r0, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_DFSDM1
10008150:	f000 bdfb 	b.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

#if defined(FDCAN1)
    case RCC_PERIPHCLK_FDCAN:
    {
      clksource = __HAL_RCC_GET_FDCAN_SOURCE();
10008154:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008158:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
1000815c:	f003 0303 	and.w	r3, r3, #3
10008160:	633b      	str	r3, [r7, #48]	; 0x30
10008162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008164:	2b03      	cmp	r3, #3
10008166:	d826      	bhi.n	100081b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
10008168:	a201      	add	r2, pc, #4	; (adr r2, 10008170 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>)
1000816a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000816e:	bf00      	nop
10008170:	10008181 	.word	0x10008181
10008174:	10008187 	.word	0x10008187
10008178:	10008197 	.word	0x10008197
1000817c:	100081a7 	.word	0x100081a7

      switch (clksource)
      {
        case RCC_FDCANCLKSOURCE_HSE:
          frequency = HSE_VALUE;
10008180:	4ba5      	ldr	r3, [pc, #660]	; (10008418 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
10008182:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008184:	e01a      	b.n	100081bc <HAL_RCCEx_GetPeriphCLKFreq+0xa00>

        case RCC_FDCANCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008186:	f107 0318 	add.w	r3, r7, #24
1000818a:	4618      	mov	r0, r3
1000818c:	f7fc fcb8 	bl	10004b00 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008190:	69fb      	ldr	r3, [r7, #28]
10008192:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008194:	e012      	b.n	100081bc <HAL_RCCEx_GetPeriphCLKFreq+0xa00>

        case RCC_FDCANCLKSOURCE_PLL4_Q:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008196:	f107 030c 	add.w	r3, r7, #12
1000819a:	4618      	mov	r0, r3
1000819c:	f7fc fdaa 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
100081a0:	693b      	ldr	r3, [r7, #16]
100081a2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100081a4:	e00a      	b.n	100081bc <HAL_RCCEx_GetPeriphCLKFreq+0xa00>

        case RCC_FDCANCLKSOURCE_PLL4_R:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100081a6:	f107 030c 	add.w	r3, r7, #12
100081aa:	4618      	mov	r0, r3
100081ac:	f7fc fda2 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
100081b0:	697b      	ldr	r3, [r7, #20]
100081b2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100081b4:	e002      	b.n	100081bc <HAL_RCCEx_GetPeriphCLKFreq+0xa00>

        default:
          frequency = 0;
100081b6:	2300      	movs	r3, #0
100081b8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100081ba:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_FDCAN
100081bc:	f000 bdc5 	b.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
#endif /*FDCAN1*/

    case RCC_PERIPHCLK_SAI1:
    {
      clksource = __HAL_RCC_GET_SAI1_SOURCE();
100081c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100081c4:	f8d3 38c8 	ldr.w	r3, [r3, #2248]	; 0x8c8
100081c8:	f003 0307 	and.w	r3, r3, #7
100081cc:	633b      	str	r3, [r7, #48]	; 0x30
100081ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100081d0:	2b04      	cmp	r3, #4
100081d2:	d82c      	bhi.n	1000822e <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
100081d4:	a201      	add	r2, pc, #4	; (adr r2, 100081dc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>)
100081d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100081da:	bf00      	nop
100081dc:	100081f1 	.word	0x100081f1
100081e0:	10008201 	.word	0x10008201
100081e4:	10008221 	.word	0x10008221
100081e8:	10008227 	.word	0x10008227
100081ec:	10008211 	.word	0x10008211

      switch (clksource)
      {
        case RCC_SAI1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100081f0:	f107 030c 	add.w	r3, r7, #12
100081f4:	4618      	mov	r0, r3
100081f6:	f7fc fd7d 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
100081fa:	693b      	ldr	r3, [r7, #16]
100081fc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100081fe:	e019      	b.n	10008234 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        case RCC_SAI1CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008200:	f107 0318 	add.w	r3, r7, #24
10008204:	4618      	mov	r0, r3
10008206:	f7fc fc7b 	bl	10004b00 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
1000820a:	69fb      	ldr	r3, [r7, #28]
1000820c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000820e:	e011      	b.n	10008234 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        case RCC_SAI1CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008210:	f107 0318 	add.w	r3, r7, #24
10008214:	4618      	mov	r0, r3
10008216:	f7fc fc73 	bl	10004b00 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
1000821a:	6a3b      	ldr	r3, [r7, #32]
1000821c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000821e:	e009      	b.n	10008234 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        case RCC_SAI1CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10008220:	4b7e      	ldr	r3, [pc, #504]	; (1000841c <HAL_RCCEx_GetPeriphCLKFreq+0xc60>)
10008222:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008224:	e006      	b.n	10008234 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        case RCC_SAI1CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008226:	f7fc ff25 	bl	10005074 <RCC_GetCKPERFreq>
1000822a:	6378      	str	r0, [r7, #52]	; 0x34
          break;
1000822c:	e002      	b.n	10008234 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        default:
          frequency = 0;
1000822e:	2300      	movs	r3, #0
10008230:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008232:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SAI1
10008234:	f000 bd89 	b.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SAI2:
    {
      clksource = __HAL_RCC_GET_SAI2_SOURCE();
10008238:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000823c:	f8d3 38cc 	ldr.w	r3, [r3, #2252]	; 0x8cc
10008240:	f003 0307 	and.w	r3, r3, #7
10008244:	633b      	str	r3, [r7, #48]	; 0x30
10008246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008248:	2b05      	cmp	r3, #5
1000824a:	d831      	bhi.n	100082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
1000824c:	a201      	add	r2, pc, #4	; (adr r2, 10008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
1000824e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008252:	bf00      	nop
10008254:	1000826d 	.word	0x1000826d
10008258:	1000827d 	.word	0x1000827d
1000825c:	1000829d 	.word	0x1000829d
10008260:	100082a3 	.word	0x100082a3
10008264:	100082ab 	.word	0x100082ab
10008268:	1000828d 	.word	0x1000828d

      switch (clksource)
      {
        case RCC_SAI2CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000826c:	f107 030c 	add.w	r3, r7, #12
10008270:	4618      	mov	r0, r3
10008272:	f7fc fd3f 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008276:	693b      	ldr	r3, [r7, #16]
10008278:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000827a:	e01c      	b.n	100082b6 <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000827c:	f107 0318 	add.w	r3, r7, #24
10008280:	4618      	mov	r0, r3
10008282:	f7fc fc3d 	bl	10004b00 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008286:	69fb      	ldr	r3, [r7, #28]
10008288:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000828a:	e014      	b.n	100082b6 <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000828c:	f107 0318 	add.w	r3, r7, #24
10008290:	4618      	mov	r0, r3
10008292:	f7fc fc35 	bl	10004b00 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10008296:	6a3b      	ldr	r3, [r7, #32]
10008298:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000829a:	e00c      	b.n	100082b6 <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
1000829c:	4b5f      	ldr	r3, [pc, #380]	; (1000841c <HAL_RCCEx_GetPeriphCLKFreq+0xc60>)
1000829e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100082a0:	e009      	b.n	100082b6 <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
100082a2:	f7fc fee7 	bl	10005074 <RCC_GetCKPERFreq>
100082a6:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100082a8:	e005      	b.n	100082b6 <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_SPDIF:
          frequency = 0; //SAI2 manage this SPDIF_CKSYMB_VALUE
100082aa:	2300      	movs	r3, #0
100082ac:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100082ae:	e002      	b.n	100082b6 <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        default:
          frequency = 0;
100082b0:	2300      	movs	r3, #0
100082b2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100082b4:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SAI2
100082b6:	f000 bd48 	b.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SAI3:
    {
      clksource = __HAL_RCC_GET_SAI3_SOURCE();
100082ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100082be:	f8d3 38d0 	ldr.w	r3, [r3, #2256]	; 0x8d0
100082c2:	f003 0307 	and.w	r3, r3, #7
100082c6:	633b      	str	r3, [r7, #48]	; 0x30
100082c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100082ca:	2b04      	cmp	r3, #4
100082cc:	d82b      	bhi.n	10008326 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
100082ce:	a201      	add	r2, pc, #4	; (adr r2, 100082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb18>)
100082d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100082d4:	100082e9 	.word	0x100082e9
100082d8:	100082f9 	.word	0x100082f9
100082dc:	10008319 	.word	0x10008319
100082e0:	1000831f 	.word	0x1000831f
100082e4:	10008309 	.word	0x10008309

      switch (clksource)
      {
        case RCC_SAI3CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100082e8:	f107 030c 	add.w	r3, r7, #12
100082ec:	4618      	mov	r0, r3
100082ee:	f7fc fd01 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
100082f2:	693b      	ldr	r3, [r7, #16]
100082f4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100082f6:	e019      	b.n	1000832c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        case RCC_SAI3CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100082f8:	f107 0318 	add.w	r3, r7, #24
100082fc:	4618      	mov	r0, r3
100082fe:	f7fc fbff 	bl	10004b00 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008302:	69fb      	ldr	r3, [r7, #28]
10008304:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008306:	e011      	b.n	1000832c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        case RCC_SAI3CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008308:	f107 0318 	add.w	r3, r7, #24
1000830c:	4618      	mov	r0, r3
1000830e:	f7fc fbf7 	bl	10004b00 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10008312:	6a3b      	ldr	r3, [r7, #32]
10008314:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008316:	e009      	b.n	1000832c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        case RCC_SAI3CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10008318:	4b40      	ldr	r3, [pc, #256]	; (1000841c <HAL_RCCEx_GetPeriphCLKFreq+0xc60>)
1000831a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000831c:	e006      	b.n	1000832c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        case RCC_SAI2CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
1000831e:	f7fc fea9 	bl	10005074 <RCC_GetCKPERFreq>
10008322:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008324:	e002      	b.n	1000832c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        default:
          frequency = 0;
10008326:	2300      	movs	r3, #0
10008328:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000832a:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SAI3
1000832c:	f000 bd0d 	b.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SPI1:
    {
      clksource = __HAL_RCC_GET_SPI1_SOURCE();
10008330:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008334:	f8d3 38d8 	ldr.w	r3, [r3, #2264]	; 0x8d8
10008338:	f003 0307 	and.w	r3, r3, #7
1000833c:	633b      	str	r3, [r7, #48]	; 0x30
1000833e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008340:	2b04      	cmp	r3, #4
10008342:	d82c      	bhi.n	1000839e <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
10008344:	a201      	add	r2, pc, #4	; (adr r2, 1000834c <HAL_RCCEx_GetPeriphCLKFreq+0xb90>)
10008346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000834a:	bf00      	nop
1000834c:	10008361 	.word	0x10008361
10008350:	10008371 	.word	0x10008371
10008354:	10008391 	.word	0x10008391
10008358:	10008397 	.word	0x10008397
1000835c:	10008381 	.word	0x10008381

      switch (clksource)
      {
        case RCC_SPI1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008360:	f107 030c 	add.w	r3, r7, #12
10008364:	4618      	mov	r0, r3
10008366:	f7fc fcc5 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000836a:	693b      	ldr	r3, [r7, #16]
1000836c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000836e:	e019      	b.n	100083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        case RCC_SPI1CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008370:	f107 0318 	add.w	r3, r7, #24
10008374:	4618      	mov	r0, r3
10008376:	f7fc fbc3 	bl	10004b00 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
1000837a:	69fb      	ldr	r3, [r7, #28]
1000837c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000837e:	e011      	b.n	100083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        case RCC_SPI1CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008380:	f107 0318 	add.w	r3, r7, #24
10008384:	4618      	mov	r0, r3
10008386:	f7fc fbbb 	bl	10004b00 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
1000838a:	6a3b      	ldr	r3, [r7, #32]
1000838c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000838e:	e009      	b.n	100083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        case RCC_SPI1CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10008390:	4b22      	ldr	r3, [pc, #136]	; (1000841c <HAL_RCCEx_GetPeriphCLKFreq+0xc60>)
10008392:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008394:	e006      	b.n	100083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        case RCC_SPI1CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008396:	f7fc fe6d 	bl	10005074 <RCC_GetCKPERFreq>
1000839a:	6378      	str	r0, [r7, #52]	; 0x34
          break;
1000839c:	e002      	b.n	100083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        default:
          frequency = 0;
1000839e:	2300      	movs	r3, #0
100083a0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100083a2:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SPI1
100083a4:	f000 bcd1 	b.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SPI45:
    {
      clksource = __HAL_RCC_GET_SPI45_SOURCE();
100083a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100083ac:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
100083b0:	f003 0307 	and.w	r3, r3, #7
100083b4:	633b      	str	r3, [r7, #48]	; 0x30
100083b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100083b8:	2b04      	cmp	r3, #4
100083ba:	d831      	bhi.n	10008420 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
100083bc:	a201      	add	r2, pc, #4	; (adr r2, 100083c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc08>)
100083be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100083c2:	bf00      	nop
100083c4:	100083d9 	.word	0x100083d9
100083c8:	100083e1 	.word	0x100083e1
100083cc:	100083f1 	.word	0x100083f1
100083d0:	10008405 	.word	0x10008405
100083d4:	1000840b 	.word	0x1000840b

      switch (clksource)
      {
        case RCC_SPI45CLKSOURCE_PCLK2:
          frequency = HAL_RCC_GetPCLK2Freq();
100083d8:	f7fc fdaf 	bl	10004f3a <HAL_RCC_GetPCLK2Freq>
100083dc:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100083de:	e022      	b.n	10008426 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>

        case RCC_SPI45CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100083e0:	f107 030c 	add.w	r3, r7, #12
100083e4:	4618      	mov	r0, r3
100083e6:	f7fc fc85 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
100083ea:	693b      	ldr	r3, [r7, #16]
100083ec:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100083ee:	e01a      	b.n	10008426 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>

        case RCC_SPI45CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100083f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100083f4:	699b      	ldr	r3, [r3, #24]
100083f6:	f003 0303 	and.w	r3, r3, #3
100083fa:	4a05      	ldr	r2, [pc, #20]	; (10008410 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>)
100083fc:	fa22 f303 	lsr.w	r3, r2, r3
10008400:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008402:	e010      	b.n	10008426 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>

        case RCC_SPI45CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008404:	4b03      	ldr	r3, [pc, #12]	; (10008414 <HAL_RCCEx_GetPeriphCLKFreq+0xc58>)
10008406:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008408:	e00d      	b.n	10008426 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>

        case RCC_SPI45CLKSOURCE_HSE:
          frequency = HSE_VALUE;
1000840a:	4b03      	ldr	r3, [pc, #12]	; (10008418 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
1000840c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000840e:	e00a      	b.n	10008426 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
10008410:	03d09000 	.word	0x03d09000
10008414:	003d0900 	.word	0x003d0900
10008418:	016e3600 	.word	0x016e3600
1000841c:	00bb8000 	.word	0x00bb8000

        default:
          frequency = 0;
10008420:	2300      	movs	r3, #0
10008422:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008424:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_SPI45 */
10008426:	f000 bc90 	b.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_USART6:
    {
      clksource = __HAL_RCC_GET_USART6_SOURCE();
1000842a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000842e:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
10008432:	f003 0307 	and.w	r3, r3, #7
10008436:	633b      	str	r3, [r7, #48]	; 0x30
10008438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000843a:	2b04      	cmp	r3, #4
1000843c:	d828      	bhi.n	10008490 <HAL_RCCEx_GetPeriphCLKFreq+0xcd4>
1000843e:	a201      	add	r2, pc, #4	; (adr r2, 10008444 <HAL_RCCEx_GetPeriphCLKFreq+0xc88>)
10008440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008444:	10008459 	.word	0x10008459
10008448:	10008461 	.word	0x10008461
1000844c:	10008471 	.word	0x10008471
10008450:	10008485 	.word	0x10008485
10008454:	1000848b 	.word	0x1000848b

      switch (clksource)
      {
        case RCC_USART6CLKSOURCE_PCLK2:
          frequency = HAL_RCC_GetPCLK2Freq();
10008458:	f7fc fd6f 	bl	10004f3a <HAL_RCC_GetPCLK2Freq>
1000845c:	6378      	str	r0, [r7, #52]	; 0x34
          break;
1000845e:	e01a      	b.n	10008496 <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        case RCC_USART6CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008460:	f107 030c 	add.w	r3, r7, #12
10008464:	4618      	mov	r0, r3
10008466:	f7fc fc45 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000846a:	693b      	ldr	r3, [r7, #16]
1000846c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000846e:	e012      	b.n	10008496 <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        case RCC_USART6CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008470:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008474:	699b      	ldr	r3, [r3, #24]
10008476:	f003 0303 	and.w	r3, r3, #3
1000847a:	4aa8      	ldr	r2, [pc, #672]	; (1000871c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
1000847c:	fa22 f303 	lsr.w	r3, r2, r3
10008480:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008482:	e008      	b.n	10008496 <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        case RCC_USART6CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008484:	4ba6      	ldr	r3, [pc, #664]	; (10008720 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>)
10008486:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008488:	e005      	b.n	10008496 <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        case RCC_USART6CLKSOURCE_HSE:
          frequency = HSE_VALUE;
1000848a:	4ba6      	ldr	r3, [pc, #664]	; (10008724 <HAL_RCCEx_GetPeriphCLKFreq+0xf68>)
1000848c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000848e:	e002      	b.n	10008496 <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        default:
          frequency = 0;
10008490:	2300      	movs	r3, #0
10008492:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008494:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_USART6
10008496:	f000 bc58 	b.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_LPTIM23:
    {
      clksource = __HAL_RCC_GET_LPTIM23_SOURCE();
1000849a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000849e:	f8d3 3930 	ldr.w	r3, [r3, #2352]	; 0x930
100084a2:	f003 0307 	and.w	r3, r3, #7
100084a6:	633b      	str	r3, [r7, #48]	; 0x30
100084a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100084aa:	2b04      	cmp	r3, #4
100084ac:	d824      	bhi.n	100084f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>
100084ae:	a201      	add	r2, pc, #4	; (adr r2, 100084b4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>)
100084b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100084b4:	100084c9 	.word	0x100084c9
100084b8:	100084d1 	.word	0x100084d1
100084bc:	100084e1 	.word	0x100084e1
100084c0:	100084e9 	.word	0x100084e9
100084c4:	100084f1 	.word	0x100084f1

      switch (clksource)
      {
        case RCC_LPTIM23CLKSOURCE_PCLK3:
          frequency = HAL_RCC_GetPCLK3Freq();
100084c8:	f7fc fd52 	bl	10004f70 <HAL_RCC_GetPCLK3Freq>
100084cc:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100084ce:	e016      	b.n	100084fe <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        case RCC_LPTIM23CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100084d0:	f107 030c 	add.w	r3, r7, #12
100084d4:	4618      	mov	r0, r3
100084d6:	f7fc fc0d 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
100084da:	693b      	ldr	r3, [r7, #16]
100084dc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100084de:	e00e      	b.n	100084fe <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        case RCC_LPTIM23CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
100084e0:	f7fc fdc8 	bl	10005074 <RCC_GetCKPERFreq>
100084e4:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100084e6:	e00a      	b.n	100084fe <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        case RCC_LPTIM23CLKSOURCE_LSE:
          frequency = LSE_VALUE;
100084e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
100084ec:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100084ee:	e006      	b.n	100084fe <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        case RCC_LPTIM23CLKSOURCE_LSI:
          frequency = LSI_VALUE;
100084f0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
100084f4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100084f6:	e002      	b.n	100084fe <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        default:
          frequency = 0;
100084f8:	2300      	movs	r3, #0
100084fa:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100084fc:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_LPTIM23 */
100084fe:	f000 bc24 	b.w	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_LPTIM45:
    {
      clksource = __HAL_RCC_GET_LPTIM45_SOURCE();
10008502:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008506:	f8d3 392c 	ldr.w	r3, [r3, #2348]	; 0x92c
1000850a:	f003 0307 	and.w	r3, r3, #7
1000850e:	633b      	str	r3, [r7, #48]	; 0x30
10008510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008512:	2b05      	cmp	r3, #5
10008514:	d82e      	bhi.n	10008574 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>
10008516:	a201      	add	r2, pc, #4	; (adr r2, 1000851c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
10008518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000851c:	10008535 	.word	0x10008535
10008520:	1000853d 	.word	0x1000853d
10008524:	1000854d 	.word	0x1000854d
10008528:	1000855d 	.word	0x1000855d
1000852c:	10008565 	.word	0x10008565
10008530:	1000856d 	.word	0x1000856d

      switch (clksource)
      {
        case RCC_LPTIM45CLKSOURCE_PCLK3:
          frequency = HAL_RCC_GetPCLK3Freq();
10008534:	f7fc fd1c 	bl	10004f70 <HAL_RCC_GetPCLK3Freq>
10008538:	6378      	str	r0, [r7, #52]	; 0x34
          break;
1000853a:	e01e      	b.n	1000857a <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000853c:	f107 030c 	add.w	r3, r7, #12
10008540:	4618      	mov	r0, r3
10008542:	f7fc fbd7 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10008546:	68fb      	ldr	r3, [r7, #12]
10008548:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000854a:	e016      	b.n	1000857a <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000854c:	f107 0318 	add.w	r3, r7, #24
10008550:	4618      	mov	r0, r3
10008552:	f7fc fad5 	bl	10004b00 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008556:	69fb      	ldr	r3, [r7, #28]
10008558:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000855a:	e00e      	b.n	1000857a <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_LSE:
          frequency = LSE_VALUE;
1000855c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10008560:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008562:	e00a      	b.n	1000857a <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_LSI:
          frequency = LSI_VALUE;
10008564:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10008568:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000856a:	e006      	b.n	1000857a <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
1000856c:	f7fc fd82 	bl	10005074 <RCC_GetCKPERFreq>
10008570:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008572:	e002      	b.n	1000857a <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        default:
          frequency = 0;
10008574:	2300      	movs	r3, #0
10008576:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008578:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_LPTIM45 */
1000857a:	e3e6      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SAI4:
    {
      clksource = __HAL_RCC_GET_SAI4_SOURCE();
1000857c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008580:	f8d3 38d4 	ldr.w	r3, [r3, #2260]	; 0x8d4
10008584:	f003 0307 	and.w	r3, r3, #7
10008588:	633b      	str	r3, [r7, #48]	; 0x30
1000858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000858c:	2b04      	cmp	r3, #4
1000858e:	d82c      	bhi.n	100085ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
10008590:	a201      	add	r2, pc, #4	; (adr r2, 10008598 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>)
10008592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008596:	bf00      	nop
10008598:	100085ad 	.word	0x100085ad
1000859c:	100085bd 	.word	0x100085bd
100085a0:	100085dd 	.word	0x100085dd
100085a4:	100085e3 	.word	0x100085e3
100085a8:	100085cd 	.word	0x100085cd

      switch (clksource)
      {
        case RCC_SAI4CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100085ac:	f107 030c 	add.w	r3, r7, #12
100085b0:	4618      	mov	r0, r3
100085b2:	f7fc fb9f 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
100085b6:	693b      	ldr	r3, [r7, #16]
100085b8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100085ba:	e019      	b.n	100085f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        case RCC_SAI4CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100085bc:	f107 0318 	add.w	r3, r7, #24
100085c0:	4618      	mov	r0, r3
100085c2:	f7fc fa9d 	bl	10004b00 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
100085c6:	69fb      	ldr	r3, [r7, #28]
100085c8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100085ca:	e011      	b.n	100085f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        case RCC_SAI4CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100085cc:	f107 0318 	add.w	r3, r7, #24
100085d0:	4618      	mov	r0, r3
100085d2:	f7fc fa95 	bl	10004b00 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
100085d6:	6a3b      	ldr	r3, [r7, #32]
100085d8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100085da:	e009      	b.n	100085f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        case RCC_SAI4CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
100085dc:	4b52      	ldr	r3, [pc, #328]	; (10008728 <HAL_RCCEx_GetPeriphCLKFreq+0xf6c>)
100085de:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100085e0:	e006      	b.n	100085f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        case RCC_SAI4CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
100085e2:	f7fc fd47 	bl	10005074 <RCC_GetCKPERFreq>
100085e6:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100085e8:	e002      	b.n	100085f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        default:
          frequency = 0;
100085ea:	2300      	movs	r3, #0
100085ec:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100085ee:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SAI4
100085f0:	e3ab      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_TEMP:
    {
      frequency = LSE_VALUE;
100085f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
100085f6:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_TEMP
100085f8:	e3a7      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


#if defined(DSI)
    case RCC_PERIPHCLK_DSI:
    {
      clksource = __HAL_RCC_GET_DSI_SOURCE();
100085fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100085fe:	f8d3 3924 	ldr.w	r3, [r3, #2340]	; 0x924
10008602:	f003 0301 	and.w	r3, r3, #1
10008606:	633b      	str	r3, [r7, #48]	; 0x30
10008608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000860a:	2b00      	cmp	r3, #0
1000860c:	d003      	beq.n	10008616 <HAL_RCCEx_GetPeriphCLKFreq+0xe5a>
1000860e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008610:	2b01      	cmp	r3, #1
10008612:	d003      	beq.n	1000861c <HAL_RCCEx_GetPeriphCLKFreq+0xe60>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
          frequency = pll4_clocks.PLL4_P_Frequency;
          break;
      }
    }
    break;//RCC_PERIPHCLK_DSI
10008614:	e399      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
          frequency = 0;
10008616:	2300      	movs	r3, #0
10008618:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000861a:	e007      	b.n	1000862c <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000861c:	f107 030c 	add.w	r3, r7, #12
10008620:	4618      	mov	r0, r3
10008622:	f7fc fb67 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10008626:	68fb      	ldr	r3, [r7, #12]
10008628:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000862a:	bf00      	nop
    break;//RCC_PERIPHCLK_DSI
1000862c:	e38d      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
#endif /*DSI*/

    case RCC_PERIPHCLK_LTDC:
    {
      HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000862e:	f107 030c 	add.w	r3, r7, #12
10008632:	4618      	mov	r0, r3
10008634:	f7fc fb5e 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
      frequency = pll4_clocks.PLL4_Q_Frequency;
10008638:	693b      	ldr	r3, [r7, #16]
1000863a:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_LTDC
1000863c:	e385      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_USBPHY:
    {
      clksource = __HAL_RCC_GET_USBPHY_SOURCE();
1000863e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008642:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
10008646:	f003 0303 	and.w	r3, r3, #3
1000864a:	633b      	str	r3, [r7, #48]	; 0x30
1000864c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000864e:	2b02      	cmp	r3, #2
10008650:	d014      	beq.n	1000867c <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
10008652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008654:	2b02      	cmp	r3, #2
10008656:	d814      	bhi.n	10008682 <HAL_RCCEx_GetPeriphCLKFreq+0xec6>
10008658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000865a:	2b00      	cmp	r3, #0
1000865c:	d003      	beq.n	10008666 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
1000865e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008660:	2b01      	cmp	r3, #1
10008662:	d003      	beq.n	1000866c <HAL_RCCEx_GetPeriphCLKFreq+0xeb0>
10008664:	e00d      	b.n	10008682 <HAL_RCCEx_GetPeriphCLKFreq+0xec6>

      switch (clksource)
      {
        case RCC_USBPHYCLKSOURCE_HSE:
          frequency = HSE_VALUE;
10008666:	4b2f      	ldr	r3, [pc, #188]	; (10008724 <HAL_RCCEx_GetPeriphCLKFreq+0xf68>)
10008668:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000866a:	e00d      	b.n	10008688 <HAL_RCCEx_GetPeriphCLKFreq+0xecc>

        case RCC_USBPHYCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000866c:	f107 030c 	add.w	r3, r7, #12
10008670:	4618      	mov	r0, r3
10008672:	f7fc fb3f 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10008676:	697b      	ldr	r3, [r7, #20]
10008678:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000867a:	e005      	b.n	10008688 <HAL_RCCEx_GetPeriphCLKFreq+0xecc>

        case RCC_USBPHYCLKSOURCE_HSE2:
          frequency = (HSE_VALUE / 2UL);
1000867c:	4b2b      	ldr	r3, [pc, #172]	; (1000872c <HAL_RCCEx_GetPeriphCLKFreq+0xf70>)
1000867e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008680:	e002      	b.n	10008688 <HAL_RCCEx_GetPeriphCLKFreq+0xecc>

        default:
          frequency = 0;
10008682:	2300      	movs	r3, #0
10008684:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008686:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_USBPHY
10008688:	e35f      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_IWDG2:
    {
      frequency = LSI_VALUE;
1000868a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
1000868e:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_IWDG2
10008690:	e35b      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_DDRPHYC:
    {
      HAL_RCC_GetPLL2ClockFreq(&pll2_clocks);
10008692:	f107 0324 	add.w	r3, r7, #36	; 0x24
10008696:	4618      	mov	r0, r3
10008698:	f7fc f946 	bl	10004928 <HAL_RCC_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
1000869c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000869e:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_DDRPHYC
100086a0:	e353      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_RTC:
    {
      clksource = __HAL_RCC_GET_RTC_SOURCE();
100086a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100086a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100086aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
100086ae:	633b      	str	r3, [r7, #48]	; 0x30
100086b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100086b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
100086b6:	d020      	beq.n	100086fa <HAL_RCCEx_GetPeriphCLKFreq+0xf3e>
100086b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100086ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
100086be:	f200 8339 	bhi.w	10008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1578>
100086c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100086c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
100086c8:	d013      	beq.n	100086f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
100086ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100086cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
100086d0:	f200 8330 	bhi.w	10008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1578>
100086d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100086d6:	2b00      	cmp	r3, #0
100086d8:	d004      	beq.n	100086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
100086da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100086dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
100086e0:	d003      	beq.n	100086ea <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        case RCC_RTCCLKSOURCE_HSE_DIV:
          frequency = (HSE_VALUE / __HAL_RCC_GET_RTC_HSEDIV());
          break;
      }
    }
    break;//RCC_PERIPHCLK_RTC
100086e2:	e327      	b.n	10008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1578>
          frequency = 0;
100086e4:	2300      	movs	r3, #0
100086e6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100086e8:	e012      	b.n	10008710 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>
          frequency = LSE_VALUE;
100086ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
100086ee:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100086f0:	e00e      	b.n	10008710 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>
          frequency = LSI_VALUE;
100086f2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
100086f6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100086f8:	e00a      	b.n	10008710 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>
          frequency = (HSE_VALUE / __HAL_RCC_GET_RTC_HSEDIV());
100086fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100086fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10008700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10008704:	3301      	adds	r3, #1
10008706:	4a07      	ldr	r2, [pc, #28]	; (10008724 <HAL_RCCEx_GetPeriphCLKFreq+0xf68>)
10008708:	fbb2 f3f3 	udiv	r3, r2, r3
1000870c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000870e:	bf00      	nop
    break;//RCC_PERIPHCLK_RTC
10008710:	e310      	b.n	10008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1578>


    case RCC_PERIPHCLK_IWDG1:
    {
      frequency = LSI_VALUE;
10008712:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10008716:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_IWDG1
10008718:	e317      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000871a:	bf00      	nop
1000871c:	03d09000 	.word	0x03d09000
10008720:	003d0900 	.word	0x003d0900
10008724:	016e3600 	.word	0x016e3600
10008728:	00bb8000 	.word	0x00bb8000
1000872c:	00b71b00 	.word	0x00b71b00


    case RCC_PERIPHCLK_I2C46:
    {
      clksource = __HAL_RCC_GET_I2C46_SOURCE();
10008730:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008734:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10008738:	f003 0307 	and.w	r3, r3, #7
1000873c:	633b      	str	r3, [r7, #48]	; 0x30
1000873e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008740:	2b03      	cmp	r3, #3
10008742:	d824      	bhi.n	1000878e <HAL_RCCEx_GetPeriphCLKFreq+0xfd2>
10008744:	a201      	add	r2, pc, #4	; (adr r2, 1000874c <HAL_RCCEx_GetPeriphCLKFreq+0xf90>)
10008746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000874a:	bf00      	nop
1000874c:	1000875d 	.word	0x1000875d
10008750:	10008765 	.word	0x10008765
10008754:	10008775 	.word	0x10008775
10008758:	10008789 	.word	0x10008789

      switch (clksource)
      {
        case RCC_I2C46CLKSOURCE_PCLK5:
          frequency = HAL_RCC_GetPCLK5Freq();
1000875c:	f7fc fc23 	bl	10004fa6 <HAL_RCC_GetPCLK5Freq>
10008760:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008762:	e017      	b.n	10008794 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>

        case RCC_I2C46CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008764:	f107 0318 	add.w	r3, r7, #24
10008768:	4618      	mov	r0, r3
1000876a:	f7fc f9c9 	bl	10004b00 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
1000876e:	69fb      	ldr	r3, [r7, #28]
10008770:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008772:	e00f      	b.n	10008794 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>

        case RCC_I2C46CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008774:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008778:	699b      	ldr	r3, [r3, #24]
1000877a:	f003 0303 	and.w	r3, r3, #3
1000877e:	4ab3      	ldr	r2, [pc, #716]	; (10008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1290>)
10008780:	fa22 f303 	lsr.w	r3, r2, r3
10008784:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008786:	e005      	b.n	10008794 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>

        case RCC_I2C46CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008788:	4bb1      	ldr	r3, [pc, #708]	; (10008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
1000878a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000878c:	e002      	b.n	10008794 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>

        default:
          frequency = 0;
1000878e:	2300      	movs	r3, #0
10008790:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008792:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_I2C46 */
10008794:	e2d9      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SPI6:
    {
      clksource = __HAL_RCC_GET_SPI6_SOURCE();
10008796:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000879a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
1000879e:	f003 0307 	and.w	r3, r3, #7
100087a2:	633b      	str	r3, [r7, #48]	; 0x30
100087a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100087a6:	2b05      	cmp	r3, #5
100087a8:	d832      	bhi.n	10008810 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
100087aa:	a201      	add	r2, pc, #4	; (adr r2, 100087b0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
100087ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100087b0:	100087c9 	.word	0x100087c9
100087b4:	100087d1 	.word	0x100087d1
100087b8:	100087e1 	.word	0x100087e1
100087bc:	100087f5 	.word	0x100087f5
100087c0:	100087fb 	.word	0x100087fb
100087c4:	10008801 	.word	0x10008801

      switch (clksource)
      {
        case RCC_SPI6CLKSOURCE_PCLK5:
          frequency = HAL_RCC_GetPCLK5Freq();
100087c8:	f7fc fbed 	bl	10004fa6 <HAL_RCC_GetPCLK5Freq>
100087cc:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100087ce:	e022      	b.n	10008816 <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100087d0:	f107 030c 	add.w	r3, r7, #12
100087d4:	4618      	mov	r0, r3
100087d6:	f7fc fa8d 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
100087da:	693b      	ldr	r3, [r7, #16]
100087dc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100087de:	e01a      	b.n	10008816 <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100087e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100087e4:	699b      	ldr	r3, [r3, #24]
100087e6:	f003 0303 	and.w	r3, r3, #3
100087ea:	4a98      	ldr	r2, [pc, #608]	; (10008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1290>)
100087ec:	fa22 f303 	lsr.w	r3, r2, r3
100087f0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100087f2:	e010      	b.n	10008816 <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_CSI:
          frequency = CSI_VALUE;
100087f4:	4b96      	ldr	r3, [pc, #600]	; (10008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
100087f6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100087f8:	e00d      	b.n	10008816 <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_HSE:
          frequency = HSE_VALUE;
100087fa:	4b96      	ldr	r3, [pc, #600]	; (10008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
100087fc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100087fe:	e00a      	b.n	10008816 <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008800:	f107 0318 	add.w	r3, r7, #24
10008804:	4618      	mov	r0, r3
10008806:	f7fc f97b 	bl	10004b00 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
1000880a:	69fb      	ldr	r3, [r7, #28]
1000880c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000880e:	e002      	b.n	10008816 <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        default:
          frequency = 0;
10008810:	2300      	movs	r3, #0
10008812:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008814:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SPI6
10008816:	e298      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_USART1:
    {
      clksource = __HAL_RCC_GET_USART1_SOURCE();
10008818:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000881c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10008820:	f003 0307 	and.w	r3, r3, #7
10008824:	633b      	str	r3, [r7, #48]	; 0x30
10008826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008828:	2b05      	cmp	r3, #5
1000882a:	d833      	bhi.n	10008894 <HAL_RCCEx_GetPeriphCLKFreq+0x10d8>
1000882c:	a201      	add	r2, pc, #4	; (adr r2, 10008834 <HAL_RCCEx_GetPeriphCLKFreq+0x1078>)
1000882e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008832:	bf00      	nop
10008834:	1000884d 	.word	0x1000884d
10008838:	10008855 	.word	0x10008855
1000883c:	10008865 	.word	0x10008865
10008840:	10008879 	.word	0x10008879
10008844:	1000887f 	.word	0x1000887f
10008848:	1000888f 	.word	0x1000888f

      switch (clksource)
      {
        case RCC_USART1CLKSOURCE_PCLK5:
          frequency = HAL_RCC_GetPCLK5Freq();
1000884c:	f7fc fbab 	bl	10004fa6 <HAL_RCC_GetPCLK5Freq>
10008850:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008852:	e022      	b.n	1000889a <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008854:	f107 0318 	add.w	r3, r7, #24
10008858:	4618      	mov	r0, r3
1000885a:	f7fc f951 	bl	10004b00 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
1000885e:	69fb      	ldr	r3, [r7, #28]
10008860:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008862:	e01a      	b.n	1000889a <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008864:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008868:	699b      	ldr	r3, [r3, #24]
1000886a:	f003 0303 	and.w	r3, r3, #3
1000886e:	4a77      	ldr	r2, [pc, #476]	; (10008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1290>)
10008870:	fa22 f303 	lsr.w	r3, r2, r3
10008874:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008876:	e010      	b.n	1000889a <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008878:	4b75      	ldr	r3, [pc, #468]	; (10008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
1000887a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000887c:	e00d      	b.n	1000889a <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000887e:	f107 030c 	add.w	r3, r7, #12
10008882:	4618      	mov	r0, r3
10008884:	f7fc fa36 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008888:	693b      	ldr	r3, [r7, #16]
1000888a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000888c:	e005      	b.n	1000889a <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_HSE:
          frequency = HSE_VALUE;
1000888e:	4b71      	ldr	r3, [pc, #452]	; (10008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
10008890:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008892:	e002      	b.n	1000889a <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        default:
          frequency = 0;
10008894:	2300      	movs	r3, #0
10008896:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008898:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_USART1
1000889a:	e256      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_STGEN:
    {
      clksource = __HAL_RCC_GET_STGEN_SOURCE();
1000889c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100088a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
100088a4:	f003 0303 	and.w	r3, r3, #3
100088a8:	633b      	str	r3, [r7, #48]	; 0x30
100088aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100088ac:	2b00      	cmp	r3, #0
100088ae:	d003      	beq.n	100088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
100088b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100088b2:	2b01      	cmp	r3, #1
100088b4:	d00a      	beq.n	100088cc <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
100088b6:	e00c      	b.n	100088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>

      switch (clksource)
      {
        case RCC_STGENCLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100088b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100088bc:	699b      	ldr	r3, [r3, #24]
100088be:	f003 0303 	and.w	r3, r3, #3
100088c2:	4a62      	ldr	r2, [pc, #392]	; (10008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1290>)
100088c4:	fa22 f303 	lsr.w	r3, r2, r3
100088c8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100088ca:	e005      	b.n	100088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>

        case RCC_STGENCLKSOURCE_HSE:
          frequency = HSE_VALUE;
100088cc:	4b61      	ldr	r3, [pc, #388]	; (10008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
100088ce:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100088d0:	e002      	b.n	100088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>

        default:
          frequency = 0;
100088d2:	2300      	movs	r3, #0
100088d4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100088d6:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_STGEN
100088d8:	e237      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_QSPI:
    {
      clksource = __HAL_RCC_GET_QSPI_SOURCE();
100088da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100088de:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
100088e2:	f003 0303 	and.w	r3, r3, #3
100088e6:	633b      	str	r3, [r7, #48]	; 0x30
100088e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100088ea:	2b03      	cmp	r3, #3
100088ec:	d822      	bhi.n	10008934 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
100088ee:	a201      	add	r2, pc, #4	; (adr r2, 100088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
100088f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100088f4:	10008905 	.word	0x10008905
100088f8:	1000890d 	.word	0x1000890d
100088fc:	1000891d 	.word	0x1000891d
10008900:	1000892d 	.word	0x1000892d

      switch (clksource)
      {
        case RCC_QSPICLKSOURCE_ACLK:
          frequency = HAL_RCC_GetACLKFreq();
10008904:	f7fc fb69 	bl	10004fda <HAL_RCC_GetACLKFreq>
10008908:	6378      	str	r0, [r7, #52]	; 0x34
          break;
1000890a:	e016      	b.n	1000893a <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

        case RCC_QSPICLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000890c:	f107 0318 	add.w	r3, r7, #24
10008910:	4618      	mov	r0, r3
10008912:	f7fc f8f5 	bl	10004b00 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10008916:	6a3b      	ldr	r3, [r7, #32]
10008918:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000891a:	e00e      	b.n	1000893a <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

        case RCC_QSPICLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000891c:	f107 030c 	add.w	r3, r7, #12
10008920:	4618      	mov	r0, r3
10008922:	f7fc f9e7 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10008926:	68fb      	ldr	r3, [r7, #12]
10008928:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000892a:	e006      	b.n	1000893a <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

        case RCC_QSPICLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
1000892c:	f7fc fba2 	bl	10005074 <RCC_GetCKPERFreq>
10008930:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008932:	e002      	b.n	1000893a <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

        default:
          frequency = 0;
10008934:	2300      	movs	r3, #0
10008936:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008938:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_QSPI
1000893a:	e206      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_ETH:
    {
      clksource = __HAL_RCC_GET_ETH_SOURCE();
1000893c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008940:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
10008944:	f003 0303 	and.w	r3, r3, #3
10008948:	633b      	str	r3, [r7, #48]	; 0x30
1000894a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000894c:	2b00      	cmp	r3, #0
1000894e:	d003      	beq.n	10008958 <HAL_RCCEx_GetPeriphCLKFreq+0x119c>
10008950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008952:	2b01      	cmp	r3, #1
10008954:	d008      	beq.n	10008968 <HAL_RCCEx_GetPeriphCLKFreq+0x11ac>
10008956:	e00f      	b.n	10008978 <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>

      switch (clksource)
      {
        case RCC_ETHCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008958:	f107 030c 	add.w	r3, r7, #12
1000895c:	4618      	mov	r0, r3
1000895e:	f7fc f9c9 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10008962:	68fb      	ldr	r3, [r7, #12]
10008964:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008966:	e00a      	b.n	1000897e <HAL_RCCEx_GetPeriphCLKFreq+0x11c2>

        case RCC_ETHCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008968:	f107 0318 	add.w	r3, r7, #24
1000896c:	4618      	mov	r0, r3
1000896e:	f7fc f8c7 	bl	10004b00 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008972:	69fb      	ldr	r3, [r7, #28]
10008974:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008976:	e002      	b.n	1000897e <HAL_RCCEx_GetPeriphCLKFreq+0x11c2>

        default:
          frequency = 0;
10008978:	2300      	movs	r3, #0
1000897a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000897c:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_ETH
1000897e:	e1e4      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_FMC:
    {
      clksource = __HAL_RCC_GET_FMC_SOURCE();
10008980:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008984:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
10008988:	f003 0303 	and.w	r3, r3, #3
1000898c:	633b      	str	r3, [r7, #48]	; 0x30
1000898e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008990:	2b03      	cmp	r3, #3
10008992:	f200 81d1 	bhi.w	10008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x157c>
10008996:	a201      	add	r2, pc, #4	; (adr r2, 1000899c <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
10008998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000899c:	100089ad 	.word	0x100089ad
100089a0:	100089b5 	.word	0x100089b5
100089a4:	100089c5 	.word	0x100089c5
100089a8:	100089d5 	.word	0x100089d5

      switch (clksource)
      {
        case RCC_FMCCLKSOURCE_ACLK:
          frequency = HAL_RCC_GetACLKFreq();
100089ac:	f7fc fb15 	bl	10004fda <HAL_RCC_GetACLKFreq>
100089b0:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100089b2:	e013      	b.n	100089dc <HAL_RCCEx_GetPeriphCLKFreq+0x1220>

        case RCC_FMCCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100089b4:	f107 0318 	add.w	r3, r7, #24
100089b8:	4618      	mov	r0, r3
100089ba:	f7fc f8a1 	bl	10004b00 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
100089be:	6a3b      	ldr	r3, [r7, #32]
100089c0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100089c2:	e00b      	b.n	100089dc <HAL_RCCEx_GetPeriphCLKFreq+0x1220>

        case RCC_FMCCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100089c4:	f107 030c 	add.w	r3, r7, #12
100089c8:	4618      	mov	r0, r3
100089ca:	f7fc f993 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
100089ce:	68fb      	ldr	r3, [r7, #12]
100089d0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100089d2:	e003      	b.n	100089dc <HAL_RCCEx_GetPeriphCLKFreq+0x1220>

        case RCC_FMCCLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
100089d4:	f7fc fb4e 	bl	10005074 <RCC_GetCKPERFreq>
100089d8:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100089da:	bf00      	nop

      }
    }
    break;//RCC_PERIPHCLK_FMC
100089dc:	e1ac      	b.n	10008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x157c>


    case RCC_PERIPHCLK_GPU:
    {
      HAL_RCC_GetPLL2ClockFreq(&pll2_clocks);
100089de:	f107 0324 	add.w	r3, r7, #36	; 0x24
100089e2:	4618      	mov	r0, r3
100089e4:	f7fb ffa0 	bl	10004928 <HAL_RCC_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_Q_Frequency;
100089e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
100089ea:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_GPU
100089ec:	e1ad      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_USBO:
    {
      clksource = __HAL_RCC_GET_USBO_SOURCE();
100089ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100089f2:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
100089f6:	f003 0310 	and.w	r3, r3, #16
100089fa:	633b      	str	r3, [r7, #48]	; 0x30
100089fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100089fe:	2b00      	cmp	r3, #0
10008a00:	d003      	beq.n	10008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x124e>
10008a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008a04:	2b10      	cmp	r3, #16
10008a06:	d008      	beq.n	10008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
        case RCC_USBOCLKSOURCE_PHY:
          frequency = USB_PHY_VALUE;
          break;
      }
    }
    break;//RCC_PERIPHCLK_USBO
10008a08:	e19f      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008a0a:	f107 030c 	add.w	r3, r7, #12
10008a0e:	4618      	mov	r0, r3
10008a10:	f7fc f970 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10008a14:	697b      	ldr	r3, [r7, #20]
10008a16:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a18:	e002      	b.n	10008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>
          frequency = USB_PHY_VALUE;
10008a1a:	4b0f      	ldr	r3, [pc, #60]	; (10008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
10008a1c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a1e:	bf00      	nop
    break;//RCC_PERIPHCLK_USBO
10008a20:	e193      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SDMMC3:
    {
      clksource = __HAL_RCC_GET_SDMMC3_SOURCE();
10008a22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008a26:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
10008a2a:	f003 0307 	and.w	r3, r3, #7
10008a2e:	633b      	str	r3, [r7, #48]	; 0x30
10008a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008a32:	2b03      	cmp	r3, #3
10008a34:	d830      	bhi.n	10008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
10008a36:	a201      	add	r2, pc, #4	; (adr r2, 10008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
10008a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008a3c:	10008a5d 	.word	0x10008a5d
10008a40:	10008a65 	.word	0x10008a65
10008a44:	10008a75 	.word	0x10008a75
10008a48:	10008a85 	.word	0x10008a85
10008a4c:	03d09000 	.word	0x03d09000
10008a50:	003d0900 	.word	0x003d0900
10008a54:	016e3600 	.word	0x016e3600
10008a58:	02dc6c00 	.word	0x02dc6c00

      switch (clksource)
      {
        case RCC_SDMMC3CLKSOURCE_HCLK2:
          frequency = HAL_RCC_GetHCLK2Freq();
10008a5c:	f7fc fae1 	bl	10005022 <HAL_RCC_GetHCLK2Freq>
10008a60:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008a62:	e01c      	b.n	10008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>

        case RCC_SDMMC3CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008a64:	f107 0318 	add.w	r3, r7, #24
10008a68:	4618      	mov	r0, r3
10008a6a:	f7fc f849 	bl	10004b00 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10008a6e:	6a3b      	ldr	r3, [r7, #32]
10008a70:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a72:	e014      	b.n	10008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>

        case RCC_SDMMC3CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008a74:	f107 030c 	add.w	r3, r7, #12
10008a78:	4618      	mov	r0, r3
10008a7a:	f7fc f93b 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10008a7e:	68fb      	ldr	r3, [r7, #12]
10008a80:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a82:	e00c      	b.n	10008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>

        case RCC_SDMMC3CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008a84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008a88:	699b      	ldr	r3, [r3, #24]
10008a8a:	f003 0303 	and.w	r3, r3, #3
10008a8e:	4ab1      	ldr	r2, [pc, #708]	; (10008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
10008a90:	fa22 f303 	lsr.w	r3, r2, r3
10008a94:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a96:	e002      	b.n	10008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>

        default:
          frequency = 0;
10008a98:	2300      	movs	r3, #0
10008a9a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a9c:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SDMMC3
10008a9e:	e154      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_ADC:
    {
      clksource = __HAL_RCC_GET_ADC_SOURCE();
10008aa0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008aa4:	f8d3 3928 	ldr.w	r3, [r3, #2344]	; 0x928
10008aa8:	f003 0303 	and.w	r3, r3, #3
10008aac:	633b      	str	r3, [r7, #48]	; 0x30
10008aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008ab0:	2b02      	cmp	r3, #2
10008ab2:	d015      	beq.n	10008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1324>
10008ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008ab6:	2b02      	cmp	r3, #2
10008ab8:	d81a      	bhi.n	10008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
10008aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008abc:	2b00      	cmp	r3, #0
10008abe:	d003      	beq.n	10008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x130c>
10008ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008ac2:	2b01      	cmp	r3, #1
10008ac4:	d008      	beq.n	10008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x131c>
10008ac6:	e013      	b.n	10008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>

      switch (clksource)
      {
        case RCC_ADCCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008ac8:	f107 030c 	add.w	r3, r7, #12
10008acc:	4618      	mov	r0, r3
10008ace:	f7fc f911 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10008ad2:	697b      	ldr	r3, [r7, #20]
10008ad4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008ad6:	e00e      	b.n	10008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x133a>

        case RCC_ADCCLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008ad8:	f7fc facc 	bl	10005074 <RCC_GetCKPERFreq>
10008adc:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008ade:	e00a      	b.n	10008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x133a>

        case RCC_ADCCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008ae0:	f107 0318 	add.w	r3, r7, #24
10008ae4:	4618      	mov	r0, r3
10008ae6:	f7fc f80b 	bl	10004b00 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008aea:	69fb      	ldr	r3, [r7, #28]
10008aec:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008aee:	e002      	b.n	10008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x133a>

        default:
          frequency = 0;
10008af0:	2300      	movs	r3, #0
10008af2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008af4:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_ADC */
10008af6:	e128      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_RNG2:
    {
      clksource = __HAL_RCC_GET_RNG2_SOURCE();
10008af8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008afc:	f8d3 3920 	ldr.w	r3, [r3, #2336]	; 0x920
10008b00:	f003 0303 	and.w	r3, r3, #3
10008b04:	633b      	str	r3, [r7, #48]	; 0x30
10008b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008b08:	2b03      	cmp	r3, #3
10008b0a:	f200 8117 	bhi.w	10008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
10008b0e:	a201      	add	r2, pc, #4	; (adr r2, 10008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>)
10008b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008b14:	10008b25 	.word	0x10008b25
10008b18:	10008b2b 	.word	0x10008b2b
10008b1c:	10008b3b 	.word	0x10008b3b
10008b20:	10008b43 	.word	0x10008b43

      switch (clksource)
      {
        case RCC_RNG2CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008b24:	4b8c      	ldr	r3, [pc, #560]	; (10008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
10008b26:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b28:	e00f      	b.n	10008b4a <HAL_RCCEx_GetPeriphCLKFreq+0x138e>

        case RCC_RNG2CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008b2a:	f107 030c 	add.w	r3, r7, #12
10008b2e:	4618      	mov	r0, r3
10008b30:	f7fc f8e0 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10008b34:	697b      	ldr	r3, [r7, #20]
10008b36:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b38:	e007      	b.n	10008b4a <HAL_RCCEx_GetPeriphCLKFreq+0x138e>

        case RCC_RNG2CLKSOURCE_LSE:
          frequency = LSE_VALUE;
10008b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10008b3e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b40:	e003      	b.n	10008b4a <HAL_RCCEx_GetPeriphCLKFreq+0x138e>

        case RCC_RNG2CLKSOURCE_LSI:
          frequency = LSI_VALUE;
10008b42:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10008b46:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b48:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_RNG2
10008b4a:	e0f7      	b.n	10008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1580>


    case RCC_PERIPHCLK_RNG1:
    {
      clksource = __HAL_RCC_GET_RNG1_SOURCE();
10008b4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008b50:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
10008b54:	f003 0303 	and.w	r3, r3, #3
10008b58:	633b      	str	r3, [r7, #48]	; 0x30
10008b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008b5c:	2b03      	cmp	r3, #3
10008b5e:	f200 80ef 	bhi.w	10008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1584>
10008b62:	a201      	add	r2, pc, #4	; (adr r2, 10008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
10008b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008b68:	10008b79 	.word	0x10008b79
10008b6c:	10008b7f 	.word	0x10008b7f
10008b70:	10008b8f 	.word	0x10008b8f
10008b74:	10008b97 	.word	0x10008b97

      switch (clksource)
      {
        case RCC_RNG1CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008b78:	4b77      	ldr	r3, [pc, #476]	; (10008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
10008b7a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b7c:	e00f      	b.n	10008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>

        case RCC_RNG1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008b7e:	f107 030c 	add.w	r3, r7, #12
10008b82:	4618      	mov	r0, r3
10008b84:	f7fc f8b6 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10008b88:	697b      	ldr	r3, [r7, #20]
10008b8a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b8c:	e007      	b.n	10008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>

        case RCC_RNG1CLKSOURCE_LSE:
          frequency = LSE_VALUE;
10008b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10008b92:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b94:	e003      	b.n	10008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>

        case RCC_RNG1CLKSOURCE_LSI:
          frequency = LSI_VALUE;
10008b96:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10008b9a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b9c:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_RNG1
10008b9e:	e0cf      	b.n	10008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1584>

    case RCC_PERIPHCLK_SDMMC12:
    {
      clksource = __HAL_RCC_GET_SDMMC12_SOURCE();
10008ba0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008ba4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
10008ba8:	f003 0307 	and.w	r3, r3, #7
10008bac:	633b      	str	r3, [r7, #48]	; 0x30
10008bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008bb0:	2b03      	cmp	r3, #3
10008bb2:	d829      	bhi.n	10008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x144c>
10008bb4:	a201      	add	r2, pc, #4	; (adr r2, 10008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1400>)
10008bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008bba:	bf00      	nop
10008bbc:	10008bcd 	.word	0x10008bcd
10008bc0:	10008bd5 	.word	0x10008bd5
10008bc4:	10008be5 	.word	0x10008be5
10008bc8:	10008bf5 	.word	0x10008bf5

      switch (clksource)
      {
        case RCC_SDMMC12CLKSOURCE_HCLK6:
          frequency = HAL_RCC_GetHCLK6Freq();
10008bcc:	f7fc fa22 	bl	10005014 <HAL_RCC_GetHCLK6Freq>
10008bd0:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008bd2:	e01c      	b.n	10008c0e <HAL_RCCEx_GetPeriphCLKFreq+0x1452>

        case RCC_SDMMC12CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008bd4:	f107 0318 	add.w	r3, r7, #24
10008bd8:	4618      	mov	r0, r3
10008bda:	f7fb ff91 	bl	10004b00 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10008bde:	6a3b      	ldr	r3, [r7, #32]
10008be0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008be2:	e014      	b.n	10008c0e <HAL_RCCEx_GetPeriphCLKFreq+0x1452>

        case RCC_SDMMC12CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008be4:	f107 030c 	add.w	r3, r7, #12
10008be8:	4618      	mov	r0, r3
10008bea:	f7fc f883 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10008bee:	68fb      	ldr	r3, [r7, #12]
10008bf0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008bf2:	e00c      	b.n	10008c0e <HAL_RCCEx_GetPeriphCLKFreq+0x1452>

        case RCC_SDMMC12CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008bf4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008bf8:	699b      	ldr	r3, [r3, #24]
10008bfa:	f003 0303 	and.w	r3, r3, #3
10008bfe:	4a55      	ldr	r2, [pc, #340]	; (10008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
10008c00:	fa22 f303 	lsr.w	r3, r2, r3
10008c04:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008c06:	e002      	b.n	10008c0e <HAL_RCCEx_GetPeriphCLKFreq+0x1452>

        default:
          frequency = 0;
10008c08:	2300      	movs	r3, #0
10008c0a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008c0c:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_SDMMC12 */
10008c0e:	e09c      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_TIMG1:
    {
      frequency = HAL_RCC_GetMCUFreq();
10008c10:	f7fc fa15 	bl	1000503e <HAL_RCC_GetMCUFreq>
10008c14:	6378      	str	r0, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_TIMG1PRES() == RCC_TIMG1PRES_ACTIVATED)
10008c16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008c1a:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
10008c1e:	f003 0301 	and.w	r3, r3, #1
10008c22:	2b01      	cmp	r3, #1
10008c24:	d116      	bne.n	10008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
      {
        switch (__HAL_RCC_GET_APB1_DIV())
10008c26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008c2a:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10008c2e:	f003 0307 	and.w	r3, r3, #7
10008c32:	2b04      	cmp	r3, #4
10008c34:	d00a      	beq.n	10008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
10008c36:	2b04      	cmp	r3, #4
10008c38:	f200 8084 	bhi.w	10008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
10008c3c:	2b02      	cmp	r3, #2
10008c3e:	d92b      	bls.n	10008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x14dc>
10008c40:	2b03      	cmp	r3, #3
10008c42:	d17f      	bne.n	10008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
          case RCC_APB1_DIV1:
          case RCC_APB1_DIV2:
          case RCC_APB1_DIV4:
            break;
          case RCC_APB1_DIV8:
            frequency /= 2UL;
10008c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008c46:	085b      	lsrs	r3, r3, #1
10008c48:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008c4a:	e028      	b.n	10008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
          case RCC_APB1_DIV16:
            frequency /= 4UL;
10008c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008c4e:	089b      	lsrs	r3, r3, #2
10008c50:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008c52:	e024      	b.n	10008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
        }
      }
      else
      {
        switch (__HAL_RCC_GET_APB1_DIV())
10008c54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008c58:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10008c5c:	f003 0307 	and.w	r3, r3, #7
10008c60:	2b04      	cmp	r3, #4
10008c62:	d86f      	bhi.n	10008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
10008c64:	a201      	add	r2, pc, #4	; (adr r2, 10008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x14b0>)
10008c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008c6a:	bf00      	nop
10008c6c:	10008c9d 	.word	0x10008c9d
10008c70:	10008c9d 	.word	0x10008c9d
10008c74:	10008c81 	.word	0x10008c81
10008c78:	10008c89 	.word	0x10008c89
10008c7c:	10008c91 	.word	0x10008c91
        {
          case RCC_APB1_DIV1:
          case RCC_APB1_DIV2:
            break;
          case RCC_APB1_DIV4:
            frequency /= 2UL;
10008c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008c82:	085b      	lsrs	r3, r3, #1
10008c84:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008c86:	e00a      	b.n	10008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
          case RCC_APB1_DIV8:
            frequency /= 4UL;
10008c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008c8a:	089b      	lsrs	r3, r3, #2
10008c8c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008c8e:	e006      	b.n	10008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
          case RCC_APB1_DIV16:
            frequency /= 8UL;
10008c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008c92:	08db      	lsrs	r3, r3, #3
10008c94:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008c96:	e002      	b.n	10008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
            break;
10008c98:	bf00      	nop
10008c9a:	e053      	b.n	10008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
            break;
10008c9c:	bf00      	nop
        }
      }
    }
    break;
10008c9e:	e051      	b.n	10008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>


    case RCC_PERIPHCLK_TIMG2:
    {
      frequency = HAL_RCC_GetMCUFreq();
10008ca0:	f7fc f9cd 	bl	1000503e <HAL_RCC_GetMCUFreq>
10008ca4:	6378      	str	r0, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_TIMG2PRES() == RCC_TIMG2PRES_ACTIVATED)
10008ca6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008caa:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
10008cae:	f003 0301 	and.w	r3, r3, #1
10008cb2:	2b01      	cmp	r3, #1
10008cb4:	d115      	bne.n	10008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
      {
        switch (__HAL_RCC_GET_APB2_DIV())
10008cb6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008cba:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10008cbe:	f003 0307 	and.w	r3, r3, #7
10008cc2:	2b04      	cmp	r3, #4
10008cc4:	d009      	beq.n	10008cda <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
10008cc6:	2b04      	cmp	r3, #4
10008cc8:	d83e      	bhi.n	10008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
10008cca:	2b02      	cmp	r3, #2
10008ccc:	d92a      	bls.n	10008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1568>
10008cce:	2b03      	cmp	r3, #3
10008cd0:	d13a      	bne.n	10008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
          case RCC_APB2_DIV1:
          case RCC_APB2_DIV2:
          case RCC_APB2_DIV4:
            break;
          case RCC_APB2_DIV8:
            frequency /= 2UL;
10008cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008cd4:	085b      	lsrs	r3, r3, #1
10008cd6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008cd8:	e027      	b.n	10008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
          case RCC_APB2_DIV16:
            frequency /= 4UL;
10008cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008cdc:	089b      	lsrs	r3, r3, #2
10008cde:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008ce0:	e023      	b.n	10008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
        }
      }
      else
      {
        switch (__HAL_RCC_GET_APB2_DIV())
10008ce2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008ce6:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10008cea:	f003 0307 	and.w	r3, r3, #7
10008cee:	2b04      	cmp	r3, #4
10008cf0:	d82a      	bhi.n	10008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
10008cf2:	a201      	add	r2, pc, #4	; (adr r2, 10008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
10008cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008cf8:	10008d29 	.word	0x10008d29
10008cfc:	10008d29 	.word	0x10008d29
10008d00:	10008d0d 	.word	0x10008d0d
10008d04:	10008d15 	.word	0x10008d15
10008d08:	10008d1d 	.word	0x10008d1d
        {
          case RCC_APB2_DIV1:
          case RCC_APB2_DIV2:
            break;
          case RCC_APB2_DIV4:
            frequency /= 2UL;
10008d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008d0e:	085b      	lsrs	r3, r3, #1
10008d10:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008d12:	e00a      	b.n	10008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
          case RCC_APB2_DIV8:
            frequency /= 4UL;
10008d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008d16:	089b      	lsrs	r3, r3, #2
10008d18:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008d1a:	e006      	b.n	10008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
          case RCC_APB2_DIV16:
            frequency /= 8UL;
10008d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008d1e:	08db      	lsrs	r3, r3, #3
10008d20:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008d22:	e002      	b.n	10008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
            break;
10008d24:	bf00      	nop
10008d26:	e00f      	b.n	10008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
            break;
10008d28:	bf00      	nop
        }
      }
    }
    break;
10008d2a:	e00d      	b.n	10008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
      break; /* RCC_PERIPHCLK_I2C12 */
10008d2c:	bf00      	nop
10008d2e:	e00c      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
      break; /* RCC_PERIPHCLK_I2C35 */
10008d30:	bf00      	nop
10008d32:	e00a      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;//RCC_PERIPHCLK_RTC
10008d34:	bf00      	nop
10008d36:	e008      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;//RCC_PERIPHCLK_FMC
10008d38:	bf00      	nop
10008d3a:	e006      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;//RCC_PERIPHCLK_RNG2
10008d3c:	bf00      	nop
10008d3e:	e004      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;//RCC_PERIPHCLK_RNG1
10008d40:	bf00      	nop
10008d42:	e002      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;
10008d44:	bf00      	nop
10008d46:	e000      	b.n	10008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;
10008d48:	bf00      	nop

  }

  return (frequency);
10008d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
10008d4c:	4618      	mov	r0, r3
10008d4e:	373c      	adds	r7, #60	; 0x3c
10008d50:	46bd      	mov	sp, r7
10008d52:	bd90      	pop	{r4, r7, pc}
10008d54:	03d09000 	.word	0x03d09000
10008d58:	003d0900 	.word	0x003d0900

10008d5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
10008d5c:	b580      	push	{r7, lr}
10008d5e:	b082      	sub	sp, #8
10008d60:	af00      	add	r7, sp, #0
10008d62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
10008d64:	687b      	ldr	r3, [r7, #4]
10008d66:	2b00      	cmp	r3, #0
10008d68:	d101      	bne.n	10008d6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
10008d6a:	2301      	movs	r3, #1
10008d6c:	e042      	b.n	10008df4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
10008d6e:	687b      	ldr	r3, [r7, #4]
10008d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10008d74:	2b00      	cmp	r3, #0
10008d76:	d106      	bne.n	10008d86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
10008d78:	687b      	ldr	r3, [r7, #4]
10008d7a:	2200      	movs	r2, #0
10008d7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
10008d80:	6878      	ldr	r0, [r7, #4]
10008d82:	f7f8 fb83 	bl	1000148c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
10008d86:	687b      	ldr	r3, [r7, #4]
10008d88:	2224      	movs	r2, #36	; 0x24
10008d8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
10008d8e:	687b      	ldr	r3, [r7, #4]
10008d90:	681b      	ldr	r3, [r3, #0]
10008d92:	681a      	ldr	r2, [r3, #0]
10008d94:	687b      	ldr	r3, [r7, #4]
10008d96:	681b      	ldr	r3, [r3, #0]
10008d98:	f022 0201 	bic.w	r2, r2, #1
10008d9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
10008d9e:	6878      	ldr	r0, [r7, #4]
10008da0:	f000 f8c4 	bl	10008f2c <UART_SetConfig>
10008da4:	4603      	mov	r3, r0
10008da6:	2b01      	cmp	r3, #1
10008da8:	d101      	bne.n	10008dae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
10008daa:	2301      	movs	r3, #1
10008dac:	e022      	b.n	10008df4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
10008dae:	687b      	ldr	r3, [r7, #4]
10008db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10008db2:	2b00      	cmp	r3, #0
10008db4:	d002      	beq.n	10008dbc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
10008db6:	6878      	ldr	r0, [r7, #4]
10008db8:	f001 f95e 	bl	1000a078 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
10008dbc:	687b      	ldr	r3, [r7, #4]
10008dbe:	681b      	ldr	r3, [r3, #0]
10008dc0:	685a      	ldr	r2, [r3, #4]
10008dc2:	687b      	ldr	r3, [r7, #4]
10008dc4:	681b      	ldr	r3, [r3, #0]
10008dc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
10008dca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
10008dcc:	687b      	ldr	r3, [r7, #4]
10008dce:	681b      	ldr	r3, [r3, #0]
10008dd0:	689a      	ldr	r2, [r3, #8]
10008dd2:	687b      	ldr	r3, [r7, #4]
10008dd4:	681b      	ldr	r3, [r3, #0]
10008dd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
10008dda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
10008ddc:	687b      	ldr	r3, [r7, #4]
10008dde:	681b      	ldr	r3, [r3, #0]
10008de0:	681a      	ldr	r2, [r3, #0]
10008de2:	687b      	ldr	r3, [r7, #4]
10008de4:	681b      	ldr	r3, [r3, #0]
10008de6:	f042 0201 	orr.w	r2, r2, #1
10008dea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
10008dec:	6878      	ldr	r0, [r7, #4]
10008dee:	f001 f9e5 	bl	1000a1bc <UART_CheckIdleState>
10008df2:	4603      	mov	r3, r0
}
10008df4:	4618      	mov	r0, r3
10008df6:	3708      	adds	r7, #8
10008df8:	46bd      	mov	sp, r7
10008dfa:	bd80      	pop	{r7, pc}

10008dfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
10008dfc:	b580      	push	{r7, lr}
10008dfe:	b08a      	sub	sp, #40	; 0x28
10008e00:	af02      	add	r7, sp, #8
10008e02:	60f8      	str	r0, [r7, #12]
10008e04:	60b9      	str	r1, [r7, #8]
10008e06:	603b      	str	r3, [r7, #0]
10008e08:	4613      	mov	r3, r2
10008e0a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
10008e0c:	68fb      	ldr	r3, [r7, #12]
10008e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10008e12:	2b20      	cmp	r3, #32
10008e14:	f040 8084 	bne.w	10008f20 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
10008e18:	68bb      	ldr	r3, [r7, #8]
10008e1a:	2b00      	cmp	r3, #0
10008e1c:	d002      	beq.n	10008e24 <HAL_UART_Transmit+0x28>
10008e1e:	88fb      	ldrh	r3, [r7, #6]
10008e20:	2b00      	cmp	r3, #0
10008e22:	d101      	bne.n	10008e28 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
10008e24:	2301      	movs	r3, #1
10008e26:	e07c      	b.n	10008f22 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
10008e28:	68fb      	ldr	r3, [r7, #12]
10008e2a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
10008e2e:	2b01      	cmp	r3, #1
10008e30:	d101      	bne.n	10008e36 <HAL_UART_Transmit+0x3a>
10008e32:	2302      	movs	r3, #2
10008e34:	e075      	b.n	10008f22 <HAL_UART_Transmit+0x126>
10008e36:	68fb      	ldr	r3, [r7, #12]
10008e38:	2201      	movs	r2, #1
10008e3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    huart->ErrorCode = HAL_UART_ERROR_NONE;
10008e3e:	68fb      	ldr	r3, [r7, #12]
10008e40:	2200      	movs	r2, #0
10008e42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
10008e46:	68fb      	ldr	r3, [r7, #12]
10008e48:	2221      	movs	r2, #33	; 0x21
10008e4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
10008e4e:	f7f8 fc81 	bl	10001754 <HAL_GetTick>
10008e52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
10008e54:	68fb      	ldr	r3, [r7, #12]
10008e56:	88fa      	ldrh	r2, [r7, #6]
10008e58:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
10008e5c:	68fb      	ldr	r3, [r7, #12]
10008e5e:	88fa      	ldrh	r2, [r7, #6]
10008e60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
10008e64:	68fb      	ldr	r3, [r7, #12]
10008e66:	689b      	ldr	r3, [r3, #8]
10008e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
10008e6c:	d108      	bne.n	10008e80 <HAL_UART_Transmit+0x84>
10008e6e:	68fb      	ldr	r3, [r7, #12]
10008e70:	691b      	ldr	r3, [r3, #16]
10008e72:	2b00      	cmp	r3, #0
10008e74:	d104      	bne.n	10008e80 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
10008e76:	2300      	movs	r3, #0
10008e78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
10008e7a:	68bb      	ldr	r3, [r7, #8]
10008e7c:	61bb      	str	r3, [r7, #24]
10008e7e:	e003      	b.n	10008e88 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
10008e80:	68bb      	ldr	r3, [r7, #8]
10008e82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
10008e84:	2300      	movs	r3, #0
10008e86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
10008e88:	68fb      	ldr	r3, [r7, #12]
10008e8a:	2200      	movs	r2, #0
10008e8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    while (huart->TxXferCount > 0U)
10008e90:	e02d      	b.n	10008eee <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
10008e92:	683b      	ldr	r3, [r7, #0]
10008e94:	9300      	str	r3, [sp, #0]
10008e96:	697b      	ldr	r3, [r7, #20]
10008e98:	2200      	movs	r2, #0
10008e9a:	2180      	movs	r1, #128	; 0x80
10008e9c:	68f8      	ldr	r0, [r7, #12]
10008e9e:	f001 f9d5 	bl	1000a24c <UART_WaitOnFlagUntilTimeout>
10008ea2:	4603      	mov	r3, r0
10008ea4:	2b00      	cmp	r3, #0
10008ea6:	d001      	beq.n	10008eac <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
10008ea8:	2303      	movs	r3, #3
10008eaa:	e03a      	b.n	10008f22 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
10008eac:	69fb      	ldr	r3, [r7, #28]
10008eae:	2b00      	cmp	r3, #0
10008eb0:	d10b      	bne.n	10008eca <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
10008eb2:	69bb      	ldr	r3, [r7, #24]
10008eb4:	881a      	ldrh	r2, [r3, #0]
10008eb6:	68fb      	ldr	r3, [r7, #12]
10008eb8:	681b      	ldr	r3, [r3, #0]
10008eba:	f3c2 0208 	ubfx	r2, r2, #0, #9
10008ebe:	b292      	uxth	r2, r2
10008ec0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
10008ec2:	69bb      	ldr	r3, [r7, #24]
10008ec4:	3302      	adds	r3, #2
10008ec6:	61bb      	str	r3, [r7, #24]
10008ec8:	e008      	b.n	10008edc <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
10008eca:	69fb      	ldr	r3, [r7, #28]
10008ecc:	781a      	ldrb	r2, [r3, #0]
10008ece:	68fb      	ldr	r3, [r7, #12]
10008ed0:	681b      	ldr	r3, [r3, #0]
10008ed2:	b292      	uxth	r2, r2
10008ed4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
10008ed6:	69fb      	ldr	r3, [r7, #28]
10008ed8:	3301      	adds	r3, #1
10008eda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
10008edc:	68fb      	ldr	r3, [r7, #12]
10008ede:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
10008ee2:	b29b      	uxth	r3, r3
10008ee4:	3b01      	subs	r3, #1
10008ee6:	b29a      	uxth	r2, r3
10008ee8:	68fb      	ldr	r3, [r7, #12]
10008eea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
10008eee:	68fb      	ldr	r3, [r7, #12]
10008ef0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
10008ef4:	b29b      	uxth	r3, r3
10008ef6:	2b00      	cmp	r3, #0
10008ef8:	d1cb      	bne.n	10008e92 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
10008efa:	683b      	ldr	r3, [r7, #0]
10008efc:	9300      	str	r3, [sp, #0]
10008efe:	697b      	ldr	r3, [r7, #20]
10008f00:	2200      	movs	r2, #0
10008f02:	2140      	movs	r1, #64	; 0x40
10008f04:	68f8      	ldr	r0, [r7, #12]
10008f06:	f001 f9a1 	bl	1000a24c <UART_WaitOnFlagUntilTimeout>
10008f0a:	4603      	mov	r3, r0
10008f0c:	2b00      	cmp	r3, #0
10008f0e:	d001      	beq.n	10008f14 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
10008f10:	2303      	movs	r3, #3
10008f12:	e006      	b.n	10008f22 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
10008f14:	68fb      	ldr	r3, [r7, #12]
10008f16:	2220      	movs	r2, #32
10008f18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
10008f1c:	2300      	movs	r3, #0
10008f1e:	e000      	b.n	10008f22 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
10008f20:	2302      	movs	r3, #2
  }
}
10008f22:	4618      	mov	r0, r3
10008f24:	3720      	adds	r7, #32
10008f26:	46bd      	mov	sp, r7
10008f28:	bd80      	pop	{r7, pc}
	...

10008f2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
10008f2c:	b580      	push	{r7, lr}
10008f2e:	b08e      	sub	sp, #56	; 0x38
10008f30:	af00      	add	r7, sp, #0
10008f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
10008f34:	2300      	movs	r3, #0
10008f36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_StatusTypeDef ret               = HAL_OK;
10008f38:	2300      	movs	r3, #0
10008f3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
10008f3e:	687b      	ldr	r3, [r7, #4]
10008f40:	689a      	ldr	r2, [r3, #8]
10008f42:	687b      	ldr	r3, [r7, #4]
10008f44:	691b      	ldr	r3, [r3, #16]
10008f46:	431a      	orrs	r2, r3
10008f48:	687b      	ldr	r3, [r7, #4]
10008f4a:	695b      	ldr	r3, [r3, #20]
10008f4c:	431a      	orrs	r2, r3
10008f4e:	687b      	ldr	r3, [r7, #4]
10008f50:	69db      	ldr	r3, [r3, #28]
10008f52:	4313      	orrs	r3, r2
10008f54:	62bb      	str	r3, [r7, #40]	; 0x28
  tmpreg |= (uint32_t)huart->FifoMode;
10008f56:	687b      	ldr	r3, [r7, #4]
10008f58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
10008f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
10008f5c:	4313      	orrs	r3, r2
10008f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
10008f60:	687b      	ldr	r3, [r7, #4]
10008f62:	681b      	ldr	r3, [r3, #0]
10008f64:	681a      	ldr	r2, [r3, #0]
10008f66:	4bb1      	ldr	r3, [pc, #708]	; (1000922c <UART_SetConfig+0x300>)
10008f68:	4013      	ands	r3, r2
10008f6a:	687a      	ldr	r2, [r7, #4]
10008f6c:	6812      	ldr	r2, [r2, #0]
10008f6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
10008f70:	430b      	orrs	r3, r1
10008f72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
10008f74:	687b      	ldr	r3, [r7, #4]
10008f76:	681b      	ldr	r3, [r3, #0]
10008f78:	685b      	ldr	r3, [r3, #4]
10008f7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
10008f7e:	687b      	ldr	r3, [r7, #4]
10008f80:	68da      	ldr	r2, [r3, #12]
10008f82:	687b      	ldr	r3, [r7, #4]
10008f84:	681b      	ldr	r3, [r3, #0]
10008f86:	430a      	orrs	r2, r1
10008f88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
10008f8a:	687b      	ldr	r3, [r7, #4]
10008f8c:	699b      	ldr	r3, [r3, #24]
10008f8e:	62bb      	str	r3, [r7, #40]	; 0x28

  tmpreg |= huart->Init.OneBitSampling;
10008f90:	687b      	ldr	r3, [r7, #4]
10008f92:	6a1b      	ldr	r3, [r3, #32]
10008f94:	6aba      	ldr	r2, [r7, #40]	; 0x28
10008f96:	4313      	orrs	r3, r2
10008f98:	62bb      	str	r3, [r7, #40]	; 0x28
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
10008f9a:	687b      	ldr	r3, [r7, #4]
10008f9c:	681b      	ldr	r3, [r3, #0]
10008f9e:	689b      	ldr	r3, [r3, #8]
10008fa0:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
10008fa4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
10008fa8:	687a      	ldr	r2, [r7, #4]
10008faa:	6812      	ldr	r2, [r2, #0]
10008fac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
10008fae:	430b      	orrs	r3, r1
10008fb0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
10008fb2:	687b      	ldr	r3, [r7, #4]
10008fb4:	681b      	ldr	r3, [r3, #0]
10008fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10008fb8:	f023 010f 	bic.w	r1, r3, #15
10008fbc:	687b      	ldr	r3, [r7, #4]
10008fbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10008fc0:	687b      	ldr	r3, [r7, #4]
10008fc2:	681b      	ldr	r3, [r3, #0]
10008fc4:	430a      	orrs	r2, r1
10008fc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
10008fc8:	687b      	ldr	r3, [r7, #4]
10008fca:	681b      	ldr	r3, [r3, #0]
10008fcc:	f1b3 4fb8 	cmp.w	r3, #1543503872	; 0x5c000000
10008fd0:	d132      	bne.n	10009038 <UART_SetConfig+0x10c>
10008fd2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008fd6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10008fda:	f003 0307 	and.w	r3, r3, #7
10008fde:	2b05      	cmp	r3, #5
10008fe0:	d826      	bhi.n	10009030 <UART_SetConfig+0x104>
10008fe2:	a201      	add	r2, pc, #4	; (adr r2, 10008fe8 <UART_SetConfig+0xbc>)
10008fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008fe8:	10009001 	.word	0x10009001
10008fec:	10009009 	.word	0x10009009
10008ff0:	10009011 	.word	0x10009011
10008ff4:	10009019 	.word	0x10009019
10008ff8:	10009021 	.word	0x10009021
10008ffc:	10009029 	.word	0x10009029
10009000:	2302      	movs	r3, #2
10009002:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009006:	e184      	b.n	10009312 <UART_SetConfig+0x3e6>
10009008:	2304      	movs	r3, #4
1000900a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000900e:	e180      	b.n	10009312 <UART_SetConfig+0x3e6>
10009010:	2310      	movs	r3, #16
10009012:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009016:	e17c      	b.n	10009312 <UART_SetConfig+0x3e6>
10009018:	2320      	movs	r3, #32
1000901a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000901e:	e178      	b.n	10009312 <UART_SetConfig+0x3e6>
10009020:	2308      	movs	r3, #8
10009022:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009026:	e174      	b.n	10009312 <UART_SetConfig+0x3e6>
10009028:	2340      	movs	r3, #64	; 0x40
1000902a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000902e:	e170      	b.n	10009312 <UART_SetConfig+0x3e6>
10009030:	2380      	movs	r3, #128	; 0x80
10009032:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009036:	e16c      	b.n	10009312 <UART_SetConfig+0x3e6>
10009038:	687b      	ldr	r3, [r7, #4]
1000903a:	681b      	ldr	r3, [r3, #0]
1000903c:	4a7c      	ldr	r2, [pc, #496]	; (10009230 <UART_SetConfig+0x304>)
1000903e:	4293      	cmp	r3, r2
10009040:	d12c      	bne.n	1000909c <UART_SetConfig+0x170>
10009042:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009046:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
1000904a:	f003 0307 	and.w	r3, r3, #7
1000904e:	2b04      	cmp	r3, #4
10009050:	d820      	bhi.n	10009094 <UART_SetConfig+0x168>
10009052:	a201      	add	r2, pc, #4	; (adr r2, 10009058 <UART_SetConfig+0x12c>)
10009054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009058:	1000906d 	.word	0x1000906d
1000905c:	10009075 	.word	0x10009075
10009060:	1000907d 	.word	0x1000907d
10009064:	10009085 	.word	0x10009085
10009068:	1000908d 	.word	0x1000908d
1000906c:	2300      	movs	r3, #0
1000906e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009072:	e14e      	b.n	10009312 <UART_SetConfig+0x3e6>
10009074:	2308      	movs	r3, #8
10009076:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000907a:	e14a      	b.n	10009312 <UART_SetConfig+0x3e6>
1000907c:	2310      	movs	r3, #16
1000907e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009082:	e146      	b.n	10009312 <UART_SetConfig+0x3e6>
10009084:	2320      	movs	r3, #32
10009086:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000908a:	e142      	b.n	10009312 <UART_SetConfig+0x3e6>
1000908c:	2340      	movs	r3, #64	; 0x40
1000908e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009092:	e13e      	b.n	10009312 <UART_SetConfig+0x3e6>
10009094:	2380      	movs	r3, #128	; 0x80
10009096:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000909a:	e13a      	b.n	10009312 <UART_SetConfig+0x3e6>
1000909c:	687b      	ldr	r3, [r7, #4]
1000909e:	681b      	ldr	r3, [r3, #0]
100090a0:	4a64      	ldr	r2, [pc, #400]	; (10009234 <UART_SetConfig+0x308>)
100090a2:	4293      	cmp	r3, r2
100090a4:	d12c      	bne.n	10009100 <UART_SetConfig+0x1d4>
100090a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100090aa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
100090ae:	f003 0307 	and.w	r3, r3, #7
100090b2:	2b04      	cmp	r3, #4
100090b4:	d820      	bhi.n	100090f8 <UART_SetConfig+0x1cc>
100090b6:	a201      	add	r2, pc, #4	; (adr r2, 100090bc <UART_SetConfig+0x190>)
100090b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100090bc:	100090d1 	.word	0x100090d1
100090c0:	100090d9 	.word	0x100090d9
100090c4:	100090e1 	.word	0x100090e1
100090c8:	100090e9 	.word	0x100090e9
100090cc:	100090f1 	.word	0x100090f1
100090d0:	2300      	movs	r3, #0
100090d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100090d6:	e11c      	b.n	10009312 <UART_SetConfig+0x3e6>
100090d8:	2308      	movs	r3, #8
100090da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100090de:	e118      	b.n	10009312 <UART_SetConfig+0x3e6>
100090e0:	2310      	movs	r3, #16
100090e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100090e6:	e114      	b.n	10009312 <UART_SetConfig+0x3e6>
100090e8:	2320      	movs	r3, #32
100090ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100090ee:	e110      	b.n	10009312 <UART_SetConfig+0x3e6>
100090f0:	2340      	movs	r3, #64	; 0x40
100090f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100090f6:	e10c      	b.n	10009312 <UART_SetConfig+0x3e6>
100090f8:	2380      	movs	r3, #128	; 0x80
100090fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100090fe:	e108      	b.n	10009312 <UART_SetConfig+0x3e6>
10009100:	687b      	ldr	r3, [r7, #4]
10009102:	681b      	ldr	r3, [r3, #0]
10009104:	4a4c      	ldr	r2, [pc, #304]	; (10009238 <UART_SetConfig+0x30c>)
10009106:	4293      	cmp	r3, r2
10009108:	d12c      	bne.n	10009164 <UART_SetConfig+0x238>
1000910a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000910e:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
10009112:	f003 0307 	and.w	r3, r3, #7
10009116:	2b04      	cmp	r3, #4
10009118:	d820      	bhi.n	1000915c <UART_SetConfig+0x230>
1000911a:	a201      	add	r2, pc, #4	; (adr r2, 10009120 <UART_SetConfig+0x1f4>)
1000911c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009120:	10009135 	.word	0x10009135
10009124:	1000913d 	.word	0x1000913d
10009128:	10009145 	.word	0x10009145
1000912c:	1000914d 	.word	0x1000914d
10009130:	10009155 	.word	0x10009155
10009134:	2300      	movs	r3, #0
10009136:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000913a:	e0ea      	b.n	10009312 <UART_SetConfig+0x3e6>
1000913c:	2308      	movs	r3, #8
1000913e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009142:	e0e6      	b.n	10009312 <UART_SetConfig+0x3e6>
10009144:	2310      	movs	r3, #16
10009146:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000914a:	e0e2      	b.n	10009312 <UART_SetConfig+0x3e6>
1000914c:	2320      	movs	r3, #32
1000914e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009152:	e0de      	b.n	10009312 <UART_SetConfig+0x3e6>
10009154:	2340      	movs	r3, #64	; 0x40
10009156:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000915a:	e0da      	b.n	10009312 <UART_SetConfig+0x3e6>
1000915c:	2380      	movs	r3, #128	; 0x80
1000915e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009162:	e0d6      	b.n	10009312 <UART_SetConfig+0x3e6>
10009164:	687b      	ldr	r3, [r7, #4]
10009166:	681b      	ldr	r3, [r3, #0]
10009168:	4a34      	ldr	r2, [pc, #208]	; (1000923c <UART_SetConfig+0x310>)
1000916a:	4293      	cmp	r3, r2
1000916c:	d12c      	bne.n	100091c8 <UART_SetConfig+0x29c>
1000916e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009172:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
10009176:	f003 0307 	and.w	r3, r3, #7
1000917a:	2b04      	cmp	r3, #4
1000917c:	d820      	bhi.n	100091c0 <UART_SetConfig+0x294>
1000917e:	a201      	add	r2, pc, #4	; (adr r2, 10009184 <UART_SetConfig+0x258>)
10009180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009184:	10009199 	.word	0x10009199
10009188:	100091a1 	.word	0x100091a1
1000918c:	100091a9 	.word	0x100091a9
10009190:	100091b1 	.word	0x100091b1
10009194:	100091b9 	.word	0x100091b9
10009198:	2300      	movs	r3, #0
1000919a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000919e:	e0b8      	b.n	10009312 <UART_SetConfig+0x3e6>
100091a0:	2308      	movs	r3, #8
100091a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100091a6:	e0b4      	b.n	10009312 <UART_SetConfig+0x3e6>
100091a8:	2310      	movs	r3, #16
100091aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100091ae:	e0b0      	b.n	10009312 <UART_SetConfig+0x3e6>
100091b0:	2320      	movs	r3, #32
100091b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100091b6:	e0ac      	b.n	10009312 <UART_SetConfig+0x3e6>
100091b8:	2340      	movs	r3, #64	; 0x40
100091ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100091be:	e0a8      	b.n	10009312 <UART_SetConfig+0x3e6>
100091c0:	2380      	movs	r3, #128	; 0x80
100091c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100091c6:	e0a4      	b.n	10009312 <UART_SetConfig+0x3e6>
100091c8:	687b      	ldr	r3, [r7, #4]
100091ca:	681b      	ldr	r3, [r3, #0]
100091cc:	4a1c      	ldr	r2, [pc, #112]	; (10009240 <UART_SetConfig+0x314>)
100091ce:	4293      	cmp	r3, r2
100091d0:	d138      	bne.n	10009244 <UART_SetConfig+0x318>
100091d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100091d6:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
100091da:	f003 0307 	and.w	r3, r3, #7
100091de:	2b04      	cmp	r3, #4
100091e0:	d820      	bhi.n	10009224 <UART_SetConfig+0x2f8>
100091e2:	a201      	add	r2, pc, #4	; (adr r2, 100091e8 <UART_SetConfig+0x2bc>)
100091e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100091e8:	100091fd 	.word	0x100091fd
100091ec:	10009205 	.word	0x10009205
100091f0:	1000920d 	.word	0x1000920d
100091f4:	10009215 	.word	0x10009215
100091f8:	1000921d 	.word	0x1000921d
100091fc:	2301      	movs	r3, #1
100091fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009202:	e086      	b.n	10009312 <UART_SetConfig+0x3e6>
10009204:	2308      	movs	r3, #8
10009206:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000920a:	e082      	b.n	10009312 <UART_SetConfig+0x3e6>
1000920c:	2310      	movs	r3, #16
1000920e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009212:	e07e      	b.n	10009312 <UART_SetConfig+0x3e6>
10009214:	2320      	movs	r3, #32
10009216:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000921a:	e07a      	b.n	10009312 <UART_SetConfig+0x3e6>
1000921c:	2340      	movs	r3, #64	; 0x40
1000921e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009222:	e076      	b.n	10009312 <UART_SetConfig+0x3e6>
10009224:	2380      	movs	r3, #128	; 0x80
10009226:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000922a:	e072      	b.n	10009312 <UART_SetConfig+0x3e6>
1000922c:	cfff69f3 	.word	0xcfff69f3
10009230:	4000e000 	.word	0x4000e000
10009234:	4000f000 	.word	0x4000f000
10009238:	40010000 	.word	0x40010000
1000923c:	40011000 	.word	0x40011000
10009240:	44003000 	.word	0x44003000
10009244:	687b      	ldr	r3, [r7, #4]
10009246:	681b      	ldr	r3, [r3, #0]
10009248:	4aab      	ldr	r2, [pc, #684]	; (100094f8 <UART_SetConfig+0x5cc>)
1000924a:	4293      	cmp	r3, r2
1000924c:	d12c      	bne.n	100092a8 <UART_SetConfig+0x37c>
1000924e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009252:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
10009256:	f003 0307 	and.w	r3, r3, #7
1000925a:	2b04      	cmp	r3, #4
1000925c:	d820      	bhi.n	100092a0 <UART_SetConfig+0x374>
1000925e:	a201      	add	r2, pc, #4	; (adr r2, 10009264 <UART_SetConfig+0x338>)
10009260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009264:	10009279 	.word	0x10009279
10009268:	10009281 	.word	0x10009281
1000926c:	10009289 	.word	0x10009289
10009270:	10009291 	.word	0x10009291
10009274:	10009299 	.word	0x10009299
10009278:	2300      	movs	r3, #0
1000927a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000927e:	e048      	b.n	10009312 <UART_SetConfig+0x3e6>
10009280:	2308      	movs	r3, #8
10009282:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009286:	e044      	b.n	10009312 <UART_SetConfig+0x3e6>
10009288:	2310      	movs	r3, #16
1000928a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000928e:	e040      	b.n	10009312 <UART_SetConfig+0x3e6>
10009290:	2320      	movs	r3, #32
10009292:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009296:	e03c      	b.n	10009312 <UART_SetConfig+0x3e6>
10009298:	2340      	movs	r3, #64	; 0x40
1000929a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000929e:	e038      	b.n	10009312 <UART_SetConfig+0x3e6>
100092a0:	2380      	movs	r3, #128	; 0x80
100092a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100092a6:	e034      	b.n	10009312 <UART_SetConfig+0x3e6>
100092a8:	687b      	ldr	r3, [r7, #4]
100092aa:	681b      	ldr	r3, [r3, #0]
100092ac:	4a93      	ldr	r2, [pc, #588]	; (100094fc <UART_SetConfig+0x5d0>)
100092ae:	4293      	cmp	r3, r2
100092b0:	d12c      	bne.n	1000930c <UART_SetConfig+0x3e0>
100092b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100092b6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
100092ba:	f003 0307 	and.w	r3, r3, #7
100092be:	2b04      	cmp	r3, #4
100092c0:	d820      	bhi.n	10009304 <UART_SetConfig+0x3d8>
100092c2:	a201      	add	r2, pc, #4	; (adr r2, 100092c8 <UART_SetConfig+0x39c>)
100092c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100092c8:	100092dd 	.word	0x100092dd
100092cc:	100092e5 	.word	0x100092e5
100092d0:	100092ed 	.word	0x100092ed
100092d4:	100092f5 	.word	0x100092f5
100092d8:	100092fd 	.word	0x100092fd
100092dc:	2300      	movs	r3, #0
100092de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100092e2:	e016      	b.n	10009312 <UART_SetConfig+0x3e6>
100092e4:	2308      	movs	r3, #8
100092e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100092ea:	e012      	b.n	10009312 <UART_SetConfig+0x3e6>
100092ec:	2310      	movs	r3, #16
100092ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100092f2:	e00e      	b.n	10009312 <UART_SetConfig+0x3e6>
100092f4:	2320      	movs	r3, #32
100092f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100092fa:	e00a      	b.n	10009312 <UART_SetConfig+0x3e6>
100092fc:	2340      	movs	r3, #64	; 0x40
100092fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009302:	e006      	b.n	10009312 <UART_SetConfig+0x3e6>
10009304:	2380      	movs	r3, #128	; 0x80
10009306:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000930a:	e002      	b.n	10009312 <UART_SetConfig+0x3e6>
1000930c:	2380      	movs	r3, #128	; 0x80
1000930e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
10009312:	687b      	ldr	r3, [r7, #4]
10009314:	69db      	ldr	r3, [r3, #28]
10009316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
1000931a:	f040 8354 	bne.w	100099c6 <UART_SetConfig+0xa9a>
  {
    switch (clocksource)
1000931e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
10009322:	2b20      	cmp	r3, #32
10009324:	dc4a      	bgt.n	100093bc <UART_SetConfig+0x490>
10009326:	2b00      	cmp	r3, #0
10009328:	f2c0 832b 	blt.w	10009982 <UART_SetConfig+0xa56>
1000932c:	2b20      	cmp	r3, #32
1000932e:	f200 8328 	bhi.w	10009982 <UART_SetConfig+0xa56>
10009332:	a201      	add	r2, pc, #4	; (adr r2, 10009338 <UART_SetConfig+0x40c>)
10009334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009338:	100093c5 	.word	0x100093c5
1000933c:	1000947d 	.word	0x1000947d
10009340:	1000953d 	.word	0x1000953d
10009344:	10009983 	.word	0x10009983
10009348:	100095f5 	.word	0x100095f5
1000934c:	10009983 	.word	0x10009983
10009350:	10009983 	.word	0x10009983
10009354:	10009983 	.word	0x10009983
10009358:	100096b1 	.word	0x100096b1
1000935c:	10009983 	.word	0x10009983
10009360:	10009983 	.word	0x10009983
10009364:	10009983 	.word	0x10009983
10009368:	10009983 	.word	0x10009983
1000936c:	10009983 	.word	0x10009983
10009370:	10009983 	.word	0x10009983
10009374:	10009983 	.word	0x10009983
10009378:	1000976d 	.word	0x1000976d
1000937c:	10009983 	.word	0x10009983
10009380:	10009983 	.word	0x10009983
10009384:	10009983 	.word	0x10009983
10009388:	10009983 	.word	0x10009983
1000938c:	10009983 	.word	0x10009983
10009390:	10009983 	.word	0x10009983
10009394:	10009983 	.word	0x10009983
10009398:	10009983 	.word	0x10009983
1000939c:	10009983 	.word	0x10009983
100093a0:	10009983 	.word	0x10009983
100093a4:	10009983 	.word	0x10009983
100093a8:	10009983 	.word	0x10009983
100093ac:	10009983 	.word	0x10009983
100093b0:	10009983 	.word	0x10009983
100093b4:	10009983 	.word	0x10009983
100093b8:	1000981f 	.word	0x1000981f
100093bc:	2b40      	cmp	r3, #64	; 0x40
100093be:	f000 8287 	beq.w	100098d0 <UART_SetConfig+0x9a4>
100093c2:	e2de      	b.n	10009982 <UART_SetConfig+0xa56>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
100093c4:	f7fb fd9e 	bl	10004f04 <HAL_RCC_GetPCLK1Freq>
100093c8:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100093ca:	687b      	ldr	r3, [r7, #4]
100093cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100093ce:	2b00      	cmp	r3, #0
100093d0:	d044      	beq.n	1000945c <UART_SetConfig+0x530>
100093d2:	687b      	ldr	r3, [r7, #4]
100093d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100093d6:	2b01      	cmp	r3, #1
100093d8:	d03e      	beq.n	10009458 <UART_SetConfig+0x52c>
100093da:	687b      	ldr	r3, [r7, #4]
100093dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100093de:	2b02      	cmp	r3, #2
100093e0:	d038      	beq.n	10009454 <UART_SetConfig+0x528>
100093e2:	687b      	ldr	r3, [r7, #4]
100093e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100093e6:	2b03      	cmp	r3, #3
100093e8:	d032      	beq.n	10009450 <UART_SetConfig+0x524>
100093ea:	687b      	ldr	r3, [r7, #4]
100093ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100093ee:	2b04      	cmp	r3, #4
100093f0:	d02c      	beq.n	1000944c <UART_SetConfig+0x520>
100093f2:	687b      	ldr	r3, [r7, #4]
100093f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100093f6:	2b05      	cmp	r3, #5
100093f8:	d026      	beq.n	10009448 <UART_SetConfig+0x51c>
100093fa:	687b      	ldr	r3, [r7, #4]
100093fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100093fe:	2b06      	cmp	r3, #6
10009400:	d020      	beq.n	10009444 <UART_SetConfig+0x518>
10009402:	687b      	ldr	r3, [r7, #4]
10009404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009406:	2b07      	cmp	r3, #7
10009408:	d01a      	beq.n	10009440 <UART_SetConfig+0x514>
1000940a:	687b      	ldr	r3, [r7, #4]
1000940c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000940e:	2b08      	cmp	r3, #8
10009410:	d014      	beq.n	1000943c <UART_SetConfig+0x510>
10009412:	687b      	ldr	r3, [r7, #4]
10009414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009416:	2b09      	cmp	r3, #9
10009418:	d00e      	beq.n	10009438 <UART_SetConfig+0x50c>
1000941a:	687b      	ldr	r3, [r7, #4]
1000941c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000941e:	2b0a      	cmp	r3, #10
10009420:	d008      	beq.n	10009434 <UART_SetConfig+0x508>
10009422:	687b      	ldr	r3, [r7, #4]
10009424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009426:	2b0b      	cmp	r3, #11
10009428:	d102      	bne.n	10009430 <UART_SetConfig+0x504>
1000942a:	f44f 7380 	mov.w	r3, #256	; 0x100
1000942e:	e016      	b.n	1000945e <UART_SetConfig+0x532>
10009430:	2301      	movs	r3, #1
10009432:	e014      	b.n	1000945e <UART_SetConfig+0x532>
10009434:	2380      	movs	r3, #128	; 0x80
10009436:	e012      	b.n	1000945e <UART_SetConfig+0x532>
10009438:	2340      	movs	r3, #64	; 0x40
1000943a:	e010      	b.n	1000945e <UART_SetConfig+0x532>
1000943c:	2320      	movs	r3, #32
1000943e:	e00e      	b.n	1000945e <UART_SetConfig+0x532>
10009440:	2310      	movs	r3, #16
10009442:	e00c      	b.n	1000945e <UART_SetConfig+0x532>
10009444:	230c      	movs	r3, #12
10009446:	e00a      	b.n	1000945e <UART_SetConfig+0x532>
10009448:	230a      	movs	r3, #10
1000944a:	e008      	b.n	1000945e <UART_SetConfig+0x532>
1000944c:	2308      	movs	r3, #8
1000944e:	e006      	b.n	1000945e <UART_SetConfig+0x532>
10009450:	2306      	movs	r3, #6
10009452:	e004      	b.n	1000945e <UART_SetConfig+0x532>
10009454:	2304      	movs	r3, #4
10009456:	e002      	b.n	1000945e <UART_SetConfig+0x532>
10009458:	2302      	movs	r3, #2
1000945a:	e000      	b.n	1000945e <UART_SetConfig+0x532>
1000945c:	2301      	movs	r3, #1
1000945e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10009460:	fbb2 f3f3 	udiv	r3, r2, r3
10009464:	005a      	lsls	r2, r3, #1
10009466:	687b      	ldr	r3, [r7, #4]
10009468:	685b      	ldr	r3, [r3, #4]
1000946a:	085b      	lsrs	r3, r3, #1
1000946c:	441a      	add	r2, r3
1000946e:	687b      	ldr	r3, [r7, #4]
10009470:	685b      	ldr	r3, [r3, #4]
10009472:	fbb2 f3f3 	udiv	r3, r2, r3
10009476:	b29b      	uxth	r3, r3
10009478:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000947a:	e286      	b.n	1000998a <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
1000947c:	f7fb fd5d 	bl	10004f3a <HAL_RCC_GetPCLK2Freq>
10009480:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009482:	687b      	ldr	r3, [r7, #4]
10009484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009486:	2b00      	cmp	r3, #0
10009488:	d048      	beq.n	1000951c <UART_SetConfig+0x5f0>
1000948a:	687b      	ldr	r3, [r7, #4]
1000948c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000948e:	2b01      	cmp	r3, #1
10009490:	d042      	beq.n	10009518 <UART_SetConfig+0x5ec>
10009492:	687b      	ldr	r3, [r7, #4]
10009494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009496:	2b02      	cmp	r3, #2
10009498:	d03c      	beq.n	10009514 <UART_SetConfig+0x5e8>
1000949a:	687b      	ldr	r3, [r7, #4]
1000949c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000949e:	2b03      	cmp	r3, #3
100094a0:	d036      	beq.n	10009510 <UART_SetConfig+0x5e4>
100094a2:	687b      	ldr	r3, [r7, #4]
100094a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100094a6:	2b04      	cmp	r3, #4
100094a8:	d030      	beq.n	1000950c <UART_SetConfig+0x5e0>
100094aa:	687b      	ldr	r3, [r7, #4]
100094ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100094ae:	2b05      	cmp	r3, #5
100094b0:	d02a      	beq.n	10009508 <UART_SetConfig+0x5dc>
100094b2:	687b      	ldr	r3, [r7, #4]
100094b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100094b6:	2b06      	cmp	r3, #6
100094b8:	d024      	beq.n	10009504 <UART_SetConfig+0x5d8>
100094ba:	687b      	ldr	r3, [r7, #4]
100094bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100094be:	2b07      	cmp	r3, #7
100094c0:	d01e      	beq.n	10009500 <UART_SetConfig+0x5d4>
100094c2:	687b      	ldr	r3, [r7, #4]
100094c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100094c6:	2b08      	cmp	r3, #8
100094c8:	d014      	beq.n	100094f4 <UART_SetConfig+0x5c8>
100094ca:	687b      	ldr	r3, [r7, #4]
100094cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100094ce:	2b09      	cmp	r3, #9
100094d0:	d00e      	beq.n	100094f0 <UART_SetConfig+0x5c4>
100094d2:	687b      	ldr	r3, [r7, #4]
100094d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100094d6:	2b0a      	cmp	r3, #10
100094d8:	d008      	beq.n	100094ec <UART_SetConfig+0x5c0>
100094da:	687b      	ldr	r3, [r7, #4]
100094dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100094de:	2b0b      	cmp	r3, #11
100094e0:	d102      	bne.n	100094e8 <UART_SetConfig+0x5bc>
100094e2:	f44f 7380 	mov.w	r3, #256	; 0x100
100094e6:	e01a      	b.n	1000951e <UART_SetConfig+0x5f2>
100094e8:	2301      	movs	r3, #1
100094ea:	e018      	b.n	1000951e <UART_SetConfig+0x5f2>
100094ec:	2380      	movs	r3, #128	; 0x80
100094ee:	e016      	b.n	1000951e <UART_SetConfig+0x5f2>
100094f0:	2340      	movs	r3, #64	; 0x40
100094f2:	e014      	b.n	1000951e <UART_SetConfig+0x5f2>
100094f4:	2320      	movs	r3, #32
100094f6:	e012      	b.n	1000951e <UART_SetConfig+0x5f2>
100094f8:	40018000 	.word	0x40018000
100094fc:	40019000 	.word	0x40019000
10009500:	2310      	movs	r3, #16
10009502:	e00c      	b.n	1000951e <UART_SetConfig+0x5f2>
10009504:	230c      	movs	r3, #12
10009506:	e00a      	b.n	1000951e <UART_SetConfig+0x5f2>
10009508:	230a      	movs	r3, #10
1000950a:	e008      	b.n	1000951e <UART_SetConfig+0x5f2>
1000950c:	2308      	movs	r3, #8
1000950e:	e006      	b.n	1000951e <UART_SetConfig+0x5f2>
10009510:	2306      	movs	r3, #6
10009512:	e004      	b.n	1000951e <UART_SetConfig+0x5f2>
10009514:	2304      	movs	r3, #4
10009516:	e002      	b.n	1000951e <UART_SetConfig+0x5f2>
10009518:	2302      	movs	r3, #2
1000951a:	e000      	b.n	1000951e <UART_SetConfig+0x5f2>
1000951c:	2301      	movs	r3, #1
1000951e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10009520:	fbb2 f3f3 	udiv	r3, r2, r3
10009524:	005a      	lsls	r2, r3, #1
10009526:	687b      	ldr	r3, [r7, #4]
10009528:	685b      	ldr	r3, [r3, #4]
1000952a:	085b      	lsrs	r3, r3, #1
1000952c:	441a      	add	r2, r3
1000952e:	687b      	ldr	r3, [r7, #4]
10009530:	685b      	ldr	r3, [r3, #4]
10009532:	fbb2 f3f3 	udiv	r3, r2, r3
10009536:	b29b      	uxth	r3, r3
10009538:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000953a:	e226      	b.n	1000998a <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PCLK5:
        pclk = HAL_RCC_GetPCLK5Freq();
1000953c:	f7fb fd33 	bl	10004fa6 <HAL_RCC_GetPCLK5Freq>
10009540:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009542:	687b      	ldr	r3, [r7, #4]
10009544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009546:	2b00      	cmp	r3, #0
10009548:	d044      	beq.n	100095d4 <UART_SetConfig+0x6a8>
1000954a:	687b      	ldr	r3, [r7, #4]
1000954c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000954e:	2b01      	cmp	r3, #1
10009550:	d03e      	beq.n	100095d0 <UART_SetConfig+0x6a4>
10009552:	687b      	ldr	r3, [r7, #4]
10009554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009556:	2b02      	cmp	r3, #2
10009558:	d038      	beq.n	100095cc <UART_SetConfig+0x6a0>
1000955a:	687b      	ldr	r3, [r7, #4]
1000955c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000955e:	2b03      	cmp	r3, #3
10009560:	d032      	beq.n	100095c8 <UART_SetConfig+0x69c>
10009562:	687b      	ldr	r3, [r7, #4]
10009564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009566:	2b04      	cmp	r3, #4
10009568:	d02c      	beq.n	100095c4 <UART_SetConfig+0x698>
1000956a:	687b      	ldr	r3, [r7, #4]
1000956c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000956e:	2b05      	cmp	r3, #5
10009570:	d026      	beq.n	100095c0 <UART_SetConfig+0x694>
10009572:	687b      	ldr	r3, [r7, #4]
10009574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009576:	2b06      	cmp	r3, #6
10009578:	d020      	beq.n	100095bc <UART_SetConfig+0x690>
1000957a:	687b      	ldr	r3, [r7, #4]
1000957c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000957e:	2b07      	cmp	r3, #7
10009580:	d01a      	beq.n	100095b8 <UART_SetConfig+0x68c>
10009582:	687b      	ldr	r3, [r7, #4]
10009584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009586:	2b08      	cmp	r3, #8
10009588:	d014      	beq.n	100095b4 <UART_SetConfig+0x688>
1000958a:	687b      	ldr	r3, [r7, #4]
1000958c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000958e:	2b09      	cmp	r3, #9
10009590:	d00e      	beq.n	100095b0 <UART_SetConfig+0x684>
10009592:	687b      	ldr	r3, [r7, #4]
10009594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009596:	2b0a      	cmp	r3, #10
10009598:	d008      	beq.n	100095ac <UART_SetConfig+0x680>
1000959a:	687b      	ldr	r3, [r7, #4]
1000959c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000959e:	2b0b      	cmp	r3, #11
100095a0:	d102      	bne.n	100095a8 <UART_SetConfig+0x67c>
100095a2:	f44f 7380 	mov.w	r3, #256	; 0x100
100095a6:	e016      	b.n	100095d6 <UART_SetConfig+0x6aa>
100095a8:	2301      	movs	r3, #1
100095aa:	e014      	b.n	100095d6 <UART_SetConfig+0x6aa>
100095ac:	2380      	movs	r3, #128	; 0x80
100095ae:	e012      	b.n	100095d6 <UART_SetConfig+0x6aa>
100095b0:	2340      	movs	r3, #64	; 0x40
100095b2:	e010      	b.n	100095d6 <UART_SetConfig+0x6aa>
100095b4:	2320      	movs	r3, #32
100095b6:	e00e      	b.n	100095d6 <UART_SetConfig+0x6aa>
100095b8:	2310      	movs	r3, #16
100095ba:	e00c      	b.n	100095d6 <UART_SetConfig+0x6aa>
100095bc:	230c      	movs	r3, #12
100095be:	e00a      	b.n	100095d6 <UART_SetConfig+0x6aa>
100095c0:	230a      	movs	r3, #10
100095c2:	e008      	b.n	100095d6 <UART_SetConfig+0x6aa>
100095c4:	2308      	movs	r3, #8
100095c6:	e006      	b.n	100095d6 <UART_SetConfig+0x6aa>
100095c8:	2306      	movs	r3, #6
100095ca:	e004      	b.n	100095d6 <UART_SetConfig+0x6aa>
100095cc:	2304      	movs	r3, #4
100095ce:	e002      	b.n	100095d6 <UART_SetConfig+0x6aa>
100095d0:	2302      	movs	r3, #2
100095d2:	e000      	b.n	100095d6 <UART_SetConfig+0x6aa>
100095d4:	2301      	movs	r3, #1
100095d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100095d8:	fbb2 f3f3 	udiv	r3, r2, r3
100095dc:	005a      	lsls	r2, r3, #1
100095de:	687b      	ldr	r3, [r7, #4]
100095e0:	685b      	ldr	r3, [r3, #4]
100095e2:	085b      	lsrs	r3, r3, #1
100095e4:	441a      	add	r2, r3
100095e6:	687b      	ldr	r3, [r7, #4]
100095e8:	685b      	ldr	r3, [r3, #4]
100095ea:	fbb2 f3f3 	udiv	r3, r2, r3
100095ee:	b29b      	uxth	r3, r3
100095f0:	633b      	str	r3, [r7, #48]	; 0x30
        break;
100095f2:	e1ca      	b.n	1000998a <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PLL3Q:
        HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100095f4:	f107 0314 	add.w	r3, r7, #20
100095f8:	4618      	mov	r0, r3
100095fa:	f7fb fa81 	bl	10004b00 <HAL_RCC_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100095fe:	69ba      	ldr	r2, [r7, #24]
10009600:	687b      	ldr	r3, [r7, #4]
10009602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009604:	2b00      	cmp	r3, #0
10009606:	d044      	beq.n	10009692 <UART_SetConfig+0x766>
10009608:	687b      	ldr	r3, [r7, #4]
1000960a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000960c:	2b01      	cmp	r3, #1
1000960e:	d03e      	beq.n	1000968e <UART_SetConfig+0x762>
10009610:	687b      	ldr	r3, [r7, #4]
10009612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009614:	2b02      	cmp	r3, #2
10009616:	d038      	beq.n	1000968a <UART_SetConfig+0x75e>
10009618:	687b      	ldr	r3, [r7, #4]
1000961a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000961c:	2b03      	cmp	r3, #3
1000961e:	d032      	beq.n	10009686 <UART_SetConfig+0x75a>
10009620:	687b      	ldr	r3, [r7, #4]
10009622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009624:	2b04      	cmp	r3, #4
10009626:	d02c      	beq.n	10009682 <UART_SetConfig+0x756>
10009628:	687b      	ldr	r3, [r7, #4]
1000962a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000962c:	2b05      	cmp	r3, #5
1000962e:	d026      	beq.n	1000967e <UART_SetConfig+0x752>
10009630:	687b      	ldr	r3, [r7, #4]
10009632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009634:	2b06      	cmp	r3, #6
10009636:	d020      	beq.n	1000967a <UART_SetConfig+0x74e>
10009638:	687b      	ldr	r3, [r7, #4]
1000963a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000963c:	2b07      	cmp	r3, #7
1000963e:	d01a      	beq.n	10009676 <UART_SetConfig+0x74a>
10009640:	687b      	ldr	r3, [r7, #4]
10009642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009644:	2b08      	cmp	r3, #8
10009646:	d014      	beq.n	10009672 <UART_SetConfig+0x746>
10009648:	687b      	ldr	r3, [r7, #4]
1000964a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000964c:	2b09      	cmp	r3, #9
1000964e:	d00e      	beq.n	1000966e <UART_SetConfig+0x742>
10009650:	687b      	ldr	r3, [r7, #4]
10009652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009654:	2b0a      	cmp	r3, #10
10009656:	d008      	beq.n	1000966a <UART_SetConfig+0x73e>
10009658:	687b      	ldr	r3, [r7, #4]
1000965a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000965c:	2b0b      	cmp	r3, #11
1000965e:	d102      	bne.n	10009666 <UART_SetConfig+0x73a>
10009660:	f44f 7380 	mov.w	r3, #256	; 0x100
10009664:	e016      	b.n	10009694 <UART_SetConfig+0x768>
10009666:	2301      	movs	r3, #1
10009668:	e014      	b.n	10009694 <UART_SetConfig+0x768>
1000966a:	2380      	movs	r3, #128	; 0x80
1000966c:	e012      	b.n	10009694 <UART_SetConfig+0x768>
1000966e:	2340      	movs	r3, #64	; 0x40
10009670:	e010      	b.n	10009694 <UART_SetConfig+0x768>
10009672:	2320      	movs	r3, #32
10009674:	e00e      	b.n	10009694 <UART_SetConfig+0x768>
10009676:	2310      	movs	r3, #16
10009678:	e00c      	b.n	10009694 <UART_SetConfig+0x768>
1000967a:	230c      	movs	r3, #12
1000967c:	e00a      	b.n	10009694 <UART_SetConfig+0x768>
1000967e:	230a      	movs	r3, #10
10009680:	e008      	b.n	10009694 <UART_SetConfig+0x768>
10009682:	2308      	movs	r3, #8
10009684:	e006      	b.n	10009694 <UART_SetConfig+0x768>
10009686:	2306      	movs	r3, #6
10009688:	e004      	b.n	10009694 <UART_SetConfig+0x768>
1000968a:	2304      	movs	r3, #4
1000968c:	e002      	b.n	10009694 <UART_SetConfig+0x768>
1000968e:	2302      	movs	r3, #2
10009690:	e000      	b.n	10009694 <UART_SetConfig+0x768>
10009692:	2301      	movs	r3, #1
10009694:	fbb2 f3f3 	udiv	r3, r2, r3
10009698:	005a      	lsls	r2, r3, #1
1000969a:	687b      	ldr	r3, [r7, #4]
1000969c:	685b      	ldr	r3, [r3, #4]
1000969e:	085b      	lsrs	r3, r3, #1
100096a0:	441a      	add	r2, r3
100096a2:	687b      	ldr	r3, [r7, #4]
100096a4:	685b      	ldr	r3, [r3, #4]
100096a6:	fbb2 f3f3 	udiv	r3, r2, r3
100096aa:	b29b      	uxth	r3, r3
100096ac:	633b      	str	r3, [r7, #48]	; 0x30
        break;
100096ae:	e16c      	b.n	1000998a <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PLL4Q:
        HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100096b0:	f107 0308 	add.w	r3, r7, #8
100096b4:	4618      	mov	r0, r3
100096b6:	f7fb fb1d 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll4_clocks.PLL4_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100096ba:	68fa      	ldr	r2, [r7, #12]
100096bc:	687b      	ldr	r3, [r7, #4]
100096be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100096c0:	2b00      	cmp	r3, #0
100096c2:	d044      	beq.n	1000974e <UART_SetConfig+0x822>
100096c4:	687b      	ldr	r3, [r7, #4]
100096c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100096c8:	2b01      	cmp	r3, #1
100096ca:	d03e      	beq.n	1000974a <UART_SetConfig+0x81e>
100096cc:	687b      	ldr	r3, [r7, #4]
100096ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100096d0:	2b02      	cmp	r3, #2
100096d2:	d038      	beq.n	10009746 <UART_SetConfig+0x81a>
100096d4:	687b      	ldr	r3, [r7, #4]
100096d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100096d8:	2b03      	cmp	r3, #3
100096da:	d032      	beq.n	10009742 <UART_SetConfig+0x816>
100096dc:	687b      	ldr	r3, [r7, #4]
100096de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100096e0:	2b04      	cmp	r3, #4
100096e2:	d02c      	beq.n	1000973e <UART_SetConfig+0x812>
100096e4:	687b      	ldr	r3, [r7, #4]
100096e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100096e8:	2b05      	cmp	r3, #5
100096ea:	d026      	beq.n	1000973a <UART_SetConfig+0x80e>
100096ec:	687b      	ldr	r3, [r7, #4]
100096ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100096f0:	2b06      	cmp	r3, #6
100096f2:	d020      	beq.n	10009736 <UART_SetConfig+0x80a>
100096f4:	687b      	ldr	r3, [r7, #4]
100096f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100096f8:	2b07      	cmp	r3, #7
100096fa:	d01a      	beq.n	10009732 <UART_SetConfig+0x806>
100096fc:	687b      	ldr	r3, [r7, #4]
100096fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009700:	2b08      	cmp	r3, #8
10009702:	d014      	beq.n	1000972e <UART_SetConfig+0x802>
10009704:	687b      	ldr	r3, [r7, #4]
10009706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009708:	2b09      	cmp	r3, #9
1000970a:	d00e      	beq.n	1000972a <UART_SetConfig+0x7fe>
1000970c:	687b      	ldr	r3, [r7, #4]
1000970e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009710:	2b0a      	cmp	r3, #10
10009712:	d008      	beq.n	10009726 <UART_SetConfig+0x7fa>
10009714:	687b      	ldr	r3, [r7, #4]
10009716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009718:	2b0b      	cmp	r3, #11
1000971a:	d102      	bne.n	10009722 <UART_SetConfig+0x7f6>
1000971c:	f44f 7380 	mov.w	r3, #256	; 0x100
10009720:	e016      	b.n	10009750 <UART_SetConfig+0x824>
10009722:	2301      	movs	r3, #1
10009724:	e014      	b.n	10009750 <UART_SetConfig+0x824>
10009726:	2380      	movs	r3, #128	; 0x80
10009728:	e012      	b.n	10009750 <UART_SetConfig+0x824>
1000972a:	2340      	movs	r3, #64	; 0x40
1000972c:	e010      	b.n	10009750 <UART_SetConfig+0x824>
1000972e:	2320      	movs	r3, #32
10009730:	e00e      	b.n	10009750 <UART_SetConfig+0x824>
10009732:	2310      	movs	r3, #16
10009734:	e00c      	b.n	10009750 <UART_SetConfig+0x824>
10009736:	230c      	movs	r3, #12
10009738:	e00a      	b.n	10009750 <UART_SetConfig+0x824>
1000973a:	230a      	movs	r3, #10
1000973c:	e008      	b.n	10009750 <UART_SetConfig+0x824>
1000973e:	2308      	movs	r3, #8
10009740:	e006      	b.n	10009750 <UART_SetConfig+0x824>
10009742:	2306      	movs	r3, #6
10009744:	e004      	b.n	10009750 <UART_SetConfig+0x824>
10009746:	2304      	movs	r3, #4
10009748:	e002      	b.n	10009750 <UART_SetConfig+0x824>
1000974a:	2302      	movs	r3, #2
1000974c:	e000      	b.n	10009750 <UART_SetConfig+0x824>
1000974e:	2301      	movs	r3, #1
10009750:	fbb2 f3f3 	udiv	r3, r2, r3
10009754:	005a      	lsls	r2, r3, #1
10009756:	687b      	ldr	r3, [r7, #4]
10009758:	685b      	ldr	r3, [r3, #4]
1000975a:	085b      	lsrs	r3, r3, #1
1000975c:	441a      	add	r2, r3
1000975e:	687b      	ldr	r3, [r7, #4]
10009760:	685b      	ldr	r3, [r3, #4]
10009762:	fbb2 f3f3 	udiv	r3, r2, r3
10009766:	b29b      	uxth	r3, r3
10009768:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000976a:	e10e      	b.n	1000998a <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000976c:	687b      	ldr	r3, [r7, #4]
1000976e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009770:	2b00      	cmp	r3, #0
10009772:	d044      	beq.n	100097fe <UART_SetConfig+0x8d2>
10009774:	687b      	ldr	r3, [r7, #4]
10009776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009778:	2b01      	cmp	r3, #1
1000977a:	d03e      	beq.n	100097fa <UART_SetConfig+0x8ce>
1000977c:	687b      	ldr	r3, [r7, #4]
1000977e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009780:	2b02      	cmp	r3, #2
10009782:	d038      	beq.n	100097f6 <UART_SetConfig+0x8ca>
10009784:	687b      	ldr	r3, [r7, #4]
10009786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009788:	2b03      	cmp	r3, #3
1000978a:	d032      	beq.n	100097f2 <UART_SetConfig+0x8c6>
1000978c:	687b      	ldr	r3, [r7, #4]
1000978e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009790:	2b04      	cmp	r3, #4
10009792:	d02c      	beq.n	100097ee <UART_SetConfig+0x8c2>
10009794:	687b      	ldr	r3, [r7, #4]
10009796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009798:	2b05      	cmp	r3, #5
1000979a:	d026      	beq.n	100097ea <UART_SetConfig+0x8be>
1000979c:	687b      	ldr	r3, [r7, #4]
1000979e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100097a0:	2b06      	cmp	r3, #6
100097a2:	d020      	beq.n	100097e6 <UART_SetConfig+0x8ba>
100097a4:	687b      	ldr	r3, [r7, #4]
100097a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100097a8:	2b07      	cmp	r3, #7
100097aa:	d01a      	beq.n	100097e2 <UART_SetConfig+0x8b6>
100097ac:	687b      	ldr	r3, [r7, #4]
100097ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100097b0:	2b08      	cmp	r3, #8
100097b2:	d014      	beq.n	100097de <UART_SetConfig+0x8b2>
100097b4:	687b      	ldr	r3, [r7, #4]
100097b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100097b8:	2b09      	cmp	r3, #9
100097ba:	d00e      	beq.n	100097da <UART_SetConfig+0x8ae>
100097bc:	687b      	ldr	r3, [r7, #4]
100097be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100097c0:	2b0a      	cmp	r3, #10
100097c2:	d008      	beq.n	100097d6 <UART_SetConfig+0x8aa>
100097c4:	687b      	ldr	r3, [r7, #4]
100097c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100097c8:	2b0b      	cmp	r3, #11
100097ca:	d102      	bne.n	100097d2 <UART_SetConfig+0x8a6>
100097cc:	f44f 7380 	mov.w	r3, #256	; 0x100
100097d0:	e016      	b.n	10009800 <UART_SetConfig+0x8d4>
100097d2:	2301      	movs	r3, #1
100097d4:	e014      	b.n	10009800 <UART_SetConfig+0x8d4>
100097d6:	2380      	movs	r3, #128	; 0x80
100097d8:	e012      	b.n	10009800 <UART_SetConfig+0x8d4>
100097da:	2340      	movs	r3, #64	; 0x40
100097dc:	e010      	b.n	10009800 <UART_SetConfig+0x8d4>
100097de:	2320      	movs	r3, #32
100097e0:	e00e      	b.n	10009800 <UART_SetConfig+0x8d4>
100097e2:	2310      	movs	r3, #16
100097e4:	e00c      	b.n	10009800 <UART_SetConfig+0x8d4>
100097e6:	230c      	movs	r3, #12
100097e8:	e00a      	b.n	10009800 <UART_SetConfig+0x8d4>
100097ea:	230a      	movs	r3, #10
100097ec:	e008      	b.n	10009800 <UART_SetConfig+0x8d4>
100097ee:	2308      	movs	r3, #8
100097f0:	e006      	b.n	10009800 <UART_SetConfig+0x8d4>
100097f2:	2306      	movs	r3, #6
100097f4:	e004      	b.n	10009800 <UART_SetConfig+0x8d4>
100097f6:	2304      	movs	r3, #4
100097f8:	e002      	b.n	10009800 <UART_SetConfig+0x8d4>
100097fa:	2302      	movs	r3, #2
100097fc:	e000      	b.n	10009800 <UART_SetConfig+0x8d4>
100097fe:	2301      	movs	r3, #1
10009800:	4a9a      	ldr	r2, [pc, #616]	; (10009a6c <UART_SetConfig+0xb40>)
10009802:	fbb2 f3f3 	udiv	r3, r2, r3
10009806:	005a      	lsls	r2, r3, #1
10009808:	687b      	ldr	r3, [r7, #4]
1000980a:	685b      	ldr	r3, [r3, #4]
1000980c:	085b      	lsrs	r3, r3, #1
1000980e:	441a      	add	r2, r3
10009810:	687b      	ldr	r3, [r7, #4]
10009812:	685b      	ldr	r3, [r3, #4]
10009814:	fbb2 f3f3 	udiv	r3, r2, r3
10009818:	b29b      	uxth	r3, r3
1000981a:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000981c:	e0b5      	b.n	1000998a <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000981e:	687b      	ldr	r3, [r7, #4]
10009820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009822:	2b00      	cmp	r3, #0
10009824:	d044      	beq.n	100098b0 <UART_SetConfig+0x984>
10009826:	687b      	ldr	r3, [r7, #4]
10009828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000982a:	2b01      	cmp	r3, #1
1000982c:	d03e      	beq.n	100098ac <UART_SetConfig+0x980>
1000982e:	687b      	ldr	r3, [r7, #4]
10009830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009832:	2b02      	cmp	r3, #2
10009834:	d038      	beq.n	100098a8 <UART_SetConfig+0x97c>
10009836:	687b      	ldr	r3, [r7, #4]
10009838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000983a:	2b03      	cmp	r3, #3
1000983c:	d032      	beq.n	100098a4 <UART_SetConfig+0x978>
1000983e:	687b      	ldr	r3, [r7, #4]
10009840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009842:	2b04      	cmp	r3, #4
10009844:	d02c      	beq.n	100098a0 <UART_SetConfig+0x974>
10009846:	687b      	ldr	r3, [r7, #4]
10009848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000984a:	2b05      	cmp	r3, #5
1000984c:	d026      	beq.n	1000989c <UART_SetConfig+0x970>
1000984e:	687b      	ldr	r3, [r7, #4]
10009850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009852:	2b06      	cmp	r3, #6
10009854:	d020      	beq.n	10009898 <UART_SetConfig+0x96c>
10009856:	687b      	ldr	r3, [r7, #4]
10009858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000985a:	2b07      	cmp	r3, #7
1000985c:	d01a      	beq.n	10009894 <UART_SetConfig+0x968>
1000985e:	687b      	ldr	r3, [r7, #4]
10009860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009862:	2b08      	cmp	r3, #8
10009864:	d014      	beq.n	10009890 <UART_SetConfig+0x964>
10009866:	687b      	ldr	r3, [r7, #4]
10009868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000986a:	2b09      	cmp	r3, #9
1000986c:	d00e      	beq.n	1000988c <UART_SetConfig+0x960>
1000986e:	687b      	ldr	r3, [r7, #4]
10009870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009872:	2b0a      	cmp	r3, #10
10009874:	d008      	beq.n	10009888 <UART_SetConfig+0x95c>
10009876:	687b      	ldr	r3, [r7, #4]
10009878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000987a:	2b0b      	cmp	r3, #11
1000987c:	d102      	bne.n	10009884 <UART_SetConfig+0x958>
1000987e:	f44f 7380 	mov.w	r3, #256	; 0x100
10009882:	e016      	b.n	100098b2 <UART_SetConfig+0x986>
10009884:	2301      	movs	r3, #1
10009886:	e014      	b.n	100098b2 <UART_SetConfig+0x986>
10009888:	2380      	movs	r3, #128	; 0x80
1000988a:	e012      	b.n	100098b2 <UART_SetConfig+0x986>
1000988c:	2340      	movs	r3, #64	; 0x40
1000988e:	e010      	b.n	100098b2 <UART_SetConfig+0x986>
10009890:	2320      	movs	r3, #32
10009892:	e00e      	b.n	100098b2 <UART_SetConfig+0x986>
10009894:	2310      	movs	r3, #16
10009896:	e00c      	b.n	100098b2 <UART_SetConfig+0x986>
10009898:	230c      	movs	r3, #12
1000989a:	e00a      	b.n	100098b2 <UART_SetConfig+0x986>
1000989c:	230a      	movs	r3, #10
1000989e:	e008      	b.n	100098b2 <UART_SetConfig+0x986>
100098a0:	2308      	movs	r3, #8
100098a2:	e006      	b.n	100098b2 <UART_SetConfig+0x986>
100098a4:	2306      	movs	r3, #6
100098a6:	e004      	b.n	100098b2 <UART_SetConfig+0x986>
100098a8:	2304      	movs	r3, #4
100098aa:	e002      	b.n	100098b2 <UART_SetConfig+0x986>
100098ac:	2302      	movs	r3, #2
100098ae:	e000      	b.n	100098b2 <UART_SetConfig+0x986>
100098b0:	2301      	movs	r3, #1
100098b2:	4a6f      	ldr	r2, [pc, #444]	; (10009a70 <UART_SetConfig+0xb44>)
100098b4:	fbb2 f3f3 	udiv	r3, r2, r3
100098b8:	005a      	lsls	r2, r3, #1
100098ba:	687b      	ldr	r3, [r7, #4]
100098bc:	685b      	ldr	r3, [r3, #4]
100098be:	085b      	lsrs	r3, r3, #1
100098c0:	441a      	add	r2, r3
100098c2:	687b      	ldr	r3, [r7, #4]
100098c4:	685b      	ldr	r3, [r3, #4]
100098c6:	fbb2 f3f3 	udiv	r3, r2, r3
100098ca:	b29b      	uxth	r3, r3
100098cc:	633b      	str	r3, [r7, #48]	; 0x30
        break;
100098ce:	e05c      	b.n	1000998a <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_HSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100098d0:	687b      	ldr	r3, [r7, #4]
100098d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100098d4:	2b00      	cmp	r3, #0
100098d6:	d044      	beq.n	10009962 <UART_SetConfig+0xa36>
100098d8:	687b      	ldr	r3, [r7, #4]
100098da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100098dc:	2b01      	cmp	r3, #1
100098de:	d03e      	beq.n	1000995e <UART_SetConfig+0xa32>
100098e0:	687b      	ldr	r3, [r7, #4]
100098e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100098e4:	2b02      	cmp	r3, #2
100098e6:	d038      	beq.n	1000995a <UART_SetConfig+0xa2e>
100098e8:	687b      	ldr	r3, [r7, #4]
100098ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100098ec:	2b03      	cmp	r3, #3
100098ee:	d032      	beq.n	10009956 <UART_SetConfig+0xa2a>
100098f0:	687b      	ldr	r3, [r7, #4]
100098f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100098f4:	2b04      	cmp	r3, #4
100098f6:	d02c      	beq.n	10009952 <UART_SetConfig+0xa26>
100098f8:	687b      	ldr	r3, [r7, #4]
100098fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100098fc:	2b05      	cmp	r3, #5
100098fe:	d026      	beq.n	1000994e <UART_SetConfig+0xa22>
10009900:	687b      	ldr	r3, [r7, #4]
10009902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009904:	2b06      	cmp	r3, #6
10009906:	d020      	beq.n	1000994a <UART_SetConfig+0xa1e>
10009908:	687b      	ldr	r3, [r7, #4]
1000990a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000990c:	2b07      	cmp	r3, #7
1000990e:	d01a      	beq.n	10009946 <UART_SetConfig+0xa1a>
10009910:	687b      	ldr	r3, [r7, #4]
10009912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009914:	2b08      	cmp	r3, #8
10009916:	d014      	beq.n	10009942 <UART_SetConfig+0xa16>
10009918:	687b      	ldr	r3, [r7, #4]
1000991a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000991c:	2b09      	cmp	r3, #9
1000991e:	d00e      	beq.n	1000993e <UART_SetConfig+0xa12>
10009920:	687b      	ldr	r3, [r7, #4]
10009922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009924:	2b0a      	cmp	r3, #10
10009926:	d008      	beq.n	1000993a <UART_SetConfig+0xa0e>
10009928:	687b      	ldr	r3, [r7, #4]
1000992a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000992c:	2b0b      	cmp	r3, #11
1000992e:	d102      	bne.n	10009936 <UART_SetConfig+0xa0a>
10009930:	f44f 7380 	mov.w	r3, #256	; 0x100
10009934:	e016      	b.n	10009964 <UART_SetConfig+0xa38>
10009936:	2301      	movs	r3, #1
10009938:	e014      	b.n	10009964 <UART_SetConfig+0xa38>
1000993a:	2380      	movs	r3, #128	; 0x80
1000993c:	e012      	b.n	10009964 <UART_SetConfig+0xa38>
1000993e:	2340      	movs	r3, #64	; 0x40
10009940:	e010      	b.n	10009964 <UART_SetConfig+0xa38>
10009942:	2320      	movs	r3, #32
10009944:	e00e      	b.n	10009964 <UART_SetConfig+0xa38>
10009946:	2310      	movs	r3, #16
10009948:	e00c      	b.n	10009964 <UART_SetConfig+0xa38>
1000994a:	230c      	movs	r3, #12
1000994c:	e00a      	b.n	10009964 <UART_SetConfig+0xa38>
1000994e:	230a      	movs	r3, #10
10009950:	e008      	b.n	10009964 <UART_SetConfig+0xa38>
10009952:	2308      	movs	r3, #8
10009954:	e006      	b.n	10009964 <UART_SetConfig+0xa38>
10009956:	2306      	movs	r3, #6
10009958:	e004      	b.n	10009964 <UART_SetConfig+0xa38>
1000995a:	2304      	movs	r3, #4
1000995c:	e002      	b.n	10009964 <UART_SetConfig+0xa38>
1000995e:	2302      	movs	r3, #2
10009960:	e000      	b.n	10009964 <UART_SetConfig+0xa38>
10009962:	2301      	movs	r3, #1
10009964:	4a43      	ldr	r2, [pc, #268]	; (10009a74 <UART_SetConfig+0xb48>)
10009966:	fbb2 f3f3 	udiv	r3, r2, r3
1000996a:	005a      	lsls	r2, r3, #1
1000996c:	687b      	ldr	r3, [r7, #4]
1000996e:	685b      	ldr	r3, [r3, #4]
10009970:	085b      	lsrs	r3, r3, #1
10009972:	441a      	add	r2, r3
10009974:	687b      	ldr	r3, [r7, #4]
10009976:	685b      	ldr	r3, [r3, #4]
10009978:	fbb2 f3f3 	udiv	r3, r2, r3
1000997c:	b29b      	uxth	r3, r3
1000997e:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009980:	e003      	b.n	1000998a <UART_SetConfig+0xa5e>
      default:
        ret = HAL_ERROR;
10009982:	2301      	movs	r3, #1
10009984:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
10009988:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
1000998a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000998c:	2b0f      	cmp	r3, #15
1000998e:	d916      	bls.n	100099be <UART_SetConfig+0xa92>
10009990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
10009996:	d212      	bcs.n	100099be <UART_SetConfig+0xa92>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
10009998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000999a:	b29b      	uxth	r3, r3
1000999c:	f023 030f 	bic.w	r3, r3, #15
100099a0:	847b      	strh	r3, [r7, #34]	; 0x22
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
100099a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100099a4:	085b      	lsrs	r3, r3, #1
100099a6:	b29b      	uxth	r3, r3
100099a8:	f003 0307 	and.w	r3, r3, #7
100099ac:	b29a      	uxth	r2, r3
100099ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
100099b0:	4313      	orrs	r3, r2
100099b2:	847b      	strh	r3, [r7, #34]	; 0x22
      huart->Instance->BRR = brrtemp;
100099b4:	687b      	ldr	r3, [r7, #4]
100099b6:	681b      	ldr	r3, [r3, #0]
100099b8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
100099ba:	60da      	str	r2, [r3, #12]
100099bc:	e342      	b.n	1000a044 <UART_SetConfig+0x1118>
    }
    else
    {
      ret = HAL_ERROR;
100099be:	2301      	movs	r3, #1
100099c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
100099c4:	e33e      	b.n	1000a044 <UART_SetConfig+0x1118>
    }
  }
  else
  {
    switch (clocksource)
100099c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
100099ca:	2b20      	cmp	r3, #32
100099cc:	dc4a      	bgt.n	10009a64 <UART_SetConfig+0xb38>
100099ce:	2b00      	cmp	r3, #0
100099d0:	f2c0 8325 	blt.w	1000a01e <UART_SetConfig+0x10f2>
100099d4:	2b20      	cmp	r3, #32
100099d6:	f200 8322 	bhi.w	1000a01e <UART_SetConfig+0x10f2>
100099da:	a201      	add	r2, pc, #4	; (adr r2, 100099e0 <UART_SetConfig+0xab4>)
100099dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100099e0:	10009a79 	.word	0x10009a79
100099e4:	10009b2f 	.word	0x10009b2f
100099e8:	10009be5 	.word	0x10009be5
100099ec:	1000a01f 	.word	0x1000a01f
100099f0:	10009c9b 	.word	0x10009c9b
100099f4:	1000a01f 	.word	0x1000a01f
100099f8:	1000a01f 	.word	0x1000a01f
100099fc:	1000a01f 	.word	0x1000a01f
10009a00:	10009d55 	.word	0x10009d55
10009a04:	1000a01f 	.word	0x1000a01f
10009a08:	1000a01f 	.word	0x1000a01f
10009a0c:	1000a01f 	.word	0x1000a01f
10009a10:	1000a01f 	.word	0x1000a01f
10009a14:	1000a01f 	.word	0x1000a01f
10009a18:	1000a01f 	.word	0x1000a01f
10009a1c:	1000a01f 	.word	0x1000a01f
10009a20:	10009e0f 	.word	0x10009e0f
10009a24:	1000a01f 	.word	0x1000a01f
10009a28:	1000a01f 	.word	0x1000a01f
10009a2c:	1000a01f 	.word	0x1000a01f
10009a30:	1000a01f 	.word	0x1000a01f
10009a34:	1000a01f 	.word	0x1000a01f
10009a38:	1000a01f 	.word	0x1000a01f
10009a3c:	1000a01f 	.word	0x1000a01f
10009a40:	1000a01f 	.word	0x1000a01f
10009a44:	1000a01f 	.word	0x1000a01f
10009a48:	1000a01f 	.word	0x1000a01f
10009a4c:	1000a01f 	.word	0x1000a01f
10009a50:	1000a01f 	.word	0x1000a01f
10009a54:	1000a01f 	.word	0x1000a01f
10009a58:	1000a01f 	.word	0x1000a01f
10009a5c:	1000a01f 	.word	0x1000a01f
10009a60:	10009ebf 	.word	0x10009ebf
10009a64:	2b40      	cmp	r3, #64	; 0x40
10009a66:	f000 8282 	beq.w	10009f6e <UART_SetConfig+0x1042>
10009a6a:	e2d8      	b.n	1000a01e <UART_SetConfig+0x10f2>
10009a6c:	03d09000 	.word	0x03d09000
10009a70:	003d0900 	.word	0x003d0900
10009a74:	016e3600 	.word	0x016e3600
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
10009a78:	f7fb fa44 	bl	10004f04 <HAL_RCC_GetPCLK1Freq>
10009a7c:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009a7e:	687b      	ldr	r3, [r7, #4]
10009a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009a82:	2b00      	cmp	r3, #0
10009a84:	d044      	beq.n	10009b10 <UART_SetConfig+0xbe4>
10009a86:	687b      	ldr	r3, [r7, #4]
10009a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009a8a:	2b01      	cmp	r3, #1
10009a8c:	d03e      	beq.n	10009b0c <UART_SetConfig+0xbe0>
10009a8e:	687b      	ldr	r3, [r7, #4]
10009a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009a92:	2b02      	cmp	r3, #2
10009a94:	d038      	beq.n	10009b08 <UART_SetConfig+0xbdc>
10009a96:	687b      	ldr	r3, [r7, #4]
10009a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009a9a:	2b03      	cmp	r3, #3
10009a9c:	d032      	beq.n	10009b04 <UART_SetConfig+0xbd8>
10009a9e:	687b      	ldr	r3, [r7, #4]
10009aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009aa2:	2b04      	cmp	r3, #4
10009aa4:	d02c      	beq.n	10009b00 <UART_SetConfig+0xbd4>
10009aa6:	687b      	ldr	r3, [r7, #4]
10009aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009aaa:	2b05      	cmp	r3, #5
10009aac:	d026      	beq.n	10009afc <UART_SetConfig+0xbd0>
10009aae:	687b      	ldr	r3, [r7, #4]
10009ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ab2:	2b06      	cmp	r3, #6
10009ab4:	d020      	beq.n	10009af8 <UART_SetConfig+0xbcc>
10009ab6:	687b      	ldr	r3, [r7, #4]
10009ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009aba:	2b07      	cmp	r3, #7
10009abc:	d01a      	beq.n	10009af4 <UART_SetConfig+0xbc8>
10009abe:	687b      	ldr	r3, [r7, #4]
10009ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ac2:	2b08      	cmp	r3, #8
10009ac4:	d014      	beq.n	10009af0 <UART_SetConfig+0xbc4>
10009ac6:	687b      	ldr	r3, [r7, #4]
10009ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009aca:	2b09      	cmp	r3, #9
10009acc:	d00e      	beq.n	10009aec <UART_SetConfig+0xbc0>
10009ace:	687b      	ldr	r3, [r7, #4]
10009ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ad2:	2b0a      	cmp	r3, #10
10009ad4:	d008      	beq.n	10009ae8 <UART_SetConfig+0xbbc>
10009ad6:	687b      	ldr	r3, [r7, #4]
10009ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ada:	2b0b      	cmp	r3, #11
10009adc:	d102      	bne.n	10009ae4 <UART_SetConfig+0xbb8>
10009ade:	f44f 7380 	mov.w	r3, #256	; 0x100
10009ae2:	e016      	b.n	10009b12 <UART_SetConfig+0xbe6>
10009ae4:	2301      	movs	r3, #1
10009ae6:	e014      	b.n	10009b12 <UART_SetConfig+0xbe6>
10009ae8:	2380      	movs	r3, #128	; 0x80
10009aea:	e012      	b.n	10009b12 <UART_SetConfig+0xbe6>
10009aec:	2340      	movs	r3, #64	; 0x40
10009aee:	e010      	b.n	10009b12 <UART_SetConfig+0xbe6>
10009af0:	2320      	movs	r3, #32
10009af2:	e00e      	b.n	10009b12 <UART_SetConfig+0xbe6>
10009af4:	2310      	movs	r3, #16
10009af6:	e00c      	b.n	10009b12 <UART_SetConfig+0xbe6>
10009af8:	230c      	movs	r3, #12
10009afa:	e00a      	b.n	10009b12 <UART_SetConfig+0xbe6>
10009afc:	230a      	movs	r3, #10
10009afe:	e008      	b.n	10009b12 <UART_SetConfig+0xbe6>
10009b00:	2308      	movs	r3, #8
10009b02:	e006      	b.n	10009b12 <UART_SetConfig+0xbe6>
10009b04:	2306      	movs	r3, #6
10009b06:	e004      	b.n	10009b12 <UART_SetConfig+0xbe6>
10009b08:	2304      	movs	r3, #4
10009b0a:	e002      	b.n	10009b12 <UART_SetConfig+0xbe6>
10009b0c:	2302      	movs	r3, #2
10009b0e:	e000      	b.n	10009b12 <UART_SetConfig+0xbe6>
10009b10:	2301      	movs	r3, #1
10009b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10009b14:	fbb2 f2f3 	udiv	r2, r2, r3
10009b18:	687b      	ldr	r3, [r7, #4]
10009b1a:	685b      	ldr	r3, [r3, #4]
10009b1c:	085b      	lsrs	r3, r3, #1
10009b1e:	441a      	add	r2, r3
10009b20:	687b      	ldr	r3, [r7, #4]
10009b22:	685b      	ldr	r3, [r3, #4]
10009b24:	fbb2 f3f3 	udiv	r3, r2, r3
10009b28:	b29b      	uxth	r3, r3
10009b2a:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009b2c:	e27b      	b.n	1000a026 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
10009b2e:	f7fb fa04 	bl	10004f3a <HAL_RCC_GetPCLK2Freq>
10009b32:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009b34:	687b      	ldr	r3, [r7, #4]
10009b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b38:	2b00      	cmp	r3, #0
10009b3a:	d044      	beq.n	10009bc6 <UART_SetConfig+0xc9a>
10009b3c:	687b      	ldr	r3, [r7, #4]
10009b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b40:	2b01      	cmp	r3, #1
10009b42:	d03e      	beq.n	10009bc2 <UART_SetConfig+0xc96>
10009b44:	687b      	ldr	r3, [r7, #4]
10009b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b48:	2b02      	cmp	r3, #2
10009b4a:	d038      	beq.n	10009bbe <UART_SetConfig+0xc92>
10009b4c:	687b      	ldr	r3, [r7, #4]
10009b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b50:	2b03      	cmp	r3, #3
10009b52:	d032      	beq.n	10009bba <UART_SetConfig+0xc8e>
10009b54:	687b      	ldr	r3, [r7, #4]
10009b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b58:	2b04      	cmp	r3, #4
10009b5a:	d02c      	beq.n	10009bb6 <UART_SetConfig+0xc8a>
10009b5c:	687b      	ldr	r3, [r7, #4]
10009b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b60:	2b05      	cmp	r3, #5
10009b62:	d026      	beq.n	10009bb2 <UART_SetConfig+0xc86>
10009b64:	687b      	ldr	r3, [r7, #4]
10009b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b68:	2b06      	cmp	r3, #6
10009b6a:	d020      	beq.n	10009bae <UART_SetConfig+0xc82>
10009b6c:	687b      	ldr	r3, [r7, #4]
10009b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b70:	2b07      	cmp	r3, #7
10009b72:	d01a      	beq.n	10009baa <UART_SetConfig+0xc7e>
10009b74:	687b      	ldr	r3, [r7, #4]
10009b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b78:	2b08      	cmp	r3, #8
10009b7a:	d014      	beq.n	10009ba6 <UART_SetConfig+0xc7a>
10009b7c:	687b      	ldr	r3, [r7, #4]
10009b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b80:	2b09      	cmp	r3, #9
10009b82:	d00e      	beq.n	10009ba2 <UART_SetConfig+0xc76>
10009b84:	687b      	ldr	r3, [r7, #4]
10009b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b88:	2b0a      	cmp	r3, #10
10009b8a:	d008      	beq.n	10009b9e <UART_SetConfig+0xc72>
10009b8c:	687b      	ldr	r3, [r7, #4]
10009b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b90:	2b0b      	cmp	r3, #11
10009b92:	d102      	bne.n	10009b9a <UART_SetConfig+0xc6e>
10009b94:	f44f 7380 	mov.w	r3, #256	; 0x100
10009b98:	e016      	b.n	10009bc8 <UART_SetConfig+0xc9c>
10009b9a:	2301      	movs	r3, #1
10009b9c:	e014      	b.n	10009bc8 <UART_SetConfig+0xc9c>
10009b9e:	2380      	movs	r3, #128	; 0x80
10009ba0:	e012      	b.n	10009bc8 <UART_SetConfig+0xc9c>
10009ba2:	2340      	movs	r3, #64	; 0x40
10009ba4:	e010      	b.n	10009bc8 <UART_SetConfig+0xc9c>
10009ba6:	2320      	movs	r3, #32
10009ba8:	e00e      	b.n	10009bc8 <UART_SetConfig+0xc9c>
10009baa:	2310      	movs	r3, #16
10009bac:	e00c      	b.n	10009bc8 <UART_SetConfig+0xc9c>
10009bae:	230c      	movs	r3, #12
10009bb0:	e00a      	b.n	10009bc8 <UART_SetConfig+0xc9c>
10009bb2:	230a      	movs	r3, #10
10009bb4:	e008      	b.n	10009bc8 <UART_SetConfig+0xc9c>
10009bb6:	2308      	movs	r3, #8
10009bb8:	e006      	b.n	10009bc8 <UART_SetConfig+0xc9c>
10009bba:	2306      	movs	r3, #6
10009bbc:	e004      	b.n	10009bc8 <UART_SetConfig+0xc9c>
10009bbe:	2304      	movs	r3, #4
10009bc0:	e002      	b.n	10009bc8 <UART_SetConfig+0xc9c>
10009bc2:	2302      	movs	r3, #2
10009bc4:	e000      	b.n	10009bc8 <UART_SetConfig+0xc9c>
10009bc6:	2301      	movs	r3, #1
10009bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10009bca:	fbb2 f2f3 	udiv	r2, r2, r3
10009bce:	687b      	ldr	r3, [r7, #4]
10009bd0:	685b      	ldr	r3, [r3, #4]
10009bd2:	085b      	lsrs	r3, r3, #1
10009bd4:	441a      	add	r2, r3
10009bd6:	687b      	ldr	r3, [r7, #4]
10009bd8:	685b      	ldr	r3, [r3, #4]
10009bda:	fbb2 f3f3 	udiv	r3, r2, r3
10009bde:	b29b      	uxth	r3, r3
10009be0:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009be2:	e220      	b.n	1000a026 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PCLK5:
        pclk = HAL_RCC_GetPCLK5Freq();
10009be4:	f7fb f9df 	bl	10004fa6 <HAL_RCC_GetPCLK5Freq>
10009be8:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009bea:	687b      	ldr	r3, [r7, #4]
10009bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009bee:	2b00      	cmp	r3, #0
10009bf0:	d044      	beq.n	10009c7c <UART_SetConfig+0xd50>
10009bf2:	687b      	ldr	r3, [r7, #4]
10009bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009bf6:	2b01      	cmp	r3, #1
10009bf8:	d03e      	beq.n	10009c78 <UART_SetConfig+0xd4c>
10009bfa:	687b      	ldr	r3, [r7, #4]
10009bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009bfe:	2b02      	cmp	r3, #2
10009c00:	d038      	beq.n	10009c74 <UART_SetConfig+0xd48>
10009c02:	687b      	ldr	r3, [r7, #4]
10009c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c06:	2b03      	cmp	r3, #3
10009c08:	d032      	beq.n	10009c70 <UART_SetConfig+0xd44>
10009c0a:	687b      	ldr	r3, [r7, #4]
10009c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c0e:	2b04      	cmp	r3, #4
10009c10:	d02c      	beq.n	10009c6c <UART_SetConfig+0xd40>
10009c12:	687b      	ldr	r3, [r7, #4]
10009c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c16:	2b05      	cmp	r3, #5
10009c18:	d026      	beq.n	10009c68 <UART_SetConfig+0xd3c>
10009c1a:	687b      	ldr	r3, [r7, #4]
10009c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c1e:	2b06      	cmp	r3, #6
10009c20:	d020      	beq.n	10009c64 <UART_SetConfig+0xd38>
10009c22:	687b      	ldr	r3, [r7, #4]
10009c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c26:	2b07      	cmp	r3, #7
10009c28:	d01a      	beq.n	10009c60 <UART_SetConfig+0xd34>
10009c2a:	687b      	ldr	r3, [r7, #4]
10009c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c2e:	2b08      	cmp	r3, #8
10009c30:	d014      	beq.n	10009c5c <UART_SetConfig+0xd30>
10009c32:	687b      	ldr	r3, [r7, #4]
10009c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c36:	2b09      	cmp	r3, #9
10009c38:	d00e      	beq.n	10009c58 <UART_SetConfig+0xd2c>
10009c3a:	687b      	ldr	r3, [r7, #4]
10009c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c3e:	2b0a      	cmp	r3, #10
10009c40:	d008      	beq.n	10009c54 <UART_SetConfig+0xd28>
10009c42:	687b      	ldr	r3, [r7, #4]
10009c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c46:	2b0b      	cmp	r3, #11
10009c48:	d102      	bne.n	10009c50 <UART_SetConfig+0xd24>
10009c4a:	f44f 7380 	mov.w	r3, #256	; 0x100
10009c4e:	e016      	b.n	10009c7e <UART_SetConfig+0xd52>
10009c50:	2301      	movs	r3, #1
10009c52:	e014      	b.n	10009c7e <UART_SetConfig+0xd52>
10009c54:	2380      	movs	r3, #128	; 0x80
10009c56:	e012      	b.n	10009c7e <UART_SetConfig+0xd52>
10009c58:	2340      	movs	r3, #64	; 0x40
10009c5a:	e010      	b.n	10009c7e <UART_SetConfig+0xd52>
10009c5c:	2320      	movs	r3, #32
10009c5e:	e00e      	b.n	10009c7e <UART_SetConfig+0xd52>
10009c60:	2310      	movs	r3, #16
10009c62:	e00c      	b.n	10009c7e <UART_SetConfig+0xd52>
10009c64:	230c      	movs	r3, #12
10009c66:	e00a      	b.n	10009c7e <UART_SetConfig+0xd52>
10009c68:	230a      	movs	r3, #10
10009c6a:	e008      	b.n	10009c7e <UART_SetConfig+0xd52>
10009c6c:	2308      	movs	r3, #8
10009c6e:	e006      	b.n	10009c7e <UART_SetConfig+0xd52>
10009c70:	2306      	movs	r3, #6
10009c72:	e004      	b.n	10009c7e <UART_SetConfig+0xd52>
10009c74:	2304      	movs	r3, #4
10009c76:	e002      	b.n	10009c7e <UART_SetConfig+0xd52>
10009c78:	2302      	movs	r3, #2
10009c7a:	e000      	b.n	10009c7e <UART_SetConfig+0xd52>
10009c7c:	2301      	movs	r3, #1
10009c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10009c80:	fbb2 f2f3 	udiv	r2, r2, r3
10009c84:	687b      	ldr	r3, [r7, #4]
10009c86:	685b      	ldr	r3, [r3, #4]
10009c88:	085b      	lsrs	r3, r3, #1
10009c8a:	441a      	add	r2, r3
10009c8c:	687b      	ldr	r3, [r7, #4]
10009c8e:	685b      	ldr	r3, [r3, #4]
10009c90:	fbb2 f3f3 	udiv	r3, r2, r3
10009c94:	b29b      	uxth	r3, r3
10009c96:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009c98:	e1c5      	b.n	1000a026 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PLL3Q:
        HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10009c9a:	f107 0314 	add.w	r3, r7, #20
10009c9e:	4618      	mov	r0, r3
10009ca0:	f7fa ff2e 	bl	10004b00 <HAL_RCC_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009ca4:	69ba      	ldr	r2, [r7, #24]
10009ca6:	687b      	ldr	r3, [r7, #4]
10009ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009caa:	2b00      	cmp	r3, #0
10009cac:	d044      	beq.n	10009d38 <UART_SetConfig+0xe0c>
10009cae:	687b      	ldr	r3, [r7, #4]
10009cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009cb2:	2b01      	cmp	r3, #1
10009cb4:	d03e      	beq.n	10009d34 <UART_SetConfig+0xe08>
10009cb6:	687b      	ldr	r3, [r7, #4]
10009cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009cba:	2b02      	cmp	r3, #2
10009cbc:	d038      	beq.n	10009d30 <UART_SetConfig+0xe04>
10009cbe:	687b      	ldr	r3, [r7, #4]
10009cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009cc2:	2b03      	cmp	r3, #3
10009cc4:	d032      	beq.n	10009d2c <UART_SetConfig+0xe00>
10009cc6:	687b      	ldr	r3, [r7, #4]
10009cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009cca:	2b04      	cmp	r3, #4
10009ccc:	d02c      	beq.n	10009d28 <UART_SetConfig+0xdfc>
10009cce:	687b      	ldr	r3, [r7, #4]
10009cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009cd2:	2b05      	cmp	r3, #5
10009cd4:	d026      	beq.n	10009d24 <UART_SetConfig+0xdf8>
10009cd6:	687b      	ldr	r3, [r7, #4]
10009cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009cda:	2b06      	cmp	r3, #6
10009cdc:	d020      	beq.n	10009d20 <UART_SetConfig+0xdf4>
10009cde:	687b      	ldr	r3, [r7, #4]
10009ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ce2:	2b07      	cmp	r3, #7
10009ce4:	d01a      	beq.n	10009d1c <UART_SetConfig+0xdf0>
10009ce6:	687b      	ldr	r3, [r7, #4]
10009ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009cea:	2b08      	cmp	r3, #8
10009cec:	d014      	beq.n	10009d18 <UART_SetConfig+0xdec>
10009cee:	687b      	ldr	r3, [r7, #4]
10009cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009cf2:	2b09      	cmp	r3, #9
10009cf4:	d00e      	beq.n	10009d14 <UART_SetConfig+0xde8>
10009cf6:	687b      	ldr	r3, [r7, #4]
10009cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009cfa:	2b0a      	cmp	r3, #10
10009cfc:	d008      	beq.n	10009d10 <UART_SetConfig+0xde4>
10009cfe:	687b      	ldr	r3, [r7, #4]
10009d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d02:	2b0b      	cmp	r3, #11
10009d04:	d102      	bne.n	10009d0c <UART_SetConfig+0xde0>
10009d06:	f44f 7380 	mov.w	r3, #256	; 0x100
10009d0a:	e016      	b.n	10009d3a <UART_SetConfig+0xe0e>
10009d0c:	2301      	movs	r3, #1
10009d0e:	e014      	b.n	10009d3a <UART_SetConfig+0xe0e>
10009d10:	2380      	movs	r3, #128	; 0x80
10009d12:	e012      	b.n	10009d3a <UART_SetConfig+0xe0e>
10009d14:	2340      	movs	r3, #64	; 0x40
10009d16:	e010      	b.n	10009d3a <UART_SetConfig+0xe0e>
10009d18:	2320      	movs	r3, #32
10009d1a:	e00e      	b.n	10009d3a <UART_SetConfig+0xe0e>
10009d1c:	2310      	movs	r3, #16
10009d1e:	e00c      	b.n	10009d3a <UART_SetConfig+0xe0e>
10009d20:	230c      	movs	r3, #12
10009d22:	e00a      	b.n	10009d3a <UART_SetConfig+0xe0e>
10009d24:	230a      	movs	r3, #10
10009d26:	e008      	b.n	10009d3a <UART_SetConfig+0xe0e>
10009d28:	2308      	movs	r3, #8
10009d2a:	e006      	b.n	10009d3a <UART_SetConfig+0xe0e>
10009d2c:	2306      	movs	r3, #6
10009d2e:	e004      	b.n	10009d3a <UART_SetConfig+0xe0e>
10009d30:	2304      	movs	r3, #4
10009d32:	e002      	b.n	10009d3a <UART_SetConfig+0xe0e>
10009d34:	2302      	movs	r3, #2
10009d36:	e000      	b.n	10009d3a <UART_SetConfig+0xe0e>
10009d38:	2301      	movs	r3, #1
10009d3a:	fbb2 f2f3 	udiv	r2, r2, r3
10009d3e:	687b      	ldr	r3, [r7, #4]
10009d40:	685b      	ldr	r3, [r3, #4]
10009d42:	085b      	lsrs	r3, r3, #1
10009d44:	441a      	add	r2, r3
10009d46:	687b      	ldr	r3, [r7, #4]
10009d48:	685b      	ldr	r3, [r3, #4]
10009d4a:	fbb2 f3f3 	udiv	r3, r2, r3
10009d4e:	b29b      	uxth	r3, r3
10009d50:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009d52:	e168      	b.n	1000a026 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PLL4Q:
        HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10009d54:	f107 0308 	add.w	r3, r7, #8
10009d58:	4618      	mov	r0, r3
10009d5a:	f7fa ffcb 	bl	10004cf4 <HAL_RCC_GetPLL4ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll4_clocks.PLL4_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009d5e:	68fa      	ldr	r2, [r7, #12]
10009d60:	687b      	ldr	r3, [r7, #4]
10009d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d64:	2b00      	cmp	r3, #0
10009d66:	d044      	beq.n	10009df2 <UART_SetConfig+0xec6>
10009d68:	687b      	ldr	r3, [r7, #4]
10009d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d6c:	2b01      	cmp	r3, #1
10009d6e:	d03e      	beq.n	10009dee <UART_SetConfig+0xec2>
10009d70:	687b      	ldr	r3, [r7, #4]
10009d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d74:	2b02      	cmp	r3, #2
10009d76:	d038      	beq.n	10009dea <UART_SetConfig+0xebe>
10009d78:	687b      	ldr	r3, [r7, #4]
10009d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d7c:	2b03      	cmp	r3, #3
10009d7e:	d032      	beq.n	10009de6 <UART_SetConfig+0xeba>
10009d80:	687b      	ldr	r3, [r7, #4]
10009d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d84:	2b04      	cmp	r3, #4
10009d86:	d02c      	beq.n	10009de2 <UART_SetConfig+0xeb6>
10009d88:	687b      	ldr	r3, [r7, #4]
10009d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d8c:	2b05      	cmp	r3, #5
10009d8e:	d026      	beq.n	10009dde <UART_SetConfig+0xeb2>
10009d90:	687b      	ldr	r3, [r7, #4]
10009d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d94:	2b06      	cmp	r3, #6
10009d96:	d020      	beq.n	10009dda <UART_SetConfig+0xeae>
10009d98:	687b      	ldr	r3, [r7, #4]
10009d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d9c:	2b07      	cmp	r3, #7
10009d9e:	d01a      	beq.n	10009dd6 <UART_SetConfig+0xeaa>
10009da0:	687b      	ldr	r3, [r7, #4]
10009da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009da4:	2b08      	cmp	r3, #8
10009da6:	d014      	beq.n	10009dd2 <UART_SetConfig+0xea6>
10009da8:	687b      	ldr	r3, [r7, #4]
10009daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009dac:	2b09      	cmp	r3, #9
10009dae:	d00e      	beq.n	10009dce <UART_SetConfig+0xea2>
10009db0:	687b      	ldr	r3, [r7, #4]
10009db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009db4:	2b0a      	cmp	r3, #10
10009db6:	d008      	beq.n	10009dca <UART_SetConfig+0xe9e>
10009db8:	687b      	ldr	r3, [r7, #4]
10009dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009dbc:	2b0b      	cmp	r3, #11
10009dbe:	d102      	bne.n	10009dc6 <UART_SetConfig+0xe9a>
10009dc0:	f44f 7380 	mov.w	r3, #256	; 0x100
10009dc4:	e016      	b.n	10009df4 <UART_SetConfig+0xec8>
10009dc6:	2301      	movs	r3, #1
10009dc8:	e014      	b.n	10009df4 <UART_SetConfig+0xec8>
10009dca:	2380      	movs	r3, #128	; 0x80
10009dcc:	e012      	b.n	10009df4 <UART_SetConfig+0xec8>
10009dce:	2340      	movs	r3, #64	; 0x40
10009dd0:	e010      	b.n	10009df4 <UART_SetConfig+0xec8>
10009dd2:	2320      	movs	r3, #32
10009dd4:	e00e      	b.n	10009df4 <UART_SetConfig+0xec8>
10009dd6:	2310      	movs	r3, #16
10009dd8:	e00c      	b.n	10009df4 <UART_SetConfig+0xec8>
10009dda:	230c      	movs	r3, #12
10009ddc:	e00a      	b.n	10009df4 <UART_SetConfig+0xec8>
10009dde:	230a      	movs	r3, #10
10009de0:	e008      	b.n	10009df4 <UART_SetConfig+0xec8>
10009de2:	2308      	movs	r3, #8
10009de4:	e006      	b.n	10009df4 <UART_SetConfig+0xec8>
10009de6:	2306      	movs	r3, #6
10009de8:	e004      	b.n	10009df4 <UART_SetConfig+0xec8>
10009dea:	2304      	movs	r3, #4
10009dec:	e002      	b.n	10009df4 <UART_SetConfig+0xec8>
10009dee:	2302      	movs	r3, #2
10009df0:	e000      	b.n	10009df4 <UART_SetConfig+0xec8>
10009df2:	2301      	movs	r3, #1
10009df4:	fbb2 f2f3 	udiv	r2, r2, r3
10009df8:	687b      	ldr	r3, [r7, #4]
10009dfa:	685b      	ldr	r3, [r3, #4]
10009dfc:	085b      	lsrs	r3, r3, #1
10009dfe:	441a      	add	r2, r3
10009e00:	687b      	ldr	r3, [r7, #4]
10009e02:	685b      	ldr	r3, [r3, #4]
10009e04:	fbb2 f3f3 	udiv	r3, r2, r3
10009e08:	b29b      	uxth	r3, r3
10009e0a:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009e0c:	e10b      	b.n	1000a026 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009e0e:	687b      	ldr	r3, [r7, #4]
10009e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e12:	2b00      	cmp	r3, #0
10009e14:	d044      	beq.n	10009ea0 <UART_SetConfig+0xf74>
10009e16:	687b      	ldr	r3, [r7, #4]
10009e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e1a:	2b01      	cmp	r3, #1
10009e1c:	d03e      	beq.n	10009e9c <UART_SetConfig+0xf70>
10009e1e:	687b      	ldr	r3, [r7, #4]
10009e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e22:	2b02      	cmp	r3, #2
10009e24:	d038      	beq.n	10009e98 <UART_SetConfig+0xf6c>
10009e26:	687b      	ldr	r3, [r7, #4]
10009e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e2a:	2b03      	cmp	r3, #3
10009e2c:	d032      	beq.n	10009e94 <UART_SetConfig+0xf68>
10009e2e:	687b      	ldr	r3, [r7, #4]
10009e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e32:	2b04      	cmp	r3, #4
10009e34:	d02c      	beq.n	10009e90 <UART_SetConfig+0xf64>
10009e36:	687b      	ldr	r3, [r7, #4]
10009e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e3a:	2b05      	cmp	r3, #5
10009e3c:	d026      	beq.n	10009e8c <UART_SetConfig+0xf60>
10009e3e:	687b      	ldr	r3, [r7, #4]
10009e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e42:	2b06      	cmp	r3, #6
10009e44:	d020      	beq.n	10009e88 <UART_SetConfig+0xf5c>
10009e46:	687b      	ldr	r3, [r7, #4]
10009e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e4a:	2b07      	cmp	r3, #7
10009e4c:	d01a      	beq.n	10009e84 <UART_SetConfig+0xf58>
10009e4e:	687b      	ldr	r3, [r7, #4]
10009e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e52:	2b08      	cmp	r3, #8
10009e54:	d014      	beq.n	10009e80 <UART_SetConfig+0xf54>
10009e56:	687b      	ldr	r3, [r7, #4]
10009e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e5a:	2b09      	cmp	r3, #9
10009e5c:	d00e      	beq.n	10009e7c <UART_SetConfig+0xf50>
10009e5e:	687b      	ldr	r3, [r7, #4]
10009e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e62:	2b0a      	cmp	r3, #10
10009e64:	d008      	beq.n	10009e78 <UART_SetConfig+0xf4c>
10009e66:	687b      	ldr	r3, [r7, #4]
10009e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e6a:	2b0b      	cmp	r3, #11
10009e6c:	d102      	bne.n	10009e74 <UART_SetConfig+0xf48>
10009e6e:	f44f 7380 	mov.w	r3, #256	; 0x100
10009e72:	e016      	b.n	10009ea2 <UART_SetConfig+0xf76>
10009e74:	2301      	movs	r3, #1
10009e76:	e014      	b.n	10009ea2 <UART_SetConfig+0xf76>
10009e78:	2380      	movs	r3, #128	; 0x80
10009e7a:	e012      	b.n	10009ea2 <UART_SetConfig+0xf76>
10009e7c:	2340      	movs	r3, #64	; 0x40
10009e7e:	e010      	b.n	10009ea2 <UART_SetConfig+0xf76>
10009e80:	2320      	movs	r3, #32
10009e82:	e00e      	b.n	10009ea2 <UART_SetConfig+0xf76>
10009e84:	2310      	movs	r3, #16
10009e86:	e00c      	b.n	10009ea2 <UART_SetConfig+0xf76>
10009e88:	230c      	movs	r3, #12
10009e8a:	e00a      	b.n	10009ea2 <UART_SetConfig+0xf76>
10009e8c:	230a      	movs	r3, #10
10009e8e:	e008      	b.n	10009ea2 <UART_SetConfig+0xf76>
10009e90:	2308      	movs	r3, #8
10009e92:	e006      	b.n	10009ea2 <UART_SetConfig+0xf76>
10009e94:	2306      	movs	r3, #6
10009e96:	e004      	b.n	10009ea2 <UART_SetConfig+0xf76>
10009e98:	2304      	movs	r3, #4
10009e9a:	e002      	b.n	10009ea2 <UART_SetConfig+0xf76>
10009e9c:	2302      	movs	r3, #2
10009e9e:	e000      	b.n	10009ea2 <UART_SetConfig+0xf76>
10009ea0:	2301      	movs	r3, #1
10009ea2:	4a72      	ldr	r2, [pc, #456]	; (1000a06c <UART_SetConfig+0x1140>)
10009ea4:	fbb2 f2f3 	udiv	r2, r2, r3
10009ea8:	687b      	ldr	r3, [r7, #4]
10009eaa:	685b      	ldr	r3, [r3, #4]
10009eac:	085b      	lsrs	r3, r3, #1
10009eae:	441a      	add	r2, r3
10009eb0:	687b      	ldr	r3, [r7, #4]
10009eb2:	685b      	ldr	r3, [r3, #4]
10009eb4:	fbb2 f3f3 	udiv	r3, r2, r3
10009eb8:	b29b      	uxth	r3, r3
10009eba:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009ebc:	e0b3      	b.n	1000a026 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009ebe:	687b      	ldr	r3, [r7, #4]
10009ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ec2:	2b00      	cmp	r3, #0
10009ec4:	d044      	beq.n	10009f50 <UART_SetConfig+0x1024>
10009ec6:	687b      	ldr	r3, [r7, #4]
10009ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009eca:	2b01      	cmp	r3, #1
10009ecc:	d03e      	beq.n	10009f4c <UART_SetConfig+0x1020>
10009ece:	687b      	ldr	r3, [r7, #4]
10009ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ed2:	2b02      	cmp	r3, #2
10009ed4:	d038      	beq.n	10009f48 <UART_SetConfig+0x101c>
10009ed6:	687b      	ldr	r3, [r7, #4]
10009ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009eda:	2b03      	cmp	r3, #3
10009edc:	d032      	beq.n	10009f44 <UART_SetConfig+0x1018>
10009ede:	687b      	ldr	r3, [r7, #4]
10009ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ee2:	2b04      	cmp	r3, #4
10009ee4:	d02c      	beq.n	10009f40 <UART_SetConfig+0x1014>
10009ee6:	687b      	ldr	r3, [r7, #4]
10009ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009eea:	2b05      	cmp	r3, #5
10009eec:	d026      	beq.n	10009f3c <UART_SetConfig+0x1010>
10009eee:	687b      	ldr	r3, [r7, #4]
10009ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ef2:	2b06      	cmp	r3, #6
10009ef4:	d020      	beq.n	10009f38 <UART_SetConfig+0x100c>
10009ef6:	687b      	ldr	r3, [r7, #4]
10009ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009efa:	2b07      	cmp	r3, #7
10009efc:	d01a      	beq.n	10009f34 <UART_SetConfig+0x1008>
10009efe:	687b      	ldr	r3, [r7, #4]
10009f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f02:	2b08      	cmp	r3, #8
10009f04:	d014      	beq.n	10009f30 <UART_SetConfig+0x1004>
10009f06:	687b      	ldr	r3, [r7, #4]
10009f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f0a:	2b09      	cmp	r3, #9
10009f0c:	d00e      	beq.n	10009f2c <UART_SetConfig+0x1000>
10009f0e:	687b      	ldr	r3, [r7, #4]
10009f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f12:	2b0a      	cmp	r3, #10
10009f14:	d008      	beq.n	10009f28 <UART_SetConfig+0xffc>
10009f16:	687b      	ldr	r3, [r7, #4]
10009f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f1a:	2b0b      	cmp	r3, #11
10009f1c:	d102      	bne.n	10009f24 <UART_SetConfig+0xff8>
10009f1e:	f44f 7380 	mov.w	r3, #256	; 0x100
10009f22:	e016      	b.n	10009f52 <UART_SetConfig+0x1026>
10009f24:	2301      	movs	r3, #1
10009f26:	e014      	b.n	10009f52 <UART_SetConfig+0x1026>
10009f28:	2380      	movs	r3, #128	; 0x80
10009f2a:	e012      	b.n	10009f52 <UART_SetConfig+0x1026>
10009f2c:	2340      	movs	r3, #64	; 0x40
10009f2e:	e010      	b.n	10009f52 <UART_SetConfig+0x1026>
10009f30:	2320      	movs	r3, #32
10009f32:	e00e      	b.n	10009f52 <UART_SetConfig+0x1026>
10009f34:	2310      	movs	r3, #16
10009f36:	e00c      	b.n	10009f52 <UART_SetConfig+0x1026>
10009f38:	230c      	movs	r3, #12
10009f3a:	e00a      	b.n	10009f52 <UART_SetConfig+0x1026>
10009f3c:	230a      	movs	r3, #10
10009f3e:	e008      	b.n	10009f52 <UART_SetConfig+0x1026>
10009f40:	2308      	movs	r3, #8
10009f42:	e006      	b.n	10009f52 <UART_SetConfig+0x1026>
10009f44:	2306      	movs	r3, #6
10009f46:	e004      	b.n	10009f52 <UART_SetConfig+0x1026>
10009f48:	2304      	movs	r3, #4
10009f4a:	e002      	b.n	10009f52 <UART_SetConfig+0x1026>
10009f4c:	2302      	movs	r3, #2
10009f4e:	e000      	b.n	10009f52 <UART_SetConfig+0x1026>
10009f50:	2301      	movs	r3, #1
10009f52:	4a47      	ldr	r2, [pc, #284]	; (1000a070 <UART_SetConfig+0x1144>)
10009f54:	fbb2 f2f3 	udiv	r2, r2, r3
10009f58:	687b      	ldr	r3, [r7, #4]
10009f5a:	685b      	ldr	r3, [r3, #4]
10009f5c:	085b      	lsrs	r3, r3, #1
10009f5e:	441a      	add	r2, r3
10009f60:	687b      	ldr	r3, [r7, #4]
10009f62:	685b      	ldr	r3, [r3, #4]
10009f64:	fbb2 f3f3 	udiv	r3, r2, r3
10009f68:	b29b      	uxth	r3, r3
10009f6a:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009f6c:	e05b      	b.n	1000a026 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_HSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009f6e:	687b      	ldr	r3, [r7, #4]
10009f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f72:	2b00      	cmp	r3, #0
10009f74:	d044      	beq.n	1000a000 <UART_SetConfig+0x10d4>
10009f76:	687b      	ldr	r3, [r7, #4]
10009f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f7a:	2b01      	cmp	r3, #1
10009f7c:	d03e      	beq.n	10009ffc <UART_SetConfig+0x10d0>
10009f7e:	687b      	ldr	r3, [r7, #4]
10009f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f82:	2b02      	cmp	r3, #2
10009f84:	d038      	beq.n	10009ff8 <UART_SetConfig+0x10cc>
10009f86:	687b      	ldr	r3, [r7, #4]
10009f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f8a:	2b03      	cmp	r3, #3
10009f8c:	d032      	beq.n	10009ff4 <UART_SetConfig+0x10c8>
10009f8e:	687b      	ldr	r3, [r7, #4]
10009f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f92:	2b04      	cmp	r3, #4
10009f94:	d02c      	beq.n	10009ff0 <UART_SetConfig+0x10c4>
10009f96:	687b      	ldr	r3, [r7, #4]
10009f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f9a:	2b05      	cmp	r3, #5
10009f9c:	d026      	beq.n	10009fec <UART_SetConfig+0x10c0>
10009f9e:	687b      	ldr	r3, [r7, #4]
10009fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009fa2:	2b06      	cmp	r3, #6
10009fa4:	d020      	beq.n	10009fe8 <UART_SetConfig+0x10bc>
10009fa6:	687b      	ldr	r3, [r7, #4]
10009fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009faa:	2b07      	cmp	r3, #7
10009fac:	d01a      	beq.n	10009fe4 <UART_SetConfig+0x10b8>
10009fae:	687b      	ldr	r3, [r7, #4]
10009fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009fb2:	2b08      	cmp	r3, #8
10009fb4:	d014      	beq.n	10009fe0 <UART_SetConfig+0x10b4>
10009fb6:	687b      	ldr	r3, [r7, #4]
10009fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009fba:	2b09      	cmp	r3, #9
10009fbc:	d00e      	beq.n	10009fdc <UART_SetConfig+0x10b0>
10009fbe:	687b      	ldr	r3, [r7, #4]
10009fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009fc2:	2b0a      	cmp	r3, #10
10009fc4:	d008      	beq.n	10009fd8 <UART_SetConfig+0x10ac>
10009fc6:	687b      	ldr	r3, [r7, #4]
10009fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009fca:	2b0b      	cmp	r3, #11
10009fcc:	d102      	bne.n	10009fd4 <UART_SetConfig+0x10a8>
10009fce:	f44f 7380 	mov.w	r3, #256	; 0x100
10009fd2:	e016      	b.n	1000a002 <UART_SetConfig+0x10d6>
10009fd4:	2301      	movs	r3, #1
10009fd6:	e014      	b.n	1000a002 <UART_SetConfig+0x10d6>
10009fd8:	2380      	movs	r3, #128	; 0x80
10009fda:	e012      	b.n	1000a002 <UART_SetConfig+0x10d6>
10009fdc:	2340      	movs	r3, #64	; 0x40
10009fde:	e010      	b.n	1000a002 <UART_SetConfig+0x10d6>
10009fe0:	2320      	movs	r3, #32
10009fe2:	e00e      	b.n	1000a002 <UART_SetConfig+0x10d6>
10009fe4:	2310      	movs	r3, #16
10009fe6:	e00c      	b.n	1000a002 <UART_SetConfig+0x10d6>
10009fe8:	230c      	movs	r3, #12
10009fea:	e00a      	b.n	1000a002 <UART_SetConfig+0x10d6>
10009fec:	230a      	movs	r3, #10
10009fee:	e008      	b.n	1000a002 <UART_SetConfig+0x10d6>
10009ff0:	2308      	movs	r3, #8
10009ff2:	e006      	b.n	1000a002 <UART_SetConfig+0x10d6>
10009ff4:	2306      	movs	r3, #6
10009ff6:	e004      	b.n	1000a002 <UART_SetConfig+0x10d6>
10009ff8:	2304      	movs	r3, #4
10009ffa:	e002      	b.n	1000a002 <UART_SetConfig+0x10d6>
10009ffc:	2302      	movs	r3, #2
10009ffe:	e000      	b.n	1000a002 <UART_SetConfig+0x10d6>
1000a000:	2301      	movs	r3, #1
1000a002:	4a1c      	ldr	r2, [pc, #112]	; (1000a074 <UART_SetConfig+0x1148>)
1000a004:	fbb2 f2f3 	udiv	r2, r2, r3
1000a008:	687b      	ldr	r3, [r7, #4]
1000a00a:	685b      	ldr	r3, [r3, #4]
1000a00c:	085b      	lsrs	r3, r3, #1
1000a00e:	441a      	add	r2, r3
1000a010:	687b      	ldr	r3, [r7, #4]
1000a012:	685b      	ldr	r3, [r3, #4]
1000a014:	fbb2 f3f3 	udiv	r3, r2, r3
1000a018:	b29b      	uxth	r3, r3
1000a01a:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a01c:	e003      	b.n	1000a026 <UART_SetConfig+0x10fa>
      default:
        ret = HAL_ERROR;
1000a01e:	2301      	movs	r3, #1
1000a020:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
1000a024:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
1000a026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000a028:	2b0f      	cmp	r3, #15
1000a02a:	d908      	bls.n	1000a03e <UART_SetConfig+0x1112>
1000a02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000a02e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
1000a032:	d204      	bcs.n	1000a03e <UART_SetConfig+0x1112>
    {
      huart->Instance->BRR = usartdiv;
1000a034:	687b      	ldr	r3, [r7, #4]
1000a036:	681b      	ldr	r3, [r3, #0]
1000a038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1000a03a:	60da      	str	r2, [r3, #12]
1000a03c:	e002      	b.n	1000a044 <UART_SetConfig+0x1118>
    }
    else
    {
      ret = HAL_ERROR;
1000a03e:	2301      	movs	r3, #1
1000a040:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
1000a044:	687b      	ldr	r3, [r7, #4]
1000a046:	2201      	movs	r2, #1
1000a048:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
1000a04c:	687b      	ldr	r3, [r7, #4]
1000a04e:	2201      	movs	r2, #1
1000a050:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
1000a054:	687b      	ldr	r3, [r7, #4]
1000a056:	2200      	movs	r2, #0
1000a058:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
1000a05a:	687b      	ldr	r3, [r7, #4]
1000a05c:	2200      	movs	r2, #0
1000a05e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
1000a060:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
1000a064:	4618      	mov	r0, r3
1000a066:	3738      	adds	r7, #56	; 0x38
1000a068:	46bd      	mov	sp, r7
1000a06a:	bd80      	pop	{r7, pc}
1000a06c:	03d09000 	.word	0x03d09000
1000a070:	003d0900 	.word	0x003d0900
1000a074:	016e3600 	.word	0x016e3600

1000a078 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
1000a078:	b480      	push	{r7}
1000a07a:	b083      	sub	sp, #12
1000a07c:	af00      	add	r7, sp, #0
1000a07e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
1000a080:	687b      	ldr	r3, [r7, #4]
1000a082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a084:	f003 0301 	and.w	r3, r3, #1
1000a088:	2b00      	cmp	r3, #0
1000a08a:	d00a      	beq.n	1000a0a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
1000a08c:	687b      	ldr	r3, [r7, #4]
1000a08e:	681b      	ldr	r3, [r3, #0]
1000a090:	685b      	ldr	r3, [r3, #4]
1000a092:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
1000a096:	687b      	ldr	r3, [r7, #4]
1000a098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1000a09a:	687b      	ldr	r3, [r7, #4]
1000a09c:	681b      	ldr	r3, [r3, #0]
1000a09e:	430a      	orrs	r2, r1
1000a0a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
1000a0a2:	687b      	ldr	r3, [r7, #4]
1000a0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a0a6:	f003 0302 	and.w	r3, r3, #2
1000a0aa:	2b00      	cmp	r3, #0
1000a0ac:	d00a      	beq.n	1000a0c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
1000a0ae:	687b      	ldr	r3, [r7, #4]
1000a0b0:	681b      	ldr	r3, [r3, #0]
1000a0b2:	685b      	ldr	r3, [r3, #4]
1000a0b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
1000a0b8:	687b      	ldr	r3, [r7, #4]
1000a0ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
1000a0bc:	687b      	ldr	r3, [r7, #4]
1000a0be:	681b      	ldr	r3, [r3, #0]
1000a0c0:	430a      	orrs	r2, r1
1000a0c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
1000a0c4:	687b      	ldr	r3, [r7, #4]
1000a0c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a0c8:	f003 0304 	and.w	r3, r3, #4
1000a0cc:	2b00      	cmp	r3, #0
1000a0ce:	d00a      	beq.n	1000a0e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
1000a0d0:	687b      	ldr	r3, [r7, #4]
1000a0d2:	681b      	ldr	r3, [r3, #0]
1000a0d4:	685b      	ldr	r3, [r3, #4]
1000a0d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
1000a0da:	687b      	ldr	r3, [r7, #4]
1000a0dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
1000a0de:	687b      	ldr	r3, [r7, #4]
1000a0e0:	681b      	ldr	r3, [r3, #0]
1000a0e2:	430a      	orrs	r2, r1
1000a0e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
1000a0e6:	687b      	ldr	r3, [r7, #4]
1000a0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a0ea:	f003 0308 	and.w	r3, r3, #8
1000a0ee:	2b00      	cmp	r3, #0
1000a0f0:	d00a      	beq.n	1000a108 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
1000a0f2:	687b      	ldr	r3, [r7, #4]
1000a0f4:	681b      	ldr	r3, [r3, #0]
1000a0f6:	685b      	ldr	r3, [r3, #4]
1000a0f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
1000a0fc:	687b      	ldr	r3, [r7, #4]
1000a0fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1000a100:	687b      	ldr	r3, [r7, #4]
1000a102:	681b      	ldr	r3, [r3, #0]
1000a104:	430a      	orrs	r2, r1
1000a106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
1000a108:	687b      	ldr	r3, [r7, #4]
1000a10a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a10c:	f003 0310 	and.w	r3, r3, #16
1000a110:	2b00      	cmp	r3, #0
1000a112:	d00a      	beq.n	1000a12a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
1000a114:	687b      	ldr	r3, [r7, #4]
1000a116:	681b      	ldr	r3, [r3, #0]
1000a118:	689b      	ldr	r3, [r3, #8]
1000a11a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
1000a11e:	687b      	ldr	r3, [r7, #4]
1000a120:	6bda      	ldr	r2, [r3, #60]	; 0x3c
1000a122:	687b      	ldr	r3, [r7, #4]
1000a124:	681b      	ldr	r3, [r3, #0]
1000a126:	430a      	orrs	r2, r1
1000a128:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
1000a12a:	687b      	ldr	r3, [r7, #4]
1000a12c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a12e:	f003 0320 	and.w	r3, r3, #32
1000a132:	2b00      	cmp	r3, #0
1000a134:	d00a      	beq.n	1000a14c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
1000a136:	687b      	ldr	r3, [r7, #4]
1000a138:	681b      	ldr	r3, [r3, #0]
1000a13a:	689b      	ldr	r3, [r3, #8]
1000a13c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
1000a140:	687b      	ldr	r3, [r7, #4]
1000a142:	6c1a      	ldr	r2, [r3, #64]	; 0x40
1000a144:	687b      	ldr	r3, [r7, #4]
1000a146:	681b      	ldr	r3, [r3, #0]
1000a148:	430a      	orrs	r2, r1
1000a14a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
1000a14c:	687b      	ldr	r3, [r7, #4]
1000a14e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a150:	f003 0340 	and.w	r3, r3, #64	; 0x40
1000a154:	2b00      	cmp	r3, #0
1000a156:	d01a      	beq.n	1000a18e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
1000a158:	687b      	ldr	r3, [r7, #4]
1000a15a:	681b      	ldr	r3, [r3, #0]
1000a15c:	685b      	ldr	r3, [r3, #4]
1000a15e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
1000a162:	687b      	ldr	r3, [r7, #4]
1000a164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
1000a166:	687b      	ldr	r3, [r7, #4]
1000a168:	681b      	ldr	r3, [r3, #0]
1000a16a:	430a      	orrs	r2, r1
1000a16c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
1000a16e:	687b      	ldr	r3, [r7, #4]
1000a170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1000a172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
1000a176:	d10a      	bne.n	1000a18e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
1000a178:	687b      	ldr	r3, [r7, #4]
1000a17a:	681b      	ldr	r3, [r3, #0]
1000a17c:	685b      	ldr	r3, [r3, #4]
1000a17e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
1000a182:	687b      	ldr	r3, [r7, #4]
1000a184:	6c9a      	ldr	r2, [r3, #72]	; 0x48
1000a186:	687b      	ldr	r3, [r7, #4]
1000a188:	681b      	ldr	r3, [r3, #0]
1000a18a:	430a      	orrs	r2, r1
1000a18c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
1000a18e:	687b      	ldr	r3, [r7, #4]
1000a190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a192:	f003 0380 	and.w	r3, r3, #128	; 0x80
1000a196:	2b00      	cmp	r3, #0
1000a198:	d00a      	beq.n	1000a1b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
1000a19a:	687b      	ldr	r3, [r7, #4]
1000a19c:	681b      	ldr	r3, [r3, #0]
1000a19e:	685b      	ldr	r3, [r3, #4]
1000a1a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
1000a1a4:	687b      	ldr	r3, [r7, #4]
1000a1a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
1000a1a8:	687b      	ldr	r3, [r7, #4]
1000a1aa:	681b      	ldr	r3, [r3, #0]
1000a1ac:	430a      	orrs	r2, r1
1000a1ae:	605a      	str	r2, [r3, #4]
  }
}
1000a1b0:	bf00      	nop
1000a1b2:	370c      	adds	r7, #12
1000a1b4:	46bd      	mov	sp, r7
1000a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a1ba:	4770      	bx	lr

1000a1bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
1000a1bc:	b580      	push	{r7, lr}
1000a1be:	b086      	sub	sp, #24
1000a1c0:	af02      	add	r7, sp, #8
1000a1c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
1000a1c4:	687b      	ldr	r3, [r7, #4]
1000a1c6:	2200      	movs	r2, #0
1000a1c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
1000a1cc:	f7f7 fac2 	bl	10001754 <HAL_GetTick>
1000a1d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
1000a1d2:	687b      	ldr	r3, [r7, #4]
1000a1d4:	681b      	ldr	r3, [r3, #0]
1000a1d6:	681b      	ldr	r3, [r3, #0]
1000a1d8:	f003 0308 	and.w	r3, r3, #8
1000a1dc:	2b08      	cmp	r3, #8
1000a1de:	d10e      	bne.n	1000a1fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
1000a1e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
1000a1e4:	9300      	str	r3, [sp, #0]
1000a1e6:	68fb      	ldr	r3, [r7, #12]
1000a1e8:	2200      	movs	r2, #0
1000a1ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
1000a1ee:	6878      	ldr	r0, [r7, #4]
1000a1f0:	f000 f82c 	bl	1000a24c <UART_WaitOnFlagUntilTimeout>
1000a1f4:	4603      	mov	r3, r0
1000a1f6:	2b00      	cmp	r3, #0
1000a1f8:	d001      	beq.n	1000a1fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
1000a1fa:	2303      	movs	r3, #3
1000a1fc:	e022      	b.n	1000a244 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
1000a1fe:	687b      	ldr	r3, [r7, #4]
1000a200:	681b      	ldr	r3, [r3, #0]
1000a202:	681b      	ldr	r3, [r3, #0]
1000a204:	f003 0304 	and.w	r3, r3, #4
1000a208:	2b04      	cmp	r3, #4
1000a20a:	d10e      	bne.n	1000a22a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
1000a20c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
1000a210:	9300      	str	r3, [sp, #0]
1000a212:	68fb      	ldr	r3, [r7, #12]
1000a214:	2200      	movs	r2, #0
1000a216:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
1000a21a:	6878      	ldr	r0, [r7, #4]
1000a21c:	f000 f816 	bl	1000a24c <UART_WaitOnFlagUntilTimeout>
1000a220:	4603      	mov	r3, r0
1000a222:	2b00      	cmp	r3, #0
1000a224:	d001      	beq.n	1000a22a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
1000a226:	2303      	movs	r3, #3
1000a228:	e00c      	b.n	1000a244 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
1000a22a:	687b      	ldr	r3, [r7, #4]
1000a22c:	2220      	movs	r2, #32
1000a22e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
1000a232:	687b      	ldr	r3, [r7, #4]
1000a234:	2220      	movs	r2, #32
1000a236:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  __HAL_UNLOCK(huart);
1000a23a:	687b      	ldr	r3, [r7, #4]
1000a23c:	2200      	movs	r2, #0
1000a23e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
1000a242:	2300      	movs	r3, #0
}
1000a244:	4618      	mov	r0, r3
1000a246:	3710      	adds	r7, #16
1000a248:	46bd      	mov	sp, r7
1000a24a:	bd80      	pop	{r7, pc}

1000a24c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
1000a24c:	b580      	push	{r7, lr}
1000a24e:	b084      	sub	sp, #16
1000a250:	af00      	add	r7, sp, #0
1000a252:	60f8      	str	r0, [r7, #12]
1000a254:	60b9      	str	r1, [r7, #8]
1000a256:	603b      	str	r3, [r7, #0]
1000a258:	4613      	mov	r3, r2
1000a25a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1000a25c:	e062      	b.n	1000a324 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
1000a25e:	69bb      	ldr	r3, [r7, #24]
1000a260:	f1b3 3fff 	cmp.w	r3, #4294967295
1000a264:	d05e      	beq.n	1000a324 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
1000a266:	f7f7 fa75 	bl	10001754 <HAL_GetTick>
1000a26a:	4602      	mov	r2, r0
1000a26c:	683b      	ldr	r3, [r7, #0]
1000a26e:	1ad3      	subs	r3, r2, r3
1000a270:	69ba      	ldr	r2, [r7, #24]
1000a272:	429a      	cmp	r2, r3
1000a274:	d302      	bcc.n	1000a27c <UART_WaitOnFlagUntilTimeout+0x30>
1000a276:	69bb      	ldr	r3, [r7, #24]
1000a278:	2b00      	cmp	r3, #0
1000a27a:	d11d      	bne.n	1000a2b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
1000a27c:	68fb      	ldr	r3, [r7, #12]
1000a27e:	681b      	ldr	r3, [r3, #0]
1000a280:	681a      	ldr	r2, [r3, #0]
1000a282:	68fb      	ldr	r3, [r7, #12]
1000a284:	681b      	ldr	r3, [r3, #0]
1000a286:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
1000a28a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1000a28c:	68fb      	ldr	r3, [r7, #12]
1000a28e:	681b      	ldr	r3, [r3, #0]
1000a290:	689a      	ldr	r2, [r3, #8]
1000a292:	68fb      	ldr	r3, [r7, #12]
1000a294:	681b      	ldr	r3, [r3, #0]
1000a296:	f022 0201 	bic.w	r2, r2, #1
1000a29a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
1000a29c:	68fb      	ldr	r3, [r7, #12]
1000a29e:	2220      	movs	r2, #32
1000a2a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
1000a2a4:	68fb      	ldr	r3, [r7, #12]
1000a2a6:	2220      	movs	r2, #32
1000a2a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
1000a2ac:	68fb      	ldr	r3, [r7, #12]
1000a2ae:	2200      	movs	r2, #0
1000a2b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
1000a2b4:	2303      	movs	r3, #3
1000a2b6:	e045      	b.n	1000a344 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
1000a2b8:	68fb      	ldr	r3, [r7, #12]
1000a2ba:	681b      	ldr	r3, [r3, #0]
1000a2bc:	681b      	ldr	r3, [r3, #0]
1000a2be:	f003 0304 	and.w	r3, r3, #4
1000a2c2:	2b00      	cmp	r3, #0
1000a2c4:	d02e      	beq.n	1000a324 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
1000a2c6:	68fb      	ldr	r3, [r7, #12]
1000a2c8:	681b      	ldr	r3, [r3, #0]
1000a2ca:	69db      	ldr	r3, [r3, #28]
1000a2cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
1000a2d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
1000a2d4:	d126      	bne.n	1000a324 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
1000a2d6:	68fb      	ldr	r3, [r7, #12]
1000a2d8:	681b      	ldr	r3, [r3, #0]
1000a2da:	f44f 6200 	mov.w	r2, #2048	; 0x800
1000a2de:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
1000a2e0:	68fb      	ldr	r3, [r7, #12]
1000a2e2:	681b      	ldr	r3, [r3, #0]
1000a2e4:	681a      	ldr	r2, [r3, #0]
1000a2e6:	68fb      	ldr	r3, [r7, #12]
1000a2e8:	681b      	ldr	r3, [r3, #0]
1000a2ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
1000a2ee:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1000a2f0:	68fb      	ldr	r3, [r7, #12]
1000a2f2:	681b      	ldr	r3, [r3, #0]
1000a2f4:	689a      	ldr	r2, [r3, #8]
1000a2f6:	68fb      	ldr	r3, [r7, #12]
1000a2f8:	681b      	ldr	r3, [r3, #0]
1000a2fa:	f022 0201 	bic.w	r2, r2, #1
1000a2fe:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
1000a300:	68fb      	ldr	r3, [r7, #12]
1000a302:	2220      	movs	r2, #32
1000a304:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
1000a308:	68fb      	ldr	r3, [r7, #12]
1000a30a:	2220      	movs	r2, #32
1000a30c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
1000a310:	68fb      	ldr	r3, [r7, #12]
1000a312:	2220      	movs	r2, #32
1000a314:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
1000a318:	68fb      	ldr	r3, [r7, #12]
1000a31a:	2200      	movs	r2, #0
1000a31c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
          
          return HAL_TIMEOUT;
1000a320:	2303      	movs	r3, #3
1000a322:	e00f      	b.n	1000a344 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1000a324:	68fb      	ldr	r3, [r7, #12]
1000a326:	681b      	ldr	r3, [r3, #0]
1000a328:	69da      	ldr	r2, [r3, #28]
1000a32a:	68bb      	ldr	r3, [r7, #8]
1000a32c:	4013      	ands	r3, r2
1000a32e:	68ba      	ldr	r2, [r7, #8]
1000a330:	429a      	cmp	r2, r3
1000a332:	bf0c      	ite	eq
1000a334:	2301      	moveq	r3, #1
1000a336:	2300      	movne	r3, #0
1000a338:	b2db      	uxtb	r3, r3
1000a33a:	461a      	mov	r2, r3
1000a33c:	79fb      	ldrb	r3, [r7, #7]
1000a33e:	429a      	cmp	r2, r3
1000a340:	d08d      	beq.n	1000a25e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
1000a342:	2300      	movs	r3, #0
}
1000a344:	4618      	mov	r0, r3
1000a346:	3710      	adds	r7, #16
1000a348:	46bd      	mov	sp, r7
1000a34a:	bd80      	pop	{r7, pc}

1000a34c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
1000a34c:	b480      	push	{r7}
1000a34e:	b085      	sub	sp, #20
1000a350:	af00      	add	r7, sp, #0
1000a352:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
1000a354:	687b      	ldr	r3, [r7, #4]
1000a356:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
1000a35a:	2b01      	cmp	r3, #1
1000a35c:	d101      	bne.n	1000a362 <HAL_UARTEx_DisableFifoMode+0x16>
1000a35e:	2302      	movs	r3, #2
1000a360:	e027      	b.n	1000a3b2 <HAL_UARTEx_DisableFifoMode+0x66>
1000a362:	687b      	ldr	r3, [r7, #4]
1000a364:	2201      	movs	r2, #1
1000a366:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
1000a36a:	687b      	ldr	r3, [r7, #4]
1000a36c:	2224      	movs	r2, #36	; 0x24
1000a36e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1000a372:	687b      	ldr	r3, [r7, #4]
1000a374:	681b      	ldr	r3, [r3, #0]
1000a376:	681b      	ldr	r3, [r3, #0]
1000a378:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1000a37a:	687b      	ldr	r3, [r7, #4]
1000a37c:	681b      	ldr	r3, [r3, #0]
1000a37e:	681a      	ldr	r2, [r3, #0]
1000a380:	687b      	ldr	r3, [r7, #4]
1000a382:	681b      	ldr	r3, [r3, #0]
1000a384:	f022 0201 	bic.w	r2, r2, #1
1000a388:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
1000a38a:	68fb      	ldr	r3, [r7, #12]
1000a38c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
1000a390:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
1000a392:	687b      	ldr	r3, [r7, #4]
1000a394:	2200      	movs	r2, #0
1000a396:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1000a398:	687b      	ldr	r3, [r7, #4]
1000a39a:	681b      	ldr	r3, [r3, #0]
1000a39c:	68fa      	ldr	r2, [r7, #12]
1000a39e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1000a3a0:	687b      	ldr	r3, [r7, #4]
1000a3a2:	2220      	movs	r2, #32
1000a3a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1000a3a8:	687b      	ldr	r3, [r7, #4]
1000a3aa:	2200      	movs	r2, #0
1000a3ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
1000a3b0:	2300      	movs	r3, #0
}
1000a3b2:	4618      	mov	r0, r3
1000a3b4:	3714      	adds	r7, #20
1000a3b6:	46bd      	mov	sp, r7
1000a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a3bc:	4770      	bx	lr

1000a3be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1000a3be:	b580      	push	{r7, lr}
1000a3c0:	b084      	sub	sp, #16
1000a3c2:	af00      	add	r7, sp, #0
1000a3c4:	6078      	str	r0, [r7, #4]
1000a3c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1000a3c8:	687b      	ldr	r3, [r7, #4]
1000a3ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
1000a3ce:	2b01      	cmp	r3, #1
1000a3d0:	d101      	bne.n	1000a3d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
1000a3d2:	2302      	movs	r3, #2
1000a3d4:	e02d      	b.n	1000a432 <HAL_UARTEx_SetTxFifoThreshold+0x74>
1000a3d6:	687b      	ldr	r3, [r7, #4]
1000a3d8:	2201      	movs	r2, #1
1000a3da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
1000a3de:	687b      	ldr	r3, [r7, #4]
1000a3e0:	2224      	movs	r2, #36	; 0x24
1000a3e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1000a3e6:	687b      	ldr	r3, [r7, #4]
1000a3e8:	681b      	ldr	r3, [r3, #0]
1000a3ea:	681b      	ldr	r3, [r3, #0]
1000a3ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1000a3ee:	687b      	ldr	r3, [r7, #4]
1000a3f0:	681b      	ldr	r3, [r3, #0]
1000a3f2:	681a      	ldr	r2, [r3, #0]
1000a3f4:	687b      	ldr	r3, [r7, #4]
1000a3f6:	681b      	ldr	r3, [r3, #0]
1000a3f8:	f022 0201 	bic.w	r2, r2, #1
1000a3fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
1000a3fe:	687b      	ldr	r3, [r7, #4]
1000a400:	681b      	ldr	r3, [r3, #0]
1000a402:	689b      	ldr	r3, [r3, #8]
1000a404:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
1000a408:	687b      	ldr	r3, [r7, #4]
1000a40a:	681b      	ldr	r3, [r3, #0]
1000a40c:	683a      	ldr	r2, [r7, #0]
1000a40e:	430a      	orrs	r2, r1
1000a410:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1000a412:	6878      	ldr	r0, [r7, #4]
1000a414:	f000 f850 	bl	1000a4b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1000a418:	687b      	ldr	r3, [r7, #4]
1000a41a:	681b      	ldr	r3, [r3, #0]
1000a41c:	68fa      	ldr	r2, [r7, #12]
1000a41e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1000a420:	687b      	ldr	r3, [r7, #4]
1000a422:	2220      	movs	r2, #32
1000a424:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1000a428:	687b      	ldr	r3, [r7, #4]
1000a42a:	2200      	movs	r2, #0
1000a42c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
1000a430:	2300      	movs	r3, #0
}
1000a432:	4618      	mov	r0, r3
1000a434:	3710      	adds	r7, #16
1000a436:	46bd      	mov	sp, r7
1000a438:	bd80      	pop	{r7, pc}

1000a43a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1000a43a:	b580      	push	{r7, lr}
1000a43c:	b084      	sub	sp, #16
1000a43e:	af00      	add	r7, sp, #0
1000a440:	6078      	str	r0, [r7, #4]
1000a442:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1000a444:	687b      	ldr	r3, [r7, #4]
1000a446:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
1000a44a:	2b01      	cmp	r3, #1
1000a44c:	d101      	bne.n	1000a452 <HAL_UARTEx_SetRxFifoThreshold+0x18>
1000a44e:	2302      	movs	r3, #2
1000a450:	e02d      	b.n	1000a4ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
1000a452:	687b      	ldr	r3, [r7, #4]
1000a454:	2201      	movs	r2, #1
1000a456:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
1000a45a:	687b      	ldr	r3, [r7, #4]
1000a45c:	2224      	movs	r2, #36	; 0x24
1000a45e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1000a462:	687b      	ldr	r3, [r7, #4]
1000a464:	681b      	ldr	r3, [r3, #0]
1000a466:	681b      	ldr	r3, [r3, #0]
1000a468:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1000a46a:	687b      	ldr	r3, [r7, #4]
1000a46c:	681b      	ldr	r3, [r3, #0]
1000a46e:	681a      	ldr	r2, [r3, #0]
1000a470:	687b      	ldr	r3, [r7, #4]
1000a472:	681b      	ldr	r3, [r3, #0]
1000a474:	f022 0201 	bic.w	r2, r2, #1
1000a478:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
1000a47a:	687b      	ldr	r3, [r7, #4]
1000a47c:	681b      	ldr	r3, [r3, #0]
1000a47e:	689b      	ldr	r3, [r3, #8]
1000a480:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
1000a484:	687b      	ldr	r3, [r7, #4]
1000a486:	681b      	ldr	r3, [r3, #0]
1000a488:	683a      	ldr	r2, [r7, #0]
1000a48a:	430a      	orrs	r2, r1
1000a48c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1000a48e:	6878      	ldr	r0, [r7, #4]
1000a490:	f000 f812 	bl	1000a4b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1000a494:	687b      	ldr	r3, [r7, #4]
1000a496:	681b      	ldr	r3, [r3, #0]
1000a498:	68fa      	ldr	r2, [r7, #12]
1000a49a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1000a49c:	687b      	ldr	r3, [r7, #4]
1000a49e:	2220      	movs	r2, #32
1000a4a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1000a4a4:	687b      	ldr	r3, [r7, #4]
1000a4a6:	2200      	movs	r2, #0
1000a4a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
1000a4ac:	2300      	movs	r3, #0
}
1000a4ae:	4618      	mov	r0, r3
1000a4b0:	3710      	adds	r7, #16
1000a4b2:	46bd      	mov	sp, r7
1000a4b4:	bd80      	pop	{r7, pc}
	...

1000a4b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
1000a4b8:	b480      	push	{r7}
1000a4ba:	b089      	sub	sp, #36	; 0x24
1000a4bc:	af00      	add	r7, sp, #0
1000a4be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
1000a4c0:	4a2d      	ldr	r2, [pc, #180]	; (1000a578 <UARTEx_SetNbDataToProcess+0xc0>)
1000a4c2:	f107 0314 	add.w	r3, r7, #20
1000a4c6:	e892 0003 	ldmia.w	r2, {r0, r1}
1000a4ca:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
1000a4ce:	4a2b      	ldr	r2, [pc, #172]	; (1000a57c <UARTEx_SetNbDataToProcess+0xc4>)
1000a4d0:	f107 030c 	add.w	r3, r7, #12
1000a4d4:	e892 0003 	ldmia.w	r2, {r0, r1}
1000a4d8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
1000a4dc:	687b      	ldr	r3, [r7, #4]
1000a4de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
1000a4e0:	2b00      	cmp	r3, #0
1000a4e2:	d108      	bne.n	1000a4f6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
1000a4e4:	687b      	ldr	r3, [r7, #4]
1000a4e6:	2201      	movs	r2, #1
1000a4e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
1000a4ec:	687b      	ldr	r3, [r7, #4]
1000a4ee:	2201      	movs	r2, #1
1000a4f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
1000a4f4:	e039      	b.n	1000a56a <UARTEx_SetNbDataToProcess+0xb2>
    rx_fifo_depth = RX_FIFO_DEPTH;
1000a4f6:	2308      	movs	r3, #8
1000a4f8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
1000a4fa:	2308      	movs	r3, #8
1000a4fc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
1000a4fe:	687b      	ldr	r3, [r7, #4]
1000a500:	681b      	ldr	r3, [r3, #0]
1000a502:	689b      	ldr	r3, [r3, #8]
1000a504:	0e5b      	lsrs	r3, r3, #25
1000a506:	b2db      	uxtb	r3, r3
1000a508:	f003 0307 	and.w	r3, r3, #7
1000a50c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
1000a50e:	687b      	ldr	r3, [r7, #4]
1000a510:	681b      	ldr	r3, [r3, #0]
1000a512:	689b      	ldr	r3, [r3, #8]
1000a514:	0f5b      	lsrs	r3, r3, #29
1000a516:	b2db      	uxtb	r3, r3
1000a518:	f003 0307 	and.w	r3, r3, #7
1000a51c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
1000a51e:	7fbb      	ldrb	r3, [r7, #30]
1000a520:	7f3a      	ldrb	r2, [r7, #28]
1000a522:	3220      	adds	r2, #32
1000a524:	443a      	add	r2, r7
1000a526:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
1000a52a:	fb02 f303 	mul.w	r3, r2, r3
1000a52e:	7f3a      	ldrb	r2, [r7, #28]
1000a530:	3220      	adds	r2, #32
1000a532:	443a      	add	r2, r7
1000a534:	f812 2c14 	ldrb.w	r2, [r2, #-20]
1000a538:	fb93 f3f2 	sdiv	r3, r3, r2
1000a53c:	b29a      	uxth	r2, r3
1000a53e:	687b      	ldr	r3, [r7, #4]
1000a540:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
1000a544:	7ffb      	ldrb	r3, [r7, #31]
1000a546:	7f7a      	ldrb	r2, [r7, #29]
1000a548:	3220      	adds	r2, #32
1000a54a:	443a      	add	r2, r7
1000a54c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
1000a550:	fb02 f303 	mul.w	r3, r2, r3
1000a554:	7f7a      	ldrb	r2, [r7, #29]
1000a556:	3220      	adds	r2, #32
1000a558:	443a      	add	r2, r7
1000a55a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
1000a55e:	fb93 f3f2 	sdiv	r3, r3, r2
1000a562:	b29a      	uxth	r2, r3
1000a564:	687b      	ldr	r3, [r7, #4]
1000a566:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
1000a56a:	bf00      	nop
1000a56c:	3724      	adds	r7, #36	; 0x24
1000a56e:	46bd      	mov	sp, r7
1000a570:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a574:	4770      	bx	lr
1000a576:	bf00      	nop
1000a578:	10011a34 	.word	0x10011a34
1000a57c:	10011a3c 	.word	0x10011a3c

1000a580 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
1000a580:	b480      	push	{r7}
1000a582:	b083      	sub	sp, #12
1000a584:	af00      	add	r7, sp, #0
1000a586:	6078      	str	r0, [r7, #4]
	list->prev = list;
1000a588:	687b      	ldr	r3, [r7, #4]
1000a58a:	687a      	ldr	r2, [r7, #4]
1000a58c:	605a      	str	r2, [r3, #4]
	list->next = list;
1000a58e:	687b      	ldr	r3, [r7, #4]
1000a590:	687a      	ldr	r2, [r7, #4]
1000a592:	601a      	str	r2, [r3, #0]
}
1000a594:	bf00      	nop
1000a596:	370c      	adds	r7, #12
1000a598:	46bd      	mov	sp, r7
1000a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a59e:	4770      	bx	lr

1000a5a0 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
1000a5a0:	b480      	push	{r7}
1000a5a2:	b083      	sub	sp, #12
1000a5a4:	af00      	add	r7, sp, #0
1000a5a6:	6078      	str	r0, [r7, #4]
1000a5a8:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
1000a5aa:	687b      	ldr	r3, [r7, #4]
1000a5ac:	685a      	ldr	r2, [r3, #4]
1000a5ae:	683b      	ldr	r3, [r7, #0]
1000a5b0:	605a      	str	r2, [r3, #4]
	new_node->next = node;
1000a5b2:	683b      	ldr	r3, [r7, #0]
1000a5b4:	687a      	ldr	r2, [r7, #4]
1000a5b6:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
1000a5b8:	683b      	ldr	r3, [r7, #0]
1000a5ba:	681b      	ldr	r3, [r3, #0]
1000a5bc:	683a      	ldr	r2, [r7, #0]
1000a5be:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
1000a5c0:	683b      	ldr	r3, [r7, #0]
1000a5c2:	685b      	ldr	r3, [r3, #4]
1000a5c4:	683a      	ldr	r2, [r7, #0]
1000a5c6:	601a      	str	r2, [r3, #0]
}
1000a5c8:	bf00      	nop
1000a5ca:	370c      	adds	r7, #12
1000a5cc:	46bd      	mov	sp, r7
1000a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a5d2:	4770      	bx	lr

1000a5d4 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
1000a5d4:	b580      	push	{r7, lr}
1000a5d6:	b082      	sub	sp, #8
1000a5d8:	af00      	add	r7, sp, #0
1000a5da:	6078      	str	r0, [r7, #4]
1000a5dc:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
1000a5de:	6839      	ldr	r1, [r7, #0]
1000a5e0:	6878      	ldr	r0, [r7, #4]
1000a5e2:	f7ff ffdd 	bl	1000a5a0 <metal_list_add_before>
}
1000a5e6:	bf00      	nop
1000a5e8:	3708      	adds	r7, #8
1000a5ea:	46bd      	mov	sp, r7
1000a5ec:	bd80      	pop	{r7, pc}

1000a5ee <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
1000a5ee:	b580      	push	{r7, lr}
1000a5f0:	b082      	sub	sp, #8
1000a5f2:	af00      	add	r7, sp, #0
1000a5f4:	6078      	str	r0, [r7, #4]
1000a5f6:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
1000a5f8:	6839      	ldr	r1, [r7, #0]
1000a5fa:	6878      	ldr	r0, [r7, #4]
1000a5fc:	f001 fc26 	bl	1000be4c <metal_machine_cache_flush>
}
1000a600:	bf00      	nop
1000a602:	3708      	adds	r7, #8
1000a604:	46bd      	mov	sp, r7
1000a606:	bd80      	pop	{r7, pc}

1000a608 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
1000a608:	b580      	push	{r7, lr}
1000a60a:	b082      	sub	sp, #8
1000a60c:	af00      	add	r7, sp, #0
1000a60e:	6078      	str	r0, [r7, #4]
1000a610:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
1000a612:	6839      	ldr	r1, [r7, #0]
1000a614:	6878      	ldr	r0, [r7, #4]
1000a616:	f001 fc24 	bl	1000be62 <metal_machine_cache_invalidate>
}
1000a61a:	bf00      	nop
1000a61c:	3708      	adds	r7, #8
1000a61e:	46bd      	mov	sp, r7
1000a620:	bd80      	pop	{r7, pc}

1000a622 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
1000a622:	b580      	push	{r7, lr}
1000a624:	b082      	sub	sp, #8
1000a626:	af00      	add	r7, sp, #0
1000a628:	6078      	str	r0, [r7, #4]
1000a62a:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
1000a62c:	6839      	ldr	r1, [r7, #0]
1000a62e:	6878      	ldr	r0, [r7, #4]
1000a630:	f7ff ffdd 	bl	1000a5ee <__metal_cache_flush>
}
1000a634:	bf00      	nop
1000a636:	3708      	adds	r7, #8
1000a638:	46bd      	mov	sp, r7
1000a63a:	bd80      	pop	{r7, pc}

1000a63c <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
1000a63c:	b580      	push	{r7, lr}
1000a63e:	b082      	sub	sp, #8
1000a640:	af00      	add	r7, sp, #0
1000a642:	6078      	str	r0, [r7, #4]
1000a644:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
1000a646:	6839      	ldr	r1, [r7, #0]
1000a648:	6878      	ldr	r0, [r7, #4]
1000a64a:	f7ff ffdd 	bl	1000a608 <__metal_cache_invalidate>
}
1000a64e:	bf00      	nop
1000a650:	3708      	adds	r7, #8
1000a652:	46bd      	mov	sp, r7
1000a654:	bd80      	pop	{r7, pc}
	...

1000a658 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
1000a658:	b580      	push	{r7, lr}
1000a65a:	b082      	sub	sp, #8
1000a65c:	af00      	add	r7, sp, #0
1000a65e:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
1000a660:	687b      	ldr	r3, [r7, #4]
1000a662:	2b00      	cmp	r3, #0
1000a664:	d008      	beq.n	1000a678 <metal_bus_register+0x20>
1000a666:	687b      	ldr	r3, [r7, #4]
1000a668:	681b      	ldr	r3, [r3, #0]
1000a66a:	2b00      	cmp	r3, #0
1000a66c:	d004      	beq.n	1000a678 <metal_bus_register+0x20>
1000a66e:	687b      	ldr	r3, [r7, #4]
1000a670:	681b      	ldr	r3, [r3, #0]
1000a672:	781b      	ldrb	r3, [r3, #0]
1000a674:	2b00      	cmp	r3, #0
1000a676:	d102      	bne.n	1000a67e <metal_bus_register+0x26>
		return -EINVAL;
1000a678:	f06f 0315 	mvn.w	r3, #21
1000a67c:	e026      	b.n	1000a6cc <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
1000a67e:	687b      	ldr	r3, [r7, #4]
1000a680:	681b      	ldr	r3, [r3, #0]
1000a682:	2100      	movs	r1, #0
1000a684:	4618      	mov	r0, r3
1000a686:	f000 f82b 	bl	1000a6e0 <metal_bus_find>
1000a68a:	4603      	mov	r3, r0
1000a68c:	2b00      	cmp	r3, #0
1000a68e:	d102      	bne.n	1000a696 <metal_bus_register+0x3e>
		return -EEXIST;
1000a690:	f06f 0310 	mvn.w	r3, #16
1000a694:	e01a      	b.n	1000a6cc <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
1000a696:	687b      	ldr	r3, [r7, #4]
1000a698:	331c      	adds	r3, #28
1000a69a:	4618      	mov	r0, r3
1000a69c:	f7ff ff70 	bl	1000a580 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
1000a6a0:	687b      	ldr	r3, [r7, #4]
1000a6a2:	3324      	adds	r3, #36	; 0x24
1000a6a4:	4619      	mov	r1, r3
1000a6a6:	480b      	ldr	r0, [pc, #44]	; (1000a6d4 <metal_bus_register+0x7c>)
1000a6a8:	f7ff ff94 	bl	1000a5d4 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
1000a6ac:	4b0a      	ldr	r3, [pc, #40]	; (1000a6d8 <metal_bus_register+0x80>)
1000a6ae:	781b      	ldrb	r3, [r3, #0]
1000a6b0:	2b06      	cmp	r3, #6
1000a6b2:	d90a      	bls.n	1000a6ca <metal_bus_register+0x72>
1000a6b4:	4b08      	ldr	r3, [pc, #32]	; (1000a6d8 <metal_bus_register+0x80>)
1000a6b6:	685b      	ldr	r3, [r3, #4]
1000a6b8:	2b00      	cmp	r3, #0
1000a6ba:	d006      	beq.n	1000a6ca <metal_bus_register+0x72>
1000a6bc:	4b06      	ldr	r3, [pc, #24]	; (1000a6d8 <metal_bus_register+0x80>)
1000a6be:	685b      	ldr	r3, [r3, #4]
1000a6c0:	687a      	ldr	r2, [r7, #4]
1000a6c2:	6812      	ldr	r2, [r2, #0]
1000a6c4:	4905      	ldr	r1, [pc, #20]	; (1000a6dc <metal_bus_register+0x84>)
1000a6c6:	2007      	movs	r0, #7
1000a6c8:	4798      	blx	r3
	return 0;
1000a6ca:	2300      	movs	r3, #0
}
1000a6cc:	4618      	mov	r0, r3
1000a6ce:	3708      	adds	r7, #8
1000a6d0:	46bd      	mov	sp, r7
1000a6d2:	bd80      	pop	{r7, pc}
1000a6d4:	10021ed0 	.word	0x10021ed0
1000a6d8:	10021ec8 	.word	0x10021ec8
1000a6dc:	10011a44 	.word	0x10011a44

1000a6e0 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
1000a6e0:	b580      	push	{r7, lr}
1000a6e2:	b084      	sub	sp, #16
1000a6e4:	af00      	add	r7, sp, #0
1000a6e6:	6078      	str	r0, [r7, #4]
1000a6e8:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
1000a6ea:	4b12      	ldr	r3, [pc, #72]	; (1000a734 <metal_bus_find+0x54>)
1000a6ec:	689b      	ldr	r3, [r3, #8]
1000a6ee:	60fb      	str	r3, [r7, #12]
1000a6f0:	e016      	b.n	1000a720 <metal_bus_find+0x40>
		bus = metal_container_of(node, struct metal_bus, node);
1000a6f2:	68fb      	ldr	r3, [r7, #12]
1000a6f4:	3b24      	subs	r3, #36	; 0x24
1000a6f6:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) == 0 && result) {
1000a6f8:	68bb      	ldr	r3, [r7, #8]
1000a6fa:	681b      	ldr	r3, [r3, #0]
1000a6fc:	6879      	ldr	r1, [r7, #4]
1000a6fe:	4618      	mov	r0, r3
1000a700:	f7f5 fc9e 	bl	10000040 <strcmp>
1000a704:	4603      	mov	r3, r0
1000a706:	2b00      	cmp	r3, #0
1000a708:	d107      	bne.n	1000a71a <metal_bus_find+0x3a>
1000a70a:	683b      	ldr	r3, [r7, #0]
1000a70c:	2b00      	cmp	r3, #0
1000a70e:	d004      	beq.n	1000a71a <metal_bus_find+0x3a>
			*result = bus;
1000a710:	683b      	ldr	r3, [r7, #0]
1000a712:	68ba      	ldr	r2, [r7, #8]
1000a714:	601a      	str	r2, [r3, #0]
			return 0;
1000a716:	2300      	movs	r3, #0
1000a718:	e008      	b.n	1000a72c <metal_bus_find+0x4c>
	metal_list_for_each(&_metal.common.bus_list, node) {
1000a71a:	68fb      	ldr	r3, [r7, #12]
1000a71c:	681b      	ldr	r3, [r3, #0]
1000a71e:	60fb      	str	r3, [r7, #12]
1000a720:	68fb      	ldr	r3, [r7, #12]
1000a722:	4a05      	ldr	r2, [pc, #20]	; (1000a738 <metal_bus_find+0x58>)
1000a724:	4293      	cmp	r3, r2
1000a726:	d1e4      	bne.n	1000a6f2 <metal_bus_find+0x12>
		}
	}
	return -ENOENT;
1000a728:	f06f 0301 	mvn.w	r3, #1
}
1000a72c:	4618      	mov	r0, r3
1000a72e:	3710      	adds	r7, #16
1000a730:	46bd      	mov	sp, r7
1000a732:	bd80      	pop	{r7, pc}
1000a734:	10021ec8 	.word	0x10021ec8
1000a738:	10021ed0 	.word	0x10021ed0

1000a73c <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
1000a73c:	b580      	push	{r7, lr}
1000a73e:	b086      	sub	sp, #24
1000a740:	af00      	add	r7, sp, #0
1000a742:	60f8      	str	r0, [r7, #12]
1000a744:	60b9      	str	r1, [r7, #8]
1000a746:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
1000a748:	68fb      	ldr	r3, [r7, #12]
1000a74a:	2b00      	cmp	r3, #0
1000a74c:	d00d      	beq.n	1000a76a <metal_device_open+0x2e>
1000a74e:	68fb      	ldr	r3, [r7, #12]
1000a750:	781b      	ldrb	r3, [r3, #0]
1000a752:	2b00      	cmp	r3, #0
1000a754:	d009      	beq.n	1000a76a <metal_device_open+0x2e>
1000a756:	68bb      	ldr	r3, [r7, #8]
1000a758:	2b00      	cmp	r3, #0
1000a75a:	d006      	beq.n	1000a76a <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
1000a75c:	68bb      	ldr	r3, [r7, #8]
1000a75e:	781b      	ldrb	r3, [r3, #0]
1000a760:	2b00      	cmp	r3, #0
1000a762:	d002      	beq.n	1000a76a <metal_device_open+0x2e>
1000a764:	687b      	ldr	r3, [r7, #4]
1000a766:	2b00      	cmp	r3, #0
1000a768:	d102      	bne.n	1000a770 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
1000a76a:	f06f 0315 	mvn.w	r3, #21
1000a76e:	e01f      	b.n	1000a7b0 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
1000a770:	f107 0310 	add.w	r3, r7, #16
1000a774:	4619      	mov	r1, r3
1000a776:	68f8      	ldr	r0, [r7, #12]
1000a778:	f7ff ffb2 	bl	1000a6e0 <metal_bus_find>
1000a77c:	6178      	str	r0, [r7, #20]
	if (error)
1000a77e:	697b      	ldr	r3, [r7, #20]
1000a780:	2b00      	cmp	r3, #0
1000a782:	d001      	beq.n	1000a788 <metal_device_open+0x4c>
		return error;
1000a784:	697b      	ldr	r3, [r7, #20]
1000a786:	e013      	b.n	1000a7b0 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
1000a788:	693b      	ldr	r3, [r7, #16]
1000a78a:	689b      	ldr	r3, [r3, #8]
1000a78c:	2b00      	cmp	r3, #0
1000a78e:	d102      	bne.n	1000a796 <metal_device_open+0x5a>
		return -ENODEV;
1000a790:	f06f 0312 	mvn.w	r3, #18
1000a794:	e00c      	b.n	1000a7b0 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
1000a796:	693b      	ldr	r3, [r7, #16]
1000a798:	689b      	ldr	r3, [r3, #8]
1000a79a:	6938      	ldr	r0, [r7, #16]
1000a79c:	687a      	ldr	r2, [r7, #4]
1000a79e:	68b9      	ldr	r1, [r7, #8]
1000a7a0:	4798      	blx	r3
1000a7a2:	6178      	str	r0, [r7, #20]
	if (error)
1000a7a4:	697b      	ldr	r3, [r7, #20]
1000a7a6:	2b00      	cmp	r3, #0
1000a7a8:	d001      	beq.n	1000a7ae <metal_device_open+0x72>
		return error;
1000a7aa:	697b      	ldr	r3, [r7, #20]
1000a7ac:	e000      	b.n	1000a7b0 <metal_device_open+0x74>

	return 0;
1000a7ae:	2300      	movs	r3, #0
}
1000a7b0:	4618      	mov	r0, r3
1000a7b2:	3718      	adds	r7, #24
1000a7b4:	46bd      	mov	sp, r7
1000a7b6:	bd80      	pop	{r7, pc}

1000a7b8 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
1000a7b8:	b580      	push	{r7, lr}
1000a7ba:	b082      	sub	sp, #8
1000a7bc:	af00      	add	r7, sp, #0
1000a7be:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
1000a7c0:	687b      	ldr	r3, [r7, #4]
1000a7c2:	681b      	ldr	r3, [r3, #0]
1000a7c4:	2b00      	cmp	r3, #0
1000a7c6:	d008      	beq.n	1000a7da <metal_register_generic_device+0x22>
1000a7c8:	687b      	ldr	r3, [r7, #4]
1000a7ca:	681b      	ldr	r3, [r3, #0]
1000a7cc:	781b      	ldrb	r3, [r3, #0]
1000a7ce:	2b00      	cmp	r3, #0
1000a7d0:	d003      	beq.n	1000a7da <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
1000a7d2:	687b      	ldr	r3, [r7, #4]
1000a7d4:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
1000a7d6:	2b02      	cmp	r3, #2
1000a7d8:	d902      	bls.n	1000a7e0 <metal_register_generic_device+0x28>
		return -EINVAL;
1000a7da:	f06f 0315 	mvn.w	r3, #21
1000a7de:	e009      	b.n	1000a7f4 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
1000a7e0:	687b      	ldr	r3, [r7, #4]
1000a7e2:	4a06      	ldr	r2, [pc, #24]	; (1000a7fc <metal_register_generic_device+0x44>)
1000a7e4:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
1000a7e6:	687b      	ldr	r3, [r7, #4]
1000a7e8:	337c      	adds	r3, #124	; 0x7c
1000a7ea:	4619      	mov	r1, r3
1000a7ec:	4804      	ldr	r0, [pc, #16]	; (1000a800 <metal_register_generic_device+0x48>)
1000a7ee:	f7ff fef1 	bl	1000a5d4 <metal_list_add_tail>
			    &device->node);
	return 0;
1000a7f2:	2300      	movs	r3, #0
}
1000a7f4:	4618      	mov	r0, r3
1000a7f6:	3708      	adds	r7, #8
1000a7f8:	46bd      	mov	sp, r7
1000a7fa:	bd80      	pop	{r7, pc}
1000a7fc:	1002000c 	.word	0x1002000c
1000a800:	10021ee0 	.word	0x10021ee0

1000a804 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
1000a804:	b580      	push	{r7, lr}
1000a806:	b086      	sub	sp, #24
1000a808:	af00      	add	r7, sp, #0
1000a80a:	60f8      	str	r0, [r7, #12]
1000a80c:	60b9      	str	r1, [r7, #8]
1000a80e:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
1000a810:	4b12      	ldr	r3, [pc, #72]	; (1000a85c <metal_generic_dev_open+0x58>)
1000a812:	699b      	ldr	r3, [r3, #24]
1000a814:	617b      	str	r3, [r7, #20]
1000a816:	e016      	b.n	1000a846 <metal_generic_dev_open+0x42>
		dev = metal_container_of(node, struct metal_device, node);
1000a818:	697b      	ldr	r3, [r7, #20]
1000a81a:	3b7c      	subs	r3, #124	; 0x7c
1000a81c:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) == 0) {
1000a81e:	693b      	ldr	r3, [r7, #16]
1000a820:	681b      	ldr	r3, [r3, #0]
1000a822:	68b9      	ldr	r1, [r7, #8]
1000a824:	4618      	mov	r0, r3
1000a826:	f7f5 fc0b 	bl	10000040 <strcmp>
1000a82a:	4603      	mov	r3, r0
1000a82c:	2b00      	cmp	r3, #0
1000a82e:	d107      	bne.n	1000a840 <metal_generic_dev_open+0x3c>
			*device = dev;
1000a830:	687b      	ldr	r3, [r7, #4]
1000a832:	693a      	ldr	r2, [r7, #16]
1000a834:	601a      	str	r2, [r3, #0]
			return metal_generic_dev_sys_open(dev);
1000a836:	6938      	ldr	r0, [r7, #16]
1000a838:	f000 f890 	bl	1000a95c <metal_generic_dev_sys_open>
1000a83c:	4603      	mov	r3, r0
1000a83e:	e008      	b.n	1000a852 <metal_generic_dev_open+0x4e>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
1000a840:	697b      	ldr	r3, [r7, #20]
1000a842:	681b      	ldr	r3, [r3, #0]
1000a844:	617b      	str	r3, [r7, #20]
1000a846:	697b      	ldr	r3, [r7, #20]
1000a848:	4a05      	ldr	r2, [pc, #20]	; (1000a860 <metal_generic_dev_open+0x5c>)
1000a84a:	4293      	cmp	r3, r2
1000a84c:	d1e4      	bne.n	1000a818 <metal_generic_dev_open+0x14>
		}
	}

	return -ENODEV;
1000a84e:	f06f 0312 	mvn.w	r3, #18
}
1000a852:	4618      	mov	r0, r3
1000a854:	3718      	adds	r7, #24
1000a856:	46bd      	mov	sp, r7
1000a858:	bd80      	pop	{r7, pc}
1000a85a:	bf00      	nop
1000a85c:	10021ec8 	.word	0x10021ec8
1000a860:	10021ee0 	.word	0x10021ee0

1000a864 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
1000a864:	b580      	push	{r7, lr}
1000a866:	b086      	sub	sp, #24
1000a868:	af00      	add	r7, sp, #0
1000a86a:	60f8      	str	r0, [r7, #12]
1000a86c:	60b9      	str	r1, [r7, #8]
1000a86e:	607a      	str	r2, [r7, #4]
1000a870:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;

	if (sg_out != sg_in)
1000a872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000a874:	683b      	ldr	r3, [r7, #0]
1000a876:	429a      	cmp	r2, r3
1000a878:	d009      	beq.n	1000a88e <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
1000a87a:	6a3a      	ldr	r2, [r7, #32]
1000a87c:	4613      	mov	r3, r2
1000a87e:	005b      	lsls	r3, r3, #1
1000a880:	4413      	add	r3, r2
1000a882:	009b      	lsls	r3, r3, #2
1000a884:	461a      	mov	r2, r3
1000a886:	6839      	ldr	r1, [r7, #0]
1000a888:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000a88a:	f004 ff6c 	bl	1000f766 <memcpy>
	for (i = 0; i < nents_in; i++) {
1000a88e:	2300      	movs	r3, #0
1000a890:	617b      	str	r3, [r7, #20]
1000a892:	e02f      	b.n	1000a8f4 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
1000a894:	687b      	ldr	r3, [r7, #4]
1000a896:	2b02      	cmp	r3, #2
1000a898:	d114      	bne.n	1000a8c4 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
1000a89a:	697a      	ldr	r2, [r7, #20]
1000a89c:	4613      	mov	r3, r2
1000a89e:	005b      	lsls	r3, r3, #1
1000a8a0:	4413      	add	r3, r2
1000a8a2:	009b      	lsls	r3, r3, #2
1000a8a4:	461a      	mov	r2, r3
1000a8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000a8a8:	4413      	add	r3, r2
1000a8aa:	6818      	ldr	r0, [r3, #0]
1000a8ac:	697a      	ldr	r2, [r7, #20]
1000a8ae:	4613      	mov	r3, r2
1000a8b0:	005b      	lsls	r3, r3, #1
1000a8b2:	4413      	add	r3, r2
1000a8b4:	009b      	lsls	r3, r3, #2
1000a8b6:	461a      	mov	r2, r3
1000a8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000a8ba:	4413      	add	r3, r2
1000a8bc:	689b      	ldr	r3, [r3, #8]
1000a8be:	4619      	mov	r1, r3
1000a8c0:	f7ff feaf 	bl	1000a622 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
1000a8c4:	697a      	ldr	r2, [r7, #20]
1000a8c6:	4613      	mov	r3, r2
1000a8c8:	005b      	lsls	r3, r3, #1
1000a8ca:	4413      	add	r3, r2
1000a8cc:	009b      	lsls	r3, r3, #2
1000a8ce:	461a      	mov	r2, r3
1000a8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000a8d2:	4413      	add	r3, r2
1000a8d4:	6818      	ldr	r0, [r3, #0]
1000a8d6:	697a      	ldr	r2, [r7, #20]
1000a8d8:	4613      	mov	r3, r2
1000a8da:	005b      	lsls	r3, r3, #1
1000a8dc:	4413      	add	r3, r2
1000a8de:	009b      	lsls	r3, r3, #2
1000a8e0:	461a      	mov	r2, r3
1000a8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000a8e4:	4413      	add	r3, r2
1000a8e6:	689b      	ldr	r3, [r3, #8]
1000a8e8:	4619      	mov	r1, r3
1000a8ea:	f7ff fea7 	bl	1000a63c <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
1000a8ee:	697b      	ldr	r3, [r7, #20]
1000a8f0:	3301      	adds	r3, #1
1000a8f2:	617b      	str	r3, [r7, #20]
1000a8f4:	697a      	ldr	r2, [r7, #20]
1000a8f6:	6a3b      	ldr	r3, [r7, #32]
1000a8f8:	429a      	cmp	r2, r3
1000a8fa:	dbcb      	blt.n	1000a894 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
1000a8fc:	6a3b      	ldr	r3, [r7, #32]
}
1000a8fe:	4618      	mov	r0, r3
1000a900:	3718      	adds	r7, #24
1000a902:	46bd      	mov	sp, r7
1000a904:	bd80      	pop	{r7, pc}

1000a906 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
1000a906:	b580      	push	{r7, lr}
1000a908:	b086      	sub	sp, #24
1000a90a:	af00      	add	r7, sp, #0
1000a90c:	60f8      	str	r0, [r7, #12]
1000a90e:	60b9      	str	r1, [r7, #8]
1000a910:	607a      	str	r2, [r7, #4]
1000a912:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;
	(void)dir;

	for (i = 0; i < nents; i++) {
1000a914:	2300      	movs	r3, #0
1000a916:	617b      	str	r3, [r7, #20]
1000a918:	e017      	b.n	1000a94a <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
1000a91a:	697a      	ldr	r2, [r7, #20]
1000a91c:	4613      	mov	r3, r2
1000a91e:	005b      	lsls	r3, r3, #1
1000a920:	4413      	add	r3, r2
1000a922:	009b      	lsls	r3, r3, #2
1000a924:	461a      	mov	r2, r3
1000a926:	683b      	ldr	r3, [r7, #0]
1000a928:	4413      	add	r3, r2
1000a92a:	6818      	ldr	r0, [r3, #0]
1000a92c:	697a      	ldr	r2, [r7, #20]
1000a92e:	4613      	mov	r3, r2
1000a930:	005b      	lsls	r3, r3, #1
1000a932:	4413      	add	r3, r2
1000a934:	009b      	lsls	r3, r3, #2
1000a936:	461a      	mov	r2, r3
1000a938:	683b      	ldr	r3, [r7, #0]
1000a93a:	4413      	add	r3, r2
1000a93c:	689b      	ldr	r3, [r3, #8]
1000a93e:	4619      	mov	r1, r3
1000a940:	f7ff fe7c 	bl	1000a63c <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
1000a944:	697b      	ldr	r3, [r7, #20]
1000a946:	3301      	adds	r3, #1
1000a948:	617b      	str	r3, [r7, #20]
1000a94a:	697a      	ldr	r2, [r7, #20]
1000a94c:	6a3b      	ldr	r3, [r7, #32]
1000a94e:	429a      	cmp	r2, r3
1000a950:	dbe3      	blt.n	1000a91a <metal_generic_dev_dma_unmap+0x14>
	}
}
1000a952:	bf00      	nop
1000a954:	bf00      	nop
1000a956:	3718      	adds	r7, #24
1000a958:	46bd      	mov	sp, r7
1000a95a:	bd80      	pop	{r7, pc}

1000a95c <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
1000a95c:	b580      	push	{r7, lr}
1000a95e:	b084      	sub	sp, #16
1000a960:	af00      	add	r7, sp, #0
1000a962:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned int i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
1000a964:	2300      	movs	r3, #0
1000a966:	60fb      	str	r3, [r7, #12]
1000a968:	e013      	b.n	1000a992 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
1000a96a:	68fa      	ldr	r2, [r7, #12]
1000a96c:	4613      	mov	r3, r2
1000a96e:	00db      	lsls	r3, r3, #3
1000a970:	1a9b      	subs	r3, r3, r2
1000a972:	00db      	lsls	r3, r3, #3
1000a974:	3308      	adds	r3, #8
1000a976:	687a      	ldr	r2, [r7, #4]
1000a978:	4413      	add	r3, r2
1000a97a:	3304      	adds	r3, #4
1000a97c:	60bb      	str	r3, [r7, #8]
		if (!io->size)
1000a97e:	68bb      	ldr	r3, [r7, #8]
1000a980:	689b      	ldr	r3, [r3, #8]
1000a982:	2b00      	cmp	r3, #0
1000a984:	d00b      	beq.n	1000a99e <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
1000a986:	68b8      	ldr	r0, [r7, #8]
1000a988:	f000 f81e 	bl	1000a9c8 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
1000a98c:	68fb      	ldr	r3, [r7, #12]
1000a98e:	3301      	adds	r3, #1
1000a990:	60fb      	str	r3, [r7, #12]
1000a992:	687b      	ldr	r3, [r7, #4]
1000a994:	689b      	ldr	r3, [r3, #8]
1000a996:	68fa      	ldr	r2, [r7, #12]
1000a998:	429a      	cmp	r2, r3
1000a99a:	d3e6      	bcc.n	1000a96a <metal_generic_dev_sys_open+0xe>
1000a99c:	e000      	b.n	1000a9a0 <metal_generic_dev_sys_open+0x44>
			break;
1000a99e:	bf00      	nop
	}

	return 0;
1000a9a0:	2300      	movs	r3, #0
}
1000a9a2:	4618      	mov	r0, r3
1000a9a4:	3710      	adds	r7, #16
1000a9a6:	46bd      	mov	sp, r7
1000a9a8:	bd80      	pop	{r7, pc}
	...

1000a9ac <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
1000a9ac:	b580      	push	{r7, lr}
1000a9ae:	b082      	sub	sp, #8
1000a9b0:	af00      	add	r7, sp, #0
1000a9b2:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
1000a9b4:	4803      	ldr	r0, [pc, #12]	; (1000a9c4 <metal_sys_init+0x18>)
1000a9b6:	f7ff fe4f 	bl	1000a658 <metal_bus_register>
	return 0;
1000a9ba:	2300      	movs	r3, #0
}
1000a9bc:	4618      	mov	r0, r3
1000a9be:	3708      	adds	r7, #8
1000a9c0:	46bd      	mov	sp, r7
1000a9c2:	bd80      	pop	{r7, pc}
1000a9c4:	1002000c 	.word	0x1002000c

1000a9c8 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
1000a9c8:	b580      	push	{r7, lr}
1000a9ca:	b086      	sub	sp, #24
1000a9cc:	af00      	add	r7, sp, #0
1000a9ce:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = io->virt;
1000a9d0:	687b      	ldr	r3, [r7, #4]
1000a9d2:	681b      	ldr	r3, [r3, #0]
1000a9d4:	60fb      	str	r3, [r7, #12]
	psize = (size_t)io->size;
1000a9d6:	687b      	ldr	r3, [r7, #4]
1000a9d8:	689b      	ldr	r3, [r3, #8]
1000a9da:	613b      	str	r3, [r7, #16]
	if (psize) {
1000a9dc:	693b      	ldr	r3, [r7, #16]
1000a9de:	2b00      	cmp	r3, #0
1000a9e0:	d02c      	beq.n	1000aa3c <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
1000a9e2:	687b      	ldr	r3, [r7, #4]
1000a9e4:	68db      	ldr	r3, [r3, #12]
1000a9e6:	693a      	ldr	r2, [r7, #16]
1000a9e8:	fa22 f303 	lsr.w	r3, r2, r3
1000a9ec:	2b00      	cmp	r3, #0
1000a9ee:	d005      	beq.n	1000a9fc <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
1000a9f0:	687b      	ldr	r3, [r7, #4]
1000a9f2:	68db      	ldr	r3, [r3, #12]
1000a9f4:	2201      	movs	r2, #1
1000a9f6:	fa02 f303 	lsl.w	r3, r2, r3
1000a9fa:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
1000a9fc:	2300      	movs	r3, #0
1000a9fe:	617b      	str	r3, [r7, #20]
1000aa00:	e013      	b.n	1000aa2a <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
1000aa02:	687b      	ldr	r3, [r7, #4]
1000aa04:	685a      	ldr	r2, [r3, #4]
1000aa06:	697b      	ldr	r3, [r7, #20]
1000aa08:	009b      	lsls	r3, r3, #2
1000aa0a:	4413      	add	r3, r2
1000aa0c:	6819      	ldr	r1, [r3, #0]
1000aa0e:	687b      	ldr	r3, [r7, #4]
1000aa10:	695b      	ldr	r3, [r3, #20]
1000aa12:	693a      	ldr	r2, [r7, #16]
1000aa14:	68f8      	ldr	r0, [r7, #12]
1000aa16:	f001 fa2f 	bl	1000be78 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
1000aa1a:	693b      	ldr	r3, [r7, #16]
1000aa1c:	009b      	lsls	r3, r3, #2
1000aa1e:	68fa      	ldr	r2, [r7, #12]
1000aa20:	4413      	add	r3, r2
1000aa22:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
1000aa24:	697b      	ldr	r3, [r7, #20]
1000aa26:	3301      	adds	r3, #1
1000aa28:	617b      	str	r3, [r7, #20]
1000aa2a:	687b      	ldr	r3, [r7, #4]
1000aa2c:	689a      	ldr	r2, [r3, #8]
1000aa2e:	687b      	ldr	r3, [r7, #4]
1000aa30:	68db      	ldr	r3, [r3, #12]
1000aa32:	fa22 f303 	lsr.w	r3, r2, r3
1000aa36:	697a      	ldr	r2, [r7, #20]
1000aa38:	429a      	cmp	r2, r3
1000aa3a:	d9e2      	bls.n	1000aa02 <metal_sys_io_mem_map+0x3a>
		}
	}
}
1000aa3c:	bf00      	nop
1000aa3e:	3718      	adds	r7, #24
1000aa40:	46bd      	mov	sp, r7
1000aa42:	bd80      	pop	{r7, pc}

1000aa44 <metal_list_init>:
{
1000aa44:	b480      	push	{r7}
1000aa46:	b083      	sub	sp, #12
1000aa48:	af00      	add	r7, sp, #0
1000aa4a:	6078      	str	r0, [r7, #4]
	list->prev = list;
1000aa4c:	687b      	ldr	r3, [r7, #4]
1000aa4e:	687a      	ldr	r2, [r7, #4]
1000aa50:	605a      	str	r2, [r3, #4]
	list->next = list;
1000aa52:	687b      	ldr	r3, [r7, #4]
1000aa54:	687a      	ldr	r2, [r7, #4]
1000aa56:	601a      	str	r2, [r3, #0]
}
1000aa58:	bf00      	nop
1000aa5a:	370c      	adds	r7, #12
1000aa5c:	46bd      	mov	sp, r7
1000aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
1000aa62:	4770      	bx	lr

1000aa64 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
1000aa64:	b580      	push	{r7, lr}
1000aa66:	b084      	sub	sp, #16
1000aa68:	af00      	add	r7, sp, #0
1000aa6a:	6078      	str	r0, [r7, #4]
	int error = 0;
1000aa6c:	2300      	movs	r3, #0
1000aa6e:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
1000aa70:	2220      	movs	r2, #32
1000aa72:	2100      	movs	r1, #0
1000aa74:	4810      	ldr	r0, [pc, #64]	; (1000aab8 <metal_init+0x54>)
1000aa76:	f004 fdc2 	bl	1000f5fe <memset>

	_metal.common.log_handler   = params->log_handler;
1000aa7a:	687b      	ldr	r3, [r7, #4]
1000aa7c:	681b      	ldr	r3, [r3, #0]
1000aa7e:	4a0e      	ldr	r2, [pc, #56]	; (1000aab8 <metal_init+0x54>)
1000aa80:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
1000aa82:	687b      	ldr	r3, [r7, #4]
1000aa84:	791a      	ldrb	r2, [r3, #4]
1000aa86:	4b0c      	ldr	r3, [pc, #48]	; (1000aab8 <metal_init+0x54>)
1000aa88:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
1000aa8a:	480c      	ldr	r0, [pc, #48]	; (1000aabc <metal_init+0x58>)
1000aa8c:	f7ff ffda 	bl	1000aa44 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
1000aa90:	480b      	ldr	r0, [pc, #44]	; (1000aac0 <metal_init+0x5c>)
1000aa92:	f7ff ffd7 	bl	1000aa44 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
1000aa96:	480b      	ldr	r0, [pc, #44]	; (1000aac4 <metal_init+0x60>)
1000aa98:	f7ff ffd4 	bl	1000aa44 <metal_list_init>

	error = metal_sys_init(params);
1000aa9c:	6878      	ldr	r0, [r7, #4]
1000aa9e:	f7ff ff85 	bl	1000a9ac <metal_sys_init>
1000aaa2:	60f8      	str	r0, [r7, #12]
	if (error)
1000aaa4:	68fb      	ldr	r3, [r7, #12]
1000aaa6:	2b00      	cmp	r3, #0
1000aaa8:	d001      	beq.n	1000aaae <metal_init+0x4a>
		return error;
1000aaaa:	68fb      	ldr	r3, [r7, #12]
1000aaac:	e000      	b.n	1000aab0 <metal_init+0x4c>

	return error;
1000aaae:	68fb      	ldr	r3, [r7, #12]
}
1000aab0:	4618      	mov	r0, r3
1000aab2:	3710      	adds	r7, #16
1000aab4:	46bd      	mov	sp, r7
1000aab6:	bd80      	pop	{r7, pc}
1000aab8:	10021ec8 	.word	0x10021ec8
1000aabc:	10021ed0 	.word	0x10021ed0
1000aac0:	10021ed8 	.word	0x10021ed8
1000aac4:	10021ee0 	.word	0x10021ee0

1000aac8 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
1000aac8:	b480      	push	{r7}
1000aaca:	b083      	sub	sp, #12
1000aacc:	af00      	add	r7, sp, #0
1000aace:	6078      	str	r0, [r7, #4]
1000aad0:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
1000aad2:	687b      	ldr	r3, [r7, #4]
1000aad4:	681b      	ldr	r3, [r3, #0]
		? (void *)((uintptr_t)io->virt + offset)
		: NULL);
1000aad6:	f1b3 3fff 	cmp.w	r3, #4294967295
1000aada:	d00a      	beq.n	1000aaf2 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
1000aadc:	687b      	ldr	r3, [r7, #4]
1000aade:	689b      	ldr	r3, [r3, #8]
1000aae0:	683a      	ldr	r2, [r7, #0]
1000aae2:	429a      	cmp	r2, r3
1000aae4:	d205      	bcs.n	1000aaf2 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
1000aae6:	687b      	ldr	r3, [r7, #4]
1000aae8:	681b      	ldr	r3, [r3, #0]
1000aaea:	461a      	mov	r2, r3
1000aaec:	683b      	ldr	r3, [r7, #0]
1000aaee:	4413      	add	r3, r2
		: NULL);
1000aaf0:	e000      	b.n	1000aaf4 <metal_io_virt+0x2c>
1000aaf2:	2300      	movs	r3, #0
}
1000aaf4:	4618      	mov	r0, r3
1000aaf6:	370c      	adds	r7, #12
1000aaf8:	46bd      	mov	sp, r7
1000aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
1000aafe:	4770      	bx	lr

1000ab00 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
1000ab00:	b5b0      	push	{r4, r5, r7, lr}
1000ab02:	b08c      	sub	sp, #48	; 0x30
1000ab04:	af00      	add	r7, sp, #0
1000ab06:	60f8      	str	r0, [r7, #12]
1000ab08:	60b9      	str	r1, [r7, #8]
1000ab0a:	607a      	str	r2, [r7, #4]
1000ab0c:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {
1000ab0e:	f107 0310 	add.w	r3, r7, #16
1000ab12:	2220      	movs	r2, #32
1000ab14:	2100      	movs	r1, #0
1000ab16:	4618      	mov	r0, r3
1000ab18:	f004 fd71 	bl	1000f5fe <memset>
		NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
	};

	io->virt = virt;
1000ab1c:	68fb      	ldr	r3, [r7, #12]
1000ab1e:	68ba      	ldr	r2, [r7, #8]
1000ab20:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
1000ab22:	68fb      	ldr	r3, [r7, #12]
1000ab24:	687a      	ldr	r2, [r7, #4]
1000ab26:	605a      	str	r2, [r3, #4]
	io->size = size;
1000ab28:	68fb      	ldr	r3, [r7, #12]
1000ab2a:	683a      	ldr	r2, [r7, #0]
1000ab2c:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
1000ab2e:	68fb      	ldr	r3, [r7, #12]
1000ab30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
1000ab32:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
1000ab34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000ab36:	2b1f      	cmp	r3, #31
1000ab38:	d904      	bls.n	1000ab44 <metal_io_init+0x44>
		/* avoid overflow */
		io->page_mask = -1UL;
1000ab3a:	68fb      	ldr	r3, [r7, #12]
1000ab3c:	f04f 32ff 	mov.w	r2, #4294967295
1000ab40:	611a      	str	r2, [r3, #16]
1000ab42:	e006      	b.n	1000ab52 <metal_io_init+0x52>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
1000ab44:	2201      	movs	r2, #1
1000ab46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000ab48:	fa02 f303 	lsl.w	r3, r2, r3
1000ab4c:	1e5a      	subs	r2, r3, #1
1000ab4e:	68fb      	ldr	r3, [r7, #12]
1000ab50:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
1000ab52:	68fb      	ldr	r3, [r7, #12]
1000ab54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
1000ab56:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
1000ab58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
1000ab5a:	2b00      	cmp	r3, #0
1000ab5c:	d00b      	beq.n	1000ab76 <metal_io_init+0x76>
1000ab5e:	68fb      	ldr	r3, [r7, #12]
1000ab60:	6cba      	ldr	r2, [r7, #72]	; 0x48
1000ab62:	f103 0418 	add.w	r4, r3, #24
1000ab66:	4615      	mov	r5, r2
1000ab68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1000ab6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1000ab6c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1000ab70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1000ab74:	e00a      	b.n	1000ab8c <metal_io_init+0x8c>
1000ab76:	68fb      	ldr	r3, [r7, #12]
1000ab78:	f103 0418 	add.w	r4, r3, #24
1000ab7c:	f107 0510 	add.w	r5, r7, #16
1000ab80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1000ab82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1000ab84:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1000ab88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
1000ab8c:	68f8      	ldr	r0, [r7, #12]
1000ab8e:	f7ff ff1b 	bl	1000a9c8 <metal_sys_io_mem_map>
}
1000ab92:	bf00      	nop
1000ab94:	3730      	adds	r7, #48	; 0x30
1000ab96:	46bd      	mov	sp, r7
1000ab98:	bdb0      	pop	{r4, r5, r7, pc}

1000ab9a <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
1000ab9a:	b590      	push	{r4, r7, lr}
1000ab9c:	b08b      	sub	sp, #44	; 0x2c
1000ab9e:	af02      	add	r7, sp, #8
1000aba0:	60f8      	str	r0, [r7, #12]
1000aba2:	60b9      	str	r1, [r7, #8]
1000aba4:	607a      	str	r2, [r7, #4]
1000aba6:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
1000aba8:	68b9      	ldr	r1, [r7, #8]
1000abaa:	68f8      	ldr	r0, [r7, #12]
1000abac:	f7ff ff8c 	bl	1000aac8 <metal_io_virt>
1000abb0:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
1000abb2:	687b      	ldr	r3, [r7, #4]
1000abb4:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
1000abb6:	69fb      	ldr	r3, [r7, #28]
1000abb8:	2b00      	cmp	r3, #0
1000abba:	d102      	bne.n	1000abc2 <metal_io_block_read+0x28>
		return -ERANGE;
1000abbc:	f06f 0321 	mvn.w	r3, #33	; 0x21
1000abc0:	e05c      	b.n	1000ac7c <metal_io_block_read+0xe2>
	if ((offset + len) > io->size)
1000abc2:	683a      	ldr	r2, [r7, #0]
1000abc4:	68bb      	ldr	r3, [r7, #8]
1000abc6:	441a      	add	r2, r3
1000abc8:	68fb      	ldr	r3, [r7, #12]
1000abca:	689b      	ldr	r3, [r3, #8]
1000abcc:	429a      	cmp	r2, r3
1000abce:	d904      	bls.n	1000abda <metal_io_block_read+0x40>
		len = io->size - offset;
1000abd0:	68fb      	ldr	r3, [r7, #12]
1000abd2:	689a      	ldr	r2, [r3, #8]
1000abd4:	68bb      	ldr	r3, [r7, #8]
1000abd6:	1ad3      	subs	r3, r2, r3
1000abd8:	603b      	str	r3, [r7, #0]
	retlen = len;
1000abda:	683b      	ldr	r3, [r7, #0]
1000abdc:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
1000abde:	68fb      	ldr	r3, [r7, #12]
1000abe0:	6a1b      	ldr	r3, [r3, #32]
1000abe2:	2b00      	cmp	r3, #0
1000abe4:	d00a      	beq.n	1000abfc <metal_io_block_read+0x62>
		retlen = (*io->ops.block_read)(
1000abe6:	68fb      	ldr	r3, [r7, #12]
1000abe8:	6a1c      	ldr	r4, [r3, #32]
1000abea:	683b      	ldr	r3, [r7, #0]
1000abec:	9300      	str	r3, [sp, #0]
1000abee:	2305      	movs	r3, #5
1000abf0:	687a      	ldr	r2, [r7, #4]
1000abf2:	68b9      	ldr	r1, [r7, #8]
1000abf4:	68f8      	ldr	r0, [r7, #12]
1000abf6:	47a0      	blx	r4
1000abf8:	6178      	str	r0, [r7, #20]
1000abfa:	e03e      	b.n	1000ac7a <metal_io_block_read+0xe0>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
1000abfc:	f3bf 8f5b 	dmb	ish
		while ( len && (
1000ac00:	e00c      	b.n	1000ac1c <metal_io_block_read+0x82>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
1000ac02:	69fb      	ldr	r3, [r7, #28]
1000ac04:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
1000ac06:	69bb      	ldr	r3, [r7, #24]
1000ac08:	701a      	strb	r2, [r3, #0]
			dest++;
1000ac0a:	69bb      	ldr	r3, [r7, #24]
1000ac0c:	3301      	adds	r3, #1
1000ac0e:	61bb      	str	r3, [r7, #24]
			ptr++;
1000ac10:	69fb      	ldr	r3, [r7, #28]
1000ac12:	3301      	adds	r3, #1
1000ac14:	61fb      	str	r3, [r7, #28]
			len--;
1000ac16:	683b      	ldr	r3, [r7, #0]
1000ac18:	3b01      	subs	r3, #1
1000ac1a:	603b      	str	r3, [r7, #0]
		while ( len && (
1000ac1c:	683b      	ldr	r3, [r7, #0]
1000ac1e:	2b00      	cmp	r3, #0
1000ac20:	d017      	beq.n	1000ac52 <metal_io_block_read+0xb8>
			((uintptr_t)dest % sizeof(int)) ||
1000ac22:	69bb      	ldr	r3, [r7, #24]
1000ac24:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
1000ac28:	2b00      	cmp	r3, #0
1000ac2a:	d1ea      	bne.n	1000ac02 <metal_io_block_read+0x68>
			((uintptr_t)ptr % sizeof(int)))) {
1000ac2c:	69fb      	ldr	r3, [r7, #28]
1000ac2e:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
1000ac32:	2b00      	cmp	r3, #0
1000ac34:	d1e5      	bne.n	1000ac02 <metal_io_block_read+0x68>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000ac36:	e00c      	b.n	1000ac52 <metal_io_block_read+0xb8>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
1000ac38:	69fb      	ldr	r3, [r7, #28]
1000ac3a:	681a      	ldr	r2, [r3, #0]
1000ac3c:	69bb      	ldr	r3, [r7, #24]
1000ac3e:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000ac40:	69bb      	ldr	r3, [r7, #24]
1000ac42:	3304      	adds	r3, #4
1000ac44:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
1000ac46:	69fb      	ldr	r3, [r7, #28]
1000ac48:	3304      	adds	r3, #4
1000ac4a:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
1000ac4c:	683b      	ldr	r3, [r7, #0]
1000ac4e:	3b04      	subs	r3, #4
1000ac50:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000ac52:	683b      	ldr	r3, [r7, #0]
1000ac54:	2b03      	cmp	r3, #3
1000ac56:	dcef      	bgt.n	1000ac38 <metal_io_block_read+0x9e>
		for (; len != 0; dest++, ptr++, len--)
1000ac58:	e00c      	b.n	1000ac74 <metal_io_block_read+0xda>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
1000ac5a:	69fb      	ldr	r3, [r7, #28]
1000ac5c:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
1000ac5e:	69bb      	ldr	r3, [r7, #24]
1000ac60:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
1000ac62:	69bb      	ldr	r3, [r7, #24]
1000ac64:	3301      	adds	r3, #1
1000ac66:	61bb      	str	r3, [r7, #24]
1000ac68:	69fb      	ldr	r3, [r7, #28]
1000ac6a:	3301      	adds	r3, #1
1000ac6c:	61fb      	str	r3, [r7, #28]
1000ac6e:	683b      	ldr	r3, [r7, #0]
1000ac70:	3b01      	subs	r3, #1
1000ac72:	603b      	str	r3, [r7, #0]
1000ac74:	683b      	ldr	r3, [r7, #0]
1000ac76:	2b00      	cmp	r3, #0
1000ac78:	d1ef      	bne.n	1000ac5a <metal_io_block_read+0xc0>
	}
	return retlen;
1000ac7a:	697b      	ldr	r3, [r7, #20]
}
1000ac7c:	4618      	mov	r0, r3
1000ac7e:	3724      	adds	r7, #36	; 0x24
1000ac80:	46bd      	mov	sp, r7
1000ac82:	bd90      	pop	{r4, r7, pc}

1000ac84 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
1000ac84:	b590      	push	{r4, r7, lr}
1000ac86:	b08b      	sub	sp, #44	; 0x2c
1000ac88:	af02      	add	r7, sp, #8
1000ac8a:	60f8      	str	r0, [r7, #12]
1000ac8c:	60b9      	str	r1, [r7, #8]
1000ac8e:	607a      	str	r2, [r7, #4]
1000ac90:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
1000ac92:	68b9      	ldr	r1, [r7, #8]
1000ac94:	68f8      	ldr	r0, [r7, #12]
1000ac96:	f7ff ff17 	bl	1000aac8 <metal_io_virt>
1000ac9a:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
1000ac9c:	687b      	ldr	r3, [r7, #4]
1000ac9e:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
1000aca0:	69fb      	ldr	r3, [r7, #28]
1000aca2:	2b00      	cmp	r3, #0
1000aca4:	d102      	bne.n	1000acac <metal_io_block_write+0x28>
		return -ERANGE;
1000aca6:	f06f 0321 	mvn.w	r3, #33	; 0x21
1000acaa:	e05b      	b.n	1000ad64 <metal_io_block_write+0xe0>
	if ((offset + len) > io->size)
1000acac:	683a      	ldr	r2, [r7, #0]
1000acae:	68bb      	ldr	r3, [r7, #8]
1000acb0:	441a      	add	r2, r3
1000acb2:	68fb      	ldr	r3, [r7, #12]
1000acb4:	689b      	ldr	r3, [r3, #8]
1000acb6:	429a      	cmp	r2, r3
1000acb8:	d904      	bls.n	1000acc4 <metal_io_block_write+0x40>
		len = io->size - offset;
1000acba:	68fb      	ldr	r3, [r7, #12]
1000acbc:	689a      	ldr	r2, [r3, #8]
1000acbe:	68bb      	ldr	r3, [r7, #8]
1000acc0:	1ad3      	subs	r3, r2, r3
1000acc2:	603b      	str	r3, [r7, #0]
	retlen = len;
1000acc4:	683b      	ldr	r3, [r7, #0]
1000acc6:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
1000acc8:	68fb      	ldr	r3, [r7, #12]
1000acca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000accc:	2b00      	cmp	r3, #0
1000acce:	d017      	beq.n	1000ad00 <metal_io_block_write+0x7c>
		retlen = (*io->ops.block_write)(
1000acd0:	68fb      	ldr	r3, [r7, #12]
1000acd2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
1000acd4:	683b      	ldr	r3, [r7, #0]
1000acd6:	9300      	str	r3, [sp, #0]
1000acd8:	2305      	movs	r3, #5
1000acda:	687a      	ldr	r2, [r7, #4]
1000acdc:	68b9      	ldr	r1, [r7, #8]
1000acde:	68f8      	ldr	r0, [r7, #12]
1000ace0:	47a0      	blx	r4
1000ace2:	6178      	str	r0, [r7, #20]
1000ace4:	e03d      	b.n	1000ad62 <metal_io_block_write+0xde>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
1000ace6:	69bb      	ldr	r3, [r7, #24]
1000ace8:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
1000acea:	69fb      	ldr	r3, [r7, #28]
1000acec:	701a      	strb	r2, [r3, #0]
			ptr++;
1000acee:	69fb      	ldr	r3, [r7, #28]
1000acf0:	3301      	adds	r3, #1
1000acf2:	61fb      	str	r3, [r7, #28]
			source++;
1000acf4:	69bb      	ldr	r3, [r7, #24]
1000acf6:	3301      	adds	r3, #1
1000acf8:	61bb      	str	r3, [r7, #24]
			len--;
1000acfa:	683b      	ldr	r3, [r7, #0]
1000acfc:	3b01      	subs	r3, #1
1000acfe:	603b      	str	r3, [r7, #0]
		while ( len && (
1000ad00:	683b      	ldr	r3, [r7, #0]
1000ad02:	2b00      	cmp	r3, #0
1000ad04:	d017      	beq.n	1000ad36 <metal_io_block_write+0xb2>
			((uintptr_t)ptr % sizeof(int)) ||
1000ad06:	69fb      	ldr	r3, [r7, #28]
1000ad08:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
1000ad0c:	2b00      	cmp	r3, #0
1000ad0e:	d1ea      	bne.n	1000ace6 <metal_io_block_write+0x62>
			((uintptr_t)source % sizeof(int)))) {
1000ad10:	69bb      	ldr	r3, [r7, #24]
1000ad12:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
1000ad16:	2b00      	cmp	r3, #0
1000ad18:	d1e5      	bne.n	1000ace6 <metal_io_block_write+0x62>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
1000ad1a:	e00c      	b.n	1000ad36 <metal_io_block_write+0xb2>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
1000ad1c:	69bb      	ldr	r3, [r7, #24]
1000ad1e:	681a      	ldr	r2, [r3, #0]
1000ad20:	69fb      	ldr	r3, [r7, #28]
1000ad22:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
1000ad24:	69fb      	ldr	r3, [r7, #28]
1000ad26:	3304      	adds	r3, #4
1000ad28:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
1000ad2a:	69bb      	ldr	r3, [r7, #24]
1000ad2c:	3304      	adds	r3, #4
1000ad2e:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
1000ad30:	683b      	ldr	r3, [r7, #0]
1000ad32:	3b04      	subs	r3, #4
1000ad34:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
1000ad36:	683b      	ldr	r3, [r7, #0]
1000ad38:	2b03      	cmp	r3, #3
1000ad3a:	dcef      	bgt.n	1000ad1c <metal_io_block_write+0x98>
		for (; len != 0; ptr++, source++, len--)
1000ad3c:	e00c      	b.n	1000ad58 <metal_io_block_write+0xd4>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
1000ad3e:	69bb      	ldr	r3, [r7, #24]
1000ad40:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
1000ad42:	69fb      	ldr	r3, [r7, #28]
1000ad44:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
1000ad46:	69fb      	ldr	r3, [r7, #28]
1000ad48:	3301      	adds	r3, #1
1000ad4a:	61fb      	str	r3, [r7, #28]
1000ad4c:	69bb      	ldr	r3, [r7, #24]
1000ad4e:	3301      	adds	r3, #1
1000ad50:	61bb      	str	r3, [r7, #24]
1000ad52:	683b      	ldr	r3, [r7, #0]
1000ad54:	3b01      	subs	r3, #1
1000ad56:	603b      	str	r3, [r7, #0]
1000ad58:	683b      	ldr	r3, [r7, #0]
1000ad5a:	2b00      	cmp	r3, #0
1000ad5c:	d1ef      	bne.n	1000ad3e <metal_io_block_write+0xba>
		atomic_thread_fence(memory_order_seq_cst);
1000ad5e:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
1000ad62:	697b      	ldr	r3, [r7, #20]
}
1000ad64:	4618      	mov	r0, r3
1000ad66:	3724      	adds	r7, #36	; 0x24
1000ad68:	46bd      	mov	sp, r7
1000ad6a:	bd90      	pop	{r4, r7, pc}

1000ad6c <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
1000ad6c:	b40e      	push	{r1, r2, r3}
1000ad6e:	b480      	push	{r7}
1000ad70:	b082      	sub	sp, #8
1000ad72:	af00      	add	r7, sp, #0
1000ad74:	4603      	mov	r3, r0
1000ad76:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
1000ad78:	bf00      	nop
1000ad7a:	3708      	adds	r7, #8
1000ad7c:	46bd      	mov	sp, r7
1000ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
1000ad82:	b003      	add	sp, #12
1000ad84:	4770      	bx	lr

1000ad86 <metal_io_virt>:
{
1000ad86:	b480      	push	{r7}
1000ad88:	b083      	sub	sp, #12
1000ad8a:	af00      	add	r7, sp, #0
1000ad8c:	6078      	str	r0, [r7, #4]
1000ad8e:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
1000ad90:	687b      	ldr	r3, [r7, #4]
1000ad92:	681b      	ldr	r3, [r3, #0]
		: NULL);
1000ad94:	f1b3 3fff 	cmp.w	r3, #4294967295
1000ad98:	d00a      	beq.n	1000adb0 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
1000ad9a:	687b      	ldr	r3, [r7, #4]
1000ad9c:	689b      	ldr	r3, [r3, #8]
1000ad9e:	683a      	ldr	r2, [r7, #0]
1000ada0:	429a      	cmp	r2, r3
1000ada2:	d205      	bcs.n	1000adb0 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
1000ada4:	687b      	ldr	r3, [r7, #4]
1000ada6:	681b      	ldr	r3, [r3, #0]
1000ada8:	461a      	mov	r2, r3
1000adaa:	683b      	ldr	r3, [r7, #0]
1000adac:	4413      	add	r3, r2
		: NULL);
1000adae:	e000      	b.n	1000adb2 <metal_io_virt+0x2c>
1000adb0:	2300      	movs	r3, #0
}
1000adb2:	4618      	mov	r0, r3
1000adb4:	370c      	adds	r7, #12
1000adb6:	46bd      	mov	sp, r7
1000adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
1000adbc:	4770      	bx	lr

1000adbe <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
1000adbe:	b480      	push	{r7}
1000adc0:	b085      	sub	sp, #20
1000adc2:	af00      	add	r7, sp, #0
1000adc4:	6078      	str	r0, [r7, #4]
1000adc6:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
1000adc8:	683b      	ldr	r3, [r7, #0]
1000adca:	687a      	ldr	r2, [r7, #4]
1000adcc:	6812      	ldr	r2, [r2, #0]
1000adce:	1a9b      	subs	r3, r3, r2
1000add0:	60fb      	str	r3, [r7, #12]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
1000add2:	687b      	ldr	r3, [r7, #4]
1000add4:	689b      	ldr	r3, [r3, #8]
1000add6:	68fa      	ldr	r2, [r7, #12]
1000add8:	429a      	cmp	r2, r3
1000adda:	d201      	bcs.n	1000ade0 <metal_io_virt_to_offset+0x22>
1000addc:	68fb      	ldr	r3, [r7, #12]
1000adde:	e001      	b.n	1000ade4 <metal_io_virt_to_offset+0x26>
1000ade0:	f04f 33ff 	mov.w	r3, #4294967295
}
1000ade4:	4618      	mov	r0, r3
1000ade6:	3714      	adds	r7, #20
1000ade8:	46bd      	mov	sp, r7
1000adea:	f85d 7b04 	ldr.w	r7, [sp], #4
1000adee:	4770      	bx	lr

1000adf0 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
1000adf0:	b5b0      	push	{r4, r5, r7, lr}
1000adf2:	b08c      	sub	sp, #48	; 0x30
1000adf4:	af00      	add	r7, sp, #0
1000adf6:	60f8      	str	r0, [r7, #12]
1000adf8:	60b9      	str	r1, [r7, #8]
1000adfa:	603b      	str	r3, [r7, #0]
1000adfc:	4613      	mov	r3, r2
1000adfe:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
1000ae00:	68b9      	ldr	r1, [r7, #8]
1000ae02:	68f8      	ldr	r0, [r7, #12]
1000ae04:	f7ff ffbf 	bl	1000ad86 <metal_io_virt>
1000ae08:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
1000ae0a:	68fb      	ldr	r3, [r7, #12]
1000ae0c:	699b      	ldr	r3, [r3, #24]
1000ae0e:	2b00      	cmp	r3, #0
1000ae10:	d009      	beq.n	1000ae26 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
1000ae12:	68fb      	ldr	r3, [r7, #12]
1000ae14:	699c      	ldr	r4, [r3, #24]
1000ae16:	79fa      	ldrb	r2, [r7, #7]
1000ae18:	683b      	ldr	r3, [r7, #0]
1000ae1a:	68b9      	ldr	r1, [r7, #8]
1000ae1c:	68f8      	ldr	r0, [r7, #12]
1000ae1e:	47a0      	blx	r4
1000ae20:	4604      	mov	r4, r0
1000ae22:	460d      	mov	r5, r1
1000ae24:	e059      	b.n	1000aeda <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
1000ae26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000ae28:	2b00      	cmp	r3, #0
1000ae2a:	d012      	beq.n	1000ae52 <metal_io_read+0x62>
1000ae2c:	683b      	ldr	r3, [r7, #0]
1000ae2e:	2b01      	cmp	r3, #1
1000ae30:	d10f      	bne.n	1000ae52 <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
1000ae32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000ae34:	62bb      	str	r3, [r7, #40]	; 0x28
1000ae36:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000ae38:	f3bf 8f5b 	dmb	ish
1000ae3c:	781b      	ldrb	r3, [r3, #0]
1000ae3e:	f3bf 8f5b 	dmb	ish
1000ae42:	b2db      	uxtb	r3, r3
1000ae44:	76fb      	strb	r3, [r7, #27]
1000ae46:	7efb      	ldrb	r3, [r7, #27]
1000ae48:	b2db      	uxtb	r3, r3
1000ae4a:	2200      	movs	r2, #0
1000ae4c:	461c      	mov	r4, r3
1000ae4e:	4615      	mov	r5, r2
1000ae50:	e043      	b.n	1000aeda <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
1000ae52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000ae54:	2b00      	cmp	r3, #0
1000ae56:	d012      	beq.n	1000ae7e <metal_io_read+0x8e>
1000ae58:	683b      	ldr	r3, [r7, #0]
1000ae5a:	2b02      	cmp	r3, #2
1000ae5c:	d10f      	bne.n	1000ae7e <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
1000ae5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000ae60:	627b      	str	r3, [r7, #36]	; 0x24
1000ae62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000ae64:	f3bf 8f5b 	dmb	ish
1000ae68:	881b      	ldrh	r3, [r3, #0]
1000ae6a:	f3bf 8f5b 	dmb	ish
1000ae6e:	b29b      	uxth	r3, r3
1000ae70:	833b      	strh	r3, [r7, #24]
1000ae72:	8b3b      	ldrh	r3, [r7, #24]
1000ae74:	b29b      	uxth	r3, r3
1000ae76:	2200      	movs	r2, #0
1000ae78:	461c      	mov	r4, r3
1000ae7a:	4615      	mov	r5, r2
1000ae7c:	e02d      	b.n	1000aeda <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
1000ae7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000ae80:	2b00      	cmp	r3, #0
1000ae82:	d010      	beq.n	1000aea6 <metal_io_read+0xb6>
1000ae84:	683b      	ldr	r3, [r7, #0]
1000ae86:	2b04      	cmp	r3, #4
1000ae88:	d10d      	bne.n	1000aea6 <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
1000ae8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000ae8c:	623b      	str	r3, [r7, #32]
1000ae8e:	6a3b      	ldr	r3, [r7, #32]
1000ae90:	f3bf 8f5b 	dmb	ish
1000ae94:	681b      	ldr	r3, [r3, #0]
1000ae96:	f3bf 8f5b 	dmb	ish
1000ae9a:	617b      	str	r3, [r7, #20]
1000ae9c:	697b      	ldr	r3, [r7, #20]
1000ae9e:	2200      	movs	r2, #0
1000aea0:	461c      	mov	r4, r3
1000aea2:	4615      	mov	r5, r2
1000aea4:	e019      	b.n	1000aeda <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
1000aea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000aea8:	2b00      	cmp	r3, #0
1000aeaa:	d010      	beq.n	1000aece <metal_io_read+0xde>
1000aeac:	683b      	ldr	r3, [r7, #0]
1000aeae:	2b04      	cmp	r3, #4
1000aeb0:	d10d      	bne.n	1000aece <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
1000aeb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000aeb4:	61fb      	str	r3, [r7, #28]
1000aeb6:	69fb      	ldr	r3, [r7, #28]
1000aeb8:	f3bf 8f5b 	dmb	ish
1000aebc:	681b      	ldr	r3, [r3, #0]
1000aebe:	f3bf 8f5b 	dmb	ish
1000aec2:	613b      	str	r3, [r7, #16]
1000aec4:	693b      	ldr	r3, [r7, #16]
1000aec6:	2200      	movs	r2, #0
1000aec8:	461c      	mov	r4, r3
1000aeca:	4615      	mov	r5, r2
1000aecc:	e005      	b.n	1000aeda <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
1000aece:	4b06      	ldr	r3, [pc, #24]	; (1000aee8 <metal_io_read+0xf8>)
1000aed0:	4a06      	ldr	r2, [pc, #24]	; (1000aeec <metal_io_read+0xfc>)
1000aed2:	21fe      	movs	r1, #254	; 0xfe
1000aed4:	4806      	ldr	r0, [pc, #24]	; (1000aef0 <metal_io_read+0x100>)
1000aed6:	f003 fceb 	bl	1000e8b0 <__assert_func>
	return 0; /* quiet compiler */
}
1000aeda:	4622      	mov	r2, r4
1000aedc:	462b      	mov	r3, r5
1000aede:	4610      	mov	r0, r2
1000aee0:	4619      	mov	r1, r3
1000aee2:	3730      	adds	r7, #48	; 0x30
1000aee4:	46bd      	mov	sp, r7
1000aee6:	bdb0      	pop	{r4, r5, r7, pc}
1000aee8:	10011b08 	.word	0x10011b08
1000aeec:	10011d6c 	.word	0x10011d6c
1000aef0:	10011b0c 	.word	0x10011b0c

1000aef4 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
1000aef4:	b580      	push	{r7, lr}
1000aef6:	b082      	sub	sp, #8
1000aef8:	af00      	add	r7, sp, #0
1000aefa:	6078      	str	r0, [r7, #4]
	return malloc(size);
1000aefc:	6878      	ldr	r0, [r7, #4]
1000aefe:	f003 fcf5 	bl	1000e8ec <malloc>
1000af02:	4603      	mov	r3, r0
}
1000af04:	4618      	mov	r0, r3
1000af06:	3708      	adds	r7, #8
1000af08:	46bd      	mov	sp, r7
1000af0a:	bd80      	pop	{r7, pc}

1000af0c <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
1000af0c:	b580      	push	{r7, lr}
1000af0e:	b082      	sub	sp, #8
1000af10:	af00      	add	r7, sp, #0
1000af12:	6078      	str	r0, [r7, #4]
	free(ptr);
1000af14:	6878      	ldr	r0, [r7, #4]
1000af16:	f003 fcf1 	bl	1000e8fc <free>
}
1000af1a:	bf00      	nop
1000af1c:	3708      	adds	r7, #8
1000af1e:	46bd      	mov	sp, r7
1000af20:	bd80      	pop	{r7, pc}

1000af22 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
1000af22:	b580      	push	{r7, lr}
1000af24:	b084      	sub	sp, #16
1000af26:	af00      	add	r7, sp, #0
1000af28:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
1000af2a:	687b      	ldr	r3, [r7, #4]
1000af2c:	00db      	lsls	r3, r3, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
1000af2e:	3334      	adds	r3, #52	; 0x34
1000af30:	60fb      	str	r3, [r7, #12]

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
1000af32:	68f8      	ldr	r0, [r7, #12]
1000af34:	f7ff ffde 	bl	1000aef4 <metal_allocate_memory>
1000af38:	60b8      	str	r0, [r7, #8]
	if (vqs) {
1000af3a:	68bb      	ldr	r3, [r7, #8]
1000af3c:	2b00      	cmp	r3, #0
1000af3e:	d004      	beq.n	1000af4a <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
1000af40:	68fa      	ldr	r2, [r7, #12]
1000af42:	2100      	movs	r1, #0
1000af44:	68b8      	ldr	r0, [r7, #8]
1000af46:	f004 fb5a 	bl	1000f5fe <memset>
	}

	return vqs;
1000af4a:	68bb      	ldr	r3, [r7, #8]
}
1000af4c:	4618      	mov	r0, r3
1000af4e:	3710      	adds	r7, #16
1000af50:	46bd      	mov	sp, r7
1000af52:	bd80      	pop	{r7, pc}

1000af54 <rproc_virtio_virtqueue_notify>:
#include <metal/cpu.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
1000af54:	b580      	push	{r7, lr}
1000af56:	b086      	sub	sp, #24
1000af58:	af00      	add	r7, sp, #0
1000af5a:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
1000af5c:	687b      	ldr	r3, [r7, #4]
1000af5e:	891b      	ldrh	r3, [r3, #8]
1000af60:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
1000af62:	687b      	ldr	r3, [r7, #4]
1000af64:	681b      	ldr	r3, [r3, #0]
1000af66:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000af68:	693b      	ldr	r3, [r7, #16]
1000af6a:	3b10      	subs	r3, #16
1000af6c:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id < vdev->vrings_num);
1000af6e:	693b      	ldr	r3, [r7, #16]
1000af70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000af72:	697a      	ldr	r2, [r7, #20]
1000af74:	429a      	cmp	r2, r3
1000af76:	d305      	bcc.n	1000af84 <rproc_virtio_virtqueue_notify+0x30>
1000af78:	4b0d      	ldr	r3, [pc, #52]	; (1000afb0 <rproc_virtio_virtqueue_notify+0x5c>)
1000af7a:	4a0e      	ldr	r2, [pc, #56]	; (1000afb4 <rproc_virtio_virtqueue_notify+0x60>)
1000af7c:	211c      	movs	r1, #28
1000af7e:	480e      	ldr	r0, [pc, #56]	; (1000afb8 <rproc_virtio_virtqueue_notify+0x64>)
1000af80:	f003 fc96 	bl	1000e8b0 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
1000af84:	693b      	ldr	r3, [r7, #16]
1000af86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1000af88:	697a      	ldr	r2, [r7, #20]
1000af8a:	4613      	mov	r3, r2
1000af8c:	005b      	lsls	r3, r3, #1
1000af8e:	4413      	add	r3, r2
1000af90:	00db      	lsls	r3, r3, #3
1000af92:	440b      	add	r3, r1
1000af94:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
1000af96:	68fb      	ldr	r3, [r7, #12]
1000af98:	68db      	ldr	r3, [r3, #12]
1000af9a:	68fa      	ldr	r2, [r7, #12]
1000af9c:	6810      	ldr	r0, [r2, #0]
1000af9e:	68ba      	ldr	r2, [r7, #8]
1000afa0:	6912      	ldr	r2, [r2, #16]
1000afa2:	4611      	mov	r1, r2
1000afa4:	4798      	blx	r3
}
1000afa6:	bf00      	nop
1000afa8:	3718      	adds	r7, #24
1000afaa:	46bd      	mov	sp, r7
1000afac:	bd80      	pop	{r7, pc}
1000afae:	bf00      	nop
1000afb0:	10011b54 	.word	0x10011b54
1000afb4:	10011d4c 	.word	0x10011d4c
1000afb8:	10011b70 	.word	0x10011b70

1000afbc <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
1000afbc:	b580      	push	{r7, lr}
1000afbe:	b086      	sub	sp, #24
1000afc0:	af00      	add	r7, sp, #0
1000afc2:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000afc4:	687b      	ldr	r3, [r7, #4]
1000afc6:	3b10      	subs	r3, #16
1000afc8:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
1000afca:	697b      	ldr	r3, [r7, #20]
1000afcc:	685b      	ldr	r3, [r3, #4]
1000afce:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
1000afd0:	697b      	ldr	r3, [r7, #20]
1000afd2:	689b      	ldr	r3, [r3, #8]
1000afd4:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
1000afd6:	693b      	ldr	r3, [r7, #16]
1000afd8:	3318      	adds	r3, #24
1000afda:	4619      	mov	r1, r3
1000afdc:	68f8      	ldr	r0, [r7, #12]
1000afde:	f7ff feee 	bl	1000adbe <metal_io_virt_to_offset>
1000afe2:	4601      	mov	r1, r0
1000afe4:	2301      	movs	r3, #1
1000afe6:	2205      	movs	r2, #5
1000afe8:	68f8      	ldr	r0, [r7, #12]
1000afea:	f7ff ff01 	bl	1000adf0 <metal_io_read>
1000afee:	4602      	mov	r2, r0
1000aff0:	460b      	mov	r3, r1
1000aff2:	4613      	mov	r3, r2
1000aff4:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
1000aff6:	7afb      	ldrb	r3, [r7, #11]
}
1000aff8:	4618      	mov	r0, r3
1000affa:	3718      	adds	r7, #24
1000affc:	46bd      	mov	sp, r7
1000affe:	bd80      	pop	{r7, pc}

1000b000 <rproc_virtio_get_dfeatures>:
	rpvdev->notify(rpvdev->priv, vdev->notifyid);
}
#endif

static uint32_t rproc_virtio_get_dfeatures(struct virtio_device *vdev)
{
1000b000:	b580      	push	{r7, lr}
1000b002:	b086      	sub	sp, #24
1000b004:	af00      	add	r7, sp, #0
1000b006:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000b008:	687b      	ldr	r3, [r7, #4]
1000b00a:	3b10      	subs	r3, #16
1000b00c:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
1000b00e:	697b      	ldr	r3, [r7, #20]
1000b010:	685b      	ldr	r3, [r3, #4]
1000b012:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
1000b014:	697b      	ldr	r3, [r7, #20]
1000b016:	689b      	ldr	r3, [r3, #8]
1000b018:	60fb      	str	r3, [r7, #12]
	features = metal_io_read32(io,
1000b01a:	693b      	ldr	r3, [r7, #16]
1000b01c:	330c      	adds	r3, #12
1000b01e:	4619      	mov	r1, r3
1000b020:	68f8      	ldr	r0, [r7, #12]
1000b022:	f7ff fecc 	bl	1000adbe <metal_io_virt_to_offset>
1000b026:	4601      	mov	r1, r0
1000b028:	2304      	movs	r3, #4
1000b02a:	2205      	movs	r2, #5
1000b02c:	68f8      	ldr	r0, [r7, #12]
1000b02e:	f7ff fedf 	bl	1000adf0 <metal_io_read>
1000b032:	4602      	mov	r2, r0
1000b034:	460b      	mov	r3, r1
1000b036:	4613      	mov	r3, r2
1000b038:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
1000b03a:	68bb      	ldr	r3, [r7, #8]
}
1000b03c:	4618      	mov	r0, r3
1000b03e:	3718      	adds	r7, #24
1000b040:	46bd      	mov	sp, r7
1000b042:	bd80      	pop	{r7, pc}

1000b044 <rproc_virtio_get_features>:

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
1000b044:	b580      	push	{r7, lr}
1000b046:	b088      	sub	sp, #32
1000b048:	af00      	add	r7, sp, #0
1000b04a:	6078      	str	r0, [r7, #4]
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t gfeatures;
	uint32_t dfeatures;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000b04c:	687b      	ldr	r3, [r7, #4]
1000b04e:	3b10      	subs	r3, #16
1000b050:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
1000b052:	69fb      	ldr	r3, [r7, #28]
1000b054:	685b      	ldr	r3, [r3, #4]
1000b056:	61bb      	str	r3, [r7, #24]
	io = rpvdev->vdev_rsc_io;
1000b058:	69fb      	ldr	r3, [r7, #28]
1000b05a:	689b      	ldr	r3, [r3, #8]
1000b05c:	617b      	str	r3, [r7, #20]
	gfeatures = metal_io_read32(io,
1000b05e:	69bb      	ldr	r3, [r7, #24]
1000b060:	3310      	adds	r3, #16
1000b062:	4619      	mov	r1, r3
1000b064:	6978      	ldr	r0, [r7, #20]
1000b066:	f7ff feaa 	bl	1000adbe <metal_io_virt_to_offset>
1000b06a:	4601      	mov	r1, r0
1000b06c:	2304      	movs	r3, #4
1000b06e:	2205      	movs	r2, #5
1000b070:	6978      	ldr	r0, [r7, #20]
1000b072:	f7ff febd 	bl	1000adf0 <metal_io_read>
1000b076:	4602      	mov	r2, r0
1000b078:	460b      	mov	r3, r1
1000b07a:	4613      	mov	r3, r2
1000b07c:	613b      	str	r3, [r7, #16]
			metal_io_virt_to_offset(io, &vdev_rsc->gfeatures));
	dfeatures = rproc_virtio_get_dfeatures(vdev);
1000b07e:	6878      	ldr	r0, [r7, #4]
1000b080:	f7ff ffbe 	bl	1000b000 <rproc_virtio_get_dfeatures>
1000b084:	60f8      	str	r0, [r7, #12]

	return dfeatures & gfeatures;
1000b086:	68fa      	ldr	r2, [r7, #12]
1000b088:	693b      	ldr	r3, [r7, #16]
1000b08a:	4013      	ands	r3, r2
}
1000b08c:	4618      	mov	r0, r3
1000b08e:	3720      	adds	r7, #32
1000b090:	46bd      	mov	sp, r7
1000b092:	bd80      	pop	{r7, pc}

1000b094 <rproc_virtio_read_config>:
}
#endif

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
1000b094:	b580      	push	{r7, lr}
1000b096:	b088      	sub	sp, #32
1000b098:	af00      	add	r7, sp, #0
1000b09a:	60f8      	str	r0, [r7, #12]
1000b09c:	60b9      	str	r1, [r7, #8]
1000b09e:	607a      	str	r2, [r7, #4]
1000b0a0:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char *config;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000b0a2:	68fb      	ldr	r3, [r7, #12]
1000b0a4:	3b10      	subs	r3, #16
1000b0a6:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
1000b0a8:	69fb      	ldr	r3, [r7, #28]
1000b0aa:	685b      	ldr	r3, [r3, #4]
1000b0ac:	61bb      	str	r3, [r7, #24]
	config = (char *)(&vdev_rsc->vring[vdev->vrings_num]);
1000b0ae:	68fb      	ldr	r3, [r7, #12]
1000b0b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
1000b0b2:	4613      	mov	r3, r2
1000b0b4:	009b      	lsls	r3, r3, #2
1000b0b6:	4413      	add	r3, r2
1000b0b8:	009b      	lsls	r3, r3, #2
1000b0ba:	3318      	adds	r3, #24
1000b0bc:	69ba      	ldr	r2, [r7, #24]
1000b0be:	4413      	add	r3, r2
1000b0c0:	3304      	adds	r3, #4
1000b0c2:	617b      	str	r3, [r7, #20]
	io = rpvdev->vdev_rsc_io;
1000b0c4:	69fb      	ldr	r3, [r7, #28]
1000b0c6:	689b      	ldr	r3, [r3, #8]
1000b0c8:	613b      	str	r3, [r7, #16]

	if (offset + length <= vdev_rsc->config_len)
1000b0ca:	683a      	ldr	r2, [r7, #0]
1000b0cc:	68bb      	ldr	r3, [r7, #8]
1000b0ce:	441a      	add	r2, r3
1000b0d0:	69bb      	ldr	r3, [r7, #24]
1000b0d2:	695b      	ldr	r3, [r3, #20]
1000b0d4:	429a      	cmp	r2, r3
1000b0d6:	d80c      	bhi.n	1000b0f2 <rproc_virtio_read_config+0x5e>
		metal_io_block_read(io,
				metal_io_virt_to_offset(io, config + offset),
1000b0d8:	697a      	ldr	r2, [r7, #20]
1000b0da:	68bb      	ldr	r3, [r7, #8]
1000b0dc:	4413      	add	r3, r2
		metal_io_block_read(io,
1000b0de:	4619      	mov	r1, r3
1000b0e0:	6938      	ldr	r0, [r7, #16]
1000b0e2:	f7ff fe6c 	bl	1000adbe <metal_io_virt_to_offset>
1000b0e6:	4601      	mov	r1, r0
1000b0e8:	683b      	ldr	r3, [r7, #0]
1000b0ea:	687a      	ldr	r2, [r7, #4]
1000b0ec:	6938      	ldr	r0, [r7, #16]
1000b0ee:	f7ff fd54 	bl	1000ab9a <metal_io_block_read>
				dst, length);
}
1000b0f2:	bf00      	nop
1000b0f4:	3720      	adds	r7, #32
1000b0f6:	46bd      	mov	sp, r7
1000b0f8:	bd80      	pop	{r7, pc}
	...

1000b0fc <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
1000b0fc:	b580      	push	{r7, lr}
1000b0fe:	b08e      	sub	sp, #56	; 0x38
1000b100:	af00      	add	r7, sp, #0
1000b102:	60f8      	str	r0, [r7, #12]
1000b104:	60b9      	str	r1, [r7, #8]
1000b106:	607a      	str	r2, [r7, #4]
1000b108:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
1000b10a:	687b      	ldr	r3, [r7, #4]
1000b10c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
1000b10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000b110:	7e5b      	ldrb	r3, [r3, #25]
1000b112:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
1000b114:	2048      	movs	r0, #72	; 0x48
1000b116:	f7ff feed 	bl	1000aef4 <metal_allocate_memory>
1000b11a:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
1000b11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b11e:	2b00      	cmp	r3, #0
1000b120:	d101      	bne.n	1000b126 <rproc_virtio_create_vdev+0x2a>
		return NULL;
1000b122:	2300      	movs	r3, #0
1000b124:	e092      	b.n	1000b24c <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
1000b126:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000b128:	4613      	mov	r3, r2
1000b12a:	005b      	lsls	r3, r3, #1
1000b12c:	4413      	add	r3, r2
1000b12e:	00db      	lsls	r3, r3, #3
1000b130:	4618      	mov	r0, r3
1000b132:	f7ff fedf 	bl	1000aef4 <metal_allocate_memory>
1000b136:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
1000b138:	6a3b      	ldr	r3, [r7, #32]
1000b13a:	2b00      	cmp	r3, #0
1000b13c:	f000 8081 	beq.w	1000b242 <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
1000b140:	2248      	movs	r2, #72	; 0x48
1000b142:	2100      	movs	r1, #0
1000b144:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000b146:	f004 fa5a 	bl	1000f5fe <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
1000b14a:	2218      	movs	r2, #24
1000b14c:	2100      	movs	r1, #0
1000b14e:	6a38      	ldr	r0, [r7, #32]
1000b150:	f004 fa55 	bl	1000f5fe <memset>
	vdev = &rpvdev->vdev;
1000b154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b156:	3310      	adds	r3, #16
1000b158:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
1000b15a:	2300      	movs	r3, #0
1000b15c:	637b      	str	r3, [r7, #52]	; 0x34
1000b15e:	e025      	b.n	1000b1ac <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
1000b160:	2300      	movs	r3, #0
1000b162:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
1000b164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000b166:	4613      	mov	r3, r2
1000b168:	009b      	lsls	r3, r3, #2
1000b16a:	4413      	add	r3, r2
1000b16c:	009b      	lsls	r3, r3, #2
1000b16e:	3318      	adds	r3, #24
1000b170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
1000b172:	4413      	add	r3, r2
1000b174:	3304      	adds	r3, #4
1000b176:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
1000b178:	68fb      	ldr	r3, [r7, #12]
1000b17a:	2b00      	cmp	r3, #0
1000b17c:	d102      	bne.n	1000b184 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
1000b17e:	69bb      	ldr	r3, [r7, #24]
1000b180:	689b      	ldr	r3, [r3, #8]
1000b182:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
1000b184:	6b38      	ldr	r0, [r7, #48]	; 0x30
1000b186:	f7ff fecc 	bl	1000af22 <virtqueue_allocate>
1000b18a:	6178      	str	r0, [r7, #20]
		if (!vq)
1000b18c:	697b      	ldr	r3, [r7, #20]
1000b18e:	2b00      	cmp	r3, #0
1000b190:	d031      	beq.n	1000b1f6 <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
1000b192:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000b194:	4613      	mov	r3, r2
1000b196:	005b      	lsls	r3, r3, #1
1000b198:	4413      	add	r3, r2
1000b19a:	00db      	lsls	r3, r3, #3
1000b19c:	461a      	mov	r2, r3
1000b19e:	6a3b      	ldr	r3, [r7, #32]
1000b1a0:	4413      	add	r3, r2
1000b1a2:	697a      	ldr	r2, [r7, #20]
1000b1a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
1000b1a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000b1a8:	3301      	adds	r3, #1
1000b1aa:	637b      	str	r3, [r7, #52]	; 0x34
1000b1ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000b1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000b1b0:	429a      	cmp	r2, r3
1000b1b2:	d3d5      	bcc.n	1000b160 <rproc_virtio_create_vdev+0x64>
	}

	rpvdev->notify = notify;
1000b1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b1b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
1000b1b8:	60da      	str	r2, [r3, #12]
	rpvdev->priv = priv;
1000b1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b1bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
1000b1be:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
1000b1c0:	69fb      	ldr	r3, [r7, #28]
1000b1c2:	6a3a      	ldr	r2, [r7, #32]
1000b1c4:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
1000b1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b1c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
1000b1ca:	605a      	str	r2, [r3, #4]
	rpvdev->vdev_rsc_io = rsc_io;
1000b1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b1ce:	683a      	ldr	r2, [r7, #0]
1000b1d0:	609a      	str	r2, [r3, #8]

	vdev->notifyid = notifyid;
1000b1d2:	69fb      	ldr	r3, [r7, #28]
1000b1d4:	68ba      	ldr	r2, [r7, #8]
1000b1d6:	601a      	str	r2, [r3, #0]
	vdev->role = role;
1000b1d8:	69fb      	ldr	r3, [r7, #28]
1000b1da:	68fa      	ldr	r2, [r7, #12]
1000b1dc:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
1000b1de:	69fb      	ldr	r3, [r7, #28]
1000b1e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
1000b1e2:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
1000b1e4:	69fb      	ldr	r3, [r7, #28]
1000b1e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000b1e8:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
1000b1ea:	69fb      	ldr	r3, [r7, #28]
1000b1ec:	4a19      	ldr	r2, [pc, #100]	; (1000b254 <rproc_virtio_create_vdev+0x158>)
1000b1ee:	621a      	str	r2, [r3, #32]
		/* Assume the master support all slave features */
		rproc_virtio_negotiate_features(vdev, dfeatures);
	}
#endif

	return &rpvdev->vdev;
1000b1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b1f2:	3310      	adds	r3, #16
1000b1f4:	e02a      	b.n	1000b24c <rproc_virtio_create_vdev+0x150>
			goto err1;
1000b1f6:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
1000b1f8:	2300      	movs	r3, #0
1000b1fa:	637b      	str	r3, [r7, #52]	; 0x34
1000b1fc:	e019      	b.n	1000b232 <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
1000b1fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000b200:	4613      	mov	r3, r2
1000b202:	005b      	lsls	r3, r3, #1
1000b204:	4413      	add	r3, r2
1000b206:	00db      	lsls	r3, r3, #3
1000b208:	461a      	mov	r2, r3
1000b20a:	6a3b      	ldr	r3, [r7, #32]
1000b20c:	4413      	add	r3, r2
1000b20e:	681b      	ldr	r3, [r3, #0]
1000b210:	2b00      	cmp	r3, #0
1000b212:	d00b      	beq.n	1000b22c <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
1000b214:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000b216:	4613      	mov	r3, r2
1000b218:	005b      	lsls	r3, r3, #1
1000b21a:	4413      	add	r3, r2
1000b21c:	00db      	lsls	r3, r3, #3
1000b21e:	461a      	mov	r2, r3
1000b220:	6a3b      	ldr	r3, [r7, #32]
1000b222:	4413      	add	r3, r2
1000b224:	681b      	ldr	r3, [r3, #0]
1000b226:	4618      	mov	r0, r3
1000b228:	f7ff fe70 	bl	1000af0c <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
1000b22c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000b22e:	3301      	adds	r3, #1
1000b230:	637b      	str	r3, [r7, #52]	; 0x34
1000b232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000b234:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000b236:	429a      	cmp	r2, r3
1000b238:	d3e1      	bcc.n	1000b1fe <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
1000b23a:	6a38      	ldr	r0, [r7, #32]
1000b23c:	f7ff fe66 	bl	1000af0c <metal_free_memory>
1000b240:	e000      	b.n	1000b244 <rproc_virtio_create_vdev+0x148>
		goto err0;
1000b242:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
1000b244:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000b246:	f7ff fe61 	bl	1000af0c <metal_free_memory>
	return NULL;
1000b24a:	2300      	movs	r3, #0
}
1000b24c:	4618      	mov	r0, r3
1000b24e:	3738      	adds	r7, #56	; 0x38
1000b250:	46bd      	mov	sp, r7
1000b252:	bd80      	pop	{r7, pc}
1000b254:	10011d28 	.word	0x10011d28

1000b258 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
1000b258:	b480      	push	{r7}
1000b25a:	b087      	sub	sp, #28
1000b25c:	af00      	add	r7, sp, #0
1000b25e:	60f8      	str	r0, [r7, #12]
1000b260:	60b9      	str	r1, [r7, #8]
1000b262:	607a      	str	r2, [r7, #4]
1000b264:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
1000b266:	68fb      	ldr	r3, [r7, #12]
1000b268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000b26a:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
1000b26c:	68ba      	ldr	r2, [r7, #8]
1000b26e:	697b      	ldr	r3, [r7, #20]
1000b270:	429a      	cmp	r2, r3
1000b272:	d302      	bcc.n	1000b27a <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
1000b274:	f06f 0301 	mvn.w	r3, #1
1000b278:	e019      	b.n	1000b2ae <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
1000b27a:	68fb      	ldr	r3, [r7, #12]
1000b27c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1000b27e:	68ba      	ldr	r2, [r7, #8]
1000b280:	4613      	mov	r3, r2
1000b282:	005b      	lsls	r3, r3, #1
1000b284:	4413      	add	r3, r2
1000b286:	00db      	lsls	r3, r3, #3
1000b288:	440b      	add	r3, r1
1000b28a:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
1000b28c:	693b      	ldr	r3, [r7, #16]
1000b28e:	6a3a      	ldr	r2, [r7, #32]
1000b290:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
1000b292:	693b      	ldr	r3, [r7, #16]
1000b294:	687a      	ldr	r2, [r7, #4]
1000b296:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
1000b298:	693b      	ldr	r3, [r7, #16]
1000b29a:	683a      	ldr	r2, [r7, #0]
1000b29c:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
1000b29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b2a0:	b29a      	uxth	r2, r3
1000b2a2:	693b      	ldr	r3, [r7, #16]
1000b2a4:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
1000b2a6:	693b      	ldr	r3, [r7, #16]
1000b2a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000b2aa:	609a      	str	r2, [r3, #8]

	return 0;
1000b2ac:	2300      	movs	r3, #0
}
1000b2ae:	4618      	mov	r0, r3
1000b2b0:	371c      	adds	r7, #28
1000b2b2:	46bd      	mov	sp, r7
1000b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b2b8:	4770      	bx	lr

1000b2ba <rproc_virtio_wait_remote_ready>:
	}
	return 0;
}

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
1000b2ba:	b580      	push	{r7, lr}
1000b2bc:	b084      	sub	sp, #16
1000b2be:	af00      	add	r7, sp, #0
1000b2c0:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
1000b2c2:	687b      	ldr	r3, [r7, #4]
1000b2c4:	699b      	ldr	r3, [r3, #24]
1000b2c6:	2b00      	cmp	r3, #0
1000b2c8:	d00a      	beq.n	1000b2e0 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
1000b2ca:	6878      	ldr	r0, [r7, #4]
1000b2cc:	f7ff fe76 	bl	1000afbc <rproc_virtio_get_status>
1000b2d0:	4603      	mov	r3, r0
1000b2d2:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
1000b2d4:	7bfb      	ldrb	r3, [r7, #15]
1000b2d6:	f003 0304 	and.w	r3, r3, #4
1000b2da:	2b00      	cmp	r3, #0
1000b2dc:	d102      	bne.n	1000b2e4 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
1000b2de:	e7f4      	b.n	1000b2ca <rproc_virtio_wait_remote_ready+0x10>
		return;
1000b2e0:	bf00      	nop
1000b2e2:	e000      	b.n	1000b2e6 <rproc_virtio_wait_remote_ready+0x2c>
			return;
1000b2e4:	bf00      	nop
		metal_cpu_yield();
	}
}
1000b2e6:	3710      	adds	r7, #16
1000b2e8:	46bd      	mov	sp, r7
1000b2ea:	bd80      	pop	{r7, pc}

1000b2ec <metal_list_add_before>:
{
1000b2ec:	b480      	push	{r7}
1000b2ee:	b083      	sub	sp, #12
1000b2f0:	af00      	add	r7, sp, #0
1000b2f2:	6078      	str	r0, [r7, #4]
1000b2f4:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
1000b2f6:	687b      	ldr	r3, [r7, #4]
1000b2f8:	685a      	ldr	r2, [r3, #4]
1000b2fa:	683b      	ldr	r3, [r7, #0]
1000b2fc:	605a      	str	r2, [r3, #4]
	new_node->next = node;
1000b2fe:	683b      	ldr	r3, [r7, #0]
1000b300:	687a      	ldr	r2, [r7, #4]
1000b302:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
1000b304:	683b      	ldr	r3, [r7, #0]
1000b306:	681b      	ldr	r3, [r3, #0]
1000b308:	683a      	ldr	r2, [r7, #0]
1000b30a:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
1000b30c:	683b      	ldr	r3, [r7, #0]
1000b30e:	685b      	ldr	r3, [r3, #4]
1000b310:	683a      	ldr	r2, [r7, #0]
1000b312:	601a      	str	r2, [r3, #0]
}
1000b314:	bf00      	nop
1000b316:	370c      	adds	r7, #12
1000b318:	46bd      	mov	sp, r7
1000b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b31e:	4770      	bx	lr

1000b320 <metal_list_add_tail>:
{
1000b320:	b580      	push	{r7, lr}
1000b322:	b082      	sub	sp, #8
1000b324:	af00      	add	r7, sp, #0
1000b326:	6078      	str	r0, [r7, #4]
1000b328:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
1000b32a:	6839      	ldr	r1, [r7, #0]
1000b32c:	6878      	ldr	r0, [r7, #4]
1000b32e:	f7ff ffdd 	bl	1000b2ec <metal_list_add_before>
}
1000b332:	bf00      	nop
1000b334:	3708      	adds	r7, #8
1000b336:	46bd      	mov	sp, r7
1000b338:	bd80      	pop	{r7, pc}

1000b33a <rpmsg_get_endpoint>:
}

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
1000b33a:	b580      	push	{r7, lr}
1000b33c:	b088      	sub	sp, #32
1000b33e:	af00      	add	r7, sp, #0
1000b340:	60f8      	str	r0, [r7, #12]
1000b342:	60b9      	str	r1, [r7, #8]
1000b344:	607a      	str	r2, [r7, #4]
1000b346:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
1000b348:	68fb      	ldr	r3, [r7, #12]
1000b34a:	681b      	ldr	r3, [r3, #0]
1000b34c:	61fb      	str	r3, [r7, #28]
1000b34e:	e04b      	b.n	1000b3e8 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
1000b350:	2300      	movs	r3, #0
1000b352:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
1000b354:	69fb      	ldr	r3, [r7, #28]
1000b356:	3b34      	subs	r3, #52	; 0x34
1000b358:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
1000b35a:	687b      	ldr	r3, [r7, #4]
1000b35c:	f1b3 3fff 	cmp.w	r3, #4294967295
1000b360:	d006      	beq.n	1000b370 <rpmsg_get_endpoint+0x36>
1000b362:	697b      	ldr	r3, [r7, #20]
1000b364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000b366:	687a      	ldr	r2, [r7, #4]
1000b368:	429a      	cmp	r2, r3
1000b36a:	d101      	bne.n	1000b370 <rpmsg_get_endpoint+0x36>
			return ept;
1000b36c:	697b      	ldr	r3, [r7, #20]
1000b36e:	e040      	b.n	1000b3f2 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
1000b370:	697b      	ldr	r3, [r7, #20]
1000b372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000b374:	687a      	ldr	r2, [r7, #4]
1000b376:	429a      	cmp	r2, r3
1000b378:	d106      	bne.n	1000b388 <rpmsg_get_endpoint+0x4e>
1000b37a:	697b      	ldr	r3, [r7, #20]
1000b37c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000b37e:	683a      	ldr	r2, [r7, #0]
1000b380:	429a      	cmp	r2, r3
1000b382:	d101      	bne.n	1000b388 <rpmsg_get_endpoint+0x4e>
			return ept;
1000b384:	697b      	ldr	r3, [r7, #20]
1000b386:	e034      	b.n	1000b3f2 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
1000b388:	68bb      	ldr	r3, [r7, #8]
1000b38a:	2b00      	cmp	r3, #0
1000b38c:	d00c      	beq.n	1000b3a8 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
1000b38e:	697b      	ldr	r3, [r7, #20]
1000b390:	2220      	movs	r2, #32
1000b392:	68b9      	ldr	r1, [r7, #8]
1000b394:	4618      	mov	r0, r3
1000b396:	f004 f93a 	bl	1000f60e <strncmp>
1000b39a:	4603      	mov	r3, r0
1000b39c:	2b00      	cmp	r3, #0
1000b39e:	bf0c      	ite	eq
1000b3a0:	2301      	moveq	r3, #1
1000b3a2:	2300      	movne	r3, #0
1000b3a4:	b2db      	uxtb	r3, r3
1000b3a6:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
1000b3a8:	68bb      	ldr	r3, [r7, #8]
1000b3aa:	2b00      	cmp	r3, #0
1000b3ac:	d018      	beq.n	1000b3e0 <rpmsg_get_endpoint+0xa6>
1000b3ae:	69bb      	ldr	r3, [r7, #24]
1000b3b0:	2b00      	cmp	r3, #0
1000b3b2:	d015      	beq.n	1000b3e0 <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address */
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
1000b3b4:	683b      	ldr	r3, [r7, #0]
1000b3b6:	f1b3 3fff 	cmp.w	r3, #4294967295
1000b3ba:	d006      	beq.n	1000b3ca <rpmsg_get_endpoint+0x90>
1000b3bc:	697b      	ldr	r3, [r7, #20]
1000b3be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000b3c0:	683a      	ldr	r2, [r7, #0]
1000b3c2:	429a      	cmp	r2, r3
1000b3c4:	d101      	bne.n	1000b3ca <rpmsg_get_endpoint+0x90>
			return ept;
1000b3c6:	697b      	ldr	r3, [r7, #20]
1000b3c8:	e013      	b.n	1000b3f2 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept */
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
1000b3ca:	687b      	ldr	r3, [r7, #4]
1000b3cc:	f1b3 3fff 	cmp.w	r3, #4294967295
1000b3d0:	d107      	bne.n	1000b3e2 <rpmsg_get_endpoint+0xa8>
1000b3d2:	697b      	ldr	r3, [r7, #20]
1000b3d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000b3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
1000b3da:	d102      	bne.n	1000b3e2 <rpmsg_get_endpoint+0xa8>
			return ept;
1000b3dc:	697b      	ldr	r3, [r7, #20]
1000b3de:	e008      	b.n	1000b3f2 <rpmsg_get_endpoint+0xb8>
			continue;
1000b3e0:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
1000b3e2:	69fb      	ldr	r3, [r7, #28]
1000b3e4:	681b      	ldr	r3, [r3, #0]
1000b3e6:	61fb      	str	r3, [r7, #28]
1000b3e8:	68fb      	ldr	r3, [r7, #12]
1000b3ea:	69fa      	ldr	r2, [r7, #28]
1000b3ec:	429a      	cmp	r2, r3
1000b3ee:	d1af      	bne.n	1000b350 <rpmsg_get_endpoint+0x16>
	}
	return NULL;
1000b3f0:	2300      	movs	r3, #0
}
1000b3f2:	4618      	mov	r0, r3
1000b3f4:	3720      	adds	r7, #32
1000b3f6:	46bd      	mov	sp, r7
1000b3f8:	bd80      	pop	{r7, pc}

1000b3fa <rpmsg_register_endpoint>:
	metal_mutex_release(&rdev->lock);
}

void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept)
{
1000b3fa:	b580      	push	{r7, lr}
1000b3fc:	b082      	sub	sp, #8
1000b3fe:	af00      	add	r7, sp, #0
1000b400:	6078      	str	r0, [r7, #4]
1000b402:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
1000b404:	683b      	ldr	r3, [r7, #0]
1000b406:	687a      	ldr	r2, [r7, #4]
1000b408:	621a      	str	r2, [r3, #32]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
1000b40a:	687a      	ldr	r2, [r7, #4]
1000b40c:	683b      	ldr	r3, [r7, #0]
1000b40e:	3334      	adds	r3, #52	; 0x34
1000b410:	4619      	mov	r1, r3
1000b412:	4610      	mov	r0, r2
1000b414:	f7ff ff84 	bl	1000b320 <metal_list_add_tail>
}
1000b418:	bf00      	nop
1000b41a:	3708      	adds	r7, #8
1000b41c:	46bd      	mov	sp, r7
1000b41e:	bd80      	pop	{r7, pc}

1000b420 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
1000b420:	b480      	push	{r7}
1000b422:	b083      	sub	sp, #12
1000b424:	af00      	add	r7, sp, #0
1000b426:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
1000b428:	2300      	movs	r3, #0
}
1000b42a:	4618      	mov	r0, r3
1000b42c:	370c      	adds	r7, #12
1000b42e:	46bd      	mov	sp, r7
1000b430:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b434:	4770      	bx	lr

1000b436 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
1000b436:	b580      	push	{r7, lr}
1000b438:	b082      	sub	sp, #8
1000b43a:	af00      	add	r7, sp, #0
1000b43c:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
1000b43e:	6878      	ldr	r0, [r7, #4]
1000b440:	f7ff ffee 	bl	1000b420 <__metal_sleep_usec>
1000b444:	4603      	mov	r3, r0
}
1000b446:	4618      	mov	r0, r3
1000b448:	3708      	adds	r7, #8
1000b44a:	46bd      	mov	sp, r7
1000b44c:	bd80      	pop	{r7, pc}

1000b44e <metal_list_init>:
{
1000b44e:	b480      	push	{r7}
1000b450:	b083      	sub	sp, #12
1000b452:	af00      	add	r7, sp, #0
1000b454:	6078      	str	r0, [r7, #4]
	list->prev = list;
1000b456:	687b      	ldr	r3, [r7, #4]
1000b458:	687a      	ldr	r2, [r7, #4]
1000b45a:	605a      	str	r2, [r3, #4]
	list->next = list;
1000b45c:	687b      	ldr	r3, [r7, #4]
1000b45e:	687a      	ldr	r2, [r7, #4]
1000b460:	601a      	str	r2, [r3, #0]
}
1000b462:	bf00      	nop
1000b464:	370c      	adds	r7, #12
1000b466:	46bd      	mov	sp, r7
1000b468:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b46c:	4770      	bx	lr

1000b46e <metal_io_virt_to_offset>:
{
1000b46e:	b480      	push	{r7}
1000b470:	b085      	sub	sp, #20
1000b472:	af00      	add	r7, sp, #0
1000b474:	6078      	str	r0, [r7, #4]
1000b476:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
1000b478:	683b      	ldr	r3, [r7, #0]
1000b47a:	687a      	ldr	r2, [r7, #4]
1000b47c:	6812      	ldr	r2, [r2, #0]
1000b47e:	1a9b      	subs	r3, r3, r2
1000b480:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
1000b482:	687b      	ldr	r3, [r7, #4]
1000b484:	689b      	ldr	r3, [r3, #8]
1000b486:	68fa      	ldr	r2, [r7, #12]
1000b488:	429a      	cmp	r2, r3
1000b48a:	d201      	bcs.n	1000b490 <metal_io_virt_to_offset+0x22>
1000b48c:	68fb      	ldr	r3, [r7, #12]
1000b48e:	e001      	b.n	1000b494 <metal_io_virt_to_offset+0x26>
1000b490:	f04f 33ff 	mov.w	r3, #4294967295
}
1000b494:	4618      	mov	r0, r3
1000b496:	3714      	adds	r7, #20
1000b498:	46bd      	mov	sp, r7
1000b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b49e:	4770      	bx	lr

1000b4a0 <__metal_mutex_init>:
 * static singleton mutex
 */
#define METAL_MUTEX_DEFINE(m) metal_mutex_t m = METAL_MUTEX_INIT(m)

static inline void __metal_mutex_init(metal_mutex_t *mutex)
{
1000b4a0:	b480      	push	{r7}
1000b4a2:	b085      	sub	sp, #20
1000b4a4:	af00      	add	r7, sp, #0
1000b4a6:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
1000b4a8:	687b      	ldr	r3, [r7, #4]
1000b4aa:	60fb      	str	r3, [r7, #12]
1000b4ac:	2300      	movs	r3, #0
1000b4ae:	60bb      	str	r3, [r7, #8]
1000b4b0:	68bb      	ldr	r3, [r7, #8]
1000b4b2:	461a      	mov	r2, r3
1000b4b4:	68fb      	ldr	r3, [r7, #12]
1000b4b6:	f3bf 8f5b 	dmb	ish
1000b4ba:	601a      	str	r2, [r3, #0]
1000b4bc:	f3bf 8f5b 	dmb	ish
}
1000b4c0:	bf00      	nop
1000b4c2:	3714      	adds	r7, #20
1000b4c4:	46bd      	mov	sp, r7
1000b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b4ca:	4770      	bx	lr

1000b4cc <__metal_mutex_acquire>:
		return 0; /* not acquired */
	}
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
1000b4cc:	b490      	push	{r4, r7}
1000b4ce:	b086      	sub	sp, #24
1000b4d0:	af00      	add	r7, sp, #0
1000b4d2:	6078      	str	r0, [r7, #4]
	int unlocked = METAL_MUTEX_UNLOCKED;
1000b4d4:	2300      	movs	r3, #0
1000b4d6:	613b      	str	r3, [r7, #16]

	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
1000b4d8:	bf00      	nop
1000b4da:	687b      	ldr	r3, [r7, #4]
1000b4dc:	617b      	str	r3, [r7, #20]
1000b4de:	2301      	movs	r3, #1
1000b4e0:	60fb      	str	r3, [r7, #12]
1000b4e2:	68fb      	ldr	r3, [r7, #12]
1000b4e4:	461c      	mov	r4, r3
1000b4e6:	697a      	ldr	r2, [r7, #20]
1000b4e8:	f107 0310 	add.w	r3, r7, #16
1000b4ec:	6818      	ldr	r0, [r3, #0]
1000b4ee:	f3bf 8f5b 	dmb	ish
1000b4f2:	e852 1f00 	ldrex	r1, [r2]
1000b4f6:	4281      	cmp	r1, r0
1000b4f8:	d103      	bne.n	1000b502 <__metal_mutex_acquire+0x36>
1000b4fa:	e842 4c00 	strex	ip, r4, [r2]
1000b4fe:	f1bc 0f00 	cmp.w	ip, #0
1000b502:	f3bf 8f5b 	dmb	ish
1000b506:	bf0c      	ite	eq
1000b508:	2201      	moveq	r2, #1
1000b50a:	2200      	movne	r2, #0
1000b50c:	2a00      	cmp	r2, #0
1000b50e:	d100      	bne.n	1000b512 <__metal_mutex_acquire+0x46>
1000b510:	6019      	str	r1, [r3, #0]
1000b512:	4613      	mov	r3, r2
1000b514:	f083 0301 	eor.w	r3, r3, #1
1000b518:	b2db      	uxtb	r3, r3
1000b51a:	2b00      	cmp	r3, #0
1000b51c:	d1dd      	bne.n	1000b4da <__metal_mutex_acquire+0xe>
					     METAL_MUTEX_LOCKED)) {
		;
	}
}
1000b51e:	bf00      	nop
1000b520:	bf00      	nop
1000b522:	3718      	adds	r7, #24
1000b524:	46bd      	mov	sp, r7
1000b526:	bc90      	pop	{r4, r7}
1000b528:	4770      	bx	lr

1000b52a <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
1000b52a:	b480      	push	{r7}
1000b52c:	b085      	sub	sp, #20
1000b52e:	af00      	add	r7, sp, #0
1000b530:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
1000b532:	687b      	ldr	r3, [r7, #4]
1000b534:	60fb      	str	r3, [r7, #12]
1000b536:	2300      	movs	r3, #0
1000b538:	60bb      	str	r3, [r7, #8]
1000b53a:	68bb      	ldr	r3, [r7, #8]
1000b53c:	461a      	mov	r2, r3
1000b53e:	68fb      	ldr	r3, [r7, #12]
1000b540:	f3bf 8f5b 	dmb	ish
1000b544:	601a      	str	r2, [r3, #0]
1000b546:	f3bf 8f5b 	dmb	ish
}
1000b54a:	bf00      	nop
1000b54c:	3714      	adds	r7, #20
1000b54e:	46bd      	mov	sp, r7
1000b550:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b554:	4770      	bx	lr

1000b556 <metal_mutex_init>:
/**
 * @brief	Initialize a libmetal mutex.
 * @param[in]	mutex	Mutex to initialize.
 */
static inline void metal_mutex_init(metal_mutex_t *mutex)
{
1000b556:	b580      	push	{r7, lr}
1000b558:	b082      	sub	sp, #8
1000b55a:	af00      	add	r7, sp, #0
1000b55c:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
1000b55e:	6878      	ldr	r0, [r7, #4]
1000b560:	f7ff ff9e 	bl	1000b4a0 <__metal_mutex_init>
}
1000b564:	bf00      	nop
1000b566:	3708      	adds	r7, #8
1000b568:	46bd      	mov	sp, r7
1000b56a:	bd80      	pop	{r7, pc}

1000b56c <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
1000b56c:	b580      	push	{r7, lr}
1000b56e:	b082      	sub	sp, #8
1000b570:	af00      	add	r7, sp, #0
1000b572:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
1000b574:	6878      	ldr	r0, [r7, #4]
1000b576:	f7ff ffa9 	bl	1000b4cc <__metal_mutex_acquire>
}
1000b57a:	bf00      	nop
1000b57c:	3708      	adds	r7, #8
1000b57e:	46bd      	mov	sp, r7
1000b580:	bd80      	pop	{r7, pc}

1000b582 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
1000b582:	b580      	push	{r7, lr}
1000b584:	b082      	sub	sp, #8
1000b586:	af00      	add	r7, sp, #0
1000b588:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
1000b58a:	6878      	ldr	r0, [r7, #4]
1000b58c:	f7ff ffcd 	bl	1000b52a <__metal_mutex_release>
}
1000b590:	bf00      	nop
1000b592:	3708      	adds	r7, #8
1000b594:	46bd      	mov	sp, r7
1000b596:	bd80      	pop	{r7, pc}

1000b598 <rpmsg_virtio_get_role>:
#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
1000b598:	b480      	push	{r7}
1000b59a:	b083      	sub	sp, #12
1000b59c:	af00      	add	r7, sp, #0
1000b59e:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
1000b5a0:	687b      	ldr	r3, [r7, #4]
1000b5a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000b5a4:	699b      	ldr	r3, [r3, #24]
}
1000b5a6:	4618      	mov	r0, r3
1000b5a8:	370c      	adds	r7, #12
1000b5aa:	46bd      	mov	sp, r7
1000b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b5b0:	4770      	bx	lr

1000b5b2 <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
1000b5b2:	b580      	push	{r7, lr}
1000b5b4:	b082      	sub	sp, #8
1000b5b6:	af00      	add	r7, sp, #0
1000b5b8:	6078      	str	r0, [r7, #4]
1000b5ba:	460b      	mov	r3, r1
1000b5bc:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
1000b5be:	687b      	ldr	r3, [r7, #4]
1000b5c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000b5c2:	6a1b      	ldr	r3, [r3, #32]
1000b5c4:	685b      	ldr	r3, [r3, #4]
1000b5c6:	687a      	ldr	r2, [r7, #4]
1000b5c8:	6f92      	ldr	r2, [r2, #120]	; 0x78
1000b5ca:	78f9      	ldrb	r1, [r7, #3]
1000b5cc:	4610      	mov	r0, r2
1000b5ce:	4798      	blx	r3
}
1000b5d0:	bf00      	nop
1000b5d2:	3708      	adds	r7, #8
1000b5d4:	46bd      	mov	sp, r7
1000b5d6:	bd80      	pop	{r7, pc}

1000b5d8 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
1000b5d8:	b580      	push	{r7, lr}
1000b5da:	b082      	sub	sp, #8
1000b5dc:	af00      	add	r7, sp, #0
1000b5de:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
1000b5e0:	687b      	ldr	r3, [r7, #4]
1000b5e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000b5e4:	6a1b      	ldr	r3, [r3, #32]
1000b5e6:	681b      	ldr	r3, [r3, #0]
1000b5e8:	687a      	ldr	r2, [r7, #4]
1000b5ea:	6f92      	ldr	r2, [r2, #120]	; 0x78
1000b5ec:	4610      	mov	r0, r2
1000b5ee:	4798      	blx	r3
1000b5f0:	4603      	mov	r3, r0
}
1000b5f2:	4618      	mov	r0, r3
1000b5f4:	3708      	adds	r7, #8
1000b5f6:	46bd      	mov	sp, r7
1000b5f8:	bd80      	pop	{r7, pc}

1000b5fa <rpmsg_virtio_get_features>:

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
1000b5fa:	b580      	push	{r7, lr}
1000b5fc:	b082      	sub	sp, #8
1000b5fe:	af00      	add	r7, sp, #0
1000b600:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
1000b602:	687b      	ldr	r3, [r7, #4]
1000b604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000b606:	6a1b      	ldr	r3, [r3, #32]
1000b608:	689b      	ldr	r3, [r3, #8]
1000b60a:	687a      	ldr	r2, [r7, #4]
1000b60c:	6f92      	ldr	r2, [r2, #120]	; 0x78
1000b60e:	4610      	mov	r0, r2
1000b610:	4798      	blx	r3
1000b612:	4603      	mov	r3, r0
}
1000b614:	4618      	mov	r0, r3
1000b616:	3708      	adds	r7, #8
1000b618:	46bd      	mov	sp, r7
1000b61a:	bd80      	pop	{r7, pc}

1000b61c <rpmsg_virtio_create_virtqueues>:
static inline int
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
1000b61c:	b580      	push	{r7, lr}
1000b61e:	b086      	sub	sp, #24
1000b620:	af02      	add	r7, sp, #8
1000b622:	60f8      	str	r0, [r7, #12]
1000b624:	60b9      	str	r1, [r7, #8]
1000b626:	607a      	str	r2, [r7, #4]
1000b628:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
1000b62a:	68fb      	ldr	r3, [r7, #12]
1000b62c:	6f98      	ldr	r0, [r3, #120]	; 0x78
1000b62e:	68b9      	ldr	r1, [r7, #8]
1000b630:	69bb      	ldr	r3, [r7, #24]
1000b632:	9300      	str	r3, [sp, #0]
1000b634:	683b      	ldr	r3, [r7, #0]
1000b636:	687a      	ldr	r2, [r7, #4]
1000b638:	f000 fc2c 	bl	1000be94 <virtio_create_virtqueues>
1000b63c:	4603      	mov	r3, r0
					callbacks);
}
1000b63e:	4618      	mov	r0, r3
1000b640:	3710      	adds	r7, #16
1000b642:	46bd      	mov	sp, r7
1000b644:	bd80      	pop	{r7, pc}
	...

1000b648 <rpmsg_initialize_ept>:
static inline void rpmsg_initialize_ept(struct rpmsg_endpoint *ept,
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
1000b648:	b580      	push	{r7, lr}
1000b64a:	b084      	sub	sp, #16
1000b64c:	af00      	add	r7, sp, #0
1000b64e:	60f8      	str	r0, [r7, #12]
1000b650:	60b9      	str	r1, [r7, #8]
1000b652:	607a      	str	r2, [r7, #4]
1000b654:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
1000b656:	68f8      	ldr	r0, [r7, #12]
1000b658:	68bb      	ldr	r3, [r7, #8]
1000b65a:	2b00      	cmp	r3, #0
1000b65c:	d001      	beq.n	1000b662 <rpmsg_initialize_ept+0x1a>
1000b65e:	68bb      	ldr	r3, [r7, #8]
1000b660:	e000      	b.n	1000b664 <rpmsg_initialize_ept+0x1c>
1000b662:	4b0a      	ldr	r3, [pc, #40]	; (1000b68c <rpmsg_initialize_ept+0x44>)
1000b664:	2220      	movs	r2, #32
1000b666:	4619      	mov	r1, r3
1000b668:	f003 ffe3 	bl	1000f632 <strncpy>
	ept->addr = src;
1000b66c:	68fb      	ldr	r3, [r7, #12]
1000b66e:	687a      	ldr	r2, [r7, #4]
1000b670:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
1000b672:	68fb      	ldr	r3, [r7, #12]
1000b674:	683a      	ldr	r2, [r7, #0]
1000b676:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
1000b678:	68fb      	ldr	r3, [r7, #12]
1000b67a:	69ba      	ldr	r2, [r7, #24]
1000b67c:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
1000b67e:	68fb      	ldr	r3, [r7, #12]
1000b680:	69fa      	ldr	r2, [r7, #28]
1000b682:	631a      	str	r2, [r3, #48]	; 0x30
}
1000b684:	bf00      	nop
1000b686:	3710      	adds	r7, #16
1000b688:	46bd      	mov	sp, r7
1000b68a:	bd80      	pop	{r7, pc}
1000b68c:	10011bfc 	.word	0x10011bfc

1000b690 <rpmsg_get_ept_from_addr>:
void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
1000b690:	b580      	push	{r7, lr}
1000b692:	b082      	sub	sp, #8
1000b694:	af00      	add	r7, sp, #0
1000b696:	6078      	str	r0, [r7, #4]
1000b698:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
1000b69a:	f04f 33ff 	mov.w	r3, #4294967295
1000b69e:	683a      	ldr	r2, [r7, #0]
1000b6a0:	2100      	movs	r1, #0
1000b6a2:	6878      	ldr	r0, [r7, #4]
1000b6a4:	f7ff fe49 	bl	1000b33a <rpmsg_get_endpoint>
1000b6a8:	4603      	mov	r3, r0
}
1000b6aa:	4618      	mov	r0, r3
1000b6ac:	3708      	adds	r7, #8
1000b6ae:	46bd      	mov	sp, r7
1000b6b0:	bd80      	pop	{r7, pc}

1000b6b2 <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
1000b6b2:	b480      	push	{r7}
1000b6b4:	b085      	sub	sp, #20
1000b6b6:	af00      	add	r7, sp, #0
1000b6b8:	60f8      	str	r0, [r7, #12]
1000b6ba:	60b9      	str	r1, [r7, #8]
1000b6bc:	607a      	str	r2, [r7, #4]
	if (!shpool)
1000b6be:	68fb      	ldr	r3, [r7, #12]
1000b6c0:	2b00      	cmp	r3, #0
1000b6c2:	d009      	beq.n	1000b6d8 <rpmsg_virtio_init_shm_pool+0x26>
		return;
	shpool->base = shb;
1000b6c4:	68fb      	ldr	r3, [r7, #12]
1000b6c6:	68ba      	ldr	r2, [r7, #8]
1000b6c8:	601a      	str	r2, [r3, #0]
	shpool->size = size;
1000b6ca:	68fb      	ldr	r3, [r7, #12]
1000b6cc:	687a      	ldr	r2, [r7, #4]
1000b6ce:	609a      	str	r2, [r3, #8]
	shpool->avail = size;
1000b6d0:	68fb      	ldr	r3, [r7, #12]
1000b6d2:	687a      	ldr	r2, [r7, #4]
1000b6d4:	605a      	str	r2, [r3, #4]
1000b6d6:	e000      	b.n	1000b6da <rpmsg_virtio_init_shm_pool+0x28>
		return;
1000b6d8:	bf00      	nop
}
1000b6da:	3714      	adds	r7, #20
1000b6dc:	46bd      	mov	sp, r7
1000b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b6e2:	4770      	bx	lr

1000b6e4 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
1000b6e4:	b580      	push	{r7, lr}
1000b6e6:	b086      	sub	sp, #24
1000b6e8:	af00      	add	r7, sp, #0
1000b6ea:	60f8      	str	r0, [r7, #12]
1000b6ec:	60b9      	str	r1, [r7, #8]
1000b6ee:	607a      	str	r2, [r7, #4]
1000b6f0:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000b6f2:	68f8      	ldr	r0, [r7, #12]
1000b6f4:	f7ff ff50 	bl	1000b598 <rpmsg_virtio_get_role>
1000b6f8:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000b6fa:	697b      	ldr	r3, [r7, #20]
1000b6fc:	2b01      	cmp	r3, #1
1000b6fe:	d106      	bne.n	1000b70e <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
1000b700:	68fb      	ldr	r3, [r7, #12]
1000b702:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1000b704:	8879      	ldrh	r1, [r7, #2]
1000b706:	687a      	ldr	r2, [r7, #4]
1000b708:	4618      	mov	r0, r3
1000b70a:	f000 fd95 	bl	1000c238 <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
1000b70e:	bf00      	nop
1000b710:	3718      	adds	r7, #24
1000b712:	46bd      	mov	sp, r7
1000b714:	bd80      	pop	{r7, pc}

1000b716 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
1000b716:	b580      	push	{r7, lr}
1000b718:	b086      	sub	sp, #24
1000b71a:	af00      	add	r7, sp, #0
1000b71c:	60f8      	str	r0, [r7, #12]
1000b71e:	60b9      	str	r1, [r7, #8]
1000b720:	607a      	str	r2, [r7, #4]
1000b722:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000b724:	68f8      	ldr	r0, [r7, #12]
1000b726:	f7ff ff37 	bl	1000b598 <rpmsg_virtio_get_role>
1000b72a:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000b72c:	697b      	ldr	r3, [r7, #20]
1000b72e:	2b01      	cmp	r3, #1
1000b730:	d109      	bne.n	1000b746 <rpmsg_virtio_enqueue_buffer+0x30>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
1000b732:	68fb      	ldr	r3, [r7, #12]
1000b734:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000b738:	8879      	ldrh	r1, [r7, #2]
1000b73a:	687a      	ldr	r2, [r7, #4]
1000b73c:	4618      	mov	r0, r3
1000b73e:	f000 fd7b 	bl	1000c238 <virtqueue_add_consumed_buffer>
1000b742:	4603      	mov	r3, r0
1000b744:	e000      	b.n	1000b748 <rpmsg_virtio_enqueue_buffer+0x32>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
1000b746:	2300      	movs	r3, #0
}
1000b748:	4618      	mov	r0, r3
1000b74a:	3718      	adds	r7, #24
1000b74c:	46bd      	mov	sp, r7
1000b74e:	bd80      	pop	{r7, pc}

1000b750 <rpmsg_virtio_get_tx_buffer>:
 *
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
1000b750:	b580      	push	{r7, lr}
1000b752:	b086      	sub	sp, #24
1000b754:	af00      	add	r7, sp, #0
1000b756:	60f8      	str	r0, [r7, #12]
1000b758:	60b9      	str	r1, [r7, #8]
1000b75a:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000b75c:	68f8      	ldr	r0, [r7, #12]
1000b75e:	f7ff ff1b 	bl	1000b598 <rpmsg_virtio_get_role>
1000b762:	6138      	str	r0, [r7, #16]
	void *data = NULL;
1000b764:	2300      	movs	r3, #0
1000b766:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000b768:	693b      	ldr	r3, [r7, #16]
1000b76a:	2b01      	cmp	r3, #1
1000b76c:	d108      	bne.n	1000b780 <rpmsg_virtio_get_tx_buffer+0x30>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
1000b76e:	68fb      	ldr	r3, [r7, #12]
1000b770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000b774:	68ba      	ldr	r2, [r7, #8]
1000b776:	6879      	ldr	r1, [r7, #4]
1000b778:	4618      	mov	r0, r3
1000b77a:	f000 fd15 	bl	1000c1a8 <virtqueue_get_available_buffer>
1000b77e:	6178      	str	r0, [r7, #20]
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
1000b780:	697b      	ldr	r3, [r7, #20]
}
1000b782:	4618      	mov	r0, r3
1000b784:	3718      	adds	r7, #24
1000b786:	46bd      	mov	sp, r7
1000b788:	bd80      	pop	{r7, pc}

1000b78a <rpmsg_virtio_get_rx_buffer>:
 * @return - pointer to received buffer
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
1000b78a:	b580      	push	{r7, lr}
1000b78c:	b086      	sub	sp, #24
1000b78e:	af00      	add	r7, sp, #0
1000b790:	60f8      	str	r0, [r7, #12]
1000b792:	60b9      	str	r1, [r7, #8]
1000b794:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000b796:	68f8      	ldr	r0, [r7, #12]
1000b798:	f7ff fefe 	bl	1000b598 <rpmsg_virtio_get_role>
1000b79c:	6138      	str	r0, [r7, #16]
	void *data = NULL;
1000b79e:	2300      	movs	r3, #0
1000b7a0:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000b7a2:	693b      	ldr	r3, [r7, #16]
1000b7a4:	2b01      	cmp	r3, #1
1000b7a6:	d107      	bne.n	1000b7b8 <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
1000b7a8:	68fb      	ldr	r3, [r7, #12]
1000b7aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1000b7ac:	68ba      	ldr	r2, [r7, #8]
1000b7ae:	6879      	ldr	r1, [r7, #4]
1000b7b0:	4618      	mov	r0, r3
1000b7b2:	f000 fcf9 	bl	1000c1a8 <virtqueue_get_available_buffer>
1000b7b6:	6178      	str	r0, [r7, #20]
#ifdef VIRTIO_CACHED_BUFFERS
	/* Invalidate the buffer before returning it */
	metal_cache_invalidate(data, *len);
#endif /* VIRTIO_CACHED_BUFFERS */

	return data;
1000b7b8:	697b      	ldr	r3, [r7, #20]
}
1000b7ba:	4618      	mov	r0, r3
1000b7bc:	3718      	adds	r7, #24
1000b7be:	46bd      	mov	sp, r7
1000b7c0:	bd80      	pop	{r7, pc}

1000b7c2 <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
1000b7c2:	b580      	push	{r7, lr}
1000b7c4:	b084      	sub	sp, #16
1000b7c6:	af00      	add	r7, sp, #0
1000b7c8:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
1000b7ca:	6878      	ldr	r0, [r7, #4]
1000b7cc:	f7ff ff04 	bl	1000b5d8 <rpmsg_virtio_get_status>
1000b7d0:	4603      	mov	r3, r0
1000b7d2:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
1000b7d4:	7bfb      	ldrb	r3, [r7, #15]
1000b7d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
1000b7da:	2b00      	cmp	r3, #0
1000b7dc:	d004      	beq.n	1000b7e8 <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
1000b7de:	2100      	movs	r1, #0
1000b7e0:	6878      	ldr	r0, [r7, #4]
1000b7e2:	f7ff fee6 	bl	1000b5b2 <rpmsg_virtio_set_status>
1000b7e6:	e7f0      	b.n	1000b7ca <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
1000b7e8:	7bfb      	ldrb	r3, [r7, #15]
1000b7ea:	f003 0304 	and.w	r3, r3, #4
1000b7ee:	2b00      	cmp	r3, #0
1000b7f0:	d0eb      	beq.n	1000b7ca <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
1000b7f2:	2301      	movs	r3, #1
		}
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}
}
1000b7f4:	4618      	mov	r0, r3
1000b7f6:	3710      	adds	r7, #16
1000b7f8:	46bd      	mov	sp, r7
1000b7fa:	bd80      	pop	{r7, pc}

1000b7fc <rpmsg_virtio_hold_rx_buffer>:

	return length;
}

static void rpmsg_virtio_hold_rx_buffer(struct rpmsg_device *rdev, void *rxbuf)
{
1000b7fc:	b480      	push	{r7}
1000b7fe:	b085      	sub	sp, #20
1000b800:	af00      	add	r7, sp, #0
1000b802:	6078      	str	r0, [r7, #4]
1000b804:	6039      	str	r1, [r7, #0]
	struct rpmsg_hdr *rp_hdr;

	(void)rdev;

	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
1000b806:	683b      	ldr	r3, [r7, #0]
1000b808:	3b10      	subs	r3, #16
1000b80a:	60fb      	str	r3, [r7, #12]

	/* Set held status to keep buffer */
	rp_hdr->reserved |= RPMSG_BUF_HELD;
1000b80c:	68fb      	ldr	r3, [r7, #12]
1000b80e:	689b      	ldr	r3, [r3, #8]
1000b810:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
1000b814:	68fb      	ldr	r3, [r7, #12]
1000b816:	609a      	str	r2, [r3, #8]
}
1000b818:	bf00      	nop
1000b81a:	3714      	adds	r7, #20
1000b81c:	46bd      	mov	sp, r7
1000b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b822:	4770      	bx	lr

1000b824 <rpmsg_virtio_release_rx_buffer>:

static void rpmsg_virtio_release_rx_buffer(struct rpmsg_device *rdev,
					   void *rxbuf)
{
1000b824:	b580      	push	{r7, lr}
1000b826:	b086      	sub	sp, #24
1000b828:	af00      	add	r7, sp, #0
1000b82a:	6078      	str	r0, [r7, #4]
1000b82c:	6039      	str	r1, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr *rp_hdr;
	uint16_t idx;
	uint32_t len;

	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000b82e:	687b      	ldr	r3, [r7, #4]
1000b830:	617b      	str	r3, [r7, #20]
	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
1000b832:	683b      	ldr	r3, [r7, #0]
1000b834:	3b10      	subs	r3, #16
1000b836:	613b      	str	r3, [r7, #16]
	/* The reserved field contains buffer index */
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
1000b838:	693b      	ldr	r3, [r7, #16]
1000b83a:	689b      	ldr	r3, [r3, #8]
1000b83c:	81fb      	strh	r3, [r7, #14]

	metal_mutex_acquire(&rdev->lock);
1000b83e:	687b      	ldr	r3, [r7, #4]
1000b840:	3358      	adds	r3, #88	; 0x58
1000b842:	4618      	mov	r0, r3
1000b844:	f7ff fe92 	bl	1000b56c <metal_mutex_acquire>
	/* Return buffer on virtqueue. */
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
1000b848:	697b      	ldr	r3, [r7, #20]
1000b84a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1000b84c:	89fa      	ldrh	r2, [r7, #14]
1000b84e:	4611      	mov	r1, r2
1000b850:	4618      	mov	r0, r3
1000b852:	f000 fc97 	bl	1000c184 <virtqueue_get_buffer_length>
1000b856:	60b8      	str	r0, [r7, #8]
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
1000b858:	89fb      	ldrh	r3, [r7, #14]
1000b85a:	68ba      	ldr	r2, [r7, #8]
1000b85c:	6939      	ldr	r1, [r7, #16]
1000b85e:	6978      	ldr	r0, [r7, #20]
1000b860:	f7ff ff40 	bl	1000b6e4 <rpmsg_virtio_return_buffer>
	metal_mutex_release(&rdev->lock);
1000b864:	687b      	ldr	r3, [r7, #4]
1000b866:	3358      	adds	r3, #88	; 0x58
1000b868:	4618      	mov	r0, r3
1000b86a:	f7ff fe8a 	bl	1000b582 <metal_mutex_release>
}
1000b86e:	bf00      	nop
1000b870:	3718      	adds	r7, #24
1000b872:	46bd      	mov	sp, r7
1000b874:	bd80      	pop	{r7, pc}

1000b876 <rpmsg_virtio_get_tx_payload_buffer>:

static void *rpmsg_virtio_get_tx_payload_buffer(struct rpmsg_device *rdev,
						uint32_t *len, int wait)
{
1000b876:	b580      	push	{r7, lr}
1000b878:	b08a      	sub	sp, #40	; 0x28
1000b87a:	af00      	add	r7, sp, #0
1000b87c:	60f8      	str	r0, [r7, #12]
1000b87e:	60b9      	str	r1, [r7, #8]
1000b880:	607a      	str	r2, [r7, #4]
	uint16_t idx;
	int tick_count;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000b882:	68fb      	ldr	r3, [r7, #12]
1000b884:	623b      	str	r3, [r7, #32]

	/* Validate device state */
	status = rpmsg_virtio_get_status(rvdev);
1000b886:	6a38      	ldr	r0, [r7, #32]
1000b888:	f7ff fea6 	bl	1000b5d8 <rpmsg_virtio_get_status>
1000b88c:	4603      	mov	r3, r0
1000b88e:	61fb      	str	r3, [r7, #28]
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
1000b890:	69fb      	ldr	r3, [r7, #28]
1000b892:	f003 0304 	and.w	r3, r3, #4
1000b896:	2b00      	cmp	r3, #0
1000b898:	d101      	bne.n	1000b89e <rpmsg_virtio_get_tx_payload_buffer+0x28>
		return NULL;
1000b89a:	2300      	movs	r3, #0
1000b89c:	e039      	b.n	1000b912 <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	if (wait)
1000b89e:	687b      	ldr	r3, [r7, #4]
1000b8a0:	2b00      	cmp	r3, #0
1000b8a2:	d003      	beq.n	1000b8ac <rpmsg_virtio_get_tx_payload_buffer+0x36>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
1000b8a4:	f643 2398 	movw	r3, #15000	; 0x3a98
1000b8a8:	627b      	str	r3, [r7, #36]	; 0x24
1000b8aa:	e001      	b.n	1000b8b0 <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	else
		tick_count = 0;
1000b8ac:	2300      	movs	r3, #0
1000b8ae:	627b      	str	r3, [r7, #36]	; 0x24

	while (1) {
		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
1000b8b0:	68fb      	ldr	r3, [r7, #12]
1000b8b2:	3358      	adds	r3, #88	; 0x58
1000b8b4:	4618      	mov	r0, r3
1000b8b6:	f7ff fe59 	bl	1000b56c <metal_mutex_acquire>
		rp_hdr = rpmsg_virtio_get_tx_buffer(rvdev, len, &idx);
1000b8ba:	f107 0316 	add.w	r3, r7, #22
1000b8be:	461a      	mov	r2, r3
1000b8c0:	68b9      	ldr	r1, [r7, #8]
1000b8c2:	6a38      	ldr	r0, [r7, #32]
1000b8c4:	f7ff ff44 	bl	1000b750 <rpmsg_virtio_get_tx_buffer>
1000b8c8:	61b8      	str	r0, [r7, #24]
		metal_mutex_release(&rdev->lock);
1000b8ca:	68fb      	ldr	r3, [r7, #12]
1000b8cc:	3358      	adds	r3, #88	; 0x58
1000b8ce:	4618      	mov	r0, r3
1000b8d0:	f7ff fe57 	bl	1000b582 <metal_mutex_release>
		if (rp_hdr || !tick_count)
1000b8d4:	69bb      	ldr	r3, [r7, #24]
1000b8d6:	2b00      	cmp	r3, #0
1000b8d8:	d10a      	bne.n	1000b8f0 <rpmsg_virtio_get_tx_payload_buffer+0x7a>
1000b8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b8dc:	2b00      	cmp	r3, #0
1000b8de:	d007      	beq.n	1000b8f0 <rpmsg_virtio_get_tx_payload_buffer+0x7a>
			break;
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
1000b8e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1000b8e4:	f7ff fda7 	bl	1000b436 <metal_sleep_usec>
		tick_count--;
1000b8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b8ea:	3b01      	subs	r3, #1
1000b8ec:	627b      	str	r3, [r7, #36]	; 0x24
		metal_mutex_acquire(&rdev->lock);
1000b8ee:	e7df      	b.n	1000b8b0 <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	}

	if (!rp_hdr)
1000b8f0:	69bb      	ldr	r3, [r7, #24]
1000b8f2:	2b00      	cmp	r3, #0
1000b8f4:	d101      	bne.n	1000b8fa <rpmsg_virtio_get_tx_payload_buffer+0x84>
		return NULL;
1000b8f6:	2300      	movs	r3, #0
1000b8f8:	e00b      	b.n	1000b912 <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	/* Store the index into the reserved field to be used when sending */
	rp_hdr->reserved = idx;
1000b8fa:	8afb      	ldrh	r3, [r7, #22]
1000b8fc:	461a      	mov	r2, r3
1000b8fe:	69bb      	ldr	r3, [r7, #24]
1000b900:	609a      	str	r2, [r3, #8]

	/* Actual data buffer size is vring buffer size minus header length */
	*len -= sizeof(struct rpmsg_hdr);
1000b902:	68bb      	ldr	r3, [r7, #8]
1000b904:	681b      	ldr	r3, [r3, #0]
1000b906:	f1a3 0210 	sub.w	r2, r3, #16
1000b90a:	68bb      	ldr	r3, [r7, #8]
1000b90c:	601a      	str	r2, [r3, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
1000b90e:	69bb      	ldr	r3, [r7, #24]
1000b910:	3310      	adds	r3, #16
}
1000b912:	4618      	mov	r0, r3
1000b914:	3728      	adds	r7, #40	; 0x28
1000b916:	46bd      	mov	sp, r7
1000b918:	bd80      	pop	{r7, pc}
	...

1000b91c <rpmsg_virtio_send_offchannel_nocopy>:

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
1000b91c:	b580      	push	{r7, lr}
1000b91e:	b08e      	sub	sp, #56	; 0x38
1000b920:	af00      	add	r7, sp, #0
1000b922:	60f8      	str	r0, [r7, #12]
1000b924:	60b9      	str	r1, [r7, #8]
1000b926:	607a      	str	r2, [r7, #4]
1000b928:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	uint16_t idx;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000b92a:	68fb      	ldr	r3, [r7, #12]
1000b92c:	637b      	str	r3, [r7, #52]	; 0x34

	hdr = RPMSG_LOCATE_HDR(data);
1000b92e:	683b      	ldr	r3, [r7, #0]
1000b930:	3b10      	subs	r3, #16
1000b932:	633b      	str	r3, [r7, #48]	; 0x30
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
1000b934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000b936:	689b      	ldr	r3, [r3, #8]
1000b938:	85fb      	strh	r3, [r7, #46]	; 0x2e

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
1000b93a:	687b      	ldr	r3, [r7, #4]
1000b93c:	617b      	str	r3, [r7, #20]
	rp_hdr.src = src;
1000b93e:	68bb      	ldr	r3, [r7, #8]
1000b940:	613b      	str	r3, [r7, #16]
	rp_hdr.len = len;
1000b942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000b944:	b29b      	uxth	r3, r3
1000b946:	83bb      	strh	r3, [r7, #28]
	rp_hdr.reserved = 0;
1000b948:	2300      	movs	r3, #0
1000b94a:	61bb      	str	r3, [r7, #24]
	rp_hdr.flags = 0;
1000b94c:	2300      	movs	r3, #0
1000b94e:	83fb      	strh	r3, [r7, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
1000b950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000b952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
1000b956:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
1000b958:	6b39      	ldr	r1, [r7, #48]	; 0x30
1000b95a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1000b95c:	f7ff fd87 	bl	1000b46e <metal_io_virt_to_offset>
1000b960:	4601      	mov	r1, r0
1000b962:	f107 0210 	add.w	r2, r7, #16
1000b966:	2310      	movs	r3, #16
1000b968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1000b96a:	f7ff f98b 	bl	1000ac84 <metal_io_block_write>
1000b96e:	6278      	str	r0, [r7, #36]	; 0x24
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
1000b970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b972:	2b10      	cmp	r3, #16
1000b974:	d006      	beq.n	1000b984 <rpmsg_virtio_send_offchannel_nocopy+0x68>
1000b976:	4b1b      	ldr	r3, [pc, #108]	; (1000b9e4 <rpmsg_virtio_send_offchannel_nocopy+0xc8>)
1000b978:	4a1b      	ldr	r2, [pc, #108]	; (1000b9e8 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
1000b97a:	f240 117d 	movw	r1, #381	; 0x17d
1000b97e:	481b      	ldr	r0, [pc, #108]	; (1000b9ec <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
1000b980:	f002 ff96 	bl	1000e8b0 <__assert_func>

	metal_mutex_acquire(&rdev->lock);
1000b984:	68fb      	ldr	r3, [r7, #12]
1000b986:	3358      	adds	r3, #88	; 0x58
1000b988:	4618      	mov	r0, r3
1000b98a:	f7ff fdef 	bl	1000b56c <metal_mutex_acquire>
#ifndef VIRTIO_SLAVE_ONLY
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_MASTER)
		buff_len = RPMSG_BUFFER_SIZE;
	else
#endif /*!VIRTIO_SLAVE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
1000b98e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000b990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000b994:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
1000b996:	4611      	mov	r1, r2
1000b998:	4618      	mov	r0, r3
1000b99a:	f000 fbf3 	bl	1000c184 <virtqueue_get_buffer_length>
1000b99e:	6238      	str	r0, [r7, #32]

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
1000b9a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
1000b9a2:	6a3a      	ldr	r2, [r7, #32]
1000b9a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
1000b9a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
1000b9a8:	f7ff feb5 	bl	1000b716 <rpmsg_virtio_enqueue_buffer>
1000b9ac:	6278      	str	r0, [r7, #36]	; 0x24
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
1000b9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b9b0:	2b00      	cmp	r3, #0
1000b9b2:	d006      	beq.n	1000b9c2 <rpmsg_virtio_send_offchannel_nocopy+0xa6>
1000b9b4:	4b0e      	ldr	r3, [pc, #56]	; (1000b9f0 <rpmsg_virtio_send_offchannel_nocopy+0xd4>)
1000b9b6:	4a0c      	ldr	r2, [pc, #48]	; (1000b9e8 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
1000b9b8:	f44f 71c5 	mov.w	r1, #394	; 0x18a
1000b9bc:	480b      	ldr	r0, [pc, #44]	; (1000b9ec <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
1000b9be:	f002 ff77 	bl	1000e8b0 <__assert_func>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
1000b9c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000b9c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000b9c8:	4618      	mov	r0, r3
1000b9ca:	f000 fcaf 	bl	1000c32c <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
1000b9ce:	68fb      	ldr	r3, [r7, #12]
1000b9d0:	3358      	adds	r3, #88	; 0x58
1000b9d2:	4618      	mov	r0, r3
1000b9d4:	f7ff fdd5 	bl	1000b582 <metal_mutex_release>

	return len;
1000b9d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
1000b9da:	4618      	mov	r0, r3
1000b9dc:	3738      	adds	r7, #56	; 0x38
1000b9de:	46bd      	mov	sp, r7
1000b9e0:	bd80      	pop	{r7, pc}
1000b9e2:	bf00      	nop
1000b9e4:	10011c00 	.word	0x10011c00
1000b9e8:	10011d7c 	.word	0x10011d7c
1000b9ec:	10011c1c 	.word	0x10011c1c
1000b9f0:	10011ca0 	.word	0x10011ca0

1000b9f4 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
1000b9f4:	b580      	push	{r7, lr}
1000b9f6:	b08c      	sub	sp, #48	; 0x30
1000b9f8:	af02      	add	r7, sp, #8
1000b9fa:	60f8      	str	r0, [r7, #12]
1000b9fc:	60b9      	str	r1, [r7, #8]
1000b9fe:	607a      	str	r2, [r7, #4]
1000ba00:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	void *buffer;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000ba02:	68fb      	ldr	r3, [r7, #12]
1000ba04:	627b      	str	r3, [r7, #36]	; 0x24

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
1000ba06:	f107 0314 	add.w	r3, r7, #20
1000ba0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000ba0c:	4619      	mov	r1, r3
1000ba0e:	68f8      	ldr	r0, [r7, #12]
1000ba10:	f7ff ff31 	bl	1000b876 <rpmsg_virtio_get_tx_payload_buffer>
1000ba14:	6238      	str	r0, [r7, #32]
	if (!buffer)
1000ba16:	6a3b      	ldr	r3, [r7, #32]
1000ba18:	2b00      	cmp	r3, #0
1000ba1a:	d101      	bne.n	1000ba20 <rpmsg_virtio_send_offchannel_raw+0x2c>
		return RPMSG_ERR_NO_BUFF;
1000ba1c:	4b17      	ldr	r3, [pc, #92]	; (1000ba7c <rpmsg_virtio_send_offchannel_raw+0x88>)
1000ba1e:	e029      	b.n	1000ba74 <rpmsg_virtio_send_offchannel_raw+0x80>

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
1000ba20:	697b      	ldr	r3, [r7, #20]
1000ba22:	461a      	mov	r2, r3
1000ba24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000ba26:	4293      	cmp	r3, r2
1000ba28:	dd01      	ble.n	1000ba2e <rpmsg_virtio_send_offchannel_raw+0x3a>
		len = buff_len;
1000ba2a:	697b      	ldr	r3, [r7, #20]
1000ba2c:	633b      	str	r3, [r7, #48]	; 0x30
	io = rvdev->shbuf_io;
1000ba2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000ba30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
1000ba34:	61fb      	str	r3, [r7, #28]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
1000ba36:	6a39      	ldr	r1, [r7, #32]
1000ba38:	69f8      	ldr	r0, [r7, #28]
1000ba3a:	f7ff fd18 	bl	1000b46e <metal_io_virt_to_offset>
1000ba3e:	4601      	mov	r1, r0
1000ba40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000ba42:	683a      	ldr	r2, [r7, #0]
1000ba44:	69f8      	ldr	r0, [r7, #28]
1000ba46:	f7ff f91d 	bl	1000ac84 <metal_io_block_write>
1000ba4a:	61b8      	str	r0, [r7, #24]
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
1000ba4c:	69ba      	ldr	r2, [r7, #24]
1000ba4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000ba50:	429a      	cmp	r2, r3
1000ba52:	d006      	beq.n	1000ba62 <rpmsg_virtio_send_offchannel_raw+0x6e>
1000ba54:	4b0a      	ldr	r3, [pc, #40]	; (1000ba80 <rpmsg_virtio_send_offchannel_raw+0x8c>)
1000ba56:	4a0b      	ldr	r2, [pc, #44]	; (1000ba84 <rpmsg_virtio_send_offchannel_raw+0x90>)
1000ba58:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
1000ba5c:	480a      	ldr	r0, [pc, #40]	; (1000ba88 <rpmsg_virtio_send_offchannel_raw+0x94>)
1000ba5e:	f002 ff27 	bl	1000e8b0 <__assert_func>

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
1000ba62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000ba64:	9300      	str	r3, [sp, #0]
1000ba66:	6a3b      	ldr	r3, [r7, #32]
1000ba68:	687a      	ldr	r2, [r7, #4]
1000ba6a:	68b9      	ldr	r1, [r7, #8]
1000ba6c:	68f8      	ldr	r0, [r7, #12]
1000ba6e:	f7ff ff55 	bl	1000b91c <rpmsg_virtio_send_offchannel_nocopy>
1000ba72:	4603      	mov	r3, r0
}
1000ba74:	4618      	mov	r0, r3
1000ba76:	3728      	adds	r7, #40	; 0x28
1000ba78:	46bd      	mov	sp, r7
1000ba7a:	bd80      	pop	{r7, pc}
1000ba7c:	fffff82e 	.word	0xfffff82e
1000ba80:	10011cac 	.word	0x10011cac
1000ba84:	10011da0 	.word	0x10011da0
1000ba88:	10011c1c 	.word	0x10011c1c

1000ba8c <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
1000ba8c:	b480      	push	{r7}
1000ba8e:	b083      	sub	sp, #12
1000ba90:	af00      	add	r7, sp, #0
1000ba92:	6078      	str	r0, [r7, #4]
	(void)vq;
}
1000ba94:	bf00      	nop
1000ba96:	370c      	adds	r7, #12
1000ba98:	46bd      	mov	sp, r7
1000ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000ba9e:	4770      	bx	lr

1000baa0 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
1000baa0:	b590      	push	{r4, r7, lr}
1000baa2:	b08d      	sub	sp, #52	; 0x34
1000baa4:	af02      	add	r7, sp, #8
1000baa6:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
1000baa8:	687b      	ldr	r3, [r7, #4]
1000baaa:	681b      	ldr	r3, [r3, #0]
1000baac:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
1000baae:	6a3b      	ldr	r3, [r7, #32]
1000bab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000bab2:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
1000bab4:	69fb      	ldr	r3, [r7, #28]
1000bab6:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
1000bab8:	69bb      	ldr	r3, [r7, #24]
1000baba:	3358      	adds	r3, #88	; 0x58
1000babc:	4618      	mov	r0, r3
1000babe:	f7ff fd55 	bl	1000b56c <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
1000bac2:	f107 020a 	add.w	r2, r7, #10
1000bac6:	f107 030c 	add.w	r3, r7, #12
1000baca:	4619      	mov	r1, r3
1000bacc:	69f8      	ldr	r0, [r7, #28]
1000bace:	f7ff fe5c 	bl	1000b78a <rpmsg_virtio_get_rx_buffer>
1000bad2:	6278      	str	r0, [r7, #36]	; 0x24

	metal_mutex_release(&rdev->lock);
1000bad4:	69bb      	ldr	r3, [r7, #24]
1000bad6:	3358      	adds	r3, #88	; 0x58
1000bad8:	4618      	mov	r0, r3
1000bada:	f7ff fd52 	bl	1000b582 <metal_mutex_release>

	while (rp_hdr) {
1000bade:	e062      	b.n	1000bba6 <rpmsg_virtio_rx_callback+0x106>
		rp_hdr->reserved = idx;
1000bae0:	897b      	ldrh	r3, [r7, #10]
1000bae2:	461a      	mov	r2, r3
1000bae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bae6:	609a      	str	r2, [r3, #8]

		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
1000bae8:	69bb      	ldr	r3, [r7, #24]
1000baea:	3358      	adds	r3, #88	; 0x58
1000baec:	4618      	mov	r0, r3
1000baee:	f7ff fd3d 	bl	1000b56c <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
1000baf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000baf4:	685b      	ldr	r3, [r3, #4]
1000baf6:	4619      	mov	r1, r3
1000baf8:	69b8      	ldr	r0, [r7, #24]
1000bafa:	f7ff fdc9 	bl	1000b690 <rpmsg_get_ept_from_addr>
1000bafe:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
1000bb00:	69bb      	ldr	r3, [r7, #24]
1000bb02:	3358      	adds	r3, #88	; 0x58
1000bb04:	4618      	mov	r0, r3
1000bb06:	f7ff fd3c 	bl	1000b582 <metal_mutex_release>

		if (ept) {
1000bb0a:	697b      	ldr	r3, [r7, #20]
1000bb0c:	2b00      	cmp	r3, #0
1000bb0e:	d025      	beq.n	1000bb5c <rpmsg_virtio_rx_callback+0xbc>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
1000bb10:	697b      	ldr	r3, [r7, #20]
1000bb12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000bb14:	f1b3 3fff 	cmp.w	r3, #4294967295
1000bb18:	d103      	bne.n	1000bb22 <rpmsg_virtio_rx_callback+0x82>
				/*
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
1000bb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bb1c:	681a      	ldr	r2, [r3, #0]
1000bb1e:	697b      	ldr	r3, [r7, #20]
1000bb20:	629a      	str	r2, [r3, #40]	; 0x28
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
1000bb22:	697b      	ldr	r3, [r7, #20]
1000bb24:	6adc      	ldr	r4, [r3, #44]	; 0x2c
1000bb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bb28:	f103 0110 	add.w	r1, r3, #16
					 rp_hdr->len, rp_hdr->src, ept->priv);
1000bb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bb2e:	899b      	ldrh	r3, [r3, #12]
1000bb30:	b29b      	uxth	r3, r3
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
1000bb32:	4618      	mov	r0, r3
1000bb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bb36:	681a      	ldr	r2, [r3, #0]
1000bb38:	697b      	ldr	r3, [r7, #20]
1000bb3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000bb3c:	9300      	str	r3, [sp, #0]
1000bb3e:	4613      	mov	r3, r2
1000bb40:	4602      	mov	r2, r0
1000bb42:	6978      	ldr	r0, [r7, #20]
1000bb44:	47a0      	blx	r4
1000bb46:	6138      	str	r0, [r7, #16]

			RPMSG_ASSERT(status >= 0,
1000bb48:	693b      	ldr	r3, [r7, #16]
1000bb4a:	2b00      	cmp	r3, #0
1000bb4c:	da06      	bge.n	1000bb5c <rpmsg_virtio_rx_callback+0xbc>
1000bb4e:	4b1a      	ldr	r3, [pc, #104]	; (1000bbb8 <rpmsg_virtio_rx_callback+0x118>)
1000bb50:	4a1a      	ldr	r2, [pc, #104]	; (1000bbbc <rpmsg_virtio_rx_callback+0x11c>)
1000bb52:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
1000bb56:	481a      	ldr	r0, [pc, #104]	; (1000bbc0 <rpmsg_virtio_rx_callback+0x120>)
1000bb58:	f002 feaa 	bl	1000e8b0 <__assert_func>
				     "unexpected callback status\r\n");
		}

		metal_mutex_acquire(&rdev->lock);
1000bb5c:	69bb      	ldr	r3, [r7, #24]
1000bb5e:	3358      	adds	r3, #88	; 0x58
1000bb60:	4618      	mov	r0, r3
1000bb62:	f7ff fd03 	bl	1000b56c <metal_mutex_acquire>

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
1000bb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bb68:	689b      	ldr	r3, [r3, #8]
1000bb6a:	2b00      	cmp	r3, #0
1000bb6c:	db05      	blt.n	1000bb7a <rpmsg_virtio_rx_callback+0xda>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
1000bb6e:	68fa      	ldr	r2, [r7, #12]
1000bb70:	897b      	ldrh	r3, [r7, #10]
1000bb72:	6a79      	ldr	r1, [r7, #36]	; 0x24
1000bb74:	69f8      	ldr	r0, [r7, #28]
1000bb76:	f7ff fdb5 	bl	1000b6e4 <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
1000bb7a:	f107 020a 	add.w	r2, r7, #10
1000bb7e:	f107 030c 	add.w	r3, r7, #12
1000bb82:	4619      	mov	r1, r3
1000bb84:	69f8      	ldr	r0, [r7, #28]
1000bb86:	f7ff fe00 	bl	1000b78a <rpmsg_virtio_get_rx_buffer>
1000bb8a:	6278      	str	r0, [r7, #36]	; 0x24
		if (!rp_hdr) {
1000bb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bb8e:	2b00      	cmp	r3, #0
1000bb90:	d104      	bne.n	1000bb9c <rpmsg_virtio_rx_callback+0xfc>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
1000bb92:	69fb      	ldr	r3, [r7, #28]
1000bb94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1000bb96:	4618      	mov	r0, r3
1000bb98:	f000 fbc8 	bl	1000c32c <virtqueue_kick>
		}
		metal_mutex_release(&rdev->lock);
1000bb9c:	69bb      	ldr	r3, [r7, #24]
1000bb9e:	3358      	adds	r3, #88	; 0x58
1000bba0:	4618      	mov	r0, r3
1000bba2:	f7ff fcee 	bl	1000b582 <metal_mutex_release>
	while (rp_hdr) {
1000bba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bba8:	2b00      	cmp	r3, #0
1000bbaa:	d199      	bne.n	1000bae0 <rpmsg_virtio_rx_callback+0x40>
	}
}
1000bbac:	bf00      	nop
1000bbae:	bf00      	nop
1000bbb0:	372c      	adds	r7, #44	; 0x2c
1000bbb2:	46bd      	mov	sp, r7
1000bbb4:	bd90      	pop	{r4, r7, pc}
1000bbb6:	bf00      	nop
1000bbb8:	10011cbc 	.word	0x10011cbc
1000bbbc:	10011dc4 	.word	0x10011dc4
1000bbc0:	10011c1c 	.word	0x10011c1c

1000bbc4 <rpmsg_virtio_ns_callback>:
 *
 * @return - rpmag endpoint callback handled
 */
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
1000bbc4:	b580      	push	{r7, lr}
1000bbc6:	b092      	sub	sp, #72	; 0x48
1000bbc8:	af00      	add	r7, sp, #0
1000bbca:	60f8      	str	r0, [r7, #12]
1000bbcc:	60b9      	str	r1, [r7, #8]
1000bbce:	607a      	str	r2, [r7, #4]
1000bbd0:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
1000bbd2:	68fb      	ldr	r3, [r7, #12]
1000bbd4:	6a1b      	ldr	r3, [r3, #32]
1000bbd6:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
1000bbd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000bbda:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
1000bbdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000bbde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
1000bbe2:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = data;
1000bbe4:	68bb      	ldr	r3, [r7, #8]
1000bbe6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
1000bbe8:	687b      	ldr	r3, [r7, #4]
1000bbea:	2b28      	cmp	r3, #40	; 0x28
1000bbec:	d001      	beq.n	1000bbf2 <rpmsg_virtio_ns_callback+0x2e>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
1000bbee:	2300      	movs	r3, #0
1000bbf0:	e057      	b.n	1000bca2 <rpmsg_virtio_ns_callback+0xde>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
1000bbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
1000bbf4:	4619      	mov	r1, r3
1000bbf6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
1000bbf8:	f7ff fc39 	bl	1000b46e <metal_io_virt_to_offset>
1000bbfc:	4601      	mov	r1, r0
1000bbfe:	f107 0210 	add.w	r2, r7, #16
1000bc02:	2320      	movs	r3, #32
1000bc04:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
1000bc06:	f7fe ffc8 	bl	1000ab9a <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
1000bc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000bc0c:	6a1b      	ldr	r3, [r3, #32]
1000bc0e:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
1000bc10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000bc12:	3358      	adds	r3, #88	; 0x58
1000bc14:	4618      	mov	r0, r3
1000bc16:	f7ff fca9 	bl	1000b56c <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
1000bc1a:	f107 0110 	add.w	r1, r7, #16
1000bc1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000bc20:	f04f 32ff 	mov.w	r2, #4294967295
1000bc24:	6c78      	ldr	r0, [r7, #68]	; 0x44
1000bc26:	f7ff fb88 	bl	1000b33a <rpmsg_get_endpoint>
1000bc2a:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
1000bc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000bc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000bc30:	f003 0301 	and.w	r3, r3, #1
1000bc34:	2b00      	cmp	r3, #0
1000bc36:	d017      	beq.n	1000bc68 <rpmsg_virtio_ns_callback+0xa4>
		if (_ept)
1000bc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bc3a:	2b00      	cmp	r3, #0
1000bc3c:	d003      	beq.n	1000bc46 <rpmsg_virtio_ns_callback+0x82>
			_ept->dest_addr = RPMSG_ADDR_ANY;
1000bc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bc40:	f04f 32ff 	mov.w	r2, #4294967295
1000bc44:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
1000bc46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000bc48:	3358      	adds	r3, #88	; 0x58
1000bc4a:	4618      	mov	r0, r3
1000bc4c:	f7ff fc99 	bl	1000b582 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
1000bc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bc52:	2b00      	cmp	r3, #0
1000bc54:	d024      	beq.n	1000bca0 <rpmsg_virtio_ns_callback+0xdc>
1000bc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bc58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000bc5a:	2b00      	cmp	r3, #0
1000bc5c:	d020      	beq.n	1000bca0 <rpmsg_virtio_ns_callback+0xdc>
			_ept->ns_unbind_cb(_ept);
1000bc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bc60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000bc62:	6b38      	ldr	r0, [r7, #48]	; 0x30
1000bc64:	4798      	blx	r3
1000bc66:	e01b      	b.n	1000bca0 <rpmsg_virtio_ns_callback+0xdc>
	} else {
		if (!_ept) {
1000bc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bc6a:	2b00      	cmp	r3, #0
1000bc6c:	d110      	bne.n	1000bc90 <rpmsg_virtio_ns_callback+0xcc>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
1000bc6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000bc70:	3358      	adds	r3, #88	; 0x58
1000bc72:	4618      	mov	r0, r3
1000bc74:	f7ff fc85 	bl	1000b582 <metal_mutex_release>
			if (rdev->ns_bind_cb)
1000bc78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000bc7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
1000bc7c:	2b00      	cmp	r3, #0
1000bc7e:	d00f      	beq.n	1000bca0 <rpmsg_virtio_ns_callback+0xdc>
				rdev->ns_bind_cb(rdev, name, dest);
1000bc80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000bc82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
1000bc84:	f107 0110 	add.w	r1, r7, #16
1000bc88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000bc8a:	6c78      	ldr	r0, [r7, #68]	; 0x44
1000bc8c:	4798      	blx	r3
1000bc8e:	e007      	b.n	1000bca0 <rpmsg_virtio_ns_callback+0xdc>
		} else {
			_ept->dest_addr = dest;
1000bc90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bc92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000bc94:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
1000bc96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000bc98:	3358      	adds	r3, #88	; 0x58
1000bc9a:	4618      	mov	r0, r3
1000bc9c:	f7ff fc71 	bl	1000b582 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
1000bca0:	2300      	movs	r3, #0
}
1000bca2:	4618      	mov	r0, r3
1000bca4:	3748      	adds	r7, #72	; 0x48
1000bca6:	46bd      	mov	sp, r7
1000bca8:	bd80      	pop	{r7, pc}
	...

1000bcac <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
1000bcac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
1000bcb0:	b090      	sub	sp, #64	; 0x40
1000bcb2:	af02      	add	r7, sp, #8
1000bcb4:	60f8      	str	r0, [r7, #12]
1000bcb6:	60b9      	str	r1, [r7, #8]
1000bcb8:	607a      	str	r2, [r7, #4]
1000bcba:	603b      	str	r3, [r7, #0]
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
1000bcbc:	68fb      	ldr	r3, [r7, #12]
1000bcbe:	633b      	str	r3, [r7, #48]	; 0x30
	memset(rdev, 0, sizeof(*rdev));
1000bcc0:	2278      	movs	r2, #120	; 0x78
1000bcc2:	2100      	movs	r1, #0
1000bcc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
1000bcc6:	f003 fc9a 	bl	1000f5fe <memset>
	metal_mutex_init(&rdev->lock);
1000bcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bccc:	3358      	adds	r3, #88	; 0x58
1000bcce:	4618      	mov	r0, r3
1000bcd0:	f7ff fc41 	bl	1000b556 <metal_mutex_init>
	rvdev->vdev = vdev;
1000bcd4:	68fb      	ldr	r3, [r7, #12]
1000bcd6:	68ba      	ldr	r2, [r7, #8]
1000bcd8:	679a      	str	r2, [r3, #120]	; 0x78
	rdev->ns_bind_cb = ns_bind_cb;
1000bcda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bcdc:	687a      	ldr	r2, [r7, #4]
1000bcde:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
1000bce0:	68bb      	ldr	r3, [r7, #8]
1000bce2:	68fa      	ldr	r2, [r7, #12]
1000bce4:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
1000bce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bce8:	4a4d      	ldr	r2, [pc, #308]	; (1000be20 <rpmsg_init_vdev+0x174>)
1000bcea:	661a      	str	r2, [r3, #96]	; 0x60
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
1000bcec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bcee:	4a4d      	ldr	r2, [pc, #308]	; (1000be24 <rpmsg_init_vdev+0x178>)
1000bcf0:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
1000bcf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bcf4:	4a4c      	ldr	r2, [pc, #304]	; (1000be28 <rpmsg_init_vdev+0x17c>)
1000bcf6:	669a      	str	r2, [r3, #104]	; 0x68
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
1000bcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bcfa:	4a4c      	ldr	r2, [pc, #304]	; (1000be2c <rpmsg_init_vdev+0x180>)
1000bcfc:	66da      	str	r2, [r3, #108]	; 0x6c
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
1000bcfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bd00:	4a4b      	ldr	r2, [pc, #300]	; (1000be30 <rpmsg_init_vdev+0x184>)
1000bd02:	671a      	str	r2, [r3, #112]	; 0x70
	role = rpmsg_virtio_get_role(rvdev);
1000bd04:	68f8      	ldr	r0, [r7, #12]
1000bd06:	f7ff fc47 	bl	1000b598 <rpmsg_virtio_get_role>
1000bd0a:	62f8      	str	r0, [r7, #44]	; 0x2c

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000bd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000bd0e:	2b01      	cmp	r3, #1
1000bd10:	d102      	bne.n	1000bd18 <rpmsg_init_vdev+0x6c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
1000bd12:	68f8      	ldr	r0, [r7, #12]
1000bd14:	f7ff fd55 	bl	1000b7c2 <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
1000bd18:	68f8      	ldr	r0, [r7, #12]
1000bd1a:	f7ff fc6e 	bl	1000b5fa <rpmsg_virtio_get_features>
1000bd1e:	4603      	mov	r3, r0
1000bd20:	2200      	movs	r2, #0
1000bd22:	4698      	mov	r8, r3
1000bd24:	4691      	mov	r9, r2
1000bd26:	68bb      	ldr	r3, [r7, #8]
1000bd28:	e9c3 8904 	strd	r8, r9, [r3, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
1000bd2c:	68bb      	ldr	r3, [r7, #8]
1000bd2e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
1000bd32:	f002 0401 	and.w	r4, r2, #1
1000bd36:	2500      	movs	r5, #0
1000bd38:	ea44 0305 	orr.w	r3, r4, r5
1000bd3c:	2b00      	cmp	r3, #0
1000bd3e:	bf14      	ite	ne
1000bd40:	2301      	movne	r3, #1
1000bd42:	2300      	moveq	r3, #0
1000bd44:	b2da      	uxtb	r2, r3
1000bd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bd48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
1000bd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000bd4e:	2b01      	cmp	r3, #1
1000bd50:	d113      	bne.n	1000bd7a <rpmsg_init_vdev+0xce>
		vq_names[0] = "tx_vq";
1000bd52:	4b38      	ldr	r3, [pc, #224]	; (1000be34 <rpmsg_init_vdev+0x188>)
1000bd54:	61fb      	str	r3, [r7, #28]
		vq_names[1] = "rx_vq";
1000bd56:	4b38      	ldr	r3, [pc, #224]	; (1000be38 <rpmsg_init_vdev+0x18c>)
1000bd58:	623b      	str	r3, [r7, #32]
		callback[0] = rpmsg_virtio_tx_callback;
1000bd5a:	4b38      	ldr	r3, [pc, #224]	; (1000be3c <rpmsg_init_vdev+0x190>)
1000bd5c:	617b      	str	r3, [r7, #20]
		callback[1] = rpmsg_virtio_rx_callback;
1000bd5e:	4b38      	ldr	r3, [pc, #224]	; (1000be40 <rpmsg_init_vdev+0x194>)
1000bd60:	61bb      	str	r3, [r7, #24]
		rvdev->rvq  = vdev->vrings_info[1].vq;
1000bd62:	68bb      	ldr	r3, [r7, #8]
1000bd64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000bd66:	3318      	adds	r3, #24
1000bd68:	681a      	ldr	r2, [r3, #0]
1000bd6a:	68fb      	ldr	r3, [r7, #12]
1000bd6c:	67da      	str	r2, [r3, #124]	; 0x7c
		rvdev->svq  = vdev->vrings_info[0].vq;
1000bd6e:	68bb      	ldr	r3, [r7, #8]
1000bd70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000bd72:	681a      	ldr	r2, [r3, #0]
1000bd74:	68fb      	ldr	r3, [r7, #12]
1000bd76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
1000bd7a:	68fb      	ldr	r3, [r7, #12]
1000bd7c:	683a      	ldr	r2, [r7, #0]
1000bd7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
1000bd82:	f107 021c 	add.w	r2, r7, #28
1000bd86:	f107 0314 	add.w	r3, r7, #20
1000bd8a:	9300      	str	r3, [sp, #0]
1000bd8c:	4613      	mov	r3, r2
1000bd8e:	2202      	movs	r2, #2
1000bd90:	2100      	movs	r1, #0
1000bd92:	68f8      	ldr	r0, [r7, #12]
1000bd94:	f7ff fc42 	bl	1000b61c <rpmsg_virtio_create_virtqueues>
1000bd98:	62b8      	str	r0, [r7, #40]	; 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
1000bd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000bd9c:	2b00      	cmp	r3, #0
1000bd9e:	d001      	beq.n	1000bda4 <rpmsg_init_vdev+0xf8>
		return status;
1000bda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000bda2:	e037      	b.n	1000be14 <rpmsg_init_vdev+0x168>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
1000bda4:	68fb      	ldr	r3, [r7, #12]
1000bda6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000bdaa:	4618      	mov	r0, r3
1000bdac:	f000 fa86 	bl	1000c2bc <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
1000bdb0:	2300      	movs	r3, #0
1000bdb2:	637b      	str	r3, [r7, #52]	; 0x34
1000bdb4:	e00f      	b.n	1000bdd6 <rpmsg_init_vdev+0x12a>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
1000bdb6:	68bb      	ldr	r3, [r7, #8]
1000bdb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1000bdba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000bdbc:	4613      	mov	r3, r2
1000bdbe:	005b      	lsls	r3, r3, #1
1000bdc0:	4413      	add	r3, r2
1000bdc2:	00db      	lsls	r3, r3, #3
1000bdc4:	440b      	add	r3, r1
1000bdc6:	681b      	ldr	r3, [r3, #0]
1000bdc8:	627b      	str	r3, [r7, #36]	; 0x24
		vq->shm_io = shm_io;
1000bdca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bdcc:	683a      	ldr	r2, [r7, #0]
1000bdce:	629a      	str	r2, [r3, #40]	; 0x28
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
1000bdd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000bdd2:	3301      	adds	r3, #1
1000bdd4:	637b      	str	r3, [r7, #52]	; 0x34
1000bdd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000bdd8:	2b01      	cmp	r3, #1
1000bdda:	d9ec      	bls.n	1000bdb6 <rpmsg_init_vdev+0x10a>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
1000bddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bdde:	4618      	mov	r0, r3
1000bde0:	f7ff fb35 	bl	1000b44e <metal_list_init>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
1000bde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bde6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
1000bdea:	2b00      	cmp	r3, #0
1000bdec:	d011      	beq.n	1000be12 <rpmsg_init_vdev+0x166>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
1000bdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bdf0:	f103 0008 	add.w	r0, r3, #8
1000bdf4:	2300      	movs	r3, #0
1000bdf6:	9301      	str	r3, [sp, #4]
1000bdf8:	4b12      	ldr	r3, [pc, #72]	; (1000be44 <rpmsg_init_vdev+0x198>)
1000bdfa:	9300      	str	r3, [sp, #0]
1000bdfc:	2335      	movs	r3, #53	; 0x35
1000bdfe:	2235      	movs	r2, #53	; 0x35
1000be00:	4911      	ldr	r1, [pc, #68]	; (1000be48 <rpmsg_init_vdev+0x19c>)
1000be02:	f7ff fc21 	bl	1000b648 <rpmsg_initialize_ept>
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
1000be06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000be08:	3308      	adds	r3, #8
1000be0a:	4619      	mov	r1, r3
1000be0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
1000be0e:	f7ff faf4 	bl	1000b3fa <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
1000be12:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
1000be14:	4618      	mov	r0, r3
1000be16:	3738      	adds	r7, #56	; 0x38
1000be18:	46bd      	mov	sp, r7
1000be1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
1000be1e:	bf00      	nop
1000be20:	1000b9f5 	.word	0x1000b9f5
1000be24:	1000b7fd 	.word	0x1000b7fd
1000be28:	1000b825 	.word	0x1000b825
1000be2c:	1000b877 	.word	0x1000b877
1000be30:	1000b91d 	.word	0x1000b91d
1000be34:	10011cc8 	.word	0x10011cc8
1000be38:	10011cd0 	.word	0x10011cd0
1000be3c:	1000ba8d 	.word	0x1000ba8d
1000be40:	1000baa1 	.word	0x1000baa1
1000be44:	1000bbc5 	.word	0x1000bbc5
1000be48:	10011cd8 	.word	0x10011cd8

1000be4c <metal_machine_cache_flush>:

	/* Add implementation here */
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
1000be4c:	b480      	push	{r7}
1000be4e:	b083      	sub	sp, #12
1000be50:	af00      	add	r7, sp, #0
1000be52:	6078      	str	r0, [r7, #4]
1000be54:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
1000be56:	bf00      	nop
1000be58:	370c      	adds	r7, #12
1000be5a:	46bd      	mov	sp, r7
1000be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
1000be60:	4770      	bx	lr

1000be62 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
1000be62:	b480      	push	{r7}
1000be64:	b083      	sub	sp, #12
1000be66:	af00      	add	r7, sp, #0
1000be68:	6078      	str	r0, [r7, #4]
1000be6a:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
1000be6c:	bf00      	nop
1000be6e:	370c      	adds	r7, #12
1000be70:	46bd      	mov	sp, r7
1000be72:	f85d 7b04 	ldr.w	r7, [sp], #4
1000be76:	4770      	bx	lr

1000be78 <metal_machine_io_mem_map>:
	/* Add implementation here */
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
1000be78:	b480      	push	{r7}
1000be7a:	b085      	sub	sp, #20
1000be7c:	af00      	add	r7, sp, #0
1000be7e:	60f8      	str	r0, [r7, #12]
1000be80:	60b9      	str	r1, [r7, #8]
1000be82:	607a      	str	r2, [r7, #4]
1000be84:	603b      	str	r3, [r7, #0]
	metal_unused(size);
	metal_unused(flags);

	/* Add implementation here */

	return va;
1000be86:	68fb      	ldr	r3, [r7, #12]
}
1000be88:	4618      	mov	r0, r3
1000be8a:	3714      	adds	r7, #20
1000be8c:	46bd      	mov	sp, r7
1000be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
1000be92:	4770      	bx	lr

1000be94 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
1000be94:	b590      	push	{r4, r7, lr}
1000be96:	b08f      	sub	sp, #60	; 0x3c
1000be98:	af04      	add	r7, sp, #16
1000be9a:	60f8      	str	r0, [r7, #12]
1000be9c:	60b9      	str	r1, [r7, #8]
1000be9e:	607a      	str	r2, [r7, #4]
1000bea0:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
1000bea2:	68fb      	ldr	r3, [r7, #12]
1000bea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000bea6:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
1000bea8:	687a      	ldr	r2, [r7, #4]
1000beaa:	6a3b      	ldr	r3, [r7, #32]
1000beac:	429a      	cmp	r2, r3
1000beae:	d901      	bls.n	1000beb4 <virtio_create_virtqueues+0x20>
		return ERROR_VQUEUE_INVLD_PARAM;
1000beb0:	4b1e      	ldr	r3, [pc, #120]	; (1000bf2c <virtio_create_virtqueues+0x98>)
1000beb2:	e036      	b.n	1000bf22 <virtio_create_virtqueues+0x8e>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
1000beb4:	2300      	movs	r3, #0
1000beb6:	627b      	str	r3, [r7, #36]	; 0x24
1000beb8:	e02e      	b.n	1000bf18 <virtio_create_virtqueues+0x84>
		vring_info = &vdev->vrings_info[i];
1000beba:	68fb      	ldr	r3, [r7, #12]
1000bebc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1000bebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000bec0:	4613      	mov	r3, r2
1000bec2:	005b      	lsls	r3, r3, #1
1000bec4:	4413      	add	r3, r2
1000bec6:	00db      	lsls	r3, r3, #3
1000bec8:	440b      	add	r3, r1
1000beca:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
1000becc:	69fb      	ldr	r3, [r7, #28]
1000bece:	3304      	adds	r3, #4
1000bed0:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
1000bed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bed4:	b298      	uxth	r0, r3
1000bed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bed8:	009b      	lsls	r3, r3, #2
1000beda:	683a      	ldr	r2, [r7, #0]
1000bedc:	4413      	add	r3, r2
1000bede:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
1000bee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bee2:	009b      	lsls	r3, r3, #2
1000bee4:	6bba      	ldr	r2, [r7, #56]	; 0x38
1000bee6:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
1000bee8:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
1000beea:	68fa      	ldr	r2, [r7, #12]
1000beec:	6a12      	ldr	r2, [r2, #32]
1000beee:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
1000bef0:	69f9      	ldr	r1, [r7, #28]
1000bef2:	6809      	ldr	r1, [r1, #0]
1000bef4:	9102      	str	r1, [sp, #8]
1000bef6:	9201      	str	r2, [sp, #4]
1000bef8:	9300      	str	r3, [sp, #0]
1000befa:	69bb      	ldr	r3, [r7, #24]
1000befc:	4622      	mov	r2, r4
1000befe:	4601      	mov	r1, r0
1000bf00:	68f8      	ldr	r0, [r7, #12]
1000bf02:	f000 f90e 	bl	1000c122 <virtqueue_create>
1000bf06:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
1000bf08:	697b      	ldr	r3, [r7, #20]
1000bf0a:	2b00      	cmp	r3, #0
1000bf0c:	d001      	beq.n	1000bf12 <virtio_create_virtqueues+0x7e>
			return ret;
1000bf0e:	697b      	ldr	r3, [r7, #20]
1000bf10:	e007      	b.n	1000bf22 <virtio_create_virtqueues+0x8e>
	for (i = 0; i < nvqs; i++) {
1000bf12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bf14:	3301      	adds	r3, #1
1000bf16:	627b      	str	r3, [r7, #36]	; 0x24
1000bf18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000bf1a:	687b      	ldr	r3, [r7, #4]
1000bf1c:	429a      	cmp	r2, r3
1000bf1e:	d3cc      	bcc.n	1000beba <virtio_create_virtqueues+0x26>
	}
	return 0;
1000bf20:	2300      	movs	r3, #0
}
1000bf22:	4618      	mov	r0, r3
1000bf24:	372c      	adds	r7, #44	; 0x2c
1000bf26:	46bd      	mov	sp, r7
1000bf28:	bd90      	pop	{r4, r7, pc}
1000bf2a:	bf00      	nop
1000bf2c:	fffff440 	.word	0xfffff440

1000bf30 <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
1000bf30:	b480      	push	{r7}
1000bf32:	b085      	sub	sp, #20
1000bf34:	af00      	add	r7, sp, #0
1000bf36:	60f8      	str	r0, [r7, #12]
1000bf38:	60b9      	str	r1, [r7, #8]
1000bf3a:	607a      	str	r2, [r7, #4]
1000bf3c:	603b      	str	r3, [r7, #0]
	vr->num = num;
1000bf3e:	68fb      	ldr	r3, [r7, #12]
1000bf40:	68ba      	ldr	r2, [r7, #8]
1000bf42:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
1000bf44:	68fb      	ldr	r3, [r7, #12]
1000bf46:	687a      	ldr	r2, [r7, #4]
1000bf48:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
1000bf4a:	68bb      	ldr	r3, [r7, #8]
1000bf4c:	011b      	lsls	r3, r3, #4
1000bf4e:	687a      	ldr	r2, [r7, #4]
1000bf50:	441a      	add	r2, r3
1000bf52:	68fb      	ldr	r3, [r7, #12]
1000bf54:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
1000bf56:	68fb      	ldr	r3, [r7, #12]
1000bf58:	689a      	ldr	r2, [r3, #8]
1000bf5a:	68bb      	ldr	r3, [r7, #8]
1000bf5c:	005b      	lsls	r3, r3, #1
1000bf5e:	4413      	add	r3, r2
1000bf60:	3304      	adds	r3, #4
1000bf62:	461a      	mov	r2, r3
1000bf64:	683b      	ldr	r3, [r7, #0]
1000bf66:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
1000bf68:	1c5a      	adds	r2, r3, #1
1000bf6a:	683b      	ldr	r3, [r7, #0]
1000bf6c:	425b      	negs	r3, r3
1000bf6e:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
1000bf70:	461a      	mov	r2, r3
1000bf72:	68fb      	ldr	r3, [r7, #12]
1000bf74:	60da      	str	r2, [r3, #12]
}
1000bf76:	bf00      	nop
1000bf78:	3714      	adds	r7, #20
1000bf7a:	46bd      	mov	sp, r7
1000bf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bf80:	4770      	bx	lr

1000bf82 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
1000bf82:	b480      	push	{r7}
1000bf84:	b083      	sub	sp, #12
1000bf86:	af00      	add	r7, sp, #0
1000bf88:	4603      	mov	r3, r0
1000bf8a:	80fb      	strh	r3, [r7, #6]
1000bf8c:	460b      	mov	r3, r1
1000bf8e:	80bb      	strh	r3, [r7, #4]
1000bf90:	4613      	mov	r3, r2
1000bf92:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
1000bf94:	88ba      	ldrh	r2, [r7, #4]
1000bf96:	88fb      	ldrh	r3, [r7, #6]
1000bf98:	1ad3      	subs	r3, r2, r3
1000bf9a:	b29b      	uxth	r3, r3
1000bf9c:	3b01      	subs	r3, #1
1000bf9e:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
1000bfa0:	88b9      	ldrh	r1, [r7, #4]
1000bfa2:	887b      	ldrh	r3, [r7, #2]
1000bfa4:	1acb      	subs	r3, r1, r3
1000bfa6:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
1000bfa8:	429a      	cmp	r2, r3
1000bfaa:	bf34      	ite	cc
1000bfac:	2301      	movcc	r3, #1
1000bfae:	2300      	movcs	r3, #0
1000bfb0:	b2db      	uxtb	r3, r3
}
1000bfb2:	4618      	mov	r0, r3
1000bfb4:	370c      	adds	r7, #12
1000bfb6:	46bd      	mov	sp, r7
1000bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bfbc:	4770      	bx	lr

1000bfbe <metal_io_virt>:
{
1000bfbe:	b480      	push	{r7}
1000bfc0:	b083      	sub	sp, #12
1000bfc2:	af00      	add	r7, sp, #0
1000bfc4:	6078      	str	r0, [r7, #4]
1000bfc6:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
1000bfc8:	687b      	ldr	r3, [r7, #4]
1000bfca:	681b      	ldr	r3, [r3, #0]
		: NULL);
1000bfcc:	f1b3 3fff 	cmp.w	r3, #4294967295
1000bfd0:	d00a      	beq.n	1000bfe8 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
1000bfd2:	687b      	ldr	r3, [r7, #4]
1000bfd4:	689b      	ldr	r3, [r3, #8]
1000bfd6:	683a      	ldr	r2, [r7, #0]
1000bfd8:	429a      	cmp	r2, r3
1000bfda:	d205      	bcs.n	1000bfe8 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
1000bfdc:	687b      	ldr	r3, [r7, #4]
1000bfde:	681b      	ldr	r3, [r3, #0]
1000bfe0:	461a      	mov	r2, r3
1000bfe2:	683b      	ldr	r3, [r7, #0]
1000bfe4:	4413      	add	r3, r2
		: NULL);
1000bfe6:	e000      	b.n	1000bfea <metal_io_virt+0x2c>
1000bfe8:	2300      	movs	r3, #0
}
1000bfea:	4618      	mov	r0, r3
1000bfec:	370c      	adds	r7, #12
1000bfee:	46bd      	mov	sp, r7
1000bff0:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bff4:	4770      	bx	lr

1000bff6 <metal_io_phys>:
{
1000bff6:	b580      	push	{r7, lr}
1000bff8:	b084      	sub	sp, #16
1000bffa:	af00      	add	r7, sp, #0
1000bffc:	6078      	str	r0, [r7, #4]
1000bffe:	6039      	str	r1, [r7, #0]
	if (!io->ops.offset_to_phys) {
1000c000:	687b      	ldr	r3, [r7, #4]
1000c002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000c004:	2b00      	cmp	r3, #0
1000c006:	d123      	bne.n	1000c050 <metal_io_phys+0x5a>
		unsigned long page = (io->page_shift >=
1000c008:	687b      	ldr	r3, [r7, #4]
1000c00a:	68db      	ldr	r3, [r3, #12]
				     0 : offset >> io->page_shift);
1000c00c:	2b1f      	cmp	r3, #31
1000c00e:	d805      	bhi.n	1000c01c <metal_io_phys+0x26>
1000c010:	687b      	ldr	r3, [r7, #4]
1000c012:	68db      	ldr	r3, [r3, #12]
1000c014:	683a      	ldr	r2, [r7, #0]
1000c016:	fa22 f303 	lsr.w	r3, r2, r3
1000c01a:	e000      	b.n	1000c01e <metal_io_phys+0x28>
1000c01c:	2300      	movs	r3, #0
		unsigned long page = (io->page_shift >=
1000c01e:	60fb      	str	r3, [r7, #12]
		return (io->physmap && offset < io->size
1000c020:	687b      	ldr	r3, [r7, #4]
1000c022:	685b      	ldr	r3, [r3, #4]
			: METAL_BAD_PHYS);
1000c024:	2b00      	cmp	r3, #0
1000c026:	d010      	beq.n	1000c04a <metal_io_phys+0x54>
		return (io->physmap && offset < io->size
1000c028:	687b      	ldr	r3, [r7, #4]
1000c02a:	689b      	ldr	r3, [r3, #8]
1000c02c:	683a      	ldr	r2, [r7, #0]
1000c02e:	429a      	cmp	r2, r3
1000c030:	d20b      	bcs.n	1000c04a <metal_io_phys+0x54>
			? io->physmap[page] + (offset & io->page_mask)
1000c032:	687b      	ldr	r3, [r7, #4]
1000c034:	685a      	ldr	r2, [r3, #4]
1000c036:	68fb      	ldr	r3, [r7, #12]
1000c038:	009b      	lsls	r3, r3, #2
1000c03a:	4413      	add	r3, r2
1000c03c:	681a      	ldr	r2, [r3, #0]
1000c03e:	687b      	ldr	r3, [r7, #4]
1000c040:	6919      	ldr	r1, [r3, #16]
1000c042:	683b      	ldr	r3, [r7, #0]
1000c044:	400b      	ands	r3, r1
			: METAL_BAD_PHYS);
1000c046:	4413      	add	r3, r2
1000c048:	e008      	b.n	1000c05c <metal_io_phys+0x66>
1000c04a:	f04f 33ff 	mov.w	r3, #4294967295
1000c04e:	e005      	b.n	1000c05c <metal_io_phys+0x66>
	return io->ops.offset_to_phys(io, offset);
1000c050:	687b      	ldr	r3, [r7, #4]
1000c052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000c054:	6839      	ldr	r1, [r7, #0]
1000c056:	6878      	ldr	r0, [r7, #4]
1000c058:	4798      	blx	r3
1000c05a:	4603      	mov	r3, r0
}
1000c05c:	4618      	mov	r0, r3
1000c05e:	3710      	adds	r7, #16
1000c060:	46bd      	mov	sp, r7
1000c062:	bd80      	pop	{r7, pc}

1000c064 <metal_io_phys_to_offset>:
{
1000c064:	b580      	push	{r7, lr}
1000c066:	b084      	sub	sp, #16
1000c068:	af00      	add	r7, sp, #0
1000c06a:	6078      	str	r0, [r7, #4]
1000c06c:	6039      	str	r1, [r7, #0]
	if (!io->ops.phys_to_offset) {
1000c06e:	687b      	ldr	r3, [r7, #4]
1000c070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000c072:	2b00      	cmp	r3, #0
1000c074:	d127      	bne.n	1000c0c6 <metal_io_phys_to_offset+0x62>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
1000c076:	687b      	ldr	r3, [r7, #4]
1000c078:	691b      	ldr	r3, [r3, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
1000c07a:	f1b3 3fff 	cmp.w	r3, #4294967295
1000c07e:	d105      	bne.n	1000c08c <metal_io_phys_to_offset+0x28>
1000c080:	687b      	ldr	r3, [r7, #4]
1000c082:	685b      	ldr	r3, [r3, #4]
1000c084:	681b      	ldr	r3, [r3, #0]
1000c086:	683a      	ldr	r2, [r7, #0]
1000c088:	1ad3      	subs	r3, r2, r3
1000c08a:	e003      	b.n	1000c094 <metal_io_phys_to_offset+0x30>
1000c08c:	687b      	ldr	r3, [r7, #4]
1000c08e:	691a      	ldr	r2, [r3, #16]
1000c090:	683b      	ldr	r3, [r7, #0]
1000c092:	4013      	ands	r3, r2
		unsigned long offset =
1000c094:	60fb      	str	r3, [r7, #12]
			if (metal_io_phys(io, offset) == phys)
1000c096:	68f9      	ldr	r1, [r7, #12]
1000c098:	6878      	ldr	r0, [r7, #4]
1000c09a:	f7ff ffac 	bl	1000bff6 <metal_io_phys>
1000c09e:	4602      	mov	r2, r0
1000c0a0:	683b      	ldr	r3, [r7, #0]
1000c0a2:	4293      	cmp	r3, r2
1000c0a4:	d101      	bne.n	1000c0aa <metal_io_phys_to_offset+0x46>
				return offset;
1000c0a6:	68fb      	ldr	r3, [r7, #12]
1000c0a8:	e013      	b.n	1000c0d2 <metal_io_phys_to_offset+0x6e>
			offset += io->page_mask + 1;
1000c0aa:	687b      	ldr	r3, [r7, #4]
1000c0ac:	691a      	ldr	r2, [r3, #16]
1000c0ae:	68fb      	ldr	r3, [r7, #12]
1000c0b0:	4413      	add	r3, r2
1000c0b2:	3301      	adds	r3, #1
1000c0b4:	60fb      	str	r3, [r7, #12]
		} while (offset < io->size);
1000c0b6:	687b      	ldr	r3, [r7, #4]
1000c0b8:	689b      	ldr	r3, [r3, #8]
1000c0ba:	68fa      	ldr	r2, [r7, #12]
1000c0bc:	429a      	cmp	r2, r3
1000c0be:	d3ea      	bcc.n	1000c096 <metal_io_phys_to_offset+0x32>
		return METAL_BAD_OFFSET;
1000c0c0:	f04f 33ff 	mov.w	r3, #4294967295
1000c0c4:	e005      	b.n	1000c0d2 <metal_io_phys_to_offset+0x6e>
	return (*io->ops.phys_to_offset)(io, phys);
1000c0c6:	687b      	ldr	r3, [r7, #4]
1000c0c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000c0ca:	6839      	ldr	r1, [r7, #0]
1000c0cc:	6878      	ldr	r0, [r7, #4]
1000c0ce:	4798      	blx	r3
1000c0d0:	4603      	mov	r3, r0
}
1000c0d2:	4618      	mov	r0, r3
1000c0d4:	3710      	adds	r7, #16
1000c0d6:	46bd      	mov	sp, r7
1000c0d8:	bd80      	pop	{r7, pc}

1000c0da <metal_io_phys_to_virt>:
{
1000c0da:	b580      	push	{r7, lr}
1000c0dc:	b082      	sub	sp, #8
1000c0de:	af00      	add	r7, sp, #0
1000c0e0:	6078      	str	r0, [r7, #4]
1000c0e2:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
1000c0e4:	6839      	ldr	r1, [r7, #0]
1000c0e6:	6878      	ldr	r0, [r7, #4]
1000c0e8:	f7ff ffbc 	bl	1000c064 <metal_io_phys_to_offset>
1000c0ec:	4603      	mov	r3, r0
1000c0ee:	4619      	mov	r1, r3
1000c0f0:	6878      	ldr	r0, [r7, #4]
1000c0f2:	f7ff ff64 	bl	1000bfbe <metal_io_virt>
1000c0f6:	4603      	mov	r3, r0
}
1000c0f8:	4618      	mov	r0, r3
1000c0fa:	3708      	adds	r7, #8
1000c0fc:	46bd      	mov	sp, r7
1000c0fe:	bd80      	pop	{r7, pc}

1000c100 <virtqueue_phys_to_virt>:
#endif /* VIRTIO_CACHED_VRINGS */

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
1000c100:	b580      	push	{r7, lr}
1000c102:	b084      	sub	sp, #16
1000c104:	af00      	add	r7, sp, #0
1000c106:	6078      	str	r0, [r7, #4]
1000c108:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
1000c10a:	687b      	ldr	r3, [r7, #4]
1000c10c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000c10e:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
1000c110:	6839      	ldr	r1, [r7, #0]
1000c112:	68f8      	ldr	r0, [r7, #12]
1000c114:	f7ff ffe1 	bl	1000c0da <metal_io_phys_to_virt>
1000c118:	4603      	mov	r3, r0
}
1000c11a:	4618      	mov	r0, r3
1000c11c:	3710      	adds	r7, #16
1000c11e:	46bd      	mov	sp, r7
1000c120:	bd80      	pop	{r7, pc}

1000c122 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
1000c122:	b580      	push	{r7, lr}
1000c124:	b086      	sub	sp, #24
1000c126:	af00      	add	r7, sp, #0
1000c128:	60f8      	str	r0, [r7, #12]
1000c12a:	607a      	str	r2, [r7, #4]
1000c12c:	603b      	str	r3, [r7, #0]
1000c12e:	460b      	mov	r3, r1
1000c130:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
1000c132:	2300      	movs	r3, #0
1000c134:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
1000c136:	697b      	ldr	r3, [r7, #20]
1000c138:	2b00      	cmp	r3, #0
1000c13a:	d11e      	bne.n	1000c17a <virtqueue_create+0x58>
		vq->vq_dev = virt_dev;
1000c13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c13e:	68fa      	ldr	r2, [r7, #12]
1000c140:	601a      	str	r2, [r3, #0]
		vq->vq_name = name;
1000c142:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c144:	687a      	ldr	r2, [r7, #4]
1000c146:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
1000c148:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c14a:	897a      	ldrh	r2, [r7, #10]
1000c14c:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
1000c14e:	683b      	ldr	r3, [r7, #0]
1000c150:	891a      	ldrh	r2, [r3, #8]
1000c152:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c154:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
1000c156:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c158:	895a      	ldrh	r2, [r3, #10]
1000c15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c15c:	849a      	strh	r2, [r3, #36]	; 0x24
		vq->callback = callback;
1000c15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c160:	6a3a      	ldr	r2, [r7, #32]
1000c162:	60da      	str	r2, [r3, #12]
		vq->notify = notify;
1000c164:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000c168:	611a      	str	r2, [r3, #16]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, ring->vaddr, ring->align);
1000c16a:	683b      	ldr	r3, [r7, #0]
1000c16c:	6819      	ldr	r1, [r3, #0]
1000c16e:	683b      	ldr	r3, [r7, #0]
1000c170:	685b      	ldr	r3, [r3, #4]
1000c172:	461a      	mov	r2, r3
1000c174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1000c176:	f000 f8ef 	bl	1000c358 <vq_ring_init>
	/*
	 * CACHE: nothing to be done here. Only desc.next is setup at this
	 * stage but that is only written by master, so no need to flush it.
	 */

	return status;
1000c17a:	697b      	ldr	r3, [r7, #20]
}
1000c17c:	4618      	mov	r0, r3
1000c17e:	3718      	adds	r7, #24
1000c180:	46bd      	mov	sp, r7
1000c182:	bd80      	pop	{r7, pc}

1000c184 <virtqueue_get_buffer_length>:

	return cookie;
}

uint32_t virtqueue_get_buffer_length(struct virtqueue *vq, uint16_t idx)
{
1000c184:	b480      	push	{r7}
1000c186:	b083      	sub	sp, #12
1000c188:	af00      	add	r7, sp, #0
1000c18a:	6078      	str	r0, [r7, #4]
1000c18c:	460b      	mov	r3, r1
1000c18e:	807b      	strh	r3, [r7, #2]
	VRING_INVALIDATE(vq->vq_ring.desc[idx].len);
	return vq->vq_ring.desc[idx].len;
1000c190:	687b      	ldr	r3, [r7, #4]
1000c192:	699a      	ldr	r2, [r3, #24]
1000c194:	887b      	ldrh	r3, [r7, #2]
1000c196:	011b      	lsls	r3, r3, #4
1000c198:	4413      	add	r3, r2
1000c19a:	689b      	ldr	r3, [r3, #8]
}
1000c19c:	4618      	mov	r0, r3
1000c19e:	370c      	adds	r7, #12
1000c1a0:	46bd      	mov	sp, r7
1000c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c1a6:	4770      	bx	lr

1000c1a8 <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
1000c1a8:	b580      	push	{r7, lr}
1000c1aa:	b086      	sub	sp, #24
1000c1ac:	af00      	add	r7, sp, #0
1000c1ae:	60f8      	str	r0, [r7, #12]
1000c1b0:	60b9      	str	r1, [r7, #8]
1000c1b2:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
1000c1b4:	2300      	movs	r3, #0
1000c1b6:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
1000c1b8:	f3bf 8f5b 	dmb	ish

	/* Avail.idx is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->idx);
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
1000c1bc:	68fb      	ldr	r3, [r7, #12]
1000c1be:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
1000c1c0:	68fb      	ldr	r3, [r7, #12]
1000c1c2:	69db      	ldr	r3, [r3, #28]
1000c1c4:	885b      	ldrh	r3, [r3, #2]
1000c1c6:	b29b      	uxth	r3, r3
1000c1c8:	429a      	cmp	r2, r3
1000c1ca:	d101      	bne.n	1000c1d0 <virtqueue_get_available_buffer+0x28>
		return NULL;
1000c1cc:	2300      	movs	r3, #0
1000c1ce:	e02f      	b.n	1000c230 <virtqueue_get_available_buffer+0x88>
	VQUEUE_BUSY(vq);

	/* Avail.ring is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->ring[head_idx]);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
1000c1d0:	68fb      	ldr	r3, [r7, #12]
1000c1d2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
1000c1d4:	1c5a      	adds	r2, r3, #1
1000c1d6:	b291      	uxth	r1, r2
1000c1d8:	68fa      	ldr	r2, [r7, #12]
1000c1da:	8611      	strh	r1, [r2, #48]	; 0x30
1000c1dc:	b21a      	sxth	r2, r3
1000c1de:	68fb      	ldr	r3, [r7, #12]
1000c1e0:	895b      	ldrh	r3, [r3, #10]
1000c1e2:	3b01      	subs	r3, #1
1000c1e4:	b29b      	uxth	r3, r3
1000c1e6:	b21b      	sxth	r3, r3
1000c1e8:	4013      	ands	r3, r2
1000c1ea:	b21b      	sxth	r3, r3
1000c1ec:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
1000c1ee:	68fb      	ldr	r3, [r7, #12]
1000c1f0:	69da      	ldr	r2, [r3, #28]
1000c1f2:	8afb      	ldrh	r3, [r7, #22]
1000c1f4:	005b      	lsls	r3, r3, #1
1000c1f6:	4413      	add	r3, r2
1000c1f8:	889b      	ldrh	r3, [r3, #4]
1000c1fa:	b29a      	uxth	r2, r3
1000c1fc:	68bb      	ldr	r3, [r7, #8]
1000c1fe:	801a      	strh	r2, [r3, #0]

	/* Invalidate the desc entry written by master before accessing it */
	VRING_INVALIDATE(vq->vq_ring.desc[*avail_idx]);
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
1000c200:	68fb      	ldr	r3, [r7, #12]
1000c202:	699a      	ldr	r2, [r3, #24]
1000c204:	68bb      	ldr	r3, [r7, #8]
1000c206:	881b      	ldrh	r3, [r3, #0]
1000c208:	011b      	lsls	r3, r3, #4
1000c20a:	18d1      	adds	r1, r2, r3
1000c20c:	680a      	ldr	r2, [r1, #0]
1000c20e:	684b      	ldr	r3, [r1, #4]
1000c210:	4613      	mov	r3, r2
1000c212:	4619      	mov	r1, r3
1000c214:	68f8      	ldr	r0, [r7, #12]
1000c216:	f7ff ff73 	bl	1000c100 <virtqueue_phys_to_virt>
1000c21a:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
1000c21c:	68fb      	ldr	r3, [r7, #12]
1000c21e:	699a      	ldr	r2, [r3, #24]
1000c220:	68bb      	ldr	r3, [r7, #8]
1000c222:	881b      	ldrh	r3, [r3, #0]
1000c224:	011b      	lsls	r3, r3, #4
1000c226:	4413      	add	r3, r2
1000c228:	689a      	ldr	r2, [r3, #8]
1000c22a:	687b      	ldr	r3, [r7, #4]
1000c22c:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
1000c22e:	693b      	ldr	r3, [r7, #16]
}
1000c230:	4618      	mov	r0, r3
1000c232:	3718      	adds	r7, #24
1000c234:	46bd      	mov	sp, r7
1000c236:	bd80      	pop	{r7, pc}

1000c238 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
1000c238:	b480      	push	{r7}
1000c23a:	b087      	sub	sp, #28
1000c23c:	af00      	add	r7, sp, #0
1000c23e:	60f8      	str	r0, [r7, #12]
1000c240:	460b      	mov	r3, r1
1000c242:	607a      	str	r2, [r7, #4]
1000c244:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
1000c246:	2300      	movs	r3, #0
1000c248:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
1000c24a:	68fb      	ldr	r3, [r7, #12]
1000c24c:	895b      	ldrh	r3, [r3, #10]
1000c24e:	897a      	ldrh	r2, [r7, #10]
1000c250:	429a      	cmp	r2, r3
1000c252:	d901      	bls.n	1000c258 <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
1000c254:	4b18      	ldr	r3, [pc, #96]	; (1000c2b8 <virtqueue_add_consumed_buffer+0x80>)
1000c256:	e029      	b.n	1000c2ac <virtqueue_add_consumed_buffer+0x74>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by master, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
1000c258:	68fb      	ldr	r3, [r7, #12]
1000c25a:	6a1b      	ldr	r3, [r3, #32]
1000c25c:	885b      	ldrh	r3, [r3, #2]
1000c25e:	b29b      	uxth	r3, r3
1000c260:	b21a      	sxth	r2, r3
1000c262:	68fb      	ldr	r3, [r7, #12]
1000c264:	895b      	ldrh	r3, [r3, #10]
1000c266:	3b01      	subs	r3, #1
1000c268:	b29b      	uxth	r3, r3
1000c26a:	b21b      	sxth	r3, r3
1000c26c:	4013      	ands	r3, r2
1000c26e:	b21b      	sxth	r3, r3
1000c270:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
1000c272:	68fb      	ldr	r3, [r7, #12]
1000c274:	6a1a      	ldr	r2, [r3, #32]
1000c276:	8a7b      	ldrh	r3, [r7, #18]
1000c278:	00db      	lsls	r3, r3, #3
1000c27a:	4413      	add	r3, r2
1000c27c:	3304      	adds	r3, #4
1000c27e:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
1000c280:	897a      	ldrh	r2, [r7, #10]
1000c282:	697b      	ldr	r3, [r7, #20]
1000c284:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
1000c286:	697b      	ldr	r3, [r7, #20]
1000c288:	687a      	ldr	r2, [r7, #4]
1000c28a:	605a      	str	r2, [r3, #4]

	/* We still need to flush it because this is read by master */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
1000c28c:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
1000c290:	68fb      	ldr	r3, [r7, #12]
1000c292:	6a1b      	ldr	r3, [r3, #32]
1000c294:	885a      	ldrh	r2, [r3, #2]
1000c296:	b292      	uxth	r2, r2
1000c298:	3201      	adds	r2, #1
1000c29a:	b292      	uxth	r2, r2
1000c29c:	805a      	strh	r2, [r3, #2]

	/* Used.idx is read by master, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
1000c29e:	68fb      	ldr	r3, [r7, #12]
1000c2a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
1000c2a2:	3301      	adds	r3, #1
1000c2a4:	b29a      	uxth	r2, r3
1000c2a6:	68fb      	ldr	r3, [r7, #12]
1000c2a8:	84da      	strh	r2, [r3, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
1000c2aa:	2300      	movs	r3, #0
}
1000c2ac:	4618      	mov	r0, r3
1000c2ae:	371c      	adds	r7, #28
1000c2b0:	46bd      	mov	sp, r7
1000c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c2b6:	4770      	bx	lr
1000c2b8:	fffff441 	.word	0xfffff441

1000c2bc <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
1000c2bc:	b480      	push	{r7}
1000c2be:	b083      	sub	sp, #12
1000c2c0:	af00      	add	r7, sp, #0
1000c2c2:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
1000c2c4:	6879      	ldr	r1, [r7, #4]
1000c2c6:	6809      	ldr	r1, [r1, #0]
1000c2c8:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
1000c2cc:	f000 5200 	and.w	r2, r0, #536870912	; 0x20000000
1000c2d0:	2300      	movs	r3, #0
1000c2d2:	4313      	orrs	r3, r2
1000c2d4:	d015      	beq.n	1000c302 <virtqueue_disable_cb+0x46>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
			VRING_FLUSH(vring_used_event(&vq->vq_ring));
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000c2d6:	687b      	ldr	r3, [r7, #4]
1000c2d8:	681b      	ldr	r3, [r3, #0]
1000c2da:	699b      	ldr	r3, [r3, #24]
1000c2dc:	2b01      	cmp	r3, #1
1000c2de:	d11f      	bne.n	1000c320 <virtqueue_disable_cb+0x64>
			vring_avail_event(&vq->vq_ring) =
			    vq->vq_available_idx - vq->vq_nentries - 1;
1000c2e0:	687b      	ldr	r3, [r7, #4]
1000c2e2:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
1000c2e4:	687b      	ldr	r3, [r7, #4]
1000c2e6:	895b      	ldrh	r3, [r3, #10]
1000c2e8:	1ad3      	subs	r3, r2, r3
1000c2ea:	b299      	uxth	r1, r3
			vring_avail_event(&vq->vq_ring) =
1000c2ec:	687b      	ldr	r3, [r7, #4]
1000c2ee:	6a1a      	ldr	r2, [r3, #32]
1000c2f0:	687b      	ldr	r3, [r7, #4]
1000c2f2:	695b      	ldr	r3, [r3, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
1000c2f4:	3901      	subs	r1, #1
1000c2f6:	b289      	uxth	r1, r1
			vring_avail_event(&vq->vq_ring) =
1000c2f8:	00db      	lsls	r3, r3, #3
1000c2fa:	4413      	add	r3, r2
1000c2fc:	460a      	mov	r2, r1
1000c2fe:	809a      	strh	r2, [r3, #4]
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	VQUEUE_IDLE(vq);
}
1000c300:	e00e      	b.n	1000c320 <virtqueue_disable_cb+0x64>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000c302:	687b      	ldr	r3, [r7, #4]
1000c304:	681b      	ldr	r3, [r3, #0]
1000c306:	699b      	ldr	r3, [r3, #24]
1000c308:	2b01      	cmp	r3, #1
1000c30a:	d109      	bne.n	1000c320 <virtqueue_disable_cb+0x64>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
1000c30c:	687b      	ldr	r3, [r7, #4]
1000c30e:	6a1b      	ldr	r3, [r3, #32]
1000c310:	881b      	ldrh	r3, [r3, #0]
1000c312:	b29a      	uxth	r2, r3
1000c314:	687b      	ldr	r3, [r7, #4]
1000c316:	6a1b      	ldr	r3, [r3, #32]
1000c318:	f042 0201 	orr.w	r2, r2, #1
1000c31c:	b292      	uxth	r2, r2
1000c31e:	801a      	strh	r2, [r3, #0]
}
1000c320:	bf00      	nop
1000c322:	370c      	adds	r7, #12
1000c324:	46bd      	mov	sp, r7
1000c326:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c32a:	4770      	bx	lr

1000c32c <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
1000c32c:	b580      	push	{r7, lr}
1000c32e:	b082      	sub	sp, #8
1000c330:	af00      	add	r7, sp, #0
1000c332:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
1000c334:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify(vq))
1000c338:	6878      	ldr	r0, [r7, #4]
1000c33a:	f000 f823 	bl	1000c384 <vq_ring_must_notify>
1000c33e:	4603      	mov	r3, r0
1000c340:	2b00      	cmp	r3, #0
1000c342:	d002      	beq.n	1000c34a <virtqueue_kick+0x1e>
		vq_ring_notify(vq);
1000c344:	6878      	ldr	r0, [r7, #4]
1000c346:	f000 f86b 	bl	1000c420 <vq_ring_notify>

	vq->vq_queued_cnt = 0;
1000c34a:	687b      	ldr	r3, [r7, #4]
1000c34c:	2200      	movs	r2, #0
1000c34e:	84da      	strh	r2, [r3, #38]	; 0x26

	VQUEUE_IDLE(vq);
}
1000c350:	bf00      	nop
1000c352:	3708      	adds	r7, #8
1000c354:	46bd      	mov	sp, r7
1000c356:	bd80      	pop	{r7, pc}

1000c358 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
1000c358:	b580      	push	{r7, lr}
1000c35a:	b086      	sub	sp, #24
1000c35c:	af00      	add	r7, sp, #0
1000c35e:	60f8      	str	r0, [r7, #12]
1000c360:	60b9      	str	r1, [r7, #8]
1000c362:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int size;

	size = vq->vq_nentries;
1000c364:	68fb      	ldr	r3, [r7, #12]
1000c366:	895b      	ldrh	r3, [r3, #10]
1000c368:	617b      	str	r3, [r7, #20]
	vr = &vq->vq_ring;
1000c36a:	68fb      	ldr	r3, [r7, #12]
1000c36c:	3314      	adds	r3, #20
1000c36e:	613b      	str	r3, [r7, #16]

	vring_init(vr, size, ring_mem, alignment);
1000c370:	6979      	ldr	r1, [r7, #20]
1000c372:	687b      	ldr	r3, [r7, #4]
1000c374:	68ba      	ldr	r2, [r7, #8]
1000c376:	6938      	ldr	r0, [r7, #16]
1000c378:	f7ff fdda 	bl	1000bf30 <vring_init>
		for (i = 0; i < size - 1; i++)
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
	}
#endif /*VIRTIO_SLAVE_ONLY*/
}
1000c37c:	bf00      	nop
1000c37e:	3718      	adds	r7, #24
1000c380:	46bd      	mov	sp, r7
1000c382:	bd80      	pop	{r7, pc}

1000c384 <vq_ring_must_notify>:
 *
 * vq_ring_must_notify
 *
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
1000c384:	b580      	push	{r7, lr}
1000c386:	b084      	sub	sp, #16
1000c388:	af00      	add	r7, sp, #0
1000c38a:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
1000c38c:	6879      	ldr	r1, [r7, #4]
1000c38e:	6809      	ldr	r1, [r1, #0]
1000c390:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
1000c394:	f000 5200 	and.w	r2, r0, #536870912	; 0x20000000
1000c398:	2300      	movs	r3, #0
1000c39a:	4313      	orrs	r3, r2
1000c39c:	d02a      	beq.n	1000c3f4 <vq_ring_must_notify+0x70>
			return vring_need_event(event_idx, new_idx,
						prev_idx) != 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000c39e:	687b      	ldr	r3, [r7, #4]
1000c3a0:	681b      	ldr	r3, [r3, #0]
1000c3a2:	699b      	ldr	r3, [r3, #24]
1000c3a4:	2b01      	cmp	r3, #1
1000c3a6:	d136      	bne.n	1000c416 <vq_ring_must_notify+0x92>
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
1000c3a8:	687b      	ldr	r3, [r7, #4]
1000c3aa:	6a1b      	ldr	r3, [r3, #32]
1000c3ac:	789a      	ldrb	r2, [r3, #2]
1000c3ae:	78db      	ldrb	r3, [r3, #3]
1000c3b0:	021b      	lsls	r3, r3, #8
1000c3b2:	4313      	orrs	r3, r2
1000c3b4:	81fb      	strh	r3, [r7, #14]
			prev_idx = new_idx - vq->vq_queued_cnt;
1000c3b6:	687b      	ldr	r3, [r7, #4]
1000c3b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
1000c3ba:	89fa      	ldrh	r2, [r7, #14]
1000c3bc:	1ad3      	subs	r3, r2, r3
1000c3be:	81bb      	strh	r3, [r7, #12]
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
1000c3c0:	687b      	ldr	r3, [r7, #4]
1000c3c2:	69da      	ldr	r2, [r3, #28]
1000c3c4:	687b      	ldr	r3, [r7, #4]
1000c3c6:	6959      	ldr	r1, [r3, #20]
1000c3c8:	004b      	lsls	r3, r1, #1
1000c3ca:	4413      	add	r3, r2
1000c3cc:	7918      	ldrb	r0, [r3, #4]
1000c3ce:	004b      	lsls	r3, r1, #1
1000c3d0:	4413      	add	r3, r2
1000c3d2:	795b      	ldrb	r3, [r3, #5]
1000c3d4:	021b      	lsls	r3, r3, #8
1000c3d6:	4303      	orrs	r3, r0
1000c3d8:	817b      	strh	r3, [r7, #10]
			return vring_need_event(event_idx, new_idx,
1000c3da:	89ba      	ldrh	r2, [r7, #12]
1000c3dc:	89f9      	ldrh	r1, [r7, #14]
1000c3de:	897b      	ldrh	r3, [r7, #10]
1000c3e0:	4618      	mov	r0, r3
1000c3e2:	f7ff fdce 	bl	1000bf82 <vring_need_event>
1000c3e6:	4603      	mov	r3, r0
						prev_idx) != 0;
1000c3e8:	2b00      	cmp	r3, #0
1000c3ea:	bf14      	ite	ne
1000c3ec:	2301      	movne	r3, #1
1000c3ee:	2300      	moveq	r3, #0
1000c3f0:	b2db      	uxtb	r3, r3
1000c3f2:	e011      	b.n	1000c418 <vq_ring_must_notify+0x94>
			return (vq->vq_ring.used->flags &
				VRING_USED_F_NO_NOTIFY) == 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000c3f4:	687b      	ldr	r3, [r7, #4]
1000c3f6:	681b      	ldr	r3, [r3, #0]
1000c3f8:	699b      	ldr	r3, [r3, #24]
1000c3fa:	2b01      	cmp	r3, #1
1000c3fc:	d10b      	bne.n	1000c416 <vq_ring_must_notify+0x92>
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
1000c3fe:	687b      	ldr	r3, [r7, #4]
1000c400:	69db      	ldr	r3, [r3, #28]
1000c402:	881b      	ldrh	r3, [r3, #0]
1000c404:	b29b      	uxth	r3, r3
1000c406:	f003 0301 	and.w	r3, r3, #1
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
1000c40a:	2b00      	cmp	r3, #0
1000c40c:	bf0c      	ite	eq
1000c40e:	2301      	moveq	r3, #1
1000c410:	2300      	movne	r3, #0
1000c412:	b2db      	uxtb	r3, r3
1000c414:	e000      	b.n	1000c418 <vq_ring_must_notify+0x94>
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	return 0;
1000c416:	2300      	movs	r3, #0
}
1000c418:	4618      	mov	r0, r3
1000c41a:	3710      	adds	r7, #16
1000c41c:	46bd      	mov	sp, r7
1000c41e:	bd80      	pop	{r7, pc}

1000c420 <vq_ring_notify>:
 *
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
1000c420:	b580      	push	{r7, lr}
1000c422:	b082      	sub	sp, #8
1000c424:	af00      	add	r7, sp, #0
1000c426:	6078      	str	r0, [r7, #4]
	if (vq->notify)
1000c428:	687b      	ldr	r3, [r7, #4]
1000c42a:	691b      	ldr	r3, [r3, #16]
1000c42c:	2b00      	cmp	r3, #0
1000c42e:	d003      	beq.n	1000c438 <vq_ring_notify+0x18>
		vq->notify(vq);
1000c430:	687b      	ldr	r3, [r7, #4]
1000c432:	691b      	ldr	r3, [r3, #16]
1000c434:	6878      	ldr	r0, [r7, #4]
1000c436:	4798      	blx	r3
}
1000c438:	bf00      	nop
1000c43a:	3708      	adds	r7, #8
1000c43c:	46bd      	mov	sp, r7
1000c43e:	bd80      	pop	{r7, pc}

1000c440 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
1000c440:	b580      	push	{r7, lr}
1000c442:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN PRE_MAILBOX_INIT */

   /* USER CODE END  PRE_MAILBOX_INIT */

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_1, IPCC_CHANNEL_DIR_RX,
1000c444:	4b0d      	ldr	r3, [pc, #52]	; (1000c47c <MAILBOX_Init+0x3c>)
1000c446:	2201      	movs	r2, #1
1000c448:	2100      	movs	r1, #0
1000c44a:	480d      	ldr	r0, [pc, #52]	; (1000c480 <MAILBOX_Init+0x40>)
1000c44c:	f7f7 f812 	bl	10003474 <HAL_IPCC_ActivateNotification>
1000c450:	4603      	mov	r3, r0
1000c452:	2b00      	cmp	r3, #0
1000c454:	d002      	beq.n	1000c45c <MAILBOX_Init+0x1c>
          IPCC_channel1_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_1 RX fail\n", __func__);
    return -1;
1000c456:	f04f 33ff 	mov.w	r3, #4294967295
1000c45a:	e00c      	b.n	1000c476 <MAILBOX_Init+0x36>
  }

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_2, IPCC_CHANNEL_DIR_RX,
1000c45c:	4b09      	ldr	r3, [pc, #36]	; (1000c484 <MAILBOX_Init+0x44>)
1000c45e:	2201      	movs	r2, #1
1000c460:	2101      	movs	r1, #1
1000c462:	4807      	ldr	r0, [pc, #28]	; (1000c480 <MAILBOX_Init+0x40>)
1000c464:	f7f7 f806 	bl	10003474 <HAL_IPCC_ActivateNotification>
1000c468:	4603      	mov	r3, r0
1000c46a:	2b00      	cmp	r3, #0
1000c46c:	d002      	beq.n	1000c474 <MAILBOX_Init+0x34>
          IPCC_channel2_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_2 RX fail\n", __func__);
    return -1;
1000c46e:	f04f 33ff 	mov.w	r3, #4294967295
1000c472:	e000      	b.n	1000c476 <MAILBOX_Init+0x36>
  }

  /* USER CODE BEGIN POST_MAILBOX_INIT */

  /* USER CODE END  POST_MAILBOX_INIT */
  return 0;
1000c474:	2300      	movs	r3, #0
}
1000c476:	4618      	mov	r0, r3
1000c478:	bd80      	pop	{r7, pc}
1000c47a:	bf00      	nop
1000c47c:	1000c4ed 	.word	0x1000c4ed
1000c480:	10020dbc 	.word	0x10020dbc
1000c484:	1000c519 	.word	0x1000c519

1000c488 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
1000c488:	b580      	push	{r7, lr}
1000c48a:	b084      	sub	sp, #16
1000c48c:	af00      	add	r7, sp, #0
1000c48e:	6078      	str	r0, [r7, #4]
1000c490:	6039      	str	r1, [r7, #0]
   /* USER CODE BEGIN PRE_MAILBOX_NOTIFY */

   /* USER CODE END  PRE_MAILBOX_NOTIFY */

  /* Called after virtqueue processing: time to inform the remote */
  if (id == VRING0_ID) {
1000c492:	683b      	ldr	r3, [r7, #0]
1000c494:	2b00      	cmp	r3, #0
1000c496:	d102      	bne.n	1000c49e <MAILBOX_Notify+0x16>
    channel = IPCC_CHANNEL_1;
1000c498:	2300      	movs	r3, #0
1000c49a:	60fb      	str	r3, [r7, #12]
1000c49c:	e008      	b.n	1000c4b0 <MAILBOX_Notify+0x28>
    OPENAMP_log_dbg("Send msg on ch_1\r\n");
  }
  else if (id == VRING1_ID) {
1000c49e:	683b      	ldr	r3, [r7, #0]
1000c4a0:	2b01      	cmp	r3, #1
1000c4a2:	d102      	bne.n	1000c4aa <MAILBOX_Notify+0x22>
    /* Note: the OpenAMP framework never notifies this */
    channel = IPCC_CHANNEL_2;
1000c4a4:	2301      	movs	r3, #1
1000c4a6:	60fb      	str	r3, [r7, #12]
1000c4a8:	e002      	b.n	1000c4b0 <MAILBOX_Notify+0x28>
    OPENAMP_log_dbg("Send 'buff free' on ch_2\r\n");
  }
  else {
    OPENAMP_log_err("invalid vring (%d)\r\n", (int)id);
    return -1;
1000c4aa:	f04f 33ff 	mov.w	r3, #4294967295
1000c4ae:	e016      	b.n	1000c4de <MAILBOX_Notify+0x56>
  }

  /* Check that the channel is free (otherwise wait until it is) */
  if (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED) {
1000c4b0:	2200      	movs	r2, #0
1000c4b2:	68f9      	ldr	r1, [r7, #12]
1000c4b4:	480c      	ldr	r0, [pc, #48]	; (1000c4e8 <MAILBOX_Notify+0x60>)
1000c4b6:	f7f7 f82b 	bl	10003510 <HAL_IPCC_GetChannelStatus>
1000c4ba:	4603      	mov	r3, r0
1000c4bc:	2b01      	cmp	r3, #1
1000c4be:	d108      	bne.n	1000c4d2 <MAILBOX_Notify+0x4a>
    OPENAMP_log_dbg("Waiting for channel to be freed\r\n");
    while (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED)
1000c4c0:	bf00      	nop
1000c4c2:	2200      	movs	r2, #0
1000c4c4:	68f9      	ldr	r1, [r7, #12]
1000c4c6:	4808      	ldr	r0, [pc, #32]	; (1000c4e8 <MAILBOX_Notify+0x60>)
1000c4c8:	f7f7 f822 	bl	10003510 <HAL_IPCC_GetChannelStatus>
1000c4cc:	4603      	mov	r3, r0
1000c4ce:	2b01      	cmp	r3, #1
1000c4d0:	d0f7      	beq.n	1000c4c2 <MAILBOX_Notify+0x3a>
      ;
  }

  /* Inform A7 (either new message, or buf free) */
  HAL_IPCC_NotifyCPU(&hipcc, channel, IPCC_CHANNEL_DIR_TX);
1000c4d2:	2200      	movs	r2, #0
1000c4d4:	68f9      	ldr	r1, [r7, #12]
1000c4d6:	4804      	ldr	r0, [pc, #16]	; (1000c4e8 <MAILBOX_Notify+0x60>)
1000c4d8:	f7f7 f84e 	bl	10003578 <HAL_IPCC_NotifyCPU>

 /* USER CODE BEGIN POST_MAILBOX_NOTIFY */

 /* USER CODE END  POST_MAILBOX_NOTIFY */

  return 0;
1000c4dc:	2300      	movs	r3, #0
}
1000c4de:	4618      	mov	r0, r3
1000c4e0:	3710      	adds	r7, #16
1000c4e2:	46bd      	mov	sp, r7
1000c4e4:	bd80      	pop	{r7, pc}
1000c4e6:	bf00      	nop
1000c4e8:	10020dbc 	.word	0x10020dbc

1000c4ec <IPCC_channel1_callback>:

/* USER CODE END 0 */
/* Callback from IPCC Interrupt Handler: Master Processor informs that there are some free buffers */
void IPCC_channel1_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
1000c4ec:	b580      	push	{r7, lr}
1000c4ee:	b084      	sub	sp, #16
1000c4f0:	af00      	add	r7, sp, #0
1000c4f2:	60f8      	str	r0, [r7, #12]
1000c4f4:	60b9      	str	r1, [r7, #8]
1000c4f6:	4613      	mov	r3, r2
1000c4f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL1_CALLBACK */

  if (msg_received_ch1 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel1_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch1);

  msg_received_ch1 = MBOX_BUF_FREE;
1000c4fa:	4b06      	ldr	r3, [pc, #24]	; (1000c514 <IPCC_channel1_callback+0x28>)
1000c4fc:	2202      	movs	r2, #2
1000c4fe:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the 'buff free' msg */
  OPENAMP_log_dbg("Ack 'buff free' message on ch1\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
1000c500:	2201      	movs	r2, #1
1000c502:	68b9      	ldr	r1, [r7, #8]
1000c504:	68f8      	ldr	r0, [r7, #12]
1000c506:	f7f7 f837 	bl	10003578 <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL1_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL1_CALLBACK */
}
1000c50a:	bf00      	nop
1000c50c:	3710      	adds	r7, #16
1000c50e:	46bd      	mov	sp, r7
1000c510:	bd80      	pop	{r7, pc}
1000c512:	bf00      	nop
1000c514:	10021ee8 	.word	0x10021ee8

1000c518 <IPCC_channel2_callback>:

/* Callback from IPCC Interrupt Handler: new message received from Master Processor */
void IPCC_channel2_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
1000c518:	b580      	push	{r7, lr}
1000c51a:	b084      	sub	sp, #16
1000c51c:	af00      	add	r7, sp, #0
1000c51e:	60f8      	str	r0, [r7, #12]
1000c520:	60b9      	str	r1, [r7, #8]
1000c522:	4613      	mov	r3, r2
1000c524:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL2_CALLBACK */

  if (msg_received_ch2 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel2_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch2);

  msg_received_ch2 = MBOX_NEW_MSG;
1000c526:	4b06      	ldr	r3, [pc, #24]	; (1000c540 <IPCC_channel2_callback+0x28>)
1000c528:	2201      	movs	r2, #1
1000c52a:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the new msg */
  OPENAMP_log_dbg("Ack new message on ch2\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
1000c52c:	2201      	movs	r2, #1
1000c52e:	68b9      	ldr	r1, [r7, #8]
1000c530:	68f8      	ldr	r0, [r7, #12]
1000c532:	f7f7 f821 	bl	10003578 <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL2_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL2_CALLBACK */
}
1000c536:	bf00      	nop
1000c538:	3710      	adds	r7, #16
1000c53a:	46bd      	mov	sp, r7
1000c53c:	bd80      	pop	{r7, pc}
1000c53e:	bf00      	nop
1000c540:	10021eec 	.word	0x10021eec

1000c544 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
1000c544:	b480      	push	{r7}
1000c546:	b083      	sub	sp, #12
1000c548:	af00      	add	r7, sp, #0
1000c54a:	6078      	str	r0, [r7, #4]
1000c54c:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
1000c54e:	687b      	ldr	r3, [r7, #4]
1000c550:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
1000c552:	683a      	ldr	r2, [r7, #0]
1000c554:	429a      	cmp	r2, r3
1000c556:	d209      	bcs.n	1000c56c <metal_device_io_region+0x28>
1000c558:	683a      	ldr	r2, [r7, #0]
1000c55a:	4613      	mov	r3, r2
1000c55c:	00db      	lsls	r3, r3, #3
1000c55e:	1a9b      	subs	r3, r3, r2
1000c560:	00db      	lsls	r3, r3, #3
1000c562:	3308      	adds	r3, #8
1000c564:	687a      	ldr	r2, [r7, #4]
1000c566:	4413      	add	r3, r2
1000c568:	3304      	adds	r3, #4
1000c56a:	e000      	b.n	1000c56e <metal_device_io_region+0x2a>
1000c56c:	2300      	movs	r3, #0
}
1000c56e:	4618      	mov	r0, r3
1000c570:	370c      	adds	r7, #12
1000c572:	46bd      	mov	sp, r7
1000c574:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c578:	4770      	bx	lr
	...

1000c57c <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
1000c57c:	b590      	push	{r4, r7, lr}
1000c57e:	b08d      	sub	sp, #52	; 0x34
1000c580:	af04      	add	r7, sp, #16
1000c582:	6078      	str	r0, [r7, #4]
  int status = 0;
1000c584:	2300      	movs	r3, #0
1000c586:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
1000c588:	2300      	movs	r3, #0
1000c58a:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
1000c58c:	4a41      	ldr	r2, [pc, #260]	; (1000c694 <OPENAMP_shmem_init+0x118>)
1000c58e:	f107 0310 	add.w	r3, r7, #16
1000c592:	e892 0003 	ldmia.w	r2, {r0, r1}
1000c596:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
1000c59a:	2300      	movs	r3, #0
1000c59c:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
1000c59e:	2300      	movs	r3, #0
1000c5a0:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
1000c5a2:	f107 0310 	add.w	r3, r7, #16
1000c5a6:	4618      	mov	r0, r3
1000c5a8:	f7fe fa5c 	bl	1000aa64 <metal_init>

  status = metal_register_generic_device(&shm_device);
1000c5ac:	483a      	ldr	r0, [pc, #232]	; (1000c698 <OPENAMP_shmem_init+0x11c>)
1000c5ae:	f7fe f903 	bl	1000a7b8 <metal_register_generic_device>
1000c5b2:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
1000c5b4:	69fb      	ldr	r3, [r7, #28]
1000c5b6:	2b00      	cmp	r3, #0
1000c5b8:	d001      	beq.n	1000c5be <OPENAMP_shmem_init+0x42>
    return status;
1000c5ba:	69fb      	ldr	r3, [r7, #28]
1000c5bc:	e066      	b.n	1000c68c <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
1000c5be:	f107 0318 	add.w	r3, r7, #24
1000c5c2:	461a      	mov	r2, r3
1000c5c4:	4935      	ldr	r1, [pc, #212]	; (1000c69c <OPENAMP_shmem_init+0x120>)
1000c5c6:	4836      	ldr	r0, [pc, #216]	; (1000c6a0 <OPENAMP_shmem_init+0x124>)
1000c5c8:	f7fe f8b8 	bl	1000a73c <metal_device_open>
1000c5cc:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
1000c5ce:	69fb      	ldr	r3, [r7, #28]
1000c5d0:	2b00      	cmp	r3, #0
1000c5d2:	d001      	beq.n	1000c5d8 <OPENAMP_shmem_init+0x5c>
    return status;
1000c5d4:	69fb      	ldr	r3, [r7, #28]
1000c5d6:	e059      	b.n	1000c68c <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
1000c5d8:	4a32      	ldr	r2, [pc, #200]	; (1000c6a4 <OPENAMP_shmem_init+0x128>)
1000c5da:	4b33      	ldr	r3, [pc, #204]	; (1000c6a8 <OPENAMP_shmem_init+0x12c>)
1000c5dc:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
1000c5de:	69bb      	ldr	r3, [r7, #24]
1000c5e0:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, (unsigned int)-1, 0, NULL);
1000c5e4:	4a31      	ldr	r2, [pc, #196]	; (1000c6ac <OPENAMP_shmem_init+0x130>)
1000c5e6:	4b2f      	ldr	r3, [pc, #188]	; (1000c6a4 <OPENAMP_shmem_init+0x128>)
1000c5e8:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
1000c5ea:	461a      	mov	r2, r3
1000c5ec:	2300      	movs	r3, #0
1000c5ee:	9302      	str	r3, [sp, #8]
1000c5f0:	2300      	movs	r3, #0
1000c5f2:	9301      	str	r3, [sp, #4]
1000c5f4:	f04f 33ff 	mov.w	r3, #4294967295
1000c5f8:	9300      	str	r3, [sp, #0]
1000c5fa:	4613      	mov	r3, r2
1000c5fc:	4a2a      	ldr	r2, [pc, #168]	; (1000c6a8 <OPENAMP_shmem_init+0x12c>)
1000c5fe:	4929      	ldr	r1, [pc, #164]	; (1000c6a4 <OPENAMP_shmem_init+0x128>)
1000c600:	f7fe fa7e 	bl	1000ab00 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
1000c604:	69bb      	ldr	r3, [r7, #24]
1000c606:	2100      	movs	r1, #0
1000c608:	4618      	mov	r0, r3
1000c60a:	f7ff ff9b 	bl	1000c544 <metal_device_io_region>
1000c60e:	4603      	mov	r3, r0
1000c610:	4a27      	ldr	r2, [pc, #156]	; (1000c6b0 <OPENAMP_shmem_init+0x134>)
1000c612:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
1000c614:	4b26      	ldr	r3, [pc, #152]	; (1000c6b0 <OPENAMP_shmem_init+0x134>)
1000c616:	681b      	ldr	r3, [r3, #0]
1000c618:	2b00      	cmp	r3, #0
1000c61a:	d102      	bne.n	1000c622 <OPENAMP_shmem_init+0xa6>
    return -1;
1000c61c:	f04f 33ff 	mov.w	r3, #4294967295
1000c620:	e034      	b.n	1000c68c <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
1000c622:	f107 0208 	add.w	r2, r7, #8
1000c626:	f107 030c 	add.w	r3, r7, #12
1000c62a:	4619      	mov	r1, r3
1000c62c:	6878      	ldr	r0, [r7, #4]
1000c62e:	f000 f8d9 	bl	1000c7e4 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
1000c632:	68fb      	ldr	r3, [r7, #12]
1000c634:	4a1f      	ldr	r2, [pc, #124]	; (1000c6b4 <OPENAMP_shmem_init+0x138>)
1000c636:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
1000c638:	4b1e      	ldr	r3, [pc, #120]	; (1000c6b4 <OPENAMP_shmem_init+0x138>)
1000c63a:	681b      	ldr	r3, [r3, #0]
1000c63c:	2b00      	cmp	r3, #0
1000c63e:	d102      	bne.n	1000c646 <OPENAMP_shmem_init+0xca>
  {
    return -1;
1000c640:	f04f 33ff 	mov.w	r3, #4294967295
1000c644:	e022      	b.n	1000c68c <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
1000c646:	69bb      	ldr	r3, [r7, #24]
1000c648:	f103 0044 	add.w	r0, r3, #68	; 0x44
1000c64c:	4b19      	ldr	r3, [pc, #100]	; (1000c6b4 <OPENAMP_shmem_init+0x138>)
1000c64e:	6819      	ldr	r1, [r3, #0]
1000c650:	4b18      	ldr	r3, [pc, #96]	; (1000c6b4 <OPENAMP_shmem_init+0x138>)
1000c652:	681a      	ldr	r2, [r3, #0]
1000c654:	68bb      	ldr	r3, [r7, #8]
1000c656:	461c      	mov	r4, r3
1000c658:	2300      	movs	r3, #0
1000c65a:	9302      	str	r3, [sp, #8]
1000c65c:	2300      	movs	r3, #0
1000c65e:	9301      	str	r3, [sp, #4]
1000c660:	f04f 33ff 	mov.w	r3, #4294967295
1000c664:	9300      	str	r3, [sp, #0]
1000c666:	4623      	mov	r3, r4
1000c668:	f7fe fa4a 	bl	1000ab00 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
1000c66c:	69bb      	ldr	r3, [r7, #24]
1000c66e:	2101      	movs	r1, #1
1000c670:	4618      	mov	r0, r3
1000c672:	f7ff ff67 	bl	1000c544 <metal_device_io_region>
1000c676:	4603      	mov	r3, r0
1000c678:	4a0f      	ldr	r2, [pc, #60]	; (1000c6b8 <OPENAMP_shmem_init+0x13c>)
1000c67a:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
1000c67c:	4b0e      	ldr	r3, [pc, #56]	; (1000c6b8 <OPENAMP_shmem_init+0x13c>)
1000c67e:	681b      	ldr	r3, [r3, #0]
1000c680:	2b00      	cmp	r3, #0
1000c682:	d102      	bne.n	1000c68a <OPENAMP_shmem_init+0x10e>
    return -1;
1000c684:	f04f 33ff 	mov.w	r3, #4294967295
1000c688:	e000      	b.n	1000c68c <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
1000c68a:	2300      	movs	r3, #0
}
1000c68c:	4618      	mov	r0, r3
1000c68e:	3724      	adds	r7, #36	; 0x24
1000c690:	46bd      	mov	sp, r7
1000c692:	bd90      	pop	{r4, r7, pc}
1000c694:	10011cf0 	.word	0x10011cf0
1000c698:	10020038 	.word	0x10020038
1000c69c:	10011cdc 	.word	0x10011cdc
1000c6a0:	10011ce8 	.word	0x10011ce8
1000c6a4:	10040000 	.word	0x10040000
1000c6a8:	10021f94 	.word	0x10021f94
1000c6ac:	10050000 	.word	0x10050000
1000c6b0:	10021ef0 	.word	0x10021ef0
1000c6b4:	10021ef8 	.word	0x10021ef8
1000c6b8:	10021ef4 	.word	0x10021ef4

1000c6bc <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
1000c6bc:	b590      	push	{r4, r7, lr}
1000c6be:	b08b      	sub	sp, #44	; 0x2c
1000c6c0:	af04      	add	r7, sp, #16
1000c6c2:	6078      	str	r0, [r7, #4]
1000c6c4:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
1000c6c6:	2300      	movs	r3, #0
1000c6c8:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
1000c6ca:	2300      	movs	r3, #0
1000c6cc:	613b      	str	r3, [r7, #16]
  int status = 0;
1000c6ce:	2300      	movs	r3, #0
1000c6d0:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
1000c6d2:	f7ff feb5 	bl	1000c440 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
1000c6d6:	6878      	ldr	r0, [r7, #4]
1000c6d8:	f7ff ff50 	bl	1000c57c <OPENAMP_shmem_init>
1000c6dc:	60f8      	str	r0, [r7, #12]
  if(status)
1000c6de:	68fb      	ldr	r3, [r7, #12]
1000c6e0:	2b00      	cmp	r3, #0
1000c6e2:	d001      	beq.n	1000c6e8 <MX_OPENAMP_Init+0x2c>
  {
    return status;
1000c6e4:	68fb      	ldr	r3, [r7, #12]
1000c6e6:	e068      	b.n	1000c7ba <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
1000c6e8:	6878      	ldr	r0, [r7, #4]
1000c6ea:	4b36      	ldr	r3, [pc, #216]	; (1000c7c4 <MX_OPENAMP_Init+0x108>)
1000c6ec:	681b      	ldr	r3, [r3, #0]
1000c6ee:	f103 0218 	add.w	r2, r3, #24
1000c6f2:	4b35      	ldr	r3, [pc, #212]	; (1000c7c8 <MX_OPENAMP_Init+0x10c>)
1000c6f4:	681b      	ldr	r3, [r3, #0]
1000c6f6:	2100      	movs	r1, #0
1000c6f8:	9102      	str	r1, [sp, #8]
1000c6fa:	4934      	ldr	r1, [pc, #208]	; (1000c7cc <MX_OPENAMP_Init+0x110>)
1000c6fc:	9101      	str	r1, [sp, #4]
1000c6fe:	2100      	movs	r1, #0
1000c700:	9100      	str	r1, [sp, #0]
1000c702:	21ff      	movs	r1, #255	; 0xff
1000c704:	f7fe fcfa 	bl	1000b0fc <rproc_virtio_create_vdev>
1000c708:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
1000c70a:	693b      	ldr	r3, [r7, #16]
1000c70c:	2b00      	cmp	r3, #0
1000c70e:	d102      	bne.n	1000c716 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
1000c710:	f04f 33ff 	mov.w	r3, #4294967295
1000c714:	e051      	b.n	1000c7ba <MX_OPENAMP_Init+0xfe>
  }

  rproc_virtio_wait_remote_ready(vdev);
1000c716:	6938      	ldr	r0, [r7, #16]
1000c718:	f7fe fdcf 	bl	1000b2ba <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
1000c71c:	4b29      	ldr	r3, [pc, #164]	; (1000c7c4 <MX_OPENAMP_Init+0x108>)
1000c71e:	681b      	ldr	r3, [r3, #0]
1000c720:	3334      	adds	r3, #52	; 0x34
1000c722:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
1000c724:	697b      	ldr	r3, [r7, #20]
1000c726:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
1000c728:	697b      	ldr	r3, [r7, #20]
1000c72a:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
1000c72c:	461c      	mov	r4, r3
1000c72e:	4b28      	ldr	r3, [pc, #160]	; (1000c7d0 <MX_OPENAMP_Init+0x114>)
1000c730:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
1000c732:	697a      	ldr	r2, [r7, #20]
1000c734:	6892      	ldr	r2, [r2, #8]
1000c736:	6979      	ldr	r1, [r7, #20]
1000c738:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
1000c73a:	9102      	str	r1, [sp, #8]
1000c73c:	9201      	str	r2, [sp, #4]
1000c73e:	9300      	str	r3, [sp, #0]
1000c740:	4623      	mov	r3, r4
1000c742:	4602      	mov	r2, r0
1000c744:	2100      	movs	r1, #0
1000c746:	6938      	ldr	r0, [r7, #16]
1000c748:	f7fe fd86 	bl	1000b258 <rproc_virtio_init_vring>
1000c74c:	60f8      	str	r0, [r7, #12]
  if (status != 0)
1000c74e:	68fb      	ldr	r3, [r7, #12]
1000c750:	2b00      	cmp	r3, #0
1000c752:	d001      	beq.n	1000c758 <MX_OPENAMP_Init+0x9c>
  {
    return status;
1000c754:	68fb      	ldr	r3, [r7, #12]
1000c756:	e030      	b.n	1000c7ba <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
1000c758:	4b1a      	ldr	r3, [pc, #104]	; (1000c7c4 <MX_OPENAMP_Init+0x108>)
1000c75a:	681b      	ldr	r3, [r3, #0]
1000c75c:	3348      	adds	r3, #72	; 0x48
1000c75e:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
1000c760:	697b      	ldr	r3, [r7, #20]
1000c762:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
1000c764:	697b      	ldr	r3, [r7, #20]
1000c766:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
1000c768:	461c      	mov	r4, r3
1000c76a:	4b19      	ldr	r3, [pc, #100]	; (1000c7d0 <MX_OPENAMP_Init+0x114>)
1000c76c:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
1000c76e:	697a      	ldr	r2, [r7, #20]
1000c770:	6892      	ldr	r2, [r2, #8]
1000c772:	6979      	ldr	r1, [r7, #20]
1000c774:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
1000c776:	9102      	str	r1, [sp, #8]
1000c778:	9201      	str	r2, [sp, #4]
1000c77a:	9300      	str	r3, [sp, #0]
1000c77c:	4623      	mov	r3, r4
1000c77e:	4602      	mov	r2, r0
1000c780:	2101      	movs	r1, #1
1000c782:	6938      	ldr	r0, [r7, #16]
1000c784:	f7fe fd68 	bl	1000b258 <rproc_virtio_init_vring>
1000c788:	60f8      	str	r0, [r7, #12]
  if (status != 0)
1000c78a:	68fb      	ldr	r3, [r7, #12]
1000c78c:	2b00      	cmp	r3, #0
1000c78e:	d001      	beq.n	1000c794 <MX_OPENAMP_Init+0xd8>
  {
    return status;
1000c790:	68fb      	ldr	r3, [r7, #12]
1000c792:	e012      	b.n	1000c7ba <MX_OPENAMP_Init+0xfe>
  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
                             (size_t)SHM_SIZE);
1000c794:	4a0f      	ldr	r2, [pc, #60]	; (1000c7d4 <MX_OPENAMP_Init+0x118>)
1000c796:	4b10      	ldr	r3, [pc, #64]	; (1000c7d8 <MX_OPENAMP_Init+0x11c>)
1000c798:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
1000c79a:	461a      	mov	r2, r3
1000c79c:	f04f 31ff 	mov.w	r1, #4294967295
1000c7a0:	480e      	ldr	r0, [pc, #56]	; (1000c7dc <MX_OPENAMP_Init+0x120>)
1000c7a2:	f7fe ff86 	bl	1000b6b2 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
1000c7a6:	4b0a      	ldr	r3, [pc, #40]	; (1000c7d0 <MX_OPENAMP_Init+0x114>)
1000c7a8:	681b      	ldr	r3, [r3, #0]
1000c7aa:	4a0c      	ldr	r2, [pc, #48]	; (1000c7dc <MX_OPENAMP_Init+0x120>)
1000c7ac:	9200      	str	r2, [sp, #0]
1000c7ae:	683a      	ldr	r2, [r7, #0]
1000c7b0:	6939      	ldr	r1, [r7, #16]
1000c7b2:	480b      	ldr	r0, [pc, #44]	; (1000c7e0 <MX_OPENAMP_Init+0x124>)
1000c7b4:	f7ff fa7a 	bl	1000bcac <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
1000c7b8:	2300      	movs	r3, #0
}
1000c7ba:	4618      	mov	r0, r3
1000c7bc:	371c      	adds	r7, #28
1000c7be:	46bd      	mov	sp, r7
1000c7c0:	bd90      	pop	{r4, r7, pc}
1000c7c2:	bf00      	nop
1000c7c4:	10021ef8 	.word	0x10021ef8
1000c7c8:	10021ef4 	.word	0x10021ef4
1000c7cc:	1000c489 	.word	0x1000c489
1000c7d0:	10021ef0 	.word	0x10021ef0
1000c7d4:	10050000 	.word	0x10050000
1000c7d8:	10040000 	.word	0x10040000
1000c7dc:	10021efc 	.word	0x10021efc
1000c7e0:	10021f08 	.word	0x10021f08

1000c7e4 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
1000c7e4:	b480      	push	{r7}
1000c7e6:	b085      	sub	sp, #20
1000c7e8:	af00      	add	r7, sp, #0
1000c7ea:	60f8      	str	r0, [r7, #12]
1000c7ec:	60b9      	str	r1, [r7, #8]
1000c7ee:	607a      	str	r2, [r7, #4]
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
1000c7f0:	687b      	ldr	r3, [r7, #4]
1000c7f2:	228c      	movs	r2, #140	; 0x8c
1000c7f4:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
1000c7f6:	68bb      	ldr	r3, [r7, #8]
1000c7f8:	4a03      	ldr	r2, [pc, #12]	; (1000c808 <resource_table_init+0x24>)
1000c7fa:	601a      	str	r2, [r3, #0]
}
1000c7fc:	bf00      	nop
1000c7fe:	3714      	adds	r7, #20
1000c800:	46bd      	mov	sp, r7
1000c802:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c806:	4770      	bx	lr
1000c808:	10020c8c 	.word	0x10020c8c

1000c80c <emotion_model_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool emotion_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
1000c80c:	b580      	push	{r7, lr}
1000c80e:	b082      	sub	sp, #8
1000c810:	af00      	add	r7, sp, #0
1000c812:	6078      	str	r0, [r7, #4]
1000c814:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_emotion_model_activations_map, 1, params)) {
1000c816:	683a      	ldr	r2, [r7, #0]
1000c818:	2101      	movs	r1, #1
1000c81a:	4837      	ldr	r0, [pc, #220]	; (1000c8f8 <emotion_model_configure_activations+0xec>)
1000c81c:	f000 fb30 	bl	1000ce80 <ai_platform_get_activations_map>
1000c820:	4603      	mov	r3, r0
1000c822:	2b00      	cmp	r3, #0
1000c824:	d05d      	beq.n	1000c8e2 <emotion_model_configure_activations+0xd6>
    /* Updating activations (byte) offsets */
    
    serving_default_dense_input0_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000c826:	4b34      	ldr	r3, [pc, #208]	; (1000c8f8 <emotion_model_configure_activations+0xec>)
1000c828:	681b      	ldr	r3, [r3, #0]
1000c82a:	4a34      	ldr	r2, [pc, #208]	; (1000c8fc <emotion_model_configure_activations+0xf0>)
1000c82c:	6093      	str	r3, [r2, #8]
    serving_default_dense_input0_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000c82e:	4b32      	ldr	r3, [pc, #200]	; (1000c8f8 <emotion_model_configure_activations+0xec>)
1000c830:	681b      	ldr	r3, [r3, #0]
1000c832:	4a32      	ldr	r2, [pc, #200]	; (1000c8fc <emotion_model_configure_activations+0xf0>)
1000c834:	60d3      	str	r3, [r2, #12]
    
    gemm_0_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 2000);
1000c836:	4b30      	ldr	r3, [pc, #192]	; (1000c8f8 <emotion_model_configure_activations+0xec>)
1000c838:	681b      	ldr	r3, [r3, #0]
1000c83a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
1000c83e:	4a30      	ldr	r2, [pc, #192]	; (1000c900 <emotion_model_configure_activations+0xf4>)
1000c840:	6093      	str	r3, [r2, #8]
    gemm_0_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 2000);
1000c842:	4b2d      	ldr	r3, [pc, #180]	; (1000c8f8 <emotion_model_configure_activations+0xec>)
1000c844:	681b      	ldr	r3, [r3, #0]
1000c846:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
1000c84a:	4a2d      	ldr	r2, [pc, #180]	; (1000c900 <emotion_model_configure_activations+0xf4>)
1000c84c:	60d3      	str	r3, [r2, #12]
    
    gemm_1_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000c84e:	4b2a      	ldr	r3, [pc, #168]	; (1000c8f8 <emotion_model_configure_activations+0xec>)
1000c850:	681b      	ldr	r3, [r3, #0]
1000c852:	4a2c      	ldr	r2, [pc, #176]	; (1000c904 <emotion_model_configure_activations+0xf8>)
1000c854:	6093      	str	r3, [r2, #8]
    gemm_1_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000c856:	4b28      	ldr	r3, [pc, #160]	; (1000c8f8 <emotion_model_configure_activations+0xec>)
1000c858:	681b      	ldr	r3, [r3, #0]
1000c85a:	4a2a      	ldr	r2, [pc, #168]	; (1000c904 <emotion_model_configure_activations+0xf8>)
1000c85c:	60d3      	str	r3, [r2, #12]
    
    nl_2_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 64);
1000c85e:	4b26      	ldr	r3, [pc, #152]	; (1000c8f8 <emotion_model_configure_activations+0xec>)
1000c860:	681b      	ldr	r3, [r3, #0]
1000c862:	3340      	adds	r3, #64	; 0x40
1000c864:	4a28      	ldr	r2, [pc, #160]	; (1000c908 <emotion_model_configure_activations+0xfc>)
1000c866:	6093      	str	r3, [r2, #8]
    nl_2_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 64);
1000c868:	4b23      	ldr	r3, [pc, #140]	; (1000c8f8 <emotion_model_configure_activations+0xec>)
1000c86a:	681b      	ldr	r3, [r3, #0]
1000c86c:	3340      	adds	r3, #64	; 0x40
1000c86e:	4a26      	ldr	r2, [pc, #152]	; (1000c908 <emotion_model_configure_activations+0xfc>)
1000c870:	60d3      	str	r3, [r2, #12]
    
    gemm_3_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000c872:	4b21      	ldr	r3, [pc, #132]	; (1000c8f8 <emotion_model_configure_activations+0xec>)
1000c874:	681b      	ldr	r3, [r3, #0]
1000c876:	4a25      	ldr	r2, [pc, #148]	; (1000c90c <emotion_model_configure_activations+0x100>)
1000c878:	6093      	str	r3, [r2, #8]
    gemm_3_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000c87a:	4b1f      	ldr	r3, [pc, #124]	; (1000c8f8 <emotion_model_configure_activations+0xec>)
1000c87c:	681b      	ldr	r3, [r3, #0]
1000c87e:	4a23      	ldr	r2, [pc, #140]	; (1000c90c <emotion_model_configure_activations+0x100>)
1000c880:	60d3      	str	r3, [r2, #12]
    
    nl_4_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 32);
1000c882:	4b1d      	ldr	r3, [pc, #116]	; (1000c8f8 <emotion_model_configure_activations+0xec>)
1000c884:	681b      	ldr	r3, [r3, #0]
1000c886:	3320      	adds	r3, #32
1000c888:	4a21      	ldr	r2, [pc, #132]	; (1000c910 <emotion_model_configure_activations+0x104>)
1000c88a:	6093      	str	r3, [r2, #8]
    nl_4_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 32);
1000c88c:	4b1a      	ldr	r3, [pc, #104]	; (1000c8f8 <emotion_model_configure_activations+0xec>)
1000c88e:	681b      	ldr	r3, [r3, #0]
1000c890:	3320      	adds	r3, #32
1000c892:	4a1f      	ldr	r2, [pc, #124]	; (1000c910 <emotion_model_configure_activations+0x104>)
1000c894:	60d3      	str	r3, [r2, #12]
    
    gemm_5_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000c896:	4b18      	ldr	r3, [pc, #96]	; (1000c8f8 <emotion_model_configure_activations+0xec>)
1000c898:	681b      	ldr	r3, [r3, #0]
1000c89a:	4a1e      	ldr	r2, [pc, #120]	; (1000c914 <emotion_model_configure_activations+0x108>)
1000c89c:	6093      	str	r3, [r2, #8]
    gemm_5_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000c89e:	4b16      	ldr	r3, [pc, #88]	; (1000c8f8 <emotion_model_configure_activations+0xec>)
1000c8a0:	681b      	ldr	r3, [r3, #0]
1000c8a2:	4a1c      	ldr	r2, [pc, #112]	; (1000c914 <emotion_model_configure_activations+0x108>)
1000c8a4:	60d3      	str	r3, [r2, #12]
    
    nl_6_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 16);
1000c8a6:	4b14      	ldr	r3, [pc, #80]	; (1000c8f8 <emotion_model_configure_activations+0xec>)
1000c8a8:	681b      	ldr	r3, [r3, #0]
1000c8aa:	3310      	adds	r3, #16
1000c8ac:	4a1a      	ldr	r2, [pc, #104]	; (1000c918 <emotion_model_configure_activations+0x10c>)
1000c8ae:	6093      	str	r3, [r2, #8]
    nl_6_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 16);
1000c8b0:	4b11      	ldr	r3, [pc, #68]	; (1000c8f8 <emotion_model_configure_activations+0xec>)
1000c8b2:	681b      	ldr	r3, [r3, #0]
1000c8b4:	3310      	adds	r3, #16
1000c8b6:	4a18      	ldr	r2, [pc, #96]	; (1000c918 <emotion_model_configure_activations+0x10c>)
1000c8b8:	60d3      	str	r3, [r2, #12]
    
    gemm_7_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000c8ba:	4b0f      	ldr	r3, [pc, #60]	; (1000c8f8 <emotion_model_configure_activations+0xec>)
1000c8bc:	681b      	ldr	r3, [r3, #0]
1000c8be:	4a17      	ldr	r2, [pc, #92]	; (1000c91c <emotion_model_configure_activations+0x110>)
1000c8c0:	6093      	str	r3, [r2, #8]
    gemm_7_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000c8c2:	4b0d      	ldr	r3, [pc, #52]	; (1000c8f8 <emotion_model_configure_activations+0xec>)
1000c8c4:	681b      	ldr	r3, [r3, #0]
1000c8c6:	4a15      	ldr	r2, [pc, #84]	; (1000c91c <emotion_model_configure_activations+0x110>)
1000c8c8:	60d3      	str	r3, [r2, #12]
    
    nl_8_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 8);
1000c8ca:	4b0b      	ldr	r3, [pc, #44]	; (1000c8f8 <emotion_model_configure_activations+0xec>)
1000c8cc:	681b      	ldr	r3, [r3, #0]
1000c8ce:	3308      	adds	r3, #8
1000c8d0:	4a13      	ldr	r2, [pc, #76]	; (1000c920 <emotion_model_configure_activations+0x114>)
1000c8d2:	6093      	str	r3, [r2, #8]
    nl_8_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 8);
1000c8d4:	4b08      	ldr	r3, [pc, #32]	; (1000c8f8 <emotion_model_configure_activations+0xec>)
1000c8d6:	681b      	ldr	r3, [r3, #0]
1000c8d8:	3308      	adds	r3, #8
1000c8da:	4a11      	ldr	r2, [pc, #68]	; (1000c920 <emotion_model_configure_activations+0x114>)
1000c8dc:	60d3      	str	r3, [r2, #12]
    
    return true;
1000c8de:	2301      	movs	r3, #1
1000c8e0:	e005      	b.n	1000c8ee <emotion_model_configure_activations+0xe2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
1000c8e2:	2213      	movs	r2, #19
1000c8e4:	2130      	movs	r1, #48	; 0x30
1000c8e6:	6878      	ldr	r0, [r7, #4]
1000c8e8:	f000 fb7a 	bl	1000cfe0 <ai_platform_network_set_error>
  return false;
1000c8ec:	2300      	movs	r3, #0
}
1000c8ee:	4618      	mov	r0, r3
1000c8f0:	3708      	adds	r7, #8
1000c8f2:	46bd      	mov	sp, r7
1000c8f4:	bd80      	pop	{r7, pc}
1000c8f6:	bf00      	nop
1000c8f8:	10021f98 	.word	0x10021f98
1000c8fc:	10020114 	.word	0x10020114
1000c900:	10020124 	.word	0x10020124
1000c904:	10020134 	.word	0x10020134
1000c908:	10020144 	.word	0x10020144
1000c90c:	10020154 	.word	0x10020154
1000c910:	10020164 	.word	0x10020164
1000c914:	10020174 	.word	0x10020174
1000c918:	10020184 	.word	0x10020184
1000c91c:	10020194 	.word	0x10020194
1000c920:	100201a4 	.word	0x100201a4

1000c924 <emotion_model_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool emotion_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
1000c924:	b580      	push	{r7, lr}
1000c926:	b082      	sub	sp, #8
1000c928:	af00      	add	r7, sp, #0
1000c92a:	6078      	str	r0, [r7, #4]
1000c92c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_emotion_model_weights_map, 1, params)) {
1000c92e:	683a      	ldr	r2, [r7, #0]
1000c930:	2101      	movs	r1, #1
1000c932:	4857      	ldr	r0, [pc, #348]	; (1000ca90 <emotion_model_configure_weights+0x16c>)
1000c934:	f000 fa50 	bl	1000cdd8 <ai_platform_get_weights_map>
1000c938:	4603      	mov	r3, r0
1000c93a:	2b00      	cmp	r3, #0
1000c93c:	f000 809d 	beq.w	1000ca7a <emotion_model_configure_weights+0x156>
    /* Updating weights (byte) offsets */
    
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
1000c940:	4b54      	ldr	r3, [pc, #336]	; (1000ca94 <emotion_model_configure_weights+0x170>)
1000c942:	681b      	ldr	r3, [r3, #0]
1000c944:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000c948:	4a52      	ldr	r2, [pc, #328]	; (1000ca94 <emotion_model_configure_weights+0x170>)
1000c94a:	6013      	str	r3, [r2, #0]
    gemm_3_bias_array.data = AI_PTR(g_emotion_model_weights_map[0] + 0);
1000c94c:	4b50      	ldr	r3, [pc, #320]	; (1000ca90 <emotion_model_configure_weights+0x16c>)
1000c94e:	681b      	ldr	r3, [r3, #0]
1000c950:	4a50      	ldr	r2, [pc, #320]	; (1000ca94 <emotion_model_configure_weights+0x170>)
1000c952:	6093      	str	r3, [r2, #8]
    gemm_3_bias_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 0);
1000c954:	4b4e      	ldr	r3, [pc, #312]	; (1000ca90 <emotion_model_configure_weights+0x16c>)
1000c956:	681b      	ldr	r3, [r3, #0]
1000c958:	4a4e      	ldr	r2, [pc, #312]	; (1000ca94 <emotion_model_configure_weights+0x170>)
1000c95a:	60d3      	str	r3, [r2, #12]
    
    gemm_5_weights_array.format |= AI_FMT_FLAG_CONST;
1000c95c:	4b4e      	ldr	r3, [pc, #312]	; (1000ca98 <emotion_model_configure_weights+0x174>)
1000c95e:	681b      	ldr	r3, [r3, #0]
1000c960:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000c964:	4a4c      	ldr	r2, [pc, #304]	; (1000ca98 <emotion_model_configure_weights+0x174>)
1000c966:	6013      	str	r3, [r2, #0]
    gemm_5_weights_array.data = AI_PTR(g_emotion_model_weights_map[0] + 32);
1000c968:	4b49      	ldr	r3, [pc, #292]	; (1000ca90 <emotion_model_configure_weights+0x16c>)
1000c96a:	681b      	ldr	r3, [r3, #0]
1000c96c:	3320      	adds	r3, #32
1000c96e:	4a4a      	ldr	r2, [pc, #296]	; (1000ca98 <emotion_model_configure_weights+0x174>)
1000c970:	6093      	str	r3, [r2, #8]
    gemm_5_weights_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 32);
1000c972:	4b47      	ldr	r3, [pc, #284]	; (1000ca90 <emotion_model_configure_weights+0x16c>)
1000c974:	681b      	ldr	r3, [r3, #0]
1000c976:	3320      	adds	r3, #32
1000c978:	4a47      	ldr	r2, [pc, #284]	; (1000ca98 <emotion_model_configure_weights+0x174>)
1000c97a:	60d3      	str	r3, [r2, #12]
    
    gemm_5_bias_array.format |= AI_FMT_FLAG_CONST;
1000c97c:	4b47      	ldr	r3, [pc, #284]	; (1000ca9c <emotion_model_configure_weights+0x178>)
1000c97e:	681b      	ldr	r3, [r3, #0]
1000c980:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000c984:	4a45      	ldr	r2, [pc, #276]	; (1000ca9c <emotion_model_configure_weights+0x178>)
1000c986:	6013      	str	r3, [r2, #0]
    gemm_5_bias_array.data = AI_PTR(g_emotion_model_weights_map[0] + 160);
1000c988:	4b41      	ldr	r3, [pc, #260]	; (1000ca90 <emotion_model_configure_weights+0x16c>)
1000c98a:	681b      	ldr	r3, [r3, #0]
1000c98c:	33a0      	adds	r3, #160	; 0xa0
1000c98e:	4a43      	ldr	r2, [pc, #268]	; (1000ca9c <emotion_model_configure_weights+0x178>)
1000c990:	6093      	str	r3, [r2, #8]
    gemm_5_bias_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 160);
1000c992:	4b3f      	ldr	r3, [pc, #252]	; (1000ca90 <emotion_model_configure_weights+0x16c>)
1000c994:	681b      	ldr	r3, [r3, #0]
1000c996:	33a0      	adds	r3, #160	; 0xa0
1000c998:	4a40      	ldr	r2, [pc, #256]	; (1000ca9c <emotion_model_configure_weights+0x178>)
1000c99a:	60d3      	str	r3, [r2, #12]
    
    gemm_7_weights_array.format |= AI_FMT_FLAG_CONST;
1000c99c:	4b40      	ldr	r3, [pc, #256]	; (1000caa0 <emotion_model_configure_weights+0x17c>)
1000c99e:	681b      	ldr	r3, [r3, #0]
1000c9a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000c9a4:	4a3e      	ldr	r2, [pc, #248]	; (1000caa0 <emotion_model_configure_weights+0x17c>)
1000c9a6:	6013      	str	r3, [r2, #0]
    gemm_7_weights_array.data = AI_PTR(g_emotion_model_weights_map[0] + 176);
1000c9a8:	4b39      	ldr	r3, [pc, #228]	; (1000ca90 <emotion_model_configure_weights+0x16c>)
1000c9aa:	681b      	ldr	r3, [r3, #0]
1000c9ac:	33b0      	adds	r3, #176	; 0xb0
1000c9ae:	4a3c      	ldr	r2, [pc, #240]	; (1000caa0 <emotion_model_configure_weights+0x17c>)
1000c9b0:	6093      	str	r3, [r2, #8]
    gemm_7_weights_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 176);
1000c9b2:	4b37      	ldr	r3, [pc, #220]	; (1000ca90 <emotion_model_configure_weights+0x16c>)
1000c9b4:	681b      	ldr	r3, [r3, #0]
1000c9b6:	33b0      	adds	r3, #176	; 0xb0
1000c9b8:	4a39      	ldr	r2, [pc, #228]	; (1000caa0 <emotion_model_configure_weights+0x17c>)
1000c9ba:	60d3      	str	r3, [r2, #12]
    
    gemm_7_bias_array.format |= AI_FMT_FLAG_CONST;
1000c9bc:	4b39      	ldr	r3, [pc, #228]	; (1000caa4 <emotion_model_configure_weights+0x180>)
1000c9be:	681b      	ldr	r3, [r3, #0]
1000c9c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000c9c4:	4a37      	ldr	r2, [pc, #220]	; (1000caa4 <emotion_model_configure_weights+0x180>)
1000c9c6:	6013      	str	r3, [r2, #0]
    gemm_7_bias_array.data = AI_PTR(g_emotion_model_weights_map[0] + 208);
1000c9c8:	4b31      	ldr	r3, [pc, #196]	; (1000ca90 <emotion_model_configure_weights+0x16c>)
1000c9ca:	681b      	ldr	r3, [r3, #0]
1000c9cc:	33d0      	adds	r3, #208	; 0xd0
1000c9ce:	4a35      	ldr	r2, [pc, #212]	; (1000caa4 <emotion_model_configure_weights+0x180>)
1000c9d0:	6093      	str	r3, [r2, #8]
    gemm_7_bias_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 208);
1000c9d2:	4b2f      	ldr	r3, [pc, #188]	; (1000ca90 <emotion_model_configure_weights+0x16c>)
1000c9d4:	681b      	ldr	r3, [r3, #0]
1000c9d6:	33d0      	adds	r3, #208	; 0xd0
1000c9d8:	4a32      	ldr	r2, [pc, #200]	; (1000caa4 <emotion_model_configure_weights+0x180>)
1000c9da:	60d3      	str	r3, [r2, #12]
    
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
1000c9dc:	4b32      	ldr	r3, [pc, #200]	; (1000caa8 <emotion_model_configure_weights+0x184>)
1000c9de:	681b      	ldr	r3, [r3, #0]
1000c9e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000c9e4:	4a30      	ldr	r2, [pc, #192]	; (1000caa8 <emotion_model_configure_weights+0x184>)
1000c9e6:	6013      	str	r3, [r2, #0]
    gemm_0_weights_array.data = AI_PTR(g_emotion_model_weights_map[0] + 280);
1000c9e8:	4b29      	ldr	r3, [pc, #164]	; (1000ca90 <emotion_model_configure_weights+0x16c>)
1000c9ea:	681b      	ldr	r3, [r3, #0]
1000c9ec:	f503 738c 	add.w	r3, r3, #280	; 0x118
1000c9f0:	4a2d      	ldr	r2, [pc, #180]	; (1000caa8 <emotion_model_configure_weights+0x184>)
1000c9f2:	6093      	str	r3, [r2, #8]
    gemm_0_weights_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 216);
1000c9f4:	4b26      	ldr	r3, [pc, #152]	; (1000ca90 <emotion_model_configure_weights+0x16c>)
1000c9f6:	681b      	ldr	r3, [r3, #0]
1000c9f8:	33d8      	adds	r3, #216	; 0xd8
1000c9fa:	4a2b      	ldr	r2, [pc, #172]	; (1000caa8 <emotion_model_configure_weights+0x184>)
1000c9fc:	60d3      	str	r3, [r2, #12]
    
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
1000c9fe:	4b2b      	ldr	r3, [pc, #172]	; (1000caac <emotion_model_configure_weights+0x188>)
1000ca00:	681b      	ldr	r3, [r3, #0]
1000ca02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000ca06:	4a29      	ldr	r2, [pc, #164]	; (1000caac <emotion_model_configure_weights+0x188>)
1000ca08:	6013      	str	r3, [r2, #0]
    gemm_1_weights_array.data = AI_PTR(g_emotion_model_weights_map[0] + 8344);
1000ca0a:	4b21      	ldr	r3, [pc, #132]	; (1000ca90 <emotion_model_configure_weights+0x16c>)
1000ca0c:	681b      	ldr	r3, [r3, #0]
1000ca0e:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
1000ca12:	3318      	adds	r3, #24
1000ca14:	4a25      	ldr	r2, [pc, #148]	; (1000caac <emotion_model_configure_weights+0x188>)
1000ca16:	6093      	str	r3, [r2, #8]
    gemm_1_weights_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 8280);
1000ca18:	4b1d      	ldr	r3, [pc, #116]	; (1000ca90 <emotion_model_configure_weights+0x16c>)
1000ca1a:	681b      	ldr	r3, [r3, #0]
1000ca1c:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
1000ca20:	3318      	adds	r3, #24
1000ca22:	4a22      	ldr	r2, [pc, #136]	; (1000caac <emotion_model_configure_weights+0x188>)
1000ca24:	60d3      	str	r3, [r2, #12]
    
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
1000ca26:	4b22      	ldr	r3, [pc, #136]	; (1000cab0 <emotion_model_configure_weights+0x18c>)
1000ca28:	681b      	ldr	r3, [r3, #0]
1000ca2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000ca2e:	4a20      	ldr	r2, [pc, #128]	; (1000cab0 <emotion_model_configure_weights+0x18c>)
1000ca30:	6013      	str	r3, [r2, #0]
    gemm_1_bias_array.data = AI_PTR(g_emotion_model_weights_map[0] + 8600);
1000ca32:	4b17      	ldr	r3, [pc, #92]	; (1000ca90 <emotion_model_configure_weights+0x16c>)
1000ca34:	681b      	ldr	r3, [r3, #0]
1000ca36:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
1000ca3a:	3318      	adds	r3, #24
1000ca3c:	4a1c      	ldr	r2, [pc, #112]	; (1000cab0 <emotion_model_configure_weights+0x18c>)
1000ca3e:	6093      	str	r3, [r2, #8]
    gemm_1_bias_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 8600);
1000ca40:	4b13      	ldr	r3, [pc, #76]	; (1000ca90 <emotion_model_configure_weights+0x16c>)
1000ca42:	681b      	ldr	r3, [r3, #0]
1000ca44:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
1000ca48:	3318      	adds	r3, #24
1000ca4a:	4a19      	ldr	r2, [pc, #100]	; (1000cab0 <emotion_model_configure_weights+0x18c>)
1000ca4c:	60d3      	str	r3, [r2, #12]
    
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
1000ca4e:	4b19      	ldr	r3, [pc, #100]	; (1000cab4 <emotion_model_configure_weights+0x190>)
1000ca50:	681b      	ldr	r3, [r3, #0]
1000ca52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000ca56:	4a17      	ldr	r2, [pc, #92]	; (1000cab4 <emotion_model_configure_weights+0x190>)
1000ca58:	6013      	str	r3, [r2, #0]
    gemm_3_weights_array.data = AI_PTR(g_emotion_model_weights_map[0] + 8664);
1000ca5a:	4b0d      	ldr	r3, [pc, #52]	; (1000ca90 <emotion_model_configure_weights+0x16c>)
1000ca5c:	681b      	ldr	r3, [r3, #0]
1000ca5e:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
1000ca62:	3318      	adds	r3, #24
1000ca64:	4a13      	ldr	r2, [pc, #76]	; (1000cab4 <emotion_model_configure_weights+0x190>)
1000ca66:	6093      	str	r3, [r2, #8]
    gemm_3_weights_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 8664);
1000ca68:	4b09      	ldr	r3, [pc, #36]	; (1000ca90 <emotion_model_configure_weights+0x16c>)
1000ca6a:	681b      	ldr	r3, [r3, #0]
1000ca6c:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
1000ca70:	3318      	adds	r3, #24
1000ca72:	4a10      	ldr	r2, [pc, #64]	; (1000cab4 <emotion_model_configure_weights+0x190>)
1000ca74:	60d3      	str	r3, [r2, #12]
    
    return true;
1000ca76:	2301      	movs	r3, #1
1000ca78:	e005      	b.n	1000ca86 <emotion_model_configure_weights+0x162>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
1000ca7a:	2212      	movs	r2, #18
1000ca7c:	2130      	movs	r1, #48	; 0x30
1000ca7e:	6878      	ldr	r0, [r7, #4]
1000ca80:	f000 faae 	bl	1000cfe0 <ai_platform_network_set_error>
  return false;
1000ca84:	2300      	movs	r3, #0
}
1000ca86:	4618      	mov	r0, r3
1000ca88:	3708      	adds	r7, #8
1000ca8a:	46bd      	mov	sp, r7
1000ca8c:	bd80      	pop	{r7, pc}
1000ca8e:	bf00      	nop
1000ca90:	10021f9c 	.word	0x10021f9c
1000ca94:	100200c4 	.word	0x100200c4
1000ca98:	100200d4 	.word	0x100200d4
1000ca9c:	100200e4 	.word	0x100200e4
1000caa0:	100200f4 	.word	0x100200f4
1000caa4:	10020104 	.word	0x10020104
1000caa8:	100201b4 	.word	0x100201b4
1000caac:	100201c4 	.word	0x100201c4
1000cab0:	100201d4 	.word	0x100201d4
1000cab4:	100201e4 	.word	0x100201e4

1000cab8 <ai_emotion_model_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_emotion_model_get_error(ai_handle network)
{
1000cab8:	b580      	push	{r7, lr}
1000caba:	b082      	sub	sp, #8
1000cabc:	af00      	add	r7, sp, #0
1000cabe:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
1000cac0:	6878      	ldr	r0, [r7, #4]
1000cac2:	f000 fa53 	bl	1000cf6c <ai_platform_network_get_error>
1000cac6:	4603      	mov	r3, r0
}
1000cac8:	4618      	mov	r0, r3
1000caca:	3708      	adds	r7, #8
1000cacc:	46bd      	mov	sp, r7
1000cace:	bd80      	pop	{r7, pc}

1000cad0 <ai_emotion_model_create>:

AI_API_ENTRY
ai_error ai_emotion_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
1000cad0:	b580      	push	{r7, lr}
1000cad2:	b084      	sub	sp, #16
1000cad4:	af02      	add	r7, sp, #8
1000cad6:	6078      	str	r0, [r7, #4]
1000cad8:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
1000cada:	2300      	movs	r3, #0
1000cadc:	9301      	str	r3, [sp, #4]
1000cade:	2305      	movs	r3, #5
1000cae0:	9300      	str	r3, [sp, #0]
1000cae2:	2301      	movs	r3, #1
1000cae4:	4a04      	ldr	r2, [pc, #16]	; (1000caf8 <ai_emotion_model_create+0x28>)
1000cae6:	6839      	ldr	r1, [r7, #0]
1000cae8:	6878      	ldr	r0, [r7, #4]
1000caea:	f000 fbb3 	bl	1000d254 <ai_platform_network_create>
1000caee:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
1000caf0:	4618      	mov	r0, r3
1000caf2:	3708      	adds	r7, #8
1000caf4:	46bd      	mov	sp, r7
1000caf6:	bd80      	pop	{r7, pc}
1000caf8:	10020a20 	.word	0x10020a20

1000cafc <ai_emotion_model_create_and_init>:

AI_API_ENTRY
ai_error ai_emotion_model_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
1000cafc:	b580      	push	{r7, lr}
1000cafe:	b096      	sub	sp, #88	; 0x58
1000cb00:	af00      	add	r7, sp, #0
1000cb02:	60f8      	str	r0, [r7, #12]
1000cb04:	60b9      	str	r1, [r7, #8]
1000cb06:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_emotion_model_create(network, AI_EMOTION_MODEL_DATA_CONFIG);
1000cb08:	2100      	movs	r1, #0
1000cb0a:	68f8      	ldr	r0, [r7, #12]
1000cb0c:	f7ff ffe0 	bl	1000cad0 <ai_emotion_model_create>
1000cb10:	4603      	mov	r3, r0
1000cb12:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
1000cb14:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
1000cb18:	2b00      	cmp	r3, #0
1000cb1a:	d001      	beq.n	1000cb20 <ai_emotion_model_create_and_init+0x24>
        return err;
1000cb1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1000cb1e:	e05d      	b.n	1000cbdc <ai_emotion_model_create_and_init+0xe0>
    if (ai_emotion_model_data_params_get(&params) != true) {
1000cb20:	f107 0314 	add.w	r3, r7, #20
1000cb24:	4618      	mov	r0, r3
1000cb26:	f000 f8dd 	bl	1000cce4 <ai_emotion_model_data_params_get>
1000cb2a:	4603      	mov	r3, r0
1000cb2c:	f083 0301 	eor.w	r3, r3, #1
1000cb30:	b2db      	uxtb	r3, r3
1000cb32:	2b00      	cmp	r3, #0
1000cb34:	d008      	beq.n	1000cb48 <ai_emotion_model_create_and_init+0x4c>
        err = ai_emotion_model_get_error(*network);
1000cb36:	68fb      	ldr	r3, [r7, #12]
1000cb38:	681b      	ldr	r3, [r3, #0]
1000cb3a:	4618      	mov	r0, r3
1000cb3c:	f7ff ffbc 	bl	1000cab8 <ai_emotion_model_get_error>
1000cb40:	4603      	mov	r3, r0
1000cb42:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
1000cb44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1000cb46:	e049      	b.n	1000cbdc <ai_emotion_model_create_and_init+0xe0>
    }
#if defined(AI_EMOTION_MODEL_DATA_ACTIVATIONS_COUNT)
    if (activations) {
1000cb48:	68bb      	ldr	r3, [r7, #8]
1000cb4a:	2b00      	cmp	r3, #0
1000cb4c:	d016      	beq.n	1000cb7c <ai_emotion_model_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
1000cb4e:	2300      	movs	r3, #0
1000cb50:	657b      	str	r3, [r7, #84]	; 0x54
1000cb52:	e00e      	b.n	1000cb72 <ai_emotion_model_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
1000cb54:	6d79      	ldr	r1, [r7, #84]	; 0x54
1000cb56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1000cb58:	009b      	lsls	r3, r3, #2
1000cb5a:	68ba      	ldr	r2, [r7, #8]
1000cb5c:	4413      	add	r3, r2
1000cb5e:	681a      	ldr	r2, [r3, #0]
1000cb60:	f107 0314 	add.w	r3, r7, #20
1000cb64:	330c      	adds	r3, #12
1000cb66:	4618      	mov	r0, r3
1000cb68:	f000 f922 	bl	1000cdb0 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
1000cb6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1000cb6e:	3301      	adds	r3, #1
1000cb70:	657b      	str	r3, [r7, #84]	; 0x54
1000cb72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
1000cb74:	461a      	mov	r2, r3
1000cb76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1000cb78:	4293      	cmp	r3, r2
1000cb7a:	dbeb      	blt.n	1000cb54 <ai_emotion_model_create_and_init+0x58>
    }
#endif
#if defined(AI_EMOTION_MODEL_DATA_WEIGHTS_COUNT)
    if (weights) {
1000cb7c:	687b      	ldr	r3, [r7, #4]
1000cb7e:	2b00      	cmp	r3, #0
1000cb80:	d016      	beq.n	1000cbb0 <ai_emotion_model_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
1000cb82:	2300      	movs	r3, #0
1000cb84:	653b      	str	r3, [r7, #80]	; 0x50
1000cb86:	e00e      	b.n	1000cba6 <ai_emotion_model_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
1000cb88:	6d39      	ldr	r1, [r7, #80]	; 0x50
1000cb8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1000cb8c:	009b      	lsls	r3, r3, #2
1000cb8e:	687a      	ldr	r2, [r7, #4]
1000cb90:	4413      	add	r3, r2
1000cb92:	681a      	ldr	r2, [r3, #0]
1000cb94:	f107 0314 	add.w	r3, r7, #20
1000cb98:	3304      	adds	r3, #4
1000cb9a:	4618      	mov	r0, r3
1000cb9c:	f000 f908 	bl	1000cdb0 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
1000cba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1000cba2:	3301      	adds	r3, #1
1000cba4:	653b      	str	r3, [r7, #80]	; 0x50
1000cba6:	8b7b      	ldrh	r3, [r7, #26]
1000cba8:	461a      	mov	r2, r3
1000cbaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1000cbac:	4293      	cmp	r3, r2
1000cbae:	dbeb      	blt.n	1000cb88 <ai_emotion_model_create_and_init+0x8c>
    }
#endif
    if (ai_emotion_model_init(*network, &params) != true) {
1000cbb0:	68fb      	ldr	r3, [r7, #12]
1000cbb2:	681b      	ldr	r3, [r3, #0]
1000cbb4:	f107 0214 	add.w	r2, r7, #20
1000cbb8:	4611      	mov	r1, r2
1000cbba:	4618      	mov	r0, r3
1000cbbc:	f000 f846 	bl	1000cc4c <ai_emotion_model_init>
1000cbc0:	4603      	mov	r3, r0
1000cbc2:	f083 0301 	eor.w	r3, r3, #1
1000cbc6:	b2db      	uxtb	r3, r3
1000cbc8:	2b00      	cmp	r3, #0
1000cbca:	d006      	beq.n	1000cbda <ai_emotion_model_create_and_init+0xde>
        err = ai_emotion_model_get_error(*network);
1000cbcc:	68fb      	ldr	r3, [r7, #12]
1000cbce:	681b      	ldr	r3, [r3, #0]
1000cbd0:	4618      	mov	r0, r3
1000cbd2:	f7ff ff71 	bl	1000cab8 <ai_emotion_model_get_error>
1000cbd6:	4603      	mov	r3, r0
1000cbd8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
1000cbda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
1000cbdc:	4618      	mov	r0, r3
1000cbde:	3758      	adds	r7, #88	; 0x58
1000cbe0:	46bd      	mov	sp, r7
1000cbe2:	bd80      	pop	{r7, pc}

1000cbe4 <ai_emotion_model_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_emotion_model_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
1000cbe4:	b580      	push	{r7, lr}
1000cbe6:	b082      	sub	sp, #8
1000cbe8:	af00      	add	r7, sp, #0
1000cbea:	6078      	str	r0, [r7, #4]
1000cbec:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
1000cbee:	687b      	ldr	r3, [r7, #4]
1000cbf0:	2b00      	cmp	r3, #0
1000cbf2:	d104      	bne.n	1000cbfe <ai_emotion_model_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
1000cbf4:	4b06      	ldr	r3, [pc, #24]	; (1000cc10 <ai_emotion_model_inputs_get+0x2c>)
1000cbf6:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
1000cbf8:	687b      	ldr	r3, [r7, #4]
1000cbfa:	4a06      	ldr	r2, [pc, #24]	; (1000cc14 <ai_emotion_model_inputs_get+0x30>)
1000cbfc:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
1000cbfe:	6839      	ldr	r1, [r7, #0]
1000cc00:	6878      	ldr	r0, [r7, #4]
1000cc02:	f000 f9f3 	bl	1000cfec <ai_platform_inputs_get>
1000cc06:	4603      	mov	r3, r0
}
1000cc08:	4618      	mov	r0, r3
1000cc0a:	3708      	adds	r7, #8
1000cc0c:	46bd      	mov	sp, r7
1000cc0e:	bd80      	pop	{r7, pc}
1000cc10:	10020a20 	.word	0x10020a20
1000cc14:	a1c00100 	.word	0xa1c00100

1000cc18 <ai_emotion_model_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_emotion_model_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
1000cc18:	b580      	push	{r7, lr}
1000cc1a:	b082      	sub	sp, #8
1000cc1c:	af00      	add	r7, sp, #0
1000cc1e:	6078      	str	r0, [r7, #4]
1000cc20:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
1000cc22:	687b      	ldr	r3, [r7, #4]
1000cc24:	2b00      	cmp	r3, #0
1000cc26:	d104      	bne.n	1000cc32 <ai_emotion_model_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
1000cc28:	4b06      	ldr	r3, [pc, #24]	; (1000cc44 <ai_emotion_model_outputs_get+0x2c>)
1000cc2a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
1000cc2c:	687b      	ldr	r3, [r7, #4]
1000cc2e:	4a06      	ldr	r2, [pc, #24]	; (1000cc48 <ai_emotion_model_outputs_get+0x30>)
1000cc30:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
1000cc32:	6839      	ldr	r1, [r7, #0]
1000cc34:	6878      	ldr	r0, [r7, #4]
1000cc36:	f000 fa75 	bl	1000d124 <ai_platform_outputs_get>
1000cc3a:	4603      	mov	r3, r0
}
1000cc3c:	4618      	mov	r0, r3
1000cc3e:	3708      	adds	r7, #8
1000cc40:	46bd      	mov	sp, r7
1000cc42:	bd80      	pop	{r7, pc}
1000cc44:	10020a20 	.word	0x10020a20
1000cc48:	a1c00100 	.word	0xa1c00100

1000cc4c <ai_emotion_model_init>:
}

AI_API_ENTRY
ai_bool ai_emotion_model_init(
  ai_handle network, const ai_network_params* params)
{
1000cc4c:	b580      	push	{r7, lr}
1000cc4e:	b084      	sub	sp, #16
1000cc50:	af00      	add	r7, sp, #0
1000cc52:	6078      	str	r0, [r7, #4]
1000cc54:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
1000cc56:	6839      	ldr	r1, [r7, #0]
1000cc58:	6878      	ldr	r0, [r7, #4]
1000cc5a:	f000 fb83 	bl	1000d364 <ai_platform_network_init>
1000cc5e:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
1000cc60:	68fb      	ldr	r3, [r7, #12]
1000cc62:	2b00      	cmp	r3, #0
1000cc64:	d101      	bne.n	1000cc6a <ai_emotion_model_init+0x1e>
1000cc66:	2300      	movs	r3, #0
1000cc68:	e028      	b.n	1000ccbc <ai_emotion_model_init+0x70>

  ai_bool ok = true;
1000cc6a:	2301      	movs	r3, #1
1000cc6c:	72fb      	strb	r3, [r7, #11]
  ok &= emotion_model_configure_weights(net_ctx, params);
1000cc6e:	6839      	ldr	r1, [r7, #0]
1000cc70:	68f8      	ldr	r0, [r7, #12]
1000cc72:	f7ff fe57 	bl	1000c924 <emotion_model_configure_weights>
1000cc76:	4603      	mov	r3, r0
1000cc78:	461a      	mov	r2, r3
1000cc7a:	7afb      	ldrb	r3, [r7, #11]
1000cc7c:	4013      	ands	r3, r2
1000cc7e:	2b00      	cmp	r3, #0
1000cc80:	bf14      	ite	ne
1000cc82:	2301      	movne	r3, #1
1000cc84:	2300      	moveq	r3, #0
1000cc86:	72fb      	strb	r3, [r7, #11]
  ok &= emotion_model_configure_activations(net_ctx, params);
1000cc88:	6839      	ldr	r1, [r7, #0]
1000cc8a:	68f8      	ldr	r0, [r7, #12]
1000cc8c:	f7ff fdbe 	bl	1000c80c <emotion_model_configure_activations>
1000cc90:	4603      	mov	r3, r0
1000cc92:	461a      	mov	r2, r3
1000cc94:	7afb      	ldrb	r3, [r7, #11]
1000cc96:	4013      	ands	r3, r2
1000cc98:	2b00      	cmp	r3, #0
1000cc9a:	bf14      	ite	ne
1000cc9c:	2301      	movne	r3, #1
1000cc9e:	2300      	moveq	r3, #0
1000cca0:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
1000cca2:	6878      	ldr	r0, [r7, #4]
1000cca4:	f000 fc12 	bl	1000d4cc <ai_platform_network_post_init>
1000cca8:	4603      	mov	r3, r0
1000ccaa:	461a      	mov	r2, r3
1000ccac:	7afb      	ldrb	r3, [r7, #11]
1000ccae:	4013      	ands	r3, r2
1000ccb0:	2b00      	cmp	r3, #0
1000ccb2:	bf14      	ite	ne
1000ccb4:	2301      	movne	r3, #1
1000ccb6:	2300      	moveq	r3, #0
1000ccb8:	72fb      	strb	r3, [r7, #11]

  return ok;
1000ccba:	7afb      	ldrb	r3, [r7, #11]
}
1000ccbc:	4618      	mov	r0, r3
1000ccbe:	3710      	adds	r7, #16
1000ccc0:	46bd      	mov	sp, r7
1000ccc2:	bd80      	pop	{r7, pc}

1000ccc4 <ai_emotion_model_run>:


AI_API_ENTRY
ai_i32 ai_emotion_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
1000ccc4:	b580      	push	{r7, lr}
1000ccc6:	b084      	sub	sp, #16
1000ccc8:	af00      	add	r7, sp, #0
1000ccca:	60f8      	str	r0, [r7, #12]
1000cccc:	60b9      	str	r1, [r7, #8]
1000ccce:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
1000ccd0:	687a      	ldr	r2, [r7, #4]
1000ccd2:	68b9      	ldr	r1, [r7, #8]
1000ccd4:	68f8      	ldr	r0, [r7, #12]
1000ccd6:	f000 fc4d 	bl	1000d574 <ai_platform_network_process>
1000ccda:	4603      	mov	r3, r0
}
1000ccdc:	4618      	mov	r0, r3
1000ccde:	3710      	adds	r7, #16
1000cce0:	46bd      	mov	sp, r7
1000cce2:	bd80      	pop	{r7, pc}

1000cce4 <ai_emotion_model_data_params_get>:
 * @ingroup emotion_model_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_emotion_model_data_params_get(ai_network_params* params)
{
1000cce4:	b580      	push	{r7, lr}
1000cce6:	b086      	sub	sp, #24
1000cce8:	af00      	add	r7, sp, #0
1000ccea:	6078      	str	r0, [r7, #4]
  if (!params) return false;
1000ccec:	687b      	ldr	r3, [r7, #4]
1000ccee:	2b00      	cmp	r3, #0
1000ccf0:	d101      	bne.n	1000ccf6 <ai_emotion_model_data_params_get+0x12>
1000ccf2:	2300      	movs	r3, #0
1000ccf4:	e016      	b.n	1000cd24 <ai_emotion_model_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
1000ccf6:	4a0d      	ldr	r2, [pc, #52]	; (1000cd2c <ai_emotion_model_data_params_get+0x48>)
1000ccf8:	f107 0310 	add.w	r3, r7, #16
1000ccfc:	e892 0003 	ldmia.w	r2, {r0, r1}
1000cd00:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_EMOTION_MODEL_DATA_ACTIVATIONS_COUNT, g_emotion_model_data_map_activations);
  
  const ai_buffer_array map_weights = 
1000cd04:	4a0a      	ldr	r2, [pc, #40]	; (1000cd30 <ai_emotion_model_data_params_get+0x4c>)
1000cd06:	f107 0308 	add.w	r3, r7, #8
1000cd0a:	e892 0003 	ldmia.w	r2, {r0, r1}
1000cd0e:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_EMOTION_MODEL_DATA_WEIGHTS_COUNT, g_emotion_model_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
1000cd12:	f107 0210 	add.w	r2, r7, #16
1000cd16:	f107 0308 	add.w	r3, r7, #8
1000cd1a:	4619      	mov	r1, r3
1000cd1c:	6878      	ldr	r0, [r7, #4]
1000cd1e:	f000 f903 	bl	1000cf28 <ai_platform_bind_network_params>
1000cd22:	4603      	mov	r3, r0
}
1000cd24:	4618      	mov	r0, r3
1000cd26:	3718      	adds	r7, #24
1000cd28:	46bd      	mov	sp, r7
1000cd2a:	bd80      	pop	{r7, pc}
1000cd2c:	10011d18 	.word	0x10011d18
1000cd30:	10011d20 	.word	0x10011d20

1000cd34 <ai_buffer_get_size>:
1000cd34:	b378      	cbz	r0, 1000cd96 <ai_buffer_get_size+0x62>
1000cd36:	b410      	push	{r4}
1000cd38:	6803      	ldr	r3, [r0, #0]
1000cd3a:	4a17      	ldr	r2, [pc, #92]	; (1000cd98 <ai_buffer_get_size+0x64>)
1000cd3c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
1000cd40:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
1000cd44:	4293      	cmp	r3, r2
1000cd46:	d01e      	beq.n	1000cd86 <ai_buffer_get_size+0x52>
1000cd48:	6984      	ldr	r4, [r0, #24]
1000cd4a:	6862      	ldr	r2, [r4, #4]
1000cd4c:	7d03      	ldrb	r3, [r0, #20]
1000cd4e:	6941      	ldr	r1, [r0, #20]
1000cd50:	f1a3 0301 	sub.w	r3, r3, #1
1000cd54:	fab3 f383 	clz	r3, r3
1000cd58:	095b      	lsrs	r3, r3, #5
1000cd5a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
1000cd5e:	f3c1 2017 	ubfx	r0, r1, #8, #24
1000cd62:	da0b      	bge.n	1000cd7c <ai_buffer_get_size+0x48>
1000cd64:	2b01      	cmp	r3, #1
1000cd66:	d102      	bne.n	1000cd6e <ai_buffer_get_size+0x3a>
1000cd68:	2802      	cmp	r0, #2
1000cd6a:	d007      	beq.n	1000cd7c <ai_buffer_get_size+0x48>
1000cd6c:	2302      	movs	r3, #2
1000cd6e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
1000cd72:	3301      	adds	r3, #1
1000cd74:	4298      	cmp	r0, r3
1000cd76:	fb01 f202 	mul.w	r2, r1, r2
1000cd7a:	d1f3      	bne.n	1000cd64 <ai_buffer_get_size+0x30>
1000cd7c:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
1000cd80:	f85d 4b04 	ldr.w	r4, [sp], #4
1000cd84:	4770      	bx	lr
1000cd86:	2900      	cmp	r1, #0
1000cd88:	d0de      	beq.n	1000cd48 <ai_buffer_get_size+0x14>
1000cd8a:	6984      	ldr	r4, [r0, #24]
1000cd8c:	6863      	ldr	r3, [r4, #4]
1000cd8e:	331f      	adds	r3, #31
1000cd90:	f023 021f 	bic.w	r2, r3, #31
1000cd94:	e7da      	b.n	1000cd4c <ai_buffer_get_size+0x18>
1000cd96:	4770      	bx	lr
1000cd98:	000400c0 	.word	0x000400c0

1000cd9c <ai_buffer_array_sane>:
1000cd9c:	b138      	cbz	r0, 1000cdae <ai_buffer_array_sane+0x12>
1000cd9e:	6843      	ldr	r3, [r0, #4]
1000cda0:	b123      	cbz	r3, 1000cdac <ai_buffer_array_sane+0x10>
1000cda2:	8840      	ldrh	r0, [r0, #2]
1000cda4:	3800      	subs	r0, #0
1000cda6:	bf18      	it	ne
1000cda8:	2001      	movne	r0, #1
1000cdaa:	4770      	bx	lr
1000cdac:	4618      	mov	r0, r3
1000cdae:	4770      	bx	lr

1000cdb0 <ai_buffer_array_item_set_address>:
1000cdb0:	b150      	cbz	r0, 1000cdc8 <ai_buffer_array_item_set_address+0x18>
1000cdb2:	6843      	ldr	r3, [r0, #4]
1000cdb4:	b14b      	cbz	r3, 1000cdca <ai_buffer_array_item_set_address+0x1a>
1000cdb6:	8840      	ldrh	r0, [r0, #2]
1000cdb8:	b900      	cbnz	r0, 1000cdbc <ai_buffer_array_item_set_address+0xc>
1000cdba:	4770      	bx	lr
1000cdbc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
1000cdc0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
1000cdc4:	2001      	movs	r0, #1
1000cdc6:	604a      	str	r2, [r1, #4]
1000cdc8:	4770      	bx	lr
1000cdca:	4618      	mov	r0, r3
1000cdcc:	4770      	bx	lr
1000cdce:	bf00      	nop

1000cdd0 <_ai_platform_acquire_crc>:
1000cdd0:	2001      	movs	r0, #1
1000cdd2:	4770      	bx	lr

1000cdd4 <_ai_platform_release_crc>:
1000cdd4:	4770      	bx	lr
1000cdd6:	bf00      	nop

1000cdd8 <ai_platform_get_weights_map>:
1000cdd8:	2a00      	cmp	r2, #0
1000cdda:	d037      	beq.n	1000ce4c <ai_platform_get_weights_map+0x74>
1000cddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000cdde:	4604      	mov	r4, r0
1000cde0:	b1a0      	cbz	r0, 1000ce0c <ai_platform_get_weights_map+0x34>
1000cde2:	460f      	mov	r7, r1
1000cde4:	b191      	cbz	r1, 1000ce0c <ai_platform_get_weights_map+0x34>
1000cde6:	4b25      	ldr	r3, [pc, #148]	; (1000ce7c <ai_platform_get_weights_map+0xa4>)
1000cde8:	6810      	ldr	r0, [r2, #0]
1000cdea:	4298      	cmp	r0, r3
1000cdec:	4615      	mov	r5, r2
1000cdee:	d00f      	beq.n	1000ce10 <ai_platform_get_weights_map+0x38>
1000cdf0:	6855      	ldr	r5, [r2, #4]
1000cdf2:	b15d      	cbz	r5, 1000ce0c <ai_platform_get_weights_map+0x34>
1000cdf4:	682e      	ldr	r6, [r5, #0]
1000cdf6:	429e      	cmp	r6, r3
1000cdf8:	d02a      	beq.n	1000ce50 <ai_platform_get_weights_map+0x78>
1000cdfa:	f1a1 0001 	sub.w	r0, r1, #1
1000cdfe:	6025      	str	r5, [r4, #0]
1000ce00:	fab0 f080 	clz	r0, r0
1000ce04:	0940      	lsrs	r0, r0, #5
1000ce06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ce08:	42a7      	cmp	r7, r4
1000ce0a:	d034      	beq.n	1000ce76 <ai_platform_get_weights_map+0x9e>
1000ce0c:	2000      	movs	r0, #0
1000ce0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ce10:	1d10      	adds	r0, r2, #4
1000ce12:	f7ff ffc3 	bl	1000cd9c <ai_buffer_array_sane>
1000ce16:	2800      	cmp	r0, #0
1000ce18:	d0f8      	beq.n	1000ce0c <ai_platform_get_weights_map+0x34>
1000ce1a:	88eb      	ldrh	r3, [r5, #6]
1000ce1c:	429f      	cmp	r7, r3
1000ce1e:	d1f5      	bne.n	1000ce0c <ai_platform_get_weights_map+0x34>
1000ce20:	f04f 0e00 	mov.w	lr, #0
1000ce24:	1f23      	subs	r3, r4, #4
1000ce26:	4670      	mov	r0, lr
1000ce28:	68aa      	ldr	r2, [r5, #8]
1000ce2a:	eb02 0c0e 	add.w	ip, r2, lr
1000ce2e:	f10e 0e1c 	add.w	lr, lr, #28
1000ce32:	f8dc 4004 	ldr.w	r4, [ip, #4]
1000ce36:	b124      	cbz	r4, 1000ce42 <ai_platform_get_weights_map+0x6a>
1000ce38:	3001      	adds	r0, #1
1000ce3a:	4287      	cmp	r7, r0
1000ce3c:	f843 4f04 	str.w	r4, [r3, #4]!
1000ce40:	d1f2      	bne.n	1000ce28 <ai_platform_get_weights_map+0x50>
1000ce42:	1a38      	subs	r0, r7, r0
1000ce44:	fab0 f080 	clz	r0, r0
1000ce48:	0940      	lsrs	r0, r0, #5
1000ce4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ce4c:	2000      	movs	r0, #0
1000ce4e:	4770      	bx	lr
1000ce50:	1f23      	subs	r3, r4, #4
1000ce52:	4628      	mov	r0, r5
1000ce54:	2400      	movs	r4, #0
1000ce56:	e000      	b.n	1000ce5a <ai_platform_get_weights_map+0x82>
1000ce58:	4614      	mov	r4, r2
1000ce5a:	f850 2f04 	ldr.w	r2, [r0, #4]!
1000ce5e:	42b2      	cmp	r2, r6
1000ce60:	d0d2      	beq.n	1000ce08 <ai_platform_get_weights_map+0x30>
1000ce62:	f843 2f04 	str.w	r2, [r3, #4]!
1000ce66:	1c62      	adds	r2, r4, #1
1000ce68:	4297      	cmp	r7, r2
1000ce6a:	d1f5      	bne.n	1000ce58 <ai_platform_get_weights_map+0x80>
1000ce6c:	3402      	adds	r4, #2
1000ce6e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
1000ce72:	42b3      	cmp	r3, r6
1000ce74:	d1ca      	bne.n	1000ce0c <ai_platform_get_weights_map+0x34>
1000ce76:	2001      	movs	r0, #1
1000ce78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ce7a:	bf00      	nop
1000ce7c:	a1facade 	.word	0xa1facade

1000ce80 <ai_platform_get_activations_map>:
1000ce80:	2a00      	cmp	r2, #0
1000ce82:	d038      	beq.n	1000cef6 <ai_platform_get_activations_map+0x76>
1000ce84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ce86:	4604      	mov	r4, r0
1000ce88:	b1a0      	cbz	r0, 1000ceb4 <ai_platform_get_activations_map+0x34>
1000ce8a:	460f      	mov	r7, r1
1000ce8c:	b191      	cbz	r1, 1000ceb4 <ai_platform_get_activations_map+0x34>
1000ce8e:	4b25      	ldr	r3, [pc, #148]	; (1000cf24 <ai_platform_get_activations_map+0xa4>)
1000ce90:	6810      	ldr	r0, [r2, #0]
1000ce92:	4298      	cmp	r0, r3
1000ce94:	4615      	mov	r5, r2
1000ce96:	d00f      	beq.n	1000ceb8 <ai_platform_get_activations_map+0x38>
1000ce98:	6a15      	ldr	r5, [r2, #32]
1000ce9a:	b15d      	cbz	r5, 1000ceb4 <ai_platform_get_activations_map+0x34>
1000ce9c:	682e      	ldr	r6, [r5, #0]
1000ce9e:	429e      	cmp	r6, r3
1000cea0:	d02b      	beq.n	1000cefa <ai_platform_get_activations_map+0x7a>
1000cea2:	f1a1 0001 	sub.w	r0, r1, #1
1000cea6:	6025      	str	r5, [r4, #0]
1000cea8:	fab0 f080 	clz	r0, r0
1000ceac:	0940      	lsrs	r0, r0, #5
1000ceae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ceb0:	42a7      	cmp	r7, r4
1000ceb2:	d035      	beq.n	1000cf20 <ai_platform_get_activations_map+0xa0>
1000ceb4:	2000      	movs	r0, #0
1000ceb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ceb8:	f102 000c 	add.w	r0, r2, #12
1000cebc:	f7ff ff6e 	bl	1000cd9c <ai_buffer_array_sane>
1000cec0:	2800      	cmp	r0, #0
1000cec2:	d0f7      	beq.n	1000ceb4 <ai_platform_get_activations_map+0x34>
1000cec4:	89eb      	ldrh	r3, [r5, #14]
1000cec6:	429f      	cmp	r7, r3
1000cec8:	d1f4      	bne.n	1000ceb4 <ai_platform_get_activations_map+0x34>
1000ceca:	f04f 0e00 	mov.w	lr, #0
1000cece:	1f23      	subs	r3, r4, #4
1000ced0:	4670      	mov	r0, lr
1000ced2:	692a      	ldr	r2, [r5, #16]
1000ced4:	eb02 0c0e 	add.w	ip, r2, lr
1000ced8:	f10e 0e1c 	add.w	lr, lr, #28
1000cedc:	f8dc 4004 	ldr.w	r4, [ip, #4]
1000cee0:	b124      	cbz	r4, 1000ceec <ai_platform_get_activations_map+0x6c>
1000cee2:	3001      	adds	r0, #1
1000cee4:	4287      	cmp	r7, r0
1000cee6:	f843 4f04 	str.w	r4, [r3, #4]!
1000ceea:	d1f2      	bne.n	1000ced2 <ai_platform_get_activations_map+0x52>
1000ceec:	1a38      	subs	r0, r7, r0
1000ceee:	fab0 f080 	clz	r0, r0
1000cef2:	0940      	lsrs	r0, r0, #5
1000cef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000cef6:	2000      	movs	r0, #0
1000cef8:	4770      	bx	lr
1000cefa:	1f23      	subs	r3, r4, #4
1000cefc:	4628      	mov	r0, r5
1000cefe:	2400      	movs	r4, #0
1000cf00:	e000      	b.n	1000cf04 <ai_platform_get_activations_map+0x84>
1000cf02:	4614      	mov	r4, r2
1000cf04:	f850 2f04 	ldr.w	r2, [r0, #4]!
1000cf08:	42b2      	cmp	r2, r6
1000cf0a:	d0d1      	beq.n	1000ceb0 <ai_platform_get_activations_map+0x30>
1000cf0c:	f843 2f04 	str.w	r2, [r3, #4]!
1000cf10:	1c62      	adds	r2, r4, #1
1000cf12:	4297      	cmp	r7, r2
1000cf14:	d1f5      	bne.n	1000cf02 <ai_platform_get_activations_map+0x82>
1000cf16:	3402      	adds	r4, #2
1000cf18:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
1000cf1c:	42b3      	cmp	r3, r6
1000cf1e:	d1c9      	bne.n	1000ceb4 <ai_platform_get_activations_map+0x34>
1000cf20:	2001      	movs	r0, #1
1000cf22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000cf24:	a1facade 	.word	0xa1facade

1000cf28 <ai_platform_bind_network_params>:
1000cf28:	b1a0      	cbz	r0, 1000cf54 <ai_platform_bind_network_params+0x2c>
1000cf2a:	b1b1      	cbz	r1, 1000cf5a <ai_platform_bind_network_params+0x32>
1000cf2c:	b1c2      	cbz	r2, 1000cf60 <ai_platform_bind_network_params+0x38>
1000cf2e:	b410      	push	{r4}
1000cf30:	4603      	mov	r3, r0
1000cf32:	4c0d      	ldr	r4, [pc, #52]	; (1000cf68 <ai_platform_bind_network_params+0x40>)
1000cf34:	f843 4b04 	str.w	r4, [r3], #4
1000cf38:	f100 0c0c 	add.w	ip, r0, #12
1000cf3c:	c903      	ldmia	r1, {r0, r1}
1000cf3e:	e883 0003 	stmia.w	r3, {r0, r1}
1000cf42:	e892 0003 	ldmia.w	r2, {r0, r1}
1000cf46:	e88c 0003 	stmia.w	ip, {r0, r1}
1000cf4a:	2301      	movs	r3, #1
1000cf4c:	4618      	mov	r0, r3
1000cf4e:	f85d 4b04 	ldr.w	r4, [sp], #4
1000cf52:	4770      	bx	lr
1000cf54:	4603      	mov	r3, r0
1000cf56:	4618      	mov	r0, r3
1000cf58:	4770      	bx	lr
1000cf5a:	460b      	mov	r3, r1
1000cf5c:	4618      	mov	r0, r3
1000cf5e:	4770      	bx	lr
1000cf60:	4613      	mov	r3, r2
1000cf62:	4618      	mov	r0, r3
1000cf64:	4770      	bx	lr
1000cf66:	bf00      	nop
1000cf68:	a1facade 	.word	0xa1facade

1000cf6c <ai_platform_network_get_error>:
1000cf6c:	b510      	push	{r4, lr}
1000cf6e:	b198      	cbz	r0, 1000cf98 <ai_platform_network_get_error+0x2c>
1000cf70:	4b17      	ldr	r3, [pc, #92]	; (1000cfd0 <ai_platform_network_get_error+0x64>)
1000cf72:	6802      	ldr	r2, [r0, #0]
1000cf74:	429a      	cmp	r2, r3
1000cf76:	4604      	mov	r4, r0
1000cf78:	d10e      	bne.n	1000cf98 <ai_platform_network_get_error+0x2c>
1000cf7a:	f7ff ff29 	bl	1000cdd0 <_ai_platform_acquire_crc>
1000cf7e:	4a15      	ldr	r2, [pc, #84]	; (1000cfd4 <ai_platform_network_get_error+0x68>)
1000cf80:	2301      	movs	r3, #1
1000cf82:	6093      	str	r3, [r2, #8]
1000cf84:	6893      	ldr	r3, [r2, #8]
1000cf86:	2b00      	cmp	r3, #0
1000cf88:	d1fc      	bne.n	1000cf84 <ai_platform_network_get_error+0x18>
1000cf8a:	4b13      	ldr	r3, [pc, #76]	; (1000cfd8 <ai_platform_network_get_error+0x6c>)
1000cf8c:	6013      	str	r3, [r2, #0]
1000cf8e:	6812      	ldr	r2, [r2, #0]
1000cf90:	4b12      	ldr	r3, [pc, #72]	; (1000cfdc <ai_platform_network_get_error+0x70>)
1000cf92:	429a      	cmp	r2, r3
1000cf94:	d014      	beq.n	1000cfc0 <ai_platform_network_get_error+0x54>
1000cf96:	e7fe      	b.n	1000cf96 <ai_platform_network_get_error+0x2a>
1000cf98:	f7ff ff1a 	bl	1000cdd0 <_ai_platform_acquire_crc>
1000cf9c:	4a0d      	ldr	r2, [pc, #52]	; (1000cfd4 <ai_platform_network_get_error+0x68>)
1000cf9e:	2301      	movs	r3, #1
1000cfa0:	6093      	str	r3, [r2, #8]
1000cfa2:	6893      	ldr	r3, [r2, #8]
1000cfa4:	2b00      	cmp	r3, #0
1000cfa6:	d1fc      	bne.n	1000cfa2 <ai_platform_network_get_error+0x36>
1000cfa8:	4b0b      	ldr	r3, [pc, #44]	; (1000cfd8 <ai_platform_network_get_error+0x6c>)
1000cfaa:	6013      	str	r3, [r2, #0]
1000cfac:	6812      	ldr	r2, [r2, #0]
1000cfae:	4b0b      	ldr	r3, [pc, #44]	; (1000cfdc <ai_platform_network_get_error+0x70>)
1000cfb0:	429a      	cmp	r2, r3
1000cfb2:	d000      	beq.n	1000cfb6 <ai_platform_network_get_error+0x4a>
1000cfb4:	e7fe      	b.n	1000cfb4 <ai_platform_network_get_error+0x48>
1000cfb6:	f7ff ff0d 	bl	1000cdd4 <_ai_platform_release_crc>
1000cfba:	f241 0010 	movw	r0, #4112	; 0x1010
1000cfbe:	bd10      	pop	{r4, pc}
1000cfc0:	f7ff ff08 	bl	1000cdd4 <_ai_platform_release_crc>
1000cfc4:	f104 0010 	add.w	r0, r4, #16
1000cfc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000cfcc:	f000 bd36 	b.w	1000da3c <core_get_error>
1000cfd0:	a1c00100 	.word	0xa1c00100
1000cfd4:	4c004000 	.word	0x4c004000
1000cfd8:	f407a5c2 	.word	0xf407a5c2
1000cfdc:	b5e8b5cd 	.word	0xb5e8b5cd

1000cfe0 <ai_platform_network_set_error>:
1000cfe0:	b110      	cbz	r0, 1000cfe8 <ai_platform_network_set_error+0x8>
1000cfe2:	3010      	adds	r0, #16
1000cfe4:	f000 bd30 	b.w	1000da48 <core_set_error>
1000cfe8:	4770      	bx	lr
1000cfea:	bf00      	nop

1000cfec <ai_platform_inputs_get>:
1000cfec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000cff0:	b083      	sub	sp, #12
1000cff2:	9100      	str	r1, [sp, #0]
1000cff4:	b198      	cbz	r0, 1000d01e <ai_platform_inputs_get+0x32>
1000cff6:	4b47      	ldr	r3, [pc, #284]	; (1000d114 <ai_platform_inputs_get+0x128>)
1000cff8:	6802      	ldr	r2, [r0, #0]
1000cffa:	429a      	cmp	r2, r3
1000cffc:	4607      	mov	r7, r0
1000cffe:	d10e      	bne.n	1000d01e <ai_platform_inputs_get+0x32>
1000d000:	f7ff fee6 	bl	1000cdd0 <_ai_platform_acquire_crc>
1000d004:	4b44      	ldr	r3, [pc, #272]	; (1000d118 <ai_platform_inputs_get+0x12c>)
1000d006:	2201      	movs	r2, #1
1000d008:	609a      	str	r2, [r3, #8]
1000d00a:	689c      	ldr	r4, [r3, #8]
1000d00c:	2c00      	cmp	r4, #0
1000d00e:	d1fc      	bne.n	1000d00a <ai_platform_inputs_get+0x1e>
1000d010:	4a42      	ldr	r2, [pc, #264]	; (1000d11c <ai_platform_inputs_get+0x130>)
1000d012:	601a      	str	r2, [r3, #0]
1000d014:	681a      	ldr	r2, [r3, #0]
1000d016:	4b42      	ldr	r3, [pc, #264]	; (1000d120 <ai_platform_inputs_get+0x134>)
1000d018:	429a      	cmp	r2, r3
1000d01a:	d015      	beq.n	1000d048 <ai_platform_inputs_get+0x5c>
1000d01c:	e7fe      	b.n	1000d01c <ai_platform_inputs_get+0x30>
1000d01e:	f7ff fed7 	bl	1000cdd0 <_ai_platform_acquire_crc>
1000d022:	4b3d      	ldr	r3, [pc, #244]	; (1000d118 <ai_platform_inputs_get+0x12c>)
1000d024:	2201      	movs	r2, #1
1000d026:	609a      	str	r2, [r3, #8]
1000d028:	689c      	ldr	r4, [r3, #8]
1000d02a:	2c00      	cmp	r4, #0
1000d02c:	d1fc      	bne.n	1000d028 <ai_platform_inputs_get+0x3c>
1000d02e:	4a3b      	ldr	r2, [pc, #236]	; (1000d11c <ai_platform_inputs_get+0x130>)
1000d030:	601a      	str	r2, [r3, #0]
1000d032:	681a      	ldr	r2, [r3, #0]
1000d034:	4b3a      	ldr	r3, [pc, #232]	; (1000d120 <ai_platform_inputs_get+0x134>)
1000d036:	429a      	cmp	r2, r3
1000d038:	d000      	beq.n	1000d03c <ai_platform_inputs_get+0x50>
1000d03a:	e7fe      	b.n	1000d03a <ai_platform_inputs_get+0x4e>
1000d03c:	f7ff feca 	bl	1000cdd4 <_ai_platform_release_crc>
1000d040:	4620      	mov	r0, r4
1000d042:	b003      	add	sp, #12
1000d044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000d048:	f7ff fec4 	bl	1000cdd4 <_ai_platform_release_crc>
1000d04c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
1000d04e:	2b00      	cmp	r3, #0
1000d050:	d04c      	beq.n	1000d0ec <ai_platform_inputs_get+0x100>
1000d052:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
1000d056:	f1b9 0f00 	cmp.w	r9, #0
1000d05a:	d047      	beq.n	1000d0ec <ai_platform_inputs_get+0x100>
1000d05c:	46a2      	mov	sl, r4
1000d05e:	9701      	str	r7, [sp, #4]
1000d060:	e016      	b.n	1000d090 <ai_platform_inputs_get+0xa4>
1000d062:	2201      	movs	r2, #1
1000d064:	f847 200e 	str.w	r2, [r7, lr]
1000d068:	69b2      	ldr	r2, [r6, #24]
1000d06a:	6852      	ldr	r2, [r2, #4]
1000d06c:	60ab      	str	r3, [r5, #8]
1000d06e:	f04f 0301 	mov.w	r3, #1
1000d072:	752b      	strb	r3, [r5, #20]
1000d074:	2300      	movs	r3, #0
1000d076:	60eb      	str	r3, [r5, #12]
1000d078:	696b      	ldr	r3, [r5, #20]
1000d07a:	612a      	str	r2, [r5, #16]
1000d07c:	e9c5 0100 	strd	r0, r1, [r5]
1000d080:	f36b 231f 	bfi	r3, fp, #8, #24
1000d084:	f8c5 8018 	str.w	r8, [r5, #24]
1000d088:	3401      	adds	r4, #1
1000d08a:	f10a 0a1c 	add.w	sl, sl, #28
1000d08e:	616b      	str	r3, [r5, #20]
1000d090:	f8b9 3000 	ldrh.w	r3, [r9]
1000d094:	42a3      	cmp	r3, r4
1000d096:	b2a2      	uxth	r2, r4
1000d098:	d935      	bls.n	1000d106 <ai_platform_inputs_get+0x11a>
1000d09a:	f8d9 3004 	ldr.w	r3, [r9, #4]
1000d09e:	2b00      	cmp	r3, #0
1000d0a0:	d031      	beq.n	1000d106 <ai_platform_inputs_get+0x11a>
1000d0a2:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
1000d0a6:	b376      	cbz	r6, 1000d106 <ai_platform_inputs_get+0x11a>
1000d0a8:	f8d9 3008 	ldr.w	r3, [r9, #8]
1000d0ac:	69b2      	ldr	r2, [r6, #24]
1000d0ae:	f8d6 800c 	ldr.w	r8, [r6, #12]
1000d0b2:	6810      	ldr	r0, [r2, #0]
1000d0b4:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
1000d0b8:	68b3      	ldr	r3, [r6, #8]
1000d0ba:	f3c3 2b17 	ubfx	fp, r3, #8, #24
1000d0be:	f001 fb33 	bl	1000e728 <ai_array_to_buffer_fmt>
1000d0c2:	69b2      	ldr	r2, [r6, #24]
1000d0c4:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
1000d0c8:	6891      	ldr	r1, [r2, #8]
1000d0ca:	4455      	add	r5, sl
1000d0cc:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
1000d0d0:	2b00      	cmp	r3, #0
1000d0d2:	d0ca      	beq.n	1000d06a <ai_platform_inputs_get+0x7e>
1000d0d4:	2200      	movs	r2, #0
1000d0d6:	f847 2034 	str.w	r2, [r7, r4, lsl #3]
1000d0da:	6832      	ldr	r2, [r6, #0]
1000d0dc:	605a      	str	r2, [r3, #4]
1000d0de:	b112      	cbz	r2, 1000d0e6 <ai_platform_inputs_get+0xfa>
1000d0e0:	8852      	ldrh	r2, [r2, #2]
1000d0e2:	2a00      	cmp	r2, #0
1000d0e4:	d1bd      	bne.n	1000d062 <ai_platform_inputs_get+0x76>
1000d0e6:	69b2      	ldr	r2, [r6, #24]
1000d0e8:	2300      	movs	r3, #0
1000d0ea:	e7be      	b.n	1000d06a <ai_platform_inputs_get+0x7e>
1000d0ec:	2218      	movs	r2, #24
1000d0ee:	2111      	movs	r1, #17
1000d0f0:	f107 0010 	add.w	r0, r7, #16
1000d0f4:	f000 fca8 	bl	1000da48 <core_set_error>
1000d0f8:	2200      	movs	r2, #0
1000d0fa:	4610      	mov	r0, r2
1000d0fc:	9b00      	ldr	r3, [sp, #0]
1000d0fe:	2b00      	cmp	r3, #0
1000d100:	d09f      	beq.n	1000d042 <ai_platform_inputs_get+0x56>
1000d102:	801a      	strh	r2, [r3, #0]
1000d104:	e79d      	b.n	1000d042 <ai_platform_inputs_get+0x56>
1000d106:	9f01      	ldr	r7, [sp, #4]
1000d108:	2a00      	cmp	r2, #0
1000d10a:	d0ef      	beq.n	1000d0ec <ai_platform_inputs_get+0x100>
1000d10c:	f8d9 3008 	ldr.w	r3, [r9, #8]
1000d110:	6858      	ldr	r0, [r3, #4]
1000d112:	e7f3      	b.n	1000d0fc <ai_platform_inputs_get+0x110>
1000d114:	a1c00100 	.word	0xa1c00100
1000d118:	4c004000 	.word	0x4c004000
1000d11c:	f407a5c2 	.word	0xf407a5c2
1000d120:	b5e8b5cd 	.word	0xb5e8b5cd

1000d124 <ai_platform_outputs_get>:
1000d124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000d128:	b083      	sub	sp, #12
1000d12a:	9100      	str	r1, [sp, #0]
1000d12c:	b198      	cbz	r0, 1000d156 <ai_platform_outputs_get+0x32>
1000d12e:	4b45      	ldr	r3, [pc, #276]	; (1000d244 <ai_platform_outputs_get+0x120>)
1000d130:	6802      	ldr	r2, [r0, #0]
1000d132:	429a      	cmp	r2, r3
1000d134:	4607      	mov	r7, r0
1000d136:	d10e      	bne.n	1000d156 <ai_platform_outputs_get+0x32>
1000d138:	f7ff fe4a 	bl	1000cdd0 <_ai_platform_acquire_crc>
1000d13c:	4b42      	ldr	r3, [pc, #264]	; (1000d248 <ai_platform_outputs_get+0x124>)
1000d13e:	2201      	movs	r2, #1
1000d140:	609a      	str	r2, [r3, #8]
1000d142:	689c      	ldr	r4, [r3, #8]
1000d144:	2c00      	cmp	r4, #0
1000d146:	d1fc      	bne.n	1000d142 <ai_platform_outputs_get+0x1e>
1000d148:	4a40      	ldr	r2, [pc, #256]	; (1000d24c <ai_platform_outputs_get+0x128>)
1000d14a:	601a      	str	r2, [r3, #0]
1000d14c:	681a      	ldr	r2, [r3, #0]
1000d14e:	4b40      	ldr	r3, [pc, #256]	; (1000d250 <ai_platform_outputs_get+0x12c>)
1000d150:	429a      	cmp	r2, r3
1000d152:	d015      	beq.n	1000d180 <ai_platform_outputs_get+0x5c>
1000d154:	e7fe      	b.n	1000d154 <ai_platform_outputs_get+0x30>
1000d156:	f7ff fe3b 	bl	1000cdd0 <_ai_platform_acquire_crc>
1000d15a:	4b3b      	ldr	r3, [pc, #236]	; (1000d248 <ai_platform_outputs_get+0x124>)
1000d15c:	2201      	movs	r2, #1
1000d15e:	609a      	str	r2, [r3, #8]
1000d160:	689c      	ldr	r4, [r3, #8]
1000d162:	2c00      	cmp	r4, #0
1000d164:	d1fc      	bne.n	1000d160 <ai_platform_outputs_get+0x3c>
1000d166:	4a39      	ldr	r2, [pc, #228]	; (1000d24c <ai_platform_outputs_get+0x128>)
1000d168:	601a      	str	r2, [r3, #0]
1000d16a:	681a      	ldr	r2, [r3, #0]
1000d16c:	4b38      	ldr	r3, [pc, #224]	; (1000d250 <ai_platform_outputs_get+0x12c>)
1000d16e:	429a      	cmp	r2, r3
1000d170:	d000      	beq.n	1000d174 <ai_platform_outputs_get+0x50>
1000d172:	e7fe      	b.n	1000d172 <ai_platform_outputs_get+0x4e>
1000d174:	f7ff fe2e 	bl	1000cdd4 <_ai_platform_release_crc>
1000d178:	4620      	mov	r0, r4
1000d17a:	b003      	add	sp, #12
1000d17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000d180:	f7ff fe28 	bl	1000cdd4 <_ai_platform_release_crc>
1000d184:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
1000d186:	2b01      	cmp	r3, #1
1000d188:	d952      	bls.n	1000d230 <ai_platform_outputs_get+0x10c>
1000d18a:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
1000d18e:	9701      	str	r7, [sp, #4]
1000d190:	46a2      	mov	sl, r4
1000d192:	e016      	b.n	1000d1c2 <ai_platform_outputs_get+0x9e>
1000d194:	2201      	movs	r2, #1
1000d196:	f847 200e 	str.w	r2, [r7, lr]
1000d19a:	69b2      	ldr	r2, [r6, #24]
1000d19c:	6852      	ldr	r2, [r2, #4]
1000d19e:	60ab      	str	r3, [r5, #8]
1000d1a0:	f04f 0301 	mov.w	r3, #1
1000d1a4:	752b      	strb	r3, [r5, #20]
1000d1a6:	2300      	movs	r3, #0
1000d1a8:	60eb      	str	r3, [r5, #12]
1000d1aa:	696b      	ldr	r3, [r5, #20]
1000d1ac:	612a      	str	r2, [r5, #16]
1000d1ae:	e9c5 0100 	strd	r0, r1, [r5]
1000d1b2:	f36b 231f 	bfi	r3, fp, #8, #24
1000d1b6:	f8c5 8018 	str.w	r8, [r5, #24]
1000d1ba:	3401      	adds	r4, #1
1000d1bc:	f10a 0a1c 	add.w	sl, sl, #28
1000d1c0:	616b      	str	r3, [r5, #20]
1000d1c2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1000d1c6:	42a3      	cmp	r3, r4
1000d1c8:	b2a2      	uxth	r2, r4
1000d1ca:	d927      	bls.n	1000d21c <ai_platform_outputs_get+0xf8>
1000d1cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
1000d1d0:	b323      	cbz	r3, 1000d21c <ai_platform_outputs_get+0xf8>
1000d1d2:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
1000d1d6:	b30e      	cbz	r6, 1000d21c <ai_platform_outputs_get+0xf8>
1000d1d8:	f8d9 3014 	ldr.w	r3, [r9, #20]
1000d1dc:	69b2      	ldr	r2, [r6, #24]
1000d1de:	f8d6 800c 	ldr.w	r8, [r6, #12]
1000d1e2:	6810      	ldr	r0, [r2, #0]
1000d1e4:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
1000d1e8:	68b3      	ldr	r3, [r6, #8]
1000d1ea:	f3c3 2b17 	ubfx	fp, r3, #8, #24
1000d1ee:	f001 fa9b 	bl	1000e728 <ai_array_to_buffer_fmt>
1000d1f2:	69b2      	ldr	r2, [r6, #24]
1000d1f4:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
1000d1f8:	6891      	ldr	r1, [r2, #8]
1000d1fa:	4455      	add	r5, sl
1000d1fc:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
1000d200:	2b00      	cmp	r3, #0
1000d202:	d0cb      	beq.n	1000d19c <ai_platform_outputs_get+0x78>
1000d204:	2200      	movs	r2, #0
1000d206:	f847 2034 	str.w	r2, [r7, r4, lsl #3]
1000d20a:	6832      	ldr	r2, [r6, #0]
1000d20c:	605a      	str	r2, [r3, #4]
1000d20e:	b112      	cbz	r2, 1000d216 <ai_platform_outputs_get+0xf2>
1000d210:	8852      	ldrh	r2, [r2, #2]
1000d212:	2a00      	cmp	r2, #0
1000d214:	d1be      	bne.n	1000d194 <ai_platform_outputs_get+0x70>
1000d216:	69b2      	ldr	r2, [r6, #24]
1000d218:	2300      	movs	r3, #0
1000d21a:	e7bf      	b.n	1000d19c <ai_platform_outputs_get+0x78>
1000d21c:	9f01      	ldr	r7, [sp, #4]
1000d21e:	b13a      	cbz	r2, 1000d230 <ai_platform_outputs_get+0x10c>
1000d220:	f8d9 3014 	ldr.w	r3, [r9, #20]
1000d224:	6858      	ldr	r0, [r3, #4]
1000d226:	9b00      	ldr	r3, [sp, #0]
1000d228:	2b00      	cmp	r3, #0
1000d22a:	d0a6      	beq.n	1000d17a <ai_platform_outputs_get+0x56>
1000d22c:	801a      	strh	r2, [r3, #0]
1000d22e:	e7a4      	b.n	1000d17a <ai_platform_outputs_get+0x56>
1000d230:	2218      	movs	r2, #24
1000d232:	2111      	movs	r1, #17
1000d234:	f107 0010 	add.w	r0, r7, #16
1000d238:	f000 fc06 	bl	1000da48 <core_set_error>
1000d23c:	2200      	movs	r2, #0
1000d23e:	4610      	mov	r0, r2
1000d240:	e7f1      	b.n	1000d226 <ai_platform_outputs_get+0x102>
1000d242:	bf00      	nop
1000d244:	a1c00100 	.word	0xa1c00100
1000d248:	4c004000 	.word	0x4c004000
1000d24c:	f407a5c2 	.word	0xf407a5c2
1000d250:	b5e8b5cd 	.word	0xb5e8b5cd

1000d254 <ai_platform_network_create>:
1000d254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1000d258:	b082      	sub	sp, #8
1000d25a:	4605      	mov	r5, r0
1000d25c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
1000d260:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
1000d264:	4616      	mov	r6, r2
1000d266:	461f      	mov	r7, r3
1000d268:	f7ff fdb2 	bl	1000cdd0 <_ai_platform_acquire_crc>
1000d26c:	b138      	cbz	r0, 1000d27e <ai_platform_network_create+0x2a>
1000d26e:	4c38      	ldr	r4, [pc, #224]	; (1000d350 <ai_platform_network_create+0xfc>)
1000d270:	2218      	movs	r2, #24
1000d272:	60a2      	str	r2, [r4, #8]
1000d274:	68a2      	ldr	r2, [r4, #8]
1000d276:	2a18      	cmp	r2, #24
1000d278:	d006      	beq.n	1000d288 <ai_platform_network_create+0x34>
1000d27a:	f7ff fdab 	bl	1000cdd4 <_ai_platform_release_crc>
1000d27e:	f244 1033 	movw	r0, #16691	; 0x4133
1000d282:	b002      	add	sp, #8
1000d284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000d288:	2201      	movs	r2, #1
1000d28a:	4603      	mov	r3, r0
1000d28c:	60a2      	str	r2, [r4, #8]
1000d28e:	68a2      	ldr	r2, [r4, #8]
1000d290:	2a00      	cmp	r2, #0
1000d292:	d1fc      	bne.n	1000d28e <ai_platform_network_create+0x3a>
1000d294:	4618      	mov	r0, r3
1000d296:	f7ff fd9d 	bl	1000cdd4 <_ai_platform_release_crc>
1000d29a:	f7ff fd99 	bl	1000cdd0 <_ai_platform_acquire_crc>
1000d29e:	2301      	movs	r3, #1
1000d2a0:	60a3      	str	r3, [r4, #8]
1000d2a2:	4c2b      	ldr	r4, [pc, #172]	; (1000d350 <ai_platform_network_create+0xfc>)
1000d2a4:	68a1      	ldr	r1, [r4, #8]
1000d2a6:	2900      	cmp	r1, #0
1000d2a8:	d1fc      	bne.n	1000d2a4 <ai_platform_network_create+0x50>
1000d2aa:	4b2a      	ldr	r3, [pc, #168]	; (1000d354 <ai_platform_network_create+0x100>)
1000d2ac:	6023      	str	r3, [r4, #0]
1000d2ae:	6822      	ldr	r2, [r4, #0]
1000d2b0:	4b29      	ldr	r3, [pc, #164]	; (1000d358 <ai_platform_network_create+0x104>)
1000d2b2:	429a      	cmp	r2, r3
1000d2b4:	d000      	beq.n	1000d2b8 <ai_platform_network_create+0x64>
1000d2b6:	e7fe      	b.n	1000d2b6 <ai_platform_network_create+0x62>
1000d2b8:	f7ff fd8c 	bl	1000cdd4 <_ai_platform_release_crc>
1000d2bc:	2d00      	cmp	r5, #0
1000d2be:	d038      	beq.n	1000d332 <ai_platform_network_create+0xde>
1000d2c0:	4b26      	ldr	r3, [pc, #152]	; (1000d35c <ai_platform_network_create+0x108>)
1000d2c2:	6033      	str	r3, [r6, #0]
1000d2c4:	602e      	str	r6, [r5, #0]
1000d2c6:	f000 fbb7 	bl	1000da38 <core_init>
1000d2ca:	b988      	cbnz	r0, 1000d2f0 <ai_platform_network_create+0x9c>
1000d2cc:	f04f 0a30 	mov.w	sl, #48	; 0x30
1000d2d0:	2300      	movs	r3, #0
1000d2d2:	602b      	str	r3, [r5, #0]
1000d2d4:	2410      	movs	r4, #16
1000d2d6:	464a      	mov	r2, r9
1000d2d8:	4641      	mov	r1, r8
1000d2da:	4638      	mov	r0, r7
1000d2dc:	f001 faca 	bl	1000e874 <ai_version_get>
1000d2e0:	4603      	mov	r3, r0
1000d2e2:	2000      	movs	r0, #0
1000d2e4:	f36a 0007 	bfi	r0, sl, #0, #8
1000d2e8:	64b3      	str	r3, [r6, #72]	; 0x48
1000d2ea:	f364 201f 	bfi	r0, r4, #8, #24
1000d2ee:	e7c8      	b.n	1000d282 <ai_platform_network_create+0x2e>
1000d2f0:	f7ff fd6e 	bl	1000cdd0 <_ai_platform_acquire_crc>
1000d2f4:	2301      	movs	r3, #1
1000d2f6:	60a3      	str	r3, [r4, #8]
1000d2f8:	4b15      	ldr	r3, [pc, #84]	; (1000d350 <ai_platform_network_create+0xfc>)
1000d2fa:	689c      	ldr	r4, [r3, #8]
1000d2fc:	2c00      	cmp	r4, #0
1000d2fe:	d1fc      	bne.n	1000d2fa <ai_platform_network_create+0xa6>
1000d300:	4a14      	ldr	r2, [pc, #80]	; (1000d354 <ai_platform_network_create+0x100>)
1000d302:	601a      	str	r2, [r3, #0]
1000d304:	681a      	ldr	r2, [r3, #0]
1000d306:	4b14      	ldr	r3, [pc, #80]	; (1000d358 <ai_platform_network_create+0x104>)
1000d308:	429a      	cmp	r2, r3
1000d30a:	d000      	beq.n	1000d30e <ai_platform_network_create+0xba>
1000d30c:	e7fe      	b.n	1000d30c <ai_platform_network_create+0xb8>
1000d30e:	f7ff fd61 	bl	1000cdd4 <_ai_platform_release_crc>
1000d312:	4622      	mov	r2, r4
1000d314:	4641      	mov	r1, r8
1000d316:	4638      	mov	r0, r7
1000d318:	f001 faac 	bl	1000e874 <ai_version_get>
1000d31c:	4622      	mov	r2, r4
1000d31e:	4682      	mov	sl, r0
1000d320:	2105      	movs	r1, #5
1000d322:	2001      	movs	r0, #1
1000d324:	f001 faa6 	bl	1000e874 <ai_version_get>
1000d328:	4582      	cmp	sl, r0
1000d32a:	d005      	beq.n	1000d338 <ai_platform_network_create+0xe4>
1000d32c:	f04f 0a01 	mov.w	sl, #1
1000d330:	e7ce      	b.n	1000d2d0 <ai_platform_network_create+0x7c>
1000d332:	f241 0010 	movw	r0, #4112	; 0x1010
1000d336:	e7a4      	b.n	1000d282 <ai_platform_network_create+0x2e>
1000d338:	4b09      	ldr	r3, [pc, #36]	; (1000d360 <ai_platform_network_create+0x10c>)
1000d33a:	9301      	str	r3, [sp, #4]
1000d33c:	a801      	add	r0, sp, #4
1000d33e:	f000 fb8f 	bl	1000da60 <ai_check_custom_types>
1000d342:	b108      	cbz	r0, 1000d348 <ai_platform_network_create+0xf4>
1000d344:	46a2      	mov	sl, r4
1000d346:	e7c6      	b.n	1000d2d6 <ai_platform_network_create+0x82>
1000d348:	f04f 0a02 	mov.w	sl, #2
1000d34c:	e7c0      	b.n	1000d2d0 <ai_platform_network_create+0x7c>
1000d34e:	bf00      	nop
1000d350:	4c004000 	.word	0x4c004000
1000d354:	f407a5c2 	.word	0xf407a5c2
1000d358:	b5e8b5cd 	.word	0xb5e8b5cd
1000d35c:	a1c00100 	.word	0xa1c00100
1000d360:	84048403 	.word	0x84048403

1000d364 <ai_platform_network_init>:
1000d364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1000d368:	b1a0      	cbz	r0, 1000d394 <ai_platform_network_init+0x30>
1000d36a:	4b53      	ldr	r3, [pc, #332]	; (1000d4b8 <ai_platform_network_init+0x154>)
1000d36c:	6802      	ldr	r2, [r0, #0]
1000d36e:	429a      	cmp	r2, r3
1000d370:	4605      	mov	r5, r0
1000d372:	d10f      	bne.n	1000d394 <ai_platform_network_init+0x30>
1000d374:	460c      	mov	r4, r1
1000d376:	f7ff fd2b 	bl	1000cdd0 <_ai_platform_acquire_crc>
1000d37a:	4a50      	ldr	r2, [pc, #320]	; (1000d4bc <ai_platform_network_init+0x158>)
1000d37c:	2301      	movs	r3, #1
1000d37e:	6093      	str	r3, [r2, #8]
1000d380:	6893      	ldr	r3, [r2, #8]
1000d382:	2b00      	cmp	r3, #0
1000d384:	d1fc      	bne.n	1000d380 <ai_platform_network_init+0x1c>
1000d386:	4b4e      	ldr	r3, [pc, #312]	; (1000d4c0 <ai_platform_network_init+0x15c>)
1000d388:	6013      	str	r3, [r2, #0]
1000d38a:	6812      	ldr	r2, [r2, #0]
1000d38c:	4b4d      	ldr	r3, [pc, #308]	; (1000d4c4 <ai_platform_network_init+0x160>)
1000d38e:	429a      	cmp	r2, r3
1000d390:	d014      	beq.n	1000d3bc <ai_platform_network_init+0x58>
1000d392:	e7fe      	b.n	1000d392 <ai_platform_network_init+0x2e>
1000d394:	f7ff fd1c 	bl	1000cdd0 <_ai_platform_acquire_crc>
1000d398:	4b48      	ldr	r3, [pc, #288]	; (1000d4bc <ai_platform_network_init+0x158>)
1000d39a:	2201      	movs	r2, #1
1000d39c:	609a      	str	r2, [r3, #8]
1000d39e:	689c      	ldr	r4, [r3, #8]
1000d3a0:	2c00      	cmp	r4, #0
1000d3a2:	d1fc      	bne.n	1000d39e <ai_platform_network_init+0x3a>
1000d3a4:	4a46      	ldr	r2, [pc, #280]	; (1000d4c0 <ai_platform_network_init+0x15c>)
1000d3a6:	601a      	str	r2, [r3, #0]
1000d3a8:	681a      	ldr	r2, [r3, #0]
1000d3aa:	4b46      	ldr	r3, [pc, #280]	; (1000d4c4 <ai_platform_network_init+0x160>)
1000d3ac:	429a      	cmp	r2, r3
1000d3ae:	d000      	beq.n	1000d3b2 <ai_platform_network_init+0x4e>
1000d3b0:	e7fe      	b.n	1000d3b0 <ai_platform_network_init+0x4c>
1000d3b2:	f7ff fd0f 	bl	1000cdd4 <_ai_platform_release_crc>
1000d3b6:	4620      	mov	r0, r4
1000d3b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000d3bc:	f7ff fd0a 	bl	1000cdd4 <_ai_platform_release_crc>
1000d3c0:	2c00      	cmp	r4, #0
1000d3c2:	d06c      	beq.n	1000d49e <ai_platform_network_init+0x13a>
1000d3c4:	4b40      	ldr	r3, [pc, #256]	; (1000d4c8 <ai_platform_network_init+0x164>)
1000d3c6:	6822      	ldr	r2, [r4, #0]
1000d3c8:	429a      	cmp	r2, r3
1000d3ca:	d110      	bne.n	1000d3ee <ai_platform_network_init+0x8a>
1000d3cc:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
1000d3d0:	6923      	ldr	r3, [r4, #16]
1000d3d2:	89a6      	ldrh	r6, [r4, #12]
1000d3d4:	89e7      	ldrh	r7, [r4, #14]
1000d3d6:	62ab      	str	r3, [r5, #40]	; 0x28
1000d3d8:	e9c5 2107 	strd	r2, r1, [r5, #28]
1000d3dc:	2303      	movs	r3, #3
1000d3de:	84ef      	strh	r7, [r5, #38]	; 0x26
1000d3e0:	84ae      	strh	r6, [r5, #36]	; 0x24
1000d3e2:	60eb      	str	r3, [r5, #12]
1000d3e4:	4628      	mov	r0, r5
1000d3e6:	f000 fb65 	bl	1000dab4 <ai_layers_init_all>
1000d3ea:	462c      	mov	r4, r5
1000d3ec:	e7e3      	b.n	1000d3b6 <ai_platform_network_init+0x52>
1000d3ee:	2101      	movs	r1, #1
1000d3f0:	4620      	mov	r0, r4
1000d3f2:	46a1      	mov	r9, r4
1000d3f4:	6864      	ldr	r4, [r4, #4]
1000d3f6:	f7ff fc9d 	bl	1000cd34 <ai_buffer_get_size>
1000d3fa:	f109 081c 	add.w	r8, r9, #28
1000d3fe:	4606      	mov	r6, r0
1000d400:	2101      	movs	r1, #1
1000d402:	4640      	mov	r0, r8
1000d404:	f8d9 7020 	ldr.w	r7, [r9, #32]
1000d408:	f7ff fc94 	bl	1000cd34 <ai_buffer_get_size>
1000d40c:	bb5e      	cbnz	r6, 1000d466 <ai_platform_network_init+0x102>
1000d40e:	4633      	mov	r3, r6
1000d410:	46b6      	mov	lr, r6
1000d412:	46b1      	mov	r9, r6
1000d414:	bb20      	cbnz	r0, 1000d460 <ai_platform_network_init+0xfc>
1000d416:	4680      	mov	r8, r0
1000d418:	4607      	mov	r7, r0
1000d41a:	b37c      	cbz	r4, 1000d47c <ai_platform_network_init+0x118>
1000d41c:	8bea      	ldrh	r2, [r5, #30]
1000d41e:	4572      	cmp	r2, lr
1000d420:	d324      	bcc.n	1000d46c <ai_platform_network_init+0x108>
1000d422:	b143      	cbz	r3, 1000d436 <ai_platform_network_init+0xd2>
1000d424:	46cc      	mov	ip, r9
1000d426:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
1000d42a:	6a2c      	ldr	r4, [r5, #32]
1000d42c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1000d42e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
1000d432:	e884 0007 	stmia.w	r4, {r0, r1, r2}
1000d436:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
1000d438:	f8a5 e01e 	strh.w	lr, [r5, #30]
1000d43c:	2400      	movs	r4, #0
1000d43e:	42bb      	cmp	r3, r7
1000d440:	83ac      	strh	r4, [r5, #28]
1000d442:	d323      	bcc.n	1000d48c <ai_platform_network_init+0x128>
1000d444:	b34f      	cbz	r7, 1000d49a <ai_platform_network_init+0x136>
1000d446:	46c6      	mov	lr, r8
1000d448:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
1000d44c:	f8d5 c028 	ldr.w	ip, [r5, #40]	; 0x28
1000d450:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
1000d454:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
1000d458:	4626      	mov	r6, r4
1000d45a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
1000d45e:	e7bd      	b.n	1000d3dc <ai_platform_network_init+0x78>
1000d460:	b31f      	cbz	r7, 1000d4aa <ai_platform_network_init+0x146>
1000d462:	2701      	movs	r7, #1
1000d464:	e7d9      	b.n	1000d41a <ai_platform_network_init+0xb6>
1000d466:	2301      	movs	r3, #1
1000d468:	469e      	mov	lr, r3
1000d46a:	e7d3      	b.n	1000d414 <ai_platform_network_init+0xb0>
1000d46c:	2212      	movs	r2, #18
1000d46e:	2116      	movs	r1, #22
1000d470:	f105 0010 	add.w	r0, r5, #16
1000d474:	f000 fae8 	bl	1000da48 <core_set_error>
1000d478:	2400      	movs	r4, #0
1000d47a:	e79c      	b.n	1000d3b6 <ai_platform_network_init+0x52>
1000d47c:	2e00      	cmp	r6, #0
1000d47e:	d0cd      	beq.n	1000d41c <ai_platform_network_init+0xb8>
1000d480:	2110      	movs	r1, #16
1000d482:	2212      	movs	r2, #18
1000d484:	1868      	adds	r0, r5, r1
1000d486:	f000 fadf 	bl	1000da48 <core_set_error>
1000d48a:	e794      	b.n	1000d3b6 <ai_platform_network_init+0x52>
1000d48c:	2213      	movs	r2, #19
1000d48e:	2116      	movs	r1, #22
1000d490:	f105 0010 	add.w	r0, r5, #16
1000d494:	f000 fad8 	bl	1000da48 <core_set_error>
1000d498:	e78d      	b.n	1000d3b6 <ai_platform_network_init+0x52>
1000d49a:	463e      	mov	r6, r7
1000d49c:	e79e      	b.n	1000d3dc <ai_platform_network_init+0x78>
1000d49e:	2110      	movs	r1, #16
1000d4a0:	2211      	movs	r2, #17
1000d4a2:	1868      	adds	r0, r5, r1
1000d4a4:	f000 fad0 	bl	1000da48 <core_set_error>
1000d4a8:	e785      	b.n	1000d3b6 <ai_platform_network_init+0x52>
1000d4aa:	2110      	movs	r1, #16
1000d4ac:	2213      	movs	r2, #19
1000d4ae:	1868      	adds	r0, r5, r1
1000d4b0:	f000 faca 	bl	1000da48 <core_set_error>
1000d4b4:	463c      	mov	r4, r7
1000d4b6:	e77e      	b.n	1000d3b6 <ai_platform_network_init+0x52>
1000d4b8:	a1c00100 	.word	0xa1c00100
1000d4bc:	4c004000 	.word	0x4c004000
1000d4c0:	f407a5c2 	.word	0xf407a5c2
1000d4c4:	b5e8b5cd 	.word	0xb5e8b5cd
1000d4c8:	a1facade 	.word	0xa1facade

1000d4cc <ai_platform_network_post_init>:
1000d4cc:	b538      	push	{r3, r4, r5, lr}
1000d4ce:	b198      	cbz	r0, 1000d4f8 <ai_platform_network_post_init+0x2c>
1000d4d0:	4b24      	ldr	r3, [pc, #144]	; (1000d564 <ai_platform_network_post_init+0x98>)
1000d4d2:	6802      	ldr	r2, [r0, #0]
1000d4d4:	429a      	cmp	r2, r3
1000d4d6:	4605      	mov	r5, r0
1000d4d8:	d10e      	bne.n	1000d4f8 <ai_platform_network_post_init+0x2c>
1000d4da:	f7ff fc79 	bl	1000cdd0 <_ai_platform_acquire_crc>
1000d4de:	4a22      	ldr	r2, [pc, #136]	; (1000d568 <ai_platform_network_post_init+0x9c>)
1000d4e0:	2301      	movs	r3, #1
1000d4e2:	6093      	str	r3, [r2, #8]
1000d4e4:	6893      	ldr	r3, [r2, #8]
1000d4e6:	2b00      	cmp	r3, #0
1000d4e8:	d1fc      	bne.n	1000d4e4 <ai_platform_network_post_init+0x18>
1000d4ea:	4b20      	ldr	r3, [pc, #128]	; (1000d56c <ai_platform_network_post_init+0xa0>)
1000d4ec:	6013      	str	r3, [r2, #0]
1000d4ee:	6812      	ldr	r2, [r2, #0]
1000d4f0:	4b1f      	ldr	r3, [pc, #124]	; (1000d570 <ai_platform_network_post_init+0xa4>)
1000d4f2:	429a      	cmp	r2, r3
1000d4f4:	d013      	beq.n	1000d51e <ai_platform_network_post_init+0x52>
1000d4f6:	e7fe      	b.n	1000d4f6 <ai_platform_network_post_init+0x2a>
1000d4f8:	f7ff fc6a 	bl	1000cdd0 <_ai_platform_acquire_crc>
1000d4fc:	4b1a      	ldr	r3, [pc, #104]	; (1000d568 <ai_platform_network_post_init+0x9c>)
1000d4fe:	2201      	movs	r2, #1
1000d500:	609a      	str	r2, [r3, #8]
1000d502:	689c      	ldr	r4, [r3, #8]
1000d504:	2c00      	cmp	r4, #0
1000d506:	d1fc      	bne.n	1000d502 <ai_platform_network_post_init+0x36>
1000d508:	4a18      	ldr	r2, [pc, #96]	; (1000d56c <ai_platform_network_post_init+0xa0>)
1000d50a:	601a      	str	r2, [r3, #0]
1000d50c:	681a      	ldr	r2, [r3, #0]
1000d50e:	4b18      	ldr	r3, [pc, #96]	; (1000d570 <ai_platform_network_post_init+0xa4>)
1000d510:	429a      	cmp	r2, r3
1000d512:	d000      	beq.n	1000d516 <ai_platform_network_post_init+0x4a>
1000d514:	e7fe      	b.n	1000d514 <ai_platform_network_post_init+0x48>
1000d516:	f7ff fc5d 	bl	1000cdd4 <_ai_platform_release_crc>
1000d51a:	4620      	mov	r0, r4
1000d51c:	bd38      	pop	{r3, r4, r5, pc}
1000d51e:	f7ff fc59 	bl	1000cdd4 <_ai_platform_release_crc>
1000d522:	68eb      	ldr	r3, [r5, #12]
1000d524:	f013 0402 	ands.w	r4, r3, #2
1000d528:	d014      	beq.n	1000d554 <ai_platform_network_post_init+0x88>
1000d52a:	4628      	mov	r0, r5
1000d52c:	f000 fad0 	bl	1000dad0 <ai_layers_post_init_all>
1000d530:	6beb      	ldr	r3, [r5, #60]	; 0x3c
1000d532:	b16b      	cbz	r3, 1000d550 <ai_platform_network_post_init+0x84>
1000d534:	6b6c      	ldr	r4, [r5, #52]	; 0x34
1000d536:	e007      	b.n	1000d548 <ai_platform_network_post_init+0x7c>
1000d538:	e9d5 320f 	ldrd	r3, r2, [r5, #60]	; 0x3c
1000d53c:	4798      	blx	r3
1000d53e:	6923      	ldr	r3, [r4, #16]
1000d540:	42a3      	cmp	r3, r4
1000d542:	d005      	beq.n	1000d550 <ai_platform_network_post_init+0x84>
1000d544:	b123      	cbz	r3, 1000d550 <ai_platform_network_post_init+0x84>
1000d546:	461c      	mov	r4, r3
1000d548:	4621      	mov	r1, r4
1000d54a:	2000      	movs	r0, #0
1000d54c:	2c00      	cmp	r4, #0
1000d54e:	d1f3      	bne.n	1000d538 <ai_platform_network_post_init+0x6c>
1000d550:	2001      	movs	r0, #1
1000d552:	bd38      	pop	{r3, r4, r5, pc}
1000d554:	2210      	movs	r2, #16
1000d556:	2111      	movs	r1, #17
1000d558:	18a8      	adds	r0, r5, r2
1000d55a:	f000 fa75 	bl	1000da48 <core_set_error>
1000d55e:	4620      	mov	r0, r4
1000d560:	bd38      	pop	{r3, r4, r5, pc}
1000d562:	bf00      	nop
1000d564:	a1c00100 	.word	0xa1c00100
1000d568:	4c004000 	.word	0x4c004000
1000d56c:	f407a5c2 	.word	0xf407a5c2
1000d570:	b5e8b5cd 	.word	0xb5e8b5cd

1000d574 <ai_platform_network_process>:
1000d574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000d578:	460f      	mov	r7, r1
1000d57a:	b083      	sub	sp, #12
1000d57c:	4690      	mov	r8, r2
1000d57e:	4605      	mov	r5, r0
1000d580:	b120      	cbz	r0, 1000d58c <ai_platform_network_process+0x18>
1000d582:	4bb4      	ldr	r3, [pc, #720]	; (1000d854 <ai_platform_network_process+0x2e0>)
1000d584:	6802      	ldr	r2, [r0, #0]
1000d586:	429a      	cmp	r2, r3
1000d588:	bf18      	it	ne
1000d58a:	2500      	movne	r5, #0
1000d58c:	f7ff fc20 	bl	1000cdd0 <_ai_platform_acquire_crc>
1000d590:	4bb1      	ldr	r3, [pc, #708]	; (1000d858 <ai_platform_network_process+0x2e4>)
1000d592:	2201      	movs	r2, #1
1000d594:	609a      	str	r2, [r3, #8]
1000d596:	689c      	ldr	r4, [r3, #8]
1000d598:	2c00      	cmp	r4, #0
1000d59a:	d1fc      	bne.n	1000d596 <ai_platform_network_process+0x22>
1000d59c:	4aaf      	ldr	r2, [pc, #700]	; (1000d85c <ai_platform_network_process+0x2e8>)
1000d59e:	601a      	str	r2, [r3, #0]
1000d5a0:	681a      	ldr	r2, [r3, #0]
1000d5a2:	4baf      	ldr	r3, [pc, #700]	; (1000d860 <ai_platform_network_process+0x2ec>)
1000d5a4:	429a      	cmp	r2, r3
1000d5a6:	d000      	beq.n	1000d5aa <ai_platform_network_process+0x36>
1000d5a8:	e7fe      	b.n	1000d5a8 <ai_platform_network_process+0x34>
1000d5aa:	f7ff fc13 	bl	1000cdd4 <_ai_platform_release_crc>
1000d5ae:	2d00      	cmp	r5, #0
1000d5b0:	f000 8145 	beq.w	1000d83e <ai_platform_network_process+0x2ca>
1000d5b4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
1000d5b6:	b98b      	cbnz	r3, 1000d5dc <ai_platform_network_process+0x68>
1000d5b8:	68ea      	ldr	r2, [r5, #12]
1000d5ba:	616b      	str	r3, [r5, #20]
1000d5bc:	f002 0203 	and.w	r2, r2, #3
1000d5c0:	2a03      	cmp	r2, #3
1000d5c2:	f040 8134 	bne.w	1000d82e <ai_platform_network_process+0x2ba>
1000d5c6:	2217      	movs	r2, #23
1000d5c8:	2112      	movs	r1, #18
1000d5ca:	f105 0010 	add.w	r0, r5, #16
1000d5ce:	f000 fa3b 	bl	1000da48 <core_set_error>
1000d5d2:	2600      	movs	r6, #0
1000d5d4:	4630      	mov	r0, r6
1000d5d6:	b003      	add	sp, #12
1000d5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000d5dc:	68eb      	ldr	r3, [r5, #12]
1000d5de:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
1000d5e2:	616c      	str	r4, [r5, #20]
1000d5e4:	f003 0303 	and.w	r3, r3, #3
1000d5e8:	2b03      	cmp	r3, #3
1000d5ea:	f040 8120 	bne.w	1000d82e <ai_platform_network_process+0x2ba>
1000d5ee:	2f00      	cmp	r7, #0
1000d5f0:	d0e9      	beq.n	1000d5c6 <ai_platform_network_process+0x52>
1000d5f2:	f1ba 0f00 	cmp.w	sl, #0
1000d5f6:	d0e6      	beq.n	1000d5c6 <ai_platform_network_process+0x52>
1000d5f8:	f8ba 3000 	ldrh.w	r3, [sl]
1000d5fc:	2b00      	cmp	r3, #0
1000d5fe:	d0e2      	beq.n	1000d5c6 <ai_platform_network_process+0x52>
1000d600:	69bb      	ldr	r3, [r7, #24]
1000d602:	681b      	ldr	r3, [r3, #0]
1000d604:	9300      	str	r3, [sp, #0]
1000d606:	f8da 3004 	ldr.w	r3, [sl, #4]
1000d60a:	2b00      	cmp	r3, #0
1000d60c:	d075      	beq.n	1000d6fa <ai_platform_network_process+0x186>
1000d60e:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
1000d612:	2e00      	cmp	r6, #0
1000d614:	d071      	beq.n	1000d6fa <ai_platform_network_process+0x186>
1000d616:	f8da 3008 	ldr.w	r3, [sl, #8]
1000d61a:	f8d3 b000 	ldr.w	fp, [r3]
1000d61e:	0123      	lsls	r3, r4, #4
1000d620:	eb1b 1904 	adds.w	r9, fp, r4, lsl #4
1000d624:	9301      	str	r3, [sp, #4]
1000d626:	d0ce      	beq.n	1000d5c6 <ai_platform_network_process+0x52>
1000d628:	69b3      	ldr	r3, [r6, #24]
1000d62a:	2101      	movs	r1, #1
1000d62c:	685b      	ldr	r3, [r3, #4]
1000d62e:	9301      	str	r3, [sp, #4]
1000d630:	4638      	mov	r0, r7
1000d632:	f7ff fb7f 	bl	1000cd34 <ai_buffer_get_size>
1000d636:	9b01      	ldr	r3, [sp, #4]
1000d638:	4283      	cmp	r3, r0
1000d63a:	f0c0 8102 	bcc.w	1000d842 <ai_platform_network_process+0x2ce>
1000d63e:	68f0      	ldr	r0, [r6, #12]
1000d640:	69b9      	ldr	r1, [r7, #24]
1000d642:	68c2      	ldr	r2, [r0, #12]
1000d644:	68cb      	ldr	r3, [r1, #12]
1000d646:	429a      	cmp	r2, r3
1000d648:	f040 80fb 	bne.w	1000d842 <ai_platform_network_process+0x2ce>
1000d64c:	6882      	ldr	r2, [r0, #8]
1000d64e:	688b      	ldr	r3, [r1, #8]
1000d650:	429a      	cmp	r2, r3
1000d652:	f040 80f6 	bne.w	1000d842 <ai_platform_network_process+0x2ce>
1000d656:	6842      	ldr	r2, [r0, #4]
1000d658:	684b      	ldr	r3, [r1, #4]
1000d65a:	429a      	cmp	r2, r3
1000d65c:	f040 80f1 	bne.w	1000d842 <ai_platform_network_process+0x2ce>
1000d660:	69b3      	ldr	r3, [r6, #24]
1000d662:	e9d3 0100 	ldrd	r0, r1, [r3]
1000d666:	f001 f8f3 	bl	1000e850 <ai_array_get_data_byte_size>
1000d66a:	9001      	str	r0, [sp, #4]
1000d66c:	4630      	mov	r0, r6
1000d66e:	f001 f907 	bl	1000e880 <get_tensor_byte_size>
1000d672:	9b01      	ldr	r3, [sp, #4]
1000d674:	4283      	cmp	r3, r0
1000d676:	f0c0 80e4 	bcc.w	1000d842 <ai_platform_network_process+0x2ce>
1000d67a:	69b3      	ldr	r3, [r6, #24]
1000d67c:	6818      	ldr	r0, [r3, #0]
1000d67e:	f001 f853 	bl	1000e728 <ai_array_to_buffer_fmt>
1000d682:	683b      	ldr	r3, [r7, #0]
1000d684:	4058      	eors	r0, r3
1000d686:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
1000d68a:	f040 81a5 	bne.w	1000d9d8 <ai_platform_network_process+0x464>
1000d68e:	687b      	ldr	r3, [r7, #4]
1000d690:	2b00      	cmp	r3, #0
1000d692:	f000 8199 	beq.w	1000d9c8 <ai_platform_network_process+0x454>
1000d696:	69bb      	ldr	r3, [r7, #24]
1000d698:	681b      	ldr	r3, [r3, #0]
1000d69a:	2b00      	cmp	r3, #0
1000d69c:	f000 818c 	beq.w	1000d9b8 <ai_platform_network_process+0x444>
1000d6a0:	9a00      	ldr	r2, [sp, #0]
1000d6a2:	429a      	cmp	r2, r3
1000d6a4:	bf38      	it	cc
1000d6a6:	461a      	movcc	r2, r3
1000d6a8:	4630      	mov	r0, r6
1000d6aa:	9200      	str	r2, [sp, #0]
1000d6ac:	f001 f8e8 	bl	1000e880 <get_tensor_byte_size>
1000d6b0:	f8c9 0008 	str.w	r0, [r9, #8]
1000d6b4:	69bb      	ldr	r3, [r7, #24]
1000d6b6:	681b      	ldr	r3, [r3, #0]
1000d6b8:	fb00 f303 	mul.w	r3, r0, r3
1000d6bc:	f8c9 300c 	str.w	r3, [r9, #12]
1000d6c0:	6879      	ldr	r1, [r7, #4]
1000d6c2:	f8c9 1004 	str.w	r1, [r9, #4]
1000d6c6:	0122      	lsls	r2, r4, #4
1000d6c8:	440b      	add	r3, r1
1000d6ca:	f84b 3002 	str.w	r3, [fp, r2]
1000d6ce:	69b0      	ldr	r0, [r6, #24]
1000d6d0:	6803      	ldr	r3, [r0, #0]
1000d6d2:	009a      	lsls	r2, r3, #2
1000d6d4:	f104 0401 	add.w	r4, r4, #1
1000d6d8:	f107 071c 	add.w	r7, r7, #28
1000d6dc:	f100 80a1 	bmi.w	1000d822 <ai_platform_network_process+0x2ae>
1000d6e0:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
1000d6e4:	1a9b      	subs	r3, r3, r2
1000d6e6:	4419      	add	r1, r3
1000d6e8:	6081      	str	r1, [r0, #8]
1000d6ea:	69b3      	ldr	r3, [r6, #24]
1000d6ec:	f8d9 2004 	ldr.w	r2, [r9, #4]
1000d6f0:	60da      	str	r2, [r3, #12]
1000d6f2:	f8ba 3000 	ldrh.w	r3, [sl]
1000d6f6:	42a3      	cmp	r3, r4
1000d6f8:	d885      	bhi.n	1000d606 <ai_platform_network_process+0x92>
1000d6fa:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
1000d6fc:	f1b8 0f00 	cmp.w	r8, #0
1000d700:	f000 8172 	beq.w	1000d9e8 <ai_platform_network_process+0x474>
1000d704:	2b01      	cmp	r3, #1
1000d706:	f240 814f 	bls.w	1000d9a8 <ai_platform_network_process+0x434>
1000d70a:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
1000d70e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
1000d712:	2b00      	cmp	r3, #0
1000d714:	f000 8148 	beq.w	1000d9a8 <ai_platform_network_process+0x434>
1000d718:	2400      	movs	r4, #0
1000d71a:	462e      	mov	r6, r5
1000d71c:	f8da 3010 	ldr.w	r3, [sl, #16]
1000d720:	2b00      	cmp	r3, #0
1000d722:	f000 80a4 	beq.w	1000d86e <ai_platform_network_process+0x2fa>
1000d726:	f853 7024 	ldr.w	r7, [r3, r4, lsl #2]
1000d72a:	2f00      	cmp	r7, #0
1000d72c:	f000 809f 	beq.w	1000d86e <ai_platform_network_process+0x2fa>
1000d730:	f8da 3014 	ldr.w	r3, [sl, #20]
1000d734:	f8d3 b000 	ldr.w	fp, [r3]
1000d738:	eb1b 1904 	adds.w	r9, fp, r4, lsl #4
1000d73c:	ea4f 1504 	mov.w	r5, r4, lsl #4
1000d740:	f000 8172 	beq.w	1000da28 <ai_platform_network_process+0x4b4>
1000d744:	69bb      	ldr	r3, [r7, #24]
1000d746:	2101      	movs	r1, #1
1000d748:	685b      	ldr	r3, [r3, #4]
1000d74a:	9301      	str	r3, [sp, #4]
1000d74c:	4640      	mov	r0, r8
1000d74e:	f7ff faf1 	bl	1000cd34 <ai_buffer_get_size>
1000d752:	9b01      	ldr	r3, [sp, #4]
1000d754:	4283      	cmp	r3, r0
1000d756:	f0c0 8126 	bcc.w	1000d9a6 <ai_platform_network_process+0x432>
1000d75a:	68f8      	ldr	r0, [r7, #12]
1000d75c:	f8d8 1018 	ldr.w	r1, [r8, #24]
1000d760:	68c2      	ldr	r2, [r0, #12]
1000d762:	68cb      	ldr	r3, [r1, #12]
1000d764:	429a      	cmp	r2, r3
1000d766:	f040 811e 	bne.w	1000d9a6 <ai_platform_network_process+0x432>
1000d76a:	6882      	ldr	r2, [r0, #8]
1000d76c:	688b      	ldr	r3, [r1, #8]
1000d76e:	429a      	cmp	r2, r3
1000d770:	f040 8119 	bne.w	1000d9a6 <ai_platform_network_process+0x432>
1000d774:	6842      	ldr	r2, [r0, #4]
1000d776:	684b      	ldr	r3, [r1, #4]
1000d778:	429a      	cmp	r2, r3
1000d77a:	f040 8114 	bne.w	1000d9a6 <ai_platform_network_process+0x432>
1000d77e:	69bb      	ldr	r3, [r7, #24]
1000d780:	e9d3 0100 	ldrd	r0, r1, [r3]
1000d784:	f001 f864 	bl	1000e850 <ai_array_get_data_byte_size>
1000d788:	9001      	str	r0, [sp, #4]
1000d78a:	4638      	mov	r0, r7
1000d78c:	f001 f878 	bl	1000e880 <get_tensor_byte_size>
1000d790:	9b01      	ldr	r3, [sp, #4]
1000d792:	4283      	cmp	r3, r0
1000d794:	f0c0 8107 	bcc.w	1000d9a6 <ai_platform_network_process+0x432>
1000d798:	69bb      	ldr	r3, [r7, #24]
1000d79a:	6818      	ldr	r0, [r3, #0]
1000d79c:	f000 ffc4 	bl	1000e728 <ai_array_to_buffer_fmt>
1000d7a0:	f8d8 3000 	ldr.w	r3, [r8]
1000d7a4:	4058      	eors	r0, r3
1000d7a6:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
1000d7aa:	f040 812a 	bne.w	1000da02 <ai_platform_network_process+0x48e>
1000d7ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
1000d7b2:	2b00      	cmp	r3, #0
1000d7b4:	f000 811c 	beq.w	1000d9f0 <ai_platform_network_process+0x47c>
1000d7b8:	f8d8 3018 	ldr.w	r3, [r8, #24]
1000d7bc:	681b      	ldr	r3, [r3, #0]
1000d7be:	2b00      	cmp	r3, #0
1000d7c0:	f000 8127 	beq.w	1000da12 <ai_platform_network_process+0x49e>
1000d7c4:	9a00      	ldr	r2, [sp, #0]
1000d7c6:	429a      	cmp	r2, r3
1000d7c8:	bf38      	it	cc
1000d7ca:	461a      	movcc	r2, r3
1000d7cc:	4638      	mov	r0, r7
1000d7ce:	9200      	str	r2, [sp, #0]
1000d7d0:	f001 f856 	bl	1000e880 <get_tensor_byte_size>
1000d7d4:	f8c9 0008 	str.w	r0, [r9, #8]
1000d7d8:	f8d8 3018 	ldr.w	r3, [r8, #24]
1000d7dc:	681b      	ldr	r3, [r3, #0]
1000d7de:	fb00 f303 	mul.w	r3, r0, r3
1000d7e2:	f8c9 300c 	str.w	r3, [r9, #12]
1000d7e6:	f8d8 1004 	ldr.w	r1, [r8, #4]
1000d7ea:	f8c9 1004 	str.w	r1, [r9, #4]
1000d7ee:	440b      	add	r3, r1
1000d7f0:	f84b 3005 	str.w	r3, [fp, r5]
1000d7f4:	69b8      	ldr	r0, [r7, #24]
1000d7f6:	6803      	ldr	r3, [r0, #0]
1000d7f8:	009b      	lsls	r3, r3, #2
1000d7fa:	f104 0401 	add.w	r4, r4, #1
1000d7fe:	f108 081c 	add.w	r8, r8, #28
1000d802:	d42f      	bmi.n	1000d864 <ai_platform_network_process+0x2f0>
1000d804:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
1000d808:	1a9b      	subs	r3, r3, r2
1000d80a:	4419      	add	r1, r3
1000d80c:	6081      	str	r1, [r0, #8]
1000d80e:	69bb      	ldr	r3, [r7, #24]
1000d810:	f8d9 2004 	ldr.w	r2, [r9, #4]
1000d814:	60da      	str	r2, [r3, #12]
1000d816:	f8ba 300c 	ldrh.w	r3, [sl, #12]
1000d81a:	429c      	cmp	r4, r3
1000d81c:	f4ff af7e 	bcc.w	1000d71c <ai_platform_network_process+0x1a8>
1000d820:	e025      	b.n	1000d86e <ai_platform_network_process+0x2fa>
1000d822:	f8ba 3000 	ldrh.w	r3, [sl]
1000d826:	429c      	cmp	r4, r3
1000d828:	f4ff aeed 	bcc.w	1000d606 <ai_platform_network_process+0x92>
1000d82c:	e765      	b.n	1000d6fa <ai_platform_network_process+0x186>
1000d82e:	2230      	movs	r2, #48	; 0x30
1000d830:	2111      	movs	r1, #17
1000d832:	f105 0010 	add.w	r0, r5, #16
1000d836:	f000 f907 	bl	1000da48 <core_set_error>
1000d83a:	2600      	movs	r6, #0
1000d83c:	e6ca      	b.n	1000d5d4 <ai_platform_network_process+0x60>
1000d83e:	462e      	mov	r6, r5
1000d840:	e6c8      	b.n	1000d5d4 <ai_platform_network_process+0x60>
1000d842:	2218      	movs	r2, #24
1000d844:	2112      	movs	r1, #18
1000d846:	f105 0010 	add.w	r0, r5, #16
1000d84a:	f000 f8fd 	bl	1000da48 <core_set_error>
1000d84e:	2600      	movs	r6, #0
1000d850:	e6c0      	b.n	1000d5d4 <ai_platform_network_process+0x60>
1000d852:	bf00      	nop
1000d854:	a1c00100 	.word	0xa1c00100
1000d858:	4c004000 	.word	0x4c004000
1000d85c:	f407a5c2 	.word	0xf407a5c2
1000d860:	b5e8b5cd 	.word	0xb5e8b5cd
1000d864:	f8ba 300c 	ldrh.w	r3, [sl, #12]
1000d868:	429c      	cmp	r4, r3
1000d86a:	f4ff af57 	bcc.w	1000d71c <ai_platform_network_process+0x1a8>
1000d86e:	f8bd 2000 	ldrh.w	r2, [sp]
1000d872:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
1000d874:	82b2      	strh	r2, [r6, #20]
1000d876:	4635      	mov	r5, r6
1000d878:	2b00      	cmp	r3, #0
1000d87a:	f040 808e 	bne.w	1000d99a <ai_platform_network_process+0x426>
1000d87e:	461f      	mov	r7, r3
1000d880:	461e      	mov	r6, r3
1000d882:	8aeb      	ldrh	r3, [r5, #22]
1000d884:	4293      	cmp	r3, r2
1000d886:	bf38      	it	cc
1000d888:	46ab      	movcc	fp, r5
1000d88a:	d23c      	bcs.n	1000d906 <ai_platform_network_process+0x392>
1000d88c:	2f00      	cmp	r7, #0
1000d88e:	d03f      	beq.n	1000d910 <ai_platform_network_process+0x39c>
1000d890:	f04f 0800 	mov.w	r8, #0
1000d894:	e014      	b.n	1000d8c0 <ai_platform_network_process+0x34c>
1000d896:	6882      	ldr	r2, [r0, #8]
1000d898:	68c5      	ldr	r5, [r0, #12]
1000d89a:	6863      	ldr	r3, [r4, #4]
1000d89c:	1b52      	subs	r2, r2, r5
1000d89e:	4413      	add	r3, r2
1000d8a0:	6083      	str	r3, [r0, #8]
1000d8a2:	698b      	ldr	r3, [r1, #24]
1000d8a4:	6862      	ldr	r2, [r4, #4]
1000d8a6:	60da      	str	r2, [r3, #12]
1000d8a8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
1000d8ac:	f859 200a 	ldr.w	r2, [r9, sl]
1000d8b0:	440b      	add	r3, r1
1000d8b2:	4293      	cmp	r3, r2
1000d8b4:	bf24      	itt	cs
1000d8b6:	68e3      	ldrcs	r3, [r4, #12]
1000d8b8:	1ad3      	subcs	r3, r2, r3
1000d8ba:	6063      	str	r3, [r4, #4]
1000d8bc:	f108 0801 	add.w	r8, r8, #1
1000d8c0:	883b      	ldrh	r3, [r7, #0]
1000d8c2:	4543      	cmp	r3, r8
1000d8c4:	ea4f 1a08 	mov.w	sl, r8, lsl #4
1000d8c8:	d922      	bls.n	1000d910 <ai_platform_network_process+0x39c>
1000d8ca:	687b      	ldr	r3, [r7, #4]
1000d8cc:	b303      	cbz	r3, 1000d910 <ai_platform_network_process+0x39c>
1000d8ce:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
1000d8d2:	b1e9      	cbz	r1, 1000d910 <ai_platform_network_process+0x39c>
1000d8d4:	6988      	ldr	r0, [r1, #24]
1000d8d6:	68ba      	ldr	r2, [r7, #8]
1000d8d8:	6803      	ldr	r3, [r0, #0]
1000d8da:	f8d2 9000 	ldr.w	r9, [r2]
1000d8de:	009d      	lsls	r5, r3, #2
1000d8e0:	eb09 1408 	add.w	r4, r9, r8, lsl #4
1000d8e4:	d5d7      	bpl.n	1000d896 <ai_platform_network_process+0x322>
1000d8e6:	6881      	ldr	r1, [r0, #8]
1000d8e8:	68a2      	ldr	r2, [r4, #8]
1000d8ea:	6860      	ldr	r0, [r4, #4]
1000d8ec:	f000 fe96 	bl	1000e61c <st_int8_copy>
1000d8f0:	e7da      	b.n	1000d8a8 <ai_platform_network_process+0x334>
1000d8f2:	f8bb 3016 	ldrh.w	r3, [fp, #22]
1000d8f6:	f8bb 2014 	ldrh.w	r2, [fp, #20]
1000d8fa:	3301      	adds	r3, #1
1000d8fc:	b29b      	uxth	r3, r3
1000d8fe:	429a      	cmp	r2, r3
1000d900:	f8ab 3016 	strh.w	r3, [fp, #22]
1000d904:	d8c2      	bhi.n	1000d88c <ai_platform_network_process+0x318>
1000d906:	461e      	mov	r6, r3
1000d908:	4630      	mov	r0, r6
1000d90a:	b003      	add	sp, #12
1000d90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000d910:	4658      	mov	r0, fp
1000d912:	f000 f8f1 	bl	1000daf8 <ai_layers_forward_all>
1000d916:	2e00      	cmp	r6, #0
1000d918:	d0eb      	beq.n	1000d8f2 <ai_platform_network_process+0x37e>
1000d91a:	2400      	movs	r4, #0
1000d91c:	e016      	b.n	1000d94c <ai_platform_network_process+0x3d8>
1000d91e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
1000d922:	f859 100a 	ldr.w	r1, [r9, sl]
1000d926:	4413      	add	r3, r2
1000d928:	428b      	cmp	r3, r1
1000d92a:	bf24      	itt	cs
1000d92c:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
1000d930:	1acb      	subcs	r3, r1, r3
1000d932:	f8c8 3004 	str.w	r3, [r8, #4]
1000d936:	6981      	ldr	r1, [r0, #24]
1000d938:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
1000d93c:	1b52      	subs	r2, r2, r5
1000d93e:	4413      	add	r3, r2
1000d940:	608b      	str	r3, [r1, #8]
1000d942:	6983      	ldr	r3, [r0, #24]
1000d944:	f8d8 2004 	ldr.w	r2, [r8, #4]
1000d948:	60da      	str	r2, [r3, #12]
1000d94a:	3401      	adds	r4, #1
1000d94c:	8833      	ldrh	r3, [r6, #0]
1000d94e:	42a3      	cmp	r3, r4
1000d950:	d9cf      	bls.n	1000d8f2 <ai_platform_network_process+0x37e>
1000d952:	6873      	ldr	r3, [r6, #4]
1000d954:	2b00      	cmp	r3, #0
1000d956:	d0cc      	beq.n	1000d8f2 <ai_platform_network_process+0x37e>
1000d958:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1000d95c:	2800      	cmp	r0, #0
1000d95e:	d0c8      	beq.n	1000d8f2 <ai_platform_network_process+0x37e>
1000d960:	68b2      	ldr	r2, [r6, #8]
1000d962:	6983      	ldr	r3, [r0, #24]
1000d964:	f8d2 9000 	ldr.w	r9, [r2]
1000d968:	681a      	ldr	r2, [r3, #0]
1000d96a:	0092      	lsls	r2, r2, #2
1000d96c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
1000d970:	eb09 1804 	add.w	r8, r9, r4, lsl #4
1000d974:	d5d3      	bpl.n	1000d91e <ai_platform_network_process+0x3aa>
1000d976:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
1000d97a:	6898      	ldr	r0, [r3, #8]
1000d97c:	f000 fe4e 	bl	1000e61c <st_int8_copy>
1000d980:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
1000d984:	f859 200a 	ldr.w	r2, [r9, sl]
1000d988:	440b      	add	r3, r1
1000d98a:	4293      	cmp	r3, r2
1000d98c:	bf24      	itt	cs
1000d98e:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
1000d992:	1ad3      	subcs	r3, r2, r3
1000d994:	f8c8 3004 	str.w	r3, [r8, #4]
1000d998:	e7d7      	b.n	1000d94a <ai_platform_network_process+0x3d6>
1000d99a:	2b01      	cmp	r3, #1
1000d99c:	6b2f      	ldr	r7, [r5, #48]	; 0x30
1000d99e:	d041      	beq.n	1000da24 <ai_platform_network_process+0x4b0>
1000d9a0:	f107 060c 	add.w	r6, r7, #12
1000d9a4:	e76d      	b.n	1000d882 <ai_platform_network_process+0x30e>
1000d9a6:	4635      	mov	r5, r6
1000d9a8:	2218      	movs	r2, #24
1000d9aa:	2113      	movs	r1, #19
1000d9ac:	f105 0010 	add.w	r0, r5, #16
1000d9b0:	f000 f84a 	bl	1000da48 <core_set_error>
1000d9b4:	2600      	movs	r6, #0
1000d9b6:	e60d      	b.n	1000d5d4 <ai_platform_network_process+0x60>
1000d9b8:	4606      	mov	r6, r0
1000d9ba:	2221      	movs	r2, #33	; 0x21
1000d9bc:	2112      	movs	r1, #18
1000d9be:	f105 0010 	add.w	r0, r5, #16
1000d9c2:	f000 f841 	bl	1000da48 <core_set_error>
1000d9c6:	e605      	b.n	1000d5d4 <ai_platform_network_process+0x60>
1000d9c8:	4606      	mov	r6, r0
1000d9ca:	2217      	movs	r2, #23
1000d9cc:	2112      	movs	r1, #18
1000d9ce:	f105 0010 	add.w	r0, r5, #16
1000d9d2:	f000 f839 	bl	1000da48 <core_set_error>
1000d9d6:	e5fd      	b.n	1000d5d4 <ai_platform_network_process+0x60>
1000d9d8:	2219      	movs	r2, #25
1000d9da:	2112      	movs	r1, #18
1000d9dc:	f105 0010 	add.w	r0, r5, #16
1000d9e0:	f000 f832 	bl	1000da48 <core_set_error>
1000d9e4:	2600      	movs	r6, #0
1000d9e6:	e5f5      	b.n	1000d5d4 <ai_platform_network_process+0x60>
1000d9e8:	f8bd 2000 	ldrh.w	r2, [sp]
1000d9ec:	82aa      	strh	r2, [r5, #20]
1000d9ee:	e743      	b.n	1000d878 <ai_platform_network_process+0x304>
1000d9f0:	4635      	mov	r5, r6
1000d9f2:	2217      	movs	r2, #23
1000d9f4:	4606      	mov	r6, r0
1000d9f6:	2113      	movs	r1, #19
1000d9f8:	f105 0010 	add.w	r0, r5, #16
1000d9fc:	f000 f824 	bl	1000da48 <core_set_error>
1000da00:	e5e8      	b.n	1000d5d4 <ai_platform_network_process+0x60>
1000da02:	f106 0010 	add.w	r0, r6, #16
1000da06:	2219      	movs	r2, #25
1000da08:	2113      	movs	r1, #19
1000da0a:	f000 f81d 	bl	1000da48 <core_set_error>
1000da0e:	2600      	movs	r6, #0
1000da10:	e5e0      	b.n	1000d5d4 <ai_platform_network_process+0x60>
1000da12:	4635      	mov	r5, r6
1000da14:	2221      	movs	r2, #33	; 0x21
1000da16:	4606      	mov	r6, r0
1000da18:	2113      	movs	r1, #19
1000da1a:	f105 0010 	add.w	r0, r5, #16
1000da1e:	f000 f813 	bl	1000da48 <core_set_error>
1000da22:	e5d7      	b.n	1000d5d4 <ai_platform_network_process+0x60>
1000da24:	2600      	movs	r6, #0
1000da26:	e72c      	b.n	1000d882 <ai_platform_network_process+0x30e>
1000da28:	f106 0010 	add.w	r0, r6, #16
1000da2c:	2217      	movs	r2, #23
1000da2e:	2113      	movs	r1, #19
1000da30:	f000 f80a 	bl	1000da48 <core_set_error>
1000da34:	464e      	mov	r6, r9
1000da36:	e5cd      	b.n	1000d5d4 <ai_platform_network_process+0x60>

1000da38 <core_init>:
1000da38:	2001      	movs	r0, #1
1000da3a:	4770      	bx	lr

1000da3c <core_get_error>:
1000da3c:	4603      	mov	r3, r0
1000da3e:	2200      	movs	r2, #0
1000da40:	6800      	ldr	r0, [r0, #0]
1000da42:	601a      	str	r2, [r3, #0]
1000da44:	4770      	bx	lr
1000da46:	bf00      	nop

1000da48 <core_set_error>:
1000da48:	4603      	mov	r3, r0
1000da4a:	7800      	ldrb	r0, [r0, #0]
1000da4c:	b108      	cbz	r0, 1000da52 <core_set_error+0xa>
1000da4e:	2000      	movs	r0, #0
1000da50:	4770      	bx	lr
1000da52:	7019      	strb	r1, [r3, #0]
1000da54:	6819      	ldr	r1, [r3, #0]
1000da56:	f362 211f 	bfi	r1, r2, #8, #24
1000da5a:	2001      	movs	r0, #1
1000da5c:	6019      	str	r1, [r3, #0]
1000da5e:	4770      	bx	lr

1000da60 <ai_check_custom_types>:
1000da60:	b082      	sub	sp, #8
1000da62:	4b13      	ldr	r3, [pc, #76]	; (1000dab0 <ai_check_custom_types+0x50>)
1000da64:	9301      	str	r3, [sp, #4]
1000da66:	b118      	cbz	r0, 1000da70 <ai_check_custom_types+0x10>
1000da68:	7803      	ldrb	r3, [r0, #0]
1000da6a:	2b03      	cmp	r3, #3
1000da6c:	d002      	beq.n	1000da74 <ai_check_custom_types+0x14>
1000da6e:	2000      	movs	r0, #0
1000da70:	b002      	add	sp, #8
1000da72:	4770      	bx	lr
1000da74:	f89d 2004 	ldrb.w	r2, [sp, #4]
1000da78:	4293      	cmp	r3, r2
1000da7a:	d004      	beq.n	1000da86 <ai_check_custom_types+0x26>
1000da7c:	2001      	movs	r0, #1
1000da7e:	f080 0001 	eor.w	r0, r0, #1
1000da82:	b002      	add	sp, #8
1000da84:	4770      	bx	lr
1000da86:	7842      	ldrb	r2, [r0, #1]
1000da88:	f89d 3005 	ldrb.w	r3, [sp, #5]
1000da8c:	429a      	cmp	r2, r3
1000da8e:	f100 0001 	add.w	r0, r0, #1
1000da92:	d1f3      	bne.n	1000da7c <ai_check_custom_types+0x1c>
1000da94:	f810 2f01 	ldrb.w	r2, [r0, #1]!
1000da98:	f89d 3006 	ldrb.w	r3, [sp, #6]
1000da9c:	429a      	cmp	r2, r3
1000da9e:	d1ed      	bne.n	1000da7c <ai_check_custom_types+0x1c>
1000daa0:	7842      	ldrb	r2, [r0, #1]
1000daa2:	f89d 3007 	ldrb.w	r3, [sp, #7]
1000daa6:	429a      	cmp	r2, r3
1000daa8:	d1e8      	bne.n	1000da7c <ai_check_custom_types+0x1c>
1000daaa:	2000      	movs	r0, #0
1000daac:	e7e7      	b.n	1000da7e <ai_check_custom_types+0x1e>
1000daae:	bf00      	nop
1000dab0:	84048403 	.word	0x84048403

1000dab4 <ai_layers_init_all>:
1000dab4:	4601      	mov	r1, r0
1000dab6:	2000      	movs	r0, #0
1000dab8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
1000daba:	b143      	cbz	r3, 1000dace <ai_layers_init_all+0x1a>
1000dabc:	691a      	ldr	r2, [r3, #16]
1000dabe:	60d9      	str	r1, [r3, #12]
1000dac0:	429a      	cmp	r2, r3
1000dac2:	f100 0001 	add.w	r0, r0, #1
1000dac6:	d002      	beq.n	1000dace <ai_layers_init_all+0x1a>
1000dac8:	b10a      	cbz	r2, 1000dace <ai_layers_init_all+0x1a>
1000daca:	4613      	mov	r3, r2
1000dacc:	e7f5      	b.n	1000daba <ai_layers_init_all+0x6>
1000dace:	4770      	bx	lr

1000dad0 <ai_layers_post_init_all>:
1000dad0:	b538      	push	{r3, r4, r5, lr}
1000dad2:	6b44      	ldr	r4, [r0, #52]	; 0x34
1000dad4:	2500      	movs	r5, #0
1000dad6:	b16c      	cbz	r4, 1000daf4 <ai_layers_post_init_all+0x24>
1000dad8:	6863      	ldr	r3, [r4, #4]
1000dada:	07db      	lsls	r3, r3, #31
1000dadc:	d504      	bpl.n	1000dae8 <ai_layers_post_init_all+0x18>
1000dade:	6a23      	ldr	r3, [r4, #32]
1000dae0:	4620      	mov	r0, r4
1000dae2:	b10b      	cbz	r3, 1000dae8 <ai_layers_post_init_all+0x18>
1000dae4:	4798      	blx	r3
1000dae6:	3501      	adds	r5, #1
1000dae8:	6923      	ldr	r3, [r4, #16]
1000daea:	42a3      	cmp	r3, r4
1000daec:	d002      	beq.n	1000daf4 <ai_layers_post_init_all+0x24>
1000daee:	b10b      	cbz	r3, 1000daf4 <ai_layers_post_init_all+0x24>
1000daf0:	461c      	mov	r4, r3
1000daf2:	e7f0      	b.n	1000dad6 <ai_layers_post_init_all+0x6>
1000daf4:	4628      	mov	r0, r5
1000daf6:	bd38      	pop	{r3, r4, r5, pc}

1000daf8 <ai_layers_forward_all>:
1000daf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000dafc:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
1000db00:	4604      	mov	r4, r0
1000db02:	f1b8 0f00 	cmp.w	r8, #0
1000db06:	d02b      	beq.n	1000db60 <ai_layers_forward_all+0x68>
1000db08:	6b41      	ldr	r1, [r0, #52]	; 0x34
1000db0a:	6381      	str	r1, [r0, #56]	; 0x38
1000db0c:	b321      	cbz	r1, 1000db58 <ai_layers_forward_all+0x60>
1000db0e:	6c02      	ldr	r2, [r0, #64]	; 0x40
1000db10:	2001      	movs	r0, #1
1000db12:	47c0      	blx	r8
1000db14:	6ba6      	ldr	r6, [r4, #56]	; 0x38
1000db16:	b1fe      	cbz	r6, 1000db58 <ai_layers_forward_all+0x60>
1000db18:	2700      	movs	r7, #0
1000db1a:	4631      	mov	r1, r6
1000db1c:	6c22      	ldr	r2, [r4, #64]	; 0x40
1000db1e:	2002      	movs	r0, #2
1000db20:	47c0      	blx	r8
1000db22:	6ba5      	ldr	r5, [r4, #56]	; 0x38
1000db24:	4628      	mov	r0, r5
1000db26:	696b      	ldr	r3, [r5, #20]
1000db28:	4798      	blx	r3
1000db2a:	692e      	ldr	r6, [r5, #16]
1000db2c:	6c22      	ldr	r2, [r4, #64]	; 0x40
1000db2e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1000db30:	42b5      	cmp	r5, r6
1000db32:	f04f 0003 	mov.w	r0, #3
1000db36:	d007      	beq.n	1000db48 <ai_layers_forward_all+0x50>
1000db38:	47c0      	blx	r8
1000db3a:	3701      	adds	r7, #1
1000db3c:	63a6      	str	r6, [r4, #56]	; 0x38
1000db3e:	2e00      	cmp	r6, #0
1000db40:	d1eb      	bne.n	1000db1a <ai_layers_forward_all+0x22>
1000db42:	4638      	mov	r0, r7
1000db44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000db48:	2003      	movs	r0, #3
1000db4a:	47c0      	blx	r8
1000db4c:	2300      	movs	r3, #0
1000db4e:	3701      	adds	r7, #1
1000db50:	63a3      	str	r3, [r4, #56]	; 0x38
1000db52:	4638      	mov	r0, r7
1000db54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000db58:	2700      	movs	r7, #0
1000db5a:	4638      	mov	r0, r7
1000db5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000db60:	6b45      	ldr	r5, [r0, #52]	; 0x34
1000db62:	6385      	str	r5, [r0, #56]	; 0x38
1000db64:	2d00      	cmp	r5, #0
1000db66:	d0f7      	beq.n	1000db58 <ai_layers_forward_all+0x60>
1000db68:	4647      	mov	r7, r8
1000db6a:	696b      	ldr	r3, [r5, #20]
1000db6c:	4628      	mov	r0, r5
1000db6e:	4798      	blx	r3
1000db70:	462b      	mov	r3, r5
1000db72:	692d      	ldr	r5, [r5, #16]
1000db74:	429d      	cmp	r5, r3
1000db76:	d004      	beq.n	1000db82 <ai_layers_forward_all+0x8a>
1000db78:	63a5      	str	r5, [r4, #56]	; 0x38
1000db7a:	3701      	adds	r7, #1
1000db7c:	2d00      	cmp	r5, #0
1000db7e:	d1f4      	bne.n	1000db6a <ai_layers_forward_all+0x72>
1000db80:	e7df      	b.n	1000db42 <ai_layers_forward_all+0x4a>
1000db82:	2300      	movs	r3, #0
1000db84:	63a3      	str	r3, [r4, #56]	; 0x38
1000db86:	3701      	adds	r7, #1
1000db88:	e7db      	b.n	1000db42 <ai_layers_forward_all+0x4a>
1000db8a:	bf00      	nop

1000db8c <forward_dense>:
1000db8c:	6983      	ldr	r3, [r0, #24]
1000db8e:	881a      	ldrh	r2, [r3, #0]
1000db90:	2a00      	cmp	r2, #0
1000db92:	f000 8181 	beq.w	1000de98 <forward_dense+0x30c>
1000db96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000db9a:	ed2d 8b02 	vpush	{d8}
1000db9e:	f8d3 c004 	ldr.w	ip, [r3, #4]
1000dba2:	f8dc 5004 	ldr.w	r5, [ip, #4]
1000dba6:	b095      	sub	sp, #84	; 0x54
1000dba8:	b105      	cbz	r5, 1000dbac <forward_dense+0x20>
1000dbaa:	682d      	ldr	r5, [r5, #0]
1000dbac:	2a01      	cmp	r2, #1
1000dbae:	f000 828f 	beq.w	1000e0d0 <forward_dense+0x544>
1000dbb2:	f8dc 6010 	ldr.w	r6, [ip, #16]
1000dbb6:	b106      	cbz	r6, 1000dbba <forward_dense+0x2e>
1000dbb8:	6836      	ldr	r6, [r6, #0]
1000dbba:	2a02      	cmp	r2, #2
1000dbbc:	f000 816e 	beq.w	1000de9c <forward_dense+0x310>
1000dbc0:	f8dc 301c 	ldr.w	r3, [ip, #28]
1000dbc4:	930b      	str	r3, [sp, #44]	; 0x2c
1000dbc6:	2b00      	cmp	r3, #0
1000dbc8:	f000 8274 	beq.w	1000e0b4 <forward_dense+0x528>
1000dbcc:	4619      	mov	r1, r3
1000dbce:	f8bc 3018 	ldrh.w	r3, [ip, #24]
1000dbd2:	6809      	ldr	r1, [r1, #0]
1000dbd4:	910d      	str	r1, [sp, #52]	; 0x34
1000dbd6:	2b01      	cmp	r3, #1
1000dbd8:	f240 826e 	bls.w	1000e0b8 <forward_dense+0x52c>
1000dbdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000dbde:	685b      	ldr	r3, [r3, #4]
1000dbe0:	930b      	str	r3, [sp, #44]	; 0x2c
1000dbe2:	460b      	mov	r3, r1
1000dbe4:	68e8      	ldr	r0, [r5, #12]
1000dbe6:	68f7      	ldr	r7, [r6, #12]
1000dbe8:	6840      	ldr	r0, [r0, #4]
1000dbea:	6999      	ldr	r1, [r3, #24]
1000dbec:	9013      	str	r0, [sp, #76]	; 0x4c
1000dbee:	6878      	ldr	r0, [r7, #4]
1000dbf0:	680b      	ldr	r3, [r1, #0]
1000dbf2:	9012      	str	r0, [sp, #72]	; 0x48
1000dbf4:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
1000dbf8:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
1000dbfc:	fb00 f404 	mul.w	r4, r0, r4
1000dc00:	f3c3 5041 	ubfx	r0, r3, #21, #2
1000dc04:	fa4e f000 	asr.w	r0, lr, r0
1000dc08:	2a03      	cmp	r2, #3
1000dc0a:	9010      	str	r0, [sp, #64]	; 0x40
1000dc0c:	f000 825d 	beq.w	1000e0ca <forward_dense+0x53e>
1000dc10:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
1000dc14:	f3c3 4343 	ubfx	r3, r3, #17, #4
1000dc18:	2a00      	cmp	r2, #0
1000dc1a:	f000 8246 	beq.w	1000e0aa <forward_dense+0x51e>
1000dc1e:	6812      	ldr	r2, [r2, #0]
1000dc20:	2a00      	cmp	r2, #0
1000dc22:	f000 8242 	beq.w	1000e0aa <forward_dense+0x51e>
1000dc26:	2b04      	cmp	r3, #4
1000dc28:	f8d2 9018 	ldr.w	r9, [r2, #24]
1000dc2c:	f000 822c 	beq.w	1000e088 <forward_dense+0x4fc>
1000dc30:	2b08      	cmp	r3, #8
1000dc32:	f000 8229 	beq.w	1000e088 <forward_dense+0x4fc>
1000dc36:	f04f 0b00 	mov.w	fp, #0
1000dc3a:	69b2      	ldr	r2, [r6, #24]
1000dc3c:	69ab      	ldr	r3, [r5, #24]
1000dc3e:	6891      	ldr	r1, [r2, #8]
1000dc40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000dc42:	689b      	ldr	r3, [r3, #8]
1000dc44:	6952      	ldr	r2, [r2, #20]
1000dc46:	9106      	str	r1, [sp, #24]
1000dc48:	fb07 f404 	mul.w	r4, r7, r4
1000dc4c:	f8d2 9004 	ldr.w	r9, [r2, #4]
1000dc50:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000dc52:	eb01 0084 	add.w	r0, r1, r4, lsl #2
1000dc56:	4281      	cmp	r1, r0
1000dc58:	ea4f 0482 	mov.w	r4, r2, lsl #2
1000dc5c:	900e      	str	r0, [sp, #56]	; 0x38
1000dc5e:	940c      	str	r4, [sp, #48]	; 0x30
1000dc60:	eb01 0882 	add.w	r8, r1, r2, lsl #2
1000dc64:	f080 8113 	bcs.w	1000de8e <forward_dense+0x302>
1000dc68:	9913      	ldr	r1, [sp, #76]	; 0x4c
1000dc6a:	ed9f 8a93 	vldr	s16, [pc, #588]	; 1000deb8 <forward_dense+0x32c>
1000dc6e:	f021 0201 	bic.w	r2, r1, #1
1000dc72:	eb03 0282 	add.w	r2, r3, r2, lsl #2
1000dc76:	9204      	str	r2, [sp, #16]
1000dc78:	f001 0201 	and.w	r2, r1, #1
1000dc7c:	08c8      	lsrs	r0, r1, #3
1000dc7e:	9208      	str	r2, [sp, #32]
1000dc80:	008a      	lsls	r2, r1, #2
1000dc82:	f001 0a07 	and.w	sl, r1, #7
1000dc86:	920f      	str	r2, [sp, #60]	; 0x3c
1000dc88:	eb03 1240 	add.w	r2, r3, r0, lsl #5
1000dc8c:	3320      	adds	r3, #32
1000dc8e:	465c      	mov	r4, fp
1000dc90:	9007      	str	r0, [sp, #28]
1000dc92:	46cb      	mov	fp, r9
1000dc94:	9205      	str	r2, [sp, #20]
1000dc96:	9302      	str	r3, [sp, #8]
1000dc98:	46c1      	mov	r9, r8
1000dc9a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
1000dc9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000dca0:	699b      	ldr	r3, [r3, #24]
1000dca2:	689a      	ldr	r2, [r3, #8]
1000dca4:	9b02      	ldr	r3, [sp, #8]
1000dca6:	3b20      	subs	r3, #32
1000dca8:	930a      	str	r3, [sp, #40]	; 0x28
1000dcaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000dcac:	b10b      	cbz	r3, 1000dcb2 <forward_dense+0x126>
1000dcae:	699b      	ldr	r3, [r3, #24]
1000dcb0:	689b      	ldr	r3, [r3, #8]
1000dcb2:	2c00      	cmp	r4, #0
1000dcb4:	f000 81da 	beq.w	1000e06c <forward_dense+0x4e0>
1000dcb8:	9910      	ldr	r1, [sp, #64]	; 0x40
1000dcba:	2904      	cmp	r1, #4
1000dcbc:	9906      	ldr	r1, [sp, #24]
1000dcbe:	f000 80fd 	beq.w	1000debc <forward_dense+0x330>
1000dcc2:	4549      	cmp	r1, r9
1000dcc4:	f080 80d2 	bcs.w	1000de6c <forward_dense+0x2e0>
1000dcc8:	460f      	mov	r7, r1
1000dcca:	9907      	ldr	r1, [sp, #28]
1000dccc:	f8dd 8008 	ldr.w	r8, [sp, #8]
1000dcd0:	f8dd a014 	ldr.w	sl, [sp, #20]
1000dcd4:	1c4e      	adds	r6, r1, #1
1000dcd6:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
1000dcda:	4694      	mov	ip, r2
1000dcdc:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000dcde:	468e      	mov	lr, r1
1000dce0:	2b00      	cmp	r3, #0
1000dce2:	f000 80de 	beq.w	1000dea2 <forward_dense+0x316>
1000dce6:	ecf3 2a01 	vldmia	r3!, {s5}
1000dcea:	ed9f 7a73 	vldr	s14, [pc, #460]	; 1000deb8 <forward_dense+0x32c>
1000dcee:	f1be 0f00 	cmp.w	lr, #0
1000dcf2:	f000 80de 	beq.w	1000deb2 <forward_dense+0x326>
1000dcf6:	f10c 0108 	add.w	r1, ip, #8
1000dcfa:	4640      	mov	r0, r8
1000dcfc:	f811 5c07 	ldrb.w	r5, [r1, #-7]
1000dd00:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
1000dd04:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
1000dd08:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
1000dd0c:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
1000dd10:	ed10 5a04 	vldr	s10, [r0, #-16]
1000dd14:	ed50 5a03 	vldr	s11, [r0, #-12]
1000dd18:	ed10 6a02 	vldr	s12, [r0, #-8]
1000dd1c:	ed50 6a01 	vldr	s13, [r0, #-4]
1000dd20:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000dd24:	edd5 7a00 	vldr	s15, [r5]
1000dd28:	f811 5c08 	ldrb.w	r5, [r1, #-8]
1000dd2c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000dd30:	ee67 7a83 	vmul.f32	s15, s15, s6
1000dd34:	ed95 3a00 	vldr	s6, [r5]
1000dd38:	f811 5c06 	ldrb.w	r5, [r1, #-6]
1000dd3c:	eee3 7a23 	vfma.f32	s15, s6, s7
1000dd40:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000dd44:	3108      	adds	r1, #8
1000dd46:	edd5 3a00 	vldr	s7, [r5]
1000dd4a:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
1000dd4e:	eee3 7a84 	vfma.f32	s15, s7, s8
1000dd52:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000dd56:	3020      	adds	r0, #32
1000dd58:	ed95 4a00 	vldr	s8, [r5]
1000dd5c:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
1000dd60:	eee4 7a24 	vfma.f32	s15, s8, s9
1000dd64:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000dd68:	edd5 4a00 	vldr	s9, [r5]
1000dd6c:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
1000dd70:	eee4 7a85 	vfma.f32	s15, s9, s10
1000dd74:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000dd78:	ed95 5a00 	vldr	s10, [r5]
1000dd7c:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
1000dd80:	eee5 7a25 	vfma.f32	s15, s10, s11
1000dd84:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000dd88:	edd5 5a00 	vldr	s11, [r5]
1000dd8c:	f811 5c09 	ldrb.w	r5, [r1, #-9]
1000dd90:	eee5 7a86 	vfma.f32	s15, s11, s12
1000dd94:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000dd98:	428e      	cmp	r6, r1
1000dd9a:	ed95 6a00 	vldr	s12, [r5]
1000dd9e:	eee6 7a26 	vfma.f32	s15, s12, s13
1000dda2:	ee37 7a27 	vadd.f32	s14, s14, s15
1000dda6:	d1a9      	bne.n	1000dcfc <forward_dense+0x170>
1000dda8:	f1a6 0108 	sub.w	r1, r6, #8
1000ddac:	4650      	mov	r0, sl
1000ddae:	2a00      	cmp	r2, #0
1000ddb0:	d04a      	beq.n	1000de48 <forward_dense+0x2bc>
1000ddb2:	780d      	ldrb	r5, [r1, #0]
1000ddb4:	edd0 6a00 	vldr	s13, [r0]
1000ddb8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000ddbc:	edd5 7a00 	vldr	s15, [r5]
1000ddc0:	2a01      	cmp	r2, #1
1000ddc2:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000ddc6:	d03f      	beq.n	1000de48 <forward_dense+0x2bc>
1000ddc8:	784d      	ldrb	r5, [r1, #1]
1000ddca:	edd0 6a01 	vldr	s13, [r0, #4]
1000ddce:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000ddd2:	edd5 7a00 	vldr	s15, [r5]
1000ddd6:	2a02      	cmp	r2, #2
1000ddd8:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000dddc:	d034      	beq.n	1000de48 <forward_dense+0x2bc>
1000ddde:	788d      	ldrb	r5, [r1, #2]
1000dde0:	edd0 6a02 	vldr	s13, [r0, #8]
1000dde4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000dde8:	edd5 7a00 	vldr	s15, [r5]
1000ddec:	2a03      	cmp	r2, #3
1000ddee:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000ddf2:	d029      	beq.n	1000de48 <forward_dense+0x2bc>
1000ddf4:	78cd      	ldrb	r5, [r1, #3]
1000ddf6:	edd0 6a03 	vldr	s13, [r0, #12]
1000ddfa:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000ddfe:	edd5 7a00 	vldr	s15, [r5]
1000de02:	2a04      	cmp	r2, #4
1000de04:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000de08:	d01e      	beq.n	1000de48 <forward_dense+0x2bc>
1000de0a:	790d      	ldrb	r5, [r1, #4]
1000de0c:	edd0 6a04 	vldr	s13, [r0, #16]
1000de10:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000de14:	edd5 7a00 	vldr	s15, [r5]
1000de18:	2a05      	cmp	r2, #5
1000de1a:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000de1e:	d013      	beq.n	1000de48 <forward_dense+0x2bc>
1000de20:	794d      	ldrb	r5, [r1, #5]
1000de22:	edd0 6a05 	vldr	s13, [r0, #20]
1000de26:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000de2a:	edd5 7a00 	vldr	s15, [r5]
1000de2e:	2a06      	cmp	r2, #6
1000de30:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000de34:	d008      	beq.n	1000de48 <forward_dense+0x2bc>
1000de36:	7989      	ldrb	r1, [r1, #6]
1000de38:	edd0 7a06 	vldr	s15, [r0, #24]
1000de3c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
1000de40:	edd1 6a00 	vldr	s13, [r1]
1000de44:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000de48:	44dc      	add	ip, fp
1000de4a:	445e      	add	r6, fp
1000de4c:	ee32 7a87 	vadd.f32	s14, s5, s14
1000de50:	eca7 7a01 	vstmia	r7!, {s14}
1000de54:	454f      	cmp	r7, r9
1000de56:	f4ff af43 	bcc.w	1000dce0 <forward_dense+0x154>
1000de5a:	9a06      	ldr	r2, [sp, #24]
1000de5c:	eba9 0302 	sub.w	r3, r9, r2
1000de60:	3b01      	subs	r3, #1
1000de62:	f023 0303 	bic.w	r3, r3, #3
1000de66:	3304      	adds	r3, #4
1000de68:	18d3      	adds	r3, r2, r3
1000de6a:	9306      	str	r3, [sp, #24]
1000de6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000de6e:	9a05      	ldr	r2, [sp, #20]
1000de70:	4499      	add	r9, r3
1000de72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000de74:	441a      	add	r2, r3
1000de76:	9205      	str	r2, [sp, #20]
1000de78:	9a02      	ldr	r2, [sp, #8]
1000de7a:	441a      	add	r2, r3
1000de7c:	9202      	str	r2, [sp, #8]
1000de7e:	9a04      	ldr	r2, [sp, #16]
1000de80:	441a      	add	r2, r3
1000de82:	9204      	str	r2, [sp, #16]
1000de84:	9b06      	ldr	r3, [sp, #24]
1000de86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000de88:	4293      	cmp	r3, r2
1000de8a:	f4ff af08 	bcc.w	1000dc9e <forward_dense+0x112>
1000de8e:	b015      	add	sp, #84	; 0x54
1000de90:	ecbd 8b02 	vpop	{d8}
1000de94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000de98:	6853      	ldr	r3, [r2, #4]
1000de9a:	deff      	udf	#255	; 0xff
1000de9c:	2300      	movs	r3, #0
1000de9e:	685b      	ldr	r3, [r3, #4]
1000dea0:	deff      	udf	#255	; 0xff
1000dea2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 1000deb8 <forward_dense+0x32c>
1000dea6:	eef0 2a48 	vmov.f32	s5, s16
1000deaa:	f1be 0f00 	cmp.w	lr, #0
1000deae:	f47f af22 	bne.w	1000dcf6 <forward_dense+0x16a>
1000deb2:	980a      	ldr	r0, [sp, #40]	; 0x28
1000deb4:	4661      	mov	r1, ip
1000deb6:	e77a      	b.n	1000ddae <forward_dense+0x222>
1000deb8:	00000000 	.word	0x00000000
1000debc:	4549      	cmp	r1, r9
1000debe:	d2d5      	bcs.n	1000de6c <forward_dense+0x2e0>
1000dec0:	9807      	ldr	r0, [sp, #28]
1000dec2:	9103      	str	r1, [sp, #12]
1000dec4:	9904      	ldr	r1, [sp, #16]
1000dec6:	f100 0c01 	add.w	ip, r0, #1
1000deca:	3901      	subs	r1, #1
1000decc:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
1000ded0:	9109      	str	r1, [sp, #36]	; 0x24
1000ded2:	2b00      	cmp	r3, #0
1000ded4:	f000 80b2 	beq.w	1000e03c <forward_dense+0x4b0>
1000ded8:	9907      	ldr	r1, [sp, #28]
1000deda:	ecf3 2a01 	vldmia	r3!, {s5}
1000dede:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 1000deb8 <forward_dense+0x32c>
1000dee2:	2900      	cmp	r1, #0
1000dee4:	f000 80b2 	beq.w	1000e04c <forward_dense+0x4c0>
1000dee8:	9902      	ldr	r1, [sp, #8]
1000deea:	1d10      	adds	r0, r2, #4
1000deec:	f810 6c04 	ldrb.w	r6, [r0, #-4]
1000def0:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
1000def4:	f810 5c03 	ldrb.w	r5, [r0, #-3]
1000def8:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
1000defc:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
1000df00:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
1000df04:	ed11 5a04 	vldr	s10, [r1, #-16]
1000df08:	ed51 5a03 	vldr	s11, [r1, #-12]
1000df0c:	ed11 6a02 	vldr	s12, [r1, #-8]
1000df10:	ed51 6a01 	vldr	s13, [r1, #-4]
1000df14:	f006 070f 	and.w	r7, r6, #15
1000df18:	eb04 0787 	add.w	r7, r4, r7, lsl #2
1000df1c:	edd7 7a00 	vldr	s15, [r7]
1000df20:	0936      	lsrs	r6, r6, #4
1000df22:	eb04 0686 	add.w	r6, r4, r6, lsl #2
1000df26:	ed96 3a00 	vldr	s6, [r6]
1000df2a:	ee67 7a82 	vmul.f32	s15, s15, s4
1000df2e:	092e      	lsrs	r6, r5, #4
1000df30:	eee3 7a23 	vfma.f32	s15, s6, s7
1000df34:	eb04 0686 	add.w	r6, r4, r6, lsl #2
1000df38:	f005 050f 	and.w	r5, r5, #15
1000df3c:	edd6 3a00 	vldr	s7, [r6]
1000df40:	f810 6c02 	ldrb.w	r6, [r0, #-2]
1000df44:	eee3 7a84 	vfma.f32	s15, s7, s8
1000df48:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000df4c:	0937      	lsrs	r7, r6, #4
1000df4e:	ed95 4a00 	vldr	s8, [r5]
1000df52:	f810 5c01 	ldrb.w	r5, [r0, #-1]
1000df56:	eee4 7a24 	vfma.f32	s15, s8, s9
1000df5a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
1000df5e:	f006 060f 	and.w	r6, r6, #15
1000df62:	edd7 4a00 	vldr	s9, [r7]
1000df66:	eee4 7a85 	vfma.f32	s15, s9, s10
1000df6a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
1000df6e:	3004      	adds	r0, #4
1000df70:	ed96 5a00 	vldr	s10, [r6]
1000df74:	092e      	lsrs	r6, r5, #4
1000df76:	eee5 7a25 	vfma.f32	s15, s10, s11
1000df7a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
1000df7e:	f005 050f 	and.w	r5, r5, #15
1000df82:	edd6 5a00 	vldr	s11, [r6]
1000df86:	eee5 7a86 	vfma.f32	s15, s11, s12
1000df8a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000df8e:	4584      	cmp	ip, r0
1000df90:	ed95 6a00 	vldr	s12, [r5]
1000df94:	eee6 7a26 	vfma.f32	s15, s12, s13
1000df98:	f101 0120 	add.w	r1, r1, #32
1000df9c:	ee37 7a27 	vadd.f32	s14, s14, s15
1000dfa0:	d1a4      	bne.n	1000deec <forward_dense+0x360>
1000dfa2:	f8dd e014 	ldr.w	lr, [sp, #20]
1000dfa6:	f1ac 0804 	sub.w	r8, ip, #4
1000dfaa:	9904      	ldr	r1, [sp, #16]
1000dfac:	458e      	cmp	lr, r1
1000dfae:	d22a      	bcs.n	1000e006 <forward_dense+0x47a>
1000dfb0:	9909      	ldr	r1, [sp, #36]	; 0x24
1000dfb2:	eba1 070e 	sub.w	r7, r1, lr
1000dfb6:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
1000dfba:	f10e 0008 	add.w	r0, lr, #8
1000dfbe:	f108 36ff 	add.w	r6, r8, #4294967295
1000dfc2:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
1000dfc6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1000dfca:	ed50 5a01 	vldr	s11, [r0, #-4]
1000dfce:	ed50 6a02 	vldr	s13, [r0, #-8]
1000dfd2:	f001 050f 	and.w	r5, r1, #15
1000dfd6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000dfda:	edd5 7a00 	vldr	s15, [r5]
1000dfde:	0909      	lsrs	r1, r1, #4
1000dfe0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
1000dfe4:	ed91 6a00 	vldr	s12, [r1]
1000dfe8:	ee67 7aa5 	vmul.f32	s15, s15, s11
1000dfec:	42b7      	cmp	r7, r6
1000dfee:	eee6 7a26 	vfma.f32	s15, s12, s13
1000dff2:	f100 0008 	add.w	r0, r0, #8
1000dff6:	ee37 7a27 	vadd.f32	s14, s14, s15
1000dffa:	d1e4      	bne.n	1000dfc6 <forward_dense+0x43a>
1000dffc:	f10a 0a01 	add.w	sl, sl, #1
1000e000:	44d0      	add	r8, sl
1000e002:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
1000e006:	9908      	ldr	r1, [sp, #32]
1000e008:	b321      	cbz	r1, 1000e054 <forward_dense+0x4c8>
1000e00a:	f898 1000 	ldrb.w	r1, [r8]
1000e00e:	edde 7a00 	vldr	s15, [lr]
1000e012:	0909      	lsrs	r1, r1, #4
1000e014:	eb04 0181 	add.w	r1, r4, r1, lsl #2
1000e018:	edd1 6a00 	vldr	s13, [r1]
1000e01c:	9903      	ldr	r1, [sp, #12]
1000e01e:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e022:	445a      	add	r2, fp
1000e024:	44dc      	add	ip, fp
1000e026:	ee72 2a87 	vadd.f32	s5, s5, s14
1000e02a:	ece1 2a01 	vstmia	r1!, {s5}
1000e02e:	4589      	cmp	r9, r1
1000e030:	9103      	str	r1, [sp, #12]
1000e032:	f67f af12 	bls.w	1000de5a <forward_dense+0x2ce>
1000e036:	2b00      	cmp	r3, #0
1000e038:	f47f af4e 	bne.w	1000ded8 <forward_dense+0x34c>
1000e03c:	9907      	ldr	r1, [sp, #28]
1000e03e:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 1000deb8 <forward_dense+0x32c>
1000e042:	eef0 2a48 	vmov.f32	s5, s16
1000e046:	2900      	cmp	r1, #0
1000e048:	f47f af4e 	bne.w	1000dee8 <forward_dense+0x35c>
1000e04c:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
1000e050:	4690      	mov	r8, r2
1000e052:	e7aa      	b.n	1000dfaa <forward_dense+0x41e>
1000e054:	9903      	ldr	r1, [sp, #12]
1000e056:	ee32 7a87 	vadd.f32	s14, s5, s14
1000e05a:	445a      	add	r2, fp
1000e05c:	eca1 7a01 	vstmia	r1!, {s14}
1000e060:	4549      	cmp	r1, r9
1000e062:	9103      	str	r1, [sp, #12]
1000e064:	44dc      	add	ip, fp
1000e066:	f4ff af34 	bcc.w	1000ded2 <forward_dense+0x346>
1000e06a:	e6f6      	b.n	1000de5a <forward_dense+0x2ce>
1000e06c:	9912      	ldr	r1, [sp, #72]	; 0x48
1000e06e:	9d06      	ldr	r5, [sp, #24]
1000e070:	9101      	str	r1, [sp, #4]
1000e072:	9913      	ldr	r1, [sp, #76]	; 0x4c
1000e074:	9100      	str	r1, [sp, #0]
1000e076:	4628      	mov	r0, r5
1000e078:	990a      	ldr	r1, [sp, #40]	; 0x28
1000e07a:	f000 f9ab 	bl	1000e3d4 <forward_lite_dense_if32of32wf32>
1000e07e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000e080:	462b      	mov	r3, r5
1000e082:	4413      	add	r3, r2
1000e084:	9306      	str	r3, [sp, #24]
1000e086:	e6f1      	b.n	1000de6c <forward_dense+0x2e0>
1000e088:	f8d1 800c 	ldr.w	r8, [r1, #12]
1000e08c:	f1b9 0f00 	cmp.w	r9, #0
1000e090:	d016      	beq.n	1000e0c0 <forward_dense+0x534>
1000e092:	e9d9 0100 	ldrd	r0, r1, [r9]
1000e096:	f000 fbb3 	bl	1000e800 <ai_array_get_byte_size>
1000e09a:	f8d9 b00c 	ldr.w	fp, [r9, #12]
1000e09e:	4602      	mov	r2, r0
1000e0a0:	4659      	mov	r1, fp
1000e0a2:	4640      	mov	r0, r8
1000e0a4:	f000 faba 	bl	1000e61c <st_int8_copy>
1000e0a8:	e5c7      	b.n	1000dc3a <forward_dense+0xae>
1000e0aa:	2b04      	cmp	r3, #4
1000e0ac:	d00a      	beq.n	1000e0c4 <forward_dense+0x538>
1000e0ae:	f04f 0900 	mov.w	r9, #0
1000e0b2:	e5bd      	b.n	1000dc30 <forward_dense+0xa4>
1000e0b4:	930d      	str	r3, [sp, #52]	; 0x34
1000e0b6:	e595      	b.n	1000dbe4 <forward_dense+0x58>
1000e0b8:	2300      	movs	r3, #0
1000e0ba:	930b      	str	r3, [sp, #44]	; 0x2c
1000e0bc:	460b      	mov	r3, r1
1000e0be:	e591      	b.n	1000dbe4 <forward_dense+0x58>
1000e0c0:	46c3      	mov	fp, r8
1000e0c2:	e5ba      	b.n	1000dc3a <forward_dense+0xae>
1000e0c4:	f8d1 b00c 	ldr.w	fp, [r1, #12]
1000e0c8:	e5b7      	b.n	1000dc3a <forward_dense+0xae>
1000e0ca:	2300      	movs	r3, #0
1000e0cc:	685b      	ldr	r3, [r3, #4]
1000e0ce:	deff      	udf	#255	; 0xff
1000e0d0:	2300      	movs	r3, #0
1000e0d2:	685b      	ldr	r3, [r3, #4]
1000e0d4:	deff      	udf	#255	; 0xff
1000e0d6:	bf00      	nop

1000e0d8 <forward_sigmoid>:
1000e0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e0da:	ed2d 8b02 	vpush	{d8}
1000e0de:	6982      	ldr	r2, [r0, #24]
1000e0e0:	8813      	ldrh	r3, [r2, #0]
1000e0e2:	2b00      	cmp	r3, #0
1000e0e4:	d03b      	beq.n	1000e15e <forward_sigmoid+0x86>
1000e0e6:	6852      	ldr	r2, [r2, #4]
1000e0e8:	6854      	ldr	r4, [r2, #4]
1000e0ea:	b104      	cbz	r4, 1000e0ee <forward_sigmoid+0x16>
1000e0ec:	6824      	ldr	r4, [r4, #0]
1000e0ee:	2b01      	cmp	r3, #1
1000e0f0:	d034      	beq.n	1000e15c <forward_sigmoid+0x84>
1000e0f2:	6915      	ldr	r5, [r2, #16]
1000e0f4:	b105      	cbz	r5, 1000e0f8 <forward_sigmoid+0x20>
1000e0f6:	682d      	ldr	r5, [r5, #0]
1000e0f8:	68a3      	ldr	r3, [r4, #8]
1000e0fa:	0a1b      	lsrs	r3, r3, #8
1000e0fc:	d031      	beq.n	1000e162 <forward_sigmoid+0x8a>
1000e0fe:	68e0      	ldr	r0, [r4, #12]
1000e100:	2201      	movs	r2, #1
1000e102:	eb00 0383 	add.w	r3, r0, r3, lsl #2
1000e106:	f853 1d04 	ldr.w	r1, [r3, #-4]!
1000e10a:	4298      	cmp	r0, r3
1000e10c:	fb01 f202 	mul.w	r2, r1, r2
1000e110:	d1f9      	bne.n	1000e106 <forward_sigmoid+0x2e>
1000e112:	69a7      	ldr	r7, [r4, #24]
1000e114:	69a9      	ldr	r1, [r5, #24]
1000e116:	68bb      	ldr	r3, [r7, #8]
1000e118:	688e      	ldr	r6, [r1, #8]
1000e11a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
1000e11e:	3a01      	subs	r2, #1
1000e120:	eb03 0582 	add.w	r5, r3, r2, lsl #2
1000e124:	42ab      	cmp	r3, r5
1000e126:	eb06 0682 	add.w	r6, r6, r2, lsl #2
1000e12a:	d814      	bhi.n	1000e156 <forward_sigmoid+0x7e>
1000e12c:	3504      	adds	r5, #4
1000e12e:	3604      	adds	r6, #4
1000e130:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
1000e134:	462c      	mov	r4, r5
1000e136:	ed35 0a01 	vldmdb	r5!, {s0}
1000e13a:	eeb1 0a40 	vneg.f32	s0, s0
1000e13e:	f003 fa69 	bl	10011614 <expf>
1000e142:	ee30 0a08 	vadd.f32	s0, s0, s16
1000e146:	3c08      	subs	r4, #8
1000e148:	eec8 7a00 	vdiv.f32	s15, s16, s0
1000e14c:	ed66 7a01 	vstmdb	r6!, {s15}
1000e150:	68bb      	ldr	r3, [r7, #8]
1000e152:	42a3      	cmp	r3, r4
1000e154:	d9ee      	bls.n	1000e134 <forward_sigmoid+0x5c>
1000e156:	ecbd 8b02 	vpop	{d8}
1000e15a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e15c:	2300      	movs	r3, #0
1000e15e:	685b      	ldr	r3, [r3, #4]
1000e160:	deff      	udf	#255	; 0xff
1000e162:	69ab      	ldr	r3, [r5, #24]
1000e164:	69a7      	ldr	r7, [r4, #24]
1000e166:	689e      	ldr	r6, [r3, #8]
1000e168:	68bd      	ldr	r5, [r7, #8]
1000e16a:	e7df      	b.n	1000e12c <forward_sigmoid+0x54>

1000e16c <forward_relu>:
1000e16c:	6982      	ldr	r2, [r0, #24]
1000e16e:	8813      	ldrh	r3, [r2, #0]
1000e170:	2b00      	cmp	r3, #0
1000e172:	d05b      	beq.n	1000e22c <forward_relu+0xc0>
1000e174:	6851      	ldr	r1, [r2, #4]
1000e176:	684a      	ldr	r2, [r1, #4]
1000e178:	b102      	cbz	r2, 1000e17c <forward_relu+0x10>
1000e17a:	6812      	ldr	r2, [r2, #0]
1000e17c:	2b01      	cmp	r3, #1
1000e17e:	f000 8123 	beq.w	1000e3c8 <forward_relu+0x25c>
1000e182:	b470      	push	{r4, r5, r6}
1000e184:	6909      	ldr	r1, [r1, #16]
1000e186:	b101      	cbz	r1, 1000e18a <forward_relu+0x1e>
1000e188:	6809      	ldr	r1, [r1, #0]
1000e18a:	69c6      	ldr	r6, [r0, #28]
1000e18c:	2e00      	cmp	r6, #0
1000e18e:	f000 8097 	beq.w	1000e2c0 <forward_relu+0x154>
1000e192:	6873      	ldr	r3, [r6, #4]
1000e194:	6988      	ldr	r0, [r1, #24]
1000e196:	6991      	ldr	r1, [r2, #24]
1000e198:	2b01      	cmp	r3, #1
1000e19a:	f000 80c1 	beq.w	1000e320 <forward_relu+0x1b4>
1000e19e:	6893      	ldr	r3, [r2, #8]
1000e1a0:	6880      	ldr	r0, [r0, #8]
1000e1a2:	688c      	ldr	r4, [r1, #8]
1000e1a4:	0a1b      	lsrs	r3, r3, #8
1000e1a6:	f000 80f2 	beq.w	1000e38e <forward_relu+0x222>
1000e1aa:	68d5      	ldr	r5, [r2, #12]
1000e1ac:	2201      	movs	r2, #1
1000e1ae:	eb05 0383 	add.w	r3, r5, r3, lsl #2
1000e1b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
1000e1b6:	42ab      	cmp	r3, r5
1000e1b8:	fb01 f202 	mul.w	r2, r1, r2
1000e1bc:	d1f9      	bne.n	1000e1b2 <forward_relu+0x46>
1000e1be:	68b3      	ldr	r3, [r6, #8]
1000e1c0:	ed93 7a02 	vldr	s14, [r3, #8]
1000e1c4:	edd3 6a00 	vldr	s13, [r3]
1000e1c8:	ed93 6a01 	vldr	s12, [r3, #4]
1000e1cc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
1000e1d0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
1000e1d4:	3a01      	subs	r2, #1
1000e1d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e1da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
1000e1de:	eb00 0082 	add.w	r0, r0, r2, lsl #2
1000e1e2:	d425      	bmi.n	1000e230 <forward_relu+0xc4>
1000e1e4:	429c      	cmp	r4, r3
1000e1e6:	d81f      	bhi.n	1000e228 <forward_relu+0xbc>
1000e1e8:	1d1a      	adds	r2, r3, #4
1000e1ea:	1d01      	adds	r1, r0, #4
1000e1ec:	e00d      	b.n	1000e20a <forward_relu+0x9e>
1000e1ee:	eef4 6ae7 	vcmpe.f32	s13, s15
1000e1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e1f6:	db03      	blt.n	1000e200 <forward_relu+0x94>
1000e1f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
1000e1fc:	ee67 7a86 	vmul.f32	s15, s15, s12
1000e200:	3b08      	subs	r3, #8
1000e202:	429c      	cmp	r4, r3
1000e204:	ed61 7a01 	vstmdb	r1!, {s15}
1000e208:	d80e      	bhi.n	1000e228 <forward_relu+0xbc>
1000e20a:	4613      	mov	r3, r2
1000e20c:	ed72 7a01 	vldmdb	r2!, {s15}
1000e210:	eef4 7ac7 	vcmpe.f32	s15, s14
1000e214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e218:	d9e9      	bls.n	1000e1ee <forward_relu+0x82>
1000e21a:	3b08      	subs	r3, #8
1000e21c:	eef0 7a47 	vmov.f32	s15, s14
1000e220:	429c      	cmp	r4, r3
1000e222:	ed61 7a01 	vstmdb	r1!, {s15}
1000e226:	d9f0      	bls.n	1000e20a <forward_relu+0x9e>
1000e228:	bc70      	pop	{r4, r5, r6}
1000e22a:	4770      	bx	lr
1000e22c:	685b      	ldr	r3, [r3, #4]
1000e22e:	deff      	udf	#255	; 0xff
1000e230:	eeb5 6a40 	vcmp.f32	s12, #0.0
1000e234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e238:	d11f      	bne.n	1000e27a <forward_relu+0x10e>
1000e23a:	429c      	cmp	r4, r3
1000e23c:	d8f4      	bhi.n	1000e228 <forward_relu+0xbc>
1000e23e:	1b1c      	subs	r4, r3, r4
1000e240:	f024 0403 	bic.w	r4, r4, #3
1000e244:	1d1a      	adds	r2, r3, #4
1000e246:	2500      	movs	r5, #0
1000e248:	1b1b      	subs	r3, r3, r4
1000e24a:	1d01      	adds	r1, r0, #4
1000e24c:	ed72 7a01 	vldmdb	r2!, {s15}
1000e250:	eef4 7ae6 	vcmpe.f32	s15, s13
1000e254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e258:	dc0a      	bgt.n	1000e270 <forward_relu+0x104>
1000e25a:	429a      	cmp	r2, r3
1000e25c:	f841 5d04 	str.w	r5, [r1, #-4]!
1000e260:	d0e2      	beq.n	1000e228 <forward_relu+0xbc>
1000e262:	ed72 7a01 	vldmdb	r2!, {s15}
1000e266:	eef4 7ae6 	vcmpe.f32	s15, s13
1000e26a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e26e:	ddf4      	ble.n	1000e25a <forward_relu+0xee>
1000e270:	429a      	cmp	r2, r3
1000e272:	ed61 7a01 	vstmdb	r1!, {s15}
1000e276:	d1e9      	bne.n	1000e24c <forward_relu+0xe0>
1000e278:	e7d6      	b.n	1000e228 <forward_relu+0xbc>
1000e27a:	429c      	cmp	r4, r3
1000e27c:	d8d4      	bhi.n	1000e228 <forward_relu+0xbc>
1000e27e:	1b1c      	subs	r4, r3, r4
1000e280:	f024 0403 	bic.w	r4, r4, #3
1000e284:	1d1a      	adds	r2, r3, #4
1000e286:	1d01      	adds	r1, r0, #4
1000e288:	1b1b      	subs	r3, r3, r4
1000e28a:	ed72 7a01 	vldmdb	r2!, {s15}
1000e28e:	eef4 6ae7 	vcmpe.f32	s13, s15
1000e292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e296:	db0e      	blt.n	1000e2b6 <forward_relu+0x14a>
1000e298:	ee77 7ae6 	vsub.f32	s15, s15, s13
1000e29c:	4293      	cmp	r3, r2
1000e29e:	ee67 7a86 	vmul.f32	s15, s15, s12
1000e2a2:	ed61 7a01 	vstmdb	r1!, {s15}
1000e2a6:	d0bf      	beq.n	1000e228 <forward_relu+0xbc>
1000e2a8:	ed72 7a01 	vldmdb	r2!, {s15}
1000e2ac:	eef4 6ae7 	vcmpe.f32	s13, s15
1000e2b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e2b4:	daf0      	bge.n	1000e298 <forward_relu+0x12c>
1000e2b6:	4293      	cmp	r3, r2
1000e2b8:	ed61 7a01 	vstmdb	r1!, {s15}
1000e2bc:	d1e5      	bne.n	1000e28a <forward_relu+0x11e>
1000e2be:	e7b3      	b.n	1000e228 <forward_relu+0xbc>
1000e2c0:	6893      	ldr	r3, [r2, #8]
1000e2c2:	6989      	ldr	r1, [r1, #24]
1000e2c4:	6990      	ldr	r0, [r2, #24]
1000e2c6:	6889      	ldr	r1, [r1, #8]
1000e2c8:	6884      	ldr	r4, [r0, #8]
1000e2ca:	0a1b      	lsrs	r3, r3, #8
1000e2cc:	d075      	beq.n	1000e3ba <forward_relu+0x24e>
1000e2ce:	68d5      	ldr	r5, [r2, #12]
1000e2d0:	2201      	movs	r2, #1
1000e2d2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
1000e2d6:	f853 0d04 	ldr.w	r0, [r3, #-4]!
1000e2da:	429d      	cmp	r5, r3
1000e2dc:	fb00 f202 	mul.w	r2, r0, r2
1000e2e0:	d1f9      	bne.n	1000e2d6 <forward_relu+0x16a>
1000e2e2:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
1000e2e6:	3b01      	subs	r3, #1
1000e2e8:	eb04 0283 	add.w	r2, r4, r3, lsl #2
1000e2ec:	4294      	cmp	r4, r2
1000e2ee:	eb01 0183 	add.w	r1, r1, r3, lsl #2
1000e2f2:	d899      	bhi.n	1000e228 <forward_relu+0xbc>
1000e2f4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 1000e3d0 <forward_relu+0x264>
1000e2f8:	3204      	adds	r2, #4
1000e2fa:	3104      	adds	r1, #4
1000e2fc:	4613      	mov	r3, r2
1000e2fe:	ed72 7a01 	vldmdb	r2!, {s15}
1000e302:	eef5 7ac0 	vcmpe.f32	s15, #0.0
1000e306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e30a:	f1a3 0308 	sub.w	r3, r3, #8
1000e30e:	bfb8      	it	lt
1000e310:	eef0 7a47 	vmovlt.f32	s15, s14
1000e314:	429c      	cmp	r4, r3
1000e316:	ed61 7a01 	vstmdb	r1!, {s15}
1000e31a:	d9ef      	bls.n	1000e2fc <forward_relu+0x190>
1000e31c:	bc70      	pop	{r4, r5, r6}
1000e31e:	4770      	bx	lr
1000e320:	688c      	ldr	r4, [r1, #8]
1000e322:	6891      	ldr	r1, [r2, #8]
1000e324:	6880      	ldr	r0, [r0, #8]
1000e326:	0a09      	lsrs	r1, r1, #8
1000e328:	d049      	beq.n	1000e3be <forward_relu+0x252>
1000e32a:	68d5      	ldr	r5, [r2, #12]
1000e32c:	eb05 0281 	add.w	r2, r5, r1, lsl #2
1000e330:	f852 1d04 	ldr.w	r1, [r2, #-4]!
1000e334:	42aa      	cmp	r2, r5
1000e336:	fb01 f303 	mul.w	r3, r1, r3
1000e33a:	d1f9      	bne.n	1000e330 <forward_relu+0x1c4>
1000e33c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
1000e340:	3a01      	subs	r2, #1
1000e342:	68b1      	ldr	r1, [r6, #8]
1000e344:	eb04 0382 	add.w	r3, r4, r2, lsl #2
1000e348:	429c      	cmp	r4, r3
1000e34a:	ed91 7a00 	vldr	s14, [r1]
1000e34e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
1000e352:	f63f af69 	bhi.w	1000e228 <forward_relu+0xbc>
1000e356:	2500      	movs	r5, #0
1000e358:	3304      	adds	r3, #4
1000e35a:	1d02      	adds	r2, r0, #4
1000e35c:	ed53 7a01 	vldr	s15, [r3, #-4]
1000e360:	eeb4 7ae7 	vcmpe.f32	s14, s15
1000e364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e368:	f1a3 0104 	sub.w	r1, r3, #4
1000e36c:	f1a3 0308 	sub.w	r3, r3, #8
1000e370:	d406      	bmi.n	1000e380 <forward_relu+0x214>
1000e372:	429c      	cmp	r4, r3
1000e374:	f842 5d04 	str.w	r5, [r2, #-4]!
1000e378:	f63f af56 	bhi.w	1000e228 <forward_relu+0xbc>
1000e37c:	460b      	mov	r3, r1
1000e37e:	e7ed      	b.n	1000e35c <forward_relu+0x1f0>
1000e380:	429c      	cmp	r4, r3
1000e382:	ed62 7a01 	vstmdb	r2!, {s15}
1000e386:	f63f af4f 	bhi.w	1000e228 <forward_relu+0xbc>
1000e38a:	460b      	mov	r3, r1
1000e38c:	e7e6      	b.n	1000e35c <forward_relu+0x1f0>
1000e38e:	68b3      	ldr	r3, [r6, #8]
1000e390:	ed93 7a02 	vldr	s14, [r3, #8]
1000e394:	edd3 6a00 	vldr	s13, [r3]
1000e398:	ed93 6a01 	vldr	s12, [r3, #4]
1000e39c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
1000e3a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e3a4:	d401      	bmi.n	1000e3aa <forward_relu+0x23e>
1000e3a6:	4623      	mov	r3, r4
1000e3a8:	e71e      	b.n	1000e1e8 <forward_relu+0x7c>
1000e3aa:	eeb5 6a40 	vcmp.f32	s12, #0.0
1000e3ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e3b2:	4623      	mov	r3, r4
1000e3b4:	f47f af63 	bne.w	1000e27e <forward_relu+0x112>
1000e3b8:	e741      	b.n	1000e23e <forward_relu+0xd2>
1000e3ba:	4622      	mov	r2, r4
1000e3bc:	e79a      	b.n	1000e2f4 <forward_relu+0x188>
1000e3be:	68b2      	ldr	r2, [r6, #8]
1000e3c0:	4623      	mov	r3, r4
1000e3c2:	ed92 7a00 	vldr	s14, [r2]
1000e3c6:	e7c6      	b.n	1000e356 <forward_relu+0x1ea>
1000e3c8:	2300      	movs	r3, #0
1000e3ca:	685b      	ldr	r3, [r3, #4]
1000e3cc:	deff      	udf	#255	; 0xff
1000e3ce:	bf00      	nop
1000e3d0:	00000000 	.word	0x00000000

1000e3d4 <forward_lite_dense_if32of32wf32>:
1000e3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000e3d8:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
1000e3dc:	eb00 0784 	add.w	r7, r0, r4, lsl #2
1000e3e0:	4287      	cmp	r7, r0
1000e3e2:	f240 8106 	bls.w	1000e5f2 <forward_lite_dense_if32of32wf32+0x21e>
1000e3e6:	f1a6 0810 	sub.w	r8, r6, #16
1000e3ea:	ea4f 1818 	mov.w	r8, r8, lsr #4
1000e3ee:	f108 0801 	add.w	r8, r8, #1
1000e3f2:	ea4f 1b88 	mov.w	fp, r8, lsl #6
1000e3f6:	ea4f 0986 	mov.w	r9, r6, lsl #2
1000e3fa:	eb01 1888 	add.w	r8, r1, r8, lsl #6
1000e3fe:	4605      	mov	r5, r0
1000e400:	f006 0a0f 	and.w	sl, r6, #15
1000e404:	2e0f      	cmp	r6, #15
1000e406:	ed9f 7a84 	vldr	s14, [pc, #528]	; 1000e618 <forward_lite_dense_if32of32wf32+0x244>
1000e40a:	f240 8101 	bls.w	1000e610 <forward_lite_dense_if32of32wf32+0x23c>
1000e40e:	f101 0c40 	add.w	ip, r1, #64	; 0x40
1000e412:	f102 0440 	add.w	r4, r2, #64	; 0x40
1000e416:	46b6      	mov	lr, r6
1000e418:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
1000e41c:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
1000e420:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
1000e424:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
1000e428:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
1000e42c:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
1000e430:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
1000e434:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
1000e438:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
1000e43c:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
1000e440:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
1000e444:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
1000e448:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
1000e44c:	ee67 7aa5 	vmul.f32	s15, s15, s11
1000e450:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
1000e454:	eee6 7a26 	vfma.f32	s15, s12, s13
1000e458:	f1ae 0e10 	sub.w	lr, lr, #16
1000e45c:	f1be 0f0f 	cmp.w	lr, #15
1000e460:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
1000e464:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
1000e468:	eee5 7a86 	vfma.f32	s15, s11, s12
1000e46c:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
1000e470:	f104 0440 	add.w	r4, r4, #64	; 0x40
1000e474:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
1000e478:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
1000e47c:	eee4 7aa6 	vfma.f32	s15, s9, s13
1000e480:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
1000e484:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
1000e488:	eee5 7a25 	vfma.f32	s15, s10, s11
1000e48c:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
1000e490:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
1000e494:	eee6 7a26 	vfma.f32	s15, s12, s13
1000e498:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
1000e49c:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
1000e4a0:	eee3 7a23 	vfma.f32	s15, s6, s7
1000e4a4:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
1000e4a8:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
1000e4ac:	eee4 7a24 	vfma.f32	s15, s8, s9
1000e4b0:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
1000e4b4:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
1000e4b8:	eee5 7a25 	vfma.f32	s15, s10, s11
1000e4bc:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
1000e4c0:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
1000e4c4:	eee6 7a26 	vfma.f32	s15, s12, s13
1000e4c8:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
1000e4cc:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
1000e4d0:	eee1 7a21 	vfma.f32	s15, s2, s3
1000e4d4:	eee2 7a22 	vfma.f32	s15, s4, s5
1000e4d8:	eee3 7a23 	vfma.f32	s15, s6, s7
1000e4dc:	eee4 7a24 	vfma.f32	s15, s8, s9
1000e4e0:	eee5 7a25 	vfma.f32	s15, s10, s11
1000e4e4:	eee6 7a26 	vfma.f32	s15, s12, s13
1000e4e8:	ee37 7a27 	vadd.f32	s14, s14, s15
1000e4ec:	d894      	bhi.n	1000e418 <forward_lite_dense_if32of32wf32+0x44>
1000e4ee:	eb02 0e0b 	add.w	lr, r2, fp
1000e4f2:	4654      	mov	r4, sl
1000e4f4:	46c4      	mov	ip, r8
1000e4f6:	2c00      	cmp	r4, #0
1000e4f8:	d075      	beq.n	1000e5e6 <forward_lite_dense_if32of32wf32+0x212>
1000e4fa:	eddc 6a00 	vldr	s13, [ip]
1000e4fe:	edde 7a00 	vldr	s15, [lr]
1000e502:	2c01      	cmp	r4, #1
1000e504:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e508:	d06d      	beq.n	1000e5e6 <forward_lite_dense_if32of32wf32+0x212>
1000e50a:	eddc 6a01 	vldr	s13, [ip, #4]
1000e50e:	edde 7a01 	vldr	s15, [lr, #4]
1000e512:	2c02      	cmp	r4, #2
1000e514:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e518:	d065      	beq.n	1000e5e6 <forward_lite_dense_if32of32wf32+0x212>
1000e51a:	eddc 6a02 	vldr	s13, [ip, #8]
1000e51e:	edde 7a02 	vldr	s15, [lr, #8]
1000e522:	2c03      	cmp	r4, #3
1000e524:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e528:	d05d      	beq.n	1000e5e6 <forward_lite_dense_if32of32wf32+0x212>
1000e52a:	eddc 6a03 	vldr	s13, [ip, #12]
1000e52e:	edde 7a03 	vldr	s15, [lr, #12]
1000e532:	2c04      	cmp	r4, #4
1000e534:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e538:	d055      	beq.n	1000e5e6 <forward_lite_dense_if32of32wf32+0x212>
1000e53a:	eddc 6a04 	vldr	s13, [ip, #16]
1000e53e:	edde 7a04 	vldr	s15, [lr, #16]
1000e542:	2c05      	cmp	r4, #5
1000e544:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e548:	d04d      	beq.n	1000e5e6 <forward_lite_dense_if32of32wf32+0x212>
1000e54a:	eddc 6a05 	vldr	s13, [ip, #20]
1000e54e:	edde 7a05 	vldr	s15, [lr, #20]
1000e552:	2c06      	cmp	r4, #6
1000e554:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e558:	d045      	beq.n	1000e5e6 <forward_lite_dense_if32of32wf32+0x212>
1000e55a:	eddc 6a06 	vldr	s13, [ip, #24]
1000e55e:	edde 7a06 	vldr	s15, [lr, #24]
1000e562:	2c07      	cmp	r4, #7
1000e564:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e568:	d03d      	beq.n	1000e5e6 <forward_lite_dense_if32of32wf32+0x212>
1000e56a:	eddc 6a07 	vldr	s13, [ip, #28]
1000e56e:	edde 7a07 	vldr	s15, [lr, #28]
1000e572:	2c08      	cmp	r4, #8
1000e574:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e578:	d035      	beq.n	1000e5e6 <forward_lite_dense_if32of32wf32+0x212>
1000e57a:	eddc 6a08 	vldr	s13, [ip, #32]
1000e57e:	edde 7a08 	vldr	s15, [lr, #32]
1000e582:	2c09      	cmp	r4, #9
1000e584:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e588:	d02d      	beq.n	1000e5e6 <forward_lite_dense_if32of32wf32+0x212>
1000e58a:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
1000e58e:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
1000e592:	2c0a      	cmp	r4, #10
1000e594:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e598:	d025      	beq.n	1000e5e6 <forward_lite_dense_if32of32wf32+0x212>
1000e59a:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
1000e59e:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
1000e5a2:	2c0b      	cmp	r4, #11
1000e5a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e5a8:	d01d      	beq.n	1000e5e6 <forward_lite_dense_if32of32wf32+0x212>
1000e5aa:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
1000e5ae:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
1000e5b2:	2c0c      	cmp	r4, #12
1000e5b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e5b8:	d015      	beq.n	1000e5e6 <forward_lite_dense_if32of32wf32+0x212>
1000e5ba:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
1000e5be:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
1000e5c2:	3c0d      	subs	r4, #13
1000e5c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e5c8:	d00d      	beq.n	1000e5e6 <forward_lite_dense_if32of32wf32+0x212>
1000e5ca:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
1000e5ce:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
1000e5d2:	2c01      	cmp	r4, #1
1000e5d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e5d8:	d005      	beq.n	1000e5e6 <forward_lite_dense_if32of32wf32+0x212>
1000e5da:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
1000e5de:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
1000e5e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e5e6:	444a      	add	r2, r9
1000e5e8:	eca5 7a01 	vstmia	r5!, {s14}
1000e5ec:	42af      	cmp	r7, r5
1000e5ee:	f63f af09 	bhi.w	1000e404 <forward_lite_dense_if32of32wf32+0x30>
1000e5f2:	b15b      	cbz	r3, 1000e60c <forward_lite_dense_if32of32wf32+0x238>
1000e5f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000e5f6:	b14a      	cbz	r2, 1000e60c <forward_lite_dense_if32of32wf32+0x238>
1000e5f8:	edd0 7a00 	vldr	s15, [r0]
1000e5fc:	ecb3 7a01 	vldmia	r3!, {s14}
1000e600:	ee77 7a87 	vadd.f32	s15, s15, s14
1000e604:	ece0 7a01 	vstmia	r0!, {s15}
1000e608:	4287      	cmp	r7, r0
1000e60a:	d1f5      	bne.n	1000e5f8 <forward_lite_dense_if32of32wf32+0x224>
1000e60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000e610:	4634      	mov	r4, r6
1000e612:	4696      	mov	lr, r2
1000e614:	468c      	mov	ip, r1
1000e616:	e76e      	b.n	1000e4f6 <forward_lite_dense_if32of32wf32+0x122>
1000e618:	00000000 	.word	0x00000000

1000e61c <st_int8_copy>:
1000e61c:	4288      	cmp	r0, r1
1000e61e:	d057      	beq.n	1000e6d0 <st_int8_copy+0xb4>
1000e620:	2a00      	cmp	r2, #0
1000e622:	d055      	beq.n	1000e6d0 <st_int8_copy+0xb4>
1000e624:	4288      	cmp	r0, r1
1000e626:	d354      	bcc.n	1000e6d2 <st_int8_copy+0xb6>
1000e628:	078b      	lsls	r3, r1, #30
1000e62a:	d102      	bne.n	1000e632 <st_int8_copy+0x16>
1000e62c:	e009      	b.n	1000e642 <st_int8_copy+0x26>
1000e62e:	2a00      	cmp	r2, #0
1000e630:	d05c      	beq.n	1000e6ec <st_int8_copy+0xd0>
1000e632:	f910 3b01 	ldrsb.w	r3, [r0], #1
1000e636:	f801 3b01 	strb.w	r3, [r1], #1
1000e63a:	078b      	lsls	r3, r1, #30
1000e63c:	f102 32ff 	add.w	r2, r2, #4294967295
1000e640:	d1f5      	bne.n	1000e62e <st_int8_copy+0x12>
1000e642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000e646:	ea5f 1e12 	movs.w	lr, r2, lsr #4
1000e64a:	d069      	beq.n	1000e720 <st_int8_copy+0x104>
1000e64c:	ea41 0300 	orr.w	r3, r1, r0
1000e650:	075b      	lsls	r3, r3, #29
1000e652:	d14c      	bne.n	1000e6ee <st_int8_copy+0xd2>
1000e654:	f10e 33ff 	add.w	r3, lr, #4294967295
1000e658:	2b01      	cmp	r3, #1
1000e65a:	d948      	bls.n	1000e6ee <st_int8_copy+0xd2>
1000e65c:	f100 0310 	add.w	r3, r0, #16
1000e660:	ea4f 140e 	mov.w	r4, lr, lsl #4
1000e664:	f101 0c10 	add.w	ip, r1, #16
1000e668:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
1000e66c:	ed13 6b04 	vldr	d6, [r3, #-16]
1000e670:	ed13 7b02 	vldr	d7, [r3, #-8]
1000e674:	3310      	adds	r3, #16
1000e676:	4573      	cmp	r3, lr
1000e678:	ed0c 6b04 	vstr	d6, [ip, #-16]
1000e67c:	ed0c 7b02 	vstr	d7, [ip, #-8]
1000e680:	f10c 0c10 	add.w	ip, ip, #16
1000e684:	d1f2      	bne.n	1000e66c <st_int8_copy+0x50>
1000e686:	f3c2 0381 	ubfx	r3, r2, #2, #2
1000e68a:	4421      	add	r1, r4
1000e68c:	4420      	add	r0, r4
1000e68e:	f002 0203 	and.w	r2, r2, #3
1000e692:	b16b      	cbz	r3, 1000e6b0 <st_int8_copy+0x94>
1000e694:	6804      	ldr	r4, [r0, #0]
1000e696:	600c      	str	r4, [r1, #0]
1000e698:	1e5c      	subs	r4, r3, #1
1000e69a:	d005      	beq.n	1000e6a8 <st_int8_copy+0x8c>
1000e69c:	6845      	ldr	r5, [r0, #4]
1000e69e:	604d      	str	r5, [r1, #4]
1000e6a0:	2c01      	cmp	r4, #1
1000e6a2:	bf1c      	itt	ne
1000e6a4:	6884      	ldrne	r4, [r0, #8]
1000e6a6:	608c      	strne	r4, [r1, #8]
1000e6a8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
1000e6ac:	eb01 0183 	add.w	r1, r1, r3, lsl #2
1000e6b0:	b162      	cbz	r2, 1000e6cc <st_int8_copy+0xb0>
1000e6b2:	f990 3000 	ldrsb.w	r3, [r0]
1000e6b6:	700b      	strb	r3, [r1, #0]
1000e6b8:	3a01      	subs	r2, #1
1000e6ba:	d007      	beq.n	1000e6cc <st_int8_copy+0xb0>
1000e6bc:	f990 3001 	ldrsb.w	r3, [r0, #1]
1000e6c0:	704b      	strb	r3, [r1, #1]
1000e6c2:	2a01      	cmp	r2, #1
1000e6c4:	bf1c      	itt	ne
1000e6c6:	f990 3002 	ldrsbne.w	r3, [r0, #2]
1000e6ca:	708b      	strbne	r3, [r1, #2]
1000e6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000e6d0:	4770      	bx	lr
1000e6d2:	1883      	adds	r3, r0, r2
1000e6d4:	428b      	cmp	r3, r1
1000e6d6:	d9a7      	bls.n	1000e628 <st_int8_copy+0xc>
1000e6d8:	4283      	cmp	r3, r0
1000e6da:	440a      	add	r2, r1
1000e6dc:	d9f8      	bls.n	1000e6d0 <st_int8_copy+0xb4>
1000e6de:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
1000e6e2:	f802 1d01 	strb.w	r1, [r2, #-1]!
1000e6e6:	4283      	cmp	r3, r0
1000e6e8:	d1f9      	bne.n	1000e6de <st_int8_copy+0xc2>
1000e6ea:	4770      	bx	lr
1000e6ec:	4770      	bx	lr
1000e6ee:	ea4f 140e 	mov.w	r4, lr, lsl #4
1000e6f2:	460b      	mov	r3, r1
1000e6f4:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
1000e6f8:	4684      	mov	ip, r0
1000e6fa:	f8dc 7000 	ldr.w	r7, [ip]
1000e6fe:	f8dc 6004 	ldr.w	r6, [ip, #4]
1000e702:	f8dc 5008 	ldr.w	r5, [ip, #8]
1000e706:	f8dc 800c 	ldr.w	r8, [ip, #12]
1000e70a:	f8c3 800c 	str.w	r8, [r3, #12]
1000e70e:	601f      	str	r7, [r3, #0]
1000e710:	605e      	str	r6, [r3, #4]
1000e712:	609d      	str	r5, [r3, #8]
1000e714:	3310      	adds	r3, #16
1000e716:	459e      	cmp	lr, r3
1000e718:	f10c 0c10 	add.w	ip, ip, #16
1000e71c:	d1ed      	bne.n	1000e6fa <st_int8_copy+0xde>
1000e71e:	e7b2      	b.n	1000e686 <st_int8_copy+0x6a>
1000e720:	0893      	lsrs	r3, r2, #2
1000e722:	f002 0203 	and.w	r2, r2, #3
1000e726:	e7b4      	b.n	1000e692 <st_int8_copy+0x76>

1000e728 <ai_array_to_buffer_fmt>:
1000e728:	f3c0 4343 	ubfx	r3, r0, #17, #4
1000e72c:	2b02      	cmp	r3, #2
1000e72e:	d050      	beq.n	1000e7d2 <ai_array_to_buffer_fmt+0xaa>
1000e730:	4b2a      	ldr	r3, [pc, #168]	; (1000e7dc <ai_array_to_buffer_fmt+0xb4>)
1000e732:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
1000e736:	429a      	cmp	r2, r3
1000e738:	d00b      	beq.n	1000e752 <ai_array_to_buffer_fmt+0x2a>
1000e73a:	dc1c      	bgt.n	1000e776 <ai_array_to_buffer_fmt+0x4e>
1000e73c:	4b28      	ldr	r3, [pc, #160]	; (1000e7e0 <ai_array_to_buffer_fmt+0xb8>)
1000e73e:	429a      	cmp	r2, r3
1000e740:	d007      	beq.n	1000e752 <ai_array_to_buffer_fmt+0x2a>
1000e742:	dd0b      	ble.n	1000e75c <ai_array_to_buffer_fmt+0x34>
1000e744:	4b27      	ldr	r3, [pc, #156]	; (1000e7e4 <ai_array_to_buffer_fmt+0xbc>)
1000e746:	429a      	cmp	r2, r3
1000e748:	d003      	beq.n	1000e752 <ai_array_to_buffer_fmt+0x2a>
1000e74a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
1000e74e:	429a      	cmp	r2, r3
1000e750:	d131      	bne.n	1000e7b6 <ai_array_to_buffer_fmt+0x8e>
1000e752:	4613      	mov	r3, r2
1000e754:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
1000e758:	4318      	orrs	r0, r3
1000e75a:	4770      	bx	lr
1000e75c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
1000e760:	429a      	cmp	r2, r3
1000e762:	d0f6      	beq.n	1000e752 <ai_array_to_buffer_fmt+0x2a>
1000e764:	dd2c      	ble.n	1000e7c0 <ai_array_to_buffer_fmt+0x98>
1000e766:	4b20      	ldr	r3, [pc, #128]	; (1000e7e8 <ai_array_to_buffer_fmt+0xc0>)
1000e768:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
1000e76c:	429a      	cmp	r2, r3
1000e76e:	bf18      	it	ne
1000e770:	2340      	movne	r3, #64	; 0x40
1000e772:	4318      	orrs	r0, r3
1000e774:	4770      	bx	lr
1000e776:	4b1d      	ldr	r3, [pc, #116]	; (1000e7ec <ai_array_to_buffer_fmt+0xc4>)
1000e778:	429a      	cmp	r2, r3
1000e77a:	d0ea      	beq.n	1000e752 <ai_array_to_buffer_fmt+0x2a>
1000e77c:	dd0e      	ble.n	1000e79c <ai_array_to_buffer_fmt+0x74>
1000e77e:	4b1c      	ldr	r3, [pc, #112]	; (1000e7f0 <ai_array_to_buffer_fmt+0xc8>)
1000e780:	429a      	cmp	r2, r3
1000e782:	d0e6      	beq.n	1000e752 <ai_array_to_buffer_fmt+0x2a>
1000e784:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
1000e788:	429a      	cmp	r2, r3
1000e78a:	d0e2      	beq.n	1000e752 <ai_array_to_buffer_fmt+0x2a>
1000e78c:	4b19      	ldr	r3, [pc, #100]	; (1000e7f4 <ai_array_to_buffer_fmt+0xcc>)
1000e78e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
1000e792:	429a      	cmp	r2, r3
1000e794:	bf18      	it	ne
1000e796:	2340      	movne	r3, #64	; 0x40
1000e798:	4318      	orrs	r0, r3
1000e79a:	4770      	bx	lr
1000e79c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
1000e7a0:	429a      	cmp	r2, r3
1000e7a2:	d0d6      	beq.n	1000e752 <ai_array_to_buffer_fmt+0x2a>
1000e7a4:	3307      	adds	r3, #7
1000e7a6:	429a      	cmp	r2, r3
1000e7a8:	d0d3      	beq.n	1000e752 <ai_array_to_buffer_fmt+0x2a>
1000e7aa:	f2a3 3387 	subw	r3, r3, #903	; 0x387
1000e7ae:	429a      	cmp	r2, r3
1000e7b0:	bf18      	it	ne
1000e7b2:	2340      	movne	r3, #64	; 0x40
1000e7b4:	e7ce      	b.n	1000e754 <ai_array_to_buffer_fmt+0x2c>
1000e7b6:	4b10      	ldr	r3, [pc, #64]	; (1000e7f8 <ai_array_to_buffer_fmt+0xd0>)
1000e7b8:	429a      	cmp	r2, r3
1000e7ba:	bf18      	it	ne
1000e7bc:	2340      	movne	r3, #64	; 0x40
1000e7be:	e7c9      	b.n	1000e754 <ai_array_to_buffer_fmt+0x2c>
1000e7c0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
1000e7c4:	429a      	cmp	r2, r3
1000e7c6:	d0c4      	beq.n	1000e752 <ai_array_to_buffer_fmt+0x2a>
1000e7c8:	3380      	adds	r3, #128	; 0x80
1000e7ca:	429a      	cmp	r2, r3
1000e7cc:	bf18      	it	ne
1000e7ce:	2340      	movne	r3, #64	; 0x40
1000e7d0:	e7c0      	b.n	1000e754 <ai_array_to_buffer_fmt+0x2c>
1000e7d2:	4b0a      	ldr	r3, [pc, #40]	; (1000e7fc <ai_array_to_buffer_fmt+0xd4>)
1000e7d4:	4003      	ands	r3, r0
1000e7d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
1000e7da:	e7bb      	b.n	1000e754 <ai_array_to_buffer_fmt+0x2c>
1000e7dc:	00840040 	.word	0x00840040
1000e7e0:	00040840 	.word	0x00040840
1000e7e4:	00041040 	.word	0x00041040
1000e7e8:	00040447 	.word	0x00040447
1000e7ec:	00840840 	.word	0x00840840
1000e7f0:	00841040 	.word	0x00841040
1000e7f4:	0084084f 	.word	0x0084084f
1000e7f8:	0004084f 	.word	0x0004084f
1000e7fc:	00803fff 	.word	0x00803fff

1000e800 <ai_array_get_byte_size>:
1000e800:	b319      	cbz	r1, 1000e84a <ai_array_get_byte_size+0x4a>
1000e802:	f3c0 13c6 	ubfx	r3, r0, #7, #7
1000e806:	fb03 f101 	mul.w	r1, r3, r1
1000e80a:	3107      	adds	r1, #7
1000e80c:	f3c0 4243 	ubfx	r2, r0, #17, #4
1000e810:	f021 0307 	bic.w	r3, r1, #7
1000e814:	2a04      	cmp	r2, #4
1000e816:	f3c0 5141 	ubfx	r1, r0, #21, #2
1000e81a:	fa23 f101 	lsr.w	r1, r3, r1
1000e81e:	ea4f 10e0 	mov.w	r0, r0, asr #7
1000e822:	d00b      	beq.n	1000e83c <ai_array_get_byte_size+0x3c>
1000e824:	2a08      	cmp	r2, #8
1000e826:	d002      	beq.n	1000e82e <ai_array_get_byte_size+0x2e>
1000e828:	3107      	adds	r1, #7
1000e82a:	08c8      	lsrs	r0, r1, #3
1000e82c:	4770      	bx	lr
1000e82e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
1000e832:	eb01 2100 	add.w	r1, r1, r0, lsl #8
1000e836:	3107      	adds	r1, #7
1000e838:	08c8      	lsrs	r0, r1, #3
1000e83a:	4770      	bx	lr
1000e83c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
1000e840:	eb01 1100 	add.w	r1, r1, r0, lsl #4
1000e844:	3107      	adds	r1, #7
1000e846:	08c8      	lsrs	r0, r1, #3
1000e848:	4770      	bx	lr
1000e84a:	4608      	mov	r0, r1
1000e84c:	4770      	bx	lr
1000e84e:	bf00      	nop

1000e850 <ai_array_get_data_byte_size>:
1000e850:	b169      	cbz	r1, 1000e86e <ai_array_get_data_byte_size+0x1e>
1000e852:	f3c0 12c6 	ubfx	r2, r0, #7, #7
1000e856:	fb02 f101 	mul.w	r1, r2, r1
1000e85a:	1dcb      	adds	r3, r1, #7
1000e85c:	f023 0307 	bic.w	r3, r3, #7
1000e860:	f3c0 5041 	ubfx	r0, r0, #21, #2
1000e864:	fa23 f000 	lsr.w	r0, r3, r0
1000e868:	3007      	adds	r0, #7
1000e86a:	08c0      	lsrs	r0, r0, #3
1000e86c:	4770      	bx	lr
1000e86e:	4608      	mov	r0, r1
1000e870:	4770      	bx	lr
1000e872:	bf00      	nop

1000e874 <ai_version_get>:
1000e874:	0212      	lsls	r2, r2, #8
1000e876:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
1000e87a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
1000e87e:	4770      	bx	lr

1000e880 <get_tensor_byte_size>:
1000e880:	b410      	push	{r4}
1000e882:	6983      	ldr	r3, [r0, #24]
1000e884:	68c4      	ldr	r4, [r0, #12]
1000e886:	6941      	ldr	r1, [r0, #20]
1000e888:	681b      	ldr	r3, [r3, #0]
1000e88a:	68e0      	ldr	r0, [r4, #12]
1000e88c:	4a07      	ldr	r2, [pc, #28]	; (1000e8ac <get_tensor_byte_size+0x2c>)
1000e88e:	68c9      	ldr	r1, [r1, #12]
1000e890:	f85d 4b04 	ldr.w	r4, [sp], #4
1000e894:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
1000e898:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
1000e89c:	fb01 f000 	mul.w	r0, r1, r0
1000e8a0:	4293      	cmp	r3, r2
1000e8a2:	bf04      	itt	eq
1000e8a4:	3007      	addeq	r0, #7
1000e8a6:	08c0      	lsreq	r0, r0, #3
1000e8a8:	4770      	bx	lr
1000e8aa:	bf00      	nop
1000e8ac:	000400c0 	.word	0x000400c0

1000e8b0 <__assert_func>:
1000e8b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000e8b2:	4614      	mov	r4, r2
1000e8b4:	461a      	mov	r2, r3
1000e8b6:	4b09      	ldr	r3, [pc, #36]	; (1000e8dc <__assert_func+0x2c>)
1000e8b8:	681b      	ldr	r3, [r3, #0]
1000e8ba:	4605      	mov	r5, r0
1000e8bc:	68d8      	ldr	r0, [r3, #12]
1000e8be:	b14c      	cbz	r4, 1000e8d4 <__assert_func+0x24>
1000e8c0:	4b07      	ldr	r3, [pc, #28]	; (1000e8e0 <__assert_func+0x30>)
1000e8c2:	9100      	str	r1, [sp, #0]
1000e8c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
1000e8c8:	4906      	ldr	r1, [pc, #24]	; (1000e8e4 <__assert_func+0x34>)
1000e8ca:	462b      	mov	r3, r5
1000e8cc:	f000 fe04 	bl	1000f4d8 <fiprintf>
1000e8d0:	f000 ff57 	bl	1000f782 <abort>
1000e8d4:	4b04      	ldr	r3, [pc, #16]	; (1000e8e8 <__assert_func+0x38>)
1000e8d6:	461c      	mov	r4, r3
1000e8d8:	e7f3      	b.n	1000e8c2 <__assert_func+0x12>
1000e8da:	bf00      	nop
1000e8dc:	10020b1c 	.word	0x10020b1c
1000e8e0:	10014258 	.word	0x10014258
1000e8e4:	10014265 	.word	0x10014265
1000e8e8:	10014293 	.word	0x10014293

1000e8ec <malloc>:
1000e8ec:	4b02      	ldr	r3, [pc, #8]	; (1000e8f8 <malloc+0xc>)
1000e8ee:	4601      	mov	r1, r0
1000e8f0:	6818      	ldr	r0, [r3, #0]
1000e8f2:	f000 b82b 	b.w	1000e94c <_malloc_r>
1000e8f6:	bf00      	nop
1000e8f8:	10020b1c 	.word	0x10020b1c

1000e8fc <free>:
1000e8fc:	4b02      	ldr	r3, [pc, #8]	; (1000e908 <free+0xc>)
1000e8fe:	4601      	mov	r1, r0
1000e900:	6818      	ldr	r0, [r3, #0]
1000e902:	f001 bdbf 	b.w	10010484 <_free_r>
1000e906:	bf00      	nop
1000e908:	10020b1c 	.word	0x10020b1c

1000e90c <sbrk_aligned>:
1000e90c:	b570      	push	{r4, r5, r6, lr}
1000e90e:	4e0e      	ldr	r6, [pc, #56]	; (1000e948 <sbrk_aligned+0x3c>)
1000e910:	460c      	mov	r4, r1
1000e912:	6831      	ldr	r1, [r6, #0]
1000e914:	4605      	mov	r5, r0
1000e916:	b911      	cbnz	r1, 1000e91e <sbrk_aligned+0x12>
1000e918:	f000 fed6 	bl	1000f6c8 <_sbrk_r>
1000e91c:	6030      	str	r0, [r6, #0]
1000e91e:	4621      	mov	r1, r4
1000e920:	4628      	mov	r0, r5
1000e922:	f000 fed1 	bl	1000f6c8 <_sbrk_r>
1000e926:	1c43      	adds	r3, r0, #1
1000e928:	d00a      	beq.n	1000e940 <sbrk_aligned+0x34>
1000e92a:	1cc4      	adds	r4, r0, #3
1000e92c:	f024 0403 	bic.w	r4, r4, #3
1000e930:	42a0      	cmp	r0, r4
1000e932:	d007      	beq.n	1000e944 <sbrk_aligned+0x38>
1000e934:	1a21      	subs	r1, r4, r0
1000e936:	4628      	mov	r0, r5
1000e938:	f000 fec6 	bl	1000f6c8 <_sbrk_r>
1000e93c:	3001      	adds	r0, #1
1000e93e:	d101      	bne.n	1000e944 <sbrk_aligned+0x38>
1000e940:	f04f 34ff 	mov.w	r4, #4294967295
1000e944:	4620      	mov	r0, r4
1000e946:	bd70      	pop	{r4, r5, r6, pc}
1000e948:	10022040 	.word	0x10022040

1000e94c <_malloc_r>:
1000e94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1000e950:	1ccd      	adds	r5, r1, #3
1000e952:	f025 0503 	bic.w	r5, r5, #3
1000e956:	3508      	adds	r5, #8
1000e958:	2d0c      	cmp	r5, #12
1000e95a:	bf38      	it	cc
1000e95c:	250c      	movcc	r5, #12
1000e95e:	2d00      	cmp	r5, #0
1000e960:	4607      	mov	r7, r0
1000e962:	db01      	blt.n	1000e968 <_malloc_r+0x1c>
1000e964:	42a9      	cmp	r1, r5
1000e966:	d905      	bls.n	1000e974 <_malloc_r+0x28>
1000e968:	230c      	movs	r3, #12
1000e96a:	603b      	str	r3, [r7, #0]
1000e96c:	2600      	movs	r6, #0
1000e96e:	4630      	mov	r0, r6
1000e970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000e974:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 1000ea48 <_malloc_r+0xfc>
1000e978:	f000 f868 	bl	1000ea4c <__malloc_lock>
1000e97c:	f8d8 3000 	ldr.w	r3, [r8]
1000e980:	461c      	mov	r4, r3
1000e982:	bb5c      	cbnz	r4, 1000e9dc <_malloc_r+0x90>
1000e984:	4629      	mov	r1, r5
1000e986:	4638      	mov	r0, r7
1000e988:	f7ff ffc0 	bl	1000e90c <sbrk_aligned>
1000e98c:	1c43      	adds	r3, r0, #1
1000e98e:	4604      	mov	r4, r0
1000e990:	d155      	bne.n	1000ea3e <_malloc_r+0xf2>
1000e992:	f8d8 4000 	ldr.w	r4, [r8]
1000e996:	4626      	mov	r6, r4
1000e998:	2e00      	cmp	r6, #0
1000e99a:	d145      	bne.n	1000ea28 <_malloc_r+0xdc>
1000e99c:	2c00      	cmp	r4, #0
1000e99e:	d048      	beq.n	1000ea32 <_malloc_r+0xe6>
1000e9a0:	6823      	ldr	r3, [r4, #0]
1000e9a2:	4631      	mov	r1, r6
1000e9a4:	4638      	mov	r0, r7
1000e9a6:	eb04 0903 	add.w	r9, r4, r3
1000e9aa:	f000 fe8d 	bl	1000f6c8 <_sbrk_r>
1000e9ae:	4581      	cmp	r9, r0
1000e9b0:	d13f      	bne.n	1000ea32 <_malloc_r+0xe6>
1000e9b2:	6821      	ldr	r1, [r4, #0]
1000e9b4:	1a6d      	subs	r5, r5, r1
1000e9b6:	4629      	mov	r1, r5
1000e9b8:	4638      	mov	r0, r7
1000e9ba:	f7ff ffa7 	bl	1000e90c <sbrk_aligned>
1000e9be:	3001      	adds	r0, #1
1000e9c0:	d037      	beq.n	1000ea32 <_malloc_r+0xe6>
1000e9c2:	6823      	ldr	r3, [r4, #0]
1000e9c4:	442b      	add	r3, r5
1000e9c6:	6023      	str	r3, [r4, #0]
1000e9c8:	f8d8 3000 	ldr.w	r3, [r8]
1000e9cc:	2b00      	cmp	r3, #0
1000e9ce:	d038      	beq.n	1000ea42 <_malloc_r+0xf6>
1000e9d0:	685a      	ldr	r2, [r3, #4]
1000e9d2:	42a2      	cmp	r2, r4
1000e9d4:	d12b      	bne.n	1000ea2e <_malloc_r+0xe2>
1000e9d6:	2200      	movs	r2, #0
1000e9d8:	605a      	str	r2, [r3, #4]
1000e9da:	e00f      	b.n	1000e9fc <_malloc_r+0xb0>
1000e9dc:	6822      	ldr	r2, [r4, #0]
1000e9de:	1b52      	subs	r2, r2, r5
1000e9e0:	d41f      	bmi.n	1000ea22 <_malloc_r+0xd6>
1000e9e2:	2a0b      	cmp	r2, #11
1000e9e4:	d917      	bls.n	1000ea16 <_malloc_r+0xca>
1000e9e6:	1961      	adds	r1, r4, r5
1000e9e8:	42a3      	cmp	r3, r4
1000e9ea:	6025      	str	r5, [r4, #0]
1000e9ec:	bf18      	it	ne
1000e9ee:	6059      	strne	r1, [r3, #4]
1000e9f0:	6863      	ldr	r3, [r4, #4]
1000e9f2:	bf08      	it	eq
1000e9f4:	f8c8 1000 	streq.w	r1, [r8]
1000e9f8:	5162      	str	r2, [r4, r5]
1000e9fa:	604b      	str	r3, [r1, #4]
1000e9fc:	4638      	mov	r0, r7
1000e9fe:	f104 060b 	add.w	r6, r4, #11
1000ea02:	f000 f829 	bl	1000ea58 <__malloc_unlock>
1000ea06:	f026 0607 	bic.w	r6, r6, #7
1000ea0a:	1d23      	adds	r3, r4, #4
1000ea0c:	1af2      	subs	r2, r6, r3
1000ea0e:	d0ae      	beq.n	1000e96e <_malloc_r+0x22>
1000ea10:	1b9b      	subs	r3, r3, r6
1000ea12:	50a3      	str	r3, [r4, r2]
1000ea14:	e7ab      	b.n	1000e96e <_malloc_r+0x22>
1000ea16:	42a3      	cmp	r3, r4
1000ea18:	6862      	ldr	r2, [r4, #4]
1000ea1a:	d1dd      	bne.n	1000e9d8 <_malloc_r+0x8c>
1000ea1c:	f8c8 2000 	str.w	r2, [r8]
1000ea20:	e7ec      	b.n	1000e9fc <_malloc_r+0xb0>
1000ea22:	4623      	mov	r3, r4
1000ea24:	6864      	ldr	r4, [r4, #4]
1000ea26:	e7ac      	b.n	1000e982 <_malloc_r+0x36>
1000ea28:	4634      	mov	r4, r6
1000ea2a:	6876      	ldr	r6, [r6, #4]
1000ea2c:	e7b4      	b.n	1000e998 <_malloc_r+0x4c>
1000ea2e:	4613      	mov	r3, r2
1000ea30:	e7cc      	b.n	1000e9cc <_malloc_r+0x80>
1000ea32:	230c      	movs	r3, #12
1000ea34:	603b      	str	r3, [r7, #0]
1000ea36:	4638      	mov	r0, r7
1000ea38:	f000 f80e 	bl	1000ea58 <__malloc_unlock>
1000ea3c:	e797      	b.n	1000e96e <_malloc_r+0x22>
1000ea3e:	6025      	str	r5, [r4, #0]
1000ea40:	e7dc      	b.n	1000e9fc <_malloc_r+0xb0>
1000ea42:	605b      	str	r3, [r3, #4]
1000ea44:	deff      	udf	#255	; 0xff
1000ea46:	bf00      	nop
1000ea48:	1002203c 	.word	0x1002203c

1000ea4c <__malloc_lock>:
1000ea4c:	4801      	ldr	r0, [pc, #4]	; (1000ea54 <__malloc_lock+0x8>)
1000ea4e:	f000 be88 	b.w	1000f762 <__retarget_lock_acquire_recursive>
1000ea52:	bf00      	nop
1000ea54:	10022184 	.word	0x10022184

1000ea58 <__malloc_unlock>:
1000ea58:	4801      	ldr	r0, [pc, #4]	; (1000ea60 <__malloc_unlock+0x8>)
1000ea5a:	f000 be83 	b.w	1000f764 <__retarget_lock_release_recursive>
1000ea5e:	bf00      	nop
1000ea60:	10022184 	.word	0x10022184

1000ea64 <_realloc_r>:
1000ea64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000ea68:	4680      	mov	r8, r0
1000ea6a:	4614      	mov	r4, r2
1000ea6c:	460e      	mov	r6, r1
1000ea6e:	b921      	cbnz	r1, 1000ea7a <_realloc_r+0x16>
1000ea70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1000ea74:	4611      	mov	r1, r2
1000ea76:	f7ff bf69 	b.w	1000e94c <_malloc_r>
1000ea7a:	b92a      	cbnz	r2, 1000ea88 <_realloc_r+0x24>
1000ea7c:	f001 fd02 	bl	10010484 <_free_r>
1000ea80:	4625      	mov	r5, r4
1000ea82:	4628      	mov	r0, r5
1000ea84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000ea88:	f002 f8c4 	bl	10010c14 <_malloc_usable_size_r>
1000ea8c:	4284      	cmp	r4, r0
1000ea8e:	4607      	mov	r7, r0
1000ea90:	d802      	bhi.n	1000ea98 <_realloc_r+0x34>
1000ea92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
1000ea96:	d812      	bhi.n	1000eabe <_realloc_r+0x5a>
1000ea98:	4621      	mov	r1, r4
1000ea9a:	4640      	mov	r0, r8
1000ea9c:	f7ff ff56 	bl	1000e94c <_malloc_r>
1000eaa0:	4605      	mov	r5, r0
1000eaa2:	2800      	cmp	r0, #0
1000eaa4:	d0ed      	beq.n	1000ea82 <_realloc_r+0x1e>
1000eaa6:	42bc      	cmp	r4, r7
1000eaa8:	4622      	mov	r2, r4
1000eaaa:	4631      	mov	r1, r6
1000eaac:	bf28      	it	cs
1000eaae:	463a      	movcs	r2, r7
1000eab0:	f000 fe59 	bl	1000f766 <memcpy>
1000eab4:	4631      	mov	r1, r6
1000eab6:	4640      	mov	r0, r8
1000eab8:	f001 fce4 	bl	10010484 <_free_r>
1000eabc:	e7e1      	b.n	1000ea82 <_realloc_r+0x1e>
1000eabe:	4635      	mov	r5, r6
1000eac0:	e7df      	b.n	1000ea82 <_realloc_r+0x1e>

1000eac2 <__cvt>:
1000eac2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
1000eac6:	ec55 4b10 	vmov	r4, r5, d0
1000eaca:	2d00      	cmp	r5, #0
1000eacc:	460e      	mov	r6, r1
1000eace:	4619      	mov	r1, r3
1000ead0:	462b      	mov	r3, r5
1000ead2:	bfbb      	ittet	lt
1000ead4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
1000ead8:	461d      	movlt	r5, r3
1000eada:	2300      	movge	r3, #0
1000eadc:	232d      	movlt	r3, #45	; 0x2d
1000eade:	700b      	strb	r3, [r1, #0]
1000eae0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000eae2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
1000eae6:	4691      	mov	r9, r2
1000eae8:	f023 0820 	bic.w	r8, r3, #32
1000eaec:	bfbc      	itt	lt
1000eaee:	4622      	movlt	r2, r4
1000eaf0:	4614      	movlt	r4, r2
1000eaf2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
1000eaf6:	d005      	beq.n	1000eb04 <__cvt+0x42>
1000eaf8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
1000eafc:	d100      	bne.n	1000eb00 <__cvt+0x3e>
1000eafe:	3601      	adds	r6, #1
1000eb00:	2102      	movs	r1, #2
1000eb02:	e000      	b.n	1000eb06 <__cvt+0x44>
1000eb04:	2103      	movs	r1, #3
1000eb06:	ab03      	add	r3, sp, #12
1000eb08:	9301      	str	r3, [sp, #4]
1000eb0a:	ab02      	add	r3, sp, #8
1000eb0c:	9300      	str	r3, [sp, #0]
1000eb0e:	ec45 4b10 	vmov	d0, r4, r5
1000eb12:	4653      	mov	r3, sl
1000eb14:	4632      	mov	r2, r6
1000eb16:	f000 fec3 	bl	1000f8a0 <_dtoa_r>
1000eb1a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
1000eb1e:	4607      	mov	r7, r0
1000eb20:	d102      	bne.n	1000eb28 <__cvt+0x66>
1000eb22:	f019 0f01 	tst.w	r9, #1
1000eb26:	d022      	beq.n	1000eb6e <__cvt+0xac>
1000eb28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
1000eb2c:	eb07 0906 	add.w	r9, r7, r6
1000eb30:	d110      	bne.n	1000eb54 <__cvt+0x92>
1000eb32:	783b      	ldrb	r3, [r7, #0]
1000eb34:	2b30      	cmp	r3, #48	; 0x30
1000eb36:	d10a      	bne.n	1000eb4e <__cvt+0x8c>
1000eb38:	2200      	movs	r2, #0
1000eb3a:	2300      	movs	r3, #0
1000eb3c:	4620      	mov	r0, r4
1000eb3e:	4629      	mov	r1, r5
1000eb40:	f7f1 ff0a 	bl	10000958 <__aeabi_dcmpeq>
1000eb44:	b918      	cbnz	r0, 1000eb4e <__cvt+0x8c>
1000eb46:	f1c6 0601 	rsb	r6, r6, #1
1000eb4a:	f8ca 6000 	str.w	r6, [sl]
1000eb4e:	f8da 3000 	ldr.w	r3, [sl]
1000eb52:	4499      	add	r9, r3
1000eb54:	2200      	movs	r2, #0
1000eb56:	2300      	movs	r3, #0
1000eb58:	4620      	mov	r0, r4
1000eb5a:	4629      	mov	r1, r5
1000eb5c:	f7f1 fefc 	bl	10000958 <__aeabi_dcmpeq>
1000eb60:	b108      	cbz	r0, 1000eb66 <__cvt+0xa4>
1000eb62:	f8cd 900c 	str.w	r9, [sp, #12]
1000eb66:	2230      	movs	r2, #48	; 0x30
1000eb68:	9b03      	ldr	r3, [sp, #12]
1000eb6a:	454b      	cmp	r3, r9
1000eb6c:	d307      	bcc.n	1000eb7e <__cvt+0xbc>
1000eb6e:	9b03      	ldr	r3, [sp, #12]
1000eb70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000eb72:	1bdb      	subs	r3, r3, r7
1000eb74:	4638      	mov	r0, r7
1000eb76:	6013      	str	r3, [r2, #0]
1000eb78:	b004      	add	sp, #16
1000eb7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000eb7e:	1c59      	adds	r1, r3, #1
1000eb80:	9103      	str	r1, [sp, #12]
1000eb82:	701a      	strb	r2, [r3, #0]
1000eb84:	e7f0      	b.n	1000eb68 <__cvt+0xa6>

1000eb86 <__exponent>:
1000eb86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000eb88:	4603      	mov	r3, r0
1000eb8a:	2900      	cmp	r1, #0
1000eb8c:	bfb8      	it	lt
1000eb8e:	4249      	neglt	r1, r1
1000eb90:	f803 2b02 	strb.w	r2, [r3], #2
1000eb94:	bfb4      	ite	lt
1000eb96:	222d      	movlt	r2, #45	; 0x2d
1000eb98:	222b      	movge	r2, #43	; 0x2b
1000eb9a:	2909      	cmp	r1, #9
1000eb9c:	7042      	strb	r2, [r0, #1]
1000eb9e:	dd2a      	ble.n	1000ebf6 <__exponent+0x70>
1000eba0:	f10d 0207 	add.w	r2, sp, #7
1000eba4:	4617      	mov	r7, r2
1000eba6:	260a      	movs	r6, #10
1000eba8:	4694      	mov	ip, r2
1000ebaa:	fb91 f5f6 	sdiv	r5, r1, r6
1000ebae:	fb06 1415 	mls	r4, r6, r5, r1
1000ebb2:	3430      	adds	r4, #48	; 0x30
1000ebb4:	f80c 4c01 	strb.w	r4, [ip, #-1]
1000ebb8:	460c      	mov	r4, r1
1000ebba:	2c63      	cmp	r4, #99	; 0x63
1000ebbc:	f102 32ff 	add.w	r2, r2, #4294967295
1000ebc0:	4629      	mov	r1, r5
1000ebc2:	dcf1      	bgt.n	1000eba8 <__exponent+0x22>
1000ebc4:	3130      	adds	r1, #48	; 0x30
1000ebc6:	f1ac 0402 	sub.w	r4, ip, #2
1000ebca:	f802 1c01 	strb.w	r1, [r2, #-1]
1000ebce:	1c41      	adds	r1, r0, #1
1000ebd0:	4622      	mov	r2, r4
1000ebd2:	42ba      	cmp	r2, r7
1000ebd4:	d30a      	bcc.n	1000ebec <__exponent+0x66>
1000ebd6:	f10d 0209 	add.w	r2, sp, #9
1000ebda:	eba2 020c 	sub.w	r2, r2, ip
1000ebde:	42bc      	cmp	r4, r7
1000ebe0:	bf88      	it	hi
1000ebe2:	2200      	movhi	r2, #0
1000ebe4:	4413      	add	r3, r2
1000ebe6:	1a18      	subs	r0, r3, r0
1000ebe8:	b003      	add	sp, #12
1000ebea:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ebec:	f812 5b01 	ldrb.w	r5, [r2], #1
1000ebf0:	f801 5f01 	strb.w	r5, [r1, #1]!
1000ebf4:	e7ed      	b.n	1000ebd2 <__exponent+0x4c>
1000ebf6:	2330      	movs	r3, #48	; 0x30
1000ebf8:	3130      	adds	r1, #48	; 0x30
1000ebfa:	7083      	strb	r3, [r0, #2]
1000ebfc:	70c1      	strb	r1, [r0, #3]
1000ebfe:	1d03      	adds	r3, r0, #4
1000ec00:	e7f1      	b.n	1000ebe6 <__exponent+0x60>
	...

1000ec04 <_printf_float>:
1000ec04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000ec08:	ed2d 8b02 	vpush	{d8}
1000ec0c:	b08d      	sub	sp, #52	; 0x34
1000ec0e:	460c      	mov	r4, r1
1000ec10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1000ec14:	4616      	mov	r6, r2
1000ec16:	461f      	mov	r7, r3
1000ec18:	4605      	mov	r5, r0
1000ec1a:	f000 fd1d 	bl	1000f658 <_localeconv_r>
1000ec1e:	f8d0 a000 	ldr.w	sl, [r0]
1000ec22:	4650      	mov	r0, sl
1000ec24:	f7f1 fa6c 	bl	10000100 <strlen>
1000ec28:	2300      	movs	r3, #0
1000ec2a:	930a      	str	r3, [sp, #40]	; 0x28
1000ec2c:	6823      	ldr	r3, [r4, #0]
1000ec2e:	9305      	str	r3, [sp, #20]
1000ec30:	f8d8 3000 	ldr.w	r3, [r8]
1000ec34:	f894 b018 	ldrb.w	fp, [r4, #24]
1000ec38:	3307      	adds	r3, #7
1000ec3a:	f023 0307 	bic.w	r3, r3, #7
1000ec3e:	f103 0208 	add.w	r2, r3, #8
1000ec42:	f8c8 2000 	str.w	r2, [r8]
1000ec46:	e9d3 8900 	ldrd	r8, r9, [r3]
1000ec4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
1000ec4e:	9307      	str	r3, [sp, #28]
1000ec50:	f8cd 8018 	str.w	r8, [sp, #24]
1000ec54:	ee08 0a10 	vmov	s16, r0
1000ec58:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
1000ec5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1000ec60:	4b9e      	ldr	r3, [pc, #632]	; (1000eedc <_printf_float+0x2d8>)
1000ec62:	f04f 32ff 	mov.w	r2, #4294967295
1000ec66:	f7f1 fea9 	bl	100009bc <__aeabi_dcmpun>
1000ec6a:	bb88      	cbnz	r0, 1000ecd0 <_printf_float+0xcc>
1000ec6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1000ec70:	4b9a      	ldr	r3, [pc, #616]	; (1000eedc <_printf_float+0x2d8>)
1000ec72:	f04f 32ff 	mov.w	r2, #4294967295
1000ec76:	f7f1 fe83 	bl	10000980 <__aeabi_dcmple>
1000ec7a:	bb48      	cbnz	r0, 1000ecd0 <_printf_float+0xcc>
1000ec7c:	2200      	movs	r2, #0
1000ec7e:	2300      	movs	r3, #0
1000ec80:	4640      	mov	r0, r8
1000ec82:	4649      	mov	r1, r9
1000ec84:	f7f1 fe72 	bl	1000096c <__aeabi_dcmplt>
1000ec88:	b110      	cbz	r0, 1000ec90 <_printf_float+0x8c>
1000ec8a:	232d      	movs	r3, #45	; 0x2d
1000ec8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1000ec90:	4a93      	ldr	r2, [pc, #588]	; (1000eee0 <_printf_float+0x2dc>)
1000ec92:	4b94      	ldr	r3, [pc, #592]	; (1000eee4 <_printf_float+0x2e0>)
1000ec94:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
1000ec98:	bf94      	ite	ls
1000ec9a:	4690      	movls	r8, r2
1000ec9c:	4698      	movhi	r8, r3
1000ec9e:	2303      	movs	r3, #3
1000eca0:	6123      	str	r3, [r4, #16]
1000eca2:	9b05      	ldr	r3, [sp, #20]
1000eca4:	f023 0304 	bic.w	r3, r3, #4
1000eca8:	6023      	str	r3, [r4, #0]
1000ecaa:	f04f 0900 	mov.w	r9, #0
1000ecae:	9700      	str	r7, [sp, #0]
1000ecb0:	4633      	mov	r3, r6
1000ecb2:	aa0b      	add	r2, sp, #44	; 0x2c
1000ecb4:	4621      	mov	r1, r4
1000ecb6:	4628      	mov	r0, r5
1000ecb8:	f000 f9da 	bl	1000f070 <_printf_common>
1000ecbc:	3001      	adds	r0, #1
1000ecbe:	f040 8090 	bne.w	1000ede2 <_printf_float+0x1de>
1000ecc2:	f04f 30ff 	mov.w	r0, #4294967295
1000ecc6:	b00d      	add	sp, #52	; 0x34
1000ecc8:	ecbd 8b02 	vpop	{d8}
1000eccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000ecd0:	4642      	mov	r2, r8
1000ecd2:	464b      	mov	r3, r9
1000ecd4:	4640      	mov	r0, r8
1000ecd6:	4649      	mov	r1, r9
1000ecd8:	f7f1 fe70 	bl	100009bc <__aeabi_dcmpun>
1000ecdc:	b140      	cbz	r0, 1000ecf0 <_printf_float+0xec>
1000ecde:	464b      	mov	r3, r9
1000ece0:	2b00      	cmp	r3, #0
1000ece2:	bfbc      	itt	lt
1000ece4:	232d      	movlt	r3, #45	; 0x2d
1000ece6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
1000ecea:	4a7f      	ldr	r2, [pc, #508]	; (1000eee8 <_printf_float+0x2e4>)
1000ecec:	4b7f      	ldr	r3, [pc, #508]	; (1000eeec <_printf_float+0x2e8>)
1000ecee:	e7d1      	b.n	1000ec94 <_printf_float+0x90>
1000ecf0:	6863      	ldr	r3, [r4, #4]
1000ecf2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
1000ecf6:	9206      	str	r2, [sp, #24]
1000ecf8:	1c5a      	adds	r2, r3, #1
1000ecfa:	d13f      	bne.n	1000ed7c <_printf_float+0x178>
1000ecfc:	2306      	movs	r3, #6
1000ecfe:	6063      	str	r3, [r4, #4]
1000ed00:	9b05      	ldr	r3, [sp, #20]
1000ed02:	6861      	ldr	r1, [r4, #4]
1000ed04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
1000ed08:	2300      	movs	r3, #0
1000ed0a:	9303      	str	r3, [sp, #12]
1000ed0c:	ab0a      	add	r3, sp, #40	; 0x28
1000ed0e:	e9cd b301 	strd	fp, r3, [sp, #4]
1000ed12:	ab09      	add	r3, sp, #36	; 0x24
1000ed14:	ec49 8b10 	vmov	d0, r8, r9
1000ed18:	9300      	str	r3, [sp, #0]
1000ed1a:	6022      	str	r2, [r4, #0]
1000ed1c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
1000ed20:	4628      	mov	r0, r5
1000ed22:	f7ff fece 	bl	1000eac2 <__cvt>
1000ed26:	9b06      	ldr	r3, [sp, #24]
1000ed28:	9909      	ldr	r1, [sp, #36]	; 0x24
1000ed2a:	2b47      	cmp	r3, #71	; 0x47
1000ed2c:	4680      	mov	r8, r0
1000ed2e:	d108      	bne.n	1000ed42 <_printf_float+0x13e>
1000ed30:	1cc8      	adds	r0, r1, #3
1000ed32:	db02      	blt.n	1000ed3a <_printf_float+0x136>
1000ed34:	6863      	ldr	r3, [r4, #4]
1000ed36:	4299      	cmp	r1, r3
1000ed38:	dd41      	ble.n	1000edbe <_printf_float+0x1ba>
1000ed3a:	f1ab 0302 	sub.w	r3, fp, #2
1000ed3e:	fa5f fb83 	uxtb.w	fp, r3
1000ed42:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
1000ed46:	d820      	bhi.n	1000ed8a <_printf_float+0x186>
1000ed48:	3901      	subs	r1, #1
1000ed4a:	465a      	mov	r2, fp
1000ed4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
1000ed50:	9109      	str	r1, [sp, #36]	; 0x24
1000ed52:	f7ff ff18 	bl	1000eb86 <__exponent>
1000ed56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000ed58:	1813      	adds	r3, r2, r0
1000ed5a:	2a01      	cmp	r2, #1
1000ed5c:	4681      	mov	r9, r0
1000ed5e:	6123      	str	r3, [r4, #16]
1000ed60:	dc02      	bgt.n	1000ed68 <_printf_float+0x164>
1000ed62:	6822      	ldr	r2, [r4, #0]
1000ed64:	07d2      	lsls	r2, r2, #31
1000ed66:	d501      	bpl.n	1000ed6c <_printf_float+0x168>
1000ed68:	3301      	adds	r3, #1
1000ed6a:	6123      	str	r3, [r4, #16]
1000ed6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
1000ed70:	2b00      	cmp	r3, #0
1000ed72:	d09c      	beq.n	1000ecae <_printf_float+0xaa>
1000ed74:	232d      	movs	r3, #45	; 0x2d
1000ed76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1000ed7a:	e798      	b.n	1000ecae <_printf_float+0xaa>
1000ed7c:	9a06      	ldr	r2, [sp, #24]
1000ed7e:	2a47      	cmp	r2, #71	; 0x47
1000ed80:	d1be      	bne.n	1000ed00 <_printf_float+0xfc>
1000ed82:	2b00      	cmp	r3, #0
1000ed84:	d1bc      	bne.n	1000ed00 <_printf_float+0xfc>
1000ed86:	2301      	movs	r3, #1
1000ed88:	e7b9      	b.n	1000ecfe <_printf_float+0xfa>
1000ed8a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
1000ed8e:	d118      	bne.n	1000edc2 <_printf_float+0x1be>
1000ed90:	2900      	cmp	r1, #0
1000ed92:	6863      	ldr	r3, [r4, #4]
1000ed94:	dd0b      	ble.n	1000edae <_printf_float+0x1aa>
1000ed96:	6121      	str	r1, [r4, #16]
1000ed98:	b913      	cbnz	r3, 1000eda0 <_printf_float+0x19c>
1000ed9a:	6822      	ldr	r2, [r4, #0]
1000ed9c:	07d0      	lsls	r0, r2, #31
1000ed9e:	d502      	bpl.n	1000eda6 <_printf_float+0x1a2>
1000eda0:	3301      	adds	r3, #1
1000eda2:	440b      	add	r3, r1
1000eda4:	6123      	str	r3, [r4, #16]
1000eda6:	65a1      	str	r1, [r4, #88]	; 0x58
1000eda8:	f04f 0900 	mov.w	r9, #0
1000edac:	e7de      	b.n	1000ed6c <_printf_float+0x168>
1000edae:	b913      	cbnz	r3, 1000edb6 <_printf_float+0x1b2>
1000edb0:	6822      	ldr	r2, [r4, #0]
1000edb2:	07d2      	lsls	r2, r2, #31
1000edb4:	d501      	bpl.n	1000edba <_printf_float+0x1b6>
1000edb6:	3302      	adds	r3, #2
1000edb8:	e7f4      	b.n	1000eda4 <_printf_float+0x1a0>
1000edba:	2301      	movs	r3, #1
1000edbc:	e7f2      	b.n	1000eda4 <_printf_float+0x1a0>
1000edbe:	f04f 0b67 	mov.w	fp, #103	; 0x67
1000edc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000edc4:	4299      	cmp	r1, r3
1000edc6:	db05      	blt.n	1000edd4 <_printf_float+0x1d0>
1000edc8:	6823      	ldr	r3, [r4, #0]
1000edca:	6121      	str	r1, [r4, #16]
1000edcc:	07d8      	lsls	r0, r3, #31
1000edce:	d5ea      	bpl.n	1000eda6 <_printf_float+0x1a2>
1000edd0:	1c4b      	adds	r3, r1, #1
1000edd2:	e7e7      	b.n	1000eda4 <_printf_float+0x1a0>
1000edd4:	2900      	cmp	r1, #0
1000edd6:	bfd4      	ite	le
1000edd8:	f1c1 0202 	rsble	r2, r1, #2
1000eddc:	2201      	movgt	r2, #1
1000edde:	4413      	add	r3, r2
1000ede0:	e7e0      	b.n	1000eda4 <_printf_float+0x1a0>
1000ede2:	6823      	ldr	r3, [r4, #0]
1000ede4:	055a      	lsls	r2, r3, #21
1000ede6:	d407      	bmi.n	1000edf8 <_printf_float+0x1f4>
1000ede8:	6923      	ldr	r3, [r4, #16]
1000edea:	4642      	mov	r2, r8
1000edec:	4631      	mov	r1, r6
1000edee:	4628      	mov	r0, r5
1000edf0:	47b8      	blx	r7
1000edf2:	3001      	adds	r0, #1
1000edf4:	d12c      	bne.n	1000ee50 <_printf_float+0x24c>
1000edf6:	e764      	b.n	1000ecc2 <_printf_float+0xbe>
1000edf8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
1000edfc:	f240 80e0 	bls.w	1000efc0 <_printf_float+0x3bc>
1000ee00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
1000ee04:	2200      	movs	r2, #0
1000ee06:	2300      	movs	r3, #0
1000ee08:	f7f1 fda6 	bl	10000958 <__aeabi_dcmpeq>
1000ee0c:	2800      	cmp	r0, #0
1000ee0e:	d034      	beq.n	1000ee7a <_printf_float+0x276>
1000ee10:	4a37      	ldr	r2, [pc, #220]	; (1000eef0 <_printf_float+0x2ec>)
1000ee12:	2301      	movs	r3, #1
1000ee14:	4631      	mov	r1, r6
1000ee16:	4628      	mov	r0, r5
1000ee18:	47b8      	blx	r7
1000ee1a:	3001      	adds	r0, #1
1000ee1c:	f43f af51 	beq.w	1000ecc2 <_printf_float+0xbe>
1000ee20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
1000ee24:	429a      	cmp	r2, r3
1000ee26:	db02      	blt.n	1000ee2e <_printf_float+0x22a>
1000ee28:	6823      	ldr	r3, [r4, #0]
1000ee2a:	07d8      	lsls	r0, r3, #31
1000ee2c:	d510      	bpl.n	1000ee50 <_printf_float+0x24c>
1000ee2e:	ee18 3a10 	vmov	r3, s16
1000ee32:	4652      	mov	r2, sl
1000ee34:	4631      	mov	r1, r6
1000ee36:	4628      	mov	r0, r5
1000ee38:	47b8      	blx	r7
1000ee3a:	3001      	adds	r0, #1
1000ee3c:	f43f af41 	beq.w	1000ecc2 <_printf_float+0xbe>
1000ee40:	f04f 0800 	mov.w	r8, #0
1000ee44:	f104 091a 	add.w	r9, r4, #26
1000ee48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000ee4a:	3b01      	subs	r3, #1
1000ee4c:	4543      	cmp	r3, r8
1000ee4e:	dc09      	bgt.n	1000ee64 <_printf_float+0x260>
1000ee50:	6823      	ldr	r3, [r4, #0]
1000ee52:	079b      	lsls	r3, r3, #30
1000ee54:	f100 8107 	bmi.w	1000f066 <_printf_float+0x462>
1000ee58:	68e0      	ldr	r0, [r4, #12]
1000ee5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000ee5c:	4298      	cmp	r0, r3
1000ee5e:	bfb8      	it	lt
1000ee60:	4618      	movlt	r0, r3
1000ee62:	e730      	b.n	1000ecc6 <_printf_float+0xc2>
1000ee64:	2301      	movs	r3, #1
1000ee66:	464a      	mov	r2, r9
1000ee68:	4631      	mov	r1, r6
1000ee6a:	4628      	mov	r0, r5
1000ee6c:	47b8      	blx	r7
1000ee6e:	3001      	adds	r0, #1
1000ee70:	f43f af27 	beq.w	1000ecc2 <_printf_float+0xbe>
1000ee74:	f108 0801 	add.w	r8, r8, #1
1000ee78:	e7e6      	b.n	1000ee48 <_printf_float+0x244>
1000ee7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000ee7c:	2b00      	cmp	r3, #0
1000ee7e:	dc39      	bgt.n	1000eef4 <_printf_float+0x2f0>
1000ee80:	4a1b      	ldr	r2, [pc, #108]	; (1000eef0 <_printf_float+0x2ec>)
1000ee82:	2301      	movs	r3, #1
1000ee84:	4631      	mov	r1, r6
1000ee86:	4628      	mov	r0, r5
1000ee88:	47b8      	blx	r7
1000ee8a:	3001      	adds	r0, #1
1000ee8c:	f43f af19 	beq.w	1000ecc2 <_printf_float+0xbe>
1000ee90:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
1000ee94:	4313      	orrs	r3, r2
1000ee96:	d102      	bne.n	1000ee9e <_printf_float+0x29a>
1000ee98:	6823      	ldr	r3, [r4, #0]
1000ee9a:	07d9      	lsls	r1, r3, #31
1000ee9c:	d5d8      	bpl.n	1000ee50 <_printf_float+0x24c>
1000ee9e:	ee18 3a10 	vmov	r3, s16
1000eea2:	4652      	mov	r2, sl
1000eea4:	4631      	mov	r1, r6
1000eea6:	4628      	mov	r0, r5
1000eea8:	47b8      	blx	r7
1000eeaa:	3001      	adds	r0, #1
1000eeac:	f43f af09 	beq.w	1000ecc2 <_printf_float+0xbe>
1000eeb0:	f04f 0900 	mov.w	r9, #0
1000eeb4:	f104 0a1a 	add.w	sl, r4, #26
1000eeb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000eeba:	425b      	negs	r3, r3
1000eebc:	454b      	cmp	r3, r9
1000eebe:	dc01      	bgt.n	1000eec4 <_printf_float+0x2c0>
1000eec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000eec2:	e792      	b.n	1000edea <_printf_float+0x1e6>
1000eec4:	2301      	movs	r3, #1
1000eec6:	4652      	mov	r2, sl
1000eec8:	4631      	mov	r1, r6
1000eeca:	4628      	mov	r0, r5
1000eecc:	47b8      	blx	r7
1000eece:	3001      	adds	r0, #1
1000eed0:	f43f aef7 	beq.w	1000ecc2 <_printf_float+0xbe>
1000eed4:	f109 0901 	add.w	r9, r9, #1
1000eed8:	e7ee      	b.n	1000eeb8 <_printf_float+0x2b4>
1000eeda:	bf00      	nop
1000eedc:	7fefffff 	.word	0x7fefffff
1000eee0:	10014294 	.word	0x10014294
1000eee4:	10014298 	.word	0x10014298
1000eee8:	1001429c 	.word	0x1001429c
1000eeec:	100142a0 	.word	0x100142a0
1000eef0:	100142a4 	.word	0x100142a4
1000eef4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000eef6:	6da3      	ldr	r3, [r4, #88]	; 0x58
1000eef8:	429a      	cmp	r2, r3
1000eefa:	bfa8      	it	ge
1000eefc:	461a      	movge	r2, r3
1000eefe:	2a00      	cmp	r2, #0
1000ef00:	4691      	mov	r9, r2
1000ef02:	dc37      	bgt.n	1000ef74 <_printf_float+0x370>
1000ef04:	f04f 0b00 	mov.w	fp, #0
1000ef08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
1000ef0c:	f104 021a 	add.w	r2, r4, #26
1000ef10:	6da3      	ldr	r3, [r4, #88]	; 0x58
1000ef12:	9305      	str	r3, [sp, #20]
1000ef14:	eba3 0309 	sub.w	r3, r3, r9
1000ef18:	455b      	cmp	r3, fp
1000ef1a:	dc33      	bgt.n	1000ef84 <_printf_float+0x380>
1000ef1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
1000ef20:	429a      	cmp	r2, r3
1000ef22:	db3b      	blt.n	1000ef9c <_printf_float+0x398>
1000ef24:	6823      	ldr	r3, [r4, #0]
1000ef26:	07da      	lsls	r2, r3, #31
1000ef28:	d438      	bmi.n	1000ef9c <_printf_float+0x398>
1000ef2a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
1000ef2e:	eba2 0903 	sub.w	r9, r2, r3
1000ef32:	9b05      	ldr	r3, [sp, #20]
1000ef34:	1ad2      	subs	r2, r2, r3
1000ef36:	4591      	cmp	r9, r2
1000ef38:	bfa8      	it	ge
1000ef3a:	4691      	movge	r9, r2
1000ef3c:	f1b9 0f00 	cmp.w	r9, #0
1000ef40:	dc35      	bgt.n	1000efae <_printf_float+0x3aa>
1000ef42:	f04f 0800 	mov.w	r8, #0
1000ef46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
1000ef4a:	f104 0a1a 	add.w	sl, r4, #26
1000ef4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
1000ef52:	1a9b      	subs	r3, r3, r2
1000ef54:	eba3 0309 	sub.w	r3, r3, r9
1000ef58:	4543      	cmp	r3, r8
1000ef5a:	f77f af79 	ble.w	1000ee50 <_printf_float+0x24c>
1000ef5e:	2301      	movs	r3, #1
1000ef60:	4652      	mov	r2, sl
1000ef62:	4631      	mov	r1, r6
1000ef64:	4628      	mov	r0, r5
1000ef66:	47b8      	blx	r7
1000ef68:	3001      	adds	r0, #1
1000ef6a:	f43f aeaa 	beq.w	1000ecc2 <_printf_float+0xbe>
1000ef6e:	f108 0801 	add.w	r8, r8, #1
1000ef72:	e7ec      	b.n	1000ef4e <_printf_float+0x34a>
1000ef74:	4613      	mov	r3, r2
1000ef76:	4631      	mov	r1, r6
1000ef78:	4642      	mov	r2, r8
1000ef7a:	4628      	mov	r0, r5
1000ef7c:	47b8      	blx	r7
1000ef7e:	3001      	adds	r0, #1
1000ef80:	d1c0      	bne.n	1000ef04 <_printf_float+0x300>
1000ef82:	e69e      	b.n	1000ecc2 <_printf_float+0xbe>
1000ef84:	2301      	movs	r3, #1
1000ef86:	4631      	mov	r1, r6
1000ef88:	4628      	mov	r0, r5
1000ef8a:	9205      	str	r2, [sp, #20]
1000ef8c:	47b8      	blx	r7
1000ef8e:	3001      	adds	r0, #1
1000ef90:	f43f ae97 	beq.w	1000ecc2 <_printf_float+0xbe>
1000ef94:	9a05      	ldr	r2, [sp, #20]
1000ef96:	f10b 0b01 	add.w	fp, fp, #1
1000ef9a:	e7b9      	b.n	1000ef10 <_printf_float+0x30c>
1000ef9c:	ee18 3a10 	vmov	r3, s16
1000efa0:	4652      	mov	r2, sl
1000efa2:	4631      	mov	r1, r6
1000efa4:	4628      	mov	r0, r5
1000efa6:	47b8      	blx	r7
1000efa8:	3001      	adds	r0, #1
1000efaa:	d1be      	bne.n	1000ef2a <_printf_float+0x326>
1000efac:	e689      	b.n	1000ecc2 <_printf_float+0xbe>
1000efae:	9a05      	ldr	r2, [sp, #20]
1000efb0:	464b      	mov	r3, r9
1000efb2:	4442      	add	r2, r8
1000efb4:	4631      	mov	r1, r6
1000efb6:	4628      	mov	r0, r5
1000efb8:	47b8      	blx	r7
1000efba:	3001      	adds	r0, #1
1000efbc:	d1c1      	bne.n	1000ef42 <_printf_float+0x33e>
1000efbe:	e680      	b.n	1000ecc2 <_printf_float+0xbe>
1000efc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000efc2:	2a01      	cmp	r2, #1
1000efc4:	dc01      	bgt.n	1000efca <_printf_float+0x3c6>
1000efc6:	07db      	lsls	r3, r3, #31
1000efc8:	d53a      	bpl.n	1000f040 <_printf_float+0x43c>
1000efca:	2301      	movs	r3, #1
1000efcc:	4642      	mov	r2, r8
1000efce:	4631      	mov	r1, r6
1000efd0:	4628      	mov	r0, r5
1000efd2:	47b8      	blx	r7
1000efd4:	3001      	adds	r0, #1
1000efd6:	f43f ae74 	beq.w	1000ecc2 <_printf_float+0xbe>
1000efda:	ee18 3a10 	vmov	r3, s16
1000efde:	4652      	mov	r2, sl
1000efe0:	4631      	mov	r1, r6
1000efe2:	4628      	mov	r0, r5
1000efe4:	47b8      	blx	r7
1000efe6:	3001      	adds	r0, #1
1000efe8:	f43f ae6b 	beq.w	1000ecc2 <_printf_float+0xbe>
1000efec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
1000eff0:	2200      	movs	r2, #0
1000eff2:	2300      	movs	r3, #0
1000eff4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
1000eff8:	f7f1 fcae 	bl	10000958 <__aeabi_dcmpeq>
1000effc:	b9d8      	cbnz	r0, 1000f036 <_printf_float+0x432>
1000effe:	f10a 33ff 	add.w	r3, sl, #4294967295
1000f002:	f108 0201 	add.w	r2, r8, #1
1000f006:	4631      	mov	r1, r6
1000f008:	4628      	mov	r0, r5
1000f00a:	47b8      	blx	r7
1000f00c:	3001      	adds	r0, #1
1000f00e:	d10e      	bne.n	1000f02e <_printf_float+0x42a>
1000f010:	e657      	b.n	1000ecc2 <_printf_float+0xbe>
1000f012:	2301      	movs	r3, #1
1000f014:	4652      	mov	r2, sl
1000f016:	4631      	mov	r1, r6
1000f018:	4628      	mov	r0, r5
1000f01a:	47b8      	blx	r7
1000f01c:	3001      	adds	r0, #1
1000f01e:	f43f ae50 	beq.w	1000ecc2 <_printf_float+0xbe>
1000f022:	f108 0801 	add.w	r8, r8, #1
1000f026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000f028:	3b01      	subs	r3, #1
1000f02a:	4543      	cmp	r3, r8
1000f02c:	dcf1      	bgt.n	1000f012 <_printf_float+0x40e>
1000f02e:	464b      	mov	r3, r9
1000f030:	f104 0250 	add.w	r2, r4, #80	; 0x50
1000f034:	e6da      	b.n	1000edec <_printf_float+0x1e8>
1000f036:	f04f 0800 	mov.w	r8, #0
1000f03a:	f104 0a1a 	add.w	sl, r4, #26
1000f03e:	e7f2      	b.n	1000f026 <_printf_float+0x422>
1000f040:	2301      	movs	r3, #1
1000f042:	4642      	mov	r2, r8
1000f044:	e7df      	b.n	1000f006 <_printf_float+0x402>
1000f046:	2301      	movs	r3, #1
1000f048:	464a      	mov	r2, r9
1000f04a:	4631      	mov	r1, r6
1000f04c:	4628      	mov	r0, r5
1000f04e:	47b8      	blx	r7
1000f050:	3001      	adds	r0, #1
1000f052:	f43f ae36 	beq.w	1000ecc2 <_printf_float+0xbe>
1000f056:	f108 0801 	add.w	r8, r8, #1
1000f05a:	68e3      	ldr	r3, [r4, #12]
1000f05c:	990b      	ldr	r1, [sp, #44]	; 0x2c
1000f05e:	1a5b      	subs	r3, r3, r1
1000f060:	4543      	cmp	r3, r8
1000f062:	dcf0      	bgt.n	1000f046 <_printf_float+0x442>
1000f064:	e6f8      	b.n	1000ee58 <_printf_float+0x254>
1000f066:	f04f 0800 	mov.w	r8, #0
1000f06a:	f104 0919 	add.w	r9, r4, #25
1000f06e:	e7f4      	b.n	1000f05a <_printf_float+0x456>

1000f070 <_printf_common>:
1000f070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1000f074:	4616      	mov	r6, r2
1000f076:	4699      	mov	r9, r3
1000f078:	688a      	ldr	r2, [r1, #8]
1000f07a:	690b      	ldr	r3, [r1, #16]
1000f07c:	f8dd 8020 	ldr.w	r8, [sp, #32]
1000f080:	4293      	cmp	r3, r2
1000f082:	bfb8      	it	lt
1000f084:	4613      	movlt	r3, r2
1000f086:	6033      	str	r3, [r6, #0]
1000f088:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1000f08c:	4607      	mov	r7, r0
1000f08e:	460c      	mov	r4, r1
1000f090:	b10a      	cbz	r2, 1000f096 <_printf_common+0x26>
1000f092:	3301      	adds	r3, #1
1000f094:	6033      	str	r3, [r6, #0]
1000f096:	6823      	ldr	r3, [r4, #0]
1000f098:	0699      	lsls	r1, r3, #26
1000f09a:	bf42      	ittt	mi
1000f09c:	6833      	ldrmi	r3, [r6, #0]
1000f09e:	3302      	addmi	r3, #2
1000f0a0:	6033      	strmi	r3, [r6, #0]
1000f0a2:	6825      	ldr	r5, [r4, #0]
1000f0a4:	f015 0506 	ands.w	r5, r5, #6
1000f0a8:	d106      	bne.n	1000f0b8 <_printf_common+0x48>
1000f0aa:	f104 0a19 	add.w	sl, r4, #25
1000f0ae:	68e3      	ldr	r3, [r4, #12]
1000f0b0:	6832      	ldr	r2, [r6, #0]
1000f0b2:	1a9b      	subs	r3, r3, r2
1000f0b4:	42ab      	cmp	r3, r5
1000f0b6:	dc26      	bgt.n	1000f106 <_printf_common+0x96>
1000f0b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
1000f0bc:	1e13      	subs	r3, r2, #0
1000f0be:	6822      	ldr	r2, [r4, #0]
1000f0c0:	bf18      	it	ne
1000f0c2:	2301      	movne	r3, #1
1000f0c4:	0692      	lsls	r2, r2, #26
1000f0c6:	d42b      	bmi.n	1000f120 <_printf_common+0xb0>
1000f0c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
1000f0cc:	4649      	mov	r1, r9
1000f0ce:	4638      	mov	r0, r7
1000f0d0:	47c0      	blx	r8
1000f0d2:	3001      	adds	r0, #1
1000f0d4:	d01e      	beq.n	1000f114 <_printf_common+0xa4>
1000f0d6:	6823      	ldr	r3, [r4, #0]
1000f0d8:	6922      	ldr	r2, [r4, #16]
1000f0da:	f003 0306 	and.w	r3, r3, #6
1000f0de:	2b04      	cmp	r3, #4
1000f0e0:	bf02      	ittt	eq
1000f0e2:	68e5      	ldreq	r5, [r4, #12]
1000f0e4:	6833      	ldreq	r3, [r6, #0]
1000f0e6:	1aed      	subeq	r5, r5, r3
1000f0e8:	68a3      	ldr	r3, [r4, #8]
1000f0ea:	bf0c      	ite	eq
1000f0ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1000f0f0:	2500      	movne	r5, #0
1000f0f2:	4293      	cmp	r3, r2
1000f0f4:	bfc4      	itt	gt
1000f0f6:	1a9b      	subgt	r3, r3, r2
1000f0f8:	18ed      	addgt	r5, r5, r3
1000f0fa:	2600      	movs	r6, #0
1000f0fc:	341a      	adds	r4, #26
1000f0fe:	42b5      	cmp	r5, r6
1000f100:	d11a      	bne.n	1000f138 <_printf_common+0xc8>
1000f102:	2000      	movs	r0, #0
1000f104:	e008      	b.n	1000f118 <_printf_common+0xa8>
1000f106:	2301      	movs	r3, #1
1000f108:	4652      	mov	r2, sl
1000f10a:	4649      	mov	r1, r9
1000f10c:	4638      	mov	r0, r7
1000f10e:	47c0      	blx	r8
1000f110:	3001      	adds	r0, #1
1000f112:	d103      	bne.n	1000f11c <_printf_common+0xac>
1000f114:	f04f 30ff 	mov.w	r0, #4294967295
1000f118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000f11c:	3501      	adds	r5, #1
1000f11e:	e7c6      	b.n	1000f0ae <_printf_common+0x3e>
1000f120:	18e1      	adds	r1, r4, r3
1000f122:	1c5a      	adds	r2, r3, #1
1000f124:	2030      	movs	r0, #48	; 0x30
1000f126:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1000f12a:	4422      	add	r2, r4
1000f12c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1000f130:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1000f134:	3302      	adds	r3, #2
1000f136:	e7c7      	b.n	1000f0c8 <_printf_common+0x58>
1000f138:	2301      	movs	r3, #1
1000f13a:	4622      	mov	r2, r4
1000f13c:	4649      	mov	r1, r9
1000f13e:	4638      	mov	r0, r7
1000f140:	47c0      	blx	r8
1000f142:	3001      	adds	r0, #1
1000f144:	d0e6      	beq.n	1000f114 <_printf_common+0xa4>
1000f146:	3601      	adds	r6, #1
1000f148:	e7d9      	b.n	1000f0fe <_printf_common+0x8e>
	...

1000f14c <_printf_i>:
1000f14c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
1000f150:	7e0f      	ldrb	r7, [r1, #24]
1000f152:	9d0c      	ldr	r5, [sp, #48]	; 0x30
1000f154:	2f78      	cmp	r7, #120	; 0x78
1000f156:	4691      	mov	r9, r2
1000f158:	4680      	mov	r8, r0
1000f15a:	460c      	mov	r4, r1
1000f15c:	469a      	mov	sl, r3
1000f15e:	f101 0243 	add.w	r2, r1, #67	; 0x43
1000f162:	d807      	bhi.n	1000f174 <_printf_i+0x28>
1000f164:	2f62      	cmp	r7, #98	; 0x62
1000f166:	d80a      	bhi.n	1000f17e <_printf_i+0x32>
1000f168:	2f00      	cmp	r7, #0
1000f16a:	f000 80d4 	beq.w	1000f316 <_printf_i+0x1ca>
1000f16e:	2f58      	cmp	r7, #88	; 0x58
1000f170:	f000 80c0 	beq.w	1000f2f4 <_printf_i+0x1a8>
1000f174:	f104 0542 	add.w	r5, r4, #66	; 0x42
1000f178:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
1000f17c:	e03a      	b.n	1000f1f4 <_printf_i+0xa8>
1000f17e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
1000f182:	2b15      	cmp	r3, #21
1000f184:	d8f6      	bhi.n	1000f174 <_printf_i+0x28>
1000f186:	a101      	add	r1, pc, #4	; (adr r1, 1000f18c <_printf_i+0x40>)
1000f188:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
1000f18c:	1000f1e5 	.word	0x1000f1e5
1000f190:	1000f1f9 	.word	0x1000f1f9
1000f194:	1000f175 	.word	0x1000f175
1000f198:	1000f175 	.word	0x1000f175
1000f19c:	1000f175 	.word	0x1000f175
1000f1a0:	1000f175 	.word	0x1000f175
1000f1a4:	1000f1f9 	.word	0x1000f1f9
1000f1a8:	1000f175 	.word	0x1000f175
1000f1ac:	1000f175 	.word	0x1000f175
1000f1b0:	1000f175 	.word	0x1000f175
1000f1b4:	1000f175 	.word	0x1000f175
1000f1b8:	1000f2fd 	.word	0x1000f2fd
1000f1bc:	1000f225 	.word	0x1000f225
1000f1c0:	1000f2b7 	.word	0x1000f2b7
1000f1c4:	1000f175 	.word	0x1000f175
1000f1c8:	1000f175 	.word	0x1000f175
1000f1cc:	1000f31f 	.word	0x1000f31f
1000f1d0:	1000f175 	.word	0x1000f175
1000f1d4:	1000f225 	.word	0x1000f225
1000f1d8:	1000f175 	.word	0x1000f175
1000f1dc:	1000f175 	.word	0x1000f175
1000f1e0:	1000f2bf 	.word	0x1000f2bf
1000f1e4:	682b      	ldr	r3, [r5, #0]
1000f1e6:	1d1a      	adds	r2, r3, #4
1000f1e8:	681b      	ldr	r3, [r3, #0]
1000f1ea:	602a      	str	r2, [r5, #0]
1000f1ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
1000f1f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1000f1f4:	2301      	movs	r3, #1
1000f1f6:	e09f      	b.n	1000f338 <_printf_i+0x1ec>
1000f1f8:	6820      	ldr	r0, [r4, #0]
1000f1fa:	682b      	ldr	r3, [r5, #0]
1000f1fc:	0607      	lsls	r7, r0, #24
1000f1fe:	f103 0104 	add.w	r1, r3, #4
1000f202:	6029      	str	r1, [r5, #0]
1000f204:	d501      	bpl.n	1000f20a <_printf_i+0xbe>
1000f206:	681e      	ldr	r6, [r3, #0]
1000f208:	e003      	b.n	1000f212 <_printf_i+0xc6>
1000f20a:	0646      	lsls	r6, r0, #25
1000f20c:	d5fb      	bpl.n	1000f206 <_printf_i+0xba>
1000f20e:	f9b3 6000 	ldrsh.w	r6, [r3]
1000f212:	2e00      	cmp	r6, #0
1000f214:	da03      	bge.n	1000f21e <_printf_i+0xd2>
1000f216:	232d      	movs	r3, #45	; 0x2d
1000f218:	4276      	negs	r6, r6
1000f21a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1000f21e:	485a      	ldr	r0, [pc, #360]	; (1000f388 <_printf_i+0x23c>)
1000f220:	230a      	movs	r3, #10
1000f222:	e012      	b.n	1000f24a <_printf_i+0xfe>
1000f224:	682b      	ldr	r3, [r5, #0]
1000f226:	6820      	ldr	r0, [r4, #0]
1000f228:	1d19      	adds	r1, r3, #4
1000f22a:	6029      	str	r1, [r5, #0]
1000f22c:	0605      	lsls	r5, r0, #24
1000f22e:	d501      	bpl.n	1000f234 <_printf_i+0xe8>
1000f230:	681e      	ldr	r6, [r3, #0]
1000f232:	e002      	b.n	1000f23a <_printf_i+0xee>
1000f234:	0641      	lsls	r1, r0, #25
1000f236:	d5fb      	bpl.n	1000f230 <_printf_i+0xe4>
1000f238:	881e      	ldrh	r6, [r3, #0]
1000f23a:	4853      	ldr	r0, [pc, #332]	; (1000f388 <_printf_i+0x23c>)
1000f23c:	2f6f      	cmp	r7, #111	; 0x6f
1000f23e:	bf0c      	ite	eq
1000f240:	2308      	moveq	r3, #8
1000f242:	230a      	movne	r3, #10
1000f244:	2100      	movs	r1, #0
1000f246:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1000f24a:	6865      	ldr	r5, [r4, #4]
1000f24c:	60a5      	str	r5, [r4, #8]
1000f24e:	2d00      	cmp	r5, #0
1000f250:	bfa2      	ittt	ge
1000f252:	6821      	ldrge	r1, [r4, #0]
1000f254:	f021 0104 	bicge.w	r1, r1, #4
1000f258:	6021      	strge	r1, [r4, #0]
1000f25a:	b90e      	cbnz	r6, 1000f260 <_printf_i+0x114>
1000f25c:	2d00      	cmp	r5, #0
1000f25e:	d04b      	beq.n	1000f2f8 <_printf_i+0x1ac>
1000f260:	4615      	mov	r5, r2
1000f262:	fbb6 f1f3 	udiv	r1, r6, r3
1000f266:	fb03 6711 	mls	r7, r3, r1, r6
1000f26a:	5dc7      	ldrb	r7, [r0, r7]
1000f26c:	f805 7d01 	strb.w	r7, [r5, #-1]!
1000f270:	4637      	mov	r7, r6
1000f272:	42bb      	cmp	r3, r7
1000f274:	460e      	mov	r6, r1
1000f276:	d9f4      	bls.n	1000f262 <_printf_i+0x116>
1000f278:	2b08      	cmp	r3, #8
1000f27a:	d10b      	bne.n	1000f294 <_printf_i+0x148>
1000f27c:	6823      	ldr	r3, [r4, #0]
1000f27e:	07de      	lsls	r6, r3, #31
1000f280:	d508      	bpl.n	1000f294 <_printf_i+0x148>
1000f282:	6923      	ldr	r3, [r4, #16]
1000f284:	6861      	ldr	r1, [r4, #4]
1000f286:	4299      	cmp	r1, r3
1000f288:	bfde      	ittt	le
1000f28a:	2330      	movle	r3, #48	; 0x30
1000f28c:	f805 3c01 	strble.w	r3, [r5, #-1]
1000f290:	f105 35ff 	addle.w	r5, r5, #4294967295
1000f294:	1b52      	subs	r2, r2, r5
1000f296:	6122      	str	r2, [r4, #16]
1000f298:	f8cd a000 	str.w	sl, [sp]
1000f29c:	464b      	mov	r3, r9
1000f29e:	aa03      	add	r2, sp, #12
1000f2a0:	4621      	mov	r1, r4
1000f2a2:	4640      	mov	r0, r8
1000f2a4:	f7ff fee4 	bl	1000f070 <_printf_common>
1000f2a8:	3001      	adds	r0, #1
1000f2aa:	d14a      	bne.n	1000f342 <_printf_i+0x1f6>
1000f2ac:	f04f 30ff 	mov.w	r0, #4294967295
1000f2b0:	b004      	add	sp, #16
1000f2b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000f2b6:	6823      	ldr	r3, [r4, #0]
1000f2b8:	f043 0320 	orr.w	r3, r3, #32
1000f2bc:	6023      	str	r3, [r4, #0]
1000f2be:	4833      	ldr	r0, [pc, #204]	; (1000f38c <_printf_i+0x240>)
1000f2c0:	2778      	movs	r7, #120	; 0x78
1000f2c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
1000f2c6:	6823      	ldr	r3, [r4, #0]
1000f2c8:	6829      	ldr	r1, [r5, #0]
1000f2ca:	061f      	lsls	r7, r3, #24
1000f2cc:	f851 6b04 	ldr.w	r6, [r1], #4
1000f2d0:	d402      	bmi.n	1000f2d8 <_printf_i+0x18c>
1000f2d2:	065f      	lsls	r7, r3, #25
1000f2d4:	bf48      	it	mi
1000f2d6:	b2b6      	uxthmi	r6, r6
1000f2d8:	07df      	lsls	r7, r3, #31
1000f2da:	bf48      	it	mi
1000f2dc:	f043 0320 	orrmi.w	r3, r3, #32
1000f2e0:	6029      	str	r1, [r5, #0]
1000f2e2:	bf48      	it	mi
1000f2e4:	6023      	strmi	r3, [r4, #0]
1000f2e6:	b91e      	cbnz	r6, 1000f2f0 <_printf_i+0x1a4>
1000f2e8:	6823      	ldr	r3, [r4, #0]
1000f2ea:	f023 0320 	bic.w	r3, r3, #32
1000f2ee:	6023      	str	r3, [r4, #0]
1000f2f0:	2310      	movs	r3, #16
1000f2f2:	e7a7      	b.n	1000f244 <_printf_i+0xf8>
1000f2f4:	4824      	ldr	r0, [pc, #144]	; (1000f388 <_printf_i+0x23c>)
1000f2f6:	e7e4      	b.n	1000f2c2 <_printf_i+0x176>
1000f2f8:	4615      	mov	r5, r2
1000f2fa:	e7bd      	b.n	1000f278 <_printf_i+0x12c>
1000f2fc:	682b      	ldr	r3, [r5, #0]
1000f2fe:	6826      	ldr	r6, [r4, #0]
1000f300:	6961      	ldr	r1, [r4, #20]
1000f302:	1d18      	adds	r0, r3, #4
1000f304:	6028      	str	r0, [r5, #0]
1000f306:	0635      	lsls	r5, r6, #24
1000f308:	681b      	ldr	r3, [r3, #0]
1000f30a:	d501      	bpl.n	1000f310 <_printf_i+0x1c4>
1000f30c:	6019      	str	r1, [r3, #0]
1000f30e:	e002      	b.n	1000f316 <_printf_i+0x1ca>
1000f310:	0670      	lsls	r0, r6, #25
1000f312:	d5fb      	bpl.n	1000f30c <_printf_i+0x1c0>
1000f314:	8019      	strh	r1, [r3, #0]
1000f316:	2300      	movs	r3, #0
1000f318:	6123      	str	r3, [r4, #16]
1000f31a:	4615      	mov	r5, r2
1000f31c:	e7bc      	b.n	1000f298 <_printf_i+0x14c>
1000f31e:	682b      	ldr	r3, [r5, #0]
1000f320:	1d1a      	adds	r2, r3, #4
1000f322:	602a      	str	r2, [r5, #0]
1000f324:	681d      	ldr	r5, [r3, #0]
1000f326:	6862      	ldr	r2, [r4, #4]
1000f328:	2100      	movs	r1, #0
1000f32a:	4628      	mov	r0, r5
1000f32c:	f7f0 fe98 	bl	10000060 <memchr>
1000f330:	b108      	cbz	r0, 1000f336 <_printf_i+0x1ea>
1000f332:	1b40      	subs	r0, r0, r5
1000f334:	6060      	str	r0, [r4, #4]
1000f336:	6863      	ldr	r3, [r4, #4]
1000f338:	6123      	str	r3, [r4, #16]
1000f33a:	2300      	movs	r3, #0
1000f33c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1000f340:	e7aa      	b.n	1000f298 <_printf_i+0x14c>
1000f342:	6923      	ldr	r3, [r4, #16]
1000f344:	462a      	mov	r2, r5
1000f346:	4649      	mov	r1, r9
1000f348:	4640      	mov	r0, r8
1000f34a:	47d0      	blx	sl
1000f34c:	3001      	adds	r0, #1
1000f34e:	d0ad      	beq.n	1000f2ac <_printf_i+0x160>
1000f350:	6823      	ldr	r3, [r4, #0]
1000f352:	079b      	lsls	r3, r3, #30
1000f354:	d413      	bmi.n	1000f37e <_printf_i+0x232>
1000f356:	68e0      	ldr	r0, [r4, #12]
1000f358:	9b03      	ldr	r3, [sp, #12]
1000f35a:	4298      	cmp	r0, r3
1000f35c:	bfb8      	it	lt
1000f35e:	4618      	movlt	r0, r3
1000f360:	e7a6      	b.n	1000f2b0 <_printf_i+0x164>
1000f362:	2301      	movs	r3, #1
1000f364:	4632      	mov	r2, r6
1000f366:	4649      	mov	r1, r9
1000f368:	4640      	mov	r0, r8
1000f36a:	47d0      	blx	sl
1000f36c:	3001      	adds	r0, #1
1000f36e:	d09d      	beq.n	1000f2ac <_printf_i+0x160>
1000f370:	3501      	adds	r5, #1
1000f372:	68e3      	ldr	r3, [r4, #12]
1000f374:	9903      	ldr	r1, [sp, #12]
1000f376:	1a5b      	subs	r3, r3, r1
1000f378:	42ab      	cmp	r3, r5
1000f37a:	dcf2      	bgt.n	1000f362 <_printf_i+0x216>
1000f37c:	e7eb      	b.n	1000f356 <_printf_i+0x20a>
1000f37e:	2500      	movs	r5, #0
1000f380:	f104 0619 	add.w	r6, r4, #25
1000f384:	e7f5      	b.n	1000f372 <_printf_i+0x226>
1000f386:	bf00      	nop
1000f388:	100142a6 	.word	0x100142a6
1000f38c:	100142b7 	.word	0x100142b7

1000f390 <std>:
1000f390:	2300      	movs	r3, #0
1000f392:	b510      	push	{r4, lr}
1000f394:	4604      	mov	r4, r0
1000f396:	e9c0 3300 	strd	r3, r3, [r0]
1000f39a:	e9c0 3304 	strd	r3, r3, [r0, #16]
1000f39e:	6083      	str	r3, [r0, #8]
1000f3a0:	8181      	strh	r1, [r0, #12]
1000f3a2:	6643      	str	r3, [r0, #100]	; 0x64
1000f3a4:	81c2      	strh	r2, [r0, #14]
1000f3a6:	6183      	str	r3, [r0, #24]
1000f3a8:	4619      	mov	r1, r3
1000f3aa:	2208      	movs	r2, #8
1000f3ac:	305c      	adds	r0, #92	; 0x5c
1000f3ae:	f000 f926 	bl	1000f5fe <memset>
1000f3b2:	4b0d      	ldr	r3, [pc, #52]	; (1000f3e8 <std+0x58>)
1000f3b4:	6263      	str	r3, [r4, #36]	; 0x24
1000f3b6:	4b0d      	ldr	r3, [pc, #52]	; (1000f3ec <std+0x5c>)
1000f3b8:	62a3      	str	r3, [r4, #40]	; 0x28
1000f3ba:	4b0d      	ldr	r3, [pc, #52]	; (1000f3f0 <std+0x60>)
1000f3bc:	62e3      	str	r3, [r4, #44]	; 0x2c
1000f3be:	4b0d      	ldr	r3, [pc, #52]	; (1000f3f4 <std+0x64>)
1000f3c0:	6323      	str	r3, [r4, #48]	; 0x30
1000f3c2:	4b0d      	ldr	r3, [pc, #52]	; (1000f3f8 <std+0x68>)
1000f3c4:	6224      	str	r4, [r4, #32]
1000f3c6:	429c      	cmp	r4, r3
1000f3c8:	d006      	beq.n	1000f3d8 <std+0x48>
1000f3ca:	f103 0268 	add.w	r2, r3, #104	; 0x68
1000f3ce:	4294      	cmp	r4, r2
1000f3d0:	d002      	beq.n	1000f3d8 <std+0x48>
1000f3d2:	33d0      	adds	r3, #208	; 0xd0
1000f3d4:	429c      	cmp	r4, r3
1000f3d6:	d105      	bne.n	1000f3e4 <std+0x54>
1000f3d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
1000f3dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000f3e0:	f000 b9be 	b.w	1000f760 <__retarget_lock_init_recursive>
1000f3e4:	bd10      	pop	{r4, pc}
1000f3e6:	bf00      	nop
1000f3e8:	1000f579 	.word	0x1000f579
1000f3ec:	1000f59b 	.word	0x1000f59b
1000f3f0:	1000f5d3 	.word	0x1000f5d3
1000f3f4:	1000f5f7 	.word	0x1000f5f7
1000f3f8:	10022044 	.word	0x10022044

1000f3fc <stdio_exit_handler>:
1000f3fc:	4a02      	ldr	r2, [pc, #8]	; (1000f408 <stdio_exit_handler+0xc>)
1000f3fe:	4903      	ldr	r1, [pc, #12]	; (1000f40c <stdio_exit_handler+0x10>)
1000f400:	4803      	ldr	r0, [pc, #12]	; (1000f410 <stdio_exit_handler+0x14>)
1000f402:	f000 b87b 	b.w	1000f4fc <_fwalk_sglue>
1000f406:	bf00      	nop
1000f408:	10020ac4 	.word	0x10020ac4
1000f40c:	10011269 	.word	0x10011269
1000f410:	10020ad0 	.word	0x10020ad0

1000f414 <cleanup_stdio>:
1000f414:	6841      	ldr	r1, [r0, #4]
1000f416:	4b0c      	ldr	r3, [pc, #48]	; (1000f448 <cleanup_stdio+0x34>)
1000f418:	4299      	cmp	r1, r3
1000f41a:	b510      	push	{r4, lr}
1000f41c:	4604      	mov	r4, r0
1000f41e:	d001      	beq.n	1000f424 <cleanup_stdio+0x10>
1000f420:	f001 ff22 	bl	10011268 <_fflush_r>
1000f424:	68a1      	ldr	r1, [r4, #8]
1000f426:	4b09      	ldr	r3, [pc, #36]	; (1000f44c <cleanup_stdio+0x38>)
1000f428:	4299      	cmp	r1, r3
1000f42a:	d002      	beq.n	1000f432 <cleanup_stdio+0x1e>
1000f42c:	4620      	mov	r0, r4
1000f42e:	f001 ff1b 	bl	10011268 <_fflush_r>
1000f432:	68e1      	ldr	r1, [r4, #12]
1000f434:	4b06      	ldr	r3, [pc, #24]	; (1000f450 <cleanup_stdio+0x3c>)
1000f436:	4299      	cmp	r1, r3
1000f438:	d004      	beq.n	1000f444 <cleanup_stdio+0x30>
1000f43a:	4620      	mov	r0, r4
1000f43c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000f440:	f001 bf12 	b.w	10011268 <_fflush_r>
1000f444:	bd10      	pop	{r4, pc}
1000f446:	bf00      	nop
1000f448:	10022044 	.word	0x10022044
1000f44c:	100220ac 	.word	0x100220ac
1000f450:	10022114 	.word	0x10022114

1000f454 <global_stdio_init.part.0>:
1000f454:	b510      	push	{r4, lr}
1000f456:	4b0b      	ldr	r3, [pc, #44]	; (1000f484 <global_stdio_init.part.0+0x30>)
1000f458:	4c0b      	ldr	r4, [pc, #44]	; (1000f488 <global_stdio_init.part.0+0x34>)
1000f45a:	4a0c      	ldr	r2, [pc, #48]	; (1000f48c <global_stdio_init.part.0+0x38>)
1000f45c:	601a      	str	r2, [r3, #0]
1000f45e:	4620      	mov	r0, r4
1000f460:	2200      	movs	r2, #0
1000f462:	2104      	movs	r1, #4
1000f464:	f7ff ff94 	bl	1000f390 <std>
1000f468:	f104 0068 	add.w	r0, r4, #104	; 0x68
1000f46c:	2201      	movs	r2, #1
1000f46e:	2109      	movs	r1, #9
1000f470:	f7ff ff8e 	bl	1000f390 <std>
1000f474:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
1000f478:	2202      	movs	r2, #2
1000f47a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000f47e:	2112      	movs	r1, #18
1000f480:	f7ff bf86 	b.w	1000f390 <std>
1000f484:	1002217c 	.word	0x1002217c
1000f488:	10022044 	.word	0x10022044
1000f48c:	1000f3fd 	.word	0x1000f3fd

1000f490 <__sfp_lock_acquire>:
1000f490:	4801      	ldr	r0, [pc, #4]	; (1000f498 <__sfp_lock_acquire+0x8>)
1000f492:	f000 b966 	b.w	1000f762 <__retarget_lock_acquire_recursive>
1000f496:	bf00      	nop
1000f498:	10022185 	.word	0x10022185

1000f49c <__sfp_lock_release>:
1000f49c:	4801      	ldr	r0, [pc, #4]	; (1000f4a4 <__sfp_lock_release+0x8>)
1000f49e:	f000 b961 	b.w	1000f764 <__retarget_lock_release_recursive>
1000f4a2:	bf00      	nop
1000f4a4:	10022185 	.word	0x10022185

1000f4a8 <__sinit>:
1000f4a8:	b510      	push	{r4, lr}
1000f4aa:	4604      	mov	r4, r0
1000f4ac:	f7ff fff0 	bl	1000f490 <__sfp_lock_acquire>
1000f4b0:	6a23      	ldr	r3, [r4, #32]
1000f4b2:	b11b      	cbz	r3, 1000f4bc <__sinit+0x14>
1000f4b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000f4b8:	f7ff bff0 	b.w	1000f49c <__sfp_lock_release>
1000f4bc:	4b04      	ldr	r3, [pc, #16]	; (1000f4d0 <__sinit+0x28>)
1000f4be:	6223      	str	r3, [r4, #32]
1000f4c0:	4b04      	ldr	r3, [pc, #16]	; (1000f4d4 <__sinit+0x2c>)
1000f4c2:	681b      	ldr	r3, [r3, #0]
1000f4c4:	2b00      	cmp	r3, #0
1000f4c6:	d1f5      	bne.n	1000f4b4 <__sinit+0xc>
1000f4c8:	f7ff ffc4 	bl	1000f454 <global_stdio_init.part.0>
1000f4cc:	e7f2      	b.n	1000f4b4 <__sinit+0xc>
1000f4ce:	bf00      	nop
1000f4d0:	1000f415 	.word	0x1000f415
1000f4d4:	1002217c 	.word	0x1002217c

1000f4d8 <fiprintf>:
1000f4d8:	b40e      	push	{r1, r2, r3}
1000f4da:	b503      	push	{r0, r1, lr}
1000f4dc:	4601      	mov	r1, r0
1000f4de:	ab03      	add	r3, sp, #12
1000f4e0:	4805      	ldr	r0, [pc, #20]	; (1000f4f8 <fiprintf+0x20>)
1000f4e2:	f853 2b04 	ldr.w	r2, [r3], #4
1000f4e6:	6800      	ldr	r0, [r0, #0]
1000f4e8:	9301      	str	r3, [sp, #4]
1000f4ea:	f001 fd1d 	bl	10010f28 <_vfiprintf_r>
1000f4ee:	b002      	add	sp, #8
1000f4f0:	f85d eb04 	ldr.w	lr, [sp], #4
1000f4f4:	b003      	add	sp, #12
1000f4f6:	4770      	bx	lr
1000f4f8:	10020b1c 	.word	0x10020b1c

1000f4fc <_fwalk_sglue>:
1000f4fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1000f500:	4607      	mov	r7, r0
1000f502:	4688      	mov	r8, r1
1000f504:	4614      	mov	r4, r2
1000f506:	2600      	movs	r6, #0
1000f508:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
1000f50c:	f1b9 0901 	subs.w	r9, r9, #1
1000f510:	d505      	bpl.n	1000f51e <_fwalk_sglue+0x22>
1000f512:	6824      	ldr	r4, [r4, #0]
1000f514:	2c00      	cmp	r4, #0
1000f516:	d1f7      	bne.n	1000f508 <_fwalk_sglue+0xc>
1000f518:	4630      	mov	r0, r6
1000f51a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000f51e:	89ab      	ldrh	r3, [r5, #12]
1000f520:	2b01      	cmp	r3, #1
1000f522:	d907      	bls.n	1000f534 <_fwalk_sglue+0x38>
1000f524:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1000f528:	3301      	adds	r3, #1
1000f52a:	d003      	beq.n	1000f534 <_fwalk_sglue+0x38>
1000f52c:	4629      	mov	r1, r5
1000f52e:	4638      	mov	r0, r7
1000f530:	47c0      	blx	r8
1000f532:	4306      	orrs	r6, r0
1000f534:	3568      	adds	r5, #104	; 0x68
1000f536:	e7e9      	b.n	1000f50c <_fwalk_sglue+0x10>

1000f538 <siprintf>:
1000f538:	b40e      	push	{r1, r2, r3}
1000f53a:	b500      	push	{lr}
1000f53c:	b09c      	sub	sp, #112	; 0x70
1000f53e:	ab1d      	add	r3, sp, #116	; 0x74
1000f540:	9002      	str	r0, [sp, #8]
1000f542:	9006      	str	r0, [sp, #24]
1000f544:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
1000f548:	4809      	ldr	r0, [pc, #36]	; (1000f570 <siprintf+0x38>)
1000f54a:	9107      	str	r1, [sp, #28]
1000f54c:	9104      	str	r1, [sp, #16]
1000f54e:	4909      	ldr	r1, [pc, #36]	; (1000f574 <siprintf+0x3c>)
1000f550:	f853 2b04 	ldr.w	r2, [r3], #4
1000f554:	9105      	str	r1, [sp, #20]
1000f556:	6800      	ldr	r0, [r0, #0]
1000f558:	9301      	str	r3, [sp, #4]
1000f55a:	a902      	add	r1, sp, #8
1000f55c:	f001 fbbc 	bl	10010cd8 <_svfiprintf_r>
1000f560:	9b02      	ldr	r3, [sp, #8]
1000f562:	2200      	movs	r2, #0
1000f564:	701a      	strb	r2, [r3, #0]
1000f566:	b01c      	add	sp, #112	; 0x70
1000f568:	f85d eb04 	ldr.w	lr, [sp], #4
1000f56c:	b003      	add	sp, #12
1000f56e:	4770      	bx	lr
1000f570:	10020b1c 	.word	0x10020b1c
1000f574:	ffff0208 	.word	0xffff0208

1000f578 <__sread>:
1000f578:	b510      	push	{r4, lr}
1000f57a:	460c      	mov	r4, r1
1000f57c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000f580:	f000 f890 	bl	1000f6a4 <_read_r>
1000f584:	2800      	cmp	r0, #0
1000f586:	bfab      	itete	ge
1000f588:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1000f58a:	89a3      	ldrhlt	r3, [r4, #12]
1000f58c:	181b      	addge	r3, r3, r0
1000f58e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1000f592:	bfac      	ite	ge
1000f594:	6563      	strge	r3, [r4, #84]	; 0x54
1000f596:	81a3      	strhlt	r3, [r4, #12]
1000f598:	bd10      	pop	{r4, pc}

1000f59a <__swrite>:
1000f59a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000f59e:	461f      	mov	r7, r3
1000f5a0:	898b      	ldrh	r3, [r1, #12]
1000f5a2:	05db      	lsls	r3, r3, #23
1000f5a4:	4605      	mov	r5, r0
1000f5a6:	460c      	mov	r4, r1
1000f5a8:	4616      	mov	r6, r2
1000f5aa:	d505      	bpl.n	1000f5b8 <__swrite+0x1e>
1000f5ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000f5b0:	2302      	movs	r3, #2
1000f5b2:	2200      	movs	r2, #0
1000f5b4:	f000 f864 	bl	1000f680 <_lseek_r>
1000f5b8:	89a3      	ldrh	r3, [r4, #12]
1000f5ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1000f5be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1000f5c2:	81a3      	strh	r3, [r4, #12]
1000f5c4:	4632      	mov	r2, r6
1000f5c6:	463b      	mov	r3, r7
1000f5c8:	4628      	mov	r0, r5
1000f5ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1000f5ce:	f000 b88b 	b.w	1000f6e8 <_write_r>

1000f5d2 <__sseek>:
1000f5d2:	b510      	push	{r4, lr}
1000f5d4:	460c      	mov	r4, r1
1000f5d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000f5da:	f000 f851 	bl	1000f680 <_lseek_r>
1000f5de:	1c43      	adds	r3, r0, #1
1000f5e0:	89a3      	ldrh	r3, [r4, #12]
1000f5e2:	bf15      	itete	ne
1000f5e4:	6560      	strne	r0, [r4, #84]	; 0x54
1000f5e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1000f5ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1000f5ee:	81a3      	strheq	r3, [r4, #12]
1000f5f0:	bf18      	it	ne
1000f5f2:	81a3      	strhne	r3, [r4, #12]
1000f5f4:	bd10      	pop	{r4, pc}

1000f5f6 <__sclose>:
1000f5f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000f5fa:	f000 b831 	b.w	1000f660 <_close_r>

1000f5fe <memset>:
1000f5fe:	4402      	add	r2, r0
1000f600:	4603      	mov	r3, r0
1000f602:	4293      	cmp	r3, r2
1000f604:	d100      	bne.n	1000f608 <memset+0xa>
1000f606:	4770      	bx	lr
1000f608:	f803 1b01 	strb.w	r1, [r3], #1
1000f60c:	e7f9      	b.n	1000f602 <memset+0x4>

1000f60e <strncmp>:
1000f60e:	b510      	push	{r4, lr}
1000f610:	b16a      	cbz	r2, 1000f62e <strncmp+0x20>
1000f612:	3901      	subs	r1, #1
1000f614:	1884      	adds	r4, r0, r2
1000f616:	f810 2b01 	ldrb.w	r2, [r0], #1
1000f61a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
1000f61e:	429a      	cmp	r2, r3
1000f620:	d103      	bne.n	1000f62a <strncmp+0x1c>
1000f622:	42a0      	cmp	r0, r4
1000f624:	d001      	beq.n	1000f62a <strncmp+0x1c>
1000f626:	2a00      	cmp	r2, #0
1000f628:	d1f5      	bne.n	1000f616 <strncmp+0x8>
1000f62a:	1ad0      	subs	r0, r2, r3
1000f62c:	bd10      	pop	{r4, pc}
1000f62e:	4610      	mov	r0, r2
1000f630:	e7fc      	b.n	1000f62c <strncmp+0x1e>

1000f632 <strncpy>:
1000f632:	b510      	push	{r4, lr}
1000f634:	3901      	subs	r1, #1
1000f636:	4603      	mov	r3, r0
1000f638:	b132      	cbz	r2, 1000f648 <strncpy+0x16>
1000f63a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1000f63e:	f803 4b01 	strb.w	r4, [r3], #1
1000f642:	3a01      	subs	r2, #1
1000f644:	2c00      	cmp	r4, #0
1000f646:	d1f7      	bne.n	1000f638 <strncpy+0x6>
1000f648:	441a      	add	r2, r3
1000f64a:	2100      	movs	r1, #0
1000f64c:	4293      	cmp	r3, r2
1000f64e:	d100      	bne.n	1000f652 <strncpy+0x20>
1000f650:	bd10      	pop	{r4, pc}
1000f652:	f803 1b01 	strb.w	r1, [r3], #1
1000f656:	e7f9      	b.n	1000f64c <strncpy+0x1a>

1000f658 <_localeconv_r>:
1000f658:	4800      	ldr	r0, [pc, #0]	; (1000f65c <_localeconv_r+0x4>)
1000f65a:	4770      	bx	lr
1000f65c:	10020c10 	.word	0x10020c10

1000f660 <_close_r>:
1000f660:	b538      	push	{r3, r4, r5, lr}
1000f662:	4d06      	ldr	r5, [pc, #24]	; (1000f67c <_close_r+0x1c>)
1000f664:	2300      	movs	r3, #0
1000f666:	4604      	mov	r4, r0
1000f668:	4608      	mov	r0, r1
1000f66a:	602b      	str	r3, [r5, #0]
1000f66c:	f002 f906 	bl	1001187c <_close>
1000f670:	1c43      	adds	r3, r0, #1
1000f672:	d102      	bne.n	1000f67a <_close_r+0x1a>
1000f674:	682b      	ldr	r3, [r5, #0]
1000f676:	b103      	cbz	r3, 1000f67a <_close_r+0x1a>
1000f678:	6023      	str	r3, [r4, #0]
1000f67a:	bd38      	pop	{r3, r4, r5, pc}
1000f67c:	10022180 	.word	0x10022180

1000f680 <_lseek_r>:
1000f680:	b538      	push	{r3, r4, r5, lr}
1000f682:	4d07      	ldr	r5, [pc, #28]	; (1000f6a0 <_lseek_r+0x20>)
1000f684:	4604      	mov	r4, r0
1000f686:	4608      	mov	r0, r1
1000f688:	4611      	mov	r1, r2
1000f68a:	2200      	movs	r2, #0
1000f68c:	602a      	str	r2, [r5, #0]
1000f68e:	461a      	mov	r2, r3
1000f690:	f002 f91c 	bl	100118cc <_lseek>
1000f694:	1c43      	adds	r3, r0, #1
1000f696:	d102      	bne.n	1000f69e <_lseek_r+0x1e>
1000f698:	682b      	ldr	r3, [r5, #0]
1000f69a:	b103      	cbz	r3, 1000f69e <_lseek_r+0x1e>
1000f69c:	6023      	str	r3, [r4, #0]
1000f69e:	bd38      	pop	{r3, r4, r5, pc}
1000f6a0:	10022180 	.word	0x10022180

1000f6a4 <_read_r>:
1000f6a4:	b538      	push	{r3, r4, r5, lr}
1000f6a6:	4d07      	ldr	r5, [pc, #28]	; (1000f6c4 <_read_r+0x20>)
1000f6a8:	4604      	mov	r4, r0
1000f6aa:	4608      	mov	r0, r1
1000f6ac:	4611      	mov	r1, r2
1000f6ae:	2200      	movs	r2, #0
1000f6b0:	602a      	str	r2, [r5, #0]
1000f6b2:	461a      	mov	r2, r3
1000f6b4:	f002 f912 	bl	100118dc <_read>
1000f6b8:	1c43      	adds	r3, r0, #1
1000f6ba:	d102      	bne.n	1000f6c2 <_read_r+0x1e>
1000f6bc:	682b      	ldr	r3, [r5, #0]
1000f6be:	b103      	cbz	r3, 1000f6c2 <_read_r+0x1e>
1000f6c0:	6023      	str	r3, [r4, #0]
1000f6c2:	bd38      	pop	{r3, r4, r5, pc}
1000f6c4:	10022180 	.word	0x10022180

1000f6c8 <_sbrk_r>:
1000f6c8:	b538      	push	{r3, r4, r5, lr}
1000f6ca:	4d06      	ldr	r5, [pc, #24]	; (1000f6e4 <_sbrk_r+0x1c>)
1000f6cc:	2300      	movs	r3, #0
1000f6ce:	4604      	mov	r4, r0
1000f6d0:	4608      	mov	r0, r1
1000f6d2:	602b      	str	r3, [r5, #0]
1000f6d4:	f7f1 ffa2 	bl	1000161c <_sbrk>
1000f6d8:	1c43      	adds	r3, r0, #1
1000f6da:	d102      	bne.n	1000f6e2 <_sbrk_r+0x1a>
1000f6dc:	682b      	ldr	r3, [r5, #0]
1000f6de:	b103      	cbz	r3, 1000f6e2 <_sbrk_r+0x1a>
1000f6e0:	6023      	str	r3, [r4, #0]
1000f6e2:	bd38      	pop	{r3, r4, r5, pc}
1000f6e4:	10022180 	.word	0x10022180

1000f6e8 <_write_r>:
1000f6e8:	b538      	push	{r3, r4, r5, lr}
1000f6ea:	4d07      	ldr	r5, [pc, #28]	; (1000f708 <_write_r+0x20>)
1000f6ec:	4604      	mov	r4, r0
1000f6ee:	4608      	mov	r0, r1
1000f6f0:	4611      	mov	r1, r2
1000f6f2:	2200      	movs	r2, #0
1000f6f4:	602a      	str	r2, [r5, #0]
1000f6f6:	461a      	mov	r2, r3
1000f6f8:	f002 f8f8 	bl	100118ec <_write>
1000f6fc:	1c43      	adds	r3, r0, #1
1000f6fe:	d102      	bne.n	1000f706 <_write_r+0x1e>
1000f700:	682b      	ldr	r3, [r5, #0]
1000f702:	b103      	cbz	r3, 1000f706 <_write_r+0x1e>
1000f704:	6023      	str	r3, [r4, #0]
1000f706:	bd38      	pop	{r3, r4, r5, pc}
1000f708:	10022180 	.word	0x10022180

1000f70c <__errno>:
1000f70c:	4b01      	ldr	r3, [pc, #4]	; (1000f714 <__errno+0x8>)
1000f70e:	6818      	ldr	r0, [r3, #0]
1000f710:	4770      	bx	lr
1000f712:	bf00      	nop
1000f714:	10020b1c 	.word	0x10020b1c

1000f718 <__libc_init_array>:
1000f718:	b570      	push	{r4, r5, r6, lr}
1000f71a:	4d0d      	ldr	r5, [pc, #52]	; (1000f750 <__libc_init_array+0x38>)
1000f71c:	4c0d      	ldr	r4, [pc, #52]	; (1000f754 <__libc_init_array+0x3c>)
1000f71e:	1b64      	subs	r4, r4, r5
1000f720:	10a4      	asrs	r4, r4, #2
1000f722:	2600      	movs	r6, #0
1000f724:	42a6      	cmp	r6, r4
1000f726:	d109      	bne.n	1000f73c <__libc_init_array+0x24>
1000f728:	4d0b      	ldr	r5, [pc, #44]	; (1000f758 <__libc_init_array+0x40>)
1000f72a:	4c0c      	ldr	r4, [pc, #48]	; (1000f75c <__libc_init_array+0x44>)
1000f72c:	f002 f8e8 	bl	10011900 <_init>
1000f730:	1b64      	subs	r4, r4, r5
1000f732:	10a4      	asrs	r4, r4, #2
1000f734:	2600      	movs	r6, #0
1000f736:	42a6      	cmp	r6, r4
1000f738:	d105      	bne.n	1000f746 <__libc_init_array+0x2e>
1000f73a:	bd70      	pop	{r4, r5, r6, pc}
1000f73c:	f855 3b04 	ldr.w	r3, [r5], #4
1000f740:	4798      	blx	r3
1000f742:	3601      	adds	r6, #1
1000f744:	e7ee      	b.n	1000f724 <__libc_init_array+0xc>
1000f746:	f855 3b04 	ldr.w	r3, [r5], #4
1000f74a:	4798      	blx	r3
1000f74c:	3601      	adds	r6, #1
1000f74e:	e7f2      	b.n	1000f736 <__libc_init_array+0x1e>
1000f750:	100145e0 	.word	0x100145e0
1000f754:	100145e0 	.word	0x100145e0
1000f758:	100145e0 	.word	0x100145e0
1000f75c:	100145e4 	.word	0x100145e4

1000f760 <__retarget_lock_init_recursive>:
1000f760:	4770      	bx	lr

1000f762 <__retarget_lock_acquire_recursive>:
1000f762:	4770      	bx	lr

1000f764 <__retarget_lock_release_recursive>:
1000f764:	4770      	bx	lr

1000f766 <memcpy>:
1000f766:	440a      	add	r2, r1
1000f768:	4291      	cmp	r1, r2
1000f76a:	f100 33ff 	add.w	r3, r0, #4294967295
1000f76e:	d100      	bne.n	1000f772 <memcpy+0xc>
1000f770:	4770      	bx	lr
1000f772:	b510      	push	{r4, lr}
1000f774:	f811 4b01 	ldrb.w	r4, [r1], #1
1000f778:	f803 4f01 	strb.w	r4, [r3, #1]!
1000f77c:	4291      	cmp	r1, r2
1000f77e:	d1f9      	bne.n	1000f774 <memcpy+0xe>
1000f780:	bd10      	pop	{r4, pc}

1000f782 <abort>:
1000f782:	b508      	push	{r3, lr}
1000f784:	2006      	movs	r0, #6
1000f786:	f001 fe6f 	bl	10011468 <raise>
1000f78a:	2001      	movs	r0, #1
1000f78c:	f002 f8b6 	bl	100118fc <_exit>

1000f790 <quorem>:
1000f790:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000f794:	6903      	ldr	r3, [r0, #16]
1000f796:	690c      	ldr	r4, [r1, #16]
1000f798:	42a3      	cmp	r3, r4
1000f79a:	4607      	mov	r7, r0
1000f79c:	db7e      	blt.n	1000f89c <quorem+0x10c>
1000f79e:	3c01      	subs	r4, #1
1000f7a0:	f101 0814 	add.w	r8, r1, #20
1000f7a4:	f100 0514 	add.w	r5, r0, #20
1000f7a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
1000f7ac:	9301      	str	r3, [sp, #4]
1000f7ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
1000f7b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
1000f7b6:	3301      	adds	r3, #1
1000f7b8:	429a      	cmp	r2, r3
1000f7ba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
1000f7be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
1000f7c2:	fbb2 f6f3 	udiv	r6, r2, r3
1000f7c6:	d331      	bcc.n	1000f82c <quorem+0x9c>
1000f7c8:	f04f 0e00 	mov.w	lr, #0
1000f7cc:	4640      	mov	r0, r8
1000f7ce:	46ac      	mov	ip, r5
1000f7d0:	46f2      	mov	sl, lr
1000f7d2:	f850 2b04 	ldr.w	r2, [r0], #4
1000f7d6:	b293      	uxth	r3, r2
1000f7d8:	fb06 e303 	mla	r3, r6, r3, lr
1000f7dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
1000f7e0:	0c1a      	lsrs	r2, r3, #16
1000f7e2:	b29b      	uxth	r3, r3
1000f7e4:	ebaa 0303 	sub.w	r3, sl, r3
1000f7e8:	f8dc a000 	ldr.w	sl, [ip]
1000f7ec:	fa13 f38a 	uxtah	r3, r3, sl
1000f7f0:	fb06 220e 	mla	r2, r6, lr, r2
1000f7f4:	9300      	str	r3, [sp, #0]
1000f7f6:	9b00      	ldr	r3, [sp, #0]
1000f7f8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
1000f7fc:	b292      	uxth	r2, r2
1000f7fe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
1000f802:	eb02 4223 	add.w	r2, r2, r3, asr #16
1000f806:	f8bd 3000 	ldrh.w	r3, [sp]
1000f80a:	4581      	cmp	r9, r0
1000f80c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1000f810:	f84c 3b04 	str.w	r3, [ip], #4
1000f814:	ea4f 4a22 	mov.w	sl, r2, asr #16
1000f818:	d2db      	bcs.n	1000f7d2 <quorem+0x42>
1000f81a:	f855 300b 	ldr.w	r3, [r5, fp]
1000f81e:	b92b      	cbnz	r3, 1000f82c <quorem+0x9c>
1000f820:	9b01      	ldr	r3, [sp, #4]
1000f822:	3b04      	subs	r3, #4
1000f824:	429d      	cmp	r5, r3
1000f826:	461a      	mov	r2, r3
1000f828:	d32c      	bcc.n	1000f884 <quorem+0xf4>
1000f82a:	613c      	str	r4, [r7, #16]
1000f82c:	4638      	mov	r0, r7
1000f82e:	f001 f8f1 	bl	10010a14 <__mcmp>
1000f832:	2800      	cmp	r0, #0
1000f834:	db22      	blt.n	1000f87c <quorem+0xec>
1000f836:	3601      	adds	r6, #1
1000f838:	4629      	mov	r1, r5
1000f83a:	2000      	movs	r0, #0
1000f83c:	f858 2b04 	ldr.w	r2, [r8], #4
1000f840:	f8d1 c000 	ldr.w	ip, [r1]
1000f844:	b293      	uxth	r3, r2
1000f846:	1ac3      	subs	r3, r0, r3
1000f848:	0c12      	lsrs	r2, r2, #16
1000f84a:	fa13 f38c 	uxtah	r3, r3, ip
1000f84e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
1000f852:	eb02 4223 	add.w	r2, r2, r3, asr #16
1000f856:	b29b      	uxth	r3, r3
1000f858:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1000f85c:	45c1      	cmp	r9, r8
1000f85e:	f841 3b04 	str.w	r3, [r1], #4
1000f862:	ea4f 4022 	mov.w	r0, r2, asr #16
1000f866:	d2e9      	bcs.n	1000f83c <quorem+0xac>
1000f868:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
1000f86c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
1000f870:	b922      	cbnz	r2, 1000f87c <quorem+0xec>
1000f872:	3b04      	subs	r3, #4
1000f874:	429d      	cmp	r5, r3
1000f876:	461a      	mov	r2, r3
1000f878:	d30a      	bcc.n	1000f890 <quorem+0x100>
1000f87a:	613c      	str	r4, [r7, #16]
1000f87c:	4630      	mov	r0, r6
1000f87e:	b003      	add	sp, #12
1000f880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000f884:	6812      	ldr	r2, [r2, #0]
1000f886:	3b04      	subs	r3, #4
1000f888:	2a00      	cmp	r2, #0
1000f88a:	d1ce      	bne.n	1000f82a <quorem+0x9a>
1000f88c:	3c01      	subs	r4, #1
1000f88e:	e7c9      	b.n	1000f824 <quorem+0x94>
1000f890:	6812      	ldr	r2, [r2, #0]
1000f892:	3b04      	subs	r3, #4
1000f894:	2a00      	cmp	r2, #0
1000f896:	d1f0      	bne.n	1000f87a <quorem+0xea>
1000f898:	3c01      	subs	r4, #1
1000f89a:	e7eb      	b.n	1000f874 <quorem+0xe4>
1000f89c:	2000      	movs	r0, #0
1000f89e:	e7ee      	b.n	1000f87e <quorem+0xee>

1000f8a0 <_dtoa_r>:
1000f8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000f8a4:	ed2d 8b04 	vpush	{d8-d9}
1000f8a8:	69c5      	ldr	r5, [r0, #28]
1000f8aa:	b093      	sub	sp, #76	; 0x4c
1000f8ac:	ed8d 0b02 	vstr	d0, [sp, #8]
1000f8b0:	ec57 6b10 	vmov	r6, r7, d0
1000f8b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
1000f8b8:	9107      	str	r1, [sp, #28]
1000f8ba:	4604      	mov	r4, r0
1000f8bc:	920a      	str	r2, [sp, #40]	; 0x28
1000f8be:	930d      	str	r3, [sp, #52]	; 0x34
1000f8c0:	b975      	cbnz	r5, 1000f8e0 <_dtoa_r+0x40>
1000f8c2:	2010      	movs	r0, #16
1000f8c4:	f7ff f812 	bl	1000e8ec <malloc>
1000f8c8:	4602      	mov	r2, r0
1000f8ca:	61e0      	str	r0, [r4, #28]
1000f8cc:	b920      	cbnz	r0, 1000f8d8 <_dtoa_r+0x38>
1000f8ce:	4bae      	ldr	r3, [pc, #696]	; (1000fb88 <_dtoa_r+0x2e8>)
1000f8d0:	21ef      	movs	r1, #239	; 0xef
1000f8d2:	48ae      	ldr	r0, [pc, #696]	; (1000fb8c <_dtoa_r+0x2ec>)
1000f8d4:	f7fe ffec 	bl	1000e8b0 <__assert_func>
1000f8d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
1000f8dc:	6005      	str	r5, [r0, #0]
1000f8de:	60c5      	str	r5, [r0, #12]
1000f8e0:	69e3      	ldr	r3, [r4, #28]
1000f8e2:	6819      	ldr	r1, [r3, #0]
1000f8e4:	b151      	cbz	r1, 1000f8fc <_dtoa_r+0x5c>
1000f8e6:	685a      	ldr	r2, [r3, #4]
1000f8e8:	604a      	str	r2, [r1, #4]
1000f8ea:	2301      	movs	r3, #1
1000f8ec:	4093      	lsls	r3, r2
1000f8ee:	608b      	str	r3, [r1, #8]
1000f8f0:	4620      	mov	r0, r4
1000f8f2:	f000 fe53 	bl	1001059c <_Bfree>
1000f8f6:	69e3      	ldr	r3, [r4, #28]
1000f8f8:	2200      	movs	r2, #0
1000f8fa:	601a      	str	r2, [r3, #0]
1000f8fc:	1e3b      	subs	r3, r7, #0
1000f8fe:	bfbb      	ittet	lt
1000f900:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
1000f904:	9303      	strlt	r3, [sp, #12]
1000f906:	2300      	movge	r3, #0
1000f908:	2201      	movlt	r2, #1
1000f90a:	bfac      	ite	ge
1000f90c:	f8c8 3000 	strge.w	r3, [r8]
1000f910:	f8c8 2000 	strlt.w	r2, [r8]
1000f914:	4b9e      	ldr	r3, [pc, #632]	; (1000fb90 <_dtoa_r+0x2f0>)
1000f916:	f8dd 800c 	ldr.w	r8, [sp, #12]
1000f91a:	ea33 0308 	bics.w	r3, r3, r8
1000f91e:	d11b      	bne.n	1000f958 <_dtoa_r+0xb8>
1000f920:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000f922:	f242 730f 	movw	r3, #9999	; 0x270f
1000f926:	6013      	str	r3, [r2, #0]
1000f928:	f3c8 0313 	ubfx	r3, r8, #0, #20
1000f92c:	4333      	orrs	r3, r6
1000f92e:	f000 8593 	beq.w	10010458 <_dtoa_r+0xbb8>
1000f932:	9b21      	ldr	r3, [sp, #132]	; 0x84
1000f934:	b963      	cbnz	r3, 1000f950 <_dtoa_r+0xb0>
1000f936:	4b97      	ldr	r3, [pc, #604]	; (1000fb94 <_dtoa_r+0x2f4>)
1000f938:	e027      	b.n	1000f98a <_dtoa_r+0xea>
1000f93a:	4b97      	ldr	r3, [pc, #604]	; (1000fb98 <_dtoa_r+0x2f8>)
1000f93c:	9300      	str	r3, [sp, #0]
1000f93e:	3308      	adds	r3, #8
1000f940:	9a21      	ldr	r2, [sp, #132]	; 0x84
1000f942:	6013      	str	r3, [r2, #0]
1000f944:	9800      	ldr	r0, [sp, #0]
1000f946:	b013      	add	sp, #76	; 0x4c
1000f948:	ecbd 8b04 	vpop	{d8-d9}
1000f94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000f950:	4b90      	ldr	r3, [pc, #576]	; (1000fb94 <_dtoa_r+0x2f4>)
1000f952:	9300      	str	r3, [sp, #0]
1000f954:	3303      	adds	r3, #3
1000f956:	e7f3      	b.n	1000f940 <_dtoa_r+0xa0>
1000f958:	ed9d 7b02 	vldr	d7, [sp, #8]
1000f95c:	2200      	movs	r2, #0
1000f95e:	ec51 0b17 	vmov	r0, r1, d7
1000f962:	eeb0 8a47 	vmov.f32	s16, s14
1000f966:	eef0 8a67 	vmov.f32	s17, s15
1000f96a:	2300      	movs	r3, #0
1000f96c:	f7f0 fff4 	bl	10000958 <__aeabi_dcmpeq>
1000f970:	4681      	mov	r9, r0
1000f972:	b160      	cbz	r0, 1000f98e <_dtoa_r+0xee>
1000f974:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000f976:	2301      	movs	r3, #1
1000f978:	6013      	str	r3, [r2, #0]
1000f97a:	9b21      	ldr	r3, [sp, #132]	; 0x84
1000f97c:	2b00      	cmp	r3, #0
1000f97e:	f000 8568 	beq.w	10010452 <_dtoa_r+0xbb2>
1000f982:	4b86      	ldr	r3, [pc, #536]	; (1000fb9c <_dtoa_r+0x2fc>)
1000f984:	9a21      	ldr	r2, [sp, #132]	; 0x84
1000f986:	6013      	str	r3, [r2, #0]
1000f988:	3b01      	subs	r3, #1
1000f98a:	9300      	str	r3, [sp, #0]
1000f98c:	e7da      	b.n	1000f944 <_dtoa_r+0xa4>
1000f98e:	aa10      	add	r2, sp, #64	; 0x40
1000f990:	a911      	add	r1, sp, #68	; 0x44
1000f992:	4620      	mov	r0, r4
1000f994:	eeb0 0a48 	vmov.f32	s0, s16
1000f998:	eef0 0a68 	vmov.f32	s1, s17
1000f99c:	f001 f8e0 	bl	10010b60 <__d2b>
1000f9a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
1000f9a4:	4682      	mov	sl, r0
1000f9a6:	2d00      	cmp	r5, #0
1000f9a8:	d07f      	beq.n	1000faaa <_dtoa_r+0x20a>
1000f9aa:	ee18 3a90 	vmov	r3, s17
1000f9ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
1000f9b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
1000f9b6:	ec51 0b18 	vmov	r0, r1, d8
1000f9ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
1000f9be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
1000f9c2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
1000f9c6:	4619      	mov	r1, r3
1000f9c8:	2200      	movs	r2, #0
1000f9ca:	4b75      	ldr	r3, [pc, #468]	; (1000fba0 <_dtoa_r+0x300>)
1000f9cc:	f7f0 fba4 	bl	10000118 <__aeabi_dsub>
1000f9d0:	a367      	add	r3, pc, #412	; (adr r3, 1000fb70 <_dtoa_r+0x2d0>)
1000f9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
1000f9d6:	f7f0 fd57 	bl	10000488 <__aeabi_dmul>
1000f9da:	a367      	add	r3, pc, #412	; (adr r3, 1000fb78 <_dtoa_r+0x2d8>)
1000f9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
1000f9e0:	f7f0 fb9c 	bl	1000011c <__adddf3>
1000f9e4:	4606      	mov	r6, r0
1000f9e6:	4628      	mov	r0, r5
1000f9e8:	460f      	mov	r7, r1
1000f9ea:	f7f0 fce3 	bl	100003b4 <__aeabi_i2d>
1000f9ee:	a364      	add	r3, pc, #400	; (adr r3, 1000fb80 <_dtoa_r+0x2e0>)
1000f9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
1000f9f4:	f7f0 fd48 	bl	10000488 <__aeabi_dmul>
1000f9f8:	4602      	mov	r2, r0
1000f9fa:	460b      	mov	r3, r1
1000f9fc:	4630      	mov	r0, r6
1000f9fe:	4639      	mov	r1, r7
1000fa00:	f7f0 fb8c 	bl	1000011c <__adddf3>
1000fa04:	4606      	mov	r6, r0
1000fa06:	460f      	mov	r7, r1
1000fa08:	f7f0 ffee 	bl	100009e8 <__aeabi_d2iz>
1000fa0c:	2200      	movs	r2, #0
1000fa0e:	4683      	mov	fp, r0
1000fa10:	2300      	movs	r3, #0
1000fa12:	4630      	mov	r0, r6
1000fa14:	4639      	mov	r1, r7
1000fa16:	f7f0 ffa9 	bl	1000096c <__aeabi_dcmplt>
1000fa1a:	b148      	cbz	r0, 1000fa30 <_dtoa_r+0x190>
1000fa1c:	4658      	mov	r0, fp
1000fa1e:	f7f0 fcc9 	bl	100003b4 <__aeabi_i2d>
1000fa22:	4632      	mov	r2, r6
1000fa24:	463b      	mov	r3, r7
1000fa26:	f7f0 ff97 	bl	10000958 <__aeabi_dcmpeq>
1000fa2a:	b908      	cbnz	r0, 1000fa30 <_dtoa_r+0x190>
1000fa2c:	f10b 3bff 	add.w	fp, fp, #4294967295
1000fa30:	f1bb 0f16 	cmp.w	fp, #22
1000fa34:	d857      	bhi.n	1000fae6 <_dtoa_r+0x246>
1000fa36:	4b5b      	ldr	r3, [pc, #364]	; (1000fba4 <_dtoa_r+0x304>)
1000fa38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
1000fa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
1000fa40:	ec51 0b18 	vmov	r0, r1, d8
1000fa44:	f7f0 ff92 	bl	1000096c <__aeabi_dcmplt>
1000fa48:	2800      	cmp	r0, #0
1000fa4a:	d04e      	beq.n	1000faea <_dtoa_r+0x24a>
1000fa4c:	f10b 3bff 	add.w	fp, fp, #4294967295
1000fa50:	2300      	movs	r3, #0
1000fa52:	930c      	str	r3, [sp, #48]	; 0x30
1000fa54:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000fa56:	1b5b      	subs	r3, r3, r5
1000fa58:	1e5a      	subs	r2, r3, #1
1000fa5a:	bf45      	ittet	mi
1000fa5c:	f1c3 0301 	rsbmi	r3, r3, #1
1000fa60:	9305      	strmi	r3, [sp, #20]
1000fa62:	2300      	movpl	r3, #0
1000fa64:	2300      	movmi	r3, #0
1000fa66:	9206      	str	r2, [sp, #24]
1000fa68:	bf54      	ite	pl
1000fa6a:	9305      	strpl	r3, [sp, #20]
1000fa6c:	9306      	strmi	r3, [sp, #24]
1000fa6e:	f1bb 0f00 	cmp.w	fp, #0
1000fa72:	db3c      	blt.n	1000faee <_dtoa_r+0x24e>
1000fa74:	9b06      	ldr	r3, [sp, #24]
1000fa76:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
1000fa7a:	445b      	add	r3, fp
1000fa7c:	9306      	str	r3, [sp, #24]
1000fa7e:	2300      	movs	r3, #0
1000fa80:	9308      	str	r3, [sp, #32]
1000fa82:	9b07      	ldr	r3, [sp, #28]
1000fa84:	2b09      	cmp	r3, #9
1000fa86:	d868      	bhi.n	1000fb5a <_dtoa_r+0x2ba>
1000fa88:	2b05      	cmp	r3, #5
1000fa8a:	bfc4      	itt	gt
1000fa8c:	3b04      	subgt	r3, #4
1000fa8e:	9307      	strgt	r3, [sp, #28]
1000fa90:	9b07      	ldr	r3, [sp, #28]
1000fa92:	f1a3 0302 	sub.w	r3, r3, #2
1000fa96:	bfcc      	ite	gt
1000fa98:	2500      	movgt	r5, #0
1000fa9a:	2501      	movle	r5, #1
1000fa9c:	2b03      	cmp	r3, #3
1000fa9e:	f200 8085 	bhi.w	1000fbac <_dtoa_r+0x30c>
1000faa2:	e8df f003 	tbb	[pc, r3]
1000faa6:	3b2e      	.short	0x3b2e
1000faa8:	5839      	.short	0x5839
1000faaa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
1000faae:	441d      	add	r5, r3
1000fab0:	f205 4332 	addw	r3, r5, #1074	; 0x432
1000fab4:	2b20      	cmp	r3, #32
1000fab6:	bfc1      	itttt	gt
1000fab8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
1000fabc:	fa08 f803 	lslgt.w	r8, r8, r3
1000fac0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
1000fac4:	fa26 f303 	lsrgt.w	r3, r6, r3
1000fac8:	bfd6      	itet	le
1000faca:	f1c3 0320 	rsble	r3, r3, #32
1000face:	ea48 0003 	orrgt.w	r0, r8, r3
1000fad2:	fa06 f003 	lslle.w	r0, r6, r3
1000fad6:	f7f0 fc5d 	bl	10000394 <__aeabi_ui2d>
1000fada:	2201      	movs	r2, #1
1000fadc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
1000fae0:	3d01      	subs	r5, #1
1000fae2:	920e      	str	r2, [sp, #56]	; 0x38
1000fae4:	e76f      	b.n	1000f9c6 <_dtoa_r+0x126>
1000fae6:	2301      	movs	r3, #1
1000fae8:	e7b3      	b.n	1000fa52 <_dtoa_r+0x1b2>
1000faea:	900c      	str	r0, [sp, #48]	; 0x30
1000faec:	e7b2      	b.n	1000fa54 <_dtoa_r+0x1b4>
1000faee:	9b05      	ldr	r3, [sp, #20]
1000faf0:	eba3 030b 	sub.w	r3, r3, fp
1000faf4:	9305      	str	r3, [sp, #20]
1000faf6:	f1cb 0300 	rsb	r3, fp, #0
1000fafa:	9308      	str	r3, [sp, #32]
1000fafc:	2300      	movs	r3, #0
1000fafe:	930b      	str	r3, [sp, #44]	; 0x2c
1000fb00:	e7bf      	b.n	1000fa82 <_dtoa_r+0x1e2>
1000fb02:	2300      	movs	r3, #0
1000fb04:	9309      	str	r3, [sp, #36]	; 0x24
1000fb06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000fb08:	2b00      	cmp	r3, #0
1000fb0a:	dc52      	bgt.n	1000fbb2 <_dtoa_r+0x312>
1000fb0c:	2301      	movs	r3, #1
1000fb0e:	9301      	str	r3, [sp, #4]
1000fb10:	9304      	str	r3, [sp, #16]
1000fb12:	461a      	mov	r2, r3
1000fb14:	920a      	str	r2, [sp, #40]	; 0x28
1000fb16:	e00b      	b.n	1000fb30 <_dtoa_r+0x290>
1000fb18:	2301      	movs	r3, #1
1000fb1a:	e7f3      	b.n	1000fb04 <_dtoa_r+0x264>
1000fb1c:	2300      	movs	r3, #0
1000fb1e:	9309      	str	r3, [sp, #36]	; 0x24
1000fb20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000fb22:	445b      	add	r3, fp
1000fb24:	9301      	str	r3, [sp, #4]
1000fb26:	3301      	adds	r3, #1
1000fb28:	2b01      	cmp	r3, #1
1000fb2a:	9304      	str	r3, [sp, #16]
1000fb2c:	bfb8      	it	lt
1000fb2e:	2301      	movlt	r3, #1
1000fb30:	69e0      	ldr	r0, [r4, #28]
1000fb32:	2100      	movs	r1, #0
1000fb34:	2204      	movs	r2, #4
1000fb36:	f102 0614 	add.w	r6, r2, #20
1000fb3a:	429e      	cmp	r6, r3
1000fb3c:	d93d      	bls.n	1000fbba <_dtoa_r+0x31a>
1000fb3e:	6041      	str	r1, [r0, #4]
1000fb40:	4620      	mov	r0, r4
1000fb42:	f000 fceb 	bl	1001051c <_Balloc>
1000fb46:	9000      	str	r0, [sp, #0]
1000fb48:	2800      	cmp	r0, #0
1000fb4a:	d139      	bne.n	1000fbc0 <_dtoa_r+0x320>
1000fb4c:	4b16      	ldr	r3, [pc, #88]	; (1000fba8 <_dtoa_r+0x308>)
1000fb4e:	4602      	mov	r2, r0
1000fb50:	f240 11af 	movw	r1, #431	; 0x1af
1000fb54:	e6bd      	b.n	1000f8d2 <_dtoa_r+0x32>
1000fb56:	2301      	movs	r3, #1
1000fb58:	e7e1      	b.n	1000fb1e <_dtoa_r+0x27e>
1000fb5a:	2501      	movs	r5, #1
1000fb5c:	2300      	movs	r3, #0
1000fb5e:	9307      	str	r3, [sp, #28]
1000fb60:	9509      	str	r5, [sp, #36]	; 0x24
1000fb62:	f04f 33ff 	mov.w	r3, #4294967295
1000fb66:	9301      	str	r3, [sp, #4]
1000fb68:	9304      	str	r3, [sp, #16]
1000fb6a:	2200      	movs	r2, #0
1000fb6c:	2312      	movs	r3, #18
1000fb6e:	e7d1      	b.n	1000fb14 <_dtoa_r+0x274>
1000fb70:	636f4361 	.word	0x636f4361
1000fb74:	3fd287a7 	.word	0x3fd287a7
1000fb78:	8b60c8b3 	.word	0x8b60c8b3
1000fb7c:	3fc68a28 	.word	0x3fc68a28
1000fb80:	509f79fb 	.word	0x509f79fb
1000fb84:	3fd34413 	.word	0x3fd34413
1000fb88:	100142d5 	.word	0x100142d5
1000fb8c:	100142ec 	.word	0x100142ec
1000fb90:	7ff00000 	.word	0x7ff00000
1000fb94:	100142d1 	.word	0x100142d1
1000fb98:	100142c8 	.word	0x100142c8
1000fb9c:	100142a5 	.word	0x100142a5
1000fba0:	3ff80000 	.word	0x3ff80000
1000fba4:	100143d8 	.word	0x100143d8
1000fba8:	10014344 	.word	0x10014344
1000fbac:	2301      	movs	r3, #1
1000fbae:	9309      	str	r3, [sp, #36]	; 0x24
1000fbb0:	e7d7      	b.n	1000fb62 <_dtoa_r+0x2c2>
1000fbb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000fbb4:	9301      	str	r3, [sp, #4]
1000fbb6:	9304      	str	r3, [sp, #16]
1000fbb8:	e7ba      	b.n	1000fb30 <_dtoa_r+0x290>
1000fbba:	3101      	adds	r1, #1
1000fbbc:	0052      	lsls	r2, r2, #1
1000fbbe:	e7ba      	b.n	1000fb36 <_dtoa_r+0x296>
1000fbc0:	69e3      	ldr	r3, [r4, #28]
1000fbc2:	9a00      	ldr	r2, [sp, #0]
1000fbc4:	601a      	str	r2, [r3, #0]
1000fbc6:	9b04      	ldr	r3, [sp, #16]
1000fbc8:	2b0e      	cmp	r3, #14
1000fbca:	f200 80a8 	bhi.w	1000fd1e <_dtoa_r+0x47e>
1000fbce:	2d00      	cmp	r5, #0
1000fbd0:	f000 80a5 	beq.w	1000fd1e <_dtoa_r+0x47e>
1000fbd4:	f1bb 0f00 	cmp.w	fp, #0
1000fbd8:	dd38      	ble.n	1000fc4c <_dtoa_r+0x3ac>
1000fbda:	4bc0      	ldr	r3, [pc, #768]	; (1000fedc <_dtoa_r+0x63c>)
1000fbdc:	f00b 020f 	and.w	r2, fp, #15
1000fbe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1000fbe4:	f41b 7f80 	tst.w	fp, #256	; 0x100
1000fbe8:	e9d3 6700 	ldrd	r6, r7, [r3]
1000fbec:	ea4f 182b 	mov.w	r8, fp, asr #4
1000fbf0:	d019      	beq.n	1000fc26 <_dtoa_r+0x386>
1000fbf2:	4bbb      	ldr	r3, [pc, #748]	; (1000fee0 <_dtoa_r+0x640>)
1000fbf4:	ec51 0b18 	vmov	r0, r1, d8
1000fbf8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1000fbfc:	f7f0 fd6e 	bl	100006dc <__aeabi_ddiv>
1000fc00:	e9cd 0102 	strd	r0, r1, [sp, #8]
1000fc04:	f008 080f 	and.w	r8, r8, #15
1000fc08:	2503      	movs	r5, #3
1000fc0a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 1000fee0 <_dtoa_r+0x640>
1000fc0e:	f1b8 0f00 	cmp.w	r8, #0
1000fc12:	d10a      	bne.n	1000fc2a <_dtoa_r+0x38a>
1000fc14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1000fc18:	4632      	mov	r2, r6
1000fc1a:	463b      	mov	r3, r7
1000fc1c:	f7f0 fd5e 	bl	100006dc <__aeabi_ddiv>
1000fc20:	e9cd 0102 	strd	r0, r1, [sp, #8]
1000fc24:	e02b      	b.n	1000fc7e <_dtoa_r+0x3de>
1000fc26:	2502      	movs	r5, #2
1000fc28:	e7ef      	b.n	1000fc0a <_dtoa_r+0x36a>
1000fc2a:	f018 0f01 	tst.w	r8, #1
1000fc2e:	d008      	beq.n	1000fc42 <_dtoa_r+0x3a2>
1000fc30:	4630      	mov	r0, r6
1000fc32:	4639      	mov	r1, r7
1000fc34:	e9d9 2300 	ldrd	r2, r3, [r9]
1000fc38:	f7f0 fc26 	bl	10000488 <__aeabi_dmul>
1000fc3c:	3501      	adds	r5, #1
1000fc3e:	4606      	mov	r6, r0
1000fc40:	460f      	mov	r7, r1
1000fc42:	ea4f 0868 	mov.w	r8, r8, asr #1
1000fc46:	f109 0908 	add.w	r9, r9, #8
1000fc4a:	e7e0      	b.n	1000fc0e <_dtoa_r+0x36e>
1000fc4c:	f000 809f 	beq.w	1000fd8e <_dtoa_r+0x4ee>
1000fc50:	f1cb 0600 	rsb	r6, fp, #0
1000fc54:	4ba1      	ldr	r3, [pc, #644]	; (1000fedc <_dtoa_r+0x63c>)
1000fc56:	4fa2      	ldr	r7, [pc, #648]	; (1000fee0 <_dtoa_r+0x640>)
1000fc58:	f006 020f 	and.w	r2, r6, #15
1000fc5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1000fc60:	e9d3 2300 	ldrd	r2, r3, [r3]
1000fc64:	ec51 0b18 	vmov	r0, r1, d8
1000fc68:	f7f0 fc0e 	bl	10000488 <__aeabi_dmul>
1000fc6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
1000fc70:	1136      	asrs	r6, r6, #4
1000fc72:	2300      	movs	r3, #0
1000fc74:	2502      	movs	r5, #2
1000fc76:	2e00      	cmp	r6, #0
1000fc78:	d17e      	bne.n	1000fd78 <_dtoa_r+0x4d8>
1000fc7a:	2b00      	cmp	r3, #0
1000fc7c:	d1d0      	bne.n	1000fc20 <_dtoa_r+0x380>
1000fc7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000fc80:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
1000fc84:	2b00      	cmp	r3, #0
1000fc86:	f000 8084 	beq.w	1000fd92 <_dtoa_r+0x4f2>
1000fc8a:	4b96      	ldr	r3, [pc, #600]	; (1000fee4 <_dtoa_r+0x644>)
1000fc8c:	2200      	movs	r2, #0
1000fc8e:	4640      	mov	r0, r8
1000fc90:	4649      	mov	r1, r9
1000fc92:	f7f0 fe6b 	bl	1000096c <__aeabi_dcmplt>
1000fc96:	2800      	cmp	r0, #0
1000fc98:	d07b      	beq.n	1000fd92 <_dtoa_r+0x4f2>
1000fc9a:	9b04      	ldr	r3, [sp, #16]
1000fc9c:	2b00      	cmp	r3, #0
1000fc9e:	d078      	beq.n	1000fd92 <_dtoa_r+0x4f2>
1000fca0:	9b01      	ldr	r3, [sp, #4]
1000fca2:	2b00      	cmp	r3, #0
1000fca4:	dd39      	ble.n	1000fd1a <_dtoa_r+0x47a>
1000fca6:	4b90      	ldr	r3, [pc, #576]	; (1000fee8 <_dtoa_r+0x648>)
1000fca8:	2200      	movs	r2, #0
1000fcaa:	4640      	mov	r0, r8
1000fcac:	4649      	mov	r1, r9
1000fcae:	f7f0 fbeb 	bl	10000488 <__aeabi_dmul>
1000fcb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
1000fcb6:	9e01      	ldr	r6, [sp, #4]
1000fcb8:	f10b 37ff 	add.w	r7, fp, #4294967295
1000fcbc:	3501      	adds	r5, #1
1000fcbe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
1000fcc2:	4628      	mov	r0, r5
1000fcc4:	f7f0 fb76 	bl	100003b4 <__aeabi_i2d>
1000fcc8:	4642      	mov	r2, r8
1000fcca:	464b      	mov	r3, r9
1000fccc:	f7f0 fbdc 	bl	10000488 <__aeabi_dmul>
1000fcd0:	4b86      	ldr	r3, [pc, #536]	; (1000feec <_dtoa_r+0x64c>)
1000fcd2:	2200      	movs	r2, #0
1000fcd4:	f7f0 fa22 	bl	1000011c <__adddf3>
1000fcd8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
1000fcdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
1000fce0:	9303      	str	r3, [sp, #12]
1000fce2:	2e00      	cmp	r6, #0
1000fce4:	d158      	bne.n	1000fd98 <_dtoa_r+0x4f8>
1000fce6:	4b82      	ldr	r3, [pc, #520]	; (1000fef0 <_dtoa_r+0x650>)
1000fce8:	2200      	movs	r2, #0
1000fcea:	4640      	mov	r0, r8
1000fcec:	4649      	mov	r1, r9
1000fcee:	f7f0 fa13 	bl	10000118 <__aeabi_dsub>
1000fcf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1000fcf6:	4680      	mov	r8, r0
1000fcf8:	4689      	mov	r9, r1
1000fcfa:	f7f0 fe55 	bl	100009a8 <__aeabi_dcmpgt>
1000fcfe:	2800      	cmp	r0, #0
1000fd00:	f040 8296 	bne.w	10010230 <_dtoa_r+0x990>
1000fd04:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
1000fd08:	4640      	mov	r0, r8
1000fd0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1000fd0e:	4649      	mov	r1, r9
1000fd10:	f7f0 fe2c 	bl	1000096c <__aeabi_dcmplt>
1000fd14:	2800      	cmp	r0, #0
1000fd16:	f040 8289 	bne.w	1001022c <_dtoa_r+0x98c>
1000fd1a:	ed8d 8b02 	vstr	d8, [sp, #8]
1000fd1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
1000fd20:	2b00      	cmp	r3, #0
1000fd22:	f2c0 814e 	blt.w	1000ffc2 <_dtoa_r+0x722>
1000fd26:	f1bb 0f0e 	cmp.w	fp, #14
1000fd2a:	f300 814a 	bgt.w	1000ffc2 <_dtoa_r+0x722>
1000fd2e:	4b6b      	ldr	r3, [pc, #428]	; (1000fedc <_dtoa_r+0x63c>)
1000fd30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
1000fd34:	e9d3 8900 	ldrd	r8, r9, [r3]
1000fd38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000fd3a:	2b00      	cmp	r3, #0
1000fd3c:	f280 80dc 	bge.w	1000fef8 <_dtoa_r+0x658>
1000fd40:	9b04      	ldr	r3, [sp, #16]
1000fd42:	2b00      	cmp	r3, #0
1000fd44:	f300 80d8 	bgt.w	1000fef8 <_dtoa_r+0x658>
1000fd48:	f040 826f 	bne.w	1001022a <_dtoa_r+0x98a>
1000fd4c:	4b68      	ldr	r3, [pc, #416]	; (1000fef0 <_dtoa_r+0x650>)
1000fd4e:	2200      	movs	r2, #0
1000fd50:	4640      	mov	r0, r8
1000fd52:	4649      	mov	r1, r9
1000fd54:	f7f0 fb98 	bl	10000488 <__aeabi_dmul>
1000fd58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1000fd5c:	f7f0 fe1a 	bl	10000994 <__aeabi_dcmpge>
1000fd60:	9e04      	ldr	r6, [sp, #16]
1000fd62:	4637      	mov	r7, r6
1000fd64:	2800      	cmp	r0, #0
1000fd66:	f040 8245 	bne.w	100101f4 <_dtoa_r+0x954>
1000fd6a:	9d00      	ldr	r5, [sp, #0]
1000fd6c:	2331      	movs	r3, #49	; 0x31
1000fd6e:	f805 3b01 	strb.w	r3, [r5], #1
1000fd72:	f10b 0b01 	add.w	fp, fp, #1
1000fd76:	e241      	b.n	100101fc <_dtoa_r+0x95c>
1000fd78:	07f2      	lsls	r2, r6, #31
1000fd7a:	d505      	bpl.n	1000fd88 <_dtoa_r+0x4e8>
1000fd7c:	e9d7 2300 	ldrd	r2, r3, [r7]
1000fd80:	f7f0 fb82 	bl	10000488 <__aeabi_dmul>
1000fd84:	3501      	adds	r5, #1
1000fd86:	2301      	movs	r3, #1
1000fd88:	1076      	asrs	r6, r6, #1
1000fd8a:	3708      	adds	r7, #8
1000fd8c:	e773      	b.n	1000fc76 <_dtoa_r+0x3d6>
1000fd8e:	2502      	movs	r5, #2
1000fd90:	e775      	b.n	1000fc7e <_dtoa_r+0x3de>
1000fd92:	9e04      	ldr	r6, [sp, #16]
1000fd94:	465f      	mov	r7, fp
1000fd96:	e792      	b.n	1000fcbe <_dtoa_r+0x41e>
1000fd98:	9900      	ldr	r1, [sp, #0]
1000fd9a:	4b50      	ldr	r3, [pc, #320]	; (1000fedc <_dtoa_r+0x63c>)
1000fd9c:	ed9d 7b02 	vldr	d7, [sp, #8]
1000fda0:	4431      	add	r1, r6
1000fda2:	9102      	str	r1, [sp, #8]
1000fda4:	9909      	ldr	r1, [sp, #36]	; 0x24
1000fda6:	eeb0 9a47 	vmov.f32	s18, s14
1000fdaa:	eef0 9a67 	vmov.f32	s19, s15
1000fdae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
1000fdb2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
1000fdb6:	2900      	cmp	r1, #0
1000fdb8:	d044      	beq.n	1000fe44 <_dtoa_r+0x5a4>
1000fdba:	494e      	ldr	r1, [pc, #312]	; (1000fef4 <_dtoa_r+0x654>)
1000fdbc:	2000      	movs	r0, #0
1000fdbe:	f7f0 fc8d 	bl	100006dc <__aeabi_ddiv>
1000fdc2:	ec53 2b19 	vmov	r2, r3, d9
1000fdc6:	f7f0 f9a7 	bl	10000118 <__aeabi_dsub>
1000fdca:	9d00      	ldr	r5, [sp, #0]
1000fdcc:	ec41 0b19 	vmov	d9, r0, r1
1000fdd0:	4649      	mov	r1, r9
1000fdd2:	4640      	mov	r0, r8
1000fdd4:	f7f0 fe08 	bl	100009e8 <__aeabi_d2iz>
1000fdd8:	4606      	mov	r6, r0
1000fdda:	f7f0 faeb 	bl	100003b4 <__aeabi_i2d>
1000fdde:	4602      	mov	r2, r0
1000fde0:	460b      	mov	r3, r1
1000fde2:	4640      	mov	r0, r8
1000fde4:	4649      	mov	r1, r9
1000fde6:	f7f0 f997 	bl	10000118 <__aeabi_dsub>
1000fdea:	3630      	adds	r6, #48	; 0x30
1000fdec:	f805 6b01 	strb.w	r6, [r5], #1
1000fdf0:	ec53 2b19 	vmov	r2, r3, d9
1000fdf4:	4680      	mov	r8, r0
1000fdf6:	4689      	mov	r9, r1
1000fdf8:	f7f0 fdb8 	bl	1000096c <__aeabi_dcmplt>
1000fdfc:	2800      	cmp	r0, #0
1000fdfe:	d164      	bne.n	1000feca <_dtoa_r+0x62a>
1000fe00:	4642      	mov	r2, r8
1000fe02:	464b      	mov	r3, r9
1000fe04:	4937      	ldr	r1, [pc, #220]	; (1000fee4 <_dtoa_r+0x644>)
1000fe06:	2000      	movs	r0, #0
1000fe08:	f7f0 f986 	bl	10000118 <__aeabi_dsub>
1000fe0c:	ec53 2b19 	vmov	r2, r3, d9
1000fe10:	f7f0 fdac 	bl	1000096c <__aeabi_dcmplt>
1000fe14:	2800      	cmp	r0, #0
1000fe16:	f040 80b6 	bne.w	1000ff86 <_dtoa_r+0x6e6>
1000fe1a:	9b02      	ldr	r3, [sp, #8]
1000fe1c:	429d      	cmp	r5, r3
1000fe1e:	f43f af7c 	beq.w	1000fd1a <_dtoa_r+0x47a>
1000fe22:	4b31      	ldr	r3, [pc, #196]	; (1000fee8 <_dtoa_r+0x648>)
1000fe24:	ec51 0b19 	vmov	r0, r1, d9
1000fe28:	2200      	movs	r2, #0
1000fe2a:	f7f0 fb2d 	bl	10000488 <__aeabi_dmul>
1000fe2e:	4b2e      	ldr	r3, [pc, #184]	; (1000fee8 <_dtoa_r+0x648>)
1000fe30:	ec41 0b19 	vmov	d9, r0, r1
1000fe34:	2200      	movs	r2, #0
1000fe36:	4640      	mov	r0, r8
1000fe38:	4649      	mov	r1, r9
1000fe3a:	f7f0 fb25 	bl	10000488 <__aeabi_dmul>
1000fe3e:	4680      	mov	r8, r0
1000fe40:	4689      	mov	r9, r1
1000fe42:	e7c5      	b.n	1000fdd0 <_dtoa_r+0x530>
1000fe44:	ec51 0b17 	vmov	r0, r1, d7
1000fe48:	f7f0 fb1e 	bl	10000488 <__aeabi_dmul>
1000fe4c:	9b02      	ldr	r3, [sp, #8]
1000fe4e:	9d00      	ldr	r5, [sp, #0]
1000fe50:	930f      	str	r3, [sp, #60]	; 0x3c
1000fe52:	ec41 0b19 	vmov	d9, r0, r1
1000fe56:	4649      	mov	r1, r9
1000fe58:	4640      	mov	r0, r8
1000fe5a:	f7f0 fdc5 	bl	100009e8 <__aeabi_d2iz>
1000fe5e:	4606      	mov	r6, r0
1000fe60:	f7f0 faa8 	bl	100003b4 <__aeabi_i2d>
1000fe64:	3630      	adds	r6, #48	; 0x30
1000fe66:	4602      	mov	r2, r0
1000fe68:	460b      	mov	r3, r1
1000fe6a:	4640      	mov	r0, r8
1000fe6c:	4649      	mov	r1, r9
1000fe6e:	f7f0 f953 	bl	10000118 <__aeabi_dsub>
1000fe72:	f805 6b01 	strb.w	r6, [r5], #1
1000fe76:	9b02      	ldr	r3, [sp, #8]
1000fe78:	429d      	cmp	r5, r3
1000fe7a:	4680      	mov	r8, r0
1000fe7c:	4689      	mov	r9, r1
1000fe7e:	f04f 0200 	mov.w	r2, #0
1000fe82:	d124      	bne.n	1000fece <_dtoa_r+0x62e>
1000fe84:	4b1b      	ldr	r3, [pc, #108]	; (1000fef4 <_dtoa_r+0x654>)
1000fe86:	ec51 0b19 	vmov	r0, r1, d9
1000fe8a:	f7f0 f947 	bl	1000011c <__adddf3>
1000fe8e:	4602      	mov	r2, r0
1000fe90:	460b      	mov	r3, r1
1000fe92:	4640      	mov	r0, r8
1000fe94:	4649      	mov	r1, r9
1000fe96:	f7f0 fd87 	bl	100009a8 <__aeabi_dcmpgt>
1000fe9a:	2800      	cmp	r0, #0
1000fe9c:	d173      	bne.n	1000ff86 <_dtoa_r+0x6e6>
1000fe9e:	ec53 2b19 	vmov	r2, r3, d9
1000fea2:	4914      	ldr	r1, [pc, #80]	; (1000fef4 <_dtoa_r+0x654>)
1000fea4:	2000      	movs	r0, #0
1000fea6:	f7f0 f937 	bl	10000118 <__aeabi_dsub>
1000feaa:	4602      	mov	r2, r0
1000feac:	460b      	mov	r3, r1
1000feae:	4640      	mov	r0, r8
1000feb0:	4649      	mov	r1, r9
1000feb2:	f7f0 fd5b 	bl	1000096c <__aeabi_dcmplt>
1000feb6:	2800      	cmp	r0, #0
1000feb8:	f43f af2f 	beq.w	1000fd1a <_dtoa_r+0x47a>
1000febc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
1000febe:	1e6b      	subs	r3, r5, #1
1000fec0:	930f      	str	r3, [sp, #60]	; 0x3c
1000fec2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
1000fec6:	2b30      	cmp	r3, #48	; 0x30
1000fec8:	d0f8      	beq.n	1000febc <_dtoa_r+0x61c>
1000feca:	46bb      	mov	fp, r7
1000fecc:	e04a      	b.n	1000ff64 <_dtoa_r+0x6c4>
1000fece:	4b06      	ldr	r3, [pc, #24]	; (1000fee8 <_dtoa_r+0x648>)
1000fed0:	f7f0 fada 	bl	10000488 <__aeabi_dmul>
1000fed4:	4680      	mov	r8, r0
1000fed6:	4689      	mov	r9, r1
1000fed8:	e7bd      	b.n	1000fe56 <_dtoa_r+0x5b6>
1000feda:	bf00      	nop
1000fedc:	100143d8 	.word	0x100143d8
1000fee0:	100143b0 	.word	0x100143b0
1000fee4:	3ff00000 	.word	0x3ff00000
1000fee8:	40240000 	.word	0x40240000
1000feec:	401c0000 	.word	0x401c0000
1000fef0:	40140000 	.word	0x40140000
1000fef4:	3fe00000 	.word	0x3fe00000
1000fef8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
1000fefc:	9d00      	ldr	r5, [sp, #0]
1000fefe:	4642      	mov	r2, r8
1000ff00:	464b      	mov	r3, r9
1000ff02:	4630      	mov	r0, r6
1000ff04:	4639      	mov	r1, r7
1000ff06:	f7f0 fbe9 	bl	100006dc <__aeabi_ddiv>
1000ff0a:	f7f0 fd6d 	bl	100009e8 <__aeabi_d2iz>
1000ff0e:	9001      	str	r0, [sp, #4]
1000ff10:	f7f0 fa50 	bl	100003b4 <__aeabi_i2d>
1000ff14:	4642      	mov	r2, r8
1000ff16:	464b      	mov	r3, r9
1000ff18:	f7f0 fab6 	bl	10000488 <__aeabi_dmul>
1000ff1c:	4602      	mov	r2, r0
1000ff1e:	460b      	mov	r3, r1
1000ff20:	4630      	mov	r0, r6
1000ff22:	4639      	mov	r1, r7
1000ff24:	f7f0 f8f8 	bl	10000118 <__aeabi_dsub>
1000ff28:	9e01      	ldr	r6, [sp, #4]
1000ff2a:	9f04      	ldr	r7, [sp, #16]
1000ff2c:	3630      	adds	r6, #48	; 0x30
1000ff2e:	f805 6b01 	strb.w	r6, [r5], #1
1000ff32:	9e00      	ldr	r6, [sp, #0]
1000ff34:	1bae      	subs	r6, r5, r6
1000ff36:	42b7      	cmp	r7, r6
1000ff38:	4602      	mov	r2, r0
1000ff3a:	460b      	mov	r3, r1
1000ff3c:	d134      	bne.n	1000ffa8 <_dtoa_r+0x708>
1000ff3e:	f7f0 f8ed 	bl	1000011c <__adddf3>
1000ff42:	4642      	mov	r2, r8
1000ff44:	464b      	mov	r3, r9
1000ff46:	4606      	mov	r6, r0
1000ff48:	460f      	mov	r7, r1
1000ff4a:	f7f0 fd2d 	bl	100009a8 <__aeabi_dcmpgt>
1000ff4e:	b9c8      	cbnz	r0, 1000ff84 <_dtoa_r+0x6e4>
1000ff50:	4642      	mov	r2, r8
1000ff52:	464b      	mov	r3, r9
1000ff54:	4630      	mov	r0, r6
1000ff56:	4639      	mov	r1, r7
1000ff58:	f7f0 fcfe 	bl	10000958 <__aeabi_dcmpeq>
1000ff5c:	b110      	cbz	r0, 1000ff64 <_dtoa_r+0x6c4>
1000ff5e:	9b01      	ldr	r3, [sp, #4]
1000ff60:	07db      	lsls	r3, r3, #31
1000ff62:	d40f      	bmi.n	1000ff84 <_dtoa_r+0x6e4>
1000ff64:	4651      	mov	r1, sl
1000ff66:	4620      	mov	r0, r4
1000ff68:	f000 fb18 	bl	1001059c <_Bfree>
1000ff6c:	2300      	movs	r3, #0
1000ff6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000ff70:	702b      	strb	r3, [r5, #0]
1000ff72:	f10b 0301 	add.w	r3, fp, #1
1000ff76:	6013      	str	r3, [r2, #0]
1000ff78:	9b21      	ldr	r3, [sp, #132]	; 0x84
1000ff7a:	2b00      	cmp	r3, #0
1000ff7c:	f43f ace2 	beq.w	1000f944 <_dtoa_r+0xa4>
1000ff80:	601d      	str	r5, [r3, #0]
1000ff82:	e4df      	b.n	1000f944 <_dtoa_r+0xa4>
1000ff84:	465f      	mov	r7, fp
1000ff86:	462b      	mov	r3, r5
1000ff88:	461d      	mov	r5, r3
1000ff8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1000ff8e:	2a39      	cmp	r2, #57	; 0x39
1000ff90:	d106      	bne.n	1000ffa0 <_dtoa_r+0x700>
1000ff92:	9a00      	ldr	r2, [sp, #0]
1000ff94:	429a      	cmp	r2, r3
1000ff96:	d1f7      	bne.n	1000ff88 <_dtoa_r+0x6e8>
1000ff98:	9900      	ldr	r1, [sp, #0]
1000ff9a:	2230      	movs	r2, #48	; 0x30
1000ff9c:	3701      	adds	r7, #1
1000ff9e:	700a      	strb	r2, [r1, #0]
1000ffa0:	781a      	ldrb	r2, [r3, #0]
1000ffa2:	3201      	adds	r2, #1
1000ffa4:	701a      	strb	r2, [r3, #0]
1000ffa6:	e790      	b.n	1000feca <_dtoa_r+0x62a>
1000ffa8:	4ba3      	ldr	r3, [pc, #652]	; (10010238 <_dtoa_r+0x998>)
1000ffaa:	2200      	movs	r2, #0
1000ffac:	f7f0 fa6c 	bl	10000488 <__aeabi_dmul>
1000ffb0:	2200      	movs	r2, #0
1000ffb2:	2300      	movs	r3, #0
1000ffb4:	4606      	mov	r6, r0
1000ffb6:	460f      	mov	r7, r1
1000ffb8:	f7f0 fcce 	bl	10000958 <__aeabi_dcmpeq>
1000ffbc:	2800      	cmp	r0, #0
1000ffbe:	d09e      	beq.n	1000fefe <_dtoa_r+0x65e>
1000ffc0:	e7d0      	b.n	1000ff64 <_dtoa_r+0x6c4>
1000ffc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000ffc4:	2a00      	cmp	r2, #0
1000ffc6:	f000 80ca 	beq.w	1001015e <_dtoa_r+0x8be>
1000ffca:	9a07      	ldr	r2, [sp, #28]
1000ffcc:	2a01      	cmp	r2, #1
1000ffce:	f300 80ad 	bgt.w	1001012c <_dtoa_r+0x88c>
1000ffd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000ffd4:	2a00      	cmp	r2, #0
1000ffd6:	f000 80a5 	beq.w	10010124 <_dtoa_r+0x884>
1000ffda:	f203 4333 	addw	r3, r3, #1075	; 0x433
1000ffde:	9e08      	ldr	r6, [sp, #32]
1000ffe0:	9d05      	ldr	r5, [sp, #20]
1000ffe2:	9a05      	ldr	r2, [sp, #20]
1000ffe4:	441a      	add	r2, r3
1000ffe6:	9205      	str	r2, [sp, #20]
1000ffe8:	9a06      	ldr	r2, [sp, #24]
1000ffea:	2101      	movs	r1, #1
1000ffec:	441a      	add	r2, r3
1000ffee:	4620      	mov	r0, r4
1000fff0:	9206      	str	r2, [sp, #24]
1000fff2:	f000 fb89 	bl	10010708 <__i2b>
1000fff6:	4607      	mov	r7, r0
1000fff8:	b165      	cbz	r5, 10010014 <_dtoa_r+0x774>
1000fffa:	9b06      	ldr	r3, [sp, #24]
1000fffc:	2b00      	cmp	r3, #0
1000fffe:	dd09      	ble.n	10010014 <_dtoa_r+0x774>
10010000:	42ab      	cmp	r3, r5
10010002:	9a05      	ldr	r2, [sp, #20]
10010004:	bfa8      	it	ge
10010006:	462b      	movge	r3, r5
10010008:	1ad2      	subs	r2, r2, r3
1001000a:	9205      	str	r2, [sp, #20]
1001000c:	9a06      	ldr	r2, [sp, #24]
1001000e:	1aed      	subs	r5, r5, r3
10010010:	1ad3      	subs	r3, r2, r3
10010012:	9306      	str	r3, [sp, #24]
10010014:	9b08      	ldr	r3, [sp, #32]
10010016:	b1f3      	cbz	r3, 10010056 <_dtoa_r+0x7b6>
10010018:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001001a:	2b00      	cmp	r3, #0
1001001c:	f000 80a3 	beq.w	10010166 <_dtoa_r+0x8c6>
10010020:	2e00      	cmp	r6, #0
10010022:	dd10      	ble.n	10010046 <_dtoa_r+0x7a6>
10010024:	4639      	mov	r1, r7
10010026:	4632      	mov	r2, r6
10010028:	4620      	mov	r0, r4
1001002a:	f000 fc2d 	bl	10010888 <__pow5mult>
1001002e:	4652      	mov	r2, sl
10010030:	4601      	mov	r1, r0
10010032:	4607      	mov	r7, r0
10010034:	4620      	mov	r0, r4
10010036:	f000 fb7d 	bl	10010734 <__multiply>
1001003a:	4651      	mov	r1, sl
1001003c:	4680      	mov	r8, r0
1001003e:	4620      	mov	r0, r4
10010040:	f000 faac 	bl	1001059c <_Bfree>
10010044:	46c2      	mov	sl, r8
10010046:	9b08      	ldr	r3, [sp, #32]
10010048:	1b9a      	subs	r2, r3, r6
1001004a:	d004      	beq.n	10010056 <_dtoa_r+0x7b6>
1001004c:	4651      	mov	r1, sl
1001004e:	4620      	mov	r0, r4
10010050:	f000 fc1a 	bl	10010888 <__pow5mult>
10010054:	4682      	mov	sl, r0
10010056:	2101      	movs	r1, #1
10010058:	4620      	mov	r0, r4
1001005a:	f000 fb55 	bl	10010708 <__i2b>
1001005e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10010060:	2b00      	cmp	r3, #0
10010062:	4606      	mov	r6, r0
10010064:	f340 8081 	ble.w	1001016a <_dtoa_r+0x8ca>
10010068:	461a      	mov	r2, r3
1001006a:	4601      	mov	r1, r0
1001006c:	4620      	mov	r0, r4
1001006e:	f000 fc0b 	bl	10010888 <__pow5mult>
10010072:	9b07      	ldr	r3, [sp, #28]
10010074:	2b01      	cmp	r3, #1
10010076:	4606      	mov	r6, r0
10010078:	dd7a      	ble.n	10010170 <_dtoa_r+0x8d0>
1001007a:	f04f 0800 	mov.w	r8, #0
1001007e:	6933      	ldr	r3, [r6, #16]
10010080:	eb06 0383 	add.w	r3, r6, r3, lsl #2
10010084:	6918      	ldr	r0, [r3, #16]
10010086:	f000 faf1 	bl	1001066c <__hi0bits>
1001008a:	f1c0 0020 	rsb	r0, r0, #32
1001008e:	9b06      	ldr	r3, [sp, #24]
10010090:	4418      	add	r0, r3
10010092:	f010 001f 	ands.w	r0, r0, #31
10010096:	f000 8094 	beq.w	100101c2 <_dtoa_r+0x922>
1001009a:	f1c0 0320 	rsb	r3, r0, #32
1001009e:	2b04      	cmp	r3, #4
100100a0:	f340 8085 	ble.w	100101ae <_dtoa_r+0x90e>
100100a4:	9b05      	ldr	r3, [sp, #20]
100100a6:	f1c0 001c 	rsb	r0, r0, #28
100100aa:	4403      	add	r3, r0
100100ac:	9305      	str	r3, [sp, #20]
100100ae:	9b06      	ldr	r3, [sp, #24]
100100b0:	4403      	add	r3, r0
100100b2:	4405      	add	r5, r0
100100b4:	9306      	str	r3, [sp, #24]
100100b6:	9b05      	ldr	r3, [sp, #20]
100100b8:	2b00      	cmp	r3, #0
100100ba:	dd05      	ble.n	100100c8 <_dtoa_r+0x828>
100100bc:	4651      	mov	r1, sl
100100be:	461a      	mov	r2, r3
100100c0:	4620      	mov	r0, r4
100100c2:	f000 fc3b 	bl	1001093c <__lshift>
100100c6:	4682      	mov	sl, r0
100100c8:	9b06      	ldr	r3, [sp, #24]
100100ca:	2b00      	cmp	r3, #0
100100cc:	dd05      	ble.n	100100da <_dtoa_r+0x83a>
100100ce:	4631      	mov	r1, r6
100100d0:	461a      	mov	r2, r3
100100d2:	4620      	mov	r0, r4
100100d4:	f000 fc32 	bl	1001093c <__lshift>
100100d8:	4606      	mov	r6, r0
100100da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100100dc:	2b00      	cmp	r3, #0
100100de:	d072      	beq.n	100101c6 <_dtoa_r+0x926>
100100e0:	4631      	mov	r1, r6
100100e2:	4650      	mov	r0, sl
100100e4:	f000 fc96 	bl	10010a14 <__mcmp>
100100e8:	2800      	cmp	r0, #0
100100ea:	da6c      	bge.n	100101c6 <_dtoa_r+0x926>
100100ec:	2300      	movs	r3, #0
100100ee:	4651      	mov	r1, sl
100100f0:	220a      	movs	r2, #10
100100f2:	4620      	mov	r0, r4
100100f4:	f000 fa74 	bl	100105e0 <__multadd>
100100f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
100100fa:	f10b 3bff 	add.w	fp, fp, #4294967295
100100fe:	4682      	mov	sl, r0
10010100:	2b00      	cmp	r3, #0
10010102:	f000 81b0 	beq.w	10010466 <_dtoa_r+0xbc6>
10010106:	2300      	movs	r3, #0
10010108:	4639      	mov	r1, r7
1001010a:	220a      	movs	r2, #10
1001010c:	4620      	mov	r0, r4
1001010e:	f000 fa67 	bl	100105e0 <__multadd>
10010112:	9b01      	ldr	r3, [sp, #4]
10010114:	2b00      	cmp	r3, #0
10010116:	4607      	mov	r7, r0
10010118:	f300 8096 	bgt.w	10010248 <_dtoa_r+0x9a8>
1001011c:	9b07      	ldr	r3, [sp, #28]
1001011e:	2b02      	cmp	r3, #2
10010120:	dc59      	bgt.n	100101d6 <_dtoa_r+0x936>
10010122:	e091      	b.n	10010248 <_dtoa_r+0x9a8>
10010124:	9b10      	ldr	r3, [sp, #64]	; 0x40
10010126:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
1001012a:	e758      	b.n	1000ffde <_dtoa_r+0x73e>
1001012c:	9b04      	ldr	r3, [sp, #16]
1001012e:	1e5e      	subs	r6, r3, #1
10010130:	9b08      	ldr	r3, [sp, #32]
10010132:	42b3      	cmp	r3, r6
10010134:	bfbf      	itttt	lt
10010136:	9b08      	ldrlt	r3, [sp, #32]
10010138:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
1001013a:	9608      	strlt	r6, [sp, #32]
1001013c:	1af3      	sublt	r3, r6, r3
1001013e:	bfb4      	ite	lt
10010140:	18d2      	addlt	r2, r2, r3
10010142:	1b9e      	subge	r6, r3, r6
10010144:	9b04      	ldr	r3, [sp, #16]
10010146:	bfbc      	itt	lt
10010148:	920b      	strlt	r2, [sp, #44]	; 0x2c
1001014a:	2600      	movlt	r6, #0
1001014c:	2b00      	cmp	r3, #0
1001014e:	bfb7      	itett	lt
10010150:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
10010154:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
10010158:	1a9d      	sublt	r5, r3, r2
1001015a:	2300      	movlt	r3, #0
1001015c:	e741      	b.n	1000ffe2 <_dtoa_r+0x742>
1001015e:	9e08      	ldr	r6, [sp, #32]
10010160:	9d05      	ldr	r5, [sp, #20]
10010162:	9f09      	ldr	r7, [sp, #36]	; 0x24
10010164:	e748      	b.n	1000fff8 <_dtoa_r+0x758>
10010166:	9a08      	ldr	r2, [sp, #32]
10010168:	e770      	b.n	1001004c <_dtoa_r+0x7ac>
1001016a:	9b07      	ldr	r3, [sp, #28]
1001016c:	2b01      	cmp	r3, #1
1001016e:	dc19      	bgt.n	100101a4 <_dtoa_r+0x904>
10010170:	9b02      	ldr	r3, [sp, #8]
10010172:	b9bb      	cbnz	r3, 100101a4 <_dtoa_r+0x904>
10010174:	9b03      	ldr	r3, [sp, #12]
10010176:	f3c3 0313 	ubfx	r3, r3, #0, #20
1001017a:	b99b      	cbnz	r3, 100101a4 <_dtoa_r+0x904>
1001017c:	9b03      	ldr	r3, [sp, #12]
1001017e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
10010182:	0d1b      	lsrs	r3, r3, #20
10010184:	051b      	lsls	r3, r3, #20
10010186:	b183      	cbz	r3, 100101aa <_dtoa_r+0x90a>
10010188:	9b05      	ldr	r3, [sp, #20]
1001018a:	3301      	adds	r3, #1
1001018c:	9305      	str	r3, [sp, #20]
1001018e:	9b06      	ldr	r3, [sp, #24]
10010190:	3301      	adds	r3, #1
10010192:	9306      	str	r3, [sp, #24]
10010194:	f04f 0801 	mov.w	r8, #1
10010198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1001019a:	2b00      	cmp	r3, #0
1001019c:	f47f af6f 	bne.w	1001007e <_dtoa_r+0x7de>
100101a0:	2001      	movs	r0, #1
100101a2:	e774      	b.n	1001008e <_dtoa_r+0x7ee>
100101a4:	f04f 0800 	mov.w	r8, #0
100101a8:	e7f6      	b.n	10010198 <_dtoa_r+0x8f8>
100101aa:	4698      	mov	r8, r3
100101ac:	e7f4      	b.n	10010198 <_dtoa_r+0x8f8>
100101ae:	d082      	beq.n	100100b6 <_dtoa_r+0x816>
100101b0:	9a05      	ldr	r2, [sp, #20]
100101b2:	331c      	adds	r3, #28
100101b4:	441a      	add	r2, r3
100101b6:	9205      	str	r2, [sp, #20]
100101b8:	9a06      	ldr	r2, [sp, #24]
100101ba:	441a      	add	r2, r3
100101bc:	441d      	add	r5, r3
100101be:	9206      	str	r2, [sp, #24]
100101c0:	e779      	b.n	100100b6 <_dtoa_r+0x816>
100101c2:	4603      	mov	r3, r0
100101c4:	e7f4      	b.n	100101b0 <_dtoa_r+0x910>
100101c6:	9b04      	ldr	r3, [sp, #16]
100101c8:	2b00      	cmp	r3, #0
100101ca:	dc37      	bgt.n	1001023c <_dtoa_r+0x99c>
100101cc:	9b07      	ldr	r3, [sp, #28]
100101ce:	2b02      	cmp	r3, #2
100101d0:	dd34      	ble.n	1001023c <_dtoa_r+0x99c>
100101d2:	9b04      	ldr	r3, [sp, #16]
100101d4:	9301      	str	r3, [sp, #4]
100101d6:	9b01      	ldr	r3, [sp, #4]
100101d8:	b963      	cbnz	r3, 100101f4 <_dtoa_r+0x954>
100101da:	4631      	mov	r1, r6
100101dc:	2205      	movs	r2, #5
100101de:	4620      	mov	r0, r4
100101e0:	f000 f9fe 	bl	100105e0 <__multadd>
100101e4:	4601      	mov	r1, r0
100101e6:	4606      	mov	r6, r0
100101e8:	4650      	mov	r0, sl
100101ea:	f000 fc13 	bl	10010a14 <__mcmp>
100101ee:	2800      	cmp	r0, #0
100101f0:	f73f adbb 	bgt.w	1000fd6a <_dtoa_r+0x4ca>
100101f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100101f6:	9d00      	ldr	r5, [sp, #0]
100101f8:	ea6f 0b03 	mvn.w	fp, r3
100101fc:	f04f 0800 	mov.w	r8, #0
10010200:	4631      	mov	r1, r6
10010202:	4620      	mov	r0, r4
10010204:	f000 f9ca 	bl	1001059c <_Bfree>
10010208:	2f00      	cmp	r7, #0
1001020a:	f43f aeab 	beq.w	1000ff64 <_dtoa_r+0x6c4>
1001020e:	f1b8 0f00 	cmp.w	r8, #0
10010212:	d005      	beq.n	10010220 <_dtoa_r+0x980>
10010214:	45b8      	cmp	r8, r7
10010216:	d003      	beq.n	10010220 <_dtoa_r+0x980>
10010218:	4641      	mov	r1, r8
1001021a:	4620      	mov	r0, r4
1001021c:	f000 f9be 	bl	1001059c <_Bfree>
10010220:	4639      	mov	r1, r7
10010222:	4620      	mov	r0, r4
10010224:	f000 f9ba 	bl	1001059c <_Bfree>
10010228:	e69c      	b.n	1000ff64 <_dtoa_r+0x6c4>
1001022a:	2600      	movs	r6, #0
1001022c:	4637      	mov	r7, r6
1001022e:	e7e1      	b.n	100101f4 <_dtoa_r+0x954>
10010230:	46bb      	mov	fp, r7
10010232:	4637      	mov	r7, r6
10010234:	e599      	b.n	1000fd6a <_dtoa_r+0x4ca>
10010236:	bf00      	nop
10010238:	40240000 	.word	0x40240000
1001023c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001023e:	2b00      	cmp	r3, #0
10010240:	f000 80c8 	beq.w	100103d4 <_dtoa_r+0xb34>
10010244:	9b04      	ldr	r3, [sp, #16]
10010246:	9301      	str	r3, [sp, #4]
10010248:	2d00      	cmp	r5, #0
1001024a:	dd05      	ble.n	10010258 <_dtoa_r+0x9b8>
1001024c:	4639      	mov	r1, r7
1001024e:	462a      	mov	r2, r5
10010250:	4620      	mov	r0, r4
10010252:	f000 fb73 	bl	1001093c <__lshift>
10010256:	4607      	mov	r7, r0
10010258:	f1b8 0f00 	cmp.w	r8, #0
1001025c:	d05b      	beq.n	10010316 <_dtoa_r+0xa76>
1001025e:	6879      	ldr	r1, [r7, #4]
10010260:	4620      	mov	r0, r4
10010262:	f000 f95b 	bl	1001051c <_Balloc>
10010266:	4605      	mov	r5, r0
10010268:	b928      	cbnz	r0, 10010276 <_dtoa_r+0x9d6>
1001026a:	4b83      	ldr	r3, [pc, #524]	; (10010478 <_dtoa_r+0xbd8>)
1001026c:	4602      	mov	r2, r0
1001026e:	f240 21ef 	movw	r1, #751	; 0x2ef
10010272:	f7ff bb2e 	b.w	1000f8d2 <_dtoa_r+0x32>
10010276:	693a      	ldr	r2, [r7, #16]
10010278:	3202      	adds	r2, #2
1001027a:	0092      	lsls	r2, r2, #2
1001027c:	f107 010c 	add.w	r1, r7, #12
10010280:	300c      	adds	r0, #12
10010282:	f7ff fa70 	bl	1000f766 <memcpy>
10010286:	2201      	movs	r2, #1
10010288:	4629      	mov	r1, r5
1001028a:	4620      	mov	r0, r4
1001028c:	f000 fb56 	bl	1001093c <__lshift>
10010290:	9b00      	ldr	r3, [sp, #0]
10010292:	3301      	adds	r3, #1
10010294:	9304      	str	r3, [sp, #16]
10010296:	e9dd 2300 	ldrd	r2, r3, [sp]
1001029a:	4413      	add	r3, r2
1001029c:	9308      	str	r3, [sp, #32]
1001029e:	9b02      	ldr	r3, [sp, #8]
100102a0:	f003 0301 	and.w	r3, r3, #1
100102a4:	46b8      	mov	r8, r7
100102a6:	9306      	str	r3, [sp, #24]
100102a8:	4607      	mov	r7, r0
100102aa:	9b04      	ldr	r3, [sp, #16]
100102ac:	4631      	mov	r1, r6
100102ae:	3b01      	subs	r3, #1
100102b0:	4650      	mov	r0, sl
100102b2:	9301      	str	r3, [sp, #4]
100102b4:	f7ff fa6c 	bl	1000f790 <quorem>
100102b8:	4641      	mov	r1, r8
100102ba:	9002      	str	r0, [sp, #8]
100102bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
100102c0:	4650      	mov	r0, sl
100102c2:	f000 fba7 	bl	10010a14 <__mcmp>
100102c6:	463a      	mov	r2, r7
100102c8:	9005      	str	r0, [sp, #20]
100102ca:	4631      	mov	r1, r6
100102cc:	4620      	mov	r0, r4
100102ce:	f000 fbbd 	bl	10010a4c <__mdiff>
100102d2:	68c2      	ldr	r2, [r0, #12]
100102d4:	4605      	mov	r5, r0
100102d6:	bb02      	cbnz	r2, 1001031a <_dtoa_r+0xa7a>
100102d8:	4601      	mov	r1, r0
100102da:	4650      	mov	r0, sl
100102dc:	f000 fb9a 	bl	10010a14 <__mcmp>
100102e0:	4602      	mov	r2, r0
100102e2:	4629      	mov	r1, r5
100102e4:	4620      	mov	r0, r4
100102e6:	9209      	str	r2, [sp, #36]	; 0x24
100102e8:	f000 f958 	bl	1001059c <_Bfree>
100102ec:	9b07      	ldr	r3, [sp, #28]
100102ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
100102f0:	9d04      	ldr	r5, [sp, #16]
100102f2:	ea43 0102 	orr.w	r1, r3, r2
100102f6:	9b06      	ldr	r3, [sp, #24]
100102f8:	4319      	orrs	r1, r3
100102fa:	d110      	bne.n	1001031e <_dtoa_r+0xa7e>
100102fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
10010300:	d029      	beq.n	10010356 <_dtoa_r+0xab6>
10010302:	9b05      	ldr	r3, [sp, #20]
10010304:	2b00      	cmp	r3, #0
10010306:	dd02      	ble.n	1001030e <_dtoa_r+0xa6e>
10010308:	9b02      	ldr	r3, [sp, #8]
1001030a:	f103 0931 	add.w	r9, r3, #49	; 0x31
1001030e:	9b01      	ldr	r3, [sp, #4]
10010310:	f883 9000 	strb.w	r9, [r3]
10010314:	e774      	b.n	10010200 <_dtoa_r+0x960>
10010316:	4638      	mov	r0, r7
10010318:	e7ba      	b.n	10010290 <_dtoa_r+0x9f0>
1001031a:	2201      	movs	r2, #1
1001031c:	e7e1      	b.n	100102e2 <_dtoa_r+0xa42>
1001031e:	9b05      	ldr	r3, [sp, #20]
10010320:	2b00      	cmp	r3, #0
10010322:	db04      	blt.n	1001032e <_dtoa_r+0xa8e>
10010324:	9907      	ldr	r1, [sp, #28]
10010326:	430b      	orrs	r3, r1
10010328:	9906      	ldr	r1, [sp, #24]
1001032a:	430b      	orrs	r3, r1
1001032c:	d120      	bne.n	10010370 <_dtoa_r+0xad0>
1001032e:	2a00      	cmp	r2, #0
10010330:	dded      	ble.n	1001030e <_dtoa_r+0xa6e>
10010332:	4651      	mov	r1, sl
10010334:	2201      	movs	r2, #1
10010336:	4620      	mov	r0, r4
10010338:	f000 fb00 	bl	1001093c <__lshift>
1001033c:	4631      	mov	r1, r6
1001033e:	4682      	mov	sl, r0
10010340:	f000 fb68 	bl	10010a14 <__mcmp>
10010344:	2800      	cmp	r0, #0
10010346:	dc03      	bgt.n	10010350 <_dtoa_r+0xab0>
10010348:	d1e1      	bne.n	1001030e <_dtoa_r+0xa6e>
1001034a:	f019 0f01 	tst.w	r9, #1
1001034e:	d0de      	beq.n	1001030e <_dtoa_r+0xa6e>
10010350:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
10010354:	d1d8      	bne.n	10010308 <_dtoa_r+0xa68>
10010356:	9a01      	ldr	r2, [sp, #4]
10010358:	2339      	movs	r3, #57	; 0x39
1001035a:	7013      	strb	r3, [r2, #0]
1001035c:	462b      	mov	r3, r5
1001035e:	461d      	mov	r5, r3
10010360:	3b01      	subs	r3, #1
10010362:	f815 2c01 	ldrb.w	r2, [r5, #-1]
10010366:	2a39      	cmp	r2, #57	; 0x39
10010368:	d06c      	beq.n	10010444 <_dtoa_r+0xba4>
1001036a:	3201      	adds	r2, #1
1001036c:	701a      	strb	r2, [r3, #0]
1001036e:	e747      	b.n	10010200 <_dtoa_r+0x960>
10010370:	2a00      	cmp	r2, #0
10010372:	dd07      	ble.n	10010384 <_dtoa_r+0xae4>
10010374:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
10010378:	d0ed      	beq.n	10010356 <_dtoa_r+0xab6>
1001037a:	9a01      	ldr	r2, [sp, #4]
1001037c:	f109 0301 	add.w	r3, r9, #1
10010380:	7013      	strb	r3, [r2, #0]
10010382:	e73d      	b.n	10010200 <_dtoa_r+0x960>
10010384:	9b04      	ldr	r3, [sp, #16]
10010386:	9a08      	ldr	r2, [sp, #32]
10010388:	f803 9c01 	strb.w	r9, [r3, #-1]
1001038c:	4293      	cmp	r3, r2
1001038e:	d043      	beq.n	10010418 <_dtoa_r+0xb78>
10010390:	4651      	mov	r1, sl
10010392:	2300      	movs	r3, #0
10010394:	220a      	movs	r2, #10
10010396:	4620      	mov	r0, r4
10010398:	f000 f922 	bl	100105e0 <__multadd>
1001039c:	45b8      	cmp	r8, r7
1001039e:	4682      	mov	sl, r0
100103a0:	f04f 0300 	mov.w	r3, #0
100103a4:	f04f 020a 	mov.w	r2, #10
100103a8:	4641      	mov	r1, r8
100103aa:	4620      	mov	r0, r4
100103ac:	d107      	bne.n	100103be <_dtoa_r+0xb1e>
100103ae:	f000 f917 	bl	100105e0 <__multadd>
100103b2:	4680      	mov	r8, r0
100103b4:	4607      	mov	r7, r0
100103b6:	9b04      	ldr	r3, [sp, #16]
100103b8:	3301      	adds	r3, #1
100103ba:	9304      	str	r3, [sp, #16]
100103bc:	e775      	b.n	100102aa <_dtoa_r+0xa0a>
100103be:	f000 f90f 	bl	100105e0 <__multadd>
100103c2:	4639      	mov	r1, r7
100103c4:	4680      	mov	r8, r0
100103c6:	2300      	movs	r3, #0
100103c8:	220a      	movs	r2, #10
100103ca:	4620      	mov	r0, r4
100103cc:	f000 f908 	bl	100105e0 <__multadd>
100103d0:	4607      	mov	r7, r0
100103d2:	e7f0      	b.n	100103b6 <_dtoa_r+0xb16>
100103d4:	9b04      	ldr	r3, [sp, #16]
100103d6:	9301      	str	r3, [sp, #4]
100103d8:	9d00      	ldr	r5, [sp, #0]
100103da:	4631      	mov	r1, r6
100103dc:	4650      	mov	r0, sl
100103de:	f7ff f9d7 	bl	1000f790 <quorem>
100103e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
100103e6:	9b00      	ldr	r3, [sp, #0]
100103e8:	f805 9b01 	strb.w	r9, [r5], #1
100103ec:	1aea      	subs	r2, r5, r3
100103ee:	9b01      	ldr	r3, [sp, #4]
100103f0:	4293      	cmp	r3, r2
100103f2:	dd07      	ble.n	10010404 <_dtoa_r+0xb64>
100103f4:	4651      	mov	r1, sl
100103f6:	2300      	movs	r3, #0
100103f8:	220a      	movs	r2, #10
100103fa:	4620      	mov	r0, r4
100103fc:	f000 f8f0 	bl	100105e0 <__multadd>
10010400:	4682      	mov	sl, r0
10010402:	e7ea      	b.n	100103da <_dtoa_r+0xb3a>
10010404:	9b01      	ldr	r3, [sp, #4]
10010406:	2b00      	cmp	r3, #0
10010408:	bfc8      	it	gt
1001040a:	461d      	movgt	r5, r3
1001040c:	9b00      	ldr	r3, [sp, #0]
1001040e:	bfd8      	it	le
10010410:	2501      	movle	r5, #1
10010412:	441d      	add	r5, r3
10010414:	f04f 0800 	mov.w	r8, #0
10010418:	4651      	mov	r1, sl
1001041a:	2201      	movs	r2, #1
1001041c:	4620      	mov	r0, r4
1001041e:	f000 fa8d 	bl	1001093c <__lshift>
10010422:	4631      	mov	r1, r6
10010424:	4682      	mov	sl, r0
10010426:	f000 faf5 	bl	10010a14 <__mcmp>
1001042a:	2800      	cmp	r0, #0
1001042c:	dc96      	bgt.n	1001035c <_dtoa_r+0xabc>
1001042e:	d102      	bne.n	10010436 <_dtoa_r+0xb96>
10010430:	f019 0f01 	tst.w	r9, #1
10010434:	d192      	bne.n	1001035c <_dtoa_r+0xabc>
10010436:	462b      	mov	r3, r5
10010438:	461d      	mov	r5, r3
1001043a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1001043e:	2a30      	cmp	r2, #48	; 0x30
10010440:	d0fa      	beq.n	10010438 <_dtoa_r+0xb98>
10010442:	e6dd      	b.n	10010200 <_dtoa_r+0x960>
10010444:	9a00      	ldr	r2, [sp, #0]
10010446:	429a      	cmp	r2, r3
10010448:	d189      	bne.n	1001035e <_dtoa_r+0xabe>
1001044a:	f10b 0b01 	add.w	fp, fp, #1
1001044e:	2331      	movs	r3, #49	; 0x31
10010450:	e796      	b.n	10010380 <_dtoa_r+0xae0>
10010452:	4b0a      	ldr	r3, [pc, #40]	; (1001047c <_dtoa_r+0xbdc>)
10010454:	f7ff ba99 	b.w	1000f98a <_dtoa_r+0xea>
10010458:	9b21      	ldr	r3, [sp, #132]	; 0x84
1001045a:	2b00      	cmp	r3, #0
1001045c:	f47f aa6d 	bne.w	1000f93a <_dtoa_r+0x9a>
10010460:	4b07      	ldr	r3, [pc, #28]	; (10010480 <_dtoa_r+0xbe0>)
10010462:	f7ff ba92 	b.w	1000f98a <_dtoa_r+0xea>
10010466:	9b01      	ldr	r3, [sp, #4]
10010468:	2b00      	cmp	r3, #0
1001046a:	dcb5      	bgt.n	100103d8 <_dtoa_r+0xb38>
1001046c:	9b07      	ldr	r3, [sp, #28]
1001046e:	2b02      	cmp	r3, #2
10010470:	f73f aeb1 	bgt.w	100101d6 <_dtoa_r+0x936>
10010474:	e7b0      	b.n	100103d8 <_dtoa_r+0xb38>
10010476:	bf00      	nop
10010478:	10014344 	.word	0x10014344
1001047c:	100142a4 	.word	0x100142a4
10010480:	100142c8 	.word	0x100142c8

10010484 <_free_r>:
10010484:	b537      	push	{r0, r1, r2, r4, r5, lr}
10010486:	2900      	cmp	r1, #0
10010488:	d044      	beq.n	10010514 <_free_r+0x90>
1001048a:	f851 3c04 	ldr.w	r3, [r1, #-4]
1001048e:	9001      	str	r0, [sp, #4]
10010490:	2b00      	cmp	r3, #0
10010492:	f1a1 0404 	sub.w	r4, r1, #4
10010496:	bfb8      	it	lt
10010498:	18e4      	addlt	r4, r4, r3
1001049a:	f7fe fad7 	bl	1000ea4c <__malloc_lock>
1001049e:	4a1e      	ldr	r2, [pc, #120]	; (10010518 <_free_r+0x94>)
100104a0:	9801      	ldr	r0, [sp, #4]
100104a2:	6813      	ldr	r3, [r2, #0]
100104a4:	b933      	cbnz	r3, 100104b4 <_free_r+0x30>
100104a6:	6063      	str	r3, [r4, #4]
100104a8:	6014      	str	r4, [r2, #0]
100104aa:	b003      	add	sp, #12
100104ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
100104b0:	f7fe bad2 	b.w	1000ea58 <__malloc_unlock>
100104b4:	42a3      	cmp	r3, r4
100104b6:	d908      	bls.n	100104ca <_free_r+0x46>
100104b8:	6825      	ldr	r5, [r4, #0]
100104ba:	1961      	adds	r1, r4, r5
100104bc:	428b      	cmp	r3, r1
100104be:	bf01      	itttt	eq
100104c0:	6819      	ldreq	r1, [r3, #0]
100104c2:	685b      	ldreq	r3, [r3, #4]
100104c4:	1949      	addeq	r1, r1, r5
100104c6:	6021      	streq	r1, [r4, #0]
100104c8:	e7ed      	b.n	100104a6 <_free_r+0x22>
100104ca:	461a      	mov	r2, r3
100104cc:	685b      	ldr	r3, [r3, #4]
100104ce:	b10b      	cbz	r3, 100104d4 <_free_r+0x50>
100104d0:	42a3      	cmp	r3, r4
100104d2:	d9fa      	bls.n	100104ca <_free_r+0x46>
100104d4:	6811      	ldr	r1, [r2, #0]
100104d6:	1855      	adds	r5, r2, r1
100104d8:	42a5      	cmp	r5, r4
100104da:	d10b      	bne.n	100104f4 <_free_r+0x70>
100104dc:	6824      	ldr	r4, [r4, #0]
100104de:	4421      	add	r1, r4
100104e0:	1854      	adds	r4, r2, r1
100104e2:	42a3      	cmp	r3, r4
100104e4:	6011      	str	r1, [r2, #0]
100104e6:	d1e0      	bne.n	100104aa <_free_r+0x26>
100104e8:	681c      	ldr	r4, [r3, #0]
100104ea:	685b      	ldr	r3, [r3, #4]
100104ec:	6053      	str	r3, [r2, #4]
100104ee:	440c      	add	r4, r1
100104f0:	6014      	str	r4, [r2, #0]
100104f2:	e7da      	b.n	100104aa <_free_r+0x26>
100104f4:	d902      	bls.n	100104fc <_free_r+0x78>
100104f6:	230c      	movs	r3, #12
100104f8:	6003      	str	r3, [r0, #0]
100104fa:	e7d6      	b.n	100104aa <_free_r+0x26>
100104fc:	6825      	ldr	r5, [r4, #0]
100104fe:	1961      	adds	r1, r4, r5
10010500:	428b      	cmp	r3, r1
10010502:	bf04      	itt	eq
10010504:	6819      	ldreq	r1, [r3, #0]
10010506:	685b      	ldreq	r3, [r3, #4]
10010508:	6063      	str	r3, [r4, #4]
1001050a:	bf04      	itt	eq
1001050c:	1949      	addeq	r1, r1, r5
1001050e:	6021      	streq	r1, [r4, #0]
10010510:	6054      	str	r4, [r2, #4]
10010512:	e7ca      	b.n	100104aa <_free_r+0x26>
10010514:	b003      	add	sp, #12
10010516:	bd30      	pop	{r4, r5, pc}
10010518:	1002203c 	.word	0x1002203c

1001051c <_Balloc>:
1001051c:	b570      	push	{r4, r5, r6, lr}
1001051e:	69c6      	ldr	r6, [r0, #28]
10010520:	4604      	mov	r4, r0
10010522:	460d      	mov	r5, r1
10010524:	b976      	cbnz	r6, 10010544 <_Balloc+0x28>
10010526:	2010      	movs	r0, #16
10010528:	f7fe f9e0 	bl	1000e8ec <malloc>
1001052c:	4602      	mov	r2, r0
1001052e:	61e0      	str	r0, [r4, #28]
10010530:	b920      	cbnz	r0, 1001053c <_Balloc+0x20>
10010532:	4b18      	ldr	r3, [pc, #96]	; (10010594 <_Balloc+0x78>)
10010534:	4818      	ldr	r0, [pc, #96]	; (10010598 <_Balloc+0x7c>)
10010536:	216b      	movs	r1, #107	; 0x6b
10010538:	f7fe f9ba 	bl	1000e8b0 <__assert_func>
1001053c:	e9c0 6601 	strd	r6, r6, [r0, #4]
10010540:	6006      	str	r6, [r0, #0]
10010542:	60c6      	str	r6, [r0, #12]
10010544:	69e6      	ldr	r6, [r4, #28]
10010546:	68f3      	ldr	r3, [r6, #12]
10010548:	b183      	cbz	r3, 1001056c <_Balloc+0x50>
1001054a:	69e3      	ldr	r3, [r4, #28]
1001054c:	68db      	ldr	r3, [r3, #12]
1001054e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
10010552:	b9b8      	cbnz	r0, 10010584 <_Balloc+0x68>
10010554:	2101      	movs	r1, #1
10010556:	fa01 f605 	lsl.w	r6, r1, r5
1001055a:	1d72      	adds	r2, r6, #5
1001055c:	0092      	lsls	r2, r2, #2
1001055e:	4620      	mov	r0, r4
10010560:	f000 ff9e 	bl	100114a0 <_calloc_r>
10010564:	b160      	cbz	r0, 10010580 <_Balloc+0x64>
10010566:	e9c0 5601 	strd	r5, r6, [r0, #4]
1001056a:	e00e      	b.n	1001058a <_Balloc+0x6e>
1001056c:	2221      	movs	r2, #33	; 0x21
1001056e:	2104      	movs	r1, #4
10010570:	4620      	mov	r0, r4
10010572:	f000 ff95 	bl	100114a0 <_calloc_r>
10010576:	69e3      	ldr	r3, [r4, #28]
10010578:	60f0      	str	r0, [r6, #12]
1001057a:	68db      	ldr	r3, [r3, #12]
1001057c:	2b00      	cmp	r3, #0
1001057e:	d1e4      	bne.n	1001054a <_Balloc+0x2e>
10010580:	2000      	movs	r0, #0
10010582:	bd70      	pop	{r4, r5, r6, pc}
10010584:	6802      	ldr	r2, [r0, #0]
10010586:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
1001058a:	2300      	movs	r3, #0
1001058c:	e9c0 3303 	strd	r3, r3, [r0, #12]
10010590:	e7f7      	b.n	10010582 <_Balloc+0x66>
10010592:	bf00      	nop
10010594:	100142d5 	.word	0x100142d5
10010598:	10014355 	.word	0x10014355

1001059c <_Bfree>:
1001059c:	b570      	push	{r4, r5, r6, lr}
1001059e:	69c6      	ldr	r6, [r0, #28]
100105a0:	4605      	mov	r5, r0
100105a2:	460c      	mov	r4, r1
100105a4:	b976      	cbnz	r6, 100105c4 <_Bfree+0x28>
100105a6:	2010      	movs	r0, #16
100105a8:	f7fe f9a0 	bl	1000e8ec <malloc>
100105ac:	4602      	mov	r2, r0
100105ae:	61e8      	str	r0, [r5, #28]
100105b0:	b920      	cbnz	r0, 100105bc <_Bfree+0x20>
100105b2:	4b09      	ldr	r3, [pc, #36]	; (100105d8 <_Bfree+0x3c>)
100105b4:	4809      	ldr	r0, [pc, #36]	; (100105dc <_Bfree+0x40>)
100105b6:	218f      	movs	r1, #143	; 0x8f
100105b8:	f7fe f97a 	bl	1000e8b0 <__assert_func>
100105bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
100105c0:	6006      	str	r6, [r0, #0]
100105c2:	60c6      	str	r6, [r0, #12]
100105c4:	b13c      	cbz	r4, 100105d6 <_Bfree+0x3a>
100105c6:	69eb      	ldr	r3, [r5, #28]
100105c8:	6862      	ldr	r2, [r4, #4]
100105ca:	68db      	ldr	r3, [r3, #12]
100105cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
100105d0:	6021      	str	r1, [r4, #0]
100105d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
100105d6:	bd70      	pop	{r4, r5, r6, pc}
100105d8:	100142d5 	.word	0x100142d5
100105dc:	10014355 	.word	0x10014355

100105e0 <__multadd>:
100105e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
100105e4:	690d      	ldr	r5, [r1, #16]
100105e6:	4607      	mov	r7, r0
100105e8:	460c      	mov	r4, r1
100105ea:	461e      	mov	r6, r3
100105ec:	f101 0c14 	add.w	ip, r1, #20
100105f0:	2000      	movs	r0, #0
100105f2:	f8dc 3000 	ldr.w	r3, [ip]
100105f6:	b299      	uxth	r1, r3
100105f8:	fb02 6101 	mla	r1, r2, r1, r6
100105fc:	0c1e      	lsrs	r6, r3, #16
100105fe:	0c0b      	lsrs	r3, r1, #16
10010600:	fb02 3306 	mla	r3, r2, r6, r3
10010604:	b289      	uxth	r1, r1
10010606:	3001      	adds	r0, #1
10010608:	eb01 4103 	add.w	r1, r1, r3, lsl #16
1001060c:	4285      	cmp	r5, r0
1001060e:	f84c 1b04 	str.w	r1, [ip], #4
10010612:	ea4f 4613 	mov.w	r6, r3, lsr #16
10010616:	dcec      	bgt.n	100105f2 <__multadd+0x12>
10010618:	b30e      	cbz	r6, 1001065e <__multadd+0x7e>
1001061a:	68a3      	ldr	r3, [r4, #8]
1001061c:	42ab      	cmp	r3, r5
1001061e:	dc19      	bgt.n	10010654 <__multadd+0x74>
10010620:	6861      	ldr	r1, [r4, #4]
10010622:	4638      	mov	r0, r7
10010624:	3101      	adds	r1, #1
10010626:	f7ff ff79 	bl	1001051c <_Balloc>
1001062a:	4680      	mov	r8, r0
1001062c:	b928      	cbnz	r0, 1001063a <__multadd+0x5a>
1001062e:	4602      	mov	r2, r0
10010630:	4b0c      	ldr	r3, [pc, #48]	; (10010664 <__multadd+0x84>)
10010632:	480d      	ldr	r0, [pc, #52]	; (10010668 <__multadd+0x88>)
10010634:	21ba      	movs	r1, #186	; 0xba
10010636:	f7fe f93b 	bl	1000e8b0 <__assert_func>
1001063a:	6922      	ldr	r2, [r4, #16]
1001063c:	3202      	adds	r2, #2
1001063e:	f104 010c 	add.w	r1, r4, #12
10010642:	0092      	lsls	r2, r2, #2
10010644:	300c      	adds	r0, #12
10010646:	f7ff f88e 	bl	1000f766 <memcpy>
1001064a:	4621      	mov	r1, r4
1001064c:	4638      	mov	r0, r7
1001064e:	f7ff ffa5 	bl	1001059c <_Bfree>
10010652:	4644      	mov	r4, r8
10010654:	eb04 0385 	add.w	r3, r4, r5, lsl #2
10010658:	3501      	adds	r5, #1
1001065a:	615e      	str	r6, [r3, #20]
1001065c:	6125      	str	r5, [r4, #16]
1001065e:	4620      	mov	r0, r4
10010660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10010664:	10014344 	.word	0x10014344
10010668:	10014355 	.word	0x10014355

1001066c <__hi0bits>:
1001066c:	0c03      	lsrs	r3, r0, #16
1001066e:	041b      	lsls	r3, r3, #16
10010670:	b9d3      	cbnz	r3, 100106a8 <__hi0bits+0x3c>
10010672:	0400      	lsls	r0, r0, #16
10010674:	2310      	movs	r3, #16
10010676:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
1001067a:	bf04      	itt	eq
1001067c:	0200      	lsleq	r0, r0, #8
1001067e:	3308      	addeq	r3, #8
10010680:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
10010684:	bf04      	itt	eq
10010686:	0100      	lsleq	r0, r0, #4
10010688:	3304      	addeq	r3, #4
1001068a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
1001068e:	bf04      	itt	eq
10010690:	0080      	lsleq	r0, r0, #2
10010692:	3302      	addeq	r3, #2
10010694:	2800      	cmp	r0, #0
10010696:	db05      	blt.n	100106a4 <__hi0bits+0x38>
10010698:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
1001069c:	f103 0301 	add.w	r3, r3, #1
100106a0:	bf08      	it	eq
100106a2:	2320      	moveq	r3, #32
100106a4:	4618      	mov	r0, r3
100106a6:	4770      	bx	lr
100106a8:	2300      	movs	r3, #0
100106aa:	e7e4      	b.n	10010676 <__hi0bits+0xa>

100106ac <__lo0bits>:
100106ac:	6803      	ldr	r3, [r0, #0]
100106ae:	f013 0207 	ands.w	r2, r3, #7
100106b2:	d00c      	beq.n	100106ce <__lo0bits+0x22>
100106b4:	07d9      	lsls	r1, r3, #31
100106b6:	d422      	bmi.n	100106fe <__lo0bits+0x52>
100106b8:	079a      	lsls	r2, r3, #30
100106ba:	bf49      	itett	mi
100106bc:	085b      	lsrmi	r3, r3, #1
100106be:	089b      	lsrpl	r3, r3, #2
100106c0:	6003      	strmi	r3, [r0, #0]
100106c2:	2201      	movmi	r2, #1
100106c4:	bf5c      	itt	pl
100106c6:	6003      	strpl	r3, [r0, #0]
100106c8:	2202      	movpl	r2, #2
100106ca:	4610      	mov	r0, r2
100106cc:	4770      	bx	lr
100106ce:	b299      	uxth	r1, r3
100106d0:	b909      	cbnz	r1, 100106d6 <__lo0bits+0x2a>
100106d2:	0c1b      	lsrs	r3, r3, #16
100106d4:	2210      	movs	r2, #16
100106d6:	b2d9      	uxtb	r1, r3
100106d8:	b909      	cbnz	r1, 100106de <__lo0bits+0x32>
100106da:	3208      	adds	r2, #8
100106dc:	0a1b      	lsrs	r3, r3, #8
100106de:	0719      	lsls	r1, r3, #28
100106e0:	bf04      	itt	eq
100106e2:	091b      	lsreq	r3, r3, #4
100106e4:	3204      	addeq	r2, #4
100106e6:	0799      	lsls	r1, r3, #30
100106e8:	bf04      	itt	eq
100106ea:	089b      	lsreq	r3, r3, #2
100106ec:	3202      	addeq	r2, #2
100106ee:	07d9      	lsls	r1, r3, #31
100106f0:	d403      	bmi.n	100106fa <__lo0bits+0x4e>
100106f2:	085b      	lsrs	r3, r3, #1
100106f4:	f102 0201 	add.w	r2, r2, #1
100106f8:	d003      	beq.n	10010702 <__lo0bits+0x56>
100106fa:	6003      	str	r3, [r0, #0]
100106fc:	e7e5      	b.n	100106ca <__lo0bits+0x1e>
100106fe:	2200      	movs	r2, #0
10010700:	e7e3      	b.n	100106ca <__lo0bits+0x1e>
10010702:	2220      	movs	r2, #32
10010704:	e7e1      	b.n	100106ca <__lo0bits+0x1e>
	...

10010708 <__i2b>:
10010708:	b510      	push	{r4, lr}
1001070a:	460c      	mov	r4, r1
1001070c:	2101      	movs	r1, #1
1001070e:	f7ff ff05 	bl	1001051c <_Balloc>
10010712:	4602      	mov	r2, r0
10010714:	b928      	cbnz	r0, 10010722 <__i2b+0x1a>
10010716:	4b05      	ldr	r3, [pc, #20]	; (1001072c <__i2b+0x24>)
10010718:	4805      	ldr	r0, [pc, #20]	; (10010730 <__i2b+0x28>)
1001071a:	f240 1145 	movw	r1, #325	; 0x145
1001071e:	f7fe f8c7 	bl	1000e8b0 <__assert_func>
10010722:	2301      	movs	r3, #1
10010724:	6144      	str	r4, [r0, #20]
10010726:	6103      	str	r3, [r0, #16]
10010728:	bd10      	pop	{r4, pc}
1001072a:	bf00      	nop
1001072c:	10014344 	.word	0x10014344
10010730:	10014355 	.word	0x10014355

10010734 <__multiply>:
10010734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10010738:	4691      	mov	r9, r2
1001073a:	690a      	ldr	r2, [r1, #16]
1001073c:	f8d9 3010 	ldr.w	r3, [r9, #16]
10010740:	429a      	cmp	r2, r3
10010742:	bfb8      	it	lt
10010744:	460b      	movlt	r3, r1
10010746:	460c      	mov	r4, r1
10010748:	bfbc      	itt	lt
1001074a:	464c      	movlt	r4, r9
1001074c:	4699      	movlt	r9, r3
1001074e:	6927      	ldr	r7, [r4, #16]
10010750:	f8d9 a010 	ldr.w	sl, [r9, #16]
10010754:	68a3      	ldr	r3, [r4, #8]
10010756:	6861      	ldr	r1, [r4, #4]
10010758:	eb07 060a 	add.w	r6, r7, sl
1001075c:	42b3      	cmp	r3, r6
1001075e:	b085      	sub	sp, #20
10010760:	bfb8      	it	lt
10010762:	3101      	addlt	r1, #1
10010764:	f7ff feda 	bl	1001051c <_Balloc>
10010768:	b930      	cbnz	r0, 10010778 <__multiply+0x44>
1001076a:	4602      	mov	r2, r0
1001076c:	4b44      	ldr	r3, [pc, #272]	; (10010880 <__multiply+0x14c>)
1001076e:	4845      	ldr	r0, [pc, #276]	; (10010884 <__multiply+0x150>)
10010770:	f44f 71b1 	mov.w	r1, #354	; 0x162
10010774:	f7fe f89c 	bl	1000e8b0 <__assert_func>
10010778:	f100 0514 	add.w	r5, r0, #20
1001077c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
10010780:	462b      	mov	r3, r5
10010782:	2200      	movs	r2, #0
10010784:	4543      	cmp	r3, r8
10010786:	d321      	bcc.n	100107cc <__multiply+0x98>
10010788:	f104 0314 	add.w	r3, r4, #20
1001078c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
10010790:	f109 0314 	add.w	r3, r9, #20
10010794:	eb03 028a 	add.w	r2, r3, sl, lsl #2
10010798:	9202      	str	r2, [sp, #8]
1001079a:	1b3a      	subs	r2, r7, r4
1001079c:	3a15      	subs	r2, #21
1001079e:	f022 0203 	bic.w	r2, r2, #3
100107a2:	3204      	adds	r2, #4
100107a4:	f104 0115 	add.w	r1, r4, #21
100107a8:	428f      	cmp	r7, r1
100107aa:	bf38      	it	cc
100107ac:	2204      	movcc	r2, #4
100107ae:	9201      	str	r2, [sp, #4]
100107b0:	9a02      	ldr	r2, [sp, #8]
100107b2:	9303      	str	r3, [sp, #12]
100107b4:	429a      	cmp	r2, r3
100107b6:	d80c      	bhi.n	100107d2 <__multiply+0x9e>
100107b8:	2e00      	cmp	r6, #0
100107ba:	dd03      	ble.n	100107c4 <__multiply+0x90>
100107bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
100107c0:	2b00      	cmp	r3, #0
100107c2:	d05b      	beq.n	1001087c <__multiply+0x148>
100107c4:	6106      	str	r6, [r0, #16]
100107c6:	b005      	add	sp, #20
100107c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
100107cc:	f843 2b04 	str.w	r2, [r3], #4
100107d0:	e7d8      	b.n	10010784 <__multiply+0x50>
100107d2:	f8b3 a000 	ldrh.w	sl, [r3]
100107d6:	f1ba 0f00 	cmp.w	sl, #0
100107da:	d024      	beq.n	10010826 <__multiply+0xf2>
100107dc:	f104 0e14 	add.w	lr, r4, #20
100107e0:	46a9      	mov	r9, r5
100107e2:	f04f 0c00 	mov.w	ip, #0
100107e6:	f85e 2b04 	ldr.w	r2, [lr], #4
100107ea:	f8d9 1000 	ldr.w	r1, [r9]
100107ee:	fa1f fb82 	uxth.w	fp, r2
100107f2:	b289      	uxth	r1, r1
100107f4:	fb0a 110b 	mla	r1, sl, fp, r1
100107f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
100107fc:	f8d9 2000 	ldr.w	r2, [r9]
10010800:	4461      	add	r1, ip
10010802:	ea4f 4c12 	mov.w	ip, r2, lsr #16
10010806:	fb0a c20b 	mla	r2, sl, fp, ip
1001080a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
1001080e:	b289      	uxth	r1, r1
10010810:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
10010814:	4577      	cmp	r7, lr
10010816:	f849 1b04 	str.w	r1, [r9], #4
1001081a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
1001081e:	d8e2      	bhi.n	100107e6 <__multiply+0xb2>
10010820:	9a01      	ldr	r2, [sp, #4]
10010822:	f845 c002 	str.w	ip, [r5, r2]
10010826:	9a03      	ldr	r2, [sp, #12]
10010828:	f8b2 9002 	ldrh.w	r9, [r2, #2]
1001082c:	3304      	adds	r3, #4
1001082e:	f1b9 0f00 	cmp.w	r9, #0
10010832:	d021      	beq.n	10010878 <__multiply+0x144>
10010834:	6829      	ldr	r1, [r5, #0]
10010836:	f104 0c14 	add.w	ip, r4, #20
1001083a:	46ae      	mov	lr, r5
1001083c:	f04f 0a00 	mov.w	sl, #0
10010840:	f8bc b000 	ldrh.w	fp, [ip]
10010844:	f8be 2002 	ldrh.w	r2, [lr, #2]
10010848:	fb09 220b 	mla	r2, r9, fp, r2
1001084c:	4452      	add	r2, sl
1001084e:	b289      	uxth	r1, r1
10010850:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
10010854:	f84e 1b04 	str.w	r1, [lr], #4
10010858:	f85c 1b04 	ldr.w	r1, [ip], #4
1001085c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
10010860:	f8be 1000 	ldrh.w	r1, [lr]
10010864:	fb09 110a 	mla	r1, r9, sl, r1
10010868:	eb01 4112 	add.w	r1, r1, r2, lsr #16
1001086c:	4567      	cmp	r7, ip
1001086e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
10010872:	d8e5      	bhi.n	10010840 <__multiply+0x10c>
10010874:	9a01      	ldr	r2, [sp, #4]
10010876:	50a9      	str	r1, [r5, r2]
10010878:	3504      	adds	r5, #4
1001087a:	e799      	b.n	100107b0 <__multiply+0x7c>
1001087c:	3e01      	subs	r6, #1
1001087e:	e79b      	b.n	100107b8 <__multiply+0x84>
10010880:	10014344 	.word	0x10014344
10010884:	10014355 	.word	0x10014355

10010888 <__pow5mult>:
10010888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1001088c:	4615      	mov	r5, r2
1001088e:	f012 0203 	ands.w	r2, r2, #3
10010892:	4606      	mov	r6, r0
10010894:	460f      	mov	r7, r1
10010896:	d007      	beq.n	100108a8 <__pow5mult+0x20>
10010898:	4c25      	ldr	r4, [pc, #148]	; (10010930 <__pow5mult+0xa8>)
1001089a:	3a01      	subs	r2, #1
1001089c:	2300      	movs	r3, #0
1001089e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
100108a2:	f7ff fe9d 	bl	100105e0 <__multadd>
100108a6:	4607      	mov	r7, r0
100108a8:	10ad      	asrs	r5, r5, #2
100108aa:	d03d      	beq.n	10010928 <__pow5mult+0xa0>
100108ac:	69f4      	ldr	r4, [r6, #28]
100108ae:	b97c      	cbnz	r4, 100108d0 <__pow5mult+0x48>
100108b0:	2010      	movs	r0, #16
100108b2:	f7fe f81b 	bl	1000e8ec <malloc>
100108b6:	4602      	mov	r2, r0
100108b8:	61f0      	str	r0, [r6, #28]
100108ba:	b928      	cbnz	r0, 100108c8 <__pow5mult+0x40>
100108bc:	4b1d      	ldr	r3, [pc, #116]	; (10010934 <__pow5mult+0xac>)
100108be:	481e      	ldr	r0, [pc, #120]	; (10010938 <__pow5mult+0xb0>)
100108c0:	f240 11b3 	movw	r1, #435	; 0x1b3
100108c4:	f7fd fff4 	bl	1000e8b0 <__assert_func>
100108c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
100108cc:	6004      	str	r4, [r0, #0]
100108ce:	60c4      	str	r4, [r0, #12]
100108d0:	f8d6 801c 	ldr.w	r8, [r6, #28]
100108d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
100108d8:	b94c      	cbnz	r4, 100108ee <__pow5mult+0x66>
100108da:	f240 2171 	movw	r1, #625	; 0x271
100108de:	4630      	mov	r0, r6
100108e0:	f7ff ff12 	bl	10010708 <__i2b>
100108e4:	2300      	movs	r3, #0
100108e6:	f8c8 0008 	str.w	r0, [r8, #8]
100108ea:	4604      	mov	r4, r0
100108ec:	6003      	str	r3, [r0, #0]
100108ee:	f04f 0900 	mov.w	r9, #0
100108f2:	07eb      	lsls	r3, r5, #31
100108f4:	d50a      	bpl.n	1001090c <__pow5mult+0x84>
100108f6:	4639      	mov	r1, r7
100108f8:	4622      	mov	r2, r4
100108fa:	4630      	mov	r0, r6
100108fc:	f7ff ff1a 	bl	10010734 <__multiply>
10010900:	4639      	mov	r1, r7
10010902:	4680      	mov	r8, r0
10010904:	4630      	mov	r0, r6
10010906:	f7ff fe49 	bl	1001059c <_Bfree>
1001090a:	4647      	mov	r7, r8
1001090c:	106d      	asrs	r5, r5, #1
1001090e:	d00b      	beq.n	10010928 <__pow5mult+0xa0>
10010910:	6820      	ldr	r0, [r4, #0]
10010912:	b938      	cbnz	r0, 10010924 <__pow5mult+0x9c>
10010914:	4622      	mov	r2, r4
10010916:	4621      	mov	r1, r4
10010918:	4630      	mov	r0, r6
1001091a:	f7ff ff0b 	bl	10010734 <__multiply>
1001091e:	6020      	str	r0, [r4, #0]
10010920:	f8c0 9000 	str.w	r9, [r0]
10010924:	4604      	mov	r4, r0
10010926:	e7e4      	b.n	100108f2 <__pow5mult+0x6a>
10010928:	4638      	mov	r0, r7
1001092a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1001092e:	bf00      	nop
10010930:	100144a0 	.word	0x100144a0
10010934:	100142d5 	.word	0x100142d5
10010938:	10014355 	.word	0x10014355

1001093c <__lshift>:
1001093c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10010940:	460c      	mov	r4, r1
10010942:	6849      	ldr	r1, [r1, #4]
10010944:	6923      	ldr	r3, [r4, #16]
10010946:	eb03 1862 	add.w	r8, r3, r2, asr #5
1001094a:	68a3      	ldr	r3, [r4, #8]
1001094c:	4607      	mov	r7, r0
1001094e:	4691      	mov	r9, r2
10010950:	ea4f 1a62 	mov.w	sl, r2, asr #5
10010954:	f108 0601 	add.w	r6, r8, #1
10010958:	42b3      	cmp	r3, r6
1001095a:	db0b      	blt.n	10010974 <__lshift+0x38>
1001095c:	4638      	mov	r0, r7
1001095e:	f7ff fddd 	bl	1001051c <_Balloc>
10010962:	4605      	mov	r5, r0
10010964:	b948      	cbnz	r0, 1001097a <__lshift+0x3e>
10010966:	4602      	mov	r2, r0
10010968:	4b28      	ldr	r3, [pc, #160]	; (10010a0c <__lshift+0xd0>)
1001096a:	4829      	ldr	r0, [pc, #164]	; (10010a10 <__lshift+0xd4>)
1001096c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
10010970:	f7fd ff9e 	bl	1000e8b0 <__assert_func>
10010974:	3101      	adds	r1, #1
10010976:	005b      	lsls	r3, r3, #1
10010978:	e7ee      	b.n	10010958 <__lshift+0x1c>
1001097a:	2300      	movs	r3, #0
1001097c:	f100 0114 	add.w	r1, r0, #20
10010980:	f100 0210 	add.w	r2, r0, #16
10010984:	4618      	mov	r0, r3
10010986:	4553      	cmp	r3, sl
10010988:	db33      	blt.n	100109f2 <__lshift+0xb6>
1001098a:	6920      	ldr	r0, [r4, #16]
1001098c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
10010990:	f104 0314 	add.w	r3, r4, #20
10010994:	f019 091f 	ands.w	r9, r9, #31
10010998:	eb01 018a 	add.w	r1, r1, sl, lsl #2
1001099c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
100109a0:	d02b      	beq.n	100109fa <__lshift+0xbe>
100109a2:	f1c9 0e20 	rsb	lr, r9, #32
100109a6:	468a      	mov	sl, r1
100109a8:	2200      	movs	r2, #0
100109aa:	6818      	ldr	r0, [r3, #0]
100109ac:	fa00 f009 	lsl.w	r0, r0, r9
100109b0:	4310      	orrs	r0, r2
100109b2:	f84a 0b04 	str.w	r0, [sl], #4
100109b6:	f853 2b04 	ldr.w	r2, [r3], #4
100109ba:	459c      	cmp	ip, r3
100109bc:	fa22 f20e 	lsr.w	r2, r2, lr
100109c0:	d8f3      	bhi.n	100109aa <__lshift+0x6e>
100109c2:	ebac 0304 	sub.w	r3, ip, r4
100109c6:	3b15      	subs	r3, #21
100109c8:	f023 0303 	bic.w	r3, r3, #3
100109cc:	3304      	adds	r3, #4
100109ce:	f104 0015 	add.w	r0, r4, #21
100109d2:	4584      	cmp	ip, r0
100109d4:	bf38      	it	cc
100109d6:	2304      	movcc	r3, #4
100109d8:	50ca      	str	r2, [r1, r3]
100109da:	b10a      	cbz	r2, 100109e0 <__lshift+0xa4>
100109dc:	f108 0602 	add.w	r6, r8, #2
100109e0:	3e01      	subs	r6, #1
100109e2:	4638      	mov	r0, r7
100109e4:	612e      	str	r6, [r5, #16]
100109e6:	4621      	mov	r1, r4
100109e8:	f7ff fdd8 	bl	1001059c <_Bfree>
100109ec:	4628      	mov	r0, r5
100109ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
100109f2:	f842 0f04 	str.w	r0, [r2, #4]!
100109f6:	3301      	adds	r3, #1
100109f8:	e7c5      	b.n	10010986 <__lshift+0x4a>
100109fa:	3904      	subs	r1, #4
100109fc:	f853 2b04 	ldr.w	r2, [r3], #4
10010a00:	f841 2f04 	str.w	r2, [r1, #4]!
10010a04:	459c      	cmp	ip, r3
10010a06:	d8f9      	bhi.n	100109fc <__lshift+0xc0>
10010a08:	e7ea      	b.n	100109e0 <__lshift+0xa4>
10010a0a:	bf00      	nop
10010a0c:	10014344 	.word	0x10014344
10010a10:	10014355 	.word	0x10014355

10010a14 <__mcmp>:
10010a14:	b530      	push	{r4, r5, lr}
10010a16:	6902      	ldr	r2, [r0, #16]
10010a18:	690c      	ldr	r4, [r1, #16]
10010a1a:	1b12      	subs	r2, r2, r4
10010a1c:	d10e      	bne.n	10010a3c <__mcmp+0x28>
10010a1e:	f100 0314 	add.w	r3, r0, #20
10010a22:	3114      	adds	r1, #20
10010a24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
10010a28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
10010a2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
10010a30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
10010a34:	42a5      	cmp	r5, r4
10010a36:	d003      	beq.n	10010a40 <__mcmp+0x2c>
10010a38:	d305      	bcc.n	10010a46 <__mcmp+0x32>
10010a3a:	2201      	movs	r2, #1
10010a3c:	4610      	mov	r0, r2
10010a3e:	bd30      	pop	{r4, r5, pc}
10010a40:	4283      	cmp	r3, r0
10010a42:	d3f3      	bcc.n	10010a2c <__mcmp+0x18>
10010a44:	e7fa      	b.n	10010a3c <__mcmp+0x28>
10010a46:	f04f 32ff 	mov.w	r2, #4294967295
10010a4a:	e7f7      	b.n	10010a3c <__mcmp+0x28>

10010a4c <__mdiff>:
10010a4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
10010a50:	460c      	mov	r4, r1
10010a52:	4606      	mov	r6, r0
10010a54:	4611      	mov	r1, r2
10010a56:	4620      	mov	r0, r4
10010a58:	4690      	mov	r8, r2
10010a5a:	f7ff ffdb 	bl	10010a14 <__mcmp>
10010a5e:	1e05      	subs	r5, r0, #0
10010a60:	d110      	bne.n	10010a84 <__mdiff+0x38>
10010a62:	4629      	mov	r1, r5
10010a64:	4630      	mov	r0, r6
10010a66:	f7ff fd59 	bl	1001051c <_Balloc>
10010a6a:	b930      	cbnz	r0, 10010a7a <__mdiff+0x2e>
10010a6c:	4b3a      	ldr	r3, [pc, #232]	; (10010b58 <__mdiff+0x10c>)
10010a6e:	4602      	mov	r2, r0
10010a70:	f240 2137 	movw	r1, #567	; 0x237
10010a74:	4839      	ldr	r0, [pc, #228]	; (10010b5c <__mdiff+0x110>)
10010a76:	f7fd ff1b 	bl	1000e8b0 <__assert_func>
10010a7a:	2301      	movs	r3, #1
10010a7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
10010a80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
10010a84:	bfa4      	itt	ge
10010a86:	4643      	movge	r3, r8
10010a88:	46a0      	movge	r8, r4
10010a8a:	4630      	mov	r0, r6
10010a8c:	f8d8 1004 	ldr.w	r1, [r8, #4]
10010a90:	bfa6      	itte	ge
10010a92:	461c      	movge	r4, r3
10010a94:	2500      	movge	r5, #0
10010a96:	2501      	movlt	r5, #1
10010a98:	f7ff fd40 	bl	1001051c <_Balloc>
10010a9c:	b920      	cbnz	r0, 10010aa8 <__mdiff+0x5c>
10010a9e:	4b2e      	ldr	r3, [pc, #184]	; (10010b58 <__mdiff+0x10c>)
10010aa0:	4602      	mov	r2, r0
10010aa2:	f240 2145 	movw	r1, #581	; 0x245
10010aa6:	e7e5      	b.n	10010a74 <__mdiff+0x28>
10010aa8:	f8d8 7010 	ldr.w	r7, [r8, #16]
10010aac:	6926      	ldr	r6, [r4, #16]
10010aae:	60c5      	str	r5, [r0, #12]
10010ab0:	f104 0914 	add.w	r9, r4, #20
10010ab4:	f108 0514 	add.w	r5, r8, #20
10010ab8:	f100 0e14 	add.w	lr, r0, #20
10010abc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
10010ac0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
10010ac4:	f108 0210 	add.w	r2, r8, #16
10010ac8:	46f2      	mov	sl, lr
10010aca:	2100      	movs	r1, #0
10010acc:	f859 3b04 	ldr.w	r3, [r9], #4
10010ad0:	f852 bf04 	ldr.w	fp, [r2, #4]!
10010ad4:	fa11 f88b 	uxtah	r8, r1, fp
10010ad8:	b299      	uxth	r1, r3
10010ada:	0c1b      	lsrs	r3, r3, #16
10010adc:	eba8 0801 	sub.w	r8, r8, r1
10010ae0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
10010ae4:	eb03 4328 	add.w	r3, r3, r8, asr #16
10010ae8:	fa1f f888 	uxth.w	r8, r8
10010aec:	1419      	asrs	r1, r3, #16
10010aee:	454e      	cmp	r6, r9
10010af0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
10010af4:	f84a 3b04 	str.w	r3, [sl], #4
10010af8:	d8e8      	bhi.n	10010acc <__mdiff+0x80>
10010afa:	1b33      	subs	r3, r6, r4
10010afc:	3b15      	subs	r3, #21
10010afe:	f023 0303 	bic.w	r3, r3, #3
10010b02:	3304      	adds	r3, #4
10010b04:	3415      	adds	r4, #21
10010b06:	42a6      	cmp	r6, r4
10010b08:	bf38      	it	cc
10010b0a:	2304      	movcc	r3, #4
10010b0c:	441d      	add	r5, r3
10010b0e:	4473      	add	r3, lr
10010b10:	469e      	mov	lr, r3
10010b12:	462e      	mov	r6, r5
10010b14:	4566      	cmp	r6, ip
10010b16:	d30e      	bcc.n	10010b36 <__mdiff+0xea>
10010b18:	f10c 0203 	add.w	r2, ip, #3
10010b1c:	1b52      	subs	r2, r2, r5
10010b1e:	f022 0203 	bic.w	r2, r2, #3
10010b22:	3d03      	subs	r5, #3
10010b24:	45ac      	cmp	ip, r5
10010b26:	bf38      	it	cc
10010b28:	2200      	movcc	r2, #0
10010b2a:	4413      	add	r3, r2
10010b2c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
10010b30:	b17a      	cbz	r2, 10010b52 <__mdiff+0x106>
10010b32:	6107      	str	r7, [r0, #16]
10010b34:	e7a4      	b.n	10010a80 <__mdiff+0x34>
10010b36:	f856 8b04 	ldr.w	r8, [r6], #4
10010b3a:	fa11 f288 	uxtah	r2, r1, r8
10010b3e:	1414      	asrs	r4, r2, #16
10010b40:	eb04 4418 	add.w	r4, r4, r8, lsr #16
10010b44:	b292      	uxth	r2, r2
10010b46:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
10010b4a:	f84e 2b04 	str.w	r2, [lr], #4
10010b4e:	1421      	asrs	r1, r4, #16
10010b50:	e7e0      	b.n	10010b14 <__mdiff+0xc8>
10010b52:	3f01      	subs	r7, #1
10010b54:	e7ea      	b.n	10010b2c <__mdiff+0xe0>
10010b56:	bf00      	nop
10010b58:	10014344 	.word	0x10014344
10010b5c:	10014355 	.word	0x10014355

10010b60 <__d2b>:
10010b60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
10010b64:	460f      	mov	r7, r1
10010b66:	2101      	movs	r1, #1
10010b68:	ec59 8b10 	vmov	r8, r9, d0
10010b6c:	4616      	mov	r6, r2
10010b6e:	f7ff fcd5 	bl	1001051c <_Balloc>
10010b72:	4604      	mov	r4, r0
10010b74:	b930      	cbnz	r0, 10010b84 <__d2b+0x24>
10010b76:	4602      	mov	r2, r0
10010b78:	4b24      	ldr	r3, [pc, #144]	; (10010c0c <__d2b+0xac>)
10010b7a:	4825      	ldr	r0, [pc, #148]	; (10010c10 <__d2b+0xb0>)
10010b7c:	f240 310f 	movw	r1, #783	; 0x30f
10010b80:	f7fd fe96 	bl	1000e8b0 <__assert_func>
10010b84:	f3c9 550a 	ubfx	r5, r9, #20, #11
10010b88:	f3c9 0313 	ubfx	r3, r9, #0, #20
10010b8c:	bb2d      	cbnz	r5, 10010bda <__d2b+0x7a>
10010b8e:	9301      	str	r3, [sp, #4]
10010b90:	f1b8 0300 	subs.w	r3, r8, #0
10010b94:	d026      	beq.n	10010be4 <__d2b+0x84>
10010b96:	4668      	mov	r0, sp
10010b98:	9300      	str	r3, [sp, #0]
10010b9a:	f7ff fd87 	bl	100106ac <__lo0bits>
10010b9e:	e9dd 1200 	ldrd	r1, r2, [sp]
10010ba2:	b1e8      	cbz	r0, 10010be0 <__d2b+0x80>
10010ba4:	f1c0 0320 	rsb	r3, r0, #32
10010ba8:	fa02 f303 	lsl.w	r3, r2, r3
10010bac:	430b      	orrs	r3, r1
10010bae:	40c2      	lsrs	r2, r0
10010bb0:	6163      	str	r3, [r4, #20]
10010bb2:	9201      	str	r2, [sp, #4]
10010bb4:	9b01      	ldr	r3, [sp, #4]
10010bb6:	61a3      	str	r3, [r4, #24]
10010bb8:	2b00      	cmp	r3, #0
10010bba:	bf14      	ite	ne
10010bbc:	2202      	movne	r2, #2
10010bbe:	2201      	moveq	r2, #1
10010bc0:	6122      	str	r2, [r4, #16]
10010bc2:	b1bd      	cbz	r5, 10010bf4 <__d2b+0x94>
10010bc4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
10010bc8:	4405      	add	r5, r0
10010bca:	603d      	str	r5, [r7, #0]
10010bcc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
10010bd0:	6030      	str	r0, [r6, #0]
10010bd2:	4620      	mov	r0, r4
10010bd4:	b003      	add	sp, #12
10010bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
10010bda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
10010bde:	e7d6      	b.n	10010b8e <__d2b+0x2e>
10010be0:	6161      	str	r1, [r4, #20]
10010be2:	e7e7      	b.n	10010bb4 <__d2b+0x54>
10010be4:	a801      	add	r0, sp, #4
10010be6:	f7ff fd61 	bl	100106ac <__lo0bits>
10010bea:	9b01      	ldr	r3, [sp, #4]
10010bec:	6163      	str	r3, [r4, #20]
10010bee:	3020      	adds	r0, #32
10010bf0:	2201      	movs	r2, #1
10010bf2:	e7e5      	b.n	10010bc0 <__d2b+0x60>
10010bf4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
10010bf8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
10010bfc:	6038      	str	r0, [r7, #0]
10010bfe:	6918      	ldr	r0, [r3, #16]
10010c00:	f7ff fd34 	bl	1001066c <__hi0bits>
10010c04:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
10010c08:	e7e2      	b.n	10010bd0 <__d2b+0x70>
10010c0a:	bf00      	nop
10010c0c:	10014344 	.word	0x10014344
10010c10:	10014355 	.word	0x10014355

10010c14 <_malloc_usable_size_r>:
10010c14:	f851 3c04 	ldr.w	r3, [r1, #-4]
10010c18:	1f18      	subs	r0, r3, #4
10010c1a:	2b00      	cmp	r3, #0
10010c1c:	bfbc      	itt	lt
10010c1e:	580b      	ldrlt	r3, [r1, r0]
10010c20:	18c0      	addlt	r0, r0, r3
10010c22:	4770      	bx	lr

10010c24 <__ssputs_r>:
10010c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10010c28:	688e      	ldr	r6, [r1, #8]
10010c2a:	461f      	mov	r7, r3
10010c2c:	42be      	cmp	r6, r7
10010c2e:	680b      	ldr	r3, [r1, #0]
10010c30:	4682      	mov	sl, r0
10010c32:	460c      	mov	r4, r1
10010c34:	4690      	mov	r8, r2
10010c36:	d82c      	bhi.n	10010c92 <__ssputs_r+0x6e>
10010c38:	898a      	ldrh	r2, [r1, #12]
10010c3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
10010c3e:	d026      	beq.n	10010c8e <__ssputs_r+0x6a>
10010c40:	6965      	ldr	r5, [r4, #20]
10010c42:	6909      	ldr	r1, [r1, #16]
10010c44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
10010c48:	eba3 0901 	sub.w	r9, r3, r1
10010c4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
10010c50:	1c7b      	adds	r3, r7, #1
10010c52:	444b      	add	r3, r9
10010c54:	106d      	asrs	r5, r5, #1
10010c56:	429d      	cmp	r5, r3
10010c58:	bf38      	it	cc
10010c5a:	461d      	movcc	r5, r3
10010c5c:	0553      	lsls	r3, r2, #21
10010c5e:	d527      	bpl.n	10010cb0 <__ssputs_r+0x8c>
10010c60:	4629      	mov	r1, r5
10010c62:	f7fd fe73 	bl	1000e94c <_malloc_r>
10010c66:	4606      	mov	r6, r0
10010c68:	b360      	cbz	r0, 10010cc4 <__ssputs_r+0xa0>
10010c6a:	6921      	ldr	r1, [r4, #16]
10010c6c:	464a      	mov	r2, r9
10010c6e:	f7fe fd7a 	bl	1000f766 <memcpy>
10010c72:	89a3      	ldrh	r3, [r4, #12]
10010c74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
10010c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
10010c7c:	81a3      	strh	r3, [r4, #12]
10010c7e:	6126      	str	r6, [r4, #16]
10010c80:	6165      	str	r5, [r4, #20]
10010c82:	444e      	add	r6, r9
10010c84:	eba5 0509 	sub.w	r5, r5, r9
10010c88:	6026      	str	r6, [r4, #0]
10010c8a:	60a5      	str	r5, [r4, #8]
10010c8c:	463e      	mov	r6, r7
10010c8e:	42be      	cmp	r6, r7
10010c90:	d900      	bls.n	10010c94 <__ssputs_r+0x70>
10010c92:	463e      	mov	r6, r7
10010c94:	6820      	ldr	r0, [r4, #0]
10010c96:	4632      	mov	r2, r6
10010c98:	4641      	mov	r1, r8
10010c9a:	f000 fba3 	bl	100113e4 <memmove>
10010c9e:	68a3      	ldr	r3, [r4, #8]
10010ca0:	1b9b      	subs	r3, r3, r6
10010ca2:	60a3      	str	r3, [r4, #8]
10010ca4:	6823      	ldr	r3, [r4, #0]
10010ca6:	4433      	add	r3, r6
10010ca8:	6023      	str	r3, [r4, #0]
10010caa:	2000      	movs	r0, #0
10010cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10010cb0:	462a      	mov	r2, r5
10010cb2:	f7fd fed7 	bl	1000ea64 <_realloc_r>
10010cb6:	4606      	mov	r6, r0
10010cb8:	2800      	cmp	r0, #0
10010cba:	d1e0      	bne.n	10010c7e <__ssputs_r+0x5a>
10010cbc:	6921      	ldr	r1, [r4, #16]
10010cbe:	4650      	mov	r0, sl
10010cc0:	f7ff fbe0 	bl	10010484 <_free_r>
10010cc4:	230c      	movs	r3, #12
10010cc6:	f8ca 3000 	str.w	r3, [sl]
10010cca:	89a3      	ldrh	r3, [r4, #12]
10010ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10010cd0:	81a3      	strh	r3, [r4, #12]
10010cd2:	f04f 30ff 	mov.w	r0, #4294967295
10010cd6:	e7e9      	b.n	10010cac <__ssputs_r+0x88>

10010cd8 <_svfiprintf_r>:
10010cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10010cdc:	4698      	mov	r8, r3
10010cde:	898b      	ldrh	r3, [r1, #12]
10010ce0:	061b      	lsls	r3, r3, #24
10010ce2:	b09d      	sub	sp, #116	; 0x74
10010ce4:	4607      	mov	r7, r0
10010ce6:	460d      	mov	r5, r1
10010ce8:	4614      	mov	r4, r2
10010cea:	d50e      	bpl.n	10010d0a <_svfiprintf_r+0x32>
10010cec:	690b      	ldr	r3, [r1, #16]
10010cee:	b963      	cbnz	r3, 10010d0a <_svfiprintf_r+0x32>
10010cf0:	2140      	movs	r1, #64	; 0x40
10010cf2:	f7fd fe2b 	bl	1000e94c <_malloc_r>
10010cf6:	6028      	str	r0, [r5, #0]
10010cf8:	6128      	str	r0, [r5, #16]
10010cfa:	b920      	cbnz	r0, 10010d06 <_svfiprintf_r+0x2e>
10010cfc:	230c      	movs	r3, #12
10010cfe:	603b      	str	r3, [r7, #0]
10010d00:	f04f 30ff 	mov.w	r0, #4294967295
10010d04:	e0d0      	b.n	10010ea8 <_svfiprintf_r+0x1d0>
10010d06:	2340      	movs	r3, #64	; 0x40
10010d08:	616b      	str	r3, [r5, #20]
10010d0a:	2300      	movs	r3, #0
10010d0c:	9309      	str	r3, [sp, #36]	; 0x24
10010d0e:	2320      	movs	r3, #32
10010d10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
10010d14:	f8cd 800c 	str.w	r8, [sp, #12]
10010d18:	2330      	movs	r3, #48	; 0x30
10010d1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 10010ec0 <_svfiprintf_r+0x1e8>
10010d1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
10010d22:	f04f 0901 	mov.w	r9, #1
10010d26:	4623      	mov	r3, r4
10010d28:	469a      	mov	sl, r3
10010d2a:	f813 2b01 	ldrb.w	r2, [r3], #1
10010d2e:	b10a      	cbz	r2, 10010d34 <_svfiprintf_r+0x5c>
10010d30:	2a25      	cmp	r2, #37	; 0x25
10010d32:	d1f9      	bne.n	10010d28 <_svfiprintf_r+0x50>
10010d34:	ebba 0b04 	subs.w	fp, sl, r4
10010d38:	d00b      	beq.n	10010d52 <_svfiprintf_r+0x7a>
10010d3a:	465b      	mov	r3, fp
10010d3c:	4622      	mov	r2, r4
10010d3e:	4629      	mov	r1, r5
10010d40:	4638      	mov	r0, r7
10010d42:	f7ff ff6f 	bl	10010c24 <__ssputs_r>
10010d46:	3001      	adds	r0, #1
10010d48:	f000 80a9 	beq.w	10010e9e <_svfiprintf_r+0x1c6>
10010d4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
10010d4e:	445a      	add	r2, fp
10010d50:	9209      	str	r2, [sp, #36]	; 0x24
10010d52:	f89a 3000 	ldrb.w	r3, [sl]
10010d56:	2b00      	cmp	r3, #0
10010d58:	f000 80a1 	beq.w	10010e9e <_svfiprintf_r+0x1c6>
10010d5c:	2300      	movs	r3, #0
10010d5e:	f04f 32ff 	mov.w	r2, #4294967295
10010d62:	e9cd 2305 	strd	r2, r3, [sp, #20]
10010d66:	f10a 0a01 	add.w	sl, sl, #1
10010d6a:	9304      	str	r3, [sp, #16]
10010d6c:	9307      	str	r3, [sp, #28]
10010d6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
10010d72:	931a      	str	r3, [sp, #104]	; 0x68
10010d74:	4654      	mov	r4, sl
10010d76:	2205      	movs	r2, #5
10010d78:	f814 1b01 	ldrb.w	r1, [r4], #1
10010d7c:	4850      	ldr	r0, [pc, #320]	; (10010ec0 <_svfiprintf_r+0x1e8>)
10010d7e:	f7ef f96f 	bl	10000060 <memchr>
10010d82:	9a04      	ldr	r2, [sp, #16]
10010d84:	b9d8      	cbnz	r0, 10010dbe <_svfiprintf_r+0xe6>
10010d86:	06d0      	lsls	r0, r2, #27
10010d88:	bf44      	itt	mi
10010d8a:	2320      	movmi	r3, #32
10010d8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
10010d90:	0711      	lsls	r1, r2, #28
10010d92:	bf44      	itt	mi
10010d94:	232b      	movmi	r3, #43	; 0x2b
10010d96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
10010d9a:	f89a 3000 	ldrb.w	r3, [sl]
10010d9e:	2b2a      	cmp	r3, #42	; 0x2a
10010da0:	d015      	beq.n	10010dce <_svfiprintf_r+0xf6>
10010da2:	9a07      	ldr	r2, [sp, #28]
10010da4:	4654      	mov	r4, sl
10010da6:	2000      	movs	r0, #0
10010da8:	f04f 0c0a 	mov.w	ip, #10
10010dac:	4621      	mov	r1, r4
10010dae:	f811 3b01 	ldrb.w	r3, [r1], #1
10010db2:	3b30      	subs	r3, #48	; 0x30
10010db4:	2b09      	cmp	r3, #9
10010db6:	d94d      	bls.n	10010e54 <_svfiprintf_r+0x17c>
10010db8:	b1b0      	cbz	r0, 10010de8 <_svfiprintf_r+0x110>
10010dba:	9207      	str	r2, [sp, #28]
10010dbc:	e014      	b.n	10010de8 <_svfiprintf_r+0x110>
10010dbe:	eba0 0308 	sub.w	r3, r0, r8
10010dc2:	fa09 f303 	lsl.w	r3, r9, r3
10010dc6:	4313      	orrs	r3, r2
10010dc8:	9304      	str	r3, [sp, #16]
10010dca:	46a2      	mov	sl, r4
10010dcc:	e7d2      	b.n	10010d74 <_svfiprintf_r+0x9c>
10010dce:	9b03      	ldr	r3, [sp, #12]
10010dd0:	1d19      	adds	r1, r3, #4
10010dd2:	681b      	ldr	r3, [r3, #0]
10010dd4:	9103      	str	r1, [sp, #12]
10010dd6:	2b00      	cmp	r3, #0
10010dd8:	bfbb      	ittet	lt
10010dda:	425b      	neglt	r3, r3
10010ddc:	f042 0202 	orrlt.w	r2, r2, #2
10010de0:	9307      	strge	r3, [sp, #28]
10010de2:	9307      	strlt	r3, [sp, #28]
10010de4:	bfb8      	it	lt
10010de6:	9204      	strlt	r2, [sp, #16]
10010de8:	7823      	ldrb	r3, [r4, #0]
10010dea:	2b2e      	cmp	r3, #46	; 0x2e
10010dec:	d10c      	bne.n	10010e08 <_svfiprintf_r+0x130>
10010dee:	7863      	ldrb	r3, [r4, #1]
10010df0:	2b2a      	cmp	r3, #42	; 0x2a
10010df2:	d134      	bne.n	10010e5e <_svfiprintf_r+0x186>
10010df4:	9b03      	ldr	r3, [sp, #12]
10010df6:	1d1a      	adds	r2, r3, #4
10010df8:	681b      	ldr	r3, [r3, #0]
10010dfa:	9203      	str	r2, [sp, #12]
10010dfc:	2b00      	cmp	r3, #0
10010dfe:	bfb8      	it	lt
10010e00:	f04f 33ff 	movlt.w	r3, #4294967295
10010e04:	3402      	adds	r4, #2
10010e06:	9305      	str	r3, [sp, #20]
10010e08:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 10010ed0 <_svfiprintf_r+0x1f8>
10010e0c:	7821      	ldrb	r1, [r4, #0]
10010e0e:	2203      	movs	r2, #3
10010e10:	4650      	mov	r0, sl
10010e12:	f7ef f925 	bl	10000060 <memchr>
10010e16:	b138      	cbz	r0, 10010e28 <_svfiprintf_r+0x150>
10010e18:	9b04      	ldr	r3, [sp, #16]
10010e1a:	eba0 000a 	sub.w	r0, r0, sl
10010e1e:	2240      	movs	r2, #64	; 0x40
10010e20:	4082      	lsls	r2, r0
10010e22:	4313      	orrs	r3, r2
10010e24:	3401      	adds	r4, #1
10010e26:	9304      	str	r3, [sp, #16]
10010e28:	f814 1b01 	ldrb.w	r1, [r4], #1
10010e2c:	4825      	ldr	r0, [pc, #148]	; (10010ec4 <_svfiprintf_r+0x1ec>)
10010e2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
10010e32:	2206      	movs	r2, #6
10010e34:	f7ef f914 	bl	10000060 <memchr>
10010e38:	2800      	cmp	r0, #0
10010e3a:	d038      	beq.n	10010eae <_svfiprintf_r+0x1d6>
10010e3c:	4b22      	ldr	r3, [pc, #136]	; (10010ec8 <_svfiprintf_r+0x1f0>)
10010e3e:	bb1b      	cbnz	r3, 10010e88 <_svfiprintf_r+0x1b0>
10010e40:	9b03      	ldr	r3, [sp, #12]
10010e42:	3307      	adds	r3, #7
10010e44:	f023 0307 	bic.w	r3, r3, #7
10010e48:	3308      	adds	r3, #8
10010e4a:	9303      	str	r3, [sp, #12]
10010e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
10010e4e:	4433      	add	r3, r6
10010e50:	9309      	str	r3, [sp, #36]	; 0x24
10010e52:	e768      	b.n	10010d26 <_svfiprintf_r+0x4e>
10010e54:	fb0c 3202 	mla	r2, ip, r2, r3
10010e58:	460c      	mov	r4, r1
10010e5a:	2001      	movs	r0, #1
10010e5c:	e7a6      	b.n	10010dac <_svfiprintf_r+0xd4>
10010e5e:	2300      	movs	r3, #0
10010e60:	3401      	adds	r4, #1
10010e62:	9305      	str	r3, [sp, #20]
10010e64:	4619      	mov	r1, r3
10010e66:	f04f 0c0a 	mov.w	ip, #10
10010e6a:	4620      	mov	r0, r4
10010e6c:	f810 2b01 	ldrb.w	r2, [r0], #1
10010e70:	3a30      	subs	r2, #48	; 0x30
10010e72:	2a09      	cmp	r2, #9
10010e74:	d903      	bls.n	10010e7e <_svfiprintf_r+0x1a6>
10010e76:	2b00      	cmp	r3, #0
10010e78:	d0c6      	beq.n	10010e08 <_svfiprintf_r+0x130>
10010e7a:	9105      	str	r1, [sp, #20]
10010e7c:	e7c4      	b.n	10010e08 <_svfiprintf_r+0x130>
10010e7e:	fb0c 2101 	mla	r1, ip, r1, r2
10010e82:	4604      	mov	r4, r0
10010e84:	2301      	movs	r3, #1
10010e86:	e7f0      	b.n	10010e6a <_svfiprintf_r+0x192>
10010e88:	ab03      	add	r3, sp, #12
10010e8a:	9300      	str	r3, [sp, #0]
10010e8c:	462a      	mov	r2, r5
10010e8e:	4b0f      	ldr	r3, [pc, #60]	; (10010ecc <_svfiprintf_r+0x1f4>)
10010e90:	a904      	add	r1, sp, #16
10010e92:	4638      	mov	r0, r7
10010e94:	f7fd feb6 	bl	1000ec04 <_printf_float>
10010e98:	1c42      	adds	r2, r0, #1
10010e9a:	4606      	mov	r6, r0
10010e9c:	d1d6      	bne.n	10010e4c <_svfiprintf_r+0x174>
10010e9e:	89ab      	ldrh	r3, [r5, #12]
10010ea0:	065b      	lsls	r3, r3, #25
10010ea2:	f53f af2d 	bmi.w	10010d00 <_svfiprintf_r+0x28>
10010ea6:	9809      	ldr	r0, [sp, #36]	; 0x24
10010ea8:	b01d      	add	sp, #116	; 0x74
10010eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10010eae:	ab03      	add	r3, sp, #12
10010eb0:	9300      	str	r3, [sp, #0]
10010eb2:	462a      	mov	r2, r5
10010eb4:	4b05      	ldr	r3, [pc, #20]	; (10010ecc <_svfiprintf_r+0x1f4>)
10010eb6:	a904      	add	r1, sp, #16
10010eb8:	4638      	mov	r0, r7
10010eba:	f7fe f947 	bl	1000f14c <_printf_i>
10010ebe:	e7eb      	b.n	10010e98 <_svfiprintf_r+0x1c0>
10010ec0:	100144ac 	.word	0x100144ac
10010ec4:	100144b6 	.word	0x100144b6
10010ec8:	1000ec05 	.word	0x1000ec05
10010ecc:	10010c25 	.word	0x10010c25
10010ed0:	100144b2 	.word	0x100144b2

10010ed4 <__sfputc_r>:
10010ed4:	6893      	ldr	r3, [r2, #8]
10010ed6:	3b01      	subs	r3, #1
10010ed8:	2b00      	cmp	r3, #0
10010eda:	b410      	push	{r4}
10010edc:	6093      	str	r3, [r2, #8]
10010ede:	da08      	bge.n	10010ef2 <__sfputc_r+0x1e>
10010ee0:	6994      	ldr	r4, [r2, #24]
10010ee2:	42a3      	cmp	r3, r4
10010ee4:	db01      	blt.n	10010eea <__sfputc_r+0x16>
10010ee6:	290a      	cmp	r1, #10
10010ee8:	d103      	bne.n	10010ef2 <__sfputc_r+0x1e>
10010eea:	f85d 4b04 	ldr.w	r4, [sp], #4
10010eee:	f000 b9e3 	b.w	100112b8 <__swbuf_r>
10010ef2:	6813      	ldr	r3, [r2, #0]
10010ef4:	1c58      	adds	r0, r3, #1
10010ef6:	6010      	str	r0, [r2, #0]
10010ef8:	7019      	strb	r1, [r3, #0]
10010efa:	4608      	mov	r0, r1
10010efc:	f85d 4b04 	ldr.w	r4, [sp], #4
10010f00:	4770      	bx	lr

10010f02 <__sfputs_r>:
10010f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010f04:	4606      	mov	r6, r0
10010f06:	460f      	mov	r7, r1
10010f08:	4614      	mov	r4, r2
10010f0a:	18d5      	adds	r5, r2, r3
10010f0c:	42ac      	cmp	r4, r5
10010f0e:	d101      	bne.n	10010f14 <__sfputs_r+0x12>
10010f10:	2000      	movs	r0, #0
10010f12:	e007      	b.n	10010f24 <__sfputs_r+0x22>
10010f14:	f814 1b01 	ldrb.w	r1, [r4], #1
10010f18:	463a      	mov	r2, r7
10010f1a:	4630      	mov	r0, r6
10010f1c:	f7ff ffda 	bl	10010ed4 <__sfputc_r>
10010f20:	1c43      	adds	r3, r0, #1
10010f22:	d1f3      	bne.n	10010f0c <__sfputs_r+0xa>
10010f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10010f28 <_vfiprintf_r>:
10010f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10010f2c:	460d      	mov	r5, r1
10010f2e:	b09d      	sub	sp, #116	; 0x74
10010f30:	4614      	mov	r4, r2
10010f32:	4698      	mov	r8, r3
10010f34:	4606      	mov	r6, r0
10010f36:	b118      	cbz	r0, 10010f40 <_vfiprintf_r+0x18>
10010f38:	6a03      	ldr	r3, [r0, #32]
10010f3a:	b90b      	cbnz	r3, 10010f40 <_vfiprintf_r+0x18>
10010f3c:	f7fe fab4 	bl	1000f4a8 <__sinit>
10010f40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
10010f42:	07d9      	lsls	r1, r3, #31
10010f44:	d405      	bmi.n	10010f52 <_vfiprintf_r+0x2a>
10010f46:	89ab      	ldrh	r3, [r5, #12]
10010f48:	059a      	lsls	r2, r3, #22
10010f4a:	d402      	bmi.n	10010f52 <_vfiprintf_r+0x2a>
10010f4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
10010f4e:	f7fe fc08 	bl	1000f762 <__retarget_lock_acquire_recursive>
10010f52:	89ab      	ldrh	r3, [r5, #12]
10010f54:	071b      	lsls	r3, r3, #28
10010f56:	d501      	bpl.n	10010f5c <_vfiprintf_r+0x34>
10010f58:	692b      	ldr	r3, [r5, #16]
10010f5a:	b99b      	cbnz	r3, 10010f84 <_vfiprintf_r+0x5c>
10010f5c:	4629      	mov	r1, r5
10010f5e:	4630      	mov	r0, r6
10010f60:	f000 f9e8 	bl	10011334 <__swsetup_r>
10010f64:	b170      	cbz	r0, 10010f84 <_vfiprintf_r+0x5c>
10010f66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
10010f68:	07dc      	lsls	r4, r3, #31
10010f6a:	d504      	bpl.n	10010f76 <_vfiprintf_r+0x4e>
10010f6c:	f04f 30ff 	mov.w	r0, #4294967295
10010f70:	b01d      	add	sp, #116	; 0x74
10010f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10010f76:	89ab      	ldrh	r3, [r5, #12]
10010f78:	0598      	lsls	r0, r3, #22
10010f7a:	d4f7      	bmi.n	10010f6c <_vfiprintf_r+0x44>
10010f7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
10010f7e:	f7fe fbf1 	bl	1000f764 <__retarget_lock_release_recursive>
10010f82:	e7f3      	b.n	10010f6c <_vfiprintf_r+0x44>
10010f84:	2300      	movs	r3, #0
10010f86:	9309      	str	r3, [sp, #36]	; 0x24
10010f88:	2320      	movs	r3, #32
10010f8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
10010f8e:	f8cd 800c 	str.w	r8, [sp, #12]
10010f92:	2330      	movs	r3, #48	; 0x30
10010f94:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 10011148 <_vfiprintf_r+0x220>
10010f98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
10010f9c:	f04f 0901 	mov.w	r9, #1
10010fa0:	4623      	mov	r3, r4
10010fa2:	469a      	mov	sl, r3
10010fa4:	f813 2b01 	ldrb.w	r2, [r3], #1
10010fa8:	b10a      	cbz	r2, 10010fae <_vfiprintf_r+0x86>
10010faa:	2a25      	cmp	r2, #37	; 0x25
10010fac:	d1f9      	bne.n	10010fa2 <_vfiprintf_r+0x7a>
10010fae:	ebba 0b04 	subs.w	fp, sl, r4
10010fb2:	d00b      	beq.n	10010fcc <_vfiprintf_r+0xa4>
10010fb4:	465b      	mov	r3, fp
10010fb6:	4622      	mov	r2, r4
10010fb8:	4629      	mov	r1, r5
10010fba:	4630      	mov	r0, r6
10010fbc:	f7ff ffa1 	bl	10010f02 <__sfputs_r>
10010fc0:	3001      	adds	r0, #1
10010fc2:	f000 80a9 	beq.w	10011118 <_vfiprintf_r+0x1f0>
10010fc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
10010fc8:	445a      	add	r2, fp
10010fca:	9209      	str	r2, [sp, #36]	; 0x24
10010fcc:	f89a 3000 	ldrb.w	r3, [sl]
10010fd0:	2b00      	cmp	r3, #0
10010fd2:	f000 80a1 	beq.w	10011118 <_vfiprintf_r+0x1f0>
10010fd6:	2300      	movs	r3, #0
10010fd8:	f04f 32ff 	mov.w	r2, #4294967295
10010fdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
10010fe0:	f10a 0a01 	add.w	sl, sl, #1
10010fe4:	9304      	str	r3, [sp, #16]
10010fe6:	9307      	str	r3, [sp, #28]
10010fe8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
10010fec:	931a      	str	r3, [sp, #104]	; 0x68
10010fee:	4654      	mov	r4, sl
10010ff0:	2205      	movs	r2, #5
10010ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
10010ff6:	4854      	ldr	r0, [pc, #336]	; (10011148 <_vfiprintf_r+0x220>)
10010ff8:	f7ef f832 	bl	10000060 <memchr>
10010ffc:	9a04      	ldr	r2, [sp, #16]
10010ffe:	b9d8      	cbnz	r0, 10011038 <_vfiprintf_r+0x110>
10011000:	06d1      	lsls	r1, r2, #27
10011002:	bf44      	itt	mi
10011004:	2320      	movmi	r3, #32
10011006:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
1001100a:	0713      	lsls	r3, r2, #28
1001100c:	bf44      	itt	mi
1001100e:	232b      	movmi	r3, #43	; 0x2b
10011010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
10011014:	f89a 3000 	ldrb.w	r3, [sl]
10011018:	2b2a      	cmp	r3, #42	; 0x2a
1001101a:	d015      	beq.n	10011048 <_vfiprintf_r+0x120>
1001101c:	9a07      	ldr	r2, [sp, #28]
1001101e:	4654      	mov	r4, sl
10011020:	2000      	movs	r0, #0
10011022:	f04f 0c0a 	mov.w	ip, #10
10011026:	4621      	mov	r1, r4
10011028:	f811 3b01 	ldrb.w	r3, [r1], #1
1001102c:	3b30      	subs	r3, #48	; 0x30
1001102e:	2b09      	cmp	r3, #9
10011030:	d94d      	bls.n	100110ce <_vfiprintf_r+0x1a6>
10011032:	b1b0      	cbz	r0, 10011062 <_vfiprintf_r+0x13a>
10011034:	9207      	str	r2, [sp, #28]
10011036:	e014      	b.n	10011062 <_vfiprintf_r+0x13a>
10011038:	eba0 0308 	sub.w	r3, r0, r8
1001103c:	fa09 f303 	lsl.w	r3, r9, r3
10011040:	4313      	orrs	r3, r2
10011042:	9304      	str	r3, [sp, #16]
10011044:	46a2      	mov	sl, r4
10011046:	e7d2      	b.n	10010fee <_vfiprintf_r+0xc6>
10011048:	9b03      	ldr	r3, [sp, #12]
1001104a:	1d19      	adds	r1, r3, #4
1001104c:	681b      	ldr	r3, [r3, #0]
1001104e:	9103      	str	r1, [sp, #12]
10011050:	2b00      	cmp	r3, #0
10011052:	bfbb      	ittet	lt
10011054:	425b      	neglt	r3, r3
10011056:	f042 0202 	orrlt.w	r2, r2, #2
1001105a:	9307      	strge	r3, [sp, #28]
1001105c:	9307      	strlt	r3, [sp, #28]
1001105e:	bfb8      	it	lt
10011060:	9204      	strlt	r2, [sp, #16]
10011062:	7823      	ldrb	r3, [r4, #0]
10011064:	2b2e      	cmp	r3, #46	; 0x2e
10011066:	d10c      	bne.n	10011082 <_vfiprintf_r+0x15a>
10011068:	7863      	ldrb	r3, [r4, #1]
1001106a:	2b2a      	cmp	r3, #42	; 0x2a
1001106c:	d134      	bne.n	100110d8 <_vfiprintf_r+0x1b0>
1001106e:	9b03      	ldr	r3, [sp, #12]
10011070:	1d1a      	adds	r2, r3, #4
10011072:	681b      	ldr	r3, [r3, #0]
10011074:	9203      	str	r2, [sp, #12]
10011076:	2b00      	cmp	r3, #0
10011078:	bfb8      	it	lt
1001107a:	f04f 33ff 	movlt.w	r3, #4294967295
1001107e:	3402      	adds	r4, #2
10011080:	9305      	str	r3, [sp, #20]
10011082:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 10011158 <_vfiprintf_r+0x230>
10011086:	7821      	ldrb	r1, [r4, #0]
10011088:	2203      	movs	r2, #3
1001108a:	4650      	mov	r0, sl
1001108c:	f7ee ffe8 	bl	10000060 <memchr>
10011090:	b138      	cbz	r0, 100110a2 <_vfiprintf_r+0x17a>
10011092:	9b04      	ldr	r3, [sp, #16]
10011094:	eba0 000a 	sub.w	r0, r0, sl
10011098:	2240      	movs	r2, #64	; 0x40
1001109a:	4082      	lsls	r2, r0
1001109c:	4313      	orrs	r3, r2
1001109e:	3401      	adds	r4, #1
100110a0:	9304      	str	r3, [sp, #16]
100110a2:	f814 1b01 	ldrb.w	r1, [r4], #1
100110a6:	4829      	ldr	r0, [pc, #164]	; (1001114c <_vfiprintf_r+0x224>)
100110a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
100110ac:	2206      	movs	r2, #6
100110ae:	f7ee ffd7 	bl	10000060 <memchr>
100110b2:	2800      	cmp	r0, #0
100110b4:	d03f      	beq.n	10011136 <_vfiprintf_r+0x20e>
100110b6:	4b26      	ldr	r3, [pc, #152]	; (10011150 <_vfiprintf_r+0x228>)
100110b8:	bb1b      	cbnz	r3, 10011102 <_vfiprintf_r+0x1da>
100110ba:	9b03      	ldr	r3, [sp, #12]
100110bc:	3307      	adds	r3, #7
100110be:	f023 0307 	bic.w	r3, r3, #7
100110c2:	3308      	adds	r3, #8
100110c4:	9303      	str	r3, [sp, #12]
100110c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
100110c8:	443b      	add	r3, r7
100110ca:	9309      	str	r3, [sp, #36]	; 0x24
100110cc:	e768      	b.n	10010fa0 <_vfiprintf_r+0x78>
100110ce:	fb0c 3202 	mla	r2, ip, r2, r3
100110d2:	460c      	mov	r4, r1
100110d4:	2001      	movs	r0, #1
100110d6:	e7a6      	b.n	10011026 <_vfiprintf_r+0xfe>
100110d8:	2300      	movs	r3, #0
100110da:	3401      	adds	r4, #1
100110dc:	9305      	str	r3, [sp, #20]
100110de:	4619      	mov	r1, r3
100110e0:	f04f 0c0a 	mov.w	ip, #10
100110e4:	4620      	mov	r0, r4
100110e6:	f810 2b01 	ldrb.w	r2, [r0], #1
100110ea:	3a30      	subs	r2, #48	; 0x30
100110ec:	2a09      	cmp	r2, #9
100110ee:	d903      	bls.n	100110f8 <_vfiprintf_r+0x1d0>
100110f0:	2b00      	cmp	r3, #0
100110f2:	d0c6      	beq.n	10011082 <_vfiprintf_r+0x15a>
100110f4:	9105      	str	r1, [sp, #20]
100110f6:	e7c4      	b.n	10011082 <_vfiprintf_r+0x15a>
100110f8:	fb0c 2101 	mla	r1, ip, r1, r2
100110fc:	4604      	mov	r4, r0
100110fe:	2301      	movs	r3, #1
10011100:	e7f0      	b.n	100110e4 <_vfiprintf_r+0x1bc>
10011102:	ab03      	add	r3, sp, #12
10011104:	9300      	str	r3, [sp, #0]
10011106:	462a      	mov	r2, r5
10011108:	4b12      	ldr	r3, [pc, #72]	; (10011154 <_vfiprintf_r+0x22c>)
1001110a:	a904      	add	r1, sp, #16
1001110c:	4630      	mov	r0, r6
1001110e:	f7fd fd79 	bl	1000ec04 <_printf_float>
10011112:	4607      	mov	r7, r0
10011114:	1c78      	adds	r0, r7, #1
10011116:	d1d6      	bne.n	100110c6 <_vfiprintf_r+0x19e>
10011118:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1001111a:	07d9      	lsls	r1, r3, #31
1001111c:	d405      	bmi.n	1001112a <_vfiprintf_r+0x202>
1001111e:	89ab      	ldrh	r3, [r5, #12]
10011120:	059a      	lsls	r2, r3, #22
10011122:	d402      	bmi.n	1001112a <_vfiprintf_r+0x202>
10011124:	6da8      	ldr	r0, [r5, #88]	; 0x58
10011126:	f7fe fb1d 	bl	1000f764 <__retarget_lock_release_recursive>
1001112a:	89ab      	ldrh	r3, [r5, #12]
1001112c:	065b      	lsls	r3, r3, #25
1001112e:	f53f af1d 	bmi.w	10010f6c <_vfiprintf_r+0x44>
10011132:	9809      	ldr	r0, [sp, #36]	; 0x24
10011134:	e71c      	b.n	10010f70 <_vfiprintf_r+0x48>
10011136:	ab03      	add	r3, sp, #12
10011138:	9300      	str	r3, [sp, #0]
1001113a:	462a      	mov	r2, r5
1001113c:	4b05      	ldr	r3, [pc, #20]	; (10011154 <_vfiprintf_r+0x22c>)
1001113e:	a904      	add	r1, sp, #16
10011140:	4630      	mov	r0, r6
10011142:	f7fe f803 	bl	1000f14c <_printf_i>
10011146:	e7e4      	b.n	10011112 <_vfiprintf_r+0x1ea>
10011148:	100144ac 	.word	0x100144ac
1001114c:	100144b6 	.word	0x100144b6
10011150:	1000ec05 	.word	0x1000ec05
10011154:	10010f03 	.word	0x10010f03
10011158:	100144b2 	.word	0x100144b2

1001115c <__sflush_r>:
1001115c:	898a      	ldrh	r2, [r1, #12]
1001115e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10011162:	4605      	mov	r5, r0
10011164:	0710      	lsls	r0, r2, #28
10011166:	460c      	mov	r4, r1
10011168:	d458      	bmi.n	1001121c <__sflush_r+0xc0>
1001116a:	684b      	ldr	r3, [r1, #4]
1001116c:	2b00      	cmp	r3, #0
1001116e:	dc05      	bgt.n	1001117c <__sflush_r+0x20>
10011170:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10011172:	2b00      	cmp	r3, #0
10011174:	dc02      	bgt.n	1001117c <__sflush_r+0x20>
10011176:	2000      	movs	r0, #0
10011178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1001117c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1001117e:	2e00      	cmp	r6, #0
10011180:	d0f9      	beq.n	10011176 <__sflush_r+0x1a>
10011182:	2300      	movs	r3, #0
10011184:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
10011188:	682f      	ldr	r7, [r5, #0]
1001118a:	6a21      	ldr	r1, [r4, #32]
1001118c:	602b      	str	r3, [r5, #0]
1001118e:	d032      	beq.n	100111f6 <__sflush_r+0x9a>
10011190:	6d60      	ldr	r0, [r4, #84]	; 0x54
10011192:	89a3      	ldrh	r3, [r4, #12]
10011194:	075a      	lsls	r2, r3, #29
10011196:	d505      	bpl.n	100111a4 <__sflush_r+0x48>
10011198:	6863      	ldr	r3, [r4, #4]
1001119a:	1ac0      	subs	r0, r0, r3
1001119c:	6b63      	ldr	r3, [r4, #52]	; 0x34
1001119e:	b10b      	cbz	r3, 100111a4 <__sflush_r+0x48>
100111a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
100111a2:	1ac0      	subs	r0, r0, r3
100111a4:	2300      	movs	r3, #0
100111a6:	4602      	mov	r2, r0
100111a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
100111aa:	6a21      	ldr	r1, [r4, #32]
100111ac:	4628      	mov	r0, r5
100111ae:	47b0      	blx	r6
100111b0:	1c43      	adds	r3, r0, #1
100111b2:	89a3      	ldrh	r3, [r4, #12]
100111b4:	d106      	bne.n	100111c4 <__sflush_r+0x68>
100111b6:	6829      	ldr	r1, [r5, #0]
100111b8:	291d      	cmp	r1, #29
100111ba:	d82b      	bhi.n	10011214 <__sflush_r+0xb8>
100111bc:	4a29      	ldr	r2, [pc, #164]	; (10011264 <__sflush_r+0x108>)
100111be:	410a      	asrs	r2, r1
100111c0:	07d6      	lsls	r6, r2, #31
100111c2:	d427      	bmi.n	10011214 <__sflush_r+0xb8>
100111c4:	2200      	movs	r2, #0
100111c6:	6062      	str	r2, [r4, #4]
100111c8:	04d9      	lsls	r1, r3, #19
100111ca:	6922      	ldr	r2, [r4, #16]
100111cc:	6022      	str	r2, [r4, #0]
100111ce:	d504      	bpl.n	100111da <__sflush_r+0x7e>
100111d0:	1c42      	adds	r2, r0, #1
100111d2:	d101      	bne.n	100111d8 <__sflush_r+0x7c>
100111d4:	682b      	ldr	r3, [r5, #0]
100111d6:	b903      	cbnz	r3, 100111da <__sflush_r+0x7e>
100111d8:	6560      	str	r0, [r4, #84]	; 0x54
100111da:	6b61      	ldr	r1, [r4, #52]	; 0x34
100111dc:	602f      	str	r7, [r5, #0]
100111de:	2900      	cmp	r1, #0
100111e0:	d0c9      	beq.n	10011176 <__sflush_r+0x1a>
100111e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
100111e6:	4299      	cmp	r1, r3
100111e8:	d002      	beq.n	100111f0 <__sflush_r+0x94>
100111ea:	4628      	mov	r0, r5
100111ec:	f7ff f94a 	bl	10010484 <_free_r>
100111f0:	2000      	movs	r0, #0
100111f2:	6360      	str	r0, [r4, #52]	; 0x34
100111f4:	e7c0      	b.n	10011178 <__sflush_r+0x1c>
100111f6:	2301      	movs	r3, #1
100111f8:	4628      	mov	r0, r5
100111fa:	47b0      	blx	r6
100111fc:	1c41      	adds	r1, r0, #1
100111fe:	d1c8      	bne.n	10011192 <__sflush_r+0x36>
10011200:	682b      	ldr	r3, [r5, #0]
10011202:	2b00      	cmp	r3, #0
10011204:	d0c5      	beq.n	10011192 <__sflush_r+0x36>
10011206:	2b1d      	cmp	r3, #29
10011208:	d001      	beq.n	1001120e <__sflush_r+0xb2>
1001120a:	2b16      	cmp	r3, #22
1001120c:	d101      	bne.n	10011212 <__sflush_r+0xb6>
1001120e:	602f      	str	r7, [r5, #0]
10011210:	e7b1      	b.n	10011176 <__sflush_r+0x1a>
10011212:	89a3      	ldrh	r3, [r4, #12]
10011214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10011218:	81a3      	strh	r3, [r4, #12]
1001121a:	e7ad      	b.n	10011178 <__sflush_r+0x1c>
1001121c:	690f      	ldr	r7, [r1, #16]
1001121e:	2f00      	cmp	r7, #0
10011220:	d0a9      	beq.n	10011176 <__sflush_r+0x1a>
10011222:	0793      	lsls	r3, r2, #30
10011224:	680e      	ldr	r6, [r1, #0]
10011226:	bf08      	it	eq
10011228:	694b      	ldreq	r3, [r1, #20]
1001122a:	600f      	str	r7, [r1, #0]
1001122c:	bf18      	it	ne
1001122e:	2300      	movne	r3, #0
10011230:	eba6 0807 	sub.w	r8, r6, r7
10011234:	608b      	str	r3, [r1, #8]
10011236:	f1b8 0f00 	cmp.w	r8, #0
1001123a:	dd9c      	ble.n	10011176 <__sflush_r+0x1a>
1001123c:	6a21      	ldr	r1, [r4, #32]
1001123e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10011240:	4643      	mov	r3, r8
10011242:	463a      	mov	r2, r7
10011244:	4628      	mov	r0, r5
10011246:	47b0      	blx	r6
10011248:	2800      	cmp	r0, #0
1001124a:	dc06      	bgt.n	1001125a <__sflush_r+0xfe>
1001124c:	89a3      	ldrh	r3, [r4, #12]
1001124e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10011252:	81a3      	strh	r3, [r4, #12]
10011254:	f04f 30ff 	mov.w	r0, #4294967295
10011258:	e78e      	b.n	10011178 <__sflush_r+0x1c>
1001125a:	4407      	add	r7, r0
1001125c:	eba8 0800 	sub.w	r8, r8, r0
10011260:	e7e9      	b.n	10011236 <__sflush_r+0xda>
10011262:	bf00      	nop
10011264:	dfbffffe 	.word	0xdfbffffe

10011268 <_fflush_r>:
10011268:	b538      	push	{r3, r4, r5, lr}
1001126a:	690b      	ldr	r3, [r1, #16]
1001126c:	4605      	mov	r5, r0
1001126e:	460c      	mov	r4, r1
10011270:	b913      	cbnz	r3, 10011278 <_fflush_r+0x10>
10011272:	2500      	movs	r5, #0
10011274:	4628      	mov	r0, r5
10011276:	bd38      	pop	{r3, r4, r5, pc}
10011278:	b118      	cbz	r0, 10011282 <_fflush_r+0x1a>
1001127a:	6a03      	ldr	r3, [r0, #32]
1001127c:	b90b      	cbnz	r3, 10011282 <_fflush_r+0x1a>
1001127e:	f7fe f913 	bl	1000f4a8 <__sinit>
10011282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10011286:	2b00      	cmp	r3, #0
10011288:	d0f3      	beq.n	10011272 <_fflush_r+0xa>
1001128a:	6e62      	ldr	r2, [r4, #100]	; 0x64
1001128c:	07d0      	lsls	r0, r2, #31
1001128e:	d404      	bmi.n	1001129a <_fflush_r+0x32>
10011290:	0599      	lsls	r1, r3, #22
10011292:	d402      	bmi.n	1001129a <_fflush_r+0x32>
10011294:	6da0      	ldr	r0, [r4, #88]	; 0x58
10011296:	f7fe fa64 	bl	1000f762 <__retarget_lock_acquire_recursive>
1001129a:	4628      	mov	r0, r5
1001129c:	4621      	mov	r1, r4
1001129e:	f7ff ff5d 	bl	1001115c <__sflush_r>
100112a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
100112a4:	07da      	lsls	r2, r3, #31
100112a6:	4605      	mov	r5, r0
100112a8:	d4e4      	bmi.n	10011274 <_fflush_r+0xc>
100112aa:	89a3      	ldrh	r3, [r4, #12]
100112ac:	059b      	lsls	r3, r3, #22
100112ae:	d4e1      	bmi.n	10011274 <_fflush_r+0xc>
100112b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
100112b2:	f7fe fa57 	bl	1000f764 <__retarget_lock_release_recursive>
100112b6:	e7dd      	b.n	10011274 <_fflush_r+0xc>

100112b8 <__swbuf_r>:
100112b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100112ba:	460e      	mov	r6, r1
100112bc:	4614      	mov	r4, r2
100112be:	4605      	mov	r5, r0
100112c0:	b118      	cbz	r0, 100112ca <__swbuf_r+0x12>
100112c2:	6a03      	ldr	r3, [r0, #32]
100112c4:	b90b      	cbnz	r3, 100112ca <__swbuf_r+0x12>
100112c6:	f7fe f8ef 	bl	1000f4a8 <__sinit>
100112ca:	69a3      	ldr	r3, [r4, #24]
100112cc:	60a3      	str	r3, [r4, #8]
100112ce:	89a3      	ldrh	r3, [r4, #12]
100112d0:	071a      	lsls	r2, r3, #28
100112d2:	d525      	bpl.n	10011320 <__swbuf_r+0x68>
100112d4:	6923      	ldr	r3, [r4, #16]
100112d6:	b31b      	cbz	r3, 10011320 <__swbuf_r+0x68>
100112d8:	6823      	ldr	r3, [r4, #0]
100112da:	6922      	ldr	r2, [r4, #16]
100112dc:	1a98      	subs	r0, r3, r2
100112de:	6963      	ldr	r3, [r4, #20]
100112e0:	b2f6      	uxtb	r6, r6
100112e2:	4283      	cmp	r3, r0
100112e4:	4637      	mov	r7, r6
100112e6:	dc04      	bgt.n	100112f2 <__swbuf_r+0x3a>
100112e8:	4621      	mov	r1, r4
100112ea:	4628      	mov	r0, r5
100112ec:	f7ff ffbc 	bl	10011268 <_fflush_r>
100112f0:	b9e0      	cbnz	r0, 1001132c <__swbuf_r+0x74>
100112f2:	68a3      	ldr	r3, [r4, #8]
100112f4:	3b01      	subs	r3, #1
100112f6:	60a3      	str	r3, [r4, #8]
100112f8:	6823      	ldr	r3, [r4, #0]
100112fa:	1c5a      	adds	r2, r3, #1
100112fc:	6022      	str	r2, [r4, #0]
100112fe:	701e      	strb	r6, [r3, #0]
10011300:	6962      	ldr	r2, [r4, #20]
10011302:	1c43      	adds	r3, r0, #1
10011304:	429a      	cmp	r2, r3
10011306:	d004      	beq.n	10011312 <__swbuf_r+0x5a>
10011308:	89a3      	ldrh	r3, [r4, #12]
1001130a:	07db      	lsls	r3, r3, #31
1001130c:	d506      	bpl.n	1001131c <__swbuf_r+0x64>
1001130e:	2e0a      	cmp	r6, #10
10011310:	d104      	bne.n	1001131c <__swbuf_r+0x64>
10011312:	4621      	mov	r1, r4
10011314:	4628      	mov	r0, r5
10011316:	f7ff ffa7 	bl	10011268 <_fflush_r>
1001131a:	b938      	cbnz	r0, 1001132c <__swbuf_r+0x74>
1001131c:	4638      	mov	r0, r7
1001131e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011320:	4621      	mov	r1, r4
10011322:	4628      	mov	r0, r5
10011324:	f000 f806 	bl	10011334 <__swsetup_r>
10011328:	2800      	cmp	r0, #0
1001132a:	d0d5      	beq.n	100112d8 <__swbuf_r+0x20>
1001132c:	f04f 37ff 	mov.w	r7, #4294967295
10011330:	e7f4      	b.n	1001131c <__swbuf_r+0x64>
	...

10011334 <__swsetup_r>:
10011334:	b538      	push	{r3, r4, r5, lr}
10011336:	4b2a      	ldr	r3, [pc, #168]	; (100113e0 <__swsetup_r+0xac>)
10011338:	4605      	mov	r5, r0
1001133a:	6818      	ldr	r0, [r3, #0]
1001133c:	460c      	mov	r4, r1
1001133e:	b118      	cbz	r0, 10011348 <__swsetup_r+0x14>
10011340:	6a03      	ldr	r3, [r0, #32]
10011342:	b90b      	cbnz	r3, 10011348 <__swsetup_r+0x14>
10011344:	f7fe f8b0 	bl	1000f4a8 <__sinit>
10011348:	89a3      	ldrh	r3, [r4, #12]
1001134a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1001134e:	0718      	lsls	r0, r3, #28
10011350:	d422      	bmi.n	10011398 <__swsetup_r+0x64>
10011352:	06d9      	lsls	r1, r3, #27
10011354:	d407      	bmi.n	10011366 <__swsetup_r+0x32>
10011356:	2309      	movs	r3, #9
10011358:	602b      	str	r3, [r5, #0]
1001135a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
1001135e:	81a3      	strh	r3, [r4, #12]
10011360:	f04f 30ff 	mov.w	r0, #4294967295
10011364:	e034      	b.n	100113d0 <__swsetup_r+0x9c>
10011366:	0758      	lsls	r0, r3, #29
10011368:	d512      	bpl.n	10011390 <__swsetup_r+0x5c>
1001136a:	6b61      	ldr	r1, [r4, #52]	; 0x34
1001136c:	b141      	cbz	r1, 10011380 <__swsetup_r+0x4c>
1001136e:	f104 0344 	add.w	r3, r4, #68	; 0x44
10011372:	4299      	cmp	r1, r3
10011374:	d002      	beq.n	1001137c <__swsetup_r+0x48>
10011376:	4628      	mov	r0, r5
10011378:	f7ff f884 	bl	10010484 <_free_r>
1001137c:	2300      	movs	r3, #0
1001137e:	6363      	str	r3, [r4, #52]	; 0x34
10011380:	89a3      	ldrh	r3, [r4, #12]
10011382:	f023 0324 	bic.w	r3, r3, #36	; 0x24
10011386:	81a3      	strh	r3, [r4, #12]
10011388:	2300      	movs	r3, #0
1001138a:	6063      	str	r3, [r4, #4]
1001138c:	6923      	ldr	r3, [r4, #16]
1001138e:	6023      	str	r3, [r4, #0]
10011390:	89a3      	ldrh	r3, [r4, #12]
10011392:	f043 0308 	orr.w	r3, r3, #8
10011396:	81a3      	strh	r3, [r4, #12]
10011398:	6923      	ldr	r3, [r4, #16]
1001139a:	b94b      	cbnz	r3, 100113b0 <__swsetup_r+0x7c>
1001139c:	89a3      	ldrh	r3, [r4, #12]
1001139e:	f403 7320 	and.w	r3, r3, #640	; 0x280
100113a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
100113a6:	d003      	beq.n	100113b0 <__swsetup_r+0x7c>
100113a8:	4621      	mov	r1, r4
100113aa:	4628      	mov	r0, r5
100113ac:	f000 f8d3 	bl	10011556 <__smakebuf_r>
100113b0:	89a0      	ldrh	r0, [r4, #12]
100113b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
100113b6:	f010 0301 	ands.w	r3, r0, #1
100113ba:	d00a      	beq.n	100113d2 <__swsetup_r+0x9e>
100113bc:	2300      	movs	r3, #0
100113be:	60a3      	str	r3, [r4, #8]
100113c0:	6963      	ldr	r3, [r4, #20]
100113c2:	425b      	negs	r3, r3
100113c4:	61a3      	str	r3, [r4, #24]
100113c6:	6923      	ldr	r3, [r4, #16]
100113c8:	b943      	cbnz	r3, 100113dc <__swsetup_r+0xa8>
100113ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
100113ce:	d1c4      	bne.n	1001135a <__swsetup_r+0x26>
100113d0:	bd38      	pop	{r3, r4, r5, pc}
100113d2:	0781      	lsls	r1, r0, #30
100113d4:	bf58      	it	pl
100113d6:	6963      	ldrpl	r3, [r4, #20]
100113d8:	60a3      	str	r3, [r4, #8]
100113da:	e7f4      	b.n	100113c6 <__swsetup_r+0x92>
100113dc:	2000      	movs	r0, #0
100113de:	e7f7      	b.n	100113d0 <__swsetup_r+0x9c>
100113e0:	10020b1c 	.word	0x10020b1c

100113e4 <memmove>:
100113e4:	4288      	cmp	r0, r1
100113e6:	b510      	push	{r4, lr}
100113e8:	eb01 0402 	add.w	r4, r1, r2
100113ec:	d902      	bls.n	100113f4 <memmove+0x10>
100113ee:	4284      	cmp	r4, r0
100113f0:	4623      	mov	r3, r4
100113f2:	d807      	bhi.n	10011404 <memmove+0x20>
100113f4:	1e43      	subs	r3, r0, #1
100113f6:	42a1      	cmp	r1, r4
100113f8:	d008      	beq.n	1001140c <memmove+0x28>
100113fa:	f811 2b01 	ldrb.w	r2, [r1], #1
100113fe:	f803 2f01 	strb.w	r2, [r3, #1]!
10011402:	e7f8      	b.n	100113f6 <memmove+0x12>
10011404:	4402      	add	r2, r0
10011406:	4601      	mov	r1, r0
10011408:	428a      	cmp	r2, r1
1001140a:	d100      	bne.n	1001140e <memmove+0x2a>
1001140c:	bd10      	pop	{r4, pc}
1001140e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
10011412:	f802 4d01 	strb.w	r4, [r2, #-1]!
10011416:	e7f7      	b.n	10011408 <memmove+0x24>

10011418 <_raise_r>:
10011418:	291f      	cmp	r1, #31
1001141a:	b538      	push	{r3, r4, r5, lr}
1001141c:	4604      	mov	r4, r0
1001141e:	460d      	mov	r5, r1
10011420:	d904      	bls.n	1001142c <_raise_r+0x14>
10011422:	2316      	movs	r3, #22
10011424:	6003      	str	r3, [r0, #0]
10011426:	f04f 30ff 	mov.w	r0, #4294967295
1001142a:	bd38      	pop	{r3, r4, r5, pc}
1001142c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
1001142e:	b112      	cbz	r2, 10011436 <_raise_r+0x1e>
10011430:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
10011434:	b94b      	cbnz	r3, 1001144a <_raise_r+0x32>
10011436:	4620      	mov	r0, r4
10011438:	f000 f830 	bl	1001149c <_getpid_r>
1001143c:	462a      	mov	r2, r5
1001143e:	4601      	mov	r1, r0
10011440:	4620      	mov	r0, r4
10011442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
10011446:	f000 b817 	b.w	10011478 <_kill_r>
1001144a:	2b01      	cmp	r3, #1
1001144c:	d00a      	beq.n	10011464 <_raise_r+0x4c>
1001144e:	1c59      	adds	r1, r3, #1
10011450:	d103      	bne.n	1001145a <_raise_r+0x42>
10011452:	2316      	movs	r3, #22
10011454:	6003      	str	r3, [r0, #0]
10011456:	2001      	movs	r0, #1
10011458:	e7e7      	b.n	1001142a <_raise_r+0x12>
1001145a:	2400      	movs	r4, #0
1001145c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
10011460:	4628      	mov	r0, r5
10011462:	4798      	blx	r3
10011464:	2000      	movs	r0, #0
10011466:	e7e0      	b.n	1001142a <_raise_r+0x12>

10011468 <raise>:
10011468:	4b02      	ldr	r3, [pc, #8]	; (10011474 <raise+0xc>)
1001146a:	4601      	mov	r1, r0
1001146c:	6818      	ldr	r0, [r3, #0]
1001146e:	f7ff bfd3 	b.w	10011418 <_raise_r>
10011472:	bf00      	nop
10011474:	10020b1c 	.word	0x10020b1c

10011478 <_kill_r>:
10011478:	b538      	push	{r3, r4, r5, lr}
1001147a:	4d07      	ldr	r5, [pc, #28]	; (10011498 <_kill_r+0x20>)
1001147c:	2300      	movs	r3, #0
1001147e:	4604      	mov	r4, r0
10011480:	4608      	mov	r0, r1
10011482:	4611      	mov	r1, r2
10011484:	602b      	str	r3, [r5, #0]
10011486:	f000 fa19 	bl	100118bc <_kill>
1001148a:	1c43      	adds	r3, r0, #1
1001148c:	d102      	bne.n	10011494 <_kill_r+0x1c>
1001148e:	682b      	ldr	r3, [r5, #0]
10011490:	b103      	cbz	r3, 10011494 <_kill_r+0x1c>
10011492:	6023      	str	r3, [r4, #0]
10011494:	bd38      	pop	{r3, r4, r5, pc}
10011496:	bf00      	nop
10011498:	10022180 	.word	0x10022180

1001149c <_getpid_r>:
1001149c:	f000 b9fe 	b.w	1001189c <_getpid>

100114a0 <_calloc_r>:
100114a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
100114a2:	fba1 2402 	umull	r2, r4, r1, r2
100114a6:	b94c      	cbnz	r4, 100114bc <_calloc_r+0x1c>
100114a8:	4611      	mov	r1, r2
100114aa:	9201      	str	r2, [sp, #4]
100114ac:	f7fd fa4e 	bl	1000e94c <_malloc_r>
100114b0:	9a01      	ldr	r2, [sp, #4]
100114b2:	4605      	mov	r5, r0
100114b4:	b930      	cbnz	r0, 100114c4 <_calloc_r+0x24>
100114b6:	4628      	mov	r0, r5
100114b8:	b003      	add	sp, #12
100114ba:	bd30      	pop	{r4, r5, pc}
100114bc:	220c      	movs	r2, #12
100114be:	6002      	str	r2, [r0, #0]
100114c0:	2500      	movs	r5, #0
100114c2:	e7f8      	b.n	100114b6 <_calloc_r+0x16>
100114c4:	4621      	mov	r1, r4
100114c6:	f7fe f89a 	bl	1000f5fe <memset>
100114ca:	e7f4      	b.n	100114b6 <_calloc_r+0x16>

100114cc <__ascii_mbtowc>:
100114cc:	b082      	sub	sp, #8
100114ce:	b901      	cbnz	r1, 100114d2 <__ascii_mbtowc+0x6>
100114d0:	a901      	add	r1, sp, #4
100114d2:	b142      	cbz	r2, 100114e6 <__ascii_mbtowc+0x1a>
100114d4:	b14b      	cbz	r3, 100114ea <__ascii_mbtowc+0x1e>
100114d6:	7813      	ldrb	r3, [r2, #0]
100114d8:	600b      	str	r3, [r1, #0]
100114da:	7812      	ldrb	r2, [r2, #0]
100114dc:	1e10      	subs	r0, r2, #0
100114de:	bf18      	it	ne
100114e0:	2001      	movne	r0, #1
100114e2:	b002      	add	sp, #8
100114e4:	4770      	bx	lr
100114e6:	4610      	mov	r0, r2
100114e8:	e7fb      	b.n	100114e2 <__ascii_mbtowc+0x16>
100114ea:	f06f 0001 	mvn.w	r0, #1
100114ee:	e7f8      	b.n	100114e2 <__ascii_mbtowc+0x16>

100114f0 <__ascii_wctomb>:
100114f0:	b149      	cbz	r1, 10011506 <__ascii_wctomb+0x16>
100114f2:	2aff      	cmp	r2, #255	; 0xff
100114f4:	bf85      	ittet	hi
100114f6:	238a      	movhi	r3, #138	; 0x8a
100114f8:	6003      	strhi	r3, [r0, #0]
100114fa:	700a      	strbls	r2, [r1, #0]
100114fc:	f04f 30ff 	movhi.w	r0, #4294967295
10011500:	bf98      	it	ls
10011502:	2001      	movls	r0, #1
10011504:	4770      	bx	lr
10011506:	4608      	mov	r0, r1
10011508:	4770      	bx	lr

1001150a <__swhatbuf_r>:
1001150a:	b570      	push	{r4, r5, r6, lr}
1001150c:	460c      	mov	r4, r1
1001150e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10011512:	2900      	cmp	r1, #0
10011514:	b096      	sub	sp, #88	; 0x58
10011516:	4615      	mov	r5, r2
10011518:	461e      	mov	r6, r3
1001151a:	da0d      	bge.n	10011538 <__swhatbuf_r+0x2e>
1001151c:	89a3      	ldrh	r3, [r4, #12]
1001151e:	f013 0f80 	tst.w	r3, #128	; 0x80
10011522:	f04f 0100 	mov.w	r1, #0
10011526:	bf0c      	ite	eq
10011528:	f44f 6380 	moveq.w	r3, #1024	; 0x400
1001152c:	2340      	movne	r3, #64	; 0x40
1001152e:	2000      	movs	r0, #0
10011530:	6031      	str	r1, [r6, #0]
10011532:	602b      	str	r3, [r5, #0]
10011534:	b016      	add	sp, #88	; 0x58
10011536:	bd70      	pop	{r4, r5, r6, pc}
10011538:	466a      	mov	r2, sp
1001153a:	f000 f849 	bl	100115d0 <_fstat_r>
1001153e:	2800      	cmp	r0, #0
10011540:	dbec      	blt.n	1001151c <__swhatbuf_r+0x12>
10011542:	9901      	ldr	r1, [sp, #4]
10011544:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
10011548:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
1001154c:	4259      	negs	r1, r3
1001154e:	4159      	adcs	r1, r3
10011550:	f44f 6380 	mov.w	r3, #1024	; 0x400
10011554:	e7eb      	b.n	1001152e <__swhatbuf_r+0x24>

10011556 <__smakebuf_r>:
10011556:	898b      	ldrh	r3, [r1, #12]
10011558:	b573      	push	{r0, r1, r4, r5, r6, lr}
1001155a:	079d      	lsls	r5, r3, #30
1001155c:	4606      	mov	r6, r0
1001155e:	460c      	mov	r4, r1
10011560:	d507      	bpl.n	10011572 <__smakebuf_r+0x1c>
10011562:	f104 0347 	add.w	r3, r4, #71	; 0x47
10011566:	6023      	str	r3, [r4, #0]
10011568:	6123      	str	r3, [r4, #16]
1001156a:	2301      	movs	r3, #1
1001156c:	6163      	str	r3, [r4, #20]
1001156e:	b002      	add	sp, #8
10011570:	bd70      	pop	{r4, r5, r6, pc}
10011572:	ab01      	add	r3, sp, #4
10011574:	466a      	mov	r2, sp
10011576:	f7ff ffc8 	bl	1001150a <__swhatbuf_r>
1001157a:	9900      	ldr	r1, [sp, #0]
1001157c:	4605      	mov	r5, r0
1001157e:	4630      	mov	r0, r6
10011580:	f7fd f9e4 	bl	1000e94c <_malloc_r>
10011584:	b948      	cbnz	r0, 1001159a <__smakebuf_r+0x44>
10011586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001158a:	059a      	lsls	r2, r3, #22
1001158c:	d4ef      	bmi.n	1001156e <__smakebuf_r+0x18>
1001158e:	f023 0303 	bic.w	r3, r3, #3
10011592:	f043 0302 	orr.w	r3, r3, #2
10011596:	81a3      	strh	r3, [r4, #12]
10011598:	e7e3      	b.n	10011562 <__smakebuf_r+0xc>
1001159a:	89a3      	ldrh	r3, [r4, #12]
1001159c:	6020      	str	r0, [r4, #0]
1001159e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
100115a2:	81a3      	strh	r3, [r4, #12]
100115a4:	9b00      	ldr	r3, [sp, #0]
100115a6:	6163      	str	r3, [r4, #20]
100115a8:	9b01      	ldr	r3, [sp, #4]
100115aa:	6120      	str	r0, [r4, #16]
100115ac:	b15b      	cbz	r3, 100115c6 <__smakebuf_r+0x70>
100115ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
100115b2:	4630      	mov	r0, r6
100115b4:	f000 f81e 	bl	100115f4 <_isatty_r>
100115b8:	b128      	cbz	r0, 100115c6 <__smakebuf_r+0x70>
100115ba:	89a3      	ldrh	r3, [r4, #12]
100115bc:	f023 0303 	bic.w	r3, r3, #3
100115c0:	f043 0301 	orr.w	r3, r3, #1
100115c4:	81a3      	strh	r3, [r4, #12]
100115c6:	89a3      	ldrh	r3, [r4, #12]
100115c8:	431d      	orrs	r5, r3
100115ca:	81a5      	strh	r5, [r4, #12]
100115cc:	e7cf      	b.n	1001156e <__smakebuf_r+0x18>
	...

100115d0 <_fstat_r>:
100115d0:	b538      	push	{r3, r4, r5, lr}
100115d2:	4d07      	ldr	r5, [pc, #28]	; (100115f0 <_fstat_r+0x20>)
100115d4:	2300      	movs	r3, #0
100115d6:	4604      	mov	r4, r0
100115d8:	4608      	mov	r0, r1
100115da:	4611      	mov	r1, r2
100115dc:	602b      	str	r3, [r5, #0]
100115de:	f000 f955 	bl	1001188c <_fstat>
100115e2:	1c43      	adds	r3, r0, #1
100115e4:	d102      	bne.n	100115ec <_fstat_r+0x1c>
100115e6:	682b      	ldr	r3, [r5, #0]
100115e8:	b103      	cbz	r3, 100115ec <_fstat_r+0x1c>
100115ea:	6023      	str	r3, [r4, #0]
100115ec:	bd38      	pop	{r3, r4, r5, pc}
100115ee:	bf00      	nop
100115f0:	10022180 	.word	0x10022180

100115f4 <_isatty_r>:
100115f4:	b538      	push	{r3, r4, r5, lr}
100115f6:	4d06      	ldr	r5, [pc, #24]	; (10011610 <_isatty_r+0x1c>)
100115f8:	2300      	movs	r3, #0
100115fa:	4604      	mov	r4, r0
100115fc:	4608      	mov	r0, r1
100115fe:	602b      	str	r3, [r5, #0]
10011600:	f000 f954 	bl	100118ac <_isatty>
10011604:	1c43      	adds	r3, r0, #1
10011606:	d102      	bne.n	1001160e <_isatty_r+0x1a>
10011608:	682b      	ldr	r3, [r5, #0]
1001160a:	b103      	cbz	r3, 1001160e <_isatty_r+0x1a>
1001160c:	6023      	str	r3, [r4, #0]
1001160e:	bd38      	pop	{r3, r4, r5, pc}
10011610:	10022180 	.word	0x10022180

10011614 <expf>:
10011614:	b508      	push	{r3, lr}
10011616:	ed2d 8b02 	vpush	{d8}
1001161a:	eef0 8a40 	vmov.f32	s17, s0
1001161e:	f000 f85f 	bl	100116e0 <__ieee754_expf>
10011622:	eeb0 8a40 	vmov.f32	s16, s0
10011626:	eeb0 0a68 	vmov.f32	s0, s17
1001162a:	f000 f829 	bl	10011680 <finitef>
1001162e:	b160      	cbz	r0, 1001164a <expf+0x36>
10011630:	eddf 7a0f 	vldr	s15, [pc, #60]	; 10011670 <expf+0x5c>
10011634:	eef4 8ae7 	vcmpe.f32	s17, s15
10011638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1001163c:	dd0a      	ble.n	10011654 <expf+0x40>
1001163e:	f7fe f865 	bl	1000f70c <__errno>
10011642:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 10011674 <expf+0x60>
10011646:	2322      	movs	r3, #34	; 0x22
10011648:	6003      	str	r3, [r0, #0]
1001164a:	eeb0 0a48 	vmov.f32	s0, s16
1001164e:	ecbd 8b02 	vpop	{d8}
10011652:	bd08      	pop	{r3, pc}
10011654:	eddf 7a08 	vldr	s15, [pc, #32]	; 10011678 <expf+0x64>
10011658:	eef4 8ae7 	vcmpe.f32	s17, s15
1001165c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
10011660:	d5f3      	bpl.n	1001164a <expf+0x36>
10011662:	f7fe f853 	bl	1000f70c <__errno>
10011666:	2322      	movs	r3, #34	; 0x22
10011668:	ed9f 8a04 	vldr	s16, [pc, #16]	; 1001167c <expf+0x68>
1001166c:	6003      	str	r3, [r0, #0]
1001166e:	e7ec      	b.n	1001164a <expf+0x36>
10011670:	42b17217 	.word	0x42b17217
10011674:	7f800000 	.word	0x7f800000
10011678:	c2cff1b5 	.word	0xc2cff1b5
1001167c:	00000000 	.word	0x00000000

10011680 <finitef>:
10011680:	b082      	sub	sp, #8
10011682:	ed8d 0a01 	vstr	s0, [sp, #4]
10011686:	9801      	ldr	r0, [sp, #4]
10011688:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
1001168c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
10011690:	bfac      	ite	ge
10011692:	2000      	movge	r0, #0
10011694:	2001      	movlt	r0, #1
10011696:	b002      	add	sp, #8
10011698:	4770      	bx	lr

1001169a <with_errnof>:
1001169a:	b513      	push	{r0, r1, r4, lr}
1001169c:	4604      	mov	r4, r0
1001169e:	ed8d 0a01 	vstr	s0, [sp, #4]
100116a2:	f7fe f833 	bl	1000f70c <__errno>
100116a6:	ed9d 0a01 	vldr	s0, [sp, #4]
100116aa:	6004      	str	r4, [r0, #0]
100116ac:	b002      	add	sp, #8
100116ae:	bd10      	pop	{r4, pc}

100116b0 <xflowf>:
100116b0:	b130      	cbz	r0, 100116c0 <xflowf+0x10>
100116b2:	eef1 7a40 	vneg.f32	s15, s0
100116b6:	ee27 0a80 	vmul.f32	s0, s15, s0
100116ba:	2022      	movs	r0, #34	; 0x22
100116bc:	f7ff bfed 	b.w	1001169a <with_errnof>
100116c0:	eef0 7a40 	vmov.f32	s15, s0
100116c4:	e7f7      	b.n	100116b6 <xflowf+0x6>
	...

100116c8 <__math_uflowf>:
100116c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 100116d0 <__math_uflowf+0x8>
100116cc:	f7ff bff0 	b.w	100116b0 <xflowf>
100116d0:	10000000 	.word	0x10000000

100116d4 <__math_oflowf>:
100116d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 100116dc <__math_oflowf+0x8>
100116d8:	f7ff bfea 	b.w	100116b0 <xflowf>
100116dc:	70000000 	.word	0x70000000

100116e0 <__ieee754_expf>:
100116e0:	ee10 2a10 	vmov	r2, s0
100116e4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
100116e8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
100116ec:	d902      	bls.n	100116f4 <__ieee754_expf+0x14>
100116ee:	ee30 0a00 	vadd.f32	s0, s0, s0
100116f2:	4770      	bx	lr
100116f4:	ea4f 71d2 	mov.w	r1, r2, lsr #31
100116f8:	d106      	bne.n	10011708 <__ieee754_expf+0x28>
100116fa:	eddf 7a4e 	vldr	s15, [pc, #312]	; 10011834 <__ieee754_expf+0x154>
100116fe:	2900      	cmp	r1, #0
10011700:	bf18      	it	ne
10011702:	eeb0 0a67 	vmovne.f32	s0, s15
10011706:	4770      	bx	lr
10011708:	484b      	ldr	r0, [pc, #300]	; (10011838 <__ieee754_expf+0x158>)
1001170a:	4282      	cmp	r2, r0
1001170c:	dd02      	ble.n	10011714 <__ieee754_expf+0x34>
1001170e:	2000      	movs	r0, #0
10011710:	f7ff bfe0 	b.w	100116d4 <__math_oflowf>
10011714:	2a00      	cmp	r2, #0
10011716:	da05      	bge.n	10011724 <__ieee754_expf+0x44>
10011718:	4a48      	ldr	r2, [pc, #288]	; (1001183c <__ieee754_expf+0x15c>)
1001171a:	4293      	cmp	r3, r2
1001171c:	d902      	bls.n	10011724 <__ieee754_expf+0x44>
1001171e:	2000      	movs	r0, #0
10011720:	f7ff bfd2 	b.w	100116c8 <__math_uflowf>
10011724:	4a46      	ldr	r2, [pc, #280]	; (10011840 <__ieee754_expf+0x160>)
10011726:	4293      	cmp	r3, r2
10011728:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
1001172c:	d952      	bls.n	100117d4 <__ieee754_expf+0xf4>
1001172e:	4a45      	ldr	r2, [pc, #276]	; (10011844 <__ieee754_expf+0x164>)
10011730:	4293      	cmp	r3, r2
10011732:	ea4f 0281 	mov.w	r2, r1, lsl #2
10011736:	d834      	bhi.n	100117a2 <__ieee754_expf+0xc2>
10011738:	4b43      	ldr	r3, [pc, #268]	; (10011848 <__ieee754_expf+0x168>)
1001173a:	4413      	add	r3, r2
1001173c:	ed93 7a00 	vldr	s14, [r3]
10011740:	4b42      	ldr	r3, [pc, #264]	; (1001184c <__ieee754_expf+0x16c>)
10011742:	4413      	add	r3, r2
10011744:	ee30 7a47 	vsub.f32	s14, s0, s14
10011748:	f1c1 0201 	rsb	r2, r1, #1
1001174c:	edd3 7a00 	vldr	s15, [r3]
10011750:	1a52      	subs	r2, r2, r1
10011752:	ee37 0a67 	vsub.f32	s0, s14, s15
10011756:	ee20 6a00 	vmul.f32	s12, s0, s0
1001175a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 10011850 <__ieee754_expf+0x170>
1001175e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 10011854 <__ieee754_expf+0x174>
10011762:	eee6 6a05 	vfma.f32	s13, s12, s10
10011766:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 10011858 <__ieee754_expf+0x178>
1001176a:	eea6 5a86 	vfma.f32	s10, s13, s12
1001176e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 1001185c <__ieee754_expf+0x17c>
10011772:	eee5 6a06 	vfma.f32	s13, s10, s12
10011776:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 10011860 <__ieee754_expf+0x180>
1001177a:	eea6 5a86 	vfma.f32	s10, s13, s12
1001177e:	eef0 6a40 	vmov.f32	s13, s0
10011782:	eee5 6a46 	vfms.f32	s13, s10, s12
10011786:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
1001178a:	ee20 5a26 	vmul.f32	s10, s0, s13
1001178e:	bb92      	cbnz	r2, 100117f6 <__ieee754_expf+0x116>
10011790:	ee76 6ac6 	vsub.f32	s13, s13, s12
10011794:	eec5 7a26 	vdiv.f32	s15, s10, s13
10011798:	ee37 0ac0 	vsub.f32	s0, s15, s0
1001179c:	ee35 0ac0 	vsub.f32	s0, s11, s0
100117a0:	4770      	bx	lr
100117a2:	4b30      	ldr	r3, [pc, #192]	; (10011864 <__ieee754_expf+0x184>)
100117a4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 10011868 <__ieee754_expf+0x188>
100117a8:	eddf 6a30 	vldr	s13, [pc, #192]	; 1001186c <__ieee754_expf+0x18c>
100117ac:	4413      	add	r3, r2
100117ae:	edd3 7a00 	vldr	s15, [r3]
100117b2:	eee0 7a07 	vfma.f32	s15, s0, s14
100117b6:	eeb0 7a40 	vmov.f32	s14, s0
100117ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
100117be:	ee17 2a90 	vmov	r2, s15
100117c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
100117c6:	eea7 7ae6 	vfms.f32	s14, s15, s13
100117ca:	eddf 6a29 	vldr	s13, [pc, #164]	; 10011870 <__ieee754_expf+0x190>
100117ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
100117d2:	e7be      	b.n	10011752 <__ieee754_expf+0x72>
100117d4:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
100117d8:	d20b      	bcs.n	100117f2 <__ieee754_expf+0x112>
100117da:	eddf 6a26 	vldr	s13, [pc, #152]	; 10011874 <__ieee754_expf+0x194>
100117de:	ee70 6a26 	vadd.f32	s13, s0, s13
100117e2:	eef4 6ae5 	vcmpe.f32	s13, s11
100117e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
100117ea:	dd02      	ble.n	100117f2 <__ieee754_expf+0x112>
100117ec:	ee30 0a25 	vadd.f32	s0, s0, s11
100117f0:	4770      	bx	lr
100117f2:	2200      	movs	r2, #0
100117f4:	e7af      	b.n	10011756 <__ieee754_expf+0x76>
100117f6:	ee36 6a66 	vsub.f32	s12, s12, s13
100117fa:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
100117fe:	eec5 6a06 	vdiv.f32	s13, s10, s12
10011802:	bfb8      	it	lt
10011804:	3264      	addlt	r2, #100	; 0x64
10011806:	ee77 7ae6 	vsub.f32	s15, s15, s13
1001180a:	ee77 7ac7 	vsub.f32	s15, s15, s14
1001180e:	ee75 7ae7 	vsub.f32	s15, s11, s15
10011812:	ee17 3a90 	vmov	r3, s15
10011816:	bfab      	itete	ge
10011818:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
1001181c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
10011820:	ee00 3a10 	vmovge	s0, r3
10011824:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 10011878 <__ieee754_expf+0x198>
10011828:	bfbc      	itt	lt
1001182a:	ee00 3a10 	vmovlt	s0, r3
1001182e:	ee20 0a27 	vmullt.f32	s0, s0, s15
10011832:	4770      	bx	lr
10011834:	00000000 	.word	0x00000000
10011838:	42b17217 	.word	0x42b17217
1001183c:	42cff1b5 	.word	0x42cff1b5
10011840:	3eb17218 	.word	0x3eb17218
10011844:	3f851591 	.word	0x3f851591
10011848:	100145d0 	.word	0x100145d0
1001184c:	100145d8 	.word	0x100145d8
10011850:	3331bb4c 	.word	0x3331bb4c
10011854:	b5ddea0e 	.word	0xb5ddea0e
10011858:	388ab355 	.word	0x388ab355
1001185c:	bb360b61 	.word	0xbb360b61
10011860:	3e2aaaab 	.word	0x3e2aaaab
10011864:	100145c8 	.word	0x100145c8
10011868:	3fb8aa3b 	.word	0x3fb8aa3b
1001186c:	3f317180 	.word	0x3f317180
10011870:	3717f7d1 	.word	0x3717f7d1
10011874:	7149f2ca 	.word	0x7149f2ca
10011878:	0d800000 	.word	0x0d800000

1001187c <_close>:
1001187c:	4b02      	ldr	r3, [pc, #8]	; (10011888 <_close+0xc>)
1001187e:	2258      	movs	r2, #88	; 0x58
10011880:	601a      	str	r2, [r3, #0]
10011882:	f04f 30ff 	mov.w	r0, #4294967295
10011886:	4770      	bx	lr
10011888:	10022180 	.word	0x10022180

1001188c <_fstat>:
1001188c:	4b02      	ldr	r3, [pc, #8]	; (10011898 <_fstat+0xc>)
1001188e:	2258      	movs	r2, #88	; 0x58
10011890:	601a      	str	r2, [r3, #0]
10011892:	f04f 30ff 	mov.w	r0, #4294967295
10011896:	4770      	bx	lr
10011898:	10022180 	.word	0x10022180

1001189c <_getpid>:
1001189c:	4b02      	ldr	r3, [pc, #8]	; (100118a8 <_getpid+0xc>)
1001189e:	2258      	movs	r2, #88	; 0x58
100118a0:	601a      	str	r2, [r3, #0]
100118a2:	f04f 30ff 	mov.w	r0, #4294967295
100118a6:	4770      	bx	lr
100118a8:	10022180 	.word	0x10022180

100118ac <_isatty>:
100118ac:	4b02      	ldr	r3, [pc, #8]	; (100118b8 <_isatty+0xc>)
100118ae:	2258      	movs	r2, #88	; 0x58
100118b0:	601a      	str	r2, [r3, #0]
100118b2:	2000      	movs	r0, #0
100118b4:	4770      	bx	lr
100118b6:	bf00      	nop
100118b8:	10022180 	.word	0x10022180

100118bc <_kill>:
100118bc:	4b02      	ldr	r3, [pc, #8]	; (100118c8 <_kill+0xc>)
100118be:	2258      	movs	r2, #88	; 0x58
100118c0:	601a      	str	r2, [r3, #0]
100118c2:	f04f 30ff 	mov.w	r0, #4294967295
100118c6:	4770      	bx	lr
100118c8:	10022180 	.word	0x10022180

100118cc <_lseek>:
100118cc:	4b02      	ldr	r3, [pc, #8]	; (100118d8 <_lseek+0xc>)
100118ce:	2258      	movs	r2, #88	; 0x58
100118d0:	601a      	str	r2, [r3, #0]
100118d2:	f04f 30ff 	mov.w	r0, #4294967295
100118d6:	4770      	bx	lr
100118d8:	10022180 	.word	0x10022180

100118dc <_read>:
100118dc:	4b02      	ldr	r3, [pc, #8]	; (100118e8 <_read+0xc>)
100118de:	2258      	movs	r2, #88	; 0x58
100118e0:	601a      	str	r2, [r3, #0]
100118e2:	f04f 30ff 	mov.w	r0, #4294967295
100118e6:	4770      	bx	lr
100118e8:	10022180 	.word	0x10022180

100118ec <_write>:
100118ec:	4b02      	ldr	r3, [pc, #8]	; (100118f8 <_write+0xc>)
100118ee:	2258      	movs	r2, #88	; 0x58
100118f0:	601a      	str	r2, [r3, #0]
100118f2:	f04f 30ff 	mov.w	r0, #4294967295
100118f6:	4770      	bx	lr
100118f8:	10022180 	.word	0x10022180

100118fc <_exit>:
100118fc:	e7fe      	b.n	100118fc <_exit>
	...

10011900 <_init>:
10011900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011902:	bf00      	nop
10011904:	bcf8      	pop	{r3, r4, r5, r6, r7}
10011906:	bc08      	pop	{r3}
10011908:	469e      	mov	lr, r3
1001190a:	4770      	bx	lr

1001190c <_fini>:
1001190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001190e:	bf00      	nop
10011910:	bcf8      	pop	{r3, r4, r5, r6, r7}
10011912:	bc08      	pop	{r3}
10011914:	469e      	mov	lr, r3
10011916:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

10011918 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
10011918:	f8df d034 	ldr.w	sp, [pc, #52]	; 10011950 <LoopForever+0x2>
  movs  r1, #0
1001191c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
1001191e:	e003      	b.n	10011928 <LoopCopyDataInit>

10011920 <CopyDataInit>:
  ldr  r3, =_sidata
10011920:	4b0c      	ldr	r3, [pc, #48]	; (10011954 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
10011922:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10011924:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10011926:	3104      	adds	r1, #4

10011928 <LoopCopyDataInit>:
  ldr  r0, =_sdata
10011928:	480b      	ldr	r0, [pc, #44]	; (10011958 <LoopForever+0xa>)
  ldr  r3, =_edata
1001192a:	4b0c      	ldr	r3, [pc, #48]	; (1001195c <LoopForever+0xe>)
  adds  r2, r0, r1
1001192c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
1001192e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10011930:	d3f6      	bcc.n	10011920 <CopyDataInit>
  ldr  r2, =_sbss
10011932:	4a0b      	ldr	r2, [pc, #44]	; (10011960 <LoopForever+0x12>)
  b  LoopFillZerobss
10011934:	e002      	b.n	1001193c <LoopFillZerobss>

10011936 <FillZerobss>:
  movs  r3, #0
10011936:	2300      	movs	r3, #0
  str  r3, [r2], #4
10011938:	f842 3b04 	str.w	r3, [r2], #4

1001193c <LoopFillZerobss>:
  ldr  r3, = _ebss
1001193c:	4b09      	ldr	r3, [pc, #36]	; (10011964 <LoopForever+0x16>)
  cmp  r2, r3
1001193e:	429a      	cmp	r2, r3
  bcc  FillZerobss
10011940:	d3f9      	bcc.n	10011936 <FillZerobss>
  bl  SystemInit
10011942:	f7ef f879 	bl	10000a38 <SystemInit>
 bl __libc_init_array
10011946:	f7fd fee7 	bl	1000f718 <__libc_init_array>
  bl main
1001194a:	f7ef f89b 	bl	10000a84 <main>

1001194e <LoopForever>:
    b LoopForever
1001194e:	e7fe      	b.n	1001194e <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
10011950:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
10011954:	100145e8 	.word	0x100145e8
  ldr  r0, =_sdata
10011958:	10020000 	.word	0x10020000
  ldr  r3, =_edata
1001195c:	10020c8c 	.word	0x10020c8c
  ldr  r2, =_sbss
10011960:	10020d18 	.word	0x10020d18
  ldr  r3, = _ebss
10011964:	10022188 	.word	0x10022188

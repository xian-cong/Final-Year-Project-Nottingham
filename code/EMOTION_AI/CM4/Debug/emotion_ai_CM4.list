
emotion_ai_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012268  10000000  10000000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  10012268  10012268  00032268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00004920  100122c0  100122c0  000322c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  10016be0  10016be0  00040dcc  2**0
                  CONTENTS
  5 .ARM          00000000  10016be0  10016be0  00040dcc  2**0
                  CONTENTS
  6 .preinit_array 00000000  10016be0  10016be0  00040dcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  10016be0  10016be0  00036be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  10016be4  10016be4  00036be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000d40  10020000  10016be8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 0000008c  10020d40  10017928  00040d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .bss          00009014  10020dcc  100179b4  00040dcc  2**2
                  ALLOC
 12 ._user_heap_stack 00001000  10029de0  100209c8  00040dcc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00040dcc  2**0
                  CONTENTS, READONLY
 14 .comment      00000093  00000000  00000000  00040dfc  2**0
                  CONTENTS, READONLY
 15 .debug_info   000247d2  00000000  00000000  00040e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000050b4  00000000  00000000  00065661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000016e8  00000000  00000000  0006a718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001108  00000000  00000000  0006be00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0004e730  00000000  00000000  0006cf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00021be1  00000000  00000000  000bb638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001ef710  00000000  00000000  000dd219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00007020  00000000  00000000  002cc92c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000073  00000000  00000000  002d394c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	; (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	; (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	; (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	10020dcc 	.word	0x10020dcc
1000001c:	00000000 	.word	0x00000000
10000020:	10012250 	.word	0x10012250

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	; (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	; (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	; (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	10020dd0 	.word	0x10020dd0
1000003c:	10012250 	.word	0x10012250

10000040 <strcmp>:
10000040:	f810 2b01 	ldrb.w	r2, [r0], #1
10000044:	f811 3b01 	ldrb.w	r3, [r1], #1
10000048:	2a01      	cmp	r2, #1
1000004a:	bf28      	it	cs
1000004c:	429a      	cmpcs	r2, r3
1000004e:	d0f7      	beq.n	10000040 <strcmp>
10000050:	1ad0      	subs	r0, r2, r3
10000052:	4770      	bx	lr
	...

10000060 <memchr>:
10000060:	f001 01ff 	and.w	r1, r1, #255	; 0xff
10000064:	2a10      	cmp	r2, #16
10000066:	db2b      	blt.n	100000c0 <memchr+0x60>
10000068:	f010 0f07 	tst.w	r0, #7
1000006c:	d008      	beq.n	10000080 <memchr+0x20>
1000006e:	f810 3b01 	ldrb.w	r3, [r0], #1
10000072:	3a01      	subs	r2, #1
10000074:	428b      	cmp	r3, r1
10000076:	d02d      	beq.n	100000d4 <memchr+0x74>
10000078:	f010 0f07 	tst.w	r0, #7
1000007c:	b342      	cbz	r2, 100000d0 <memchr+0x70>
1000007e:	d1f6      	bne.n	1000006e <memchr+0xe>
10000080:	b4f0      	push	{r4, r5, r6, r7}
10000082:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
10000086:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1000008a:	f022 0407 	bic.w	r4, r2, #7
1000008e:	f07f 0700 	mvns.w	r7, #0
10000092:	2300      	movs	r3, #0
10000094:	e8f0 5602 	ldrd	r5, r6, [r0], #8
10000098:	3c08      	subs	r4, #8
1000009a:	ea85 0501 	eor.w	r5, r5, r1
1000009e:	ea86 0601 	eor.w	r6, r6, r1
100000a2:	fa85 f547 	uadd8	r5, r5, r7
100000a6:	faa3 f587 	sel	r5, r3, r7
100000aa:	fa86 f647 	uadd8	r6, r6, r7
100000ae:	faa5 f687 	sel	r6, r5, r7
100000b2:	b98e      	cbnz	r6, 100000d8 <memchr+0x78>
100000b4:	d1ee      	bne.n	10000094 <memchr+0x34>
100000b6:	bcf0      	pop	{r4, r5, r6, r7}
100000b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
100000bc:	f002 0207 	and.w	r2, r2, #7
100000c0:	b132      	cbz	r2, 100000d0 <memchr+0x70>
100000c2:	f810 3b01 	ldrb.w	r3, [r0], #1
100000c6:	3a01      	subs	r2, #1
100000c8:	ea83 0301 	eor.w	r3, r3, r1
100000cc:	b113      	cbz	r3, 100000d4 <memchr+0x74>
100000ce:	d1f8      	bne.n	100000c2 <memchr+0x62>
100000d0:	2000      	movs	r0, #0
100000d2:	4770      	bx	lr
100000d4:	3801      	subs	r0, #1
100000d6:	4770      	bx	lr
100000d8:	2d00      	cmp	r5, #0
100000da:	bf06      	itte	eq
100000dc:	4635      	moveq	r5, r6
100000de:	3803      	subeq	r0, #3
100000e0:	3807      	subne	r0, #7
100000e2:	f015 0f01 	tst.w	r5, #1
100000e6:	d107      	bne.n	100000f8 <memchr+0x98>
100000e8:	3001      	adds	r0, #1
100000ea:	f415 7f80 	tst.w	r5, #256	; 0x100
100000ee:	bf02      	ittt	eq
100000f0:	3001      	addeq	r0, #1
100000f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
100000f6:	3001      	addeq	r0, #1
100000f8:	bcf0      	pop	{r4, r5, r6, r7}
100000fa:	3801      	subs	r0, #1
100000fc:	4770      	bx	lr
100000fe:	bf00      	nop

10000100 <strlen>:
10000100:	4603      	mov	r3, r0
10000102:	f813 2b01 	ldrb.w	r2, [r3], #1
10000106:	2a00      	cmp	r2, #0
10000108:	d1fb      	bne.n	10000102 <strlen+0x2>
1000010a:	1a18      	subs	r0, r3, r0
1000010c:	3801      	subs	r0, #1
1000010e:	4770      	bx	lr

10000110 <__aeabi_drsub>:
10000110:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
10000114:	e002      	b.n	1000011c <__adddf3>
10000116:	bf00      	nop

10000118 <__aeabi_dsub>:
10000118:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1000011c <__adddf3>:
1000011c:	b530      	push	{r4, r5, lr}
1000011e:	ea4f 0441 	mov.w	r4, r1, lsl #1
10000122:	ea4f 0543 	mov.w	r5, r3, lsl #1
10000126:	ea94 0f05 	teq	r4, r5
1000012a:	bf08      	it	eq
1000012c:	ea90 0f02 	teqeq	r0, r2
10000130:	bf1f      	itttt	ne
10000132:	ea54 0c00 	orrsne.w	ip, r4, r0
10000136:	ea55 0c02 	orrsne.w	ip, r5, r2
1000013a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1000013e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
10000142:	f000 80e2 	beq.w	1000030a <__adddf3+0x1ee>
10000146:	ea4f 5454 	mov.w	r4, r4, lsr #21
1000014a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1000014e:	bfb8      	it	lt
10000150:	426d      	neglt	r5, r5
10000152:	dd0c      	ble.n	1000016e <__adddf3+0x52>
10000154:	442c      	add	r4, r5
10000156:	ea80 0202 	eor.w	r2, r0, r2
1000015a:	ea81 0303 	eor.w	r3, r1, r3
1000015e:	ea82 0000 	eor.w	r0, r2, r0
10000162:	ea83 0101 	eor.w	r1, r3, r1
10000166:	ea80 0202 	eor.w	r2, r0, r2
1000016a:	ea81 0303 	eor.w	r3, r1, r3
1000016e:	2d36      	cmp	r5, #54	; 0x36
10000170:	bf88      	it	hi
10000172:	bd30      	pophi	{r4, r5, pc}
10000174:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
10000178:	ea4f 3101 	mov.w	r1, r1, lsl #12
1000017c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
10000180:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
10000184:	d002      	beq.n	1000018c <__adddf3+0x70>
10000186:	4240      	negs	r0, r0
10000188:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1000018c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
10000190:	ea4f 3303 	mov.w	r3, r3, lsl #12
10000194:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
10000198:	d002      	beq.n	100001a0 <__adddf3+0x84>
1000019a:	4252      	negs	r2, r2
1000019c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
100001a0:	ea94 0f05 	teq	r4, r5
100001a4:	f000 80a7 	beq.w	100002f6 <__adddf3+0x1da>
100001a8:	f1a4 0401 	sub.w	r4, r4, #1
100001ac:	f1d5 0e20 	rsbs	lr, r5, #32
100001b0:	db0d      	blt.n	100001ce <__adddf3+0xb2>
100001b2:	fa02 fc0e 	lsl.w	ip, r2, lr
100001b6:	fa22 f205 	lsr.w	r2, r2, r5
100001ba:	1880      	adds	r0, r0, r2
100001bc:	f141 0100 	adc.w	r1, r1, #0
100001c0:	fa03 f20e 	lsl.w	r2, r3, lr
100001c4:	1880      	adds	r0, r0, r2
100001c6:	fa43 f305 	asr.w	r3, r3, r5
100001ca:	4159      	adcs	r1, r3
100001cc:	e00e      	b.n	100001ec <__adddf3+0xd0>
100001ce:	f1a5 0520 	sub.w	r5, r5, #32
100001d2:	f10e 0e20 	add.w	lr, lr, #32
100001d6:	2a01      	cmp	r2, #1
100001d8:	fa03 fc0e 	lsl.w	ip, r3, lr
100001dc:	bf28      	it	cs
100001de:	f04c 0c02 	orrcs.w	ip, ip, #2
100001e2:	fa43 f305 	asr.w	r3, r3, r5
100001e6:	18c0      	adds	r0, r0, r3
100001e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
100001ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
100001f0:	d507      	bpl.n	10000202 <__adddf3+0xe6>
100001f2:	f04f 0e00 	mov.w	lr, #0
100001f6:	f1dc 0c00 	rsbs	ip, ip, #0
100001fa:	eb7e 0000 	sbcs.w	r0, lr, r0
100001fe:	eb6e 0101 	sbc.w	r1, lr, r1
10000202:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
10000206:	d31b      	bcc.n	10000240 <__adddf3+0x124>
10000208:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1000020c:	d30c      	bcc.n	10000228 <__adddf3+0x10c>
1000020e:	0849      	lsrs	r1, r1, #1
10000210:	ea5f 0030 	movs.w	r0, r0, rrx
10000214:	ea4f 0c3c 	mov.w	ip, ip, rrx
10000218:	f104 0401 	add.w	r4, r4, #1
1000021c:	ea4f 5244 	mov.w	r2, r4, lsl #21
10000220:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
10000224:	f080 809a 	bcs.w	1000035c <__adddf3+0x240>
10000228:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1000022c:	bf08      	it	eq
1000022e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
10000232:	f150 0000 	adcs.w	r0, r0, #0
10000236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1000023a:	ea41 0105 	orr.w	r1, r1, r5
1000023e:	bd30      	pop	{r4, r5, pc}
10000240:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
10000244:	4140      	adcs	r0, r0
10000246:	eb41 0101 	adc.w	r1, r1, r1
1000024a:	3c01      	subs	r4, #1
1000024c:	bf28      	it	cs
1000024e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
10000252:	d2e9      	bcs.n	10000228 <__adddf3+0x10c>
10000254:	f091 0f00 	teq	r1, #0
10000258:	bf04      	itt	eq
1000025a:	4601      	moveq	r1, r0
1000025c:	2000      	moveq	r0, #0
1000025e:	fab1 f381 	clz	r3, r1
10000262:	bf08      	it	eq
10000264:	3320      	addeq	r3, #32
10000266:	f1a3 030b 	sub.w	r3, r3, #11
1000026a:	f1b3 0220 	subs.w	r2, r3, #32
1000026e:	da0c      	bge.n	1000028a <__adddf3+0x16e>
10000270:	320c      	adds	r2, #12
10000272:	dd08      	ble.n	10000286 <__adddf3+0x16a>
10000274:	f102 0c14 	add.w	ip, r2, #20
10000278:	f1c2 020c 	rsb	r2, r2, #12
1000027c:	fa01 f00c 	lsl.w	r0, r1, ip
10000280:	fa21 f102 	lsr.w	r1, r1, r2
10000284:	e00c      	b.n	100002a0 <__adddf3+0x184>
10000286:	f102 0214 	add.w	r2, r2, #20
1000028a:	bfd8      	it	le
1000028c:	f1c2 0c20 	rsble	ip, r2, #32
10000290:	fa01 f102 	lsl.w	r1, r1, r2
10000294:	fa20 fc0c 	lsr.w	ip, r0, ip
10000298:	bfdc      	itt	le
1000029a:	ea41 010c 	orrle.w	r1, r1, ip
1000029e:	4090      	lslle	r0, r2
100002a0:	1ae4      	subs	r4, r4, r3
100002a2:	bfa2      	ittt	ge
100002a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
100002a8:	4329      	orrge	r1, r5
100002aa:	bd30      	popge	{r4, r5, pc}
100002ac:	ea6f 0404 	mvn.w	r4, r4
100002b0:	3c1f      	subs	r4, #31
100002b2:	da1c      	bge.n	100002ee <__adddf3+0x1d2>
100002b4:	340c      	adds	r4, #12
100002b6:	dc0e      	bgt.n	100002d6 <__adddf3+0x1ba>
100002b8:	f104 0414 	add.w	r4, r4, #20
100002bc:	f1c4 0220 	rsb	r2, r4, #32
100002c0:	fa20 f004 	lsr.w	r0, r0, r4
100002c4:	fa01 f302 	lsl.w	r3, r1, r2
100002c8:	ea40 0003 	orr.w	r0, r0, r3
100002cc:	fa21 f304 	lsr.w	r3, r1, r4
100002d0:	ea45 0103 	orr.w	r1, r5, r3
100002d4:	bd30      	pop	{r4, r5, pc}
100002d6:	f1c4 040c 	rsb	r4, r4, #12
100002da:	f1c4 0220 	rsb	r2, r4, #32
100002de:	fa20 f002 	lsr.w	r0, r0, r2
100002e2:	fa01 f304 	lsl.w	r3, r1, r4
100002e6:	ea40 0003 	orr.w	r0, r0, r3
100002ea:	4629      	mov	r1, r5
100002ec:	bd30      	pop	{r4, r5, pc}
100002ee:	fa21 f004 	lsr.w	r0, r1, r4
100002f2:	4629      	mov	r1, r5
100002f4:	bd30      	pop	{r4, r5, pc}
100002f6:	f094 0f00 	teq	r4, #0
100002fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
100002fe:	bf06      	itte	eq
10000300:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
10000304:	3401      	addeq	r4, #1
10000306:	3d01      	subne	r5, #1
10000308:	e74e      	b.n	100001a8 <__adddf3+0x8c>
1000030a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1000030e:	bf18      	it	ne
10000310:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
10000314:	d029      	beq.n	1000036a <__adddf3+0x24e>
10000316:	ea94 0f05 	teq	r4, r5
1000031a:	bf08      	it	eq
1000031c:	ea90 0f02 	teqeq	r0, r2
10000320:	d005      	beq.n	1000032e <__adddf3+0x212>
10000322:	ea54 0c00 	orrs.w	ip, r4, r0
10000326:	bf04      	itt	eq
10000328:	4619      	moveq	r1, r3
1000032a:	4610      	moveq	r0, r2
1000032c:	bd30      	pop	{r4, r5, pc}
1000032e:	ea91 0f03 	teq	r1, r3
10000332:	bf1e      	ittt	ne
10000334:	2100      	movne	r1, #0
10000336:	2000      	movne	r0, #0
10000338:	bd30      	popne	{r4, r5, pc}
1000033a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1000033e:	d105      	bne.n	1000034c <__adddf3+0x230>
10000340:	0040      	lsls	r0, r0, #1
10000342:	4149      	adcs	r1, r1
10000344:	bf28      	it	cs
10000346:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1000034a:	bd30      	pop	{r4, r5, pc}
1000034c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
10000350:	bf3c      	itt	cc
10000352:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
10000356:	bd30      	popcc	{r4, r5, pc}
10000358:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1000035c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
10000360:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
10000364:	f04f 0000 	mov.w	r0, #0
10000368:	bd30      	pop	{r4, r5, pc}
1000036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1000036e:	bf1a      	itte	ne
10000370:	4619      	movne	r1, r3
10000372:	4610      	movne	r0, r2
10000374:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
10000378:	bf1c      	itt	ne
1000037a:	460b      	movne	r3, r1
1000037c:	4602      	movne	r2, r0
1000037e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
10000382:	bf06      	itte	eq
10000384:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
10000388:	ea91 0f03 	teqeq	r1, r3
1000038c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
10000390:	bd30      	pop	{r4, r5, pc}
10000392:	bf00      	nop

10000394 <__aeabi_ui2d>:
10000394:	f090 0f00 	teq	r0, #0
10000398:	bf04      	itt	eq
1000039a:	2100      	moveq	r1, #0
1000039c:	4770      	bxeq	lr
1000039e:	b530      	push	{r4, r5, lr}
100003a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
100003a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
100003a8:	f04f 0500 	mov.w	r5, #0
100003ac:	f04f 0100 	mov.w	r1, #0
100003b0:	e750      	b.n	10000254 <__adddf3+0x138>
100003b2:	bf00      	nop

100003b4 <__aeabi_i2d>:
100003b4:	f090 0f00 	teq	r0, #0
100003b8:	bf04      	itt	eq
100003ba:	2100      	moveq	r1, #0
100003bc:	4770      	bxeq	lr
100003be:	b530      	push	{r4, r5, lr}
100003c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
100003c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
100003c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
100003cc:	bf48      	it	mi
100003ce:	4240      	negmi	r0, r0
100003d0:	f04f 0100 	mov.w	r1, #0
100003d4:	e73e      	b.n	10000254 <__adddf3+0x138>
100003d6:	bf00      	nop

100003d8 <__aeabi_f2d>:
100003d8:	0042      	lsls	r2, r0, #1
100003da:	ea4f 01e2 	mov.w	r1, r2, asr #3
100003de:	ea4f 0131 	mov.w	r1, r1, rrx
100003e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
100003e6:	bf1f      	itttt	ne
100003e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
100003ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
100003f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
100003f4:	4770      	bxne	lr
100003f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
100003fa:	bf08      	it	eq
100003fc:	4770      	bxeq	lr
100003fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
10000402:	bf04      	itt	eq
10000404:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
10000408:	4770      	bxeq	lr
1000040a:	b530      	push	{r4, r5, lr}
1000040c:	f44f 7460 	mov.w	r4, #896	; 0x380
10000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
10000414:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
10000418:	e71c      	b.n	10000254 <__adddf3+0x138>
1000041a:	bf00      	nop

1000041c <__aeabi_ul2d>:
1000041c:	ea50 0201 	orrs.w	r2, r0, r1
10000420:	bf08      	it	eq
10000422:	4770      	bxeq	lr
10000424:	b530      	push	{r4, r5, lr}
10000426:	f04f 0500 	mov.w	r5, #0
1000042a:	e00a      	b.n	10000442 <__aeabi_l2d+0x16>

1000042c <__aeabi_l2d>:
1000042c:	ea50 0201 	orrs.w	r2, r0, r1
10000430:	bf08      	it	eq
10000432:	4770      	bxeq	lr
10000434:	b530      	push	{r4, r5, lr}
10000436:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1000043a:	d502      	bpl.n	10000442 <__aeabi_l2d+0x16>
1000043c:	4240      	negs	r0, r0
1000043e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10000442:	f44f 6480 	mov.w	r4, #1024	; 0x400
10000446:	f104 0432 	add.w	r4, r4, #50	; 0x32
1000044a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1000044e:	f43f aed8 	beq.w	10000202 <__adddf3+0xe6>
10000452:	f04f 0203 	mov.w	r2, #3
10000456:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1000045a:	bf18      	it	ne
1000045c:	3203      	addne	r2, #3
1000045e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
10000462:	bf18      	it	ne
10000464:	3203      	addne	r2, #3
10000466:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1000046a:	f1c2 0320 	rsb	r3, r2, #32
1000046e:	fa00 fc03 	lsl.w	ip, r0, r3
10000472:	fa20 f002 	lsr.w	r0, r0, r2
10000476:	fa01 fe03 	lsl.w	lr, r1, r3
1000047a:	ea40 000e 	orr.w	r0, r0, lr
1000047e:	fa21 f102 	lsr.w	r1, r1, r2
10000482:	4414      	add	r4, r2
10000484:	e6bd      	b.n	10000202 <__adddf3+0xe6>
10000486:	bf00      	nop

10000488 <__aeabi_dmul>:
10000488:	b570      	push	{r4, r5, r6, lr}
1000048a:	f04f 0cff 	mov.w	ip, #255	; 0xff
1000048e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
10000492:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
10000496:	bf1d      	ittte	ne
10000498:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1000049c:	ea94 0f0c 	teqne	r4, ip
100004a0:	ea95 0f0c 	teqne	r5, ip
100004a4:	f000 f8de 	bleq	10000664 <__aeabi_dmul+0x1dc>
100004a8:	442c      	add	r4, r5
100004aa:	ea81 0603 	eor.w	r6, r1, r3
100004ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
100004b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
100004b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
100004ba:	bf18      	it	ne
100004bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
100004c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
100004c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
100004c8:	d038      	beq.n	1000053c <__aeabi_dmul+0xb4>
100004ca:	fba0 ce02 	umull	ip, lr, r0, r2
100004ce:	f04f 0500 	mov.w	r5, #0
100004d2:	fbe1 e502 	umlal	lr, r5, r1, r2
100004d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
100004da:	fbe0 e503 	umlal	lr, r5, r0, r3
100004de:	f04f 0600 	mov.w	r6, #0
100004e2:	fbe1 5603 	umlal	r5, r6, r1, r3
100004e6:	f09c 0f00 	teq	ip, #0
100004ea:	bf18      	it	ne
100004ec:	f04e 0e01 	orrne.w	lr, lr, #1
100004f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
100004f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
100004f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
100004fc:	d204      	bcs.n	10000508 <__aeabi_dmul+0x80>
100004fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
10000502:	416d      	adcs	r5, r5
10000504:	eb46 0606 	adc.w	r6, r6, r6
10000508:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1000050c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
10000510:	ea4f 20c5 	mov.w	r0, r5, lsl #11
10000514:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
10000518:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1000051c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
10000520:	bf88      	it	hi
10000522:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
10000526:	d81e      	bhi.n	10000566 <__aeabi_dmul+0xde>
10000528:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1000052c:	bf08      	it	eq
1000052e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
10000532:	f150 0000 	adcs.w	r0, r0, #0
10000536:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1000053a:	bd70      	pop	{r4, r5, r6, pc}
1000053c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
10000540:	ea46 0101 	orr.w	r1, r6, r1
10000544:	ea40 0002 	orr.w	r0, r0, r2
10000548:	ea81 0103 	eor.w	r1, r1, r3
1000054c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
10000550:	bfc2      	ittt	gt
10000552:	ebd4 050c 	rsbsgt	r5, r4, ip
10000556:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1000055a:	bd70      	popgt	{r4, r5, r6, pc}
1000055c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
10000560:	f04f 0e00 	mov.w	lr, #0
10000564:	3c01      	subs	r4, #1
10000566:	f300 80ab 	bgt.w	100006c0 <__aeabi_dmul+0x238>
1000056a:	f114 0f36 	cmn.w	r4, #54	; 0x36
1000056e:	bfde      	ittt	le
10000570:	2000      	movle	r0, #0
10000572:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
10000576:	bd70      	pople	{r4, r5, r6, pc}
10000578:	f1c4 0400 	rsb	r4, r4, #0
1000057c:	3c20      	subs	r4, #32
1000057e:	da35      	bge.n	100005ec <__aeabi_dmul+0x164>
10000580:	340c      	adds	r4, #12
10000582:	dc1b      	bgt.n	100005bc <__aeabi_dmul+0x134>
10000584:	f104 0414 	add.w	r4, r4, #20
10000588:	f1c4 0520 	rsb	r5, r4, #32
1000058c:	fa00 f305 	lsl.w	r3, r0, r5
10000590:	fa20 f004 	lsr.w	r0, r0, r4
10000594:	fa01 f205 	lsl.w	r2, r1, r5
10000598:	ea40 0002 	orr.w	r0, r0, r2
1000059c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
100005a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
100005a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
100005a8:	fa21 f604 	lsr.w	r6, r1, r4
100005ac:	eb42 0106 	adc.w	r1, r2, r6
100005b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
100005b4:	bf08      	it	eq
100005b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
100005ba:	bd70      	pop	{r4, r5, r6, pc}
100005bc:	f1c4 040c 	rsb	r4, r4, #12
100005c0:	f1c4 0520 	rsb	r5, r4, #32
100005c4:	fa00 f304 	lsl.w	r3, r0, r4
100005c8:	fa20 f005 	lsr.w	r0, r0, r5
100005cc:	fa01 f204 	lsl.w	r2, r1, r4
100005d0:	ea40 0002 	orr.w	r0, r0, r2
100005d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
100005d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
100005dc:	f141 0100 	adc.w	r1, r1, #0
100005e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
100005e4:	bf08      	it	eq
100005e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
100005ea:	bd70      	pop	{r4, r5, r6, pc}
100005ec:	f1c4 0520 	rsb	r5, r4, #32
100005f0:	fa00 f205 	lsl.w	r2, r0, r5
100005f4:	ea4e 0e02 	orr.w	lr, lr, r2
100005f8:	fa20 f304 	lsr.w	r3, r0, r4
100005fc:	fa01 f205 	lsl.w	r2, r1, r5
10000600:	ea43 0302 	orr.w	r3, r3, r2
10000604:	fa21 f004 	lsr.w	r0, r1, r4
10000608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1000060c:	fa21 f204 	lsr.w	r2, r1, r4
10000610:	ea20 0002 	bic.w	r0, r0, r2
10000614:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
10000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1000061c:	bf08      	it	eq
1000061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
10000622:	bd70      	pop	{r4, r5, r6, pc}
10000624:	f094 0f00 	teq	r4, #0
10000628:	d10f      	bne.n	1000064a <__aeabi_dmul+0x1c2>
1000062a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1000062e:	0040      	lsls	r0, r0, #1
10000630:	eb41 0101 	adc.w	r1, r1, r1
10000634:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
10000638:	bf08      	it	eq
1000063a:	3c01      	subeq	r4, #1
1000063c:	d0f7      	beq.n	1000062e <__aeabi_dmul+0x1a6>
1000063e:	ea41 0106 	orr.w	r1, r1, r6
10000642:	f095 0f00 	teq	r5, #0
10000646:	bf18      	it	ne
10000648:	4770      	bxne	lr
1000064a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1000064e:	0052      	lsls	r2, r2, #1
10000650:	eb43 0303 	adc.w	r3, r3, r3
10000654:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
10000658:	bf08      	it	eq
1000065a:	3d01      	subeq	r5, #1
1000065c:	d0f7      	beq.n	1000064e <__aeabi_dmul+0x1c6>
1000065e:	ea43 0306 	orr.w	r3, r3, r6
10000662:	4770      	bx	lr
10000664:	ea94 0f0c 	teq	r4, ip
10000668:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1000066c:	bf18      	it	ne
1000066e:	ea95 0f0c 	teqne	r5, ip
10000672:	d00c      	beq.n	1000068e <__aeabi_dmul+0x206>
10000674:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
10000678:	bf18      	it	ne
1000067a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1000067e:	d1d1      	bne.n	10000624 <__aeabi_dmul+0x19c>
10000680:	ea81 0103 	eor.w	r1, r1, r3
10000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
10000688:	f04f 0000 	mov.w	r0, #0
1000068c:	bd70      	pop	{r4, r5, r6, pc}
1000068e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
10000692:	bf06      	itte	eq
10000694:	4610      	moveq	r0, r2
10000696:	4619      	moveq	r1, r3
10000698:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1000069c:	d019      	beq.n	100006d2 <__aeabi_dmul+0x24a>
1000069e:	ea94 0f0c 	teq	r4, ip
100006a2:	d102      	bne.n	100006aa <__aeabi_dmul+0x222>
100006a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
100006a8:	d113      	bne.n	100006d2 <__aeabi_dmul+0x24a>
100006aa:	ea95 0f0c 	teq	r5, ip
100006ae:	d105      	bne.n	100006bc <__aeabi_dmul+0x234>
100006b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
100006b4:	bf1c      	itt	ne
100006b6:	4610      	movne	r0, r2
100006b8:	4619      	movne	r1, r3
100006ba:	d10a      	bne.n	100006d2 <__aeabi_dmul+0x24a>
100006bc:	ea81 0103 	eor.w	r1, r1, r3
100006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
100006c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
100006c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
100006cc:	f04f 0000 	mov.w	r0, #0
100006d0:	bd70      	pop	{r4, r5, r6, pc}
100006d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
100006d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
100006da:	bd70      	pop	{r4, r5, r6, pc}

100006dc <__aeabi_ddiv>:
100006dc:	b570      	push	{r4, r5, r6, lr}
100006de:	f04f 0cff 	mov.w	ip, #255	; 0xff
100006e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
100006e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
100006ea:	bf1d      	ittte	ne
100006ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
100006f0:	ea94 0f0c 	teqne	r4, ip
100006f4:	ea95 0f0c 	teqne	r5, ip
100006f8:	f000 f8a7 	bleq	1000084a <__aeabi_ddiv+0x16e>
100006fc:	eba4 0405 	sub.w	r4, r4, r5
10000700:	ea81 0e03 	eor.w	lr, r1, r3
10000704:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
10000708:	ea4f 3101 	mov.w	r1, r1, lsl #12
1000070c:	f000 8088 	beq.w	10000820 <__aeabi_ddiv+0x144>
10000710:	ea4f 3303 	mov.w	r3, r3, lsl #12
10000714:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
10000718:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1000071c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
10000720:	ea4f 2202 	mov.w	r2, r2, lsl #8
10000724:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
10000728:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1000072c:	ea4f 2600 	mov.w	r6, r0, lsl #8
10000730:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
10000734:	429d      	cmp	r5, r3
10000736:	bf08      	it	eq
10000738:	4296      	cmpeq	r6, r2
1000073a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1000073e:	f504 7440 	add.w	r4, r4, #768	; 0x300
10000742:	d202      	bcs.n	1000074a <__aeabi_ddiv+0x6e>
10000744:	085b      	lsrs	r3, r3, #1
10000746:	ea4f 0232 	mov.w	r2, r2, rrx
1000074a:	1ab6      	subs	r6, r6, r2
1000074c:	eb65 0503 	sbc.w	r5, r5, r3
10000750:	085b      	lsrs	r3, r3, #1
10000752:	ea4f 0232 	mov.w	r2, r2, rrx
10000756:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1000075a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1000075e:	ebb6 0e02 	subs.w	lr, r6, r2
10000762:	eb75 0e03 	sbcs.w	lr, r5, r3
10000766:	bf22      	ittt	cs
10000768:	1ab6      	subcs	r6, r6, r2
1000076a:	4675      	movcs	r5, lr
1000076c:	ea40 000c 	orrcs.w	r0, r0, ip
10000770:	085b      	lsrs	r3, r3, #1
10000772:	ea4f 0232 	mov.w	r2, r2, rrx
10000776:	ebb6 0e02 	subs.w	lr, r6, r2
1000077a:	eb75 0e03 	sbcs.w	lr, r5, r3
1000077e:	bf22      	ittt	cs
10000780:	1ab6      	subcs	r6, r6, r2
10000782:	4675      	movcs	r5, lr
10000784:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
10000788:	085b      	lsrs	r3, r3, #1
1000078a:	ea4f 0232 	mov.w	r2, r2, rrx
1000078e:	ebb6 0e02 	subs.w	lr, r6, r2
10000792:	eb75 0e03 	sbcs.w	lr, r5, r3
10000796:	bf22      	ittt	cs
10000798:	1ab6      	subcs	r6, r6, r2
1000079a:	4675      	movcs	r5, lr
1000079c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
100007a0:	085b      	lsrs	r3, r3, #1
100007a2:	ea4f 0232 	mov.w	r2, r2, rrx
100007a6:	ebb6 0e02 	subs.w	lr, r6, r2
100007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
100007ae:	bf22      	ittt	cs
100007b0:	1ab6      	subcs	r6, r6, r2
100007b2:	4675      	movcs	r5, lr
100007b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
100007b8:	ea55 0e06 	orrs.w	lr, r5, r6
100007bc:	d018      	beq.n	100007f0 <__aeabi_ddiv+0x114>
100007be:	ea4f 1505 	mov.w	r5, r5, lsl #4
100007c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
100007c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
100007ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
100007ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
100007d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
100007d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
100007da:	d1c0      	bne.n	1000075e <__aeabi_ddiv+0x82>
100007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
100007e0:	d10b      	bne.n	100007fa <__aeabi_ddiv+0x11e>
100007e2:	ea41 0100 	orr.w	r1, r1, r0
100007e6:	f04f 0000 	mov.w	r0, #0
100007ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
100007ee:	e7b6      	b.n	1000075e <__aeabi_ddiv+0x82>
100007f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
100007f4:	bf04      	itt	eq
100007f6:	4301      	orreq	r1, r0
100007f8:	2000      	moveq	r0, #0
100007fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
100007fe:	bf88      	it	hi
10000800:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
10000804:	f63f aeaf 	bhi.w	10000566 <__aeabi_dmul+0xde>
10000808:	ebb5 0c03 	subs.w	ip, r5, r3
1000080c:	bf04      	itt	eq
1000080e:	ebb6 0c02 	subseq.w	ip, r6, r2
10000812:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
10000816:	f150 0000 	adcs.w	r0, r0, #0
1000081a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1000081e:	bd70      	pop	{r4, r5, r6, pc}
10000820:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
10000824:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
10000828:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1000082c:	bfc2      	ittt	gt
1000082e:	ebd4 050c 	rsbsgt	r5, r4, ip
10000832:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
10000836:	bd70      	popgt	{r4, r5, r6, pc}
10000838:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1000083c:	f04f 0e00 	mov.w	lr, #0
10000840:	3c01      	subs	r4, #1
10000842:	e690      	b.n	10000566 <__aeabi_dmul+0xde>
10000844:	ea45 0e06 	orr.w	lr, r5, r6
10000848:	e68d      	b.n	10000566 <__aeabi_dmul+0xde>
1000084a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1000084e:	ea94 0f0c 	teq	r4, ip
10000852:	bf08      	it	eq
10000854:	ea95 0f0c 	teqeq	r5, ip
10000858:	f43f af3b 	beq.w	100006d2 <__aeabi_dmul+0x24a>
1000085c:	ea94 0f0c 	teq	r4, ip
10000860:	d10a      	bne.n	10000878 <__aeabi_ddiv+0x19c>
10000862:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
10000866:	f47f af34 	bne.w	100006d2 <__aeabi_dmul+0x24a>
1000086a:	ea95 0f0c 	teq	r5, ip
1000086e:	f47f af25 	bne.w	100006bc <__aeabi_dmul+0x234>
10000872:	4610      	mov	r0, r2
10000874:	4619      	mov	r1, r3
10000876:	e72c      	b.n	100006d2 <__aeabi_dmul+0x24a>
10000878:	ea95 0f0c 	teq	r5, ip
1000087c:	d106      	bne.n	1000088c <__aeabi_ddiv+0x1b0>
1000087e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
10000882:	f43f aefd 	beq.w	10000680 <__aeabi_dmul+0x1f8>
10000886:	4610      	mov	r0, r2
10000888:	4619      	mov	r1, r3
1000088a:	e722      	b.n	100006d2 <__aeabi_dmul+0x24a>
1000088c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
10000890:	bf18      	it	ne
10000892:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
10000896:	f47f aec5 	bne.w	10000624 <__aeabi_dmul+0x19c>
1000089a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1000089e:	f47f af0d 	bne.w	100006bc <__aeabi_dmul+0x234>
100008a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
100008a6:	f47f aeeb 	bne.w	10000680 <__aeabi_dmul+0x1f8>
100008aa:	e712      	b.n	100006d2 <__aeabi_dmul+0x24a>

100008ac <__gedf2>:
100008ac:	f04f 3cff 	mov.w	ip, #4294967295
100008b0:	e006      	b.n	100008c0 <__cmpdf2+0x4>
100008b2:	bf00      	nop

100008b4 <__ledf2>:
100008b4:	f04f 0c01 	mov.w	ip, #1
100008b8:	e002      	b.n	100008c0 <__cmpdf2+0x4>
100008ba:	bf00      	nop

100008bc <__cmpdf2>:
100008bc:	f04f 0c01 	mov.w	ip, #1
100008c0:	f84d cd04 	str.w	ip, [sp, #-4]!
100008c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
100008c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
100008cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
100008d0:	bf18      	it	ne
100008d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
100008d6:	d01b      	beq.n	10000910 <__cmpdf2+0x54>
100008d8:	b001      	add	sp, #4
100008da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
100008de:	bf0c      	ite	eq
100008e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
100008e4:	ea91 0f03 	teqne	r1, r3
100008e8:	bf02      	ittt	eq
100008ea:	ea90 0f02 	teqeq	r0, r2
100008ee:	2000      	moveq	r0, #0
100008f0:	4770      	bxeq	lr
100008f2:	f110 0f00 	cmn.w	r0, #0
100008f6:	ea91 0f03 	teq	r1, r3
100008fa:	bf58      	it	pl
100008fc:	4299      	cmppl	r1, r3
100008fe:	bf08      	it	eq
10000900:	4290      	cmpeq	r0, r2
10000902:	bf2c      	ite	cs
10000904:	17d8      	asrcs	r0, r3, #31
10000906:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1000090a:	f040 0001 	orr.w	r0, r0, #1
1000090e:	4770      	bx	lr
10000910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
10000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
10000918:	d102      	bne.n	10000920 <__cmpdf2+0x64>
1000091a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1000091e:	d107      	bne.n	10000930 <__cmpdf2+0x74>
10000920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
10000924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
10000928:	d1d6      	bne.n	100008d8 <__cmpdf2+0x1c>
1000092a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1000092e:	d0d3      	beq.n	100008d8 <__cmpdf2+0x1c>
10000930:	f85d 0b04 	ldr.w	r0, [sp], #4
10000934:	4770      	bx	lr
10000936:	bf00      	nop

10000938 <__aeabi_cdrcmple>:
10000938:	4684      	mov	ip, r0
1000093a:	4610      	mov	r0, r2
1000093c:	4662      	mov	r2, ip
1000093e:	468c      	mov	ip, r1
10000940:	4619      	mov	r1, r3
10000942:	4663      	mov	r3, ip
10000944:	e000      	b.n	10000948 <__aeabi_cdcmpeq>
10000946:	bf00      	nop

10000948 <__aeabi_cdcmpeq>:
10000948:	b501      	push	{r0, lr}
1000094a:	f7ff ffb7 	bl	100008bc <__cmpdf2>
1000094e:	2800      	cmp	r0, #0
10000950:	bf48      	it	mi
10000952:	f110 0f00 	cmnmi.w	r0, #0
10000956:	bd01      	pop	{r0, pc}

10000958 <__aeabi_dcmpeq>:
10000958:	f84d ed08 	str.w	lr, [sp, #-8]!
1000095c:	f7ff fff4 	bl	10000948 <__aeabi_cdcmpeq>
10000960:	bf0c      	ite	eq
10000962:	2001      	moveq	r0, #1
10000964:	2000      	movne	r0, #0
10000966:	f85d fb08 	ldr.w	pc, [sp], #8
1000096a:	bf00      	nop

1000096c <__aeabi_dcmplt>:
1000096c:	f84d ed08 	str.w	lr, [sp, #-8]!
10000970:	f7ff ffea 	bl	10000948 <__aeabi_cdcmpeq>
10000974:	bf34      	ite	cc
10000976:	2001      	movcc	r0, #1
10000978:	2000      	movcs	r0, #0
1000097a:	f85d fb08 	ldr.w	pc, [sp], #8
1000097e:	bf00      	nop

10000980 <__aeabi_dcmple>:
10000980:	f84d ed08 	str.w	lr, [sp, #-8]!
10000984:	f7ff ffe0 	bl	10000948 <__aeabi_cdcmpeq>
10000988:	bf94      	ite	ls
1000098a:	2001      	movls	r0, #1
1000098c:	2000      	movhi	r0, #0
1000098e:	f85d fb08 	ldr.w	pc, [sp], #8
10000992:	bf00      	nop

10000994 <__aeabi_dcmpge>:
10000994:	f84d ed08 	str.w	lr, [sp, #-8]!
10000998:	f7ff ffce 	bl	10000938 <__aeabi_cdrcmple>
1000099c:	bf94      	ite	ls
1000099e:	2001      	movls	r0, #1
100009a0:	2000      	movhi	r0, #0
100009a2:	f85d fb08 	ldr.w	pc, [sp], #8
100009a6:	bf00      	nop

100009a8 <__aeabi_dcmpgt>:
100009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
100009ac:	f7ff ffc4 	bl	10000938 <__aeabi_cdrcmple>
100009b0:	bf34      	ite	cc
100009b2:	2001      	movcc	r0, #1
100009b4:	2000      	movcs	r0, #0
100009b6:	f85d fb08 	ldr.w	pc, [sp], #8
100009ba:	bf00      	nop

100009bc <__aeabi_dcmpun>:
100009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
100009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
100009c4:	d102      	bne.n	100009cc <__aeabi_dcmpun+0x10>
100009c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
100009ca:	d10a      	bne.n	100009e2 <__aeabi_dcmpun+0x26>
100009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
100009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
100009d4:	d102      	bne.n	100009dc <__aeabi_dcmpun+0x20>
100009d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
100009da:	d102      	bne.n	100009e2 <__aeabi_dcmpun+0x26>
100009dc:	f04f 0000 	mov.w	r0, #0
100009e0:	4770      	bx	lr
100009e2:	f04f 0001 	mov.w	r0, #1
100009e6:	4770      	bx	lr

100009e8 <__aeabi_d2iz>:
100009e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
100009ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
100009f0:	d215      	bcs.n	10000a1e <__aeabi_d2iz+0x36>
100009f2:	d511      	bpl.n	10000a18 <__aeabi_d2iz+0x30>
100009f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
100009f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
100009fc:	d912      	bls.n	10000a24 <__aeabi_d2iz+0x3c>
100009fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
10000a02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
10000a06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
10000a0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
10000a0e:	fa23 f002 	lsr.w	r0, r3, r2
10000a12:	bf18      	it	ne
10000a14:	4240      	negne	r0, r0
10000a16:	4770      	bx	lr
10000a18:	f04f 0000 	mov.w	r0, #0
10000a1c:	4770      	bx	lr
10000a1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
10000a22:	d105      	bne.n	10000a30 <__aeabi_d2iz+0x48>
10000a24:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
10000a28:	bf08      	it	eq
10000a2a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
10000a2e:	4770      	bx	lr
10000a30:	f04f 0000 	mov.w	r0, #0
10000a34:	4770      	bx	lr
10000a36:	bf00      	nop

10000a38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10000a38:	b480      	push	{r7}
10000a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10000a3c:	4b0f      	ldr	r3, [pc, #60]	; (10000a7c <SystemInit+0x44>)
10000a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10000a42:	4a0e      	ldr	r2, [pc, #56]	; (10000a7c <SystemInit+0x44>)
10000a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
10000a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10000a4c:	4b0c      	ldr	r3, [pc, #48]	; (10000a80 <SystemInit+0x48>)
10000a4e:	2200      	movs	r2, #0
10000a50:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
10000a52:	4b0b      	ldr	r3, [pc, #44]	; (10000a80 <SystemInit+0x48>)
10000a54:	2200      	movs	r2, #0
10000a56:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10000a58:	4b09      	ldr	r3, [pc, #36]	; (10000a80 <SystemInit+0x48>)
10000a5a:	2200      	movs	r2, #0
10000a5c:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10000a5e:	4b08      	ldr	r3, [pc, #32]	; (10000a80 <SystemInit+0x48>)
10000a60:	2200      	movs	r2, #0
10000a62:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
10000a64:	4b06      	ldr	r3, [pc, #24]	; (10000a80 <SystemInit+0x48>)
10000a66:	2200      	movs	r2, #0
10000a68:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
10000a6a:	4b05      	ldr	r3, [pc, #20]	; (10000a80 <SystemInit+0x48>)
10000a6c:	2200      	movs	r2, #0
10000a6e:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10000a70:	bf00      	nop
10000a72:	46bd      	mov	sp, r7
10000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
10000a78:	4770      	bx	lr
10000a7a:	bf00      	nop
10000a7c:	e000ed00 	.word	0xe000ed00
10000a80:	5000d0c0 	.word	0x5000d0c0

10000a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
10000a84:	b580      	push	{r7, lr}
10000a86:	b092      	sub	sp, #72	; 0x48
10000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char buf[50]; // buffer for serial output string
	int buf_len = 0;
10000a8a:	2300      	movs	r3, #0
10000a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
10000a8e:	f000 fe47 	bl	10001720 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  if(IS_ENGINEERING_BOOT_MODE())
10000a92:	4b4f      	ldr	r3, [pc, #316]	; (10000bd0 <main+0x14c>)
10000a94:	681b      	ldr	r3, [r3, #0]
10000a96:	f003 0307 	and.w	r3, r3, #7
10000a9a:	2b04      	cmp	r3, #4
10000a9c:	d101      	bne.n	10000aa2 <main+0x1e>
  {
    /* Configure the system clock */
    SystemClock_Config();
10000a9e:	f000 f8ab 	bl	10000bf8 <SystemClock_Config>
  }

  if(IS_ENGINEERING_BOOT_MODE())
10000aa2:	4b4b      	ldr	r3, [pc, #300]	; (10000bd0 <main+0x14c>)
10000aa4:	681b      	ldr	r3, [r3, #0]
10000aa6:	f003 0307 	and.w	r3, r3, #7
10000aaa:	2b04      	cmp	r3, #4
10000aac:	d102      	bne.n	10000ab4 <main+0x30>
  {
    /* Configure the peripherals common clocks */
    PeriphCommonClock_Config();
10000aae:	f000 fa19 	bl	10000ee4 <PeriphCommonClock_Config>
10000ab2:	e005      	b.n	10000ac0 <main+0x3c>
  }
  else
  {
    /* IPCC initialisation */
    MX_IPCC_Init();
10000ab4:	f000 fae4 	bl	10001080 <MX_IPCC_Init>
    /* OpenAmp initialisation ---------------------------------*/
    MX_OPENAMP_Init(RPMSG_REMOTE, NULL);
10000ab8:	2100      	movs	r1, #0
10000aba:	2001      	movs	r0, #1
10000abc:	f00b fe48 	bl	1000c750 <MX_OPENAMP_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
10000ac0:	f000 fb3e 	bl	10001140 <MX_GPIO_Init>
  MX_CRC2_Init();
10000ac4:	f000 faba 	bl	1000103c <MX_CRC2_Init>
  MX_UART4_Init();
10000ac8:	f000 faee 	bl	100010a8 <MX_UART4_Init>
  MX_ADC2_Init();
10000acc:	f000 fa38 	bl	10000f40 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

   AI_Init();
10000ad0:	f000 fb6e 	bl	100011b0 <AI_Init>

  // start timer/counter
  // HAL_TIM_Base_Start(&htim16);

  // test print output
  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
10000ad4:	1d3b      	adds	r3, r7, #4
10000ad6:	493f      	ldr	r1, [pc, #252]	; (10000bd4 <main+0x150>)
10000ad8:	4618      	mov	r0, r3
10000ada:	f00f f9d3 	bl	1000fe84 <siprintf>
10000ade:	63f8      	str	r0, [r7, #60]	; 0x3c
  HAL_UART_Transmit(&huart4, (uint8_t *)buf, buf_len, 100);
10000ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10000ae2:	b29a      	uxth	r2, r3
10000ae4:	1d39      	adds	r1, r7, #4
10000ae6:	2364      	movs	r3, #100	; 0x64
10000ae8:	483b      	ldr	r0, [pc, #236]	; (10000bd8 <main+0x154>)
10000aea:	f008 f9d1 	bl	10008e90 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // uint32_t write_index = 0;
  while (1)
  {
	  for (int i = 0; i < AI_EMOTION_MODEL_IN_1_SIZE+1; ++i) {
10000aee:	2300      	movs	r3, #0
10000af0:	647b      	str	r3, [r7, #68]	; 0x44
10000af2:	e064      	b.n	10000bbe <main+0x13a>
	      HAL_ADC_Start(&hadc2);
10000af4:	4839      	ldr	r0, [pc, #228]	; (10000bdc <main+0x158>)
10000af6:	f001 fa67 	bl	10001fc8 <HAL_ADC_Start>
	      HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
10000afa:	f04f 31ff 	mov.w	r1, #4294967295
10000afe:	4837      	ldr	r0, [pc, #220]	; (10000bdc <main+0x158>)
10000b00:	f001 fb1c 	bl	1000213c <HAL_ADC_PollForConversion>
	      aiInData[i] = HAL_ADC_GetValue(&hadc2);
10000b04:	4835      	ldr	r0, [pc, #212]	; (10000bdc <main+0x158>)
10000b06:	f001 fbf1 	bl	100022ec <HAL_ADC_GetValue>
10000b0a:	ee07 0a90 	vmov	s15, r0
10000b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
10000b12:	4a33      	ldr	r2, [pc, #204]	; (10000be0 <main+0x15c>)
10000b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10000b16:	009b      	lsls	r3, r3, #2
10000b18:	4413      	add	r3, r2
10000b1a:	edc3 7a00 	vstr	s15, [r3]
	      HAL_Delay(1);
10000b1e:	2001      	movs	r0, #1
10000b20:	f000 fe6e 	bl	10001800 <HAL_Delay>

	      if (i == AI_EMOTION_MODEL_IN_1_SIZE) {
10000b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10000b26:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
10000b2a:	d145      	bne.n	10000bb8 <main+0x134>
	      		  buf_len = sprintf(buf, "Running inference\r\n");
10000b2c:	1d3b      	adds	r3, r7, #4
10000b2e:	492d      	ldr	r1, [pc, #180]	; (10000be4 <main+0x160>)
10000b30:	4618      	mov	r0, r3
10000b32:	f00f f9a7 	bl	1000fe84 <siprintf>
10000b36:	63f8      	str	r0, [r7, #60]	; 0x3c
	      		  HAL_UART_Transmit(&huart4, (uint8_t *)buf, buf_len, 100);
10000b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10000b3a:	b29a      	uxth	r2, r3
10000b3c:	1d39      	adds	r1, r7, #4
10000b3e:	2364      	movs	r3, #100	; 0x64
10000b40:	4825      	ldr	r0, [pc, #148]	; (10000bd8 <main+0x154>)
10000b42:	f008 f9a5 	bl	10008e90 <HAL_UART_Transmit>

	      		  AI_Run(aiInData, aiOutData);
10000b46:	4928      	ldr	r1, [pc, #160]	; (10000be8 <main+0x164>)
10000b48:	4825      	ldr	r0, [pc, #148]	; (10000be0 <main+0x15c>)
10000b4a:	f000 fb7b 	bl	10001244 <AI_Run>

	      		  /* Output results */
	      		  for (uint32_t i = 0; i < AI_EMOTION_MODEL_OUT_1_SIZE; i++) {
10000b4e:	2300      	movs	r3, #0
10000b50:	643b      	str	r3, [r7, #64]	; 0x40
10000b52:	e018      	b.n	10000b86 <main+0x102>
	      			  buf_len = sprintf(buf, "%8.6f ", aiOutData[i]);
10000b54:	4a24      	ldr	r2, [pc, #144]	; (10000be8 <main+0x164>)
10000b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10000b58:	009b      	lsls	r3, r3, #2
10000b5a:	4413      	add	r3, r2
10000b5c:	681b      	ldr	r3, [r3, #0]
10000b5e:	4618      	mov	r0, r3
10000b60:	f7ff fc3a 	bl	100003d8 <__aeabi_f2d>
10000b64:	4602      	mov	r2, r0
10000b66:	460b      	mov	r3, r1
10000b68:	1d38      	adds	r0, r7, #4
10000b6a:	4920      	ldr	r1, [pc, #128]	; (10000bec <main+0x168>)
10000b6c:	f00f f98a 	bl	1000fe84 <siprintf>
10000b70:	63f8      	str	r0, [r7, #60]	; 0x3c
	      			  HAL_UART_Transmit(&huart4, (uint8_t *)buf, buf_len, 100);
10000b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10000b74:	b29a      	uxth	r2, r3
10000b76:	1d39      	adds	r1, r7, #4
10000b78:	2364      	movs	r3, #100	; 0x64
10000b7a:	4817      	ldr	r0, [pc, #92]	; (10000bd8 <main+0x154>)
10000b7c:	f008 f988 	bl	10008e90 <HAL_UART_Transmit>
	      		  for (uint32_t i = 0; i < AI_EMOTION_MODEL_OUT_1_SIZE; i++) {
10000b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10000b82:	3301      	adds	r3, #1
10000b84:	643b      	str	r3, [r7, #64]	; 0x40
10000b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10000b88:	2b01      	cmp	r3, #1
10000b8a:	d9e3      	bls.n	10000b54 <main+0xd0>
	      		  }
	      		  uint32_t class = argmax(aiOutData, AI_EMOTION_MODEL_OUT_1_SIZE);
10000b8c:	2102      	movs	r1, #2
10000b8e:	4816      	ldr	r0, [pc, #88]	; (10000be8 <main+0x164>)
10000b90:	f000 fba0 	bl	100012d4 <argmax>
10000b94:	63b8      	str	r0, [r7, #56]	; 0x38
	      		  buf_len = sprintf(buf, "Prediction : %d - %s\r\n", (int) class, emotions[class]);
10000b96:	6bba      	ldr	r2, [r7, #56]	; 0x38
10000b98:	4915      	ldr	r1, [pc, #84]	; (10000bf0 <main+0x16c>)
10000b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10000b9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
10000ba0:	1d38      	adds	r0, r7, #4
10000ba2:	4914      	ldr	r1, [pc, #80]	; (10000bf4 <main+0x170>)
10000ba4:	f00f f96e 	bl	1000fe84 <siprintf>
10000ba8:	63f8      	str	r0, [r7, #60]	; 0x3c
	      		  HAL_UART_Transmit(&huart4, (uint8_t *)buf, buf_len, 100);
10000baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10000bac:	b29a      	uxth	r2, r3
10000bae:	1d39      	adds	r1, r7, #4
10000bb0:	2364      	movs	r3, #100	; 0x64
10000bb2:	4809      	ldr	r0, [pc, #36]	; (10000bd8 <main+0x154>)
10000bb4:	f008 f96c 	bl	10008e90 <HAL_UART_Transmit>
	  for (int i = 0; i < AI_EMOTION_MODEL_IN_1_SIZE+1; ++i) {
10000bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10000bba:	3301      	adds	r3, #1
10000bbc:	647b      	str	r3, [r7, #68]	; 0x44
10000bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10000bc0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
10000bc4:	dd96      	ble.n	10000af4 <main+0x70>
	  }



	  // Wait before doing it again
	  HAL_Delay(500);
10000bc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
10000bca:	f000 fe19 	bl	10001800 <HAL_Delay>
	  for (int i = 0; i < AI_EMOTION_MODEL_IN_1_SIZE+1; ++i) {
10000bce:	e78e      	b.n	10000aee <main+0x6a>
10000bd0:	50020000 	.word	0x50020000
10000bd4:	100122d4 	.word	0x100122d4
10000bd8:	10020eac 	.word	0x10020eac
10000bdc:	10020de8 	.word	0x10020de8
10000be0:	10020f44 	.word	0x10020f44
10000be4:	100122f0 	.word	0x100122f0
10000be8:	10021714 	.word	0x10021714
10000bec:	10012304 	.word	0x10012304
10000bf0:	10020004 	.word	0x10020004
10000bf4:	1001230c 	.word	0x1001230c

10000bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
10000bf8:	b580      	push	{r7, lr}
10000bfa:	b0d2      	sub	sp, #328	; 0x148
10000bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10000bfe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000c02:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000c06:	4618      	mov	r0, r3
10000c08:	f44f 738a 	mov.w	r3, #276	; 0x114
10000c0c:	461a      	mov	r2, r3
10000c0e:	2100      	movs	r1, #0
10000c10:	f00f f99b 	bl	1000ff4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10000c14:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000c18:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000c1c:	4618      	mov	r0, r3
10000c1e:	2330      	movs	r3, #48	; 0x30
10000c20:	461a      	mov	r2, r3
10000c22:	2100      	movs	r1, #0
10000c24:	f00f f991 	bl	1000ff4a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
10000c28:	f002 fe52 	bl	100038d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
10000c2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c30:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10000c34:	f023 0330 	bic.w	r3, r3, #48	; 0x30
10000c38:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000c3c:	f043 0320 	orr.w	r3, r3, #32
10000c40:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI
10000c44:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000c48:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000c4c:	2217      	movs	r2, #23
10000c4e:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIG;
10000c50:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000c54:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000c58:	f44f 62b0 	mov.w	r2, #1408	; 0x580
10000c5c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
10000c5e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000c62:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000c66:	2201      	movs	r2, #1
10000c68:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
10000c6a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000c6e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000c72:	2201      	movs	r2, #1
10000c74:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
10000c76:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000c7a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000c7e:	2200      	movs	r2, #0
10000c80:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
10000c82:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000c86:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000c8a:	2210      	movs	r2, #16
10000c8c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
10000c8e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000c92:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000c96:	2200      	movs	r2, #0
10000c98:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
10000c9a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000c9e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000ca2:	2202      	movs	r2, #2
10000ca4:	661a      	str	r2, [r3, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLL12SOURCE_HSE;
10000ca6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000caa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000cae:	2201      	movs	r2, #1
10000cb0:	665a      	str	r2, [r3, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLLM = 3;
10000cb2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000cb6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000cba:	2203      	movs	r2, #3
10000cbc:	669a      	str	r2, [r3, #104]	; 0x68
  RCC_OscInitStruct.PLL2.PLLN = 66;
10000cbe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000cc2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000cc6:	2242      	movs	r2, #66	; 0x42
10000cc8:	66da      	str	r2, [r3, #108]	; 0x6c
  RCC_OscInitStruct.PLL2.PLLP = 2;
10000cca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000cce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000cd2:	2202      	movs	r2, #2
10000cd4:	671a      	str	r2, [r3, #112]	; 0x70
  RCC_OscInitStruct.PLL2.PLLQ = 1;
10000cd6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000cda:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000cde:	2201      	movs	r2, #1
10000ce0:	675a      	str	r2, [r3, #116]	; 0x74
  RCC_OscInitStruct.PLL2.PLLR = 1;
10000ce2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000ce6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000cea:	2201      	movs	r2, #1
10000cec:	679a      	str	r2, [r3, #120]	; 0x78
  RCC_OscInitStruct.PLL2.PLLFRACV = 0x1400;
10000cee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000cf2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000cf6:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
10000cfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  RCC_OscInitStruct.PLL2.PLLMODE = RCC_PLL_FRACTIONAL;
10000cfe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d02:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d06:	2201      	movs	r2, #1
10000d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
10000d0c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d10:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d14:	2202      	movs	r2, #2
10000d16:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLL3SOURCE_HSE;
10000d1a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d1e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d22:	2201      	movs	r2, #1
10000d24:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  RCC_OscInitStruct.PLL3.PLLM = 2;
10000d28:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d2c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d30:	2202      	movs	r2, #2
10000d32:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  RCC_OscInitStruct.PLL3.PLLN = 34;
10000d36:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d3a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d3e:	2222      	movs	r2, #34	; 0x22
10000d40:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  RCC_OscInitStruct.PLL3.PLLP = 2;
10000d44:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d48:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d4c:	2202      	movs	r2, #2
10000d4e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  RCC_OscInitStruct.PLL3.PLLQ = 17;
10000d52:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d56:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d5a:	2211      	movs	r2, #17
10000d5c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  RCC_OscInitStruct.PLL3.PLLR = 37;
10000d60:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d64:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d68:	2225      	movs	r2, #37	; 0x25
10000d6a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  RCC_OscInitStruct.PLL3.PLLRGE = RCC_PLL3IFRANGE_1;
10000d6e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d72:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d76:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
10000d7a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  RCC_OscInitStruct.PLL3.PLLFRACV = 6660;
10000d7e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d82:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d86:	f641 2204 	movw	r2, #6660	; 0x1a04
10000d8a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  RCC_OscInitStruct.PLL3.PLLMODE = RCC_PLL_FRACTIONAL;
10000d8e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d92:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d96:	2201      	movs	r2, #1
10000d98:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
10000d9c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000da0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000da4:	2202      	movs	r2, #2
10000da6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLL4SOURCE_HSE;
10000daa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000dae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000db2:	2201      	movs	r2, #1
10000db4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  RCC_OscInitStruct.PLL4.PLLM = 4;
10000db8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000dbc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000dc0:	2204      	movs	r2, #4
10000dc2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  RCC_OscInitStruct.PLL4.PLLN = 99;
10000dc6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000dca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000dce:	2263      	movs	r2, #99	; 0x63
10000dd0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  RCC_OscInitStruct.PLL4.PLLP = 6;
10000dd4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000dd8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000ddc:	2206      	movs	r2, #6
10000dde:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  RCC_OscInitStruct.PLL4.PLLQ = 8;
10000de2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000de6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000dea:	2208      	movs	r2, #8
10000dec:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  RCC_OscInitStruct.PLL4.PLLR = 8;
10000df0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000df4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000df8:	2208      	movs	r2, #8
10000dfa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  RCC_OscInitStruct.PLL4.PLLRGE = RCC_PLL4IFRANGE_0;
10000dfe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e02:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e06:	2200      	movs	r2, #0
10000e08:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  RCC_OscInitStruct.PLL4.PLLFRACV = 0;
10000e0c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e10:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e14:	2200      	movs	r2, #0
10000e16:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  RCC_OscInitStruct.PLL4.PLLMODE = RCC_PLL_INTEGER;
10000e1a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e1e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e22:	2200      	movs	r2, #0
10000e24:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
10000e28:	f107 0334 	add.w	r3, r7, #52	; 0x34
10000e2c:	4618      	mov	r0, r3
10000e2e:	f002 fd5f 	bl	100038f0 <HAL_RCC_OscConfig>
10000e32:	4603      	mov	r3, r0
10000e34:	2b00      	cmp	r3, #0
10000e36:	d001      	beq.n	10000e3c <SystemClock_Config+0x244>
  {
    Error_Handler();
10000e38:	f000 fa7c 	bl	10001334 <Error_Handler>
  }

  /** RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
10000e3c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e40:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000e44:	22fe      	movs	r2, #254	; 0xfe
10000e46:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                              |RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_PLL2;
10000e48:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e4c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000e50:	2202      	movs	r2, #2
10000e52:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
10000e54:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e58:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000e5c:	2200      	movs	r2, #0
10000e5e:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_PLL3;
10000e60:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e64:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000e68:	2203      	movs	r2, #3
10000e6a:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
10000e6c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e70:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000e74:	2200      	movs	r2, #0
10000e76:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV2;
10000e78:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e7c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000e80:	2201      	movs	r2, #1
10000e82:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV4;
10000e84:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e88:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000e8c:	2202      	movs	r2, #2
10000e8e:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV2;
10000e90:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e94:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000e98:	2201      	movs	r2, #1
10000e9a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV2;
10000e9c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000ea0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000ea4:	2201      	movs	r2, #1
10000ea6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV2;
10000ea8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000eac:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000eb0:	2201      	movs	r2, #1
10000eb2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
10000eb4:	1d3b      	adds	r3, r7, #4
10000eb6:	4618      	mov	r0, r3
10000eb8:	f003 fab8 	bl	1000442c <HAL_RCC_ClockConfig>
10000ebc:	4603      	mov	r3, r0
10000ebe:	2b00      	cmp	r3, #0
10000ec0:	d001      	beq.n	10000ec6 <SystemClock_Config+0x2ce>
  {
    Error_Handler();
10000ec2:	f000 fa37 	bl	10001334 <Error_Handler>
  }

  /** Set the HSE division factor for RTC clock
  */
  __HAL_RCC_RTC_HSEDIV(24);
10000ec6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10000ecc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10000ed0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000ed4:	f043 0317 	orr.w	r3, r3, #23
10000ed8:	6453      	str	r3, [r2, #68]	; 0x44
}
10000eda:	bf00      	nop
10000edc:	f507 77a4 	add.w	r7, r7, #328	; 0x148
10000ee0:	46bd      	mov	sp, r7
10000ee2:	bd80      	pop	{r7, pc}

10000ee4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
10000ee4:	b580      	push	{r7, lr}
10000ee6:	b0d6      	sub	sp, #344	; 0x158
10000ee8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
10000eea:	f507 73ac 	add.w	r3, r7, #344	; 0x158
10000eee:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
10000ef2:	4618      	mov	r0, r3
10000ef4:	f44f 73ac 	mov.w	r3, #344	; 0x158
10000ef8:	461a      	mov	r2, r3
10000efa:	2100      	movs	r1, #0
10000efc:	f00f f825 	bl	1000ff4a <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
10000f00:	f507 73ac 	add.w	r3, r7, #344	; 0x158
10000f04:	f5a3 71ac 	sub.w	r1, r3, #344	; 0x158
10000f08:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
10000f0c:	f04f 0300 	mov.w	r3, #0
10000f10:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInit.CkperClockSelection = RCC_CKPERCLKSOURCE_HSE;
10000f14:	f507 73ac 	add.w	r3, r7, #344	; 0x158
10000f18:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
10000f1c:	2202      	movs	r2, #2
10000f1e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
10000f22:	463b      	mov	r3, r7
10000f24:	4618      	mov	r0, r3
10000f26:	f004 fdff 	bl	10005b28 <HAL_RCCEx_PeriphCLKConfig>
10000f2a:	4603      	mov	r3, r0
10000f2c:	2b00      	cmp	r3, #0
10000f2e:	d001      	beq.n	10000f34 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
10000f30:	f000 fa00 	bl	10001334 <Error_Handler>
  }
}
10000f34:	bf00      	nop
10000f36:	f507 77ac 	add.w	r7, r7, #344	; 0x158
10000f3a:	46bd      	mov	sp, r7
10000f3c:	bd80      	pop	{r7, pc}
	...

10000f40 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
10000f40:	b580      	push	{r7, lr}
10000f42:	b088      	sub	sp, #32
10000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
10000f46:	1d3b      	adds	r3, r7, #4
10000f48:	2200      	movs	r2, #0
10000f4a:	601a      	str	r2, [r3, #0]
10000f4c:	605a      	str	r2, [r3, #4]
10000f4e:	609a      	str	r2, [r3, #8]
10000f50:	60da      	str	r2, [r3, #12]
10000f52:	611a      	str	r2, [r3, #16]
10000f54:	615a      	str	r2, [r3, #20]
10000f56:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
10000f58:	4b35      	ldr	r3, [pc, #212]	; (10001030 <MX_ADC2_Init+0xf0>)
10000f5a:	4a36      	ldr	r2, [pc, #216]	; (10001034 <MX_ADC2_Init+0xf4>)
10000f5c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
10000f5e:	4b34      	ldr	r3, [pc, #208]	; (10001030 <MX_ADC2_Init+0xf0>)
10000f60:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
10000f64:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
10000f66:	4b32      	ldr	r3, [pc, #200]	; (10001030 <MX_ADC2_Init+0xf0>)
10000f68:	2200      	movs	r2, #0
10000f6a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
10000f6c:	4b30      	ldr	r3, [pc, #192]	; (10001030 <MX_ADC2_Init+0xf0>)
10000f6e:	2200      	movs	r2, #0
10000f70:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
10000f72:	4b2f      	ldr	r3, [pc, #188]	; (10001030 <MX_ADC2_Init+0xf0>)
10000f74:	2204      	movs	r2, #4
10000f76:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
10000f78:	4b2d      	ldr	r3, [pc, #180]	; (10001030 <MX_ADC2_Init+0xf0>)
10000f7a:	2200      	movs	r2, #0
10000f7c:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
10000f7e:	4b2c      	ldr	r3, [pc, #176]	; (10001030 <MX_ADC2_Init+0xf0>)
10000f80:	2200      	movs	r2, #0
10000f82:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
10000f84:	4b2a      	ldr	r3, [pc, #168]	; (10001030 <MX_ADC2_Init+0xf0>)
10000f86:	2201      	movs	r2, #1
10000f88:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
10000f8a:	4b29      	ldr	r3, [pc, #164]	; (10001030 <MX_ADC2_Init+0xf0>)
10000f8c:	2200      	movs	r2, #0
10000f8e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
10000f90:	4b27      	ldr	r3, [pc, #156]	; (10001030 <MX_ADC2_Init+0xf0>)
10000f92:	2200      	movs	r2, #0
10000f94:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
10000f96:	4b26      	ldr	r3, [pc, #152]	; (10001030 <MX_ADC2_Init+0xf0>)
10000f98:	2200      	movs	r2, #0
10000f9a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
10000f9c:	4b24      	ldr	r3, [pc, #144]	; (10001030 <MX_ADC2_Init+0xf0>)
10000f9e:	2200      	movs	r2, #0
10000fa0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
10000fa2:	4b23      	ldr	r3, [pc, #140]	; (10001030 <MX_ADC2_Init+0xf0>)
10000fa4:	2200      	movs	r2, #0
10000fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
10000fa8:	4b21      	ldr	r3, [pc, #132]	; (10001030 <MX_ADC2_Init+0xf0>)
10000faa:	2200      	movs	r2, #0
10000fac:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
10000fae:	4b20      	ldr	r3, [pc, #128]	; (10001030 <MX_ADC2_Init+0xf0>)
10000fb0:	2200      	movs	r2, #0
10000fb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
10000fb6:	481e      	ldr	r0, [pc, #120]	; (10001030 <MX_ADC2_Init+0xf0>)
10000fb8:	f000 feac 	bl	10001d14 <HAL_ADC_Init>
10000fbc:	4603      	mov	r3, r0
10000fbe:	2b00      	cmp	r3, #0
10000fc0:	d001      	beq.n	10000fc6 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
10000fc2:	f000 f9b7 	bl	10001334 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
10000fc6:	4b1c      	ldr	r3, [pc, #112]	; (10001038 <MX_ADC2_Init+0xf8>)
10000fc8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
10000fca:	2306      	movs	r3, #6
10000fcc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
10000fce:	2300      	movs	r3, #0
10000fd0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
10000fd2:	f240 73ff 	movw	r3, #2047	; 0x7ff
10000fd6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
10000fd8:	2304      	movs	r3, #4
10000fda:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
10000fdc:	2300      	movs	r3, #0
10000fde:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
10000fe0:	1d3b      	adds	r3, r7, #4
10000fe2:	4619      	mov	r1, r3
10000fe4:	4812      	ldr	r0, [pc, #72]	; (10001030 <MX_ADC2_Init+0xf0>)
10000fe6:	f001 f98f 	bl	10002308 <HAL_ADC_ConfigChannel>
10000fea:	4603      	mov	r3, r0
10000fec:	2b00      	cmp	r3, #0
10000fee:	d001      	beq.n	10000ff4 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
10000ff0:	f000 f9a0 	bl	10001334 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  __HAL_RCC_VREF_CLK_ENABLE(); // Enable the VREF clock
10000ff4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ff8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
10000ffc:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
      HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE); // Disable the high impedance mode which is the default one read page 1694 of refman
10001000:	2000      	movs	r0, #0
10001002:	f000 fc35 	bl	10001870 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
      HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1); // To set the volage to 2.5v
10001006:	2000      	movs	r0, #0
10001008:	f000 fc1e 	bl	10001848 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
      HAL_SYSCFG_EnableVREFBUF(); // To enable VREFBUF
1000100c:	f000 fc44 	bl	10001898 <HAL_SYSCFG_EnableVREFBUF>

      if(HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
10001010:	f240 72ff 	movw	r2, #2047	; 0x7ff
10001014:	f04f 1101 	mov.w	r1, #65537	; 0x10001
10001018:	4805      	ldr	r0, [pc, #20]	; (10001030 <MX_ADC2_Init+0xf0>)
1000101a:	f001 fe39 	bl	10002c90 <HAL_ADCEx_Calibration_Start>
1000101e:	4603      	mov	r3, r0
10001020:	2b00      	cmp	r3, #0
10001022:	d001      	beq.n	10001028 <MX_ADC2_Init+0xe8>
      {
        /* Calibration Error */
        Error_Handler();
10001024:	f000 f986 	bl	10001334 <Error_Handler>
      }
  /* USER CODE END ADC2_Init 2 */

}
10001028:	bf00      	nop
1000102a:	3720      	adds	r7, #32
1000102c:	46bd      	mov	sp, r7
1000102e:	bd80      	pop	{r7, pc}
10001030:	10020de8 	.word	0x10020de8
10001034:	48003100 	.word	0x48003100
10001038:	19200040 	.word	0x19200040

1000103c <MX_CRC2_Init>:
  * @brief CRC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC2_Init(void)
{
1000103c:	b580      	push	{r7, lr}
1000103e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC2_Init 0 */

  /* USER CODE BEGIN CRC2_Init 1 */

  /* USER CODE END CRC2_Init 1 */
  hcrc2.Instance = CRC2;
10001040:	4b0d      	ldr	r3, [pc, #52]	; (10001078 <MX_CRC2_Init+0x3c>)
10001042:	4a0e      	ldr	r2, [pc, #56]	; (1000107c <MX_CRC2_Init+0x40>)
10001044:	601a      	str	r2, [r3, #0]
  hcrc2.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
10001046:	4b0c      	ldr	r3, [pc, #48]	; (10001078 <MX_CRC2_Init+0x3c>)
10001048:	2200      	movs	r2, #0
1000104a:	711a      	strb	r2, [r3, #4]
  hcrc2.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
1000104c:	4b0a      	ldr	r3, [pc, #40]	; (10001078 <MX_CRC2_Init+0x3c>)
1000104e:	2200      	movs	r2, #0
10001050:	715a      	strb	r2, [r3, #5]
  hcrc2.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
10001052:	4b09      	ldr	r3, [pc, #36]	; (10001078 <MX_CRC2_Init+0x3c>)
10001054:	2200      	movs	r2, #0
10001056:	615a      	str	r2, [r3, #20]
  hcrc2.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
10001058:	4b07      	ldr	r3, [pc, #28]	; (10001078 <MX_CRC2_Init+0x3c>)
1000105a:	2200      	movs	r2, #0
1000105c:	619a      	str	r2, [r3, #24]
  hcrc2.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
1000105e:	4b06      	ldr	r3, [pc, #24]	; (10001078 <MX_CRC2_Init+0x3c>)
10001060:	2201      	movs	r2, #1
10001062:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc2) != HAL_OK)
10001064:	4804      	ldr	r0, [pc, #16]	; (10001078 <MX_CRC2_Init+0x3c>)
10001066:	f001 ff89 	bl	10002f7c <HAL_CRC_Init>
1000106a:	4603      	mov	r3, r0
1000106c:	2b00      	cmp	r3, #0
1000106e:	d001      	beq.n	10001074 <MX_CRC2_Init+0x38>
  {
    Error_Handler();
10001070:	f000 f960 	bl	10001334 <Error_Handler>
  }
  /* USER CODE BEGIN CRC2_Init 2 */

  /* USER CODE END CRC2_Init 2 */

}
10001074:	bf00      	nop
10001076:	bd80      	pop	{r7, pc}
10001078:	10020e4c 	.word	0x10020e4c
1000107c:	4c004000 	.word	0x4c004000

10001080 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
10001080:	b580      	push	{r7, lr}
10001082:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
10001084:	4b06      	ldr	r3, [pc, #24]	; (100010a0 <MX_IPCC_Init+0x20>)
10001086:	4a07      	ldr	r2, [pc, #28]	; (100010a4 <MX_IPCC_Init+0x24>)
10001088:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
1000108a:	4805      	ldr	r0, [pc, #20]	; (100010a0 <MX_IPCC_Init+0x20>)
1000108c:	f002 fa0a 	bl	100034a4 <HAL_IPCC_Init>
10001090:	4603      	mov	r3, r0
10001092:	2b00      	cmp	r3, #0
10001094:	d001      	beq.n	1000109a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
10001096:	f000 f94d 	bl	10001334 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
1000109a:	bf00      	nop
1000109c:	bd80      	pop	{r7, pc}
1000109e:	bf00      	nop
100010a0:	10020e70 	.word	0x10020e70
100010a4:	4c001000 	.word	0x4c001000

100010a8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
100010a8:	b580      	push	{r7, lr}
100010aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
100010ac:	4b22      	ldr	r3, [pc, #136]	; (10001138 <MX_UART4_Init+0x90>)
100010ae:	4a23      	ldr	r2, [pc, #140]	; (1000113c <MX_UART4_Init+0x94>)
100010b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
100010b2:	4b21      	ldr	r3, [pc, #132]	; (10001138 <MX_UART4_Init+0x90>)
100010b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
100010b8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
100010ba:	4b1f      	ldr	r3, [pc, #124]	; (10001138 <MX_UART4_Init+0x90>)
100010bc:	2200      	movs	r2, #0
100010be:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
100010c0:	4b1d      	ldr	r3, [pc, #116]	; (10001138 <MX_UART4_Init+0x90>)
100010c2:	2200      	movs	r2, #0
100010c4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
100010c6:	4b1c      	ldr	r3, [pc, #112]	; (10001138 <MX_UART4_Init+0x90>)
100010c8:	2200      	movs	r2, #0
100010ca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
100010cc:	4b1a      	ldr	r3, [pc, #104]	; (10001138 <MX_UART4_Init+0x90>)
100010ce:	220c      	movs	r2, #12
100010d0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
100010d2:	4b19      	ldr	r3, [pc, #100]	; (10001138 <MX_UART4_Init+0x90>)
100010d4:	2200      	movs	r2, #0
100010d6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
100010d8:	4b17      	ldr	r3, [pc, #92]	; (10001138 <MX_UART4_Init+0x90>)
100010da:	2200      	movs	r2, #0
100010dc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
100010de:	4b16      	ldr	r3, [pc, #88]	; (10001138 <MX_UART4_Init+0x90>)
100010e0:	2200      	movs	r2, #0
100010e2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
100010e4:	4b14      	ldr	r3, [pc, #80]	; (10001138 <MX_UART4_Init+0x90>)
100010e6:	2200      	movs	r2, #0
100010e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
100010ea:	4b13      	ldr	r3, [pc, #76]	; (10001138 <MX_UART4_Init+0x90>)
100010ec:	2200      	movs	r2, #0
100010ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
100010f0:	4811      	ldr	r0, [pc, #68]	; (10001138 <MX_UART4_Init+0x90>)
100010f2:	f007 fe7d 	bl	10008df0 <HAL_UART_Init>
100010f6:	4603      	mov	r3, r0
100010f8:	2b00      	cmp	r3, #0
100010fa:	d001      	beq.n	10001100 <MX_UART4_Init+0x58>
  {
    Error_Handler();
100010fc:	f000 f91a 	bl	10001334 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
10001100:	2100      	movs	r1, #0
10001102:	480d      	ldr	r0, [pc, #52]	; (10001138 <MX_UART4_Init+0x90>)
10001104:	f009 f9a5 	bl	1000a452 <HAL_UARTEx_SetTxFifoThreshold>
10001108:	4603      	mov	r3, r0
1000110a:	2b00      	cmp	r3, #0
1000110c:	d001      	beq.n	10001112 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
1000110e:	f000 f911 	bl	10001334 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
10001112:	2100      	movs	r1, #0
10001114:	4808      	ldr	r0, [pc, #32]	; (10001138 <MX_UART4_Init+0x90>)
10001116:	f009 f9da 	bl	1000a4ce <HAL_UARTEx_SetRxFifoThreshold>
1000111a:	4603      	mov	r3, r0
1000111c:	2b00      	cmp	r3, #0
1000111e:	d001      	beq.n	10001124 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
10001120:	f000 f908 	bl	10001334 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
10001124:	4804      	ldr	r0, [pc, #16]	; (10001138 <MX_UART4_Init+0x90>)
10001126:	f009 f95b 	bl	1000a3e0 <HAL_UARTEx_DisableFifoMode>
1000112a:	4603      	mov	r3, r0
1000112c:	2b00      	cmp	r3, #0
1000112e:	d001      	beq.n	10001134 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
10001130:	f000 f900 	bl	10001334 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
10001134:	bf00      	nop
10001136:	bd80      	pop	{r7, pc}
10001138:	10020eac 	.word	0x10020eac
1000113c:	40010000 	.word	0x40010000

10001140 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
10001140:	b580      	push	{r7, lr}
10001142:	b086      	sub	sp, #24
10001144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10001146:	1d3b      	adds	r3, r7, #4
10001148:	2200      	movs	r2, #0
1000114a:	601a      	str	r2, [r3, #0]
1000114c:	605a      	str	r2, [r3, #4]
1000114e:	609a      	str	r2, [r3, #8]
10001150:	60da      	str	r2, [r3, #12]
10001152:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
10001154:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001158:	2204      	movs	r2, #4
1000115a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOH_CLK_ENABLE();
1000115e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001162:	2280      	movs	r2, #128	; 0x80
10001164:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOA_CLK_ENABLE();
10001168:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000116c:	2201      	movs	r2, #1
1000116e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOG_CLK_ENABLE();
10001172:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001176:	2240      	movs	r2, #64	; 0x40
10001178:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOB_CLK_ENABLE();
1000117c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001180:	2202      	movs	r2, #2
10001182:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOF_CLK_ENABLE();
10001186:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000118a:	2220      	movs	r2, #32
1000118c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

  /*Configure GPIO pins : USB_PWR_CC2_Pin USB_PWR_CC1_Pin */
  GPIO_InitStruct.Pin = USB_PWR_CC2_Pin|USB_PWR_CC1_Pin;
10001190:	2330      	movs	r3, #48	; 0x30
10001192:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
10001194:	2303      	movs	r3, #3
10001196:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10001198:	1d3b      	adds	r3, r7, #4
1000119a:	4619      	mov	r1, r3
1000119c:	4803      	ldr	r0, [pc, #12]	; (100011ac <MX_GPIO_Init+0x6c>)
1000119e:	f001 ffd7 	bl	10003150 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
100011a2:	bf00      	nop
100011a4:	3718      	adds	r7, #24
100011a6:	46bd      	mov	sp, r7
100011a8:	bd80      	pop	{r7, pc}
100011aa:	bf00      	nop
100011ac:	50002000 	.word	0x50002000

100011b0 <AI_Init>:

/* USER CODE BEGIN 4 */

static void AI_Init(void)
{
100011b0:	b580      	push	{r7, lr}
100011b2:	b090      	sub	sp, #64	; 0x40
100011b4:	af00      	add	r7, sp, #0
  ai_error err;

  char buf[50]; // buffer for serial output string
  int buf_len = 0;
100011b6:	2300      	movs	r3, #0
100011b8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Create a local array with the addresses of the activations buffers */
  const ai_handle act_addr[] = { activations };
100011ba:	4b1c      	ldr	r3, [pc, #112]	; (1000122c <AI_Init+0x7c>)
100011bc:	603b      	str	r3, [r7, #0]
  /* Create an instance of the model */
  err = ai_emotion_model_create_and_init(&emotion_model, act_addr, NULL);
100011be:	463b      	mov	r3, r7
100011c0:	2200      	movs	r2, #0
100011c2:	4619      	mov	r1, r3
100011c4:	481a      	ldr	r0, [pc, #104]	; (10001230 <AI_Init+0x80>)
100011c6:	f00b fce5 	bl	1000cb94 <ai_emotion_model_create_and_init>
100011ca:	4603      	mov	r3, r0
100011cc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (err.type != AI_ERROR_NONE) {
100011ce:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
100011d2:	2b00      	cmp	r3, #0
100011d4:	d013      	beq.n	100011fe <AI_Init+0x4e>
	  buf_len = sprintf(buf, "ai_emotion_model_create error - type=%d code=%d\r\n", err.type, err.code);
100011d6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
100011da:	461a      	mov	r2, r3
100011dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
100011de:	f3c3 2317 	ubfx	r3, r3, #8, #24
100011e2:	1d38      	adds	r0, r7, #4
100011e4:	4913      	ldr	r1, [pc, #76]	; (10001234 <AI_Init+0x84>)
100011e6:	f00e fe4d 	bl	1000fe84 <siprintf>
100011ea:	63f8      	str	r0, [r7, #60]	; 0x3c
	  HAL_UART_Transmit(&huart4, (uint8_t *)buf, buf_len, 100);
100011ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
100011ee:	b29a      	uxth	r2, r3
100011f0:	1d39      	adds	r1, r7, #4
100011f2:	2364      	movs	r3, #100	; 0x64
100011f4:	4810      	ldr	r0, [pc, #64]	; (10001238 <AI_Init+0x88>)
100011f6:	f007 fe4b 	bl	10008e90 <HAL_UART_Transmit>
//	  printf("ai_emotion_model_create error - type=%d code=%d\r\n", err.type, err.code);
	  Error_Handler();
100011fa:	f000 f89b 	bl	10001334 <Error_Handler>
  }
  ai_input = ai_emotion_model_inputs_get(emotion_model, NULL);
100011fe:	4b0c      	ldr	r3, [pc, #48]	; (10001230 <AI_Init+0x80>)
10001200:	681b      	ldr	r3, [r3, #0]
10001202:	2100      	movs	r1, #0
10001204:	4618      	mov	r0, r3
10001206:	f00b fd39 	bl	1000cc7c <ai_emotion_model_inputs_get>
1000120a:	4603      	mov	r3, r0
1000120c:	4a0b      	ldr	r2, [pc, #44]	; (1000123c <AI_Init+0x8c>)
1000120e:	6013      	str	r3, [r2, #0]
  ai_output = ai_emotion_model_outputs_get(emotion_model, NULL);
10001210:	4b07      	ldr	r3, [pc, #28]	; (10001230 <AI_Init+0x80>)
10001212:	681b      	ldr	r3, [r3, #0]
10001214:	2100      	movs	r1, #0
10001216:	4618      	mov	r0, r3
10001218:	f00b fd4a 	bl	1000ccb0 <ai_emotion_model_outputs_get>
1000121c:	4603      	mov	r3, r0
1000121e:	4a08      	ldr	r2, [pc, #32]	; (10001240 <AI_Init+0x90>)
10001220:	6013      	str	r3, [r2, #0]
}
10001222:	bf00      	nop
10001224:	3740      	adds	r7, #64	; 0x40
10001226:	46bd      	mov	sp, r7
10001228:	bd80      	pop	{r7, pc}
1000122a:	bf00      	nop
1000122c:	1002171c 	.word	0x1002171c
10001230:	10020f40 	.word	0x10020f40
10001234:	10012324 	.word	0x10012324
10001238:	10020eac 	.word	0x10020eac
1000123c:	10029aec 	.word	0x10029aec
10001240:	10029af0 	.word	0x10029af0

10001244 <AI_Run>:

static void AI_Run(float *pIn, float *pOut)
{
10001244:	b580      	push	{r7, lr}
10001246:	b092      	sub	sp, #72	; 0x48
10001248:	af00      	add	r7, sp, #0
1000124a:	6078      	str	r0, [r7, #4]
1000124c:	6039      	str	r1, [r7, #0]

  ai_i32 batch;
  ai_error err;

  char buf[50]; // buffer for serial output string
  int buf_len = 0;
1000124e:	2300      	movs	r3, #0
10001250:	647b      	str	r3, [r7, #68]	; 0x44

  /* Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(pIn);
10001252:	4b1b      	ldr	r3, [pc, #108]	; (100012c0 <AI_Run+0x7c>)
10001254:	681b      	ldr	r3, [r3, #0]
10001256:	687a      	ldr	r2, [r7, #4]
10001258:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(pOut);
1000125a:	4b1a      	ldr	r3, [pc, #104]	; (100012c4 <AI_Run+0x80>)
1000125c:	681b      	ldr	r3, [r3, #0]
1000125e:	683a      	ldr	r2, [r7, #0]
10001260:	605a      	str	r2, [r3, #4]

  batch = ai_emotion_model_run(emotion_model, ai_input, ai_output);
10001262:	4b19      	ldr	r3, [pc, #100]	; (100012c8 <AI_Run+0x84>)
10001264:	681b      	ldr	r3, [r3, #0]
10001266:	4a16      	ldr	r2, [pc, #88]	; (100012c0 <AI_Run+0x7c>)
10001268:	6811      	ldr	r1, [r2, #0]
1000126a:	4a16      	ldr	r2, [pc, #88]	; (100012c4 <AI_Run+0x80>)
1000126c:	6812      	ldr	r2, [r2, #0]
1000126e:	4618      	mov	r0, r3
10001270:	f00b fd74 	bl	1000cd5c <ai_emotion_model_run>
10001274:	6438      	str	r0, [r7, #64]	; 0x40
  if (batch != 1) {
10001276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10001278:	2b01      	cmp	r3, #1
1000127a:	d01c      	beq.n	100012b6 <AI_Run+0x72>
    err = ai_emotion_model_get_error(emotion_model);
1000127c:	4b12      	ldr	r3, [pc, #72]	; (100012c8 <AI_Run+0x84>)
1000127e:	681b      	ldr	r3, [r3, #0]
10001280:	4618      	mov	r0, r3
10001282:	f00b fc65 	bl	1000cb50 <ai_emotion_model_get_error>
10001286:	4603      	mov	r3, r0
10001288:	63fb      	str	r3, [r7, #60]	; 0x3c
    buf_len = sprintf(buf, "AI ai_emotion_model_run error - type=%d code=%d\r\n", err.type, err.code);
1000128a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
1000128e:	461a      	mov	r2, r3
10001290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10001292:	f3c3 2317 	ubfx	r3, r3, #8, #24
10001296:	f107 0008 	add.w	r0, r7, #8
1000129a:	490c      	ldr	r1, [pc, #48]	; (100012cc <AI_Run+0x88>)
1000129c:	f00e fdf2 	bl	1000fe84 <siprintf>
100012a0:	6478      	str	r0, [r7, #68]	; 0x44
    HAL_UART_Transmit(&huart4, (uint8_t *)buf, buf_len, 100);
100012a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
100012a4:	b29a      	uxth	r2, r3
100012a6:	f107 0108 	add.w	r1, r7, #8
100012aa:	2364      	movs	r3, #100	; 0x64
100012ac:	4808      	ldr	r0, [pc, #32]	; (100012d0 <AI_Run+0x8c>)
100012ae:	f007 fdef 	bl	10008e90 <HAL_UART_Transmit>
    //printf("AI ai_emotion_model_run error - type=%d code=%d\r\n", err.type, err.code);
    Error_Handler();
100012b2:	f000 f83f 	bl	10001334 <Error_Handler>
  }
}
100012b6:	bf00      	nop
100012b8:	3748      	adds	r7, #72	; 0x48
100012ba:	46bd      	mov	sp, r7
100012bc:	bd80      	pop	{r7, pc}
100012be:	bf00      	nop
100012c0:	10029aec 	.word	0x10029aec
100012c4:	10029af0 	.word	0x10029af0
100012c8:	10020f40 	.word	0x10020f40
100012cc:	10012358 	.word	0x10012358
100012d0:	10020eac 	.word	0x10020eac

100012d4 <argmax>:

static uint32_t argmax(const float * values, uint32_t len)
{
100012d4:	b480      	push	{r7}
100012d6:	b087      	sub	sp, #28
100012d8:	af00      	add	r7, sp, #0
100012da:	6078      	str	r0, [r7, #4]
100012dc:	6039      	str	r1, [r7, #0]
  float max_value = values[0];
100012de:	687b      	ldr	r3, [r7, #4]
100012e0:	681b      	ldr	r3, [r3, #0]
100012e2:	617b      	str	r3, [r7, #20]
  uint32_t max_index = 0;
100012e4:	2300      	movs	r3, #0
100012e6:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
100012e8:	2301      	movs	r3, #1
100012ea:	60fb      	str	r3, [r7, #12]
100012ec:	e017      	b.n	1000131e <argmax+0x4a>
    if (values[i] > max_value) {
100012ee:	68fb      	ldr	r3, [r7, #12]
100012f0:	009b      	lsls	r3, r3, #2
100012f2:	687a      	ldr	r2, [r7, #4]
100012f4:	4413      	add	r3, r2
100012f6:	edd3 7a00 	vldr	s15, [r3]
100012fa:	ed97 7a05 	vldr	s14, [r7, #20]
100012fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
10001302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
10001306:	d507      	bpl.n	10001318 <argmax+0x44>
      max_value = values[i];
10001308:	68fb      	ldr	r3, [r7, #12]
1000130a:	009b      	lsls	r3, r3, #2
1000130c:	687a      	ldr	r2, [r7, #4]
1000130e:	4413      	add	r3, r2
10001310:	681b      	ldr	r3, [r3, #0]
10001312:	617b      	str	r3, [r7, #20]
      max_index = i;
10001314:	68fb      	ldr	r3, [r7, #12]
10001316:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
10001318:	68fb      	ldr	r3, [r7, #12]
1000131a:	3301      	adds	r3, #1
1000131c:	60fb      	str	r3, [r7, #12]
1000131e:	68fa      	ldr	r2, [r7, #12]
10001320:	683b      	ldr	r3, [r7, #0]
10001322:	429a      	cmp	r2, r3
10001324:	d3e3      	bcc.n	100012ee <argmax+0x1a>
    }
  }
  return max_index;
10001326:	693b      	ldr	r3, [r7, #16]
}
10001328:	4618      	mov	r0, r3
1000132a:	371c      	adds	r7, #28
1000132c:	46bd      	mov	sp, r7
1000132e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001332:	4770      	bx	lr

10001334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
10001334:	b480      	push	{r7}
10001336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10001338:	b672      	cpsid	i
}
1000133a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
1000133c:	e7fe      	b.n	1000133c <Error_Handler+0x8>

1000133e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
1000133e:	b580      	push	{r7, lr}
10001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
10001342:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001346:	f44f 6200 	mov.w	r2, #2048	; 0x800
1000134a:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
1000134e:	2200      	movs	r2, #0
10001350:	2101      	movs	r1, #1
10001352:	f06f 000b 	mvn.w	r0, #11
10001356:	f001 fdda 	bl	10002f0e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
1000135a:	2200      	movs	r2, #0
1000135c:	2101      	movs	r1, #1
1000135e:	f06f 000a 	mvn.w	r0, #10
10001362:	f001 fdd4 	bl	10002f0e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
10001366:	2200      	movs	r2, #0
10001368:	2101      	movs	r1, #1
1000136a:	f06f 0009 	mvn.w	r0, #9
1000136e:	f001 fdce 	bl	10002f0e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
10001372:	2200      	movs	r2, #0
10001374:	2101      	movs	r1, #1
10001376:	f06f 0004 	mvn.w	r0, #4
1000137a:	f001 fdc8 	bl	10002f0e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
1000137e:	2200      	movs	r2, #0
10001380:	2101      	movs	r1, #1
10001382:	f06f 0003 	mvn.w	r0, #3
10001386:	f001 fdc2 	bl	10002f0e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
1000138a:	2200      	movs	r2, #0
1000138c:	2101      	movs	r1, #1
1000138e:	f06f 0001 	mvn.w	r0, #1
10001392:	f001 fdbc 	bl	10002f0e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_WAKEUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_WAKEUP_IRQn, 0, 0);
10001396:	2200      	movs	r2, #0
10001398:	2100      	movs	r1, #0
1000139a:	2091      	movs	r0, #145	; 0x91
1000139c:	f001 fdb7 	bl	10002f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_WAKEUP_IRQn);
100013a0:	2091      	movs	r0, #145	; 0x91
100013a2:	f001 fdd0 	bl	10002f46 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
100013a6:	bf00      	nop
100013a8:	bd80      	pop	{r7, pc}
	...

100013ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
100013ac:	b580      	push	{r7, lr}
100013ae:	b0de      	sub	sp, #376	; 0x178
100013b0:	af00      	add	r7, sp, #0
100013b2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
100013b6:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
100013ba:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
100013bc:	f507 73b2 	add.w	r3, r7, #356	; 0x164
100013c0:	2200      	movs	r2, #0
100013c2:	601a      	str	r2, [r3, #0]
100013c4:	605a      	str	r2, [r3, #4]
100013c6:	609a      	str	r2, [r3, #8]
100013c8:	60da      	str	r2, [r3, #12]
100013ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
100013cc:	f507 73bc 	add.w	r3, r7, #376	; 0x178
100013d0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
100013d4:	4618      	mov	r0, r3
100013d6:	f44f 73ac 	mov.w	r3, #344	; 0x158
100013da:	461a      	mov	r2, r3
100013dc:	2100      	movs	r1, #0
100013de:	f00e fdb4 	bl	1000ff4a <memset>
  if(hadc->Instance==ADC2)
100013e2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
100013e6:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
100013ea:	681b      	ldr	r3, [r3, #0]
100013ec:	681b      	ldr	r3, [r3, #0]
100013ee:	4a2a      	ldr	r2, [pc, #168]	; (10001498 <HAL_ADC_MspInit+0xec>)
100013f0:	4293      	cmp	r3, r2
100013f2:	d14b      	bne.n	1000148c <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
  if(IS_ENGINEERING_BOOT_MODE())
100013f4:	4b29      	ldr	r3, [pc, #164]	; (1000149c <HAL_ADC_MspInit+0xf0>)
100013f6:	681b      	ldr	r3, [r3, #0]
100013f8:	f003 0307 	and.w	r3, r3, #7
100013fc:	2b04      	cmp	r3, #4
100013fe:	d11a      	bne.n	10001436 <HAL_ADC_MspInit+0x8a>
  {

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
10001400:	f507 73bc 	add.w	r3, r7, #376	; 0x178
10001404:	f5a3 71b8 	sub.w	r1, r3, #368	; 0x170
10001408:	f04f 0208 	mov.w	r2, #8
1000140c:	f04f 0300 	mov.w	r3, #0
10001410:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PER;
10001414:	f507 73bc 	add.w	r3, r7, #376	; 0x178
10001418:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
1000141c:	2201      	movs	r2, #1
1000141e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
10001422:	f107 0308 	add.w	r3, r7, #8
10001426:	4618      	mov	r0, r3
10001428:	f004 fb7e 	bl	10005b28 <HAL_RCCEx_PeriphCLKConfig>
1000142c:	4603      	mov	r3, r0
1000142e:	2b00      	cmp	r3, #0
10001430:	d001      	beq.n	10001436 <HAL_ADC_MspInit+0x8a>
    {
      Error_Handler();
10001432:	f7ff ff7f 	bl	10001334 <Error_Handler>
    }

  }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
10001436:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000143a:	2220      	movs	r2, #32
1000143c:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98

    __HAL_RCC_GPIOA_CLK_ENABLE();
10001440:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001444:	2201      	movs	r2, #1
10001446:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    __HAL_RCC_GPIOF_CLK_ENABLE();
1000144a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000144e:	2220      	movs	r2, #32
10001450:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_INP19
    PA4     ------> ADC2_INP18
    PF14     ------> ADC2_INP6
    */
    GPIO_InitStruct.Pin = USB_PWR_CC2_Pin|USB_PWR_CC1_Pin;
10001454:	2330      	movs	r3, #48	; 0x30
10001456:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
1000145a:	2303      	movs	r3, #3
1000145c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10001460:	f507 73b2 	add.w	r3, r7, #356	; 0x164
10001464:	4619      	mov	r1, r3
10001466:	480e      	ldr	r0, [pc, #56]	; (100014a0 <HAL_ADC_MspInit+0xf4>)
10001468:	f001 fe72 	bl	10003150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
1000146c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
10001470:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
10001474:	2303      	movs	r3, #3
10001476:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
1000147a:	2300      	movs	r3, #0
1000147c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
10001480:	f507 73b2 	add.w	r3, r7, #356	; 0x164
10001484:	4619      	mov	r1, r3
10001486:	4807      	ldr	r0, [pc, #28]	; (100014a4 <HAL_ADC_MspInit+0xf8>)
10001488:	f001 fe62 	bl	10003150 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
1000148c:	bf00      	nop
1000148e:	f507 77bc 	add.w	r7, r7, #376	; 0x178
10001492:	46bd      	mov	sp, r7
10001494:	bd80      	pop	{r7, pc}
10001496:	bf00      	nop
10001498:	48003100 	.word	0x48003100
1000149c:	50020000 	.word	0x50020000
100014a0:	50002000 	.word	0x50002000
100014a4:	50007000 	.word	0x50007000

100014a8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
100014a8:	b480      	push	{r7}
100014aa:	b083      	sub	sp, #12
100014ac:	af00      	add	r7, sp, #0
100014ae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC2)
100014b0:	687b      	ldr	r3, [r7, #4]
100014b2:	681b      	ldr	r3, [r3, #0]
100014b4:	4a06      	ldr	r2, [pc, #24]	; (100014d0 <HAL_CRC_MspInit+0x28>)
100014b6:	4293      	cmp	r3, r2
100014b8:	d104      	bne.n	100014c4 <HAL_CRC_MspInit+0x1c>
  {
  /* USER CODE BEGIN CRC2_MspInit 0 */

  /* USER CODE END CRC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC2_CLK_ENABLE();
100014ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014be:	2280      	movs	r2, #128	; 0x80
100014c0:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
  /* USER CODE BEGIN CRC2_MspInit 1 */

  /* USER CODE END CRC2_MspInit 1 */
  }

}
100014c4:	bf00      	nop
100014c6:	370c      	adds	r7, #12
100014c8:	46bd      	mov	sp, r7
100014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
100014ce:	4770      	bx	lr
100014d0:	4c004000 	.word	0x4c004000

100014d4 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
100014d4:	b580      	push	{r7, lr}
100014d6:	b082      	sub	sp, #8
100014d8:	af00      	add	r7, sp, #0
100014da:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
100014dc:	687b      	ldr	r3, [r7, #4]
100014de:	681b      	ldr	r3, [r3, #0]
100014e0:	4a0e      	ldr	r2, [pc, #56]	; (1000151c <HAL_IPCC_MspInit+0x48>)
100014e2:	4293      	cmp	r3, r2
100014e4:	d115      	bne.n	10001512 <HAL_IPCC_MspInit+0x3e>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
100014e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
100014ee:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_RX1_IRQn, 1, 0);
100014f2:	2200      	movs	r2, #0
100014f4:	2101      	movs	r1, #1
100014f6:	2067      	movs	r0, #103	; 0x67
100014f8:	f001 fd09 	bl	10002f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_RX1_IRQn);
100014fc:	2067      	movs	r0, #103	; 0x67
100014fe:	f001 fd22 	bl	10002f46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_TX1_IRQn, 1, 0);
10001502:	2200      	movs	r2, #0
10001504:	2101      	movs	r1, #1
10001506:	2068      	movs	r0, #104	; 0x68
10001508:	f001 fd01 	bl	10002f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_TX1_IRQn);
1000150c:	2068      	movs	r0, #104	; 0x68
1000150e:	f001 fd1a 	bl	10002f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
10001512:	bf00      	nop
10001514:	3708      	adds	r7, #8
10001516:	46bd      	mov	sp, r7
10001518:	bd80      	pop	{r7, pc}
1000151a:	bf00      	nop
1000151c:	4c001000 	.word	0x4c001000

10001520 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
10001520:	b580      	push	{r7, lr}
10001522:	b0de      	sub	sp, #376	; 0x178
10001524:	af00      	add	r7, sp, #0
10001526:	f507 73bc 	add.w	r3, r7, #376	; 0x178
1000152a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
1000152e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10001530:	f507 73b2 	add.w	r3, r7, #356	; 0x164
10001534:	2200      	movs	r2, #0
10001536:	601a      	str	r2, [r3, #0]
10001538:	605a      	str	r2, [r3, #4]
1000153a:	609a      	str	r2, [r3, #8]
1000153c:	60da      	str	r2, [r3, #12]
1000153e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
10001540:	f507 73bc 	add.w	r3, r7, #376	; 0x178
10001544:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
10001548:	4618      	mov	r0, r3
1000154a:	f44f 73ac 	mov.w	r3, #344	; 0x158
1000154e:	461a      	mov	r2, r3
10001550:	2100      	movs	r1, #0
10001552:	f00e fcfa 	bl	1000ff4a <memset>
  if(huart->Instance==UART4)
10001556:	f507 73bc 	add.w	r3, r7, #376	; 0x178
1000155a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
1000155e:	681b      	ldr	r3, [r3, #0]
10001560:	681b      	ldr	r3, [r3, #0]
10001562:	4a2d      	ldr	r2, [pc, #180]	; (10001618 <HAL_UART_MspInit+0xf8>)
10001564:	4293      	cmp	r3, r2
10001566:	d151      	bne.n	1000160c <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  if(IS_ENGINEERING_BOOT_MODE())
10001568:	4b2c      	ldr	r3, [pc, #176]	; (1000161c <HAL_UART_MspInit+0xfc>)
1000156a:	681b      	ldr	r3, [r3, #0]
1000156c:	f003 0307 	and.w	r3, r3, #7
10001570:	2b04      	cmp	r3, #4
10001572:	d113      	bne.n	1000159c <HAL_UART_MspInit+0x7c>
  {

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART24;
10001574:	f507 73bc 	add.w	r3, r7, #376	; 0x178
10001578:	f5a3 71b8 	sub.w	r1, r3, #368	; 0x170
1000157c:	f04f 0202 	mov.w	r2, #2
10001580:	f04f 0300 	mov.w	r3, #0
10001584:	e9c1 2300 	strd	r2, r3, [r1]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
10001588:	f107 0308 	add.w	r3, r7, #8
1000158c:	4618      	mov	r0, r3
1000158e:	f004 facb 	bl	10005b28 <HAL_RCCEx_PeriphCLKConfig>
10001592:	4603      	mov	r3, r0
10001594:	2b00      	cmp	r3, #0
10001596:	d001      	beq.n	1000159c <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
10001598:	f7ff fecc 	bl	10001334 <Error_Handler>
    }

  }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
1000159c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
100015a4:	f8c3 2a80 	str.w	r2, [r3, #2688]	; 0xa80

    __HAL_RCC_GPIOG_CLK_ENABLE();
100015a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015ac:	2240      	movs	r2, #64	; 0x40
100015ae:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    __HAL_RCC_GPIOB_CLK_ENABLE();
100015b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015b6:	2202      	movs	r2, #2
100015b8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    /**UART4 GPIO Configuration
    PG11     ------> UART4_TX
    PB2     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin;
100015bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
100015c0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
100015c4:	2302      	movs	r3, #2
100015c6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100015ca:	2300      	movs	r3, #0
100015cc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100015d0:	2300      	movs	r3, #0
100015d2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
100015d6:	2306      	movs	r3, #6
100015d8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
100015dc:	f507 73b2 	add.w	r3, r7, #356	; 0x164
100015e0:	4619      	mov	r1, r3
100015e2:	480f      	ldr	r0, [pc, #60]	; (10001620 <HAL_UART_MspInit+0x100>)
100015e4:	f001 fdb4 	bl	10003150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLINK_TX_Pin;
100015e8:	2304      	movs	r3, #4
100015ea:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF;
100015ee:	2302      	movs	r3, #2
100015f0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100015f4:	2300      	movs	r3, #0
100015f6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
100015fa:	2308      	movs	r3, #8
100015fc:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    HAL_GPIO_Init(STLINK_TX_GPIO_Port, &GPIO_InitStruct);
10001600:	f507 73b2 	add.w	r3, r7, #356	; 0x164
10001604:	4619      	mov	r1, r3
10001606:	4807      	ldr	r0, [pc, #28]	; (10001624 <HAL_UART_MspInit+0x104>)
10001608:	f001 fda2 	bl	10003150 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
1000160c:	bf00      	nop
1000160e:	f507 77bc 	add.w	r7, r7, #376	; 0x178
10001612:	46bd      	mov	sp, r7
10001614:	bd80      	pop	{r7, pc}
10001616:	bf00      	nop
10001618:	40010000 	.word	0x40010000
1000161c:	50020000 	.word	0x50020000
10001620:	50008000 	.word	0x50008000
10001624:	50003000 	.word	0x50003000

10001628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10001628:	b480      	push	{r7}
1000162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
1000162c:	e7fe      	b.n	1000162c <NMI_Handler+0x4>

1000162e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
1000162e:	b480      	push	{r7}
10001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
10001632:	e7fe      	b.n	10001632 <HardFault_Handler+0x4>

10001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
10001634:	b480      	push	{r7}
10001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
10001638:	e7fe      	b.n	10001638 <MemManage_Handler+0x4>

1000163a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
1000163a:	b480      	push	{r7}
1000163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
1000163e:	e7fe      	b.n	1000163e <BusFault_Handler+0x4>

10001640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
10001640:	b480      	push	{r7}
10001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
10001644:	e7fe      	b.n	10001644 <UsageFault_Handler+0x4>

10001646 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10001646:	b480      	push	{r7}
10001648:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
1000164a:	bf00      	nop
1000164c:	46bd      	mov	sp, r7
1000164e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001652:	4770      	bx	lr

10001654 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
10001654:	b480      	push	{r7}
10001656:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
10001658:	bf00      	nop
1000165a:	46bd      	mov	sp, r7
1000165c:	f85d 7b04 	ldr.w	r7, [sp], #4
10001660:	4770      	bx	lr

10001662 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
10001662:	b480      	push	{r7}
10001664:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10001666:	bf00      	nop
10001668:	46bd      	mov	sp, r7
1000166a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000166e:	4770      	bx	lr

10001670 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
10001670:	b580      	push	{r7, lr}
10001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10001674:	f000 f8a4 	bl	100017c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10001678:	bf00      	nop
1000167a:	bd80      	pop	{r7, pc}

1000167c <IPCC_RX1_IRQHandler>:

/**
  * @brief This function handles IPCC RX1 occupied interrupt.
  */
void IPCC_RX1_IRQHandler(void)
{
1000167c:	b580      	push	{r7, lr}
1000167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_RX1_IRQn 0 */

  /* USER CODE END IPCC_RX1_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
10001680:	4802      	ldr	r0, [pc, #8]	; (1000168c <IPCC_RX1_IRQHandler+0x10>)
10001682:	f002 f857 	bl	10003734 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_RX1_IRQn 1 */

  /* USER CODE END IPCC_RX1_IRQn 1 */
}
10001686:	bf00      	nop
10001688:	bd80      	pop	{r7, pc}
1000168a:	bf00      	nop
1000168c:	10020e70 	.word	0x10020e70

10001690 <IPCC_TX1_IRQHandler>:

/**
  * @brief This function handles IPCC TX1 free interrupt.
  */
void IPCC_TX1_IRQHandler(void)
{
10001690:	b580      	push	{r7, lr}
10001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_TX1_IRQn 0 */

  /* USER CODE END IPCC_TX1_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
10001694:	4802      	ldr	r0, [pc, #8]	; (100016a0 <IPCC_TX1_IRQHandler+0x10>)
10001696:	f001 ffff 	bl	10003698 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_TX1_IRQn 1 */

  /* USER CODE END IPCC_TX1_IRQn 1 */
}
1000169a:	bf00      	nop
1000169c:	bd80      	pop	{r7, pc}
1000169e:	bf00      	nop
100016a0:	10020e70 	.word	0x10020e70

100016a4 <RCC_WAKEUP_IRQHandler>:

/**
  * @brief This function handles RCC wake-up interrupt.
  */
void RCC_WAKEUP_IRQHandler(void)
{
100016a4:	b580      	push	{r7, lr}
100016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 0 */

  /* USER CODE END RCC_WAKEUP_IRQn 0 */
  HAL_RCC_WAKEUP_IRQHandler();
100016a8:	f003 fdde 	bl	10005268 <HAL_RCC_WAKEUP_IRQHandler>
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 1 */

  /* USER CODE END RCC_WAKEUP_IRQn 1 */
}
100016ac:	bf00      	nop
100016ae:	bd80      	pop	{r7, pc}

100016b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
100016b0:	b580      	push	{r7, lr}
100016b2:	b086      	sub	sp, #24
100016b4:	af00      	add	r7, sp, #0
100016b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
100016b8:	4a14      	ldr	r2, [pc, #80]	; (1000170c <_sbrk+0x5c>)
100016ba:	4b15      	ldr	r3, [pc, #84]	; (10001710 <_sbrk+0x60>)
100016bc:	1ad3      	subs	r3, r2, r3
100016be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
100016c0:	697b      	ldr	r3, [r7, #20]
100016c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
100016c4:	4b13      	ldr	r3, [pc, #76]	; (10001714 <_sbrk+0x64>)
100016c6:	681b      	ldr	r3, [r3, #0]
100016c8:	2b00      	cmp	r3, #0
100016ca:	d102      	bne.n	100016d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
100016cc:	4b11      	ldr	r3, [pc, #68]	; (10001714 <_sbrk+0x64>)
100016ce:	4a12      	ldr	r2, [pc, #72]	; (10001718 <_sbrk+0x68>)
100016d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
100016d2:	4b10      	ldr	r3, [pc, #64]	; (10001714 <_sbrk+0x64>)
100016d4:	681a      	ldr	r2, [r3, #0]
100016d6:	687b      	ldr	r3, [r7, #4]
100016d8:	4413      	add	r3, r2
100016da:	693a      	ldr	r2, [r7, #16]
100016dc:	429a      	cmp	r2, r3
100016de:	d207      	bcs.n	100016f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
100016e0:	f00e fcba 	bl	10010058 <__errno>
100016e4:	4603      	mov	r3, r0
100016e6:	220c      	movs	r2, #12
100016e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
100016ea:	f04f 33ff 	mov.w	r3, #4294967295
100016ee:	e009      	b.n	10001704 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
100016f0:	4b08      	ldr	r3, [pc, #32]	; (10001714 <_sbrk+0x64>)
100016f2:	681b      	ldr	r3, [r3, #0]
100016f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
100016f6:	4b07      	ldr	r3, [pc, #28]	; (10001714 <_sbrk+0x64>)
100016f8:	681a      	ldr	r2, [r3, #0]
100016fa:	687b      	ldr	r3, [r7, #4]
100016fc:	4413      	add	r3, r2
100016fe:	4a05      	ldr	r2, [pc, #20]	; (10001714 <_sbrk+0x64>)
10001700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
10001702:	68fb      	ldr	r3, [r7, #12]
}
10001704:	4618      	mov	r0, r3
10001706:	3718      	adds	r7, #24
10001708:	46bd      	mov	sp, r7
1000170a:	bd80      	pop	{r7, pc}
1000170c:	10040000 	.word	0x10040000
10001710:	00000800 	.word	0x00000800
10001714:	10029af4 	.word	0x10029af4
10001718:	10029de0 	.word	0x10029de0

1000171c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
1000171c:	e7fe      	b.n	1000171c <ADC1_IRQHandler>
	...

10001720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10001720:	b580      	push	{r7, lr}
10001722:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
10001724:	2003      	movs	r0, #3
10001726:	f001 fbe7 	bl	10002ef8 <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
1000172a:	f003 fd1d 	bl	10005168 <HAL_RCC_GetSystemCoreClockFreq>
1000172e:	4603      	mov	r3, r0
10001730:	4a07      	ldr	r2, [pc, #28]	; (10001750 <HAL_Init+0x30>)
10001732:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10001734:	2001      	movs	r0, #1
10001736:	f000 f80d 	bl	10001754 <HAL_InitTick>
1000173a:	4603      	mov	r3, r0
1000173c:	2b00      	cmp	r3, #0
1000173e:	d001      	beq.n	10001744 <HAL_Init+0x24>
  {
    return HAL_ERROR;
10001740:	2301      	movs	r3, #1
10001742:	e002      	b.n	1000174a <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
10001744:	f7ff fdfb 	bl	1000133e <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
10001748:	2300      	movs	r3, #0
}
1000174a:	4618      	mov	r0, r3
1000174c:	bd80      	pop	{r7, pc}
1000174e:	bf00      	nop
10001750:	10020000 	.word	0x10020000

10001754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
10001754:	b580      	push	{r7, lr}
10001756:	b082      	sub	sp, #8
10001758:	af00      	add	r7, sp, #0
1000175a:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
1000175c:	4b15      	ldr	r3, [pc, #84]	; (100017b4 <HAL_InitTick+0x60>)
1000175e:	781b      	ldrb	r3, [r3, #0]
10001760:	2b00      	cmp	r3, #0
10001762:	d101      	bne.n	10001768 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
10001764:	2301      	movs	r3, #1
10001766:	e021      	b.n	100017ac <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
10001768:	4b13      	ldr	r3, [pc, #76]	; (100017b8 <HAL_InitTick+0x64>)
1000176a:	681a      	ldr	r2, [r3, #0]
1000176c:	4b11      	ldr	r3, [pc, #68]	; (100017b4 <HAL_InitTick+0x60>)
1000176e:	781b      	ldrb	r3, [r3, #0]
10001770:	4619      	mov	r1, r3
10001772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
10001776:	fbb3 f3f1 	udiv	r3, r3, r1
1000177a:	fbb2 f3f3 	udiv	r3, r2, r3
1000177e:	4618      	mov	r0, r3
10001780:	f001 fbef 	bl	10002f62 <HAL_SYSTICK_Config>
10001784:	4603      	mov	r3, r0
10001786:	2b00      	cmp	r3, #0
10001788:	d001      	beq.n	1000178e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
1000178a:	2301      	movs	r3, #1
1000178c:	e00e      	b.n	100017ac <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
1000178e:	687b      	ldr	r3, [r7, #4]
10001790:	2b0f      	cmp	r3, #15
10001792:	d80a      	bhi.n	100017aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
10001794:	2200      	movs	r2, #0
10001796:	6879      	ldr	r1, [r7, #4]
10001798:	f04f 30ff 	mov.w	r0, #4294967295
1000179c:	f001 fbb7 	bl	10002f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
100017a0:	4a06      	ldr	r2, [pc, #24]	; (100017bc <HAL_InitTick+0x68>)
100017a2:	687b      	ldr	r3, [r7, #4]
100017a4:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
100017a6:	2300      	movs	r3, #0
100017a8:	e000      	b.n	100017ac <HAL_InitTick+0x58>
    return HAL_ERROR;
100017aa:	2301      	movs	r3, #1
}
100017ac:	4618      	mov	r0, r3
100017ae:	3708      	adds	r7, #8
100017b0:	46bd      	mov	sp, r7
100017b2:	bd80      	pop	{r7, pc}
100017b4:	10020010 	.word	0x10020010
100017b8:	10020000 	.word	0x10020000
100017bc:	1002000c 	.word	0x1002000c

100017c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
100017c0:	b480      	push	{r7}
100017c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
100017c4:	4b06      	ldr	r3, [pc, #24]	; (100017e0 <HAL_IncTick+0x20>)
100017c6:	781b      	ldrb	r3, [r3, #0]
100017c8:	461a      	mov	r2, r3
100017ca:	4b06      	ldr	r3, [pc, #24]	; (100017e4 <HAL_IncTick+0x24>)
100017cc:	681b      	ldr	r3, [r3, #0]
100017ce:	4413      	add	r3, r2
100017d0:	4a04      	ldr	r2, [pc, #16]	; (100017e4 <HAL_IncTick+0x24>)
100017d2:	6013      	str	r3, [r2, #0]
}
100017d4:	bf00      	nop
100017d6:	46bd      	mov	sp, r7
100017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
100017dc:	4770      	bx	lr
100017de:	bf00      	nop
100017e0:	10020010 	.word	0x10020010
100017e4:	10029af8 	.word	0x10029af8

100017e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
100017e8:	b480      	push	{r7}
100017ea:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
100017ec:	4b03      	ldr	r3, [pc, #12]	; (100017fc <HAL_GetTick+0x14>)
100017ee:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
100017f0:	4618      	mov	r0, r3
100017f2:	46bd      	mov	sp, r7
100017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
100017f8:	4770      	bx	lr
100017fa:	bf00      	nop
100017fc:	10029af8 	.word	0x10029af8

10001800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
10001800:	b580      	push	{r7, lr}
10001802:	b084      	sub	sp, #16
10001804:	af00      	add	r7, sp, #0
10001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
10001808:	f7ff ffee 	bl	100017e8 <HAL_GetTick>
1000180c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
1000180e:	687b      	ldr	r3, [r7, #4]
10001810:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
10001812:	68fb      	ldr	r3, [r7, #12]
10001814:	f1b3 3fff 	cmp.w	r3, #4294967295
10001818:	d005      	beq.n	10001826 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
1000181a:	4b0a      	ldr	r3, [pc, #40]	; (10001844 <HAL_Delay+0x44>)
1000181c:	781b      	ldrb	r3, [r3, #0]
1000181e:	461a      	mov	r2, r3
10001820:	68fb      	ldr	r3, [r7, #12]
10001822:	4413      	add	r3, r2
10001824:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
10001826:	bf00      	nop
10001828:	f7ff ffde 	bl	100017e8 <HAL_GetTick>
1000182c:	4602      	mov	r2, r0
1000182e:	68bb      	ldr	r3, [r7, #8]
10001830:	1ad3      	subs	r3, r2, r3
10001832:	68fa      	ldr	r2, [r7, #12]
10001834:	429a      	cmp	r2, r3
10001836:	d8f7      	bhi.n	10001828 <HAL_Delay+0x28>
  {
  }
}
10001838:	bf00      	nop
1000183a:	bf00      	nop
1000183c:	3710      	adds	r7, #16
1000183e:	46bd      	mov	sp, r7
10001840:	bd80      	pop	{r7, pc}
10001842:	bf00      	nop
10001844:	10020010 	.word	0x10020010

10001848 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.8 V.
  *                                                This requires VDDA equal to or higher than 2.1 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
10001848:	b480      	push	{r7}
1000184a:	b083      	sub	sp, #12
1000184c:	af00      	add	r7, sp, #0
1000184e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
10001850:	4b06      	ldr	r3, [pc, #24]	; (1000186c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
10001852:	681b      	ldr	r3, [r3, #0]
10001854:	f023 0270 	bic.w	r2, r3, #112	; 0x70
10001858:	4904      	ldr	r1, [pc, #16]	; (1000186c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
1000185a:	687b      	ldr	r3, [r7, #4]
1000185c:	4313      	orrs	r3, r2
1000185e:	600b      	str	r3, [r1, #0]
}
10001860:	bf00      	nop
10001862:	370c      	adds	r7, #12
10001864:	46bd      	mov	sp, r7
10001866:	f85d 7b04 	ldr.w	r7, [sp], #4
1000186a:	4770      	bx	lr
1000186c:	50025000 	.word	0x50025000

10001870 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
10001870:	b480      	push	{r7}
10001872:	b083      	sub	sp, #12
10001874:	af00      	add	r7, sp, #0
10001876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
10001878:	4b06      	ldr	r3, [pc, #24]	; (10001894 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
1000187a:	681b      	ldr	r3, [r3, #0]
1000187c:	f023 0202 	bic.w	r2, r3, #2
10001880:	4904      	ldr	r1, [pc, #16]	; (10001894 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
10001882:	687b      	ldr	r3, [r7, #4]
10001884:	4313      	orrs	r3, r2
10001886:	600b      	str	r3, [r1, #0]
}
10001888:	bf00      	nop
1000188a:	370c      	adds	r7, #12
1000188c:	46bd      	mov	sp, r7
1000188e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001892:	4770      	bx	lr
10001894:	50025000 	.word	0x50025000

10001898 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
10001898:	b580      	push	{r7, lr}
1000189a:	b082      	sub	sp, #8
1000189c:	af00      	add	r7, sp, #0
  uint32_t  tickstart = 0;
1000189e:	2300      	movs	r3, #0
100018a0:	607b      	str	r3, [r7, #4]

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
100018a2:	4b0f      	ldr	r3, [pc, #60]	; (100018e0 <HAL_SYSCFG_EnableVREFBUF+0x48>)
100018a4:	681b      	ldr	r3, [r3, #0]
100018a6:	4a0e      	ldr	r2, [pc, #56]	; (100018e0 <HAL_SYSCFG_EnableVREFBUF+0x48>)
100018a8:	f043 0301 	orr.w	r3, r3, #1
100018ac:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100018ae:	f7ff ff9b 	bl	100017e8 <HAL_GetTick>
100018b2:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == RESET)
100018b4:	e008      	b.n	100018c8 <HAL_SYSCFG_EnableVREFBUF+0x30>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
100018b6:	f7ff ff97 	bl	100017e8 <HAL_GetTick>
100018ba:	4602      	mov	r2, r0
100018bc:	687b      	ldr	r3, [r7, #4]
100018be:	1ad3      	subs	r3, r2, r3
100018c0:	2b0a      	cmp	r3, #10
100018c2:	d901      	bls.n	100018c8 <HAL_SYSCFG_EnableVREFBUF+0x30>
    {
      return HAL_TIMEOUT;
100018c4:	2303      	movs	r3, #3
100018c6:	e006      	b.n	100018d6 <HAL_SYSCFG_EnableVREFBUF+0x3e>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == RESET)
100018c8:	4b05      	ldr	r3, [pc, #20]	; (100018e0 <HAL_SYSCFG_EnableVREFBUF+0x48>)
100018ca:	681b      	ldr	r3, [r3, #0]
100018cc:	f003 0308 	and.w	r3, r3, #8
100018d0:	2b00      	cmp	r3, #0
100018d2:	d0f0      	beq.n	100018b6 <HAL_SYSCFG_EnableVREFBUF+0x1e>
    }
  }

  return HAL_OK;
100018d4:	2300      	movs	r3, #0
}
100018d6:	4618      	mov	r0, r3
100018d8:	3708      	adds	r7, #8
100018da:	46bd      	mov	sp, r7
100018dc:	bd80      	pop	{r7, pc}
100018de:	bf00      	nop
100018e0:	50025000 	.word	0x50025000

100018e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
100018e4:	b480      	push	{r7}
100018e6:	b083      	sub	sp, #12
100018e8:	af00      	add	r7, sp, #0
100018ea:	6078      	str	r0, [r7, #4]
100018ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
100018ee:	687b      	ldr	r3, [r7, #4]
100018f0:	689b      	ldr	r3, [r3, #8]
100018f2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
100018f6:	683b      	ldr	r3, [r7, #0]
100018f8:	431a      	orrs	r2, r3
100018fa:	687b      	ldr	r3, [r7, #4]
100018fc:	609a      	str	r2, [r3, #8]
}
100018fe:	bf00      	nop
10001900:	370c      	adds	r7, #12
10001902:	46bd      	mov	sp, r7
10001904:	f85d 7b04 	ldr.w	r7, [sp], #4
10001908:	4770      	bx	lr
	...

1000190c <LL_ADC_SetCommonPathInternalCh>:
  *
  *         (1) On STM32MP1, parameter available only on ADC instance: ADC2.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
1000190c:	b480      	push	{r7}
1000190e:	b083      	sub	sp, #12
10001910:	af00      	add	r7, sp, #0
10001912:	6078      	str	r0, [r7, #4]
10001914:	6039      	str	r1, [r7, #0]
  if(PathInternal == LL_ADC_PATH_INTERNAL_VDDCORE)
10001916:	683b      	ldr	r3, [r7, #0]
10001918:	2b01      	cmp	r3, #1
1000191a:	d108      	bne.n	1000192e <LL_ADC_SetCommonPathInternalCh+0x22>
  {
    /* Feature limited to ADC instance ADC2 */
    SET_BIT(ADC2->OR, ADC2_OR_VDDCOREEN);
1000191c:	4b0b      	ldr	r3, [pc, #44]	; (1000194c <LL_ADC_SetCommonPathInternalCh+0x40>)
1000191e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
10001922:	4a0a      	ldr	r2, [pc, #40]	; (1000194c <LL_ADC_SetCommonPathInternalCh+0x40>)
10001924:	f043 0301 	orr.w	r3, r3, #1
10001928:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
  }
  else
  {
    MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
  }
}
1000192c:	e007      	b.n	1000193e <LL_ADC_SetCommonPathInternalCh+0x32>
    MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
1000192e:	687b      	ldr	r3, [r7, #4]
10001930:	689b      	ldr	r3, [r3, #8]
10001932:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
10001936:	683b      	ldr	r3, [r7, #0]
10001938:	431a      	orrs	r2, r3
1000193a:	687b      	ldr	r3, [r7, #4]
1000193c:	609a      	str	r2, [r3, #8]
}
1000193e:	bf00      	nop
10001940:	370c      	adds	r7, #12
10001942:	46bd      	mov	sp, r7
10001944:	f85d 7b04 	ldr.w	r7, [sp], #4
10001948:	4770      	bx	lr
1000194a:	bf00      	nop
1000194c:	48003100 	.word	0x48003100

10001950 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
10001950:	b480      	push	{r7}
10001952:	b083      	sub	sp, #12
10001954:	af00      	add	r7, sp, #0
10001956:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
10001958:	687b      	ldr	r3, [r7, #4]
1000195a:	689b      	ldr	r3, [r3, #8]
1000195c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
10001960:	4618      	mov	r0, r3
10001962:	370c      	adds	r7, #12
10001964:	46bd      	mov	sp, r7
10001966:	f85d 7b04 	ldr.w	r7, [sp], #4
1000196a:	4770      	bx	lr

1000196c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
1000196c:	b480      	push	{r7}
1000196e:	b087      	sub	sp, #28
10001970:	af00      	add	r7, sp, #0
10001972:	60f8      	str	r0, [r7, #12]
10001974:	60b9      	str	r1, [r7, #8]
10001976:	607a      	str	r2, [r7, #4]
10001978:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
1000197a:	68fb      	ldr	r3, [r7, #12]
1000197c:	3360      	adds	r3, #96	; 0x60
1000197e:	461a      	mov	r2, r3
10001980:	68bb      	ldr	r3, [r7, #8]
10001982:	009b      	lsls	r3, r3, #2
10001984:	4413      	add	r3, r2
10001986:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
10001988:	697b      	ldr	r3, [r7, #20]
1000198a:	681b      	ldr	r3, [r3, #0]
1000198c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10001990:	687b      	ldr	r3, [r7, #4]
10001992:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
10001996:	683b      	ldr	r3, [r7, #0]
10001998:	430b      	orrs	r3, r1
1000199a:	431a      	orrs	r2, r3
1000199c:	697b      	ldr	r3, [r7, #20]
1000199e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
100019a0:	bf00      	nop
100019a2:	371c      	adds	r7, #28
100019a4:	46bd      	mov	sp, r7
100019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
100019aa:	4770      	bx	lr

100019ac <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
100019ac:	b480      	push	{r7}
100019ae:	b085      	sub	sp, #20
100019b0:	af00      	add	r7, sp, #0
100019b2:	60f8      	str	r0, [r7, #12]
100019b4:	60b9      	str	r1, [r7, #8]
100019b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
100019b8:	68fb      	ldr	r3, [r7, #12]
100019ba:	691b      	ldr	r3, [r3, #16]
100019bc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
100019c0:	68bb      	ldr	r3, [r7, #8]
100019c2:	f003 031f 	and.w	r3, r3, #31
100019c6:	6879      	ldr	r1, [r7, #4]
100019c8:	fa01 f303 	lsl.w	r3, r1, r3
100019cc:	431a      	orrs	r2, r3
100019ce:	68fb      	ldr	r3, [r7, #12]
100019d0:	611a      	str	r2, [r3, #16]
}
100019d2:	bf00      	nop
100019d4:	3714      	adds	r7, #20
100019d6:	46bd      	mov	sp, r7
100019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
100019dc:	4770      	bx	lr

100019de <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
100019de:	b480      	push	{r7}
100019e0:	b087      	sub	sp, #28
100019e2:	af00      	add	r7, sp, #0
100019e4:	60f8      	str	r0, [r7, #12]
100019e6:	60b9      	str	r1, [r7, #8]
100019e8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
100019ea:	68fb      	ldr	r3, [r7, #12]
100019ec:	3360      	adds	r3, #96	; 0x60
100019ee:	461a      	mov	r2, r3
100019f0:	68bb      	ldr	r3, [r7, #8]
100019f2:	009b      	lsls	r3, r3, #2
100019f4:	4413      	add	r3, r2
100019f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
100019f8:	697b      	ldr	r3, [r7, #20]
100019fa:	681b      	ldr	r3, [r3, #0]
100019fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
10001a00:	687b      	ldr	r3, [r7, #4]
10001a02:	431a      	orrs	r2, r3
10001a04:	697b      	ldr	r3, [r7, #20]
10001a06:	601a      	str	r2, [r3, #0]
}
10001a08:	bf00      	nop
10001a0a:	371c      	adds	r7, #28
10001a0c:	46bd      	mov	sp, r7
10001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001a12:	4770      	bx	lr

10001a14 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
10001a14:	b480      	push	{r7}
10001a16:	b083      	sub	sp, #12
10001a18:	af00      	add	r7, sp, #0
10001a1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
10001a1c:	687b      	ldr	r3, [r7, #4]
10001a1e:	68db      	ldr	r3, [r3, #12]
10001a20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
10001a24:	2b00      	cmp	r3, #0
10001a26:	d101      	bne.n	10001a2c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
10001a28:	2301      	movs	r3, #1
10001a2a:	e000      	b.n	10001a2e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
10001a2c:	2300      	movs	r3, #0
}
10001a2e:	4618      	mov	r0, r3
10001a30:	370c      	adds	r7, #12
10001a32:	46bd      	mov	sp, r7
10001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
10001a38:	4770      	bx	lr

10001a3a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32MP1, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
10001a3a:	b480      	push	{r7}
10001a3c:	b087      	sub	sp, #28
10001a3e:	af00      	add	r7, sp, #0
10001a40:	60f8      	str	r0, [r7, #12]
10001a42:	60b9      	str	r1, [r7, #8]
10001a44:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
10001a46:	68fb      	ldr	r3, [r7, #12]
10001a48:	3330      	adds	r3, #48	; 0x30
10001a4a:	461a      	mov	r2, r3
10001a4c:	68bb      	ldr	r3, [r7, #8]
10001a4e:	0a1b      	lsrs	r3, r3, #8
10001a50:	009b      	lsls	r3, r3, #2
10001a52:	f003 030c 	and.w	r3, r3, #12
10001a56:	4413      	add	r3, r2
10001a58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
10001a5a:	697b      	ldr	r3, [r7, #20]
10001a5c:	681a      	ldr	r2, [r3, #0]
10001a5e:	68bb      	ldr	r3, [r7, #8]
10001a60:	f003 031f 	and.w	r3, r3, #31
10001a64:	211f      	movs	r1, #31
10001a66:	fa01 f303 	lsl.w	r3, r1, r3
10001a6a:	43db      	mvns	r3, r3
10001a6c:	401a      	ands	r2, r3
10001a6e:	687b      	ldr	r3, [r7, #4]
10001a70:	0e9b      	lsrs	r3, r3, #26
10001a72:	f003 011f 	and.w	r1, r3, #31
10001a76:	68bb      	ldr	r3, [r7, #8]
10001a78:	f003 031f 	and.w	r3, r3, #31
10001a7c:	fa01 f303 	lsl.w	r3, r1, r3
10001a80:	431a      	orrs	r2, r3
10001a82:	697b      	ldr	r3, [r7, #20]
10001a84:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
10001a86:	bf00      	nop
10001a88:	371c      	adds	r7, #28
10001a8a:	46bd      	mov	sp, r7
10001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
10001a90:	4770      	bx	lr

10001a92 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
10001a92:	b480      	push	{r7}
10001a94:	b087      	sub	sp, #28
10001a96:	af00      	add	r7, sp, #0
10001a98:	60f8      	str	r0, [r7, #12]
10001a9a:	60b9      	str	r1, [r7, #8]
10001a9c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
10001a9e:	68fb      	ldr	r3, [r7, #12]
10001aa0:	3314      	adds	r3, #20
10001aa2:	461a      	mov	r2, r3
10001aa4:	68bb      	ldr	r3, [r7, #8]
10001aa6:	0e5b      	lsrs	r3, r3, #25
10001aa8:	009b      	lsls	r3, r3, #2
10001aaa:	f003 0304 	and.w	r3, r3, #4
10001aae:	4413      	add	r3, r2
10001ab0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
10001ab2:	697b      	ldr	r3, [r7, #20]
10001ab4:	681a      	ldr	r2, [r3, #0]
10001ab6:	68bb      	ldr	r3, [r7, #8]
10001ab8:	0d1b      	lsrs	r3, r3, #20
10001aba:	f003 031f 	and.w	r3, r3, #31
10001abe:	2107      	movs	r1, #7
10001ac0:	fa01 f303 	lsl.w	r3, r1, r3
10001ac4:	43db      	mvns	r3, r3
10001ac6:	401a      	ands	r2, r3
10001ac8:	68bb      	ldr	r3, [r7, #8]
10001aca:	0d1b      	lsrs	r3, r3, #20
10001acc:	f003 031f 	and.w	r3, r3, #31
10001ad0:	6879      	ldr	r1, [r7, #4]
10001ad2:	fa01 f303 	lsl.w	r3, r1, r3
10001ad6:	431a      	orrs	r2, r3
10001ad8:	697b      	ldr	r3, [r7, #20]
10001ada:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
10001adc:	bf00      	nop
10001ade:	371c      	adds	r7, #28
10001ae0:	46bd      	mov	sp, r7
10001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
10001ae6:	4770      	bx	lr

10001ae8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
10001ae8:	b480      	push	{r7}
10001aea:	b085      	sub	sp, #20
10001aec:	af00      	add	r7, sp, #0
10001aee:	60f8      	str	r0, [r7, #12]
10001af0:	60b9      	str	r1, [r7, #8]
10001af2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
10001af4:	68fb      	ldr	r3, [r7, #12]
10001af6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
10001afa:	68bb      	ldr	r3, [r7, #8]
10001afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
10001b00:	43db      	mvns	r3, r3
10001b02:	401a      	ands	r2, r3
10001b04:	687b      	ldr	r3, [r7, #4]
10001b06:	f003 0318 	and.w	r3, r3, #24
10001b0a:	4908      	ldr	r1, [pc, #32]	; (10001b2c <LL_ADC_SetChannelSingleDiff+0x44>)
10001b0c:	40d9      	lsrs	r1, r3
10001b0e:	68bb      	ldr	r3, [r7, #8]
10001b10:	400b      	ands	r3, r1
10001b12:	f3c3 0313 	ubfx	r3, r3, #0, #20
10001b16:	431a      	orrs	r2, r3
10001b18:	68fb      	ldr	r3, [r7, #12]
10001b1a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
10001b1e:	bf00      	nop
10001b20:	3714      	adds	r7, #20
10001b22:	46bd      	mov	sp, r7
10001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
10001b28:	4770      	bx	lr
10001b2a:	bf00      	nop
10001b2c:	000fffff 	.word	0x000fffff

10001b30 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
10001b30:	b480      	push	{r7}
10001b32:	b083      	sub	sp, #12
10001b34:	af00      	add	r7, sp, #0
10001b36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
10001b38:	687b      	ldr	r3, [r7, #4]
10001b3a:	689b      	ldr	r3, [r3, #8]
10001b3c:	f003 031f 	and.w	r3, r3, #31
}
10001b40:	4618      	mov	r0, r3
10001b42:	370c      	adds	r7, #12
10001b44:	46bd      	mov	sp, r7
10001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
10001b4a:	4770      	bx	lr

10001b4c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
10001b4c:	b480      	push	{r7}
10001b4e:	b083      	sub	sp, #12
10001b50:	af00      	add	r7, sp, #0
10001b52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
10001b54:	687b      	ldr	r3, [r7, #4]
10001b56:	689b      	ldr	r3, [r3, #8]
10001b58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
10001b5c:	4618      	mov	r0, r3
10001b5e:	370c      	adds	r7, #12
10001b60:	46bd      	mov	sp, r7
10001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
10001b66:	4770      	bx	lr

10001b68 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
10001b68:	b480      	push	{r7}
10001b6a:	b083      	sub	sp, #12
10001b6c:	af00      	add	r7, sp, #0
10001b6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
10001b70:	687b      	ldr	r3, [r7, #4]
10001b72:	689b      	ldr	r3, [r3, #8]
10001b74:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
10001b78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10001b7c:	687a      	ldr	r2, [r7, #4]
10001b7e:	6093      	str	r3, [r2, #8]
}
10001b80:	bf00      	nop
10001b82:	370c      	adds	r7, #12
10001b84:	46bd      	mov	sp, r7
10001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
10001b8a:	4770      	bx	lr

10001b8c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
10001b8c:	b480      	push	{r7}
10001b8e:	b083      	sub	sp, #12
10001b90:	af00      	add	r7, sp, #0
10001b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
10001b94:	687b      	ldr	r3, [r7, #4]
10001b96:	689b      	ldr	r3, [r3, #8]
10001b98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
10001b9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
10001ba0:	d101      	bne.n	10001ba6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
10001ba2:	2301      	movs	r3, #1
10001ba4:	e000      	b.n	10001ba8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
10001ba6:	2300      	movs	r3, #0
}
10001ba8:	4618      	mov	r0, r3
10001baa:	370c      	adds	r7, #12
10001bac:	46bd      	mov	sp, r7
10001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
10001bb2:	4770      	bx	lr

10001bb4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
10001bb4:	b480      	push	{r7}
10001bb6:	b083      	sub	sp, #12
10001bb8:	af00      	add	r7, sp, #0
10001bba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
10001bbc:	687b      	ldr	r3, [r7, #4]
10001bbe:	689b      	ldr	r3, [r3, #8]
10001bc0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
10001bc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10001bc8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
10001bcc:	687b      	ldr	r3, [r7, #4]
10001bce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
10001bd0:	bf00      	nop
10001bd2:	370c      	adds	r7, #12
10001bd4:	46bd      	mov	sp, r7
10001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
10001bda:	4770      	bx	lr

10001bdc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
10001bdc:	b480      	push	{r7}
10001bde:	b083      	sub	sp, #12
10001be0:	af00      	add	r7, sp, #0
10001be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
10001be4:	687b      	ldr	r3, [r7, #4]
10001be6:	689b      	ldr	r3, [r3, #8]
10001be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
10001bec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
10001bf0:	d101      	bne.n	10001bf6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
10001bf2:	2301      	movs	r3, #1
10001bf4:	e000      	b.n	10001bf8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
10001bf6:	2300      	movs	r3, #0
}
10001bf8:	4618      	mov	r0, r3
10001bfa:	370c      	adds	r7, #12
10001bfc:	46bd      	mov	sp, r7
10001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c02:	4770      	bx	lr

10001c04 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
10001c04:	b480      	push	{r7}
10001c06:	b083      	sub	sp, #12
10001c08:	af00      	add	r7, sp, #0
10001c0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
10001c0c:	687b      	ldr	r3, [r7, #4]
10001c0e:	689b      	ldr	r3, [r3, #8]
10001c10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
10001c14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10001c18:	f043 0201 	orr.w	r2, r3, #1
10001c1c:	687b      	ldr	r3, [r7, #4]
10001c1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
10001c20:	bf00      	nop
10001c22:	370c      	adds	r7, #12
10001c24:	46bd      	mov	sp, r7
10001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c2a:	4770      	bx	lr

10001c2c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
10001c2c:	b480      	push	{r7}
10001c2e:	b083      	sub	sp, #12
10001c30:	af00      	add	r7, sp, #0
10001c32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
10001c34:	687b      	ldr	r3, [r7, #4]
10001c36:	689b      	ldr	r3, [r3, #8]
10001c38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
10001c3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10001c40:	f043 0202 	orr.w	r2, r3, #2
10001c44:	687b      	ldr	r3, [r7, #4]
10001c46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
10001c48:	bf00      	nop
10001c4a:	370c      	adds	r7, #12
10001c4c:	46bd      	mov	sp, r7
10001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c52:	4770      	bx	lr

10001c54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
10001c54:	b480      	push	{r7}
10001c56:	b083      	sub	sp, #12
10001c58:	af00      	add	r7, sp, #0
10001c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
10001c5c:	687b      	ldr	r3, [r7, #4]
10001c5e:	689b      	ldr	r3, [r3, #8]
10001c60:	f003 0301 	and.w	r3, r3, #1
10001c64:	2b01      	cmp	r3, #1
10001c66:	d101      	bne.n	10001c6c <LL_ADC_IsEnabled+0x18>
10001c68:	2301      	movs	r3, #1
10001c6a:	e000      	b.n	10001c6e <LL_ADC_IsEnabled+0x1a>
10001c6c:	2300      	movs	r3, #0
}
10001c6e:	4618      	mov	r0, r3
10001c70:	370c      	adds	r7, #12
10001c72:	46bd      	mov	sp, r7
10001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c78:	4770      	bx	lr

10001c7a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
10001c7a:	b480      	push	{r7}
10001c7c:	b083      	sub	sp, #12
10001c7e:	af00      	add	r7, sp, #0
10001c80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
10001c82:	687b      	ldr	r3, [r7, #4]
10001c84:	689b      	ldr	r3, [r3, #8]
10001c86:	f003 0302 	and.w	r3, r3, #2
10001c8a:	2b02      	cmp	r3, #2
10001c8c:	d101      	bne.n	10001c92 <LL_ADC_IsDisableOngoing+0x18>
10001c8e:	2301      	movs	r3, #1
10001c90:	e000      	b.n	10001c94 <LL_ADC_IsDisableOngoing+0x1a>
10001c92:	2300      	movs	r3, #0
}
10001c94:	4618      	mov	r0, r3
10001c96:	370c      	adds	r7, #12
10001c98:	46bd      	mov	sp, r7
10001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c9e:	4770      	bx	lr

10001ca0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
10001ca0:	b480      	push	{r7}
10001ca2:	b083      	sub	sp, #12
10001ca4:	af00      	add	r7, sp, #0
10001ca6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
10001ca8:	687b      	ldr	r3, [r7, #4]
10001caa:	689b      	ldr	r3, [r3, #8]
10001cac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
10001cb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10001cb4:	f043 0204 	orr.w	r2, r3, #4
10001cb8:	687b      	ldr	r3, [r7, #4]
10001cba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
10001cbc:	bf00      	nop
10001cbe:	370c      	adds	r7, #12
10001cc0:	46bd      	mov	sp, r7
10001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
10001cc6:	4770      	bx	lr

10001cc8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
10001cc8:	b480      	push	{r7}
10001cca:	b083      	sub	sp, #12
10001ccc:	af00      	add	r7, sp, #0
10001cce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
10001cd0:	687b      	ldr	r3, [r7, #4]
10001cd2:	689b      	ldr	r3, [r3, #8]
10001cd4:	f003 0304 	and.w	r3, r3, #4
10001cd8:	2b04      	cmp	r3, #4
10001cda:	d101      	bne.n	10001ce0 <LL_ADC_REG_IsConversionOngoing+0x18>
10001cdc:	2301      	movs	r3, #1
10001cde:	e000      	b.n	10001ce2 <LL_ADC_REG_IsConversionOngoing+0x1a>
10001ce0:	2300      	movs	r3, #0
}
10001ce2:	4618      	mov	r0, r3
10001ce4:	370c      	adds	r7, #12
10001ce6:	46bd      	mov	sp, r7
10001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
10001cec:	4770      	bx	lr

10001cee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
10001cee:	b480      	push	{r7}
10001cf0:	b083      	sub	sp, #12
10001cf2:	af00      	add	r7, sp, #0
10001cf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
10001cf6:	687b      	ldr	r3, [r7, #4]
10001cf8:	689b      	ldr	r3, [r3, #8]
10001cfa:	f003 0308 	and.w	r3, r3, #8
10001cfe:	2b08      	cmp	r3, #8
10001d00:	d101      	bne.n	10001d06 <LL_ADC_INJ_IsConversionOngoing+0x18>
10001d02:	2301      	movs	r3, #1
10001d04:	e000      	b.n	10001d08 <LL_ADC_INJ_IsConversionOngoing+0x1a>
10001d06:	2300      	movs	r3, #0
}
10001d08:	4618      	mov	r0, r3
10001d0a:	370c      	adds	r7, #12
10001d0c:	46bd      	mov	sp, r7
10001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001d12:	4770      	bx	lr

10001d14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
10001d14:	b590      	push	{r4, r7, lr}
10001d16:	b089      	sub	sp, #36	; 0x24
10001d18:	af00      	add	r7, sp, #0
10001d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
10001d1c:	2300      	movs	r3, #0
10001d1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
10001d20:	2300      	movs	r3, #0
10001d22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
10001d24:	687b      	ldr	r3, [r7, #4]
10001d26:	2b00      	cmp	r3, #0
10001d28:	d101      	bne.n	10001d2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
10001d2a:	2301      	movs	r3, #1
10001d2c:	e13a      	b.n	10001fa4 <HAL_ADC_Init+0x290>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
10001d2e:	687b      	ldr	r3, [r7, #4]
10001d30:	68db      	ldr	r3, [r3, #12]
10001d32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
10001d34:	687b      	ldr	r3, [r7, #4]
10001d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001d38:	2b00      	cmp	r3, #0
10001d3a:	d109      	bne.n	10001d50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
10001d3c:	6878      	ldr	r0, [r7, #4]
10001d3e:	f7ff fb35 	bl	100013ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
10001d42:	687b      	ldr	r3, [r7, #4]
10001d44:	2200      	movs	r2, #0
10001d46:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
10001d48:	687b      	ldr	r3, [r7, #4]
10001d4a:	2200      	movs	r2, #0
10001d4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
10001d50:	687b      	ldr	r3, [r7, #4]
10001d52:	681b      	ldr	r3, [r3, #0]
10001d54:	4618      	mov	r0, r3
10001d56:	f7ff ff19 	bl	10001b8c <LL_ADC_IsDeepPowerDownEnabled>
10001d5a:	4603      	mov	r3, r0
10001d5c:	2b00      	cmp	r3, #0
10001d5e:	d004      	beq.n	10001d6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
10001d60:	687b      	ldr	r3, [r7, #4]
10001d62:	681b      	ldr	r3, [r3, #0]
10001d64:	4618      	mov	r0, r3
10001d66:	f7ff feff 	bl	10001b68 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
10001d6a:	687b      	ldr	r3, [r7, #4]
10001d6c:	681b      	ldr	r3, [r3, #0]
10001d6e:	4618      	mov	r0, r3
10001d70:	f7ff ff34 	bl	10001bdc <LL_ADC_IsInternalRegulatorEnabled>
10001d74:	4603      	mov	r3, r0
10001d76:	2b00      	cmp	r3, #0
10001d78:	d114      	bne.n	10001da4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
10001d7a:	687b      	ldr	r3, [r7, #4]
10001d7c:	681b      	ldr	r3, [r3, #0]
10001d7e:	4618      	mov	r0, r3
10001d80:	f7ff ff18 	bl	10001bb4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
10001d84:	4b89      	ldr	r3, [pc, #548]	; (10001fac <HAL_ADC_Init+0x298>)
10001d86:	681b      	ldr	r3, [r3, #0]
10001d88:	099b      	lsrs	r3, r3, #6
10001d8a:	4a89      	ldr	r2, [pc, #548]	; (10001fb0 <HAL_ADC_Init+0x29c>)
10001d8c:	fba2 2303 	umull	r2, r3, r2, r3
10001d90:	099b      	lsrs	r3, r3, #6
10001d92:	3301      	adds	r3, #1
10001d94:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
10001d96:	e002      	b.n	10001d9e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
10001d98:	68bb      	ldr	r3, [r7, #8]
10001d9a:	3b01      	subs	r3, #1
10001d9c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
10001d9e:	68bb      	ldr	r3, [r7, #8]
10001da0:	2b00      	cmp	r3, #0
10001da2:	d1f9      	bne.n	10001d98 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
10001da4:	687b      	ldr	r3, [r7, #4]
10001da6:	681b      	ldr	r3, [r3, #0]
10001da8:	4618      	mov	r0, r3
10001daa:	f7ff ff17 	bl	10001bdc <LL_ADC_IsInternalRegulatorEnabled>
10001dae:	4603      	mov	r3, r0
10001db0:	2b00      	cmp	r3, #0
10001db2:	d10d      	bne.n	10001dd0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10001db4:	687b      	ldr	r3, [r7, #4]
10001db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001db8:	f043 0210 	orr.w	r2, r3, #16
10001dbc:	687b      	ldr	r3, [r7, #4]
10001dbe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
10001dc0:	687b      	ldr	r3, [r7, #4]
10001dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10001dc4:	f043 0201 	orr.w	r2, r3, #1
10001dc8:	687b      	ldr	r3, [r7, #4]
10001dca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
10001dcc:	2301      	movs	r3, #1
10001dce:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
10001dd0:	687b      	ldr	r3, [r7, #4]
10001dd2:	681b      	ldr	r3, [r3, #0]
10001dd4:	4618      	mov	r0, r3
10001dd6:	f7ff ff77 	bl	10001cc8 <LL_ADC_REG_IsConversionOngoing>
10001dda:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
10001ddc:	687b      	ldr	r3, [r7, #4]
10001dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001de0:	f003 0310 	and.w	r3, r3, #16
10001de4:	2b00      	cmp	r3, #0
10001de6:	f040 80d4 	bne.w	10001f92 <HAL_ADC_Init+0x27e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
10001dea:	697b      	ldr	r3, [r7, #20]
10001dec:	2b00      	cmp	r3, #0
10001dee:	f040 80d0 	bne.w	10001f92 <HAL_ADC_Init+0x27e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
10001df2:	687b      	ldr	r3, [r7, #4]
10001df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001df6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
10001dfa:	f043 0202 	orr.w	r2, r3, #2
10001dfe:	687b      	ldr	r3, [r7, #4]
10001e00:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
10001e02:	687b      	ldr	r3, [r7, #4]
10001e04:	681b      	ldr	r3, [r3, #0]
10001e06:	4618      	mov	r0, r3
10001e08:	f7ff ff24 	bl	10001c54 <LL_ADC_IsEnabled>
10001e0c:	4603      	mov	r3, r0
10001e0e:	2b00      	cmp	r3, #0
10001e10:	d110      	bne.n	10001e34 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
10001e12:	4868      	ldr	r0, [pc, #416]	; (10001fb4 <HAL_ADC_Init+0x2a0>)
10001e14:	f7ff ff1e 	bl	10001c54 <LL_ADC_IsEnabled>
10001e18:	4604      	mov	r4, r0
10001e1a:	4867      	ldr	r0, [pc, #412]	; (10001fb8 <HAL_ADC_Init+0x2a4>)
10001e1c:	f7ff ff1a 	bl	10001c54 <LL_ADC_IsEnabled>
10001e20:	4603      	mov	r3, r0
10001e22:	4323      	orrs	r3, r4
10001e24:	2b00      	cmp	r3, #0
10001e26:	d105      	bne.n	10001e34 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
10001e28:	687b      	ldr	r3, [r7, #4]
10001e2a:	685b      	ldr	r3, [r3, #4]
10001e2c:	4619      	mov	r1, r3
10001e2e:	4863      	ldr	r0, [pc, #396]	; (10001fbc <HAL_ADC_Init+0x2a8>)
10001e30:	f7ff fd58 	bl	100018e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
10001e34:	687b      	ldr	r3, [r7, #4]
10001e36:	7d5b      	ldrb	r3, [r3, #21]
10001e38:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
10001e3a:	687b      	ldr	r3, [r7, #4]
10001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
10001e3e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
10001e40:	687b      	ldr	r3, [r7, #4]
10001e42:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                     |
10001e44:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
10001e46:	687b      	ldr	r3, [r7, #4]
10001e48:	7f1b      	ldrb	r3, [r3, #28]
10001e4a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
10001e4c:	4313      	orrs	r3, r2
10001e4e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
10001e50:	687b      	ldr	r3, [r7, #4]
10001e52:	7f1b      	ldrb	r3, [r3, #28]
10001e54:	2b01      	cmp	r3, #1
10001e56:	d106      	bne.n	10001e66 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
10001e58:	687b      	ldr	r3, [r7, #4]
10001e5a:	6a1b      	ldr	r3, [r3, #32]
10001e5c:	3b01      	subs	r3, #1
10001e5e:	045b      	lsls	r3, r3, #17
10001e60:	69ba      	ldr	r2, [r7, #24]
10001e62:	4313      	orrs	r3, r2
10001e64:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
10001e66:	687b      	ldr	r3, [r7, #4]
10001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001e6a:	2b00      	cmp	r3, #0
10001e6c:	d009      	beq.n	10001e82 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
10001e6e:	687b      	ldr	r3, [r7, #4]
10001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001e72:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
10001e76:	687b      	ldr	r3, [r7, #4]
10001e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001e7a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
10001e7c:	69ba      	ldr	r2, [r7, #24]
10001e7e:	4313      	orrs	r3, r2
10001e80:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
10001e82:	687b      	ldr	r3, [r7, #4]
10001e84:	681b      	ldr	r3, [r3, #0]
10001e86:	68da      	ldr	r2, [r3, #12]
10001e88:	4b4d      	ldr	r3, [pc, #308]	; (10001fc0 <HAL_ADC_Init+0x2ac>)
10001e8a:	4013      	ands	r3, r2
10001e8c:	687a      	ldr	r2, [r7, #4]
10001e8e:	6812      	ldr	r2, [r2, #0]
10001e90:	69b9      	ldr	r1, [r7, #24]
10001e92:	430b      	orrs	r3, r1
10001e94:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
10001e96:	687b      	ldr	r3, [r7, #4]
10001e98:	681b      	ldr	r3, [r3, #0]
10001e9a:	4618      	mov	r0, r3
10001e9c:	f7ff ff14 	bl	10001cc8 <LL_ADC_REG_IsConversionOngoing>
10001ea0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
10001ea2:	687b      	ldr	r3, [r7, #4]
10001ea4:	681b      	ldr	r3, [r3, #0]
10001ea6:	4618      	mov	r0, r3
10001ea8:	f7ff ff21 	bl	10001cee <LL_ADC_INJ_IsConversionOngoing>
10001eac:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
10001eae:	693b      	ldr	r3, [r7, #16]
10001eb0:	2b00      	cmp	r3, #0
10001eb2:	d14c      	bne.n	10001f4e <HAL_ADC_Init+0x23a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
10001eb4:	68fb      	ldr	r3, [r7, #12]
10001eb6:	2b00      	cmp	r3, #0
10001eb8:	d149      	bne.n	10001f4e <HAL_ADC_Init+0x23a>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
10001eba:	687b      	ldr	r3, [r7, #4]
10001ebc:	7d1b      	ldrb	r3, [r3, #20]
10001ebe:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
10001ec0:	687b      	ldr	r3, [r7, #4]
10001ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
10001ec4:	4313      	orrs	r3, r2
10001ec6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
10001ec8:	687b      	ldr	r3, [r7, #4]
10001eca:	681b      	ldr	r3, [r3, #0]
10001ecc:	68db      	ldr	r3, [r3, #12]
10001ece:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
10001ed2:	f023 0303 	bic.w	r3, r3, #3
10001ed6:	687a      	ldr	r2, [r7, #4]
10001ed8:	6812      	ldr	r2, [r2, #0]
10001eda:	69b9      	ldr	r1, [r7, #24]
10001edc:	430b      	orrs	r3, r1
10001ede:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
10001ee0:	687b      	ldr	r3, [r7, #4]
10001ee2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
10001ee6:	2b01      	cmp	r3, #1
10001ee8:	d11b      	bne.n	10001f22 <HAL_ADC_Init+0x20e>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
10001eea:	687b      	ldr	r3, [r7, #4]
10001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001eee:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
10001ef0:	687b      	ldr	r3, [r7, #4]
10001ef2:	681b      	ldr	r3, [r3, #0]
10001ef4:	691a      	ldr	r2, [r3, #16]
10001ef6:	4b33      	ldr	r3, [pc, #204]	; (10001fc4 <HAL_ADC_Init+0x2b0>)
10001ef8:	4013      	ands	r3, r2
10001efa:	687a      	ldr	r2, [r7, #4]
10001efc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
10001efe:	3a01      	subs	r2, #1
10001f00:	0411      	lsls	r1, r2, #16
10001f02:	687a      	ldr	r2, [r7, #4]
10001f04:	6c12      	ldr	r2, [r2, #64]	; 0x40
10001f06:	4311      	orrs	r1, r2
10001f08:	687a      	ldr	r2, [r7, #4]
10001f0a:	6c52      	ldr	r2, [r2, #68]	; 0x44
10001f0c:	4311      	orrs	r1, r2
10001f0e:	687a      	ldr	r2, [r7, #4]
10001f10:	6c92      	ldr	r2, [r2, #72]	; 0x48
10001f12:	430a      	orrs	r2, r1
10001f14:	431a      	orrs	r2, r3
10001f16:	687b      	ldr	r3, [r7, #4]
10001f18:	681b      	ldr	r3, [r3, #0]
10001f1a:	f042 0201 	orr.w	r2, r2, #1
10001f1e:	611a      	str	r2, [r3, #16]
10001f20:	e007      	b.n	10001f32 <HAL_ADC_Init+0x21e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
10001f22:	687b      	ldr	r3, [r7, #4]
10001f24:	681b      	ldr	r3, [r3, #0]
10001f26:	691a      	ldr	r2, [r3, #16]
10001f28:	687b      	ldr	r3, [r7, #4]
10001f2a:	681b      	ldr	r3, [r3, #0]
10001f2c:	f022 0201 	bic.w	r2, r2, #1
10001f30:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
10001f32:	687b      	ldr	r3, [r7, #4]
10001f34:	681b      	ldr	r3, [r3, #0]
10001f36:	691b      	ldr	r3, [r3, #16]
10001f38:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
10001f3c:	687b      	ldr	r3, [r7, #4]
10001f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10001f40:	687b      	ldr	r3, [r7, #4]
10001f42:	681b      	ldr	r3, [r3, #0]
10001f44:	430a      	orrs	r2, r1
10001f46:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
10001f48:	6878      	ldr	r0, [r7, #4]
10001f4a:	f000 fdb9 	bl	10002ac0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
10001f4e:	687b      	ldr	r3, [r7, #4]
10001f50:	68db      	ldr	r3, [r3, #12]
10001f52:	2b01      	cmp	r3, #1
10001f54:	d10c      	bne.n	10001f70 <HAL_ADC_Init+0x25c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
10001f56:	687b      	ldr	r3, [r7, #4]
10001f58:	681b      	ldr	r3, [r3, #0]
10001f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001f5c:	f023 010f 	bic.w	r1, r3, #15
10001f60:	687b      	ldr	r3, [r7, #4]
10001f62:	699b      	ldr	r3, [r3, #24]
10001f64:	1e5a      	subs	r2, r3, #1
10001f66:	687b      	ldr	r3, [r7, #4]
10001f68:	681b      	ldr	r3, [r3, #0]
10001f6a:	430a      	orrs	r2, r1
10001f6c:	631a      	str	r2, [r3, #48]	; 0x30
10001f6e:	e007      	b.n	10001f80 <HAL_ADC_Init+0x26c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
10001f70:	687b      	ldr	r3, [r7, #4]
10001f72:	681b      	ldr	r3, [r3, #0]
10001f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
10001f76:	687b      	ldr	r3, [r7, #4]
10001f78:	681b      	ldr	r3, [r3, #0]
10001f7a:	f022 020f 	bic.w	r2, r2, #15
10001f7e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
10001f80:	687b      	ldr	r3, [r7, #4]
10001f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001f84:	f023 0303 	bic.w	r3, r3, #3
10001f88:	f043 0201 	orr.w	r2, r3, #1
10001f8c:	687b      	ldr	r3, [r7, #4]
10001f8e:	655a      	str	r2, [r3, #84]	; 0x54
10001f90:	e007      	b.n	10001fa2 <HAL_ADC_Init+0x28e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10001f92:	687b      	ldr	r3, [r7, #4]
10001f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001f96:	f043 0210 	orr.w	r2, r3, #16
10001f9a:	687b      	ldr	r3, [r7, #4]
10001f9c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
10001f9e:	2301      	movs	r3, #1
10001fa0:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
10001fa2:	7ffb      	ldrb	r3, [r7, #31]
}
10001fa4:	4618      	mov	r0, r3
10001fa6:	3724      	adds	r7, #36	; 0x24
10001fa8:	46bd      	mov	sp, r7
10001faa:	bd90      	pop	{r4, r7, pc}
10001fac:	10020000 	.word	0x10020000
10001fb0:	053e2d63 	.word	0x053e2d63
10001fb4:	48003000 	.word	0x48003000
10001fb8:	48003100 	.word	0x48003100
10001fbc:	48003300 	.word	0x48003300
10001fc0:	fff0c003 	.word	0xfff0c003
10001fc4:	fc00f81e 	.word	0xfc00f81e

10001fc8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
10001fc8:	b580      	push	{r7, lr}
10001fca:	b086      	sub	sp, #24
10001fcc:	af00      	add	r7, sp, #0
10001fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
10001fd0:	4857      	ldr	r0, [pc, #348]	; (10002130 <HAL_ADC_Start+0x168>)
10001fd2:	f7ff fdad 	bl	10001b30 <LL_ADC_GetMultimode>
10001fd6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
10001fd8:	687b      	ldr	r3, [r7, #4]
10001fda:	681b      	ldr	r3, [r3, #0]
10001fdc:	4618      	mov	r0, r3
10001fde:	f7ff fe73 	bl	10001cc8 <LL_ADC_REG_IsConversionOngoing>
10001fe2:	4603      	mov	r3, r0
10001fe4:	2b00      	cmp	r3, #0
10001fe6:	f040 809c 	bne.w	10002122 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
10001fea:	687b      	ldr	r3, [r7, #4]
10001fec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
10001ff0:	2b01      	cmp	r3, #1
10001ff2:	d101      	bne.n	10001ff8 <HAL_ADC_Start+0x30>
10001ff4:	2302      	movs	r3, #2
10001ff6:	e097      	b.n	10002128 <HAL_ADC_Start+0x160>
10001ff8:	687b      	ldr	r3, [r7, #4]
10001ffa:	2201      	movs	r2, #1
10001ffc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
10002000:	6878      	ldr	r0, [r7, #4]
10002002:	f000 fc81 	bl	10002908 <ADC_Enable>
10002006:	4603      	mov	r3, r0
10002008:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
1000200a:	7dfb      	ldrb	r3, [r7, #23]
1000200c:	2b00      	cmp	r3, #0
1000200e:	f040 8083 	bne.w	10002118 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
10002012:	687b      	ldr	r3, [r7, #4]
10002014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002016:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
1000201a:	f023 0301 	bic.w	r3, r3, #1
1000201e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
10002022:	687b      	ldr	r3, [r7, #4]
10002024:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
10002026:	687b      	ldr	r3, [r7, #4]
10002028:	681b      	ldr	r3, [r3, #0]
1000202a:	4a42      	ldr	r2, [pc, #264]	; (10002134 <HAL_ADC_Start+0x16c>)
1000202c:	4293      	cmp	r3, r2
1000202e:	d002      	beq.n	10002036 <HAL_ADC_Start+0x6e>
10002030:	687b      	ldr	r3, [r7, #4]
10002032:	681b      	ldr	r3, [r3, #0]
10002034:	e000      	b.n	10002038 <HAL_ADC_Start+0x70>
10002036:	4b40      	ldr	r3, [pc, #256]	; (10002138 <HAL_ADC_Start+0x170>)
10002038:	687a      	ldr	r2, [r7, #4]
1000203a:	6812      	ldr	r2, [r2, #0]
1000203c:	4293      	cmp	r3, r2
1000203e:	d002      	beq.n	10002046 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
10002040:	693b      	ldr	r3, [r7, #16]
10002042:	2b00      	cmp	r3, #0
10002044:	d105      	bne.n	10002052 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
10002046:	687b      	ldr	r3, [r7, #4]
10002048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000204a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
1000204e:	687b      	ldr	r3, [r7, #4]
10002050:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
10002052:	687b      	ldr	r3, [r7, #4]
10002054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002056:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
1000205a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
1000205e:	d106      	bne.n	1000206e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
10002060:	687b      	ldr	r3, [r7, #4]
10002062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10002064:	f023 0206 	bic.w	r2, r3, #6
10002068:	687b      	ldr	r3, [r7, #4]
1000206a:	659a      	str	r2, [r3, #88]	; 0x58
1000206c:	e002      	b.n	10002074 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
1000206e:	687b      	ldr	r3, [r7, #4]
10002070:	2200      	movs	r2, #0
10002072:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
10002074:	687b      	ldr	r3, [r7, #4]
10002076:	681b      	ldr	r3, [r3, #0]
10002078:	221c      	movs	r2, #28
1000207a:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
1000207c:	687b      	ldr	r3, [r7, #4]
1000207e:	2200      	movs	r2, #0
10002080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
10002084:	687b      	ldr	r3, [r7, #4]
10002086:	681b      	ldr	r3, [r3, #0]
10002088:	4a2a      	ldr	r2, [pc, #168]	; (10002134 <HAL_ADC_Start+0x16c>)
1000208a:	4293      	cmp	r3, r2
1000208c:	d002      	beq.n	10002094 <HAL_ADC_Start+0xcc>
1000208e:	687b      	ldr	r3, [r7, #4]
10002090:	681b      	ldr	r3, [r3, #0]
10002092:	e000      	b.n	10002096 <HAL_ADC_Start+0xce>
10002094:	4b28      	ldr	r3, [pc, #160]	; (10002138 <HAL_ADC_Start+0x170>)
10002096:	687a      	ldr	r2, [r7, #4]
10002098:	6812      	ldr	r2, [r2, #0]
1000209a:	4293      	cmp	r3, r2
1000209c:	d008      	beq.n	100020b0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
1000209e:	693b      	ldr	r3, [r7, #16]
100020a0:	2b00      	cmp	r3, #0
100020a2:	d005      	beq.n	100020b0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
100020a4:	693b      	ldr	r3, [r7, #16]
100020a6:	2b05      	cmp	r3, #5
100020a8:	d002      	beq.n	100020b0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
100020aa:	693b      	ldr	r3, [r7, #16]
100020ac:	2b09      	cmp	r3, #9
100020ae:	d114      	bne.n	100020da <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
100020b0:	687b      	ldr	r3, [r7, #4]
100020b2:	681b      	ldr	r3, [r3, #0]
100020b4:	68db      	ldr	r3, [r3, #12]
100020b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
100020ba:	2b00      	cmp	r3, #0
100020bc:	d007      	beq.n	100020ce <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
100020be:	687b      	ldr	r3, [r7, #4]
100020c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100020c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
100020c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
100020ca:	687b      	ldr	r3, [r7, #4]
100020cc:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
100020ce:	687b      	ldr	r3, [r7, #4]
100020d0:	681b      	ldr	r3, [r3, #0]
100020d2:	4618      	mov	r0, r3
100020d4:	f7ff fde4 	bl	10001ca0 <LL_ADC_REG_StartConversion>
100020d8:	e025      	b.n	10002126 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
100020da:	687b      	ldr	r3, [r7, #4]
100020dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100020de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
100020e2:	687b      	ldr	r3, [r7, #4]
100020e4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
100020e6:	687b      	ldr	r3, [r7, #4]
100020e8:	681b      	ldr	r3, [r3, #0]
100020ea:	4a12      	ldr	r2, [pc, #72]	; (10002134 <HAL_ADC_Start+0x16c>)
100020ec:	4293      	cmp	r3, r2
100020ee:	d002      	beq.n	100020f6 <HAL_ADC_Start+0x12e>
100020f0:	687b      	ldr	r3, [r7, #4]
100020f2:	681b      	ldr	r3, [r3, #0]
100020f4:	e000      	b.n	100020f8 <HAL_ADC_Start+0x130>
100020f6:	4b10      	ldr	r3, [pc, #64]	; (10002138 <HAL_ADC_Start+0x170>)
100020f8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
100020fa:	68fb      	ldr	r3, [r7, #12]
100020fc:	68db      	ldr	r3, [r3, #12]
100020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
10002102:	2b00      	cmp	r3, #0
10002104:	d00f      	beq.n	10002126 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
10002106:	687b      	ldr	r3, [r7, #4]
10002108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000210a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
1000210e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
10002112:	687b      	ldr	r3, [r7, #4]
10002114:	655a      	str	r2, [r3, #84]	; 0x54
10002116:	e006      	b.n	10002126 <HAL_ADC_Start+0x15e>
      LL_ADC_REG_StartConversion(hadc->Instance);
#endif
    }
    else
    {
      __HAL_UNLOCK(hadc);
10002118:	687b      	ldr	r3, [r7, #4]
1000211a:	2200      	movs	r2, #0
1000211c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
10002120:	e001      	b.n	10002126 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
10002122:	2302      	movs	r3, #2
10002124:	75fb      	strb	r3, [r7, #23]
  }

  return tmp_hal_status;
10002126:	7dfb      	ldrb	r3, [r7, #23]
}
10002128:	4618      	mov	r0, r3
1000212a:	3718      	adds	r7, #24
1000212c:	46bd      	mov	sp, r7
1000212e:	bd80      	pop	{r7, pc}
10002130:	48003300 	.word	0x48003300
10002134:	48003100 	.word	0x48003100
10002138:	48003000 	.word	0x48003000

1000213c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
1000213c:	b580      	push	{r7, lr}
1000213e:	b088      	sub	sp, #32
10002140:	af00      	add	r7, sp, #0
10002142:	6078      	str	r0, [r7, #4]
10002144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
10002146:	4866      	ldr	r0, [pc, #408]	; (100022e0 <HAL_ADC_PollForConversion+0x1a4>)
10002148:	f7ff fcf2 	bl	10001b30 <LL_ADC_GetMultimode>
1000214c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
1000214e:	687b      	ldr	r3, [r7, #4]
10002150:	691b      	ldr	r3, [r3, #16]
10002152:	2b08      	cmp	r3, #8
10002154:	d102      	bne.n	1000215c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
10002156:	2308      	movs	r3, #8
10002158:	61fb      	str	r3, [r7, #28]
1000215a:	e02a      	b.n	100021b2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
1000215c:	697b      	ldr	r3, [r7, #20]
1000215e:	2b00      	cmp	r3, #0
10002160:	d005      	beq.n	1000216e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
10002162:	697b      	ldr	r3, [r7, #20]
10002164:	2b05      	cmp	r3, #5
10002166:	d002      	beq.n	1000216e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
10002168:	697b      	ldr	r3, [r7, #20]
1000216a:	2b09      	cmp	r3, #9
1000216c:	d111      	bne.n	10002192 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
1000216e:	687b      	ldr	r3, [r7, #4]
10002170:	681b      	ldr	r3, [r3, #0]
10002172:	68db      	ldr	r3, [r3, #12]
10002174:	f003 0301 	and.w	r3, r3, #1
10002178:	2b00      	cmp	r3, #0
1000217a:	d007      	beq.n	1000218c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1000217c:	687b      	ldr	r3, [r7, #4]
1000217e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002180:	f043 0220 	orr.w	r2, r3, #32
10002184:	687b      	ldr	r3, [r7, #4]
10002186:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
10002188:	2301      	movs	r3, #1
1000218a:	e0a4      	b.n	100022d6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
1000218c:	2304      	movs	r3, #4
1000218e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
10002190:	e00f      	b.n	100021b2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
10002192:	4853      	ldr	r0, [pc, #332]	; (100022e0 <HAL_ADC_PollForConversion+0x1a4>)
10002194:	f7ff fcda 	bl	10001b4c <LL_ADC_GetMultiDMATransfer>
10002198:	4603      	mov	r3, r0
1000219a:	2b00      	cmp	r3, #0
1000219c:	d007      	beq.n	100021ae <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1000219e:	687b      	ldr	r3, [r7, #4]
100021a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100021a2:	f043 0220 	orr.w	r2, r3, #32
100021a6:	687b      	ldr	r3, [r7, #4]
100021a8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
100021aa:	2301      	movs	r3, #1
100021ac:	e093      	b.n	100022d6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
100021ae:	2304      	movs	r3, #4
100021b0:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
100021b2:	f7ff fb19 	bl	100017e8 <HAL_GetTick>
100021b6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
100021b8:	e021      	b.n	100021fe <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
100021ba:	683b      	ldr	r3, [r7, #0]
100021bc:	f1b3 3fff 	cmp.w	r3, #4294967295
100021c0:	d01d      	beq.n	100021fe <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
100021c2:	f7ff fb11 	bl	100017e8 <HAL_GetTick>
100021c6:	4602      	mov	r2, r0
100021c8:	693b      	ldr	r3, [r7, #16]
100021ca:	1ad3      	subs	r3, r2, r3
100021cc:	683a      	ldr	r2, [r7, #0]
100021ce:	429a      	cmp	r2, r3
100021d0:	d302      	bcc.n	100021d8 <HAL_ADC_PollForConversion+0x9c>
100021d2:	683b      	ldr	r3, [r7, #0]
100021d4:	2b00      	cmp	r3, #0
100021d6:	d112      	bne.n	100021fe <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
100021d8:	687b      	ldr	r3, [r7, #4]
100021da:	681b      	ldr	r3, [r3, #0]
100021dc:	681a      	ldr	r2, [r3, #0]
100021de:	69fb      	ldr	r3, [r7, #28]
100021e0:	4013      	ands	r3, r2
100021e2:	2b00      	cmp	r3, #0
100021e4:	d10b      	bne.n	100021fe <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
100021e6:	687b      	ldr	r3, [r7, #4]
100021e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100021ea:	f043 0204 	orr.w	r2, r3, #4
100021ee:	687b      	ldr	r3, [r7, #4]
100021f0:	655a      	str	r2, [r3, #84]	; 0x54

          __HAL_UNLOCK(hadc);
100021f2:	687b      	ldr	r3, [r7, #4]
100021f4:	2200      	movs	r2, #0
100021f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
100021fa:	2303      	movs	r3, #3
100021fc:	e06b      	b.n	100022d6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
100021fe:	687b      	ldr	r3, [r7, #4]
10002200:	681b      	ldr	r3, [r3, #0]
10002202:	681a      	ldr	r2, [r3, #0]
10002204:	69fb      	ldr	r3, [r7, #28]
10002206:	4013      	ands	r3, r2
10002208:	2b00      	cmp	r3, #0
1000220a:	d0d6      	beq.n	100021ba <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
1000220c:	687b      	ldr	r3, [r7, #4]
1000220e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002210:	f443 7200 	orr.w	r2, r3, #512	; 0x200
10002214:	687b      	ldr	r3, [r7, #4]
10002216:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
10002218:	687b      	ldr	r3, [r7, #4]
1000221a:	681b      	ldr	r3, [r3, #0]
1000221c:	4618      	mov	r0, r3
1000221e:	f7ff fbf9 	bl	10001a14 <LL_ADC_REG_IsTriggerSourceSWStart>
10002222:	4603      	mov	r3, r0
10002224:	2b00      	cmp	r3, #0
10002226:	d01c      	beq.n	10002262 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
10002228:	687b      	ldr	r3, [r7, #4]
1000222a:	7d5b      	ldrb	r3, [r3, #21]
1000222c:	2b00      	cmp	r3, #0
1000222e:	d118      	bne.n	10002262 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
10002230:	687b      	ldr	r3, [r7, #4]
10002232:	681b      	ldr	r3, [r3, #0]
10002234:	681b      	ldr	r3, [r3, #0]
10002236:	f003 0308 	and.w	r3, r3, #8
1000223a:	2b08      	cmp	r3, #8
1000223c:	d111      	bne.n	10002262 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
1000223e:	687b      	ldr	r3, [r7, #4]
10002240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002242:	f423 7280 	bic.w	r2, r3, #256	; 0x100
10002246:	687b      	ldr	r3, [r7, #4]
10002248:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
1000224a:	687b      	ldr	r3, [r7, #4]
1000224c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000224e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
10002252:	2b00      	cmp	r3, #0
10002254:	d105      	bne.n	10002262 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
10002256:	687b      	ldr	r3, [r7, #4]
10002258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000225a:	f043 0201 	orr.w	r2, r3, #1
1000225e:	687b      	ldr	r3, [r7, #4]
10002260:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
10002262:	687b      	ldr	r3, [r7, #4]
10002264:	681b      	ldr	r3, [r3, #0]
10002266:	4a1f      	ldr	r2, [pc, #124]	; (100022e4 <HAL_ADC_PollForConversion+0x1a8>)
10002268:	4293      	cmp	r3, r2
1000226a:	d002      	beq.n	10002272 <HAL_ADC_PollForConversion+0x136>
1000226c:	687b      	ldr	r3, [r7, #4]
1000226e:	681b      	ldr	r3, [r3, #0]
10002270:	e000      	b.n	10002274 <HAL_ADC_PollForConversion+0x138>
10002272:	4b1d      	ldr	r3, [pc, #116]	; (100022e8 <HAL_ADC_PollForConversion+0x1ac>)
10002274:	687a      	ldr	r2, [r7, #4]
10002276:	6812      	ldr	r2, [r2, #0]
10002278:	4293      	cmp	r3, r2
1000227a:	d008      	beq.n	1000228e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
1000227c:	697b      	ldr	r3, [r7, #20]
1000227e:	2b00      	cmp	r3, #0
10002280:	d005      	beq.n	1000228e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
10002282:	697b      	ldr	r3, [r7, #20]
10002284:	2b05      	cmp	r3, #5
10002286:	d002      	beq.n	1000228e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
10002288:	697b      	ldr	r3, [r7, #20]
1000228a:	2b09      	cmp	r3, #9
1000228c:	d104      	bne.n	10002298 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
1000228e:	687b      	ldr	r3, [r7, #4]
10002290:	681b      	ldr	r3, [r3, #0]
10002292:	68db      	ldr	r3, [r3, #12]
10002294:	61bb      	str	r3, [r7, #24]
10002296:	e00c      	b.n	100022b2 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
10002298:	687b      	ldr	r3, [r7, #4]
1000229a:	681b      	ldr	r3, [r3, #0]
1000229c:	4a11      	ldr	r2, [pc, #68]	; (100022e4 <HAL_ADC_PollForConversion+0x1a8>)
1000229e:	4293      	cmp	r3, r2
100022a0:	d002      	beq.n	100022a8 <HAL_ADC_PollForConversion+0x16c>
100022a2:	687b      	ldr	r3, [r7, #4]
100022a4:	681b      	ldr	r3, [r3, #0]
100022a6:	e000      	b.n	100022aa <HAL_ADC_PollForConversion+0x16e>
100022a8:	4b0f      	ldr	r3, [pc, #60]	; (100022e8 <HAL_ADC_PollForConversion+0x1ac>)
100022aa:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
100022ac:	68fb      	ldr	r3, [r7, #12]
100022ae:	68db      	ldr	r3, [r3, #12]
100022b0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
100022b2:	69fb      	ldr	r3, [r7, #28]
100022b4:	2b08      	cmp	r3, #8
100022b6:	d104      	bne.n	100022c2 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
100022b8:	687b      	ldr	r3, [r7, #4]
100022ba:	681b      	ldr	r3, [r3, #0]
100022bc:	2208      	movs	r2, #8
100022be:	601a      	str	r2, [r3, #0]
100022c0:	e008      	b.n	100022d4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
100022c2:	69bb      	ldr	r3, [r7, #24]
100022c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
100022c8:	2b00      	cmp	r3, #0
100022ca:	d103      	bne.n	100022d4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
100022cc:	687b      	ldr	r3, [r7, #4]
100022ce:	681b      	ldr	r3, [r3, #0]
100022d0:	220c      	movs	r2, #12
100022d2:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
100022d4:	2300      	movs	r3, #0
}
100022d6:	4618      	mov	r0, r3
100022d8:	3720      	adds	r7, #32
100022da:	46bd      	mov	sp, r7
100022dc:	bd80      	pop	{r7, pc}
100022de:	bf00      	nop
100022e0:	48003300 	.word	0x48003300
100022e4:	48003100 	.word	0x48003100
100022e8:	48003000 	.word	0x48003000

100022ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
100022ec:	b480      	push	{r7}
100022ee:	b083      	sub	sp, #12
100022f0:	af00      	add	r7, sp, #0
100022f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
100022f4:	687b      	ldr	r3, [r7, #4]
100022f6:	681b      	ldr	r3, [r3, #0]
100022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
100022fa:	4618      	mov	r0, r3
100022fc:	370c      	adds	r7, #12
100022fe:	46bd      	mov	sp, r7
10002300:	f85d 7b04 	ldr.w	r7, [sp], #4
10002304:	4770      	bx	lr
	...

10002308 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
10002308:	b590      	push	{r4, r7, lr}
1000230a:	b0a1      	sub	sp, #132	; 0x84
1000230c:	af00      	add	r7, sp, #0
1000230e:	6078      	str	r0, [r7, #4]
10002310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
10002312:	2300      	movs	r3, #0
10002314:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
10002318:	2300      	movs	r3, #0
1000231a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((pConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (pConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
1000231c:	683b      	ldr	r3, [r7, #0]
1000231e:	68db      	ldr	r3, [r3, #12]
10002320:	4a9a      	ldr	r2, [pc, #616]	; (1000258c <HAL_ADC_ConfigChannel+0x284>)
10002322:	4293      	cmp	r3, r2
      assert_param(IS_ADC2_DIFF_CHANNEL(pConfig->Channel));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
10002324:	687b      	ldr	r3, [r7, #4]
10002326:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
1000232a:	2b01      	cmp	r3, #1
1000232c:	d101      	bne.n	10002332 <HAL_ADC_ConfigChannel+0x2a>
1000232e:	2302      	movs	r3, #2
10002330:	e2d4      	b.n	100028dc <HAL_ADC_ConfigChannel+0x5d4>
10002332:	687b      	ldr	r3, [r7, #4]
10002334:	2201      	movs	r2, #1
10002336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
1000233a:	687b      	ldr	r3, [r7, #4]
1000233c:	681b      	ldr	r3, [r3, #0]
1000233e:	4618      	mov	r0, r3
10002340:	f7ff fcc2 	bl	10001cc8 <LL_ADC_REG_IsConversionOngoing>
10002344:	4603      	mov	r3, r0
10002346:	2b00      	cmp	r3, #0
10002348:	f040 82b9 	bne.w	100028be <HAL_ADC_ConfigChannel+0x5b6>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
1000234c:	683b      	ldr	r3, [r7, #0]
1000234e:	681b      	ldr	r3, [r3, #0]
10002350:	f3c3 0313 	ubfx	r3, r3, #0, #20
10002354:	2b00      	cmp	r3, #0
10002356:	d108      	bne.n	1000236a <HAL_ADC_ConfigChannel+0x62>
10002358:	683b      	ldr	r3, [r7, #0]
1000235a:	681b      	ldr	r3, [r3, #0]
1000235c:	0e9b      	lsrs	r3, r3, #26
1000235e:	f003 031f 	and.w	r3, r3, #31
10002362:	2201      	movs	r2, #1
10002364:	fa02 f303 	lsl.w	r3, r2, r3
10002368:	e016      	b.n	10002398 <HAL_ADC_ConfigChannel+0x90>
1000236a:	683b      	ldr	r3, [r7, #0]
1000236c:	681b      	ldr	r3, [r3, #0]
1000236e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
10002370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
10002372:	fa93 f3a3 	rbit	r3, r3
10002376:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
10002378:	6e3b      	ldr	r3, [r7, #96]	; 0x60
1000237a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
1000237c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
1000237e:	2b00      	cmp	r3, #0
10002380:	d101      	bne.n	10002386 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
10002382:	2320      	movs	r3, #32
10002384:	e003      	b.n	1000238e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
10002386:	6ebb      	ldr	r3, [r7, #104]	; 0x68
10002388:	fab3 f383 	clz	r3, r3
1000238c:	b2db      	uxtb	r3, r3
1000238e:	f003 031f 	and.w	r3, r3, #31
10002392:	2201      	movs	r2, #1
10002394:	fa02 f303 	lsl.w	r3, r2, r3
10002398:	687a      	ldr	r2, [r7, #4]
1000239a:	6812      	ldr	r2, [r2, #0]
1000239c:	69d1      	ldr	r1, [r2, #28]
1000239e:	687a      	ldr	r2, [r7, #4]
100023a0:	6812      	ldr	r2, [r2, #0]
100023a2:	430b      	orrs	r3, r1
100023a4:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
100023a6:	687b      	ldr	r3, [r7, #4]
100023a8:	6818      	ldr	r0, [r3, #0]
100023aa:	683b      	ldr	r3, [r7, #0]
100023ac:	6859      	ldr	r1, [r3, #4]
100023ae:	683b      	ldr	r3, [r7, #0]
100023b0:	681b      	ldr	r3, [r3, #0]
100023b2:	461a      	mov	r2, r3
100023b4:	f7ff fb41 	bl	10001a3a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
100023b8:	687b      	ldr	r3, [r7, #4]
100023ba:	681b      	ldr	r3, [r3, #0]
100023bc:	4618      	mov	r0, r3
100023be:	f7ff fc83 	bl	10001cc8 <LL_ADC_REG_IsConversionOngoing>
100023c2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
100023c4:	687b      	ldr	r3, [r7, #4]
100023c6:	681b      	ldr	r3, [r3, #0]
100023c8:	4618      	mov	r0, r3
100023ca:	f7ff fc90 	bl	10001cee <LL_ADC_INJ_IsConversionOngoing>
100023ce:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
100023d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
100023d2:	2b00      	cmp	r3, #0
100023d4:	f040 80a0 	bne.w	10002518 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
100023d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
100023da:	2b00      	cmp	r3, #0
100023dc:	f040 809c 	bne.w	10002518 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
100023e0:	687b      	ldr	r3, [r7, #4]
100023e2:	6818      	ldr	r0, [r3, #0]
100023e4:	683b      	ldr	r3, [r7, #0]
100023e6:	6819      	ldr	r1, [r3, #0]
100023e8:	683b      	ldr	r3, [r7, #0]
100023ea:	689b      	ldr	r3, [r3, #8]
100023ec:	461a      	mov	r2, r3
100023ee:	f7ff fb50 	bl	10001a92 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
100023f2:	687b      	ldr	r3, [r7, #4]
100023f4:	681b      	ldr	r3, [r3, #0]
100023f6:	68db      	ldr	r3, [r3, #12]
100023f8:	f003 0310 	and.w	r3, r3, #16
100023fc:	2b00      	cmp	r3, #0
100023fe:	d10b      	bne.n	10002418 <HAL_ADC_ConfigChannel+0x110>
10002400:	683b      	ldr	r3, [r7, #0]
10002402:	695a      	ldr	r2, [r3, #20]
10002404:	687b      	ldr	r3, [r7, #4]
10002406:	681b      	ldr	r3, [r3, #0]
10002408:	68db      	ldr	r3, [r3, #12]
1000240a:	089b      	lsrs	r3, r3, #2
1000240c:	f003 0307 	and.w	r3, r3, #7
10002410:	005b      	lsls	r3, r3, #1
10002412:	fa02 f303 	lsl.w	r3, r2, r3
10002416:	e00a      	b.n	1000242e <HAL_ADC_ConfigChannel+0x126>
10002418:	683b      	ldr	r3, [r7, #0]
1000241a:	695a      	ldr	r2, [r3, #20]
1000241c:	687b      	ldr	r3, [r7, #4]
1000241e:	681b      	ldr	r3, [r3, #0]
10002420:	68db      	ldr	r3, [r3, #12]
10002422:	089b      	lsrs	r3, r3, #2
10002424:	f003 0304 	and.w	r3, r3, #4
10002428:	005b      	lsls	r3, r3, #1
1000242a:	fa02 f303 	lsl.w	r3, r2, r3
1000242e:	673b      	str	r3, [r7, #112]	; 0x70

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
10002430:	683b      	ldr	r3, [r7, #0]
10002432:	691b      	ldr	r3, [r3, #16]
10002434:	2b04      	cmp	r3, #4
10002436:	d027      	beq.n	10002488 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
10002438:	687b      	ldr	r3, [r7, #4]
1000243a:	6818      	ldr	r0, [r3, #0]
1000243c:	683b      	ldr	r3, [r7, #0]
1000243e:	6919      	ldr	r1, [r3, #16]
10002440:	683b      	ldr	r3, [r7, #0]
10002442:	681a      	ldr	r2, [r3, #0]
10002444:	6f3b      	ldr	r3, [r7, #112]	; 0x70
10002446:	f7ff fa91 	bl	1000196c <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber, (pConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
1000244a:	687b      	ldr	r3, [r7, #4]
1000244c:	6818      	ldr	r0, [r3, #0]
1000244e:	683b      	ldr	r3, [r7, #0]
10002450:	6919      	ldr	r1, [r3, #16]
10002452:	683b      	ldr	r3, [r7, #0]
10002454:	7e5b      	ldrb	r3, [r3, #25]
10002456:	2b01      	cmp	r3, #1
10002458:	d102      	bne.n	10002460 <HAL_ADC_ConfigChannel+0x158>
1000245a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
1000245e:	e000      	b.n	10002462 <HAL_ADC_ConfigChannel+0x15a>
10002460:	2300      	movs	r3, #0
10002462:	461a      	mov	r2, r3
10002464:	f7ff fabb 	bl	100019de <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, pConfig->OffsetNumber, (pConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
10002468:	687b      	ldr	r3, [r7, #4]
1000246a:	6818      	ldr	r0, [r3, #0]
1000246c:	683b      	ldr	r3, [r7, #0]
1000246e:	6919      	ldr	r1, [r3, #16]
10002470:	683b      	ldr	r3, [r7, #0]
10002472:	7e1b      	ldrb	r3, [r3, #24]
10002474:	2b01      	cmp	r3, #1
10002476:	d102      	bne.n	1000247e <HAL_ADC_ConfigChannel+0x176>
10002478:	f44f 6300 	mov.w	r3, #2048	; 0x800
1000247c:	e000      	b.n	10002480 <HAL_ADC_ConfigChannel+0x178>
1000247e:	2300      	movs	r3, #0
10002480:	461a      	mov	r2, r3
10002482:	f7ff fa93 	bl	100019ac <LL_ADC_SetDataRightShift>
10002486:	e047      	b.n	10002518 <HAL_ADC_ConfigChannel+0x210>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
10002488:	687b      	ldr	r3, [r7, #4]
1000248a:	681b      	ldr	r3, [r3, #0]
1000248c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
1000248e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
10002492:	683b      	ldr	r3, [r7, #0]
10002494:	681b      	ldr	r3, [r3, #0]
10002496:	069b      	lsls	r3, r3, #26
10002498:	429a      	cmp	r2, r3
1000249a:	d107      	bne.n	100024ac <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
1000249c:	687b      	ldr	r3, [r7, #4]
1000249e:	681b      	ldr	r3, [r3, #0]
100024a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
100024a2:	687b      	ldr	r3, [r7, #4]
100024a4:	681b      	ldr	r3, [r3, #0]
100024a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
100024aa:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
100024ac:	687b      	ldr	r3, [r7, #4]
100024ae:	681b      	ldr	r3, [r3, #0]
100024b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
100024b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
100024b6:	683b      	ldr	r3, [r7, #0]
100024b8:	681b      	ldr	r3, [r3, #0]
100024ba:	069b      	lsls	r3, r3, #26
100024bc:	429a      	cmp	r2, r3
100024be:	d107      	bne.n	100024d0 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
100024c0:	687b      	ldr	r3, [r7, #4]
100024c2:	681b      	ldr	r3, [r3, #0]
100024c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
100024c6:	687b      	ldr	r3, [r7, #4]
100024c8:	681b      	ldr	r3, [r3, #0]
100024ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
100024ce:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
100024d0:	687b      	ldr	r3, [r7, #4]
100024d2:	681b      	ldr	r3, [r3, #0]
100024d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
100024d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
100024da:	683b      	ldr	r3, [r7, #0]
100024dc:	681b      	ldr	r3, [r3, #0]
100024de:	069b      	lsls	r3, r3, #26
100024e0:	429a      	cmp	r2, r3
100024e2:	d107      	bne.n	100024f4 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
100024e4:	687b      	ldr	r3, [r7, #4]
100024e6:	681b      	ldr	r3, [r3, #0]
100024e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
100024ea:	687b      	ldr	r3, [r7, #4]
100024ec:	681b      	ldr	r3, [r3, #0]
100024ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
100024f2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
100024f4:	687b      	ldr	r3, [r7, #4]
100024f6:	681b      	ldr	r3, [r3, #0]
100024f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
100024fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
100024fe:	683b      	ldr	r3, [r7, #0]
10002500:	681b      	ldr	r3, [r3, #0]
10002502:	069b      	lsls	r3, r3, #26
10002504:	429a      	cmp	r2, r3
10002506:	d107      	bne.n	10002518 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
10002508:	687b      	ldr	r3, [r7, #4]
1000250a:	681b      	ldr	r3, [r3, #0]
1000250c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
1000250e:	687b      	ldr	r3, [r7, #4]
10002510:	681b      	ldr	r3, [r3, #0]
10002512:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
10002516:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor/VddCore        */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
10002518:	687b      	ldr	r3, [r7, #4]
1000251a:	681b      	ldr	r3, [r3, #0]
1000251c:	4618      	mov	r0, r3
1000251e:	f7ff fb99 	bl	10001c54 <LL_ADC_IsEnabled>
10002522:	4603      	mov	r3, r0
10002524:	2b00      	cmp	r3, #0
10002526:	f040 81d3 	bne.w	100028d0 <HAL_ADC_ConfigChannel+0x5c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
1000252a:	687b      	ldr	r3, [r7, #4]
1000252c:	6818      	ldr	r0, [r3, #0]
1000252e:	683b      	ldr	r3, [r7, #0]
10002530:	6819      	ldr	r1, [r3, #0]
10002532:	683b      	ldr	r3, [r7, #0]
10002534:	68db      	ldr	r3, [r3, #12]
10002536:	461a      	mov	r2, r3
10002538:	f7ff fad6 	bl	10001ae8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
1000253c:	683b      	ldr	r3, [r7, #0]
1000253e:	68db      	ldr	r3, [r3, #12]
10002540:	4a12      	ldr	r2, [pc, #72]	; (1000258c <HAL_ADC_ConfigChannel+0x284>)
10002542:	4293      	cmp	r3, r2
10002544:	f040 8130 	bne.w	100027a8 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
10002548:	687b      	ldr	r3, [r7, #4]
1000254a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) + 1UL) & 0x1FUL)),
1000254c:	683b      	ldr	r3, [r7, #0]
1000254e:	681b      	ldr	r3, [r3, #0]
10002550:	f3c3 0313 	ubfx	r3, r3, #0, #20
10002554:	2b00      	cmp	r3, #0
10002556:	d10b      	bne.n	10002570 <HAL_ADC_ConfigChannel+0x268>
10002558:	683b      	ldr	r3, [r7, #0]
1000255a:	681b      	ldr	r3, [r3, #0]
1000255c:	0e9b      	lsrs	r3, r3, #26
1000255e:	3301      	adds	r3, #1
10002560:	f003 031f 	and.w	r3, r3, #31
10002564:	2b09      	cmp	r3, #9
10002566:	bf94      	ite	ls
10002568:	2301      	movls	r3, #1
1000256a:	2300      	movhi	r3, #0
1000256c:	b2db      	uxtb	r3, r3
1000256e:	e01b      	b.n	100025a8 <HAL_ADC_ConfigChannel+0x2a0>
10002570:	683b      	ldr	r3, [r7, #0]
10002572:	681b      	ldr	r3, [r3, #0]
10002574:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
10002576:	6dbb      	ldr	r3, [r7, #88]	; 0x58
10002578:	fa93 f3a3 	rbit	r3, r3
1000257c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
1000257e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10002580:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
10002582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
10002584:	2b00      	cmp	r3, #0
10002586:	d103      	bne.n	10002590 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
10002588:	2320      	movs	r3, #32
1000258a:	e005      	b.n	10002598 <HAL_ADC_ConfigChannel+0x290>
1000258c:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
10002590:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
10002592:	fab3 f383 	clz	r3, r3
10002596:	b2db      	uxtb	r3, r3
10002598:	3301      	adds	r3, #1
1000259a:	f003 031f 	and.w	r3, r3, #31
1000259e:	2b09      	cmp	r3, #9
100025a0:	bf94      	ite	ls
100025a2:	2301      	movls	r3, #1
100025a4:	2300      	movhi	r3, #0
100025a6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
100025a8:	2b00      	cmp	r3, #0
100025aa:	d079      	beq.n	100026a0 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) + 1UL) & 0x1FUL)),
100025ac:	683b      	ldr	r3, [r7, #0]
100025ae:	681b      	ldr	r3, [r3, #0]
100025b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
100025b4:	2b00      	cmp	r3, #0
100025b6:	d107      	bne.n	100025c8 <HAL_ADC_ConfigChannel+0x2c0>
100025b8:	683b      	ldr	r3, [r7, #0]
100025ba:	681b      	ldr	r3, [r3, #0]
100025bc:	0e9b      	lsrs	r3, r3, #26
100025be:	3301      	adds	r3, #1
100025c0:	069b      	lsls	r3, r3, #26
100025c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
100025c6:	e015      	b.n	100025f4 <HAL_ADC_ConfigChannel+0x2ec>
100025c8:	683b      	ldr	r3, [r7, #0]
100025ca:	681b      	ldr	r3, [r3, #0]
100025cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
100025ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
100025d0:	fa93 f3a3 	rbit	r3, r3
100025d4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
100025d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
100025d8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
100025da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
100025dc:	2b00      	cmp	r3, #0
100025de:	d101      	bne.n	100025e4 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
100025e0:	2320      	movs	r3, #32
100025e2:	e003      	b.n	100025ec <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
100025e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
100025e6:	fab3 f383 	clz	r3, r3
100025ea:	b2db      	uxtb	r3, r3
100025ec:	3301      	adds	r3, #1
100025ee:	069b      	lsls	r3, r3, #26
100025f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
100025f4:	683b      	ldr	r3, [r7, #0]
100025f6:	681b      	ldr	r3, [r3, #0]
100025f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
100025fc:	2b00      	cmp	r3, #0
100025fe:	d109      	bne.n	10002614 <HAL_ADC_ConfigChannel+0x30c>
10002600:	683b      	ldr	r3, [r7, #0]
10002602:	681b      	ldr	r3, [r3, #0]
10002604:	0e9b      	lsrs	r3, r3, #26
10002606:	3301      	adds	r3, #1
10002608:	f003 031f 	and.w	r3, r3, #31
1000260c:	2101      	movs	r1, #1
1000260e:	fa01 f303 	lsl.w	r3, r1, r3
10002612:	e017      	b.n	10002644 <HAL_ADC_ConfigChannel+0x33c>
10002614:	683b      	ldr	r3, [r7, #0]
10002616:	681b      	ldr	r3, [r3, #0]
10002618:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
1000261a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000261c:	fa93 f3a3 	rbit	r3, r3
10002620:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
10002622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10002624:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
10002626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10002628:	2b00      	cmp	r3, #0
1000262a:	d101      	bne.n	10002630 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
1000262c:	2320      	movs	r3, #32
1000262e:	e003      	b.n	10002638 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
10002630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10002632:	fab3 f383 	clz	r3, r3
10002636:	b2db      	uxtb	r3, r3
10002638:	3301      	adds	r3, #1
1000263a:	f003 031f 	and.w	r3, r3, #31
1000263e:	2101      	movs	r1, #1
10002640:	fa01 f303 	lsl.w	r3, r1, r3
10002644:	ea42 0103 	orr.w	r1, r2, r3
10002648:	683b      	ldr	r3, [r7, #0]
1000264a:	681b      	ldr	r3, [r3, #0]
1000264c:	f3c3 0313 	ubfx	r3, r3, #0, #20
10002650:	2b00      	cmp	r3, #0
10002652:	d10a      	bne.n	1000266a <HAL_ADC_ConfigChannel+0x362>
10002654:	683b      	ldr	r3, [r7, #0]
10002656:	681b      	ldr	r3, [r3, #0]
10002658:	0e9b      	lsrs	r3, r3, #26
1000265a:	3301      	adds	r3, #1
1000265c:	f003 021f 	and.w	r2, r3, #31
10002660:	4613      	mov	r3, r2
10002662:	005b      	lsls	r3, r3, #1
10002664:	4413      	add	r3, r2
10002666:	051b      	lsls	r3, r3, #20
10002668:	e018      	b.n	1000269c <HAL_ADC_ConfigChannel+0x394>
1000266a:	683b      	ldr	r3, [r7, #0]
1000266c:	681b      	ldr	r3, [r3, #0]
1000266e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
10002670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10002672:	fa93 f3a3 	rbit	r3, r3
10002676:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
10002678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000267a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
1000267c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000267e:	2b00      	cmp	r3, #0
10002680:	d101      	bne.n	10002686 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
10002682:	2320      	movs	r3, #32
10002684:	e003      	b.n	1000268e <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
10002686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10002688:	fab3 f383 	clz	r3, r3
1000268c:	b2db      	uxtb	r3, r3
1000268e:	3301      	adds	r3, #1
10002690:	f003 021f 	and.w	r2, r3, #31
10002694:	4613      	mov	r3, r2
10002696:	005b      	lsls	r3, r3, #1
10002698:	4413      	add	r3, r2
1000269a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
1000269c:	430b      	orrs	r3, r1
1000269e:	e07e      	b.n	1000279e <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) + 1UL) & 0x1FUL)),
100026a0:	683b      	ldr	r3, [r7, #0]
100026a2:	681b      	ldr	r3, [r3, #0]
100026a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
100026a8:	2b00      	cmp	r3, #0
100026aa:	d107      	bne.n	100026bc <HAL_ADC_ConfigChannel+0x3b4>
100026ac:	683b      	ldr	r3, [r7, #0]
100026ae:	681b      	ldr	r3, [r3, #0]
100026b0:	0e9b      	lsrs	r3, r3, #26
100026b2:	3301      	adds	r3, #1
100026b4:	069b      	lsls	r3, r3, #26
100026b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
100026ba:	e015      	b.n	100026e8 <HAL_ADC_ConfigChannel+0x3e0>
100026bc:	683b      	ldr	r3, [r7, #0]
100026be:	681b      	ldr	r3, [r3, #0]
100026c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
100026c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
100026c4:	fa93 f3a3 	rbit	r3, r3
100026c8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
100026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
100026ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100026d0:	2b00      	cmp	r3, #0
100026d2:	d101      	bne.n	100026d8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
100026d4:	2320      	movs	r3, #32
100026d6:	e003      	b.n	100026e0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
100026d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100026da:	fab3 f383 	clz	r3, r3
100026de:	b2db      	uxtb	r3, r3
100026e0:	3301      	adds	r3, #1
100026e2:	069b      	lsls	r3, r3, #26
100026e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
100026e8:	683b      	ldr	r3, [r7, #0]
100026ea:	681b      	ldr	r3, [r3, #0]
100026ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
100026f0:	2b00      	cmp	r3, #0
100026f2:	d109      	bne.n	10002708 <HAL_ADC_ConfigChannel+0x400>
100026f4:	683b      	ldr	r3, [r7, #0]
100026f6:	681b      	ldr	r3, [r3, #0]
100026f8:	0e9b      	lsrs	r3, r3, #26
100026fa:	3301      	adds	r3, #1
100026fc:	f003 031f 	and.w	r3, r3, #31
10002700:	2101      	movs	r1, #1
10002702:	fa01 f303 	lsl.w	r3, r1, r3
10002706:	e017      	b.n	10002738 <HAL_ADC_ConfigChannel+0x430>
10002708:	683b      	ldr	r3, [r7, #0]
1000270a:	681b      	ldr	r3, [r3, #0]
1000270c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
1000270e:	69fb      	ldr	r3, [r7, #28]
10002710:	fa93 f3a3 	rbit	r3, r3
10002714:	61bb      	str	r3, [r7, #24]
  return result;
10002716:	69bb      	ldr	r3, [r7, #24]
10002718:	623b      	str	r3, [r7, #32]
  if (value == 0U)
1000271a:	6a3b      	ldr	r3, [r7, #32]
1000271c:	2b00      	cmp	r3, #0
1000271e:	d101      	bne.n	10002724 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
10002720:	2320      	movs	r3, #32
10002722:	e003      	b.n	1000272c <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
10002724:	6a3b      	ldr	r3, [r7, #32]
10002726:	fab3 f383 	clz	r3, r3
1000272a:	b2db      	uxtb	r3, r3
1000272c:	3301      	adds	r3, #1
1000272e:	f003 031f 	and.w	r3, r3, #31
10002732:	2101      	movs	r1, #1
10002734:	fa01 f303 	lsl.w	r3, r1, r3
10002738:	ea42 0103 	orr.w	r1, r2, r3
1000273c:	683b      	ldr	r3, [r7, #0]
1000273e:	681b      	ldr	r3, [r3, #0]
10002740:	f3c3 0313 	ubfx	r3, r3, #0, #20
10002744:	2b00      	cmp	r3, #0
10002746:	d10d      	bne.n	10002764 <HAL_ADC_ConfigChannel+0x45c>
10002748:	683b      	ldr	r3, [r7, #0]
1000274a:	681b      	ldr	r3, [r3, #0]
1000274c:	0e9b      	lsrs	r3, r3, #26
1000274e:	3301      	adds	r3, #1
10002750:	f003 021f 	and.w	r2, r3, #31
10002754:	4613      	mov	r3, r2
10002756:	005b      	lsls	r3, r3, #1
10002758:	4413      	add	r3, r2
1000275a:	3b1e      	subs	r3, #30
1000275c:	051b      	lsls	r3, r3, #20
1000275e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
10002762:	e01b      	b.n	1000279c <HAL_ADC_ConfigChannel+0x494>
10002764:	683b      	ldr	r3, [r7, #0]
10002766:	681b      	ldr	r3, [r3, #0]
10002768:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
1000276a:	693b      	ldr	r3, [r7, #16]
1000276c:	fa93 f3a3 	rbit	r3, r3
10002770:	60fb      	str	r3, [r7, #12]
  return result;
10002772:	68fb      	ldr	r3, [r7, #12]
10002774:	617b      	str	r3, [r7, #20]
  if (value == 0U)
10002776:	697b      	ldr	r3, [r7, #20]
10002778:	2b00      	cmp	r3, #0
1000277a:	d101      	bne.n	10002780 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
1000277c:	2320      	movs	r3, #32
1000277e:	e003      	b.n	10002788 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
10002780:	697b      	ldr	r3, [r7, #20]
10002782:	fab3 f383 	clz	r3, r3
10002786:	b2db      	uxtb	r3, r3
10002788:	3301      	adds	r3, #1
1000278a:	f003 021f 	and.w	r2, r3, #31
1000278e:	4613      	mov	r3, r2
10002790:	005b      	lsls	r3, r3, #1
10002792:	4413      	add	r3, r2
10002794:	3b1e      	subs	r3, #30
10002796:	051b      	lsls	r3, r3, #20
10002798:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
1000279c:	430b      	orrs	r3, r1
1000279e:	683a      	ldr	r2, [r7, #0]
100027a0:	6892      	ldr	r2, [r2, #8]
100027a2:	4619      	mov	r1, r3
100027a4:	f7ff f975 	bl	10001a92 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
100027a8:	683b      	ldr	r3, [r7, #0]
100027aa:	681b      	ldr	r3, [r3, #0]
100027ac:	2b00      	cmp	r3, #0
100027ae:	f280 808f 	bge.w	100028d0 <HAL_ADC_ConfigChannel+0x5c8>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
100027b2:	484c      	ldr	r0, [pc, #304]	; (100028e4 <HAL_ADC_ConfigChannel+0x5dc>)
100027b4:	f7ff f8cc 	bl	10001950 <LL_ADC_GetCommonPathInternalCh>
100027b8:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
100027ba:	484b      	ldr	r0, [pc, #300]	; (100028e8 <HAL_ADC_ConfigChannel+0x5e0>)
100027bc:	f7ff fa4a 	bl	10001c54 <LL_ADC_IsEnabled>
100027c0:	4604      	mov	r4, r0
100027c2:	484a      	ldr	r0, [pc, #296]	; (100028ec <HAL_ADC_ConfigChannel+0x5e4>)
100027c4:	f7ff fa46 	bl	10001c54 <LL_ADC_IsEnabled>
100027c8:	4603      	mov	r3, r0
100027ca:	4323      	orrs	r3, r4
100027cc:	2b00      	cmp	r3, #0
100027ce:	d16c      	bne.n	100028aa <HAL_ADC_ConfigChannel+0x5a2>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
100027d0:	683b      	ldr	r3, [r7, #0]
100027d2:	681b      	ldr	r3, [r3, #0]
100027d4:	4a46      	ldr	r2, [pc, #280]	; (100028f0 <HAL_ADC_ConfigChannel+0x5e8>)
100027d6:	4293      	cmp	r3, r2
100027d8:	d122      	bne.n	10002820 <HAL_ADC_ConfigChannel+0x518>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
100027da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
100027dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
100027e0:	2b00      	cmp	r3, #0
100027e2:	d11d      	bne.n	10002820 <HAL_ADC_ConfigChannel+0x518>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
100027e4:	687b      	ldr	r3, [r7, #4]
100027e6:	681b      	ldr	r3, [r3, #0]
100027e8:	4a40      	ldr	r2, [pc, #256]	; (100028ec <HAL_ADC_ConfigChannel+0x5e4>)
100027ea:	4293      	cmp	r3, r2
100027ec:	d170      	bne.n	100028d0 <HAL_ADC_ConfigChannel+0x5c8>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
100027ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
100027f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
100027f4:	4619      	mov	r1, r3
100027f6:	483b      	ldr	r0, [pc, #236]	; (100028e4 <HAL_ADC_ConfigChannel+0x5dc>)
100027f8:	f7ff f888 	bl	1000190c <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
100027fc:	4b3d      	ldr	r3, [pc, #244]	; (100028f4 <HAL_ADC_ConfigChannel+0x5ec>)
100027fe:	681b      	ldr	r3, [r3, #0]
10002800:	099b      	lsrs	r3, r3, #6
10002802:	4a3d      	ldr	r2, [pc, #244]	; (100028f8 <HAL_ADC_ConfigChannel+0x5f0>)
10002804:	fba2 2303 	umull	r2, r3, r2, r3
10002808:	099b      	lsrs	r3, r3, #6
1000280a:	3301      	adds	r3, #1
1000280c:	005b      	lsls	r3, r3, #1
1000280e:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
10002810:	e002      	b.n	10002818 <HAL_ADC_ConfigChannel+0x510>
              {
                wait_loop_index--;
10002812:	68bb      	ldr	r3, [r7, #8]
10002814:	3b01      	subs	r3, #1
10002816:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
10002818:	68bb      	ldr	r3, [r7, #8]
1000281a:	2b00      	cmp	r3, #0
1000281c:	d1f9      	bne.n	10002812 <HAL_ADC_ConfigChannel+0x50a>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
1000281e:	e057      	b.n	100028d0 <HAL_ADC_ConfigChannel+0x5c8>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
10002820:	683b      	ldr	r3, [r7, #0]
10002822:	681b      	ldr	r3, [r3, #0]
10002824:	4a35      	ldr	r2, [pc, #212]	; (100028fc <HAL_ADC_ConfigChannel+0x5f4>)
10002826:	4293      	cmp	r3, r2
10002828:	d111      	bne.n	1000284e <HAL_ADC_ConfigChannel+0x546>
1000282a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000282c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
10002830:	2b00      	cmp	r3, #0
10002832:	d10c      	bne.n	1000284e <HAL_ADC_ConfigChannel+0x546>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
10002834:	687b      	ldr	r3, [r7, #4]
10002836:	681b      	ldr	r3, [r3, #0]
10002838:	4a2c      	ldr	r2, [pc, #176]	; (100028ec <HAL_ADC_ConfigChannel+0x5e4>)
1000283a:	4293      	cmp	r3, r2
1000283c:	d148      	bne.n	100028d0 <HAL_ADC_ConfigChannel+0x5c8>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
1000283e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10002840:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
10002844:	4619      	mov	r1, r3
10002846:	4827      	ldr	r0, [pc, #156]	; (100028e4 <HAL_ADC_ConfigChannel+0x5dc>)
10002848:	f7ff f860 	bl	1000190c <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
1000284c:	e040      	b.n	100028d0 <HAL_ADC_ConfigChannel+0x5c8>
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
1000284e:	683b      	ldr	r3, [r7, #0]
10002850:	681b      	ldr	r3, [r3, #0]
10002852:	4a2b      	ldr	r2, [pc, #172]	; (10002900 <HAL_ADC_ConfigChannel+0x5f8>)
10002854:	4293      	cmp	r3, r2
10002856:	d111      	bne.n	1000287c <HAL_ADC_ConfigChannel+0x574>
10002858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000285a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
1000285e:	2b00      	cmp	r3, #0
10002860:	d10c      	bne.n	1000287c <HAL_ADC_ConfigChannel+0x574>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
10002862:	687b      	ldr	r3, [r7, #4]
10002864:	681b      	ldr	r3, [r3, #0]
10002866:	4a21      	ldr	r2, [pc, #132]	; (100028ec <HAL_ADC_ConfigChannel+0x5e4>)
10002868:	4293      	cmp	r3, r2
1000286a:	d131      	bne.n	100028d0 <HAL_ADC_ConfigChannel+0x5c8>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
1000286c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000286e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
10002872:	4619      	mov	r1, r3
10002874:	481b      	ldr	r0, [pc, #108]	; (100028e4 <HAL_ADC_ConfigChannel+0x5dc>)
10002876:	f7ff f849 	bl	1000190c <LL_ADC_SetCommonPathInternalCh>
            if (ADC_VREFINT_INSTANCE(hadc))
1000287a:	e029      	b.n	100028d0 <HAL_ADC_ConfigChannel+0x5c8>
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VDDCORE) == 0UL))
1000287c:	683b      	ldr	r3, [r7, #0]
1000287e:	681b      	ldr	r3, [r3, #0]
10002880:	4a20      	ldr	r2, [pc, #128]	; (10002904 <HAL_ADC_ConfigChannel+0x5fc>)
10002882:	4293      	cmp	r3, r2
10002884:	d124      	bne.n	100028d0 <HAL_ADC_ConfigChannel+0x5c8>
10002886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10002888:	f003 0301 	and.w	r3, r3, #1
1000288c:	2b00      	cmp	r3, #0
1000288e:	d11f      	bne.n	100028d0 <HAL_ADC_ConfigChannel+0x5c8>
          {
            if (ADC_VDDCORE_INSTANCE(hadc))
10002890:	687b      	ldr	r3, [r7, #4]
10002892:	681b      	ldr	r3, [r3, #0]
10002894:	4a15      	ldr	r2, [pc, #84]	; (100028ec <HAL_ADC_ConfigChannel+0x5e4>)
10002896:	4293      	cmp	r3, r2
10002898:	d11a      	bne.n	100028d0 <HAL_ADC_ConfigChannel+0x5c8>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VDDCORE | tmp_config_internal_channel);
1000289a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000289c:	f043 0301 	orr.w	r3, r3, #1
100028a0:	4619      	mov	r1, r3
100028a2:	4810      	ldr	r0, [pc, #64]	; (100028e4 <HAL_ADC_ConfigChannel+0x5dc>)
100028a4:	f7ff f832 	bl	1000190c <LL_ADC_SetCommonPathInternalCh>
100028a8:	e012      	b.n	100028d0 <HAL_ADC_ConfigChannel+0x5c8>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
100028aa:	687b      	ldr	r3, [r7, #4]
100028ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100028ae:	f043 0220 	orr.w	r2, r3, #32
100028b2:	687b      	ldr	r3, [r7, #4]
100028b4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
100028b6:	2301      	movs	r3, #1
100028b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
100028bc:	e008      	b.n	100028d0 <HAL_ADC_ConfigChannel+0x5c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
100028be:	687b      	ldr	r3, [r7, #4]
100028c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100028c2:	f043 0220 	orr.w	r2, r3, #32
100028c6:	687b      	ldr	r3, [r7, #4]
100028c8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
100028ca:	2301      	movs	r3, #1
100028cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  __HAL_UNLOCK(hadc);
100028d0:	687b      	ldr	r3, [r7, #4]
100028d2:	2200      	movs	r2, #0
100028d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return tmp_hal_status;
100028d8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
100028dc:	4618      	mov	r0, r3
100028de:	3784      	adds	r7, #132	; 0x84
100028e0:	46bd      	mov	sp, r7
100028e2:	bd90      	pop	{r4, r7, pc}
100028e4:	48003300 	.word	0x48003300
100028e8:	48003000 	.word	0x48003000
100028ec:	48003100 	.word	0x48003100
100028f0:	b2601000 	.word	0xb2601000
100028f4:	10020000 	.word	0x10020000
100028f8:	053e2d63 	.word	0x053e2d63
100028fc:	bef08000 	.word	0xbef08000
10002900:	b6902000 	.word	0xb6902000
10002904:	bac04000 	.word	0xbac04000

10002908 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
10002908:	b580      	push	{r7, lr}
1000290a:	b084      	sub	sp, #16
1000290c:	af00      	add	r7, sp, #0
1000290e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
10002910:	687b      	ldr	r3, [r7, #4]
10002912:	681b      	ldr	r3, [r3, #0]
10002914:	4618      	mov	r0, r3
10002916:	f7ff f99d 	bl	10001c54 <LL_ADC_IsEnabled>
1000291a:	4603      	mov	r3, r0
1000291c:	2b00      	cmp	r3, #0
1000291e:	d161      	bne.n	100029e4 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
10002920:	687b      	ldr	r3, [r7, #4]
10002922:	681b      	ldr	r3, [r3, #0]
10002924:	689a      	ldr	r2, [r3, #8]
10002926:	4b32      	ldr	r3, [pc, #200]	; (100029f0 <ADC_Enable+0xe8>)
10002928:	4013      	ands	r3, r2
1000292a:	2b00      	cmp	r3, #0
1000292c:	d00d      	beq.n	1000294a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1000292e:	687b      	ldr	r3, [r7, #4]
10002930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002932:	f043 0210 	orr.w	r2, r3, #16
10002936:	687b      	ldr	r3, [r7, #4]
10002938:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1000293a:	687b      	ldr	r3, [r7, #4]
1000293c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
1000293e:	f043 0201 	orr.w	r2, r3, #1
10002942:	687b      	ldr	r3, [r7, #4]
10002944:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
10002946:	2301      	movs	r3, #1
10002948:	e04d      	b.n	100029e6 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
1000294a:	687b      	ldr	r3, [r7, #4]
1000294c:	681b      	ldr	r3, [r3, #0]
1000294e:	4618      	mov	r0, r3
10002950:	f7ff f958 	bl	10001c04 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
10002954:	f7fe ff48 	bl	100017e8 <HAL_GetTick>
10002958:	60f8      	str	r0, [r7, #12]

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
1000295a:	4826      	ldr	r0, [pc, #152]	; (100029f4 <ADC_Enable+0xec>)
1000295c:	f7ff f8e8 	bl	10001b30 <LL_ADC_GetMultimode>
10002960:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
10002962:	687b      	ldr	r3, [r7, #4]
10002964:	681b      	ldr	r3, [r3, #0]
10002966:	4a24      	ldr	r2, [pc, #144]	; (100029f8 <ADC_Enable+0xf0>)
10002968:	4293      	cmp	r3, r2
1000296a:	d002      	beq.n	10002972 <ADC_Enable+0x6a>
1000296c:	687b      	ldr	r3, [r7, #4]
1000296e:	681b      	ldr	r3, [r3, #0]
10002970:	e000      	b.n	10002974 <ADC_Enable+0x6c>
10002972:	4b22      	ldr	r3, [pc, #136]	; (100029fc <ADC_Enable+0xf4>)
10002974:	687a      	ldr	r2, [r7, #4]
10002976:	6812      	ldr	r2, [r2, #0]
10002978:	4293      	cmp	r3, r2
1000297a:	d02c      	beq.n	100029d6 <ADC_Enable+0xce>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
1000297c:	68bb      	ldr	r3, [r7, #8]
1000297e:	2b00      	cmp	r3, #0
10002980:	d130      	bne.n	100029e4 <ADC_Enable+0xdc>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
10002982:	e028      	b.n	100029d6 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
10002984:	687b      	ldr	r3, [r7, #4]
10002986:	681b      	ldr	r3, [r3, #0]
10002988:	4618      	mov	r0, r3
1000298a:	f7ff f963 	bl	10001c54 <LL_ADC_IsEnabled>
1000298e:	4603      	mov	r3, r0
10002990:	2b00      	cmp	r3, #0
10002992:	d104      	bne.n	1000299e <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
10002994:	687b      	ldr	r3, [r7, #4]
10002996:	681b      	ldr	r3, [r3, #0]
10002998:	4618      	mov	r0, r3
1000299a:	f7ff f933 	bl	10001c04 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
1000299e:	f7fe ff23 	bl	100017e8 <HAL_GetTick>
100029a2:	4602      	mov	r2, r0
100029a4:	68fb      	ldr	r3, [r7, #12]
100029a6:	1ad3      	subs	r3, r2, r3
100029a8:	2b02      	cmp	r3, #2
100029aa:	d914      	bls.n	100029d6 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
100029ac:	687b      	ldr	r3, [r7, #4]
100029ae:	681b      	ldr	r3, [r3, #0]
100029b0:	681b      	ldr	r3, [r3, #0]
100029b2:	f003 0301 	and.w	r3, r3, #1
100029b6:	2b01      	cmp	r3, #1
100029b8:	d00d      	beq.n	100029d6 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
100029ba:	687b      	ldr	r3, [r7, #4]
100029bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100029be:	f043 0210 	orr.w	r2, r3, #16
100029c2:	687b      	ldr	r3, [r7, #4]
100029c4:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
100029c6:	687b      	ldr	r3, [r7, #4]
100029c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
100029ca:	f043 0201 	orr.w	r2, r3, #1
100029ce:	687b      	ldr	r3, [r7, #4]
100029d0:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
100029d2:	2301      	movs	r3, #1
100029d4:	e007      	b.n	100029e6 <ADC_Enable+0xde>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
100029d6:	687b      	ldr	r3, [r7, #4]
100029d8:	681b      	ldr	r3, [r3, #0]
100029da:	681b      	ldr	r3, [r3, #0]
100029dc:	f003 0301 	and.w	r3, r3, #1
100029e0:	2b01      	cmp	r3, #1
100029e2:	d1cf      	bne.n	10002984 <ADC_Enable+0x7c>
    }
#endif
  }

  /* Return HAL status */
  return HAL_OK;
100029e4:	2300      	movs	r3, #0
}
100029e6:	4618      	mov	r0, r3
100029e8:	3710      	adds	r7, #16
100029ea:	46bd      	mov	sp, r7
100029ec:	bd80      	pop	{r7, pc}
100029ee:	bf00      	nop
100029f0:	8000003f 	.word	0x8000003f
100029f4:	48003300 	.word	0x48003300
100029f8:	48003100 	.word	0x48003100
100029fc:	48003000 	.word	0x48003000

10002a00 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
10002a00:	b580      	push	{r7, lr}
10002a02:	b084      	sub	sp, #16
10002a04:	af00      	add	r7, sp, #0
10002a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
10002a08:	687b      	ldr	r3, [r7, #4]
10002a0a:	681b      	ldr	r3, [r3, #0]
10002a0c:	4618      	mov	r0, r3
10002a0e:	f7ff f934 	bl	10001c7a <LL_ADC_IsDisableOngoing>
10002a12:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
10002a14:	687b      	ldr	r3, [r7, #4]
10002a16:	681b      	ldr	r3, [r3, #0]
10002a18:	4618      	mov	r0, r3
10002a1a:	f7ff f91b 	bl	10001c54 <LL_ADC_IsEnabled>
10002a1e:	4603      	mov	r3, r0
10002a20:	2b00      	cmp	r3, #0
10002a22:	d047      	beq.n	10002ab4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
10002a24:	68fb      	ldr	r3, [r7, #12]
10002a26:	2b00      	cmp	r3, #0
10002a28:	d144      	bne.n	10002ab4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
10002a2a:	687b      	ldr	r3, [r7, #4]
10002a2c:	681b      	ldr	r3, [r3, #0]
10002a2e:	689b      	ldr	r3, [r3, #8]
10002a30:	f003 030d 	and.w	r3, r3, #13
10002a34:	2b01      	cmp	r3, #1
10002a36:	d10c      	bne.n	10002a52 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
10002a38:	687b      	ldr	r3, [r7, #4]
10002a3a:	681b      	ldr	r3, [r3, #0]
10002a3c:	4618      	mov	r0, r3
10002a3e:	f7ff f8f5 	bl	10001c2c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
10002a42:	687b      	ldr	r3, [r7, #4]
10002a44:	681b      	ldr	r3, [r3, #0]
10002a46:	2203      	movs	r2, #3
10002a48:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
10002a4a:	f7fe fecd 	bl	100017e8 <HAL_GetTick>
10002a4e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
10002a50:	e029      	b.n	10002aa6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10002a52:	687b      	ldr	r3, [r7, #4]
10002a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002a56:	f043 0210 	orr.w	r2, r3, #16
10002a5a:	687b      	ldr	r3, [r7, #4]
10002a5c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
10002a5e:	687b      	ldr	r3, [r7, #4]
10002a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10002a62:	f043 0201 	orr.w	r2, r3, #1
10002a66:	687b      	ldr	r3, [r7, #4]
10002a68:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
10002a6a:	2301      	movs	r3, #1
10002a6c:	e023      	b.n	10002ab6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
10002a6e:	f7fe febb 	bl	100017e8 <HAL_GetTick>
10002a72:	4602      	mov	r2, r0
10002a74:	68bb      	ldr	r3, [r7, #8]
10002a76:	1ad3      	subs	r3, r2, r3
10002a78:	2b02      	cmp	r3, #2
10002a7a:	d914      	bls.n	10002aa6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
10002a7c:	687b      	ldr	r3, [r7, #4]
10002a7e:	681b      	ldr	r3, [r3, #0]
10002a80:	689b      	ldr	r3, [r3, #8]
10002a82:	f003 0301 	and.w	r3, r3, #1
10002a86:	2b00      	cmp	r3, #0
10002a88:	d00d      	beq.n	10002aa6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10002a8a:	687b      	ldr	r3, [r7, #4]
10002a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002a8e:	f043 0210 	orr.w	r2, r3, #16
10002a92:	687b      	ldr	r3, [r7, #4]
10002a94:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
10002a96:	687b      	ldr	r3, [r7, #4]
10002a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10002a9a:	f043 0201 	orr.w	r2, r3, #1
10002a9e:	687b      	ldr	r3, [r7, #4]
10002aa0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
10002aa2:	2301      	movs	r3, #1
10002aa4:	e007      	b.n	10002ab6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
10002aa6:	687b      	ldr	r3, [r7, #4]
10002aa8:	681b      	ldr	r3, [r3, #0]
10002aaa:	689b      	ldr	r3, [r3, #8]
10002aac:	f003 0301 	and.w	r3, r3, #1
10002ab0:	2b00      	cmp	r3, #0
10002ab2:	d1dc      	bne.n	10002a6e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
10002ab4:	2300      	movs	r3, #0
}
10002ab6:	4618      	mov	r0, r3
10002ab8:	3710      	adds	r7, #16
10002aba:	46bd      	mov	sp, r7
10002abc:	bd80      	pop	{r7, pc}
	...

10002ac0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
10002ac0:	b580      	push	{r7, lr}
10002ac2:	b084      	sub	sp, #16
10002ac4:	af00      	add	r7, sp, #0
10002ac6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
10002ac8:	687b      	ldr	r3, [r7, #4]
10002aca:	681b      	ldr	r3, [r3, #0]
10002acc:	4a53      	ldr	r2, [pc, #332]	; (10002c1c <ADC_ConfigureBoostMode+0x15c>)
10002ace:	4293      	cmp	r3, r2
10002ad0:	d004      	beq.n	10002adc <ADC_ConfigureBoostMode+0x1c>
10002ad2:	687b      	ldr	r3, [r7, #4]
10002ad4:	681b      	ldr	r3, [r3, #0]
10002ad6:	4a52      	ldr	r2, [pc, #328]	; (10002c20 <ADC_ConfigureBoostMode+0x160>)
10002ad8:	4293      	cmp	r3, r2
10002ada:	d124      	bne.n	10002b26 <ADC_ConfigureBoostMode+0x66>
10002adc:	4b51      	ldr	r3, [pc, #324]	; (10002c24 <ADC_ConfigureBoostMode+0x164>)
10002ade:	689b      	ldr	r3, [r3, #8]
10002ae0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
10002ae4:	2b00      	cmp	r3, #0
10002ae6:	d01e      	beq.n	10002b26 <ADC_ConfigureBoostMode+0x66>
  {
    freq = HAL_RCC_GetHCLK2Freq();
10002ae8:	f002 fae5 	bl	100050b6 <HAL_RCC_GetHCLK2Freq>
10002aec:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
10002aee:	687b      	ldr	r3, [r7, #4]
10002af0:	685b      	ldr	r3, [r3, #4]
10002af2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
10002af6:	d010      	beq.n	10002b1a <ADC_ConfigureBoostMode+0x5a>
10002af8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
10002afc:	d811      	bhi.n	10002b22 <ADC_ConfigureBoostMode+0x62>
10002afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
10002b02:	d002      	beq.n	10002b0a <ADC_ConfigureBoostMode+0x4a>
10002b04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
10002b08:	d10b      	bne.n	10002b22 <ADC_ConfigureBoostMode+0x62>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
10002b0a:	687b      	ldr	r3, [r7, #4]
10002b0c:	685b      	ldr	r3, [r3, #4]
10002b0e:	0c1b      	lsrs	r3, r3, #16
10002b10:	68fa      	ldr	r2, [r7, #12]
10002b12:	fbb2 f3f3 	udiv	r3, r2, r3
10002b16:	60fb      	str	r3, [r7, #12]
        break;
10002b18:	e004      	b.n	10002b24 <ADC_ConfigureBoostMode+0x64>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
10002b1a:	68fb      	ldr	r3, [r7, #12]
10002b1c:	089b      	lsrs	r3, r3, #2
10002b1e:	60fb      	str	r3, [r7, #12]
        break;
10002b20:	e000      	b.n	10002b24 <ADC_ConfigureBoostMode+0x64>
      default:
        break;
10002b22:	bf00      	nop
    switch(hadc->Init.ClockPrescaler)
10002b24:	e062      	b.n	10002bec <ADC_ConfigureBoostMode+0x12c>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
10002b26:	f04f 0008 	mov.w	r0, #8
10002b2a:	f04f 0100 	mov.w	r1, #0
10002b2e:	f004 fe8f 	bl	10007850 <HAL_RCCEx_GetPeriphCLKFreq>
10002b32:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
10002b34:	687b      	ldr	r3, [r7, #4]
10002b36:	685b      	ldr	r3, [r3, #4]
10002b38:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
10002b3c:	d051      	beq.n	10002be2 <ADC_ConfigureBoostMode+0x122>
10002b3e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
10002b42:	d852      	bhi.n	10002bea <ADC_ConfigureBoostMode+0x12a>
10002b44:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
10002b48:	d047      	beq.n	10002bda <ADC_ConfigureBoostMode+0x11a>
10002b4a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
10002b4e:	d84c      	bhi.n	10002bea <ADC_ConfigureBoostMode+0x12a>
10002b50:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
10002b54:	d03d      	beq.n	10002bd2 <ADC_ConfigureBoostMode+0x112>
10002b56:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
10002b5a:	d846      	bhi.n	10002bea <ADC_ConfigureBoostMode+0x12a>
10002b5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
10002b60:	d033      	beq.n	10002bca <ADC_ConfigureBoostMode+0x10a>
10002b62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
10002b66:	d840      	bhi.n	10002bea <ADC_ConfigureBoostMode+0x12a>
10002b68:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
10002b6c:	d029      	beq.n	10002bc2 <ADC_ConfigureBoostMode+0x102>
10002b6e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
10002b72:	d83a      	bhi.n	10002bea <ADC_ConfigureBoostMode+0x12a>
10002b74:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
10002b78:	d01a      	beq.n	10002bb0 <ADC_ConfigureBoostMode+0xf0>
10002b7a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
10002b7e:	d834      	bhi.n	10002bea <ADC_ConfigureBoostMode+0x12a>
10002b80:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
10002b84:	d014      	beq.n	10002bb0 <ADC_ConfigureBoostMode+0xf0>
10002b86:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
10002b8a:	d82e      	bhi.n	10002bea <ADC_ConfigureBoostMode+0x12a>
10002b8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
10002b90:	d00e      	beq.n	10002bb0 <ADC_ConfigureBoostMode+0xf0>
10002b92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
10002b96:	d828      	bhi.n	10002bea <ADC_ConfigureBoostMode+0x12a>
10002b98:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
10002b9c:	d008      	beq.n	10002bb0 <ADC_ConfigureBoostMode+0xf0>
10002b9e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
10002ba2:	d822      	bhi.n	10002bea <ADC_ConfigureBoostMode+0x12a>
10002ba4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
10002ba8:	d002      	beq.n	10002bb0 <ADC_ConfigureBoostMode+0xf0>
10002baa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
10002bae:	d11c      	bne.n	10002bea <ADC_ConfigureBoostMode+0x12a>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
10002bb0:	687b      	ldr	r3, [r7, #4]
10002bb2:	685b      	ldr	r3, [r3, #4]
10002bb4:	0c9b      	lsrs	r3, r3, #18
10002bb6:	005b      	lsls	r3, r3, #1
10002bb8:	68fa      	ldr	r2, [r7, #12]
10002bba:	fbb2 f3f3 	udiv	r3, r2, r3
10002bbe:	60fb      	str	r3, [r7, #12]
        break;
10002bc0:	e014      	b.n	10002bec <ADC_ConfigureBoostMode+0x12c>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
10002bc2:	68fb      	ldr	r3, [r7, #12]
10002bc4:	091b      	lsrs	r3, r3, #4
10002bc6:	60fb      	str	r3, [r7, #12]
      break;
10002bc8:	e010      	b.n	10002bec <ADC_ConfigureBoostMode+0x12c>
        case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
10002bca:	68fb      	ldr	r3, [r7, #12]
10002bcc:	095b      	lsrs	r3, r3, #5
10002bce:	60fb      	str	r3, [r7, #12]
        break;
10002bd0:	e00c      	b.n	10002bec <ADC_ConfigureBoostMode+0x12c>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
10002bd2:	68fb      	ldr	r3, [r7, #12]
10002bd4:	099b      	lsrs	r3, r3, #6
10002bd6:	60fb      	str	r3, [r7, #12]
        break;
10002bd8:	e008      	b.n	10002bec <ADC_ConfigureBoostMode+0x12c>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
10002bda:	68fb      	ldr	r3, [r7, #12]
10002bdc:	09db      	lsrs	r3, r3, #7
10002bde:	60fb      	str	r3, [r7, #12]
        break;
10002be0:	e004      	b.n	10002bec <ADC_ConfigureBoostMode+0x12c>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
10002be2:	68fb      	ldr	r3, [r7, #12]
10002be4:	0a1b      	lsrs	r3, r3, #8
10002be6:	60fb      	str	r3, [r7, #12]
        break;
10002be8:	e000      	b.n	10002bec <ADC_ConfigureBoostMode+0x12c>
      default:
        break;
10002bea:	bf00      	nop
    }
  }

  if (freq > 20000000UL)
10002bec:	68fb      	ldr	r3, [r7, #12]
10002bee:	4a0e      	ldr	r2, [pc, #56]	; (10002c28 <ADC_ConfigureBoostMode+0x168>)
10002bf0:	4293      	cmp	r3, r2
10002bf2:	d908      	bls.n	10002c06 <ADC_ConfigureBoostMode+0x146>
  {
    SET_BIT(hadc->Instance->CR, ADC_CR_BOOST);
10002bf4:	687b      	ldr	r3, [r7, #4]
10002bf6:	681b      	ldr	r3, [r3, #0]
10002bf8:	689a      	ldr	r2, [r3, #8]
10002bfa:	687b      	ldr	r3, [r7, #4]
10002bfc:	681b      	ldr	r3, [r3, #0]
10002bfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
10002c02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    CLEAR_BIT(hadc->Instance->CR, 0);
  }
}
10002c04:	e005      	b.n	10002c12 <ADC_ConfigureBoostMode+0x152>
    CLEAR_BIT(hadc->Instance->CR, 0);
10002c06:	687b      	ldr	r3, [r7, #4]
10002c08:	681a      	ldr	r2, [r3, #0]
10002c0a:	687b      	ldr	r3, [r7, #4]
10002c0c:	681b      	ldr	r3, [r3, #0]
10002c0e:	6892      	ldr	r2, [r2, #8]
10002c10:	609a      	str	r2, [r3, #8]
}
10002c12:	bf00      	nop
10002c14:	3710      	adds	r7, #16
10002c16:	46bd      	mov	sp, r7
10002c18:	bd80      	pop	{r7, pc}
10002c1a:	bf00      	nop
10002c1c:	48003000 	.word	0x48003000
10002c20:	48003100 	.word	0x48003100
10002c24:	48003300 	.word	0x48003300
10002c28:	01312d00 	.word	0x01312d00

10002c2c <LL_ADC_StartCalibration>:
{
10002c2c:	b480      	push	{r7}
10002c2e:	b085      	sub	sp, #20
10002c30:	af00      	add	r7, sp, #0
10002c32:	60f8      	str	r0, [r7, #12]
10002c34:	60b9      	str	r1, [r7, #8]
10002c36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
10002c38:	68fb      	ldr	r3, [r7, #12]
10002c3a:	689a      	ldr	r2, [r3, #8]
10002c3c:	4b09      	ldr	r3, [pc, #36]	; (10002c64 <LL_ADC_StartCalibration+0x38>)
10002c3e:	4013      	ands	r3, r2
10002c40:	68ba      	ldr	r2, [r7, #8]
10002c42:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
10002c46:	687a      	ldr	r2, [r7, #4]
10002c48:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
10002c4c:	430a      	orrs	r2, r1
10002c4e:	4313      	orrs	r3, r2
10002c50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
10002c54:	68fb      	ldr	r3, [r7, #12]
10002c56:	609a      	str	r2, [r3, #8]
}
10002c58:	bf00      	nop
10002c5a:	3714      	adds	r7, #20
10002c5c:	46bd      	mov	sp, r7
10002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
10002c62:	4770      	bx	lr
10002c64:	3ffeffc0 	.word	0x3ffeffc0

10002c68 <LL_ADC_IsCalibrationOnGoing>:
{
10002c68:	b480      	push	{r7}
10002c6a:	b083      	sub	sp, #12
10002c6c:	af00      	add	r7, sp, #0
10002c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
10002c70:	687b      	ldr	r3, [r7, #4]
10002c72:	689b      	ldr	r3, [r3, #8]
10002c74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002c78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002c7c:	d101      	bne.n	10002c82 <LL_ADC_IsCalibrationOnGoing+0x1a>
10002c7e:	2301      	movs	r3, #1
10002c80:	e000      	b.n	10002c84 <LL_ADC_IsCalibrationOnGoing+0x1c>
10002c82:	2300      	movs	r3, #0
}
10002c84:	4618      	mov	r0, r3
10002c86:	370c      	adds	r7, #12
10002c88:	46bd      	mov	sp, r7
10002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
10002c8e:	4770      	bx	lr

10002c90 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
10002c90:	b580      	push	{r7, lr}
10002c92:	b086      	sub	sp, #24
10002c94:	af00      	add	r7, sp, #0
10002c96:	60f8      	str	r0, [r7, #12]
10002c98:	60b9      	str	r1, [r7, #8]
10002c9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
10002c9c:	2300      	movs	r3, #0
10002c9e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
10002ca0:	68fb      	ldr	r3, [r7, #12]
10002ca2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
10002ca6:	2b01      	cmp	r3, #1
10002ca8:	d101      	bne.n	10002cae <HAL_ADCEx_Calibration_Start+0x1e>
10002caa:	2302      	movs	r3, #2
10002cac:	e04e      	b.n	10002d4c <HAL_ADCEx_Calibration_Start+0xbc>
10002cae:	68fb      	ldr	r3, [r7, #12]
10002cb0:	2201      	movs	r2, #1
10002cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
10002cb6:	68f8      	ldr	r0, [r7, #12]
10002cb8:	f7ff fea2 	bl	10002a00 <ADC_Disable>
10002cbc:	4603      	mov	r3, r0
10002cbe:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
10002cc0:	7dfb      	ldrb	r3, [r7, #23]
10002cc2:	2b00      	cmp	r3, #0
10002cc4:	d137      	bne.n	10002d36 <HAL_ADCEx_Calibration_Start+0xa6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
10002cc6:	68fb      	ldr	r3, [r7, #12]
10002cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002cca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
10002cce:	f023 0302 	bic.w	r3, r3, #2
10002cd2:	f043 0202 	orr.w	r2, r3, #2
10002cd6:	68fb      	ldr	r3, [r7, #12]
10002cd8:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance , CalibrationMode, SingleDiff );
10002cda:	68fb      	ldr	r3, [r7, #12]
10002cdc:	681b      	ldr	r3, [r3, #0]
10002cde:	687a      	ldr	r2, [r7, #4]
10002ce0:	68b9      	ldr	r1, [r7, #8]
10002ce2:	4618      	mov	r0, r3
10002ce4:	f7ff ffa2 	bl	10002c2c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
10002ce8:	e014      	b.n	10002d14 <HAL_ADCEx_Calibration_Start+0x84>
    {
      wait_loop_index++;
10002cea:	693b      	ldr	r3, [r7, #16]
10002cec:	3301      	adds	r3, #1
10002cee:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
10002cf0:	693b      	ldr	r3, [r7, #16]
10002cf2:	4a18      	ldr	r2, [pc, #96]	; (10002d54 <HAL_ADCEx_Calibration_Start+0xc4>)
10002cf4:	4293      	cmp	r3, r2
10002cf6:	d90d      	bls.n	10002d14 <HAL_ADCEx_Calibration_Start+0x84>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
10002cf8:	68fb      	ldr	r3, [r7, #12]
10002cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002cfc:	f023 0312 	bic.w	r3, r3, #18
10002d00:	f043 0210 	orr.w	r2, r3, #16
10002d04:	68fb      	ldr	r3, [r7, #12]
10002d06:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
10002d08:	68fb      	ldr	r3, [r7, #12]
10002d0a:	2200      	movs	r2, #0
10002d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
10002d10:	2301      	movs	r3, #1
10002d12:	e01b      	b.n	10002d4c <HAL_ADCEx_Calibration_Start+0xbc>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
10002d14:	68fb      	ldr	r3, [r7, #12]
10002d16:	681b      	ldr	r3, [r3, #0]
10002d18:	4618      	mov	r0, r3
10002d1a:	f7ff ffa5 	bl	10002c68 <LL_ADC_IsCalibrationOnGoing>
10002d1e:	4603      	mov	r3, r0
10002d20:	2b00      	cmp	r3, #0
10002d22:	d1e2      	bne.n	10002cea <HAL_ADCEx_Calibration_Start+0x5a>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
10002d24:	68fb      	ldr	r3, [r7, #12]
10002d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002d28:	f023 0303 	bic.w	r3, r3, #3
10002d2c:	f043 0201 	orr.w	r2, r3, #1
10002d30:	68fb      	ldr	r3, [r7, #12]
10002d32:	655a      	str	r2, [r3, #84]	; 0x54
10002d34:	e005      	b.n	10002d42 <HAL_ADCEx_Calibration_Start+0xb2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10002d36:	68fb      	ldr	r3, [r7, #12]
10002d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002d3a:	f043 0210 	orr.w	r2, r3, #16
10002d3e:	68fb      	ldr	r3, [r7, #12]
10002d40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
10002d42:	68fb      	ldr	r3, [r7, #12]
10002d44:	2200      	movs	r2, #0
10002d46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return tmp_hal_status;
10002d4a:	7dfb      	ldrb	r3, [r7, #23]
}
10002d4c:	4618      	mov	r0, r3
10002d4e:	3718      	adds	r7, #24
10002d50:	46bd      	mov	sp, r7
10002d52:	bd80      	pop	{r7, pc}
10002d54:	32021fbf 	.word	0x32021fbf

10002d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10002d58:	b480      	push	{r7}
10002d5a:	b085      	sub	sp, #20
10002d5c:	af00      	add	r7, sp, #0
10002d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
10002d60:	687b      	ldr	r3, [r7, #4]
10002d62:	f003 0307 	and.w	r3, r3, #7
10002d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
10002d68:	4b0c      	ldr	r3, [pc, #48]	; (10002d9c <__NVIC_SetPriorityGrouping+0x44>)
10002d6a:	68db      	ldr	r3, [r3, #12]
10002d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
10002d6e:	68ba      	ldr	r2, [r7, #8]
10002d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
10002d74:	4013      	ands	r3, r2
10002d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
10002d78:	68fb      	ldr	r3, [r7, #12]
10002d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10002d7c:	68bb      	ldr	r3, [r7, #8]
10002d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
10002d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
10002d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
10002d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
10002d8a:	4a04      	ldr	r2, [pc, #16]	; (10002d9c <__NVIC_SetPriorityGrouping+0x44>)
10002d8c:	68bb      	ldr	r3, [r7, #8]
10002d8e:	60d3      	str	r3, [r2, #12]
}
10002d90:	bf00      	nop
10002d92:	3714      	adds	r7, #20
10002d94:	46bd      	mov	sp, r7
10002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
10002d9a:	4770      	bx	lr
10002d9c:	e000ed00 	.word	0xe000ed00

10002da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
10002da0:	b480      	push	{r7}
10002da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
10002da4:	4b04      	ldr	r3, [pc, #16]	; (10002db8 <__NVIC_GetPriorityGrouping+0x18>)
10002da6:	68db      	ldr	r3, [r3, #12]
10002da8:	0a1b      	lsrs	r3, r3, #8
10002daa:	f003 0307 	and.w	r3, r3, #7
}
10002dae:	4618      	mov	r0, r3
10002db0:	46bd      	mov	sp, r7
10002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
10002db6:	4770      	bx	lr
10002db8:	e000ed00 	.word	0xe000ed00

10002dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10002dbc:	b480      	push	{r7}
10002dbe:	b083      	sub	sp, #12
10002dc0:	af00      	add	r7, sp, #0
10002dc2:	4603      	mov	r3, r0
10002dc4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10002dc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10002dca:	2b00      	cmp	r3, #0
10002dcc:	db0b      	blt.n	10002de6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002dce:	88fb      	ldrh	r3, [r7, #6]
10002dd0:	f003 021f 	and.w	r2, r3, #31
10002dd4:	4907      	ldr	r1, [pc, #28]	; (10002df4 <__NVIC_EnableIRQ+0x38>)
10002dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10002dda:	095b      	lsrs	r3, r3, #5
10002ddc:	2001      	movs	r0, #1
10002dde:	fa00 f202 	lsl.w	r2, r0, r2
10002de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
10002de6:	bf00      	nop
10002de8:	370c      	adds	r7, #12
10002dea:	46bd      	mov	sp, r7
10002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
10002df0:	4770      	bx	lr
10002df2:	bf00      	nop
10002df4:	e000e100 	.word	0xe000e100

10002df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10002df8:	b480      	push	{r7}
10002dfa:	b083      	sub	sp, #12
10002dfc:	af00      	add	r7, sp, #0
10002dfe:	4603      	mov	r3, r0
10002e00:	6039      	str	r1, [r7, #0]
10002e02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10002e04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10002e08:	2b00      	cmp	r3, #0
10002e0a:	db0a      	blt.n	10002e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10002e0c:	683b      	ldr	r3, [r7, #0]
10002e0e:	b2da      	uxtb	r2, r3
10002e10:	490c      	ldr	r1, [pc, #48]	; (10002e44 <__NVIC_SetPriority+0x4c>)
10002e12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10002e16:	0112      	lsls	r2, r2, #4
10002e18:	b2d2      	uxtb	r2, r2
10002e1a:	440b      	add	r3, r1
10002e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
10002e20:	e00a      	b.n	10002e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10002e22:	683b      	ldr	r3, [r7, #0]
10002e24:	b2da      	uxtb	r2, r3
10002e26:	4908      	ldr	r1, [pc, #32]	; (10002e48 <__NVIC_SetPriority+0x50>)
10002e28:	88fb      	ldrh	r3, [r7, #6]
10002e2a:	f003 030f 	and.w	r3, r3, #15
10002e2e:	3b04      	subs	r3, #4
10002e30:	0112      	lsls	r2, r2, #4
10002e32:	b2d2      	uxtb	r2, r2
10002e34:	440b      	add	r3, r1
10002e36:	761a      	strb	r2, [r3, #24]
}
10002e38:	bf00      	nop
10002e3a:	370c      	adds	r7, #12
10002e3c:	46bd      	mov	sp, r7
10002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
10002e42:	4770      	bx	lr
10002e44:	e000e100 	.word	0xe000e100
10002e48:	e000ed00 	.word	0xe000ed00

10002e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
10002e4c:	b480      	push	{r7}
10002e4e:	b089      	sub	sp, #36	; 0x24
10002e50:	af00      	add	r7, sp, #0
10002e52:	60f8      	str	r0, [r7, #12]
10002e54:	60b9      	str	r1, [r7, #8]
10002e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
10002e58:	68fb      	ldr	r3, [r7, #12]
10002e5a:	f003 0307 	and.w	r3, r3, #7
10002e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
10002e60:	69fb      	ldr	r3, [r7, #28]
10002e62:	f1c3 0307 	rsb	r3, r3, #7
10002e66:	2b04      	cmp	r3, #4
10002e68:	bf28      	it	cs
10002e6a:	2304      	movcs	r3, #4
10002e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
10002e6e:	69fb      	ldr	r3, [r7, #28]
10002e70:	3304      	adds	r3, #4
10002e72:	2b06      	cmp	r3, #6
10002e74:	d902      	bls.n	10002e7c <NVIC_EncodePriority+0x30>
10002e76:	69fb      	ldr	r3, [r7, #28]
10002e78:	3b03      	subs	r3, #3
10002e7a:	e000      	b.n	10002e7e <NVIC_EncodePriority+0x32>
10002e7c:	2300      	movs	r3, #0
10002e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10002e80:	f04f 32ff 	mov.w	r2, #4294967295
10002e84:	69bb      	ldr	r3, [r7, #24]
10002e86:	fa02 f303 	lsl.w	r3, r2, r3
10002e8a:	43da      	mvns	r2, r3
10002e8c:	68bb      	ldr	r3, [r7, #8]
10002e8e:	401a      	ands	r2, r3
10002e90:	697b      	ldr	r3, [r7, #20]
10002e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
10002e94:	f04f 31ff 	mov.w	r1, #4294967295
10002e98:	697b      	ldr	r3, [r7, #20]
10002e9a:	fa01 f303 	lsl.w	r3, r1, r3
10002e9e:	43d9      	mvns	r1, r3
10002ea0:	687b      	ldr	r3, [r7, #4]
10002ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10002ea4:	4313      	orrs	r3, r2
         );
}
10002ea6:	4618      	mov	r0, r3
10002ea8:	3724      	adds	r7, #36	; 0x24
10002eaa:	46bd      	mov	sp, r7
10002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
10002eb0:	4770      	bx	lr
	...

10002eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10002eb4:	b580      	push	{r7, lr}
10002eb6:	b082      	sub	sp, #8
10002eb8:	af00      	add	r7, sp, #0
10002eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10002ebc:	687b      	ldr	r3, [r7, #4]
10002ebe:	3b01      	subs	r3, #1
10002ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
10002ec4:	d301      	bcc.n	10002eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
10002ec6:	2301      	movs	r3, #1
10002ec8:	e00f      	b.n	10002eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10002eca:	4a0a      	ldr	r2, [pc, #40]	; (10002ef4 <SysTick_Config+0x40>)
10002ecc:	687b      	ldr	r3, [r7, #4]
10002ece:	3b01      	subs	r3, #1
10002ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10002ed2:	210f      	movs	r1, #15
10002ed4:	f04f 30ff 	mov.w	r0, #4294967295
10002ed8:	f7ff ff8e 	bl	10002df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10002edc:	4b05      	ldr	r3, [pc, #20]	; (10002ef4 <SysTick_Config+0x40>)
10002ede:	2200      	movs	r2, #0
10002ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10002ee2:	4b04      	ldr	r3, [pc, #16]	; (10002ef4 <SysTick_Config+0x40>)
10002ee4:	2207      	movs	r2, #7
10002ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10002ee8:	2300      	movs	r3, #0
}
10002eea:	4618      	mov	r0, r3
10002eec:	3708      	adds	r7, #8
10002eee:	46bd      	mov	sp, r7
10002ef0:	bd80      	pop	{r7, pc}
10002ef2:	bf00      	nop
10002ef4:	e000e010 	.word	0xe000e010

10002ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10002ef8:	b580      	push	{r7, lr}
10002efa:	b082      	sub	sp, #8
10002efc:	af00      	add	r7, sp, #0
10002efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
10002f00:	6878      	ldr	r0, [r7, #4]
10002f02:	f7ff ff29 	bl	10002d58 <__NVIC_SetPriorityGrouping>
}
10002f06:	bf00      	nop
10002f08:	3708      	adds	r7, #8
10002f0a:	46bd      	mov	sp, r7
10002f0c:	bd80      	pop	{r7, pc}

10002f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10002f0e:	b580      	push	{r7, lr}
10002f10:	b086      	sub	sp, #24
10002f12:	af00      	add	r7, sp, #0
10002f14:	4603      	mov	r3, r0
10002f16:	60b9      	str	r1, [r7, #8]
10002f18:	607a      	str	r2, [r7, #4]
10002f1a:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
10002f1c:	2300      	movs	r3, #0
10002f1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
10002f20:	f7ff ff3e 	bl	10002da0 <__NVIC_GetPriorityGrouping>
10002f24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
10002f26:	687a      	ldr	r2, [r7, #4]
10002f28:	68b9      	ldr	r1, [r7, #8]
10002f2a:	6978      	ldr	r0, [r7, #20]
10002f2c:	f7ff ff8e 	bl	10002e4c <NVIC_EncodePriority>
10002f30:	4602      	mov	r2, r0
10002f32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
10002f36:	4611      	mov	r1, r2
10002f38:	4618      	mov	r0, r3
10002f3a:	f7ff ff5d 	bl	10002df8 <__NVIC_SetPriority>
}
10002f3e:	bf00      	nop
10002f40:	3718      	adds	r7, #24
10002f42:	46bd      	mov	sp, r7
10002f44:	bd80      	pop	{r7, pc}

10002f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10002f46:	b580      	push	{r7, lr}
10002f48:	b082      	sub	sp, #8
10002f4a:	af00      	add	r7, sp, #0
10002f4c:	4603      	mov	r3, r0
10002f4e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10002f50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10002f54:	4618      	mov	r0, r3
10002f56:	f7ff ff31 	bl	10002dbc <__NVIC_EnableIRQ>
}
10002f5a:	bf00      	nop
10002f5c:	3708      	adds	r7, #8
10002f5e:	46bd      	mov	sp, r7
10002f60:	bd80      	pop	{r7, pc}

10002f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10002f62:	b580      	push	{r7, lr}
10002f64:	b082      	sub	sp, #8
10002f66:	af00      	add	r7, sp, #0
10002f68:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10002f6a:	6878      	ldr	r0, [r7, #4]
10002f6c:	f7ff ffa2 	bl	10002eb4 <SysTick_Config>
10002f70:	4603      	mov	r3, r0
}
10002f72:	4618      	mov	r0, r3
10002f74:	3708      	adds	r7, #8
10002f76:	46bd      	mov	sp, r7
10002f78:	bd80      	pop	{r7, pc}
	...

10002f7c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
10002f7c:	b580      	push	{r7, lr}
10002f7e:	b082      	sub	sp, #8
10002f80:	af00      	add	r7, sp, #0
10002f82:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
10002f84:	687b      	ldr	r3, [r7, #4]
10002f86:	2b00      	cmp	r3, #0
10002f88:	d101      	bne.n	10002f8e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
10002f8a:	2301      	movs	r3, #1
10002f8c:	e054      	b.n	10003038 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
10002f8e:	687b      	ldr	r3, [r7, #4]
10002f90:	7f5b      	ldrb	r3, [r3, #29]
10002f92:	b2db      	uxtb	r3, r3
10002f94:	2b00      	cmp	r3, #0
10002f96:	d105      	bne.n	10002fa4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
10002f98:	687b      	ldr	r3, [r7, #4]
10002f9a:	2200      	movs	r2, #0
10002f9c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
10002f9e:	6878      	ldr	r0, [r7, #4]
10002fa0:	f7fe fa82 	bl	100014a8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
10002fa4:	687b      	ldr	r3, [r7, #4]
10002fa6:	2202      	movs	r2, #2
10002fa8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
10002faa:	687b      	ldr	r3, [r7, #4]
10002fac:	791b      	ldrb	r3, [r3, #4]
10002fae:	2b00      	cmp	r3, #0
10002fb0:	d10c      	bne.n	10002fcc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
10002fb2:	687b      	ldr	r3, [r7, #4]
10002fb4:	681b      	ldr	r3, [r3, #0]
10002fb6:	4a22      	ldr	r2, [pc, #136]	; (10003040 <HAL_CRC_Init+0xc4>)
10002fb8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
10002fba:	687b      	ldr	r3, [r7, #4]
10002fbc:	681b      	ldr	r3, [r3, #0]
10002fbe:	689a      	ldr	r2, [r3, #8]
10002fc0:	687b      	ldr	r3, [r7, #4]
10002fc2:	681b      	ldr	r3, [r3, #0]
10002fc4:	f022 0218 	bic.w	r2, r2, #24
10002fc8:	609a      	str	r2, [r3, #8]
10002fca:	e00c      	b.n	10002fe6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
10002fcc:	687b      	ldr	r3, [r7, #4]
10002fce:	6899      	ldr	r1, [r3, #8]
10002fd0:	687b      	ldr	r3, [r7, #4]
10002fd2:	68db      	ldr	r3, [r3, #12]
10002fd4:	461a      	mov	r2, r3
10002fd6:	6878      	ldr	r0, [r7, #4]
10002fd8:	f000 f834 	bl	10003044 <HAL_CRCEx_Polynomial_Set>
10002fdc:	4603      	mov	r3, r0
10002fde:	2b00      	cmp	r3, #0
10002fe0:	d001      	beq.n	10002fe6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
10002fe2:	2301      	movs	r3, #1
10002fe4:	e028      	b.n	10003038 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
10002fe6:	687b      	ldr	r3, [r7, #4]
10002fe8:	795b      	ldrb	r3, [r3, #5]
10002fea:	2b00      	cmp	r3, #0
10002fec:	d105      	bne.n	10002ffa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
10002fee:	687b      	ldr	r3, [r7, #4]
10002ff0:	681b      	ldr	r3, [r3, #0]
10002ff2:	f04f 32ff 	mov.w	r2, #4294967295
10002ff6:	611a      	str	r2, [r3, #16]
10002ff8:	e004      	b.n	10003004 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
10002ffa:	687b      	ldr	r3, [r7, #4]
10002ffc:	681b      	ldr	r3, [r3, #0]
10002ffe:	687a      	ldr	r2, [r7, #4]
10003000:	6912      	ldr	r2, [r2, #16]
10003002:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
10003004:	687b      	ldr	r3, [r7, #4]
10003006:	681b      	ldr	r3, [r3, #0]
10003008:	689b      	ldr	r3, [r3, #8]
1000300a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
1000300e:	687b      	ldr	r3, [r7, #4]
10003010:	695a      	ldr	r2, [r3, #20]
10003012:	687b      	ldr	r3, [r7, #4]
10003014:	681b      	ldr	r3, [r3, #0]
10003016:	430a      	orrs	r2, r1
10003018:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
1000301a:	687b      	ldr	r3, [r7, #4]
1000301c:	681b      	ldr	r3, [r3, #0]
1000301e:	689b      	ldr	r3, [r3, #8]
10003020:	f023 0180 	bic.w	r1, r3, #128	; 0x80
10003024:	687b      	ldr	r3, [r7, #4]
10003026:	699a      	ldr	r2, [r3, #24]
10003028:	687b      	ldr	r3, [r7, #4]
1000302a:	681b      	ldr	r3, [r3, #0]
1000302c:	430a      	orrs	r2, r1
1000302e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
10003030:	687b      	ldr	r3, [r7, #4]
10003032:	2201      	movs	r2, #1
10003034:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
10003036:	2300      	movs	r3, #0
}
10003038:	4618      	mov	r0, r3
1000303a:	3708      	adds	r7, #8
1000303c:	46bd      	mov	sp, r7
1000303e:	bd80      	pop	{r7, pc}
10003040:	04c11db7 	.word	0x04c11db7

10003044 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
10003044:	b480      	push	{r7}
10003046:	b087      	sub	sp, #28
10003048:	af00      	add	r7, sp, #0
1000304a:	60f8      	str	r0, [r7, #12]
1000304c:	60b9      	str	r1, [r7, #8]
1000304e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
10003050:	2300      	movs	r3, #0
10003052:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
10003054:	231f      	movs	r3, #31
10003056:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
10003058:	bf00      	nop
1000305a:	693b      	ldr	r3, [r7, #16]
1000305c:	1e5a      	subs	r2, r3, #1
1000305e:	613a      	str	r2, [r7, #16]
10003060:	2b00      	cmp	r3, #0
10003062:	d009      	beq.n	10003078 <HAL_CRCEx_Polynomial_Set+0x34>
10003064:	693b      	ldr	r3, [r7, #16]
10003066:	f003 031f 	and.w	r3, r3, #31
1000306a:	68ba      	ldr	r2, [r7, #8]
1000306c:	fa22 f303 	lsr.w	r3, r2, r3
10003070:	f003 0301 	and.w	r3, r3, #1
10003074:	2b00      	cmp	r3, #0
10003076:	d0f0      	beq.n	1000305a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
10003078:	687b      	ldr	r3, [r7, #4]
1000307a:	2b18      	cmp	r3, #24
1000307c:	d846      	bhi.n	1000310c <HAL_CRCEx_Polynomial_Set+0xc8>
1000307e:	a201      	add	r2, pc, #4	; (adr r2, 10003084 <HAL_CRCEx_Polynomial_Set+0x40>)
10003080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10003084:	10003113 	.word	0x10003113
10003088:	1000310d 	.word	0x1000310d
1000308c:	1000310d 	.word	0x1000310d
10003090:	1000310d 	.word	0x1000310d
10003094:	1000310d 	.word	0x1000310d
10003098:	1000310d 	.word	0x1000310d
1000309c:	1000310d 	.word	0x1000310d
100030a0:	1000310d 	.word	0x1000310d
100030a4:	10003101 	.word	0x10003101
100030a8:	1000310d 	.word	0x1000310d
100030ac:	1000310d 	.word	0x1000310d
100030b0:	1000310d 	.word	0x1000310d
100030b4:	1000310d 	.word	0x1000310d
100030b8:	1000310d 	.word	0x1000310d
100030bc:	1000310d 	.word	0x1000310d
100030c0:	1000310d 	.word	0x1000310d
100030c4:	100030f5 	.word	0x100030f5
100030c8:	1000310d 	.word	0x1000310d
100030cc:	1000310d 	.word	0x1000310d
100030d0:	1000310d 	.word	0x1000310d
100030d4:	1000310d 	.word	0x1000310d
100030d8:	1000310d 	.word	0x1000310d
100030dc:	1000310d 	.word	0x1000310d
100030e0:	1000310d 	.word	0x1000310d
100030e4:	100030e9 	.word	0x100030e9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
100030e8:	693b      	ldr	r3, [r7, #16]
100030ea:	2b06      	cmp	r3, #6
100030ec:	d913      	bls.n	10003116 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
100030ee:	2301      	movs	r3, #1
100030f0:	75fb      	strb	r3, [r7, #23]
      }
      break;
100030f2:	e010      	b.n	10003116 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
100030f4:	693b      	ldr	r3, [r7, #16]
100030f6:	2b07      	cmp	r3, #7
100030f8:	d90f      	bls.n	1000311a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
100030fa:	2301      	movs	r3, #1
100030fc:	75fb      	strb	r3, [r7, #23]
      }
      break;
100030fe:	e00c      	b.n	1000311a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
10003100:	693b      	ldr	r3, [r7, #16]
10003102:	2b0f      	cmp	r3, #15
10003104:	d90b      	bls.n	1000311e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
10003106:	2301      	movs	r3, #1
10003108:	75fb      	strb	r3, [r7, #23]
      }
      break;
1000310a:	e008      	b.n	1000311e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
1000310c:	2301      	movs	r3, #1
1000310e:	75fb      	strb	r3, [r7, #23]
      break;
10003110:	e006      	b.n	10003120 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
10003112:	bf00      	nop
10003114:	e004      	b.n	10003120 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
10003116:	bf00      	nop
10003118:	e002      	b.n	10003120 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
1000311a:	bf00      	nop
1000311c:	e000      	b.n	10003120 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
1000311e:	bf00      	nop
  }
  if (status == HAL_OK)
10003120:	7dfb      	ldrb	r3, [r7, #23]
10003122:	2b00      	cmp	r3, #0
10003124:	d10d      	bne.n	10003142 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
10003126:	68fb      	ldr	r3, [r7, #12]
10003128:	681b      	ldr	r3, [r3, #0]
1000312a:	68ba      	ldr	r2, [r7, #8]
1000312c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
1000312e:	68fb      	ldr	r3, [r7, #12]
10003130:	681b      	ldr	r3, [r3, #0]
10003132:	689b      	ldr	r3, [r3, #8]
10003134:	f023 0118 	bic.w	r1, r3, #24
10003138:	68fb      	ldr	r3, [r7, #12]
1000313a:	681b      	ldr	r3, [r3, #0]
1000313c:	687a      	ldr	r2, [r7, #4]
1000313e:	430a      	orrs	r2, r1
10003140:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
10003142:	7dfb      	ldrb	r3, [r7, #23]
}
10003144:	4618      	mov	r0, r3
10003146:	371c      	adds	r7, #28
10003148:	46bd      	mov	sp, r7
1000314a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000314e:	4770      	bx	lr

10003150 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
10003150:	b480      	push	{r7}
10003152:	b089      	sub	sp, #36	; 0x24
10003154:	af00      	add	r7, sp, #0
10003156:	6078      	str	r0, [r7, #4]
10003158:	6039      	str	r1, [r7, #0]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef * EXTI_CurrentCPU;

#if defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_C2; /* EXTI for CM4 CPU */
1000315a:	4b8a      	ldr	r3, [pc, #552]	; (10003384 <HAL_GPIO_Init+0x234>)
1000315c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
1000315e:	2300      	movs	r3, #0
10003160:	61fb      	str	r3, [r7, #28]
10003162:	e191      	b.n	10003488 <HAL_GPIO_Init+0x338>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
10003164:	2201      	movs	r2, #1
10003166:	69fb      	ldr	r3, [r7, #28]
10003168:	fa02 f303 	lsl.w	r3, r2, r3
1000316c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
1000316e:	683b      	ldr	r3, [r7, #0]
10003170:	681b      	ldr	r3, [r3, #0]
10003172:	693a      	ldr	r2, [r7, #16]
10003174:	4013      	ands	r3, r2
10003176:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
10003178:	68fa      	ldr	r2, [r7, #12]
1000317a:	693b      	ldr	r3, [r7, #16]
1000317c:	429a      	cmp	r2, r3
1000317e:	f040 8180 	bne.w	10003482 <HAL_GPIO_Init+0x332>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10003182:	683b      	ldr	r3, [r7, #0]
10003184:	685b      	ldr	r3, [r3, #4]
10003186:	2b02      	cmp	r3, #2
10003188:	d003      	beq.n	10003192 <HAL_GPIO_Init+0x42>
1000318a:	683b      	ldr	r3, [r7, #0]
1000318c:	685b      	ldr	r3, [r3, #4]
1000318e:	2b12      	cmp	r3, #18
10003190:	d123      	bne.n	100031da <HAL_GPIO_Init+0x8a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
10003192:	69fb      	ldr	r3, [r7, #28]
10003194:	08da      	lsrs	r2, r3, #3
10003196:	687b      	ldr	r3, [r7, #4]
10003198:	3208      	adds	r2, #8
1000319a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1000319e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
100031a0:	69fb      	ldr	r3, [r7, #28]
100031a2:	f003 0307 	and.w	r3, r3, #7
100031a6:	009b      	lsls	r3, r3, #2
100031a8:	220f      	movs	r2, #15
100031aa:	fa02 f303 	lsl.w	r3, r2, r3
100031ae:	43db      	mvns	r3, r3
100031b0:	69ba      	ldr	r2, [r7, #24]
100031b2:	4013      	ands	r3, r2
100031b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
100031b6:	683b      	ldr	r3, [r7, #0]
100031b8:	691a      	ldr	r2, [r3, #16]
100031ba:	69fb      	ldr	r3, [r7, #28]
100031bc:	f003 0307 	and.w	r3, r3, #7
100031c0:	009b      	lsls	r3, r3, #2
100031c2:	fa02 f303 	lsl.w	r3, r2, r3
100031c6:	69ba      	ldr	r2, [r7, #24]
100031c8:	4313      	orrs	r3, r2
100031ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
100031cc:	69fb      	ldr	r3, [r7, #28]
100031ce:	08da      	lsrs	r2, r3, #3
100031d0:	687b      	ldr	r3, [r7, #4]
100031d2:	3208      	adds	r2, #8
100031d4:	69b9      	ldr	r1, [r7, #24]
100031d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
100031da:	687b      	ldr	r3, [r7, #4]
100031dc:	681b      	ldr	r3, [r3, #0]
100031de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
100031e0:	69fb      	ldr	r3, [r7, #28]
100031e2:	005b      	lsls	r3, r3, #1
100031e4:	2203      	movs	r2, #3
100031e6:	fa02 f303 	lsl.w	r3, r2, r3
100031ea:	43db      	mvns	r3, r3
100031ec:	69ba      	ldr	r2, [r7, #24]
100031ee:	4013      	ands	r3, r2
100031f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
100031f2:	683b      	ldr	r3, [r7, #0]
100031f4:	685b      	ldr	r3, [r3, #4]
100031f6:	f003 0203 	and.w	r2, r3, #3
100031fa:	69fb      	ldr	r3, [r7, #28]
100031fc:	005b      	lsls	r3, r3, #1
100031fe:	fa02 f303 	lsl.w	r3, r2, r3
10003202:	69ba      	ldr	r2, [r7, #24]
10003204:	4313      	orrs	r3, r2
10003206:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
10003208:	687b      	ldr	r3, [r7, #4]
1000320a:	69ba      	ldr	r2, [r7, #24]
1000320c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
1000320e:	683b      	ldr	r3, [r7, #0]
10003210:	685b      	ldr	r3, [r3, #4]
10003212:	2b01      	cmp	r3, #1
10003214:	d00b      	beq.n	1000322e <HAL_GPIO_Init+0xde>
10003216:	683b      	ldr	r3, [r7, #0]
10003218:	685b      	ldr	r3, [r3, #4]
1000321a:	2b02      	cmp	r3, #2
1000321c:	d007      	beq.n	1000322e <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
1000321e:	683b      	ldr	r3, [r7, #0]
10003220:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10003222:	2b11      	cmp	r3, #17
10003224:	d003      	beq.n	1000322e <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10003226:	683b      	ldr	r3, [r7, #0]
10003228:	685b      	ldr	r3, [r3, #4]
1000322a:	2b12      	cmp	r3, #18
1000322c:	d130      	bne.n	10003290 <HAL_GPIO_Init+0x140>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
1000322e:	687b      	ldr	r3, [r7, #4]
10003230:	689b      	ldr	r3, [r3, #8]
10003232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
10003234:	69fb      	ldr	r3, [r7, #28]
10003236:	005b      	lsls	r3, r3, #1
10003238:	2203      	movs	r2, #3
1000323a:	fa02 f303 	lsl.w	r3, r2, r3
1000323e:	43db      	mvns	r3, r3
10003240:	69ba      	ldr	r2, [r7, #24]
10003242:	4013      	ands	r3, r2
10003244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
10003246:	683b      	ldr	r3, [r7, #0]
10003248:	68da      	ldr	r2, [r3, #12]
1000324a:	69fb      	ldr	r3, [r7, #28]
1000324c:	005b      	lsls	r3, r3, #1
1000324e:	fa02 f303 	lsl.w	r3, r2, r3
10003252:	69ba      	ldr	r2, [r7, #24]
10003254:	4313      	orrs	r3, r2
10003256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
10003258:	687b      	ldr	r3, [r7, #4]
1000325a:	69ba      	ldr	r2, [r7, #24]
1000325c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
1000325e:	687b      	ldr	r3, [r7, #4]
10003260:	685b      	ldr	r3, [r3, #4]
10003262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10003264:	2201      	movs	r2, #1
10003266:	69fb      	ldr	r3, [r7, #28]
10003268:	fa02 f303 	lsl.w	r3, r2, r3
1000326c:	43db      	mvns	r3, r3
1000326e:	69ba      	ldr	r2, [r7, #24]
10003270:	4013      	ands	r3, r2
10003272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
10003274:	683b      	ldr	r3, [r7, #0]
10003276:	685b      	ldr	r3, [r3, #4]
10003278:	091b      	lsrs	r3, r3, #4
1000327a:	f003 0201 	and.w	r2, r3, #1
1000327e:	69fb      	ldr	r3, [r7, #28]
10003280:	fa02 f303 	lsl.w	r3, r2, r3
10003284:	69ba      	ldr	r2, [r7, #24]
10003286:	4313      	orrs	r3, r2
10003288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
1000328a:	687b      	ldr	r3, [r7, #4]
1000328c:	69ba      	ldr	r2, [r7, #24]
1000328e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
10003290:	687b      	ldr	r3, [r7, #4]
10003292:	68db      	ldr	r3, [r3, #12]
10003294:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
10003296:	69fb      	ldr	r3, [r7, #28]
10003298:	005b      	lsls	r3, r3, #1
1000329a:	2203      	movs	r2, #3
1000329c:	fa02 f303 	lsl.w	r3, r2, r3
100032a0:	43db      	mvns	r3, r3
100032a2:	69ba      	ldr	r2, [r7, #24]
100032a4:	4013      	ands	r3, r2
100032a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
100032a8:	683b      	ldr	r3, [r7, #0]
100032aa:	689a      	ldr	r2, [r3, #8]
100032ac:	69fb      	ldr	r3, [r7, #28]
100032ae:	005b      	lsls	r3, r3, #1
100032b0:	fa02 f303 	lsl.w	r3, r2, r3
100032b4:	69ba      	ldr	r2, [r7, #24]
100032b6:	4313      	orrs	r3, r2
100032b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
100032ba:	687b      	ldr	r3, [r7, #4]
100032bc:	69ba      	ldr	r2, [r7, #24]
100032be:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
100032c0:	683b      	ldr	r3, [r7, #0]
100032c2:	685b      	ldr	r3, [r3, #4]
100032c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
100032c8:	2b00      	cmp	r3, #0
100032ca:	f000 80da 	beq.w	10003482 <HAL_GPIO_Init+0x332>
      {
        temp = EXTI->EXTICR[position >> 2U];
100032ce:	4a2e      	ldr	r2, [pc, #184]	; (10003388 <HAL_GPIO_Init+0x238>)
100032d0:	69fb      	ldr	r3, [r7, #28]
100032d2:	089b      	lsrs	r3, r3, #2
100032d4:	3318      	adds	r3, #24
100032d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
100032da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFFU << (8U * (position & 0x03U)));
100032dc:	69fb      	ldr	r3, [r7, #28]
100032de:	f003 0303 	and.w	r3, r3, #3
100032e2:	00db      	lsls	r3, r3, #3
100032e4:	22ff      	movs	r2, #255	; 0xff
100032e6:	fa02 f303 	lsl.w	r3, r2, r3
100032ea:	43db      	mvns	r3, r3
100032ec:	69ba      	ldr	r2, [r7, #24]
100032ee:	4013      	ands	r3, r2
100032f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
100032f2:	687b      	ldr	r3, [r7, #4]
100032f4:	4a25      	ldr	r2, [pc, #148]	; (1000338c <HAL_GPIO_Init+0x23c>)
100032f6:	4293      	cmp	r3, r2
100032f8:	d05e      	beq.n	100033b8 <HAL_GPIO_Init+0x268>
100032fa:	687b      	ldr	r3, [r7, #4]
100032fc:	4a24      	ldr	r2, [pc, #144]	; (10003390 <HAL_GPIO_Init+0x240>)
100032fe:	4293      	cmp	r3, r2
10003300:	d03d      	beq.n	1000337e <HAL_GPIO_Init+0x22e>
10003302:	687b      	ldr	r3, [r7, #4]
10003304:	4a23      	ldr	r2, [pc, #140]	; (10003394 <HAL_GPIO_Init+0x244>)
10003306:	4293      	cmp	r3, r2
10003308:	d037      	beq.n	1000337a <HAL_GPIO_Init+0x22a>
1000330a:	687b      	ldr	r3, [r7, #4]
1000330c:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
10003310:	d031      	beq.n	10003376 <HAL_GPIO_Init+0x226>
10003312:	687b      	ldr	r3, [r7, #4]
10003314:	4a20      	ldr	r2, [pc, #128]	; (10003398 <HAL_GPIO_Init+0x248>)
10003316:	4293      	cmp	r3, r2
10003318:	d02b      	beq.n	10003372 <HAL_GPIO_Init+0x222>
1000331a:	687b      	ldr	r3, [r7, #4]
1000331c:	4a1f      	ldr	r2, [pc, #124]	; (1000339c <HAL_GPIO_Init+0x24c>)
1000331e:	4293      	cmp	r3, r2
10003320:	d025      	beq.n	1000336e <HAL_GPIO_Init+0x21e>
10003322:	687b      	ldr	r3, [r7, #4]
10003324:	4a1e      	ldr	r2, [pc, #120]	; (100033a0 <HAL_GPIO_Init+0x250>)
10003326:	4293      	cmp	r3, r2
10003328:	d01f      	beq.n	1000336a <HAL_GPIO_Init+0x21a>
1000332a:	687b      	ldr	r3, [r7, #4]
1000332c:	4a1d      	ldr	r2, [pc, #116]	; (100033a4 <HAL_GPIO_Init+0x254>)
1000332e:	4293      	cmp	r3, r2
10003330:	d019      	beq.n	10003366 <HAL_GPIO_Init+0x216>
10003332:	687b      	ldr	r3, [r7, #4]
10003334:	4a1c      	ldr	r2, [pc, #112]	; (100033a8 <HAL_GPIO_Init+0x258>)
10003336:	4293      	cmp	r3, r2
10003338:	d013      	beq.n	10003362 <HAL_GPIO_Init+0x212>
1000333a:	687b      	ldr	r3, [r7, #4]
1000333c:	4a1b      	ldr	r2, [pc, #108]	; (100033ac <HAL_GPIO_Init+0x25c>)
1000333e:	4293      	cmp	r3, r2
10003340:	d00d      	beq.n	1000335e <HAL_GPIO_Init+0x20e>
10003342:	687b      	ldr	r3, [r7, #4]
10003344:	4a1a      	ldr	r2, [pc, #104]	; (100033b0 <HAL_GPIO_Init+0x260>)
10003346:	4293      	cmp	r3, r2
10003348:	d007      	beq.n	1000335a <HAL_GPIO_Init+0x20a>
1000334a:	687b      	ldr	r3, [r7, #4]
1000334c:	4a19      	ldr	r2, [pc, #100]	; (100033b4 <HAL_GPIO_Init+0x264>)
1000334e:	4293      	cmp	r3, r2
10003350:	d101      	bne.n	10003356 <HAL_GPIO_Init+0x206>
10003352:	230b      	movs	r3, #11
10003354:	e031      	b.n	100033ba <HAL_GPIO_Init+0x26a>
10003356:	2319      	movs	r3, #25
10003358:	e02f      	b.n	100033ba <HAL_GPIO_Init+0x26a>
1000335a:	230a      	movs	r3, #10
1000335c:	e02d      	b.n	100033ba <HAL_GPIO_Init+0x26a>
1000335e:	2309      	movs	r3, #9
10003360:	e02b      	b.n	100033ba <HAL_GPIO_Init+0x26a>
10003362:	2308      	movs	r3, #8
10003364:	e029      	b.n	100033ba <HAL_GPIO_Init+0x26a>
10003366:	2307      	movs	r3, #7
10003368:	e027      	b.n	100033ba <HAL_GPIO_Init+0x26a>
1000336a:	2306      	movs	r3, #6
1000336c:	e025      	b.n	100033ba <HAL_GPIO_Init+0x26a>
1000336e:	2305      	movs	r3, #5
10003370:	e023      	b.n	100033ba <HAL_GPIO_Init+0x26a>
10003372:	2304      	movs	r3, #4
10003374:	e021      	b.n	100033ba <HAL_GPIO_Init+0x26a>
10003376:	2303      	movs	r3, #3
10003378:	e01f      	b.n	100033ba <HAL_GPIO_Init+0x26a>
1000337a:	2302      	movs	r3, #2
1000337c:	e01d      	b.n	100033ba <HAL_GPIO_Init+0x26a>
1000337e:	2301      	movs	r3, #1
10003380:	e01b      	b.n	100033ba <HAL_GPIO_Init+0x26a>
10003382:	bf00      	nop
10003384:	5000d0c0 	.word	0x5000d0c0
10003388:	5000d000 	.word	0x5000d000
1000338c:	50002000 	.word	0x50002000
10003390:	50003000 	.word	0x50003000
10003394:	50004000 	.word	0x50004000
10003398:	50006000 	.word	0x50006000
1000339c:	50007000 	.word	0x50007000
100033a0:	50008000 	.word	0x50008000
100033a4:	50009000 	.word	0x50009000
100033a8:	5000a000 	.word	0x5000a000
100033ac:	5000b000 	.word	0x5000b000
100033b0:	5000c000 	.word	0x5000c000
100033b4:	54004000 	.word	0x54004000
100033b8:	2300      	movs	r3, #0
100033ba:	69fa      	ldr	r2, [r7, #28]
100033bc:	f002 0203 	and.w	r2, r2, #3
100033c0:	00d2      	lsls	r2, r2, #3
100033c2:	4093      	lsls	r3, r2
100033c4:	461a      	mov	r2, r3
100033c6:	69bb      	ldr	r3, [r7, #24]
100033c8:	4313      	orrs	r3, r2
100033ca:	61bb      	str	r3, [r7, #24]
        EXTI->EXTICR[position >> 2U] = temp;
100033cc:	4934      	ldr	r1, [pc, #208]	; (100034a0 <HAL_GPIO_Init+0x350>)
100033ce:	69fb      	ldr	r3, [r7, #28]
100033d0:	089b      	lsrs	r3, r3, #2
100033d2:	3318      	adds	r3, #24
100033d4:	69ba      	ldr	r2, [r7, #24]
100033d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
100033da:	697b      	ldr	r3, [r7, #20]
100033dc:	681b      	ldr	r3, [r3, #0]
100033de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
100033e0:	68fb      	ldr	r3, [r7, #12]
100033e2:	43db      	mvns	r3, r3
100033e4:	69ba      	ldr	r2, [r7, #24]
100033e6:	4013      	ands	r3, r2
100033e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
100033ea:	683b      	ldr	r3, [r7, #0]
100033ec:	685b      	ldr	r3, [r3, #4]
100033ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
100033f2:	2b00      	cmp	r3, #0
100033f4:	d003      	beq.n	100033fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
100033f6:	69ba      	ldr	r2, [r7, #24]
100033f8:	68fb      	ldr	r3, [r7, #12]
100033fa:	4313      	orrs	r3, r2
100033fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
100033fe:	697b      	ldr	r3, [r7, #20]
10003400:	69ba      	ldr	r2, [r7, #24]
10003402:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
10003404:	697b      	ldr	r3, [r7, #20]
10003406:	685b      	ldr	r3, [r3, #4]
10003408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
1000340a:	68fb      	ldr	r3, [r7, #12]
1000340c:	43db      	mvns	r3, r3
1000340e:	69ba      	ldr	r2, [r7, #24]
10003410:	4013      	ands	r3, r2
10003412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
10003414:	683b      	ldr	r3, [r7, #0]
10003416:	685b      	ldr	r3, [r3, #4]
10003418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
1000341c:	2b00      	cmp	r3, #0
1000341e:	d003      	beq.n	10003428 <HAL_GPIO_Init+0x2d8>
        {
          temp |= iocurrent;
10003420:	69ba      	ldr	r2, [r7, #24]
10003422:	68fb      	ldr	r3, [r7, #12]
10003424:	4313      	orrs	r3, r2
10003426:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
10003428:	697b      	ldr	r3, [r7, #20]
1000342a:	69ba      	ldr	r2, [r7, #24]
1000342c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
1000342e:	4b1c      	ldr	r3, [pc, #112]	; (100034a0 <HAL_GPIO_Init+0x350>)
10003430:	681b      	ldr	r3, [r3, #0]
10003432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10003434:	68fb      	ldr	r3, [r7, #12]
10003436:	43db      	mvns	r3, r3
10003438:	69ba      	ldr	r2, [r7, #24]
1000343a:	4013      	ands	r3, r2
1000343c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
1000343e:	683b      	ldr	r3, [r7, #0]
10003440:	685b      	ldr	r3, [r3, #4]
10003442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
10003446:	2b00      	cmp	r3, #0
10003448:	d003      	beq.n	10003452 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
1000344a:	69ba      	ldr	r2, [r7, #24]
1000344c:	68fb      	ldr	r3, [r7, #12]
1000344e:	4313      	orrs	r3, r2
10003450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
10003452:	4a13      	ldr	r2, [pc, #76]	; (100034a0 <HAL_GPIO_Init+0x350>)
10003454:	69bb      	ldr	r3, [r7, #24]
10003456:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
10003458:	4b11      	ldr	r3, [pc, #68]	; (100034a0 <HAL_GPIO_Init+0x350>)
1000345a:	685b      	ldr	r3, [r3, #4]
1000345c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
1000345e:	68fb      	ldr	r3, [r7, #12]
10003460:	43db      	mvns	r3, r3
10003462:	69ba      	ldr	r2, [r7, #24]
10003464:	4013      	ands	r3, r2
10003466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
10003468:	683b      	ldr	r3, [r7, #0]
1000346a:	685b      	ldr	r3, [r3, #4]
1000346c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
10003470:	2b00      	cmp	r3, #0
10003472:	d003      	beq.n	1000347c <HAL_GPIO_Init+0x32c>
        {
          temp |= iocurrent;
10003474:	69ba      	ldr	r2, [r7, #24]
10003476:	68fb      	ldr	r3, [r7, #12]
10003478:	4313      	orrs	r3, r2
1000347a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
1000347c:	4a08      	ldr	r2, [pc, #32]	; (100034a0 <HAL_GPIO_Init+0x350>)
1000347e:	69bb      	ldr	r3, [r7, #24]
10003480:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
10003482:	69fb      	ldr	r3, [r7, #28]
10003484:	3301      	adds	r3, #1
10003486:	61fb      	str	r3, [r7, #28]
10003488:	69fb      	ldr	r3, [r7, #28]
1000348a:	2b0f      	cmp	r3, #15
1000348c:	f67f ae6a 	bls.w	10003164 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
10003490:	bf00      	nop
10003492:	bf00      	nop
10003494:	3724      	adds	r7, #36	; 0x24
10003496:	46bd      	mov	sp, r7
10003498:	f85d 7b04 	ldr.w	r7, [sp], #4
1000349c:	4770      	bx	lr
1000349e:	bf00      	nop
100034a0:	5000d000 	.word	0x5000d000

100034a4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
100034a4:	b580      	push	{r7, lr}
100034a6:	b084      	sub	sp, #16
100034a8:	af00      	add	r7, sp, #0
100034aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
100034ac:	2300      	movs	r3, #0
100034ae:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
100034b0:	687b      	ldr	r3, [r7, #4]
100034b2:	2b00      	cmp	r3, #0
100034b4:	d01e      	beq.n	100034f4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

#if defined(CORE_CM4)
    IPCC_CommonTypeDef *currentInstance = IPCC_C2;
100034b6:	4b13      	ldr	r3, [pc, #76]	; (10003504 <HAL_IPCC_Init+0x60>)
100034b8:	60bb      	str	r3, [r7, #8]
#else
    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

    if (hipcc->State == HAL_IPCC_STATE_RESET)
100034ba:	687b      	ldr	r3, [r7, #4]
100034bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
100034c0:	b2db      	uxtb	r3, r3
100034c2:	2b00      	cmp	r3, #0
100034c4:	d102      	bne.n	100034cc <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
100034c6:	6878      	ldr	r0, [r7, #4]
100034c8:	f7fe f804 	bl	100014d4 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
100034cc:	68b8      	ldr	r0, [r7, #8]
100034ce:	f000 f9eb 	bl	100038a8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
100034d2:	68bb      	ldr	r3, [r7, #8]
100034d4:	681b      	ldr	r3, [r3, #0]
100034d6:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
100034da:	68bb      	ldr	r3, [r7, #8]
100034dc:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
100034de:	6878      	ldr	r0, [r7, #4]
100034e0:	f000 f9bc 	bl	1000385c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
100034e4:	687b      	ldr	r3, [r7, #4]
100034e6:	2200      	movs	r2, #0
100034e8:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
100034ea:	687b      	ldr	r3, [r7, #4]
100034ec:	2201      	movs	r2, #1
100034ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
100034f2:	e001      	b.n	100034f8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
100034f4:	2301      	movs	r3, #1
100034f6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
100034f8:	7bfb      	ldrb	r3, [r7, #15]
}
100034fa:	4618      	mov	r0, r3
100034fc:	3710      	adds	r7, #16
100034fe:	46bd      	mov	sp, r7
10003500:	bd80      	pop	{r7, pc}
10003502:	bf00      	nop
10003504:	4c001010 	.word	0x4c001010

10003508 <HAL_IPCC_ActivateNotification>:
  * @param  ChannelDir Channel direction
  * @param  cb Interrupt callback
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_ActivateNotification(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir, ChannelCb cb)
{
10003508:	b580      	push	{r7, lr}
1000350a:	b086      	sub	sp, #24
1000350c:	af00      	add	r7, sp, #0
1000350e:	60f8      	str	r0, [r7, #12]
10003510:	60b9      	str	r1, [r7, #8]
10003512:	603b      	str	r3, [r7, #0]
10003514:	4613      	mov	r3, r2
10003516:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
10003518:	2300      	movs	r3, #0
1000351a:	75fb      	strb	r3, [r7, #23]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
1000351c:	68fb      	ldr	r3, [r7, #12]
1000351e:	2b00      	cmp	r3, #0
10003520:	d039      	beq.n	10003596 <HAL_IPCC_ActivateNotification+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    /* Check IPCC state */
    if (hipcc->State == HAL_IPCC_STATE_READY)
10003522:	68fb      	ldr	r3, [r7, #12]
10003524:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
10003528:	b2db      	uxtb	r3, r3
1000352a:	2b01      	cmp	r3, #1
1000352c:	d130      	bne.n	10003590 <HAL_IPCC_ActivateNotification+0x88>
    {
      /* Set callback and register masking information */
      if (ChannelDir == IPCC_CHANNEL_DIR_TX)
1000352e:	79fb      	ldrb	r3, [r7, #7]
10003530:	2b00      	cmp	r3, #0
10003532:	d113      	bne.n	1000355c <HAL_IPCC_ActivateNotification+0x54>
      {
        hipcc->ChannelCallbackTx[ChannelIndex] = cb;
10003534:	68fa      	ldr	r2, [r7, #12]
10003536:	68bb      	ldr	r3, [r7, #8]
10003538:	3306      	adds	r3, #6
1000353a:	009b      	lsls	r3, r3, #2
1000353c:	4413      	add	r3, r2
1000353e:	683a      	ldr	r2, [r7, #0]
10003540:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10003542:	68fb      	ldr	r3, [r7, #12]
10003544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10003546:	68bb      	ldr	r3, [r7, #8]
10003548:	f003 030f 	and.w	r3, r3, #15
1000354c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
10003550:	fa01 f303 	lsl.w	r3, r1, r3
10003554:	431a      	orrs	r2, r3
10003556:	68fb      	ldr	r3, [r7, #12]
10003558:	635a      	str	r2, [r3, #52]	; 0x34
1000355a:	e010      	b.n	1000357e <HAL_IPCC_ActivateNotification+0x76>
      }
      else
      {
        hipcc->ChannelCallbackRx[ChannelIndex] = cb;
1000355c:	68fa      	ldr	r2, [r7, #12]
1000355e:	68bb      	ldr	r3, [r7, #8]
10003560:	009b      	lsls	r3, r3, #2
10003562:	4413      	add	r3, r2
10003564:	683a      	ldr	r2, [r7, #0]
10003566:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10003568:	68fb      	ldr	r3, [r7, #12]
1000356a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
1000356c:	68bb      	ldr	r3, [r7, #8]
1000356e:	f003 030f 	and.w	r3, r3, #15
10003572:	2101      	movs	r1, #1
10003574:	fa01 f303 	lsl.w	r3, r1, r3
10003578:	431a      	orrs	r2, r3
1000357a:	68fb      	ldr	r3, [r7, #12]
1000357c:	635a      	str	r2, [r3, #52]	; 0x34
      }

      /* Unmask only the channels in reception (Transmission channel mask/unmask is done in HAL_IPCC_NotifyCPU) */
      if (ChannelDir == IPCC_CHANNEL_DIR_RX)
1000357e:	79fb      	ldrb	r3, [r7, #7]
10003580:	2b01      	cmp	r3, #1
10003582:	d10a      	bne.n	1000359a <HAL_IPCC_ActivateNotification+0x92>
      {
        IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
10003584:	79fb      	ldrb	r3, [r7, #7]
10003586:	4619      	mov	r1, r3
10003588:	68b8      	ldr	r0, [r7, #8]
1000358a:	f000 f939 	bl	10003800 <IPCC_UnmaskInterrupt>
1000358e:	e004      	b.n	1000359a <HAL_IPCC_ActivateNotification+0x92>
      }
    }
    else
    {
      err = HAL_ERROR;
10003590:	2301      	movs	r3, #1
10003592:	75fb      	strb	r3, [r7, #23]
10003594:	e001      	b.n	1000359a <HAL_IPCC_ActivateNotification+0x92>
    }
  }
  else
  {
    err = HAL_ERROR;
10003596:	2301      	movs	r3, #1
10003598:	75fb      	strb	r3, [r7, #23]
  }
  return err;
1000359a:	7dfb      	ldrb	r3, [r7, #23]
}
1000359c:	4618      	mov	r0, r3
1000359e:	3718      	adds	r7, #24
100035a0:	46bd      	mov	sp, r7
100035a2:	bd80      	pop	{r7, pc}

100035a4 <HAL_IPCC_GetChannelStatus>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval Channel status
  */
IPCC_CHANNELStatusTypeDef HAL_IPCC_GetChannelStatus(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
100035a4:	b480      	push	{r7}
100035a6:	b089      	sub	sp, #36	; 0x24
100035a8:	af00      	add	r7, sp, #0
100035aa:	60f8      	str	r0, [r7, #12]
100035ac:	60b9      	str	r1, [r7, #8]
100035ae:	4613      	mov	r3, r2
100035b0:	71fb      	strb	r3, [r7, #7]
  uint32_t channel_state;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
100035b2:	4b14      	ldr	r3, [pc, #80]	; (10003604 <HAL_IPCC_GetChannelStatus+0x60>)
100035b4:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
100035b6:	4b14      	ldr	r3, [pc, #80]	; (10003608 <HAL_IPCC_GetChannelStatus+0x64>)
100035b8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Read corresponding channel depending of the MCU and the direction */
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
100035ba:	79fb      	ldrb	r3, [r7, #7]
100035bc:	2b00      	cmp	r3, #0
100035be:	d10a      	bne.n	100035d6 <HAL_IPCC_GetChannelStatus+0x32>
  {
    channel_state = (currentInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
100035c0:	69bb      	ldr	r3, [r7, #24]
100035c2:	68da      	ldr	r2, [r3, #12]
100035c4:	68bb      	ldr	r3, [r7, #8]
100035c6:	f003 030f 	and.w	r3, r3, #15
100035ca:	2101      	movs	r1, #1
100035cc:	fa01 f303 	lsl.w	r3, r1, r3
100035d0:	4013      	ands	r3, r2
100035d2:	61fb      	str	r3, [r7, #28]
100035d4:	e009      	b.n	100035ea <HAL_IPCC_GetChannelStatus+0x46>
  }
  else
  {
    channel_state = (otherInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
100035d6:	697b      	ldr	r3, [r7, #20]
100035d8:	68da      	ldr	r2, [r3, #12]
100035da:	68bb      	ldr	r3, [r7, #8]
100035dc:	f003 030f 	and.w	r3, r3, #15
100035e0:	2101      	movs	r1, #1
100035e2:	fa01 f303 	lsl.w	r3, r1, r3
100035e6:	4013      	ands	r3, r2
100035e8:	61fb      	str	r3, [r7, #28]
  }

  return (channel_state == 0UL) ? IPCC_CHANNEL_STATUS_FREE : IPCC_CHANNEL_STATUS_OCCUPIED ;
100035ea:	69fb      	ldr	r3, [r7, #28]
100035ec:	2b00      	cmp	r3, #0
100035ee:	bf14      	ite	ne
100035f0:	2301      	movne	r3, #1
100035f2:	2300      	moveq	r3, #0
100035f4:	b2db      	uxtb	r3, r3
}
100035f6:	4618      	mov	r0, r3
100035f8:	3724      	adds	r7, #36	; 0x24
100035fa:	46bd      	mov	sp, r7
100035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
10003600:	4770      	bx	lr
10003602:	bf00      	nop
10003604:	4c001010 	.word	0x4c001010
10003608:	4c001000 	.word	0x4c001000

1000360c <HAL_IPCC_NotifyCPU>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_NotifyCPU(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
1000360c:	b580      	push	{r7, lr}
1000360e:	b088      	sub	sp, #32
10003610:	af00      	add	r7, sp, #0
10003612:	60f8      	str	r0, [r7, #12]
10003614:	60b9      	str	r1, [r7, #8]
10003616:	4613      	mov	r3, r2
10003618:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
1000361a:	2300      	movs	r3, #0
1000361c:	77fb      	strb	r3, [r7, #31]
  uint32_t mask;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
1000361e:	4b1d      	ldr	r3, [pc, #116]	; (10003694 <HAL_IPCC_NotifyCPU+0x88>)
10003620:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Check if IPCC is initiliased */
  if (hipcc->State == HAL_IPCC_STATE_READY)
10003622:	68fb      	ldr	r3, [r7, #12]
10003624:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
10003628:	b2db      	uxtb	r3, r3
1000362a:	2b01      	cmp	r3, #1
1000362c:	d12a      	bne.n	10003684 <HAL_IPCC_NotifyCPU+0x78>
  {
    /* For IPCC_CHANNEL_DIR_TX, set the status. For IPCC_CHANNEL_DIR_RX, clear the status */
    currentInstance->SCR |= ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_SCR_CH1S : IPCC_SCR_CH1C) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
1000362e:	69bb      	ldr	r3, [r7, #24]
10003630:	689a      	ldr	r2, [r3, #8]
10003632:	79fb      	ldrb	r3, [r7, #7]
10003634:	2b00      	cmp	r3, #0
10003636:	d102      	bne.n	1000363e <HAL_IPCC_NotifyCPU+0x32>
10003638:	f44f 3180 	mov.w	r1, #65536	; 0x10000
1000363c:	e000      	b.n	10003640 <HAL_IPCC_NotifyCPU+0x34>
1000363e:	2101      	movs	r1, #1
10003640:	68bb      	ldr	r3, [r7, #8]
10003642:	f003 030f 	and.w	r3, r3, #15
10003646:	fa01 f303 	lsl.w	r3, r1, r3
1000364a:	431a      	orrs	r2, r3
1000364c:	69bb      	ldr	r3, [r7, #24]
1000364e:	609a      	str	r2, [r3, #8]

    /* Unmask interrupt if the callback is requested */
    mask = ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_MR_CH1FM_Msk : IPCC_MR_CH1OM_Msk) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
10003650:	79fb      	ldrb	r3, [r7, #7]
10003652:	2b00      	cmp	r3, #0
10003654:	d102      	bne.n	1000365c <HAL_IPCC_NotifyCPU+0x50>
10003656:	f44f 3280 	mov.w	r2, #65536	; 0x10000
1000365a:	e000      	b.n	1000365e <HAL_IPCC_NotifyCPU+0x52>
1000365c:	2201      	movs	r2, #1
1000365e:	68bb      	ldr	r3, [r7, #8]
10003660:	f003 030f 	and.w	r3, r3, #15
10003664:	fa02 f303 	lsl.w	r3, r2, r3
10003668:	617b      	str	r3, [r7, #20]
    if ((hipcc->callbackRequest & mask) == mask)
1000366a:	68fb      	ldr	r3, [r7, #12]
1000366c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
1000366e:	697b      	ldr	r3, [r7, #20]
10003670:	4013      	ands	r3, r2
10003672:	697a      	ldr	r2, [r7, #20]
10003674:	429a      	cmp	r2, r3
10003676:	d107      	bne.n	10003688 <HAL_IPCC_NotifyCPU+0x7c>
    {
      IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
10003678:	79fb      	ldrb	r3, [r7, #7]
1000367a:	4619      	mov	r1, r3
1000367c:	68b8      	ldr	r0, [r7, #8]
1000367e:	f000 f8bf 	bl	10003800 <IPCC_UnmaskInterrupt>
10003682:	e001      	b.n	10003688 <HAL_IPCC_NotifyCPU+0x7c>
    }
  }
  else
  {
    err = HAL_ERROR;
10003684:	2301      	movs	r3, #1
10003686:	77fb      	strb	r3, [r7, #31]
  }

  return err;
10003688:	7ffb      	ldrb	r3, [r7, #31]
}
1000368a:	4618      	mov	r0, r3
1000368c:	3720      	adds	r7, #32
1000368e:	46bd      	mov	sp, r7
10003690:	bd80      	pop	{r7, pc}
10003692:	bf00      	nop
10003694:	4c001010 	.word	0x4c001010

10003698 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
10003698:	b580      	push	{r7, lr}
1000369a:	b086      	sub	sp, #24
1000369c:	af00      	add	r7, sp, #0
1000369e:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
100036a0:	2300      	movs	r3, #0
100036a2:	613b      	str	r3, [r7, #16]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
100036a4:	4b22      	ldr	r3, [pc, #136]	; (10003730 <HAL_IPCC_TX_IRQHandler+0x98>)
100036a6:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
100036a8:	68fb      	ldr	r3, [r7, #12]
100036aa:	685b      	ldr	r3, [r3, #4]
100036ac:	43db      	mvns	r3, r3
100036ae:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
100036b2:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
100036b4:	68fb      	ldr	r3, [r7, #12]
100036b6:	68db      	ldr	r3, [r3, #12]
100036b8:	041b      	lsls	r3, r3, #16
100036ba:	43db      	mvns	r3, r3
100036bc:	697a      	ldr	r2, [r7, #20]
100036be:	4013      	ands	r3, r2
100036c0:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
100036c2:	e02c      	b.n	1000371e <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_Msk));
100036c4:	693b      	ldr	r3, [r7, #16]
100036c6:	f003 030f 	and.w	r3, r3, #15
100036ca:	3310      	adds	r3, #16
100036cc:	2201      	movs	r2, #1
100036ce:	fa02 f303 	lsl.w	r3, r2, r3
100036d2:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
100036d4:	697a      	ldr	r2, [r7, #20]
100036d6:	68bb      	ldr	r3, [r7, #8]
100036d8:	4013      	ands	r3, r2
100036da:	2b00      	cmp	r3, #0
100036dc:	d01c      	beq.n	10003718 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
100036de:	68fb      	ldr	r3, [r7, #12]
100036e0:	685a      	ldr	r2, [r3, #4]
100036e2:	68bb      	ldr	r3, [r7, #8]
100036e4:	431a      	orrs	r2, r3
100036e6:	68fb      	ldr	r3, [r7, #12]
100036e8:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
100036ea:	687a      	ldr	r2, [r7, #4]
100036ec:	693b      	ldr	r3, [r7, #16]
100036ee:	3306      	adds	r3, #6
100036f0:	009b      	lsls	r3, r3, #2
100036f2:	4413      	add	r3, r2
100036f4:	685b      	ldr	r3, [r3, #4]
100036f6:	2b00      	cmp	r3, #0
100036f8:	d009      	beq.n	1000370e <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
100036fa:	687a      	ldr	r2, [r7, #4]
100036fc:	693b      	ldr	r3, [r7, #16]
100036fe:	3306      	adds	r3, #6
10003700:	009b      	lsls	r3, r3, #2
10003702:	4413      	add	r3, r2
10003704:	685b      	ldr	r3, [r3, #4]
10003706:	2200      	movs	r2, #0
10003708:	6939      	ldr	r1, [r7, #16]
1000370a:	6878      	ldr	r0, [r7, #4]
1000370c:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
1000370e:	68bb      	ldr	r3, [r7, #8]
10003710:	43db      	mvns	r3, r3
10003712:	697a      	ldr	r2, [r7, #20]
10003714:	4013      	ands	r3, r2
10003716:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
10003718:	693b      	ldr	r3, [r7, #16]
1000371a:	3301      	adds	r3, #1
1000371c:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
1000371e:	697b      	ldr	r3, [r7, #20]
10003720:	2b00      	cmp	r3, #0
10003722:	d1cf      	bne.n	100036c4 <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
10003724:	bf00      	nop
10003726:	bf00      	nop
10003728:	3718      	adds	r7, #24
1000372a:	46bd      	mov	sp, r7
1000372c:	bd80      	pop	{r7, pc}
1000372e:	bf00      	nop
10003730:	4c001010 	.word	0x4c001010

10003734 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
10003734:	b580      	push	{r7, lr}
10003736:	b088      	sub	sp, #32
10003738:	af00      	add	r7, sp, #0
1000373a:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
1000373c:	2300      	movs	r3, #0
1000373e:	61bb      	str	r3, [r7, #24]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10003740:	4b20      	ldr	r3, [pc, #128]	; (100037c4 <HAL_IPCC_RX_IRQHandler+0x90>)
10003742:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
10003744:	4b20      	ldr	r3, [pc, #128]	; (100037c8 <HAL_IPCC_RX_IRQHandler+0x94>)
10003746:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
#endif

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
10003748:	697b      	ldr	r3, [r7, #20]
1000374a:	685b      	ldr	r3, [r3, #4]
1000374c:	43db      	mvns	r3, r3
1000374e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10003752:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
10003754:	693b      	ldr	r3, [r7, #16]
10003756:	68db      	ldr	r3, [r3, #12]
10003758:	69fa      	ldr	r2, [r7, #28]
1000375a:	4013      	ands	r3, r2
1000375c:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
1000375e:	e029      	b.n	100037b4 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
10003760:	69bb      	ldr	r3, [r7, #24]
10003762:	f003 030f 	and.w	r3, r3, #15
10003766:	2201      	movs	r2, #1
10003768:	fa02 f303 	lsl.w	r3, r2, r3
1000376c:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
1000376e:	69fa      	ldr	r2, [r7, #28]
10003770:	68fb      	ldr	r3, [r7, #12]
10003772:	4013      	ands	r3, r2
10003774:	2b00      	cmp	r3, #0
10003776:	d01a      	beq.n	100037ae <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
10003778:	697b      	ldr	r3, [r7, #20]
1000377a:	685a      	ldr	r2, [r3, #4]
1000377c:	68fb      	ldr	r3, [r7, #12]
1000377e:	431a      	orrs	r2, r3
10003780:	697b      	ldr	r3, [r7, #20]
10003782:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
10003784:	687a      	ldr	r2, [r7, #4]
10003786:	69bb      	ldr	r3, [r7, #24]
10003788:	009b      	lsls	r3, r3, #2
1000378a:	4413      	add	r3, r2
1000378c:	685b      	ldr	r3, [r3, #4]
1000378e:	2b00      	cmp	r3, #0
10003790:	d008      	beq.n	100037a4 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
10003792:	687a      	ldr	r2, [r7, #4]
10003794:	69bb      	ldr	r3, [r7, #24]
10003796:	009b      	lsls	r3, r3, #2
10003798:	4413      	add	r3, r2
1000379a:	685b      	ldr	r3, [r3, #4]
1000379c:	2201      	movs	r2, #1
1000379e:	69b9      	ldr	r1, [r7, #24]
100037a0:	6878      	ldr	r0, [r7, #4]
100037a2:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
100037a4:	68fb      	ldr	r3, [r7, #12]
100037a6:	43db      	mvns	r3, r3
100037a8:	69fa      	ldr	r2, [r7, #28]
100037aa:	4013      	ands	r3, r2
100037ac:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
100037ae:	69bb      	ldr	r3, [r7, #24]
100037b0:	3301      	adds	r3, #1
100037b2:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
100037b4:	69fb      	ldr	r3, [r7, #28]
100037b6:	2b00      	cmp	r3, #0
100037b8:	d1d2      	bne.n	10003760 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
100037ba:	bf00      	nop
100037bc:	bf00      	nop
100037be:	3720      	adds	r7, #32
100037c0:	46bd      	mov	sp, r7
100037c2:	bd80      	pop	{r7, pc}
100037c4:	4c001010 	.word	0x4c001010
100037c8:	4c001000 	.word	0x4c001000

100037cc <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
100037cc:	b480      	push	{r7}
100037ce:	b085      	sub	sp, #20
100037d0:	af00      	add	r7, sp, #0
100037d2:	60f8      	str	r0, [r7, #12]
100037d4:	60b9      	str	r1, [r7, #8]
100037d6:	4613      	mov	r3, r2
100037d8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
100037da:	bf00      	nop
100037dc:	3714      	adds	r7, #20
100037de:	46bd      	mov	sp, r7
100037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
100037e4:	4770      	bx	lr

100037e6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
100037e6:	b480      	push	{r7}
100037e8:	b085      	sub	sp, #20
100037ea:	af00      	add	r7, sp, #0
100037ec:	60f8      	str	r0, [r7, #12]
100037ee:	60b9      	str	r1, [r7, #8]
100037f0:	4613      	mov	r3, r2
100037f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
100037f4:	bf00      	nop
100037f6:	3714      	adds	r7, #20
100037f8:	46bd      	mov	sp, r7
100037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
100037fe:	4770      	bx	lr

10003800 <IPCC_UnmaskInterrupt>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  */
void IPCC_UnmaskInterrupt(uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10003800:	b480      	push	{r7}
10003802:	b085      	sub	sp, #20
10003804:	af00      	add	r7, sp, #0
10003806:	6078      	str	r0, [r7, #4]
10003808:	460b      	mov	r3, r1
1000380a:	70fb      	strb	r3, [r7, #3]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
1000380c:	4b12      	ldr	r3, [pc, #72]	; (10003858 <IPCC_UnmaskInterrupt+0x58>)
1000380e:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10003810:	78fb      	ldrb	r3, [r7, #3]
10003812:	2b00      	cmp	r3, #0
10003814:	d10d      	bne.n	10003832 <IPCC_UnmaskInterrupt+0x32>
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10003816:	68fb      	ldr	r3, [r7, #12]
10003818:	685a      	ldr	r2, [r3, #4]
1000381a:	687b      	ldr	r3, [r7, #4]
1000381c:	f003 030f 	and.w	r3, r3, #15
10003820:	f44f 3180 	mov.w	r1, #65536	; 0x10000
10003824:	fa01 f303 	lsl.w	r3, r1, r3
10003828:	43db      	mvns	r3, r3
1000382a:	401a      	ands	r2, r3
1000382c:	68fb      	ldr	r3, [r7, #12]
1000382e:	605a      	str	r2, [r3, #4]
  else
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
  }
}
10003830:	e00b      	b.n	1000384a <IPCC_UnmaskInterrupt+0x4a>
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10003832:	68fb      	ldr	r3, [r7, #12]
10003834:	685a      	ldr	r2, [r3, #4]
10003836:	687b      	ldr	r3, [r7, #4]
10003838:	f003 030f 	and.w	r3, r3, #15
1000383c:	2101      	movs	r1, #1
1000383e:	fa01 f303 	lsl.w	r3, r1, r3
10003842:	43db      	mvns	r3, r3
10003844:	401a      	ands	r2, r3
10003846:	68fb      	ldr	r3, [r7, #12]
10003848:	605a      	str	r2, [r3, #4]
}
1000384a:	bf00      	nop
1000384c:	3714      	adds	r7, #20
1000384e:	46bd      	mov	sp, r7
10003850:	f85d 7b04 	ldr.w	r7, [sp], #4
10003854:	4770      	bx	lr
10003856:	bf00      	nop
10003858:	4c001010 	.word	0x4c001010

1000385c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
1000385c:	b480      	push	{r7}
1000385e:	b085      	sub	sp, #20
10003860:	af00      	add	r7, sp, #0
10003862:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
10003864:	2300      	movs	r3, #0
10003866:	60fb      	str	r3, [r7, #12]
10003868:	e00f      	b.n	1000388a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
1000386a:	687a      	ldr	r2, [r7, #4]
1000386c:	68fb      	ldr	r3, [r7, #12]
1000386e:	009b      	lsls	r3, r3, #2
10003870:	4413      	add	r3, r2
10003872:	4a0b      	ldr	r2, [pc, #44]	; (100038a0 <IPCC_SetDefaultCallbacks+0x44>)
10003874:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
10003876:	687a      	ldr	r2, [r7, #4]
10003878:	68fb      	ldr	r3, [r7, #12]
1000387a:	3306      	adds	r3, #6
1000387c:	009b      	lsls	r3, r3, #2
1000387e:	4413      	add	r3, r2
10003880:	4a08      	ldr	r2, [pc, #32]	; (100038a4 <IPCC_SetDefaultCallbacks+0x48>)
10003882:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
10003884:	68fb      	ldr	r3, [r7, #12]
10003886:	3301      	adds	r3, #1
10003888:	60fb      	str	r3, [r7, #12]
1000388a:	68fb      	ldr	r3, [r7, #12]
1000388c:	2b05      	cmp	r3, #5
1000388e:	d9ec      	bls.n	1000386a <IPCC_SetDefaultCallbacks+0xe>
  }
}
10003890:	bf00      	nop
10003892:	bf00      	nop
10003894:	3714      	adds	r7, #20
10003896:	46bd      	mov	sp, r7
10003898:	f85d 7b04 	ldr.w	r7, [sp], #4
1000389c:	4770      	bx	lr
1000389e:	bf00      	nop
100038a0:	100037cd 	.word	0x100037cd
100038a4:	100037e7 	.word	0x100037e7

100038a8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
100038a8:	b480      	push	{r7}
100038aa:	b083      	sub	sp, #12
100038ac:	af00      	add	r7, sp, #0
100038ae:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
100038b0:	687b      	ldr	r3, [r7, #4]
100038b2:	2200      	movs	r2, #0
100038b4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
100038b6:	687b      	ldr	r3, [r7, #4]
100038b8:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
100038bc:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
100038be:	687b      	ldr	r3, [r7, #4]
100038c0:	223f      	movs	r2, #63	; 0x3f
100038c2:	609a      	str	r2, [r3, #8]
}
100038c4:	bf00      	nop
100038c6:	370c      	adds	r7, #12
100038c8:	46bd      	mov	sp, r7
100038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
100038ce:	4770      	bx	lr

100038d0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
100038d0:	b480      	push	{r7}
100038d2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
100038d4:	4b05      	ldr	r3, [pc, #20]	; (100038ec <HAL_PWR_EnableBkUpAccess+0x1c>)
100038d6:	681b      	ldr	r3, [r3, #0]
100038d8:	4a04      	ldr	r2, [pc, #16]	; (100038ec <HAL_PWR_EnableBkUpAccess+0x1c>)
100038da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
100038de:	6013      	str	r3, [r2, #0]
}
100038e0:	bf00      	nop
100038e2:	46bd      	mov	sp, r7
100038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
100038e8:	4770      	bx	lr
100038ea:	bf00      	nop
100038ec:	50001000 	.word	0x50001000

100038f0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
100038f0:	b580      	push	{r7, lr}
100038f2:	b084      	sub	sp, #16
100038f4:	af00      	add	r7, sp, #0
100038f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
100038f8:	2300      	movs	r3, #0
100038fa:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
100038fc:	687b      	ldr	r3, [r7, #4]
100038fe:	2b00      	cmp	r3, #0
10003900:	d101      	bne.n	10003906 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
10003902:	2301      	movs	r3, #1
10003904:	e320      	b.n	10003f48 <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10003906:	687b      	ldr	r3, [r7, #4]
10003908:	681b      	ldr	r3, [r3, #0]
1000390a:	f003 0301 	and.w	r3, r3, #1
1000390e:	2b00      	cmp	r3, #0
10003910:	f000 8081 	beq.w	10003a16 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
10003914:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003918:	6a1b      	ldr	r3, [r3, #32]
1000391a:	f003 0303 	and.w	r3, r3, #3
1000391e:	2b01      	cmp	r3, #1
10003920:	d107      	bne.n	10003932 <HAL_RCC_OscConfig+0x42>
10003922:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003926:	6a1b      	ldr	r3, [r3, #32]
10003928:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000392c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003930:	d054      	beq.n	100039dc <HAL_RCC_OscConfig+0xec>
10003932:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003938:	f003 0307 	and.w	r3, r3, #7
1000393c:	2b01      	cmp	r3, #1
1000393e:	d107      	bne.n	10003950 <HAL_RCC_OscConfig+0x60>
10003940:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003946:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000394a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000394e:	d045      	beq.n	100039dc <HAL_RCC_OscConfig+0xec>
10003950:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003956:	f003 0303 	and.w	r3, r3, #3
1000395a:	2b01      	cmp	r3, #1
1000395c:	d107      	bne.n	1000396e <HAL_RCC_OscConfig+0x7e>
1000395e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003964:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003968:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000396c:	d036      	beq.n	100039dc <HAL_RCC_OscConfig+0xec>
1000396e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10003974:	f003 0303 	and.w	r3, r3, #3
10003978:	2b01      	cmp	r3, #1
1000397a:	d10f      	bne.n	1000399c <HAL_RCC_OscConfig+0xac>
1000397c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003980:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10003984:	f003 0302 	and.w	r3, r3, #2
10003988:	2b02      	cmp	r3, #2
1000398a:	d027      	beq.n	100039dc <HAL_RCC_OscConfig+0xec>
1000398c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10003994:	f003 0302 	and.w	r3, r3, #2
10003998:	2b02      	cmp	r3, #2
1000399a:	d01f      	beq.n	100039dc <HAL_RCC_OscConfig+0xec>
1000399c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039a0:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
100039a4:	f003 0303 	and.w	r3, r3, #3
100039a8:	2b01      	cmp	r3, #1
100039aa:	d107      	bne.n	100039bc <HAL_RCC_OscConfig+0xcc>
100039ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039b0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100039b4:	f003 0302 	and.w	r3, r3, #2
100039b8:	2b02      	cmp	r3, #2
100039ba:	d00f      	beq.n	100039dc <HAL_RCC_OscConfig+0xec>
100039bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039c0:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
100039c4:	f003 0303 	and.w	r3, r3, #3
100039c8:	2b01      	cmp	r3, #1
100039ca:	d117      	bne.n	100039fc <HAL_RCC_OscConfig+0x10c>
100039cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039d0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100039d4:	f003 0302 	and.w	r3, r3, #2
100039d8:	2b02      	cmp	r3, #2
100039da:	d10f      	bne.n	100039fc <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
100039dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039e0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100039e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
100039e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100039ec:	d112      	bne.n	10003a14 <HAL_RCC_OscConfig+0x124>
100039ee:	687b      	ldr	r3, [r7, #4]
100039f0:	685b      	ldr	r3, [r3, #4]
100039f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100039f6:	d00d      	beq.n	10003a14 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
100039f8:	2301      	movs	r3, #1
100039fa:	e2a5      	b.n	10003f48 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
100039fc:	687b      	ldr	r3, [r7, #4]
100039fe:	685b      	ldr	r3, [r3, #4]
10003a00:	4618      	mov	r0, r3
10003a02:	f000 faa7 	bl	10003f54 <HAL_RCC_HSEConfig>
10003a06:	4603      	mov	r3, r0
10003a08:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
10003a0a:	7bfb      	ldrb	r3, [r7, #15]
10003a0c:	2b00      	cmp	r3, #0
10003a0e:	d002      	beq.n	10003a16 <HAL_RCC_OscConfig+0x126>
      {
        return result;
10003a10:	7bfb      	ldrb	r3, [r7, #15]
10003a12:	e299      	b.n	10003f48 <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10003a14:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10003a16:	687b      	ldr	r3, [r7, #4]
10003a18:	681b      	ldr	r3, [r3, #0]
10003a1a:	f003 0302 	and.w	r3, r3, #2
10003a1e:	2b00      	cmp	r3, #0
10003a20:	f000 814e 	beq.w	10003cc0 <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
10003a24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a28:	6a1b      	ldr	r3, [r3, #32]
10003a2a:	f003 0303 	and.w	r3, r3, #3
10003a2e:	2b00      	cmp	r3, #0
10003a30:	d107      	bne.n	10003a42 <HAL_RCC_OscConfig+0x152>
10003a32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a36:	6a1b      	ldr	r3, [r3, #32]
10003a38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003a3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003a40:	d055      	beq.n	10003aee <HAL_RCC_OscConfig+0x1fe>
10003a42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003a48:	f003 0307 	and.w	r3, r3, #7
10003a4c:	2b00      	cmp	r3, #0
10003a4e:	d107      	bne.n	10003a60 <HAL_RCC_OscConfig+0x170>
10003a50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003a56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003a5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003a5e:	d046      	beq.n	10003aee <HAL_RCC_OscConfig+0x1fe>
10003a60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003a66:	f003 0303 	and.w	r3, r3, #3
10003a6a:	2b00      	cmp	r3, #0
10003a6c:	d107      	bne.n	10003a7e <HAL_RCC_OscConfig+0x18e>
10003a6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003a74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003a78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003a7c:	d037      	beq.n	10003aee <HAL_RCC_OscConfig+0x1fe>
10003a7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10003a84:	f003 0303 	and.w	r3, r3, #3
10003a88:	2b00      	cmp	r3, #0
10003a8a:	d10f      	bne.n	10003aac <HAL_RCC_OscConfig+0x1bc>
10003a8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10003a94:	f003 0302 	and.w	r3, r3, #2
10003a98:	2b02      	cmp	r3, #2
10003a9a:	d028      	beq.n	10003aee <HAL_RCC_OscConfig+0x1fe>
10003a9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10003aa4:	f003 0302 	and.w	r3, r3, #2
10003aa8:	2b02      	cmp	r3, #2
10003aaa:	d020      	beq.n	10003aee <HAL_RCC_OscConfig+0x1fe>
10003aac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ab0:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10003ab4:	f003 0303 	and.w	r3, r3, #3
10003ab8:	2b00      	cmp	r3, #0
10003aba:	d107      	bne.n	10003acc <HAL_RCC_OscConfig+0x1dc>
10003abc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ac0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003ac4:	f003 0302 	and.w	r3, r3, #2
10003ac8:	2b02      	cmp	r3, #2
10003aca:	d010      	beq.n	10003aee <HAL_RCC_OscConfig+0x1fe>
10003acc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ad0:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10003ad4:	f003 0303 	and.w	r3, r3, #3
10003ad8:	2b00      	cmp	r3, #0
10003ada:	f040 8088 	bne.w	10003bee <HAL_RCC_OscConfig+0x2fe>
10003ade:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ae2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003ae6:	f003 0302 	and.w	r3, r3, #2
10003aea:	2b02      	cmp	r3, #2
10003aec:	d17f      	bne.n	10003bee <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10003aee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003af2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003af6:	f003 0301 	and.w	r3, r3, #1
10003afa:	2b01      	cmp	r3, #1
10003afc:	d105      	bne.n	10003b0a <HAL_RCC_OscConfig+0x21a>
10003afe:	687b      	ldr	r3, [r7, #4]
10003b00:	68db      	ldr	r3, [r3, #12]
10003b02:	2b01      	cmp	r3, #1
10003b04:	d001      	beq.n	10003b0a <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
10003b06:	2301      	movs	r3, #1
10003b08:	e21e      	b.n	10003f48 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10003b0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b0e:	699b      	ldr	r3, [r3, #24]
10003b10:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
10003b14:	687b      	ldr	r3, [r7, #4]
10003b16:	691b      	ldr	r3, [r3, #16]
10003b18:	021b      	lsls	r3, r3, #8
10003b1a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003b1e:	4313      	orrs	r3, r2
10003b20:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10003b22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10003b28:	f003 0303 	and.w	r3, r3, #3
10003b2c:	2b00      	cmp	r3, #0
10003b2e:	d10f      	bne.n	10003b50 <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10003b30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10003b38:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10003b3c:	2b02      	cmp	r3, #2
10003b3e:	d047      	beq.n	10003bd0 <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10003b40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10003b48:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10003b4c:	2b02      	cmp	r3, #2
10003b4e:	d03f      	beq.n	10003bd0 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10003b50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b54:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10003b58:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10003b5c:	2b00      	cmp	r3, #0
10003b5e:	d107      	bne.n	10003b70 <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10003b60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b64:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003b68:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10003b6c:	2b02      	cmp	r3, #2
10003b6e:	d02f      	beq.n	10003bd0 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10003b70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b74:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10003b78:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10003b7c:	2b00      	cmp	r3, #0
10003b7e:	d107      	bne.n	10003b90 <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
10003b80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b84:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003b88:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10003b8c:	2b02      	cmp	r3, #2
10003b8e:	d01f      	beq.n	10003bd0 <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10003b90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b94:	699b      	ldr	r3, [r3, #24]
10003b96:	f023 0203 	bic.w	r2, r3, #3
10003b9a:	687b      	ldr	r3, [r7, #4]
10003b9c:	695b      	ldr	r3, [r3, #20]
10003b9e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003ba2:	4313      	orrs	r3, r2
10003ba4:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
10003ba6:	f7fd fe1f 	bl	100017e8 <HAL_GetTick>
10003baa:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10003bac:	e008      	b.n	10003bc0 <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10003bae:	f7fd fe1b 	bl	100017e8 <HAL_GetTick>
10003bb2:	4602      	mov	r2, r0
10003bb4:	68bb      	ldr	r3, [r7, #8]
10003bb6:	1ad3      	subs	r3, r2, r3
10003bb8:	2b64      	cmp	r3, #100	; 0x64
10003bba:	d901      	bls.n	10003bc0 <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
10003bbc:	2303      	movs	r3, #3
10003bbe:	e1c3      	b.n	10003f48 <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10003bc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003bc4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003bc8:	f003 0304 	and.w	r3, r3, #4
10003bcc:	2b04      	cmp	r3, #4
10003bce:	d1ee      	bne.n	10003bae <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
10003bd0:	f001 faca 	bl	10005168 <HAL_RCC_GetSystemCoreClockFreq>
10003bd4:	4603      	mov	r3, r0
10003bd6:	4ab3      	ldr	r2, [pc, #716]	; (10003ea4 <HAL_RCC_OscConfig+0x5b4>)
10003bd8:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
10003bda:	4bb3      	ldr	r3, [pc, #716]	; (10003ea8 <HAL_RCC_OscConfig+0x5b8>)
10003bdc:	681b      	ldr	r3, [r3, #0]
10003bde:	4618      	mov	r0, r3
10003be0:	f7fd fdb8 	bl	10001754 <HAL_InitTick>
10003be4:	4603      	mov	r3, r0
10003be6:	2b00      	cmp	r3, #0
10003be8:	d069      	beq.n	10003cbe <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
10003bea:	2301      	movs	r3, #1
10003bec:	e1ac      	b.n	10003f48 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
10003bee:	687b      	ldr	r3, [r7, #4]
10003bf0:	68db      	ldr	r3, [r3, #12]
10003bf2:	2b00      	cmp	r3, #0
10003bf4:	d049      	beq.n	10003c8a <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
10003bf6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003bfa:	68db      	ldr	r3, [r3, #12]
10003bfc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003c00:	f043 0301 	orr.w	r3, r3, #1
10003c04:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003c06:	f7fd fdef 	bl	100017e8 <HAL_GetTick>
10003c0a:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10003c0c:	e008      	b.n	10003c20 <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10003c0e:	f7fd fdeb 	bl	100017e8 <HAL_GetTick>
10003c12:	4602      	mov	r2, r0
10003c14:	68bb      	ldr	r3, [r7, #8]
10003c16:	1ad3      	subs	r3, r2, r3
10003c18:	2b64      	cmp	r3, #100	; 0x64
10003c1a:	d901      	bls.n	10003c20 <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
10003c1c:	2303      	movs	r3, #3
10003c1e:	e193      	b.n	10003f48 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10003c20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c24:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003c28:	f003 0301 	and.w	r3, r3, #1
10003c2c:	2b01      	cmp	r3, #1
10003c2e:	d1ee      	bne.n	10003c0e <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10003c30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c34:	699b      	ldr	r3, [r3, #24]
10003c36:	f023 0203 	bic.w	r2, r3, #3
10003c3a:	687b      	ldr	r3, [r7, #4]
10003c3c:	695b      	ldr	r3, [r3, #20]
10003c3e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003c42:	4313      	orrs	r3, r2
10003c44:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003c46:	f7fd fdcf 	bl	100017e8 <HAL_GetTick>
10003c4a:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10003c4c:	e008      	b.n	10003c60 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10003c4e:	f7fd fdcb 	bl	100017e8 <HAL_GetTick>
10003c52:	4602      	mov	r2, r0
10003c54:	68bb      	ldr	r3, [r7, #8]
10003c56:	1ad3      	subs	r3, r2, r3
10003c58:	2b64      	cmp	r3, #100	; 0x64
10003c5a:	d901      	bls.n	10003c60 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
10003c5c:	2303      	movs	r3, #3
10003c5e:	e173      	b.n	10003f48 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10003c60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c64:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003c68:	f003 0304 	and.w	r3, r3, #4
10003c6c:	2b04      	cmp	r3, #4
10003c6e:	d1ee      	bne.n	10003c4e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10003c70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c74:	699b      	ldr	r3, [r3, #24]
10003c76:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
10003c7a:	687b      	ldr	r3, [r7, #4]
10003c7c:	691b      	ldr	r3, [r3, #16]
10003c7e:	021b      	lsls	r3, r3, #8
10003c80:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003c84:	4313      	orrs	r3, r2
10003c86:	618b      	str	r3, [r1, #24]
10003c88:	e01a      	b.n	10003cc0 <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
10003c8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c8e:	2201      	movs	r2, #1
10003c90:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003c92:	f7fd fda9 	bl	100017e8 <HAL_GetTick>
10003c96:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10003c98:	e008      	b.n	10003cac <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10003c9a:	f7fd fda5 	bl	100017e8 <HAL_GetTick>
10003c9e:	4602      	mov	r2, r0
10003ca0:	68bb      	ldr	r3, [r7, #8]
10003ca2:	1ad3      	subs	r3, r2, r3
10003ca4:	2b64      	cmp	r3, #100	; 0x64
10003ca6:	d901      	bls.n	10003cac <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
10003ca8:	2303      	movs	r3, #3
10003caa:	e14d      	b.n	10003f48 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10003cac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003cb0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003cb4:	f003 0301 	and.w	r3, r3, #1
10003cb8:	2b01      	cmp	r3, #1
10003cba:	d0ee      	beq.n	10003c9a <HAL_RCC_OscConfig+0x3aa>
10003cbc:	e000      	b.n	10003cc0 <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10003cbe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
10003cc0:	687b      	ldr	r3, [r7, #4]
10003cc2:	681b      	ldr	r3, [r3, #0]
10003cc4:	f003 0310 	and.w	r3, r3, #16
10003cc8:	2b00      	cmp	r3, #0
10003cca:	f000 8091 	beq.w	10003df0 <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
10003cce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003cd2:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10003cd6:	f003 0303 	and.w	r3, r3, #3
10003cda:	2b02      	cmp	r3, #2
10003cdc:	d107      	bne.n	10003cee <HAL_RCC_OscConfig+0x3fe>
10003cde:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ce2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003ce6:	f003 0302 	and.w	r3, r3, #2
10003cea:	2b02      	cmp	r3, #2
10003cec:	d01e      	beq.n	10003d2c <HAL_RCC_OscConfig+0x43c>
10003cee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003cf4:	f003 0303 	and.w	r3, r3, #3
10003cf8:	2b02      	cmp	r3, #2
10003cfa:	d107      	bne.n	10003d0c <HAL_RCC_OscConfig+0x41c>
10003cfc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003d02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003d06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003d0a:	d00f      	beq.n	10003d2c <HAL_RCC_OscConfig+0x43c>
10003d0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d10:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10003d14:	f003 0303 	and.w	r3, r3, #3
10003d18:	2b02      	cmp	r3, #2
10003d1a:	d122      	bne.n	10003d62 <HAL_RCC_OscConfig+0x472>
10003d1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d20:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003d24:	f003 0302 	and.w	r3, r3, #2
10003d28:	2b02      	cmp	r3, #2
10003d2a:	d11a      	bne.n	10003d62 <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10003d2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d30:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003d34:	f003 0310 	and.w	r3, r3, #16
10003d38:	2b10      	cmp	r3, #16
10003d3a:	d105      	bne.n	10003d48 <HAL_RCC_OscConfig+0x458>
10003d3c:	687b      	ldr	r3, [r7, #4]
10003d3e:	69db      	ldr	r3, [r3, #28]
10003d40:	2b10      	cmp	r3, #16
10003d42:	d001      	beq.n	10003d48 <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
10003d44:	2301      	movs	r3, #1
10003d46:	e0ff      	b.n	10003f48 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10003d48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d4c:	69db      	ldr	r3, [r3, #28]
10003d4e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
10003d52:	687b      	ldr	r3, [r7, #4]
10003d54:	6a1b      	ldr	r3, [r3, #32]
10003d56:	021b      	lsls	r3, r3, #8
10003d58:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003d5c:	4313      	orrs	r3, r2
10003d5e:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10003d60:	e046      	b.n	10003df0 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
10003d62:	687b      	ldr	r3, [r7, #4]
10003d64:	69db      	ldr	r3, [r3, #28]
10003d66:	2b00      	cmp	r3, #0
10003d68:	d029      	beq.n	10003dbe <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
10003d6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d6e:	68db      	ldr	r3, [r3, #12]
10003d70:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003d74:	f043 0310 	orr.w	r3, r3, #16
10003d78:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003d7a:	f7fd fd35 	bl	100017e8 <HAL_GetTick>
10003d7e:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10003d80:	e008      	b.n	10003d94 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10003d82:	f7fd fd31 	bl	100017e8 <HAL_GetTick>
10003d86:	4602      	mov	r2, r0
10003d88:	68bb      	ldr	r3, [r7, #8]
10003d8a:	1ad3      	subs	r3, r2, r3
10003d8c:	2b64      	cmp	r3, #100	; 0x64
10003d8e:	d901      	bls.n	10003d94 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
10003d90:	2303      	movs	r3, #3
10003d92:	e0d9      	b.n	10003f48 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10003d94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d98:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003d9c:	f003 0310 	and.w	r3, r3, #16
10003da0:	2b10      	cmp	r3, #16
10003da2:	d1ee      	bne.n	10003d82 <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10003da4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003da8:	69db      	ldr	r3, [r3, #28]
10003daa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
10003dae:	687b      	ldr	r3, [r7, #4]
10003db0:	6a1b      	ldr	r3, [r3, #32]
10003db2:	021b      	lsls	r3, r3, #8
10003db4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003db8:	4313      	orrs	r3, r2
10003dba:	61cb      	str	r3, [r1, #28]
10003dbc:	e018      	b.n	10003df0 <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
10003dbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003dc2:	2210      	movs	r2, #16
10003dc4:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003dc6:	f7fd fd0f 	bl	100017e8 <HAL_GetTick>
10003dca:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10003dcc:	e008      	b.n	10003de0 <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10003dce:	f7fd fd0b 	bl	100017e8 <HAL_GetTick>
10003dd2:	4602      	mov	r2, r0
10003dd4:	68bb      	ldr	r3, [r7, #8]
10003dd6:	1ad3      	subs	r3, r2, r3
10003dd8:	2b64      	cmp	r3, #100	; 0x64
10003dda:	d901      	bls.n	10003de0 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
10003ddc:	2303      	movs	r3, #3
10003dde:	e0b3      	b.n	10003f48 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10003de0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003de4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003de8:	f003 0310 	and.w	r3, r3, #16
10003dec:	2b10      	cmp	r3, #16
10003dee:	d0ee      	beq.n	10003dce <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
10003df0:	687b      	ldr	r3, [r7, #4]
10003df2:	681b      	ldr	r3, [r3, #0]
10003df4:	f003 0308 	and.w	r3, r3, #8
10003df8:	2b00      	cmp	r3, #0
10003dfa:	d042      	beq.n	10003e82 <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
10003dfc:	687b      	ldr	r3, [r7, #4]
10003dfe:	699b      	ldr	r3, [r3, #24]
10003e00:	2b00      	cmp	r3, #0
10003e02:	d01f      	beq.n	10003e44 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
10003e04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003e08:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10003e0c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003e10:	f043 0301 	orr.w	r3, r3, #1
10003e14:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10003e18:	f7fd fce6 	bl	100017e8 <HAL_GetTick>
10003e1c:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10003e1e:	e008      	b.n	10003e32 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10003e20:	f7fd fce2 	bl	100017e8 <HAL_GetTick>
10003e24:	4602      	mov	r2, r0
10003e26:	68bb      	ldr	r3, [r7, #8]
10003e28:	1ad3      	subs	r3, r2, r3
10003e2a:	2b64      	cmp	r3, #100	; 0x64
10003e2c:	d901      	bls.n	10003e32 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
10003e2e:	2303      	movs	r3, #3
10003e30:	e08a      	b.n	10003f48 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10003e32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003e36:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10003e3a:	f003 0302 	and.w	r3, r3, #2
10003e3e:	2b02      	cmp	r3, #2
10003e40:	d1ee      	bne.n	10003e20 <HAL_RCC_OscConfig+0x530>
10003e42:	e01e      	b.n	10003e82 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10003e44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003e48:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10003e4c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003e50:	f023 0301 	bic.w	r3, r3, #1
10003e54:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10003e58:	f7fd fcc6 	bl	100017e8 <HAL_GetTick>
10003e5c:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10003e5e:	e008      	b.n	10003e72 <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10003e60:	f7fd fcc2 	bl	100017e8 <HAL_GetTick>
10003e64:	4602      	mov	r2, r0
10003e66:	68bb      	ldr	r3, [r7, #8]
10003e68:	1ad3      	subs	r3, r2, r3
10003e6a:	2b64      	cmp	r3, #100	; 0x64
10003e6c:	d901      	bls.n	10003e72 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
10003e6e:	2303      	movs	r3, #3
10003e70:	e06a      	b.n	10003f48 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10003e72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003e76:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10003e7a:	f003 0302 	and.w	r3, r3, #2
10003e7e:	2b02      	cmp	r3, #2
10003e80:	d0ee      	beq.n	10003e60 <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
10003e82:	687b      	ldr	r3, [r7, #4]
10003e84:	681b      	ldr	r3, [r3, #0]
10003e86:	f003 0304 	and.w	r3, r3, #4
10003e8a:	2b00      	cmp	r3, #0
10003e8c:	d02b      	beq.n	10003ee6 <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
10003e8e:	4b07      	ldr	r3, [pc, #28]	; (10003eac <HAL_RCC_OscConfig+0x5bc>)
10003e90:	681b      	ldr	r3, [r3, #0]
10003e92:	4a06      	ldr	r2, [pc, #24]	; (10003eac <HAL_RCC_OscConfig+0x5bc>)
10003e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10003e98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
10003e9a:	f7fd fca5 	bl	100017e8 <HAL_GetTick>
10003e9e:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10003ea0:	e00f      	b.n	10003ec2 <HAL_RCC_OscConfig+0x5d2>
10003ea2:	bf00      	nop
10003ea4:	10020000 	.word	0x10020000
10003ea8:	1002000c 	.word	0x1002000c
10003eac:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10003eb0:	f7fd fc9a 	bl	100017e8 <HAL_GetTick>
10003eb4:	4602      	mov	r2, r0
10003eb6:	68bb      	ldr	r3, [r7, #8]
10003eb8:	1ad3      	subs	r3, r2, r3
10003eba:	2b64      	cmp	r3, #100	; 0x64
10003ebc:	d901      	bls.n	10003ec2 <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
10003ebe:	2303      	movs	r3, #3
10003ec0:	e042      	b.n	10003f48 <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10003ec2:	4b23      	ldr	r3, [pc, #140]	; (10003f50 <HAL_RCC_OscConfig+0x660>)
10003ec4:	681b      	ldr	r3, [r3, #0]
10003ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
10003eca:	2b00      	cmp	r3, #0
10003ecc:	d0f0      	beq.n	10003eb0 <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
10003ece:	687b      	ldr	r3, [r7, #4]
10003ed0:	689b      	ldr	r3, [r3, #8]
10003ed2:	4618      	mov	r0, r3
10003ed4:	f000 f8a9 	bl	1000402a <HAL_RCC_LSEConfig>
10003ed8:	4603      	mov	r3, r0
10003eda:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
10003edc:	7bfb      	ldrb	r3, [r7, #15]
10003ede:	2b00      	cmp	r3, #0
10003ee0:	d001      	beq.n	10003ee6 <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
10003ee2:	7bfb      	ldrb	r3, [r7, #15]
10003ee4:	e030      	b.n	10003f48 <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
10003ee6:	687b      	ldr	r3, [r7, #4]
10003ee8:	3324      	adds	r3, #36	; 0x24
10003eea:	4618      	mov	r0, r3
10003eec:	f000 f91a 	bl	10004124 <RCC_PLL1_Config>
10003ef0:	4603      	mov	r3, r0
10003ef2:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10003ef4:	7bfb      	ldrb	r3, [r7, #15]
10003ef6:	2b00      	cmp	r3, #0
10003ef8:	d001      	beq.n	10003efe <HAL_RCC_OscConfig+0x60e>
  {
    return result;
10003efa:	7bfb      	ldrb	r3, [r7, #15]
10003efc:	e024      	b.n	10003f48 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
10003efe:	687b      	ldr	r3, [r7, #4]
10003f00:	3360      	adds	r3, #96	; 0x60
10003f02:	4618      	mov	r0, r3
10003f04:	f001 f9cc 	bl	100052a0 <RCCEx_PLL2_Config>
10003f08:	4603      	mov	r3, r0
10003f0a:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10003f0c:	7bfb      	ldrb	r3, [r7, #15]
10003f0e:	2b00      	cmp	r3, #0
10003f10:	d001      	beq.n	10003f16 <HAL_RCC_OscConfig+0x626>
  {
    return result;
10003f12:	7bfb      	ldrb	r3, [r7, #15]
10003f14:	e018      	b.n	10003f48 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
10003f16:	687b      	ldr	r3, [r7, #4]
10003f18:	339c      	adds	r3, #156	; 0x9c
10003f1a:	4618      	mov	r0, r3
10003f1c:	f001 fb42 	bl	100055a4 <RCCEx_PLL3_Config>
10003f20:	4603      	mov	r3, r0
10003f22:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10003f24:	7bfb      	ldrb	r3, [r7, #15]
10003f26:	2b00      	cmp	r3, #0
10003f28:	d001      	beq.n	10003f2e <HAL_RCC_OscConfig+0x63e>
  {
    return result;
10003f2a:	7bfb      	ldrb	r3, [r7, #15]
10003f2c:	e00c      	b.n	10003f48 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
10003f2e:	687b      	ldr	r3, [r7, #4]
10003f30:	33d8      	adds	r3, #216	; 0xd8
10003f32:	4618      	mov	r0, r3
10003f34:	f001 fca0 	bl	10005878 <RCCEx_PLL4_Config>
10003f38:	4603      	mov	r3, r0
10003f3a:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10003f3c:	7bfb      	ldrb	r3, [r7, #15]
10003f3e:	2b00      	cmp	r3, #0
10003f40:	d001      	beq.n	10003f46 <HAL_RCC_OscConfig+0x656>
  {
    return result;
10003f42:	7bfb      	ldrb	r3, [r7, #15]
10003f44:	e000      	b.n	10003f48 <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
10003f46:	2300      	movs	r3, #0
}
10003f48:	4618      	mov	r0, r3
10003f4a:	3710      	adds	r7, #16
10003f4c:	46bd      	mov	sp, r7
10003f4e:	bd80      	pop	{r7, pc}
10003f50:	50001000 	.word	0x50001000

10003f54 <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
10003f54:	b580      	push	{r7, lr}
10003f56:	b084      	sub	sp, #16
10003f58:	af00      	add	r7, sp, #0
10003f5a:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
10003f5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f60:	f44f 7280 	mov.w	r2, #256	; 0x100
10003f64:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10003f66:	f7fd fc3f 	bl	100017e8 <HAL_GetTick>
10003f6a:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10003f6c:	e008      	b.n	10003f80 <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10003f6e:	f7fd fc3b 	bl	100017e8 <HAL_GetTick>
10003f72:	4602      	mov	r2, r0
10003f74:	68fb      	ldr	r3, [r7, #12]
10003f76:	1ad3      	subs	r3, r2, r3
10003f78:	2b64      	cmp	r3, #100	; 0x64
10003f7a:	d901      	bls.n	10003f80 <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
10003f7c:	2303      	movs	r3, #3
10003f7e:	e050      	b.n	10004022 <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10003f80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f84:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
10003f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10003f90:	d0ed      	beq.n	10003f6e <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
10003f92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f96:	f44f 6290 	mov.w	r2, #1152	; 0x480
10003f9a:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
10003f9c:	687b      	ldr	r3, [r7, #4]
10003f9e:	2b00      	cmp	r3, #0
10003fa0:	d03e      	beq.n	10004020 <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
10003fa2:	687b      	ldr	r3, [r7, #4]
10003fa4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
10003fa8:	d108      	bne.n	10003fbc <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10003faa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003fae:	68db      	ldr	r3, [r3, #12]
10003fb0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003fb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
10003fb8:	60d3      	str	r3, [r2, #12]
10003fba:	e013      	b.n	10003fe4 <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
10003fbc:	687b      	ldr	r3, [r7, #4]
10003fbe:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
10003fc2:	d10f      	bne.n	10003fe4 <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
10003fc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003fc8:	68db      	ldr	r3, [r3, #12]
10003fca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
10003fd2:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10003fd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003fd8:	68db      	ldr	r3, [r3, #12]
10003fda:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003fde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
10003fe2:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
10003fe4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003fe8:	68db      	ldr	r3, [r3, #12]
10003fea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10003ff2:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10003ff4:	f7fd fbf8 	bl	100017e8 <HAL_GetTick>
10003ff8:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10003ffa:	e008      	b.n	1000400e <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10003ffc:	f7fd fbf4 	bl	100017e8 <HAL_GetTick>
10004000:	4602      	mov	r2, r0
10004002:	68fb      	ldr	r3, [r7, #12]
10004004:	1ad3      	subs	r3, r2, r3
10004006:	2b64      	cmp	r3, #100	; 0x64
10004008:	d901      	bls.n	1000400e <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
1000400a:	2303      	movs	r3, #3
1000400c:	e009      	b.n	10004022 <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000400e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004012:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004016:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000401a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
1000401e:	d1ed      	bne.n	10003ffc <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
10004020:	2300      	movs	r3, #0
}
10004022:	4618      	mov	r0, r3
10004024:	3710      	adds	r7, #16
10004026:	46bd      	mov	sp, r7
10004028:	bd80      	pop	{r7, pc}

1000402a <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
1000402a:	b580      	push	{r7, lr}
1000402c:	b084      	sub	sp, #16
1000402e:	af00      	add	r7, sp, #0
10004030:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10004032:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004036:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000403a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000403e:	f023 0301 	bic.w	r3, r3, #1
10004042:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10004046:	f7fd fbcf 	bl	100017e8 <HAL_GetTick>
1000404a:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
1000404c:	e00a      	b.n	10004064 <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
1000404e:	f7fd fbcb 	bl	100017e8 <HAL_GetTick>
10004052:	4602      	mov	r2, r0
10004054:	68fb      	ldr	r3, [r7, #12]
10004056:	1ad3      	subs	r3, r2, r3
10004058:	f241 3288 	movw	r2, #5000	; 0x1388
1000405c:	4293      	cmp	r3, r2
1000405e:	d901      	bls.n	10004064 <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
10004060:	2303      	movs	r3, #3
10004062:	e05b      	b.n	1000411c <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10004064:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004068:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000406c:	f003 0304 	and.w	r3, r3, #4
10004070:	2b04      	cmp	r3, #4
10004072:	d0ec      	beq.n	1000404e <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
10004074:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004078:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000407c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004080:	f023 030a 	bic.w	r3, r3, #10
10004084:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
10004088:	687b      	ldr	r3, [r7, #4]
1000408a:	2b00      	cmp	r3, #0
1000408c:	d045      	beq.n	1000411a <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
1000408e:	687b      	ldr	r3, [r7, #4]
10004090:	2b03      	cmp	r3, #3
10004092:	d10a      	bne.n	100040aa <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10004094:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004098:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000409c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100040a0:	f043 0302 	orr.w	r3, r3, #2
100040a4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
100040a8:	e016      	b.n	100040d8 <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
100040aa:	687b      	ldr	r3, [r7, #4]
100040ac:	2b0b      	cmp	r3, #11
100040ae:	d113      	bne.n	100040d8 <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
100040b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100040b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100040b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100040bc:	f043 0308 	orr.w	r3, r3, #8
100040c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
100040c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100040c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100040cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100040d0:	f043 0302 	orr.w	r3, r3, #2
100040d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
100040d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100040dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100040e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100040e4:	f043 0301 	orr.w	r3, r3, #1
100040e8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100040ec:	f7fd fb7c 	bl	100017e8 <HAL_GetTick>
100040f0:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
100040f2:	e00a      	b.n	1000410a <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
100040f4:	f7fd fb78 	bl	100017e8 <HAL_GetTick>
100040f8:	4602      	mov	r2, r0
100040fa:	68fb      	ldr	r3, [r7, #12]
100040fc:	1ad3      	subs	r3, r2, r3
100040fe:	f241 3288 	movw	r2, #5000	; 0x1388
10004102:	4293      	cmp	r3, r2
10004104:	d901      	bls.n	1000410a <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
10004106:	2303      	movs	r3, #3
10004108:	e008      	b.n	1000411c <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
1000410a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000410e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10004112:	f003 0304 	and.w	r3, r3, #4
10004116:	2b04      	cmp	r3, #4
10004118:	d1ec      	bne.n	100040f4 <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
1000411a:	2300      	movs	r3, #0
}
1000411c:	4618      	mov	r0, r3
1000411e:	3710      	adds	r7, #16
10004120:	46bd      	mov	sp, r7
10004122:	bd80      	pop	{r7, pc}

10004124 <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
10004124:	b580      	push	{r7, lr}
10004126:	b084      	sub	sp, #16
10004128:	af00      	add	r7, sp, #0
1000412a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
1000412c:	687b      	ldr	r3, [r7, #4]
1000412e:	681b      	ldr	r3, [r3, #0]
10004130:	2b00      	cmp	r3, #0
10004132:	f000 8174 	beq.w	1000441e <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
10004136:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000413a:	6a1b      	ldr	r3, [r3, #32]
1000413c:	f003 0303 	and.w	r3, r3, #3
10004140:	2b02      	cmp	r3, #2
10004142:	d108      	bne.n	10004156 <RCC_PLL1_Config+0x32>
10004144:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004148:	6a1b      	ldr	r3, [r3, #32]
1000414a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000414e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004152:	f000 8162 	beq.w	1000441a <RCC_PLL1_Config+0x2f6>
10004156:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000415a:	6a1b      	ldr	r3, [r3, #32]
1000415c:	f003 0303 	and.w	r3, r3, #3
10004160:	2b03      	cmp	r3, #3
10004162:	d108      	bne.n	10004176 <RCC_PLL1_Config+0x52>
10004164:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004168:	6a1b      	ldr	r3, [r3, #32]
1000416a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000416e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004172:	f000 8152 	beq.w	1000441a <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
10004176:	687b      	ldr	r3, [r7, #4]
10004178:	681b      	ldr	r3, [r3, #0]
1000417a:	2b02      	cmp	r3, #2
1000417c:	f040 8123 	bne.w	100043c6 <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10004180:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004184:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004188:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000418c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10004190:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
10004194:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004198:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000419c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100041a0:	f023 0301 	bic.w	r3, r3, #1
100041a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100041a8:	f7fd fb1e 	bl	100017e8 <HAL_GetTick>
100041ac:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100041ae:	e008      	b.n	100041c2 <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100041b0:	f7fd fb1a 	bl	100017e8 <HAL_GetTick>
100041b4:	4602      	mov	r2, r0
100041b6:	68fb      	ldr	r3, [r7, #12]
100041b8:	1ad3      	subs	r3, r2, r3
100041ba:	2b64      	cmp	r3, #100	; 0x64
100041bc:	d901      	bls.n	100041c2 <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
100041be:	2303      	movs	r3, #3
100041c0:	e12e      	b.n	10004420 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100041c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100041c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100041ca:	f003 0302 	and.w	r3, r3, #2
100041ce:	2b02      	cmp	r3, #2
100041d0:	d0ee      	beq.n	100041b0 <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
100041d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100041d8:	f003 0307 	and.w	r3, r3, #7
100041dc:	2b02      	cmp	r3, #2
100041de:	d112      	bne.n	10004206 <RCC_PLL1_Config+0xe2>
100041e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100041e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100041ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100041ee:	d10a      	bne.n	10004206 <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
100041f0:	687b      	ldr	r3, [r7, #4]
100041f2:	685a      	ldr	r2, [r3, #4]
100041f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100041f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100041fa:	f003 0303 	and.w	r3, r3, #3
100041fe:	429a      	cmp	r2, r3
10004200:	d00c      	beq.n	1000421c <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
10004202:	2301      	movs	r3, #1
10004204:	e10c      	b.n	10004420 <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
10004206:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000420a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000420c:	f023 0203 	bic.w	r2, r3, #3
10004210:	687b      	ldr	r3, [r7, #4]
10004212:	685b      	ldr	r3, [r3, #4]
10004214:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004218:	4313      	orrs	r3, r2
1000421a:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
1000421c:	e008      	b.n	10004230 <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000421e:	f7fd fae3 	bl	100017e8 <HAL_GetTick>
10004222:	4602      	mov	r2, r0
10004224:	68fb      	ldr	r3, [r7, #12]
10004226:	1ad3      	subs	r3, r2, r3
10004228:	2b64      	cmp	r3, #100	; 0x64
1000422a:	d901      	bls.n	10004230 <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
1000422c:	2303      	movs	r3, #3
1000422e:	e0f7      	b.n	10004420 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10004230:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004236:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000423a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000423e:	d1ee      	bne.n	1000421e <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
10004240:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004244:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
10004248:	4b77      	ldr	r3, [pc, #476]	; (10004428 <RCC_PLL1_Config+0x304>)
1000424a:	4013      	ands	r3, r2
1000424c:	687a      	ldr	r2, [r7, #4]
1000424e:	68d2      	ldr	r2, [r2, #12]
10004250:	1e51      	subs	r1, r2, #1
10004252:	687a      	ldr	r2, [r7, #4]
10004254:	6892      	ldr	r2, [r2, #8]
10004256:	3a01      	subs	r2, #1
10004258:	0412      	lsls	r2, r2, #16
1000425a:	430a      	orrs	r2, r1
1000425c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004260:	4313      	orrs	r3, r2
10004262:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
10004266:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000426a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
1000426e:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10004272:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10004276:	687a      	ldr	r2, [r7, #4]
10004278:	6912      	ldr	r2, [r2, #16]
1000427a:	1e51      	subs	r1, r2, #1
1000427c:	687a      	ldr	r2, [r7, #4]
1000427e:	6952      	ldr	r2, [r2, #20]
10004280:	3a01      	subs	r2, #1
10004282:	0212      	lsls	r2, r2, #8
10004284:	4311      	orrs	r1, r2
10004286:	687a      	ldr	r2, [r7, #4]
10004288:	6992      	ldr	r2, [r2, #24]
1000428a:	3a01      	subs	r2, #1
1000428c:	0412      	lsls	r2, r2, #16
1000428e:	430a      	orrs	r2, r1
10004290:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004294:	4313      	orrs	r3, r2
10004296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
1000429a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000429e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
100042a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100042a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
100042aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
100042ae:	687b      	ldr	r3, [r7, #4]
100042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100042b2:	2b02      	cmp	r3, #2
100042b4:	d003      	beq.n	100042be <RCC_PLL1_Config+0x19a>
100042b6:	687b      	ldr	r3, [r7, #4]
100042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100042ba:	2b00      	cmp	r3, #0
100042bc:	d10c      	bne.n	100042d8 <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
100042be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100042c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
100042c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100042ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100042ce:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100042d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
100042d6:	e00f      	b.n	100042f8 <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
100042d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100042dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
100042e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100042e4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100042e8:	687a      	ldr	r2, [r7, #4]
100042ea:	6a12      	ldr	r2, [r2, #32]
100042ec:	00d2      	lsls	r2, r2, #3
100042ee:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100042f2:	4313      	orrs	r3, r2
100042f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
100042f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100042fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10004300:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10004308:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
1000430c:	687b      	ldr	r3, [r7, #4]
1000430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004310:	2b02      	cmp	r3, #2
10004312:	d124      	bne.n	1000435e <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
10004314:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
1000431c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10004320:	687b      	ldr	r3, [r7, #4]
10004322:	6a99      	ldr	r1, [r3, #40]	; 0x28
10004324:	687b      	ldr	r3, [r7, #4]
10004326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10004328:	4319      	orrs	r1, r3
1000432a:	687b      	ldr	r3, [r7, #4]
1000432c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000432e:	4319      	orrs	r1, r3
10004330:	687b      	ldr	r3, [r7, #4]
10004332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10004334:	4319      	orrs	r1, r3
10004336:	687b      	ldr	r3, [r7, #4]
10004338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000433a:	041b      	lsls	r3, r3, #16
1000433c:	430b      	orrs	r3, r1
1000433e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004342:	4313      	orrs	r3, r2
10004344:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
10004348:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000434c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004350:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004354:	f043 0304 	orr.w	r3, r3, #4
10004358:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
1000435c:	e009      	b.n	10004372 <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
1000435e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004366:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000436a:	f023 0304 	bic.w	r3, r3, #4
1000436e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
10004372:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000437a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000437e:	f043 0301 	orr.w	r3, r3, #1
10004382:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10004386:	f7fd fa2f 	bl	100017e8 <HAL_GetTick>
1000438a:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
1000438c:	e008      	b.n	100043a0 <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000438e:	f7fd fa2b 	bl	100017e8 <HAL_GetTick>
10004392:	4602      	mov	r2, r0
10004394:	68fb      	ldr	r3, [r7, #12]
10004396:	1ad3      	subs	r3, r2, r3
10004398:	2b64      	cmp	r3, #100	; 0x64
1000439a:	d901      	bls.n	100043a0 <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
1000439c:	2303      	movs	r3, #3
1000439e:	e03f      	b.n	10004420 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100043a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100043a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100043a8:	f003 0302 	and.w	r3, r3, #2
100043ac:	2b02      	cmp	r3, #2
100043ae:	d1ee      	bne.n	1000438e <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100043b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100043b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100043b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100043bc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
100043c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
100043c4:	e02b      	b.n	1000441e <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100043c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100043ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100043ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100043d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100043d6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
100043da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100043de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100043e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100043e6:	f023 0301 	bic.w	r3, r3, #1
100043ea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100043ee:	f7fd f9fb 	bl	100017e8 <HAL_GetTick>
100043f2:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100043f4:	e008      	b.n	10004408 <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100043f6:	f7fd f9f7 	bl	100017e8 <HAL_GetTick>
100043fa:	4602      	mov	r2, r0
100043fc:	68fb      	ldr	r3, [r7, #12]
100043fe:	1ad3      	subs	r3, r2, r3
10004400:	2b64      	cmp	r3, #100	; 0x64
10004402:	d901      	bls.n	10004408 <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
10004404:	2303      	movs	r3, #3
10004406:	e00b      	b.n	10004420 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10004408:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000440c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004410:	f003 0302 	and.w	r3, r3, #2
10004414:	2b02      	cmp	r3, #2
10004416:	d0ee      	beq.n	100043f6 <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
10004418:	e001      	b.n	1000441e <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
1000441a:	2301      	movs	r3, #1
1000441c:	e000      	b.n	10004420 <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
1000441e:	2300      	movs	r3, #0

}
10004420:	4618      	mov	r0, r3
10004422:	3710      	adds	r7, #16
10004424:	46bd      	mov	sp, r7
10004426:	bd80      	pop	{r7, pc}
10004428:	ffc0fe00 	.word	0xffc0fe00

1000442c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
1000442c:	b580      	push	{r7, lr}
1000442e:	b084      	sub	sp, #16
10004430:	af00      	add	r7, sp, #0
10004432:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
10004434:	2300      	movs	r3, #0
10004436:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10004438:	687b      	ldr	r3, [r7, #4]
1000443a:	2b00      	cmp	r3, #0
1000443c:	d101      	bne.n	10004442 <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
1000443e:	2301      	movs	r3, #1
10004440:	e102      	b.n	10004648 <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
10004442:	687b      	ldr	r3, [r7, #4]
10004444:	681b      	ldr	r3, [r3, #0]
10004446:	f003 0301 	and.w	r3, r3, #1
1000444a:	2b00      	cmp	r3, #0
1000444c:	d00b      	beq.n	10004466 <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
1000444e:	687b      	ldr	r3, [r7, #4]
10004450:	3304      	adds	r3, #4
10004452:	4618      	mov	r0, r3
10004454:	f000 f8fc 	bl	10004650 <RCC_MPUConfig>
10004458:	4603      	mov	r3, r0
1000445a:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
1000445c:	7bfb      	ldrb	r3, [r7, #15]
1000445e:	2b00      	cmp	r3, #0
10004460:	d001      	beq.n	10004466 <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
10004462:	7bfb      	ldrb	r3, [r7, #15]
10004464:	e0f0      	b.n	10004648 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
10004466:	687b      	ldr	r3, [r7, #4]
10004468:	681b      	ldr	r3, [r3, #0]
1000446a:	f003 0302 	and.w	r3, r3, #2
1000446e:	2b00      	cmp	r3, #0
10004470:	d00b      	beq.n	1000448a <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
10004472:	687b      	ldr	r3, [r7, #4]
10004474:	330c      	adds	r3, #12
10004476:	4618      	mov	r0, r3
10004478:	f000 f960 	bl	1000473c <RCC_AXISSConfig>
1000447c:	4603      	mov	r3, r0
1000447e:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10004480:	7bfb      	ldrb	r3, [r7, #15]
10004482:	2b00      	cmp	r3, #0
10004484:	d001      	beq.n	1000448a <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
10004486:	7bfb      	ldrb	r3, [r7, #15]
10004488:	e0de      	b.n	10004648 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
1000448a:	687b      	ldr	r3, [r7, #4]
1000448c:	681b      	ldr	r3, [r3, #0]
1000448e:	f003 0304 	and.w	r3, r3, #4
10004492:	2b00      	cmp	r3, #0
10004494:	d00b      	beq.n	100044ae <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
10004496:	687b      	ldr	r3, [r7, #4]
10004498:	3314      	adds	r3, #20
1000449a:	4618      	mov	r0, r3
1000449c:	f000 f9e6 	bl	1000486c <RCC_MCUConfig>
100044a0:	4603      	mov	r3, r0
100044a2:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
100044a4:	7bfb      	ldrb	r3, [r7, #15]
100044a6:	2b00      	cmp	r3, #0
100044a8:	d001      	beq.n	100044ae <HAL_RCC_ClockConfig+0x82>
    {
      return status;
100044aa:	7bfb      	ldrb	r3, [r7, #15]
100044ac:	e0cc      	b.n	10004648 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
100044ae:	687b      	ldr	r3, [r7, #4]
100044b0:	681b      	ldr	r3, [r3, #0]
100044b2:	f003 0308 	and.w	r3, r3, #8
100044b6:	2b00      	cmp	r3, #0
100044b8:	d020      	beq.n	100044fc <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
100044ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100044c0:	f023 0207 	bic.w	r2, r3, #7
100044c4:	687b      	ldr	r3, [r7, #4]
100044c6:	69db      	ldr	r3, [r3, #28]
100044c8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100044cc:	4313      	orrs	r3, r2
100044ce:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100044d0:	f7fd f98a 	bl	100017e8 <HAL_GetTick>
100044d4:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
100044d6:	e009      	b.n	100044ec <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100044d8:	f7fd f986 	bl	100017e8 <HAL_GetTick>
100044dc:	4602      	mov	r2, r0
100044de:	68bb      	ldr	r3, [r7, #8]
100044e0:	1ad3      	subs	r3, r2, r3
100044e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100044e6:	d901      	bls.n	100044ec <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
100044e8:	2303      	movs	r3, #3
100044ea:	e0ad      	b.n	10004648 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
100044ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100044f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100044f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100044fa:	d1ed      	bne.n	100044d8 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
100044fc:	687b      	ldr	r3, [r7, #4]
100044fe:	681b      	ldr	r3, [r3, #0]
10004500:	f003 0310 	and.w	r3, r3, #16
10004504:	2b00      	cmp	r3, #0
10004506:	d020      	beq.n	1000454a <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
10004508:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000450e:	f023 0207 	bic.w	r2, r3, #7
10004512:	687b      	ldr	r3, [r7, #4]
10004514:	6a1b      	ldr	r3, [r3, #32]
10004516:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000451a:	4313      	orrs	r3, r2
1000451c:	640b      	str	r3, [r1, #64]	; 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000451e:	f7fd f963 	bl	100017e8 <HAL_GetTick>
10004522:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10004524:	e009      	b.n	1000453a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004526:	f7fd f95f 	bl	100017e8 <HAL_GetTick>
1000452a:	4602      	mov	r2, r0
1000452c:	68bb      	ldr	r3, [r7, #8]
1000452e:	1ad3      	subs	r3, r2, r3
10004530:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004534:	d901      	bls.n	1000453a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
10004536:	2303      	movs	r3, #3
10004538:	e086      	b.n	10004648 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
1000453a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10004540:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004544:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004548:	d1ed      	bne.n	10004526 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
1000454a:	687b      	ldr	r3, [r7, #4]
1000454c:	681b      	ldr	r3, [r3, #0]
1000454e:	f003 0320 	and.w	r3, r3, #32
10004552:	2b00      	cmp	r3, #0
10004554:	d023      	beq.n	1000459e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
10004556:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000455a:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
1000455e:	f023 0207 	bic.w	r2, r3, #7
10004562:	687b      	ldr	r3, [r7, #4]
10004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004566:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000456a:	4313      	orrs	r3, r2
1000456c:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004570:	f7fd f93a 	bl	100017e8 <HAL_GetTick>
10004574:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10004576:	e009      	b.n	1000458c <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004578:	f7fd f936 	bl	100017e8 <HAL_GetTick>
1000457c:	4602      	mov	r2, r0
1000457e:	68bb      	ldr	r3, [r7, #8]
10004580:	1ad3      	subs	r3, r2, r3
10004582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004586:	d901      	bls.n	1000458c <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
10004588:	2303      	movs	r3, #3
1000458a:	e05d      	b.n	10004648 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
1000458c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004590:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10004594:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000459c:	d1ec      	bne.n	10004578 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
1000459e:	687b      	ldr	r3, [r7, #4]
100045a0:	681b      	ldr	r3, [r3, #0]
100045a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
100045a6:	2b00      	cmp	r3, #0
100045a8:	d023      	beq.n	100045f2 <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
100045aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100045ae:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
100045b2:	f023 0207 	bic.w	r2, r3, #7
100045b6:	687b      	ldr	r3, [r7, #4]
100045b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100045ba:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100045be:	4313      	orrs	r3, r2
100045c0:	f8c1 3838 	str.w	r3, [r1, #2104]	; 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100045c4:	f7fd f910 	bl	100017e8 <HAL_GetTick>
100045c8:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
100045ca:	e009      	b.n	100045e0 <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100045cc:	f7fd f90c 	bl	100017e8 <HAL_GetTick>
100045d0:	4602      	mov	r2, r0
100045d2:	68bb      	ldr	r3, [r7, #8]
100045d4:	1ad3      	subs	r3, r2, r3
100045d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100045da:	d901      	bls.n	100045e0 <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
100045dc:	2303      	movs	r3, #3
100045de:	e033      	b.n	10004648 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
100045e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100045e4:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
100045e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100045ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100045f0:	d1ec      	bne.n	100045cc <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
100045f2:	687b      	ldr	r3, [r7, #4]
100045f4:	681b      	ldr	r3, [r3, #0]
100045f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
100045fa:	2b00      	cmp	r3, #0
100045fc:	d023      	beq.n	10004646 <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
100045fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004602:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
10004606:	f023 0207 	bic.w	r2, r3, #7
1000460a:	687b      	ldr	r3, [r7, #4]
1000460c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000460e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004612:	4313      	orrs	r3, r2
10004614:	f8c1 383c 	str.w	r3, [r1, #2108]	; 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004618:	f7fd f8e6 	bl	100017e8 <HAL_GetTick>
1000461c:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
1000461e:	e009      	b.n	10004634 <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004620:	f7fd f8e2 	bl	100017e8 <HAL_GetTick>
10004624:	4602      	mov	r2, r0
10004626:	68bb      	ldr	r3, [r7, #8]
10004628:	1ad3      	subs	r3, r2, r3
1000462a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000462e:	d901      	bls.n	10004634 <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
10004630:	2303      	movs	r3, #3
10004632:	e009      	b.n	10004648 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10004634:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004638:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
1000463c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004640:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004644:	d1ec      	bne.n	10004620 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
10004646:	2300      	movs	r3, #0
}
10004648:	4618      	mov	r0, r3
1000464a:	3710      	adds	r7, #16
1000464c:	46bd      	mov	sp, r7
1000464e:	bd80      	pop	{r7, pc}

10004650 <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
10004650:	b580      	push	{r7, lr}
10004652:	b084      	sub	sp, #16
10004654:	af00      	add	r7, sp, #0
10004656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
10004658:	687b      	ldr	r3, [r7, #4]
1000465a:	681b      	ldr	r3, [r3, #0]
1000465c:	2b03      	cmp	r3, #3
1000465e:	d840      	bhi.n	100046e2 <RCC_MPUConfig+0x92>
10004660:	a201      	add	r2, pc, #4	; (adr r2, 10004668 <RCC_MPUConfig+0x18>)
10004662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004666:	bf00      	nop
10004668:	10004679 	.word	0x10004679
1000466c:	1000468d 	.word	0x1000468d
10004670:	100046a3 	.word	0x100046a3
10004674:	100046b7 	.word	0x100046b7
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10004678:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000467c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004680:	f003 0301 	and.w	r3, r3, #1
10004684:	2b01      	cmp	r3, #1
10004686:	d02e      	beq.n	100046e6 <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
10004688:	2301      	movs	r3, #1
1000468a:	e053      	b.n	10004734 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000468c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004690:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004694:	f403 7380 	and.w	r3, r3, #256	; 0x100
10004698:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
1000469c:	d025      	beq.n	100046ea <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
1000469e:	2301      	movs	r3, #1
100046a0:	e048      	b.n	10004734 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100046a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100046a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100046aa:	f003 0302 	and.w	r3, r3, #2
100046ae:	2b02      	cmp	r3, #2
100046b0:	d01d      	beq.n	100046ee <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
100046b2:	2301      	movs	r3, #1
100046b4:	e03e      	b.n	10004734 <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100046b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100046ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100046be:	f003 0302 	and.w	r3, r3, #2
100046c2:	2b02      	cmp	r3, #2
100046c4:	d001      	beq.n	100046ca <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
100046c6:	2301      	movs	r3, #1
100046c8:	e034      	b.n	10004734 <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
100046ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100046d0:	f023 0207 	bic.w	r2, r3, #7
100046d4:	687b      	ldr	r3, [r7, #4]
100046d6:	685b      	ldr	r3, [r3, #4]
100046d8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100046dc:	4313      	orrs	r3, r2
100046de:	62cb      	str	r3, [r1, #44]	; 0x2c

      break;
100046e0:	e006      	b.n	100046f0 <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
100046e2:	2301      	movs	r3, #1
100046e4:	e026      	b.n	10004734 <RCC_MPUConfig+0xe4>
      break;
100046e6:	bf00      	nop
100046e8:	e002      	b.n	100046f0 <RCC_MPUConfig+0xa0>
      break;
100046ea:	bf00      	nop
100046ec:	e000      	b.n	100046f0 <RCC_MPUConfig+0xa0>
      break;
100046ee:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
100046f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100046f4:	6a1b      	ldr	r3, [r3, #32]
100046f6:	f023 0203 	bic.w	r2, r3, #3
100046fa:	687b      	ldr	r3, [r7, #4]
100046fc:	681b      	ldr	r3, [r3, #0]
100046fe:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004702:	4313      	orrs	r3, r2
10004704:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10004706:	f7fd f86f 	bl	100017e8 <HAL_GetTick>
1000470a:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
1000470c:	e009      	b.n	10004722 <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000470e:	f7fd f86b 	bl	100017e8 <HAL_GetTick>
10004712:	4602      	mov	r2, r0
10004714:	68fb      	ldr	r3, [r7, #12]
10004716:	1ad3      	subs	r3, r2, r3
10004718:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000471c:	d901      	bls.n	10004722 <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
1000471e:	2303      	movs	r3, #3
10004720:	e008      	b.n	10004734 <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10004722:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004726:	6a1b      	ldr	r3, [r3, #32]
10004728:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000472c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004730:	d1ed      	bne.n	1000470e <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
10004732:	2300      	movs	r3, #0
}
10004734:	4618      	mov	r0, r3
10004736:	3710      	adds	r7, #16
10004738:	46bd      	mov	sp, r7
1000473a:	bd80      	pop	{r7, pc}

1000473c <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
1000473c:	b580      	push	{r7, lr}
1000473e:	b084      	sub	sp, #16
10004740:	af00      	add	r7, sp, #0
10004742:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
10004744:	687b      	ldr	r3, [r7, #4]
10004746:	681b      	ldr	r3, [r3, #0]
10004748:	2b02      	cmp	r3, #2
1000474a:	d01b      	beq.n	10004784 <RCC_AXISSConfig+0x48>
1000474c:	2b02      	cmp	r3, #2
1000474e:	d823      	bhi.n	10004798 <RCC_AXISSConfig+0x5c>
10004750:	2b00      	cmp	r3, #0
10004752:	d002      	beq.n	1000475a <RCC_AXISSConfig+0x1e>
10004754:	2b01      	cmp	r3, #1
10004756:	d00a      	beq.n	1000476e <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
10004758:	e01e      	b.n	10004798 <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
1000475a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000475e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004762:	f003 0301 	and.w	r3, r3, #1
10004766:	2b01      	cmp	r3, #1
10004768:	d018      	beq.n	1000479c <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
1000476a:	2301      	movs	r3, #1
1000476c:	e079      	b.n	10004862 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000476e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004772:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004776:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000477a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
1000477e:	d00f      	beq.n	100047a0 <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
10004780:	2301      	movs	r3, #1
10004782:	e06e      	b.n	10004862 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10004784:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000478c:	f003 0302 	and.w	r3, r3, #2
10004790:	2b02      	cmp	r3, #2
10004792:	d007      	beq.n	100047a4 <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
10004794:	2301      	movs	r3, #1
10004796:	e064      	b.n	10004862 <RCC_AXISSConfig+0x126>
      break;
10004798:	bf00      	nop
1000479a:	e004      	b.n	100047a6 <RCC_AXISSConfig+0x6a>
      break;
1000479c:	bf00      	nop
1000479e:	e002      	b.n	100047a6 <RCC_AXISSConfig+0x6a>
      break;
100047a0:	bf00      	nop
100047a2:	e000      	b.n	100047a6 <RCC_AXISSConfig+0x6a>
      break;
100047a4:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
100047a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100047ac:	f023 0207 	bic.w	r2, r3, #7
100047b0:	687b      	ldr	r3, [r7, #4]
100047b2:	681b      	ldr	r3, [r3, #0]
100047b4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100047b8:	4313      	orrs	r3, r2
100047ba:	624b      	str	r3, [r1, #36]	; 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
100047bc:	687b      	ldr	r3, [r7, #4]
100047be:	681b      	ldr	r3, [r3, #0]
100047c0:	2b03      	cmp	r3, #3
100047c2:	d016      	beq.n	100047f2 <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100047c4:	f7fd f810 	bl	100017e8 <HAL_GetTick>
100047c8:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
100047ca:	e009      	b.n	100047e0 <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100047cc:	f7fd f80c 	bl	100017e8 <HAL_GetTick>
100047d0:	4602      	mov	r2, r0
100047d2:	68fb      	ldr	r3, [r7, #12]
100047d4:	1ad3      	subs	r3, r2, r3
100047d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100047da:	d901      	bls.n	100047e0 <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
100047dc:	2303      	movs	r3, #3
100047de:	e040      	b.n	10004862 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
100047e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100047e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100047ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100047ee:	d1ed      	bne.n	100047cc <RCC_AXISSConfig+0x90>
100047f0:	e015      	b.n	1000481e <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100047f2:	f7fc fff9 	bl	100017e8 <HAL_GetTick>
100047f6:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
100047f8:	e009      	b.n	1000480e <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100047fa:	f7fc fff5 	bl	100017e8 <HAL_GetTick>
100047fe:	4602      	mov	r2, r0
10004800:	68fb      	ldr	r3, [r7, #12]
10004802:	1ad3      	subs	r3, r2, r3
10004804:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004808:	d901      	bls.n	1000480e <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
1000480a:	2303      	movs	r3, #3
1000480c:	e029      	b.n	10004862 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
1000480e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004814:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004818:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000481c:	d0ed      	beq.n	100047fa <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
1000481e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10004824:	f023 0207 	bic.w	r2, r3, #7
10004828:	687b      	ldr	r3, [r7, #4]
1000482a:	685b      	ldr	r3, [r3, #4]
1000482c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004830:	4313      	orrs	r3, r2
10004832:	630b      	str	r3, [r1, #48]	; 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10004834:	f7fc ffd8 	bl	100017e8 <HAL_GetTick>
10004838:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
1000483a:	e009      	b.n	10004850 <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000483c:	f7fc ffd4 	bl	100017e8 <HAL_GetTick>
10004840:	4602      	mov	r2, r0
10004842:	68fb      	ldr	r3, [r7, #12]
10004844:	1ad3      	subs	r3, r2, r3
10004846:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000484a:	d901      	bls.n	10004850 <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
1000484c:	2303      	movs	r3, #3
1000484e:	e008      	b.n	10004862 <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10004850:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10004856:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000485a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000485e:	d1ed      	bne.n	1000483c <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
10004860:	2300      	movs	r3, #0
}
10004862:	4618      	mov	r0, r3
10004864:	3710      	adds	r7, #16
10004866:	46bd      	mov	sp, r7
10004868:	bd80      	pop	{r7, pc}
	...

1000486c <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
1000486c:	b580      	push	{r7, lr}
1000486e:	b084      	sub	sp, #16
10004870:	af00      	add	r7, sp, #0
10004872:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
10004874:	687b      	ldr	r3, [r7, #4]
10004876:	681b      	ldr	r3, [r3, #0]
10004878:	2b03      	cmp	r3, #3
1000487a:	d834      	bhi.n	100048e6 <RCC_MCUConfig+0x7a>
1000487c:	a201      	add	r2, pc, #4	; (adr r2, 10004884 <RCC_MCUConfig+0x18>)
1000487e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004882:	bf00      	nop
10004884:	10004895 	.word	0x10004895
10004888:	100048a9 	.word	0x100048a9
1000488c:	100048bf 	.word	0x100048bf
10004890:	100048d3 	.word	0x100048d3
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10004894:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004898:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000489c:	f003 0301 	and.w	r3, r3, #1
100048a0:	2b01      	cmp	r3, #1
100048a2:	d022      	beq.n	100048ea <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
100048a4:	2301      	movs	r3, #1
100048a6:	e081      	b.n	100049ac <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100048a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100048ac:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100048b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
100048b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100048b8:	d019      	beq.n	100048ee <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
100048ba:	2301      	movs	r3, #1
100048bc:	e076      	b.n	100049ac <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
100048be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100048c2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100048c6:	f003 0310 	and.w	r3, r3, #16
100048ca:	2b10      	cmp	r3, #16
100048cc:	d011      	beq.n	100048f2 <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
100048ce:	2301      	movs	r3, #1
100048d0:	e06c      	b.n	100049ac <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
100048d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100048d6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100048da:	f003 0302 	and.w	r3, r3, #2
100048de:	2b02      	cmp	r3, #2
100048e0:	d009      	beq.n	100048f6 <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
100048e2:	2301      	movs	r3, #1
100048e4:	e062      	b.n	100049ac <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
100048e6:	bf00      	nop
100048e8:	e006      	b.n	100048f8 <RCC_MCUConfig+0x8c>
      break;
100048ea:	bf00      	nop
100048ec:	e004      	b.n	100048f8 <RCC_MCUConfig+0x8c>
      break;
100048ee:	bf00      	nop
100048f0:	e002      	b.n	100048f8 <RCC_MCUConfig+0x8c>
      break;
100048f2:	bf00      	nop
100048f4:	e000      	b.n	100048f8 <RCC_MCUConfig+0x8c>
      break;
100048f6:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
100048f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100048fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100048fe:	f023 0203 	bic.w	r2, r3, #3
10004902:	687b      	ldr	r3, [r7, #4]
10004904:	681b      	ldr	r3, [r3, #0]
10004906:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000490a:	4313      	orrs	r3, r2
1000490c:	648b      	str	r3, [r1, #72]	; 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
1000490e:	f7fc ff6b 	bl	100017e8 <HAL_GetTick>
10004912:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10004914:	e009      	b.n	1000492a <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004916:	f7fc ff67 	bl	100017e8 <HAL_GetTick>
1000491a:	4602      	mov	r2, r0
1000491c:	68fb      	ldr	r3, [r7, #12]
1000491e:	1ad3      	subs	r3, r2, r3
10004920:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004924:	d901      	bls.n	1000492a <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
10004926:	2303      	movs	r3, #3
10004928:	e040      	b.n	100049ac <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
1000492a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000492e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10004930:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004934:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004938:	d1ed      	bne.n	10004916 <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
1000493a:	f000 fc15 	bl	10005168 <HAL_RCC_GetSystemCoreClockFreq>
1000493e:	4603      	mov	r3, r0
10004940:	4a1c      	ldr	r2, [pc, #112]	; (100049b4 <RCC_MCUConfig+0x148>)
10004942:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10004944:	4b1c      	ldr	r3, [pc, #112]	; (100049b8 <RCC_MCUConfig+0x14c>)
10004946:	681b      	ldr	r3, [r3, #0]
10004948:	4618      	mov	r0, r3
1000494a:	f7fc ff03 	bl	10001754 <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
1000494e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004952:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10004956:	f023 020f 	bic.w	r2, r3, #15
1000495a:	687b      	ldr	r3, [r7, #4]
1000495c:	685b      	ldr	r3, [r3, #4]
1000495e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004962:	4313      	orrs	r3, r2
10004964:	f8c1 3830 	str.w	r3, [r1, #2096]	; 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10004968:	f7fc ff3e 	bl	100017e8 <HAL_GetTick>
1000496c:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
1000496e:	e009      	b.n	10004984 <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004970:	f7fc ff3a 	bl	100017e8 <HAL_GetTick>
10004974:	4602      	mov	r2, r0
10004976:	68fb      	ldr	r3, [r7, #12]
10004978:	1ad3      	subs	r3, r2, r3
1000497a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000497e:	d901      	bls.n	10004984 <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
10004980:	2303      	movs	r3, #3
10004982:	e013      	b.n	100049ac <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10004984:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004988:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
1000498c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004990:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004994:	d1ec      	bne.n	10004970 <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10004996:	f000 fbe7 	bl	10005168 <HAL_RCC_GetSystemCoreClockFreq>
1000499a:	4603      	mov	r3, r0
1000499c:	4a05      	ldr	r2, [pc, #20]	; (100049b4 <RCC_MCUConfig+0x148>)
1000499e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
100049a0:	4b05      	ldr	r3, [pc, #20]	; (100049b8 <RCC_MCUConfig+0x14c>)
100049a2:	681b      	ldr	r3, [r3, #0]
100049a4:	4618      	mov	r0, r3
100049a6:	f7fc fed5 	bl	10001754 <HAL_InitTick>
#endif

  return HAL_OK;
100049aa:	2300      	movs	r3, #0
}
100049ac:	4618      	mov	r0, r3
100049ae:	3710      	adds	r7, #16
100049b0:	46bd      	mov	sp, r7
100049b2:	bd80      	pop	{r7, pc}
100049b4:	10020000 	.word	0x10020000
100049b8:	1002000c 	.word	0x1002000c

100049bc <HAL_RCC_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
100049bc:	b480      	push	{r7}
100049be:	b089      	sub	sp, #36	; 0x24
100049c0:	af00      	add	r7, sp, #0
100049c2:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0U, pll2m = 1U, pll2fracen = 0U, hsivalue = 0U;
100049c4:	2300      	movs	r3, #0
100049c6:	61bb      	str	r3, [r7, #24]
100049c8:	2301      	movs	r3, #1
100049ca:	617b      	str	r3, [r7, #20]
100049cc:	2300      	movs	r3, #0
100049ce:	613b      	str	r3, [r7, #16]
100049d0:	2300      	movs	r3, #0
100049d2:	60fb      	str	r3, [r7, #12]
  float fracn1, pll2vco = 0;
100049d4:	f04f 0300 	mov.w	r3, #0
100049d8:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL12_SOURCE();
100049da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100049de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100049e0:	f003 0303 	and.w	r3, r3, #3
100049e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLL2CFGR1 & RCC_PLL2CFGR1_DIVM2) >> RCC_PLL2CFGR1_DIVM2_Pos) + 1U;
100049e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100049ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
100049ee:	0c1b      	lsrs	r3, r3, #16
100049f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
100049f4:	3301      	adds	r3, #1
100049f6:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLL2FRACR & RCC_PLL2FRACR_FRACLE) >> RCC_PLL2FRACR_FRACLE_Pos;
100049f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100049fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10004a00:	0c1b      	lsrs	r3, r3, #16
10004a02:	f003 0301 	and.w	r3, r3, #1
10004a06:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACV) >> RCC_PLL2FRACR_FRACV_Pos));
10004a08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10004a10:	08db      	lsrs	r3, r3, #3
10004a12:	f3c3 030c 	ubfx	r3, r3, #0, #13
10004a16:	693a      	ldr	r2, [r7, #16]
10004a18:	fb02 f303 	mul.w	r3, r2, r3
10004a1c:	ee07 3a90 	vmov	s15, r3
10004a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004a24:	edc7 7a02 	vstr	s15, [r7, #8]
  pll2vco = (float)((float)((RCC->PLL2CFGR1 & RCC_PLL2CFGR1_DIVN) + 1U) + (fracn1 / (float)0x2000));  //Intermediary value
10004a28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
10004a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
10004a34:	3301      	adds	r3, #1
10004a36:	ee07 3a90 	vmov	s15, r3
10004a3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004a3e:	edd7 6a02 	vldr	s13, [r7, #8]
10004a42:	ed9f 6a51 	vldr	s12, [pc, #324]	; 10004b88 <HAL_RCC_GetPLL2ClockFreq+0x1cc>
10004a46:	eec6 7a86 	vdiv.f32	s15, s13, s12
10004a4a:	ee77 7a27 	vadd.f32	s15, s14, s15
10004a4e:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10004a52:	69bb      	ldr	r3, [r7, #24]
10004a54:	2b02      	cmp	r3, #2
10004a56:	d047      	beq.n	10004ae8 <HAL_RCC_GetPLL2ClockFreq+0x12c>
10004a58:	69bb      	ldr	r3, [r7, #24]
10004a5a:	2b02      	cmp	r3, #2
10004a5c:	d848      	bhi.n	10004af0 <HAL_RCC_GetPLL2ClockFreq+0x134>
10004a5e:	69bb      	ldr	r3, [r7, #24]
10004a60:	2b00      	cmp	r3, #0
10004a62:	d003      	beq.n	10004a6c <HAL_RCC_GetPLL2ClockFreq+0xb0>
10004a64:	69bb      	ldr	r3, [r7, #24]
10004a66:	2b01      	cmp	r3, #1
10004a68:	d02f      	beq.n	10004aca <HAL_RCC_GetPLL2ClockFreq+0x10e>
10004a6a:	e041      	b.n	10004af0 <HAL_RCC_GetPLL2ClockFreq+0x134>
  {
    case RCC_PLL12SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10004a6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a70:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004a74:	f003 0304 	and.w	r3, r3, #4
10004a78:	2b04      	cmp	r3, #4
10004a7a:	d117      	bne.n	10004aac <HAL_RCC_GetPLL2ClockFreq+0xf0>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10004a7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a80:	699b      	ldr	r3, [r3, #24]
10004a82:	f003 0303 	and.w	r3, r3, #3
10004a86:	4a41      	ldr	r2, [pc, #260]	; (10004b8c <HAL_RCC_GetPLL2ClockFreq+0x1d0>)
10004a88:	fa22 f303 	lsr.w	r3, r2, r3
10004a8c:	60fb      	str	r3, [r7, #12]
        pll2vco *= (float)(hsivalue / pll2m);
10004a8e:	68fa      	ldr	r2, [r7, #12]
10004a90:	697b      	ldr	r3, [r7, #20]
10004a92:	fbb2 f3f3 	udiv	r3, r2, r3
10004a96:	ee07 3a90 	vmov	s15, r3
10004a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004a9e:	ed97 7a07 	vldr	s14, [r7, #28]
10004aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
10004aa6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco *= (float)(HSI_VALUE / pll2m);
      }
      break;
10004aaa:	e025      	b.n	10004af8 <HAL_RCC_GetPLL2ClockFreq+0x13c>
        pll2vco *= (float)(HSI_VALUE / pll2m);
10004aac:	4a37      	ldr	r2, [pc, #220]	; (10004b8c <HAL_RCC_GetPLL2ClockFreq+0x1d0>)
10004aae:	697b      	ldr	r3, [r7, #20]
10004ab0:	fbb2 f3f3 	udiv	r3, r2, r3
10004ab4:	ee07 3a90 	vmov	s15, r3
10004ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004abc:	ed97 7a07 	vldr	s14, [r7, #28]
10004ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
10004ac4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004ac8:	e016      	b.n	10004af8 <HAL_RCC_GetPLL2ClockFreq+0x13c>

    case RCC_PLL12SOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco *= (float)(HSE_VALUE / pll2m);
10004aca:	4a31      	ldr	r2, [pc, #196]	; (10004b90 <HAL_RCC_GetPLL2ClockFreq+0x1d4>)
10004acc:	697b      	ldr	r3, [r7, #20]
10004ace:	fbb2 f3f3 	udiv	r3, r2, r3
10004ad2:	ee07 3a90 	vmov	s15, r3
10004ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004ada:	ed97 7a07 	vldr	s14, [r7, #28]
10004ade:	ee67 7a27 	vmul.f32	s15, s14, s15
10004ae2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004ae6:	e007      	b.n	10004af8 <HAL_RCC_GetPLL2ClockFreq+0x13c>

    case RCC_PLL12SOURCE_OFF:  /* No clock source for PLL */
      pll2vco = 0;
10004ae8:	f04f 0300 	mov.w	r3, #0
10004aec:	61fb      	str	r3, [r7, #28]
      break;
10004aee:	e003      	b.n	10004af8 <HAL_RCC_GetPLL2ClockFreq+0x13c>

    default:
      pll2vco = 0;
10004af0:	f04f 0300 	mov.w	r3, #0
10004af4:	61fb      	str	r3, [r7, #28]
      break;
10004af6:	bf00      	nop
  }

  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVP) >> RCC_PLL2CFGR2_DIVP_Pos) + 1U)));
10004af8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004afc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10004b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004b04:	3301      	adds	r3, #1
10004b06:	ee07 3a90 	vmov	s15, r3
10004b0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004b0e:	edd7 6a07 	vldr	s13, [r7, #28]
10004b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004b16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004b1a:	ee17 2a90 	vmov	r2, s15
10004b1e:	687b      	ldr	r3, [r7, #4]
10004b20:	601a      	str	r2, [r3, #0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVQ) >> RCC_PLL2CFGR2_DIVQ_Pos) + 1U)));
10004b22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10004b2a:	0a1b      	lsrs	r3, r3, #8
10004b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004b30:	3301      	adds	r3, #1
10004b32:	ee07 3a90 	vmov	s15, r3
10004b36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004b3a:	edd7 6a07 	vldr	s13, [r7, #28]
10004b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004b46:	ee17 2a90 	vmov	r2, s15
10004b4a:	687b      	ldr	r3, [r7, #4]
10004b4c:	605a      	str	r2, [r3, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVR) >> RCC_PLL2CFGR2_DIVR_Pos) + 1U)));
10004b4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10004b56:	0c1b      	lsrs	r3, r3, #16
10004b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004b5c:	3301      	adds	r3, #1
10004b5e:	ee07 3a90 	vmov	s15, r3
10004b62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004b66:	edd7 6a07 	vldr	s13, [r7, #28]
10004b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004b72:	ee17 2a90 	vmov	r2, s15
10004b76:	687b      	ldr	r3, [r7, #4]
10004b78:	609a      	str	r2, [r3, #8]
}
10004b7a:	bf00      	nop
10004b7c:	3724      	adds	r7, #36	; 0x24
10004b7e:	46bd      	mov	sp, r7
10004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
10004b84:	4770      	bx	lr
10004b86:	bf00      	nop
10004b88:	46000000 	.word	0x46000000
10004b8c:	03d09000 	.word	0x03d09000
10004b90:	016e3600 	.word	0x016e3600

10004b94 <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
10004b94:	b480      	push	{r7}
10004b96:	b089      	sub	sp, #36	; 0x24
10004b98:	af00      	add	r7, sp, #0
10004b9a:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
10004b9c:	2300      	movs	r3, #0
10004b9e:	61bb      	str	r3, [r7, #24]
10004ba0:	2301      	movs	r3, #1
10004ba2:	617b      	str	r3, [r7, #20]
10004ba4:	2300      	movs	r3, #0
10004ba6:	613b      	str	r3, [r7, #16]
10004ba8:	2300      	movs	r3, #0
10004baa:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
10004bac:	f04f 0300 	mov.w	r3, #0
10004bb0:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
10004bb2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004bb6:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10004bba:	f003 0303 	and.w	r3, r3, #3
10004bbe:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
10004bc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004bc4:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10004bc8:	0c1b      	lsrs	r3, r3, #16
10004bca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10004bce:	3301      	adds	r3, #1
10004bd0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
10004bd2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004bd6:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10004bda:	0c1b      	lsrs	r3, r3, #16
10004bdc:	f003 0301 	and.w	r3, r3, #1
10004be0:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
10004be2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004be6:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10004bea:	08db      	lsrs	r3, r3, #3
10004bec:	f3c3 030c 	ubfx	r3, r3, #0, #13
10004bf0:	693a      	ldr	r2, [r7, #16]
10004bf2:	fb02 f303 	mul.w	r3, r2, r3
10004bf6:	ee07 3a90 	vmov	s15, r3
10004bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004bfe:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
10004c02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004c06:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10004c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
10004c0e:	3301      	adds	r3, #1
10004c10:	ee07 3a90 	vmov	s15, r3
10004c14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004c18:	edd7 6a02 	vldr	s13, [r7, #8]
10004c1c:	ed9f 6a56 	vldr	s12, [pc, #344]	; 10004d78 <HAL_RCC_GetPLL3ClockFreq+0x1e4>
10004c20:	eec6 7a86 	vdiv.f32	s15, s13, s12
10004c24:	ee77 7a27 	vadd.f32	s15, s14, s15
10004c28:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10004c2c:	69bb      	ldr	r3, [r7, #24]
10004c2e:	2b03      	cmp	r3, #3
10004c30:	d85b      	bhi.n	10004cea <HAL_RCC_GetPLL3ClockFreq+0x156>
10004c32:	a201      	add	r2, pc, #4	; (adr r2, 10004c38 <HAL_RCC_GetPLL3ClockFreq+0xa4>)
10004c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004c38:	10004c49 	.word	0x10004c49
10004c3c:	10004ca7 	.word	0x10004ca7
10004c40:	10004cc5 	.word	0x10004cc5
10004c44:	10004ce3 	.word	0x10004ce3
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10004c48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004c4c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004c50:	f003 0304 	and.w	r3, r3, #4
10004c54:	2b04      	cmp	r3, #4
10004c56:	d117      	bne.n	10004c88 <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10004c58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004c5c:	699b      	ldr	r3, [r3, #24]
10004c5e:	f003 0303 	and.w	r3, r3, #3
10004c62:	4a46      	ldr	r2, [pc, #280]	; (10004d7c <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10004c64:	fa22 f303 	lsr.w	r3, r2, r3
10004c68:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
10004c6a:	68fa      	ldr	r2, [r7, #12]
10004c6c:	697b      	ldr	r3, [r7, #20]
10004c6e:	fbb2 f3f3 	udiv	r3, r2, r3
10004c72:	ee07 3a90 	vmov	s15, r3
10004c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004c7a:	ed97 7a07 	vldr	s14, [r7, #28]
10004c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
10004c82:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
10004c86:	e030      	b.n	10004cea <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
10004c88:	4a3c      	ldr	r2, [pc, #240]	; (10004d7c <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10004c8a:	697b      	ldr	r3, [r7, #20]
10004c8c:	fbb2 f3f3 	udiv	r3, r2, r3
10004c90:	ee07 3a90 	vmov	s15, r3
10004c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004c98:	ed97 7a07 	vldr	s14, [r7, #28]
10004c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
10004ca0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004ca4:	e021      	b.n	10004cea <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
10004ca6:	4a36      	ldr	r2, [pc, #216]	; (10004d80 <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
10004ca8:	697b      	ldr	r3, [r7, #20]
10004caa:	fbb2 f3f3 	udiv	r3, r2, r3
10004cae:	ee07 3a90 	vmov	s15, r3
10004cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004cb6:	ed97 7a07 	vldr	s14, [r7, #28]
10004cba:	ee67 7a27 	vmul.f32	s15, s14, s15
10004cbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004cc2:	e012      	b.n	10004cea <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
10004cc4:	4a2f      	ldr	r2, [pc, #188]	; (10004d84 <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
10004cc6:	697b      	ldr	r3, [r7, #20]
10004cc8:	fbb2 f3f3 	udiv	r3, r2, r3
10004ccc:	ee07 3a90 	vmov	s15, r3
10004cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004cd4:	ed97 7a07 	vldr	s14, [r7, #28]
10004cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
10004cdc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004ce0:	e003      	b.n	10004cea <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
10004ce2:	f04f 0300 	mov.w	r3, #0
10004ce6:	61fb      	str	r3, [r7, #28]
      break;
10004ce8:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
10004cea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004cee:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10004cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004cf6:	3301      	adds	r3, #1
10004cf8:	ee07 3a90 	vmov	s15, r3
10004cfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004d00:	edd7 6a07 	vldr	s13, [r7, #28]
10004d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004d08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004d0c:	ee17 2a90 	vmov	r2, s15
10004d10:	687b      	ldr	r3, [r7, #4]
10004d12:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
10004d14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d18:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10004d1c:	0a1b      	lsrs	r3, r3, #8
10004d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004d22:	3301      	adds	r3, #1
10004d24:	ee07 3a90 	vmov	s15, r3
10004d28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004d2c:	edd7 6a07 	vldr	s13, [r7, #28]
10004d30:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004d34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004d38:	ee17 2a90 	vmov	r2, s15
10004d3c:	687b      	ldr	r3, [r7, #4]
10004d3e:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
10004d40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d44:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10004d48:	0c1b      	lsrs	r3, r3, #16
10004d4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004d4e:	3301      	adds	r3, #1
10004d50:	ee07 3a90 	vmov	s15, r3
10004d54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004d58:	edd7 6a07 	vldr	s13, [r7, #28]
10004d5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004d64:	ee17 2a90 	vmov	r2, s15
10004d68:	687b      	ldr	r3, [r7, #4]
10004d6a:	609a      	str	r2, [r3, #8]
}
10004d6c:	bf00      	nop
10004d6e:	3724      	adds	r7, #36	; 0x24
10004d70:	46bd      	mov	sp, r7
10004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
10004d76:	4770      	bx	lr
10004d78:	46000000 	.word	0x46000000
10004d7c:	03d09000 	.word	0x03d09000
10004d80:	016e3600 	.word	0x016e3600
10004d84:	003d0900 	.word	0x003d0900

10004d88 <HAL_RCC_GetPLL4ClockFreq>:
  *         right PLL4CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL4_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL4ClockFreq(PLL4_ClocksTypeDef *PLL4_Clocks)
{
10004d88:	b480      	push	{r7}
10004d8a:	b089      	sub	sp, #36	; 0x24
10004d8c:	af00      	add	r7, sp, #0
10004d8e:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0U, pll4m = 1U, pll4fracen = 0U, hsivalue = 0U;
10004d90:	2300      	movs	r3, #0
10004d92:	61bb      	str	r3, [r7, #24]
10004d94:	2301      	movs	r3, #1
10004d96:	617b      	str	r3, [r7, #20]
10004d98:	2300      	movs	r3, #0
10004d9a:	613b      	str	r3, [r7, #16]
10004d9c:	2300      	movs	r3, #0
10004d9e:	60fb      	str	r3, [r7, #12]
  float fracn1, pll4vco = 0;
10004da0:	f04f 0300 	mov.w	r3, #0
10004da4:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL4_SOURCE();
10004da6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004daa:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10004dae:	f003 0303 	and.w	r3, r3, #3
10004db2:	61bb      	str	r3, [r7, #24]
  pll4m = ((RCC->PLL4CFGR1 & RCC_PLL4CFGR1_DIVM4) >> RCC_PLL4CFGR1_DIVM4_Pos) + 1U;
10004db4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004db8:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
10004dbc:	0c1b      	lsrs	r3, r3, #16
10004dbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10004dc2:	3301      	adds	r3, #1
10004dc4:	617b      	str	r3, [r7, #20]
  pll4fracen = (RCC->PLL4FRACR & RCC_PLL4FRACR_FRACLE) >> RCC_PLL4FRACR_FRACLE_Pos;
10004dc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004dca:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10004dce:	0c1b      	lsrs	r3, r3, #16
10004dd0:	f003 0301 	and.w	r3, r3, #1
10004dd4:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll4fracen * ((RCC->PLL4FRACR & RCC_PLL4FRACR_FRACV) >> RCC_PLL4FRACR_FRACV_Pos));
10004dd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004dda:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10004dde:	08db      	lsrs	r3, r3, #3
10004de0:	f3c3 030c 	ubfx	r3, r3, #0, #13
10004de4:	693a      	ldr	r2, [r7, #16]
10004de6:	fb02 f303 	mul.w	r3, r2, r3
10004dea:	ee07 3a90 	vmov	s15, r3
10004dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004df2:	edc7 7a02 	vstr	s15, [r7, #8]
  pll4vco = (float)((float)((RCC->PLL4CFGR1 & RCC_PLL4CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
10004df6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004dfa:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
10004dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
10004e02:	3301      	adds	r3, #1
10004e04:	ee07 3a90 	vmov	s15, r3
10004e08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004e0c:	edd7 6a02 	vldr	s13, [r7, #8]
10004e10:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 10004f84 <HAL_RCC_GetPLL4ClockFreq+0x1fc>
10004e14:	eec6 7a86 	vdiv.f32	s15, s13, s12
10004e18:	ee77 7a27 	vadd.f32	s15, s14, s15
10004e1c:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10004e20:	69bb      	ldr	r3, [r7, #24]
10004e22:	2b03      	cmp	r3, #3
10004e24:	d866      	bhi.n	10004ef4 <HAL_RCC_GetPLL4ClockFreq+0x16c>
10004e26:	a201      	add	r2, pc, #4	; (adr r2, 10004e2c <HAL_RCC_GetPLL4ClockFreq+0xa4>)
10004e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004e2c:	10004e3d 	.word	0x10004e3d
10004e30:	10004e9b 	.word	0x10004e9b
10004e34:	10004eb9 	.word	0x10004eb9
10004e38:	10004ed7 	.word	0x10004ed7
  {
    case RCC_PLL4SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10004e3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e40:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004e44:	f003 0304 	and.w	r3, r3, #4
10004e48:	2b04      	cmp	r3, #4
10004e4a:	d117      	bne.n	10004e7c <HAL_RCC_GetPLL4ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10004e4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e50:	699b      	ldr	r3, [r3, #24]
10004e52:	f003 0303 	and.w	r3, r3, #3
10004e56:	4a4c      	ldr	r2, [pc, #304]	; (10004f88 <HAL_RCC_GetPLL4ClockFreq+0x200>)
10004e58:	fa22 f303 	lsr.w	r3, r2, r3
10004e5c:	60fb      	str	r3, [r7, #12]
        pll4vco *= (float)(hsivalue / pll4m);
10004e5e:	68fa      	ldr	r2, [r7, #12]
10004e60:	697b      	ldr	r3, [r7, #20]
10004e62:	fbb2 f3f3 	udiv	r3, r2, r3
10004e66:	ee07 3a90 	vmov	s15, r3
10004e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004e6e:	ed97 7a07 	vldr	s14, [r7, #28]
10004e72:	ee67 7a27 	vmul.f32	s15, s14, s15
10004e76:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll4vco *= (float)(HSI_VALUE / pll4m);
      }
      break;
10004e7a:	e03b      	b.n	10004ef4 <HAL_RCC_GetPLL4ClockFreq+0x16c>
        pll4vco *= (float)(HSI_VALUE / pll4m);
10004e7c:	4a42      	ldr	r2, [pc, #264]	; (10004f88 <HAL_RCC_GetPLL4ClockFreq+0x200>)
10004e7e:	697b      	ldr	r3, [r7, #20]
10004e80:	fbb2 f3f3 	udiv	r3, r2, r3
10004e84:	ee07 3a90 	vmov	s15, r3
10004e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004e8c:	ed97 7a07 	vldr	s14, [r7, #28]
10004e90:	ee67 7a27 	vmul.f32	s15, s14, s15
10004e94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004e98:	e02c      	b.n	10004ef4 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_HSE:  /* HSE used as PLL clock source */
      pll4vco *= (float)(HSE_VALUE / pll4m);
10004e9a:	4a3c      	ldr	r2, [pc, #240]	; (10004f8c <HAL_RCC_GetPLL4ClockFreq+0x204>)
10004e9c:	697b      	ldr	r3, [r7, #20]
10004e9e:	fbb2 f3f3 	udiv	r3, r2, r3
10004ea2:	ee07 3a90 	vmov	s15, r3
10004ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004eaa:	ed97 7a07 	vldr	s14, [r7, #28]
10004eae:	ee67 7a27 	vmul.f32	s15, s14, s15
10004eb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004eb6:	e01d      	b.n	10004ef4 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_CSI:  /* CSI used as PLL clock source */
      pll4vco *= (float)(CSI_VALUE / pll4m);
10004eb8:	4a35      	ldr	r2, [pc, #212]	; (10004f90 <HAL_RCC_GetPLL4ClockFreq+0x208>)
10004eba:	697b      	ldr	r3, [r7, #20]
10004ebc:	fbb2 f3f3 	udiv	r3, r2, r3
10004ec0:	ee07 3a90 	vmov	s15, r3
10004ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004ec8:	ed97 7a07 	vldr	s14, [r7, #28]
10004ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
10004ed0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004ed4:	e00e      	b.n	10004ef4 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_I2S_CKIN:  /* Signal I2S_CKIN used as reference clock */
      pll4vco *= (float)(EXTERNAL_CLOCK_VALUE / pll4m);
10004ed6:	4a2f      	ldr	r2, [pc, #188]	; (10004f94 <HAL_RCC_GetPLL4ClockFreq+0x20c>)
10004ed8:	697b      	ldr	r3, [r7, #20]
10004eda:	fbb2 f3f3 	udiv	r3, r2, r3
10004ede:	ee07 3a90 	vmov	s15, r3
10004ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004ee6:	ed97 7a07 	vldr	s14, [r7, #28]
10004eea:	ee67 7a27 	vmul.f32	s15, s14, s15
10004eee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10004ef2:	bf00      	nop
  }

  PLL4_Clocks->PLL4_P_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVP) >> RCC_PLL4CFGR2_DIVP_Pos) + 1U)));
10004ef4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004ef8:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
10004efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004f00:	3301      	adds	r3, #1
10004f02:	ee07 3a90 	vmov	s15, r3
10004f06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004f0a:	edd7 6a07 	vldr	s13, [r7, #28]
10004f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004f12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004f16:	ee17 2a90 	vmov	r2, s15
10004f1a:	687b      	ldr	r3, [r7, #4]
10004f1c:	601a      	str	r2, [r3, #0]
  PLL4_Clocks->PLL4_Q_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVQ) >> RCC_PLL4CFGR2_DIVQ_Pos) + 1U)));
10004f1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f22:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
10004f26:	0a1b      	lsrs	r3, r3, #8
10004f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004f2c:	3301      	adds	r3, #1
10004f2e:	ee07 3a90 	vmov	s15, r3
10004f32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004f36:	edd7 6a07 	vldr	s13, [r7, #28]
10004f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004f42:	ee17 2a90 	vmov	r2, s15
10004f46:	687b      	ldr	r3, [r7, #4]
10004f48:	605a      	str	r2, [r3, #4]
  PLL4_Clocks->PLL4_R_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVR) >> RCC_PLL4CFGR2_DIVR_Pos) + 1U)));
10004f4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f4e:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
10004f52:	0c1b      	lsrs	r3, r3, #16
10004f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004f58:	3301      	adds	r3, #1
10004f5a:	ee07 3a90 	vmov	s15, r3
10004f5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10004f62:	edd7 6a07 	vldr	s13, [r7, #28]
10004f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
10004f6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10004f6e:	ee17 2a90 	vmov	r2, s15
10004f72:	687b      	ldr	r3, [r7, #4]
10004f74:	609a      	str	r2, [r3, #8]
}
10004f76:	bf00      	nop
10004f78:	3724      	adds	r7, #36	; 0x24
10004f7a:	46bd      	mov	sp, r7
10004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
10004f80:	4770      	bx	lr
10004f82:	bf00      	nop
10004f84:	46000000 	.word	0x46000000
10004f88:	03d09000 	.word	0x03d09000
10004f8c:	016e3600 	.word	0x016e3600
10004f90:	003d0900 	.word	0x003d0900
10004f94:	00bb8000 	.word	0x00bb8000

10004f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
10004f98:	b580      	push	{r7, lr}
10004f9a:	b082      	sub	sp, #8
10004f9c:	af00      	add	r7, sp, #0
  uint32_t apb1div = 0;
10004f9e:	2300      	movs	r3, #0
10004fa0:	607b      	str	r3, [r7, #4]

  /* Compute PCLK1 frequency ---------------------------*/
  apb1div = __HAL_RCC_GET_APB1_DIV();
10004fa2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004fa6:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10004faa:	f003 0307 	and.w	r3, r3, #7
10004fae:	607b      	str	r3, [r7, #4]
  if (apb1div > RCC_APB1_DIV16)
10004fb0:	687b      	ldr	r3, [r7, #4]
10004fb2:	2b04      	cmp	r3, #4
10004fb4:	d901      	bls.n	10004fba <HAL_RCC_GetPCLK1Freq+0x22>
  {
    apb1div = RCC_APB1_DIV16;
10004fb6:	2304      	movs	r3, #4
10004fb8:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb1div);
10004fba:	f000 f88a 	bl	100050d2 <HAL_RCC_GetMCUFreq>
10004fbe:	4602      	mov	r2, r0
10004fc0:	687b      	ldr	r3, [r7, #4]
10004fc2:	fa22 f303 	lsr.w	r3, r2, r3
}
10004fc6:	4618      	mov	r0, r3
10004fc8:	3708      	adds	r7, #8
10004fca:	46bd      	mov	sp, r7
10004fcc:	bd80      	pop	{r7, pc}

10004fce <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
10004fce:	b580      	push	{r7, lr}
10004fd0:	b082      	sub	sp, #8
10004fd2:	af00      	add	r7, sp, #0
  uint32_t apb2div = 0;
10004fd4:	2300      	movs	r3, #0
10004fd6:	607b      	str	r3, [r7, #4]

  /* Compute PCLK2 frequency ---------------------------*/
  apb2div = __HAL_RCC_GET_APB2_DIV();
10004fd8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004fdc:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10004fe0:	f003 0307 	and.w	r3, r3, #7
10004fe4:	607b      	str	r3, [r7, #4]
  if (apb2div > RCC_APB2_DIV16)
10004fe6:	687b      	ldr	r3, [r7, #4]
10004fe8:	2b04      	cmp	r3, #4
10004fea:	d901      	bls.n	10004ff0 <HAL_RCC_GetPCLK2Freq+0x22>
  {
    apb2div = RCC_APB2_DIV16;
10004fec:	2304      	movs	r3, #4
10004fee:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb2div);
10004ff0:	f000 f86f 	bl	100050d2 <HAL_RCC_GetMCUFreq>
10004ff4:	4602      	mov	r2, r0
10004ff6:	687b      	ldr	r3, [r7, #4]
10004ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
10004ffc:	4618      	mov	r0, r3
10004ffe:	3708      	adds	r7, #8
10005000:	46bd      	mov	sp, r7
10005002:	bd80      	pop	{r7, pc}

10005004 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
10005004:	b580      	push	{r7, lr}
10005006:	b082      	sub	sp, #8
10005008:	af00      	add	r7, sp, #0
  uint32_t apb3div = 0;
1000500a:	2300      	movs	r3, #0
1000500c:	607b      	str	r3, [r7, #4]

  /* Compute PCLK3 frequency ---------------------------*/
  apb3div = __HAL_RCC_GET_APB3_DIV();
1000500e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005012:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
10005016:	f003 0307 	and.w	r3, r3, #7
1000501a:	607b      	str	r3, [r7, #4]
  if (apb3div > RCC_APB3_DIV16)
1000501c:	687b      	ldr	r3, [r7, #4]
1000501e:	2b04      	cmp	r3, #4
10005020:	d901      	bls.n	10005026 <HAL_RCC_GetPCLK3Freq+0x22>
  {
    apb3div = RCC_APB3_DIV16;
10005022:	2304      	movs	r3, #4
10005024:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb3div);
10005026:	f000 f854 	bl	100050d2 <HAL_RCC_GetMCUFreq>
1000502a:	4602      	mov	r2, r0
1000502c:	687b      	ldr	r3, [r7, #4]
1000502e:	fa22 f303 	lsr.w	r3, r2, r3
}
10005032:	4618      	mov	r0, r3
10005034:	3708      	adds	r7, #8
10005036:	46bd      	mov	sp, r7
10005038:	bd80      	pop	{r7, pc}

1000503a <HAL_RCC_GetPCLK5Freq>:
  * @note   Each time PCLK5 changes, this function must be called to update the
  *         right PCLK5 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK5 frequency
  */
uint32_t HAL_RCC_GetPCLK5Freq(void)
{
1000503a:	b580      	push	{r7, lr}
1000503c:	b082      	sub	sp, #8
1000503e:	af00      	add	r7, sp, #0
  uint32_t apb5div = 0;
10005040:	2300      	movs	r3, #0
10005042:	607b      	str	r3, [r7, #4]

  /* Compute PCLK5 frequency ---------------------------*/
  apb5div = __HAL_RCC_GET_APB5_DIV();
10005044:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000504a:	f003 0307 	and.w	r3, r3, #7
1000504e:	607b      	str	r3, [r7, #4]
  if (apb5div > RCC_APB5_DIV16)
10005050:	687b      	ldr	r3, [r7, #4]
10005052:	2b04      	cmp	r3, #4
10005054:	d901      	bls.n	1000505a <HAL_RCC_GetPCLK5Freq+0x20>
  {
    apb5div = RCC_APB5_DIV16;
10005056:	2304      	movs	r3, #4
10005058:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetACLKFreq() >> apb5div);
1000505a:	f000 f808 	bl	1000506e <HAL_RCC_GetACLKFreq>
1000505e:	4602      	mov	r2, r0
10005060:	687b      	ldr	r3, [r7, #4]
10005062:	fa22 f303 	lsr.w	r3, r2, r3
}
10005066:	4618      	mov	r0, r3
10005068:	3708      	adds	r7, #8
1000506a:	46bd      	mov	sp, r7
1000506c:	bd80      	pop	{r7, pc}

1000506e <HAL_RCC_GetACLKFreq>:
  * @note   Each time ACLK changes, this function must be called to update the
  *         right ACLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval ACLK frequency
  */
uint32_t HAL_RCC_GetACLKFreq(void)
{
1000506e:	b580      	push	{r7, lr}
10005070:	b082      	sub	sp, #8
10005072:	af00      	add	r7, sp, #0
  uint32_t axidiv = 0;
10005074:	2300      	movs	r3, #0
10005076:	607b      	str	r3, [r7, #4]

  /* Compute ACLK frequency ---------------------------*/
  axidiv = __HAL_RCC_GET_AXI_DIV();
10005078:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000507c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000507e:	f003 0307 	and.w	r3, r3, #7
10005082:	607b      	str	r3, [r7, #4]
  if (axidiv > RCC_AXI_DIV4)
10005084:	687b      	ldr	r3, [r7, #4]
10005086:	2b03      	cmp	r3, #3
10005088:	d901      	bls.n	1000508e <HAL_RCC_GetACLKFreq+0x20>
  {
    axidiv = RCC_AXI_DIV4;
1000508a:	2303      	movs	r3, #3
1000508c:	607b      	str	r3, [r7, #4]
  }
  axidiv += 1;
1000508e:	687b      	ldr	r3, [r7, #4]
10005090:	3301      	adds	r3, #1
10005092:	607b      	str	r3, [r7, #4]

  return HAL_RCC_GetAXISSFreq() / axidiv;
10005094:	f000 f870 	bl	10005178 <HAL_RCC_GetAXISSFreq>
10005098:	4602      	mov	r2, r0
1000509a:	687b      	ldr	r3, [r7, #4]
1000509c:	fbb2 f3f3 	udiv	r3, r2, r3
}
100050a0:	4618      	mov	r0, r3
100050a2:	3708      	adds	r7, #8
100050a4:	46bd      	mov	sp, r7
100050a6:	bd80      	pop	{r7, pc}

100050a8 <HAL_RCC_GetHCLK6Freq>:
  * @note   Each time HCLK6 changes, this function must be called to update the
  *         right HCLK6 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK6 frequency
  */
uint32_t HAL_RCC_GetHCLK6Freq(void)
{
100050a8:	b580      	push	{r7, lr}
100050aa:	af00      	add	r7, sp, #0
  return HAL_RCC_GetACLKFreq();
100050ac:	f7ff ffdf 	bl	1000506e <HAL_RCC_GetACLKFreq>
100050b0:	4603      	mov	r3, r0
}
100050b2:	4618      	mov	r0, r3
100050b4:	bd80      	pop	{r7, pc}

100050b6 <HAL_RCC_GetHCLK2Freq>:
  * @note   Each time HCLK1 changes, this function must be called to update the
  *         right HCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK2 frequency
  */
uint32_t HAL_RCC_GetHCLK2Freq(void)
{
100050b6:	b580      	push	{r7, lr}
100050b8:	af00      	add	r7, sp, #0
  return HAL_RCC_GetMCUFreq();
100050ba:	f000 f80a 	bl	100050d2 <HAL_RCC_GetMCUFreq>
100050be:	4603      	mov	r3, r0
}
100050c0:	4618      	mov	r0, r3
100050c2:	bd80      	pop	{r7, pc}

100050c4 <HAL_RCC_GetMLHCLKFreq>:
  * @note   Each time MLHCLK changes, this function must be called to update the
  *         right MLHCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK4 frequency
  */
uint32_t HAL_RCC_GetMLHCLKFreq(void)
{
100050c4:	b580      	push	{r7, lr}
100050c6:	af00      	add	r7, sp, #0
  return HAL_RCC_GetMCUFreq();
100050c8:	f000 f803 	bl	100050d2 <HAL_RCC_GetMCUFreq>
100050cc:	4603      	mov	r3, r0
}
100050ce:	4618      	mov	r0, r3
100050d0:	bd80      	pop	{r7, pc}

100050d2 <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
100050d2:	b580      	push	{r7, lr}
100050d4:	b082      	sub	sp, #8
100050d6:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
100050d8:	2300      	movs	r3, #0
100050da:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
100050dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100050e0:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
100050e4:	f003 030f 	and.w	r3, r3, #15
100050e8:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
100050ea:	687b      	ldr	r3, [r7, #4]
100050ec:	2b09      	cmp	r3, #9
100050ee:	d901      	bls.n	100050f4 <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
100050f0:	2309      	movs	r3, #9
100050f2:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
100050f4:	f000 f87e 	bl	100051f4 <HAL_RCC_GetMCUSSFreq>
100050f8:	4602      	mov	r2, r0
100050fa:	687b      	ldr	r3, [r7, #4]
100050fc:	fa22 f303 	lsr.w	r3, r2, r3
}
10005100:	4618      	mov	r0, r3
10005102:	3708      	adds	r7, #8
10005104:	46bd      	mov	sp, r7
10005106:	bd80      	pop	{r7, pc}

10005108 <RCC_GetCKPERFreq>:
  * @note   Each time CKPER changes, this function must be called to update the
  *         right CKPER value. Otherwise, any configuration based on this function will be incorrect.
  * @retval CKPER frequency
  */
uint32_t RCC_GetCKPERFreq(void)
{
10005108:	b480      	push	{r7}
1000510a:	b083      	sub	sp, #12
1000510c:	af00      	add	r7, sp, #0
  uint32_t ckperclocksource = 0, frequency = 0;
1000510e:	2300      	movs	r3, #0
10005110:	603b      	str	r3, [r7, #0]
10005112:	2300      	movs	r3, #0
10005114:	607b      	str	r3, [r7, #4]

  ckperclocksource = __HAL_RCC_GET_CKPER_SOURCE();
10005116:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000511a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
1000511e:	f003 0303 	and.w	r3, r3, #3
10005122:	603b      	str	r3, [r7, #0]

  if (ckperclocksource == RCC_CKPERCLKSOURCE_HSI)
10005124:	683b      	ldr	r3, [r7, #0]
10005126:	2b00      	cmp	r3, #0
10005128:	d102      	bne.n	10005130 <RCC_GetCKPERFreq+0x28>
  {
    /* In Case the main PLL Source is HSI */
    frequency = HSI_VALUE;
1000512a:	4b0c      	ldr	r3, [pc, #48]	; (1000515c <RCC_GetCKPERFreq+0x54>)
1000512c:	607b      	str	r3, [r7, #4]
1000512e:	e00d      	b.n	1000514c <RCC_GetCKPERFreq+0x44>
  }

  else if (ckperclocksource == RCC_CKPERCLKSOURCE_CSI)
10005130:	683b      	ldr	r3, [r7, #0]
10005132:	2b01      	cmp	r3, #1
10005134:	d102      	bne.n	1000513c <RCC_GetCKPERFreq+0x34>
  {
    /* In Case the main PLL Source is CSI */
    frequency = CSI_VALUE;
10005136:	4b0a      	ldr	r3, [pc, #40]	; (10005160 <RCC_GetCKPERFreq+0x58>)
10005138:	607b      	str	r3, [r7, #4]
1000513a:	e007      	b.n	1000514c <RCC_GetCKPERFreq+0x44>
  }

  else if (ckperclocksource == RCC_CKPERCLKSOURCE_HSE)
1000513c:	683b      	ldr	r3, [r7, #0]
1000513e:	2b02      	cmp	r3, #2
10005140:	d102      	bne.n	10005148 <RCC_GetCKPERFreq+0x40>
  {
    /* In Case the main PLL Source is HSE */
    frequency = HSE_VALUE;
10005142:	4b08      	ldr	r3, [pc, #32]	; (10005164 <RCC_GetCKPERFreq+0x5c>)
10005144:	607b      	str	r3, [r7, #4]
10005146:	e001      	b.n	1000514c <RCC_GetCKPERFreq+0x44>
  }
  else
  {
    frequency = 0;
10005148:	2300      	movs	r3, #0
1000514a:	607b      	str	r3, [r7, #4]
  }

  return frequency;
1000514c:	687b      	ldr	r3, [r7, #4]
}
1000514e:	4618      	mov	r0, r3
10005150:	370c      	adds	r7, #12
10005152:	46bd      	mov	sp, r7
10005154:	f85d 7b04 	ldr.w	r7, [sp], #4
10005158:	4770      	bx	lr
1000515a:	bf00      	nop
1000515c:	03d09000 	.word	0x03d09000
10005160:	003d0900 	.word	0x003d0900
10005164:	016e3600 	.word	0x016e3600

10005168 <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
10005168:	b580      	push	{r7, lr}
1000516a:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
1000516c:	f7ff ffb1 	bl	100050d2 <HAL_RCC_GetMCUFreq>
10005170:	4603      	mov	r3, r0
#endif
}
10005172:	4618      	mov	r0, r3
10005174:	bd80      	pop	{r7, pc}
	...

10005178 <HAL_RCC_GetAXISSFreq>:
  return mpussfreq;
}


uint32_t HAL_RCC_GetAXISSFreq()
{
10005178:	b580      	push	{r7, lr}
1000517a:	b084      	sub	sp, #16
1000517c:	af00      	add	r7, sp, #0
  uint32_t axissfreq = 0;
1000517e:	2300      	movs	r3, #0
10005180:	60fb      	str	r3, [r7, #12]
  PLL2_ClocksTypeDef pll2_clocks;

  switch (__HAL_RCC_GET_AXIS_SOURCE())
10005182:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005188:	f003 0307 	and.w	r3, r3, #7
1000518c:	2b02      	cmp	r3, #2
1000518e:	d006      	beq.n	1000519e <HAL_RCC_GetAXISSFreq+0x26>
10005190:	2b02      	cmp	r3, #2
10005192:	d823      	bhi.n	100051dc <HAL_RCC_GetAXISSFreq+0x64>
10005194:	2b00      	cmp	r3, #0
10005196:	d009      	beq.n	100051ac <HAL_RCC_GetAXISSFreq+0x34>
10005198:	2b01      	cmp	r3, #1
1000519a:	d01c      	beq.n	100051d6 <HAL_RCC_GetAXISSFreq+0x5e>
1000519c:	e01e      	b.n	100051dc <HAL_RCC_GetAXISSFreq+0x64>
  {
    case RCC_AXISSOURCE_PLL2:
      HAL_RCC_GetPLL2ClockFreq(&pll2_clocks);
1000519e:	463b      	mov	r3, r7
100051a0:	4618      	mov	r0, r3
100051a2:	f7ff fc0b 	bl	100049bc <HAL_RCC_GetPLL2ClockFreq>
      axissfreq = pll2_clocks.PLL2_P_Frequency;
100051a6:	683b      	ldr	r3, [r7, #0]
100051a8:	60fb      	str	r3, [r7, #12]
      break;
100051aa:	e01a      	b.n	100051e2 <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
100051ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100051b0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100051b4:	f003 0304 	and.w	r3, r3, #4
100051b8:	2b04      	cmp	r3, #4
100051ba:	d109      	bne.n	100051d0 <HAL_RCC_GetAXISSFreq+0x58>
      {
        axissfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100051bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100051c0:	699b      	ldr	r3, [r3, #24]
100051c2:	f003 0303 	and.w	r3, r3, #3
100051c6:	4a09      	ldr	r2, [pc, #36]	; (100051ec <HAL_RCC_GetAXISSFreq+0x74>)
100051c8:	fa22 f303 	lsr.w	r3, r2, r3
100051cc:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        axissfreq = HSI_VALUE;
      }
      break;
100051ce:	e008      	b.n	100051e2 <HAL_RCC_GetAXISSFreq+0x6a>
        axissfreq = HSI_VALUE;
100051d0:	4b06      	ldr	r3, [pc, #24]	; (100051ec <HAL_RCC_GetAXISSFreq+0x74>)
100051d2:	60fb      	str	r3, [r7, #12]
      break;
100051d4:	e005      	b.n	100051e2 <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_HSE:
      axissfreq = HSE_VALUE;
100051d6:	4b06      	ldr	r3, [pc, #24]	; (100051f0 <HAL_RCC_GetAXISSFreq+0x78>)
100051d8:	60fb      	str	r3, [r7, #12]
      break;
100051da:	e002      	b.n	100051e2 <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_OFF:
    default:
      axissfreq = 0; /* ck_axiss is gated */
100051dc:	2300      	movs	r3, #0
100051de:	60fb      	str	r3, [r7, #12]
      break;
100051e0:	bf00      	nop
  }

  return axissfreq;
100051e2:	68fb      	ldr	r3, [r7, #12]
}
100051e4:	4618      	mov	r0, r3
100051e6:	3710      	adds	r7, #16
100051e8:	46bd      	mov	sp, r7
100051ea:	bd80      	pop	{r7, pc}
100051ec:	03d09000 	.word	0x03d09000
100051f0:	016e3600 	.word	0x016e3600

100051f4 <HAL_RCC_GetMCUSSFreq>:

uint32_t HAL_RCC_GetMCUSSFreq()
{
100051f4:	b580      	push	{r7, lr}
100051f6:	b084      	sub	sp, #16
100051f8:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
100051fa:	2300      	movs	r3, #0
100051fc:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
100051fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10005204:	f003 0303 	and.w	r3, r3, #3
10005208:	2b03      	cmp	r3, #3
1000520a:	d822      	bhi.n	10005252 <HAL_RCC_GetMCUSSFreq+0x5e>
1000520c:	a201      	add	r2, pc, #4	; (adr r2, 10005214 <HAL_RCC_GetMCUSSFreq+0x20>)
1000520e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005212:	bf00      	nop
10005214:	10005233 	.word	0x10005233
10005218:	10005247 	.word	0x10005247
1000521c:	1000524d 	.word	0x1000524d
10005220:	10005225 	.word	0x10005225
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10005224:	463b      	mov	r3, r7
10005226:	4618      	mov	r0, r3
10005228:	f7ff fcb4 	bl	10004b94 <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
1000522c:	683b      	ldr	r3, [r7, #0]
1000522e:	60fb      	str	r3, [r7, #12]
      break;
10005230:	e00f      	b.n	10005252 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10005232:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005236:	699b      	ldr	r3, [r3, #24]
10005238:	f003 0303 	and.w	r3, r3, #3
1000523c:	4a07      	ldr	r2, [pc, #28]	; (1000525c <HAL_RCC_GetMCUSSFreq+0x68>)
1000523e:	fa22 f303 	lsr.w	r3, r2, r3
10005242:	60fb      	str	r3, [r7, #12]

      break;
10005244:	e005      	b.n	10005252 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
10005246:	4b06      	ldr	r3, [pc, #24]	; (10005260 <HAL_RCC_GetMCUSSFreq+0x6c>)
10005248:	60fb      	str	r3, [r7, #12]
      break;
1000524a:	e002      	b.n	10005252 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
1000524c:	4b05      	ldr	r3, [pc, #20]	; (10005264 <HAL_RCC_GetMCUSSFreq+0x70>)
1000524e:	60fb      	str	r3, [r7, #12]
      break;
10005250:	bf00      	nop
  }

  return mcussfreq;
10005252:	68fb      	ldr	r3, [r7, #12]
}
10005254:	4618      	mov	r0, r3
10005256:	3710      	adds	r7, #16
10005258:	46bd      	mov	sp, r7
1000525a:	bd80      	pop	{r7, pc}
1000525c:	03d09000 	.word	0x03d09000
10005260:	016e3600 	.word	0x016e3600
10005264:	003d0900 	.word	0x003d0900

10005268 <HAL_RCC_WAKEUP_IRQHandler>:
  * @brief This function handles the RCC Wake up interrupt (rcc_mcu_wkup_irq/rcc_mpu_wkup_irq)
  * @note This API should be called under the RCC_WAKEUP_Handler().
  * @retval None
  */
void HAL_RCC_WAKEUP_IRQHandler(void)
{
10005268:	b580      	push	{r7, lr}
1000526a:	af00      	add	r7, sp, #0
  /* Check RCC WKUP flag is set */
  if (__HAL_RCC_GET_IT(RCC_IT_WKUP) != RESET)
1000526c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005270:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
10005274:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
10005278:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
1000527c:	d107      	bne.n	1000528e <HAL_RCC_WAKEUP_IRQHandler+0x26>
  {
    /* Clear the RCC WKUP flag bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_WKUP);
1000527e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005282:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
10005286:	f8c3 2c18 	str.w	r2, [r3, #3096]	; 0xc18

    /* RCC WKUP interrupt user callback */
    HAL_RCC_WAKEUP_Callback();
1000528a:	f000 f802 	bl	10005292 <HAL_RCC_WAKEUP_Callback>
  }
}
1000528e:	bf00      	nop
10005290:	bd80      	pop	{r7, pc}

10005292 <HAL_RCC_WAKEUP_Callback>:
/**
  * @brief  RCC WAKEUP interrupt callback
  * @retval None
  */
__weak void HAL_RCC_WAKEUP_Callback(void)
{
10005292:	b480      	push	{r7}
10005294:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_WAKEUP_Callback could be implemented in the user file
  */
}
10005296:	bf00      	nop
10005298:	46bd      	mov	sp, r7
1000529a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000529e:	4770      	bx	lr

100052a0 <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
100052a0:	b580      	push	{r7, lr}
100052a2:	b084      	sub	sp, #16
100052a4:	af00      	add	r7, sp, #0
100052a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
100052a8:	687b      	ldr	r3, [r7, #4]
100052aa:	681b      	ldr	r3, [r3, #0]
100052ac:	2b00      	cmp	r3, #0
100052ae:	f000 8171 	beq.w	10005594 <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
100052b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100052b8:	f003 0307 	and.w	r3, r3, #7
100052bc:	2b02      	cmp	r3, #2
100052be:	d108      	bne.n	100052d2 <RCCEx_PLL2_Config+0x32>
100052c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100052c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100052ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100052ce:	f000 815f 	beq.w	10005590 <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
100052d2:	687b      	ldr	r3, [r7, #4]
100052d4:	681b      	ldr	r3, [r3, #0]
100052d6:	2b02      	cmp	r3, #2
100052d8:	f040 8130 	bne.w	1000553c <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
100052dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100052e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100052e2:	f003 0303 	and.w	r3, r3, #3
100052e6:	2b00      	cmp	r3, #0
100052e8:	d008      	beq.n	100052fc <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
100052ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100052ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100052f0:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
100052f4:	2b01      	cmp	r3, #1
100052f6:	d001      	beq.n	100052fc <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
100052f8:	2301      	movs	r3, #1
100052fa:	e14c      	b.n	10005596 <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
100052fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005304:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
1000530c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
10005310:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005314:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005318:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000531c:	f023 0301 	bic.w	r3, r3, #1
10005320:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10005324:	f7fc fa60 	bl	100017e8 <HAL_GetTick>
10005328:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000532a:	e008      	b.n	1000533e <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000532c:	f7fc fa5c 	bl	100017e8 <HAL_GetTick>
10005330:	4602      	mov	r2, r0
10005332:	68fb      	ldr	r3, [r7, #12]
10005334:	1ad3      	subs	r3, r2, r3
10005336:	2b64      	cmp	r3, #100	; 0x64
10005338:	d901      	bls.n	1000533e <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
1000533a:	2303      	movs	r3, #3
1000533c:	e12b      	b.n	10005596 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000533e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005346:	f003 0302 	and.w	r3, r3, #2
1000534a:	2b02      	cmp	r3, #2
1000534c:	d0ee      	beq.n	1000532c <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
1000534e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005352:	6a1b      	ldr	r3, [r3, #32]
10005354:	f003 0303 	and.w	r3, r3, #3
10005358:	2b02      	cmp	r3, #2
1000535a:	d107      	bne.n	1000536c <RCCEx_PLL2_Config+0xcc>
1000535c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005360:	6a1b      	ldr	r3, [r3, #32]
10005362:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10005366:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000536a:	d00e      	beq.n	1000538a <RCCEx_PLL2_Config+0xea>
1000536c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005370:	6a1b      	ldr	r3, [r3, #32]
10005372:	f003 0303 	and.w	r3, r3, #3
10005376:	2b03      	cmp	r3, #3
10005378:	d112      	bne.n	100053a0 <RCCEx_PLL2_Config+0x100>
1000537a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000537e:	6a1b      	ldr	r3, [r3, #32]
10005380:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10005384:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10005388:	d10a      	bne.n	100053a0 <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
1000538a:	687b      	ldr	r3, [r7, #4]
1000538c:	685a      	ldr	r2, [r3, #4]
1000538e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005394:	f003 0303 	and.w	r3, r3, #3
10005398:	429a      	cmp	r2, r3
1000539a:	d00c      	beq.n	100053b6 <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
1000539c:	2301      	movs	r3, #1
1000539e:	e0fa      	b.n	10005596 <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
100053a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100053a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100053a6:	f023 0203 	bic.w	r2, r3, #3
100053aa:	687b      	ldr	r3, [r7, #4]
100053ac:	685b      	ldr	r3, [r3, #4]
100053ae:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100053b2:	4313      	orrs	r3, r2
100053b4:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
100053b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100053ba:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
100053be:	4b78      	ldr	r3, [pc, #480]	; (100055a0 <RCCEx_PLL2_Config+0x300>)
100053c0:	4013      	ands	r3, r2
100053c2:	687a      	ldr	r2, [r7, #4]
100053c4:	68d2      	ldr	r2, [r2, #12]
100053c6:	1e51      	subs	r1, r2, #1
100053c8:	687a      	ldr	r2, [r7, #4]
100053ca:	6892      	ldr	r2, [r2, #8]
100053cc:	3a01      	subs	r2, #1
100053ce:	0412      	lsls	r2, r2, #16
100053d0:	430a      	orrs	r2, r1
100053d2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100053d6:	4313      	orrs	r3, r2
100053d8:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
100053dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100053e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
100053e4:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
100053e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
100053ec:	687a      	ldr	r2, [r7, #4]
100053ee:	6912      	ldr	r2, [r2, #16]
100053f0:	1e51      	subs	r1, r2, #1
100053f2:	687a      	ldr	r2, [r7, #4]
100053f4:	6952      	ldr	r2, [r2, #20]
100053f6:	3a01      	subs	r2, #1
100053f8:	0212      	lsls	r2, r2, #8
100053fa:	4311      	orrs	r1, r2
100053fc:	687a      	ldr	r2, [r7, #4]
100053fe:	6992      	ldr	r2, [r2, #24]
10005400:	3a01      	subs	r2, #1
10005402:	0412      	lsls	r2, r2, #16
10005404:	430a      	orrs	r2, r1
10005406:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000540a:	4313      	orrs	r3, r2
1000540c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
10005410:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005414:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10005418:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000541c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10005420:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
10005424:	687b      	ldr	r3, [r7, #4]
10005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005428:	2b02      	cmp	r3, #2
1000542a:	d003      	beq.n	10005434 <RCCEx_PLL2_Config+0x194>
1000542c:	687b      	ldr	r3, [r7, #4]
1000542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005430:	2b00      	cmp	r3, #0
10005432:	d10c      	bne.n	1000544e <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
10005434:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005438:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
1000543c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005440:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10005444:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10005448:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
1000544c:	e00f      	b.n	1000546e <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
1000544e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005452:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10005456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000545a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
1000545e:	687a      	ldr	r2, [r7, #4]
10005460:	6a12      	ldr	r2, [r2, #32]
10005462:	00d2      	lsls	r2, r2, #3
10005464:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005468:	4313      	orrs	r3, r2
1000546a:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
1000546e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005472:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10005476:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000547a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1000547e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10005482:	687b      	ldr	r3, [r7, #4]
10005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005486:	2b02      	cmp	r3, #2
10005488:	d124      	bne.n	100054d4 <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
1000548a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000548e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
10005492:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10005496:	687b      	ldr	r3, [r7, #4]
10005498:	6a99      	ldr	r1, [r3, #40]	; 0x28
1000549a:	687b      	ldr	r3, [r7, #4]
1000549c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000549e:	4319      	orrs	r1, r3
100054a0:	687b      	ldr	r3, [r7, #4]
100054a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100054a4:	4319      	orrs	r1, r3
100054a6:	687b      	ldr	r3, [r7, #4]
100054a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100054aa:	4319      	orrs	r1, r3
100054ac:	687b      	ldr	r3, [r7, #4]
100054ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100054b0:	041b      	lsls	r3, r3, #16
100054b2:	430b      	orrs	r3, r1
100054b4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100054b8:	4313      	orrs	r3, r2
100054ba:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
100054be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100054c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100054c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100054ca:	f043 0304 	orr.w	r3, r3, #4
100054ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
100054d2:	e009      	b.n	100054e8 <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
100054d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100054d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100054dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100054e0:	f023 0304 	bic.w	r3, r3, #4
100054e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
100054e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100054ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100054f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100054f4:	f043 0301 	orr.w	r3, r3, #1
100054f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100054fc:	f7fc f974 	bl	100017e8 <HAL_GetTick>
10005500:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10005502:	e008      	b.n	10005516 <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005504:	f7fc f970 	bl	100017e8 <HAL_GetTick>
10005508:	4602      	mov	r2, r0
1000550a:	68fb      	ldr	r3, [r7, #12]
1000550c:	1ad3      	subs	r3, r2, r3
1000550e:	2b64      	cmp	r3, #100	; 0x64
10005510:	d901      	bls.n	10005516 <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
10005512:	2303      	movs	r3, #3
10005514:	e03f      	b.n	10005596 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10005516:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000551a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000551e:	f003 0302 	and.w	r3, r3, #2
10005522:	2b02      	cmp	r3, #2
10005524:	d1ee      	bne.n	10005504 <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10005526:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000552a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000552e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005532:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10005536:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
1000553a:	e02b      	b.n	10005594 <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
1000553c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005544:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
1000554c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
10005550:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005554:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005558:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000555c:	f023 0301 	bic.w	r3, r3, #1
10005560:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10005564:	f7fc f940 	bl	100017e8 <HAL_GetTick>
10005568:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000556a:	e008      	b.n	1000557e <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000556c:	f7fc f93c 	bl	100017e8 <HAL_GetTick>
10005570:	4602      	mov	r2, r0
10005572:	68fb      	ldr	r3, [r7, #12]
10005574:	1ad3      	subs	r3, r2, r3
10005576:	2b64      	cmp	r3, #100	; 0x64
10005578:	d901      	bls.n	1000557e <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
1000557a:	2303      	movs	r3, #3
1000557c:	e00b      	b.n	10005596 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000557e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005586:	f003 0302 	and.w	r3, r3, #2
1000558a:	2b02      	cmp	r3, #2
1000558c:	d0ee      	beq.n	1000556c <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
1000558e:	e001      	b.n	10005594 <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10005590:	2301      	movs	r3, #1
10005592:	e000      	b.n	10005596 <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
10005594:	2300      	movs	r3, #0

}
10005596:	4618      	mov	r0, r3
10005598:	3710      	adds	r7, #16
1000559a:	46bd      	mov	sp, r7
1000559c:	bd80      	pop	{r7, pc}
1000559e:	bf00      	nop
100055a0:	ffc0fe00 	.word	0xffc0fe00

100055a4 <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
100055a4:	b580      	push	{r7, lr}
100055a6:	b084      	sub	sp, #16
100055a8:	af00      	add	r7, sp, #0
100055aa:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
100055ac:	687b      	ldr	r3, [r7, #4]
100055ae:	681b      	ldr	r3, [r3, #0]
100055b0:	2b00      	cmp	r3, #0
100055b2:	f000 815a 	beq.w	1000586a <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
100055b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100055ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100055bc:	f003 0303 	and.w	r3, r3, #3
100055c0:	2b03      	cmp	r3, #3
100055c2:	d108      	bne.n	100055d6 <RCCEx_PLL3_Config+0x32>
100055c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100055c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100055ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100055ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100055d2:	f000 8148 	beq.w	10005866 <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
100055d6:	687b      	ldr	r3, [r7, #4]
100055d8:	681b      	ldr	r3, [r3, #0]
100055da:	2b02      	cmp	r3, #2
100055dc:	f040 8119 	bne.w	10005812 <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100055e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100055e4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100055e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100055ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100055f0:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
100055f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100055f8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100055fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005600:	f023 0301 	bic.w	r3, r3, #1
10005604:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10005608:	f7fc f8ee 	bl	100017e8 <HAL_GetTick>
1000560c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
1000560e:	e008      	b.n	10005622 <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005610:	f7fc f8ea 	bl	100017e8 <HAL_GetTick>
10005614:	4602      	mov	r2, r0
10005616:	68fb      	ldr	r3, [r7, #12]
10005618:	1ad3      	subs	r3, r2, r3
1000561a:	2b64      	cmp	r3, #100	; 0x64
1000561c:	d901      	bls.n	10005622 <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
1000561e:	2303      	movs	r3, #3
10005620:	e124      	b.n	1000586c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10005622:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005626:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000562a:	f003 0302 	and.w	r3, r3, #2
1000562e:	2b02      	cmp	r3, #2
10005630:	d0ee      	beq.n	10005610 <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
10005632:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005636:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
1000563a:	f023 0203 	bic.w	r2, r3, #3
1000563e:	687b      	ldr	r3, [r7, #4]
10005640:	685b      	ldr	r3, [r3, #4]
10005642:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005646:	4313      	orrs	r3, r2
10005648:	f8c1 3820 	str.w	r3, [r1, #2080]	; 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
1000564c:	e008      	b.n	10005660 <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000564e:	f7fc f8cb 	bl	100017e8 <HAL_GetTick>
10005652:	4602      	mov	r2, r0
10005654:	68fb      	ldr	r3, [r7, #12]
10005656:	1ad3      	subs	r3, r2, r3
10005658:	2b64      	cmp	r3, #100	; 0x64
1000565a:	d901      	bls.n	10005660 <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
1000565c:	2303      	movs	r3, #3
1000565e:	e105      	b.n	1000586c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10005660:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005664:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10005668:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000566c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10005670:	d1ed      	bne.n	1000564e <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
10005672:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005676:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
1000567a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
1000567e:	687b      	ldr	r3, [r7, #4]
10005680:	69db      	ldr	r3, [r3, #28]
10005682:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005686:	4313      	orrs	r3, r2
10005688:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
1000568c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005690:	f8d3 2884 	ldr.w	r2, [r3, #2180]	; 0x884
10005694:	4b77      	ldr	r3, [pc, #476]	; (10005874 <RCCEx_PLL3_Config+0x2d0>)
10005696:	4013      	ands	r3, r2
10005698:	687a      	ldr	r2, [r7, #4]
1000569a:	68d2      	ldr	r2, [r2, #12]
1000569c:	1e51      	subs	r1, r2, #1
1000569e:	687a      	ldr	r2, [r7, #4]
100056a0:	6892      	ldr	r2, [r2, #8]
100056a2:	3a01      	subs	r2, #1
100056a4:	0412      	lsls	r2, r2, #16
100056a6:	430a      	orrs	r2, r1
100056a8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100056ac:	4313      	orrs	r3, r2
100056ae:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884
100056b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100056b6:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
100056ba:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
100056be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
100056c2:	687a      	ldr	r2, [r7, #4]
100056c4:	6912      	ldr	r2, [r2, #16]
100056c6:	1e51      	subs	r1, r2, #1
100056c8:	687a      	ldr	r2, [r7, #4]
100056ca:	6952      	ldr	r2, [r2, #20]
100056cc:	3a01      	subs	r2, #1
100056ce:	0212      	lsls	r2, r2, #8
100056d0:	4311      	orrs	r1, r2
100056d2:	687a      	ldr	r2, [r7, #4]
100056d4:	6992      	ldr	r2, [r2, #24]
100056d6:	3a01      	subs	r2, #1
100056d8:	0412      	lsls	r2, r2, #16
100056da:	430a      	orrs	r2, r1
100056dc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100056e0:	4313      	orrs	r3, r2
100056e2:	f8c1 3888 	str.w	r3, [r1, #2184]	; 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
100056e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100056ea:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100056ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100056f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
100056f6:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
100056fa:	687b      	ldr	r3, [r7, #4]
100056fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100056fe:	2b02      	cmp	r3, #2
10005700:	d003      	beq.n	1000570a <RCCEx_PLL3_Config+0x166>
10005702:	687b      	ldr	r3, [r7, #4]
10005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005706:	2b00      	cmp	r3, #0
10005708:	d10c      	bne.n	10005724 <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
1000570a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000570e:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10005712:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005716:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000571a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
1000571e:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
10005722:	e00f      	b.n	10005744 <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
10005724:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005728:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
1000572c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10005730:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10005734:	687a      	ldr	r2, [r7, #4]
10005736:	6a12      	ldr	r2, [r2, #32]
10005738:	00d2      	lsls	r2, r2, #3
1000573a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000573e:	4313      	orrs	r3, r2
10005740:	f8c1 388c 	str.w	r3, [r1, #2188]	; 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
10005744:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005748:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
1000574c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10005754:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10005758:	687b      	ldr	r3, [r7, #4]
1000575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000575c:	2b02      	cmp	r3, #2
1000575e:	d124      	bne.n	100057aa <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
10005760:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005764:	f8d3 3890 	ldr.w	r3, [r3, #2192]	; 0x890
10005768:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
1000576c:	687b      	ldr	r3, [r7, #4]
1000576e:	6a99      	ldr	r1, [r3, #40]	; 0x28
10005770:	687b      	ldr	r3, [r7, #4]
10005772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10005774:	4319      	orrs	r1, r3
10005776:	687b      	ldr	r3, [r7, #4]
10005778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000577a:	4319      	orrs	r1, r3
1000577c:	687b      	ldr	r3, [r7, #4]
1000577e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10005780:	4319      	orrs	r1, r3
10005782:	687b      	ldr	r3, [r7, #4]
10005784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10005786:	041b      	lsls	r3, r3, #16
10005788:	430b      	orrs	r3, r1
1000578a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000578e:	4313      	orrs	r3, r2
10005790:	f8c1 3890 	str.w	r3, [r1, #2192]	; 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
10005794:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005798:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000579c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100057a0:	f043 0304 	orr.w	r3, r3, #4
100057a4:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
100057a8:	e009      	b.n	100057be <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
100057aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100057ae:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100057b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100057b6:	f023 0304 	bic.w	r3, r3, #4
100057ba:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
100057be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100057c2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100057c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100057ca:	f043 0301 	orr.w	r3, r3, #1
100057ce:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100057d2:	f7fc f809 	bl	100017e8 <HAL_GetTick>
100057d6:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
100057d8:	e008      	b.n	100057ec <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100057da:	f7fc f805 	bl	100017e8 <HAL_GetTick>
100057de:	4602      	mov	r2, r0
100057e0:	68fb      	ldr	r3, [r7, #12]
100057e2:	1ad3      	subs	r3, r2, r3
100057e4:	2b64      	cmp	r3, #100	; 0x64
100057e6:	d901      	bls.n	100057ec <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
100057e8:	2303      	movs	r3, #3
100057ea:	e03f      	b.n	1000586c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
100057ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100057f0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100057f4:	f003 0302 	and.w	r3, r3, #2
100057f8:	2b02      	cmp	r3, #2
100057fa:	d1ee      	bne.n	100057da <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100057fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005800:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005804:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005808:	f043 0370 	orr.w	r3, r3, #112	; 0x70
1000580c:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
10005810:	e02b      	b.n	1000586a <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10005812:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005816:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000581a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000581e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10005822:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
10005826:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000582a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000582e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005832:	f023 0301 	bic.w	r3, r3, #1
10005836:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000583a:	f7fb ffd5 	bl	100017e8 <HAL_GetTick>
1000583e:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10005840:	e008      	b.n	10005854 <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005842:	f7fb ffd1 	bl	100017e8 <HAL_GetTick>
10005846:	4602      	mov	r2, r0
10005848:	68fb      	ldr	r3, [r7, #12]
1000584a:	1ad3      	subs	r3, r2, r3
1000584c:	2b64      	cmp	r3, #100	; 0x64
1000584e:	d901      	bls.n	10005854 <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
10005850:	2303      	movs	r3, #3
10005852:	e00b      	b.n	1000586c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10005854:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005858:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000585c:	f003 0302 	and.w	r3, r3, #2
10005860:	2b02      	cmp	r3, #2
10005862:	d0ee      	beq.n	10005842 <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
10005864:	e001      	b.n	1000586a <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10005866:	2301      	movs	r3, #1
10005868:	e000      	b.n	1000586c <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
1000586a:	2300      	movs	r3, #0
}
1000586c:	4618      	mov	r0, r3
1000586e:	3710      	adds	r7, #16
10005870:	46bd      	mov	sp, r7
10005872:	bd80      	pop	{r7, pc}
10005874:	ffc0fe00 	.word	0xffc0fe00

10005878 <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
10005878:	b580      	push	{r7, lr}
1000587a:	b084      	sub	sp, #16
1000587c:	af00      	add	r7, sp, #0
1000587e:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
10005880:	687b      	ldr	r3, [r7, #4]
10005882:	681b      	ldr	r3, [r3, #0]
10005884:	2b00      	cmp	r3, #0
10005886:	f000 8147 	beq.w	10005b18 <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
1000588a:	687b      	ldr	r3, [r7, #4]
1000588c:	681b      	ldr	r3, [r3, #0]
1000588e:	2b02      	cmp	r3, #2
10005890:	f040 8119 	bne.w	10005ac6 <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10005894:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005898:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000589c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100058a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100058a4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
100058a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100058ac:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100058b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100058b4:	f023 0301 	bic.w	r3, r3, #1
100058b8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100058bc:	f7fb ff94 	bl	100017e8 <HAL_GetTick>
100058c0:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100058c2:	e008      	b.n	100058d6 <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100058c4:	f7fb ff90 	bl	100017e8 <HAL_GetTick>
100058c8:	4602      	mov	r2, r0
100058ca:	68fb      	ldr	r3, [r7, #12]
100058cc:	1ad3      	subs	r3, r2, r3
100058ce:	2b64      	cmp	r3, #100	; 0x64
100058d0:	d901      	bls.n	100058d6 <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
100058d2:	2303      	movs	r3, #3
100058d4:	e121      	b.n	10005b1a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100058d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100058da:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100058de:	f003 0302 	and.w	r3, r3, #2
100058e2:	2b02      	cmp	r3, #2
100058e4:	d0ee      	beq.n	100058c4 <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
100058e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100058ea:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
100058ee:	f023 0203 	bic.w	r2, r3, #3
100058f2:	687b      	ldr	r3, [r7, #4]
100058f4:	685b      	ldr	r3, [r3, #4]
100058f6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100058fa:	4313      	orrs	r3, r2
100058fc:	f8c1 3824 	str.w	r3, [r1, #2084]	; 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10005900:	e008      	b.n	10005914 <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005902:	f7fb ff71 	bl	100017e8 <HAL_GetTick>
10005906:	4602      	mov	r2, r0
10005908:	68fb      	ldr	r3, [r7, #12]
1000590a:	1ad3      	subs	r3, r2, r3
1000590c:	2b64      	cmp	r3, #100	; 0x64
1000590e:	d901      	bls.n	10005914 <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
10005910:	2303      	movs	r3, #3
10005912:	e102      	b.n	10005b1a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10005914:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005918:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
1000591c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10005920:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10005924:	d1ed      	bne.n	10005902 <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
10005926:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000592a:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
1000592e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
10005932:	687b      	ldr	r3, [r7, #4]
10005934:	69db      	ldr	r3, [r3, #28]
10005936:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000593a:	4313      	orrs	r3, r2
1000593c:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
10005940:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005944:	f8d3 2898 	ldr.w	r2, [r3, #2200]	; 0x898
10005948:	4b76      	ldr	r3, [pc, #472]	; (10005b24 <RCCEx_PLL4_Config+0x2ac>)
1000594a:	4013      	ands	r3, r2
1000594c:	687a      	ldr	r2, [r7, #4]
1000594e:	68d2      	ldr	r2, [r2, #12]
10005950:	1e51      	subs	r1, r2, #1
10005952:	687a      	ldr	r2, [r7, #4]
10005954:	6892      	ldr	r2, [r2, #8]
10005956:	3a01      	subs	r2, #1
10005958:	0412      	lsls	r2, r2, #16
1000595a:	430a      	orrs	r2, r1
1000595c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005960:	4313      	orrs	r3, r2
10005962:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898
10005966:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000596a:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
1000596e:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10005972:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10005976:	687a      	ldr	r2, [r7, #4]
10005978:	6912      	ldr	r2, [r2, #16]
1000597a:	1e51      	subs	r1, r2, #1
1000597c:	687a      	ldr	r2, [r7, #4]
1000597e:	6952      	ldr	r2, [r2, #20]
10005980:	3a01      	subs	r2, #1
10005982:	0212      	lsls	r2, r2, #8
10005984:	4311      	orrs	r1, r2
10005986:	687a      	ldr	r2, [r7, #4]
10005988:	6992      	ldr	r2, [r2, #24]
1000598a:	3a01      	subs	r2, #1
1000598c:	0412      	lsls	r2, r2, #16
1000598e:	430a      	orrs	r2, r1
10005990:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005994:	4313      	orrs	r3, r2
10005996:	f8c1 389c 	str.w	r3, [r1, #2204]	; 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
1000599a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000599e:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100059a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100059a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
100059aa:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
100059ae:	687b      	ldr	r3, [r7, #4]
100059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100059b2:	2b02      	cmp	r3, #2
100059b4:	d003      	beq.n	100059be <RCCEx_PLL4_Config+0x146>
100059b6:	687b      	ldr	r3, [r7, #4]
100059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100059ba:	2b00      	cmp	r3, #0
100059bc:	d10c      	bne.n	100059d8 <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
100059be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100059c2:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100059c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100059ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100059ce:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100059d2:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
100059d6:	e00f      	b.n	100059f8 <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
100059d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100059dc:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100059e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100059e4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100059e8:	687a      	ldr	r2, [r7, #4]
100059ea:	6a12      	ldr	r2, [r2, #32]
100059ec:	00d2      	lsls	r2, r2, #3
100059ee:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100059f2:	4313      	orrs	r3, r2
100059f4:	f8c1 38a0 	str.w	r3, [r1, #2208]	; 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
100059f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100059fc:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10005a00:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10005a08:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10005a0c:	687b      	ldr	r3, [r7, #4]
10005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005a10:	2b02      	cmp	r3, #2
10005a12:	d124      	bne.n	10005a5e <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
10005a14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005a18:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	; 0x8a4
10005a1c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10005a20:	687b      	ldr	r3, [r7, #4]
10005a22:	6a99      	ldr	r1, [r3, #40]	; 0x28
10005a24:	687b      	ldr	r3, [r7, #4]
10005a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10005a28:	4319      	orrs	r1, r3
10005a2a:	687b      	ldr	r3, [r7, #4]
10005a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10005a2e:	4319      	orrs	r1, r3
10005a30:	687b      	ldr	r3, [r7, #4]
10005a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10005a34:	4319      	orrs	r1, r3
10005a36:	687b      	ldr	r3, [r7, #4]
10005a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10005a3a:	041b      	lsls	r3, r3, #16
10005a3c:	430b      	orrs	r3, r1
10005a3e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005a42:	4313      	orrs	r3, r2
10005a44:	f8c1 38a4 	str.w	r3, [r1, #2212]	; 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
10005a48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005a4c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005a50:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005a54:	f043 0304 	orr.w	r3, r3, #4
10005a58:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10005a5c:	e009      	b.n	10005a72 <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
10005a5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005a62:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005a66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005a6a:	f023 0304 	bic.w	r3, r3, #4
10005a6e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
10005a72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005a76:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005a7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005a7e:	f043 0301 	orr.w	r3, r3, #1
10005a82:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10005a86:	f7fb feaf 	bl	100017e8 <HAL_GetTick>
10005a8a:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10005a8c:	e008      	b.n	10005aa0 <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005a8e:	f7fb feab 	bl	100017e8 <HAL_GetTick>
10005a92:	4602      	mov	r2, r0
10005a94:	68fb      	ldr	r3, [r7, #12]
10005a96:	1ad3      	subs	r3, r2, r3
10005a98:	2b64      	cmp	r3, #100	; 0x64
10005a9a:	d901      	bls.n	10005aa0 <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
10005a9c:	2303      	movs	r3, #3
10005a9e:	e03c      	b.n	10005b1a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10005aa0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005aa4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005aa8:	f003 0302 	and.w	r3, r3, #2
10005aac:	2b02      	cmp	r3, #2
10005aae:	d1ee      	bne.n	10005a8e <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10005ab0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005ab4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005ab8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005abc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10005ac0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10005ac4:	e028      	b.n	10005b18 <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10005ac6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005aca:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005ace:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10005ad6:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
10005ada:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005ade:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005ae2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005ae6:	f023 0301 	bic.w	r3, r3, #1
10005aea:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10005aee:	f7fb fe7b 	bl	100017e8 <HAL_GetTick>
10005af2:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10005af4:	e008      	b.n	10005b08 <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005af6:	f7fb fe77 	bl	100017e8 <HAL_GetTick>
10005afa:	4602      	mov	r2, r0
10005afc:	68fb      	ldr	r3, [r7, #12]
10005afe:	1ad3      	subs	r3, r2, r3
10005b00:	2b64      	cmp	r3, #100	; 0x64
10005b02:	d901      	bls.n	10005b08 <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
10005b04:	2303      	movs	r3, #3
10005b06:	e008      	b.n	10005b1a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10005b08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005b0c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005b10:	f003 0302 	and.w	r3, r3, #2
10005b14:	2b02      	cmp	r3, #2
10005b16:	d0ee      	beq.n	10005af6 <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
10005b18:	2300      	movs	r3, #0
}
10005b1a:	4618      	mov	r0, r3
10005b1c:	3710      	adds	r7, #16
10005b1e:	46bd      	mov	sp, r7
10005b20:	bd80      	pop	{r7, pc}
10005b22:	bf00      	nop
10005b24:	ffc0fe00 	.word	0xffc0fe00

10005b28 <HAL_RCCEx_PeriphCLKConfig>:
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef
                                            *PeriphClkInit)
{
10005b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
10005b2c:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
10005b30:	af00      	add	r7, sp, #0
10005b32:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005b36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005b3a:	6018      	str	r0, [r3, #0]
  uint32_t tmpreg = 0, RESERVED_BDCR_MASK = 0;
10005b3c:	2300      	movs	r3, #0
10005b3e:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
10005b42:	2300      	movs	r3, #0
10005b44:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
10005b48:	2300      	movs	r3, #0
10005b4a:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
10005b4e:	2300      	movs	r3, #0
10005b50:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- CKPER configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) ==
10005b54:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005b58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005b5c:	681b      	ldr	r3, [r3, #0]
10005b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
10005b62:	f402 0400 	and.w	r4, r2, #8388608	; 0x800000
10005b66:	2500      	movs	r5, #0
10005b68:	ea54 0305 	orrs.w	r3, r4, r5
10005b6c:	d011      	beq.n	10005b92 <HAL_RCCEx_PeriphCLKConfig+0x6a>
      RCC_PERIPHCLK_CKPER)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    __HAL_RCC_CKPER_CONFIG(PeriphClkInit->CkperClockSelection);
10005b6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005b72:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
10005b76:	f023 0103 	bic.w	r1, r3, #3
10005b7a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005b7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005b82:	681b      	ldr	r3, [r3, #0]
10005b84:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
10005b88:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005b8c:	430b      	orrs	r3, r1
10005b8e:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
  }

  /*------------------------------ I2C12 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C12) ==
10005b92:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005b96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005b9a:	681b      	ldr	r3, [r3, #0]
10005b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
10005ba0:	f002 0810 	and.w	r8, r2, #16
10005ba4:	f04f 0900 	mov.w	r9, #0
10005ba8:	ea58 0309 	orrs.w	r3, r8, r9
10005bac:	d038      	beq.n	10005c20 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      RCC_PERIPHCLK_I2C12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C12CLKSOURCE(PeriphClkInit->I2c12ClockSelection));

    if ((PeriphClkInit->I2c12ClockSelection) == RCC_I2C12CLKSOURCE_PLL4)
10005bae:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005bb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005bb6:	681b      	ldr	r3, [r3, #0]
10005bb8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
10005bbc:	2b01      	cmp	r3, #1
10005bbe:	d11d      	bne.n	10005bfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005bc0:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005bc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005bc8:	681b      	ldr	r3, [r3, #0]
10005bca:	3380      	adds	r3, #128	; 0x80
10005bcc:	4618      	mov	r0, r3
10005bce:	f7ff fe53 	bl	10005878 <RCCEx_PLL4_Config>
10005bd2:	4603      	mov	r3, r0
10005bd4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10005bd8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005bdc:	2b00      	cmp	r3, #0
10005bde:	d003      	beq.n	10005be8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return status;
10005be0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005be4:	f001 be2a 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10005be8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005bec:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005bf0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10005bf8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_I2C12_CONFIG(PeriphClkInit->I2c12ClockSelection);
10005bfc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005c00:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	; 0x8c0
10005c04:	f023 0107 	bic.w	r1, r3, #7
10005c08:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005c0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005c10:	681b      	ldr	r3, [r3, #0]
10005c12:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
10005c16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005c1a:	430b      	orrs	r3, r1
10005c1c:	f8c2 38c0 	str.w	r3, [r2, #2240]	; 0x8c0
  }

  /*------------------------------ I2C35 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C35) ==
10005c20:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005c24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005c28:	681b      	ldr	r3, [r3, #0]
10005c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
10005c2e:	f002 0a20 	and.w	sl, r2, #32
10005c32:	f04f 0b00 	mov.w	fp, #0
10005c36:	ea5a 030b 	orrs.w	r3, sl, fp
10005c3a:	d038      	beq.n	10005cae <HAL_RCCEx_PeriphCLKConfig+0x186>
      RCC_PERIPHCLK_I2C35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C35CLKSOURCE(PeriphClkInit->I2c35ClockSelection));

    if ((PeriphClkInit->I2c35ClockSelection) == RCC_I2C35CLKSOURCE_PLL4)
10005c3c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005c40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005c44:	681b      	ldr	r3, [r3, #0]
10005c46:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10005c4a:	2b01      	cmp	r3, #1
10005c4c:	d11d      	bne.n	10005c8a <HAL_RCCEx_PeriphCLKConfig+0x162>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005c4e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005c52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005c56:	681b      	ldr	r3, [r3, #0]
10005c58:	3380      	adds	r3, #128	; 0x80
10005c5a:	4618      	mov	r0, r3
10005c5c:	f7ff fe0c 	bl	10005878 <RCCEx_PLL4_Config>
10005c60:	4603      	mov	r3, r0
10005c62:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10005c66:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005c6a:	2b00      	cmp	r3, #0
10005c6c:	d003      	beq.n	10005c76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        return status;
10005c6e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005c72:	f001 bde3 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10005c76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005c7a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005c7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10005c86:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_I2C35_CONFIG(PeriphClkInit->I2c35ClockSelection);
10005c8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005c8e:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	; 0x8c4
10005c92:	f023 0107 	bic.w	r1, r3, #7
10005c96:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005c9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005c9e:	681b      	ldr	r3, [r3, #0]
10005ca0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10005ca4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005ca8:	430b      	orrs	r3, r1
10005caa:	f8c2 38c4 	str.w	r3, [r2, #2244]	; 0x8c4
  }

  /*------------------------------ I2C46 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C46) ==
10005cae:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005cb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005cb6:	681b      	ldr	r3, [r3, #0]
10005cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
10005cbc:	2100      	movs	r1, #0
10005cbe:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
10005cc2:	f003 0320 	and.w	r3, r3, #32
10005cc6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
10005cca:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
10005cce:	460b      	mov	r3, r1
10005cd0:	4313      	orrs	r3, r2
10005cd2:	d038      	beq.n	10005d46 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      RCC_PERIPHCLK_I2C46)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C46CLKSOURCE(PeriphClkInit->I2c46ClockSelection));

    if ((PeriphClkInit->I2c46ClockSelection) == RCC_I2C46CLKSOURCE_PLL3)
10005cd4:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005cd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005cdc:	681b      	ldr	r3, [r3, #0]
10005cde:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10005ce2:	2b01      	cmp	r3, #1
10005ce4:	d11d      	bne.n	10005d22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005ce6:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005cea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005cee:	681b      	ldr	r3, [r3, #0]
10005cf0:	3344      	adds	r3, #68	; 0x44
10005cf2:	4618      	mov	r0, r3
10005cf4:	f7ff fc56 	bl	100055a4 <RCCEx_PLL3_Config>
10005cf8:	4603      	mov	r3, r0
10005cfa:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10005cfe:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005d02:	2b00      	cmp	r3, #0
10005d04:	d003      	beq.n	10005d0e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      {
        return status;
10005d06:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005d0a:	f001 bd97 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10005d0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005d12:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005d16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005d1a:	f043 0320 	orr.w	r3, r3, #32
10005d1e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
    }

    __HAL_RCC_I2C46_CONFIG(PeriphClkInit->I2c46ClockSelection);
10005d22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005d26:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10005d2a:	f023 0107 	bic.w	r1, r3, #7
10005d2e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005d32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005d36:	681b      	ldr	r3, [r3, #0]
10005d38:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10005d3c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005d40:	430b      	orrs	r3, r1
10005d42:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) ==
10005d46:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005d4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005d4e:	681b      	ldr	r3, [r3, #0]
10005d50:	e9d3 2300 	ldrd	r2, r3, [r3]
10005d54:	f002 0380 	and.w	r3, r2, #128	; 0x80
10005d58:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
10005d5c:	2300      	movs	r3, #0
10005d5e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
10005d62:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
10005d66:	460b      	mov	r3, r1
10005d68:	4313      	orrs	r3, r2
10005d6a:	d07e      	beq.n	10005e6a <HAL_RCCEx_PeriphCLKConfig+0x342>
      RCC_PERIPHCLK_SAI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
10005d6c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005d70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005d74:	681b      	ldr	r3, [r3, #0]
10005d76:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10005d7a:	2b04      	cmp	r3, #4
10005d7c:	d044      	beq.n	10005e08 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
10005d7e:	2b04      	cmp	r3, #4
10005d80:	d861      	bhi.n	10005e46 <HAL_RCCEx_PeriphCLKConfig+0x31e>
10005d82:	2b00      	cmp	r3, #0
10005d84:	d002      	beq.n	10005d8c <HAL_RCCEx_PeriphCLKConfig+0x264>
10005d86:	2b01      	cmp	r3, #1
10005d88:	d01f      	beq.n	10005dca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
10005d8a:	e05c      	b.n	10005e46 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    {
      case RCC_SAI1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI1*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005d8c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005d90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005d94:	681b      	ldr	r3, [r3, #0]
10005d96:	3380      	adds	r3, #128	; 0x80
10005d98:	4618      	mov	r0, r3
10005d9a:	f7ff fd6d 	bl	10005878 <RCCEx_PLL4_Config>
10005d9e:	4603      	mov	r3, r0
10005da0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005da4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005da8:	2b00      	cmp	r3, #0
10005daa:	d003      	beq.n	10005db4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        {
          return status;
10005dac:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005db0:	f001 bd44 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10005db4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005db8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005dbc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005dc0:	f043 0320 	orr.w	r3, r3, #32
10005dc4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10005dc8:	e03d      	b.n	10005e46 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_Q:  /* PLL3_Q is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005dca:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005dce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005dd2:	681b      	ldr	r3, [r3, #0]
10005dd4:	3344      	adds	r3, #68	; 0x44
10005dd6:	4618      	mov	r0, r3
10005dd8:	f7ff fbe4 	bl	100055a4 <RCCEx_PLL3_Config>
10005ddc:	4603      	mov	r3, r0
10005dde:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005de2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005de6:	2b00      	cmp	r3, #0
10005de8:	d003      	beq.n	10005df2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
        {
          return status;
10005dea:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005dee:	f001 bd25 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10005df2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005df6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005dfa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005dfe:	f043 0320 	orr.w	r3, r3, #32
10005e02:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10005e06:	e01e      	b.n	10005e46 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_R:  /* PLL3_R is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005e08:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005e0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005e10:	681b      	ldr	r3, [r3, #0]
10005e12:	3344      	adds	r3, #68	; 0x44
10005e14:	4618      	mov	r0, r3
10005e16:	f7ff fbc5 	bl	100055a4 <RCCEx_PLL3_Config>
10005e1a:	4603      	mov	r3, r0
10005e1c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005e20:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005e24:	2b00      	cmp	r3, #0
10005e26:	d003      	beq.n	10005e30 <HAL_RCCEx_PeriphCLKConfig+0x308>
        {
          return status;
10005e28:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005e2c:	f001 bd06 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10005e30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005e34:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005e38:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10005e40:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10005e44:	bf00      	nop
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
10005e46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005e4a:	f8d3 38c8 	ldr.w	r3, [r3, #2248]	; 0x8c8
10005e4e:	f023 0107 	bic.w	r1, r3, #7
10005e52:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005e56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005e5a:	681b      	ldr	r3, [r3, #0]
10005e5c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10005e60:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005e64:	430b      	orrs	r3, r1
10005e66:	f8c2 38c8 	str.w	r3, [r2, #2248]	; 0x8c8
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) ==
10005e6a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005e6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005e72:	681b      	ldr	r3, [r3, #0]
10005e74:	e9d3 2300 	ldrd	r2, r3, [r3]
10005e78:	f402 7380 	and.w	r3, r2, #256	; 0x100
10005e7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
10005e80:	2300      	movs	r3, #0
10005e82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
10005e86:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
10005e8a:	460b      	mov	r3, r1
10005e8c:	4313      	orrs	r3, r2
10005e8e:	d07e      	beq.n	10005f8e <HAL_RCCEx_PeriphCLKConfig+0x466>
      RCC_PERIPHCLK_SAI2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
10005e90:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005e94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005e98:	681b      	ldr	r3, [r3, #0]
10005e9a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
10005e9e:	2b05      	cmp	r3, #5
10005ea0:	d044      	beq.n	10005f2c <HAL_RCCEx_PeriphCLKConfig+0x404>
10005ea2:	2b05      	cmp	r3, #5
10005ea4:	d861      	bhi.n	10005f6a <HAL_RCCEx_PeriphCLKConfig+0x442>
10005ea6:	2b00      	cmp	r3, #0
10005ea8:	d002      	beq.n	10005eb0 <HAL_RCCEx_PeriphCLKConfig+0x388>
10005eaa:	2b01      	cmp	r3, #1
10005eac:	d01f      	beq.n	10005eee <HAL_RCCEx_PeriphCLKConfig+0x3c6>
10005eae:	e05c      	b.n	10005f6a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      case RCC_SAI2CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI2*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005eb0:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005eb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005eb8:	681b      	ldr	r3, [r3, #0]
10005eba:	3380      	adds	r3, #128	; 0x80
10005ebc:	4618      	mov	r0, r3
10005ebe:	f7ff fcdb 	bl	10005878 <RCCEx_PLL4_Config>
10005ec2:	4603      	mov	r3, r0
10005ec4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005ec8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005ecc:	2b00      	cmp	r3, #0
10005ece:	d003      	beq.n	10005ed8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          return status;
10005ed0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005ed4:	f001 bcb2 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10005ed8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005edc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005ee0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005ee4:	f043 0320 	orr.w	r3, r3, #32
10005ee8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10005eec:	e03d      	b.n	10005f6a <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005eee:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005ef2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005ef6:	681b      	ldr	r3, [r3, #0]
10005ef8:	3344      	adds	r3, #68	; 0x44
10005efa:	4618      	mov	r0, r3
10005efc:	f7ff fb52 	bl	100055a4 <RCCEx_PLL3_Config>
10005f00:	4603      	mov	r3, r0
10005f02:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005f06:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005f0a:	2b00      	cmp	r3, #0
10005f0c:	d003      	beq.n	10005f16 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
        {
          return status;
10005f0e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005f12:	f001 bc93 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10005f16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005f1a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005f1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005f22:	f043 0320 	orr.w	r3, r3, #32
10005f26:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10005f2a:	e01e      	b.n	10005f6a <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005f2c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005f30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005f34:	681b      	ldr	r3, [r3, #0]
10005f36:	3344      	adds	r3, #68	; 0x44
10005f38:	4618      	mov	r0, r3
10005f3a:	f7ff fb33 	bl	100055a4 <RCCEx_PLL3_Config>
10005f3e:	4603      	mov	r3, r0
10005f40:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005f44:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005f48:	2b00      	cmp	r3, #0
10005f4a:	d003      	beq.n	10005f54 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        {
          return status;
10005f4c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005f50:	f001 bc74 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10005f54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005f58:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005f5c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10005f64:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10005f68:	bf00      	nop
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
10005f6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005f6e:	f8d3 38cc 	ldr.w	r3, [r3, #2252]	; 0x8cc
10005f72:	f023 0107 	bic.w	r1, r3, #7
10005f76:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005f7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005f7e:	681b      	ldr	r3, [r3, #0]
10005f80:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
10005f84:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005f88:	430b      	orrs	r3, r1
10005f8a:	f8c2 38cc 	str.w	r3, [r2, #2252]	; 0x8cc
  }

  /*---------------------------- SAI3 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI3) ==
10005f8e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005f92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005f96:	681b      	ldr	r3, [r3, #0]
10005f98:	e9d3 2300 	ldrd	r2, r3, [r3]
10005f9c:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
10005fa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
10005fa4:	2300      	movs	r3, #0
10005fa6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
10005faa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
10005fae:	460b      	mov	r3, r1
10005fb0:	4313      	orrs	r3, r2
10005fb2:	d07e      	beq.n	100060b2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
      RCC_PERIPHCLK_SAI3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI3CLKSOURCE(PeriphClkInit->Sai3ClockSelection));

    switch (PeriphClkInit->Sai3ClockSelection)
10005fb4:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005fb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005fbc:	681b      	ldr	r3, [r3, #0]
10005fbe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
10005fc2:	2b04      	cmp	r3, #4
10005fc4:	d044      	beq.n	10006050 <HAL_RCCEx_PeriphCLKConfig+0x528>
10005fc6:	2b04      	cmp	r3, #4
10005fc8:	d861      	bhi.n	1000608e <HAL_RCCEx_PeriphCLKConfig+0x566>
10005fca:	2b00      	cmp	r3, #0
10005fcc:	d002      	beq.n	10005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
10005fce:	2b01      	cmp	r3, #1
10005fd0:	d01f      	beq.n	10006012 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
10005fd2:	e05c      	b.n	1000608e <HAL_RCCEx_PeriphCLKConfig+0x566>
    {
      case RCC_SAI3CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI3*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005fd4:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005fd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005fdc:	681b      	ldr	r3, [r3, #0]
10005fde:	3380      	adds	r3, #128	; 0x80
10005fe0:	4618      	mov	r0, r3
10005fe2:	f7ff fc49 	bl	10005878 <RCCEx_PLL4_Config>
10005fe6:	4603      	mov	r3, r0
10005fe8:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005fec:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005ff0:	2b00      	cmp	r3, #0
10005ff2:	d003      	beq.n	10005ffc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        {
          return status;
10005ff4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005ff8:	f001 bc20 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10005ffc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006000:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006004:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006008:	f043 0320 	orr.w	r3, r3, #32
1000600c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006010:	e03d      	b.n	1000608e <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006012:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006016:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000601a:	681b      	ldr	r3, [r3, #0]
1000601c:	3344      	adds	r3, #68	; 0x44
1000601e:	4618      	mov	r0, r3
10006020:	f7ff fac0 	bl	100055a4 <RCCEx_PLL3_Config>
10006024:	4603      	mov	r3, r0
10006026:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000602a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000602e:	2b00      	cmp	r3, #0
10006030:	d003      	beq.n	1000603a <HAL_RCCEx_PeriphCLKConfig+0x512>
        {
          return status;
10006032:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006036:	f001 bc01 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000603a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000603e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006042:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006046:	f043 0320 	orr.w	r3, r3, #32
1000604a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000604e:	e01e      	b.n	1000608e <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006050:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006054:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006058:	681b      	ldr	r3, [r3, #0]
1000605a:	3344      	adds	r3, #68	; 0x44
1000605c:	4618      	mov	r0, r3
1000605e:	f7ff faa1 	bl	100055a4 <RCCEx_PLL3_Config>
10006062:	4603      	mov	r3, r0
10006064:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006068:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000606c:	2b00      	cmp	r3, #0
1000606e:	d003      	beq.n	10006078 <HAL_RCCEx_PeriphCLKConfig+0x550>
        {
          return status;
10006070:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006074:	f001 bbe2 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006078:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000607c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006080:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006088:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000608c:	bf00      	nop
    }

    /* Set the source of SAI3 clock*/
    __HAL_RCC_SAI3_CONFIG(PeriphClkInit->Sai3ClockSelection);
1000608e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006092:	f8d3 38d0 	ldr.w	r3, [r3, #2256]	; 0x8d0
10006096:	f023 0107 	bic.w	r1, r3, #7
1000609a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000609e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100060a2:	681b      	ldr	r3, [r3, #0]
100060a4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
100060a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100060ac:	430b      	orrs	r3, r1
100060ae:	f8c2 38d0 	str.w	r3, [r2, #2256]	; 0x8d0
  }

  /*---------------------------- SAI4 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4) ==
100060b2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100060b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100060ba:	681b      	ldr	r3, [r3, #0]
100060bc:	e9d3 2300 	ldrd	r2, r3, [r3]
100060c0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
100060c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
100060c8:	2300      	movs	r3, #0
100060ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
100060ce:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
100060d2:	460b      	mov	r3, r1
100060d4:	4313      	orrs	r3, r2
100060d6:	d07e      	beq.n	100061d6 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      RCC_PERIPHCLK_SAI4)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI4CLKSOURCE(PeriphClkInit->Sai4ClockSelection));

    switch (PeriphClkInit->Sai4ClockSelection)
100060d8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100060dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100060e0:	681b      	ldr	r3, [r3, #0]
100060e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
100060e6:	2b04      	cmp	r3, #4
100060e8:	d044      	beq.n	10006174 <HAL_RCCEx_PeriphCLKConfig+0x64c>
100060ea:	2b04      	cmp	r3, #4
100060ec:	d861      	bhi.n	100061b2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
100060ee:	2b00      	cmp	r3, #0
100060f0:	d002      	beq.n	100060f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
100060f2:	2b01      	cmp	r3, #1
100060f4:	d01f      	beq.n	10006136 <HAL_RCCEx_PeriphCLKConfig+0x60e>
100060f6:	e05c      	b.n	100061b2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    {
      case RCC_SAI4CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI4 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100060f8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100060fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006100:	681b      	ldr	r3, [r3, #0]
10006102:	3380      	adds	r3, #128	; 0x80
10006104:	4618      	mov	r0, r3
10006106:	f7ff fbb7 	bl	10005878 <RCCEx_PLL4_Config>
1000610a:	4603      	mov	r3, r0
1000610c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006110:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006114:	2b00      	cmp	r3, #0
10006116:	d003      	beq.n	10006120 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
        {
          return status;
10006118:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000611c:	f001 bb8e 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006120:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006124:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006128:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000612c:	f043 0320 	orr.w	r3, r3, #32
10006130:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006134:	e03d      	b.n	100061b2 <HAL_RCCEx_PeriphCLKConfig+0x68a>


      case RCC_SAI4CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006136:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000613a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000613e:	681b      	ldr	r3, [r3, #0]
10006140:	3344      	adds	r3, #68	; 0x44
10006142:	4618      	mov	r0, r3
10006144:	f7ff fa2e 	bl	100055a4 <RCCEx_PLL3_Config>
10006148:	4603      	mov	r3, r0
1000614a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000614e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006152:	2b00      	cmp	r3, #0
10006154:	d003      	beq.n	1000615e <HAL_RCCEx_PeriphCLKConfig+0x636>
        {
          return status;
10006156:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000615a:	f001 bb6f 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_Q */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000615e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006162:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006166:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000616a:	f043 0320 	orr.w	r3, r3, #32
1000616e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006172:	e01e      	b.n	100061b2 <HAL_RCCEx_PeriphCLKConfig+0x68a>

      case RCC_SAI4CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006174:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006178:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000617c:	681b      	ldr	r3, [r3, #0]
1000617e:	3344      	adds	r3, #68	; 0x44
10006180:	4618      	mov	r0, r3
10006182:	f7ff fa0f 	bl	100055a4 <RCCEx_PLL3_Config>
10006186:	4603      	mov	r3, r0
10006188:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000618c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006190:	2b00      	cmp	r3, #0
10006192:	d003      	beq.n	1000619c <HAL_RCCEx_PeriphCLKConfig+0x674>
        {
          return status;
10006194:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006198:	f001 bb50 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_R */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
1000619c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100061a0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100061a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100061a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100061ac:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100061b0:	bf00      	nop
    }

    /* Set the source of SAI4 clock*/
    __HAL_RCC_SAI4_CONFIG(PeriphClkInit->Sai4ClockSelection);
100061b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100061b6:	f8d3 38d4 	ldr.w	r3, [r3, #2260]	; 0x8d4
100061ba:	f023 0107 	bic.w	r1, r3, #7
100061be:	f507 7312 	add.w	r3, r7, #584	; 0x248
100061c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100061c6:	681b      	ldr	r3, [r3, #0]
100061c8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
100061cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100061d0:	430b      	orrs	r3, r1
100061d2:	f8c2 38d4 	str.w	r3, [r2, #2260]	; 0x8d4
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) ==
100061d6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100061da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100061de:	681b      	ldr	r3, [r3, #0]
100061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
100061e4:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
100061e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
100061ec:	2300      	movs	r3, #0
100061ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
100061f2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
100061f6:	460b      	mov	r3, r1
100061f8:	4313      	orrs	r3, r2
100061fa:	d07e      	beq.n	100062fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      RCC_PERIPHCLK_SPI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
100061fc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006200:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006204:	681b      	ldr	r3, [r3, #0]
10006206:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
1000620a:	2b04      	cmp	r3, #4
1000620c:	d044      	beq.n	10006298 <HAL_RCCEx_PeriphCLKConfig+0x770>
1000620e:	2b04      	cmp	r3, #4
10006210:	d861      	bhi.n	100062d6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
10006212:	2b00      	cmp	r3, #0
10006214:	d002      	beq.n	1000621c <HAL_RCCEx_PeriphCLKConfig+0x6f4>
10006216:	2b01      	cmp	r3, #1
10006218:	d01f      	beq.n	1000625a <HAL_RCCEx_PeriphCLKConfig+0x732>
1000621a:	e05c      	b.n	100062d6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      case RCC_SPI1CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000621c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006220:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006224:	681b      	ldr	r3, [r3, #0]
10006226:	3380      	adds	r3, #128	; 0x80
10006228:	4618      	mov	r0, r3
1000622a:	f7ff fb25 	bl	10005878 <RCCEx_PLL4_Config>
1000622e:	4603      	mov	r3, r0
10006230:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006234:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006238:	2b00      	cmp	r3, #0
1000623a:	d003      	beq.n	10006244 <HAL_RCCEx_PeriphCLKConfig+0x71c>
        {
          return status;
1000623c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006240:	f001 bafc 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006244:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006248:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000624c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006250:	f043 0310 	orr.w	r3, r3, #16
10006254:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006258:	e03d      	b.n	100062d6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000625a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000625e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006262:	681b      	ldr	r3, [r3, #0]
10006264:	3344      	adds	r3, #68	; 0x44
10006266:	4618      	mov	r0, r3
10006268:	f7ff f99c 	bl	100055a4 <RCCEx_PLL3_Config>
1000626c:	4603      	mov	r3, r0
1000626e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006272:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006276:	2b00      	cmp	r3, #0
10006278:	d003      	beq.n	10006282 <HAL_RCCEx_PeriphCLKConfig+0x75a>
        {
          return status;
1000627a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000627e:	f001 badd 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006282:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006286:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000628a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000628e:	f043 0320 	orr.w	r3, r3, #32
10006292:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006296:	e01e      	b.n	100062d6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006298:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000629c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100062a0:	681b      	ldr	r3, [r3, #0]
100062a2:	3344      	adds	r3, #68	; 0x44
100062a4:	4618      	mov	r0, r3
100062a6:	f7ff f97d 	bl	100055a4 <RCCEx_PLL3_Config>
100062aa:	4603      	mov	r3, r0
100062ac:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100062b0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100062b4:	2b00      	cmp	r3, #0
100062b6:	d003      	beq.n	100062c0 <HAL_RCCEx_PeriphCLKConfig+0x798>
        {
          return status;
100062b8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100062bc:	f001 babe 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100062c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100062c4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100062c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100062cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100062d0:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100062d4:	bf00      	nop

    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
100062d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100062da:	f8d3 38d8 	ldr.w	r3, [r3, #2264]	; 0x8d8
100062de:	f023 0107 	bic.w	r1, r3, #7
100062e2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100062e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100062ea:	681b      	ldr	r3, [r3, #0]
100062ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
100062f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100062f4:	430b      	orrs	r3, r1
100062f6:	f8c2 38d8 	str.w	r3, [r2, #2264]	; 0x8d8
  }

  /*---------------------------- SPI23 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI23) ==
100062fa:	f507 7312 	add.w	r3, r7, #584	; 0x248
100062fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006302:	681b      	ldr	r3, [r3, #0]
10006304:	e9d3 2300 	ldrd	r2, r3, [r3]
10006308:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
1000630c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
10006310:	2300      	movs	r3, #0
10006312:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
10006316:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
1000631a:	460b      	mov	r3, r1
1000631c:	4313      	orrs	r3, r2
1000631e:	d07e      	beq.n	1000641e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      RCC_PERIPHCLK_SPI23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
10006320:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006324:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006328:	681b      	ldr	r3, [r3, #0]
1000632a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
1000632e:	2b04      	cmp	r3, #4
10006330:	d044      	beq.n	100063bc <HAL_RCCEx_PeriphCLKConfig+0x894>
10006332:	2b04      	cmp	r3, #4
10006334:	d861      	bhi.n	100063fa <HAL_RCCEx_PeriphCLKConfig+0x8d2>
10006336:	2b00      	cmp	r3, #0
10006338:	d002      	beq.n	10006340 <HAL_RCCEx_PeriphCLKConfig+0x818>
1000633a:	2b01      	cmp	r3, #1
1000633c:	d01f      	beq.n	1000637e <HAL_RCCEx_PeriphCLKConfig+0x856>
1000633e:	e05c      	b.n	100063fa <HAL_RCCEx_PeriphCLKConfig+0x8d2>
    {
      case RCC_SPI23CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI23 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006340:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006344:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006348:	681b      	ldr	r3, [r3, #0]
1000634a:	3380      	adds	r3, #128	; 0x80
1000634c:	4618      	mov	r0, r3
1000634e:	f7ff fa93 	bl	10005878 <RCCEx_PLL4_Config>
10006352:	4603      	mov	r3, r0
10006354:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006358:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000635c:	2b00      	cmp	r3, #0
1000635e:	d003      	beq.n	10006368 <HAL_RCCEx_PeriphCLKConfig+0x840>
        {
          return status;
10006360:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006364:	f001 ba6a 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006368:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000636c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006370:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006374:	f043 0310 	orr.w	r3, r3, #16
10006378:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
1000637c:	e03d      	b.n	100063fa <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000637e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006382:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006386:	681b      	ldr	r3, [r3, #0]
10006388:	3344      	adds	r3, #68	; 0x44
1000638a:	4618      	mov	r0, r3
1000638c:	f7ff f90a 	bl	100055a4 <RCCEx_PLL3_Config>
10006390:	4603      	mov	r3, r0
10006392:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006396:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000639a:	2b00      	cmp	r3, #0
1000639c:	d003      	beq.n	100063a6 <HAL_RCCEx_PeriphCLKConfig+0x87e>
        {
          return status;
1000639e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100063a2:	f001 ba4b 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100063a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100063aa:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100063ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100063b2:	f043 0320 	orr.w	r3, r3, #32
100063b6:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100063ba:	e01e      	b.n	100063fa <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100063bc:	f507 7312 	add.w	r3, r7, #584	; 0x248
100063c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100063c4:	681b      	ldr	r3, [r3, #0]
100063c6:	3344      	adds	r3, #68	; 0x44
100063c8:	4618      	mov	r0, r3
100063ca:	f7ff f8eb 	bl	100055a4 <RCCEx_PLL3_Config>
100063ce:	4603      	mov	r3, r0
100063d0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100063d4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100063d8:	2b00      	cmp	r3, #0
100063da:	d003      	beq.n	100063e4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
        {
          return status;
100063dc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100063e0:	f001 ba2c 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100063e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100063e8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100063ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100063f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100063f4:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100063f8:	bf00      	nop
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
100063fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100063fe:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	; 0x8dc
10006402:	f023 0107 	bic.w	r1, r3, #7
10006406:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000640a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000640e:	681b      	ldr	r3, [r3, #0]
10006410:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
10006414:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006418:	430b      	orrs	r3, r1
1000641a:	f8c2 38dc 	str.w	r3, [r2, #2268]	; 0x8dc
  }

  /*---------------------------- SPI45 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) ==
1000641e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006422:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006426:	681b      	ldr	r3, [r3, #0]
10006428:	e9d3 2300 	ldrd	r2, r3, [r3]
1000642c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
10006430:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
10006434:	2300      	movs	r3, #0
10006436:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
1000643a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
1000643e:	460b      	mov	r3, r1
10006440:	4313      	orrs	r3, r2
10006442:	d038      	beq.n	100064b6 <HAL_RCCEx_PeriphCLKConfig+0x98e>
      RCC_PERIPHCLK_SPI45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    if (PeriphClkInit->Spi45ClockSelection == RCC_SPI45CLKSOURCE_PLL4)
10006444:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006448:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000644c:	681b      	ldr	r3, [r3, #0]
1000644e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
10006452:	2b01      	cmp	r3, #1
10006454:	d11d      	bne.n	10006492 <HAL_RCCEx_PeriphCLKConfig+0x96a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006456:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000645a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000645e:	681b      	ldr	r3, [r3, #0]
10006460:	3380      	adds	r3, #128	; 0x80
10006462:	4618      	mov	r0, r3
10006464:	f7ff fa08 	bl	10005878 <RCCEx_PLL4_Config>
10006468:	4603      	mov	r3, r0
1000646a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
1000646e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006472:	2b00      	cmp	r3, #0
10006474:	d003      	beq.n	1000647e <HAL_RCCEx_PeriphCLKConfig+0x956>
      {
        return status;
10006476:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000647a:	f001 b9df 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable SPI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000647e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006482:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006486:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000648a:	f043 0320 	orr.w	r3, r3, #32
1000648e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of SPI45 clock*/
    __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
10006492:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006496:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
1000649a:	f023 0107 	bic.w	r1, r3, #7
1000649e:	f507 7312 	add.w	r3, r7, #584	; 0x248
100064a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100064a6:	681b      	ldr	r3, [r3, #0]
100064a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
100064ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100064b0:	430b      	orrs	r3, r1
100064b2:	f8c2 38e0 	str.w	r3, [r2, #2272]	; 0x8e0
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) ==
100064b6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100064ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100064be:	681b      	ldr	r3, [r3, #0]
100064c0:	e9d3 2300 	ldrd	r2, r3, [r3]
100064c4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
100064c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
100064cc:	2300      	movs	r3, #0
100064ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
100064d2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
100064d6:	460b      	mov	r3, r1
100064d8:	4313      	orrs	r3, r2
100064da:	d05b      	beq.n	10006594 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
      RCC_PERIPHCLK_SPI6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
100064dc:	f507 7312 	add.w	r3, r7, #584	; 0x248
100064e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100064e4:	681b      	ldr	r3, [r3, #0]
100064e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
100064ea:	2b01      	cmp	r3, #1
100064ec:	d002      	beq.n	100064f4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
100064ee:	2b05      	cmp	r3, #5
100064f0:	d01f      	beq.n	10006532 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
100064f2:	e03d      	b.n	10006570 <HAL_RCCEx_PeriphCLKConfig+0xa48>
    {
      case RCC_SPI6CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI6 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100064f4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100064f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100064fc:	681b      	ldr	r3, [r3, #0]
100064fe:	3380      	adds	r3, #128	; 0x80
10006500:	4618      	mov	r0, r3
10006502:	f7ff f9b9 	bl	10005878 <RCCEx_PLL4_Config>
10006506:	4603      	mov	r3, r0
10006508:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000650c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006510:	2b00      	cmp	r3, #0
10006512:	d003      	beq.n	1000651c <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        {
          return status;
10006514:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006518:	f001 b990 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000651c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006520:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006524:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006528:	f043 0320 	orr.w	r3, r3, #32
1000652c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006530:	e01e      	b.n	10006570 <HAL_RCCEx_PeriphCLKConfig+0xa48>

      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is used as clock source for SPI6 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006532:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006536:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000653a:	681b      	ldr	r3, [r3, #0]
1000653c:	3344      	adds	r3, #68	; 0x44
1000653e:	4618      	mov	r0, r3
10006540:	f7ff f830 	bl	100055a4 <RCCEx_PLL3_Config>
10006544:	4603      	mov	r3, r0
10006546:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000654a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000654e:	2b00      	cmp	r3, #0
10006550:	d003      	beq.n	1000655a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        {
          return status;
10006552:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006556:	f001 b971 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000655a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000655e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006562:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006566:	f043 0320 	orr.w	r3, r3, #32
1000656a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000656e:	bf00      	nop
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
10006570:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006574:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10006578:	f023 0107 	bic.w	r1, r3, #7
1000657c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006580:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006584:	681b      	ldr	r3, [r3, #0]
10006586:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
1000658a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000658e:	430b      	orrs	r3, r1
10006590:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  /*---------------------------- USART6 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) ==
10006594:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006598:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000659c:	681b      	ldr	r3, [r3, #0]
1000659e:	e9d3 2300 	ldrd	r2, r3, [r3]
100065a2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
100065a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
100065aa:	2300      	movs	r3, #0
100065ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
100065b0:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
100065b4:	460b      	mov	r3, r1
100065b6:	4313      	orrs	r3, r2
100065b8:	d038      	beq.n	1000662c <HAL_RCCEx_PeriphCLKConfig+0xb04>
      RCC_PERIPHCLK_USART6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_PLL4)
100065ba:	f507 7312 	add.w	r3, r7, #584	; 0x248
100065be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100065c2:	681b      	ldr	r3, [r3, #0]
100065c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
100065c8:	2b01      	cmp	r3, #1
100065ca:	d11d      	bne.n	10006608 <HAL_RCCEx_PeriphCLKConfig+0xae0>
    {
      /* PLL4 is used as clock source for USART6 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100065cc:	f507 7312 	add.w	r3, r7, #584	; 0x248
100065d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100065d4:	681b      	ldr	r3, [r3, #0]
100065d6:	3380      	adds	r3, #128	; 0x80
100065d8:	4618      	mov	r0, r3
100065da:	f7ff f94d 	bl	10005878 <RCCEx_PLL4_Config>
100065de:	4603      	mov	r3, r0
100065e0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
100065e4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100065e8:	2b00      	cmp	r3, #0
100065ea:	d003      	beq.n	100065f4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
      {
        return status;
100065ec:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100065f0:	f001 b924 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100065f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100065f8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100065fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006600:	f043 0320 	orr.w	r3, r3, #32
10006604:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of USART6 clock*/
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
10006608:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000660c:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
10006610:	f023 0107 	bic.w	r1, r3, #7
10006614:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006618:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000661c:	681b      	ldr	r3, [r3, #0]
1000661e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
10006622:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006626:	430b      	orrs	r3, r1
10006628:	f8c2 38e4 	str.w	r3, [r2, #2276]	; 0x8e4
  }

  /*---------------------------- UART24 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART24) ==
1000662c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006630:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006634:	681b      	ldr	r3, [r3, #0]
10006636:	e9d3 2300 	ldrd	r2, r3, [r3]
1000663a:	f002 0302 	and.w	r3, r2, #2
1000663e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
10006642:	2300      	movs	r3, #0
10006644:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
10006648:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
1000664c:	460b      	mov	r3, r1
1000664e:	4313      	orrs	r3, r2
10006650:	d038      	beq.n	100066c4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      RCC_PERIPHCLK_UART24)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART24CLKSOURCE(PeriphClkInit->Uart24ClockSelection));

    if (PeriphClkInit->Uart24ClockSelection == RCC_UART24CLKSOURCE_PLL4)
10006652:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006656:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000665a:	681b      	ldr	r3, [r3, #0]
1000665c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
10006660:	2b01      	cmp	r3, #1
10006662:	d11d      	bne.n	100066a0 <HAL_RCCEx_PeriphCLKConfig+0xb78>
    {
      /* PLL4 is used as clock source for UART24 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006664:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006668:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000666c:	681b      	ldr	r3, [r3, #0]
1000666e:	3380      	adds	r3, #128	; 0x80
10006670:	4618      	mov	r0, r3
10006672:	f7ff f901 	bl	10005878 <RCCEx_PLL4_Config>
10006676:	4603      	mov	r3, r0
10006678:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
1000667c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006680:	2b00      	cmp	r3, #0
10006682:	d003      	beq.n	1000668c <HAL_RCCEx_PeriphCLKConfig+0xb64>
      {
        return status;
10006684:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006688:	f001 b8d8 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000668c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006690:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006694:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006698:	f043 0320 	orr.w	r3, r3, #32
1000669c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART24 clock*/
    __HAL_RCC_UART24_CONFIG(PeriphClkInit->Uart24ClockSelection);
100066a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100066a4:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
100066a8:	f023 0107 	bic.w	r1, r3, #7
100066ac:	f507 7312 	add.w	r3, r7, #584	; 0x248
100066b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100066b4:	681b      	ldr	r3, [r3, #0]
100066b6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
100066ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100066be:	430b      	orrs	r3, r1
100066c0:	f8c2 38e8 	str.w	r3, [r2, #2280]	; 0x8e8
  }

  /*---------------------------- UART35 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART35) ==
100066c4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100066c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100066cc:	681b      	ldr	r3, [r3, #0]
100066ce:	e9d3 2300 	ldrd	r2, r3, [r3]
100066d2:	f002 0304 	and.w	r3, r2, #4
100066d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
100066da:	2300      	movs	r3, #0
100066dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
100066e0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
100066e4:	460b      	mov	r3, r1
100066e6:	4313      	orrs	r3, r2
100066e8:	d038      	beq.n	1000675c <HAL_RCCEx_PeriphCLKConfig+0xc34>
      RCC_PERIPHCLK_UART35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART35CLKSOURCE(PeriphClkInit->Uart35ClockSelection));

    if (PeriphClkInit->Uart35ClockSelection == RCC_UART35CLKSOURCE_PLL4)
100066ea:	f507 7312 	add.w	r3, r7, #584	; 0x248
100066ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100066f2:	681b      	ldr	r3, [r3, #0]
100066f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
100066f8:	2b01      	cmp	r3, #1
100066fa:	d11d      	bne.n	10006738 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      /* PLL4 is used as clock source for UART35 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100066fc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006700:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006704:	681b      	ldr	r3, [r3, #0]
10006706:	3380      	adds	r3, #128	; 0x80
10006708:	4618      	mov	r0, r3
1000670a:	f7ff f8b5 	bl	10005878 <RCCEx_PLL4_Config>
1000670e:	4603      	mov	r3, r0
10006710:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10006714:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006718:	2b00      	cmp	r3, #0
1000671a:	d003      	beq.n	10006724 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      {
        return status;
1000671c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006720:	f001 b88c 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006724:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006728:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000672c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006730:	f043 0320 	orr.w	r3, r3, #32
10006734:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART35 clock*/
    __HAL_RCC_UART35_CONFIG(PeriphClkInit->Uart35ClockSelection);
10006738:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000673c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
10006740:	f023 0107 	bic.w	r1, r3, #7
10006744:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006748:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000674c:	681b      	ldr	r3, [r3, #0]
1000674e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
10006752:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006756:	430b      	orrs	r3, r1
10006758:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
  }

  /*---------------------------- UAUART78 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART78) ==
1000675c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006760:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006764:	681b      	ldr	r3, [r3, #0]
10006766:	e9d3 2300 	ldrd	r2, r3, [r3]
1000676a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
1000676e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
10006772:	2300      	movs	r3, #0
10006774:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
10006778:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
1000677c:	460b      	mov	r3, r1
1000677e:	4313      	orrs	r3, r2
10006780:	d038      	beq.n	100067f4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      RCC_PERIPHCLK_UART78)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART78CLKSOURCE(PeriphClkInit->Uart78ClockSelection));

    if (PeriphClkInit->Uart78ClockSelection == RCC_UART78CLKSOURCE_PLL4)
10006782:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006786:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000678a:	681b      	ldr	r3, [r3, #0]
1000678c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
10006790:	2b01      	cmp	r3, #1
10006792:	d11d      	bne.n	100067d0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* PLL4 is used as clock source for UART78 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006794:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006798:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000679c:	681b      	ldr	r3, [r3, #0]
1000679e:	3380      	adds	r3, #128	; 0x80
100067a0:	4618      	mov	r0, r3
100067a2:	f7ff f869 	bl	10005878 <RCCEx_PLL4_Config>
100067a6:	4603      	mov	r3, r0
100067a8:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
100067ac:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100067b0:	2b00      	cmp	r3, #0
100067b2:	d003      	beq.n	100067bc <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        return status;
100067b4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100067b8:	f001 b840 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100067bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100067c0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100067c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100067c8:	f043 0320 	orr.w	r3, r3, #32
100067cc:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART78 clock*/
    __HAL_RCC_UART78_CONFIG(PeriphClkInit->Uart78ClockSelection);
100067d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100067d4:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
100067d8:	f023 0107 	bic.w	r1, r3, #7
100067dc:	f507 7312 	add.w	r3, r7, #584	; 0x248
100067e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100067e4:	681b      	ldr	r3, [r3, #0]
100067e6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
100067ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100067ee:	430b      	orrs	r3, r1
100067f0:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
  }

  /*---------------------------- USART1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) ==
100067f4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100067f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100067fc:	681b      	ldr	r3, [r3, #0]
100067fe:	e9d3 2300 	ldrd	r2, r3, [r3]
10006802:	f002 0301 	and.w	r3, r2, #1
10006806:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
1000680a:	2300      	movs	r3, #0
1000680c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
10006810:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
10006814:	460b      	mov	r3, r1
10006816:	4313      	orrs	r3, r2
10006818:	d05b      	beq.n	100068d2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
      RCC_PERIPHCLK_USART1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
1000681a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000681e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006822:	681b      	ldr	r3, [r3, #0]
10006824:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
10006828:	2b01      	cmp	r3, #1
1000682a:	d002      	beq.n	10006832 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
1000682c:	2b04      	cmp	r3, #4
1000682e:	d01f      	beq.n	10006870 <HAL_RCCEx_PeriphCLKConfig+0xd48>
10006830:	e03d      	b.n	100068ae <HAL_RCCEx_PeriphCLKConfig+0xd86>
    {
      case RCC_USART1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for USART1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006832:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006836:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000683a:	681b      	ldr	r3, [r3, #0]
1000683c:	3344      	adds	r3, #68	; 0x44
1000683e:	4618      	mov	r0, r3
10006840:	f7fe feb0 	bl	100055a4 <RCCEx_PLL3_Config>
10006844:	4603      	mov	r3, r0
10006846:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000684a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000684e:	2b00      	cmp	r3, #0
10006850:	d003      	beq.n	1000685a <HAL_RCCEx_PeriphCLKConfig+0xd32>
        {
          return status;
10006852:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006856:	f000 bff1 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable UART Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000685a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000685e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006862:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006866:	f043 0320 	orr.w	r3, r3, #32
1000686a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000686e:	e01e      	b.n	100068ae <HAL_RCCEx_PeriphCLKConfig+0xd86>

      case RCC_USART1CLKSOURCE_PLL4: /* PLL4 is used as clock source for USART1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006870:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006874:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006878:	681b      	ldr	r3, [r3, #0]
1000687a:	3380      	adds	r3, #128	; 0x80
1000687c:	4618      	mov	r0, r3
1000687e:	f7fe fffb 	bl	10005878 <RCCEx_PLL4_Config>
10006882:	4603      	mov	r3, r0
10006884:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006888:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000688c:	2b00      	cmp	r3, #0
1000688e:	d003      	beq.n	10006898 <HAL_RCCEx_PeriphCLKConfig+0xd70>
        {
          return status;
10006890:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006894:	f000 bfd2 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable USART Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006898:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000689c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100068a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100068a4:	f043 0320 	orr.w	r3, r3, #32
100068a8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100068ac:	bf00      	nop
    }

    /* Set the source of USART1 clock*/
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
100068ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100068b2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
100068b6:	f023 0107 	bic.w	r1, r3, #7
100068ba:	f507 7312 	add.w	r3, r7, #584	; 0x248
100068be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100068c2:	681b      	ldr	r3, [r3, #0]
100068c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
100068c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100068cc:	430b      	orrs	r3, r1
100068ce:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  /*---------------------------- SDMMC12 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC12) ==
100068d2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100068d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100068da:	681b      	ldr	r3, [r3, #0]
100068dc:	e9d3 2300 	ldrd	r2, r3, [r3]
100068e0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
100068e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
100068e8:	2300      	movs	r3, #0
100068ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
100068ee:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
100068f2:	460b      	mov	r3, r1
100068f4:	4313      	orrs	r3, r2
100068f6:	d05b      	beq.n	100069b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>
      RCC_PERIPHCLK_SDMMC12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
100068f8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100068fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006900:	681b      	ldr	r3, [r3, #0]
10006902:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
10006906:	2b01      	cmp	r3, #1
10006908:	d002      	beq.n	10006910 <HAL_RCCEx_PeriphCLKConfig+0xde8>
1000690a:	2b02      	cmp	r3, #2
1000690c:	d01f      	beq.n	1000694e <HAL_RCCEx_PeriphCLKConfig+0xe26>
1000690e:	e03d      	b.n	1000698c <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      case RCC_SDMMC12CLKSOURCE_PLL3: /* PLL3 is used as clock source for SDMMC12 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006910:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006914:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006918:	681b      	ldr	r3, [r3, #0]
1000691a:	3344      	adds	r3, #68	; 0x44
1000691c:	4618      	mov	r0, r3
1000691e:	f7fe fe41 	bl	100055a4 <RCCEx_PLL3_Config>
10006922:	4603      	mov	r3, r0
10006924:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006928:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000692c:	2b00      	cmp	r3, #0
1000692e:	d003      	beq.n	10006938 <HAL_RCCEx_PeriphCLKConfig+0xe10>
        {
          return status;
10006930:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006934:	f000 bf82 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006938:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000693c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006940:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006948:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000694c:	e01e      	b.n	1000698c <HAL_RCCEx_PeriphCLKConfig+0xe64>

      case RCC_SDMMC12CLKSOURCE_PLL4: /* PLL4 is used as clock source for SDMMC12 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000694e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006952:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006956:	681b      	ldr	r3, [r3, #0]
10006958:	3380      	adds	r3, #128	; 0x80
1000695a:	4618      	mov	r0, r3
1000695c:	f7fe ff8c 	bl	10005878 <RCCEx_PLL4_Config>
10006960:	4603      	mov	r3, r0
10006962:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006966:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000696a:	2b00      	cmp	r3, #0
1000696c:	d003      	beq.n	10006976 <HAL_RCCEx_PeriphCLKConfig+0xe4e>
        {
          return status;
1000696e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006972:	f000 bf63 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006976:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000697a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000697e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006982:	f043 0310 	orr.w	r3, r3, #16
10006986:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
1000698a:	bf00      	nop
    }

    /* Set the source of SDMMC12 clock*/
    __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
1000698c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006990:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
10006994:	f023 0107 	bic.w	r1, r3, #7
10006998:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000699c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100069a0:	681b      	ldr	r3, [r3, #0]
100069a2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
100069a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100069aa:	430b      	orrs	r3, r1
100069ac:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
  }

  /*---------------------------- SDMMC3 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC3) ==
100069b0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100069b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100069b8:	681b      	ldr	r3, [r3, #0]
100069ba:	e9d3 2300 	ldrd	r2, r3, [r3]
100069be:	2100      	movs	r1, #0
100069c0:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
100069c4:	f003 0301 	and.w	r3, r3, #1
100069c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
100069cc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
100069d0:	460b      	mov	r3, r1
100069d2:	4313      	orrs	r3, r2
100069d4:	d05b      	beq.n	10006a8e <HAL_RCCEx_PeriphCLKConfig+0xf66>
      RCC_PERIPHCLK_SDMMC3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC3CLKSOURCE(PeriphClkInit->Sdmmc3ClockSelection));

    switch (PeriphClkInit->Sdmmc3ClockSelection)
100069d6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100069da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100069de:	681b      	ldr	r3, [r3, #0]
100069e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
100069e4:	2b01      	cmp	r3, #1
100069e6:	d002      	beq.n	100069ee <HAL_RCCEx_PeriphCLKConfig+0xec6>
100069e8:	2b02      	cmp	r3, #2
100069ea:	d01f      	beq.n	10006a2c <HAL_RCCEx_PeriphCLKConfig+0xf04>
100069ec:	e03d      	b.n	10006a6a <HAL_RCCEx_PeriphCLKConfig+0xf42>
    {
      case RCC_SDMMC3CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SDMMC3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100069ee:	f507 7312 	add.w	r3, r7, #584	; 0x248
100069f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100069f6:	681b      	ldr	r3, [r3, #0]
100069f8:	3344      	adds	r3, #68	; 0x44
100069fa:	4618      	mov	r0, r3
100069fc:	f7fe fdd2 	bl	100055a4 <RCCEx_PLL3_Config>
10006a00:	4603      	mov	r3, r0
10006a02:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006a06:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006a0a:	2b00      	cmp	r3, #0
10006a0c:	d003      	beq.n	10006a16 <HAL_RCCEx_PeriphCLKConfig+0xeee>
        {
          return status;
10006a0e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006a12:	f000 bf13 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006a16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006a1a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006a1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006a26:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006a2a:	e01e      	b.n	10006a6a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_SDMMC3CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SDMMC3 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006a2c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006a30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006a34:	681b      	ldr	r3, [r3, #0]
10006a36:	3380      	adds	r3, #128	; 0x80
10006a38:	4618      	mov	r0, r3
10006a3a:	f7fe ff1d 	bl	10005878 <RCCEx_PLL4_Config>
10006a3e:	4603      	mov	r3, r0
10006a40:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006a44:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006a48:	2b00      	cmp	r3, #0
10006a4a:	d003      	beq.n	10006a54 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
        {
          return status;
10006a4c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006a50:	f000 bef4 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006a54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006a58:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006a5c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006a60:	f043 0310 	orr.w	r3, r3, #16
10006a64:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006a68:	bf00      	nop
    }

    /* Set the source of SDMMC3 clock*/
    __HAL_RCC_SDMMC3_CONFIG(PeriphClkInit->Sdmmc3ClockSelection);
10006a6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006a6e:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
10006a72:	f023 0107 	bic.w	r1, r3, #7
10006a76:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006a7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006a7e:	681b      	ldr	r3, [r3, #0]
10006a80:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
10006a84:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006a88:	430b      	orrs	r3, r1
10006a8a:	f8c2 38f8 	str.w	r3, [r2, #2296]	; 0x8f8
  }

  /*---------------------------- ETH configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ETH) ==
10006a8e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006a92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006a96:	681b      	ldr	r3, [r3, #0]
10006a98:	e9d3 2300 	ldrd	r2, r3, [r3]
10006a9c:	2100      	movs	r1, #0
10006a9e:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
10006aa2:	f003 0302 	and.w	r3, r3, #2
10006aa6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
10006aaa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
10006aae:	460b      	mov	r3, r1
10006ab0:	4313      	orrs	r3, r2
10006ab2:	d05b      	beq.n	10006b6c <HAL_RCCEx_PeriphCLKConfig+0x1044>
      RCC_PERIPHCLK_ETH)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETHCLKSOURCE(PeriphClkInit->EthClockSelection));

    switch (PeriphClkInit->EthClockSelection)
10006ab4:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006ab8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006abc:	681b      	ldr	r3, [r3, #0]
10006abe:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
10006ac2:	2b00      	cmp	r3, #0
10006ac4:	d002      	beq.n	10006acc <HAL_RCCEx_PeriphCLKConfig+0xfa4>
10006ac6:	2b01      	cmp	r3, #1
10006ac8:	d01f      	beq.n	10006b0a <HAL_RCCEx_PeriphCLKConfig+0xfe2>
10006aca:	e03d      	b.n	10006b48 <HAL_RCCEx_PeriphCLKConfig+0x1020>
    {
      case RCC_ETHCLKSOURCE_PLL4:     /* PLL4 is used as clock source for ETH */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006acc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006ad0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006ad4:	681b      	ldr	r3, [r3, #0]
10006ad6:	3380      	adds	r3, #128	; 0x80
10006ad8:	4618      	mov	r0, r3
10006ada:	f7fe fecd 	bl	10005878 <RCCEx_PLL4_Config>
10006ade:	4603      	mov	r3, r0
10006ae0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006ae4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006ae8:	2b00      	cmp	r3, #0
10006aea:	d003      	beq.n	10006af4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
        {
          return status;
10006aec:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006af0:	f000 bea4 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL2 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006af4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006af8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006afc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006b00:	f043 0310 	orr.w	r3, r3, #16
10006b04:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006b08:	e01e      	b.n	10006b48 <HAL_RCCEx_PeriphCLKConfig+0x1020>

      case RCC_ETHCLKSOURCE_PLL3:     /* PLL3 is used as clock source for ETH */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006b0a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006b0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006b12:	681b      	ldr	r3, [r3, #0]
10006b14:	3344      	adds	r3, #68	; 0x44
10006b16:	4618      	mov	r0, r3
10006b18:	f7fe fd44 	bl	100055a4 <RCCEx_PLL3_Config>
10006b1c:	4603      	mov	r3, r0
10006b1e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006b22:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006b26:	2b00      	cmp	r3, #0
10006b28:	d003      	beq.n	10006b32 <HAL_RCCEx_PeriphCLKConfig+0x100a>
        {
          return status;
10006b2a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006b2e:	f000 be85 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006b32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006b36:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006b3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006b3e:	f043 0320 	orr.w	r3, r3, #32
10006b42:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006b46:	bf00      	nop
    }

    /* Set the source of ETH clock*/
    __HAL_RCC_ETH_CONFIG(PeriphClkInit->EthClockSelection);
10006b48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006b4c:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
10006b50:	f023 0103 	bic.w	r1, r3, #3
10006b54:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006b58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006b5c:	681b      	ldr	r3, [r3, #0]
10006b5e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
10006b62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006b66:	430b      	orrs	r3, r1
10006b68:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
  }

  /*---------------------------- QSPI configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) ==
10006b6c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006b70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006b74:	681b      	ldr	r3, [r3, #0]
10006b76:	e9d3 2300 	ldrd	r2, r3, [r3]
10006b7a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
10006b7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
10006b82:	2300      	movs	r3, #0
10006b84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
10006b88:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
10006b8c:	460b      	mov	r3, r1
10006b8e:	4313      	orrs	r3, r2
10006b90:	d05b      	beq.n	10006c4a <HAL_RCCEx_PeriphCLKConfig+0x1122>
      RCC_PERIPHCLK_QSPI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    switch (PeriphClkInit->QspiClockSelection)
10006b92:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006b96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006b9a:	681b      	ldr	r3, [r3, #0]
10006b9c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
10006ba0:	2b01      	cmp	r3, #1
10006ba2:	d002      	beq.n	10006baa <HAL_RCCEx_PeriphCLKConfig+0x1082>
10006ba4:	2b02      	cmp	r3, #2
10006ba6:	d01f      	beq.n	10006be8 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
10006ba8:	e03d      	b.n	10006c26 <HAL_RCCEx_PeriphCLKConfig+0x10fe>
    {
      case RCC_QSPICLKSOURCE_PLL3:   /* PLL3 is used as clock source for QSPI */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006baa:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006bae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006bb2:	681b      	ldr	r3, [r3, #0]
10006bb4:	3344      	adds	r3, #68	; 0x44
10006bb6:	4618      	mov	r0, r3
10006bb8:	f7fe fcf4 	bl	100055a4 <RCCEx_PLL3_Config>
10006bbc:	4603      	mov	r3, r0
10006bbe:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006bc2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006bc6:	2b00      	cmp	r3, #0
10006bc8:	d003      	beq.n	10006bd2 <HAL_RCCEx_PeriphCLKConfig+0x10aa>
        {
          return status;
10006bca:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006bce:	f000 be35 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006bd2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006bd6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006bda:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006be2:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006be6:	e01e      	b.n	10006c26 <HAL_RCCEx_PeriphCLKConfig+0x10fe>

      case RCC_QSPICLKSOURCE_PLL4:   /* PLL4 is used as clock source for QSPI */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006be8:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006bec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006bf0:	681b      	ldr	r3, [r3, #0]
10006bf2:	3380      	adds	r3, #128	; 0x80
10006bf4:	4618      	mov	r0, r3
10006bf6:	f7fe fe3f 	bl	10005878 <RCCEx_PLL4_Config>
10006bfa:	4603      	mov	r3, r0
10006bfc:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006c00:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006c04:	2b00      	cmp	r3, #0
10006c06:	d003      	beq.n	10006c10 <HAL_RCCEx_PeriphCLKConfig+0x10e8>
        {
          return status;
10006c08:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006c0c:	f000 be16 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006c10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006c14:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006c18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006c1c:	f043 0310 	orr.w	r3, r3, #16
10006c20:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006c24:	bf00      	nop
    }

    /* Set the source of QSPI clock*/
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
10006c26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006c2a:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
10006c2e:	f023 0103 	bic.w	r1, r3, #3
10006c32:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006c36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006c3a:	681b      	ldr	r3, [r3, #0]
10006c3c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
10006c40:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006c44:	430b      	orrs	r3, r1
10006c46:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
  }

  /*---------------------------- FMC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) ==
10006c4a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006c4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006c52:	681b      	ldr	r3, [r3, #0]
10006c54:	e9d3 2300 	ldrd	r2, r3, [r3]
10006c58:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
10006c5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
10006c60:	2300      	movs	r3, #0
10006c62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
10006c66:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
10006c6a:	460b      	mov	r3, r1
10006c6c:	4313      	orrs	r3, r2
10006c6e:	d05b      	beq.n	10006d28 <HAL_RCCEx_PeriphCLKConfig+0x1200>
      RCC_PERIPHCLK_FMC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
10006c70:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006c74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006c78:	681b      	ldr	r3, [r3, #0]
10006c7a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
10006c7e:	2b01      	cmp	r3, #1
10006c80:	d002      	beq.n	10006c88 <HAL_RCCEx_PeriphCLKConfig+0x1160>
10006c82:	2b02      	cmp	r3, #2
10006c84:	d01f      	beq.n	10006cc6 <HAL_RCCEx_PeriphCLKConfig+0x119e>
10006c86:	e03d      	b.n	10006d04 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
    {
      case RCC_FMCCLKSOURCE_PLL3: /* PLL3 is used as clock source for FMC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006c88:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006c8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006c90:	681b      	ldr	r3, [r3, #0]
10006c92:	3344      	adds	r3, #68	; 0x44
10006c94:	4618      	mov	r0, r3
10006c96:	f7fe fc85 	bl	100055a4 <RCCEx_PLL3_Config>
10006c9a:	4603      	mov	r3, r0
10006c9c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006ca0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006ca4:	2b00      	cmp	r3, #0
10006ca6:	d003      	beq.n	10006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1188>
        {
          return status;
10006ca8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006cac:	f000 bdc6 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006cb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006cb4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006cb8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006cc0:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006cc4:	e01e      	b.n	10006d04 <HAL_RCCEx_PeriphCLKConfig+0x11dc>

      case RCC_FMCCLKSOURCE_PLL4: /* PLL4 is used as clock source for FMC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006cc6:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006cca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006cce:	681b      	ldr	r3, [r3, #0]
10006cd0:	3380      	adds	r3, #128	; 0x80
10006cd2:	4618      	mov	r0, r3
10006cd4:	f7fe fdd0 	bl	10005878 <RCCEx_PLL4_Config>
10006cd8:	4603      	mov	r3, r0
10006cda:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006cde:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006ce2:	2b00      	cmp	r3, #0
10006ce4:	d003      	beq.n	10006cee <HAL_RCCEx_PeriphCLKConfig+0x11c6>
        {
          return status;
10006ce6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006cea:	f000 bda7 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006cee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006cf2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006cf6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006cfa:	f043 0310 	orr.w	r3, r3, #16
10006cfe:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006d02:	bf00      	nop
    }

    /* Set the source of FMC clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
10006d04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006d08:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
10006d0c:	f023 0103 	bic.w	r1, r3, #3
10006d10:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006d14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006d18:	681b      	ldr	r3, [r3, #0]
10006d1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
10006d1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006d22:	430b      	orrs	r3, r1
10006d24:	f8c2 3904 	str.w	r3, [r2, #2308]	; 0x904
  }

#if defined(FDCAN1)
  /*---------------------------- FDCAN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) ==
10006d28:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006d2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006d30:	681b      	ldr	r3, [r3, #0]
10006d32:	e9d3 2300 	ldrd	r2, r3, [r3]
10006d36:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
10006d3a:	67bb      	str	r3, [r7, #120]	; 0x78
10006d3c:	2300      	movs	r3, #0
10006d3e:	67fb      	str	r3, [r7, #124]	; 0x7c
10006d40:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
10006d44:	460b      	mov	r3, r1
10006d46:	4313      	orrs	r3, r2
10006d48:	d07e      	beq.n	10006e48 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      RCC_PERIPHCLK_FDCAN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
10006d4a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006d4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006d52:	681b      	ldr	r3, [r3, #0]
10006d54:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
10006d58:	2b03      	cmp	r3, #3
10006d5a:	d044      	beq.n	10006de6 <HAL_RCCEx_PeriphCLKConfig+0x12be>
10006d5c:	2b03      	cmp	r3, #3
10006d5e:	d861      	bhi.n	10006e24 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
10006d60:	2b01      	cmp	r3, #1
10006d62:	d002      	beq.n	10006d6a <HAL_RCCEx_PeriphCLKConfig+0x1242>
10006d64:	2b02      	cmp	r3, #2
10006d66:	d01f      	beq.n	10006da8 <HAL_RCCEx_PeriphCLKConfig+0x1280>
10006d68:	e05c      	b.n	10006e24 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
    {
      case RCC_FDCANCLKSOURCE_PLL3: /* PLL3 is used as clock source for FDCAN */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006d6a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006d6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006d72:	681b      	ldr	r3, [r3, #0]
10006d74:	3344      	adds	r3, #68	; 0x44
10006d76:	4618      	mov	r0, r3
10006d78:	f7fe fc14 	bl	100055a4 <RCCEx_PLL3_Config>
10006d7c:	4603      	mov	r3, r0
10006d7e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006d82:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006d86:	2b00      	cmp	r3, #0
10006d88:	d003      	beq.n	10006d92 <HAL_RCCEx_PeriphCLKConfig+0x126a>
        {
          return status;
10006d8a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006d8e:	f000 bd55 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006d92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006d96:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006d9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006d9e:	f043 0320 	orr.w	r3, r3, #32
10006da2:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006da6:	e03d      	b.n	10006e24 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_Q: /* PLL4_Q is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006da8:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006dac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006db0:	681b      	ldr	r3, [r3, #0]
10006db2:	3380      	adds	r3, #128	; 0x80
10006db4:	4618      	mov	r0, r3
10006db6:	f7fe fd5f 	bl	10005878 <RCCEx_PLL4_Config>
10006dba:	4603      	mov	r3, r0
10006dbc:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006dc0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006dc4:	2b00      	cmp	r3, #0
10006dc6:	d003      	beq.n	10006dd0 <HAL_RCCEx_PeriphCLKConfig+0x12a8>
        {
          return status;
10006dc8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006dcc:	f000 bd36 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006dd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006dd4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006dd8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006ddc:	f043 0320 	orr.w	r3, r3, #32
10006de0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006de4:	e01e      	b.n	10006e24 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_R: /* PLL4_R is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006de6:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006dea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006dee:	681b      	ldr	r3, [r3, #0]
10006df0:	3380      	adds	r3, #128	; 0x80
10006df2:	4618      	mov	r0, r3
10006df4:	f7fe fd40 	bl	10005878 <RCCEx_PLL4_Config>
10006df8:	4603      	mov	r3, r0
10006dfa:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006dfe:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006e02:	2b00      	cmp	r3, #0
10006e04:	d003      	beq.n	10006e0e <HAL_RCCEx_PeriphCLKConfig+0x12e6>
        {
          return status;
10006e06:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006e0a:	f000 bd17 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10006e0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006e12:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006e16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006e1e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006e22:	bf00      	nop
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
10006e24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006e28:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
10006e2c:	f023 0103 	bic.w	r1, r3, #3
10006e30:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006e34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006e38:	681b      	ldr	r3, [r3, #0]
10006e3a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
10006e3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006e42:	430b      	orrs	r3, r1
10006e44:	f8c2 390c 	str.w	r3, [r2, #2316]	; 0x90c
  }
#endif /*FDCAN1*/

  /*---------------------------- SPDIFRX configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) ==
10006e48:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006e4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006e50:	681b      	ldr	r3, [r3, #0]
10006e52:	e9d3 2300 	ldrd	r2, r3, [r3]
10006e56:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
10006e5a:	673b      	str	r3, [r7, #112]	; 0x70
10006e5c:	2300      	movs	r3, #0
10006e5e:	677b      	str	r3, [r7, #116]	; 0x74
10006e60:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
10006e64:	460b      	mov	r3, r1
10006e66:	4313      	orrs	r3, r2
10006e68:	d05b      	beq.n	10006f22 <HAL_RCCEx_PeriphCLKConfig+0x13fa>
      RCC_PERIPHCLK_SPDIFRX)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
10006e6a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006e6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006e72:	681b      	ldr	r3, [r3, #0]
10006e74:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
10006e78:	2b00      	cmp	r3, #0
10006e7a:	d002      	beq.n	10006e82 <HAL_RCCEx_PeriphCLKConfig+0x135a>
10006e7c:	2b01      	cmp	r3, #1
10006e7e:	d01f      	beq.n	10006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1398>
10006e80:	e03d      	b.n	10006efe <HAL_RCCEx_PeriphCLKConfig+0x13d6>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL4: /* PLL4 is used as clock source for SPDIF */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006e82:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006e86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006e8a:	681b      	ldr	r3, [r3, #0]
10006e8c:	3380      	adds	r3, #128	; 0x80
10006e8e:	4618      	mov	r0, r3
10006e90:	f7fe fcf2 	bl	10005878 <RCCEx_PLL4_Config>
10006e94:	4603      	mov	r3, r0
10006e96:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006e9a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006e9e:	2b00      	cmp	r3, #0
10006ea0:	d003      	beq.n	10006eaa <HAL_RCCEx_PeriphCLKConfig+0x1382>
        {
          return status;
10006ea2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006ea6:	f000 bcc9 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006eaa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006eae:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006eb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006eb6:	f043 0310 	orr.w	r3, r3, #16
10006eba:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10006ebe:	e01e      	b.n	10006efe <HAL_RCCEx_PeriphCLKConfig+0x13d6>

      case RCC_SPDIFRXCLKSOURCE_PLL3: /* PLL3 is used as clock source for SPDIF */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006ec0:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006ec4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006ec8:	681b      	ldr	r3, [r3, #0]
10006eca:	3344      	adds	r3, #68	; 0x44
10006ecc:	4618      	mov	r0, r3
10006ece:	f7fe fb69 	bl	100055a4 <RCCEx_PLL3_Config>
10006ed2:	4603      	mov	r3, r0
10006ed4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10006ed8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006edc:	2b00      	cmp	r3, #0
10006ede:	d003      	beq.n	10006ee8 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
        {
          return status;
10006ee0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006ee4:	f000 bcaa 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006ee8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006eec:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10006ef0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006ef4:	f043 0320 	orr.w	r3, r3, #32
10006ef8:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10006efc:	bf00      	nop
    }

    /* Set the source of SPDIF clock*/
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
10006efe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006f02:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
10006f06:	f023 0103 	bic.w	r1, r3, #3
10006f0a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006f0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006f12:	681b      	ldr	r3, [r3, #0]
10006f14:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
10006f18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006f1c:	430b      	orrs	r3, r1
10006f1e:	f8c2 3914 	str.w	r3, [r2, #2324]	; 0x914
  }

  /*---------------------------- CEC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) ==
10006f22:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006f26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006f2a:	681b      	ldr	r3, [r3, #0]
10006f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
10006f30:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
10006f34:	66bb      	str	r3, [r7, #104]	; 0x68
10006f36:	2300      	movs	r3, #0
10006f38:	66fb      	str	r3, [r7, #108]	; 0x6c
10006f3a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
10006f3e:	460b      	mov	r3, r1
10006f40:	4313      	orrs	r3, r2
10006f42:	d011      	beq.n	10006f68 <HAL_RCCEx_PeriphCLKConfig+0x1440>
      RCC_PERIPHCLK_CEC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
10006f44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006f48:	f8d3 3918 	ldr.w	r3, [r3, #2328]	; 0x918
10006f4c:	f023 0103 	bic.w	r1, r3, #3
10006f50:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006f54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006f58:	681b      	ldr	r3, [r3, #0]
10006f5a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
10006f5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006f62:	430b      	orrs	r3, r1
10006f64:	f8c2 3918 	str.w	r3, [r2, #2328]	; 0x918
  }

  /*---------------------------- USBPHY configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) ==
10006f68:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006f6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006f70:	681b      	ldr	r3, [r3, #0]
10006f72:	e9d3 2300 	ldrd	r2, r3, [r3]
10006f76:	f402 7300 	and.w	r3, r2, #512	; 0x200
10006f7a:	663b      	str	r3, [r7, #96]	; 0x60
10006f7c:	2300      	movs	r3, #0
10006f7e:	667b      	str	r3, [r7, #100]	; 0x64
10006f80:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
10006f84:	460b      	mov	r3, r1
10006f86:	4313      	orrs	r3, r2
10006f88:	d038      	beq.n	10006ffc <HAL_RCCEx_PeriphCLKConfig+0x14d4>
      RCC_PERIPHCLK_USBPHY)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(PeriphClkInit->UsbphyClockSelection));

    if (PeriphClkInit->UsbphyClockSelection == RCC_USBPHYCLKSOURCE_PLL4)
10006f8a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006f8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006f92:	681b      	ldr	r3, [r3, #0]
10006f94:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
10006f98:	2b01      	cmp	r3, #1
10006f9a:	d11d      	bne.n	10006fd8 <HAL_RCCEx_PeriphCLKConfig+0x14b0>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006f9c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006fa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006fa4:	681b      	ldr	r3, [r3, #0]
10006fa6:	3380      	adds	r3, #128	; 0x80
10006fa8:	4618      	mov	r0, r3
10006faa:	f7fe fc65 	bl	10005878 <RCCEx_PLL4_Config>
10006fae:	4603      	mov	r3, r0
10006fb0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10006fb4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006fb8:	2b00      	cmp	r3, #0
10006fba:	d003      	beq.n	10006fc4 <HAL_RCCEx_PeriphCLKConfig+0x149c>
      {
        return status;
10006fbc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10006fc0:	f000 bc3c 	b.w	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB PHY Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10006fc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006fc8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10006fcc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006fd4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_USBPHY_CONFIG(PeriphClkInit->UsbphyClockSelection);
10006fd8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006fdc:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
10006fe0:	f023 0103 	bic.w	r1, r3, #3
10006fe4:	f507 7312 	add.w	r3, r7, #584	; 0x248
10006fe8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10006fec:	681b      	ldr	r3, [r3, #0]
10006fee:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
10006ff2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006ff6:	430b      	orrs	r3, r1
10006ff8:	f8c2 391c 	str.w	r3, [r2, #2332]	; 0x91c
  }

  /*---------------------------- USBO configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBO) ==
10006ffc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007000:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007004:	681b      	ldr	r3, [r3, #0]
10007006:	e9d3 2300 	ldrd	r2, r3, [r3]
1000700a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
1000700e:	65bb      	str	r3, [r7, #88]	; 0x58
10007010:	2300      	movs	r3, #0
10007012:	65fb      	str	r3, [r7, #92]	; 0x5c
10007014:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
10007018:	460b      	mov	r3, r1
1000701a:	4313      	orrs	r3, r2
1000701c:	d037      	beq.n	1000708e <HAL_RCCEx_PeriphCLKConfig+0x1566>
      RCC_PERIPHCLK_USBO)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOCLKSOURCE(PeriphClkInit->UsboClockSelection));

    if (PeriphClkInit->UsboClockSelection == RCC_USBOCLKSOURCE_PLL4)
1000701e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007022:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007026:	681b      	ldr	r3, [r3, #0]
10007028:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
1000702c:	2b00      	cmp	r3, #0
1000702e:	d11c      	bne.n	1000706a <HAL_RCCEx_PeriphCLKConfig+0x1542>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007030:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007034:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007038:	681b      	ldr	r3, [r3, #0]
1000703a:	3380      	adds	r3, #128	; 0x80
1000703c:	4618      	mov	r0, r3
1000703e:	f7fe fc1b 	bl	10005878 <RCCEx_PLL4_Config>
10007042:	4603      	mov	r3, r0
10007044:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10007048:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000704c:	2b00      	cmp	r3, #0
1000704e:	d002      	beq.n	10007056 <HAL_RCCEx_PeriphCLKConfig+0x152e>
      {
        return status;
10007050:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007054:	e3f2      	b.n	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB OTG Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10007056:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000705a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000705e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10007066:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_USBO_CONFIG(PeriphClkInit->UsboClockSelection);
1000706a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000706e:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
10007072:	f023 0110 	bic.w	r1, r3, #16
10007076:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000707a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000707e:	681b      	ldr	r3, [r3, #0]
10007080:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
10007084:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007088:	430b      	orrs	r3, r1
1000708a:	f8c2 391c 	str.w	r3, [r2, #2332]	; 0x91c
  }

  /*---------------------------- RNG1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG1) ==
1000708e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007092:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007096:	681b      	ldr	r3, [r3, #0]
10007098:	e9d3 2300 	ldrd	r2, r3, [r3]
1000709c:	2100      	movs	r1, #0
1000709e:	6539      	str	r1, [r7, #80]	; 0x50
100070a0:	f003 0304 	and.w	r3, r3, #4
100070a4:	657b      	str	r3, [r7, #84]	; 0x54
100070a6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
100070aa:	460b      	mov	r3, r1
100070ac:	4313      	orrs	r3, r2
100070ae:	d037      	beq.n	10007120 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
      RCC_PERIPHCLK_RNG1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG1CLKSOURCE(PeriphClkInit->Rng1ClockSelection));

    if (PeriphClkInit->Rng1ClockSelection == RCC_RNG1CLKSOURCE_PLL4)
100070b0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100070b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100070b8:	681b      	ldr	r3, [r3, #0]
100070ba:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
100070be:	2b01      	cmp	r3, #1
100070c0:	d11c      	bne.n	100070fc <HAL_RCCEx_PeriphCLKConfig+0x15d4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100070c2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100070c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100070ca:	681b      	ldr	r3, [r3, #0]
100070cc:	3380      	adds	r3, #128	; 0x80
100070ce:	4618      	mov	r0, r3
100070d0:	f7fe fbd2 	bl	10005878 <RCCEx_PLL4_Config>
100070d4:	4603      	mov	r3, r0
100070d6:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
100070da:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100070de:	2b00      	cmp	r3, #0
100070e0:	d002      	beq.n	100070e8 <HAL_RCCEx_PeriphCLKConfig+0x15c0>
      {
        return status;
100070e2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100070e6:	e3a9      	b.n	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG1 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100070e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100070ec:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100070f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100070f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100070f8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of RNG1 clock*/
    __HAL_RCC_RNG1_CONFIG(PeriphClkInit->Rng1ClockSelection);
100070fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007100:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
10007104:	f023 0103 	bic.w	r1, r3, #3
10007108:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000710c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007110:	681b      	ldr	r3, [r3, #0]
10007112:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
10007116:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000711a:	430b      	orrs	r3, r1
1000711c:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
  }

  /*---------------------------- RNG2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG2) ==
10007120:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007124:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007128:	681b      	ldr	r3, [r3, #0]
1000712a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000712e:	2100      	movs	r1, #0
10007130:	64b9      	str	r1, [r7, #72]	; 0x48
10007132:	f003 0308 	and.w	r3, r3, #8
10007136:	64fb      	str	r3, [r7, #76]	; 0x4c
10007138:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
1000713c:	460b      	mov	r3, r1
1000713e:	4313      	orrs	r3, r2
10007140:	d037      	beq.n	100071b2 <HAL_RCCEx_PeriphCLKConfig+0x168a>
      RCC_PERIPHCLK_RNG2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG2CLKSOURCE(PeriphClkInit->Rng2ClockSelection));

    if (PeriphClkInit->Rng2ClockSelection == RCC_RNG2CLKSOURCE_PLL4)
10007142:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007146:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000714a:	681b      	ldr	r3, [r3, #0]
1000714c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
10007150:	2b01      	cmp	r3, #1
10007152:	d11c      	bne.n	1000718e <HAL_RCCEx_PeriphCLKConfig+0x1666>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007154:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007158:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000715c:	681b      	ldr	r3, [r3, #0]
1000715e:	3380      	adds	r3, #128	; 0x80
10007160:	4618      	mov	r0, r3
10007162:	f7fe fb89 	bl	10005878 <RCCEx_PLL4_Config>
10007166:	4603      	mov	r3, r0
10007168:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
1000716c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007170:	2b00      	cmp	r3, #0
10007172:	d002      	beq.n	1000717a <HAL_RCCEx_PeriphCLKConfig+0x1652>
      {
        return status;
10007174:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007178:	e360      	b.n	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG2 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
1000717a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000717e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007182:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000718a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of RNG2 clock*/
    __HAL_RCC_RNG2_CONFIG(PeriphClkInit->Rng2ClockSelection);
1000718e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007192:	f8d3 3920 	ldr.w	r3, [r3, #2336]	; 0x920
10007196:	f023 0103 	bic.w	r1, r3, #3
1000719a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000719e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100071a2:	681b      	ldr	r3, [r3, #0]
100071a4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
100071a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100071ac:	430b      	orrs	r3, r1
100071ae:	f8c2 3920 	str.w	r3, [r2, #2336]	; 0x920
  }

  /*---------------------------- STGEN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_STGEN) ==
100071b2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100071b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100071ba:	681b      	ldr	r3, [r3, #0]
100071bc:	e9d3 2300 	ldrd	r2, r3, [r3]
100071c0:	2100      	movs	r1, #0
100071c2:	6439      	str	r1, [r7, #64]	; 0x40
100071c4:	f003 0310 	and.w	r3, r3, #16
100071c8:	647b      	str	r3, [r7, #68]	; 0x44
100071ca:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
100071ce:	460b      	mov	r3, r1
100071d0:	4313      	orrs	r3, r2
100071d2:	d011      	beq.n	100071f8 <HAL_RCCEx_PeriphCLKConfig+0x16d0>
      RCC_PERIPHCLK_STGEN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_STGENCLKSOURCE(PeriphClkInit->StgenClockSelection));

    __HAL_RCC_STGEN_CONFIG(PeriphClkInit->StgenClockSelection);
100071d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100071d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
100071dc:	f023 0103 	bic.w	r1, r3, #3
100071e0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100071e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100071e8:	681b      	ldr	r3, [r3, #0]
100071ea:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
100071ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100071f2:	430b      	orrs	r3, r1
100071f4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  }

#if defined(DSI)
  /*---------------------------- DSI configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) ==
100071f8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100071fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007200:	681b      	ldr	r3, [r3, #0]
10007202:	e9d3 2300 	ldrd	r2, r3, [r3]
10007206:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
1000720a:	63bb      	str	r3, [r7, #56]	; 0x38
1000720c:	2300      	movs	r3, #0
1000720e:	63fb      	str	r3, [r7, #60]	; 0x3c
10007210:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
10007214:	460b      	mov	r3, r1
10007216:	4313      	orrs	r3, r2
10007218:	d037      	beq.n	1000728a <HAL_RCCEx_PeriphCLKConfig+0x1762>
      RCC_PERIPHCLK_DSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    if (PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL4)
1000721a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000721e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007222:	681b      	ldr	r3, [r3, #0]
10007224:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
10007228:	2b01      	cmp	r3, #1
1000722a:	d11c      	bne.n	10007266 <HAL_RCCEx_PeriphCLKConfig+0x173e>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000722c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007230:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007234:	681b      	ldr	r3, [r3, #0]
10007236:	3380      	adds	r3, #128	; 0x80
10007238:	4618      	mov	r0, r3
1000723a:	f7fe fb1d 	bl	10005878 <RCCEx_PLL4_Config>
1000723e:	4603      	mov	r3, r0
10007240:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10007244:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007248:	2b00      	cmp	r3, #0
1000724a:	d002      	beq.n	10007252 <HAL_RCCEx_PeriphCLKConfig+0x172a>
      {
        return status;
1000724c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007250:	e2f4      	b.n	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable DSI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10007252:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007256:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000725a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000725e:	f043 0310 	orr.w	r3, r3, #16
10007262:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
10007266:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000726a:	f8d3 3924 	ldr.w	r3, [r3, #2340]	; 0x924
1000726e:	f023 0101 	bic.w	r1, r3, #1
10007272:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007276:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000727a:	681b      	ldr	r3, [r3, #0]
1000727c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
10007280:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007284:	430b      	orrs	r3, r1
10007286:	f8c2 3924 	str.w	r3, [r2, #2340]	; 0x924
  }
#endif /*DSI*/

  /*---------------------------- ADC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) ==
1000728a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000728e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007292:	681b      	ldr	r3, [r3, #0]
10007294:	e9d3 2300 	ldrd	r2, r3, [r3]
10007298:	f002 0308 	and.w	r3, r2, #8
1000729c:	633b      	str	r3, [r7, #48]	; 0x30
1000729e:	2300      	movs	r3, #0
100072a0:	637b      	str	r3, [r7, #52]	; 0x34
100072a2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
100072a6:	460b      	mov	r3, r1
100072a8:	4313      	orrs	r3, r2
100072aa:	d059      	beq.n	10007360 <HAL_RCCEx_PeriphCLKConfig+0x1838>
      RCC_PERIPHCLK_ADC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
100072ac:	f507 7312 	add.w	r3, r7, #584	; 0x248
100072b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100072b4:	681b      	ldr	r3, [r3, #0]
100072b6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
100072ba:	2b00      	cmp	r3, #0
100072bc:	d002      	beq.n	100072c4 <HAL_RCCEx_PeriphCLKConfig+0x179c>
100072be:	2b02      	cmp	r3, #2
100072c0:	d01e      	beq.n	10007300 <HAL_RCCEx_PeriphCLKConfig+0x17d8>
100072c2:	e03b      	b.n	1000733c <HAL_RCCEx_PeriphCLKConfig+0x1814>
    {
      case RCC_ADCCLKSOURCE_PLL4: /* PLL4 is used as clock source for ADC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100072c4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100072c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100072cc:	681b      	ldr	r3, [r3, #0]
100072ce:	3380      	adds	r3, #128	; 0x80
100072d0:	4618      	mov	r0, r3
100072d2:	f7fe fad1 	bl	10005878 <RCCEx_PLL4_Config>
100072d6:	4603      	mov	r3, r0
100072d8:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100072dc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100072e0:	2b00      	cmp	r3, #0
100072e2:	d002      	beq.n	100072ea <HAL_RCCEx_PeriphCLKConfig+0x17c2>
        {
          return status;
100072e4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100072e8:	e2a8      	b.n	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100072ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100072ee:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100072f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100072f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100072fa:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
100072fe:	e01d      	b.n	1000733c <HAL_RCCEx_PeriphCLKConfig+0x1814>

      case RCC_ADCCLKSOURCE_PLL3: /* PLL3 is used as clock source for ADC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10007300:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007304:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007308:	681b      	ldr	r3, [r3, #0]
1000730a:	3344      	adds	r3, #68	; 0x44
1000730c:	4618      	mov	r0, r3
1000730e:	f7fe f949 	bl	100055a4 <RCCEx_PLL3_Config>
10007312:	4603      	mov	r3, r0
10007314:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007318:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000731c:	2b00      	cmp	r3, #0
1000731e:	d002      	beq.n	10007326 <HAL_RCCEx_PeriphCLKConfig+0x17fe>
        {
          return status;
10007320:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007324:	e28a      	b.n	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10007326:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000732a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000732e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007332:	f043 0320 	orr.w	r3, r3, #32
10007336:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000733a:	bf00      	nop
    }

    /* Set the source of ADC clock*/
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
1000733c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007340:	f8d3 3928 	ldr.w	r3, [r3, #2344]	; 0x928
10007344:	f023 0103 	bic.w	r1, r3, #3
10007348:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000734c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007350:	681b      	ldr	r3, [r3, #0]
10007352:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10007356:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000735a:	430b      	orrs	r3, r1
1000735c:	f8c2 3928 	str.w	r3, [r2, #2344]	; 0x928
  }

  /*---------------------------- LPTIM45 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM45) ==
10007360:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007364:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007368:	681b      	ldr	r3, [r3, #0]
1000736a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000736e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
10007372:	62bb      	str	r3, [r7, #40]	; 0x28
10007374:	2300      	movs	r3, #0
10007376:	62fb      	str	r3, [r7, #44]	; 0x2c
10007378:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
1000737c:	460b      	mov	r3, r1
1000737e:	4313      	orrs	r3, r2
10007380:	d058      	beq.n	10007434 <HAL_RCCEx_PeriphCLKConfig+0x190c>
      RCC_PERIPHCLK_LPTIM45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM45CLKSOURCE(PeriphClkInit->Lptim45ClockSelection));

    switch (PeriphClkInit->Lptim45ClockSelection)
10007382:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007386:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000738a:	681b      	ldr	r3, [r3, #0]
1000738c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10007390:	2b01      	cmp	r3, #1
10007392:	d01f      	beq.n	100073d4 <HAL_RCCEx_PeriphCLKConfig+0x18ac>
10007394:	2b02      	cmp	r3, #2
10007396:	d13b      	bne.n	10007410 <HAL_RCCEx_PeriphCLKConfig+0x18e8>
    {
      case RCC_LPTIM45CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPTIM45 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10007398:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000739c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100073a0:	681b      	ldr	r3, [r3, #0]
100073a2:	3344      	adds	r3, #68	; 0x44
100073a4:	4618      	mov	r0, r3
100073a6:	f7fe f8fd 	bl	100055a4 <RCCEx_PLL3_Config>
100073aa:	4603      	mov	r3, r0
100073ac:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100073b0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100073b4:	2b00      	cmp	r3, #0
100073b6:	d002      	beq.n	100073be <HAL_RCCEx_PeriphCLKConfig+0x1896>
        {
          return status;
100073b8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100073bc:	e23e      	b.n	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100073be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100073c2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100073c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100073ca:	f043 0320 	orr.w	r3, r3, #32
100073ce:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100073d2:	e01d      	b.n	10007410 <HAL_RCCEx_PeriphCLKConfig+0x18e8>

      case RCC_LPTIM45CLKSOURCE_PLL4: /* PLL4 is used as clock source for LPTIM45 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100073d4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100073d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100073dc:	681b      	ldr	r3, [r3, #0]
100073de:	3380      	adds	r3, #128	; 0x80
100073e0:	4618      	mov	r0, r3
100073e2:	f7fe fa49 	bl	10005878 <RCCEx_PLL4_Config>
100073e6:	4603      	mov	r3, r0
100073e8:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100073ec:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100073f0:	2b00      	cmp	r3, #0
100073f2:	d002      	beq.n	100073fa <HAL_RCCEx_PeriphCLKConfig+0x18d2>
        {
          return status;
100073f4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100073f8:	e220      	b.n	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100073fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100073fe:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007402:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007406:	f043 0310 	orr.w	r3, r3, #16
1000740a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
1000740e:	bf00      	nop
    }

    /* Set the source of LPTIM45 clock*/
    __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
10007410:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007414:	f8d3 392c 	ldr.w	r3, [r3, #2348]	; 0x92c
10007418:	f023 0207 	bic.w	r2, r3, #7
1000741c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007420:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007424:	681b      	ldr	r3, [r3, #0]
10007426:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000742a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000742e:	4313      	orrs	r3, r2
10007430:	f8c1 392c 	str.w	r3, [r1, #2348]	; 0x92c
  }

  /*---------------------------- LPTIM23 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM23) ==
10007434:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007438:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000743c:	681b      	ldr	r3, [r3, #0]
1000743e:	e9d3 2300 	ldrd	r2, r3, [r3]
10007442:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
10007446:	623b      	str	r3, [r7, #32]
10007448:	2300      	movs	r3, #0
1000744a:	627b      	str	r3, [r7, #36]	; 0x24
1000744c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
10007450:	460b      	mov	r3, r1
10007452:	4313      	orrs	r3, r2
10007454:	d037      	beq.n	100074c6 <HAL_RCCEx_PeriphCLKConfig+0x199e>
      RCC_PERIPHCLK_LPTIM23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM23CLKSOURCE(PeriphClkInit->Lptim23ClockSelection));

    if (PeriphClkInit->Lptim23ClockSelection == RCC_LPTIM23CLKSOURCE_PLL4)
10007456:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000745a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000745e:	681b      	ldr	r3, [r3, #0]
10007460:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
10007464:	2b01      	cmp	r3, #1
10007466:	d11c      	bne.n	100074a2 <HAL_RCCEx_PeriphCLKConfig+0x197a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007468:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000746c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007470:	681b      	ldr	r3, [r3, #0]
10007472:	3380      	adds	r3, #128	; 0x80
10007474:	4618      	mov	r0, r3
10007476:	f7fe f9ff 	bl	10005878 <RCCEx_PLL4_Config>
1000747a:	4603      	mov	r3, r0
1000747c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10007480:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007484:	2b00      	cmp	r3, #0
10007486:	d002      	beq.n	1000748e <HAL_RCCEx_PeriphCLKConfig+0x1966>
      {
        return status;
10007488:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000748c:	e1d6      	b.n	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000748e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007492:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007496:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000749a:	f043 0320 	orr.w	r3, r3, #32
1000749e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of LPTIM23 clock*/
    __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
100074a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100074a6:	f8d3 3930 	ldr.w	r3, [r3, #2352]	; 0x930
100074aa:	f023 0207 	bic.w	r2, r3, #7
100074ae:	f507 7312 	add.w	r3, r7, #584	; 0x248
100074b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100074b6:	681b      	ldr	r3, [r3, #0]
100074b8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
100074bc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100074c0:	4313      	orrs	r3, r2
100074c2:	f8c1 3930 	str.w	r3, [r1, #2352]	; 0x930
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) ==
100074c6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100074ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100074ce:	681b      	ldr	r3, [r3, #0]
100074d0:	e9d3 2300 	ldrd	r2, r3, [r3]
100074d4:	f002 0340 	and.w	r3, r2, #64	; 0x40
100074d8:	61bb      	str	r3, [r7, #24]
100074da:	2300      	movs	r3, #0
100074dc:	61fb      	str	r3, [r7, #28]
100074de:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
100074e2:	460b      	mov	r3, r1
100074e4:	4313      	orrs	r3, r2
100074e6:	d058      	beq.n	1000759a <HAL_RCCEx_PeriphCLKConfig+0x1a72>
      RCC_PERIPHCLK_LPTIM1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
100074e8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100074ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100074f0:	681b      	ldr	r3, [r3, #0]
100074f2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
100074f6:	2b01      	cmp	r3, #1
100074f8:	d01f      	beq.n	1000753a <HAL_RCCEx_PeriphCLKConfig+0x1a12>
100074fa:	2b02      	cmp	r3, #2
100074fc:	d13b      	bne.n	10007576 <HAL_RCCEx_PeriphCLKConfig+0x1a4e>
    {
      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100074fe:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007502:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007506:	681b      	ldr	r3, [r3, #0]
10007508:	3344      	adds	r3, #68	; 0x44
1000750a:	4618      	mov	r0, r3
1000750c:	f7fe f84a 	bl	100055a4 <RCCEx_PLL3_Config>
10007510:	4603      	mov	r3, r0
10007512:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007516:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000751a:	2b00      	cmp	r3, #0
1000751c:	d002      	beq.n	10007524 <HAL_RCCEx_PeriphCLKConfig+0x19fc>
        {
          return status;
1000751e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007522:	e18b      	b.n	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10007524:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007528:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000752c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007530:	f043 0320 	orr.w	r3, r3, #32
10007534:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10007538:	e01d      	b.n	10007576 <HAL_RCCEx_PeriphCLKConfig+0x1a4e>

      case RCC_LPTIM1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for LPTIM1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000753a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000753e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007542:	681b      	ldr	r3, [r3, #0]
10007544:	3380      	adds	r3, #128	; 0x80
10007546:	4618      	mov	r0, r3
10007548:	f7fe f996 	bl	10005878 <RCCEx_PLL4_Config>
1000754c:	4603      	mov	r3, r0
1000754e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10007552:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10007556:	2b00      	cmp	r3, #0
10007558:	d002      	beq.n	10007560 <HAL_RCCEx_PeriphCLKConfig+0x1a38>
        {
          return status;
1000755a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000755e:	e16d      	b.n	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10007560:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007564:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10007568:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000756c:	f043 0310 	orr.w	r3, r3, #16
10007570:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10007574:	bf00      	nop
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
10007576:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000757a:	f8d3 3934 	ldr.w	r3, [r3, #2356]	; 0x934
1000757e:	f023 0207 	bic.w	r2, r3, #7
10007582:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007586:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000758a:	681b      	ldr	r3, [r3, #0]
1000758c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
10007590:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10007594:	4313      	orrs	r3, r2
10007596:	f8c1 3934 	str.w	r3, [r1, #2356]	; 0x934
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) ==
1000759a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000759e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100075a2:	681b      	ldr	r3, [r3, #0]
100075a4:	e9d3 2300 	ldrd	r2, r3, [r3]
100075a8:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
100075ac:	613b      	str	r3, [r7, #16]
100075ae:	2300      	movs	r3, #0
100075b0:	617b      	str	r3, [r7, #20]
100075b2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
100075b6:	460b      	mov	r3, r1
100075b8:	4313      	orrs	r3, r2
100075ba:	f000 80c6 	beq.w	1000774a <HAL_RCCEx_PeriphCLKConfig+0x1c22>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
100075be:	4ba2      	ldr	r3, [pc, #648]	; (10007848 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
100075c0:	681b      	ldr	r3, [r3, #0]
100075c2:	4aa1      	ldr	r2, [pc, #644]	; (10007848 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
100075c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
100075c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
100075ca:	f7fa f90d 	bl	100017e8 <HAL_GetTick>
100075ce:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100075d2:	e00a      	b.n	100075ea <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
100075d4:	f7fa f908 	bl	100017e8 <HAL_GetTick>
100075d8:	4602      	mov	r2, r0
100075da:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
100075de:	1ad3      	subs	r3, r2, r3
100075e0:	2b64      	cmp	r3, #100	; 0x64
100075e2:	d902      	bls.n	100075ea <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
      {
        ret = HAL_TIMEOUT;
100075e4:	2303      	movs	r3, #3
100075e6:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100075ea:	4b97      	ldr	r3, [pc, #604]	; (10007848 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
100075ec:	681b      	ldr	r3, [r3, #0]
100075ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
100075f2:	2b00      	cmp	r3, #0
100075f4:	d0ee      	beq.n	100075d4 <HAL_RCCEx_PeriphCLKConfig+0x1aac>
      }
    }

    if (ret == HAL_OK)
100075f6:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
100075fa:	2b00      	cmp	r3, #0
100075fc:	f040 80a2 	bne.w	10007744 <HAL_RCCEx_PeriphCLKConfig+0x1c1c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSRC) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSRC))
10007600:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007604:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
10007608:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000760c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007610:	681b      	ldr	r3, [r3, #0]
10007612:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
10007616:	4053      	eors	r3, r2
10007618:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
1000761c:	2b00      	cmp	r3, #0
1000761e:	f000 8086 	beq.w	1000772e <HAL_RCCEx_PeriphCLKConfig+0x1c06>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSRC));
10007622:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007626:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000762a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
1000762e:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
10007632:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007636:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000763a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000763e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
10007642:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        __HAL_RCC_BACKUPRESET_RELEASE();
10007646:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000764a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000764e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10007652:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
10007656:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

        /* Set the LSEDrive value */
        __HAL_RCC_LSEDRIVE_CONFIG(tmpreg & RCC_BDCR_LSEDRV);
1000765a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000765e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10007662:	f023 0230 	bic.w	r2, r3, #48	; 0x30
10007666:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
1000766a:	f003 0330 	and.w	r3, r3, #48	; 0x30
1000766e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10007672:	4313      	orrs	r3, r2
10007674:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

        /* RCC_BDCR_LSEON can be enabled for RTC or another IP, re-enable it */
        RCC_OscInitTypeDef RCC_OscInitStructure;
        /* Configure LSE Oscillator*/
        RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_LSE;
10007678:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000767c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
10007680:	2204      	movs	r2, #4
10007682:	601a      	str	r2, [r3, #0]
        RCC_OscInitStructure.LSEState = (tmpreg & LSE_MASK);
10007684:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
10007688:	f003 020b 	and.w	r2, r3, #11
1000768c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10007690:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
10007694:	609a      	str	r2, [r3, #8]

        RCC_OscInitStructure.PLL.PLLState = RCC_PLL_NONE;
10007696:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000769a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
1000769e:	2200      	movs	r2, #0
100076a0:	625a      	str	r2, [r3, #36]	; 0x24
        RCC_OscInitStructure.PLL2.PLLState = RCC_PLL_NONE;
100076a2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100076a6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
100076aa:	2200      	movs	r2, #0
100076ac:	661a      	str	r2, [r3, #96]	; 0x60
        RCC_OscInitStructure.PLL3.PLLState = RCC_PLL_NONE;
100076ae:	f507 7312 	add.w	r3, r7, #584	; 0x248
100076b2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
100076b6:	2200      	movs	r2, #0
100076b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        RCC_OscInitStructure.PLL4.PLLState = RCC_PLL_NONE;
100076bc:	f507 7312 	add.w	r3, r7, #584	; 0x248
100076c0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
100076c4:	2200      	movs	r2, #0
100076c6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
        ret = HAL_RCC_OscConfig(&RCC_OscInitStructure);
100076ca:	f507 7390 	add.w	r3, r7, #288	; 0x120
100076ce:	4618      	mov	r0, r3
100076d0:	f7fc f90e 	bl	100038f0 <HAL_RCC_OscConfig>
100076d4:	4603      	mov	r3, r0
100076d6:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
        if (ret != HAL_OK)
100076da:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
100076de:	2b00      	cmp	r3, #0
100076e0:	d002      	beq.n	100076e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc0>
        {
          return ret;
100076e2:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
100076e6:	e0a9      	b.n	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }

        /* Write the RTCSRC */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
100076e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100076ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100076f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
100076f4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100076f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100076fc:	681b      	ldr	r3, [r3, #0]
100076fe:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
10007702:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10007706:	4313      	orrs	r3, r2
10007708:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

        /* Fill up Reserved register mask for BDCR
         * All already filled up or what shouldn't be modified must be put on the mask */
        RESERVED_BDCR_MASK = ~(RCC_BDCR_VSWRST | RCC_BDCR_RTCCKEN | RCC_BDCR_RTCSRC |
1000770c:	4b4f      	ldr	r3, [pc, #316]	; (1000784c <HAL_RCCEx_PeriphCLKConfig+0x1d24>)
1000770e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
                               RCC_BDCR_LSECSSD | RCC_BDCR_LSEDRV | RCC_BDCR_DIGBYP |
                               RCC_BDCR_LSERDY | RCC_BDCR_LSEBYP | RCC_BDCR_LSEON);

        /* Restore the BDCR context: RESERVED registers plus RCC_BDCR_LSECSSON */
        WRITE_REG(RCC->BDCR, (READ_REG(RCC->BDCR) | (tmpreg & RESERVED_BDCR_MASK)));
10007712:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007716:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
1000771a:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
1000771e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
10007722:	400b      	ands	r3, r1
10007724:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10007728:	4313      	orrs	r3, r2
1000772a:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

      }/* End RTCSRC changed */

      /*Enable RTC clock   */
      __HAL_RCC_RTC_ENABLE();
1000772e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007732:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10007736:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000773a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1000773e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
10007742:	e002      	b.n	1000774a <HAL_RCCEx_PeriphCLKConfig+0x1c22>
    }
    else
    {
      // Enable write access to Backup domain failed
      /* return the error */
      return ret;
10007744:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
10007748:	e078      	b.n	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    }
  }

  /*---------------------------- TIMG1 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG1) ==
1000774a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000774e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007752:	681b      	ldr	r3, [r3, #0]
10007754:	e9d3 2300 	ldrd	r2, r3, [r3]
10007758:	f402 6380 	and.w	r3, r2, #1024	; 0x400
1000775c:	60bb      	str	r3, [r7, #8]
1000775e:	2300      	movs	r3, #0
10007760:	60fb      	str	r3, [r7, #12]
10007762:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
10007766:	460b      	mov	r3, r1
10007768:	4313      	orrs	r3, r2
1000776a:	d02a      	beq.n	100077c2 <HAL_RCCEx_PeriphCLKConfig+0x1c9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection);
1000776c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007770:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
10007774:	f023 0201 	bic.w	r2, r3, #1
10007778:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000777c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10007780:	681b      	ldr	r3, [r3, #0]
10007782:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
10007786:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000778a:	4313      	orrs	r3, r2
1000778c:	f8c1 3828 	str.w	r3, [r1, #2088]	; 0x828

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10007790:	f7fa f82a 	bl	100017e8 <HAL_GetTick>
10007794:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
10007798:	e00a      	b.n	100077b0 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000779a:	f7fa f825 	bl	100017e8 <HAL_GetTick>
1000779e:	4602      	mov	r2, r0
100077a0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
100077a4:	1ad3      	subs	r3, r2, r3
100077a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100077aa:	d901      	bls.n	100077b0 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
      {
        return HAL_TIMEOUT;
100077ac:	2303      	movs	r3, #3
100077ae:	e045      	b.n	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
100077b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100077b4:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
100077b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100077bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100077c0:	d1eb      	bne.n	1000779a <HAL_RCCEx_PeriphCLKConfig+0x1c72>
      }
    }
  }

  /*---------------------------- TIMG2 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG2) ==
100077c2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100077c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100077ca:	681b      	ldr	r3, [r3, #0]
100077cc:	e9d3 2300 	ldrd	r2, r3, [r3]
100077d0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
100077d4:	603b      	str	r3, [r7, #0]
100077d6:	2300      	movs	r3, #0
100077d8:	607b      	str	r3, [r7, #4]
100077da:	e9d7 1200 	ldrd	r1, r2, [r7]
100077de:	460b      	mov	r3, r1
100077e0:	4313      	orrs	r3, r2
100077e2:	d02a      	beq.n	1000783a <HAL_RCCEx_PeriphCLKConfig+0x1d12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection);
100077e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100077e8:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
100077ec:	f023 0201 	bic.w	r2, r3, #1
100077f0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100077f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100077f8:	681b      	ldr	r3, [r3, #0]
100077fa:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
100077fe:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10007802:	4313      	orrs	r3, r2
10007804:	f8c1 382c 	str.w	r3, [r1, #2092]	; 0x82c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10007808:	f7f9 ffee 	bl	100017e8 <HAL_GetTick>
1000780c:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
10007810:	e00a      	b.n	10007828 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10007812:	f7f9 ffe9 	bl	100017e8 <HAL_GetTick>
10007816:	4602      	mov	r2, r0
10007818:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
1000781c:	1ad3      	subs	r3, r2, r3
1000781e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10007822:	d901      	bls.n	10007828 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
      {
        return HAL_TIMEOUT;
10007824:	2303      	movs	r3, #3
10007826:	e009      	b.n	1000783c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
10007828:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000782c:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
10007830:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10007834:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10007838:	d1eb      	bne.n	10007812 <HAL_RCCEx_PeriphCLKConfig+0x1cea>
      }
    }
  }

  return HAL_OK;
1000783a:	2300      	movs	r3, #0
}
1000783c:	4618      	mov	r0, r3
1000783e:	f507 7712 	add.w	r7, r7, #584	; 0x248
10007842:	46bd      	mov	sp, r7
10007844:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
10007848:	50001000 	.word	0x50001000
1000784c:	7fecfdc0 	.word	0x7fecfdc0

10007850 <HAL_RCCEx_GetPeriphCLKFreq>:
  *          @ref RCCEx_Periph_Clock_Selection
  *          @ref RCCEx_Periph_One_Clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
10007850:	b590      	push	{r4, r7, lr}
10007852:	b08f      	sub	sp, #60	; 0x3c
10007854:	af00      	add	r7, sp, #0
10007856:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t frequency = 0, clksource = 0;
1000785a:	2100      	movs	r1, #0
1000785c:	6379      	str	r1, [r7, #52]	; 0x34
1000785e:	2100      	movs	r1, #0
10007860:	6339      	str	r1, [r7, #48]	; 0x30
  PLL4_ClocksTypeDef pll4_clocks;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk) || IS_RCC_PERIPHONECLOCK(PeriphClk));

  switch (PeriphClk)
10007862:	e9d7 0100 	ldrd	r0, r1, [r7]
10007866:	f5a1 4480 	sub.w	r4, r1, #16384	; 0x4000
1000786a:	ea50 0104 	orrs.w	r1, r0, r4
1000786e:	f000 82cb 	beq.w	10007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
10007872:	e9d7 0100 	ldrd	r0, r1, [r7]
10007876:	2801      	cmp	r0, #1
10007878:	f571 4180 	sbcs.w	r1, r1, #16384	; 0x4000
1000787c:	f081 82af 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007880:	e9d7 0100 	ldrd	r0, r1, [r7]
10007884:	f5a1 5400 	sub.w	r4, r1, #8192	; 0x2000
10007888:	ea50 0104 	orrs.w	r1, r0, r4
1000788c:	f001 80f1 	beq.w	10008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
10007890:	e9d7 0100 	ldrd	r0, r1, [r7]
10007894:	2801      	cmp	r0, #1
10007896:	f571 5100 	sbcs.w	r1, r1, #8192	; 0x2000
1000789a:	f081 82a0 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000789e:	e9d7 0100 	ldrd	r0, r1, [r7]
100078a2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
100078a6:	ea50 0104 	orrs.w	r1, r0, r4
100078aa:	f000 8738 	beq.w	1000871e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
100078ae:	e9d7 0100 	ldrd	r0, r1, [r7]
100078b2:	2801      	cmp	r0, #1
100078b4:	f571 5180 	sbcs.w	r1, r1, #4096	; 0x1000
100078b8:	f081 8291 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100078bc:	e9d7 0100 	ldrd	r0, r1, [r7]
100078c0:	f5a1 6400 	sub.w	r4, r1, #2048	; 0x800
100078c4:	ea50 0104 	orrs.w	r1, r0, r4
100078c8:	f000 872d 	beq.w	10008726 <HAL_RCCEx_GetPeriphCLKFreq+0xed6>
100078cc:	e9d7 0100 	ldrd	r0, r1, [r7]
100078d0:	2801      	cmp	r0, #1
100078d2:	f571 6100 	sbcs.w	r1, r1, #2048	; 0x800
100078d6:	f081 8282 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100078da:	e9d7 0100 	ldrd	r0, r1, [r7]
100078de:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
100078e2:	ea50 0104 	orrs.w	r1, r0, r4
100078e6:	f000 875e 	beq.w	100087a6 <HAL_RCCEx_GetPeriphCLKFreq+0xf56>
100078ea:	e9d7 0100 	ldrd	r0, r1, [r7]
100078ee:	2801      	cmp	r0, #1
100078f0:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
100078f4:	f081 8273 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100078f8:	e9d7 0100 	ldrd	r0, r1, [r7]
100078fc:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
10007900:	ea50 0104 	orrs.w	r1, r0, r4
10007904:	f000 86bf 	beq.w	10008686 <HAL_RCCEx_GetPeriphCLKFreq+0xe36>
10007908:	e9d7 0100 	ldrd	r0, r1, [r7]
1000790c:	2801      	cmp	r0, #1
1000790e:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
10007912:	f081 8264 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007916:	e9d7 0100 	ldrd	r0, r1, [r7]
1000791a:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
1000791e:	ea50 0104 	orrs.w	r1, r0, r4
10007922:	f000 845c 	beq.w	100081de <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
10007926:	e9d7 0100 	ldrd	r0, r1, [r7]
1000792a:	2801      	cmp	r0, #1
1000792c:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
10007930:	f081 8255 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007934:	e9d7 0100 	ldrd	r0, r1, [r7]
10007938:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
1000793c:	ea50 0104 	orrs.w	r1, r0, r4
10007940:	f000 86bf 	beq.w	100086c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe72>
10007944:	e9d7 0100 	ldrd	r0, r1, [r7]
10007948:	2801      	cmp	r0, #1
1000794a:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
1000794e:	f081 8246 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007952:	e9d7 0100 	ldrd	r0, r1, [r7]
10007956:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
1000795a:	ea50 0104 	orrs.w	r1, r0, r4
1000795e:	f000 824e 	beq.w	10007dfe <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
10007962:	e9d7 0100 	ldrd	r0, r1, [r7]
10007966:	2801      	cmp	r0, #1
10007968:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
1000796c:	f081 8237 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007970:	e9d7 0100 	ldrd	r0, r1, [r7]
10007974:	f1a1 0420 	sub.w	r4, r1, #32
10007978:	ea50 0104 	orrs.w	r1, r0, r4
1000797c:	f000 8722 	beq.w	100087c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf74>
10007980:	e9d7 0100 	ldrd	r0, r1, [r7]
10007984:	2801      	cmp	r0, #1
10007986:	f171 0120 	sbcs.w	r1, r1, #32
1000798a:	f081 8228 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
1000798e:	e9d7 0100 	ldrd	r0, r1, [r7]
10007992:	f1a1 0410 	sub.w	r4, r1, #16
10007996:	ea50 0104 	orrs.w	r1, r0, r4
1000799a:	f000 87c9 	beq.w	10008930 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
1000799e:	e9d7 0100 	ldrd	r0, r1, [r7]
100079a2:	2801      	cmp	r0, #1
100079a4:	f171 0110 	sbcs.w	r1, r1, #16
100079a8:	f081 8219 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100079ac:	e9d7 0100 	ldrd	r0, r1, [r7]
100079b0:	f1a1 0408 	sub.w	r4, r1, #8
100079b4:	ea50 0104 	orrs.w	r1, r0, r4
100079b8:	f001 80e8 	beq.w	10008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x133c>
100079bc:	e9d7 0100 	ldrd	r0, r1, [r7]
100079c0:	2801      	cmp	r0, #1
100079c2:	f171 0108 	sbcs.w	r1, r1, #8
100079c6:	f081 820a 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100079ca:	e9d7 0100 	ldrd	r0, r1, [r7]
100079ce:	1f0c      	subs	r4, r1, #4
100079d0:	ea50 0104 	orrs.w	r1, r0, r4
100079d4:	f001 8104 	beq.w	10008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1390>
100079d8:	e9d7 0100 	ldrd	r0, r1, [r7]
100079dc:	2801      	cmp	r0, #1
100079de:	f171 0104 	sbcs.w	r1, r1, #4
100079e2:	f081 81fc 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100079e6:	e9d7 0100 	ldrd	r0, r1, [r7]
100079ea:	1e8c      	subs	r4, r1, #2
100079ec:	ea50 0104 	orrs.w	r1, r0, r4
100079f0:	f000 87ee 	beq.w	100089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1180>
100079f4:	e9d7 0100 	ldrd	r0, r1, [r7]
100079f8:	2801      	cmp	r0, #1
100079fa:	f171 0102 	sbcs.w	r1, r1, #2
100079fe:	f081 81ee 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007a02:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a06:	1e4c      	subs	r4, r1, #1
10007a08:	ea50 0104 	orrs.w	r1, r0, r4
10007a0c:	f001 8053 	beq.w	10008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
10007a10:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a14:	2801      	cmp	r0, #1
10007a16:	f171 0101 	sbcs.w	r1, r1, #1
10007a1a:	f081 81e0 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007a1e:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a22:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
10007a26:	4321      	orrs	r1, r4
10007a28:	f001 8104 	beq.w	10008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
10007a2c:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a30:	4cbd      	ldr	r4, [pc, #756]	; (10007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>)
10007a32:	42a0      	cmp	r0, r4
10007a34:	f171 0100 	sbcs.w	r1, r1, #0
10007a38:	f081 81d1 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007a3c:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a40:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
10007a44:	4321      	orrs	r1, r4
10007a46:	f000 85e3 	beq.w	10008610 <HAL_RCCEx_GetPeriphCLKFreq+0xdc0>
10007a4a:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a4e:	4cb7      	ldr	r4, [pc, #732]	; (10007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
10007a50:	42a0      	cmp	r0, r4
10007a52:	f171 0100 	sbcs.w	r1, r1, #0
10007a56:	f081 81c2 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007a5a:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a5e:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
10007a62:	4321      	orrs	r1, r4
10007a64:	f000 86e1 	beq.w	1000882a <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
10007a68:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a6c:	4cb0      	ldr	r4, [pc, #704]	; (10007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
10007a6e:	42a0      	cmp	r0, r4
10007a70:	f171 0100 	sbcs.w	r1, r1, #0
10007a74:	f081 81b3 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007a78:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a7c:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
10007a80:	4321      	orrs	r1, r4
10007a82:	f000 84db 	beq.w	1000843c <HAL_RCCEx_GetPeriphCLKFreq+0xbec>
10007a86:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a8a:	4caa      	ldr	r4, [pc, #680]	; (10007d34 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
10007a8c:	42a0      	cmp	r0, r4
10007a8e:	f171 0100 	sbcs.w	r1, r1, #0
10007a92:	f081 81a4 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007a96:	e9d7 0100 	ldrd	r0, r1, [r7]
10007a9a:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
10007a9e:	4321      	orrs	r1, r4
10007aa0:	f000 82b0 	beq.w	10008004 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
10007aa4:	e9d7 0100 	ldrd	r0, r1, [r7]
10007aa8:	4ca3      	ldr	r4, [pc, #652]	; (10007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
10007aaa:	42a0      	cmp	r0, r4
10007aac:	f171 0100 	sbcs.w	r1, r1, #0
10007ab0:	f081 8195 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007ab4:	e9d7 0100 	ldrd	r0, r1, [r7]
10007ab8:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
10007abc:	4321      	orrs	r1, r4
10007abe:	f000 8481 	beq.w	100083c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb74>
10007ac2:	e9d7 0100 	ldrd	r0, r1, [r7]
10007ac6:	4c9d      	ldr	r4, [pc, #628]	; (10007d3c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
10007ac8:	42a0      	cmp	r0, r4
10007aca:	f171 0100 	sbcs.w	r1, r1, #0
10007ace:	f081 8186 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007ad2:	e9d7 0100 	ldrd	r0, r1, [r7]
10007ad6:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
10007ada:	4321      	orrs	r1, r4
10007adc:	f000 8384 	beq.w	100081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
10007ae0:	e9d7 0100 	ldrd	r0, r1, [r7]
10007ae4:	4c96      	ldr	r4, [pc, #600]	; (10007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
10007ae6:	42a0      	cmp	r0, r4
10007ae8:	f171 0100 	sbcs.w	r1, r1, #0
10007aec:	f081 8177 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007af0:	e9d7 0100 	ldrd	r0, r1, [r7]
10007af4:	f100 447f 	add.w	r4, r0, #4278190080	; 0xff000000
10007af8:	4321      	orrs	r1, r4
10007afa:	f000 8250 	beq.w	10007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
10007afe:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b02:	4c90      	ldr	r4, [pc, #576]	; (10007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
10007b04:	42a0      	cmp	r0, r4
10007b06:	f171 0100 	sbcs.w	r1, r1, #0
10007b0a:	f081 8168 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007b0e:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b12:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
10007b16:	4321      	orrs	r1, r4
10007b18:	f000 85b9 	beq.w	1000868e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
10007b1c:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b20:	4c89      	ldr	r4, [pc, #548]	; (10007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
10007b22:	42a0      	cmp	r0, r4
10007b24:	f171 0100 	sbcs.w	r1, r1, #0
10007b28:	f081 8159 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007b2c:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b30:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
10007b34:	4321      	orrs	r1, r4
10007b36:	f000 871a 	beq.w	1000896e <HAL_RCCEx_GetPeriphCLKFreq+0x111e>
10007b3a:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b3e:	4c83      	ldr	r4, [pc, #524]	; (10007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
10007b40:	42a0      	cmp	r0, r4
10007b42:	f171 0100 	sbcs.w	r1, r1, #0
10007b46:	f081 814a 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007b4a:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b4e:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
10007b52:	4321      	orrs	r1, r4
10007b54:	f000 875e 	beq.w	10008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
10007b58:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b5c:	4c7c      	ldr	r4, [pc, #496]	; (10007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
10007b5e:	42a0      	cmp	r0, r4
10007b60:	f171 0100 	sbcs.w	r1, r1, #0
10007b64:	f081 813b 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007b68:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b6c:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
10007b70:	4321      	orrs	r1, r4
10007b72:	f000 8786 	beq.w	10008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1232>
10007b76:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b7a:	4c76      	ldr	r4, [pc, #472]	; (10007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
10007b7c:	42a0      	cmp	r0, r4
10007b7e:	f171 0100 	sbcs.w	r1, r1, #0
10007b82:	f081 812c 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007b86:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b8a:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
10007b8e:	4321      	orrs	r1, r4
10007b90:	f000 83dd 	beq.w	1000834e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
10007b94:	e9d7 0100 	ldrd	r0, r1, [r7]
10007b98:	4c6f      	ldr	r4, [pc, #444]	; (10007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
10007b9a:	42a0      	cmp	r0, r4
10007b9c:	f171 0100 	sbcs.w	r1, r1, #0
10007ba0:	f081 811d 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007ba4:	e9d7 0100 	ldrd	r0, r1, [r7]
10007ba8:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
10007bac:	4321      	orrs	r1, r4
10007bae:	f000 84f2 	beq.w	10008596 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
10007bb2:	e9d7 0100 	ldrd	r0, r1, [r7]
10007bb6:	4c69      	ldr	r4, [pc, #420]	; (10007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
10007bb8:	42a0      	cmp	r0, r4
10007bba:	f171 0100 	sbcs.w	r1, r1, #0
10007bbe:	f081 810e 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007bc2:	e9d7 0100 	ldrd	r0, r1, [r7]
10007bc6:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
10007bca:	4321      	orrs	r1, r4
10007bcc:	f000 84af 	beq.w	1000852e <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
10007bd0:	e9d7 0100 	ldrd	r0, r1, [r7]
10007bd4:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
10007bd8:	f171 0100 	sbcs.w	r1, r1, #0
10007bdc:	f081 80ff 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007be0:	e9d7 0100 	ldrd	r0, r1, [r7]
10007be4:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
10007be8:	4321      	orrs	r1, r4
10007bea:	f000 82b8 	beq.w	1000815e <HAL_RCCEx_GetPeriphCLKFreq+0x90e>
10007bee:	e9d7 0100 	ldrd	r0, r1, [r7]
10007bf2:	f248 0401 	movw	r4, #32769	; 0x8001
10007bf6:	42a0      	cmp	r0, r4
10007bf8:	f171 0100 	sbcs.w	r1, r1, #0
10007bfc:	f081 80ef 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007c00:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c04:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
10007c08:	4321      	orrs	r1, r4
10007c0a:	f000 8458 	beq.w	100084be <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
10007c0e:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c12:	f244 0401 	movw	r4, #16385	; 0x4001
10007c16:	42a0      	cmp	r0, r4
10007c18:	f171 0100 	sbcs.w	r1, r1, #0
10007c1c:	f081 80df 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007c20:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c24:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
10007c28:	4321      	orrs	r1, r4
10007c2a:	f000 80f2 	beq.w	10007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
10007c2e:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c32:	f242 0401 	movw	r4, #8193	; 0x2001
10007c36:	42a0      	cmp	r0, r4
10007c38:	f171 0100 	sbcs.w	r1, r1, #0
10007c3c:	f081 80cf 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007c40:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c44:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
10007c48:	4321      	orrs	r1, r4
10007c4a:	f000 8574 	beq.w	10008736 <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
10007c4e:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c52:	f241 0401 	movw	r4, #4097	; 0x1001
10007c56:	42a0      	cmp	r0, r4
10007c58:	f171 0100 	sbcs.w	r1, r1, #0
10007c5c:	f081 80bf 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007c60:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c64:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
10007c68:	4321      	orrs	r1, r4
10007c6a:	f001 8063 	beq.w	10008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x14e4>
10007c6e:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c72:	f640 0401 	movw	r4, #2049	; 0x801
10007c76:	42a0      	cmp	r0, r4
10007c78:	f171 0100 	sbcs.w	r1, r1, #0
10007c7c:	f081 80af 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007c80:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c84:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
10007c88:	4321      	orrs	r1, r4
10007c8a:	f001 800b 	beq.w	10008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1454>
10007c8e:	e9d7 0100 	ldrd	r0, r1, [r7]
10007c92:	f240 4401 	movw	r4, #1025	; 0x401
10007c96:	42a0      	cmp	r0, r4
10007c98:	f171 0100 	sbcs.w	r1, r1, #0
10007c9c:	f081 809f 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007ca0:	e9d7 0100 	ldrd	r0, r1, [r7]
10007ca4:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
10007ca8:	4321      	orrs	r1, r4
10007caa:	f000 8512 	beq.w	100086d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe82>
10007cae:	e9d7 0100 	ldrd	r0, r1, [r7]
10007cb2:	f240 2401 	movw	r4, #513	; 0x201
10007cb6:	42a0      	cmp	r0, r4
10007cb8:	f171 0100 	sbcs.w	r1, r1, #0
10007cbc:	f081 808f 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007cc0:	e9d7 0100 	ldrd	r0, r1, [r7]
10007cc4:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
10007cc8:	4321      	orrs	r1, r4
10007cca:	f000 82ff 	beq.w	100082cc <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
10007cce:	e9d7 0100 	ldrd	r0, r1, [r7]
10007cd2:	f240 1401 	movw	r4, #257	; 0x101
10007cd6:	42a0      	cmp	r0, r4
10007cd8:	f171 0100 	sbcs.w	r1, r1, #0
10007cdc:	f081 807f 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007ce0:	e9d7 0100 	ldrd	r0, r1, [r7]
10007ce4:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
10007ce8:	4321      	orrs	r1, r4
10007cea:	f000 82b3 	beq.w	10008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
10007cee:	e9d7 0100 	ldrd	r0, r1, [r7]
10007cf2:	2881      	cmp	r0, #129	; 0x81
10007cf4:	f171 0100 	sbcs.w	r1, r1, #0
10007cf8:	f081 8071 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007cfc:	e9d7 0100 	ldrd	r0, r1, [r7]
10007d00:	2821      	cmp	r0, #33	; 0x21
10007d02:	f171 0100 	sbcs.w	r1, r1, #0
10007d06:	d271      	bcs.n	10007dec <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
10007d08:	e9d7 0100 	ldrd	r0, r1, [r7]
10007d0c:	4301      	orrs	r1, r0
10007d0e:	f001 8066 	beq.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007d12:	e9d7 0100 	ldrd	r0, r1, [r7]
10007d16:	1e42      	subs	r2, r0, #1
10007d18:	f141 33ff 	adc.w	r3, r1, #4294967295
10007d1c:	2a20      	cmp	r2, #32
10007d1e:	f173 0100 	sbcs.w	r1, r3, #0
10007d22:	f081 805c 	bcs.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007d26:	e01b      	b.n	10007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
10007d28:	80000001 	.word	0x80000001
10007d2c:	40000001 	.word	0x40000001
10007d30:	20000001 	.word	0x20000001
10007d34:	10000001 	.word	0x10000001
10007d38:	08000001 	.word	0x08000001
10007d3c:	04000001 	.word	0x04000001
10007d40:	02000001 	.word	0x02000001
10007d44:	01000001 	.word	0x01000001
10007d48:	00400001 	.word	0x00400001
10007d4c:	00200001 	.word	0x00200001
10007d50:	00100001 	.word	0x00100001
10007d54:	00080001 	.word	0x00080001
10007d58:	00040001 	.word	0x00040001
10007d5c:	00020001 	.word	0x00020001
10007d60:	2a1f      	cmp	r2, #31
10007d62:	f201 803c 	bhi.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
10007d66:	a101      	add	r1, pc, #4	; (adr r1, 10007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
10007d68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
10007d6c:	100088ad 	.word	0x100088ad
10007d70:	1000807d 	.word	0x1000807d
10007d74:	10008ddf 	.word	0x10008ddf
10007d78:	100080ef 	.word	0x100080ef
10007d7c:	10008ddf 	.word	0x10008ddf
10007d80:	10008ddf 	.word	0x10008ddf
10007d84:	10008ddf 	.word	0x10008ddf
10007d88:	10008b35 	.word	0x10008b35
10007d8c:	10008ddf 	.word	0x10008ddf
10007d90:	10008ddf 	.word	0x10008ddf
10007d94:	10008ddf 	.word	0x10008ddf
10007d98:	10008ddf 	.word	0x10008ddf
10007d9c:	10008ddf 	.word	0x10008ddf
10007da0:	10008ddf 	.word	0x10008ddf
10007da4:	10008ddf 	.word	0x10008ddf
10007da8:	10007e5d 	.word	0x10007e5d
10007dac:	10008ddf 	.word	0x10008ddf
10007db0:	10008ddf 	.word	0x10008ddf
10007db4:	10008ddf 	.word	0x10008ddf
10007db8:	10008ddf 	.word	0x10008ddf
10007dbc:	10008ddf 	.word	0x10008ddf
10007dc0:	10008ddf 	.word	0x10008ddf
10007dc4:	10008ddf 	.word	0x10008ddf
10007dc8:	10008ddf 	.word	0x10008ddf
10007dcc:	10008ddf 	.word	0x10008ddf
10007dd0:	10008ddf 	.word	0x10008ddf
10007dd4:	10008ddf 	.word	0x10008ddf
10007dd8:	10008ddf 	.word	0x10008ddf
10007ddc:	10008ddf 	.word	0x10008ddf
10007de0:	10008ddf 	.word	0x10008ddf
10007de4:	10008ddf 	.word	0x10008ddf
10007de8:	10007ebf 	.word	0x10007ebf
10007dec:	e9d7 2300 	ldrd	r2, r3, [r7]
10007df0:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
10007df4:	430b      	orrs	r3, r1
10007df6:	f000 8094 	beq.w	10007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
10007dfa:	f000 bff0 	b.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
  {

    case RCC_PERIPHCLK_DAC:
    {
      frequency = LSI_VALUE;
10007dfe:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10007e02:	637b      	str	r3, [r7, #52]	; 0x34
    }
      break; /*RCC_PERIPHCLK_DAC*/
10007e04:	f000 bfeb 	b.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_WWDG:
    {
      frequency = HAL_RCC_GetPCLK1Freq();
10007e08:	f7fd f8c6 	bl	10004f98 <HAL_RCC_GetPCLK1Freq>
10007e0c:	6378      	str	r0, [r7, #52]	; 0x34
    }
      break; /* RCC_PERIPHCLK_WWDG */
10007e0e:	f000 bfe6 	b.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_CEC:
    {
      clksource = __HAL_RCC_GET_CEC_SOURCE();
10007e12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007e16:	f8d3 3918 	ldr.w	r3, [r3, #2328]	; 0x918
10007e1a:	f003 0303 	and.w	r3, r3, #3
10007e1e:	633b      	str	r3, [r7, #48]	; 0x30
10007e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007e22:	2b02      	cmp	r3, #2
10007e24:	d011      	beq.n	10007e4a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
10007e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007e28:	2b02      	cmp	r3, #2
10007e2a:	d812      	bhi.n	10007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
10007e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007e2e:	2b00      	cmp	r3, #0
10007e30:	d003      	beq.n	10007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
10007e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007e34:	2b01      	cmp	r3, #1
10007e36:	d004      	beq.n	10007e42 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
10007e38:	e00b      	b.n	10007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x602>

      switch (clksource)
      {
        case RCC_CECCLKSOURCE_LSE:
          frequency = LSE_VALUE;
10007e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10007e3e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007e40:	e00a      	b.n	10007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x608>

        case RCC_CECCLKSOURCE_LSI:
          frequency = LSI_VALUE;
10007e42:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10007e46:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007e48:	e006      	b.n	10007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x608>

        case RCC_CECCLKSOURCE_CSI122:
          frequency = (CSI_VALUE / 122);
10007e4a:	f248 0312 	movw	r3, #32786	; 0x8012
10007e4e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007e50:	e002      	b.n	10007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x608>

        default:
          frequency = 0;
10007e52:	2300      	movs	r3, #0
10007e54:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007e56:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_CEC */
10007e58:	f000 bfc1 	b.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_I2C12:
    {
      clksource = __HAL_RCC_GET_I2C12_SOURCE();
10007e5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007e60:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	; 0x8c0
10007e64:	f003 0307 	and.w	r3, r3, #7
10007e68:	633b      	str	r3, [r7, #48]	; 0x30
10007e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007e6c:	2b03      	cmp	r3, #3
10007e6e:	f200 87a7 	bhi.w	10008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1570>
10007e72:	a201      	add	r2, pc, #4	; (adr r2, 10007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x628>)
10007e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10007e78:	10007e89 	.word	0x10007e89
10007e7c:	10007e91 	.word	0x10007e91
10007e80:	10007ea1 	.word	0x10007ea1
10007e84:	10007eb5 	.word	0x10007eb5

      switch (clksource)
      {
        case RCC_I2C12CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
10007e88:	f7fd f886 	bl	10004f98 <HAL_RCC_GetPCLK1Freq>
10007e8c:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10007e8e:	e014      	b.n	10007eba <HAL_RCCEx_GetPeriphCLKFreq+0x66a>

        case RCC_I2C12CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007e90:	f107 030c 	add.w	r3, r7, #12
10007e94:	4618      	mov	r0, r3
10007e96:	f7fc ff77 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10007e9a:	697b      	ldr	r3, [r7, #20]
10007e9c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007e9e:	e00c      	b.n	10007eba <HAL_RCCEx_GetPeriphCLKFreq+0x66a>

        case RCC_I2C12CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10007ea0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007ea4:	699b      	ldr	r3, [r3, #24]
10007ea6:	f003 0303 	and.w	r3, r3, #3
10007eaa:	4ab8      	ldr	r2, [pc, #736]	; (1000818c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
10007eac:	fa22 f303 	lsr.w	r3, r2, r3
10007eb0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007eb2:	e002      	b.n	10007eba <HAL_RCCEx_GetPeriphCLKFreq+0x66a>

        case RCC_I2C12CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10007eb4:	4bb6      	ldr	r3, [pc, #728]	; (10008190 <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
10007eb6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007eb8:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_I2C12 */
10007eba:	f000 bf81 	b.w	10008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1570>


    case RCC_PERIPHCLK_I2C35:
    {
      clksource = __HAL_RCC_GET_I2C35_SOURCE();
10007ebe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007ec2:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	; 0x8c4
10007ec6:	f003 0307 	and.w	r3, r3, #7
10007eca:	633b      	str	r3, [r7, #48]	; 0x30
10007ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007ece:	2b03      	cmp	r3, #3
10007ed0:	f200 8778 	bhi.w	10008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1574>
10007ed4:	a201      	add	r2, pc, #4	; (adr r2, 10007edc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
10007ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10007eda:	bf00      	nop
10007edc:	10007eed 	.word	0x10007eed
10007ee0:	10007ef5 	.word	0x10007ef5
10007ee4:	10007f05 	.word	0x10007f05
10007ee8:	10007f19 	.word	0x10007f19

      switch (clksource)
      {
        case RCC_I2C35CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
10007eec:	f7fd f854 	bl	10004f98 <HAL_RCC_GetPCLK1Freq>
10007ef0:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10007ef2:	e014      	b.n	10007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>

        case RCC_I2C35CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007ef4:	f107 030c 	add.w	r3, r7, #12
10007ef8:	4618      	mov	r0, r3
10007efa:	f7fc ff45 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10007efe:	697b      	ldr	r3, [r7, #20]
10007f00:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007f02:	e00c      	b.n	10007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>

        case RCC_I2C35CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10007f04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007f08:	699b      	ldr	r3, [r3, #24]
10007f0a:	f003 0303 	and.w	r3, r3, #3
10007f0e:	4a9f      	ldr	r2, [pc, #636]	; (1000818c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
10007f10:	fa22 f303 	lsr.w	r3, r2, r3
10007f14:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007f16:	e002      	b.n	10007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>

        case RCC_I2C35CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10007f18:	4b9d      	ldr	r3, [pc, #628]	; (10008190 <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
10007f1a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007f1c:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_I2C35 */
10007f1e:	f000 bf51 	b.w	10008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1574>


    case RCC_PERIPHCLK_LPTIM1:
    {
      clksource = __HAL_RCC_GET_LPTIM1_SOURCE();
10007f22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007f26:	f8d3 3934 	ldr.w	r3, [r3, #2356]	; 0x934
10007f2a:	f003 0307 	and.w	r3, r3, #7
10007f2e:	633b      	str	r3, [r7, #48]	; 0x30
10007f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007f32:	2b05      	cmp	r3, #5
10007f34:	d82e      	bhi.n	10007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
10007f36:	a201      	add	r2, pc, #4	; (adr r2, 10007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
10007f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10007f3c:	10007f55 	.word	0x10007f55
10007f40:	10007f5d 	.word	0x10007f5d
10007f44:	10007f6d 	.word	0x10007f6d
10007f48:	10007f7d 	.word	0x10007f7d
10007f4c:	10007f85 	.word	0x10007f85
10007f50:	10007f8d 	.word	0x10007f8d

      switch (clksource)
      {
        case RCC_LPTIM1CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
10007f54:	f7fd f820 	bl	10004f98 <HAL_RCC_GetPCLK1Freq>
10007f58:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10007f5a:	e01e      	b.n	10007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007f5c:	f107 030c 	add.w	r3, r7, #12
10007f60:	4618      	mov	r0, r3
10007f62:	f7fc ff11 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10007f66:	68fb      	ldr	r3, [r7, #12]
10007f68:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007f6a:	e016      	b.n	10007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10007f6c:	f107 0318 	add.w	r3, r7, #24
10007f70:	4618      	mov	r0, r3
10007f72:	f7fc fe0f 	bl	10004b94 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10007f76:	69fb      	ldr	r3, [r7, #28]
10007f78:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007f7a:	e00e      	b.n	10007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_LSE:
          frequency = LSE_VALUE;
10007f7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10007f80:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007f82:	e00a      	b.n	10007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_LSI:
          frequency = LSI_VALUE;
10007f84:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10007f88:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007f8a:	e006      	b.n	10007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        case RCC_LPTIM1CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10007f8c:	f7fd f8bc 	bl	10005108 <RCC_GetCKPERFreq>
10007f90:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10007f92:	e002      	b.n	10007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>

        default:
          frequency = 0;
10007f94:	2300      	movs	r3, #0
10007f96:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007f98:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_LPTIM1 */
10007f9a:	f000 bf20 	b.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SPDIFRX:
    {
      clksource = __HAL_RCC_GET_SPDIFRX_SOURCE();
10007f9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007fa2:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
10007fa6:	f003 0303 	and.w	r3, r3, #3
10007faa:	633b      	str	r3, [r7, #48]	; 0x30
10007fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007fae:	2b02      	cmp	r3, #2
10007fb0:	d019      	beq.n	10007fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
10007fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007fb4:	2b02      	cmp	r3, #2
10007fb6:	d820      	bhi.n	10007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
10007fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007fba:	2b00      	cmp	r3, #0
10007fbc:	d003      	beq.n	10007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
10007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007fc0:	2b01      	cmp	r3, #1
10007fc2:	d008      	beq.n	10007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
10007fc4:	e019      	b.n	10007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>

      switch (clksource)
      {
        case RCC_SPDIFRXCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007fc6:	f107 030c 	add.w	r3, r7, #12
10007fca:	4618      	mov	r0, r3
10007fcc:	f7fc fedc 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10007fd0:	68fb      	ldr	r3, [r7, #12]
10007fd2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007fd4:	e014      	b.n	10008000 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>

        case RCC_SPDIFRXCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10007fd6:	f107 0318 	add.w	r3, r7, #24
10007fda:	4618      	mov	r0, r3
10007fdc:	f7fc fdda 	bl	10004b94 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10007fe0:	69fb      	ldr	r3, [r7, #28]
10007fe2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007fe4:	e00c      	b.n	10008000 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>

        case RCC_SPDIFRXCLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10007fe6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007fea:	699b      	ldr	r3, [r3, #24]
10007fec:	f003 0303 	and.w	r3, r3, #3
10007ff0:	4a66      	ldr	r2, [pc, #408]	; (1000818c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
10007ff2:	fa22 f303 	lsr.w	r3, r2, r3
10007ff6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007ff8:	e002      	b.n	10008000 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>

        default:
          frequency = 0;
10007ffa:	2300      	movs	r3, #0
10007ffc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10007ffe:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_SPDIFRX */
10008000:	f000 beed 	b.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_SPI23:
    {
      clksource = __HAL_RCC_GET_SPI23_SOURCE();
10008004:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008008:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	; 0x8dc
1000800c:	f003 0307 	and.w	r3, r3, #7
10008010:	633b      	str	r3, [r7, #48]	; 0x30
10008012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008014:	2b04      	cmp	r3, #4
10008016:	d82c      	bhi.n	10008072 <HAL_RCCEx_GetPeriphCLKFreq+0x822>
10008018:	a201      	add	r2, pc, #4	; (adr r2, 10008020 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>)
1000801a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000801e:	bf00      	nop
10008020:	10008035 	.word	0x10008035
10008024:	10008045 	.word	0x10008045
10008028:	10008065 	.word	0x10008065
1000802c:	1000806b 	.word	0x1000806b
10008030:	10008055 	.word	0x10008055

      switch (clksource)
      {
        case RCC_SPI23CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008034:	f107 030c 	add.w	r3, r7, #12
10008038:	4618      	mov	r0, r3
1000803a:	f7fc fea5 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
1000803e:	68fb      	ldr	r3, [r7, #12]
10008040:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008042:	e019      	b.n	10008078 <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        case RCC_SPI23CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008044:	f107 0318 	add.w	r3, r7, #24
10008048:	4618      	mov	r0, r3
1000804a:	f7fc fda3 	bl	10004b94 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
1000804e:	69fb      	ldr	r3, [r7, #28]
10008050:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008052:	e011      	b.n	10008078 <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        case RCC_SPI23CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008054:	f107 0318 	add.w	r3, r7, #24
10008058:	4618      	mov	r0, r3
1000805a:	f7fc fd9b 	bl	10004b94 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
1000805e:	6a3b      	ldr	r3, [r7, #32]
10008060:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008062:	e009      	b.n	10008078 <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        case RCC_SPI23CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10008064:	4b4b      	ldr	r3, [pc, #300]	; (10008194 <HAL_RCCEx_GetPeriphCLKFreq+0x944>)
10008066:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008068:	e006      	b.n	10008078 <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        case RCC_SPI23CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
1000806a:	f7fd f84d 	bl	10005108 <RCC_GetCKPERFreq>
1000806e:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008070:	e002      	b.n	10008078 <HAL_RCCEx_GetPeriphCLKFreq+0x828>

        default:
          frequency = 0;
10008072:	2300      	movs	r3, #0
10008074:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008076:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_SPI23 */
10008078:	f000 beb1 	b.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_UART24:
    {
      clksource = __HAL_RCC_GET_UART24_SOURCE();
1000807c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008080:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
10008084:	f003 0307 	and.w	r3, r3, #7
10008088:	633b      	str	r3, [r7, #48]	; 0x30
1000808a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000808c:	2b04      	cmp	r3, #4
1000808e:	d829      	bhi.n	100080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
10008090:	a201      	add	r2, pc, #4	; (adr r2, 10008098 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
10008092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008096:	bf00      	nop
10008098:	100080ad 	.word	0x100080ad
1000809c:	100080b5 	.word	0x100080b5
100080a0:	100080c5 	.word	0x100080c5
100080a4:	100080d9 	.word	0x100080d9
100080a8:	100080df 	.word	0x100080df

      switch (clksource)
      {
        case RCC_UART24CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
100080ac:	f7fc ff74 	bl	10004f98 <HAL_RCC_GetPCLK1Freq>
100080b0:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100080b2:	e01a      	b.n	100080ea <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        case RCC_UART24CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100080b4:	f107 030c 	add.w	r3, r7, #12
100080b8:	4618      	mov	r0, r3
100080ba:	f7fc fe65 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
100080be:	693b      	ldr	r3, [r7, #16]
100080c0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100080c2:	e012      	b.n	100080ea <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        case RCC_UART24CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100080c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100080c8:	699b      	ldr	r3, [r3, #24]
100080ca:	f003 0303 	and.w	r3, r3, #3
100080ce:	4a2f      	ldr	r2, [pc, #188]	; (1000818c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
100080d0:	fa22 f303 	lsr.w	r3, r2, r3
100080d4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100080d6:	e008      	b.n	100080ea <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        case RCC_UART24CLKSOURCE_CSI:
          frequency = CSI_VALUE;
100080d8:	4b2d      	ldr	r3, [pc, #180]	; (10008190 <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
100080da:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100080dc:	e005      	b.n	100080ea <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        case RCC_UART24CLKSOURCE_HSE:
          frequency = HSE_VALUE;
100080de:	4b2e      	ldr	r3, [pc, #184]	; (10008198 <HAL_RCCEx_GetPeriphCLKFreq+0x948>)
100080e0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100080e2:	e002      	b.n	100080ea <HAL_RCCEx_GetPeriphCLKFreq+0x89a>

        default:
          frequency = 0;
100080e4:	2300      	movs	r3, #0
100080e6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100080e8:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_UART24 */
100080ea:	f000 be78 	b.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_UART35:
    {
      clksource = __HAL_RCC_GET_UART35_SOURCE();
100080ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100080f2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
100080f6:	f003 0307 	and.w	r3, r3, #7
100080fa:	633b      	str	r3, [r7, #48]	; 0x30
100080fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100080fe:	2b04      	cmp	r3, #4
10008100:	d828      	bhi.n	10008154 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
10008102:	a201      	add	r2, pc, #4	; (adr r2, 10008108 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>)
10008104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008108:	1000811d 	.word	0x1000811d
1000810c:	10008125 	.word	0x10008125
10008110:	10008135 	.word	0x10008135
10008114:	10008149 	.word	0x10008149
10008118:	1000814f 	.word	0x1000814f

      switch (clksource)
      {
        case RCC_UART35CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
1000811c:	f7fc ff3c 	bl	10004f98 <HAL_RCC_GetPCLK1Freq>
10008120:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008122:	e01a      	b.n	1000815a <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        case RCC_UART35CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008124:	f107 030c 	add.w	r3, r7, #12
10008128:	4618      	mov	r0, r3
1000812a:	f7fc fe2d 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000812e:	693b      	ldr	r3, [r7, #16]
10008130:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008132:	e012      	b.n	1000815a <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        case RCC_UART35CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008134:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008138:	699b      	ldr	r3, [r3, #24]
1000813a:	f003 0303 	and.w	r3, r3, #3
1000813e:	4a13      	ldr	r2, [pc, #76]	; (1000818c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
10008140:	fa22 f303 	lsr.w	r3, r2, r3
10008144:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008146:	e008      	b.n	1000815a <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        case RCC_UART35CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008148:	4b11      	ldr	r3, [pc, #68]	; (10008190 <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
1000814a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000814c:	e005      	b.n	1000815a <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        case RCC_UART35CLKSOURCE_HSE:
          frequency = HSE_VALUE;
1000814e:	4b12      	ldr	r3, [pc, #72]	; (10008198 <HAL_RCCEx_GetPeriphCLKFreq+0x948>)
10008150:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008152:	e002      	b.n	1000815a <HAL_RCCEx_GetPeriphCLKFreq+0x90a>

        default:
          frequency = 0;
10008154:	2300      	movs	r3, #0
10008156:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008158:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_USART35 */
1000815a:	f000 be40 	b.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_UART78:
    {
      clksource = __HAL_RCC_GET_UART78_SOURCE();
1000815e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008162:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
10008166:	f003 0307 	and.w	r3, r3, #7
1000816a:	633b      	str	r3, [r7, #48]	; 0x30
1000816c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000816e:	2b04      	cmp	r3, #4
10008170:	d830      	bhi.n	100081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
10008172:	a201      	add	r2, pc, #4	; (adr r2, 10008178 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
10008174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008178:	1000819d 	.word	0x1000819d
1000817c:	100081a5 	.word	0x100081a5
10008180:	100081b5 	.word	0x100081b5
10008184:	100081c9 	.word	0x100081c9
10008188:	100081cf 	.word	0x100081cf
1000818c:	03d09000 	.word	0x03d09000
10008190:	003d0900 	.word	0x003d0900
10008194:	00bb8000 	.word	0x00bb8000
10008198:	016e3600 	.word	0x016e3600

      switch (clksource)
      {
        case RCC_UART78CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
1000819c:	f7fc fefc 	bl	10004f98 <HAL_RCC_GetPCLK1Freq>
100081a0:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100081a2:	e01a      	b.n	100081da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        case RCC_UART78CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100081a4:	f107 030c 	add.w	r3, r7, #12
100081a8:	4618      	mov	r0, r3
100081aa:	f7fc fded 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
100081ae:	693b      	ldr	r3, [r7, #16]
100081b0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100081b2:	e012      	b.n	100081da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        case RCC_UART78CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100081b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100081b8:	699b      	ldr	r3, [r3, #24]
100081ba:	f003 0303 	and.w	r3, r3, #3
100081be:	4ab9      	ldr	r2, [pc, #740]	; (100084a4 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>)
100081c0:	fa22 f303 	lsr.w	r3, r2, r3
100081c4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100081c6:	e008      	b.n	100081da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        case RCC_UART78CLKSOURCE_CSI:
          frequency = CSI_VALUE;
100081c8:	4bb7      	ldr	r3, [pc, #732]	; (100084a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc58>)
100081ca:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100081cc:	e005      	b.n	100081da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        case RCC_UART78CLKSOURCE_HSE:
          frequency = HSE_VALUE;
100081ce:	4bb7      	ldr	r3, [pc, #732]	; (100084ac <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
100081d0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100081d2:	e002      	b.n	100081da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>

        default:
          frequency = 0;
100081d4:	2300      	movs	r3, #0
100081d6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100081d8:	bf00      	nop
      }
    }
      break; /*RCC_PERIPHCLK_UART78 */
100081da:	f000 be00 	b.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_DFSDM1:
    {
      frequency = HAL_RCC_GetMLHCLKFreq();
100081de:	f7fc ff71 	bl	100050c4 <HAL_RCC_GetMLHCLKFreq>
100081e2:	6378      	str	r0, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_DFSDM1
100081e4:	f000 bdfb 	b.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

#if defined(FDCAN1)
    case RCC_PERIPHCLK_FDCAN:
    {
      clksource = __HAL_RCC_GET_FDCAN_SOURCE();
100081e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100081ec:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
100081f0:	f003 0303 	and.w	r3, r3, #3
100081f4:	633b      	str	r3, [r7, #48]	; 0x30
100081f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100081f8:	2b03      	cmp	r3, #3
100081fa:	d826      	bhi.n	1000824a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
100081fc:	a201      	add	r2, pc, #4	; (adr r2, 10008204 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>)
100081fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008202:	bf00      	nop
10008204:	10008215 	.word	0x10008215
10008208:	1000821b 	.word	0x1000821b
1000820c:	1000822b 	.word	0x1000822b
10008210:	1000823b 	.word	0x1000823b

      switch (clksource)
      {
        case RCC_FDCANCLKSOURCE_HSE:
          frequency = HSE_VALUE;
10008214:	4ba5      	ldr	r3, [pc, #660]	; (100084ac <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
10008216:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008218:	e01a      	b.n	10008250 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>

        case RCC_FDCANCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000821a:	f107 0318 	add.w	r3, r7, #24
1000821e:	4618      	mov	r0, r3
10008220:	f7fc fcb8 	bl	10004b94 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008224:	69fb      	ldr	r3, [r7, #28]
10008226:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008228:	e012      	b.n	10008250 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>

        case RCC_FDCANCLKSOURCE_PLL4_Q:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000822a:	f107 030c 	add.w	r3, r7, #12
1000822e:	4618      	mov	r0, r3
10008230:	f7fc fdaa 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008234:	693b      	ldr	r3, [r7, #16]
10008236:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008238:	e00a      	b.n	10008250 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>

        case RCC_FDCANCLKSOURCE_PLL4_R:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000823a:	f107 030c 	add.w	r3, r7, #12
1000823e:	4618      	mov	r0, r3
10008240:	f7fc fda2 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10008244:	697b      	ldr	r3, [r7, #20]
10008246:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008248:	e002      	b.n	10008250 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>

        default:
          frequency = 0;
1000824a:	2300      	movs	r3, #0
1000824c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000824e:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_FDCAN
10008250:	f000 bdc5 	b.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
#endif /*FDCAN1*/

    case RCC_PERIPHCLK_SAI1:
    {
      clksource = __HAL_RCC_GET_SAI1_SOURCE();
10008254:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008258:	f8d3 38c8 	ldr.w	r3, [r3, #2248]	; 0x8c8
1000825c:	f003 0307 	and.w	r3, r3, #7
10008260:	633b      	str	r3, [r7, #48]	; 0x30
10008262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008264:	2b04      	cmp	r3, #4
10008266:	d82c      	bhi.n	100082c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
10008268:	a201      	add	r2, pc, #4	; (adr r2, 10008270 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>)
1000826a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000826e:	bf00      	nop
10008270:	10008285 	.word	0x10008285
10008274:	10008295 	.word	0x10008295
10008278:	100082b5 	.word	0x100082b5
1000827c:	100082bb 	.word	0x100082bb
10008280:	100082a5 	.word	0x100082a5

      switch (clksource)
      {
        case RCC_SAI1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008284:	f107 030c 	add.w	r3, r7, #12
10008288:	4618      	mov	r0, r3
1000828a:	f7fc fd7d 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000828e:	693b      	ldr	r3, [r7, #16]
10008290:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008292:	e019      	b.n	100082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        case RCC_SAI1CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008294:	f107 0318 	add.w	r3, r7, #24
10008298:	4618      	mov	r0, r3
1000829a:	f7fc fc7b 	bl	10004b94 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
1000829e:	69fb      	ldr	r3, [r7, #28]
100082a0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100082a2:	e011      	b.n	100082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        case RCC_SAI1CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100082a4:	f107 0318 	add.w	r3, r7, #24
100082a8:	4618      	mov	r0, r3
100082aa:	f7fc fc73 	bl	10004b94 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
100082ae:	6a3b      	ldr	r3, [r7, #32]
100082b0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100082b2:	e009      	b.n	100082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        case RCC_SAI1CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
100082b4:	4b7e      	ldr	r3, [pc, #504]	; (100084b0 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>)
100082b6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100082b8:	e006      	b.n	100082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        case RCC_SAI1CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
100082ba:	f7fc ff25 	bl	10005108 <RCC_GetCKPERFreq>
100082be:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100082c0:	e002      	b.n	100082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>

        default:
          frequency = 0;
100082c2:	2300      	movs	r3, #0
100082c4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100082c6:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SAI1
100082c8:	f000 bd89 	b.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SAI2:
    {
      clksource = __HAL_RCC_GET_SAI2_SOURCE();
100082cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100082d0:	f8d3 38cc 	ldr.w	r3, [r3, #2252]	; 0x8cc
100082d4:	f003 0307 	and.w	r3, r3, #7
100082d8:	633b      	str	r3, [r7, #48]	; 0x30
100082da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100082dc:	2b05      	cmp	r3, #5
100082de:	d831      	bhi.n	10008344 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
100082e0:	a201      	add	r2, pc, #4	; (adr r2, 100082e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
100082e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100082e6:	bf00      	nop
100082e8:	10008301 	.word	0x10008301
100082ec:	10008311 	.word	0x10008311
100082f0:	10008331 	.word	0x10008331
100082f4:	10008337 	.word	0x10008337
100082f8:	1000833f 	.word	0x1000833f
100082fc:	10008321 	.word	0x10008321

      switch (clksource)
      {
        case RCC_SAI2CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008300:	f107 030c 	add.w	r3, r7, #12
10008304:	4618      	mov	r0, r3
10008306:	f7fc fd3f 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000830a:	693b      	ldr	r3, [r7, #16]
1000830c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000830e:	e01c      	b.n	1000834a <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008310:	f107 0318 	add.w	r3, r7, #24
10008314:	4618      	mov	r0, r3
10008316:	f7fc fc3d 	bl	10004b94 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
1000831a:	69fb      	ldr	r3, [r7, #28]
1000831c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000831e:	e014      	b.n	1000834a <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008320:	f107 0318 	add.w	r3, r7, #24
10008324:	4618      	mov	r0, r3
10008326:	f7fc fc35 	bl	10004b94 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
1000832a:	6a3b      	ldr	r3, [r7, #32]
1000832c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000832e:	e00c      	b.n	1000834a <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10008330:	4b5f      	ldr	r3, [pc, #380]	; (100084b0 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>)
10008332:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008334:	e009      	b.n	1000834a <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008336:	f7fc fee7 	bl	10005108 <RCC_GetCKPERFreq>
1000833a:	6378      	str	r0, [r7, #52]	; 0x34
          break;
1000833c:	e005      	b.n	1000834a <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        case RCC_SAI2CLKSOURCE_SPDIF:
          frequency = 0; //SAI2 manage this SPDIF_CKSYMB_VALUE
1000833e:	2300      	movs	r3, #0
10008340:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008342:	e002      	b.n	1000834a <HAL_RCCEx_GetPeriphCLKFreq+0xafa>

        default:
          frequency = 0;
10008344:	2300      	movs	r3, #0
10008346:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008348:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SAI2
1000834a:	f000 bd48 	b.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SAI3:
    {
      clksource = __HAL_RCC_GET_SAI3_SOURCE();
1000834e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008352:	f8d3 38d0 	ldr.w	r3, [r3, #2256]	; 0x8d0
10008356:	f003 0307 	and.w	r3, r3, #7
1000835a:	633b      	str	r3, [r7, #48]	; 0x30
1000835c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000835e:	2b04      	cmp	r3, #4
10008360:	d82b      	bhi.n	100083ba <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
10008362:	a201      	add	r2, pc, #4	; (adr r2, 10008368 <HAL_RCCEx_GetPeriphCLKFreq+0xb18>)
10008364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008368:	1000837d 	.word	0x1000837d
1000836c:	1000838d 	.word	0x1000838d
10008370:	100083ad 	.word	0x100083ad
10008374:	100083b3 	.word	0x100083b3
10008378:	1000839d 	.word	0x1000839d

      switch (clksource)
      {
        case RCC_SAI3CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000837c:	f107 030c 	add.w	r3, r7, #12
10008380:	4618      	mov	r0, r3
10008382:	f7fc fd01 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10008386:	693b      	ldr	r3, [r7, #16]
10008388:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000838a:	e019      	b.n	100083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        case RCC_SAI3CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000838c:	f107 0318 	add.w	r3, r7, #24
10008390:	4618      	mov	r0, r3
10008392:	f7fc fbff 	bl	10004b94 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008396:	69fb      	ldr	r3, [r7, #28]
10008398:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000839a:	e011      	b.n	100083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        case RCC_SAI3CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000839c:	f107 0318 	add.w	r3, r7, #24
100083a0:	4618      	mov	r0, r3
100083a2:	f7fc fbf7 	bl	10004b94 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
100083a6:	6a3b      	ldr	r3, [r7, #32]
100083a8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100083aa:	e009      	b.n	100083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        case RCC_SAI3CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
100083ac:	4b40      	ldr	r3, [pc, #256]	; (100084b0 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>)
100083ae:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100083b0:	e006      	b.n	100083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        case RCC_SAI2CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
100083b2:	f7fc fea9 	bl	10005108 <RCC_GetCKPERFreq>
100083b6:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100083b8:	e002      	b.n	100083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>

        default:
          frequency = 0;
100083ba:	2300      	movs	r3, #0
100083bc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100083be:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SAI3
100083c0:	f000 bd0d 	b.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SPI1:
    {
      clksource = __HAL_RCC_GET_SPI1_SOURCE();
100083c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100083c8:	f8d3 38d8 	ldr.w	r3, [r3, #2264]	; 0x8d8
100083cc:	f003 0307 	and.w	r3, r3, #7
100083d0:	633b      	str	r3, [r7, #48]	; 0x30
100083d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100083d4:	2b04      	cmp	r3, #4
100083d6:	d82c      	bhi.n	10008432 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
100083d8:	a201      	add	r2, pc, #4	; (adr r2, 100083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>)
100083da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100083de:	bf00      	nop
100083e0:	100083f5 	.word	0x100083f5
100083e4:	10008405 	.word	0x10008405
100083e8:	10008425 	.word	0x10008425
100083ec:	1000842b 	.word	0x1000842b
100083f0:	10008415 	.word	0x10008415

      switch (clksource)
      {
        case RCC_SPI1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100083f4:	f107 030c 	add.w	r3, r7, #12
100083f8:	4618      	mov	r0, r3
100083fa:	f7fc fcc5 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
100083fe:	693b      	ldr	r3, [r7, #16]
10008400:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008402:	e019      	b.n	10008438 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        case RCC_SPI1CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008404:	f107 0318 	add.w	r3, r7, #24
10008408:	4618      	mov	r0, r3
1000840a:	f7fc fbc3 	bl	10004b94 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
1000840e:	69fb      	ldr	r3, [r7, #28]
10008410:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008412:	e011      	b.n	10008438 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        case RCC_SPI1CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008414:	f107 0318 	add.w	r3, r7, #24
10008418:	4618      	mov	r0, r3
1000841a:	f7fc fbbb 	bl	10004b94 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
1000841e:	6a3b      	ldr	r3, [r7, #32]
10008420:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008422:	e009      	b.n	10008438 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        case RCC_SPI1CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10008424:	4b22      	ldr	r3, [pc, #136]	; (100084b0 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>)
10008426:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008428:	e006      	b.n	10008438 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        case RCC_SPI1CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
1000842a:	f7fc fe6d 	bl	10005108 <RCC_GetCKPERFreq>
1000842e:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008430:	e002      	b.n	10008438 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>

        default:
          frequency = 0;
10008432:	2300      	movs	r3, #0
10008434:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008436:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SPI1
10008438:	f000 bcd1 	b.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SPI45:
    {
      clksource = __HAL_RCC_GET_SPI45_SOURCE();
1000843c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008440:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
10008444:	f003 0307 	and.w	r3, r3, #7
10008448:	633b      	str	r3, [r7, #48]	; 0x30
1000844a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000844c:	2b04      	cmp	r3, #4
1000844e:	d831      	bhi.n	100084b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
10008450:	a201      	add	r2, pc, #4	; (adr r2, 10008458 <HAL_RCCEx_GetPeriphCLKFreq+0xc08>)
10008452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008456:	bf00      	nop
10008458:	1000846d 	.word	0x1000846d
1000845c:	10008475 	.word	0x10008475
10008460:	10008485 	.word	0x10008485
10008464:	10008499 	.word	0x10008499
10008468:	1000849f 	.word	0x1000849f

      switch (clksource)
      {
        case RCC_SPI45CLKSOURCE_PCLK2:
          frequency = HAL_RCC_GetPCLK2Freq();
1000846c:	f7fc fdaf 	bl	10004fce <HAL_RCC_GetPCLK2Freq>
10008470:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008472:	e022      	b.n	100084ba <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>

        case RCC_SPI45CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008474:	f107 030c 	add.w	r3, r7, #12
10008478:	4618      	mov	r0, r3
1000847a:	f7fc fc85 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000847e:	693b      	ldr	r3, [r7, #16]
10008480:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008482:	e01a      	b.n	100084ba <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>

        case RCC_SPI45CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008484:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008488:	699b      	ldr	r3, [r3, #24]
1000848a:	f003 0303 	and.w	r3, r3, #3
1000848e:	4a05      	ldr	r2, [pc, #20]	; (100084a4 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>)
10008490:	fa22 f303 	lsr.w	r3, r2, r3
10008494:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008496:	e010      	b.n	100084ba <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>

        case RCC_SPI45CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008498:	4b03      	ldr	r3, [pc, #12]	; (100084a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc58>)
1000849a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000849c:	e00d      	b.n	100084ba <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>

        case RCC_SPI45CLKSOURCE_HSE:
          frequency = HSE_VALUE;
1000849e:	4b03      	ldr	r3, [pc, #12]	; (100084ac <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
100084a0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100084a2:	e00a      	b.n	100084ba <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
100084a4:	03d09000 	.word	0x03d09000
100084a8:	003d0900 	.word	0x003d0900
100084ac:	016e3600 	.word	0x016e3600
100084b0:	00bb8000 	.word	0x00bb8000

        default:
          frequency = 0;
100084b4:	2300      	movs	r3, #0
100084b6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100084b8:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_SPI45 */
100084ba:	f000 bc90 	b.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_USART6:
    {
      clksource = __HAL_RCC_GET_USART6_SOURCE();
100084be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100084c2:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
100084c6:	f003 0307 	and.w	r3, r3, #7
100084ca:	633b      	str	r3, [r7, #48]	; 0x30
100084cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100084ce:	2b04      	cmp	r3, #4
100084d0:	d828      	bhi.n	10008524 <HAL_RCCEx_GetPeriphCLKFreq+0xcd4>
100084d2:	a201      	add	r2, pc, #4	; (adr r2, 100084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xc88>)
100084d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100084d8:	100084ed 	.word	0x100084ed
100084dc:	100084f5 	.word	0x100084f5
100084e0:	10008505 	.word	0x10008505
100084e4:	10008519 	.word	0x10008519
100084e8:	1000851f 	.word	0x1000851f

      switch (clksource)
      {
        case RCC_USART6CLKSOURCE_PCLK2:
          frequency = HAL_RCC_GetPCLK2Freq();
100084ec:	f7fc fd6f 	bl	10004fce <HAL_RCC_GetPCLK2Freq>
100084f0:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100084f2:	e01a      	b.n	1000852a <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        case RCC_USART6CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100084f4:	f107 030c 	add.w	r3, r7, #12
100084f8:	4618      	mov	r0, r3
100084fa:	f7fc fc45 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
100084fe:	693b      	ldr	r3, [r7, #16]
10008500:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008502:	e012      	b.n	1000852a <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        case RCC_USART6CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008504:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008508:	699b      	ldr	r3, [r3, #24]
1000850a:	f003 0303 	and.w	r3, r3, #3
1000850e:	4aa8      	ldr	r2, [pc, #672]	; (100087b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
10008510:	fa22 f303 	lsr.w	r3, r2, r3
10008514:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008516:	e008      	b.n	1000852a <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        case RCC_USART6CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008518:	4ba6      	ldr	r3, [pc, #664]	; (100087b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>)
1000851a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000851c:	e005      	b.n	1000852a <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        case RCC_USART6CLKSOURCE_HSE:
          frequency = HSE_VALUE;
1000851e:	4ba6      	ldr	r3, [pc, #664]	; (100087b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf68>)
10008520:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008522:	e002      	b.n	1000852a <HAL_RCCEx_GetPeriphCLKFreq+0xcda>

        default:
          frequency = 0;
10008524:	2300      	movs	r3, #0
10008526:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008528:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_USART6
1000852a:	f000 bc58 	b.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_LPTIM23:
    {
      clksource = __HAL_RCC_GET_LPTIM23_SOURCE();
1000852e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008532:	f8d3 3930 	ldr.w	r3, [r3, #2352]	; 0x930
10008536:	f003 0307 	and.w	r3, r3, #7
1000853a:	633b      	str	r3, [r7, #48]	; 0x30
1000853c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000853e:	2b04      	cmp	r3, #4
10008540:	d824      	bhi.n	1000858c <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>
10008542:	a201      	add	r2, pc, #4	; (adr r2, 10008548 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>)
10008544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008548:	1000855d 	.word	0x1000855d
1000854c:	10008565 	.word	0x10008565
10008550:	10008575 	.word	0x10008575
10008554:	1000857d 	.word	0x1000857d
10008558:	10008585 	.word	0x10008585

      switch (clksource)
      {
        case RCC_LPTIM23CLKSOURCE_PCLK3:
          frequency = HAL_RCC_GetPCLK3Freq();
1000855c:	f7fc fd52 	bl	10005004 <HAL_RCC_GetPCLK3Freq>
10008560:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008562:	e016      	b.n	10008592 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        case RCC_LPTIM23CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008564:	f107 030c 	add.w	r3, r7, #12
10008568:	4618      	mov	r0, r3
1000856a:	f7fc fc0d 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000856e:	693b      	ldr	r3, [r7, #16]
10008570:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008572:	e00e      	b.n	10008592 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        case RCC_LPTIM23CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008574:	f7fc fdc8 	bl	10005108 <RCC_GetCKPERFreq>
10008578:	6378      	str	r0, [r7, #52]	; 0x34
          break;
1000857a:	e00a      	b.n	10008592 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        case RCC_LPTIM23CLKSOURCE_LSE:
          frequency = LSE_VALUE;
1000857c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10008580:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008582:	e006      	b.n	10008592 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        case RCC_LPTIM23CLKSOURCE_LSI:
          frequency = LSI_VALUE;
10008584:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10008588:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000858a:	e002      	b.n	10008592 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>

        default:
          frequency = 0;
1000858c:	2300      	movs	r3, #0
1000858e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008590:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_LPTIM23 */
10008592:	f000 bc24 	b.w	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_LPTIM45:
    {
      clksource = __HAL_RCC_GET_LPTIM45_SOURCE();
10008596:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000859a:	f8d3 392c 	ldr.w	r3, [r3, #2348]	; 0x92c
1000859e:	f003 0307 	and.w	r3, r3, #7
100085a2:	633b      	str	r3, [r7, #48]	; 0x30
100085a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100085a6:	2b05      	cmp	r3, #5
100085a8:	d82e      	bhi.n	10008608 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>
100085aa:	a201      	add	r2, pc, #4	; (adr r2, 100085b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
100085ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100085b0:	100085c9 	.word	0x100085c9
100085b4:	100085d1 	.word	0x100085d1
100085b8:	100085e1 	.word	0x100085e1
100085bc:	100085f1 	.word	0x100085f1
100085c0:	100085f9 	.word	0x100085f9
100085c4:	10008601 	.word	0x10008601

      switch (clksource)
      {
        case RCC_LPTIM45CLKSOURCE_PCLK3:
          frequency = HAL_RCC_GetPCLK3Freq();
100085c8:	f7fc fd1c 	bl	10005004 <HAL_RCC_GetPCLK3Freq>
100085cc:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100085ce:	e01e      	b.n	1000860e <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100085d0:	f107 030c 	add.w	r3, r7, #12
100085d4:	4618      	mov	r0, r3
100085d6:	f7fc fbd7 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
100085da:	68fb      	ldr	r3, [r7, #12]
100085dc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100085de:	e016      	b.n	1000860e <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100085e0:	f107 0318 	add.w	r3, r7, #24
100085e4:	4618      	mov	r0, r3
100085e6:	f7fc fad5 	bl	10004b94 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
100085ea:	69fb      	ldr	r3, [r7, #28]
100085ec:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100085ee:	e00e      	b.n	1000860e <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_LSE:
          frequency = LSE_VALUE;
100085f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
100085f4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100085f6:	e00a      	b.n	1000860e <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_LSI:
          frequency = LSI_VALUE;
100085f8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
100085fc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100085fe:	e006      	b.n	1000860e <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        case RCC_LPTIM45CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008600:	f7fc fd82 	bl	10005108 <RCC_GetCKPERFreq>
10008604:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008606:	e002      	b.n	1000860e <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>

        default:
          frequency = 0;
10008608:	2300      	movs	r3, #0
1000860a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000860c:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_LPTIM45 */
1000860e:	e3e6      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SAI4:
    {
      clksource = __HAL_RCC_GET_SAI4_SOURCE();
10008610:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008614:	f8d3 38d4 	ldr.w	r3, [r3, #2260]	; 0x8d4
10008618:	f003 0307 	and.w	r3, r3, #7
1000861c:	633b      	str	r3, [r7, #48]	; 0x30
1000861e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008620:	2b04      	cmp	r3, #4
10008622:	d82c      	bhi.n	1000867e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
10008624:	a201      	add	r2, pc, #4	; (adr r2, 1000862c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>)
10008626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000862a:	bf00      	nop
1000862c:	10008641 	.word	0x10008641
10008630:	10008651 	.word	0x10008651
10008634:	10008671 	.word	0x10008671
10008638:	10008677 	.word	0x10008677
1000863c:	10008661 	.word	0x10008661

      switch (clksource)
      {
        case RCC_SAI4CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008640:	f107 030c 	add.w	r3, r7, #12
10008644:	4618      	mov	r0, r3
10008646:	f7fc fb9f 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000864a:	693b      	ldr	r3, [r7, #16]
1000864c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000864e:	e019      	b.n	10008684 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        case RCC_SAI4CLKSOURCE_PLL3_Q:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008650:	f107 0318 	add.w	r3, r7, #24
10008654:	4618      	mov	r0, r3
10008656:	f7fc fa9d 	bl	10004b94 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
1000865a:	69fb      	ldr	r3, [r7, #28]
1000865c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000865e:	e011      	b.n	10008684 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        case RCC_SAI4CLKSOURCE_PLL3_R:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008660:	f107 0318 	add.w	r3, r7, #24
10008664:	4618      	mov	r0, r3
10008666:	f7fc fa95 	bl	10004b94 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
1000866a:	6a3b      	ldr	r3, [r7, #32]
1000866c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000866e:	e009      	b.n	10008684 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        case RCC_SAI4CLKSOURCE_I2SCKIN:
          frequency = EXTERNAL_CLOCK_VALUE;
10008670:	4b52      	ldr	r3, [pc, #328]	; (100087bc <HAL_RCCEx_GetPeriphCLKFreq+0xf6c>)
10008672:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008674:	e006      	b.n	10008684 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        case RCC_SAI4CLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008676:	f7fc fd47 	bl	10005108 <RCC_GetCKPERFreq>
1000867a:	6378      	str	r0, [r7, #52]	; 0x34
          break;
1000867c:	e002      	b.n	10008684 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>

        default:
          frequency = 0;
1000867e:	2300      	movs	r3, #0
10008680:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008682:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SAI4
10008684:	e3ab      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_TEMP:
    {
      frequency = LSE_VALUE;
10008686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
1000868a:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_TEMP
1000868c:	e3a7      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


#if defined(DSI)
    case RCC_PERIPHCLK_DSI:
    {
      clksource = __HAL_RCC_GET_DSI_SOURCE();
1000868e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008692:	f8d3 3924 	ldr.w	r3, [r3, #2340]	; 0x924
10008696:	f003 0301 	and.w	r3, r3, #1
1000869a:	633b      	str	r3, [r7, #48]	; 0x30
1000869c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000869e:	2b00      	cmp	r3, #0
100086a0:	d003      	beq.n	100086aa <HAL_RCCEx_GetPeriphCLKFreq+0xe5a>
100086a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100086a4:	2b01      	cmp	r3, #1
100086a6:	d003      	beq.n	100086b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe60>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
          frequency = pll4_clocks.PLL4_P_Frequency;
          break;
      }
    }
    break;//RCC_PERIPHCLK_DSI
100086a8:	e399      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
          frequency = 0;
100086aa:	2300      	movs	r3, #0
100086ac:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100086ae:	e007      	b.n	100086c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100086b0:	f107 030c 	add.w	r3, r7, #12
100086b4:	4618      	mov	r0, r3
100086b6:	f7fc fb67 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
100086ba:	68fb      	ldr	r3, [r7, #12]
100086bc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100086be:	bf00      	nop
    break;//RCC_PERIPHCLK_DSI
100086c0:	e38d      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
#endif /*DSI*/

    case RCC_PERIPHCLK_LTDC:
    {
      HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100086c2:	f107 030c 	add.w	r3, r7, #12
100086c6:	4618      	mov	r0, r3
100086c8:	f7fc fb5e 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
      frequency = pll4_clocks.PLL4_Q_Frequency;
100086cc:	693b      	ldr	r3, [r7, #16]
100086ce:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_LTDC
100086d0:	e385      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_USBPHY:
    {
      clksource = __HAL_RCC_GET_USBPHY_SOURCE();
100086d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100086d6:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
100086da:	f003 0303 	and.w	r3, r3, #3
100086de:	633b      	str	r3, [r7, #48]	; 0x30
100086e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100086e2:	2b02      	cmp	r3, #2
100086e4:	d014      	beq.n	10008710 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
100086e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100086e8:	2b02      	cmp	r3, #2
100086ea:	d814      	bhi.n	10008716 <HAL_RCCEx_GetPeriphCLKFreq+0xec6>
100086ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100086ee:	2b00      	cmp	r3, #0
100086f0:	d003      	beq.n	100086fa <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
100086f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100086f4:	2b01      	cmp	r3, #1
100086f6:	d003      	beq.n	10008700 <HAL_RCCEx_GetPeriphCLKFreq+0xeb0>
100086f8:	e00d      	b.n	10008716 <HAL_RCCEx_GetPeriphCLKFreq+0xec6>

      switch (clksource)
      {
        case RCC_USBPHYCLKSOURCE_HSE:
          frequency = HSE_VALUE;
100086fa:	4b2f      	ldr	r3, [pc, #188]	; (100087b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf68>)
100086fc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100086fe:	e00d      	b.n	1000871c <HAL_RCCEx_GetPeriphCLKFreq+0xecc>

        case RCC_USBPHYCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008700:	f107 030c 	add.w	r3, r7, #12
10008704:	4618      	mov	r0, r3
10008706:	f7fc fb3f 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
1000870a:	697b      	ldr	r3, [r7, #20]
1000870c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000870e:	e005      	b.n	1000871c <HAL_RCCEx_GetPeriphCLKFreq+0xecc>

        case RCC_USBPHYCLKSOURCE_HSE2:
          frequency = (HSE_VALUE / 2UL);
10008710:	4b2b      	ldr	r3, [pc, #172]	; (100087c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>)
10008712:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008714:	e002      	b.n	1000871c <HAL_RCCEx_GetPeriphCLKFreq+0xecc>

        default:
          frequency = 0;
10008716:	2300      	movs	r3, #0
10008718:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000871a:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_USBPHY
1000871c:	e35f      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_IWDG2:
    {
      frequency = LSI_VALUE;
1000871e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10008722:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_IWDG2
10008724:	e35b      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_DDRPHYC:
    {
      HAL_RCC_GetPLL2ClockFreq(&pll2_clocks);
10008726:	f107 0324 	add.w	r3, r7, #36	; 0x24
1000872a:	4618      	mov	r0, r3
1000872c:	f7fc f946 	bl	100049bc <HAL_RCC_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
10008730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10008732:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_DDRPHYC
10008734:	e353      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_RTC:
    {
      clksource = __HAL_RCC_GET_RTC_SOURCE();
10008736:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000873a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000873e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
10008742:	633b      	str	r3, [r7, #48]	; 0x30
10008744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008746:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
1000874a:	d020      	beq.n	1000878e <HAL_RCCEx_GetPeriphCLKFreq+0xf3e>
1000874c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000874e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
10008752:	f200 8339 	bhi.w	10008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1578>
10008756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008758:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
1000875c:	d013      	beq.n	10008786 <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
1000875e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008760:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
10008764:	f200 8330 	bhi.w	10008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1578>
10008768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000876a:	2b00      	cmp	r3, #0
1000876c:	d004      	beq.n	10008778 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
1000876e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
10008774:	d003      	beq.n	1000877e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        case RCC_RTCCLKSOURCE_HSE_DIV:
          frequency = (HSE_VALUE / __HAL_RCC_GET_RTC_HSEDIV());
          break;
      }
    }
    break;//RCC_PERIPHCLK_RTC
10008776:	e327      	b.n	10008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1578>
          frequency = 0;
10008778:	2300      	movs	r3, #0
1000877a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000877c:	e012      	b.n	100087a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>
          frequency = LSE_VALUE;
1000877e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10008782:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008784:	e00e      	b.n	100087a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>
          frequency = LSI_VALUE;
10008786:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
1000878a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000878c:	e00a      	b.n	100087a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>
          frequency = (HSE_VALUE / __HAL_RCC_GET_RTC_HSEDIV());
1000878e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10008794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10008798:	3301      	adds	r3, #1
1000879a:	4a07      	ldr	r2, [pc, #28]	; (100087b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf68>)
1000879c:	fbb2 f3f3 	udiv	r3, r2, r3
100087a0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100087a2:	bf00      	nop
    break;//RCC_PERIPHCLK_RTC
100087a4:	e310      	b.n	10008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1578>


    case RCC_PERIPHCLK_IWDG1:
    {
      frequency = LSI_VALUE;
100087a6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
100087aa:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_IWDG1
100087ac:	e317      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
100087ae:	bf00      	nop
100087b0:	03d09000 	.word	0x03d09000
100087b4:	003d0900 	.word	0x003d0900
100087b8:	016e3600 	.word	0x016e3600
100087bc:	00bb8000 	.word	0x00bb8000
100087c0:	00b71b00 	.word	0x00b71b00


    case RCC_PERIPHCLK_I2C46:
    {
      clksource = __HAL_RCC_GET_I2C46_SOURCE();
100087c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100087c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
100087cc:	f003 0307 	and.w	r3, r3, #7
100087d0:	633b      	str	r3, [r7, #48]	; 0x30
100087d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100087d4:	2b03      	cmp	r3, #3
100087d6:	d824      	bhi.n	10008822 <HAL_RCCEx_GetPeriphCLKFreq+0xfd2>
100087d8:	a201      	add	r2, pc, #4	; (adr r2, 100087e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf90>)
100087da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100087de:	bf00      	nop
100087e0:	100087f1 	.word	0x100087f1
100087e4:	100087f9 	.word	0x100087f9
100087e8:	10008809 	.word	0x10008809
100087ec:	1000881d 	.word	0x1000881d

      switch (clksource)
      {
        case RCC_I2C46CLKSOURCE_PCLK5:
          frequency = HAL_RCC_GetPCLK5Freq();
100087f0:	f7fc fc23 	bl	1000503a <HAL_RCC_GetPCLK5Freq>
100087f4:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100087f6:	e017      	b.n	10008828 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>

        case RCC_I2C46CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100087f8:	f107 0318 	add.w	r3, r7, #24
100087fc:	4618      	mov	r0, r3
100087fe:	f7fc f9c9 	bl	10004b94 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008802:	69fb      	ldr	r3, [r7, #28]
10008804:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008806:	e00f      	b.n	10008828 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>

        case RCC_I2C46CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008808:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000880c:	699b      	ldr	r3, [r3, #24]
1000880e:	f003 0303 	and.w	r3, r3, #3
10008812:	4ab3      	ldr	r2, [pc, #716]	; (10008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1290>)
10008814:	fa22 f303 	lsr.w	r3, r2, r3
10008818:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000881a:	e005      	b.n	10008828 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>

        case RCC_I2C46CLKSOURCE_CSI:
          frequency = CSI_VALUE;
1000881c:	4bb1      	ldr	r3, [pc, #708]	; (10008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
1000881e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008820:	e002      	b.n	10008828 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>

        default:
          frequency = 0;
10008822:	2300      	movs	r3, #0
10008824:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008826:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_I2C46 */
10008828:	e2d9      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SPI6:
    {
      clksource = __HAL_RCC_GET_SPI6_SOURCE();
1000882a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000882e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10008832:	f003 0307 	and.w	r3, r3, #7
10008836:	633b      	str	r3, [r7, #48]	; 0x30
10008838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000883a:	2b05      	cmp	r3, #5
1000883c:	d832      	bhi.n	100088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
1000883e:	a201      	add	r2, pc, #4	; (adr r2, 10008844 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
10008840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008844:	1000885d 	.word	0x1000885d
10008848:	10008865 	.word	0x10008865
1000884c:	10008875 	.word	0x10008875
10008850:	10008889 	.word	0x10008889
10008854:	1000888f 	.word	0x1000888f
10008858:	10008895 	.word	0x10008895

      switch (clksource)
      {
        case RCC_SPI6CLKSOURCE_PCLK5:
          frequency = HAL_RCC_GetPCLK5Freq();
1000885c:	f7fc fbed 	bl	1000503a <HAL_RCC_GetPCLK5Freq>
10008860:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008862:	e022      	b.n	100088aa <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008864:	f107 030c 	add.w	r3, r7, #12
10008868:	4618      	mov	r0, r3
1000886a:	f7fc fa8d 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000886e:	693b      	ldr	r3, [r7, #16]
10008870:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008872:	e01a      	b.n	100088aa <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008874:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008878:	699b      	ldr	r3, [r3, #24]
1000887a:	f003 0303 	and.w	r3, r3, #3
1000887e:	4a98      	ldr	r2, [pc, #608]	; (10008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1290>)
10008880:	fa22 f303 	lsr.w	r3, r2, r3
10008884:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008886:	e010      	b.n	100088aa <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008888:	4b96      	ldr	r3, [pc, #600]	; (10008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
1000888a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000888c:	e00d      	b.n	100088aa <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_HSE:
          frequency = HSE_VALUE;
1000888e:	4b96      	ldr	r3, [pc, #600]	; (10008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
10008890:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008892:	e00a      	b.n	100088aa <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        case RCC_SPI6CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008894:	f107 0318 	add.w	r3, r7, #24
10008898:	4618      	mov	r0, r3
1000889a:	f7fc f97b 	bl	10004b94 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
1000889e:	69fb      	ldr	r3, [r7, #28]
100088a0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100088a2:	e002      	b.n	100088aa <HAL_RCCEx_GetPeriphCLKFreq+0x105a>

        default:
          frequency = 0;
100088a4:	2300      	movs	r3, #0
100088a6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100088a8:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SPI6
100088aa:	e298      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_USART1:
    {
      clksource = __HAL_RCC_GET_USART1_SOURCE();
100088ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100088b0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
100088b4:	f003 0307 	and.w	r3, r3, #7
100088b8:	633b      	str	r3, [r7, #48]	; 0x30
100088ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100088bc:	2b05      	cmp	r3, #5
100088be:	d833      	bhi.n	10008928 <HAL_RCCEx_GetPeriphCLKFreq+0x10d8>
100088c0:	a201      	add	r2, pc, #4	; (adr r2, 100088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1078>)
100088c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100088c6:	bf00      	nop
100088c8:	100088e1 	.word	0x100088e1
100088cc:	100088e9 	.word	0x100088e9
100088d0:	100088f9 	.word	0x100088f9
100088d4:	1000890d 	.word	0x1000890d
100088d8:	10008913 	.word	0x10008913
100088dc:	10008923 	.word	0x10008923

      switch (clksource)
      {
        case RCC_USART1CLKSOURCE_PCLK5:
          frequency = HAL_RCC_GetPCLK5Freq();
100088e0:	f7fc fbab 	bl	1000503a <HAL_RCC_GetPCLK5Freq>
100088e4:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100088e6:	e022      	b.n	1000892e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100088e8:	f107 0318 	add.w	r3, r7, #24
100088ec:	4618      	mov	r0, r3
100088ee:	f7fc f951 	bl	10004b94 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
100088f2:	69fb      	ldr	r3, [r7, #28]
100088f4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100088f6:	e01a      	b.n	1000892e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100088f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100088fc:	699b      	ldr	r3, [r3, #24]
100088fe:	f003 0303 	and.w	r3, r3, #3
10008902:	4a77      	ldr	r2, [pc, #476]	; (10008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1290>)
10008904:	fa22 f303 	lsr.w	r3, r2, r3
10008908:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000890a:	e010      	b.n	1000892e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_CSI:
          frequency = CSI_VALUE;
1000890c:	4b75      	ldr	r3, [pc, #468]	; (10008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
1000890e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008910:	e00d      	b.n	1000892e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008912:	f107 030c 	add.w	r3, r7, #12
10008916:	4618      	mov	r0, r3
10008918:	f7fc fa36 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000891c:	693b      	ldr	r3, [r7, #16]
1000891e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008920:	e005      	b.n	1000892e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        case RCC_USART1CLKSOURCE_HSE:
          frequency = HSE_VALUE;
10008922:	4b71      	ldr	r3, [pc, #452]	; (10008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
10008924:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008926:	e002      	b.n	1000892e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>

        default:
          frequency = 0;
10008928:	2300      	movs	r3, #0
1000892a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000892c:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_USART1
1000892e:	e256      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_STGEN:
    {
      clksource = __HAL_RCC_GET_STGEN_SOURCE();
10008930:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008934:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
10008938:	f003 0303 	and.w	r3, r3, #3
1000893c:	633b      	str	r3, [r7, #48]	; 0x30
1000893e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008940:	2b00      	cmp	r3, #0
10008942:	d003      	beq.n	1000894c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
10008944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008946:	2b01      	cmp	r3, #1
10008948:	d00a      	beq.n	10008960 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
1000894a:	e00c      	b.n	10008966 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>

      switch (clksource)
      {
        case RCC_STGENCLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
1000894c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008950:	699b      	ldr	r3, [r3, #24]
10008952:	f003 0303 	and.w	r3, r3, #3
10008956:	4a62      	ldr	r2, [pc, #392]	; (10008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1290>)
10008958:	fa22 f303 	lsr.w	r3, r2, r3
1000895c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000895e:	e005      	b.n	1000896c <HAL_RCCEx_GetPeriphCLKFreq+0x111c>

        case RCC_STGENCLKSOURCE_HSE:
          frequency = HSE_VALUE;
10008960:	4b61      	ldr	r3, [pc, #388]	; (10008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
10008962:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008964:	e002      	b.n	1000896c <HAL_RCCEx_GetPeriphCLKFreq+0x111c>

        default:
          frequency = 0;
10008966:	2300      	movs	r3, #0
10008968:	637b      	str	r3, [r7, #52]	; 0x34
          break;
1000896a:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_STGEN
1000896c:	e237      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_QSPI:
    {
      clksource = __HAL_RCC_GET_QSPI_SOURCE();
1000896e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008972:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
10008976:	f003 0303 	and.w	r3, r3, #3
1000897a:	633b      	str	r3, [r7, #48]	; 0x30
1000897c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000897e:	2b03      	cmp	r3, #3
10008980:	d822      	bhi.n	100089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
10008982:	a201      	add	r2, pc, #4	; (adr r2, 10008988 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
10008984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008988:	10008999 	.word	0x10008999
1000898c:	100089a1 	.word	0x100089a1
10008990:	100089b1 	.word	0x100089b1
10008994:	100089c1 	.word	0x100089c1

      switch (clksource)
      {
        case RCC_QSPICLKSOURCE_ACLK:
          frequency = HAL_RCC_GetACLKFreq();
10008998:	f7fc fb69 	bl	1000506e <HAL_RCC_GetACLKFreq>
1000899c:	6378      	str	r0, [r7, #52]	; 0x34
          break;
1000899e:	e016      	b.n	100089ce <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

        case RCC_QSPICLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100089a0:	f107 0318 	add.w	r3, r7, #24
100089a4:	4618      	mov	r0, r3
100089a6:	f7fc f8f5 	bl	10004b94 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
100089aa:	6a3b      	ldr	r3, [r7, #32]
100089ac:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100089ae:	e00e      	b.n	100089ce <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

        case RCC_QSPICLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100089b0:	f107 030c 	add.w	r3, r7, #12
100089b4:	4618      	mov	r0, r3
100089b6:	f7fc f9e7 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
100089ba:	68fb      	ldr	r3, [r7, #12]
100089bc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100089be:	e006      	b.n	100089ce <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

        case RCC_QSPICLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
100089c0:	f7fc fba2 	bl	10005108 <RCC_GetCKPERFreq>
100089c4:	6378      	str	r0, [r7, #52]	; 0x34
          break;
100089c6:	e002      	b.n	100089ce <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

        default:
          frequency = 0;
100089c8:	2300      	movs	r3, #0
100089ca:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100089cc:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_QSPI
100089ce:	e206      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_ETH:
    {
      clksource = __HAL_RCC_GET_ETH_SOURCE();
100089d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100089d4:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
100089d8:	f003 0303 	and.w	r3, r3, #3
100089dc:	633b      	str	r3, [r7, #48]	; 0x30
100089de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100089e0:	2b00      	cmp	r3, #0
100089e2:	d003      	beq.n	100089ec <HAL_RCCEx_GetPeriphCLKFreq+0x119c>
100089e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100089e6:	2b01      	cmp	r3, #1
100089e8:	d008      	beq.n	100089fc <HAL_RCCEx_GetPeriphCLKFreq+0x11ac>
100089ea:	e00f      	b.n	10008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>

      switch (clksource)
      {
        case RCC_ETHCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100089ec:	f107 030c 	add.w	r3, r7, #12
100089f0:	4618      	mov	r0, r3
100089f2:	f7fc f9c9 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
100089f6:	68fb      	ldr	r3, [r7, #12]
100089f8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
100089fa:	e00a      	b.n	10008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x11c2>

        case RCC_ETHCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100089fc:	f107 0318 	add.w	r3, r7, #24
10008a00:	4618      	mov	r0, r3
10008a02:	f7fc f8c7 	bl	10004b94 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008a06:	69fb      	ldr	r3, [r7, #28]
10008a08:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a0a:	e002      	b.n	10008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x11c2>

        default:
          frequency = 0;
10008a0c:	2300      	movs	r3, #0
10008a0e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a10:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_ETH
10008a12:	e1e4      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_FMC:
    {
      clksource = __HAL_RCC_GET_FMC_SOURCE();
10008a14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008a18:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
10008a1c:	f003 0303 	and.w	r3, r3, #3
10008a20:	633b      	str	r3, [r7, #48]	; 0x30
10008a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008a24:	2b03      	cmp	r3, #3
10008a26:	f200 81d1 	bhi.w	10008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x157c>
10008a2a:	a201      	add	r2, pc, #4	; (adr r2, 10008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
10008a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008a30:	10008a41 	.word	0x10008a41
10008a34:	10008a49 	.word	0x10008a49
10008a38:	10008a59 	.word	0x10008a59
10008a3c:	10008a69 	.word	0x10008a69

      switch (clksource)
      {
        case RCC_FMCCLKSOURCE_ACLK:
          frequency = HAL_RCC_GetACLKFreq();
10008a40:	f7fc fb15 	bl	1000506e <HAL_RCC_GetACLKFreq>
10008a44:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008a46:	e013      	b.n	10008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>

        case RCC_FMCCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008a48:	f107 0318 	add.w	r3, r7, #24
10008a4c:	4618      	mov	r0, r3
10008a4e:	f7fc f8a1 	bl	10004b94 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10008a52:	6a3b      	ldr	r3, [r7, #32]
10008a54:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a56:	e00b      	b.n	10008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>

        case RCC_FMCCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008a58:	f107 030c 	add.w	r3, r7, #12
10008a5c:	4618      	mov	r0, r3
10008a5e:	f7fc f993 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10008a62:	68fb      	ldr	r3, [r7, #12]
10008a64:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008a66:	e003      	b.n	10008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>

        case RCC_FMCCLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008a68:	f7fc fb4e 	bl	10005108 <RCC_GetCKPERFreq>
10008a6c:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008a6e:	bf00      	nop

      }
    }
    break;//RCC_PERIPHCLK_FMC
10008a70:	e1ac      	b.n	10008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x157c>


    case RCC_PERIPHCLK_GPU:
    {
      HAL_RCC_GetPLL2ClockFreq(&pll2_clocks);
10008a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
10008a76:	4618      	mov	r0, r3
10008a78:	f7fb ffa0 	bl	100049bc <HAL_RCC_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_Q_Frequency;
10008a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
10008a7e:	637b      	str	r3, [r7, #52]	; 0x34
    }
    break;//RCC_PERIPHCLK_GPU
10008a80:	e1ad      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_USBO:
    {
      clksource = __HAL_RCC_GET_USBO_SOURCE();
10008a82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008a86:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
10008a8a:	f003 0310 	and.w	r3, r3, #16
10008a8e:	633b      	str	r3, [r7, #48]	; 0x30
10008a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008a92:	2b00      	cmp	r3, #0
10008a94:	d003      	beq.n	10008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x124e>
10008a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008a98:	2b10      	cmp	r3, #16
10008a9a:	d008      	beq.n	10008aae <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
        case RCC_USBOCLKSOURCE_PHY:
          frequency = USB_PHY_VALUE;
          break;
      }
    }
    break;//RCC_PERIPHCLK_USBO
10008a9c:	e19f      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008a9e:	f107 030c 	add.w	r3, r7, #12
10008aa2:	4618      	mov	r0, r3
10008aa4:	f7fc f970 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10008aa8:	697b      	ldr	r3, [r7, #20]
10008aaa:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008aac:	e002      	b.n	10008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>
          frequency = USB_PHY_VALUE;
10008aae:	4b0f      	ldr	r3, [pc, #60]	; (10008aec <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
10008ab0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008ab2:	bf00      	nop
    break;//RCC_PERIPHCLK_USBO
10008ab4:	e193      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_SDMMC3:
    {
      clksource = __HAL_RCC_GET_SDMMC3_SOURCE();
10008ab6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008aba:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
10008abe:	f003 0307 	and.w	r3, r3, #7
10008ac2:	633b      	str	r3, [r7, #48]	; 0x30
10008ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008ac6:	2b03      	cmp	r3, #3
10008ac8:	d830      	bhi.n	10008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
10008aca:	a201      	add	r2, pc, #4	; (adr r2, 10008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
10008acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008ad0:	10008af1 	.word	0x10008af1
10008ad4:	10008af9 	.word	0x10008af9
10008ad8:	10008b09 	.word	0x10008b09
10008adc:	10008b19 	.word	0x10008b19
10008ae0:	03d09000 	.word	0x03d09000
10008ae4:	003d0900 	.word	0x003d0900
10008ae8:	016e3600 	.word	0x016e3600
10008aec:	02dc6c00 	.word	0x02dc6c00

      switch (clksource)
      {
        case RCC_SDMMC3CLKSOURCE_HCLK2:
          frequency = HAL_RCC_GetHCLK2Freq();
10008af0:	f7fc fae1 	bl	100050b6 <HAL_RCC_GetHCLK2Freq>
10008af4:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008af6:	e01c      	b.n	10008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>

        case RCC_SDMMC3CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008af8:	f107 0318 	add.w	r3, r7, #24
10008afc:	4618      	mov	r0, r3
10008afe:	f7fc f849 	bl	10004b94 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10008b02:	6a3b      	ldr	r3, [r7, #32]
10008b04:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b06:	e014      	b.n	10008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>

        case RCC_SDMMC3CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008b08:	f107 030c 	add.w	r3, r7, #12
10008b0c:	4618      	mov	r0, r3
10008b0e:	f7fc f93b 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10008b12:	68fb      	ldr	r3, [r7, #12]
10008b14:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b16:	e00c      	b.n	10008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>

        case RCC_SDMMC3CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008b18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008b1c:	699b      	ldr	r3, [r3, #24]
10008b1e:	f003 0303 	and.w	r3, r3, #3
10008b22:	4ab1      	ldr	r2, [pc, #708]	; (10008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
10008b24:	fa22 f303 	lsr.w	r3, r2, r3
10008b28:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b2a:	e002      	b.n	10008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>

        default:
          frequency = 0;
10008b2c:	2300      	movs	r3, #0
10008b2e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b30:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_SDMMC3
10008b32:	e154      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_ADC:
    {
      clksource = __HAL_RCC_GET_ADC_SOURCE();
10008b34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008b38:	f8d3 3928 	ldr.w	r3, [r3, #2344]	; 0x928
10008b3c:	f003 0303 	and.w	r3, r3, #3
10008b40:	633b      	str	r3, [r7, #48]	; 0x30
10008b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008b44:	2b02      	cmp	r3, #2
10008b46:	d015      	beq.n	10008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1324>
10008b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008b4a:	2b02      	cmp	r3, #2
10008b4c:	d81a      	bhi.n	10008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
10008b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008b50:	2b00      	cmp	r3, #0
10008b52:	d003      	beq.n	10008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x130c>
10008b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008b56:	2b01      	cmp	r3, #1
10008b58:	d008      	beq.n	10008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x131c>
10008b5a:	e013      	b.n	10008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>

      switch (clksource)
      {
        case RCC_ADCCLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008b5c:	f107 030c 	add.w	r3, r7, #12
10008b60:	4618      	mov	r0, r3
10008b62:	f7fc f911 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10008b66:	697b      	ldr	r3, [r7, #20]
10008b68:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b6a:	e00e      	b.n	10008b8a <HAL_RCCEx_GetPeriphCLKFreq+0x133a>

        case RCC_ADCCLKSOURCE_PER:
          frequency = RCC_GetCKPERFreq();
10008b6c:	f7fc facc 	bl	10005108 <RCC_GetCKPERFreq>
10008b70:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008b72:	e00a      	b.n	10008b8a <HAL_RCCEx_GetPeriphCLKFreq+0x133a>

        case RCC_ADCCLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008b74:	f107 0318 	add.w	r3, r7, #24
10008b78:	4618      	mov	r0, r3
10008b7a:	f7fc f80b 	bl	10004b94 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10008b7e:	69fb      	ldr	r3, [r7, #28]
10008b80:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b82:	e002      	b.n	10008b8a <HAL_RCCEx_GetPeriphCLKFreq+0x133a>

        default:
          frequency = 0;
10008b84:	2300      	movs	r3, #0
10008b86:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008b88:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_ADC */
10008b8a:	e128      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>


    case RCC_PERIPHCLK_RNG2:
    {
      clksource = __HAL_RCC_GET_RNG2_SOURCE();
10008b8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008b90:	f8d3 3920 	ldr.w	r3, [r3, #2336]	; 0x920
10008b94:	f003 0303 	and.w	r3, r3, #3
10008b98:	633b      	str	r3, [r7, #48]	; 0x30
10008b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008b9c:	2b03      	cmp	r3, #3
10008b9e:	f200 8117 	bhi.w	10008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
10008ba2:	a201      	add	r2, pc, #4	; (adr r2, 10008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>)
10008ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008ba8:	10008bb9 	.word	0x10008bb9
10008bac:	10008bbf 	.word	0x10008bbf
10008bb0:	10008bcf 	.word	0x10008bcf
10008bb4:	10008bd7 	.word	0x10008bd7

      switch (clksource)
      {
        case RCC_RNG2CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008bb8:	4b8c      	ldr	r3, [pc, #560]	; (10008dec <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
10008bba:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008bbc:	e00f      	b.n	10008bde <HAL_RCCEx_GetPeriphCLKFreq+0x138e>

        case RCC_RNG2CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008bbe:	f107 030c 	add.w	r3, r7, #12
10008bc2:	4618      	mov	r0, r3
10008bc4:	f7fc f8e0 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10008bc8:	697b      	ldr	r3, [r7, #20]
10008bca:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008bcc:	e007      	b.n	10008bde <HAL_RCCEx_GetPeriphCLKFreq+0x138e>

        case RCC_RNG2CLKSOURCE_LSE:
          frequency = LSE_VALUE;
10008bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10008bd2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008bd4:	e003      	b.n	10008bde <HAL_RCCEx_GetPeriphCLKFreq+0x138e>

        case RCC_RNG2CLKSOURCE_LSI:
          frequency = LSI_VALUE;
10008bd6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10008bda:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008bdc:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_RNG2
10008bde:	e0f7      	b.n	10008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>


    case RCC_PERIPHCLK_RNG1:
    {
      clksource = __HAL_RCC_GET_RNG1_SOURCE();
10008be0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008be4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
10008be8:	f003 0303 	and.w	r3, r3, #3
10008bec:	633b      	str	r3, [r7, #48]	; 0x30
10008bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008bf0:	2b03      	cmp	r3, #3
10008bf2:	f200 80ef 	bhi.w	10008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1584>
10008bf6:	a201      	add	r2, pc, #4	; (adr r2, 10008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
10008bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008bfc:	10008c0d 	.word	0x10008c0d
10008c00:	10008c13 	.word	0x10008c13
10008c04:	10008c23 	.word	0x10008c23
10008c08:	10008c2b 	.word	0x10008c2b

      switch (clksource)
      {
        case RCC_RNG1CLKSOURCE_CSI:
          frequency = CSI_VALUE;
10008c0c:	4b77      	ldr	r3, [pc, #476]	; (10008dec <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
10008c0e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008c10:	e00f      	b.n	10008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>

        case RCC_RNG1CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008c12:	f107 030c 	add.w	r3, r7, #12
10008c16:	4618      	mov	r0, r3
10008c18:	f7fc f8b6 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10008c1c:	697b      	ldr	r3, [r7, #20]
10008c1e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008c20:	e007      	b.n	10008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>

        case RCC_RNG1CLKSOURCE_LSE:
          frequency = LSE_VALUE;
10008c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10008c26:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008c28:	e003      	b.n	10008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>

        case RCC_RNG1CLKSOURCE_LSI:
          frequency = LSI_VALUE;
10008c2a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
10008c2e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008c30:	bf00      	nop
      }
    }
    break;//RCC_PERIPHCLK_RNG1
10008c32:	e0cf      	b.n	10008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1584>

    case RCC_PERIPHCLK_SDMMC12:
    {
      clksource = __HAL_RCC_GET_SDMMC12_SOURCE();
10008c34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008c38:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
10008c3c:	f003 0307 	and.w	r3, r3, #7
10008c40:	633b      	str	r3, [r7, #48]	; 0x30
10008c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008c44:	2b03      	cmp	r3, #3
10008c46:	d829      	bhi.n	10008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x144c>
10008c48:	a201      	add	r2, pc, #4	; (adr r2, 10008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>)
10008c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008c4e:	bf00      	nop
10008c50:	10008c61 	.word	0x10008c61
10008c54:	10008c69 	.word	0x10008c69
10008c58:	10008c79 	.word	0x10008c79
10008c5c:	10008c89 	.word	0x10008c89

      switch (clksource)
      {
        case RCC_SDMMC12CLKSOURCE_HCLK6:
          frequency = HAL_RCC_GetHCLK6Freq();
10008c60:	f7fc fa22 	bl	100050a8 <HAL_RCC_GetHCLK6Freq>
10008c64:	6378      	str	r0, [r7, #52]	; 0x34
          break;
10008c66:	e01c      	b.n	10008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>

        case RCC_SDMMC12CLKSOURCE_PLL3:
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008c68:	f107 0318 	add.w	r3, r7, #24
10008c6c:	4618      	mov	r0, r3
10008c6e:	f7fb ff91 	bl	10004b94 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10008c72:	6a3b      	ldr	r3, [r7, #32]
10008c74:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008c76:	e014      	b.n	10008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>

        case RCC_SDMMC12CLKSOURCE_PLL4:
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10008c78:	f107 030c 	add.w	r3, r7, #12
10008c7c:	4618      	mov	r0, r3
10008c7e:	f7fc f883 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10008c82:	68fb      	ldr	r3, [r7, #12]
10008c84:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008c86:	e00c      	b.n	10008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>

        case RCC_SDMMC12CLKSOURCE_HSI:
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10008c88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008c8c:	699b      	ldr	r3, [r3, #24]
10008c8e:	f003 0303 	and.w	r3, r3, #3
10008c92:	4a55      	ldr	r2, [pc, #340]	; (10008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
10008c94:	fa22 f303 	lsr.w	r3, r2, r3
10008c98:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008c9a:	e002      	b.n	10008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>

        default:
          frequency = 0;
10008c9c:	2300      	movs	r3, #0
10008c9e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
10008ca0:	bf00      	nop
      }
    }
      break; /* RCC_PERIPHCLK_SDMMC12 */
10008ca2:	e09c      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>

    case RCC_PERIPHCLK_TIMG1:
    {
      frequency = HAL_RCC_GetMCUFreq();
10008ca4:	f7fc fa15 	bl	100050d2 <HAL_RCC_GetMCUFreq>
10008ca8:	6378      	str	r0, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_TIMG1PRES() == RCC_TIMG1PRES_ACTIVATED)
10008caa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008cae:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
10008cb2:	f003 0301 	and.w	r3, r3, #1
10008cb6:	2b01      	cmp	r3, #1
10008cb8:	d116      	bne.n	10008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
      {
        switch (__HAL_RCC_GET_APB1_DIV())
10008cba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008cbe:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10008cc2:	f003 0307 	and.w	r3, r3, #7
10008cc6:	2b04      	cmp	r3, #4
10008cc8:	d00a      	beq.n	10008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
10008cca:	2b04      	cmp	r3, #4
10008ccc:	f200 8084 	bhi.w	10008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
10008cd0:	2b02      	cmp	r3, #2
10008cd2:	d92b      	bls.n	10008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x14dc>
10008cd4:	2b03      	cmp	r3, #3
10008cd6:	d17f      	bne.n	10008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
          case RCC_APB1_DIV1:
          case RCC_APB1_DIV2:
          case RCC_APB1_DIV4:
            break;
          case RCC_APB1_DIV8:
            frequency /= 2UL;
10008cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008cda:	085b      	lsrs	r3, r3, #1
10008cdc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008cde:	e028      	b.n	10008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
          case RCC_APB1_DIV16:
            frequency /= 4UL;
10008ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008ce2:	089b      	lsrs	r3, r3, #2
10008ce4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008ce6:	e024      	b.n	10008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
        }
      }
      else
      {
        switch (__HAL_RCC_GET_APB1_DIV())
10008ce8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008cec:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10008cf0:	f003 0307 	and.w	r3, r3, #7
10008cf4:	2b04      	cmp	r3, #4
10008cf6:	d86f      	bhi.n	10008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
10008cf8:	a201      	add	r2, pc, #4	; (adr r2, 10008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x14b0>)
10008cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008cfe:	bf00      	nop
10008d00:	10008d31 	.word	0x10008d31
10008d04:	10008d31 	.word	0x10008d31
10008d08:	10008d15 	.word	0x10008d15
10008d0c:	10008d1d 	.word	0x10008d1d
10008d10:	10008d25 	.word	0x10008d25
        {
          case RCC_APB1_DIV1:
          case RCC_APB1_DIV2:
            break;
          case RCC_APB1_DIV4:
            frequency /= 2UL;
10008d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008d16:	085b      	lsrs	r3, r3, #1
10008d18:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008d1a:	e00a      	b.n	10008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
          case RCC_APB1_DIV8:
            frequency /= 4UL;
10008d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008d1e:	089b      	lsrs	r3, r3, #2
10008d20:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008d22:	e006      	b.n	10008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
          case RCC_APB1_DIV16:
            frequency /= 8UL;
10008d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008d26:	08db      	lsrs	r3, r3, #3
10008d28:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008d2a:	e002      	b.n	10008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x14e2>
            break;
10008d2c:	bf00      	nop
10008d2e:	e053      	b.n	10008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
            break;
10008d30:	bf00      	nop
        }
      }
    }
    break;
10008d32:	e051      	b.n	10008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>


    case RCC_PERIPHCLK_TIMG2:
    {
      frequency = HAL_RCC_GetMCUFreq();
10008d34:	f7fc f9cd 	bl	100050d2 <HAL_RCC_GetMCUFreq>
10008d38:	6378      	str	r0, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_TIMG2PRES() == RCC_TIMG2PRES_ACTIVATED)
10008d3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008d3e:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
10008d42:	f003 0301 	and.w	r3, r3, #1
10008d46:	2b01      	cmp	r3, #1
10008d48:	d115      	bne.n	10008d76 <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
      {
        switch (__HAL_RCC_GET_APB2_DIV())
10008d4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008d4e:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10008d52:	f003 0307 	and.w	r3, r3, #7
10008d56:	2b04      	cmp	r3, #4
10008d58:	d009      	beq.n	10008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
10008d5a:	2b04      	cmp	r3, #4
10008d5c:	d83e      	bhi.n	10008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
10008d5e:	2b02      	cmp	r3, #2
10008d60:	d92a      	bls.n	10008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1568>
10008d62:	2b03      	cmp	r3, #3
10008d64:	d13a      	bne.n	10008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
          case RCC_APB2_DIV1:
          case RCC_APB2_DIV2:
          case RCC_APB2_DIV4:
            break;
          case RCC_APB2_DIV8:
            frequency /= 2UL;
10008d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008d68:	085b      	lsrs	r3, r3, #1
10008d6a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008d6c:	e027      	b.n	10008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
          case RCC_APB2_DIV16:
            frequency /= 4UL;
10008d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008d70:	089b      	lsrs	r3, r3, #2
10008d72:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008d74:	e023      	b.n	10008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
        }
      }
      else
      {
        switch (__HAL_RCC_GET_APB2_DIV())
10008d76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10008d7a:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10008d7e:	f003 0307 	and.w	r3, r3, #7
10008d82:	2b04      	cmp	r3, #4
10008d84:	d82a      	bhi.n	10008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
10008d86:	a201      	add	r2, pc, #4	; (adr r2, 10008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
10008d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008d8c:	10008dbd 	.word	0x10008dbd
10008d90:	10008dbd 	.word	0x10008dbd
10008d94:	10008da1 	.word	0x10008da1
10008d98:	10008da9 	.word	0x10008da9
10008d9c:	10008db1 	.word	0x10008db1
        {
          case RCC_APB2_DIV1:
          case RCC_APB2_DIV2:
            break;
          case RCC_APB2_DIV4:
            frequency /= 2UL;
10008da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008da2:	085b      	lsrs	r3, r3, #1
10008da4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008da6:	e00a      	b.n	10008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
          case RCC_APB2_DIV8:
            frequency /= 4UL;
10008da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008daa:	089b      	lsrs	r3, r3, #2
10008dac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008dae:	e006      	b.n	10008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
          case RCC_APB2_DIV16:
            frequency /= 8UL;
10008db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008db2:	08db      	lsrs	r3, r3, #3
10008db4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
10008db6:	e002      	b.n	10008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
            break;
10008db8:	bf00      	nop
10008dba:	e00f      	b.n	10008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
            break;
10008dbc:	bf00      	nop
        }
      }
    }
    break;
10008dbe:	e00d      	b.n	10008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x158c>
      break; /* RCC_PERIPHCLK_I2C12 */
10008dc0:	bf00      	nop
10008dc2:	e00c      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
      break; /* RCC_PERIPHCLK_I2C35 */
10008dc4:	bf00      	nop
10008dc6:	e00a      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;//RCC_PERIPHCLK_RTC
10008dc8:	bf00      	nop
10008dca:	e008      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;//RCC_PERIPHCLK_FMC
10008dcc:	bf00      	nop
10008dce:	e006      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;//RCC_PERIPHCLK_RNG2
10008dd0:	bf00      	nop
10008dd2:	e004      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;//RCC_PERIPHCLK_RNG1
10008dd4:	bf00      	nop
10008dd6:	e002      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;
10008dd8:	bf00      	nop
10008dda:	e000      	b.n	10008dde <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    break;
10008ddc:	bf00      	nop

  }

  return (frequency);
10008dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
10008de0:	4618      	mov	r0, r3
10008de2:	373c      	adds	r7, #60	; 0x3c
10008de4:	46bd      	mov	sp, r7
10008de6:	bd90      	pop	{r4, r7, pc}
10008de8:	03d09000 	.word	0x03d09000
10008dec:	003d0900 	.word	0x003d0900

10008df0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
10008df0:	b580      	push	{r7, lr}
10008df2:	b082      	sub	sp, #8
10008df4:	af00      	add	r7, sp, #0
10008df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
10008df8:	687b      	ldr	r3, [r7, #4]
10008dfa:	2b00      	cmp	r3, #0
10008dfc:	d101      	bne.n	10008e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
10008dfe:	2301      	movs	r3, #1
10008e00:	e042      	b.n	10008e88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
10008e02:	687b      	ldr	r3, [r7, #4]
10008e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10008e08:	2b00      	cmp	r3, #0
10008e0a:	d106      	bne.n	10008e1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
10008e0c:	687b      	ldr	r3, [r7, #4]
10008e0e:	2200      	movs	r2, #0
10008e10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
10008e14:	6878      	ldr	r0, [r7, #4]
10008e16:	f7f8 fb83 	bl	10001520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
10008e1a:	687b      	ldr	r3, [r7, #4]
10008e1c:	2224      	movs	r2, #36	; 0x24
10008e1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
10008e22:	687b      	ldr	r3, [r7, #4]
10008e24:	681b      	ldr	r3, [r3, #0]
10008e26:	681a      	ldr	r2, [r3, #0]
10008e28:	687b      	ldr	r3, [r7, #4]
10008e2a:	681b      	ldr	r3, [r3, #0]
10008e2c:	f022 0201 	bic.w	r2, r2, #1
10008e30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
10008e32:	6878      	ldr	r0, [r7, #4]
10008e34:	f000 f8c4 	bl	10008fc0 <UART_SetConfig>
10008e38:	4603      	mov	r3, r0
10008e3a:	2b01      	cmp	r3, #1
10008e3c:	d101      	bne.n	10008e42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
10008e3e:	2301      	movs	r3, #1
10008e40:	e022      	b.n	10008e88 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
10008e42:	687b      	ldr	r3, [r7, #4]
10008e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10008e46:	2b00      	cmp	r3, #0
10008e48:	d002      	beq.n	10008e50 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
10008e4a:	6878      	ldr	r0, [r7, #4]
10008e4c:	f001 f95e 	bl	1000a10c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
10008e50:	687b      	ldr	r3, [r7, #4]
10008e52:	681b      	ldr	r3, [r3, #0]
10008e54:	685a      	ldr	r2, [r3, #4]
10008e56:	687b      	ldr	r3, [r7, #4]
10008e58:	681b      	ldr	r3, [r3, #0]
10008e5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
10008e5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
10008e60:	687b      	ldr	r3, [r7, #4]
10008e62:	681b      	ldr	r3, [r3, #0]
10008e64:	689a      	ldr	r2, [r3, #8]
10008e66:	687b      	ldr	r3, [r7, #4]
10008e68:	681b      	ldr	r3, [r3, #0]
10008e6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
10008e6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
10008e70:	687b      	ldr	r3, [r7, #4]
10008e72:	681b      	ldr	r3, [r3, #0]
10008e74:	681a      	ldr	r2, [r3, #0]
10008e76:	687b      	ldr	r3, [r7, #4]
10008e78:	681b      	ldr	r3, [r3, #0]
10008e7a:	f042 0201 	orr.w	r2, r2, #1
10008e7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
10008e80:	6878      	ldr	r0, [r7, #4]
10008e82:	f001 f9e5 	bl	1000a250 <UART_CheckIdleState>
10008e86:	4603      	mov	r3, r0
}
10008e88:	4618      	mov	r0, r3
10008e8a:	3708      	adds	r7, #8
10008e8c:	46bd      	mov	sp, r7
10008e8e:	bd80      	pop	{r7, pc}

10008e90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
10008e90:	b580      	push	{r7, lr}
10008e92:	b08a      	sub	sp, #40	; 0x28
10008e94:	af02      	add	r7, sp, #8
10008e96:	60f8      	str	r0, [r7, #12]
10008e98:	60b9      	str	r1, [r7, #8]
10008e9a:	603b      	str	r3, [r7, #0]
10008e9c:	4613      	mov	r3, r2
10008e9e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
10008ea0:	68fb      	ldr	r3, [r7, #12]
10008ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10008ea6:	2b20      	cmp	r3, #32
10008ea8:	f040 8084 	bne.w	10008fb4 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
10008eac:	68bb      	ldr	r3, [r7, #8]
10008eae:	2b00      	cmp	r3, #0
10008eb0:	d002      	beq.n	10008eb8 <HAL_UART_Transmit+0x28>
10008eb2:	88fb      	ldrh	r3, [r7, #6]
10008eb4:	2b00      	cmp	r3, #0
10008eb6:	d101      	bne.n	10008ebc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
10008eb8:	2301      	movs	r3, #1
10008eba:	e07c      	b.n	10008fb6 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
10008ebc:	68fb      	ldr	r3, [r7, #12]
10008ebe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
10008ec2:	2b01      	cmp	r3, #1
10008ec4:	d101      	bne.n	10008eca <HAL_UART_Transmit+0x3a>
10008ec6:	2302      	movs	r3, #2
10008ec8:	e075      	b.n	10008fb6 <HAL_UART_Transmit+0x126>
10008eca:	68fb      	ldr	r3, [r7, #12]
10008ecc:	2201      	movs	r2, #1
10008ece:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    huart->ErrorCode = HAL_UART_ERROR_NONE;
10008ed2:	68fb      	ldr	r3, [r7, #12]
10008ed4:	2200      	movs	r2, #0
10008ed6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
10008eda:	68fb      	ldr	r3, [r7, #12]
10008edc:	2221      	movs	r2, #33	; 0x21
10008ede:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
10008ee2:	f7f8 fc81 	bl	100017e8 <HAL_GetTick>
10008ee6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
10008ee8:	68fb      	ldr	r3, [r7, #12]
10008eea:	88fa      	ldrh	r2, [r7, #6]
10008eec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
10008ef0:	68fb      	ldr	r3, [r7, #12]
10008ef2:	88fa      	ldrh	r2, [r7, #6]
10008ef4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
10008ef8:	68fb      	ldr	r3, [r7, #12]
10008efa:	689b      	ldr	r3, [r3, #8]
10008efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
10008f00:	d108      	bne.n	10008f14 <HAL_UART_Transmit+0x84>
10008f02:	68fb      	ldr	r3, [r7, #12]
10008f04:	691b      	ldr	r3, [r3, #16]
10008f06:	2b00      	cmp	r3, #0
10008f08:	d104      	bne.n	10008f14 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
10008f0a:	2300      	movs	r3, #0
10008f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
10008f0e:	68bb      	ldr	r3, [r7, #8]
10008f10:	61bb      	str	r3, [r7, #24]
10008f12:	e003      	b.n	10008f1c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
10008f14:	68bb      	ldr	r3, [r7, #8]
10008f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
10008f18:	2300      	movs	r3, #0
10008f1a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
10008f1c:	68fb      	ldr	r3, [r7, #12]
10008f1e:	2200      	movs	r2, #0
10008f20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    while (huart->TxXferCount > 0U)
10008f24:	e02d      	b.n	10008f82 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
10008f26:	683b      	ldr	r3, [r7, #0]
10008f28:	9300      	str	r3, [sp, #0]
10008f2a:	697b      	ldr	r3, [r7, #20]
10008f2c:	2200      	movs	r2, #0
10008f2e:	2180      	movs	r1, #128	; 0x80
10008f30:	68f8      	ldr	r0, [r7, #12]
10008f32:	f001 f9d5 	bl	1000a2e0 <UART_WaitOnFlagUntilTimeout>
10008f36:	4603      	mov	r3, r0
10008f38:	2b00      	cmp	r3, #0
10008f3a:	d001      	beq.n	10008f40 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
10008f3c:	2303      	movs	r3, #3
10008f3e:	e03a      	b.n	10008fb6 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
10008f40:	69fb      	ldr	r3, [r7, #28]
10008f42:	2b00      	cmp	r3, #0
10008f44:	d10b      	bne.n	10008f5e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
10008f46:	69bb      	ldr	r3, [r7, #24]
10008f48:	881a      	ldrh	r2, [r3, #0]
10008f4a:	68fb      	ldr	r3, [r7, #12]
10008f4c:	681b      	ldr	r3, [r3, #0]
10008f4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
10008f52:	b292      	uxth	r2, r2
10008f54:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
10008f56:	69bb      	ldr	r3, [r7, #24]
10008f58:	3302      	adds	r3, #2
10008f5a:	61bb      	str	r3, [r7, #24]
10008f5c:	e008      	b.n	10008f70 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
10008f5e:	69fb      	ldr	r3, [r7, #28]
10008f60:	781a      	ldrb	r2, [r3, #0]
10008f62:	68fb      	ldr	r3, [r7, #12]
10008f64:	681b      	ldr	r3, [r3, #0]
10008f66:	b292      	uxth	r2, r2
10008f68:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
10008f6a:	69fb      	ldr	r3, [r7, #28]
10008f6c:	3301      	adds	r3, #1
10008f6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
10008f70:	68fb      	ldr	r3, [r7, #12]
10008f72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
10008f76:	b29b      	uxth	r3, r3
10008f78:	3b01      	subs	r3, #1
10008f7a:	b29a      	uxth	r2, r3
10008f7c:	68fb      	ldr	r3, [r7, #12]
10008f7e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
10008f82:	68fb      	ldr	r3, [r7, #12]
10008f84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
10008f88:	b29b      	uxth	r3, r3
10008f8a:	2b00      	cmp	r3, #0
10008f8c:	d1cb      	bne.n	10008f26 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
10008f8e:	683b      	ldr	r3, [r7, #0]
10008f90:	9300      	str	r3, [sp, #0]
10008f92:	697b      	ldr	r3, [r7, #20]
10008f94:	2200      	movs	r2, #0
10008f96:	2140      	movs	r1, #64	; 0x40
10008f98:	68f8      	ldr	r0, [r7, #12]
10008f9a:	f001 f9a1 	bl	1000a2e0 <UART_WaitOnFlagUntilTimeout>
10008f9e:	4603      	mov	r3, r0
10008fa0:	2b00      	cmp	r3, #0
10008fa2:	d001      	beq.n	10008fa8 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
10008fa4:	2303      	movs	r3, #3
10008fa6:	e006      	b.n	10008fb6 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
10008fa8:	68fb      	ldr	r3, [r7, #12]
10008faa:	2220      	movs	r2, #32
10008fac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
10008fb0:	2300      	movs	r3, #0
10008fb2:	e000      	b.n	10008fb6 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
10008fb4:	2302      	movs	r3, #2
  }
}
10008fb6:	4618      	mov	r0, r3
10008fb8:	3720      	adds	r7, #32
10008fba:	46bd      	mov	sp, r7
10008fbc:	bd80      	pop	{r7, pc}
	...

10008fc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
10008fc0:	b580      	push	{r7, lr}
10008fc2:	b08e      	sub	sp, #56	; 0x38
10008fc4:	af00      	add	r7, sp, #0
10008fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
10008fc8:	2300      	movs	r3, #0
10008fca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_StatusTypeDef ret               = HAL_OK;
10008fcc:	2300      	movs	r3, #0
10008fce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
10008fd2:	687b      	ldr	r3, [r7, #4]
10008fd4:	689a      	ldr	r2, [r3, #8]
10008fd6:	687b      	ldr	r3, [r7, #4]
10008fd8:	691b      	ldr	r3, [r3, #16]
10008fda:	431a      	orrs	r2, r3
10008fdc:	687b      	ldr	r3, [r7, #4]
10008fde:	695b      	ldr	r3, [r3, #20]
10008fe0:	431a      	orrs	r2, r3
10008fe2:	687b      	ldr	r3, [r7, #4]
10008fe4:	69db      	ldr	r3, [r3, #28]
10008fe6:	4313      	orrs	r3, r2
10008fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  tmpreg |= (uint32_t)huart->FifoMode;
10008fea:	687b      	ldr	r3, [r7, #4]
10008fec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
10008fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
10008ff0:	4313      	orrs	r3, r2
10008ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
10008ff4:	687b      	ldr	r3, [r7, #4]
10008ff6:	681b      	ldr	r3, [r3, #0]
10008ff8:	681a      	ldr	r2, [r3, #0]
10008ffa:	4bb1      	ldr	r3, [pc, #708]	; (100092c0 <UART_SetConfig+0x300>)
10008ffc:	4013      	ands	r3, r2
10008ffe:	687a      	ldr	r2, [r7, #4]
10009000:	6812      	ldr	r2, [r2, #0]
10009002:	6ab9      	ldr	r1, [r7, #40]	; 0x28
10009004:	430b      	orrs	r3, r1
10009006:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
10009008:	687b      	ldr	r3, [r7, #4]
1000900a:	681b      	ldr	r3, [r3, #0]
1000900c:	685b      	ldr	r3, [r3, #4]
1000900e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
10009012:	687b      	ldr	r3, [r7, #4]
10009014:	68da      	ldr	r2, [r3, #12]
10009016:	687b      	ldr	r3, [r7, #4]
10009018:	681b      	ldr	r3, [r3, #0]
1000901a:	430a      	orrs	r2, r1
1000901c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
1000901e:	687b      	ldr	r3, [r7, #4]
10009020:	699b      	ldr	r3, [r3, #24]
10009022:	62bb      	str	r3, [r7, #40]	; 0x28

  tmpreg |= huart->Init.OneBitSampling;
10009024:	687b      	ldr	r3, [r7, #4]
10009026:	6a1b      	ldr	r3, [r3, #32]
10009028:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000902a:	4313      	orrs	r3, r2
1000902c:	62bb      	str	r3, [r7, #40]	; 0x28
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
1000902e:	687b      	ldr	r3, [r7, #4]
10009030:	681b      	ldr	r3, [r3, #0]
10009032:	689b      	ldr	r3, [r3, #8]
10009034:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
10009038:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
1000903c:	687a      	ldr	r2, [r7, #4]
1000903e:	6812      	ldr	r2, [r2, #0]
10009040:	6ab9      	ldr	r1, [r7, #40]	; 0x28
10009042:	430b      	orrs	r3, r1
10009044:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
10009046:	687b      	ldr	r3, [r7, #4]
10009048:	681b      	ldr	r3, [r3, #0]
1000904a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000904c:	f023 010f 	bic.w	r1, r3, #15
10009050:	687b      	ldr	r3, [r7, #4]
10009052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10009054:	687b      	ldr	r3, [r7, #4]
10009056:	681b      	ldr	r3, [r3, #0]
10009058:	430a      	orrs	r2, r1
1000905a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
1000905c:	687b      	ldr	r3, [r7, #4]
1000905e:	681b      	ldr	r3, [r3, #0]
10009060:	f1b3 4fb8 	cmp.w	r3, #1543503872	; 0x5c000000
10009064:	d132      	bne.n	100090cc <UART_SetConfig+0x10c>
10009066:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000906a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
1000906e:	f003 0307 	and.w	r3, r3, #7
10009072:	2b05      	cmp	r3, #5
10009074:	d826      	bhi.n	100090c4 <UART_SetConfig+0x104>
10009076:	a201      	add	r2, pc, #4	; (adr r2, 1000907c <UART_SetConfig+0xbc>)
10009078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000907c:	10009095 	.word	0x10009095
10009080:	1000909d 	.word	0x1000909d
10009084:	100090a5 	.word	0x100090a5
10009088:	100090ad 	.word	0x100090ad
1000908c:	100090b5 	.word	0x100090b5
10009090:	100090bd 	.word	0x100090bd
10009094:	2302      	movs	r3, #2
10009096:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000909a:	e184      	b.n	100093a6 <UART_SetConfig+0x3e6>
1000909c:	2304      	movs	r3, #4
1000909e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100090a2:	e180      	b.n	100093a6 <UART_SetConfig+0x3e6>
100090a4:	2310      	movs	r3, #16
100090a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100090aa:	e17c      	b.n	100093a6 <UART_SetConfig+0x3e6>
100090ac:	2320      	movs	r3, #32
100090ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100090b2:	e178      	b.n	100093a6 <UART_SetConfig+0x3e6>
100090b4:	2308      	movs	r3, #8
100090b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100090ba:	e174      	b.n	100093a6 <UART_SetConfig+0x3e6>
100090bc:	2340      	movs	r3, #64	; 0x40
100090be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100090c2:	e170      	b.n	100093a6 <UART_SetConfig+0x3e6>
100090c4:	2380      	movs	r3, #128	; 0x80
100090c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100090ca:	e16c      	b.n	100093a6 <UART_SetConfig+0x3e6>
100090cc:	687b      	ldr	r3, [r7, #4]
100090ce:	681b      	ldr	r3, [r3, #0]
100090d0:	4a7c      	ldr	r2, [pc, #496]	; (100092c4 <UART_SetConfig+0x304>)
100090d2:	4293      	cmp	r3, r2
100090d4:	d12c      	bne.n	10009130 <UART_SetConfig+0x170>
100090d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100090da:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
100090de:	f003 0307 	and.w	r3, r3, #7
100090e2:	2b04      	cmp	r3, #4
100090e4:	d820      	bhi.n	10009128 <UART_SetConfig+0x168>
100090e6:	a201      	add	r2, pc, #4	; (adr r2, 100090ec <UART_SetConfig+0x12c>)
100090e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100090ec:	10009101 	.word	0x10009101
100090f0:	10009109 	.word	0x10009109
100090f4:	10009111 	.word	0x10009111
100090f8:	10009119 	.word	0x10009119
100090fc:	10009121 	.word	0x10009121
10009100:	2300      	movs	r3, #0
10009102:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009106:	e14e      	b.n	100093a6 <UART_SetConfig+0x3e6>
10009108:	2308      	movs	r3, #8
1000910a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000910e:	e14a      	b.n	100093a6 <UART_SetConfig+0x3e6>
10009110:	2310      	movs	r3, #16
10009112:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009116:	e146      	b.n	100093a6 <UART_SetConfig+0x3e6>
10009118:	2320      	movs	r3, #32
1000911a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000911e:	e142      	b.n	100093a6 <UART_SetConfig+0x3e6>
10009120:	2340      	movs	r3, #64	; 0x40
10009122:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009126:	e13e      	b.n	100093a6 <UART_SetConfig+0x3e6>
10009128:	2380      	movs	r3, #128	; 0x80
1000912a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000912e:	e13a      	b.n	100093a6 <UART_SetConfig+0x3e6>
10009130:	687b      	ldr	r3, [r7, #4]
10009132:	681b      	ldr	r3, [r3, #0]
10009134:	4a64      	ldr	r2, [pc, #400]	; (100092c8 <UART_SetConfig+0x308>)
10009136:	4293      	cmp	r3, r2
10009138:	d12c      	bne.n	10009194 <UART_SetConfig+0x1d4>
1000913a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000913e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
10009142:	f003 0307 	and.w	r3, r3, #7
10009146:	2b04      	cmp	r3, #4
10009148:	d820      	bhi.n	1000918c <UART_SetConfig+0x1cc>
1000914a:	a201      	add	r2, pc, #4	; (adr r2, 10009150 <UART_SetConfig+0x190>)
1000914c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009150:	10009165 	.word	0x10009165
10009154:	1000916d 	.word	0x1000916d
10009158:	10009175 	.word	0x10009175
1000915c:	1000917d 	.word	0x1000917d
10009160:	10009185 	.word	0x10009185
10009164:	2300      	movs	r3, #0
10009166:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000916a:	e11c      	b.n	100093a6 <UART_SetConfig+0x3e6>
1000916c:	2308      	movs	r3, #8
1000916e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009172:	e118      	b.n	100093a6 <UART_SetConfig+0x3e6>
10009174:	2310      	movs	r3, #16
10009176:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000917a:	e114      	b.n	100093a6 <UART_SetConfig+0x3e6>
1000917c:	2320      	movs	r3, #32
1000917e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009182:	e110      	b.n	100093a6 <UART_SetConfig+0x3e6>
10009184:	2340      	movs	r3, #64	; 0x40
10009186:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000918a:	e10c      	b.n	100093a6 <UART_SetConfig+0x3e6>
1000918c:	2380      	movs	r3, #128	; 0x80
1000918e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009192:	e108      	b.n	100093a6 <UART_SetConfig+0x3e6>
10009194:	687b      	ldr	r3, [r7, #4]
10009196:	681b      	ldr	r3, [r3, #0]
10009198:	4a4c      	ldr	r2, [pc, #304]	; (100092cc <UART_SetConfig+0x30c>)
1000919a:	4293      	cmp	r3, r2
1000919c:	d12c      	bne.n	100091f8 <UART_SetConfig+0x238>
1000919e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100091a2:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
100091a6:	f003 0307 	and.w	r3, r3, #7
100091aa:	2b04      	cmp	r3, #4
100091ac:	d820      	bhi.n	100091f0 <UART_SetConfig+0x230>
100091ae:	a201      	add	r2, pc, #4	; (adr r2, 100091b4 <UART_SetConfig+0x1f4>)
100091b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100091b4:	100091c9 	.word	0x100091c9
100091b8:	100091d1 	.word	0x100091d1
100091bc:	100091d9 	.word	0x100091d9
100091c0:	100091e1 	.word	0x100091e1
100091c4:	100091e9 	.word	0x100091e9
100091c8:	2300      	movs	r3, #0
100091ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100091ce:	e0ea      	b.n	100093a6 <UART_SetConfig+0x3e6>
100091d0:	2308      	movs	r3, #8
100091d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100091d6:	e0e6      	b.n	100093a6 <UART_SetConfig+0x3e6>
100091d8:	2310      	movs	r3, #16
100091da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100091de:	e0e2      	b.n	100093a6 <UART_SetConfig+0x3e6>
100091e0:	2320      	movs	r3, #32
100091e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100091e6:	e0de      	b.n	100093a6 <UART_SetConfig+0x3e6>
100091e8:	2340      	movs	r3, #64	; 0x40
100091ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100091ee:	e0da      	b.n	100093a6 <UART_SetConfig+0x3e6>
100091f0:	2380      	movs	r3, #128	; 0x80
100091f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100091f6:	e0d6      	b.n	100093a6 <UART_SetConfig+0x3e6>
100091f8:	687b      	ldr	r3, [r7, #4]
100091fa:	681b      	ldr	r3, [r3, #0]
100091fc:	4a34      	ldr	r2, [pc, #208]	; (100092d0 <UART_SetConfig+0x310>)
100091fe:	4293      	cmp	r3, r2
10009200:	d12c      	bne.n	1000925c <UART_SetConfig+0x29c>
10009202:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10009206:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
1000920a:	f003 0307 	and.w	r3, r3, #7
1000920e:	2b04      	cmp	r3, #4
10009210:	d820      	bhi.n	10009254 <UART_SetConfig+0x294>
10009212:	a201      	add	r2, pc, #4	; (adr r2, 10009218 <UART_SetConfig+0x258>)
10009214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009218:	1000922d 	.word	0x1000922d
1000921c:	10009235 	.word	0x10009235
10009220:	1000923d 	.word	0x1000923d
10009224:	10009245 	.word	0x10009245
10009228:	1000924d 	.word	0x1000924d
1000922c:	2300      	movs	r3, #0
1000922e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009232:	e0b8      	b.n	100093a6 <UART_SetConfig+0x3e6>
10009234:	2308      	movs	r3, #8
10009236:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000923a:	e0b4      	b.n	100093a6 <UART_SetConfig+0x3e6>
1000923c:	2310      	movs	r3, #16
1000923e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009242:	e0b0      	b.n	100093a6 <UART_SetConfig+0x3e6>
10009244:	2320      	movs	r3, #32
10009246:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000924a:	e0ac      	b.n	100093a6 <UART_SetConfig+0x3e6>
1000924c:	2340      	movs	r3, #64	; 0x40
1000924e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009252:	e0a8      	b.n	100093a6 <UART_SetConfig+0x3e6>
10009254:	2380      	movs	r3, #128	; 0x80
10009256:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000925a:	e0a4      	b.n	100093a6 <UART_SetConfig+0x3e6>
1000925c:	687b      	ldr	r3, [r7, #4]
1000925e:	681b      	ldr	r3, [r3, #0]
10009260:	4a1c      	ldr	r2, [pc, #112]	; (100092d4 <UART_SetConfig+0x314>)
10009262:	4293      	cmp	r3, r2
10009264:	d138      	bne.n	100092d8 <UART_SetConfig+0x318>
10009266:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000926a:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
1000926e:	f003 0307 	and.w	r3, r3, #7
10009272:	2b04      	cmp	r3, #4
10009274:	d820      	bhi.n	100092b8 <UART_SetConfig+0x2f8>
10009276:	a201      	add	r2, pc, #4	; (adr r2, 1000927c <UART_SetConfig+0x2bc>)
10009278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000927c:	10009291 	.word	0x10009291
10009280:	10009299 	.word	0x10009299
10009284:	100092a1 	.word	0x100092a1
10009288:	100092a9 	.word	0x100092a9
1000928c:	100092b1 	.word	0x100092b1
10009290:	2301      	movs	r3, #1
10009292:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009296:	e086      	b.n	100093a6 <UART_SetConfig+0x3e6>
10009298:	2308      	movs	r3, #8
1000929a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000929e:	e082      	b.n	100093a6 <UART_SetConfig+0x3e6>
100092a0:	2310      	movs	r3, #16
100092a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100092a6:	e07e      	b.n	100093a6 <UART_SetConfig+0x3e6>
100092a8:	2320      	movs	r3, #32
100092aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100092ae:	e07a      	b.n	100093a6 <UART_SetConfig+0x3e6>
100092b0:	2340      	movs	r3, #64	; 0x40
100092b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100092b6:	e076      	b.n	100093a6 <UART_SetConfig+0x3e6>
100092b8:	2380      	movs	r3, #128	; 0x80
100092ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100092be:	e072      	b.n	100093a6 <UART_SetConfig+0x3e6>
100092c0:	cfff69f3 	.word	0xcfff69f3
100092c4:	4000e000 	.word	0x4000e000
100092c8:	4000f000 	.word	0x4000f000
100092cc:	40010000 	.word	0x40010000
100092d0:	40011000 	.word	0x40011000
100092d4:	44003000 	.word	0x44003000
100092d8:	687b      	ldr	r3, [r7, #4]
100092da:	681b      	ldr	r3, [r3, #0]
100092dc:	4aab      	ldr	r2, [pc, #684]	; (1000958c <UART_SetConfig+0x5cc>)
100092de:	4293      	cmp	r3, r2
100092e0:	d12c      	bne.n	1000933c <UART_SetConfig+0x37c>
100092e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100092e6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
100092ea:	f003 0307 	and.w	r3, r3, #7
100092ee:	2b04      	cmp	r3, #4
100092f0:	d820      	bhi.n	10009334 <UART_SetConfig+0x374>
100092f2:	a201      	add	r2, pc, #4	; (adr r2, 100092f8 <UART_SetConfig+0x338>)
100092f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100092f8:	1000930d 	.word	0x1000930d
100092fc:	10009315 	.word	0x10009315
10009300:	1000931d 	.word	0x1000931d
10009304:	10009325 	.word	0x10009325
10009308:	1000932d 	.word	0x1000932d
1000930c:	2300      	movs	r3, #0
1000930e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009312:	e048      	b.n	100093a6 <UART_SetConfig+0x3e6>
10009314:	2308      	movs	r3, #8
10009316:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000931a:	e044      	b.n	100093a6 <UART_SetConfig+0x3e6>
1000931c:	2310      	movs	r3, #16
1000931e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009322:	e040      	b.n	100093a6 <UART_SetConfig+0x3e6>
10009324:	2320      	movs	r3, #32
10009326:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000932a:	e03c      	b.n	100093a6 <UART_SetConfig+0x3e6>
1000932c:	2340      	movs	r3, #64	; 0x40
1000932e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009332:	e038      	b.n	100093a6 <UART_SetConfig+0x3e6>
10009334:	2380      	movs	r3, #128	; 0x80
10009336:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000933a:	e034      	b.n	100093a6 <UART_SetConfig+0x3e6>
1000933c:	687b      	ldr	r3, [r7, #4]
1000933e:	681b      	ldr	r3, [r3, #0]
10009340:	4a93      	ldr	r2, [pc, #588]	; (10009590 <UART_SetConfig+0x5d0>)
10009342:	4293      	cmp	r3, r2
10009344:	d12c      	bne.n	100093a0 <UART_SetConfig+0x3e0>
10009346:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000934a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
1000934e:	f003 0307 	and.w	r3, r3, #7
10009352:	2b04      	cmp	r3, #4
10009354:	d820      	bhi.n	10009398 <UART_SetConfig+0x3d8>
10009356:	a201      	add	r2, pc, #4	; (adr r2, 1000935c <UART_SetConfig+0x39c>)
10009358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000935c:	10009371 	.word	0x10009371
10009360:	10009379 	.word	0x10009379
10009364:	10009381 	.word	0x10009381
10009368:	10009389 	.word	0x10009389
1000936c:	10009391 	.word	0x10009391
10009370:	2300      	movs	r3, #0
10009372:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009376:	e016      	b.n	100093a6 <UART_SetConfig+0x3e6>
10009378:	2308      	movs	r3, #8
1000937a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000937e:	e012      	b.n	100093a6 <UART_SetConfig+0x3e6>
10009380:	2310      	movs	r3, #16
10009382:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009386:	e00e      	b.n	100093a6 <UART_SetConfig+0x3e6>
10009388:	2320      	movs	r3, #32
1000938a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000938e:	e00a      	b.n	100093a6 <UART_SetConfig+0x3e6>
10009390:	2340      	movs	r3, #64	; 0x40
10009392:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10009396:	e006      	b.n	100093a6 <UART_SetConfig+0x3e6>
10009398:	2380      	movs	r3, #128	; 0x80
1000939a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000939e:	e002      	b.n	100093a6 <UART_SetConfig+0x3e6>
100093a0:	2380      	movs	r3, #128	; 0x80
100093a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
100093a6:	687b      	ldr	r3, [r7, #4]
100093a8:	69db      	ldr	r3, [r3, #28]
100093aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
100093ae:	f040 8354 	bne.w	10009a5a <UART_SetConfig+0xa9a>
  {
    switch (clocksource)
100093b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
100093b6:	2b20      	cmp	r3, #32
100093b8:	dc4a      	bgt.n	10009450 <UART_SetConfig+0x490>
100093ba:	2b00      	cmp	r3, #0
100093bc:	f2c0 832b 	blt.w	10009a16 <UART_SetConfig+0xa56>
100093c0:	2b20      	cmp	r3, #32
100093c2:	f200 8328 	bhi.w	10009a16 <UART_SetConfig+0xa56>
100093c6:	a201      	add	r2, pc, #4	; (adr r2, 100093cc <UART_SetConfig+0x40c>)
100093c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100093cc:	10009459 	.word	0x10009459
100093d0:	10009511 	.word	0x10009511
100093d4:	100095d1 	.word	0x100095d1
100093d8:	10009a17 	.word	0x10009a17
100093dc:	10009689 	.word	0x10009689
100093e0:	10009a17 	.word	0x10009a17
100093e4:	10009a17 	.word	0x10009a17
100093e8:	10009a17 	.word	0x10009a17
100093ec:	10009745 	.word	0x10009745
100093f0:	10009a17 	.word	0x10009a17
100093f4:	10009a17 	.word	0x10009a17
100093f8:	10009a17 	.word	0x10009a17
100093fc:	10009a17 	.word	0x10009a17
10009400:	10009a17 	.word	0x10009a17
10009404:	10009a17 	.word	0x10009a17
10009408:	10009a17 	.word	0x10009a17
1000940c:	10009801 	.word	0x10009801
10009410:	10009a17 	.word	0x10009a17
10009414:	10009a17 	.word	0x10009a17
10009418:	10009a17 	.word	0x10009a17
1000941c:	10009a17 	.word	0x10009a17
10009420:	10009a17 	.word	0x10009a17
10009424:	10009a17 	.word	0x10009a17
10009428:	10009a17 	.word	0x10009a17
1000942c:	10009a17 	.word	0x10009a17
10009430:	10009a17 	.word	0x10009a17
10009434:	10009a17 	.word	0x10009a17
10009438:	10009a17 	.word	0x10009a17
1000943c:	10009a17 	.word	0x10009a17
10009440:	10009a17 	.word	0x10009a17
10009444:	10009a17 	.word	0x10009a17
10009448:	10009a17 	.word	0x10009a17
1000944c:	100098b3 	.word	0x100098b3
10009450:	2b40      	cmp	r3, #64	; 0x40
10009452:	f000 8287 	beq.w	10009964 <UART_SetConfig+0x9a4>
10009456:	e2de      	b.n	10009a16 <UART_SetConfig+0xa56>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
10009458:	f7fb fd9e 	bl	10004f98 <HAL_RCC_GetPCLK1Freq>
1000945c:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000945e:	687b      	ldr	r3, [r7, #4]
10009460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009462:	2b00      	cmp	r3, #0
10009464:	d044      	beq.n	100094f0 <UART_SetConfig+0x530>
10009466:	687b      	ldr	r3, [r7, #4]
10009468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000946a:	2b01      	cmp	r3, #1
1000946c:	d03e      	beq.n	100094ec <UART_SetConfig+0x52c>
1000946e:	687b      	ldr	r3, [r7, #4]
10009470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009472:	2b02      	cmp	r3, #2
10009474:	d038      	beq.n	100094e8 <UART_SetConfig+0x528>
10009476:	687b      	ldr	r3, [r7, #4]
10009478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000947a:	2b03      	cmp	r3, #3
1000947c:	d032      	beq.n	100094e4 <UART_SetConfig+0x524>
1000947e:	687b      	ldr	r3, [r7, #4]
10009480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009482:	2b04      	cmp	r3, #4
10009484:	d02c      	beq.n	100094e0 <UART_SetConfig+0x520>
10009486:	687b      	ldr	r3, [r7, #4]
10009488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000948a:	2b05      	cmp	r3, #5
1000948c:	d026      	beq.n	100094dc <UART_SetConfig+0x51c>
1000948e:	687b      	ldr	r3, [r7, #4]
10009490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009492:	2b06      	cmp	r3, #6
10009494:	d020      	beq.n	100094d8 <UART_SetConfig+0x518>
10009496:	687b      	ldr	r3, [r7, #4]
10009498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000949a:	2b07      	cmp	r3, #7
1000949c:	d01a      	beq.n	100094d4 <UART_SetConfig+0x514>
1000949e:	687b      	ldr	r3, [r7, #4]
100094a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100094a2:	2b08      	cmp	r3, #8
100094a4:	d014      	beq.n	100094d0 <UART_SetConfig+0x510>
100094a6:	687b      	ldr	r3, [r7, #4]
100094a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100094aa:	2b09      	cmp	r3, #9
100094ac:	d00e      	beq.n	100094cc <UART_SetConfig+0x50c>
100094ae:	687b      	ldr	r3, [r7, #4]
100094b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100094b2:	2b0a      	cmp	r3, #10
100094b4:	d008      	beq.n	100094c8 <UART_SetConfig+0x508>
100094b6:	687b      	ldr	r3, [r7, #4]
100094b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100094ba:	2b0b      	cmp	r3, #11
100094bc:	d102      	bne.n	100094c4 <UART_SetConfig+0x504>
100094be:	f44f 7380 	mov.w	r3, #256	; 0x100
100094c2:	e016      	b.n	100094f2 <UART_SetConfig+0x532>
100094c4:	2301      	movs	r3, #1
100094c6:	e014      	b.n	100094f2 <UART_SetConfig+0x532>
100094c8:	2380      	movs	r3, #128	; 0x80
100094ca:	e012      	b.n	100094f2 <UART_SetConfig+0x532>
100094cc:	2340      	movs	r3, #64	; 0x40
100094ce:	e010      	b.n	100094f2 <UART_SetConfig+0x532>
100094d0:	2320      	movs	r3, #32
100094d2:	e00e      	b.n	100094f2 <UART_SetConfig+0x532>
100094d4:	2310      	movs	r3, #16
100094d6:	e00c      	b.n	100094f2 <UART_SetConfig+0x532>
100094d8:	230c      	movs	r3, #12
100094da:	e00a      	b.n	100094f2 <UART_SetConfig+0x532>
100094dc:	230a      	movs	r3, #10
100094de:	e008      	b.n	100094f2 <UART_SetConfig+0x532>
100094e0:	2308      	movs	r3, #8
100094e2:	e006      	b.n	100094f2 <UART_SetConfig+0x532>
100094e4:	2306      	movs	r3, #6
100094e6:	e004      	b.n	100094f2 <UART_SetConfig+0x532>
100094e8:	2304      	movs	r3, #4
100094ea:	e002      	b.n	100094f2 <UART_SetConfig+0x532>
100094ec:	2302      	movs	r3, #2
100094ee:	e000      	b.n	100094f2 <UART_SetConfig+0x532>
100094f0:	2301      	movs	r3, #1
100094f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100094f4:	fbb2 f3f3 	udiv	r3, r2, r3
100094f8:	005a      	lsls	r2, r3, #1
100094fa:	687b      	ldr	r3, [r7, #4]
100094fc:	685b      	ldr	r3, [r3, #4]
100094fe:	085b      	lsrs	r3, r3, #1
10009500:	441a      	add	r2, r3
10009502:	687b      	ldr	r3, [r7, #4]
10009504:	685b      	ldr	r3, [r3, #4]
10009506:	fbb2 f3f3 	udiv	r3, r2, r3
1000950a:	b29b      	uxth	r3, r3
1000950c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000950e:	e286      	b.n	10009a1e <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
10009510:	f7fb fd5d 	bl	10004fce <HAL_RCC_GetPCLK2Freq>
10009514:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009516:	687b      	ldr	r3, [r7, #4]
10009518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000951a:	2b00      	cmp	r3, #0
1000951c:	d048      	beq.n	100095b0 <UART_SetConfig+0x5f0>
1000951e:	687b      	ldr	r3, [r7, #4]
10009520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009522:	2b01      	cmp	r3, #1
10009524:	d042      	beq.n	100095ac <UART_SetConfig+0x5ec>
10009526:	687b      	ldr	r3, [r7, #4]
10009528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000952a:	2b02      	cmp	r3, #2
1000952c:	d03c      	beq.n	100095a8 <UART_SetConfig+0x5e8>
1000952e:	687b      	ldr	r3, [r7, #4]
10009530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009532:	2b03      	cmp	r3, #3
10009534:	d036      	beq.n	100095a4 <UART_SetConfig+0x5e4>
10009536:	687b      	ldr	r3, [r7, #4]
10009538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000953a:	2b04      	cmp	r3, #4
1000953c:	d030      	beq.n	100095a0 <UART_SetConfig+0x5e0>
1000953e:	687b      	ldr	r3, [r7, #4]
10009540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009542:	2b05      	cmp	r3, #5
10009544:	d02a      	beq.n	1000959c <UART_SetConfig+0x5dc>
10009546:	687b      	ldr	r3, [r7, #4]
10009548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000954a:	2b06      	cmp	r3, #6
1000954c:	d024      	beq.n	10009598 <UART_SetConfig+0x5d8>
1000954e:	687b      	ldr	r3, [r7, #4]
10009550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009552:	2b07      	cmp	r3, #7
10009554:	d01e      	beq.n	10009594 <UART_SetConfig+0x5d4>
10009556:	687b      	ldr	r3, [r7, #4]
10009558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000955a:	2b08      	cmp	r3, #8
1000955c:	d014      	beq.n	10009588 <UART_SetConfig+0x5c8>
1000955e:	687b      	ldr	r3, [r7, #4]
10009560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009562:	2b09      	cmp	r3, #9
10009564:	d00e      	beq.n	10009584 <UART_SetConfig+0x5c4>
10009566:	687b      	ldr	r3, [r7, #4]
10009568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000956a:	2b0a      	cmp	r3, #10
1000956c:	d008      	beq.n	10009580 <UART_SetConfig+0x5c0>
1000956e:	687b      	ldr	r3, [r7, #4]
10009570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009572:	2b0b      	cmp	r3, #11
10009574:	d102      	bne.n	1000957c <UART_SetConfig+0x5bc>
10009576:	f44f 7380 	mov.w	r3, #256	; 0x100
1000957a:	e01a      	b.n	100095b2 <UART_SetConfig+0x5f2>
1000957c:	2301      	movs	r3, #1
1000957e:	e018      	b.n	100095b2 <UART_SetConfig+0x5f2>
10009580:	2380      	movs	r3, #128	; 0x80
10009582:	e016      	b.n	100095b2 <UART_SetConfig+0x5f2>
10009584:	2340      	movs	r3, #64	; 0x40
10009586:	e014      	b.n	100095b2 <UART_SetConfig+0x5f2>
10009588:	2320      	movs	r3, #32
1000958a:	e012      	b.n	100095b2 <UART_SetConfig+0x5f2>
1000958c:	40018000 	.word	0x40018000
10009590:	40019000 	.word	0x40019000
10009594:	2310      	movs	r3, #16
10009596:	e00c      	b.n	100095b2 <UART_SetConfig+0x5f2>
10009598:	230c      	movs	r3, #12
1000959a:	e00a      	b.n	100095b2 <UART_SetConfig+0x5f2>
1000959c:	230a      	movs	r3, #10
1000959e:	e008      	b.n	100095b2 <UART_SetConfig+0x5f2>
100095a0:	2308      	movs	r3, #8
100095a2:	e006      	b.n	100095b2 <UART_SetConfig+0x5f2>
100095a4:	2306      	movs	r3, #6
100095a6:	e004      	b.n	100095b2 <UART_SetConfig+0x5f2>
100095a8:	2304      	movs	r3, #4
100095aa:	e002      	b.n	100095b2 <UART_SetConfig+0x5f2>
100095ac:	2302      	movs	r3, #2
100095ae:	e000      	b.n	100095b2 <UART_SetConfig+0x5f2>
100095b0:	2301      	movs	r3, #1
100095b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100095b4:	fbb2 f3f3 	udiv	r3, r2, r3
100095b8:	005a      	lsls	r2, r3, #1
100095ba:	687b      	ldr	r3, [r7, #4]
100095bc:	685b      	ldr	r3, [r3, #4]
100095be:	085b      	lsrs	r3, r3, #1
100095c0:	441a      	add	r2, r3
100095c2:	687b      	ldr	r3, [r7, #4]
100095c4:	685b      	ldr	r3, [r3, #4]
100095c6:	fbb2 f3f3 	udiv	r3, r2, r3
100095ca:	b29b      	uxth	r3, r3
100095cc:	633b      	str	r3, [r7, #48]	; 0x30
        break;
100095ce:	e226      	b.n	10009a1e <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PCLK5:
        pclk = HAL_RCC_GetPCLK5Freq();
100095d0:	f7fb fd33 	bl	1000503a <HAL_RCC_GetPCLK5Freq>
100095d4:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100095d6:	687b      	ldr	r3, [r7, #4]
100095d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100095da:	2b00      	cmp	r3, #0
100095dc:	d044      	beq.n	10009668 <UART_SetConfig+0x6a8>
100095de:	687b      	ldr	r3, [r7, #4]
100095e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100095e2:	2b01      	cmp	r3, #1
100095e4:	d03e      	beq.n	10009664 <UART_SetConfig+0x6a4>
100095e6:	687b      	ldr	r3, [r7, #4]
100095e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100095ea:	2b02      	cmp	r3, #2
100095ec:	d038      	beq.n	10009660 <UART_SetConfig+0x6a0>
100095ee:	687b      	ldr	r3, [r7, #4]
100095f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100095f2:	2b03      	cmp	r3, #3
100095f4:	d032      	beq.n	1000965c <UART_SetConfig+0x69c>
100095f6:	687b      	ldr	r3, [r7, #4]
100095f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100095fa:	2b04      	cmp	r3, #4
100095fc:	d02c      	beq.n	10009658 <UART_SetConfig+0x698>
100095fe:	687b      	ldr	r3, [r7, #4]
10009600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009602:	2b05      	cmp	r3, #5
10009604:	d026      	beq.n	10009654 <UART_SetConfig+0x694>
10009606:	687b      	ldr	r3, [r7, #4]
10009608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000960a:	2b06      	cmp	r3, #6
1000960c:	d020      	beq.n	10009650 <UART_SetConfig+0x690>
1000960e:	687b      	ldr	r3, [r7, #4]
10009610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009612:	2b07      	cmp	r3, #7
10009614:	d01a      	beq.n	1000964c <UART_SetConfig+0x68c>
10009616:	687b      	ldr	r3, [r7, #4]
10009618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000961a:	2b08      	cmp	r3, #8
1000961c:	d014      	beq.n	10009648 <UART_SetConfig+0x688>
1000961e:	687b      	ldr	r3, [r7, #4]
10009620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009622:	2b09      	cmp	r3, #9
10009624:	d00e      	beq.n	10009644 <UART_SetConfig+0x684>
10009626:	687b      	ldr	r3, [r7, #4]
10009628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000962a:	2b0a      	cmp	r3, #10
1000962c:	d008      	beq.n	10009640 <UART_SetConfig+0x680>
1000962e:	687b      	ldr	r3, [r7, #4]
10009630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009632:	2b0b      	cmp	r3, #11
10009634:	d102      	bne.n	1000963c <UART_SetConfig+0x67c>
10009636:	f44f 7380 	mov.w	r3, #256	; 0x100
1000963a:	e016      	b.n	1000966a <UART_SetConfig+0x6aa>
1000963c:	2301      	movs	r3, #1
1000963e:	e014      	b.n	1000966a <UART_SetConfig+0x6aa>
10009640:	2380      	movs	r3, #128	; 0x80
10009642:	e012      	b.n	1000966a <UART_SetConfig+0x6aa>
10009644:	2340      	movs	r3, #64	; 0x40
10009646:	e010      	b.n	1000966a <UART_SetConfig+0x6aa>
10009648:	2320      	movs	r3, #32
1000964a:	e00e      	b.n	1000966a <UART_SetConfig+0x6aa>
1000964c:	2310      	movs	r3, #16
1000964e:	e00c      	b.n	1000966a <UART_SetConfig+0x6aa>
10009650:	230c      	movs	r3, #12
10009652:	e00a      	b.n	1000966a <UART_SetConfig+0x6aa>
10009654:	230a      	movs	r3, #10
10009656:	e008      	b.n	1000966a <UART_SetConfig+0x6aa>
10009658:	2308      	movs	r3, #8
1000965a:	e006      	b.n	1000966a <UART_SetConfig+0x6aa>
1000965c:	2306      	movs	r3, #6
1000965e:	e004      	b.n	1000966a <UART_SetConfig+0x6aa>
10009660:	2304      	movs	r3, #4
10009662:	e002      	b.n	1000966a <UART_SetConfig+0x6aa>
10009664:	2302      	movs	r3, #2
10009666:	e000      	b.n	1000966a <UART_SetConfig+0x6aa>
10009668:	2301      	movs	r3, #1
1000966a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000966c:	fbb2 f3f3 	udiv	r3, r2, r3
10009670:	005a      	lsls	r2, r3, #1
10009672:	687b      	ldr	r3, [r7, #4]
10009674:	685b      	ldr	r3, [r3, #4]
10009676:	085b      	lsrs	r3, r3, #1
10009678:	441a      	add	r2, r3
1000967a:	687b      	ldr	r3, [r7, #4]
1000967c:	685b      	ldr	r3, [r3, #4]
1000967e:	fbb2 f3f3 	udiv	r3, r2, r3
10009682:	b29b      	uxth	r3, r3
10009684:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009686:	e1ca      	b.n	10009a1e <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PLL3Q:
        HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10009688:	f107 0314 	add.w	r3, r7, #20
1000968c:	4618      	mov	r0, r3
1000968e:	f7fb fa81 	bl	10004b94 <HAL_RCC_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009692:	69ba      	ldr	r2, [r7, #24]
10009694:	687b      	ldr	r3, [r7, #4]
10009696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009698:	2b00      	cmp	r3, #0
1000969a:	d044      	beq.n	10009726 <UART_SetConfig+0x766>
1000969c:	687b      	ldr	r3, [r7, #4]
1000969e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100096a0:	2b01      	cmp	r3, #1
100096a2:	d03e      	beq.n	10009722 <UART_SetConfig+0x762>
100096a4:	687b      	ldr	r3, [r7, #4]
100096a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100096a8:	2b02      	cmp	r3, #2
100096aa:	d038      	beq.n	1000971e <UART_SetConfig+0x75e>
100096ac:	687b      	ldr	r3, [r7, #4]
100096ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100096b0:	2b03      	cmp	r3, #3
100096b2:	d032      	beq.n	1000971a <UART_SetConfig+0x75a>
100096b4:	687b      	ldr	r3, [r7, #4]
100096b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100096b8:	2b04      	cmp	r3, #4
100096ba:	d02c      	beq.n	10009716 <UART_SetConfig+0x756>
100096bc:	687b      	ldr	r3, [r7, #4]
100096be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100096c0:	2b05      	cmp	r3, #5
100096c2:	d026      	beq.n	10009712 <UART_SetConfig+0x752>
100096c4:	687b      	ldr	r3, [r7, #4]
100096c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100096c8:	2b06      	cmp	r3, #6
100096ca:	d020      	beq.n	1000970e <UART_SetConfig+0x74e>
100096cc:	687b      	ldr	r3, [r7, #4]
100096ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100096d0:	2b07      	cmp	r3, #7
100096d2:	d01a      	beq.n	1000970a <UART_SetConfig+0x74a>
100096d4:	687b      	ldr	r3, [r7, #4]
100096d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100096d8:	2b08      	cmp	r3, #8
100096da:	d014      	beq.n	10009706 <UART_SetConfig+0x746>
100096dc:	687b      	ldr	r3, [r7, #4]
100096de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100096e0:	2b09      	cmp	r3, #9
100096e2:	d00e      	beq.n	10009702 <UART_SetConfig+0x742>
100096e4:	687b      	ldr	r3, [r7, #4]
100096e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100096e8:	2b0a      	cmp	r3, #10
100096ea:	d008      	beq.n	100096fe <UART_SetConfig+0x73e>
100096ec:	687b      	ldr	r3, [r7, #4]
100096ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100096f0:	2b0b      	cmp	r3, #11
100096f2:	d102      	bne.n	100096fa <UART_SetConfig+0x73a>
100096f4:	f44f 7380 	mov.w	r3, #256	; 0x100
100096f8:	e016      	b.n	10009728 <UART_SetConfig+0x768>
100096fa:	2301      	movs	r3, #1
100096fc:	e014      	b.n	10009728 <UART_SetConfig+0x768>
100096fe:	2380      	movs	r3, #128	; 0x80
10009700:	e012      	b.n	10009728 <UART_SetConfig+0x768>
10009702:	2340      	movs	r3, #64	; 0x40
10009704:	e010      	b.n	10009728 <UART_SetConfig+0x768>
10009706:	2320      	movs	r3, #32
10009708:	e00e      	b.n	10009728 <UART_SetConfig+0x768>
1000970a:	2310      	movs	r3, #16
1000970c:	e00c      	b.n	10009728 <UART_SetConfig+0x768>
1000970e:	230c      	movs	r3, #12
10009710:	e00a      	b.n	10009728 <UART_SetConfig+0x768>
10009712:	230a      	movs	r3, #10
10009714:	e008      	b.n	10009728 <UART_SetConfig+0x768>
10009716:	2308      	movs	r3, #8
10009718:	e006      	b.n	10009728 <UART_SetConfig+0x768>
1000971a:	2306      	movs	r3, #6
1000971c:	e004      	b.n	10009728 <UART_SetConfig+0x768>
1000971e:	2304      	movs	r3, #4
10009720:	e002      	b.n	10009728 <UART_SetConfig+0x768>
10009722:	2302      	movs	r3, #2
10009724:	e000      	b.n	10009728 <UART_SetConfig+0x768>
10009726:	2301      	movs	r3, #1
10009728:	fbb2 f3f3 	udiv	r3, r2, r3
1000972c:	005a      	lsls	r2, r3, #1
1000972e:	687b      	ldr	r3, [r7, #4]
10009730:	685b      	ldr	r3, [r3, #4]
10009732:	085b      	lsrs	r3, r3, #1
10009734:	441a      	add	r2, r3
10009736:	687b      	ldr	r3, [r7, #4]
10009738:	685b      	ldr	r3, [r3, #4]
1000973a:	fbb2 f3f3 	udiv	r3, r2, r3
1000973e:	b29b      	uxth	r3, r3
10009740:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009742:	e16c      	b.n	10009a1e <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PLL4Q:
        HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10009744:	f107 0308 	add.w	r3, r7, #8
10009748:	4618      	mov	r0, r3
1000974a:	f7fb fb1d 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll4_clocks.PLL4_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000974e:	68fa      	ldr	r2, [r7, #12]
10009750:	687b      	ldr	r3, [r7, #4]
10009752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009754:	2b00      	cmp	r3, #0
10009756:	d044      	beq.n	100097e2 <UART_SetConfig+0x822>
10009758:	687b      	ldr	r3, [r7, #4]
1000975a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000975c:	2b01      	cmp	r3, #1
1000975e:	d03e      	beq.n	100097de <UART_SetConfig+0x81e>
10009760:	687b      	ldr	r3, [r7, #4]
10009762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009764:	2b02      	cmp	r3, #2
10009766:	d038      	beq.n	100097da <UART_SetConfig+0x81a>
10009768:	687b      	ldr	r3, [r7, #4]
1000976a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000976c:	2b03      	cmp	r3, #3
1000976e:	d032      	beq.n	100097d6 <UART_SetConfig+0x816>
10009770:	687b      	ldr	r3, [r7, #4]
10009772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009774:	2b04      	cmp	r3, #4
10009776:	d02c      	beq.n	100097d2 <UART_SetConfig+0x812>
10009778:	687b      	ldr	r3, [r7, #4]
1000977a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000977c:	2b05      	cmp	r3, #5
1000977e:	d026      	beq.n	100097ce <UART_SetConfig+0x80e>
10009780:	687b      	ldr	r3, [r7, #4]
10009782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009784:	2b06      	cmp	r3, #6
10009786:	d020      	beq.n	100097ca <UART_SetConfig+0x80a>
10009788:	687b      	ldr	r3, [r7, #4]
1000978a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000978c:	2b07      	cmp	r3, #7
1000978e:	d01a      	beq.n	100097c6 <UART_SetConfig+0x806>
10009790:	687b      	ldr	r3, [r7, #4]
10009792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009794:	2b08      	cmp	r3, #8
10009796:	d014      	beq.n	100097c2 <UART_SetConfig+0x802>
10009798:	687b      	ldr	r3, [r7, #4]
1000979a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000979c:	2b09      	cmp	r3, #9
1000979e:	d00e      	beq.n	100097be <UART_SetConfig+0x7fe>
100097a0:	687b      	ldr	r3, [r7, #4]
100097a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100097a4:	2b0a      	cmp	r3, #10
100097a6:	d008      	beq.n	100097ba <UART_SetConfig+0x7fa>
100097a8:	687b      	ldr	r3, [r7, #4]
100097aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100097ac:	2b0b      	cmp	r3, #11
100097ae:	d102      	bne.n	100097b6 <UART_SetConfig+0x7f6>
100097b0:	f44f 7380 	mov.w	r3, #256	; 0x100
100097b4:	e016      	b.n	100097e4 <UART_SetConfig+0x824>
100097b6:	2301      	movs	r3, #1
100097b8:	e014      	b.n	100097e4 <UART_SetConfig+0x824>
100097ba:	2380      	movs	r3, #128	; 0x80
100097bc:	e012      	b.n	100097e4 <UART_SetConfig+0x824>
100097be:	2340      	movs	r3, #64	; 0x40
100097c0:	e010      	b.n	100097e4 <UART_SetConfig+0x824>
100097c2:	2320      	movs	r3, #32
100097c4:	e00e      	b.n	100097e4 <UART_SetConfig+0x824>
100097c6:	2310      	movs	r3, #16
100097c8:	e00c      	b.n	100097e4 <UART_SetConfig+0x824>
100097ca:	230c      	movs	r3, #12
100097cc:	e00a      	b.n	100097e4 <UART_SetConfig+0x824>
100097ce:	230a      	movs	r3, #10
100097d0:	e008      	b.n	100097e4 <UART_SetConfig+0x824>
100097d2:	2308      	movs	r3, #8
100097d4:	e006      	b.n	100097e4 <UART_SetConfig+0x824>
100097d6:	2306      	movs	r3, #6
100097d8:	e004      	b.n	100097e4 <UART_SetConfig+0x824>
100097da:	2304      	movs	r3, #4
100097dc:	e002      	b.n	100097e4 <UART_SetConfig+0x824>
100097de:	2302      	movs	r3, #2
100097e0:	e000      	b.n	100097e4 <UART_SetConfig+0x824>
100097e2:	2301      	movs	r3, #1
100097e4:	fbb2 f3f3 	udiv	r3, r2, r3
100097e8:	005a      	lsls	r2, r3, #1
100097ea:	687b      	ldr	r3, [r7, #4]
100097ec:	685b      	ldr	r3, [r3, #4]
100097ee:	085b      	lsrs	r3, r3, #1
100097f0:	441a      	add	r2, r3
100097f2:	687b      	ldr	r3, [r7, #4]
100097f4:	685b      	ldr	r3, [r3, #4]
100097f6:	fbb2 f3f3 	udiv	r3, r2, r3
100097fa:	b29b      	uxth	r3, r3
100097fc:	633b      	str	r3, [r7, #48]	; 0x30
        break;
100097fe:	e10e      	b.n	10009a1e <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009800:	687b      	ldr	r3, [r7, #4]
10009802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009804:	2b00      	cmp	r3, #0
10009806:	d044      	beq.n	10009892 <UART_SetConfig+0x8d2>
10009808:	687b      	ldr	r3, [r7, #4]
1000980a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000980c:	2b01      	cmp	r3, #1
1000980e:	d03e      	beq.n	1000988e <UART_SetConfig+0x8ce>
10009810:	687b      	ldr	r3, [r7, #4]
10009812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009814:	2b02      	cmp	r3, #2
10009816:	d038      	beq.n	1000988a <UART_SetConfig+0x8ca>
10009818:	687b      	ldr	r3, [r7, #4]
1000981a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000981c:	2b03      	cmp	r3, #3
1000981e:	d032      	beq.n	10009886 <UART_SetConfig+0x8c6>
10009820:	687b      	ldr	r3, [r7, #4]
10009822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009824:	2b04      	cmp	r3, #4
10009826:	d02c      	beq.n	10009882 <UART_SetConfig+0x8c2>
10009828:	687b      	ldr	r3, [r7, #4]
1000982a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000982c:	2b05      	cmp	r3, #5
1000982e:	d026      	beq.n	1000987e <UART_SetConfig+0x8be>
10009830:	687b      	ldr	r3, [r7, #4]
10009832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009834:	2b06      	cmp	r3, #6
10009836:	d020      	beq.n	1000987a <UART_SetConfig+0x8ba>
10009838:	687b      	ldr	r3, [r7, #4]
1000983a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000983c:	2b07      	cmp	r3, #7
1000983e:	d01a      	beq.n	10009876 <UART_SetConfig+0x8b6>
10009840:	687b      	ldr	r3, [r7, #4]
10009842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009844:	2b08      	cmp	r3, #8
10009846:	d014      	beq.n	10009872 <UART_SetConfig+0x8b2>
10009848:	687b      	ldr	r3, [r7, #4]
1000984a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000984c:	2b09      	cmp	r3, #9
1000984e:	d00e      	beq.n	1000986e <UART_SetConfig+0x8ae>
10009850:	687b      	ldr	r3, [r7, #4]
10009852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009854:	2b0a      	cmp	r3, #10
10009856:	d008      	beq.n	1000986a <UART_SetConfig+0x8aa>
10009858:	687b      	ldr	r3, [r7, #4]
1000985a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000985c:	2b0b      	cmp	r3, #11
1000985e:	d102      	bne.n	10009866 <UART_SetConfig+0x8a6>
10009860:	f44f 7380 	mov.w	r3, #256	; 0x100
10009864:	e016      	b.n	10009894 <UART_SetConfig+0x8d4>
10009866:	2301      	movs	r3, #1
10009868:	e014      	b.n	10009894 <UART_SetConfig+0x8d4>
1000986a:	2380      	movs	r3, #128	; 0x80
1000986c:	e012      	b.n	10009894 <UART_SetConfig+0x8d4>
1000986e:	2340      	movs	r3, #64	; 0x40
10009870:	e010      	b.n	10009894 <UART_SetConfig+0x8d4>
10009872:	2320      	movs	r3, #32
10009874:	e00e      	b.n	10009894 <UART_SetConfig+0x8d4>
10009876:	2310      	movs	r3, #16
10009878:	e00c      	b.n	10009894 <UART_SetConfig+0x8d4>
1000987a:	230c      	movs	r3, #12
1000987c:	e00a      	b.n	10009894 <UART_SetConfig+0x8d4>
1000987e:	230a      	movs	r3, #10
10009880:	e008      	b.n	10009894 <UART_SetConfig+0x8d4>
10009882:	2308      	movs	r3, #8
10009884:	e006      	b.n	10009894 <UART_SetConfig+0x8d4>
10009886:	2306      	movs	r3, #6
10009888:	e004      	b.n	10009894 <UART_SetConfig+0x8d4>
1000988a:	2304      	movs	r3, #4
1000988c:	e002      	b.n	10009894 <UART_SetConfig+0x8d4>
1000988e:	2302      	movs	r3, #2
10009890:	e000      	b.n	10009894 <UART_SetConfig+0x8d4>
10009892:	2301      	movs	r3, #1
10009894:	4a9a      	ldr	r2, [pc, #616]	; (10009b00 <UART_SetConfig+0xb40>)
10009896:	fbb2 f3f3 	udiv	r3, r2, r3
1000989a:	005a      	lsls	r2, r3, #1
1000989c:	687b      	ldr	r3, [r7, #4]
1000989e:	685b      	ldr	r3, [r3, #4]
100098a0:	085b      	lsrs	r3, r3, #1
100098a2:	441a      	add	r2, r3
100098a4:	687b      	ldr	r3, [r7, #4]
100098a6:	685b      	ldr	r3, [r3, #4]
100098a8:	fbb2 f3f3 	udiv	r3, r2, r3
100098ac:	b29b      	uxth	r3, r3
100098ae:	633b      	str	r3, [r7, #48]	; 0x30
        break;
100098b0:	e0b5      	b.n	10009a1e <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100098b2:	687b      	ldr	r3, [r7, #4]
100098b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100098b6:	2b00      	cmp	r3, #0
100098b8:	d044      	beq.n	10009944 <UART_SetConfig+0x984>
100098ba:	687b      	ldr	r3, [r7, #4]
100098bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100098be:	2b01      	cmp	r3, #1
100098c0:	d03e      	beq.n	10009940 <UART_SetConfig+0x980>
100098c2:	687b      	ldr	r3, [r7, #4]
100098c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100098c6:	2b02      	cmp	r3, #2
100098c8:	d038      	beq.n	1000993c <UART_SetConfig+0x97c>
100098ca:	687b      	ldr	r3, [r7, #4]
100098cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100098ce:	2b03      	cmp	r3, #3
100098d0:	d032      	beq.n	10009938 <UART_SetConfig+0x978>
100098d2:	687b      	ldr	r3, [r7, #4]
100098d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100098d6:	2b04      	cmp	r3, #4
100098d8:	d02c      	beq.n	10009934 <UART_SetConfig+0x974>
100098da:	687b      	ldr	r3, [r7, #4]
100098dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100098de:	2b05      	cmp	r3, #5
100098e0:	d026      	beq.n	10009930 <UART_SetConfig+0x970>
100098e2:	687b      	ldr	r3, [r7, #4]
100098e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100098e6:	2b06      	cmp	r3, #6
100098e8:	d020      	beq.n	1000992c <UART_SetConfig+0x96c>
100098ea:	687b      	ldr	r3, [r7, #4]
100098ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100098ee:	2b07      	cmp	r3, #7
100098f0:	d01a      	beq.n	10009928 <UART_SetConfig+0x968>
100098f2:	687b      	ldr	r3, [r7, #4]
100098f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100098f6:	2b08      	cmp	r3, #8
100098f8:	d014      	beq.n	10009924 <UART_SetConfig+0x964>
100098fa:	687b      	ldr	r3, [r7, #4]
100098fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100098fe:	2b09      	cmp	r3, #9
10009900:	d00e      	beq.n	10009920 <UART_SetConfig+0x960>
10009902:	687b      	ldr	r3, [r7, #4]
10009904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009906:	2b0a      	cmp	r3, #10
10009908:	d008      	beq.n	1000991c <UART_SetConfig+0x95c>
1000990a:	687b      	ldr	r3, [r7, #4]
1000990c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000990e:	2b0b      	cmp	r3, #11
10009910:	d102      	bne.n	10009918 <UART_SetConfig+0x958>
10009912:	f44f 7380 	mov.w	r3, #256	; 0x100
10009916:	e016      	b.n	10009946 <UART_SetConfig+0x986>
10009918:	2301      	movs	r3, #1
1000991a:	e014      	b.n	10009946 <UART_SetConfig+0x986>
1000991c:	2380      	movs	r3, #128	; 0x80
1000991e:	e012      	b.n	10009946 <UART_SetConfig+0x986>
10009920:	2340      	movs	r3, #64	; 0x40
10009922:	e010      	b.n	10009946 <UART_SetConfig+0x986>
10009924:	2320      	movs	r3, #32
10009926:	e00e      	b.n	10009946 <UART_SetConfig+0x986>
10009928:	2310      	movs	r3, #16
1000992a:	e00c      	b.n	10009946 <UART_SetConfig+0x986>
1000992c:	230c      	movs	r3, #12
1000992e:	e00a      	b.n	10009946 <UART_SetConfig+0x986>
10009930:	230a      	movs	r3, #10
10009932:	e008      	b.n	10009946 <UART_SetConfig+0x986>
10009934:	2308      	movs	r3, #8
10009936:	e006      	b.n	10009946 <UART_SetConfig+0x986>
10009938:	2306      	movs	r3, #6
1000993a:	e004      	b.n	10009946 <UART_SetConfig+0x986>
1000993c:	2304      	movs	r3, #4
1000993e:	e002      	b.n	10009946 <UART_SetConfig+0x986>
10009940:	2302      	movs	r3, #2
10009942:	e000      	b.n	10009946 <UART_SetConfig+0x986>
10009944:	2301      	movs	r3, #1
10009946:	4a6f      	ldr	r2, [pc, #444]	; (10009b04 <UART_SetConfig+0xb44>)
10009948:	fbb2 f3f3 	udiv	r3, r2, r3
1000994c:	005a      	lsls	r2, r3, #1
1000994e:	687b      	ldr	r3, [r7, #4]
10009950:	685b      	ldr	r3, [r3, #4]
10009952:	085b      	lsrs	r3, r3, #1
10009954:	441a      	add	r2, r3
10009956:	687b      	ldr	r3, [r7, #4]
10009958:	685b      	ldr	r3, [r3, #4]
1000995a:	fbb2 f3f3 	udiv	r3, r2, r3
1000995e:	b29b      	uxth	r3, r3
10009960:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009962:	e05c      	b.n	10009a1e <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_HSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009964:	687b      	ldr	r3, [r7, #4]
10009966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009968:	2b00      	cmp	r3, #0
1000996a:	d044      	beq.n	100099f6 <UART_SetConfig+0xa36>
1000996c:	687b      	ldr	r3, [r7, #4]
1000996e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009970:	2b01      	cmp	r3, #1
10009972:	d03e      	beq.n	100099f2 <UART_SetConfig+0xa32>
10009974:	687b      	ldr	r3, [r7, #4]
10009976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009978:	2b02      	cmp	r3, #2
1000997a:	d038      	beq.n	100099ee <UART_SetConfig+0xa2e>
1000997c:	687b      	ldr	r3, [r7, #4]
1000997e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009980:	2b03      	cmp	r3, #3
10009982:	d032      	beq.n	100099ea <UART_SetConfig+0xa2a>
10009984:	687b      	ldr	r3, [r7, #4]
10009986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009988:	2b04      	cmp	r3, #4
1000998a:	d02c      	beq.n	100099e6 <UART_SetConfig+0xa26>
1000998c:	687b      	ldr	r3, [r7, #4]
1000998e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009990:	2b05      	cmp	r3, #5
10009992:	d026      	beq.n	100099e2 <UART_SetConfig+0xa22>
10009994:	687b      	ldr	r3, [r7, #4]
10009996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009998:	2b06      	cmp	r3, #6
1000999a:	d020      	beq.n	100099de <UART_SetConfig+0xa1e>
1000999c:	687b      	ldr	r3, [r7, #4]
1000999e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100099a0:	2b07      	cmp	r3, #7
100099a2:	d01a      	beq.n	100099da <UART_SetConfig+0xa1a>
100099a4:	687b      	ldr	r3, [r7, #4]
100099a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100099a8:	2b08      	cmp	r3, #8
100099aa:	d014      	beq.n	100099d6 <UART_SetConfig+0xa16>
100099ac:	687b      	ldr	r3, [r7, #4]
100099ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100099b0:	2b09      	cmp	r3, #9
100099b2:	d00e      	beq.n	100099d2 <UART_SetConfig+0xa12>
100099b4:	687b      	ldr	r3, [r7, #4]
100099b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100099b8:	2b0a      	cmp	r3, #10
100099ba:	d008      	beq.n	100099ce <UART_SetConfig+0xa0e>
100099bc:	687b      	ldr	r3, [r7, #4]
100099be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100099c0:	2b0b      	cmp	r3, #11
100099c2:	d102      	bne.n	100099ca <UART_SetConfig+0xa0a>
100099c4:	f44f 7380 	mov.w	r3, #256	; 0x100
100099c8:	e016      	b.n	100099f8 <UART_SetConfig+0xa38>
100099ca:	2301      	movs	r3, #1
100099cc:	e014      	b.n	100099f8 <UART_SetConfig+0xa38>
100099ce:	2380      	movs	r3, #128	; 0x80
100099d0:	e012      	b.n	100099f8 <UART_SetConfig+0xa38>
100099d2:	2340      	movs	r3, #64	; 0x40
100099d4:	e010      	b.n	100099f8 <UART_SetConfig+0xa38>
100099d6:	2320      	movs	r3, #32
100099d8:	e00e      	b.n	100099f8 <UART_SetConfig+0xa38>
100099da:	2310      	movs	r3, #16
100099dc:	e00c      	b.n	100099f8 <UART_SetConfig+0xa38>
100099de:	230c      	movs	r3, #12
100099e0:	e00a      	b.n	100099f8 <UART_SetConfig+0xa38>
100099e2:	230a      	movs	r3, #10
100099e4:	e008      	b.n	100099f8 <UART_SetConfig+0xa38>
100099e6:	2308      	movs	r3, #8
100099e8:	e006      	b.n	100099f8 <UART_SetConfig+0xa38>
100099ea:	2306      	movs	r3, #6
100099ec:	e004      	b.n	100099f8 <UART_SetConfig+0xa38>
100099ee:	2304      	movs	r3, #4
100099f0:	e002      	b.n	100099f8 <UART_SetConfig+0xa38>
100099f2:	2302      	movs	r3, #2
100099f4:	e000      	b.n	100099f8 <UART_SetConfig+0xa38>
100099f6:	2301      	movs	r3, #1
100099f8:	4a43      	ldr	r2, [pc, #268]	; (10009b08 <UART_SetConfig+0xb48>)
100099fa:	fbb2 f3f3 	udiv	r3, r2, r3
100099fe:	005a      	lsls	r2, r3, #1
10009a00:	687b      	ldr	r3, [r7, #4]
10009a02:	685b      	ldr	r3, [r3, #4]
10009a04:	085b      	lsrs	r3, r3, #1
10009a06:	441a      	add	r2, r3
10009a08:	687b      	ldr	r3, [r7, #4]
10009a0a:	685b      	ldr	r3, [r3, #4]
10009a0c:	fbb2 f3f3 	udiv	r3, r2, r3
10009a10:	b29b      	uxth	r3, r3
10009a12:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009a14:	e003      	b.n	10009a1e <UART_SetConfig+0xa5e>
      default:
        ret = HAL_ERROR;
10009a16:	2301      	movs	r3, #1
10009a18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
10009a1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10009a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009a20:	2b0f      	cmp	r3, #15
10009a22:	d916      	bls.n	10009a52 <UART_SetConfig+0xa92>
10009a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
10009a2a:	d212      	bcs.n	10009a52 <UART_SetConfig+0xa92>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
10009a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009a2e:	b29b      	uxth	r3, r3
10009a30:	f023 030f 	bic.w	r3, r3, #15
10009a34:	847b      	strh	r3, [r7, #34]	; 0x22
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
10009a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009a38:	085b      	lsrs	r3, r3, #1
10009a3a:	b29b      	uxth	r3, r3
10009a3c:	f003 0307 	and.w	r3, r3, #7
10009a40:	b29a      	uxth	r2, r3
10009a42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
10009a44:	4313      	orrs	r3, r2
10009a46:	847b      	strh	r3, [r7, #34]	; 0x22
      huart->Instance->BRR = brrtemp;
10009a48:	687b      	ldr	r3, [r7, #4]
10009a4a:	681b      	ldr	r3, [r3, #0]
10009a4c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
10009a4e:	60da      	str	r2, [r3, #12]
10009a50:	e342      	b.n	1000a0d8 <UART_SetConfig+0x1118>
    }
    else
    {
      ret = HAL_ERROR;
10009a52:	2301      	movs	r3, #1
10009a54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
10009a58:	e33e      	b.n	1000a0d8 <UART_SetConfig+0x1118>
    }
  }
  else
  {
    switch (clocksource)
10009a5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
10009a5e:	2b20      	cmp	r3, #32
10009a60:	dc4a      	bgt.n	10009af8 <UART_SetConfig+0xb38>
10009a62:	2b00      	cmp	r3, #0
10009a64:	f2c0 8325 	blt.w	1000a0b2 <UART_SetConfig+0x10f2>
10009a68:	2b20      	cmp	r3, #32
10009a6a:	f200 8322 	bhi.w	1000a0b2 <UART_SetConfig+0x10f2>
10009a6e:	a201      	add	r2, pc, #4	; (adr r2, 10009a74 <UART_SetConfig+0xab4>)
10009a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009a74:	10009b0d 	.word	0x10009b0d
10009a78:	10009bc3 	.word	0x10009bc3
10009a7c:	10009c79 	.word	0x10009c79
10009a80:	1000a0b3 	.word	0x1000a0b3
10009a84:	10009d2f 	.word	0x10009d2f
10009a88:	1000a0b3 	.word	0x1000a0b3
10009a8c:	1000a0b3 	.word	0x1000a0b3
10009a90:	1000a0b3 	.word	0x1000a0b3
10009a94:	10009de9 	.word	0x10009de9
10009a98:	1000a0b3 	.word	0x1000a0b3
10009a9c:	1000a0b3 	.word	0x1000a0b3
10009aa0:	1000a0b3 	.word	0x1000a0b3
10009aa4:	1000a0b3 	.word	0x1000a0b3
10009aa8:	1000a0b3 	.word	0x1000a0b3
10009aac:	1000a0b3 	.word	0x1000a0b3
10009ab0:	1000a0b3 	.word	0x1000a0b3
10009ab4:	10009ea3 	.word	0x10009ea3
10009ab8:	1000a0b3 	.word	0x1000a0b3
10009abc:	1000a0b3 	.word	0x1000a0b3
10009ac0:	1000a0b3 	.word	0x1000a0b3
10009ac4:	1000a0b3 	.word	0x1000a0b3
10009ac8:	1000a0b3 	.word	0x1000a0b3
10009acc:	1000a0b3 	.word	0x1000a0b3
10009ad0:	1000a0b3 	.word	0x1000a0b3
10009ad4:	1000a0b3 	.word	0x1000a0b3
10009ad8:	1000a0b3 	.word	0x1000a0b3
10009adc:	1000a0b3 	.word	0x1000a0b3
10009ae0:	1000a0b3 	.word	0x1000a0b3
10009ae4:	1000a0b3 	.word	0x1000a0b3
10009ae8:	1000a0b3 	.word	0x1000a0b3
10009aec:	1000a0b3 	.word	0x1000a0b3
10009af0:	1000a0b3 	.word	0x1000a0b3
10009af4:	10009f53 	.word	0x10009f53
10009af8:	2b40      	cmp	r3, #64	; 0x40
10009afa:	f000 8282 	beq.w	1000a002 <UART_SetConfig+0x1042>
10009afe:	e2d8      	b.n	1000a0b2 <UART_SetConfig+0x10f2>
10009b00:	03d09000 	.word	0x03d09000
10009b04:	003d0900 	.word	0x003d0900
10009b08:	016e3600 	.word	0x016e3600
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
10009b0c:	f7fb fa44 	bl	10004f98 <HAL_RCC_GetPCLK1Freq>
10009b10:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009b12:	687b      	ldr	r3, [r7, #4]
10009b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b16:	2b00      	cmp	r3, #0
10009b18:	d044      	beq.n	10009ba4 <UART_SetConfig+0xbe4>
10009b1a:	687b      	ldr	r3, [r7, #4]
10009b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b1e:	2b01      	cmp	r3, #1
10009b20:	d03e      	beq.n	10009ba0 <UART_SetConfig+0xbe0>
10009b22:	687b      	ldr	r3, [r7, #4]
10009b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b26:	2b02      	cmp	r3, #2
10009b28:	d038      	beq.n	10009b9c <UART_SetConfig+0xbdc>
10009b2a:	687b      	ldr	r3, [r7, #4]
10009b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b2e:	2b03      	cmp	r3, #3
10009b30:	d032      	beq.n	10009b98 <UART_SetConfig+0xbd8>
10009b32:	687b      	ldr	r3, [r7, #4]
10009b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b36:	2b04      	cmp	r3, #4
10009b38:	d02c      	beq.n	10009b94 <UART_SetConfig+0xbd4>
10009b3a:	687b      	ldr	r3, [r7, #4]
10009b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b3e:	2b05      	cmp	r3, #5
10009b40:	d026      	beq.n	10009b90 <UART_SetConfig+0xbd0>
10009b42:	687b      	ldr	r3, [r7, #4]
10009b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b46:	2b06      	cmp	r3, #6
10009b48:	d020      	beq.n	10009b8c <UART_SetConfig+0xbcc>
10009b4a:	687b      	ldr	r3, [r7, #4]
10009b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b4e:	2b07      	cmp	r3, #7
10009b50:	d01a      	beq.n	10009b88 <UART_SetConfig+0xbc8>
10009b52:	687b      	ldr	r3, [r7, #4]
10009b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b56:	2b08      	cmp	r3, #8
10009b58:	d014      	beq.n	10009b84 <UART_SetConfig+0xbc4>
10009b5a:	687b      	ldr	r3, [r7, #4]
10009b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b5e:	2b09      	cmp	r3, #9
10009b60:	d00e      	beq.n	10009b80 <UART_SetConfig+0xbc0>
10009b62:	687b      	ldr	r3, [r7, #4]
10009b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b66:	2b0a      	cmp	r3, #10
10009b68:	d008      	beq.n	10009b7c <UART_SetConfig+0xbbc>
10009b6a:	687b      	ldr	r3, [r7, #4]
10009b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009b6e:	2b0b      	cmp	r3, #11
10009b70:	d102      	bne.n	10009b78 <UART_SetConfig+0xbb8>
10009b72:	f44f 7380 	mov.w	r3, #256	; 0x100
10009b76:	e016      	b.n	10009ba6 <UART_SetConfig+0xbe6>
10009b78:	2301      	movs	r3, #1
10009b7a:	e014      	b.n	10009ba6 <UART_SetConfig+0xbe6>
10009b7c:	2380      	movs	r3, #128	; 0x80
10009b7e:	e012      	b.n	10009ba6 <UART_SetConfig+0xbe6>
10009b80:	2340      	movs	r3, #64	; 0x40
10009b82:	e010      	b.n	10009ba6 <UART_SetConfig+0xbe6>
10009b84:	2320      	movs	r3, #32
10009b86:	e00e      	b.n	10009ba6 <UART_SetConfig+0xbe6>
10009b88:	2310      	movs	r3, #16
10009b8a:	e00c      	b.n	10009ba6 <UART_SetConfig+0xbe6>
10009b8c:	230c      	movs	r3, #12
10009b8e:	e00a      	b.n	10009ba6 <UART_SetConfig+0xbe6>
10009b90:	230a      	movs	r3, #10
10009b92:	e008      	b.n	10009ba6 <UART_SetConfig+0xbe6>
10009b94:	2308      	movs	r3, #8
10009b96:	e006      	b.n	10009ba6 <UART_SetConfig+0xbe6>
10009b98:	2306      	movs	r3, #6
10009b9a:	e004      	b.n	10009ba6 <UART_SetConfig+0xbe6>
10009b9c:	2304      	movs	r3, #4
10009b9e:	e002      	b.n	10009ba6 <UART_SetConfig+0xbe6>
10009ba0:	2302      	movs	r3, #2
10009ba2:	e000      	b.n	10009ba6 <UART_SetConfig+0xbe6>
10009ba4:	2301      	movs	r3, #1
10009ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10009ba8:	fbb2 f2f3 	udiv	r2, r2, r3
10009bac:	687b      	ldr	r3, [r7, #4]
10009bae:	685b      	ldr	r3, [r3, #4]
10009bb0:	085b      	lsrs	r3, r3, #1
10009bb2:	441a      	add	r2, r3
10009bb4:	687b      	ldr	r3, [r7, #4]
10009bb6:	685b      	ldr	r3, [r3, #4]
10009bb8:	fbb2 f3f3 	udiv	r3, r2, r3
10009bbc:	b29b      	uxth	r3, r3
10009bbe:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009bc0:	e27b      	b.n	1000a0ba <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
10009bc2:	f7fb fa04 	bl	10004fce <HAL_RCC_GetPCLK2Freq>
10009bc6:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009bc8:	687b      	ldr	r3, [r7, #4]
10009bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009bcc:	2b00      	cmp	r3, #0
10009bce:	d044      	beq.n	10009c5a <UART_SetConfig+0xc9a>
10009bd0:	687b      	ldr	r3, [r7, #4]
10009bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009bd4:	2b01      	cmp	r3, #1
10009bd6:	d03e      	beq.n	10009c56 <UART_SetConfig+0xc96>
10009bd8:	687b      	ldr	r3, [r7, #4]
10009bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009bdc:	2b02      	cmp	r3, #2
10009bde:	d038      	beq.n	10009c52 <UART_SetConfig+0xc92>
10009be0:	687b      	ldr	r3, [r7, #4]
10009be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009be4:	2b03      	cmp	r3, #3
10009be6:	d032      	beq.n	10009c4e <UART_SetConfig+0xc8e>
10009be8:	687b      	ldr	r3, [r7, #4]
10009bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009bec:	2b04      	cmp	r3, #4
10009bee:	d02c      	beq.n	10009c4a <UART_SetConfig+0xc8a>
10009bf0:	687b      	ldr	r3, [r7, #4]
10009bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009bf4:	2b05      	cmp	r3, #5
10009bf6:	d026      	beq.n	10009c46 <UART_SetConfig+0xc86>
10009bf8:	687b      	ldr	r3, [r7, #4]
10009bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009bfc:	2b06      	cmp	r3, #6
10009bfe:	d020      	beq.n	10009c42 <UART_SetConfig+0xc82>
10009c00:	687b      	ldr	r3, [r7, #4]
10009c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c04:	2b07      	cmp	r3, #7
10009c06:	d01a      	beq.n	10009c3e <UART_SetConfig+0xc7e>
10009c08:	687b      	ldr	r3, [r7, #4]
10009c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c0c:	2b08      	cmp	r3, #8
10009c0e:	d014      	beq.n	10009c3a <UART_SetConfig+0xc7a>
10009c10:	687b      	ldr	r3, [r7, #4]
10009c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c14:	2b09      	cmp	r3, #9
10009c16:	d00e      	beq.n	10009c36 <UART_SetConfig+0xc76>
10009c18:	687b      	ldr	r3, [r7, #4]
10009c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c1c:	2b0a      	cmp	r3, #10
10009c1e:	d008      	beq.n	10009c32 <UART_SetConfig+0xc72>
10009c20:	687b      	ldr	r3, [r7, #4]
10009c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c24:	2b0b      	cmp	r3, #11
10009c26:	d102      	bne.n	10009c2e <UART_SetConfig+0xc6e>
10009c28:	f44f 7380 	mov.w	r3, #256	; 0x100
10009c2c:	e016      	b.n	10009c5c <UART_SetConfig+0xc9c>
10009c2e:	2301      	movs	r3, #1
10009c30:	e014      	b.n	10009c5c <UART_SetConfig+0xc9c>
10009c32:	2380      	movs	r3, #128	; 0x80
10009c34:	e012      	b.n	10009c5c <UART_SetConfig+0xc9c>
10009c36:	2340      	movs	r3, #64	; 0x40
10009c38:	e010      	b.n	10009c5c <UART_SetConfig+0xc9c>
10009c3a:	2320      	movs	r3, #32
10009c3c:	e00e      	b.n	10009c5c <UART_SetConfig+0xc9c>
10009c3e:	2310      	movs	r3, #16
10009c40:	e00c      	b.n	10009c5c <UART_SetConfig+0xc9c>
10009c42:	230c      	movs	r3, #12
10009c44:	e00a      	b.n	10009c5c <UART_SetConfig+0xc9c>
10009c46:	230a      	movs	r3, #10
10009c48:	e008      	b.n	10009c5c <UART_SetConfig+0xc9c>
10009c4a:	2308      	movs	r3, #8
10009c4c:	e006      	b.n	10009c5c <UART_SetConfig+0xc9c>
10009c4e:	2306      	movs	r3, #6
10009c50:	e004      	b.n	10009c5c <UART_SetConfig+0xc9c>
10009c52:	2304      	movs	r3, #4
10009c54:	e002      	b.n	10009c5c <UART_SetConfig+0xc9c>
10009c56:	2302      	movs	r3, #2
10009c58:	e000      	b.n	10009c5c <UART_SetConfig+0xc9c>
10009c5a:	2301      	movs	r3, #1
10009c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10009c5e:	fbb2 f2f3 	udiv	r2, r2, r3
10009c62:	687b      	ldr	r3, [r7, #4]
10009c64:	685b      	ldr	r3, [r3, #4]
10009c66:	085b      	lsrs	r3, r3, #1
10009c68:	441a      	add	r2, r3
10009c6a:	687b      	ldr	r3, [r7, #4]
10009c6c:	685b      	ldr	r3, [r3, #4]
10009c6e:	fbb2 f3f3 	udiv	r3, r2, r3
10009c72:	b29b      	uxth	r3, r3
10009c74:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009c76:	e220      	b.n	1000a0ba <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PCLK5:
        pclk = HAL_RCC_GetPCLK5Freq();
10009c78:	f7fb f9df 	bl	1000503a <HAL_RCC_GetPCLK5Freq>
10009c7c:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009c7e:	687b      	ldr	r3, [r7, #4]
10009c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c82:	2b00      	cmp	r3, #0
10009c84:	d044      	beq.n	10009d10 <UART_SetConfig+0xd50>
10009c86:	687b      	ldr	r3, [r7, #4]
10009c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c8a:	2b01      	cmp	r3, #1
10009c8c:	d03e      	beq.n	10009d0c <UART_SetConfig+0xd4c>
10009c8e:	687b      	ldr	r3, [r7, #4]
10009c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c92:	2b02      	cmp	r3, #2
10009c94:	d038      	beq.n	10009d08 <UART_SetConfig+0xd48>
10009c96:	687b      	ldr	r3, [r7, #4]
10009c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009c9a:	2b03      	cmp	r3, #3
10009c9c:	d032      	beq.n	10009d04 <UART_SetConfig+0xd44>
10009c9e:	687b      	ldr	r3, [r7, #4]
10009ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ca2:	2b04      	cmp	r3, #4
10009ca4:	d02c      	beq.n	10009d00 <UART_SetConfig+0xd40>
10009ca6:	687b      	ldr	r3, [r7, #4]
10009ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009caa:	2b05      	cmp	r3, #5
10009cac:	d026      	beq.n	10009cfc <UART_SetConfig+0xd3c>
10009cae:	687b      	ldr	r3, [r7, #4]
10009cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009cb2:	2b06      	cmp	r3, #6
10009cb4:	d020      	beq.n	10009cf8 <UART_SetConfig+0xd38>
10009cb6:	687b      	ldr	r3, [r7, #4]
10009cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009cba:	2b07      	cmp	r3, #7
10009cbc:	d01a      	beq.n	10009cf4 <UART_SetConfig+0xd34>
10009cbe:	687b      	ldr	r3, [r7, #4]
10009cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009cc2:	2b08      	cmp	r3, #8
10009cc4:	d014      	beq.n	10009cf0 <UART_SetConfig+0xd30>
10009cc6:	687b      	ldr	r3, [r7, #4]
10009cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009cca:	2b09      	cmp	r3, #9
10009ccc:	d00e      	beq.n	10009cec <UART_SetConfig+0xd2c>
10009cce:	687b      	ldr	r3, [r7, #4]
10009cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009cd2:	2b0a      	cmp	r3, #10
10009cd4:	d008      	beq.n	10009ce8 <UART_SetConfig+0xd28>
10009cd6:	687b      	ldr	r3, [r7, #4]
10009cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009cda:	2b0b      	cmp	r3, #11
10009cdc:	d102      	bne.n	10009ce4 <UART_SetConfig+0xd24>
10009cde:	f44f 7380 	mov.w	r3, #256	; 0x100
10009ce2:	e016      	b.n	10009d12 <UART_SetConfig+0xd52>
10009ce4:	2301      	movs	r3, #1
10009ce6:	e014      	b.n	10009d12 <UART_SetConfig+0xd52>
10009ce8:	2380      	movs	r3, #128	; 0x80
10009cea:	e012      	b.n	10009d12 <UART_SetConfig+0xd52>
10009cec:	2340      	movs	r3, #64	; 0x40
10009cee:	e010      	b.n	10009d12 <UART_SetConfig+0xd52>
10009cf0:	2320      	movs	r3, #32
10009cf2:	e00e      	b.n	10009d12 <UART_SetConfig+0xd52>
10009cf4:	2310      	movs	r3, #16
10009cf6:	e00c      	b.n	10009d12 <UART_SetConfig+0xd52>
10009cf8:	230c      	movs	r3, #12
10009cfa:	e00a      	b.n	10009d12 <UART_SetConfig+0xd52>
10009cfc:	230a      	movs	r3, #10
10009cfe:	e008      	b.n	10009d12 <UART_SetConfig+0xd52>
10009d00:	2308      	movs	r3, #8
10009d02:	e006      	b.n	10009d12 <UART_SetConfig+0xd52>
10009d04:	2306      	movs	r3, #6
10009d06:	e004      	b.n	10009d12 <UART_SetConfig+0xd52>
10009d08:	2304      	movs	r3, #4
10009d0a:	e002      	b.n	10009d12 <UART_SetConfig+0xd52>
10009d0c:	2302      	movs	r3, #2
10009d0e:	e000      	b.n	10009d12 <UART_SetConfig+0xd52>
10009d10:	2301      	movs	r3, #1
10009d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10009d14:	fbb2 f2f3 	udiv	r2, r2, r3
10009d18:	687b      	ldr	r3, [r7, #4]
10009d1a:	685b      	ldr	r3, [r3, #4]
10009d1c:	085b      	lsrs	r3, r3, #1
10009d1e:	441a      	add	r2, r3
10009d20:	687b      	ldr	r3, [r7, #4]
10009d22:	685b      	ldr	r3, [r3, #4]
10009d24:	fbb2 f3f3 	udiv	r3, r2, r3
10009d28:	b29b      	uxth	r3, r3
10009d2a:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009d2c:	e1c5      	b.n	1000a0ba <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PLL3Q:
        HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10009d2e:	f107 0314 	add.w	r3, r7, #20
10009d32:	4618      	mov	r0, r3
10009d34:	f7fa ff2e 	bl	10004b94 <HAL_RCC_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009d38:	69ba      	ldr	r2, [r7, #24]
10009d3a:	687b      	ldr	r3, [r7, #4]
10009d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d3e:	2b00      	cmp	r3, #0
10009d40:	d044      	beq.n	10009dcc <UART_SetConfig+0xe0c>
10009d42:	687b      	ldr	r3, [r7, #4]
10009d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d46:	2b01      	cmp	r3, #1
10009d48:	d03e      	beq.n	10009dc8 <UART_SetConfig+0xe08>
10009d4a:	687b      	ldr	r3, [r7, #4]
10009d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d4e:	2b02      	cmp	r3, #2
10009d50:	d038      	beq.n	10009dc4 <UART_SetConfig+0xe04>
10009d52:	687b      	ldr	r3, [r7, #4]
10009d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d56:	2b03      	cmp	r3, #3
10009d58:	d032      	beq.n	10009dc0 <UART_SetConfig+0xe00>
10009d5a:	687b      	ldr	r3, [r7, #4]
10009d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d5e:	2b04      	cmp	r3, #4
10009d60:	d02c      	beq.n	10009dbc <UART_SetConfig+0xdfc>
10009d62:	687b      	ldr	r3, [r7, #4]
10009d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d66:	2b05      	cmp	r3, #5
10009d68:	d026      	beq.n	10009db8 <UART_SetConfig+0xdf8>
10009d6a:	687b      	ldr	r3, [r7, #4]
10009d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d6e:	2b06      	cmp	r3, #6
10009d70:	d020      	beq.n	10009db4 <UART_SetConfig+0xdf4>
10009d72:	687b      	ldr	r3, [r7, #4]
10009d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d76:	2b07      	cmp	r3, #7
10009d78:	d01a      	beq.n	10009db0 <UART_SetConfig+0xdf0>
10009d7a:	687b      	ldr	r3, [r7, #4]
10009d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d7e:	2b08      	cmp	r3, #8
10009d80:	d014      	beq.n	10009dac <UART_SetConfig+0xdec>
10009d82:	687b      	ldr	r3, [r7, #4]
10009d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d86:	2b09      	cmp	r3, #9
10009d88:	d00e      	beq.n	10009da8 <UART_SetConfig+0xde8>
10009d8a:	687b      	ldr	r3, [r7, #4]
10009d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d8e:	2b0a      	cmp	r3, #10
10009d90:	d008      	beq.n	10009da4 <UART_SetConfig+0xde4>
10009d92:	687b      	ldr	r3, [r7, #4]
10009d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009d96:	2b0b      	cmp	r3, #11
10009d98:	d102      	bne.n	10009da0 <UART_SetConfig+0xde0>
10009d9a:	f44f 7380 	mov.w	r3, #256	; 0x100
10009d9e:	e016      	b.n	10009dce <UART_SetConfig+0xe0e>
10009da0:	2301      	movs	r3, #1
10009da2:	e014      	b.n	10009dce <UART_SetConfig+0xe0e>
10009da4:	2380      	movs	r3, #128	; 0x80
10009da6:	e012      	b.n	10009dce <UART_SetConfig+0xe0e>
10009da8:	2340      	movs	r3, #64	; 0x40
10009daa:	e010      	b.n	10009dce <UART_SetConfig+0xe0e>
10009dac:	2320      	movs	r3, #32
10009dae:	e00e      	b.n	10009dce <UART_SetConfig+0xe0e>
10009db0:	2310      	movs	r3, #16
10009db2:	e00c      	b.n	10009dce <UART_SetConfig+0xe0e>
10009db4:	230c      	movs	r3, #12
10009db6:	e00a      	b.n	10009dce <UART_SetConfig+0xe0e>
10009db8:	230a      	movs	r3, #10
10009dba:	e008      	b.n	10009dce <UART_SetConfig+0xe0e>
10009dbc:	2308      	movs	r3, #8
10009dbe:	e006      	b.n	10009dce <UART_SetConfig+0xe0e>
10009dc0:	2306      	movs	r3, #6
10009dc2:	e004      	b.n	10009dce <UART_SetConfig+0xe0e>
10009dc4:	2304      	movs	r3, #4
10009dc6:	e002      	b.n	10009dce <UART_SetConfig+0xe0e>
10009dc8:	2302      	movs	r3, #2
10009dca:	e000      	b.n	10009dce <UART_SetConfig+0xe0e>
10009dcc:	2301      	movs	r3, #1
10009dce:	fbb2 f2f3 	udiv	r2, r2, r3
10009dd2:	687b      	ldr	r3, [r7, #4]
10009dd4:	685b      	ldr	r3, [r3, #4]
10009dd6:	085b      	lsrs	r3, r3, #1
10009dd8:	441a      	add	r2, r3
10009dda:	687b      	ldr	r3, [r7, #4]
10009ddc:	685b      	ldr	r3, [r3, #4]
10009dde:	fbb2 f3f3 	udiv	r3, r2, r3
10009de2:	b29b      	uxth	r3, r3
10009de4:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009de6:	e168      	b.n	1000a0ba <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PLL4Q:
        HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10009de8:	f107 0308 	add.w	r3, r7, #8
10009dec:	4618      	mov	r0, r3
10009dee:	f7fa ffcb 	bl	10004d88 <HAL_RCC_GetPLL4ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll4_clocks.PLL4_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009df2:	68fa      	ldr	r2, [r7, #12]
10009df4:	687b      	ldr	r3, [r7, #4]
10009df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009df8:	2b00      	cmp	r3, #0
10009dfa:	d044      	beq.n	10009e86 <UART_SetConfig+0xec6>
10009dfc:	687b      	ldr	r3, [r7, #4]
10009dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e00:	2b01      	cmp	r3, #1
10009e02:	d03e      	beq.n	10009e82 <UART_SetConfig+0xec2>
10009e04:	687b      	ldr	r3, [r7, #4]
10009e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e08:	2b02      	cmp	r3, #2
10009e0a:	d038      	beq.n	10009e7e <UART_SetConfig+0xebe>
10009e0c:	687b      	ldr	r3, [r7, #4]
10009e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e10:	2b03      	cmp	r3, #3
10009e12:	d032      	beq.n	10009e7a <UART_SetConfig+0xeba>
10009e14:	687b      	ldr	r3, [r7, #4]
10009e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e18:	2b04      	cmp	r3, #4
10009e1a:	d02c      	beq.n	10009e76 <UART_SetConfig+0xeb6>
10009e1c:	687b      	ldr	r3, [r7, #4]
10009e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e20:	2b05      	cmp	r3, #5
10009e22:	d026      	beq.n	10009e72 <UART_SetConfig+0xeb2>
10009e24:	687b      	ldr	r3, [r7, #4]
10009e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e28:	2b06      	cmp	r3, #6
10009e2a:	d020      	beq.n	10009e6e <UART_SetConfig+0xeae>
10009e2c:	687b      	ldr	r3, [r7, #4]
10009e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e30:	2b07      	cmp	r3, #7
10009e32:	d01a      	beq.n	10009e6a <UART_SetConfig+0xeaa>
10009e34:	687b      	ldr	r3, [r7, #4]
10009e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e38:	2b08      	cmp	r3, #8
10009e3a:	d014      	beq.n	10009e66 <UART_SetConfig+0xea6>
10009e3c:	687b      	ldr	r3, [r7, #4]
10009e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e40:	2b09      	cmp	r3, #9
10009e42:	d00e      	beq.n	10009e62 <UART_SetConfig+0xea2>
10009e44:	687b      	ldr	r3, [r7, #4]
10009e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e48:	2b0a      	cmp	r3, #10
10009e4a:	d008      	beq.n	10009e5e <UART_SetConfig+0xe9e>
10009e4c:	687b      	ldr	r3, [r7, #4]
10009e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009e50:	2b0b      	cmp	r3, #11
10009e52:	d102      	bne.n	10009e5a <UART_SetConfig+0xe9a>
10009e54:	f44f 7380 	mov.w	r3, #256	; 0x100
10009e58:	e016      	b.n	10009e88 <UART_SetConfig+0xec8>
10009e5a:	2301      	movs	r3, #1
10009e5c:	e014      	b.n	10009e88 <UART_SetConfig+0xec8>
10009e5e:	2380      	movs	r3, #128	; 0x80
10009e60:	e012      	b.n	10009e88 <UART_SetConfig+0xec8>
10009e62:	2340      	movs	r3, #64	; 0x40
10009e64:	e010      	b.n	10009e88 <UART_SetConfig+0xec8>
10009e66:	2320      	movs	r3, #32
10009e68:	e00e      	b.n	10009e88 <UART_SetConfig+0xec8>
10009e6a:	2310      	movs	r3, #16
10009e6c:	e00c      	b.n	10009e88 <UART_SetConfig+0xec8>
10009e6e:	230c      	movs	r3, #12
10009e70:	e00a      	b.n	10009e88 <UART_SetConfig+0xec8>
10009e72:	230a      	movs	r3, #10
10009e74:	e008      	b.n	10009e88 <UART_SetConfig+0xec8>
10009e76:	2308      	movs	r3, #8
10009e78:	e006      	b.n	10009e88 <UART_SetConfig+0xec8>
10009e7a:	2306      	movs	r3, #6
10009e7c:	e004      	b.n	10009e88 <UART_SetConfig+0xec8>
10009e7e:	2304      	movs	r3, #4
10009e80:	e002      	b.n	10009e88 <UART_SetConfig+0xec8>
10009e82:	2302      	movs	r3, #2
10009e84:	e000      	b.n	10009e88 <UART_SetConfig+0xec8>
10009e86:	2301      	movs	r3, #1
10009e88:	fbb2 f2f3 	udiv	r2, r2, r3
10009e8c:	687b      	ldr	r3, [r7, #4]
10009e8e:	685b      	ldr	r3, [r3, #4]
10009e90:	085b      	lsrs	r3, r3, #1
10009e92:	441a      	add	r2, r3
10009e94:	687b      	ldr	r3, [r7, #4]
10009e96:	685b      	ldr	r3, [r3, #4]
10009e98:	fbb2 f3f3 	udiv	r3, r2, r3
10009e9c:	b29b      	uxth	r3, r3
10009e9e:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009ea0:	e10b      	b.n	1000a0ba <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009ea2:	687b      	ldr	r3, [r7, #4]
10009ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ea6:	2b00      	cmp	r3, #0
10009ea8:	d044      	beq.n	10009f34 <UART_SetConfig+0xf74>
10009eaa:	687b      	ldr	r3, [r7, #4]
10009eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009eae:	2b01      	cmp	r3, #1
10009eb0:	d03e      	beq.n	10009f30 <UART_SetConfig+0xf70>
10009eb2:	687b      	ldr	r3, [r7, #4]
10009eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009eb6:	2b02      	cmp	r3, #2
10009eb8:	d038      	beq.n	10009f2c <UART_SetConfig+0xf6c>
10009eba:	687b      	ldr	r3, [r7, #4]
10009ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ebe:	2b03      	cmp	r3, #3
10009ec0:	d032      	beq.n	10009f28 <UART_SetConfig+0xf68>
10009ec2:	687b      	ldr	r3, [r7, #4]
10009ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ec6:	2b04      	cmp	r3, #4
10009ec8:	d02c      	beq.n	10009f24 <UART_SetConfig+0xf64>
10009eca:	687b      	ldr	r3, [r7, #4]
10009ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ece:	2b05      	cmp	r3, #5
10009ed0:	d026      	beq.n	10009f20 <UART_SetConfig+0xf60>
10009ed2:	687b      	ldr	r3, [r7, #4]
10009ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ed6:	2b06      	cmp	r3, #6
10009ed8:	d020      	beq.n	10009f1c <UART_SetConfig+0xf5c>
10009eda:	687b      	ldr	r3, [r7, #4]
10009edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ede:	2b07      	cmp	r3, #7
10009ee0:	d01a      	beq.n	10009f18 <UART_SetConfig+0xf58>
10009ee2:	687b      	ldr	r3, [r7, #4]
10009ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ee6:	2b08      	cmp	r3, #8
10009ee8:	d014      	beq.n	10009f14 <UART_SetConfig+0xf54>
10009eea:	687b      	ldr	r3, [r7, #4]
10009eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009eee:	2b09      	cmp	r3, #9
10009ef0:	d00e      	beq.n	10009f10 <UART_SetConfig+0xf50>
10009ef2:	687b      	ldr	r3, [r7, #4]
10009ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009ef6:	2b0a      	cmp	r3, #10
10009ef8:	d008      	beq.n	10009f0c <UART_SetConfig+0xf4c>
10009efa:	687b      	ldr	r3, [r7, #4]
10009efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009efe:	2b0b      	cmp	r3, #11
10009f00:	d102      	bne.n	10009f08 <UART_SetConfig+0xf48>
10009f02:	f44f 7380 	mov.w	r3, #256	; 0x100
10009f06:	e016      	b.n	10009f36 <UART_SetConfig+0xf76>
10009f08:	2301      	movs	r3, #1
10009f0a:	e014      	b.n	10009f36 <UART_SetConfig+0xf76>
10009f0c:	2380      	movs	r3, #128	; 0x80
10009f0e:	e012      	b.n	10009f36 <UART_SetConfig+0xf76>
10009f10:	2340      	movs	r3, #64	; 0x40
10009f12:	e010      	b.n	10009f36 <UART_SetConfig+0xf76>
10009f14:	2320      	movs	r3, #32
10009f16:	e00e      	b.n	10009f36 <UART_SetConfig+0xf76>
10009f18:	2310      	movs	r3, #16
10009f1a:	e00c      	b.n	10009f36 <UART_SetConfig+0xf76>
10009f1c:	230c      	movs	r3, #12
10009f1e:	e00a      	b.n	10009f36 <UART_SetConfig+0xf76>
10009f20:	230a      	movs	r3, #10
10009f22:	e008      	b.n	10009f36 <UART_SetConfig+0xf76>
10009f24:	2308      	movs	r3, #8
10009f26:	e006      	b.n	10009f36 <UART_SetConfig+0xf76>
10009f28:	2306      	movs	r3, #6
10009f2a:	e004      	b.n	10009f36 <UART_SetConfig+0xf76>
10009f2c:	2304      	movs	r3, #4
10009f2e:	e002      	b.n	10009f36 <UART_SetConfig+0xf76>
10009f30:	2302      	movs	r3, #2
10009f32:	e000      	b.n	10009f36 <UART_SetConfig+0xf76>
10009f34:	2301      	movs	r3, #1
10009f36:	4a72      	ldr	r2, [pc, #456]	; (1000a100 <UART_SetConfig+0x1140>)
10009f38:	fbb2 f2f3 	udiv	r2, r2, r3
10009f3c:	687b      	ldr	r3, [r7, #4]
10009f3e:	685b      	ldr	r3, [r3, #4]
10009f40:	085b      	lsrs	r3, r3, #1
10009f42:	441a      	add	r2, r3
10009f44:	687b      	ldr	r3, [r7, #4]
10009f46:	685b      	ldr	r3, [r3, #4]
10009f48:	fbb2 f3f3 	udiv	r3, r2, r3
10009f4c:	b29b      	uxth	r3, r3
10009f4e:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10009f50:	e0b3      	b.n	1000a0ba <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10009f52:	687b      	ldr	r3, [r7, #4]
10009f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f56:	2b00      	cmp	r3, #0
10009f58:	d044      	beq.n	10009fe4 <UART_SetConfig+0x1024>
10009f5a:	687b      	ldr	r3, [r7, #4]
10009f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f5e:	2b01      	cmp	r3, #1
10009f60:	d03e      	beq.n	10009fe0 <UART_SetConfig+0x1020>
10009f62:	687b      	ldr	r3, [r7, #4]
10009f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f66:	2b02      	cmp	r3, #2
10009f68:	d038      	beq.n	10009fdc <UART_SetConfig+0x101c>
10009f6a:	687b      	ldr	r3, [r7, #4]
10009f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f6e:	2b03      	cmp	r3, #3
10009f70:	d032      	beq.n	10009fd8 <UART_SetConfig+0x1018>
10009f72:	687b      	ldr	r3, [r7, #4]
10009f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f76:	2b04      	cmp	r3, #4
10009f78:	d02c      	beq.n	10009fd4 <UART_SetConfig+0x1014>
10009f7a:	687b      	ldr	r3, [r7, #4]
10009f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f7e:	2b05      	cmp	r3, #5
10009f80:	d026      	beq.n	10009fd0 <UART_SetConfig+0x1010>
10009f82:	687b      	ldr	r3, [r7, #4]
10009f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f86:	2b06      	cmp	r3, #6
10009f88:	d020      	beq.n	10009fcc <UART_SetConfig+0x100c>
10009f8a:	687b      	ldr	r3, [r7, #4]
10009f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f8e:	2b07      	cmp	r3, #7
10009f90:	d01a      	beq.n	10009fc8 <UART_SetConfig+0x1008>
10009f92:	687b      	ldr	r3, [r7, #4]
10009f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f96:	2b08      	cmp	r3, #8
10009f98:	d014      	beq.n	10009fc4 <UART_SetConfig+0x1004>
10009f9a:	687b      	ldr	r3, [r7, #4]
10009f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009f9e:	2b09      	cmp	r3, #9
10009fa0:	d00e      	beq.n	10009fc0 <UART_SetConfig+0x1000>
10009fa2:	687b      	ldr	r3, [r7, #4]
10009fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009fa6:	2b0a      	cmp	r3, #10
10009fa8:	d008      	beq.n	10009fbc <UART_SetConfig+0xffc>
10009faa:	687b      	ldr	r3, [r7, #4]
10009fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009fae:	2b0b      	cmp	r3, #11
10009fb0:	d102      	bne.n	10009fb8 <UART_SetConfig+0xff8>
10009fb2:	f44f 7380 	mov.w	r3, #256	; 0x100
10009fb6:	e016      	b.n	10009fe6 <UART_SetConfig+0x1026>
10009fb8:	2301      	movs	r3, #1
10009fba:	e014      	b.n	10009fe6 <UART_SetConfig+0x1026>
10009fbc:	2380      	movs	r3, #128	; 0x80
10009fbe:	e012      	b.n	10009fe6 <UART_SetConfig+0x1026>
10009fc0:	2340      	movs	r3, #64	; 0x40
10009fc2:	e010      	b.n	10009fe6 <UART_SetConfig+0x1026>
10009fc4:	2320      	movs	r3, #32
10009fc6:	e00e      	b.n	10009fe6 <UART_SetConfig+0x1026>
10009fc8:	2310      	movs	r3, #16
10009fca:	e00c      	b.n	10009fe6 <UART_SetConfig+0x1026>
10009fcc:	230c      	movs	r3, #12
10009fce:	e00a      	b.n	10009fe6 <UART_SetConfig+0x1026>
10009fd0:	230a      	movs	r3, #10
10009fd2:	e008      	b.n	10009fe6 <UART_SetConfig+0x1026>
10009fd4:	2308      	movs	r3, #8
10009fd6:	e006      	b.n	10009fe6 <UART_SetConfig+0x1026>
10009fd8:	2306      	movs	r3, #6
10009fda:	e004      	b.n	10009fe6 <UART_SetConfig+0x1026>
10009fdc:	2304      	movs	r3, #4
10009fde:	e002      	b.n	10009fe6 <UART_SetConfig+0x1026>
10009fe0:	2302      	movs	r3, #2
10009fe2:	e000      	b.n	10009fe6 <UART_SetConfig+0x1026>
10009fe4:	2301      	movs	r3, #1
10009fe6:	4a47      	ldr	r2, [pc, #284]	; (1000a104 <UART_SetConfig+0x1144>)
10009fe8:	fbb2 f2f3 	udiv	r2, r2, r3
10009fec:	687b      	ldr	r3, [r7, #4]
10009fee:	685b      	ldr	r3, [r3, #4]
10009ff0:	085b      	lsrs	r3, r3, #1
10009ff2:	441a      	add	r2, r3
10009ff4:	687b      	ldr	r3, [r7, #4]
10009ff6:	685b      	ldr	r3, [r3, #4]
10009ff8:	fbb2 f3f3 	udiv	r3, r2, r3
10009ffc:	b29b      	uxth	r3, r3
10009ffe:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a000:	e05b      	b.n	1000a0ba <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_HSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000a002:	687b      	ldr	r3, [r7, #4]
1000a004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a006:	2b00      	cmp	r3, #0
1000a008:	d044      	beq.n	1000a094 <UART_SetConfig+0x10d4>
1000a00a:	687b      	ldr	r3, [r7, #4]
1000a00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a00e:	2b01      	cmp	r3, #1
1000a010:	d03e      	beq.n	1000a090 <UART_SetConfig+0x10d0>
1000a012:	687b      	ldr	r3, [r7, #4]
1000a014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a016:	2b02      	cmp	r3, #2
1000a018:	d038      	beq.n	1000a08c <UART_SetConfig+0x10cc>
1000a01a:	687b      	ldr	r3, [r7, #4]
1000a01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a01e:	2b03      	cmp	r3, #3
1000a020:	d032      	beq.n	1000a088 <UART_SetConfig+0x10c8>
1000a022:	687b      	ldr	r3, [r7, #4]
1000a024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a026:	2b04      	cmp	r3, #4
1000a028:	d02c      	beq.n	1000a084 <UART_SetConfig+0x10c4>
1000a02a:	687b      	ldr	r3, [r7, #4]
1000a02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a02e:	2b05      	cmp	r3, #5
1000a030:	d026      	beq.n	1000a080 <UART_SetConfig+0x10c0>
1000a032:	687b      	ldr	r3, [r7, #4]
1000a034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a036:	2b06      	cmp	r3, #6
1000a038:	d020      	beq.n	1000a07c <UART_SetConfig+0x10bc>
1000a03a:	687b      	ldr	r3, [r7, #4]
1000a03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a03e:	2b07      	cmp	r3, #7
1000a040:	d01a      	beq.n	1000a078 <UART_SetConfig+0x10b8>
1000a042:	687b      	ldr	r3, [r7, #4]
1000a044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a046:	2b08      	cmp	r3, #8
1000a048:	d014      	beq.n	1000a074 <UART_SetConfig+0x10b4>
1000a04a:	687b      	ldr	r3, [r7, #4]
1000a04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a04e:	2b09      	cmp	r3, #9
1000a050:	d00e      	beq.n	1000a070 <UART_SetConfig+0x10b0>
1000a052:	687b      	ldr	r3, [r7, #4]
1000a054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a056:	2b0a      	cmp	r3, #10
1000a058:	d008      	beq.n	1000a06c <UART_SetConfig+0x10ac>
1000a05a:	687b      	ldr	r3, [r7, #4]
1000a05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a05e:	2b0b      	cmp	r3, #11
1000a060:	d102      	bne.n	1000a068 <UART_SetConfig+0x10a8>
1000a062:	f44f 7380 	mov.w	r3, #256	; 0x100
1000a066:	e016      	b.n	1000a096 <UART_SetConfig+0x10d6>
1000a068:	2301      	movs	r3, #1
1000a06a:	e014      	b.n	1000a096 <UART_SetConfig+0x10d6>
1000a06c:	2380      	movs	r3, #128	; 0x80
1000a06e:	e012      	b.n	1000a096 <UART_SetConfig+0x10d6>
1000a070:	2340      	movs	r3, #64	; 0x40
1000a072:	e010      	b.n	1000a096 <UART_SetConfig+0x10d6>
1000a074:	2320      	movs	r3, #32
1000a076:	e00e      	b.n	1000a096 <UART_SetConfig+0x10d6>
1000a078:	2310      	movs	r3, #16
1000a07a:	e00c      	b.n	1000a096 <UART_SetConfig+0x10d6>
1000a07c:	230c      	movs	r3, #12
1000a07e:	e00a      	b.n	1000a096 <UART_SetConfig+0x10d6>
1000a080:	230a      	movs	r3, #10
1000a082:	e008      	b.n	1000a096 <UART_SetConfig+0x10d6>
1000a084:	2308      	movs	r3, #8
1000a086:	e006      	b.n	1000a096 <UART_SetConfig+0x10d6>
1000a088:	2306      	movs	r3, #6
1000a08a:	e004      	b.n	1000a096 <UART_SetConfig+0x10d6>
1000a08c:	2304      	movs	r3, #4
1000a08e:	e002      	b.n	1000a096 <UART_SetConfig+0x10d6>
1000a090:	2302      	movs	r3, #2
1000a092:	e000      	b.n	1000a096 <UART_SetConfig+0x10d6>
1000a094:	2301      	movs	r3, #1
1000a096:	4a1c      	ldr	r2, [pc, #112]	; (1000a108 <UART_SetConfig+0x1148>)
1000a098:	fbb2 f2f3 	udiv	r2, r2, r3
1000a09c:	687b      	ldr	r3, [r7, #4]
1000a09e:	685b      	ldr	r3, [r3, #4]
1000a0a0:	085b      	lsrs	r3, r3, #1
1000a0a2:	441a      	add	r2, r3
1000a0a4:	687b      	ldr	r3, [r7, #4]
1000a0a6:	685b      	ldr	r3, [r3, #4]
1000a0a8:	fbb2 f3f3 	udiv	r3, r2, r3
1000a0ac:	b29b      	uxth	r3, r3
1000a0ae:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000a0b0:	e003      	b.n	1000a0ba <UART_SetConfig+0x10fa>
      default:
        ret = HAL_ERROR;
1000a0b2:	2301      	movs	r3, #1
1000a0b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
1000a0b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
1000a0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000a0bc:	2b0f      	cmp	r3, #15
1000a0be:	d908      	bls.n	1000a0d2 <UART_SetConfig+0x1112>
1000a0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000a0c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
1000a0c6:	d204      	bcs.n	1000a0d2 <UART_SetConfig+0x1112>
    {
      huart->Instance->BRR = usartdiv;
1000a0c8:	687b      	ldr	r3, [r7, #4]
1000a0ca:	681b      	ldr	r3, [r3, #0]
1000a0cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1000a0ce:	60da      	str	r2, [r3, #12]
1000a0d0:	e002      	b.n	1000a0d8 <UART_SetConfig+0x1118>
    }
    else
    {
      ret = HAL_ERROR;
1000a0d2:	2301      	movs	r3, #1
1000a0d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
1000a0d8:	687b      	ldr	r3, [r7, #4]
1000a0da:	2201      	movs	r2, #1
1000a0dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
1000a0e0:	687b      	ldr	r3, [r7, #4]
1000a0e2:	2201      	movs	r2, #1
1000a0e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
1000a0e8:	687b      	ldr	r3, [r7, #4]
1000a0ea:	2200      	movs	r2, #0
1000a0ec:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
1000a0ee:	687b      	ldr	r3, [r7, #4]
1000a0f0:	2200      	movs	r2, #0
1000a0f2:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
1000a0f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
1000a0f8:	4618      	mov	r0, r3
1000a0fa:	3738      	adds	r7, #56	; 0x38
1000a0fc:	46bd      	mov	sp, r7
1000a0fe:	bd80      	pop	{r7, pc}
1000a100:	03d09000 	.word	0x03d09000
1000a104:	003d0900 	.word	0x003d0900
1000a108:	016e3600 	.word	0x016e3600

1000a10c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
1000a10c:	b480      	push	{r7}
1000a10e:	b083      	sub	sp, #12
1000a110:	af00      	add	r7, sp, #0
1000a112:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
1000a114:	687b      	ldr	r3, [r7, #4]
1000a116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a118:	f003 0301 	and.w	r3, r3, #1
1000a11c:	2b00      	cmp	r3, #0
1000a11e:	d00a      	beq.n	1000a136 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
1000a120:	687b      	ldr	r3, [r7, #4]
1000a122:	681b      	ldr	r3, [r3, #0]
1000a124:	685b      	ldr	r3, [r3, #4]
1000a126:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
1000a12a:	687b      	ldr	r3, [r7, #4]
1000a12c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1000a12e:	687b      	ldr	r3, [r7, #4]
1000a130:	681b      	ldr	r3, [r3, #0]
1000a132:	430a      	orrs	r2, r1
1000a134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
1000a136:	687b      	ldr	r3, [r7, #4]
1000a138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a13a:	f003 0302 	and.w	r3, r3, #2
1000a13e:	2b00      	cmp	r3, #0
1000a140:	d00a      	beq.n	1000a158 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
1000a142:	687b      	ldr	r3, [r7, #4]
1000a144:	681b      	ldr	r3, [r3, #0]
1000a146:	685b      	ldr	r3, [r3, #4]
1000a148:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
1000a14c:	687b      	ldr	r3, [r7, #4]
1000a14e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
1000a150:	687b      	ldr	r3, [r7, #4]
1000a152:	681b      	ldr	r3, [r3, #0]
1000a154:	430a      	orrs	r2, r1
1000a156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
1000a158:	687b      	ldr	r3, [r7, #4]
1000a15a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a15c:	f003 0304 	and.w	r3, r3, #4
1000a160:	2b00      	cmp	r3, #0
1000a162:	d00a      	beq.n	1000a17a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
1000a164:	687b      	ldr	r3, [r7, #4]
1000a166:	681b      	ldr	r3, [r3, #0]
1000a168:	685b      	ldr	r3, [r3, #4]
1000a16a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
1000a16e:	687b      	ldr	r3, [r7, #4]
1000a170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
1000a172:	687b      	ldr	r3, [r7, #4]
1000a174:	681b      	ldr	r3, [r3, #0]
1000a176:	430a      	orrs	r2, r1
1000a178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
1000a17a:	687b      	ldr	r3, [r7, #4]
1000a17c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a17e:	f003 0308 	and.w	r3, r3, #8
1000a182:	2b00      	cmp	r3, #0
1000a184:	d00a      	beq.n	1000a19c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
1000a186:	687b      	ldr	r3, [r7, #4]
1000a188:	681b      	ldr	r3, [r3, #0]
1000a18a:	685b      	ldr	r3, [r3, #4]
1000a18c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
1000a190:	687b      	ldr	r3, [r7, #4]
1000a192:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1000a194:	687b      	ldr	r3, [r7, #4]
1000a196:	681b      	ldr	r3, [r3, #0]
1000a198:	430a      	orrs	r2, r1
1000a19a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
1000a19c:	687b      	ldr	r3, [r7, #4]
1000a19e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a1a0:	f003 0310 	and.w	r3, r3, #16
1000a1a4:	2b00      	cmp	r3, #0
1000a1a6:	d00a      	beq.n	1000a1be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
1000a1a8:	687b      	ldr	r3, [r7, #4]
1000a1aa:	681b      	ldr	r3, [r3, #0]
1000a1ac:	689b      	ldr	r3, [r3, #8]
1000a1ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
1000a1b2:	687b      	ldr	r3, [r7, #4]
1000a1b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
1000a1b6:	687b      	ldr	r3, [r7, #4]
1000a1b8:	681b      	ldr	r3, [r3, #0]
1000a1ba:	430a      	orrs	r2, r1
1000a1bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
1000a1be:	687b      	ldr	r3, [r7, #4]
1000a1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a1c2:	f003 0320 	and.w	r3, r3, #32
1000a1c6:	2b00      	cmp	r3, #0
1000a1c8:	d00a      	beq.n	1000a1e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
1000a1ca:	687b      	ldr	r3, [r7, #4]
1000a1cc:	681b      	ldr	r3, [r3, #0]
1000a1ce:	689b      	ldr	r3, [r3, #8]
1000a1d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
1000a1d4:	687b      	ldr	r3, [r7, #4]
1000a1d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
1000a1d8:	687b      	ldr	r3, [r7, #4]
1000a1da:	681b      	ldr	r3, [r3, #0]
1000a1dc:	430a      	orrs	r2, r1
1000a1de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
1000a1e0:	687b      	ldr	r3, [r7, #4]
1000a1e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a1e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
1000a1e8:	2b00      	cmp	r3, #0
1000a1ea:	d01a      	beq.n	1000a222 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
1000a1ec:	687b      	ldr	r3, [r7, #4]
1000a1ee:	681b      	ldr	r3, [r3, #0]
1000a1f0:	685b      	ldr	r3, [r3, #4]
1000a1f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
1000a1f6:	687b      	ldr	r3, [r7, #4]
1000a1f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
1000a1fa:	687b      	ldr	r3, [r7, #4]
1000a1fc:	681b      	ldr	r3, [r3, #0]
1000a1fe:	430a      	orrs	r2, r1
1000a200:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
1000a202:	687b      	ldr	r3, [r7, #4]
1000a204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1000a206:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
1000a20a:	d10a      	bne.n	1000a222 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
1000a20c:	687b      	ldr	r3, [r7, #4]
1000a20e:	681b      	ldr	r3, [r3, #0]
1000a210:	685b      	ldr	r3, [r3, #4]
1000a212:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
1000a216:	687b      	ldr	r3, [r7, #4]
1000a218:	6c9a      	ldr	r2, [r3, #72]	; 0x48
1000a21a:	687b      	ldr	r3, [r7, #4]
1000a21c:	681b      	ldr	r3, [r3, #0]
1000a21e:	430a      	orrs	r2, r1
1000a220:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
1000a222:	687b      	ldr	r3, [r7, #4]
1000a224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000a226:	f003 0380 	and.w	r3, r3, #128	; 0x80
1000a22a:	2b00      	cmp	r3, #0
1000a22c:	d00a      	beq.n	1000a244 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
1000a22e:	687b      	ldr	r3, [r7, #4]
1000a230:	681b      	ldr	r3, [r3, #0]
1000a232:	685b      	ldr	r3, [r3, #4]
1000a234:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
1000a238:	687b      	ldr	r3, [r7, #4]
1000a23a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
1000a23c:	687b      	ldr	r3, [r7, #4]
1000a23e:	681b      	ldr	r3, [r3, #0]
1000a240:	430a      	orrs	r2, r1
1000a242:	605a      	str	r2, [r3, #4]
  }
}
1000a244:	bf00      	nop
1000a246:	370c      	adds	r7, #12
1000a248:	46bd      	mov	sp, r7
1000a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a24e:	4770      	bx	lr

1000a250 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
1000a250:	b580      	push	{r7, lr}
1000a252:	b086      	sub	sp, #24
1000a254:	af02      	add	r7, sp, #8
1000a256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
1000a258:	687b      	ldr	r3, [r7, #4]
1000a25a:	2200      	movs	r2, #0
1000a25c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
1000a260:	f7f7 fac2 	bl	100017e8 <HAL_GetTick>
1000a264:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
1000a266:	687b      	ldr	r3, [r7, #4]
1000a268:	681b      	ldr	r3, [r3, #0]
1000a26a:	681b      	ldr	r3, [r3, #0]
1000a26c:	f003 0308 	and.w	r3, r3, #8
1000a270:	2b08      	cmp	r3, #8
1000a272:	d10e      	bne.n	1000a292 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
1000a274:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
1000a278:	9300      	str	r3, [sp, #0]
1000a27a:	68fb      	ldr	r3, [r7, #12]
1000a27c:	2200      	movs	r2, #0
1000a27e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
1000a282:	6878      	ldr	r0, [r7, #4]
1000a284:	f000 f82c 	bl	1000a2e0 <UART_WaitOnFlagUntilTimeout>
1000a288:	4603      	mov	r3, r0
1000a28a:	2b00      	cmp	r3, #0
1000a28c:	d001      	beq.n	1000a292 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
1000a28e:	2303      	movs	r3, #3
1000a290:	e022      	b.n	1000a2d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
1000a292:	687b      	ldr	r3, [r7, #4]
1000a294:	681b      	ldr	r3, [r3, #0]
1000a296:	681b      	ldr	r3, [r3, #0]
1000a298:	f003 0304 	and.w	r3, r3, #4
1000a29c:	2b04      	cmp	r3, #4
1000a29e:	d10e      	bne.n	1000a2be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
1000a2a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
1000a2a4:	9300      	str	r3, [sp, #0]
1000a2a6:	68fb      	ldr	r3, [r7, #12]
1000a2a8:	2200      	movs	r2, #0
1000a2aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
1000a2ae:	6878      	ldr	r0, [r7, #4]
1000a2b0:	f000 f816 	bl	1000a2e0 <UART_WaitOnFlagUntilTimeout>
1000a2b4:	4603      	mov	r3, r0
1000a2b6:	2b00      	cmp	r3, #0
1000a2b8:	d001      	beq.n	1000a2be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
1000a2ba:	2303      	movs	r3, #3
1000a2bc:	e00c      	b.n	1000a2d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
1000a2be:	687b      	ldr	r3, [r7, #4]
1000a2c0:	2220      	movs	r2, #32
1000a2c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
1000a2c6:	687b      	ldr	r3, [r7, #4]
1000a2c8:	2220      	movs	r2, #32
1000a2ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  __HAL_UNLOCK(huart);
1000a2ce:	687b      	ldr	r3, [r7, #4]
1000a2d0:	2200      	movs	r2, #0
1000a2d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
1000a2d6:	2300      	movs	r3, #0
}
1000a2d8:	4618      	mov	r0, r3
1000a2da:	3710      	adds	r7, #16
1000a2dc:	46bd      	mov	sp, r7
1000a2de:	bd80      	pop	{r7, pc}

1000a2e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
1000a2e0:	b580      	push	{r7, lr}
1000a2e2:	b084      	sub	sp, #16
1000a2e4:	af00      	add	r7, sp, #0
1000a2e6:	60f8      	str	r0, [r7, #12]
1000a2e8:	60b9      	str	r1, [r7, #8]
1000a2ea:	603b      	str	r3, [r7, #0]
1000a2ec:	4613      	mov	r3, r2
1000a2ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1000a2f0:	e062      	b.n	1000a3b8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
1000a2f2:	69bb      	ldr	r3, [r7, #24]
1000a2f4:	f1b3 3fff 	cmp.w	r3, #4294967295
1000a2f8:	d05e      	beq.n	1000a3b8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
1000a2fa:	f7f7 fa75 	bl	100017e8 <HAL_GetTick>
1000a2fe:	4602      	mov	r2, r0
1000a300:	683b      	ldr	r3, [r7, #0]
1000a302:	1ad3      	subs	r3, r2, r3
1000a304:	69ba      	ldr	r2, [r7, #24]
1000a306:	429a      	cmp	r2, r3
1000a308:	d302      	bcc.n	1000a310 <UART_WaitOnFlagUntilTimeout+0x30>
1000a30a:	69bb      	ldr	r3, [r7, #24]
1000a30c:	2b00      	cmp	r3, #0
1000a30e:	d11d      	bne.n	1000a34c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
1000a310:	68fb      	ldr	r3, [r7, #12]
1000a312:	681b      	ldr	r3, [r3, #0]
1000a314:	681a      	ldr	r2, [r3, #0]
1000a316:	68fb      	ldr	r3, [r7, #12]
1000a318:	681b      	ldr	r3, [r3, #0]
1000a31a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
1000a31e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1000a320:	68fb      	ldr	r3, [r7, #12]
1000a322:	681b      	ldr	r3, [r3, #0]
1000a324:	689a      	ldr	r2, [r3, #8]
1000a326:	68fb      	ldr	r3, [r7, #12]
1000a328:	681b      	ldr	r3, [r3, #0]
1000a32a:	f022 0201 	bic.w	r2, r2, #1
1000a32e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
1000a330:	68fb      	ldr	r3, [r7, #12]
1000a332:	2220      	movs	r2, #32
1000a334:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
1000a338:	68fb      	ldr	r3, [r7, #12]
1000a33a:	2220      	movs	r2, #32
1000a33c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
1000a340:	68fb      	ldr	r3, [r7, #12]
1000a342:	2200      	movs	r2, #0
1000a344:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
1000a348:	2303      	movs	r3, #3
1000a34a:	e045      	b.n	1000a3d8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
1000a34c:	68fb      	ldr	r3, [r7, #12]
1000a34e:	681b      	ldr	r3, [r3, #0]
1000a350:	681b      	ldr	r3, [r3, #0]
1000a352:	f003 0304 	and.w	r3, r3, #4
1000a356:	2b00      	cmp	r3, #0
1000a358:	d02e      	beq.n	1000a3b8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
1000a35a:	68fb      	ldr	r3, [r7, #12]
1000a35c:	681b      	ldr	r3, [r3, #0]
1000a35e:	69db      	ldr	r3, [r3, #28]
1000a360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
1000a364:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
1000a368:	d126      	bne.n	1000a3b8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
1000a36a:	68fb      	ldr	r3, [r7, #12]
1000a36c:	681b      	ldr	r3, [r3, #0]
1000a36e:	f44f 6200 	mov.w	r2, #2048	; 0x800
1000a372:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
1000a374:	68fb      	ldr	r3, [r7, #12]
1000a376:	681b      	ldr	r3, [r3, #0]
1000a378:	681a      	ldr	r2, [r3, #0]
1000a37a:	68fb      	ldr	r3, [r7, #12]
1000a37c:	681b      	ldr	r3, [r3, #0]
1000a37e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
1000a382:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1000a384:	68fb      	ldr	r3, [r7, #12]
1000a386:	681b      	ldr	r3, [r3, #0]
1000a388:	689a      	ldr	r2, [r3, #8]
1000a38a:	68fb      	ldr	r3, [r7, #12]
1000a38c:	681b      	ldr	r3, [r3, #0]
1000a38e:	f022 0201 	bic.w	r2, r2, #1
1000a392:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
1000a394:	68fb      	ldr	r3, [r7, #12]
1000a396:	2220      	movs	r2, #32
1000a398:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
1000a39c:	68fb      	ldr	r3, [r7, #12]
1000a39e:	2220      	movs	r2, #32
1000a3a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
1000a3a4:	68fb      	ldr	r3, [r7, #12]
1000a3a6:	2220      	movs	r2, #32
1000a3a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
1000a3ac:	68fb      	ldr	r3, [r7, #12]
1000a3ae:	2200      	movs	r2, #0
1000a3b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
          
          return HAL_TIMEOUT;
1000a3b4:	2303      	movs	r3, #3
1000a3b6:	e00f      	b.n	1000a3d8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1000a3b8:	68fb      	ldr	r3, [r7, #12]
1000a3ba:	681b      	ldr	r3, [r3, #0]
1000a3bc:	69da      	ldr	r2, [r3, #28]
1000a3be:	68bb      	ldr	r3, [r7, #8]
1000a3c0:	4013      	ands	r3, r2
1000a3c2:	68ba      	ldr	r2, [r7, #8]
1000a3c4:	429a      	cmp	r2, r3
1000a3c6:	bf0c      	ite	eq
1000a3c8:	2301      	moveq	r3, #1
1000a3ca:	2300      	movne	r3, #0
1000a3cc:	b2db      	uxtb	r3, r3
1000a3ce:	461a      	mov	r2, r3
1000a3d0:	79fb      	ldrb	r3, [r7, #7]
1000a3d2:	429a      	cmp	r2, r3
1000a3d4:	d08d      	beq.n	1000a2f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
1000a3d6:	2300      	movs	r3, #0
}
1000a3d8:	4618      	mov	r0, r3
1000a3da:	3710      	adds	r7, #16
1000a3dc:	46bd      	mov	sp, r7
1000a3de:	bd80      	pop	{r7, pc}

1000a3e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
1000a3e0:	b480      	push	{r7}
1000a3e2:	b085      	sub	sp, #20
1000a3e4:	af00      	add	r7, sp, #0
1000a3e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
1000a3e8:	687b      	ldr	r3, [r7, #4]
1000a3ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
1000a3ee:	2b01      	cmp	r3, #1
1000a3f0:	d101      	bne.n	1000a3f6 <HAL_UARTEx_DisableFifoMode+0x16>
1000a3f2:	2302      	movs	r3, #2
1000a3f4:	e027      	b.n	1000a446 <HAL_UARTEx_DisableFifoMode+0x66>
1000a3f6:	687b      	ldr	r3, [r7, #4]
1000a3f8:	2201      	movs	r2, #1
1000a3fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
1000a3fe:	687b      	ldr	r3, [r7, #4]
1000a400:	2224      	movs	r2, #36	; 0x24
1000a402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1000a406:	687b      	ldr	r3, [r7, #4]
1000a408:	681b      	ldr	r3, [r3, #0]
1000a40a:	681b      	ldr	r3, [r3, #0]
1000a40c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1000a40e:	687b      	ldr	r3, [r7, #4]
1000a410:	681b      	ldr	r3, [r3, #0]
1000a412:	681a      	ldr	r2, [r3, #0]
1000a414:	687b      	ldr	r3, [r7, #4]
1000a416:	681b      	ldr	r3, [r3, #0]
1000a418:	f022 0201 	bic.w	r2, r2, #1
1000a41c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
1000a41e:	68fb      	ldr	r3, [r7, #12]
1000a420:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
1000a424:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
1000a426:	687b      	ldr	r3, [r7, #4]
1000a428:	2200      	movs	r2, #0
1000a42a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1000a42c:	687b      	ldr	r3, [r7, #4]
1000a42e:	681b      	ldr	r3, [r3, #0]
1000a430:	68fa      	ldr	r2, [r7, #12]
1000a432:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1000a434:	687b      	ldr	r3, [r7, #4]
1000a436:	2220      	movs	r2, #32
1000a438:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1000a43c:	687b      	ldr	r3, [r7, #4]
1000a43e:	2200      	movs	r2, #0
1000a440:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
1000a444:	2300      	movs	r3, #0
}
1000a446:	4618      	mov	r0, r3
1000a448:	3714      	adds	r7, #20
1000a44a:	46bd      	mov	sp, r7
1000a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a450:	4770      	bx	lr

1000a452 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1000a452:	b580      	push	{r7, lr}
1000a454:	b084      	sub	sp, #16
1000a456:	af00      	add	r7, sp, #0
1000a458:	6078      	str	r0, [r7, #4]
1000a45a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1000a45c:	687b      	ldr	r3, [r7, #4]
1000a45e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
1000a462:	2b01      	cmp	r3, #1
1000a464:	d101      	bne.n	1000a46a <HAL_UARTEx_SetTxFifoThreshold+0x18>
1000a466:	2302      	movs	r3, #2
1000a468:	e02d      	b.n	1000a4c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
1000a46a:	687b      	ldr	r3, [r7, #4]
1000a46c:	2201      	movs	r2, #1
1000a46e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
1000a472:	687b      	ldr	r3, [r7, #4]
1000a474:	2224      	movs	r2, #36	; 0x24
1000a476:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1000a47a:	687b      	ldr	r3, [r7, #4]
1000a47c:	681b      	ldr	r3, [r3, #0]
1000a47e:	681b      	ldr	r3, [r3, #0]
1000a480:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1000a482:	687b      	ldr	r3, [r7, #4]
1000a484:	681b      	ldr	r3, [r3, #0]
1000a486:	681a      	ldr	r2, [r3, #0]
1000a488:	687b      	ldr	r3, [r7, #4]
1000a48a:	681b      	ldr	r3, [r3, #0]
1000a48c:	f022 0201 	bic.w	r2, r2, #1
1000a490:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
1000a492:	687b      	ldr	r3, [r7, #4]
1000a494:	681b      	ldr	r3, [r3, #0]
1000a496:	689b      	ldr	r3, [r3, #8]
1000a498:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
1000a49c:	687b      	ldr	r3, [r7, #4]
1000a49e:	681b      	ldr	r3, [r3, #0]
1000a4a0:	683a      	ldr	r2, [r7, #0]
1000a4a2:	430a      	orrs	r2, r1
1000a4a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1000a4a6:	6878      	ldr	r0, [r7, #4]
1000a4a8:	f000 f850 	bl	1000a54c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1000a4ac:	687b      	ldr	r3, [r7, #4]
1000a4ae:	681b      	ldr	r3, [r3, #0]
1000a4b0:	68fa      	ldr	r2, [r7, #12]
1000a4b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1000a4b4:	687b      	ldr	r3, [r7, #4]
1000a4b6:	2220      	movs	r2, #32
1000a4b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1000a4bc:	687b      	ldr	r3, [r7, #4]
1000a4be:	2200      	movs	r2, #0
1000a4c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
1000a4c4:	2300      	movs	r3, #0
}
1000a4c6:	4618      	mov	r0, r3
1000a4c8:	3710      	adds	r7, #16
1000a4ca:	46bd      	mov	sp, r7
1000a4cc:	bd80      	pop	{r7, pc}

1000a4ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1000a4ce:	b580      	push	{r7, lr}
1000a4d0:	b084      	sub	sp, #16
1000a4d2:	af00      	add	r7, sp, #0
1000a4d4:	6078      	str	r0, [r7, #4]
1000a4d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1000a4d8:	687b      	ldr	r3, [r7, #4]
1000a4da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
1000a4de:	2b01      	cmp	r3, #1
1000a4e0:	d101      	bne.n	1000a4e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
1000a4e2:	2302      	movs	r3, #2
1000a4e4:	e02d      	b.n	1000a542 <HAL_UARTEx_SetRxFifoThreshold+0x74>
1000a4e6:	687b      	ldr	r3, [r7, #4]
1000a4e8:	2201      	movs	r2, #1
1000a4ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
1000a4ee:	687b      	ldr	r3, [r7, #4]
1000a4f0:	2224      	movs	r2, #36	; 0x24
1000a4f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1000a4f6:	687b      	ldr	r3, [r7, #4]
1000a4f8:	681b      	ldr	r3, [r3, #0]
1000a4fa:	681b      	ldr	r3, [r3, #0]
1000a4fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1000a4fe:	687b      	ldr	r3, [r7, #4]
1000a500:	681b      	ldr	r3, [r3, #0]
1000a502:	681a      	ldr	r2, [r3, #0]
1000a504:	687b      	ldr	r3, [r7, #4]
1000a506:	681b      	ldr	r3, [r3, #0]
1000a508:	f022 0201 	bic.w	r2, r2, #1
1000a50c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
1000a50e:	687b      	ldr	r3, [r7, #4]
1000a510:	681b      	ldr	r3, [r3, #0]
1000a512:	689b      	ldr	r3, [r3, #8]
1000a514:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
1000a518:	687b      	ldr	r3, [r7, #4]
1000a51a:	681b      	ldr	r3, [r3, #0]
1000a51c:	683a      	ldr	r2, [r7, #0]
1000a51e:	430a      	orrs	r2, r1
1000a520:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1000a522:	6878      	ldr	r0, [r7, #4]
1000a524:	f000 f812 	bl	1000a54c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1000a528:	687b      	ldr	r3, [r7, #4]
1000a52a:	681b      	ldr	r3, [r3, #0]
1000a52c:	68fa      	ldr	r2, [r7, #12]
1000a52e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1000a530:	687b      	ldr	r3, [r7, #4]
1000a532:	2220      	movs	r2, #32
1000a534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1000a538:	687b      	ldr	r3, [r7, #4]
1000a53a:	2200      	movs	r2, #0
1000a53c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
1000a540:	2300      	movs	r3, #0
}
1000a542:	4618      	mov	r0, r3
1000a544:	3710      	adds	r7, #16
1000a546:	46bd      	mov	sp, r7
1000a548:	bd80      	pop	{r7, pc}
	...

1000a54c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
1000a54c:	b480      	push	{r7}
1000a54e:	b089      	sub	sp, #36	; 0x24
1000a550:	af00      	add	r7, sp, #0
1000a552:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
1000a554:	4a2d      	ldr	r2, [pc, #180]	; (1000a60c <UARTEx_SetNbDataToProcess+0xc0>)
1000a556:	f107 0314 	add.w	r3, r7, #20
1000a55a:	e892 0003 	ldmia.w	r2, {r0, r1}
1000a55e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
1000a562:	4a2b      	ldr	r2, [pc, #172]	; (1000a610 <UARTEx_SetNbDataToProcess+0xc4>)
1000a564:	f107 030c 	add.w	r3, r7, #12
1000a568:	e892 0003 	ldmia.w	r2, {r0, r1}
1000a56c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
1000a570:	687b      	ldr	r3, [r7, #4]
1000a572:	6e5b      	ldr	r3, [r3, #100]	; 0x64
1000a574:	2b00      	cmp	r3, #0
1000a576:	d108      	bne.n	1000a58a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
1000a578:	687b      	ldr	r3, [r7, #4]
1000a57a:	2201      	movs	r2, #1
1000a57c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
1000a580:	687b      	ldr	r3, [r7, #4]
1000a582:	2201      	movs	r2, #1
1000a584:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
1000a588:	e039      	b.n	1000a5fe <UARTEx_SetNbDataToProcess+0xb2>
    rx_fifo_depth = RX_FIFO_DEPTH;
1000a58a:	2308      	movs	r3, #8
1000a58c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
1000a58e:	2308      	movs	r3, #8
1000a590:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
1000a592:	687b      	ldr	r3, [r7, #4]
1000a594:	681b      	ldr	r3, [r3, #0]
1000a596:	689b      	ldr	r3, [r3, #8]
1000a598:	0e5b      	lsrs	r3, r3, #25
1000a59a:	b2db      	uxtb	r3, r3
1000a59c:	f003 0307 	and.w	r3, r3, #7
1000a5a0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
1000a5a2:	687b      	ldr	r3, [r7, #4]
1000a5a4:	681b      	ldr	r3, [r3, #0]
1000a5a6:	689b      	ldr	r3, [r3, #8]
1000a5a8:	0f5b      	lsrs	r3, r3, #29
1000a5aa:	b2db      	uxtb	r3, r3
1000a5ac:	f003 0307 	and.w	r3, r3, #7
1000a5b0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
1000a5b2:	7fbb      	ldrb	r3, [r7, #30]
1000a5b4:	7f3a      	ldrb	r2, [r7, #28]
1000a5b6:	3220      	adds	r2, #32
1000a5b8:	443a      	add	r2, r7
1000a5ba:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
1000a5be:	fb02 f303 	mul.w	r3, r2, r3
1000a5c2:	7f3a      	ldrb	r2, [r7, #28]
1000a5c4:	3220      	adds	r2, #32
1000a5c6:	443a      	add	r2, r7
1000a5c8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
1000a5cc:	fb93 f3f2 	sdiv	r3, r3, r2
1000a5d0:	b29a      	uxth	r2, r3
1000a5d2:	687b      	ldr	r3, [r7, #4]
1000a5d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
1000a5d8:	7ffb      	ldrb	r3, [r7, #31]
1000a5da:	7f7a      	ldrb	r2, [r7, #29]
1000a5dc:	3220      	adds	r2, #32
1000a5de:	443a      	add	r2, r7
1000a5e0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
1000a5e4:	fb02 f303 	mul.w	r3, r2, r3
1000a5e8:	7f7a      	ldrb	r2, [r7, #29]
1000a5ea:	3220      	adds	r2, #32
1000a5ec:	443a      	add	r2, r7
1000a5ee:	f812 2c14 	ldrb.w	r2, [r2, #-20]
1000a5f2:	fb93 f3f2 	sdiv	r3, r3, r2
1000a5f6:	b29a      	uxth	r2, r3
1000a5f8:	687b      	ldr	r3, [r7, #4]
1000a5fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
1000a5fe:	bf00      	nop
1000a600:	3724      	adds	r7, #36	; 0x24
1000a602:	46bd      	mov	sp, r7
1000a604:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a608:	4770      	bx	lr
1000a60a:	bf00      	nop
1000a60c:	1001238c 	.word	0x1001238c
1000a610:	10012394 	.word	0x10012394

1000a614 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
1000a614:	b480      	push	{r7}
1000a616:	b083      	sub	sp, #12
1000a618:	af00      	add	r7, sp, #0
1000a61a:	6078      	str	r0, [r7, #4]
	list->prev = list;
1000a61c:	687b      	ldr	r3, [r7, #4]
1000a61e:	687a      	ldr	r2, [r7, #4]
1000a620:	605a      	str	r2, [r3, #4]
	list->next = list;
1000a622:	687b      	ldr	r3, [r7, #4]
1000a624:	687a      	ldr	r2, [r7, #4]
1000a626:	601a      	str	r2, [r3, #0]
}
1000a628:	bf00      	nop
1000a62a:	370c      	adds	r7, #12
1000a62c:	46bd      	mov	sp, r7
1000a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a632:	4770      	bx	lr

1000a634 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
1000a634:	b480      	push	{r7}
1000a636:	b083      	sub	sp, #12
1000a638:	af00      	add	r7, sp, #0
1000a63a:	6078      	str	r0, [r7, #4]
1000a63c:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
1000a63e:	687b      	ldr	r3, [r7, #4]
1000a640:	685a      	ldr	r2, [r3, #4]
1000a642:	683b      	ldr	r3, [r7, #0]
1000a644:	605a      	str	r2, [r3, #4]
	new_node->next = node;
1000a646:	683b      	ldr	r3, [r7, #0]
1000a648:	687a      	ldr	r2, [r7, #4]
1000a64a:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
1000a64c:	683b      	ldr	r3, [r7, #0]
1000a64e:	681b      	ldr	r3, [r3, #0]
1000a650:	683a      	ldr	r2, [r7, #0]
1000a652:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
1000a654:	683b      	ldr	r3, [r7, #0]
1000a656:	685b      	ldr	r3, [r3, #4]
1000a658:	683a      	ldr	r2, [r7, #0]
1000a65a:	601a      	str	r2, [r3, #0]
}
1000a65c:	bf00      	nop
1000a65e:	370c      	adds	r7, #12
1000a660:	46bd      	mov	sp, r7
1000a662:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a666:	4770      	bx	lr

1000a668 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
1000a668:	b580      	push	{r7, lr}
1000a66a:	b082      	sub	sp, #8
1000a66c:	af00      	add	r7, sp, #0
1000a66e:	6078      	str	r0, [r7, #4]
1000a670:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
1000a672:	6839      	ldr	r1, [r7, #0]
1000a674:	6878      	ldr	r0, [r7, #4]
1000a676:	f7ff ffdd 	bl	1000a634 <metal_list_add_before>
}
1000a67a:	bf00      	nop
1000a67c:	3708      	adds	r7, #8
1000a67e:	46bd      	mov	sp, r7
1000a680:	bd80      	pop	{r7, pc}

1000a682 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
1000a682:	b580      	push	{r7, lr}
1000a684:	b082      	sub	sp, #8
1000a686:	af00      	add	r7, sp, #0
1000a688:	6078      	str	r0, [r7, #4]
1000a68a:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
1000a68c:	6839      	ldr	r1, [r7, #0]
1000a68e:	6878      	ldr	r0, [r7, #4]
1000a690:	f001 fc26 	bl	1000bee0 <metal_machine_cache_flush>
}
1000a694:	bf00      	nop
1000a696:	3708      	adds	r7, #8
1000a698:	46bd      	mov	sp, r7
1000a69a:	bd80      	pop	{r7, pc}

1000a69c <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
1000a69c:	b580      	push	{r7, lr}
1000a69e:	b082      	sub	sp, #8
1000a6a0:	af00      	add	r7, sp, #0
1000a6a2:	6078      	str	r0, [r7, #4]
1000a6a4:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
1000a6a6:	6839      	ldr	r1, [r7, #0]
1000a6a8:	6878      	ldr	r0, [r7, #4]
1000a6aa:	f001 fc24 	bl	1000bef6 <metal_machine_cache_invalidate>
}
1000a6ae:	bf00      	nop
1000a6b0:	3708      	adds	r7, #8
1000a6b2:	46bd      	mov	sp, r7
1000a6b4:	bd80      	pop	{r7, pc}

1000a6b6 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
1000a6b6:	b580      	push	{r7, lr}
1000a6b8:	b082      	sub	sp, #8
1000a6ba:	af00      	add	r7, sp, #0
1000a6bc:	6078      	str	r0, [r7, #4]
1000a6be:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
1000a6c0:	6839      	ldr	r1, [r7, #0]
1000a6c2:	6878      	ldr	r0, [r7, #4]
1000a6c4:	f7ff ffdd 	bl	1000a682 <__metal_cache_flush>
}
1000a6c8:	bf00      	nop
1000a6ca:	3708      	adds	r7, #8
1000a6cc:	46bd      	mov	sp, r7
1000a6ce:	bd80      	pop	{r7, pc}

1000a6d0 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
1000a6d0:	b580      	push	{r7, lr}
1000a6d2:	b082      	sub	sp, #8
1000a6d4:	af00      	add	r7, sp, #0
1000a6d6:	6078      	str	r0, [r7, #4]
1000a6d8:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
1000a6da:	6839      	ldr	r1, [r7, #0]
1000a6dc:	6878      	ldr	r0, [r7, #4]
1000a6de:	f7ff ffdd 	bl	1000a69c <__metal_cache_invalidate>
}
1000a6e2:	bf00      	nop
1000a6e4:	3708      	adds	r7, #8
1000a6e6:	46bd      	mov	sp, r7
1000a6e8:	bd80      	pop	{r7, pc}
	...

1000a6ec <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
1000a6ec:	b580      	push	{r7, lr}
1000a6ee:	b082      	sub	sp, #8
1000a6f0:	af00      	add	r7, sp, #0
1000a6f2:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
1000a6f4:	687b      	ldr	r3, [r7, #4]
1000a6f6:	2b00      	cmp	r3, #0
1000a6f8:	d008      	beq.n	1000a70c <metal_bus_register+0x20>
1000a6fa:	687b      	ldr	r3, [r7, #4]
1000a6fc:	681b      	ldr	r3, [r3, #0]
1000a6fe:	2b00      	cmp	r3, #0
1000a700:	d004      	beq.n	1000a70c <metal_bus_register+0x20>
1000a702:	687b      	ldr	r3, [r7, #4]
1000a704:	681b      	ldr	r3, [r3, #0]
1000a706:	781b      	ldrb	r3, [r3, #0]
1000a708:	2b00      	cmp	r3, #0
1000a70a:	d102      	bne.n	1000a712 <metal_bus_register+0x26>
		return -EINVAL;
1000a70c:	f06f 0315 	mvn.w	r3, #21
1000a710:	e026      	b.n	1000a760 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
1000a712:	687b      	ldr	r3, [r7, #4]
1000a714:	681b      	ldr	r3, [r3, #0]
1000a716:	2100      	movs	r1, #0
1000a718:	4618      	mov	r0, r3
1000a71a:	f000 f82b 	bl	1000a774 <metal_bus_find>
1000a71e:	4603      	mov	r3, r0
1000a720:	2b00      	cmp	r3, #0
1000a722:	d102      	bne.n	1000a72a <metal_bus_register+0x3e>
		return -EEXIST;
1000a724:	f06f 0310 	mvn.w	r3, #16
1000a728:	e01a      	b.n	1000a760 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
1000a72a:	687b      	ldr	r3, [r7, #4]
1000a72c:	331c      	adds	r3, #28
1000a72e:	4618      	mov	r0, r3
1000a730:	f7ff ff70 	bl	1000a614 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
1000a734:	687b      	ldr	r3, [r7, #4]
1000a736:	3324      	adds	r3, #36	; 0x24
1000a738:	4619      	mov	r1, r3
1000a73a:	480b      	ldr	r0, [pc, #44]	; (1000a768 <metal_bus_register+0x7c>)
1000a73c:	f7ff ff94 	bl	1000a668 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
1000a740:	4b0a      	ldr	r3, [pc, #40]	; (1000a76c <metal_bus_register+0x80>)
1000a742:	781b      	ldrb	r3, [r3, #0]
1000a744:	2b06      	cmp	r3, #6
1000a746:	d90a      	bls.n	1000a75e <metal_bus_register+0x72>
1000a748:	4b08      	ldr	r3, [pc, #32]	; (1000a76c <metal_bus_register+0x80>)
1000a74a:	685b      	ldr	r3, [r3, #4]
1000a74c:	2b00      	cmp	r3, #0
1000a74e:	d006      	beq.n	1000a75e <metal_bus_register+0x72>
1000a750:	4b06      	ldr	r3, [pc, #24]	; (1000a76c <metal_bus_register+0x80>)
1000a752:	685b      	ldr	r3, [r3, #4]
1000a754:	687a      	ldr	r2, [r7, #4]
1000a756:	6812      	ldr	r2, [r2, #0]
1000a758:	4905      	ldr	r1, [pc, #20]	; (1000a770 <metal_bus_register+0x84>)
1000a75a:	2007      	movs	r0, #7
1000a75c:	4798      	blx	r3
	return 0;
1000a75e:	2300      	movs	r3, #0
}
1000a760:	4618      	mov	r0, r3
1000a762:	3708      	adds	r7, #8
1000a764:	46bd      	mov	sp, r7
1000a766:	bd80      	pop	{r7, pc}
1000a768:	10029b04 	.word	0x10029b04
1000a76c:	10029afc 	.word	0x10029afc
1000a770:	1001239c 	.word	0x1001239c

1000a774 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
1000a774:	b580      	push	{r7, lr}
1000a776:	b084      	sub	sp, #16
1000a778:	af00      	add	r7, sp, #0
1000a77a:	6078      	str	r0, [r7, #4]
1000a77c:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
1000a77e:	4b12      	ldr	r3, [pc, #72]	; (1000a7c8 <metal_bus_find+0x54>)
1000a780:	689b      	ldr	r3, [r3, #8]
1000a782:	60fb      	str	r3, [r7, #12]
1000a784:	e016      	b.n	1000a7b4 <metal_bus_find+0x40>
		bus = metal_container_of(node, struct metal_bus, node);
1000a786:	68fb      	ldr	r3, [r7, #12]
1000a788:	3b24      	subs	r3, #36	; 0x24
1000a78a:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) == 0 && result) {
1000a78c:	68bb      	ldr	r3, [r7, #8]
1000a78e:	681b      	ldr	r3, [r3, #0]
1000a790:	6879      	ldr	r1, [r7, #4]
1000a792:	4618      	mov	r0, r3
1000a794:	f7f5 fc54 	bl	10000040 <strcmp>
1000a798:	4603      	mov	r3, r0
1000a79a:	2b00      	cmp	r3, #0
1000a79c:	d107      	bne.n	1000a7ae <metal_bus_find+0x3a>
1000a79e:	683b      	ldr	r3, [r7, #0]
1000a7a0:	2b00      	cmp	r3, #0
1000a7a2:	d004      	beq.n	1000a7ae <metal_bus_find+0x3a>
			*result = bus;
1000a7a4:	683b      	ldr	r3, [r7, #0]
1000a7a6:	68ba      	ldr	r2, [r7, #8]
1000a7a8:	601a      	str	r2, [r3, #0]
			return 0;
1000a7aa:	2300      	movs	r3, #0
1000a7ac:	e008      	b.n	1000a7c0 <metal_bus_find+0x4c>
	metal_list_for_each(&_metal.common.bus_list, node) {
1000a7ae:	68fb      	ldr	r3, [r7, #12]
1000a7b0:	681b      	ldr	r3, [r3, #0]
1000a7b2:	60fb      	str	r3, [r7, #12]
1000a7b4:	68fb      	ldr	r3, [r7, #12]
1000a7b6:	4a05      	ldr	r2, [pc, #20]	; (1000a7cc <metal_bus_find+0x58>)
1000a7b8:	4293      	cmp	r3, r2
1000a7ba:	d1e4      	bne.n	1000a786 <metal_bus_find+0x12>
		}
	}
	return -ENOENT;
1000a7bc:	f06f 0301 	mvn.w	r3, #1
}
1000a7c0:	4618      	mov	r0, r3
1000a7c2:	3710      	adds	r7, #16
1000a7c4:	46bd      	mov	sp, r7
1000a7c6:	bd80      	pop	{r7, pc}
1000a7c8:	10029afc 	.word	0x10029afc
1000a7cc:	10029b04 	.word	0x10029b04

1000a7d0 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
1000a7d0:	b580      	push	{r7, lr}
1000a7d2:	b086      	sub	sp, #24
1000a7d4:	af00      	add	r7, sp, #0
1000a7d6:	60f8      	str	r0, [r7, #12]
1000a7d8:	60b9      	str	r1, [r7, #8]
1000a7da:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
1000a7dc:	68fb      	ldr	r3, [r7, #12]
1000a7de:	2b00      	cmp	r3, #0
1000a7e0:	d00d      	beq.n	1000a7fe <metal_device_open+0x2e>
1000a7e2:	68fb      	ldr	r3, [r7, #12]
1000a7e4:	781b      	ldrb	r3, [r3, #0]
1000a7e6:	2b00      	cmp	r3, #0
1000a7e8:	d009      	beq.n	1000a7fe <metal_device_open+0x2e>
1000a7ea:	68bb      	ldr	r3, [r7, #8]
1000a7ec:	2b00      	cmp	r3, #0
1000a7ee:	d006      	beq.n	1000a7fe <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
1000a7f0:	68bb      	ldr	r3, [r7, #8]
1000a7f2:	781b      	ldrb	r3, [r3, #0]
1000a7f4:	2b00      	cmp	r3, #0
1000a7f6:	d002      	beq.n	1000a7fe <metal_device_open+0x2e>
1000a7f8:	687b      	ldr	r3, [r7, #4]
1000a7fa:	2b00      	cmp	r3, #0
1000a7fc:	d102      	bne.n	1000a804 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
1000a7fe:	f06f 0315 	mvn.w	r3, #21
1000a802:	e01f      	b.n	1000a844 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
1000a804:	f107 0310 	add.w	r3, r7, #16
1000a808:	4619      	mov	r1, r3
1000a80a:	68f8      	ldr	r0, [r7, #12]
1000a80c:	f7ff ffb2 	bl	1000a774 <metal_bus_find>
1000a810:	6178      	str	r0, [r7, #20]
	if (error)
1000a812:	697b      	ldr	r3, [r7, #20]
1000a814:	2b00      	cmp	r3, #0
1000a816:	d001      	beq.n	1000a81c <metal_device_open+0x4c>
		return error;
1000a818:	697b      	ldr	r3, [r7, #20]
1000a81a:	e013      	b.n	1000a844 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
1000a81c:	693b      	ldr	r3, [r7, #16]
1000a81e:	689b      	ldr	r3, [r3, #8]
1000a820:	2b00      	cmp	r3, #0
1000a822:	d102      	bne.n	1000a82a <metal_device_open+0x5a>
		return -ENODEV;
1000a824:	f06f 0312 	mvn.w	r3, #18
1000a828:	e00c      	b.n	1000a844 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
1000a82a:	693b      	ldr	r3, [r7, #16]
1000a82c:	689b      	ldr	r3, [r3, #8]
1000a82e:	6938      	ldr	r0, [r7, #16]
1000a830:	687a      	ldr	r2, [r7, #4]
1000a832:	68b9      	ldr	r1, [r7, #8]
1000a834:	4798      	blx	r3
1000a836:	6178      	str	r0, [r7, #20]
	if (error)
1000a838:	697b      	ldr	r3, [r7, #20]
1000a83a:	2b00      	cmp	r3, #0
1000a83c:	d001      	beq.n	1000a842 <metal_device_open+0x72>
		return error;
1000a83e:	697b      	ldr	r3, [r7, #20]
1000a840:	e000      	b.n	1000a844 <metal_device_open+0x74>

	return 0;
1000a842:	2300      	movs	r3, #0
}
1000a844:	4618      	mov	r0, r3
1000a846:	3718      	adds	r7, #24
1000a848:	46bd      	mov	sp, r7
1000a84a:	bd80      	pop	{r7, pc}

1000a84c <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
1000a84c:	b580      	push	{r7, lr}
1000a84e:	b082      	sub	sp, #8
1000a850:	af00      	add	r7, sp, #0
1000a852:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
1000a854:	687b      	ldr	r3, [r7, #4]
1000a856:	681b      	ldr	r3, [r3, #0]
1000a858:	2b00      	cmp	r3, #0
1000a85a:	d008      	beq.n	1000a86e <metal_register_generic_device+0x22>
1000a85c:	687b      	ldr	r3, [r7, #4]
1000a85e:	681b      	ldr	r3, [r3, #0]
1000a860:	781b      	ldrb	r3, [r3, #0]
1000a862:	2b00      	cmp	r3, #0
1000a864:	d003      	beq.n	1000a86e <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
1000a866:	687b      	ldr	r3, [r7, #4]
1000a868:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
1000a86a:	2b02      	cmp	r3, #2
1000a86c:	d902      	bls.n	1000a874 <metal_register_generic_device+0x28>
		return -EINVAL;
1000a86e:	f06f 0315 	mvn.w	r3, #21
1000a872:	e009      	b.n	1000a888 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
1000a874:	687b      	ldr	r3, [r7, #4]
1000a876:	4a06      	ldr	r2, [pc, #24]	; (1000a890 <metal_register_generic_device+0x44>)
1000a878:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
1000a87a:	687b      	ldr	r3, [r7, #4]
1000a87c:	337c      	adds	r3, #124	; 0x7c
1000a87e:	4619      	mov	r1, r3
1000a880:	4804      	ldr	r0, [pc, #16]	; (1000a894 <metal_register_generic_device+0x48>)
1000a882:	f7ff fef1 	bl	1000a668 <metal_list_add_tail>
			    &device->node);
	return 0;
1000a886:	2300      	movs	r3, #0
}
1000a888:	4618      	mov	r0, r3
1000a88a:	3708      	adds	r7, #8
1000a88c:	46bd      	mov	sp, r7
1000a88e:	bd80      	pop	{r7, pc}
1000a890:	10020014 	.word	0x10020014
1000a894:	10029b14 	.word	0x10029b14

1000a898 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
1000a898:	b580      	push	{r7, lr}
1000a89a:	b086      	sub	sp, #24
1000a89c:	af00      	add	r7, sp, #0
1000a89e:	60f8      	str	r0, [r7, #12]
1000a8a0:	60b9      	str	r1, [r7, #8]
1000a8a2:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
1000a8a4:	4b12      	ldr	r3, [pc, #72]	; (1000a8f0 <metal_generic_dev_open+0x58>)
1000a8a6:	699b      	ldr	r3, [r3, #24]
1000a8a8:	617b      	str	r3, [r7, #20]
1000a8aa:	e016      	b.n	1000a8da <metal_generic_dev_open+0x42>
		dev = metal_container_of(node, struct metal_device, node);
1000a8ac:	697b      	ldr	r3, [r7, #20]
1000a8ae:	3b7c      	subs	r3, #124	; 0x7c
1000a8b0:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) == 0) {
1000a8b2:	693b      	ldr	r3, [r7, #16]
1000a8b4:	681b      	ldr	r3, [r3, #0]
1000a8b6:	68b9      	ldr	r1, [r7, #8]
1000a8b8:	4618      	mov	r0, r3
1000a8ba:	f7f5 fbc1 	bl	10000040 <strcmp>
1000a8be:	4603      	mov	r3, r0
1000a8c0:	2b00      	cmp	r3, #0
1000a8c2:	d107      	bne.n	1000a8d4 <metal_generic_dev_open+0x3c>
			*device = dev;
1000a8c4:	687b      	ldr	r3, [r7, #4]
1000a8c6:	693a      	ldr	r2, [r7, #16]
1000a8c8:	601a      	str	r2, [r3, #0]
			return metal_generic_dev_sys_open(dev);
1000a8ca:	6938      	ldr	r0, [r7, #16]
1000a8cc:	f000 f890 	bl	1000a9f0 <metal_generic_dev_sys_open>
1000a8d0:	4603      	mov	r3, r0
1000a8d2:	e008      	b.n	1000a8e6 <metal_generic_dev_open+0x4e>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
1000a8d4:	697b      	ldr	r3, [r7, #20]
1000a8d6:	681b      	ldr	r3, [r3, #0]
1000a8d8:	617b      	str	r3, [r7, #20]
1000a8da:	697b      	ldr	r3, [r7, #20]
1000a8dc:	4a05      	ldr	r2, [pc, #20]	; (1000a8f4 <metal_generic_dev_open+0x5c>)
1000a8de:	4293      	cmp	r3, r2
1000a8e0:	d1e4      	bne.n	1000a8ac <metal_generic_dev_open+0x14>
		}
	}

	return -ENODEV;
1000a8e2:	f06f 0312 	mvn.w	r3, #18
}
1000a8e6:	4618      	mov	r0, r3
1000a8e8:	3718      	adds	r7, #24
1000a8ea:	46bd      	mov	sp, r7
1000a8ec:	bd80      	pop	{r7, pc}
1000a8ee:	bf00      	nop
1000a8f0:	10029afc 	.word	0x10029afc
1000a8f4:	10029b14 	.word	0x10029b14

1000a8f8 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
1000a8f8:	b580      	push	{r7, lr}
1000a8fa:	b086      	sub	sp, #24
1000a8fc:	af00      	add	r7, sp, #0
1000a8fe:	60f8      	str	r0, [r7, #12]
1000a900:	60b9      	str	r1, [r7, #8]
1000a902:	607a      	str	r2, [r7, #4]
1000a904:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;

	if (sg_out != sg_in)
1000a906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000a908:	683b      	ldr	r3, [r7, #0]
1000a90a:	429a      	cmp	r2, r3
1000a90c:	d009      	beq.n	1000a922 <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
1000a90e:	6a3a      	ldr	r2, [r7, #32]
1000a910:	4613      	mov	r3, r2
1000a912:	005b      	lsls	r3, r3, #1
1000a914:	4413      	add	r3, r2
1000a916:	009b      	lsls	r3, r3, #2
1000a918:	461a      	mov	r2, r3
1000a91a:	6839      	ldr	r1, [r7, #0]
1000a91c:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000a91e:	f005 fbc8 	bl	100100b2 <memcpy>
	for (i = 0; i < nents_in; i++) {
1000a922:	2300      	movs	r3, #0
1000a924:	617b      	str	r3, [r7, #20]
1000a926:	e02f      	b.n	1000a988 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
1000a928:	687b      	ldr	r3, [r7, #4]
1000a92a:	2b02      	cmp	r3, #2
1000a92c:	d114      	bne.n	1000a958 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
1000a92e:	697a      	ldr	r2, [r7, #20]
1000a930:	4613      	mov	r3, r2
1000a932:	005b      	lsls	r3, r3, #1
1000a934:	4413      	add	r3, r2
1000a936:	009b      	lsls	r3, r3, #2
1000a938:	461a      	mov	r2, r3
1000a93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000a93c:	4413      	add	r3, r2
1000a93e:	6818      	ldr	r0, [r3, #0]
1000a940:	697a      	ldr	r2, [r7, #20]
1000a942:	4613      	mov	r3, r2
1000a944:	005b      	lsls	r3, r3, #1
1000a946:	4413      	add	r3, r2
1000a948:	009b      	lsls	r3, r3, #2
1000a94a:	461a      	mov	r2, r3
1000a94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000a94e:	4413      	add	r3, r2
1000a950:	689b      	ldr	r3, [r3, #8]
1000a952:	4619      	mov	r1, r3
1000a954:	f7ff feaf 	bl	1000a6b6 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
1000a958:	697a      	ldr	r2, [r7, #20]
1000a95a:	4613      	mov	r3, r2
1000a95c:	005b      	lsls	r3, r3, #1
1000a95e:	4413      	add	r3, r2
1000a960:	009b      	lsls	r3, r3, #2
1000a962:	461a      	mov	r2, r3
1000a964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000a966:	4413      	add	r3, r2
1000a968:	6818      	ldr	r0, [r3, #0]
1000a96a:	697a      	ldr	r2, [r7, #20]
1000a96c:	4613      	mov	r3, r2
1000a96e:	005b      	lsls	r3, r3, #1
1000a970:	4413      	add	r3, r2
1000a972:	009b      	lsls	r3, r3, #2
1000a974:	461a      	mov	r2, r3
1000a976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000a978:	4413      	add	r3, r2
1000a97a:	689b      	ldr	r3, [r3, #8]
1000a97c:	4619      	mov	r1, r3
1000a97e:	f7ff fea7 	bl	1000a6d0 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
1000a982:	697b      	ldr	r3, [r7, #20]
1000a984:	3301      	adds	r3, #1
1000a986:	617b      	str	r3, [r7, #20]
1000a988:	697a      	ldr	r2, [r7, #20]
1000a98a:	6a3b      	ldr	r3, [r7, #32]
1000a98c:	429a      	cmp	r2, r3
1000a98e:	dbcb      	blt.n	1000a928 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
1000a990:	6a3b      	ldr	r3, [r7, #32]
}
1000a992:	4618      	mov	r0, r3
1000a994:	3718      	adds	r7, #24
1000a996:	46bd      	mov	sp, r7
1000a998:	bd80      	pop	{r7, pc}

1000a99a <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
1000a99a:	b580      	push	{r7, lr}
1000a99c:	b086      	sub	sp, #24
1000a99e:	af00      	add	r7, sp, #0
1000a9a0:	60f8      	str	r0, [r7, #12]
1000a9a2:	60b9      	str	r1, [r7, #8]
1000a9a4:	607a      	str	r2, [r7, #4]
1000a9a6:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;
	(void)dir;

	for (i = 0; i < nents; i++) {
1000a9a8:	2300      	movs	r3, #0
1000a9aa:	617b      	str	r3, [r7, #20]
1000a9ac:	e017      	b.n	1000a9de <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
1000a9ae:	697a      	ldr	r2, [r7, #20]
1000a9b0:	4613      	mov	r3, r2
1000a9b2:	005b      	lsls	r3, r3, #1
1000a9b4:	4413      	add	r3, r2
1000a9b6:	009b      	lsls	r3, r3, #2
1000a9b8:	461a      	mov	r2, r3
1000a9ba:	683b      	ldr	r3, [r7, #0]
1000a9bc:	4413      	add	r3, r2
1000a9be:	6818      	ldr	r0, [r3, #0]
1000a9c0:	697a      	ldr	r2, [r7, #20]
1000a9c2:	4613      	mov	r3, r2
1000a9c4:	005b      	lsls	r3, r3, #1
1000a9c6:	4413      	add	r3, r2
1000a9c8:	009b      	lsls	r3, r3, #2
1000a9ca:	461a      	mov	r2, r3
1000a9cc:	683b      	ldr	r3, [r7, #0]
1000a9ce:	4413      	add	r3, r2
1000a9d0:	689b      	ldr	r3, [r3, #8]
1000a9d2:	4619      	mov	r1, r3
1000a9d4:	f7ff fe7c 	bl	1000a6d0 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
1000a9d8:	697b      	ldr	r3, [r7, #20]
1000a9da:	3301      	adds	r3, #1
1000a9dc:	617b      	str	r3, [r7, #20]
1000a9de:	697a      	ldr	r2, [r7, #20]
1000a9e0:	6a3b      	ldr	r3, [r7, #32]
1000a9e2:	429a      	cmp	r2, r3
1000a9e4:	dbe3      	blt.n	1000a9ae <metal_generic_dev_dma_unmap+0x14>
	}
}
1000a9e6:	bf00      	nop
1000a9e8:	bf00      	nop
1000a9ea:	3718      	adds	r7, #24
1000a9ec:	46bd      	mov	sp, r7
1000a9ee:	bd80      	pop	{r7, pc}

1000a9f0 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
1000a9f0:	b580      	push	{r7, lr}
1000a9f2:	b084      	sub	sp, #16
1000a9f4:	af00      	add	r7, sp, #0
1000a9f6:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned int i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
1000a9f8:	2300      	movs	r3, #0
1000a9fa:	60fb      	str	r3, [r7, #12]
1000a9fc:	e013      	b.n	1000aa26 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
1000a9fe:	68fa      	ldr	r2, [r7, #12]
1000aa00:	4613      	mov	r3, r2
1000aa02:	00db      	lsls	r3, r3, #3
1000aa04:	1a9b      	subs	r3, r3, r2
1000aa06:	00db      	lsls	r3, r3, #3
1000aa08:	3308      	adds	r3, #8
1000aa0a:	687a      	ldr	r2, [r7, #4]
1000aa0c:	4413      	add	r3, r2
1000aa0e:	3304      	adds	r3, #4
1000aa10:	60bb      	str	r3, [r7, #8]
		if (!io->size)
1000aa12:	68bb      	ldr	r3, [r7, #8]
1000aa14:	689b      	ldr	r3, [r3, #8]
1000aa16:	2b00      	cmp	r3, #0
1000aa18:	d00b      	beq.n	1000aa32 <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
1000aa1a:	68b8      	ldr	r0, [r7, #8]
1000aa1c:	f000 f81e 	bl	1000aa5c <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
1000aa20:	68fb      	ldr	r3, [r7, #12]
1000aa22:	3301      	adds	r3, #1
1000aa24:	60fb      	str	r3, [r7, #12]
1000aa26:	687b      	ldr	r3, [r7, #4]
1000aa28:	689b      	ldr	r3, [r3, #8]
1000aa2a:	68fa      	ldr	r2, [r7, #12]
1000aa2c:	429a      	cmp	r2, r3
1000aa2e:	d3e6      	bcc.n	1000a9fe <metal_generic_dev_sys_open+0xe>
1000aa30:	e000      	b.n	1000aa34 <metal_generic_dev_sys_open+0x44>
			break;
1000aa32:	bf00      	nop
	}

	return 0;
1000aa34:	2300      	movs	r3, #0
}
1000aa36:	4618      	mov	r0, r3
1000aa38:	3710      	adds	r7, #16
1000aa3a:	46bd      	mov	sp, r7
1000aa3c:	bd80      	pop	{r7, pc}
	...

1000aa40 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
1000aa40:	b580      	push	{r7, lr}
1000aa42:	b082      	sub	sp, #8
1000aa44:	af00      	add	r7, sp, #0
1000aa46:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
1000aa48:	4803      	ldr	r0, [pc, #12]	; (1000aa58 <metal_sys_init+0x18>)
1000aa4a:	f7ff fe4f 	bl	1000a6ec <metal_bus_register>
	return 0;
1000aa4e:	2300      	movs	r3, #0
}
1000aa50:	4618      	mov	r0, r3
1000aa52:	3708      	adds	r7, #8
1000aa54:	46bd      	mov	sp, r7
1000aa56:	bd80      	pop	{r7, pc}
1000aa58:	10020014 	.word	0x10020014

1000aa5c <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
1000aa5c:	b580      	push	{r7, lr}
1000aa5e:	b086      	sub	sp, #24
1000aa60:	af00      	add	r7, sp, #0
1000aa62:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = io->virt;
1000aa64:	687b      	ldr	r3, [r7, #4]
1000aa66:	681b      	ldr	r3, [r3, #0]
1000aa68:	60fb      	str	r3, [r7, #12]
	psize = (size_t)io->size;
1000aa6a:	687b      	ldr	r3, [r7, #4]
1000aa6c:	689b      	ldr	r3, [r3, #8]
1000aa6e:	613b      	str	r3, [r7, #16]
	if (psize) {
1000aa70:	693b      	ldr	r3, [r7, #16]
1000aa72:	2b00      	cmp	r3, #0
1000aa74:	d02c      	beq.n	1000aad0 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
1000aa76:	687b      	ldr	r3, [r7, #4]
1000aa78:	68db      	ldr	r3, [r3, #12]
1000aa7a:	693a      	ldr	r2, [r7, #16]
1000aa7c:	fa22 f303 	lsr.w	r3, r2, r3
1000aa80:	2b00      	cmp	r3, #0
1000aa82:	d005      	beq.n	1000aa90 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
1000aa84:	687b      	ldr	r3, [r7, #4]
1000aa86:	68db      	ldr	r3, [r3, #12]
1000aa88:	2201      	movs	r2, #1
1000aa8a:	fa02 f303 	lsl.w	r3, r2, r3
1000aa8e:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
1000aa90:	2300      	movs	r3, #0
1000aa92:	617b      	str	r3, [r7, #20]
1000aa94:	e013      	b.n	1000aabe <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
1000aa96:	687b      	ldr	r3, [r7, #4]
1000aa98:	685a      	ldr	r2, [r3, #4]
1000aa9a:	697b      	ldr	r3, [r7, #20]
1000aa9c:	009b      	lsls	r3, r3, #2
1000aa9e:	4413      	add	r3, r2
1000aaa0:	6819      	ldr	r1, [r3, #0]
1000aaa2:	687b      	ldr	r3, [r7, #4]
1000aaa4:	695b      	ldr	r3, [r3, #20]
1000aaa6:	693a      	ldr	r2, [r7, #16]
1000aaa8:	68f8      	ldr	r0, [r7, #12]
1000aaaa:	f001 fa2f 	bl	1000bf0c <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
1000aaae:	693b      	ldr	r3, [r7, #16]
1000aab0:	009b      	lsls	r3, r3, #2
1000aab2:	68fa      	ldr	r2, [r7, #12]
1000aab4:	4413      	add	r3, r2
1000aab6:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
1000aab8:	697b      	ldr	r3, [r7, #20]
1000aaba:	3301      	adds	r3, #1
1000aabc:	617b      	str	r3, [r7, #20]
1000aabe:	687b      	ldr	r3, [r7, #4]
1000aac0:	689a      	ldr	r2, [r3, #8]
1000aac2:	687b      	ldr	r3, [r7, #4]
1000aac4:	68db      	ldr	r3, [r3, #12]
1000aac6:	fa22 f303 	lsr.w	r3, r2, r3
1000aaca:	697a      	ldr	r2, [r7, #20]
1000aacc:	429a      	cmp	r2, r3
1000aace:	d9e2      	bls.n	1000aa96 <metal_sys_io_mem_map+0x3a>
		}
	}
}
1000aad0:	bf00      	nop
1000aad2:	3718      	adds	r7, #24
1000aad4:	46bd      	mov	sp, r7
1000aad6:	bd80      	pop	{r7, pc}

1000aad8 <metal_list_init>:
{
1000aad8:	b480      	push	{r7}
1000aada:	b083      	sub	sp, #12
1000aadc:	af00      	add	r7, sp, #0
1000aade:	6078      	str	r0, [r7, #4]
	list->prev = list;
1000aae0:	687b      	ldr	r3, [r7, #4]
1000aae2:	687a      	ldr	r2, [r7, #4]
1000aae4:	605a      	str	r2, [r3, #4]
	list->next = list;
1000aae6:	687b      	ldr	r3, [r7, #4]
1000aae8:	687a      	ldr	r2, [r7, #4]
1000aaea:	601a      	str	r2, [r3, #0]
}
1000aaec:	bf00      	nop
1000aaee:	370c      	adds	r7, #12
1000aaf0:	46bd      	mov	sp, r7
1000aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
1000aaf6:	4770      	bx	lr

1000aaf8 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
1000aaf8:	b580      	push	{r7, lr}
1000aafa:	b084      	sub	sp, #16
1000aafc:	af00      	add	r7, sp, #0
1000aafe:	6078      	str	r0, [r7, #4]
	int error = 0;
1000ab00:	2300      	movs	r3, #0
1000ab02:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
1000ab04:	2220      	movs	r2, #32
1000ab06:	2100      	movs	r1, #0
1000ab08:	4810      	ldr	r0, [pc, #64]	; (1000ab4c <metal_init+0x54>)
1000ab0a:	f005 fa1e 	bl	1000ff4a <memset>

	_metal.common.log_handler   = params->log_handler;
1000ab0e:	687b      	ldr	r3, [r7, #4]
1000ab10:	681b      	ldr	r3, [r3, #0]
1000ab12:	4a0e      	ldr	r2, [pc, #56]	; (1000ab4c <metal_init+0x54>)
1000ab14:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
1000ab16:	687b      	ldr	r3, [r7, #4]
1000ab18:	791a      	ldrb	r2, [r3, #4]
1000ab1a:	4b0c      	ldr	r3, [pc, #48]	; (1000ab4c <metal_init+0x54>)
1000ab1c:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
1000ab1e:	480c      	ldr	r0, [pc, #48]	; (1000ab50 <metal_init+0x58>)
1000ab20:	f7ff ffda 	bl	1000aad8 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
1000ab24:	480b      	ldr	r0, [pc, #44]	; (1000ab54 <metal_init+0x5c>)
1000ab26:	f7ff ffd7 	bl	1000aad8 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
1000ab2a:	480b      	ldr	r0, [pc, #44]	; (1000ab58 <metal_init+0x60>)
1000ab2c:	f7ff ffd4 	bl	1000aad8 <metal_list_init>

	error = metal_sys_init(params);
1000ab30:	6878      	ldr	r0, [r7, #4]
1000ab32:	f7ff ff85 	bl	1000aa40 <metal_sys_init>
1000ab36:	60f8      	str	r0, [r7, #12]
	if (error)
1000ab38:	68fb      	ldr	r3, [r7, #12]
1000ab3a:	2b00      	cmp	r3, #0
1000ab3c:	d001      	beq.n	1000ab42 <metal_init+0x4a>
		return error;
1000ab3e:	68fb      	ldr	r3, [r7, #12]
1000ab40:	e000      	b.n	1000ab44 <metal_init+0x4c>

	return error;
1000ab42:	68fb      	ldr	r3, [r7, #12]
}
1000ab44:	4618      	mov	r0, r3
1000ab46:	3710      	adds	r7, #16
1000ab48:	46bd      	mov	sp, r7
1000ab4a:	bd80      	pop	{r7, pc}
1000ab4c:	10029afc 	.word	0x10029afc
1000ab50:	10029b04 	.word	0x10029b04
1000ab54:	10029b0c 	.word	0x10029b0c
1000ab58:	10029b14 	.word	0x10029b14

1000ab5c <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
1000ab5c:	b480      	push	{r7}
1000ab5e:	b083      	sub	sp, #12
1000ab60:	af00      	add	r7, sp, #0
1000ab62:	6078      	str	r0, [r7, #4]
1000ab64:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
1000ab66:	687b      	ldr	r3, [r7, #4]
1000ab68:	681b      	ldr	r3, [r3, #0]
		? (void *)((uintptr_t)io->virt + offset)
		: NULL);
1000ab6a:	f1b3 3fff 	cmp.w	r3, #4294967295
1000ab6e:	d00a      	beq.n	1000ab86 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
1000ab70:	687b      	ldr	r3, [r7, #4]
1000ab72:	689b      	ldr	r3, [r3, #8]
1000ab74:	683a      	ldr	r2, [r7, #0]
1000ab76:	429a      	cmp	r2, r3
1000ab78:	d205      	bcs.n	1000ab86 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
1000ab7a:	687b      	ldr	r3, [r7, #4]
1000ab7c:	681b      	ldr	r3, [r3, #0]
1000ab7e:	461a      	mov	r2, r3
1000ab80:	683b      	ldr	r3, [r7, #0]
1000ab82:	4413      	add	r3, r2
		: NULL);
1000ab84:	e000      	b.n	1000ab88 <metal_io_virt+0x2c>
1000ab86:	2300      	movs	r3, #0
}
1000ab88:	4618      	mov	r0, r3
1000ab8a:	370c      	adds	r7, #12
1000ab8c:	46bd      	mov	sp, r7
1000ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
1000ab92:	4770      	bx	lr

1000ab94 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
1000ab94:	b5b0      	push	{r4, r5, r7, lr}
1000ab96:	b08c      	sub	sp, #48	; 0x30
1000ab98:	af00      	add	r7, sp, #0
1000ab9a:	60f8      	str	r0, [r7, #12]
1000ab9c:	60b9      	str	r1, [r7, #8]
1000ab9e:	607a      	str	r2, [r7, #4]
1000aba0:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {
1000aba2:	f107 0310 	add.w	r3, r7, #16
1000aba6:	2220      	movs	r2, #32
1000aba8:	2100      	movs	r1, #0
1000abaa:	4618      	mov	r0, r3
1000abac:	f005 f9cd 	bl	1000ff4a <memset>
		NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
	};

	io->virt = virt;
1000abb0:	68fb      	ldr	r3, [r7, #12]
1000abb2:	68ba      	ldr	r2, [r7, #8]
1000abb4:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
1000abb6:	68fb      	ldr	r3, [r7, #12]
1000abb8:	687a      	ldr	r2, [r7, #4]
1000abba:	605a      	str	r2, [r3, #4]
	io->size = size;
1000abbc:	68fb      	ldr	r3, [r7, #12]
1000abbe:	683a      	ldr	r2, [r7, #0]
1000abc0:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
1000abc2:	68fb      	ldr	r3, [r7, #12]
1000abc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
1000abc6:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
1000abc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000abca:	2b1f      	cmp	r3, #31
1000abcc:	d904      	bls.n	1000abd8 <metal_io_init+0x44>
		/* avoid overflow */
		io->page_mask = -1UL;
1000abce:	68fb      	ldr	r3, [r7, #12]
1000abd0:	f04f 32ff 	mov.w	r2, #4294967295
1000abd4:	611a      	str	r2, [r3, #16]
1000abd6:	e006      	b.n	1000abe6 <metal_io_init+0x52>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
1000abd8:	2201      	movs	r2, #1
1000abda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000abdc:	fa02 f303 	lsl.w	r3, r2, r3
1000abe0:	1e5a      	subs	r2, r3, #1
1000abe2:	68fb      	ldr	r3, [r7, #12]
1000abe4:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
1000abe6:	68fb      	ldr	r3, [r7, #12]
1000abe8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
1000abea:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
1000abec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
1000abee:	2b00      	cmp	r3, #0
1000abf0:	d00b      	beq.n	1000ac0a <metal_io_init+0x76>
1000abf2:	68fb      	ldr	r3, [r7, #12]
1000abf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
1000abf6:	f103 0418 	add.w	r4, r3, #24
1000abfa:	4615      	mov	r5, r2
1000abfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1000abfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1000ac00:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1000ac04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1000ac08:	e00a      	b.n	1000ac20 <metal_io_init+0x8c>
1000ac0a:	68fb      	ldr	r3, [r7, #12]
1000ac0c:	f103 0418 	add.w	r4, r3, #24
1000ac10:	f107 0510 	add.w	r5, r7, #16
1000ac14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1000ac16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1000ac18:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1000ac1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
1000ac20:	68f8      	ldr	r0, [r7, #12]
1000ac22:	f7ff ff1b 	bl	1000aa5c <metal_sys_io_mem_map>
}
1000ac26:	bf00      	nop
1000ac28:	3730      	adds	r7, #48	; 0x30
1000ac2a:	46bd      	mov	sp, r7
1000ac2c:	bdb0      	pop	{r4, r5, r7, pc}

1000ac2e <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
1000ac2e:	b590      	push	{r4, r7, lr}
1000ac30:	b08b      	sub	sp, #44	; 0x2c
1000ac32:	af02      	add	r7, sp, #8
1000ac34:	60f8      	str	r0, [r7, #12]
1000ac36:	60b9      	str	r1, [r7, #8]
1000ac38:	607a      	str	r2, [r7, #4]
1000ac3a:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
1000ac3c:	68b9      	ldr	r1, [r7, #8]
1000ac3e:	68f8      	ldr	r0, [r7, #12]
1000ac40:	f7ff ff8c 	bl	1000ab5c <metal_io_virt>
1000ac44:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
1000ac46:	687b      	ldr	r3, [r7, #4]
1000ac48:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
1000ac4a:	69fb      	ldr	r3, [r7, #28]
1000ac4c:	2b00      	cmp	r3, #0
1000ac4e:	d102      	bne.n	1000ac56 <metal_io_block_read+0x28>
		return -ERANGE;
1000ac50:	f06f 0321 	mvn.w	r3, #33	; 0x21
1000ac54:	e05c      	b.n	1000ad10 <metal_io_block_read+0xe2>
	if ((offset + len) > io->size)
1000ac56:	683a      	ldr	r2, [r7, #0]
1000ac58:	68bb      	ldr	r3, [r7, #8]
1000ac5a:	441a      	add	r2, r3
1000ac5c:	68fb      	ldr	r3, [r7, #12]
1000ac5e:	689b      	ldr	r3, [r3, #8]
1000ac60:	429a      	cmp	r2, r3
1000ac62:	d904      	bls.n	1000ac6e <metal_io_block_read+0x40>
		len = io->size - offset;
1000ac64:	68fb      	ldr	r3, [r7, #12]
1000ac66:	689a      	ldr	r2, [r3, #8]
1000ac68:	68bb      	ldr	r3, [r7, #8]
1000ac6a:	1ad3      	subs	r3, r2, r3
1000ac6c:	603b      	str	r3, [r7, #0]
	retlen = len;
1000ac6e:	683b      	ldr	r3, [r7, #0]
1000ac70:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
1000ac72:	68fb      	ldr	r3, [r7, #12]
1000ac74:	6a1b      	ldr	r3, [r3, #32]
1000ac76:	2b00      	cmp	r3, #0
1000ac78:	d00a      	beq.n	1000ac90 <metal_io_block_read+0x62>
		retlen = (*io->ops.block_read)(
1000ac7a:	68fb      	ldr	r3, [r7, #12]
1000ac7c:	6a1c      	ldr	r4, [r3, #32]
1000ac7e:	683b      	ldr	r3, [r7, #0]
1000ac80:	9300      	str	r3, [sp, #0]
1000ac82:	2305      	movs	r3, #5
1000ac84:	687a      	ldr	r2, [r7, #4]
1000ac86:	68b9      	ldr	r1, [r7, #8]
1000ac88:	68f8      	ldr	r0, [r7, #12]
1000ac8a:	47a0      	blx	r4
1000ac8c:	6178      	str	r0, [r7, #20]
1000ac8e:	e03e      	b.n	1000ad0e <metal_io_block_read+0xe0>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
1000ac90:	f3bf 8f5b 	dmb	ish
		while ( len && (
1000ac94:	e00c      	b.n	1000acb0 <metal_io_block_read+0x82>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
1000ac96:	69fb      	ldr	r3, [r7, #28]
1000ac98:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
1000ac9a:	69bb      	ldr	r3, [r7, #24]
1000ac9c:	701a      	strb	r2, [r3, #0]
			dest++;
1000ac9e:	69bb      	ldr	r3, [r7, #24]
1000aca0:	3301      	adds	r3, #1
1000aca2:	61bb      	str	r3, [r7, #24]
			ptr++;
1000aca4:	69fb      	ldr	r3, [r7, #28]
1000aca6:	3301      	adds	r3, #1
1000aca8:	61fb      	str	r3, [r7, #28]
			len--;
1000acaa:	683b      	ldr	r3, [r7, #0]
1000acac:	3b01      	subs	r3, #1
1000acae:	603b      	str	r3, [r7, #0]
		while ( len && (
1000acb0:	683b      	ldr	r3, [r7, #0]
1000acb2:	2b00      	cmp	r3, #0
1000acb4:	d017      	beq.n	1000ace6 <metal_io_block_read+0xb8>
			((uintptr_t)dest % sizeof(int)) ||
1000acb6:	69bb      	ldr	r3, [r7, #24]
1000acb8:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
1000acbc:	2b00      	cmp	r3, #0
1000acbe:	d1ea      	bne.n	1000ac96 <metal_io_block_read+0x68>
			((uintptr_t)ptr % sizeof(int)))) {
1000acc0:	69fb      	ldr	r3, [r7, #28]
1000acc2:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
1000acc6:	2b00      	cmp	r3, #0
1000acc8:	d1e5      	bne.n	1000ac96 <metal_io_block_read+0x68>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000acca:	e00c      	b.n	1000ace6 <metal_io_block_read+0xb8>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
1000accc:	69fb      	ldr	r3, [r7, #28]
1000acce:	681a      	ldr	r2, [r3, #0]
1000acd0:	69bb      	ldr	r3, [r7, #24]
1000acd2:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000acd4:	69bb      	ldr	r3, [r7, #24]
1000acd6:	3304      	adds	r3, #4
1000acd8:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
1000acda:	69fb      	ldr	r3, [r7, #28]
1000acdc:	3304      	adds	r3, #4
1000acde:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
1000ace0:	683b      	ldr	r3, [r7, #0]
1000ace2:	3b04      	subs	r3, #4
1000ace4:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000ace6:	683b      	ldr	r3, [r7, #0]
1000ace8:	2b03      	cmp	r3, #3
1000acea:	dcef      	bgt.n	1000accc <metal_io_block_read+0x9e>
		for (; len != 0; dest++, ptr++, len--)
1000acec:	e00c      	b.n	1000ad08 <metal_io_block_read+0xda>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
1000acee:	69fb      	ldr	r3, [r7, #28]
1000acf0:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
1000acf2:	69bb      	ldr	r3, [r7, #24]
1000acf4:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
1000acf6:	69bb      	ldr	r3, [r7, #24]
1000acf8:	3301      	adds	r3, #1
1000acfa:	61bb      	str	r3, [r7, #24]
1000acfc:	69fb      	ldr	r3, [r7, #28]
1000acfe:	3301      	adds	r3, #1
1000ad00:	61fb      	str	r3, [r7, #28]
1000ad02:	683b      	ldr	r3, [r7, #0]
1000ad04:	3b01      	subs	r3, #1
1000ad06:	603b      	str	r3, [r7, #0]
1000ad08:	683b      	ldr	r3, [r7, #0]
1000ad0a:	2b00      	cmp	r3, #0
1000ad0c:	d1ef      	bne.n	1000acee <metal_io_block_read+0xc0>
	}
	return retlen;
1000ad0e:	697b      	ldr	r3, [r7, #20]
}
1000ad10:	4618      	mov	r0, r3
1000ad12:	3724      	adds	r7, #36	; 0x24
1000ad14:	46bd      	mov	sp, r7
1000ad16:	bd90      	pop	{r4, r7, pc}

1000ad18 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
1000ad18:	b590      	push	{r4, r7, lr}
1000ad1a:	b08b      	sub	sp, #44	; 0x2c
1000ad1c:	af02      	add	r7, sp, #8
1000ad1e:	60f8      	str	r0, [r7, #12]
1000ad20:	60b9      	str	r1, [r7, #8]
1000ad22:	607a      	str	r2, [r7, #4]
1000ad24:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
1000ad26:	68b9      	ldr	r1, [r7, #8]
1000ad28:	68f8      	ldr	r0, [r7, #12]
1000ad2a:	f7ff ff17 	bl	1000ab5c <metal_io_virt>
1000ad2e:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
1000ad30:	687b      	ldr	r3, [r7, #4]
1000ad32:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
1000ad34:	69fb      	ldr	r3, [r7, #28]
1000ad36:	2b00      	cmp	r3, #0
1000ad38:	d102      	bne.n	1000ad40 <metal_io_block_write+0x28>
		return -ERANGE;
1000ad3a:	f06f 0321 	mvn.w	r3, #33	; 0x21
1000ad3e:	e05b      	b.n	1000adf8 <metal_io_block_write+0xe0>
	if ((offset + len) > io->size)
1000ad40:	683a      	ldr	r2, [r7, #0]
1000ad42:	68bb      	ldr	r3, [r7, #8]
1000ad44:	441a      	add	r2, r3
1000ad46:	68fb      	ldr	r3, [r7, #12]
1000ad48:	689b      	ldr	r3, [r3, #8]
1000ad4a:	429a      	cmp	r2, r3
1000ad4c:	d904      	bls.n	1000ad58 <metal_io_block_write+0x40>
		len = io->size - offset;
1000ad4e:	68fb      	ldr	r3, [r7, #12]
1000ad50:	689a      	ldr	r2, [r3, #8]
1000ad52:	68bb      	ldr	r3, [r7, #8]
1000ad54:	1ad3      	subs	r3, r2, r3
1000ad56:	603b      	str	r3, [r7, #0]
	retlen = len;
1000ad58:	683b      	ldr	r3, [r7, #0]
1000ad5a:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
1000ad5c:	68fb      	ldr	r3, [r7, #12]
1000ad5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000ad60:	2b00      	cmp	r3, #0
1000ad62:	d017      	beq.n	1000ad94 <metal_io_block_write+0x7c>
		retlen = (*io->ops.block_write)(
1000ad64:	68fb      	ldr	r3, [r7, #12]
1000ad66:	6a5c      	ldr	r4, [r3, #36]	; 0x24
1000ad68:	683b      	ldr	r3, [r7, #0]
1000ad6a:	9300      	str	r3, [sp, #0]
1000ad6c:	2305      	movs	r3, #5
1000ad6e:	687a      	ldr	r2, [r7, #4]
1000ad70:	68b9      	ldr	r1, [r7, #8]
1000ad72:	68f8      	ldr	r0, [r7, #12]
1000ad74:	47a0      	blx	r4
1000ad76:	6178      	str	r0, [r7, #20]
1000ad78:	e03d      	b.n	1000adf6 <metal_io_block_write+0xde>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
1000ad7a:	69bb      	ldr	r3, [r7, #24]
1000ad7c:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
1000ad7e:	69fb      	ldr	r3, [r7, #28]
1000ad80:	701a      	strb	r2, [r3, #0]
			ptr++;
1000ad82:	69fb      	ldr	r3, [r7, #28]
1000ad84:	3301      	adds	r3, #1
1000ad86:	61fb      	str	r3, [r7, #28]
			source++;
1000ad88:	69bb      	ldr	r3, [r7, #24]
1000ad8a:	3301      	adds	r3, #1
1000ad8c:	61bb      	str	r3, [r7, #24]
			len--;
1000ad8e:	683b      	ldr	r3, [r7, #0]
1000ad90:	3b01      	subs	r3, #1
1000ad92:	603b      	str	r3, [r7, #0]
		while ( len && (
1000ad94:	683b      	ldr	r3, [r7, #0]
1000ad96:	2b00      	cmp	r3, #0
1000ad98:	d017      	beq.n	1000adca <metal_io_block_write+0xb2>
			((uintptr_t)ptr % sizeof(int)) ||
1000ad9a:	69fb      	ldr	r3, [r7, #28]
1000ad9c:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
1000ada0:	2b00      	cmp	r3, #0
1000ada2:	d1ea      	bne.n	1000ad7a <metal_io_block_write+0x62>
			((uintptr_t)source % sizeof(int)))) {
1000ada4:	69bb      	ldr	r3, [r7, #24]
1000ada6:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
1000adaa:	2b00      	cmp	r3, #0
1000adac:	d1e5      	bne.n	1000ad7a <metal_io_block_write+0x62>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
1000adae:	e00c      	b.n	1000adca <metal_io_block_write+0xb2>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
1000adb0:	69bb      	ldr	r3, [r7, #24]
1000adb2:	681a      	ldr	r2, [r3, #0]
1000adb4:	69fb      	ldr	r3, [r7, #28]
1000adb6:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
1000adb8:	69fb      	ldr	r3, [r7, #28]
1000adba:	3304      	adds	r3, #4
1000adbc:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
1000adbe:	69bb      	ldr	r3, [r7, #24]
1000adc0:	3304      	adds	r3, #4
1000adc2:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
1000adc4:	683b      	ldr	r3, [r7, #0]
1000adc6:	3b04      	subs	r3, #4
1000adc8:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
1000adca:	683b      	ldr	r3, [r7, #0]
1000adcc:	2b03      	cmp	r3, #3
1000adce:	dcef      	bgt.n	1000adb0 <metal_io_block_write+0x98>
		for (; len != 0; ptr++, source++, len--)
1000add0:	e00c      	b.n	1000adec <metal_io_block_write+0xd4>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
1000add2:	69bb      	ldr	r3, [r7, #24]
1000add4:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
1000add6:	69fb      	ldr	r3, [r7, #28]
1000add8:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
1000adda:	69fb      	ldr	r3, [r7, #28]
1000addc:	3301      	adds	r3, #1
1000adde:	61fb      	str	r3, [r7, #28]
1000ade0:	69bb      	ldr	r3, [r7, #24]
1000ade2:	3301      	adds	r3, #1
1000ade4:	61bb      	str	r3, [r7, #24]
1000ade6:	683b      	ldr	r3, [r7, #0]
1000ade8:	3b01      	subs	r3, #1
1000adea:	603b      	str	r3, [r7, #0]
1000adec:	683b      	ldr	r3, [r7, #0]
1000adee:	2b00      	cmp	r3, #0
1000adf0:	d1ef      	bne.n	1000add2 <metal_io_block_write+0xba>
		atomic_thread_fence(memory_order_seq_cst);
1000adf2:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
1000adf6:	697b      	ldr	r3, [r7, #20]
}
1000adf8:	4618      	mov	r0, r3
1000adfa:	3724      	adds	r7, #36	; 0x24
1000adfc:	46bd      	mov	sp, r7
1000adfe:	bd90      	pop	{r4, r7, pc}

1000ae00 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
1000ae00:	b40e      	push	{r1, r2, r3}
1000ae02:	b480      	push	{r7}
1000ae04:	b082      	sub	sp, #8
1000ae06:	af00      	add	r7, sp, #0
1000ae08:	4603      	mov	r3, r0
1000ae0a:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
1000ae0c:	bf00      	nop
1000ae0e:	3708      	adds	r7, #8
1000ae10:	46bd      	mov	sp, r7
1000ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
1000ae16:	b003      	add	sp, #12
1000ae18:	4770      	bx	lr

1000ae1a <metal_io_virt>:
{
1000ae1a:	b480      	push	{r7}
1000ae1c:	b083      	sub	sp, #12
1000ae1e:	af00      	add	r7, sp, #0
1000ae20:	6078      	str	r0, [r7, #4]
1000ae22:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
1000ae24:	687b      	ldr	r3, [r7, #4]
1000ae26:	681b      	ldr	r3, [r3, #0]
		: NULL);
1000ae28:	f1b3 3fff 	cmp.w	r3, #4294967295
1000ae2c:	d00a      	beq.n	1000ae44 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
1000ae2e:	687b      	ldr	r3, [r7, #4]
1000ae30:	689b      	ldr	r3, [r3, #8]
1000ae32:	683a      	ldr	r2, [r7, #0]
1000ae34:	429a      	cmp	r2, r3
1000ae36:	d205      	bcs.n	1000ae44 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
1000ae38:	687b      	ldr	r3, [r7, #4]
1000ae3a:	681b      	ldr	r3, [r3, #0]
1000ae3c:	461a      	mov	r2, r3
1000ae3e:	683b      	ldr	r3, [r7, #0]
1000ae40:	4413      	add	r3, r2
		: NULL);
1000ae42:	e000      	b.n	1000ae46 <metal_io_virt+0x2c>
1000ae44:	2300      	movs	r3, #0
}
1000ae46:	4618      	mov	r0, r3
1000ae48:	370c      	adds	r7, #12
1000ae4a:	46bd      	mov	sp, r7
1000ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
1000ae50:	4770      	bx	lr

1000ae52 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
1000ae52:	b480      	push	{r7}
1000ae54:	b085      	sub	sp, #20
1000ae56:	af00      	add	r7, sp, #0
1000ae58:	6078      	str	r0, [r7, #4]
1000ae5a:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
1000ae5c:	683b      	ldr	r3, [r7, #0]
1000ae5e:	687a      	ldr	r2, [r7, #4]
1000ae60:	6812      	ldr	r2, [r2, #0]
1000ae62:	1a9b      	subs	r3, r3, r2
1000ae64:	60fb      	str	r3, [r7, #12]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
1000ae66:	687b      	ldr	r3, [r7, #4]
1000ae68:	689b      	ldr	r3, [r3, #8]
1000ae6a:	68fa      	ldr	r2, [r7, #12]
1000ae6c:	429a      	cmp	r2, r3
1000ae6e:	d201      	bcs.n	1000ae74 <metal_io_virt_to_offset+0x22>
1000ae70:	68fb      	ldr	r3, [r7, #12]
1000ae72:	e001      	b.n	1000ae78 <metal_io_virt_to_offset+0x26>
1000ae74:	f04f 33ff 	mov.w	r3, #4294967295
}
1000ae78:	4618      	mov	r0, r3
1000ae7a:	3714      	adds	r7, #20
1000ae7c:	46bd      	mov	sp, r7
1000ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
1000ae82:	4770      	bx	lr

1000ae84 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
1000ae84:	b5b0      	push	{r4, r5, r7, lr}
1000ae86:	b08c      	sub	sp, #48	; 0x30
1000ae88:	af00      	add	r7, sp, #0
1000ae8a:	60f8      	str	r0, [r7, #12]
1000ae8c:	60b9      	str	r1, [r7, #8]
1000ae8e:	603b      	str	r3, [r7, #0]
1000ae90:	4613      	mov	r3, r2
1000ae92:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
1000ae94:	68b9      	ldr	r1, [r7, #8]
1000ae96:	68f8      	ldr	r0, [r7, #12]
1000ae98:	f7ff ffbf 	bl	1000ae1a <metal_io_virt>
1000ae9c:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
1000ae9e:	68fb      	ldr	r3, [r7, #12]
1000aea0:	699b      	ldr	r3, [r3, #24]
1000aea2:	2b00      	cmp	r3, #0
1000aea4:	d009      	beq.n	1000aeba <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
1000aea6:	68fb      	ldr	r3, [r7, #12]
1000aea8:	699c      	ldr	r4, [r3, #24]
1000aeaa:	79fa      	ldrb	r2, [r7, #7]
1000aeac:	683b      	ldr	r3, [r7, #0]
1000aeae:	68b9      	ldr	r1, [r7, #8]
1000aeb0:	68f8      	ldr	r0, [r7, #12]
1000aeb2:	47a0      	blx	r4
1000aeb4:	4604      	mov	r4, r0
1000aeb6:	460d      	mov	r5, r1
1000aeb8:	e059      	b.n	1000af6e <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
1000aeba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000aebc:	2b00      	cmp	r3, #0
1000aebe:	d012      	beq.n	1000aee6 <metal_io_read+0x62>
1000aec0:	683b      	ldr	r3, [r7, #0]
1000aec2:	2b01      	cmp	r3, #1
1000aec4:	d10f      	bne.n	1000aee6 <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
1000aec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000aec8:	62bb      	str	r3, [r7, #40]	; 0x28
1000aeca:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000aecc:	f3bf 8f5b 	dmb	ish
1000aed0:	781b      	ldrb	r3, [r3, #0]
1000aed2:	f3bf 8f5b 	dmb	ish
1000aed6:	b2db      	uxtb	r3, r3
1000aed8:	76fb      	strb	r3, [r7, #27]
1000aeda:	7efb      	ldrb	r3, [r7, #27]
1000aedc:	b2db      	uxtb	r3, r3
1000aede:	2200      	movs	r2, #0
1000aee0:	461c      	mov	r4, r3
1000aee2:	4615      	mov	r5, r2
1000aee4:	e043      	b.n	1000af6e <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
1000aee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000aee8:	2b00      	cmp	r3, #0
1000aeea:	d012      	beq.n	1000af12 <metal_io_read+0x8e>
1000aeec:	683b      	ldr	r3, [r7, #0]
1000aeee:	2b02      	cmp	r3, #2
1000aef0:	d10f      	bne.n	1000af12 <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
1000aef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000aef4:	627b      	str	r3, [r7, #36]	; 0x24
1000aef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000aef8:	f3bf 8f5b 	dmb	ish
1000aefc:	881b      	ldrh	r3, [r3, #0]
1000aefe:	f3bf 8f5b 	dmb	ish
1000af02:	b29b      	uxth	r3, r3
1000af04:	833b      	strh	r3, [r7, #24]
1000af06:	8b3b      	ldrh	r3, [r7, #24]
1000af08:	b29b      	uxth	r3, r3
1000af0a:	2200      	movs	r2, #0
1000af0c:	461c      	mov	r4, r3
1000af0e:	4615      	mov	r5, r2
1000af10:	e02d      	b.n	1000af6e <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
1000af12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000af14:	2b00      	cmp	r3, #0
1000af16:	d010      	beq.n	1000af3a <metal_io_read+0xb6>
1000af18:	683b      	ldr	r3, [r7, #0]
1000af1a:	2b04      	cmp	r3, #4
1000af1c:	d10d      	bne.n	1000af3a <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
1000af1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000af20:	623b      	str	r3, [r7, #32]
1000af22:	6a3b      	ldr	r3, [r7, #32]
1000af24:	f3bf 8f5b 	dmb	ish
1000af28:	681b      	ldr	r3, [r3, #0]
1000af2a:	f3bf 8f5b 	dmb	ish
1000af2e:	617b      	str	r3, [r7, #20]
1000af30:	697b      	ldr	r3, [r7, #20]
1000af32:	2200      	movs	r2, #0
1000af34:	461c      	mov	r4, r3
1000af36:	4615      	mov	r5, r2
1000af38:	e019      	b.n	1000af6e <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
1000af3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000af3c:	2b00      	cmp	r3, #0
1000af3e:	d010      	beq.n	1000af62 <metal_io_read+0xde>
1000af40:	683b      	ldr	r3, [r7, #0]
1000af42:	2b04      	cmp	r3, #4
1000af44:	d10d      	bne.n	1000af62 <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
1000af46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000af48:	61fb      	str	r3, [r7, #28]
1000af4a:	69fb      	ldr	r3, [r7, #28]
1000af4c:	f3bf 8f5b 	dmb	ish
1000af50:	681b      	ldr	r3, [r3, #0]
1000af52:	f3bf 8f5b 	dmb	ish
1000af56:	613b      	str	r3, [r7, #16]
1000af58:	693b      	ldr	r3, [r7, #16]
1000af5a:	2200      	movs	r2, #0
1000af5c:	461c      	mov	r4, r3
1000af5e:	4615      	mov	r5, r2
1000af60:	e005      	b.n	1000af6e <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
1000af62:	4b06      	ldr	r3, [pc, #24]	; (1000af7c <metal_io_read+0xf8>)
1000af64:	4a06      	ldr	r2, [pc, #24]	; (1000af80 <metal_io_read+0xfc>)
1000af66:	21fe      	movs	r1, #254	; 0xfe
1000af68:	4806      	ldr	r0, [pc, #24]	; (1000af84 <metal_io_read+0x100>)
1000af6a:	f004 f947 	bl	1000f1fc <__assert_func>
	return 0; /* quiet compiler */
}
1000af6e:	4622      	mov	r2, r4
1000af70:	462b      	mov	r3, r5
1000af72:	4610      	mov	r0, r2
1000af74:	4619      	mov	r1, r3
1000af76:	3730      	adds	r7, #48	; 0x30
1000af78:	46bd      	mov	sp, r7
1000af7a:	bdb0      	pop	{r4, r5, r7, pc}
1000af7c:	10012460 	.word	0x10012460
1000af80:	100126c4 	.word	0x100126c4
1000af84:	10012464 	.word	0x10012464

1000af88 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
1000af88:	b580      	push	{r7, lr}
1000af8a:	b082      	sub	sp, #8
1000af8c:	af00      	add	r7, sp, #0
1000af8e:	6078      	str	r0, [r7, #4]
	return malloc(size);
1000af90:	6878      	ldr	r0, [r7, #4]
1000af92:	f004 f951 	bl	1000f238 <malloc>
1000af96:	4603      	mov	r3, r0
}
1000af98:	4618      	mov	r0, r3
1000af9a:	3708      	adds	r7, #8
1000af9c:	46bd      	mov	sp, r7
1000af9e:	bd80      	pop	{r7, pc}

1000afa0 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
1000afa0:	b580      	push	{r7, lr}
1000afa2:	b082      	sub	sp, #8
1000afa4:	af00      	add	r7, sp, #0
1000afa6:	6078      	str	r0, [r7, #4]
	free(ptr);
1000afa8:	6878      	ldr	r0, [r7, #4]
1000afaa:	f004 f94d 	bl	1000f248 <free>
}
1000afae:	bf00      	nop
1000afb0:	3708      	adds	r7, #8
1000afb2:	46bd      	mov	sp, r7
1000afb4:	bd80      	pop	{r7, pc}

1000afb6 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
1000afb6:	b580      	push	{r7, lr}
1000afb8:	b084      	sub	sp, #16
1000afba:	af00      	add	r7, sp, #0
1000afbc:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
1000afbe:	687b      	ldr	r3, [r7, #4]
1000afc0:	00db      	lsls	r3, r3, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
1000afc2:	3334      	adds	r3, #52	; 0x34
1000afc4:	60fb      	str	r3, [r7, #12]

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
1000afc6:	68f8      	ldr	r0, [r7, #12]
1000afc8:	f7ff ffde 	bl	1000af88 <metal_allocate_memory>
1000afcc:	60b8      	str	r0, [r7, #8]
	if (vqs) {
1000afce:	68bb      	ldr	r3, [r7, #8]
1000afd0:	2b00      	cmp	r3, #0
1000afd2:	d004      	beq.n	1000afde <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
1000afd4:	68fa      	ldr	r2, [r7, #12]
1000afd6:	2100      	movs	r1, #0
1000afd8:	68b8      	ldr	r0, [r7, #8]
1000afda:	f004 ffb6 	bl	1000ff4a <memset>
	}

	return vqs;
1000afde:	68bb      	ldr	r3, [r7, #8]
}
1000afe0:	4618      	mov	r0, r3
1000afe2:	3710      	adds	r7, #16
1000afe4:	46bd      	mov	sp, r7
1000afe6:	bd80      	pop	{r7, pc}

1000afe8 <rproc_virtio_virtqueue_notify>:
#include <metal/cpu.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
1000afe8:	b580      	push	{r7, lr}
1000afea:	b086      	sub	sp, #24
1000afec:	af00      	add	r7, sp, #0
1000afee:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
1000aff0:	687b      	ldr	r3, [r7, #4]
1000aff2:	891b      	ldrh	r3, [r3, #8]
1000aff4:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
1000aff6:	687b      	ldr	r3, [r7, #4]
1000aff8:	681b      	ldr	r3, [r3, #0]
1000affa:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000affc:	693b      	ldr	r3, [r7, #16]
1000affe:	3b10      	subs	r3, #16
1000b000:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id < vdev->vrings_num);
1000b002:	693b      	ldr	r3, [r7, #16]
1000b004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000b006:	697a      	ldr	r2, [r7, #20]
1000b008:	429a      	cmp	r2, r3
1000b00a:	d305      	bcc.n	1000b018 <rproc_virtio_virtqueue_notify+0x30>
1000b00c:	4b0d      	ldr	r3, [pc, #52]	; (1000b044 <rproc_virtio_virtqueue_notify+0x5c>)
1000b00e:	4a0e      	ldr	r2, [pc, #56]	; (1000b048 <rproc_virtio_virtqueue_notify+0x60>)
1000b010:	211c      	movs	r1, #28
1000b012:	480e      	ldr	r0, [pc, #56]	; (1000b04c <rproc_virtio_virtqueue_notify+0x64>)
1000b014:	f004 f8f2 	bl	1000f1fc <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
1000b018:	693b      	ldr	r3, [r7, #16]
1000b01a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1000b01c:	697a      	ldr	r2, [r7, #20]
1000b01e:	4613      	mov	r3, r2
1000b020:	005b      	lsls	r3, r3, #1
1000b022:	4413      	add	r3, r2
1000b024:	00db      	lsls	r3, r3, #3
1000b026:	440b      	add	r3, r1
1000b028:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
1000b02a:	68fb      	ldr	r3, [r7, #12]
1000b02c:	68db      	ldr	r3, [r3, #12]
1000b02e:	68fa      	ldr	r2, [r7, #12]
1000b030:	6810      	ldr	r0, [r2, #0]
1000b032:	68ba      	ldr	r2, [r7, #8]
1000b034:	6912      	ldr	r2, [r2, #16]
1000b036:	4611      	mov	r1, r2
1000b038:	4798      	blx	r3
}
1000b03a:	bf00      	nop
1000b03c:	3718      	adds	r7, #24
1000b03e:	46bd      	mov	sp, r7
1000b040:	bd80      	pop	{r7, pc}
1000b042:	bf00      	nop
1000b044:	100124ac 	.word	0x100124ac
1000b048:	100126a4 	.word	0x100126a4
1000b04c:	100124c8 	.word	0x100124c8

1000b050 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
1000b050:	b580      	push	{r7, lr}
1000b052:	b086      	sub	sp, #24
1000b054:	af00      	add	r7, sp, #0
1000b056:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000b058:	687b      	ldr	r3, [r7, #4]
1000b05a:	3b10      	subs	r3, #16
1000b05c:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
1000b05e:	697b      	ldr	r3, [r7, #20]
1000b060:	685b      	ldr	r3, [r3, #4]
1000b062:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
1000b064:	697b      	ldr	r3, [r7, #20]
1000b066:	689b      	ldr	r3, [r3, #8]
1000b068:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
1000b06a:	693b      	ldr	r3, [r7, #16]
1000b06c:	3318      	adds	r3, #24
1000b06e:	4619      	mov	r1, r3
1000b070:	68f8      	ldr	r0, [r7, #12]
1000b072:	f7ff feee 	bl	1000ae52 <metal_io_virt_to_offset>
1000b076:	4601      	mov	r1, r0
1000b078:	2301      	movs	r3, #1
1000b07a:	2205      	movs	r2, #5
1000b07c:	68f8      	ldr	r0, [r7, #12]
1000b07e:	f7ff ff01 	bl	1000ae84 <metal_io_read>
1000b082:	4602      	mov	r2, r0
1000b084:	460b      	mov	r3, r1
1000b086:	4613      	mov	r3, r2
1000b088:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
1000b08a:	7afb      	ldrb	r3, [r7, #11]
}
1000b08c:	4618      	mov	r0, r3
1000b08e:	3718      	adds	r7, #24
1000b090:	46bd      	mov	sp, r7
1000b092:	bd80      	pop	{r7, pc}

1000b094 <rproc_virtio_get_dfeatures>:
	rpvdev->notify(rpvdev->priv, vdev->notifyid);
}
#endif

static uint32_t rproc_virtio_get_dfeatures(struct virtio_device *vdev)
{
1000b094:	b580      	push	{r7, lr}
1000b096:	b086      	sub	sp, #24
1000b098:	af00      	add	r7, sp, #0
1000b09a:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000b09c:	687b      	ldr	r3, [r7, #4]
1000b09e:	3b10      	subs	r3, #16
1000b0a0:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
1000b0a2:	697b      	ldr	r3, [r7, #20]
1000b0a4:	685b      	ldr	r3, [r3, #4]
1000b0a6:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
1000b0a8:	697b      	ldr	r3, [r7, #20]
1000b0aa:	689b      	ldr	r3, [r3, #8]
1000b0ac:	60fb      	str	r3, [r7, #12]
	features = metal_io_read32(io,
1000b0ae:	693b      	ldr	r3, [r7, #16]
1000b0b0:	330c      	adds	r3, #12
1000b0b2:	4619      	mov	r1, r3
1000b0b4:	68f8      	ldr	r0, [r7, #12]
1000b0b6:	f7ff fecc 	bl	1000ae52 <metal_io_virt_to_offset>
1000b0ba:	4601      	mov	r1, r0
1000b0bc:	2304      	movs	r3, #4
1000b0be:	2205      	movs	r2, #5
1000b0c0:	68f8      	ldr	r0, [r7, #12]
1000b0c2:	f7ff fedf 	bl	1000ae84 <metal_io_read>
1000b0c6:	4602      	mov	r2, r0
1000b0c8:	460b      	mov	r3, r1
1000b0ca:	4613      	mov	r3, r2
1000b0cc:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
1000b0ce:	68bb      	ldr	r3, [r7, #8]
}
1000b0d0:	4618      	mov	r0, r3
1000b0d2:	3718      	adds	r7, #24
1000b0d4:	46bd      	mov	sp, r7
1000b0d6:	bd80      	pop	{r7, pc}

1000b0d8 <rproc_virtio_get_features>:

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
1000b0d8:	b580      	push	{r7, lr}
1000b0da:	b088      	sub	sp, #32
1000b0dc:	af00      	add	r7, sp, #0
1000b0de:	6078      	str	r0, [r7, #4]
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t gfeatures;
	uint32_t dfeatures;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000b0e0:	687b      	ldr	r3, [r7, #4]
1000b0e2:	3b10      	subs	r3, #16
1000b0e4:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
1000b0e6:	69fb      	ldr	r3, [r7, #28]
1000b0e8:	685b      	ldr	r3, [r3, #4]
1000b0ea:	61bb      	str	r3, [r7, #24]
	io = rpvdev->vdev_rsc_io;
1000b0ec:	69fb      	ldr	r3, [r7, #28]
1000b0ee:	689b      	ldr	r3, [r3, #8]
1000b0f0:	617b      	str	r3, [r7, #20]
	gfeatures = metal_io_read32(io,
1000b0f2:	69bb      	ldr	r3, [r7, #24]
1000b0f4:	3310      	adds	r3, #16
1000b0f6:	4619      	mov	r1, r3
1000b0f8:	6978      	ldr	r0, [r7, #20]
1000b0fa:	f7ff feaa 	bl	1000ae52 <metal_io_virt_to_offset>
1000b0fe:	4601      	mov	r1, r0
1000b100:	2304      	movs	r3, #4
1000b102:	2205      	movs	r2, #5
1000b104:	6978      	ldr	r0, [r7, #20]
1000b106:	f7ff febd 	bl	1000ae84 <metal_io_read>
1000b10a:	4602      	mov	r2, r0
1000b10c:	460b      	mov	r3, r1
1000b10e:	4613      	mov	r3, r2
1000b110:	613b      	str	r3, [r7, #16]
			metal_io_virt_to_offset(io, &vdev_rsc->gfeatures));
	dfeatures = rproc_virtio_get_dfeatures(vdev);
1000b112:	6878      	ldr	r0, [r7, #4]
1000b114:	f7ff ffbe 	bl	1000b094 <rproc_virtio_get_dfeatures>
1000b118:	60f8      	str	r0, [r7, #12]

	return dfeatures & gfeatures;
1000b11a:	68fa      	ldr	r2, [r7, #12]
1000b11c:	693b      	ldr	r3, [r7, #16]
1000b11e:	4013      	ands	r3, r2
}
1000b120:	4618      	mov	r0, r3
1000b122:	3720      	adds	r7, #32
1000b124:	46bd      	mov	sp, r7
1000b126:	bd80      	pop	{r7, pc}

1000b128 <rproc_virtio_read_config>:
}
#endif

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
1000b128:	b580      	push	{r7, lr}
1000b12a:	b088      	sub	sp, #32
1000b12c:	af00      	add	r7, sp, #0
1000b12e:	60f8      	str	r0, [r7, #12]
1000b130:	60b9      	str	r1, [r7, #8]
1000b132:	607a      	str	r2, [r7, #4]
1000b134:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char *config;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000b136:	68fb      	ldr	r3, [r7, #12]
1000b138:	3b10      	subs	r3, #16
1000b13a:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
1000b13c:	69fb      	ldr	r3, [r7, #28]
1000b13e:	685b      	ldr	r3, [r3, #4]
1000b140:	61bb      	str	r3, [r7, #24]
	config = (char *)(&vdev_rsc->vring[vdev->vrings_num]);
1000b142:	68fb      	ldr	r3, [r7, #12]
1000b144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
1000b146:	4613      	mov	r3, r2
1000b148:	009b      	lsls	r3, r3, #2
1000b14a:	4413      	add	r3, r2
1000b14c:	009b      	lsls	r3, r3, #2
1000b14e:	3318      	adds	r3, #24
1000b150:	69ba      	ldr	r2, [r7, #24]
1000b152:	4413      	add	r3, r2
1000b154:	3304      	adds	r3, #4
1000b156:	617b      	str	r3, [r7, #20]
	io = rpvdev->vdev_rsc_io;
1000b158:	69fb      	ldr	r3, [r7, #28]
1000b15a:	689b      	ldr	r3, [r3, #8]
1000b15c:	613b      	str	r3, [r7, #16]

	if (offset + length <= vdev_rsc->config_len)
1000b15e:	683a      	ldr	r2, [r7, #0]
1000b160:	68bb      	ldr	r3, [r7, #8]
1000b162:	441a      	add	r2, r3
1000b164:	69bb      	ldr	r3, [r7, #24]
1000b166:	695b      	ldr	r3, [r3, #20]
1000b168:	429a      	cmp	r2, r3
1000b16a:	d80c      	bhi.n	1000b186 <rproc_virtio_read_config+0x5e>
		metal_io_block_read(io,
				metal_io_virt_to_offset(io, config + offset),
1000b16c:	697a      	ldr	r2, [r7, #20]
1000b16e:	68bb      	ldr	r3, [r7, #8]
1000b170:	4413      	add	r3, r2
		metal_io_block_read(io,
1000b172:	4619      	mov	r1, r3
1000b174:	6938      	ldr	r0, [r7, #16]
1000b176:	f7ff fe6c 	bl	1000ae52 <metal_io_virt_to_offset>
1000b17a:	4601      	mov	r1, r0
1000b17c:	683b      	ldr	r3, [r7, #0]
1000b17e:	687a      	ldr	r2, [r7, #4]
1000b180:	6938      	ldr	r0, [r7, #16]
1000b182:	f7ff fd54 	bl	1000ac2e <metal_io_block_read>
				dst, length);
}
1000b186:	bf00      	nop
1000b188:	3720      	adds	r7, #32
1000b18a:	46bd      	mov	sp, r7
1000b18c:	bd80      	pop	{r7, pc}
	...

1000b190 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
1000b190:	b580      	push	{r7, lr}
1000b192:	b08e      	sub	sp, #56	; 0x38
1000b194:	af00      	add	r7, sp, #0
1000b196:	60f8      	str	r0, [r7, #12]
1000b198:	60b9      	str	r1, [r7, #8]
1000b19a:	607a      	str	r2, [r7, #4]
1000b19c:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
1000b19e:	687b      	ldr	r3, [r7, #4]
1000b1a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
1000b1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000b1a4:	7e5b      	ldrb	r3, [r3, #25]
1000b1a6:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
1000b1a8:	2048      	movs	r0, #72	; 0x48
1000b1aa:	f7ff feed 	bl	1000af88 <metal_allocate_memory>
1000b1ae:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
1000b1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b1b2:	2b00      	cmp	r3, #0
1000b1b4:	d101      	bne.n	1000b1ba <rproc_virtio_create_vdev+0x2a>
		return NULL;
1000b1b6:	2300      	movs	r3, #0
1000b1b8:	e092      	b.n	1000b2e0 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
1000b1ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000b1bc:	4613      	mov	r3, r2
1000b1be:	005b      	lsls	r3, r3, #1
1000b1c0:	4413      	add	r3, r2
1000b1c2:	00db      	lsls	r3, r3, #3
1000b1c4:	4618      	mov	r0, r3
1000b1c6:	f7ff fedf 	bl	1000af88 <metal_allocate_memory>
1000b1ca:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
1000b1cc:	6a3b      	ldr	r3, [r7, #32]
1000b1ce:	2b00      	cmp	r3, #0
1000b1d0:	f000 8081 	beq.w	1000b2d6 <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
1000b1d4:	2248      	movs	r2, #72	; 0x48
1000b1d6:	2100      	movs	r1, #0
1000b1d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000b1da:	f004 feb6 	bl	1000ff4a <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
1000b1de:	2218      	movs	r2, #24
1000b1e0:	2100      	movs	r1, #0
1000b1e2:	6a38      	ldr	r0, [r7, #32]
1000b1e4:	f004 feb1 	bl	1000ff4a <memset>
	vdev = &rpvdev->vdev;
1000b1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b1ea:	3310      	adds	r3, #16
1000b1ec:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
1000b1ee:	2300      	movs	r3, #0
1000b1f0:	637b      	str	r3, [r7, #52]	; 0x34
1000b1f2:	e025      	b.n	1000b240 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
1000b1f4:	2300      	movs	r3, #0
1000b1f6:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
1000b1f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000b1fa:	4613      	mov	r3, r2
1000b1fc:	009b      	lsls	r3, r3, #2
1000b1fe:	4413      	add	r3, r2
1000b200:	009b      	lsls	r3, r3, #2
1000b202:	3318      	adds	r3, #24
1000b204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
1000b206:	4413      	add	r3, r2
1000b208:	3304      	adds	r3, #4
1000b20a:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
1000b20c:	68fb      	ldr	r3, [r7, #12]
1000b20e:	2b00      	cmp	r3, #0
1000b210:	d102      	bne.n	1000b218 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
1000b212:	69bb      	ldr	r3, [r7, #24]
1000b214:	689b      	ldr	r3, [r3, #8]
1000b216:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
1000b218:	6b38      	ldr	r0, [r7, #48]	; 0x30
1000b21a:	f7ff fecc 	bl	1000afb6 <virtqueue_allocate>
1000b21e:	6178      	str	r0, [r7, #20]
		if (!vq)
1000b220:	697b      	ldr	r3, [r7, #20]
1000b222:	2b00      	cmp	r3, #0
1000b224:	d031      	beq.n	1000b28a <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
1000b226:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000b228:	4613      	mov	r3, r2
1000b22a:	005b      	lsls	r3, r3, #1
1000b22c:	4413      	add	r3, r2
1000b22e:	00db      	lsls	r3, r3, #3
1000b230:	461a      	mov	r2, r3
1000b232:	6a3b      	ldr	r3, [r7, #32]
1000b234:	4413      	add	r3, r2
1000b236:	697a      	ldr	r2, [r7, #20]
1000b238:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
1000b23a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000b23c:	3301      	adds	r3, #1
1000b23e:	637b      	str	r3, [r7, #52]	; 0x34
1000b240:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000b242:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000b244:	429a      	cmp	r2, r3
1000b246:	d3d5      	bcc.n	1000b1f4 <rproc_virtio_create_vdev+0x64>
	}

	rpvdev->notify = notify;
1000b248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b24a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
1000b24c:	60da      	str	r2, [r3, #12]
	rpvdev->priv = priv;
1000b24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b250:	6c3a      	ldr	r2, [r7, #64]	; 0x40
1000b252:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
1000b254:	69fb      	ldr	r3, [r7, #28]
1000b256:	6a3a      	ldr	r2, [r7, #32]
1000b258:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
1000b25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b25c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
1000b25e:	605a      	str	r2, [r3, #4]
	rpvdev->vdev_rsc_io = rsc_io;
1000b260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b262:	683a      	ldr	r2, [r7, #0]
1000b264:	609a      	str	r2, [r3, #8]

	vdev->notifyid = notifyid;
1000b266:	69fb      	ldr	r3, [r7, #28]
1000b268:	68ba      	ldr	r2, [r7, #8]
1000b26a:	601a      	str	r2, [r3, #0]
	vdev->role = role;
1000b26c:	69fb      	ldr	r3, [r7, #28]
1000b26e:	68fa      	ldr	r2, [r7, #12]
1000b270:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
1000b272:	69fb      	ldr	r3, [r7, #28]
1000b274:	6cba      	ldr	r2, [r7, #72]	; 0x48
1000b276:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
1000b278:	69fb      	ldr	r3, [r7, #28]
1000b27a:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000b27c:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
1000b27e:	69fb      	ldr	r3, [r7, #28]
1000b280:	4a19      	ldr	r2, [pc, #100]	; (1000b2e8 <rproc_virtio_create_vdev+0x158>)
1000b282:	621a      	str	r2, [r3, #32]
		/* Assume the master support all slave features */
		rproc_virtio_negotiate_features(vdev, dfeatures);
	}
#endif

	return &rpvdev->vdev;
1000b284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b286:	3310      	adds	r3, #16
1000b288:	e02a      	b.n	1000b2e0 <rproc_virtio_create_vdev+0x150>
			goto err1;
1000b28a:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
1000b28c:	2300      	movs	r3, #0
1000b28e:	637b      	str	r3, [r7, #52]	; 0x34
1000b290:	e019      	b.n	1000b2c6 <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
1000b292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000b294:	4613      	mov	r3, r2
1000b296:	005b      	lsls	r3, r3, #1
1000b298:	4413      	add	r3, r2
1000b29a:	00db      	lsls	r3, r3, #3
1000b29c:	461a      	mov	r2, r3
1000b29e:	6a3b      	ldr	r3, [r7, #32]
1000b2a0:	4413      	add	r3, r2
1000b2a2:	681b      	ldr	r3, [r3, #0]
1000b2a4:	2b00      	cmp	r3, #0
1000b2a6:	d00b      	beq.n	1000b2c0 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
1000b2a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000b2aa:	4613      	mov	r3, r2
1000b2ac:	005b      	lsls	r3, r3, #1
1000b2ae:	4413      	add	r3, r2
1000b2b0:	00db      	lsls	r3, r3, #3
1000b2b2:	461a      	mov	r2, r3
1000b2b4:	6a3b      	ldr	r3, [r7, #32]
1000b2b6:	4413      	add	r3, r2
1000b2b8:	681b      	ldr	r3, [r3, #0]
1000b2ba:	4618      	mov	r0, r3
1000b2bc:	f7ff fe70 	bl	1000afa0 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
1000b2c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000b2c2:	3301      	adds	r3, #1
1000b2c4:	637b      	str	r3, [r7, #52]	; 0x34
1000b2c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000b2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000b2ca:	429a      	cmp	r2, r3
1000b2cc:	d3e1      	bcc.n	1000b292 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
1000b2ce:	6a38      	ldr	r0, [r7, #32]
1000b2d0:	f7ff fe66 	bl	1000afa0 <metal_free_memory>
1000b2d4:	e000      	b.n	1000b2d8 <rproc_virtio_create_vdev+0x148>
		goto err0;
1000b2d6:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
1000b2d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000b2da:	f7ff fe61 	bl	1000afa0 <metal_free_memory>
	return NULL;
1000b2de:	2300      	movs	r3, #0
}
1000b2e0:	4618      	mov	r0, r3
1000b2e2:	3738      	adds	r7, #56	; 0x38
1000b2e4:	46bd      	mov	sp, r7
1000b2e6:	bd80      	pop	{r7, pc}
1000b2e8:	10012680 	.word	0x10012680

1000b2ec <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
1000b2ec:	b480      	push	{r7}
1000b2ee:	b087      	sub	sp, #28
1000b2f0:	af00      	add	r7, sp, #0
1000b2f2:	60f8      	str	r0, [r7, #12]
1000b2f4:	60b9      	str	r1, [r7, #8]
1000b2f6:	607a      	str	r2, [r7, #4]
1000b2f8:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
1000b2fa:	68fb      	ldr	r3, [r7, #12]
1000b2fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000b2fe:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
1000b300:	68ba      	ldr	r2, [r7, #8]
1000b302:	697b      	ldr	r3, [r7, #20]
1000b304:	429a      	cmp	r2, r3
1000b306:	d302      	bcc.n	1000b30e <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
1000b308:	f06f 0301 	mvn.w	r3, #1
1000b30c:	e019      	b.n	1000b342 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
1000b30e:	68fb      	ldr	r3, [r7, #12]
1000b310:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1000b312:	68ba      	ldr	r2, [r7, #8]
1000b314:	4613      	mov	r3, r2
1000b316:	005b      	lsls	r3, r3, #1
1000b318:	4413      	add	r3, r2
1000b31a:	00db      	lsls	r3, r3, #3
1000b31c:	440b      	add	r3, r1
1000b31e:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
1000b320:	693b      	ldr	r3, [r7, #16]
1000b322:	6a3a      	ldr	r2, [r7, #32]
1000b324:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
1000b326:	693b      	ldr	r3, [r7, #16]
1000b328:	687a      	ldr	r2, [r7, #4]
1000b32a:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
1000b32c:	693b      	ldr	r3, [r7, #16]
1000b32e:	683a      	ldr	r2, [r7, #0]
1000b330:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
1000b332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b334:	b29a      	uxth	r2, r3
1000b336:	693b      	ldr	r3, [r7, #16]
1000b338:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
1000b33a:	693b      	ldr	r3, [r7, #16]
1000b33c:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000b33e:	609a      	str	r2, [r3, #8]

	return 0;
1000b340:	2300      	movs	r3, #0
}
1000b342:	4618      	mov	r0, r3
1000b344:	371c      	adds	r7, #28
1000b346:	46bd      	mov	sp, r7
1000b348:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b34c:	4770      	bx	lr

1000b34e <rproc_virtio_wait_remote_ready>:
	}
	return 0;
}

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
1000b34e:	b580      	push	{r7, lr}
1000b350:	b084      	sub	sp, #16
1000b352:	af00      	add	r7, sp, #0
1000b354:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
1000b356:	687b      	ldr	r3, [r7, #4]
1000b358:	699b      	ldr	r3, [r3, #24]
1000b35a:	2b00      	cmp	r3, #0
1000b35c:	d00a      	beq.n	1000b374 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
1000b35e:	6878      	ldr	r0, [r7, #4]
1000b360:	f7ff fe76 	bl	1000b050 <rproc_virtio_get_status>
1000b364:	4603      	mov	r3, r0
1000b366:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
1000b368:	7bfb      	ldrb	r3, [r7, #15]
1000b36a:	f003 0304 	and.w	r3, r3, #4
1000b36e:	2b00      	cmp	r3, #0
1000b370:	d102      	bne.n	1000b378 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
1000b372:	e7f4      	b.n	1000b35e <rproc_virtio_wait_remote_ready+0x10>
		return;
1000b374:	bf00      	nop
1000b376:	e000      	b.n	1000b37a <rproc_virtio_wait_remote_ready+0x2c>
			return;
1000b378:	bf00      	nop
		metal_cpu_yield();
	}
}
1000b37a:	3710      	adds	r7, #16
1000b37c:	46bd      	mov	sp, r7
1000b37e:	bd80      	pop	{r7, pc}

1000b380 <metal_list_add_before>:
{
1000b380:	b480      	push	{r7}
1000b382:	b083      	sub	sp, #12
1000b384:	af00      	add	r7, sp, #0
1000b386:	6078      	str	r0, [r7, #4]
1000b388:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
1000b38a:	687b      	ldr	r3, [r7, #4]
1000b38c:	685a      	ldr	r2, [r3, #4]
1000b38e:	683b      	ldr	r3, [r7, #0]
1000b390:	605a      	str	r2, [r3, #4]
	new_node->next = node;
1000b392:	683b      	ldr	r3, [r7, #0]
1000b394:	687a      	ldr	r2, [r7, #4]
1000b396:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
1000b398:	683b      	ldr	r3, [r7, #0]
1000b39a:	681b      	ldr	r3, [r3, #0]
1000b39c:	683a      	ldr	r2, [r7, #0]
1000b39e:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
1000b3a0:	683b      	ldr	r3, [r7, #0]
1000b3a2:	685b      	ldr	r3, [r3, #4]
1000b3a4:	683a      	ldr	r2, [r7, #0]
1000b3a6:	601a      	str	r2, [r3, #0]
}
1000b3a8:	bf00      	nop
1000b3aa:	370c      	adds	r7, #12
1000b3ac:	46bd      	mov	sp, r7
1000b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b3b2:	4770      	bx	lr

1000b3b4 <metal_list_add_tail>:
{
1000b3b4:	b580      	push	{r7, lr}
1000b3b6:	b082      	sub	sp, #8
1000b3b8:	af00      	add	r7, sp, #0
1000b3ba:	6078      	str	r0, [r7, #4]
1000b3bc:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
1000b3be:	6839      	ldr	r1, [r7, #0]
1000b3c0:	6878      	ldr	r0, [r7, #4]
1000b3c2:	f7ff ffdd 	bl	1000b380 <metal_list_add_before>
}
1000b3c6:	bf00      	nop
1000b3c8:	3708      	adds	r7, #8
1000b3ca:	46bd      	mov	sp, r7
1000b3cc:	bd80      	pop	{r7, pc}

1000b3ce <rpmsg_get_endpoint>:
}

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
1000b3ce:	b580      	push	{r7, lr}
1000b3d0:	b088      	sub	sp, #32
1000b3d2:	af00      	add	r7, sp, #0
1000b3d4:	60f8      	str	r0, [r7, #12]
1000b3d6:	60b9      	str	r1, [r7, #8]
1000b3d8:	607a      	str	r2, [r7, #4]
1000b3da:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
1000b3dc:	68fb      	ldr	r3, [r7, #12]
1000b3de:	681b      	ldr	r3, [r3, #0]
1000b3e0:	61fb      	str	r3, [r7, #28]
1000b3e2:	e04b      	b.n	1000b47c <rpmsg_get_endpoint+0xae>
		int name_match = 0;
1000b3e4:	2300      	movs	r3, #0
1000b3e6:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
1000b3e8:	69fb      	ldr	r3, [r7, #28]
1000b3ea:	3b34      	subs	r3, #52	; 0x34
1000b3ec:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
1000b3ee:	687b      	ldr	r3, [r7, #4]
1000b3f0:	f1b3 3fff 	cmp.w	r3, #4294967295
1000b3f4:	d006      	beq.n	1000b404 <rpmsg_get_endpoint+0x36>
1000b3f6:	697b      	ldr	r3, [r7, #20]
1000b3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000b3fa:	687a      	ldr	r2, [r7, #4]
1000b3fc:	429a      	cmp	r2, r3
1000b3fe:	d101      	bne.n	1000b404 <rpmsg_get_endpoint+0x36>
			return ept;
1000b400:	697b      	ldr	r3, [r7, #20]
1000b402:	e040      	b.n	1000b486 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
1000b404:	697b      	ldr	r3, [r7, #20]
1000b406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000b408:	687a      	ldr	r2, [r7, #4]
1000b40a:	429a      	cmp	r2, r3
1000b40c:	d106      	bne.n	1000b41c <rpmsg_get_endpoint+0x4e>
1000b40e:	697b      	ldr	r3, [r7, #20]
1000b410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000b412:	683a      	ldr	r2, [r7, #0]
1000b414:	429a      	cmp	r2, r3
1000b416:	d101      	bne.n	1000b41c <rpmsg_get_endpoint+0x4e>
			return ept;
1000b418:	697b      	ldr	r3, [r7, #20]
1000b41a:	e034      	b.n	1000b486 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
1000b41c:	68bb      	ldr	r3, [r7, #8]
1000b41e:	2b00      	cmp	r3, #0
1000b420:	d00c      	beq.n	1000b43c <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
1000b422:	697b      	ldr	r3, [r7, #20]
1000b424:	2220      	movs	r2, #32
1000b426:	68b9      	ldr	r1, [r7, #8]
1000b428:	4618      	mov	r0, r3
1000b42a:	f004 fd96 	bl	1000ff5a <strncmp>
1000b42e:	4603      	mov	r3, r0
1000b430:	2b00      	cmp	r3, #0
1000b432:	bf0c      	ite	eq
1000b434:	2301      	moveq	r3, #1
1000b436:	2300      	movne	r3, #0
1000b438:	b2db      	uxtb	r3, r3
1000b43a:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
1000b43c:	68bb      	ldr	r3, [r7, #8]
1000b43e:	2b00      	cmp	r3, #0
1000b440:	d018      	beq.n	1000b474 <rpmsg_get_endpoint+0xa6>
1000b442:	69bb      	ldr	r3, [r7, #24]
1000b444:	2b00      	cmp	r3, #0
1000b446:	d015      	beq.n	1000b474 <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address */
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
1000b448:	683b      	ldr	r3, [r7, #0]
1000b44a:	f1b3 3fff 	cmp.w	r3, #4294967295
1000b44e:	d006      	beq.n	1000b45e <rpmsg_get_endpoint+0x90>
1000b450:	697b      	ldr	r3, [r7, #20]
1000b452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000b454:	683a      	ldr	r2, [r7, #0]
1000b456:	429a      	cmp	r2, r3
1000b458:	d101      	bne.n	1000b45e <rpmsg_get_endpoint+0x90>
			return ept;
1000b45a:	697b      	ldr	r3, [r7, #20]
1000b45c:	e013      	b.n	1000b486 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept */
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
1000b45e:	687b      	ldr	r3, [r7, #4]
1000b460:	f1b3 3fff 	cmp.w	r3, #4294967295
1000b464:	d107      	bne.n	1000b476 <rpmsg_get_endpoint+0xa8>
1000b466:	697b      	ldr	r3, [r7, #20]
1000b468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000b46a:	f1b3 3fff 	cmp.w	r3, #4294967295
1000b46e:	d102      	bne.n	1000b476 <rpmsg_get_endpoint+0xa8>
			return ept;
1000b470:	697b      	ldr	r3, [r7, #20]
1000b472:	e008      	b.n	1000b486 <rpmsg_get_endpoint+0xb8>
			continue;
1000b474:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
1000b476:	69fb      	ldr	r3, [r7, #28]
1000b478:	681b      	ldr	r3, [r3, #0]
1000b47a:	61fb      	str	r3, [r7, #28]
1000b47c:	68fb      	ldr	r3, [r7, #12]
1000b47e:	69fa      	ldr	r2, [r7, #28]
1000b480:	429a      	cmp	r2, r3
1000b482:	d1af      	bne.n	1000b3e4 <rpmsg_get_endpoint+0x16>
	}
	return NULL;
1000b484:	2300      	movs	r3, #0
}
1000b486:	4618      	mov	r0, r3
1000b488:	3720      	adds	r7, #32
1000b48a:	46bd      	mov	sp, r7
1000b48c:	bd80      	pop	{r7, pc}

1000b48e <rpmsg_register_endpoint>:
	metal_mutex_release(&rdev->lock);
}

void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept)
{
1000b48e:	b580      	push	{r7, lr}
1000b490:	b082      	sub	sp, #8
1000b492:	af00      	add	r7, sp, #0
1000b494:	6078      	str	r0, [r7, #4]
1000b496:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
1000b498:	683b      	ldr	r3, [r7, #0]
1000b49a:	687a      	ldr	r2, [r7, #4]
1000b49c:	621a      	str	r2, [r3, #32]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
1000b49e:	687a      	ldr	r2, [r7, #4]
1000b4a0:	683b      	ldr	r3, [r7, #0]
1000b4a2:	3334      	adds	r3, #52	; 0x34
1000b4a4:	4619      	mov	r1, r3
1000b4a6:	4610      	mov	r0, r2
1000b4a8:	f7ff ff84 	bl	1000b3b4 <metal_list_add_tail>
}
1000b4ac:	bf00      	nop
1000b4ae:	3708      	adds	r7, #8
1000b4b0:	46bd      	mov	sp, r7
1000b4b2:	bd80      	pop	{r7, pc}

1000b4b4 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
1000b4b4:	b480      	push	{r7}
1000b4b6:	b083      	sub	sp, #12
1000b4b8:	af00      	add	r7, sp, #0
1000b4ba:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
1000b4bc:	2300      	movs	r3, #0
}
1000b4be:	4618      	mov	r0, r3
1000b4c0:	370c      	adds	r7, #12
1000b4c2:	46bd      	mov	sp, r7
1000b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b4c8:	4770      	bx	lr

1000b4ca <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
1000b4ca:	b580      	push	{r7, lr}
1000b4cc:	b082      	sub	sp, #8
1000b4ce:	af00      	add	r7, sp, #0
1000b4d0:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
1000b4d2:	6878      	ldr	r0, [r7, #4]
1000b4d4:	f7ff ffee 	bl	1000b4b4 <__metal_sleep_usec>
1000b4d8:	4603      	mov	r3, r0
}
1000b4da:	4618      	mov	r0, r3
1000b4dc:	3708      	adds	r7, #8
1000b4de:	46bd      	mov	sp, r7
1000b4e0:	bd80      	pop	{r7, pc}

1000b4e2 <metal_list_init>:
{
1000b4e2:	b480      	push	{r7}
1000b4e4:	b083      	sub	sp, #12
1000b4e6:	af00      	add	r7, sp, #0
1000b4e8:	6078      	str	r0, [r7, #4]
	list->prev = list;
1000b4ea:	687b      	ldr	r3, [r7, #4]
1000b4ec:	687a      	ldr	r2, [r7, #4]
1000b4ee:	605a      	str	r2, [r3, #4]
	list->next = list;
1000b4f0:	687b      	ldr	r3, [r7, #4]
1000b4f2:	687a      	ldr	r2, [r7, #4]
1000b4f4:	601a      	str	r2, [r3, #0]
}
1000b4f6:	bf00      	nop
1000b4f8:	370c      	adds	r7, #12
1000b4fa:	46bd      	mov	sp, r7
1000b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b500:	4770      	bx	lr

1000b502 <metal_io_virt_to_offset>:
{
1000b502:	b480      	push	{r7}
1000b504:	b085      	sub	sp, #20
1000b506:	af00      	add	r7, sp, #0
1000b508:	6078      	str	r0, [r7, #4]
1000b50a:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
1000b50c:	683b      	ldr	r3, [r7, #0]
1000b50e:	687a      	ldr	r2, [r7, #4]
1000b510:	6812      	ldr	r2, [r2, #0]
1000b512:	1a9b      	subs	r3, r3, r2
1000b514:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
1000b516:	687b      	ldr	r3, [r7, #4]
1000b518:	689b      	ldr	r3, [r3, #8]
1000b51a:	68fa      	ldr	r2, [r7, #12]
1000b51c:	429a      	cmp	r2, r3
1000b51e:	d201      	bcs.n	1000b524 <metal_io_virt_to_offset+0x22>
1000b520:	68fb      	ldr	r3, [r7, #12]
1000b522:	e001      	b.n	1000b528 <metal_io_virt_to_offset+0x26>
1000b524:	f04f 33ff 	mov.w	r3, #4294967295
}
1000b528:	4618      	mov	r0, r3
1000b52a:	3714      	adds	r7, #20
1000b52c:	46bd      	mov	sp, r7
1000b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b532:	4770      	bx	lr

1000b534 <__metal_mutex_init>:
 * static singleton mutex
 */
#define METAL_MUTEX_DEFINE(m) metal_mutex_t m = METAL_MUTEX_INIT(m)

static inline void __metal_mutex_init(metal_mutex_t *mutex)
{
1000b534:	b480      	push	{r7}
1000b536:	b085      	sub	sp, #20
1000b538:	af00      	add	r7, sp, #0
1000b53a:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
1000b53c:	687b      	ldr	r3, [r7, #4]
1000b53e:	60fb      	str	r3, [r7, #12]
1000b540:	2300      	movs	r3, #0
1000b542:	60bb      	str	r3, [r7, #8]
1000b544:	68bb      	ldr	r3, [r7, #8]
1000b546:	461a      	mov	r2, r3
1000b548:	68fb      	ldr	r3, [r7, #12]
1000b54a:	f3bf 8f5b 	dmb	ish
1000b54e:	601a      	str	r2, [r3, #0]
1000b550:	f3bf 8f5b 	dmb	ish
}
1000b554:	bf00      	nop
1000b556:	3714      	adds	r7, #20
1000b558:	46bd      	mov	sp, r7
1000b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b55e:	4770      	bx	lr

1000b560 <__metal_mutex_acquire>:
		return 0; /* not acquired */
	}
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
1000b560:	b490      	push	{r4, r7}
1000b562:	b086      	sub	sp, #24
1000b564:	af00      	add	r7, sp, #0
1000b566:	6078      	str	r0, [r7, #4]
	int unlocked = METAL_MUTEX_UNLOCKED;
1000b568:	2300      	movs	r3, #0
1000b56a:	613b      	str	r3, [r7, #16]

	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
1000b56c:	bf00      	nop
1000b56e:	687b      	ldr	r3, [r7, #4]
1000b570:	617b      	str	r3, [r7, #20]
1000b572:	2301      	movs	r3, #1
1000b574:	60fb      	str	r3, [r7, #12]
1000b576:	68fb      	ldr	r3, [r7, #12]
1000b578:	461c      	mov	r4, r3
1000b57a:	697a      	ldr	r2, [r7, #20]
1000b57c:	f107 0310 	add.w	r3, r7, #16
1000b580:	6818      	ldr	r0, [r3, #0]
1000b582:	f3bf 8f5b 	dmb	ish
1000b586:	e852 1f00 	ldrex	r1, [r2]
1000b58a:	4281      	cmp	r1, r0
1000b58c:	d103      	bne.n	1000b596 <__metal_mutex_acquire+0x36>
1000b58e:	e842 4c00 	strex	ip, r4, [r2]
1000b592:	f1bc 0f00 	cmp.w	ip, #0
1000b596:	f3bf 8f5b 	dmb	ish
1000b59a:	bf0c      	ite	eq
1000b59c:	2201      	moveq	r2, #1
1000b59e:	2200      	movne	r2, #0
1000b5a0:	2a00      	cmp	r2, #0
1000b5a2:	d100      	bne.n	1000b5a6 <__metal_mutex_acquire+0x46>
1000b5a4:	6019      	str	r1, [r3, #0]
1000b5a6:	4613      	mov	r3, r2
1000b5a8:	f083 0301 	eor.w	r3, r3, #1
1000b5ac:	b2db      	uxtb	r3, r3
1000b5ae:	2b00      	cmp	r3, #0
1000b5b0:	d1dd      	bne.n	1000b56e <__metal_mutex_acquire+0xe>
					     METAL_MUTEX_LOCKED)) {
		;
	}
}
1000b5b2:	bf00      	nop
1000b5b4:	bf00      	nop
1000b5b6:	3718      	adds	r7, #24
1000b5b8:	46bd      	mov	sp, r7
1000b5ba:	bc90      	pop	{r4, r7}
1000b5bc:	4770      	bx	lr

1000b5be <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
1000b5be:	b480      	push	{r7}
1000b5c0:	b085      	sub	sp, #20
1000b5c2:	af00      	add	r7, sp, #0
1000b5c4:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
1000b5c6:	687b      	ldr	r3, [r7, #4]
1000b5c8:	60fb      	str	r3, [r7, #12]
1000b5ca:	2300      	movs	r3, #0
1000b5cc:	60bb      	str	r3, [r7, #8]
1000b5ce:	68bb      	ldr	r3, [r7, #8]
1000b5d0:	461a      	mov	r2, r3
1000b5d2:	68fb      	ldr	r3, [r7, #12]
1000b5d4:	f3bf 8f5b 	dmb	ish
1000b5d8:	601a      	str	r2, [r3, #0]
1000b5da:	f3bf 8f5b 	dmb	ish
}
1000b5de:	bf00      	nop
1000b5e0:	3714      	adds	r7, #20
1000b5e2:	46bd      	mov	sp, r7
1000b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b5e8:	4770      	bx	lr

1000b5ea <metal_mutex_init>:
/**
 * @brief	Initialize a libmetal mutex.
 * @param[in]	mutex	Mutex to initialize.
 */
static inline void metal_mutex_init(metal_mutex_t *mutex)
{
1000b5ea:	b580      	push	{r7, lr}
1000b5ec:	b082      	sub	sp, #8
1000b5ee:	af00      	add	r7, sp, #0
1000b5f0:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
1000b5f2:	6878      	ldr	r0, [r7, #4]
1000b5f4:	f7ff ff9e 	bl	1000b534 <__metal_mutex_init>
}
1000b5f8:	bf00      	nop
1000b5fa:	3708      	adds	r7, #8
1000b5fc:	46bd      	mov	sp, r7
1000b5fe:	bd80      	pop	{r7, pc}

1000b600 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
1000b600:	b580      	push	{r7, lr}
1000b602:	b082      	sub	sp, #8
1000b604:	af00      	add	r7, sp, #0
1000b606:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
1000b608:	6878      	ldr	r0, [r7, #4]
1000b60a:	f7ff ffa9 	bl	1000b560 <__metal_mutex_acquire>
}
1000b60e:	bf00      	nop
1000b610:	3708      	adds	r7, #8
1000b612:	46bd      	mov	sp, r7
1000b614:	bd80      	pop	{r7, pc}

1000b616 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
1000b616:	b580      	push	{r7, lr}
1000b618:	b082      	sub	sp, #8
1000b61a:	af00      	add	r7, sp, #0
1000b61c:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
1000b61e:	6878      	ldr	r0, [r7, #4]
1000b620:	f7ff ffcd 	bl	1000b5be <__metal_mutex_release>
}
1000b624:	bf00      	nop
1000b626:	3708      	adds	r7, #8
1000b628:	46bd      	mov	sp, r7
1000b62a:	bd80      	pop	{r7, pc}

1000b62c <rpmsg_virtio_get_role>:
#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
1000b62c:	b480      	push	{r7}
1000b62e:	b083      	sub	sp, #12
1000b630:	af00      	add	r7, sp, #0
1000b632:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
1000b634:	687b      	ldr	r3, [r7, #4]
1000b636:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000b638:	699b      	ldr	r3, [r3, #24]
}
1000b63a:	4618      	mov	r0, r3
1000b63c:	370c      	adds	r7, #12
1000b63e:	46bd      	mov	sp, r7
1000b640:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b644:	4770      	bx	lr

1000b646 <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
1000b646:	b580      	push	{r7, lr}
1000b648:	b082      	sub	sp, #8
1000b64a:	af00      	add	r7, sp, #0
1000b64c:	6078      	str	r0, [r7, #4]
1000b64e:	460b      	mov	r3, r1
1000b650:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
1000b652:	687b      	ldr	r3, [r7, #4]
1000b654:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000b656:	6a1b      	ldr	r3, [r3, #32]
1000b658:	685b      	ldr	r3, [r3, #4]
1000b65a:	687a      	ldr	r2, [r7, #4]
1000b65c:	6f92      	ldr	r2, [r2, #120]	; 0x78
1000b65e:	78f9      	ldrb	r1, [r7, #3]
1000b660:	4610      	mov	r0, r2
1000b662:	4798      	blx	r3
}
1000b664:	bf00      	nop
1000b666:	3708      	adds	r7, #8
1000b668:	46bd      	mov	sp, r7
1000b66a:	bd80      	pop	{r7, pc}

1000b66c <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
1000b66c:	b580      	push	{r7, lr}
1000b66e:	b082      	sub	sp, #8
1000b670:	af00      	add	r7, sp, #0
1000b672:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
1000b674:	687b      	ldr	r3, [r7, #4]
1000b676:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000b678:	6a1b      	ldr	r3, [r3, #32]
1000b67a:	681b      	ldr	r3, [r3, #0]
1000b67c:	687a      	ldr	r2, [r7, #4]
1000b67e:	6f92      	ldr	r2, [r2, #120]	; 0x78
1000b680:	4610      	mov	r0, r2
1000b682:	4798      	blx	r3
1000b684:	4603      	mov	r3, r0
}
1000b686:	4618      	mov	r0, r3
1000b688:	3708      	adds	r7, #8
1000b68a:	46bd      	mov	sp, r7
1000b68c:	bd80      	pop	{r7, pc}

1000b68e <rpmsg_virtio_get_features>:

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
1000b68e:	b580      	push	{r7, lr}
1000b690:	b082      	sub	sp, #8
1000b692:	af00      	add	r7, sp, #0
1000b694:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
1000b696:	687b      	ldr	r3, [r7, #4]
1000b698:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000b69a:	6a1b      	ldr	r3, [r3, #32]
1000b69c:	689b      	ldr	r3, [r3, #8]
1000b69e:	687a      	ldr	r2, [r7, #4]
1000b6a0:	6f92      	ldr	r2, [r2, #120]	; 0x78
1000b6a2:	4610      	mov	r0, r2
1000b6a4:	4798      	blx	r3
1000b6a6:	4603      	mov	r3, r0
}
1000b6a8:	4618      	mov	r0, r3
1000b6aa:	3708      	adds	r7, #8
1000b6ac:	46bd      	mov	sp, r7
1000b6ae:	bd80      	pop	{r7, pc}

1000b6b0 <rpmsg_virtio_create_virtqueues>:
static inline int
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
1000b6b0:	b580      	push	{r7, lr}
1000b6b2:	b086      	sub	sp, #24
1000b6b4:	af02      	add	r7, sp, #8
1000b6b6:	60f8      	str	r0, [r7, #12]
1000b6b8:	60b9      	str	r1, [r7, #8]
1000b6ba:	607a      	str	r2, [r7, #4]
1000b6bc:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
1000b6be:	68fb      	ldr	r3, [r7, #12]
1000b6c0:	6f98      	ldr	r0, [r3, #120]	; 0x78
1000b6c2:	68b9      	ldr	r1, [r7, #8]
1000b6c4:	69bb      	ldr	r3, [r7, #24]
1000b6c6:	9300      	str	r3, [sp, #0]
1000b6c8:	683b      	ldr	r3, [r7, #0]
1000b6ca:	687a      	ldr	r2, [r7, #4]
1000b6cc:	f000 fc2c 	bl	1000bf28 <virtio_create_virtqueues>
1000b6d0:	4603      	mov	r3, r0
					callbacks);
}
1000b6d2:	4618      	mov	r0, r3
1000b6d4:	3710      	adds	r7, #16
1000b6d6:	46bd      	mov	sp, r7
1000b6d8:	bd80      	pop	{r7, pc}
	...

1000b6dc <rpmsg_initialize_ept>:
static inline void rpmsg_initialize_ept(struct rpmsg_endpoint *ept,
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
1000b6dc:	b580      	push	{r7, lr}
1000b6de:	b084      	sub	sp, #16
1000b6e0:	af00      	add	r7, sp, #0
1000b6e2:	60f8      	str	r0, [r7, #12]
1000b6e4:	60b9      	str	r1, [r7, #8]
1000b6e6:	607a      	str	r2, [r7, #4]
1000b6e8:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
1000b6ea:	68f8      	ldr	r0, [r7, #12]
1000b6ec:	68bb      	ldr	r3, [r7, #8]
1000b6ee:	2b00      	cmp	r3, #0
1000b6f0:	d001      	beq.n	1000b6f6 <rpmsg_initialize_ept+0x1a>
1000b6f2:	68bb      	ldr	r3, [r7, #8]
1000b6f4:	e000      	b.n	1000b6f8 <rpmsg_initialize_ept+0x1c>
1000b6f6:	4b0a      	ldr	r3, [pc, #40]	; (1000b720 <rpmsg_initialize_ept+0x44>)
1000b6f8:	2220      	movs	r2, #32
1000b6fa:	4619      	mov	r1, r3
1000b6fc:	f004 fc3f 	bl	1000ff7e <strncpy>
	ept->addr = src;
1000b700:	68fb      	ldr	r3, [r7, #12]
1000b702:	687a      	ldr	r2, [r7, #4]
1000b704:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
1000b706:	68fb      	ldr	r3, [r7, #12]
1000b708:	683a      	ldr	r2, [r7, #0]
1000b70a:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
1000b70c:	68fb      	ldr	r3, [r7, #12]
1000b70e:	69ba      	ldr	r2, [r7, #24]
1000b710:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
1000b712:	68fb      	ldr	r3, [r7, #12]
1000b714:	69fa      	ldr	r2, [r7, #28]
1000b716:	631a      	str	r2, [r3, #48]	; 0x30
}
1000b718:	bf00      	nop
1000b71a:	3710      	adds	r7, #16
1000b71c:	46bd      	mov	sp, r7
1000b71e:	bd80      	pop	{r7, pc}
1000b720:	10012554 	.word	0x10012554

1000b724 <rpmsg_get_ept_from_addr>:
void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
1000b724:	b580      	push	{r7, lr}
1000b726:	b082      	sub	sp, #8
1000b728:	af00      	add	r7, sp, #0
1000b72a:	6078      	str	r0, [r7, #4]
1000b72c:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
1000b72e:	f04f 33ff 	mov.w	r3, #4294967295
1000b732:	683a      	ldr	r2, [r7, #0]
1000b734:	2100      	movs	r1, #0
1000b736:	6878      	ldr	r0, [r7, #4]
1000b738:	f7ff fe49 	bl	1000b3ce <rpmsg_get_endpoint>
1000b73c:	4603      	mov	r3, r0
}
1000b73e:	4618      	mov	r0, r3
1000b740:	3708      	adds	r7, #8
1000b742:	46bd      	mov	sp, r7
1000b744:	bd80      	pop	{r7, pc}

1000b746 <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
1000b746:	b480      	push	{r7}
1000b748:	b085      	sub	sp, #20
1000b74a:	af00      	add	r7, sp, #0
1000b74c:	60f8      	str	r0, [r7, #12]
1000b74e:	60b9      	str	r1, [r7, #8]
1000b750:	607a      	str	r2, [r7, #4]
	if (!shpool)
1000b752:	68fb      	ldr	r3, [r7, #12]
1000b754:	2b00      	cmp	r3, #0
1000b756:	d009      	beq.n	1000b76c <rpmsg_virtio_init_shm_pool+0x26>
		return;
	shpool->base = shb;
1000b758:	68fb      	ldr	r3, [r7, #12]
1000b75a:	68ba      	ldr	r2, [r7, #8]
1000b75c:	601a      	str	r2, [r3, #0]
	shpool->size = size;
1000b75e:	68fb      	ldr	r3, [r7, #12]
1000b760:	687a      	ldr	r2, [r7, #4]
1000b762:	609a      	str	r2, [r3, #8]
	shpool->avail = size;
1000b764:	68fb      	ldr	r3, [r7, #12]
1000b766:	687a      	ldr	r2, [r7, #4]
1000b768:	605a      	str	r2, [r3, #4]
1000b76a:	e000      	b.n	1000b76e <rpmsg_virtio_init_shm_pool+0x28>
		return;
1000b76c:	bf00      	nop
}
1000b76e:	3714      	adds	r7, #20
1000b770:	46bd      	mov	sp, r7
1000b772:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b776:	4770      	bx	lr

1000b778 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
1000b778:	b580      	push	{r7, lr}
1000b77a:	b086      	sub	sp, #24
1000b77c:	af00      	add	r7, sp, #0
1000b77e:	60f8      	str	r0, [r7, #12]
1000b780:	60b9      	str	r1, [r7, #8]
1000b782:	607a      	str	r2, [r7, #4]
1000b784:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000b786:	68f8      	ldr	r0, [r7, #12]
1000b788:	f7ff ff50 	bl	1000b62c <rpmsg_virtio_get_role>
1000b78c:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000b78e:	697b      	ldr	r3, [r7, #20]
1000b790:	2b01      	cmp	r3, #1
1000b792:	d106      	bne.n	1000b7a2 <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
1000b794:	68fb      	ldr	r3, [r7, #12]
1000b796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1000b798:	8879      	ldrh	r1, [r7, #2]
1000b79a:	687a      	ldr	r2, [r7, #4]
1000b79c:	4618      	mov	r0, r3
1000b79e:	f000 fd95 	bl	1000c2cc <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
1000b7a2:	bf00      	nop
1000b7a4:	3718      	adds	r7, #24
1000b7a6:	46bd      	mov	sp, r7
1000b7a8:	bd80      	pop	{r7, pc}

1000b7aa <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
1000b7aa:	b580      	push	{r7, lr}
1000b7ac:	b086      	sub	sp, #24
1000b7ae:	af00      	add	r7, sp, #0
1000b7b0:	60f8      	str	r0, [r7, #12]
1000b7b2:	60b9      	str	r1, [r7, #8]
1000b7b4:	607a      	str	r2, [r7, #4]
1000b7b6:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000b7b8:	68f8      	ldr	r0, [r7, #12]
1000b7ba:	f7ff ff37 	bl	1000b62c <rpmsg_virtio_get_role>
1000b7be:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000b7c0:	697b      	ldr	r3, [r7, #20]
1000b7c2:	2b01      	cmp	r3, #1
1000b7c4:	d109      	bne.n	1000b7da <rpmsg_virtio_enqueue_buffer+0x30>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
1000b7c6:	68fb      	ldr	r3, [r7, #12]
1000b7c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000b7cc:	8879      	ldrh	r1, [r7, #2]
1000b7ce:	687a      	ldr	r2, [r7, #4]
1000b7d0:	4618      	mov	r0, r3
1000b7d2:	f000 fd7b 	bl	1000c2cc <virtqueue_add_consumed_buffer>
1000b7d6:	4603      	mov	r3, r0
1000b7d8:	e000      	b.n	1000b7dc <rpmsg_virtio_enqueue_buffer+0x32>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
1000b7da:	2300      	movs	r3, #0
}
1000b7dc:	4618      	mov	r0, r3
1000b7de:	3718      	adds	r7, #24
1000b7e0:	46bd      	mov	sp, r7
1000b7e2:	bd80      	pop	{r7, pc}

1000b7e4 <rpmsg_virtio_get_tx_buffer>:
 *
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
1000b7e4:	b580      	push	{r7, lr}
1000b7e6:	b086      	sub	sp, #24
1000b7e8:	af00      	add	r7, sp, #0
1000b7ea:	60f8      	str	r0, [r7, #12]
1000b7ec:	60b9      	str	r1, [r7, #8]
1000b7ee:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000b7f0:	68f8      	ldr	r0, [r7, #12]
1000b7f2:	f7ff ff1b 	bl	1000b62c <rpmsg_virtio_get_role>
1000b7f6:	6138      	str	r0, [r7, #16]
	void *data = NULL;
1000b7f8:	2300      	movs	r3, #0
1000b7fa:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000b7fc:	693b      	ldr	r3, [r7, #16]
1000b7fe:	2b01      	cmp	r3, #1
1000b800:	d108      	bne.n	1000b814 <rpmsg_virtio_get_tx_buffer+0x30>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
1000b802:	68fb      	ldr	r3, [r7, #12]
1000b804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000b808:	68ba      	ldr	r2, [r7, #8]
1000b80a:	6879      	ldr	r1, [r7, #4]
1000b80c:	4618      	mov	r0, r3
1000b80e:	f000 fd15 	bl	1000c23c <virtqueue_get_available_buffer>
1000b812:	6178      	str	r0, [r7, #20]
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
1000b814:	697b      	ldr	r3, [r7, #20]
}
1000b816:	4618      	mov	r0, r3
1000b818:	3718      	adds	r7, #24
1000b81a:	46bd      	mov	sp, r7
1000b81c:	bd80      	pop	{r7, pc}

1000b81e <rpmsg_virtio_get_rx_buffer>:
 * @return - pointer to received buffer
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
1000b81e:	b580      	push	{r7, lr}
1000b820:	b086      	sub	sp, #24
1000b822:	af00      	add	r7, sp, #0
1000b824:	60f8      	str	r0, [r7, #12]
1000b826:	60b9      	str	r1, [r7, #8]
1000b828:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000b82a:	68f8      	ldr	r0, [r7, #12]
1000b82c:	f7ff fefe 	bl	1000b62c <rpmsg_virtio_get_role>
1000b830:	6138      	str	r0, [r7, #16]
	void *data = NULL;
1000b832:	2300      	movs	r3, #0
1000b834:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000b836:	693b      	ldr	r3, [r7, #16]
1000b838:	2b01      	cmp	r3, #1
1000b83a:	d107      	bne.n	1000b84c <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
1000b83c:	68fb      	ldr	r3, [r7, #12]
1000b83e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1000b840:	68ba      	ldr	r2, [r7, #8]
1000b842:	6879      	ldr	r1, [r7, #4]
1000b844:	4618      	mov	r0, r3
1000b846:	f000 fcf9 	bl	1000c23c <virtqueue_get_available_buffer>
1000b84a:	6178      	str	r0, [r7, #20]
#ifdef VIRTIO_CACHED_BUFFERS
	/* Invalidate the buffer before returning it */
	metal_cache_invalidate(data, *len);
#endif /* VIRTIO_CACHED_BUFFERS */

	return data;
1000b84c:	697b      	ldr	r3, [r7, #20]
}
1000b84e:	4618      	mov	r0, r3
1000b850:	3718      	adds	r7, #24
1000b852:	46bd      	mov	sp, r7
1000b854:	bd80      	pop	{r7, pc}

1000b856 <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
1000b856:	b580      	push	{r7, lr}
1000b858:	b084      	sub	sp, #16
1000b85a:	af00      	add	r7, sp, #0
1000b85c:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
1000b85e:	6878      	ldr	r0, [r7, #4]
1000b860:	f7ff ff04 	bl	1000b66c <rpmsg_virtio_get_status>
1000b864:	4603      	mov	r3, r0
1000b866:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
1000b868:	7bfb      	ldrb	r3, [r7, #15]
1000b86a:	f003 0340 	and.w	r3, r3, #64	; 0x40
1000b86e:	2b00      	cmp	r3, #0
1000b870:	d004      	beq.n	1000b87c <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
1000b872:	2100      	movs	r1, #0
1000b874:	6878      	ldr	r0, [r7, #4]
1000b876:	f7ff fee6 	bl	1000b646 <rpmsg_virtio_set_status>
1000b87a:	e7f0      	b.n	1000b85e <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
1000b87c:	7bfb      	ldrb	r3, [r7, #15]
1000b87e:	f003 0304 	and.w	r3, r3, #4
1000b882:	2b00      	cmp	r3, #0
1000b884:	d0eb      	beq.n	1000b85e <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
1000b886:	2301      	movs	r3, #1
		}
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}
}
1000b888:	4618      	mov	r0, r3
1000b88a:	3710      	adds	r7, #16
1000b88c:	46bd      	mov	sp, r7
1000b88e:	bd80      	pop	{r7, pc}

1000b890 <rpmsg_virtio_hold_rx_buffer>:

	return length;
}

static void rpmsg_virtio_hold_rx_buffer(struct rpmsg_device *rdev, void *rxbuf)
{
1000b890:	b480      	push	{r7}
1000b892:	b085      	sub	sp, #20
1000b894:	af00      	add	r7, sp, #0
1000b896:	6078      	str	r0, [r7, #4]
1000b898:	6039      	str	r1, [r7, #0]
	struct rpmsg_hdr *rp_hdr;

	(void)rdev;

	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
1000b89a:	683b      	ldr	r3, [r7, #0]
1000b89c:	3b10      	subs	r3, #16
1000b89e:	60fb      	str	r3, [r7, #12]

	/* Set held status to keep buffer */
	rp_hdr->reserved |= RPMSG_BUF_HELD;
1000b8a0:	68fb      	ldr	r3, [r7, #12]
1000b8a2:	689b      	ldr	r3, [r3, #8]
1000b8a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
1000b8a8:	68fb      	ldr	r3, [r7, #12]
1000b8aa:	609a      	str	r2, [r3, #8]
}
1000b8ac:	bf00      	nop
1000b8ae:	3714      	adds	r7, #20
1000b8b0:	46bd      	mov	sp, r7
1000b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b8b6:	4770      	bx	lr

1000b8b8 <rpmsg_virtio_release_rx_buffer>:

static void rpmsg_virtio_release_rx_buffer(struct rpmsg_device *rdev,
					   void *rxbuf)
{
1000b8b8:	b580      	push	{r7, lr}
1000b8ba:	b086      	sub	sp, #24
1000b8bc:	af00      	add	r7, sp, #0
1000b8be:	6078      	str	r0, [r7, #4]
1000b8c0:	6039      	str	r1, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr *rp_hdr;
	uint16_t idx;
	uint32_t len;

	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000b8c2:	687b      	ldr	r3, [r7, #4]
1000b8c4:	617b      	str	r3, [r7, #20]
	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
1000b8c6:	683b      	ldr	r3, [r7, #0]
1000b8c8:	3b10      	subs	r3, #16
1000b8ca:	613b      	str	r3, [r7, #16]
	/* The reserved field contains buffer index */
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
1000b8cc:	693b      	ldr	r3, [r7, #16]
1000b8ce:	689b      	ldr	r3, [r3, #8]
1000b8d0:	81fb      	strh	r3, [r7, #14]

	metal_mutex_acquire(&rdev->lock);
1000b8d2:	687b      	ldr	r3, [r7, #4]
1000b8d4:	3358      	adds	r3, #88	; 0x58
1000b8d6:	4618      	mov	r0, r3
1000b8d8:	f7ff fe92 	bl	1000b600 <metal_mutex_acquire>
	/* Return buffer on virtqueue. */
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
1000b8dc:	697b      	ldr	r3, [r7, #20]
1000b8de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1000b8e0:	89fa      	ldrh	r2, [r7, #14]
1000b8e2:	4611      	mov	r1, r2
1000b8e4:	4618      	mov	r0, r3
1000b8e6:	f000 fc97 	bl	1000c218 <virtqueue_get_buffer_length>
1000b8ea:	60b8      	str	r0, [r7, #8]
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
1000b8ec:	89fb      	ldrh	r3, [r7, #14]
1000b8ee:	68ba      	ldr	r2, [r7, #8]
1000b8f0:	6939      	ldr	r1, [r7, #16]
1000b8f2:	6978      	ldr	r0, [r7, #20]
1000b8f4:	f7ff ff40 	bl	1000b778 <rpmsg_virtio_return_buffer>
	metal_mutex_release(&rdev->lock);
1000b8f8:	687b      	ldr	r3, [r7, #4]
1000b8fa:	3358      	adds	r3, #88	; 0x58
1000b8fc:	4618      	mov	r0, r3
1000b8fe:	f7ff fe8a 	bl	1000b616 <metal_mutex_release>
}
1000b902:	bf00      	nop
1000b904:	3718      	adds	r7, #24
1000b906:	46bd      	mov	sp, r7
1000b908:	bd80      	pop	{r7, pc}

1000b90a <rpmsg_virtio_get_tx_payload_buffer>:

static void *rpmsg_virtio_get_tx_payload_buffer(struct rpmsg_device *rdev,
						uint32_t *len, int wait)
{
1000b90a:	b580      	push	{r7, lr}
1000b90c:	b08a      	sub	sp, #40	; 0x28
1000b90e:	af00      	add	r7, sp, #0
1000b910:	60f8      	str	r0, [r7, #12]
1000b912:	60b9      	str	r1, [r7, #8]
1000b914:	607a      	str	r2, [r7, #4]
	uint16_t idx;
	int tick_count;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000b916:	68fb      	ldr	r3, [r7, #12]
1000b918:	623b      	str	r3, [r7, #32]

	/* Validate device state */
	status = rpmsg_virtio_get_status(rvdev);
1000b91a:	6a38      	ldr	r0, [r7, #32]
1000b91c:	f7ff fea6 	bl	1000b66c <rpmsg_virtio_get_status>
1000b920:	4603      	mov	r3, r0
1000b922:	61fb      	str	r3, [r7, #28]
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
1000b924:	69fb      	ldr	r3, [r7, #28]
1000b926:	f003 0304 	and.w	r3, r3, #4
1000b92a:	2b00      	cmp	r3, #0
1000b92c:	d101      	bne.n	1000b932 <rpmsg_virtio_get_tx_payload_buffer+0x28>
		return NULL;
1000b92e:	2300      	movs	r3, #0
1000b930:	e039      	b.n	1000b9a6 <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	if (wait)
1000b932:	687b      	ldr	r3, [r7, #4]
1000b934:	2b00      	cmp	r3, #0
1000b936:	d003      	beq.n	1000b940 <rpmsg_virtio_get_tx_payload_buffer+0x36>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
1000b938:	f643 2398 	movw	r3, #15000	; 0x3a98
1000b93c:	627b      	str	r3, [r7, #36]	; 0x24
1000b93e:	e001      	b.n	1000b944 <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	else
		tick_count = 0;
1000b940:	2300      	movs	r3, #0
1000b942:	627b      	str	r3, [r7, #36]	; 0x24

	while (1) {
		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
1000b944:	68fb      	ldr	r3, [r7, #12]
1000b946:	3358      	adds	r3, #88	; 0x58
1000b948:	4618      	mov	r0, r3
1000b94a:	f7ff fe59 	bl	1000b600 <metal_mutex_acquire>
		rp_hdr = rpmsg_virtio_get_tx_buffer(rvdev, len, &idx);
1000b94e:	f107 0316 	add.w	r3, r7, #22
1000b952:	461a      	mov	r2, r3
1000b954:	68b9      	ldr	r1, [r7, #8]
1000b956:	6a38      	ldr	r0, [r7, #32]
1000b958:	f7ff ff44 	bl	1000b7e4 <rpmsg_virtio_get_tx_buffer>
1000b95c:	61b8      	str	r0, [r7, #24]
		metal_mutex_release(&rdev->lock);
1000b95e:	68fb      	ldr	r3, [r7, #12]
1000b960:	3358      	adds	r3, #88	; 0x58
1000b962:	4618      	mov	r0, r3
1000b964:	f7ff fe57 	bl	1000b616 <metal_mutex_release>
		if (rp_hdr || !tick_count)
1000b968:	69bb      	ldr	r3, [r7, #24]
1000b96a:	2b00      	cmp	r3, #0
1000b96c:	d10a      	bne.n	1000b984 <rpmsg_virtio_get_tx_payload_buffer+0x7a>
1000b96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b970:	2b00      	cmp	r3, #0
1000b972:	d007      	beq.n	1000b984 <rpmsg_virtio_get_tx_payload_buffer+0x7a>
			break;
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
1000b974:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1000b978:	f7ff fda7 	bl	1000b4ca <metal_sleep_usec>
		tick_count--;
1000b97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b97e:	3b01      	subs	r3, #1
1000b980:	627b      	str	r3, [r7, #36]	; 0x24
		metal_mutex_acquire(&rdev->lock);
1000b982:	e7df      	b.n	1000b944 <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	}

	if (!rp_hdr)
1000b984:	69bb      	ldr	r3, [r7, #24]
1000b986:	2b00      	cmp	r3, #0
1000b988:	d101      	bne.n	1000b98e <rpmsg_virtio_get_tx_payload_buffer+0x84>
		return NULL;
1000b98a:	2300      	movs	r3, #0
1000b98c:	e00b      	b.n	1000b9a6 <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	/* Store the index into the reserved field to be used when sending */
	rp_hdr->reserved = idx;
1000b98e:	8afb      	ldrh	r3, [r7, #22]
1000b990:	461a      	mov	r2, r3
1000b992:	69bb      	ldr	r3, [r7, #24]
1000b994:	609a      	str	r2, [r3, #8]

	/* Actual data buffer size is vring buffer size minus header length */
	*len -= sizeof(struct rpmsg_hdr);
1000b996:	68bb      	ldr	r3, [r7, #8]
1000b998:	681b      	ldr	r3, [r3, #0]
1000b99a:	f1a3 0210 	sub.w	r2, r3, #16
1000b99e:	68bb      	ldr	r3, [r7, #8]
1000b9a0:	601a      	str	r2, [r3, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
1000b9a2:	69bb      	ldr	r3, [r7, #24]
1000b9a4:	3310      	adds	r3, #16
}
1000b9a6:	4618      	mov	r0, r3
1000b9a8:	3728      	adds	r7, #40	; 0x28
1000b9aa:	46bd      	mov	sp, r7
1000b9ac:	bd80      	pop	{r7, pc}
	...

1000b9b0 <rpmsg_virtio_send_offchannel_nocopy>:

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
1000b9b0:	b580      	push	{r7, lr}
1000b9b2:	b08e      	sub	sp, #56	; 0x38
1000b9b4:	af00      	add	r7, sp, #0
1000b9b6:	60f8      	str	r0, [r7, #12]
1000b9b8:	60b9      	str	r1, [r7, #8]
1000b9ba:	607a      	str	r2, [r7, #4]
1000b9bc:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	uint16_t idx;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000b9be:	68fb      	ldr	r3, [r7, #12]
1000b9c0:	637b      	str	r3, [r7, #52]	; 0x34

	hdr = RPMSG_LOCATE_HDR(data);
1000b9c2:	683b      	ldr	r3, [r7, #0]
1000b9c4:	3b10      	subs	r3, #16
1000b9c6:	633b      	str	r3, [r7, #48]	; 0x30
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
1000b9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000b9ca:	689b      	ldr	r3, [r3, #8]
1000b9cc:	85fb      	strh	r3, [r7, #46]	; 0x2e

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
1000b9ce:	687b      	ldr	r3, [r7, #4]
1000b9d0:	617b      	str	r3, [r7, #20]
	rp_hdr.src = src;
1000b9d2:	68bb      	ldr	r3, [r7, #8]
1000b9d4:	613b      	str	r3, [r7, #16]
	rp_hdr.len = len;
1000b9d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000b9d8:	b29b      	uxth	r3, r3
1000b9da:	83bb      	strh	r3, [r7, #28]
	rp_hdr.reserved = 0;
1000b9dc:	2300      	movs	r3, #0
1000b9de:	61bb      	str	r3, [r7, #24]
	rp_hdr.flags = 0;
1000b9e0:	2300      	movs	r3, #0
1000b9e2:	83fb      	strh	r3, [r7, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
1000b9e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000b9e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
1000b9ea:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
1000b9ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
1000b9ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1000b9f0:	f7ff fd87 	bl	1000b502 <metal_io_virt_to_offset>
1000b9f4:	4601      	mov	r1, r0
1000b9f6:	f107 0210 	add.w	r2, r7, #16
1000b9fa:	2310      	movs	r3, #16
1000b9fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1000b9fe:	f7ff f98b 	bl	1000ad18 <metal_io_block_write>
1000ba02:	6278      	str	r0, [r7, #36]	; 0x24
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
1000ba04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000ba06:	2b10      	cmp	r3, #16
1000ba08:	d006      	beq.n	1000ba18 <rpmsg_virtio_send_offchannel_nocopy+0x68>
1000ba0a:	4b1b      	ldr	r3, [pc, #108]	; (1000ba78 <rpmsg_virtio_send_offchannel_nocopy+0xc8>)
1000ba0c:	4a1b      	ldr	r2, [pc, #108]	; (1000ba7c <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
1000ba0e:	f240 117d 	movw	r1, #381	; 0x17d
1000ba12:	481b      	ldr	r0, [pc, #108]	; (1000ba80 <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
1000ba14:	f003 fbf2 	bl	1000f1fc <__assert_func>

	metal_mutex_acquire(&rdev->lock);
1000ba18:	68fb      	ldr	r3, [r7, #12]
1000ba1a:	3358      	adds	r3, #88	; 0x58
1000ba1c:	4618      	mov	r0, r3
1000ba1e:	f7ff fdef 	bl	1000b600 <metal_mutex_acquire>
#ifndef VIRTIO_SLAVE_ONLY
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_MASTER)
		buff_len = RPMSG_BUFFER_SIZE;
	else
#endif /*!VIRTIO_SLAVE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
1000ba22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000ba24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000ba28:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
1000ba2a:	4611      	mov	r1, r2
1000ba2c:	4618      	mov	r0, r3
1000ba2e:	f000 fbf3 	bl	1000c218 <virtqueue_get_buffer_length>
1000ba32:	6238      	str	r0, [r7, #32]

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
1000ba34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
1000ba36:	6a3a      	ldr	r2, [r7, #32]
1000ba38:	6b39      	ldr	r1, [r7, #48]	; 0x30
1000ba3a:	6b78      	ldr	r0, [r7, #52]	; 0x34
1000ba3c:	f7ff feb5 	bl	1000b7aa <rpmsg_virtio_enqueue_buffer>
1000ba40:	6278      	str	r0, [r7, #36]	; 0x24
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
1000ba42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000ba44:	2b00      	cmp	r3, #0
1000ba46:	d006      	beq.n	1000ba56 <rpmsg_virtio_send_offchannel_nocopy+0xa6>
1000ba48:	4b0e      	ldr	r3, [pc, #56]	; (1000ba84 <rpmsg_virtio_send_offchannel_nocopy+0xd4>)
1000ba4a:	4a0c      	ldr	r2, [pc, #48]	; (1000ba7c <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
1000ba4c:	f44f 71c5 	mov.w	r1, #394	; 0x18a
1000ba50:	480b      	ldr	r0, [pc, #44]	; (1000ba80 <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
1000ba52:	f003 fbd3 	bl	1000f1fc <__assert_func>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
1000ba56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000ba58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000ba5c:	4618      	mov	r0, r3
1000ba5e:	f000 fcaf 	bl	1000c3c0 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
1000ba62:	68fb      	ldr	r3, [r7, #12]
1000ba64:	3358      	adds	r3, #88	; 0x58
1000ba66:	4618      	mov	r0, r3
1000ba68:	f7ff fdd5 	bl	1000b616 <metal_mutex_release>

	return len;
1000ba6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
1000ba6e:	4618      	mov	r0, r3
1000ba70:	3738      	adds	r7, #56	; 0x38
1000ba72:	46bd      	mov	sp, r7
1000ba74:	bd80      	pop	{r7, pc}
1000ba76:	bf00      	nop
1000ba78:	10012558 	.word	0x10012558
1000ba7c:	100126d4 	.word	0x100126d4
1000ba80:	10012574 	.word	0x10012574
1000ba84:	100125f8 	.word	0x100125f8

1000ba88 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
1000ba88:	b580      	push	{r7, lr}
1000ba8a:	b08c      	sub	sp, #48	; 0x30
1000ba8c:	af02      	add	r7, sp, #8
1000ba8e:	60f8      	str	r0, [r7, #12]
1000ba90:	60b9      	str	r1, [r7, #8]
1000ba92:	607a      	str	r2, [r7, #4]
1000ba94:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	void *buffer;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000ba96:	68fb      	ldr	r3, [r7, #12]
1000ba98:	627b      	str	r3, [r7, #36]	; 0x24

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
1000ba9a:	f107 0314 	add.w	r3, r7, #20
1000ba9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000baa0:	4619      	mov	r1, r3
1000baa2:	68f8      	ldr	r0, [r7, #12]
1000baa4:	f7ff ff31 	bl	1000b90a <rpmsg_virtio_get_tx_payload_buffer>
1000baa8:	6238      	str	r0, [r7, #32]
	if (!buffer)
1000baaa:	6a3b      	ldr	r3, [r7, #32]
1000baac:	2b00      	cmp	r3, #0
1000baae:	d101      	bne.n	1000bab4 <rpmsg_virtio_send_offchannel_raw+0x2c>
		return RPMSG_ERR_NO_BUFF;
1000bab0:	4b17      	ldr	r3, [pc, #92]	; (1000bb10 <rpmsg_virtio_send_offchannel_raw+0x88>)
1000bab2:	e029      	b.n	1000bb08 <rpmsg_virtio_send_offchannel_raw+0x80>

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
1000bab4:	697b      	ldr	r3, [r7, #20]
1000bab6:	461a      	mov	r2, r3
1000bab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000baba:	4293      	cmp	r3, r2
1000babc:	dd01      	ble.n	1000bac2 <rpmsg_virtio_send_offchannel_raw+0x3a>
		len = buff_len;
1000babe:	697b      	ldr	r3, [r7, #20]
1000bac0:	633b      	str	r3, [r7, #48]	; 0x30
	io = rvdev->shbuf_io;
1000bac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
1000bac8:	61fb      	str	r3, [r7, #28]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
1000baca:	6a39      	ldr	r1, [r7, #32]
1000bacc:	69f8      	ldr	r0, [r7, #28]
1000bace:	f7ff fd18 	bl	1000b502 <metal_io_virt_to_offset>
1000bad2:	4601      	mov	r1, r0
1000bad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bad6:	683a      	ldr	r2, [r7, #0]
1000bad8:	69f8      	ldr	r0, [r7, #28]
1000bada:	f7ff f91d 	bl	1000ad18 <metal_io_block_write>
1000bade:	61b8      	str	r0, [r7, #24]
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
1000bae0:	69ba      	ldr	r2, [r7, #24]
1000bae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bae4:	429a      	cmp	r2, r3
1000bae6:	d006      	beq.n	1000baf6 <rpmsg_virtio_send_offchannel_raw+0x6e>
1000bae8:	4b0a      	ldr	r3, [pc, #40]	; (1000bb14 <rpmsg_virtio_send_offchannel_raw+0x8c>)
1000baea:	4a0b      	ldr	r2, [pc, #44]	; (1000bb18 <rpmsg_virtio_send_offchannel_raw+0x90>)
1000baec:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
1000baf0:	480a      	ldr	r0, [pc, #40]	; (1000bb1c <rpmsg_virtio_send_offchannel_raw+0x94>)
1000baf2:	f003 fb83 	bl	1000f1fc <__assert_func>

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
1000baf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000baf8:	9300      	str	r3, [sp, #0]
1000bafa:	6a3b      	ldr	r3, [r7, #32]
1000bafc:	687a      	ldr	r2, [r7, #4]
1000bafe:	68b9      	ldr	r1, [r7, #8]
1000bb00:	68f8      	ldr	r0, [r7, #12]
1000bb02:	f7ff ff55 	bl	1000b9b0 <rpmsg_virtio_send_offchannel_nocopy>
1000bb06:	4603      	mov	r3, r0
}
1000bb08:	4618      	mov	r0, r3
1000bb0a:	3728      	adds	r7, #40	; 0x28
1000bb0c:	46bd      	mov	sp, r7
1000bb0e:	bd80      	pop	{r7, pc}
1000bb10:	fffff82e 	.word	0xfffff82e
1000bb14:	10012604 	.word	0x10012604
1000bb18:	100126f8 	.word	0x100126f8
1000bb1c:	10012574 	.word	0x10012574

1000bb20 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
1000bb20:	b480      	push	{r7}
1000bb22:	b083      	sub	sp, #12
1000bb24:	af00      	add	r7, sp, #0
1000bb26:	6078      	str	r0, [r7, #4]
	(void)vq;
}
1000bb28:	bf00      	nop
1000bb2a:	370c      	adds	r7, #12
1000bb2c:	46bd      	mov	sp, r7
1000bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bb32:	4770      	bx	lr

1000bb34 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
1000bb34:	b590      	push	{r4, r7, lr}
1000bb36:	b08d      	sub	sp, #52	; 0x34
1000bb38:	af02      	add	r7, sp, #8
1000bb3a:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
1000bb3c:	687b      	ldr	r3, [r7, #4]
1000bb3e:	681b      	ldr	r3, [r3, #0]
1000bb40:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
1000bb42:	6a3b      	ldr	r3, [r7, #32]
1000bb44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000bb46:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
1000bb48:	69fb      	ldr	r3, [r7, #28]
1000bb4a:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
1000bb4c:	69bb      	ldr	r3, [r7, #24]
1000bb4e:	3358      	adds	r3, #88	; 0x58
1000bb50:	4618      	mov	r0, r3
1000bb52:	f7ff fd55 	bl	1000b600 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
1000bb56:	f107 020a 	add.w	r2, r7, #10
1000bb5a:	f107 030c 	add.w	r3, r7, #12
1000bb5e:	4619      	mov	r1, r3
1000bb60:	69f8      	ldr	r0, [r7, #28]
1000bb62:	f7ff fe5c 	bl	1000b81e <rpmsg_virtio_get_rx_buffer>
1000bb66:	6278      	str	r0, [r7, #36]	; 0x24

	metal_mutex_release(&rdev->lock);
1000bb68:	69bb      	ldr	r3, [r7, #24]
1000bb6a:	3358      	adds	r3, #88	; 0x58
1000bb6c:	4618      	mov	r0, r3
1000bb6e:	f7ff fd52 	bl	1000b616 <metal_mutex_release>

	while (rp_hdr) {
1000bb72:	e062      	b.n	1000bc3a <rpmsg_virtio_rx_callback+0x106>
		rp_hdr->reserved = idx;
1000bb74:	897b      	ldrh	r3, [r7, #10]
1000bb76:	461a      	mov	r2, r3
1000bb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bb7a:	609a      	str	r2, [r3, #8]

		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
1000bb7c:	69bb      	ldr	r3, [r7, #24]
1000bb7e:	3358      	adds	r3, #88	; 0x58
1000bb80:	4618      	mov	r0, r3
1000bb82:	f7ff fd3d 	bl	1000b600 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
1000bb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bb88:	685b      	ldr	r3, [r3, #4]
1000bb8a:	4619      	mov	r1, r3
1000bb8c:	69b8      	ldr	r0, [r7, #24]
1000bb8e:	f7ff fdc9 	bl	1000b724 <rpmsg_get_ept_from_addr>
1000bb92:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
1000bb94:	69bb      	ldr	r3, [r7, #24]
1000bb96:	3358      	adds	r3, #88	; 0x58
1000bb98:	4618      	mov	r0, r3
1000bb9a:	f7ff fd3c 	bl	1000b616 <metal_mutex_release>

		if (ept) {
1000bb9e:	697b      	ldr	r3, [r7, #20]
1000bba0:	2b00      	cmp	r3, #0
1000bba2:	d025      	beq.n	1000bbf0 <rpmsg_virtio_rx_callback+0xbc>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
1000bba4:	697b      	ldr	r3, [r7, #20]
1000bba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000bba8:	f1b3 3fff 	cmp.w	r3, #4294967295
1000bbac:	d103      	bne.n	1000bbb6 <rpmsg_virtio_rx_callback+0x82>
				/*
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
1000bbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bbb0:	681a      	ldr	r2, [r3, #0]
1000bbb2:	697b      	ldr	r3, [r7, #20]
1000bbb4:	629a      	str	r2, [r3, #40]	; 0x28
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
1000bbb6:	697b      	ldr	r3, [r7, #20]
1000bbb8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
1000bbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bbbc:	f103 0110 	add.w	r1, r3, #16
					 rp_hdr->len, rp_hdr->src, ept->priv);
1000bbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bbc2:	899b      	ldrh	r3, [r3, #12]
1000bbc4:	b29b      	uxth	r3, r3
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
1000bbc6:	4618      	mov	r0, r3
1000bbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bbca:	681a      	ldr	r2, [r3, #0]
1000bbcc:	697b      	ldr	r3, [r7, #20]
1000bbce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000bbd0:	9300      	str	r3, [sp, #0]
1000bbd2:	4613      	mov	r3, r2
1000bbd4:	4602      	mov	r2, r0
1000bbd6:	6978      	ldr	r0, [r7, #20]
1000bbd8:	47a0      	blx	r4
1000bbda:	6138      	str	r0, [r7, #16]

			RPMSG_ASSERT(status >= 0,
1000bbdc:	693b      	ldr	r3, [r7, #16]
1000bbde:	2b00      	cmp	r3, #0
1000bbe0:	da06      	bge.n	1000bbf0 <rpmsg_virtio_rx_callback+0xbc>
1000bbe2:	4b1a      	ldr	r3, [pc, #104]	; (1000bc4c <rpmsg_virtio_rx_callback+0x118>)
1000bbe4:	4a1a      	ldr	r2, [pc, #104]	; (1000bc50 <rpmsg_virtio_rx_callback+0x11c>)
1000bbe6:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
1000bbea:	481a      	ldr	r0, [pc, #104]	; (1000bc54 <rpmsg_virtio_rx_callback+0x120>)
1000bbec:	f003 fb06 	bl	1000f1fc <__assert_func>
				     "unexpected callback status\r\n");
		}

		metal_mutex_acquire(&rdev->lock);
1000bbf0:	69bb      	ldr	r3, [r7, #24]
1000bbf2:	3358      	adds	r3, #88	; 0x58
1000bbf4:	4618      	mov	r0, r3
1000bbf6:	f7ff fd03 	bl	1000b600 <metal_mutex_acquire>

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
1000bbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bbfc:	689b      	ldr	r3, [r3, #8]
1000bbfe:	2b00      	cmp	r3, #0
1000bc00:	db05      	blt.n	1000bc0e <rpmsg_virtio_rx_callback+0xda>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
1000bc02:	68fa      	ldr	r2, [r7, #12]
1000bc04:	897b      	ldrh	r3, [r7, #10]
1000bc06:	6a79      	ldr	r1, [r7, #36]	; 0x24
1000bc08:	69f8      	ldr	r0, [r7, #28]
1000bc0a:	f7ff fdb5 	bl	1000b778 <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
1000bc0e:	f107 020a 	add.w	r2, r7, #10
1000bc12:	f107 030c 	add.w	r3, r7, #12
1000bc16:	4619      	mov	r1, r3
1000bc18:	69f8      	ldr	r0, [r7, #28]
1000bc1a:	f7ff fe00 	bl	1000b81e <rpmsg_virtio_get_rx_buffer>
1000bc1e:	6278      	str	r0, [r7, #36]	; 0x24
		if (!rp_hdr) {
1000bc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bc22:	2b00      	cmp	r3, #0
1000bc24:	d104      	bne.n	1000bc30 <rpmsg_virtio_rx_callback+0xfc>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
1000bc26:	69fb      	ldr	r3, [r7, #28]
1000bc28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1000bc2a:	4618      	mov	r0, r3
1000bc2c:	f000 fbc8 	bl	1000c3c0 <virtqueue_kick>
		}
		metal_mutex_release(&rdev->lock);
1000bc30:	69bb      	ldr	r3, [r7, #24]
1000bc32:	3358      	adds	r3, #88	; 0x58
1000bc34:	4618      	mov	r0, r3
1000bc36:	f7ff fcee 	bl	1000b616 <metal_mutex_release>
	while (rp_hdr) {
1000bc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bc3c:	2b00      	cmp	r3, #0
1000bc3e:	d199      	bne.n	1000bb74 <rpmsg_virtio_rx_callback+0x40>
	}
}
1000bc40:	bf00      	nop
1000bc42:	bf00      	nop
1000bc44:	372c      	adds	r7, #44	; 0x2c
1000bc46:	46bd      	mov	sp, r7
1000bc48:	bd90      	pop	{r4, r7, pc}
1000bc4a:	bf00      	nop
1000bc4c:	10012614 	.word	0x10012614
1000bc50:	1001271c 	.word	0x1001271c
1000bc54:	10012574 	.word	0x10012574

1000bc58 <rpmsg_virtio_ns_callback>:
 *
 * @return - rpmag endpoint callback handled
 */
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
1000bc58:	b580      	push	{r7, lr}
1000bc5a:	b092      	sub	sp, #72	; 0x48
1000bc5c:	af00      	add	r7, sp, #0
1000bc5e:	60f8      	str	r0, [r7, #12]
1000bc60:	60b9      	str	r1, [r7, #8]
1000bc62:	607a      	str	r2, [r7, #4]
1000bc64:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
1000bc66:	68fb      	ldr	r3, [r7, #12]
1000bc68:	6a1b      	ldr	r3, [r3, #32]
1000bc6a:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
1000bc6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000bc6e:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
1000bc70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000bc72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
1000bc76:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = data;
1000bc78:	68bb      	ldr	r3, [r7, #8]
1000bc7a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
1000bc7c:	687b      	ldr	r3, [r7, #4]
1000bc7e:	2b28      	cmp	r3, #40	; 0x28
1000bc80:	d001      	beq.n	1000bc86 <rpmsg_virtio_ns_callback+0x2e>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
1000bc82:	2300      	movs	r3, #0
1000bc84:	e057      	b.n	1000bd36 <rpmsg_virtio_ns_callback+0xde>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
1000bc86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
1000bc88:	4619      	mov	r1, r3
1000bc8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
1000bc8c:	f7ff fc39 	bl	1000b502 <metal_io_virt_to_offset>
1000bc90:	4601      	mov	r1, r0
1000bc92:	f107 0210 	add.w	r2, r7, #16
1000bc96:	2320      	movs	r3, #32
1000bc98:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
1000bc9a:	f7fe ffc8 	bl	1000ac2e <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
1000bc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000bca0:	6a1b      	ldr	r3, [r3, #32]
1000bca2:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
1000bca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000bca6:	3358      	adds	r3, #88	; 0x58
1000bca8:	4618      	mov	r0, r3
1000bcaa:	f7ff fca9 	bl	1000b600 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
1000bcae:	f107 0110 	add.w	r1, r7, #16
1000bcb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000bcb4:	f04f 32ff 	mov.w	r2, #4294967295
1000bcb8:	6c78      	ldr	r0, [r7, #68]	; 0x44
1000bcba:	f7ff fb88 	bl	1000b3ce <rpmsg_get_endpoint>
1000bcbe:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
1000bcc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000bcc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000bcc4:	f003 0301 	and.w	r3, r3, #1
1000bcc8:	2b00      	cmp	r3, #0
1000bcca:	d017      	beq.n	1000bcfc <rpmsg_virtio_ns_callback+0xa4>
		if (_ept)
1000bccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bcce:	2b00      	cmp	r3, #0
1000bcd0:	d003      	beq.n	1000bcda <rpmsg_virtio_ns_callback+0x82>
			_ept->dest_addr = RPMSG_ADDR_ANY;
1000bcd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bcd4:	f04f 32ff 	mov.w	r2, #4294967295
1000bcd8:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
1000bcda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000bcdc:	3358      	adds	r3, #88	; 0x58
1000bcde:	4618      	mov	r0, r3
1000bce0:	f7ff fc99 	bl	1000b616 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
1000bce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bce6:	2b00      	cmp	r3, #0
1000bce8:	d024      	beq.n	1000bd34 <rpmsg_virtio_ns_callback+0xdc>
1000bcea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bcec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000bcee:	2b00      	cmp	r3, #0
1000bcf0:	d020      	beq.n	1000bd34 <rpmsg_virtio_ns_callback+0xdc>
			_ept->ns_unbind_cb(_ept);
1000bcf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bcf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000bcf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
1000bcf8:	4798      	blx	r3
1000bcfa:	e01b      	b.n	1000bd34 <rpmsg_virtio_ns_callback+0xdc>
	} else {
		if (!_ept) {
1000bcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bcfe:	2b00      	cmp	r3, #0
1000bd00:	d110      	bne.n	1000bd24 <rpmsg_virtio_ns_callback+0xcc>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
1000bd02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000bd04:	3358      	adds	r3, #88	; 0x58
1000bd06:	4618      	mov	r0, r3
1000bd08:	f7ff fc85 	bl	1000b616 <metal_mutex_release>
			if (rdev->ns_bind_cb)
1000bd0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000bd0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
1000bd10:	2b00      	cmp	r3, #0
1000bd12:	d00f      	beq.n	1000bd34 <rpmsg_virtio_ns_callback+0xdc>
				rdev->ns_bind_cb(rdev, name, dest);
1000bd14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000bd16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
1000bd18:	f107 0110 	add.w	r1, r7, #16
1000bd1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000bd1e:	6c78      	ldr	r0, [r7, #68]	; 0x44
1000bd20:	4798      	blx	r3
1000bd22:	e007      	b.n	1000bd34 <rpmsg_virtio_ns_callback+0xdc>
		} else {
			_ept->dest_addr = dest;
1000bd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bd26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000bd28:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
1000bd2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000bd2c:	3358      	adds	r3, #88	; 0x58
1000bd2e:	4618      	mov	r0, r3
1000bd30:	f7ff fc71 	bl	1000b616 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
1000bd34:	2300      	movs	r3, #0
}
1000bd36:	4618      	mov	r0, r3
1000bd38:	3748      	adds	r7, #72	; 0x48
1000bd3a:	46bd      	mov	sp, r7
1000bd3c:	bd80      	pop	{r7, pc}
	...

1000bd40 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
1000bd40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
1000bd44:	b090      	sub	sp, #64	; 0x40
1000bd46:	af02      	add	r7, sp, #8
1000bd48:	60f8      	str	r0, [r7, #12]
1000bd4a:	60b9      	str	r1, [r7, #8]
1000bd4c:	607a      	str	r2, [r7, #4]
1000bd4e:	603b      	str	r3, [r7, #0]
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
1000bd50:	68fb      	ldr	r3, [r7, #12]
1000bd52:	633b      	str	r3, [r7, #48]	; 0x30
	memset(rdev, 0, sizeof(*rdev));
1000bd54:	2278      	movs	r2, #120	; 0x78
1000bd56:	2100      	movs	r1, #0
1000bd58:	6b38      	ldr	r0, [r7, #48]	; 0x30
1000bd5a:	f004 f8f6 	bl	1000ff4a <memset>
	metal_mutex_init(&rdev->lock);
1000bd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bd60:	3358      	adds	r3, #88	; 0x58
1000bd62:	4618      	mov	r0, r3
1000bd64:	f7ff fc41 	bl	1000b5ea <metal_mutex_init>
	rvdev->vdev = vdev;
1000bd68:	68fb      	ldr	r3, [r7, #12]
1000bd6a:	68ba      	ldr	r2, [r7, #8]
1000bd6c:	679a      	str	r2, [r3, #120]	; 0x78
	rdev->ns_bind_cb = ns_bind_cb;
1000bd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bd70:	687a      	ldr	r2, [r7, #4]
1000bd72:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
1000bd74:	68bb      	ldr	r3, [r7, #8]
1000bd76:	68fa      	ldr	r2, [r7, #12]
1000bd78:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
1000bd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bd7c:	4a4d      	ldr	r2, [pc, #308]	; (1000beb4 <rpmsg_init_vdev+0x174>)
1000bd7e:	661a      	str	r2, [r3, #96]	; 0x60
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
1000bd80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bd82:	4a4d      	ldr	r2, [pc, #308]	; (1000beb8 <rpmsg_init_vdev+0x178>)
1000bd84:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
1000bd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bd88:	4a4c      	ldr	r2, [pc, #304]	; (1000bebc <rpmsg_init_vdev+0x17c>)
1000bd8a:	669a      	str	r2, [r3, #104]	; 0x68
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
1000bd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bd8e:	4a4c      	ldr	r2, [pc, #304]	; (1000bec0 <rpmsg_init_vdev+0x180>)
1000bd90:	66da      	str	r2, [r3, #108]	; 0x6c
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
1000bd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bd94:	4a4b      	ldr	r2, [pc, #300]	; (1000bec4 <rpmsg_init_vdev+0x184>)
1000bd96:	671a      	str	r2, [r3, #112]	; 0x70
	role = rpmsg_virtio_get_role(rvdev);
1000bd98:	68f8      	ldr	r0, [r7, #12]
1000bd9a:	f7ff fc47 	bl	1000b62c <rpmsg_virtio_get_role>
1000bd9e:	62f8      	str	r0, [r7, #44]	; 0x2c

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000bda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000bda2:	2b01      	cmp	r3, #1
1000bda4:	d102      	bne.n	1000bdac <rpmsg_init_vdev+0x6c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
1000bda6:	68f8      	ldr	r0, [r7, #12]
1000bda8:	f7ff fd55 	bl	1000b856 <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
1000bdac:	68f8      	ldr	r0, [r7, #12]
1000bdae:	f7ff fc6e 	bl	1000b68e <rpmsg_virtio_get_features>
1000bdb2:	4603      	mov	r3, r0
1000bdb4:	2200      	movs	r2, #0
1000bdb6:	4698      	mov	r8, r3
1000bdb8:	4691      	mov	r9, r2
1000bdba:	68bb      	ldr	r3, [r7, #8]
1000bdbc:	e9c3 8904 	strd	r8, r9, [r3, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
1000bdc0:	68bb      	ldr	r3, [r7, #8]
1000bdc2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
1000bdc6:	f002 0401 	and.w	r4, r2, #1
1000bdca:	2500      	movs	r5, #0
1000bdcc:	ea44 0305 	orr.w	r3, r4, r5
1000bdd0:	2b00      	cmp	r3, #0
1000bdd2:	bf14      	ite	ne
1000bdd4:	2301      	movne	r3, #1
1000bdd6:	2300      	moveq	r3, #0
1000bdd8:	b2da      	uxtb	r2, r3
1000bdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000bddc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
1000bde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000bde2:	2b01      	cmp	r3, #1
1000bde4:	d113      	bne.n	1000be0e <rpmsg_init_vdev+0xce>
		vq_names[0] = "tx_vq";
1000bde6:	4b38      	ldr	r3, [pc, #224]	; (1000bec8 <rpmsg_init_vdev+0x188>)
1000bde8:	61fb      	str	r3, [r7, #28]
		vq_names[1] = "rx_vq";
1000bdea:	4b38      	ldr	r3, [pc, #224]	; (1000becc <rpmsg_init_vdev+0x18c>)
1000bdec:	623b      	str	r3, [r7, #32]
		callback[0] = rpmsg_virtio_tx_callback;
1000bdee:	4b38      	ldr	r3, [pc, #224]	; (1000bed0 <rpmsg_init_vdev+0x190>)
1000bdf0:	617b      	str	r3, [r7, #20]
		callback[1] = rpmsg_virtio_rx_callback;
1000bdf2:	4b38      	ldr	r3, [pc, #224]	; (1000bed4 <rpmsg_init_vdev+0x194>)
1000bdf4:	61bb      	str	r3, [r7, #24]
		rvdev->rvq  = vdev->vrings_info[1].vq;
1000bdf6:	68bb      	ldr	r3, [r7, #8]
1000bdf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000bdfa:	3318      	adds	r3, #24
1000bdfc:	681a      	ldr	r2, [r3, #0]
1000bdfe:	68fb      	ldr	r3, [r7, #12]
1000be00:	67da      	str	r2, [r3, #124]	; 0x7c
		rvdev->svq  = vdev->vrings_info[0].vq;
1000be02:	68bb      	ldr	r3, [r7, #8]
1000be04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000be06:	681a      	ldr	r2, [r3, #0]
1000be08:	68fb      	ldr	r3, [r7, #12]
1000be0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
1000be0e:	68fb      	ldr	r3, [r7, #12]
1000be10:	683a      	ldr	r2, [r7, #0]
1000be12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
1000be16:	f107 021c 	add.w	r2, r7, #28
1000be1a:	f107 0314 	add.w	r3, r7, #20
1000be1e:	9300      	str	r3, [sp, #0]
1000be20:	4613      	mov	r3, r2
1000be22:	2202      	movs	r2, #2
1000be24:	2100      	movs	r1, #0
1000be26:	68f8      	ldr	r0, [r7, #12]
1000be28:	f7ff fc42 	bl	1000b6b0 <rpmsg_virtio_create_virtqueues>
1000be2c:	62b8      	str	r0, [r7, #40]	; 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
1000be2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000be30:	2b00      	cmp	r3, #0
1000be32:	d001      	beq.n	1000be38 <rpmsg_init_vdev+0xf8>
		return status;
1000be34:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000be36:	e037      	b.n	1000bea8 <rpmsg_init_vdev+0x168>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
1000be38:	68fb      	ldr	r3, [r7, #12]
1000be3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000be3e:	4618      	mov	r0, r3
1000be40:	f000 fa86 	bl	1000c350 <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
1000be44:	2300      	movs	r3, #0
1000be46:	637b      	str	r3, [r7, #52]	; 0x34
1000be48:	e00f      	b.n	1000be6a <rpmsg_init_vdev+0x12a>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
1000be4a:	68bb      	ldr	r3, [r7, #8]
1000be4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1000be4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000be50:	4613      	mov	r3, r2
1000be52:	005b      	lsls	r3, r3, #1
1000be54:	4413      	add	r3, r2
1000be56:	00db      	lsls	r3, r3, #3
1000be58:	440b      	add	r3, r1
1000be5a:	681b      	ldr	r3, [r3, #0]
1000be5c:	627b      	str	r3, [r7, #36]	; 0x24
		vq->shm_io = shm_io;
1000be5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000be60:	683a      	ldr	r2, [r7, #0]
1000be62:	629a      	str	r2, [r3, #40]	; 0x28
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
1000be64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000be66:	3301      	adds	r3, #1
1000be68:	637b      	str	r3, [r7, #52]	; 0x34
1000be6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000be6c:	2b01      	cmp	r3, #1
1000be6e:	d9ec      	bls.n	1000be4a <rpmsg_init_vdev+0x10a>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
1000be70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000be72:	4618      	mov	r0, r3
1000be74:	f7ff fb35 	bl	1000b4e2 <metal_list_init>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
1000be78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000be7a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
1000be7e:	2b00      	cmp	r3, #0
1000be80:	d011      	beq.n	1000bea6 <rpmsg_init_vdev+0x166>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
1000be82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000be84:	f103 0008 	add.w	r0, r3, #8
1000be88:	2300      	movs	r3, #0
1000be8a:	9301      	str	r3, [sp, #4]
1000be8c:	4b12      	ldr	r3, [pc, #72]	; (1000bed8 <rpmsg_init_vdev+0x198>)
1000be8e:	9300      	str	r3, [sp, #0]
1000be90:	2335      	movs	r3, #53	; 0x35
1000be92:	2235      	movs	r2, #53	; 0x35
1000be94:	4911      	ldr	r1, [pc, #68]	; (1000bedc <rpmsg_init_vdev+0x19c>)
1000be96:	f7ff fc21 	bl	1000b6dc <rpmsg_initialize_ept>
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
1000be9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000be9c:	3308      	adds	r3, #8
1000be9e:	4619      	mov	r1, r3
1000bea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
1000bea2:	f7ff faf4 	bl	1000b48e <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
1000bea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
1000bea8:	4618      	mov	r0, r3
1000beaa:	3738      	adds	r7, #56	; 0x38
1000beac:	46bd      	mov	sp, r7
1000beae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
1000beb2:	bf00      	nop
1000beb4:	1000ba89 	.word	0x1000ba89
1000beb8:	1000b891 	.word	0x1000b891
1000bebc:	1000b8b9 	.word	0x1000b8b9
1000bec0:	1000b90b 	.word	0x1000b90b
1000bec4:	1000b9b1 	.word	0x1000b9b1
1000bec8:	10012620 	.word	0x10012620
1000becc:	10012628 	.word	0x10012628
1000bed0:	1000bb21 	.word	0x1000bb21
1000bed4:	1000bb35 	.word	0x1000bb35
1000bed8:	1000bc59 	.word	0x1000bc59
1000bedc:	10012630 	.word	0x10012630

1000bee0 <metal_machine_cache_flush>:

	/* Add implementation here */
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
1000bee0:	b480      	push	{r7}
1000bee2:	b083      	sub	sp, #12
1000bee4:	af00      	add	r7, sp, #0
1000bee6:	6078      	str	r0, [r7, #4]
1000bee8:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
1000beea:	bf00      	nop
1000beec:	370c      	adds	r7, #12
1000beee:	46bd      	mov	sp, r7
1000bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bef4:	4770      	bx	lr

1000bef6 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
1000bef6:	b480      	push	{r7}
1000bef8:	b083      	sub	sp, #12
1000befa:	af00      	add	r7, sp, #0
1000befc:	6078      	str	r0, [r7, #4]
1000befe:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
1000bf00:	bf00      	nop
1000bf02:	370c      	adds	r7, #12
1000bf04:	46bd      	mov	sp, r7
1000bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bf0a:	4770      	bx	lr

1000bf0c <metal_machine_io_mem_map>:
	/* Add implementation here */
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
1000bf0c:	b480      	push	{r7}
1000bf0e:	b085      	sub	sp, #20
1000bf10:	af00      	add	r7, sp, #0
1000bf12:	60f8      	str	r0, [r7, #12]
1000bf14:	60b9      	str	r1, [r7, #8]
1000bf16:	607a      	str	r2, [r7, #4]
1000bf18:	603b      	str	r3, [r7, #0]
	metal_unused(size);
	metal_unused(flags);

	/* Add implementation here */

	return va;
1000bf1a:	68fb      	ldr	r3, [r7, #12]
}
1000bf1c:	4618      	mov	r0, r3
1000bf1e:	3714      	adds	r7, #20
1000bf20:	46bd      	mov	sp, r7
1000bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bf26:	4770      	bx	lr

1000bf28 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
1000bf28:	b590      	push	{r4, r7, lr}
1000bf2a:	b08f      	sub	sp, #60	; 0x3c
1000bf2c:	af04      	add	r7, sp, #16
1000bf2e:	60f8      	str	r0, [r7, #12]
1000bf30:	60b9      	str	r1, [r7, #8]
1000bf32:	607a      	str	r2, [r7, #4]
1000bf34:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
1000bf36:	68fb      	ldr	r3, [r7, #12]
1000bf38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000bf3a:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
1000bf3c:	687a      	ldr	r2, [r7, #4]
1000bf3e:	6a3b      	ldr	r3, [r7, #32]
1000bf40:	429a      	cmp	r2, r3
1000bf42:	d901      	bls.n	1000bf48 <virtio_create_virtqueues+0x20>
		return ERROR_VQUEUE_INVLD_PARAM;
1000bf44:	4b1e      	ldr	r3, [pc, #120]	; (1000bfc0 <virtio_create_virtqueues+0x98>)
1000bf46:	e036      	b.n	1000bfb6 <virtio_create_virtqueues+0x8e>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
1000bf48:	2300      	movs	r3, #0
1000bf4a:	627b      	str	r3, [r7, #36]	; 0x24
1000bf4c:	e02e      	b.n	1000bfac <virtio_create_virtqueues+0x84>
		vring_info = &vdev->vrings_info[i];
1000bf4e:	68fb      	ldr	r3, [r7, #12]
1000bf50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1000bf52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000bf54:	4613      	mov	r3, r2
1000bf56:	005b      	lsls	r3, r3, #1
1000bf58:	4413      	add	r3, r2
1000bf5a:	00db      	lsls	r3, r3, #3
1000bf5c:	440b      	add	r3, r1
1000bf5e:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
1000bf60:	69fb      	ldr	r3, [r7, #28]
1000bf62:	3304      	adds	r3, #4
1000bf64:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
1000bf66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bf68:	b298      	uxth	r0, r3
1000bf6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bf6c:	009b      	lsls	r3, r3, #2
1000bf6e:	683a      	ldr	r2, [r7, #0]
1000bf70:	4413      	add	r3, r2
1000bf72:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
1000bf74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bf76:	009b      	lsls	r3, r3, #2
1000bf78:	6bba      	ldr	r2, [r7, #56]	; 0x38
1000bf7a:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
1000bf7c:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
1000bf7e:	68fa      	ldr	r2, [r7, #12]
1000bf80:	6a12      	ldr	r2, [r2, #32]
1000bf82:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
1000bf84:	69f9      	ldr	r1, [r7, #28]
1000bf86:	6809      	ldr	r1, [r1, #0]
1000bf88:	9102      	str	r1, [sp, #8]
1000bf8a:	9201      	str	r2, [sp, #4]
1000bf8c:	9300      	str	r3, [sp, #0]
1000bf8e:	69bb      	ldr	r3, [r7, #24]
1000bf90:	4622      	mov	r2, r4
1000bf92:	4601      	mov	r1, r0
1000bf94:	68f8      	ldr	r0, [r7, #12]
1000bf96:	f000 f90e 	bl	1000c1b6 <virtqueue_create>
1000bf9a:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
1000bf9c:	697b      	ldr	r3, [r7, #20]
1000bf9e:	2b00      	cmp	r3, #0
1000bfa0:	d001      	beq.n	1000bfa6 <virtio_create_virtqueues+0x7e>
			return ret;
1000bfa2:	697b      	ldr	r3, [r7, #20]
1000bfa4:	e007      	b.n	1000bfb6 <virtio_create_virtqueues+0x8e>
	for (i = 0; i < nvqs; i++) {
1000bfa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bfa8:	3301      	adds	r3, #1
1000bfaa:	627b      	str	r3, [r7, #36]	; 0x24
1000bfac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000bfae:	687b      	ldr	r3, [r7, #4]
1000bfb0:	429a      	cmp	r2, r3
1000bfb2:	d3cc      	bcc.n	1000bf4e <virtio_create_virtqueues+0x26>
	}
	return 0;
1000bfb4:	2300      	movs	r3, #0
}
1000bfb6:	4618      	mov	r0, r3
1000bfb8:	372c      	adds	r7, #44	; 0x2c
1000bfba:	46bd      	mov	sp, r7
1000bfbc:	bd90      	pop	{r4, r7, pc}
1000bfbe:	bf00      	nop
1000bfc0:	fffff440 	.word	0xfffff440

1000bfc4 <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
1000bfc4:	b480      	push	{r7}
1000bfc6:	b085      	sub	sp, #20
1000bfc8:	af00      	add	r7, sp, #0
1000bfca:	60f8      	str	r0, [r7, #12]
1000bfcc:	60b9      	str	r1, [r7, #8]
1000bfce:	607a      	str	r2, [r7, #4]
1000bfd0:	603b      	str	r3, [r7, #0]
	vr->num = num;
1000bfd2:	68fb      	ldr	r3, [r7, #12]
1000bfd4:	68ba      	ldr	r2, [r7, #8]
1000bfd6:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
1000bfd8:	68fb      	ldr	r3, [r7, #12]
1000bfda:	687a      	ldr	r2, [r7, #4]
1000bfdc:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
1000bfde:	68bb      	ldr	r3, [r7, #8]
1000bfe0:	011b      	lsls	r3, r3, #4
1000bfe2:	687a      	ldr	r2, [r7, #4]
1000bfe4:	441a      	add	r2, r3
1000bfe6:	68fb      	ldr	r3, [r7, #12]
1000bfe8:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
1000bfea:	68fb      	ldr	r3, [r7, #12]
1000bfec:	689a      	ldr	r2, [r3, #8]
1000bfee:	68bb      	ldr	r3, [r7, #8]
1000bff0:	005b      	lsls	r3, r3, #1
1000bff2:	4413      	add	r3, r2
1000bff4:	3304      	adds	r3, #4
1000bff6:	461a      	mov	r2, r3
1000bff8:	683b      	ldr	r3, [r7, #0]
1000bffa:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
1000bffc:	1c5a      	adds	r2, r3, #1
1000bffe:	683b      	ldr	r3, [r7, #0]
1000c000:	425b      	negs	r3, r3
1000c002:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
1000c004:	461a      	mov	r2, r3
1000c006:	68fb      	ldr	r3, [r7, #12]
1000c008:	60da      	str	r2, [r3, #12]
}
1000c00a:	bf00      	nop
1000c00c:	3714      	adds	r7, #20
1000c00e:	46bd      	mov	sp, r7
1000c010:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c014:	4770      	bx	lr

1000c016 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
1000c016:	b480      	push	{r7}
1000c018:	b083      	sub	sp, #12
1000c01a:	af00      	add	r7, sp, #0
1000c01c:	4603      	mov	r3, r0
1000c01e:	80fb      	strh	r3, [r7, #6]
1000c020:	460b      	mov	r3, r1
1000c022:	80bb      	strh	r3, [r7, #4]
1000c024:	4613      	mov	r3, r2
1000c026:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
1000c028:	88ba      	ldrh	r2, [r7, #4]
1000c02a:	88fb      	ldrh	r3, [r7, #6]
1000c02c:	1ad3      	subs	r3, r2, r3
1000c02e:	b29b      	uxth	r3, r3
1000c030:	3b01      	subs	r3, #1
1000c032:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
1000c034:	88b9      	ldrh	r1, [r7, #4]
1000c036:	887b      	ldrh	r3, [r7, #2]
1000c038:	1acb      	subs	r3, r1, r3
1000c03a:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
1000c03c:	429a      	cmp	r2, r3
1000c03e:	bf34      	ite	cc
1000c040:	2301      	movcc	r3, #1
1000c042:	2300      	movcs	r3, #0
1000c044:	b2db      	uxtb	r3, r3
}
1000c046:	4618      	mov	r0, r3
1000c048:	370c      	adds	r7, #12
1000c04a:	46bd      	mov	sp, r7
1000c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c050:	4770      	bx	lr

1000c052 <metal_io_virt>:
{
1000c052:	b480      	push	{r7}
1000c054:	b083      	sub	sp, #12
1000c056:	af00      	add	r7, sp, #0
1000c058:	6078      	str	r0, [r7, #4]
1000c05a:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
1000c05c:	687b      	ldr	r3, [r7, #4]
1000c05e:	681b      	ldr	r3, [r3, #0]
		: NULL);
1000c060:	f1b3 3fff 	cmp.w	r3, #4294967295
1000c064:	d00a      	beq.n	1000c07c <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
1000c066:	687b      	ldr	r3, [r7, #4]
1000c068:	689b      	ldr	r3, [r3, #8]
1000c06a:	683a      	ldr	r2, [r7, #0]
1000c06c:	429a      	cmp	r2, r3
1000c06e:	d205      	bcs.n	1000c07c <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
1000c070:	687b      	ldr	r3, [r7, #4]
1000c072:	681b      	ldr	r3, [r3, #0]
1000c074:	461a      	mov	r2, r3
1000c076:	683b      	ldr	r3, [r7, #0]
1000c078:	4413      	add	r3, r2
		: NULL);
1000c07a:	e000      	b.n	1000c07e <metal_io_virt+0x2c>
1000c07c:	2300      	movs	r3, #0
}
1000c07e:	4618      	mov	r0, r3
1000c080:	370c      	adds	r7, #12
1000c082:	46bd      	mov	sp, r7
1000c084:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c088:	4770      	bx	lr

1000c08a <metal_io_phys>:
{
1000c08a:	b580      	push	{r7, lr}
1000c08c:	b084      	sub	sp, #16
1000c08e:	af00      	add	r7, sp, #0
1000c090:	6078      	str	r0, [r7, #4]
1000c092:	6039      	str	r1, [r7, #0]
	if (!io->ops.offset_to_phys) {
1000c094:	687b      	ldr	r3, [r7, #4]
1000c096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000c098:	2b00      	cmp	r3, #0
1000c09a:	d123      	bne.n	1000c0e4 <metal_io_phys+0x5a>
		unsigned long page = (io->page_shift >=
1000c09c:	687b      	ldr	r3, [r7, #4]
1000c09e:	68db      	ldr	r3, [r3, #12]
				     0 : offset >> io->page_shift);
1000c0a0:	2b1f      	cmp	r3, #31
1000c0a2:	d805      	bhi.n	1000c0b0 <metal_io_phys+0x26>
1000c0a4:	687b      	ldr	r3, [r7, #4]
1000c0a6:	68db      	ldr	r3, [r3, #12]
1000c0a8:	683a      	ldr	r2, [r7, #0]
1000c0aa:	fa22 f303 	lsr.w	r3, r2, r3
1000c0ae:	e000      	b.n	1000c0b2 <metal_io_phys+0x28>
1000c0b0:	2300      	movs	r3, #0
		unsigned long page = (io->page_shift >=
1000c0b2:	60fb      	str	r3, [r7, #12]
		return (io->physmap && offset < io->size
1000c0b4:	687b      	ldr	r3, [r7, #4]
1000c0b6:	685b      	ldr	r3, [r3, #4]
			: METAL_BAD_PHYS);
1000c0b8:	2b00      	cmp	r3, #0
1000c0ba:	d010      	beq.n	1000c0de <metal_io_phys+0x54>
		return (io->physmap && offset < io->size
1000c0bc:	687b      	ldr	r3, [r7, #4]
1000c0be:	689b      	ldr	r3, [r3, #8]
1000c0c0:	683a      	ldr	r2, [r7, #0]
1000c0c2:	429a      	cmp	r2, r3
1000c0c4:	d20b      	bcs.n	1000c0de <metal_io_phys+0x54>
			? io->physmap[page] + (offset & io->page_mask)
1000c0c6:	687b      	ldr	r3, [r7, #4]
1000c0c8:	685a      	ldr	r2, [r3, #4]
1000c0ca:	68fb      	ldr	r3, [r7, #12]
1000c0cc:	009b      	lsls	r3, r3, #2
1000c0ce:	4413      	add	r3, r2
1000c0d0:	681a      	ldr	r2, [r3, #0]
1000c0d2:	687b      	ldr	r3, [r7, #4]
1000c0d4:	6919      	ldr	r1, [r3, #16]
1000c0d6:	683b      	ldr	r3, [r7, #0]
1000c0d8:	400b      	ands	r3, r1
			: METAL_BAD_PHYS);
1000c0da:	4413      	add	r3, r2
1000c0dc:	e008      	b.n	1000c0f0 <metal_io_phys+0x66>
1000c0de:	f04f 33ff 	mov.w	r3, #4294967295
1000c0e2:	e005      	b.n	1000c0f0 <metal_io_phys+0x66>
	return io->ops.offset_to_phys(io, offset);
1000c0e4:	687b      	ldr	r3, [r7, #4]
1000c0e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000c0e8:	6839      	ldr	r1, [r7, #0]
1000c0ea:	6878      	ldr	r0, [r7, #4]
1000c0ec:	4798      	blx	r3
1000c0ee:	4603      	mov	r3, r0
}
1000c0f0:	4618      	mov	r0, r3
1000c0f2:	3710      	adds	r7, #16
1000c0f4:	46bd      	mov	sp, r7
1000c0f6:	bd80      	pop	{r7, pc}

1000c0f8 <metal_io_phys_to_offset>:
{
1000c0f8:	b580      	push	{r7, lr}
1000c0fa:	b084      	sub	sp, #16
1000c0fc:	af00      	add	r7, sp, #0
1000c0fe:	6078      	str	r0, [r7, #4]
1000c100:	6039      	str	r1, [r7, #0]
	if (!io->ops.phys_to_offset) {
1000c102:	687b      	ldr	r3, [r7, #4]
1000c104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000c106:	2b00      	cmp	r3, #0
1000c108:	d127      	bne.n	1000c15a <metal_io_phys_to_offset+0x62>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
1000c10a:	687b      	ldr	r3, [r7, #4]
1000c10c:	691b      	ldr	r3, [r3, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
1000c10e:	f1b3 3fff 	cmp.w	r3, #4294967295
1000c112:	d105      	bne.n	1000c120 <metal_io_phys_to_offset+0x28>
1000c114:	687b      	ldr	r3, [r7, #4]
1000c116:	685b      	ldr	r3, [r3, #4]
1000c118:	681b      	ldr	r3, [r3, #0]
1000c11a:	683a      	ldr	r2, [r7, #0]
1000c11c:	1ad3      	subs	r3, r2, r3
1000c11e:	e003      	b.n	1000c128 <metal_io_phys_to_offset+0x30>
1000c120:	687b      	ldr	r3, [r7, #4]
1000c122:	691a      	ldr	r2, [r3, #16]
1000c124:	683b      	ldr	r3, [r7, #0]
1000c126:	4013      	ands	r3, r2
		unsigned long offset =
1000c128:	60fb      	str	r3, [r7, #12]
			if (metal_io_phys(io, offset) == phys)
1000c12a:	68f9      	ldr	r1, [r7, #12]
1000c12c:	6878      	ldr	r0, [r7, #4]
1000c12e:	f7ff ffac 	bl	1000c08a <metal_io_phys>
1000c132:	4602      	mov	r2, r0
1000c134:	683b      	ldr	r3, [r7, #0]
1000c136:	4293      	cmp	r3, r2
1000c138:	d101      	bne.n	1000c13e <metal_io_phys_to_offset+0x46>
				return offset;
1000c13a:	68fb      	ldr	r3, [r7, #12]
1000c13c:	e013      	b.n	1000c166 <metal_io_phys_to_offset+0x6e>
			offset += io->page_mask + 1;
1000c13e:	687b      	ldr	r3, [r7, #4]
1000c140:	691a      	ldr	r2, [r3, #16]
1000c142:	68fb      	ldr	r3, [r7, #12]
1000c144:	4413      	add	r3, r2
1000c146:	3301      	adds	r3, #1
1000c148:	60fb      	str	r3, [r7, #12]
		} while (offset < io->size);
1000c14a:	687b      	ldr	r3, [r7, #4]
1000c14c:	689b      	ldr	r3, [r3, #8]
1000c14e:	68fa      	ldr	r2, [r7, #12]
1000c150:	429a      	cmp	r2, r3
1000c152:	d3ea      	bcc.n	1000c12a <metal_io_phys_to_offset+0x32>
		return METAL_BAD_OFFSET;
1000c154:	f04f 33ff 	mov.w	r3, #4294967295
1000c158:	e005      	b.n	1000c166 <metal_io_phys_to_offset+0x6e>
	return (*io->ops.phys_to_offset)(io, phys);
1000c15a:	687b      	ldr	r3, [r7, #4]
1000c15c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000c15e:	6839      	ldr	r1, [r7, #0]
1000c160:	6878      	ldr	r0, [r7, #4]
1000c162:	4798      	blx	r3
1000c164:	4603      	mov	r3, r0
}
1000c166:	4618      	mov	r0, r3
1000c168:	3710      	adds	r7, #16
1000c16a:	46bd      	mov	sp, r7
1000c16c:	bd80      	pop	{r7, pc}

1000c16e <metal_io_phys_to_virt>:
{
1000c16e:	b580      	push	{r7, lr}
1000c170:	b082      	sub	sp, #8
1000c172:	af00      	add	r7, sp, #0
1000c174:	6078      	str	r0, [r7, #4]
1000c176:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
1000c178:	6839      	ldr	r1, [r7, #0]
1000c17a:	6878      	ldr	r0, [r7, #4]
1000c17c:	f7ff ffbc 	bl	1000c0f8 <metal_io_phys_to_offset>
1000c180:	4603      	mov	r3, r0
1000c182:	4619      	mov	r1, r3
1000c184:	6878      	ldr	r0, [r7, #4]
1000c186:	f7ff ff64 	bl	1000c052 <metal_io_virt>
1000c18a:	4603      	mov	r3, r0
}
1000c18c:	4618      	mov	r0, r3
1000c18e:	3708      	adds	r7, #8
1000c190:	46bd      	mov	sp, r7
1000c192:	bd80      	pop	{r7, pc}

1000c194 <virtqueue_phys_to_virt>:
#endif /* VIRTIO_CACHED_VRINGS */

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
1000c194:	b580      	push	{r7, lr}
1000c196:	b084      	sub	sp, #16
1000c198:	af00      	add	r7, sp, #0
1000c19a:	6078      	str	r0, [r7, #4]
1000c19c:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
1000c19e:	687b      	ldr	r3, [r7, #4]
1000c1a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000c1a2:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
1000c1a4:	6839      	ldr	r1, [r7, #0]
1000c1a6:	68f8      	ldr	r0, [r7, #12]
1000c1a8:	f7ff ffe1 	bl	1000c16e <metal_io_phys_to_virt>
1000c1ac:	4603      	mov	r3, r0
}
1000c1ae:	4618      	mov	r0, r3
1000c1b0:	3710      	adds	r7, #16
1000c1b2:	46bd      	mov	sp, r7
1000c1b4:	bd80      	pop	{r7, pc}

1000c1b6 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
1000c1b6:	b580      	push	{r7, lr}
1000c1b8:	b086      	sub	sp, #24
1000c1ba:	af00      	add	r7, sp, #0
1000c1bc:	60f8      	str	r0, [r7, #12]
1000c1be:	607a      	str	r2, [r7, #4]
1000c1c0:	603b      	str	r3, [r7, #0]
1000c1c2:	460b      	mov	r3, r1
1000c1c4:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
1000c1c6:	2300      	movs	r3, #0
1000c1c8:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
1000c1ca:	697b      	ldr	r3, [r7, #20]
1000c1cc:	2b00      	cmp	r3, #0
1000c1ce:	d11e      	bne.n	1000c20e <virtqueue_create+0x58>
		vq->vq_dev = virt_dev;
1000c1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c1d2:	68fa      	ldr	r2, [r7, #12]
1000c1d4:	601a      	str	r2, [r3, #0]
		vq->vq_name = name;
1000c1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c1d8:	687a      	ldr	r2, [r7, #4]
1000c1da:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
1000c1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c1de:	897a      	ldrh	r2, [r7, #10]
1000c1e0:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
1000c1e2:	683b      	ldr	r3, [r7, #0]
1000c1e4:	891a      	ldrh	r2, [r3, #8]
1000c1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c1e8:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
1000c1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c1ec:	895a      	ldrh	r2, [r3, #10]
1000c1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c1f0:	849a      	strh	r2, [r3, #36]	; 0x24
		vq->callback = callback;
1000c1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c1f4:	6a3a      	ldr	r2, [r7, #32]
1000c1f6:	60da      	str	r2, [r3, #12]
		vq->notify = notify;
1000c1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000c1fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000c1fc:	611a      	str	r2, [r3, #16]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, ring->vaddr, ring->align);
1000c1fe:	683b      	ldr	r3, [r7, #0]
1000c200:	6819      	ldr	r1, [r3, #0]
1000c202:	683b      	ldr	r3, [r7, #0]
1000c204:	685b      	ldr	r3, [r3, #4]
1000c206:	461a      	mov	r2, r3
1000c208:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1000c20a:	f000 f8ef 	bl	1000c3ec <vq_ring_init>
	/*
	 * CACHE: nothing to be done here. Only desc.next is setup at this
	 * stage but that is only written by master, so no need to flush it.
	 */

	return status;
1000c20e:	697b      	ldr	r3, [r7, #20]
}
1000c210:	4618      	mov	r0, r3
1000c212:	3718      	adds	r7, #24
1000c214:	46bd      	mov	sp, r7
1000c216:	bd80      	pop	{r7, pc}

1000c218 <virtqueue_get_buffer_length>:

	return cookie;
}

uint32_t virtqueue_get_buffer_length(struct virtqueue *vq, uint16_t idx)
{
1000c218:	b480      	push	{r7}
1000c21a:	b083      	sub	sp, #12
1000c21c:	af00      	add	r7, sp, #0
1000c21e:	6078      	str	r0, [r7, #4]
1000c220:	460b      	mov	r3, r1
1000c222:	807b      	strh	r3, [r7, #2]
	VRING_INVALIDATE(vq->vq_ring.desc[idx].len);
	return vq->vq_ring.desc[idx].len;
1000c224:	687b      	ldr	r3, [r7, #4]
1000c226:	699a      	ldr	r2, [r3, #24]
1000c228:	887b      	ldrh	r3, [r7, #2]
1000c22a:	011b      	lsls	r3, r3, #4
1000c22c:	4413      	add	r3, r2
1000c22e:	689b      	ldr	r3, [r3, #8]
}
1000c230:	4618      	mov	r0, r3
1000c232:	370c      	adds	r7, #12
1000c234:	46bd      	mov	sp, r7
1000c236:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c23a:	4770      	bx	lr

1000c23c <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
1000c23c:	b580      	push	{r7, lr}
1000c23e:	b086      	sub	sp, #24
1000c240:	af00      	add	r7, sp, #0
1000c242:	60f8      	str	r0, [r7, #12]
1000c244:	60b9      	str	r1, [r7, #8]
1000c246:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
1000c248:	2300      	movs	r3, #0
1000c24a:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
1000c24c:	f3bf 8f5b 	dmb	ish

	/* Avail.idx is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->idx);
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
1000c250:	68fb      	ldr	r3, [r7, #12]
1000c252:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
1000c254:	68fb      	ldr	r3, [r7, #12]
1000c256:	69db      	ldr	r3, [r3, #28]
1000c258:	885b      	ldrh	r3, [r3, #2]
1000c25a:	b29b      	uxth	r3, r3
1000c25c:	429a      	cmp	r2, r3
1000c25e:	d101      	bne.n	1000c264 <virtqueue_get_available_buffer+0x28>
		return NULL;
1000c260:	2300      	movs	r3, #0
1000c262:	e02f      	b.n	1000c2c4 <virtqueue_get_available_buffer+0x88>
	VQUEUE_BUSY(vq);

	/* Avail.ring is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->ring[head_idx]);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
1000c264:	68fb      	ldr	r3, [r7, #12]
1000c266:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
1000c268:	1c5a      	adds	r2, r3, #1
1000c26a:	b291      	uxth	r1, r2
1000c26c:	68fa      	ldr	r2, [r7, #12]
1000c26e:	8611      	strh	r1, [r2, #48]	; 0x30
1000c270:	b21a      	sxth	r2, r3
1000c272:	68fb      	ldr	r3, [r7, #12]
1000c274:	895b      	ldrh	r3, [r3, #10]
1000c276:	3b01      	subs	r3, #1
1000c278:	b29b      	uxth	r3, r3
1000c27a:	b21b      	sxth	r3, r3
1000c27c:	4013      	ands	r3, r2
1000c27e:	b21b      	sxth	r3, r3
1000c280:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
1000c282:	68fb      	ldr	r3, [r7, #12]
1000c284:	69da      	ldr	r2, [r3, #28]
1000c286:	8afb      	ldrh	r3, [r7, #22]
1000c288:	005b      	lsls	r3, r3, #1
1000c28a:	4413      	add	r3, r2
1000c28c:	889b      	ldrh	r3, [r3, #4]
1000c28e:	b29a      	uxth	r2, r3
1000c290:	68bb      	ldr	r3, [r7, #8]
1000c292:	801a      	strh	r2, [r3, #0]

	/* Invalidate the desc entry written by master before accessing it */
	VRING_INVALIDATE(vq->vq_ring.desc[*avail_idx]);
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
1000c294:	68fb      	ldr	r3, [r7, #12]
1000c296:	699a      	ldr	r2, [r3, #24]
1000c298:	68bb      	ldr	r3, [r7, #8]
1000c29a:	881b      	ldrh	r3, [r3, #0]
1000c29c:	011b      	lsls	r3, r3, #4
1000c29e:	18d1      	adds	r1, r2, r3
1000c2a0:	680a      	ldr	r2, [r1, #0]
1000c2a2:	684b      	ldr	r3, [r1, #4]
1000c2a4:	4613      	mov	r3, r2
1000c2a6:	4619      	mov	r1, r3
1000c2a8:	68f8      	ldr	r0, [r7, #12]
1000c2aa:	f7ff ff73 	bl	1000c194 <virtqueue_phys_to_virt>
1000c2ae:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
1000c2b0:	68fb      	ldr	r3, [r7, #12]
1000c2b2:	699a      	ldr	r2, [r3, #24]
1000c2b4:	68bb      	ldr	r3, [r7, #8]
1000c2b6:	881b      	ldrh	r3, [r3, #0]
1000c2b8:	011b      	lsls	r3, r3, #4
1000c2ba:	4413      	add	r3, r2
1000c2bc:	689a      	ldr	r2, [r3, #8]
1000c2be:	687b      	ldr	r3, [r7, #4]
1000c2c0:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
1000c2c2:	693b      	ldr	r3, [r7, #16]
}
1000c2c4:	4618      	mov	r0, r3
1000c2c6:	3718      	adds	r7, #24
1000c2c8:	46bd      	mov	sp, r7
1000c2ca:	bd80      	pop	{r7, pc}

1000c2cc <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
1000c2cc:	b480      	push	{r7}
1000c2ce:	b087      	sub	sp, #28
1000c2d0:	af00      	add	r7, sp, #0
1000c2d2:	60f8      	str	r0, [r7, #12]
1000c2d4:	460b      	mov	r3, r1
1000c2d6:	607a      	str	r2, [r7, #4]
1000c2d8:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
1000c2da:	2300      	movs	r3, #0
1000c2dc:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
1000c2de:	68fb      	ldr	r3, [r7, #12]
1000c2e0:	895b      	ldrh	r3, [r3, #10]
1000c2e2:	897a      	ldrh	r2, [r7, #10]
1000c2e4:	429a      	cmp	r2, r3
1000c2e6:	d901      	bls.n	1000c2ec <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
1000c2e8:	4b18      	ldr	r3, [pc, #96]	; (1000c34c <virtqueue_add_consumed_buffer+0x80>)
1000c2ea:	e029      	b.n	1000c340 <virtqueue_add_consumed_buffer+0x74>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by master, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
1000c2ec:	68fb      	ldr	r3, [r7, #12]
1000c2ee:	6a1b      	ldr	r3, [r3, #32]
1000c2f0:	885b      	ldrh	r3, [r3, #2]
1000c2f2:	b29b      	uxth	r3, r3
1000c2f4:	b21a      	sxth	r2, r3
1000c2f6:	68fb      	ldr	r3, [r7, #12]
1000c2f8:	895b      	ldrh	r3, [r3, #10]
1000c2fa:	3b01      	subs	r3, #1
1000c2fc:	b29b      	uxth	r3, r3
1000c2fe:	b21b      	sxth	r3, r3
1000c300:	4013      	ands	r3, r2
1000c302:	b21b      	sxth	r3, r3
1000c304:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
1000c306:	68fb      	ldr	r3, [r7, #12]
1000c308:	6a1a      	ldr	r2, [r3, #32]
1000c30a:	8a7b      	ldrh	r3, [r7, #18]
1000c30c:	00db      	lsls	r3, r3, #3
1000c30e:	4413      	add	r3, r2
1000c310:	3304      	adds	r3, #4
1000c312:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
1000c314:	897a      	ldrh	r2, [r7, #10]
1000c316:	697b      	ldr	r3, [r7, #20]
1000c318:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
1000c31a:	697b      	ldr	r3, [r7, #20]
1000c31c:	687a      	ldr	r2, [r7, #4]
1000c31e:	605a      	str	r2, [r3, #4]

	/* We still need to flush it because this is read by master */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
1000c320:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
1000c324:	68fb      	ldr	r3, [r7, #12]
1000c326:	6a1b      	ldr	r3, [r3, #32]
1000c328:	885a      	ldrh	r2, [r3, #2]
1000c32a:	b292      	uxth	r2, r2
1000c32c:	3201      	adds	r2, #1
1000c32e:	b292      	uxth	r2, r2
1000c330:	805a      	strh	r2, [r3, #2]

	/* Used.idx is read by master, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
1000c332:	68fb      	ldr	r3, [r7, #12]
1000c334:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
1000c336:	3301      	adds	r3, #1
1000c338:	b29a      	uxth	r2, r3
1000c33a:	68fb      	ldr	r3, [r7, #12]
1000c33c:	84da      	strh	r2, [r3, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
1000c33e:	2300      	movs	r3, #0
}
1000c340:	4618      	mov	r0, r3
1000c342:	371c      	adds	r7, #28
1000c344:	46bd      	mov	sp, r7
1000c346:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c34a:	4770      	bx	lr
1000c34c:	fffff441 	.word	0xfffff441

1000c350 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
1000c350:	b480      	push	{r7}
1000c352:	b083      	sub	sp, #12
1000c354:	af00      	add	r7, sp, #0
1000c356:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
1000c358:	6879      	ldr	r1, [r7, #4]
1000c35a:	6809      	ldr	r1, [r1, #0]
1000c35c:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
1000c360:	f000 5200 	and.w	r2, r0, #536870912	; 0x20000000
1000c364:	2300      	movs	r3, #0
1000c366:	4313      	orrs	r3, r2
1000c368:	d015      	beq.n	1000c396 <virtqueue_disable_cb+0x46>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
			VRING_FLUSH(vring_used_event(&vq->vq_ring));
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000c36a:	687b      	ldr	r3, [r7, #4]
1000c36c:	681b      	ldr	r3, [r3, #0]
1000c36e:	699b      	ldr	r3, [r3, #24]
1000c370:	2b01      	cmp	r3, #1
1000c372:	d11f      	bne.n	1000c3b4 <virtqueue_disable_cb+0x64>
			vring_avail_event(&vq->vq_ring) =
			    vq->vq_available_idx - vq->vq_nentries - 1;
1000c374:	687b      	ldr	r3, [r7, #4]
1000c376:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
1000c378:	687b      	ldr	r3, [r7, #4]
1000c37a:	895b      	ldrh	r3, [r3, #10]
1000c37c:	1ad3      	subs	r3, r2, r3
1000c37e:	b299      	uxth	r1, r3
			vring_avail_event(&vq->vq_ring) =
1000c380:	687b      	ldr	r3, [r7, #4]
1000c382:	6a1a      	ldr	r2, [r3, #32]
1000c384:	687b      	ldr	r3, [r7, #4]
1000c386:	695b      	ldr	r3, [r3, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
1000c388:	3901      	subs	r1, #1
1000c38a:	b289      	uxth	r1, r1
			vring_avail_event(&vq->vq_ring) =
1000c38c:	00db      	lsls	r3, r3, #3
1000c38e:	4413      	add	r3, r2
1000c390:	460a      	mov	r2, r1
1000c392:	809a      	strh	r2, [r3, #4]
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	VQUEUE_IDLE(vq);
}
1000c394:	e00e      	b.n	1000c3b4 <virtqueue_disable_cb+0x64>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000c396:	687b      	ldr	r3, [r7, #4]
1000c398:	681b      	ldr	r3, [r3, #0]
1000c39a:	699b      	ldr	r3, [r3, #24]
1000c39c:	2b01      	cmp	r3, #1
1000c39e:	d109      	bne.n	1000c3b4 <virtqueue_disable_cb+0x64>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
1000c3a0:	687b      	ldr	r3, [r7, #4]
1000c3a2:	6a1b      	ldr	r3, [r3, #32]
1000c3a4:	881b      	ldrh	r3, [r3, #0]
1000c3a6:	b29a      	uxth	r2, r3
1000c3a8:	687b      	ldr	r3, [r7, #4]
1000c3aa:	6a1b      	ldr	r3, [r3, #32]
1000c3ac:	f042 0201 	orr.w	r2, r2, #1
1000c3b0:	b292      	uxth	r2, r2
1000c3b2:	801a      	strh	r2, [r3, #0]
}
1000c3b4:	bf00      	nop
1000c3b6:	370c      	adds	r7, #12
1000c3b8:	46bd      	mov	sp, r7
1000c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c3be:	4770      	bx	lr

1000c3c0 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
1000c3c0:	b580      	push	{r7, lr}
1000c3c2:	b082      	sub	sp, #8
1000c3c4:	af00      	add	r7, sp, #0
1000c3c6:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
1000c3c8:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify(vq))
1000c3cc:	6878      	ldr	r0, [r7, #4]
1000c3ce:	f000 f823 	bl	1000c418 <vq_ring_must_notify>
1000c3d2:	4603      	mov	r3, r0
1000c3d4:	2b00      	cmp	r3, #0
1000c3d6:	d002      	beq.n	1000c3de <virtqueue_kick+0x1e>
		vq_ring_notify(vq);
1000c3d8:	6878      	ldr	r0, [r7, #4]
1000c3da:	f000 f86b 	bl	1000c4b4 <vq_ring_notify>

	vq->vq_queued_cnt = 0;
1000c3de:	687b      	ldr	r3, [r7, #4]
1000c3e0:	2200      	movs	r2, #0
1000c3e2:	84da      	strh	r2, [r3, #38]	; 0x26

	VQUEUE_IDLE(vq);
}
1000c3e4:	bf00      	nop
1000c3e6:	3708      	adds	r7, #8
1000c3e8:	46bd      	mov	sp, r7
1000c3ea:	bd80      	pop	{r7, pc}

1000c3ec <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
1000c3ec:	b580      	push	{r7, lr}
1000c3ee:	b086      	sub	sp, #24
1000c3f0:	af00      	add	r7, sp, #0
1000c3f2:	60f8      	str	r0, [r7, #12]
1000c3f4:	60b9      	str	r1, [r7, #8]
1000c3f6:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int size;

	size = vq->vq_nentries;
1000c3f8:	68fb      	ldr	r3, [r7, #12]
1000c3fa:	895b      	ldrh	r3, [r3, #10]
1000c3fc:	617b      	str	r3, [r7, #20]
	vr = &vq->vq_ring;
1000c3fe:	68fb      	ldr	r3, [r7, #12]
1000c400:	3314      	adds	r3, #20
1000c402:	613b      	str	r3, [r7, #16]

	vring_init(vr, size, ring_mem, alignment);
1000c404:	6979      	ldr	r1, [r7, #20]
1000c406:	687b      	ldr	r3, [r7, #4]
1000c408:	68ba      	ldr	r2, [r7, #8]
1000c40a:	6938      	ldr	r0, [r7, #16]
1000c40c:	f7ff fdda 	bl	1000bfc4 <vring_init>
		for (i = 0; i < size - 1; i++)
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
	}
#endif /*VIRTIO_SLAVE_ONLY*/
}
1000c410:	bf00      	nop
1000c412:	3718      	adds	r7, #24
1000c414:	46bd      	mov	sp, r7
1000c416:	bd80      	pop	{r7, pc}

1000c418 <vq_ring_must_notify>:
 *
 * vq_ring_must_notify
 *
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
1000c418:	b580      	push	{r7, lr}
1000c41a:	b084      	sub	sp, #16
1000c41c:	af00      	add	r7, sp, #0
1000c41e:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
1000c420:	6879      	ldr	r1, [r7, #4]
1000c422:	6809      	ldr	r1, [r1, #0]
1000c424:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
1000c428:	f000 5200 	and.w	r2, r0, #536870912	; 0x20000000
1000c42c:	2300      	movs	r3, #0
1000c42e:	4313      	orrs	r3, r2
1000c430:	d02a      	beq.n	1000c488 <vq_ring_must_notify+0x70>
			return vring_need_event(event_idx, new_idx,
						prev_idx) != 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000c432:	687b      	ldr	r3, [r7, #4]
1000c434:	681b      	ldr	r3, [r3, #0]
1000c436:	699b      	ldr	r3, [r3, #24]
1000c438:	2b01      	cmp	r3, #1
1000c43a:	d136      	bne.n	1000c4aa <vq_ring_must_notify+0x92>
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
1000c43c:	687b      	ldr	r3, [r7, #4]
1000c43e:	6a1b      	ldr	r3, [r3, #32]
1000c440:	789a      	ldrb	r2, [r3, #2]
1000c442:	78db      	ldrb	r3, [r3, #3]
1000c444:	021b      	lsls	r3, r3, #8
1000c446:	4313      	orrs	r3, r2
1000c448:	81fb      	strh	r3, [r7, #14]
			prev_idx = new_idx - vq->vq_queued_cnt;
1000c44a:	687b      	ldr	r3, [r7, #4]
1000c44c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
1000c44e:	89fa      	ldrh	r2, [r7, #14]
1000c450:	1ad3      	subs	r3, r2, r3
1000c452:	81bb      	strh	r3, [r7, #12]
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
1000c454:	687b      	ldr	r3, [r7, #4]
1000c456:	69da      	ldr	r2, [r3, #28]
1000c458:	687b      	ldr	r3, [r7, #4]
1000c45a:	6959      	ldr	r1, [r3, #20]
1000c45c:	004b      	lsls	r3, r1, #1
1000c45e:	4413      	add	r3, r2
1000c460:	7918      	ldrb	r0, [r3, #4]
1000c462:	004b      	lsls	r3, r1, #1
1000c464:	4413      	add	r3, r2
1000c466:	795b      	ldrb	r3, [r3, #5]
1000c468:	021b      	lsls	r3, r3, #8
1000c46a:	4303      	orrs	r3, r0
1000c46c:	817b      	strh	r3, [r7, #10]
			return vring_need_event(event_idx, new_idx,
1000c46e:	89ba      	ldrh	r2, [r7, #12]
1000c470:	89f9      	ldrh	r1, [r7, #14]
1000c472:	897b      	ldrh	r3, [r7, #10]
1000c474:	4618      	mov	r0, r3
1000c476:	f7ff fdce 	bl	1000c016 <vring_need_event>
1000c47a:	4603      	mov	r3, r0
						prev_idx) != 0;
1000c47c:	2b00      	cmp	r3, #0
1000c47e:	bf14      	ite	ne
1000c480:	2301      	movne	r3, #1
1000c482:	2300      	moveq	r3, #0
1000c484:	b2db      	uxtb	r3, r3
1000c486:	e011      	b.n	1000c4ac <vq_ring_must_notify+0x94>
			return (vq->vq_ring.used->flags &
				VRING_USED_F_NO_NOTIFY) == 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000c488:	687b      	ldr	r3, [r7, #4]
1000c48a:	681b      	ldr	r3, [r3, #0]
1000c48c:	699b      	ldr	r3, [r3, #24]
1000c48e:	2b01      	cmp	r3, #1
1000c490:	d10b      	bne.n	1000c4aa <vq_ring_must_notify+0x92>
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
1000c492:	687b      	ldr	r3, [r7, #4]
1000c494:	69db      	ldr	r3, [r3, #28]
1000c496:	881b      	ldrh	r3, [r3, #0]
1000c498:	b29b      	uxth	r3, r3
1000c49a:	f003 0301 	and.w	r3, r3, #1
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
1000c49e:	2b00      	cmp	r3, #0
1000c4a0:	bf0c      	ite	eq
1000c4a2:	2301      	moveq	r3, #1
1000c4a4:	2300      	movne	r3, #0
1000c4a6:	b2db      	uxtb	r3, r3
1000c4a8:	e000      	b.n	1000c4ac <vq_ring_must_notify+0x94>
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	return 0;
1000c4aa:	2300      	movs	r3, #0
}
1000c4ac:	4618      	mov	r0, r3
1000c4ae:	3710      	adds	r7, #16
1000c4b0:	46bd      	mov	sp, r7
1000c4b2:	bd80      	pop	{r7, pc}

1000c4b4 <vq_ring_notify>:
 *
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
1000c4b4:	b580      	push	{r7, lr}
1000c4b6:	b082      	sub	sp, #8
1000c4b8:	af00      	add	r7, sp, #0
1000c4ba:	6078      	str	r0, [r7, #4]
	if (vq->notify)
1000c4bc:	687b      	ldr	r3, [r7, #4]
1000c4be:	691b      	ldr	r3, [r3, #16]
1000c4c0:	2b00      	cmp	r3, #0
1000c4c2:	d003      	beq.n	1000c4cc <vq_ring_notify+0x18>
		vq->notify(vq);
1000c4c4:	687b      	ldr	r3, [r7, #4]
1000c4c6:	691b      	ldr	r3, [r3, #16]
1000c4c8:	6878      	ldr	r0, [r7, #4]
1000c4ca:	4798      	blx	r3
}
1000c4cc:	bf00      	nop
1000c4ce:	3708      	adds	r7, #8
1000c4d0:	46bd      	mov	sp, r7
1000c4d2:	bd80      	pop	{r7, pc}

1000c4d4 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
1000c4d4:	b580      	push	{r7, lr}
1000c4d6:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN PRE_MAILBOX_INIT */

   /* USER CODE END  PRE_MAILBOX_INIT */

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_1, IPCC_CHANNEL_DIR_RX,
1000c4d8:	4b0d      	ldr	r3, [pc, #52]	; (1000c510 <MAILBOX_Init+0x3c>)
1000c4da:	2201      	movs	r2, #1
1000c4dc:	2100      	movs	r1, #0
1000c4de:	480d      	ldr	r0, [pc, #52]	; (1000c514 <MAILBOX_Init+0x40>)
1000c4e0:	f7f7 f812 	bl	10003508 <HAL_IPCC_ActivateNotification>
1000c4e4:	4603      	mov	r3, r0
1000c4e6:	2b00      	cmp	r3, #0
1000c4e8:	d002      	beq.n	1000c4f0 <MAILBOX_Init+0x1c>
          IPCC_channel1_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_1 RX fail\n", __func__);
    return -1;
1000c4ea:	f04f 33ff 	mov.w	r3, #4294967295
1000c4ee:	e00c      	b.n	1000c50a <MAILBOX_Init+0x36>
  }

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_2, IPCC_CHANNEL_DIR_RX,
1000c4f0:	4b09      	ldr	r3, [pc, #36]	; (1000c518 <MAILBOX_Init+0x44>)
1000c4f2:	2201      	movs	r2, #1
1000c4f4:	2101      	movs	r1, #1
1000c4f6:	4807      	ldr	r0, [pc, #28]	; (1000c514 <MAILBOX_Init+0x40>)
1000c4f8:	f7f7 f806 	bl	10003508 <HAL_IPCC_ActivateNotification>
1000c4fc:	4603      	mov	r3, r0
1000c4fe:	2b00      	cmp	r3, #0
1000c500:	d002      	beq.n	1000c508 <MAILBOX_Init+0x34>
          IPCC_channel2_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_2 RX fail\n", __func__);
    return -1;
1000c502:	f04f 33ff 	mov.w	r3, #4294967295
1000c506:	e000      	b.n	1000c50a <MAILBOX_Init+0x36>
  }

  /* USER CODE BEGIN POST_MAILBOX_INIT */

  /* USER CODE END  POST_MAILBOX_INIT */
  return 0;
1000c508:	2300      	movs	r3, #0
}
1000c50a:	4618      	mov	r0, r3
1000c50c:	bd80      	pop	{r7, pc}
1000c50e:	bf00      	nop
1000c510:	1000c581 	.word	0x1000c581
1000c514:	10020e70 	.word	0x10020e70
1000c518:	1000c5ad 	.word	0x1000c5ad

1000c51c <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
1000c51c:	b580      	push	{r7, lr}
1000c51e:	b084      	sub	sp, #16
1000c520:	af00      	add	r7, sp, #0
1000c522:	6078      	str	r0, [r7, #4]
1000c524:	6039      	str	r1, [r7, #0]
   /* USER CODE BEGIN PRE_MAILBOX_NOTIFY */

   /* USER CODE END  PRE_MAILBOX_NOTIFY */

  /* Called after virtqueue processing: time to inform the remote */
  if (id == VRING0_ID) {
1000c526:	683b      	ldr	r3, [r7, #0]
1000c528:	2b00      	cmp	r3, #0
1000c52a:	d102      	bne.n	1000c532 <MAILBOX_Notify+0x16>
    channel = IPCC_CHANNEL_1;
1000c52c:	2300      	movs	r3, #0
1000c52e:	60fb      	str	r3, [r7, #12]
1000c530:	e008      	b.n	1000c544 <MAILBOX_Notify+0x28>
    OPENAMP_log_dbg("Send msg on ch_1\r\n");
  }
  else if (id == VRING1_ID) {
1000c532:	683b      	ldr	r3, [r7, #0]
1000c534:	2b01      	cmp	r3, #1
1000c536:	d102      	bne.n	1000c53e <MAILBOX_Notify+0x22>
    /* Note: the OpenAMP framework never notifies this */
    channel = IPCC_CHANNEL_2;
1000c538:	2301      	movs	r3, #1
1000c53a:	60fb      	str	r3, [r7, #12]
1000c53c:	e002      	b.n	1000c544 <MAILBOX_Notify+0x28>
    OPENAMP_log_dbg("Send 'buff free' on ch_2\r\n");
  }
  else {
    OPENAMP_log_err("invalid vring (%d)\r\n", (int)id);
    return -1;
1000c53e:	f04f 33ff 	mov.w	r3, #4294967295
1000c542:	e016      	b.n	1000c572 <MAILBOX_Notify+0x56>
  }

  /* Check that the channel is free (otherwise wait until it is) */
  if (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED) {
1000c544:	2200      	movs	r2, #0
1000c546:	68f9      	ldr	r1, [r7, #12]
1000c548:	480c      	ldr	r0, [pc, #48]	; (1000c57c <MAILBOX_Notify+0x60>)
1000c54a:	f7f7 f82b 	bl	100035a4 <HAL_IPCC_GetChannelStatus>
1000c54e:	4603      	mov	r3, r0
1000c550:	2b01      	cmp	r3, #1
1000c552:	d108      	bne.n	1000c566 <MAILBOX_Notify+0x4a>
    OPENAMP_log_dbg("Waiting for channel to be freed\r\n");
    while (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED)
1000c554:	bf00      	nop
1000c556:	2200      	movs	r2, #0
1000c558:	68f9      	ldr	r1, [r7, #12]
1000c55a:	4808      	ldr	r0, [pc, #32]	; (1000c57c <MAILBOX_Notify+0x60>)
1000c55c:	f7f7 f822 	bl	100035a4 <HAL_IPCC_GetChannelStatus>
1000c560:	4603      	mov	r3, r0
1000c562:	2b01      	cmp	r3, #1
1000c564:	d0f7      	beq.n	1000c556 <MAILBOX_Notify+0x3a>
      ;
  }

  /* Inform A7 (either new message, or buf free) */
  HAL_IPCC_NotifyCPU(&hipcc, channel, IPCC_CHANNEL_DIR_TX);
1000c566:	2200      	movs	r2, #0
1000c568:	68f9      	ldr	r1, [r7, #12]
1000c56a:	4804      	ldr	r0, [pc, #16]	; (1000c57c <MAILBOX_Notify+0x60>)
1000c56c:	f7f7 f84e 	bl	1000360c <HAL_IPCC_NotifyCPU>

 /* USER CODE BEGIN POST_MAILBOX_NOTIFY */

 /* USER CODE END  POST_MAILBOX_NOTIFY */

  return 0;
1000c570:	2300      	movs	r3, #0
}
1000c572:	4618      	mov	r0, r3
1000c574:	3710      	adds	r7, #16
1000c576:	46bd      	mov	sp, r7
1000c578:	bd80      	pop	{r7, pc}
1000c57a:	bf00      	nop
1000c57c:	10020e70 	.word	0x10020e70

1000c580 <IPCC_channel1_callback>:

/* USER CODE END 0 */
/* Callback from IPCC Interrupt Handler: Master Processor informs that there are some free buffers */
void IPCC_channel1_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
1000c580:	b580      	push	{r7, lr}
1000c582:	b084      	sub	sp, #16
1000c584:	af00      	add	r7, sp, #0
1000c586:	60f8      	str	r0, [r7, #12]
1000c588:	60b9      	str	r1, [r7, #8]
1000c58a:	4613      	mov	r3, r2
1000c58c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL1_CALLBACK */

  if (msg_received_ch1 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel1_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch1);

  msg_received_ch1 = MBOX_BUF_FREE;
1000c58e:	4b06      	ldr	r3, [pc, #24]	; (1000c5a8 <IPCC_channel1_callback+0x28>)
1000c590:	2202      	movs	r2, #2
1000c592:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the 'buff free' msg */
  OPENAMP_log_dbg("Ack 'buff free' message on ch1\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
1000c594:	2201      	movs	r2, #1
1000c596:	68b9      	ldr	r1, [r7, #8]
1000c598:	68f8      	ldr	r0, [r7, #12]
1000c59a:	f7f7 f837 	bl	1000360c <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL1_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL1_CALLBACK */
}
1000c59e:	bf00      	nop
1000c5a0:	3710      	adds	r7, #16
1000c5a2:	46bd      	mov	sp, r7
1000c5a4:	bd80      	pop	{r7, pc}
1000c5a6:	bf00      	nop
1000c5a8:	10029b1c 	.word	0x10029b1c

1000c5ac <IPCC_channel2_callback>:

/* Callback from IPCC Interrupt Handler: new message received from Master Processor */
void IPCC_channel2_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
1000c5ac:	b580      	push	{r7, lr}
1000c5ae:	b084      	sub	sp, #16
1000c5b0:	af00      	add	r7, sp, #0
1000c5b2:	60f8      	str	r0, [r7, #12]
1000c5b4:	60b9      	str	r1, [r7, #8]
1000c5b6:	4613      	mov	r3, r2
1000c5b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL2_CALLBACK */

  if (msg_received_ch2 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel2_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch2);

  msg_received_ch2 = MBOX_NEW_MSG;
1000c5ba:	4b06      	ldr	r3, [pc, #24]	; (1000c5d4 <IPCC_channel2_callback+0x28>)
1000c5bc:	2201      	movs	r2, #1
1000c5be:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the new msg */
  OPENAMP_log_dbg("Ack new message on ch2\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
1000c5c0:	2201      	movs	r2, #1
1000c5c2:	68b9      	ldr	r1, [r7, #8]
1000c5c4:	68f8      	ldr	r0, [r7, #12]
1000c5c6:	f7f7 f821 	bl	1000360c <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL2_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL2_CALLBACK */
}
1000c5ca:	bf00      	nop
1000c5cc:	3710      	adds	r7, #16
1000c5ce:	46bd      	mov	sp, r7
1000c5d0:	bd80      	pop	{r7, pc}
1000c5d2:	bf00      	nop
1000c5d4:	10029b20 	.word	0x10029b20

1000c5d8 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
1000c5d8:	b480      	push	{r7}
1000c5da:	b083      	sub	sp, #12
1000c5dc:	af00      	add	r7, sp, #0
1000c5de:	6078      	str	r0, [r7, #4]
1000c5e0:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
1000c5e2:	687b      	ldr	r3, [r7, #4]
1000c5e4:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
1000c5e6:	683a      	ldr	r2, [r7, #0]
1000c5e8:	429a      	cmp	r2, r3
1000c5ea:	d209      	bcs.n	1000c600 <metal_device_io_region+0x28>
1000c5ec:	683a      	ldr	r2, [r7, #0]
1000c5ee:	4613      	mov	r3, r2
1000c5f0:	00db      	lsls	r3, r3, #3
1000c5f2:	1a9b      	subs	r3, r3, r2
1000c5f4:	00db      	lsls	r3, r3, #3
1000c5f6:	3308      	adds	r3, #8
1000c5f8:	687a      	ldr	r2, [r7, #4]
1000c5fa:	4413      	add	r3, r2
1000c5fc:	3304      	adds	r3, #4
1000c5fe:	e000      	b.n	1000c602 <metal_device_io_region+0x2a>
1000c600:	2300      	movs	r3, #0
}
1000c602:	4618      	mov	r0, r3
1000c604:	370c      	adds	r7, #12
1000c606:	46bd      	mov	sp, r7
1000c608:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c60c:	4770      	bx	lr
	...

1000c610 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
1000c610:	b590      	push	{r4, r7, lr}
1000c612:	b08d      	sub	sp, #52	; 0x34
1000c614:	af04      	add	r7, sp, #16
1000c616:	6078      	str	r0, [r7, #4]
  int status = 0;
1000c618:	2300      	movs	r3, #0
1000c61a:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
1000c61c:	2300      	movs	r3, #0
1000c61e:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
1000c620:	4a41      	ldr	r2, [pc, #260]	; (1000c728 <OPENAMP_shmem_init+0x118>)
1000c622:	f107 0310 	add.w	r3, r7, #16
1000c626:	e892 0003 	ldmia.w	r2, {r0, r1}
1000c62a:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
1000c62e:	2300      	movs	r3, #0
1000c630:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
1000c632:	2300      	movs	r3, #0
1000c634:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
1000c636:	f107 0310 	add.w	r3, r7, #16
1000c63a:	4618      	mov	r0, r3
1000c63c:	f7fe fa5c 	bl	1000aaf8 <metal_init>

  status = metal_register_generic_device(&shm_device);
1000c640:	483a      	ldr	r0, [pc, #232]	; (1000c72c <OPENAMP_shmem_init+0x11c>)
1000c642:	f7fe f903 	bl	1000a84c <metal_register_generic_device>
1000c646:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
1000c648:	69fb      	ldr	r3, [r7, #28]
1000c64a:	2b00      	cmp	r3, #0
1000c64c:	d001      	beq.n	1000c652 <OPENAMP_shmem_init+0x42>
    return status;
1000c64e:	69fb      	ldr	r3, [r7, #28]
1000c650:	e066      	b.n	1000c720 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
1000c652:	f107 0318 	add.w	r3, r7, #24
1000c656:	461a      	mov	r2, r3
1000c658:	4935      	ldr	r1, [pc, #212]	; (1000c730 <OPENAMP_shmem_init+0x120>)
1000c65a:	4836      	ldr	r0, [pc, #216]	; (1000c734 <OPENAMP_shmem_init+0x124>)
1000c65c:	f7fe f8b8 	bl	1000a7d0 <metal_device_open>
1000c660:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
1000c662:	69fb      	ldr	r3, [r7, #28]
1000c664:	2b00      	cmp	r3, #0
1000c666:	d001      	beq.n	1000c66c <OPENAMP_shmem_init+0x5c>
    return status;
1000c668:	69fb      	ldr	r3, [r7, #28]
1000c66a:	e059      	b.n	1000c720 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
1000c66c:	4a32      	ldr	r2, [pc, #200]	; (1000c738 <OPENAMP_shmem_init+0x128>)
1000c66e:	4b33      	ldr	r3, [pc, #204]	; (1000c73c <OPENAMP_shmem_init+0x12c>)
1000c670:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
1000c672:	69bb      	ldr	r3, [r7, #24]
1000c674:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, (unsigned int)-1, 0, NULL);
1000c678:	4a31      	ldr	r2, [pc, #196]	; (1000c740 <OPENAMP_shmem_init+0x130>)
1000c67a:	4b2f      	ldr	r3, [pc, #188]	; (1000c738 <OPENAMP_shmem_init+0x128>)
1000c67c:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
1000c67e:	461a      	mov	r2, r3
1000c680:	2300      	movs	r3, #0
1000c682:	9302      	str	r3, [sp, #8]
1000c684:	2300      	movs	r3, #0
1000c686:	9301      	str	r3, [sp, #4]
1000c688:	f04f 33ff 	mov.w	r3, #4294967295
1000c68c:	9300      	str	r3, [sp, #0]
1000c68e:	4613      	mov	r3, r2
1000c690:	4a2a      	ldr	r2, [pc, #168]	; (1000c73c <OPENAMP_shmem_init+0x12c>)
1000c692:	4929      	ldr	r1, [pc, #164]	; (1000c738 <OPENAMP_shmem_init+0x128>)
1000c694:	f7fe fa7e 	bl	1000ab94 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
1000c698:	69bb      	ldr	r3, [r7, #24]
1000c69a:	2100      	movs	r1, #0
1000c69c:	4618      	mov	r0, r3
1000c69e:	f7ff ff9b 	bl	1000c5d8 <metal_device_io_region>
1000c6a2:	4603      	mov	r3, r0
1000c6a4:	4a27      	ldr	r2, [pc, #156]	; (1000c744 <OPENAMP_shmem_init+0x134>)
1000c6a6:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
1000c6a8:	4b26      	ldr	r3, [pc, #152]	; (1000c744 <OPENAMP_shmem_init+0x134>)
1000c6aa:	681b      	ldr	r3, [r3, #0]
1000c6ac:	2b00      	cmp	r3, #0
1000c6ae:	d102      	bne.n	1000c6b6 <OPENAMP_shmem_init+0xa6>
    return -1;
1000c6b0:	f04f 33ff 	mov.w	r3, #4294967295
1000c6b4:	e034      	b.n	1000c720 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
1000c6b6:	f107 0208 	add.w	r2, r7, #8
1000c6ba:	f107 030c 	add.w	r3, r7, #12
1000c6be:	4619      	mov	r1, r3
1000c6c0:	6878      	ldr	r0, [r7, #4]
1000c6c2:	f000 f8d9 	bl	1000c878 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
1000c6c6:	68fb      	ldr	r3, [r7, #12]
1000c6c8:	4a1f      	ldr	r2, [pc, #124]	; (1000c748 <OPENAMP_shmem_init+0x138>)
1000c6ca:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
1000c6cc:	4b1e      	ldr	r3, [pc, #120]	; (1000c748 <OPENAMP_shmem_init+0x138>)
1000c6ce:	681b      	ldr	r3, [r3, #0]
1000c6d0:	2b00      	cmp	r3, #0
1000c6d2:	d102      	bne.n	1000c6da <OPENAMP_shmem_init+0xca>
  {
    return -1;
1000c6d4:	f04f 33ff 	mov.w	r3, #4294967295
1000c6d8:	e022      	b.n	1000c720 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
1000c6da:	69bb      	ldr	r3, [r7, #24]
1000c6dc:	f103 0044 	add.w	r0, r3, #68	; 0x44
1000c6e0:	4b19      	ldr	r3, [pc, #100]	; (1000c748 <OPENAMP_shmem_init+0x138>)
1000c6e2:	6819      	ldr	r1, [r3, #0]
1000c6e4:	4b18      	ldr	r3, [pc, #96]	; (1000c748 <OPENAMP_shmem_init+0x138>)
1000c6e6:	681a      	ldr	r2, [r3, #0]
1000c6e8:	68bb      	ldr	r3, [r7, #8]
1000c6ea:	461c      	mov	r4, r3
1000c6ec:	2300      	movs	r3, #0
1000c6ee:	9302      	str	r3, [sp, #8]
1000c6f0:	2300      	movs	r3, #0
1000c6f2:	9301      	str	r3, [sp, #4]
1000c6f4:	f04f 33ff 	mov.w	r3, #4294967295
1000c6f8:	9300      	str	r3, [sp, #0]
1000c6fa:	4623      	mov	r3, r4
1000c6fc:	f7fe fa4a 	bl	1000ab94 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
1000c700:	69bb      	ldr	r3, [r7, #24]
1000c702:	2101      	movs	r1, #1
1000c704:	4618      	mov	r0, r3
1000c706:	f7ff ff67 	bl	1000c5d8 <metal_device_io_region>
1000c70a:	4603      	mov	r3, r0
1000c70c:	4a0f      	ldr	r2, [pc, #60]	; (1000c74c <OPENAMP_shmem_init+0x13c>)
1000c70e:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
1000c710:	4b0e      	ldr	r3, [pc, #56]	; (1000c74c <OPENAMP_shmem_init+0x13c>)
1000c712:	681b      	ldr	r3, [r3, #0]
1000c714:	2b00      	cmp	r3, #0
1000c716:	d102      	bne.n	1000c71e <OPENAMP_shmem_init+0x10e>
    return -1;
1000c718:	f04f 33ff 	mov.w	r3, #4294967295
1000c71c:	e000      	b.n	1000c720 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
1000c71e:	2300      	movs	r3, #0
}
1000c720:	4618      	mov	r0, r3
1000c722:	3724      	adds	r7, #36	; 0x24
1000c724:	46bd      	mov	sp, r7
1000c726:	bd90      	pop	{r4, r7, pc}
1000c728:	10012648 	.word	0x10012648
1000c72c:	10020040 	.word	0x10020040
1000c730:	10012634 	.word	0x10012634
1000c734:	10012640 	.word	0x10012640
1000c738:	10040000 	.word	0x10040000
1000c73c:	10029bc8 	.word	0x10029bc8
1000c740:	10050000 	.word	0x10050000
1000c744:	10029b24 	.word	0x10029b24
1000c748:	10029b2c 	.word	0x10029b2c
1000c74c:	10029b28 	.word	0x10029b28

1000c750 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
1000c750:	b590      	push	{r4, r7, lr}
1000c752:	b08b      	sub	sp, #44	; 0x2c
1000c754:	af04      	add	r7, sp, #16
1000c756:	6078      	str	r0, [r7, #4]
1000c758:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
1000c75a:	2300      	movs	r3, #0
1000c75c:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
1000c75e:	2300      	movs	r3, #0
1000c760:	613b      	str	r3, [r7, #16]
  int status = 0;
1000c762:	2300      	movs	r3, #0
1000c764:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
1000c766:	f7ff feb5 	bl	1000c4d4 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
1000c76a:	6878      	ldr	r0, [r7, #4]
1000c76c:	f7ff ff50 	bl	1000c610 <OPENAMP_shmem_init>
1000c770:	60f8      	str	r0, [r7, #12]
  if(status)
1000c772:	68fb      	ldr	r3, [r7, #12]
1000c774:	2b00      	cmp	r3, #0
1000c776:	d001      	beq.n	1000c77c <MX_OPENAMP_Init+0x2c>
  {
    return status;
1000c778:	68fb      	ldr	r3, [r7, #12]
1000c77a:	e068      	b.n	1000c84e <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
1000c77c:	6878      	ldr	r0, [r7, #4]
1000c77e:	4b36      	ldr	r3, [pc, #216]	; (1000c858 <MX_OPENAMP_Init+0x108>)
1000c780:	681b      	ldr	r3, [r3, #0]
1000c782:	f103 0218 	add.w	r2, r3, #24
1000c786:	4b35      	ldr	r3, [pc, #212]	; (1000c85c <MX_OPENAMP_Init+0x10c>)
1000c788:	681b      	ldr	r3, [r3, #0]
1000c78a:	2100      	movs	r1, #0
1000c78c:	9102      	str	r1, [sp, #8]
1000c78e:	4934      	ldr	r1, [pc, #208]	; (1000c860 <MX_OPENAMP_Init+0x110>)
1000c790:	9101      	str	r1, [sp, #4]
1000c792:	2100      	movs	r1, #0
1000c794:	9100      	str	r1, [sp, #0]
1000c796:	21ff      	movs	r1, #255	; 0xff
1000c798:	f7fe fcfa 	bl	1000b190 <rproc_virtio_create_vdev>
1000c79c:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
1000c79e:	693b      	ldr	r3, [r7, #16]
1000c7a0:	2b00      	cmp	r3, #0
1000c7a2:	d102      	bne.n	1000c7aa <MX_OPENAMP_Init+0x5a>
  {
    return -1;
1000c7a4:	f04f 33ff 	mov.w	r3, #4294967295
1000c7a8:	e051      	b.n	1000c84e <MX_OPENAMP_Init+0xfe>
  }

  rproc_virtio_wait_remote_ready(vdev);
1000c7aa:	6938      	ldr	r0, [r7, #16]
1000c7ac:	f7fe fdcf 	bl	1000b34e <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
1000c7b0:	4b29      	ldr	r3, [pc, #164]	; (1000c858 <MX_OPENAMP_Init+0x108>)
1000c7b2:	681b      	ldr	r3, [r3, #0]
1000c7b4:	3334      	adds	r3, #52	; 0x34
1000c7b6:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
1000c7b8:	697b      	ldr	r3, [r7, #20]
1000c7ba:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
1000c7bc:	697b      	ldr	r3, [r7, #20]
1000c7be:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
1000c7c0:	461c      	mov	r4, r3
1000c7c2:	4b28      	ldr	r3, [pc, #160]	; (1000c864 <MX_OPENAMP_Init+0x114>)
1000c7c4:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
1000c7c6:	697a      	ldr	r2, [r7, #20]
1000c7c8:	6892      	ldr	r2, [r2, #8]
1000c7ca:	6979      	ldr	r1, [r7, #20]
1000c7cc:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
1000c7ce:	9102      	str	r1, [sp, #8]
1000c7d0:	9201      	str	r2, [sp, #4]
1000c7d2:	9300      	str	r3, [sp, #0]
1000c7d4:	4623      	mov	r3, r4
1000c7d6:	4602      	mov	r2, r0
1000c7d8:	2100      	movs	r1, #0
1000c7da:	6938      	ldr	r0, [r7, #16]
1000c7dc:	f7fe fd86 	bl	1000b2ec <rproc_virtio_init_vring>
1000c7e0:	60f8      	str	r0, [r7, #12]
  if (status != 0)
1000c7e2:	68fb      	ldr	r3, [r7, #12]
1000c7e4:	2b00      	cmp	r3, #0
1000c7e6:	d001      	beq.n	1000c7ec <MX_OPENAMP_Init+0x9c>
  {
    return status;
1000c7e8:	68fb      	ldr	r3, [r7, #12]
1000c7ea:	e030      	b.n	1000c84e <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
1000c7ec:	4b1a      	ldr	r3, [pc, #104]	; (1000c858 <MX_OPENAMP_Init+0x108>)
1000c7ee:	681b      	ldr	r3, [r3, #0]
1000c7f0:	3348      	adds	r3, #72	; 0x48
1000c7f2:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
1000c7f4:	697b      	ldr	r3, [r7, #20]
1000c7f6:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
1000c7f8:	697b      	ldr	r3, [r7, #20]
1000c7fa:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
1000c7fc:	461c      	mov	r4, r3
1000c7fe:	4b19      	ldr	r3, [pc, #100]	; (1000c864 <MX_OPENAMP_Init+0x114>)
1000c800:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
1000c802:	697a      	ldr	r2, [r7, #20]
1000c804:	6892      	ldr	r2, [r2, #8]
1000c806:	6979      	ldr	r1, [r7, #20]
1000c808:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
1000c80a:	9102      	str	r1, [sp, #8]
1000c80c:	9201      	str	r2, [sp, #4]
1000c80e:	9300      	str	r3, [sp, #0]
1000c810:	4623      	mov	r3, r4
1000c812:	4602      	mov	r2, r0
1000c814:	2101      	movs	r1, #1
1000c816:	6938      	ldr	r0, [r7, #16]
1000c818:	f7fe fd68 	bl	1000b2ec <rproc_virtio_init_vring>
1000c81c:	60f8      	str	r0, [r7, #12]
  if (status != 0)
1000c81e:	68fb      	ldr	r3, [r7, #12]
1000c820:	2b00      	cmp	r3, #0
1000c822:	d001      	beq.n	1000c828 <MX_OPENAMP_Init+0xd8>
  {
    return status;
1000c824:	68fb      	ldr	r3, [r7, #12]
1000c826:	e012      	b.n	1000c84e <MX_OPENAMP_Init+0xfe>
  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
                             (size_t)SHM_SIZE);
1000c828:	4a0f      	ldr	r2, [pc, #60]	; (1000c868 <MX_OPENAMP_Init+0x118>)
1000c82a:	4b10      	ldr	r3, [pc, #64]	; (1000c86c <MX_OPENAMP_Init+0x11c>)
1000c82c:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
1000c82e:	461a      	mov	r2, r3
1000c830:	f04f 31ff 	mov.w	r1, #4294967295
1000c834:	480e      	ldr	r0, [pc, #56]	; (1000c870 <MX_OPENAMP_Init+0x120>)
1000c836:	f7fe ff86 	bl	1000b746 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
1000c83a:	4b0a      	ldr	r3, [pc, #40]	; (1000c864 <MX_OPENAMP_Init+0x114>)
1000c83c:	681b      	ldr	r3, [r3, #0]
1000c83e:	4a0c      	ldr	r2, [pc, #48]	; (1000c870 <MX_OPENAMP_Init+0x120>)
1000c840:	9200      	str	r2, [sp, #0]
1000c842:	683a      	ldr	r2, [r7, #0]
1000c844:	6939      	ldr	r1, [r7, #16]
1000c846:	480b      	ldr	r0, [pc, #44]	; (1000c874 <MX_OPENAMP_Init+0x124>)
1000c848:	f7ff fa7a 	bl	1000bd40 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
1000c84c:	2300      	movs	r3, #0
}
1000c84e:	4618      	mov	r0, r3
1000c850:	371c      	adds	r7, #28
1000c852:	46bd      	mov	sp, r7
1000c854:	bd90      	pop	{r4, r7, pc}
1000c856:	bf00      	nop
1000c858:	10029b2c 	.word	0x10029b2c
1000c85c:	10029b28 	.word	0x10029b28
1000c860:	1000c51d 	.word	0x1000c51d
1000c864:	10029b24 	.word	0x10029b24
1000c868:	10050000 	.word	0x10050000
1000c86c:	10040000 	.word	0x10040000
1000c870:	10029b30 	.word	0x10029b30
1000c874:	10029b3c 	.word	0x10029b3c

1000c878 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
1000c878:	b480      	push	{r7}
1000c87a:	b085      	sub	sp, #20
1000c87c:	af00      	add	r7, sp, #0
1000c87e:	60f8      	str	r0, [r7, #12]
1000c880:	60b9      	str	r1, [r7, #8]
1000c882:	607a      	str	r2, [r7, #4]
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
1000c884:	687b      	ldr	r3, [r7, #4]
1000c886:	228c      	movs	r2, #140	; 0x8c
1000c888:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
1000c88a:	68bb      	ldr	r3, [r7, #8]
1000c88c:	4a03      	ldr	r2, [pc, #12]	; (1000c89c <resource_table_init+0x24>)
1000c88e:	601a      	str	r2, [r3, #0]
}
1000c890:	bf00      	nop
1000c892:	3714      	adds	r7, #20
1000c894:	46bd      	mov	sp, r7
1000c896:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c89a:	4770      	bx	lr
1000c89c:	10020d40 	.word	0x10020d40

1000c8a0 <emotion_model_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool emotion_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
1000c8a0:	b580      	push	{r7, lr}
1000c8a2:	b082      	sub	sp, #8
1000c8a4:	af00      	add	r7, sp, #0
1000c8a6:	6078      	str	r0, [r7, #4]
1000c8a8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_emotion_model_activations_map, 1, params)) {
1000c8aa:	683a      	ldr	r2, [r7, #0]
1000c8ac:	2101      	movs	r1, #1
1000c8ae:	483a      	ldr	r0, [pc, #232]	; (1000c998 <emotion_model_configure_activations+0xf8>)
1000c8b0:	f000 fb32 	bl	1000cf18 <ai_platform_get_activations_map>
1000c8b4:	4603      	mov	r3, r0
1000c8b6:	2b00      	cmp	r3, #0
1000c8b8:	d063      	beq.n	1000c982 <emotion_model_configure_activations+0xe2>
    /* Updating activations (byte) offsets */
    
    serving_default_conv1d_1_input0_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000c8ba:	4b37      	ldr	r3, [pc, #220]	; (1000c998 <emotion_model_configure_activations+0xf8>)
1000c8bc:	681b      	ldr	r3, [r3, #0]
1000c8be:	4a37      	ldr	r2, [pc, #220]	; (1000c99c <emotion_model_configure_activations+0xfc>)
1000c8c0:	6093      	str	r3, [r2, #8]
    serving_default_conv1d_1_input0_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000c8c2:	4b35      	ldr	r3, [pc, #212]	; (1000c998 <emotion_model_configure_activations+0xf8>)
1000c8c4:	681b      	ldr	r3, [r3, #0]
1000c8c6:	4a35      	ldr	r2, [pc, #212]	; (1000c99c <emotion_model_configure_activations+0xfc>)
1000c8c8:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 2000);
1000c8ca:	4b33      	ldr	r3, [pc, #204]	; (1000c998 <emotion_model_configure_activations+0xf8>)
1000c8cc:	681b      	ldr	r3, [r3, #0]
1000c8ce:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
1000c8d2:	4a33      	ldr	r2, [pc, #204]	; (1000c9a0 <emotion_model_configure_activations+0x100>)
1000c8d4:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 2000);
1000c8d6:	4b30      	ldr	r3, [pc, #192]	; (1000c998 <emotion_model_configure_activations+0xf8>)
1000c8d8:	681b      	ldr	r3, [r3, #0]
1000c8da:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
1000c8de:	4a30      	ldr	r2, [pc, #192]	; (1000c9a0 <emotion_model_configure_activations+0x100>)
1000c8e0:	60d3      	str	r3, [r2, #12]
    
    nl_1_nl_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 2000);
1000c8e2:	4b2d      	ldr	r3, [pc, #180]	; (1000c998 <emotion_model_configure_activations+0xf8>)
1000c8e4:	681b      	ldr	r3, [r3, #0]
1000c8e6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
1000c8ea:	4a2e      	ldr	r2, [pc, #184]	; (1000c9a4 <emotion_model_configure_activations+0x104>)
1000c8ec:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 2000);
1000c8ee:	4b2a      	ldr	r3, [pc, #168]	; (1000c998 <emotion_model_configure_activations+0xf8>)
1000c8f0:	681b      	ldr	r3, [r3, #0]
1000c8f2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
1000c8f6:	4a2b      	ldr	r2, [pc, #172]	; (1000c9a4 <emotion_model_configure_activations+0x104>)
1000c8f8:	60d3      	str	r3, [r2, #12]
    
    pool_4_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 2000);
1000c8fa:	4b27      	ldr	r3, [pc, #156]	; (1000c998 <emotion_model_configure_activations+0xf8>)
1000c8fc:	681b      	ldr	r3, [r3, #0]
1000c8fe:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
1000c902:	4a29      	ldr	r2, [pc, #164]	; (1000c9a8 <emotion_model_configure_activations+0x108>)
1000c904:	6093      	str	r3, [r2, #8]
    pool_4_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 2000);
1000c906:	4b24      	ldr	r3, [pc, #144]	; (1000c998 <emotion_model_configure_activations+0xf8>)
1000c908:	681b      	ldr	r3, [r3, #0]
1000c90a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
1000c90e:	4a26      	ldr	r2, [pc, #152]	; (1000c9a8 <emotion_model_configure_activations+0x108>)
1000c910:	60d3      	str	r3, [r2, #12]
    
    gemm_6_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000c912:	4b21      	ldr	r3, [pc, #132]	; (1000c998 <emotion_model_configure_activations+0xf8>)
1000c914:	681b      	ldr	r3, [r3, #0]
1000c916:	4a25      	ldr	r2, [pc, #148]	; (1000c9ac <emotion_model_configure_activations+0x10c>)
1000c918:	6093      	str	r3, [r2, #8]
    gemm_6_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000c91a:	4b1f      	ldr	r3, [pc, #124]	; (1000c998 <emotion_model_configure_activations+0xf8>)
1000c91c:	681b      	ldr	r3, [r3, #0]
1000c91e:	4a23      	ldr	r2, [pc, #140]	; (1000c9ac <emotion_model_configure_activations+0x10c>)
1000c920:	60d3      	str	r3, [r2, #12]
    
    nl_7_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 32);
1000c922:	4b1d      	ldr	r3, [pc, #116]	; (1000c998 <emotion_model_configure_activations+0xf8>)
1000c924:	681b      	ldr	r3, [r3, #0]
1000c926:	3320      	adds	r3, #32
1000c928:	4a21      	ldr	r2, [pc, #132]	; (1000c9b0 <emotion_model_configure_activations+0x110>)
1000c92a:	6093      	str	r3, [r2, #8]
    nl_7_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 32);
1000c92c:	4b1a      	ldr	r3, [pc, #104]	; (1000c998 <emotion_model_configure_activations+0xf8>)
1000c92e:	681b      	ldr	r3, [r3, #0]
1000c930:	3320      	adds	r3, #32
1000c932:	4a1f      	ldr	r2, [pc, #124]	; (1000c9b0 <emotion_model_configure_activations+0x110>)
1000c934:	60d3      	str	r3, [r2, #12]
    
    gemm_8_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000c936:	4b18      	ldr	r3, [pc, #96]	; (1000c998 <emotion_model_configure_activations+0xf8>)
1000c938:	681b      	ldr	r3, [r3, #0]
1000c93a:	4a1e      	ldr	r2, [pc, #120]	; (1000c9b4 <emotion_model_configure_activations+0x114>)
1000c93c:	6093      	str	r3, [r2, #8]
    gemm_8_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000c93e:	4b16      	ldr	r3, [pc, #88]	; (1000c998 <emotion_model_configure_activations+0xf8>)
1000c940:	681b      	ldr	r3, [r3, #0]
1000c942:	4a1c      	ldr	r2, [pc, #112]	; (1000c9b4 <emotion_model_configure_activations+0x114>)
1000c944:	60d3      	str	r3, [r2, #12]
    
    nl_9_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 16);
1000c946:	4b14      	ldr	r3, [pc, #80]	; (1000c998 <emotion_model_configure_activations+0xf8>)
1000c948:	681b      	ldr	r3, [r3, #0]
1000c94a:	3310      	adds	r3, #16
1000c94c:	4a1a      	ldr	r2, [pc, #104]	; (1000c9b8 <emotion_model_configure_activations+0x118>)
1000c94e:	6093      	str	r3, [r2, #8]
    nl_9_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 16);
1000c950:	4b11      	ldr	r3, [pc, #68]	; (1000c998 <emotion_model_configure_activations+0xf8>)
1000c952:	681b      	ldr	r3, [r3, #0]
1000c954:	3310      	adds	r3, #16
1000c956:	4a18      	ldr	r2, [pc, #96]	; (1000c9b8 <emotion_model_configure_activations+0x118>)
1000c958:	60d3      	str	r3, [r2, #12]
    
    gemm_10_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000c95a:	4b0f      	ldr	r3, [pc, #60]	; (1000c998 <emotion_model_configure_activations+0xf8>)
1000c95c:	681b      	ldr	r3, [r3, #0]
1000c95e:	4a17      	ldr	r2, [pc, #92]	; (1000c9bc <emotion_model_configure_activations+0x11c>)
1000c960:	6093      	str	r3, [r2, #8]
    gemm_10_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 0);
1000c962:	4b0d      	ldr	r3, [pc, #52]	; (1000c998 <emotion_model_configure_activations+0xf8>)
1000c964:	681b      	ldr	r3, [r3, #0]
1000c966:	4a15      	ldr	r2, [pc, #84]	; (1000c9bc <emotion_model_configure_activations+0x11c>)
1000c968:	60d3      	str	r3, [r2, #12]
    
    nl_11_output_array.data = AI_PTR(g_emotion_model_activations_map[0] + 8);
1000c96a:	4b0b      	ldr	r3, [pc, #44]	; (1000c998 <emotion_model_configure_activations+0xf8>)
1000c96c:	681b      	ldr	r3, [r3, #0]
1000c96e:	3308      	adds	r3, #8
1000c970:	4a13      	ldr	r2, [pc, #76]	; (1000c9c0 <emotion_model_configure_activations+0x120>)
1000c972:	6093      	str	r3, [r2, #8]
    nl_11_output_array.data_start = AI_PTR(g_emotion_model_activations_map[0] + 8);
1000c974:	4b08      	ldr	r3, [pc, #32]	; (1000c998 <emotion_model_configure_activations+0xf8>)
1000c976:	681b      	ldr	r3, [r3, #0]
1000c978:	3308      	adds	r3, #8
1000c97a:	4a11      	ldr	r2, [pc, #68]	; (1000c9c0 <emotion_model_configure_activations+0x120>)
1000c97c:	60d3      	str	r3, [r2, #12]
    
    return true;
1000c97e:	2301      	movs	r3, #1
1000c980:	e005      	b.n	1000c98e <emotion_model_configure_activations+0xee>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
1000c982:	2213      	movs	r2, #19
1000c984:	2130      	movs	r1, #48	; 0x30
1000c986:	6878      	ldr	r0, [r7, #4]
1000c988:	f000 fb76 	bl	1000d078 <ai_platform_network_set_error>
  return false;
1000c98c:	2300      	movs	r3, #0
}
1000c98e:	4618      	mov	r0, r3
1000c990:	3708      	adds	r7, #8
1000c992:	46bd      	mov	sp, r7
1000c994:	bd80      	pop	{r7, pc}
1000c996:	bf00      	nop
1000c998:	10029bcc 	.word	0x10029bcc
1000c99c:	100200ec 	.word	0x100200ec
1000c9a0:	1002010c 	.word	0x1002010c
1000c9a4:	1002011c 	.word	0x1002011c
1000c9a8:	1002013c 	.word	0x1002013c
1000c9ac:	1002015c 	.word	0x1002015c
1000c9b0:	1002016c 	.word	0x1002016c
1000c9b4:	1002018c 	.word	0x1002018c
1000c9b8:	1002019c 	.word	0x1002019c
1000c9bc:	100201ac 	.word	0x100201ac
1000c9c0:	100201bc 	.word	0x100201bc

1000c9c4 <emotion_model_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool emotion_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
1000c9c4:	b580      	push	{r7, lr}
1000c9c6:	b082      	sub	sp, #8
1000c9c8:	af00      	add	r7, sp, #0
1000c9ca:	6078      	str	r0, [r7, #4]
1000c9cc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_emotion_model_weights_map, 1, params)) {
1000c9ce:	683a      	ldr	r2, [r7, #0]
1000c9d0:	2101      	movs	r1, #1
1000c9d2:	4856      	ldr	r0, [pc, #344]	; (1000cb2c <emotion_model_configure_weights+0x168>)
1000c9d4:	f000 fa4c 	bl	1000ce70 <ai_platform_get_weights_map>
1000c9d8:	4603      	mov	r3, r0
1000c9da:	2b00      	cmp	r3, #0
1000c9dc:	f000 809b 	beq.w	1000cb16 <emotion_model_configure_weights+0x152>
    /* Updating weights (byte) offsets */
    
    gemm_6_weights_array.format |= AI_FMT_FLAG_CONST;
1000c9e0:	4b53      	ldr	r3, [pc, #332]	; (1000cb30 <emotion_model_configure_weights+0x16c>)
1000c9e2:	681b      	ldr	r3, [r3, #0]
1000c9e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000c9e8:	4a51      	ldr	r2, [pc, #324]	; (1000cb30 <emotion_model_configure_weights+0x16c>)
1000c9ea:	6013      	str	r3, [r2, #0]
    gemm_6_weights_array.data = AI_PTR(g_emotion_model_weights_map[0] + 64);
1000c9ec:	4b4f      	ldr	r3, [pc, #316]	; (1000cb2c <emotion_model_configure_weights+0x168>)
1000c9ee:	681b      	ldr	r3, [r3, #0]
1000c9f0:	3340      	adds	r3, #64	; 0x40
1000c9f2:	4a4f      	ldr	r2, [pc, #316]	; (1000cb30 <emotion_model_configure_weights+0x16c>)
1000c9f4:	6093      	str	r3, [r2, #8]
    gemm_6_weights_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 0);
1000c9f6:	4b4d      	ldr	r3, [pc, #308]	; (1000cb2c <emotion_model_configure_weights+0x168>)
1000c9f8:	681b      	ldr	r3, [r3, #0]
1000c9fa:	4a4d      	ldr	r2, [pc, #308]	; (1000cb30 <emotion_model_configure_weights+0x16c>)
1000c9fc:	60d3      	str	r3, [r2, #12]
    
    gemm_6_bias_array.format |= AI_FMT_FLAG_CONST;
1000c9fe:	4b4d      	ldr	r3, [pc, #308]	; (1000cb34 <emotion_model_configure_weights+0x170>)
1000ca00:	681b      	ldr	r3, [r3, #0]
1000ca02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000ca06:	4a4b      	ldr	r2, [pc, #300]	; (1000cb34 <emotion_model_configure_weights+0x170>)
1000ca08:	6013      	str	r3, [r2, #0]
    gemm_6_bias_array.data = AI_PTR(g_emotion_model_weights_map[0] + 15936);
1000ca0a:	4b48      	ldr	r3, [pc, #288]	; (1000cb2c <emotion_model_configure_weights+0x168>)
1000ca0c:	681b      	ldr	r3, [r3, #0]
1000ca0e:	f503 5379 	add.w	r3, r3, #15936	; 0x3e40
1000ca12:	4a48      	ldr	r2, [pc, #288]	; (1000cb34 <emotion_model_configure_weights+0x170>)
1000ca14:	6093      	str	r3, [r2, #8]
    gemm_6_bias_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 15936);
1000ca16:	4b45      	ldr	r3, [pc, #276]	; (1000cb2c <emotion_model_configure_weights+0x168>)
1000ca18:	681b      	ldr	r3, [r3, #0]
1000ca1a:	f503 5379 	add.w	r3, r3, #15936	; 0x3e40
1000ca1e:	4a45      	ldr	r2, [pc, #276]	; (1000cb34 <emotion_model_configure_weights+0x170>)
1000ca20:	60d3      	str	r3, [r2, #12]
    
    gemm_8_weights_array.format |= AI_FMT_FLAG_CONST;
1000ca22:	4b45      	ldr	r3, [pc, #276]	; (1000cb38 <emotion_model_configure_weights+0x174>)
1000ca24:	681b      	ldr	r3, [r3, #0]
1000ca26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000ca2a:	4a43      	ldr	r2, [pc, #268]	; (1000cb38 <emotion_model_configure_weights+0x174>)
1000ca2c:	6013      	str	r3, [r2, #0]
    gemm_8_weights_array.data = AI_PTR(g_emotion_model_weights_map[0] + 15968);
1000ca2e:	4b3f      	ldr	r3, [pc, #252]	; (1000cb2c <emotion_model_configure_weights+0x168>)
1000ca30:	681b      	ldr	r3, [r3, #0]
1000ca32:	f503 5379 	add.w	r3, r3, #15936	; 0x3e40
1000ca36:	3320      	adds	r3, #32
1000ca38:	4a3f      	ldr	r2, [pc, #252]	; (1000cb38 <emotion_model_configure_weights+0x174>)
1000ca3a:	6093      	str	r3, [r2, #8]
    gemm_8_weights_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 15968);
1000ca3c:	4b3b      	ldr	r3, [pc, #236]	; (1000cb2c <emotion_model_configure_weights+0x168>)
1000ca3e:	681b      	ldr	r3, [r3, #0]
1000ca40:	f503 5379 	add.w	r3, r3, #15936	; 0x3e40
1000ca44:	3320      	adds	r3, #32
1000ca46:	4a3c      	ldr	r2, [pc, #240]	; (1000cb38 <emotion_model_configure_weights+0x174>)
1000ca48:	60d3      	str	r3, [r2, #12]
    
    gemm_8_bias_array.format |= AI_FMT_FLAG_CONST;
1000ca4a:	4b3c      	ldr	r3, [pc, #240]	; (1000cb3c <emotion_model_configure_weights+0x178>)
1000ca4c:	681b      	ldr	r3, [r3, #0]
1000ca4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000ca52:	4a3a      	ldr	r2, [pc, #232]	; (1000cb3c <emotion_model_configure_weights+0x178>)
1000ca54:	6013      	str	r3, [r2, #0]
    gemm_8_bias_array.data = AI_PTR(g_emotion_model_weights_map[0] + 16096);
1000ca56:	4b35      	ldr	r3, [pc, #212]	; (1000cb2c <emotion_model_configure_weights+0x168>)
1000ca58:	681b      	ldr	r3, [r3, #0]
1000ca5a:	f503 537b 	add.w	r3, r3, #16064	; 0x3ec0
1000ca5e:	3320      	adds	r3, #32
1000ca60:	4a36      	ldr	r2, [pc, #216]	; (1000cb3c <emotion_model_configure_weights+0x178>)
1000ca62:	6093      	str	r3, [r2, #8]
    gemm_8_bias_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 16096);
1000ca64:	4b31      	ldr	r3, [pc, #196]	; (1000cb2c <emotion_model_configure_weights+0x168>)
1000ca66:	681b      	ldr	r3, [r3, #0]
1000ca68:	f503 537b 	add.w	r3, r3, #16064	; 0x3ec0
1000ca6c:	3320      	adds	r3, #32
1000ca6e:	4a33      	ldr	r2, [pc, #204]	; (1000cb3c <emotion_model_configure_weights+0x178>)
1000ca70:	60d3      	str	r3, [r2, #12]
    
    gemm_10_weights_array.format |= AI_FMT_FLAG_CONST;
1000ca72:	4b33      	ldr	r3, [pc, #204]	; (1000cb40 <emotion_model_configure_weights+0x17c>)
1000ca74:	681b      	ldr	r3, [r3, #0]
1000ca76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000ca7a:	4a31      	ldr	r2, [pc, #196]	; (1000cb40 <emotion_model_configure_weights+0x17c>)
1000ca7c:	6013      	str	r3, [r2, #0]
    gemm_10_weights_array.data = AI_PTR(g_emotion_model_weights_map[0] + 16112);
1000ca7e:	4b2b      	ldr	r3, [pc, #172]	; (1000cb2c <emotion_model_configure_weights+0x168>)
1000ca80:	681b      	ldr	r3, [r3, #0]
1000ca82:	f503 537b 	add.w	r3, r3, #16064	; 0x3ec0
1000ca86:	3330      	adds	r3, #48	; 0x30
1000ca88:	4a2d      	ldr	r2, [pc, #180]	; (1000cb40 <emotion_model_configure_weights+0x17c>)
1000ca8a:	6093      	str	r3, [r2, #8]
    gemm_10_weights_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 16112);
1000ca8c:	4b27      	ldr	r3, [pc, #156]	; (1000cb2c <emotion_model_configure_weights+0x168>)
1000ca8e:	681b      	ldr	r3, [r3, #0]
1000ca90:	f503 537b 	add.w	r3, r3, #16064	; 0x3ec0
1000ca94:	3330      	adds	r3, #48	; 0x30
1000ca96:	4a2a      	ldr	r2, [pc, #168]	; (1000cb40 <emotion_model_configure_weights+0x17c>)
1000ca98:	60d3      	str	r3, [r2, #12]
    
    gemm_10_bias_array.format |= AI_FMT_FLAG_CONST;
1000ca9a:	4b2a      	ldr	r3, [pc, #168]	; (1000cb44 <emotion_model_configure_weights+0x180>)
1000ca9c:	681b      	ldr	r3, [r3, #0]
1000ca9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000caa2:	4a28      	ldr	r2, [pc, #160]	; (1000cb44 <emotion_model_configure_weights+0x180>)
1000caa4:	6013      	str	r3, [r2, #0]
    gemm_10_bias_array.data = AI_PTR(g_emotion_model_weights_map[0] + 16144);
1000caa6:	4b21      	ldr	r3, [pc, #132]	; (1000cb2c <emotion_model_configure_weights+0x168>)
1000caa8:	681b      	ldr	r3, [r3, #0]
1000caaa:	f503 537c 	add.w	r3, r3, #16128	; 0x3f00
1000caae:	3310      	adds	r3, #16
1000cab0:	4a24      	ldr	r2, [pc, #144]	; (1000cb44 <emotion_model_configure_weights+0x180>)
1000cab2:	6093      	str	r3, [r2, #8]
    gemm_10_bias_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 16144);
1000cab4:	4b1d      	ldr	r3, [pc, #116]	; (1000cb2c <emotion_model_configure_weights+0x168>)
1000cab6:	681b      	ldr	r3, [r3, #0]
1000cab8:	f503 537c 	add.w	r3, r3, #16128	; 0x3f00
1000cabc:	3310      	adds	r3, #16
1000cabe:	4a21      	ldr	r2, [pc, #132]	; (1000cb44 <emotion_model_configure_weights+0x180>)
1000cac0:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
1000cac2:	4b21      	ldr	r3, [pc, #132]	; (1000cb48 <emotion_model_configure_weights+0x184>)
1000cac4:	681b      	ldr	r3, [r3, #0]
1000cac6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000caca:	4a1f      	ldr	r2, [pc, #124]	; (1000cb48 <emotion_model_configure_weights+0x184>)
1000cacc:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_emotion_model_weights_map[0] + 16152);
1000cace:	4b17      	ldr	r3, [pc, #92]	; (1000cb2c <emotion_model_configure_weights+0x168>)
1000cad0:	681b      	ldr	r3, [r3, #0]
1000cad2:	f503 537c 	add.w	r3, r3, #16128	; 0x3f00
1000cad6:	3318      	adds	r3, #24
1000cad8:	4a1b      	ldr	r2, [pc, #108]	; (1000cb48 <emotion_model_configure_weights+0x184>)
1000cada:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 16152);
1000cadc:	4b13      	ldr	r3, [pc, #76]	; (1000cb2c <emotion_model_configure_weights+0x168>)
1000cade:	681b      	ldr	r3, [r3, #0]
1000cae0:	f503 537c 	add.w	r3, r3, #16128	; 0x3f00
1000cae4:	3318      	adds	r3, #24
1000cae6:	4a18      	ldr	r2, [pc, #96]	; (1000cb48 <emotion_model_configure_weights+0x184>)
1000cae8:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
1000caea:	4b18      	ldr	r3, [pc, #96]	; (1000cb4c <emotion_model_configure_weights+0x188>)
1000caec:	681b      	ldr	r3, [r3, #0]
1000caee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000caf2:	4a16      	ldr	r2, [pc, #88]	; (1000cb4c <emotion_model_configure_weights+0x188>)
1000caf4:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_emotion_model_weights_map[0] + 16472);
1000caf6:	4b0d      	ldr	r3, [pc, #52]	; (1000cb2c <emotion_model_configure_weights+0x168>)
1000caf8:	681b      	ldr	r3, [r3, #0]
1000cafa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
1000cafe:	3358      	adds	r3, #88	; 0x58
1000cb00:	4a12      	ldr	r2, [pc, #72]	; (1000cb4c <emotion_model_configure_weights+0x188>)
1000cb02:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_emotion_model_weights_map[0] + 16472);
1000cb04:	4b09      	ldr	r3, [pc, #36]	; (1000cb2c <emotion_model_configure_weights+0x168>)
1000cb06:	681b      	ldr	r3, [r3, #0]
1000cb08:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
1000cb0c:	3358      	adds	r3, #88	; 0x58
1000cb0e:	4a0f      	ldr	r2, [pc, #60]	; (1000cb4c <emotion_model_configure_weights+0x188>)
1000cb10:	60d3      	str	r3, [r2, #12]
    
    return true;
1000cb12:	2301      	movs	r3, #1
1000cb14:	e005      	b.n	1000cb22 <emotion_model_configure_weights+0x15e>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
1000cb16:	2212      	movs	r2, #18
1000cb18:	2130      	movs	r1, #48	; 0x30
1000cb1a:	6878      	ldr	r0, [r7, #4]
1000cb1c:	f000 faac 	bl	1000d078 <ai_platform_network_set_error>
  return false;
1000cb20:	2300      	movs	r3, #0
}
1000cb22:	4618      	mov	r0, r3
1000cb24:	3708      	adds	r7, #8
1000cb26:	46bd      	mov	sp, r7
1000cb28:	bd80      	pop	{r7, pc}
1000cb2a:	bf00      	nop
1000cb2c:	10029bd0 	.word	0x10029bd0
1000cb30:	100200cc 	.word	0x100200cc
1000cb34:	100200dc 	.word	0x100200dc
1000cb38:	100200fc 	.word	0x100200fc
1000cb3c:	1002012c 	.word	0x1002012c
1000cb40:	1002014c 	.word	0x1002014c
1000cb44:	1002017c 	.word	0x1002017c
1000cb48:	100201cc 	.word	0x100201cc
1000cb4c:	100201dc 	.word	0x100201dc

1000cb50 <ai_emotion_model_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_emotion_model_get_error(ai_handle network)
{
1000cb50:	b580      	push	{r7, lr}
1000cb52:	b082      	sub	sp, #8
1000cb54:	af00      	add	r7, sp, #0
1000cb56:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
1000cb58:	6878      	ldr	r0, [r7, #4]
1000cb5a:	f000 fa53 	bl	1000d004 <ai_platform_network_get_error>
1000cb5e:	4603      	mov	r3, r0
}
1000cb60:	4618      	mov	r0, r3
1000cb62:	3708      	adds	r7, #8
1000cb64:	46bd      	mov	sp, r7
1000cb66:	bd80      	pop	{r7, pc}

1000cb68 <ai_emotion_model_create>:

AI_API_ENTRY
ai_error ai_emotion_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
1000cb68:	b580      	push	{r7, lr}
1000cb6a:	b084      	sub	sp, #16
1000cb6c:	af02      	add	r7, sp, #8
1000cb6e:	6078      	str	r0, [r7, #4]
1000cb70:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
1000cb72:	2300      	movs	r3, #0
1000cb74:	9301      	str	r3, [sp, #4]
1000cb76:	2305      	movs	r3, #5
1000cb78:	9300      	str	r3, [sp, #0]
1000cb7a:	2301      	movs	r3, #1
1000cb7c:	4a04      	ldr	r2, [pc, #16]	; (1000cb90 <ai_emotion_model_create+0x28>)
1000cb7e:	6839      	ldr	r1, [r7, #0]
1000cb80:	6878      	ldr	r0, [r7, #4]
1000cb82:	f000 fbb3 	bl	1000d2ec <ai_platform_network_create>
1000cb86:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
1000cb88:	4618      	mov	r0, r3
1000cb8a:	3708      	adds	r7, #8
1000cb8c:	46bd      	mov	sp, r7
1000cb8e:	bd80      	pop	{r7, pc}
1000cb90:	10020ad4 	.word	0x10020ad4

1000cb94 <ai_emotion_model_create_and_init>:

AI_API_ENTRY
ai_error ai_emotion_model_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
1000cb94:	b580      	push	{r7, lr}
1000cb96:	b096      	sub	sp, #88	; 0x58
1000cb98:	af00      	add	r7, sp, #0
1000cb9a:	60f8      	str	r0, [r7, #12]
1000cb9c:	60b9      	str	r1, [r7, #8]
1000cb9e:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_emotion_model_create(network, AI_EMOTION_MODEL_DATA_CONFIG);
1000cba0:	2100      	movs	r1, #0
1000cba2:	68f8      	ldr	r0, [r7, #12]
1000cba4:	f7ff ffe0 	bl	1000cb68 <ai_emotion_model_create>
1000cba8:	4603      	mov	r3, r0
1000cbaa:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
1000cbac:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
1000cbb0:	2b00      	cmp	r3, #0
1000cbb2:	d001      	beq.n	1000cbb8 <ai_emotion_model_create_and_init+0x24>
        return err;
1000cbb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1000cbb6:	e05d      	b.n	1000cc74 <ai_emotion_model_create_and_init+0xe0>
    if (ai_emotion_model_data_params_get(&params) != true) {
1000cbb8:	f107 0314 	add.w	r3, r7, #20
1000cbbc:	4618      	mov	r0, r3
1000cbbe:	f000 f8dd 	bl	1000cd7c <ai_emotion_model_data_params_get>
1000cbc2:	4603      	mov	r3, r0
1000cbc4:	f083 0301 	eor.w	r3, r3, #1
1000cbc8:	b2db      	uxtb	r3, r3
1000cbca:	2b00      	cmp	r3, #0
1000cbcc:	d008      	beq.n	1000cbe0 <ai_emotion_model_create_and_init+0x4c>
        err = ai_emotion_model_get_error(*network);
1000cbce:	68fb      	ldr	r3, [r7, #12]
1000cbd0:	681b      	ldr	r3, [r3, #0]
1000cbd2:	4618      	mov	r0, r3
1000cbd4:	f7ff ffbc 	bl	1000cb50 <ai_emotion_model_get_error>
1000cbd8:	4603      	mov	r3, r0
1000cbda:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
1000cbdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1000cbde:	e049      	b.n	1000cc74 <ai_emotion_model_create_and_init+0xe0>
    }
#if defined(AI_EMOTION_MODEL_DATA_ACTIVATIONS_COUNT)
    if (activations) {
1000cbe0:	68bb      	ldr	r3, [r7, #8]
1000cbe2:	2b00      	cmp	r3, #0
1000cbe4:	d016      	beq.n	1000cc14 <ai_emotion_model_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
1000cbe6:	2300      	movs	r3, #0
1000cbe8:	657b      	str	r3, [r7, #84]	; 0x54
1000cbea:	e00e      	b.n	1000cc0a <ai_emotion_model_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
1000cbec:	6d79      	ldr	r1, [r7, #84]	; 0x54
1000cbee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1000cbf0:	009b      	lsls	r3, r3, #2
1000cbf2:	68ba      	ldr	r2, [r7, #8]
1000cbf4:	4413      	add	r3, r2
1000cbf6:	681a      	ldr	r2, [r3, #0]
1000cbf8:	f107 0314 	add.w	r3, r7, #20
1000cbfc:	330c      	adds	r3, #12
1000cbfe:	4618      	mov	r0, r3
1000cc00:	f000 f922 	bl	1000ce48 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
1000cc04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1000cc06:	3301      	adds	r3, #1
1000cc08:	657b      	str	r3, [r7, #84]	; 0x54
1000cc0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
1000cc0c:	461a      	mov	r2, r3
1000cc0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1000cc10:	4293      	cmp	r3, r2
1000cc12:	dbeb      	blt.n	1000cbec <ai_emotion_model_create_and_init+0x58>
    }
#endif
#if defined(AI_EMOTION_MODEL_DATA_WEIGHTS_COUNT)
    if (weights) {
1000cc14:	687b      	ldr	r3, [r7, #4]
1000cc16:	2b00      	cmp	r3, #0
1000cc18:	d016      	beq.n	1000cc48 <ai_emotion_model_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
1000cc1a:	2300      	movs	r3, #0
1000cc1c:	653b      	str	r3, [r7, #80]	; 0x50
1000cc1e:	e00e      	b.n	1000cc3e <ai_emotion_model_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
1000cc20:	6d39      	ldr	r1, [r7, #80]	; 0x50
1000cc22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1000cc24:	009b      	lsls	r3, r3, #2
1000cc26:	687a      	ldr	r2, [r7, #4]
1000cc28:	4413      	add	r3, r2
1000cc2a:	681a      	ldr	r2, [r3, #0]
1000cc2c:	f107 0314 	add.w	r3, r7, #20
1000cc30:	3304      	adds	r3, #4
1000cc32:	4618      	mov	r0, r3
1000cc34:	f000 f908 	bl	1000ce48 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
1000cc38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1000cc3a:	3301      	adds	r3, #1
1000cc3c:	653b      	str	r3, [r7, #80]	; 0x50
1000cc3e:	8b7b      	ldrh	r3, [r7, #26]
1000cc40:	461a      	mov	r2, r3
1000cc42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1000cc44:	4293      	cmp	r3, r2
1000cc46:	dbeb      	blt.n	1000cc20 <ai_emotion_model_create_and_init+0x8c>
    }
#endif
    if (ai_emotion_model_init(*network, &params) != true) {
1000cc48:	68fb      	ldr	r3, [r7, #12]
1000cc4a:	681b      	ldr	r3, [r3, #0]
1000cc4c:	f107 0214 	add.w	r2, r7, #20
1000cc50:	4611      	mov	r1, r2
1000cc52:	4618      	mov	r0, r3
1000cc54:	f000 f846 	bl	1000cce4 <ai_emotion_model_init>
1000cc58:	4603      	mov	r3, r0
1000cc5a:	f083 0301 	eor.w	r3, r3, #1
1000cc5e:	b2db      	uxtb	r3, r3
1000cc60:	2b00      	cmp	r3, #0
1000cc62:	d006      	beq.n	1000cc72 <ai_emotion_model_create_and_init+0xde>
        err = ai_emotion_model_get_error(*network);
1000cc64:	68fb      	ldr	r3, [r7, #12]
1000cc66:	681b      	ldr	r3, [r3, #0]
1000cc68:	4618      	mov	r0, r3
1000cc6a:	f7ff ff71 	bl	1000cb50 <ai_emotion_model_get_error>
1000cc6e:	4603      	mov	r3, r0
1000cc70:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
1000cc72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
1000cc74:	4618      	mov	r0, r3
1000cc76:	3758      	adds	r7, #88	; 0x58
1000cc78:	46bd      	mov	sp, r7
1000cc7a:	bd80      	pop	{r7, pc}

1000cc7c <ai_emotion_model_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_emotion_model_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
1000cc7c:	b580      	push	{r7, lr}
1000cc7e:	b082      	sub	sp, #8
1000cc80:	af00      	add	r7, sp, #0
1000cc82:	6078      	str	r0, [r7, #4]
1000cc84:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
1000cc86:	687b      	ldr	r3, [r7, #4]
1000cc88:	2b00      	cmp	r3, #0
1000cc8a:	d104      	bne.n	1000cc96 <ai_emotion_model_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
1000cc8c:	4b06      	ldr	r3, [pc, #24]	; (1000cca8 <ai_emotion_model_inputs_get+0x2c>)
1000cc8e:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
1000cc90:	687b      	ldr	r3, [r7, #4]
1000cc92:	4a06      	ldr	r2, [pc, #24]	; (1000ccac <ai_emotion_model_inputs_get+0x30>)
1000cc94:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
1000cc96:	6839      	ldr	r1, [r7, #0]
1000cc98:	6878      	ldr	r0, [r7, #4]
1000cc9a:	f000 f9f3 	bl	1000d084 <ai_platform_inputs_get>
1000cc9e:	4603      	mov	r3, r0
}
1000cca0:	4618      	mov	r0, r3
1000cca2:	3708      	adds	r7, #8
1000cca4:	46bd      	mov	sp, r7
1000cca6:	bd80      	pop	{r7, pc}
1000cca8:	10020ad4 	.word	0x10020ad4
1000ccac:	a1c00100 	.word	0xa1c00100

1000ccb0 <ai_emotion_model_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_emotion_model_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
1000ccb0:	b580      	push	{r7, lr}
1000ccb2:	b082      	sub	sp, #8
1000ccb4:	af00      	add	r7, sp, #0
1000ccb6:	6078      	str	r0, [r7, #4]
1000ccb8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
1000ccba:	687b      	ldr	r3, [r7, #4]
1000ccbc:	2b00      	cmp	r3, #0
1000ccbe:	d104      	bne.n	1000ccca <ai_emotion_model_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
1000ccc0:	4b06      	ldr	r3, [pc, #24]	; (1000ccdc <ai_emotion_model_outputs_get+0x2c>)
1000ccc2:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
1000ccc4:	687b      	ldr	r3, [r7, #4]
1000ccc6:	4a06      	ldr	r2, [pc, #24]	; (1000cce0 <ai_emotion_model_outputs_get+0x30>)
1000ccc8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
1000ccca:	6839      	ldr	r1, [r7, #0]
1000cccc:	6878      	ldr	r0, [r7, #4]
1000ccce:	f000 fa75 	bl	1000d1bc <ai_platform_outputs_get>
1000ccd2:	4603      	mov	r3, r0
}
1000ccd4:	4618      	mov	r0, r3
1000ccd6:	3708      	adds	r7, #8
1000ccd8:	46bd      	mov	sp, r7
1000ccda:	bd80      	pop	{r7, pc}
1000ccdc:	10020ad4 	.word	0x10020ad4
1000cce0:	a1c00100 	.word	0xa1c00100

1000cce4 <ai_emotion_model_init>:
}

AI_API_ENTRY
ai_bool ai_emotion_model_init(
  ai_handle network, const ai_network_params* params)
{
1000cce4:	b580      	push	{r7, lr}
1000cce6:	b084      	sub	sp, #16
1000cce8:	af00      	add	r7, sp, #0
1000ccea:	6078      	str	r0, [r7, #4]
1000ccec:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
1000ccee:	6839      	ldr	r1, [r7, #0]
1000ccf0:	6878      	ldr	r0, [r7, #4]
1000ccf2:	f000 fb83 	bl	1000d3fc <ai_platform_network_init>
1000ccf6:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
1000ccf8:	68fb      	ldr	r3, [r7, #12]
1000ccfa:	2b00      	cmp	r3, #0
1000ccfc:	d101      	bne.n	1000cd02 <ai_emotion_model_init+0x1e>
1000ccfe:	2300      	movs	r3, #0
1000cd00:	e028      	b.n	1000cd54 <ai_emotion_model_init+0x70>

  ai_bool ok = true;
1000cd02:	2301      	movs	r3, #1
1000cd04:	72fb      	strb	r3, [r7, #11]
  ok &= emotion_model_configure_weights(net_ctx, params);
1000cd06:	6839      	ldr	r1, [r7, #0]
1000cd08:	68f8      	ldr	r0, [r7, #12]
1000cd0a:	f7ff fe5b 	bl	1000c9c4 <emotion_model_configure_weights>
1000cd0e:	4603      	mov	r3, r0
1000cd10:	461a      	mov	r2, r3
1000cd12:	7afb      	ldrb	r3, [r7, #11]
1000cd14:	4013      	ands	r3, r2
1000cd16:	2b00      	cmp	r3, #0
1000cd18:	bf14      	ite	ne
1000cd1a:	2301      	movne	r3, #1
1000cd1c:	2300      	moveq	r3, #0
1000cd1e:	72fb      	strb	r3, [r7, #11]
  ok &= emotion_model_configure_activations(net_ctx, params);
1000cd20:	6839      	ldr	r1, [r7, #0]
1000cd22:	68f8      	ldr	r0, [r7, #12]
1000cd24:	f7ff fdbc 	bl	1000c8a0 <emotion_model_configure_activations>
1000cd28:	4603      	mov	r3, r0
1000cd2a:	461a      	mov	r2, r3
1000cd2c:	7afb      	ldrb	r3, [r7, #11]
1000cd2e:	4013      	ands	r3, r2
1000cd30:	2b00      	cmp	r3, #0
1000cd32:	bf14      	ite	ne
1000cd34:	2301      	movne	r3, #1
1000cd36:	2300      	moveq	r3, #0
1000cd38:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
1000cd3a:	6878      	ldr	r0, [r7, #4]
1000cd3c:	f000 fc12 	bl	1000d564 <ai_platform_network_post_init>
1000cd40:	4603      	mov	r3, r0
1000cd42:	461a      	mov	r2, r3
1000cd44:	7afb      	ldrb	r3, [r7, #11]
1000cd46:	4013      	ands	r3, r2
1000cd48:	2b00      	cmp	r3, #0
1000cd4a:	bf14      	ite	ne
1000cd4c:	2301      	movne	r3, #1
1000cd4e:	2300      	moveq	r3, #0
1000cd50:	72fb      	strb	r3, [r7, #11]

  return ok;
1000cd52:	7afb      	ldrb	r3, [r7, #11]
}
1000cd54:	4618      	mov	r0, r3
1000cd56:	3710      	adds	r7, #16
1000cd58:	46bd      	mov	sp, r7
1000cd5a:	bd80      	pop	{r7, pc}

1000cd5c <ai_emotion_model_run>:


AI_API_ENTRY
ai_i32 ai_emotion_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
1000cd5c:	b580      	push	{r7, lr}
1000cd5e:	b084      	sub	sp, #16
1000cd60:	af00      	add	r7, sp, #0
1000cd62:	60f8      	str	r0, [r7, #12]
1000cd64:	60b9      	str	r1, [r7, #8]
1000cd66:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
1000cd68:	687a      	ldr	r2, [r7, #4]
1000cd6a:	68b9      	ldr	r1, [r7, #8]
1000cd6c:	68f8      	ldr	r0, [r7, #12]
1000cd6e:	f000 fc4d 	bl	1000d60c <ai_platform_network_process>
1000cd72:	4603      	mov	r3, r0
}
1000cd74:	4618      	mov	r0, r3
1000cd76:	3710      	adds	r7, #16
1000cd78:	46bd      	mov	sp, r7
1000cd7a:	bd80      	pop	{r7, pc}

1000cd7c <ai_emotion_model_data_params_get>:
 * @ingroup emotion_model_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_emotion_model_data_params_get(ai_network_params* params)
{
1000cd7c:	b580      	push	{r7, lr}
1000cd7e:	b086      	sub	sp, #24
1000cd80:	af00      	add	r7, sp, #0
1000cd82:	6078      	str	r0, [r7, #4]
  if (!params) return false;
1000cd84:	687b      	ldr	r3, [r7, #4]
1000cd86:	2b00      	cmp	r3, #0
1000cd88:	d101      	bne.n	1000cd8e <ai_emotion_model_data_params_get+0x12>
1000cd8a:	2300      	movs	r3, #0
1000cd8c:	e016      	b.n	1000cdbc <ai_emotion_model_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
1000cd8e:	4a0d      	ldr	r2, [pc, #52]	; (1000cdc4 <ai_emotion_model_data_params_get+0x48>)
1000cd90:	f107 0310 	add.w	r3, r7, #16
1000cd94:	e892 0003 	ldmia.w	r2, {r0, r1}
1000cd98:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_EMOTION_MODEL_DATA_ACTIVATIONS_COUNT, g_emotion_model_data_map_activations);
  
  const ai_buffer_array map_weights = 
1000cd9c:	4a0a      	ldr	r2, [pc, #40]	; (1000cdc8 <ai_emotion_model_data_params_get+0x4c>)
1000cd9e:	f107 0308 	add.w	r3, r7, #8
1000cda2:	e892 0003 	ldmia.w	r2, {r0, r1}
1000cda6:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_EMOTION_MODEL_DATA_WEIGHTS_COUNT, g_emotion_model_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
1000cdaa:	f107 0210 	add.w	r2, r7, #16
1000cdae:	f107 0308 	add.w	r3, r7, #8
1000cdb2:	4619      	mov	r1, r3
1000cdb4:	6878      	ldr	r0, [r7, #4]
1000cdb6:	f000 f903 	bl	1000cfc0 <ai_platform_bind_network_params>
1000cdba:	4603      	mov	r3, r0
}
1000cdbc:	4618      	mov	r0, r3
1000cdbe:	3718      	adds	r7, #24
1000cdc0:	46bd      	mov	sp, r7
1000cdc2:	bd80      	pop	{r7, pc}
1000cdc4:	10012670 	.word	0x10012670
1000cdc8:	10012678 	.word	0x10012678

1000cdcc <ai_buffer_get_size>:
1000cdcc:	b378      	cbz	r0, 1000ce2e <ai_buffer_get_size+0x62>
1000cdce:	b410      	push	{r4}
1000cdd0:	6803      	ldr	r3, [r0, #0]
1000cdd2:	4a17      	ldr	r2, [pc, #92]	; (1000ce30 <ai_buffer_get_size+0x64>)
1000cdd4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
1000cdd8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
1000cddc:	4293      	cmp	r3, r2
1000cdde:	d01e      	beq.n	1000ce1e <ai_buffer_get_size+0x52>
1000cde0:	6984      	ldr	r4, [r0, #24]
1000cde2:	6862      	ldr	r2, [r4, #4]
1000cde4:	7d03      	ldrb	r3, [r0, #20]
1000cde6:	6941      	ldr	r1, [r0, #20]
1000cde8:	f1a3 0301 	sub.w	r3, r3, #1
1000cdec:	fab3 f383 	clz	r3, r3
1000cdf0:	095b      	lsrs	r3, r3, #5
1000cdf2:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
1000cdf6:	f3c1 2017 	ubfx	r0, r1, #8, #24
1000cdfa:	da0b      	bge.n	1000ce14 <ai_buffer_get_size+0x48>
1000cdfc:	2b01      	cmp	r3, #1
1000cdfe:	d102      	bne.n	1000ce06 <ai_buffer_get_size+0x3a>
1000ce00:	2802      	cmp	r0, #2
1000ce02:	d007      	beq.n	1000ce14 <ai_buffer_get_size+0x48>
1000ce04:	2302      	movs	r3, #2
1000ce06:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
1000ce0a:	3301      	adds	r3, #1
1000ce0c:	4298      	cmp	r0, r3
1000ce0e:	fb01 f202 	mul.w	r2, r1, r2
1000ce12:	d1f3      	bne.n	1000cdfc <ai_buffer_get_size+0x30>
1000ce14:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
1000ce18:	f85d 4b04 	ldr.w	r4, [sp], #4
1000ce1c:	4770      	bx	lr
1000ce1e:	2900      	cmp	r1, #0
1000ce20:	d0de      	beq.n	1000cde0 <ai_buffer_get_size+0x14>
1000ce22:	6984      	ldr	r4, [r0, #24]
1000ce24:	6863      	ldr	r3, [r4, #4]
1000ce26:	331f      	adds	r3, #31
1000ce28:	f023 021f 	bic.w	r2, r3, #31
1000ce2c:	e7da      	b.n	1000cde4 <ai_buffer_get_size+0x18>
1000ce2e:	4770      	bx	lr
1000ce30:	000400c0 	.word	0x000400c0

1000ce34 <ai_buffer_array_sane>:
1000ce34:	b138      	cbz	r0, 1000ce46 <ai_buffer_array_sane+0x12>
1000ce36:	6843      	ldr	r3, [r0, #4]
1000ce38:	b123      	cbz	r3, 1000ce44 <ai_buffer_array_sane+0x10>
1000ce3a:	8840      	ldrh	r0, [r0, #2]
1000ce3c:	3800      	subs	r0, #0
1000ce3e:	bf18      	it	ne
1000ce40:	2001      	movne	r0, #1
1000ce42:	4770      	bx	lr
1000ce44:	4618      	mov	r0, r3
1000ce46:	4770      	bx	lr

1000ce48 <ai_buffer_array_item_set_address>:
1000ce48:	b150      	cbz	r0, 1000ce60 <ai_buffer_array_item_set_address+0x18>
1000ce4a:	6843      	ldr	r3, [r0, #4]
1000ce4c:	b14b      	cbz	r3, 1000ce62 <ai_buffer_array_item_set_address+0x1a>
1000ce4e:	8840      	ldrh	r0, [r0, #2]
1000ce50:	b900      	cbnz	r0, 1000ce54 <ai_buffer_array_item_set_address+0xc>
1000ce52:	4770      	bx	lr
1000ce54:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
1000ce58:	eb03 0181 	add.w	r1, r3, r1, lsl #2
1000ce5c:	2001      	movs	r0, #1
1000ce5e:	604a      	str	r2, [r1, #4]
1000ce60:	4770      	bx	lr
1000ce62:	4618      	mov	r0, r3
1000ce64:	4770      	bx	lr
1000ce66:	bf00      	nop

1000ce68 <_ai_platform_acquire_crc>:
1000ce68:	2001      	movs	r0, #1
1000ce6a:	4770      	bx	lr

1000ce6c <_ai_platform_release_crc>:
1000ce6c:	4770      	bx	lr
1000ce6e:	bf00      	nop

1000ce70 <ai_platform_get_weights_map>:
1000ce70:	2a00      	cmp	r2, #0
1000ce72:	d037      	beq.n	1000cee4 <ai_platform_get_weights_map+0x74>
1000ce74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ce76:	4604      	mov	r4, r0
1000ce78:	b1a0      	cbz	r0, 1000cea4 <ai_platform_get_weights_map+0x34>
1000ce7a:	460f      	mov	r7, r1
1000ce7c:	b191      	cbz	r1, 1000cea4 <ai_platform_get_weights_map+0x34>
1000ce7e:	4b25      	ldr	r3, [pc, #148]	; (1000cf14 <ai_platform_get_weights_map+0xa4>)
1000ce80:	6810      	ldr	r0, [r2, #0]
1000ce82:	4298      	cmp	r0, r3
1000ce84:	4615      	mov	r5, r2
1000ce86:	d00f      	beq.n	1000cea8 <ai_platform_get_weights_map+0x38>
1000ce88:	6855      	ldr	r5, [r2, #4]
1000ce8a:	b15d      	cbz	r5, 1000cea4 <ai_platform_get_weights_map+0x34>
1000ce8c:	682e      	ldr	r6, [r5, #0]
1000ce8e:	429e      	cmp	r6, r3
1000ce90:	d02a      	beq.n	1000cee8 <ai_platform_get_weights_map+0x78>
1000ce92:	f1a1 0001 	sub.w	r0, r1, #1
1000ce96:	6025      	str	r5, [r4, #0]
1000ce98:	fab0 f080 	clz	r0, r0
1000ce9c:	0940      	lsrs	r0, r0, #5
1000ce9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000cea0:	42a7      	cmp	r7, r4
1000cea2:	d034      	beq.n	1000cf0e <ai_platform_get_weights_map+0x9e>
1000cea4:	2000      	movs	r0, #0
1000cea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000cea8:	1d10      	adds	r0, r2, #4
1000ceaa:	f7ff ffc3 	bl	1000ce34 <ai_buffer_array_sane>
1000ceae:	2800      	cmp	r0, #0
1000ceb0:	d0f8      	beq.n	1000cea4 <ai_platform_get_weights_map+0x34>
1000ceb2:	88eb      	ldrh	r3, [r5, #6]
1000ceb4:	429f      	cmp	r7, r3
1000ceb6:	d1f5      	bne.n	1000cea4 <ai_platform_get_weights_map+0x34>
1000ceb8:	f04f 0e00 	mov.w	lr, #0
1000cebc:	1f23      	subs	r3, r4, #4
1000cebe:	4670      	mov	r0, lr
1000cec0:	68aa      	ldr	r2, [r5, #8]
1000cec2:	eb02 0c0e 	add.w	ip, r2, lr
1000cec6:	f10e 0e1c 	add.w	lr, lr, #28
1000ceca:	f8dc 4004 	ldr.w	r4, [ip, #4]
1000cece:	b124      	cbz	r4, 1000ceda <ai_platform_get_weights_map+0x6a>
1000ced0:	3001      	adds	r0, #1
1000ced2:	4287      	cmp	r7, r0
1000ced4:	f843 4f04 	str.w	r4, [r3, #4]!
1000ced8:	d1f2      	bne.n	1000cec0 <ai_platform_get_weights_map+0x50>
1000ceda:	1a38      	subs	r0, r7, r0
1000cedc:	fab0 f080 	clz	r0, r0
1000cee0:	0940      	lsrs	r0, r0, #5
1000cee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000cee4:	2000      	movs	r0, #0
1000cee6:	4770      	bx	lr
1000cee8:	1f23      	subs	r3, r4, #4
1000ceea:	4628      	mov	r0, r5
1000ceec:	2400      	movs	r4, #0
1000ceee:	e000      	b.n	1000cef2 <ai_platform_get_weights_map+0x82>
1000cef0:	4614      	mov	r4, r2
1000cef2:	f850 2f04 	ldr.w	r2, [r0, #4]!
1000cef6:	42b2      	cmp	r2, r6
1000cef8:	d0d2      	beq.n	1000cea0 <ai_platform_get_weights_map+0x30>
1000cefa:	f843 2f04 	str.w	r2, [r3, #4]!
1000cefe:	1c62      	adds	r2, r4, #1
1000cf00:	4297      	cmp	r7, r2
1000cf02:	d1f5      	bne.n	1000cef0 <ai_platform_get_weights_map+0x80>
1000cf04:	3402      	adds	r4, #2
1000cf06:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
1000cf0a:	42b3      	cmp	r3, r6
1000cf0c:	d1ca      	bne.n	1000cea4 <ai_platform_get_weights_map+0x34>
1000cf0e:	2001      	movs	r0, #1
1000cf10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000cf12:	bf00      	nop
1000cf14:	a1facade 	.word	0xa1facade

1000cf18 <ai_platform_get_activations_map>:
1000cf18:	2a00      	cmp	r2, #0
1000cf1a:	d038      	beq.n	1000cf8e <ai_platform_get_activations_map+0x76>
1000cf1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000cf1e:	4604      	mov	r4, r0
1000cf20:	b1a0      	cbz	r0, 1000cf4c <ai_platform_get_activations_map+0x34>
1000cf22:	460f      	mov	r7, r1
1000cf24:	b191      	cbz	r1, 1000cf4c <ai_platform_get_activations_map+0x34>
1000cf26:	4b25      	ldr	r3, [pc, #148]	; (1000cfbc <ai_platform_get_activations_map+0xa4>)
1000cf28:	6810      	ldr	r0, [r2, #0]
1000cf2a:	4298      	cmp	r0, r3
1000cf2c:	4615      	mov	r5, r2
1000cf2e:	d00f      	beq.n	1000cf50 <ai_platform_get_activations_map+0x38>
1000cf30:	6a15      	ldr	r5, [r2, #32]
1000cf32:	b15d      	cbz	r5, 1000cf4c <ai_platform_get_activations_map+0x34>
1000cf34:	682e      	ldr	r6, [r5, #0]
1000cf36:	429e      	cmp	r6, r3
1000cf38:	d02b      	beq.n	1000cf92 <ai_platform_get_activations_map+0x7a>
1000cf3a:	f1a1 0001 	sub.w	r0, r1, #1
1000cf3e:	6025      	str	r5, [r4, #0]
1000cf40:	fab0 f080 	clz	r0, r0
1000cf44:	0940      	lsrs	r0, r0, #5
1000cf46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000cf48:	42a7      	cmp	r7, r4
1000cf4a:	d035      	beq.n	1000cfb8 <ai_platform_get_activations_map+0xa0>
1000cf4c:	2000      	movs	r0, #0
1000cf4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000cf50:	f102 000c 	add.w	r0, r2, #12
1000cf54:	f7ff ff6e 	bl	1000ce34 <ai_buffer_array_sane>
1000cf58:	2800      	cmp	r0, #0
1000cf5a:	d0f7      	beq.n	1000cf4c <ai_platform_get_activations_map+0x34>
1000cf5c:	89eb      	ldrh	r3, [r5, #14]
1000cf5e:	429f      	cmp	r7, r3
1000cf60:	d1f4      	bne.n	1000cf4c <ai_platform_get_activations_map+0x34>
1000cf62:	f04f 0e00 	mov.w	lr, #0
1000cf66:	1f23      	subs	r3, r4, #4
1000cf68:	4670      	mov	r0, lr
1000cf6a:	692a      	ldr	r2, [r5, #16]
1000cf6c:	eb02 0c0e 	add.w	ip, r2, lr
1000cf70:	f10e 0e1c 	add.w	lr, lr, #28
1000cf74:	f8dc 4004 	ldr.w	r4, [ip, #4]
1000cf78:	b124      	cbz	r4, 1000cf84 <ai_platform_get_activations_map+0x6c>
1000cf7a:	3001      	adds	r0, #1
1000cf7c:	4287      	cmp	r7, r0
1000cf7e:	f843 4f04 	str.w	r4, [r3, #4]!
1000cf82:	d1f2      	bne.n	1000cf6a <ai_platform_get_activations_map+0x52>
1000cf84:	1a38      	subs	r0, r7, r0
1000cf86:	fab0 f080 	clz	r0, r0
1000cf8a:	0940      	lsrs	r0, r0, #5
1000cf8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000cf8e:	2000      	movs	r0, #0
1000cf90:	4770      	bx	lr
1000cf92:	1f23      	subs	r3, r4, #4
1000cf94:	4628      	mov	r0, r5
1000cf96:	2400      	movs	r4, #0
1000cf98:	e000      	b.n	1000cf9c <ai_platform_get_activations_map+0x84>
1000cf9a:	4614      	mov	r4, r2
1000cf9c:	f850 2f04 	ldr.w	r2, [r0, #4]!
1000cfa0:	42b2      	cmp	r2, r6
1000cfa2:	d0d1      	beq.n	1000cf48 <ai_platform_get_activations_map+0x30>
1000cfa4:	f843 2f04 	str.w	r2, [r3, #4]!
1000cfa8:	1c62      	adds	r2, r4, #1
1000cfaa:	4297      	cmp	r7, r2
1000cfac:	d1f5      	bne.n	1000cf9a <ai_platform_get_activations_map+0x82>
1000cfae:	3402      	adds	r4, #2
1000cfb0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
1000cfb4:	42b3      	cmp	r3, r6
1000cfb6:	d1c9      	bne.n	1000cf4c <ai_platform_get_activations_map+0x34>
1000cfb8:	2001      	movs	r0, #1
1000cfba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000cfbc:	a1facade 	.word	0xa1facade

1000cfc0 <ai_platform_bind_network_params>:
1000cfc0:	b1a0      	cbz	r0, 1000cfec <ai_platform_bind_network_params+0x2c>
1000cfc2:	b1b1      	cbz	r1, 1000cff2 <ai_platform_bind_network_params+0x32>
1000cfc4:	b1c2      	cbz	r2, 1000cff8 <ai_platform_bind_network_params+0x38>
1000cfc6:	b410      	push	{r4}
1000cfc8:	4603      	mov	r3, r0
1000cfca:	4c0d      	ldr	r4, [pc, #52]	; (1000d000 <ai_platform_bind_network_params+0x40>)
1000cfcc:	f843 4b04 	str.w	r4, [r3], #4
1000cfd0:	f100 0c0c 	add.w	ip, r0, #12
1000cfd4:	c903      	ldmia	r1, {r0, r1}
1000cfd6:	e883 0003 	stmia.w	r3, {r0, r1}
1000cfda:	e892 0003 	ldmia.w	r2, {r0, r1}
1000cfde:	e88c 0003 	stmia.w	ip, {r0, r1}
1000cfe2:	2301      	movs	r3, #1
1000cfe4:	4618      	mov	r0, r3
1000cfe6:	f85d 4b04 	ldr.w	r4, [sp], #4
1000cfea:	4770      	bx	lr
1000cfec:	4603      	mov	r3, r0
1000cfee:	4618      	mov	r0, r3
1000cff0:	4770      	bx	lr
1000cff2:	460b      	mov	r3, r1
1000cff4:	4618      	mov	r0, r3
1000cff6:	4770      	bx	lr
1000cff8:	4613      	mov	r3, r2
1000cffa:	4618      	mov	r0, r3
1000cffc:	4770      	bx	lr
1000cffe:	bf00      	nop
1000d000:	a1facade 	.word	0xa1facade

1000d004 <ai_platform_network_get_error>:
1000d004:	b510      	push	{r4, lr}
1000d006:	b198      	cbz	r0, 1000d030 <ai_platform_network_get_error+0x2c>
1000d008:	4b17      	ldr	r3, [pc, #92]	; (1000d068 <ai_platform_network_get_error+0x64>)
1000d00a:	6802      	ldr	r2, [r0, #0]
1000d00c:	429a      	cmp	r2, r3
1000d00e:	4604      	mov	r4, r0
1000d010:	d10e      	bne.n	1000d030 <ai_platform_network_get_error+0x2c>
1000d012:	f7ff ff29 	bl	1000ce68 <_ai_platform_acquire_crc>
1000d016:	4a15      	ldr	r2, [pc, #84]	; (1000d06c <ai_platform_network_get_error+0x68>)
1000d018:	2301      	movs	r3, #1
1000d01a:	6093      	str	r3, [r2, #8]
1000d01c:	6893      	ldr	r3, [r2, #8]
1000d01e:	2b00      	cmp	r3, #0
1000d020:	d1fc      	bne.n	1000d01c <ai_platform_network_get_error+0x18>
1000d022:	4b13      	ldr	r3, [pc, #76]	; (1000d070 <ai_platform_network_get_error+0x6c>)
1000d024:	6013      	str	r3, [r2, #0]
1000d026:	6812      	ldr	r2, [r2, #0]
1000d028:	4b12      	ldr	r3, [pc, #72]	; (1000d074 <ai_platform_network_get_error+0x70>)
1000d02a:	429a      	cmp	r2, r3
1000d02c:	d014      	beq.n	1000d058 <ai_platform_network_get_error+0x54>
1000d02e:	e7fe      	b.n	1000d02e <ai_platform_network_get_error+0x2a>
1000d030:	f7ff ff1a 	bl	1000ce68 <_ai_platform_acquire_crc>
1000d034:	4a0d      	ldr	r2, [pc, #52]	; (1000d06c <ai_platform_network_get_error+0x68>)
1000d036:	2301      	movs	r3, #1
1000d038:	6093      	str	r3, [r2, #8]
1000d03a:	6893      	ldr	r3, [r2, #8]
1000d03c:	2b00      	cmp	r3, #0
1000d03e:	d1fc      	bne.n	1000d03a <ai_platform_network_get_error+0x36>
1000d040:	4b0b      	ldr	r3, [pc, #44]	; (1000d070 <ai_platform_network_get_error+0x6c>)
1000d042:	6013      	str	r3, [r2, #0]
1000d044:	6812      	ldr	r2, [r2, #0]
1000d046:	4b0b      	ldr	r3, [pc, #44]	; (1000d074 <ai_platform_network_get_error+0x70>)
1000d048:	429a      	cmp	r2, r3
1000d04a:	d000      	beq.n	1000d04e <ai_platform_network_get_error+0x4a>
1000d04c:	e7fe      	b.n	1000d04c <ai_platform_network_get_error+0x48>
1000d04e:	f7ff ff0d 	bl	1000ce6c <_ai_platform_release_crc>
1000d052:	f241 0010 	movw	r0, #4112	; 0x1010
1000d056:	bd10      	pop	{r4, pc}
1000d058:	f7ff ff08 	bl	1000ce6c <_ai_platform_release_crc>
1000d05c:	f104 0010 	add.w	r0, r4, #16
1000d060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000d064:	f000 bd36 	b.w	1000dad4 <core_get_error>
1000d068:	a1c00100 	.word	0xa1c00100
1000d06c:	4c004000 	.word	0x4c004000
1000d070:	f407a5c2 	.word	0xf407a5c2
1000d074:	b5e8b5cd 	.word	0xb5e8b5cd

1000d078 <ai_platform_network_set_error>:
1000d078:	b110      	cbz	r0, 1000d080 <ai_platform_network_set_error+0x8>
1000d07a:	3010      	adds	r0, #16
1000d07c:	f000 bd30 	b.w	1000dae0 <core_set_error>
1000d080:	4770      	bx	lr
1000d082:	bf00      	nop

1000d084 <ai_platform_inputs_get>:
1000d084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000d088:	b083      	sub	sp, #12
1000d08a:	9100      	str	r1, [sp, #0]
1000d08c:	b198      	cbz	r0, 1000d0b6 <ai_platform_inputs_get+0x32>
1000d08e:	4b47      	ldr	r3, [pc, #284]	; (1000d1ac <ai_platform_inputs_get+0x128>)
1000d090:	6802      	ldr	r2, [r0, #0]
1000d092:	429a      	cmp	r2, r3
1000d094:	4607      	mov	r7, r0
1000d096:	d10e      	bne.n	1000d0b6 <ai_platform_inputs_get+0x32>
1000d098:	f7ff fee6 	bl	1000ce68 <_ai_platform_acquire_crc>
1000d09c:	4b44      	ldr	r3, [pc, #272]	; (1000d1b0 <ai_platform_inputs_get+0x12c>)
1000d09e:	2201      	movs	r2, #1
1000d0a0:	609a      	str	r2, [r3, #8]
1000d0a2:	689c      	ldr	r4, [r3, #8]
1000d0a4:	2c00      	cmp	r4, #0
1000d0a6:	d1fc      	bne.n	1000d0a2 <ai_platform_inputs_get+0x1e>
1000d0a8:	4a42      	ldr	r2, [pc, #264]	; (1000d1b4 <ai_platform_inputs_get+0x130>)
1000d0aa:	601a      	str	r2, [r3, #0]
1000d0ac:	681a      	ldr	r2, [r3, #0]
1000d0ae:	4b42      	ldr	r3, [pc, #264]	; (1000d1b8 <ai_platform_inputs_get+0x134>)
1000d0b0:	429a      	cmp	r2, r3
1000d0b2:	d015      	beq.n	1000d0e0 <ai_platform_inputs_get+0x5c>
1000d0b4:	e7fe      	b.n	1000d0b4 <ai_platform_inputs_get+0x30>
1000d0b6:	f7ff fed7 	bl	1000ce68 <_ai_platform_acquire_crc>
1000d0ba:	4b3d      	ldr	r3, [pc, #244]	; (1000d1b0 <ai_platform_inputs_get+0x12c>)
1000d0bc:	2201      	movs	r2, #1
1000d0be:	609a      	str	r2, [r3, #8]
1000d0c0:	689c      	ldr	r4, [r3, #8]
1000d0c2:	2c00      	cmp	r4, #0
1000d0c4:	d1fc      	bne.n	1000d0c0 <ai_platform_inputs_get+0x3c>
1000d0c6:	4a3b      	ldr	r2, [pc, #236]	; (1000d1b4 <ai_platform_inputs_get+0x130>)
1000d0c8:	601a      	str	r2, [r3, #0]
1000d0ca:	681a      	ldr	r2, [r3, #0]
1000d0cc:	4b3a      	ldr	r3, [pc, #232]	; (1000d1b8 <ai_platform_inputs_get+0x134>)
1000d0ce:	429a      	cmp	r2, r3
1000d0d0:	d000      	beq.n	1000d0d4 <ai_platform_inputs_get+0x50>
1000d0d2:	e7fe      	b.n	1000d0d2 <ai_platform_inputs_get+0x4e>
1000d0d4:	f7ff feca 	bl	1000ce6c <_ai_platform_release_crc>
1000d0d8:	4620      	mov	r0, r4
1000d0da:	b003      	add	sp, #12
1000d0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000d0e0:	f7ff fec4 	bl	1000ce6c <_ai_platform_release_crc>
1000d0e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
1000d0e6:	2b00      	cmp	r3, #0
1000d0e8:	d04c      	beq.n	1000d184 <ai_platform_inputs_get+0x100>
1000d0ea:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
1000d0ee:	f1b9 0f00 	cmp.w	r9, #0
1000d0f2:	d047      	beq.n	1000d184 <ai_platform_inputs_get+0x100>
1000d0f4:	46a2      	mov	sl, r4
1000d0f6:	9701      	str	r7, [sp, #4]
1000d0f8:	e016      	b.n	1000d128 <ai_platform_inputs_get+0xa4>
1000d0fa:	2201      	movs	r2, #1
1000d0fc:	f847 200e 	str.w	r2, [r7, lr]
1000d100:	69b2      	ldr	r2, [r6, #24]
1000d102:	6852      	ldr	r2, [r2, #4]
1000d104:	60ab      	str	r3, [r5, #8]
1000d106:	f04f 0301 	mov.w	r3, #1
1000d10a:	752b      	strb	r3, [r5, #20]
1000d10c:	2300      	movs	r3, #0
1000d10e:	60eb      	str	r3, [r5, #12]
1000d110:	696b      	ldr	r3, [r5, #20]
1000d112:	612a      	str	r2, [r5, #16]
1000d114:	e9c5 0100 	strd	r0, r1, [r5]
1000d118:	f36b 231f 	bfi	r3, fp, #8, #24
1000d11c:	f8c5 8018 	str.w	r8, [r5, #24]
1000d120:	3401      	adds	r4, #1
1000d122:	f10a 0a1c 	add.w	sl, sl, #28
1000d126:	616b      	str	r3, [r5, #20]
1000d128:	f8b9 3000 	ldrh.w	r3, [r9]
1000d12c:	42a3      	cmp	r3, r4
1000d12e:	b2a2      	uxth	r2, r4
1000d130:	d935      	bls.n	1000d19e <ai_platform_inputs_get+0x11a>
1000d132:	f8d9 3004 	ldr.w	r3, [r9, #4]
1000d136:	2b00      	cmp	r3, #0
1000d138:	d031      	beq.n	1000d19e <ai_platform_inputs_get+0x11a>
1000d13a:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
1000d13e:	b376      	cbz	r6, 1000d19e <ai_platform_inputs_get+0x11a>
1000d140:	f8d9 3008 	ldr.w	r3, [r9, #8]
1000d144:	69b2      	ldr	r2, [r6, #24]
1000d146:	f8d6 800c 	ldr.w	r8, [r6, #12]
1000d14a:	6810      	ldr	r0, [r2, #0]
1000d14c:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
1000d150:	68b3      	ldr	r3, [r6, #8]
1000d152:	f3c3 2b17 	ubfx	fp, r3, #8, #24
1000d156:	f001 ff8d 	bl	1000f074 <ai_array_to_buffer_fmt>
1000d15a:	69b2      	ldr	r2, [r6, #24]
1000d15c:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
1000d160:	6891      	ldr	r1, [r2, #8]
1000d162:	4455      	add	r5, sl
1000d164:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
1000d168:	2b00      	cmp	r3, #0
1000d16a:	d0ca      	beq.n	1000d102 <ai_platform_inputs_get+0x7e>
1000d16c:	2200      	movs	r2, #0
1000d16e:	f847 2034 	str.w	r2, [r7, r4, lsl #3]
1000d172:	6832      	ldr	r2, [r6, #0]
1000d174:	605a      	str	r2, [r3, #4]
1000d176:	b112      	cbz	r2, 1000d17e <ai_platform_inputs_get+0xfa>
1000d178:	8852      	ldrh	r2, [r2, #2]
1000d17a:	2a00      	cmp	r2, #0
1000d17c:	d1bd      	bne.n	1000d0fa <ai_platform_inputs_get+0x76>
1000d17e:	69b2      	ldr	r2, [r6, #24]
1000d180:	2300      	movs	r3, #0
1000d182:	e7be      	b.n	1000d102 <ai_platform_inputs_get+0x7e>
1000d184:	2218      	movs	r2, #24
1000d186:	2111      	movs	r1, #17
1000d188:	f107 0010 	add.w	r0, r7, #16
1000d18c:	f000 fca8 	bl	1000dae0 <core_set_error>
1000d190:	2200      	movs	r2, #0
1000d192:	4610      	mov	r0, r2
1000d194:	9b00      	ldr	r3, [sp, #0]
1000d196:	2b00      	cmp	r3, #0
1000d198:	d09f      	beq.n	1000d0da <ai_platform_inputs_get+0x56>
1000d19a:	801a      	strh	r2, [r3, #0]
1000d19c:	e79d      	b.n	1000d0da <ai_platform_inputs_get+0x56>
1000d19e:	9f01      	ldr	r7, [sp, #4]
1000d1a0:	2a00      	cmp	r2, #0
1000d1a2:	d0ef      	beq.n	1000d184 <ai_platform_inputs_get+0x100>
1000d1a4:	f8d9 3008 	ldr.w	r3, [r9, #8]
1000d1a8:	6858      	ldr	r0, [r3, #4]
1000d1aa:	e7f3      	b.n	1000d194 <ai_platform_inputs_get+0x110>
1000d1ac:	a1c00100 	.word	0xa1c00100
1000d1b0:	4c004000 	.word	0x4c004000
1000d1b4:	f407a5c2 	.word	0xf407a5c2
1000d1b8:	b5e8b5cd 	.word	0xb5e8b5cd

1000d1bc <ai_platform_outputs_get>:
1000d1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000d1c0:	b083      	sub	sp, #12
1000d1c2:	9100      	str	r1, [sp, #0]
1000d1c4:	b198      	cbz	r0, 1000d1ee <ai_platform_outputs_get+0x32>
1000d1c6:	4b45      	ldr	r3, [pc, #276]	; (1000d2dc <ai_platform_outputs_get+0x120>)
1000d1c8:	6802      	ldr	r2, [r0, #0]
1000d1ca:	429a      	cmp	r2, r3
1000d1cc:	4607      	mov	r7, r0
1000d1ce:	d10e      	bne.n	1000d1ee <ai_platform_outputs_get+0x32>
1000d1d0:	f7ff fe4a 	bl	1000ce68 <_ai_platform_acquire_crc>
1000d1d4:	4b42      	ldr	r3, [pc, #264]	; (1000d2e0 <ai_platform_outputs_get+0x124>)
1000d1d6:	2201      	movs	r2, #1
1000d1d8:	609a      	str	r2, [r3, #8]
1000d1da:	689c      	ldr	r4, [r3, #8]
1000d1dc:	2c00      	cmp	r4, #0
1000d1de:	d1fc      	bne.n	1000d1da <ai_platform_outputs_get+0x1e>
1000d1e0:	4a40      	ldr	r2, [pc, #256]	; (1000d2e4 <ai_platform_outputs_get+0x128>)
1000d1e2:	601a      	str	r2, [r3, #0]
1000d1e4:	681a      	ldr	r2, [r3, #0]
1000d1e6:	4b40      	ldr	r3, [pc, #256]	; (1000d2e8 <ai_platform_outputs_get+0x12c>)
1000d1e8:	429a      	cmp	r2, r3
1000d1ea:	d015      	beq.n	1000d218 <ai_platform_outputs_get+0x5c>
1000d1ec:	e7fe      	b.n	1000d1ec <ai_platform_outputs_get+0x30>
1000d1ee:	f7ff fe3b 	bl	1000ce68 <_ai_platform_acquire_crc>
1000d1f2:	4b3b      	ldr	r3, [pc, #236]	; (1000d2e0 <ai_platform_outputs_get+0x124>)
1000d1f4:	2201      	movs	r2, #1
1000d1f6:	609a      	str	r2, [r3, #8]
1000d1f8:	689c      	ldr	r4, [r3, #8]
1000d1fa:	2c00      	cmp	r4, #0
1000d1fc:	d1fc      	bne.n	1000d1f8 <ai_platform_outputs_get+0x3c>
1000d1fe:	4a39      	ldr	r2, [pc, #228]	; (1000d2e4 <ai_platform_outputs_get+0x128>)
1000d200:	601a      	str	r2, [r3, #0]
1000d202:	681a      	ldr	r2, [r3, #0]
1000d204:	4b38      	ldr	r3, [pc, #224]	; (1000d2e8 <ai_platform_outputs_get+0x12c>)
1000d206:	429a      	cmp	r2, r3
1000d208:	d000      	beq.n	1000d20c <ai_platform_outputs_get+0x50>
1000d20a:	e7fe      	b.n	1000d20a <ai_platform_outputs_get+0x4e>
1000d20c:	f7ff fe2e 	bl	1000ce6c <_ai_platform_release_crc>
1000d210:	4620      	mov	r0, r4
1000d212:	b003      	add	sp, #12
1000d214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000d218:	f7ff fe28 	bl	1000ce6c <_ai_platform_release_crc>
1000d21c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
1000d21e:	2b01      	cmp	r3, #1
1000d220:	d952      	bls.n	1000d2c8 <ai_platform_outputs_get+0x10c>
1000d222:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
1000d226:	9701      	str	r7, [sp, #4]
1000d228:	46a2      	mov	sl, r4
1000d22a:	e016      	b.n	1000d25a <ai_platform_outputs_get+0x9e>
1000d22c:	2201      	movs	r2, #1
1000d22e:	f847 200e 	str.w	r2, [r7, lr]
1000d232:	69b2      	ldr	r2, [r6, #24]
1000d234:	6852      	ldr	r2, [r2, #4]
1000d236:	60ab      	str	r3, [r5, #8]
1000d238:	f04f 0301 	mov.w	r3, #1
1000d23c:	752b      	strb	r3, [r5, #20]
1000d23e:	2300      	movs	r3, #0
1000d240:	60eb      	str	r3, [r5, #12]
1000d242:	696b      	ldr	r3, [r5, #20]
1000d244:	612a      	str	r2, [r5, #16]
1000d246:	e9c5 0100 	strd	r0, r1, [r5]
1000d24a:	f36b 231f 	bfi	r3, fp, #8, #24
1000d24e:	f8c5 8018 	str.w	r8, [r5, #24]
1000d252:	3401      	adds	r4, #1
1000d254:	f10a 0a1c 	add.w	sl, sl, #28
1000d258:	616b      	str	r3, [r5, #20]
1000d25a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1000d25e:	42a3      	cmp	r3, r4
1000d260:	b2a2      	uxth	r2, r4
1000d262:	d927      	bls.n	1000d2b4 <ai_platform_outputs_get+0xf8>
1000d264:	f8d9 3010 	ldr.w	r3, [r9, #16]
1000d268:	b323      	cbz	r3, 1000d2b4 <ai_platform_outputs_get+0xf8>
1000d26a:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
1000d26e:	b30e      	cbz	r6, 1000d2b4 <ai_platform_outputs_get+0xf8>
1000d270:	f8d9 3014 	ldr.w	r3, [r9, #20]
1000d274:	69b2      	ldr	r2, [r6, #24]
1000d276:	f8d6 800c 	ldr.w	r8, [r6, #12]
1000d27a:	6810      	ldr	r0, [r2, #0]
1000d27c:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
1000d280:	68b3      	ldr	r3, [r6, #8]
1000d282:	f3c3 2b17 	ubfx	fp, r3, #8, #24
1000d286:	f001 fef5 	bl	1000f074 <ai_array_to_buffer_fmt>
1000d28a:	69b2      	ldr	r2, [r6, #24]
1000d28c:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
1000d290:	6891      	ldr	r1, [r2, #8]
1000d292:	4455      	add	r5, sl
1000d294:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
1000d298:	2b00      	cmp	r3, #0
1000d29a:	d0cb      	beq.n	1000d234 <ai_platform_outputs_get+0x78>
1000d29c:	2200      	movs	r2, #0
1000d29e:	f847 2034 	str.w	r2, [r7, r4, lsl #3]
1000d2a2:	6832      	ldr	r2, [r6, #0]
1000d2a4:	605a      	str	r2, [r3, #4]
1000d2a6:	b112      	cbz	r2, 1000d2ae <ai_platform_outputs_get+0xf2>
1000d2a8:	8852      	ldrh	r2, [r2, #2]
1000d2aa:	2a00      	cmp	r2, #0
1000d2ac:	d1be      	bne.n	1000d22c <ai_platform_outputs_get+0x70>
1000d2ae:	69b2      	ldr	r2, [r6, #24]
1000d2b0:	2300      	movs	r3, #0
1000d2b2:	e7bf      	b.n	1000d234 <ai_platform_outputs_get+0x78>
1000d2b4:	9f01      	ldr	r7, [sp, #4]
1000d2b6:	b13a      	cbz	r2, 1000d2c8 <ai_platform_outputs_get+0x10c>
1000d2b8:	f8d9 3014 	ldr.w	r3, [r9, #20]
1000d2bc:	6858      	ldr	r0, [r3, #4]
1000d2be:	9b00      	ldr	r3, [sp, #0]
1000d2c0:	2b00      	cmp	r3, #0
1000d2c2:	d0a6      	beq.n	1000d212 <ai_platform_outputs_get+0x56>
1000d2c4:	801a      	strh	r2, [r3, #0]
1000d2c6:	e7a4      	b.n	1000d212 <ai_platform_outputs_get+0x56>
1000d2c8:	2218      	movs	r2, #24
1000d2ca:	2111      	movs	r1, #17
1000d2cc:	f107 0010 	add.w	r0, r7, #16
1000d2d0:	f000 fc06 	bl	1000dae0 <core_set_error>
1000d2d4:	2200      	movs	r2, #0
1000d2d6:	4610      	mov	r0, r2
1000d2d8:	e7f1      	b.n	1000d2be <ai_platform_outputs_get+0x102>
1000d2da:	bf00      	nop
1000d2dc:	a1c00100 	.word	0xa1c00100
1000d2e0:	4c004000 	.word	0x4c004000
1000d2e4:	f407a5c2 	.word	0xf407a5c2
1000d2e8:	b5e8b5cd 	.word	0xb5e8b5cd

1000d2ec <ai_platform_network_create>:
1000d2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1000d2f0:	b082      	sub	sp, #8
1000d2f2:	4605      	mov	r5, r0
1000d2f4:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
1000d2f8:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
1000d2fc:	4616      	mov	r6, r2
1000d2fe:	461f      	mov	r7, r3
1000d300:	f7ff fdb2 	bl	1000ce68 <_ai_platform_acquire_crc>
1000d304:	b138      	cbz	r0, 1000d316 <ai_platform_network_create+0x2a>
1000d306:	4c38      	ldr	r4, [pc, #224]	; (1000d3e8 <ai_platform_network_create+0xfc>)
1000d308:	2218      	movs	r2, #24
1000d30a:	60a2      	str	r2, [r4, #8]
1000d30c:	68a2      	ldr	r2, [r4, #8]
1000d30e:	2a18      	cmp	r2, #24
1000d310:	d006      	beq.n	1000d320 <ai_platform_network_create+0x34>
1000d312:	f7ff fdab 	bl	1000ce6c <_ai_platform_release_crc>
1000d316:	f244 1033 	movw	r0, #16691	; 0x4133
1000d31a:	b002      	add	sp, #8
1000d31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000d320:	2201      	movs	r2, #1
1000d322:	4603      	mov	r3, r0
1000d324:	60a2      	str	r2, [r4, #8]
1000d326:	68a2      	ldr	r2, [r4, #8]
1000d328:	2a00      	cmp	r2, #0
1000d32a:	d1fc      	bne.n	1000d326 <ai_platform_network_create+0x3a>
1000d32c:	4618      	mov	r0, r3
1000d32e:	f7ff fd9d 	bl	1000ce6c <_ai_platform_release_crc>
1000d332:	f7ff fd99 	bl	1000ce68 <_ai_platform_acquire_crc>
1000d336:	2301      	movs	r3, #1
1000d338:	60a3      	str	r3, [r4, #8]
1000d33a:	4c2b      	ldr	r4, [pc, #172]	; (1000d3e8 <ai_platform_network_create+0xfc>)
1000d33c:	68a1      	ldr	r1, [r4, #8]
1000d33e:	2900      	cmp	r1, #0
1000d340:	d1fc      	bne.n	1000d33c <ai_platform_network_create+0x50>
1000d342:	4b2a      	ldr	r3, [pc, #168]	; (1000d3ec <ai_platform_network_create+0x100>)
1000d344:	6023      	str	r3, [r4, #0]
1000d346:	6822      	ldr	r2, [r4, #0]
1000d348:	4b29      	ldr	r3, [pc, #164]	; (1000d3f0 <ai_platform_network_create+0x104>)
1000d34a:	429a      	cmp	r2, r3
1000d34c:	d000      	beq.n	1000d350 <ai_platform_network_create+0x64>
1000d34e:	e7fe      	b.n	1000d34e <ai_platform_network_create+0x62>
1000d350:	f7ff fd8c 	bl	1000ce6c <_ai_platform_release_crc>
1000d354:	2d00      	cmp	r5, #0
1000d356:	d038      	beq.n	1000d3ca <ai_platform_network_create+0xde>
1000d358:	4b26      	ldr	r3, [pc, #152]	; (1000d3f4 <ai_platform_network_create+0x108>)
1000d35a:	6033      	str	r3, [r6, #0]
1000d35c:	602e      	str	r6, [r5, #0]
1000d35e:	f000 fbb7 	bl	1000dad0 <core_init>
1000d362:	b988      	cbnz	r0, 1000d388 <ai_platform_network_create+0x9c>
1000d364:	f04f 0a30 	mov.w	sl, #48	; 0x30
1000d368:	2300      	movs	r3, #0
1000d36a:	602b      	str	r3, [r5, #0]
1000d36c:	2410      	movs	r4, #16
1000d36e:	464a      	mov	r2, r9
1000d370:	4641      	mov	r1, r8
1000d372:	4638      	mov	r0, r7
1000d374:	f001 ff24 	bl	1000f1c0 <ai_version_get>
1000d378:	4603      	mov	r3, r0
1000d37a:	2000      	movs	r0, #0
1000d37c:	f36a 0007 	bfi	r0, sl, #0, #8
1000d380:	64b3      	str	r3, [r6, #72]	; 0x48
1000d382:	f364 201f 	bfi	r0, r4, #8, #24
1000d386:	e7c8      	b.n	1000d31a <ai_platform_network_create+0x2e>
1000d388:	f7ff fd6e 	bl	1000ce68 <_ai_platform_acquire_crc>
1000d38c:	2301      	movs	r3, #1
1000d38e:	60a3      	str	r3, [r4, #8]
1000d390:	4b15      	ldr	r3, [pc, #84]	; (1000d3e8 <ai_platform_network_create+0xfc>)
1000d392:	689c      	ldr	r4, [r3, #8]
1000d394:	2c00      	cmp	r4, #0
1000d396:	d1fc      	bne.n	1000d392 <ai_platform_network_create+0xa6>
1000d398:	4a14      	ldr	r2, [pc, #80]	; (1000d3ec <ai_platform_network_create+0x100>)
1000d39a:	601a      	str	r2, [r3, #0]
1000d39c:	681a      	ldr	r2, [r3, #0]
1000d39e:	4b14      	ldr	r3, [pc, #80]	; (1000d3f0 <ai_platform_network_create+0x104>)
1000d3a0:	429a      	cmp	r2, r3
1000d3a2:	d000      	beq.n	1000d3a6 <ai_platform_network_create+0xba>
1000d3a4:	e7fe      	b.n	1000d3a4 <ai_platform_network_create+0xb8>
1000d3a6:	f7ff fd61 	bl	1000ce6c <_ai_platform_release_crc>
1000d3aa:	4622      	mov	r2, r4
1000d3ac:	4641      	mov	r1, r8
1000d3ae:	4638      	mov	r0, r7
1000d3b0:	f001 ff06 	bl	1000f1c0 <ai_version_get>
1000d3b4:	4622      	mov	r2, r4
1000d3b6:	4682      	mov	sl, r0
1000d3b8:	2105      	movs	r1, #5
1000d3ba:	2001      	movs	r0, #1
1000d3bc:	f001 ff00 	bl	1000f1c0 <ai_version_get>
1000d3c0:	4582      	cmp	sl, r0
1000d3c2:	d005      	beq.n	1000d3d0 <ai_platform_network_create+0xe4>
1000d3c4:	f04f 0a01 	mov.w	sl, #1
1000d3c8:	e7ce      	b.n	1000d368 <ai_platform_network_create+0x7c>
1000d3ca:	f241 0010 	movw	r0, #4112	; 0x1010
1000d3ce:	e7a4      	b.n	1000d31a <ai_platform_network_create+0x2e>
1000d3d0:	4b09      	ldr	r3, [pc, #36]	; (1000d3f8 <ai_platform_network_create+0x10c>)
1000d3d2:	9301      	str	r3, [sp, #4]
1000d3d4:	a801      	add	r0, sp, #4
1000d3d6:	f000 fb8f 	bl	1000daf8 <ai_check_custom_types>
1000d3da:	b108      	cbz	r0, 1000d3e0 <ai_platform_network_create+0xf4>
1000d3dc:	46a2      	mov	sl, r4
1000d3de:	e7c6      	b.n	1000d36e <ai_platform_network_create+0x82>
1000d3e0:	f04f 0a02 	mov.w	sl, #2
1000d3e4:	e7c0      	b.n	1000d368 <ai_platform_network_create+0x7c>
1000d3e6:	bf00      	nop
1000d3e8:	4c004000 	.word	0x4c004000
1000d3ec:	f407a5c2 	.word	0xf407a5c2
1000d3f0:	b5e8b5cd 	.word	0xb5e8b5cd
1000d3f4:	a1c00100 	.word	0xa1c00100
1000d3f8:	84048403 	.word	0x84048403

1000d3fc <ai_platform_network_init>:
1000d3fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1000d400:	b1a0      	cbz	r0, 1000d42c <ai_platform_network_init+0x30>
1000d402:	4b53      	ldr	r3, [pc, #332]	; (1000d550 <ai_platform_network_init+0x154>)
1000d404:	6802      	ldr	r2, [r0, #0]
1000d406:	429a      	cmp	r2, r3
1000d408:	4605      	mov	r5, r0
1000d40a:	d10f      	bne.n	1000d42c <ai_platform_network_init+0x30>
1000d40c:	460c      	mov	r4, r1
1000d40e:	f7ff fd2b 	bl	1000ce68 <_ai_platform_acquire_crc>
1000d412:	4a50      	ldr	r2, [pc, #320]	; (1000d554 <ai_platform_network_init+0x158>)
1000d414:	2301      	movs	r3, #1
1000d416:	6093      	str	r3, [r2, #8]
1000d418:	6893      	ldr	r3, [r2, #8]
1000d41a:	2b00      	cmp	r3, #0
1000d41c:	d1fc      	bne.n	1000d418 <ai_platform_network_init+0x1c>
1000d41e:	4b4e      	ldr	r3, [pc, #312]	; (1000d558 <ai_platform_network_init+0x15c>)
1000d420:	6013      	str	r3, [r2, #0]
1000d422:	6812      	ldr	r2, [r2, #0]
1000d424:	4b4d      	ldr	r3, [pc, #308]	; (1000d55c <ai_platform_network_init+0x160>)
1000d426:	429a      	cmp	r2, r3
1000d428:	d014      	beq.n	1000d454 <ai_platform_network_init+0x58>
1000d42a:	e7fe      	b.n	1000d42a <ai_platform_network_init+0x2e>
1000d42c:	f7ff fd1c 	bl	1000ce68 <_ai_platform_acquire_crc>
1000d430:	4b48      	ldr	r3, [pc, #288]	; (1000d554 <ai_platform_network_init+0x158>)
1000d432:	2201      	movs	r2, #1
1000d434:	609a      	str	r2, [r3, #8]
1000d436:	689c      	ldr	r4, [r3, #8]
1000d438:	2c00      	cmp	r4, #0
1000d43a:	d1fc      	bne.n	1000d436 <ai_platform_network_init+0x3a>
1000d43c:	4a46      	ldr	r2, [pc, #280]	; (1000d558 <ai_platform_network_init+0x15c>)
1000d43e:	601a      	str	r2, [r3, #0]
1000d440:	681a      	ldr	r2, [r3, #0]
1000d442:	4b46      	ldr	r3, [pc, #280]	; (1000d55c <ai_platform_network_init+0x160>)
1000d444:	429a      	cmp	r2, r3
1000d446:	d000      	beq.n	1000d44a <ai_platform_network_init+0x4e>
1000d448:	e7fe      	b.n	1000d448 <ai_platform_network_init+0x4c>
1000d44a:	f7ff fd0f 	bl	1000ce6c <_ai_platform_release_crc>
1000d44e:	4620      	mov	r0, r4
1000d450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000d454:	f7ff fd0a 	bl	1000ce6c <_ai_platform_release_crc>
1000d458:	2c00      	cmp	r4, #0
1000d45a:	d06c      	beq.n	1000d536 <ai_platform_network_init+0x13a>
1000d45c:	4b40      	ldr	r3, [pc, #256]	; (1000d560 <ai_platform_network_init+0x164>)
1000d45e:	6822      	ldr	r2, [r4, #0]
1000d460:	429a      	cmp	r2, r3
1000d462:	d110      	bne.n	1000d486 <ai_platform_network_init+0x8a>
1000d464:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
1000d468:	6923      	ldr	r3, [r4, #16]
1000d46a:	89a6      	ldrh	r6, [r4, #12]
1000d46c:	89e7      	ldrh	r7, [r4, #14]
1000d46e:	62ab      	str	r3, [r5, #40]	; 0x28
1000d470:	e9c5 2107 	strd	r2, r1, [r5, #28]
1000d474:	2303      	movs	r3, #3
1000d476:	84ef      	strh	r7, [r5, #38]	; 0x26
1000d478:	84ae      	strh	r6, [r5, #36]	; 0x24
1000d47a:	60eb      	str	r3, [r5, #12]
1000d47c:	4628      	mov	r0, r5
1000d47e:	f000 fb65 	bl	1000db4c <ai_layers_init_all>
1000d482:	462c      	mov	r4, r5
1000d484:	e7e3      	b.n	1000d44e <ai_platform_network_init+0x52>
1000d486:	2101      	movs	r1, #1
1000d488:	4620      	mov	r0, r4
1000d48a:	46a1      	mov	r9, r4
1000d48c:	6864      	ldr	r4, [r4, #4]
1000d48e:	f7ff fc9d 	bl	1000cdcc <ai_buffer_get_size>
1000d492:	f109 081c 	add.w	r8, r9, #28
1000d496:	4606      	mov	r6, r0
1000d498:	2101      	movs	r1, #1
1000d49a:	4640      	mov	r0, r8
1000d49c:	f8d9 7020 	ldr.w	r7, [r9, #32]
1000d4a0:	f7ff fc94 	bl	1000cdcc <ai_buffer_get_size>
1000d4a4:	bb5e      	cbnz	r6, 1000d4fe <ai_platform_network_init+0x102>
1000d4a6:	4633      	mov	r3, r6
1000d4a8:	46b6      	mov	lr, r6
1000d4aa:	46b1      	mov	r9, r6
1000d4ac:	bb20      	cbnz	r0, 1000d4f8 <ai_platform_network_init+0xfc>
1000d4ae:	4680      	mov	r8, r0
1000d4b0:	4607      	mov	r7, r0
1000d4b2:	b37c      	cbz	r4, 1000d514 <ai_platform_network_init+0x118>
1000d4b4:	8bea      	ldrh	r2, [r5, #30]
1000d4b6:	4572      	cmp	r2, lr
1000d4b8:	d324      	bcc.n	1000d504 <ai_platform_network_init+0x108>
1000d4ba:	b143      	cbz	r3, 1000d4ce <ai_platform_network_init+0xd2>
1000d4bc:	46cc      	mov	ip, r9
1000d4be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
1000d4c2:	6a2c      	ldr	r4, [r5, #32]
1000d4c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1000d4c6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
1000d4ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
1000d4ce:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
1000d4d0:	f8a5 e01e 	strh.w	lr, [r5, #30]
1000d4d4:	2400      	movs	r4, #0
1000d4d6:	42bb      	cmp	r3, r7
1000d4d8:	83ac      	strh	r4, [r5, #28]
1000d4da:	d323      	bcc.n	1000d524 <ai_platform_network_init+0x128>
1000d4dc:	b34f      	cbz	r7, 1000d532 <ai_platform_network_init+0x136>
1000d4de:	46c6      	mov	lr, r8
1000d4e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
1000d4e4:	f8d5 c028 	ldr.w	ip, [r5, #40]	; 0x28
1000d4e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
1000d4ec:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
1000d4f0:	4626      	mov	r6, r4
1000d4f2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
1000d4f6:	e7bd      	b.n	1000d474 <ai_platform_network_init+0x78>
1000d4f8:	b31f      	cbz	r7, 1000d542 <ai_platform_network_init+0x146>
1000d4fa:	2701      	movs	r7, #1
1000d4fc:	e7d9      	b.n	1000d4b2 <ai_platform_network_init+0xb6>
1000d4fe:	2301      	movs	r3, #1
1000d500:	469e      	mov	lr, r3
1000d502:	e7d3      	b.n	1000d4ac <ai_platform_network_init+0xb0>
1000d504:	2212      	movs	r2, #18
1000d506:	2116      	movs	r1, #22
1000d508:	f105 0010 	add.w	r0, r5, #16
1000d50c:	f000 fae8 	bl	1000dae0 <core_set_error>
1000d510:	2400      	movs	r4, #0
1000d512:	e79c      	b.n	1000d44e <ai_platform_network_init+0x52>
1000d514:	2e00      	cmp	r6, #0
1000d516:	d0cd      	beq.n	1000d4b4 <ai_platform_network_init+0xb8>
1000d518:	2110      	movs	r1, #16
1000d51a:	2212      	movs	r2, #18
1000d51c:	1868      	adds	r0, r5, r1
1000d51e:	f000 fadf 	bl	1000dae0 <core_set_error>
1000d522:	e794      	b.n	1000d44e <ai_platform_network_init+0x52>
1000d524:	2213      	movs	r2, #19
1000d526:	2116      	movs	r1, #22
1000d528:	f105 0010 	add.w	r0, r5, #16
1000d52c:	f000 fad8 	bl	1000dae0 <core_set_error>
1000d530:	e78d      	b.n	1000d44e <ai_platform_network_init+0x52>
1000d532:	463e      	mov	r6, r7
1000d534:	e79e      	b.n	1000d474 <ai_platform_network_init+0x78>
1000d536:	2110      	movs	r1, #16
1000d538:	2211      	movs	r2, #17
1000d53a:	1868      	adds	r0, r5, r1
1000d53c:	f000 fad0 	bl	1000dae0 <core_set_error>
1000d540:	e785      	b.n	1000d44e <ai_platform_network_init+0x52>
1000d542:	2110      	movs	r1, #16
1000d544:	2213      	movs	r2, #19
1000d546:	1868      	adds	r0, r5, r1
1000d548:	f000 faca 	bl	1000dae0 <core_set_error>
1000d54c:	463c      	mov	r4, r7
1000d54e:	e77e      	b.n	1000d44e <ai_platform_network_init+0x52>
1000d550:	a1c00100 	.word	0xa1c00100
1000d554:	4c004000 	.word	0x4c004000
1000d558:	f407a5c2 	.word	0xf407a5c2
1000d55c:	b5e8b5cd 	.word	0xb5e8b5cd
1000d560:	a1facade 	.word	0xa1facade

1000d564 <ai_platform_network_post_init>:
1000d564:	b538      	push	{r3, r4, r5, lr}
1000d566:	b198      	cbz	r0, 1000d590 <ai_platform_network_post_init+0x2c>
1000d568:	4b24      	ldr	r3, [pc, #144]	; (1000d5fc <ai_platform_network_post_init+0x98>)
1000d56a:	6802      	ldr	r2, [r0, #0]
1000d56c:	429a      	cmp	r2, r3
1000d56e:	4605      	mov	r5, r0
1000d570:	d10e      	bne.n	1000d590 <ai_platform_network_post_init+0x2c>
1000d572:	f7ff fc79 	bl	1000ce68 <_ai_platform_acquire_crc>
1000d576:	4a22      	ldr	r2, [pc, #136]	; (1000d600 <ai_platform_network_post_init+0x9c>)
1000d578:	2301      	movs	r3, #1
1000d57a:	6093      	str	r3, [r2, #8]
1000d57c:	6893      	ldr	r3, [r2, #8]
1000d57e:	2b00      	cmp	r3, #0
1000d580:	d1fc      	bne.n	1000d57c <ai_platform_network_post_init+0x18>
1000d582:	4b20      	ldr	r3, [pc, #128]	; (1000d604 <ai_platform_network_post_init+0xa0>)
1000d584:	6013      	str	r3, [r2, #0]
1000d586:	6812      	ldr	r2, [r2, #0]
1000d588:	4b1f      	ldr	r3, [pc, #124]	; (1000d608 <ai_platform_network_post_init+0xa4>)
1000d58a:	429a      	cmp	r2, r3
1000d58c:	d013      	beq.n	1000d5b6 <ai_platform_network_post_init+0x52>
1000d58e:	e7fe      	b.n	1000d58e <ai_platform_network_post_init+0x2a>
1000d590:	f7ff fc6a 	bl	1000ce68 <_ai_platform_acquire_crc>
1000d594:	4b1a      	ldr	r3, [pc, #104]	; (1000d600 <ai_platform_network_post_init+0x9c>)
1000d596:	2201      	movs	r2, #1
1000d598:	609a      	str	r2, [r3, #8]
1000d59a:	689c      	ldr	r4, [r3, #8]
1000d59c:	2c00      	cmp	r4, #0
1000d59e:	d1fc      	bne.n	1000d59a <ai_platform_network_post_init+0x36>
1000d5a0:	4a18      	ldr	r2, [pc, #96]	; (1000d604 <ai_platform_network_post_init+0xa0>)
1000d5a2:	601a      	str	r2, [r3, #0]
1000d5a4:	681a      	ldr	r2, [r3, #0]
1000d5a6:	4b18      	ldr	r3, [pc, #96]	; (1000d608 <ai_platform_network_post_init+0xa4>)
1000d5a8:	429a      	cmp	r2, r3
1000d5aa:	d000      	beq.n	1000d5ae <ai_platform_network_post_init+0x4a>
1000d5ac:	e7fe      	b.n	1000d5ac <ai_platform_network_post_init+0x48>
1000d5ae:	f7ff fc5d 	bl	1000ce6c <_ai_platform_release_crc>
1000d5b2:	4620      	mov	r0, r4
1000d5b4:	bd38      	pop	{r3, r4, r5, pc}
1000d5b6:	f7ff fc59 	bl	1000ce6c <_ai_platform_release_crc>
1000d5ba:	68eb      	ldr	r3, [r5, #12]
1000d5bc:	f013 0402 	ands.w	r4, r3, #2
1000d5c0:	d014      	beq.n	1000d5ec <ai_platform_network_post_init+0x88>
1000d5c2:	4628      	mov	r0, r5
1000d5c4:	f000 fad0 	bl	1000db68 <ai_layers_post_init_all>
1000d5c8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
1000d5ca:	b16b      	cbz	r3, 1000d5e8 <ai_platform_network_post_init+0x84>
1000d5cc:	6b6c      	ldr	r4, [r5, #52]	; 0x34
1000d5ce:	e007      	b.n	1000d5e0 <ai_platform_network_post_init+0x7c>
1000d5d0:	e9d5 320f 	ldrd	r3, r2, [r5, #60]	; 0x3c
1000d5d4:	4798      	blx	r3
1000d5d6:	6923      	ldr	r3, [r4, #16]
1000d5d8:	42a3      	cmp	r3, r4
1000d5da:	d005      	beq.n	1000d5e8 <ai_platform_network_post_init+0x84>
1000d5dc:	b123      	cbz	r3, 1000d5e8 <ai_platform_network_post_init+0x84>
1000d5de:	461c      	mov	r4, r3
1000d5e0:	4621      	mov	r1, r4
1000d5e2:	2000      	movs	r0, #0
1000d5e4:	2c00      	cmp	r4, #0
1000d5e6:	d1f3      	bne.n	1000d5d0 <ai_platform_network_post_init+0x6c>
1000d5e8:	2001      	movs	r0, #1
1000d5ea:	bd38      	pop	{r3, r4, r5, pc}
1000d5ec:	2210      	movs	r2, #16
1000d5ee:	2111      	movs	r1, #17
1000d5f0:	18a8      	adds	r0, r5, r2
1000d5f2:	f000 fa75 	bl	1000dae0 <core_set_error>
1000d5f6:	4620      	mov	r0, r4
1000d5f8:	bd38      	pop	{r3, r4, r5, pc}
1000d5fa:	bf00      	nop
1000d5fc:	a1c00100 	.word	0xa1c00100
1000d600:	4c004000 	.word	0x4c004000
1000d604:	f407a5c2 	.word	0xf407a5c2
1000d608:	b5e8b5cd 	.word	0xb5e8b5cd

1000d60c <ai_platform_network_process>:
1000d60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000d610:	460f      	mov	r7, r1
1000d612:	b083      	sub	sp, #12
1000d614:	4690      	mov	r8, r2
1000d616:	4605      	mov	r5, r0
1000d618:	b120      	cbz	r0, 1000d624 <ai_platform_network_process+0x18>
1000d61a:	4bb4      	ldr	r3, [pc, #720]	; (1000d8ec <ai_platform_network_process+0x2e0>)
1000d61c:	6802      	ldr	r2, [r0, #0]
1000d61e:	429a      	cmp	r2, r3
1000d620:	bf18      	it	ne
1000d622:	2500      	movne	r5, #0
1000d624:	f7ff fc20 	bl	1000ce68 <_ai_platform_acquire_crc>
1000d628:	4bb1      	ldr	r3, [pc, #708]	; (1000d8f0 <ai_platform_network_process+0x2e4>)
1000d62a:	2201      	movs	r2, #1
1000d62c:	609a      	str	r2, [r3, #8]
1000d62e:	689c      	ldr	r4, [r3, #8]
1000d630:	2c00      	cmp	r4, #0
1000d632:	d1fc      	bne.n	1000d62e <ai_platform_network_process+0x22>
1000d634:	4aaf      	ldr	r2, [pc, #700]	; (1000d8f4 <ai_platform_network_process+0x2e8>)
1000d636:	601a      	str	r2, [r3, #0]
1000d638:	681a      	ldr	r2, [r3, #0]
1000d63a:	4baf      	ldr	r3, [pc, #700]	; (1000d8f8 <ai_platform_network_process+0x2ec>)
1000d63c:	429a      	cmp	r2, r3
1000d63e:	d000      	beq.n	1000d642 <ai_platform_network_process+0x36>
1000d640:	e7fe      	b.n	1000d640 <ai_platform_network_process+0x34>
1000d642:	f7ff fc13 	bl	1000ce6c <_ai_platform_release_crc>
1000d646:	2d00      	cmp	r5, #0
1000d648:	f000 8145 	beq.w	1000d8d6 <ai_platform_network_process+0x2ca>
1000d64c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
1000d64e:	b98b      	cbnz	r3, 1000d674 <ai_platform_network_process+0x68>
1000d650:	68ea      	ldr	r2, [r5, #12]
1000d652:	616b      	str	r3, [r5, #20]
1000d654:	f002 0203 	and.w	r2, r2, #3
1000d658:	2a03      	cmp	r2, #3
1000d65a:	f040 8134 	bne.w	1000d8c6 <ai_platform_network_process+0x2ba>
1000d65e:	2217      	movs	r2, #23
1000d660:	2112      	movs	r1, #18
1000d662:	f105 0010 	add.w	r0, r5, #16
1000d666:	f000 fa3b 	bl	1000dae0 <core_set_error>
1000d66a:	2600      	movs	r6, #0
1000d66c:	4630      	mov	r0, r6
1000d66e:	b003      	add	sp, #12
1000d670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000d674:	68eb      	ldr	r3, [r5, #12]
1000d676:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
1000d67a:	616c      	str	r4, [r5, #20]
1000d67c:	f003 0303 	and.w	r3, r3, #3
1000d680:	2b03      	cmp	r3, #3
1000d682:	f040 8120 	bne.w	1000d8c6 <ai_platform_network_process+0x2ba>
1000d686:	2f00      	cmp	r7, #0
1000d688:	d0e9      	beq.n	1000d65e <ai_platform_network_process+0x52>
1000d68a:	f1ba 0f00 	cmp.w	sl, #0
1000d68e:	d0e6      	beq.n	1000d65e <ai_platform_network_process+0x52>
1000d690:	f8ba 3000 	ldrh.w	r3, [sl]
1000d694:	2b00      	cmp	r3, #0
1000d696:	d0e2      	beq.n	1000d65e <ai_platform_network_process+0x52>
1000d698:	69bb      	ldr	r3, [r7, #24]
1000d69a:	681b      	ldr	r3, [r3, #0]
1000d69c:	9300      	str	r3, [sp, #0]
1000d69e:	f8da 3004 	ldr.w	r3, [sl, #4]
1000d6a2:	2b00      	cmp	r3, #0
1000d6a4:	d075      	beq.n	1000d792 <ai_platform_network_process+0x186>
1000d6a6:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
1000d6aa:	2e00      	cmp	r6, #0
1000d6ac:	d071      	beq.n	1000d792 <ai_platform_network_process+0x186>
1000d6ae:	f8da 3008 	ldr.w	r3, [sl, #8]
1000d6b2:	f8d3 b000 	ldr.w	fp, [r3]
1000d6b6:	0123      	lsls	r3, r4, #4
1000d6b8:	eb1b 1904 	adds.w	r9, fp, r4, lsl #4
1000d6bc:	9301      	str	r3, [sp, #4]
1000d6be:	d0ce      	beq.n	1000d65e <ai_platform_network_process+0x52>
1000d6c0:	69b3      	ldr	r3, [r6, #24]
1000d6c2:	2101      	movs	r1, #1
1000d6c4:	685b      	ldr	r3, [r3, #4]
1000d6c6:	9301      	str	r3, [sp, #4]
1000d6c8:	4638      	mov	r0, r7
1000d6ca:	f7ff fb7f 	bl	1000cdcc <ai_buffer_get_size>
1000d6ce:	9b01      	ldr	r3, [sp, #4]
1000d6d0:	4283      	cmp	r3, r0
1000d6d2:	f0c0 8102 	bcc.w	1000d8da <ai_platform_network_process+0x2ce>
1000d6d6:	68f0      	ldr	r0, [r6, #12]
1000d6d8:	69b9      	ldr	r1, [r7, #24]
1000d6da:	68c2      	ldr	r2, [r0, #12]
1000d6dc:	68cb      	ldr	r3, [r1, #12]
1000d6de:	429a      	cmp	r2, r3
1000d6e0:	f040 80fb 	bne.w	1000d8da <ai_platform_network_process+0x2ce>
1000d6e4:	6882      	ldr	r2, [r0, #8]
1000d6e6:	688b      	ldr	r3, [r1, #8]
1000d6e8:	429a      	cmp	r2, r3
1000d6ea:	f040 80f6 	bne.w	1000d8da <ai_platform_network_process+0x2ce>
1000d6ee:	6842      	ldr	r2, [r0, #4]
1000d6f0:	684b      	ldr	r3, [r1, #4]
1000d6f2:	429a      	cmp	r2, r3
1000d6f4:	f040 80f1 	bne.w	1000d8da <ai_platform_network_process+0x2ce>
1000d6f8:	69b3      	ldr	r3, [r6, #24]
1000d6fa:	e9d3 0100 	ldrd	r0, r1, [r3]
1000d6fe:	f001 fd4d 	bl	1000f19c <ai_array_get_data_byte_size>
1000d702:	9001      	str	r0, [sp, #4]
1000d704:	4630      	mov	r0, r6
1000d706:	f001 fd61 	bl	1000f1cc <get_tensor_byte_size>
1000d70a:	9b01      	ldr	r3, [sp, #4]
1000d70c:	4283      	cmp	r3, r0
1000d70e:	f0c0 80e4 	bcc.w	1000d8da <ai_platform_network_process+0x2ce>
1000d712:	69b3      	ldr	r3, [r6, #24]
1000d714:	6818      	ldr	r0, [r3, #0]
1000d716:	f001 fcad 	bl	1000f074 <ai_array_to_buffer_fmt>
1000d71a:	683b      	ldr	r3, [r7, #0]
1000d71c:	4058      	eors	r0, r3
1000d71e:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
1000d722:	f040 81a5 	bne.w	1000da70 <ai_platform_network_process+0x464>
1000d726:	687b      	ldr	r3, [r7, #4]
1000d728:	2b00      	cmp	r3, #0
1000d72a:	f000 8199 	beq.w	1000da60 <ai_platform_network_process+0x454>
1000d72e:	69bb      	ldr	r3, [r7, #24]
1000d730:	681b      	ldr	r3, [r3, #0]
1000d732:	2b00      	cmp	r3, #0
1000d734:	f000 818c 	beq.w	1000da50 <ai_platform_network_process+0x444>
1000d738:	9a00      	ldr	r2, [sp, #0]
1000d73a:	429a      	cmp	r2, r3
1000d73c:	bf38      	it	cc
1000d73e:	461a      	movcc	r2, r3
1000d740:	4630      	mov	r0, r6
1000d742:	9200      	str	r2, [sp, #0]
1000d744:	f001 fd42 	bl	1000f1cc <get_tensor_byte_size>
1000d748:	f8c9 0008 	str.w	r0, [r9, #8]
1000d74c:	69bb      	ldr	r3, [r7, #24]
1000d74e:	681b      	ldr	r3, [r3, #0]
1000d750:	fb00 f303 	mul.w	r3, r0, r3
1000d754:	f8c9 300c 	str.w	r3, [r9, #12]
1000d758:	6879      	ldr	r1, [r7, #4]
1000d75a:	f8c9 1004 	str.w	r1, [r9, #4]
1000d75e:	0122      	lsls	r2, r4, #4
1000d760:	440b      	add	r3, r1
1000d762:	f84b 3002 	str.w	r3, [fp, r2]
1000d766:	69b0      	ldr	r0, [r6, #24]
1000d768:	6803      	ldr	r3, [r0, #0]
1000d76a:	009a      	lsls	r2, r3, #2
1000d76c:	f104 0401 	add.w	r4, r4, #1
1000d770:	f107 071c 	add.w	r7, r7, #28
1000d774:	f100 80a1 	bmi.w	1000d8ba <ai_platform_network_process+0x2ae>
1000d778:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
1000d77c:	1a9b      	subs	r3, r3, r2
1000d77e:	4419      	add	r1, r3
1000d780:	6081      	str	r1, [r0, #8]
1000d782:	69b3      	ldr	r3, [r6, #24]
1000d784:	f8d9 2004 	ldr.w	r2, [r9, #4]
1000d788:	60da      	str	r2, [r3, #12]
1000d78a:	f8ba 3000 	ldrh.w	r3, [sl]
1000d78e:	42a3      	cmp	r3, r4
1000d790:	d885      	bhi.n	1000d69e <ai_platform_network_process+0x92>
1000d792:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
1000d794:	f1b8 0f00 	cmp.w	r8, #0
1000d798:	f000 8172 	beq.w	1000da80 <ai_platform_network_process+0x474>
1000d79c:	2b01      	cmp	r3, #1
1000d79e:	f240 814f 	bls.w	1000da40 <ai_platform_network_process+0x434>
1000d7a2:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
1000d7a6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
1000d7aa:	2b00      	cmp	r3, #0
1000d7ac:	f000 8148 	beq.w	1000da40 <ai_platform_network_process+0x434>
1000d7b0:	2400      	movs	r4, #0
1000d7b2:	462e      	mov	r6, r5
1000d7b4:	f8da 3010 	ldr.w	r3, [sl, #16]
1000d7b8:	2b00      	cmp	r3, #0
1000d7ba:	f000 80a4 	beq.w	1000d906 <ai_platform_network_process+0x2fa>
1000d7be:	f853 7024 	ldr.w	r7, [r3, r4, lsl #2]
1000d7c2:	2f00      	cmp	r7, #0
1000d7c4:	f000 809f 	beq.w	1000d906 <ai_platform_network_process+0x2fa>
1000d7c8:	f8da 3014 	ldr.w	r3, [sl, #20]
1000d7cc:	f8d3 b000 	ldr.w	fp, [r3]
1000d7d0:	eb1b 1904 	adds.w	r9, fp, r4, lsl #4
1000d7d4:	ea4f 1504 	mov.w	r5, r4, lsl #4
1000d7d8:	f000 8172 	beq.w	1000dac0 <ai_platform_network_process+0x4b4>
1000d7dc:	69bb      	ldr	r3, [r7, #24]
1000d7de:	2101      	movs	r1, #1
1000d7e0:	685b      	ldr	r3, [r3, #4]
1000d7e2:	9301      	str	r3, [sp, #4]
1000d7e4:	4640      	mov	r0, r8
1000d7e6:	f7ff faf1 	bl	1000cdcc <ai_buffer_get_size>
1000d7ea:	9b01      	ldr	r3, [sp, #4]
1000d7ec:	4283      	cmp	r3, r0
1000d7ee:	f0c0 8126 	bcc.w	1000da3e <ai_platform_network_process+0x432>
1000d7f2:	68f8      	ldr	r0, [r7, #12]
1000d7f4:	f8d8 1018 	ldr.w	r1, [r8, #24]
1000d7f8:	68c2      	ldr	r2, [r0, #12]
1000d7fa:	68cb      	ldr	r3, [r1, #12]
1000d7fc:	429a      	cmp	r2, r3
1000d7fe:	f040 811e 	bne.w	1000da3e <ai_platform_network_process+0x432>
1000d802:	6882      	ldr	r2, [r0, #8]
1000d804:	688b      	ldr	r3, [r1, #8]
1000d806:	429a      	cmp	r2, r3
1000d808:	f040 8119 	bne.w	1000da3e <ai_platform_network_process+0x432>
1000d80c:	6842      	ldr	r2, [r0, #4]
1000d80e:	684b      	ldr	r3, [r1, #4]
1000d810:	429a      	cmp	r2, r3
1000d812:	f040 8114 	bne.w	1000da3e <ai_platform_network_process+0x432>
1000d816:	69bb      	ldr	r3, [r7, #24]
1000d818:	e9d3 0100 	ldrd	r0, r1, [r3]
1000d81c:	f001 fcbe 	bl	1000f19c <ai_array_get_data_byte_size>
1000d820:	9001      	str	r0, [sp, #4]
1000d822:	4638      	mov	r0, r7
1000d824:	f001 fcd2 	bl	1000f1cc <get_tensor_byte_size>
1000d828:	9b01      	ldr	r3, [sp, #4]
1000d82a:	4283      	cmp	r3, r0
1000d82c:	f0c0 8107 	bcc.w	1000da3e <ai_platform_network_process+0x432>
1000d830:	69bb      	ldr	r3, [r7, #24]
1000d832:	6818      	ldr	r0, [r3, #0]
1000d834:	f001 fc1e 	bl	1000f074 <ai_array_to_buffer_fmt>
1000d838:	f8d8 3000 	ldr.w	r3, [r8]
1000d83c:	4058      	eors	r0, r3
1000d83e:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
1000d842:	f040 812a 	bne.w	1000da9a <ai_platform_network_process+0x48e>
1000d846:	f8d8 3004 	ldr.w	r3, [r8, #4]
1000d84a:	2b00      	cmp	r3, #0
1000d84c:	f000 811c 	beq.w	1000da88 <ai_platform_network_process+0x47c>
1000d850:	f8d8 3018 	ldr.w	r3, [r8, #24]
1000d854:	681b      	ldr	r3, [r3, #0]
1000d856:	2b00      	cmp	r3, #0
1000d858:	f000 8127 	beq.w	1000daaa <ai_platform_network_process+0x49e>
1000d85c:	9a00      	ldr	r2, [sp, #0]
1000d85e:	429a      	cmp	r2, r3
1000d860:	bf38      	it	cc
1000d862:	461a      	movcc	r2, r3
1000d864:	4638      	mov	r0, r7
1000d866:	9200      	str	r2, [sp, #0]
1000d868:	f001 fcb0 	bl	1000f1cc <get_tensor_byte_size>
1000d86c:	f8c9 0008 	str.w	r0, [r9, #8]
1000d870:	f8d8 3018 	ldr.w	r3, [r8, #24]
1000d874:	681b      	ldr	r3, [r3, #0]
1000d876:	fb00 f303 	mul.w	r3, r0, r3
1000d87a:	f8c9 300c 	str.w	r3, [r9, #12]
1000d87e:	f8d8 1004 	ldr.w	r1, [r8, #4]
1000d882:	f8c9 1004 	str.w	r1, [r9, #4]
1000d886:	440b      	add	r3, r1
1000d888:	f84b 3005 	str.w	r3, [fp, r5]
1000d88c:	69b8      	ldr	r0, [r7, #24]
1000d88e:	6803      	ldr	r3, [r0, #0]
1000d890:	009b      	lsls	r3, r3, #2
1000d892:	f104 0401 	add.w	r4, r4, #1
1000d896:	f108 081c 	add.w	r8, r8, #28
1000d89a:	d42f      	bmi.n	1000d8fc <ai_platform_network_process+0x2f0>
1000d89c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
1000d8a0:	1a9b      	subs	r3, r3, r2
1000d8a2:	4419      	add	r1, r3
1000d8a4:	6081      	str	r1, [r0, #8]
1000d8a6:	69bb      	ldr	r3, [r7, #24]
1000d8a8:	f8d9 2004 	ldr.w	r2, [r9, #4]
1000d8ac:	60da      	str	r2, [r3, #12]
1000d8ae:	f8ba 300c 	ldrh.w	r3, [sl, #12]
1000d8b2:	429c      	cmp	r4, r3
1000d8b4:	f4ff af7e 	bcc.w	1000d7b4 <ai_platform_network_process+0x1a8>
1000d8b8:	e025      	b.n	1000d906 <ai_platform_network_process+0x2fa>
1000d8ba:	f8ba 3000 	ldrh.w	r3, [sl]
1000d8be:	429c      	cmp	r4, r3
1000d8c0:	f4ff aeed 	bcc.w	1000d69e <ai_platform_network_process+0x92>
1000d8c4:	e765      	b.n	1000d792 <ai_platform_network_process+0x186>
1000d8c6:	2230      	movs	r2, #48	; 0x30
1000d8c8:	2111      	movs	r1, #17
1000d8ca:	f105 0010 	add.w	r0, r5, #16
1000d8ce:	f000 f907 	bl	1000dae0 <core_set_error>
1000d8d2:	2600      	movs	r6, #0
1000d8d4:	e6ca      	b.n	1000d66c <ai_platform_network_process+0x60>
1000d8d6:	462e      	mov	r6, r5
1000d8d8:	e6c8      	b.n	1000d66c <ai_platform_network_process+0x60>
1000d8da:	2218      	movs	r2, #24
1000d8dc:	2112      	movs	r1, #18
1000d8de:	f105 0010 	add.w	r0, r5, #16
1000d8e2:	f000 f8fd 	bl	1000dae0 <core_set_error>
1000d8e6:	2600      	movs	r6, #0
1000d8e8:	e6c0      	b.n	1000d66c <ai_platform_network_process+0x60>
1000d8ea:	bf00      	nop
1000d8ec:	a1c00100 	.word	0xa1c00100
1000d8f0:	4c004000 	.word	0x4c004000
1000d8f4:	f407a5c2 	.word	0xf407a5c2
1000d8f8:	b5e8b5cd 	.word	0xb5e8b5cd
1000d8fc:	f8ba 300c 	ldrh.w	r3, [sl, #12]
1000d900:	429c      	cmp	r4, r3
1000d902:	f4ff af57 	bcc.w	1000d7b4 <ai_platform_network_process+0x1a8>
1000d906:	f8bd 2000 	ldrh.w	r2, [sp]
1000d90a:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
1000d90c:	82b2      	strh	r2, [r6, #20]
1000d90e:	4635      	mov	r5, r6
1000d910:	2b00      	cmp	r3, #0
1000d912:	f040 808e 	bne.w	1000da32 <ai_platform_network_process+0x426>
1000d916:	461f      	mov	r7, r3
1000d918:	461e      	mov	r6, r3
1000d91a:	8aeb      	ldrh	r3, [r5, #22]
1000d91c:	4293      	cmp	r3, r2
1000d91e:	bf38      	it	cc
1000d920:	46ab      	movcc	fp, r5
1000d922:	d23c      	bcs.n	1000d99e <ai_platform_network_process+0x392>
1000d924:	2f00      	cmp	r7, #0
1000d926:	d03f      	beq.n	1000d9a8 <ai_platform_network_process+0x39c>
1000d928:	f04f 0800 	mov.w	r8, #0
1000d92c:	e014      	b.n	1000d958 <ai_platform_network_process+0x34c>
1000d92e:	6882      	ldr	r2, [r0, #8]
1000d930:	68c5      	ldr	r5, [r0, #12]
1000d932:	6863      	ldr	r3, [r4, #4]
1000d934:	1b52      	subs	r2, r2, r5
1000d936:	4413      	add	r3, r2
1000d938:	6083      	str	r3, [r0, #8]
1000d93a:	698b      	ldr	r3, [r1, #24]
1000d93c:	6862      	ldr	r2, [r4, #4]
1000d93e:	60da      	str	r2, [r3, #12]
1000d940:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
1000d944:	f859 200a 	ldr.w	r2, [r9, sl]
1000d948:	440b      	add	r3, r1
1000d94a:	4293      	cmp	r3, r2
1000d94c:	bf24      	itt	cs
1000d94e:	68e3      	ldrcs	r3, [r4, #12]
1000d950:	1ad3      	subcs	r3, r2, r3
1000d952:	6063      	str	r3, [r4, #4]
1000d954:	f108 0801 	add.w	r8, r8, #1
1000d958:	883b      	ldrh	r3, [r7, #0]
1000d95a:	4543      	cmp	r3, r8
1000d95c:	ea4f 1a08 	mov.w	sl, r8, lsl #4
1000d960:	d922      	bls.n	1000d9a8 <ai_platform_network_process+0x39c>
1000d962:	687b      	ldr	r3, [r7, #4]
1000d964:	b303      	cbz	r3, 1000d9a8 <ai_platform_network_process+0x39c>
1000d966:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
1000d96a:	b1e9      	cbz	r1, 1000d9a8 <ai_platform_network_process+0x39c>
1000d96c:	6988      	ldr	r0, [r1, #24]
1000d96e:	68ba      	ldr	r2, [r7, #8]
1000d970:	6803      	ldr	r3, [r0, #0]
1000d972:	f8d2 9000 	ldr.w	r9, [r2]
1000d976:	009d      	lsls	r5, r3, #2
1000d978:	eb09 1408 	add.w	r4, r9, r8, lsl #4
1000d97c:	d5d7      	bpl.n	1000d92e <ai_platform_network_process+0x322>
1000d97e:	6881      	ldr	r1, [r0, #8]
1000d980:	68a2      	ldr	r2, [r4, #8]
1000d982:	6860      	ldr	r0, [r4, #4]
1000d984:	f001 faf0 	bl	1000ef68 <st_int8_copy>
1000d988:	e7da      	b.n	1000d940 <ai_platform_network_process+0x334>
1000d98a:	f8bb 3016 	ldrh.w	r3, [fp, #22]
1000d98e:	f8bb 2014 	ldrh.w	r2, [fp, #20]
1000d992:	3301      	adds	r3, #1
1000d994:	b29b      	uxth	r3, r3
1000d996:	429a      	cmp	r2, r3
1000d998:	f8ab 3016 	strh.w	r3, [fp, #22]
1000d99c:	d8c2      	bhi.n	1000d924 <ai_platform_network_process+0x318>
1000d99e:	461e      	mov	r6, r3
1000d9a0:	4630      	mov	r0, r6
1000d9a2:	b003      	add	sp, #12
1000d9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000d9a8:	4658      	mov	r0, fp
1000d9aa:	f000 f8f1 	bl	1000db90 <ai_layers_forward_all>
1000d9ae:	2e00      	cmp	r6, #0
1000d9b0:	d0eb      	beq.n	1000d98a <ai_platform_network_process+0x37e>
1000d9b2:	2400      	movs	r4, #0
1000d9b4:	e016      	b.n	1000d9e4 <ai_platform_network_process+0x3d8>
1000d9b6:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
1000d9ba:	f859 100a 	ldr.w	r1, [r9, sl]
1000d9be:	4413      	add	r3, r2
1000d9c0:	428b      	cmp	r3, r1
1000d9c2:	bf24      	itt	cs
1000d9c4:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
1000d9c8:	1acb      	subcs	r3, r1, r3
1000d9ca:	f8c8 3004 	str.w	r3, [r8, #4]
1000d9ce:	6981      	ldr	r1, [r0, #24]
1000d9d0:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
1000d9d4:	1b52      	subs	r2, r2, r5
1000d9d6:	4413      	add	r3, r2
1000d9d8:	608b      	str	r3, [r1, #8]
1000d9da:	6983      	ldr	r3, [r0, #24]
1000d9dc:	f8d8 2004 	ldr.w	r2, [r8, #4]
1000d9e0:	60da      	str	r2, [r3, #12]
1000d9e2:	3401      	adds	r4, #1
1000d9e4:	8833      	ldrh	r3, [r6, #0]
1000d9e6:	42a3      	cmp	r3, r4
1000d9e8:	d9cf      	bls.n	1000d98a <ai_platform_network_process+0x37e>
1000d9ea:	6873      	ldr	r3, [r6, #4]
1000d9ec:	2b00      	cmp	r3, #0
1000d9ee:	d0cc      	beq.n	1000d98a <ai_platform_network_process+0x37e>
1000d9f0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1000d9f4:	2800      	cmp	r0, #0
1000d9f6:	d0c8      	beq.n	1000d98a <ai_platform_network_process+0x37e>
1000d9f8:	68b2      	ldr	r2, [r6, #8]
1000d9fa:	6983      	ldr	r3, [r0, #24]
1000d9fc:	f8d2 9000 	ldr.w	r9, [r2]
1000da00:	681a      	ldr	r2, [r3, #0]
1000da02:	0092      	lsls	r2, r2, #2
1000da04:	ea4f 1a04 	mov.w	sl, r4, lsl #4
1000da08:	eb09 1804 	add.w	r8, r9, r4, lsl #4
1000da0c:	d5d3      	bpl.n	1000d9b6 <ai_platform_network_process+0x3aa>
1000da0e:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
1000da12:	6898      	ldr	r0, [r3, #8]
1000da14:	f001 faa8 	bl	1000ef68 <st_int8_copy>
1000da18:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
1000da1c:	f859 200a 	ldr.w	r2, [r9, sl]
1000da20:	440b      	add	r3, r1
1000da22:	4293      	cmp	r3, r2
1000da24:	bf24      	itt	cs
1000da26:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
1000da2a:	1ad3      	subcs	r3, r2, r3
1000da2c:	f8c8 3004 	str.w	r3, [r8, #4]
1000da30:	e7d7      	b.n	1000d9e2 <ai_platform_network_process+0x3d6>
1000da32:	2b01      	cmp	r3, #1
1000da34:	6b2f      	ldr	r7, [r5, #48]	; 0x30
1000da36:	d041      	beq.n	1000dabc <ai_platform_network_process+0x4b0>
1000da38:	f107 060c 	add.w	r6, r7, #12
1000da3c:	e76d      	b.n	1000d91a <ai_platform_network_process+0x30e>
1000da3e:	4635      	mov	r5, r6
1000da40:	2218      	movs	r2, #24
1000da42:	2113      	movs	r1, #19
1000da44:	f105 0010 	add.w	r0, r5, #16
1000da48:	f000 f84a 	bl	1000dae0 <core_set_error>
1000da4c:	2600      	movs	r6, #0
1000da4e:	e60d      	b.n	1000d66c <ai_platform_network_process+0x60>
1000da50:	4606      	mov	r6, r0
1000da52:	2221      	movs	r2, #33	; 0x21
1000da54:	2112      	movs	r1, #18
1000da56:	f105 0010 	add.w	r0, r5, #16
1000da5a:	f000 f841 	bl	1000dae0 <core_set_error>
1000da5e:	e605      	b.n	1000d66c <ai_platform_network_process+0x60>
1000da60:	4606      	mov	r6, r0
1000da62:	2217      	movs	r2, #23
1000da64:	2112      	movs	r1, #18
1000da66:	f105 0010 	add.w	r0, r5, #16
1000da6a:	f000 f839 	bl	1000dae0 <core_set_error>
1000da6e:	e5fd      	b.n	1000d66c <ai_platform_network_process+0x60>
1000da70:	2219      	movs	r2, #25
1000da72:	2112      	movs	r1, #18
1000da74:	f105 0010 	add.w	r0, r5, #16
1000da78:	f000 f832 	bl	1000dae0 <core_set_error>
1000da7c:	2600      	movs	r6, #0
1000da7e:	e5f5      	b.n	1000d66c <ai_platform_network_process+0x60>
1000da80:	f8bd 2000 	ldrh.w	r2, [sp]
1000da84:	82aa      	strh	r2, [r5, #20]
1000da86:	e743      	b.n	1000d910 <ai_platform_network_process+0x304>
1000da88:	4635      	mov	r5, r6
1000da8a:	2217      	movs	r2, #23
1000da8c:	4606      	mov	r6, r0
1000da8e:	2113      	movs	r1, #19
1000da90:	f105 0010 	add.w	r0, r5, #16
1000da94:	f000 f824 	bl	1000dae0 <core_set_error>
1000da98:	e5e8      	b.n	1000d66c <ai_platform_network_process+0x60>
1000da9a:	f106 0010 	add.w	r0, r6, #16
1000da9e:	2219      	movs	r2, #25
1000daa0:	2113      	movs	r1, #19
1000daa2:	f000 f81d 	bl	1000dae0 <core_set_error>
1000daa6:	2600      	movs	r6, #0
1000daa8:	e5e0      	b.n	1000d66c <ai_platform_network_process+0x60>
1000daaa:	4635      	mov	r5, r6
1000daac:	2221      	movs	r2, #33	; 0x21
1000daae:	4606      	mov	r6, r0
1000dab0:	2113      	movs	r1, #19
1000dab2:	f105 0010 	add.w	r0, r5, #16
1000dab6:	f000 f813 	bl	1000dae0 <core_set_error>
1000daba:	e5d7      	b.n	1000d66c <ai_platform_network_process+0x60>
1000dabc:	2600      	movs	r6, #0
1000dabe:	e72c      	b.n	1000d91a <ai_platform_network_process+0x30e>
1000dac0:	f106 0010 	add.w	r0, r6, #16
1000dac4:	2217      	movs	r2, #23
1000dac6:	2113      	movs	r1, #19
1000dac8:	f000 f80a 	bl	1000dae0 <core_set_error>
1000dacc:	464e      	mov	r6, r9
1000dace:	e5cd      	b.n	1000d66c <ai_platform_network_process+0x60>

1000dad0 <core_init>:
1000dad0:	2001      	movs	r0, #1
1000dad2:	4770      	bx	lr

1000dad4 <core_get_error>:
1000dad4:	4603      	mov	r3, r0
1000dad6:	2200      	movs	r2, #0
1000dad8:	6800      	ldr	r0, [r0, #0]
1000dada:	601a      	str	r2, [r3, #0]
1000dadc:	4770      	bx	lr
1000dade:	bf00      	nop

1000dae0 <core_set_error>:
1000dae0:	4603      	mov	r3, r0
1000dae2:	7800      	ldrb	r0, [r0, #0]
1000dae4:	b108      	cbz	r0, 1000daea <core_set_error+0xa>
1000dae6:	2000      	movs	r0, #0
1000dae8:	4770      	bx	lr
1000daea:	7019      	strb	r1, [r3, #0]
1000daec:	6819      	ldr	r1, [r3, #0]
1000daee:	f362 211f 	bfi	r1, r2, #8, #24
1000daf2:	2001      	movs	r0, #1
1000daf4:	6019      	str	r1, [r3, #0]
1000daf6:	4770      	bx	lr

1000daf8 <ai_check_custom_types>:
1000daf8:	b082      	sub	sp, #8
1000dafa:	4b13      	ldr	r3, [pc, #76]	; (1000db48 <ai_check_custom_types+0x50>)
1000dafc:	9301      	str	r3, [sp, #4]
1000dafe:	b118      	cbz	r0, 1000db08 <ai_check_custom_types+0x10>
1000db00:	7803      	ldrb	r3, [r0, #0]
1000db02:	2b03      	cmp	r3, #3
1000db04:	d002      	beq.n	1000db0c <ai_check_custom_types+0x14>
1000db06:	2000      	movs	r0, #0
1000db08:	b002      	add	sp, #8
1000db0a:	4770      	bx	lr
1000db0c:	f89d 2004 	ldrb.w	r2, [sp, #4]
1000db10:	4293      	cmp	r3, r2
1000db12:	d004      	beq.n	1000db1e <ai_check_custom_types+0x26>
1000db14:	2001      	movs	r0, #1
1000db16:	f080 0001 	eor.w	r0, r0, #1
1000db1a:	b002      	add	sp, #8
1000db1c:	4770      	bx	lr
1000db1e:	7842      	ldrb	r2, [r0, #1]
1000db20:	f89d 3005 	ldrb.w	r3, [sp, #5]
1000db24:	429a      	cmp	r2, r3
1000db26:	f100 0001 	add.w	r0, r0, #1
1000db2a:	d1f3      	bne.n	1000db14 <ai_check_custom_types+0x1c>
1000db2c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
1000db30:	f89d 3006 	ldrb.w	r3, [sp, #6]
1000db34:	429a      	cmp	r2, r3
1000db36:	d1ed      	bne.n	1000db14 <ai_check_custom_types+0x1c>
1000db38:	7842      	ldrb	r2, [r0, #1]
1000db3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
1000db3e:	429a      	cmp	r2, r3
1000db40:	d1e8      	bne.n	1000db14 <ai_check_custom_types+0x1c>
1000db42:	2000      	movs	r0, #0
1000db44:	e7e7      	b.n	1000db16 <ai_check_custom_types+0x1e>
1000db46:	bf00      	nop
1000db48:	84048403 	.word	0x84048403

1000db4c <ai_layers_init_all>:
1000db4c:	4601      	mov	r1, r0
1000db4e:	2000      	movs	r0, #0
1000db50:	6b4b      	ldr	r3, [r1, #52]	; 0x34
1000db52:	b143      	cbz	r3, 1000db66 <ai_layers_init_all+0x1a>
1000db54:	691a      	ldr	r2, [r3, #16]
1000db56:	60d9      	str	r1, [r3, #12]
1000db58:	429a      	cmp	r2, r3
1000db5a:	f100 0001 	add.w	r0, r0, #1
1000db5e:	d002      	beq.n	1000db66 <ai_layers_init_all+0x1a>
1000db60:	b10a      	cbz	r2, 1000db66 <ai_layers_init_all+0x1a>
1000db62:	4613      	mov	r3, r2
1000db64:	e7f5      	b.n	1000db52 <ai_layers_init_all+0x6>
1000db66:	4770      	bx	lr

1000db68 <ai_layers_post_init_all>:
1000db68:	b538      	push	{r3, r4, r5, lr}
1000db6a:	6b44      	ldr	r4, [r0, #52]	; 0x34
1000db6c:	2500      	movs	r5, #0
1000db6e:	b16c      	cbz	r4, 1000db8c <ai_layers_post_init_all+0x24>
1000db70:	6863      	ldr	r3, [r4, #4]
1000db72:	07db      	lsls	r3, r3, #31
1000db74:	d504      	bpl.n	1000db80 <ai_layers_post_init_all+0x18>
1000db76:	6a23      	ldr	r3, [r4, #32]
1000db78:	4620      	mov	r0, r4
1000db7a:	b10b      	cbz	r3, 1000db80 <ai_layers_post_init_all+0x18>
1000db7c:	4798      	blx	r3
1000db7e:	3501      	adds	r5, #1
1000db80:	6923      	ldr	r3, [r4, #16]
1000db82:	42a3      	cmp	r3, r4
1000db84:	d002      	beq.n	1000db8c <ai_layers_post_init_all+0x24>
1000db86:	b10b      	cbz	r3, 1000db8c <ai_layers_post_init_all+0x24>
1000db88:	461c      	mov	r4, r3
1000db8a:	e7f0      	b.n	1000db6e <ai_layers_post_init_all+0x6>
1000db8c:	4628      	mov	r0, r5
1000db8e:	bd38      	pop	{r3, r4, r5, pc}

1000db90 <ai_layers_forward_all>:
1000db90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000db94:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
1000db98:	4604      	mov	r4, r0
1000db9a:	f1b8 0f00 	cmp.w	r8, #0
1000db9e:	d02b      	beq.n	1000dbf8 <ai_layers_forward_all+0x68>
1000dba0:	6b41      	ldr	r1, [r0, #52]	; 0x34
1000dba2:	6381      	str	r1, [r0, #56]	; 0x38
1000dba4:	b321      	cbz	r1, 1000dbf0 <ai_layers_forward_all+0x60>
1000dba6:	6c02      	ldr	r2, [r0, #64]	; 0x40
1000dba8:	2001      	movs	r0, #1
1000dbaa:	47c0      	blx	r8
1000dbac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
1000dbae:	b1fe      	cbz	r6, 1000dbf0 <ai_layers_forward_all+0x60>
1000dbb0:	2700      	movs	r7, #0
1000dbb2:	4631      	mov	r1, r6
1000dbb4:	6c22      	ldr	r2, [r4, #64]	; 0x40
1000dbb6:	2002      	movs	r0, #2
1000dbb8:	47c0      	blx	r8
1000dbba:	6ba5      	ldr	r5, [r4, #56]	; 0x38
1000dbbc:	4628      	mov	r0, r5
1000dbbe:	696b      	ldr	r3, [r5, #20]
1000dbc0:	4798      	blx	r3
1000dbc2:	692e      	ldr	r6, [r5, #16]
1000dbc4:	6c22      	ldr	r2, [r4, #64]	; 0x40
1000dbc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1000dbc8:	42b5      	cmp	r5, r6
1000dbca:	f04f 0003 	mov.w	r0, #3
1000dbce:	d007      	beq.n	1000dbe0 <ai_layers_forward_all+0x50>
1000dbd0:	47c0      	blx	r8
1000dbd2:	3701      	adds	r7, #1
1000dbd4:	63a6      	str	r6, [r4, #56]	; 0x38
1000dbd6:	2e00      	cmp	r6, #0
1000dbd8:	d1eb      	bne.n	1000dbb2 <ai_layers_forward_all+0x22>
1000dbda:	4638      	mov	r0, r7
1000dbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000dbe0:	2003      	movs	r0, #3
1000dbe2:	47c0      	blx	r8
1000dbe4:	2300      	movs	r3, #0
1000dbe6:	3701      	adds	r7, #1
1000dbe8:	63a3      	str	r3, [r4, #56]	; 0x38
1000dbea:	4638      	mov	r0, r7
1000dbec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000dbf0:	2700      	movs	r7, #0
1000dbf2:	4638      	mov	r0, r7
1000dbf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000dbf8:	6b45      	ldr	r5, [r0, #52]	; 0x34
1000dbfa:	6385      	str	r5, [r0, #56]	; 0x38
1000dbfc:	2d00      	cmp	r5, #0
1000dbfe:	d0f7      	beq.n	1000dbf0 <ai_layers_forward_all+0x60>
1000dc00:	4647      	mov	r7, r8
1000dc02:	696b      	ldr	r3, [r5, #20]
1000dc04:	4628      	mov	r0, r5
1000dc06:	4798      	blx	r3
1000dc08:	462b      	mov	r3, r5
1000dc0a:	692d      	ldr	r5, [r5, #16]
1000dc0c:	429d      	cmp	r5, r3
1000dc0e:	d004      	beq.n	1000dc1a <ai_layers_forward_all+0x8a>
1000dc10:	63a5      	str	r5, [r4, #56]	; 0x38
1000dc12:	3701      	adds	r7, #1
1000dc14:	2d00      	cmp	r5, #0
1000dc16:	d1f4      	bne.n	1000dc02 <ai_layers_forward_all+0x72>
1000dc18:	e7df      	b.n	1000dbda <ai_layers_forward_all+0x4a>
1000dc1a:	2300      	movs	r3, #0
1000dc1c:	63a3      	str	r3, [r4, #56]	; 0x38
1000dc1e:	3701      	adds	r7, #1
1000dc20:	e7db      	b.n	1000dbda <ai_layers_forward_all+0x4a>
1000dc22:	bf00      	nop

1000dc24 <ai_dict_decompress_f32>:
1000dc24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1000dc28:	9d08      	ldr	r5, [sp, #32]
1000dc2a:	2b04      	cmp	r3, #4
1000dc2c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
1000dc30:	d00e      	beq.n	1000dc50 <ai_dict_decompress_f32+0x2c>
1000dc32:	2b08      	cmp	r3, #8
1000dc34:	d10a      	bne.n	1000dc4c <ai_dict_decompress_f32+0x28>
1000dc36:	42a8      	cmp	r0, r5
1000dc38:	d208      	bcs.n	1000dc4c <ai_dict_decompress_f32+0x28>
1000dc3a:	f811 3b01 	ldrb.w	r3, [r1], #1
1000dc3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
1000dc42:	681b      	ldr	r3, [r3, #0]
1000dc44:	f840 3b04 	str.w	r3, [r0], #4
1000dc48:	4285      	cmp	r5, r0
1000dc4a:	d8f6      	bhi.n	1000dc3a <ai_dict_decompress_f32+0x16>
1000dc4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1000dc50:	9b07      	ldr	r3, [sp, #28]
1000dc52:	085e      	lsrs	r6, r3, #1
1000dc54:	f003 0701 	and.w	r7, r3, #1
1000dc58:	ea4f 09c6 	mov.w	r9, r6, lsl #3
1000dc5c:	f106 38ff 	add.w	r8, r6, #4294967295
1000dc60:	42a8      	cmp	r0, r5
1000dc62:	d2f3      	bcs.n	1000dc4c <ai_dict_decompress_f32+0x28>
1000dc64:	b33e      	cbz	r6, 1000dcb6 <ai_dict_decompress_f32+0x92>
1000dc66:	f100 0e08 	add.w	lr, r0, #8
1000dc6a:	f101 3cff 	add.w	ip, r1, #4294967295
1000dc6e:	eb01 0408 	add.w	r4, r1, r8
1000dc72:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
1000dc76:	091b      	lsrs	r3, r3, #4
1000dc78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
1000dc7c:	f10e 0e08 	add.w	lr, lr, #8
1000dc80:	681b      	ldr	r3, [r3, #0]
1000dc82:	f84e 3c10 	str.w	r3, [lr, #-16]
1000dc86:	f89c 3000 	ldrb.w	r3, [ip]
1000dc8a:	f003 030f 	and.w	r3, r3, #15
1000dc8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
1000dc92:	4564      	cmp	r4, ip
1000dc94:	681b      	ldr	r3, [r3, #0]
1000dc96:	f84e 3c0c 	str.w	r3, [lr, #-12]
1000dc9a:	d1ea      	bne.n	1000dc72 <ai_dict_decompress_f32+0x4e>
1000dc9c:	4431      	add	r1, r6
1000dc9e:	4448      	add	r0, r9
1000dca0:	2f00      	cmp	r7, #0
1000dca2:	d0dd      	beq.n	1000dc60 <ai_dict_decompress_f32+0x3c>
1000dca4:	f811 3b01 	ldrb.w	r3, [r1], #1
1000dca8:	091b      	lsrs	r3, r3, #4
1000dcaa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
1000dcae:	681b      	ldr	r3, [r3, #0]
1000dcb0:	f840 3b04 	str.w	r3, [r0], #4
1000dcb4:	e7d4      	b.n	1000dc60 <ai_dict_decompress_f32+0x3c>
1000dcb6:	2f00      	cmp	r7, #0
1000dcb8:	d1f4      	bne.n	1000dca4 <ai_dict_decompress_f32+0x80>
1000dcba:	42a8      	cmp	r0, r5
1000dcbc:	d3fd      	bcc.n	1000dcba <ai_dict_decompress_f32+0x96>
1000dcbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1000dcc2:	bf00      	nop

1000dcc4 <forward_conv2d_if32of32wf32>:
1000dcc4:	6982      	ldr	r2, [r0, #24]
1000dcc6:	8813      	ldrh	r3, [r2, #0]
1000dcc8:	2b00      	cmp	r3, #0
1000dcca:	f000 8092 	beq.w	1000ddf2 <forward_conv2d_if32of32wf32+0x12e>
1000dcce:	f8d2 c004 	ldr.w	ip, [r2, #4]
1000dcd2:	f8dc 2004 	ldr.w	r2, [ip, #4]
1000dcd6:	b102      	cbz	r2, 1000dcda <forward_conv2d_if32of32wf32+0x16>
1000dcd8:	6812      	ldr	r2, [r2, #0]
1000dcda:	2b01      	cmp	r3, #1
1000dcdc:	f000 80b2 	beq.w	1000de44 <forward_conv2d_if32of32wf32+0x180>
1000dce0:	f8dc 1010 	ldr.w	r1, [ip, #16]
1000dce4:	b101      	cbz	r1, 1000dce8 <forward_conv2d_if32of32wf32+0x24>
1000dce6:	6809      	ldr	r1, [r1, #0]
1000dce8:	2b02      	cmp	r3, #2
1000dcea:	f000 8084 	beq.w	1000ddf6 <forward_conv2d_if32of32wf32+0x132>
1000dcee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000dcf2:	f8dc 601c 	ldr.w	r6, [ip, #28]
1000dcf6:	b0a1      	sub	sp, #132	; 0x84
1000dcf8:	2e00      	cmp	r6, #0
1000dcfa:	f000 809c 	beq.w	1000de36 <forward_conv2d_if32of32wf32+0x172>
1000dcfe:	f8bc 5018 	ldrh.w	r5, [ip, #24]
1000dd02:	6834      	ldr	r4, [r6, #0]
1000dd04:	2d01      	cmp	r5, #1
1000dd06:	f240 8098 	bls.w	1000de3a <forward_conv2d_if32of32wf32+0x176>
1000dd0a:	6876      	ldr	r6, [r6, #4]
1000dd0c:	f8d2 800c 	ldr.w	r8, [r2, #12]
1000dd10:	f8d1 900c 	ldr.w	r9, [r1, #12]
1000dd14:	f8d8 7004 	ldr.w	r7, [r8, #4]
1000dd18:	9713      	str	r7, [sp, #76]	; 0x4c
1000dd1a:	f8d9 7004 	ldr.w	r7, [r9, #4]
1000dd1e:	9714      	str	r7, [sp, #80]	; 0x50
1000dd20:	f8d9 700c 	ldr.w	r7, [r9, #12]
1000dd24:	9715      	str	r7, [sp, #84]	; 0x54
1000dd26:	f8d9 7008 	ldr.w	r7, [r9, #8]
1000dd2a:	9716      	str	r7, [sp, #88]	; 0x58
1000dd2c:	f8d8 700c 	ldr.w	r7, [r8, #12]
1000dd30:	6992      	ldr	r2, [r2, #24]
1000dd32:	9717      	str	r7, [sp, #92]	; 0x5c
1000dd34:	f8d8 7008 	ldr.w	r7, [r8, #8]
1000dd38:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
1000dd3c:	9718      	str	r7, [sp, #96]	; 0x60
1000dd3e:	8d07      	ldrh	r7, [r0, #40]	; 0x28
1000dd40:	f8d2 b008 	ldr.w	fp, [r2, #8]
1000dd44:	f8d4 a00c 	ldr.w	sl, [r4, #12]
1000dd48:	69a2      	ldr	r2, [r4, #24]
1000dd4a:	9719      	str	r7, [sp, #100]	; 0x64
1000dd4c:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
1000dd50:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
1000dd52:	69c0      	ldr	r0, [r0, #28]
1000dd54:	901f      	str	r0, [sp, #124]	; 0x7c
1000dd56:	f8be 0000 	ldrh.w	r0, [lr]
1000dd5a:	901b      	str	r0, [sp, #108]	; 0x6c
1000dd5c:	f8be 0004 	ldrh.w	r0, [lr, #4]
1000dd60:	901c      	str	r0, [sp, #112]	; 0x70
1000dd62:	b2a8      	uxth	r0, r5
1000dd64:	971a      	str	r7, [sp, #104]	; 0x68
1000dd66:	e9da 7801 	ldrd	r7, r8, [sl, #4]
1000dd6a:	901d      	str	r0, [sp, #116]	; 0x74
1000dd6c:	b2a0      	uxth	r0, r4
1000dd6e:	f8d2 9008 	ldr.w	r9, [r2, #8]
1000dd72:	901e      	str	r0, [sp, #120]	; 0x78
1000dd74:	b10e      	cbz	r6, 1000dd7a <forward_conv2d_if32of32wf32+0xb6>
1000dd76:	69b0      	ldr	r0, [r6, #24]
1000dd78:	6886      	ldr	r6, [r0, #8]
1000dd7a:	6989      	ldr	r1, [r1, #24]
1000dd7c:	b2a4      	uxth	r4, r4
1000dd7e:	f108 30ff 	add.w	r0, r8, #4294967295
1000dd82:	f8d1 a008 	ldr.w	sl, [r1, #8]
1000dd86:	6811      	ldr	r1, [r2, #0]
1000dd88:	b2ad      	uxth	r5, r5
1000dd8a:	3c01      	subs	r4, #1
1000dd8c:	3d01      	subs	r5, #1
1000dd8e:	fb00 8404 	mla	r4, r0, r4, r8
1000dd92:	1e78      	subs	r0, r7, #1
1000dd94:	fb00 7505 	mla	r5, r0, r5, r7
1000dd98:	f3c1 4043 	ubfx	r0, r1, #17, #4
1000dd9c:	2804      	cmp	r0, #4
1000dd9e:	d02d      	beq.n	1000ddfc <forward_conv2d_if32of32wf32+0x138>
1000dda0:	2808      	cmp	r0, #8
1000dda2:	d02b      	beq.n	1000ddfc <forward_conv2d_if32of32wf32+0x138>
1000dda4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
1000dda6:	940c      	str	r4, [sp, #48]	; 0x30
1000dda8:	e9cd 530d 	strd	r5, r3, [sp, #52]	; 0x34
1000ddac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
1000ddae:	930b      	str	r3, [sp, #44]	; 0x2c
1000ddb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
1000ddb2:	930a      	str	r3, [sp, #40]	; 0x28
1000ddb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1000ddb6:	9309      	str	r3, [sp, #36]	; 0x24
1000ddb8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
1000ddba:	9c1e      	ldr	r4, [sp, #120]	; 0x78
1000ddbc:	9706      	str	r7, [sp, #24]
1000ddbe:	e9cd 8307 	strd	r8, r3, [sp, #28]
1000ddc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
1000ddc4:	9305      	str	r3, [sp, #20]
1000ddc6:	9b16      	ldr	r3, [sp, #88]	; 0x58
1000ddc8:	9304      	str	r3, [sp, #16]
1000ddca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1000ddcc:	9303      	str	r3, [sp, #12]
1000ddce:	9b18      	ldr	r3, [sp, #96]	; 0x60
1000ddd0:	9302      	str	r3, [sp, #8]
1000ddd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
1000ddd4:	9301      	str	r3, [sp, #4]
1000ddd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1000ddd8:	9300      	str	r3, [sp, #0]
1000ddda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1000dddc:	9310      	str	r3, [sp, #64]	; 0x40
1000ddde:	464a      	mov	r2, r9
1000dde0:	4633      	mov	r3, r6
1000dde2:	4651      	mov	r1, sl
1000dde4:	4658      	mov	r0, fp
1000dde6:	940f      	str	r4, [sp, #60]	; 0x3c
1000dde8:	f000 fe38 	bl	1000ea5c <forward_lite_conv2d_if32of32wf32>
1000ddec:	b021      	add	sp, #132	; 0x84
1000ddee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000ddf2:	685b      	ldr	r3, [r3, #4]
1000ddf4:	deff      	udf	#255	; 0xff
1000ddf6:	2300      	movs	r3, #0
1000ddf8:	685b      	ldr	r3, [r3, #4]
1000ddfa:	deff      	udf	#255	; 0xff
1000ddfc:	68d2      	ldr	r2, [r2, #12]
1000ddfe:	2a00      	cmp	r2, #0
1000de00:	d0d0      	beq.n	1000dda4 <forward_conv2d_if32of32wf32+0xe0>
1000de02:	2b03      	cmp	r3, #3
1000de04:	d021      	beq.n	1000de4a <forward_conv2d_if32of32wf32+0x186>
1000de06:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
1000de0a:	b1c3      	cbz	r3, 1000de3e <forward_conv2d_if32of32wf32+0x17a>
1000de0c:	681b      	ldr	r3, [r3, #0]
1000de0e:	b1b3      	cbz	r3, 1000de3e <forward_conv2d_if32of32wf32+0x17a>
1000de10:	699b      	ldr	r3, [r3, #24]
1000de12:	e9d3 3001 	ldrd	r3, r0, [r3, #4]
1000de16:	9301      	str	r3, [sp, #4]
1000de18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1000de1a:	9300      	str	r3, [sp, #0]
1000de1c:	f3c1 13c6 	ubfx	r3, r1, #7, #7
1000de20:	f3c1 5141 	ubfx	r1, r1, #21, #2
1000de24:	410b      	asrs	r3, r1
1000de26:	b29b      	uxth	r3, r3
1000de28:	4649      	mov	r1, r9
1000de2a:	2800      	cmp	r0, #0
1000de2c:	bf18      	it	ne
1000de2e:	4681      	movne	r9, r0
1000de30:	f7ff fef8 	bl	1000dc24 <ai_dict_decompress_f32>
1000de34:	e7b6      	b.n	1000dda4 <forward_conv2d_if32of32wf32+0xe0>
1000de36:	4634      	mov	r4, r6
1000de38:	e768      	b.n	1000dd0c <forward_conv2d_if32of32wf32+0x48>
1000de3a:	2600      	movs	r6, #0
1000de3c:	e766      	b.n	1000dd0c <forward_conv2d_if32of32wf32+0x48>
1000de3e:	2300      	movs	r3, #0
1000de40:	699b      	ldr	r3, [r3, #24]
1000de42:	deff      	udf	#255	; 0xff
1000de44:	2300      	movs	r3, #0
1000de46:	685b      	ldr	r3, [r3, #4]
1000de48:	deff      	udf	#255	; 0xff
1000de4a:	2300      	movs	r3, #0
1000de4c:	685b      	ldr	r3, [r3, #4]
1000de4e:	deff      	udf	#255	; 0xff

1000de50 <forward_dense>:
1000de50:	6983      	ldr	r3, [r0, #24]
1000de52:	881a      	ldrh	r2, [r3, #0]
1000de54:	2a00      	cmp	r2, #0
1000de56:	f000 8181 	beq.w	1000e15c <forward_dense+0x30c>
1000de5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000de5e:	ed2d 8b02 	vpush	{d8}
1000de62:	f8d3 c004 	ldr.w	ip, [r3, #4]
1000de66:	f8dc 5004 	ldr.w	r5, [ip, #4]
1000de6a:	b095      	sub	sp, #84	; 0x54
1000de6c:	b105      	cbz	r5, 1000de70 <forward_dense+0x20>
1000de6e:	682d      	ldr	r5, [r5, #0]
1000de70:	2a01      	cmp	r2, #1
1000de72:	f000 828f 	beq.w	1000e394 <forward_dense+0x544>
1000de76:	f8dc 6010 	ldr.w	r6, [ip, #16]
1000de7a:	b106      	cbz	r6, 1000de7e <forward_dense+0x2e>
1000de7c:	6836      	ldr	r6, [r6, #0]
1000de7e:	2a02      	cmp	r2, #2
1000de80:	f000 816e 	beq.w	1000e160 <forward_dense+0x310>
1000de84:	f8dc 301c 	ldr.w	r3, [ip, #28]
1000de88:	930b      	str	r3, [sp, #44]	; 0x2c
1000de8a:	2b00      	cmp	r3, #0
1000de8c:	f000 8274 	beq.w	1000e378 <forward_dense+0x528>
1000de90:	4619      	mov	r1, r3
1000de92:	f8bc 3018 	ldrh.w	r3, [ip, #24]
1000de96:	6809      	ldr	r1, [r1, #0]
1000de98:	910d      	str	r1, [sp, #52]	; 0x34
1000de9a:	2b01      	cmp	r3, #1
1000de9c:	f240 826e 	bls.w	1000e37c <forward_dense+0x52c>
1000dea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000dea2:	685b      	ldr	r3, [r3, #4]
1000dea4:	930b      	str	r3, [sp, #44]	; 0x2c
1000dea6:	460b      	mov	r3, r1
1000dea8:	68e8      	ldr	r0, [r5, #12]
1000deaa:	68f7      	ldr	r7, [r6, #12]
1000deac:	6840      	ldr	r0, [r0, #4]
1000deae:	6999      	ldr	r1, [r3, #24]
1000deb0:	9013      	str	r0, [sp, #76]	; 0x4c
1000deb2:	6878      	ldr	r0, [r7, #4]
1000deb4:	680b      	ldr	r3, [r1, #0]
1000deb6:	9012      	str	r0, [sp, #72]	; 0x48
1000deb8:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
1000debc:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
1000dec0:	fb00 f404 	mul.w	r4, r0, r4
1000dec4:	f3c3 5041 	ubfx	r0, r3, #21, #2
1000dec8:	fa4e f000 	asr.w	r0, lr, r0
1000decc:	2a03      	cmp	r2, #3
1000dece:	9010      	str	r0, [sp, #64]	; 0x40
1000ded0:	f000 825d 	beq.w	1000e38e <forward_dense+0x53e>
1000ded4:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
1000ded8:	f3c3 4343 	ubfx	r3, r3, #17, #4
1000dedc:	2a00      	cmp	r2, #0
1000dede:	f000 8246 	beq.w	1000e36e <forward_dense+0x51e>
1000dee2:	6812      	ldr	r2, [r2, #0]
1000dee4:	2a00      	cmp	r2, #0
1000dee6:	f000 8242 	beq.w	1000e36e <forward_dense+0x51e>
1000deea:	2b04      	cmp	r3, #4
1000deec:	f8d2 9018 	ldr.w	r9, [r2, #24]
1000def0:	f000 822c 	beq.w	1000e34c <forward_dense+0x4fc>
1000def4:	2b08      	cmp	r3, #8
1000def6:	f000 8229 	beq.w	1000e34c <forward_dense+0x4fc>
1000defa:	f04f 0b00 	mov.w	fp, #0
1000defe:	69b2      	ldr	r2, [r6, #24]
1000df00:	69ab      	ldr	r3, [r5, #24]
1000df02:	6891      	ldr	r1, [r2, #8]
1000df04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000df06:	689b      	ldr	r3, [r3, #8]
1000df08:	6952      	ldr	r2, [r2, #20]
1000df0a:	9106      	str	r1, [sp, #24]
1000df0c:	fb07 f404 	mul.w	r4, r7, r4
1000df10:	f8d2 9004 	ldr.w	r9, [r2, #4]
1000df14:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000df16:	eb01 0084 	add.w	r0, r1, r4, lsl #2
1000df1a:	4281      	cmp	r1, r0
1000df1c:	ea4f 0482 	mov.w	r4, r2, lsl #2
1000df20:	900e      	str	r0, [sp, #56]	; 0x38
1000df22:	940c      	str	r4, [sp, #48]	; 0x30
1000df24:	eb01 0882 	add.w	r8, r1, r2, lsl #2
1000df28:	f080 8113 	bcs.w	1000e152 <forward_dense+0x302>
1000df2c:	9913      	ldr	r1, [sp, #76]	; 0x4c
1000df2e:	ed9f 8a93 	vldr	s16, [pc, #588]	; 1000e17c <forward_dense+0x32c>
1000df32:	f021 0201 	bic.w	r2, r1, #1
1000df36:	eb03 0282 	add.w	r2, r3, r2, lsl #2
1000df3a:	9204      	str	r2, [sp, #16]
1000df3c:	f001 0201 	and.w	r2, r1, #1
1000df40:	08c8      	lsrs	r0, r1, #3
1000df42:	9208      	str	r2, [sp, #32]
1000df44:	008a      	lsls	r2, r1, #2
1000df46:	f001 0a07 	and.w	sl, r1, #7
1000df4a:	920f      	str	r2, [sp, #60]	; 0x3c
1000df4c:	eb03 1240 	add.w	r2, r3, r0, lsl #5
1000df50:	3320      	adds	r3, #32
1000df52:	465c      	mov	r4, fp
1000df54:	9007      	str	r0, [sp, #28]
1000df56:	46cb      	mov	fp, r9
1000df58:	9205      	str	r2, [sp, #20]
1000df5a:	9302      	str	r3, [sp, #8]
1000df5c:	46c1      	mov	r9, r8
1000df5e:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
1000df62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000df64:	699b      	ldr	r3, [r3, #24]
1000df66:	689a      	ldr	r2, [r3, #8]
1000df68:	9b02      	ldr	r3, [sp, #8]
1000df6a:	3b20      	subs	r3, #32
1000df6c:	930a      	str	r3, [sp, #40]	; 0x28
1000df6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000df70:	b10b      	cbz	r3, 1000df76 <forward_dense+0x126>
1000df72:	699b      	ldr	r3, [r3, #24]
1000df74:	689b      	ldr	r3, [r3, #8]
1000df76:	2c00      	cmp	r4, #0
1000df78:	f000 81da 	beq.w	1000e330 <forward_dense+0x4e0>
1000df7c:	9910      	ldr	r1, [sp, #64]	; 0x40
1000df7e:	2904      	cmp	r1, #4
1000df80:	9906      	ldr	r1, [sp, #24]
1000df82:	f000 80fd 	beq.w	1000e180 <forward_dense+0x330>
1000df86:	4549      	cmp	r1, r9
1000df88:	f080 80d2 	bcs.w	1000e130 <forward_dense+0x2e0>
1000df8c:	460f      	mov	r7, r1
1000df8e:	9907      	ldr	r1, [sp, #28]
1000df90:	f8dd 8008 	ldr.w	r8, [sp, #8]
1000df94:	f8dd a014 	ldr.w	sl, [sp, #20]
1000df98:	1c4e      	adds	r6, r1, #1
1000df9a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
1000df9e:	4694      	mov	ip, r2
1000dfa0:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000dfa2:	468e      	mov	lr, r1
1000dfa4:	2b00      	cmp	r3, #0
1000dfa6:	f000 80de 	beq.w	1000e166 <forward_dense+0x316>
1000dfaa:	ecf3 2a01 	vldmia	r3!, {s5}
1000dfae:	ed9f 7a73 	vldr	s14, [pc, #460]	; 1000e17c <forward_dense+0x32c>
1000dfb2:	f1be 0f00 	cmp.w	lr, #0
1000dfb6:	f000 80de 	beq.w	1000e176 <forward_dense+0x326>
1000dfba:	f10c 0108 	add.w	r1, ip, #8
1000dfbe:	4640      	mov	r0, r8
1000dfc0:	f811 5c07 	ldrb.w	r5, [r1, #-7]
1000dfc4:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
1000dfc8:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
1000dfcc:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
1000dfd0:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
1000dfd4:	ed10 5a04 	vldr	s10, [r0, #-16]
1000dfd8:	ed50 5a03 	vldr	s11, [r0, #-12]
1000dfdc:	ed10 6a02 	vldr	s12, [r0, #-8]
1000dfe0:	ed50 6a01 	vldr	s13, [r0, #-4]
1000dfe4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000dfe8:	edd5 7a00 	vldr	s15, [r5]
1000dfec:	f811 5c08 	ldrb.w	r5, [r1, #-8]
1000dff0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000dff4:	ee67 7a83 	vmul.f32	s15, s15, s6
1000dff8:	ed95 3a00 	vldr	s6, [r5]
1000dffc:	f811 5c06 	ldrb.w	r5, [r1, #-6]
1000e000:	eee3 7a23 	vfma.f32	s15, s6, s7
1000e004:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e008:	3108      	adds	r1, #8
1000e00a:	edd5 3a00 	vldr	s7, [r5]
1000e00e:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
1000e012:	eee3 7a84 	vfma.f32	s15, s7, s8
1000e016:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e01a:	3020      	adds	r0, #32
1000e01c:	ed95 4a00 	vldr	s8, [r5]
1000e020:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
1000e024:	eee4 7a24 	vfma.f32	s15, s8, s9
1000e028:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e02c:	edd5 4a00 	vldr	s9, [r5]
1000e030:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
1000e034:	eee4 7a85 	vfma.f32	s15, s9, s10
1000e038:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e03c:	ed95 5a00 	vldr	s10, [r5]
1000e040:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
1000e044:	eee5 7a25 	vfma.f32	s15, s10, s11
1000e048:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e04c:	edd5 5a00 	vldr	s11, [r5]
1000e050:	f811 5c09 	ldrb.w	r5, [r1, #-9]
1000e054:	eee5 7a86 	vfma.f32	s15, s11, s12
1000e058:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e05c:	428e      	cmp	r6, r1
1000e05e:	ed95 6a00 	vldr	s12, [r5]
1000e062:	eee6 7a26 	vfma.f32	s15, s12, s13
1000e066:	ee37 7a27 	vadd.f32	s14, s14, s15
1000e06a:	d1a9      	bne.n	1000dfc0 <forward_dense+0x170>
1000e06c:	f1a6 0108 	sub.w	r1, r6, #8
1000e070:	4650      	mov	r0, sl
1000e072:	2a00      	cmp	r2, #0
1000e074:	d04a      	beq.n	1000e10c <forward_dense+0x2bc>
1000e076:	780d      	ldrb	r5, [r1, #0]
1000e078:	edd0 6a00 	vldr	s13, [r0]
1000e07c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e080:	edd5 7a00 	vldr	s15, [r5]
1000e084:	2a01      	cmp	r2, #1
1000e086:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e08a:	d03f      	beq.n	1000e10c <forward_dense+0x2bc>
1000e08c:	784d      	ldrb	r5, [r1, #1]
1000e08e:	edd0 6a01 	vldr	s13, [r0, #4]
1000e092:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e096:	edd5 7a00 	vldr	s15, [r5]
1000e09a:	2a02      	cmp	r2, #2
1000e09c:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e0a0:	d034      	beq.n	1000e10c <forward_dense+0x2bc>
1000e0a2:	788d      	ldrb	r5, [r1, #2]
1000e0a4:	edd0 6a02 	vldr	s13, [r0, #8]
1000e0a8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e0ac:	edd5 7a00 	vldr	s15, [r5]
1000e0b0:	2a03      	cmp	r2, #3
1000e0b2:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e0b6:	d029      	beq.n	1000e10c <forward_dense+0x2bc>
1000e0b8:	78cd      	ldrb	r5, [r1, #3]
1000e0ba:	edd0 6a03 	vldr	s13, [r0, #12]
1000e0be:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e0c2:	edd5 7a00 	vldr	s15, [r5]
1000e0c6:	2a04      	cmp	r2, #4
1000e0c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e0cc:	d01e      	beq.n	1000e10c <forward_dense+0x2bc>
1000e0ce:	790d      	ldrb	r5, [r1, #4]
1000e0d0:	edd0 6a04 	vldr	s13, [r0, #16]
1000e0d4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e0d8:	edd5 7a00 	vldr	s15, [r5]
1000e0dc:	2a05      	cmp	r2, #5
1000e0de:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e0e2:	d013      	beq.n	1000e10c <forward_dense+0x2bc>
1000e0e4:	794d      	ldrb	r5, [r1, #5]
1000e0e6:	edd0 6a05 	vldr	s13, [r0, #20]
1000e0ea:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e0ee:	edd5 7a00 	vldr	s15, [r5]
1000e0f2:	2a06      	cmp	r2, #6
1000e0f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e0f8:	d008      	beq.n	1000e10c <forward_dense+0x2bc>
1000e0fa:	7989      	ldrb	r1, [r1, #6]
1000e0fc:	edd0 7a06 	vldr	s15, [r0, #24]
1000e100:	eb04 0181 	add.w	r1, r4, r1, lsl #2
1000e104:	edd1 6a00 	vldr	s13, [r1]
1000e108:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e10c:	44dc      	add	ip, fp
1000e10e:	445e      	add	r6, fp
1000e110:	ee32 7a87 	vadd.f32	s14, s5, s14
1000e114:	eca7 7a01 	vstmia	r7!, {s14}
1000e118:	454f      	cmp	r7, r9
1000e11a:	f4ff af43 	bcc.w	1000dfa4 <forward_dense+0x154>
1000e11e:	9a06      	ldr	r2, [sp, #24]
1000e120:	eba9 0302 	sub.w	r3, r9, r2
1000e124:	3b01      	subs	r3, #1
1000e126:	f023 0303 	bic.w	r3, r3, #3
1000e12a:	3304      	adds	r3, #4
1000e12c:	18d3      	adds	r3, r2, r3
1000e12e:	9306      	str	r3, [sp, #24]
1000e130:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000e132:	9a05      	ldr	r2, [sp, #20]
1000e134:	4499      	add	r9, r3
1000e136:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000e138:	441a      	add	r2, r3
1000e13a:	9205      	str	r2, [sp, #20]
1000e13c:	9a02      	ldr	r2, [sp, #8]
1000e13e:	441a      	add	r2, r3
1000e140:	9202      	str	r2, [sp, #8]
1000e142:	9a04      	ldr	r2, [sp, #16]
1000e144:	441a      	add	r2, r3
1000e146:	9204      	str	r2, [sp, #16]
1000e148:	9b06      	ldr	r3, [sp, #24]
1000e14a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000e14c:	4293      	cmp	r3, r2
1000e14e:	f4ff af08 	bcc.w	1000df62 <forward_dense+0x112>
1000e152:	b015      	add	sp, #84	; 0x54
1000e154:	ecbd 8b02 	vpop	{d8}
1000e158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000e15c:	6853      	ldr	r3, [r2, #4]
1000e15e:	deff      	udf	#255	; 0xff
1000e160:	2300      	movs	r3, #0
1000e162:	685b      	ldr	r3, [r3, #4]
1000e164:	deff      	udf	#255	; 0xff
1000e166:	ed9f 7a05 	vldr	s14, [pc, #20]	; 1000e17c <forward_dense+0x32c>
1000e16a:	eef0 2a48 	vmov.f32	s5, s16
1000e16e:	f1be 0f00 	cmp.w	lr, #0
1000e172:	f47f af22 	bne.w	1000dfba <forward_dense+0x16a>
1000e176:	980a      	ldr	r0, [sp, #40]	; 0x28
1000e178:	4661      	mov	r1, ip
1000e17a:	e77a      	b.n	1000e072 <forward_dense+0x222>
1000e17c:	00000000 	.word	0x00000000
1000e180:	4549      	cmp	r1, r9
1000e182:	d2d5      	bcs.n	1000e130 <forward_dense+0x2e0>
1000e184:	9807      	ldr	r0, [sp, #28]
1000e186:	9103      	str	r1, [sp, #12]
1000e188:	9904      	ldr	r1, [sp, #16]
1000e18a:	f100 0c01 	add.w	ip, r0, #1
1000e18e:	3901      	subs	r1, #1
1000e190:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
1000e194:	9109      	str	r1, [sp, #36]	; 0x24
1000e196:	2b00      	cmp	r3, #0
1000e198:	f000 80b2 	beq.w	1000e300 <forward_dense+0x4b0>
1000e19c:	9907      	ldr	r1, [sp, #28]
1000e19e:	ecf3 2a01 	vldmia	r3!, {s5}
1000e1a2:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 1000e17c <forward_dense+0x32c>
1000e1a6:	2900      	cmp	r1, #0
1000e1a8:	f000 80b2 	beq.w	1000e310 <forward_dense+0x4c0>
1000e1ac:	9902      	ldr	r1, [sp, #8]
1000e1ae:	1d10      	adds	r0, r2, #4
1000e1b0:	f810 6c04 	ldrb.w	r6, [r0, #-4]
1000e1b4:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
1000e1b8:	f810 5c03 	ldrb.w	r5, [r0, #-3]
1000e1bc:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
1000e1c0:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
1000e1c4:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
1000e1c8:	ed11 5a04 	vldr	s10, [r1, #-16]
1000e1cc:	ed51 5a03 	vldr	s11, [r1, #-12]
1000e1d0:	ed11 6a02 	vldr	s12, [r1, #-8]
1000e1d4:	ed51 6a01 	vldr	s13, [r1, #-4]
1000e1d8:	f006 070f 	and.w	r7, r6, #15
1000e1dc:	eb04 0787 	add.w	r7, r4, r7, lsl #2
1000e1e0:	edd7 7a00 	vldr	s15, [r7]
1000e1e4:	0936      	lsrs	r6, r6, #4
1000e1e6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
1000e1ea:	ed96 3a00 	vldr	s6, [r6]
1000e1ee:	ee67 7a82 	vmul.f32	s15, s15, s4
1000e1f2:	092e      	lsrs	r6, r5, #4
1000e1f4:	eee3 7a23 	vfma.f32	s15, s6, s7
1000e1f8:	eb04 0686 	add.w	r6, r4, r6, lsl #2
1000e1fc:	f005 050f 	and.w	r5, r5, #15
1000e200:	edd6 3a00 	vldr	s7, [r6]
1000e204:	f810 6c02 	ldrb.w	r6, [r0, #-2]
1000e208:	eee3 7a84 	vfma.f32	s15, s7, s8
1000e20c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e210:	0937      	lsrs	r7, r6, #4
1000e212:	ed95 4a00 	vldr	s8, [r5]
1000e216:	f810 5c01 	ldrb.w	r5, [r0, #-1]
1000e21a:	eee4 7a24 	vfma.f32	s15, s8, s9
1000e21e:	eb04 0787 	add.w	r7, r4, r7, lsl #2
1000e222:	f006 060f 	and.w	r6, r6, #15
1000e226:	edd7 4a00 	vldr	s9, [r7]
1000e22a:	eee4 7a85 	vfma.f32	s15, s9, s10
1000e22e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
1000e232:	3004      	adds	r0, #4
1000e234:	ed96 5a00 	vldr	s10, [r6]
1000e238:	092e      	lsrs	r6, r5, #4
1000e23a:	eee5 7a25 	vfma.f32	s15, s10, s11
1000e23e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
1000e242:	f005 050f 	and.w	r5, r5, #15
1000e246:	edd6 5a00 	vldr	s11, [r6]
1000e24a:	eee5 7a86 	vfma.f32	s15, s11, s12
1000e24e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e252:	4584      	cmp	ip, r0
1000e254:	ed95 6a00 	vldr	s12, [r5]
1000e258:	eee6 7a26 	vfma.f32	s15, s12, s13
1000e25c:	f101 0120 	add.w	r1, r1, #32
1000e260:	ee37 7a27 	vadd.f32	s14, s14, s15
1000e264:	d1a4      	bne.n	1000e1b0 <forward_dense+0x360>
1000e266:	f8dd e014 	ldr.w	lr, [sp, #20]
1000e26a:	f1ac 0804 	sub.w	r8, ip, #4
1000e26e:	9904      	ldr	r1, [sp, #16]
1000e270:	458e      	cmp	lr, r1
1000e272:	d22a      	bcs.n	1000e2ca <forward_dense+0x47a>
1000e274:	9909      	ldr	r1, [sp, #36]	; 0x24
1000e276:	eba1 070e 	sub.w	r7, r1, lr
1000e27a:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
1000e27e:	f10e 0008 	add.w	r0, lr, #8
1000e282:	f108 36ff 	add.w	r6, r8, #4294967295
1000e286:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
1000e28a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1000e28e:	ed50 5a01 	vldr	s11, [r0, #-4]
1000e292:	ed50 6a02 	vldr	s13, [r0, #-8]
1000e296:	f001 050f 	and.w	r5, r1, #15
1000e29a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
1000e29e:	edd5 7a00 	vldr	s15, [r5]
1000e2a2:	0909      	lsrs	r1, r1, #4
1000e2a4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
1000e2a8:	ed91 6a00 	vldr	s12, [r1]
1000e2ac:	ee67 7aa5 	vmul.f32	s15, s15, s11
1000e2b0:	42b7      	cmp	r7, r6
1000e2b2:	eee6 7a26 	vfma.f32	s15, s12, s13
1000e2b6:	f100 0008 	add.w	r0, r0, #8
1000e2ba:	ee37 7a27 	vadd.f32	s14, s14, s15
1000e2be:	d1e4      	bne.n	1000e28a <forward_dense+0x43a>
1000e2c0:	f10a 0a01 	add.w	sl, sl, #1
1000e2c4:	44d0      	add	r8, sl
1000e2c6:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
1000e2ca:	9908      	ldr	r1, [sp, #32]
1000e2cc:	b321      	cbz	r1, 1000e318 <forward_dense+0x4c8>
1000e2ce:	f898 1000 	ldrb.w	r1, [r8]
1000e2d2:	edde 7a00 	vldr	s15, [lr]
1000e2d6:	0909      	lsrs	r1, r1, #4
1000e2d8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
1000e2dc:	edd1 6a00 	vldr	s13, [r1]
1000e2e0:	9903      	ldr	r1, [sp, #12]
1000e2e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e2e6:	445a      	add	r2, fp
1000e2e8:	44dc      	add	ip, fp
1000e2ea:	ee72 2a87 	vadd.f32	s5, s5, s14
1000e2ee:	ece1 2a01 	vstmia	r1!, {s5}
1000e2f2:	4589      	cmp	r9, r1
1000e2f4:	9103      	str	r1, [sp, #12]
1000e2f6:	f67f af12 	bls.w	1000e11e <forward_dense+0x2ce>
1000e2fa:	2b00      	cmp	r3, #0
1000e2fc:	f47f af4e 	bne.w	1000e19c <forward_dense+0x34c>
1000e300:	9907      	ldr	r1, [sp, #28]
1000e302:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 1000e17c <forward_dense+0x32c>
1000e306:	eef0 2a48 	vmov.f32	s5, s16
1000e30a:	2900      	cmp	r1, #0
1000e30c:	f47f af4e 	bne.w	1000e1ac <forward_dense+0x35c>
1000e310:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
1000e314:	4690      	mov	r8, r2
1000e316:	e7aa      	b.n	1000e26e <forward_dense+0x41e>
1000e318:	9903      	ldr	r1, [sp, #12]
1000e31a:	ee32 7a87 	vadd.f32	s14, s5, s14
1000e31e:	445a      	add	r2, fp
1000e320:	eca1 7a01 	vstmia	r1!, {s14}
1000e324:	4549      	cmp	r1, r9
1000e326:	9103      	str	r1, [sp, #12]
1000e328:	44dc      	add	ip, fp
1000e32a:	f4ff af34 	bcc.w	1000e196 <forward_dense+0x346>
1000e32e:	e6f6      	b.n	1000e11e <forward_dense+0x2ce>
1000e330:	9912      	ldr	r1, [sp, #72]	; 0x48
1000e332:	9d06      	ldr	r5, [sp, #24]
1000e334:	9101      	str	r1, [sp, #4]
1000e336:	9913      	ldr	r1, [sp, #76]	; 0x4c
1000e338:	9100      	str	r1, [sp, #0]
1000e33a:	4628      	mov	r0, r5
1000e33c:	990a      	ldr	r1, [sp, #40]	; 0x28
1000e33e:	f000 fcef 	bl	1000ed20 <forward_lite_dense_if32of32wf32>
1000e342:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000e344:	462b      	mov	r3, r5
1000e346:	4413      	add	r3, r2
1000e348:	9306      	str	r3, [sp, #24]
1000e34a:	e6f1      	b.n	1000e130 <forward_dense+0x2e0>
1000e34c:	f8d1 800c 	ldr.w	r8, [r1, #12]
1000e350:	f1b9 0f00 	cmp.w	r9, #0
1000e354:	d016      	beq.n	1000e384 <forward_dense+0x534>
1000e356:	e9d9 0100 	ldrd	r0, r1, [r9]
1000e35a:	f000 fef7 	bl	1000f14c <ai_array_get_byte_size>
1000e35e:	f8d9 b00c 	ldr.w	fp, [r9, #12]
1000e362:	4602      	mov	r2, r0
1000e364:	4659      	mov	r1, fp
1000e366:	4640      	mov	r0, r8
1000e368:	f000 fdfe 	bl	1000ef68 <st_int8_copy>
1000e36c:	e5c7      	b.n	1000defe <forward_dense+0xae>
1000e36e:	2b04      	cmp	r3, #4
1000e370:	d00a      	beq.n	1000e388 <forward_dense+0x538>
1000e372:	f04f 0900 	mov.w	r9, #0
1000e376:	e5bd      	b.n	1000def4 <forward_dense+0xa4>
1000e378:	930d      	str	r3, [sp, #52]	; 0x34
1000e37a:	e595      	b.n	1000dea8 <forward_dense+0x58>
1000e37c:	2300      	movs	r3, #0
1000e37e:	930b      	str	r3, [sp, #44]	; 0x2c
1000e380:	460b      	mov	r3, r1
1000e382:	e591      	b.n	1000dea8 <forward_dense+0x58>
1000e384:	46c3      	mov	fp, r8
1000e386:	e5ba      	b.n	1000defe <forward_dense+0xae>
1000e388:	f8d1 b00c 	ldr.w	fp, [r1, #12]
1000e38c:	e5b7      	b.n	1000defe <forward_dense+0xae>
1000e38e:	2300      	movs	r3, #0
1000e390:	685b      	ldr	r3, [r3, #4]
1000e392:	deff      	udf	#255	; 0xff
1000e394:	2300      	movs	r3, #0
1000e396:	685b      	ldr	r3, [r3, #4]
1000e398:	deff      	udf	#255	; 0xff
1000e39a:	bf00      	nop

1000e39c <forward_sigmoid>:
1000e39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e39e:	ed2d 8b02 	vpush	{d8}
1000e3a2:	6982      	ldr	r2, [r0, #24]
1000e3a4:	8813      	ldrh	r3, [r2, #0]
1000e3a6:	2b00      	cmp	r3, #0
1000e3a8:	d03b      	beq.n	1000e422 <forward_sigmoid+0x86>
1000e3aa:	6852      	ldr	r2, [r2, #4]
1000e3ac:	6854      	ldr	r4, [r2, #4]
1000e3ae:	b104      	cbz	r4, 1000e3b2 <forward_sigmoid+0x16>
1000e3b0:	6824      	ldr	r4, [r4, #0]
1000e3b2:	2b01      	cmp	r3, #1
1000e3b4:	d034      	beq.n	1000e420 <forward_sigmoid+0x84>
1000e3b6:	6915      	ldr	r5, [r2, #16]
1000e3b8:	b105      	cbz	r5, 1000e3bc <forward_sigmoid+0x20>
1000e3ba:	682d      	ldr	r5, [r5, #0]
1000e3bc:	68a3      	ldr	r3, [r4, #8]
1000e3be:	0a1b      	lsrs	r3, r3, #8
1000e3c0:	d031      	beq.n	1000e426 <forward_sigmoid+0x8a>
1000e3c2:	68e0      	ldr	r0, [r4, #12]
1000e3c4:	2201      	movs	r2, #1
1000e3c6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
1000e3ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
1000e3ce:	4298      	cmp	r0, r3
1000e3d0:	fb01 f202 	mul.w	r2, r1, r2
1000e3d4:	d1f9      	bne.n	1000e3ca <forward_sigmoid+0x2e>
1000e3d6:	69a7      	ldr	r7, [r4, #24]
1000e3d8:	69a9      	ldr	r1, [r5, #24]
1000e3da:	68bb      	ldr	r3, [r7, #8]
1000e3dc:	688e      	ldr	r6, [r1, #8]
1000e3de:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
1000e3e2:	3a01      	subs	r2, #1
1000e3e4:	eb03 0582 	add.w	r5, r3, r2, lsl #2
1000e3e8:	42ab      	cmp	r3, r5
1000e3ea:	eb06 0682 	add.w	r6, r6, r2, lsl #2
1000e3ee:	d814      	bhi.n	1000e41a <forward_sigmoid+0x7e>
1000e3f0:	3504      	adds	r5, #4
1000e3f2:	3604      	adds	r6, #4
1000e3f4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
1000e3f8:	462c      	mov	r4, r5
1000e3fa:	ed35 0a01 	vldmdb	r5!, {s0}
1000e3fe:	eeb1 0a40 	vneg.f32	s0, s0
1000e402:	f003 fdaf 	bl	10011f64 <expf>
1000e406:	ee30 0a08 	vadd.f32	s0, s0, s16
1000e40a:	3c08      	subs	r4, #8
1000e40c:	eec8 7a00 	vdiv.f32	s15, s16, s0
1000e410:	ed66 7a01 	vstmdb	r6!, {s15}
1000e414:	68bb      	ldr	r3, [r7, #8]
1000e416:	42a3      	cmp	r3, r4
1000e418:	d9ee      	bls.n	1000e3f8 <forward_sigmoid+0x5c>
1000e41a:	ecbd 8b02 	vpop	{d8}
1000e41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e420:	2300      	movs	r3, #0
1000e422:	685b      	ldr	r3, [r3, #4]
1000e424:	deff      	udf	#255	; 0xff
1000e426:	69ab      	ldr	r3, [r5, #24]
1000e428:	69a7      	ldr	r7, [r4, #24]
1000e42a:	689e      	ldr	r6, [r3, #8]
1000e42c:	68bd      	ldr	r5, [r7, #8]
1000e42e:	e7df      	b.n	1000e3f0 <forward_sigmoid+0x54>

1000e430 <forward_relu>:
1000e430:	6982      	ldr	r2, [r0, #24]
1000e432:	8813      	ldrh	r3, [r2, #0]
1000e434:	2b00      	cmp	r3, #0
1000e436:	d05b      	beq.n	1000e4f0 <forward_relu+0xc0>
1000e438:	6851      	ldr	r1, [r2, #4]
1000e43a:	684a      	ldr	r2, [r1, #4]
1000e43c:	b102      	cbz	r2, 1000e440 <forward_relu+0x10>
1000e43e:	6812      	ldr	r2, [r2, #0]
1000e440:	2b01      	cmp	r3, #1
1000e442:	f000 8123 	beq.w	1000e68c <forward_relu+0x25c>
1000e446:	b470      	push	{r4, r5, r6}
1000e448:	6909      	ldr	r1, [r1, #16]
1000e44a:	b101      	cbz	r1, 1000e44e <forward_relu+0x1e>
1000e44c:	6809      	ldr	r1, [r1, #0]
1000e44e:	69c6      	ldr	r6, [r0, #28]
1000e450:	2e00      	cmp	r6, #0
1000e452:	f000 8097 	beq.w	1000e584 <forward_relu+0x154>
1000e456:	6873      	ldr	r3, [r6, #4]
1000e458:	6988      	ldr	r0, [r1, #24]
1000e45a:	6991      	ldr	r1, [r2, #24]
1000e45c:	2b01      	cmp	r3, #1
1000e45e:	f000 80c1 	beq.w	1000e5e4 <forward_relu+0x1b4>
1000e462:	6893      	ldr	r3, [r2, #8]
1000e464:	6880      	ldr	r0, [r0, #8]
1000e466:	688c      	ldr	r4, [r1, #8]
1000e468:	0a1b      	lsrs	r3, r3, #8
1000e46a:	f000 80f2 	beq.w	1000e652 <forward_relu+0x222>
1000e46e:	68d5      	ldr	r5, [r2, #12]
1000e470:	2201      	movs	r2, #1
1000e472:	eb05 0383 	add.w	r3, r5, r3, lsl #2
1000e476:	f853 1d04 	ldr.w	r1, [r3, #-4]!
1000e47a:	42ab      	cmp	r3, r5
1000e47c:	fb01 f202 	mul.w	r2, r1, r2
1000e480:	d1f9      	bne.n	1000e476 <forward_relu+0x46>
1000e482:	68b3      	ldr	r3, [r6, #8]
1000e484:	ed93 7a02 	vldr	s14, [r3, #8]
1000e488:	edd3 6a00 	vldr	s13, [r3]
1000e48c:	ed93 6a01 	vldr	s12, [r3, #4]
1000e490:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
1000e494:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
1000e498:	3a01      	subs	r2, #1
1000e49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e49e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
1000e4a2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
1000e4a6:	d425      	bmi.n	1000e4f4 <forward_relu+0xc4>
1000e4a8:	429c      	cmp	r4, r3
1000e4aa:	d81f      	bhi.n	1000e4ec <forward_relu+0xbc>
1000e4ac:	1d1a      	adds	r2, r3, #4
1000e4ae:	1d01      	adds	r1, r0, #4
1000e4b0:	e00d      	b.n	1000e4ce <forward_relu+0x9e>
1000e4b2:	eef4 6ae7 	vcmpe.f32	s13, s15
1000e4b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e4ba:	db03      	blt.n	1000e4c4 <forward_relu+0x94>
1000e4bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
1000e4c0:	ee67 7a86 	vmul.f32	s15, s15, s12
1000e4c4:	3b08      	subs	r3, #8
1000e4c6:	429c      	cmp	r4, r3
1000e4c8:	ed61 7a01 	vstmdb	r1!, {s15}
1000e4cc:	d80e      	bhi.n	1000e4ec <forward_relu+0xbc>
1000e4ce:	4613      	mov	r3, r2
1000e4d0:	ed72 7a01 	vldmdb	r2!, {s15}
1000e4d4:	eef4 7ac7 	vcmpe.f32	s15, s14
1000e4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e4dc:	d9e9      	bls.n	1000e4b2 <forward_relu+0x82>
1000e4de:	3b08      	subs	r3, #8
1000e4e0:	eef0 7a47 	vmov.f32	s15, s14
1000e4e4:	429c      	cmp	r4, r3
1000e4e6:	ed61 7a01 	vstmdb	r1!, {s15}
1000e4ea:	d9f0      	bls.n	1000e4ce <forward_relu+0x9e>
1000e4ec:	bc70      	pop	{r4, r5, r6}
1000e4ee:	4770      	bx	lr
1000e4f0:	685b      	ldr	r3, [r3, #4]
1000e4f2:	deff      	udf	#255	; 0xff
1000e4f4:	eeb5 6a40 	vcmp.f32	s12, #0.0
1000e4f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e4fc:	d11f      	bne.n	1000e53e <forward_relu+0x10e>
1000e4fe:	429c      	cmp	r4, r3
1000e500:	d8f4      	bhi.n	1000e4ec <forward_relu+0xbc>
1000e502:	1b1c      	subs	r4, r3, r4
1000e504:	f024 0403 	bic.w	r4, r4, #3
1000e508:	1d1a      	adds	r2, r3, #4
1000e50a:	2500      	movs	r5, #0
1000e50c:	1b1b      	subs	r3, r3, r4
1000e50e:	1d01      	adds	r1, r0, #4
1000e510:	ed72 7a01 	vldmdb	r2!, {s15}
1000e514:	eef4 7ae6 	vcmpe.f32	s15, s13
1000e518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e51c:	dc0a      	bgt.n	1000e534 <forward_relu+0x104>
1000e51e:	429a      	cmp	r2, r3
1000e520:	f841 5d04 	str.w	r5, [r1, #-4]!
1000e524:	d0e2      	beq.n	1000e4ec <forward_relu+0xbc>
1000e526:	ed72 7a01 	vldmdb	r2!, {s15}
1000e52a:	eef4 7ae6 	vcmpe.f32	s15, s13
1000e52e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e532:	ddf4      	ble.n	1000e51e <forward_relu+0xee>
1000e534:	429a      	cmp	r2, r3
1000e536:	ed61 7a01 	vstmdb	r1!, {s15}
1000e53a:	d1e9      	bne.n	1000e510 <forward_relu+0xe0>
1000e53c:	e7d6      	b.n	1000e4ec <forward_relu+0xbc>
1000e53e:	429c      	cmp	r4, r3
1000e540:	d8d4      	bhi.n	1000e4ec <forward_relu+0xbc>
1000e542:	1b1c      	subs	r4, r3, r4
1000e544:	f024 0403 	bic.w	r4, r4, #3
1000e548:	1d1a      	adds	r2, r3, #4
1000e54a:	1d01      	adds	r1, r0, #4
1000e54c:	1b1b      	subs	r3, r3, r4
1000e54e:	ed72 7a01 	vldmdb	r2!, {s15}
1000e552:	eef4 6ae7 	vcmpe.f32	s13, s15
1000e556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e55a:	db0e      	blt.n	1000e57a <forward_relu+0x14a>
1000e55c:	ee77 7ae6 	vsub.f32	s15, s15, s13
1000e560:	4293      	cmp	r3, r2
1000e562:	ee67 7a86 	vmul.f32	s15, s15, s12
1000e566:	ed61 7a01 	vstmdb	r1!, {s15}
1000e56a:	d0bf      	beq.n	1000e4ec <forward_relu+0xbc>
1000e56c:	ed72 7a01 	vldmdb	r2!, {s15}
1000e570:	eef4 6ae7 	vcmpe.f32	s13, s15
1000e574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e578:	daf0      	bge.n	1000e55c <forward_relu+0x12c>
1000e57a:	4293      	cmp	r3, r2
1000e57c:	ed61 7a01 	vstmdb	r1!, {s15}
1000e580:	d1e5      	bne.n	1000e54e <forward_relu+0x11e>
1000e582:	e7b3      	b.n	1000e4ec <forward_relu+0xbc>
1000e584:	6893      	ldr	r3, [r2, #8]
1000e586:	6989      	ldr	r1, [r1, #24]
1000e588:	6990      	ldr	r0, [r2, #24]
1000e58a:	6889      	ldr	r1, [r1, #8]
1000e58c:	6884      	ldr	r4, [r0, #8]
1000e58e:	0a1b      	lsrs	r3, r3, #8
1000e590:	d075      	beq.n	1000e67e <forward_relu+0x24e>
1000e592:	68d5      	ldr	r5, [r2, #12]
1000e594:	2201      	movs	r2, #1
1000e596:	eb05 0383 	add.w	r3, r5, r3, lsl #2
1000e59a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
1000e59e:	429d      	cmp	r5, r3
1000e5a0:	fb00 f202 	mul.w	r2, r0, r2
1000e5a4:	d1f9      	bne.n	1000e59a <forward_relu+0x16a>
1000e5a6:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
1000e5aa:	3b01      	subs	r3, #1
1000e5ac:	eb04 0283 	add.w	r2, r4, r3, lsl #2
1000e5b0:	4294      	cmp	r4, r2
1000e5b2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
1000e5b6:	d899      	bhi.n	1000e4ec <forward_relu+0xbc>
1000e5b8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 1000e694 <forward_relu+0x264>
1000e5bc:	3204      	adds	r2, #4
1000e5be:	3104      	adds	r1, #4
1000e5c0:	4613      	mov	r3, r2
1000e5c2:	ed72 7a01 	vldmdb	r2!, {s15}
1000e5c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
1000e5ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e5ce:	f1a3 0308 	sub.w	r3, r3, #8
1000e5d2:	bfb8      	it	lt
1000e5d4:	eef0 7a47 	vmovlt.f32	s15, s14
1000e5d8:	429c      	cmp	r4, r3
1000e5da:	ed61 7a01 	vstmdb	r1!, {s15}
1000e5de:	d9ef      	bls.n	1000e5c0 <forward_relu+0x190>
1000e5e0:	bc70      	pop	{r4, r5, r6}
1000e5e2:	4770      	bx	lr
1000e5e4:	688c      	ldr	r4, [r1, #8]
1000e5e6:	6891      	ldr	r1, [r2, #8]
1000e5e8:	6880      	ldr	r0, [r0, #8]
1000e5ea:	0a09      	lsrs	r1, r1, #8
1000e5ec:	d049      	beq.n	1000e682 <forward_relu+0x252>
1000e5ee:	68d5      	ldr	r5, [r2, #12]
1000e5f0:	eb05 0281 	add.w	r2, r5, r1, lsl #2
1000e5f4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
1000e5f8:	42aa      	cmp	r2, r5
1000e5fa:	fb01 f303 	mul.w	r3, r1, r3
1000e5fe:	d1f9      	bne.n	1000e5f4 <forward_relu+0x1c4>
1000e600:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
1000e604:	3a01      	subs	r2, #1
1000e606:	68b1      	ldr	r1, [r6, #8]
1000e608:	eb04 0382 	add.w	r3, r4, r2, lsl #2
1000e60c:	429c      	cmp	r4, r3
1000e60e:	ed91 7a00 	vldr	s14, [r1]
1000e612:	eb00 0082 	add.w	r0, r0, r2, lsl #2
1000e616:	f63f af69 	bhi.w	1000e4ec <forward_relu+0xbc>
1000e61a:	2500      	movs	r5, #0
1000e61c:	3304      	adds	r3, #4
1000e61e:	1d02      	adds	r2, r0, #4
1000e620:	ed53 7a01 	vldr	s15, [r3, #-4]
1000e624:	eeb4 7ae7 	vcmpe.f32	s14, s15
1000e628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e62c:	f1a3 0104 	sub.w	r1, r3, #4
1000e630:	f1a3 0308 	sub.w	r3, r3, #8
1000e634:	d406      	bmi.n	1000e644 <forward_relu+0x214>
1000e636:	429c      	cmp	r4, r3
1000e638:	f842 5d04 	str.w	r5, [r2, #-4]!
1000e63c:	f63f af56 	bhi.w	1000e4ec <forward_relu+0xbc>
1000e640:	460b      	mov	r3, r1
1000e642:	e7ed      	b.n	1000e620 <forward_relu+0x1f0>
1000e644:	429c      	cmp	r4, r3
1000e646:	ed62 7a01 	vstmdb	r2!, {s15}
1000e64a:	f63f af4f 	bhi.w	1000e4ec <forward_relu+0xbc>
1000e64e:	460b      	mov	r3, r1
1000e650:	e7e6      	b.n	1000e620 <forward_relu+0x1f0>
1000e652:	68b3      	ldr	r3, [r6, #8]
1000e654:	ed93 7a02 	vldr	s14, [r3, #8]
1000e658:	edd3 6a00 	vldr	s13, [r3]
1000e65c:	ed93 6a01 	vldr	s12, [r3, #4]
1000e660:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
1000e664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e668:	d401      	bmi.n	1000e66e <forward_relu+0x23e>
1000e66a:	4623      	mov	r3, r4
1000e66c:	e71e      	b.n	1000e4ac <forward_relu+0x7c>
1000e66e:	eeb5 6a40 	vcmp.f32	s12, #0.0
1000e672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e676:	4623      	mov	r3, r4
1000e678:	f47f af63 	bne.w	1000e542 <forward_relu+0x112>
1000e67c:	e741      	b.n	1000e502 <forward_relu+0xd2>
1000e67e:	4622      	mov	r2, r4
1000e680:	e79a      	b.n	1000e5b8 <forward_relu+0x188>
1000e682:	68b2      	ldr	r2, [r6, #8]
1000e684:	4623      	mov	r3, r4
1000e686:	ed92 7a00 	vldr	s14, [r2]
1000e68a:	e7c6      	b.n	1000e61a <forward_relu+0x1ea>
1000e68c:	2300      	movs	r3, #0
1000e68e:	685b      	ldr	r3, [r3, #4]
1000e690:	deff      	udf	#255	; 0xff
1000e692:	bf00      	nop
1000e694:	00000000 	.word	0x00000000

1000e698 <forward_mp>:
1000e698:	6983      	ldr	r3, [r0, #24]
1000e69a:	881a      	ldrh	r2, [r3, #0]
1000e69c:	2a00      	cmp	r2, #0
1000e69e:	f000 80c6 	beq.w	1000e82e <forward_mp+0x196>
1000e6a2:	6859      	ldr	r1, [r3, #4]
1000e6a4:	684b      	ldr	r3, [r1, #4]
1000e6a6:	b103      	cbz	r3, 1000e6aa <forward_mp+0x12>
1000e6a8:	681b      	ldr	r3, [r3, #0]
1000e6aa:	2a01      	cmp	r2, #1
1000e6ac:	f000 80c1 	beq.w	1000e832 <forward_mp+0x19a>
1000e6b0:	690a      	ldr	r2, [r1, #16]
1000e6b2:	2a00      	cmp	r2, #0
1000e6b4:	f000 80c0 	beq.w	1000e838 <forward_mp+0x1a0>
1000e6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000e6bc:	6811      	ldr	r1, [r2, #0]
1000e6be:	68ca      	ldr	r2, [r1, #12]
1000e6c0:	6989      	ldr	r1, [r1, #24]
1000e6c2:	68d4      	ldr	r4, [r2, #12]
1000e6c4:	6895      	ldr	r5, [r2, #8]
1000e6c6:	688a      	ldr	r2, [r1, #8]
1000e6c8:	68d9      	ldr	r1, [r3, #12]
1000e6ca:	699b      	ldr	r3, [r3, #24]
1000e6cc:	f8d1 9004 	ldr.w	r9, [r1, #4]
1000e6d0:	689b      	ldr	r3, [r3, #8]
1000e6d2:	b093      	sub	sp, #76	; 0x4c
1000e6d4:	9200      	str	r2, [sp, #0]
1000e6d6:	6b02      	ldr	r2, [r0, #48]	; 0x30
1000e6d8:	930e      	str	r3, [sp, #56]	; 0x38
1000e6da:	e9d2 3600 	ldrd	r3, r6, [r2]
1000e6de:	e9d1 7202 	ldrd	r7, r2, [r1, #8]
1000e6e2:	69c1      	ldr	r1, [r0, #28]
1000e6e4:	9109      	str	r1, [sp, #36]	; 0x24
1000e6e6:	6a01      	ldr	r1, [r0, #32]
1000e6e8:	910a      	str	r1, [sp, #40]	; 0x28
1000e6ea:	6a41      	ldr	r1, [r0, #36]	; 0x24
1000e6ec:	910b      	str	r1, [sp, #44]	; 0x2c
1000e6ee:	6a81      	ldr	r1, [r0, #40]	; 0x28
1000e6f0:	9408      	str	r4, [sp, #32]
1000e6f2:	9504      	str	r5, [sp, #16]
1000e6f4:	960d      	str	r6, [sp, #52]	; 0x34
1000e6f6:	9705      	str	r7, [sp, #20]
1000e6f8:	910c      	str	r1, [sp, #48]	; 0x30
1000e6fa:	f1c3 0a00 	rsb	sl, r3, #0
1000e6fe:	2c00      	cmp	r4, #0
1000e700:	f000 8092 	beq.w	1000e828 <forward_mp+0x190>
1000e704:	441a      	add	r2, r3
1000e706:	9b05      	ldr	r3, [sp, #20]
1000e708:	9201      	str	r2, [sp, #4]
1000e70a:	fb09 f303 	mul.w	r3, r9, r3
1000e70e:	ea4f 0789 	mov.w	r7, r9, lsl #2
1000e712:	ea4f 0883 	mov.w	r8, r3, lsl #2
1000e716:	4273      	negs	r3, r6
1000e718:	9310      	str	r3, [sp, #64]	; 0x40
1000e71a:	fb05 f307 	mul.w	r3, r5, r7
1000e71e:	930f      	str	r3, [sp, #60]	; 0x3c
1000e720:	f04f 0b00 	mov.w	fp, #0
1000e724:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000e726:	9901      	ldr	r1, [sp, #4]
1000e728:	428a      	cmp	r2, r1
1000e72a:	bf94      	ite	ls
1000e72c:	eb0a 0e02 	addls.w	lr, sl, r2
1000e730:	eb0a 0e01 	addhi.w	lr, sl, r1
1000e734:	9a04      	ldr	r2, [sp, #16]
1000e736:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
1000e73a:	9307      	str	r3, [sp, #28]
1000e73c:	2a00      	cmp	r2, #0
1000e73e:	d068      	beq.n	1000e812 <forward_mp+0x17a>
1000e740:	9a05      	ldr	r2, [sp, #20]
1000e742:	9d00      	ldr	r5, [sp, #0]
1000e744:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
1000e748:	fb02 f303 	mul.w	r3, r2, r3
1000e74c:	9303      	str	r3, [sp, #12]
1000e74e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000e750:	18d3      	adds	r3, r2, r3
1000e752:	9302      	str	r3, [sp, #8]
1000e754:	2200      	movs	r2, #0
1000e756:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000e758:	9206      	str	r2, [sp, #24]
1000e75a:	2b00      	cmp	r3, #0
1000e75c:	bfac      	ite	ge
1000e75e:	9a03      	ldrge	r2, [sp, #12]
1000e760:	9e03      	ldrlt	r6, [sp, #12]
1000e762:	9902      	ldr	r1, [sp, #8]
1000e764:	bfa8      	it	ge
1000e766:	18d6      	addge	r6, r2, r3
1000e768:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000e76a:	fb06 2607 	mla	r6, r6, r7, r2
1000e76e:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000e770:	469b      	mov	fp, r3
1000e772:	bfb8      	it	lt
1000e774:	2300      	movlt	r3, #0
1000e776:	428a      	cmp	r2, r1
1000e778:	bf94      	ite	ls
1000e77a:	eb0b 0402 	addls.w	r4, fp, r2
1000e77e:	eb0b 0401 	addhi.w	r4, fp, r1
1000e782:	1ae4      	subs	r4, r4, r3
1000e784:	f1b9 0f00 	cmp.w	r9, #0
1000e788:	d008      	beq.n	1000e79c <forward_mp+0x104>
1000e78a:	4633      	mov	r3, r6
1000e78c:	462a      	mov	r2, r5
1000e78e:	19b9      	adds	r1, r7, r6
1000e790:	f853 0b04 	ldr.w	r0, [r3], #4
1000e794:	f842 0b04 	str.w	r0, [r2], #4
1000e798:	4299      	cmp	r1, r3
1000e79a:	d1f9      	bne.n	1000e790 <forward_mp+0xf8>
1000e79c:	9b07      	ldr	r3, [sp, #28]
1000e79e:	459e      	cmp	lr, r3
1000e7a0:	dd24      	ble.n	1000e7ec <forward_mp+0x154>
1000e7a2:	469c      	mov	ip, r3
1000e7a4:	fb07 6404 	mla	r4, r7, r4, r6
1000e7a8:	42a6      	cmp	r6, r4
1000e7aa:	d219      	bcs.n	1000e7e0 <forward_mp+0x148>
1000e7ac:	f1b9 0f00 	cmp.w	r9, #0
1000e7b0:	d016      	beq.n	1000e7e0 <forward_mp+0x148>
1000e7b2:	19f1      	adds	r1, r6, r7
1000e7b4:	4630      	mov	r0, r6
1000e7b6:	4602      	mov	r2, r0
1000e7b8:	462b      	mov	r3, r5
1000e7ba:	ecf2 7a01 	vldmia	r2!, {s15}
1000e7be:	ed93 7a00 	vldr	s14, [r3]
1000e7c2:	eef4 7ac7 	vcmpe.f32	s15, s14
1000e7c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000e7ca:	bfb8      	it	lt
1000e7cc:	eef0 7a47 	vmovlt.f32	s15, s14
1000e7d0:	428a      	cmp	r2, r1
1000e7d2:	ece3 7a01 	vstmia	r3!, {s15}
1000e7d6:	d1f0      	bne.n	1000e7ba <forward_mp+0x122>
1000e7d8:	4438      	add	r0, r7
1000e7da:	42a0      	cmp	r0, r4
1000e7dc:	4439      	add	r1, r7
1000e7de:	d3ea      	bcc.n	1000e7b6 <forward_mp+0x11e>
1000e7e0:	f10c 0c01 	add.w	ip, ip, #1
1000e7e4:	45e6      	cmp	lr, ip
1000e7e6:	4446      	add	r6, r8
1000e7e8:	4444      	add	r4, r8
1000e7ea:	d1dd      	bne.n	1000e7a8 <forward_mp+0x110>
1000e7ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
1000e7ee:	9802      	ldr	r0, [sp, #8]
1000e7f0:	9a06      	ldr	r2, [sp, #24]
1000e7f2:	eb01 030b 	add.w	r3, r1, fp
1000e7f6:	1a41      	subs	r1, r0, r1
1000e7f8:	9102      	str	r1, [sp, #8]
1000e7fa:	9904      	ldr	r1, [sp, #16]
1000e7fc:	3201      	adds	r2, #1
1000e7fe:	4291      	cmp	r1, r2
1000e800:	9206      	str	r2, [sp, #24]
1000e802:	443d      	add	r5, r7
1000e804:	d1a9      	bne.n	1000e75a <forward_mp+0xc2>
1000e806:	9b00      	ldr	r3, [sp, #0]
1000e808:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000e80a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
1000e80e:	4413      	add	r3, r2
1000e810:	9300      	str	r3, [sp, #0]
1000e812:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000e814:	9a01      	ldr	r2, [sp, #4]
1000e816:	449a      	add	sl, r3
1000e818:	1ad3      	subs	r3, r2, r3
1000e81a:	9301      	str	r3, [sp, #4]
1000e81c:	9b08      	ldr	r3, [sp, #32]
1000e81e:	f10b 0b01 	add.w	fp, fp, #1
1000e822:	455b      	cmp	r3, fp
1000e824:	f47f af7e 	bne.w	1000e724 <forward_mp+0x8c>
1000e828:	b013      	add	sp, #76	; 0x4c
1000e82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000e82e:	6853      	ldr	r3, [r2, #4]
1000e830:	deff      	udf	#255	; 0xff
1000e832:	2300      	movs	r3, #0
1000e834:	685b      	ldr	r3, [r3, #4]
1000e836:	deff      	udf	#255	; 0xff
1000e838:	68d3      	ldr	r3, [r2, #12]
1000e83a:	deff      	udf	#255	; 0xff

1000e83c <ai_conv2d_kernel_simple_opt_f32.constprop.0>:
1000e83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000e840:	b08d      	sub	sp, #52	; 0x34
1000e842:	9003      	str	r0, [sp, #12]
1000e844:	9207      	str	r2, [sp, #28]
1000e846:	9308      	str	r3, [sp, #32]
1000e848:	461a      	mov	r2, r3
1000e84a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
1000e84e:	9d18      	ldr	r5, [sp, #96]	; 0x60
1000e850:	9c16      	ldr	r4, [sp, #88]	; 0x58
1000e852:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
1000e856:	910b      	str	r1, [sp, #44]	; 0x2c
1000e858:	fb00 f003 	mul.w	r0, r0, r3
1000e85c:	9004      	str	r0, [sp, #16]
1000e85e:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
1000e862:	9009      	str	r0, [sp, #36]	; 0x24
1000e864:	2d00      	cmp	r5, #0
1000e866:	f000 80ef 	beq.w	1000ea48 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x20c>
1000e86a:	fb00 f302 	mul.w	r3, r0, r2
1000e86e:	009b      	lsls	r3, r3, #2
1000e870:	9306      	str	r3, [sp, #24]
1000e872:	9b1c      	ldr	r3, [sp, #112]	; 0x70
1000e874:	fb03 f302 	mul.w	r3, r3, r2
1000e878:	eb01 0383 	add.w	r3, r1, r3, lsl #2
1000e87c:	9301      	str	r3, [sp, #4]
1000e87e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
1000e880:	425b      	negs	r3, r3
1000e882:	9300      	str	r3, [sp, #0]
1000e884:	2300      	movs	r3, #0
1000e886:	00a4      	lsls	r4, r4, #2
1000e888:	9302      	str	r3, [sp, #8]
1000e88a:	0093      	lsls	r3, r2, #2
1000e88c:	9405      	str	r4, [sp, #20]
1000e88e:	930a      	str	r3, [sp, #40]	; 0x28
1000e890:	9b1c      	ldr	r3, [sp, #112]	; 0x70
1000e892:	2b00      	cmp	r3, #0
1000e894:	f2c0 80db 	blt.w	1000ea4e <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x212>
1000e898:	9e01      	ldr	r6, [sp, #4]
1000e89a:	9d04      	ldr	r5, [sp, #16]
1000e89c:	2000      	movs	r0, #0
1000e89e:	9b07      	ldr	r3, [sp, #28]
1000e8a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000e8a2:	9900      	ldr	r1, [sp, #0]
1000e8a4:	fb05 3502 	mla	r5, r5, r2, r3
1000e8a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1000e8aa:	440b      	add	r3, r1
1000e8ac:	9919      	ldr	r1, [sp, #100]	; 0x64
1000e8ae:	428b      	cmp	r3, r1
1000e8b0:	bf94      	ite	ls
1000e8b2:	ebc0 0003 	rsbls	r0, r0, r3
1000e8b6:	ebc0 0001 	rsbhi	r0, r0, r1
1000e8ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1000e8bc:	eba3 0a00 	sub.w	sl, r3, r0
1000e8c0:	9b08      	ldr	r3, [sp, #32]
1000e8c2:	f1bb 0f00 	cmp.w	fp, #0
1000e8c6:	eba1 0900 	sub.w	r9, r1, r0
1000e8ca:	eeb0 7a40 	vmov.f32	s14, s0
1000e8ce:	fb03 f000 	mul.w	r0, r3, r0
1000e8d2:	f340 80a1 	ble.w	1000ea18 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1dc>
1000e8d6:	f020 040f 	bic.w	r4, r0, #15
1000e8da:	f104 38ff 	add.w	r8, r4, #4294967295
1000e8de:	ea4f 1818 	mov.w	r8, r8, lsr #4
1000e8e2:	f108 0801 	add.w	r8, r8, #1
1000e8e6:	ea4f 1e88 	mov.w	lr, r8, lsl #6
1000e8ea:	fb02 fa0a 	mul.w	sl, r2, sl
1000e8ee:	fb02 f909 	mul.w	r9, r2, r9
1000e8f2:	ea4f 1808 	mov.w	r8, r8, lsl #4
1000e8f6:	f04f 0c00 	mov.w	ip, #0
1000e8fa:	2c00      	cmp	r4, #0
1000e8fc:	bfd8      	it	le
1000e8fe:	2700      	movle	r7, #0
1000e900:	dd70      	ble.n	1000e9e4 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1a8>
1000e902:	f106 0240 	add.w	r2, r6, #64	; 0x40
1000e906:	f105 0340 	add.w	r3, r5, #64	; 0x40
1000e90a:	2100      	movs	r1, #0
1000e90c:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
1000e910:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
1000e914:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
1000e918:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
1000e91c:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
1000e920:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
1000e924:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
1000e928:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
1000e92c:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
1000e930:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
1000e934:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
1000e938:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
1000e93c:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
1000e940:	ee67 7aa5 	vmul.f32	s15, s15, s11
1000e944:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
1000e948:	eee6 7a26 	vfma.f32	s15, s12, s13
1000e94c:	3110      	adds	r1, #16
1000e94e:	42a1      	cmp	r1, r4
1000e950:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
1000e954:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
1000e958:	eee5 7a86 	vfma.f32	s15, s11, s12
1000e95c:	f102 0240 	add.w	r2, r2, #64	; 0x40
1000e960:	f103 0340 	add.w	r3, r3, #64	; 0x40
1000e964:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
1000e968:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
1000e96c:	eee4 7aa6 	vfma.f32	s15, s9, s13
1000e970:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
1000e974:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
1000e978:	eee5 7a25 	vfma.f32	s15, s10, s11
1000e97c:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
1000e980:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
1000e984:	eee6 7a26 	vfma.f32	s15, s12, s13
1000e988:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
1000e98c:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
1000e990:	eee3 7a23 	vfma.f32	s15, s6, s7
1000e994:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
1000e998:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
1000e99c:	eee4 7a24 	vfma.f32	s15, s8, s9
1000e9a0:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
1000e9a4:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
1000e9a8:	eee5 7a25 	vfma.f32	s15, s10, s11
1000e9ac:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
1000e9b0:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
1000e9b4:	eee6 7a26 	vfma.f32	s15, s12, s13
1000e9b8:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
1000e9bc:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
1000e9c0:	eee1 7a21 	vfma.f32	s15, s2, s3
1000e9c4:	eee2 7a22 	vfma.f32	s15, s4, s5
1000e9c8:	eee3 7a23 	vfma.f32	s15, s6, s7
1000e9cc:	eee4 7a24 	vfma.f32	s15, s8, s9
1000e9d0:	eee5 7a25 	vfma.f32	s15, s10, s11
1000e9d4:	eee6 7a26 	vfma.f32	s15, s12, s13
1000e9d8:	ee37 7a27 	vadd.f32	s14, s14, s15
1000e9dc:	db96      	blt.n	1000e90c <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xd0>
1000e9de:	4476      	add	r6, lr
1000e9e0:	4475      	add	r5, lr
1000e9e2:	4647      	mov	r7, r8
1000e9e4:	42b8      	cmp	r0, r7
1000e9e6:	dd10      	ble.n	1000ea0a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1ce>
1000e9e8:	463b      	mov	r3, r7
1000e9ea:	4631      	mov	r1, r6
1000e9ec:	462a      	mov	r2, r5
1000e9ee:	ecf2 6a01 	vldmia	r2!, {s13}
1000e9f2:	ecf1 7a01 	vldmia	r1!, {s15}
1000e9f6:	3301      	adds	r3, #1
1000e9f8:	4298      	cmp	r0, r3
1000e9fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000e9fe:	d1f6      	bne.n	1000e9ee <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1b2>
1000ea00:	1bc7      	subs	r7, r0, r7
1000ea02:	eb05 0587 	add.w	r5, r5, r7, lsl #2
1000ea06:	eb06 0687 	add.w	r6, r6, r7, lsl #2
1000ea0a:	f10c 0c01 	add.w	ip, ip, #1
1000ea0e:	45dc      	cmp	ip, fp
1000ea10:	4456      	add	r6, sl
1000ea12:	444d      	add	r5, r9
1000ea14:	f47f af71 	bne.w	1000e8fa <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xbe>
1000ea18:	991c      	ldr	r1, [sp, #112]	; 0x70
1000ea1a:	9809      	ldr	r0, [sp, #36]	; 0x24
1000ea1c:	9a03      	ldr	r2, [sp, #12]
1000ea1e:	9b02      	ldr	r3, [sp, #8]
1000ea20:	ed82 7a00 	vstr	s14, [r2]
1000ea24:	4401      	add	r1, r0
1000ea26:	911c      	str	r1, [sp, #112]	; 0x70
1000ea28:	9905      	ldr	r1, [sp, #20]
1000ea2a:	440a      	add	r2, r1
1000ea2c:	9203      	str	r2, [sp, #12]
1000ea2e:	9a00      	ldr	r2, [sp, #0]
1000ea30:	9906      	ldr	r1, [sp, #24]
1000ea32:	1a12      	subs	r2, r2, r0
1000ea34:	9200      	str	r2, [sp, #0]
1000ea36:	9a01      	ldr	r2, [sp, #4]
1000ea38:	440a      	add	r2, r1
1000ea3a:	9201      	str	r2, [sp, #4]
1000ea3c:	9a18      	ldr	r2, [sp, #96]	; 0x60
1000ea3e:	3301      	adds	r3, #1
1000ea40:	4293      	cmp	r3, r2
1000ea42:	9302      	str	r3, [sp, #8]
1000ea44:	f47f af24 	bne.w	1000e890 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x54>
1000ea48:	b00d      	add	sp, #52	; 0x34
1000ea4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000ea4e:	9a00      	ldr	r2, [sp, #0]
1000ea50:	9b04      	ldr	r3, [sp, #16]
1000ea52:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
1000ea54:	4610      	mov	r0, r2
1000ea56:	189d      	adds	r5, r3, r2
1000ea58:	e721      	b.n	1000e89e <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x62>
1000ea5a:	bf00      	nop

1000ea5c <forward_lite_conv2d_if32of32wf32>:
1000ea5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000ea60:	ed2d 8b02 	vpush	{d8}
1000ea64:	b09f      	sub	sp, #124	; 0x7c
1000ea66:	af08      	add	r7, sp, #32
1000ea68:	461c      	mov	r4, r3
1000ea6a:	62f9      	str	r1, [r7, #44]	; 0x2c
1000ea6c:	63fc      	str	r4, [r7, #60]	; 0x3c
1000ea6e:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
1000ea72:	f8b7 40b0 	ldrh.w	r4, [r7, #176]	; 0xb0
1000ea76:	64fc      	str	r4, [r7, #76]	; 0x4c
1000ea78:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
1000ea7c:	f8b7 50b4 	ldrh.w	r5, [r7, #180]	; 0xb4
1000ea80:	6078      	str	r0, [r7, #4]
1000ea82:	424e      	negs	r6, r1
1000ea84:	4686      	mov	lr, r0
1000ea86:	4694      	mov	ip, r2
1000ea88:	613a      	str	r2, [r7, #16]
1000ea8a:	e9d7 3a22 	ldrd	r3, sl, [r7, #136]	; 0x88
1000ea8e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
1000ea92:	f8b7 00a8 	ldrh.w	r0, [r7, #168]	; 0xa8
1000ea96:	617d      	str	r5, [r7, #20]
1000ea98:	633e      	str	r6, [r7, #48]	; 0x30
1000ea9a:	2c00      	cmp	r4, #0
1000ea9c:	f000 8092 	beq.w	1000ebc4 <forward_lite_conv2d_if32of32wf32+0x168>
1000eaa0:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
1000eaa4:	6379      	str	r1, [r7, #52]	; 0x34
1000eaa6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
1000eaaa:	eddf 0a9c 	vldr	s1, [pc, #624]	; 1000ed1c <forward_lite_conv2d_if32of32wf32+0x2c0>
1000eaae:	fb04 f202 	mul.w	r2, r4, r2
1000eab2:	fb03 f402 	mul.w	r4, r3, r2
1000eab6:	fb03 f201 	mul.w	r2, r3, r1
1000eaba:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
1000eabe:	63bc      	str	r4, [r7, #56]	; 0x38
1000eac0:	fb01 f10a 	mul.w	r1, r1, sl
1000eac4:	0089      	lsls	r1, r1, #2
1000eac6:	61b9      	str	r1, [r7, #24]
1000eac8:	fb05 f102 	mul.w	r1, r5, r2
1000eacc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
1000ead0:	fb06 f202 	mul.w	r2, r6, r2
1000ead4:	0089      	lsls	r1, r1, #2
1000ead6:	61f9      	str	r1, [r7, #28]
1000ead8:	eb0e 0182 	add.w	r1, lr, r2, lsl #2
1000eadc:	f10b 0207 	add.w	r2, fp, #7
1000eae0:	62b9      	str	r1, [r7, #40]	; 0x28
1000eae2:	f022 0107 	bic.w	r1, r2, #7
1000eae6:	eb0c 0284 	add.w	r2, ip, r4, lsl #2
1000eaea:	4240      	negs	r0, r0
1000eaec:	60f9      	str	r1, [r7, #12]
1000eaee:	60ba      	str	r2, [r7, #8]
1000eaf0:	f10c 4178 	add.w	r1, ip, #4160749568	; 0xf8000000
1000eaf4:	2200      	movs	r2, #0
1000eaf6:	4655      	mov	r5, sl
1000eaf8:	6538      	str	r0, [r7, #80]	; 0x50
1000eafa:	6239      	str	r1, [r7, #32]
1000eafc:	627a      	str	r2, [r7, #36]	; 0x24
1000eafe:	46da      	mov	sl, fp
1000eb00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1000eb02:	2a00      	cmp	r2, #0
1000eb04:	f2c0 80d7 	blt.w	1000ecb6 <forward_lite_conv2d_if32of32wf32+0x25a>
1000eb08:	2200      	movs	r2, #0
1000eb0a:	f8d7 b028 	ldr.w	fp, [r7, #40]	; 0x28
1000eb0e:	657a      	str	r2, [r7, #84]	; 0x54
1000eb10:	6b79      	ldr	r1, [r7, #52]	; 0x34
1000eb12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
1000eb16:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
1000eb1a:	440a      	add	r2, r1
1000eb1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
1000eb1e:	4282      	cmp	r2, r0
1000eb20:	bf94      	ite	ls
1000eb22:	ebc1 0102 	rsbls	r1, r1, r2
1000eb26:	ebc1 0100 	rsbhi	r1, r1, r0
1000eb2a:	6a3a      	ldr	r2, [r7, #32]
1000eb2c:	6439      	str	r1, [r7, #64]	; 0x40
1000eb2e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
1000eb32:	d24d      	bcs.n	1000ebd0 <forward_lite_conv2d_if32of32wf32+0x174>
1000eb34:	b385      	cbz	r5, 1000eb98 <forward_lite_conv2d_if32of32wf32+0x13c>
1000eb36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
1000eb38:	2a00      	cmp	r2, #0
1000eb3a:	f000 80c1 	beq.w	1000ecc0 <forward_lite_conv2d_if32of32wf32+0x264>
1000eb3e:	4659      	mov	r1, fp
1000eb40:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
1000eb44:	693e      	ldr	r6, [r7, #16]
1000eb46:	46d3      	mov	fp, sl
1000eb48:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
1000eb4c:	4691      	mov	r9, r2
1000eb4e:	2400      	movs	r4, #0
1000eb50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
1000eb52:	ecb9 0a01 	vldmia	r9!, {s0}
1000eb56:	9207      	str	r2, [sp, #28]
1000eb58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
1000eb5a:	e9cd a205 	strd	sl, r2, [sp, #20]
1000eb5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
1000eb60:	9204      	str	r2, [sp, #16]
1000eb62:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
1000eb66:	9203      	str	r2, [sp, #12]
1000eb68:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
1000eb6c:	9202      	str	r2, [sp, #8]
1000eb6e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
1000eb72:	4640      	mov	r0, r8
1000eb74:	e9cd 5200 	strd	r5, r2, [sp]
1000eb78:	3401      	adds	r4, #1
1000eb7a:	4632      	mov	r2, r6
1000eb7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
1000eb80:	64b9      	str	r1, [r7, #72]	; 0x48
1000eb82:	f7ff fe5b 	bl	1000e83c <ai_conv2d_kernel_simple_opt_f32.constprop.0>
1000eb86:	42a5      	cmp	r5, r4
1000eb88:	6cb9      	ldr	r1, [r7, #72]	; 0x48
1000eb8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
1000eb8e:	445e      	add	r6, fp
1000eb90:	f108 0804 	add.w	r8, r8, #4
1000eb94:	d1dc      	bne.n	1000eb50 <forward_lite_conv2d_if32of32wf32+0xf4>
1000eb96:	46da      	mov	sl, fp
1000eb98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
1000eb9a:	69b8      	ldr	r0, [r7, #24]
1000eb9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000eb9e:	4401      	add	r1, r0
1000eba0:	62f9      	str	r1, [r7, #44]	; 0x2c
1000eba2:	6978      	ldr	r0, [r7, #20]
1000eba4:	6b39      	ldr	r1, [r7, #48]	; 0x30
1000eba6:	4401      	add	r1, r0
1000eba8:	6339      	str	r1, [r7, #48]	; 0x30
1000ebaa:	6b79      	ldr	r1, [r7, #52]	; 0x34
1000ebac:	1a09      	subs	r1, r1, r0
1000ebae:	6379      	str	r1, [r7, #52]	; 0x34
1000ebb0:	69f8      	ldr	r0, [r7, #28]
1000ebb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
1000ebb4:	4401      	add	r1, r0
1000ebb6:	62b9      	str	r1, [r7, #40]	; 0x28
1000ebb8:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
1000ebbc:	3201      	adds	r2, #1
1000ebbe:	4291      	cmp	r1, r2
1000ebc0:	627a      	str	r2, [r7, #36]	; 0x24
1000ebc2:	d19d      	bne.n	1000eb00 <forward_lite_conv2d_if32of32wf32+0xa4>
1000ebc4:	375c      	adds	r7, #92	; 0x5c
1000ebc6:	46bd      	mov	sp, r7
1000ebc8:	ecbd 8b02 	vpop	{d8}
1000ebcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000ebd0:	466a      	mov	r2, sp
1000ebd2:	ee08 2a10 	vmov	s16, r2
1000ebd6:	68fa      	ldr	r2, [r7, #12]
1000ebd8:	ebad 0d02 	sub.w	sp, sp, r2
1000ebdc:	aa08      	add	r2, sp, #32
1000ebde:	2d00      	cmp	r5, #0
1000ebe0:	d03d      	beq.n	1000ec5e <forward_lite_conv2d_if32of32wf32+0x202>
1000ebe2:	6938      	ldr	r0, [r7, #16]
1000ebe4:	68bc      	ldr	r4, [r7, #8]
1000ebe6:	f8d7 902c 	ldr.w	r9, [r7, #44]	; 0x2c
1000ebea:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
1000ebec:	4659      	mov	r1, fp
1000ebee:	f04f 0800 	mov.w	r8, #0
1000ebf2:	46ab      	mov	fp, r5
1000ebf4:	4605      	mov	r5, r0
1000ebf6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
1000ebf8:	b138      	cbz	r0, 1000ec0a <forward_lite_conv2d_if32of32wf32+0x1ae>
1000ebfa:	4628      	mov	r0, r5
1000ebfc:	4694      	mov	ip, r2
1000ebfe:	f850 eb04 	ldr.w	lr, [r0], #4
1000ec02:	f84c eb04 	str.w	lr, [ip], #4
1000ec06:	42a0      	cmp	r0, r4
1000ec08:	d1f9      	bne.n	1000ebfe <forward_lite_conv2d_if32of32wf32+0x1a2>
1000ec0a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
1000ec0c:	b358      	cbz	r0, 1000ec66 <forward_lite_conv2d_if32of32wf32+0x20a>
1000ec0e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
1000ec10:	ecb6 0a01 	vldmia	r6!, {s0}
1000ec14:	9007      	str	r0, [sp, #28]
1000ec16:	6d38      	ldr	r0, [r7, #80]	; 0x50
1000ec18:	9006      	str	r0, [sp, #24]
1000ec1a:	6c38      	ldr	r0, [r7, #64]	; 0x40
1000ec1c:	9005      	str	r0, [sp, #20]
1000ec1e:	6d78      	ldr	r0, [r7, #84]	; 0x54
1000ec20:	9004      	str	r0, [sp, #16]
1000ec22:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
1000ec26:	9003      	str	r0, [sp, #12]
1000ec28:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
1000ec2c:	9002      	str	r0, [sp, #8]
1000ec2e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
1000ec32:	f108 0801 	add.w	r8, r8, #1
1000ec36:	e9cd b000 	strd	fp, r0, [sp]
1000ec3a:	e9c7 2111 	strd	r2, r1, [r7, #68]	; 0x44
1000ec3e:	4648      	mov	r0, r9
1000ec40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
1000ec44:	f7ff fdfa 	bl	1000e83c <ai_conv2d_kernel_simple_opt_f32.constprop.0>
1000ec48:	45d8      	cmp	r8, fp
1000ec4a:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	; 0x44
1000ec4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
1000ec52:	4455      	add	r5, sl
1000ec54:	4454      	add	r4, sl
1000ec56:	f109 0904 	add.w	r9, r9, #4
1000ec5a:	d1cc      	bne.n	1000ebf6 <forward_lite_conv2d_if32of32wf32+0x19a>
1000ec5c:	465d      	mov	r5, fp
1000ec5e:	ee18 2a10 	vmov	r2, s16
1000ec62:	4695      	mov	sp, r2
1000ec64:	e798      	b.n	1000eb98 <forward_lite_conv2d_if32of32wf32+0x13c>
1000ec66:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
1000ec68:	9007      	str	r0, [sp, #28]
1000ec6a:	6d38      	ldr	r0, [r7, #80]	; 0x50
1000ec6c:	9006      	str	r0, [sp, #24]
1000ec6e:	6c38      	ldr	r0, [r7, #64]	; 0x40
1000ec70:	9005      	str	r0, [sp, #20]
1000ec72:	6d78      	ldr	r0, [r7, #84]	; 0x54
1000ec74:	9004      	str	r0, [sp, #16]
1000ec76:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
1000ec7a:	9003      	str	r0, [sp, #12]
1000ec7c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
1000ec80:	9002      	str	r0, [sp, #8]
1000ec82:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
1000ec86:	eeb0 0a60 	vmov.f32	s0, s1
1000ec8a:	e9cd b000 	strd	fp, r0, [sp]
1000ec8e:	f108 0801 	add.w	r8, r8, #1
1000ec92:	e9c7 2111 	strd	r2, r1, [r7, #68]	; 0x44
1000ec96:	4648      	mov	r0, r9
1000ec98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
1000ec9c:	f7ff fdce 	bl	1000e83c <ai_conv2d_kernel_simple_opt_f32.constprop.0>
1000eca0:	45c3      	cmp	fp, r8
1000eca2:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	; 0x44
1000eca6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
1000ecaa:	4455      	add	r5, sl
1000ecac:	4454      	add	r4, sl
1000ecae:	f109 0904 	add.w	r9, r9, #4
1000ecb2:	d1a0      	bne.n	1000ebf6 <forward_lite_conv2d_if32of32wf32+0x19a>
1000ecb4:	e7d2      	b.n	1000ec5c <forward_lite_conv2d_if32of32wf32+0x200>
1000ecb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000ecb8:	f8d7 b004 	ldr.w	fp, [r7, #4]
1000ecbc:	657a      	str	r2, [r7, #84]	; 0x54
1000ecbe:	e727      	b.n	1000eb10 <forward_lite_conv2d_if32of32wf32+0xb4>
1000ecc0:	4659      	mov	r1, fp
1000ecc2:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
1000ecc6:	693e      	ldr	r6, [r7, #16]
1000ecc8:	f8d7 9054 	ldr.w	r9, [r7, #84]	; 0x54
1000eccc:	46d3      	mov	fp, sl
1000ecce:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
1000ecd2:	4614      	mov	r4, r2
1000ecd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
1000ecd6:	9207      	str	r2, [sp, #28]
1000ecd8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
1000ecda:	f8cd 9010 	str.w	r9, [sp, #16]
1000ecde:	e9cd a205 	strd	sl, r2, [sp, #20]
1000ece2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
1000ece6:	9203      	str	r2, [sp, #12]
1000ece8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
1000ecec:	9202      	str	r2, [sp, #8]
1000ecee:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
1000ecf2:	4640      	mov	r0, r8
1000ecf4:	e9cd 5200 	strd	r5, r2, [sp]
1000ecf8:	eeb0 0a60 	vmov.f32	s0, s1
1000ecfc:	4632      	mov	r2, r6
1000ecfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
1000ed02:	6579      	str	r1, [r7, #84]	; 0x54
1000ed04:	3401      	adds	r4, #1
1000ed06:	f7ff fd99 	bl	1000e83c <ai_conv2d_kernel_simple_opt_f32.constprop.0>
1000ed0a:	42a5      	cmp	r5, r4
1000ed0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
1000ed0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
1000ed12:	445e      	add	r6, fp
1000ed14:	f108 0804 	add.w	r8, r8, #4
1000ed18:	d1dc      	bne.n	1000ecd4 <forward_lite_conv2d_if32of32wf32+0x278>
1000ed1a:	e73c      	b.n	1000eb96 <forward_lite_conv2d_if32of32wf32+0x13a>
1000ed1c:	00000000 	.word	0x00000000

1000ed20 <forward_lite_dense_if32of32wf32>:
1000ed20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000ed24:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
1000ed28:	eb00 0784 	add.w	r7, r0, r4, lsl #2
1000ed2c:	4287      	cmp	r7, r0
1000ed2e:	f240 8106 	bls.w	1000ef3e <forward_lite_dense_if32of32wf32+0x21e>
1000ed32:	f1a6 0810 	sub.w	r8, r6, #16
1000ed36:	ea4f 1818 	mov.w	r8, r8, lsr #4
1000ed3a:	f108 0801 	add.w	r8, r8, #1
1000ed3e:	ea4f 1b88 	mov.w	fp, r8, lsl #6
1000ed42:	ea4f 0986 	mov.w	r9, r6, lsl #2
1000ed46:	eb01 1888 	add.w	r8, r1, r8, lsl #6
1000ed4a:	4605      	mov	r5, r0
1000ed4c:	f006 0a0f 	and.w	sl, r6, #15
1000ed50:	2e0f      	cmp	r6, #15
1000ed52:	ed9f 7a84 	vldr	s14, [pc, #528]	; 1000ef64 <forward_lite_dense_if32of32wf32+0x244>
1000ed56:	f240 8101 	bls.w	1000ef5c <forward_lite_dense_if32of32wf32+0x23c>
1000ed5a:	f101 0c40 	add.w	ip, r1, #64	; 0x40
1000ed5e:	f102 0440 	add.w	r4, r2, #64	; 0x40
1000ed62:	46b6      	mov	lr, r6
1000ed64:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
1000ed68:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
1000ed6c:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
1000ed70:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
1000ed74:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
1000ed78:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
1000ed7c:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
1000ed80:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
1000ed84:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
1000ed88:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
1000ed8c:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
1000ed90:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
1000ed94:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
1000ed98:	ee67 7aa5 	vmul.f32	s15, s15, s11
1000ed9c:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
1000eda0:	eee6 7a26 	vfma.f32	s15, s12, s13
1000eda4:	f1ae 0e10 	sub.w	lr, lr, #16
1000eda8:	f1be 0f0f 	cmp.w	lr, #15
1000edac:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
1000edb0:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
1000edb4:	eee5 7a86 	vfma.f32	s15, s11, s12
1000edb8:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
1000edbc:	f104 0440 	add.w	r4, r4, #64	; 0x40
1000edc0:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
1000edc4:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
1000edc8:	eee4 7aa6 	vfma.f32	s15, s9, s13
1000edcc:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
1000edd0:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
1000edd4:	eee5 7a25 	vfma.f32	s15, s10, s11
1000edd8:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
1000eddc:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
1000ede0:	eee6 7a26 	vfma.f32	s15, s12, s13
1000ede4:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
1000ede8:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
1000edec:	eee3 7a23 	vfma.f32	s15, s6, s7
1000edf0:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
1000edf4:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
1000edf8:	eee4 7a24 	vfma.f32	s15, s8, s9
1000edfc:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
1000ee00:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
1000ee04:	eee5 7a25 	vfma.f32	s15, s10, s11
1000ee08:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
1000ee0c:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
1000ee10:	eee6 7a26 	vfma.f32	s15, s12, s13
1000ee14:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
1000ee18:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
1000ee1c:	eee1 7a21 	vfma.f32	s15, s2, s3
1000ee20:	eee2 7a22 	vfma.f32	s15, s4, s5
1000ee24:	eee3 7a23 	vfma.f32	s15, s6, s7
1000ee28:	eee4 7a24 	vfma.f32	s15, s8, s9
1000ee2c:	eee5 7a25 	vfma.f32	s15, s10, s11
1000ee30:	eee6 7a26 	vfma.f32	s15, s12, s13
1000ee34:	ee37 7a27 	vadd.f32	s14, s14, s15
1000ee38:	d894      	bhi.n	1000ed64 <forward_lite_dense_if32of32wf32+0x44>
1000ee3a:	eb02 0e0b 	add.w	lr, r2, fp
1000ee3e:	4654      	mov	r4, sl
1000ee40:	46c4      	mov	ip, r8
1000ee42:	2c00      	cmp	r4, #0
1000ee44:	d075      	beq.n	1000ef32 <forward_lite_dense_if32of32wf32+0x212>
1000ee46:	eddc 6a00 	vldr	s13, [ip]
1000ee4a:	edde 7a00 	vldr	s15, [lr]
1000ee4e:	2c01      	cmp	r4, #1
1000ee50:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000ee54:	d06d      	beq.n	1000ef32 <forward_lite_dense_if32of32wf32+0x212>
1000ee56:	eddc 6a01 	vldr	s13, [ip, #4]
1000ee5a:	edde 7a01 	vldr	s15, [lr, #4]
1000ee5e:	2c02      	cmp	r4, #2
1000ee60:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000ee64:	d065      	beq.n	1000ef32 <forward_lite_dense_if32of32wf32+0x212>
1000ee66:	eddc 6a02 	vldr	s13, [ip, #8]
1000ee6a:	edde 7a02 	vldr	s15, [lr, #8]
1000ee6e:	2c03      	cmp	r4, #3
1000ee70:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000ee74:	d05d      	beq.n	1000ef32 <forward_lite_dense_if32of32wf32+0x212>
1000ee76:	eddc 6a03 	vldr	s13, [ip, #12]
1000ee7a:	edde 7a03 	vldr	s15, [lr, #12]
1000ee7e:	2c04      	cmp	r4, #4
1000ee80:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000ee84:	d055      	beq.n	1000ef32 <forward_lite_dense_if32of32wf32+0x212>
1000ee86:	eddc 6a04 	vldr	s13, [ip, #16]
1000ee8a:	edde 7a04 	vldr	s15, [lr, #16]
1000ee8e:	2c05      	cmp	r4, #5
1000ee90:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000ee94:	d04d      	beq.n	1000ef32 <forward_lite_dense_if32of32wf32+0x212>
1000ee96:	eddc 6a05 	vldr	s13, [ip, #20]
1000ee9a:	edde 7a05 	vldr	s15, [lr, #20]
1000ee9e:	2c06      	cmp	r4, #6
1000eea0:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000eea4:	d045      	beq.n	1000ef32 <forward_lite_dense_if32of32wf32+0x212>
1000eea6:	eddc 6a06 	vldr	s13, [ip, #24]
1000eeaa:	edde 7a06 	vldr	s15, [lr, #24]
1000eeae:	2c07      	cmp	r4, #7
1000eeb0:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000eeb4:	d03d      	beq.n	1000ef32 <forward_lite_dense_if32of32wf32+0x212>
1000eeb6:	eddc 6a07 	vldr	s13, [ip, #28]
1000eeba:	edde 7a07 	vldr	s15, [lr, #28]
1000eebe:	2c08      	cmp	r4, #8
1000eec0:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000eec4:	d035      	beq.n	1000ef32 <forward_lite_dense_if32of32wf32+0x212>
1000eec6:	eddc 6a08 	vldr	s13, [ip, #32]
1000eeca:	edde 7a08 	vldr	s15, [lr, #32]
1000eece:	2c09      	cmp	r4, #9
1000eed0:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000eed4:	d02d      	beq.n	1000ef32 <forward_lite_dense_if32of32wf32+0x212>
1000eed6:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
1000eeda:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
1000eede:	2c0a      	cmp	r4, #10
1000eee0:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000eee4:	d025      	beq.n	1000ef32 <forward_lite_dense_if32of32wf32+0x212>
1000eee6:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
1000eeea:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
1000eeee:	2c0b      	cmp	r4, #11
1000eef0:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000eef4:	d01d      	beq.n	1000ef32 <forward_lite_dense_if32of32wf32+0x212>
1000eef6:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
1000eefa:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
1000eefe:	2c0c      	cmp	r4, #12
1000ef00:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000ef04:	d015      	beq.n	1000ef32 <forward_lite_dense_if32of32wf32+0x212>
1000ef06:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
1000ef0a:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
1000ef0e:	3c0d      	subs	r4, #13
1000ef10:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000ef14:	d00d      	beq.n	1000ef32 <forward_lite_dense_if32of32wf32+0x212>
1000ef16:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
1000ef1a:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
1000ef1e:	2c01      	cmp	r4, #1
1000ef20:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000ef24:	d005      	beq.n	1000ef32 <forward_lite_dense_if32of32wf32+0x212>
1000ef26:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
1000ef2a:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
1000ef2e:	eea6 7aa7 	vfma.f32	s14, s13, s15
1000ef32:	444a      	add	r2, r9
1000ef34:	eca5 7a01 	vstmia	r5!, {s14}
1000ef38:	42af      	cmp	r7, r5
1000ef3a:	f63f af09 	bhi.w	1000ed50 <forward_lite_dense_if32of32wf32+0x30>
1000ef3e:	b15b      	cbz	r3, 1000ef58 <forward_lite_dense_if32of32wf32+0x238>
1000ef40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000ef42:	b14a      	cbz	r2, 1000ef58 <forward_lite_dense_if32of32wf32+0x238>
1000ef44:	edd0 7a00 	vldr	s15, [r0]
1000ef48:	ecb3 7a01 	vldmia	r3!, {s14}
1000ef4c:	ee77 7a87 	vadd.f32	s15, s15, s14
1000ef50:	ece0 7a01 	vstmia	r0!, {s15}
1000ef54:	4287      	cmp	r7, r0
1000ef56:	d1f5      	bne.n	1000ef44 <forward_lite_dense_if32of32wf32+0x224>
1000ef58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000ef5c:	4634      	mov	r4, r6
1000ef5e:	4696      	mov	lr, r2
1000ef60:	468c      	mov	ip, r1
1000ef62:	e76e      	b.n	1000ee42 <forward_lite_dense_if32of32wf32+0x122>
1000ef64:	00000000 	.word	0x00000000

1000ef68 <st_int8_copy>:
1000ef68:	4288      	cmp	r0, r1
1000ef6a:	d057      	beq.n	1000f01c <st_int8_copy+0xb4>
1000ef6c:	2a00      	cmp	r2, #0
1000ef6e:	d055      	beq.n	1000f01c <st_int8_copy+0xb4>
1000ef70:	4288      	cmp	r0, r1
1000ef72:	d354      	bcc.n	1000f01e <st_int8_copy+0xb6>
1000ef74:	078b      	lsls	r3, r1, #30
1000ef76:	d102      	bne.n	1000ef7e <st_int8_copy+0x16>
1000ef78:	e009      	b.n	1000ef8e <st_int8_copy+0x26>
1000ef7a:	2a00      	cmp	r2, #0
1000ef7c:	d05c      	beq.n	1000f038 <st_int8_copy+0xd0>
1000ef7e:	f910 3b01 	ldrsb.w	r3, [r0], #1
1000ef82:	f801 3b01 	strb.w	r3, [r1], #1
1000ef86:	078b      	lsls	r3, r1, #30
1000ef88:	f102 32ff 	add.w	r2, r2, #4294967295
1000ef8c:	d1f5      	bne.n	1000ef7a <st_int8_copy+0x12>
1000ef8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000ef92:	ea5f 1e12 	movs.w	lr, r2, lsr #4
1000ef96:	d069      	beq.n	1000f06c <st_int8_copy+0x104>
1000ef98:	ea41 0300 	orr.w	r3, r1, r0
1000ef9c:	075b      	lsls	r3, r3, #29
1000ef9e:	d14c      	bne.n	1000f03a <st_int8_copy+0xd2>
1000efa0:	f10e 33ff 	add.w	r3, lr, #4294967295
1000efa4:	2b01      	cmp	r3, #1
1000efa6:	d948      	bls.n	1000f03a <st_int8_copy+0xd2>
1000efa8:	f100 0310 	add.w	r3, r0, #16
1000efac:	ea4f 140e 	mov.w	r4, lr, lsl #4
1000efb0:	f101 0c10 	add.w	ip, r1, #16
1000efb4:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
1000efb8:	ed13 6b04 	vldr	d6, [r3, #-16]
1000efbc:	ed13 7b02 	vldr	d7, [r3, #-8]
1000efc0:	3310      	adds	r3, #16
1000efc2:	4573      	cmp	r3, lr
1000efc4:	ed0c 6b04 	vstr	d6, [ip, #-16]
1000efc8:	ed0c 7b02 	vstr	d7, [ip, #-8]
1000efcc:	f10c 0c10 	add.w	ip, ip, #16
1000efd0:	d1f2      	bne.n	1000efb8 <st_int8_copy+0x50>
1000efd2:	f3c2 0381 	ubfx	r3, r2, #2, #2
1000efd6:	4421      	add	r1, r4
1000efd8:	4420      	add	r0, r4
1000efda:	f002 0203 	and.w	r2, r2, #3
1000efde:	b16b      	cbz	r3, 1000effc <st_int8_copy+0x94>
1000efe0:	6804      	ldr	r4, [r0, #0]
1000efe2:	600c      	str	r4, [r1, #0]
1000efe4:	1e5c      	subs	r4, r3, #1
1000efe6:	d005      	beq.n	1000eff4 <st_int8_copy+0x8c>
1000efe8:	6845      	ldr	r5, [r0, #4]
1000efea:	604d      	str	r5, [r1, #4]
1000efec:	2c01      	cmp	r4, #1
1000efee:	bf1c      	itt	ne
1000eff0:	6884      	ldrne	r4, [r0, #8]
1000eff2:	608c      	strne	r4, [r1, #8]
1000eff4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
1000eff8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
1000effc:	b162      	cbz	r2, 1000f018 <st_int8_copy+0xb0>
1000effe:	f990 3000 	ldrsb.w	r3, [r0]
1000f002:	700b      	strb	r3, [r1, #0]
1000f004:	3a01      	subs	r2, #1
1000f006:	d007      	beq.n	1000f018 <st_int8_copy+0xb0>
1000f008:	f990 3001 	ldrsb.w	r3, [r0, #1]
1000f00c:	704b      	strb	r3, [r1, #1]
1000f00e:	2a01      	cmp	r2, #1
1000f010:	bf1c      	itt	ne
1000f012:	f990 3002 	ldrsbne.w	r3, [r0, #2]
1000f016:	708b      	strbne	r3, [r1, #2]
1000f018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000f01c:	4770      	bx	lr
1000f01e:	1883      	adds	r3, r0, r2
1000f020:	428b      	cmp	r3, r1
1000f022:	d9a7      	bls.n	1000ef74 <st_int8_copy+0xc>
1000f024:	4283      	cmp	r3, r0
1000f026:	440a      	add	r2, r1
1000f028:	d9f8      	bls.n	1000f01c <st_int8_copy+0xb4>
1000f02a:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
1000f02e:	f802 1d01 	strb.w	r1, [r2, #-1]!
1000f032:	4283      	cmp	r3, r0
1000f034:	d1f9      	bne.n	1000f02a <st_int8_copy+0xc2>
1000f036:	4770      	bx	lr
1000f038:	4770      	bx	lr
1000f03a:	ea4f 140e 	mov.w	r4, lr, lsl #4
1000f03e:	460b      	mov	r3, r1
1000f040:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
1000f044:	4684      	mov	ip, r0
1000f046:	f8dc 7000 	ldr.w	r7, [ip]
1000f04a:	f8dc 6004 	ldr.w	r6, [ip, #4]
1000f04e:	f8dc 5008 	ldr.w	r5, [ip, #8]
1000f052:	f8dc 800c 	ldr.w	r8, [ip, #12]
1000f056:	f8c3 800c 	str.w	r8, [r3, #12]
1000f05a:	601f      	str	r7, [r3, #0]
1000f05c:	605e      	str	r6, [r3, #4]
1000f05e:	609d      	str	r5, [r3, #8]
1000f060:	3310      	adds	r3, #16
1000f062:	459e      	cmp	lr, r3
1000f064:	f10c 0c10 	add.w	ip, ip, #16
1000f068:	d1ed      	bne.n	1000f046 <st_int8_copy+0xde>
1000f06a:	e7b2      	b.n	1000efd2 <st_int8_copy+0x6a>
1000f06c:	0893      	lsrs	r3, r2, #2
1000f06e:	f002 0203 	and.w	r2, r2, #3
1000f072:	e7b4      	b.n	1000efde <st_int8_copy+0x76>

1000f074 <ai_array_to_buffer_fmt>:
1000f074:	f3c0 4343 	ubfx	r3, r0, #17, #4
1000f078:	2b02      	cmp	r3, #2
1000f07a:	d050      	beq.n	1000f11e <ai_array_to_buffer_fmt+0xaa>
1000f07c:	4b2a      	ldr	r3, [pc, #168]	; (1000f128 <ai_array_to_buffer_fmt+0xb4>)
1000f07e:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
1000f082:	429a      	cmp	r2, r3
1000f084:	d00b      	beq.n	1000f09e <ai_array_to_buffer_fmt+0x2a>
1000f086:	dc1c      	bgt.n	1000f0c2 <ai_array_to_buffer_fmt+0x4e>
1000f088:	4b28      	ldr	r3, [pc, #160]	; (1000f12c <ai_array_to_buffer_fmt+0xb8>)
1000f08a:	429a      	cmp	r2, r3
1000f08c:	d007      	beq.n	1000f09e <ai_array_to_buffer_fmt+0x2a>
1000f08e:	dd0b      	ble.n	1000f0a8 <ai_array_to_buffer_fmt+0x34>
1000f090:	4b27      	ldr	r3, [pc, #156]	; (1000f130 <ai_array_to_buffer_fmt+0xbc>)
1000f092:	429a      	cmp	r2, r3
1000f094:	d003      	beq.n	1000f09e <ai_array_to_buffer_fmt+0x2a>
1000f096:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
1000f09a:	429a      	cmp	r2, r3
1000f09c:	d131      	bne.n	1000f102 <ai_array_to_buffer_fmt+0x8e>
1000f09e:	4613      	mov	r3, r2
1000f0a0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
1000f0a4:	4318      	orrs	r0, r3
1000f0a6:	4770      	bx	lr
1000f0a8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
1000f0ac:	429a      	cmp	r2, r3
1000f0ae:	d0f6      	beq.n	1000f09e <ai_array_to_buffer_fmt+0x2a>
1000f0b0:	dd2c      	ble.n	1000f10c <ai_array_to_buffer_fmt+0x98>
1000f0b2:	4b20      	ldr	r3, [pc, #128]	; (1000f134 <ai_array_to_buffer_fmt+0xc0>)
1000f0b4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
1000f0b8:	429a      	cmp	r2, r3
1000f0ba:	bf18      	it	ne
1000f0bc:	2340      	movne	r3, #64	; 0x40
1000f0be:	4318      	orrs	r0, r3
1000f0c0:	4770      	bx	lr
1000f0c2:	4b1d      	ldr	r3, [pc, #116]	; (1000f138 <ai_array_to_buffer_fmt+0xc4>)
1000f0c4:	429a      	cmp	r2, r3
1000f0c6:	d0ea      	beq.n	1000f09e <ai_array_to_buffer_fmt+0x2a>
1000f0c8:	dd0e      	ble.n	1000f0e8 <ai_array_to_buffer_fmt+0x74>
1000f0ca:	4b1c      	ldr	r3, [pc, #112]	; (1000f13c <ai_array_to_buffer_fmt+0xc8>)
1000f0cc:	429a      	cmp	r2, r3
1000f0ce:	d0e6      	beq.n	1000f09e <ai_array_to_buffer_fmt+0x2a>
1000f0d0:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
1000f0d4:	429a      	cmp	r2, r3
1000f0d6:	d0e2      	beq.n	1000f09e <ai_array_to_buffer_fmt+0x2a>
1000f0d8:	4b19      	ldr	r3, [pc, #100]	; (1000f140 <ai_array_to_buffer_fmt+0xcc>)
1000f0da:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
1000f0de:	429a      	cmp	r2, r3
1000f0e0:	bf18      	it	ne
1000f0e2:	2340      	movne	r3, #64	; 0x40
1000f0e4:	4318      	orrs	r0, r3
1000f0e6:	4770      	bx	lr
1000f0e8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
1000f0ec:	429a      	cmp	r2, r3
1000f0ee:	d0d6      	beq.n	1000f09e <ai_array_to_buffer_fmt+0x2a>
1000f0f0:	3307      	adds	r3, #7
1000f0f2:	429a      	cmp	r2, r3
1000f0f4:	d0d3      	beq.n	1000f09e <ai_array_to_buffer_fmt+0x2a>
1000f0f6:	f2a3 3387 	subw	r3, r3, #903	; 0x387
1000f0fa:	429a      	cmp	r2, r3
1000f0fc:	bf18      	it	ne
1000f0fe:	2340      	movne	r3, #64	; 0x40
1000f100:	e7ce      	b.n	1000f0a0 <ai_array_to_buffer_fmt+0x2c>
1000f102:	4b10      	ldr	r3, [pc, #64]	; (1000f144 <ai_array_to_buffer_fmt+0xd0>)
1000f104:	429a      	cmp	r2, r3
1000f106:	bf18      	it	ne
1000f108:	2340      	movne	r3, #64	; 0x40
1000f10a:	e7c9      	b.n	1000f0a0 <ai_array_to_buffer_fmt+0x2c>
1000f10c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
1000f110:	429a      	cmp	r2, r3
1000f112:	d0c4      	beq.n	1000f09e <ai_array_to_buffer_fmt+0x2a>
1000f114:	3380      	adds	r3, #128	; 0x80
1000f116:	429a      	cmp	r2, r3
1000f118:	bf18      	it	ne
1000f11a:	2340      	movne	r3, #64	; 0x40
1000f11c:	e7c0      	b.n	1000f0a0 <ai_array_to_buffer_fmt+0x2c>
1000f11e:	4b0a      	ldr	r3, [pc, #40]	; (1000f148 <ai_array_to_buffer_fmt+0xd4>)
1000f120:	4003      	ands	r3, r0
1000f122:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
1000f126:	e7bb      	b.n	1000f0a0 <ai_array_to_buffer_fmt+0x2c>
1000f128:	00840040 	.word	0x00840040
1000f12c:	00040840 	.word	0x00040840
1000f130:	00041040 	.word	0x00041040
1000f134:	00040447 	.word	0x00040447
1000f138:	00840840 	.word	0x00840840
1000f13c:	00841040 	.word	0x00841040
1000f140:	0084084f 	.word	0x0084084f
1000f144:	0004084f 	.word	0x0004084f
1000f148:	00803fff 	.word	0x00803fff

1000f14c <ai_array_get_byte_size>:
1000f14c:	b319      	cbz	r1, 1000f196 <ai_array_get_byte_size+0x4a>
1000f14e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
1000f152:	fb03 f101 	mul.w	r1, r3, r1
1000f156:	3107      	adds	r1, #7
1000f158:	f3c0 4243 	ubfx	r2, r0, #17, #4
1000f15c:	f021 0307 	bic.w	r3, r1, #7
1000f160:	2a04      	cmp	r2, #4
1000f162:	f3c0 5141 	ubfx	r1, r0, #21, #2
1000f166:	fa23 f101 	lsr.w	r1, r3, r1
1000f16a:	ea4f 10e0 	mov.w	r0, r0, asr #7
1000f16e:	d00b      	beq.n	1000f188 <ai_array_get_byte_size+0x3c>
1000f170:	2a08      	cmp	r2, #8
1000f172:	d002      	beq.n	1000f17a <ai_array_get_byte_size+0x2e>
1000f174:	3107      	adds	r1, #7
1000f176:	08c8      	lsrs	r0, r1, #3
1000f178:	4770      	bx	lr
1000f17a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
1000f17e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
1000f182:	3107      	adds	r1, #7
1000f184:	08c8      	lsrs	r0, r1, #3
1000f186:	4770      	bx	lr
1000f188:	f000 007f 	and.w	r0, r0, #127	; 0x7f
1000f18c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
1000f190:	3107      	adds	r1, #7
1000f192:	08c8      	lsrs	r0, r1, #3
1000f194:	4770      	bx	lr
1000f196:	4608      	mov	r0, r1
1000f198:	4770      	bx	lr
1000f19a:	bf00      	nop

1000f19c <ai_array_get_data_byte_size>:
1000f19c:	b169      	cbz	r1, 1000f1ba <ai_array_get_data_byte_size+0x1e>
1000f19e:	f3c0 12c6 	ubfx	r2, r0, #7, #7
1000f1a2:	fb02 f101 	mul.w	r1, r2, r1
1000f1a6:	1dcb      	adds	r3, r1, #7
1000f1a8:	f023 0307 	bic.w	r3, r3, #7
1000f1ac:	f3c0 5041 	ubfx	r0, r0, #21, #2
1000f1b0:	fa23 f000 	lsr.w	r0, r3, r0
1000f1b4:	3007      	adds	r0, #7
1000f1b6:	08c0      	lsrs	r0, r0, #3
1000f1b8:	4770      	bx	lr
1000f1ba:	4608      	mov	r0, r1
1000f1bc:	4770      	bx	lr
1000f1be:	bf00      	nop

1000f1c0 <ai_version_get>:
1000f1c0:	0212      	lsls	r2, r2, #8
1000f1c2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
1000f1c6:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
1000f1ca:	4770      	bx	lr

1000f1cc <get_tensor_byte_size>:
1000f1cc:	b410      	push	{r4}
1000f1ce:	6983      	ldr	r3, [r0, #24]
1000f1d0:	68c4      	ldr	r4, [r0, #12]
1000f1d2:	6941      	ldr	r1, [r0, #20]
1000f1d4:	681b      	ldr	r3, [r3, #0]
1000f1d6:	68e0      	ldr	r0, [r4, #12]
1000f1d8:	4a07      	ldr	r2, [pc, #28]	; (1000f1f8 <get_tensor_byte_size+0x2c>)
1000f1da:	68c9      	ldr	r1, [r1, #12]
1000f1dc:	f85d 4b04 	ldr.w	r4, [sp], #4
1000f1e0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
1000f1e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
1000f1e8:	fb01 f000 	mul.w	r0, r1, r0
1000f1ec:	4293      	cmp	r3, r2
1000f1ee:	bf04      	itt	eq
1000f1f0:	3007      	addeq	r0, #7
1000f1f2:	08c0      	lsreq	r0, r0, #3
1000f1f4:	4770      	bx	lr
1000f1f6:	bf00      	nop
1000f1f8:	000400c0 	.word	0x000400c0

1000f1fc <__assert_func>:
1000f1fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000f1fe:	4614      	mov	r4, r2
1000f200:	461a      	mov	r2, r3
1000f202:	4b09      	ldr	r3, [pc, #36]	; (1000f228 <__assert_func+0x2c>)
1000f204:	681b      	ldr	r3, [r3, #0]
1000f206:	4605      	mov	r5, r0
1000f208:	68d8      	ldr	r0, [r3, #12]
1000f20a:	b14c      	cbz	r4, 1000f220 <__assert_func+0x24>
1000f20c:	4b07      	ldr	r3, [pc, #28]	; (1000f22c <__assert_func+0x30>)
1000f20e:	9100      	str	r1, [sp, #0]
1000f210:	e9cd 3401 	strd	r3, r4, [sp, #4]
1000f214:	4906      	ldr	r1, [pc, #24]	; (1000f230 <__assert_func+0x34>)
1000f216:	462b      	mov	r3, r5
1000f218:	f000 fe04 	bl	1000fe24 <fiprintf>
1000f21c:	f000 ff57 	bl	100100ce <abort>
1000f220:	4b04      	ldr	r3, [pc, #16]	; (1000f234 <__assert_func+0x38>)
1000f222:	461c      	mov	r4, r3
1000f224:	e7f3      	b.n	1000f20e <__assert_func+0x12>
1000f226:	bf00      	nop
1000f228:	10020bd0 	.word	0x10020bd0
1000f22c:	10016858 	.word	0x10016858
1000f230:	10016865 	.word	0x10016865
1000f234:	10016893 	.word	0x10016893

1000f238 <malloc>:
1000f238:	4b02      	ldr	r3, [pc, #8]	; (1000f244 <malloc+0xc>)
1000f23a:	4601      	mov	r1, r0
1000f23c:	6818      	ldr	r0, [r3, #0]
1000f23e:	f000 b82b 	b.w	1000f298 <_malloc_r>
1000f242:	bf00      	nop
1000f244:	10020bd0 	.word	0x10020bd0

1000f248 <free>:
1000f248:	4b02      	ldr	r3, [pc, #8]	; (1000f254 <free+0xc>)
1000f24a:	4601      	mov	r1, r0
1000f24c:	6818      	ldr	r0, [r3, #0]
1000f24e:	f001 bdc1 	b.w	10010dd4 <_free_r>
1000f252:	bf00      	nop
1000f254:	10020bd0 	.word	0x10020bd0

1000f258 <sbrk_aligned>:
1000f258:	b570      	push	{r4, r5, r6, lr}
1000f25a:	4e0e      	ldr	r6, [pc, #56]	; (1000f294 <sbrk_aligned+0x3c>)
1000f25c:	460c      	mov	r4, r1
1000f25e:	6831      	ldr	r1, [r6, #0]
1000f260:	4605      	mov	r5, r0
1000f262:	b911      	cbnz	r1, 1000f26a <sbrk_aligned+0x12>
1000f264:	f000 fed6 	bl	10010014 <_sbrk_r>
1000f268:	6030      	str	r0, [r6, #0]
1000f26a:	4621      	mov	r1, r4
1000f26c:	4628      	mov	r0, r5
1000f26e:	f000 fed1 	bl	10010014 <_sbrk_r>
1000f272:	1c43      	adds	r3, r0, #1
1000f274:	d00a      	beq.n	1000f28c <sbrk_aligned+0x34>
1000f276:	1cc4      	adds	r4, r0, #3
1000f278:	f024 0403 	bic.w	r4, r4, #3
1000f27c:	42a0      	cmp	r0, r4
1000f27e:	d007      	beq.n	1000f290 <sbrk_aligned+0x38>
1000f280:	1a21      	subs	r1, r4, r0
1000f282:	4628      	mov	r0, r5
1000f284:	f000 fec6 	bl	10010014 <_sbrk_r>
1000f288:	3001      	adds	r0, #1
1000f28a:	d101      	bne.n	1000f290 <sbrk_aligned+0x38>
1000f28c:	f04f 34ff 	mov.w	r4, #4294967295
1000f290:	4620      	mov	r0, r4
1000f292:	bd70      	pop	{r4, r5, r6, pc}
1000f294:	10029c98 	.word	0x10029c98

1000f298 <_malloc_r>:
1000f298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1000f29c:	1ccd      	adds	r5, r1, #3
1000f29e:	f025 0503 	bic.w	r5, r5, #3
1000f2a2:	3508      	adds	r5, #8
1000f2a4:	2d0c      	cmp	r5, #12
1000f2a6:	bf38      	it	cc
1000f2a8:	250c      	movcc	r5, #12
1000f2aa:	2d00      	cmp	r5, #0
1000f2ac:	4607      	mov	r7, r0
1000f2ae:	db01      	blt.n	1000f2b4 <_malloc_r+0x1c>
1000f2b0:	42a9      	cmp	r1, r5
1000f2b2:	d905      	bls.n	1000f2c0 <_malloc_r+0x28>
1000f2b4:	230c      	movs	r3, #12
1000f2b6:	603b      	str	r3, [r7, #0]
1000f2b8:	2600      	movs	r6, #0
1000f2ba:	4630      	mov	r0, r6
1000f2bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000f2c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 1000f394 <_malloc_r+0xfc>
1000f2c4:	f000 f868 	bl	1000f398 <__malloc_lock>
1000f2c8:	f8d8 3000 	ldr.w	r3, [r8]
1000f2cc:	461c      	mov	r4, r3
1000f2ce:	bb5c      	cbnz	r4, 1000f328 <_malloc_r+0x90>
1000f2d0:	4629      	mov	r1, r5
1000f2d2:	4638      	mov	r0, r7
1000f2d4:	f7ff ffc0 	bl	1000f258 <sbrk_aligned>
1000f2d8:	1c43      	adds	r3, r0, #1
1000f2da:	4604      	mov	r4, r0
1000f2dc:	d155      	bne.n	1000f38a <_malloc_r+0xf2>
1000f2de:	f8d8 4000 	ldr.w	r4, [r8]
1000f2e2:	4626      	mov	r6, r4
1000f2e4:	2e00      	cmp	r6, #0
1000f2e6:	d145      	bne.n	1000f374 <_malloc_r+0xdc>
1000f2e8:	2c00      	cmp	r4, #0
1000f2ea:	d048      	beq.n	1000f37e <_malloc_r+0xe6>
1000f2ec:	6823      	ldr	r3, [r4, #0]
1000f2ee:	4631      	mov	r1, r6
1000f2f0:	4638      	mov	r0, r7
1000f2f2:	eb04 0903 	add.w	r9, r4, r3
1000f2f6:	f000 fe8d 	bl	10010014 <_sbrk_r>
1000f2fa:	4581      	cmp	r9, r0
1000f2fc:	d13f      	bne.n	1000f37e <_malloc_r+0xe6>
1000f2fe:	6821      	ldr	r1, [r4, #0]
1000f300:	1a6d      	subs	r5, r5, r1
1000f302:	4629      	mov	r1, r5
1000f304:	4638      	mov	r0, r7
1000f306:	f7ff ffa7 	bl	1000f258 <sbrk_aligned>
1000f30a:	3001      	adds	r0, #1
1000f30c:	d037      	beq.n	1000f37e <_malloc_r+0xe6>
1000f30e:	6823      	ldr	r3, [r4, #0]
1000f310:	442b      	add	r3, r5
1000f312:	6023      	str	r3, [r4, #0]
1000f314:	f8d8 3000 	ldr.w	r3, [r8]
1000f318:	2b00      	cmp	r3, #0
1000f31a:	d038      	beq.n	1000f38e <_malloc_r+0xf6>
1000f31c:	685a      	ldr	r2, [r3, #4]
1000f31e:	42a2      	cmp	r2, r4
1000f320:	d12b      	bne.n	1000f37a <_malloc_r+0xe2>
1000f322:	2200      	movs	r2, #0
1000f324:	605a      	str	r2, [r3, #4]
1000f326:	e00f      	b.n	1000f348 <_malloc_r+0xb0>
1000f328:	6822      	ldr	r2, [r4, #0]
1000f32a:	1b52      	subs	r2, r2, r5
1000f32c:	d41f      	bmi.n	1000f36e <_malloc_r+0xd6>
1000f32e:	2a0b      	cmp	r2, #11
1000f330:	d917      	bls.n	1000f362 <_malloc_r+0xca>
1000f332:	1961      	adds	r1, r4, r5
1000f334:	42a3      	cmp	r3, r4
1000f336:	6025      	str	r5, [r4, #0]
1000f338:	bf18      	it	ne
1000f33a:	6059      	strne	r1, [r3, #4]
1000f33c:	6863      	ldr	r3, [r4, #4]
1000f33e:	bf08      	it	eq
1000f340:	f8c8 1000 	streq.w	r1, [r8]
1000f344:	5162      	str	r2, [r4, r5]
1000f346:	604b      	str	r3, [r1, #4]
1000f348:	4638      	mov	r0, r7
1000f34a:	f104 060b 	add.w	r6, r4, #11
1000f34e:	f000 f829 	bl	1000f3a4 <__malloc_unlock>
1000f352:	f026 0607 	bic.w	r6, r6, #7
1000f356:	1d23      	adds	r3, r4, #4
1000f358:	1af2      	subs	r2, r6, r3
1000f35a:	d0ae      	beq.n	1000f2ba <_malloc_r+0x22>
1000f35c:	1b9b      	subs	r3, r3, r6
1000f35e:	50a3      	str	r3, [r4, r2]
1000f360:	e7ab      	b.n	1000f2ba <_malloc_r+0x22>
1000f362:	42a3      	cmp	r3, r4
1000f364:	6862      	ldr	r2, [r4, #4]
1000f366:	d1dd      	bne.n	1000f324 <_malloc_r+0x8c>
1000f368:	f8c8 2000 	str.w	r2, [r8]
1000f36c:	e7ec      	b.n	1000f348 <_malloc_r+0xb0>
1000f36e:	4623      	mov	r3, r4
1000f370:	6864      	ldr	r4, [r4, #4]
1000f372:	e7ac      	b.n	1000f2ce <_malloc_r+0x36>
1000f374:	4634      	mov	r4, r6
1000f376:	6876      	ldr	r6, [r6, #4]
1000f378:	e7b4      	b.n	1000f2e4 <_malloc_r+0x4c>
1000f37a:	4613      	mov	r3, r2
1000f37c:	e7cc      	b.n	1000f318 <_malloc_r+0x80>
1000f37e:	230c      	movs	r3, #12
1000f380:	603b      	str	r3, [r7, #0]
1000f382:	4638      	mov	r0, r7
1000f384:	f000 f80e 	bl	1000f3a4 <__malloc_unlock>
1000f388:	e797      	b.n	1000f2ba <_malloc_r+0x22>
1000f38a:	6025      	str	r5, [r4, #0]
1000f38c:	e7dc      	b.n	1000f348 <_malloc_r+0xb0>
1000f38e:	605b      	str	r3, [r3, #4]
1000f390:	deff      	udf	#255	; 0xff
1000f392:	bf00      	nop
1000f394:	10029c94 	.word	0x10029c94

1000f398 <__malloc_lock>:
1000f398:	4801      	ldr	r0, [pc, #4]	; (1000f3a0 <__malloc_lock+0x8>)
1000f39a:	f000 be88 	b.w	100100ae <__retarget_lock_acquire_recursive>
1000f39e:	bf00      	nop
1000f3a0:	10029ddc 	.word	0x10029ddc

1000f3a4 <__malloc_unlock>:
1000f3a4:	4801      	ldr	r0, [pc, #4]	; (1000f3ac <__malloc_unlock+0x8>)
1000f3a6:	f000 be83 	b.w	100100b0 <__retarget_lock_release_recursive>
1000f3aa:	bf00      	nop
1000f3ac:	10029ddc 	.word	0x10029ddc

1000f3b0 <_realloc_r>:
1000f3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000f3b4:	4680      	mov	r8, r0
1000f3b6:	4614      	mov	r4, r2
1000f3b8:	460e      	mov	r6, r1
1000f3ba:	b921      	cbnz	r1, 1000f3c6 <_realloc_r+0x16>
1000f3bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1000f3c0:	4611      	mov	r1, r2
1000f3c2:	f7ff bf69 	b.w	1000f298 <_malloc_r>
1000f3c6:	b92a      	cbnz	r2, 1000f3d4 <_realloc_r+0x24>
1000f3c8:	f001 fd04 	bl	10010dd4 <_free_r>
1000f3cc:	4625      	mov	r5, r4
1000f3ce:	4628      	mov	r0, r5
1000f3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000f3d4:	f002 f8c6 	bl	10011564 <_malloc_usable_size_r>
1000f3d8:	4284      	cmp	r4, r0
1000f3da:	4607      	mov	r7, r0
1000f3dc:	d802      	bhi.n	1000f3e4 <_realloc_r+0x34>
1000f3de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
1000f3e2:	d812      	bhi.n	1000f40a <_realloc_r+0x5a>
1000f3e4:	4621      	mov	r1, r4
1000f3e6:	4640      	mov	r0, r8
1000f3e8:	f7ff ff56 	bl	1000f298 <_malloc_r>
1000f3ec:	4605      	mov	r5, r0
1000f3ee:	2800      	cmp	r0, #0
1000f3f0:	d0ed      	beq.n	1000f3ce <_realloc_r+0x1e>
1000f3f2:	42bc      	cmp	r4, r7
1000f3f4:	4622      	mov	r2, r4
1000f3f6:	4631      	mov	r1, r6
1000f3f8:	bf28      	it	cs
1000f3fa:	463a      	movcs	r2, r7
1000f3fc:	f000 fe59 	bl	100100b2 <memcpy>
1000f400:	4631      	mov	r1, r6
1000f402:	4640      	mov	r0, r8
1000f404:	f001 fce6 	bl	10010dd4 <_free_r>
1000f408:	e7e1      	b.n	1000f3ce <_realloc_r+0x1e>
1000f40a:	4635      	mov	r5, r6
1000f40c:	e7df      	b.n	1000f3ce <_realloc_r+0x1e>

1000f40e <__cvt>:
1000f40e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
1000f412:	ec55 4b10 	vmov	r4, r5, d0
1000f416:	2d00      	cmp	r5, #0
1000f418:	460e      	mov	r6, r1
1000f41a:	4619      	mov	r1, r3
1000f41c:	462b      	mov	r3, r5
1000f41e:	bfbb      	ittet	lt
1000f420:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
1000f424:	461d      	movlt	r5, r3
1000f426:	2300      	movge	r3, #0
1000f428:	232d      	movlt	r3, #45	; 0x2d
1000f42a:	700b      	strb	r3, [r1, #0]
1000f42c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000f42e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
1000f432:	4691      	mov	r9, r2
1000f434:	f023 0820 	bic.w	r8, r3, #32
1000f438:	bfbc      	itt	lt
1000f43a:	4622      	movlt	r2, r4
1000f43c:	4614      	movlt	r4, r2
1000f43e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
1000f442:	d005      	beq.n	1000f450 <__cvt+0x42>
1000f444:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
1000f448:	d100      	bne.n	1000f44c <__cvt+0x3e>
1000f44a:	3601      	adds	r6, #1
1000f44c:	2102      	movs	r1, #2
1000f44e:	e000      	b.n	1000f452 <__cvt+0x44>
1000f450:	2103      	movs	r1, #3
1000f452:	ab03      	add	r3, sp, #12
1000f454:	9301      	str	r3, [sp, #4]
1000f456:	ab02      	add	r3, sp, #8
1000f458:	9300      	str	r3, [sp, #0]
1000f45a:	ec45 4b10 	vmov	d0, r4, r5
1000f45e:	4653      	mov	r3, sl
1000f460:	4632      	mov	r2, r6
1000f462:	f000 fec5 	bl	100101f0 <_dtoa_r>
1000f466:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
1000f46a:	4607      	mov	r7, r0
1000f46c:	d102      	bne.n	1000f474 <__cvt+0x66>
1000f46e:	f019 0f01 	tst.w	r9, #1
1000f472:	d022      	beq.n	1000f4ba <__cvt+0xac>
1000f474:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
1000f478:	eb07 0906 	add.w	r9, r7, r6
1000f47c:	d110      	bne.n	1000f4a0 <__cvt+0x92>
1000f47e:	783b      	ldrb	r3, [r7, #0]
1000f480:	2b30      	cmp	r3, #48	; 0x30
1000f482:	d10a      	bne.n	1000f49a <__cvt+0x8c>
1000f484:	2200      	movs	r2, #0
1000f486:	2300      	movs	r3, #0
1000f488:	4620      	mov	r0, r4
1000f48a:	4629      	mov	r1, r5
1000f48c:	f7f1 fa64 	bl	10000958 <__aeabi_dcmpeq>
1000f490:	b918      	cbnz	r0, 1000f49a <__cvt+0x8c>
1000f492:	f1c6 0601 	rsb	r6, r6, #1
1000f496:	f8ca 6000 	str.w	r6, [sl]
1000f49a:	f8da 3000 	ldr.w	r3, [sl]
1000f49e:	4499      	add	r9, r3
1000f4a0:	2200      	movs	r2, #0
1000f4a2:	2300      	movs	r3, #0
1000f4a4:	4620      	mov	r0, r4
1000f4a6:	4629      	mov	r1, r5
1000f4a8:	f7f1 fa56 	bl	10000958 <__aeabi_dcmpeq>
1000f4ac:	b108      	cbz	r0, 1000f4b2 <__cvt+0xa4>
1000f4ae:	f8cd 900c 	str.w	r9, [sp, #12]
1000f4b2:	2230      	movs	r2, #48	; 0x30
1000f4b4:	9b03      	ldr	r3, [sp, #12]
1000f4b6:	454b      	cmp	r3, r9
1000f4b8:	d307      	bcc.n	1000f4ca <__cvt+0xbc>
1000f4ba:	9b03      	ldr	r3, [sp, #12]
1000f4bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000f4be:	1bdb      	subs	r3, r3, r7
1000f4c0:	4638      	mov	r0, r7
1000f4c2:	6013      	str	r3, [r2, #0]
1000f4c4:	b004      	add	sp, #16
1000f4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000f4ca:	1c59      	adds	r1, r3, #1
1000f4cc:	9103      	str	r1, [sp, #12]
1000f4ce:	701a      	strb	r2, [r3, #0]
1000f4d0:	e7f0      	b.n	1000f4b4 <__cvt+0xa6>

1000f4d2 <__exponent>:
1000f4d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f4d4:	4603      	mov	r3, r0
1000f4d6:	2900      	cmp	r1, #0
1000f4d8:	bfb8      	it	lt
1000f4da:	4249      	neglt	r1, r1
1000f4dc:	f803 2b02 	strb.w	r2, [r3], #2
1000f4e0:	bfb4      	ite	lt
1000f4e2:	222d      	movlt	r2, #45	; 0x2d
1000f4e4:	222b      	movge	r2, #43	; 0x2b
1000f4e6:	2909      	cmp	r1, #9
1000f4e8:	7042      	strb	r2, [r0, #1]
1000f4ea:	dd2a      	ble.n	1000f542 <__exponent+0x70>
1000f4ec:	f10d 0207 	add.w	r2, sp, #7
1000f4f0:	4617      	mov	r7, r2
1000f4f2:	260a      	movs	r6, #10
1000f4f4:	4694      	mov	ip, r2
1000f4f6:	fb91 f5f6 	sdiv	r5, r1, r6
1000f4fa:	fb06 1415 	mls	r4, r6, r5, r1
1000f4fe:	3430      	adds	r4, #48	; 0x30
1000f500:	f80c 4c01 	strb.w	r4, [ip, #-1]
1000f504:	460c      	mov	r4, r1
1000f506:	2c63      	cmp	r4, #99	; 0x63
1000f508:	f102 32ff 	add.w	r2, r2, #4294967295
1000f50c:	4629      	mov	r1, r5
1000f50e:	dcf1      	bgt.n	1000f4f4 <__exponent+0x22>
1000f510:	3130      	adds	r1, #48	; 0x30
1000f512:	f1ac 0402 	sub.w	r4, ip, #2
1000f516:	f802 1c01 	strb.w	r1, [r2, #-1]
1000f51a:	1c41      	adds	r1, r0, #1
1000f51c:	4622      	mov	r2, r4
1000f51e:	42ba      	cmp	r2, r7
1000f520:	d30a      	bcc.n	1000f538 <__exponent+0x66>
1000f522:	f10d 0209 	add.w	r2, sp, #9
1000f526:	eba2 020c 	sub.w	r2, r2, ip
1000f52a:	42bc      	cmp	r4, r7
1000f52c:	bf88      	it	hi
1000f52e:	2200      	movhi	r2, #0
1000f530:	4413      	add	r3, r2
1000f532:	1a18      	subs	r0, r3, r0
1000f534:	b003      	add	sp, #12
1000f536:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f538:	f812 5b01 	ldrb.w	r5, [r2], #1
1000f53c:	f801 5f01 	strb.w	r5, [r1, #1]!
1000f540:	e7ed      	b.n	1000f51e <__exponent+0x4c>
1000f542:	2330      	movs	r3, #48	; 0x30
1000f544:	3130      	adds	r1, #48	; 0x30
1000f546:	7083      	strb	r3, [r0, #2]
1000f548:	70c1      	strb	r1, [r0, #3]
1000f54a:	1d03      	adds	r3, r0, #4
1000f54c:	e7f1      	b.n	1000f532 <__exponent+0x60>
	...

1000f550 <_printf_float>:
1000f550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000f554:	ed2d 8b02 	vpush	{d8}
1000f558:	b08d      	sub	sp, #52	; 0x34
1000f55a:	460c      	mov	r4, r1
1000f55c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1000f560:	4616      	mov	r6, r2
1000f562:	461f      	mov	r7, r3
1000f564:	4605      	mov	r5, r0
1000f566:	f000 fd1d 	bl	1000ffa4 <_localeconv_r>
1000f56a:	f8d0 a000 	ldr.w	sl, [r0]
1000f56e:	4650      	mov	r0, sl
1000f570:	f7f0 fdc6 	bl	10000100 <strlen>
1000f574:	2300      	movs	r3, #0
1000f576:	930a      	str	r3, [sp, #40]	; 0x28
1000f578:	6823      	ldr	r3, [r4, #0]
1000f57a:	9305      	str	r3, [sp, #20]
1000f57c:	f8d8 3000 	ldr.w	r3, [r8]
1000f580:	f894 b018 	ldrb.w	fp, [r4, #24]
1000f584:	3307      	adds	r3, #7
1000f586:	f023 0307 	bic.w	r3, r3, #7
1000f58a:	f103 0208 	add.w	r2, r3, #8
1000f58e:	f8c8 2000 	str.w	r2, [r8]
1000f592:	e9d3 8900 	ldrd	r8, r9, [r3]
1000f596:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
1000f59a:	9307      	str	r3, [sp, #28]
1000f59c:	f8cd 8018 	str.w	r8, [sp, #24]
1000f5a0:	ee08 0a10 	vmov	s16, r0
1000f5a4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
1000f5a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1000f5ac:	4b9e      	ldr	r3, [pc, #632]	; (1000f828 <_printf_float+0x2d8>)
1000f5ae:	f04f 32ff 	mov.w	r2, #4294967295
1000f5b2:	f7f1 fa03 	bl	100009bc <__aeabi_dcmpun>
1000f5b6:	bb88      	cbnz	r0, 1000f61c <_printf_float+0xcc>
1000f5b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1000f5bc:	4b9a      	ldr	r3, [pc, #616]	; (1000f828 <_printf_float+0x2d8>)
1000f5be:	f04f 32ff 	mov.w	r2, #4294967295
1000f5c2:	f7f1 f9dd 	bl	10000980 <__aeabi_dcmple>
1000f5c6:	bb48      	cbnz	r0, 1000f61c <_printf_float+0xcc>
1000f5c8:	2200      	movs	r2, #0
1000f5ca:	2300      	movs	r3, #0
1000f5cc:	4640      	mov	r0, r8
1000f5ce:	4649      	mov	r1, r9
1000f5d0:	f7f1 f9cc 	bl	1000096c <__aeabi_dcmplt>
1000f5d4:	b110      	cbz	r0, 1000f5dc <_printf_float+0x8c>
1000f5d6:	232d      	movs	r3, #45	; 0x2d
1000f5d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1000f5dc:	4a93      	ldr	r2, [pc, #588]	; (1000f82c <_printf_float+0x2dc>)
1000f5de:	4b94      	ldr	r3, [pc, #592]	; (1000f830 <_printf_float+0x2e0>)
1000f5e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
1000f5e4:	bf94      	ite	ls
1000f5e6:	4690      	movls	r8, r2
1000f5e8:	4698      	movhi	r8, r3
1000f5ea:	2303      	movs	r3, #3
1000f5ec:	6123      	str	r3, [r4, #16]
1000f5ee:	9b05      	ldr	r3, [sp, #20]
1000f5f0:	f023 0304 	bic.w	r3, r3, #4
1000f5f4:	6023      	str	r3, [r4, #0]
1000f5f6:	f04f 0900 	mov.w	r9, #0
1000f5fa:	9700      	str	r7, [sp, #0]
1000f5fc:	4633      	mov	r3, r6
1000f5fe:	aa0b      	add	r2, sp, #44	; 0x2c
1000f600:	4621      	mov	r1, r4
1000f602:	4628      	mov	r0, r5
1000f604:	f000 f9da 	bl	1000f9bc <_printf_common>
1000f608:	3001      	adds	r0, #1
1000f60a:	f040 8090 	bne.w	1000f72e <_printf_float+0x1de>
1000f60e:	f04f 30ff 	mov.w	r0, #4294967295
1000f612:	b00d      	add	sp, #52	; 0x34
1000f614:	ecbd 8b02 	vpop	{d8}
1000f618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000f61c:	4642      	mov	r2, r8
1000f61e:	464b      	mov	r3, r9
1000f620:	4640      	mov	r0, r8
1000f622:	4649      	mov	r1, r9
1000f624:	f7f1 f9ca 	bl	100009bc <__aeabi_dcmpun>
1000f628:	b140      	cbz	r0, 1000f63c <_printf_float+0xec>
1000f62a:	464b      	mov	r3, r9
1000f62c:	2b00      	cmp	r3, #0
1000f62e:	bfbc      	itt	lt
1000f630:	232d      	movlt	r3, #45	; 0x2d
1000f632:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
1000f636:	4a7f      	ldr	r2, [pc, #508]	; (1000f834 <_printf_float+0x2e4>)
1000f638:	4b7f      	ldr	r3, [pc, #508]	; (1000f838 <_printf_float+0x2e8>)
1000f63a:	e7d1      	b.n	1000f5e0 <_printf_float+0x90>
1000f63c:	6863      	ldr	r3, [r4, #4]
1000f63e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
1000f642:	9206      	str	r2, [sp, #24]
1000f644:	1c5a      	adds	r2, r3, #1
1000f646:	d13f      	bne.n	1000f6c8 <_printf_float+0x178>
1000f648:	2306      	movs	r3, #6
1000f64a:	6063      	str	r3, [r4, #4]
1000f64c:	9b05      	ldr	r3, [sp, #20]
1000f64e:	6861      	ldr	r1, [r4, #4]
1000f650:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
1000f654:	2300      	movs	r3, #0
1000f656:	9303      	str	r3, [sp, #12]
1000f658:	ab0a      	add	r3, sp, #40	; 0x28
1000f65a:	e9cd b301 	strd	fp, r3, [sp, #4]
1000f65e:	ab09      	add	r3, sp, #36	; 0x24
1000f660:	ec49 8b10 	vmov	d0, r8, r9
1000f664:	9300      	str	r3, [sp, #0]
1000f666:	6022      	str	r2, [r4, #0]
1000f668:	f10d 0323 	add.w	r3, sp, #35	; 0x23
1000f66c:	4628      	mov	r0, r5
1000f66e:	f7ff fece 	bl	1000f40e <__cvt>
1000f672:	9b06      	ldr	r3, [sp, #24]
1000f674:	9909      	ldr	r1, [sp, #36]	; 0x24
1000f676:	2b47      	cmp	r3, #71	; 0x47
1000f678:	4680      	mov	r8, r0
1000f67a:	d108      	bne.n	1000f68e <_printf_float+0x13e>
1000f67c:	1cc8      	adds	r0, r1, #3
1000f67e:	db02      	blt.n	1000f686 <_printf_float+0x136>
1000f680:	6863      	ldr	r3, [r4, #4]
1000f682:	4299      	cmp	r1, r3
1000f684:	dd41      	ble.n	1000f70a <_printf_float+0x1ba>
1000f686:	f1ab 0302 	sub.w	r3, fp, #2
1000f68a:	fa5f fb83 	uxtb.w	fp, r3
1000f68e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
1000f692:	d820      	bhi.n	1000f6d6 <_printf_float+0x186>
1000f694:	3901      	subs	r1, #1
1000f696:	465a      	mov	r2, fp
1000f698:	f104 0050 	add.w	r0, r4, #80	; 0x50
1000f69c:	9109      	str	r1, [sp, #36]	; 0x24
1000f69e:	f7ff ff18 	bl	1000f4d2 <__exponent>
1000f6a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000f6a4:	1813      	adds	r3, r2, r0
1000f6a6:	2a01      	cmp	r2, #1
1000f6a8:	4681      	mov	r9, r0
1000f6aa:	6123      	str	r3, [r4, #16]
1000f6ac:	dc02      	bgt.n	1000f6b4 <_printf_float+0x164>
1000f6ae:	6822      	ldr	r2, [r4, #0]
1000f6b0:	07d2      	lsls	r2, r2, #31
1000f6b2:	d501      	bpl.n	1000f6b8 <_printf_float+0x168>
1000f6b4:	3301      	adds	r3, #1
1000f6b6:	6123      	str	r3, [r4, #16]
1000f6b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
1000f6bc:	2b00      	cmp	r3, #0
1000f6be:	d09c      	beq.n	1000f5fa <_printf_float+0xaa>
1000f6c0:	232d      	movs	r3, #45	; 0x2d
1000f6c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1000f6c6:	e798      	b.n	1000f5fa <_printf_float+0xaa>
1000f6c8:	9a06      	ldr	r2, [sp, #24]
1000f6ca:	2a47      	cmp	r2, #71	; 0x47
1000f6cc:	d1be      	bne.n	1000f64c <_printf_float+0xfc>
1000f6ce:	2b00      	cmp	r3, #0
1000f6d0:	d1bc      	bne.n	1000f64c <_printf_float+0xfc>
1000f6d2:	2301      	movs	r3, #1
1000f6d4:	e7b9      	b.n	1000f64a <_printf_float+0xfa>
1000f6d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
1000f6da:	d118      	bne.n	1000f70e <_printf_float+0x1be>
1000f6dc:	2900      	cmp	r1, #0
1000f6de:	6863      	ldr	r3, [r4, #4]
1000f6e0:	dd0b      	ble.n	1000f6fa <_printf_float+0x1aa>
1000f6e2:	6121      	str	r1, [r4, #16]
1000f6e4:	b913      	cbnz	r3, 1000f6ec <_printf_float+0x19c>
1000f6e6:	6822      	ldr	r2, [r4, #0]
1000f6e8:	07d0      	lsls	r0, r2, #31
1000f6ea:	d502      	bpl.n	1000f6f2 <_printf_float+0x1a2>
1000f6ec:	3301      	adds	r3, #1
1000f6ee:	440b      	add	r3, r1
1000f6f0:	6123      	str	r3, [r4, #16]
1000f6f2:	65a1      	str	r1, [r4, #88]	; 0x58
1000f6f4:	f04f 0900 	mov.w	r9, #0
1000f6f8:	e7de      	b.n	1000f6b8 <_printf_float+0x168>
1000f6fa:	b913      	cbnz	r3, 1000f702 <_printf_float+0x1b2>
1000f6fc:	6822      	ldr	r2, [r4, #0]
1000f6fe:	07d2      	lsls	r2, r2, #31
1000f700:	d501      	bpl.n	1000f706 <_printf_float+0x1b6>
1000f702:	3302      	adds	r3, #2
1000f704:	e7f4      	b.n	1000f6f0 <_printf_float+0x1a0>
1000f706:	2301      	movs	r3, #1
1000f708:	e7f2      	b.n	1000f6f0 <_printf_float+0x1a0>
1000f70a:	f04f 0b67 	mov.w	fp, #103	; 0x67
1000f70e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000f710:	4299      	cmp	r1, r3
1000f712:	db05      	blt.n	1000f720 <_printf_float+0x1d0>
1000f714:	6823      	ldr	r3, [r4, #0]
1000f716:	6121      	str	r1, [r4, #16]
1000f718:	07d8      	lsls	r0, r3, #31
1000f71a:	d5ea      	bpl.n	1000f6f2 <_printf_float+0x1a2>
1000f71c:	1c4b      	adds	r3, r1, #1
1000f71e:	e7e7      	b.n	1000f6f0 <_printf_float+0x1a0>
1000f720:	2900      	cmp	r1, #0
1000f722:	bfd4      	ite	le
1000f724:	f1c1 0202 	rsble	r2, r1, #2
1000f728:	2201      	movgt	r2, #1
1000f72a:	4413      	add	r3, r2
1000f72c:	e7e0      	b.n	1000f6f0 <_printf_float+0x1a0>
1000f72e:	6823      	ldr	r3, [r4, #0]
1000f730:	055a      	lsls	r2, r3, #21
1000f732:	d407      	bmi.n	1000f744 <_printf_float+0x1f4>
1000f734:	6923      	ldr	r3, [r4, #16]
1000f736:	4642      	mov	r2, r8
1000f738:	4631      	mov	r1, r6
1000f73a:	4628      	mov	r0, r5
1000f73c:	47b8      	blx	r7
1000f73e:	3001      	adds	r0, #1
1000f740:	d12c      	bne.n	1000f79c <_printf_float+0x24c>
1000f742:	e764      	b.n	1000f60e <_printf_float+0xbe>
1000f744:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
1000f748:	f240 80e0 	bls.w	1000f90c <_printf_float+0x3bc>
1000f74c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
1000f750:	2200      	movs	r2, #0
1000f752:	2300      	movs	r3, #0
1000f754:	f7f1 f900 	bl	10000958 <__aeabi_dcmpeq>
1000f758:	2800      	cmp	r0, #0
1000f75a:	d034      	beq.n	1000f7c6 <_printf_float+0x276>
1000f75c:	4a37      	ldr	r2, [pc, #220]	; (1000f83c <_printf_float+0x2ec>)
1000f75e:	2301      	movs	r3, #1
1000f760:	4631      	mov	r1, r6
1000f762:	4628      	mov	r0, r5
1000f764:	47b8      	blx	r7
1000f766:	3001      	adds	r0, #1
1000f768:	f43f af51 	beq.w	1000f60e <_printf_float+0xbe>
1000f76c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
1000f770:	429a      	cmp	r2, r3
1000f772:	db02      	blt.n	1000f77a <_printf_float+0x22a>
1000f774:	6823      	ldr	r3, [r4, #0]
1000f776:	07d8      	lsls	r0, r3, #31
1000f778:	d510      	bpl.n	1000f79c <_printf_float+0x24c>
1000f77a:	ee18 3a10 	vmov	r3, s16
1000f77e:	4652      	mov	r2, sl
1000f780:	4631      	mov	r1, r6
1000f782:	4628      	mov	r0, r5
1000f784:	47b8      	blx	r7
1000f786:	3001      	adds	r0, #1
1000f788:	f43f af41 	beq.w	1000f60e <_printf_float+0xbe>
1000f78c:	f04f 0800 	mov.w	r8, #0
1000f790:	f104 091a 	add.w	r9, r4, #26
1000f794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000f796:	3b01      	subs	r3, #1
1000f798:	4543      	cmp	r3, r8
1000f79a:	dc09      	bgt.n	1000f7b0 <_printf_float+0x260>
1000f79c:	6823      	ldr	r3, [r4, #0]
1000f79e:	079b      	lsls	r3, r3, #30
1000f7a0:	f100 8107 	bmi.w	1000f9b2 <_printf_float+0x462>
1000f7a4:	68e0      	ldr	r0, [r4, #12]
1000f7a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000f7a8:	4298      	cmp	r0, r3
1000f7aa:	bfb8      	it	lt
1000f7ac:	4618      	movlt	r0, r3
1000f7ae:	e730      	b.n	1000f612 <_printf_float+0xc2>
1000f7b0:	2301      	movs	r3, #1
1000f7b2:	464a      	mov	r2, r9
1000f7b4:	4631      	mov	r1, r6
1000f7b6:	4628      	mov	r0, r5
1000f7b8:	47b8      	blx	r7
1000f7ba:	3001      	adds	r0, #1
1000f7bc:	f43f af27 	beq.w	1000f60e <_printf_float+0xbe>
1000f7c0:	f108 0801 	add.w	r8, r8, #1
1000f7c4:	e7e6      	b.n	1000f794 <_printf_float+0x244>
1000f7c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000f7c8:	2b00      	cmp	r3, #0
1000f7ca:	dc39      	bgt.n	1000f840 <_printf_float+0x2f0>
1000f7cc:	4a1b      	ldr	r2, [pc, #108]	; (1000f83c <_printf_float+0x2ec>)
1000f7ce:	2301      	movs	r3, #1
1000f7d0:	4631      	mov	r1, r6
1000f7d2:	4628      	mov	r0, r5
1000f7d4:	47b8      	blx	r7
1000f7d6:	3001      	adds	r0, #1
1000f7d8:	f43f af19 	beq.w	1000f60e <_printf_float+0xbe>
1000f7dc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
1000f7e0:	4313      	orrs	r3, r2
1000f7e2:	d102      	bne.n	1000f7ea <_printf_float+0x29a>
1000f7e4:	6823      	ldr	r3, [r4, #0]
1000f7e6:	07d9      	lsls	r1, r3, #31
1000f7e8:	d5d8      	bpl.n	1000f79c <_printf_float+0x24c>
1000f7ea:	ee18 3a10 	vmov	r3, s16
1000f7ee:	4652      	mov	r2, sl
1000f7f0:	4631      	mov	r1, r6
1000f7f2:	4628      	mov	r0, r5
1000f7f4:	47b8      	blx	r7
1000f7f6:	3001      	adds	r0, #1
1000f7f8:	f43f af09 	beq.w	1000f60e <_printf_float+0xbe>
1000f7fc:	f04f 0900 	mov.w	r9, #0
1000f800:	f104 0a1a 	add.w	sl, r4, #26
1000f804:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000f806:	425b      	negs	r3, r3
1000f808:	454b      	cmp	r3, r9
1000f80a:	dc01      	bgt.n	1000f810 <_printf_float+0x2c0>
1000f80c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000f80e:	e792      	b.n	1000f736 <_printf_float+0x1e6>
1000f810:	2301      	movs	r3, #1
1000f812:	4652      	mov	r2, sl
1000f814:	4631      	mov	r1, r6
1000f816:	4628      	mov	r0, r5
1000f818:	47b8      	blx	r7
1000f81a:	3001      	adds	r0, #1
1000f81c:	f43f aef7 	beq.w	1000f60e <_printf_float+0xbe>
1000f820:	f109 0901 	add.w	r9, r9, #1
1000f824:	e7ee      	b.n	1000f804 <_printf_float+0x2b4>
1000f826:	bf00      	nop
1000f828:	7fefffff 	.word	0x7fefffff
1000f82c:	10016894 	.word	0x10016894
1000f830:	10016898 	.word	0x10016898
1000f834:	1001689c 	.word	0x1001689c
1000f838:	100168a0 	.word	0x100168a0
1000f83c:	100168a4 	.word	0x100168a4
1000f840:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000f842:	6da3      	ldr	r3, [r4, #88]	; 0x58
1000f844:	429a      	cmp	r2, r3
1000f846:	bfa8      	it	ge
1000f848:	461a      	movge	r2, r3
1000f84a:	2a00      	cmp	r2, #0
1000f84c:	4691      	mov	r9, r2
1000f84e:	dc37      	bgt.n	1000f8c0 <_printf_float+0x370>
1000f850:	f04f 0b00 	mov.w	fp, #0
1000f854:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
1000f858:	f104 021a 	add.w	r2, r4, #26
1000f85c:	6da3      	ldr	r3, [r4, #88]	; 0x58
1000f85e:	9305      	str	r3, [sp, #20]
1000f860:	eba3 0309 	sub.w	r3, r3, r9
1000f864:	455b      	cmp	r3, fp
1000f866:	dc33      	bgt.n	1000f8d0 <_printf_float+0x380>
1000f868:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
1000f86c:	429a      	cmp	r2, r3
1000f86e:	db3b      	blt.n	1000f8e8 <_printf_float+0x398>
1000f870:	6823      	ldr	r3, [r4, #0]
1000f872:	07da      	lsls	r2, r3, #31
1000f874:	d438      	bmi.n	1000f8e8 <_printf_float+0x398>
1000f876:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
1000f87a:	eba2 0903 	sub.w	r9, r2, r3
1000f87e:	9b05      	ldr	r3, [sp, #20]
1000f880:	1ad2      	subs	r2, r2, r3
1000f882:	4591      	cmp	r9, r2
1000f884:	bfa8      	it	ge
1000f886:	4691      	movge	r9, r2
1000f888:	f1b9 0f00 	cmp.w	r9, #0
1000f88c:	dc35      	bgt.n	1000f8fa <_printf_float+0x3aa>
1000f88e:	f04f 0800 	mov.w	r8, #0
1000f892:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
1000f896:	f104 0a1a 	add.w	sl, r4, #26
1000f89a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
1000f89e:	1a9b      	subs	r3, r3, r2
1000f8a0:	eba3 0309 	sub.w	r3, r3, r9
1000f8a4:	4543      	cmp	r3, r8
1000f8a6:	f77f af79 	ble.w	1000f79c <_printf_float+0x24c>
1000f8aa:	2301      	movs	r3, #1
1000f8ac:	4652      	mov	r2, sl
1000f8ae:	4631      	mov	r1, r6
1000f8b0:	4628      	mov	r0, r5
1000f8b2:	47b8      	blx	r7
1000f8b4:	3001      	adds	r0, #1
1000f8b6:	f43f aeaa 	beq.w	1000f60e <_printf_float+0xbe>
1000f8ba:	f108 0801 	add.w	r8, r8, #1
1000f8be:	e7ec      	b.n	1000f89a <_printf_float+0x34a>
1000f8c0:	4613      	mov	r3, r2
1000f8c2:	4631      	mov	r1, r6
1000f8c4:	4642      	mov	r2, r8
1000f8c6:	4628      	mov	r0, r5
1000f8c8:	47b8      	blx	r7
1000f8ca:	3001      	adds	r0, #1
1000f8cc:	d1c0      	bne.n	1000f850 <_printf_float+0x300>
1000f8ce:	e69e      	b.n	1000f60e <_printf_float+0xbe>
1000f8d0:	2301      	movs	r3, #1
1000f8d2:	4631      	mov	r1, r6
1000f8d4:	4628      	mov	r0, r5
1000f8d6:	9205      	str	r2, [sp, #20]
1000f8d8:	47b8      	blx	r7
1000f8da:	3001      	adds	r0, #1
1000f8dc:	f43f ae97 	beq.w	1000f60e <_printf_float+0xbe>
1000f8e0:	9a05      	ldr	r2, [sp, #20]
1000f8e2:	f10b 0b01 	add.w	fp, fp, #1
1000f8e6:	e7b9      	b.n	1000f85c <_printf_float+0x30c>
1000f8e8:	ee18 3a10 	vmov	r3, s16
1000f8ec:	4652      	mov	r2, sl
1000f8ee:	4631      	mov	r1, r6
1000f8f0:	4628      	mov	r0, r5
1000f8f2:	47b8      	blx	r7
1000f8f4:	3001      	adds	r0, #1
1000f8f6:	d1be      	bne.n	1000f876 <_printf_float+0x326>
1000f8f8:	e689      	b.n	1000f60e <_printf_float+0xbe>
1000f8fa:	9a05      	ldr	r2, [sp, #20]
1000f8fc:	464b      	mov	r3, r9
1000f8fe:	4442      	add	r2, r8
1000f900:	4631      	mov	r1, r6
1000f902:	4628      	mov	r0, r5
1000f904:	47b8      	blx	r7
1000f906:	3001      	adds	r0, #1
1000f908:	d1c1      	bne.n	1000f88e <_printf_float+0x33e>
1000f90a:	e680      	b.n	1000f60e <_printf_float+0xbe>
1000f90c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000f90e:	2a01      	cmp	r2, #1
1000f910:	dc01      	bgt.n	1000f916 <_printf_float+0x3c6>
1000f912:	07db      	lsls	r3, r3, #31
1000f914:	d53a      	bpl.n	1000f98c <_printf_float+0x43c>
1000f916:	2301      	movs	r3, #1
1000f918:	4642      	mov	r2, r8
1000f91a:	4631      	mov	r1, r6
1000f91c:	4628      	mov	r0, r5
1000f91e:	47b8      	blx	r7
1000f920:	3001      	adds	r0, #1
1000f922:	f43f ae74 	beq.w	1000f60e <_printf_float+0xbe>
1000f926:	ee18 3a10 	vmov	r3, s16
1000f92a:	4652      	mov	r2, sl
1000f92c:	4631      	mov	r1, r6
1000f92e:	4628      	mov	r0, r5
1000f930:	47b8      	blx	r7
1000f932:	3001      	adds	r0, #1
1000f934:	f43f ae6b 	beq.w	1000f60e <_printf_float+0xbe>
1000f938:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
1000f93c:	2200      	movs	r2, #0
1000f93e:	2300      	movs	r3, #0
1000f940:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
1000f944:	f7f1 f808 	bl	10000958 <__aeabi_dcmpeq>
1000f948:	b9d8      	cbnz	r0, 1000f982 <_printf_float+0x432>
1000f94a:	f10a 33ff 	add.w	r3, sl, #4294967295
1000f94e:	f108 0201 	add.w	r2, r8, #1
1000f952:	4631      	mov	r1, r6
1000f954:	4628      	mov	r0, r5
1000f956:	47b8      	blx	r7
1000f958:	3001      	adds	r0, #1
1000f95a:	d10e      	bne.n	1000f97a <_printf_float+0x42a>
1000f95c:	e657      	b.n	1000f60e <_printf_float+0xbe>
1000f95e:	2301      	movs	r3, #1
1000f960:	4652      	mov	r2, sl
1000f962:	4631      	mov	r1, r6
1000f964:	4628      	mov	r0, r5
1000f966:	47b8      	blx	r7
1000f968:	3001      	adds	r0, #1
1000f96a:	f43f ae50 	beq.w	1000f60e <_printf_float+0xbe>
1000f96e:	f108 0801 	add.w	r8, r8, #1
1000f972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000f974:	3b01      	subs	r3, #1
1000f976:	4543      	cmp	r3, r8
1000f978:	dcf1      	bgt.n	1000f95e <_printf_float+0x40e>
1000f97a:	464b      	mov	r3, r9
1000f97c:	f104 0250 	add.w	r2, r4, #80	; 0x50
1000f980:	e6da      	b.n	1000f738 <_printf_float+0x1e8>
1000f982:	f04f 0800 	mov.w	r8, #0
1000f986:	f104 0a1a 	add.w	sl, r4, #26
1000f98a:	e7f2      	b.n	1000f972 <_printf_float+0x422>
1000f98c:	2301      	movs	r3, #1
1000f98e:	4642      	mov	r2, r8
1000f990:	e7df      	b.n	1000f952 <_printf_float+0x402>
1000f992:	2301      	movs	r3, #1
1000f994:	464a      	mov	r2, r9
1000f996:	4631      	mov	r1, r6
1000f998:	4628      	mov	r0, r5
1000f99a:	47b8      	blx	r7
1000f99c:	3001      	adds	r0, #1
1000f99e:	f43f ae36 	beq.w	1000f60e <_printf_float+0xbe>
1000f9a2:	f108 0801 	add.w	r8, r8, #1
1000f9a6:	68e3      	ldr	r3, [r4, #12]
1000f9a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
1000f9aa:	1a5b      	subs	r3, r3, r1
1000f9ac:	4543      	cmp	r3, r8
1000f9ae:	dcf0      	bgt.n	1000f992 <_printf_float+0x442>
1000f9b0:	e6f8      	b.n	1000f7a4 <_printf_float+0x254>
1000f9b2:	f04f 0800 	mov.w	r8, #0
1000f9b6:	f104 0919 	add.w	r9, r4, #25
1000f9ba:	e7f4      	b.n	1000f9a6 <_printf_float+0x456>

1000f9bc <_printf_common>:
1000f9bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1000f9c0:	4616      	mov	r6, r2
1000f9c2:	4699      	mov	r9, r3
1000f9c4:	688a      	ldr	r2, [r1, #8]
1000f9c6:	690b      	ldr	r3, [r1, #16]
1000f9c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
1000f9cc:	4293      	cmp	r3, r2
1000f9ce:	bfb8      	it	lt
1000f9d0:	4613      	movlt	r3, r2
1000f9d2:	6033      	str	r3, [r6, #0]
1000f9d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1000f9d8:	4607      	mov	r7, r0
1000f9da:	460c      	mov	r4, r1
1000f9dc:	b10a      	cbz	r2, 1000f9e2 <_printf_common+0x26>
1000f9de:	3301      	adds	r3, #1
1000f9e0:	6033      	str	r3, [r6, #0]
1000f9e2:	6823      	ldr	r3, [r4, #0]
1000f9e4:	0699      	lsls	r1, r3, #26
1000f9e6:	bf42      	ittt	mi
1000f9e8:	6833      	ldrmi	r3, [r6, #0]
1000f9ea:	3302      	addmi	r3, #2
1000f9ec:	6033      	strmi	r3, [r6, #0]
1000f9ee:	6825      	ldr	r5, [r4, #0]
1000f9f0:	f015 0506 	ands.w	r5, r5, #6
1000f9f4:	d106      	bne.n	1000fa04 <_printf_common+0x48>
1000f9f6:	f104 0a19 	add.w	sl, r4, #25
1000f9fa:	68e3      	ldr	r3, [r4, #12]
1000f9fc:	6832      	ldr	r2, [r6, #0]
1000f9fe:	1a9b      	subs	r3, r3, r2
1000fa00:	42ab      	cmp	r3, r5
1000fa02:	dc26      	bgt.n	1000fa52 <_printf_common+0x96>
1000fa04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
1000fa08:	1e13      	subs	r3, r2, #0
1000fa0a:	6822      	ldr	r2, [r4, #0]
1000fa0c:	bf18      	it	ne
1000fa0e:	2301      	movne	r3, #1
1000fa10:	0692      	lsls	r2, r2, #26
1000fa12:	d42b      	bmi.n	1000fa6c <_printf_common+0xb0>
1000fa14:	f104 0243 	add.w	r2, r4, #67	; 0x43
1000fa18:	4649      	mov	r1, r9
1000fa1a:	4638      	mov	r0, r7
1000fa1c:	47c0      	blx	r8
1000fa1e:	3001      	adds	r0, #1
1000fa20:	d01e      	beq.n	1000fa60 <_printf_common+0xa4>
1000fa22:	6823      	ldr	r3, [r4, #0]
1000fa24:	6922      	ldr	r2, [r4, #16]
1000fa26:	f003 0306 	and.w	r3, r3, #6
1000fa2a:	2b04      	cmp	r3, #4
1000fa2c:	bf02      	ittt	eq
1000fa2e:	68e5      	ldreq	r5, [r4, #12]
1000fa30:	6833      	ldreq	r3, [r6, #0]
1000fa32:	1aed      	subeq	r5, r5, r3
1000fa34:	68a3      	ldr	r3, [r4, #8]
1000fa36:	bf0c      	ite	eq
1000fa38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1000fa3c:	2500      	movne	r5, #0
1000fa3e:	4293      	cmp	r3, r2
1000fa40:	bfc4      	itt	gt
1000fa42:	1a9b      	subgt	r3, r3, r2
1000fa44:	18ed      	addgt	r5, r5, r3
1000fa46:	2600      	movs	r6, #0
1000fa48:	341a      	adds	r4, #26
1000fa4a:	42b5      	cmp	r5, r6
1000fa4c:	d11a      	bne.n	1000fa84 <_printf_common+0xc8>
1000fa4e:	2000      	movs	r0, #0
1000fa50:	e008      	b.n	1000fa64 <_printf_common+0xa8>
1000fa52:	2301      	movs	r3, #1
1000fa54:	4652      	mov	r2, sl
1000fa56:	4649      	mov	r1, r9
1000fa58:	4638      	mov	r0, r7
1000fa5a:	47c0      	blx	r8
1000fa5c:	3001      	adds	r0, #1
1000fa5e:	d103      	bne.n	1000fa68 <_printf_common+0xac>
1000fa60:	f04f 30ff 	mov.w	r0, #4294967295
1000fa64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000fa68:	3501      	adds	r5, #1
1000fa6a:	e7c6      	b.n	1000f9fa <_printf_common+0x3e>
1000fa6c:	18e1      	adds	r1, r4, r3
1000fa6e:	1c5a      	adds	r2, r3, #1
1000fa70:	2030      	movs	r0, #48	; 0x30
1000fa72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1000fa76:	4422      	add	r2, r4
1000fa78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1000fa7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1000fa80:	3302      	adds	r3, #2
1000fa82:	e7c7      	b.n	1000fa14 <_printf_common+0x58>
1000fa84:	2301      	movs	r3, #1
1000fa86:	4622      	mov	r2, r4
1000fa88:	4649      	mov	r1, r9
1000fa8a:	4638      	mov	r0, r7
1000fa8c:	47c0      	blx	r8
1000fa8e:	3001      	adds	r0, #1
1000fa90:	d0e6      	beq.n	1000fa60 <_printf_common+0xa4>
1000fa92:	3601      	adds	r6, #1
1000fa94:	e7d9      	b.n	1000fa4a <_printf_common+0x8e>
	...

1000fa98 <_printf_i>:
1000fa98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
1000fa9c:	7e0f      	ldrb	r7, [r1, #24]
1000fa9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
1000faa0:	2f78      	cmp	r7, #120	; 0x78
1000faa2:	4691      	mov	r9, r2
1000faa4:	4680      	mov	r8, r0
1000faa6:	460c      	mov	r4, r1
1000faa8:	469a      	mov	sl, r3
1000faaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
1000faae:	d807      	bhi.n	1000fac0 <_printf_i+0x28>
1000fab0:	2f62      	cmp	r7, #98	; 0x62
1000fab2:	d80a      	bhi.n	1000faca <_printf_i+0x32>
1000fab4:	2f00      	cmp	r7, #0
1000fab6:	f000 80d4 	beq.w	1000fc62 <_printf_i+0x1ca>
1000faba:	2f58      	cmp	r7, #88	; 0x58
1000fabc:	f000 80c0 	beq.w	1000fc40 <_printf_i+0x1a8>
1000fac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
1000fac4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
1000fac8:	e03a      	b.n	1000fb40 <_printf_i+0xa8>
1000faca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
1000face:	2b15      	cmp	r3, #21
1000fad0:	d8f6      	bhi.n	1000fac0 <_printf_i+0x28>
1000fad2:	a101      	add	r1, pc, #4	; (adr r1, 1000fad8 <_printf_i+0x40>)
1000fad4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
1000fad8:	1000fb31 	.word	0x1000fb31
1000fadc:	1000fb45 	.word	0x1000fb45
1000fae0:	1000fac1 	.word	0x1000fac1
1000fae4:	1000fac1 	.word	0x1000fac1
1000fae8:	1000fac1 	.word	0x1000fac1
1000faec:	1000fac1 	.word	0x1000fac1
1000faf0:	1000fb45 	.word	0x1000fb45
1000faf4:	1000fac1 	.word	0x1000fac1
1000faf8:	1000fac1 	.word	0x1000fac1
1000fafc:	1000fac1 	.word	0x1000fac1
1000fb00:	1000fac1 	.word	0x1000fac1
1000fb04:	1000fc49 	.word	0x1000fc49
1000fb08:	1000fb71 	.word	0x1000fb71
1000fb0c:	1000fc03 	.word	0x1000fc03
1000fb10:	1000fac1 	.word	0x1000fac1
1000fb14:	1000fac1 	.word	0x1000fac1
1000fb18:	1000fc6b 	.word	0x1000fc6b
1000fb1c:	1000fac1 	.word	0x1000fac1
1000fb20:	1000fb71 	.word	0x1000fb71
1000fb24:	1000fac1 	.word	0x1000fac1
1000fb28:	1000fac1 	.word	0x1000fac1
1000fb2c:	1000fc0b 	.word	0x1000fc0b
1000fb30:	682b      	ldr	r3, [r5, #0]
1000fb32:	1d1a      	adds	r2, r3, #4
1000fb34:	681b      	ldr	r3, [r3, #0]
1000fb36:	602a      	str	r2, [r5, #0]
1000fb38:	f104 0542 	add.w	r5, r4, #66	; 0x42
1000fb3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1000fb40:	2301      	movs	r3, #1
1000fb42:	e09f      	b.n	1000fc84 <_printf_i+0x1ec>
1000fb44:	6820      	ldr	r0, [r4, #0]
1000fb46:	682b      	ldr	r3, [r5, #0]
1000fb48:	0607      	lsls	r7, r0, #24
1000fb4a:	f103 0104 	add.w	r1, r3, #4
1000fb4e:	6029      	str	r1, [r5, #0]
1000fb50:	d501      	bpl.n	1000fb56 <_printf_i+0xbe>
1000fb52:	681e      	ldr	r6, [r3, #0]
1000fb54:	e003      	b.n	1000fb5e <_printf_i+0xc6>
1000fb56:	0646      	lsls	r6, r0, #25
1000fb58:	d5fb      	bpl.n	1000fb52 <_printf_i+0xba>
1000fb5a:	f9b3 6000 	ldrsh.w	r6, [r3]
1000fb5e:	2e00      	cmp	r6, #0
1000fb60:	da03      	bge.n	1000fb6a <_printf_i+0xd2>
1000fb62:	232d      	movs	r3, #45	; 0x2d
1000fb64:	4276      	negs	r6, r6
1000fb66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1000fb6a:	485a      	ldr	r0, [pc, #360]	; (1000fcd4 <_printf_i+0x23c>)
1000fb6c:	230a      	movs	r3, #10
1000fb6e:	e012      	b.n	1000fb96 <_printf_i+0xfe>
1000fb70:	682b      	ldr	r3, [r5, #0]
1000fb72:	6820      	ldr	r0, [r4, #0]
1000fb74:	1d19      	adds	r1, r3, #4
1000fb76:	6029      	str	r1, [r5, #0]
1000fb78:	0605      	lsls	r5, r0, #24
1000fb7a:	d501      	bpl.n	1000fb80 <_printf_i+0xe8>
1000fb7c:	681e      	ldr	r6, [r3, #0]
1000fb7e:	e002      	b.n	1000fb86 <_printf_i+0xee>
1000fb80:	0641      	lsls	r1, r0, #25
1000fb82:	d5fb      	bpl.n	1000fb7c <_printf_i+0xe4>
1000fb84:	881e      	ldrh	r6, [r3, #0]
1000fb86:	4853      	ldr	r0, [pc, #332]	; (1000fcd4 <_printf_i+0x23c>)
1000fb88:	2f6f      	cmp	r7, #111	; 0x6f
1000fb8a:	bf0c      	ite	eq
1000fb8c:	2308      	moveq	r3, #8
1000fb8e:	230a      	movne	r3, #10
1000fb90:	2100      	movs	r1, #0
1000fb92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1000fb96:	6865      	ldr	r5, [r4, #4]
1000fb98:	60a5      	str	r5, [r4, #8]
1000fb9a:	2d00      	cmp	r5, #0
1000fb9c:	bfa2      	ittt	ge
1000fb9e:	6821      	ldrge	r1, [r4, #0]
1000fba0:	f021 0104 	bicge.w	r1, r1, #4
1000fba4:	6021      	strge	r1, [r4, #0]
1000fba6:	b90e      	cbnz	r6, 1000fbac <_printf_i+0x114>
1000fba8:	2d00      	cmp	r5, #0
1000fbaa:	d04b      	beq.n	1000fc44 <_printf_i+0x1ac>
1000fbac:	4615      	mov	r5, r2
1000fbae:	fbb6 f1f3 	udiv	r1, r6, r3
1000fbb2:	fb03 6711 	mls	r7, r3, r1, r6
1000fbb6:	5dc7      	ldrb	r7, [r0, r7]
1000fbb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
1000fbbc:	4637      	mov	r7, r6
1000fbbe:	42bb      	cmp	r3, r7
1000fbc0:	460e      	mov	r6, r1
1000fbc2:	d9f4      	bls.n	1000fbae <_printf_i+0x116>
1000fbc4:	2b08      	cmp	r3, #8
1000fbc6:	d10b      	bne.n	1000fbe0 <_printf_i+0x148>
1000fbc8:	6823      	ldr	r3, [r4, #0]
1000fbca:	07de      	lsls	r6, r3, #31
1000fbcc:	d508      	bpl.n	1000fbe0 <_printf_i+0x148>
1000fbce:	6923      	ldr	r3, [r4, #16]
1000fbd0:	6861      	ldr	r1, [r4, #4]
1000fbd2:	4299      	cmp	r1, r3
1000fbd4:	bfde      	ittt	le
1000fbd6:	2330      	movle	r3, #48	; 0x30
1000fbd8:	f805 3c01 	strble.w	r3, [r5, #-1]
1000fbdc:	f105 35ff 	addle.w	r5, r5, #4294967295
1000fbe0:	1b52      	subs	r2, r2, r5
1000fbe2:	6122      	str	r2, [r4, #16]
1000fbe4:	f8cd a000 	str.w	sl, [sp]
1000fbe8:	464b      	mov	r3, r9
1000fbea:	aa03      	add	r2, sp, #12
1000fbec:	4621      	mov	r1, r4
1000fbee:	4640      	mov	r0, r8
1000fbf0:	f7ff fee4 	bl	1000f9bc <_printf_common>
1000fbf4:	3001      	adds	r0, #1
1000fbf6:	d14a      	bne.n	1000fc8e <_printf_i+0x1f6>
1000fbf8:	f04f 30ff 	mov.w	r0, #4294967295
1000fbfc:	b004      	add	sp, #16
1000fbfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000fc02:	6823      	ldr	r3, [r4, #0]
1000fc04:	f043 0320 	orr.w	r3, r3, #32
1000fc08:	6023      	str	r3, [r4, #0]
1000fc0a:	4833      	ldr	r0, [pc, #204]	; (1000fcd8 <_printf_i+0x240>)
1000fc0c:	2778      	movs	r7, #120	; 0x78
1000fc0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
1000fc12:	6823      	ldr	r3, [r4, #0]
1000fc14:	6829      	ldr	r1, [r5, #0]
1000fc16:	061f      	lsls	r7, r3, #24
1000fc18:	f851 6b04 	ldr.w	r6, [r1], #4
1000fc1c:	d402      	bmi.n	1000fc24 <_printf_i+0x18c>
1000fc1e:	065f      	lsls	r7, r3, #25
1000fc20:	bf48      	it	mi
1000fc22:	b2b6      	uxthmi	r6, r6
1000fc24:	07df      	lsls	r7, r3, #31
1000fc26:	bf48      	it	mi
1000fc28:	f043 0320 	orrmi.w	r3, r3, #32
1000fc2c:	6029      	str	r1, [r5, #0]
1000fc2e:	bf48      	it	mi
1000fc30:	6023      	strmi	r3, [r4, #0]
1000fc32:	b91e      	cbnz	r6, 1000fc3c <_printf_i+0x1a4>
1000fc34:	6823      	ldr	r3, [r4, #0]
1000fc36:	f023 0320 	bic.w	r3, r3, #32
1000fc3a:	6023      	str	r3, [r4, #0]
1000fc3c:	2310      	movs	r3, #16
1000fc3e:	e7a7      	b.n	1000fb90 <_printf_i+0xf8>
1000fc40:	4824      	ldr	r0, [pc, #144]	; (1000fcd4 <_printf_i+0x23c>)
1000fc42:	e7e4      	b.n	1000fc0e <_printf_i+0x176>
1000fc44:	4615      	mov	r5, r2
1000fc46:	e7bd      	b.n	1000fbc4 <_printf_i+0x12c>
1000fc48:	682b      	ldr	r3, [r5, #0]
1000fc4a:	6826      	ldr	r6, [r4, #0]
1000fc4c:	6961      	ldr	r1, [r4, #20]
1000fc4e:	1d18      	adds	r0, r3, #4
1000fc50:	6028      	str	r0, [r5, #0]
1000fc52:	0635      	lsls	r5, r6, #24
1000fc54:	681b      	ldr	r3, [r3, #0]
1000fc56:	d501      	bpl.n	1000fc5c <_printf_i+0x1c4>
1000fc58:	6019      	str	r1, [r3, #0]
1000fc5a:	e002      	b.n	1000fc62 <_printf_i+0x1ca>
1000fc5c:	0670      	lsls	r0, r6, #25
1000fc5e:	d5fb      	bpl.n	1000fc58 <_printf_i+0x1c0>
1000fc60:	8019      	strh	r1, [r3, #0]
1000fc62:	2300      	movs	r3, #0
1000fc64:	6123      	str	r3, [r4, #16]
1000fc66:	4615      	mov	r5, r2
1000fc68:	e7bc      	b.n	1000fbe4 <_printf_i+0x14c>
1000fc6a:	682b      	ldr	r3, [r5, #0]
1000fc6c:	1d1a      	adds	r2, r3, #4
1000fc6e:	602a      	str	r2, [r5, #0]
1000fc70:	681d      	ldr	r5, [r3, #0]
1000fc72:	6862      	ldr	r2, [r4, #4]
1000fc74:	2100      	movs	r1, #0
1000fc76:	4628      	mov	r0, r5
1000fc78:	f7f0 f9f2 	bl	10000060 <memchr>
1000fc7c:	b108      	cbz	r0, 1000fc82 <_printf_i+0x1ea>
1000fc7e:	1b40      	subs	r0, r0, r5
1000fc80:	6060      	str	r0, [r4, #4]
1000fc82:	6863      	ldr	r3, [r4, #4]
1000fc84:	6123      	str	r3, [r4, #16]
1000fc86:	2300      	movs	r3, #0
1000fc88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1000fc8c:	e7aa      	b.n	1000fbe4 <_printf_i+0x14c>
1000fc8e:	6923      	ldr	r3, [r4, #16]
1000fc90:	462a      	mov	r2, r5
1000fc92:	4649      	mov	r1, r9
1000fc94:	4640      	mov	r0, r8
1000fc96:	47d0      	blx	sl
1000fc98:	3001      	adds	r0, #1
1000fc9a:	d0ad      	beq.n	1000fbf8 <_printf_i+0x160>
1000fc9c:	6823      	ldr	r3, [r4, #0]
1000fc9e:	079b      	lsls	r3, r3, #30
1000fca0:	d413      	bmi.n	1000fcca <_printf_i+0x232>
1000fca2:	68e0      	ldr	r0, [r4, #12]
1000fca4:	9b03      	ldr	r3, [sp, #12]
1000fca6:	4298      	cmp	r0, r3
1000fca8:	bfb8      	it	lt
1000fcaa:	4618      	movlt	r0, r3
1000fcac:	e7a6      	b.n	1000fbfc <_printf_i+0x164>
1000fcae:	2301      	movs	r3, #1
1000fcb0:	4632      	mov	r2, r6
1000fcb2:	4649      	mov	r1, r9
1000fcb4:	4640      	mov	r0, r8
1000fcb6:	47d0      	blx	sl
1000fcb8:	3001      	adds	r0, #1
1000fcba:	d09d      	beq.n	1000fbf8 <_printf_i+0x160>
1000fcbc:	3501      	adds	r5, #1
1000fcbe:	68e3      	ldr	r3, [r4, #12]
1000fcc0:	9903      	ldr	r1, [sp, #12]
1000fcc2:	1a5b      	subs	r3, r3, r1
1000fcc4:	42ab      	cmp	r3, r5
1000fcc6:	dcf2      	bgt.n	1000fcae <_printf_i+0x216>
1000fcc8:	e7eb      	b.n	1000fca2 <_printf_i+0x20a>
1000fcca:	2500      	movs	r5, #0
1000fccc:	f104 0619 	add.w	r6, r4, #25
1000fcd0:	e7f5      	b.n	1000fcbe <_printf_i+0x226>
1000fcd2:	bf00      	nop
1000fcd4:	100168a6 	.word	0x100168a6
1000fcd8:	100168b7 	.word	0x100168b7

1000fcdc <std>:
1000fcdc:	2300      	movs	r3, #0
1000fcde:	b510      	push	{r4, lr}
1000fce0:	4604      	mov	r4, r0
1000fce2:	e9c0 3300 	strd	r3, r3, [r0]
1000fce6:	e9c0 3304 	strd	r3, r3, [r0, #16]
1000fcea:	6083      	str	r3, [r0, #8]
1000fcec:	8181      	strh	r1, [r0, #12]
1000fcee:	6643      	str	r3, [r0, #100]	; 0x64
1000fcf0:	81c2      	strh	r2, [r0, #14]
1000fcf2:	6183      	str	r3, [r0, #24]
1000fcf4:	4619      	mov	r1, r3
1000fcf6:	2208      	movs	r2, #8
1000fcf8:	305c      	adds	r0, #92	; 0x5c
1000fcfa:	f000 f926 	bl	1000ff4a <memset>
1000fcfe:	4b0d      	ldr	r3, [pc, #52]	; (1000fd34 <std+0x58>)
1000fd00:	6263      	str	r3, [r4, #36]	; 0x24
1000fd02:	4b0d      	ldr	r3, [pc, #52]	; (1000fd38 <std+0x5c>)
1000fd04:	62a3      	str	r3, [r4, #40]	; 0x28
1000fd06:	4b0d      	ldr	r3, [pc, #52]	; (1000fd3c <std+0x60>)
1000fd08:	62e3      	str	r3, [r4, #44]	; 0x2c
1000fd0a:	4b0d      	ldr	r3, [pc, #52]	; (1000fd40 <std+0x64>)
1000fd0c:	6323      	str	r3, [r4, #48]	; 0x30
1000fd0e:	4b0d      	ldr	r3, [pc, #52]	; (1000fd44 <std+0x68>)
1000fd10:	6224      	str	r4, [r4, #32]
1000fd12:	429c      	cmp	r4, r3
1000fd14:	d006      	beq.n	1000fd24 <std+0x48>
1000fd16:	f103 0268 	add.w	r2, r3, #104	; 0x68
1000fd1a:	4294      	cmp	r4, r2
1000fd1c:	d002      	beq.n	1000fd24 <std+0x48>
1000fd1e:	33d0      	adds	r3, #208	; 0xd0
1000fd20:	429c      	cmp	r4, r3
1000fd22:	d105      	bne.n	1000fd30 <std+0x54>
1000fd24:	f104 0058 	add.w	r0, r4, #88	; 0x58
1000fd28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000fd2c:	f000 b9be 	b.w	100100ac <__retarget_lock_init_recursive>
1000fd30:	bd10      	pop	{r4, pc}
1000fd32:	bf00      	nop
1000fd34:	1000fec5 	.word	0x1000fec5
1000fd38:	1000fee7 	.word	0x1000fee7
1000fd3c:	1000ff1f 	.word	0x1000ff1f
1000fd40:	1000ff43 	.word	0x1000ff43
1000fd44:	10029c9c 	.word	0x10029c9c

1000fd48 <stdio_exit_handler>:
1000fd48:	4a02      	ldr	r2, [pc, #8]	; (1000fd54 <stdio_exit_handler+0xc>)
1000fd4a:	4903      	ldr	r1, [pc, #12]	; (1000fd58 <stdio_exit_handler+0x10>)
1000fd4c:	4803      	ldr	r0, [pc, #12]	; (1000fd5c <stdio_exit_handler+0x14>)
1000fd4e:	f000 b87b 	b.w	1000fe48 <_fwalk_sglue>
1000fd52:	bf00      	nop
1000fd54:	10020b78 	.word	0x10020b78
1000fd58:	10011bb9 	.word	0x10011bb9
1000fd5c:	10020b84 	.word	0x10020b84

1000fd60 <cleanup_stdio>:
1000fd60:	6841      	ldr	r1, [r0, #4]
1000fd62:	4b0c      	ldr	r3, [pc, #48]	; (1000fd94 <cleanup_stdio+0x34>)
1000fd64:	4299      	cmp	r1, r3
1000fd66:	b510      	push	{r4, lr}
1000fd68:	4604      	mov	r4, r0
1000fd6a:	d001      	beq.n	1000fd70 <cleanup_stdio+0x10>
1000fd6c:	f001 ff24 	bl	10011bb8 <_fflush_r>
1000fd70:	68a1      	ldr	r1, [r4, #8]
1000fd72:	4b09      	ldr	r3, [pc, #36]	; (1000fd98 <cleanup_stdio+0x38>)
1000fd74:	4299      	cmp	r1, r3
1000fd76:	d002      	beq.n	1000fd7e <cleanup_stdio+0x1e>
1000fd78:	4620      	mov	r0, r4
1000fd7a:	f001 ff1d 	bl	10011bb8 <_fflush_r>
1000fd7e:	68e1      	ldr	r1, [r4, #12]
1000fd80:	4b06      	ldr	r3, [pc, #24]	; (1000fd9c <cleanup_stdio+0x3c>)
1000fd82:	4299      	cmp	r1, r3
1000fd84:	d004      	beq.n	1000fd90 <cleanup_stdio+0x30>
1000fd86:	4620      	mov	r0, r4
1000fd88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000fd8c:	f001 bf14 	b.w	10011bb8 <_fflush_r>
1000fd90:	bd10      	pop	{r4, pc}
1000fd92:	bf00      	nop
1000fd94:	10029c9c 	.word	0x10029c9c
1000fd98:	10029d04 	.word	0x10029d04
1000fd9c:	10029d6c 	.word	0x10029d6c

1000fda0 <global_stdio_init.part.0>:
1000fda0:	b510      	push	{r4, lr}
1000fda2:	4b0b      	ldr	r3, [pc, #44]	; (1000fdd0 <global_stdio_init.part.0+0x30>)
1000fda4:	4c0b      	ldr	r4, [pc, #44]	; (1000fdd4 <global_stdio_init.part.0+0x34>)
1000fda6:	4a0c      	ldr	r2, [pc, #48]	; (1000fdd8 <global_stdio_init.part.0+0x38>)
1000fda8:	601a      	str	r2, [r3, #0]
1000fdaa:	4620      	mov	r0, r4
1000fdac:	2200      	movs	r2, #0
1000fdae:	2104      	movs	r1, #4
1000fdb0:	f7ff ff94 	bl	1000fcdc <std>
1000fdb4:	f104 0068 	add.w	r0, r4, #104	; 0x68
1000fdb8:	2201      	movs	r2, #1
1000fdba:	2109      	movs	r1, #9
1000fdbc:	f7ff ff8e 	bl	1000fcdc <std>
1000fdc0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
1000fdc4:	2202      	movs	r2, #2
1000fdc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000fdca:	2112      	movs	r1, #18
1000fdcc:	f7ff bf86 	b.w	1000fcdc <std>
1000fdd0:	10029dd4 	.word	0x10029dd4
1000fdd4:	10029c9c 	.word	0x10029c9c
1000fdd8:	1000fd49 	.word	0x1000fd49

1000fddc <__sfp_lock_acquire>:
1000fddc:	4801      	ldr	r0, [pc, #4]	; (1000fde4 <__sfp_lock_acquire+0x8>)
1000fdde:	f000 b966 	b.w	100100ae <__retarget_lock_acquire_recursive>
1000fde2:	bf00      	nop
1000fde4:	10029ddd 	.word	0x10029ddd

1000fde8 <__sfp_lock_release>:
1000fde8:	4801      	ldr	r0, [pc, #4]	; (1000fdf0 <__sfp_lock_release+0x8>)
1000fdea:	f000 b961 	b.w	100100b0 <__retarget_lock_release_recursive>
1000fdee:	bf00      	nop
1000fdf0:	10029ddd 	.word	0x10029ddd

1000fdf4 <__sinit>:
1000fdf4:	b510      	push	{r4, lr}
1000fdf6:	4604      	mov	r4, r0
1000fdf8:	f7ff fff0 	bl	1000fddc <__sfp_lock_acquire>
1000fdfc:	6a23      	ldr	r3, [r4, #32]
1000fdfe:	b11b      	cbz	r3, 1000fe08 <__sinit+0x14>
1000fe00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000fe04:	f7ff bff0 	b.w	1000fde8 <__sfp_lock_release>
1000fe08:	4b04      	ldr	r3, [pc, #16]	; (1000fe1c <__sinit+0x28>)
1000fe0a:	6223      	str	r3, [r4, #32]
1000fe0c:	4b04      	ldr	r3, [pc, #16]	; (1000fe20 <__sinit+0x2c>)
1000fe0e:	681b      	ldr	r3, [r3, #0]
1000fe10:	2b00      	cmp	r3, #0
1000fe12:	d1f5      	bne.n	1000fe00 <__sinit+0xc>
1000fe14:	f7ff ffc4 	bl	1000fda0 <global_stdio_init.part.0>
1000fe18:	e7f2      	b.n	1000fe00 <__sinit+0xc>
1000fe1a:	bf00      	nop
1000fe1c:	1000fd61 	.word	0x1000fd61
1000fe20:	10029dd4 	.word	0x10029dd4

1000fe24 <fiprintf>:
1000fe24:	b40e      	push	{r1, r2, r3}
1000fe26:	b503      	push	{r0, r1, lr}
1000fe28:	4601      	mov	r1, r0
1000fe2a:	ab03      	add	r3, sp, #12
1000fe2c:	4805      	ldr	r0, [pc, #20]	; (1000fe44 <fiprintf+0x20>)
1000fe2e:	f853 2b04 	ldr.w	r2, [r3], #4
1000fe32:	6800      	ldr	r0, [r0, #0]
1000fe34:	9301      	str	r3, [sp, #4]
1000fe36:	f001 fd1f 	bl	10011878 <_vfiprintf_r>
1000fe3a:	b002      	add	sp, #8
1000fe3c:	f85d eb04 	ldr.w	lr, [sp], #4
1000fe40:	b003      	add	sp, #12
1000fe42:	4770      	bx	lr
1000fe44:	10020bd0 	.word	0x10020bd0

1000fe48 <_fwalk_sglue>:
1000fe48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1000fe4c:	4607      	mov	r7, r0
1000fe4e:	4688      	mov	r8, r1
1000fe50:	4614      	mov	r4, r2
1000fe52:	2600      	movs	r6, #0
1000fe54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
1000fe58:	f1b9 0901 	subs.w	r9, r9, #1
1000fe5c:	d505      	bpl.n	1000fe6a <_fwalk_sglue+0x22>
1000fe5e:	6824      	ldr	r4, [r4, #0]
1000fe60:	2c00      	cmp	r4, #0
1000fe62:	d1f7      	bne.n	1000fe54 <_fwalk_sglue+0xc>
1000fe64:	4630      	mov	r0, r6
1000fe66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000fe6a:	89ab      	ldrh	r3, [r5, #12]
1000fe6c:	2b01      	cmp	r3, #1
1000fe6e:	d907      	bls.n	1000fe80 <_fwalk_sglue+0x38>
1000fe70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1000fe74:	3301      	adds	r3, #1
1000fe76:	d003      	beq.n	1000fe80 <_fwalk_sglue+0x38>
1000fe78:	4629      	mov	r1, r5
1000fe7a:	4638      	mov	r0, r7
1000fe7c:	47c0      	blx	r8
1000fe7e:	4306      	orrs	r6, r0
1000fe80:	3568      	adds	r5, #104	; 0x68
1000fe82:	e7e9      	b.n	1000fe58 <_fwalk_sglue+0x10>

1000fe84 <siprintf>:
1000fe84:	b40e      	push	{r1, r2, r3}
1000fe86:	b500      	push	{lr}
1000fe88:	b09c      	sub	sp, #112	; 0x70
1000fe8a:	ab1d      	add	r3, sp, #116	; 0x74
1000fe8c:	9002      	str	r0, [sp, #8]
1000fe8e:	9006      	str	r0, [sp, #24]
1000fe90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
1000fe94:	4809      	ldr	r0, [pc, #36]	; (1000febc <siprintf+0x38>)
1000fe96:	9107      	str	r1, [sp, #28]
1000fe98:	9104      	str	r1, [sp, #16]
1000fe9a:	4909      	ldr	r1, [pc, #36]	; (1000fec0 <siprintf+0x3c>)
1000fe9c:	f853 2b04 	ldr.w	r2, [r3], #4
1000fea0:	9105      	str	r1, [sp, #20]
1000fea2:	6800      	ldr	r0, [r0, #0]
1000fea4:	9301      	str	r3, [sp, #4]
1000fea6:	a902      	add	r1, sp, #8
1000fea8:	f001 fbbe 	bl	10011628 <_svfiprintf_r>
1000feac:	9b02      	ldr	r3, [sp, #8]
1000feae:	2200      	movs	r2, #0
1000feb0:	701a      	strb	r2, [r3, #0]
1000feb2:	b01c      	add	sp, #112	; 0x70
1000feb4:	f85d eb04 	ldr.w	lr, [sp], #4
1000feb8:	b003      	add	sp, #12
1000feba:	4770      	bx	lr
1000febc:	10020bd0 	.word	0x10020bd0
1000fec0:	ffff0208 	.word	0xffff0208

1000fec4 <__sread>:
1000fec4:	b510      	push	{r4, lr}
1000fec6:	460c      	mov	r4, r1
1000fec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000fecc:	f000 f890 	bl	1000fff0 <_read_r>
1000fed0:	2800      	cmp	r0, #0
1000fed2:	bfab      	itete	ge
1000fed4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1000fed6:	89a3      	ldrhlt	r3, [r4, #12]
1000fed8:	181b      	addge	r3, r3, r0
1000feda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1000fede:	bfac      	ite	ge
1000fee0:	6563      	strge	r3, [r4, #84]	; 0x54
1000fee2:	81a3      	strhlt	r3, [r4, #12]
1000fee4:	bd10      	pop	{r4, pc}

1000fee6 <__swrite>:
1000fee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000feea:	461f      	mov	r7, r3
1000feec:	898b      	ldrh	r3, [r1, #12]
1000feee:	05db      	lsls	r3, r3, #23
1000fef0:	4605      	mov	r5, r0
1000fef2:	460c      	mov	r4, r1
1000fef4:	4616      	mov	r6, r2
1000fef6:	d505      	bpl.n	1000ff04 <__swrite+0x1e>
1000fef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000fefc:	2302      	movs	r3, #2
1000fefe:	2200      	movs	r2, #0
1000ff00:	f000 f864 	bl	1000ffcc <_lseek_r>
1000ff04:	89a3      	ldrh	r3, [r4, #12]
1000ff06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1000ff0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1000ff0e:	81a3      	strh	r3, [r4, #12]
1000ff10:	4632      	mov	r2, r6
1000ff12:	463b      	mov	r3, r7
1000ff14:	4628      	mov	r0, r5
1000ff16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1000ff1a:	f000 b88b 	b.w	10010034 <_write_r>

1000ff1e <__sseek>:
1000ff1e:	b510      	push	{r4, lr}
1000ff20:	460c      	mov	r4, r1
1000ff22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000ff26:	f000 f851 	bl	1000ffcc <_lseek_r>
1000ff2a:	1c43      	adds	r3, r0, #1
1000ff2c:	89a3      	ldrh	r3, [r4, #12]
1000ff2e:	bf15      	itete	ne
1000ff30:	6560      	strne	r0, [r4, #84]	; 0x54
1000ff32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1000ff36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1000ff3a:	81a3      	strheq	r3, [r4, #12]
1000ff3c:	bf18      	it	ne
1000ff3e:	81a3      	strhne	r3, [r4, #12]
1000ff40:	bd10      	pop	{r4, pc}

1000ff42 <__sclose>:
1000ff42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000ff46:	f000 b831 	b.w	1000ffac <_close_r>

1000ff4a <memset>:
1000ff4a:	4402      	add	r2, r0
1000ff4c:	4603      	mov	r3, r0
1000ff4e:	4293      	cmp	r3, r2
1000ff50:	d100      	bne.n	1000ff54 <memset+0xa>
1000ff52:	4770      	bx	lr
1000ff54:	f803 1b01 	strb.w	r1, [r3], #1
1000ff58:	e7f9      	b.n	1000ff4e <memset+0x4>

1000ff5a <strncmp>:
1000ff5a:	b510      	push	{r4, lr}
1000ff5c:	b16a      	cbz	r2, 1000ff7a <strncmp+0x20>
1000ff5e:	3901      	subs	r1, #1
1000ff60:	1884      	adds	r4, r0, r2
1000ff62:	f810 2b01 	ldrb.w	r2, [r0], #1
1000ff66:	f811 3f01 	ldrb.w	r3, [r1, #1]!
1000ff6a:	429a      	cmp	r2, r3
1000ff6c:	d103      	bne.n	1000ff76 <strncmp+0x1c>
1000ff6e:	42a0      	cmp	r0, r4
1000ff70:	d001      	beq.n	1000ff76 <strncmp+0x1c>
1000ff72:	2a00      	cmp	r2, #0
1000ff74:	d1f5      	bne.n	1000ff62 <strncmp+0x8>
1000ff76:	1ad0      	subs	r0, r2, r3
1000ff78:	bd10      	pop	{r4, pc}
1000ff7a:	4610      	mov	r0, r2
1000ff7c:	e7fc      	b.n	1000ff78 <strncmp+0x1e>

1000ff7e <strncpy>:
1000ff7e:	b510      	push	{r4, lr}
1000ff80:	3901      	subs	r1, #1
1000ff82:	4603      	mov	r3, r0
1000ff84:	b132      	cbz	r2, 1000ff94 <strncpy+0x16>
1000ff86:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1000ff8a:	f803 4b01 	strb.w	r4, [r3], #1
1000ff8e:	3a01      	subs	r2, #1
1000ff90:	2c00      	cmp	r4, #0
1000ff92:	d1f7      	bne.n	1000ff84 <strncpy+0x6>
1000ff94:	441a      	add	r2, r3
1000ff96:	2100      	movs	r1, #0
1000ff98:	4293      	cmp	r3, r2
1000ff9a:	d100      	bne.n	1000ff9e <strncpy+0x20>
1000ff9c:	bd10      	pop	{r4, pc}
1000ff9e:	f803 1b01 	strb.w	r1, [r3], #1
1000ffa2:	e7f9      	b.n	1000ff98 <strncpy+0x1a>

1000ffa4 <_localeconv_r>:
1000ffa4:	4800      	ldr	r0, [pc, #0]	; (1000ffa8 <_localeconv_r+0x4>)
1000ffa6:	4770      	bx	lr
1000ffa8:	10020cc4 	.word	0x10020cc4

1000ffac <_close_r>:
1000ffac:	b538      	push	{r3, r4, r5, lr}
1000ffae:	4d06      	ldr	r5, [pc, #24]	; (1000ffc8 <_close_r+0x1c>)
1000ffb0:	2300      	movs	r3, #0
1000ffb2:	4604      	mov	r4, r0
1000ffb4:	4608      	mov	r0, r1
1000ffb6:	602b      	str	r3, [r5, #0]
1000ffb8:	f002 f908 	bl	100121cc <_close>
1000ffbc:	1c43      	adds	r3, r0, #1
1000ffbe:	d102      	bne.n	1000ffc6 <_close_r+0x1a>
1000ffc0:	682b      	ldr	r3, [r5, #0]
1000ffc2:	b103      	cbz	r3, 1000ffc6 <_close_r+0x1a>
1000ffc4:	6023      	str	r3, [r4, #0]
1000ffc6:	bd38      	pop	{r3, r4, r5, pc}
1000ffc8:	10029dd8 	.word	0x10029dd8

1000ffcc <_lseek_r>:
1000ffcc:	b538      	push	{r3, r4, r5, lr}
1000ffce:	4d07      	ldr	r5, [pc, #28]	; (1000ffec <_lseek_r+0x20>)
1000ffd0:	4604      	mov	r4, r0
1000ffd2:	4608      	mov	r0, r1
1000ffd4:	4611      	mov	r1, r2
1000ffd6:	2200      	movs	r2, #0
1000ffd8:	602a      	str	r2, [r5, #0]
1000ffda:	461a      	mov	r2, r3
1000ffdc:	f002 f91e 	bl	1001221c <_lseek>
1000ffe0:	1c43      	adds	r3, r0, #1
1000ffe2:	d102      	bne.n	1000ffea <_lseek_r+0x1e>
1000ffe4:	682b      	ldr	r3, [r5, #0]
1000ffe6:	b103      	cbz	r3, 1000ffea <_lseek_r+0x1e>
1000ffe8:	6023      	str	r3, [r4, #0]
1000ffea:	bd38      	pop	{r3, r4, r5, pc}
1000ffec:	10029dd8 	.word	0x10029dd8

1000fff0 <_read_r>:
1000fff0:	b538      	push	{r3, r4, r5, lr}
1000fff2:	4d07      	ldr	r5, [pc, #28]	; (10010010 <_read_r+0x20>)
1000fff4:	4604      	mov	r4, r0
1000fff6:	4608      	mov	r0, r1
1000fff8:	4611      	mov	r1, r2
1000fffa:	2200      	movs	r2, #0
1000fffc:	602a      	str	r2, [r5, #0]
1000fffe:	461a      	mov	r2, r3
10010000:	f002 f914 	bl	1001222c <_read>
10010004:	1c43      	adds	r3, r0, #1
10010006:	d102      	bne.n	1001000e <_read_r+0x1e>
10010008:	682b      	ldr	r3, [r5, #0]
1001000a:	b103      	cbz	r3, 1001000e <_read_r+0x1e>
1001000c:	6023      	str	r3, [r4, #0]
1001000e:	bd38      	pop	{r3, r4, r5, pc}
10010010:	10029dd8 	.word	0x10029dd8

10010014 <_sbrk_r>:
10010014:	b538      	push	{r3, r4, r5, lr}
10010016:	4d06      	ldr	r5, [pc, #24]	; (10010030 <_sbrk_r+0x1c>)
10010018:	2300      	movs	r3, #0
1001001a:	4604      	mov	r4, r0
1001001c:	4608      	mov	r0, r1
1001001e:	602b      	str	r3, [r5, #0]
10010020:	f7f1 fb46 	bl	100016b0 <_sbrk>
10010024:	1c43      	adds	r3, r0, #1
10010026:	d102      	bne.n	1001002e <_sbrk_r+0x1a>
10010028:	682b      	ldr	r3, [r5, #0]
1001002a:	b103      	cbz	r3, 1001002e <_sbrk_r+0x1a>
1001002c:	6023      	str	r3, [r4, #0]
1001002e:	bd38      	pop	{r3, r4, r5, pc}
10010030:	10029dd8 	.word	0x10029dd8

10010034 <_write_r>:
10010034:	b538      	push	{r3, r4, r5, lr}
10010036:	4d07      	ldr	r5, [pc, #28]	; (10010054 <_write_r+0x20>)
10010038:	4604      	mov	r4, r0
1001003a:	4608      	mov	r0, r1
1001003c:	4611      	mov	r1, r2
1001003e:	2200      	movs	r2, #0
10010040:	602a      	str	r2, [r5, #0]
10010042:	461a      	mov	r2, r3
10010044:	f002 f8fa 	bl	1001223c <_write>
10010048:	1c43      	adds	r3, r0, #1
1001004a:	d102      	bne.n	10010052 <_write_r+0x1e>
1001004c:	682b      	ldr	r3, [r5, #0]
1001004e:	b103      	cbz	r3, 10010052 <_write_r+0x1e>
10010050:	6023      	str	r3, [r4, #0]
10010052:	bd38      	pop	{r3, r4, r5, pc}
10010054:	10029dd8 	.word	0x10029dd8

10010058 <__errno>:
10010058:	4b01      	ldr	r3, [pc, #4]	; (10010060 <__errno+0x8>)
1001005a:	6818      	ldr	r0, [r3, #0]
1001005c:	4770      	bx	lr
1001005e:	bf00      	nop
10010060:	10020bd0 	.word	0x10020bd0

10010064 <__libc_init_array>:
10010064:	b570      	push	{r4, r5, r6, lr}
10010066:	4d0d      	ldr	r5, [pc, #52]	; (1001009c <__libc_init_array+0x38>)
10010068:	4c0d      	ldr	r4, [pc, #52]	; (100100a0 <__libc_init_array+0x3c>)
1001006a:	1b64      	subs	r4, r4, r5
1001006c:	10a4      	asrs	r4, r4, #2
1001006e:	2600      	movs	r6, #0
10010070:	42a6      	cmp	r6, r4
10010072:	d109      	bne.n	10010088 <__libc_init_array+0x24>
10010074:	4d0b      	ldr	r5, [pc, #44]	; (100100a4 <__libc_init_array+0x40>)
10010076:	4c0c      	ldr	r4, [pc, #48]	; (100100a8 <__libc_init_array+0x44>)
10010078:	f002 f8ea 	bl	10012250 <_init>
1001007c:	1b64      	subs	r4, r4, r5
1001007e:	10a4      	asrs	r4, r4, #2
10010080:	2600      	movs	r6, #0
10010082:	42a6      	cmp	r6, r4
10010084:	d105      	bne.n	10010092 <__libc_init_array+0x2e>
10010086:	bd70      	pop	{r4, r5, r6, pc}
10010088:	f855 3b04 	ldr.w	r3, [r5], #4
1001008c:	4798      	blx	r3
1001008e:	3601      	adds	r6, #1
10010090:	e7ee      	b.n	10010070 <__libc_init_array+0xc>
10010092:	f855 3b04 	ldr.w	r3, [r5], #4
10010096:	4798      	blx	r3
10010098:	3601      	adds	r6, #1
1001009a:	e7f2      	b.n	10010082 <__libc_init_array+0x1e>
1001009c:	10016be0 	.word	0x10016be0
100100a0:	10016be0 	.word	0x10016be0
100100a4:	10016be0 	.word	0x10016be0
100100a8:	10016be4 	.word	0x10016be4

100100ac <__retarget_lock_init_recursive>:
100100ac:	4770      	bx	lr

100100ae <__retarget_lock_acquire_recursive>:
100100ae:	4770      	bx	lr

100100b0 <__retarget_lock_release_recursive>:
100100b0:	4770      	bx	lr

100100b2 <memcpy>:
100100b2:	440a      	add	r2, r1
100100b4:	4291      	cmp	r1, r2
100100b6:	f100 33ff 	add.w	r3, r0, #4294967295
100100ba:	d100      	bne.n	100100be <memcpy+0xc>
100100bc:	4770      	bx	lr
100100be:	b510      	push	{r4, lr}
100100c0:	f811 4b01 	ldrb.w	r4, [r1], #1
100100c4:	f803 4f01 	strb.w	r4, [r3, #1]!
100100c8:	4291      	cmp	r1, r2
100100ca:	d1f9      	bne.n	100100c0 <memcpy+0xe>
100100cc:	bd10      	pop	{r4, pc}

100100ce <abort>:
100100ce:	b508      	push	{r3, lr}
100100d0:	2006      	movs	r0, #6
100100d2:	f001 fe71 	bl	10011db8 <raise>
100100d6:	2001      	movs	r0, #1
100100d8:	f002 f8b8 	bl	1001224c <_exit>

100100dc <quorem>:
100100dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
100100e0:	6903      	ldr	r3, [r0, #16]
100100e2:	690c      	ldr	r4, [r1, #16]
100100e4:	42a3      	cmp	r3, r4
100100e6:	4607      	mov	r7, r0
100100e8:	db7e      	blt.n	100101e8 <quorem+0x10c>
100100ea:	3c01      	subs	r4, #1
100100ec:	f101 0814 	add.w	r8, r1, #20
100100f0:	f100 0514 	add.w	r5, r0, #20
100100f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
100100f8:	9301      	str	r3, [sp, #4]
100100fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
100100fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
10010102:	3301      	adds	r3, #1
10010104:	429a      	cmp	r2, r3
10010106:	ea4f 0b84 	mov.w	fp, r4, lsl #2
1001010a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
1001010e:	fbb2 f6f3 	udiv	r6, r2, r3
10010112:	d331      	bcc.n	10010178 <quorem+0x9c>
10010114:	f04f 0e00 	mov.w	lr, #0
10010118:	4640      	mov	r0, r8
1001011a:	46ac      	mov	ip, r5
1001011c:	46f2      	mov	sl, lr
1001011e:	f850 2b04 	ldr.w	r2, [r0], #4
10010122:	b293      	uxth	r3, r2
10010124:	fb06 e303 	mla	r3, r6, r3, lr
10010128:	ea4f 4e12 	mov.w	lr, r2, lsr #16
1001012c:	0c1a      	lsrs	r2, r3, #16
1001012e:	b29b      	uxth	r3, r3
10010130:	ebaa 0303 	sub.w	r3, sl, r3
10010134:	f8dc a000 	ldr.w	sl, [ip]
10010138:	fa13 f38a 	uxtah	r3, r3, sl
1001013c:	fb06 220e 	mla	r2, r6, lr, r2
10010140:	9300      	str	r3, [sp, #0]
10010142:	9b00      	ldr	r3, [sp, #0]
10010144:	ea4f 4e12 	mov.w	lr, r2, lsr #16
10010148:	b292      	uxth	r2, r2
1001014a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
1001014e:	eb02 4223 	add.w	r2, r2, r3, asr #16
10010152:	f8bd 3000 	ldrh.w	r3, [sp]
10010156:	4581      	cmp	r9, r0
10010158:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1001015c:	f84c 3b04 	str.w	r3, [ip], #4
10010160:	ea4f 4a22 	mov.w	sl, r2, asr #16
10010164:	d2db      	bcs.n	1001011e <quorem+0x42>
10010166:	f855 300b 	ldr.w	r3, [r5, fp]
1001016a:	b92b      	cbnz	r3, 10010178 <quorem+0x9c>
1001016c:	9b01      	ldr	r3, [sp, #4]
1001016e:	3b04      	subs	r3, #4
10010170:	429d      	cmp	r5, r3
10010172:	461a      	mov	r2, r3
10010174:	d32c      	bcc.n	100101d0 <quorem+0xf4>
10010176:	613c      	str	r4, [r7, #16]
10010178:	4638      	mov	r0, r7
1001017a:	f001 f8f3 	bl	10011364 <__mcmp>
1001017e:	2800      	cmp	r0, #0
10010180:	db22      	blt.n	100101c8 <quorem+0xec>
10010182:	3601      	adds	r6, #1
10010184:	4629      	mov	r1, r5
10010186:	2000      	movs	r0, #0
10010188:	f858 2b04 	ldr.w	r2, [r8], #4
1001018c:	f8d1 c000 	ldr.w	ip, [r1]
10010190:	b293      	uxth	r3, r2
10010192:	1ac3      	subs	r3, r0, r3
10010194:	0c12      	lsrs	r2, r2, #16
10010196:	fa13 f38c 	uxtah	r3, r3, ip
1001019a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
1001019e:	eb02 4223 	add.w	r2, r2, r3, asr #16
100101a2:	b29b      	uxth	r3, r3
100101a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
100101a8:	45c1      	cmp	r9, r8
100101aa:	f841 3b04 	str.w	r3, [r1], #4
100101ae:	ea4f 4022 	mov.w	r0, r2, asr #16
100101b2:	d2e9      	bcs.n	10010188 <quorem+0xac>
100101b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
100101b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
100101bc:	b922      	cbnz	r2, 100101c8 <quorem+0xec>
100101be:	3b04      	subs	r3, #4
100101c0:	429d      	cmp	r5, r3
100101c2:	461a      	mov	r2, r3
100101c4:	d30a      	bcc.n	100101dc <quorem+0x100>
100101c6:	613c      	str	r4, [r7, #16]
100101c8:	4630      	mov	r0, r6
100101ca:	b003      	add	sp, #12
100101cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
100101d0:	6812      	ldr	r2, [r2, #0]
100101d2:	3b04      	subs	r3, #4
100101d4:	2a00      	cmp	r2, #0
100101d6:	d1ce      	bne.n	10010176 <quorem+0x9a>
100101d8:	3c01      	subs	r4, #1
100101da:	e7c9      	b.n	10010170 <quorem+0x94>
100101dc:	6812      	ldr	r2, [r2, #0]
100101de:	3b04      	subs	r3, #4
100101e0:	2a00      	cmp	r2, #0
100101e2:	d1f0      	bne.n	100101c6 <quorem+0xea>
100101e4:	3c01      	subs	r4, #1
100101e6:	e7eb      	b.n	100101c0 <quorem+0xe4>
100101e8:	2000      	movs	r0, #0
100101ea:	e7ee      	b.n	100101ca <quorem+0xee>
100101ec:	0000      	movs	r0, r0
	...

100101f0 <_dtoa_r>:
100101f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
100101f4:	ed2d 8b04 	vpush	{d8-d9}
100101f8:	69c5      	ldr	r5, [r0, #28]
100101fa:	b093      	sub	sp, #76	; 0x4c
100101fc:	ed8d 0b02 	vstr	d0, [sp, #8]
10010200:	ec57 6b10 	vmov	r6, r7, d0
10010204:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
10010208:	9107      	str	r1, [sp, #28]
1001020a:	4604      	mov	r4, r0
1001020c:	920a      	str	r2, [sp, #40]	; 0x28
1001020e:	930d      	str	r3, [sp, #52]	; 0x34
10010210:	b975      	cbnz	r5, 10010230 <_dtoa_r+0x40>
10010212:	2010      	movs	r0, #16
10010214:	f7ff f810 	bl	1000f238 <malloc>
10010218:	4602      	mov	r2, r0
1001021a:	61e0      	str	r0, [r4, #28]
1001021c:	b920      	cbnz	r0, 10010228 <_dtoa_r+0x38>
1001021e:	4bae      	ldr	r3, [pc, #696]	; (100104d8 <_dtoa_r+0x2e8>)
10010220:	21ef      	movs	r1, #239	; 0xef
10010222:	48ae      	ldr	r0, [pc, #696]	; (100104dc <_dtoa_r+0x2ec>)
10010224:	f7fe ffea 	bl	1000f1fc <__assert_func>
10010228:	e9c0 5501 	strd	r5, r5, [r0, #4]
1001022c:	6005      	str	r5, [r0, #0]
1001022e:	60c5      	str	r5, [r0, #12]
10010230:	69e3      	ldr	r3, [r4, #28]
10010232:	6819      	ldr	r1, [r3, #0]
10010234:	b151      	cbz	r1, 1001024c <_dtoa_r+0x5c>
10010236:	685a      	ldr	r2, [r3, #4]
10010238:	604a      	str	r2, [r1, #4]
1001023a:	2301      	movs	r3, #1
1001023c:	4093      	lsls	r3, r2
1001023e:	608b      	str	r3, [r1, #8]
10010240:	4620      	mov	r0, r4
10010242:	f000 fe53 	bl	10010eec <_Bfree>
10010246:	69e3      	ldr	r3, [r4, #28]
10010248:	2200      	movs	r2, #0
1001024a:	601a      	str	r2, [r3, #0]
1001024c:	1e3b      	subs	r3, r7, #0
1001024e:	bfbb      	ittet	lt
10010250:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
10010254:	9303      	strlt	r3, [sp, #12]
10010256:	2300      	movge	r3, #0
10010258:	2201      	movlt	r2, #1
1001025a:	bfac      	ite	ge
1001025c:	f8c8 3000 	strge.w	r3, [r8]
10010260:	f8c8 2000 	strlt.w	r2, [r8]
10010264:	4b9e      	ldr	r3, [pc, #632]	; (100104e0 <_dtoa_r+0x2f0>)
10010266:	f8dd 800c 	ldr.w	r8, [sp, #12]
1001026a:	ea33 0308 	bics.w	r3, r3, r8
1001026e:	d11b      	bne.n	100102a8 <_dtoa_r+0xb8>
10010270:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10010272:	f242 730f 	movw	r3, #9999	; 0x270f
10010276:	6013      	str	r3, [r2, #0]
10010278:	f3c8 0313 	ubfx	r3, r8, #0, #20
1001027c:	4333      	orrs	r3, r6
1001027e:	f000 8593 	beq.w	10010da8 <_dtoa_r+0xbb8>
10010282:	9b21      	ldr	r3, [sp, #132]	; 0x84
10010284:	b963      	cbnz	r3, 100102a0 <_dtoa_r+0xb0>
10010286:	4b97      	ldr	r3, [pc, #604]	; (100104e4 <_dtoa_r+0x2f4>)
10010288:	e027      	b.n	100102da <_dtoa_r+0xea>
1001028a:	4b97      	ldr	r3, [pc, #604]	; (100104e8 <_dtoa_r+0x2f8>)
1001028c:	9300      	str	r3, [sp, #0]
1001028e:	3308      	adds	r3, #8
10010290:	9a21      	ldr	r2, [sp, #132]	; 0x84
10010292:	6013      	str	r3, [r2, #0]
10010294:	9800      	ldr	r0, [sp, #0]
10010296:	b013      	add	sp, #76	; 0x4c
10010298:	ecbd 8b04 	vpop	{d8-d9}
1001029c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
100102a0:	4b90      	ldr	r3, [pc, #576]	; (100104e4 <_dtoa_r+0x2f4>)
100102a2:	9300      	str	r3, [sp, #0]
100102a4:	3303      	adds	r3, #3
100102a6:	e7f3      	b.n	10010290 <_dtoa_r+0xa0>
100102a8:	ed9d 7b02 	vldr	d7, [sp, #8]
100102ac:	2200      	movs	r2, #0
100102ae:	ec51 0b17 	vmov	r0, r1, d7
100102b2:	eeb0 8a47 	vmov.f32	s16, s14
100102b6:	eef0 8a67 	vmov.f32	s17, s15
100102ba:	2300      	movs	r3, #0
100102bc:	f7f0 fb4c 	bl	10000958 <__aeabi_dcmpeq>
100102c0:	4681      	mov	r9, r0
100102c2:	b160      	cbz	r0, 100102de <_dtoa_r+0xee>
100102c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
100102c6:	2301      	movs	r3, #1
100102c8:	6013      	str	r3, [r2, #0]
100102ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
100102cc:	2b00      	cmp	r3, #0
100102ce:	f000 8568 	beq.w	10010da2 <_dtoa_r+0xbb2>
100102d2:	4b86      	ldr	r3, [pc, #536]	; (100104ec <_dtoa_r+0x2fc>)
100102d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
100102d6:	6013      	str	r3, [r2, #0]
100102d8:	3b01      	subs	r3, #1
100102da:	9300      	str	r3, [sp, #0]
100102dc:	e7da      	b.n	10010294 <_dtoa_r+0xa4>
100102de:	aa10      	add	r2, sp, #64	; 0x40
100102e0:	a911      	add	r1, sp, #68	; 0x44
100102e2:	4620      	mov	r0, r4
100102e4:	eeb0 0a48 	vmov.f32	s0, s16
100102e8:	eef0 0a68 	vmov.f32	s1, s17
100102ec:	f001 f8e0 	bl	100114b0 <__d2b>
100102f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
100102f4:	4682      	mov	sl, r0
100102f6:	2d00      	cmp	r5, #0
100102f8:	d07f      	beq.n	100103fa <_dtoa_r+0x20a>
100102fa:	ee18 3a90 	vmov	r3, s17
100102fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
10010302:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
10010306:	ec51 0b18 	vmov	r0, r1, d8
1001030a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
1001030e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
10010312:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
10010316:	4619      	mov	r1, r3
10010318:	2200      	movs	r2, #0
1001031a:	4b75      	ldr	r3, [pc, #468]	; (100104f0 <_dtoa_r+0x300>)
1001031c:	f7ef fefc 	bl	10000118 <__aeabi_dsub>
10010320:	a367      	add	r3, pc, #412	; (adr r3, 100104c0 <_dtoa_r+0x2d0>)
10010322:	e9d3 2300 	ldrd	r2, r3, [r3]
10010326:	f7f0 f8af 	bl	10000488 <__aeabi_dmul>
1001032a:	a367      	add	r3, pc, #412	; (adr r3, 100104c8 <_dtoa_r+0x2d8>)
1001032c:	e9d3 2300 	ldrd	r2, r3, [r3]
10010330:	f7ef fef4 	bl	1000011c <__adddf3>
10010334:	4606      	mov	r6, r0
10010336:	4628      	mov	r0, r5
10010338:	460f      	mov	r7, r1
1001033a:	f7f0 f83b 	bl	100003b4 <__aeabi_i2d>
1001033e:	a364      	add	r3, pc, #400	; (adr r3, 100104d0 <_dtoa_r+0x2e0>)
10010340:	e9d3 2300 	ldrd	r2, r3, [r3]
10010344:	f7f0 f8a0 	bl	10000488 <__aeabi_dmul>
10010348:	4602      	mov	r2, r0
1001034a:	460b      	mov	r3, r1
1001034c:	4630      	mov	r0, r6
1001034e:	4639      	mov	r1, r7
10010350:	f7ef fee4 	bl	1000011c <__adddf3>
10010354:	4606      	mov	r6, r0
10010356:	460f      	mov	r7, r1
10010358:	f7f0 fb46 	bl	100009e8 <__aeabi_d2iz>
1001035c:	2200      	movs	r2, #0
1001035e:	4683      	mov	fp, r0
10010360:	2300      	movs	r3, #0
10010362:	4630      	mov	r0, r6
10010364:	4639      	mov	r1, r7
10010366:	f7f0 fb01 	bl	1000096c <__aeabi_dcmplt>
1001036a:	b148      	cbz	r0, 10010380 <_dtoa_r+0x190>
1001036c:	4658      	mov	r0, fp
1001036e:	f7f0 f821 	bl	100003b4 <__aeabi_i2d>
10010372:	4632      	mov	r2, r6
10010374:	463b      	mov	r3, r7
10010376:	f7f0 faef 	bl	10000958 <__aeabi_dcmpeq>
1001037a:	b908      	cbnz	r0, 10010380 <_dtoa_r+0x190>
1001037c:	f10b 3bff 	add.w	fp, fp, #4294967295
10010380:	f1bb 0f16 	cmp.w	fp, #22
10010384:	d857      	bhi.n	10010436 <_dtoa_r+0x246>
10010386:	4b5b      	ldr	r3, [pc, #364]	; (100104f4 <_dtoa_r+0x304>)
10010388:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
1001038c:	e9d3 2300 	ldrd	r2, r3, [r3]
10010390:	ec51 0b18 	vmov	r0, r1, d8
10010394:	f7f0 faea 	bl	1000096c <__aeabi_dcmplt>
10010398:	2800      	cmp	r0, #0
1001039a:	d04e      	beq.n	1001043a <_dtoa_r+0x24a>
1001039c:	f10b 3bff 	add.w	fp, fp, #4294967295
100103a0:	2300      	movs	r3, #0
100103a2:	930c      	str	r3, [sp, #48]	; 0x30
100103a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
100103a6:	1b5b      	subs	r3, r3, r5
100103a8:	1e5a      	subs	r2, r3, #1
100103aa:	bf45      	ittet	mi
100103ac:	f1c3 0301 	rsbmi	r3, r3, #1
100103b0:	9305      	strmi	r3, [sp, #20]
100103b2:	2300      	movpl	r3, #0
100103b4:	2300      	movmi	r3, #0
100103b6:	9206      	str	r2, [sp, #24]
100103b8:	bf54      	ite	pl
100103ba:	9305      	strpl	r3, [sp, #20]
100103bc:	9306      	strmi	r3, [sp, #24]
100103be:	f1bb 0f00 	cmp.w	fp, #0
100103c2:	db3c      	blt.n	1001043e <_dtoa_r+0x24e>
100103c4:	9b06      	ldr	r3, [sp, #24]
100103c6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
100103ca:	445b      	add	r3, fp
100103cc:	9306      	str	r3, [sp, #24]
100103ce:	2300      	movs	r3, #0
100103d0:	9308      	str	r3, [sp, #32]
100103d2:	9b07      	ldr	r3, [sp, #28]
100103d4:	2b09      	cmp	r3, #9
100103d6:	d868      	bhi.n	100104aa <_dtoa_r+0x2ba>
100103d8:	2b05      	cmp	r3, #5
100103da:	bfc4      	itt	gt
100103dc:	3b04      	subgt	r3, #4
100103de:	9307      	strgt	r3, [sp, #28]
100103e0:	9b07      	ldr	r3, [sp, #28]
100103e2:	f1a3 0302 	sub.w	r3, r3, #2
100103e6:	bfcc      	ite	gt
100103e8:	2500      	movgt	r5, #0
100103ea:	2501      	movle	r5, #1
100103ec:	2b03      	cmp	r3, #3
100103ee:	f200 8085 	bhi.w	100104fc <_dtoa_r+0x30c>
100103f2:	e8df f003 	tbb	[pc, r3]
100103f6:	3b2e      	.short	0x3b2e
100103f8:	5839      	.short	0x5839
100103fa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
100103fe:	441d      	add	r5, r3
10010400:	f205 4332 	addw	r3, r5, #1074	; 0x432
10010404:	2b20      	cmp	r3, #32
10010406:	bfc1      	itttt	gt
10010408:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
1001040c:	fa08 f803 	lslgt.w	r8, r8, r3
10010410:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
10010414:	fa26 f303 	lsrgt.w	r3, r6, r3
10010418:	bfd6      	itet	le
1001041a:	f1c3 0320 	rsble	r3, r3, #32
1001041e:	ea48 0003 	orrgt.w	r0, r8, r3
10010422:	fa06 f003 	lslle.w	r0, r6, r3
10010426:	f7ef ffb5 	bl	10000394 <__aeabi_ui2d>
1001042a:	2201      	movs	r2, #1
1001042c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
10010430:	3d01      	subs	r5, #1
10010432:	920e      	str	r2, [sp, #56]	; 0x38
10010434:	e76f      	b.n	10010316 <_dtoa_r+0x126>
10010436:	2301      	movs	r3, #1
10010438:	e7b3      	b.n	100103a2 <_dtoa_r+0x1b2>
1001043a:	900c      	str	r0, [sp, #48]	; 0x30
1001043c:	e7b2      	b.n	100103a4 <_dtoa_r+0x1b4>
1001043e:	9b05      	ldr	r3, [sp, #20]
10010440:	eba3 030b 	sub.w	r3, r3, fp
10010444:	9305      	str	r3, [sp, #20]
10010446:	f1cb 0300 	rsb	r3, fp, #0
1001044a:	9308      	str	r3, [sp, #32]
1001044c:	2300      	movs	r3, #0
1001044e:	930b      	str	r3, [sp, #44]	; 0x2c
10010450:	e7bf      	b.n	100103d2 <_dtoa_r+0x1e2>
10010452:	2300      	movs	r3, #0
10010454:	9309      	str	r3, [sp, #36]	; 0x24
10010456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10010458:	2b00      	cmp	r3, #0
1001045a:	dc52      	bgt.n	10010502 <_dtoa_r+0x312>
1001045c:	2301      	movs	r3, #1
1001045e:	9301      	str	r3, [sp, #4]
10010460:	9304      	str	r3, [sp, #16]
10010462:	461a      	mov	r2, r3
10010464:	920a      	str	r2, [sp, #40]	; 0x28
10010466:	e00b      	b.n	10010480 <_dtoa_r+0x290>
10010468:	2301      	movs	r3, #1
1001046a:	e7f3      	b.n	10010454 <_dtoa_r+0x264>
1001046c:	2300      	movs	r3, #0
1001046e:	9309      	str	r3, [sp, #36]	; 0x24
10010470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10010472:	445b      	add	r3, fp
10010474:	9301      	str	r3, [sp, #4]
10010476:	3301      	adds	r3, #1
10010478:	2b01      	cmp	r3, #1
1001047a:	9304      	str	r3, [sp, #16]
1001047c:	bfb8      	it	lt
1001047e:	2301      	movlt	r3, #1
10010480:	69e0      	ldr	r0, [r4, #28]
10010482:	2100      	movs	r1, #0
10010484:	2204      	movs	r2, #4
10010486:	f102 0614 	add.w	r6, r2, #20
1001048a:	429e      	cmp	r6, r3
1001048c:	d93d      	bls.n	1001050a <_dtoa_r+0x31a>
1001048e:	6041      	str	r1, [r0, #4]
10010490:	4620      	mov	r0, r4
10010492:	f000 fceb 	bl	10010e6c <_Balloc>
10010496:	9000      	str	r0, [sp, #0]
10010498:	2800      	cmp	r0, #0
1001049a:	d139      	bne.n	10010510 <_dtoa_r+0x320>
1001049c:	4b16      	ldr	r3, [pc, #88]	; (100104f8 <_dtoa_r+0x308>)
1001049e:	4602      	mov	r2, r0
100104a0:	f240 11af 	movw	r1, #431	; 0x1af
100104a4:	e6bd      	b.n	10010222 <_dtoa_r+0x32>
100104a6:	2301      	movs	r3, #1
100104a8:	e7e1      	b.n	1001046e <_dtoa_r+0x27e>
100104aa:	2501      	movs	r5, #1
100104ac:	2300      	movs	r3, #0
100104ae:	9307      	str	r3, [sp, #28]
100104b0:	9509      	str	r5, [sp, #36]	; 0x24
100104b2:	f04f 33ff 	mov.w	r3, #4294967295
100104b6:	9301      	str	r3, [sp, #4]
100104b8:	9304      	str	r3, [sp, #16]
100104ba:	2200      	movs	r2, #0
100104bc:	2312      	movs	r3, #18
100104be:	e7d1      	b.n	10010464 <_dtoa_r+0x274>
100104c0:	636f4361 	.word	0x636f4361
100104c4:	3fd287a7 	.word	0x3fd287a7
100104c8:	8b60c8b3 	.word	0x8b60c8b3
100104cc:	3fc68a28 	.word	0x3fc68a28
100104d0:	509f79fb 	.word	0x509f79fb
100104d4:	3fd34413 	.word	0x3fd34413
100104d8:	100168d5 	.word	0x100168d5
100104dc:	100168ec 	.word	0x100168ec
100104e0:	7ff00000 	.word	0x7ff00000
100104e4:	100168d1 	.word	0x100168d1
100104e8:	100168c8 	.word	0x100168c8
100104ec:	100168a5 	.word	0x100168a5
100104f0:	3ff80000 	.word	0x3ff80000
100104f4:	100169d8 	.word	0x100169d8
100104f8:	10016944 	.word	0x10016944
100104fc:	2301      	movs	r3, #1
100104fe:	9309      	str	r3, [sp, #36]	; 0x24
10010500:	e7d7      	b.n	100104b2 <_dtoa_r+0x2c2>
10010502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10010504:	9301      	str	r3, [sp, #4]
10010506:	9304      	str	r3, [sp, #16]
10010508:	e7ba      	b.n	10010480 <_dtoa_r+0x290>
1001050a:	3101      	adds	r1, #1
1001050c:	0052      	lsls	r2, r2, #1
1001050e:	e7ba      	b.n	10010486 <_dtoa_r+0x296>
10010510:	69e3      	ldr	r3, [r4, #28]
10010512:	9a00      	ldr	r2, [sp, #0]
10010514:	601a      	str	r2, [r3, #0]
10010516:	9b04      	ldr	r3, [sp, #16]
10010518:	2b0e      	cmp	r3, #14
1001051a:	f200 80a8 	bhi.w	1001066e <_dtoa_r+0x47e>
1001051e:	2d00      	cmp	r5, #0
10010520:	f000 80a5 	beq.w	1001066e <_dtoa_r+0x47e>
10010524:	f1bb 0f00 	cmp.w	fp, #0
10010528:	dd38      	ble.n	1001059c <_dtoa_r+0x3ac>
1001052a:	4bc0      	ldr	r3, [pc, #768]	; (1001082c <_dtoa_r+0x63c>)
1001052c:	f00b 020f 	and.w	r2, fp, #15
10010530:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
10010534:	f41b 7f80 	tst.w	fp, #256	; 0x100
10010538:	e9d3 6700 	ldrd	r6, r7, [r3]
1001053c:	ea4f 182b 	mov.w	r8, fp, asr #4
10010540:	d019      	beq.n	10010576 <_dtoa_r+0x386>
10010542:	4bbb      	ldr	r3, [pc, #748]	; (10010830 <_dtoa_r+0x640>)
10010544:	ec51 0b18 	vmov	r0, r1, d8
10010548:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1001054c:	f7f0 f8c6 	bl	100006dc <__aeabi_ddiv>
10010550:	e9cd 0102 	strd	r0, r1, [sp, #8]
10010554:	f008 080f 	and.w	r8, r8, #15
10010558:	2503      	movs	r5, #3
1001055a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 10010830 <_dtoa_r+0x640>
1001055e:	f1b8 0f00 	cmp.w	r8, #0
10010562:	d10a      	bne.n	1001057a <_dtoa_r+0x38a>
10010564:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
10010568:	4632      	mov	r2, r6
1001056a:	463b      	mov	r3, r7
1001056c:	f7f0 f8b6 	bl	100006dc <__aeabi_ddiv>
10010570:	e9cd 0102 	strd	r0, r1, [sp, #8]
10010574:	e02b      	b.n	100105ce <_dtoa_r+0x3de>
10010576:	2502      	movs	r5, #2
10010578:	e7ef      	b.n	1001055a <_dtoa_r+0x36a>
1001057a:	f018 0f01 	tst.w	r8, #1
1001057e:	d008      	beq.n	10010592 <_dtoa_r+0x3a2>
10010580:	4630      	mov	r0, r6
10010582:	4639      	mov	r1, r7
10010584:	e9d9 2300 	ldrd	r2, r3, [r9]
10010588:	f7ef ff7e 	bl	10000488 <__aeabi_dmul>
1001058c:	3501      	adds	r5, #1
1001058e:	4606      	mov	r6, r0
10010590:	460f      	mov	r7, r1
10010592:	ea4f 0868 	mov.w	r8, r8, asr #1
10010596:	f109 0908 	add.w	r9, r9, #8
1001059a:	e7e0      	b.n	1001055e <_dtoa_r+0x36e>
1001059c:	f000 809f 	beq.w	100106de <_dtoa_r+0x4ee>
100105a0:	f1cb 0600 	rsb	r6, fp, #0
100105a4:	4ba1      	ldr	r3, [pc, #644]	; (1001082c <_dtoa_r+0x63c>)
100105a6:	4fa2      	ldr	r7, [pc, #648]	; (10010830 <_dtoa_r+0x640>)
100105a8:	f006 020f 	and.w	r2, r6, #15
100105ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
100105b0:	e9d3 2300 	ldrd	r2, r3, [r3]
100105b4:	ec51 0b18 	vmov	r0, r1, d8
100105b8:	f7ef ff66 	bl	10000488 <__aeabi_dmul>
100105bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
100105c0:	1136      	asrs	r6, r6, #4
100105c2:	2300      	movs	r3, #0
100105c4:	2502      	movs	r5, #2
100105c6:	2e00      	cmp	r6, #0
100105c8:	d17e      	bne.n	100106c8 <_dtoa_r+0x4d8>
100105ca:	2b00      	cmp	r3, #0
100105cc:	d1d0      	bne.n	10010570 <_dtoa_r+0x380>
100105ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100105d0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
100105d4:	2b00      	cmp	r3, #0
100105d6:	f000 8084 	beq.w	100106e2 <_dtoa_r+0x4f2>
100105da:	4b96      	ldr	r3, [pc, #600]	; (10010834 <_dtoa_r+0x644>)
100105dc:	2200      	movs	r2, #0
100105de:	4640      	mov	r0, r8
100105e0:	4649      	mov	r1, r9
100105e2:	f7f0 f9c3 	bl	1000096c <__aeabi_dcmplt>
100105e6:	2800      	cmp	r0, #0
100105e8:	d07b      	beq.n	100106e2 <_dtoa_r+0x4f2>
100105ea:	9b04      	ldr	r3, [sp, #16]
100105ec:	2b00      	cmp	r3, #0
100105ee:	d078      	beq.n	100106e2 <_dtoa_r+0x4f2>
100105f0:	9b01      	ldr	r3, [sp, #4]
100105f2:	2b00      	cmp	r3, #0
100105f4:	dd39      	ble.n	1001066a <_dtoa_r+0x47a>
100105f6:	4b90      	ldr	r3, [pc, #576]	; (10010838 <_dtoa_r+0x648>)
100105f8:	2200      	movs	r2, #0
100105fa:	4640      	mov	r0, r8
100105fc:	4649      	mov	r1, r9
100105fe:	f7ef ff43 	bl	10000488 <__aeabi_dmul>
10010602:	e9cd 0102 	strd	r0, r1, [sp, #8]
10010606:	9e01      	ldr	r6, [sp, #4]
10010608:	f10b 37ff 	add.w	r7, fp, #4294967295
1001060c:	3501      	adds	r5, #1
1001060e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
10010612:	4628      	mov	r0, r5
10010614:	f7ef fece 	bl	100003b4 <__aeabi_i2d>
10010618:	4642      	mov	r2, r8
1001061a:	464b      	mov	r3, r9
1001061c:	f7ef ff34 	bl	10000488 <__aeabi_dmul>
10010620:	4b86      	ldr	r3, [pc, #536]	; (1001083c <_dtoa_r+0x64c>)
10010622:	2200      	movs	r2, #0
10010624:	f7ef fd7a 	bl	1000011c <__adddf3>
10010628:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
1001062c:	e9cd 0102 	strd	r0, r1, [sp, #8]
10010630:	9303      	str	r3, [sp, #12]
10010632:	2e00      	cmp	r6, #0
10010634:	d158      	bne.n	100106e8 <_dtoa_r+0x4f8>
10010636:	4b82      	ldr	r3, [pc, #520]	; (10010840 <_dtoa_r+0x650>)
10010638:	2200      	movs	r2, #0
1001063a:	4640      	mov	r0, r8
1001063c:	4649      	mov	r1, r9
1001063e:	f7ef fd6b 	bl	10000118 <__aeabi_dsub>
10010642:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
10010646:	4680      	mov	r8, r0
10010648:	4689      	mov	r9, r1
1001064a:	f7f0 f9ad 	bl	100009a8 <__aeabi_dcmpgt>
1001064e:	2800      	cmp	r0, #0
10010650:	f040 8296 	bne.w	10010b80 <_dtoa_r+0x990>
10010654:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
10010658:	4640      	mov	r0, r8
1001065a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1001065e:	4649      	mov	r1, r9
10010660:	f7f0 f984 	bl	1000096c <__aeabi_dcmplt>
10010664:	2800      	cmp	r0, #0
10010666:	f040 8289 	bne.w	10010b7c <_dtoa_r+0x98c>
1001066a:	ed8d 8b02 	vstr	d8, [sp, #8]
1001066e:	9b11      	ldr	r3, [sp, #68]	; 0x44
10010670:	2b00      	cmp	r3, #0
10010672:	f2c0 814e 	blt.w	10010912 <_dtoa_r+0x722>
10010676:	f1bb 0f0e 	cmp.w	fp, #14
1001067a:	f300 814a 	bgt.w	10010912 <_dtoa_r+0x722>
1001067e:	4b6b      	ldr	r3, [pc, #428]	; (1001082c <_dtoa_r+0x63c>)
10010680:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
10010684:	e9d3 8900 	ldrd	r8, r9, [r3]
10010688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1001068a:	2b00      	cmp	r3, #0
1001068c:	f280 80dc 	bge.w	10010848 <_dtoa_r+0x658>
10010690:	9b04      	ldr	r3, [sp, #16]
10010692:	2b00      	cmp	r3, #0
10010694:	f300 80d8 	bgt.w	10010848 <_dtoa_r+0x658>
10010698:	f040 826f 	bne.w	10010b7a <_dtoa_r+0x98a>
1001069c:	4b68      	ldr	r3, [pc, #416]	; (10010840 <_dtoa_r+0x650>)
1001069e:	2200      	movs	r2, #0
100106a0:	4640      	mov	r0, r8
100106a2:	4649      	mov	r1, r9
100106a4:	f7ef fef0 	bl	10000488 <__aeabi_dmul>
100106a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
100106ac:	f7f0 f972 	bl	10000994 <__aeabi_dcmpge>
100106b0:	9e04      	ldr	r6, [sp, #16]
100106b2:	4637      	mov	r7, r6
100106b4:	2800      	cmp	r0, #0
100106b6:	f040 8245 	bne.w	10010b44 <_dtoa_r+0x954>
100106ba:	9d00      	ldr	r5, [sp, #0]
100106bc:	2331      	movs	r3, #49	; 0x31
100106be:	f805 3b01 	strb.w	r3, [r5], #1
100106c2:	f10b 0b01 	add.w	fp, fp, #1
100106c6:	e241      	b.n	10010b4c <_dtoa_r+0x95c>
100106c8:	07f2      	lsls	r2, r6, #31
100106ca:	d505      	bpl.n	100106d8 <_dtoa_r+0x4e8>
100106cc:	e9d7 2300 	ldrd	r2, r3, [r7]
100106d0:	f7ef feda 	bl	10000488 <__aeabi_dmul>
100106d4:	3501      	adds	r5, #1
100106d6:	2301      	movs	r3, #1
100106d8:	1076      	asrs	r6, r6, #1
100106da:	3708      	adds	r7, #8
100106dc:	e773      	b.n	100105c6 <_dtoa_r+0x3d6>
100106de:	2502      	movs	r5, #2
100106e0:	e775      	b.n	100105ce <_dtoa_r+0x3de>
100106e2:	9e04      	ldr	r6, [sp, #16]
100106e4:	465f      	mov	r7, fp
100106e6:	e792      	b.n	1001060e <_dtoa_r+0x41e>
100106e8:	9900      	ldr	r1, [sp, #0]
100106ea:	4b50      	ldr	r3, [pc, #320]	; (1001082c <_dtoa_r+0x63c>)
100106ec:	ed9d 7b02 	vldr	d7, [sp, #8]
100106f0:	4431      	add	r1, r6
100106f2:	9102      	str	r1, [sp, #8]
100106f4:	9909      	ldr	r1, [sp, #36]	; 0x24
100106f6:	eeb0 9a47 	vmov.f32	s18, s14
100106fa:	eef0 9a67 	vmov.f32	s19, s15
100106fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
10010702:	e953 2302 	ldrd	r2, r3, [r3, #-8]
10010706:	2900      	cmp	r1, #0
10010708:	d044      	beq.n	10010794 <_dtoa_r+0x5a4>
1001070a:	494e      	ldr	r1, [pc, #312]	; (10010844 <_dtoa_r+0x654>)
1001070c:	2000      	movs	r0, #0
1001070e:	f7ef ffe5 	bl	100006dc <__aeabi_ddiv>
10010712:	ec53 2b19 	vmov	r2, r3, d9
10010716:	f7ef fcff 	bl	10000118 <__aeabi_dsub>
1001071a:	9d00      	ldr	r5, [sp, #0]
1001071c:	ec41 0b19 	vmov	d9, r0, r1
10010720:	4649      	mov	r1, r9
10010722:	4640      	mov	r0, r8
10010724:	f7f0 f960 	bl	100009e8 <__aeabi_d2iz>
10010728:	4606      	mov	r6, r0
1001072a:	f7ef fe43 	bl	100003b4 <__aeabi_i2d>
1001072e:	4602      	mov	r2, r0
10010730:	460b      	mov	r3, r1
10010732:	4640      	mov	r0, r8
10010734:	4649      	mov	r1, r9
10010736:	f7ef fcef 	bl	10000118 <__aeabi_dsub>
1001073a:	3630      	adds	r6, #48	; 0x30
1001073c:	f805 6b01 	strb.w	r6, [r5], #1
10010740:	ec53 2b19 	vmov	r2, r3, d9
10010744:	4680      	mov	r8, r0
10010746:	4689      	mov	r9, r1
10010748:	f7f0 f910 	bl	1000096c <__aeabi_dcmplt>
1001074c:	2800      	cmp	r0, #0
1001074e:	d164      	bne.n	1001081a <_dtoa_r+0x62a>
10010750:	4642      	mov	r2, r8
10010752:	464b      	mov	r3, r9
10010754:	4937      	ldr	r1, [pc, #220]	; (10010834 <_dtoa_r+0x644>)
10010756:	2000      	movs	r0, #0
10010758:	f7ef fcde 	bl	10000118 <__aeabi_dsub>
1001075c:	ec53 2b19 	vmov	r2, r3, d9
10010760:	f7f0 f904 	bl	1000096c <__aeabi_dcmplt>
10010764:	2800      	cmp	r0, #0
10010766:	f040 80b6 	bne.w	100108d6 <_dtoa_r+0x6e6>
1001076a:	9b02      	ldr	r3, [sp, #8]
1001076c:	429d      	cmp	r5, r3
1001076e:	f43f af7c 	beq.w	1001066a <_dtoa_r+0x47a>
10010772:	4b31      	ldr	r3, [pc, #196]	; (10010838 <_dtoa_r+0x648>)
10010774:	ec51 0b19 	vmov	r0, r1, d9
10010778:	2200      	movs	r2, #0
1001077a:	f7ef fe85 	bl	10000488 <__aeabi_dmul>
1001077e:	4b2e      	ldr	r3, [pc, #184]	; (10010838 <_dtoa_r+0x648>)
10010780:	ec41 0b19 	vmov	d9, r0, r1
10010784:	2200      	movs	r2, #0
10010786:	4640      	mov	r0, r8
10010788:	4649      	mov	r1, r9
1001078a:	f7ef fe7d 	bl	10000488 <__aeabi_dmul>
1001078e:	4680      	mov	r8, r0
10010790:	4689      	mov	r9, r1
10010792:	e7c5      	b.n	10010720 <_dtoa_r+0x530>
10010794:	ec51 0b17 	vmov	r0, r1, d7
10010798:	f7ef fe76 	bl	10000488 <__aeabi_dmul>
1001079c:	9b02      	ldr	r3, [sp, #8]
1001079e:	9d00      	ldr	r5, [sp, #0]
100107a0:	930f      	str	r3, [sp, #60]	; 0x3c
100107a2:	ec41 0b19 	vmov	d9, r0, r1
100107a6:	4649      	mov	r1, r9
100107a8:	4640      	mov	r0, r8
100107aa:	f7f0 f91d 	bl	100009e8 <__aeabi_d2iz>
100107ae:	4606      	mov	r6, r0
100107b0:	f7ef fe00 	bl	100003b4 <__aeabi_i2d>
100107b4:	3630      	adds	r6, #48	; 0x30
100107b6:	4602      	mov	r2, r0
100107b8:	460b      	mov	r3, r1
100107ba:	4640      	mov	r0, r8
100107bc:	4649      	mov	r1, r9
100107be:	f7ef fcab 	bl	10000118 <__aeabi_dsub>
100107c2:	f805 6b01 	strb.w	r6, [r5], #1
100107c6:	9b02      	ldr	r3, [sp, #8]
100107c8:	429d      	cmp	r5, r3
100107ca:	4680      	mov	r8, r0
100107cc:	4689      	mov	r9, r1
100107ce:	f04f 0200 	mov.w	r2, #0
100107d2:	d124      	bne.n	1001081e <_dtoa_r+0x62e>
100107d4:	4b1b      	ldr	r3, [pc, #108]	; (10010844 <_dtoa_r+0x654>)
100107d6:	ec51 0b19 	vmov	r0, r1, d9
100107da:	f7ef fc9f 	bl	1000011c <__adddf3>
100107de:	4602      	mov	r2, r0
100107e0:	460b      	mov	r3, r1
100107e2:	4640      	mov	r0, r8
100107e4:	4649      	mov	r1, r9
100107e6:	f7f0 f8df 	bl	100009a8 <__aeabi_dcmpgt>
100107ea:	2800      	cmp	r0, #0
100107ec:	d173      	bne.n	100108d6 <_dtoa_r+0x6e6>
100107ee:	ec53 2b19 	vmov	r2, r3, d9
100107f2:	4914      	ldr	r1, [pc, #80]	; (10010844 <_dtoa_r+0x654>)
100107f4:	2000      	movs	r0, #0
100107f6:	f7ef fc8f 	bl	10000118 <__aeabi_dsub>
100107fa:	4602      	mov	r2, r0
100107fc:	460b      	mov	r3, r1
100107fe:	4640      	mov	r0, r8
10010800:	4649      	mov	r1, r9
10010802:	f7f0 f8b3 	bl	1000096c <__aeabi_dcmplt>
10010806:	2800      	cmp	r0, #0
10010808:	f43f af2f 	beq.w	1001066a <_dtoa_r+0x47a>
1001080c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
1001080e:	1e6b      	subs	r3, r5, #1
10010810:	930f      	str	r3, [sp, #60]	; 0x3c
10010812:	f815 3c01 	ldrb.w	r3, [r5, #-1]
10010816:	2b30      	cmp	r3, #48	; 0x30
10010818:	d0f8      	beq.n	1001080c <_dtoa_r+0x61c>
1001081a:	46bb      	mov	fp, r7
1001081c:	e04a      	b.n	100108b4 <_dtoa_r+0x6c4>
1001081e:	4b06      	ldr	r3, [pc, #24]	; (10010838 <_dtoa_r+0x648>)
10010820:	f7ef fe32 	bl	10000488 <__aeabi_dmul>
10010824:	4680      	mov	r8, r0
10010826:	4689      	mov	r9, r1
10010828:	e7bd      	b.n	100107a6 <_dtoa_r+0x5b6>
1001082a:	bf00      	nop
1001082c:	100169d8 	.word	0x100169d8
10010830:	100169b0 	.word	0x100169b0
10010834:	3ff00000 	.word	0x3ff00000
10010838:	40240000 	.word	0x40240000
1001083c:	401c0000 	.word	0x401c0000
10010840:	40140000 	.word	0x40140000
10010844:	3fe00000 	.word	0x3fe00000
10010848:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
1001084c:	9d00      	ldr	r5, [sp, #0]
1001084e:	4642      	mov	r2, r8
10010850:	464b      	mov	r3, r9
10010852:	4630      	mov	r0, r6
10010854:	4639      	mov	r1, r7
10010856:	f7ef ff41 	bl	100006dc <__aeabi_ddiv>
1001085a:	f7f0 f8c5 	bl	100009e8 <__aeabi_d2iz>
1001085e:	9001      	str	r0, [sp, #4]
10010860:	f7ef fda8 	bl	100003b4 <__aeabi_i2d>
10010864:	4642      	mov	r2, r8
10010866:	464b      	mov	r3, r9
10010868:	f7ef fe0e 	bl	10000488 <__aeabi_dmul>
1001086c:	4602      	mov	r2, r0
1001086e:	460b      	mov	r3, r1
10010870:	4630      	mov	r0, r6
10010872:	4639      	mov	r1, r7
10010874:	f7ef fc50 	bl	10000118 <__aeabi_dsub>
10010878:	9e01      	ldr	r6, [sp, #4]
1001087a:	9f04      	ldr	r7, [sp, #16]
1001087c:	3630      	adds	r6, #48	; 0x30
1001087e:	f805 6b01 	strb.w	r6, [r5], #1
10010882:	9e00      	ldr	r6, [sp, #0]
10010884:	1bae      	subs	r6, r5, r6
10010886:	42b7      	cmp	r7, r6
10010888:	4602      	mov	r2, r0
1001088a:	460b      	mov	r3, r1
1001088c:	d134      	bne.n	100108f8 <_dtoa_r+0x708>
1001088e:	f7ef fc45 	bl	1000011c <__adddf3>
10010892:	4642      	mov	r2, r8
10010894:	464b      	mov	r3, r9
10010896:	4606      	mov	r6, r0
10010898:	460f      	mov	r7, r1
1001089a:	f7f0 f885 	bl	100009a8 <__aeabi_dcmpgt>
1001089e:	b9c8      	cbnz	r0, 100108d4 <_dtoa_r+0x6e4>
100108a0:	4642      	mov	r2, r8
100108a2:	464b      	mov	r3, r9
100108a4:	4630      	mov	r0, r6
100108a6:	4639      	mov	r1, r7
100108a8:	f7f0 f856 	bl	10000958 <__aeabi_dcmpeq>
100108ac:	b110      	cbz	r0, 100108b4 <_dtoa_r+0x6c4>
100108ae:	9b01      	ldr	r3, [sp, #4]
100108b0:	07db      	lsls	r3, r3, #31
100108b2:	d40f      	bmi.n	100108d4 <_dtoa_r+0x6e4>
100108b4:	4651      	mov	r1, sl
100108b6:	4620      	mov	r0, r4
100108b8:	f000 fb18 	bl	10010eec <_Bfree>
100108bc:	2300      	movs	r3, #0
100108be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
100108c0:	702b      	strb	r3, [r5, #0]
100108c2:	f10b 0301 	add.w	r3, fp, #1
100108c6:	6013      	str	r3, [r2, #0]
100108c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
100108ca:	2b00      	cmp	r3, #0
100108cc:	f43f ace2 	beq.w	10010294 <_dtoa_r+0xa4>
100108d0:	601d      	str	r5, [r3, #0]
100108d2:	e4df      	b.n	10010294 <_dtoa_r+0xa4>
100108d4:	465f      	mov	r7, fp
100108d6:	462b      	mov	r3, r5
100108d8:	461d      	mov	r5, r3
100108da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
100108de:	2a39      	cmp	r2, #57	; 0x39
100108e0:	d106      	bne.n	100108f0 <_dtoa_r+0x700>
100108e2:	9a00      	ldr	r2, [sp, #0]
100108e4:	429a      	cmp	r2, r3
100108e6:	d1f7      	bne.n	100108d8 <_dtoa_r+0x6e8>
100108e8:	9900      	ldr	r1, [sp, #0]
100108ea:	2230      	movs	r2, #48	; 0x30
100108ec:	3701      	adds	r7, #1
100108ee:	700a      	strb	r2, [r1, #0]
100108f0:	781a      	ldrb	r2, [r3, #0]
100108f2:	3201      	adds	r2, #1
100108f4:	701a      	strb	r2, [r3, #0]
100108f6:	e790      	b.n	1001081a <_dtoa_r+0x62a>
100108f8:	4ba3      	ldr	r3, [pc, #652]	; (10010b88 <_dtoa_r+0x998>)
100108fa:	2200      	movs	r2, #0
100108fc:	f7ef fdc4 	bl	10000488 <__aeabi_dmul>
10010900:	2200      	movs	r2, #0
10010902:	2300      	movs	r3, #0
10010904:	4606      	mov	r6, r0
10010906:	460f      	mov	r7, r1
10010908:	f7f0 f826 	bl	10000958 <__aeabi_dcmpeq>
1001090c:	2800      	cmp	r0, #0
1001090e:	d09e      	beq.n	1001084e <_dtoa_r+0x65e>
10010910:	e7d0      	b.n	100108b4 <_dtoa_r+0x6c4>
10010912:	9a09      	ldr	r2, [sp, #36]	; 0x24
10010914:	2a00      	cmp	r2, #0
10010916:	f000 80ca 	beq.w	10010aae <_dtoa_r+0x8be>
1001091a:	9a07      	ldr	r2, [sp, #28]
1001091c:	2a01      	cmp	r2, #1
1001091e:	f300 80ad 	bgt.w	10010a7c <_dtoa_r+0x88c>
10010922:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10010924:	2a00      	cmp	r2, #0
10010926:	f000 80a5 	beq.w	10010a74 <_dtoa_r+0x884>
1001092a:	f203 4333 	addw	r3, r3, #1075	; 0x433
1001092e:	9e08      	ldr	r6, [sp, #32]
10010930:	9d05      	ldr	r5, [sp, #20]
10010932:	9a05      	ldr	r2, [sp, #20]
10010934:	441a      	add	r2, r3
10010936:	9205      	str	r2, [sp, #20]
10010938:	9a06      	ldr	r2, [sp, #24]
1001093a:	2101      	movs	r1, #1
1001093c:	441a      	add	r2, r3
1001093e:	4620      	mov	r0, r4
10010940:	9206      	str	r2, [sp, #24]
10010942:	f000 fb89 	bl	10011058 <__i2b>
10010946:	4607      	mov	r7, r0
10010948:	b165      	cbz	r5, 10010964 <_dtoa_r+0x774>
1001094a:	9b06      	ldr	r3, [sp, #24]
1001094c:	2b00      	cmp	r3, #0
1001094e:	dd09      	ble.n	10010964 <_dtoa_r+0x774>
10010950:	42ab      	cmp	r3, r5
10010952:	9a05      	ldr	r2, [sp, #20]
10010954:	bfa8      	it	ge
10010956:	462b      	movge	r3, r5
10010958:	1ad2      	subs	r2, r2, r3
1001095a:	9205      	str	r2, [sp, #20]
1001095c:	9a06      	ldr	r2, [sp, #24]
1001095e:	1aed      	subs	r5, r5, r3
10010960:	1ad3      	subs	r3, r2, r3
10010962:	9306      	str	r3, [sp, #24]
10010964:	9b08      	ldr	r3, [sp, #32]
10010966:	b1f3      	cbz	r3, 100109a6 <_dtoa_r+0x7b6>
10010968:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001096a:	2b00      	cmp	r3, #0
1001096c:	f000 80a3 	beq.w	10010ab6 <_dtoa_r+0x8c6>
10010970:	2e00      	cmp	r6, #0
10010972:	dd10      	ble.n	10010996 <_dtoa_r+0x7a6>
10010974:	4639      	mov	r1, r7
10010976:	4632      	mov	r2, r6
10010978:	4620      	mov	r0, r4
1001097a:	f000 fc2d 	bl	100111d8 <__pow5mult>
1001097e:	4652      	mov	r2, sl
10010980:	4601      	mov	r1, r0
10010982:	4607      	mov	r7, r0
10010984:	4620      	mov	r0, r4
10010986:	f000 fb7d 	bl	10011084 <__multiply>
1001098a:	4651      	mov	r1, sl
1001098c:	4680      	mov	r8, r0
1001098e:	4620      	mov	r0, r4
10010990:	f000 faac 	bl	10010eec <_Bfree>
10010994:	46c2      	mov	sl, r8
10010996:	9b08      	ldr	r3, [sp, #32]
10010998:	1b9a      	subs	r2, r3, r6
1001099a:	d004      	beq.n	100109a6 <_dtoa_r+0x7b6>
1001099c:	4651      	mov	r1, sl
1001099e:	4620      	mov	r0, r4
100109a0:	f000 fc1a 	bl	100111d8 <__pow5mult>
100109a4:	4682      	mov	sl, r0
100109a6:	2101      	movs	r1, #1
100109a8:	4620      	mov	r0, r4
100109aa:	f000 fb55 	bl	10011058 <__i2b>
100109ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100109b0:	2b00      	cmp	r3, #0
100109b2:	4606      	mov	r6, r0
100109b4:	f340 8081 	ble.w	10010aba <_dtoa_r+0x8ca>
100109b8:	461a      	mov	r2, r3
100109ba:	4601      	mov	r1, r0
100109bc:	4620      	mov	r0, r4
100109be:	f000 fc0b 	bl	100111d8 <__pow5mult>
100109c2:	9b07      	ldr	r3, [sp, #28]
100109c4:	2b01      	cmp	r3, #1
100109c6:	4606      	mov	r6, r0
100109c8:	dd7a      	ble.n	10010ac0 <_dtoa_r+0x8d0>
100109ca:	f04f 0800 	mov.w	r8, #0
100109ce:	6933      	ldr	r3, [r6, #16]
100109d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
100109d4:	6918      	ldr	r0, [r3, #16]
100109d6:	f000 faf1 	bl	10010fbc <__hi0bits>
100109da:	f1c0 0020 	rsb	r0, r0, #32
100109de:	9b06      	ldr	r3, [sp, #24]
100109e0:	4418      	add	r0, r3
100109e2:	f010 001f 	ands.w	r0, r0, #31
100109e6:	f000 8094 	beq.w	10010b12 <_dtoa_r+0x922>
100109ea:	f1c0 0320 	rsb	r3, r0, #32
100109ee:	2b04      	cmp	r3, #4
100109f0:	f340 8085 	ble.w	10010afe <_dtoa_r+0x90e>
100109f4:	9b05      	ldr	r3, [sp, #20]
100109f6:	f1c0 001c 	rsb	r0, r0, #28
100109fa:	4403      	add	r3, r0
100109fc:	9305      	str	r3, [sp, #20]
100109fe:	9b06      	ldr	r3, [sp, #24]
10010a00:	4403      	add	r3, r0
10010a02:	4405      	add	r5, r0
10010a04:	9306      	str	r3, [sp, #24]
10010a06:	9b05      	ldr	r3, [sp, #20]
10010a08:	2b00      	cmp	r3, #0
10010a0a:	dd05      	ble.n	10010a18 <_dtoa_r+0x828>
10010a0c:	4651      	mov	r1, sl
10010a0e:	461a      	mov	r2, r3
10010a10:	4620      	mov	r0, r4
10010a12:	f000 fc3b 	bl	1001128c <__lshift>
10010a16:	4682      	mov	sl, r0
10010a18:	9b06      	ldr	r3, [sp, #24]
10010a1a:	2b00      	cmp	r3, #0
10010a1c:	dd05      	ble.n	10010a2a <_dtoa_r+0x83a>
10010a1e:	4631      	mov	r1, r6
10010a20:	461a      	mov	r2, r3
10010a22:	4620      	mov	r0, r4
10010a24:	f000 fc32 	bl	1001128c <__lshift>
10010a28:	4606      	mov	r6, r0
10010a2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10010a2c:	2b00      	cmp	r3, #0
10010a2e:	d072      	beq.n	10010b16 <_dtoa_r+0x926>
10010a30:	4631      	mov	r1, r6
10010a32:	4650      	mov	r0, sl
10010a34:	f000 fc96 	bl	10011364 <__mcmp>
10010a38:	2800      	cmp	r0, #0
10010a3a:	da6c      	bge.n	10010b16 <_dtoa_r+0x926>
10010a3c:	2300      	movs	r3, #0
10010a3e:	4651      	mov	r1, sl
10010a40:	220a      	movs	r2, #10
10010a42:	4620      	mov	r0, r4
10010a44:	f000 fa74 	bl	10010f30 <__multadd>
10010a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
10010a4a:	f10b 3bff 	add.w	fp, fp, #4294967295
10010a4e:	4682      	mov	sl, r0
10010a50:	2b00      	cmp	r3, #0
10010a52:	f000 81b0 	beq.w	10010db6 <_dtoa_r+0xbc6>
10010a56:	2300      	movs	r3, #0
10010a58:	4639      	mov	r1, r7
10010a5a:	220a      	movs	r2, #10
10010a5c:	4620      	mov	r0, r4
10010a5e:	f000 fa67 	bl	10010f30 <__multadd>
10010a62:	9b01      	ldr	r3, [sp, #4]
10010a64:	2b00      	cmp	r3, #0
10010a66:	4607      	mov	r7, r0
10010a68:	f300 8096 	bgt.w	10010b98 <_dtoa_r+0x9a8>
10010a6c:	9b07      	ldr	r3, [sp, #28]
10010a6e:	2b02      	cmp	r3, #2
10010a70:	dc59      	bgt.n	10010b26 <_dtoa_r+0x936>
10010a72:	e091      	b.n	10010b98 <_dtoa_r+0x9a8>
10010a74:	9b10      	ldr	r3, [sp, #64]	; 0x40
10010a76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
10010a7a:	e758      	b.n	1001092e <_dtoa_r+0x73e>
10010a7c:	9b04      	ldr	r3, [sp, #16]
10010a7e:	1e5e      	subs	r6, r3, #1
10010a80:	9b08      	ldr	r3, [sp, #32]
10010a82:	42b3      	cmp	r3, r6
10010a84:	bfbf      	itttt	lt
10010a86:	9b08      	ldrlt	r3, [sp, #32]
10010a88:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
10010a8a:	9608      	strlt	r6, [sp, #32]
10010a8c:	1af3      	sublt	r3, r6, r3
10010a8e:	bfb4      	ite	lt
10010a90:	18d2      	addlt	r2, r2, r3
10010a92:	1b9e      	subge	r6, r3, r6
10010a94:	9b04      	ldr	r3, [sp, #16]
10010a96:	bfbc      	itt	lt
10010a98:	920b      	strlt	r2, [sp, #44]	; 0x2c
10010a9a:	2600      	movlt	r6, #0
10010a9c:	2b00      	cmp	r3, #0
10010a9e:	bfb7      	itett	lt
10010aa0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
10010aa4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
10010aa8:	1a9d      	sublt	r5, r3, r2
10010aaa:	2300      	movlt	r3, #0
10010aac:	e741      	b.n	10010932 <_dtoa_r+0x742>
10010aae:	9e08      	ldr	r6, [sp, #32]
10010ab0:	9d05      	ldr	r5, [sp, #20]
10010ab2:	9f09      	ldr	r7, [sp, #36]	; 0x24
10010ab4:	e748      	b.n	10010948 <_dtoa_r+0x758>
10010ab6:	9a08      	ldr	r2, [sp, #32]
10010ab8:	e770      	b.n	1001099c <_dtoa_r+0x7ac>
10010aba:	9b07      	ldr	r3, [sp, #28]
10010abc:	2b01      	cmp	r3, #1
10010abe:	dc19      	bgt.n	10010af4 <_dtoa_r+0x904>
10010ac0:	9b02      	ldr	r3, [sp, #8]
10010ac2:	b9bb      	cbnz	r3, 10010af4 <_dtoa_r+0x904>
10010ac4:	9b03      	ldr	r3, [sp, #12]
10010ac6:	f3c3 0313 	ubfx	r3, r3, #0, #20
10010aca:	b99b      	cbnz	r3, 10010af4 <_dtoa_r+0x904>
10010acc:	9b03      	ldr	r3, [sp, #12]
10010ace:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
10010ad2:	0d1b      	lsrs	r3, r3, #20
10010ad4:	051b      	lsls	r3, r3, #20
10010ad6:	b183      	cbz	r3, 10010afa <_dtoa_r+0x90a>
10010ad8:	9b05      	ldr	r3, [sp, #20]
10010ada:	3301      	adds	r3, #1
10010adc:	9305      	str	r3, [sp, #20]
10010ade:	9b06      	ldr	r3, [sp, #24]
10010ae0:	3301      	adds	r3, #1
10010ae2:	9306      	str	r3, [sp, #24]
10010ae4:	f04f 0801 	mov.w	r8, #1
10010ae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10010aea:	2b00      	cmp	r3, #0
10010aec:	f47f af6f 	bne.w	100109ce <_dtoa_r+0x7de>
10010af0:	2001      	movs	r0, #1
10010af2:	e774      	b.n	100109de <_dtoa_r+0x7ee>
10010af4:	f04f 0800 	mov.w	r8, #0
10010af8:	e7f6      	b.n	10010ae8 <_dtoa_r+0x8f8>
10010afa:	4698      	mov	r8, r3
10010afc:	e7f4      	b.n	10010ae8 <_dtoa_r+0x8f8>
10010afe:	d082      	beq.n	10010a06 <_dtoa_r+0x816>
10010b00:	9a05      	ldr	r2, [sp, #20]
10010b02:	331c      	adds	r3, #28
10010b04:	441a      	add	r2, r3
10010b06:	9205      	str	r2, [sp, #20]
10010b08:	9a06      	ldr	r2, [sp, #24]
10010b0a:	441a      	add	r2, r3
10010b0c:	441d      	add	r5, r3
10010b0e:	9206      	str	r2, [sp, #24]
10010b10:	e779      	b.n	10010a06 <_dtoa_r+0x816>
10010b12:	4603      	mov	r3, r0
10010b14:	e7f4      	b.n	10010b00 <_dtoa_r+0x910>
10010b16:	9b04      	ldr	r3, [sp, #16]
10010b18:	2b00      	cmp	r3, #0
10010b1a:	dc37      	bgt.n	10010b8c <_dtoa_r+0x99c>
10010b1c:	9b07      	ldr	r3, [sp, #28]
10010b1e:	2b02      	cmp	r3, #2
10010b20:	dd34      	ble.n	10010b8c <_dtoa_r+0x99c>
10010b22:	9b04      	ldr	r3, [sp, #16]
10010b24:	9301      	str	r3, [sp, #4]
10010b26:	9b01      	ldr	r3, [sp, #4]
10010b28:	b963      	cbnz	r3, 10010b44 <_dtoa_r+0x954>
10010b2a:	4631      	mov	r1, r6
10010b2c:	2205      	movs	r2, #5
10010b2e:	4620      	mov	r0, r4
10010b30:	f000 f9fe 	bl	10010f30 <__multadd>
10010b34:	4601      	mov	r1, r0
10010b36:	4606      	mov	r6, r0
10010b38:	4650      	mov	r0, sl
10010b3a:	f000 fc13 	bl	10011364 <__mcmp>
10010b3e:	2800      	cmp	r0, #0
10010b40:	f73f adbb 	bgt.w	100106ba <_dtoa_r+0x4ca>
10010b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10010b46:	9d00      	ldr	r5, [sp, #0]
10010b48:	ea6f 0b03 	mvn.w	fp, r3
10010b4c:	f04f 0800 	mov.w	r8, #0
10010b50:	4631      	mov	r1, r6
10010b52:	4620      	mov	r0, r4
10010b54:	f000 f9ca 	bl	10010eec <_Bfree>
10010b58:	2f00      	cmp	r7, #0
10010b5a:	f43f aeab 	beq.w	100108b4 <_dtoa_r+0x6c4>
10010b5e:	f1b8 0f00 	cmp.w	r8, #0
10010b62:	d005      	beq.n	10010b70 <_dtoa_r+0x980>
10010b64:	45b8      	cmp	r8, r7
10010b66:	d003      	beq.n	10010b70 <_dtoa_r+0x980>
10010b68:	4641      	mov	r1, r8
10010b6a:	4620      	mov	r0, r4
10010b6c:	f000 f9be 	bl	10010eec <_Bfree>
10010b70:	4639      	mov	r1, r7
10010b72:	4620      	mov	r0, r4
10010b74:	f000 f9ba 	bl	10010eec <_Bfree>
10010b78:	e69c      	b.n	100108b4 <_dtoa_r+0x6c4>
10010b7a:	2600      	movs	r6, #0
10010b7c:	4637      	mov	r7, r6
10010b7e:	e7e1      	b.n	10010b44 <_dtoa_r+0x954>
10010b80:	46bb      	mov	fp, r7
10010b82:	4637      	mov	r7, r6
10010b84:	e599      	b.n	100106ba <_dtoa_r+0x4ca>
10010b86:	bf00      	nop
10010b88:	40240000 	.word	0x40240000
10010b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
10010b8e:	2b00      	cmp	r3, #0
10010b90:	f000 80c8 	beq.w	10010d24 <_dtoa_r+0xb34>
10010b94:	9b04      	ldr	r3, [sp, #16]
10010b96:	9301      	str	r3, [sp, #4]
10010b98:	2d00      	cmp	r5, #0
10010b9a:	dd05      	ble.n	10010ba8 <_dtoa_r+0x9b8>
10010b9c:	4639      	mov	r1, r7
10010b9e:	462a      	mov	r2, r5
10010ba0:	4620      	mov	r0, r4
10010ba2:	f000 fb73 	bl	1001128c <__lshift>
10010ba6:	4607      	mov	r7, r0
10010ba8:	f1b8 0f00 	cmp.w	r8, #0
10010bac:	d05b      	beq.n	10010c66 <_dtoa_r+0xa76>
10010bae:	6879      	ldr	r1, [r7, #4]
10010bb0:	4620      	mov	r0, r4
10010bb2:	f000 f95b 	bl	10010e6c <_Balloc>
10010bb6:	4605      	mov	r5, r0
10010bb8:	b928      	cbnz	r0, 10010bc6 <_dtoa_r+0x9d6>
10010bba:	4b83      	ldr	r3, [pc, #524]	; (10010dc8 <_dtoa_r+0xbd8>)
10010bbc:	4602      	mov	r2, r0
10010bbe:	f240 21ef 	movw	r1, #751	; 0x2ef
10010bc2:	f7ff bb2e 	b.w	10010222 <_dtoa_r+0x32>
10010bc6:	693a      	ldr	r2, [r7, #16]
10010bc8:	3202      	adds	r2, #2
10010bca:	0092      	lsls	r2, r2, #2
10010bcc:	f107 010c 	add.w	r1, r7, #12
10010bd0:	300c      	adds	r0, #12
10010bd2:	f7ff fa6e 	bl	100100b2 <memcpy>
10010bd6:	2201      	movs	r2, #1
10010bd8:	4629      	mov	r1, r5
10010bda:	4620      	mov	r0, r4
10010bdc:	f000 fb56 	bl	1001128c <__lshift>
10010be0:	9b00      	ldr	r3, [sp, #0]
10010be2:	3301      	adds	r3, #1
10010be4:	9304      	str	r3, [sp, #16]
10010be6:	e9dd 2300 	ldrd	r2, r3, [sp]
10010bea:	4413      	add	r3, r2
10010bec:	9308      	str	r3, [sp, #32]
10010bee:	9b02      	ldr	r3, [sp, #8]
10010bf0:	f003 0301 	and.w	r3, r3, #1
10010bf4:	46b8      	mov	r8, r7
10010bf6:	9306      	str	r3, [sp, #24]
10010bf8:	4607      	mov	r7, r0
10010bfa:	9b04      	ldr	r3, [sp, #16]
10010bfc:	4631      	mov	r1, r6
10010bfe:	3b01      	subs	r3, #1
10010c00:	4650      	mov	r0, sl
10010c02:	9301      	str	r3, [sp, #4]
10010c04:	f7ff fa6a 	bl	100100dc <quorem>
10010c08:	4641      	mov	r1, r8
10010c0a:	9002      	str	r0, [sp, #8]
10010c0c:	f100 0930 	add.w	r9, r0, #48	; 0x30
10010c10:	4650      	mov	r0, sl
10010c12:	f000 fba7 	bl	10011364 <__mcmp>
10010c16:	463a      	mov	r2, r7
10010c18:	9005      	str	r0, [sp, #20]
10010c1a:	4631      	mov	r1, r6
10010c1c:	4620      	mov	r0, r4
10010c1e:	f000 fbbd 	bl	1001139c <__mdiff>
10010c22:	68c2      	ldr	r2, [r0, #12]
10010c24:	4605      	mov	r5, r0
10010c26:	bb02      	cbnz	r2, 10010c6a <_dtoa_r+0xa7a>
10010c28:	4601      	mov	r1, r0
10010c2a:	4650      	mov	r0, sl
10010c2c:	f000 fb9a 	bl	10011364 <__mcmp>
10010c30:	4602      	mov	r2, r0
10010c32:	4629      	mov	r1, r5
10010c34:	4620      	mov	r0, r4
10010c36:	9209      	str	r2, [sp, #36]	; 0x24
10010c38:	f000 f958 	bl	10010eec <_Bfree>
10010c3c:	9b07      	ldr	r3, [sp, #28]
10010c3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
10010c40:	9d04      	ldr	r5, [sp, #16]
10010c42:	ea43 0102 	orr.w	r1, r3, r2
10010c46:	9b06      	ldr	r3, [sp, #24]
10010c48:	4319      	orrs	r1, r3
10010c4a:	d110      	bne.n	10010c6e <_dtoa_r+0xa7e>
10010c4c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
10010c50:	d029      	beq.n	10010ca6 <_dtoa_r+0xab6>
10010c52:	9b05      	ldr	r3, [sp, #20]
10010c54:	2b00      	cmp	r3, #0
10010c56:	dd02      	ble.n	10010c5e <_dtoa_r+0xa6e>
10010c58:	9b02      	ldr	r3, [sp, #8]
10010c5a:	f103 0931 	add.w	r9, r3, #49	; 0x31
10010c5e:	9b01      	ldr	r3, [sp, #4]
10010c60:	f883 9000 	strb.w	r9, [r3]
10010c64:	e774      	b.n	10010b50 <_dtoa_r+0x960>
10010c66:	4638      	mov	r0, r7
10010c68:	e7ba      	b.n	10010be0 <_dtoa_r+0x9f0>
10010c6a:	2201      	movs	r2, #1
10010c6c:	e7e1      	b.n	10010c32 <_dtoa_r+0xa42>
10010c6e:	9b05      	ldr	r3, [sp, #20]
10010c70:	2b00      	cmp	r3, #0
10010c72:	db04      	blt.n	10010c7e <_dtoa_r+0xa8e>
10010c74:	9907      	ldr	r1, [sp, #28]
10010c76:	430b      	orrs	r3, r1
10010c78:	9906      	ldr	r1, [sp, #24]
10010c7a:	430b      	orrs	r3, r1
10010c7c:	d120      	bne.n	10010cc0 <_dtoa_r+0xad0>
10010c7e:	2a00      	cmp	r2, #0
10010c80:	dded      	ble.n	10010c5e <_dtoa_r+0xa6e>
10010c82:	4651      	mov	r1, sl
10010c84:	2201      	movs	r2, #1
10010c86:	4620      	mov	r0, r4
10010c88:	f000 fb00 	bl	1001128c <__lshift>
10010c8c:	4631      	mov	r1, r6
10010c8e:	4682      	mov	sl, r0
10010c90:	f000 fb68 	bl	10011364 <__mcmp>
10010c94:	2800      	cmp	r0, #0
10010c96:	dc03      	bgt.n	10010ca0 <_dtoa_r+0xab0>
10010c98:	d1e1      	bne.n	10010c5e <_dtoa_r+0xa6e>
10010c9a:	f019 0f01 	tst.w	r9, #1
10010c9e:	d0de      	beq.n	10010c5e <_dtoa_r+0xa6e>
10010ca0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
10010ca4:	d1d8      	bne.n	10010c58 <_dtoa_r+0xa68>
10010ca6:	9a01      	ldr	r2, [sp, #4]
10010ca8:	2339      	movs	r3, #57	; 0x39
10010caa:	7013      	strb	r3, [r2, #0]
10010cac:	462b      	mov	r3, r5
10010cae:	461d      	mov	r5, r3
10010cb0:	3b01      	subs	r3, #1
10010cb2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
10010cb6:	2a39      	cmp	r2, #57	; 0x39
10010cb8:	d06c      	beq.n	10010d94 <_dtoa_r+0xba4>
10010cba:	3201      	adds	r2, #1
10010cbc:	701a      	strb	r2, [r3, #0]
10010cbe:	e747      	b.n	10010b50 <_dtoa_r+0x960>
10010cc0:	2a00      	cmp	r2, #0
10010cc2:	dd07      	ble.n	10010cd4 <_dtoa_r+0xae4>
10010cc4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
10010cc8:	d0ed      	beq.n	10010ca6 <_dtoa_r+0xab6>
10010cca:	9a01      	ldr	r2, [sp, #4]
10010ccc:	f109 0301 	add.w	r3, r9, #1
10010cd0:	7013      	strb	r3, [r2, #0]
10010cd2:	e73d      	b.n	10010b50 <_dtoa_r+0x960>
10010cd4:	9b04      	ldr	r3, [sp, #16]
10010cd6:	9a08      	ldr	r2, [sp, #32]
10010cd8:	f803 9c01 	strb.w	r9, [r3, #-1]
10010cdc:	4293      	cmp	r3, r2
10010cde:	d043      	beq.n	10010d68 <_dtoa_r+0xb78>
10010ce0:	4651      	mov	r1, sl
10010ce2:	2300      	movs	r3, #0
10010ce4:	220a      	movs	r2, #10
10010ce6:	4620      	mov	r0, r4
10010ce8:	f000 f922 	bl	10010f30 <__multadd>
10010cec:	45b8      	cmp	r8, r7
10010cee:	4682      	mov	sl, r0
10010cf0:	f04f 0300 	mov.w	r3, #0
10010cf4:	f04f 020a 	mov.w	r2, #10
10010cf8:	4641      	mov	r1, r8
10010cfa:	4620      	mov	r0, r4
10010cfc:	d107      	bne.n	10010d0e <_dtoa_r+0xb1e>
10010cfe:	f000 f917 	bl	10010f30 <__multadd>
10010d02:	4680      	mov	r8, r0
10010d04:	4607      	mov	r7, r0
10010d06:	9b04      	ldr	r3, [sp, #16]
10010d08:	3301      	adds	r3, #1
10010d0a:	9304      	str	r3, [sp, #16]
10010d0c:	e775      	b.n	10010bfa <_dtoa_r+0xa0a>
10010d0e:	f000 f90f 	bl	10010f30 <__multadd>
10010d12:	4639      	mov	r1, r7
10010d14:	4680      	mov	r8, r0
10010d16:	2300      	movs	r3, #0
10010d18:	220a      	movs	r2, #10
10010d1a:	4620      	mov	r0, r4
10010d1c:	f000 f908 	bl	10010f30 <__multadd>
10010d20:	4607      	mov	r7, r0
10010d22:	e7f0      	b.n	10010d06 <_dtoa_r+0xb16>
10010d24:	9b04      	ldr	r3, [sp, #16]
10010d26:	9301      	str	r3, [sp, #4]
10010d28:	9d00      	ldr	r5, [sp, #0]
10010d2a:	4631      	mov	r1, r6
10010d2c:	4650      	mov	r0, sl
10010d2e:	f7ff f9d5 	bl	100100dc <quorem>
10010d32:	f100 0930 	add.w	r9, r0, #48	; 0x30
10010d36:	9b00      	ldr	r3, [sp, #0]
10010d38:	f805 9b01 	strb.w	r9, [r5], #1
10010d3c:	1aea      	subs	r2, r5, r3
10010d3e:	9b01      	ldr	r3, [sp, #4]
10010d40:	4293      	cmp	r3, r2
10010d42:	dd07      	ble.n	10010d54 <_dtoa_r+0xb64>
10010d44:	4651      	mov	r1, sl
10010d46:	2300      	movs	r3, #0
10010d48:	220a      	movs	r2, #10
10010d4a:	4620      	mov	r0, r4
10010d4c:	f000 f8f0 	bl	10010f30 <__multadd>
10010d50:	4682      	mov	sl, r0
10010d52:	e7ea      	b.n	10010d2a <_dtoa_r+0xb3a>
10010d54:	9b01      	ldr	r3, [sp, #4]
10010d56:	2b00      	cmp	r3, #0
10010d58:	bfc8      	it	gt
10010d5a:	461d      	movgt	r5, r3
10010d5c:	9b00      	ldr	r3, [sp, #0]
10010d5e:	bfd8      	it	le
10010d60:	2501      	movle	r5, #1
10010d62:	441d      	add	r5, r3
10010d64:	f04f 0800 	mov.w	r8, #0
10010d68:	4651      	mov	r1, sl
10010d6a:	2201      	movs	r2, #1
10010d6c:	4620      	mov	r0, r4
10010d6e:	f000 fa8d 	bl	1001128c <__lshift>
10010d72:	4631      	mov	r1, r6
10010d74:	4682      	mov	sl, r0
10010d76:	f000 faf5 	bl	10011364 <__mcmp>
10010d7a:	2800      	cmp	r0, #0
10010d7c:	dc96      	bgt.n	10010cac <_dtoa_r+0xabc>
10010d7e:	d102      	bne.n	10010d86 <_dtoa_r+0xb96>
10010d80:	f019 0f01 	tst.w	r9, #1
10010d84:	d192      	bne.n	10010cac <_dtoa_r+0xabc>
10010d86:	462b      	mov	r3, r5
10010d88:	461d      	mov	r5, r3
10010d8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
10010d8e:	2a30      	cmp	r2, #48	; 0x30
10010d90:	d0fa      	beq.n	10010d88 <_dtoa_r+0xb98>
10010d92:	e6dd      	b.n	10010b50 <_dtoa_r+0x960>
10010d94:	9a00      	ldr	r2, [sp, #0]
10010d96:	429a      	cmp	r2, r3
10010d98:	d189      	bne.n	10010cae <_dtoa_r+0xabe>
10010d9a:	f10b 0b01 	add.w	fp, fp, #1
10010d9e:	2331      	movs	r3, #49	; 0x31
10010da0:	e796      	b.n	10010cd0 <_dtoa_r+0xae0>
10010da2:	4b0a      	ldr	r3, [pc, #40]	; (10010dcc <_dtoa_r+0xbdc>)
10010da4:	f7ff ba99 	b.w	100102da <_dtoa_r+0xea>
10010da8:	9b21      	ldr	r3, [sp, #132]	; 0x84
10010daa:	2b00      	cmp	r3, #0
10010dac:	f47f aa6d 	bne.w	1001028a <_dtoa_r+0x9a>
10010db0:	4b07      	ldr	r3, [pc, #28]	; (10010dd0 <_dtoa_r+0xbe0>)
10010db2:	f7ff ba92 	b.w	100102da <_dtoa_r+0xea>
10010db6:	9b01      	ldr	r3, [sp, #4]
10010db8:	2b00      	cmp	r3, #0
10010dba:	dcb5      	bgt.n	10010d28 <_dtoa_r+0xb38>
10010dbc:	9b07      	ldr	r3, [sp, #28]
10010dbe:	2b02      	cmp	r3, #2
10010dc0:	f73f aeb1 	bgt.w	10010b26 <_dtoa_r+0x936>
10010dc4:	e7b0      	b.n	10010d28 <_dtoa_r+0xb38>
10010dc6:	bf00      	nop
10010dc8:	10016944 	.word	0x10016944
10010dcc:	100168a4 	.word	0x100168a4
10010dd0:	100168c8 	.word	0x100168c8

10010dd4 <_free_r>:
10010dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
10010dd6:	2900      	cmp	r1, #0
10010dd8:	d044      	beq.n	10010e64 <_free_r+0x90>
10010dda:	f851 3c04 	ldr.w	r3, [r1, #-4]
10010dde:	9001      	str	r0, [sp, #4]
10010de0:	2b00      	cmp	r3, #0
10010de2:	f1a1 0404 	sub.w	r4, r1, #4
10010de6:	bfb8      	it	lt
10010de8:	18e4      	addlt	r4, r4, r3
10010dea:	f7fe fad5 	bl	1000f398 <__malloc_lock>
10010dee:	4a1e      	ldr	r2, [pc, #120]	; (10010e68 <_free_r+0x94>)
10010df0:	9801      	ldr	r0, [sp, #4]
10010df2:	6813      	ldr	r3, [r2, #0]
10010df4:	b933      	cbnz	r3, 10010e04 <_free_r+0x30>
10010df6:	6063      	str	r3, [r4, #4]
10010df8:	6014      	str	r4, [r2, #0]
10010dfa:	b003      	add	sp, #12
10010dfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
10010e00:	f7fe bad0 	b.w	1000f3a4 <__malloc_unlock>
10010e04:	42a3      	cmp	r3, r4
10010e06:	d908      	bls.n	10010e1a <_free_r+0x46>
10010e08:	6825      	ldr	r5, [r4, #0]
10010e0a:	1961      	adds	r1, r4, r5
10010e0c:	428b      	cmp	r3, r1
10010e0e:	bf01      	itttt	eq
10010e10:	6819      	ldreq	r1, [r3, #0]
10010e12:	685b      	ldreq	r3, [r3, #4]
10010e14:	1949      	addeq	r1, r1, r5
10010e16:	6021      	streq	r1, [r4, #0]
10010e18:	e7ed      	b.n	10010df6 <_free_r+0x22>
10010e1a:	461a      	mov	r2, r3
10010e1c:	685b      	ldr	r3, [r3, #4]
10010e1e:	b10b      	cbz	r3, 10010e24 <_free_r+0x50>
10010e20:	42a3      	cmp	r3, r4
10010e22:	d9fa      	bls.n	10010e1a <_free_r+0x46>
10010e24:	6811      	ldr	r1, [r2, #0]
10010e26:	1855      	adds	r5, r2, r1
10010e28:	42a5      	cmp	r5, r4
10010e2a:	d10b      	bne.n	10010e44 <_free_r+0x70>
10010e2c:	6824      	ldr	r4, [r4, #0]
10010e2e:	4421      	add	r1, r4
10010e30:	1854      	adds	r4, r2, r1
10010e32:	42a3      	cmp	r3, r4
10010e34:	6011      	str	r1, [r2, #0]
10010e36:	d1e0      	bne.n	10010dfa <_free_r+0x26>
10010e38:	681c      	ldr	r4, [r3, #0]
10010e3a:	685b      	ldr	r3, [r3, #4]
10010e3c:	6053      	str	r3, [r2, #4]
10010e3e:	440c      	add	r4, r1
10010e40:	6014      	str	r4, [r2, #0]
10010e42:	e7da      	b.n	10010dfa <_free_r+0x26>
10010e44:	d902      	bls.n	10010e4c <_free_r+0x78>
10010e46:	230c      	movs	r3, #12
10010e48:	6003      	str	r3, [r0, #0]
10010e4a:	e7d6      	b.n	10010dfa <_free_r+0x26>
10010e4c:	6825      	ldr	r5, [r4, #0]
10010e4e:	1961      	adds	r1, r4, r5
10010e50:	428b      	cmp	r3, r1
10010e52:	bf04      	itt	eq
10010e54:	6819      	ldreq	r1, [r3, #0]
10010e56:	685b      	ldreq	r3, [r3, #4]
10010e58:	6063      	str	r3, [r4, #4]
10010e5a:	bf04      	itt	eq
10010e5c:	1949      	addeq	r1, r1, r5
10010e5e:	6021      	streq	r1, [r4, #0]
10010e60:	6054      	str	r4, [r2, #4]
10010e62:	e7ca      	b.n	10010dfa <_free_r+0x26>
10010e64:	b003      	add	sp, #12
10010e66:	bd30      	pop	{r4, r5, pc}
10010e68:	10029c94 	.word	0x10029c94

10010e6c <_Balloc>:
10010e6c:	b570      	push	{r4, r5, r6, lr}
10010e6e:	69c6      	ldr	r6, [r0, #28]
10010e70:	4604      	mov	r4, r0
10010e72:	460d      	mov	r5, r1
10010e74:	b976      	cbnz	r6, 10010e94 <_Balloc+0x28>
10010e76:	2010      	movs	r0, #16
10010e78:	f7fe f9de 	bl	1000f238 <malloc>
10010e7c:	4602      	mov	r2, r0
10010e7e:	61e0      	str	r0, [r4, #28]
10010e80:	b920      	cbnz	r0, 10010e8c <_Balloc+0x20>
10010e82:	4b18      	ldr	r3, [pc, #96]	; (10010ee4 <_Balloc+0x78>)
10010e84:	4818      	ldr	r0, [pc, #96]	; (10010ee8 <_Balloc+0x7c>)
10010e86:	216b      	movs	r1, #107	; 0x6b
10010e88:	f7fe f9b8 	bl	1000f1fc <__assert_func>
10010e8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
10010e90:	6006      	str	r6, [r0, #0]
10010e92:	60c6      	str	r6, [r0, #12]
10010e94:	69e6      	ldr	r6, [r4, #28]
10010e96:	68f3      	ldr	r3, [r6, #12]
10010e98:	b183      	cbz	r3, 10010ebc <_Balloc+0x50>
10010e9a:	69e3      	ldr	r3, [r4, #28]
10010e9c:	68db      	ldr	r3, [r3, #12]
10010e9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
10010ea2:	b9b8      	cbnz	r0, 10010ed4 <_Balloc+0x68>
10010ea4:	2101      	movs	r1, #1
10010ea6:	fa01 f605 	lsl.w	r6, r1, r5
10010eaa:	1d72      	adds	r2, r6, #5
10010eac:	0092      	lsls	r2, r2, #2
10010eae:	4620      	mov	r0, r4
10010eb0:	f000 ff9e 	bl	10011df0 <_calloc_r>
10010eb4:	b160      	cbz	r0, 10010ed0 <_Balloc+0x64>
10010eb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
10010eba:	e00e      	b.n	10010eda <_Balloc+0x6e>
10010ebc:	2221      	movs	r2, #33	; 0x21
10010ebe:	2104      	movs	r1, #4
10010ec0:	4620      	mov	r0, r4
10010ec2:	f000 ff95 	bl	10011df0 <_calloc_r>
10010ec6:	69e3      	ldr	r3, [r4, #28]
10010ec8:	60f0      	str	r0, [r6, #12]
10010eca:	68db      	ldr	r3, [r3, #12]
10010ecc:	2b00      	cmp	r3, #0
10010ece:	d1e4      	bne.n	10010e9a <_Balloc+0x2e>
10010ed0:	2000      	movs	r0, #0
10010ed2:	bd70      	pop	{r4, r5, r6, pc}
10010ed4:	6802      	ldr	r2, [r0, #0]
10010ed6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
10010eda:	2300      	movs	r3, #0
10010edc:	e9c0 3303 	strd	r3, r3, [r0, #12]
10010ee0:	e7f7      	b.n	10010ed2 <_Balloc+0x66>
10010ee2:	bf00      	nop
10010ee4:	100168d5 	.word	0x100168d5
10010ee8:	10016955 	.word	0x10016955

10010eec <_Bfree>:
10010eec:	b570      	push	{r4, r5, r6, lr}
10010eee:	69c6      	ldr	r6, [r0, #28]
10010ef0:	4605      	mov	r5, r0
10010ef2:	460c      	mov	r4, r1
10010ef4:	b976      	cbnz	r6, 10010f14 <_Bfree+0x28>
10010ef6:	2010      	movs	r0, #16
10010ef8:	f7fe f99e 	bl	1000f238 <malloc>
10010efc:	4602      	mov	r2, r0
10010efe:	61e8      	str	r0, [r5, #28]
10010f00:	b920      	cbnz	r0, 10010f0c <_Bfree+0x20>
10010f02:	4b09      	ldr	r3, [pc, #36]	; (10010f28 <_Bfree+0x3c>)
10010f04:	4809      	ldr	r0, [pc, #36]	; (10010f2c <_Bfree+0x40>)
10010f06:	218f      	movs	r1, #143	; 0x8f
10010f08:	f7fe f978 	bl	1000f1fc <__assert_func>
10010f0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
10010f10:	6006      	str	r6, [r0, #0]
10010f12:	60c6      	str	r6, [r0, #12]
10010f14:	b13c      	cbz	r4, 10010f26 <_Bfree+0x3a>
10010f16:	69eb      	ldr	r3, [r5, #28]
10010f18:	6862      	ldr	r2, [r4, #4]
10010f1a:	68db      	ldr	r3, [r3, #12]
10010f1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
10010f20:	6021      	str	r1, [r4, #0]
10010f22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
10010f26:	bd70      	pop	{r4, r5, r6, pc}
10010f28:	100168d5 	.word	0x100168d5
10010f2c:	10016955 	.word	0x10016955

10010f30 <__multadd>:
10010f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10010f34:	690d      	ldr	r5, [r1, #16]
10010f36:	4607      	mov	r7, r0
10010f38:	460c      	mov	r4, r1
10010f3a:	461e      	mov	r6, r3
10010f3c:	f101 0c14 	add.w	ip, r1, #20
10010f40:	2000      	movs	r0, #0
10010f42:	f8dc 3000 	ldr.w	r3, [ip]
10010f46:	b299      	uxth	r1, r3
10010f48:	fb02 6101 	mla	r1, r2, r1, r6
10010f4c:	0c1e      	lsrs	r6, r3, #16
10010f4e:	0c0b      	lsrs	r3, r1, #16
10010f50:	fb02 3306 	mla	r3, r2, r6, r3
10010f54:	b289      	uxth	r1, r1
10010f56:	3001      	adds	r0, #1
10010f58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
10010f5c:	4285      	cmp	r5, r0
10010f5e:	f84c 1b04 	str.w	r1, [ip], #4
10010f62:	ea4f 4613 	mov.w	r6, r3, lsr #16
10010f66:	dcec      	bgt.n	10010f42 <__multadd+0x12>
10010f68:	b30e      	cbz	r6, 10010fae <__multadd+0x7e>
10010f6a:	68a3      	ldr	r3, [r4, #8]
10010f6c:	42ab      	cmp	r3, r5
10010f6e:	dc19      	bgt.n	10010fa4 <__multadd+0x74>
10010f70:	6861      	ldr	r1, [r4, #4]
10010f72:	4638      	mov	r0, r7
10010f74:	3101      	adds	r1, #1
10010f76:	f7ff ff79 	bl	10010e6c <_Balloc>
10010f7a:	4680      	mov	r8, r0
10010f7c:	b928      	cbnz	r0, 10010f8a <__multadd+0x5a>
10010f7e:	4602      	mov	r2, r0
10010f80:	4b0c      	ldr	r3, [pc, #48]	; (10010fb4 <__multadd+0x84>)
10010f82:	480d      	ldr	r0, [pc, #52]	; (10010fb8 <__multadd+0x88>)
10010f84:	21ba      	movs	r1, #186	; 0xba
10010f86:	f7fe f939 	bl	1000f1fc <__assert_func>
10010f8a:	6922      	ldr	r2, [r4, #16]
10010f8c:	3202      	adds	r2, #2
10010f8e:	f104 010c 	add.w	r1, r4, #12
10010f92:	0092      	lsls	r2, r2, #2
10010f94:	300c      	adds	r0, #12
10010f96:	f7ff f88c 	bl	100100b2 <memcpy>
10010f9a:	4621      	mov	r1, r4
10010f9c:	4638      	mov	r0, r7
10010f9e:	f7ff ffa5 	bl	10010eec <_Bfree>
10010fa2:	4644      	mov	r4, r8
10010fa4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
10010fa8:	3501      	adds	r5, #1
10010faa:	615e      	str	r6, [r3, #20]
10010fac:	6125      	str	r5, [r4, #16]
10010fae:	4620      	mov	r0, r4
10010fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10010fb4:	10016944 	.word	0x10016944
10010fb8:	10016955 	.word	0x10016955

10010fbc <__hi0bits>:
10010fbc:	0c03      	lsrs	r3, r0, #16
10010fbe:	041b      	lsls	r3, r3, #16
10010fc0:	b9d3      	cbnz	r3, 10010ff8 <__hi0bits+0x3c>
10010fc2:	0400      	lsls	r0, r0, #16
10010fc4:	2310      	movs	r3, #16
10010fc6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
10010fca:	bf04      	itt	eq
10010fcc:	0200      	lsleq	r0, r0, #8
10010fce:	3308      	addeq	r3, #8
10010fd0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
10010fd4:	bf04      	itt	eq
10010fd6:	0100      	lsleq	r0, r0, #4
10010fd8:	3304      	addeq	r3, #4
10010fda:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
10010fde:	bf04      	itt	eq
10010fe0:	0080      	lsleq	r0, r0, #2
10010fe2:	3302      	addeq	r3, #2
10010fe4:	2800      	cmp	r0, #0
10010fe6:	db05      	blt.n	10010ff4 <__hi0bits+0x38>
10010fe8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
10010fec:	f103 0301 	add.w	r3, r3, #1
10010ff0:	bf08      	it	eq
10010ff2:	2320      	moveq	r3, #32
10010ff4:	4618      	mov	r0, r3
10010ff6:	4770      	bx	lr
10010ff8:	2300      	movs	r3, #0
10010ffa:	e7e4      	b.n	10010fc6 <__hi0bits+0xa>

10010ffc <__lo0bits>:
10010ffc:	6803      	ldr	r3, [r0, #0]
10010ffe:	f013 0207 	ands.w	r2, r3, #7
10011002:	d00c      	beq.n	1001101e <__lo0bits+0x22>
10011004:	07d9      	lsls	r1, r3, #31
10011006:	d422      	bmi.n	1001104e <__lo0bits+0x52>
10011008:	079a      	lsls	r2, r3, #30
1001100a:	bf49      	itett	mi
1001100c:	085b      	lsrmi	r3, r3, #1
1001100e:	089b      	lsrpl	r3, r3, #2
10011010:	6003      	strmi	r3, [r0, #0]
10011012:	2201      	movmi	r2, #1
10011014:	bf5c      	itt	pl
10011016:	6003      	strpl	r3, [r0, #0]
10011018:	2202      	movpl	r2, #2
1001101a:	4610      	mov	r0, r2
1001101c:	4770      	bx	lr
1001101e:	b299      	uxth	r1, r3
10011020:	b909      	cbnz	r1, 10011026 <__lo0bits+0x2a>
10011022:	0c1b      	lsrs	r3, r3, #16
10011024:	2210      	movs	r2, #16
10011026:	b2d9      	uxtb	r1, r3
10011028:	b909      	cbnz	r1, 1001102e <__lo0bits+0x32>
1001102a:	3208      	adds	r2, #8
1001102c:	0a1b      	lsrs	r3, r3, #8
1001102e:	0719      	lsls	r1, r3, #28
10011030:	bf04      	itt	eq
10011032:	091b      	lsreq	r3, r3, #4
10011034:	3204      	addeq	r2, #4
10011036:	0799      	lsls	r1, r3, #30
10011038:	bf04      	itt	eq
1001103a:	089b      	lsreq	r3, r3, #2
1001103c:	3202      	addeq	r2, #2
1001103e:	07d9      	lsls	r1, r3, #31
10011040:	d403      	bmi.n	1001104a <__lo0bits+0x4e>
10011042:	085b      	lsrs	r3, r3, #1
10011044:	f102 0201 	add.w	r2, r2, #1
10011048:	d003      	beq.n	10011052 <__lo0bits+0x56>
1001104a:	6003      	str	r3, [r0, #0]
1001104c:	e7e5      	b.n	1001101a <__lo0bits+0x1e>
1001104e:	2200      	movs	r2, #0
10011050:	e7e3      	b.n	1001101a <__lo0bits+0x1e>
10011052:	2220      	movs	r2, #32
10011054:	e7e1      	b.n	1001101a <__lo0bits+0x1e>
	...

10011058 <__i2b>:
10011058:	b510      	push	{r4, lr}
1001105a:	460c      	mov	r4, r1
1001105c:	2101      	movs	r1, #1
1001105e:	f7ff ff05 	bl	10010e6c <_Balloc>
10011062:	4602      	mov	r2, r0
10011064:	b928      	cbnz	r0, 10011072 <__i2b+0x1a>
10011066:	4b05      	ldr	r3, [pc, #20]	; (1001107c <__i2b+0x24>)
10011068:	4805      	ldr	r0, [pc, #20]	; (10011080 <__i2b+0x28>)
1001106a:	f240 1145 	movw	r1, #325	; 0x145
1001106e:	f7fe f8c5 	bl	1000f1fc <__assert_func>
10011072:	2301      	movs	r3, #1
10011074:	6144      	str	r4, [r0, #20]
10011076:	6103      	str	r3, [r0, #16]
10011078:	bd10      	pop	{r4, pc}
1001107a:	bf00      	nop
1001107c:	10016944 	.word	0x10016944
10011080:	10016955 	.word	0x10016955

10011084 <__multiply>:
10011084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10011088:	4691      	mov	r9, r2
1001108a:	690a      	ldr	r2, [r1, #16]
1001108c:	f8d9 3010 	ldr.w	r3, [r9, #16]
10011090:	429a      	cmp	r2, r3
10011092:	bfb8      	it	lt
10011094:	460b      	movlt	r3, r1
10011096:	460c      	mov	r4, r1
10011098:	bfbc      	itt	lt
1001109a:	464c      	movlt	r4, r9
1001109c:	4699      	movlt	r9, r3
1001109e:	6927      	ldr	r7, [r4, #16]
100110a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
100110a4:	68a3      	ldr	r3, [r4, #8]
100110a6:	6861      	ldr	r1, [r4, #4]
100110a8:	eb07 060a 	add.w	r6, r7, sl
100110ac:	42b3      	cmp	r3, r6
100110ae:	b085      	sub	sp, #20
100110b0:	bfb8      	it	lt
100110b2:	3101      	addlt	r1, #1
100110b4:	f7ff feda 	bl	10010e6c <_Balloc>
100110b8:	b930      	cbnz	r0, 100110c8 <__multiply+0x44>
100110ba:	4602      	mov	r2, r0
100110bc:	4b44      	ldr	r3, [pc, #272]	; (100111d0 <__multiply+0x14c>)
100110be:	4845      	ldr	r0, [pc, #276]	; (100111d4 <__multiply+0x150>)
100110c0:	f44f 71b1 	mov.w	r1, #354	; 0x162
100110c4:	f7fe f89a 	bl	1000f1fc <__assert_func>
100110c8:	f100 0514 	add.w	r5, r0, #20
100110cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
100110d0:	462b      	mov	r3, r5
100110d2:	2200      	movs	r2, #0
100110d4:	4543      	cmp	r3, r8
100110d6:	d321      	bcc.n	1001111c <__multiply+0x98>
100110d8:	f104 0314 	add.w	r3, r4, #20
100110dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
100110e0:	f109 0314 	add.w	r3, r9, #20
100110e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
100110e8:	9202      	str	r2, [sp, #8]
100110ea:	1b3a      	subs	r2, r7, r4
100110ec:	3a15      	subs	r2, #21
100110ee:	f022 0203 	bic.w	r2, r2, #3
100110f2:	3204      	adds	r2, #4
100110f4:	f104 0115 	add.w	r1, r4, #21
100110f8:	428f      	cmp	r7, r1
100110fa:	bf38      	it	cc
100110fc:	2204      	movcc	r2, #4
100110fe:	9201      	str	r2, [sp, #4]
10011100:	9a02      	ldr	r2, [sp, #8]
10011102:	9303      	str	r3, [sp, #12]
10011104:	429a      	cmp	r2, r3
10011106:	d80c      	bhi.n	10011122 <__multiply+0x9e>
10011108:	2e00      	cmp	r6, #0
1001110a:	dd03      	ble.n	10011114 <__multiply+0x90>
1001110c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
10011110:	2b00      	cmp	r3, #0
10011112:	d05b      	beq.n	100111cc <__multiply+0x148>
10011114:	6106      	str	r6, [r0, #16]
10011116:	b005      	add	sp, #20
10011118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001111c:	f843 2b04 	str.w	r2, [r3], #4
10011120:	e7d8      	b.n	100110d4 <__multiply+0x50>
10011122:	f8b3 a000 	ldrh.w	sl, [r3]
10011126:	f1ba 0f00 	cmp.w	sl, #0
1001112a:	d024      	beq.n	10011176 <__multiply+0xf2>
1001112c:	f104 0e14 	add.w	lr, r4, #20
10011130:	46a9      	mov	r9, r5
10011132:	f04f 0c00 	mov.w	ip, #0
10011136:	f85e 2b04 	ldr.w	r2, [lr], #4
1001113a:	f8d9 1000 	ldr.w	r1, [r9]
1001113e:	fa1f fb82 	uxth.w	fp, r2
10011142:	b289      	uxth	r1, r1
10011144:	fb0a 110b 	mla	r1, sl, fp, r1
10011148:	ea4f 4b12 	mov.w	fp, r2, lsr #16
1001114c:	f8d9 2000 	ldr.w	r2, [r9]
10011150:	4461      	add	r1, ip
10011152:	ea4f 4c12 	mov.w	ip, r2, lsr #16
10011156:	fb0a c20b 	mla	r2, sl, fp, ip
1001115a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
1001115e:	b289      	uxth	r1, r1
10011160:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
10011164:	4577      	cmp	r7, lr
10011166:	f849 1b04 	str.w	r1, [r9], #4
1001116a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
1001116e:	d8e2      	bhi.n	10011136 <__multiply+0xb2>
10011170:	9a01      	ldr	r2, [sp, #4]
10011172:	f845 c002 	str.w	ip, [r5, r2]
10011176:	9a03      	ldr	r2, [sp, #12]
10011178:	f8b2 9002 	ldrh.w	r9, [r2, #2]
1001117c:	3304      	adds	r3, #4
1001117e:	f1b9 0f00 	cmp.w	r9, #0
10011182:	d021      	beq.n	100111c8 <__multiply+0x144>
10011184:	6829      	ldr	r1, [r5, #0]
10011186:	f104 0c14 	add.w	ip, r4, #20
1001118a:	46ae      	mov	lr, r5
1001118c:	f04f 0a00 	mov.w	sl, #0
10011190:	f8bc b000 	ldrh.w	fp, [ip]
10011194:	f8be 2002 	ldrh.w	r2, [lr, #2]
10011198:	fb09 220b 	mla	r2, r9, fp, r2
1001119c:	4452      	add	r2, sl
1001119e:	b289      	uxth	r1, r1
100111a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
100111a4:	f84e 1b04 	str.w	r1, [lr], #4
100111a8:	f85c 1b04 	ldr.w	r1, [ip], #4
100111ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
100111b0:	f8be 1000 	ldrh.w	r1, [lr]
100111b4:	fb09 110a 	mla	r1, r9, sl, r1
100111b8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
100111bc:	4567      	cmp	r7, ip
100111be:	ea4f 4a11 	mov.w	sl, r1, lsr #16
100111c2:	d8e5      	bhi.n	10011190 <__multiply+0x10c>
100111c4:	9a01      	ldr	r2, [sp, #4]
100111c6:	50a9      	str	r1, [r5, r2]
100111c8:	3504      	adds	r5, #4
100111ca:	e799      	b.n	10011100 <__multiply+0x7c>
100111cc:	3e01      	subs	r6, #1
100111ce:	e79b      	b.n	10011108 <__multiply+0x84>
100111d0:	10016944 	.word	0x10016944
100111d4:	10016955 	.word	0x10016955

100111d8 <__pow5mult>:
100111d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
100111dc:	4615      	mov	r5, r2
100111de:	f012 0203 	ands.w	r2, r2, #3
100111e2:	4606      	mov	r6, r0
100111e4:	460f      	mov	r7, r1
100111e6:	d007      	beq.n	100111f8 <__pow5mult+0x20>
100111e8:	4c25      	ldr	r4, [pc, #148]	; (10011280 <__pow5mult+0xa8>)
100111ea:	3a01      	subs	r2, #1
100111ec:	2300      	movs	r3, #0
100111ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
100111f2:	f7ff fe9d 	bl	10010f30 <__multadd>
100111f6:	4607      	mov	r7, r0
100111f8:	10ad      	asrs	r5, r5, #2
100111fa:	d03d      	beq.n	10011278 <__pow5mult+0xa0>
100111fc:	69f4      	ldr	r4, [r6, #28]
100111fe:	b97c      	cbnz	r4, 10011220 <__pow5mult+0x48>
10011200:	2010      	movs	r0, #16
10011202:	f7fe f819 	bl	1000f238 <malloc>
10011206:	4602      	mov	r2, r0
10011208:	61f0      	str	r0, [r6, #28]
1001120a:	b928      	cbnz	r0, 10011218 <__pow5mult+0x40>
1001120c:	4b1d      	ldr	r3, [pc, #116]	; (10011284 <__pow5mult+0xac>)
1001120e:	481e      	ldr	r0, [pc, #120]	; (10011288 <__pow5mult+0xb0>)
10011210:	f240 11b3 	movw	r1, #435	; 0x1b3
10011214:	f7fd fff2 	bl	1000f1fc <__assert_func>
10011218:	e9c0 4401 	strd	r4, r4, [r0, #4]
1001121c:	6004      	str	r4, [r0, #0]
1001121e:	60c4      	str	r4, [r0, #12]
10011220:	f8d6 801c 	ldr.w	r8, [r6, #28]
10011224:	f8d8 4008 	ldr.w	r4, [r8, #8]
10011228:	b94c      	cbnz	r4, 1001123e <__pow5mult+0x66>
1001122a:	f240 2171 	movw	r1, #625	; 0x271
1001122e:	4630      	mov	r0, r6
10011230:	f7ff ff12 	bl	10011058 <__i2b>
10011234:	2300      	movs	r3, #0
10011236:	f8c8 0008 	str.w	r0, [r8, #8]
1001123a:	4604      	mov	r4, r0
1001123c:	6003      	str	r3, [r0, #0]
1001123e:	f04f 0900 	mov.w	r9, #0
10011242:	07eb      	lsls	r3, r5, #31
10011244:	d50a      	bpl.n	1001125c <__pow5mult+0x84>
10011246:	4639      	mov	r1, r7
10011248:	4622      	mov	r2, r4
1001124a:	4630      	mov	r0, r6
1001124c:	f7ff ff1a 	bl	10011084 <__multiply>
10011250:	4639      	mov	r1, r7
10011252:	4680      	mov	r8, r0
10011254:	4630      	mov	r0, r6
10011256:	f7ff fe49 	bl	10010eec <_Bfree>
1001125a:	4647      	mov	r7, r8
1001125c:	106d      	asrs	r5, r5, #1
1001125e:	d00b      	beq.n	10011278 <__pow5mult+0xa0>
10011260:	6820      	ldr	r0, [r4, #0]
10011262:	b938      	cbnz	r0, 10011274 <__pow5mult+0x9c>
10011264:	4622      	mov	r2, r4
10011266:	4621      	mov	r1, r4
10011268:	4630      	mov	r0, r6
1001126a:	f7ff ff0b 	bl	10011084 <__multiply>
1001126e:	6020      	str	r0, [r4, #0]
10011270:	f8c0 9000 	str.w	r9, [r0]
10011274:	4604      	mov	r4, r0
10011276:	e7e4      	b.n	10011242 <__pow5mult+0x6a>
10011278:	4638      	mov	r0, r7
1001127a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1001127e:	bf00      	nop
10011280:	10016aa0 	.word	0x10016aa0
10011284:	100168d5 	.word	0x100168d5
10011288:	10016955 	.word	0x10016955

1001128c <__lshift>:
1001128c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10011290:	460c      	mov	r4, r1
10011292:	6849      	ldr	r1, [r1, #4]
10011294:	6923      	ldr	r3, [r4, #16]
10011296:	eb03 1862 	add.w	r8, r3, r2, asr #5
1001129a:	68a3      	ldr	r3, [r4, #8]
1001129c:	4607      	mov	r7, r0
1001129e:	4691      	mov	r9, r2
100112a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
100112a4:	f108 0601 	add.w	r6, r8, #1
100112a8:	42b3      	cmp	r3, r6
100112aa:	db0b      	blt.n	100112c4 <__lshift+0x38>
100112ac:	4638      	mov	r0, r7
100112ae:	f7ff fddd 	bl	10010e6c <_Balloc>
100112b2:	4605      	mov	r5, r0
100112b4:	b948      	cbnz	r0, 100112ca <__lshift+0x3e>
100112b6:	4602      	mov	r2, r0
100112b8:	4b28      	ldr	r3, [pc, #160]	; (1001135c <__lshift+0xd0>)
100112ba:	4829      	ldr	r0, [pc, #164]	; (10011360 <__lshift+0xd4>)
100112bc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
100112c0:	f7fd ff9c 	bl	1000f1fc <__assert_func>
100112c4:	3101      	adds	r1, #1
100112c6:	005b      	lsls	r3, r3, #1
100112c8:	e7ee      	b.n	100112a8 <__lshift+0x1c>
100112ca:	2300      	movs	r3, #0
100112cc:	f100 0114 	add.w	r1, r0, #20
100112d0:	f100 0210 	add.w	r2, r0, #16
100112d4:	4618      	mov	r0, r3
100112d6:	4553      	cmp	r3, sl
100112d8:	db33      	blt.n	10011342 <__lshift+0xb6>
100112da:	6920      	ldr	r0, [r4, #16]
100112dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
100112e0:	f104 0314 	add.w	r3, r4, #20
100112e4:	f019 091f 	ands.w	r9, r9, #31
100112e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
100112ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
100112f0:	d02b      	beq.n	1001134a <__lshift+0xbe>
100112f2:	f1c9 0e20 	rsb	lr, r9, #32
100112f6:	468a      	mov	sl, r1
100112f8:	2200      	movs	r2, #0
100112fa:	6818      	ldr	r0, [r3, #0]
100112fc:	fa00 f009 	lsl.w	r0, r0, r9
10011300:	4310      	orrs	r0, r2
10011302:	f84a 0b04 	str.w	r0, [sl], #4
10011306:	f853 2b04 	ldr.w	r2, [r3], #4
1001130a:	459c      	cmp	ip, r3
1001130c:	fa22 f20e 	lsr.w	r2, r2, lr
10011310:	d8f3      	bhi.n	100112fa <__lshift+0x6e>
10011312:	ebac 0304 	sub.w	r3, ip, r4
10011316:	3b15      	subs	r3, #21
10011318:	f023 0303 	bic.w	r3, r3, #3
1001131c:	3304      	adds	r3, #4
1001131e:	f104 0015 	add.w	r0, r4, #21
10011322:	4584      	cmp	ip, r0
10011324:	bf38      	it	cc
10011326:	2304      	movcc	r3, #4
10011328:	50ca      	str	r2, [r1, r3]
1001132a:	b10a      	cbz	r2, 10011330 <__lshift+0xa4>
1001132c:	f108 0602 	add.w	r6, r8, #2
10011330:	3e01      	subs	r6, #1
10011332:	4638      	mov	r0, r7
10011334:	612e      	str	r6, [r5, #16]
10011336:	4621      	mov	r1, r4
10011338:	f7ff fdd8 	bl	10010eec <_Bfree>
1001133c:	4628      	mov	r0, r5
1001133e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10011342:	f842 0f04 	str.w	r0, [r2, #4]!
10011346:	3301      	adds	r3, #1
10011348:	e7c5      	b.n	100112d6 <__lshift+0x4a>
1001134a:	3904      	subs	r1, #4
1001134c:	f853 2b04 	ldr.w	r2, [r3], #4
10011350:	f841 2f04 	str.w	r2, [r1, #4]!
10011354:	459c      	cmp	ip, r3
10011356:	d8f9      	bhi.n	1001134c <__lshift+0xc0>
10011358:	e7ea      	b.n	10011330 <__lshift+0xa4>
1001135a:	bf00      	nop
1001135c:	10016944 	.word	0x10016944
10011360:	10016955 	.word	0x10016955

10011364 <__mcmp>:
10011364:	b530      	push	{r4, r5, lr}
10011366:	6902      	ldr	r2, [r0, #16]
10011368:	690c      	ldr	r4, [r1, #16]
1001136a:	1b12      	subs	r2, r2, r4
1001136c:	d10e      	bne.n	1001138c <__mcmp+0x28>
1001136e:	f100 0314 	add.w	r3, r0, #20
10011372:	3114      	adds	r1, #20
10011374:	eb03 0084 	add.w	r0, r3, r4, lsl #2
10011378:	eb01 0184 	add.w	r1, r1, r4, lsl #2
1001137c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
10011380:	f851 4d04 	ldr.w	r4, [r1, #-4]!
10011384:	42a5      	cmp	r5, r4
10011386:	d003      	beq.n	10011390 <__mcmp+0x2c>
10011388:	d305      	bcc.n	10011396 <__mcmp+0x32>
1001138a:	2201      	movs	r2, #1
1001138c:	4610      	mov	r0, r2
1001138e:	bd30      	pop	{r4, r5, pc}
10011390:	4283      	cmp	r3, r0
10011392:	d3f3      	bcc.n	1001137c <__mcmp+0x18>
10011394:	e7fa      	b.n	1001138c <__mcmp+0x28>
10011396:	f04f 32ff 	mov.w	r2, #4294967295
1001139a:	e7f7      	b.n	1001138c <__mcmp+0x28>

1001139c <__mdiff>:
1001139c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
100113a0:	460c      	mov	r4, r1
100113a2:	4606      	mov	r6, r0
100113a4:	4611      	mov	r1, r2
100113a6:	4620      	mov	r0, r4
100113a8:	4690      	mov	r8, r2
100113aa:	f7ff ffdb 	bl	10011364 <__mcmp>
100113ae:	1e05      	subs	r5, r0, #0
100113b0:	d110      	bne.n	100113d4 <__mdiff+0x38>
100113b2:	4629      	mov	r1, r5
100113b4:	4630      	mov	r0, r6
100113b6:	f7ff fd59 	bl	10010e6c <_Balloc>
100113ba:	b930      	cbnz	r0, 100113ca <__mdiff+0x2e>
100113bc:	4b3a      	ldr	r3, [pc, #232]	; (100114a8 <__mdiff+0x10c>)
100113be:	4602      	mov	r2, r0
100113c0:	f240 2137 	movw	r1, #567	; 0x237
100113c4:	4839      	ldr	r0, [pc, #228]	; (100114ac <__mdiff+0x110>)
100113c6:	f7fd ff19 	bl	1000f1fc <__assert_func>
100113ca:	2301      	movs	r3, #1
100113cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
100113d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
100113d4:	bfa4      	itt	ge
100113d6:	4643      	movge	r3, r8
100113d8:	46a0      	movge	r8, r4
100113da:	4630      	mov	r0, r6
100113dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
100113e0:	bfa6      	itte	ge
100113e2:	461c      	movge	r4, r3
100113e4:	2500      	movge	r5, #0
100113e6:	2501      	movlt	r5, #1
100113e8:	f7ff fd40 	bl	10010e6c <_Balloc>
100113ec:	b920      	cbnz	r0, 100113f8 <__mdiff+0x5c>
100113ee:	4b2e      	ldr	r3, [pc, #184]	; (100114a8 <__mdiff+0x10c>)
100113f0:	4602      	mov	r2, r0
100113f2:	f240 2145 	movw	r1, #581	; 0x245
100113f6:	e7e5      	b.n	100113c4 <__mdiff+0x28>
100113f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
100113fc:	6926      	ldr	r6, [r4, #16]
100113fe:	60c5      	str	r5, [r0, #12]
10011400:	f104 0914 	add.w	r9, r4, #20
10011404:	f108 0514 	add.w	r5, r8, #20
10011408:	f100 0e14 	add.w	lr, r0, #20
1001140c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
10011410:	eb09 0686 	add.w	r6, r9, r6, lsl #2
10011414:	f108 0210 	add.w	r2, r8, #16
10011418:	46f2      	mov	sl, lr
1001141a:	2100      	movs	r1, #0
1001141c:	f859 3b04 	ldr.w	r3, [r9], #4
10011420:	f852 bf04 	ldr.w	fp, [r2, #4]!
10011424:	fa11 f88b 	uxtah	r8, r1, fp
10011428:	b299      	uxth	r1, r3
1001142a:	0c1b      	lsrs	r3, r3, #16
1001142c:	eba8 0801 	sub.w	r8, r8, r1
10011430:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
10011434:	eb03 4328 	add.w	r3, r3, r8, asr #16
10011438:	fa1f f888 	uxth.w	r8, r8
1001143c:	1419      	asrs	r1, r3, #16
1001143e:	454e      	cmp	r6, r9
10011440:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
10011444:	f84a 3b04 	str.w	r3, [sl], #4
10011448:	d8e8      	bhi.n	1001141c <__mdiff+0x80>
1001144a:	1b33      	subs	r3, r6, r4
1001144c:	3b15      	subs	r3, #21
1001144e:	f023 0303 	bic.w	r3, r3, #3
10011452:	3304      	adds	r3, #4
10011454:	3415      	adds	r4, #21
10011456:	42a6      	cmp	r6, r4
10011458:	bf38      	it	cc
1001145a:	2304      	movcc	r3, #4
1001145c:	441d      	add	r5, r3
1001145e:	4473      	add	r3, lr
10011460:	469e      	mov	lr, r3
10011462:	462e      	mov	r6, r5
10011464:	4566      	cmp	r6, ip
10011466:	d30e      	bcc.n	10011486 <__mdiff+0xea>
10011468:	f10c 0203 	add.w	r2, ip, #3
1001146c:	1b52      	subs	r2, r2, r5
1001146e:	f022 0203 	bic.w	r2, r2, #3
10011472:	3d03      	subs	r5, #3
10011474:	45ac      	cmp	ip, r5
10011476:	bf38      	it	cc
10011478:	2200      	movcc	r2, #0
1001147a:	4413      	add	r3, r2
1001147c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
10011480:	b17a      	cbz	r2, 100114a2 <__mdiff+0x106>
10011482:	6107      	str	r7, [r0, #16]
10011484:	e7a4      	b.n	100113d0 <__mdiff+0x34>
10011486:	f856 8b04 	ldr.w	r8, [r6], #4
1001148a:	fa11 f288 	uxtah	r2, r1, r8
1001148e:	1414      	asrs	r4, r2, #16
10011490:	eb04 4418 	add.w	r4, r4, r8, lsr #16
10011494:	b292      	uxth	r2, r2
10011496:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
1001149a:	f84e 2b04 	str.w	r2, [lr], #4
1001149e:	1421      	asrs	r1, r4, #16
100114a0:	e7e0      	b.n	10011464 <__mdiff+0xc8>
100114a2:	3f01      	subs	r7, #1
100114a4:	e7ea      	b.n	1001147c <__mdiff+0xe0>
100114a6:	bf00      	nop
100114a8:	10016944 	.word	0x10016944
100114ac:	10016955 	.word	0x10016955

100114b0 <__d2b>:
100114b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
100114b4:	460f      	mov	r7, r1
100114b6:	2101      	movs	r1, #1
100114b8:	ec59 8b10 	vmov	r8, r9, d0
100114bc:	4616      	mov	r6, r2
100114be:	f7ff fcd5 	bl	10010e6c <_Balloc>
100114c2:	4604      	mov	r4, r0
100114c4:	b930      	cbnz	r0, 100114d4 <__d2b+0x24>
100114c6:	4602      	mov	r2, r0
100114c8:	4b24      	ldr	r3, [pc, #144]	; (1001155c <__d2b+0xac>)
100114ca:	4825      	ldr	r0, [pc, #148]	; (10011560 <__d2b+0xb0>)
100114cc:	f240 310f 	movw	r1, #783	; 0x30f
100114d0:	f7fd fe94 	bl	1000f1fc <__assert_func>
100114d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
100114d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
100114dc:	bb2d      	cbnz	r5, 1001152a <__d2b+0x7a>
100114de:	9301      	str	r3, [sp, #4]
100114e0:	f1b8 0300 	subs.w	r3, r8, #0
100114e4:	d026      	beq.n	10011534 <__d2b+0x84>
100114e6:	4668      	mov	r0, sp
100114e8:	9300      	str	r3, [sp, #0]
100114ea:	f7ff fd87 	bl	10010ffc <__lo0bits>
100114ee:	e9dd 1200 	ldrd	r1, r2, [sp]
100114f2:	b1e8      	cbz	r0, 10011530 <__d2b+0x80>
100114f4:	f1c0 0320 	rsb	r3, r0, #32
100114f8:	fa02 f303 	lsl.w	r3, r2, r3
100114fc:	430b      	orrs	r3, r1
100114fe:	40c2      	lsrs	r2, r0
10011500:	6163      	str	r3, [r4, #20]
10011502:	9201      	str	r2, [sp, #4]
10011504:	9b01      	ldr	r3, [sp, #4]
10011506:	61a3      	str	r3, [r4, #24]
10011508:	2b00      	cmp	r3, #0
1001150a:	bf14      	ite	ne
1001150c:	2202      	movne	r2, #2
1001150e:	2201      	moveq	r2, #1
10011510:	6122      	str	r2, [r4, #16]
10011512:	b1bd      	cbz	r5, 10011544 <__d2b+0x94>
10011514:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
10011518:	4405      	add	r5, r0
1001151a:	603d      	str	r5, [r7, #0]
1001151c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
10011520:	6030      	str	r0, [r6, #0]
10011522:	4620      	mov	r0, r4
10011524:	b003      	add	sp, #12
10011526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1001152a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1001152e:	e7d6      	b.n	100114de <__d2b+0x2e>
10011530:	6161      	str	r1, [r4, #20]
10011532:	e7e7      	b.n	10011504 <__d2b+0x54>
10011534:	a801      	add	r0, sp, #4
10011536:	f7ff fd61 	bl	10010ffc <__lo0bits>
1001153a:	9b01      	ldr	r3, [sp, #4]
1001153c:	6163      	str	r3, [r4, #20]
1001153e:	3020      	adds	r0, #32
10011540:	2201      	movs	r2, #1
10011542:	e7e5      	b.n	10011510 <__d2b+0x60>
10011544:	eb04 0382 	add.w	r3, r4, r2, lsl #2
10011548:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
1001154c:	6038      	str	r0, [r7, #0]
1001154e:	6918      	ldr	r0, [r3, #16]
10011550:	f7ff fd34 	bl	10010fbc <__hi0bits>
10011554:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
10011558:	e7e2      	b.n	10011520 <__d2b+0x70>
1001155a:	bf00      	nop
1001155c:	10016944 	.word	0x10016944
10011560:	10016955 	.word	0x10016955

10011564 <_malloc_usable_size_r>:
10011564:	f851 3c04 	ldr.w	r3, [r1, #-4]
10011568:	1f18      	subs	r0, r3, #4
1001156a:	2b00      	cmp	r3, #0
1001156c:	bfbc      	itt	lt
1001156e:	580b      	ldrlt	r3, [r1, r0]
10011570:	18c0      	addlt	r0, r0, r3
10011572:	4770      	bx	lr

10011574 <__ssputs_r>:
10011574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10011578:	688e      	ldr	r6, [r1, #8]
1001157a:	461f      	mov	r7, r3
1001157c:	42be      	cmp	r6, r7
1001157e:	680b      	ldr	r3, [r1, #0]
10011580:	4682      	mov	sl, r0
10011582:	460c      	mov	r4, r1
10011584:	4690      	mov	r8, r2
10011586:	d82c      	bhi.n	100115e2 <__ssputs_r+0x6e>
10011588:	898a      	ldrh	r2, [r1, #12]
1001158a:	f412 6f90 	tst.w	r2, #1152	; 0x480
1001158e:	d026      	beq.n	100115de <__ssputs_r+0x6a>
10011590:	6965      	ldr	r5, [r4, #20]
10011592:	6909      	ldr	r1, [r1, #16]
10011594:	eb05 0545 	add.w	r5, r5, r5, lsl #1
10011598:	eba3 0901 	sub.w	r9, r3, r1
1001159c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
100115a0:	1c7b      	adds	r3, r7, #1
100115a2:	444b      	add	r3, r9
100115a4:	106d      	asrs	r5, r5, #1
100115a6:	429d      	cmp	r5, r3
100115a8:	bf38      	it	cc
100115aa:	461d      	movcc	r5, r3
100115ac:	0553      	lsls	r3, r2, #21
100115ae:	d527      	bpl.n	10011600 <__ssputs_r+0x8c>
100115b0:	4629      	mov	r1, r5
100115b2:	f7fd fe71 	bl	1000f298 <_malloc_r>
100115b6:	4606      	mov	r6, r0
100115b8:	b360      	cbz	r0, 10011614 <__ssputs_r+0xa0>
100115ba:	6921      	ldr	r1, [r4, #16]
100115bc:	464a      	mov	r2, r9
100115be:	f7fe fd78 	bl	100100b2 <memcpy>
100115c2:	89a3      	ldrh	r3, [r4, #12]
100115c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
100115c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
100115cc:	81a3      	strh	r3, [r4, #12]
100115ce:	6126      	str	r6, [r4, #16]
100115d0:	6165      	str	r5, [r4, #20]
100115d2:	444e      	add	r6, r9
100115d4:	eba5 0509 	sub.w	r5, r5, r9
100115d8:	6026      	str	r6, [r4, #0]
100115da:	60a5      	str	r5, [r4, #8]
100115dc:	463e      	mov	r6, r7
100115de:	42be      	cmp	r6, r7
100115e0:	d900      	bls.n	100115e4 <__ssputs_r+0x70>
100115e2:	463e      	mov	r6, r7
100115e4:	6820      	ldr	r0, [r4, #0]
100115e6:	4632      	mov	r2, r6
100115e8:	4641      	mov	r1, r8
100115ea:	f000 fba3 	bl	10011d34 <memmove>
100115ee:	68a3      	ldr	r3, [r4, #8]
100115f0:	1b9b      	subs	r3, r3, r6
100115f2:	60a3      	str	r3, [r4, #8]
100115f4:	6823      	ldr	r3, [r4, #0]
100115f6:	4433      	add	r3, r6
100115f8:	6023      	str	r3, [r4, #0]
100115fa:	2000      	movs	r0, #0
100115fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10011600:	462a      	mov	r2, r5
10011602:	f7fd fed5 	bl	1000f3b0 <_realloc_r>
10011606:	4606      	mov	r6, r0
10011608:	2800      	cmp	r0, #0
1001160a:	d1e0      	bne.n	100115ce <__ssputs_r+0x5a>
1001160c:	6921      	ldr	r1, [r4, #16]
1001160e:	4650      	mov	r0, sl
10011610:	f7ff fbe0 	bl	10010dd4 <_free_r>
10011614:	230c      	movs	r3, #12
10011616:	f8ca 3000 	str.w	r3, [sl]
1001161a:	89a3      	ldrh	r3, [r4, #12]
1001161c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10011620:	81a3      	strh	r3, [r4, #12]
10011622:	f04f 30ff 	mov.w	r0, #4294967295
10011626:	e7e9      	b.n	100115fc <__ssputs_r+0x88>

10011628 <_svfiprintf_r>:
10011628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1001162c:	4698      	mov	r8, r3
1001162e:	898b      	ldrh	r3, [r1, #12]
10011630:	061b      	lsls	r3, r3, #24
10011632:	b09d      	sub	sp, #116	; 0x74
10011634:	4607      	mov	r7, r0
10011636:	460d      	mov	r5, r1
10011638:	4614      	mov	r4, r2
1001163a:	d50e      	bpl.n	1001165a <_svfiprintf_r+0x32>
1001163c:	690b      	ldr	r3, [r1, #16]
1001163e:	b963      	cbnz	r3, 1001165a <_svfiprintf_r+0x32>
10011640:	2140      	movs	r1, #64	; 0x40
10011642:	f7fd fe29 	bl	1000f298 <_malloc_r>
10011646:	6028      	str	r0, [r5, #0]
10011648:	6128      	str	r0, [r5, #16]
1001164a:	b920      	cbnz	r0, 10011656 <_svfiprintf_r+0x2e>
1001164c:	230c      	movs	r3, #12
1001164e:	603b      	str	r3, [r7, #0]
10011650:	f04f 30ff 	mov.w	r0, #4294967295
10011654:	e0d0      	b.n	100117f8 <_svfiprintf_r+0x1d0>
10011656:	2340      	movs	r3, #64	; 0x40
10011658:	616b      	str	r3, [r5, #20]
1001165a:	2300      	movs	r3, #0
1001165c:	9309      	str	r3, [sp, #36]	; 0x24
1001165e:	2320      	movs	r3, #32
10011660:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
10011664:	f8cd 800c 	str.w	r8, [sp, #12]
10011668:	2330      	movs	r3, #48	; 0x30
1001166a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 10011810 <_svfiprintf_r+0x1e8>
1001166e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
10011672:	f04f 0901 	mov.w	r9, #1
10011676:	4623      	mov	r3, r4
10011678:	469a      	mov	sl, r3
1001167a:	f813 2b01 	ldrb.w	r2, [r3], #1
1001167e:	b10a      	cbz	r2, 10011684 <_svfiprintf_r+0x5c>
10011680:	2a25      	cmp	r2, #37	; 0x25
10011682:	d1f9      	bne.n	10011678 <_svfiprintf_r+0x50>
10011684:	ebba 0b04 	subs.w	fp, sl, r4
10011688:	d00b      	beq.n	100116a2 <_svfiprintf_r+0x7a>
1001168a:	465b      	mov	r3, fp
1001168c:	4622      	mov	r2, r4
1001168e:	4629      	mov	r1, r5
10011690:	4638      	mov	r0, r7
10011692:	f7ff ff6f 	bl	10011574 <__ssputs_r>
10011696:	3001      	adds	r0, #1
10011698:	f000 80a9 	beq.w	100117ee <_svfiprintf_r+0x1c6>
1001169c:	9a09      	ldr	r2, [sp, #36]	; 0x24
1001169e:	445a      	add	r2, fp
100116a0:	9209      	str	r2, [sp, #36]	; 0x24
100116a2:	f89a 3000 	ldrb.w	r3, [sl]
100116a6:	2b00      	cmp	r3, #0
100116a8:	f000 80a1 	beq.w	100117ee <_svfiprintf_r+0x1c6>
100116ac:	2300      	movs	r3, #0
100116ae:	f04f 32ff 	mov.w	r2, #4294967295
100116b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
100116b6:	f10a 0a01 	add.w	sl, sl, #1
100116ba:	9304      	str	r3, [sp, #16]
100116bc:	9307      	str	r3, [sp, #28]
100116be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
100116c2:	931a      	str	r3, [sp, #104]	; 0x68
100116c4:	4654      	mov	r4, sl
100116c6:	2205      	movs	r2, #5
100116c8:	f814 1b01 	ldrb.w	r1, [r4], #1
100116cc:	4850      	ldr	r0, [pc, #320]	; (10011810 <_svfiprintf_r+0x1e8>)
100116ce:	f7ee fcc7 	bl	10000060 <memchr>
100116d2:	9a04      	ldr	r2, [sp, #16]
100116d4:	b9d8      	cbnz	r0, 1001170e <_svfiprintf_r+0xe6>
100116d6:	06d0      	lsls	r0, r2, #27
100116d8:	bf44      	itt	mi
100116da:	2320      	movmi	r3, #32
100116dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
100116e0:	0711      	lsls	r1, r2, #28
100116e2:	bf44      	itt	mi
100116e4:	232b      	movmi	r3, #43	; 0x2b
100116e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
100116ea:	f89a 3000 	ldrb.w	r3, [sl]
100116ee:	2b2a      	cmp	r3, #42	; 0x2a
100116f0:	d015      	beq.n	1001171e <_svfiprintf_r+0xf6>
100116f2:	9a07      	ldr	r2, [sp, #28]
100116f4:	4654      	mov	r4, sl
100116f6:	2000      	movs	r0, #0
100116f8:	f04f 0c0a 	mov.w	ip, #10
100116fc:	4621      	mov	r1, r4
100116fe:	f811 3b01 	ldrb.w	r3, [r1], #1
10011702:	3b30      	subs	r3, #48	; 0x30
10011704:	2b09      	cmp	r3, #9
10011706:	d94d      	bls.n	100117a4 <_svfiprintf_r+0x17c>
10011708:	b1b0      	cbz	r0, 10011738 <_svfiprintf_r+0x110>
1001170a:	9207      	str	r2, [sp, #28]
1001170c:	e014      	b.n	10011738 <_svfiprintf_r+0x110>
1001170e:	eba0 0308 	sub.w	r3, r0, r8
10011712:	fa09 f303 	lsl.w	r3, r9, r3
10011716:	4313      	orrs	r3, r2
10011718:	9304      	str	r3, [sp, #16]
1001171a:	46a2      	mov	sl, r4
1001171c:	e7d2      	b.n	100116c4 <_svfiprintf_r+0x9c>
1001171e:	9b03      	ldr	r3, [sp, #12]
10011720:	1d19      	adds	r1, r3, #4
10011722:	681b      	ldr	r3, [r3, #0]
10011724:	9103      	str	r1, [sp, #12]
10011726:	2b00      	cmp	r3, #0
10011728:	bfbb      	ittet	lt
1001172a:	425b      	neglt	r3, r3
1001172c:	f042 0202 	orrlt.w	r2, r2, #2
10011730:	9307      	strge	r3, [sp, #28]
10011732:	9307      	strlt	r3, [sp, #28]
10011734:	bfb8      	it	lt
10011736:	9204      	strlt	r2, [sp, #16]
10011738:	7823      	ldrb	r3, [r4, #0]
1001173a:	2b2e      	cmp	r3, #46	; 0x2e
1001173c:	d10c      	bne.n	10011758 <_svfiprintf_r+0x130>
1001173e:	7863      	ldrb	r3, [r4, #1]
10011740:	2b2a      	cmp	r3, #42	; 0x2a
10011742:	d134      	bne.n	100117ae <_svfiprintf_r+0x186>
10011744:	9b03      	ldr	r3, [sp, #12]
10011746:	1d1a      	adds	r2, r3, #4
10011748:	681b      	ldr	r3, [r3, #0]
1001174a:	9203      	str	r2, [sp, #12]
1001174c:	2b00      	cmp	r3, #0
1001174e:	bfb8      	it	lt
10011750:	f04f 33ff 	movlt.w	r3, #4294967295
10011754:	3402      	adds	r4, #2
10011756:	9305      	str	r3, [sp, #20]
10011758:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 10011820 <_svfiprintf_r+0x1f8>
1001175c:	7821      	ldrb	r1, [r4, #0]
1001175e:	2203      	movs	r2, #3
10011760:	4650      	mov	r0, sl
10011762:	f7ee fc7d 	bl	10000060 <memchr>
10011766:	b138      	cbz	r0, 10011778 <_svfiprintf_r+0x150>
10011768:	9b04      	ldr	r3, [sp, #16]
1001176a:	eba0 000a 	sub.w	r0, r0, sl
1001176e:	2240      	movs	r2, #64	; 0x40
10011770:	4082      	lsls	r2, r0
10011772:	4313      	orrs	r3, r2
10011774:	3401      	adds	r4, #1
10011776:	9304      	str	r3, [sp, #16]
10011778:	f814 1b01 	ldrb.w	r1, [r4], #1
1001177c:	4825      	ldr	r0, [pc, #148]	; (10011814 <_svfiprintf_r+0x1ec>)
1001177e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
10011782:	2206      	movs	r2, #6
10011784:	f7ee fc6c 	bl	10000060 <memchr>
10011788:	2800      	cmp	r0, #0
1001178a:	d038      	beq.n	100117fe <_svfiprintf_r+0x1d6>
1001178c:	4b22      	ldr	r3, [pc, #136]	; (10011818 <_svfiprintf_r+0x1f0>)
1001178e:	bb1b      	cbnz	r3, 100117d8 <_svfiprintf_r+0x1b0>
10011790:	9b03      	ldr	r3, [sp, #12]
10011792:	3307      	adds	r3, #7
10011794:	f023 0307 	bic.w	r3, r3, #7
10011798:	3308      	adds	r3, #8
1001179a:	9303      	str	r3, [sp, #12]
1001179c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001179e:	4433      	add	r3, r6
100117a0:	9309      	str	r3, [sp, #36]	; 0x24
100117a2:	e768      	b.n	10011676 <_svfiprintf_r+0x4e>
100117a4:	fb0c 3202 	mla	r2, ip, r2, r3
100117a8:	460c      	mov	r4, r1
100117aa:	2001      	movs	r0, #1
100117ac:	e7a6      	b.n	100116fc <_svfiprintf_r+0xd4>
100117ae:	2300      	movs	r3, #0
100117b0:	3401      	adds	r4, #1
100117b2:	9305      	str	r3, [sp, #20]
100117b4:	4619      	mov	r1, r3
100117b6:	f04f 0c0a 	mov.w	ip, #10
100117ba:	4620      	mov	r0, r4
100117bc:	f810 2b01 	ldrb.w	r2, [r0], #1
100117c0:	3a30      	subs	r2, #48	; 0x30
100117c2:	2a09      	cmp	r2, #9
100117c4:	d903      	bls.n	100117ce <_svfiprintf_r+0x1a6>
100117c6:	2b00      	cmp	r3, #0
100117c8:	d0c6      	beq.n	10011758 <_svfiprintf_r+0x130>
100117ca:	9105      	str	r1, [sp, #20]
100117cc:	e7c4      	b.n	10011758 <_svfiprintf_r+0x130>
100117ce:	fb0c 2101 	mla	r1, ip, r1, r2
100117d2:	4604      	mov	r4, r0
100117d4:	2301      	movs	r3, #1
100117d6:	e7f0      	b.n	100117ba <_svfiprintf_r+0x192>
100117d8:	ab03      	add	r3, sp, #12
100117da:	9300      	str	r3, [sp, #0]
100117dc:	462a      	mov	r2, r5
100117de:	4b0f      	ldr	r3, [pc, #60]	; (1001181c <_svfiprintf_r+0x1f4>)
100117e0:	a904      	add	r1, sp, #16
100117e2:	4638      	mov	r0, r7
100117e4:	f7fd feb4 	bl	1000f550 <_printf_float>
100117e8:	1c42      	adds	r2, r0, #1
100117ea:	4606      	mov	r6, r0
100117ec:	d1d6      	bne.n	1001179c <_svfiprintf_r+0x174>
100117ee:	89ab      	ldrh	r3, [r5, #12]
100117f0:	065b      	lsls	r3, r3, #25
100117f2:	f53f af2d 	bmi.w	10011650 <_svfiprintf_r+0x28>
100117f6:	9809      	ldr	r0, [sp, #36]	; 0x24
100117f8:	b01d      	add	sp, #116	; 0x74
100117fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
100117fe:	ab03      	add	r3, sp, #12
10011800:	9300      	str	r3, [sp, #0]
10011802:	462a      	mov	r2, r5
10011804:	4b05      	ldr	r3, [pc, #20]	; (1001181c <_svfiprintf_r+0x1f4>)
10011806:	a904      	add	r1, sp, #16
10011808:	4638      	mov	r0, r7
1001180a:	f7fe f945 	bl	1000fa98 <_printf_i>
1001180e:	e7eb      	b.n	100117e8 <_svfiprintf_r+0x1c0>
10011810:	10016aac 	.word	0x10016aac
10011814:	10016ab6 	.word	0x10016ab6
10011818:	1000f551 	.word	0x1000f551
1001181c:	10011575 	.word	0x10011575
10011820:	10016ab2 	.word	0x10016ab2

10011824 <__sfputc_r>:
10011824:	6893      	ldr	r3, [r2, #8]
10011826:	3b01      	subs	r3, #1
10011828:	2b00      	cmp	r3, #0
1001182a:	b410      	push	{r4}
1001182c:	6093      	str	r3, [r2, #8]
1001182e:	da08      	bge.n	10011842 <__sfputc_r+0x1e>
10011830:	6994      	ldr	r4, [r2, #24]
10011832:	42a3      	cmp	r3, r4
10011834:	db01      	blt.n	1001183a <__sfputc_r+0x16>
10011836:	290a      	cmp	r1, #10
10011838:	d103      	bne.n	10011842 <__sfputc_r+0x1e>
1001183a:	f85d 4b04 	ldr.w	r4, [sp], #4
1001183e:	f000 b9e3 	b.w	10011c08 <__swbuf_r>
10011842:	6813      	ldr	r3, [r2, #0]
10011844:	1c58      	adds	r0, r3, #1
10011846:	6010      	str	r0, [r2, #0]
10011848:	7019      	strb	r1, [r3, #0]
1001184a:	4608      	mov	r0, r1
1001184c:	f85d 4b04 	ldr.w	r4, [sp], #4
10011850:	4770      	bx	lr

10011852 <__sfputs_r>:
10011852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011854:	4606      	mov	r6, r0
10011856:	460f      	mov	r7, r1
10011858:	4614      	mov	r4, r2
1001185a:	18d5      	adds	r5, r2, r3
1001185c:	42ac      	cmp	r4, r5
1001185e:	d101      	bne.n	10011864 <__sfputs_r+0x12>
10011860:	2000      	movs	r0, #0
10011862:	e007      	b.n	10011874 <__sfputs_r+0x22>
10011864:	f814 1b01 	ldrb.w	r1, [r4], #1
10011868:	463a      	mov	r2, r7
1001186a:	4630      	mov	r0, r6
1001186c:	f7ff ffda 	bl	10011824 <__sfputc_r>
10011870:	1c43      	adds	r3, r0, #1
10011872:	d1f3      	bne.n	1001185c <__sfputs_r+0xa>
10011874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10011878 <_vfiprintf_r>:
10011878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1001187c:	460d      	mov	r5, r1
1001187e:	b09d      	sub	sp, #116	; 0x74
10011880:	4614      	mov	r4, r2
10011882:	4698      	mov	r8, r3
10011884:	4606      	mov	r6, r0
10011886:	b118      	cbz	r0, 10011890 <_vfiprintf_r+0x18>
10011888:	6a03      	ldr	r3, [r0, #32]
1001188a:	b90b      	cbnz	r3, 10011890 <_vfiprintf_r+0x18>
1001188c:	f7fe fab2 	bl	1000fdf4 <__sinit>
10011890:	6e6b      	ldr	r3, [r5, #100]	; 0x64
10011892:	07d9      	lsls	r1, r3, #31
10011894:	d405      	bmi.n	100118a2 <_vfiprintf_r+0x2a>
10011896:	89ab      	ldrh	r3, [r5, #12]
10011898:	059a      	lsls	r2, r3, #22
1001189a:	d402      	bmi.n	100118a2 <_vfiprintf_r+0x2a>
1001189c:	6da8      	ldr	r0, [r5, #88]	; 0x58
1001189e:	f7fe fc06 	bl	100100ae <__retarget_lock_acquire_recursive>
100118a2:	89ab      	ldrh	r3, [r5, #12]
100118a4:	071b      	lsls	r3, r3, #28
100118a6:	d501      	bpl.n	100118ac <_vfiprintf_r+0x34>
100118a8:	692b      	ldr	r3, [r5, #16]
100118aa:	b99b      	cbnz	r3, 100118d4 <_vfiprintf_r+0x5c>
100118ac:	4629      	mov	r1, r5
100118ae:	4630      	mov	r0, r6
100118b0:	f000 f9e8 	bl	10011c84 <__swsetup_r>
100118b4:	b170      	cbz	r0, 100118d4 <_vfiprintf_r+0x5c>
100118b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
100118b8:	07dc      	lsls	r4, r3, #31
100118ba:	d504      	bpl.n	100118c6 <_vfiprintf_r+0x4e>
100118bc:	f04f 30ff 	mov.w	r0, #4294967295
100118c0:	b01d      	add	sp, #116	; 0x74
100118c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
100118c6:	89ab      	ldrh	r3, [r5, #12]
100118c8:	0598      	lsls	r0, r3, #22
100118ca:	d4f7      	bmi.n	100118bc <_vfiprintf_r+0x44>
100118cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
100118ce:	f7fe fbef 	bl	100100b0 <__retarget_lock_release_recursive>
100118d2:	e7f3      	b.n	100118bc <_vfiprintf_r+0x44>
100118d4:	2300      	movs	r3, #0
100118d6:	9309      	str	r3, [sp, #36]	; 0x24
100118d8:	2320      	movs	r3, #32
100118da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
100118de:	f8cd 800c 	str.w	r8, [sp, #12]
100118e2:	2330      	movs	r3, #48	; 0x30
100118e4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 10011a98 <_vfiprintf_r+0x220>
100118e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
100118ec:	f04f 0901 	mov.w	r9, #1
100118f0:	4623      	mov	r3, r4
100118f2:	469a      	mov	sl, r3
100118f4:	f813 2b01 	ldrb.w	r2, [r3], #1
100118f8:	b10a      	cbz	r2, 100118fe <_vfiprintf_r+0x86>
100118fa:	2a25      	cmp	r2, #37	; 0x25
100118fc:	d1f9      	bne.n	100118f2 <_vfiprintf_r+0x7a>
100118fe:	ebba 0b04 	subs.w	fp, sl, r4
10011902:	d00b      	beq.n	1001191c <_vfiprintf_r+0xa4>
10011904:	465b      	mov	r3, fp
10011906:	4622      	mov	r2, r4
10011908:	4629      	mov	r1, r5
1001190a:	4630      	mov	r0, r6
1001190c:	f7ff ffa1 	bl	10011852 <__sfputs_r>
10011910:	3001      	adds	r0, #1
10011912:	f000 80a9 	beq.w	10011a68 <_vfiprintf_r+0x1f0>
10011916:	9a09      	ldr	r2, [sp, #36]	; 0x24
10011918:	445a      	add	r2, fp
1001191a:	9209      	str	r2, [sp, #36]	; 0x24
1001191c:	f89a 3000 	ldrb.w	r3, [sl]
10011920:	2b00      	cmp	r3, #0
10011922:	f000 80a1 	beq.w	10011a68 <_vfiprintf_r+0x1f0>
10011926:	2300      	movs	r3, #0
10011928:	f04f 32ff 	mov.w	r2, #4294967295
1001192c:	e9cd 2305 	strd	r2, r3, [sp, #20]
10011930:	f10a 0a01 	add.w	sl, sl, #1
10011934:	9304      	str	r3, [sp, #16]
10011936:	9307      	str	r3, [sp, #28]
10011938:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1001193c:	931a      	str	r3, [sp, #104]	; 0x68
1001193e:	4654      	mov	r4, sl
10011940:	2205      	movs	r2, #5
10011942:	f814 1b01 	ldrb.w	r1, [r4], #1
10011946:	4854      	ldr	r0, [pc, #336]	; (10011a98 <_vfiprintf_r+0x220>)
10011948:	f7ee fb8a 	bl	10000060 <memchr>
1001194c:	9a04      	ldr	r2, [sp, #16]
1001194e:	b9d8      	cbnz	r0, 10011988 <_vfiprintf_r+0x110>
10011950:	06d1      	lsls	r1, r2, #27
10011952:	bf44      	itt	mi
10011954:	2320      	movmi	r3, #32
10011956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
1001195a:	0713      	lsls	r3, r2, #28
1001195c:	bf44      	itt	mi
1001195e:	232b      	movmi	r3, #43	; 0x2b
10011960:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
10011964:	f89a 3000 	ldrb.w	r3, [sl]
10011968:	2b2a      	cmp	r3, #42	; 0x2a
1001196a:	d015      	beq.n	10011998 <_vfiprintf_r+0x120>
1001196c:	9a07      	ldr	r2, [sp, #28]
1001196e:	4654      	mov	r4, sl
10011970:	2000      	movs	r0, #0
10011972:	f04f 0c0a 	mov.w	ip, #10
10011976:	4621      	mov	r1, r4
10011978:	f811 3b01 	ldrb.w	r3, [r1], #1
1001197c:	3b30      	subs	r3, #48	; 0x30
1001197e:	2b09      	cmp	r3, #9
10011980:	d94d      	bls.n	10011a1e <_vfiprintf_r+0x1a6>
10011982:	b1b0      	cbz	r0, 100119b2 <_vfiprintf_r+0x13a>
10011984:	9207      	str	r2, [sp, #28]
10011986:	e014      	b.n	100119b2 <_vfiprintf_r+0x13a>
10011988:	eba0 0308 	sub.w	r3, r0, r8
1001198c:	fa09 f303 	lsl.w	r3, r9, r3
10011990:	4313      	orrs	r3, r2
10011992:	9304      	str	r3, [sp, #16]
10011994:	46a2      	mov	sl, r4
10011996:	e7d2      	b.n	1001193e <_vfiprintf_r+0xc6>
10011998:	9b03      	ldr	r3, [sp, #12]
1001199a:	1d19      	adds	r1, r3, #4
1001199c:	681b      	ldr	r3, [r3, #0]
1001199e:	9103      	str	r1, [sp, #12]
100119a0:	2b00      	cmp	r3, #0
100119a2:	bfbb      	ittet	lt
100119a4:	425b      	neglt	r3, r3
100119a6:	f042 0202 	orrlt.w	r2, r2, #2
100119aa:	9307      	strge	r3, [sp, #28]
100119ac:	9307      	strlt	r3, [sp, #28]
100119ae:	bfb8      	it	lt
100119b0:	9204      	strlt	r2, [sp, #16]
100119b2:	7823      	ldrb	r3, [r4, #0]
100119b4:	2b2e      	cmp	r3, #46	; 0x2e
100119b6:	d10c      	bne.n	100119d2 <_vfiprintf_r+0x15a>
100119b8:	7863      	ldrb	r3, [r4, #1]
100119ba:	2b2a      	cmp	r3, #42	; 0x2a
100119bc:	d134      	bne.n	10011a28 <_vfiprintf_r+0x1b0>
100119be:	9b03      	ldr	r3, [sp, #12]
100119c0:	1d1a      	adds	r2, r3, #4
100119c2:	681b      	ldr	r3, [r3, #0]
100119c4:	9203      	str	r2, [sp, #12]
100119c6:	2b00      	cmp	r3, #0
100119c8:	bfb8      	it	lt
100119ca:	f04f 33ff 	movlt.w	r3, #4294967295
100119ce:	3402      	adds	r4, #2
100119d0:	9305      	str	r3, [sp, #20]
100119d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 10011aa8 <_vfiprintf_r+0x230>
100119d6:	7821      	ldrb	r1, [r4, #0]
100119d8:	2203      	movs	r2, #3
100119da:	4650      	mov	r0, sl
100119dc:	f7ee fb40 	bl	10000060 <memchr>
100119e0:	b138      	cbz	r0, 100119f2 <_vfiprintf_r+0x17a>
100119e2:	9b04      	ldr	r3, [sp, #16]
100119e4:	eba0 000a 	sub.w	r0, r0, sl
100119e8:	2240      	movs	r2, #64	; 0x40
100119ea:	4082      	lsls	r2, r0
100119ec:	4313      	orrs	r3, r2
100119ee:	3401      	adds	r4, #1
100119f0:	9304      	str	r3, [sp, #16]
100119f2:	f814 1b01 	ldrb.w	r1, [r4], #1
100119f6:	4829      	ldr	r0, [pc, #164]	; (10011a9c <_vfiprintf_r+0x224>)
100119f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
100119fc:	2206      	movs	r2, #6
100119fe:	f7ee fb2f 	bl	10000060 <memchr>
10011a02:	2800      	cmp	r0, #0
10011a04:	d03f      	beq.n	10011a86 <_vfiprintf_r+0x20e>
10011a06:	4b26      	ldr	r3, [pc, #152]	; (10011aa0 <_vfiprintf_r+0x228>)
10011a08:	bb1b      	cbnz	r3, 10011a52 <_vfiprintf_r+0x1da>
10011a0a:	9b03      	ldr	r3, [sp, #12]
10011a0c:	3307      	adds	r3, #7
10011a0e:	f023 0307 	bic.w	r3, r3, #7
10011a12:	3308      	adds	r3, #8
10011a14:	9303      	str	r3, [sp, #12]
10011a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011a18:	443b      	add	r3, r7
10011a1a:	9309      	str	r3, [sp, #36]	; 0x24
10011a1c:	e768      	b.n	100118f0 <_vfiprintf_r+0x78>
10011a1e:	fb0c 3202 	mla	r2, ip, r2, r3
10011a22:	460c      	mov	r4, r1
10011a24:	2001      	movs	r0, #1
10011a26:	e7a6      	b.n	10011976 <_vfiprintf_r+0xfe>
10011a28:	2300      	movs	r3, #0
10011a2a:	3401      	adds	r4, #1
10011a2c:	9305      	str	r3, [sp, #20]
10011a2e:	4619      	mov	r1, r3
10011a30:	f04f 0c0a 	mov.w	ip, #10
10011a34:	4620      	mov	r0, r4
10011a36:	f810 2b01 	ldrb.w	r2, [r0], #1
10011a3a:	3a30      	subs	r2, #48	; 0x30
10011a3c:	2a09      	cmp	r2, #9
10011a3e:	d903      	bls.n	10011a48 <_vfiprintf_r+0x1d0>
10011a40:	2b00      	cmp	r3, #0
10011a42:	d0c6      	beq.n	100119d2 <_vfiprintf_r+0x15a>
10011a44:	9105      	str	r1, [sp, #20]
10011a46:	e7c4      	b.n	100119d2 <_vfiprintf_r+0x15a>
10011a48:	fb0c 2101 	mla	r1, ip, r1, r2
10011a4c:	4604      	mov	r4, r0
10011a4e:	2301      	movs	r3, #1
10011a50:	e7f0      	b.n	10011a34 <_vfiprintf_r+0x1bc>
10011a52:	ab03      	add	r3, sp, #12
10011a54:	9300      	str	r3, [sp, #0]
10011a56:	462a      	mov	r2, r5
10011a58:	4b12      	ldr	r3, [pc, #72]	; (10011aa4 <_vfiprintf_r+0x22c>)
10011a5a:	a904      	add	r1, sp, #16
10011a5c:	4630      	mov	r0, r6
10011a5e:	f7fd fd77 	bl	1000f550 <_printf_float>
10011a62:	4607      	mov	r7, r0
10011a64:	1c78      	adds	r0, r7, #1
10011a66:	d1d6      	bne.n	10011a16 <_vfiprintf_r+0x19e>
10011a68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
10011a6a:	07d9      	lsls	r1, r3, #31
10011a6c:	d405      	bmi.n	10011a7a <_vfiprintf_r+0x202>
10011a6e:	89ab      	ldrh	r3, [r5, #12]
10011a70:	059a      	lsls	r2, r3, #22
10011a72:	d402      	bmi.n	10011a7a <_vfiprintf_r+0x202>
10011a74:	6da8      	ldr	r0, [r5, #88]	; 0x58
10011a76:	f7fe fb1b 	bl	100100b0 <__retarget_lock_release_recursive>
10011a7a:	89ab      	ldrh	r3, [r5, #12]
10011a7c:	065b      	lsls	r3, r3, #25
10011a7e:	f53f af1d 	bmi.w	100118bc <_vfiprintf_r+0x44>
10011a82:	9809      	ldr	r0, [sp, #36]	; 0x24
10011a84:	e71c      	b.n	100118c0 <_vfiprintf_r+0x48>
10011a86:	ab03      	add	r3, sp, #12
10011a88:	9300      	str	r3, [sp, #0]
10011a8a:	462a      	mov	r2, r5
10011a8c:	4b05      	ldr	r3, [pc, #20]	; (10011aa4 <_vfiprintf_r+0x22c>)
10011a8e:	a904      	add	r1, sp, #16
10011a90:	4630      	mov	r0, r6
10011a92:	f7fe f801 	bl	1000fa98 <_printf_i>
10011a96:	e7e4      	b.n	10011a62 <_vfiprintf_r+0x1ea>
10011a98:	10016aac 	.word	0x10016aac
10011a9c:	10016ab6 	.word	0x10016ab6
10011aa0:	1000f551 	.word	0x1000f551
10011aa4:	10011853 	.word	0x10011853
10011aa8:	10016ab2 	.word	0x10016ab2

10011aac <__sflush_r>:
10011aac:	898a      	ldrh	r2, [r1, #12]
10011aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10011ab2:	4605      	mov	r5, r0
10011ab4:	0710      	lsls	r0, r2, #28
10011ab6:	460c      	mov	r4, r1
10011ab8:	d458      	bmi.n	10011b6c <__sflush_r+0xc0>
10011aba:	684b      	ldr	r3, [r1, #4]
10011abc:	2b00      	cmp	r3, #0
10011abe:	dc05      	bgt.n	10011acc <__sflush_r+0x20>
10011ac0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10011ac2:	2b00      	cmp	r3, #0
10011ac4:	dc02      	bgt.n	10011acc <__sflush_r+0x20>
10011ac6:	2000      	movs	r0, #0
10011ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10011acc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
10011ace:	2e00      	cmp	r6, #0
10011ad0:	d0f9      	beq.n	10011ac6 <__sflush_r+0x1a>
10011ad2:	2300      	movs	r3, #0
10011ad4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
10011ad8:	682f      	ldr	r7, [r5, #0]
10011ada:	6a21      	ldr	r1, [r4, #32]
10011adc:	602b      	str	r3, [r5, #0]
10011ade:	d032      	beq.n	10011b46 <__sflush_r+0x9a>
10011ae0:	6d60      	ldr	r0, [r4, #84]	; 0x54
10011ae2:	89a3      	ldrh	r3, [r4, #12]
10011ae4:	075a      	lsls	r2, r3, #29
10011ae6:	d505      	bpl.n	10011af4 <__sflush_r+0x48>
10011ae8:	6863      	ldr	r3, [r4, #4]
10011aea:	1ac0      	subs	r0, r0, r3
10011aec:	6b63      	ldr	r3, [r4, #52]	; 0x34
10011aee:	b10b      	cbz	r3, 10011af4 <__sflush_r+0x48>
10011af0:	6c23      	ldr	r3, [r4, #64]	; 0x40
10011af2:	1ac0      	subs	r0, r0, r3
10011af4:	2300      	movs	r3, #0
10011af6:	4602      	mov	r2, r0
10011af8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
10011afa:	6a21      	ldr	r1, [r4, #32]
10011afc:	4628      	mov	r0, r5
10011afe:	47b0      	blx	r6
10011b00:	1c43      	adds	r3, r0, #1
10011b02:	89a3      	ldrh	r3, [r4, #12]
10011b04:	d106      	bne.n	10011b14 <__sflush_r+0x68>
10011b06:	6829      	ldr	r1, [r5, #0]
10011b08:	291d      	cmp	r1, #29
10011b0a:	d82b      	bhi.n	10011b64 <__sflush_r+0xb8>
10011b0c:	4a29      	ldr	r2, [pc, #164]	; (10011bb4 <__sflush_r+0x108>)
10011b0e:	410a      	asrs	r2, r1
10011b10:	07d6      	lsls	r6, r2, #31
10011b12:	d427      	bmi.n	10011b64 <__sflush_r+0xb8>
10011b14:	2200      	movs	r2, #0
10011b16:	6062      	str	r2, [r4, #4]
10011b18:	04d9      	lsls	r1, r3, #19
10011b1a:	6922      	ldr	r2, [r4, #16]
10011b1c:	6022      	str	r2, [r4, #0]
10011b1e:	d504      	bpl.n	10011b2a <__sflush_r+0x7e>
10011b20:	1c42      	adds	r2, r0, #1
10011b22:	d101      	bne.n	10011b28 <__sflush_r+0x7c>
10011b24:	682b      	ldr	r3, [r5, #0]
10011b26:	b903      	cbnz	r3, 10011b2a <__sflush_r+0x7e>
10011b28:	6560      	str	r0, [r4, #84]	; 0x54
10011b2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
10011b2c:	602f      	str	r7, [r5, #0]
10011b2e:	2900      	cmp	r1, #0
10011b30:	d0c9      	beq.n	10011ac6 <__sflush_r+0x1a>
10011b32:	f104 0344 	add.w	r3, r4, #68	; 0x44
10011b36:	4299      	cmp	r1, r3
10011b38:	d002      	beq.n	10011b40 <__sflush_r+0x94>
10011b3a:	4628      	mov	r0, r5
10011b3c:	f7ff f94a 	bl	10010dd4 <_free_r>
10011b40:	2000      	movs	r0, #0
10011b42:	6360      	str	r0, [r4, #52]	; 0x34
10011b44:	e7c0      	b.n	10011ac8 <__sflush_r+0x1c>
10011b46:	2301      	movs	r3, #1
10011b48:	4628      	mov	r0, r5
10011b4a:	47b0      	blx	r6
10011b4c:	1c41      	adds	r1, r0, #1
10011b4e:	d1c8      	bne.n	10011ae2 <__sflush_r+0x36>
10011b50:	682b      	ldr	r3, [r5, #0]
10011b52:	2b00      	cmp	r3, #0
10011b54:	d0c5      	beq.n	10011ae2 <__sflush_r+0x36>
10011b56:	2b1d      	cmp	r3, #29
10011b58:	d001      	beq.n	10011b5e <__sflush_r+0xb2>
10011b5a:	2b16      	cmp	r3, #22
10011b5c:	d101      	bne.n	10011b62 <__sflush_r+0xb6>
10011b5e:	602f      	str	r7, [r5, #0]
10011b60:	e7b1      	b.n	10011ac6 <__sflush_r+0x1a>
10011b62:	89a3      	ldrh	r3, [r4, #12]
10011b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10011b68:	81a3      	strh	r3, [r4, #12]
10011b6a:	e7ad      	b.n	10011ac8 <__sflush_r+0x1c>
10011b6c:	690f      	ldr	r7, [r1, #16]
10011b6e:	2f00      	cmp	r7, #0
10011b70:	d0a9      	beq.n	10011ac6 <__sflush_r+0x1a>
10011b72:	0793      	lsls	r3, r2, #30
10011b74:	680e      	ldr	r6, [r1, #0]
10011b76:	bf08      	it	eq
10011b78:	694b      	ldreq	r3, [r1, #20]
10011b7a:	600f      	str	r7, [r1, #0]
10011b7c:	bf18      	it	ne
10011b7e:	2300      	movne	r3, #0
10011b80:	eba6 0807 	sub.w	r8, r6, r7
10011b84:	608b      	str	r3, [r1, #8]
10011b86:	f1b8 0f00 	cmp.w	r8, #0
10011b8a:	dd9c      	ble.n	10011ac6 <__sflush_r+0x1a>
10011b8c:	6a21      	ldr	r1, [r4, #32]
10011b8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10011b90:	4643      	mov	r3, r8
10011b92:	463a      	mov	r2, r7
10011b94:	4628      	mov	r0, r5
10011b96:	47b0      	blx	r6
10011b98:	2800      	cmp	r0, #0
10011b9a:	dc06      	bgt.n	10011baa <__sflush_r+0xfe>
10011b9c:	89a3      	ldrh	r3, [r4, #12]
10011b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10011ba2:	81a3      	strh	r3, [r4, #12]
10011ba4:	f04f 30ff 	mov.w	r0, #4294967295
10011ba8:	e78e      	b.n	10011ac8 <__sflush_r+0x1c>
10011baa:	4407      	add	r7, r0
10011bac:	eba8 0800 	sub.w	r8, r8, r0
10011bb0:	e7e9      	b.n	10011b86 <__sflush_r+0xda>
10011bb2:	bf00      	nop
10011bb4:	dfbffffe 	.word	0xdfbffffe

10011bb8 <_fflush_r>:
10011bb8:	b538      	push	{r3, r4, r5, lr}
10011bba:	690b      	ldr	r3, [r1, #16]
10011bbc:	4605      	mov	r5, r0
10011bbe:	460c      	mov	r4, r1
10011bc0:	b913      	cbnz	r3, 10011bc8 <_fflush_r+0x10>
10011bc2:	2500      	movs	r5, #0
10011bc4:	4628      	mov	r0, r5
10011bc6:	bd38      	pop	{r3, r4, r5, pc}
10011bc8:	b118      	cbz	r0, 10011bd2 <_fflush_r+0x1a>
10011bca:	6a03      	ldr	r3, [r0, #32]
10011bcc:	b90b      	cbnz	r3, 10011bd2 <_fflush_r+0x1a>
10011bce:	f7fe f911 	bl	1000fdf4 <__sinit>
10011bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10011bd6:	2b00      	cmp	r3, #0
10011bd8:	d0f3      	beq.n	10011bc2 <_fflush_r+0xa>
10011bda:	6e62      	ldr	r2, [r4, #100]	; 0x64
10011bdc:	07d0      	lsls	r0, r2, #31
10011bde:	d404      	bmi.n	10011bea <_fflush_r+0x32>
10011be0:	0599      	lsls	r1, r3, #22
10011be2:	d402      	bmi.n	10011bea <_fflush_r+0x32>
10011be4:	6da0      	ldr	r0, [r4, #88]	; 0x58
10011be6:	f7fe fa62 	bl	100100ae <__retarget_lock_acquire_recursive>
10011bea:	4628      	mov	r0, r5
10011bec:	4621      	mov	r1, r4
10011bee:	f7ff ff5d 	bl	10011aac <__sflush_r>
10011bf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
10011bf4:	07da      	lsls	r2, r3, #31
10011bf6:	4605      	mov	r5, r0
10011bf8:	d4e4      	bmi.n	10011bc4 <_fflush_r+0xc>
10011bfa:	89a3      	ldrh	r3, [r4, #12]
10011bfc:	059b      	lsls	r3, r3, #22
10011bfe:	d4e1      	bmi.n	10011bc4 <_fflush_r+0xc>
10011c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
10011c02:	f7fe fa55 	bl	100100b0 <__retarget_lock_release_recursive>
10011c06:	e7dd      	b.n	10011bc4 <_fflush_r+0xc>

10011c08 <__swbuf_r>:
10011c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011c0a:	460e      	mov	r6, r1
10011c0c:	4614      	mov	r4, r2
10011c0e:	4605      	mov	r5, r0
10011c10:	b118      	cbz	r0, 10011c1a <__swbuf_r+0x12>
10011c12:	6a03      	ldr	r3, [r0, #32]
10011c14:	b90b      	cbnz	r3, 10011c1a <__swbuf_r+0x12>
10011c16:	f7fe f8ed 	bl	1000fdf4 <__sinit>
10011c1a:	69a3      	ldr	r3, [r4, #24]
10011c1c:	60a3      	str	r3, [r4, #8]
10011c1e:	89a3      	ldrh	r3, [r4, #12]
10011c20:	071a      	lsls	r2, r3, #28
10011c22:	d525      	bpl.n	10011c70 <__swbuf_r+0x68>
10011c24:	6923      	ldr	r3, [r4, #16]
10011c26:	b31b      	cbz	r3, 10011c70 <__swbuf_r+0x68>
10011c28:	6823      	ldr	r3, [r4, #0]
10011c2a:	6922      	ldr	r2, [r4, #16]
10011c2c:	1a98      	subs	r0, r3, r2
10011c2e:	6963      	ldr	r3, [r4, #20]
10011c30:	b2f6      	uxtb	r6, r6
10011c32:	4283      	cmp	r3, r0
10011c34:	4637      	mov	r7, r6
10011c36:	dc04      	bgt.n	10011c42 <__swbuf_r+0x3a>
10011c38:	4621      	mov	r1, r4
10011c3a:	4628      	mov	r0, r5
10011c3c:	f7ff ffbc 	bl	10011bb8 <_fflush_r>
10011c40:	b9e0      	cbnz	r0, 10011c7c <__swbuf_r+0x74>
10011c42:	68a3      	ldr	r3, [r4, #8]
10011c44:	3b01      	subs	r3, #1
10011c46:	60a3      	str	r3, [r4, #8]
10011c48:	6823      	ldr	r3, [r4, #0]
10011c4a:	1c5a      	adds	r2, r3, #1
10011c4c:	6022      	str	r2, [r4, #0]
10011c4e:	701e      	strb	r6, [r3, #0]
10011c50:	6962      	ldr	r2, [r4, #20]
10011c52:	1c43      	adds	r3, r0, #1
10011c54:	429a      	cmp	r2, r3
10011c56:	d004      	beq.n	10011c62 <__swbuf_r+0x5a>
10011c58:	89a3      	ldrh	r3, [r4, #12]
10011c5a:	07db      	lsls	r3, r3, #31
10011c5c:	d506      	bpl.n	10011c6c <__swbuf_r+0x64>
10011c5e:	2e0a      	cmp	r6, #10
10011c60:	d104      	bne.n	10011c6c <__swbuf_r+0x64>
10011c62:	4621      	mov	r1, r4
10011c64:	4628      	mov	r0, r5
10011c66:	f7ff ffa7 	bl	10011bb8 <_fflush_r>
10011c6a:	b938      	cbnz	r0, 10011c7c <__swbuf_r+0x74>
10011c6c:	4638      	mov	r0, r7
10011c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011c70:	4621      	mov	r1, r4
10011c72:	4628      	mov	r0, r5
10011c74:	f000 f806 	bl	10011c84 <__swsetup_r>
10011c78:	2800      	cmp	r0, #0
10011c7a:	d0d5      	beq.n	10011c28 <__swbuf_r+0x20>
10011c7c:	f04f 37ff 	mov.w	r7, #4294967295
10011c80:	e7f4      	b.n	10011c6c <__swbuf_r+0x64>
	...

10011c84 <__swsetup_r>:
10011c84:	b538      	push	{r3, r4, r5, lr}
10011c86:	4b2a      	ldr	r3, [pc, #168]	; (10011d30 <__swsetup_r+0xac>)
10011c88:	4605      	mov	r5, r0
10011c8a:	6818      	ldr	r0, [r3, #0]
10011c8c:	460c      	mov	r4, r1
10011c8e:	b118      	cbz	r0, 10011c98 <__swsetup_r+0x14>
10011c90:	6a03      	ldr	r3, [r0, #32]
10011c92:	b90b      	cbnz	r3, 10011c98 <__swsetup_r+0x14>
10011c94:	f7fe f8ae 	bl	1000fdf4 <__sinit>
10011c98:	89a3      	ldrh	r3, [r4, #12]
10011c9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
10011c9e:	0718      	lsls	r0, r3, #28
10011ca0:	d422      	bmi.n	10011ce8 <__swsetup_r+0x64>
10011ca2:	06d9      	lsls	r1, r3, #27
10011ca4:	d407      	bmi.n	10011cb6 <__swsetup_r+0x32>
10011ca6:	2309      	movs	r3, #9
10011ca8:	602b      	str	r3, [r5, #0]
10011caa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
10011cae:	81a3      	strh	r3, [r4, #12]
10011cb0:	f04f 30ff 	mov.w	r0, #4294967295
10011cb4:	e034      	b.n	10011d20 <__swsetup_r+0x9c>
10011cb6:	0758      	lsls	r0, r3, #29
10011cb8:	d512      	bpl.n	10011ce0 <__swsetup_r+0x5c>
10011cba:	6b61      	ldr	r1, [r4, #52]	; 0x34
10011cbc:	b141      	cbz	r1, 10011cd0 <__swsetup_r+0x4c>
10011cbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
10011cc2:	4299      	cmp	r1, r3
10011cc4:	d002      	beq.n	10011ccc <__swsetup_r+0x48>
10011cc6:	4628      	mov	r0, r5
10011cc8:	f7ff f884 	bl	10010dd4 <_free_r>
10011ccc:	2300      	movs	r3, #0
10011cce:	6363      	str	r3, [r4, #52]	; 0x34
10011cd0:	89a3      	ldrh	r3, [r4, #12]
10011cd2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
10011cd6:	81a3      	strh	r3, [r4, #12]
10011cd8:	2300      	movs	r3, #0
10011cda:	6063      	str	r3, [r4, #4]
10011cdc:	6923      	ldr	r3, [r4, #16]
10011cde:	6023      	str	r3, [r4, #0]
10011ce0:	89a3      	ldrh	r3, [r4, #12]
10011ce2:	f043 0308 	orr.w	r3, r3, #8
10011ce6:	81a3      	strh	r3, [r4, #12]
10011ce8:	6923      	ldr	r3, [r4, #16]
10011cea:	b94b      	cbnz	r3, 10011d00 <__swsetup_r+0x7c>
10011cec:	89a3      	ldrh	r3, [r4, #12]
10011cee:	f403 7320 	and.w	r3, r3, #640	; 0x280
10011cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
10011cf6:	d003      	beq.n	10011d00 <__swsetup_r+0x7c>
10011cf8:	4621      	mov	r1, r4
10011cfa:	4628      	mov	r0, r5
10011cfc:	f000 f8d3 	bl	10011ea6 <__smakebuf_r>
10011d00:	89a0      	ldrh	r0, [r4, #12]
10011d02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
10011d06:	f010 0301 	ands.w	r3, r0, #1
10011d0a:	d00a      	beq.n	10011d22 <__swsetup_r+0x9e>
10011d0c:	2300      	movs	r3, #0
10011d0e:	60a3      	str	r3, [r4, #8]
10011d10:	6963      	ldr	r3, [r4, #20]
10011d12:	425b      	negs	r3, r3
10011d14:	61a3      	str	r3, [r4, #24]
10011d16:	6923      	ldr	r3, [r4, #16]
10011d18:	b943      	cbnz	r3, 10011d2c <__swsetup_r+0xa8>
10011d1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
10011d1e:	d1c4      	bne.n	10011caa <__swsetup_r+0x26>
10011d20:	bd38      	pop	{r3, r4, r5, pc}
10011d22:	0781      	lsls	r1, r0, #30
10011d24:	bf58      	it	pl
10011d26:	6963      	ldrpl	r3, [r4, #20]
10011d28:	60a3      	str	r3, [r4, #8]
10011d2a:	e7f4      	b.n	10011d16 <__swsetup_r+0x92>
10011d2c:	2000      	movs	r0, #0
10011d2e:	e7f7      	b.n	10011d20 <__swsetup_r+0x9c>
10011d30:	10020bd0 	.word	0x10020bd0

10011d34 <memmove>:
10011d34:	4288      	cmp	r0, r1
10011d36:	b510      	push	{r4, lr}
10011d38:	eb01 0402 	add.w	r4, r1, r2
10011d3c:	d902      	bls.n	10011d44 <memmove+0x10>
10011d3e:	4284      	cmp	r4, r0
10011d40:	4623      	mov	r3, r4
10011d42:	d807      	bhi.n	10011d54 <memmove+0x20>
10011d44:	1e43      	subs	r3, r0, #1
10011d46:	42a1      	cmp	r1, r4
10011d48:	d008      	beq.n	10011d5c <memmove+0x28>
10011d4a:	f811 2b01 	ldrb.w	r2, [r1], #1
10011d4e:	f803 2f01 	strb.w	r2, [r3, #1]!
10011d52:	e7f8      	b.n	10011d46 <memmove+0x12>
10011d54:	4402      	add	r2, r0
10011d56:	4601      	mov	r1, r0
10011d58:	428a      	cmp	r2, r1
10011d5a:	d100      	bne.n	10011d5e <memmove+0x2a>
10011d5c:	bd10      	pop	{r4, pc}
10011d5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
10011d62:	f802 4d01 	strb.w	r4, [r2, #-1]!
10011d66:	e7f7      	b.n	10011d58 <memmove+0x24>

10011d68 <_raise_r>:
10011d68:	291f      	cmp	r1, #31
10011d6a:	b538      	push	{r3, r4, r5, lr}
10011d6c:	4604      	mov	r4, r0
10011d6e:	460d      	mov	r5, r1
10011d70:	d904      	bls.n	10011d7c <_raise_r+0x14>
10011d72:	2316      	movs	r3, #22
10011d74:	6003      	str	r3, [r0, #0]
10011d76:	f04f 30ff 	mov.w	r0, #4294967295
10011d7a:	bd38      	pop	{r3, r4, r5, pc}
10011d7c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
10011d7e:	b112      	cbz	r2, 10011d86 <_raise_r+0x1e>
10011d80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
10011d84:	b94b      	cbnz	r3, 10011d9a <_raise_r+0x32>
10011d86:	4620      	mov	r0, r4
10011d88:	f000 f830 	bl	10011dec <_getpid_r>
10011d8c:	462a      	mov	r2, r5
10011d8e:	4601      	mov	r1, r0
10011d90:	4620      	mov	r0, r4
10011d92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
10011d96:	f000 b817 	b.w	10011dc8 <_kill_r>
10011d9a:	2b01      	cmp	r3, #1
10011d9c:	d00a      	beq.n	10011db4 <_raise_r+0x4c>
10011d9e:	1c59      	adds	r1, r3, #1
10011da0:	d103      	bne.n	10011daa <_raise_r+0x42>
10011da2:	2316      	movs	r3, #22
10011da4:	6003      	str	r3, [r0, #0]
10011da6:	2001      	movs	r0, #1
10011da8:	e7e7      	b.n	10011d7a <_raise_r+0x12>
10011daa:	2400      	movs	r4, #0
10011dac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
10011db0:	4628      	mov	r0, r5
10011db2:	4798      	blx	r3
10011db4:	2000      	movs	r0, #0
10011db6:	e7e0      	b.n	10011d7a <_raise_r+0x12>

10011db8 <raise>:
10011db8:	4b02      	ldr	r3, [pc, #8]	; (10011dc4 <raise+0xc>)
10011dba:	4601      	mov	r1, r0
10011dbc:	6818      	ldr	r0, [r3, #0]
10011dbe:	f7ff bfd3 	b.w	10011d68 <_raise_r>
10011dc2:	bf00      	nop
10011dc4:	10020bd0 	.word	0x10020bd0

10011dc8 <_kill_r>:
10011dc8:	b538      	push	{r3, r4, r5, lr}
10011dca:	4d07      	ldr	r5, [pc, #28]	; (10011de8 <_kill_r+0x20>)
10011dcc:	2300      	movs	r3, #0
10011dce:	4604      	mov	r4, r0
10011dd0:	4608      	mov	r0, r1
10011dd2:	4611      	mov	r1, r2
10011dd4:	602b      	str	r3, [r5, #0]
10011dd6:	f000 fa19 	bl	1001220c <_kill>
10011dda:	1c43      	adds	r3, r0, #1
10011ddc:	d102      	bne.n	10011de4 <_kill_r+0x1c>
10011dde:	682b      	ldr	r3, [r5, #0]
10011de0:	b103      	cbz	r3, 10011de4 <_kill_r+0x1c>
10011de2:	6023      	str	r3, [r4, #0]
10011de4:	bd38      	pop	{r3, r4, r5, pc}
10011de6:	bf00      	nop
10011de8:	10029dd8 	.word	0x10029dd8

10011dec <_getpid_r>:
10011dec:	f000 b9fe 	b.w	100121ec <_getpid>

10011df0 <_calloc_r>:
10011df0:	b537      	push	{r0, r1, r2, r4, r5, lr}
10011df2:	fba1 2402 	umull	r2, r4, r1, r2
10011df6:	b94c      	cbnz	r4, 10011e0c <_calloc_r+0x1c>
10011df8:	4611      	mov	r1, r2
10011dfa:	9201      	str	r2, [sp, #4]
10011dfc:	f7fd fa4c 	bl	1000f298 <_malloc_r>
10011e00:	9a01      	ldr	r2, [sp, #4]
10011e02:	4605      	mov	r5, r0
10011e04:	b930      	cbnz	r0, 10011e14 <_calloc_r+0x24>
10011e06:	4628      	mov	r0, r5
10011e08:	b003      	add	sp, #12
10011e0a:	bd30      	pop	{r4, r5, pc}
10011e0c:	220c      	movs	r2, #12
10011e0e:	6002      	str	r2, [r0, #0]
10011e10:	2500      	movs	r5, #0
10011e12:	e7f8      	b.n	10011e06 <_calloc_r+0x16>
10011e14:	4621      	mov	r1, r4
10011e16:	f7fe f898 	bl	1000ff4a <memset>
10011e1a:	e7f4      	b.n	10011e06 <_calloc_r+0x16>

10011e1c <__ascii_mbtowc>:
10011e1c:	b082      	sub	sp, #8
10011e1e:	b901      	cbnz	r1, 10011e22 <__ascii_mbtowc+0x6>
10011e20:	a901      	add	r1, sp, #4
10011e22:	b142      	cbz	r2, 10011e36 <__ascii_mbtowc+0x1a>
10011e24:	b14b      	cbz	r3, 10011e3a <__ascii_mbtowc+0x1e>
10011e26:	7813      	ldrb	r3, [r2, #0]
10011e28:	600b      	str	r3, [r1, #0]
10011e2a:	7812      	ldrb	r2, [r2, #0]
10011e2c:	1e10      	subs	r0, r2, #0
10011e2e:	bf18      	it	ne
10011e30:	2001      	movne	r0, #1
10011e32:	b002      	add	sp, #8
10011e34:	4770      	bx	lr
10011e36:	4610      	mov	r0, r2
10011e38:	e7fb      	b.n	10011e32 <__ascii_mbtowc+0x16>
10011e3a:	f06f 0001 	mvn.w	r0, #1
10011e3e:	e7f8      	b.n	10011e32 <__ascii_mbtowc+0x16>

10011e40 <__ascii_wctomb>:
10011e40:	b149      	cbz	r1, 10011e56 <__ascii_wctomb+0x16>
10011e42:	2aff      	cmp	r2, #255	; 0xff
10011e44:	bf85      	ittet	hi
10011e46:	238a      	movhi	r3, #138	; 0x8a
10011e48:	6003      	strhi	r3, [r0, #0]
10011e4a:	700a      	strbls	r2, [r1, #0]
10011e4c:	f04f 30ff 	movhi.w	r0, #4294967295
10011e50:	bf98      	it	ls
10011e52:	2001      	movls	r0, #1
10011e54:	4770      	bx	lr
10011e56:	4608      	mov	r0, r1
10011e58:	4770      	bx	lr

10011e5a <__swhatbuf_r>:
10011e5a:	b570      	push	{r4, r5, r6, lr}
10011e5c:	460c      	mov	r4, r1
10011e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10011e62:	2900      	cmp	r1, #0
10011e64:	b096      	sub	sp, #88	; 0x58
10011e66:	4615      	mov	r5, r2
10011e68:	461e      	mov	r6, r3
10011e6a:	da0d      	bge.n	10011e88 <__swhatbuf_r+0x2e>
10011e6c:	89a3      	ldrh	r3, [r4, #12]
10011e6e:	f013 0f80 	tst.w	r3, #128	; 0x80
10011e72:	f04f 0100 	mov.w	r1, #0
10011e76:	bf0c      	ite	eq
10011e78:	f44f 6380 	moveq.w	r3, #1024	; 0x400
10011e7c:	2340      	movne	r3, #64	; 0x40
10011e7e:	2000      	movs	r0, #0
10011e80:	6031      	str	r1, [r6, #0]
10011e82:	602b      	str	r3, [r5, #0]
10011e84:	b016      	add	sp, #88	; 0x58
10011e86:	bd70      	pop	{r4, r5, r6, pc}
10011e88:	466a      	mov	r2, sp
10011e8a:	f000 f849 	bl	10011f20 <_fstat_r>
10011e8e:	2800      	cmp	r0, #0
10011e90:	dbec      	blt.n	10011e6c <__swhatbuf_r+0x12>
10011e92:	9901      	ldr	r1, [sp, #4]
10011e94:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
10011e98:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
10011e9c:	4259      	negs	r1, r3
10011e9e:	4159      	adcs	r1, r3
10011ea0:	f44f 6380 	mov.w	r3, #1024	; 0x400
10011ea4:	e7eb      	b.n	10011e7e <__swhatbuf_r+0x24>

10011ea6 <__smakebuf_r>:
10011ea6:	898b      	ldrh	r3, [r1, #12]
10011ea8:	b573      	push	{r0, r1, r4, r5, r6, lr}
10011eaa:	079d      	lsls	r5, r3, #30
10011eac:	4606      	mov	r6, r0
10011eae:	460c      	mov	r4, r1
10011eb0:	d507      	bpl.n	10011ec2 <__smakebuf_r+0x1c>
10011eb2:	f104 0347 	add.w	r3, r4, #71	; 0x47
10011eb6:	6023      	str	r3, [r4, #0]
10011eb8:	6123      	str	r3, [r4, #16]
10011eba:	2301      	movs	r3, #1
10011ebc:	6163      	str	r3, [r4, #20]
10011ebe:	b002      	add	sp, #8
10011ec0:	bd70      	pop	{r4, r5, r6, pc}
10011ec2:	ab01      	add	r3, sp, #4
10011ec4:	466a      	mov	r2, sp
10011ec6:	f7ff ffc8 	bl	10011e5a <__swhatbuf_r>
10011eca:	9900      	ldr	r1, [sp, #0]
10011ecc:	4605      	mov	r5, r0
10011ece:	4630      	mov	r0, r6
10011ed0:	f7fd f9e2 	bl	1000f298 <_malloc_r>
10011ed4:	b948      	cbnz	r0, 10011eea <__smakebuf_r+0x44>
10011ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10011eda:	059a      	lsls	r2, r3, #22
10011edc:	d4ef      	bmi.n	10011ebe <__smakebuf_r+0x18>
10011ede:	f023 0303 	bic.w	r3, r3, #3
10011ee2:	f043 0302 	orr.w	r3, r3, #2
10011ee6:	81a3      	strh	r3, [r4, #12]
10011ee8:	e7e3      	b.n	10011eb2 <__smakebuf_r+0xc>
10011eea:	89a3      	ldrh	r3, [r4, #12]
10011eec:	6020      	str	r0, [r4, #0]
10011eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
10011ef2:	81a3      	strh	r3, [r4, #12]
10011ef4:	9b00      	ldr	r3, [sp, #0]
10011ef6:	6163      	str	r3, [r4, #20]
10011ef8:	9b01      	ldr	r3, [sp, #4]
10011efa:	6120      	str	r0, [r4, #16]
10011efc:	b15b      	cbz	r3, 10011f16 <__smakebuf_r+0x70>
10011efe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
10011f02:	4630      	mov	r0, r6
10011f04:	f000 f81e 	bl	10011f44 <_isatty_r>
10011f08:	b128      	cbz	r0, 10011f16 <__smakebuf_r+0x70>
10011f0a:	89a3      	ldrh	r3, [r4, #12]
10011f0c:	f023 0303 	bic.w	r3, r3, #3
10011f10:	f043 0301 	orr.w	r3, r3, #1
10011f14:	81a3      	strh	r3, [r4, #12]
10011f16:	89a3      	ldrh	r3, [r4, #12]
10011f18:	431d      	orrs	r5, r3
10011f1a:	81a5      	strh	r5, [r4, #12]
10011f1c:	e7cf      	b.n	10011ebe <__smakebuf_r+0x18>
	...

10011f20 <_fstat_r>:
10011f20:	b538      	push	{r3, r4, r5, lr}
10011f22:	4d07      	ldr	r5, [pc, #28]	; (10011f40 <_fstat_r+0x20>)
10011f24:	2300      	movs	r3, #0
10011f26:	4604      	mov	r4, r0
10011f28:	4608      	mov	r0, r1
10011f2a:	4611      	mov	r1, r2
10011f2c:	602b      	str	r3, [r5, #0]
10011f2e:	f000 f955 	bl	100121dc <_fstat>
10011f32:	1c43      	adds	r3, r0, #1
10011f34:	d102      	bne.n	10011f3c <_fstat_r+0x1c>
10011f36:	682b      	ldr	r3, [r5, #0]
10011f38:	b103      	cbz	r3, 10011f3c <_fstat_r+0x1c>
10011f3a:	6023      	str	r3, [r4, #0]
10011f3c:	bd38      	pop	{r3, r4, r5, pc}
10011f3e:	bf00      	nop
10011f40:	10029dd8 	.word	0x10029dd8

10011f44 <_isatty_r>:
10011f44:	b538      	push	{r3, r4, r5, lr}
10011f46:	4d06      	ldr	r5, [pc, #24]	; (10011f60 <_isatty_r+0x1c>)
10011f48:	2300      	movs	r3, #0
10011f4a:	4604      	mov	r4, r0
10011f4c:	4608      	mov	r0, r1
10011f4e:	602b      	str	r3, [r5, #0]
10011f50:	f000 f954 	bl	100121fc <_isatty>
10011f54:	1c43      	adds	r3, r0, #1
10011f56:	d102      	bne.n	10011f5e <_isatty_r+0x1a>
10011f58:	682b      	ldr	r3, [r5, #0]
10011f5a:	b103      	cbz	r3, 10011f5e <_isatty_r+0x1a>
10011f5c:	6023      	str	r3, [r4, #0]
10011f5e:	bd38      	pop	{r3, r4, r5, pc}
10011f60:	10029dd8 	.word	0x10029dd8

10011f64 <expf>:
10011f64:	b508      	push	{r3, lr}
10011f66:	ed2d 8b02 	vpush	{d8}
10011f6a:	eef0 8a40 	vmov.f32	s17, s0
10011f6e:	f000 f85f 	bl	10012030 <__ieee754_expf>
10011f72:	eeb0 8a40 	vmov.f32	s16, s0
10011f76:	eeb0 0a68 	vmov.f32	s0, s17
10011f7a:	f000 f829 	bl	10011fd0 <finitef>
10011f7e:	b160      	cbz	r0, 10011f9a <expf+0x36>
10011f80:	eddf 7a0f 	vldr	s15, [pc, #60]	; 10011fc0 <expf+0x5c>
10011f84:	eef4 8ae7 	vcmpe.f32	s17, s15
10011f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
10011f8c:	dd0a      	ble.n	10011fa4 <expf+0x40>
10011f8e:	f7fe f863 	bl	10010058 <__errno>
10011f92:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 10011fc4 <expf+0x60>
10011f96:	2322      	movs	r3, #34	; 0x22
10011f98:	6003      	str	r3, [r0, #0]
10011f9a:	eeb0 0a48 	vmov.f32	s0, s16
10011f9e:	ecbd 8b02 	vpop	{d8}
10011fa2:	bd08      	pop	{r3, pc}
10011fa4:	eddf 7a08 	vldr	s15, [pc, #32]	; 10011fc8 <expf+0x64>
10011fa8:	eef4 8ae7 	vcmpe.f32	s17, s15
10011fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
10011fb0:	d5f3      	bpl.n	10011f9a <expf+0x36>
10011fb2:	f7fe f851 	bl	10010058 <__errno>
10011fb6:	2322      	movs	r3, #34	; 0x22
10011fb8:	ed9f 8a04 	vldr	s16, [pc, #16]	; 10011fcc <expf+0x68>
10011fbc:	6003      	str	r3, [r0, #0]
10011fbe:	e7ec      	b.n	10011f9a <expf+0x36>
10011fc0:	42b17217 	.word	0x42b17217
10011fc4:	7f800000 	.word	0x7f800000
10011fc8:	c2cff1b5 	.word	0xc2cff1b5
10011fcc:	00000000 	.word	0x00000000

10011fd0 <finitef>:
10011fd0:	b082      	sub	sp, #8
10011fd2:	ed8d 0a01 	vstr	s0, [sp, #4]
10011fd6:	9801      	ldr	r0, [sp, #4]
10011fd8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
10011fdc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
10011fe0:	bfac      	ite	ge
10011fe2:	2000      	movge	r0, #0
10011fe4:	2001      	movlt	r0, #1
10011fe6:	b002      	add	sp, #8
10011fe8:	4770      	bx	lr

10011fea <with_errnof>:
10011fea:	b513      	push	{r0, r1, r4, lr}
10011fec:	4604      	mov	r4, r0
10011fee:	ed8d 0a01 	vstr	s0, [sp, #4]
10011ff2:	f7fe f831 	bl	10010058 <__errno>
10011ff6:	ed9d 0a01 	vldr	s0, [sp, #4]
10011ffa:	6004      	str	r4, [r0, #0]
10011ffc:	b002      	add	sp, #8
10011ffe:	bd10      	pop	{r4, pc}

10012000 <xflowf>:
10012000:	b130      	cbz	r0, 10012010 <xflowf+0x10>
10012002:	eef1 7a40 	vneg.f32	s15, s0
10012006:	ee27 0a80 	vmul.f32	s0, s15, s0
1001200a:	2022      	movs	r0, #34	; 0x22
1001200c:	f7ff bfed 	b.w	10011fea <with_errnof>
10012010:	eef0 7a40 	vmov.f32	s15, s0
10012014:	e7f7      	b.n	10012006 <xflowf+0x6>
	...

10012018 <__math_uflowf>:
10012018:	ed9f 0a01 	vldr	s0, [pc, #4]	; 10012020 <__math_uflowf+0x8>
1001201c:	f7ff bff0 	b.w	10012000 <xflowf>
10012020:	10000000 	.word	0x10000000

10012024 <__math_oflowf>:
10012024:	ed9f 0a01 	vldr	s0, [pc, #4]	; 1001202c <__math_oflowf+0x8>
10012028:	f7ff bfea 	b.w	10012000 <xflowf>
1001202c:	70000000 	.word	0x70000000

10012030 <__ieee754_expf>:
10012030:	ee10 2a10 	vmov	r2, s0
10012034:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
10012038:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
1001203c:	d902      	bls.n	10012044 <__ieee754_expf+0x14>
1001203e:	ee30 0a00 	vadd.f32	s0, s0, s0
10012042:	4770      	bx	lr
10012044:	ea4f 71d2 	mov.w	r1, r2, lsr #31
10012048:	d106      	bne.n	10012058 <__ieee754_expf+0x28>
1001204a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 10012184 <__ieee754_expf+0x154>
1001204e:	2900      	cmp	r1, #0
10012050:	bf18      	it	ne
10012052:	eeb0 0a67 	vmovne.f32	s0, s15
10012056:	4770      	bx	lr
10012058:	484b      	ldr	r0, [pc, #300]	; (10012188 <__ieee754_expf+0x158>)
1001205a:	4282      	cmp	r2, r0
1001205c:	dd02      	ble.n	10012064 <__ieee754_expf+0x34>
1001205e:	2000      	movs	r0, #0
10012060:	f7ff bfe0 	b.w	10012024 <__math_oflowf>
10012064:	2a00      	cmp	r2, #0
10012066:	da05      	bge.n	10012074 <__ieee754_expf+0x44>
10012068:	4a48      	ldr	r2, [pc, #288]	; (1001218c <__ieee754_expf+0x15c>)
1001206a:	4293      	cmp	r3, r2
1001206c:	d902      	bls.n	10012074 <__ieee754_expf+0x44>
1001206e:	2000      	movs	r0, #0
10012070:	f7ff bfd2 	b.w	10012018 <__math_uflowf>
10012074:	4a46      	ldr	r2, [pc, #280]	; (10012190 <__ieee754_expf+0x160>)
10012076:	4293      	cmp	r3, r2
10012078:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
1001207c:	d952      	bls.n	10012124 <__ieee754_expf+0xf4>
1001207e:	4a45      	ldr	r2, [pc, #276]	; (10012194 <__ieee754_expf+0x164>)
10012080:	4293      	cmp	r3, r2
10012082:	ea4f 0281 	mov.w	r2, r1, lsl #2
10012086:	d834      	bhi.n	100120f2 <__ieee754_expf+0xc2>
10012088:	4b43      	ldr	r3, [pc, #268]	; (10012198 <__ieee754_expf+0x168>)
1001208a:	4413      	add	r3, r2
1001208c:	ed93 7a00 	vldr	s14, [r3]
10012090:	4b42      	ldr	r3, [pc, #264]	; (1001219c <__ieee754_expf+0x16c>)
10012092:	4413      	add	r3, r2
10012094:	ee30 7a47 	vsub.f32	s14, s0, s14
10012098:	f1c1 0201 	rsb	r2, r1, #1
1001209c:	edd3 7a00 	vldr	s15, [r3]
100120a0:	1a52      	subs	r2, r2, r1
100120a2:	ee37 0a67 	vsub.f32	s0, s14, s15
100120a6:	ee20 6a00 	vmul.f32	s12, s0, s0
100120aa:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 100121a0 <__ieee754_expf+0x170>
100120ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 100121a4 <__ieee754_expf+0x174>
100120b2:	eee6 6a05 	vfma.f32	s13, s12, s10
100120b6:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 100121a8 <__ieee754_expf+0x178>
100120ba:	eea6 5a86 	vfma.f32	s10, s13, s12
100120be:	eddf 6a3b 	vldr	s13, [pc, #236]	; 100121ac <__ieee754_expf+0x17c>
100120c2:	eee5 6a06 	vfma.f32	s13, s10, s12
100120c6:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 100121b0 <__ieee754_expf+0x180>
100120ca:	eea6 5a86 	vfma.f32	s10, s13, s12
100120ce:	eef0 6a40 	vmov.f32	s13, s0
100120d2:	eee5 6a46 	vfms.f32	s13, s10, s12
100120d6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
100120da:	ee20 5a26 	vmul.f32	s10, s0, s13
100120de:	bb92      	cbnz	r2, 10012146 <__ieee754_expf+0x116>
100120e0:	ee76 6ac6 	vsub.f32	s13, s13, s12
100120e4:	eec5 7a26 	vdiv.f32	s15, s10, s13
100120e8:	ee37 0ac0 	vsub.f32	s0, s15, s0
100120ec:	ee35 0ac0 	vsub.f32	s0, s11, s0
100120f0:	4770      	bx	lr
100120f2:	4b30      	ldr	r3, [pc, #192]	; (100121b4 <__ieee754_expf+0x184>)
100120f4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 100121b8 <__ieee754_expf+0x188>
100120f8:	eddf 6a30 	vldr	s13, [pc, #192]	; 100121bc <__ieee754_expf+0x18c>
100120fc:	4413      	add	r3, r2
100120fe:	edd3 7a00 	vldr	s15, [r3]
10012102:	eee0 7a07 	vfma.f32	s15, s0, s14
10012106:	eeb0 7a40 	vmov.f32	s14, s0
1001210a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
1001210e:	ee17 2a90 	vmov	r2, s15
10012112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
10012116:	eea7 7ae6 	vfms.f32	s14, s15, s13
1001211a:	eddf 6a29 	vldr	s13, [pc, #164]	; 100121c0 <__ieee754_expf+0x190>
1001211e:	ee67 7aa6 	vmul.f32	s15, s15, s13
10012122:	e7be      	b.n	100120a2 <__ieee754_expf+0x72>
10012124:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
10012128:	d20b      	bcs.n	10012142 <__ieee754_expf+0x112>
1001212a:	eddf 6a26 	vldr	s13, [pc, #152]	; 100121c4 <__ieee754_expf+0x194>
1001212e:	ee70 6a26 	vadd.f32	s13, s0, s13
10012132:	eef4 6ae5 	vcmpe.f32	s13, s11
10012136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1001213a:	dd02      	ble.n	10012142 <__ieee754_expf+0x112>
1001213c:	ee30 0a25 	vadd.f32	s0, s0, s11
10012140:	4770      	bx	lr
10012142:	2200      	movs	r2, #0
10012144:	e7af      	b.n	100120a6 <__ieee754_expf+0x76>
10012146:	ee36 6a66 	vsub.f32	s12, s12, s13
1001214a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
1001214e:	eec5 6a06 	vdiv.f32	s13, s10, s12
10012152:	bfb8      	it	lt
10012154:	3264      	addlt	r2, #100	; 0x64
10012156:	ee77 7ae6 	vsub.f32	s15, s15, s13
1001215a:	ee77 7ac7 	vsub.f32	s15, s15, s14
1001215e:	ee75 7ae7 	vsub.f32	s15, s11, s15
10012162:	ee17 3a90 	vmov	r3, s15
10012166:	bfab      	itete	ge
10012168:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
1001216c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
10012170:	ee00 3a10 	vmovge	s0, r3
10012174:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 100121c8 <__ieee754_expf+0x198>
10012178:	bfbc      	itt	lt
1001217a:	ee00 3a10 	vmovlt	s0, r3
1001217e:	ee20 0a27 	vmullt.f32	s0, s0, s15
10012182:	4770      	bx	lr
10012184:	00000000 	.word	0x00000000
10012188:	42b17217 	.word	0x42b17217
1001218c:	42cff1b5 	.word	0x42cff1b5
10012190:	3eb17218 	.word	0x3eb17218
10012194:	3f851591 	.word	0x3f851591
10012198:	10016bd0 	.word	0x10016bd0
1001219c:	10016bd8 	.word	0x10016bd8
100121a0:	3331bb4c 	.word	0x3331bb4c
100121a4:	b5ddea0e 	.word	0xb5ddea0e
100121a8:	388ab355 	.word	0x388ab355
100121ac:	bb360b61 	.word	0xbb360b61
100121b0:	3e2aaaab 	.word	0x3e2aaaab
100121b4:	10016bc8 	.word	0x10016bc8
100121b8:	3fb8aa3b 	.word	0x3fb8aa3b
100121bc:	3f317180 	.word	0x3f317180
100121c0:	3717f7d1 	.word	0x3717f7d1
100121c4:	7149f2ca 	.word	0x7149f2ca
100121c8:	0d800000 	.word	0x0d800000

100121cc <_close>:
100121cc:	4b02      	ldr	r3, [pc, #8]	; (100121d8 <_close+0xc>)
100121ce:	2258      	movs	r2, #88	; 0x58
100121d0:	601a      	str	r2, [r3, #0]
100121d2:	f04f 30ff 	mov.w	r0, #4294967295
100121d6:	4770      	bx	lr
100121d8:	10029dd8 	.word	0x10029dd8

100121dc <_fstat>:
100121dc:	4b02      	ldr	r3, [pc, #8]	; (100121e8 <_fstat+0xc>)
100121de:	2258      	movs	r2, #88	; 0x58
100121e0:	601a      	str	r2, [r3, #0]
100121e2:	f04f 30ff 	mov.w	r0, #4294967295
100121e6:	4770      	bx	lr
100121e8:	10029dd8 	.word	0x10029dd8

100121ec <_getpid>:
100121ec:	4b02      	ldr	r3, [pc, #8]	; (100121f8 <_getpid+0xc>)
100121ee:	2258      	movs	r2, #88	; 0x58
100121f0:	601a      	str	r2, [r3, #0]
100121f2:	f04f 30ff 	mov.w	r0, #4294967295
100121f6:	4770      	bx	lr
100121f8:	10029dd8 	.word	0x10029dd8

100121fc <_isatty>:
100121fc:	4b02      	ldr	r3, [pc, #8]	; (10012208 <_isatty+0xc>)
100121fe:	2258      	movs	r2, #88	; 0x58
10012200:	601a      	str	r2, [r3, #0]
10012202:	2000      	movs	r0, #0
10012204:	4770      	bx	lr
10012206:	bf00      	nop
10012208:	10029dd8 	.word	0x10029dd8

1001220c <_kill>:
1001220c:	4b02      	ldr	r3, [pc, #8]	; (10012218 <_kill+0xc>)
1001220e:	2258      	movs	r2, #88	; 0x58
10012210:	601a      	str	r2, [r3, #0]
10012212:	f04f 30ff 	mov.w	r0, #4294967295
10012216:	4770      	bx	lr
10012218:	10029dd8 	.word	0x10029dd8

1001221c <_lseek>:
1001221c:	4b02      	ldr	r3, [pc, #8]	; (10012228 <_lseek+0xc>)
1001221e:	2258      	movs	r2, #88	; 0x58
10012220:	601a      	str	r2, [r3, #0]
10012222:	f04f 30ff 	mov.w	r0, #4294967295
10012226:	4770      	bx	lr
10012228:	10029dd8 	.word	0x10029dd8

1001222c <_read>:
1001222c:	4b02      	ldr	r3, [pc, #8]	; (10012238 <_read+0xc>)
1001222e:	2258      	movs	r2, #88	; 0x58
10012230:	601a      	str	r2, [r3, #0]
10012232:	f04f 30ff 	mov.w	r0, #4294967295
10012236:	4770      	bx	lr
10012238:	10029dd8 	.word	0x10029dd8

1001223c <_write>:
1001223c:	4b02      	ldr	r3, [pc, #8]	; (10012248 <_write+0xc>)
1001223e:	2258      	movs	r2, #88	; 0x58
10012240:	601a      	str	r2, [r3, #0]
10012242:	f04f 30ff 	mov.w	r0, #4294967295
10012246:	4770      	bx	lr
10012248:	10029dd8 	.word	0x10029dd8

1001224c <_exit>:
1001224c:	e7fe      	b.n	1001224c <_exit>
	...

10012250 <_init>:
10012250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012252:	bf00      	nop
10012254:	bcf8      	pop	{r3, r4, r5, r6, r7}
10012256:	bc08      	pop	{r3}
10012258:	469e      	mov	lr, r3
1001225a:	4770      	bx	lr

1001225c <_fini>:
1001225c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001225e:	bf00      	nop
10012260:	bcf8      	pop	{r3, r4, r5, r6, r7}
10012262:	bc08      	pop	{r3}
10012264:	469e      	mov	lr, r3
10012266:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

10012268 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
10012268:	f8df d034 	ldr.w	sp, [pc, #52]	; 100122a0 <LoopForever+0x2>
  movs  r1, #0
1001226c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
1001226e:	e003      	b.n	10012278 <LoopCopyDataInit>

10012270 <CopyDataInit>:
  ldr  r3, =_sidata
10012270:	4b0c      	ldr	r3, [pc, #48]	; (100122a4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
10012272:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10012274:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10012276:	3104      	adds	r1, #4

10012278 <LoopCopyDataInit>:
  ldr  r0, =_sdata
10012278:	480b      	ldr	r0, [pc, #44]	; (100122a8 <LoopForever+0xa>)
  ldr  r3, =_edata
1001227a:	4b0c      	ldr	r3, [pc, #48]	; (100122ac <LoopForever+0xe>)
  adds  r2, r0, r1
1001227c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
1001227e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10012280:	d3f6      	bcc.n	10012270 <CopyDataInit>
  ldr  r2, =_sbss
10012282:	4a0b      	ldr	r2, [pc, #44]	; (100122b0 <LoopForever+0x12>)
  b  LoopFillZerobss
10012284:	e002      	b.n	1001228c <LoopFillZerobss>

10012286 <FillZerobss>:
  movs  r3, #0
10012286:	2300      	movs	r3, #0
  str  r3, [r2], #4
10012288:	f842 3b04 	str.w	r3, [r2], #4

1001228c <LoopFillZerobss>:
  ldr  r3, = _ebss
1001228c:	4b09      	ldr	r3, [pc, #36]	; (100122b4 <LoopForever+0x16>)
  cmp  r2, r3
1001228e:	429a      	cmp	r2, r3
  bcc  FillZerobss
10012290:	d3f9      	bcc.n	10012286 <FillZerobss>
  bl  SystemInit
10012292:	f7ee fbd1 	bl	10000a38 <SystemInit>
 bl __libc_init_array
10012296:	f7fd fee5 	bl	10010064 <__libc_init_array>
  bl main
1001229a:	f7ee fbf3 	bl	10000a84 <main>

1001229e <LoopForever>:
    b LoopForever
1001229e:	e7fe      	b.n	1001229e <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
100122a0:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
100122a4:	10016be8 	.word	0x10016be8
  ldr  r0, =_sdata
100122a8:	10020000 	.word	0x10020000
  ldr  r3, =_edata
100122ac:	10020d40 	.word	0x10020d40
  ldr  r2, =_sbss
100122b0:	10020dcc 	.word	0x10020dcc
  ldr  r3, = _ebss
100122b4:	10029de0 	.word	0x10029de0
